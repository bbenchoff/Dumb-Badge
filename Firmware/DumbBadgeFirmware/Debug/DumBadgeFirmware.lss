
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065c8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a4  20000000  000065c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000270  200000a4  0000666c  000200a4  2**2
                  ALLOC
  3 .stack        00002004  20000314  000068dc  000200a4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   000374c4  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000505e  00000000  00000000  000575e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006300  00000000  00000000  0005c647  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006e0  00000000  00000000  00062947  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007d0  00000000  00000000  00063027  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e764  00000000  00000000  000637f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012790  00000000  00000000  00081f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000900a0  00000000  00000000  000946eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001858  00000000  00000000  0012478c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	18 23 00 20 75 1b 00 00 71 1b 00 00 71 1b 00 00     .#. u...q...q...
	...
      2c:	71 1b 00 00 00 00 00 00 00 00 00 00 71 1b 00 00     q...........q...
      3c:	35 2e 00 00 71 1b 00 00 71 1b 00 00 71 1b 00 00     5...q...q...q...
      4c:	71 1b 00 00 71 1b 00 00 71 1b 00 00 71 1b 00 00     q...q...q...q...
      5c:	71 1b 00 00 71 1b 00 00 15 0e 00 00 25 0e 00 00     q...q.......%...
      6c:	35 0e 00 00 45 0e 00 00 55 0e 00 00 65 0e 00 00     5...E...U...e...
      7c:	71 1b 00 00 71 1b 00 00 71 1b 00 00 71 1b 00 00     q...q...q...q...
      8c:	71 1b 00 00 71 1b 00 00 71 1b 00 00 71 1b 00 00     q...q...q...q...
      9c:	49 09 00 00 71 1b 00 00 71 1b 00 00 71 1b 00 00     I...q...q...q...
      ac:	71 1b 00 00 00 00 00 00                             q.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a4 	.word	0x200000a4
      d4:	00000000 	.word	0x00000000
      d8:	000065c8 	.word	0x000065c8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a8 	.word	0x200000a8
     108:	000065c8 	.word	0x000065c8
     10c:	000065c8 	.word	0x000065c8
     110:	00000000 	.word	0x00000000

00000114 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b0c1      	sub	sp, #260	; 0x104
     118:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     11a:	22d0      	movs	r2, #208	; 0xd0
     11c:	492d      	ldr	r1, [pc, #180]	; (1d4 <drawKare+0xc0>)
     11e:	a80c      	add	r0, sp, #48	; 0x30
     120:	4b2d      	ldr	r3, [pc, #180]	; (1d8 <drawKare+0xc4>)
     122:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     124:	a805      	add	r0, sp, #20
     126:	4b2d      	ldr	r3, [pc, #180]	; (1dc <drawKare+0xc8>)
     128:	001a      	movs	r2, r3
     12a:	3250      	adds	r2, #80	; 0x50
     12c:	0001      	movs	r1, r0
     12e:	ca31      	ldmia	r2!, {r0, r4, r5}
     130:	c131      	stmia	r1!, {r0, r4, r5}
     132:	ca31      	ldmia	r2!, {r0, r4, r5}
     134:	c131      	stmia	r1!, {r0, r4, r5}
     136:	6812      	ldr	r2, [r2, #0]
     138:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     13a:	336c      	adds	r3, #108	; 0x6c
     13c:	466a      	mov	r2, sp
     13e:	cb13      	ldmia	r3!, {r0, r1, r4}
     140:	c213      	stmia	r2!, {r0, r1, r4}
     142:	cb03      	ldmia	r3!, {r0, r1}
     144:	c203      	stmia	r2!, {r0, r1}
     146:	ac0c      	add	r4, sp, #48	; 0x30
     148:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     14a:	4d25      	ldr	r5, [pc, #148]	; (1e0 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     14c:	88e3      	ldrh	r3, [r4, #6]
     14e:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     150:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     152:	88a2      	ldrh	r2, [r4, #4]
     154:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     156:	322d      	adds	r2, #45	; 0x2d
     158:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     15a:	8861      	ldrh	r1, [r4, #2]
     15c:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     15e:	3196      	adds	r1, #150	; 0x96
     160:	8820      	ldrh	r0, [r4, #0]
     162:	1040      	asrs	r0, r0, #1
     164:	302d      	adds	r0, #45	; 0x2d
     166:	30ff      	adds	r0, #255	; 0xff
     168:	47a8      	blx	r5
     16a:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     16c:	42b4      	cmp	r4, r6
     16e:	d1ed      	bne.n	14c <drawKare+0x38>
	}
	switch(emotion)
     170:	2f00      	cmp	r7, #0
     172:	d003      	beq.n	17c <drawKare+0x68>
     174:	2f01      	cmp	r7, #1
     176:	d017      	beq.n	1a8 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     178:	b041      	add	sp, #260	; 0x104
     17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     17c:	ac05      	add	r4, sp, #20
     17e:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     180:	4d17      	ldr	r5, [pc, #92]	; (1e0 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     182:	78e3      	ldrb	r3, [r4, #3]
     184:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     186:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     188:	78a2      	ldrb	r2, [r4, #2]
     18a:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     18c:	322d      	adds	r2, #45	; 0x2d
     18e:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     190:	7861      	ldrb	r1, [r4, #1]
     192:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     194:	3196      	adds	r1, #150	; 0x96
     196:	7820      	ldrb	r0, [r4, #0]
     198:	1040      	asrs	r0, r0, #1
     19a:	302d      	adds	r0, #45	; 0x2d
     19c:	30ff      	adds	r0, #255	; 0xff
     19e:	47a8      	blx	r5
     1a0:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     1a2:	42a6      	cmp	r6, r4
     1a4:	d1ed      	bne.n	182 <drawKare+0x6e>
     1a6:	e7e7      	b.n	178 <drawKare+0x64>
     1a8:	466c      	mov	r4, sp
     1aa:	ae05      	add	r6, sp, #20
			fillRect((
     1ac:	4d0c      	ldr	r5, [pc, #48]	; (1e0 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     1ae:	78e3      	ldrb	r3, [r4, #3]
     1b0:	105b      	asrs	r3, r3, #1
			fillRect((
     1b2:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     1b4:	78a2      	ldrb	r2, [r4, #2]
     1b6:	1052      	asrs	r2, r2, #1
			fillRect((
     1b8:	322d      	adds	r2, #45	; 0x2d
     1ba:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     1bc:	7861      	ldrb	r1, [r4, #1]
     1be:	1049      	asrs	r1, r1, #1
			fillRect((
     1c0:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     1c2:	7820      	ldrb	r0, [r4, #0]
     1c4:	1040      	asrs	r0, r0, #1
			fillRect((
     1c6:	302d      	adds	r0, #45	; 0x2d
     1c8:	30ff      	adds	r0, #255	; 0xff
     1ca:	47a8      	blx	r5
     1cc:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     1ce:	42b4      	cmp	r4, r6
     1d0:	d1ed      	bne.n	1ae <drawKare+0x9a>
     1d2:	e7d1      	b.n	178 <drawKare+0x64>
     1d4:	000043a0 	.word	0x000043a0
     1d8:	000032b5 	.word	0x000032b5
     1dc:	00004420 	.word	0x00004420
     1e0:	000029a1 	.word	0x000029a1

000001e4 <splashScreen>:

void splashScreen(void)
{
     1e4:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0] = "Unix epoch minus 0xFF days";//
     1e6:	4c49      	ldr	r4, [pc, #292]	; (30c <splashScreen+0x128>)
     1e8:	4b49      	ldr	r3, [pc, #292]	; (310 <splashScreen+0x12c>)
     1ea:	6023      	str	r3, [r4, #0]
	splashText[1] = "13^5 + 16^5 = 17^5";//
     1ec:	4b49      	ldr	r3, [pc, #292]	; (314 <splashScreen+0x130>)
     1ee:	6063      	str	r3, [r4, #4]
	splashText[2] = "Reticulating Splines";//
     1f0:	4b49      	ldr	r3, [pc, #292]	; (318 <splashScreen+0x134>)
     1f2:	60a3      	str	r3, [r4, #8]
	splashText[3] = "Violence works";//
     1f4:	4b49      	ldr	r3, [pc, #292]	; (31c <splashScreen+0x138>)
     1f6:	60e3      	str	r3, [r4, #12]
	splashText[4] = "Tabs!";//
     1f8:	4b49      	ldr	r3, [pc, #292]	; (320 <splashScreen+0x13c>)
     1fa:	6123      	str	r3, [r4, #16]
	splashText[5] = "Kill Billionaires (and Trillionaire)";//
     1fc:	4b49      	ldr	r3, [pc, #292]	; (324 <splashScreen+0x140>)
     1fe:	6163      	str	r3, [r4, #20]
	splashText[6] = "Interest in technology is not a personality";//
     200:	4b49      	ldr	r3, [pc, #292]	; (328 <splashScreen+0x144>)
     202:	61a3      	str	r3, [r4, #24]
	splashText[7] = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     204:	4b49      	ldr	r3, [pc, #292]	; (32c <splashScreen+0x148>)
     206:	61e3      	str	r3, [r4, #28]
	splashText[8] = "No gods. No masters. No external libraries.";//
     208:	4b49      	ldr	r3, [pc, #292]	; (330 <splashScreen+0x14c>)
     20a:	6223      	str	r3, [r4, #32]
	splashText[9] = "Spaces!";//
     20c:	4b49      	ldr	r3, [pc, #292]	; (334 <splashScreen+0x150>)
     20e:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     210:	4b49      	ldr	r3, [pc, #292]	; (338 <splashScreen+0x154>)
     212:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     214:	4b49      	ldr	r3, [pc, #292]	; (33c <splashScreen+0x158>)
     216:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     218:	4b49      	ldr	r3, [pc, #292]	; (340 <splashScreen+0x15c>)
     21a:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage symmetric class warfare";//
     21c:	4b49      	ldr	r3, [pc, #292]	; (344 <splashScreen+0x160>)
     21e:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     220:	4b49      	ldr	r3, [pc, #292]	; (348 <splashScreen+0x164>)
     222:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     224:	4b49      	ldr	r3, [pc, #292]	; (34c <splashScreen+0x168>)
     226:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Trans rights are human rights";//
     228:	4b49      	ldr	r3, [pc, #292]	; (350 <splashScreen+0x16c>)
     22a:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     22c:	4b49      	ldr	r3, [pc, #292]	; (354 <splashScreen+0x170>)
     22e:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     230:	4b49      	ldr	r3, [pc, #292]	; (358 <splashScreen+0x174>)
     232:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     234:	4b49      	ldr	r3, [pc, #292]	; (35c <splashScreen+0x178>)
     236:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     238:	4b49      	ldr	r3, [pc, #292]	; (360 <splashScreen+0x17c>)
     23a:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     23c:	4b49      	ldr	r3, [pc, #292]	; (364 <splashScreen+0x180>)
     23e:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     240:	4b49      	ldr	r3, [pc, #292]	; (368 <splashScreen+0x184>)
     242:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     244:	4b49      	ldr	r3, [pc, #292]	; (36c <splashScreen+0x188>)
     246:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "The source of the Mississippi river is in Pennsylvania.";
     248:	4b49      	ldr	r3, [pc, #292]	; (370 <splashScreen+0x18c>)
     24a:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     24c:	4b49      	ldr	r3, [pc, #292]	; (374 <splashScreen+0x190>)
     24e:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "Follow World Pog Federation    @WorldPog";//
     250:	4b49      	ldr	r3, [pc, #292]	; (378 <splashScreen+0x194>)
     252:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     254:	4b49      	ldr	r3, [pc, #292]	; (37c <splashScreen+0x198>)
     256:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     258:	4b49      	ldr	r3, [pc, #292]	; (380 <splashScreen+0x19c>)
     25a:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "I cAn OpEn A LoCk WiTh A sOdA cAn";//
     25c:	4b49      	ldr	r3, [pc, #292]	; (384 <splashScreen+0x1a0>)
     25e:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     260:	4b49      	ldr	r3, [pc, #292]	; (388 <splashScreen+0x1a4>)
     262:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     264:	4b49      	ldr	r3, [pc, #292]	; (38c <splashScreen+0x1a8>)
     266:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     268:	4a49      	ldr	r2, [pc, #292]	; (390 <splashScreen+0x1ac>)
     26a:	2380      	movs	r3, #128	; 0x80
     26c:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[((rand()%32))];
     26e:	4b49      	ldr	r3, [pc, #292]	; (394 <splashScreen+0x1b0>)
     270:	4798      	blx	r3
     272:	17c3      	asrs	r3, r0, #31
     274:	0edb      	lsrs	r3, r3, #27
     276:	18c2      	adds	r2, r0, r3
     278:	201f      	movs	r0, #31
     27a:	4010      	ands	r0, r2
     27c:	1ac0      	subs	r0, r0, r3
     27e:	0080      	lsls	r0, r0, #2
     280:	5904      	ldr	r4, [r0, r4]
	
	
	clearScreen();
     282:	4b45      	ldr	r3, [pc, #276]	; (398 <splashScreen+0x1b4>)
     284:	4798      	blx	r3
	setColorRGB(255,255,255);
     286:	22ff      	movs	r2, #255	; 0xff
     288:	21ff      	movs	r1, #255	; 0xff
     28a:	20ff      	movs	r0, #255	; 0xff
     28c:	4b43      	ldr	r3, [pc, #268]	; (39c <splashScreen+0x1b8>)
     28e:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     290:	2280      	movs	r2, #128	; 0x80
     292:	0612      	lsls	r2, r2, #24
     294:	4b42      	ldr	r3, [pc, #264]	; (3a0 <splashScreen+0x1bc>)
     296:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     298:	4b42      	ldr	r3, [pc, #264]	; (3a4 <splashScreen+0x1c0>)
     29a:	22df      	movs	r2, #223	; 0xdf
     29c:	5c99      	ldrb	r1, [r3, r2]
     29e:	2004      	movs	r0, #4
     2a0:	4301      	orrs	r1, r0
     2a2:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     2a4:	5c99      	ldrb	r1, [r3, r2]
     2a6:	2002      	movs	r0, #2
     2a8:	4301      	orrs	r1, r0
     2aa:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     2ac:	3a3f      	subs	r2, #63	; 0x3f
     2ae:	589b      	ldr	r3, [r3, r2]
     2b0:	2b00      	cmp	r3, #0
     2b2:	db26      	blt.n	302 <splashScreen+0x11e>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     2b4:	2000      	movs	r0, #0
     2b6:	4b3c      	ldr	r3, [pc, #240]	; (3a8 <splashScreen+0x1c4>)
     2b8:	4798      	blx	r3
	
	setDrawDirection();
     2ba:	4b3c      	ldr	r3, [pc, #240]	; (3ac <splashScreen+0x1c8>)
     2bc:	4798      	blx	r3
	
	xCharPos = 40 - (strlen(textPhrase)/2);
     2be:	0020      	movs	r0, r4
     2c0:	4b3b      	ldr	r3, [pc, #236]	; (3b0 <splashScreen+0x1cc>)
     2c2:	4798      	blx	r3
     2c4:	4e3b      	ldr	r6, [pc, #236]	; (3b4 <splashScreen+0x1d0>)
     2c6:	0840      	lsrs	r0, r0, #1
     2c8:	2328      	movs	r3, #40	; 0x28
     2ca:	1a18      	subs	r0, r3, r0
     2cc:	7030      	strb	r0, [r6, #0]
	yCharPos = 16;
     2ce:	4d3a      	ldr	r5, [pc, #232]	; (3b8 <splashScreen+0x1d4>)
     2d0:	2310      	movs	r3, #16
     2d2:	702b      	strb	r3, [r5, #0]
	
	writeString(textPhrase);
     2d4:	0020      	movs	r0, r4
     2d6:	4b39      	ldr	r3, [pc, #228]	; (3bc <splashScreen+0x1d8>)
     2d8:	4798      	blx	r3
	delay_ms(2000);
     2da:	20fa      	movs	r0, #250	; 0xfa
     2dc:	00c0      	lsls	r0, r0, #3
     2de:	4b38      	ldr	r3, [pc, #224]	; (3c0 <splashScreen+0x1dc>)
     2e0:	4798      	blx	r3
	clearScreen();
     2e2:	4b2d      	ldr	r3, [pc, #180]	; (398 <splashScreen+0x1b4>)
     2e4:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     2e6:	2200      	movs	r2, #0
     2e8:	21ff      	movs	r1, #255	; 0xff
     2ea:	2000      	movs	r0, #0
     2ec:	4b2b      	ldr	r3, [pc, #172]	; (39c <splashScreen+0x1b8>)
     2ee:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     2f0:	2200      	movs	r2, #0
     2f2:	2100      	movs	r1, #0
     2f4:	2000      	movs	r0, #0
     2f6:	4b33      	ldr	r3, [pc, #204]	; (3c4 <splashScreen+0x1e0>)
     2f8:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     2fa:	2300      	movs	r3, #0
     2fc:	7033      	strb	r3, [r6, #0]
	yCharPos = 0;
     2fe:	702b      	strb	r3, [r5, #0]
	

     300:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     302:	2001      	movs	r0, #1
     304:	4b28      	ldr	r3, [pc, #160]	; (3a8 <splashScreen+0x1c4>)
     306:	4798      	blx	r3
     308:	e7d7      	b.n	2ba <splashScreen+0xd6>
     30a:	46c0      	nop			; (mov r8, r8)
     30c:	200000c0 	.word	0x200000c0
     310:	000044a0 	.word	0x000044a0
     314:	000044bc 	.word	0x000044bc
     318:	000044d0 	.word	0x000044d0
     31c:	000044e8 	.word	0x000044e8
     320:	000044f8 	.word	0x000044f8
     324:	00004500 	.word	0x00004500
     328:	00004528 	.word	0x00004528
     32c:	00004554 	.word	0x00004554
     330:	0000457c 	.word	0x0000457c
     334:	000045a8 	.word	0x000045a8
     338:	000045b0 	.word	0x000045b0
     33c:	000045c8 	.word	0x000045c8
     340:	000045e8 	.word	0x000045e8
     344:	00004608 	.word	0x00004608
     348:	0000462c 	.word	0x0000462c
     34c:	0000463c 	.word	0x0000463c
     350:	00004648 	.word	0x00004648
     354:	00004668 	.word	0x00004668
     358:	00004688 	.word	0x00004688
     35c:	00004690 	.word	0x00004690
     360:	000046a4 	.word	0x000046a4
     364:	000046c0 	.word	0x000046c0
     368:	000046d0 	.word	0x000046d0
     36c:	000046f4 	.word	0x000046f4
     370:	00004720 	.word	0x00004720
     374:	00004758 	.word	0x00004758
     378:	0000476c 	.word	0x0000476c
     37c:	00004798 	.word	0x00004798
     380:	000047ac 	.word	0x000047ac
     384:	000047c8 	.word	0x000047c8
     388:	000047ec 	.word	0x000047ec
     38c:	00004810 	.word	0x00004810
     390:	00004830 	.word	0x00004830
     394:	00003369 	.word	0x00003369
     398:	00002b41 	.word	0x00002b41
     39c:	00002855 	.word	0x00002855
     3a0:	4100448c 	.word	0x4100448c
     3a4:	41004400 	.word	0x41004400
     3a8:	00000115 	.word	0x00000115
     3ac:	00002b09 	.word	0x00002b09
     3b0:	0000354d 	.word	0x0000354d
     3b4:	20000180 	.word	0x20000180
     3b8:	20000181 	.word	0x20000181
     3bc:	0000212d 	.word	0x0000212d
     3c0:	00000409 	.word	0x00000409
     3c4:	0000287d 	.word	0x0000287d

000003c8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     3c8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     3ca:	2000      	movs	r0, #0
     3cc:	4b08      	ldr	r3, [pc, #32]	; (3f0 <delay_init+0x28>)
     3ce:	4798      	blx	r3
     3d0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     3d2:	4c08      	ldr	r4, [pc, #32]	; (3f4 <delay_init+0x2c>)
     3d4:	21fa      	movs	r1, #250	; 0xfa
     3d6:	0089      	lsls	r1, r1, #2
     3d8:	47a0      	blx	r4
     3da:	4b07      	ldr	r3, [pc, #28]	; (3f8 <delay_init+0x30>)
     3dc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     3de:	4907      	ldr	r1, [pc, #28]	; (3fc <delay_init+0x34>)
     3e0:	0028      	movs	r0, r5
     3e2:	47a0      	blx	r4
     3e4:	4b06      	ldr	r3, [pc, #24]	; (400 <delay_init+0x38>)
     3e6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     3e8:	2205      	movs	r2, #5
     3ea:	4b06      	ldr	r3, [pc, #24]	; (404 <delay_init+0x3c>)
     3ec:	601a      	str	r2, [r3, #0]
}
     3ee:	bd70      	pop	{r4, r5, r6, pc}
     3f0:	00001901 	.word	0x00001901
     3f4:	00003101 	.word	0x00003101
     3f8:	20000000 	.word	0x20000000
     3fc:	000f4240 	.word	0x000f4240
     400:	20000004 	.word	0x20000004
     404:	e000e010 	.word	0xe000e010

00000408 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     408:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     40a:	4b08      	ldr	r3, [pc, #32]	; (42c <delay_cycles_ms+0x24>)
     40c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     40e:	4a08      	ldr	r2, [pc, #32]	; (430 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     410:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     412:	2180      	movs	r1, #128	; 0x80
     414:	0249      	lsls	r1, r1, #9
	while (n--) {
     416:	3801      	subs	r0, #1
     418:	d307      	bcc.n	42a <delay_cycles_ms+0x22>
	if (n > 0) {
     41a:	2c00      	cmp	r4, #0
     41c:	d0fb      	beq.n	416 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     41e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     420:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     422:	6813      	ldr	r3, [r2, #0]
     424:	420b      	tst	r3, r1
     426:	d0fc      	beq.n	422 <delay_cycles_ms+0x1a>
     428:	e7f5      	b.n	416 <delay_cycles_ms+0xe>
	}
}
     42a:	bd30      	pop	{r4, r5, pc}
     42c:	20000000 	.word	0x20000000
     430:	e000e010 	.word	0xe000e010

00000434 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     434:	4b0c      	ldr	r3, [pc, #48]	; (468 <cpu_irq_enter_critical+0x34>)
     436:	681b      	ldr	r3, [r3, #0]
     438:	2b00      	cmp	r3, #0
     43a:	d106      	bne.n	44a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     43c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     440:	2b00      	cmp	r3, #0
     442:	d007      	beq.n	454 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     444:	2200      	movs	r2, #0
     446:	4b09      	ldr	r3, [pc, #36]	; (46c <cpu_irq_enter_critical+0x38>)
     448:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     44a:	4a07      	ldr	r2, [pc, #28]	; (468 <cpu_irq_enter_critical+0x34>)
     44c:	6813      	ldr	r3, [r2, #0]
     44e:	3301      	adds	r3, #1
     450:	6013      	str	r3, [r2, #0]
}
     452:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     454:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     456:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     45a:	2200      	movs	r2, #0
     45c:	4b04      	ldr	r3, [pc, #16]	; (470 <cpu_irq_enter_critical+0x3c>)
     45e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     460:	3201      	adds	r2, #1
     462:	4b02      	ldr	r3, [pc, #8]	; (46c <cpu_irq_enter_critical+0x38>)
     464:	701a      	strb	r2, [r3, #0]
     466:	e7f0      	b.n	44a <cpu_irq_enter_critical+0x16>
     468:	20000140 	.word	0x20000140
     46c:	20000144 	.word	0x20000144
     470:	20000008 	.word	0x20000008

00000474 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     474:	4b08      	ldr	r3, [pc, #32]	; (498 <cpu_irq_leave_critical+0x24>)
     476:	681a      	ldr	r2, [r3, #0]
     478:	3a01      	subs	r2, #1
     47a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     47c:	681b      	ldr	r3, [r3, #0]
     47e:	2b00      	cmp	r3, #0
     480:	d109      	bne.n	496 <cpu_irq_leave_critical+0x22>
     482:	4b06      	ldr	r3, [pc, #24]	; (49c <cpu_irq_leave_critical+0x28>)
     484:	781b      	ldrb	r3, [r3, #0]
     486:	2b00      	cmp	r3, #0
     488:	d005      	beq.n	496 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     48a:	2201      	movs	r2, #1
     48c:	4b04      	ldr	r3, [pc, #16]	; (4a0 <cpu_irq_leave_critical+0x2c>)
     48e:	701a      	strb	r2, [r3, #0]
     490:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     494:	b662      	cpsie	i
	}
}
     496:	4770      	bx	lr
     498:	20000140 	.word	0x20000140
     49c:	20000144 	.word	0x20000144
     4a0:	20000008 	.word	0x20000008

000004a4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4a6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     4a8:	ac01      	add	r4, sp, #4
     4aa:	2501      	movs	r5, #1
     4ac:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     4ae:	2700      	movs	r7, #0
     4b0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     4b2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     4b4:	0021      	movs	r1, r4
     4b6:	203e      	movs	r0, #62	; 0x3e
     4b8:	4e06      	ldr	r6, [pc, #24]	; (4d4 <system_board_init+0x30>)
     4ba:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     4bc:	2280      	movs	r2, #128	; 0x80
     4be:	05d2      	lsls	r2, r2, #23
     4c0:	4b05      	ldr	r3, [pc, #20]	; (4d8 <system_board_init+0x34>)
     4c2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     4c4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     4c6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     4c8:	0021      	movs	r1, r4
     4ca:	200f      	movs	r0, #15
     4cc:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     4ce:	b003      	add	sp, #12
     4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	00000a0d 	.word	0x00000a0d
     4d8:	41004480 	.word	0x41004480

000004dc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     4dc:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     4de:	2200      	movs	r2, #0
     4e0:	2300      	movs	r3, #0
     4e2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     4e4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     4e6:	2100      	movs	r1, #0
     4e8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     4ea:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     4ec:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     4ee:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     4f0:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     4f2:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     4f4:	24c0      	movs	r4, #192	; 0xc0
     4f6:	0164      	lsls	r4, r4, #5
     4f8:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     4fa:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     4fc:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     4fe:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     500:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     502:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     504:	242a      	movs	r4, #42	; 0x2a
     506:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     508:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     50a:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     50c:	3c06      	subs	r4, #6
     50e:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     510:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     512:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     514:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     516:	232b      	movs	r3, #43	; 0x2b
     518:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     51a:	3301      	adds	r3, #1
     51c:	54c1      	strb	r1, [r0, r3]
}
     51e:	bd10      	pop	{r4, pc}

00000520 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     520:	b5f0      	push	{r4, r5, r6, r7, lr}
     522:	46d6      	mov	lr, sl
     524:	464f      	mov	r7, r9
     526:	4646      	mov	r6, r8
     528:	b5c0      	push	{r6, r7, lr}
     52a:	b096      	sub	sp, #88	; 0x58
     52c:	0007      	movs	r7, r0
     52e:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     530:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     532:	4ac6      	ldr	r2, [pc, #792]	; (84c <adc_init+0x32c>)
     534:	6a10      	ldr	r0, [r2, #32]
     536:	2380      	movs	r3, #128	; 0x80
     538:	025b      	lsls	r3, r3, #9
     53a:	4303      	orrs	r3, r0
     53c:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     53e:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     540:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     542:	07db      	lsls	r3, r3, #31
     544:	d505      	bpl.n	552 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     546:	b016      	add	sp, #88	; 0x58
     548:	bc1c      	pop	{r2, r3, r4}
     54a:	4690      	mov	r8, r2
     54c:	4699      	mov	r9, r3
     54e:	46a2      	mov	sl, r4
     550:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     552:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     554:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     556:	079b      	lsls	r3, r3, #30
     558:	d4f5      	bmi.n	546 <adc_init+0x26>
	module_inst->reference = config->reference;
     55a:	7873      	ldrb	r3, [r6, #1]
     55c:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     55e:	2b00      	cmp	r3, #0
     560:	d104      	bne.n	56c <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     562:	4abb      	ldr	r2, [pc, #748]	; (850 <adc_init+0x330>)
     564:	6c13      	ldr	r3, [r2, #64]	; 0x40
     566:	2104      	movs	r1, #4
     568:	430b      	orrs	r3, r1
     56a:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     56c:	2300      	movs	r3, #0
     56e:	60bb      	str	r3, [r7, #8]
     570:	60fb      	str	r3, [r7, #12]
     572:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     574:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     576:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     578:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     57a:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     57c:	4bb5      	ldr	r3, [pc, #724]	; (854 <adc_init+0x334>)
     57e:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     580:	232a      	movs	r3, #42	; 0x2a
     582:	5cf3      	ldrb	r3, [r6, r3]
     584:	2b00      	cmp	r3, #0
     586:	d105      	bne.n	594 <adc_init+0x74>
     588:	7d33      	ldrb	r3, [r6, #20]
     58a:	2b00      	cmp	r3, #0
     58c:	d102      	bne.n	594 <adc_init+0x74>
		module_inst->software_trigger = true;
     58e:	3301      	adds	r3, #1
     590:	777b      	strb	r3, [r7, #29]
     592:	e001      	b.n	598 <adc_init+0x78>
		module_inst->software_trigger = false;
     594:	2300      	movs	r3, #0
     596:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     598:	683b      	ldr	r3, [r7, #0]
     59a:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     59c:	7833      	ldrb	r3, [r6, #0]
     59e:	466a      	mov	r2, sp
     5a0:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     5a2:	4669      	mov	r1, sp
     5a4:	201e      	movs	r0, #30
     5a6:	4bac      	ldr	r3, [pc, #688]	; (858 <adc_init+0x338>)
     5a8:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     5aa:	201e      	movs	r0, #30
     5ac:	4bab      	ldr	r3, [pc, #684]	; (85c <adc_init+0x33c>)
     5ae:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     5b0:	232c      	movs	r3, #44	; 0x2c
     5b2:	5cf2      	ldrb	r2, [r6, r3]
     5b4:	2a00      	cmp	r2, #0
     5b6:	d054      	beq.n	662 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     5b8:	3b01      	subs	r3, #1
     5ba:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     5bc:	7b33      	ldrb	r3, [r6, #12]
     5be:	18eb      	adds	r3, r5, r3
     5c0:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     5c2:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     5c4:	b2c9      	uxtb	r1, r1
     5c6:	428b      	cmp	r3, r1
     5c8:	d221      	bcs.n	60e <adc_init+0xee>
     5ca:	1952      	adds	r2, r2, r5
     5cc:	b2d3      	uxtb	r3, r2
     5ce:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     5d0:	4ba3      	ldr	r3, [pc, #652]	; (860 <adc_init+0x340>)
     5d2:	469a      	mov	sl, r3
     5d4:	e003      	b.n	5de <adc_init+0xbe>
			offset++;
     5d6:	3501      	adds	r5, #1
     5d8:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     5da:	454d      	cmp	r5, r9
     5dc:	d017      	beq.n	60e <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     5de:	240f      	movs	r4, #15
     5e0:	402c      	ands	r4, r5
     5e2:	7b33      	ldrb	r3, [r6, #12]
     5e4:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     5e6:	2250      	movs	r2, #80	; 0x50
     5e8:	499e      	ldr	r1, [pc, #632]	; (864 <adc_init+0x344>)
     5ea:	a802      	add	r0, sp, #8
     5ec:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     5ee:	2c13      	cmp	r4, #19
     5f0:	d8f1      	bhi.n	5d6 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     5f2:	00a4      	lsls	r4, r4, #2
     5f4:	ab02      	add	r3, sp, #8
     5f6:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     5f8:	a901      	add	r1, sp, #4
     5fa:	2300      	movs	r3, #0
     5fc:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     5fe:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     600:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     602:	3301      	adds	r3, #1
     604:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     606:	b2c0      	uxtb	r0, r0
     608:	4b97      	ldr	r3, [pc, #604]	; (868 <adc_init+0x348>)
     60a:	4798      	blx	r3
     60c:	e7e3      	b.n	5d6 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     60e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     610:	2250      	movs	r2, #80	; 0x50
     612:	4994      	ldr	r1, [pc, #592]	; (864 <adc_init+0x344>)
     614:	a802      	add	r0, sp, #8
     616:	4b92      	ldr	r3, [pc, #584]	; (860 <adc_init+0x340>)
     618:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     61a:	2c13      	cmp	r4, #19
     61c:	d913      	bls.n	646 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     61e:	7d73      	ldrb	r3, [r6, #21]
     620:	009b      	lsls	r3, r3, #2
     622:	b2db      	uxtb	r3, r3
     624:	4642      	mov	r2, r8
     626:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     628:	7db3      	ldrb	r3, [r6, #22]
     62a:	01db      	lsls	r3, r3, #7
     62c:	7872      	ldrb	r2, [r6, #1]
     62e:	4313      	orrs	r3, r2
     630:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     632:	4642      	mov	r2, r8
     634:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     636:	7933      	ldrb	r3, [r6, #4]
     638:	2b34      	cmp	r3, #52	; 0x34
     63a:	d900      	bls.n	63e <adc_init+0x11e>
     63c:	e17b      	b.n	936 <adc_init+0x416>
     63e:	009b      	lsls	r3, r3, #2
     640:	4a8a      	ldr	r2, [pc, #552]	; (86c <adc_init+0x34c>)
     642:	58d3      	ldr	r3, [r2, r3]
     644:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     646:	00a4      	lsls	r4, r4, #2
     648:	ab02      	add	r3, sp, #8
     64a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     64c:	a901      	add	r1, sp, #4
     64e:	2300      	movs	r3, #0
     650:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     652:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     654:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     656:	3301      	adds	r3, #1
     658:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     65a:	b2c0      	uxtb	r0, r0
     65c:	4b82      	ldr	r3, [pc, #520]	; (868 <adc_init+0x348>)
     65e:	4798      	blx	r3
     660:	e7dd      	b.n	61e <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     662:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     664:	2250      	movs	r2, #80	; 0x50
     666:	497f      	ldr	r1, [pc, #508]	; (864 <adc_init+0x344>)
     668:	a802      	add	r0, sp, #8
     66a:	4b7d      	ldr	r3, [pc, #500]	; (860 <adc_init+0x340>)
     66c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     66e:	2c13      	cmp	r4, #19
     670:	d915      	bls.n	69e <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     672:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     674:	2250      	movs	r2, #80	; 0x50
     676:	497b      	ldr	r1, [pc, #492]	; (864 <adc_init+0x344>)
     678:	a802      	add	r0, sp, #8
     67a:	4b79      	ldr	r3, [pc, #484]	; (860 <adc_init+0x340>)
     67c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     67e:	2c13      	cmp	r4, #19
     680:	d8cd      	bhi.n	61e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     682:	00a4      	lsls	r4, r4, #2
     684:	ab02      	add	r3, sp, #8
     686:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     688:	a901      	add	r1, sp, #4
     68a:	2300      	movs	r3, #0
     68c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     68e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     690:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     692:	3301      	adds	r3, #1
     694:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     696:	b2c0      	uxtb	r0, r0
     698:	4b73      	ldr	r3, [pc, #460]	; (868 <adc_init+0x348>)
     69a:	4798      	blx	r3
     69c:	e7bf      	b.n	61e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     69e:	00a4      	lsls	r4, r4, #2
     6a0:	ab02      	add	r3, sp, #8
     6a2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6a4:	a901      	add	r1, sp, #4
     6a6:	2300      	movs	r3, #0
     6a8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     6aa:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     6ac:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     6ae:	3301      	adds	r3, #1
     6b0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     6b2:	b2c0      	uxtb	r0, r0
     6b4:	4b6c      	ldr	r3, [pc, #432]	; (868 <adc_init+0x348>)
     6b6:	4798      	blx	r3
     6b8:	e7db      	b.n	672 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     6ba:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     6bc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     6be:	2102      	movs	r1, #2
     6c0:	e01a      	b.n	6f8 <adc_init+0x1d8>
		adjres = config->divide_result;
     6c2:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     6c4:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     6c6:	2410      	movs	r4, #16
     6c8:	e016      	b.n	6f8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     6ca:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     6cc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     6ce:	2101      	movs	r1, #1
     6d0:	e012      	b.n	6f8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     6d2:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     6d4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     6d6:	2100      	movs	r1, #0
     6d8:	e00e      	b.n	6f8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6da:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     6dc:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     6de:	2100      	movs	r1, #0
     6e0:	e00a      	b.n	6f8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6e2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     6e4:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     6e6:	2100      	movs	r1, #0
     6e8:	e006      	b.n	6f8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     6ea:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     6ec:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     6ee:	2100      	movs	r1, #0
     6f0:	e002      	b.n	6f8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     6f2:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     6f4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     6f6:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     6f8:	0109      	lsls	r1, r1, #4
     6fa:	2270      	movs	r2, #112	; 0x70
     6fc:	400a      	ands	r2, r1
     6fe:	4313      	orrs	r3, r2
     700:	4642      	mov	r2, r8
     702:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     704:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     706:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     708:	2b3f      	cmp	r3, #63	; 0x3f
     70a:	d900      	bls.n	70e <adc_init+0x1ee>
     70c:	e71b      	b.n	546 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     70e:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     710:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     712:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     714:	b25b      	sxtb	r3, r3
     716:	2b00      	cmp	r3, #0
     718:	dbfb      	blt.n	712 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     71a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     71c:	8872      	ldrh	r2, [r6, #2]
     71e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     720:	2224      	movs	r2, #36	; 0x24
     722:	5cb2      	ldrb	r2, [r6, r2]
     724:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     726:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     728:	7d32      	ldrb	r2, [r6, #20]
     72a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     72c:	4313      	orrs	r3, r2
     72e:	7cb2      	ldrb	r2, [r6, #18]
     730:	0052      	lsls	r2, r2, #1
     732:	4313      	orrs	r3, r2
     734:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     736:	4642      	mov	r2, r8
     738:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     73a:	7e33      	ldrb	r3, [r6, #24]
     73c:	2b00      	cmp	r3, #0
     73e:	d020      	beq.n	782 <adc_init+0x262>
		switch (resolution) {
     740:	2c10      	cmp	r4, #16
     742:	d100      	bne.n	746 <adc_init+0x226>
     744:	e0d9      	b.n	8fa <adc_init+0x3da>
     746:	d800      	bhi.n	74a <adc_init+0x22a>
     748:	e098      	b.n	87c <adc_init+0x35c>
     74a:	2c20      	cmp	r4, #32
     74c:	d100      	bne.n	750 <adc_init+0x230>
     74e:	e0b6      	b.n	8be <adc_init+0x39e>
     750:	2c30      	cmp	r4, #48	; 0x30
     752:	d116      	bne.n	782 <adc_init+0x262>
			if (config->differential_mode &&
     754:	7cf2      	ldrb	r2, [r6, #19]
     756:	2a00      	cmp	r2, #0
     758:	d00a      	beq.n	770 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     75a:	69f2      	ldr	r2, [r6, #28]
     75c:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     75e:	2017      	movs	r0, #23
			if (config->differential_mode &&
     760:	2aff      	cmp	r2, #255	; 0xff
     762:	d900      	bls.n	766 <adc_init+0x246>
     764:	e6ef      	b.n	546 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     766:	6a32      	ldr	r2, [r6, #32]
     768:	3280      	adds	r2, #128	; 0x80
     76a:	2aff      	cmp	r2, #255	; 0xff
     76c:	d900      	bls.n	770 <adc_init+0x250>
     76e:	e6ea      	b.n	546 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     770:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     772:	69f2      	ldr	r2, [r6, #28]
     774:	2aff      	cmp	r2, #255	; 0xff
     776:	dd00      	ble.n	77a <adc_init+0x25a>
     778:	e6e5      	b.n	546 <adc_init+0x26>
     77a:	6a32      	ldr	r2, [r6, #32]
     77c:	2aff      	cmp	r2, #255	; 0xff
     77e:	dd00      	ble.n	782 <adc_init+0x262>
     780:	e6e1      	b.n	546 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     782:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     784:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     786:	b252      	sxtb	r2, r2
     788:	2a00      	cmp	r2, #0
     78a:	dbfb      	blt.n	784 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     78c:	4642      	mov	r2, r8
     78e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     790:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     792:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     794:	b25b      	sxtb	r3, r3
     796:	2b00      	cmp	r3, #0
     798:	dbfb      	blt.n	792 <adc_init+0x272>
	adc_module->WINLT.reg =
     79a:	8bb3      	ldrh	r3, [r6, #28]
     79c:	4642      	mov	r2, r8
     79e:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     7a0:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7a2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     7a4:	b25b      	sxtb	r3, r3
     7a6:	2b00      	cmp	r3, #0
     7a8:	dbfb      	blt.n	7a2 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     7aa:	8c33      	ldrh	r3, [r6, #32]
     7ac:	4642      	mov	r2, r8
     7ae:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     7b0:	232c      	movs	r3, #44	; 0x2c
     7b2:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     7b4:	2b00      	cmp	r3, #0
     7b6:	d005      	beq.n	7c4 <adc_init+0x2a4>
		inputs_to_scan--;
     7b8:	3b01      	subs	r3, #1
     7ba:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     7bc:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7be:	2b0f      	cmp	r3, #15
     7c0:	d900      	bls.n	7c4 <adc_init+0x2a4>
     7c2:	e6c0      	b.n	546 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     7c4:	222b      	movs	r2, #43	; 0x2b
     7c6:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     7c8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     7ca:	290f      	cmp	r1, #15
     7cc:	d900      	bls.n	7d0 <adc_init+0x2b0>
     7ce:	e6ba      	b.n	546 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     7d0:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     7d2:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     7d4:	b252      	sxtb	r2, r2
     7d6:	2a00      	cmp	r2, #0
     7d8:	dbfb      	blt.n	7d2 <adc_init+0x2b2>
			config->negative_input |
     7da:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     7dc:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     7de:	4302      	orrs	r2, r0
     7e0:	68b0      	ldr	r0, [r6, #8]
     7e2:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     7e4:	0509      	lsls	r1, r1, #20
			config->negative_input |
     7e6:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     7e8:	041b      	lsls	r3, r3, #16
			config->negative_input |
     7ea:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     7ec:	4642      	mov	r2, r8
     7ee:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     7f0:	232a      	movs	r3, #42	; 0x2a
     7f2:	5cf3      	ldrb	r3, [r6, r3]
     7f4:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     7f6:	230f      	movs	r3, #15
     7f8:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     7fa:	3315      	adds	r3, #21
     7fc:	5cf3      	ldrb	r3, [r6, r3]
     7fe:	2b00      	cmp	r3, #0
     800:	d012      	beq.n	828 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     802:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     804:	4a1a      	ldr	r2, [pc, #104]	; (870 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     806:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     808:	4293      	cmp	r3, r2
     80a:	d900      	bls.n	80e <adc_init+0x2ee>
     80c:	e69b      	b.n	546 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     80e:	4642      	mov	r2, r8
     810:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     812:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     814:	2380      	movs	r3, #128	; 0x80
     816:	011b      	lsls	r3, r3, #4
     818:	18d3      	adds	r3, r2, r3
     81a:	4915      	ldr	r1, [pc, #84]	; (870 <adc_init+0x350>)
     81c:	b29b      	uxth	r3, r3
     81e:	428b      	cmp	r3, r1
     820:	d900      	bls.n	824 <adc_init+0x304>
     822:	e690      	b.n	546 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     824:	4643      	mov	r3, r8
     826:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     828:	4b12      	ldr	r3, [pc, #72]	; (874 <adc_init+0x354>)
     82a:	681b      	ldr	r3, [r3, #0]
     82c:	015b      	lsls	r3, r3, #5
     82e:	22e0      	movs	r2, #224	; 0xe0
     830:	00d2      	lsls	r2, r2, #3
     832:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     834:	4a10      	ldr	r2, [pc, #64]	; (878 <adc_init+0x358>)
     836:	6851      	ldr	r1, [r2, #4]
     838:	0149      	lsls	r1, r1, #5
     83a:	6812      	ldr	r2, [r2, #0]
     83c:	0ed2      	lsrs	r2, r2, #27
     83e:	430a      	orrs	r2, r1
     840:	b2d2      	uxtb	r2, r2
			) |
     842:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     844:	4642      	mov	r2, r8
     846:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     848:	2000      	movs	r0, #0
     84a:	e67c      	b.n	546 <adc_init+0x26>
     84c:	40000400 	.word	0x40000400
     850:	40000800 	.word	0x40000800
     854:	2000018c 	.word	0x2000018c
     858:	00001a19 	.word	0x00001a19
     85c:	0000198d 	.word	0x0000198d
     860:	000032b5 	.word	0x000032b5
     864:	00004924 	.word	0x00004924
     868:	00001b11 	.word	0x00001b11
     86c:	00004850 	.word	0x00004850
     870:	00000fff 	.word	0x00000fff
     874:	00806024 	.word	0x00806024
     878:	00806020 	.word	0x00806020
		switch (resolution) {
     87c:	2c00      	cmp	r4, #0
     87e:	d000      	beq.n	882 <adc_init+0x362>
     880:	e77f      	b.n	782 <adc_init+0x262>
			if (config->differential_mode &&
     882:	7cf2      	ldrb	r2, [r6, #19]
     884:	2a00      	cmp	r2, #0
     886:	d00f      	beq.n	8a8 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     888:	69f2      	ldr	r2, [r6, #28]
     88a:	2180      	movs	r1, #128	; 0x80
     88c:	0109      	lsls	r1, r1, #4
     88e:	468c      	mov	ip, r1
     890:	4462      	add	r2, ip
			if (config->differential_mode &&
     892:	492a      	ldr	r1, [pc, #168]	; (93c <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     894:	2017      	movs	r0, #23
			if (config->differential_mode &&
     896:	428a      	cmp	r2, r1
     898:	d900      	bls.n	89c <adc_init+0x37c>
     89a:	e654      	b.n	546 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     89c:	6a32      	ldr	r2, [r6, #32]
     89e:	4462      	add	r2, ip
     8a0:	4926      	ldr	r1, [pc, #152]	; (93c <adc_init+0x41c>)
     8a2:	428a      	cmp	r2, r1
     8a4:	d900      	bls.n	8a8 <adc_init+0x388>
     8a6:	e64e      	b.n	546 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     8a8:	4a24      	ldr	r2, [pc, #144]	; (93c <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     8aa:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     8ac:	69f1      	ldr	r1, [r6, #28]
     8ae:	4291      	cmp	r1, r2
     8b0:	dd00      	ble.n	8b4 <adc_init+0x394>
     8b2:	e648      	b.n	546 <adc_init+0x26>
     8b4:	6a31      	ldr	r1, [r6, #32]
     8b6:	4291      	cmp	r1, r2
     8b8:	dd00      	ble.n	8bc <adc_init+0x39c>
     8ba:	e644      	b.n	546 <adc_init+0x26>
     8bc:	e761      	b.n	782 <adc_init+0x262>
			if (config->differential_mode &&
     8be:	7cf2      	ldrb	r2, [r6, #19]
     8c0:	2a00      	cmp	r2, #0
     8c2:	d00f      	beq.n	8e4 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     8c4:	69f2      	ldr	r2, [r6, #28]
     8c6:	2180      	movs	r1, #128	; 0x80
     8c8:	0089      	lsls	r1, r1, #2
     8ca:	468c      	mov	ip, r1
     8cc:	4462      	add	r2, ip
			if (config->differential_mode &&
     8ce:	491c      	ldr	r1, [pc, #112]	; (940 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     8d0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     8d2:	428a      	cmp	r2, r1
     8d4:	d900      	bls.n	8d8 <adc_init+0x3b8>
     8d6:	e636      	b.n	546 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     8d8:	6a32      	ldr	r2, [r6, #32]
     8da:	4462      	add	r2, ip
     8dc:	4918      	ldr	r1, [pc, #96]	; (940 <adc_init+0x420>)
     8de:	428a      	cmp	r2, r1
     8e0:	d900      	bls.n	8e4 <adc_init+0x3c4>
     8e2:	e630      	b.n	546 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     8e4:	4a16      	ldr	r2, [pc, #88]	; (940 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     8e6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     8e8:	69f1      	ldr	r1, [r6, #28]
     8ea:	4291      	cmp	r1, r2
     8ec:	dd00      	ble.n	8f0 <adc_init+0x3d0>
     8ee:	e62a      	b.n	546 <adc_init+0x26>
     8f0:	6a31      	ldr	r1, [r6, #32]
     8f2:	4291      	cmp	r1, r2
     8f4:	dd00      	ble.n	8f8 <adc_init+0x3d8>
     8f6:	e626      	b.n	546 <adc_init+0x26>
     8f8:	e743      	b.n	782 <adc_init+0x262>
			if (config->differential_mode &&
     8fa:	7cf2      	ldrb	r2, [r6, #19]
     8fc:	2a00      	cmp	r2, #0
     8fe:	d00f      	beq.n	920 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     900:	69f2      	ldr	r2, [r6, #28]
     902:	2180      	movs	r1, #128	; 0x80
     904:	0209      	lsls	r1, r1, #8
     906:	468c      	mov	ip, r1
     908:	4462      	add	r2, ip
			if (config->differential_mode &&
     90a:	490e      	ldr	r1, [pc, #56]	; (944 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     90c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     90e:	428a      	cmp	r2, r1
     910:	d900      	bls.n	914 <adc_init+0x3f4>
     912:	e618      	b.n	546 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     914:	6a32      	ldr	r2, [r6, #32]
     916:	4462      	add	r2, ip
     918:	490a      	ldr	r1, [pc, #40]	; (944 <adc_init+0x424>)
     91a:	428a      	cmp	r2, r1
     91c:	d900      	bls.n	920 <adc_init+0x400>
     91e:	e612      	b.n	546 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     920:	4a08      	ldr	r2, [pc, #32]	; (944 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     922:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     924:	69f1      	ldr	r1, [r6, #28]
     926:	4291      	cmp	r1, r2
     928:	dd00      	ble.n	92c <adc_init+0x40c>
     92a:	e60c      	b.n	546 <adc_init+0x26>
     92c:	6a31      	ldr	r1, [r6, #32]
     92e:	4291      	cmp	r1, r2
     930:	dd00      	ble.n	934 <adc_init+0x414>
     932:	e608      	b.n	546 <adc_init+0x26>
     934:	e725      	b.n	782 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     936:	2017      	movs	r0, #23
     938:	e605      	b.n	546 <adc_init+0x26>
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	00000fff 	.word	0x00000fff
     940:	000003ff 	.word	0x000003ff
     944:	0000ffff 	.word	0x0000ffff

00000948 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     948:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     94a:	4b2f      	ldr	r3, [pc, #188]	; (a08 <ADC_Handler+0xc0>)
     94c:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     94e:	682b      	ldr	r3, [r5, #0]
     950:	7e1a      	ldrb	r2, [r3, #24]
     952:	7ddc      	ldrb	r4, [r3, #23]
     954:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     956:	07e2      	lsls	r2, r4, #31
     958:	d416      	bmi.n	988 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     95a:	0763      	lsls	r3, r4, #29
     95c:	d508      	bpl.n	970 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     95e:	2304      	movs	r3, #4
     960:	682a      	ldr	r2, [r5, #0]
     962:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     964:	7eeb      	ldrb	r3, [r5, #27]
     966:	079b      	lsls	r3, r3, #30
     968:	d502      	bpl.n	970 <ADC_Handler+0x28>
     96a:	7eab      	ldrb	r3, [r5, #26]
     96c:	079b      	lsls	r3, r3, #30
     96e:	d442      	bmi.n	9f6 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     970:	07a3      	lsls	r3, r4, #30
     972:	d508      	bpl.n	986 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     974:	2302      	movs	r3, #2
     976:	682a      	ldr	r2, [r5, #0]
     978:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     97a:	7eeb      	ldrb	r3, [r5, #27]
     97c:	075b      	lsls	r3, r3, #29
     97e:	d502      	bpl.n	986 <ADC_Handler+0x3e>
     980:	7eab      	ldrb	r3, [r5, #26]
     982:	075b      	lsls	r3, r3, #29
     984:	d43b      	bmi.n	9fe <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     986:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     988:	2201      	movs	r2, #1
     98a:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     98c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     98e:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     990:	b25b      	sxtb	r3, r3
     992:	2b00      	cmp	r3, #0
     994:	dbfb      	blt.n	98e <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     996:	6969      	ldr	r1, [r5, #20]
     998:	1c8b      	adds	r3, r1, #2
     99a:	616b      	str	r3, [r5, #20]
     99c:	8b53      	ldrh	r3, [r2, #26]
     99e:	b29b      	uxth	r3, r3
     9a0:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     9a2:	8b2b      	ldrh	r3, [r5, #24]
     9a4:	3b01      	subs	r3, #1
     9a6:	b29b      	uxth	r3, r3
     9a8:	832b      	strh	r3, [r5, #24]
     9aa:	2b00      	cmp	r3, #0
     9ac:	d011      	beq.n	9d2 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     9ae:	7f6b      	ldrb	r3, [r5, #29]
     9b0:	2b00      	cmp	r3, #0
     9b2:	d0d2      	beq.n	95a <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     9b4:	682a      	ldr	r2, [r5, #0]
     9b6:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     9b8:	b25b      	sxtb	r3, r3
     9ba:	2b00      	cmp	r3, #0
     9bc:	dbfb      	blt.n	9b6 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     9be:	7b13      	ldrb	r3, [r2, #12]
     9c0:	2102      	movs	r1, #2
     9c2:	430b      	orrs	r3, r1
     9c4:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     9c6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     9c8:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     9ca:	b25b      	sxtb	r3, r3
     9cc:	2b00      	cmp	r3, #0
     9ce:	dbfb      	blt.n	9c8 <ADC_Handler+0x80>
     9d0:	e7c3      	b.n	95a <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     9d2:	2301      	movs	r3, #1
     9d4:	682a      	ldr	r2, [r5, #0]
     9d6:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     9d8:	7f2b      	ldrb	r3, [r5, #28]
     9da:	2b05      	cmp	r3, #5
     9dc:	d1bd      	bne.n	95a <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     9de:	2300      	movs	r3, #0
     9e0:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     9e2:	7eeb      	ldrb	r3, [r5, #27]
     9e4:	07db      	lsls	r3, r3, #31
     9e6:	d5b8      	bpl.n	95a <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     9e8:	7eab      	ldrb	r3, [r5, #26]
     9ea:	07db      	lsls	r3, r3, #31
     9ec:	d5b5      	bpl.n	95a <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     9ee:	0028      	movs	r0, r5
     9f0:	68ab      	ldr	r3, [r5, #8]
     9f2:	4798      	blx	r3
     9f4:	e7b1      	b.n	95a <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     9f6:	0028      	movs	r0, r5
     9f8:	68eb      	ldr	r3, [r5, #12]
     9fa:	4798      	blx	r3
     9fc:	e7b8      	b.n	970 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     9fe:	692b      	ldr	r3, [r5, #16]
     a00:	0028      	movs	r0, r5
     a02:	4798      	blx	r3
}
     a04:	e7bf      	b.n	986 <ADC_Handler+0x3e>
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	2000018c 	.word	0x2000018c

00000a0c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     a0c:	b500      	push	{lr}
     a0e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a10:	ab01      	add	r3, sp, #4
     a12:	2280      	movs	r2, #128	; 0x80
     a14:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     a16:	780a      	ldrb	r2, [r1, #0]
     a18:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     a1a:	784a      	ldrb	r2, [r1, #1]
     a1c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     a1e:	788a      	ldrb	r2, [r1, #2]
     a20:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     a22:	0019      	movs	r1, r3
     a24:	4b01      	ldr	r3, [pc, #4]	; (a2c <port_pin_set_config+0x20>)
     a26:	4798      	blx	r3
}
     a28:	b003      	add	sp, #12
     a2a:	bd00      	pop	{pc}
     a2c:	00001b11 	.word	0x00001b11

00000a30 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     a30:	b5f0      	push	{r4, r5, r6, r7, lr}
     a32:	46de      	mov	lr, fp
     a34:	4657      	mov	r7, sl
     a36:	464e      	mov	r6, r9
     a38:	4645      	mov	r5, r8
     a3a:	b5e0      	push	{r5, r6, r7, lr}
     a3c:	b087      	sub	sp, #28
     a3e:	4680      	mov	r8, r0
     a40:	9104      	str	r1, [sp, #16]
     a42:	0016      	movs	r6, r2
     a44:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     a46:	2200      	movs	r2, #0
     a48:	2300      	movs	r3, #0
     a4a:	2100      	movs	r1, #0
     a4c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     a4e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     a50:	2001      	movs	r0, #1
     a52:	0021      	movs	r1, r4
     a54:	9600      	str	r6, [sp, #0]
     a56:	9701      	str	r7, [sp, #4]
     a58:	465c      	mov	r4, fp
     a5a:	9403      	str	r4, [sp, #12]
     a5c:	4644      	mov	r4, r8
     a5e:	9405      	str	r4, [sp, #20]
     a60:	e013      	b.n	a8a <long_division+0x5a>
     a62:	2420      	movs	r4, #32
     a64:	1a64      	subs	r4, r4, r1
     a66:	0005      	movs	r5, r0
     a68:	40e5      	lsrs	r5, r4
     a6a:	46a8      	mov	r8, r5
     a6c:	e014      	b.n	a98 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     a6e:	9c00      	ldr	r4, [sp, #0]
     a70:	9d01      	ldr	r5, [sp, #4]
     a72:	1b12      	subs	r2, r2, r4
     a74:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     a76:	465c      	mov	r4, fp
     a78:	464d      	mov	r5, r9
     a7a:	432c      	orrs	r4, r5
     a7c:	46a3      	mov	fp, r4
     a7e:	9c03      	ldr	r4, [sp, #12]
     a80:	4645      	mov	r5, r8
     a82:	432c      	orrs	r4, r5
     a84:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     a86:	3901      	subs	r1, #1
     a88:	d325      	bcc.n	ad6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     a8a:	2420      	movs	r4, #32
     a8c:	4264      	negs	r4, r4
     a8e:	190c      	adds	r4, r1, r4
     a90:	d4e7      	bmi.n	a62 <long_division+0x32>
     a92:	0005      	movs	r5, r0
     a94:	40a5      	lsls	r5, r4
     a96:	46a8      	mov	r8, r5
     a98:	0004      	movs	r4, r0
     a9a:	408c      	lsls	r4, r1
     a9c:	46a1      	mov	r9, r4
		r = r << 1;
     a9e:	1892      	adds	r2, r2, r2
     aa0:	415b      	adcs	r3, r3
     aa2:	0014      	movs	r4, r2
     aa4:	001d      	movs	r5, r3
		if (n & bit_shift) {
     aa6:	9e05      	ldr	r6, [sp, #20]
     aa8:	464f      	mov	r7, r9
     aaa:	403e      	ands	r6, r7
     aac:	46b4      	mov	ip, r6
     aae:	9e04      	ldr	r6, [sp, #16]
     ab0:	4647      	mov	r7, r8
     ab2:	403e      	ands	r6, r7
     ab4:	46b2      	mov	sl, r6
     ab6:	4666      	mov	r6, ip
     ab8:	4657      	mov	r7, sl
     aba:	433e      	orrs	r6, r7
     abc:	d003      	beq.n	ac6 <long_division+0x96>
			r |= 0x01;
     abe:	0006      	movs	r6, r0
     ac0:	4326      	orrs	r6, r4
     ac2:	0032      	movs	r2, r6
     ac4:	002b      	movs	r3, r5
		if (r >= d) {
     ac6:	9c00      	ldr	r4, [sp, #0]
     ac8:	9d01      	ldr	r5, [sp, #4]
     aca:	429d      	cmp	r5, r3
     acc:	d8db      	bhi.n	a86 <long_division+0x56>
     ace:	d1ce      	bne.n	a6e <long_division+0x3e>
     ad0:	4294      	cmp	r4, r2
     ad2:	d8d8      	bhi.n	a86 <long_division+0x56>
     ad4:	e7cb      	b.n	a6e <long_division+0x3e>
     ad6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     ad8:	4658      	mov	r0, fp
     ada:	0019      	movs	r1, r3
     adc:	b007      	add	sp, #28
     ade:	bc3c      	pop	{r2, r3, r4, r5}
     ae0:	4690      	mov	r8, r2
     ae2:	4699      	mov	r9, r3
     ae4:	46a2      	mov	sl, r4
     ae6:	46ab      	mov	fp, r5
     ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000aea <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     aea:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     aec:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     aee:	2340      	movs	r3, #64	; 0x40
     af0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     af2:	4281      	cmp	r1, r0
     af4:	d202      	bcs.n	afc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     af6:	0018      	movs	r0, r3
     af8:	bd10      	pop	{r4, pc}
		baud_calculated++;
     afa:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     afc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     afe:	1c63      	adds	r3, r4, #1
     b00:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     b02:	4288      	cmp	r0, r1
     b04:	d9f9      	bls.n	afa <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b06:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     b08:	2cff      	cmp	r4, #255	; 0xff
     b0a:	d8f4      	bhi.n	af6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     b0c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     b0e:	2300      	movs	r3, #0
     b10:	e7f1      	b.n	af6 <_sercom_get_sync_baud_val+0xc>
	...

00000b14 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     b14:	b5f0      	push	{r4, r5, r6, r7, lr}
     b16:	b083      	sub	sp, #12
     b18:	000f      	movs	r7, r1
     b1a:	0016      	movs	r6, r2
     b1c:	aa08      	add	r2, sp, #32
     b1e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     b20:	0004      	movs	r4, r0
     b22:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b24:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     b26:	42bc      	cmp	r4, r7
     b28:	d902      	bls.n	b30 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     b2a:	0010      	movs	r0, r2
     b2c:	b003      	add	sp, #12
     b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     b30:	2b00      	cmp	r3, #0
     b32:	d114      	bne.n	b5e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     b34:	0002      	movs	r2, r0
     b36:	0008      	movs	r0, r1
     b38:	2100      	movs	r1, #0
     b3a:	4c19      	ldr	r4, [pc, #100]	; (ba0 <_sercom_get_async_baud_val+0x8c>)
     b3c:	47a0      	blx	r4
     b3e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     b40:	003a      	movs	r2, r7
     b42:	2300      	movs	r3, #0
     b44:	2000      	movs	r0, #0
     b46:	4c17      	ldr	r4, [pc, #92]	; (ba4 <_sercom_get_async_baud_val+0x90>)
     b48:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     b4a:	2200      	movs	r2, #0
     b4c:	2301      	movs	r3, #1
     b4e:	1a12      	subs	r2, r2, r0
     b50:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     b52:	0c12      	lsrs	r2, r2, #16
     b54:	041b      	lsls	r3, r3, #16
     b56:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     b58:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     b5a:	2200      	movs	r2, #0
     b5c:	e7e5      	b.n	b2a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     b5e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b60:	2b01      	cmp	r3, #1
     b62:	d1f9      	bne.n	b58 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     b64:	000a      	movs	r2, r1
     b66:	2300      	movs	r3, #0
     b68:	2100      	movs	r1, #0
     b6a:	4c0d      	ldr	r4, [pc, #52]	; (ba0 <_sercom_get_async_baud_val+0x8c>)
     b6c:	47a0      	blx	r4
     b6e:	0002      	movs	r2, r0
     b70:	000b      	movs	r3, r1
     b72:	9200      	str	r2, [sp, #0]
     b74:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     b76:	0038      	movs	r0, r7
     b78:	2100      	movs	r1, #0
     b7a:	4c0a      	ldr	r4, [pc, #40]	; (ba4 <_sercom_get_async_baud_val+0x90>)
     b7c:	47a0      	blx	r4
     b7e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     b80:	2380      	movs	r3, #128	; 0x80
     b82:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     b84:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     b86:	4298      	cmp	r0, r3
     b88:	d8cf      	bhi.n	b2a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     b8a:	0f79      	lsrs	r1, r7, #29
     b8c:	00f8      	lsls	r0, r7, #3
     b8e:	9a00      	ldr	r2, [sp, #0]
     b90:	9b01      	ldr	r3, [sp, #4]
     b92:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     b94:	00ea      	lsls	r2, r5, #3
     b96:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     b98:	b2d2      	uxtb	r2, r2
     b9a:	0352      	lsls	r2, r2, #13
     b9c:	432a      	orrs	r2, r5
     b9e:	e7db      	b.n	b58 <_sercom_get_async_baud_val+0x44>
     ba0:	00003219 	.word	0x00003219
     ba4:	00000a31 	.word	0x00000a31

00000ba8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     ba8:	b510      	push	{r4, lr}
     baa:	b082      	sub	sp, #8
     bac:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     bae:	4b0e      	ldr	r3, [pc, #56]	; (be8 <sercom_set_gclk_generator+0x40>)
     bb0:	781b      	ldrb	r3, [r3, #0]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d007      	beq.n	bc6 <sercom_set_gclk_generator+0x1e>
     bb6:	2900      	cmp	r1, #0
     bb8:	d105      	bne.n	bc6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     bba:	4b0b      	ldr	r3, [pc, #44]	; (be8 <sercom_set_gclk_generator+0x40>)
     bbc:	785b      	ldrb	r3, [r3, #1]
     bbe:	4283      	cmp	r3, r0
     bc0:	d010      	beq.n	be4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     bc2:	201d      	movs	r0, #29
     bc4:	e00c      	b.n	be0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     bc6:	a901      	add	r1, sp, #4
     bc8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     bca:	2013      	movs	r0, #19
     bcc:	4b07      	ldr	r3, [pc, #28]	; (bec <sercom_set_gclk_generator+0x44>)
     bce:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     bd0:	2013      	movs	r0, #19
     bd2:	4b07      	ldr	r3, [pc, #28]	; (bf0 <sercom_set_gclk_generator+0x48>)
     bd4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     bd6:	4b04      	ldr	r3, [pc, #16]	; (be8 <sercom_set_gclk_generator+0x40>)
     bd8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     bda:	2201      	movs	r2, #1
     bdc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     bde:	2000      	movs	r0, #0
}
     be0:	b002      	add	sp, #8
     be2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     be4:	2000      	movs	r0, #0
     be6:	e7fb      	b.n	be0 <sercom_set_gclk_generator+0x38>
     be8:	20000148 	.word	0x20000148
     bec:	00001a19 	.word	0x00001a19
     bf0:	0000198d 	.word	0x0000198d

00000bf4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     bf4:	4b40      	ldr	r3, [pc, #256]	; (cf8 <_sercom_get_default_pad+0x104>)
     bf6:	4298      	cmp	r0, r3
     bf8:	d031      	beq.n	c5e <_sercom_get_default_pad+0x6a>
     bfa:	d90a      	bls.n	c12 <_sercom_get_default_pad+0x1e>
     bfc:	4b3f      	ldr	r3, [pc, #252]	; (cfc <_sercom_get_default_pad+0x108>)
     bfe:	4298      	cmp	r0, r3
     c00:	d04d      	beq.n	c9e <_sercom_get_default_pad+0xaa>
     c02:	4b3f      	ldr	r3, [pc, #252]	; (d00 <_sercom_get_default_pad+0x10c>)
     c04:	4298      	cmp	r0, r3
     c06:	d05a      	beq.n	cbe <_sercom_get_default_pad+0xca>
     c08:	4b3e      	ldr	r3, [pc, #248]	; (d04 <_sercom_get_default_pad+0x110>)
     c0a:	4298      	cmp	r0, r3
     c0c:	d037      	beq.n	c7e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     c0e:	2000      	movs	r0, #0
}
     c10:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     c12:	4b3d      	ldr	r3, [pc, #244]	; (d08 <_sercom_get_default_pad+0x114>)
     c14:	4298      	cmp	r0, r3
     c16:	d00c      	beq.n	c32 <_sercom_get_default_pad+0x3e>
     c18:	4b3c      	ldr	r3, [pc, #240]	; (d0c <_sercom_get_default_pad+0x118>)
     c1a:	4298      	cmp	r0, r3
     c1c:	d1f7      	bne.n	c0e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c1e:	2901      	cmp	r1, #1
     c20:	d017      	beq.n	c52 <_sercom_get_default_pad+0x5e>
     c22:	2900      	cmp	r1, #0
     c24:	d05d      	beq.n	ce2 <_sercom_get_default_pad+0xee>
     c26:	2902      	cmp	r1, #2
     c28:	d015      	beq.n	c56 <_sercom_get_default_pad+0x62>
     c2a:	2903      	cmp	r1, #3
     c2c:	d015      	beq.n	c5a <_sercom_get_default_pad+0x66>
	return 0;
     c2e:	2000      	movs	r0, #0
     c30:	e7ee      	b.n	c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c32:	2901      	cmp	r1, #1
     c34:	d007      	beq.n	c46 <_sercom_get_default_pad+0x52>
     c36:	2900      	cmp	r1, #0
     c38:	d051      	beq.n	cde <_sercom_get_default_pad+0xea>
     c3a:	2902      	cmp	r1, #2
     c3c:	d005      	beq.n	c4a <_sercom_get_default_pad+0x56>
     c3e:	2903      	cmp	r1, #3
     c40:	d005      	beq.n	c4e <_sercom_get_default_pad+0x5a>
	return 0;
     c42:	2000      	movs	r0, #0
     c44:	e7e4      	b.n	c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c46:	4832      	ldr	r0, [pc, #200]	; (d10 <_sercom_get_default_pad+0x11c>)
     c48:	e7e2      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c4a:	4832      	ldr	r0, [pc, #200]	; (d14 <_sercom_get_default_pad+0x120>)
     c4c:	e7e0      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c4e:	4832      	ldr	r0, [pc, #200]	; (d18 <_sercom_get_default_pad+0x124>)
     c50:	e7de      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c52:	4832      	ldr	r0, [pc, #200]	; (d1c <_sercom_get_default_pad+0x128>)
     c54:	e7dc      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c56:	4832      	ldr	r0, [pc, #200]	; (d20 <_sercom_get_default_pad+0x12c>)
     c58:	e7da      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c5a:	4832      	ldr	r0, [pc, #200]	; (d24 <_sercom_get_default_pad+0x130>)
     c5c:	e7d8      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c5e:	2901      	cmp	r1, #1
     c60:	d007      	beq.n	c72 <_sercom_get_default_pad+0x7e>
     c62:	2900      	cmp	r1, #0
     c64:	d03f      	beq.n	ce6 <_sercom_get_default_pad+0xf2>
     c66:	2902      	cmp	r1, #2
     c68:	d005      	beq.n	c76 <_sercom_get_default_pad+0x82>
     c6a:	2903      	cmp	r1, #3
     c6c:	d005      	beq.n	c7a <_sercom_get_default_pad+0x86>
	return 0;
     c6e:	2000      	movs	r0, #0
     c70:	e7ce      	b.n	c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c72:	482d      	ldr	r0, [pc, #180]	; (d28 <_sercom_get_default_pad+0x134>)
     c74:	e7cc      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c76:	482d      	ldr	r0, [pc, #180]	; (d2c <_sercom_get_default_pad+0x138>)
     c78:	e7ca      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c7a:	482d      	ldr	r0, [pc, #180]	; (d30 <_sercom_get_default_pad+0x13c>)
     c7c:	e7c8      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c7e:	2901      	cmp	r1, #1
     c80:	d007      	beq.n	c92 <_sercom_get_default_pad+0x9e>
     c82:	2900      	cmp	r1, #0
     c84:	d031      	beq.n	cea <_sercom_get_default_pad+0xf6>
     c86:	2902      	cmp	r1, #2
     c88:	d005      	beq.n	c96 <_sercom_get_default_pad+0xa2>
     c8a:	2903      	cmp	r1, #3
     c8c:	d005      	beq.n	c9a <_sercom_get_default_pad+0xa6>
	return 0;
     c8e:	2000      	movs	r0, #0
     c90:	e7be      	b.n	c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c92:	4828      	ldr	r0, [pc, #160]	; (d34 <_sercom_get_default_pad+0x140>)
     c94:	e7bc      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c96:	4828      	ldr	r0, [pc, #160]	; (d38 <_sercom_get_default_pad+0x144>)
     c98:	e7ba      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c9a:	4828      	ldr	r0, [pc, #160]	; (d3c <_sercom_get_default_pad+0x148>)
     c9c:	e7b8      	b.n	c10 <_sercom_get_default_pad+0x1c>
     c9e:	2901      	cmp	r1, #1
     ca0:	d007      	beq.n	cb2 <_sercom_get_default_pad+0xbe>
     ca2:	2900      	cmp	r1, #0
     ca4:	d023      	beq.n	cee <_sercom_get_default_pad+0xfa>
     ca6:	2902      	cmp	r1, #2
     ca8:	d005      	beq.n	cb6 <_sercom_get_default_pad+0xc2>
     caa:	2903      	cmp	r1, #3
     cac:	d005      	beq.n	cba <_sercom_get_default_pad+0xc6>
	return 0;
     cae:	2000      	movs	r0, #0
     cb0:	e7ae      	b.n	c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cb2:	4823      	ldr	r0, [pc, #140]	; (d40 <_sercom_get_default_pad+0x14c>)
     cb4:	e7ac      	b.n	c10 <_sercom_get_default_pad+0x1c>
     cb6:	4823      	ldr	r0, [pc, #140]	; (d44 <_sercom_get_default_pad+0x150>)
     cb8:	e7aa      	b.n	c10 <_sercom_get_default_pad+0x1c>
     cba:	4823      	ldr	r0, [pc, #140]	; (d48 <_sercom_get_default_pad+0x154>)
     cbc:	e7a8      	b.n	c10 <_sercom_get_default_pad+0x1c>
     cbe:	2901      	cmp	r1, #1
     cc0:	d007      	beq.n	cd2 <_sercom_get_default_pad+0xde>
     cc2:	2900      	cmp	r1, #0
     cc4:	d015      	beq.n	cf2 <_sercom_get_default_pad+0xfe>
     cc6:	2902      	cmp	r1, #2
     cc8:	d005      	beq.n	cd6 <_sercom_get_default_pad+0xe2>
     cca:	2903      	cmp	r1, #3
     ccc:	d005      	beq.n	cda <_sercom_get_default_pad+0xe6>
	return 0;
     cce:	2000      	movs	r0, #0
     cd0:	e79e      	b.n	c10 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cd2:	481e      	ldr	r0, [pc, #120]	; (d4c <_sercom_get_default_pad+0x158>)
     cd4:	e79c      	b.n	c10 <_sercom_get_default_pad+0x1c>
     cd6:	481e      	ldr	r0, [pc, #120]	; (d50 <_sercom_get_default_pad+0x15c>)
     cd8:	e79a      	b.n	c10 <_sercom_get_default_pad+0x1c>
     cda:	481e      	ldr	r0, [pc, #120]	; (d54 <_sercom_get_default_pad+0x160>)
     cdc:	e798      	b.n	c10 <_sercom_get_default_pad+0x1c>
     cde:	481e      	ldr	r0, [pc, #120]	; (d58 <_sercom_get_default_pad+0x164>)
     ce0:	e796      	b.n	c10 <_sercom_get_default_pad+0x1c>
     ce2:	2003      	movs	r0, #3
     ce4:	e794      	b.n	c10 <_sercom_get_default_pad+0x1c>
     ce6:	481d      	ldr	r0, [pc, #116]	; (d5c <_sercom_get_default_pad+0x168>)
     ce8:	e792      	b.n	c10 <_sercom_get_default_pad+0x1c>
     cea:	481d      	ldr	r0, [pc, #116]	; (d60 <_sercom_get_default_pad+0x16c>)
     cec:	e790      	b.n	c10 <_sercom_get_default_pad+0x1c>
     cee:	481d      	ldr	r0, [pc, #116]	; (d64 <_sercom_get_default_pad+0x170>)
     cf0:	e78e      	b.n	c10 <_sercom_get_default_pad+0x1c>
     cf2:	481d      	ldr	r0, [pc, #116]	; (d68 <_sercom_get_default_pad+0x174>)
     cf4:	e78c      	b.n	c10 <_sercom_get_default_pad+0x1c>
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	42001000 	.word	0x42001000
     cfc:	42001800 	.word	0x42001800
     d00:	42001c00 	.word	0x42001c00
     d04:	42001400 	.word	0x42001400
     d08:	42000800 	.word	0x42000800
     d0c:	42000c00 	.word	0x42000c00
     d10:	00050003 	.word	0x00050003
     d14:	00060003 	.word	0x00060003
     d18:	00070003 	.word	0x00070003
     d1c:	00010003 	.word	0x00010003
     d20:	001e0003 	.word	0x001e0003
     d24:	001f0003 	.word	0x001f0003
     d28:	00090003 	.word	0x00090003
     d2c:	000a0003 	.word	0x000a0003
     d30:	000b0003 	.word	0x000b0003
     d34:	00110003 	.word	0x00110003
     d38:	00120003 	.word	0x00120003
     d3c:	00130003 	.word	0x00130003
     d40:	000d0003 	.word	0x000d0003
     d44:	000e0003 	.word	0x000e0003
     d48:	000f0003 	.word	0x000f0003
     d4c:	00170003 	.word	0x00170003
     d50:	00180003 	.word	0x00180003
     d54:	00190003 	.word	0x00190003
     d58:	00040003 	.word	0x00040003
     d5c:	00080003 	.word	0x00080003
     d60:	00100003 	.word	0x00100003
     d64:	000c0003 	.word	0x000c0003
     d68:	00160003 	.word	0x00160003

00000d6c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     d6c:	b530      	push	{r4, r5, lr}
     d6e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     d70:	4b0b      	ldr	r3, [pc, #44]	; (da0 <_sercom_get_sercom_inst_index+0x34>)
     d72:	466a      	mov	r2, sp
     d74:	cb32      	ldmia	r3!, {r1, r4, r5}
     d76:	c232      	stmia	r2!, {r1, r4, r5}
     d78:	cb32      	ldmia	r3!, {r1, r4, r5}
     d7a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d7c:	9b00      	ldr	r3, [sp, #0]
     d7e:	4283      	cmp	r3, r0
     d80:	d00b      	beq.n	d9a <_sercom_get_sercom_inst_index+0x2e>
     d82:	2301      	movs	r3, #1
     d84:	009a      	lsls	r2, r3, #2
     d86:	4669      	mov	r1, sp
     d88:	5852      	ldr	r2, [r2, r1]
     d8a:	4282      	cmp	r2, r0
     d8c:	d006      	beq.n	d9c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d8e:	3301      	adds	r3, #1
     d90:	2b06      	cmp	r3, #6
     d92:	d1f7      	bne.n	d84 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     d94:	2000      	movs	r0, #0
}
     d96:	b007      	add	sp, #28
     d98:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d9a:	2300      	movs	r3, #0
			return i;
     d9c:	b2d8      	uxtb	r0, r3
     d9e:	e7fa      	b.n	d96 <_sercom_get_sercom_inst_index+0x2a>
     da0:	00004974 	.word	0x00004974

00000da4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     da4:	4770      	bx	lr
	...

00000da8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     da8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     daa:	4b0a      	ldr	r3, [pc, #40]	; (dd4 <_sercom_set_handler+0x2c>)
     dac:	781b      	ldrb	r3, [r3, #0]
     dae:	2b00      	cmp	r3, #0
     db0:	d10c      	bne.n	dcc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     db2:	4f09      	ldr	r7, [pc, #36]	; (dd8 <_sercom_set_handler+0x30>)
     db4:	4e09      	ldr	r6, [pc, #36]	; (ddc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     db6:	4d0a      	ldr	r5, [pc, #40]	; (de0 <_sercom_set_handler+0x38>)
     db8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     dba:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     dbc:	195a      	adds	r2, r3, r5
     dbe:	6014      	str	r4, [r2, #0]
     dc0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dc2:	2b18      	cmp	r3, #24
     dc4:	d1f9      	bne.n	dba <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     dc6:	2201      	movs	r2, #1
     dc8:	4b02      	ldr	r3, [pc, #8]	; (dd4 <_sercom_set_handler+0x2c>)
     dca:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     dcc:	0080      	lsls	r0, r0, #2
     dce:	4b02      	ldr	r3, [pc, #8]	; (dd8 <_sercom_set_handler+0x30>)
     dd0:	50c1      	str	r1, [r0, r3]
}
     dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dd4:	2000014a 	.word	0x2000014a
     dd8:	2000014c 	.word	0x2000014c
     ddc:	00000da5 	.word	0x00000da5
     de0:	20000190 	.word	0x20000190

00000de4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     de4:	b500      	push	{lr}
     de6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     de8:	2309      	movs	r3, #9
     dea:	466a      	mov	r2, sp
     dec:	7013      	strb	r3, [r2, #0]
     dee:	3301      	adds	r3, #1
     df0:	7053      	strb	r3, [r2, #1]
     df2:	3301      	adds	r3, #1
     df4:	7093      	strb	r3, [r2, #2]
     df6:	3301      	adds	r3, #1
     df8:	70d3      	strb	r3, [r2, #3]
     dfa:	3301      	adds	r3, #1
     dfc:	7113      	strb	r3, [r2, #4]
     dfe:	3301      	adds	r3, #1
     e00:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e02:	4b03      	ldr	r3, [pc, #12]	; (e10 <_sercom_get_interrupt_vector+0x2c>)
     e04:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     e06:	466b      	mov	r3, sp
     e08:	5618      	ldrsb	r0, [r3, r0]
}
     e0a:	b003      	add	sp, #12
     e0c:	bd00      	pop	{pc}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	00000d6d 	.word	0x00000d6d

00000e14 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e14:	b510      	push	{r4, lr}
     e16:	4b02      	ldr	r3, [pc, #8]	; (e20 <SERCOM0_Handler+0xc>)
     e18:	681b      	ldr	r3, [r3, #0]
     e1a:	2000      	movs	r0, #0
     e1c:	4798      	blx	r3
     e1e:	bd10      	pop	{r4, pc}
     e20:	2000014c 	.word	0x2000014c

00000e24 <SERCOM1_Handler>:
     e24:	b510      	push	{r4, lr}
     e26:	4b02      	ldr	r3, [pc, #8]	; (e30 <SERCOM1_Handler+0xc>)
     e28:	685b      	ldr	r3, [r3, #4]
     e2a:	2001      	movs	r0, #1
     e2c:	4798      	blx	r3
     e2e:	bd10      	pop	{r4, pc}
     e30:	2000014c 	.word	0x2000014c

00000e34 <SERCOM2_Handler>:
     e34:	b510      	push	{r4, lr}
     e36:	4b02      	ldr	r3, [pc, #8]	; (e40 <SERCOM2_Handler+0xc>)
     e38:	689b      	ldr	r3, [r3, #8]
     e3a:	2002      	movs	r0, #2
     e3c:	4798      	blx	r3
     e3e:	bd10      	pop	{r4, pc}
     e40:	2000014c 	.word	0x2000014c

00000e44 <SERCOM3_Handler>:
     e44:	b510      	push	{r4, lr}
     e46:	4b02      	ldr	r3, [pc, #8]	; (e50 <SERCOM3_Handler+0xc>)
     e48:	68db      	ldr	r3, [r3, #12]
     e4a:	2003      	movs	r0, #3
     e4c:	4798      	blx	r3
     e4e:	bd10      	pop	{r4, pc}
     e50:	2000014c 	.word	0x2000014c

00000e54 <SERCOM4_Handler>:
     e54:	b510      	push	{r4, lr}
     e56:	4b02      	ldr	r3, [pc, #8]	; (e60 <SERCOM4_Handler+0xc>)
     e58:	691b      	ldr	r3, [r3, #16]
     e5a:	2004      	movs	r0, #4
     e5c:	4798      	blx	r3
     e5e:	bd10      	pop	{r4, pc}
     e60:	2000014c 	.word	0x2000014c

00000e64 <SERCOM5_Handler>:
     e64:	b510      	push	{r4, lr}
     e66:	4b02      	ldr	r3, [pc, #8]	; (e70 <SERCOM5_Handler+0xc>)
     e68:	695b      	ldr	r3, [r3, #20]
     e6a:	2005      	movs	r0, #5
     e6c:	4798      	blx	r3
     e6e:	bd10      	pop	{r4, pc}
     e70:	2000014c 	.word	0x2000014c

00000e74 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     e74:	b5f0      	push	{r4, r5, r6, r7, lr}
     e76:	46de      	mov	lr, fp
     e78:	4657      	mov	r7, sl
     e7a:	464e      	mov	r6, r9
     e7c:	4645      	mov	r5, r8
     e7e:	b5e0      	push	{r5, r6, r7, lr}
     e80:	b091      	sub	sp, #68	; 0x44
     e82:	0005      	movs	r5, r0
     e84:	000c      	movs	r4, r1
     e86:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     e88:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e8a:	0008      	movs	r0, r1
     e8c:	4bba      	ldr	r3, [pc, #744]	; (1178 <usart_init+0x304>)
     e8e:	4798      	blx	r3
     e90:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e92:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     e94:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e96:	07db      	lsls	r3, r3, #31
     e98:	d506      	bpl.n	ea8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     e9a:	b011      	add	sp, #68	; 0x44
     e9c:	bc3c      	pop	{r2, r3, r4, r5}
     e9e:	4690      	mov	r8, r2
     ea0:	4699      	mov	r9, r3
     ea2:	46a2      	mov	sl, r4
     ea4:	46ab      	mov	fp, r5
     ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ea8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     eaa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     eac:	079b      	lsls	r3, r3, #30
     eae:	d4f4      	bmi.n	e9a <usart_init+0x26>
     eb0:	49b2      	ldr	r1, [pc, #712]	; (117c <usart_init+0x308>)
     eb2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     eb4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     eb6:	2301      	movs	r3, #1
     eb8:	40bb      	lsls	r3, r7
     eba:	4303      	orrs	r3, r0
     ebc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     ebe:	a90f      	add	r1, sp, #60	; 0x3c
     ec0:	272d      	movs	r7, #45	; 0x2d
     ec2:	5df3      	ldrb	r3, [r6, r7]
     ec4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ec6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     ec8:	b2d3      	uxtb	r3, r2
     eca:	9302      	str	r3, [sp, #8]
     ecc:	0018      	movs	r0, r3
     ece:	4bac      	ldr	r3, [pc, #688]	; (1180 <usart_init+0x30c>)
     ed0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     ed2:	9802      	ldr	r0, [sp, #8]
     ed4:	4bab      	ldr	r3, [pc, #684]	; (1184 <usart_init+0x310>)
     ed6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ed8:	5df0      	ldrb	r0, [r6, r7]
     eda:	2100      	movs	r1, #0
     edc:	4baa      	ldr	r3, [pc, #680]	; (1188 <usart_init+0x314>)
     ede:	4798      	blx	r3
	module->character_size = config->character_size;
     ee0:	7af3      	ldrb	r3, [r6, #11]
     ee2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     ee4:	2324      	movs	r3, #36	; 0x24
     ee6:	5cf3      	ldrb	r3, [r6, r3]
     ee8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     eea:	2325      	movs	r3, #37	; 0x25
     eec:	5cf3      	ldrb	r3, [r6, r3]
     eee:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     ef0:	7ef3      	ldrb	r3, [r6, #27]
     ef2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     ef4:	7f33      	ldrb	r3, [r6, #28]
     ef6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     ef8:	682b      	ldr	r3, [r5, #0]
     efa:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     efc:	0018      	movs	r0, r3
     efe:	4b9e      	ldr	r3, [pc, #632]	; (1178 <usart_init+0x304>)
     f00:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f02:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     f04:	2200      	movs	r2, #0
     f06:	230e      	movs	r3, #14
     f08:	a906      	add	r1, sp, #24
     f0a:	468c      	mov	ip, r1
     f0c:	4463      	add	r3, ip
     f0e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     f10:	8a32      	ldrh	r2, [r6, #16]
     f12:	9202      	str	r2, [sp, #8]
     f14:	2380      	movs	r3, #128	; 0x80
     f16:	01db      	lsls	r3, r3, #7
     f18:	429a      	cmp	r2, r3
     f1a:	d100      	bne.n	f1e <usart_init+0xaa>
     f1c:	e09a      	b.n	1054 <usart_init+0x1e0>
     f1e:	d90f      	bls.n	f40 <usart_init+0xcc>
     f20:	23c0      	movs	r3, #192	; 0xc0
     f22:	01db      	lsls	r3, r3, #7
     f24:	9a02      	ldr	r2, [sp, #8]
     f26:	429a      	cmp	r2, r3
     f28:	d100      	bne.n	f2c <usart_init+0xb8>
     f2a:	e08e      	b.n	104a <usart_init+0x1d6>
     f2c:	2380      	movs	r3, #128	; 0x80
     f2e:	021b      	lsls	r3, r3, #8
     f30:	429a      	cmp	r2, r3
     f32:	d000      	beq.n	f36 <usart_init+0xc2>
     f34:	e11b      	b.n	116e <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     f36:	2303      	movs	r3, #3
     f38:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f3a:	2300      	movs	r3, #0
     f3c:	9307      	str	r3, [sp, #28]
     f3e:	e008      	b.n	f52 <usart_init+0xde>
	switch (config->sample_rate) {
     f40:	2380      	movs	r3, #128	; 0x80
     f42:	019b      	lsls	r3, r3, #6
     f44:	429a      	cmp	r2, r3
     f46:	d000      	beq.n	f4a <usart_init+0xd6>
     f48:	e111      	b.n	116e <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f4a:	2310      	movs	r3, #16
     f4c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f4e:	3b0f      	subs	r3, #15
     f50:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     f52:	6833      	ldr	r3, [r6, #0]
     f54:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     f56:	68f3      	ldr	r3, [r6, #12]
     f58:	469b      	mov	fp, r3
		config->sample_adjustment |
     f5a:	6973      	ldr	r3, [r6, #20]
     f5c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f5e:	7e33      	ldrb	r3, [r6, #24]
     f60:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f62:	2326      	movs	r3, #38	; 0x26
     f64:	5cf3      	ldrb	r3, [r6, r3]
     f66:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     f68:	6873      	ldr	r3, [r6, #4]
     f6a:	4699      	mov	r9, r3
	switch (transfer_mode)
     f6c:	2b00      	cmp	r3, #0
     f6e:	d100      	bne.n	f72 <usart_init+0xfe>
     f70:	e09c      	b.n	10ac <usart_init+0x238>
     f72:	2380      	movs	r3, #128	; 0x80
     f74:	055b      	lsls	r3, r3, #21
     f76:	4599      	cmp	r9, r3
     f78:	d100      	bne.n	f7c <usart_init+0x108>
     f7a:	e080      	b.n	107e <usart_init+0x20a>
	if(config->encoding_format_enable) {
     f7c:	7e73      	ldrb	r3, [r6, #25]
     f7e:	2b00      	cmp	r3, #0
     f80:	d002      	beq.n	f88 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     f82:	7eb3      	ldrb	r3, [r6, #26]
     f84:	4642      	mov	r2, r8
     f86:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     f88:	230e      	movs	r3, #14
     f8a:	aa06      	add	r2, sp, #24
     f8c:	4694      	mov	ip, r2
     f8e:	4463      	add	r3, ip
     f90:	881b      	ldrh	r3, [r3, #0]
     f92:	4642      	mov	r2, r8
     f94:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     f96:	9b05      	ldr	r3, [sp, #20]
     f98:	465a      	mov	r2, fp
     f9a:	4313      	orrs	r3, r2
     f9c:	9a03      	ldr	r2, [sp, #12]
     f9e:	4313      	orrs	r3, r2
     fa0:	464a      	mov	r2, r9
     fa2:	4313      	orrs	r3, r2
     fa4:	9f02      	ldr	r7, [sp, #8]
     fa6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     fa8:	9b04      	ldr	r3, [sp, #16]
     faa:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     fac:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     fae:	4653      	mov	r3, sl
     fb0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     fb2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     fb4:	2327      	movs	r3, #39	; 0x27
     fb6:	5cf3      	ldrb	r3, [r6, r3]
     fb8:	2b00      	cmp	r3, #0
     fba:	d101      	bne.n	fc0 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     fbc:	3304      	adds	r3, #4
     fbe:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     fc0:	7e73      	ldrb	r3, [r6, #25]
     fc2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     fc4:	7f32      	ldrb	r2, [r6, #28]
     fc6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     fc8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     fca:	7f72      	ldrb	r2, [r6, #29]
     fcc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     fce:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     fd0:	2224      	movs	r2, #36	; 0x24
     fd2:	5cb2      	ldrb	r2, [r6, r2]
     fd4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     fd6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     fd8:	2225      	movs	r2, #37	; 0x25
     fda:	5cb2      	ldrb	r2, [r6, r2]
     fdc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     fde:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     fe0:	7ab1      	ldrb	r1, [r6, #10]
     fe2:	7af2      	ldrb	r2, [r6, #11]
     fe4:	4311      	orrs	r1, r2
     fe6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     fe8:	8933      	ldrh	r3, [r6, #8]
     fea:	2bff      	cmp	r3, #255	; 0xff
     fec:	d100      	bne.n	ff0 <usart_init+0x17c>
     fee:	e081      	b.n	10f4 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     ff0:	2280      	movs	r2, #128	; 0x80
     ff2:	0452      	lsls	r2, r2, #17
     ff4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     ff6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     ff8:	232c      	movs	r3, #44	; 0x2c
     ffa:	5cf3      	ldrb	r3, [r6, r3]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d103      	bne.n	1008 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1000:	4b62      	ldr	r3, [pc, #392]	; (118c <usart_init+0x318>)
    1002:	789b      	ldrb	r3, [r3, #2]
    1004:	079b      	lsls	r3, r3, #30
    1006:	d501      	bpl.n	100c <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1008:	2380      	movs	r3, #128	; 0x80
    100a:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    100c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    100e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1010:	2b00      	cmp	r3, #0
    1012:	d1fc      	bne.n	100e <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    1014:	4643      	mov	r3, r8
    1016:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1018:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    101a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    101c:	2b00      	cmp	r3, #0
    101e:	d1fc      	bne.n	101a <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1020:	4643      	mov	r3, r8
    1022:	601f      	str	r7, [r3, #0]
    1024:	ab0e      	add	r3, sp, #56	; 0x38
    1026:	2280      	movs	r2, #128	; 0x80
    1028:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    102a:	2200      	movs	r2, #0
    102c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    102e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1030:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1032:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1034:	930a      	str	r3, [sp, #40]	; 0x28
    1036:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1038:	930b      	str	r3, [sp, #44]	; 0x2c
    103a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    103c:	930c      	str	r3, [sp, #48]	; 0x30
    103e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1040:	9302      	str	r3, [sp, #8]
    1042:	930d      	str	r3, [sp, #52]	; 0x34
    1044:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1046:	ae0a      	add	r6, sp, #40	; 0x28
    1048:	e063      	b.n	1112 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    104a:	2308      	movs	r3, #8
    104c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    104e:	3b07      	subs	r3, #7
    1050:	9307      	str	r3, [sp, #28]
    1052:	e77e      	b.n	f52 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1054:	6833      	ldr	r3, [r6, #0]
    1056:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1058:	68f3      	ldr	r3, [r6, #12]
    105a:	469b      	mov	fp, r3
		config->sample_adjustment |
    105c:	6973      	ldr	r3, [r6, #20]
    105e:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1060:	7e33      	ldrb	r3, [r6, #24]
    1062:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1064:	2326      	movs	r3, #38	; 0x26
    1066:	5cf3      	ldrb	r3, [r6, r3]
    1068:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    106a:	6873      	ldr	r3, [r6, #4]
    106c:	4699      	mov	r9, r3
	switch (transfer_mode)
    106e:	2b00      	cmp	r3, #0
    1070:	d018      	beq.n	10a4 <usart_init+0x230>
    1072:	2380      	movs	r3, #128	; 0x80
    1074:	055b      	lsls	r3, r3, #21
    1076:	4599      	cmp	r9, r3
    1078:	d001      	beq.n	107e <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    107a:	2000      	movs	r0, #0
    107c:	e025      	b.n	10ca <usart_init+0x256>
			if (!config->use_external_clock) {
    107e:	2327      	movs	r3, #39	; 0x27
    1080:	5cf3      	ldrb	r3, [r6, r3]
    1082:	2b00      	cmp	r3, #0
    1084:	d000      	beq.n	1088 <usart_init+0x214>
    1086:	e779      	b.n	f7c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1088:	6a33      	ldr	r3, [r6, #32]
    108a:	001f      	movs	r7, r3
    108c:	b2c0      	uxtb	r0, r0
    108e:	4b40      	ldr	r3, [pc, #256]	; (1190 <usart_init+0x31c>)
    1090:	4798      	blx	r3
    1092:	0001      	movs	r1, r0
    1094:	220e      	movs	r2, #14
    1096:	ab06      	add	r3, sp, #24
    1098:	469c      	mov	ip, r3
    109a:	4462      	add	r2, ip
    109c:	0038      	movs	r0, r7
    109e:	4b3d      	ldr	r3, [pc, #244]	; (1194 <usart_init+0x320>)
    10a0:	4798      	blx	r3
    10a2:	e012      	b.n	10ca <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    10a4:	2308      	movs	r3, #8
    10a6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10a8:	2300      	movs	r3, #0
    10aa:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    10ac:	2327      	movs	r3, #39	; 0x27
    10ae:	5cf3      	ldrb	r3, [r6, r3]
    10b0:	2b00      	cmp	r3, #0
    10b2:	d00e      	beq.n	10d2 <usart_init+0x25e>
				status_code =
    10b4:	9b06      	ldr	r3, [sp, #24]
    10b6:	9300      	str	r3, [sp, #0]
    10b8:	9b07      	ldr	r3, [sp, #28]
    10ba:	220e      	movs	r2, #14
    10bc:	a906      	add	r1, sp, #24
    10be:	468c      	mov	ip, r1
    10c0:	4462      	add	r2, ip
    10c2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    10c4:	6a30      	ldr	r0, [r6, #32]
    10c6:	4f34      	ldr	r7, [pc, #208]	; (1198 <usart_init+0x324>)
    10c8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    10ca:	2800      	cmp	r0, #0
    10cc:	d000      	beq.n	10d0 <usart_init+0x25c>
    10ce:	e6e4      	b.n	e9a <usart_init+0x26>
    10d0:	e754      	b.n	f7c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    10d2:	6a33      	ldr	r3, [r6, #32]
    10d4:	001f      	movs	r7, r3
    10d6:	b2c0      	uxtb	r0, r0
    10d8:	4b2d      	ldr	r3, [pc, #180]	; (1190 <usart_init+0x31c>)
    10da:	4798      	blx	r3
    10dc:	0001      	movs	r1, r0
				status_code =
    10de:	9b06      	ldr	r3, [sp, #24]
    10e0:	9300      	str	r3, [sp, #0]
    10e2:	9b07      	ldr	r3, [sp, #28]
    10e4:	220e      	movs	r2, #14
    10e6:	a806      	add	r0, sp, #24
    10e8:	4684      	mov	ip, r0
    10ea:	4462      	add	r2, ip
    10ec:	0038      	movs	r0, r7
    10ee:	4f2a      	ldr	r7, [pc, #168]	; (1198 <usart_init+0x324>)
    10f0:	47b8      	blx	r7
    10f2:	e7ea      	b.n	10ca <usart_init+0x256>
		if(config->lin_slave_enable) {
    10f4:	7ef3      	ldrb	r3, [r6, #27]
    10f6:	2b00      	cmp	r3, #0
    10f8:	d100      	bne.n	10fc <usart_init+0x288>
    10fa:	e77d      	b.n	ff8 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    10fc:	2380      	movs	r3, #128	; 0x80
    10fe:	04db      	lsls	r3, r3, #19
    1100:	431f      	orrs	r7, r3
    1102:	e779      	b.n	ff8 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1104:	0020      	movs	r0, r4
    1106:	4b25      	ldr	r3, [pc, #148]	; (119c <usart_init+0x328>)
    1108:	4798      	blx	r3
    110a:	e007      	b.n	111c <usart_init+0x2a8>
    110c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    110e:	2f04      	cmp	r7, #4
    1110:	d00d      	beq.n	112e <usart_init+0x2ba>
    1112:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1114:	00bb      	lsls	r3, r7, #2
    1116:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1118:	2800      	cmp	r0, #0
    111a:	d0f3      	beq.n	1104 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    111c:	1c43      	adds	r3, r0, #1
    111e:	d0f5      	beq.n	110c <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1120:	a90e      	add	r1, sp, #56	; 0x38
    1122:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1124:	0c00      	lsrs	r0, r0, #16
    1126:	b2c0      	uxtb	r0, r0
    1128:	4b1d      	ldr	r3, [pc, #116]	; (11a0 <usart_init+0x32c>)
    112a:	4798      	blx	r3
    112c:	e7ee      	b.n	110c <usart_init+0x298>
		module->callback[i]            = NULL;
    112e:	2300      	movs	r3, #0
    1130:	60eb      	str	r3, [r5, #12]
    1132:	612b      	str	r3, [r5, #16]
    1134:	616b      	str	r3, [r5, #20]
    1136:	61ab      	str	r3, [r5, #24]
    1138:	61eb      	str	r3, [r5, #28]
    113a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    113c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    113e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1140:	2200      	movs	r2, #0
    1142:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1144:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1146:	3330      	adds	r3, #48	; 0x30
    1148:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    114a:	3301      	adds	r3, #1
    114c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    114e:	3301      	adds	r3, #1
    1150:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1152:	3301      	adds	r3, #1
    1154:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1156:	6828      	ldr	r0, [r5, #0]
    1158:	4b07      	ldr	r3, [pc, #28]	; (1178 <usart_init+0x304>)
    115a:	4798      	blx	r3
    115c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    115e:	4911      	ldr	r1, [pc, #68]	; (11a4 <usart_init+0x330>)
    1160:	4b11      	ldr	r3, [pc, #68]	; (11a8 <usart_init+0x334>)
    1162:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1164:	00a4      	lsls	r4, r4, #2
    1166:	4b11      	ldr	r3, [pc, #68]	; (11ac <usart_init+0x338>)
    1168:	50e5      	str	r5, [r4, r3]
	return status_code;
    116a:	2000      	movs	r0, #0
    116c:	e695      	b.n	e9a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    116e:	2310      	movs	r3, #16
    1170:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1172:	2300      	movs	r3, #0
    1174:	9307      	str	r3, [sp, #28]
    1176:	e6ec      	b.n	f52 <usart_init+0xde>
    1178:	00000d6d 	.word	0x00000d6d
    117c:	40000400 	.word	0x40000400
    1180:	00001a19 	.word	0x00001a19
    1184:	0000198d 	.word	0x0000198d
    1188:	00000ba9 	.word	0x00000ba9
    118c:	41002000 	.word	0x41002000
    1190:	00001a35 	.word	0x00001a35
    1194:	00000aeb 	.word	0x00000aeb
    1198:	00000b15 	.word	0x00000b15
    119c:	00000bf5 	.word	0x00000bf5
    11a0:	00001b11 	.word	0x00001b11
    11a4:	00001241 	.word	0x00001241
    11a8:	00000da9 	.word	0x00000da9
    11ac:	20000190 	.word	0x20000190

000011b0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    11b0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    11b2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    11b4:	2a00      	cmp	r2, #0
    11b6:	d101      	bne.n	11bc <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    11b8:	0018      	movs	r0, r3
    11ba:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    11bc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    11be:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    11c0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    11c2:	2a00      	cmp	r2, #0
    11c4:	d1f8      	bne.n	11b8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11c6:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    11c8:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    11ca:	2102      	movs	r1, #2
    11cc:	7e13      	ldrb	r3, [r2, #24]
    11ce:	420b      	tst	r3, r1
    11d0:	d0fc      	beq.n	11cc <usart_write_wait+0x1c>
	return STATUS_OK;
    11d2:	2300      	movs	r3, #0
    11d4:	e7f0      	b.n	11b8 <usart_write_wait+0x8>

000011d6 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    11d6:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    11d8:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    11da:	2a00      	cmp	r2, #0
    11dc:	d101      	bne.n	11e2 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    11de:	0018      	movs	r0, r3
    11e0:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    11e2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    11e4:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    11e6:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    11e8:	2a00      	cmp	r2, #0
    11ea:	d1f8      	bne.n	11de <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    11ec:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    11ee:	7e10      	ldrb	r0, [r2, #24]
    11f0:	0740      	lsls	r0, r0, #29
    11f2:	d5f4      	bpl.n	11de <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    11f4:	8b53      	ldrh	r3, [r2, #26]
    11f6:	b2db      	uxtb	r3, r3
	if (error_code) {
    11f8:	0698      	lsls	r0, r3, #26
    11fa:	d01d      	beq.n	1238 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    11fc:	0798      	lsls	r0, r3, #30
    11fe:	d503      	bpl.n	1208 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1200:	2302      	movs	r3, #2
    1202:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1204:	3318      	adds	r3, #24
    1206:	e7ea      	b.n	11de <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1208:	0758      	lsls	r0, r3, #29
    120a:	d503      	bpl.n	1214 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    120c:	2304      	movs	r3, #4
    120e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1210:	331a      	adds	r3, #26
    1212:	e7e4      	b.n	11de <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1214:	07d8      	lsls	r0, r3, #31
    1216:	d503      	bpl.n	1220 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1218:	2301      	movs	r3, #1
    121a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    121c:	3312      	adds	r3, #18
    121e:	e7de      	b.n	11de <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1220:	06d8      	lsls	r0, r3, #27
    1222:	d503      	bpl.n	122c <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1224:	2310      	movs	r3, #16
    1226:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1228:	3332      	adds	r3, #50	; 0x32
    122a:	e7d8      	b.n	11de <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    122c:	069b      	lsls	r3, r3, #26
    122e:	d503      	bpl.n	1238 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1230:	2320      	movs	r3, #32
    1232:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1234:	3321      	adds	r3, #33	; 0x21
    1236:	e7d2      	b.n	11de <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1238:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    123a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    123c:	2300      	movs	r3, #0
    123e:	e7ce      	b.n	11de <usart_read_wait+0x8>

00001240 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1242:	0080      	lsls	r0, r0, #2
    1244:	4b62      	ldr	r3, [pc, #392]	; (13d0 <_usart_interrupt_handler+0x190>)
    1246:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1248:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    124a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    124c:	2b00      	cmp	r3, #0
    124e:	d1fc      	bne.n	124a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1250:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1252:	7da6      	ldrb	r6, [r4, #22]
    1254:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1256:	2330      	movs	r3, #48	; 0x30
    1258:	5ceb      	ldrb	r3, [r5, r3]
    125a:	2231      	movs	r2, #49	; 0x31
    125c:	5caf      	ldrb	r7, [r5, r2]
    125e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1260:	07f3      	lsls	r3, r6, #31
    1262:	d522      	bpl.n	12aa <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1264:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1266:	b29b      	uxth	r3, r3
    1268:	2b00      	cmp	r3, #0
    126a:	d01c      	beq.n	12a6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    126c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    126e:	7813      	ldrb	r3, [r2, #0]
    1270:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1272:	1c51      	adds	r1, r2, #1
    1274:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1276:	7969      	ldrb	r1, [r5, #5]
    1278:	2901      	cmp	r1, #1
    127a:	d00e      	beq.n	129a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    127c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    127e:	05db      	lsls	r3, r3, #23
    1280:	0ddb      	lsrs	r3, r3, #23
    1282:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1284:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1286:	3b01      	subs	r3, #1
    1288:	b29b      	uxth	r3, r3
    128a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    128c:	2b00      	cmp	r3, #0
    128e:	d10c      	bne.n	12aa <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1290:	3301      	adds	r3, #1
    1292:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1294:	3301      	adds	r3, #1
    1296:	75a3      	strb	r3, [r4, #22]
    1298:	e007      	b.n	12aa <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    129a:	7851      	ldrb	r1, [r2, #1]
    129c:	0209      	lsls	r1, r1, #8
    129e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    12a0:	3202      	adds	r2, #2
    12a2:	62aa      	str	r2, [r5, #40]	; 0x28
    12a4:	e7eb      	b.n	127e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    12a6:	2301      	movs	r3, #1
    12a8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    12aa:	07b3      	lsls	r3, r6, #30
    12ac:	d506      	bpl.n	12bc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    12ae:	2302      	movs	r3, #2
    12b0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    12b2:	2200      	movs	r2, #0
    12b4:	3331      	adds	r3, #49	; 0x31
    12b6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    12b8:	07fb      	lsls	r3, r7, #31
    12ba:	d41a      	bmi.n	12f2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    12bc:	0773      	lsls	r3, r6, #29
    12be:	d565      	bpl.n	138c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    12c0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    12c2:	b29b      	uxth	r3, r3
    12c4:	2b00      	cmp	r3, #0
    12c6:	d05f      	beq.n	1388 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12c8:	8b63      	ldrh	r3, [r4, #26]
    12ca:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    12cc:	071a      	lsls	r2, r3, #28
    12ce:	d414      	bmi.n	12fa <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12d0:	223f      	movs	r2, #63	; 0x3f
    12d2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    12d4:	2b00      	cmp	r3, #0
    12d6:	d034      	beq.n	1342 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    12d8:	079a      	lsls	r2, r3, #30
    12da:	d511      	bpl.n	1300 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    12dc:	221a      	movs	r2, #26
    12de:	2332      	movs	r3, #50	; 0x32
    12e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    12e2:	3b30      	subs	r3, #48	; 0x30
    12e4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    12e6:	077b      	lsls	r3, r7, #29
    12e8:	d550      	bpl.n	138c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    12ea:	0028      	movs	r0, r5
    12ec:	696b      	ldr	r3, [r5, #20]
    12ee:	4798      	blx	r3
    12f0:	e04c      	b.n	138c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    12f2:	0028      	movs	r0, r5
    12f4:	68eb      	ldr	r3, [r5, #12]
    12f6:	4798      	blx	r3
    12f8:	e7e0      	b.n	12bc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    12fa:	2237      	movs	r2, #55	; 0x37
    12fc:	4013      	ands	r3, r2
    12fe:	e7e9      	b.n	12d4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1300:	075a      	lsls	r2, r3, #29
    1302:	d505      	bpl.n	1310 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1304:	221e      	movs	r2, #30
    1306:	2332      	movs	r3, #50	; 0x32
    1308:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    130a:	3b2e      	subs	r3, #46	; 0x2e
    130c:	8363      	strh	r3, [r4, #26]
    130e:	e7ea      	b.n	12e6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1310:	07da      	lsls	r2, r3, #31
    1312:	d505      	bpl.n	1320 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1314:	2213      	movs	r2, #19
    1316:	2332      	movs	r3, #50	; 0x32
    1318:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    131a:	3b31      	subs	r3, #49	; 0x31
    131c:	8363      	strh	r3, [r4, #26]
    131e:	e7e2      	b.n	12e6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1320:	06da      	lsls	r2, r3, #27
    1322:	d505      	bpl.n	1330 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1324:	2242      	movs	r2, #66	; 0x42
    1326:	2332      	movs	r3, #50	; 0x32
    1328:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    132a:	3b22      	subs	r3, #34	; 0x22
    132c:	8363      	strh	r3, [r4, #26]
    132e:	e7da      	b.n	12e6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1330:	2220      	movs	r2, #32
    1332:	421a      	tst	r2, r3
    1334:	d0d7      	beq.n	12e6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1336:	3221      	adds	r2, #33	; 0x21
    1338:	2332      	movs	r3, #50	; 0x32
    133a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    133c:	3b12      	subs	r3, #18
    133e:	8363      	strh	r3, [r4, #26]
    1340:	e7d1      	b.n	12e6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1342:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1344:	05db      	lsls	r3, r3, #23
    1346:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1348:	b2da      	uxtb	r2, r3
    134a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    134c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    134e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1350:	1c51      	adds	r1, r2, #1
    1352:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1354:	7969      	ldrb	r1, [r5, #5]
    1356:	2901      	cmp	r1, #1
    1358:	d010      	beq.n	137c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    135a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    135c:	3b01      	subs	r3, #1
    135e:	b29b      	uxth	r3, r3
    1360:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1362:	2b00      	cmp	r3, #0
    1364:	d112      	bne.n	138c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1366:	3304      	adds	r3, #4
    1368:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    136a:	2200      	movs	r2, #0
    136c:	332e      	adds	r3, #46	; 0x2e
    136e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1370:	07bb      	lsls	r3, r7, #30
    1372:	d50b      	bpl.n	138c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1374:	0028      	movs	r0, r5
    1376:	692b      	ldr	r3, [r5, #16]
    1378:	4798      	blx	r3
    137a:	e007      	b.n	138c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    137c:	0a1b      	lsrs	r3, r3, #8
    137e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1380:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1382:	3301      	adds	r3, #1
    1384:	626b      	str	r3, [r5, #36]	; 0x24
    1386:	e7e8      	b.n	135a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1388:	2304      	movs	r3, #4
    138a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    138c:	06f3      	lsls	r3, r6, #27
    138e:	d504      	bpl.n	139a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1390:	2310      	movs	r3, #16
    1392:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1394:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1396:	06fb      	lsls	r3, r7, #27
    1398:	d40e      	bmi.n	13b8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    139a:	06b3      	lsls	r3, r6, #26
    139c:	d504      	bpl.n	13a8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    139e:	2320      	movs	r3, #32
    13a0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    13a2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    13a4:	073b      	lsls	r3, r7, #28
    13a6:	d40b      	bmi.n	13c0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    13a8:	0733      	lsls	r3, r6, #28
    13aa:	d504      	bpl.n	13b6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    13ac:	2308      	movs	r3, #8
    13ae:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    13b0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    13b2:	06bb      	lsls	r3, r7, #26
    13b4:	d408      	bmi.n	13c8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    13b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    13b8:	0028      	movs	r0, r5
    13ba:	69eb      	ldr	r3, [r5, #28]
    13bc:	4798      	blx	r3
    13be:	e7ec      	b.n	139a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    13c0:	0028      	movs	r0, r5
    13c2:	69ab      	ldr	r3, [r5, #24]
    13c4:	4798      	blx	r3
    13c6:	e7ef      	b.n	13a8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    13c8:	6a2b      	ldr	r3, [r5, #32]
    13ca:	0028      	movs	r0, r5
    13cc:	4798      	blx	r3
}
    13ce:	e7f2      	b.n	13b6 <_usart_interrupt_handler+0x176>
    13d0:	20000190 	.word	0x20000190

000013d4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    13d4:	b510      	push	{r4, lr}
	switch (clock_source) {
    13d6:	2808      	cmp	r0, #8
    13d8:	d803      	bhi.n	13e2 <system_clock_source_get_hz+0xe>
    13da:	0080      	lsls	r0, r0, #2
    13dc:	4b1c      	ldr	r3, [pc, #112]	; (1450 <system_clock_source_get_hz+0x7c>)
    13de:	581b      	ldr	r3, [r3, r0]
    13e0:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    13e2:	2000      	movs	r0, #0
    13e4:	e032      	b.n	144c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    13e6:	4b1b      	ldr	r3, [pc, #108]	; (1454 <system_clock_source_get_hz+0x80>)
    13e8:	6918      	ldr	r0, [r3, #16]
    13ea:	e02f      	b.n	144c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    13ec:	4b1a      	ldr	r3, [pc, #104]	; (1458 <system_clock_source_get_hz+0x84>)
    13ee:	6a1b      	ldr	r3, [r3, #32]
    13f0:	059b      	lsls	r3, r3, #22
    13f2:	0f9b      	lsrs	r3, r3, #30
    13f4:	4819      	ldr	r0, [pc, #100]	; (145c <system_clock_source_get_hz+0x88>)
    13f6:	40d8      	lsrs	r0, r3
    13f8:	e028      	b.n	144c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    13fa:	4b16      	ldr	r3, [pc, #88]	; (1454 <system_clock_source_get_hz+0x80>)
    13fc:	6958      	ldr	r0, [r3, #20]
    13fe:	e025      	b.n	144c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1400:	4b14      	ldr	r3, [pc, #80]	; (1454 <system_clock_source_get_hz+0x80>)
    1402:	681b      	ldr	r3, [r3, #0]
			return 0;
    1404:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1406:	079b      	lsls	r3, r3, #30
    1408:	d520      	bpl.n	144c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    140a:	4913      	ldr	r1, [pc, #76]	; (1458 <system_clock_source_get_hz+0x84>)
    140c:	2210      	movs	r2, #16
    140e:	68cb      	ldr	r3, [r1, #12]
    1410:	421a      	tst	r2, r3
    1412:	d0fc      	beq.n	140e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1414:	4b0f      	ldr	r3, [pc, #60]	; (1454 <system_clock_source_get_hz+0x80>)
    1416:	681a      	ldr	r2, [r3, #0]
    1418:	2324      	movs	r3, #36	; 0x24
    141a:	4013      	ands	r3, r2
    141c:	2b04      	cmp	r3, #4
    141e:	d001      	beq.n	1424 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1420:	480f      	ldr	r0, [pc, #60]	; (1460 <system_clock_source_get_hz+0x8c>)
    1422:	e013      	b.n	144c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1424:	2000      	movs	r0, #0
    1426:	4b0f      	ldr	r3, [pc, #60]	; (1464 <system_clock_source_get_hz+0x90>)
    1428:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    142a:	4b0a      	ldr	r3, [pc, #40]	; (1454 <system_clock_source_get_hz+0x80>)
    142c:	689b      	ldr	r3, [r3, #8]
    142e:	041b      	lsls	r3, r3, #16
    1430:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1432:	4358      	muls	r0, r3
    1434:	e00a      	b.n	144c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1436:	2350      	movs	r3, #80	; 0x50
    1438:	4a07      	ldr	r2, [pc, #28]	; (1458 <system_clock_source_get_hz+0x84>)
    143a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    143c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    143e:	075b      	lsls	r3, r3, #29
    1440:	d504      	bpl.n	144c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1442:	4b04      	ldr	r3, [pc, #16]	; (1454 <system_clock_source_get_hz+0x80>)
    1444:	68d8      	ldr	r0, [r3, #12]
    1446:	e001      	b.n	144c <system_clock_source_get_hz+0x78>
		return 32768UL;
    1448:	2080      	movs	r0, #128	; 0x80
    144a:	0200      	lsls	r0, r0, #8
	}
}
    144c:	bd10      	pop	{r4, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	0000498c 	.word	0x0000498c
    1454:	20000164 	.word	0x20000164
    1458:	40000800 	.word	0x40000800
    145c:	007a1200 	.word	0x007a1200
    1460:	02dc6c00 	.word	0x02dc6c00
    1464:	00001a35 	.word	0x00001a35

00001468 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1468:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    146a:	490c      	ldr	r1, [pc, #48]	; (149c <system_clock_source_osc8m_set_config+0x34>)
    146c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    146e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1470:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1472:	7840      	ldrb	r0, [r0, #1]
    1474:	2201      	movs	r2, #1
    1476:	4010      	ands	r0, r2
    1478:	0180      	lsls	r0, r0, #6
    147a:	2640      	movs	r6, #64	; 0x40
    147c:	43b3      	bics	r3, r6
    147e:	4303      	orrs	r3, r0
    1480:	402a      	ands	r2, r5
    1482:	01d2      	lsls	r2, r2, #7
    1484:	2080      	movs	r0, #128	; 0x80
    1486:	4383      	bics	r3, r0
    1488:	4313      	orrs	r3, r2
    148a:	2203      	movs	r2, #3
    148c:	4022      	ands	r2, r4
    148e:	0212      	lsls	r2, r2, #8
    1490:	4803      	ldr	r0, [pc, #12]	; (14a0 <system_clock_source_osc8m_set_config+0x38>)
    1492:	4003      	ands	r3, r0
    1494:	4313      	orrs	r3, r2
    1496:	620b      	str	r3, [r1, #32]
}
    1498:	bd70      	pop	{r4, r5, r6, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	40000800 	.word	0x40000800
    14a0:	fffffcff 	.word	0xfffffcff

000014a4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    14a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a6:	46de      	mov	lr, fp
    14a8:	4657      	mov	r7, sl
    14aa:	464e      	mov	r6, r9
    14ac:	4645      	mov	r5, r8
    14ae:	b5e0      	push	{r5, r6, r7, lr}
    14b0:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    14b2:	4b26      	ldr	r3, [pc, #152]	; (154c <system_clock_source_xosc32k_set_config+0xa8>)
    14b4:	469b      	mov	fp, r3
    14b6:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    14b8:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    14ba:	7800      	ldrb	r0, [r0, #0]
    14bc:	4242      	negs	r2, r0
    14be:	4142      	adcs	r2, r0
    14c0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    14c2:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    14c4:	78ca      	ldrb	r2, [r1, #3]
    14c6:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    14c8:	790a      	ldrb	r2, [r1, #4]
    14ca:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    14cc:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    14ce:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    14d0:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    14d2:	688a      	ldr	r2, [r1, #8]
    14d4:	491e      	ldr	r1, [pc, #120]	; (1550 <system_clock_source_xosc32k_set_config+0xac>)
    14d6:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    14d8:	2101      	movs	r1, #1
    14da:	464a      	mov	r2, r9
    14dc:	0092      	lsls	r2, r2, #2
    14de:	4691      	mov	r9, r2
    14e0:	2204      	movs	r2, #4
    14e2:	4393      	bics	r3, r2
    14e4:	464a      	mov	r2, r9
    14e6:	4313      	orrs	r3, r2
    14e8:	4642      	mov	r2, r8
    14ea:	400a      	ands	r2, r1
    14ec:	00d2      	lsls	r2, r2, #3
    14ee:	4690      	mov	r8, r2
    14f0:	2208      	movs	r2, #8
    14f2:	4393      	bics	r3, r2
    14f4:	4642      	mov	r2, r8
    14f6:	4313      	orrs	r3, r2
    14f8:	4662      	mov	r2, ip
    14fa:	400a      	ands	r2, r1
    14fc:	0112      	lsls	r2, r2, #4
    14fe:	4694      	mov	ip, r2
    1500:	2210      	movs	r2, #16
    1502:	4393      	bics	r3, r2
    1504:	4662      	mov	r2, ip
    1506:	4313      	orrs	r3, r2
    1508:	4008      	ands	r0, r1
    150a:	0140      	lsls	r0, r0, #5
    150c:	2220      	movs	r2, #32
    150e:	4393      	bics	r3, r2
    1510:	4303      	orrs	r3, r0
    1512:	400f      	ands	r7, r1
    1514:	01bf      	lsls	r7, r7, #6
    1516:	2040      	movs	r0, #64	; 0x40
    1518:	4383      	bics	r3, r0
    151a:	433b      	orrs	r3, r7
    151c:	400e      	ands	r6, r1
    151e:	01f6      	lsls	r6, r6, #7
    1520:	3040      	adds	r0, #64	; 0x40
    1522:	4383      	bics	r3, r0
    1524:	4333      	orrs	r3, r6
    1526:	3879      	subs	r0, #121	; 0x79
    1528:	4005      	ands	r5, r0
    152a:	022d      	lsls	r5, r5, #8
    152c:	4809      	ldr	r0, [pc, #36]	; (1554 <system_clock_source_xosc32k_set_config+0xb0>)
    152e:	4003      	ands	r3, r0
    1530:	432b      	orrs	r3, r5
    1532:	4021      	ands	r1, r4
    1534:	0309      	lsls	r1, r1, #12
    1536:	4808      	ldr	r0, [pc, #32]	; (1558 <system_clock_source_xosc32k_set_config+0xb4>)
    1538:	4003      	ands	r3, r0
    153a:	430b      	orrs	r3, r1
    153c:	465a      	mov	r2, fp
    153e:	8293      	strh	r3, [r2, #20]
}
    1540:	bc3c      	pop	{r2, r3, r4, r5}
    1542:	4690      	mov	r8, r2
    1544:	4699      	mov	r9, r3
    1546:	46a2      	mov	sl, r4
    1548:	46ab      	mov	fp, r5
    154a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    154c:	40000800 	.word	0x40000800
    1550:	20000164 	.word	0x20000164
    1554:	fffff8ff 	.word	0xfffff8ff
    1558:	ffffefff 	.word	0xffffefff

0000155c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    155c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    155e:	7a03      	ldrb	r3, [r0, #8]
    1560:	069b      	lsls	r3, r3, #26
    1562:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1564:	8942      	ldrh	r2, [r0, #10]
    1566:	0592      	lsls	r2, r2, #22
    1568:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    156a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    156c:	4918      	ldr	r1, [pc, #96]	; (15d0 <system_clock_source_dfll_set_config+0x74>)
    156e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1570:	7983      	ldrb	r3, [r0, #6]
    1572:	79c2      	ldrb	r2, [r0, #7]
    1574:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1576:	8842      	ldrh	r2, [r0, #2]
    1578:	8884      	ldrh	r4, [r0, #4]
    157a:	4322      	orrs	r2, r4
    157c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    157e:	7842      	ldrb	r2, [r0, #1]
    1580:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1582:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1584:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1586:	7803      	ldrb	r3, [r0, #0]
    1588:	2b04      	cmp	r3, #4
    158a:	d011      	beq.n	15b0 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    158c:	2b20      	cmp	r3, #32
    158e:	d10e      	bne.n	15ae <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1590:	7b03      	ldrb	r3, [r0, #12]
    1592:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1594:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1596:	4313      	orrs	r3, r2
    1598:	89c2      	ldrh	r2, [r0, #14]
    159a:	0412      	lsls	r2, r2, #16
    159c:	490d      	ldr	r1, [pc, #52]	; (15d4 <system_clock_source_dfll_set_config+0x78>)
    159e:	400a      	ands	r2, r1
    15a0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    15a2:	4a0b      	ldr	r2, [pc, #44]	; (15d0 <system_clock_source_dfll_set_config+0x74>)
    15a4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    15a6:	6811      	ldr	r1, [r2, #0]
    15a8:	4b0b      	ldr	r3, [pc, #44]	; (15d8 <system_clock_source_dfll_set_config+0x7c>)
    15aa:	430b      	orrs	r3, r1
    15ac:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    15ae:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    15b0:	7b03      	ldrb	r3, [r0, #12]
    15b2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    15b4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    15b6:	4313      	orrs	r3, r2
    15b8:	89c2      	ldrh	r2, [r0, #14]
    15ba:	0412      	lsls	r2, r2, #16
    15bc:	4905      	ldr	r1, [pc, #20]	; (15d4 <system_clock_source_dfll_set_config+0x78>)
    15be:	400a      	ands	r2, r1
    15c0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    15c2:	4a03      	ldr	r2, [pc, #12]	; (15d0 <system_clock_source_dfll_set_config+0x74>)
    15c4:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    15c6:	6813      	ldr	r3, [r2, #0]
    15c8:	2104      	movs	r1, #4
    15ca:	430b      	orrs	r3, r1
    15cc:	6013      	str	r3, [r2, #0]
    15ce:	e7ee      	b.n	15ae <system_clock_source_dfll_set_config+0x52>
    15d0:	20000164 	.word	0x20000164
    15d4:	03ff0000 	.word	0x03ff0000
    15d8:	00000424 	.word	0x00000424

000015dc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    15dc:	2808      	cmp	r0, #8
    15de:	d803      	bhi.n	15e8 <system_clock_source_enable+0xc>
    15e0:	0080      	lsls	r0, r0, #2
    15e2:	4b25      	ldr	r3, [pc, #148]	; (1678 <system_clock_source_enable+0x9c>)
    15e4:	581b      	ldr	r3, [r3, r0]
    15e6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    15e8:	2017      	movs	r0, #23
    15ea:	e044      	b.n	1676 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    15ec:	4a23      	ldr	r2, [pc, #140]	; (167c <system_clock_source_enable+0xa0>)
    15ee:	6a13      	ldr	r3, [r2, #32]
    15f0:	2102      	movs	r1, #2
    15f2:	430b      	orrs	r3, r1
    15f4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    15f6:	2000      	movs	r0, #0
    15f8:	e03d      	b.n	1676 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    15fa:	4a20      	ldr	r2, [pc, #128]	; (167c <system_clock_source_enable+0xa0>)
    15fc:	6993      	ldr	r3, [r2, #24]
    15fe:	2102      	movs	r1, #2
    1600:	430b      	orrs	r3, r1
    1602:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1604:	2000      	movs	r0, #0
		break;
    1606:	e036      	b.n	1676 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1608:	4a1c      	ldr	r2, [pc, #112]	; (167c <system_clock_source_enable+0xa0>)
    160a:	8a13      	ldrh	r3, [r2, #16]
    160c:	2102      	movs	r1, #2
    160e:	430b      	orrs	r3, r1
    1610:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1612:	2000      	movs	r0, #0
		break;
    1614:	e02f      	b.n	1676 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1616:	4a19      	ldr	r2, [pc, #100]	; (167c <system_clock_source_enable+0xa0>)
    1618:	8a93      	ldrh	r3, [r2, #20]
    161a:	2102      	movs	r1, #2
    161c:	430b      	orrs	r3, r1
    161e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1620:	2000      	movs	r0, #0
		break;
    1622:	e028      	b.n	1676 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1624:	4916      	ldr	r1, [pc, #88]	; (1680 <system_clock_source_enable+0xa4>)
    1626:	680b      	ldr	r3, [r1, #0]
    1628:	2202      	movs	r2, #2
    162a:	4313      	orrs	r3, r2
    162c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    162e:	4b13      	ldr	r3, [pc, #76]	; (167c <system_clock_source_enable+0xa0>)
    1630:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1632:	0019      	movs	r1, r3
    1634:	320e      	adds	r2, #14
    1636:	68cb      	ldr	r3, [r1, #12]
    1638:	421a      	tst	r2, r3
    163a:	d0fc      	beq.n	1636 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    163c:	4a10      	ldr	r2, [pc, #64]	; (1680 <system_clock_source_enable+0xa4>)
    163e:	6891      	ldr	r1, [r2, #8]
    1640:	4b0e      	ldr	r3, [pc, #56]	; (167c <system_clock_source_enable+0xa0>)
    1642:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1644:	6852      	ldr	r2, [r2, #4]
    1646:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1648:	2200      	movs	r2, #0
    164a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    164c:	0019      	movs	r1, r3
    164e:	3210      	adds	r2, #16
    1650:	68cb      	ldr	r3, [r1, #12]
    1652:	421a      	tst	r2, r3
    1654:	d0fc      	beq.n	1650 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1656:	4b0a      	ldr	r3, [pc, #40]	; (1680 <system_clock_source_enable+0xa4>)
    1658:	681b      	ldr	r3, [r3, #0]
    165a:	b29b      	uxth	r3, r3
    165c:	4a07      	ldr	r2, [pc, #28]	; (167c <system_clock_source_enable+0xa0>)
    165e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1660:	2000      	movs	r0, #0
    1662:	e008      	b.n	1676 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1664:	4905      	ldr	r1, [pc, #20]	; (167c <system_clock_source_enable+0xa0>)
    1666:	2244      	movs	r2, #68	; 0x44
    1668:	5c8b      	ldrb	r3, [r1, r2]
    166a:	2002      	movs	r0, #2
    166c:	4303      	orrs	r3, r0
    166e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1670:	2000      	movs	r0, #0
		break;
    1672:	e000      	b.n	1676 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1674:	2000      	movs	r0, #0
}
    1676:	4770      	bx	lr
    1678:	000049b0 	.word	0x000049b0
    167c:	40000800 	.word	0x40000800
    1680:	20000164 	.word	0x20000164

00001684 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1684:	b5f0      	push	{r4, r5, r6, r7, lr}
    1686:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1688:	22c2      	movs	r2, #194	; 0xc2
    168a:	00d2      	lsls	r2, r2, #3
    168c:	4b47      	ldr	r3, [pc, #284]	; (17ac <system_clock_init+0x128>)
    168e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1690:	4947      	ldr	r1, [pc, #284]	; (17b0 <system_clock_init+0x12c>)
    1692:	684b      	ldr	r3, [r1, #4]
    1694:	221e      	movs	r2, #30
    1696:	4393      	bics	r3, r2
    1698:	3a1c      	subs	r2, #28
    169a:	4313      	orrs	r3, r2
    169c:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    169e:	ab01      	add	r3, sp, #4
    16a0:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16a2:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    16a4:	4d43      	ldr	r5, [pc, #268]	; (17b4 <system_clock_init+0x130>)
    16a6:	b2e0      	uxtb	r0, r4
    16a8:	a901      	add	r1, sp, #4
    16aa:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    16ac:	3401      	adds	r4, #1
    16ae:	2c25      	cmp	r4, #37	; 0x25
    16b0:	d1f9      	bne.n	16a6 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    16b2:	a80a      	add	r0, sp, #40	; 0x28
    16b4:	2300      	movs	r3, #0
    16b6:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    16b8:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    16ba:	2280      	movs	r2, #128	; 0x80
    16bc:	0212      	lsls	r2, r2, #8
    16be:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    16c0:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    16c2:	2201      	movs	r2, #1
    16c4:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    16c6:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    16c8:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    16ca:	3205      	adds	r2, #5
    16cc:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    16ce:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    16d0:	4b39      	ldr	r3, [pc, #228]	; (17b8 <system_clock_init+0x134>)
    16d2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    16d4:	2005      	movs	r0, #5
    16d6:	4b39      	ldr	r3, [pc, #228]	; (17bc <system_clock_init+0x138>)
    16d8:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    16da:	4934      	ldr	r1, [pc, #208]	; (17ac <system_clock_init+0x128>)
    16dc:	2202      	movs	r2, #2
    16de:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    16e0:	421a      	tst	r2, r3
    16e2:	d0fc      	beq.n	16de <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    16e4:	4a31      	ldr	r2, [pc, #196]	; (17ac <system_clock_init+0x128>)
    16e6:	8a93      	ldrh	r3, [r2, #20]
    16e8:	2180      	movs	r1, #128	; 0x80
    16ea:	430b      	orrs	r3, r1
    16ec:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    16ee:	ab05      	add	r3, sp, #20
    16f0:	2100      	movs	r1, #0
    16f2:	2200      	movs	r2, #0
    16f4:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    16f6:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    16f8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    16fa:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    16fc:	313f      	adds	r1, #63	; 0x3f
    16fe:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1700:	393b      	subs	r1, #59	; 0x3b
    1702:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1704:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1706:	4b2e      	ldr	r3, [pc, #184]	; (17c0 <system_clock_init+0x13c>)
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    170c:	2b3f      	cmp	r3, #63	; 0x3f
    170e:	d04b      	beq.n	17a8 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1710:	a805      	add	r0, sp, #20
    1712:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1714:	23b7      	movs	r3, #183	; 0xb7
    1716:	00db      	lsls	r3, r3, #3
    1718:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    171a:	2307      	movs	r3, #7
    171c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    171e:	3338      	adds	r3, #56	; 0x38
    1720:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1722:	4b28      	ldr	r3, [pc, #160]	; (17c4 <system_clock_init+0x140>)
    1724:	4798      	blx	r3
	config->run_in_standby  = false;
    1726:	a804      	add	r0, sp, #16
    1728:	2500      	movs	r5, #0
    172a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    172c:	2601      	movs	r6, #1
    172e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1730:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1732:	4b25      	ldr	r3, [pc, #148]	; (17c8 <system_clock_init+0x144>)
    1734:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1736:	2006      	movs	r0, #6
    1738:	4f20      	ldr	r7, [pc, #128]	; (17bc <system_clock_init+0x138>)
    173a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    173c:	4b23      	ldr	r3, [pc, #140]	; (17cc <system_clock_init+0x148>)
    173e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1740:	ac01      	add	r4, sp, #4
    1742:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1744:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1746:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1748:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    174a:	2305      	movs	r3, #5
    174c:	7023      	strb	r3, [r4, #0]
    174e:	0021      	movs	r1, r4
    1750:	2001      	movs	r0, #1
    1752:	4b1f      	ldr	r3, [pc, #124]	; (17d0 <system_clock_init+0x14c>)
    1754:	4798      	blx	r3
    1756:	2001      	movs	r0, #1
    1758:	4b1e      	ldr	r3, [pc, #120]	; (17d4 <system_clock_init+0x150>)
    175a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    175c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    175e:	0021      	movs	r1, r4
    1760:	2000      	movs	r0, #0
    1762:	4b14      	ldr	r3, [pc, #80]	; (17b4 <system_clock_init+0x130>)
    1764:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1766:	2000      	movs	r0, #0
    1768:	4b1b      	ldr	r3, [pc, #108]	; (17d8 <system_clock_init+0x154>)
    176a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    176c:	2007      	movs	r0, #7
    176e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1770:	490e      	ldr	r1, [pc, #56]	; (17ac <system_clock_init+0x128>)
    1772:	22d0      	movs	r2, #208	; 0xd0
    1774:	68cb      	ldr	r3, [r1, #12]
    1776:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1778:	2bd0      	cmp	r3, #208	; 0xd0
    177a:	d1fb      	bne.n	1774 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    177c:	4a17      	ldr	r2, [pc, #92]	; (17dc <system_clock_init+0x158>)
    177e:	2300      	movs	r3, #0
    1780:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1782:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1784:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1786:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1788:	a901      	add	r1, sp, #4
    178a:	2201      	movs	r2, #1
    178c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    178e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1790:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1792:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1794:	3307      	adds	r3, #7
    1796:	700b      	strb	r3, [r1, #0]
    1798:	2000      	movs	r0, #0
    179a:	4b0d      	ldr	r3, [pc, #52]	; (17d0 <system_clock_init+0x14c>)
    179c:	4798      	blx	r3
    179e:	2000      	movs	r0, #0
    17a0:	4b0c      	ldr	r3, [pc, #48]	; (17d4 <system_clock_init+0x150>)
    17a2:	4798      	blx	r3
#endif
}
    17a4:	b00f      	add	sp, #60	; 0x3c
    17a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    17a8:	3b20      	subs	r3, #32
    17aa:	e7b1      	b.n	1710 <system_clock_init+0x8c>
    17ac:	40000800 	.word	0x40000800
    17b0:	41004000 	.word	0x41004000
    17b4:	00001a19 	.word	0x00001a19
    17b8:	000014a5 	.word	0x000014a5
    17bc:	000015dd 	.word	0x000015dd
    17c0:	00806024 	.word	0x00806024
    17c4:	0000155d 	.word	0x0000155d
    17c8:	00001469 	.word	0x00001469
    17cc:	000017e1 	.word	0x000017e1
    17d0:	00001805 	.word	0x00001805
    17d4:	000018bd 	.word	0x000018bd
    17d8:	0000198d 	.word	0x0000198d
    17dc:	40000400 	.word	0x40000400

000017e0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    17e0:	4a06      	ldr	r2, [pc, #24]	; (17fc <system_gclk_init+0x1c>)
    17e2:	6993      	ldr	r3, [r2, #24]
    17e4:	2108      	movs	r1, #8
    17e6:	430b      	orrs	r3, r1
    17e8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    17ea:	2201      	movs	r2, #1
    17ec:	4b04      	ldr	r3, [pc, #16]	; (1800 <system_gclk_init+0x20>)
    17ee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    17f0:	0019      	movs	r1, r3
    17f2:	780b      	ldrb	r3, [r1, #0]
    17f4:	4213      	tst	r3, r2
    17f6:	d1fc      	bne.n	17f2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    17f8:	4770      	bx	lr
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	40000400 	.word	0x40000400
    1800:	40000c00 	.word	0x40000c00

00001804 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1804:	b570      	push	{r4, r5, r6, lr}
    1806:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1808:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    180a:	780d      	ldrb	r5, [r1, #0]
    180c:	022d      	lsls	r5, r5, #8
    180e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1810:	784b      	ldrb	r3, [r1, #1]
    1812:	2b00      	cmp	r3, #0
    1814:	d002      	beq.n	181c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1816:	2380      	movs	r3, #128	; 0x80
    1818:	02db      	lsls	r3, r3, #11
    181a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    181c:	7a4b      	ldrb	r3, [r1, #9]
    181e:	2b00      	cmp	r3, #0
    1820:	d002      	beq.n	1828 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1822:	2380      	movs	r3, #128	; 0x80
    1824:	031b      	lsls	r3, r3, #12
    1826:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1828:	6848      	ldr	r0, [r1, #4]
    182a:	2801      	cmp	r0, #1
    182c:	d910      	bls.n	1850 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    182e:	1e43      	subs	r3, r0, #1
    1830:	4218      	tst	r0, r3
    1832:	d134      	bne.n	189e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1834:	2802      	cmp	r0, #2
    1836:	d930      	bls.n	189a <system_gclk_gen_set_config+0x96>
    1838:	2302      	movs	r3, #2
    183a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    183c:	3201      	adds	r2, #1
						mask <<= 1) {
    183e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1840:	4298      	cmp	r0, r3
    1842:	d8fb      	bhi.n	183c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1844:	0212      	lsls	r2, r2, #8
    1846:	4332      	orrs	r2, r6
    1848:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    184a:	2380      	movs	r3, #128	; 0x80
    184c:	035b      	lsls	r3, r3, #13
    184e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1850:	7a0b      	ldrb	r3, [r1, #8]
    1852:	2b00      	cmp	r3, #0
    1854:	d002      	beq.n	185c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1856:	2380      	movs	r3, #128	; 0x80
    1858:	039b      	lsls	r3, r3, #14
    185a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    185c:	4a13      	ldr	r2, [pc, #76]	; (18ac <system_gclk_gen_set_config+0xa8>)
    185e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1860:	b25b      	sxtb	r3, r3
    1862:	2b00      	cmp	r3, #0
    1864:	dbfb      	blt.n	185e <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1866:	4b12      	ldr	r3, [pc, #72]	; (18b0 <system_gclk_gen_set_config+0xac>)
    1868:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    186a:	4b12      	ldr	r3, [pc, #72]	; (18b4 <system_gclk_gen_set_config+0xb0>)
    186c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    186e:	4a0f      	ldr	r2, [pc, #60]	; (18ac <system_gclk_gen_set_config+0xa8>)
    1870:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1872:	b25b      	sxtb	r3, r3
    1874:	2b00      	cmp	r3, #0
    1876:	dbfb      	blt.n	1870 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1878:	4b0c      	ldr	r3, [pc, #48]	; (18ac <system_gclk_gen_set_config+0xa8>)
    187a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    187c:	001a      	movs	r2, r3
    187e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1880:	b25b      	sxtb	r3, r3
    1882:	2b00      	cmp	r3, #0
    1884:	dbfb      	blt.n	187e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1886:	4a09      	ldr	r2, [pc, #36]	; (18ac <system_gclk_gen_set_config+0xa8>)
    1888:	6853      	ldr	r3, [r2, #4]
    188a:	2180      	movs	r1, #128	; 0x80
    188c:	0249      	lsls	r1, r1, #9
    188e:	400b      	ands	r3, r1
    1890:	431d      	orrs	r5, r3
    1892:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1894:	4b08      	ldr	r3, [pc, #32]	; (18b8 <system_gclk_gen_set_config+0xb4>)
    1896:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1898:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    189a:	2200      	movs	r2, #0
    189c:	e7d2      	b.n	1844 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    189e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    18a0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    18a2:	2380      	movs	r3, #128	; 0x80
    18a4:	029b      	lsls	r3, r3, #10
    18a6:	431d      	orrs	r5, r3
    18a8:	e7d2      	b.n	1850 <system_gclk_gen_set_config+0x4c>
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	40000c00 	.word	0x40000c00
    18b0:	00000435 	.word	0x00000435
    18b4:	40000c08 	.word	0x40000c08
    18b8:	00000475 	.word	0x00000475

000018bc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    18bc:	b510      	push	{r4, lr}
    18be:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18c0:	4a0b      	ldr	r2, [pc, #44]	; (18f0 <system_gclk_gen_enable+0x34>)
    18c2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18c4:	b25b      	sxtb	r3, r3
    18c6:	2b00      	cmp	r3, #0
    18c8:	dbfb      	blt.n	18c2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    18ca:	4b0a      	ldr	r3, [pc, #40]	; (18f4 <system_gclk_gen_enable+0x38>)
    18cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    18ce:	4b0a      	ldr	r3, [pc, #40]	; (18f8 <system_gclk_gen_enable+0x3c>)
    18d0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18d2:	4a07      	ldr	r2, [pc, #28]	; (18f0 <system_gclk_gen_enable+0x34>)
    18d4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    18d6:	b25b      	sxtb	r3, r3
    18d8:	2b00      	cmp	r3, #0
    18da:	dbfb      	blt.n	18d4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    18dc:	4a04      	ldr	r2, [pc, #16]	; (18f0 <system_gclk_gen_enable+0x34>)
    18de:	6851      	ldr	r1, [r2, #4]
    18e0:	2380      	movs	r3, #128	; 0x80
    18e2:	025b      	lsls	r3, r3, #9
    18e4:	430b      	orrs	r3, r1
    18e6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    18e8:	4b04      	ldr	r3, [pc, #16]	; (18fc <system_gclk_gen_enable+0x40>)
    18ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    18ec:	bd10      	pop	{r4, pc}
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	40000c00 	.word	0x40000c00
    18f4:	00000435 	.word	0x00000435
    18f8:	40000c04 	.word	0x40000c04
    18fc:	00000475 	.word	0x00000475

00001900 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1900:	b570      	push	{r4, r5, r6, lr}
    1902:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1904:	4a1a      	ldr	r2, [pc, #104]	; (1970 <system_gclk_gen_get_hz+0x70>)
    1906:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1908:	b25b      	sxtb	r3, r3
    190a:	2b00      	cmp	r3, #0
    190c:	dbfb      	blt.n	1906 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    190e:	4b19      	ldr	r3, [pc, #100]	; (1974 <system_gclk_gen_get_hz+0x74>)
    1910:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1912:	4b19      	ldr	r3, [pc, #100]	; (1978 <system_gclk_gen_get_hz+0x78>)
    1914:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1916:	4a16      	ldr	r2, [pc, #88]	; (1970 <system_gclk_gen_get_hz+0x70>)
    1918:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    191a:	b25b      	sxtb	r3, r3
    191c:	2b00      	cmp	r3, #0
    191e:	dbfb      	blt.n	1918 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1920:	4e13      	ldr	r6, [pc, #76]	; (1970 <system_gclk_gen_get_hz+0x70>)
    1922:	6870      	ldr	r0, [r6, #4]
    1924:	04c0      	lsls	r0, r0, #19
    1926:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1928:	4b14      	ldr	r3, [pc, #80]	; (197c <system_gclk_gen_get_hz+0x7c>)
    192a:	4798      	blx	r3
    192c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    192e:	4b12      	ldr	r3, [pc, #72]	; (1978 <system_gclk_gen_get_hz+0x78>)
    1930:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1932:	6876      	ldr	r6, [r6, #4]
    1934:	02f6      	lsls	r6, r6, #11
    1936:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1938:	4b11      	ldr	r3, [pc, #68]	; (1980 <system_gclk_gen_get_hz+0x80>)
    193a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    193c:	4a0c      	ldr	r2, [pc, #48]	; (1970 <system_gclk_gen_get_hz+0x70>)
    193e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1940:	b25b      	sxtb	r3, r3
    1942:	2b00      	cmp	r3, #0
    1944:	dbfb      	blt.n	193e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1946:	4b0a      	ldr	r3, [pc, #40]	; (1970 <system_gclk_gen_get_hz+0x70>)
    1948:	689c      	ldr	r4, [r3, #8]
    194a:	0224      	lsls	r4, r4, #8
    194c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    194e:	4b0d      	ldr	r3, [pc, #52]	; (1984 <system_gclk_gen_get_hz+0x84>)
    1950:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1952:	2e00      	cmp	r6, #0
    1954:	d107      	bne.n	1966 <system_gclk_gen_get_hz+0x66>
    1956:	2c01      	cmp	r4, #1
    1958:	d907      	bls.n	196a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    195a:	0021      	movs	r1, r4
    195c:	0028      	movs	r0, r5
    195e:	4b0a      	ldr	r3, [pc, #40]	; (1988 <system_gclk_gen_get_hz+0x88>)
    1960:	4798      	blx	r3
    1962:	0005      	movs	r5, r0
    1964:	e001      	b.n	196a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1966:	3401      	adds	r4, #1
    1968:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    196a:	0028      	movs	r0, r5
    196c:	bd70      	pop	{r4, r5, r6, pc}
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	40000c00 	.word	0x40000c00
    1974:	00000435 	.word	0x00000435
    1978:	40000c04 	.word	0x40000c04
    197c:	000013d5 	.word	0x000013d5
    1980:	40000c08 	.word	0x40000c08
    1984:	00000475 	.word	0x00000475
    1988:	00003101 	.word	0x00003101

0000198c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    198c:	b510      	push	{r4, lr}
    198e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1990:	4b06      	ldr	r3, [pc, #24]	; (19ac <system_gclk_chan_enable+0x20>)
    1992:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1994:	4b06      	ldr	r3, [pc, #24]	; (19b0 <system_gclk_chan_enable+0x24>)
    1996:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1998:	4a06      	ldr	r2, [pc, #24]	; (19b4 <system_gclk_chan_enable+0x28>)
    199a:	8853      	ldrh	r3, [r2, #2]
    199c:	2180      	movs	r1, #128	; 0x80
    199e:	01c9      	lsls	r1, r1, #7
    19a0:	430b      	orrs	r3, r1
    19a2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    19a4:	4b04      	ldr	r3, [pc, #16]	; (19b8 <system_gclk_chan_enable+0x2c>)
    19a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19a8:	bd10      	pop	{r4, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	00000435 	.word	0x00000435
    19b0:	40000c02 	.word	0x40000c02
    19b4:	40000c00 	.word	0x40000c00
    19b8:	00000475 	.word	0x00000475

000019bc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    19bc:	b510      	push	{r4, lr}
    19be:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    19c0:	4b0f      	ldr	r3, [pc, #60]	; (1a00 <system_gclk_chan_disable+0x44>)
    19c2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    19c4:	4b0f      	ldr	r3, [pc, #60]	; (1a04 <system_gclk_chan_disable+0x48>)
    19c6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    19c8:	4a0f      	ldr	r2, [pc, #60]	; (1a08 <system_gclk_chan_disable+0x4c>)
    19ca:	8853      	ldrh	r3, [r2, #2]
    19cc:	051b      	lsls	r3, r3, #20
    19ce:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    19d0:	8853      	ldrh	r3, [r2, #2]
    19d2:	490e      	ldr	r1, [pc, #56]	; (1a0c <system_gclk_chan_disable+0x50>)
    19d4:	400b      	ands	r3, r1
    19d6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    19d8:	8853      	ldrh	r3, [r2, #2]
    19da:	490d      	ldr	r1, [pc, #52]	; (1a10 <system_gclk_chan_disable+0x54>)
    19dc:	400b      	ands	r3, r1
    19de:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    19e0:	0011      	movs	r1, r2
    19e2:	2280      	movs	r2, #128	; 0x80
    19e4:	01d2      	lsls	r2, r2, #7
    19e6:	884b      	ldrh	r3, [r1, #2]
    19e8:	4213      	tst	r3, r2
    19ea:	d1fc      	bne.n	19e6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    19ec:	4906      	ldr	r1, [pc, #24]	; (1a08 <system_gclk_chan_disable+0x4c>)
    19ee:	884a      	ldrh	r2, [r1, #2]
    19f0:	0203      	lsls	r3, r0, #8
    19f2:	4806      	ldr	r0, [pc, #24]	; (1a0c <system_gclk_chan_disable+0x50>)
    19f4:	4002      	ands	r2, r0
    19f6:	4313      	orrs	r3, r2
    19f8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    19fa:	4b06      	ldr	r3, [pc, #24]	; (1a14 <system_gclk_chan_disable+0x58>)
    19fc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    19fe:	bd10      	pop	{r4, pc}
    1a00:	00000435 	.word	0x00000435
    1a04:	40000c02 	.word	0x40000c02
    1a08:	40000c00 	.word	0x40000c00
    1a0c:	fffff0ff 	.word	0xfffff0ff
    1a10:	ffffbfff 	.word	0xffffbfff
    1a14:	00000475 	.word	0x00000475

00001a18 <system_gclk_chan_set_config>:
{
    1a18:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a1a:	780c      	ldrb	r4, [r1, #0]
    1a1c:	0224      	lsls	r4, r4, #8
    1a1e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1a20:	4b02      	ldr	r3, [pc, #8]	; (1a2c <system_gclk_chan_set_config+0x14>)
    1a22:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a24:	b2a4      	uxth	r4, r4
    1a26:	4b02      	ldr	r3, [pc, #8]	; (1a30 <system_gclk_chan_set_config+0x18>)
    1a28:	805c      	strh	r4, [r3, #2]
}
    1a2a:	bd10      	pop	{r4, pc}
    1a2c:	000019bd 	.word	0x000019bd
    1a30:	40000c00 	.word	0x40000c00

00001a34 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1a34:	b510      	push	{r4, lr}
    1a36:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a38:	4b06      	ldr	r3, [pc, #24]	; (1a54 <system_gclk_chan_get_hz+0x20>)
    1a3a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a3c:	4b06      	ldr	r3, [pc, #24]	; (1a58 <system_gclk_chan_get_hz+0x24>)
    1a3e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1a40:	4b06      	ldr	r3, [pc, #24]	; (1a5c <system_gclk_chan_get_hz+0x28>)
    1a42:	885c      	ldrh	r4, [r3, #2]
    1a44:	0524      	lsls	r4, r4, #20
    1a46:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1a48:	4b05      	ldr	r3, [pc, #20]	; (1a60 <system_gclk_chan_get_hz+0x2c>)
    1a4a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1a4c:	0020      	movs	r0, r4
    1a4e:	4b05      	ldr	r3, [pc, #20]	; (1a64 <system_gclk_chan_get_hz+0x30>)
    1a50:	4798      	blx	r3
}
    1a52:	bd10      	pop	{r4, pc}
    1a54:	00000435 	.word	0x00000435
    1a58:	40000c02 	.word	0x40000c02
    1a5c:	40000c00 	.word	0x40000c00
    1a60:	00000475 	.word	0x00000475
    1a64:	00001901 	.word	0x00001901

00001a68 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1a68:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1a6a:	78d3      	ldrb	r3, [r2, #3]
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d135      	bne.n	1adc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1a70:	7813      	ldrb	r3, [r2, #0]
    1a72:	2b80      	cmp	r3, #128	; 0x80
    1a74:	d029      	beq.n	1aca <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1a76:	061b      	lsls	r3, r3, #24
    1a78:	2480      	movs	r4, #128	; 0x80
    1a7a:	0264      	lsls	r4, r4, #9
    1a7c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1a7e:	7854      	ldrb	r4, [r2, #1]
    1a80:	2502      	movs	r5, #2
    1a82:	43ac      	bics	r4, r5
    1a84:	d106      	bne.n	1a94 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1a86:	7894      	ldrb	r4, [r2, #2]
    1a88:	2c00      	cmp	r4, #0
    1a8a:	d120      	bne.n	1ace <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1a8c:	2480      	movs	r4, #128	; 0x80
    1a8e:	02a4      	lsls	r4, r4, #10
    1a90:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1a92:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1a94:	7854      	ldrb	r4, [r2, #1]
    1a96:	3c01      	subs	r4, #1
    1a98:	2c01      	cmp	r4, #1
    1a9a:	d91c      	bls.n	1ad6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1a9c:	040d      	lsls	r5, r1, #16
    1a9e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1aa0:	24a0      	movs	r4, #160	; 0xa0
    1aa2:	05e4      	lsls	r4, r4, #23
    1aa4:	432c      	orrs	r4, r5
    1aa6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1aa8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1aaa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1aac:	24d0      	movs	r4, #208	; 0xd0
    1aae:	0624      	lsls	r4, r4, #24
    1ab0:	432c      	orrs	r4, r5
    1ab2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ab4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1ab6:	78d4      	ldrb	r4, [r2, #3]
    1ab8:	2c00      	cmp	r4, #0
    1aba:	d122      	bne.n	1b02 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1abc:	035b      	lsls	r3, r3, #13
    1abe:	d51c      	bpl.n	1afa <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ac0:	7893      	ldrb	r3, [r2, #2]
    1ac2:	2b01      	cmp	r3, #1
    1ac4:	d01e      	beq.n	1b04 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1ac6:	6141      	str	r1, [r0, #20]
    1ac8:	e017      	b.n	1afa <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1aca:	2300      	movs	r3, #0
    1acc:	e7d7      	b.n	1a7e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ace:	24c0      	movs	r4, #192	; 0xc0
    1ad0:	02e4      	lsls	r4, r4, #11
    1ad2:	4323      	orrs	r3, r4
    1ad4:	e7dd      	b.n	1a92 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1ad6:	4c0d      	ldr	r4, [pc, #52]	; (1b0c <_system_pinmux_config+0xa4>)
    1ad8:	4023      	ands	r3, r4
    1ada:	e7df      	b.n	1a9c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1adc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ade:	040c      	lsls	r4, r1, #16
    1ae0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1ae2:	23a0      	movs	r3, #160	; 0xa0
    1ae4:	05db      	lsls	r3, r3, #23
    1ae6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ae8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1aea:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1aec:	23d0      	movs	r3, #208	; 0xd0
    1aee:	061b      	lsls	r3, r3, #24
    1af0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1af2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1af4:	78d3      	ldrb	r3, [r2, #3]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d103      	bne.n	1b02 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1afa:	7853      	ldrb	r3, [r2, #1]
    1afc:	3b01      	subs	r3, #1
    1afe:	2b01      	cmp	r3, #1
    1b00:	d902      	bls.n	1b08 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1b02:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1b04:	6181      	str	r1, [r0, #24]
    1b06:	e7f8      	b.n	1afa <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1b08:	6081      	str	r1, [r0, #8]
}
    1b0a:	e7fa      	b.n	1b02 <_system_pinmux_config+0x9a>
    1b0c:	fffbffff 	.word	0xfffbffff

00001b10 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b10:	b510      	push	{r4, lr}
    1b12:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b14:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1b16:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1b18:	2900      	cmp	r1, #0
    1b1a:	d104      	bne.n	1b26 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1b1c:	0943      	lsrs	r3, r0, #5
    1b1e:	01db      	lsls	r3, r3, #7
    1b20:	4905      	ldr	r1, [pc, #20]	; (1b38 <system_pinmux_pin_set_config+0x28>)
    1b22:	468c      	mov	ip, r1
    1b24:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1b26:	241f      	movs	r4, #31
    1b28:	4020      	ands	r0, r4
    1b2a:	2101      	movs	r1, #1
    1b2c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1b2e:	0018      	movs	r0, r3
    1b30:	4b02      	ldr	r3, [pc, #8]	; (1b3c <system_pinmux_pin_set_config+0x2c>)
    1b32:	4798      	blx	r3
}
    1b34:	bd10      	pop	{r4, pc}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	41004400 	.word	0x41004400
    1b3c:	00001a69 	.word	0x00001a69

00001b40 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1b40:	4770      	bx	lr
	...

00001b44 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1b44:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1b46:	4b05      	ldr	r3, [pc, #20]	; (1b5c <system_init+0x18>)
    1b48:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1b4a:	4b05      	ldr	r3, [pc, #20]	; (1b60 <system_init+0x1c>)
    1b4c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1b4e:	4b05      	ldr	r3, [pc, #20]	; (1b64 <system_init+0x20>)
    1b50:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1b52:	4b05      	ldr	r3, [pc, #20]	; (1b68 <system_init+0x24>)
    1b54:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1b56:	4b05      	ldr	r3, [pc, #20]	; (1b6c <system_init+0x28>)
    1b58:	4798      	blx	r3
}
    1b5a:	bd10      	pop	{r4, pc}
    1b5c:	00001685 	.word	0x00001685
    1b60:	000004a5 	.word	0x000004a5
    1b64:	00001b41 	.word	0x00001b41
    1b68:	00001b41 	.word	0x00001b41
    1b6c:	00001b41 	.word	0x00001b41

00001b70 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1b70:	e7fe      	b.n	1b70 <Dummy_Handler>
	...

00001b74 <Reset_Handler>:
{
    1b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1b76:	4a2a      	ldr	r2, [pc, #168]	; (1c20 <Reset_Handler+0xac>)
    1b78:	4b2a      	ldr	r3, [pc, #168]	; (1c24 <Reset_Handler+0xb0>)
    1b7a:	429a      	cmp	r2, r3
    1b7c:	d011      	beq.n	1ba2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1b7e:	001a      	movs	r2, r3
    1b80:	4b29      	ldr	r3, [pc, #164]	; (1c28 <Reset_Handler+0xb4>)
    1b82:	429a      	cmp	r2, r3
    1b84:	d20d      	bcs.n	1ba2 <Reset_Handler+0x2e>
    1b86:	4a29      	ldr	r2, [pc, #164]	; (1c2c <Reset_Handler+0xb8>)
    1b88:	3303      	adds	r3, #3
    1b8a:	1a9b      	subs	r3, r3, r2
    1b8c:	089b      	lsrs	r3, r3, #2
    1b8e:	3301      	adds	r3, #1
    1b90:	009b      	lsls	r3, r3, #2
    1b92:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1b94:	4823      	ldr	r0, [pc, #140]	; (1c24 <Reset_Handler+0xb0>)
    1b96:	4922      	ldr	r1, [pc, #136]	; (1c20 <Reset_Handler+0xac>)
    1b98:	588c      	ldr	r4, [r1, r2]
    1b9a:	5084      	str	r4, [r0, r2]
    1b9c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1b9e:	429a      	cmp	r2, r3
    1ba0:	d1fa      	bne.n	1b98 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1ba2:	4a23      	ldr	r2, [pc, #140]	; (1c30 <Reset_Handler+0xbc>)
    1ba4:	4b23      	ldr	r3, [pc, #140]	; (1c34 <Reset_Handler+0xc0>)
    1ba6:	429a      	cmp	r2, r3
    1ba8:	d20a      	bcs.n	1bc0 <Reset_Handler+0x4c>
    1baa:	43d3      	mvns	r3, r2
    1bac:	4921      	ldr	r1, [pc, #132]	; (1c34 <Reset_Handler+0xc0>)
    1bae:	185b      	adds	r3, r3, r1
    1bb0:	2103      	movs	r1, #3
    1bb2:	438b      	bics	r3, r1
    1bb4:	3304      	adds	r3, #4
    1bb6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1bb8:	2100      	movs	r1, #0
    1bba:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1bbc:	4293      	cmp	r3, r2
    1bbe:	d1fc      	bne.n	1bba <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1bc0:	4a1d      	ldr	r2, [pc, #116]	; (1c38 <Reset_Handler+0xc4>)
    1bc2:	21ff      	movs	r1, #255	; 0xff
    1bc4:	4b1d      	ldr	r3, [pc, #116]	; (1c3c <Reset_Handler+0xc8>)
    1bc6:	438b      	bics	r3, r1
    1bc8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1bca:	39fd      	subs	r1, #253	; 0xfd
    1bcc:	2390      	movs	r3, #144	; 0x90
    1bce:	005b      	lsls	r3, r3, #1
    1bd0:	4a1b      	ldr	r2, [pc, #108]	; (1c40 <Reset_Handler+0xcc>)
    1bd2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1bd4:	4a1b      	ldr	r2, [pc, #108]	; (1c44 <Reset_Handler+0xd0>)
    1bd6:	78d3      	ldrb	r3, [r2, #3]
    1bd8:	2503      	movs	r5, #3
    1bda:	43ab      	bics	r3, r5
    1bdc:	2402      	movs	r4, #2
    1bde:	4323      	orrs	r3, r4
    1be0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1be2:	78d3      	ldrb	r3, [r2, #3]
    1be4:	270c      	movs	r7, #12
    1be6:	43bb      	bics	r3, r7
    1be8:	2608      	movs	r6, #8
    1bea:	4333      	orrs	r3, r6
    1bec:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1bee:	4b16      	ldr	r3, [pc, #88]	; (1c48 <Reset_Handler+0xd4>)
    1bf0:	7b98      	ldrb	r0, [r3, #14]
    1bf2:	2230      	movs	r2, #48	; 0x30
    1bf4:	4390      	bics	r0, r2
    1bf6:	2220      	movs	r2, #32
    1bf8:	4310      	orrs	r0, r2
    1bfa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1bfc:	7b99      	ldrb	r1, [r3, #14]
    1bfe:	43b9      	bics	r1, r7
    1c00:	4331      	orrs	r1, r6
    1c02:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1c04:	7b9a      	ldrb	r2, [r3, #14]
    1c06:	43aa      	bics	r2, r5
    1c08:	4322      	orrs	r2, r4
    1c0a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1c0c:	4a0f      	ldr	r2, [pc, #60]	; (1c4c <Reset_Handler+0xd8>)
    1c0e:	6853      	ldr	r3, [r2, #4]
    1c10:	2180      	movs	r1, #128	; 0x80
    1c12:	430b      	orrs	r3, r1
    1c14:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1c16:	4b0e      	ldr	r3, [pc, #56]	; (1c50 <Reset_Handler+0xdc>)
    1c18:	4798      	blx	r3
        main();
    1c1a:	4b0e      	ldr	r3, [pc, #56]	; (1c54 <Reset_Handler+0xe0>)
    1c1c:	4798      	blx	r3
    1c1e:	e7fe      	b.n	1c1e <Reset_Handler+0xaa>
    1c20:	000065c8 	.word	0x000065c8
    1c24:	20000000 	.word	0x20000000
    1c28:	200000a4 	.word	0x200000a4
    1c2c:	20000004 	.word	0x20000004
    1c30:	200000a4 	.word	0x200000a4
    1c34:	20000314 	.word	0x20000314
    1c38:	e000ed00 	.word	0xe000ed00
    1c3c:	00000000 	.word	0x00000000
    1c40:	41007000 	.word	0x41007000
    1c44:	41005000 	.word	0x41005000
    1c48:	41004800 	.word	0x41004800
    1c4c:	41004000 	.word	0x41004000
    1c50:	0000326d 	.word	0x0000326d
    1c54:	000030a9 	.word	0x000030a9

00001c58 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c5a:	46c6      	mov	lr, r8
    1c5c:	b500      	push	{lr}
    1c5e:	000c      	movs	r4, r1
    1c60:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1c62:	2800      	cmp	r0, #0
    1c64:	d10f      	bne.n	1c86 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1c66:	2a00      	cmp	r2, #0
    1c68:	dd11      	ble.n	1c8e <_read+0x36>
    1c6a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1c6c:	4e09      	ldr	r6, [pc, #36]	; (1c94 <_read+0x3c>)
    1c6e:	4d0a      	ldr	r5, [pc, #40]	; (1c98 <_read+0x40>)
    1c70:	6830      	ldr	r0, [r6, #0]
    1c72:	0021      	movs	r1, r4
    1c74:	682b      	ldr	r3, [r5, #0]
    1c76:	4798      	blx	r3
		ptr++;
    1c78:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1c7a:	42bc      	cmp	r4, r7
    1c7c:	d1f8      	bne.n	1c70 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1c7e:	4640      	mov	r0, r8
    1c80:	bc04      	pop	{r2}
    1c82:	4690      	mov	r8, r2
    1c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1c86:	2301      	movs	r3, #1
    1c88:	425b      	negs	r3, r3
    1c8a:	4698      	mov	r8, r3
    1c8c:	e7f7      	b.n	1c7e <_read+0x26>
	for (; len > 0; --len) {
    1c8e:	4680      	mov	r8, r0
    1c90:	e7f5      	b.n	1c7e <_read+0x26>
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	200001b0 	.word	0x200001b0
    1c98:	200001a8 	.word	0x200001a8

00001c9c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c9e:	46c6      	mov	lr, r8
    1ca0:	b500      	push	{lr}
    1ca2:	000e      	movs	r6, r1
    1ca4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1ca6:	3801      	subs	r0, #1
    1ca8:	2802      	cmp	r0, #2
    1caa:	d810      	bhi.n	1cce <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1cac:	2a00      	cmp	r2, #0
    1cae:	d011      	beq.n	1cd4 <_write+0x38>
    1cb0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1cb2:	4b0c      	ldr	r3, [pc, #48]	; (1ce4 <_write+0x48>)
    1cb4:	4698      	mov	r8, r3
    1cb6:	4f0c      	ldr	r7, [pc, #48]	; (1ce8 <_write+0x4c>)
    1cb8:	4643      	mov	r3, r8
    1cba:	6818      	ldr	r0, [r3, #0]
    1cbc:	5d31      	ldrb	r1, [r6, r4]
    1cbe:	683b      	ldr	r3, [r7, #0]
    1cc0:	4798      	blx	r3
    1cc2:	2800      	cmp	r0, #0
    1cc4:	db08      	blt.n	1cd8 <_write+0x3c>
			return -1;
		}
		++nChars;
    1cc6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1cc8:	42a5      	cmp	r5, r4
    1cca:	d1f5      	bne.n	1cb8 <_write+0x1c>
    1ccc:	e006      	b.n	1cdc <_write+0x40>
		return -1;
    1cce:	2401      	movs	r4, #1
    1cd0:	4264      	negs	r4, r4
    1cd2:	e003      	b.n	1cdc <_write+0x40>
	for (; len != 0; --len) {
    1cd4:	0014      	movs	r4, r2
    1cd6:	e001      	b.n	1cdc <_write+0x40>
			return -1;
    1cd8:	2401      	movs	r4, #1
    1cda:	4264      	negs	r4, r4
	}
	return nChars;
}
    1cdc:	0020      	movs	r0, r4
    1cde:	bc04      	pop	{r2}
    1ce0:	4690      	mov	r8, r2
    1ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ce4:	200001b0 	.word	0x200001b0
    1ce8:	200001ac 	.word	0x200001ac

00001cec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1cec:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1cee:	4a06      	ldr	r2, [pc, #24]	; (1d08 <_sbrk+0x1c>)
    1cf0:	6812      	ldr	r2, [r2, #0]
    1cf2:	2a00      	cmp	r2, #0
    1cf4:	d004      	beq.n	1d00 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1cf6:	4a04      	ldr	r2, [pc, #16]	; (1d08 <_sbrk+0x1c>)
    1cf8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1cfa:	18c3      	adds	r3, r0, r3
    1cfc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1cfe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1d00:	4902      	ldr	r1, [pc, #8]	; (1d0c <_sbrk+0x20>)
    1d02:	4a01      	ldr	r2, [pc, #4]	; (1d08 <_sbrk+0x1c>)
    1d04:	6011      	str	r1, [r2, #0]
    1d06:	e7f6      	b.n	1cf6 <_sbrk+0xa>
    1d08:	2000017c 	.word	0x2000017c
    1d0c:	20002318 	.word	0x20002318

00001d10 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1d10:	2001      	movs	r0, #1
    1d12:	4240      	negs	r0, r0
    1d14:	4770      	bx	lr

00001d16 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1d16:	2380      	movs	r3, #128	; 0x80
    1d18:	019b      	lsls	r3, r3, #6
    1d1a:	604b      	str	r3, [r1, #4]

	return 0;
}
    1d1c:	2000      	movs	r0, #0
    1d1e:	4770      	bx	lr

00001d20 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1d20:	2001      	movs	r0, #1
    1d22:	4770      	bx	lr

00001d24 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1d24:	2000      	movs	r0, #0
    1d26:	4770      	bx	lr

00001d28 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1d28:	b570      	push	{r4, r5, r6, lr}
    1d2a:	b082      	sub	sp, #8
    1d2c:	0005      	movs	r5, r0
    1d2e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1d30:	2200      	movs	r2, #0
    1d32:	466b      	mov	r3, sp
    1d34:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1d36:	4c06      	ldr	r4, [pc, #24]	; (1d50 <usart_serial_getchar+0x28>)
    1d38:	466b      	mov	r3, sp
    1d3a:	1d99      	adds	r1, r3, #6
    1d3c:	0028      	movs	r0, r5
    1d3e:	47a0      	blx	r4
    1d40:	2800      	cmp	r0, #0
    1d42:	d1f9      	bne.n	1d38 <usart_serial_getchar+0x10>

	*c = temp;
    1d44:	466b      	mov	r3, sp
    1d46:	3306      	adds	r3, #6
    1d48:	881b      	ldrh	r3, [r3, #0]
    1d4a:	7033      	strb	r3, [r6, #0]
}
    1d4c:	b002      	add	sp, #8
    1d4e:	bd70      	pop	{r4, r5, r6, pc}
    1d50:	000011d7 	.word	0x000011d7

00001d54 <usart_serial_putchar>:
{
    1d54:	b570      	push	{r4, r5, r6, lr}
    1d56:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1d58:	b28c      	uxth	r4, r1
    1d5a:	4e03      	ldr	r6, [pc, #12]	; (1d68 <usart_serial_putchar+0x14>)
    1d5c:	0021      	movs	r1, r4
    1d5e:	0028      	movs	r0, r5
    1d60:	47b0      	blx	r6
    1d62:	2800      	cmp	r0, #0
    1d64:	d1fa      	bne.n	1d5c <usart_serial_putchar+0x8>
}
    1d66:	bd70      	pop	{r4, r5, r6, pc}
    1d68:	000011b1 	.word	0x000011b1

00001d6c <configure_console>:
#include "config_usart.h"

void configure_console(void)
{
    1d6c:	b570      	push	{r4, r5, r6, lr}
    1d6e:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1d70:	2380      	movs	r3, #128	; 0x80
    1d72:	05db      	lsls	r3, r3, #23
    1d74:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1d76:	2300      	movs	r3, #0
    1d78:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1d7a:	22ff      	movs	r2, #255	; 0xff
    1d7c:	4669      	mov	r1, sp
    1d7e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1d80:	2200      	movs	r2, #0
    1d82:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1d84:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1d86:	2196      	movs	r1, #150	; 0x96
    1d88:	0189      	lsls	r1, r1, #6
    1d8a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1d8c:	2101      	movs	r1, #1
    1d8e:	2024      	movs	r0, #36	; 0x24
    1d90:	466c      	mov	r4, sp
    1d92:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1d94:	3001      	adds	r0, #1
    1d96:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1d98:	3125      	adds	r1, #37	; 0x25
    1d9a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1d9c:	3101      	adds	r1, #1
    1d9e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1da0:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1da2:	3105      	adds	r1, #5
    1da4:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1da6:	3101      	adds	r1, #1
    1da8:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1daa:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1dac:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1dae:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1db0:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1db2:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1db4:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1db6:	2313      	movs	r3, #19
    1db8:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1dba:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
    1dbc:	2380      	movs	r3, #128	; 0x80
    1dbe:	035b      	lsls	r3, r3, #13
    1dc0:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = SERCOMPAD0;
    1dc2:	4b1e      	ldr	r3, [pc, #120]	; (1e3c <configure_console+0xd0>)
    1dc4:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = SERCOMPAD1;
    1dc6:	4b1e      	ldr	r3, [pc, #120]	; (1e40 <configure_console+0xd4>)
    1dc8:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = SERCOMPAD2;
    1dca:	2301      	movs	r3, #1
    1dcc:	425b      	negs	r3, r3
    1dce:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = SERCOMPAD3;
    1dd0:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
    1dd2:	4d1c      	ldr	r5, [pc, #112]	; (1e44 <configure_console+0xd8>)
    1dd4:	4c1c      	ldr	r4, [pc, #112]	; (1e48 <configure_console+0xdc>)
    1dd6:	466a      	mov	r2, sp
    1dd8:	491c      	ldr	r1, [pc, #112]	; (1e4c <configure_console+0xe0>)
    1dda:	0028      	movs	r0, r5
    1ddc:	47a0      	blx	r4
    1dde:	2800      	cmp	r0, #0
    1de0:	d1f9      	bne.n	1dd6 <configure_console+0x6a>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1de2:	4c18      	ldr	r4, [pc, #96]	; (1e44 <configure_console+0xd8>)
    1de4:	4b1a      	ldr	r3, [pc, #104]	; (1e50 <configure_console+0xe4>)
    1de6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1de8:	4a1a      	ldr	r2, [pc, #104]	; (1e54 <configure_console+0xe8>)
    1dea:	4b1b      	ldr	r3, [pc, #108]	; (1e58 <configure_console+0xec>)
    1dec:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1dee:	4a1b      	ldr	r2, [pc, #108]	; (1e5c <configure_console+0xf0>)
    1df0:	4b1b      	ldr	r3, [pc, #108]	; (1e60 <configure_console+0xf4>)
    1df2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1df4:	466a      	mov	r2, sp
    1df6:	4915      	ldr	r1, [pc, #84]	; (1e4c <configure_console+0xe0>)
    1df8:	0020      	movs	r0, r4
    1dfa:	4b13      	ldr	r3, [pc, #76]	; (1e48 <configure_console+0xdc>)
    1dfc:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1dfe:	4e19      	ldr	r6, [pc, #100]	; (1e64 <configure_console+0xf8>)
    1e00:	6833      	ldr	r3, [r6, #0]
    1e02:	6898      	ldr	r0, [r3, #8]
    1e04:	2100      	movs	r1, #0
    1e06:	4d18      	ldr	r5, [pc, #96]	; (1e68 <configure_console+0xfc>)
    1e08:	47a8      	blx	r5
	setbuf(stdin, NULL);
    1e0a:	6833      	ldr	r3, [r6, #0]
    1e0c:	6858      	ldr	r0, [r3, #4]
    1e0e:	2100      	movs	r1, #0
    1e10:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e12:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1e14:	0028      	movs	r0, r5
    1e16:	4b15      	ldr	r3, [pc, #84]	; (1e6c <configure_console+0x100>)
    1e18:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1e1a:	231f      	movs	r3, #31
    1e1c:	4018      	ands	r0, r3
    1e1e:	3b1e      	subs	r3, #30
    1e20:	4083      	lsls	r3, r0
    1e22:	4a13      	ldr	r2, [pc, #76]	; (1e70 <configure_console+0x104>)
    1e24:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e26:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e28:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d1fc      	bne.n	1e28 <configure_console+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1e2e:	682b      	ldr	r3, [r5, #0]
    1e30:	2202      	movs	r2, #2
    1e32:	4313      	orrs	r3, r2
    1e34:	602b      	str	r3, [r5, #0]

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
    1e36:	b010      	add	sp, #64	; 0x40
    1e38:	bd70      	pop	{r4, r5, r6, pc}
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	00080003 	.word	0x00080003
    1e40:	00090003 	.word	0x00090003
    1e44:	200001b4 	.word	0x200001b4
    1e48:	00000e75 	.word	0x00000e75
    1e4c:	42001000 	.word	0x42001000
    1e50:	200001b0 	.word	0x200001b0
    1e54:	00001d55 	.word	0x00001d55
    1e58:	200001ac 	.word	0x200001ac
    1e5c:	00001d29 	.word	0x00001d29
    1e60:	200001a8 	.word	0x200001a8
    1e64:	20000040 	.word	0x20000040
    1e68:	000033e1 	.word	0x000033e1
    1e6c:	00000de5 	.word	0x00000de5
    1e70:	e000e100 	.word	0xe000e100

00001e74 <drawChar>:

uint8_t xCharPos = 0;
uint8_t yCharPos = 0;

void drawChar(uint8_t character)
{
    1e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e76:	46d6      	mov	lr, sl
    1e78:	464f      	mov	r7, r9
    1e7a:	4646      	mov	r6, r8
    1e7c:	b5c0      	push	{r6, r7, lr}
    1e7e:	4c2f      	ldr	r4, [pc, #188]	; (1f3c <drawChar+0xc8>)
    1e80:	44a5      	add	sp, r4
    1e82:	0004      	movs	r4, r0

	const uint8_t TermFont[256][25] = {
    1e84:	22c8      	movs	r2, #200	; 0xc8
    1e86:	0152      	lsls	r2, r2, #5
    1e88:	492d      	ldr	r1, [pc, #180]	; (1f40 <drawChar+0xcc>)
    1e8a:	4668      	mov	r0, sp
    1e8c:	4b2d      	ldr	r3, [pc, #180]	; (1f44 <drawChar+0xd0>)
    1e8e:	4798      	blx	r3
		0x00, 0x00, 0x00, 0x00, 0x00},

	};

	
	int x = abs(xCharPos-79);
    1e90:	4b2d      	ldr	r3, [pc, #180]	; (1f48 <drawChar+0xd4>)
    1e92:	7818      	ldrb	r0, [r3, #0]
    1e94:	384f      	subs	r0, #79	; 0x4f
    1e96:	17c3      	asrs	r3, r0, #31
    1e98:	18c0      	adds	r0, r0, r3
    1e9a:	4058      	eors	r0, r3
	int y = (yCharPos);
    1e9c:	4b2b      	ldr	r3, [pc, #172]	; (1f4c <drawChar+0xd8>)
    1e9e:	7819      	ldrb	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    1ea0:	2280      	movs	r2, #128	; 0x80
    1ea2:	03d2      	lsls	r2, r2, #15
    1ea4:	4b2a      	ldr	r3, [pc, #168]	; (1f50 <drawChar+0xdc>)
    1ea6:	601a      	str	r2, [r3, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    1ea8:	0083      	lsls	r3, r0, #2
    1eaa:	18c0      	adds	r0, r0, r3
    1eac:	0040      	lsls	r0, r0, #1
    1eae:	b280      	uxth	r0, r0
    1eb0:	2314      	movs	r3, #20
    1eb2:	4359      	muls	r1, r3
    1eb4:	000b      	movs	r3, r1
    1eb6:	3313      	adds	r3, #19
    1eb8:	b29b      	uxth	r3, r3
    1eba:	0002      	movs	r2, r0
    1ebc:	3209      	adds	r2, #9
    1ebe:	b292      	uxth	r2, r2
    1ec0:	4d24      	ldr	r5, [pc, #144]	; (1f54 <drawChar+0xe0>)
    1ec2:	47a8      	blx	r5
    1ec4:	00a5      	lsls	r5, r4, #2
    1ec6:	192d      	adds	r5, r5, r4
    1ec8:	00ab      	lsls	r3, r5, #2
    1eca:	18ed      	adds	r5, r5, r3
    1ecc:	446d      	add	r5, sp
    1ece:	3401      	adds	r4, #1
    1ed0:	00a3      	lsls	r3, r4, #2
    1ed2:	191b      	adds	r3, r3, r4
    1ed4:	009a      	lsls	r2, r3, #2
    1ed6:	189b      	adds	r3, r3, r2
    1ed8:	446b      	add	r3, sp
    1eda:	469a      	mov	sl, r3
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    1edc:	4b1e      	ldr	r3, [pc, #120]	; (1f58 <drawChar+0xe4>)
    1ede:	4699      	mov	r9, r3
    1ee0:	4b1e      	ldr	r3, [pc, #120]	; (1f5c <drawChar+0xe8>)
    1ee2:	4698      	mov	r8, r3
    1ee4:	4f1e      	ldr	r7, [pc, #120]	; (1f60 <drawChar+0xec>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1ee6:	4e1f      	ldr	r6, [pc, #124]	; (1f64 <drawChar+0xf0>)
    1ee8:	e019      	b.n	1f1e <drawChar+0xaa>
				setPixel((back_Color_High<<8)|back_Color_Low);
    1eea:	464b      	mov	r3, r9
    1eec:	8818      	ldrh	r0, [r3, #0]
    1eee:	0200      	lsls	r0, r0, #8
    1ef0:	4643      	mov	r3, r8
    1ef2:	881b      	ldrh	r3, [r3, #0]
    1ef4:	4318      	orrs	r0, r3
    1ef6:	b280      	uxth	r0, r0
    1ef8:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    1efa:	3c01      	subs	r4, #1
    1efc:	d30c      	bcc.n	1f18 <drawChar+0xa4>
			if((TermFont[character][i]&(1<<(7-j)))!=0)
    1efe:	782b      	ldrb	r3, [r5, #0]
    1f00:	4123      	asrs	r3, r4
    1f02:	07db      	lsls	r3, r3, #31
    1f04:	d5f1      	bpl.n	1eea <drawChar+0x76>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1f06:	8830      	ldrh	r0, [r6, #0]
    1f08:	0200      	lsls	r0, r0, #8
    1f0a:	4b17      	ldr	r3, [pc, #92]	; (1f68 <drawChar+0xf4>)
    1f0c:	881b      	ldrh	r3, [r3, #0]
    1f0e:	4318      	orrs	r0, r3
    1f10:	b280      	uxth	r0, r0
    1f12:	4b13      	ldr	r3, [pc, #76]	; (1f60 <drawChar+0xec>)
    1f14:	4798      	blx	r3
    1f16:	e7f0      	b.n	1efa <drawChar+0x86>
    1f18:	3501      	adds	r5, #1
	for(uint8_t i=0; i <= 24; i++)
    1f1a:	4555      	cmp	r5, sl
    1f1c:	d001      	beq.n	1f22 <drawChar+0xae>
{
    1f1e:	2407      	movs	r4, #7
    1f20:	e7ed      	b.n	1efe <drawChar+0x8a>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    1f22:	2280      	movs	r2, #128	; 0x80
    1f24:	03d2      	lsls	r2, r2, #15
    1f26:	4b11      	ldr	r3, [pc, #68]	; (1f6c <drawChar+0xf8>)
    1f28:	601a      	str	r2, [r3, #0]

}
    1f2a:	23c8      	movs	r3, #200	; 0xc8
    1f2c:	015b      	lsls	r3, r3, #5
    1f2e:	449d      	add	sp, r3
    1f30:	bc1c      	pop	{r2, r3, r4}
    1f32:	4690      	mov	r8, r2
    1f34:	4699      	mov	r9, r3
    1f36:	46a2      	mov	sl, r4
    1f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	ffffe700 	.word	0xffffe700
    1f40:	000049d4 	.word	0x000049d4
    1f44:	000032b5 	.word	0x000032b5
    1f48:	20000180 	.word	0x20000180
    1f4c:	20000181 	.word	0x20000181
    1f50:	41004494 	.word	0x41004494
    1f54:	00002919 	.word	0x00002919
    1f58:	200002ba 	.word	0x200002ba
    1f5c:	200002b4 	.word	0x200002b4
    1f60:	00002af9 	.word	0x00002af9
    1f64:	200002b6 	.word	0x200002b6
    1f68:	200002b8 	.word	0x200002b8
    1f6c:	41004498 	.word	0x41004498

00001f70 <newLine>:

void newLine(void)
{
    1f70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f72:	46de      	mov	lr, fp
    1f74:	4657      	mov	r7, sl
    1f76:	464e      	mov	r6, r9
    1f78:	4645      	mov	r5, r8
    1f7a:	b5e0      	push	{r5, r6, r7, lr}
    1f7c:	4c5a      	ldr	r4, [pc, #360]	; (20e8 <STACK_SIZE+0xe8>)
    1f7e:	44a5      	add	sp, r4
	*/
	
	uint8_t rowPixel[800];
	
	//First, set the MADCLR registers so 0,0 is in the top left
	REG_PORT_OUTCLR1 = LCD_CS;
    1f80:	4b5a      	ldr	r3, [pc, #360]	; (20ec <STACK_SIZE+0xec>)
    1f82:	2580      	movs	r5, #128	; 0x80
    1f84:	03ed      	lsls	r5, r5, #15
    1f86:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    1f88:	2680      	movs	r6, #128	; 0x80
    1f8a:	0436      	lsls	r6, r6, #16
    1f8c:	601e      	str	r6, [r3, #0]
	LCD_Write_COM16(0x36, 0x00);
    1f8e:	2100      	movs	r1, #0
    1f90:	2036      	movs	r0, #54	; 0x36
    1f92:	4b57      	ldr	r3, [pc, #348]	; (20f0 <STACK_SIZE+0xf0>)
    1f94:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    1f96:	4c57      	ldr	r4, [pc, #348]	; (20f4 <STACK_SIZE+0xf4>)
    1f98:	6026      	str	r6, [r4, #0]
	LCD_Write_DATA8(0x00);
    1f9a:	2000      	movs	r0, #0
    1f9c:	4b56      	ldr	r3, [pc, #344]	; (20f8 <STACK_SIZE+0xf8>)
    1f9e:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    1fa0:	6025      	str	r5, [r4, #0]

	
	for(uint16_t row = 0 ; row < 460 ; row++)
    1fa2:	2300      	movs	r3, #0
    1fa4:	9300      	str	r3, [sp, #0]
	{
		//Per page 40 of datasheet (5.1.2.7, 16-bit
		//parallel interface for data ram read.
		REG_PORT_OUTCLR1 = LCD_CS;
    1fa6:	4b51      	ldr	r3, [pc, #324]	; (20ec <STACK_SIZE+0xec>)
    1fa8:	4698      	mov	r8, r3
		setXY(0, row+20, 799, row+20);
		//Send'Memory read' command 0x2E00, no data bit
		LCD_Write_COM16(0x2E,0x00);
		REG_PORT_OUTSET1 = LCD_DC;
    1faa:	0027      	movs	r7, r4
		
		
		//Read pixel data into the display	
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
		{
			REG_PORT_OUTCLR1 = LCD_RD;
    1fac:	2680      	movs	r6, #128	; 0x80
    1fae:	0276      	lsls	r6, r6, #9
    1fb0:	e046      	b.n	2040 <STACK_SIZE+0x40>
			//This can be expanded with else if for the MSBs
			//of all the colors; see datasheet page 40.
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
				rowPixel[getpixel] = 0xFF;
			else
				rowPixel[getpixel] = 0x00;
    1fb2:	4653      	mov	r3, sl
    1fb4:	7023      	strb	r3, [r4, #0]
			//dummy read, because pixel data broken up
			//per datasheet page 40. Everything after
			//the dummy write is BLUE pixels. Do we ever
			//need blue? IDK.
			
			REG_PORT_OUTCLR1 = LCD_RD;
    1fb6:	4643      	mov	r3, r8
    1fb8:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    1fba:	603e      	str	r6, [r7, #0]
    1fbc:	3401      	adds	r4, #1
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
    1fbe:	4564      	cmp	r4, ip
    1fc0:	d008      	beq.n	1fd4 <newLine+0x64>
			REG_PORT_OUTCLR1 = LCD_RD;
    1fc2:	4643      	mov	r3, r8
    1fc4:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    1fc6:	603e      	str	r6, [r7, #0]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    1fc8:	5843      	ldr	r3, [r0, r1]
    1fca:	421a      	tst	r2, r3
    1fcc:	d0f1      	beq.n	1fb2 <newLine+0x42>
				rowPixel[getpixel] = 0xFF;
    1fce:	464b      	mov	r3, r9
    1fd0:	7023      	strb	r3, [r4, #0]
    1fd2:	e7f0      	b.n	1fb6 <newLine+0x46>
    1fd4:	9401      	str	r4, [sp, #4]
		}
		
		REG_PORT_OUTSET1 = LCD_DC;
    1fd6:	2380      	movs	r3, #128	; 0x80
    1fd8:	041b      	lsls	r3, r3, #16
    1fda:	603b      	str	r3, [r7, #0]
		REG_PORT_DIRSET1 = 0x0000FFFF;
    1fdc:	4a47      	ldr	r2, [pc, #284]	; (20fc <STACK_SIZE+0xfc>)
    1fde:	4b48      	ldr	r3, [pc, #288]	; (2100 <STACK_SIZE+0x100>)
    1fe0:	601a      	str	r2, [r3, #0]
		
		//now, read out that line of the display
		setXY(0, row, 799, row);	
    1fe2:	9900      	ldr	r1, [sp, #0]
    1fe4:	000b      	movs	r3, r1
    1fe6:	4a47      	ldr	r2, [pc, #284]	; (2104 <STACK_SIZE+0x104>)
    1fe8:	2000      	movs	r0, #0
    1fea:	4c47      	ldr	r4, [pc, #284]	; (2108 <STACK_SIZE+0x108>)
    1fec:	47a0      	blx	r4
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
		{
			if((rowPixel[writepixel] == 0xFF))
				setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
				setPixel((back_Color_High<<8)|back_Color_Low);
    1fee:	4b47      	ldr	r3, [pc, #284]	; (210c <STACK_SIZE+0x10c>)
    1ff0:	469b      	mov	fp, r3
    1ff2:	4b47      	ldr	r3, [pc, #284]	; (2110 <STACK_SIZE+0x110>)
    1ff4:	469a      	mov	sl, r3
    1ff6:	4b47      	ldr	r3, [pc, #284]	; (2114 <STACK_SIZE+0x114>)
    1ff8:	4699      	mov	r9, r3
    1ffa:	9c01      	ldr	r4, [sp, #4]
    1ffc:	e00b      	b.n	2016 <STACK_SIZE+0x16>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    1ffe:	4b46      	ldr	r3, [pc, #280]	; (2118 <STACK_SIZE+0x118>)
    2000:	8818      	ldrh	r0, [r3, #0]
    2002:	0200      	lsls	r0, r0, #8
    2004:	4b45      	ldr	r3, [pc, #276]	; (211c <STACK_SIZE+0x11c>)
    2006:	881b      	ldrh	r3, [r3, #0]
    2008:	4318      	orrs	r0, r3
    200a:	b280      	uxth	r0, r0
    200c:	4b41      	ldr	r3, [pc, #260]	; (2114 <STACK_SIZE+0x114>)
    200e:	4798      	blx	r3
    2010:	3501      	adds	r5, #1
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
    2012:	42ac      	cmp	r4, r5
    2014:	d00b      	beq.n	202e <STACK_SIZE+0x2e>
			if((rowPixel[writepixel] == 0xFF))
    2016:	782b      	ldrb	r3, [r5, #0]
    2018:	2bff      	cmp	r3, #255	; 0xff
    201a:	d0f0      	beq.n	1ffe <newLine+0x8e>
				setPixel((back_Color_High<<8)|back_Color_Low);
    201c:	465b      	mov	r3, fp
    201e:	8818      	ldrh	r0, [r3, #0]
    2020:	0200      	lsls	r0, r0, #8
    2022:	4653      	mov	r3, sl
    2024:	881b      	ldrh	r3, [r3, #0]
    2026:	4318      	orrs	r0, r3
    2028:	b280      	uxth	r0, r0
    202a:	47c8      	blx	r9
    202c:	e7f0      	b.n	2010 <STACK_SIZE+0x10>
	for(uint16_t row = 0 ; row < 460 ; row++)
    202e:	9b00      	ldr	r3, [sp, #0]
    2030:	3301      	adds	r3, #1
    2032:	b29b      	uxth	r3, r3
    2034:	001a      	movs	r2, r3
    2036:	9300      	str	r3, [sp, #0]
    2038:	23e6      	movs	r3, #230	; 0xe6
    203a:	005b      	lsls	r3, r3, #1
    203c:	429a      	cmp	r2, r3
    203e:	d031      	beq.n	20a4 <STACK_SIZE+0xa4>
		REG_PORT_OUTCLR1 = LCD_CS;
    2040:	4643      	mov	r3, r8
    2042:	2280      	movs	r2, #128	; 0x80
    2044:	03d2      	lsls	r2, r2, #15
    2046:	601a      	str	r2, [r3, #0]
		setXY(0, row+20, 799, row+20);
    2048:	9900      	ldr	r1, [sp, #0]
    204a:	3114      	adds	r1, #20
    204c:	b289      	uxth	r1, r1
    204e:	000b      	movs	r3, r1
    2050:	4a2c      	ldr	r2, [pc, #176]	; (2104 <STACK_SIZE+0x104>)
    2052:	2000      	movs	r0, #0
    2054:	4c2c      	ldr	r4, [pc, #176]	; (2108 <STACK_SIZE+0x108>)
    2056:	47a0      	blx	r4
		LCD_Write_COM16(0x2E,0x00);
    2058:	2100      	movs	r1, #0
    205a:	202e      	movs	r0, #46	; 0x2e
    205c:	4b24      	ldr	r3, [pc, #144]	; (20f0 <STACK_SIZE+0xf0>)
    205e:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2060:	2380      	movs	r3, #128	; 0x80
    2062:	041b      	lsls	r3, r3, #16
    2064:	603b      	str	r3, [r7, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    2066:	4643      	mov	r3, r8
    2068:	2280      	movs	r2, #128	; 0x80
    206a:	0252      	lsls	r2, r2, #9
    206c:	601a      	str	r2, [r3, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    206e:	603a      	str	r2, [r7, #0]
		REG_PORT_DIRCLR1 = PORT_PB07;
    2070:	2280      	movs	r2, #128	; 0x80
    2072:	4b2b      	ldr	r3, [pc, #172]	; (2120 <STACK_SIZE+0x120>)
    2074:	601a      	str	r2, [r3, #0]
		PORT->Group[1].PINCFG[7].bit.INEN = 1;
    2076:	4a2b      	ldr	r2, [pc, #172]	; (2124 <STACK_SIZE+0x124>)
    2078:	23c7      	movs	r3, #199	; 0xc7
    207a:	5cd1      	ldrb	r1, [r2, r3]
    207c:	2002      	movs	r0, #2
    207e:	4301      	orrs	r1, r0
    2080:	54d1      	strb	r1, [r2, r3]
		PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    2082:	5cd1      	ldrb	r1, [r2, r3]
    2084:	2004      	movs	r0, #4
    2086:	4301      	orrs	r1, r0
    2088:	54d1      	strb	r1, [r2, r3]
    208a:	ad02      	add	r5, sp, #8
    208c:	abca      	add	r3, sp, #808	; 0x328
    208e:	469c      	mov	ip, r3
    2090:	9501      	str	r5, [sp, #4]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2092:	0010      	movs	r0, r2
    2094:	21a0      	movs	r1, #160	; 0xa0
    2096:	2280      	movs	r2, #128	; 0x80
				rowPixel[getpixel] = 0x00;
    2098:	2300      	movs	r3, #0
    209a:	469a      	mov	sl, r3
				rowPixel[getpixel] = 0xFF;
    209c:	33ff      	adds	r3, #255	; 0xff
    209e:	4699      	mov	r9, r3
    20a0:	002c      	movs	r4, r5
    20a2:	e78e      	b.n	1fc2 <newLine+0x52>
		}
	}
	//return MADCLR registers to their original state
	REG_PORT_OUTCLR1 = LCD_DC;
    20a4:	2580      	movs	r5, #128	; 0x80
    20a6:	042d      	lsls	r5, r5, #16
    20a8:	4b10      	ldr	r3, [pc, #64]	; (20ec <STACK_SIZE+0xec>)
    20aa:	601d      	str	r5, [r3, #0]
	LCD_Write_COM16(0x36, 0x00);
    20ac:	2100      	movs	r1, #0
    20ae:	2036      	movs	r0, #54	; 0x36
    20b0:	4b0f      	ldr	r3, [pc, #60]	; (20f0 <STACK_SIZE+0xf0>)
    20b2:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    20b4:	4c0f      	ldr	r4, [pc, #60]	; (20f4 <STACK_SIZE+0xf4>)
    20b6:	6025      	str	r5, [r4, #0]
	LCD_Write_DATA8(0x80);
    20b8:	2080      	movs	r0, #128	; 0x80
    20ba:	4b0f      	ldr	r3, [pc, #60]	; (20f8 <STACK_SIZE+0xf8>)
    20bc:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    20be:	2380      	movs	r3, #128	; 0x80
    20c0:	03db      	lsls	r3, r3, #15
    20c2:	6023      	str	r3, [r4, #0]
	
	//finally, clear the last character line of the display
	fillRectBackColor(0, 460, 799, 480);
    20c4:	23f0      	movs	r3, #240	; 0xf0
    20c6:	005b      	lsls	r3, r3, #1
    20c8:	4a0e      	ldr	r2, [pc, #56]	; (2104 <STACK_SIZE+0x104>)
    20ca:	21e6      	movs	r1, #230	; 0xe6
    20cc:	0049      	lsls	r1, r1, #1
    20ce:	2000      	movs	r0, #0
    20d0:	4c15      	ldr	r4, [pc, #84]	; (2128 <STACK_SIZE+0x128>)
    20d2:	47a0      	blx	r4
}
    20d4:	23cb      	movs	r3, #203	; 0xcb
    20d6:	009b      	lsls	r3, r3, #2
    20d8:	449d      	add	sp, r3
    20da:	bc3c      	pop	{r2, r3, r4, r5}
    20dc:	4690      	mov	r8, r2
    20de:	4699      	mov	r9, r3
    20e0:	46a2      	mov	sl, r4
    20e2:	46ab      	mov	fp, r5
    20e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	fffffcd4 	.word	0xfffffcd4
    20ec:	41004494 	.word	0x41004494
    20f0:	00002b9d 	.word	0x00002b9d
    20f4:	41004498 	.word	0x41004498
    20f8:	00002bcd 	.word	0x00002bcd
    20fc:	0000ffff 	.word	0x0000ffff
    2100:	41004488 	.word	0x41004488
    2104:	0000031f 	.word	0x0000031f
    2108:	00002919 	.word	0x00002919
    210c:	200002ba 	.word	0x200002ba
    2110:	200002b4 	.word	0x200002b4
    2114:	00002af9 	.word	0x00002af9
    2118:	200002b6 	.word	0x200002b6
    211c:	200002b8 	.word	0x200002b8
    2120:	41004484 	.word	0x41004484
    2124:	41004400 	.word	0x41004400
    2128:	00002a31 	.word	0x00002a31

0000212c <writeString>:

void writeString(char str[])
{
    212c:	b5f0      	push	{r4, r5, r6, r7, lr}
    212e:	46c6      	mov	lr, r8
    2130:	b500      	push	{lr}
    2132:	0005      	movs	r5, r0
	int length = strlen(str);
    2134:	4b0c      	ldr	r3, [pc, #48]	; (2168 <writeString+0x3c>)
    2136:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2138:	2800      	cmp	r0, #0
    213a:	dd11      	ble.n	2160 <writeString+0x34>
    213c:	002c      	movs	r4, r5
    213e:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    2140:	4f0a      	ldr	r7, [pc, #40]	; (216c <writeString+0x40>)
		if(xCharPos <= 80)
    2142:	4e0b      	ldr	r6, [pc, #44]	; (2170 <writeString+0x44>)
		xCharPos++;
    2144:	46b0      	mov	r8, r6
    2146:	e002      	b.n	214e <writeString+0x22>
    2148:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    214a:	42ac      	cmp	r4, r5
    214c:	d008      	beq.n	2160 <writeString+0x34>
		drawChar(str[i]);
    214e:	7820      	ldrb	r0, [r4, #0]
    2150:	47b8      	blx	r7
		if(xCharPos <= 80)
    2152:	7833      	ldrb	r3, [r6, #0]
    2154:	2b50      	cmp	r3, #80	; 0x50
    2156:	d8f7      	bhi.n	2148 <writeString+0x1c>
		xCharPos++;
    2158:	3301      	adds	r3, #1
    215a:	4642      	mov	r2, r8
    215c:	7013      	strb	r3, [r2, #0]
    215e:	e7f3      	b.n	2148 <writeString+0x1c>
	}
    2160:	bc04      	pop	{r2}
    2162:	4690      	mov	r8, r2
    2164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	0000354d 	.word	0x0000354d
    216c:	00001e75 	.word	0x00001e75
    2170:	20000180 	.word	0x20000180

00002174 <bufferContains>:

bool bufferContains(int scanCode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(scanCodeBuffer[i] == scanCode)
    2174:	4b09      	ldr	r3, [pc, #36]	; (219c <bufferContains+0x28>)
    2176:	781b      	ldrb	r3, [r3, #0]
    2178:	4298      	cmp	r0, r3
    217a:	d00a      	beq.n	2192 <bufferContains+0x1e>
    217c:	4907      	ldr	r1, [pc, #28]	; (219c <bufferContains+0x28>)
    217e:	1c4b      	adds	r3, r1, #1
    2180:	3114      	adds	r1, #20
    2182:	781a      	ldrb	r2, [r3, #0]
    2184:	4282      	cmp	r2, r0
    2186:	d006      	beq.n	2196 <bufferContains+0x22>
    2188:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    218a:	428b      	cmp	r3, r1
    218c:	d1f9      	bne.n	2182 <bufferContains+0xe>
		{
			return true;
		}
	}
	return false;
    218e:	2000      	movs	r0, #0
}
    2190:	4770      	bx	lr
			return true;
    2192:	2001      	movs	r0, #1
    2194:	e7fc      	b.n	2190 <bufferContains+0x1c>
    2196:	2001      	movs	r0, #1
    2198:	e7fa      	b.n	2190 <bufferContains+0x1c>
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	20000028 	.word	0x20000028

000021a0 <readKeyboard>:
{
    21a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21a2:	46de      	mov	lr, fp
    21a4:	4657      	mov	r7, sl
    21a6:	464e      	mov	r6, r9
    21a8:	4645      	mov	r5, r8
    21aa:	b5e0      	push	{r5, r6, r7, lr}
    21ac:	b0c9      	sub	sp, #292	; 0x124
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    21ae:	4a5b      	ldr	r2, [pc, #364]	; (231c <readKeyboard+0x17c>)
    21b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
    21b2:	2380      	movs	r3, #128	; 0x80
    21b4:	03db      	lsls	r3, r3, #15
    21b6:	430b      	orrs	r3, r1
    21b8:	6293      	str	r3, [r2, #40]	; 0x28
    21ba:	4d59      	ldr	r5, [pc, #356]	; (2320 <readKeyboard+0x180>)
    21bc:	351c      	adds	r5, #28
    21be:	4b58      	ldr	r3, [pc, #352]	; (2320 <readKeyboard+0x180>)
		REG_PORT_DIRSET0 = kb_col[i];
    21c0:	4858      	ldr	r0, [pc, #352]	; (2324 <readKeyboard+0x184>)
		REG_PORT_OUTCLR0 = kb_col[i];
    21c2:	4959      	ldr	r1, [pc, #356]	; (2328 <readKeyboard+0x188>)
		REG_PORT_DIRSET0 = kb_col[i];
    21c4:	681a      	ldr	r2, [r3, #0]
    21c6:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    21c8:	cb04      	ldmia	r3!, {r2}
    21ca:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    21cc:	42ab      	cmp	r3, r5
    21ce:	d1f9      	bne.n	21c4 <readKeyboard+0x24>
    21d0:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    21d2:	4c56      	ldr	r4, [pc, #344]	; (232c <readKeyboard+0x18c>)
    21d4:	4f56      	ldr	r7, [pc, #344]	; (2330 <readKeyboard+0x190>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    21d6:	4e57      	ldr	r6, [pc, #348]	; (2334 <readKeyboard+0x194>)
    21d8:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    21da:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    21dc:	5913      	ldr	r3, [r2, r4]
    21de:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    21e0:	5993      	ldr	r3, [r2, r6]
    21e2:	4955      	ldr	r1, [pc, #340]	; (2338 <readKeyboard+0x198>)
    21e4:	468c      	mov	ip, r1
    21e6:	4463      	add	r3, ip
    21e8:	7819      	ldrb	r1, [r3, #0]
    21ea:	4329      	orrs	r1, r5
    21ec:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    21ee:	7819      	ldrb	r1, [r3, #0]
    21f0:	4301      	orrs	r1, r0
    21f2:	7019      	strb	r1, [r3, #0]
    21f4:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    21f6:	2a28      	cmp	r2, #40	; 0x28
    21f8:	d1f0      	bne.n	21dc <readKeyboard+0x3c>
    21fa:	4c49      	ldr	r4, [pc, #292]	; (2320 <readKeyboard+0x180>)
    21fc:	2300      	movs	r3, #0
    21fe:	469c      	mov	ip, r3
    2200:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    2202:	4b4e      	ldr	r3, [pc, #312]	; (233c <readKeyboard+0x19c>)
    2204:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2206:	4e45      	ldr	r6, [pc, #276]	; (231c <readKeyboard+0x17c>)
		REG_PORT_OUTCLR0 = kb_col[i];
    2208:	4b47      	ldr	r3, [pc, #284]	; (2328 <readKeyboard+0x188>)
    220a:	4698      	mov	r8, r3
    220c:	e017      	b.n	223e <readKeyboard+0x9e>
    220e:	3304      	adds	r3, #4
    2210:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    2212:	42ab      	cmp	r3, r5
    2214:	d008      	beq.n	2228 <readKeyboard+0x88>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2216:	6a30      	ldr	r0, [r6, #32]
    2218:	681f      	ldr	r7, [r3, #0]
    221a:	4207      	tst	r7, r0
    221c:	d0f7      	beq.n	220e <readKeyboard+0x6e>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    221e:	0090      	lsls	r0, r2, #2
    2220:	af02      	add	r7, sp, #8
    2222:	51c1      	str	r1, [r0, r7]
				scanCodeIndex++;
    2224:	3201      	adds	r2, #1
    2226:	e7f2      	b.n	220e <readKeyboard+0x6e>
		REG_PORT_OUTCLR0 = kb_col[i];
    2228:	4649      	mov	r1, r9
    222a:	6809      	ldr	r1, [r1, #0]
    222c:	4640      	mov	r0, r8
    222e:	6001      	str	r1, [r0, #0]
    2230:	3404      	adds	r4, #4
    2232:	210a      	movs	r1, #10
    2234:	4689      	mov	r9, r1
    2236:	44cc      	add	ip, r9
	for (i = 0; i < NUM_COL; i++) {
    2238:	4661      	mov	r1, ip
    223a:	2946      	cmp	r1, #70	; 0x46
    223c:	d009      	beq.n	2252 <readKeyboard+0xb2>
    223e:	46a1      	mov	r9, r4
		REG_PORT_OUTSET0 = kb_col[i];
    2240:	465b      	mov	r3, fp
    2242:	6821      	ldr	r1, [r4, #0]
    2244:	6019      	str	r1, [r3, #0]
    2246:	4b39      	ldr	r3, [pc, #228]	; (232c <readKeyboard+0x18c>)
    2248:	9301      	str	r3, [sp, #4]
    224a:	001d      	movs	r5, r3
    224c:	3528      	adds	r5, #40	; 0x28
    224e:	4661      	mov	r1, ip
    2250:	e7e1      	b.n	2216 <readKeyboard+0x76>
    2252:	9901      	ldr	r1, [sp, #4]
		REG_PORT_DIRSET0 = kb_row[i];
    2254:	4e33      	ldr	r6, [pc, #204]	; (2324 <readKeyboard+0x184>)
		REG_PORT_OUTCLR0 = kb_row[i];
    2256:	4d34      	ldr	r5, [pc, #208]	; (2328 <readKeyboard+0x188>)
		REG_PORT_DIRSET0 = kb_row[i];
    2258:	6808      	ldr	r0, [r1, #0]
    225a:	6030      	str	r0, [r6, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    225c:	c901      	ldmia	r1!, {r0}
    225e:	6028      	str	r0, [r5, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2260:	4299      	cmp	r1, r3
    2262:	d1f9      	bne.n	2258 <readKeyboard+0xb8>
    2264:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    2266:	4b2e      	ldr	r3, [pc, #184]	; (2320 <readKeyboard+0x180>)
    2268:	4699      	mov	r9, r3
    226a:	4b31      	ldr	r3, [pc, #196]	; (2330 <readKeyboard+0x190>)
    226c:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    226e:	4c34      	ldr	r4, [pc, #208]	; (2340 <readKeyboard+0x1a0>)
    2270:	2604      	movs	r6, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2272:	2502      	movs	r5, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    2274:	4643      	mov	r3, r8
    2276:	4648      	mov	r0, r9
    2278:	5808      	ldr	r0, [r1, r0]
    227a:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    227c:	590b      	ldr	r3, [r1, r4]
    227e:	482e      	ldr	r0, [pc, #184]	; (2338 <readKeyboard+0x198>)
    2280:	4684      	mov	ip, r0
    2282:	4463      	add	r3, ip
    2284:	7818      	ldrb	r0, [r3, #0]
    2286:	4330      	orrs	r0, r6
    2288:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    228a:	7818      	ldrb	r0, [r3, #0]
    228c:	4328      	orrs	r0, r5
    228e:	7018      	strb	r0, [r3, #0]
    2290:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    2292:	291c      	cmp	r1, #28
    2294:	d1ee      	bne.n	2274 <readKeyboard+0xd4>
    2296:	2400      	movs	r4, #0
		REG_PORT_OUTSET0 = kb_row[i];
    2298:	4b28      	ldr	r3, [pc, #160]	; (233c <readKeyboard+0x19c>)
    229a:	4699      	mov	r9, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    229c:	4e1f      	ldr	r6, [pc, #124]	; (231c <readKeyboard+0x17c>)
		REG_PORT_OUTCLR0 = kb_row[i];
    229e:	4b22      	ldr	r3, [pc, #136]	; (2328 <readKeyboard+0x188>)
    22a0:	469c      	mov	ip, r3
    22a2:	e016      	b.n	22d2 <readKeyboard+0x132>
    22a4:	3104      	adds	r1, #4
    22a6:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    22a8:	429d      	cmp	r5, r3
    22aa:	d008      	beq.n	22be <readKeyboard+0x11e>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    22ac:	6a30      	ldr	r0, [r6, #32]
    22ae:	680f      	ldr	r7, [r1, #0]
    22b0:	4207      	tst	r7, r0
    22b2:	d0f7      	beq.n	22a4 <readKeyboard+0x104>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    22b4:	0090      	lsls	r0, r2, #2
    22b6:	af02      	add	r7, sp, #8
    22b8:	51c3      	str	r3, [r0, r7]
				scanCodeIndex++;
    22ba:	3201      	adds	r2, #1
    22bc:	e7f2      	b.n	22a4 <readKeyboard+0x104>
		REG_PORT_OUTCLR0 = kb_row[i];
    22be:	4653      	mov	r3, sl
    22c0:	681b      	ldr	r3, [r3, #0]
    22c2:	4661      	mov	r1, ip
    22c4:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    22c6:	3401      	adds	r4, #1
    22c8:	9b01      	ldr	r3, [sp, #4]
    22ca:	3304      	adds	r3, #4
    22cc:	9301      	str	r3, [sp, #4]
    22ce:	2c0a      	cmp	r4, #10
    22d0:	d009      	beq.n	22e6 <readKeyboard+0x146>
    22d2:	9901      	ldr	r1, [sp, #4]
    22d4:	468a      	mov	sl, r1
		REG_PORT_OUTSET0 = kb_row[i];
    22d6:	464b      	mov	r3, r9
    22d8:	6809      	ldr	r1, [r1, #0]
    22da:	6019      	str	r1, [r3, #0]
    22dc:	0023      	movs	r3, r4
    22de:	0025      	movs	r5, r4
    22e0:	3546      	adds	r5, #70	; 0x46
    22e2:	490f      	ldr	r1, [pc, #60]	; (2320 <readKeyboard+0x180>)
    22e4:	e7e2      	b.n	22ac <readKeyboard+0x10c>
	for(i = 0; i < scanCodeIndex; i++)
    22e6:	2a00      	cmp	r2, #0
    22e8:	dd11      	ble.n	230e <readKeyboard+0x16e>
    22ea:	ad02      	add	r5, sp, #8
    22ec:	4e15      	ldr	r6, [pc, #84]	; (2344 <readKeyboard+0x1a4>)
    22ee:	0092      	lsls	r2, r2, #2
    22f0:	18ac      	adds	r4, r5, r2
		if(!bufferContains(scanCodes[i]))		//if it isn't already in the scancode buffer
    22f2:	4b15      	ldr	r3, [pc, #84]	; (2348 <readKeyboard+0x1a8>)
    22f4:	4698      	mov	r8, r3
    22f6:	e003      	b.n	2300 <readKeyboard+0x160>
    22f8:	3504      	adds	r5, #4
    22fa:	3601      	adds	r6, #1
	for(i = 0; i < scanCodeIndex; i++)
    22fc:	42ac      	cmp	r4, r5
    22fe:	d006      	beq.n	230e <readKeyboard+0x16e>
		if(!bufferContains(scanCodes[i]))		//if it isn't already in the scancode buffer
    2300:	682f      	ldr	r7, [r5, #0]
    2302:	0038      	movs	r0, r7
    2304:	47c0      	blx	r8
    2306:	2800      	cmp	r0, #0
    2308:	d1f6      	bne.n	22f8 <readKeyboard+0x158>
			scanCodeBuffer[i] = scanCodes[i];
    230a:	7037      	strb	r7, [r6, #0]
    230c:	e7f4      	b.n	22f8 <readKeyboard+0x158>
}
    230e:	b049      	add	sp, #292	; 0x124
    2310:	bc3c      	pop	{r2, r3, r4, r5}
    2312:	4690      	mov	r8, r2
    2314:	4699      	mov	r9, r3
    2316:	46a2      	mov	sl, r4
    2318:	46ab      	mov	fp, r5
    231a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    231c:	41004400 	.word	0x41004400
    2320:	00006364 	.word	0x00006364
    2324:	41004408 	.word	0x41004408
    2328:	41004414 	.word	0x41004414
    232c:	0000639c 	.word	0x0000639c
    2330:	41004404 	.word	0x41004404
    2334:	000063c4 	.word	0x000063c4
    2338:	41004440 	.word	0x41004440
    233c:	41004418 	.word	0x41004418
    2340:	00006380 	.word	0x00006380
    2344:	20000028 	.word	0x20000028
    2348:	00002175 	.word	0x00002175

0000234c <clearCursorBuffer>:
		}
	}
}

void clearCursorBuffer(void)
{
    234c:	4b04      	ldr	r3, [pc, #16]	; (2360 <clearCursorBuffer+0x14>)
    234e:	0019      	movs	r1, r3
    2350:	31c8      	adds	r1, #200	; 0xc8
	for(uint16_t i = 0 ; i < 200 ; i++)
	{
		cursorBuffer[i] = 0x00;
    2352:	2200      	movs	r2, #0
    2354:	701a      	strb	r2, [r3, #0]
    2356:	3301      	adds	r3, #1
	for(uint16_t i = 0 ; i < 200 ; i++)
    2358:	428b      	cmp	r3, r1
    235a:	d1fb      	bne.n	2354 <clearCursorBuffer+0x8>
	}
}
    235c:	4770      	bx	lr
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	200001ec 	.word	0x200001ec

00002364 <drawCursorBuffer>:

void drawCursorBuffer(void)
{
    2364:	b5f0      	push	{r4, r5, r6, r7, lr}
    2366:	46c6      	mov	lr, r8
    2368:	b500      	push	{lr}

	setXY(abs(xCharPos-79)*10,yCharPos*20,abs(xCharPos-79)*10+9,yCharPos*20+19);
    236a:	4b1c      	ldr	r3, [pc, #112]	; (23dc <drawCursorBuffer+0x78>)
    236c:	7818      	ldrb	r0, [r3, #0]
    236e:	384f      	subs	r0, #79	; 0x4f
    2370:	17c3      	asrs	r3, r0, #31
    2372:	18c0      	adds	r0, r0, r3
    2374:	4058      	eors	r0, r3
    2376:	0083      	lsls	r3, r0, #2
    2378:	18c0      	adds	r0, r0, r3
    237a:	0040      	lsls	r0, r0, #1
    237c:	b280      	uxth	r0, r0
    237e:	4b18      	ldr	r3, [pc, #96]	; (23e0 <drawCursorBuffer+0x7c>)
    2380:	7819      	ldrb	r1, [r3, #0]
    2382:	2314      	movs	r3, #20
    2384:	4359      	muls	r1, r3
    2386:	000b      	movs	r3, r1
    2388:	3313      	adds	r3, #19
    238a:	b29b      	uxth	r3, r3
    238c:	0002      	movs	r2, r0
    238e:	3209      	adds	r2, #9
    2390:	b292      	uxth	r2, r2
    2392:	4c14      	ldr	r4, [pc, #80]	; (23e4 <drawCursorBuffer+0x80>)
    2394:	47a0      	blx	r4
    2396:	4c14      	ldr	r4, [pc, #80]	; (23e8 <drawCursorBuffer+0x84>)
    2398:	0025      	movs	r5, r4
    239a:	35c8      	adds	r5, #200	; 0xc8
	for(uint16_t i = 0 ; i < 200 ; i++)
	{
		if((cursorBuffer[i] == 0xFF))
		setPixel((fore_Color_High<<8)|fore_Color_Low);
		else
		setPixel((back_Color_High<<8)|back_Color_Low);
    239c:	4b13      	ldr	r3, [pc, #76]	; (23ec <drawCursorBuffer+0x88>)
    239e:	4698      	mov	r8, r3
    23a0:	4f13      	ldr	r7, [pc, #76]	; (23f0 <drawCursorBuffer+0x8c>)
    23a2:	4e14      	ldr	r6, [pc, #80]	; (23f4 <drawCursorBuffer+0x90>)
    23a4:	e00b      	b.n	23be <drawCursorBuffer+0x5a>
		setPixel((fore_Color_High<<8)|fore_Color_Low);
    23a6:	4b14      	ldr	r3, [pc, #80]	; (23f8 <drawCursorBuffer+0x94>)
    23a8:	8818      	ldrh	r0, [r3, #0]
    23aa:	0200      	lsls	r0, r0, #8
    23ac:	4b13      	ldr	r3, [pc, #76]	; (23fc <drawCursorBuffer+0x98>)
    23ae:	881b      	ldrh	r3, [r3, #0]
    23b0:	4318      	orrs	r0, r3
    23b2:	b280      	uxth	r0, r0
    23b4:	4b0f      	ldr	r3, [pc, #60]	; (23f4 <drawCursorBuffer+0x90>)
    23b6:	4798      	blx	r3
    23b8:	3401      	adds	r4, #1
	for(uint16_t i = 0 ; i < 200 ; i++)
    23ba:	42ac      	cmp	r4, r5
    23bc:	d00a      	beq.n	23d4 <drawCursorBuffer+0x70>
		if((cursorBuffer[i] == 0xFF))
    23be:	7823      	ldrb	r3, [r4, #0]
    23c0:	2bff      	cmp	r3, #255	; 0xff
    23c2:	d0f0      	beq.n	23a6 <drawCursorBuffer+0x42>
		setPixel((back_Color_High<<8)|back_Color_Low);
    23c4:	4643      	mov	r3, r8
    23c6:	8818      	ldrh	r0, [r3, #0]
    23c8:	0200      	lsls	r0, r0, #8
    23ca:	883b      	ldrh	r3, [r7, #0]
    23cc:	4318      	orrs	r0, r3
    23ce:	b280      	uxth	r0, r0
    23d0:	47b0      	blx	r6
    23d2:	e7f1      	b.n	23b8 <drawCursorBuffer+0x54>
	}
	

}
    23d4:	bc04      	pop	{r2}
    23d6:	4690      	mov	r8, r2
    23d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	20000180 	.word	0x20000180
    23e0:	20000181 	.word	0x20000181
    23e4:	00002919 	.word	0x00002919
    23e8:	200001ec 	.word	0x200001ec
    23ec:	200002ba 	.word	0x200002ba
    23f0:	200002b4 	.word	0x200002b4
    23f4:	00002af9 	.word	0x00002af9
    23f8:	200002b6 	.word	0x200002b6
    23fc:	200002b8 	.word	0x200002b8

00002400 <moveCursor>:
		}
	}	
}

void moveCursor(uint8_t x, uint8_t y)
{
    2400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2402:	46de      	mov	lr, fp
    2404:	4657      	mov	r7, sl
    2406:	464e      	mov	r6, r9
    2408:	4645      	mov	r5, r8
    240a:	b5e0      	push	{r5, r6, r7, lr}
    240c:	4683      	mov	fp, r0
    240e:	468a      	mov	sl, r1
	//buffer.
	
	//All this function does is read the GRAM and move the cursor.
	
	//set PB07 to input
	REG_PORT_DIRCLR1 = PORT_PB07;
    2410:	2280      	movs	r2, #128	; 0x80
    2412:	4b31      	ldr	r3, [pc, #196]	; (24d8 <moveCursor+0xd8>)
    2414:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[7].bit.INEN = 1;
    2416:	4a31      	ldr	r2, [pc, #196]	; (24dc <moveCursor+0xdc>)
    2418:	23c7      	movs	r3, #199	; 0xc7
    241a:	5cd1      	ldrb	r1, [r2, r3]
    241c:	2002      	movs	r0, #2
    241e:	4301      	orrs	r1, r0
    2420:	54d1      	strb	r1, [r2, r3]
	PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    2422:	5cd1      	ldrb	r1, [r2, r3]
    2424:	2004      	movs	r0, #4
    2426:	4301      	orrs	r1, r0
    2428:	54d1      	strb	r1, [r2, r3]
	
	
	//Per page 40 of datasheet (5.1.2.7, 16-bit
	//parallel interface for data ram read.
	REG_PORT_OUTCLR1 = LCD_CS;
    242a:	4c2d      	ldr	r4, [pc, #180]	; (24e0 <moveCursor+0xe0>)
    242c:	2380      	movs	r3, #128	; 0x80
    242e:	03db      	lsls	r3, r3, #15
    2430:	6023      	str	r3, [r4, #0]
	setXY(abs(x-79)*10,y*20,abs(x-79)*10+9,y*20+19);
    2432:	4658      	mov	r0, fp
    2434:	384f      	subs	r0, #79	; 0x4f
    2436:	17c3      	asrs	r3, r0, #31
    2438:	18c0      	adds	r0, r0, r3
    243a:	4058      	eors	r0, r3
    243c:	0083      	lsls	r3, r0, #2
    243e:	18c0      	adds	r0, r0, r3
    2440:	0040      	lsls	r0, r0, #1
    2442:	b280      	uxth	r0, r0
    2444:	2114      	movs	r1, #20
    2446:	4653      	mov	r3, sl
    2448:	4359      	muls	r1, r3
    244a:	000b      	movs	r3, r1
    244c:	3313      	adds	r3, #19
    244e:	b29b      	uxth	r3, r3
    2450:	0002      	movs	r2, r0
    2452:	3209      	adds	r2, #9
    2454:	b292      	uxth	r2, r2
    2456:	4d23      	ldr	r5, [pc, #140]	; (24e4 <moveCursor+0xe4>)
    2458:	47a8      	blx	r5
	
	//Send'Memory read' command 0x2E00, no data bit
	LCD_Write_COM16(0x2E,0x00);
    245a:	2100      	movs	r1, #0
    245c:	202e      	movs	r0, #46	; 0x2e
    245e:	4b22      	ldr	r3, [pc, #136]	; (24e8 <moveCursor+0xe8>)
    2460:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    2462:	4b22      	ldr	r3, [pc, #136]	; (24ec <moveCursor+0xec>)
    2464:	2280      	movs	r2, #128	; 0x80
    2466:	0412      	lsls	r2, r2, #16
    2468:	601a      	str	r2, [r3, #0]

	//needs dummy write, per data sheet, page 40
	REG_PORT_OUTCLR1 = LCD_RD;
    246a:	2280      	movs	r2, #128	; 0x80
    246c:	0252      	lsls	r2, r2, #9
    246e:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_RD;
    2470:	601a      	str	r2, [r3, #0]
    2472:	4b1f      	ldr	r3, [pc, #124]	; (24f0 <moveCursor+0xf0>)
    2474:	22c9      	movs	r2, #201	; 0xc9
    2476:	4691      	mov	r9, r2
    2478:	4499      	add	r9, r3
	
	for(uint8_t pixel = 0; pixel <= 200 ; pixel++)
	{
		REG_PORT_OUTCLR1 = LCD_RD;
    247a:	0020      	movs	r0, r4
    247c:	2280      	movs	r2, #128	; 0x80
    247e:	0252      	lsls	r2, r2, #9
		REG_PORT_OUTSET1 = LCD_RD;
    2480:	491a      	ldr	r1, [pc, #104]	; (24ec <moveCursor+0xec>)

		//get the pin state, stuff into array
		
		//This can be expanded with else if for the MSBs
		//of all the colors; see datasheet page 40.
		if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2482:	4c16      	ldr	r4, [pc, #88]	; (24dc <moveCursor+0xdc>)
    2484:	46a0      	mov	r8, r4
    2486:	24a0      	movs	r4, #160	; 0xa0
    2488:	46a4      	mov	ip, r4
    248a:	2580      	movs	r5, #128	; 0x80
		{
			cursorBuffer[pixel] = 0xFF;
		}
		else
		{
			cursorBuffer[pixel] = 0x00;
    248c:	2700      	movs	r7, #0
    248e:	e005      	b.n	249c <moveCursor+0x9c>
    2490:	701f      	strb	r7, [r3, #0]
		//dummy read, because pixel data broken up
		//per datasheet page 40. Everything after
		//the dummy write is BLUE pixels. Do we ever
		//need blue? IDK.
		
		REG_PORT_OUTCLR1 = LCD_RD;
    2492:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    2494:	600a      	str	r2, [r1, #0]
    2496:	3301      	adds	r3, #1
	for(uint8_t pixel = 0; pixel <= 200 ; pixel++)
    2498:	454b      	cmp	r3, r9
    249a:	d009      	beq.n	24b0 <moveCursor+0xb0>
		REG_PORT_OUTCLR1 = LCD_RD;
    249c:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    249e:	600a      	str	r2, [r1, #0]
		if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    24a0:	4644      	mov	r4, r8
    24a2:	4666      	mov	r6, ip
    24a4:	59a4      	ldr	r4, [r4, r6]
    24a6:	4225      	tst	r5, r4
    24a8:	d0f2      	beq.n	2490 <moveCursor+0x90>
			cursorBuffer[pixel] = 0xFF;
    24aa:	24ff      	movs	r4, #255	; 0xff
    24ac:	701c      	strb	r4, [r3, #0]
    24ae:	e7f0      	b.n	2492 <moveCursor+0x92>
	}
	
	REG_PORT_OUTSET1 = LCD_DC;
    24b0:	2280      	movs	r2, #128	; 0x80
    24b2:	0412      	lsls	r2, r2, #16
    24b4:	4b0d      	ldr	r3, [pc, #52]	; (24ec <moveCursor+0xec>)
    24b6:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = 0x0000FFFF;
    24b8:	4a0e      	ldr	r2, [pc, #56]	; (24f4 <moveCursor+0xf4>)
    24ba:	4b0f      	ldr	r3, [pc, #60]	; (24f8 <moveCursor+0xf8>)
    24bc:	601a      	str	r2, [r3, #0]
	
	//The cursor data is in the cursorBuffer, so now we move
	//xCharPos and yCharPos
	xCharPos = x;
    24be:	4b0f      	ldr	r3, [pc, #60]	; (24fc <moveCursor+0xfc>)
    24c0:	465a      	mov	r2, fp
    24c2:	701a      	strb	r2, [r3, #0]
	yCharPos = y;
    24c4:	4b0e      	ldr	r3, [pc, #56]	; (2500 <moveCursor+0x100>)
    24c6:	4652      	mov	r2, sl
    24c8:	701a      	strb	r2, [r3, #0]
	
}
    24ca:	bc3c      	pop	{r2, r3, r4, r5}
    24cc:	4690      	mov	r8, r2
    24ce:	4699      	mov	r9, r3
    24d0:	46a2      	mov	sl, r4
    24d2:	46ab      	mov	fp, r5
    24d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	41004484 	.word	0x41004484
    24dc:	41004400 	.word	0x41004400
    24e0:	41004494 	.word	0x41004494
    24e4:	00002919 	.word	0x00002919
    24e8:	00002b9d 	.word	0x00002b9d
    24ec:	41004498 	.word	0x41004498
    24f0:	200001ec 	.word	0x200001ec
    24f4:	0000ffff 	.word	0x0000ffff
    24f8:	41004488 	.word	0x41004488
    24fc:	20000180 	.word	0x20000180
    2500:	20000181 	.word	0x20000181

00002504 <printKeyboardBuffer>:
{
    2504:	b5f0      	push	{r4, r5, r6, r7, lr}
    2506:	46de      	mov	lr, fp
    2508:	464f      	mov	r7, r9
    250a:	4646      	mov	r6, r8
    250c:	b5c0      	push	{r6, r7, lr}
    250e:	b0a6      	sub	sp, #152	; 0x98
	char noCase[] =	  {0xFF,0xFF,0xFF,0xFF,0xFF,	//Col0, Row0-4
    2510:	4c7b      	ldr	r4, [pc, #492]	; (2700 <printKeyboardBuffer+0x1fc>)
    2512:	2246      	movs	r2, #70	; 0x46
    2514:	0021      	movs	r1, r4
    2516:	a814      	add	r0, sp, #80	; 0x50
    2518:	4d7a      	ldr	r5, [pc, #488]	; (2704 <printKeyboardBuffer+0x200>)
    251a:	47a8      	blx	r5
	char shiftCase[] = {0xFF,0xFF,0xFF,0xFF,0xFF,	//Col0, Row0-4
    251c:	0021      	movs	r1, r4
    251e:	3148      	adds	r1, #72	; 0x48
    2520:	2246      	movs	r2, #70	; 0x46
    2522:	a802      	add	r0, sp, #8
    2524:	47a8      	blx	r5
    2526:	4e78      	ldr	r6, [pc, #480]	; (2708 <printKeyboardBuffer+0x204>)
    2528:	0031      	movs	r1, r6
    252a:	3114      	adds	r1, #20
    252c:	0035      	movs	r5, r6
	bool shifted = false;
    252e:	2300      	movs	r3, #0
    2530:	9301      	str	r3, [sp, #4]
    2532:	e002      	b.n	253a <printKeyboardBuffer+0x36>
    2534:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    2536:	428d      	cmp	r5, r1
    2538:	d00b      	beq.n	2552 <printKeyboardBuffer+0x4e>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    253a:	782b      	ldrb	r3, [r5, #0]
    253c:	001a      	movs	r2, r3
    253e:	3a0d      	subs	r2, #13
    2540:	4250      	negs	r0, r2
    2542:	4142      	adcs	r2, r0
    2544:	3b31      	subs	r3, #49	; 0x31
    2546:	4258      	negs	r0, r3
    2548:	4143      	adcs	r3, r0
    254a:	4313      	orrs	r3, r2
    254c:	d0f2      	beq.n	2534 <printKeyboardBuffer+0x30>
			shifted = true;
    254e:	9301      	str	r3, [sp, #4]
    2550:	e7f0      	b.n	2534 <printKeyboardBuffer+0x30>
    2552:	2700      	movs	r7, #0
		if(!keyDown(scanCodeBuffer[i]))
    2554:	4b6c      	ldr	r3, [pc, #432]	; (2708 <printKeyboardBuffer+0x204>)
    2556:	4699      	mov	r9, r3
		if(keyDownBuffer[i] == scancode)
    2558:	4c6c      	ldr	r4, [pc, #432]	; (270c <printKeyboardBuffer+0x208>)
			keyDownBuffer[i] = scanCodeBuffer[i];
    255a:	46a0      	mov	r8, r4
    255c:	e007      	b.n	256e <printKeyboardBuffer+0x6a>
				if(xCharPos > 0)  ///I think I need to decouple the reading the next cursor
    255e:	4b6c      	ldr	r3, [pc, #432]	; (2710 <printKeyboardBuffer+0x20c>)
    2560:	781b      	ldrb	r3, [r3, #0]
    2562:	2b00      	cmp	r3, #0
    2564:	d13a      	bne.n	25dc <printKeyboardBuffer+0xd8>
	for(int i=0; i<20; i++)
    2566:	3701      	adds	r7, #1
    2568:	2f14      	cmp	r7, #20
    256a:	d100      	bne.n	256e <printKeyboardBuffer+0x6a>
    256c:	e0bc      	b.n	26e8 <printKeyboardBuffer+0x1e4>
		if(!keyDown(scanCodeBuffer[i]))
    256e:	464b      	mov	r3, r9
    2570:	5cfb      	ldrb	r3, [r7, r3]
		if(keyDownBuffer[i] == scancode)
    2572:	7822      	ldrb	r2, [r4, #0]
		if(!keyDown(scanCodeBuffer[i]))
    2574:	4293      	cmp	r3, r2
    2576:	d0f6      	beq.n	2566 <printKeyboardBuffer+0x62>
			keyDownBuffer[i] = scanCodeBuffer[i];
    2578:	4642      	mov	r2, r8
    257a:	55d3      	strb	r3, [r2, r7]
			if(scanCodeBuffer[i] == 0xFF)
    257c:	2bff      	cmp	r3, #255	; 0xff
    257e:	d0f2      	beq.n	2566 <printKeyboardBuffer+0x62>
			else if(scanCodeBuffer[i] == 35) //left
    2580:	2b23      	cmp	r3, #35	; 0x23
    2582:	d0ec      	beq.n	255e <printKeyboardBuffer+0x5a>
			else if(scanCodeBuffer[i] == 45)	//down
    2584:	2b2d      	cmp	r3, #45	; 0x2d
    2586:	d034      	beq.n	25f2 <printKeyboardBuffer+0xee>
			else if(scanCodeBuffer[i] == 55)	//up
    2588:	2b37      	cmp	r3, #55	; 0x37
    258a:	d041      	beq.n	2610 <printKeyboardBuffer+0x10c>
			else if(scanCodeBuffer[i] == 65)	//right
    258c:	2b41      	cmp	r3, #65	; 0x41
    258e:	d04e      	beq.n	262e <printKeyboardBuffer+0x12a>
			else if((scanCodeBuffer[i] == 49) | (scanCodeBuffer[i] == 13))
    2590:	2b31      	cmp	r3, #49	; 0x31
    2592:	d0e8      	beq.n	2566 <printKeyboardBuffer+0x62>
    2594:	2b0d      	cmp	r3, #13
    2596:	d0e6      	beq.n	2566 <printKeyboardBuffer+0x62>
			else if(scanCodeBuffer[i] == 58) //Return
    2598:	2b3a      	cmp	r3, #58	; 0x3a
    259a:	d057      	beq.n	264c <printKeyboardBuffer+0x148>
			else if(scanCodeBuffer[i] == 69) //Line
    259c:	2b45      	cmp	r3, #69	; 0x45
    259e:	d06b      	beq.n	2678 <printKeyboardBuffer+0x174>
			else if(scanCodeBuffer[i] == 66) //Backspace
    25a0:	2b42      	cmp	r3, #66	; 0x42
    25a2:	d074      	beq.n	268e <printKeyboardBuffer+0x18a>
				if(shifted)
    25a4:	9a01      	ldr	r2, [sp, #4]
    25a6:	2a00      	cmp	r2, #0
    25a8:	d100      	bne.n	25ac <printKeyboardBuffer+0xa8>
    25aa:	e084      	b.n	26b6 <printKeyboardBuffer+0x1b2>
					drawChar(shiftCase[scanCodeBuffer[i]]);
    25ac:	aa02      	add	r2, sp, #8
    25ae:	5cd0      	ldrb	r0, [r2, r3]
    25b0:	4b58      	ldr	r3, [pc, #352]	; (2714 <printKeyboardBuffer+0x210>)
    25b2:	4798      	blx	r3
					if(xCharPos < 79)
    25b4:	4b56      	ldr	r3, [pc, #344]	; (2710 <printKeyboardBuffer+0x20c>)
    25b6:	7818      	ldrb	r0, [r3, #0]
    25b8:	284e      	cmp	r0, #78	; 0x4e
    25ba:	d8d4      	bhi.n	2566 <printKeyboardBuffer+0x62>
						moveCursor(xCharPos++,yCharPos);
    25bc:	469b      	mov	fp, r3
    25be:	1c43      	adds	r3, r0, #1
    25c0:	465a      	mov	r2, fp
    25c2:	7013      	strb	r3, [r2, #0]
    25c4:	4b54      	ldr	r3, [pc, #336]	; (2718 <printKeyboardBuffer+0x214>)
    25c6:	7819      	ldrb	r1, [r3, #0]
    25c8:	4b54      	ldr	r3, [pc, #336]	; (271c <printKeyboardBuffer+0x218>)
    25ca:	4798      	blx	r3
						xCharPos++;
    25cc:	465b      	mov	r3, fp
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	3301      	adds	r3, #1
    25d2:	465a      	mov	r2, fp
    25d4:	7013      	strb	r3, [r2, #0]
						clearCursorBuffer();
    25d6:	4b52      	ldr	r3, [pc, #328]	; (2720 <printKeyboardBuffer+0x21c>)
    25d8:	4798      	blx	r3
    25da:	e7c4      	b.n	2566 <printKeyboardBuffer+0x62>
					drawCursorBuffer();
    25dc:	4b51      	ldr	r3, [pc, #324]	; (2724 <printKeyboardBuffer+0x220>)
    25de:	4798      	blx	r3
					moveCursor(xCharPos-1,yCharPos);
    25e0:	4b4d      	ldr	r3, [pc, #308]	; (2718 <printKeyboardBuffer+0x214>)
    25e2:	7819      	ldrb	r1, [r3, #0]
    25e4:	4b4a      	ldr	r3, [pc, #296]	; (2710 <printKeyboardBuffer+0x20c>)
    25e6:	7818      	ldrb	r0, [r3, #0]
    25e8:	3801      	subs	r0, #1
    25ea:	b2c0      	uxtb	r0, r0
    25ec:	4b4b      	ldr	r3, [pc, #300]	; (271c <printKeyboardBuffer+0x218>)
    25ee:	4798      	blx	r3
    25f0:	e7b9      	b.n	2566 <printKeyboardBuffer+0x62>
				if(yCharPos < 24)
    25f2:	4b49      	ldr	r3, [pc, #292]	; (2718 <printKeyboardBuffer+0x214>)
    25f4:	781b      	ldrb	r3, [r3, #0]
    25f6:	2b17      	cmp	r3, #23
    25f8:	d8b5      	bhi.n	2566 <printKeyboardBuffer+0x62>
					drawCursorBuffer();
    25fa:	4b4a      	ldr	r3, [pc, #296]	; (2724 <printKeyboardBuffer+0x220>)
    25fc:	4798      	blx	r3
					moveCursor(xCharPos,yCharPos+1);
    25fe:	4b46      	ldr	r3, [pc, #280]	; (2718 <printKeyboardBuffer+0x214>)
    2600:	7819      	ldrb	r1, [r3, #0]
    2602:	3101      	adds	r1, #1
    2604:	b2c9      	uxtb	r1, r1
    2606:	4b42      	ldr	r3, [pc, #264]	; (2710 <printKeyboardBuffer+0x20c>)
    2608:	7818      	ldrb	r0, [r3, #0]
    260a:	4b44      	ldr	r3, [pc, #272]	; (271c <printKeyboardBuffer+0x218>)
    260c:	4798      	blx	r3
    260e:	e7aa      	b.n	2566 <printKeyboardBuffer+0x62>
				if(yCharPos > 0)
    2610:	4b41      	ldr	r3, [pc, #260]	; (2718 <printKeyboardBuffer+0x214>)
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	2b00      	cmp	r3, #0
    2616:	d0a6      	beq.n	2566 <printKeyboardBuffer+0x62>
					drawCursorBuffer();
    2618:	4b42      	ldr	r3, [pc, #264]	; (2724 <printKeyboardBuffer+0x220>)
    261a:	4798      	blx	r3
					moveCursor(xCharPos,yCharPos-1);
    261c:	4b3e      	ldr	r3, [pc, #248]	; (2718 <printKeyboardBuffer+0x214>)
    261e:	7819      	ldrb	r1, [r3, #0]
    2620:	3901      	subs	r1, #1
    2622:	b2c9      	uxtb	r1, r1
    2624:	4b3a      	ldr	r3, [pc, #232]	; (2710 <printKeyboardBuffer+0x20c>)
    2626:	7818      	ldrb	r0, [r3, #0]
    2628:	4b3c      	ldr	r3, [pc, #240]	; (271c <printKeyboardBuffer+0x218>)
    262a:	4798      	blx	r3
    262c:	e79b      	b.n	2566 <printKeyboardBuffer+0x62>
				if(xCharPos < 79)
    262e:	4b38      	ldr	r3, [pc, #224]	; (2710 <printKeyboardBuffer+0x20c>)
    2630:	781b      	ldrb	r3, [r3, #0]
    2632:	2b4e      	cmp	r3, #78	; 0x4e
    2634:	d897      	bhi.n	2566 <printKeyboardBuffer+0x62>
					drawCursorBuffer();
    2636:	4b3b      	ldr	r3, [pc, #236]	; (2724 <printKeyboardBuffer+0x220>)
    2638:	4798      	blx	r3
					moveCursor(xCharPos+1,yCharPos);
    263a:	4b37      	ldr	r3, [pc, #220]	; (2718 <printKeyboardBuffer+0x214>)
    263c:	7819      	ldrb	r1, [r3, #0]
    263e:	4b34      	ldr	r3, [pc, #208]	; (2710 <printKeyboardBuffer+0x20c>)
    2640:	7818      	ldrb	r0, [r3, #0]
    2642:	3001      	adds	r0, #1
    2644:	b2c0      	uxtb	r0, r0
    2646:	4b35      	ldr	r3, [pc, #212]	; (271c <printKeyboardBuffer+0x218>)
    2648:	4798      	blx	r3
    264a:	e78c      	b.n	2566 <printKeyboardBuffer+0x62>
				if(yCharPos == 23)
    264c:	4b32      	ldr	r3, [pc, #200]	; (2718 <printKeyboardBuffer+0x214>)
    264e:	781b      	ldrb	r3, [r3, #0]
    2650:	2b17      	cmp	r3, #23
    2652:	d009      	beq.n	2668 <printKeyboardBuffer+0x164>
					drawCursorBuffer();
    2654:	4b33      	ldr	r3, [pc, #204]	; (2724 <printKeyboardBuffer+0x220>)
    2656:	4798      	blx	r3
					yCharPos++;
    2658:	4a2f      	ldr	r2, [pc, #188]	; (2718 <printKeyboardBuffer+0x214>)
    265a:	7813      	ldrb	r3, [r2, #0]
    265c:	3301      	adds	r3, #1
    265e:	7013      	strb	r3, [r2, #0]
					xCharPos = 0;
    2660:	2200      	movs	r2, #0
    2662:	4b2b      	ldr	r3, [pc, #172]	; (2710 <printKeyboardBuffer+0x20c>)
    2664:	701a      	strb	r2, [r3, #0]
    2666:	e77e      	b.n	2566 <printKeyboardBuffer+0x62>
					drawCursorBuffer();
    2668:	4b2e      	ldr	r3, [pc, #184]	; (2724 <printKeyboardBuffer+0x220>)
    266a:	4798      	blx	r3
					newLine();
    266c:	4b2e      	ldr	r3, [pc, #184]	; (2728 <printKeyboardBuffer+0x224>)
    266e:	4798      	blx	r3
					xCharPos = 0;
    2670:	2200      	movs	r2, #0
    2672:	4b27      	ldr	r3, [pc, #156]	; (2710 <printKeyboardBuffer+0x20c>)
    2674:	701a      	strb	r2, [r3, #0]
    2676:	e776      	b.n	2566 <printKeyboardBuffer+0x62>
				if(yCharPos == 23)
    2678:	4b27      	ldr	r3, [pc, #156]	; (2718 <printKeyboardBuffer+0x214>)
    267a:	781b      	ldrb	r3, [r3, #0]
    267c:	2b17      	cmp	r3, #23
    267e:	d003      	beq.n	2688 <printKeyboardBuffer+0x184>
					yCharPos++;
    2680:	3301      	adds	r3, #1
    2682:	4a25      	ldr	r2, [pc, #148]	; (2718 <printKeyboardBuffer+0x214>)
    2684:	7013      	strb	r3, [r2, #0]
    2686:	e76e      	b.n	2566 <printKeyboardBuffer+0x62>
					newLine();
    2688:	4b27      	ldr	r3, [pc, #156]	; (2728 <printKeyboardBuffer+0x224>)
    268a:	4798      	blx	r3
    268c:	e76b      	b.n	2566 <printKeyboardBuffer+0x62>
				drawCursorBuffer();
    268e:	4b25      	ldr	r3, [pc, #148]	; (2724 <printKeyboardBuffer+0x220>)
    2690:	4798      	blx	r3
				xCharPos--;
    2692:	4b1f      	ldr	r3, [pc, #124]	; (2710 <printKeyboardBuffer+0x20c>)
    2694:	469b      	mov	fp, r3
    2696:	781b      	ldrb	r3, [r3, #0]
    2698:	3b01      	subs	r3, #1
    269a:	465a      	mov	r2, fp
    269c:	7013      	strb	r3, [r2, #0]
				drawChar(0x20);
    269e:	2020      	movs	r0, #32
    26a0:	4b1c      	ldr	r3, [pc, #112]	; (2714 <printKeyboardBuffer+0x210>)
    26a2:	4798      	blx	r3
				clearCursorBuffer();
    26a4:	4b1e      	ldr	r3, [pc, #120]	; (2720 <printKeyboardBuffer+0x21c>)
    26a6:	4798      	blx	r3
				moveCursor(xCharPos,yCharPos);
    26a8:	4b1b      	ldr	r3, [pc, #108]	; (2718 <printKeyboardBuffer+0x214>)
    26aa:	7819      	ldrb	r1, [r3, #0]
    26ac:	465b      	mov	r3, fp
    26ae:	7818      	ldrb	r0, [r3, #0]
    26b0:	4b1a      	ldr	r3, [pc, #104]	; (271c <printKeyboardBuffer+0x218>)
    26b2:	4798      	blx	r3
    26b4:	e757      	b.n	2566 <printKeyboardBuffer+0x62>
					drawChar(noCase[scanCodeBuffer[i]]);
    26b6:	aa14      	add	r2, sp, #80	; 0x50
    26b8:	5cd0      	ldrb	r0, [r2, r3]
    26ba:	4b16      	ldr	r3, [pc, #88]	; (2714 <printKeyboardBuffer+0x210>)
    26bc:	4798      	blx	r3
					if(xCharPos < 79)
    26be:	4b14      	ldr	r3, [pc, #80]	; (2710 <printKeyboardBuffer+0x20c>)
    26c0:	7818      	ldrb	r0, [r3, #0]
    26c2:	284e      	cmp	r0, #78	; 0x4e
    26c4:	d900      	bls.n	26c8 <printKeyboardBuffer+0x1c4>
    26c6:	e74e      	b.n	2566 <printKeyboardBuffer+0x62>
						moveCursor(xCharPos++,yCharPos);
    26c8:	469b      	mov	fp, r3
    26ca:	1c43      	adds	r3, r0, #1
    26cc:	465a      	mov	r2, fp
    26ce:	7013      	strb	r3, [r2, #0]
    26d0:	4b11      	ldr	r3, [pc, #68]	; (2718 <printKeyboardBuffer+0x214>)
    26d2:	7819      	ldrb	r1, [r3, #0]
    26d4:	4b11      	ldr	r3, [pc, #68]	; (271c <printKeyboardBuffer+0x218>)
    26d6:	4798      	blx	r3
						xCharPos++;
    26d8:	465b      	mov	r3, fp
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	3301      	adds	r3, #1
    26de:	465a      	mov	r2, fp
    26e0:	7013      	strb	r3, [r2, #0]
						clearCursorBuffer();
    26e2:	4b0f      	ldr	r3, [pc, #60]	; (2720 <printKeyboardBuffer+0x21c>)
    26e4:	4798      	blx	r3
    26e6:	e73e      	b.n	2566 <printKeyboardBuffer+0x62>
		scanCodeBuffer[i] = 0xFF;
    26e8:	23ff      	movs	r3, #255	; 0xff
    26ea:	7033      	strb	r3, [r6, #0]
    26ec:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    26ee:	42b5      	cmp	r5, r6
    26f0:	d1fb      	bne.n	26ea <printKeyboardBuffer+0x1e6>
}
    26f2:	b026      	add	sp, #152	; 0x98
    26f4:	bc1c      	pop	{r2, r3, r4}
    26f6:	4690      	mov	r8, r2
    26f8:	4699      	mov	r9, r3
    26fa:	46a3      	mov	fp, r4
    26fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26fe:	46c0      	nop			; (mov r8, r8)
    2700:	000062d4 	.word	0x000062d4
    2704:	000032b5 	.word	0x000032b5
    2708:	20000028 	.word	0x20000028
    270c:	20000014 	.word	0x20000014
    2710:	20000180 	.word	0x20000180
    2714:	00001e75 	.word	0x00001e75
    2718:	20000181 	.word	0x20000181
    271c:	00002401 	.word	0x00002401
    2720:	0000234d 	.word	0x0000234d
    2724:	00002365 	.word	0x00002365
    2728:	00001f71 	.word	0x00001f71

0000272c <blinkCursor>:

void blinkCursor(void)
{
    272c:	b5f0      	push	{r4, r5, r6, r7, lr}
    272e:	46c6      	mov	lr, r8
    2730:	b500      	push	{lr}
	if(cursorBlinkState)
    2732:	4b3e      	ldr	r3, [pc, #248]	; (282c <blinkCursor+0x100>)
    2734:	781b      	ldrb	r3, [r3, #0]
    2736:	2b00      	cmp	r3, #0
    2738:	d03c      	beq.n	27b4 <blinkCursor+0x88>
	{

		//Draw the *inverse* of cursorBuffer
		setXY(abs(xCharPos-79)*10,yCharPos*20,abs(xCharPos-79)*10+9,yCharPos*20+19);
    273a:	4b3d      	ldr	r3, [pc, #244]	; (2830 <blinkCursor+0x104>)
    273c:	7818      	ldrb	r0, [r3, #0]
    273e:	384f      	subs	r0, #79	; 0x4f
    2740:	17c3      	asrs	r3, r0, #31
    2742:	18c0      	adds	r0, r0, r3
    2744:	4058      	eors	r0, r3
    2746:	0083      	lsls	r3, r0, #2
    2748:	18c0      	adds	r0, r0, r3
    274a:	0040      	lsls	r0, r0, #1
    274c:	b280      	uxth	r0, r0
    274e:	4b39      	ldr	r3, [pc, #228]	; (2834 <blinkCursor+0x108>)
    2750:	7819      	ldrb	r1, [r3, #0]
    2752:	2314      	movs	r3, #20
    2754:	4359      	muls	r1, r3
    2756:	000b      	movs	r3, r1
    2758:	3313      	adds	r3, #19
    275a:	b29b      	uxth	r3, r3
    275c:	0002      	movs	r2, r0
    275e:	3209      	adds	r2, #9
    2760:	b292      	uxth	r2, r2
    2762:	4c35      	ldr	r4, [pc, #212]	; (2838 <blinkCursor+0x10c>)
    2764:	47a0      	blx	r4
    2766:	4c35      	ldr	r4, [pc, #212]	; (283c <blinkCursor+0x110>)
    2768:	0025      	movs	r5, r4
    276a:	35c8      	adds	r5, #200	; 0xc8
		for(uint16_t i = 0 ; i < 200 ; i++)
		{
			if((cursorBuffer[i] != 0xFF))
			setPixel((fore_Color_High<<8)|fore_Color_Low);
			else
			setPixel((back_Color_High<<8)|back_Color_Low);
    276c:	4b34      	ldr	r3, [pc, #208]	; (2840 <blinkCursor+0x114>)
    276e:	4698      	mov	r8, r3
    2770:	4f34      	ldr	r7, [pc, #208]	; (2844 <blinkCursor+0x118>)
    2772:	4e35      	ldr	r6, [pc, #212]	; (2848 <blinkCursor+0x11c>)
    2774:	e009      	b.n	278a <blinkCursor+0x5e>
    2776:	4643      	mov	r3, r8
    2778:	8818      	ldrh	r0, [r3, #0]
    277a:	0200      	lsls	r0, r0, #8
    277c:	883b      	ldrh	r3, [r7, #0]
    277e:	4318      	orrs	r0, r3
    2780:	b280      	uxth	r0, r0
    2782:	47b0      	blx	r6
    2784:	3401      	adds	r4, #1
		for(uint16_t i = 0 ; i < 200 ; i++)
    2786:	42a5      	cmp	r5, r4
    2788:	d00c      	beq.n	27a4 <blinkCursor+0x78>
			if((cursorBuffer[i] != 0xFF))
    278a:	7823      	ldrb	r3, [r4, #0]
    278c:	2bff      	cmp	r3, #255	; 0xff
    278e:	d0f2      	beq.n	2776 <blinkCursor+0x4a>
			setPixel((fore_Color_High<<8)|fore_Color_Low);
    2790:	4b2e      	ldr	r3, [pc, #184]	; (284c <blinkCursor+0x120>)
    2792:	8818      	ldrh	r0, [r3, #0]
    2794:	0200      	lsls	r0, r0, #8
    2796:	4b2e      	ldr	r3, [pc, #184]	; (2850 <blinkCursor+0x124>)
    2798:	881b      	ldrh	r3, [r3, #0]
    279a:	4318      	orrs	r0, r3
    279c:	b280      	uxth	r0, r0
    279e:	4b2a      	ldr	r3, [pc, #168]	; (2848 <blinkCursor+0x11c>)
    27a0:	4798      	blx	r3
    27a2:	e7ef      	b.n	2784 <blinkCursor+0x58>
		}
		
		//finally set cursorBlinkState to false
		cursorBlinkState = !cursorBlinkState;
    27a4:	4a21      	ldr	r2, [pc, #132]	; (282c <blinkCursor+0x100>)
    27a6:	7813      	ldrb	r3, [r2, #0]
    27a8:	2101      	movs	r1, #1
    27aa:	404b      	eors	r3, r1
    27ac:	7013      	strb	r3, [r2, #0]
			setPixel((back_Color_High<<8)|back_Color_Low);
		}
		//set cursorBlinkState to true
		cursorBlinkState = !cursorBlinkState;
	}
}
    27ae:	bc04      	pop	{r2}
    27b0:	4690      	mov	r8, r2
    27b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		setXY(abs(xCharPos-79)*10,yCharPos*20,abs(xCharPos-79)*10+9,yCharPos*20+19);
    27b4:	4b1e      	ldr	r3, [pc, #120]	; (2830 <blinkCursor+0x104>)
    27b6:	7818      	ldrb	r0, [r3, #0]
    27b8:	384f      	subs	r0, #79	; 0x4f
    27ba:	17c3      	asrs	r3, r0, #31
    27bc:	18c0      	adds	r0, r0, r3
    27be:	4058      	eors	r0, r3
    27c0:	0083      	lsls	r3, r0, #2
    27c2:	18c0      	adds	r0, r0, r3
    27c4:	0040      	lsls	r0, r0, #1
    27c6:	b280      	uxth	r0, r0
    27c8:	4b1a      	ldr	r3, [pc, #104]	; (2834 <blinkCursor+0x108>)
    27ca:	7819      	ldrb	r1, [r3, #0]
    27cc:	2314      	movs	r3, #20
    27ce:	4359      	muls	r1, r3
    27d0:	000b      	movs	r3, r1
    27d2:	3313      	adds	r3, #19
    27d4:	b29b      	uxth	r3, r3
    27d6:	0002      	movs	r2, r0
    27d8:	3209      	adds	r2, #9
    27da:	b292      	uxth	r2, r2
    27dc:	4c16      	ldr	r4, [pc, #88]	; (2838 <blinkCursor+0x10c>)
    27de:	47a0      	blx	r4
    27e0:	4c16      	ldr	r4, [pc, #88]	; (283c <blinkCursor+0x110>)
    27e2:	0025      	movs	r5, r4
    27e4:	35c8      	adds	r5, #200	; 0xc8
			setPixel((back_Color_High<<8)|back_Color_Low);
    27e6:	4b16      	ldr	r3, [pc, #88]	; (2840 <blinkCursor+0x114>)
    27e8:	4698      	mov	r8, r3
    27ea:	4f16      	ldr	r7, [pc, #88]	; (2844 <blinkCursor+0x118>)
    27ec:	4e16      	ldr	r6, [pc, #88]	; (2848 <blinkCursor+0x11c>)
    27ee:	e00b      	b.n	2808 <blinkCursor+0xdc>
			setPixel((fore_Color_High<<8)|fore_Color_Low);
    27f0:	4b16      	ldr	r3, [pc, #88]	; (284c <blinkCursor+0x120>)
    27f2:	8818      	ldrh	r0, [r3, #0]
    27f4:	0200      	lsls	r0, r0, #8
    27f6:	4b16      	ldr	r3, [pc, #88]	; (2850 <blinkCursor+0x124>)
    27f8:	881b      	ldrh	r3, [r3, #0]
    27fa:	4318      	orrs	r0, r3
    27fc:	b280      	uxth	r0, r0
    27fe:	4b12      	ldr	r3, [pc, #72]	; (2848 <blinkCursor+0x11c>)
    2800:	4798      	blx	r3
    2802:	3401      	adds	r4, #1
		for(uint16_t i = 0 ; i < 200 ; i++)
    2804:	42ac      	cmp	r4, r5
    2806:	d00a      	beq.n	281e <blinkCursor+0xf2>
			if((cursorBuffer[i] == 0xFF))
    2808:	7823      	ldrb	r3, [r4, #0]
    280a:	2bff      	cmp	r3, #255	; 0xff
    280c:	d0f0      	beq.n	27f0 <blinkCursor+0xc4>
			setPixel((back_Color_High<<8)|back_Color_Low);
    280e:	4643      	mov	r3, r8
    2810:	8818      	ldrh	r0, [r3, #0]
    2812:	0200      	lsls	r0, r0, #8
    2814:	883b      	ldrh	r3, [r7, #0]
    2816:	4318      	orrs	r0, r3
    2818:	b280      	uxth	r0, r0
    281a:	47b0      	blx	r6
    281c:	e7f1      	b.n	2802 <blinkCursor+0xd6>
		cursorBlinkState = !cursorBlinkState;
    281e:	4a03      	ldr	r2, [pc, #12]	; (282c <blinkCursor+0x100>)
    2820:	7813      	ldrb	r3, [r2, #0]
    2822:	2101      	movs	r1, #1
    2824:	404b      	eors	r3, r1
    2826:	7013      	strb	r3, [r2, #0]
}
    2828:	e7c1      	b.n	27ae <blinkCursor+0x82>
    282a:	46c0      	nop			; (mov r8, r8)
    282c:	20000010 	.word	0x20000010
    2830:	20000180 	.word	0x20000180
    2834:	20000181 	.word	0x20000181
    2838:	00002919 	.word	0x00002919
    283c:	200001ec 	.word	0x200001ec
    2840:	200002ba 	.word	0x200002ba
    2844:	200002b4 	.word	0x200002b4
    2848:	00002af9 	.word	0x00002af9
    284c:	200002b6 	.word	0x200002b6
    2850:	200002b8 	.word	0x200002b8

00002854 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    2854:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2856:	094b      	lsrs	r3, r1, #5
    2858:	2407      	movs	r4, #7
    285a:	43a0      	bics	r0, r4
    285c:	4318      	orrs	r0, r3
    285e:	4b05      	ldr	r3, [pc, #20]	; (2874 <setColorRGB+0x20>)
    2860:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2862:	00c9      	lsls	r1, r1, #3
    2864:	23e0      	movs	r3, #224	; 0xe0
    2866:	4019      	ands	r1, r3
    2868:	08d2      	lsrs	r2, r2, #3
    286a:	430a      	orrs	r2, r1
    286c:	4b02      	ldr	r3, [pc, #8]	; (2878 <setColorRGB+0x24>)
    286e:	801a      	strh	r2, [r3, #0]
}
    2870:	bd10      	pop	{r4, pc}
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	200002b6 	.word	0x200002b6
    2878:	200002b8 	.word	0x200002b8

0000287c <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    287c:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    287e:	094b      	lsrs	r3, r1, #5
    2880:	2407      	movs	r4, #7
    2882:	43a0      	bics	r0, r4
    2884:	4318      	orrs	r0, r3
    2886:	4b05      	ldr	r3, [pc, #20]	; (289c <setBackColorRGB+0x20>)
    2888:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    288a:	00c9      	lsls	r1, r1, #3
    288c:	23e0      	movs	r3, #224	; 0xe0
    288e:	4019      	ands	r1, r3
    2890:	08d2      	lsrs	r2, r2, #3
    2892:	430a      	orrs	r2, r1
    2894:	4b02      	ldr	r3, [pc, #8]	; (28a0 <setBackColorRGB+0x24>)
    2896:	801a      	strh	r2, [r3, #0]
}
    2898:	bd10      	pop	{r4, pc}
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	200002ba 	.word	0x200002ba
    28a0:	200002b4 	.word	0x200002b4

000028a4 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    28a4:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    28a6:	4c19      	ldr	r4, [pc, #100]	; (290c <LCD_Fast_Fill+0x68>)
    28a8:	4b19      	ldr	r3, [pc, #100]	; (2910 <LCD_Fast_Fill+0x6c>)
    28aa:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    28ac:	0200      	lsls	r0, r0, #8
    28ae:	4301      	orrs	r1, r0
    28b0:	4b18      	ldr	r3, [pc, #96]	; (2914 <LCD_Fast_Fill+0x70>)
    28b2:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    28b4:	17d3      	asrs	r3, r2, #31
    28b6:	260f      	movs	r6, #15
    28b8:	401e      	ands	r6, r3
    28ba:	18b6      	adds	r6, r6, r2
    28bc:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    28be:	2500      	movs	r5, #0
    28c0:	2e00      	cmp	r6, #0
    28c2:	dd0c      	ble.n	28de <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    28c4:	4c12      	ldr	r4, [pc, #72]	; (2910 <LCD_Fast_Fill+0x6c>)
    28c6:	2180      	movs	r1, #128	; 0x80
    28c8:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    28ca:	4812      	ldr	r0, [pc, #72]	; (2914 <LCD_Fast_Fill+0x70>)
{
    28cc:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    28ce:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    28d0:	6001      	str	r1, [r0, #0]
    28d2:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    28d4:	2b00      	cmp	r3, #0
    28d6:	d1fa      	bne.n	28ce <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    28d8:	3501      	adds	r5, #1
    28da:	42ae      	cmp	r6, r5
    28dc:	d1f6      	bne.n	28cc <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    28de:	0713      	lsls	r3, r2, #28
    28e0:	d013      	beq.n	290a <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    28e2:	17d3      	asrs	r3, r2, #31
    28e4:	0f1b      	lsrs	r3, r3, #28
    28e6:	18d2      	adds	r2, r2, r3
    28e8:	210f      	movs	r1, #15
    28ea:	4011      	ands	r1, r2
    28ec:	1ac9      	subs	r1, r1, r3
    28ee:	1c4b      	adds	r3, r1, #1
    28f0:	2b00      	cmp	r3, #0
    28f2:	dd0a      	ble.n	290a <LCD_Fast_Fill+0x66>
    28f4:	0019      	movs	r1, r3
    28f6:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    28f8:	4c05      	ldr	r4, [pc, #20]	; (2910 <LCD_Fast_Fill+0x6c>)
    28fa:	2280      	movs	r2, #128	; 0x80
    28fc:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    28fe:	4805      	ldr	r0, [pc, #20]	; (2914 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2900:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    2902:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2904:	3301      	adds	r3, #1
    2906:	4299      	cmp	r1, r3
    2908:	d1fa      	bne.n	2900 <LCD_Fast_Fill+0x5c>
	}
}
    290a:	bd70      	pop	{r4, r5, r6, pc}
    290c:	0000ffff 	.word	0x0000ffff
    2910:	41004494 	.word	0x41004494
    2914:	41004498 	.word	0x41004498

00002918 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2918:	b5f0      	push	{r4, r5, r6, r7, lr}
    291a:	b083      	sub	sp, #12
    291c:	000e      	movs	r6, r1
    291e:	9300      	str	r3, [sp, #0]
	
	SwapUint16(x1, y1);
	SwapUint16(x2, y2);
	y1=display_Y_size-y1;
    2920:	4b1c      	ldr	r3, [pc, #112]	; (2994 <setXY+0x7c>)
    2922:	881d      	ldrh	r5, [r3, #0]
    2924:	1a28      	subs	r0, r5, r0
    2926:	b287      	uxth	r7, r0
	y2=display_Y_size-y2;
    2928:	1aad      	subs	r5, r5, r2
    292a:	b2ad      	uxth	r5, r5
	SwapUint16(y1, y2);
	
	
	LCD_Write_COM16(0x2a,0x00);
    292c:	2100      	movs	r1, #0
    292e:	202a      	movs	r0, #42	; 0x2a
    2930:	4c19      	ldr	r4, [pc, #100]	; (2998 <setXY+0x80>)
    2932:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2934:	9601      	str	r6, [sp, #4]
    2936:	0a30      	lsrs	r0, r6, #8
    2938:	4e18      	ldr	r6, [pc, #96]	; (299c <setXY+0x84>)
    293a:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x01);
    293c:	2101      	movs	r1, #1
    293e:	202a      	movs	r0, #42	; 0x2a
    2940:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2942:	466b      	mov	r3, sp
    2944:	7918      	ldrb	r0, [r3, #4]
    2946:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x02);
    2948:	2102      	movs	r1, #2
    294a:	202a      	movs	r0, #42	; 0x2a
    294c:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    294e:	9b00      	ldr	r3, [sp, #0]
    2950:	0a18      	lsrs	r0, r3, #8
    2952:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x03);
    2954:	2103      	movs	r1, #3
    2956:	202a      	movs	r0, #42	; 0x2a
    2958:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    295a:	466b      	mov	r3, sp
    295c:	7818      	ldrb	r0, [r3, #0]
    295e:	47b0      	blx	r6

	LCD_Write_COM16(0x2b,0x00);
    2960:	2100      	movs	r1, #0
    2962:	202b      	movs	r0, #43	; 0x2b
    2964:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2966:	0a28      	lsrs	r0, r5, #8
    2968:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x01);
    296a:	2101      	movs	r1, #1
    296c:	202b      	movs	r0, #43	; 0x2b
    296e:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2970:	b2e8      	uxtb	r0, r5
    2972:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x02);
    2974:	2102      	movs	r1, #2
    2976:	202b      	movs	r0, #43	; 0x2b
    2978:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    297a:	0a38      	lsrs	r0, r7, #8
    297c:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x03);
    297e:	2103      	movs	r1, #3
    2980:	202b      	movs	r0, #43	; 0x2b
    2982:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2984:	b2f8      	uxtb	r0, r7
    2986:	47b0      	blx	r6

	LCD_Write_COM16(0x2c,0x00);
    2988:	2100      	movs	r1, #0
    298a:	202c      	movs	r0, #44	; 0x2c
    298c:	47a0      	blx	r4
}
    298e:	b003      	add	sp, #12
    2990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2992:	46c0      	nop			; (mov r8, r8)
    2994:	2000003e 	.word	0x2000003e
    2998:	00002b9d 	.word	0x00002b9d
    299c:	00002bcd 	.word	0x00002bcd

000029a0 <fillRect>:
{
    29a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29a2:	46ce      	mov	lr, r9
    29a4:	4647      	mov	r7, r8
    29a6:	b580      	push	{r7, lr}
    29a8:	b083      	sub	sp, #12
    29aa:	4681      	mov	r9, r0
    29ac:	4688      	mov	r8, r1
    29ae:	0015      	movs	r5, r2
    29b0:	001c      	movs	r4, r3
	if (x1>x2)
    29b2:	4290      	cmp	r0, r2
    29b4:	dd02      	ble.n	29bc <fillRect+0x1c>
    29b6:	0403      	lsls	r3, r0, #16
	SwapUint16(x1, x2);
    29b8:	4691      	mov	r9, r2
    29ba:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    29bc:	45a0      	cmp	r8, r4
    29be:	dd03      	ble.n	29c8 <fillRect+0x28>
    29c0:	4643      	mov	r3, r8
    29c2:	041b      	lsls	r3, r3, #16
	SwapUint16(y1, y2);
    29c4:	46a0      	mov	r8, r4
    29c6:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    29c8:	2780      	movs	r7, #128	; 0x80
    29ca:	03ff      	lsls	r7, r7, #15
    29cc:	4b12      	ldr	r3, [pc, #72]	; (2a18 <fillRect+0x78>)
    29ce:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    29d0:	b2a3      	uxth	r3, r4
    29d2:	b2aa      	uxth	r2, r5
    29d4:	4641      	mov	r1, r8
    29d6:	4668      	mov	r0, sp
    29d8:	80c1      	strh	r1, [r0, #6]
    29da:	88c1      	ldrh	r1, [r0, #6]
    29dc:	4648      	mov	r0, r9
    29de:	466e      	mov	r6, sp
    29e0:	80f0      	strh	r0, [r6, #6]
    29e2:	88f0      	ldrh	r0, [r6, #6]
    29e4:	4e0d      	ldr	r6, [pc, #52]	; (2a1c <fillRect+0x7c>)
    29e6:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    29e8:	4e0d      	ldr	r6, [pc, #52]	; (2a20 <fillRect+0x80>)
    29ea:	2380      	movs	r3, #128	; 0x80
    29ec:	041b      	lsls	r3, r3, #16
    29ee:	6033      	str	r3, [r6, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    29f0:	464b      	mov	r3, r9
    29f2:	1aed      	subs	r5, r5, r3
    29f4:	3501      	adds	r5, #1
    29f6:	4643      	mov	r3, r8
    29f8:	1ae2      	subs	r2, r4, r3
    29fa:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    29fc:	436a      	muls	r2, r5
    29fe:	4b09      	ldr	r3, [pc, #36]	; (2a24 <fillRect+0x84>)
    2a00:	8819      	ldrh	r1, [r3, #0]
    2a02:	4b09      	ldr	r3, [pc, #36]	; (2a28 <fillRect+0x88>)
    2a04:	8818      	ldrh	r0, [r3, #0]
    2a06:	4b09      	ldr	r3, [pc, #36]	; (2a2c <fillRect+0x8c>)
    2a08:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2a0a:	6037      	str	r7, [r6, #0]
}
    2a0c:	b003      	add	sp, #12
    2a0e:	bc0c      	pop	{r2, r3}
    2a10:	4690      	mov	r8, r2
    2a12:	4699      	mov	r9, r3
    2a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	41004494 	.word	0x41004494
    2a1c:	00002919 	.word	0x00002919
    2a20:	41004498 	.word	0x41004498
    2a24:	200002b8 	.word	0x200002b8
    2a28:	200002b6 	.word	0x200002b6
    2a2c:	000028a5 	.word	0x000028a5

00002a30 <fillRectBackColor>:
{
    2a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a32:	46ce      	mov	lr, r9
    2a34:	4647      	mov	r7, r8
    2a36:	b580      	push	{r7, lr}
    2a38:	b083      	sub	sp, #12
    2a3a:	4681      	mov	r9, r0
    2a3c:	4688      	mov	r8, r1
    2a3e:	0015      	movs	r5, r2
    2a40:	001c      	movs	r4, r3
	if (x1>x2)
    2a42:	4290      	cmp	r0, r2
    2a44:	dd02      	ble.n	2a4c <fillRectBackColor+0x1c>
    2a46:	0403      	lsls	r3, r0, #16
	SwapUint16(x1, x2);
    2a48:	4691      	mov	r9, r2
    2a4a:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    2a4c:	45a0      	cmp	r8, r4
    2a4e:	dd03      	ble.n	2a58 <fillRectBackColor+0x28>
    2a50:	4643      	mov	r3, r8
    2a52:	041b      	lsls	r3, r3, #16
	SwapUint16(y1, y2);
    2a54:	46a0      	mov	r8, r4
    2a56:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    2a58:	2780      	movs	r7, #128	; 0x80
    2a5a:	03ff      	lsls	r7, r7, #15
    2a5c:	4b12      	ldr	r3, [pc, #72]	; (2aa8 <fillRectBackColor+0x78>)
    2a5e:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    2a60:	b2a3      	uxth	r3, r4
    2a62:	b2aa      	uxth	r2, r5
    2a64:	4641      	mov	r1, r8
    2a66:	4668      	mov	r0, sp
    2a68:	80c1      	strh	r1, [r0, #6]
    2a6a:	88c1      	ldrh	r1, [r0, #6]
    2a6c:	4648      	mov	r0, r9
    2a6e:	466e      	mov	r6, sp
    2a70:	80f0      	strh	r0, [r6, #6]
    2a72:	88f0      	ldrh	r0, [r6, #6]
    2a74:	4e0d      	ldr	r6, [pc, #52]	; (2aac <fillRectBackColor+0x7c>)
    2a76:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    2a78:	4e0d      	ldr	r6, [pc, #52]	; (2ab0 <fillRectBackColor+0x80>)
    2a7a:	2380      	movs	r3, #128	; 0x80
    2a7c:	041b      	lsls	r3, r3, #16
    2a7e:	6033      	str	r3, [r6, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2a80:	464b      	mov	r3, r9
    2a82:	1aed      	subs	r5, r5, r3
    2a84:	3501      	adds	r5, #1
    2a86:	4643      	mov	r3, r8
    2a88:	1ae2      	subs	r2, r4, r3
    2a8a:	3201      	adds	r2, #1
	LCD_Fast_Fill(back_Color_High, back_Color_Low,
    2a8c:	436a      	muls	r2, r5
    2a8e:	4b09      	ldr	r3, [pc, #36]	; (2ab4 <fillRectBackColor+0x84>)
    2a90:	8819      	ldrh	r1, [r3, #0]
    2a92:	4b09      	ldr	r3, [pc, #36]	; (2ab8 <fillRectBackColor+0x88>)
    2a94:	8818      	ldrh	r0, [r3, #0]
    2a96:	4b09      	ldr	r3, [pc, #36]	; (2abc <fillRectBackColor+0x8c>)
    2a98:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2a9a:	6037      	str	r7, [r6, #0]
}
    2a9c:	b003      	add	sp, #12
    2a9e:	bc0c      	pop	{r2, r3}
    2aa0:	4690      	mov	r8, r2
    2aa2:	4699      	mov	r9, r3
    2aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aa6:	46c0      	nop			; (mov r8, r8)
    2aa8:	41004494 	.word	0x41004494
    2aac:	00002919 	.word	0x00002919
    2ab0:	41004498 	.word	0x41004498
    2ab4:	200002b4 	.word	0x200002b4
    2ab8:	200002ba 	.word	0x200002ba
    2abc:	000028a5 	.word	0x000028a5

00002ac0 <clrXY>:
{
    2ac0:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2ac2:	4b04      	ldr	r3, [pc, #16]	; (2ad4 <clrXY+0x14>)
    2ac4:	881b      	ldrh	r3, [r3, #0]
    2ac6:	4a04      	ldr	r2, [pc, #16]	; (2ad8 <clrXY+0x18>)
    2ac8:	8812      	ldrh	r2, [r2, #0]
    2aca:	2100      	movs	r1, #0
    2acc:	2000      	movs	r0, #0
    2ace:	4c03      	ldr	r4, [pc, #12]	; (2adc <clrXY+0x1c>)
    2ad0:	47a0      	blx	r4
}
    2ad2:	bd10      	pop	{r4, pc}
    2ad4:	2000003e 	.word	0x2000003e
    2ad8:	2000003c 	.word	0x2000003c
    2adc:	00002919 	.word	0x00002919

00002ae0 <clrScr>:
{
    2ae0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2ae2:	2280      	movs	r2, #128	; 0x80
    2ae4:	03d2      	lsls	r2, r2, #15
    2ae6:	4b02      	ldr	r3, [pc, #8]	; (2af0 <clrScr+0x10>)
    2ae8:	601a      	str	r2, [r3, #0]
	clrXY();
    2aea:	4b02      	ldr	r3, [pc, #8]	; (2af4 <clrScr+0x14>)
    2aec:	4798      	blx	r3
}
    2aee:	bd10      	pop	{r4, pc}
    2af0:	41004494 	.word	0x41004494
    2af4:	00002ac1 	.word	0x00002ac1

00002af8 <setPixel>:

void setPixel(uint16_t color)
{
    2af8:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2afa:	b2c1      	uxtb	r1, r0
    2afc:	0a00      	lsrs	r0, r0, #8
    2afe:	4b01      	ldr	r3, [pc, #4]	; (2b04 <setPixel+0xc>)
    2b00:	4798      	blx	r3
}
    2b02:	bd10      	pop	{r4, pc}
    2b04:	00002bb5 	.word	0x00002bb5

00002b08 <setDrawDirection>:
	setPixel((fore_Color_High<<8)|fore_Color_Low);
	REG_PORT_OUTSET1 = LCD_CS;
}

void setDrawDirection(void)
{
    2b08:	b570      	push	{r4, r5, r6, lr}
	//Following sets the MADCTL register for correct interfacing
	//of the GRAM re:fonts. Information found on page 146 and
	//page 76 of NT35510 datasheet.
	//We will only be using characters from here on out, so
	//leave this as is, do not reinitialize.
	REG_PORT_OUTCLR1 = LCD_CS;
    2b0a:	4b09      	ldr	r3, [pc, #36]	; (2b30 <setDrawDirection+0x28>)
    2b0c:	2580      	movs	r5, #128	; 0x80
    2b0e:	03ed      	lsls	r5, r5, #15
    2b10:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2b12:	2680      	movs	r6, #128	; 0x80
    2b14:	0436      	lsls	r6, r6, #16
    2b16:	601e      	str	r6, [r3, #0]
	LCD_Write_COM16(0x36, 0x00);
    2b18:	2100      	movs	r1, #0
    2b1a:	2036      	movs	r0, #54	; 0x36
    2b1c:	4b05      	ldr	r3, [pc, #20]	; (2b34 <setDrawDirection+0x2c>)
    2b1e:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    2b20:	4c05      	ldr	r4, [pc, #20]	; (2b38 <setDrawDirection+0x30>)
    2b22:	6026      	str	r6, [r4, #0]
	LCD_Write_DATA8(0x80);
    2b24:	2080      	movs	r0, #128	; 0x80
    2b26:	4b05      	ldr	r3, [pc, #20]	; (2b3c <setDrawDirection+0x34>)
    2b28:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2b2a:	6025      	str	r5, [r4, #0]
}
    2b2c:	bd70      	pop	{r4, r5, r6, pc}
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	41004494 	.word	0x41004494
    2b34:	00002b9d 	.word	0x00002b9d
    2b38:	41004498 	.word	0x41004498
    2b3c:	00002bcd 	.word	0x00002bcd

00002b40 <clearScreen>:

void clearScreen(void)
{
    2b40:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2b42:	2300      	movs	r3, #0
    2b44:	4a06      	ldr	r2, [pc, #24]	; (2b60 <clearScreen+0x20>)
    2b46:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2b48:	4a06      	ldr	r2, [pc, #24]	; (2b64 <clearScreen+0x24>)
    2b4a:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2b4c:	4b06      	ldr	r3, [pc, #24]	; (2b68 <clearScreen+0x28>)
    2b4e:	881b      	ldrh	r3, [r3, #0]
    2b50:	4a06      	ldr	r2, [pc, #24]	; (2b6c <clearScreen+0x2c>)
    2b52:	8812      	ldrh	r2, [r2, #0]
    2b54:	2100      	movs	r1, #0
    2b56:	2000      	movs	r0, #0
    2b58:	4c05      	ldr	r4, [pc, #20]	; (2b70 <clearScreen+0x30>)
    2b5a:	47a0      	blx	r4
}
    2b5c:	bd10      	pop	{r4, pc}
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	200002b6 	.word	0x200002b6
    2b64:	200002b8 	.word	0x200002b8
    2b68:	2000003c 	.word	0x2000003c
    2b6c:	2000003e 	.word	0x2000003e
    2b70:	000029a1 	.word	0x000029a1

00002b74 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2b74:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2b76:	4c06      	ldr	r4, [pc, #24]	; (2b90 <LCD_Write_Bus+0x1c>)
    2b78:	4b06      	ldr	r3, [pc, #24]	; (2b94 <LCD_Write_Bus+0x20>)
    2b7a:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2b7c:	0200      	lsls	r0, r0, #8
    2b7e:	4301      	orrs	r1, r0
    2b80:	4b05      	ldr	r3, [pc, #20]	; (2b98 <LCD_Write_Bus+0x24>)
    2b82:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2b84:	2280      	movs	r2, #128	; 0x80
    2b86:	0292      	lsls	r2, r2, #10
    2b88:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2b8a:	601a      	str	r2, [r3, #0]
}
    2b8c:	bd10      	pop	{r4, pc}
    2b8e:	46c0      	nop			; (mov r8, r8)
    2b90:	41004494 	.word	0x41004494
    2b94:	0000ffff 	.word	0x0000ffff
    2b98:	41004498 	.word	0x41004498

00002b9c <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2b9c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2b9e:	2280      	movs	r2, #128	; 0x80
    2ba0:	0412      	lsls	r2, r2, #16
    2ba2:	4b02      	ldr	r3, [pc, #8]	; (2bac <LCD_Write_COM16+0x10>)
    2ba4:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2ba6:	4b02      	ldr	r3, [pc, #8]	; (2bb0 <LCD_Write_COM16+0x14>)
    2ba8:	4798      	blx	r3
}
    2baa:	bd10      	pop	{r4, pc}
    2bac:	41004494 	.word	0x41004494
    2bb0:	00002b75 	.word	0x00002b75

00002bb4 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2bb4:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2bb6:	2280      	movs	r2, #128	; 0x80
    2bb8:	0412      	lsls	r2, r2, #16
    2bba:	4b02      	ldr	r3, [pc, #8]	; (2bc4 <LCD_Write_DATA16+0x10>)
    2bbc:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2bbe:	4b02      	ldr	r3, [pc, #8]	; (2bc8 <LCD_Write_DATA16+0x14>)
    2bc0:	4798      	blx	r3
}
    2bc2:	bd10      	pop	{r4, pc}
    2bc4:	41004498 	.word	0x41004498
    2bc8:	00002b75 	.word	0x00002b75

00002bcc <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2bcc:	b510      	push	{r4, lr}
    2bce:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2bd0:	2280      	movs	r2, #128	; 0x80
    2bd2:	0412      	lsls	r2, r2, #16
    2bd4:	4b02      	ldr	r3, [pc, #8]	; (2be0 <LCD_Write_DATA8+0x14>)
    2bd6:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2bd8:	2000      	movs	r0, #0
    2bda:	4b02      	ldr	r3, [pc, #8]	; (2be4 <LCD_Write_DATA8+0x18>)
    2bdc:	4798      	blx	r3
}
    2bde:	bd10      	pop	{r4, pc}
    2be0:	41004498 	.word	0x41004498
    2be4:	00002b75 	.word	0x00002b75

00002be8 <InitLCD>:
{
    2be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bea:	46c6      	mov	lr, r8
    2bec:	b500      	push	{lr}
    2bee:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2bf0:	4b80      	ldr	r3, [pc, #512]	; (2df4 <InitLCD+0x20c>)
    2bf2:	4f81      	ldr	r7, [pc, #516]	; (2df8 <InitLCD+0x210>)
    2bf4:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2bf6:	2580      	movs	r5, #128	; 0x80
    2bf8:	05ed      	lsls	r5, r5, #23
    2bfa:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2bfc:	2680      	movs	r6, #128	; 0x80
    2bfe:	03f6      	lsls	r6, r6, #15
    2c00:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2c02:	2080      	movs	r0, #128	; 0x80
    2c04:	0280      	lsls	r0, r0, #10
    2c06:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2c08:	2180      	movs	r1, #128	; 0x80
    2c0a:	0409      	lsls	r1, r1, #16
    2c0c:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2c0e:	2280      	movs	r2, #128	; 0x80
    2c10:	0252      	lsls	r2, r2, #9
    2c12:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2c14:	4c79      	ldr	r4, [pc, #484]	; (2dfc <InitLCD+0x214>)
    2c16:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2c18:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2c1a:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2c1c:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2c1e:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2c20:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2c22:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2c24:	4f76      	ldr	r7, [pc, #472]	; (2e00 <InitLCD+0x218>)
    2c26:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2c28:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    2c2a:	2005      	movs	r0, #5
    2c2c:	4b75      	ldr	r3, [pc, #468]	; (2e04 <InitLCD+0x21c>)
    2c2e:	4698      	mov	r8, r3
    2c30:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2c32:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2c34:	2005      	movs	r0, #5
    2c36:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    2c38:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2c3a:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    2c3c:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2c3e:	4b6f      	ldr	r3, [pc, #444]	; (2dfc <InitLCD+0x214>)
    2c40:	4698      	mov	r8, r3
    2c42:	2580      	movs	r5, #128	; 0x80
    2c44:	042d      	lsls	r5, r5, #16
    2c46:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    2c48:	4e6f      	ldr	r6, [pc, #444]	; (2e08 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    2c4a:	4643      	mov	r3, r8
    2c4c:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2c4e:	5da1      	ldrb	r1, [r4, r6]
    2c50:	4b6e      	ldr	r3, [pc, #440]	; (2e0c <InitLCD+0x224>)
    2c52:	5ce0      	ldrb	r0, [r4, r3]
    2c54:	4b6e      	ldr	r3, [pc, #440]	; (2e10 <InitLCD+0x228>)
    2c56:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2c58:	4b69      	ldr	r3, [pc, #420]	; (2e00 <InitLCD+0x218>)
    2c5a:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2c5c:	4b6d      	ldr	r3, [pc, #436]	; (2e14 <InitLCD+0x22c>)
    2c5e:	5ce0      	ldrb	r0, [r4, r3]
    2c60:	4b6d      	ldr	r3, [pc, #436]	; (2e18 <InitLCD+0x230>)
    2c62:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2c64:	3401      	adds	r4, #1
    2c66:	2c46      	cmp	r4, #70	; 0x46
    2c68:	d1ef      	bne.n	2c4a <InitLCD+0x62>
    2c6a:	23d1      	movs	r3, #209	; 0xd1
    2c6c:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2c6e:	4d68      	ldr	r5, [pc, #416]	; (2e10 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    2c70:	4f69      	ldr	r7, [pc, #420]	; (2e18 <InitLCD+0x230>)
    2c72:	4c6a      	ldr	r4, [pc, #424]	; (2e1c <InitLCD+0x234>)
    2c74:	0026      	movs	r6, r4
    2c76:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    2c78:	2100      	movs	r1, #0
    2c7a:	9801      	ldr	r0, [sp, #4]
    2c7c:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2c7e:	7820      	ldrb	r0, [r4, #0]
    2c80:	47b8      	blx	r7
    2c82:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2c84:	42a6      	cmp	r6, r4
    2c86:	d1f7      	bne.n	2c78 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    2c88:	9b01      	ldr	r3, [sp, #4]
    2c8a:	3301      	adds	r3, #1
    2c8c:	b2db      	uxtb	r3, r3
    2c8e:	9301      	str	r3, [sp, #4]
    2c90:	2bd6      	cmp	r3, #214	; 0xd6
    2c92:	d1ee      	bne.n	2c72 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2c94:	2100      	movs	r1, #0
    2c96:	20f0      	movs	r0, #240	; 0xf0
    2c98:	4c5d      	ldr	r4, [pc, #372]	; (2e10 <InitLCD+0x228>)
    2c9a:	47a0      	blx	r4
    2c9c:	2055      	movs	r0, #85	; 0x55
    2c9e:	4d5e      	ldr	r5, [pc, #376]	; (2e18 <InitLCD+0x230>)
    2ca0:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    2ca2:	2101      	movs	r1, #1
    2ca4:	20f0      	movs	r0, #240	; 0xf0
    2ca6:	47a0      	blx	r4
    2ca8:	20aa      	movs	r0, #170	; 0xaa
    2caa:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    2cac:	2102      	movs	r1, #2
    2cae:	20f0      	movs	r0, #240	; 0xf0
    2cb0:	47a0      	blx	r4
    2cb2:	2052      	movs	r0, #82	; 0x52
    2cb4:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    2cb6:	2103      	movs	r1, #3
    2cb8:	20f0      	movs	r0, #240	; 0xf0
    2cba:	47a0      	blx	r4
    2cbc:	2008      	movs	r0, #8
    2cbe:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    2cc0:	2104      	movs	r1, #4
    2cc2:	20f0      	movs	r0, #240	; 0xf0
    2cc4:	47a0      	blx	r4
    2cc6:	2000      	movs	r0, #0
    2cc8:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    2cca:	2100      	movs	r1, #0
    2ccc:	20b1      	movs	r0, #177	; 0xb1
    2cce:	47a0      	blx	r4
    2cd0:	20cc      	movs	r0, #204	; 0xcc
    2cd2:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    2cd4:	2101      	movs	r1, #1
    2cd6:	20b1      	movs	r0, #177	; 0xb1
    2cd8:	47a0      	blx	r4
    2cda:	2000      	movs	r0, #0
    2cdc:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    2cde:	2100      	movs	r1, #0
    2ce0:	20b5      	movs	r0, #181	; 0xb5
    2ce2:	47a0      	blx	r4
    2ce4:	2050      	movs	r0, #80	; 0x50
    2ce6:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    2ce8:	2100      	movs	r1, #0
    2cea:	20b6      	movs	r0, #182	; 0xb6
    2cec:	47a0      	blx	r4
    2cee:	2005      	movs	r0, #5
    2cf0:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    2cf2:	2100      	movs	r1, #0
    2cf4:	20b7      	movs	r0, #183	; 0xb7
    2cf6:	47a0      	blx	r4
    2cf8:	2070      	movs	r0, #112	; 0x70
    2cfa:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    2cfc:	2101      	movs	r1, #1
    2cfe:	20b7      	movs	r0, #183	; 0xb7
    2d00:	47a0      	blx	r4
    2d02:	2070      	movs	r0, #112	; 0x70
    2d04:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    2d06:	2100      	movs	r1, #0
    2d08:	20b8      	movs	r0, #184	; 0xb8
    2d0a:	47a0      	blx	r4
    2d0c:	2001      	movs	r0, #1
    2d0e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2d10:	2101      	movs	r1, #1
    2d12:	20b8      	movs	r0, #184	; 0xb8
    2d14:	47a0      	blx	r4
    2d16:	2003      	movs	r0, #3
    2d18:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    2d1a:	2102      	movs	r1, #2
    2d1c:	20b8      	movs	r0, #184	; 0xb8
    2d1e:	47a0      	blx	r4
    2d20:	2003      	movs	r0, #3
    2d22:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2d24:	2103      	movs	r1, #3
    2d26:	20b8      	movs	r0, #184	; 0xb8
    2d28:	47a0      	blx	r4
    2d2a:	2003      	movs	r0, #3
    2d2c:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2d2e:	2100      	movs	r1, #0
    2d30:	20bc      	movs	r0, #188	; 0xbc
    2d32:	47a0      	blx	r4
    2d34:	2002      	movs	r0, #2
    2d36:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    2d38:	2101      	movs	r1, #1
    2d3a:	20bc      	movs	r0, #188	; 0xbc
    2d3c:	47a0      	blx	r4
    2d3e:	2000      	movs	r0, #0
    2d40:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2d42:	2102      	movs	r1, #2
    2d44:	20bc      	movs	r0, #188	; 0xbc
    2d46:	47a0      	blx	r4
    2d48:	2000      	movs	r0, #0
    2d4a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    2d4c:	2100      	movs	r1, #0
    2d4e:	20c9      	movs	r0, #201	; 0xc9
    2d50:	47a0      	blx	r4
    2d52:	20d0      	movs	r0, #208	; 0xd0
    2d54:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    2d56:	2101      	movs	r1, #1
    2d58:	20c9      	movs	r0, #201	; 0xc9
    2d5a:	47a0      	blx	r4
    2d5c:	2002      	movs	r0, #2
    2d5e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2d60:	2102      	movs	r1, #2
    2d62:	20c9      	movs	r0, #201	; 0xc9
    2d64:	47a0      	blx	r4
    2d66:	2050      	movs	r0, #80	; 0x50
    2d68:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    2d6a:	2103      	movs	r1, #3
    2d6c:	20c9      	movs	r0, #201	; 0xc9
    2d6e:	47a0      	blx	r4
    2d70:	2050      	movs	r0, #80	; 0x50
    2d72:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2d74:	2104      	movs	r1, #4
    2d76:	20c9      	movs	r0, #201	; 0xc9
    2d78:	47a0      	blx	r4
    2d7a:	2050      	movs	r0, #80	; 0x50
    2d7c:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2d7e:	2100      	movs	r1, #0
    2d80:	2035      	movs	r0, #53	; 0x35
    2d82:	47a0      	blx	r4
    2d84:	2000      	movs	r0, #0
    2d86:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    2d88:	2100      	movs	r1, #0
    2d8a:	203a      	movs	r0, #58	; 0x3a
    2d8c:	47a0      	blx	r4
    2d8e:	2055      	movs	r0, #85	; 0x55
    2d90:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0x00);
    2d92:	2100      	movs	r1, #0
    2d94:	2036      	movs	r0, #54	; 0x36
    2d96:	47a0      	blx	r4
    2d98:	2000      	movs	r0, #0
    2d9a:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    2d9c:	2100      	movs	r1, #0
    2d9e:	2011      	movs	r0, #17
    2da0:	47a0      	blx	r4
  	delay_ms(100);
    2da2:	2064      	movs	r0, #100	; 0x64
    2da4:	4e17      	ldr	r6, [pc, #92]	; (2e04 <InitLCD+0x21c>)
    2da6:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    2da8:	2100      	movs	r1, #0
    2daa:	2029      	movs	r0, #41	; 0x29
    2dac:	47a0      	blx	r4
   	delay_ms(100);
    2dae:	2064      	movs	r0, #100	; 0x64
    2db0:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    2db2:	2100      	movs	r1, #0
    2db4:	2051      	movs	r0, #81	; 0x51
    2db6:	47a0      	blx	r4
    2db8:	20ff      	movs	r0, #255	; 0xff
    2dba:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    2dbc:	2280      	movs	r2, #128	; 0x80
    2dbe:	03d2      	lsls	r2, r2, #15
    2dc0:	4b0f      	ldr	r3, [pc, #60]	; (2e00 <InitLCD+0x218>)
    2dc2:	601a      	str	r2, [r3, #0]
	clrScr();
    2dc4:	4b16      	ldr	r3, [pc, #88]	; (2e20 <InitLCD+0x238>)
    2dc6:	4798      	blx	r3
	setColorRGB(0,0,0);
    2dc8:	2200      	movs	r2, #0
    2dca:	2100      	movs	r1, #0
    2dcc:	2000      	movs	r0, #0
    2dce:	4b15      	ldr	r3, [pc, #84]	; (2e24 <InitLCD+0x23c>)
    2dd0:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    2dd2:	2200      	movs	r2, #0
    2dd4:	2100      	movs	r1, #0
    2dd6:	2000      	movs	r0, #0
    2dd8:	4b13      	ldr	r3, [pc, #76]	; (2e28 <InitLCD+0x240>)
    2dda:	4798      	blx	r3
	fillRect(0,0,799,489);
    2ddc:	23ea      	movs	r3, #234	; 0xea
    2dde:	33ff      	adds	r3, #255	; 0xff
    2de0:	4a12      	ldr	r2, [pc, #72]	; (2e2c <InitLCD+0x244>)
    2de2:	2100      	movs	r1, #0
    2de4:	2000      	movs	r0, #0
    2de6:	4c12      	ldr	r4, [pc, #72]	; (2e30 <InitLCD+0x248>)
    2de8:	47a0      	blx	r4
}
    2dea:	b002      	add	sp, #8
    2dec:	bc04      	pop	{r2}
    2dee:	4690      	mov	r8, r2
    2df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	41004488 	.word	0x41004488
    2df8:	0000ffff 	.word	0x0000ffff
    2dfc:	41004494 	.word	0x41004494
    2e00:	41004498 	.word	0x41004498
    2e04:	00000409 	.word	0x00000409
    2e08:	000064b0 	.word	0x000064b0
    2e0c:	00006420 	.word	0x00006420
    2e10:	00002b9d 	.word	0x00002b9d
    2e14:	00006468 	.word	0x00006468
    2e18:	00002bcd 	.word	0x00002bcd
    2e1c:	000063ec 	.word	0x000063ec
    2e20:	00002ae1 	.word	0x00002ae1
    2e24:	00002855 	.word	0x00002855
    2e28:	0000287d 	.word	0x0000287d
    2e2c:	0000031f 	.word	0x0000031f
    2e30:	000029a1 	.word	0x000029a1

00002e34 <SysTick_Handler>:

void SysTick_Handler(void)
{

	
	ul_tickcount++;
    2e34:	4b06      	ldr	r3, [pc, #24]	; (2e50 <SysTick_Handler+0x1c>)
    2e36:	881b      	ldrh	r3, [r3, #0]
    2e38:	3301      	adds	r3, #1
    2e3a:	b29b      	uxth	r3, r3
			
	if(ul_tickcount == (12000-1))
    2e3c:	4a05      	ldr	r2, [pc, #20]	; (2e54 <SysTick_Handler+0x20>)
    2e3e:	4293      	cmp	r3, r2
    2e40:	d002      	beq.n	2e48 <SysTick_Handler+0x14>
	ul_tickcount++;
    2e42:	4a03      	ldr	r2, [pc, #12]	; (2e50 <SysTick_Handler+0x1c>)
    2e44:	8013      	strh	r3, [r2, #0]
	{
		ul_tickcount = 0;
	}
			

}
    2e46:	4770      	bx	lr
		ul_tickcount = 0;
    2e48:	2200      	movs	r2, #0
    2e4a:	4b01      	ldr	r3, [pc, #4]	; (2e50 <SysTick_Handler+0x1c>)
    2e4c:	801a      	strh	r2, [r3, #0]
}
    2e4e:	e7fa      	b.n	2e46 <SysTick_Handler+0x12>
    2e50:	20000182 	.word	0x20000182
    2e54:	00002edf 	.word	0x00002edf

00002e58 <conf_systick>:

void conf_systick(void)
{
    2e58:	b510      	push	{r4, lr}
	//system_core_clk=48Mhz / 1000=48kHz systic clk if 48Mhz  is used
	SysTick_Config(SystemCoreClock/1000);
    2e5a:	4b0e      	ldr	r3, [pc, #56]	; (2e94 <conf_systick+0x3c>)
    2e5c:	6818      	ldr	r0, [r3, #0]
    2e5e:	21fa      	movs	r1, #250	; 0xfa
    2e60:	0089      	lsls	r1, r1, #2
    2e62:	4b0d      	ldr	r3, [pc, #52]	; (2e98 <conf_systick+0x40>)
    2e64:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    2e66:	3801      	subs	r0, #1
    2e68:	4b0c      	ldr	r3, [pc, #48]	; (2e9c <conf_systick+0x44>)
    2e6a:	4298      	cmp	r0, r3
    2e6c:	d80d      	bhi.n	2e8a <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    2e6e:	4a0c      	ldr	r2, [pc, #48]	; (2ea0 <conf_systick+0x48>)
    2e70:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    2e72:	480c      	ldr	r0, [pc, #48]	; (2ea4 <conf_systick+0x4c>)
    2e74:	6a03      	ldr	r3, [r0, #32]
    2e76:	021b      	lsls	r3, r3, #8
    2e78:	0a1b      	lsrs	r3, r3, #8
    2e7a:	21c0      	movs	r1, #192	; 0xc0
    2e7c:	0609      	lsls	r1, r1, #24
    2e7e:	430b      	orrs	r3, r1
    2e80:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    2e82:	2300      	movs	r3, #0
    2e84:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    2e86:	3307      	adds	r3, #7
    2e88:	6013      	str	r3, [r2, #0]
    2e8a:	2280      	movs	r2, #128	; 0x80
    2e8c:	0612      	lsls	r2, r2, #24
    2e8e:	4b06      	ldr	r3, [pc, #24]	; (2ea8 <conf_systick+0x50>)
    2e90:	601a      	str	r2, [r3, #0]
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}
    2e92:	bd10      	pop	{r4, pc}
    2e94:	2000000c 	.word	0x2000000c
    2e98:	00003101 	.word	0x00003101
    2e9c:	00ffffff 	.word	0x00ffffff
    2ea0:	e000e010 	.word	0xe000e010
    2ea4:	e000ed00 	.word	0xe000ed00
    2ea8:	e000e100 	.word	0xe000e100

00002eac <configure_usart_USB>:

/**************************SERCOM STUFF*******************************/
void configure_usart_USB(void)
{
    2eac:	b530      	push	{r4, r5, lr}
    2eae:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    2eb0:	2380      	movs	r3, #128	; 0x80
    2eb2:	05db      	lsls	r3, r3, #23
    2eb4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2eb6:	2300      	movs	r3, #0
    2eb8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2eba:	22ff      	movs	r2, #255	; 0xff
    2ebc:	4669      	mov	r1, sp
    2ebe:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2ec0:	2200      	movs	r2, #0
    2ec2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2ec4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    2ec6:	2196      	movs	r1, #150	; 0x96
    2ec8:	0189      	lsls	r1, r1, #6
    2eca:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    2ecc:	2101      	movs	r1, #1
    2ece:	2024      	movs	r0, #36	; 0x24
    2ed0:	466c      	mov	r4, sp
    2ed2:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    2ed4:	3001      	adds	r0, #1
    2ed6:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    2ed8:	3125      	adds	r1, #37	; 0x25
    2eda:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    2edc:	3101      	adds	r1, #1
    2ede:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    2ee0:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    2ee2:	3105      	adds	r1, #5
    2ee4:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2ee6:	3101      	adds	r1, #1
    2ee8:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2eea:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2eec:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    2eee:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    2ef0:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    2ef2:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    2ef4:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    2ef6:	2313      	movs	r3, #19
    2ef8:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    2efa:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart_USB;
	usart_get_config_defaults(&config_usart_USB);

		config_usart_USB.baudrate    = 9600;
		config_usart_USB.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2efc:	2380      	movs	r3, #128	; 0x80
    2efe:	035b      	lsls	r3, r3, #13
    2f00:	9303      	str	r3, [sp, #12]
		config_usart_USB.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2f02:	4b12      	ldr	r3, [pc, #72]	; (2f4c <configure_usart_USB+0xa0>)
    2f04:	930c      	str	r3, [sp, #48]	; 0x30
		config_usart_USB.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2f06:	4b12      	ldr	r3, [pc, #72]	; (2f50 <configure_usart_USB+0xa4>)
    2f08:	930d      	str	r3, [sp, #52]	; 0x34
		config_usart_USB.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2f0a:	2301      	movs	r3, #1
    2f0c:	425b      	negs	r3, r3
    2f0e:	930e      	str	r3, [sp, #56]	; 0x38
		config_usart_USB.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2f10:	930f      	str	r3, [sp, #60]	; 0x3c
		while (usart_init(&usart_USB,
    2f12:	4d10      	ldr	r5, [pc, #64]	; (2f54 <configure_usart_USB+0xa8>)
    2f14:	4c10      	ldr	r4, [pc, #64]	; (2f58 <configure_usart_USB+0xac>)
    2f16:	466a      	mov	r2, sp
    2f18:	4910      	ldr	r1, [pc, #64]	; (2f5c <configure_usart_USB+0xb0>)
    2f1a:	0028      	movs	r0, r5
    2f1c:	47a0      	blx	r4
    2f1e:	2800      	cmp	r0, #0
    2f20:	d1f9      	bne.n	2f16 <configure_usart_USB+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f22:	4d0c      	ldr	r5, [pc, #48]	; (2f54 <configure_usart_USB+0xa8>)
    2f24:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2f26:	0020      	movs	r0, r4
    2f28:	4b0d      	ldr	r3, [pc, #52]	; (2f60 <configure_usart_USB+0xb4>)
    2f2a:	4798      	blx	r3
    2f2c:	231f      	movs	r3, #31
    2f2e:	4018      	ands	r0, r3
    2f30:	3b1e      	subs	r3, #30
    2f32:	4083      	lsls	r3, r0
    2f34:	4a0b      	ldr	r2, [pc, #44]	; (2f64 <configure_usart_USB+0xb8>)
    2f36:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f38:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2f3a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	d1fc      	bne.n	2f3a <configure_usart_USB+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2f40:	6823      	ldr	r3, [r4, #0]
    2f42:	2202      	movs	r2, #2
    2f44:	4313      	orrs	r3, r2
    2f46:	6023      	str	r3, [r4, #0]
		EDBG_CDC_MODULE, &config_usart_USB) != STATUS_OK) {
		}

	usart_enable(&usart_USB);
}
    2f48:	b011      	add	sp, #68	; 0x44
    2f4a:	bd30      	pop	{r4, r5, pc}
    2f4c:	00160002 	.word	0x00160002
    2f50:	00170002 	.word	0x00170002
    2f54:	200002bc 	.word	0x200002bc
    2f58:	00000e75 	.word	0x00000e75
    2f5c:	42001400 	.word	0x42001400
    2f60:	00000de5 	.word	0x00000de5
    2f64:	e000e100 	.word	0xe000e100

00002f68 <configure_adc>:

void configure_adc(void)
{
    2f68:	b510      	push	{r4, lr}
    2f6a:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    2f6c:	4668      	mov	r0, sp
    2f6e:	4b11      	ldr	r3, [pc, #68]	; (2fb4 <configure_adc+0x4c>)
    2f70:	4798      	blx	r3
	config_adc.positive_input = ADC_POSITIVE_INPUT_DAC;
    2f72:	231c      	movs	r3, #28
    2f74:	466a      	mov	r2, sp
    2f76:	7313      	strb	r3, [r2, #12]
	adc_init(&adc_instance, ADC, &config_adc);
    2f78:	4c0f      	ldr	r4, [pc, #60]	; (2fb8 <configure_adc+0x50>)
    2f7a:	4910      	ldr	r1, [pc, #64]	; (2fbc <configure_adc+0x54>)
    2f7c:	0020      	movs	r0, r4
    2f7e:	4b10      	ldr	r3, [pc, #64]	; (2fc0 <configure_adc+0x58>)
    2f80:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2f82:	6822      	ldr	r2, [r4, #0]
    2f84:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2f86:	b25b      	sxtb	r3, r3
    2f88:	2b00      	cmp	r3, #0
    2f8a:	dbfb      	blt.n	2f84 <configure_adc+0x1c>
    2f8c:	2180      	movs	r1, #128	; 0x80
    2f8e:	0409      	lsls	r1, r1, #16
    2f90:	4b0c      	ldr	r3, [pc, #48]	; (2fc4 <configure_adc+0x5c>)
    2f92:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2f94:	230f      	movs	r3, #15
    2f96:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2f98:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2f9a:	7813      	ldrb	r3, [r2, #0]
    2f9c:	2102      	movs	r1, #2
    2f9e:	430b      	orrs	r3, r1
    2fa0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    2fa2:	4b05      	ldr	r3, [pc, #20]	; (2fb8 <configure_adc+0x50>)
    2fa4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2fa6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2fa8:	b25b      	sxtb	r3, r3
    2faa:	2b00      	cmp	r3, #0
    2fac:	dbfb      	blt.n	2fa6 <configure_adc+0x3e>
	adc_enable(&adc_instance);
}
    2fae:	b00c      	add	sp, #48	; 0x30
    2fb0:	bd10      	pop	{r4, pc}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	000004dd 	.word	0x000004dd
    2fb8:	200002f0 	.word	0x200002f0
    2fbc:	42004000 	.word	0x42004000
    2fc0:	00000521 	.word	0x00000521
    2fc4:	e000e100 	.word	0xe000e100

00002fc8 <setupBoard>:


void setupBoard(void)
{
    2fc8:	b570      	push	{r4, r5, r6, lr}
	uint16_t adcResult;
	
	configure_adc();
    2fca:	4b29      	ldr	r3, [pc, #164]	; (3070 <setupBoard+0xa8>)
    2fcc:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2fce:	4b29      	ldr	r3, [pc, #164]	; (3074 <setupBoard+0xac>)
    2fd0:	6819      	ldr	r1, [r3, #0]
    2fd2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2fd4:	b25b      	sxtb	r3, r3
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	dbfb      	blt.n	2fd2 <setupBoard+0xa>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2fda:	7b0b      	ldrb	r3, [r1, #12]
    2fdc:	2202      	movs	r2, #2
    2fde:	4313      	orrs	r3, r2
    2fe0:	730b      	strb	r3, [r1, #12]
    2fe2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    2fe4:	b25b      	sxtb	r3, r3
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	dbfb      	blt.n	2fe2 <setupBoard+0x1a>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2fea:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2fec:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2fee:	2402      	movs	r4, #2
    2ff0:	e001      	b.n	2ff6 <setupBoard+0x2e>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2ff2:	4210      	tst	r0, r2
    2ff4:	d10a      	bne.n	300c <setupBoard+0x44>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2ff6:	7e0b      	ldrb	r3, [r1, #24]
    2ff8:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2ffa:	0002      	movs	r2, r0
    2ffc:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    2ffe:	421d      	tst	r5, r3
    3000:	d000      	beq.n	3004 <setupBoard+0x3c>
		status_flags |= ADC_STATUS_WINDOW;
    3002:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3004:	421c      	tst	r4, r3
    3006:	d0f4      	beq.n	2ff2 <setupBoard+0x2a>
		status_flags |= ADC_STATUS_OVERRUN;
    3008:	432a      	orrs	r2, r5
    300a:	e7f2      	b.n	2ff2 <setupBoard+0x2a>
    300c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    300e:	b25b      	sxtb	r3, r3
    3010:	2b00      	cmp	r3, #0
    3012:	dbfb      	blt.n	300c <setupBoard+0x44>
	*result = adc_module->RESULT.reg;
    3014:	8b4c      	ldrh	r4, [r1, #26]
    3016:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    3018:	2301      	movs	r3, #1
    301a:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    301c:	7e0a      	ldrb	r2, [r1, #24]
    301e:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3020:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    3022:	0750      	lsls	r0, r2, #29
    3024:	d501      	bpl.n	302a <setupBoard+0x62>
		status_flags |= ADC_STATUS_WINDOW;
    3026:	2002      	movs	r0, #2
    3028:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    302a:	0792      	lsls	r2, r2, #30
    302c:	d501      	bpl.n	3032 <setupBoard+0x6a>
		status_flags |= ADC_STATUS_OVERRUN;
    302e:	2204      	movs	r2, #4
    3030:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3032:	075b      	lsls	r3, r3, #29
    3034:	d501      	bpl.n	303a <setupBoard+0x72>
	adc_module->INTFLAG.reg = int_flags;
    3036:	2302      	movs	r3, #2
    3038:	760b      	strb	r3, [r1, #24]
		/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	//interruptInit();
	
	system_init();
    303a:	4b0f      	ldr	r3, [pc, #60]	; (3078 <setupBoard+0xb0>)
    303c:	4798      	blx	r3
	delay_init();
    303e:	4b0f      	ldr	r3, [pc, #60]	; (307c <setupBoard+0xb4>)
    3040:	4798      	blx	r3
	srand(adcResult);
    3042:	0020      	movs	r0, r4
    3044:	4b0e      	ldr	r3, [pc, #56]	; (3080 <setupBoard+0xb8>)
    3046:	4798      	blx	r3
	configure_usart_USB();
    3048:	4b0e      	ldr	r3, [pc, #56]	; (3084 <setupBoard+0xbc>)
    304a:	4798      	blx	r3
	configure_console();
    304c:	4b0e      	ldr	r3, [pc, #56]	; (3088 <setupBoard+0xc0>)
    304e:	4798      	blx	r3
	
	printf("Serial OK 9600 8N1\n\r");
    3050:	480e      	ldr	r0, [pc, #56]	; (308c <setupBoard+0xc4>)
    3052:	4b0f      	ldr	r3, [pc, #60]	; (3090 <setupBoard+0xc8>)
    3054:	4798      	blx	r3
	
	InitLCD();
    3056:	4b0f      	ldr	r3, [pc, #60]	; (3094 <setupBoard+0xcc>)
    3058:	4798      	blx	r3
	splashScreen();
    305a:	4b0f      	ldr	r3, [pc, #60]	; (3098 <setupBoard+0xd0>)
    305c:	4798      	blx	r3
	
	conf_systick();
    305e:	4b0f      	ldr	r3, [pc, #60]	; (309c <setupBoard+0xd4>)
    3060:	4798      	blx	r3
	clearCursorBuffer();
    3062:	4b0f      	ldr	r3, [pc, #60]	; (30a0 <setupBoard+0xd8>)
    3064:	4798      	blx	r3

	moveCursor(0,0);
    3066:	2100      	movs	r1, #0
    3068:	2000      	movs	r0, #0
    306a:	4b0e      	ldr	r3, [pc, #56]	; (30a4 <setupBoard+0xdc>)
    306c:	4798      	blx	r3
}
    306e:	bd70      	pop	{r4, r5, r6, pc}
    3070:	00002f69 	.word	0x00002f69
    3074:	200002f0 	.word	0x200002f0
    3078:	00001b45 	.word	0x00001b45
    307c:	000003c9 	.word	0x000003c9
    3080:	0000330d 	.word	0x0000330d
    3084:	00002ead 	.word	0x00002ead
    3088:	00001d6d 	.word	0x00001d6d
    308c:	000064f8 	.word	0x000064f8
    3090:	000032d9 	.word	0x000032d9
    3094:	00002be9 	.word	0x00002be9
    3098:	000001e5 	.word	0x000001e5
    309c:	00002e59 	.word	0x00002e59
    30a0:	0000234d 	.word	0x0000234d
    30a4:	00002401 	.word	0x00002401

000030a8 <main>:
{
    30a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    30aa:	4b0e      	ldr	r3, [pc, #56]	; (30e4 <main+0x3c>)
    30ac:	4798      	blx	r3
		if(ul_tickcount % 12000 == 0)
    30ae:	4e0e      	ldr	r6, [pc, #56]	; (30e8 <main+0x40>)
    30b0:	4d0e      	ldr	r5, [pc, #56]	; (30ec <main+0x44>)
			blinkCursor();
    30b2:	4f0f      	ldr	r7, [pc, #60]	; (30f0 <main+0x48>)
    30b4:	e014      	b.n	30e0 <main+0x38>
		if(ul_tickcount % 20 == 0)
    30b6:	4b0c      	ldr	r3, [pc, #48]	; (30e8 <main+0x40>)
    30b8:	8818      	ldrh	r0, [r3, #0]
    30ba:	2114      	movs	r1, #20
    30bc:	4b0b      	ldr	r3, [pc, #44]	; (30ec <main+0x44>)
    30be:	4798      	blx	r3
    30c0:	b289      	uxth	r1, r1
    30c2:	2900      	cmp	r1, #0
    30c4:	d008      	beq.n	30d8 <main+0x30>
		__WFI();
    30c6:	bf30      	wfi
		if(ul_tickcount % 12000 == 0)
    30c8:	8830      	ldrh	r0, [r6, #0]
    30ca:	0021      	movs	r1, r4
    30cc:	47a8      	blx	r5
    30ce:	b289      	uxth	r1, r1
    30d0:	2900      	cmp	r1, #0
    30d2:	d1f0      	bne.n	30b6 <main+0xe>
			blinkCursor();
    30d4:	47b8      	blx	r7
    30d6:	e7ee      	b.n	30b6 <main+0xe>
			readKeyboard();
    30d8:	4b06      	ldr	r3, [pc, #24]	; (30f4 <main+0x4c>)
    30da:	4798      	blx	r3
			printKeyboardBuffer();
    30dc:	4b06      	ldr	r3, [pc, #24]	; (30f8 <main+0x50>)
    30de:	4798      	blx	r3
		if(ul_tickcount % 12000 == 0)
    30e0:	4c06      	ldr	r4, [pc, #24]	; (30fc <main+0x54>)
    30e2:	e7f0      	b.n	30c6 <main+0x1e>
    30e4:	00002fc9 	.word	0x00002fc9
    30e8:	20000182 	.word	0x20000182
    30ec:	0000320d 	.word	0x0000320d
    30f0:	0000272d 	.word	0x0000272d
    30f4:	000021a1 	.word	0x000021a1
    30f8:	00002505 	.word	0x00002505
    30fc:	00002ee0 	.word	0x00002ee0

00003100 <__udivsi3>:
    3100:	2200      	movs	r2, #0
    3102:	0843      	lsrs	r3, r0, #1
    3104:	428b      	cmp	r3, r1
    3106:	d374      	bcc.n	31f2 <__udivsi3+0xf2>
    3108:	0903      	lsrs	r3, r0, #4
    310a:	428b      	cmp	r3, r1
    310c:	d35f      	bcc.n	31ce <__udivsi3+0xce>
    310e:	0a03      	lsrs	r3, r0, #8
    3110:	428b      	cmp	r3, r1
    3112:	d344      	bcc.n	319e <__udivsi3+0x9e>
    3114:	0b03      	lsrs	r3, r0, #12
    3116:	428b      	cmp	r3, r1
    3118:	d328      	bcc.n	316c <__udivsi3+0x6c>
    311a:	0c03      	lsrs	r3, r0, #16
    311c:	428b      	cmp	r3, r1
    311e:	d30d      	bcc.n	313c <__udivsi3+0x3c>
    3120:	22ff      	movs	r2, #255	; 0xff
    3122:	0209      	lsls	r1, r1, #8
    3124:	ba12      	rev	r2, r2
    3126:	0c03      	lsrs	r3, r0, #16
    3128:	428b      	cmp	r3, r1
    312a:	d302      	bcc.n	3132 <__udivsi3+0x32>
    312c:	1212      	asrs	r2, r2, #8
    312e:	0209      	lsls	r1, r1, #8
    3130:	d065      	beq.n	31fe <__udivsi3+0xfe>
    3132:	0b03      	lsrs	r3, r0, #12
    3134:	428b      	cmp	r3, r1
    3136:	d319      	bcc.n	316c <__udivsi3+0x6c>
    3138:	e000      	b.n	313c <__udivsi3+0x3c>
    313a:	0a09      	lsrs	r1, r1, #8
    313c:	0bc3      	lsrs	r3, r0, #15
    313e:	428b      	cmp	r3, r1
    3140:	d301      	bcc.n	3146 <__udivsi3+0x46>
    3142:	03cb      	lsls	r3, r1, #15
    3144:	1ac0      	subs	r0, r0, r3
    3146:	4152      	adcs	r2, r2
    3148:	0b83      	lsrs	r3, r0, #14
    314a:	428b      	cmp	r3, r1
    314c:	d301      	bcc.n	3152 <__udivsi3+0x52>
    314e:	038b      	lsls	r3, r1, #14
    3150:	1ac0      	subs	r0, r0, r3
    3152:	4152      	adcs	r2, r2
    3154:	0b43      	lsrs	r3, r0, #13
    3156:	428b      	cmp	r3, r1
    3158:	d301      	bcc.n	315e <__udivsi3+0x5e>
    315a:	034b      	lsls	r3, r1, #13
    315c:	1ac0      	subs	r0, r0, r3
    315e:	4152      	adcs	r2, r2
    3160:	0b03      	lsrs	r3, r0, #12
    3162:	428b      	cmp	r3, r1
    3164:	d301      	bcc.n	316a <__udivsi3+0x6a>
    3166:	030b      	lsls	r3, r1, #12
    3168:	1ac0      	subs	r0, r0, r3
    316a:	4152      	adcs	r2, r2
    316c:	0ac3      	lsrs	r3, r0, #11
    316e:	428b      	cmp	r3, r1
    3170:	d301      	bcc.n	3176 <__udivsi3+0x76>
    3172:	02cb      	lsls	r3, r1, #11
    3174:	1ac0      	subs	r0, r0, r3
    3176:	4152      	adcs	r2, r2
    3178:	0a83      	lsrs	r3, r0, #10
    317a:	428b      	cmp	r3, r1
    317c:	d301      	bcc.n	3182 <__udivsi3+0x82>
    317e:	028b      	lsls	r3, r1, #10
    3180:	1ac0      	subs	r0, r0, r3
    3182:	4152      	adcs	r2, r2
    3184:	0a43      	lsrs	r3, r0, #9
    3186:	428b      	cmp	r3, r1
    3188:	d301      	bcc.n	318e <__udivsi3+0x8e>
    318a:	024b      	lsls	r3, r1, #9
    318c:	1ac0      	subs	r0, r0, r3
    318e:	4152      	adcs	r2, r2
    3190:	0a03      	lsrs	r3, r0, #8
    3192:	428b      	cmp	r3, r1
    3194:	d301      	bcc.n	319a <__udivsi3+0x9a>
    3196:	020b      	lsls	r3, r1, #8
    3198:	1ac0      	subs	r0, r0, r3
    319a:	4152      	adcs	r2, r2
    319c:	d2cd      	bcs.n	313a <__udivsi3+0x3a>
    319e:	09c3      	lsrs	r3, r0, #7
    31a0:	428b      	cmp	r3, r1
    31a2:	d301      	bcc.n	31a8 <__udivsi3+0xa8>
    31a4:	01cb      	lsls	r3, r1, #7
    31a6:	1ac0      	subs	r0, r0, r3
    31a8:	4152      	adcs	r2, r2
    31aa:	0983      	lsrs	r3, r0, #6
    31ac:	428b      	cmp	r3, r1
    31ae:	d301      	bcc.n	31b4 <__udivsi3+0xb4>
    31b0:	018b      	lsls	r3, r1, #6
    31b2:	1ac0      	subs	r0, r0, r3
    31b4:	4152      	adcs	r2, r2
    31b6:	0943      	lsrs	r3, r0, #5
    31b8:	428b      	cmp	r3, r1
    31ba:	d301      	bcc.n	31c0 <__udivsi3+0xc0>
    31bc:	014b      	lsls	r3, r1, #5
    31be:	1ac0      	subs	r0, r0, r3
    31c0:	4152      	adcs	r2, r2
    31c2:	0903      	lsrs	r3, r0, #4
    31c4:	428b      	cmp	r3, r1
    31c6:	d301      	bcc.n	31cc <__udivsi3+0xcc>
    31c8:	010b      	lsls	r3, r1, #4
    31ca:	1ac0      	subs	r0, r0, r3
    31cc:	4152      	adcs	r2, r2
    31ce:	08c3      	lsrs	r3, r0, #3
    31d0:	428b      	cmp	r3, r1
    31d2:	d301      	bcc.n	31d8 <__udivsi3+0xd8>
    31d4:	00cb      	lsls	r3, r1, #3
    31d6:	1ac0      	subs	r0, r0, r3
    31d8:	4152      	adcs	r2, r2
    31da:	0883      	lsrs	r3, r0, #2
    31dc:	428b      	cmp	r3, r1
    31de:	d301      	bcc.n	31e4 <__udivsi3+0xe4>
    31e0:	008b      	lsls	r3, r1, #2
    31e2:	1ac0      	subs	r0, r0, r3
    31e4:	4152      	adcs	r2, r2
    31e6:	0843      	lsrs	r3, r0, #1
    31e8:	428b      	cmp	r3, r1
    31ea:	d301      	bcc.n	31f0 <__udivsi3+0xf0>
    31ec:	004b      	lsls	r3, r1, #1
    31ee:	1ac0      	subs	r0, r0, r3
    31f0:	4152      	adcs	r2, r2
    31f2:	1a41      	subs	r1, r0, r1
    31f4:	d200      	bcs.n	31f8 <__udivsi3+0xf8>
    31f6:	4601      	mov	r1, r0
    31f8:	4152      	adcs	r2, r2
    31fa:	4610      	mov	r0, r2
    31fc:	4770      	bx	lr
    31fe:	e7ff      	b.n	3200 <__udivsi3+0x100>
    3200:	b501      	push	{r0, lr}
    3202:	2000      	movs	r0, #0
    3204:	f000 f806 	bl	3214 <__aeabi_idiv0>
    3208:	bd02      	pop	{r1, pc}
    320a:	46c0      	nop			; (mov r8, r8)

0000320c <__aeabi_uidivmod>:
    320c:	2900      	cmp	r1, #0
    320e:	d0f7      	beq.n	3200 <__udivsi3+0x100>
    3210:	e776      	b.n	3100 <__udivsi3>
    3212:	4770      	bx	lr

00003214 <__aeabi_idiv0>:
    3214:	4770      	bx	lr
    3216:	46c0      	nop			; (mov r8, r8)

00003218 <__aeabi_lmul>:
    3218:	b5f0      	push	{r4, r5, r6, r7, lr}
    321a:	46ce      	mov	lr, r9
    321c:	4647      	mov	r7, r8
    321e:	0415      	lsls	r5, r2, #16
    3220:	0c2d      	lsrs	r5, r5, #16
    3222:	002e      	movs	r6, r5
    3224:	b580      	push	{r7, lr}
    3226:	0407      	lsls	r7, r0, #16
    3228:	0c14      	lsrs	r4, r2, #16
    322a:	0c3f      	lsrs	r7, r7, #16
    322c:	4699      	mov	r9, r3
    322e:	0c03      	lsrs	r3, r0, #16
    3230:	437e      	muls	r6, r7
    3232:	435d      	muls	r5, r3
    3234:	4367      	muls	r7, r4
    3236:	4363      	muls	r3, r4
    3238:	197f      	adds	r7, r7, r5
    323a:	0c34      	lsrs	r4, r6, #16
    323c:	19e4      	adds	r4, r4, r7
    323e:	469c      	mov	ip, r3
    3240:	42a5      	cmp	r5, r4
    3242:	d903      	bls.n	324c <__aeabi_lmul+0x34>
    3244:	2380      	movs	r3, #128	; 0x80
    3246:	025b      	lsls	r3, r3, #9
    3248:	4698      	mov	r8, r3
    324a:	44c4      	add	ip, r8
    324c:	464b      	mov	r3, r9
    324e:	4351      	muls	r1, r2
    3250:	4343      	muls	r3, r0
    3252:	0436      	lsls	r6, r6, #16
    3254:	0c36      	lsrs	r6, r6, #16
    3256:	0c25      	lsrs	r5, r4, #16
    3258:	0424      	lsls	r4, r4, #16
    325a:	4465      	add	r5, ip
    325c:	19a4      	adds	r4, r4, r6
    325e:	1859      	adds	r1, r3, r1
    3260:	1949      	adds	r1, r1, r5
    3262:	0020      	movs	r0, r4
    3264:	bc0c      	pop	{r2, r3}
    3266:	4690      	mov	r8, r2
    3268:	4699      	mov	r9, r3
    326a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000326c <__libc_init_array>:
    326c:	b570      	push	{r4, r5, r6, lr}
    326e:	2600      	movs	r6, #0
    3270:	4d0c      	ldr	r5, [pc, #48]	; (32a4 <__libc_init_array+0x38>)
    3272:	4c0d      	ldr	r4, [pc, #52]	; (32a8 <__libc_init_array+0x3c>)
    3274:	1b64      	subs	r4, r4, r5
    3276:	10a4      	asrs	r4, r4, #2
    3278:	42a6      	cmp	r6, r4
    327a:	d109      	bne.n	3290 <__libc_init_array+0x24>
    327c:	2600      	movs	r6, #0
    327e:	f003 f993 	bl	65a8 <_init>
    3282:	4d0a      	ldr	r5, [pc, #40]	; (32ac <__libc_init_array+0x40>)
    3284:	4c0a      	ldr	r4, [pc, #40]	; (32b0 <__libc_init_array+0x44>)
    3286:	1b64      	subs	r4, r4, r5
    3288:	10a4      	asrs	r4, r4, #2
    328a:	42a6      	cmp	r6, r4
    328c:	d105      	bne.n	329a <__libc_init_array+0x2e>
    328e:	bd70      	pop	{r4, r5, r6, pc}
    3290:	00b3      	lsls	r3, r6, #2
    3292:	58eb      	ldr	r3, [r5, r3]
    3294:	4798      	blx	r3
    3296:	3601      	adds	r6, #1
    3298:	e7ee      	b.n	3278 <__libc_init_array+0xc>
    329a:	00b3      	lsls	r3, r6, #2
    329c:	58eb      	ldr	r3, [r5, r3]
    329e:	4798      	blx	r3
    32a0:	3601      	adds	r6, #1
    32a2:	e7f2      	b.n	328a <__libc_init_array+0x1e>
    32a4:	000065b4 	.word	0x000065b4
    32a8:	000065b4 	.word	0x000065b4
    32ac:	000065b4 	.word	0x000065b4
    32b0:	000065b8 	.word	0x000065b8

000032b4 <memcpy>:
    32b4:	2300      	movs	r3, #0
    32b6:	b510      	push	{r4, lr}
    32b8:	429a      	cmp	r2, r3
    32ba:	d100      	bne.n	32be <memcpy+0xa>
    32bc:	bd10      	pop	{r4, pc}
    32be:	5ccc      	ldrb	r4, [r1, r3]
    32c0:	54c4      	strb	r4, [r0, r3]
    32c2:	3301      	adds	r3, #1
    32c4:	e7f8      	b.n	32b8 <memcpy+0x4>

000032c6 <memset>:
    32c6:	0003      	movs	r3, r0
    32c8:	1882      	adds	r2, r0, r2
    32ca:	4293      	cmp	r3, r2
    32cc:	d100      	bne.n	32d0 <memset+0xa>
    32ce:	4770      	bx	lr
    32d0:	7019      	strb	r1, [r3, #0]
    32d2:	3301      	adds	r3, #1
    32d4:	e7f9      	b.n	32ca <memset+0x4>
	...

000032d8 <iprintf>:
    32d8:	b40f      	push	{r0, r1, r2, r3}
    32da:	4b0b      	ldr	r3, [pc, #44]	; (3308 <iprintf+0x30>)
    32dc:	b513      	push	{r0, r1, r4, lr}
    32de:	681c      	ldr	r4, [r3, #0]
    32e0:	2c00      	cmp	r4, #0
    32e2:	d005      	beq.n	32f0 <iprintf+0x18>
    32e4:	69a3      	ldr	r3, [r4, #24]
    32e6:	2b00      	cmp	r3, #0
    32e8:	d102      	bne.n	32f0 <iprintf+0x18>
    32ea:	0020      	movs	r0, r4
    32ec:	f000 fa2e 	bl	374c <__sinit>
    32f0:	ab05      	add	r3, sp, #20
    32f2:	9a04      	ldr	r2, [sp, #16]
    32f4:	68a1      	ldr	r1, [r4, #8]
    32f6:	0020      	movs	r0, r4
    32f8:	9301      	str	r3, [sp, #4]
    32fa:	f000 fc03 	bl	3b04 <_vfiprintf_r>
    32fe:	bc16      	pop	{r1, r2, r4}
    3300:	bc08      	pop	{r3}
    3302:	b004      	add	sp, #16
    3304:	4718      	bx	r3
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	20000040 	.word	0x20000040

0000330c <srand>:
    330c:	4b10      	ldr	r3, [pc, #64]	; (3350 <srand+0x44>)
    330e:	b570      	push	{r4, r5, r6, lr}
    3310:	681c      	ldr	r4, [r3, #0]
    3312:	0005      	movs	r5, r0
    3314:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3316:	2b00      	cmp	r3, #0
    3318:	d115      	bne.n	3346 <srand+0x3a>
    331a:	2018      	movs	r0, #24
    331c:	f000 fb18 	bl	3950 <malloc>
    3320:	4b0c      	ldr	r3, [pc, #48]	; (3354 <srand+0x48>)
    3322:	63a0      	str	r0, [r4, #56]	; 0x38
    3324:	8003      	strh	r3, [r0, #0]
    3326:	4b0c      	ldr	r3, [pc, #48]	; (3358 <srand+0x4c>)
    3328:	2201      	movs	r2, #1
    332a:	8043      	strh	r3, [r0, #2]
    332c:	4b0b      	ldr	r3, [pc, #44]	; (335c <srand+0x50>)
    332e:	8083      	strh	r3, [r0, #4]
    3330:	4b0b      	ldr	r3, [pc, #44]	; (3360 <srand+0x54>)
    3332:	80c3      	strh	r3, [r0, #6]
    3334:	4b0b      	ldr	r3, [pc, #44]	; (3364 <srand+0x58>)
    3336:	8103      	strh	r3, [r0, #8]
    3338:	2305      	movs	r3, #5
    333a:	8143      	strh	r3, [r0, #10]
    333c:	3306      	adds	r3, #6
    333e:	8183      	strh	r3, [r0, #12]
    3340:	2300      	movs	r3, #0
    3342:	6102      	str	r2, [r0, #16]
    3344:	6143      	str	r3, [r0, #20]
    3346:	2200      	movs	r2, #0
    3348:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    334a:	611d      	str	r5, [r3, #16]
    334c:	615a      	str	r2, [r3, #20]
    334e:	bd70      	pop	{r4, r5, r6, pc}
    3350:	20000040 	.word	0x20000040
    3354:	0000330e 	.word	0x0000330e
    3358:	ffffabcd 	.word	0xffffabcd
    335c:	00001234 	.word	0x00001234
    3360:	ffffe66d 	.word	0xffffe66d
    3364:	ffffdeec 	.word	0xffffdeec

00003368 <rand>:
    3368:	4b15      	ldr	r3, [pc, #84]	; (33c0 <rand+0x58>)
    336a:	b510      	push	{r4, lr}
    336c:	681c      	ldr	r4, [r3, #0]
    336e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3370:	2b00      	cmp	r3, #0
    3372:	d115      	bne.n	33a0 <rand+0x38>
    3374:	2018      	movs	r0, #24
    3376:	f000 faeb 	bl	3950 <malloc>
    337a:	4b12      	ldr	r3, [pc, #72]	; (33c4 <rand+0x5c>)
    337c:	63a0      	str	r0, [r4, #56]	; 0x38
    337e:	8003      	strh	r3, [r0, #0]
    3380:	4b11      	ldr	r3, [pc, #68]	; (33c8 <rand+0x60>)
    3382:	2201      	movs	r2, #1
    3384:	8043      	strh	r3, [r0, #2]
    3386:	4b11      	ldr	r3, [pc, #68]	; (33cc <rand+0x64>)
    3388:	8083      	strh	r3, [r0, #4]
    338a:	4b11      	ldr	r3, [pc, #68]	; (33d0 <rand+0x68>)
    338c:	80c3      	strh	r3, [r0, #6]
    338e:	4b11      	ldr	r3, [pc, #68]	; (33d4 <rand+0x6c>)
    3390:	8103      	strh	r3, [r0, #8]
    3392:	2305      	movs	r3, #5
    3394:	8143      	strh	r3, [r0, #10]
    3396:	3306      	adds	r3, #6
    3398:	8183      	strh	r3, [r0, #12]
    339a:	2300      	movs	r3, #0
    339c:	6102      	str	r2, [r0, #16]
    339e:	6143      	str	r3, [r0, #20]
    33a0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    33a2:	4a0d      	ldr	r2, [pc, #52]	; (33d8 <rand+0x70>)
    33a4:	6920      	ldr	r0, [r4, #16]
    33a6:	6961      	ldr	r1, [r4, #20]
    33a8:	4b0c      	ldr	r3, [pc, #48]	; (33dc <rand+0x74>)
    33aa:	f7ff ff35 	bl	3218 <__aeabi_lmul>
    33ae:	2201      	movs	r2, #1
    33b0:	2300      	movs	r3, #0
    33b2:	1880      	adds	r0, r0, r2
    33b4:	4159      	adcs	r1, r3
    33b6:	6120      	str	r0, [r4, #16]
    33b8:	6161      	str	r1, [r4, #20]
    33ba:	0048      	lsls	r0, r1, #1
    33bc:	0840      	lsrs	r0, r0, #1
    33be:	bd10      	pop	{r4, pc}
    33c0:	20000040 	.word	0x20000040
    33c4:	0000330e 	.word	0x0000330e
    33c8:	ffffabcd 	.word	0xffffabcd
    33cc:	00001234 	.word	0x00001234
    33d0:	ffffe66d 	.word	0xffffe66d
    33d4:	ffffdeec 	.word	0xffffdeec
    33d8:	4c957f2d 	.word	0x4c957f2d
    33dc:	5851f42d 	.word	0x5851f42d

000033e0 <setbuf>:
    33e0:	424a      	negs	r2, r1
    33e2:	414a      	adcs	r2, r1
    33e4:	2380      	movs	r3, #128	; 0x80
    33e6:	b510      	push	{r4, lr}
    33e8:	0052      	lsls	r2, r2, #1
    33ea:	00db      	lsls	r3, r3, #3
    33ec:	f000 f802 	bl	33f4 <setvbuf>
    33f0:	bd10      	pop	{r4, pc}
	...

000033f4 <setvbuf>:
    33f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33f6:	001d      	movs	r5, r3
    33f8:	4b4f      	ldr	r3, [pc, #316]	; (3538 <setvbuf+0x144>)
    33fa:	b085      	sub	sp, #20
    33fc:	681e      	ldr	r6, [r3, #0]
    33fe:	0004      	movs	r4, r0
    3400:	000f      	movs	r7, r1
    3402:	9200      	str	r2, [sp, #0]
    3404:	2e00      	cmp	r6, #0
    3406:	d005      	beq.n	3414 <setvbuf+0x20>
    3408:	69b3      	ldr	r3, [r6, #24]
    340a:	2b00      	cmp	r3, #0
    340c:	d102      	bne.n	3414 <setvbuf+0x20>
    340e:	0030      	movs	r0, r6
    3410:	f000 f99c 	bl	374c <__sinit>
    3414:	4b49      	ldr	r3, [pc, #292]	; (353c <setvbuf+0x148>)
    3416:	429c      	cmp	r4, r3
    3418:	d150      	bne.n	34bc <setvbuf+0xc8>
    341a:	6874      	ldr	r4, [r6, #4]
    341c:	9b00      	ldr	r3, [sp, #0]
    341e:	2b02      	cmp	r3, #2
    3420:	d005      	beq.n	342e <setvbuf+0x3a>
    3422:	2b01      	cmp	r3, #1
    3424:	d900      	bls.n	3428 <setvbuf+0x34>
    3426:	e084      	b.n	3532 <setvbuf+0x13e>
    3428:	2d00      	cmp	r5, #0
    342a:	da00      	bge.n	342e <setvbuf+0x3a>
    342c:	e081      	b.n	3532 <setvbuf+0x13e>
    342e:	0021      	movs	r1, r4
    3430:	0030      	movs	r0, r6
    3432:	f000 f91d 	bl	3670 <_fflush_r>
    3436:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3438:	2900      	cmp	r1, #0
    343a:	d008      	beq.n	344e <setvbuf+0x5a>
    343c:	0023      	movs	r3, r4
    343e:	3344      	adds	r3, #68	; 0x44
    3440:	4299      	cmp	r1, r3
    3442:	d002      	beq.n	344a <setvbuf+0x56>
    3444:	0030      	movs	r0, r6
    3446:	f000 fa8d 	bl	3964 <_free_r>
    344a:	2300      	movs	r3, #0
    344c:	6363      	str	r3, [r4, #52]	; 0x34
    344e:	2300      	movs	r3, #0
    3450:	61a3      	str	r3, [r4, #24]
    3452:	6063      	str	r3, [r4, #4]
    3454:	89a3      	ldrh	r3, [r4, #12]
    3456:	061b      	lsls	r3, r3, #24
    3458:	d503      	bpl.n	3462 <setvbuf+0x6e>
    345a:	6921      	ldr	r1, [r4, #16]
    345c:	0030      	movs	r0, r6
    345e:	f000 fa81 	bl	3964 <_free_r>
    3462:	89a3      	ldrh	r3, [r4, #12]
    3464:	4a36      	ldr	r2, [pc, #216]	; (3540 <setvbuf+0x14c>)
    3466:	4013      	ands	r3, r2
    3468:	81a3      	strh	r3, [r4, #12]
    346a:	9b00      	ldr	r3, [sp, #0]
    346c:	2b02      	cmp	r3, #2
    346e:	d05a      	beq.n	3526 <setvbuf+0x132>
    3470:	ab03      	add	r3, sp, #12
    3472:	aa02      	add	r2, sp, #8
    3474:	0021      	movs	r1, r4
    3476:	0030      	movs	r0, r6
    3478:	f000 f9fe 	bl	3878 <__swhatbuf_r>
    347c:	89a3      	ldrh	r3, [r4, #12]
    347e:	4318      	orrs	r0, r3
    3480:	81a0      	strh	r0, [r4, #12]
    3482:	2d00      	cmp	r5, #0
    3484:	d124      	bne.n	34d0 <setvbuf+0xdc>
    3486:	9d02      	ldr	r5, [sp, #8]
    3488:	0028      	movs	r0, r5
    348a:	f000 fa61 	bl	3950 <malloc>
    348e:	9501      	str	r5, [sp, #4]
    3490:	1e07      	subs	r7, r0, #0
    3492:	d142      	bne.n	351a <setvbuf+0x126>
    3494:	9b02      	ldr	r3, [sp, #8]
    3496:	9301      	str	r3, [sp, #4]
    3498:	42ab      	cmp	r3, r5
    349a:	d139      	bne.n	3510 <setvbuf+0x11c>
    349c:	2001      	movs	r0, #1
    349e:	4240      	negs	r0, r0
    34a0:	2302      	movs	r3, #2
    34a2:	89a2      	ldrh	r2, [r4, #12]
    34a4:	4313      	orrs	r3, r2
    34a6:	81a3      	strh	r3, [r4, #12]
    34a8:	2300      	movs	r3, #0
    34aa:	60a3      	str	r3, [r4, #8]
    34ac:	0023      	movs	r3, r4
    34ae:	3347      	adds	r3, #71	; 0x47
    34b0:	6023      	str	r3, [r4, #0]
    34b2:	6123      	str	r3, [r4, #16]
    34b4:	2301      	movs	r3, #1
    34b6:	6163      	str	r3, [r4, #20]
    34b8:	b005      	add	sp, #20
    34ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34bc:	4b21      	ldr	r3, [pc, #132]	; (3544 <setvbuf+0x150>)
    34be:	429c      	cmp	r4, r3
    34c0:	d101      	bne.n	34c6 <setvbuf+0xd2>
    34c2:	68b4      	ldr	r4, [r6, #8]
    34c4:	e7aa      	b.n	341c <setvbuf+0x28>
    34c6:	4b20      	ldr	r3, [pc, #128]	; (3548 <setvbuf+0x154>)
    34c8:	429c      	cmp	r4, r3
    34ca:	d1a7      	bne.n	341c <setvbuf+0x28>
    34cc:	68f4      	ldr	r4, [r6, #12]
    34ce:	e7a5      	b.n	341c <setvbuf+0x28>
    34d0:	2f00      	cmp	r7, #0
    34d2:	d0d9      	beq.n	3488 <setvbuf+0x94>
    34d4:	69b3      	ldr	r3, [r6, #24]
    34d6:	2b00      	cmp	r3, #0
    34d8:	d102      	bne.n	34e0 <setvbuf+0xec>
    34da:	0030      	movs	r0, r6
    34dc:	f000 f936 	bl	374c <__sinit>
    34e0:	9b00      	ldr	r3, [sp, #0]
    34e2:	2b01      	cmp	r3, #1
    34e4:	d103      	bne.n	34ee <setvbuf+0xfa>
    34e6:	89a3      	ldrh	r3, [r4, #12]
    34e8:	9a00      	ldr	r2, [sp, #0]
    34ea:	431a      	orrs	r2, r3
    34ec:	81a2      	strh	r2, [r4, #12]
    34ee:	2008      	movs	r0, #8
    34f0:	89a3      	ldrh	r3, [r4, #12]
    34f2:	6027      	str	r7, [r4, #0]
    34f4:	6127      	str	r7, [r4, #16]
    34f6:	6165      	str	r5, [r4, #20]
    34f8:	4018      	ands	r0, r3
    34fa:	d018      	beq.n	352e <setvbuf+0x13a>
    34fc:	2001      	movs	r0, #1
    34fe:	4018      	ands	r0, r3
    3500:	2300      	movs	r3, #0
    3502:	4298      	cmp	r0, r3
    3504:	d011      	beq.n	352a <setvbuf+0x136>
    3506:	426d      	negs	r5, r5
    3508:	60a3      	str	r3, [r4, #8]
    350a:	61a5      	str	r5, [r4, #24]
    350c:	0018      	movs	r0, r3
    350e:	e7d3      	b.n	34b8 <setvbuf+0xc4>
    3510:	9801      	ldr	r0, [sp, #4]
    3512:	f000 fa1d 	bl	3950 <malloc>
    3516:	1e07      	subs	r7, r0, #0
    3518:	d0c0      	beq.n	349c <setvbuf+0xa8>
    351a:	2380      	movs	r3, #128	; 0x80
    351c:	89a2      	ldrh	r2, [r4, #12]
    351e:	9d01      	ldr	r5, [sp, #4]
    3520:	4313      	orrs	r3, r2
    3522:	81a3      	strh	r3, [r4, #12]
    3524:	e7d6      	b.n	34d4 <setvbuf+0xe0>
    3526:	2000      	movs	r0, #0
    3528:	e7ba      	b.n	34a0 <setvbuf+0xac>
    352a:	60a5      	str	r5, [r4, #8]
    352c:	e7c4      	b.n	34b8 <setvbuf+0xc4>
    352e:	60a0      	str	r0, [r4, #8]
    3530:	e7c2      	b.n	34b8 <setvbuf+0xc4>
    3532:	2001      	movs	r0, #1
    3534:	4240      	negs	r0, r0
    3536:	e7bf      	b.n	34b8 <setvbuf+0xc4>
    3538:	20000040 	.word	0x20000040
    353c:	00006534 	.word	0x00006534
    3540:	fffff35c 	.word	0xfffff35c
    3544:	00006554 	.word	0x00006554
    3548:	00006514 	.word	0x00006514

0000354c <strlen>:
    354c:	2300      	movs	r3, #0
    354e:	5cc2      	ldrb	r2, [r0, r3]
    3550:	3301      	adds	r3, #1
    3552:	2a00      	cmp	r2, #0
    3554:	d1fb      	bne.n	354e <strlen+0x2>
    3556:	1e58      	subs	r0, r3, #1
    3558:	4770      	bx	lr
	...

0000355c <__sflush_r>:
    355c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    355e:	898a      	ldrh	r2, [r1, #12]
    3560:	0005      	movs	r5, r0
    3562:	000c      	movs	r4, r1
    3564:	0713      	lsls	r3, r2, #28
    3566:	d460      	bmi.n	362a <__sflush_r+0xce>
    3568:	684b      	ldr	r3, [r1, #4]
    356a:	2b00      	cmp	r3, #0
    356c:	dc04      	bgt.n	3578 <__sflush_r+0x1c>
    356e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3570:	2b00      	cmp	r3, #0
    3572:	dc01      	bgt.n	3578 <__sflush_r+0x1c>
    3574:	2000      	movs	r0, #0
    3576:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3578:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    357a:	2f00      	cmp	r7, #0
    357c:	d0fa      	beq.n	3574 <__sflush_r+0x18>
    357e:	2300      	movs	r3, #0
    3580:	682e      	ldr	r6, [r5, #0]
    3582:	602b      	str	r3, [r5, #0]
    3584:	2380      	movs	r3, #128	; 0x80
    3586:	015b      	lsls	r3, r3, #5
    3588:	401a      	ands	r2, r3
    358a:	d034      	beq.n	35f6 <__sflush_r+0x9a>
    358c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    358e:	89a3      	ldrh	r3, [r4, #12]
    3590:	075b      	lsls	r3, r3, #29
    3592:	d506      	bpl.n	35a2 <__sflush_r+0x46>
    3594:	6863      	ldr	r3, [r4, #4]
    3596:	1ac0      	subs	r0, r0, r3
    3598:	6b63      	ldr	r3, [r4, #52]	; 0x34
    359a:	2b00      	cmp	r3, #0
    359c:	d001      	beq.n	35a2 <__sflush_r+0x46>
    359e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    35a0:	1ac0      	subs	r0, r0, r3
    35a2:	0002      	movs	r2, r0
    35a4:	6a21      	ldr	r1, [r4, #32]
    35a6:	2300      	movs	r3, #0
    35a8:	0028      	movs	r0, r5
    35aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    35ac:	47b8      	blx	r7
    35ae:	89a1      	ldrh	r1, [r4, #12]
    35b0:	1c43      	adds	r3, r0, #1
    35b2:	d106      	bne.n	35c2 <__sflush_r+0x66>
    35b4:	682b      	ldr	r3, [r5, #0]
    35b6:	2b1d      	cmp	r3, #29
    35b8:	d831      	bhi.n	361e <__sflush_r+0xc2>
    35ba:	4a2c      	ldr	r2, [pc, #176]	; (366c <__sflush_r+0x110>)
    35bc:	40da      	lsrs	r2, r3
    35be:	07d3      	lsls	r3, r2, #31
    35c0:	d52d      	bpl.n	361e <__sflush_r+0xc2>
    35c2:	2300      	movs	r3, #0
    35c4:	6063      	str	r3, [r4, #4]
    35c6:	6923      	ldr	r3, [r4, #16]
    35c8:	6023      	str	r3, [r4, #0]
    35ca:	04cb      	lsls	r3, r1, #19
    35cc:	d505      	bpl.n	35da <__sflush_r+0x7e>
    35ce:	1c43      	adds	r3, r0, #1
    35d0:	d102      	bne.n	35d8 <__sflush_r+0x7c>
    35d2:	682b      	ldr	r3, [r5, #0]
    35d4:	2b00      	cmp	r3, #0
    35d6:	d100      	bne.n	35da <__sflush_r+0x7e>
    35d8:	6560      	str	r0, [r4, #84]	; 0x54
    35da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    35dc:	602e      	str	r6, [r5, #0]
    35de:	2900      	cmp	r1, #0
    35e0:	d0c8      	beq.n	3574 <__sflush_r+0x18>
    35e2:	0023      	movs	r3, r4
    35e4:	3344      	adds	r3, #68	; 0x44
    35e6:	4299      	cmp	r1, r3
    35e8:	d002      	beq.n	35f0 <__sflush_r+0x94>
    35ea:	0028      	movs	r0, r5
    35ec:	f000 f9ba 	bl	3964 <_free_r>
    35f0:	2000      	movs	r0, #0
    35f2:	6360      	str	r0, [r4, #52]	; 0x34
    35f4:	e7bf      	b.n	3576 <__sflush_r+0x1a>
    35f6:	2301      	movs	r3, #1
    35f8:	6a21      	ldr	r1, [r4, #32]
    35fa:	0028      	movs	r0, r5
    35fc:	47b8      	blx	r7
    35fe:	1c43      	adds	r3, r0, #1
    3600:	d1c5      	bne.n	358e <__sflush_r+0x32>
    3602:	682b      	ldr	r3, [r5, #0]
    3604:	2b00      	cmp	r3, #0
    3606:	d0c2      	beq.n	358e <__sflush_r+0x32>
    3608:	2b1d      	cmp	r3, #29
    360a:	d001      	beq.n	3610 <__sflush_r+0xb4>
    360c:	2b16      	cmp	r3, #22
    360e:	d101      	bne.n	3614 <__sflush_r+0xb8>
    3610:	602e      	str	r6, [r5, #0]
    3612:	e7af      	b.n	3574 <__sflush_r+0x18>
    3614:	2340      	movs	r3, #64	; 0x40
    3616:	89a2      	ldrh	r2, [r4, #12]
    3618:	4313      	orrs	r3, r2
    361a:	81a3      	strh	r3, [r4, #12]
    361c:	e7ab      	b.n	3576 <__sflush_r+0x1a>
    361e:	2340      	movs	r3, #64	; 0x40
    3620:	430b      	orrs	r3, r1
    3622:	2001      	movs	r0, #1
    3624:	81a3      	strh	r3, [r4, #12]
    3626:	4240      	negs	r0, r0
    3628:	e7a5      	b.n	3576 <__sflush_r+0x1a>
    362a:	690f      	ldr	r7, [r1, #16]
    362c:	2f00      	cmp	r7, #0
    362e:	d0a1      	beq.n	3574 <__sflush_r+0x18>
    3630:	680b      	ldr	r3, [r1, #0]
    3632:	600f      	str	r7, [r1, #0]
    3634:	1bdb      	subs	r3, r3, r7
    3636:	9301      	str	r3, [sp, #4]
    3638:	2300      	movs	r3, #0
    363a:	0792      	lsls	r2, r2, #30
    363c:	d100      	bne.n	3640 <__sflush_r+0xe4>
    363e:	694b      	ldr	r3, [r1, #20]
    3640:	60a3      	str	r3, [r4, #8]
    3642:	9b01      	ldr	r3, [sp, #4]
    3644:	2b00      	cmp	r3, #0
    3646:	dc00      	bgt.n	364a <__sflush_r+0xee>
    3648:	e794      	b.n	3574 <__sflush_r+0x18>
    364a:	9b01      	ldr	r3, [sp, #4]
    364c:	003a      	movs	r2, r7
    364e:	6a21      	ldr	r1, [r4, #32]
    3650:	0028      	movs	r0, r5
    3652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3654:	47b0      	blx	r6
    3656:	2800      	cmp	r0, #0
    3658:	dc03      	bgt.n	3662 <__sflush_r+0x106>
    365a:	2340      	movs	r3, #64	; 0x40
    365c:	89a2      	ldrh	r2, [r4, #12]
    365e:	4313      	orrs	r3, r2
    3660:	e7df      	b.n	3622 <__sflush_r+0xc6>
    3662:	9b01      	ldr	r3, [sp, #4]
    3664:	183f      	adds	r7, r7, r0
    3666:	1a1b      	subs	r3, r3, r0
    3668:	9301      	str	r3, [sp, #4]
    366a:	e7ea      	b.n	3642 <__sflush_r+0xe6>
    366c:	20400001 	.word	0x20400001

00003670 <_fflush_r>:
    3670:	690b      	ldr	r3, [r1, #16]
    3672:	b570      	push	{r4, r5, r6, lr}
    3674:	0005      	movs	r5, r0
    3676:	000c      	movs	r4, r1
    3678:	2b00      	cmp	r3, #0
    367a:	d101      	bne.n	3680 <_fflush_r+0x10>
    367c:	2000      	movs	r0, #0
    367e:	bd70      	pop	{r4, r5, r6, pc}
    3680:	2800      	cmp	r0, #0
    3682:	d004      	beq.n	368e <_fflush_r+0x1e>
    3684:	6983      	ldr	r3, [r0, #24]
    3686:	2b00      	cmp	r3, #0
    3688:	d101      	bne.n	368e <_fflush_r+0x1e>
    368a:	f000 f85f 	bl	374c <__sinit>
    368e:	4b0b      	ldr	r3, [pc, #44]	; (36bc <_fflush_r+0x4c>)
    3690:	429c      	cmp	r4, r3
    3692:	d109      	bne.n	36a8 <_fflush_r+0x38>
    3694:	686c      	ldr	r4, [r5, #4]
    3696:	220c      	movs	r2, #12
    3698:	5ea3      	ldrsh	r3, [r4, r2]
    369a:	2b00      	cmp	r3, #0
    369c:	d0ee      	beq.n	367c <_fflush_r+0xc>
    369e:	0021      	movs	r1, r4
    36a0:	0028      	movs	r0, r5
    36a2:	f7ff ff5b 	bl	355c <__sflush_r>
    36a6:	e7ea      	b.n	367e <_fflush_r+0xe>
    36a8:	4b05      	ldr	r3, [pc, #20]	; (36c0 <_fflush_r+0x50>)
    36aa:	429c      	cmp	r4, r3
    36ac:	d101      	bne.n	36b2 <_fflush_r+0x42>
    36ae:	68ac      	ldr	r4, [r5, #8]
    36b0:	e7f1      	b.n	3696 <_fflush_r+0x26>
    36b2:	4b04      	ldr	r3, [pc, #16]	; (36c4 <_fflush_r+0x54>)
    36b4:	429c      	cmp	r4, r3
    36b6:	d1ee      	bne.n	3696 <_fflush_r+0x26>
    36b8:	68ec      	ldr	r4, [r5, #12]
    36ba:	e7ec      	b.n	3696 <_fflush_r+0x26>
    36bc:	00006534 	.word	0x00006534
    36c0:	00006554 	.word	0x00006554
    36c4:	00006514 	.word	0x00006514

000036c8 <_cleanup_r>:
    36c8:	b510      	push	{r4, lr}
    36ca:	4902      	ldr	r1, [pc, #8]	; (36d4 <_cleanup_r+0xc>)
    36cc:	f000 f8b2 	bl	3834 <_fwalk_reent>
    36d0:	bd10      	pop	{r4, pc}
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	00003671 	.word	0x00003671

000036d8 <std.isra.0>:
    36d8:	2300      	movs	r3, #0
    36da:	b510      	push	{r4, lr}
    36dc:	0004      	movs	r4, r0
    36de:	6003      	str	r3, [r0, #0]
    36e0:	6043      	str	r3, [r0, #4]
    36e2:	6083      	str	r3, [r0, #8]
    36e4:	8181      	strh	r1, [r0, #12]
    36e6:	6643      	str	r3, [r0, #100]	; 0x64
    36e8:	81c2      	strh	r2, [r0, #14]
    36ea:	6103      	str	r3, [r0, #16]
    36ec:	6143      	str	r3, [r0, #20]
    36ee:	6183      	str	r3, [r0, #24]
    36f0:	0019      	movs	r1, r3
    36f2:	2208      	movs	r2, #8
    36f4:	305c      	adds	r0, #92	; 0x5c
    36f6:	f7ff fde6 	bl	32c6 <memset>
    36fa:	4b05      	ldr	r3, [pc, #20]	; (3710 <std.isra.0+0x38>)
    36fc:	6224      	str	r4, [r4, #32]
    36fe:	6263      	str	r3, [r4, #36]	; 0x24
    3700:	4b04      	ldr	r3, [pc, #16]	; (3714 <std.isra.0+0x3c>)
    3702:	62a3      	str	r3, [r4, #40]	; 0x28
    3704:	4b04      	ldr	r3, [pc, #16]	; (3718 <std.isra.0+0x40>)
    3706:	62e3      	str	r3, [r4, #44]	; 0x2c
    3708:	4b04      	ldr	r3, [pc, #16]	; (371c <std.isra.0+0x44>)
    370a:	6323      	str	r3, [r4, #48]	; 0x30
    370c:	bd10      	pop	{r4, pc}
    370e:	46c0      	nop			; (mov r8, r8)
    3710:	00004071 	.word	0x00004071
    3714:	00004099 	.word	0x00004099
    3718:	000040d1 	.word	0x000040d1
    371c:	000040fd 	.word	0x000040fd

00003720 <__sfmoreglue>:
    3720:	b570      	push	{r4, r5, r6, lr}
    3722:	2568      	movs	r5, #104	; 0x68
    3724:	1e4a      	subs	r2, r1, #1
    3726:	4355      	muls	r5, r2
    3728:	000e      	movs	r6, r1
    372a:	0029      	movs	r1, r5
    372c:	3174      	adds	r1, #116	; 0x74
    372e:	f000 f963 	bl	39f8 <_malloc_r>
    3732:	1e04      	subs	r4, r0, #0
    3734:	d008      	beq.n	3748 <__sfmoreglue+0x28>
    3736:	2100      	movs	r1, #0
    3738:	002a      	movs	r2, r5
    373a:	6001      	str	r1, [r0, #0]
    373c:	6046      	str	r6, [r0, #4]
    373e:	300c      	adds	r0, #12
    3740:	60a0      	str	r0, [r4, #8]
    3742:	3268      	adds	r2, #104	; 0x68
    3744:	f7ff fdbf 	bl	32c6 <memset>
    3748:	0020      	movs	r0, r4
    374a:	bd70      	pop	{r4, r5, r6, pc}

0000374c <__sinit>:
    374c:	6983      	ldr	r3, [r0, #24]
    374e:	b513      	push	{r0, r1, r4, lr}
    3750:	0004      	movs	r4, r0
    3752:	2b00      	cmp	r3, #0
    3754:	d128      	bne.n	37a8 <__sinit+0x5c>
    3756:	6483      	str	r3, [r0, #72]	; 0x48
    3758:	64c3      	str	r3, [r0, #76]	; 0x4c
    375a:	6503      	str	r3, [r0, #80]	; 0x50
    375c:	4b13      	ldr	r3, [pc, #76]	; (37ac <__sinit+0x60>)
    375e:	4a14      	ldr	r2, [pc, #80]	; (37b0 <__sinit+0x64>)
    3760:	681b      	ldr	r3, [r3, #0]
    3762:	6282      	str	r2, [r0, #40]	; 0x28
    3764:	9301      	str	r3, [sp, #4]
    3766:	4298      	cmp	r0, r3
    3768:	d101      	bne.n	376e <__sinit+0x22>
    376a:	2301      	movs	r3, #1
    376c:	6183      	str	r3, [r0, #24]
    376e:	0020      	movs	r0, r4
    3770:	f000 f820 	bl	37b4 <__sfp>
    3774:	6060      	str	r0, [r4, #4]
    3776:	0020      	movs	r0, r4
    3778:	f000 f81c 	bl	37b4 <__sfp>
    377c:	60a0      	str	r0, [r4, #8]
    377e:	0020      	movs	r0, r4
    3780:	f000 f818 	bl	37b4 <__sfp>
    3784:	2200      	movs	r2, #0
    3786:	60e0      	str	r0, [r4, #12]
    3788:	2104      	movs	r1, #4
    378a:	6860      	ldr	r0, [r4, #4]
    378c:	f7ff ffa4 	bl	36d8 <std.isra.0>
    3790:	2201      	movs	r2, #1
    3792:	2109      	movs	r1, #9
    3794:	68a0      	ldr	r0, [r4, #8]
    3796:	f7ff ff9f 	bl	36d8 <std.isra.0>
    379a:	2202      	movs	r2, #2
    379c:	2112      	movs	r1, #18
    379e:	68e0      	ldr	r0, [r4, #12]
    37a0:	f7ff ff9a 	bl	36d8 <std.isra.0>
    37a4:	2301      	movs	r3, #1
    37a6:	61a3      	str	r3, [r4, #24]
    37a8:	bd13      	pop	{r0, r1, r4, pc}
    37aa:	46c0      	nop			; (mov r8, r8)
    37ac:	00006510 	.word	0x00006510
    37b0:	000036c9 	.word	0x000036c9

000037b4 <__sfp>:
    37b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37b6:	4b1e      	ldr	r3, [pc, #120]	; (3830 <__sfp+0x7c>)
    37b8:	0007      	movs	r7, r0
    37ba:	681e      	ldr	r6, [r3, #0]
    37bc:	69b3      	ldr	r3, [r6, #24]
    37be:	2b00      	cmp	r3, #0
    37c0:	d102      	bne.n	37c8 <__sfp+0x14>
    37c2:	0030      	movs	r0, r6
    37c4:	f7ff ffc2 	bl	374c <__sinit>
    37c8:	3648      	adds	r6, #72	; 0x48
    37ca:	68b4      	ldr	r4, [r6, #8]
    37cc:	6873      	ldr	r3, [r6, #4]
    37ce:	3b01      	subs	r3, #1
    37d0:	d504      	bpl.n	37dc <__sfp+0x28>
    37d2:	6833      	ldr	r3, [r6, #0]
    37d4:	2b00      	cmp	r3, #0
    37d6:	d007      	beq.n	37e8 <__sfp+0x34>
    37d8:	6836      	ldr	r6, [r6, #0]
    37da:	e7f6      	b.n	37ca <__sfp+0x16>
    37dc:	220c      	movs	r2, #12
    37de:	5ea5      	ldrsh	r5, [r4, r2]
    37e0:	2d00      	cmp	r5, #0
    37e2:	d00d      	beq.n	3800 <__sfp+0x4c>
    37e4:	3468      	adds	r4, #104	; 0x68
    37e6:	e7f2      	b.n	37ce <__sfp+0x1a>
    37e8:	2104      	movs	r1, #4
    37ea:	0038      	movs	r0, r7
    37ec:	f7ff ff98 	bl	3720 <__sfmoreglue>
    37f0:	6030      	str	r0, [r6, #0]
    37f2:	2800      	cmp	r0, #0
    37f4:	d1f0      	bne.n	37d8 <__sfp+0x24>
    37f6:	230c      	movs	r3, #12
    37f8:	0004      	movs	r4, r0
    37fa:	603b      	str	r3, [r7, #0]
    37fc:	0020      	movs	r0, r4
    37fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3800:	2301      	movs	r3, #1
    3802:	0020      	movs	r0, r4
    3804:	425b      	negs	r3, r3
    3806:	81e3      	strh	r3, [r4, #14]
    3808:	3302      	adds	r3, #2
    380a:	81a3      	strh	r3, [r4, #12]
    380c:	6665      	str	r5, [r4, #100]	; 0x64
    380e:	6025      	str	r5, [r4, #0]
    3810:	60a5      	str	r5, [r4, #8]
    3812:	6065      	str	r5, [r4, #4]
    3814:	6125      	str	r5, [r4, #16]
    3816:	6165      	str	r5, [r4, #20]
    3818:	61a5      	str	r5, [r4, #24]
    381a:	2208      	movs	r2, #8
    381c:	0029      	movs	r1, r5
    381e:	305c      	adds	r0, #92	; 0x5c
    3820:	f7ff fd51 	bl	32c6 <memset>
    3824:	6365      	str	r5, [r4, #52]	; 0x34
    3826:	63a5      	str	r5, [r4, #56]	; 0x38
    3828:	64a5      	str	r5, [r4, #72]	; 0x48
    382a:	64e5      	str	r5, [r4, #76]	; 0x4c
    382c:	e7e6      	b.n	37fc <__sfp+0x48>
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	00006510 	.word	0x00006510

00003834 <_fwalk_reent>:
    3834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3836:	0004      	movs	r4, r0
    3838:	0007      	movs	r7, r0
    383a:	2600      	movs	r6, #0
    383c:	9101      	str	r1, [sp, #4]
    383e:	3448      	adds	r4, #72	; 0x48
    3840:	2c00      	cmp	r4, #0
    3842:	d101      	bne.n	3848 <_fwalk_reent+0x14>
    3844:	0030      	movs	r0, r6
    3846:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3848:	6863      	ldr	r3, [r4, #4]
    384a:	68a5      	ldr	r5, [r4, #8]
    384c:	9300      	str	r3, [sp, #0]
    384e:	9b00      	ldr	r3, [sp, #0]
    3850:	3b01      	subs	r3, #1
    3852:	9300      	str	r3, [sp, #0]
    3854:	d501      	bpl.n	385a <_fwalk_reent+0x26>
    3856:	6824      	ldr	r4, [r4, #0]
    3858:	e7f2      	b.n	3840 <_fwalk_reent+0xc>
    385a:	89ab      	ldrh	r3, [r5, #12]
    385c:	2b01      	cmp	r3, #1
    385e:	d908      	bls.n	3872 <_fwalk_reent+0x3e>
    3860:	220e      	movs	r2, #14
    3862:	5eab      	ldrsh	r3, [r5, r2]
    3864:	3301      	adds	r3, #1
    3866:	d004      	beq.n	3872 <_fwalk_reent+0x3e>
    3868:	0029      	movs	r1, r5
    386a:	0038      	movs	r0, r7
    386c:	9b01      	ldr	r3, [sp, #4]
    386e:	4798      	blx	r3
    3870:	4306      	orrs	r6, r0
    3872:	3568      	adds	r5, #104	; 0x68
    3874:	e7eb      	b.n	384e <_fwalk_reent+0x1a>
	...

00003878 <__swhatbuf_r>:
    3878:	b570      	push	{r4, r5, r6, lr}
    387a:	000e      	movs	r6, r1
    387c:	001d      	movs	r5, r3
    387e:	230e      	movs	r3, #14
    3880:	5ec9      	ldrsh	r1, [r1, r3]
    3882:	b090      	sub	sp, #64	; 0x40
    3884:	0014      	movs	r4, r2
    3886:	2900      	cmp	r1, #0
    3888:	da07      	bge.n	389a <__swhatbuf_r+0x22>
    388a:	2300      	movs	r3, #0
    388c:	602b      	str	r3, [r5, #0]
    388e:	89b3      	ldrh	r3, [r6, #12]
    3890:	061b      	lsls	r3, r3, #24
    3892:	d411      	bmi.n	38b8 <__swhatbuf_r+0x40>
    3894:	2380      	movs	r3, #128	; 0x80
    3896:	00db      	lsls	r3, r3, #3
    3898:	e00f      	b.n	38ba <__swhatbuf_r+0x42>
    389a:	aa01      	add	r2, sp, #4
    389c:	f000 fd26 	bl	42ec <_fstat_r>
    38a0:	2800      	cmp	r0, #0
    38a2:	dbf2      	blt.n	388a <__swhatbuf_r+0x12>
    38a4:	22f0      	movs	r2, #240	; 0xf0
    38a6:	9b02      	ldr	r3, [sp, #8]
    38a8:	0212      	lsls	r2, r2, #8
    38aa:	4013      	ands	r3, r2
    38ac:	4a05      	ldr	r2, [pc, #20]	; (38c4 <__swhatbuf_r+0x4c>)
    38ae:	189b      	adds	r3, r3, r2
    38b0:	425a      	negs	r2, r3
    38b2:	4153      	adcs	r3, r2
    38b4:	602b      	str	r3, [r5, #0]
    38b6:	e7ed      	b.n	3894 <__swhatbuf_r+0x1c>
    38b8:	2340      	movs	r3, #64	; 0x40
    38ba:	2000      	movs	r0, #0
    38bc:	6023      	str	r3, [r4, #0]
    38be:	b010      	add	sp, #64	; 0x40
    38c0:	bd70      	pop	{r4, r5, r6, pc}
    38c2:	46c0      	nop			; (mov r8, r8)
    38c4:	ffffe000 	.word	0xffffe000

000038c8 <__smakebuf_r>:
    38c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    38ca:	2602      	movs	r6, #2
    38cc:	898b      	ldrh	r3, [r1, #12]
    38ce:	0005      	movs	r5, r0
    38d0:	000c      	movs	r4, r1
    38d2:	4233      	tst	r3, r6
    38d4:	d006      	beq.n	38e4 <__smakebuf_r+0x1c>
    38d6:	0023      	movs	r3, r4
    38d8:	3347      	adds	r3, #71	; 0x47
    38da:	6023      	str	r3, [r4, #0]
    38dc:	6123      	str	r3, [r4, #16]
    38de:	2301      	movs	r3, #1
    38e0:	6163      	str	r3, [r4, #20]
    38e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    38e4:	ab01      	add	r3, sp, #4
    38e6:	466a      	mov	r2, sp
    38e8:	f7ff ffc6 	bl	3878 <__swhatbuf_r>
    38ec:	9900      	ldr	r1, [sp, #0]
    38ee:	0007      	movs	r7, r0
    38f0:	0028      	movs	r0, r5
    38f2:	f000 f881 	bl	39f8 <_malloc_r>
    38f6:	2800      	cmp	r0, #0
    38f8:	d108      	bne.n	390c <__smakebuf_r+0x44>
    38fa:	220c      	movs	r2, #12
    38fc:	5ea3      	ldrsh	r3, [r4, r2]
    38fe:	059a      	lsls	r2, r3, #22
    3900:	d4ef      	bmi.n	38e2 <__smakebuf_r+0x1a>
    3902:	2203      	movs	r2, #3
    3904:	4393      	bics	r3, r2
    3906:	431e      	orrs	r6, r3
    3908:	81a6      	strh	r6, [r4, #12]
    390a:	e7e4      	b.n	38d6 <__smakebuf_r+0xe>
    390c:	4b0f      	ldr	r3, [pc, #60]	; (394c <__smakebuf_r+0x84>)
    390e:	62ab      	str	r3, [r5, #40]	; 0x28
    3910:	2380      	movs	r3, #128	; 0x80
    3912:	89a2      	ldrh	r2, [r4, #12]
    3914:	6020      	str	r0, [r4, #0]
    3916:	4313      	orrs	r3, r2
    3918:	81a3      	strh	r3, [r4, #12]
    391a:	9b00      	ldr	r3, [sp, #0]
    391c:	6120      	str	r0, [r4, #16]
    391e:	6163      	str	r3, [r4, #20]
    3920:	9b01      	ldr	r3, [sp, #4]
    3922:	2b00      	cmp	r3, #0
    3924:	d00d      	beq.n	3942 <__smakebuf_r+0x7a>
    3926:	230e      	movs	r3, #14
    3928:	5ee1      	ldrsh	r1, [r4, r3]
    392a:	0028      	movs	r0, r5
    392c:	f000 fcf0 	bl	4310 <_isatty_r>
    3930:	2800      	cmp	r0, #0
    3932:	d006      	beq.n	3942 <__smakebuf_r+0x7a>
    3934:	2203      	movs	r2, #3
    3936:	89a3      	ldrh	r3, [r4, #12]
    3938:	4393      	bics	r3, r2
    393a:	001a      	movs	r2, r3
    393c:	2301      	movs	r3, #1
    393e:	4313      	orrs	r3, r2
    3940:	81a3      	strh	r3, [r4, #12]
    3942:	89a0      	ldrh	r0, [r4, #12]
    3944:	4338      	orrs	r0, r7
    3946:	81a0      	strh	r0, [r4, #12]
    3948:	e7cb      	b.n	38e2 <__smakebuf_r+0x1a>
    394a:	46c0      	nop			; (mov r8, r8)
    394c:	000036c9 	.word	0x000036c9

00003950 <malloc>:
    3950:	b510      	push	{r4, lr}
    3952:	4b03      	ldr	r3, [pc, #12]	; (3960 <malloc+0x10>)
    3954:	0001      	movs	r1, r0
    3956:	6818      	ldr	r0, [r3, #0]
    3958:	f000 f84e 	bl	39f8 <_malloc_r>
    395c:	bd10      	pop	{r4, pc}
    395e:	46c0      	nop			; (mov r8, r8)
    3960:	20000040 	.word	0x20000040

00003964 <_free_r>:
    3964:	b570      	push	{r4, r5, r6, lr}
    3966:	0005      	movs	r5, r0
    3968:	2900      	cmp	r1, #0
    396a:	d010      	beq.n	398e <_free_r+0x2a>
    396c:	1f0c      	subs	r4, r1, #4
    396e:	6823      	ldr	r3, [r4, #0]
    3970:	2b00      	cmp	r3, #0
    3972:	da00      	bge.n	3976 <_free_r+0x12>
    3974:	18e4      	adds	r4, r4, r3
    3976:	0028      	movs	r0, r5
    3978:	f000 fcfb 	bl	4372 <__malloc_lock>
    397c:	4a1d      	ldr	r2, [pc, #116]	; (39f4 <_free_r+0x90>)
    397e:	6813      	ldr	r3, [r2, #0]
    3980:	2b00      	cmp	r3, #0
    3982:	d105      	bne.n	3990 <_free_r+0x2c>
    3984:	6063      	str	r3, [r4, #4]
    3986:	6014      	str	r4, [r2, #0]
    3988:	0028      	movs	r0, r5
    398a:	f000 fcf3 	bl	4374 <__malloc_unlock>
    398e:	bd70      	pop	{r4, r5, r6, pc}
    3990:	42a3      	cmp	r3, r4
    3992:	d909      	bls.n	39a8 <_free_r+0x44>
    3994:	6821      	ldr	r1, [r4, #0]
    3996:	1860      	adds	r0, r4, r1
    3998:	4283      	cmp	r3, r0
    399a:	d1f3      	bne.n	3984 <_free_r+0x20>
    399c:	6818      	ldr	r0, [r3, #0]
    399e:	685b      	ldr	r3, [r3, #4]
    39a0:	1841      	adds	r1, r0, r1
    39a2:	6021      	str	r1, [r4, #0]
    39a4:	e7ee      	b.n	3984 <_free_r+0x20>
    39a6:	0013      	movs	r3, r2
    39a8:	685a      	ldr	r2, [r3, #4]
    39aa:	2a00      	cmp	r2, #0
    39ac:	d001      	beq.n	39b2 <_free_r+0x4e>
    39ae:	42a2      	cmp	r2, r4
    39b0:	d9f9      	bls.n	39a6 <_free_r+0x42>
    39b2:	6819      	ldr	r1, [r3, #0]
    39b4:	1858      	adds	r0, r3, r1
    39b6:	42a0      	cmp	r0, r4
    39b8:	d10b      	bne.n	39d2 <_free_r+0x6e>
    39ba:	6820      	ldr	r0, [r4, #0]
    39bc:	1809      	adds	r1, r1, r0
    39be:	1858      	adds	r0, r3, r1
    39c0:	6019      	str	r1, [r3, #0]
    39c2:	4282      	cmp	r2, r0
    39c4:	d1e0      	bne.n	3988 <_free_r+0x24>
    39c6:	6810      	ldr	r0, [r2, #0]
    39c8:	6852      	ldr	r2, [r2, #4]
    39ca:	1841      	adds	r1, r0, r1
    39cc:	6019      	str	r1, [r3, #0]
    39ce:	605a      	str	r2, [r3, #4]
    39d0:	e7da      	b.n	3988 <_free_r+0x24>
    39d2:	42a0      	cmp	r0, r4
    39d4:	d902      	bls.n	39dc <_free_r+0x78>
    39d6:	230c      	movs	r3, #12
    39d8:	602b      	str	r3, [r5, #0]
    39da:	e7d5      	b.n	3988 <_free_r+0x24>
    39dc:	6821      	ldr	r1, [r4, #0]
    39de:	1860      	adds	r0, r4, r1
    39e0:	4282      	cmp	r2, r0
    39e2:	d103      	bne.n	39ec <_free_r+0x88>
    39e4:	6810      	ldr	r0, [r2, #0]
    39e6:	6852      	ldr	r2, [r2, #4]
    39e8:	1841      	adds	r1, r0, r1
    39ea:	6021      	str	r1, [r4, #0]
    39ec:	6062      	str	r2, [r4, #4]
    39ee:	605c      	str	r4, [r3, #4]
    39f0:	e7ca      	b.n	3988 <_free_r+0x24>
    39f2:	46c0      	nop			; (mov r8, r8)
    39f4:	20000184 	.word	0x20000184

000039f8 <_malloc_r>:
    39f8:	2303      	movs	r3, #3
    39fa:	b570      	push	{r4, r5, r6, lr}
    39fc:	1ccd      	adds	r5, r1, #3
    39fe:	439d      	bics	r5, r3
    3a00:	3508      	adds	r5, #8
    3a02:	0006      	movs	r6, r0
    3a04:	2d0c      	cmp	r5, #12
    3a06:	d21e      	bcs.n	3a46 <_malloc_r+0x4e>
    3a08:	250c      	movs	r5, #12
    3a0a:	42a9      	cmp	r1, r5
    3a0c:	d81d      	bhi.n	3a4a <_malloc_r+0x52>
    3a0e:	0030      	movs	r0, r6
    3a10:	f000 fcaf 	bl	4372 <__malloc_lock>
    3a14:	4a25      	ldr	r2, [pc, #148]	; (3aac <_malloc_r+0xb4>)
    3a16:	6814      	ldr	r4, [r2, #0]
    3a18:	0021      	movs	r1, r4
    3a1a:	2900      	cmp	r1, #0
    3a1c:	d119      	bne.n	3a52 <_malloc_r+0x5a>
    3a1e:	4c24      	ldr	r4, [pc, #144]	; (3ab0 <_malloc_r+0xb8>)
    3a20:	6823      	ldr	r3, [r4, #0]
    3a22:	2b00      	cmp	r3, #0
    3a24:	d103      	bne.n	3a2e <_malloc_r+0x36>
    3a26:	0030      	movs	r0, r6
    3a28:	f000 fb10 	bl	404c <_sbrk_r>
    3a2c:	6020      	str	r0, [r4, #0]
    3a2e:	0029      	movs	r1, r5
    3a30:	0030      	movs	r0, r6
    3a32:	f000 fb0b 	bl	404c <_sbrk_r>
    3a36:	1c43      	adds	r3, r0, #1
    3a38:	d12c      	bne.n	3a94 <_malloc_r+0x9c>
    3a3a:	230c      	movs	r3, #12
    3a3c:	0030      	movs	r0, r6
    3a3e:	6033      	str	r3, [r6, #0]
    3a40:	f000 fc98 	bl	4374 <__malloc_unlock>
    3a44:	e003      	b.n	3a4e <_malloc_r+0x56>
    3a46:	2d00      	cmp	r5, #0
    3a48:	dadf      	bge.n	3a0a <_malloc_r+0x12>
    3a4a:	230c      	movs	r3, #12
    3a4c:	6033      	str	r3, [r6, #0]
    3a4e:	2000      	movs	r0, #0
    3a50:	bd70      	pop	{r4, r5, r6, pc}
    3a52:	680b      	ldr	r3, [r1, #0]
    3a54:	1b5b      	subs	r3, r3, r5
    3a56:	d41a      	bmi.n	3a8e <_malloc_r+0x96>
    3a58:	2b0b      	cmp	r3, #11
    3a5a:	d903      	bls.n	3a64 <_malloc_r+0x6c>
    3a5c:	600b      	str	r3, [r1, #0]
    3a5e:	18cc      	adds	r4, r1, r3
    3a60:	6025      	str	r5, [r4, #0]
    3a62:	e003      	b.n	3a6c <_malloc_r+0x74>
    3a64:	428c      	cmp	r4, r1
    3a66:	d10e      	bne.n	3a86 <_malloc_r+0x8e>
    3a68:	6863      	ldr	r3, [r4, #4]
    3a6a:	6013      	str	r3, [r2, #0]
    3a6c:	0030      	movs	r0, r6
    3a6e:	f000 fc81 	bl	4374 <__malloc_unlock>
    3a72:	0020      	movs	r0, r4
    3a74:	2207      	movs	r2, #7
    3a76:	300b      	adds	r0, #11
    3a78:	1d23      	adds	r3, r4, #4
    3a7a:	4390      	bics	r0, r2
    3a7c:	1ac3      	subs	r3, r0, r3
    3a7e:	d0e7      	beq.n	3a50 <_malloc_r+0x58>
    3a80:	425a      	negs	r2, r3
    3a82:	50e2      	str	r2, [r4, r3]
    3a84:	e7e4      	b.n	3a50 <_malloc_r+0x58>
    3a86:	684b      	ldr	r3, [r1, #4]
    3a88:	6063      	str	r3, [r4, #4]
    3a8a:	000c      	movs	r4, r1
    3a8c:	e7ee      	b.n	3a6c <_malloc_r+0x74>
    3a8e:	000c      	movs	r4, r1
    3a90:	6849      	ldr	r1, [r1, #4]
    3a92:	e7c2      	b.n	3a1a <_malloc_r+0x22>
    3a94:	2303      	movs	r3, #3
    3a96:	1cc4      	adds	r4, r0, #3
    3a98:	439c      	bics	r4, r3
    3a9a:	42a0      	cmp	r0, r4
    3a9c:	d0e0      	beq.n	3a60 <_malloc_r+0x68>
    3a9e:	1a21      	subs	r1, r4, r0
    3aa0:	0030      	movs	r0, r6
    3aa2:	f000 fad3 	bl	404c <_sbrk_r>
    3aa6:	1c43      	adds	r3, r0, #1
    3aa8:	d1da      	bne.n	3a60 <_malloc_r+0x68>
    3aaa:	e7c6      	b.n	3a3a <_malloc_r+0x42>
    3aac:	20000184 	.word	0x20000184
    3ab0:	20000188 	.word	0x20000188

00003ab4 <__sfputc_r>:
    3ab4:	6893      	ldr	r3, [r2, #8]
    3ab6:	b510      	push	{r4, lr}
    3ab8:	3b01      	subs	r3, #1
    3aba:	6093      	str	r3, [r2, #8]
    3abc:	2b00      	cmp	r3, #0
    3abe:	da05      	bge.n	3acc <__sfputc_r+0x18>
    3ac0:	6994      	ldr	r4, [r2, #24]
    3ac2:	42a3      	cmp	r3, r4
    3ac4:	db08      	blt.n	3ad8 <__sfputc_r+0x24>
    3ac6:	b2cb      	uxtb	r3, r1
    3ac8:	2b0a      	cmp	r3, #10
    3aca:	d005      	beq.n	3ad8 <__sfputc_r+0x24>
    3acc:	6813      	ldr	r3, [r2, #0]
    3ace:	1c58      	adds	r0, r3, #1
    3ad0:	6010      	str	r0, [r2, #0]
    3ad2:	7019      	strb	r1, [r3, #0]
    3ad4:	b2c8      	uxtb	r0, r1
    3ad6:	bd10      	pop	{r4, pc}
    3ad8:	f000 fb16 	bl	4108 <__swbuf_r>
    3adc:	e7fb      	b.n	3ad6 <__sfputc_r+0x22>

00003ade <__sfputs_r>:
    3ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ae0:	0006      	movs	r6, r0
    3ae2:	000f      	movs	r7, r1
    3ae4:	0014      	movs	r4, r2
    3ae6:	18d5      	adds	r5, r2, r3
    3ae8:	42ac      	cmp	r4, r5
    3aea:	d101      	bne.n	3af0 <__sfputs_r+0x12>
    3aec:	2000      	movs	r0, #0
    3aee:	e007      	b.n	3b00 <__sfputs_r+0x22>
    3af0:	7821      	ldrb	r1, [r4, #0]
    3af2:	003a      	movs	r2, r7
    3af4:	0030      	movs	r0, r6
    3af6:	f7ff ffdd 	bl	3ab4 <__sfputc_r>
    3afa:	3401      	adds	r4, #1
    3afc:	1c43      	adds	r3, r0, #1
    3afe:	d1f3      	bne.n	3ae8 <__sfputs_r+0xa>
    3b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003b04 <_vfiprintf_r>:
    3b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b06:	b09f      	sub	sp, #124	; 0x7c
    3b08:	0006      	movs	r6, r0
    3b0a:	000f      	movs	r7, r1
    3b0c:	0014      	movs	r4, r2
    3b0e:	9305      	str	r3, [sp, #20]
    3b10:	2800      	cmp	r0, #0
    3b12:	d004      	beq.n	3b1e <_vfiprintf_r+0x1a>
    3b14:	6983      	ldr	r3, [r0, #24]
    3b16:	2b00      	cmp	r3, #0
    3b18:	d101      	bne.n	3b1e <_vfiprintf_r+0x1a>
    3b1a:	f7ff fe17 	bl	374c <__sinit>
    3b1e:	4b7f      	ldr	r3, [pc, #508]	; (3d1c <_vfiprintf_r+0x218>)
    3b20:	429f      	cmp	r7, r3
    3b22:	d15c      	bne.n	3bde <_vfiprintf_r+0xda>
    3b24:	6877      	ldr	r7, [r6, #4]
    3b26:	89bb      	ldrh	r3, [r7, #12]
    3b28:	071b      	lsls	r3, r3, #28
    3b2a:	d562      	bpl.n	3bf2 <_vfiprintf_r+0xee>
    3b2c:	693b      	ldr	r3, [r7, #16]
    3b2e:	2b00      	cmp	r3, #0
    3b30:	d05f      	beq.n	3bf2 <_vfiprintf_r+0xee>
    3b32:	2300      	movs	r3, #0
    3b34:	ad06      	add	r5, sp, #24
    3b36:	616b      	str	r3, [r5, #20]
    3b38:	3320      	adds	r3, #32
    3b3a:	766b      	strb	r3, [r5, #25]
    3b3c:	3310      	adds	r3, #16
    3b3e:	76ab      	strb	r3, [r5, #26]
    3b40:	9402      	str	r4, [sp, #8]
    3b42:	9c02      	ldr	r4, [sp, #8]
    3b44:	7823      	ldrb	r3, [r4, #0]
    3b46:	2b00      	cmp	r3, #0
    3b48:	d15d      	bne.n	3c06 <_vfiprintf_r+0x102>
    3b4a:	9b02      	ldr	r3, [sp, #8]
    3b4c:	1ae3      	subs	r3, r4, r3
    3b4e:	9304      	str	r3, [sp, #16]
    3b50:	d00d      	beq.n	3b6e <_vfiprintf_r+0x6a>
    3b52:	9b04      	ldr	r3, [sp, #16]
    3b54:	9a02      	ldr	r2, [sp, #8]
    3b56:	0039      	movs	r1, r7
    3b58:	0030      	movs	r0, r6
    3b5a:	f7ff ffc0 	bl	3ade <__sfputs_r>
    3b5e:	1c43      	adds	r3, r0, #1
    3b60:	d100      	bne.n	3b64 <_vfiprintf_r+0x60>
    3b62:	e0cc      	b.n	3cfe <_vfiprintf_r+0x1fa>
    3b64:	696a      	ldr	r2, [r5, #20]
    3b66:	9b04      	ldr	r3, [sp, #16]
    3b68:	4694      	mov	ip, r2
    3b6a:	4463      	add	r3, ip
    3b6c:	616b      	str	r3, [r5, #20]
    3b6e:	7823      	ldrb	r3, [r4, #0]
    3b70:	2b00      	cmp	r3, #0
    3b72:	d100      	bne.n	3b76 <_vfiprintf_r+0x72>
    3b74:	e0c3      	b.n	3cfe <_vfiprintf_r+0x1fa>
    3b76:	2201      	movs	r2, #1
    3b78:	2300      	movs	r3, #0
    3b7a:	4252      	negs	r2, r2
    3b7c:	606a      	str	r2, [r5, #4]
    3b7e:	a902      	add	r1, sp, #8
    3b80:	3254      	adds	r2, #84	; 0x54
    3b82:	1852      	adds	r2, r2, r1
    3b84:	3401      	adds	r4, #1
    3b86:	602b      	str	r3, [r5, #0]
    3b88:	60eb      	str	r3, [r5, #12]
    3b8a:	60ab      	str	r3, [r5, #8]
    3b8c:	7013      	strb	r3, [r2, #0]
    3b8e:	65ab      	str	r3, [r5, #88]	; 0x58
    3b90:	7821      	ldrb	r1, [r4, #0]
    3b92:	2205      	movs	r2, #5
    3b94:	4862      	ldr	r0, [pc, #392]	; (3d20 <_vfiprintf_r+0x21c>)
    3b96:	f000 fbe1 	bl	435c <memchr>
    3b9a:	1c63      	adds	r3, r4, #1
    3b9c:	469c      	mov	ip, r3
    3b9e:	2800      	cmp	r0, #0
    3ba0:	d135      	bne.n	3c0e <_vfiprintf_r+0x10a>
    3ba2:	6829      	ldr	r1, [r5, #0]
    3ba4:	06cb      	lsls	r3, r1, #27
    3ba6:	d504      	bpl.n	3bb2 <_vfiprintf_r+0xae>
    3ba8:	2353      	movs	r3, #83	; 0x53
    3baa:	aa02      	add	r2, sp, #8
    3bac:	3020      	adds	r0, #32
    3bae:	189b      	adds	r3, r3, r2
    3bb0:	7018      	strb	r0, [r3, #0]
    3bb2:	070b      	lsls	r3, r1, #28
    3bb4:	d504      	bpl.n	3bc0 <_vfiprintf_r+0xbc>
    3bb6:	2353      	movs	r3, #83	; 0x53
    3bb8:	202b      	movs	r0, #43	; 0x2b
    3bba:	aa02      	add	r2, sp, #8
    3bbc:	189b      	adds	r3, r3, r2
    3bbe:	7018      	strb	r0, [r3, #0]
    3bc0:	7823      	ldrb	r3, [r4, #0]
    3bc2:	2b2a      	cmp	r3, #42	; 0x2a
    3bc4:	d02c      	beq.n	3c20 <_vfiprintf_r+0x11c>
    3bc6:	2000      	movs	r0, #0
    3bc8:	210a      	movs	r1, #10
    3bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3bcc:	7822      	ldrb	r2, [r4, #0]
    3bce:	3a30      	subs	r2, #48	; 0x30
    3bd0:	2a09      	cmp	r2, #9
    3bd2:	d800      	bhi.n	3bd6 <_vfiprintf_r+0xd2>
    3bd4:	e06b      	b.n	3cae <_vfiprintf_r+0x1aa>
    3bd6:	2800      	cmp	r0, #0
    3bd8:	d02a      	beq.n	3c30 <_vfiprintf_r+0x12c>
    3bda:	9309      	str	r3, [sp, #36]	; 0x24
    3bdc:	e028      	b.n	3c30 <_vfiprintf_r+0x12c>
    3bde:	4b51      	ldr	r3, [pc, #324]	; (3d24 <_vfiprintf_r+0x220>)
    3be0:	429f      	cmp	r7, r3
    3be2:	d101      	bne.n	3be8 <_vfiprintf_r+0xe4>
    3be4:	68b7      	ldr	r7, [r6, #8]
    3be6:	e79e      	b.n	3b26 <_vfiprintf_r+0x22>
    3be8:	4b4f      	ldr	r3, [pc, #316]	; (3d28 <_vfiprintf_r+0x224>)
    3bea:	429f      	cmp	r7, r3
    3bec:	d19b      	bne.n	3b26 <_vfiprintf_r+0x22>
    3bee:	68f7      	ldr	r7, [r6, #12]
    3bf0:	e799      	b.n	3b26 <_vfiprintf_r+0x22>
    3bf2:	0039      	movs	r1, r7
    3bf4:	0030      	movs	r0, r6
    3bf6:	f000 faf1 	bl	41dc <__swsetup_r>
    3bfa:	2800      	cmp	r0, #0
    3bfc:	d099      	beq.n	3b32 <_vfiprintf_r+0x2e>
    3bfe:	2001      	movs	r0, #1
    3c00:	4240      	negs	r0, r0
    3c02:	b01f      	add	sp, #124	; 0x7c
    3c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c06:	2b25      	cmp	r3, #37	; 0x25
    3c08:	d09f      	beq.n	3b4a <_vfiprintf_r+0x46>
    3c0a:	3401      	adds	r4, #1
    3c0c:	e79a      	b.n	3b44 <_vfiprintf_r+0x40>
    3c0e:	4b44      	ldr	r3, [pc, #272]	; (3d20 <_vfiprintf_r+0x21c>)
    3c10:	6829      	ldr	r1, [r5, #0]
    3c12:	1ac0      	subs	r0, r0, r3
    3c14:	2301      	movs	r3, #1
    3c16:	4083      	lsls	r3, r0
    3c18:	430b      	orrs	r3, r1
    3c1a:	602b      	str	r3, [r5, #0]
    3c1c:	4664      	mov	r4, ip
    3c1e:	e7b7      	b.n	3b90 <_vfiprintf_r+0x8c>
    3c20:	9b05      	ldr	r3, [sp, #20]
    3c22:	1d18      	adds	r0, r3, #4
    3c24:	681b      	ldr	r3, [r3, #0]
    3c26:	9005      	str	r0, [sp, #20]
    3c28:	2b00      	cmp	r3, #0
    3c2a:	db3a      	blt.n	3ca2 <_vfiprintf_r+0x19e>
    3c2c:	9309      	str	r3, [sp, #36]	; 0x24
    3c2e:	4664      	mov	r4, ip
    3c30:	7823      	ldrb	r3, [r4, #0]
    3c32:	2b2e      	cmp	r3, #46	; 0x2e
    3c34:	d10b      	bne.n	3c4e <_vfiprintf_r+0x14a>
    3c36:	7863      	ldrb	r3, [r4, #1]
    3c38:	1c62      	adds	r2, r4, #1
    3c3a:	2b2a      	cmp	r3, #42	; 0x2a
    3c3c:	d13f      	bne.n	3cbe <_vfiprintf_r+0x1ba>
    3c3e:	9b05      	ldr	r3, [sp, #20]
    3c40:	3402      	adds	r4, #2
    3c42:	1d1a      	adds	r2, r3, #4
    3c44:	681b      	ldr	r3, [r3, #0]
    3c46:	9205      	str	r2, [sp, #20]
    3c48:	2b00      	cmp	r3, #0
    3c4a:	db35      	blt.n	3cb8 <_vfiprintf_r+0x1b4>
    3c4c:	9307      	str	r3, [sp, #28]
    3c4e:	7821      	ldrb	r1, [r4, #0]
    3c50:	2203      	movs	r2, #3
    3c52:	4836      	ldr	r0, [pc, #216]	; (3d2c <_vfiprintf_r+0x228>)
    3c54:	f000 fb82 	bl	435c <memchr>
    3c58:	2800      	cmp	r0, #0
    3c5a:	d007      	beq.n	3c6c <_vfiprintf_r+0x168>
    3c5c:	4b33      	ldr	r3, [pc, #204]	; (3d2c <_vfiprintf_r+0x228>)
    3c5e:	682a      	ldr	r2, [r5, #0]
    3c60:	1ac0      	subs	r0, r0, r3
    3c62:	2340      	movs	r3, #64	; 0x40
    3c64:	4083      	lsls	r3, r0
    3c66:	4313      	orrs	r3, r2
    3c68:	602b      	str	r3, [r5, #0]
    3c6a:	3401      	adds	r4, #1
    3c6c:	7821      	ldrb	r1, [r4, #0]
    3c6e:	1c63      	adds	r3, r4, #1
    3c70:	2206      	movs	r2, #6
    3c72:	482f      	ldr	r0, [pc, #188]	; (3d30 <_vfiprintf_r+0x22c>)
    3c74:	9302      	str	r3, [sp, #8]
    3c76:	7629      	strb	r1, [r5, #24]
    3c78:	f000 fb70 	bl	435c <memchr>
    3c7c:	2800      	cmp	r0, #0
    3c7e:	d044      	beq.n	3d0a <_vfiprintf_r+0x206>
    3c80:	4b2c      	ldr	r3, [pc, #176]	; (3d34 <_vfiprintf_r+0x230>)
    3c82:	2b00      	cmp	r3, #0
    3c84:	d12f      	bne.n	3ce6 <_vfiprintf_r+0x1e2>
    3c86:	6829      	ldr	r1, [r5, #0]
    3c88:	9b05      	ldr	r3, [sp, #20]
    3c8a:	2207      	movs	r2, #7
    3c8c:	05c9      	lsls	r1, r1, #23
    3c8e:	d528      	bpl.n	3ce2 <_vfiprintf_r+0x1de>
    3c90:	189b      	adds	r3, r3, r2
    3c92:	4393      	bics	r3, r2
    3c94:	3308      	adds	r3, #8
    3c96:	9305      	str	r3, [sp, #20]
    3c98:	696b      	ldr	r3, [r5, #20]
    3c9a:	9a03      	ldr	r2, [sp, #12]
    3c9c:	189b      	adds	r3, r3, r2
    3c9e:	616b      	str	r3, [r5, #20]
    3ca0:	e74f      	b.n	3b42 <_vfiprintf_r+0x3e>
    3ca2:	425b      	negs	r3, r3
    3ca4:	60eb      	str	r3, [r5, #12]
    3ca6:	2302      	movs	r3, #2
    3ca8:	430b      	orrs	r3, r1
    3caa:	602b      	str	r3, [r5, #0]
    3cac:	e7bf      	b.n	3c2e <_vfiprintf_r+0x12a>
    3cae:	434b      	muls	r3, r1
    3cb0:	3401      	adds	r4, #1
    3cb2:	189b      	adds	r3, r3, r2
    3cb4:	2001      	movs	r0, #1
    3cb6:	e789      	b.n	3bcc <_vfiprintf_r+0xc8>
    3cb8:	2301      	movs	r3, #1
    3cba:	425b      	negs	r3, r3
    3cbc:	e7c6      	b.n	3c4c <_vfiprintf_r+0x148>
    3cbe:	2300      	movs	r3, #0
    3cc0:	0014      	movs	r4, r2
    3cc2:	200a      	movs	r0, #10
    3cc4:	001a      	movs	r2, r3
    3cc6:	606b      	str	r3, [r5, #4]
    3cc8:	7821      	ldrb	r1, [r4, #0]
    3cca:	3930      	subs	r1, #48	; 0x30
    3ccc:	2909      	cmp	r1, #9
    3cce:	d903      	bls.n	3cd8 <_vfiprintf_r+0x1d4>
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d0bc      	beq.n	3c4e <_vfiprintf_r+0x14a>
    3cd4:	9207      	str	r2, [sp, #28]
    3cd6:	e7ba      	b.n	3c4e <_vfiprintf_r+0x14a>
    3cd8:	4342      	muls	r2, r0
    3cda:	3401      	adds	r4, #1
    3cdc:	1852      	adds	r2, r2, r1
    3cde:	2301      	movs	r3, #1
    3ce0:	e7f2      	b.n	3cc8 <_vfiprintf_r+0x1c4>
    3ce2:	3307      	adds	r3, #7
    3ce4:	e7d5      	b.n	3c92 <_vfiprintf_r+0x18e>
    3ce6:	ab05      	add	r3, sp, #20
    3ce8:	9300      	str	r3, [sp, #0]
    3cea:	003a      	movs	r2, r7
    3cec:	4b12      	ldr	r3, [pc, #72]	; (3d38 <_vfiprintf_r+0x234>)
    3cee:	0029      	movs	r1, r5
    3cf0:	0030      	movs	r0, r6
    3cf2:	e000      	b.n	3cf6 <_vfiprintf_r+0x1f2>
    3cf4:	bf00      	nop
    3cf6:	9003      	str	r0, [sp, #12]
    3cf8:	9b03      	ldr	r3, [sp, #12]
    3cfa:	3301      	adds	r3, #1
    3cfc:	d1cc      	bne.n	3c98 <_vfiprintf_r+0x194>
    3cfe:	89bb      	ldrh	r3, [r7, #12]
    3d00:	065b      	lsls	r3, r3, #25
    3d02:	d500      	bpl.n	3d06 <_vfiprintf_r+0x202>
    3d04:	e77b      	b.n	3bfe <_vfiprintf_r+0xfa>
    3d06:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3d08:	e77b      	b.n	3c02 <_vfiprintf_r+0xfe>
    3d0a:	ab05      	add	r3, sp, #20
    3d0c:	9300      	str	r3, [sp, #0]
    3d0e:	003a      	movs	r2, r7
    3d10:	4b09      	ldr	r3, [pc, #36]	; (3d38 <_vfiprintf_r+0x234>)
    3d12:	0029      	movs	r1, r5
    3d14:	0030      	movs	r0, r6
    3d16:	f000 f87f 	bl	3e18 <_printf_i>
    3d1a:	e7ec      	b.n	3cf6 <_vfiprintf_r+0x1f2>
    3d1c:	00006534 	.word	0x00006534
    3d20:	00006574 	.word	0x00006574
    3d24:	00006554 	.word	0x00006554
    3d28:	00006514 	.word	0x00006514
    3d2c:	0000657a 	.word	0x0000657a
    3d30:	0000657e 	.word	0x0000657e
    3d34:	00000000 	.word	0x00000000
    3d38:	00003adf 	.word	0x00003adf

00003d3c <_printf_common>:
    3d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3d3e:	0015      	movs	r5, r2
    3d40:	9301      	str	r3, [sp, #4]
    3d42:	688a      	ldr	r2, [r1, #8]
    3d44:	690b      	ldr	r3, [r1, #16]
    3d46:	9000      	str	r0, [sp, #0]
    3d48:	000c      	movs	r4, r1
    3d4a:	4293      	cmp	r3, r2
    3d4c:	da00      	bge.n	3d50 <_printf_common+0x14>
    3d4e:	0013      	movs	r3, r2
    3d50:	0022      	movs	r2, r4
    3d52:	602b      	str	r3, [r5, #0]
    3d54:	3243      	adds	r2, #67	; 0x43
    3d56:	7812      	ldrb	r2, [r2, #0]
    3d58:	2a00      	cmp	r2, #0
    3d5a:	d001      	beq.n	3d60 <_printf_common+0x24>
    3d5c:	3301      	adds	r3, #1
    3d5e:	602b      	str	r3, [r5, #0]
    3d60:	6823      	ldr	r3, [r4, #0]
    3d62:	069b      	lsls	r3, r3, #26
    3d64:	d502      	bpl.n	3d6c <_printf_common+0x30>
    3d66:	682b      	ldr	r3, [r5, #0]
    3d68:	3302      	adds	r3, #2
    3d6a:	602b      	str	r3, [r5, #0]
    3d6c:	2706      	movs	r7, #6
    3d6e:	6823      	ldr	r3, [r4, #0]
    3d70:	401f      	ands	r7, r3
    3d72:	d027      	beq.n	3dc4 <_printf_common+0x88>
    3d74:	0023      	movs	r3, r4
    3d76:	3343      	adds	r3, #67	; 0x43
    3d78:	781b      	ldrb	r3, [r3, #0]
    3d7a:	1e5a      	subs	r2, r3, #1
    3d7c:	4193      	sbcs	r3, r2
    3d7e:	6822      	ldr	r2, [r4, #0]
    3d80:	0692      	lsls	r2, r2, #26
    3d82:	d430      	bmi.n	3de6 <_printf_common+0xaa>
    3d84:	0022      	movs	r2, r4
    3d86:	9901      	ldr	r1, [sp, #4]
    3d88:	3243      	adds	r2, #67	; 0x43
    3d8a:	9800      	ldr	r0, [sp, #0]
    3d8c:	9e08      	ldr	r6, [sp, #32]
    3d8e:	47b0      	blx	r6
    3d90:	1c43      	adds	r3, r0, #1
    3d92:	d025      	beq.n	3de0 <_printf_common+0xa4>
    3d94:	2306      	movs	r3, #6
    3d96:	6820      	ldr	r0, [r4, #0]
    3d98:	682a      	ldr	r2, [r5, #0]
    3d9a:	68e1      	ldr	r1, [r4, #12]
    3d9c:	4003      	ands	r3, r0
    3d9e:	2500      	movs	r5, #0
    3da0:	2b04      	cmp	r3, #4
    3da2:	d103      	bne.n	3dac <_printf_common+0x70>
    3da4:	1a8d      	subs	r5, r1, r2
    3da6:	43eb      	mvns	r3, r5
    3da8:	17db      	asrs	r3, r3, #31
    3daa:	401d      	ands	r5, r3
    3dac:	68a3      	ldr	r3, [r4, #8]
    3dae:	6922      	ldr	r2, [r4, #16]
    3db0:	4293      	cmp	r3, r2
    3db2:	dd01      	ble.n	3db8 <_printf_common+0x7c>
    3db4:	1a9b      	subs	r3, r3, r2
    3db6:	18ed      	adds	r5, r5, r3
    3db8:	2700      	movs	r7, #0
    3dba:	42bd      	cmp	r5, r7
    3dbc:	d120      	bne.n	3e00 <_printf_common+0xc4>
    3dbe:	2000      	movs	r0, #0
    3dc0:	e010      	b.n	3de4 <_printf_common+0xa8>
    3dc2:	3701      	adds	r7, #1
    3dc4:	68e3      	ldr	r3, [r4, #12]
    3dc6:	682a      	ldr	r2, [r5, #0]
    3dc8:	1a9b      	subs	r3, r3, r2
    3dca:	429f      	cmp	r7, r3
    3dcc:	dad2      	bge.n	3d74 <_printf_common+0x38>
    3dce:	0022      	movs	r2, r4
    3dd0:	2301      	movs	r3, #1
    3dd2:	3219      	adds	r2, #25
    3dd4:	9901      	ldr	r1, [sp, #4]
    3dd6:	9800      	ldr	r0, [sp, #0]
    3dd8:	9e08      	ldr	r6, [sp, #32]
    3dda:	47b0      	blx	r6
    3ddc:	1c43      	adds	r3, r0, #1
    3dde:	d1f0      	bne.n	3dc2 <_printf_common+0x86>
    3de0:	2001      	movs	r0, #1
    3de2:	4240      	negs	r0, r0
    3de4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3de6:	2030      	movs	r0, #48	; 0x30
    3de8:	18e1      	adds	r1, r4, r3
    3dea:	3143      	adds	r1, #67	; 0x43
    3dec:	7008      	strb	r0, [r1, #0]
    3dee:	0021      	movs	r1, r4
    3df0:	1c5a      	adds	r2, r3, #1
    3df2:	3145      	adds	r1, #69	; 0x45
    3df4:	7809      	ldrb	r1, [r1, #0]
    3df6:	18a2      	adds	r2, r4, r2
    3df8:	3243      	adds	r2, #67	; 0x43
    3dfa:	3302      	adds	r3, #2
    3dfc:	7011      	strb	r1, [r2, #0]
    3dfe:	e7c1      	b.n	3d84 <_printf_common+0x48>
    3e00:	0022      	movs	r2, r4
    3e02:	2301      	movs	r3, #1
    3e04:	321a      	adds	r2, #26
    3e06:	9901      	ldr	r1, [sp, #4]
    3e08:	9800      	ldr	r0, [sp, #0]
    3e0a:	9e08      	ldr	r6, [sp, #32]
    3e0c:	47b0      	blx	r6
    3e0e:	1c43      	adds	r3, r0, #1
    3e10:	d0e6      	beq.n	3de0 <_printf_common+0xa4>
    3e12:	3701      	adds	r7, #1
    3e14:	e7d1      	b.n	3dba <_printf_common+0x7e>
	...

00003e18 <_printf_i>:
    3e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e1a:	b08b      	sub	sp, #44	; 0x2c
    3e1c:	9206      	str	r2, [sp, #24]
    3e1e:	000a      	movs	r2, r1
    3e20:	3243      	adds	r2, #67	; 0x43
    3e22:	9307      	str	r3, [sp, #28]
    3e24:	9005      	str	r0, [sp, #20]
    3e26:	9204      	str	r2, [sp, #16]
    3e28:	7e0a      	ldrb	r2, [r1, #24]
    3e2a:	000c      	movs	r4, r1
    3e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3e2e:	2a6e      	cmp	r2, #110	; 0x6e
    3e30:	d100      	bne.n	3e34 <_printf_i+0x1c>
    3e32:	e08f      	b.n	3f54 <_printf_i+0x13c>
    3e34:	d817      	bhi.n	3e66 <_printf_i+0x4e>
    3e36:	2a63      	cmp	r2, #99	; 0x63
    3e38:	d02c      	beq.n	3e94 <_printf_i+0x7c>
    3e3a:	d808      	bhi.n	3e4e <_printf_i+0x36>
    3e3c:	2a00      	cmp	r2, #0
    3e3e:	d100      	bne.n	3e42 <_printf_i+0x2a>
    3e40:	e099      	b.n	3f76 <_printf_i+0x15e>
    3e42:	2a58      	cmp	r2, #88	; 0x58
    3e44:	d054      	beq.n	3ef0 <_printf_i+0xd8>
    3e46:	0026      	movs	r6, r4
    3e48:	3642      	adds	r6, #66	; 0x42
    3e4a:	7032      	strb	r2, [r6, #0]
    3e4c:	e029      	b.n	3ea2 <_printf_i+0x8a>
    3e4e:	2a64      	cmp	r2, #100	; 0x64
    3e50:	d001      	beq.n	3e56 <_printf_i+0x3e>
    3e52:	2a69      	cmp	r2, #105	; 0x69
    3e54:	d1f7      	bne.n	3e46 <_printf_i+0x2e>
    3e56:	6821      	ldr	r1, [r4, #0]
    3e58:	681a      	ldr	r2, [r3, #0]
    3e5a:	0608      	lsls	r0, r1, #24
    3e5c:	d523      	bpl.n	3ea6 <_printf_i+0x8e>
    3e5e:	1d11      	adds	r1, r2, #4
    3e60:	6019      	str	r1, [r3, #0]
    3e62:	6815      	ldr	r5, [r2, #0]
    3e64:	e025      	b.n	3eb2 <_printf_i+0x9a>
    3e66:	2a73      	cmp	r2, #115	; 0x73
    3e68:	d100      	bne.n	3e6c <_printf_i+0x54>
    3e6a:	e088      	b.n	3f7e <_printf_i+0x166>
    3e6c:	d808      	bhi.n	3e80 <_printf_i+0x68>
    3e6e:	2a6f      	cmp	r2, #111	; 0x6f
    3e70:	d029      	beq.n	3ec6 <_printf_i+0xae>
    3e72:	2a70      	cmp	r2, #112	; 0x70
    3e74:	d1e7      	bne.n	3e46 <_printf_i+0x2e>
    3e76:	2220      	movs	r2, #32
    3e78:	6809      	ldr	r1, [r1, #0]
    3e7a:	430a      	orrs	r2, r1
    3e7c:	6022      	str	r2, [r4, #0]
    3e7e:	e003      	b.n	3e88 <_printf_i+0x70>
    3e80:	2a75      	cmp	r2, #117	; 0x75
    3e82:	d020      	beq.n	3ec6 <_printf_i+0xae>
    3e84:	2a78      	cmp	r2, #120	; 0x78
    3e86:	d1de      	bne.n	3e46 <_printf_i+0x2e>
    3e88:	0022      	movs	r2, r4
    3e8a:	2178      	movs	r1, #120	; 0x78
    3e8c:	3245      	adds	r2, #69	; 0x45
    3e8e:	7011      	strb	r1, [r2, #0]
    3e90:	4a6c      	ldr	r2, [pc, #432]	; (4044 <_printf_i+0x22c>)
    3e92:	e030      	b.n	3ef6 <_printf_i+0xde>
    3e94:	000e      	movs	r6, r1
    3e96:	681a      	ldr	r2, [r3, #0]
    3e98:	3642      	adds	r6, #66	; 0x42
    3e9a:	1d11      	adds	r1, r2, #4
    3e9c:	6019      	str	r1, [r3, #0]
    3e9e:	6813      	ldr	r3, [r2, #0]
    3ea0:	7033      	strb	r3, [r6, #0]
    3ea2:	2301      	movs	r3, #1
    3ea4:	e079      	b.n	3f9a <_printf_i+0x182>
    3ea6:	0649      	lsls	r1, r1, #25
    3ea8:	d5d9      	bpl.n	3e5e <_printf_i+0x46>
    3eaa:	1d11      	adds	r1, r2, #4
    3eac:	6019      	str	r1, [r3, #0]
    3eae:	2300      	movs	r3, #0
    3eb0:	5ed5      	ldrsh	r5, [r2, r3]
    3eb2:	2d00      	cmp	r5, #0
    3eb4:	da03      	bge.n	3ebe <_printf_i+0xa6>
    3eb6:	232d      	movs	r3, #45	; 0x2d
    3eb8:	9a04      	ldr	r2, [sp, #16]
    3eba:	426d      	negs	r5, r5
    3ebc:	7013      	strb	r3, [r2, #0]
    3ebe:	4b62      	ldr	r3, [pc, #392]	; (4048 <_printf_i+0x230>)
    3ec0:	270a      	movs	r7, #10
    3ec2:	9303      	str	r3, [sp, #12]
    3ec4:	e02f      	b.n	3f26 <_printf_i+0x10e>
    3ec6:	6820      	ldr	r0, [r4, #0]
    3ec8:	6819      	ldr	r1, [r3, #0]
    3eca:	0605      	lsls	r5, r0, #24
    3ecc:	d503      	bpl.n	3ed6 <_printf_i+0xbe>
    3ece:	1d08      	adds	r0, r1, #4
    3ed0:	6018      	str	r0, [r3, #0]
    3ed2:	680d      	ldr	r5, [r1, #0]
    3ed4:	e005      	b.n	3ee2 <_printf_i+0xca>
    3ed6:	0640      	lsls	r0, r0, #25
    3ed8:	d5f9      	bpl.n	3ece <_printf_i+0xb6>
    3eda:	680d      	ldr	r5, [r1, #0]
    3edc:	1d08      	adds	r0, r1, #4
    3ede:	6018      	str	r0, [r3, #0]
    3ee0:	b2ad      	uxth	r5, r5
    3ee2:	4b59      	ldr	r3, [pc, #356]	; (4048 <_printf_i+0x230>)
    3ee4:	2708      	movs	r7, #8
    3ee6:	9303      	str	r3, [sp, #12]
    3ee8:	2a6f      	cmp	r2, #111	; 0x6f
    3eea:	d018      	beq.n	3f1e <_printf_i+0x106>
    3eec:	270a      	movs	r7, #10
    3eee:	e016      	b.n	3f1e <_printf_i+0x106>
    3ef0:	3145      	adds	r1, #69	; 0x45
    3ef2:	700a      	strb	r2, [r1, #0]
    3ef4:	4a54      	ldr	r2, [pc, #336]	; (4048 <_printf_i+0x230>)
    3ef6:	9203      	str	r2, [sp, #12]
    3ef8:	681a      	ldr	r2, [r3, #0]
    3efa:	6821      	ldr	r1, [r4, #0]
    3efc:	1d10      	adds	r0, r2, #4
    3efe:	6018      	str	r0, [r3, #0]
    3f00:	6815      	ldr	r5, [r2, #0]
    3f02:	0608      	lsls	r0, r1, #24
    3f04:	d522      	bpl.n	3f4c <_printf_i+0x134>
    3f06:	07cb      	lsls	r3, r1, #31
    3f08:	d502      	bpl.n	3f10 <_printf_i+0xf8>
    3f0a:	2320      	movs	r3, #32
    3f0c:	4319      	orrs	r1, r3
    3f0e:	6021      	str	r1, [r4, #0]
    3f10:	2710      	movs	r7, #16
    3f12:	2d00      	cmp	r5, #0
    3f14:	d103      	bne.n	3f1e <_printf_i+0x106>
    3f16:	2320      	movs	r3, #32
    3f18:	6822      	ldr	r2, [r4, #0]
    3f1a:	439a      	bics	r2, r3
    3f1c:	6022      	str	r2, [r4, #0]
    3f1e:	0023      	movs	r3, r4
    3f20:	2200      	movs	r2, #0
    3f22:	3343      	adds	r3, #67	; 0x43
    3f24:	701a      	strb	r2, [r3, #0]
    3f26:	6863      	ldr	r3, [r4, #4]
    3f28:	60a3      	str	r3, [r4, #8]
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	db5c      	blt.n	3fe8 <_printf_i+0x1d0>
    3f2e:	2204      	movs	r2, #4
    3f30:	6821      	ldr	r1, [r4, #0]
    3f32:	4391      	bics	r1, r2
    3f34:	6021      	str	r1, [r4, #0]
    3f36:	2d00      	cmp	r5, #0
    3f38:	d158      	bne.n	3fec <_printf_i+0x1d4>
    3f3a:	9e04      	ldr	r6, [sp, #16]
    3f3c:	2b00      	cmp	r3, #0
    3f3e:	d064      	beq.n	400a <_printf_i+0x1f2>
    3f40:	0026      	movs	r6, r4
    3f42:	9b03      	ldr	r3, [sp, #12]
    3f44:	3642      	adds	r6, #66	; 0x42
    3f46:	781b      	ldrb	r3, [r3, #0]
    3f48:	7033      	strb	r3, [r6, #0]
    3f4a:	e05e      	b.n	400a <_printf_i+0x1f2>
    3f4c:	0648      	lsls	r0, r1, #25
    3f4e:	d5da      	bpl.n	3f06 <_printf_i+0xee>
    3f50:	b2ad      	uxth	r5, r5
    3f52:	e7d8      	b.n	3f06 <_printf_i+0xee>
    3f54:	6809      	ldr	r1, [r1, #0]
    3f56:	681a      	ldr	r2, [r3, #0]
    3f58:	0608      	lsls	r0, r1, #24
    3f5a:	d505      	bpl.n	3f68 <_printf_i+0x150>
    3f5c:	1d11      	adds	r1, r2, #4
    3f5e:	6019      	str	r1, [r3, #0]
    3f60:	6813      	ldr	r3, [r2, #0]
    3f62:	6962      	ldr	r2, [r4, #20]
    3f64:	601a      	str	r2, [r3, #0]
    3f66:	e006      	b.n	3f76 <_printf_i+0x15e>
    3f68:	0649      	lsls	r1, r1, #25
    3f6a:	d5f7      	bpl.n	3f5c <_printf_i+0x144>
    3f6c:	1d11      	adds	r1, r2, #4
    3f6e:	6019      	str	r1, [r3, #0]
    3f70:	6813      	ldr	r3, [r2, #0]
    3f72:	8aa2      	ldrh	r2, [r4, #20]
    3f74:	801a      	strh	r2, [r3, #0]
    3f76:	2300      	movs	r3, #0
    3f78:	9e04      	ldr	r6, [sp, #16]
    3f7a:	6123      	str	r3, [r4, #16]
    3f7c:	e054      	b.n	4028 <_printf_i+0x210>
    3f7e:	681a      	ldr	r2, [r3, #0]
    3f80:	1d11      	adds	r1, r2, #4
    3f82:	6019      	str	r1, [r3, #0]
    3f84:	6816      	ldr	r6, [r2, #0]
    3f86:	2100      	movs	r1, #0
    3f88:	6862      	ldr	r2, [r4, #4]
    3f8a:	0030      	movs	r0, r6
    3f8c:	f000 f9e6 	bl	435c <memchr>
    3f90:	2800      	cmp	r0, #0
    3f92:	d001      	beq.n	3f98 <_printf_i+0x180>
    3f94:	1b80      	subs	r0, r0, r6
    3f96:	6060      	str	r0, [r4, #4]
    3f98:	6863      	ldr	r3, [r4, #4]
    3f9a:	6123      	str	r3, [r4, #16]
    3f9c:	2300      	movs	r3, #0
    3f9e:	9a04      	ldr	r2, [sp, #16]
    3fa0:	7013      	strb	r3, [r2, #0]
    3fa2:	e041      	b.n	4028 <_printf_i+0x210>
    3fa4:	6923      	ldr	r3, [r4, #16]
    3fa6:	0032      	movs	r2, r6
    3fa8:	9906      	ldr	r1, [sp, #24]
    3faa:	9805      	ldr	r0, [sp, #20]
    3fac:	9d07      	ldr	r5, [sp, #28]
    3fae:	47a8      	blx	r5
    3fb0:	1c43      	adds	r3, r0, #1
    3fb2:	d043      	beq.n	403c <_printf_i+0x224>
    3fb4:	6823      	ldr	r3, [r4, #0]
    3fb6:	2500      	movs	r5, #0
    3fb8:	079b      	lsls	r3, r3, #30
    3fba:	d40f      	bmi.n	3fdc <_printf_i+0x1c4>
    3fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3fbe:	68e0      	ldr	r0, [r4, #12]
    3fc0:	4298      	cmp	r0, r3
    3fc2:	da3d      	bge.n	4040 <_printf_i+0x228>
    3fc4:	0018      	movs	r0, r3
    3fc6:	e03b      	b.n	4040 <_printf_i+0x228>
    3fc8:	0022      	movs	r2, r4
    3fca:	2301      	movs	r3, #1
    3fcc:	3219      	adds	r2, #25
    3fce:	9906      	ldr	r1, [sp, #24]
    3fd0:	9805      	ldr	r0, [sp, #20]
    3fd2:	9e07      	ldr	r6, [sp, #28]
    3fd4:	47b0      	blx	r6
    3fd6:	1c43      	adds	r3, r0, #1
    3fd8:	d030      	beq.n	403c <_printf_i+0x224>
    3fda:	3501      	adds	r5, #1
    3fdc:	68e3      	ldr	r3, [r4, #12]
    3fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3fe0:	1a9b      	subs	r3, r3, r2
    3fe2:	429d      	cmp	r5, r3
    3fe4:	dbf0      	blt.n	3fc8 <_printf_i+0x1b0>
    3fe6:	e7e9      	b.n	3fbc <_printf_i+0x1a4>
    3fe8:	2d00      	cmp	r5, #0
    3fea:	d0a9      	beq.n	3f40 <_printf_i+0x128>
    3fec:	9e04      	ldr	r6, [sp, #16]
    3fee:	0028      	movs	r0, r5
    3ff0:	0039      	movs	r1, r7
    3ff2:	f7ff f90b 	bl	320c <__aeabi_uidivmod>
    3ff6:	9b03      	ldr	r3, [sp, #12]
    3ff8:	3e01      	subs	r6, #1
    3ffa:	5c5b      	ldrb	r3, [r3, r1]
    3ffc:	0028      	movs	r0, r5
    3ffe:	7033      	strb	r3, [r6, #0]
    4000:	0039      	movs	r1, r7
    4002:	f7ff f87d 	bl	3100 <__udivsi3>
    4006:	1e05      	subs	r5, r0, #0
    4008:	d1f1      	bne.n	3fee <_printf_i+0x1d6>
    400a:	2f08      	cmp	r7, #8
    400c:	d109      	bne.n	4022 <_printf_i+0x20a>
    400e:	6823      	ldr	r3, [r4, #0]
    4010:	07db      	lsls	r3, r3, #31
    4012:	d506      	bpl.n	4022 <_printf_i+0x20a>
    4014:	6863      	ldr	r3, [r4, #4]
    4016:	6922      	ldr	r2, [r4, #16]
    4018:	4293      	cmp	r3, r2
    401a:	dc02      	bgt.n	4022 <_printf_i+0x20a>
    401c:	2330      	movs	r3, #48	; 0x30
    401e:	3e01      	subs	r6, #1
    4020:	7033      	strb	r3, [r6, #0]
    4022:	9b04      	ldr	r3, [sp, #16]
    4024:	1b9b      	subs	r3, r3, r6
    4026:	6123      	str	r3, [r4, #16]
    4028:	9b07      	ldr	r3, [sp, #28]
    402a:	aa09      	add	r2, sp, #36	; 0x24
    402c:	9300      	str	r3, [sp, #0]
    402e:	0021      	movs	r1, r4
    4030:	9b06      	ldr	r3, [sp, #24]
    4032:	9805      	ldr	r0, [sp, #20]
    4034:	f7ff fe82 	bl	3d3c <_printf_common>
    4038:	1c43      	adds	r3, r0, #1
    403a:	d1b3      	bne.n	3fa4 <_printf_i+0x18c>
    403c:	2001      	movs	r0, #1
    403e:	4240      	negs	r0, r0
    4040:	b00b      	add	sp, #44	; 0x2c
    4042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4044:	00006596 	.word	0x00006596
    4048:	00006585 	.word	0x00006585

0000404c <_sbrk_r>:
    404c:	2300      	movs	r3, #0
    404e:	b570      	push	{r4, r5, r6, lr}
    4050:	4c06      	ldr	r4, [pc, #24]	; (406c <_sbrk_r+0x20>)
    4052:	0005      	movs	r5, r0
    4054:	0008      	movs	r0, r1
    4056:	6023      	str	r3, [r4, #0]
    4058:	f7fd fe48 	bl	1cec <_sbrk>
    405c:	1c43      	adds	r3, r0, #1
    405e:	d103      	bne.n	4068 <_sbrk_r+0x1c>
    4060:	6823      	ldr	r3, [r4, #0]
    4062:	2b00      	cmp	r3, #0
    4064:	d000      	beq.n	4068 <_sbrk_r+0x1c>
    4066:	602b      	str	r3, [r5, #0]
    4068:	bd70      	pop	{r4, r5, r6, pc}
    406a:	46c0      	nop			; (mov r8, r8)
    406c:	20000310 	.word	0x20000310

00004070 <__sread>:
    4070:	b570      	push	{r4, r5, r6, lr}
    4072:	000c      	movs	r4, r1
    4074:	250e      	movs	r5, #14
    4076:	5f49      	ldrsh	r1, [r1, r5]
    4078:	f000 f97e 	bl	4378 <_read_r>
    407c:	2800      	cmp	r0, #0
    407e:	db03      	blt.n	4088 <__sread+0x18>
    4080:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4082:	181b      	adds	r3, r3, r0
    4084:	6563      	str	r3, [r4, #84]	; 0x54
    4086:	bd70      	pop	{r4, r5, r6, pc}
    4088:	89a3      	ldrh	r3, [r4, #12]
    408a:	4a02      	ldr	r2, [pc, #8]	; (4094 <__sread+0x24>)
    408c:	4013      	ands	r3, r2
    408e:	81a3      	strh	r3, [r4, #12]
    4090:	e7f9      	b.n	4086 <__sread+0x16>
    4092:	46c0      	nop			; (mov r8, r8)
    4094:	ffffefff 	.word	0xffffefff

00004098 <__swrite>:
    4098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    409a:	001f      	movs	r7, r3
    409c:	898b      	ldrh	r3, [r1, #12]
    409e:	0005      	movs	r5, r0
    40a0:	000c      	movs	r4, r1
    40a2:	0016      	movs	r6, r2
    40a4:	05db      	lsls	r3, r3, #23
    40a6:	d505      	bpl.n	40b4 <__swrite+0x1c>
    40a8:	230e      	movs	r3, #14
    40aa:	5ec9      	ldrsh	r1, [r1, r3]
    40ac:	2200      	movs	r2, #0
    40ae:	2302      	movs	r3, #2
    40b0:	f000 f940 	bl	4334 <_lseek_r>
    40b4:	89a3      	ldrh	r3, [r4, #12]
    40b6:	4a05      	ldr	r2, [pc, #20]	; (40cc <__swrite+0x34>)
    40b8:	0028      	movs	r0, r5
    40ba:	4013      	ands	r3, r2
    40bc:	81a3      	strh	r3, [r4, #12]
    40be:	0032      	movs	r2, r6
    40c0:	230e      	movs	r3, #14
    40c2:	5ee1      	ldrsh	r1, [r4, r3]
    40c4:	003b      	movs	r3, r7
    40c6:	f000 f875 	bl	41b4 <_write_r>
    40ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40cc:	ffffefff 	.word	0xffffefff

000040d0 <__sseek>:
    40d0:	b570      	push	{r4, r5, r6, lr}
    40d2:	000c      	movs	r4, r1
    40d4:	250e      	movs	r5, #14
    40d6:	5f49      	ldrsh	r1, [r1, r5]
    40d8:	f000 f92c 	bl	4334 <_lseek_r>
    40dc:	89a3      	ldrh	r3, [r4, #12]
    40de:	1c42      	adds	r2, r0, #1
    40e0:	d103      	bne.n	40ea <__sseek+0x1a>
    40e2:	4a05      	ldr	r2, [pc, #20]	; (40f8 <__sseek+0x28>)
    40e4:	4013      	ands	r3, r2
    40e6:	81a3      	strh	r3, [r4, #12]
    40e8:	bd70      	pop	{r4, r5, r6, pc}
    40ea:	2280      	movs	r2, #128	; 0x80
    40ec:	0152      	lsls	r2, r2, #5
    40ee:	4313      	orrs	r3, r2
    40f0:	81a3      	strh	r3, [r4, #12]
    40f2:	6560      	str	r0, [r4, #84]	; 0x54
    40f4:	e7f8      	b.n	40e8 <__sseek+0x18>
    40f6:	46c0      	nop			; (mov r8, r8)
    40f8:	ffffefff 	.word	0xffffefff

000040fc <__sclose>:
    40fc:	b510      	push	{r4, lr}
    40fe:	230e      	movs	r3, #14
    4100:	5ec9      	ldrsh	r1, [r1, r3]
    4102:	f000 f8e1 	bl	42c8 <_close_r>
    4106:	bd10      	pop	{r4, pc}

00004108 <__swbuf_r>:
    4108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    410a:	0005      	movs	r5, r0
    410c:	000e      	movs	r6, r1
    410e:	0014      	movs	r4, r2
    4110:	2800      	cmp	r0, #0
    4112:	d004      	beq.n	411e <__swbuf_r+0x16>
    4114:	6983      	ldr	r3, [r0, #24]
    4116:	2b00      	cmp	r3, #0
    4118:	d101      	bne.n	411e <__swbuf_r+0x16>
    411a:	f7ff fb17 	bl	374c <__sinit>
    411e:	4b22      	ldr	r3, [pc, #136]	; (41a8 <__swbuf_r+0xa0>)
    4120:	429c      	cmp	r4, r3
    4122:	d12d      	bne.n	4180 <__swbuf_r+0x78>
    4124:	686c      	ldr	r4, [r5, #4]
    4126:	69a3      	ldr	r3, [r4, #24]
    4128:	60a3      	str	r3, [r4, #8]
    412a:	89a3      	ldrh	r3, [r4, #12]
    412c:	071b      	lsls	r3, r3, #28
    412e:	d531      	bpl.n	4194 <__swbuf_r+0x8c>
    4130:	6923      	ldr	r3, [r4, #16]
    4132:	2b00      	cmp	r3, #0
    4134:	d02e      	beq.n	4194 <__swbuf_r+0x8c>
    4136:	6823      	ldr	r3, [r4, #0]
    4138:	6922      	ldr	r2, [r4, #16]
    413a:	b2f7      	uxtb	r7, r6
    413c:	1a98      	subs	r0, r3, r2
    413e:	6963      	ldr	r3, [r4, #20]
    4140:	b2f6      	uxtb	r6, r6
    4142:	4298      	cmp	r0, r3
    4144:	db05      	blt.n	4152 <__swbuf_r+0x4a>
    4146:	0021      	movs	r1, r4
    4148:	0028      	movs	r0, r5
    414a:	f7ff fa91 	bl	3670 <_fflush_r>
    414e:	2800      	cmp	r0, #0
    4150:	d126      	bne.n	41a0 <__swbuf_r+0x98>
    4152:	68a3      	ldr	r3, [r4, #8]
    4154:	3001      	adds	r0, #1
    4156:	3b01      	subs	r3, #1
    4158:	60a3      	str	r3, [r4, #8]
    415a:	6823      	ldr	r3, [r4, #0]
    415c:	1c5a      	adds	r2, r3, #1
    415e:	6022      	str	r2, [r4, #0]
    4160:	701f      	strb	r7, [r3, #0]
    4162:	6963      	ldr	r3, [r4, #20]
    4164:	4298      	cmp	r0, r3
    4166:	d004      	beq.n	4172 <__swbuf_r+0x6a>
    4168:	89a3      	ldrh	r3, [r4, #12]
    416a:	07db      	lsls	r3, r3, #31
    416c:	d51a      	bpl.n	41a4 <__swbuf_r+0x9c>
    416e:	2e0a      	cmp	r6, #10
    4170:	d118      	bne.n	41a4 <__swbuf_r+0x9c>
    4172:	0021      	movs	r1, r4
    4174:	0028      	movs	r0, r5
    4176:	f7ff fa7b 	bl	3670 <_fflush_r>
    417a:	2800      	cmp	r0, #0
    417c:	d012      	beq.n	41a4 <__swbuf_r+0x9c>
    417e:	e00f      	b.n	41a0 <__swbuf_r+0x98>
    4180:	4b0a      	ldr	r3, [pc, #40]	; (41ac <__swbuf_r+0xa4>)
    4182:	429c      	cmp	r4, r3
    4184:	d101      	bne.n	418a <__swbuf_r+0x82>
    4186:	68ac      	ldr	r4, [r5, #8]
    4188:	e7cd      	b.n	4126 <__swbuf_r+0x1e>
    418a:	4b09      	ldr	r3, [pc, #36]	; (41b0 <__swbuf_r+0xa8>)
    418c:	429c      	cmp	r4, r3
    418e:	d1ca      	bne.n	4126 <__swbuf_r+0x1e>
    4190:	68ec      	ldr	r4, [r5, #12]
    4192:	e7c8      	b.n	4126 <__swbuf_r+0x1e>
    4194:	0021      	movs	r1, r4
    4196:	0028      	movs	r0, r5
    4198:	f000 f820 	bl	41dc <__swsetup_r>
    419c:	2800      	cmp	r0, #0
    419e:	d0ca      	beq.n	4136 <__swbuf_r+0x2e>
    41a0:	2601      	movs	r6, #1
    41a2:	4276      	negs	r6, r6
    41a4:	0030      	movs	r0, r6
    41a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41a8:	00006534 	.word	0x00006534
    41ac:	00006554 	.word	0x00006554
    41b0:	00006514 	.word	0x00006514

000041b4 <_write_r>:
    41b4:	b570      	push	{r4, r5, r6, lr}
    41b6:	0005      	movs	r5, r0
    41b8:	0008      	movs	r0, r1
    41ba:	0011      	movs	r1, r2
    41bc:	2200      	movs	r2, #0
    41be:	4c06      	ldr	r4, [pc, #24]	; (41d8 <_write_r+0x24>)
    41c0:	6022      	str	r2, [r4, #0]
    41c2:	001a      	movs	r2, r3
    41c4:	f7fd fd6a 	bl	1c9c <_write>
    41c8:	1c43      	adds	r3, r0, #1
    41ca:	d103      	bne.n	41d4 <_write_r+0x20>
    41cc:	6823      	ldr	r3, [r4, #0]
    41ce:	2b00      	cmp	r3, #0
    41d0:	d000      	beq.n	41d4 <_write_r+0x20>
    41d2:	602b      	str	r3, [r5, #0]
    41d4:	bd70      	pop	{r4, r5, r6, pc}
    41d6:	46c0      	nop			; (mov r8, r8)
    41d8:	20000310 	.word	0x20000310

000041dc <__swsetup_r>:
    41dc:	4b36      	ldr	r3, [pc, #216]	; (42b8 <__swsetup_r+0xdc>)
    41de:	b570      	push	{r4, r5, r6, lr}
    41e0:	681d      	ldr	r5, [r3, #0]
    41e2:	0006      	movs	r6, r0
    41e4:	000c      	movs	r4, r1
    41e6:	2d00      	cmp	r5, #0
    41e8:	d005      	beq.n	41f6 <__swsetup_r+0x1a>
    41ea:	69ab      	ldr	r3, [r5, #24]
    41ec:	2b00      	cmp	r3, #0
    41ee:	d102      	bne.n	41f6 <__swsetup_r+0x1a>
    41f0:	0028      	movs	r0, r5
    41f2:	f7ff faab 	bl	374c <__sinit>
    41f6:	4b31      	ldr	r3, [pc, #196]	; (42bc <__swsetup_r+0xe0>)
    41f8:	429c      	cmp	r4, r3
    41fa:	d10f      	bne.n	421c <__swsetup_r+0x40>
    41fc:	686c      	ldr	r4, [r5, #4]
    41fe:	230c      	movs	r3, #12
    4200:	5ee2      	ldrsh	r2, [r4, r3]
    4202:	b293      	uxth	r3, r2
    4204:	0719      	lsls	r1, r3, #28
    4206:	d42d      	bmi.n	4264 <__swsetup_r+0x88>
    4208:	06d9      	lsls	r1, r3, #27
    420a:	d411      	bmi.n	4230 <__swsetup_r+0x54>
    420c:	2309      	movs	r3, #9
    420e:	2001      	movs	r0, #1
    4210:	6033      	str	r3, [r6, #0]
    4212:	3337      	adds	r3, #55	; 0x37
    4214:	4313      	orrs	r3, r2
    4216:	81a3      	strh	r3, [r4, #12]
    4218:	4240      	negs	r0, r0
    421a:	bd70      	pop	{r4, r5, r6, pc}
    421c:	4b28      	ldr	r3, [pc, #160]	; (42c0 <__swsetup_r+0xe4>)
    421e:	429c      	cmp	r4, r3
    4220:	d101      	bne.n	4226 <__swsetup_r+0x4a>
    4222:	68ac      	ldr	r4, [r5, #8]
    4224:	e7eb      	b.n	41fe <__swsetup_r+0x22>
    4226:	4b27      	ldr	r3, [pc, #156]	; (42c4 <__swsetup_r+0xe8>)
    4228:	429c      	cmp	r4, r3
    422a:	d1e8      	bne.n	41fe <__swsetup_r+0x22>
    422c:	68ec      	ldr	r4, [r5, #12]
    422e:	e7e6      	b.n	41fe <__swsetup_r+0x22>
    4230:	075b      	lsls	r3, r3, #29
    4232:	d513      	bpl.n	425c <__swsetup_r+0x80>
    4234:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4236:	2900      	cmp	r1, #0
    4238:	d008      	beq.n	424c <__swsetup_r+0x70>
    423a:	0023      	movs	r3, r4
    423c:	3344      	adds	r3, #68	; 0x44
    423e:	4299      	cmp	r1, r3
    4240:	d002      	beq.n	4248 <__swsetup_r+0x6c>
    4242:	0030      	movs	r0, r6
    4244:	f7ff fb8e 	bl	3964 <_free_r>
    4248:	2300      	movs	r3, #0
    424a:	6363      	str	r3, [r4, #52]	; 0x34
    424c:	2224      	movs	r2, #36	; 0x24
    424e:	89a3      	ldrh	r3, [r4, #12]
    4250:	4393      	bics	r3, r2
    4252:	81a3      	strh	r3, [r4, #12]
    4254:	2300      	movs	r3, #0
    4256:	6063      	str	r3, [r4, #4]
    4258:	6923      	ldr	r3, [r4, #16]
    425a:	6023      	str	r3, [r4, #0]
    425c:	2308      	movs	r3, #8
    425e:	89a2      	ldrh	r2, [r4, #12]
    4260:	4313      	orrs	r3, r2
    4262:	81a3      	strh	r3, [r4, #12]
    4264:	6923      	ldr	r3, [r4, #16]
    4266:	2b00      	cmp	r3, #0
    4268:	d10b      	bne.n	4282 <__swsetup_r+0xa6>
    426a:	21a0      	movs	r1, #160	; 0xa0
    426c:	2280      	movs	r2, #128	; 0x80
    426e:	89a3      	ldrh	r3, [r4, #12]
    4270:	0089      	lsls	r1, r1, #2
    4272:	0092      	lsls	r2, r2, #2
    4274:	400b      	ands	r3, r1
    4276:	4293      	cmp	r3, r2
    4278:	d003      	beq.n	4282 <__swsetup_r+0xa6>
    427a:	0021      	movs	r1, r4
    427c:	0030      	movs	r0, r6
    427e:	f7ff fb23 	bl	38c8 <__smakebuf_r>
    4282:	2301      	movs	r3, #1
    4284:	89a2      	ldrh	r2, [r4, #12]
    4286:	4013      	ands	r3, r2
    4288:	d011      	beq.n	42ae <__swsetup_r+0xd2>
    428a:	2300      	movs	r3, #0
    428c:	60a3      	str	r3, [r4, #8]
    428e:	6963      	ldr	r3, [r4, #20]
    4290:	425b      	negs	r3, r3
    4292:	61a3      	str	r3, [r4, #24]
    4294:	2000      	movs	r0, #0
    4296:	6923      	ldr	r3, [r4, #16]
    4298:	4283      	cmp	r3, r0
    429a:	d1be      	bne.n	421a <__swsetup_r+0x3e>
    429c:	230c      	movs	r3, #12
    429e:	5ee2      	ldrsh	r2, [r4, r3]
    42a0:	0613      	lsls	r3, r2, #24
    42a2:	d5ba      	bpl.n	421a <__swsetup_r+0x3e>
    42a4:	2340      	movs	r3, #64	; 0x40
    42a6:	4313      	orrs	r3, r2
    42a8:	81a3      	strh	r3, [r4, #12]
    42aa:	3801      	subs	r0, #1
    42ac:	e7b5      	b.n	421a <__swsetup_r+0x3e>
    42ae:	0792      	lsls	r2, r2, #30
    42b0:	d400      	bmi.n	42b4 <__swsetup_r+0xd8>
    42b2:	6963      	ldr	r3, [r4, #20]
    42b4:	60a3      	str	r3, [r4, #8]
    42b6:	e7ed      	b.n	4294 <__swsetup_r+0xb8>
    42b8:	20000040 	.word	0x20000040
    42bc:	00006534 	.word	0x00006534
    42c0:	00006554 	.word	0x00006554
    42c4:	00006514 	.word	0x00006514

000042c8 <_close_r>:
    42c8:	2300      	movs	r3, #0
    42ca:	b570      	push	{r4, r5, r6, lr}
    42cc:	4c06      	ldr	r4, [pc, #24]	; (42e8 <_close_r+0x20>)
    42ce:	0005      	movs	r5, r0
    42d0:	0008      	movs	r0, r1
    42d2:	6023      	str	r3, [r4, #0]
    42d4:	f7fd fd1c 	bl	1d10 <_close>
    42d8:	1c43      	adds	r3, r0, #1
    42da:	d103      	bne.n	42e4 <_close_r+0x1c>
    42dc:	6823      	ldr	r3, [r4, #0]
    42de:	2b00      	cmp	r3, #0
    42e0:	d000      	beq.n	42e4 <_close_r+0x1c>
    42e2:	602b      	str	r3, [r5, #0]
    42e4:	bd70      	pop	{r4, r5, r6, pc}
    42e6:	46c0      	nop			; (mov r8, r8)
    42e8:	20000310 	.word	0x20000310

000042ec <_fstat_r>:
    42ec:	2300      	movs	r3, #0
    42ee:	b570      	push	{r4, r5, r6, lr}
    42f0:	4c06      	ldr	r4, [pc, #24]	; (430c <_fstat_r+0x20>)
    42f2:	0005      	movs	r5, r0
    42f4:	0008      	movs	r0, r1
    42f6:	0011      	movs	r1, r2
    42f8:	6023      	str	r3, [r4, #0]
    42fa:	f7fd fd0c 	bl	1d16 <_fstat>
    42fe:	1c43      	adds	r3, r0, #1
    4300:	d103      	bne.n	430a <_fstat_r+0x1e>
    4302:	6823      	ldr	r3, [r4, #0]
    4304:	2b00      	cmp	r3, #0
    4306:	d000      	beq.n	430a <_fstat_r+0x1e>
    4308:	602b      	str	r3, [r5, #0]
    430a:	bd70      	pop	{r4, r5, r6, pc}
    430c:	20000310 	.word	0x20000310

00004310 <_isatty_r>:
    4310:	2300      	movs	r3, #0
    4312:	b570      	push	{r4, r5, r6, lr}
    4314:	4c06      	ldr	r4, [pc, #24]	; (4330 <_isatty_r+0x20>)
    4316:	0005      	movs	r5, r0
    4318:	0008      	movs	r0, r1
    431a:	6023      	str	r3, [r4, #0]
    431c:	f7fd fd00 	bl	1d20 <_isatty>
    4320:	1c43      	adds	r3, r0, #1
    4322:	d103      	bne.n	432c <_isatty_r+0x1c>
    4324:	6823      	ldr	r3, [r4, #0]
    4326:	2b00      	cmp	r3, #0
    4328:	d000      	beq.n	432c <_isatty_r+0x1c>
    432a:	602b      	str	r3, [r5, #0]
    432c:	bd70      	pop	{r4, r5, r6, pc}
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	20000310 	.word	0x20000310

00004334 <_lseek_r>:
    4334:	b570      	push	{r4, r5, r6, lr}
    4336:	0005      	movs	r5, r0
    4338:	0008      	movs	r0, r1
    433a:	0011      	movs	r1, r2
    433c:	2200      	movs	r2, #0
    433e:	4c06      	ldr	r4, [pc, #24]	; (4358 <_lseek_r+0x24>)
    4340:	6022      	str	r2, [r4, #0]
    4342:	001a      	movs	r2, r3
    4344:	f7fd fcee 	bl	1d24 <_lseek>
    4348:	1c43      	adds	r3, r0, #1
    434a:	d103      	bne.n	4354 <_lseek_r+0x20>
    434c:	6823      	ldr	r3, [r4, #0]
    434e:	2b00      	cmp	r3, #0
    4350:	d000      	beq.n	4354 <_lseek_r+0x20>
    4352:	602b      	str	r3, [r5, #0]
    4354:	bd70      	pop	{r4, r5, r6, pc}
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	20000310 	.word	0x20000310

0000435c <memchr>:
    435c:	b2c9      	uxtb	r1, r1
    435e:	1882      	adds	r2, r0, r2
    4360:	4290      	cmp	r0, r2
    4362:	d101      	bne.n	4368 <memchr+0xc>
    4364:	2000      	movs	r0, #0
    4366:	4770      	bx	lr
    4368:	7803      	ldrb	r3, [r0, #0]
    436a:	428b      	cmp	r3, r1
    436c:	d0fb      	beq.n	4366 <memchr+0xa>
    436e:	3001      	adds	r0, #1
    4370:	e7f6      	b.n	4360 <memchr+0x4>

00004372 <__malloc_lock>:
    4372:	4770      	bx	lr

00004374 <__malloc_unlock>:
    4374:	4770      	bx	lr
	...

00004378 <_read_r>:
    4378:	b570      	push	{r4, r5, r6, lr}
    437a:	0005      	movs	r5, r0
    437c:	0008      	movs	r0, r1
    437e:	0011      	movs	r1, r2
    4380:	2200      	movs	r2, #0
    4382:	4c06      	ldr	r4, [pc, #24]	; (439c <_read_r+0x24>)
    4384:	6022      	str	r2, [r4, #0]
    4386:	001a      	movs	r2, r3
    4388:	f7fd fc66 	bl	1c58 <_read>
    438c:	1c43      	adds	r3, r0, #1
    438e:	d103      	bne.n	4398 <_read_r+0x20>
    4390:	6823      	ldr	r3, [r4, #0]
    4392:	2b00      	cmp	r3, #0
    4394:	d000      	beq.n	4398 <_read_r+0x20>
    4396:	602b      	str	r3, [r5, #0]
    4398:	bd70      	pop	{r4, r5, r6, pc}
    439a:	46c0      	nop			; (mov r8, r8)
    439c:	20000310 	.word	0x20000310
    43a0:	000a000a 	.word	0x000a000a
    43a4:	00140014 	.word	0x00140014
    43a8:	00000014 	.word	0x00000014
    43ac:	000a017c 	.word	0x000a017c
    43b0:	000a017c 	.word	0x000a017c
    43b4:	00140186 	.word	0x00140186
    43b8:	00140000 	.word	0x00140000
    43bc:	0122000a 	.word	0x0122000a
    43c0:	00140186 	.word	0x00140186
    43c4:	01220190 	.word	0x01220190
    43c8:	0122000a 	.word	0x0122000a
    43cc:	012c0014 	.word	0x012c0014
    43d0:	0122017c 	.word	0x0122017c
    43d4:	012c0186 	.word	0x012c0186
    43d8:	012c0014 	.word	0x012c0014
    43dc:	0136017c 	.word	0x0136017c
    43e0:	001e0000 	.word	0x001e0000
    43e4:	00280032 	.word	0x00280032
    43e8:	00320000 	.word	0x00320000
    43ec:	003c0032 	.word	0x003c0032
    43f0:	001e0050 	.word	0x001e0050
    43f4:	00280118 	.word	0x00280118
    43f8:	00280046 	.word	0x00280046
    43fc:	00be0050 	.word	0x00be0050
    4400:	00be0050 	.word	0x00be0050
    4404:	00c80118 	.word	0x00c80118
    4408:	00280118 	.word	0x00280118
    440c:	00be0122 	.word	0x00be0122
    4410:	00460000 	.word	0x00460000
    4414:	00500032 	.word	0x00500032
    4418:	005a0000 	.word	0x005a0000
    441c:	00640032 	.word	0x00640032
    4420:	006e0000 	.word	0x006e0000
    4424:	00780032 	.word	0x00780032
    4428:	00820000 	.word	0x00820000
    442c:	008c0032 	.word	0x008c0032
    4430:	00960000 	.word	0x00960000
    4434:	00a00032 	.word	0x00a00032
    4438:	00aa0000 	.word	0x00aa0000
    443c:	00b40032 	.word	0x00b40032
    4440:	00be0000 	.word	0x00be0000
    4444:	00c80032 	.word	0x00c80032
    4448:	00c8012c 	.word	0x00c8012c
    444c:	00d20172 	.word	0x00d20172
    4450:	00dc001e 	.word	0x00dc001e
    4454:	00e60172 	.word	0x00e60172
    4458:	00f0001e 	.word	0x00f0001e
    445c:	00fa0172 	.word	0x00fa0172
    4460:	0104001e 	.word	0x0104001e
    4464:	010e0172 	.word	0x010e0172
    4468:	0118005a 	.word	0x0118005a
    446c:	0122012c 	.word	0x0122012c
    4470:	82be50b4 	.word	0x82be50b4
    4474:	8cbe82aa 	.word	0x8cbe82aa
    4478:	64963c8c 	.word	0x64963c8c
    447c:	64dc3cd2 	.word	0x64dc3cd2
    4480:	a08c9682 	.word	0xa08c9682
    4484:	aadca08c 	.word	0xaadca08c
    4488:	a0e696dc 	.word	0xa0e696dc
    448c:	50f03c78 	.word	0x50f03c78
    4490:	5a78466e 	.word	0x5a78466e
    4494:	aaaa3c96 	.word	0xaaaa3c96
    4498:	a0dc3cc8 	.word	0xa0dc3cc8
    449c:	aae6a0d2 	.word	0xaae6a0d2
    44a0:	78696e55 	.word	0x78696e55
    44a4:	6f706520 	.word	0x6f706520
    44a8:	6d206863 	.word	0x6d206863
    44ac:	73756e69 	.word	0x73756e69
    44b0:	46783020 	.word	0x46783020
    44b4:	61642046 	.word	0x61642046
    44b8:	00007379 	.word	0x00007379
    44bc:	355e3331 	.word	0x355e3331
    44c0:	31202b20 	.word	0x31202b20
    44c4:	20355e36 	.word	0x20355e36
    44c8:	3731203d 	.word	0x3731203d
    44cc:	0000355e 	.word	0x0000355e
    44d0:	69746552 	.word	0x69746552
    44d4:	616c7563 	.word	0x616c7563
    44d8:	676e6974 	.word	0x676e6974
    44dc:	6c705320 	.word	0x6c705320
    44e0:	73656e69 	.word	0x73656e69
    44e4:	00000000 	.word	0x00000000
    44e8:	6c6f6956 	.word	0x6c6f6956
    44ec:	65636e65 	.word	0x65636e65
    44f0:	726f7720 	.word	0x726f7720
    44f4:	0000736b 	.word	0x0000736b
    44f8:	73626154 	.word	0x73626154
    44fc:	00000021 	.word	0x00000021
    4500:	6c6c694b 	.word	0x6c6c694b
    4504:	6c694220 	.word	0x6c694220
    4508:	6e6f696c 	.word	0x6e6f696c
    450c:	65726961 	.word	0x65726961
    4510:	61282073 	.word	0x61282073
    4514:	5420646e 	.word	0x5420646e
    4518:	6c6c6972 	.word	0x6c6c6972
    451c:	616e6f69 	.word	0x616e6f69
    4520:	29657269 	.word	0x29657269
    4524:	00000000 	.word	0x00000000
    4528:	65746e49 	.word	0x65746e49
    452c:	74736572 	.word	0x74736572
    4530:	206e6920 	.word	0x206e6920
    4534:	68636574 	.word	0x68636574
    4538:	6f6c6f6e 	.word	0x6f6c6f6e
    453c:	69207967 	.word	0x69207967
    4540:	6f6e2073 	.word	0x6f6e2073
    4544:	20612074 	.word	0x20612074
    4548:	73726570 	.word	0x73726570
    454c:	6c616e6f 	.word	0x6c616e6f
    4550:	00797469 	.word	0x00797469
    4554:	50203031 	.word	0x50203031
    4558:	544e4952 	.word	0x544e4952
    455c:	52484320 	.word	0x52484320
    4560:	30322824 	.word	0x30322824
    4564:	2b352e35 	.word	0x2b352e35
    4568:	28444e52 	.word	0x28444e52
    456c:	3b292931 	.word	0x3b292931
    4570:	47203a20 	.word	0x47203a20
    4574:	204f544f 	.word	0x204f544f
    4578:	00003031 	.word	0x00003031
    457c:	67206f4e 	.word	0x67206f4e
    4580:	2e73646f 	.word	0x2e73646f
    4584:	206f4e20 	.word	0x206f4e20
    4588:	7473616d 	.word	0x7473616d
    458c:	2e737265 	.word	0x2e737265
    4590:	206f4e20 	.word	0x206f4e20
    4594:	65747865 	.word	0x65747865
    4598:	6c616e72 	.word	0x6c616e72
    459c:	62696c20 	.word	0x62696c20
    45a0:	69726172 	.word	0x69726172
    45a4:	002e7365 	.word	0x002e7365
    45a8:	63617053 	.word	0x63617053
    45ac:	00217365 	.word	0x00217365
    45b0:	6e616954 	.word	0x6e616954
    45b4:	656d6e61 	.word	0x656d6e61
    45b8:	7153206e 	.word	0x7153206e
    45bc:	65726175 	.word	0x65726175
    45c0:	38393120 	.word	0x38393120
    45c4:	00000039 	.word	0x00000039
    45c8:	72656d41 	.word	0x72656d41
    45cc:	20616369 	.word	0x20616369
    45d0:	20736177 	.word	0x20736177
    45d4:	6e756f66 	.word	0x6e756f66
    45d8:	20646564 	.word	0x20646564
    45dc:	73206e6f 	.word	0x73206e6f
    45e0:	6576616c 	.word	0x6576616c
    45e4:	00007972 	.word	0x00007972
    45e8:	72656854 	.word	0x72656854
    45ec:	73692065 	.word	0x73692065
    45f0:	6c6e6f20 	.word	0x6c6e6f20
    45f4:	61632079 	.word	0x61632079
    45f8:	61746970 	.word	0x61746970
    45fc:	6e61206c 	.word	0x6e61206c
    4600:	616c2064 	.word	0x616c2064
    4604:	00726f62 	.word	0x00726f62
    4608:	6f636e45 	.word	0x6f636e45
    460c:	67617275 	.word	0x67617275
    4610:	79732065 	.word	0x79732065
    4614:	74656d6d 	.word	0x74656d6d
    4618:	20636972 	.word	0x20636972
    461c:	73616c63 	.word	0x73616c63
    4620:	61772073 	.word	0x61772073
    4624:	72616672 	.word	0x72616672
    4628:	00000065 	.word	0x00000065
    462c:	52554324 	.word	0x52554324
    4630:	544e4552 	.word	0x544e4552
    4634:	4d454d5f 	.word	0x4d454d5f
    4638:	00000045 	.word	0x00000045
    463c:	694e2041 	.word	0x694e2041
    4640:	54206563 	.word	0x54206563
    4644:	00005954 	.word	0x00005954
    4648:	6e617254 	.word	0x6e617254
    464c:	69722073 	.word	0x69722073
    4650:	73746867 	.word	0x73746867
    4654:	65726120 	.word	0x65726120
    4658:	6d756820 	.word	0x6d756820
    465c:	72206e61 	.word	0x72206e61
    4660:	74686769 	.word	0x74686769
    4664:	00000073 	.word	0x00000073
    4668:	3d202069 	.word	0x3d202069
    466c:	35783020 	.word	0x35783020
    4670:	35373366 	.word	0x35373366
    4674:	20666439 	.word	0x20666439
    4678:	2028202d 	.word	0x2028202d
    467c:	3e3e2069 	.word	0x3e3e2069
    4680:	29203120 	.word	0x29203120
    4684:	0000003b 	.word	0x0000003b
    4688:	42414341 	.word	0x42414341
    468c:	00000000 	.word	0x00000000
    4690:	63666544 	.word	0x63666544
    4694:	73276e6f 	.word	0x73276e6f
    4698:	6e616320 	.word	0x6e616320
    469c:	656c6563 	.word	0x656c6563
    46a0:	00002e64 	.word	0x00002e64
    46a4:	73746152 	.word	0x73746152
    46a8:	7473656e 	.word	0x7473656e
    46ac:	6f4e203a 	.word	0x6f4e203a
    46b0:	6e696874 	.word	0x6e696874
    46b4:	6f542067 	.word	0x6f542067
    46b8:	216f4420 	.word	0x216f4420
    46bc:	00000000 	.word	0x00000000
    46c0:	68207449 	.word	0x68207449
    46c4:	36207361 	.word	0x36207361
    46c8:	656b2039 	.word	0x656b2039
    46cc:	002e7379 	.word	0x002e7379
    46d0:	61636542 	.word	0x61636542
    46d4:	20657375 	.word	0x20657375
    46d8:	342d5456 	.word	0x342d5456
    46dc:	77203032 	.word	0x77203032
    46e0:	61207361 	.word	0x61207361
    46e4:	6165726c 	.word	0x6165726c
    46e8:	74207964 	.word	0x74207964
    46ec:	6e656b61 	.word	0x6e656b61
    46f0:	00000000 	.word	0x00000000
    46f4:	706d6f43 	.word	0x706d6f43
    46f8:	73736572 	.word	0x73736572
    46fc:	206e6f69 	.word	0x206e6f69
    4700:	6f676c61 	.word	0x6f676c61
    4704:	68746972 	.word	0x68746972
    4708:	6162206d 	.word	0x6162206d
    470c:	20646573 	.word	0x20646573
    4710:	42206e6f 	.word	0x42206e6f
    4714:	28205042 	.word	0x28205042
    4718:	37393931 	.word	0x37393931
    471c:	00000029 	.word	0x00000029
    4720:	20656854 	.word	0x20656854
    4724:	72756f73 	.word	0x72756f73
    4728:	6f206563 	.word	0x6f206563
    472c:	68742066 	.word	0x68742066
    4730:	694d2065 	.word	0x694d2065
    4734:	73697373 	.word	0x73697373
    4738:	70706973 	.word	0x70706973
    473c:	69722069 	.word	0x69722069
    4740:	20726576 	.word	0x20726576
    4744:	69207369 	.word	0x69207369
    4748:	6550206e 	.word	0x6550206e
    474c:	79736e6e 	.word	0x79736e6e
    4750:	6e61766c 	.word	0x6e61766c
    4754:	002e6169 	.word	0x002e6169
    4758:	6566664f 	.word	0x6566664f
    475c:	7669736e 	.word	0x7669736e
    4760:	61682065 	.word	0x61682065
    4764:	61776472 	.word	0x61776472
    4768:	00006572 	.word	0x00006572
    476c:	6c6c6f46 	.word	0x6c6c6f46
    4770:	5720776f 	.word	0x5720776f
    4774:	646c726f 	.word	0x646c726f
    4778:	676f5020 	.word	0x676f5020
    477c:	64654620 	.word	0x64654620
    4780:	74617265 	.word	0x74617265
    4784:	206e6f69 	.word	0x206e6f69
    4788:	40202020 	.word	0x40202020
    478c:	6c726f57 	.word	0x6c726f57
    4790:	676f5064 	.word	0x676f5064
    4794:	00000000 	.word	0x00000000
    4798:	6d6d7544 	.word	0x6d6d7544
    479c:	68742079 	.word	0x68742079
    47a0:	20636369 	.word	0x20636369
    47a4:	65696c63 	.word	0x65696c63
    47a8:	0000746e 	.word	0x0000746e
    47ac:	694e2041 	.word	0x694e2041
    47b0:	54206563 	.word	0x54206563
    47b4:	202e5954 	.word	0x202e5954
    47b8:	4f206e41 	.word	0x4f206e41
    47bc:	6f43204b 	.word	0x6f43204b
    47c0:	7475706d 	.word	0x7475706d
    47c4:	002e7265 	.word	0x002e7265
    47c8:	41632049 	.word	0x41632049
    47cc:	704f206e 	.word	0x704f206e
    47d0:	41206e45 	.word	0x41206e45
    47d4:	436f4c20 	.word	0x436f4c20
    47d8:	6957206b 	.word	0x6957206b
    47dc:	41206854 	.word	0x41206854
    47e0:	644f7320 	.word	0x644f7320
    47e4:	41632041 	.word	0x41632041
    47e8:	0000006e 	.word	0x0000006e
    47ec:	696c6f53 	.word	0x696c6f53
    47f0:	69726164 	.word	0x69726164
    47f4:	69207974 	.word	0x69207974
    47f8:	6f6e2073 	.word	0x6f6e2073
    47fc:	20612074 	.word	0x20612074
    4800:	2077656e 	.word	0x2077656e
    4804:	6d617266 	.word	0x6d617266
    4808:	726f7765 	.word	0x726f7765
    480c:	0000006b 	.word	0x0000006b
    4810:	61657242 	.word	0x61657242
    4814:	616f6264 	.word	0x616f6264
    4818:	6e696472 	.word	0x6e696472
    481c:	73492067 	.word	0x73492067
    4820:	746f4e20 	.word	0x746f4e20
    4824:	43204120 	.word	0x43204120
    4828:	656d6972 	.word	0x656d6972
    482c:	00000000 	.word	0x00000000
    4830:	2066664f 	.word	0x2066664f
    4834:	6f207962 	.word	0x6f207962
    4838:	6520656e 	.word	0x6520656e
    483c:	726f7272 	.word	0x726f7272
    4840:	72612073 	.word	0x72612073
    4844:	6f632065 	.word	0x6f632065
    4848:	6e6f6d6d 	.word	0x6e6f6d6d
    484c:	00000000 	.word	0x00000000
    4850:	000006ea 	.word	0x000006ea
    4854:	00000936 	.word	0x00000936
    4858:	00000936 	.word	0x00000936
    485c:	00000936 	.word	0x00000936
    4860:	00000936 	.word	0x00000936
    4864:	00000936 	.word	0x00000936
    4868:	00000936 	.word	0x00000936
    486c:	00000936 	.word	0x00000936
    4870:	00000936 	.word	0x00000936
    4874:	00000936 	.word	0x00000936
    4878:	00000936 	.word	0x00000936
    487c:	00000936 	.word	0x00000936
    4880:	00000936 	.word	0x00000936
    4884:	00000936 	.word	0x00000936
    4888:	00000936 	.word	0x00000936
    488c:	00000936 	.word	0x00000936
    4890:	000006d2 	.word	0x000006d2
    4894:	00000936 	.word	0x00000936
    4898:	00000936 	.word	0x00000936
    489c:	00000936 	.word	0x00000936
    48a0:	00000936 	.word	0x00000936
    48a4:	00000936 	.word	0x00000936
    48a8:	00000936 	.word	0x00000936
    48ac:	00000936 	.word	0x00000936
    48b0:	00000936 	.word	0x00000936
    48b4:	00000936 	.word	0x00000936
    48b8:	00000936 	.word	0x00000936
    48bc:	00000936 	.word	0x00000936
    48c0:	00000936 	.word	0x00000936
    48c4:	00000936 	.word	0x00000936
    48c8:	00000936 	.word	0x00000936
    48cc:	00000936 	.word	0x00000936
    48d0:	000006e2 	.word	0x000006e2
    48d4:	00000936 	.word	0x00000936
    48d8:	00000936 	.word	0x00000936
    48dc:	00000936 	.word	0x00000936
    48e0:	00000936 	.word	0x00000936
    48e4:	00000936 	.word	0x00000936
    48e8:	00000936 	.word	0x00000936
    48ec:	00000936 	.word	0x00000936
    48f0:	00000936 	.word	0x00000936
    48f4:	00000936 	.word	0x00000936
    48f8:	00000936 	.word	0x00000936
    48fc:	00000936 	.word	0x00000936
    4900:	00000936 	.word	0x00000936
    4904:	00000936 	.word	0x00000936
    4908:	00000936 	.word	0x00000936
    490c:	00000936 	.word	0x00000936
    4910:	000006da 	.word	0x000006da
    4914:	000006f2 	.word	0x000006f2
    4918:	000006ba 	.word	0x000006ba
    491c:	000006ca 	.word	0x000006ca
    4920:	000006c2 	.word	0x000006c2
    4924:	00000002 	.word	0x00000002
    4928:	00000003 	.word	0x00000003
    492c:	00000028 	.word	0x00000028
    4930:	00000029 	.word	0x00000029
    4934:	00000004 	.word	0x00000004
    4938:	00000005 	.word	0x00000005
    493c:	00000006 	.word	0x00000006
    4940:	00000007 	.word	0x00000007
    4944:	00000020 	.word	0x00000020
    4948:	00000021 	.word	0x00000021
    494c:	00000022 	.word	0x00000022
    4950:	00000023 	.word	0x00000023
    4954:	00000024 	.word	0x00000024
    4958:	00000025 	.word	0x00000025
    495c:	00000026 	.word	0x00000026
    4960:	00000027 	.word	0x00000027
    4964:	00000008 	.word	0x00000008
    4968:	00000009 	.word	0x00000009
    496c:	0000000a 	.word	0x0000000a
    4970:	0000000b 	.word	0x0000000b
    4974:	42000800 	.word	0x42000800
    4978:	42000c00 	.word	0x42000c00
    497c:	42001000 	.word	0x42001000
    4980:	42001400 	.word	0x42001400
    4984:	42001800 	.word	0x42001800
    4988:	42001c00 	.word	0x42001c00
    498c:	000013e6 	.word	0x000013e6
    4990:	000013e2 	.word	0x000013e2
    4994:	000013e2 	.word	0x000013e2
    4998:	00001448 	.word	0x00001448
    499c:	00001448 	.word	0x00001448
    49a0:	000013fa 	.word	0x000013fa
    49a4:	000013ec 	.word	0x000013ec
    49a8:	00001400 	.word	0x00001400
    49ac:	00001436 	.word	0x00001436
    49b0:	00001608 	.word	0x00001608
    49b4:	000015e8 	.word	0x000015e8
    49b8:	000015e8 	.word	0x000015e8
    49bc:	00001674 	.word	0x00001674
    49c0:	000015fa 	.word	0x000015fa
    49c4:	00001616 	.word	0x00001616
    49c8:	000015ec 	.word	0x000015ec
    49cc:	00001624 	.word	0x00001624
    49d0:	00001664 	.word	0x00001664
	...
    4d14:	3f30ff03 	.word	0x3f30ff03
    4d18:	000000f3 	.word	0x000000f3
	...
    4d28:	3f00f003 	.word	0x3f00f003
    4d2c:	00000000 	.word	0x00000000
    4d30:	f0030000 	.word	0xf0030000
    4d34:	00003f00 	.word	0x00003f00
    4d38:	00000000 	.word	0x00000000
    4d3c:	03000000 	.word	0x03000000
    4d40:	f0ff0330 	.word	0xf0ff0330
    4d44:	3300ff3f 	.word	0x3300ff3f
    4d48:	03300300 	.word	0x03300300
    4d4c:	ff3ff0ff 	.word	0xff3ff0ff
    4d50:	03003300 	.word	0x03003300
    4d54:	00000030 	.word	0x00000030
    4d58:	cc000003 	.word	0xcc000003
    4d5c:	03cc0cc0 	.word	0x03cc0cc0
    4d60:	ff3ff0ff 	.word	0xff3ff0ff
    4d64:	0cc0cc00 	.word	0x0cc0cc00
    4d68:	000300cc 	.word	0x000300cc
    4d6c:	00000000 	.word	0x00000000
    4d70:	03031c00 	.word	0x03031c00
    4d74:	380ee030 	.word	0x380ee030
    4d78:	03000e00 	.word	0x03000e00
    4d7c:	c0e10080 	.word	0xc0e10080
    4d80:	00003338 	.word	0x00003338
    4d84:	000000e0 	.word	0x000000e0
    4d88:	3c0f0000 	.word	0x3c0f0000
    4d8c:	30300c03 	.word	0x30300c03
    4d90:	300c03c3 	.word	0x300c03c3
    4d94:	f300c330 	.word	0xf300c330
    4d98:	000c0030 	.word	0x000c0030
    4d9c:	33003003 	.word	0x33003003
	...
    4da8:	f0000003 	.word	0xf0000003
    4dac:	03003c00 	.word	0x03003c00
	...
    4dc0:	00f00300 	.word	0x00f00300
    4dc4:	0c0c003f 	.word	0x0c0c003f
    4dc8:	00300003 	.word	0x00300003
	...
    4ddc:	0c300003 	.word	0x0c300003
    4de0:	003f000c 	.word	0x003f000c
    4de4:	0000f003 	.word	0x0000f003
    4de8:	00000000 	.word	0x00000000
    4dec:	c0000000 	.word	0xc0000000
    4df0:	03c0cc00 	.word	0x03c0cc00
    4df4:	000c00f0 	.word	0x000c00f0
    4df8:	3f00c000 	.word	0x3f00c000
    4dfc:	00cc0c00 	.word	0x00cc0c00
    4e00:	0000000c 	.word	0x0000000c
    4e04:	00000000 	.word	0x00000000
    4e08:	000c00c0 	.word	0x000c00c0
    4e0c:	0c00c000 	.word	0x0c00c000
    4e10:	00fc0f00 	.word	0x00fc0f00
    4e14:	c000000c 	.word	0xc000000c
    4e18:	00000c00 	.word	0x00000c00
    4e1c:	000000c0 	.word	0x000000c0
    4e20:	00000000 	.word	0x00000000
    4e24:	0003000c 	.word	0x0003000c
    4e28:	0c00f000 	.word	0x0c00f000
	...
    4e38:	00c00000 	.word	0x00c00000
    4e3c:	c000000c 	.word	0xc000000c
    4e40:	00000c00 	.word	0x00000c00
    4e44:	000c00c0 	.word	0x000c00c0
    4e48:	0c00c000 	.word	0x0c00c000
    4e4c:	00c00000 	.word	0x00c00000
	...
    4e58:	f000000f 	.word	0xf000000f
    4e5c:	00000f00 	.word	0x00000f00
	...
    4e6c:	c0000003 	.word	0xc0000003
    4e70:	0c003000 	.word	0x0c003000
    4e74:	00000300 	.word	0x00000300
    4e78:	003000c0 	.word	0x003000c0
	...
    4e84:	ff00f003 	.word	0xff00f003
    4e88:	030f3cc0 	.word	0x030f3cc0
    4e8c:	03303000 	.word	0x03303000
    4e90:	3c300003 	.word	0x3c300003
    4e94:	c0ff000f 	.word	0xc0ff000f
    4e98:	0000f003 	.word	0x0000f003
    4e9c:	00000000 	.word	0x00000000
    4ea0:	030c3060 	.word	0x030c3060
    4ea4:	3f308001 	.word	0x3f308001
    4ea8:	f0ff03ff 	.word	0xf0ff03ff
    4eac:	00000300 	.word	0x00000300
    4eb0:	00000000 	.word	0x00000000
    4eb4:	0f0c0000 	.word	0x0f0c0000
    4eb8:	30f0c303 	.word	0x30f0c303
    4ebc:	30030333 	.word	0x30030333
    4ec0:	0c03c330 	.word	0x0c03c330
    4ec4:	00c33030 	.word	0x00c33030
    4ec8:	030f30f0 	.word	0x030f30f0
    4ecc:	30000000 	.word	0x30000000
    4ed0:	7000030c 	.word	0x7000030c
    4ed4:	00030330 	.word	0x00030330
    4ed8:	03c33130 	.word	0x03c33130
    4edc:	c33e303c 	.word	0xc33e303c
    4ee0:	30c0c303 	.word	0x30c0c303
    4ee4:	0000003c 	.word	0x0000003c
    4ee8:	0f007000 	.word	0x0f007000
    4eec:	00b00300 	.word	0x00b00300
    4ef0:	301c0063 	.word	0x301c0063
    4ef4:	00f0ff03 	.word	0x00f0ff03
    4ef8:	00030030 	.word	0x00030030
    4efc:	00003000 	.word	0x00003000
    4f00:	03cc3f00 	.word	0x03cc3f00
    4f04:	033330fc 	.word	0x033330fc
    4f08:	33303003 	.word	0x33303003
    4f0c:	30300303 	.word	0x30300303
    4f10:	0f030333 	.word	0x0f030333
    4f14:	00fc30c0 	.word	0x00fc30c0
    4f18:	fc030000 	.word	0xfc030000
    4f1c:	3cf0ff00 	.word	0x3cf0ff00
    4f20:	300c03c3 	.word	0x300c03c3
    4f24:	0c03c330 	.word	0x0c03c330
    4f28:	00c33030 	.word	0x00c33030
    4f2c:	3c00c003 	.word	0x3c00c003
    4f30:	30000000 	.word	0x30000000
    4f34:	00000300 	.word	0x00000300
    4f38:	00030f30 	.word	0x00030f30
    4f3c:	033030f0 	.word	0x033030f0
    4f40:	0033000c 	.word	0x0033000c
    4f44:	3c00c003 	.word	0x3c00c003
    4f48:	00000000 	.word	0x00000000
    4f4c:	f3003c0f 	.word	0xf3003c0f
    4f50:	03c330c0 	.word	0x03c330c0
    4f54:	c330300c 	.word	0xc330300c
    4f58:	30300c03 	.word	0x30300c03
    4f5c:	c0f300c3 	.word	0xc0f300c3
    4f60:	00003c0f 	.word	0x00003c0f
    4f64:	03000f00 	.word	0x03000f00
    4f68:	c33030fc 	.word	0xc33030fc
    4f6c:	30300c03 	.word	0x30300c03
    4f70:	300c03c3 	.word	0x300c03c3
    4f74:	ff000e33 	.word	0xff000e33
    4f78:	00f00fc0 	.word	0x00f00fc0
    4f7c:	00000000 	.word	0x00000000
    4f80:	0f000000 	.word	0x0f000000
    4f84:	f0f0000f 	.word	0xf0f0000f
    4f88:	00000f0f 	.word	0x00000f0f
	...
    4f98:	0c000000 	.word	0x0c000000
    4f9c:	f0000f0f 	.word	0xf0000f0f
    4fa0:	000c0ff0 	.word	0x000c0ff0
	...
    4fb0:	0c00c000 	.word	0x0c00c000
    4fb4:	00300300 	.word	0x00300300
    4fb8:	0c0c0033 	.word	0x0c0c0033
    4fbc:	30c0c000 	.word	0x30c0c000
    4fc0:	30000303 	.word	0x30000303
    4fc4:	00000000 	.word	0x00000000
    4fc8:	00300300 	.word	0x00300300
    4fcc:	30030033 	.word	0x30030033
    4fd0:	03003300 	.word	0x03003300
    4fd4:	00330030 	.word	0x00330030
    4fd8:	33003003 	.word	0x33003003
    4fdc:	00300300 	.word	0x00300300
    4fe0:	03300000 	.word	0x03300000
    4fe4:	0c300003 	.word	0x0c300003
    4fe8:	c0c0000c 	.word	0xc0c0000c
    4fec:	33003003 	.word	0x33003003
    4ff0:	00c00000 	.word	0x00c00000
    4ff4:	0000000c 	.word	0x0000000c
    4ff8:	0c000000 	.word	0x0c000000
    4ffc:	00c00300 	.word	0x00c00300
    5000:	0f030030 	.word	0x0f030030
    5004:	03f33030 	.word	0x03f33030
    5008:	00330030 	.word	0x00330030
    500c:	0c00c000 	.word	0x0c00c000
    5010:	00000000 	.word	0x00000000
    5014:	ff03fc0f 	.word	0xff03fc0f
    5018:	030330f0 	.word	0x030330f0
    501c:	3333300c 	.word	0x3333300c
    5020:	31303303 	.word	0x31303303
    5024:	00ff00e3 	.word	0x00ff00e3
    5028:	0000f00f 	.word	0x0000f00f
    502c:	00ff0000 	.word	0x00ff0000
    5030:	300ff03f 	.word	0x300ff03f
    5034:	3000c301 	.word	0x3000c301
    5038:	00c30130 	.word	0x00c30130
    503c:	3f00300f 	.word	0x3f00300f
    5040:	00ff00f0 	.word	0x00ff00f0
    5044:	03300000 	.word	0x03300000
    5048:	3ff0ff03 	.word	0x3ff0ff03
    504c:	300c03ff 	.word	0x300c03ff
    5050:	0c03c330 	.word	0x0c03c330
    5054:	00c33030 	.word	0x00c33030
    5058:	3c0fc0f3 	.word	0x3c0fc0f3
    505c:	03000000 	.word	0x03000000
    5060:	c0ff00f0 	.word	0xc0ff00f0
    5064:	00030f3c 	.word	0x00030f3c
    5068:	03033030 	.word	0x03033030
    506c:	03303000 	.word	0x03303000
    5070:	0cc0c000 	.word	0x0cc0c000
    5074:	0000000c 	.word	0x0000000c
    5078:	ff030330 	.word	0xff030330
    507c:	03ff3ff0 	.word	0x03ff3ff0
    5080:	03303000 	.word	0x03303000
    5084:	0ef0c003 	.word	0x0ef0c003
    5088:	003f001c 	.word	0x003f001c
    508c:	0000e001 	.word	0x0000e001
    5090:	03ff3f00 	.word	0x03ff3f00
    5094:	c330f0ff 	.word	0xc330f0ff
    5098:	30300c03 	.word	0x30300c03
    509c:	300c03c3 	.word	0x300c03c3
    50a0:	00030330 	.word	0x00030330
    50a4:	00033030 	.word	0x00033030
    50a8:	ff3f0000 	.word	0xff3f0000
    50ac:	30f0ff03 	.word	0x30f0ff03
    50b0:	000c03c0 	.word	0x000c03c0
    50b4:	0c03c030 	.word	0x0c03c030
    50b8:	03003000 	.word	0x03003000
    50bc:	00300000 	.word	0x00300000
    50c0:	03000000 	.word	0x03000000
    50c4:	c0ff00f0 	.word	0xc0ff00f0
    50c8:	00030f3c 	.word	0x00030f3c
    50cc:	03033030 	.word	0x03033030
    50d0:	33303003 	.word	0x33303003
    50d4:	0cc0c300 	.word	0x0cc0c300
    50d8:	0000003c 	.word	0x0000003c
    50dc:	ff03ff3f 	.word	0xff03ff3f
    50e0:	00c000f0 	.word	0x00c000f0
    50e4:	c000000c 	.word	0xc000000c
    50e8:	00000c00 	.word	0x00000c00
    50ec:	f0ff03c0 	.word	0xf0ff03c0
    50f0:	0000ff3f 	.word	0x0000ff3f
    50f4:	03000000 	.word	0x03000000
    50f8:	03303000 	.word	0x03303000
    50fc:	3ff0ff03 	.word	0x3ff0ff03
    5100:	300003ff 	.word	0x300003ff
    5104:	00000330 	.word	0x00000330
    5108:	00000000 	.word	0x00000000
    510c:	0c000000 	.word	0x0c000000
    5110:	00f00000 	.word	0x00f00000
    5114:	30000303 	.word	0x30000303
    5118:	ff030330 	.word	0xff030330
    511c:	03fc3ff0 	.word	0x03fc3ff0
    5120:	00300000 	.word	0x00300000
    5124:	3f000000 	.word	0x3f000000
    5128:	f0ff03ff 	.word	0xf0ff03ff
    512c:	3300c000 	.word	0x3300c000
    5130:	00300300 	.word	0x00300300
    5134:	0c0cc0c0 	.word	0x0c0cc0c0
    5138:	30300003 	.word	0x30300003
    513c:	00000003 	.word	0x00000003
    5140:	ff03ff3f 	.word	0xff03ff3f
    5144:	000300f0 	.word	0x000300f0
    5148:	03003000 	.word	0x03003000
    514c:	00300000 	.word	0x00300000
    5150:	30000003 	.word	0x30000003
    5154:	00000300 	.word	0x00000300
    5158:	03ff3f00 	.word	0x03ff3f00
    515c:	001cf0ff 	.word	0x001cf0ff
    5160:	03007000 	.word	0x03007000
    5164:	007000c0 	.word	0x007000c0
    5168:	ff03001c 	.word	0xff03001c
    516c:	00ff3ff0 	.word	0x00ff3ff0
    5170:	ff3f0000 	.word	0xff3f0000
    5174:	1cf0ff03 	.word	0x1cf0ff03
    5178:	00700000 	.word	0x00700000
    517c:	0700c001 	.word	0x0700c001
    5180:	031c0000 	.word	0x031c0000
    5184:	ff3ff0ff 	.word	0xff3ff0ff
    5188:	0f000000 	.word	0x0f000000
    518c:	c0ff00fc 	.word	0xc0ff00fc
    5190:	00030738 	.word	0x00030738
    5194:	03033030 	.word	0x03033030
    5198:	07383000 	.word	0x07383000
    519c:	0fc0ff00 	.word	0x0fc0ff00
    51a0:	000000fc 	.word	0x000000fc
    51a4:	ff03ff3f 	.word	0xff03ff3f
    51a8:	03c030f0 	.word	0x03c030f0
    51ac:	c030000c 	.word	0xc030000c
    51b0:	30000c03 	.word	0x30000c03
    51b4:	00f000c0 	.word	0x00f000c0
    51b8:	0000000f 	.word	0x0000000f
    51bc:	03fc0f00 	.word	0x03fc0f00
    51c0:	0330f0ff 	.word	0x0330f0ff
    51c4:	30300003 	.word	0x30300003
    51c8:	f0030333 	.word	0xf0030333
    51cc:	ff000c30 	.word	0xff000c30
    51d0:	00f30f30 	.word	0x00f30f30
    51d4:	ff3f0000 	.word	0xff3f0000
    51d8:	30f0ff03 	.word	0x30f0ff03
    51dc:	000c03c0 	.word	0x000c03c0
    51e0:	0f03c030 	.word	0x0f03c030
    51e4:	00fc3000 	.word	0x00fc3000
    51e8:	030ff0f0 	.word	0x030ff0f0
    51ec:	0f000000 	.word	0x0f000000
    51f0:	f0fc030c 	.word	0xf0fc030c
    51f4:	0c03c330 	.word	0x0c03c330
    51f8:	03c33030 	.word	0x03c33030
    51fc:	c330300c 	.word	0xc330300c
    5200:	0cc0c300 	.word	0x0cc0c300
    5204:	0000003c 	.word	0x0000003c
    5208:	00030030 	.word	0x00030030
    520c:	03003000 	.word	0x03003000
    5210:	ff3f0000 	.word	0xff3f0000
    5214:	30000003 	.word	0x30000003
    5218:	00000300 	.word	0x00000300
    521c:	00000030 	.word	0x00000030
    5220:	03fc3f00 	.word	0x03fc3f00
    5224:	0300c0ff 	.word	0x0300c0ff
    5228:	00300000 	.word	0x00300000
    522c:	30000003 	.word	0x30000003
    5230:	ff030300 	.word	0xff030300
    5234:	00fc3fc0 	.word	0x00fc3fc0
    5238:	003c0000 	.word	0x003c0000
    523c:	0300fc03 	.word	0x0300fc03
    5240:	e00300fc 	.word	0xe00300fc
    5244:	03000300 	.word	0x03000300
    5248:	03fc03e0 	.word	0x03fc03e0
    524c:	003c00fc 	.word	0x003c00fc
    5250:	3f000000 	.word	0x3f000000
    5254:	f0ff03fe 	.word	0xf0ff03fe
    5258:	03000300 	.word	0x03000300
    525c:	00f000e0 	.word	0x00f000e0
    5260:	0300e003 	.word	0x0300e003
    5264:	3ff0ff03 	.word	0x3ff0ff03
    5268:	000000fe 	.word	0x000000fe
    526c:	c0030330 	.word	0xc0030330
    5270:	003c0ff0 	.word	0x003c0ff0
    5274:	e0010037 	.word	0xe0010037
    5278:	0f003b00 	.word	0x0f003b00
    527c:	f0c0033c 	.word	0xf0c0033c
    5280:	00000330 	.word	0x00000330
    5284:	03003000 	.word	0x03003000
    5288:	000f00c0 	.word	0x000f00c0
    528c:	00003e00 	.word	0x00003e00
    5290:	003e00ff 	.word	0x003e00ff
    5294:	c003000f 	.word	0xc003000f
    5298:	00003000 	.word	0x00003000
    529c:	0f300000 	.word	0x0f300000
    52a0:	30f00103 	.word	0x30f00103
    52a4:	30070333 	.word	0x30070333
    52a8:	3803c330 	.word	0x3803c330
    52ac:	03033e30 	.word	0x03033e30
    52b0:	033030c0 	.word	0x033030c0
	...
    52bc:	ff03ff3f 	.word	0xff03ff3f
    52c0:	030330f0 	.word	0x030330f0
    52c4:	03303000 	.word	0x03303000
	...
    52d0:	00030000 	.word	0x00030000
    52d4:	00003c00 	.word	0x00003c00
    52d8:	c00300f0 	.word	0xc00300f0
    52dc:	00000f00 	.word	0x00000f00
    52e0:	f000003c 	.word	0xf000003c
    52e4:	00000300 	.word	0x00000300
    52e8:	03000000 	.word	0x03000000
    52ec:	03303000 	.word	0x03303000
    52f0:	3f300003 	.word	0x3f300003
    52f4:	f0ff03ff 	.word	0xf0ff03ff
	...
    5300:	c0000000 	.word	0xc0000000
    5304:	0f003c00 	.word	0x0f003c00
    5308:	00c00100 	.word	0x00c00100
    530c:	c0010030 	.word	0xc0010030
    5310:	00000f00 	.word	0x00000f00
    5314:	c000003c 	.word	0xc000003c
    5318:	00000000 	.word	0x00000000
    531c:	30000003 	.word	0x30000003
    5320:	00000300 	.word	0x00000300
    5324:	00030030 	.word	0x00030030
    5328:	03003000 	.word	0x03003000
    532c:	00300000 	.word	0x00300000
    5330:	00000003 	.word	0x00000003
    5334:	00000000 	.word	0x00000000
    5338:	03003000 	.word	0x03003000
    533c:	003c0000 	.word	0x003c0000
    5340:	0300f000 	.word	0x0300f000
	...
    534c:	000c0000 	.word	0x000c0000
    5350:	3303c000 	.word	0x3303c000
    5354:	03303300 	.word	0x03303300
    5358:	30330033 	.word	0x30330033
    535c:	3f003303 	.word	0x3f003303
    5360:	00ff0030 	.word	0x00ff0030
    5364:	ff3f0000 	.word	0xff3f0000
    5368:	01f0ff03 	.word	0x01f0ff03
    536c:	303000ce 	.word	0x303000ce
    5370:	30000303 	.word	0x30000303
    5374:	00030330 	.word	0x00030330
    5378:	fc00f03c 	.word	0xfc00f03c
    537c:	00000000 	.word	0x00000000
    5380:	f03f00fc 	.word	0xf03f00fc
    5384:	30000303 	.word	0x30000303
    5388:	00030330 	.word	0x00030330
    538c:	03033030 	.word	0x03033030
    5390:	00300c00 	.word	0x00300c00
    5394:	000000c3 	.word	0x000000c3
    5398:	3f00fc00 	.word	0x3f00fc00
    539c:	000303f0 	.word	0x000303f0
    53a0:	03033030 	.word	0x03033030
    53a4:	00303000 	.word	0x00303000
    53a8:	f0ff03cc 	.word	0xf0ff03cc
    53ac:	0000ff3f 	.word	0x0000ff3f
    53b0:	00fc0000 	.word	0x00fc0000
    53b4:	3303f03f 	.word	0x3303f03f
    53b8:	03303300 	.word	0x03303300
    53bc:	30330033 	.word	0x30330033
    53c0:	0f003303 	.word	0x0f003303
    53c4:	00f00030 	.word	0x00f00030
    53c8:	c0000000 	.word	0xc0000000
    53cc:	0f000c00 	.word	0x0f000c00
    53d0:	f0ff00ff 	.word	0xf0ff00ff
    53d4:	0c03c030 	.word	0x0c03c030
    53d8:	00003000 	.word	0x00003000
    53dc:	000c00c0 	.word	0x000c00c0
    53e0:	00000000 	.word	0x00000000
    53e4:	ff3fc0cc 	.word	0xff3fc0cc
    53e8:	33303303 	.word	0x33303303
    53ec:	30330333 	.word	0x30330333
    53f0:	c300333f 	.word	0xc300333f
    53f4:	030c30f0 	.word	0x030c30f0
    53f8:	0000c000 	.word	0x0000c000
    53fc:	ff03ff3f 	.word	0xff03ff3f
    5400:	00c000f0 	.word	0x00c000f0
    5404:	00030030 	.word	0x00030030
    5408:	03003000 	.word	0x03003000
    540c:	f00f0000 	.word	0xf00f0000
    5410:	0000ff00 	.word	0x0000ff00
    5414:	00000000 	.word	0x00000000
    5418:	03033000 	.word	0x03033000
    541c:	33f03f03 	.word	0x33f03f03
    5420:	300000ff 	.word	0x300000ff
    5424:	00000300 	.word	0x00000300
    5428:	00000000 	.word	0x00000000
    542c:	03000000 	.word	0x03000000
    5430:	003f00c0 	.word	0x003f00c0
    5434:	03003000 	.word	0x03003000
    5438:	3f330000 	.word	0x3f330000
    543c:	c0ff33ff 	.word	0xc0ff33ff
    5440:	00000000 	.word	0x00000000
    5444:	3f000000 	.word	0x3f000000
    5448:	f0ff03ff 	.word	0xf0ff03ff
    544c:	07003000 	.word	0x07003000
    5450:	00ec0100 	.word	0x00ec0100
    5454:	0306c038 	.word	0x0306c038
    5458:	00300000 	.word	0x00300000
	...
    5464:	03033000 	.word	0x03033000
    5468:	ff3f3000 	.word	0xff3f3000
    546c:	00f0ff03 	.word	0x00f0ff03
    5470:	00000003 	.word	0x00000003
    5474:	00000000 	.word	0x00000000
    5478:	00ff0300 	.word	0x00ff0300
    547c:	c000f03f 	.word	0xc000f03f
    5480:	00000700 	.word	0x00000700
    5484:	000c0070 	.word	0x000c0070
    5488:	3f008003 	.word	0x3f008003
    548c:	00ff00f0 	.word	0x00ff00f0
    5490:	ff030000 	.word	0xff030000
    5494:	03f00f00 	.word	0x03f00f00
    5498:	003000c0 	.word	0x003000c0
    549c:	30000003 	.word	0x30000003
    54a0:	00000300 	.word	0x00000300
    54a4:	ff00f00f 	.word	0xff00f00f
    54a8:	00000000 	.word	0x00000000
    54ac:	f03f00fc 	.word	0xf03f00fc
    54b0:	30000303 	.word	0x30000303
    54b4:	00030330 	.word	0x00030330
    54b8:	ff033030 	.word	0xff033030
    54bc:	00c00f00 	.word	0x00c00f00
    54c0:	00000000 	.word	0x00000000
    54c4:	0ff0ff03 	.word	0x0ff0ff03
    54c8:	000c0300 	.word	0x000c0300
    54cc:	0c03c030 	.word	0x0c03c030
    54d0:	03c03000 	.word	0x03c03000
    54d4:	000f000c 	.word	0x000f000c
    54d8:	0000f000 	.word	0x0000f000
    54dc:	00f00000 	.word	0x00f00000
    54e0:	0c03000f 	.word	0x0c03000f
    54e4:	03c03000 	.word	0x03c03000
    54e8:	c030000c 	.word	0xc030000c
    54ec:	0f000c03 	.word	0x0f000c03
    54f0:	f0ff0300 	.word	0xf0ff0300
    54f4:	ff030000 	.word	0xff030000
    54f8:	00f00f00 	.word	0x00f00f00
    54fc:	001c00c0 	.word	0x001c00c0
    5500:	30000003 	.word	0x30000003
    5504:	00000300 	.word	0x00000300
    5508:	c000001c 	.word	0xc000001c
    550c:	00000000 	.word	0x00000000
    5510:	303f00c3 	.word	0x303f00c3
    5514:	33003303 	.word	0x33003303
    5518:	00330330 	.word	0x00330330
    551c:	33033033 	.word	0x33033033
    5520:	00c00000 	.word	0x00c00000
    5524:	0000000c 	.word	0x0000000c
    5528:	30000003 	.word	0x30000003
    552c:	03fc3f00 	.word	0x03fc3f00
    5530:	0303c0ff 	.word	0x0303c0ff
    5534:	03303000 	.word	0x03303000
    5538:	c000000c 	.word	0xc000000c
    553c:	00000000 	.word	0x00000000
    5540:	00fc0300 	.word	0x00fc0300
    5544:	0300f03f 	.word	0x0300f03f
    5548:	00300000 	.word	0x00300000
    554c:	30000003 	.word	0x30000003
    5550:	3f00fc03 	.word	0x3f00fc03
    5554:	000300f0 	.word	0x000300f0
    5558:	c0010000 	.word	0xc0010000
    555c:	00000e00 	.word	0x00000e00
    5560:	e0010078 	.word	0xe0010078
    5564:	01000f00 	.word	0x01000f00
    5568:	007800e0 	.word	0x007800e0
    556c:	c001000e 	.word	0xc001000e
    5570:	03000000 	.word	0x03000000
    5574:	f03f00fc 	.word	0xf03f00fc
    5578:	01000300 	.word	0x01000300
    557c:	003000c0 	.word	0x003000c0
    5580:	0300c001 	.word	0x0300c001
    5584:	03f03f00 	.word	0x03f03f00
    5588:	000000fc 	.word	0x000000fc
    558c:	1c000303 	.word	0x1c000303
    5590:	007800e0 	.word	0x007800e0
    5594:	78000003 	.word	0x78000003
    5598:	03e01c00 	.word	0x03e01c00
    559c:	00000003 	.word	0x00000003
    55a0:	00000000 	.word	0x00000000
    55a4:	c0f00300 	.word	0xc0f00300
    55a8:	0c00cf3f 	.word	0x0c00cf3f
    55ac:	00c30070 	.word	0x00c30070
    55b0:	ff3f700c 	.word	0xff3f700c
    55b4:	00c0ff03 	.word	0x00c0ff03
    55b8:	00000000 	.word	0x00000000
    55bc:	03030000 	.word	0x03030000
    55c0:	03303000 	.word	0x03303000
    55c4:	f030000f 	.word	0xf030000f
    55c8:	33003303 	.word	0x33003303
    55cc:	00c30330 	.word	0x00c30330
    55d0:	0303303c 	.word	0x0303303c
	...
    55dc:	0c00c000 	.word	0x0c00c000
    55e0:	03cc0c00 	.word	0x03cc0c00
    55e4:	03303033 	.word	0x03303033
    55e8:	30300003 	.word	0x30300003
    55ec:	00000003 	.word	0x00000003
    55f0:	00000000 	.word	0x00000000
    55f4:	03000000 	.word	0x03000000
    55f8:	ff3ff0ff 	.word	0xff3ff0ff
	...
    5608:	03033000 	.word	0x03033000
    560c:	33333000 	.word	0x33333000
    5610:	0c303303 	.word	0x0c303303
    5614:	000c00cc 	.word	0x000c00cc
	...
    5620:	000f0000 	.word	0x000f0000
    5624:	3000f003 	.word	0x3000f003
    5628:	00800300 	.word	0x00800300
    562c:	7000000c 	.word	0x7000000c
    5630:	03000300 	.word	0x03000300
    5634:	003c00f0 	.word	0x003c00f0
	...
    5654:	ff00f003 	.word	0xff00f003
    5658:	030f3cc0 	.word	0x030f3cc0
    565c:	03303400 	.word	0x03303400
    5660:	303000c3 	.word	0x303000c3
    5664:	c0c00003 	.word	0xc0c00003
    5668:	00000c0c 	.word	0x00000c0c
    566c:	01fc0300 	.word	0x01fc0300
    5670:	0318f0bf 	.word	0x0318f0bf
    5674:	00300000 	.word	0x00300000
    5678:	30800103 	.word	0x30800103
    567c:	3f00fc1b 	.word	0x3f00fc1b
    5680:	000300f0 	.word	0x000300f0
    5684:	fc000000 	.word	0xfc000000
    5688:	03f03f00 	.word	0x03f03f00
    568c:	30330033 	.word	0x30330033
    5690:	b301330b 	.word	0xb301330b
    5694:	00331330 	.word	0x00331330
    5698:	f000300f 	.word	0xf000300f
    569c:	00000000 	.word	0x00000000
    56a0:	c000000c 	.word	0xc000000c
    56a4:	33003303 	.word	0x33003303
    56a8:	01330b30 	.word	0x01330b30
    56ac:	330b3033 	.word	0x330b3033
    56b0:	00303f00 	.word	0x00303f00
    56b4:	000000ff 	.word	0x000000ff
    56b8:	00000c00 	.word	0x00000c00
    56bc:	01331bc0 	.word	0x01331bc0
    56c0:	330330b3 	.word	0x330330b3
    56c4:	1b303300 	.word	0x1b303300
    56c8:	30bf0133 	.word	0x30bf0133
    56cc:	0000ff00 	.word	0x0000ff00
    56d0:	000c0000 	.word	0x000c0000
    56d4:	3303c000 	.word	0x3303c000
    56d8:	1b303301 	.word	0x1b303301
    56dc:	30b30033 	.word	0x30b30033
    56e0:	3f003303 	.word	0x3f003303
    56e4:	00ff0030 	.word	0x00ff0030
    56e8:	0c000000 	.word	0x0c000000
    56ec:	03c00000 	.word	0x03c00000
    56f0:	30330333 	.word	0x30330333
    56f4:	b304334b 	.word	0xb304334b
    56f8:	00333330 	.word	0x00333330
    56fc:	ff00303f 	.word	0xff00303f
    5700:	00000000 	.word	0x00000000
    5704:	f03f00fc 	.word	0xf03f00fc
    5708:	30000303 	.word	0x30000303
    570c:	40030330 	.word	0x40030330
    5710:	03033c30 	.word	0x03033c30
    5714:	00300c00 	.word	0x00300c00
    5718:	000000c3 	.word	0x000000c3
    571c:	3f00fc00 	.word	0x3f00fc00
    5720:	003303f0 	.word	0x003303f0
    5724:	331330b3 	.word	0x331330b3
    5728:	0330b300 	.word	0x0330b300
    572c:	300f0033 	.word	0x300f0033
    5730:	0000f000 	.word	0x0000f000
    5734:	01fc0000 	.word	0x01fc0000
    5738:	331bf0bf 	.word	0x331bf0bf
    573c:	03303300 	.word	0x03303300
    5740:	30b30133 	.word	0x30b30133
    5744:	0f00331b 	.word	0x0f00331b
    5748:	00f00030 	.word	0x00f00030
    574c:	fc000000 	.word	0xfc000000
    5750:	13f03f00 	.word	0x13f03f00
    5754:	30b30133 	.word	0x30b30133
    5758:	3300330b 	.word	0x3300330b
    575c:	00330330 	.word	0x00330330
    5760:	f000300f 	.word	0xf000300f
    5764:	00000000 	.word	0x00000000
    5768:	30000300 	.word	0x30000300
    576c:	3f000333 	.word	0x3f000333
    5770:	03ff03f0 	.word	0x03ff03f0
    5774:	03303000 	.word	0x03303000
	...
    5784:	01030b30 	.word	0x01030b30
    5788:	ff0bf03f 	.word	0xff0bf03f
    578c:	00300000 	.word	0x00300000
    5790:	00000003 	.word	0x00000003
	...
    579c:	03133000 	.word	0x03133000
    57a0:	0bf0bf01 	.word	0x0bf0bf01
    57a4:	300000ff 	.word	0x300000ff
    57a8:	00000300 	.word	0x00000300
    57ac:	00000000 	.word	0x00000000
    57b0:	ff000000 	.word	0xff000000
    57b4:	cff03f0c 	.word	0xcff03f0c
    57b8:	00c30130 	.word	0x00c30130
    57bc:	c3013030 	.word	0xc3013030
    57c0:	0c30cf00 	.word	0x0c30cf00
    57c4:	ff00f03f 	.word	0xff00f03f
    57c8:	00000000 	.word	0x00000000
    57cc:	f03f00ff 	.word	0xf03f00ff
    57d0:	c30b304f 	.word	0xc30b304f
    57d4:	0b30b000 	.word	0x0b30b000
    57d8:	304f00c3 	.word	0x304f00c3
    57dc:	00f03f00 	.word	0x00f03f00
    57e0:	000000ff 	.word	0x000000ff
    57e4:	ff03ff3f 	.word	0xff03ff3f
    57e8:	07c330f0 	.word	0x07c330f0
    57ec:	c370300c 	.word	0xc370300c
    57f0:	b0300c0b 	.word	0xb0300c0b
    57f4:	30000303 	.word	0x30000303
    57f8:	00000330 	.word	0x00000330
    57fc:	001c0000 	.word	0x001c0000
    5800:	3303f033 	.word	0x3303f033
    5804:	01303f00 	.word	0x01303f00
    5808:	e03b00ff 	.word	0xe03b00ff
    580c:	3b001303 	.word	0x3b001303
    5810:	00f30330 	.word	0x00f30330
    5814:	ff000000 	.word	0xff000000
    5818:	0ff03f00 	.word	0x0ff03f00
    581c:	00c30130 	.word	0x00c30130
    5820:	ff033030 	.word	0xff033030
    5824:	03ff3ff0 	.word	0x03ff3ff0
    5828:	c330300c 	.word	0xc330300c
    582c:	00000000 	.word	0x00000000
    5830:	f03f00fc 	.word	0xf03f00fc
    5834:	b0000303 	.word	0xb0000303
    5838:	00031330 	.word	0x00031330
    583c:	ff0330b0 	.word	0xff0330b0
    5840:	00c00f00 	.word	0x00c00f00
    5844:	00000000 	.word	0x00000000
    5848:	bf01fc00 	.word	0xbf01fc00
    584c:	00031bf0 	.word	0x00031bf0
    5850:	03033030 	.word	0x03033030
    5854:	1b30b001 	.word	0x1b30b001
    5858:	c00f00ff 	.word	0xc00f00ff
    585c:	00000000 	.word	0x00000000
    5860:	00fc0000 	.word	0x00fc0000
    5864:	0313f03f 	.word	0x0313f03f
    5868:	0b30b001 	.word	0x0b30b001
    586c:	30300003 	.word	0x30300003
    5870:	0f00ff03 	.word	0x0f00ff03
    5874:	000000c0 	.word	0x000000c0
    5878:	fc030000 	.word	0xfc030000
    587c:	00f03f00 	.word	0x00f03f00
    5880:	30800003 	.word	0x30800003
    5884:	80000310 	.word	0x80000310
    5888:	00fc0330 	.word	0x00fc0330
    588c:	0300f03f 	.word	0x0300f03f
    5890:	03000000 	.word	0x03000000
    5894:	f03f00fc 	.word	0xf03f00fc
    5898:	00010300 	.word	0x00010300
    589c:	00031830 	.word	0x00031830
    58a0:	fc033080 	.word	0xfc033080
    58a4:	00f03f00 	.word	0x00f03f00
    58a8:	00000003 	.word	0x00000003
    58ac:	bfc1f003 	.word	0xbfc1f003
    58b0:	700c18cf 	.word	0x700c18cf
    58b4:	0c00c300 	.word	0x0c00c300
    58b8:	1bffbf71 	.word	0x1bffbf71
    58bc:	0000c0ff 	.word	0x0000c0ff
    58c0:	00000000 	.word	0x00000000
    58c4:	00fc0700 	.word	0x00fc0700
    58c8:	07dcc07f 	.word	0x07dcc07f
    58cc:	1830800d 	.word	0x1830800d
    58d0:	30800d03 	.word	0x30800d03
    58d4:	7f0007dc 	.word	0x7f0007dc
    58d8:	00fc07c0 	.word	0x00fc07c0
    58dc:	fc1f0000 	.word	0xfc1f0000
    58e0:	c0c0ff01 	.word	0xc0c0ff01
    58e4:	30000c03 	.word	0x30000c03
    58e8:	00000300 	.word	0x00000300
    58ec:	0d03c030 	.word	0x0d03c030
    58f0:	fc1fc0ff 	.word	0xfc1fc0ff
    58f4:	03000000 	.word	0x03000000
    58f8:	c0ff00f0 	.word	0xc0ff00f0
    58fc:	c0000c0c 	.word	0xc0000c0c
    5900:	80ef7dc0 	.word	0x80ef7dc0
    5904:	0c0cc0c0 	.word	0x0c0cc0c0
    5908:	03003300 	.word	0x03003300
    590c:	00000030 	.word	0x00000030
    5910:	ff006300 	.word	0xff006300
    5914:	03ff1ff0 	.word	0x03ff1ff0
    5918:	63303086 	.word	0x63303086
    591c:	18300003 	.word	0x18300003
    5920:	30c00003 	.word	0x30c00003
    5924:	00000300 	.word	0x00000300
    5928:	03002000 	.word	0x03002000
    592c:	240e0080 	.word	0x240e0080
    5930:	00403a00 	.word	0x00403a00
    5934:	403a00ff 	.word	0x403a00ff
    5938:	8003240e 	.word	0x8003240e
    593c:	00002000 	.word	0x00002000
    5940:	ff3f0000 	.word	0xff3f0000
    5944:	31f0ff03 	.word	0x31f0ff03
    5948:	e01b0380 	.word	0xe01b0380
    594c:	1903bf31 	.word	0x1903bf31
    5950:	00933130 	.word	0x00933130
    5954:	000e00e0 	.word	0x000e00e0
    5958:	00000000 	.word	0x00000000
    595c:	fc0c00c0 	.word	0xfc0c00c0
    5960:	ffc0ff0f 	.word	0xffc0ff0f
    5964:	03c03fc0 	.word	0x03c03fc0
    5968:	c038008c 	.word	0xc038008c
    596c:	0e00e001 	.word	0x0e00e001
    5970:	00000000 	.word	0x00000000
    5974:	00000c00 	.word	0x00000c00
    5978:	003303c0 	.word	0x003303c0
    597c:	330b3033 	.word	0x330b3033
    5980:	1330b301 	.word	0x1330b301
    5984:	303f0033 	.word	0x303f0033
    5988:	0000ff00 	.word	0x0000ff00
    598c:	00000000 	.word	0x00000000
    5990:	03033000 	.word	0x03033000
    5994:	33f03f01 	.word	0x33f03f01
    5998:	300002ff 	.word	0x300002ff
    599c:	00000300 	.word	0x00000300
    59a0:	00000000 	.word	0x00000000
    59a4:	fc000000 	.word	0xfc000000
    59a8:	03f03f00 	.word	0x03f03f00
    59ac:	30b00003 	.word	0x30b00003
    59b0:	3001031b 	.word	0x3001031b
    59b4:	00ff0330 	.word	0x00ff0330
    59b8:	0000c00f 	.word	0x0000c00f
    59bc:	03000000 	.word	0x03000000
    59c0:	f03f00fc 	.word	0xf03f00fc
    59c4:	80000300 	.word	0x80000300
    59c8:	01031830 	.word	0x01031830
    59cc:	fc033000 	.word	0xfc033000
    59d0:	00f03f00 	.word	0x00f03f00
    59d4:	00000003 	.word	0x00000003
    59d8:	0f00ff03 	.word	0x0f00ff03
    59dc:	00c013f0 	.word	0x00c013f0
    59e0:	000b00b0 	.word	0x000b00b0
    59e4:	13003001 	.word	0x13003001
    59e8:	f08f0000 	.word	0xf08f0000
    59ec:	0000ff00 	.word	0x0000ff00
    59f0:	0bff3f00 	.word	0x0bff3f00
    59f4:	004cf0ff 	.word	0x004cf0ff
    59f8:	80003004 	.word	0x80003004
    59fc:	000308c0 	.word	0x000308c0
    5a00:	ff030c40 	.word	0xff030c40
    5a04:	00ff3ff0 	.word	0x00ff3ff0
    5a08:	80000000 	.word	0x80000000
    5a0c:	26000800 	.word	0x26000800
    5a10:	00a80280 	.word	0x00a80280
    5a14:	a802802a 	.word	0xa802802a
    5a18:	00801e00 	.word	0x00801e00
    5a1c:	80000008 	.word	0x80000008
    5a20:	00000000 	.word	0x00000000
    5a24:	00080080 	.word	0x00080080
    5a28:	6803801c 	.word	0x6803801c
    5a2c:	03802200 	.word	0x03802200
    5a30:	801c0068 	.word	0x801c0068
    5a34:	00000800 	.word	0x00000800
    5a38:	00000080 	.word	0x00000080
    5a3c:	00000300 	.word	0x00000300
    5a40:	c00c0030 	.word	0xc00c0030
    5a44:	f00ccc00 	.word	0xf00ccc00
    5a48:	000ccfc0 	.word	0x000ccfc0
    5a4c:	3c00c000 	.word	0x3c00c000
    5a50:	00000300 	.word	0x00000300
    5a54:	00f00000 	.word	0x00f00000
    5a58:	c000000f 	.word	0xc000000f
    5a5c:	00000c00 	.word	0x00000c00
    5a60:	000c00c0 	.word	0x000c00c0
    5a64:	0c00c000 	.word	0x0c00c000
    5a68:	00c00000 	.word	0x00c00000
    5a6c:	c0000000 	.word	0xc0000000
    5a70:	00000c00 	.word	0x00000c00
    5a74:	000c00c0 	.word	0x000c00c0
    5a78:	0c00c000 	.word	0x0c00c000
    5a7c:	00c00000 	.word	0x00c00000
    5a80:	f000000f 	.word	0xf000000f
    5a84:	00000000 	.word	0x00000000
    5a88:	000c00c0 	.word	0x000c00c0
    5a8c:	0c40c400 	.word	0x0c40c400
    5a90:	c7d97ecc 	.word	0xc7d97ecc
    5a94:	de00b4ed 	.word	0xde00b4ed
    5a98:	00c40c40 	.word	0x00c40c40
    5a9c:	000000c0 	.word	0x000000c0
    5aa0:	0d00c000 	.word	0x0d00c000
    5aa4:	00df00f0 	.word	0x00df00f0
    5aa8:	c17e100c 	.word	0xc17e100c
    5aac:	00feec07 	.word	0x00feec07
    5ab0:	100ce0cf 	.word	0x100ce0cf
    5ab4:	0000c000 	.word	0x0000c000
	...
    5ac0:	0cfccf00 	.word	0x0cfccf00
    5ac4:	0000c0ff 	.word	0x0000c0ff
	...
    5ad0:	40000000 	.word	0x40000000
    5ad4:	01000a00 	.word	0x01000a00
    5ad8:	80240010 	.word	0x80240010
    5adc:	1100a000 	.word	0x1100a000
    5ae0:	00080200 	.word	0x00080200
	...
    5af0:	11000802 	.word	0x11000802
    5af4:	00a00000 	.word	0x00a00000
    5af8:	10018024 	.word	0x10018024
    5afc:	00000a00 	.word	0x00000a00
    5b00:	00000040 	.word	0x00000040
    5b04:	82200882 	.word	0x82200882
    5b08:	08822008 	.word	0x08822008
    5b0c:	20088220 	.word	0x20088220
    5b10:	82200882 	.word	0x82200882
    5b14:	08822008 	.word	0x08822008
    5b18:	20088220 	.word	0x20088220
    5b1c:	24499282 	.word	0x24499282
    5b20:	92244992 	.word	0x92244992
    5b24:	49922449 	.word	0x49922449
    5b28:	24499224 	.word	0x24499224
    5b2c:	92244992 	.word	0x92244992
    5b30:	49922449 	.word	0x49922449
    5b34:	b66d9224 	.word	0xb66d9224
    5b38:	dbb66ddb 	.word	0xdbb66ddb
    5b3c:	6ddbb66d 	.word	0x6ddbb66d
    5b40:	b66ddbb6 	.word	0xb66ddbb6
    5b44:	dbb66ddb 	.word	0xdbb66ddb
    5b48:	6ddbb66d 	.word	0x6ddbb66d
    5b4c:	006ddbb6 	.word	0x006ddbb6
	...
    5b58:	f0ffff00 	.word	0xf0ffff00
	...
    5b68:	04004000 	.word	0x04004000
    5b6c:	00400000 	.word	0x00400000
    5b70:	ffff0004 	.word	0xffff0004
    5b74:	000000f0 	.word	0x000000f0
	...
    5b80:	00a00000 	.word	0x00a00000
    5b84:	a000000a 	.word	0xa000000a
    5b88:	ff000a00 	.word	0xff000a00
    5b8c:	0000f0ff 	.word	0x0000f0ff
	...
    5b98:	40000000 	.word	0x40000000
    5b9c:	00000400 	.word	0x00000400
    5ba0:	ffff0f40 	.word	0xffff0f40
    5ba4:	ff0f0000 	.word	0xff0f0000
    5ba8:	000000ff 	.word	0x000000ff
	...
    5bb4:	00040040 	.word	0x00040040
    5bb8:	07004000 	.word	0x07004000
    5bbc:	004000ff 	.word	0x004000ff
    5bc0:	0000ff07 	.word	0x0000ff07
	...
    5bcc:	0a00a000 	.word	0x0a00a000
    5bd0:	00a00000 	.word	0x00a00000
    5bd4:	ff00000a 	.word	0xff00000a
    5bd8:	000000f0 	.word	0x000000f0
	...
    5be4:	00a00000 	.word	0x00a00000
    5be8:	a000000a 	.word	0xa000000a
    5bec:	00fffb0f 	.word	0x00fffb0f
    5bf0:	ffff0f00 	.word	0xffff0f00
	...
    5c04:	ffff0f00 	.word	0xffff0f00
    5c08:	ff0f0000 	.word	0xff0f0000
    5c0c:	000000ff 	.word	0x000000ff
	...
    5c18:	000a00a0 	.word	0x000a00a0
    5c1c:	0b00a000 	.word	0x0b00a000
    5c20:	008000ff 	.word	0x008000ff
    5c24:	0000ff0f 	.word	0x0000ff0f
	...
    5c30:	0a00a000 	.word	0x0a00a000
    5c34:	0fa00000 	.word	0x0fa00000
    5c38:	200000fa 	.word	0x200000fa
    5c3c:	0000fe0f 	.word	0x0000fe0f
	...
    5c48:	00400000 	.word	0x00400000
    5c4c:	40000004 	.word	0x40000004
    5c50:	0000fc0f 	.word	0x0000fc0f
    5c54:	00fc0f40 	.word	0x00fc0f40
	...
    5c60:	a0000000 	.word	0xa0000000
    5c64:	00000a00 	.word	0x00000a00
    5c68:	000a00a0 	.word	0x000a00a0
    5c6c:	0000e0ff 	.word	0x0000e0ff
	...
    5c7c:	00040040 	.word	0x00040040
    5c80:	04004000 	.word	0x04004000
    5c84:	f07f0000 	.word	0xf07f0000
	...
    5c9c:	c0ff0000 	.word	0xc0ff0000
    5ca0:	00000400 	.word	0x00000400
    5ca4:	00040040 	.word	0x00040040
    5ca8:	04004000 	.word	0x04004000
    5cac:	00400000 	.word	0x00400000
    5cb0:	40000004 	.word	0x40000004
    5cb4:	ff000400 	.word	0xff000400
    5cb8:	000400c0 	.word	0x000400c0
    5cbc:	04004000 	.word	0x04004000
    5cc0:	00400000 	.word	0x00400000
    5cc4:	40000004 	.word	0x40000004
    5cc8:	00000400 	.word	0x00000400
    5ccc:	00040040 	.word	0x00040040
    5cd0:	04f07f00 	.word	0x04f07f00
    5cd4:	00400000 	.word	0x00400000
    5cd8:	40000004 	.word	0x40000004
    5cdc:	00000400 	.word	0x00000400
	...
    5ce8:	f0ffff00 	.word	0xf0ffff00
    5cec:	40000004 	.word	0x40000004
    5cf0:	00000400 	.word	0x00000400
    5cf4:	00040040 	.word	0x00040040
    5cf8:	04004000 	.word	0x04004000
    5cfc:	00400000 	.word	0x00400000
    5d00:	40000004 	.word	0x40000004
    5d04:	00000400 	.word	0x00000400
    5d08:	00040040 	.word	0x00040040
    5d0c:	04004000 	.word	0x04004000
    5d10:	00400000 	.word	0x00400000
    5d14:	40000004 	.word	0x40000004
    5d18:	ff000400 	.word	0xff000400
    5d1c:	0004f0ff 	.word	0x0004f0ff
    5d20:	04004000 	.word	0x04004000
    5d24:	00400000 	.word	0x00400000
    5d28:	00000004 	.word	0x00000004
	...
    5d34:	0af0ffff 	.word	0x0af0ffff
    5d38:	00a00000 	.word	0x00a00000
    5d3c:	a000000a 	.word	0xa000000a
    5d40:	00000a00 	.word	0x00000a00
    5d44:	00000000 	.word	0x00000000
    5d48:	ff0f0000 	.word	0xff0f0000
    5d4c:	0f0000ff 	.word	0x0f0000ff
    5d50:	4000ffff 	.word	0x4000ffff
    5d54:	00000400 	.word	0x00000400
    5d58:	00040040 	.word	0x00040040
    5d5c:	00000000 	.word	0x00000000
    5d60:	0f000000 	.word	0x0f000000
    5d64:	200000fe 	.word	0x200000fe
    5d68:	0000fa0f 	.word	0x0000fa0f
    5d6c:	000a00a0 	.word	0x000a00a0
    5d70:	0a00a000 	.word	0x0a00a000
	...
    5d7c:	00ff0f00 	.word	0x00ff0f00
    5d80:	ff0b0080 	.word	0xff0b0080
    5d84:	0a00a000 	.word	0x0a00a000
    5d88:	00a00000 	.word	0x00a00000
    5d8c:	a000000a 	.word	0xa000000a
    5d90:	00000a00 	.word	0x00000a00
    5d94:	00fa0fa0 	.word	0x00fa0fa0
    5d98:	fa0f2000 	.word	0xfa0f2000
    5d9c:	00a00000 	.word	0x00a00000
    5da0:	a000000a 	.word	0xa000000a
    5da4:	00000a00 	.word	0x00000a00
    5da8:	000a00a0 	.word	0x000a00a0
    5dac:	0b00a000 	.word	0x0b00a000
    5db0:	008000ff 	.word	0x008000ff
    5db4:	a000ff0b 	.word	0xa000ff0b
    5db8:	00000a00 	.word	0x00000a00
    5dbc:	000a00a0 	.word	0x000a00a0
    5dc0:	00000000 	.word	0x00000000
    5dc4:	0f000000 	.word	0x0f000000
    5dc8:	0000ffff 	.word	0x0000ffff
    5dcc:	00fffb0f 	.word	0x00fffb0f
    5dd0:	000a00a0 	.word	0x000a00a0
    5dd4:	0a00a000 	.word	0x0a00a000
    5dd8:	00a00000 	.word	0x00a00000
    5ddc:	a000000a 	.word	0xa000000a
    5de0:	00000a00 	.word	0x00000a00
    5de4:	000a00a0 	.word	0x000a00a0
    5de8:	0a00a000 	.word	0x0a00a000
    5dec:	00a00000 	.word	0x00a00000
    5df0:	a000000a 	.word	0xa000000a
    5df4:	00000a00 	.word	0x00000a00
    5df8:	fffb0fa0 	.word	0xfffb0fa0
    5dfc:	fb0f0000 	.word	0xfb0f0000
    5e00:	00a000ff 	.word	0x00a000ff
    5e04:	a000000a 	.word	0xa000000a
    5e08:	00000a00 	.word	0x00000a00
    5e0c:	000a00a0 	.word	0x000a00a0
    5e10:	0a00a000 	.word	0x0a00a000
    5e14:	00a0ff00 	.word	0x00a0ff00
    5e18:	a000000a 	.word	0xa000000a
    5e1c:	00000a00 	.word	0x00000a00
    5e20:	000a00a0 	.word	0x000a00a0
    5e24:	04004000 	.word	0x04004000
    5e28:	0f400000 	.word	0x0f400000
    5e2c:	400000fc 	.word	0x400000fc
    5e30:	0000fc0f 	.word	0x0000fc0f
    5e34:	00040040 	.word	0x00040040
    5e38:	04004000 	.word	0x04004000
    5e3c:	00a00000 	.word	0x00a00000
    5e40:	a000000a 	.word	0xa000000a
    5e44:	00000a00 	.word	0x00000a00
    5e48:	000af0bf 	.word	0x000af0bf
    5e4c:	0a00a000 	.word	0x0a00a000
    5e50:	00a00000 	.word	0x00a00000
    5e54:	4000000a 	.word	0x4000000a
    5e58:	00000400 	.word	0x00000400
    5e5c:	ff070040 	.word	0xff070040
    5e60:	07004000 	.word	0x07004000
    5e64:	004000ff 	.word	0x004000ff
    5e68:	40000004 	.word	0x40000004
    5e6c:	00000400 	.word	0x00000400
    5e70:	00000000 	.word	0x00000000
    5e74:	fc0f0000 	.word	0xfc0f0000
    5e78:	0f400000 	.word	0x0f400000
    5e7c:	400000fc 	.word	0x400000fc
    5e80:	00000400 	.word	0x00000400
    5e84:	00040040 	.word	0x00040040
	...
    5e90:	e0ff0000 	.word	0xe0ff0000
    5e94:	00000a00 	.word	0x00000a00
    5e98:	000a00a0 	.word	0x000a00a0
    5e9c:	0a00a000 	.word	0x0a00a000
	...
    5eac:	000af0ff 	.word	0x000af0ff
    5eb0:	0a00a000 	.word	0x0a00a000
    5eb4:	00a00000 	.word	0x00a00000
    5eb8:	0000000a 	.word	0x0000000a
    5ebc:	00000000 	.word	0x00000000
    5ec0:	ff070000 	.word	0xff070000
    5ec4:	07004000 	.word	0x07004000
    5ec8:	004000ff 	.word	0x004000ff
    5ecc:	40000004 	.word	0x40000004
    5ed0:	00000400 	.word	0x00000400
    5ed4:	00040040 	.word	0x00040040
    5ed8:	ff0f4000 	.word	0xff0f4000
    5edc:	0f4000ff 	.word	0x0f4000ff
    5ee0:	4000ffff 	.word	0x4000ffff
    5ee4:	00000400 	.word	0x00000400
    5ee8:	00040040 	.word	0x00040040
    5eec:	0a00a000 	.word	0x0a00a000
    5ef0:	00a00000 	.word	0x00a00000
    5ef4:	ffff000a 	.word	0xffff000a
    5ef8:	00000af0 	.word	0x00000af0
    5efc:	000a00a0 	.word	0x000a00a0
    5f00:	0a00a000 	.word	0x0a00a000
    5f04:	00400000 	.word	0x00400000
    5f08:	40000004 	.word	0x40000004
    5f0c:	ff000400 	.word	0xff000400
    5f10:	000000c0 	.word	0x000000c0
	...
    5f28:	04f07f00 	.word	0x04f07f00
    5f2c:	00400000 	.word	0x00400000
    5f30:	40000004 	.word	0x40000004
    5f34:	ff000400 	.word	0xff000400
    5f38:	ffffffff 	.word	0xffffffff
    5f3c:	ffffffff 	.word	0xffffffff
    5f40:	ffffffff 	.word	0xffffffff
    5f44:	ffffffff 	.word	0xffffffff
    5f48:	ffffffff 	.word	0xffffffff
    5f4c:	ffffffff 	.word	0xffffffff
    5f50:	07f07f00 	.word	0x07f07f00
    5f54:	f07f00ff 	.word	0xf07f00ff
    5f58:	7f00ff07 	.word	0x7f00ff07
    5f5c:	00ff07f0 	.word	0x00ff07f0
    5f60:	ff07f07f 	.word	0xff07f07f
    5f64:	07f07f00 	.word	0x07f07f00
    5f68:	ffffffff 	.word	0xffffffff
    5f6c:	ffffffff 	.word	0xffffffff
    5f70:	ffffffff 	.word	0xffffffff
    5f74:	0000f0ff 	.word	0x0000f0ff
	...
    5f8c:	ffffffff 	.word	0xffffffff
    5f90:	ffffffff 	.word	0xffffffff
    5f94:	ffffffff 	.word	0xffffffff
    5f98:	ffffffff 	.word	0xffffffff
    5f9c:	00fc0fc0 	.word	0x00fc0fc0
    5fa0:	fc0fc0ff 	.word	0xfc0fc0ff
    5fa4:	0fc0ff00 	.word	0x0fc0ff00
    5fa8:	c0ff00fc 	.word	0xc0ff00fc
    5fac:	ff00fc0f 	.word	0xff00fc0f
    5fb0:	00fc0fc0 	.word	0x00fc0fc0
    5fb4:	03003c00 	.word	0x03003c00
    5fb8:	00c300c0 	.word	0x00c300c0
    5fbc:	c300300c 	.word	0xc300300c
    5fc0:	00200400 	.word	0x00200400
    5fc4:	2004003c 	.word	0x2004003c
    5fc8:	00008100 	.word	0x00008100
    5fcc:	00010000 	.word	0x00010000
    5fd0:	ff0ff07f 	.word	0xff0ff07f
    5fd4:	08108c00 	.word	0x08108c00
    5fd8:	30de00c1 	.word	0x30de00c1
    5fdc:	01003707 	.word	0x01003707
    5fe0:	000000c0 	.word	0x000000c0
    5fe4:	01080000 	.word	0x01080000
    5fe8:	0ff0ff00 	.word	0x0ff0ff00
    5fec:	10c000ff 	.word	0x10c000ff
    5ff0:	c000000c 	.word	0xc000000c
    5ff4:	00800f00 	.word	0x00800f00
    5ff8:	000000f8 	.word	0x000000f8
    5ffc:	00000000 	.word	0x00000000
    6000:	f00f0081 	.word	0xf00f0081
    6004:	0c00ff00 	.word	0x0c00ff00
    6008:	00c00000 	.word	0x00c00000
    600c:	ff00000c 	.word	0xff00000c
    6010:	00f00f00 	.word	0x00f00f00
    6014:	00000081 	.word	0x00000081
    6018:	61030f3c 	.word	0x61030f3c
    601c:	033333b0 	.word	0x033333b0
    6020:	c330301e 	.word	0xc330301e
    6024:	30300003 	.word	0x30300003
    6028:	30000303 	.word	0x30000303
    602c:	00000738 	.word	0x00000738
    6030:	00fc0000 	.word	0x00fc0000
    6034:	0303f03f 	.word	0x0303f03f
    6038:	03303000 	.word	0x03303000
    603c:	30300003 	.word	0x30300003
    6040:	3f00ff03 	.word	0x3f00ff03
    6044:	000003c0 	.word	0x000003c0
    6048:	ff030000 	.word	0xff030000
    604c:	00fe3fe0 	.word	0x00fe3fe0
    6050:	30000003 	.word	0x30000003
    6054:	00000300 	.word	0x00000300
    6058:	00fc0330 	.word	0x00fc0330
    605c:	0300f03f 	.word	0x0300f03f
    6060:	03000000 	.word	0x03000000
    6064:	00380000 	.word	0x00380000
    6068:	0f00c001 	.word	0x0f00c001
    606c:	00ff03f0 	.word	0x00ff03f0
    6070:	80030030 	.word	0x80030030
    6074:	00001c00 	.word	0x00001c00
    6078:	000000c0 	.word	0x000000c0
    607c:	5f80fc04 	.word	0x5f80fc04
    6080:	800307e8 	.word	0x800307e8
    6084:	03073870 	.word	0x03073870
    6088:	05387080 	.word	0x05387080
    608c:	c84f80fe 	.word	0xc84f80fe
    6090:	00000000 	.word	0x00000000
    6094:	00f00300 	.word	0x00f00300
    6098:	cf3cc0ff 	.word	0xcf3cc0ff
    609c:	30300c03 	.word	0x30300c03
    60a0:	300c03c3 	.word	0x300c03c3
    60a4:	ff00cf3c 	.word	0xff00cf3c
    60a8:	00f003c0 	.word	0x00f003c0
    60ac:	f90f0000 	.word	0xf90f0000
    60b0:	38f0ff01 	.word	0x38f0ff01
    60b4:	0000031f 	.word	0x0000031f
    60b8:	00030030 	.word	0x00030030
    60bc:	011f3800 	.word	0x011f3800
    60c0:	f90ff0ff 	.word	0xf90ff0ff
    60c4:	00000000 	.word	0x00000000
    60c8:	f03f00fc 	.word	0xf03f00fc
    60cc:	b0030333 	.word	0xb0030333
    60d0:	03033f30 	.word	0x03033f30
    60d4:	ff333070 	.word	0xff333070
    60d8:	30c00f03 	.word	0x30c00f03
    60dc:	00000000 	.word	0x00000000
    60e0:	1000f800 	.word	0x1000f800
    60e4:	00020240 	.word	0x00020240
    60e8:	f8004010 	.word	0xf8004010
    60ec:	02401000 	.word	0x02401000
    60f0:	40100002 	.word	0x40100002
    60f4:	0000f800 	.word	0x0000f800
    60f8:	00fd0100 	.word	0x00fd0100
    60fc:	0e027030 	.word	0x0e027030
    6100:	04b06100 	.word	0x04b06100
    6104:	306c0071 	.word	0x306c0071
    6108:	70008203 	.word	0x70008203
    610c:	00fc0560 	.word	0x00fc0560
    6110:	f0030000 	.word	0xf0030000
    6114:	3cc0ff00 	.word	0x3cc0ff00
    6118:	300c03cf 	.word	0x300c03cf
    611c:	0c03c330 	.word	0x0c03c330
    6120:	00033030 	.word	0x00033030
    6124:	00000000 	.word	0x00000000
    6128:	03000000 	.word	0x03000000
    612c:	fc3fc0ff 	.word	0xfc3fc0ff
    6130:	c000000c 	.word	0xc000000c
    6134:	00000c00 	.word	0x00000c00
    6138:	000c00c0 	.word	0x000c00c0
    613c:	03fc3f00 	.word	0x03fc3f00
    6140:	0000c0ff 	.word	0x0000c0ff
    6144:	33003303 	.word	0x33003303
    6148:	00330330 	.word	0x00330330
    614c:	33033033 	.word	0x33033033
    6150:	03303300 	.word	0x03303300
    6154:	30330033 	.word	0x30330033
    6158:	00003303 	.word	0x00003303
    615c:	00c10000 	.word	0x00c10000
    6160:	c100100c 	.word	0xc100100c
    6164:	0f100c00 	.word	0x0f100c00
    6168:	100c00fd 	.word	0x100c00fd
    616c:	0c00c100 	.word	0x0c00c100
    6170:	00c10010 	.word	0x00c10010
    6174:	03300000 	.word	0x03300000
    6178:	0c360063 	.word	0x0c360063
    617c:	c6c0600c 	.word	0xc6c0600c
    6180:	33603003 	.word	0x33603003
    6184:	60c00006 	.word	0x60c00006
    6188:	0000060c 	.word	0x0000060c
    618c:	00000000 	.word	0x00000000
    6190:	060c60c0 	.word	0x060c60c0
    6194:	33603003 	.word	0x33603003
    6198:	600c0c06 	.word	0x600c0c06
    619c:	0330c6c0 	.word	0x0330c6c0
    61a0:	00360063 	.word	0x00360063
	...
    61b0:	ff7f0000 	.word	0xff7f0000
    61b4:	800000fc 	.word	0x800000fc
    61b8:	00000c00 	.word	0x00000c00
    61bc:	00000060 	.word	0x00000060
    61c0:	60000000 	.word	0x60000000
    61c4:	00000100 	.word	0x00000100
    61c8:	ff060010 	.word	0xff060010
    61cc:	000080ff 	.word	0x000080ff
	...
    61d8:	c0000000 	.word	0xc0000000
    61dc:	00000c00 	.word	0x00000c00
    61e0:	c0cc00c0 	.word	0xc0cc00c0
    61e4:	0c00cc0c 	.word	0x0c00cc0c
    61e8:	00c00000 	.word	0x00c00000
    61ec:	c000000c 	.word	0xc000000c
    61f0:	03000000 	.word	0x03000000
    61f4:	00660030 	.word	0x00660030
    61f8:	66006006 	.word	0x66006006
    61fc:	00300300 	.word	0x00300300
    6200:	98018019 	.word	0x98018019
    6204:	03801900 	.word	0x03801900
    6208:	00000030 	.word	0x00000030
    620c:	00000000 	.word	0x00000000
    6210:	01000c00 	.word	0x01000c00
    6214:	00120020 	.word	0x00120020
    6218:	0000c000 	.word	0x0000c000
	...
    6228:	0e000000 	.word	0x0e000000
    622c:	00e00000 	.word	0x00e00000
    6230:	0000000e 	.word	0x0000000e
	...
    6244:	30000000 	.word	0x30000000
    6248:	00000300 	.word	0x00000300
	...
    6258:	80030020 	.word	0x80030020
    625c:	03000700 	.word	0x03000700
    6260:	00c001c0 	.word	0x00c001c0
    6264:	001000e0 	.word	0x001000e0
    6268:	10000001 	.word	0x10000001
    626c:	00000100 	.word	0x00000100
    6270:	00000000 	.word	0x00000000
    6274:	03007e00 	.word	0x03007e00
    6278:	006000e0 	.word	0x006000e0
    627c:	60000006 	.word	0x60000006
    6280:	00e00700 	.word	0x00e00700
    6284:	0000001e 	.word	0x0000001e
    6288:	00000000 	.word	0x00000000
    628c:	80210000 	.word	0x80210000
    6290:	67003806 	.word	0x67003806
    6294:	00e80680 	.word	0x00e80680
    6298:	8803807c 	.word	0x8803807c
    629c:	00000000 	.word	0x00000000
    62a0:	ff000000 	.word	0xff000000
    62a4:	00f00f00 	.word	0x00f00f00
    62a8:	f00f00ff 	.word	0xf00f00ff
    62ac:	0f00ff00 	.word	0x0f00ff00
    62b0:	000000f0 	.word	0x000000f0
	...
    62d4:	ffffffff 	.word	0xffffffff
    62d8:	677537ff 	.word	0x677537ff
    62dc:	71312c6a 	.word	0x71312c6a
    62e0:	38ffffff 	.word	0x38ffffff
    62e4:	ff6b6869 	.word	0xff6b6869
    62e8:	7aff7732 	.word	0x7aff7732
    62ec:	6f3039ff 	.word	0x6f3039ff
    62f0:	65332e6c 	.word	0x65332e6c
    62f4:	ffff7861 	.word	0xffff7861
    62f8:	2f3b702d 	.word	0x2f3b702d
    62fc:	63737234 	.word	0x63737234
    6300:	5b3dff20 	.word	0x5b3dff20
    6304:	7435ff27 	.word	0x7435ff27
    6308:	ff6e7664 	.word	0xff6e7664
    630c:	5cff5d27 	.word	0x5cff5d27
    6310:	62667936 	.word	0x62667936
    6314:	ffffff6d 	.word	0xffffff6d
    6318:	0000ffff 	.word	0x0000ffff
    631c:	ffffffff 	.word	0xffffffff
    6320:	475526ff 	.word	0x475526ff
    6324:	51213c4a 	.word	0x51213c4a
    6328:	2affffff 	.word	0x2affffff
    632c:	ff4b4849 	.word	0xff4b4849
    6330:	5aff5740 	.word	0x5aff5740
    6334:	4f2928ff 	.word	0x4f2928ff
    6338:	45233e4c 	.word	0x45233e4c
    633c:	ffff5841 	.word	0xffff5841
    6340:	3f3a505f 	.word	0x3f3a505f
    6344:	43535224 	.word	0x43535224
    6348:	7b2bff20 	.word	0x7b2bff20
    634c:	5425ff22 	.word	0x5425ff22
    6350:	ff4e5644 	.word	0xff4e5644
    6354:	7cff7d7e 	.word	0x7cff7d7e
    6358:	4246595e 	.word	0x4246595e
    635c:	ffffff4d 	.word	0xffffff4d
    6360:	0000ffff 	.word	0x0000ffff

00006364 <kb_col>:
    6364:	00010000 00020000 00040000 00080000     ................
    6374:	00100000 00200000 08000000              ...... .....

00006380 <kb_col_index>:
    6380:	00000010 00000011 00000012 00000013     ................
    6390:	00000014 00000015 0000001b              ............

0000639c <kb_row>:
    639c:	00000004 00000008 00000010 00000020     ............ ...
    63ac:	00000040 00000080 00000400 00000800     @...............
    63bc:	00001000 00002000                       ..... ..

000063c4 <kb_row_index>:
    63c4:	00000002 00000003 00000004 00000005     ................
    63d4:	00000006 00000007 0000000a 0000000b     ................
    63e4:	0000000c 0000000d                       ........

000063ec <beelzebub.12954>:
    63ec:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    63fc:	64012201 d4019201 08020702 5f023402     .".d.........4._
    640c:	94027802 bb02a602 db02ca02 f902e802     .x..............
    641c:	7f031f03                                ....

00006420 <belial.12951>:
    6420:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    6430:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    6440:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    6450:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    6460:	35c9c9c9 0000363a                       ...5:6..

00006468 <lucifer.12953>:
    6468:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    6478:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    6488:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6498:	00cc0008 01707005 02030303 02d00000     .....pp.........
    64a8:	00505050 00000055                       PPP.U...

000064b0 <mulciber.12952>:
    64b0:	03020100 02010004 00020100 01000201     ................
    64c0:	02010002 00020100 01000201 01000002     ................
    64d0:	02010000 00020100 01000201 03020100     ................
    64e0:	00000004 01000100 01000302 02010002     ................
    64f0:	00000403 00000000 69726553 4f206c61     ........Serial O
    6500:	3639204b 38203030 0d0a314e 00000000     K 9600 8N1......

00006510 <_global_impure_ptr>:
    6510:	20000044                                D.. 

00006514 <__sf_fake_stderr>:
	...

00006534 <__sf_fake_stdin>:
	...

00006554 <__sf_fake_stdout>:
	...
    6574:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6584:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6594:	31300046 35343332 39383736 64636261     F.0123456789abcd
    65a4:	00006665                                ef..

000065a8 <_init>:
    65a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65aa:	46c0      	nop			; (mov r8, r8)
    65ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    65ae:	bc08      	pop	{r3}
    65b0:	469e      	mov	lr, r3
    65b2:	4770      	bx	lr

000065b4 <__init_array_start>:
    65b4:	000000dd 	.word	0x000000dd

000065b8 <_fini>:
    65b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65ba:	46c0      	nop			; (mov r8, r8)
    65bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    65be:	bc08      	pop	{r3}
    65c0:	469e      	mov	lr, r3
    65c2:	4770      	bx	lr

000065c4 <__fini_array_start>:
    65c4:	000000b5 	.word	0x000000b5
