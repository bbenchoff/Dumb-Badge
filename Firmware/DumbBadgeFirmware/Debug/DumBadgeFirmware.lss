
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015a8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  000015a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a0  20000074  0000161c  00020074  2**2
                  ALLOC
  3 .stack        00002004  20000114  000016bc  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00016684  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002456  00000000  00000000  00036779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000279e  00000000  00000000  00038bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003a0  00000000  00000000  0003b36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003b8  00000000  00000000  0003b70d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000193df  00000000  00000000  0003bac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000078bd  00000000  00000000  00054ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e0d1  00000000  00000000  0005c761  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a28  00000000  00000000  000ea834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 21 00 20 4d 0a 00 00 49 0a 00 00 49 0a 00 00     .!. M...I...I...
	...
      2c:	49 0a 00 00 00 00 00 00 00 00 00 00 49 0a 00 00     I...........I...
      3c:	49 0a 00 00 49 0a 00 00 49 0a 00 00 49 0a 00 00     I...I...I...I...
      4c:	49 0a 00 00 49 0a 00 00 49 0a 00 00 49 0a 00 00     I...I...I...I...
      5c:	49 0a 00 00 49 0a 00 00 4d 02 00 00 5d 02 00 00     I...I...M...]...
      6c:	6d 02 00 00 7d 02 00 00 8d 02 00 00 9d 02 00 00     m...}...........
      7c:	49 0a 00 00 49 0a 00 00 49 0a 00 00 49 0a 00 00     I...I...I...I...
      8c:	49 0a 00 00 49 0a 00 00 49 0a 00 00 49 0a 00 00     I...I...I...I...
      9c:	49 0a 00 00 49 0a 00 00 49 0a 00 00 49 0a 00 00     I...I...I...I...
      ac:	49 0a 00 00 00 00 00 00                             I.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	000015a8 	.word	0x000015a8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	000015a8 	.word	0x000015a8
     10c:	000015a8 	.word	0x000015a8
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000007d9 	.word	0x000007d9
     140:	00001071 	.word	0x00001071
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	20000090 	.word	0x20000090
     1b8:	20000094 	.word	0x20000094
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	20000090 	.word	0x20000090
     1e8:	20000094 	.word	0x20000094
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	203e      	movs	r0, #62	; 0x3e
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	05d2      	lsls	r2, r2, #23
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	200f      	movs	r0, #15
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	00000229 	.word	0x00000229
     224:	41004480 	.word	0x41004480

00000228 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     228:	b500      	push	{lr}
     22a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     22c:	ab01      	add	r3, sp, #4
     22e:	2280      	movs	r2, #128	; 0x80
     230:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     232:	780a      	ldrb	r2, [r1, #0]
     234:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     236:	784a      	ldrb	r2, [r1, #1]
     238:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     23a:	788a      	ldrb	r2, [r1, #2]
     23c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     23e:	0019      	movs	r1, r3
     240:	4b01      	ldr	r3, [pc, #4]	; (248 <port_pin_set_config+0x20>)
     242:	4798      	blx	r3
}
     244:	b003      	add	sp, #12
     246:	bd00      	pop	{pc}
     248:	000009e9 	.word	0x000009e9

0000024c <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     24c:	b510      	push	{r4, lr}
     24e:	4b02      	ldr	r3, [pc, #8]	; (258 <SERCOM0_Handler+0xc>)
     250:	681b      	ldr	r3, [r3, #0]
     252:	2000      	movs	r0, #0
     254:	4798      	blx	r3
     256:	bd10      	pop	{r4, pc}
     258:	20000098 	.word	0x20000098

0000025c <SERCOM1_Handler>:
     25c:	b510      	push	{r4, lr}
     25e:	4b02      	ldr	r3, [pc, #8]	; (268 <SERCOM1_Handler+0xc>)
     260:	685b      	ldr	r3, [r3, #4]
     262:	2001      	movs	r0, #1
     264:	4798      	blx	r3
     266:	bd10      	pop	{r4, pc}
     268:	20000098 	.word	0x20000098

0000026c <SERCOM2_Handler>:
     26c:	b510      	push	{r4, lr}
     26e:	4b02      	ldr	r3, [pc, #8]	; (278 <SERCOM2_Handler+0xc>)
     270:	689b      	ldr	r3, [r3, #8]
     272:	2002      	movs	r0, #2
     274:	4798      	blx	r3
     276:	bd10      	pop	{r4, pc}
     278:	20000098 	.word	0x20000098

0000027c <SERCOM3_Handler>:
     27c:	b510      	push	{r4, lr}
     27e:	4b02      	ldr	r3, [pc, #8]	; (288 <SERCOM3_Handler+0xc>)
     280:	68db      	ldr	r3, [r3, #12]
     282:	2003      	movs	r0, #3
     284:	4798      	blx	r3
     286:	bd10      	pop	{r4, pc}
     288:	20000098 	.word	0x20000098

0000028c <SERCOM4_Handler>:
     28c:	b510      	push	{r4, lr}
     28e:	4b02      	ldr	r3, [pc, #8]	; (298 <SERCOM4_Handler+0xc>)
     290:	691b      	ldr	r3, [r3, #16]
     292:	2004      	movs	r0, #4
     294:	4798      	blx	r3
     296:	bd10      	pop	{r4, pc}
     298:	20000098 	.word	0x20000098

0000029c <SERCOM5_Handler>:
     29c:	b510      	push	{r4, lr}
     29e:	4b02      	ldr	r3, [pc, #8]	; (2a8 <SERCOM5_Handler+0xc>)
     2a0:	695b      	ldr	r3, [r3, #20]
     2a2:	2005      	movs	r0, #5
     2a4:	4798      	blx	r3
     2a6:	bd10      	pop	{r4, pc}
     2a8:	20000098 	.word	0x20000098

000002ac <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     2ac:	b510      	push	{r4, lr}
	switch (clock_source) {
     2ae:	2808      	cmp	r0, #8
     2b0:	d803      	bhi.n	2ba <system_clock_source_get_hz+0xe>
     2b2:	0080      	lsls	r0, r0, #2
     2b4:	4b1c      	ldr	r3, [pc, #112]	; (328 <system_clock_source_get_hz+0x7c>)
     2b6:	581b      	ldr	r3, [r3, r0]
     2b8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     2ba:	2000      	movs	r0, #0
     2bc:	e032      	b.n	324 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     2be:	4b1b      	ldr	r3, [pc, #108]	; (32c <system_clock_source_get_hz+0x80>)
     2c0:	6918      	ldr	r0, [r3, #16]
     2c2:	e02f      	b.n	324 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     2c4:	4b1a      	ldr	r3, [pc, #104]	; (330 <system_clock_source_get_hz+0x84>)
     2c6:	6a1b      	ldr	r3, [r3, #32]
     2c8:	059b      	lsls	r3, r3, #22
     2ca:	0f9b      	lsrs	r3, r3, #30
     2cc:	4819      	ldr	r0, [pc, #100]	; (334 <system_clock_source_get_hz+0x88>)
     2ce:	40d8      	lsrs	r0, r3
     2d0:	e028      	b.n	324 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     2d2:	4b16      	ldr	r3, [pc, #88]	; (32c <system_clock_source_get_hz+0x80>)
     2d4:	6958      	ldr	r0, [r3, #20]
     2d6:	e025      	b.n	324 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <system_clock_source_get_hz+0x80>)
     2da:	681b      	ldr	r3, [r3, #0]
			return 0;
     2dc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     2de:	079b      	lsls	r3, r3, #30
     2e0:	d520      	bpl.n	324 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     2e2:	4913      	ldr	r1, [pc, #76]	; (330 <system_clock_source_get_hz+0x84>)
     2e4:	2210      	movs	r2, #16
     2e6:	68cb      	ldr	r3, [r1, #12]
     2e8:	421a      	tst	r2, r3
     2ea:	d0fc      	beq.n	2e6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     2ec:	4b0f      	ldr	r3, [pc, #60]	; (32c <system_clock_source_get_hz+0x80>)
     2ee:	681a      	ldr	r2, [r3, #0]
     2f0:	2324      	movs	r3, #36	; 0x24
     2f2:	4013      	ands	r3, r2
     2f4:	2b04      	cmp	r3, #4
     2f6:	d001      	beq.n	2fc <system_clock_source_get_hz+0x50>
			return 48000000UL;
     2f8:	480f      	ldr	r0, [pc, #60]	; (338 <system_clock_source_get_hz+0x8c>)
     2fa:	e013      	b.n	324 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     2fc:	2000      	movs	r0, #0
     2fe:	4b0f      	ldr	r3, [pc, #60]	; (33c <system_clock_source_get_hz+0x90>)
     300:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     302:	4b0a      	ldr	r3, [pc, #40]	; (32c <system_clock_source_get_hz+0x80>)
     304:	689b      	ldr	r3, [r3, #8]
     306:	041b      	lsls	r3, r3, #16
     308:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     30a:	4358      	muls	r0, r3
     30c:	e00a      	b.n	324 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     30e:	2350      	movs	r3, #80	; 0x50
     310:	4a07      	ldr	r2, [pc, #28]	; (330 <system_clock_source_get_hz+0x84>)
     312:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     314:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     316:	075b      	lsls	r3, r3, #29
     318:	d504      	bpl.n	324 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     31a:	4b04      	ldr	r3, [pc, #16]	; (32c <system_clock_source_get_hz+0x80>)
     31c:	68d8      	ldr	r0, [r3, #12]
     31e:	e001      	b.n	324 <system_clock_source_get_hz+0x78>
		return 32768UL;
     320:	2080      	movs	r0, #128	; 0x80
     322:	0200      	lsls	r0, r0, #8
	}
}
     324:	bd10      	pop	{r4, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	00001338 	.word	0x00001338
     32c:	200000b0 	.word	0x200000b0
     330:	40000800 	.word	0x40000800
     334:	007a1200 	.word	0x007a1200
     338:	02dc6c00 	.word	0x02dc6c00
     33c:	0000090d 	.word	0x0000090d

00000340 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     340:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     342:	490c      	ldr	r1, [pc, #48]	; (374 <system_clock_source_osc8m_set_config+0x34>)
     344:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     346:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     348:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     34a:	7840      	ldrb	r0, [r0, #1]
     34c:	2201      	movs	r2, #1
     34e:	4010      	ands	r0, r2
     350:	0180      	lsls	r0, r0, #6
     352:	2640      	movs	r6, #64	; 0x40
     354:	43b3      	bics	r3, r6
     356:	4303      	orrs	r3, r0
     358:	402a      	ands	r2, r5
     35a:	01d2      	lsls	r2, r2, #7
     35c:	2080      	movs	r0, #128	; 0x80
     35e:	4383      	bics	r3, r0
     360:	4313      	orrs	r3, r2
     362:	2203      	movs	r2, #3
     364:	4022      	ands	r2, r4
     366:	0212      	lsls	r2, r2, #8
     368:	4803      	ldr	r0, [pc, #12]	; (378 <system_clock_source_osc8m_set_config+0x38>)
     36a:	4003      	ands	r3, r0
     36c:	4313      	orrs	r3, r2
     36e:	620b      	str	r3, [r1, #32]
}
     370:	bd70      	pop	{r4, r5, r6, pc}
     372:	46c0      	nop			; (mov r8, r8)
     374:	40000800 	.word	0x40000800
     378:	fffffcff 	.word	0xfffffcff

0000037c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     37c:	b5f0      	push	{r4, r5, r6, r7, lr}
     37e:	46de      	mov	lr, fp
     380:	4657      	mov	r7, sl
     382:	464e      	mov	r6, r9
     384:	4645      	mov	r5, r8
     386:	b5e0      	push	{r5, r6, r7, lr}
     388:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     38a:	4b26      	ldr	r3, [pc, #152]	; (424 <system_clock_source_xosc32k_set_config+0xa8>)
     38c:	469b      	mov	fp, r3
     38e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     390:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     392:	7800      	ldrb	r0, [r0, #0]
     394:	4242      	negs	r2, r0
     396:	4142      	adcs	r2, r0
     398:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     39a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     39c:	78ca      	ldrb	r2, [r1, #3]
     39e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     3a0:	790a      	ldrb	r2, [r1, #4]
     3a2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     3a4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     3a6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     3a8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     3aa:	688a      	ldr	r2, [r1, #8]
     3ac:	491e      	ldr	r1, [pc, #120]	; (428 <system_clock_source_xosc32k_set_config+0xac>)
     3ae:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
     3b0:	2101      	movs	r1, #1
     3b2:	464a      	mov	r2, r9
     3b4:	0092      	lsls	r2, r2, #2
     3b6:	4691      	mov	r9, r2
     3b8:	2204      	movs	r2, #4
     3ba:	4393      	bics	r3, r2
     3bc:	464a      	mov	r2, r9
     3be:	4313      	orrs	r3, r2
     3c0:	4642      	mov	r2, r8
     3c2:	400a      	ands	r2, r1
     3c4:	00d2      	lsls	r2, r2, #3
     3c6:	4690      	mov	r8, r2
     3c8:	2208      	movs	r2, #8
     3ca:	4393      	bics	r3, r2
     3cc:	4642      	mov	r2, r8
     3ce:	4313      	orrs	r3, r2
     3d0:	4662      	mov	r2, ip
     3d2:	400a      	ands	r2, r1
     3d4:	0112      	lsls	r2, r2, #4
     3d6:	4694      	mov	ip, r2
     3d8:	2210      	movs	r2, #16
     3da:	4393      	bics	r3, r2
     3dc:	4662      	mov	r2, ip
     3de:	4313      	orrs	r3, r2
     3e0:	4008      	ands	r0, r1
     3e2:	0140      	lsls	r0, r0, #5
     3e4:	2220      	movs	r2, #32
     3e6:	4393      	bics	r3, r2
     3e8:	4303      	orrs	r3, r0
     3ea:	400f      	ands	r7, r1
     3ec:	01bf      	lsls	r7, r7, #6
     3ee:	2040      	movs	r0, #64	; 0x40
     3f0:	4383      	bics	r3, r0
     3f2:	433b      	orrs	r3, r7
     3f4:	400e      	ands	r6, r1
     3f6:	01f6      	lsls	r6, r6, #7
     3f8:	3040      	adds	r0, #64	; 0x40
     3fa:	4383      	bics	r3, r0
     3fc:	4333      	orrs	r3, r6
     3fe:	3879      	subs	r0, #121	; 0x79
     400:	4005      	ands	r5, r0
     402:	022d      	lsls	r5, r5, #8
     404:	4809      	ldr	r0, [pc, #36]	; (42c <system_clock_source_xosc32k_set_config+0xb0>)
     406:	4003      	ands	r3, r0
     408:	432b      	orrs	r3, r5
     40a:	4021      	ands	r1, r4
     40c:	0309      	lsls	r1, r1, #12
     40e:	4808      	ldr	r0, [pc, #32]	; (430 <system_clock_source_xosc32k_set_config+0xb4>)
     410:	4003      	ands	r3, r0
     412:	430b      	orrs	r3, r1
     414:	465a      	mov	r2, fp
     416:	8293      	strh	r3, [r2, #20]
}
     418:	bc3c      	pop	{r2, r3, r4, r5}
     41a:	4690      	mov	r8, r2
     41c:	4699      	mov	r9, r3
     41e:	46a2      	mov	sl, r4
     420:	46ab      	mov	fp, r5
     422:	bdf0      	pop	{r4, r5, r6, r7, pc}
     424:	40000800 	.word	0x40000800
     428:	200000b0 	.word	0x200000b0
     42c:	fffff8ff 	.word	0xfffff8ff
     430:	ffffefff 	.word	0xffffefff

00000434 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     434:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     436:	7a03      	ldrb	r3, [r0, #8]
     438:	069b      	lsls	r3, r3, #26
     43a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     43c:	8942      	ldrh	r2, [r0, #10]
     43e:	0592      	lsls	r2, r2, #22
     440:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     442:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     444:	4918      	ldr	r1, [pc, #96]	; (4a8 <system_clock_source_dfll_set_config+0x74>)
     446:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     448:	7983      	ldrb	r3, [r0, #6]
     44a:	79c2      	ldrb	r2, [r0, #7]
     44c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     44e:	8842      	ldrh	r2, [r0, #2]
     450:	8884      	ldrh	r4, [r0, #4]
     452:	4322      	orrs	r2, r4
     454:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     456:	7842      	ldrb	r2, [r0, #1]
     458:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     45a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     45c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     45e:	7803      	ldrb	r3, [r0, #0]
     460:	2b04      	cmp	r3, #4
     462:	d011      	beq.n	488 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     464:	2b20      	cmp	r3, #32
     466:	d10e      	bne.n	486 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     468:	7b03      	ldrb	r3, [r0, #12]
     46a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     46c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     46e:	4313      	orrs	r3, r2
     470:	89c2      	ldrh	r2, [r0, #14]
     472:	0412      	lsls	r2, r2, #16
     474:	490d      	ldr	r1, [pc, #52]	; (4ac <system_clock_source_dfll_set_config+0x78>)
     476:	400a      	ands	r2, r1
     478:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     47a:	4a0b      	ldr	r2, [pc, #44]	; (4a8 <system_clock_source_dfll_set_config+0x74>)
     47c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     47e:	6811      	ldr	r1, [r2, #0]
     480:	4b0b      	ldr	r3, [pc, #44]	; (4b0 <system_clock_source_dfll_set_config+0x7c>)
     482:	430b      	orrs	r3, r1
     484:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     486:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     488:	7b03      	ldrb	r3, [r0, #12]
     48a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     48c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     48e:	4313      	orrs	r3, r2
     490:	89c2      	ldrh	r2, [r0, #14]
     492:	0412      	lsls	r2, r2, #16
     494:	4905      	ldr	r1, [pc, #20]	; (4ac <system_clock_source_dfll_set_config+0x78>)
     496:	400a      	ands	r2, r1
     498:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     49a:	4a03      	ldr	r2, [pc, #12]	; (4a8 <system_clock_source_dfll_set_config+0x74>)
     49c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     49e:	6813      	ldr	r3, [r2, #0]
     4a0:	2104      	movs	r1, #4
     4a2:	430b      	orrs	r3, r1
     4a4:	6013      	str	r3, [r2, #0]
     4a6:	e7ee      	b.n	486 <system_clock_source_dfll_set_config+0x52>
     4a8:	200000b0 	.word	0x200000b0
     4ac:	03ff0000 	.word	0x03ff0000
     4b0:	00000424 	.word	0x00000424

000004b4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     4b4:	2808      	cmp	r0, #8
     4b6:	d803      	bhi.n	4c0 <system_clock_source_enable+0xc>
     4b8:	0080      	lsls	r0, r0, #2
     4ba:	4b25      	ldr	r3, [pc, #148]	; (550 <system_clock_source_enable+0x9c>)
     4bc:	581b      	ldr	r3, [r3, r0]
     4be:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     4c0:	2017      	movs	r0, #23
     4c2:	e044      	b.n	54e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     4c4:	4a23      	ldr	r2, [pc, #140]	; (554 <system_clock_source_enable+0xa0>)
     4c6:	6a13      	ldr	r3, [r2, #32]
     4c8:	2102      	movs	r1, #2
     4ca:	430b      	orrs	r3, r1
     4cc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     4ce:	2000      	movs	r0, #0
     4d0:	e03d      	b.n	54e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     4d2:	4a20      	ldr	r2, [pc, #128]	; (554 <system_clock_source_enable+0xa0>)
     4d4:	6993      	ldr	r3, [r2, #24]
     4d6:	2102      	movs	r1, #2
     4d8:	430b      	orrs	r3, r1
     4da:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     4dc:	2000      	movs	r0, #0
		break;
     4de:	e036      	b.n	54e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     4e0:	4a1c      	ldr	r2, [pc, #112]	; (554 <system_clock_source_enable+0xa0>)
     4e2:	8a13      	ldrh	r3, [r2, #16]
     4e4:	2102      	movs	r1, #2
     4e6:	430b      	orrs	r3, r1
     4e8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     4ea:	2000      	movs	r0, #0
		break;
     4ec:	e02f      	b.n	54e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     4ee:	4a19      	ldr	r2, [pc, #100]	; (554 <system_clock_source_enable+0xa0>)
     4f0:	8a93      	ldrh	r3, [r2, #20]
     4f2:	2102      	movs	r1, #2
     4f4:	430b      	orrs	r3, r1
     4f6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     4f8:	2000      	movs	r0, #0
		break;
     4fa:	e028      	b.n	54e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     4fc:	4916      	ldr	r1, [pc, #88]	; (558 <system_clock_source_enable+0xa4>)
     4fe:	680b      	ldr	r3, [r1, #0]
     500:	2202      	movs	r2, #2
     502:	4313      	orrs	r3, r2
     504:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     506:	4b13      	ldr	r3, [pc, #76]	; (554 <system_clock_source_enable+0xa0>)
     508:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     50a:	0019      	movs	r1, r3
     50c:	320e      	adds	r2, #14
     50e:	68cb      	ldr	r3, [r1, #12]
     510:	421a      	tst	r2, r3
     512:	d0fc      	beq.n	50e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     514:	4a10      	ldr	r2, [pc, #64]	; (558 <system_clock_source_enable+0xa4>)
     516:	6891      	ldr	r1, [r2, #8]
     518:	4b0e      	ldr	r3, [pc, #56]	; (554 <system_clock_source_enable+0xa0>)
     51a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     51c:	6852      	ldr	r2, [r2, #4]
     51e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     520:	2200      	movs	r2, #0
     522:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     524:	0019      	movs	r1, r3
     526:	3210      	adds	r2, #16
     528:	68cb      	ldr	r3, [r1, #12]
     52a:	421a      	tst	r2, r3
     52c:	d0fc      	beq.n	528 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     52e:	4b0a      	ldr	r3, [pc, #40]	; (558 <system_clock_source_enable+0xa4>)
     530:	681b      	ldr	r3, [r3, #0]
     532:	b29b      	uxth	r3, r3
     534:	4a07      	ldr	r2, [pc, #28]	; (554 <system_clock_source_enable+0xa0>)
     536:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     538:	2000      	movs	r0, #0
     53a:	e008      	b.n	54e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     53c:	4905      	ldr	r1, [pc, #20]	; (554 <system_clock_source_enable+0xa0>)
     53e:	2244      	movs	r2, #68	; 0x44
     540:	5c8b      	ldrb	r3, [r1, r2]
     542:	2002      	movs	r0, #2
     544:	4303      	orrs	r3, r0
     546:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     548:	2000      	movs	r0, #0
		break;
     54a:	e000      	b.n	54e <system_clock_source_enable+0x9a>
		return STATUS_OK;
     54c:	2000      	movs	r0, #0
}
     54e:	4770      	bx	lr
     550:	0000135c 	.word	0x0000135c
     554:	40000800 	.word	0x40000800
     558:	200000b0 	.word	0x200000b0

0000055c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     55c:	b5f0      	push	{r4, r5, r6, r7, lr}
     55e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     560:	22c2      	movs	r2, #194	; 0xc2
     562:	00d2      	lsls	r2, r2, #3
     564:	4b47      	ldr	r3, [pc, #284]	; (684 <system_clock_init+0x128>)
     566:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     568:	4947      	ldr	r1, [pc, #284]	; (688 <system_clock_init+0x12c>)
     56a:	684b      	ldr	r3, [r1, #4]
     56c:	221e      	movs	r2, #30
     56e:	4393      	bics	r3, r2
     570:	3a1c      	subs	r2, #28
     572:	4313      	orrs	r3, r2
     574:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     576:	ab01      	add	r3, sp, #4
     578:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     57a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     57c:	4d43      	ldr	r5, [pc, #268]	; (68c <system_clock_init+0x130>)
     57e:	b2e0      	uxtb	r0, r4
     580:	a901      	add	r1, sp, #4
     582:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     584:	3401      	adds	r4, #1
     586:	2c25      	cmp	r4, #37	; 0x25
     588:	d1f9      	bne.n	57e <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
     58a:	a80a      	add	r0, sp, #40	; 0x28
     58c:	2300      	movs	r3, #0
     58e:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
     590:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
     592:	2280      	movs	r2, #128	; 0x80
     594:	0212      	lsls	r2, r2, #8
     596:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
     598:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
     59a:	2201      	movs	r2, #1
     59c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
     59e:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
     5a0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
     5a2:	3205      	adds	r2, #5
     5a4:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
     5a6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
     5a8:	4b39      	ldr	r3, [pc, #228]	; (690 <system_clock_init+0x134>)
     5aa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
     5ac:	2005      	movs	r0, #5
     5ae:	4b39      	ldr	r3, [pc, #228]	; (694 <system_clock_init+0x138>)
     5b0:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     5b2:	4934      	ldr	r1, [pc, #208]	; (684 <system_clock_init+0x128>)
     5b4:	2202      	movs	r2, #2
     5b6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
     5b8:	421a      	tst	r2, r3
     5ba:	d0fc      	beq.n	5b6 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
     5bc:	4a31      	ldr	r2, [pc, #196]	; (684 <system_clock_init+0x128>)
     5be:	8a93      	ldrh	r3, [r2, #20]
     5c0:	2180      	movs	r1, #128	; 0x80
     5c2:	430b      	orrs	r3, r1
     5c4:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     5c6:	ab05      	add	r3, sp, #20
     5c8:	2100      	movs	r1, #0
     5ca:	2200      	movs	r2, #0
     5cc:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     5ce:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     5d0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     5d2:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
     5d4:	313f      	adds	r1, #63	; 0x3f
     5d6:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     5d8:	393b      	subs	r1, #59	; 0x3b
     5da:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     5dc:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     5de:	4b2e      	ldr	r3, [pc, #184]	; (698 <system_clock_init+0x13c>)
     5e0:	681b      	ldr	r3, [r3, #0]
     5e2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     5e4:	2b3f      	cmp	r3, #63	; 0x3f
     5e6:	d04b      	beq.n	680 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
     5e8:	a805      	add	r0, sp, #20
     5ea:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     5ec:	23b7      	movs	r3, #183	; 0xb7
     5ee:	00db      	lsls	r3, r3, #3
     5f0:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     5f2:	2307      	movs	r3, #7
     5f4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     5f6:	3338      	adds	r3, #56	; 0x38
     5f8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     5fa:	4b28      	ldr	r3, [pc, #160]	; (69c <system_clock_init+0x140>)
     5fc:	4798      	blx	r3
	config->run_in_standby  = false;
     5fe:	a804      	add	r0, sp, #16
     600:	2500      	movs	r5, #0
     602:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
     604:	2601      	movs	r6, #1
     606:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     608:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     60a:	4b25      	ldr	r3, [pc, #148]	; (6a0 <system_clock_init+0x144>)
     60c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     60e:	2006      	movs	r0, #6
     610:	4f20      	ldr	r7, [pc, #128]	; (694 <system_clock_init+0x138>)
     612:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     614:	4b23      	ldr	r3, [pc, #140]	; (6a4 <system_clock_init+0x148>)
     616:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     618:	ac01      	add	r4, sp, #4
     61a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
     61c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     61e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     620:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     622:	2305      	movs	r3, #5
     624:	7023      	strb	r3, [r4, #0]
     626:	0021      	movs	r1, r4
     628:	2001      	movs	r0, #1
     62a:	4b1f      	ldr	r3, [pc, #124]	; (6a8 <system_clock_init+0x14c>)
     62c:	4798      	blx	r3
     62e:	2001      	movs	r0, #1
     630:	4b1e      	ldr	r3, [pc, #120]	; (6ac <system_clock_init+0x150>)
     632:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     634:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     636:	0021      	movs	r1, r4
     638:	2000      	movs	r0, #0
     63a:	4b14      	ldr	r3, [pc, #80]	; (68c <system_clock_init+0x130>)
     63c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     63e:	2000      	movs	r0, #0
     640:	4b1b      	ldr	r3, [pc, #108]	; (6b0 <system_clock_init+0x154>)
     642:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     644:	2007      	movs	r0, #7
     646:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     648:	490e      	ldr	r1, [pc, #56]	; (684 <system_clock_init+0x128>)
     64a:	22d0      	movs	r2, #208	; 0xd0
     64c:	68cb      	ldr	r3, [r1, #12]
     64e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     650:	2bd0      	cmp	r3, #208	; 0xd0
     652:	d1fb      	bne.n	64c <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
     654:	4a17      	ldr	r2, [pc, #92]	; (6b4 <system_clock_init+0x158>)
     656:	2300      	movs	r3, #0
     658:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     65a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     65c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     65e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
     660:	a901      	add	r1, sp, #4
     662:	2201      	movs	r2, #1
     664:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
     666:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
     668:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     66a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     66c:	3307      	adds	r3, #7
     66e:	700b      	strb	r3, [r1, #0]
     670:	2000      	movs	r0, #0
     672:	4b0d      	ldr	r3, [pc, #52]	; (6a8 <system_clock_init+0x14c>)
     674:	4798      	blx	r3
     676:	2000      	movs	r0, #0
     678:	4b0c      	ldr	r3, [pc, #48]	; (6ac <system_clock_init+0x150>)
     67a:	4798      	blx	r3
#endif
}
     67c:	b00f      	add	sp, #60	; 0x3c
     67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
     680:	3b20      	subs	r3, #32
     682:	e7b1      	b.n	5e8 <system_clock_init+0x8c>
     684:	40000800 	.word	0x40000800
     688:	41004000 	.word	0x41004000
     68c:	000008f1 	.word	0x000008f1
     690:	0000037d 	.word	0x0000037d
     694:	000004b5 	.word	0x000004b5
     698:	00806024 	.word	0x00806024
     69c:	00000435 	.word	0x00000435
     6a0:	00000341 	.word	0x00000341
     6a4:	000006b9 	.word	0x000006b9
     6a8:	000006dd 	.word	0x000006dd
     6ac:	00000795 	.word	0x00000795
     6b0:	00000865 	.word	0x00000865
     6b4:	40000400 	.word	0x40000400

000006b8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     6b8:	4a06      	ldr	r2, [pc, #24]	; (6d4 <system_gclk_init+0x1c>)
     6ba:	6993      	ldr	r3, [r2, #24]
     6bc:	2108      	movs	r1, #8
     6be:	430b      	orrs	r3, r1
     6c0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     6c2:	2201      	movs	r2, #1
     6c4:	4b04      	ldr	r3, [pc, #16]	; (6d8 <system_gclk_init+0x20>)
     6c6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     6c8:	0019      	movs	r1, r3
     6ca:	780b      	ldrb	r3, [r1, #0]
     6cc:	4213      	tst	r3, r2
     6ce:	d1fc      	bne.n	6ca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     6d0:	4770      	bx	lr
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	40000400 	.word	0x40000400
     6d8:	40000c00 	.word	0x40000c00

000006dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     6dc:	b570      	push	{r4, r5, r6, lr}
     6de:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     6e0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     6e2:	780d      	ldrb	r5, [r1, #0]
     6e4:	022d      	lsls	r5, r5, #8
     6e6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     6e8:	784b      	ldrb	r3, [r1, #1]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d002      	beq.n	6f4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     6ee:	2380      	movs	r3, #128	; 0x80
     6f0:	02db      	lsls	r3, r3, #11
     6f2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     6f4:	7a4b      	ldrb	r3, [r1, #9]
     6f6:	2b00      	cmp	r3, #0
     6f8:	d002      	beq.n	700 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     6fa:	2380      	movs	r3, #128	; 0x80
     6fc:	031b      	lsls	r3, r3, #12
     6fe:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     700:	6848      	ldr	r0, [r1, #4]
     702:	2801      	cmp	r0, #1
     704:	d910      	bls.n	728 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     706:	1e43      	subs	r3, r0, #1
     708:	4218      	tst	r0, r3
     70a:	d134      	bne.n	776 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     70c:	2802      	cmp	r0, #2
     70e:	d930      	bls.n	772 <system_gclk_gen_set_config+0x96>
     710:	2302      	movs	r3, #2
     712:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     714:	3201      	adds	r2, #1
						mask <<= 1) {
     716:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     718:	4298      	cmp	r0, r3
     71a:	d8fb      	bhi.n	714 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     71c:	0212      	lsls	r2, r2, #8
     71e:	4332      	orrs	r2, r6
     720:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     722:	2380      	movs	r3, #128	; 0x80
     724:	035b      	lsls	r3, r3, #13
     726:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     728:	7a0b      	ldrb	r3, [r1, #8]
     72a:	2b00      	cmp	r3, #0
     72c:	d002      	beq.n	734 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     72e:	2380      	movs	r3, #128	; 0x80
     730:	039b      	lsls	r3, r3, #14
     732:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     734:	4a13      	ldr	r2, [pc, #76]	; (784 <system_gclk_gen_set_config+0xa8>)
     736:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     738:	b25b      	sxtb	r3, r3
     73a:	2b00      	cmp	r3, #0
     73c:	dbfb      	blt.n	736 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     73e:	4b12      	ldr	r3, [pc, #72]	; (788 <system_gclk_gen_set_config+0xac>)
     740:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     742:	4b12      	ldr	r3, [pc, #72]	; (78c <system_gclk_gen_set_config+0xb0>)
     744:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     746:	4a0f      	ldr	r2, [pc, #60]	; (784 <system_gclk_gen_set_config+0xa8>)
     748:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     74a:	b25b      	sxtb	r3, r3
     74c:	2b00      	cmp	r3, #0
     74e:	dbfb      	blt.n	748 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     750:	4b0c      	ldr	r3, [pc, #48]	; (784 <system_gclk_gen_set_config+0xa8>)
     752:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     754:	001a      	movs	r2, r3
     756:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     758:	b25b      	sxtb	r3, r3
     75a:	2b00      	cmp	r3, #0
     75c:	dbfb      	blt.n	756 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     75e:	4a09      	ldr	r2, [pc, #36]	; (784 <system_gclk_gen_set_config+0xa8>)
     760:	6853      	ldr	r3, [r2, #4]
     762:	2180      	movs	r1, #128	; 0x80
     764:	0249      	lsls	r1, r1, #9
     766:	400b      	ands	r3, r1
     768:	431d      	orrs	r5, r3
     76a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     76c:	4b08      	ldr	r3, [pc, #32]	; (790 <system_gclk_gen_set_config+0xb4>)
     76e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     770:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     772:	2200      	movs	r2, #0
     774:	e7d2      	b.n	71c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     776:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     778:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     77a:	2380      	movs	r3, #128	; 0x80
     77c:	029b      	lsls	r3, r3, #10
     77e:	431d      	orrs	r5, r3
     780:	e7d2      	b.n	728 <system_gclk_gen_set_config+0x4c>
     782:	46c0      	nop			; (mov r8, r8)
     784:	40000c00 	.word	0x40000c00
     788:	00000181 	.word	0x00000181
     78c:	40000c08 	.word	0x40000c08
     790:	000001c1 	.word	0x000001c1

00000794 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     794:	b510      	push	{r4, lr}
     796:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     798:	4a0b      	ldr	r2, [pc, #44]	; (7c8 <system_gclk_gen_enable+0x34>)
     79a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     79c:	b25b      	sxtb	r3, r3
     79e:	2b00      	cmp	r3, #0
     7a0:	dbfb      	blt.n	79a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     7a2:	4b0a      	ldr	r3, [pc, #40]	; (7cc <system_gclk_gen_enable+0x38>)
     7a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     7a6:	4b0a      	ldr	r3, [pc, #40]	; (7d0 <system_gclk_gen_enable+0x3c>)
     7a8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     7aa:	4a07      	ldr	r2, [pc, #28]	; (7c8 <system_gclk_gen_enable+0x34>)
     7ac:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     7ae:	b25b      	sxtb	r3, r3
     7b0:	2b00      	cmp	r3, #0
     7b2:	dbfb      	blt.n	7ac <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     7b4:	4a04      	ldr	r2, [pc, #16]	; (7c8 <system_gclk_gen_enable+0x34>)
     7b6:	6851      	ldr	r1, [r2, #4]
     7b8:	2380      	movs	r3, #128	; 0x80
     7ba:	025b      	lsls	r3, r3, #9
     7bc:	430b      	orrs	r3, r1
     7be:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     7c0:	4b04      	ldr	r3, [pc, #16]	; (7d4 <system_gclk_gen_enable+0x40>)
     7c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     7c4:	bd10      	pop	{r4, pc}
     7c6:	46c0      	nop			; (mov r8, r8)
     7c8:	40000c00 	.word	0x40000c00
     7cc:	00000181 	.word	0x00000181
     7d0:	40000c04 	.word	0x40000c04
     7d4:	000001c1 	.word	0x000001c1

000007d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     7d8:	b570      	push	{r4, r5, r6, lr}
     7da:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     7dc:	4a1a      	ldr	r2, [pc, #104]	; (848 <system_gclk_gen_get_hz+0x70>)
     7de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     7e0:	b25b      	sxtb	r3, r3
     7e2:	2b00      	cmp	r3, #0
     7e4:	dbfb      	blt.n	7de <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     7e6:	4b19      	ldr	r3, [pc, #100]	; (84c <system_gclk_gen_get_hz+0x74>)
     7e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     7ea:	4b19      	ldr	r3, [pc, #100]	; (850 <system_gclk_gen_get_hz+0x78>)
     7ec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     7ee:	4a16      	ldr	r2, [pc, #88]	; (848 <system_gclk_gen_get_hz+0x70>)
     7f0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     7f2:	b25b      	sxtb	r3, r3
     7f4:	2b00      	cmp	r3, #0
     7f6:	dbfb      	blt.n	7f0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     7f8:	4e13      	ldr	r6, [pc, #76]	; (848 <system_gclk_gen_get_hz+0x70>)
     7fa:	6870      	ldr	r0, [r6, #4]
     7fc:	04c0      	lsls	r0, r0, #19
     7fe:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     800:	4b14      	ldr	r3, [pc, #80]	; (854 <system_gclk_gen_get_hz+0x7c>)
     802:	4798      	blx	r3
     804:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     806:	4b12      	ldr	r3, [pc, #72]	; (850 <system_gclk_gen_get_hz+0x78>)
     808:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     80a:	6876      	ldr	r6, [r6, #4]
     80c:	02f6      	lsls	r6, r6, #11
     80e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     810:	4b11      	ldr	r3, [pc, #68]	; (858 <system_gclk_gen_get_hz+0x80>)
     812:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     814:	4a0c      	ldr	r2, [pc, #48]	; (848 <system_gclk_gen_get_hz+0x70>)
     816:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     818:	b25b      	sxtb	r3, r3
     81a:	2b00      	cmp	r3, #0
     81c:	dbfb      	blt.n	816 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     81e:	4b0a      	ldr	r3, [pc, #40]	; (848 <system_gclk_gen_get_hz+0x70>)
     820:	689c      	ldr	r4, [r3, #8]
     822:	0224      	lsls	r4, r4, #8
     824:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     826:	4b0d      	ldr	r3, [pc, #52]	; (85c <system_gclk_gen_get_hz+0x84>)
     828:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     82a:	2e00      	cmp	r6, #0
     82c:	d107      	bne.n	83e <system_gclk_gen_get_hz+0x66>
     82e:	2c01      	cmp	r4, #1
     830:	d907      	bls.n	842 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     832:	0021      	movs	r1, r4
     834:	0028      	movs	r0, r5
     836:	4b0a      	ldr	r3, [pc, #40]	; (860 <system_gclk_gen_get_hz+0x88>)
     838:	4798      	blx	r3
     83a:	0005      	movs	r5, r0
     83c:	e001      	b.n	842 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     83e:	3401      	adds	r4, #1
     840:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     842:	0028      	movs	r0, r5
     844:	bd70      	pop	{r4, r5, r6, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	40000c00 	.word	0x40000c00
     84c:	00000181 	.word	0x00000181
     850:	40000c04 	.word	0x40000c04
     854:	000002ad 	.word	0x000002ad
     858:	40000c08 	.word	0x40000c08
     85c:	000001c1 	.word	0x000001c1
     860:	00001071 	.word	0x00001071

00000864 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     864:	b510      	push	{r4, lr}
     866:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     868:	4b06      	ldr	r3, [pc, #24]	; (884 <system_gclk_chan_enable+0x20>)
     86a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     86c:	4b06      	ldr	r3, [pc, #24]	; (888 <system_gclk_chan_enable+0x24>)
     86e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     870:	4a06      	ldr	r2, [pc, #24]	; (88c <system_gclk_chan_enable+0x28>)
     872:	8853      	ldrh	r3, [r2, #2]
     874:	2180      	movs	r1, #128	; 0x80
     876:	01c9      	lsls	r1, r1, #7
     878:	430b      	orrs	r3, r1
     87a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     87c:	4b04      	ldr	r3, [pc, #16]	; (890 <system_gclk_chan_enable+0x2c>)
     87e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     880:	bd10      	pop	{r4, pc}
     882:	46c0      	nop			; (mov r8, r8)
     884:	00000181 	.word	0x00000181
     888:	40000c02 	.word	0x40000c02
     88c:	40000c00 	.word	0x40000c00
     890:	000001c1 	.word	0x000001c1

00000894 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     894:	b510      	push	{r4, lr}
     896:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     898:	4b0f      	ldr	r3, [pc, #60]	; (8d8 <system_gclk_chan_disable+0x44>)
     89a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     89c:	4b0f      	ldr	r3, [pc, #60]	; (8dc <system_gclk_chan_disable+0x48>)
     89e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     8a0:	4a0f      	ldr	r2, [pc, #60]	; (8e0 <system_gclk_chan_disable+0x4c>)
     8a2:	8853      	ldrh	r3, [r2, #2]
     8a4:	051b      	lsls	r3, r3, #20
     8a6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     8a8:	8853      	ldrh	r3, [r2, #2]
     8aa:	490e      	ldr	r1, [pc, #56]	; (8e4 <system_gclk_chan_disable+0x50>)
     8ac:	400b      	ands	r3, r1
     8ae:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     8b0:	8853      	ldrh	r3, [r2, #2]
     8b2:	490d      	ldr	r1, [pc, #52]	; (8e8 <system_gclk_chan_disable+0x54>)
     8b4:	400b      	ands	r3, r1
     8b6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     8b8:	0011      	movs	r1, r2
     8ba:	2280      	movs	r2, #128	; 0x80
     8bc:	01d2      	lsls	r2, r2, #7
     8be:	884b      	ldrh	r3, [r1, #2]
     8c0:	4213      	tst	r3, r2
     8c2:	d1fc      	bne.n	8be <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     8c4:	4906      	ldr	r1, [pc, #24]	; (8e0 <system_gclk_chan_disable+0x4c>)
     8c6:	884a      	ldrh	r2, [r1, #2]
     8c8:	0203      	lsls	r3, r0, #8
     8ca:	4806      	ldr	r0, [pc, #24]	; (8e4 <system_gclk_chan_disable+0x50>)
     8cc:	4002      	ands	r2, r0
     8ce:	4313      	orrs	r3, r2
     8d0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     8d2:	4b06      	ldr	r3, [pc, #24]	; (8ec <system_gclk_chan_disable+0x58>)
     8d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     8d6:	bd10      	pop	{r4, pc}
     8d8:	00000181 	.word	0x00000181
     8dc:	40000c02 	.word	0x40000c02
     8e0:	40000c00 	.word	0x40000c00
     8e4:	fffff0ff 	.word	0xfffff0ff
     8e8:	ffffbfff 	.word	0xffffbfff
     8ec:	000001c1 	.word	0x000001c1

000008f0 <system_gclk_chan_set_config>:
{
     8f0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     8f2:	780c      	ldrb	r4, [r1, #0]
     8f4:	0224      	lsls	r4, r4, #8
     8f6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     8f8:	4b02      	ldr	r3, [pc, #8]	; (904 <system_gclk_chan_set_config+0x14>)
     8fa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     8fc:	b2a4      	uxth	r4, r4
     8fe:	4b02      	ldr	r3, [pc, #8]	; (908 <system_gclk_chan_set_config+0x18>)
     900:	805c      	strh	r4, [r3, #2]
}
     902:	bd10      	pop	{r4, pc}
     904:	00000895 	.word	0x00000895
     908:	40000c00 	.word	0x40000c00

0000090c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     90c:	b510      	push	{r4, lr}
     90e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     910:	4b06      	ldr	r3, [pc, #24]	; (92c <system_gclk_chan_get_hz+0x20>)
     912:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     914:	4b06      	ldr	r3, [pc, #24]	; (930 <system_gclk_chan_get_hz+0x24>)
     916:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     918:	4b06      	ldr	r3, [pc, #24]	; (934 <system_gclk_chan_get_hz+0x28>)
     91a:	885c      	ldrh	r4, [r3, #2]
     91c:	0524      	lsls	r4, r4, #20
     91e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     920:	4b05      	ldr	r3, [pc, #20]	; (938 <system_gclk_chan_get_hz+0x2c>)
     922:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     924:	0020      	movs	r0, r4
     926:	4b05      	ldr	r3, [pc, #20]	; (93c <system_gclk_chan_get_hz+0x30>)
     928:	4798      	blx	r3
}
     92a:	bd10      	pop	{r4, pc}
     92c:	00000181 	.word	0x00000181
     930:	40000c02 	.word	0x40000c02
     934:	40000c00 	.word	0x40000c00
     938:	000001c1 	.word	0x000001c1
     93c:	000007d9 	.word	0x000007d9

00000940 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     940:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     942:	78d3      	ldrb	r3, [r2, #3]
     944:	2b00      	cmp	r3, #0
     946:	d135      	bne.n	9b4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     948:	7813      	ldrb	r3, [r2, #0]
     94a:	2b80      	cmp	r3, #128	; 0x80
     94c:	d029      	beq.n	9a2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     94e:	061b      	lsls	r3, r3, #24
     950:	2480      	movs	r4, #128	; 0x80
     952:	0264      	lsls	r4, r4, #9
     954:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     956:	7854      	ldrb	r4, [r2, #1]
     958:	2502      	movs	r5, #2
     95a:	43ac      	bics	r4, r5
     95c:	d106      	bne.n	96c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     95e:	7894      	ldrb	r4, [r2, #2]
     960:	2c00      	cmp	r4, #0
     962:	d120      	bne.n	9a6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     964:	2480      	movs	r4, #128	; 0x80
     966:	02a4      	lsls	r4, r4, #10
     968:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     96a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     96c:	7854      	ldrb	r4, [r2, #1]
     96e:	3c01      	subs	r4, #1
     970:	2c01      	cmp	r4, #1
     972:	d91c      	bls.n	9ae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     974:	040d      	lsls	r5, r1, #16
     976:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     978:	24a0      	movs	r4, #160	; 0xa0
     97a:	05e4      	lsls	r4, r4, #23
     97c:	432c      	orrs	r4, r5
     97e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     980:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     982:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     984:	24d0      	movs	r4, #208	; 0xd0
     986:	0624      	lsls	r4, r4, #24
     988:	432c      	orrs	r4, r5
     98a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     98c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     98e:	78d4      	ldrb	r4, [r2, #3]
     990:	2c00      	cmp	r4, #0
     992:	d122      	bne.n	9da <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     994:	035b      	lsls	r3, r3, #13
     996:	d51c      	bpl.n	9d2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     998:	7893      	ldrb	r3, [r2, #2]
     99a:	2b01      	cmp	r3, #1
     99c:	d01e      	beq.n	9dc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     99e:	6141      	str	r1, [r0, #20]
     9a0:	e017      	b.n	9d2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     9a2:	2300      	movs	r3, #0
     9a4:	e7d7      	b.n	956 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     9a6:	24c0      	movs	r4, #192	; 0xc0
     9a8:	02e4      	lsls	r4, r4, #11
     9aa:	4323      	orrs	r3, r4
     9ac:	e7dd      	b.n	96a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     9ae:	4c0d      	ldr	r4, [pc, #52]	; (9e4 <_system_pinmux_config+0xa4>)
     9b0:	4023      	ands	r3, r4
     9b2:	e7df      	b.n	974 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     9b4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     9b6:	040c      	lsls	r4, r1, #16
     9b8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     9ba:	23a0      	movs	r3, #160	; 0xa0
     9bc:	05db      	lsls	r3, r3, #23
     9be:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     9c0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     9c2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     9c4:	23d0      	movs	r3, #208	; 0xd0
     9c6:	061b      	lsls	r3, r3, #24
     9c8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     9ca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     9cc:	78d3      	ldrb	r3, [r2, #3]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d103      	bne.n	9da <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     9d2:	7853      	ldrb	r3, [r2, #1]
     9d4:	3b01      	subs	r3, #1
     9d6:	2b01      	cmp	r3, #1
     9d8:	d902      	bls.n	9e0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     9da:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     9dc:	6181      	str	r1, [r0, #24]
     9de:	e7f8      	b.n	9d2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     9e0:	6081      	str	r1, [r0, #8]
}
     9e2:	e7fa      	b.n	9da <_system_pinmux_config+0x9a>
     9e4:	fffbffff 	.word	0xfffbffff

000009e8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     9e8:	b510      	push	{r4, lr}
     9ea:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     9ec:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     9ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9f0:	2900      	cmp	r1, #0
     9f2:	d104      	bne.n	9fe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     9f4:	0943      	lsrs	r3, r0, #5
     9f6:	01db      	lsls	r3, r3, #7
     9f8:	4905      	ldr	r1, [pc, #20]	; (a10 <system_pinmux_pin_set_config+0x28>)
     9fa:	468c      	mov	ip, r1
     9fc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     9fe:	241f      	movs	r4, #31
     a00:	4020      	ands	r0, r4
     a02:	2101      	movs	r1, #1
     a04:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     a06:	0018      	movs	r0, r3
     a08:	4b02      	ldr	r3, [pc, #8]	; (a14 <system_pinmux_pin_set_config+0x2c>)
     a0a:	4798      	blx	r3
}
     a0c:	bd10      	pop	{r4, pc}
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	41004400 	.word	0x41004400
     a14:	00000941 	.word	0x00000941

00000a18 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     a18:	4770      	bx	lr
	...

00000a1c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     a1c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     a1e:	4b05      	ldr	r3, [pc, #20]	; (a34 <system_init+0x18>)
     a20:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     a22:	4b05      	ldr	r3, [pc, #20]	; (a38 <system_init+0x1c>)
     a24:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     a26:	4b05      	ldr	r3, [pc, #20]	; (a3c <system_init+0x20>)
     a28:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     a2a:	4b05      	ldr	r3, [pc, #20]	; (a40 <system_init+0x24>)
     a2c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     a2e:	4b05      	ldr	r3, [pc, #20]	; (a44 <system_init+0x28>)
     a30:	4798      	blx	r3
}
     a32:	bd10      	pop	{r4, pc}
     a34:	0000055d 	.word	0x0000055d
     a38:	000001f1 	.word	0x000001f1
     a3c:	00000a19 	.word	0x00000a19
     a40:	00000a19 	.word	0x00000a19
     a44:	00000a19 	.word	0x00000a19

00000a48 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     a48:	e7fe      	b.n	a48 <Dummy_Handler>
	...

00000a4c <Reset_Handler>:
{
     a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     a4e:	4a2a      	ldr	r2, [pc, #168]	; (af8 <Reset_Handler+0xac>)
     a50:	4b2a      	ldr	r3, [pc, #168]	; (afc <Reset_Handler+0xb0>)
     a52:	429a      	cmp	r2, r3
     a54:	d011      	beq.n	a7a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     a56:	001a      	movs	r2, r3
     a58:	4b29      	ldr	r3, [pc, #164]	; (b00 <Reset_Handler+0xb4>)
     a5a:	429a      	cmp	r2, r3
     a5c:	d20d      	bcs.n	a7a <Reset_Handler+0x2e>
     a5e:	4a29      	ldr	r2, [pc, #164]	; (b04 <Reset_Handler+0xb8>)
     a60:	3303      	adds	r3, #3
     a62:	1a9b      	subs	r3, r3, r2
     a64:	089b      	lsrs	r3, r3, #2
     a66:	3301      	adds	r3, #1
     a68:	009b      	lsls	r3, r3, #2
     a6a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     a6c:	4823      	ldr	r0, [pc, #140]	; (afc <Reset_Handler+0xb0>)
     a6e:	4922      	ldr	r1, [pc, #136]	; (af8 <Reset_Handler+0xac>)
     a70:	588c      	ldr	r4, [r1, r2]
     a72:	5084      	str	r4, [r0, r2]
     a74:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     a76:	429a      	cmp	r2, r3
     a78:	d1fa      	bne.n	a70 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     a7a:	4a23      	ldr	r2, [pc, #140]	; (b08 <Reset_Handler+0xbc>)
     a7c:	4b23      	ldr	r3, [pc, #140]	; (b0c <Reset_Handler+0xc0>)
     a7e:	429a      	cmp	r2, r3
     a80:	d20a      	bcs.n	a98 <Reset_Handler+0x4c>
     a82:	43d3      	mvns	r3, r2
     a84:	4921      	ldr	r1, [pc, #132]	; (b0c <Reset_Handler+0xc0>)
     a86:	185b      	adds	r3, r3, r1
     a88:	2103      	movs	r1, #3
     a8a:	438b      	bics	r3, r1
     a8c:	3304      	adds	r3, #4
     a8e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     a90:	2100      	movs	r1, #0
     a92:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     a94:	4293      	cmp	r3, r2
     a96:	d1fc      	bne.n	a92 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     a98:	4a1d      	ldr	r2, [pc, #116]	; (b10 <Reset_Handler+0xc4>)
     a9a:	21ff      	movs	r1, #255	; 0xff
     a9c:	4b1d      	ldr	r3, [pc, #116]	; (b14 <Reset_Handler+0xc8>)
     a9e:	438b      	bics	r3, r1
     aa0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     aa2:	39fd      	subs	r1, #253	; 0xfd
     aa4:	2390      	movs	r3, #144	; 0x90
     aa6:	005b      	lsls	r3, r3, #1
     aa8:	4a1b      	ldr	r2, [pc, #108]	; (b18 <Reset_Handler+0xcc>)
     aaa:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     aac:	4a1b      	ldr	r2, [pc, #108]	; (b1c <Reset_Handler+0xd0>)
     aae:	78d3      	ldrb	r3, [r2, #3]
     ab0:	2503      	movs	r5, #3
     ab2:	43ab      	bics	r3, r5
     ab4:	2402      	movs	r4, #2
     ab6:	4323      	orrs	r3, r4
     ab8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     aba:	78d3      	ldrb	r3, [r2, #3]
     abc:	270c      	movs	r7, #12
     abe:	43bb      	bics	r3, r7
     ac0:	2608      	movs	r6, #8
     ac2:	4333      	orrs	r3, r6
     ac4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     ac6:	4b16      	ldr	r3, [pc, #88]	; (b20 <Reset_Handler+0xd4>)
     ac8:	7b98      	ldrb	r0, [r3, #14]
     aca:	2230      	movs	r2, #48	; 0x30
     acc:	4390      	bics	r0, r2
     ace:	2220      	movs	r2, #32
     ad0:	4310      	orrs	r0, r2
     ad2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     ad4:	7b99      	ldrb	r1, [r3, #14]
     ad6:	43b9      	bics	r1, r7
     ad8:	4331      	orrs	r1, r6
     ada:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     adc:	7b9a      	ldrb	r2, [r3, #14]
     ade:	43aa      	bics	r2, r5
     ae0:	4322      	orrs	r2, r4
     ae2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     ae4:	4a0f      	ldr	r2, [pc, #60]	; (b24 <Reset_Handler+0xd8>)
     ae6:	6853      	ldr	r3, [r2, #4]
     ae8:	2180      	movs	r1, #128	; 0x80
     aea:	430b      	orrs	r3, r1
     aec:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     aee:	4b0e      	ldr	r3, [pc, #56]	; (b28 <Reset_Handler+0xdc>)
     af0:	4798      	blx	r3
        main();
     af2:	4b0e      	ldr	r3, [pc, #56]	; (b2c <Reset_Handler+0xe0>)
     af4:	4798      	blx	r3
     af6:	e7fe      	b.n	af6 <Reset_Handler+0xaa>
     af8:	000015a8 	.word	0x000015a8
     afc:	20000000 	.word	0x20000000
     b00:	20000074 	.word	0x20000074
     b04:	20000004 	.word	0x20000004
     b08:	20000074 	.word	0x20000074
     b0c:	20000114 	.word	0x20000114
     b10:	e000ed00 	.word	0xe000ed00
     b14:	00000000 	.word	0x00000000
     b18:	41007000 	.word	0x41007000
     b1c:	41005000 	.word	0x41005000
     b20:	41004800 	.word	0x41004800
     b24:	41004000 	.word	0x41004000
     b28:	00001189 	.word	0x00001189
     b2c:	00000f45 	.word	0x00000f45

00000b30 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     b30:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     b32:	4a06      	ldr	r2, [pc, #24]	; (b4c <_sbrk+0x1c>)
     b34:	6812      	ldr	r2, [r2, #0]
     b36:	2a00      	cmp	r2, #0
     b38:	d004      	beq.n	b44 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     b3a:	4a04      	ldr	r2, [pc, #16]	; (b4c <_sbrk+0x1c>)
     b3c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     b3e:	18c3      	adds	r3, r0, r3
     b40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
     b42:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     b44:	4902      	ldr	r1, [pc, #8]	; (b50 <_sbrk+0x20>)
     b46:	4a01      	ldr	r2, [pc, #4]	; (b4c <_sbrk+0x1c>)
     b48:	6011      	str	r1, [r2, #0]
     b4a:	e7f6      	b.n	b3a <_sbrk+0xa>
     b4c:	200000c8 	.word	0x200000c8
     b50:	20002118 	.word	0x20002118

00000b54 <LCD_Fast_Fill>:
		(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
     b54:	b570      	push	{r4, r5, r6, lr}
	int blocks;

	REG_PORT_OUTCLR1 = 0x0000ffff;
     b56:	4c19      	ldr	r4, [pc, #100]	; (bbc <LCD_Fast_Fill+0x68>)
     b58:	4b19      	ldr	r3, [pc, #100]	; (bc0 <LCD_Fast_Fill+0x6c>)
     b5a:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
     b5c:	0200      	lsls	r0, r0, #8
     b5e:	4301      	orrs	r1, r0
     b60:	4b18      	ldr	r3, [pc, #96]	; (bc4 <LCD_Fast_Fill+0x70>)
     b62:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
     b64:	17d3      	asrs	r3, r2, #31
     b66:	260f      	movs	r6, #15
     b68:	401e      	ands	r6, r3
     b6a:	18b6      	adds	r6, r6, r2
     b6c:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
     b6e:	2500      	movs	r5, #0
     b70:	2e00      	cmp	r6, #0
     b72:	dd0c      	ble.n	b8e <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
     b74:	4c12      	ldr	r4, [pc, #72]	; (bc0 <LCD_Fast_Fill+0x6c>)
     b76:	2180      	movs	r1, #128	; 0x80
     b78:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
     b7a:	4812      	ldr	r0, [pc, #72]	; (bc4 <LCD_Fast_Fill+0x70>)
{
     b7c:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
     b7e:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
     b80:	6001      	str	r1, [r0, #0]
     b82:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
     b84:	2b00      	cmp	r3, #0
     b86:	d1fa      	bne.n	b7e <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
     b88:	3501      	adds	r5, #1
     b8a:	42ae      	cmp	r6, r5
     b8c:	d1f6      	bne.n	b7c <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
     b8e:	0713      	lsls	r3, r2, #28
     b90:	d013      	beq.n	bba <LCD_Fast_Fill+0x66>
		for (int i=0; i<(pix % 16)+1; i++)
     b92:	17d3      	asrs	r3, r2, #31
     b94:	0f1b      	lsrs	r3, r3, #28
     b96:	18d2      	adds	r2, r2, r3
     b98:	210f      	movs	r1, #15
     b9a:	4011      	ands	r1, r2
     b9c:	1ac9      	subs	r1, r1, r3
     b9e:	1c4b      	adds	r3, r1, #1
     ba0:	2b00      	cmp	r3, #0
     ba2:	dd0a      	ble.n	bba <LCD_Fast_Fill+0x66>
     ba4:	0019      	movs	r1, r3
     ba6:	2300      	movs	r3, #0
		{
			REG_PORT_OUTCLR1 = LCD_WR;
     ba8:	4c05      	ldr	r4, [pc, #20]	; (bc0 <LCD_Fast_Fill+0x6c>)
     baa:	2280      	movs	r2, #128	; 0x80
     bac:	0292      	lsls	r2, r2, #10
			REG_PORT_OUTSET1 = LCD_WR;
     bae:	4805      	ldr	r0, [pc, #20]	; (bc4 <LCD_Fast_Fill+0x70>)
			REG_PORT_OUTCLR1 = LCD_WR;
     bb0:	6022      	str	r2, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
     bb2:	6002      	str	r2, [r0, #0]
		for (int i=0; i<(pix % 16)+1; i++)
     bb4:	3301      	adds	r3, #1
     bb6:	4299      	cmp	r1, r3
     bb8:	d1fa      	bne.n	bb0 <LCD_Fast_Fill+0x5c>
		}
}
     bba:	bd70      	pop	{r4, r5, r6, pc}
     bbc:	0000ffff 	.word	0x0000ffff
     bc0:	41004494 	.word	0x41004494
     bc4:	41004498 	.word	0x41004498

00000bc8 <LCD_Write_Bus>:
	LCD_Write_COM16(0x2c,0x00);
}


void LCD_Write_Bus(char VH, char VL)
{
     bc8:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
     bca:	4c06      	ldr	r4, [pc, #24]	; (be4 <LCD_Write_Bus+0x1c>)
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <LCD_Write_Bus+0x20>)
     bce:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
     bd0:	0200      	lsls	r0, r0, #8
     bd2:	4301      	orrs	r1, r0
     bd4:	4b05      	ldr	r3, [pc, #20]	; (bec <LCD_Write_Bus+0x24>)
     bd6:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
     bd8:	2280      	movs	r2, #128	; 0x80
     bda:	0292      	lsls	r2, r2, #10
     bdc:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
     bde:	601a      	str	r2, [r3, #0]

}
     be0:	bd10      	pop	{r4, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	41004494 	.word	0x41004494
     be8:	0000ffff 	.word	0x0000ffff
     bec:	41004498 	.word	0x41004498

00000bf0 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
     bf0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
     bf2:	2280      	movs	r2, #128	; 0x80
     bf4:	0412      	lsls	r2, r2, #16
     bf6:	4b02      	ldr	r3, [pc, #8]	; (c00 <LCD_Write_COM16+0x10>)
     bf8:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
     bfa:	4b02      	ldr	r3, [pc, #8]	; (c04 <LCD_Write_COM16+0x14>)
     bfc:	4798      	blx	r3
}
     bfe:	bd10      	pop	{r4, pc}
     c00:	41004494 	.word	0x41004494
     c04:	00000bc9 	.word	0x00000bc9

00000c08 <LCD_Write_DATA8>:
	REG_PORT_OUTSET1 = LCD_DC;
	LCD_Write_Bus(VH,VL);
}

void LCD_Write_DATA8(char VL)
{
     c08:	b510      	push	{r4, lr}
     c0a:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
     c0c:	2280      	movs	r2, #128	; 0x80
     c0e:	0412      	lsls	r2, r2, #16
     c10:	4b02      	ldr	r3, [pc, #8]	; (c1c <LCD_Write_DATA8+0x14>)
     c12:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
     c14:	2000      	movs	r0, #0
     c16:	4b02      	ldr	r3, [pc, #8]	; (c20 <LCD_Write_DATA8+0x18>)
     c18:	4798      	blx	r3
}
     c1a:	bd10      	pop	{r4, pc}
     c1c:	41004498 	.word	0x41004498
     c20:	00000bc9 	.word	0x00000bc9

00000c24 <setXY>:
{
     c24:	b5f0      	push	{r4, r5, r6, r7, lr}
     c26:	b083      	sub	sp, #12
     c28:	000e      	movs	r6, r1
     c2a:	9300      	str	r3, [sp, #0]
	y1=display_Y_size-y1;
     c2c:	4b1c      	ldr	r3, [pc, #112]	; (ca0 <setXY+0x7c>)
     c2e:	881d      	ldrh	r5, [r3, #0]
     c30:	1a28      	subs	r0, r5, r0
     c32:	b287      	uxth	r7, r0
	y2=display_Y_size-y2;
     c34:	1aad      	subs	r5, r5, r2
     c36:	b2ad      	uxth	r5, r5
	LCD_Write_COM16(0x2a,0x00);
     c38:	2100      	movs	r1, #0
     c3a:	202a      	movs	r0, #42	; 0x2a
     c3c:	4c19      	ldr	r4, [pc, #100]	; (ca4 <setXY+0x80>)
     c3e:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
     c40:	9601      	str	r6, [sp, #4]
     c42:	0a30      	lsrs	r0, r6, #8
     c44:	4e18      	ldr	r6, [pc, #96]	; (ca8 <setXY+0x84>)
     c46:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x01);
     c48:	2101      	movs	r1, #1
     c4a:	202a      	movs	r0, #42	; 0x2a
     c4c:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
     c4e:	466b      	mov	r3, sp
     c50:	7918      	ldrb	r0, [r3, #4]
     c52:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x02);
     c54:	2102      	movs	r1, #2
     c56:	202a      	movs	r0, #42	; 0x2a
     c58:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
     c5a:	9b00      	ldr	r3, [sp, #0]
     c5c:	0a18      	lsrs	r0, r3, #8
     c5e:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x03);
     c60:	2103      	movs	r1, #3
     c62:	202a      	movs	r0, #42	; 0x2a
     c64:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
     c66:	466b      	mov	r3, sp
     c68:	7818      	ldrb	r0, [r3, #0]
     c6a:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x00);
     c6c:	2100      	movs	r1, #0
     c6e:	202b      	movs	r0, #43	; 0x2b
     c70:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
     c72:	0a28      	lsrs	r0, r5, #8
     c74:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x01);
     c76:	2101      	movs	r1, #1
     c78:	202b      	movs	r0, #43	; 0x2b
     c7a:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
     c7c:	b2e8      	uxtb	r0, r5
     c7e:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x02);
     c80:	2102      	movs	r1, #2
     c82:	202b      	movs	r0, #43	; 0x2b
     c84:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
     c86:	0a38      	lsrs	r0, r7, #8
     c88:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x03);
     c8a:	2103      	movs	r1, #3
     c8c:	202b      	movs	r0, #43	; 0x2b
     c8e:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
     c90:	b2f8      	uxtb	r0, r7
     c92:	47b0      	blx	r6
	LCD_Write_COM16(0x2c,0x00);
     c94:	2100      	movs	r1, #0
     c96:	202c      	movs	r0, #44	; 0x2c
     c98:	47a0      	blx	r4
}
     c9a:	b003      	add	sp, #12
     c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	2000000c 	.word	0x2000000c
     ca4:	00000bf1 	.word	0x00000bf1
     ca8:	00000c09 	.word	0x00000c09

00000cac <fillRect>:
{
     cac:	b5f0      	push	{r4, r5, r6, r7, lr}
     cae:	46ce      	mov	lr, r9
     cb0:	4647      	mov	r7, r8
     cb2:	b580      	push	{r7, lr}
     cb4:	b083      	sub	sp, #12
     cb6:	4681      	mov	r9, r0
     cb8:	4688      	mov	r8, r1
     cba:	0015      	movs	r5, r2
     cbc:	001c      	movs	r4, r3
	if (x1>x2)
     cbe:	4290      	cmp	r0, r2
     cc0:	dd02      	ble.n	cc8 <fillRect+0x1c>
     cc2:	0403      	lsls	r3, r0, #16
		SwapUint16(x1, x2);
     cc4:	4691      	mov	r9, r2
     cc6:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
     cc8:	45a0      	cmp	r8, r4
     cca:	dd03      	ble.n	cd4 <fillRect+0x28>
     ccc:	4643      	mov	r3, r8
     cce:	041b      	lsls	r3, r3, #16
		SwapUint16(y1, y2);
     cd0:	46a0      	mov	r8, r4
     cd2:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
     cd4:	2780      	movs	r7, #128	; 0x80
     cd6:	03ff      	lsls	r7, r7, #15
     cd8:	4b12      	ldr	r3, [pc, #72]	; (d24 <fillRect+0x78>)
     cda:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
     cdc:	b2a3      	uxth	r3, r4
     cde:	b2aa      	uxth	r2, r5
     ce0:	4641      	mov	r1, r8
     ce2:	4668      	mov	r0, sp
     ce4:	80c1      	strh	r1, [r0, #6]
     ce6:	88c1      	ldrh	r1, [r0, #6]
     ce8:	4648      	mov	r0, r9
     cea:	466e      	mov	r6, sp
     cec:	80f0      	strh	r0, [r6, #6]
     cee:	88f0      	ldrh	r0, [r6, #6]
     cf0:	4e0d      	ldr	r6, [pc, #52]	; (d28 <fillRect+0x7c>)
     cf2:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
     cf4:	4e0d      	ldr	r6, [pc, #52]	; (d2c <fillRect+0x80>)
     cf6:	2380      	movs	r3, #128	; 0x80
     cf8:	041b      	lsls	r3, r3, #16
     cfa:	6033      	str	r3, [r6, #0]
		(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
     cfc:	464b      	mov	r3, r9
     cfe:	1aed      	subs	r5, r5, r3
     d00:	3501      	adds	r5, #1
     d02:	4643      	mov	r3, r8
     d04:	1ae2      	subs	r2, r4, r3
     d06:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low, 
     d08:	436a      	muls	r2, r5
     d0a:	4b09      	ldr	r3, [pc, #36]	; (d30 <fillRect+0x84>)
     d0c:	8819      	ldrh	r1, [r3, #0]
     d0e:	4b09      	ldr	r3, [pc, #36]	; (d34 <fillRect+0x88>)
     d10:	8818      	ldrh	r0, [r3, #0]
     d12:	4b09      	ldr	r3, [pc, #36]	; (d38 <fillRect+0x8c>)
     d14:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
     d16:	6037      	str	r7, [r6, #0]
}
     d18:	b003      	add	sp, #12
     d1a:	bc0c      	pop	{r2, r3}
     d1c:	4690      	mov	r8, r2
     d1e:	4699      	mov	r9, r3
     d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	41004494 	.word	0x41004494
     d28:	00000c25 	.word	0x00000c25
     d2c:	41004498 	.word	0x41004498
     d30:	2000010c 	.word	0x2000010c
     d34:	2000010a 	.word	0x2000010a
     d38:	00000b55 	.word	0x00000b55

00000d3c <clrXY>:
{
     d3c:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
     d3e:	4b04      	ldr	r3, [pc, #16]	; (d50 <clrXY+0x14>)
     d40:	881b      	ldrh	r3, [r3, #0]
     d42:	4a04      	ldr	r2, [pc, #16]	; (d54 <clrXY+0x18>)
     d44:	8812      	ldrh	r2, [r2, #0]
     d46:	2100      	movs	r1, #0
     d48:	2000      	movs	r0, #0
     d4a:	4c03      	ldr	r4, [pc, #12]	; (d58 <clrXY+0x1c>)
     d4c:	47a0      	blx	r4
}
     d4e:	bd10      	pop	{r4, pc}
     d50:	2000000c 	.word	0x2000000c
     d54:	2000000a 	.word	0x2000000a
     d58:	00000c25 	.word	0x00000c25

00000d5c <clrScr>:
{
     d5c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
     d5e:	2280      	movs	r2, #128	; 0x80
     d60:	03d2      	lsls	r2, r2, #15
     d62:	4b02      	ldr	r3, [pc, #8]	; (d6c <clrScr+0x10>)
     d64:	601a      	str	r2, [r3, #0]
	clrXY();
     d66:	4b02      	ldr	r3, [pc, #8]	; (d70 <clrScr+0x14>)
     d68:	4798      	blx	r3
}
     d6a:	bd10      	pop	{r4, pc}
     d6c:	41004494 	.word	0x41004494
     d70:	00000d3d 	.word	0x00000d3d

00000d74 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes, 
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     d74:	b5f0      	push	{r4, r5, r6, r7, lr}
     d76:	b0c1      	sub	sp, #260	; 0x104
     d78:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     d7a:	22d0      	movs	r2, #208	; 0xd0
     d7c:	4930      	ldr	r1, [pc, #192]	; (e40 <drawKare+0xcc>)
     d7e:	a80c      	add	r0, sp, #48	; 0x30
     d80:	4b30      	ldr	r3, [pc, #192]	; (e44 <drawKare+0xd0>)
     d82:	4798      	blx	r3
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
		
	//Yeah, these are uint8 arrays.		
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     d84:	a805      	add	r0, sp, #20
     d86:	4b30      	ldr	r3, [pc, #192]	; (e48 <drawKare+0xd4>)
     d88:	001a      	movs	r2, r3
     d8a:	3250      	adds	r2, #80	; 0x50
     d8c:	0001      	movs	r1, r0
     d8e:	ca31      	ldmia	r2!, {r0, r4, r5}
     d90:	c131      	stmia	r1!, {r0, r4, r5}
     d92:	ca31      	ldmia	r2!, {r0, r4, r5}
     d94:	c131      	stmia	r1!, {r0, r4, r5}
     d96:	6812      	ldr	r2, [r2, #0]
     d98:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
		220,150,230,160};
		
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     d9a:	336c      	adds	r3, #108	; 0x6c
     d9c:	466a      	mov	r2, sp
     d9e:	cb13      	ldmia	r3!, {r0, r1, r4}
     da0:	c213      	stmia	r2!, {r0, r1, r4}
     da2:	cb03      	ldmia	r3!, {r0, r1}
     da4:	c203      	stmia	r2!, {r0, r1}
	back_Color_High = ((r&248)|g>>5);
     da6:	2300      	movs	r3, #0
     da8:	4a28      	ldr	r2, [pc, #160]	; (e4c <drawKare+0xd8>)
     daa:	8013      	strh	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
     dac:	4a28      	ldr	r2, [pc, #160]	; (e50 <drawKare+0xdc>)
     dae:	8013      	strh	r3, [r2, #0]
     db0:	ac0c      	add	r4, sp, #48	; 0x30
     db2:	ae40      	add	r6, sp, #256	; 0x100

	setBackColorRGB(0,0,0);
		
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     db4:	4d27      	ldr	r5, [pc, #156]	; (e54 <drawKare+0xe0>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     db6:	88e3      	ldrh	r3, [r4, #6]
     db8:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     dba:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     dbc:	88a2      	ldrh	r2, [r4, #4]
     dbe:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     dc0:	322d      	adds	r2, #45	; 0x2d
     dc2:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     dc4:	8861      	ldrh	r1, [r4, #2]
     dc6:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     dc8:	3196      	adds	r1, #150	; 0x96
     dca:	8820      	ldrh	r0, [r4, #0]
     dcc:	1040      	asrs	r0, r0, #1
     dce:	302d      	adds	r0, #45	; 0x2d
     dd0:	30ff      	adds	r0, #255	; 0xff
     dd2:	47a8      	blx	r5
     dd4:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     dd6:	42b4      	cmp	r4, r6
     dd8:	d1ed      	bne.n	db6 <drawKare+0x42>
	}
	switch(emotion)
     dda:	2f00      	cmp	r7, #0
     ddc:	d003      	beq.n	de6 <drawKare+0x72>
     dde:	2f01      	cmp	r7, #1
     de0:	d017      	beq.n	e12 <drawKare+0x9e>
				break;
			case 2:
				//make a sad terminal thing go here
				break;
	}
}
     de2:	b041      	add	sp, #260	; 0x104
     de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     de6:	ac05      	add	r4, sp, #20
     de8:	ae0c      	add	r6, sp, #48	; 0x30
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     dea:	4d1a      	ldr	r5, [pc, #104]	; (e54 <drawKare+0xe0>)
					((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     dec:	78e3      	ldrb	r3, [r4, #3]
     dee:	105b      	asrs	r3, r3, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     df0:	3396      	adds	r3, #150	; 0x96
					((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     df2:	78a2      	ldrb	r2, [r4, #2]
     df4:	1052      	asrs	r2, r2, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     df6:	322d      	adds	r2, #45	; 0x2d
     df8:	32ff      	adds	r2, #255	; 0xff
					((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     dfa:	7861      	ldrb	r1, [r4, #1]
     dfc:	1049      	asrs	r1, r1, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     dfe:	3196      	adds	r1, #150	; 0x96
     e00:	7820      	ldrb	r0, [r4, #0]
     e02:	1040      	asrs	r0, r0, #1
     e04:	302d      	adds	r0, #45	; 0x2d
     e06:	30ff      	adds	r0, #255	; 0xff
     e08:	47a8      	blx	r5
     e0a:	3404      	adds	r4, #4
				for(int i = 0; i < 28; i = i+4)
     e0c:	42a6      	cmp	r6, r4
     e0e:	d1ed      	bne.n	dec <drawKare+0x78>
     e10:	e7e7      	b.n	de2 <drawKare+0x6e>
     e12:	466c      	mov	r4, sp
     e14:	ae05      	add	r6, sp, #20
					fillRect((
     e16:	4d0f      	ldr	r5, [pc, #60]	; (e54 <drawKare+0xe0>)
					((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     e18:	78e3      	ldrb	r3, [r4, #3]
     e1a:	105b      	asrs	r3, r3, #1
					fillRect((
     e1c:	3396      	adds	r3, #150	; 0x96
					((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     e1e:	78a2      	ldrb	r2, [r4, #2]
     e20:	1052      	asrs	r2, r2, #1
					fillRect((
     e22:	322d      	adds	r2, #45	; 0x2d
     e24:	32ff      	adds	r2, #255	; 0xff
					((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     e26:	7861      	ldrb	r1, [r4, #1]
     e28:	1049      	asrs	r1, r1, #1
					fillRect((
     e2a:	3196      	adds	r1, #150	; 0x96
					(rPiBeret[i]/iSv)+(offsetGraphicX)),
     e2c:	7820      	ldrb	r0, [r4, #0]
     e2e:	1040      	asrs	r0, r0, #1
					fillRect((
     e30:	302d      	adds	r0, #45	; 0x2d
     e32:	30ff      	adds	r0, #255	; 0xff
     e34:	47a8      	blx	r5
     e36:	3404      	adds	r4, #4
				for(int i = 0; i < 20; i = i+4)
     e38:	42b4      	cmp	r4, r6
     e3a:	d1ed      	bne.n	e18 <drawKare+0xa4>
     e3c:	e7d1      	b.n	de2 <drawKare+0x6e>
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	00001380 	.word	0x00001380
     e44:	000011d1 	.word	0x000011d1
     e48:	00001400 	.word	0x00001400
     e4c:	2000010e 	.word	0x2000010e
     e50:	20000108 	.word	0x20000108
     e54:	00000cad 	.word	0x00000cad

00000e58 <InitLCD>:



/**************************InitLCD()**********************************/
void InitLCD(void)
{
     e58:	b5f0      	push	{r4, r5, r6, r7, lr}
     e5a:	b083      	sub	sp, #12
		0x00,0x53,0x00,0x88,0x00,0xB6,0x00,0xF3,0x01,0x22,0x01,0x64,
		0x01,0x92,0x01,0xD4,0x02,0x07,0x02,0x08,0x02,0x34,0x02,0x5F,
		0x02,0x78,0x02,0x94,0x02,0xA6,0x02,0xBB,0x02,0xDB,0x02,0xF9,
		0x03,0x1F,0x03,0x7F};
		
		REG_PORT_DIRSET1 = 0x00010000;
     e5c:	2380      	movs	r3, #128	; 0x80
     e5e:	025b      	lsls	r3, r3, #9
     e60:	4a2a      	ldr	r2, [pc, #168]	; (f0c <InitLCD+0xb4>)
     e62:	6013      	str	r3, [r2, #0]
		REG_PORT_OUTSET1 = PORT_PB16;
     e64:	4c2a      	ldr	r4, [pc, #168]	; (f10 <InitLCD+0xb8>)
     e66:	6023      	str	r3, [r4, #0]
		
		REG_PORT_OUTSET1 = LCD_Reset;
     e68:	2580      	movs	r5, #128	; 0x80
     e6a:	05ed      	lsls	r5, r5, #23
     e6c:	6025      	str	r5, [r4, #0]
		delay_ms(5);
     e6e:	2005      	movs	r0, #5
     e70:	4f28      	ldr	r7, [pc, #160]	; (f14 <InitLCD+0xbc>)
     e72:	47b8      	blx	r7
		REG_PORT_OUTCLR1 = LCD_Reset;
     e74:	4e28      	ldr	r6, [pc, #160]	; (f18 <InitLCD+0xc0>)
     e76:	6035      	str	r5, [r6, #0]
		delay_ms(15);
     e78:	200f      	movs	r0, #15
     e7a:	47b8      	blx	r7
		REG_PORT_OUTSET1 = LCD_Reset;
     e7c:	6025      	str	r5, [r4, #0]
		REG_PORT_OUTCLR1 = LCD_CS;
     e7e:	2380      	movs	r3, #128	; 0x80
     e80:	03db      	lsls	r3, r3, #15
     e82:	6033      	str	r3, [r6, #0]

	for(int i = 0; i < 70; i++)
     e84:	2400      	movs	r4, #0
	{
		LCD_Write_COM16(belial[i],mulciber[i]);
     e86:	4f25      	ldr	r7, [pc, #148]	; (f1c <InitLCD+0xc4>)
     e88:	4e25      	ldr	r6, [pc, #148]	; (f20 <InitLCD+0xc8>)
     e8a:	4d26      	ldr	r5, [pc, #152]	; (f24 <InitLCD+0xcc>)
     e8c:	5de1      	ldrb	r1, [r4, r7]
     e8e:	5da0      	ldrb	r0, [r4, r6]
     e90:	47a8      	blx	r5
		LCD_Write_DATA8(lucifer[i]);
     e92:	4b25      	ldr	r3, [pc, #148]	; (f28 <InitLCD+0xd0>)
     e94:	5ce0      	ldrb	r0, [r4, r3]
     e96:	4b25      	ldr	r3, [pc, #148]	; (f2c <InitLCD+0xd4>)
     e98:	4798      	blx	r3
		delay_ms(1);
     e9a:	2001      	movs	r0, #1
     e9c:	4b1d      	ldr	r3, [pc, #116]	; (f14 <InitLCD+0xbc>)
     e9e:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
     ea0:	3401      	adds	r4, #1
     ea2:	2c46      	cmp	r4, #70	; 0x46
     ea4:	d1f2      	bne.n	e8c <InitLCD+0x34>
     ea6:	23d1      	movs	r3, #209	; 0xd1
     ea8:	9301      	str	r3, [sp, #4]
	}
	
	for(char k = 0xD1; k < 0xD6; k++)
		for(int l = 0; l < 48; l++)
		{
			LCD_Write_COM16(k,l);
     eaa:	4d1e      	ldr	r5, [pc, #120]	; (f24 <InitLCD+0xcc>)
			LCD_Write_DATA8(beelzebub[l]);
     eac:	4f20      	ldr	r7, [pc, #128]	; (f30 <InitLCD+0xd8>)
     eae:	4e1f      	ldr	r6, [pc, #124]	; (f2c <InitLCD+0xd4>)
	for(int i = 0; i < 70; i++)
     eb0:	2400      	movs	r4, #0
			LCD_Write_COM16(k,l);
     eb2:	b2e1      	uxtb	r1, r4
     eb4:	9801      	ldr	r0, [sp, #4]
     eb6:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
     eb8:	5de0      	ldrb	r0, [r4, r7]
     eba:	47b0      	blx	r6
			delay_ms(1);
     ebc:	2001      	movs	r0, #1
     ebe:	4b15      	ldr	r3, [pc, #84]	; (f14 <InitLCD+0xbc>)
     ec0:	4798      	blx	r3
		for(int l = 0; l < 48; l++)
     ec2:	3401      	adds	r4, #1
     ec4:	2c30      	cmp	r4, #48	; 0x30
     ec6:	d1f4      	bne.n	eb2 <InitLCD+0x5a>
	for(char k = 0xD1; k < 0xD6; k++)
     ec8:	9b01      	ldr	r3, [sp, #4]
     eca:	3301      	adds	r3, #1
     ecc:	b2db      	uxtb	r3, r3
     ece:	9301      	str	r3, [sp, #4]
     ed0:	2bd6      	cmp	r3, #214	; 0xd6
     ed2:	d1ed      	bne.n	eb0 <InitLCD+0x58>
		}
		

	
  	LCD_Write_COM16(0x11,0x00);   //StartUp  
     ed4:	2100      	movs	r1, #0
     ed6:	2011      	movs	r0, #17
     ed8:	4d12      	ldr	r5, [pc, #72]	; (f24 <InitLCD+0xcc>)
     eda:	47a8      	blx	r5
  
  	delay_ms(5);
     edc:	2005      	movs	r0, #5
     ede:	4c0d      	ldr	r4, [pc, #52]	; (f14 <InitLCD+0xbc>)
     ee0:	47a0      	blx	r4

  	LCD_Write_COM16(0x29,0x00);   //Display On  
     ee2:	2100      	movs	r1, #0
     ee4:	2029      	movs	r0, #41	; 0x29
     ee6:	47a8      	blx	r5
	  
   	delay_ms(5);
     ee8:	2005      	movs	r0, #5
     eea:	47a0      	blx	r4
	
	REG_PORT_OUTSET1 = LCD_CS;
     eec:	2280      	movs	r2, #128	; 0x80
     eee:	03d2      	lsls	r2, r2, #15
     ef0:	4b07      	ldr	r3, [pc, #28]	; (f10 <InitLCD+0xb8>)
     ef2:	601a      	str	r2, [r3, #0]
	fore_Color_High = ((r&248)|g>>5);
     ef4:	23ff      	movs	r3, #255	; 0xff
     ef6:	4a0f      	ldr	r2, [pc, #60]	; (f34 <InitLCD+0xdc>)
     ef8:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
     efa:	4a0f      	ldr	r2, [pc, #60]	; (f38 <InitLCD+0xe0>)
     efc:	8013      	strh	r3, [r2, #0]
	back_Color_High = ((r&248)|g>>5);
     efe:	2300      	movs	r3, #0
     f00:	4a0e      	ldr	r2, [pc, #56]	; (f3c <InitLCD+0xe4>)
     f02:	8013      	strh	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
     f04:	4a0e      	ldr	r2, [pc, #56]	; (f40 <InitLCD+0xe8>)
     f06:	8013      	strh	r3, [r2, #0]
	
	setColorRGB(255, 255, 255);
	setBackColorRGB(0, 0, 0);
	
}
     f08:	b003      	add	sp, #12
     f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f0c:	41004488 	.word	0x41004488
     f10:	41004498 	.word	0x41004498
     f14:	00000155 	.word	0x00000155
     f18:	41004494 	.word	0x41004494
     f1c:	00001540 	.word	0x00001540
     f20:	000014b0 	.word	0x000014b0
     f24:	00000bf1 	.word	0x00000bf1
     f28:	000014f8 	.word	0x000014f8
     f2c:	00000c09 	.word	0x00000c09
     f30:	00001480 	.word	0x00001480
     f34:	2000010a 	.word	0x2000010a
     f38:	2000010c 	.word	0x2000010c
     f3c:	2000010e 	.word	0x2000010e
     f40:	20000108 	.word	0x20000108

00000f44 <main>:
{
     f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f46:	46ce      	mov	lr, r9
     f48:	4647      	mov	r7, r8
     f4a:	b580      	push	{r7, lr}
	system_init();
     f4c:	4b39      	ldr	r3, [pc, #228]	; (1034 <main+0xf0>)
     f4e:	4798      	blx	r3
	delay_init();
     f50:	4b39      	ldr	r3, [pc, #228]	; (1038 <main+0xf4>)
     f52:	4798      	blx	r3
	srand(chip_Serial_Number);
     f54:	2040      	movs	r0, #64	; 0x40
     f56:	4b39      	ldr	r3, [pc, #228]	; (103c <main+0xf8>)
     f58:	4798      	blx	r3
	REG_PORT_DIRSET1 = 0x0000ffff;		//this is the LCD data bus, PB00 - PB15
     f5a:	4b39      	ldr	r3, [pc, #228]	; (1040 <main+0xfc>)
     f5c:	4e39      	ldr	r6, [pc, #228]	; (1044 <main+0x100>)
     f5e:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
     f60:	2580      	movs	r5, #128	; 0x80
     f62:	05ed      	lsls	r5, r5, #23
     f64:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
     f66:	2480      	movs	r4, #128	; 0x80
     f68:	03e4      	lsls	r4, r4, #15
     f6a:	601c      	str	r4, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
     f6c:	2080      	movs	r0, #128	; 0x80
     f6e:	0280      	lsls	r0, r0, #10
     f70:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
     f72:	2180      	movs	r1, #128	; 0x80
     f74:	0409      	lsls	r1, r1, #16
     f76:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
     f78:	2280      	movs	r2, #128	; 0x80
     f7a:	0252      	lsls	r2, r2, #9
     f7c:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
     f7e:	4b32      	ldr	r3, [pc, #200]	; (1048 <main+0x104>)
     f80:	601e      	str	r6, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
     f82:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
     f84:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
     f86:	6018      	str	r0, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
     f88:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
     f8a:	601a      	str	r2, [r3, #0]
	InitLCD();
     f8c:	4b2f      	ldr	r3, [pc, #188]	; (104c <main+0x108>)
     f8e:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
     f90:	4f2f      	ldr	r7, [pc, #188]	; (1050 <main+0x10c>)
     f92:	2400      	movs	r4, #0
     f94:	803c      	strh	r4, [r7, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
     f96:	4e2f      	ldr	r6, [pc, #188]	; (1054 <main+0x110>)
     f98:	8034      	strh	r4, [r6, #0]
	back_Color_High = ((r&248)|g>>5);
     f9a:	4b2f      	ldr	r3, [pc, #188]	; (1058 <main+0x114>)
     f9c:	801c      	strh	r4, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
     f9e:	4b2f      	ldr	r3, [pc, #188]	; (105c <main+0x118>)
     fa0:	801c      	strh	r4, [r3, #0]
	fillRect(0,0,799,479);
     fa2:	23e0      	movs	r3, #224	; 0xe0
     fa4:	33ff      	adds	r3, #255	; 0xff
     fa6:	4a2e      	ldr	r2, [pc, #184]	; (1060 <main+0x11c>)
     fa8:	2100      	movs	r1, #0
     faa:	2000      	movs	r0, #0
     fac:	4d2d      	ldr	r5, [pc, #180]	; (1064 <main+0x120>)
     fae:	47a8      	blx	r5
	drawKare(0);
     fb0:	2000      	movs	r0, #0
     fb2:	4b2d      	ldr	r3, [pc, #180]	; (1068 <main+0x124>)
     fb4:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
     fb6:	803c      	strh	r4, [r7, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
     fb8:	8034      	strh	r4, [r6, #0]
	fillRect(0,0,799,479);
     fba:	23e0      	movs	r3, #224	; 0xe0
     fbc:	33ff      	adds	r3, #255	; 0xff
     fbe:	4a28      	ldr	r2, [pc, #160]	; (1060 <main+0x11c>)
     fc0:	2100      	movs	r1, #0
     fc2:	2000      	movs	r0, #0
     fc4:	47a8      	blx	r5
		clrScr();
     fc6:	4b29      	ldr	r3, [pc, #164]	; (106c <main+0x128>)
     fc8:	4798      	blx	r3
		blue = 64;
     fca:	2640      	movs	r6, #64	; 0x40
		green = 128;
     fcc:	3480      	adds	r4, #128	; 0x80
		red = 0;
     fce:	2500      	movs	r5, #0
	fore_Color_High = ((r&248)|g>>5);
     fd0:	4b1f      	ldr	r3, [pc, #124]	; (1050 <main+0x10c>)
     fd2:	4699      	mov	r9, r3
	fore_Color_Low = ((g&28)<<3|b>>3);
     fd4:	4b1f      	ldr	r3, [pc, #124]	; (1054 <main+0x110>)
     fd6:	4698      	mov	r8, r3
			drawKare(0);
     fd8:	4f23      	ldr	r7, [pc, #140]	; (1068 <main+0x124>)
     fda:	e01f      	b.n	101c <main+0xd8>
			if(green > 0 && red == 0)
     fdc:	2c00      	cmp	r4, #0
     fde:	dd03      	ble.n	fe8 <main+0xa4>
     fe0:	2d00      	cmp	r5, #0
     fe2:	d107      	bne.n	ff4 <main+0xb0>
				green--;
     fe4:	3c01      	subs	r4, #1
				blue++;
     fe6:	3601      	adds	r6, #1
			if(blue > 0 && green == 0)
     fe8:	2e00      	cmp	r6, #0
     fea:	dd03      	ble.n	ff4 <main+0xb0>
     fec:	2c00      	cmp	r4, #0
     fee:	d101      	bne.n	ff4 <main+0xb0>
				red++;
     ff0:	3501      	adds	r5, #1
				blue--;
     ff2:	3e01      	subs	r6, #1
	fore_Color_High = ((r&248)|g>>5);
     ff4:	2307      	movs	r3, #7
     ff6:	002a      	movs	r2, r5
     ff8:	439a      	bics	r2, r3
     ffa:	0013      	movs	r3, r2
     ffc:	b2e2      	uxtb	r2, r4
     ffe:	0952      	lsrs	r2, r2, #5
    1000:	4313      	orrs	r3, r2
    1002:	b2db      	uxtb	r3, r3
    1004:	464a      	mov	r2, r9
    1006:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    1008:	00e2      	lsls	r2, r4, #3
    100a:	23e0      	movs	r3, #224	; 0xe0
    100c:	401a      	ands	r2, r3
    100e:	b2f3      	uxtb	r3, r6
    1010:	08db      	lsrs	r3, r3, #3
    1012:	4313      	orrs	r3, r2
    1014:	4642      	mov	r2, r8
    1016:	8013      	strh	r3, [r2, #0]
			drawKare(0);
    1018:	2000      	movs	r0, #0
    101a:	47b8      	blx	r7
			if(red > 0 && blue == 0)
    101c:	2d00      	cmp	r5, #0
    101e:	dddd      	ble.n	fdc <main+0x98>
    1020:	2e00      	cmp	r6, #0
    1022:	d104      	bne.n	102e <main+0xea>
				red--;
    1024:	3d01      	subs	r5, #1
				green++;
    1026:	3401      	adds	r4, #1
			if(green > 0 && red == 0)
    1028:	2c00      	cmp	r4, #0
    102a:	dcd9      	bgt.n	fe0 <main+0x9c>
    102c:	e7e2      	b.n	ff4 <main+0xb0>
    102e:	2c00      	cmp	r4, #0
    1030:	dce0      	bgt.n	ff4 <main+0xb0>
    1032:	e7d9      	b.n	fe8 <main+0xa4>
    1034:	00000a1d 	.word	0x00000a1d
    1038:	00000115 	.word	0x00000115
    103c:	000011e5 	.word	0x000011e5
    1040:	41004488 	.word	0x41004488
    1044:	0000ffff 	.word	0x0000ffff
    1048:	41004494 	.word	0x41004494
    104c:	00000e59 	.word	0x00000e59
    1050:	2000010a 	.word	0x2000010a
    1054:	2000010c 	.word	0x2000010c
    1058:	2000010e 	.word	0x2000010e
    105c:	20000108 	.word	0x20000108
    1060:	0000031f 	.word	0x0000031f
    1064:	00000cad 	.word	0x00000cad
    1068:	00000d75 	.word	0x00000d75
    106c:	00000d5d 	.word	0x00000d5d

00001070 <__udivsi3>:
    1070:	2200      	movs	r2, #0
    1072:	0843      	lsrs	r3, r0, #1
    1074:	428b      	cmp	r3, r1
    1076:	d374      	bcc.n	1162 <__udivsi3+0xf2>
    1078:	0903      	lsrs	r3, r0, #4
    107a:	428b      	cmp	r3, r1
    107c:	d35f      	bcc.n	113e <__udivsi3+0xce>
    107e:	0a03      	lsrs	r3, r0, #8
    1080:	428b      	cmp	r3, r1
    1082:	d344      	bcc.n	110e <__udivsi3+0x9e>
    1084:	0b03      	lsrs	r3, r0, #12
    1086:	428b      	cmp	r3, r1
    1088:	d328      	bcc.n	10dc <__udivsi3+0x6c>
    108a:	0c03      	lsrs	r3, r0, #16
    108c:	428b      	cmp	r3, r1
    108e:	d30d      	bcc.n	10ac <__udivsi3+0x3c>
    1090:	22ff      	movs	r2, #255	; 0xff
    1092:	0209      	lsls	r1, r1, #8
    1094:	ba12      	rev	r2, r2
    1096:	0c03      	lsrs	r3, r0, #16
    1098:	428b      	cmp	r3, r1
    109a:	d302      	bcc.n	10a2 <__udivsi3+0x32>
    109c:	1212      	asrs	r2, r2, #8
    109e:	0209      	lsls	r1, r1, #8
    10a0:	d065      	beq.n	116e <__udivsi3+0xfe>
    10a2:	0b03      	lsrs	r3, r0, #12
    10a4:	428b      	cmp	r3, r1
    10a6:	d319      	bcc.n	10dc <__udivsi3+0x6c>
    10a8:	e000      	b.n	10ac <__udivsi3+0x3c>
    10aa:	0a09      	lsrs	r1, r1, #8
    10ac:	0bc3      	lsrs	r3, r0, #15
    10ae:	428b      	cmp	r3, r1
    10b0:	d301      	bcc.n	10b6 <__udivsi3+0x46>
    10b2:	03cb      	lsls	r3, r1, #15
    10b4:	1ac0      	subs	r0, r0, r3
    10b6:	4152      	adcs	r2, r2
    10b8:	0b83      	lsrs	r3, r0, #14
    10ba:	428b      	cmp	r3, r1
    10bc:	d301      	bcc.n	10c2 <__udivsi3+0x52>
    10be:	038b      	lsls	r3, r1, #14
    10c0:	1ac0      	subs	r0, r0, r3
    10c2:	4152      	adcs	r2, r2
    10c4:	0b43      	lsrs	r3, r0, #13
    10c6:	428b      	cmp	r3, r1
    10c8:	d301      	bcc.n	10ce <__udivsi3+0x5e>
    10ca:	034b      	lsls	r3, r1, #13
    10cc:	1ac0      	subs	r0, r0, r3
    10ce:	4152      	adcs	r2, r2
    10d0:	0b03      	lsrs	r3, r0, #12
    10d2:	428b      	cmp	r3, r1
    10d4:	d301      	bcc.n	10da <__udivsi3+0x6a>
    10d6:	030b      	lsls	r3, r1, #12
    10d8:	1ac0      	subs	r0, r0, r3
    10da:	4152      	adcs	r2, r2
    10dc:	0ac3      	lsrs	r3, r0, #11
    10de:	428b      	cmp	r3, r1
    10e0:	d301      	bcc.n	10e6 <__udivsi3+0x76>
    10e2:	02cb      	lsls	r3, r1, #11
    10e4:	1ac0      	subs	r0, r0, r3
    10e6:	4152      	adcs	r2, r2
    10e8:	0a83      	lsrs	r3, r0, #10
    10ea:	428b      	cmp	r3, r1
    10ec:	d301      	bcc.n	10f2 <__udivsi3+0x82>
    10ee:	028b      	lsls	r3, r1, #10
    10f0:	1ac0      	subs	r0, r0, r3
    10f2:	4152      	adcs	r2, r2
    10f4:	0a43      	lsrs	r3, r0, #9
    10f6:	428b      	cmp	r3, r1
    10f8:	d301      	bcc.n	10fe <__udivsi3+0x8e>
    10fa:	024b      	lsls	r3, r1, #9
    10fc:	1ac0      	subs	r0, r0, r3
    10fe:	4152      	adcs	r2, r2
    1100:	0a03      	lsrs	r3, r0, #8
    1102:	428b      	cmp	r3, r1
    1104:	d301      	bcc.n	110a <__udivsi3+0x9a>
    1106:	020b      	lsls	r3, r1, #8
    1108:	1ac0      	subs	r0, r0, r3
    110a:	4152      	adcs	r2, r2
    110c:	d2cd      	bcs.n	10aa <__udivsi3+0x3a>
    110e:	09c3      	lsrs	r3, r0, #7
    1110:	428b      	cmp	r3, r1
    1112:	d301      	bcc.n	1118 <__udivsi3+0xa8>
    1114:	01cb      	lsls	r3, r1, #7
    1116:	1ac0      	subs	r0, r0, r3
    1118:	4152      	adcs	r2, r2
    111a:	0983      	lsrs	r3, r0, #6
    111c:	428b      	cmp	r3, r1
    111e:	d301      	bcc.n	1124 <__udivsi3+0xb4>
    1120:	018b      	lsls	r3, r1, #6
    1122:	1ac0      	subs	r0, r0, r3
    1124:	4152      	adcs	r2, r2
    1126:	0943      	lsrs	r3, r0, #5
    1128:	428b      	cmp	r3, r1
    112a:	d301      	bcc.n	1130 <__udivsi3+0xc0>
    112c:	014b      	lsls	r3, r1, #5
    112e:	1ac0      	subs	r0, r0, r3
    1130:	4152      	adcs	r2, r2
    1132:	0903      	lsrs	r3, r0, #4
    1134:	428b      	cmp	r3, r1
    1136:	d301      	bcc.n	113c <__udivsi3+0xcc>
    1138:	010b      	lsls	r3, r1, #4
    113a:	1ac0      	subs	r0, r0, r3
    113c:	4152      	adcs	r2, r2
    113e:	08c3      	lsrs	r3, r0, #3
    1140:	428b      	cmp	r3, r1
    1142:	d301      	bcc.n	1148 <__udivsi3+0xd8>
    1144:	00cb      	lsls	r3, r1, #3
    1146:	1ac0      	subs	r0, r0, r3
    1148:	4152      	adcs	r2, r2
    114a:	0883      	lsrs	r3, r0, #2
    114c:	428b      	cmp	r3, r1
    114e:	d301      	bcc.n	1154 <__udivsi3+0xe4>
    1150:	008b      	lsls	r3, r1, #2
    1152:	1ac0      	subs	r0, r0, r3
    1154:	4152      	adcs	r2, r2
    1156:	0843      	lsrs	r3, r0, #1
    1158:	428b      	cmp	r3, r1
    115a:	d301      	bcc.n	1160 <__udivsi3+0xf0>
    115c:	004b      	lsls	r3, r1, #1
    115e:	1ac0      	subs	r0, r0, r3
    1160:	4152      	adcs	r2, r2
    1162:	1a41      	subs	r1, r0, r1
    1164:	d200      	bcs.n	1168 <__udivsi3+0xf8>
    1166:	4601      	mov	r1, r0
    1168:	4152      	adcs	r2, r2
    116a:	4610      	mov	r0, r2
    116c:	4770      	bx	lr
    116e:	e7ff      	b.n	1170 <__udivsi3+0x100>
    1170:	b501      	push	{r0, lr}
    1172:	2000      	movs	r0, #0
    1174:	f000 f806 	bl	1184 <__aeabi_idiv0>
    1178:	bd02      	pop	{r1, pc}
    117a:	46c0      	nop			; (mov r8, r8)

0000117c <__aeabi_uidivmod>:
    117c:	2900      	cmp	r1, #0
    117e:	d0f7      	beq.n	1170 <__udivsi3+0x100>
    1180:	e776      	b.n	1070 <__udivsi3>
    1182:	4770      	bx	lr

00001184 <__aeabi_idiv0>:
    1184:	4770      	bx	lr
    1186:	46c0      	nop			; (mov r8, r8)

00001188 <__libc_init_array>:
    1188:	b570      	push	{r4, r5, r6, lr}
    118a:	2600      	movs	r6, #0
    118c:	4d0c      	ldr	r5, [pc, #48]	; (11c0 <__libc_init_array+0x38>)
    118e:	4c0d      	ldr	r4, [pc, #52]	; (11c4 <__libc_init_array+0x3c>)
    1190:	1b64      	subs	r4, r4, r5
    1192:	10a4      	asrs	r4, r4, #2
    1194:	42a6      	cmp	r6, r4
    1196:	d109      	bne.n	11ac <__libc_init_array+0x24>
    1198:	2600      	movs	r6, #0
    119a:	f000 f9f5 	bl	1588 <_init>
    119e:	4d0a      	ldr	r5, [pc, #40]	; (11c8 <__libc_init_array+0x40>)
    11a0:	4c0a      	ldr	r4, [pc, #40]	; (11cc <__libc_init_array+0x44>)
    11a2:	1b64      	subs	r4, r4, r5
    11a4:	10a4      	asrs	r4, r4, #2
    11a6:	42a6      	cmp	r6, r4
    11a8:	d105      	bne.n	11b6 <__libc_init_array+0x2e>
    11aa:	bd70      	pop	{r4, r5, r6, pc}
    11ac:	00b3      	lsls	r3, r6, #2
    11ae:	58eb      	ldr	r3, [r5, r3]
    11b0:	4798      	blx	r3
    11b2:	3601      	adds	r6, #1
    11b4:	e7ee      	b.n	1194 <__libc_init_array+0xc>
    11b6:	00b3      	lsls	r3, r6, #2
    11b8:	58eb      	ldr	r3, [r5, r3]
    11ba:	4798      	blx	r3
    11bc:	3601      	adds	r6, #1
    11be:	e7f2      	b.n	11a6 <__libc_init_array+0x1e>
    11c0:	00001594 	.word	0x00001594
    11c4:	00001594 	.word	0x00001594
    11c8:	00001594 	.word	0x00001594
    11cc:	00001598 	.word	0x00001598

000011d0 <memcpy>:
    11d0:	2300      	movs	r3, #0
    11d2:	b510      	push	{r4, lr}
    11d4:	429a      	cmp	r2, r3
    11d6:	d100      	bne.n	11da <memcpy+0xa>
    11d8:	bd10      	pop	{r4, pc}
    11da:	5ccc      	ldrb	r4, [r1, r3]
    11dc:	54c4      	strb	r4, [r0, r3]
    11de:	3301      	adds	r3, #1
    11e0:	e7f8      	b.n	11d4 <memcpy+0x4>
	...

000011e4 <srand>:
    11e4:	4b10      	ldr	r3, [pc, #64]	; (1228 <srand+0x44>)
    11e6:	b570      	push	{r4, r5, r6, lr}
    11e8:	681c      	ldr	r4, [r3, #0]
    11ea:	0005      	movs	r5, r0
    11ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    11ee:	2b00      	cmp	r3, #0
    11f0:	d115      	bne.n	121e <srand+0x3a>
    11f2:	2018      	movs	r0, #24
    11f4:	f000 f824 	bl	1240 <malloc>
    11f8:	4b0c      	ldr	r3, [pc, #48]	; (122c <srand+0x48>)
    11fa:	63a0      	str	r0, [r4, #56]	; 0x38
    11fc:	8003      	strh	r3, [r0, #0]
    11fe:	4b0c      	ldr	r3, [pc, #48]	; (1230 <srand+0x4c>)
    1200:	2201      	movs	r2, #1
    1202:	8043      	strh	r3, [r0, #2]
    1204:	4b0b      	ldr	r3, [pc, #44]	; (1234 <srand+0x50>)
    1206:	8083      	strh	r3, [r0, #4]
    1208:	4b0b      	ldr	r3, [pc, #44]	; (1238 <srand+0x54>)
    120a:	80c3      	strh	r3, [r0, #6]
    120c:	4b0b      	ldr	r3, [pc, #44]	; (123c <srand+0x58>)
    120e:	8103      	strh	r3, [r0, #8]
    1210:	2305      	movs	r3, #5
    1212:	8143      	strh	r3, [r0, #10]
    1214:	3306      	adds	r3, #6
    1216:	8183      	strh	r3, [r0, #12]
    1218:	2300      	movs	r3, #0
    121a:	6102      	str	r2, [r0, #16]
    121c:	6143      	str	r3, [r0, #20]
    121e:	2200      	movs	r2, #0
    1220:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1222:	611d      	str	r5, [r3, #16]
    1224:	615a      	str	r2, [r3, #20]
    1226:	bd70      	pop	{r4, r5, r6, pc}
    1228:	20000010 	.word	0x20000010
    122c:	0000330e 	.word	0x0000330e
    1230:	ffffabcd 	.word	0xffffabcd
    1234:	00001234 	.word	0x00001234
    1238:	ffffe66d 	.word	0xffffe66d
    123c:	ffffdeec 	.word	0xffffdeec

00001240 <malloc>:
    1240:	b510      	push	{r4, lr}
    1242:	4b03      	ldr	r3, [pc, #12]	; (1250 <malloc+0x10>)
    1244:	0001      	movs	r1, r0
    1246:	6818      	ldr	r0, [r3, #0]
    1248:	f000 f804 	bl	1254 <_malloc_r>
    124c:	bd10      	pop	{r4, pc}
    124e:	46c0      	nop			; (mov r8, r8)
    1250:	20000010 	.word	0x20000010

00001254 <_malloc_r>:
    1254:	2303      	movs	r3, #3
    1256:	b570      	push	{r4, r5, r6, lr}
    1258:	1ccd      	adds	r5, r1, #3
    125a:	439d      	bics	r5, r3
    125c:	3508      	adds	r5, #8
    125e:	0006      	movs	r6, r0
    1260:	2d0c      	cmp	r5, #12
    1262:	d21e      	bcs.n	12a2 <_malloc_r+0x4e>
    1264:	250c      	movs	r5, #12
    1266:	42a9      	cmp	r1, r5
    1268:	d81d      	bhi.n	12a6 <_malloc_r+0x52>
    126a:	0030      	movs	r0, r6
    126c:	f000 f862 	bl	1334 <__malloc_lock>
    1270:	4a25      	ldr	r2, [pc, #148]	; (1308 <_malloc_r+0xb4>)
    1272:	6814      	ldr	r4, [r2, #0]
    1274:	0021      	movs	r1, r4
    1276:	2900      	cmp	r1, #0
    1278:	d119      	bne.n	12ae <_malloc_r+0x5a>
    127a:	4c24      	ldr	r4, [pc, #144]	; (130c <_malloc_r+0xb8>)
    127c:	6823      	ldr	r3, [r4, #0]
    127e:	2b00      	cmp	r3, #0
    1280:	d103      	bne.n	128a <_malloc_r+0x36>
    1282:	0030      	movs	r0, r6
    1284:	f000 f844 	bl	1310 <_sbrk_r>
    1288:	6020      	str	r0, [r4, #0]
    128a:	0029      	movs	r1, r5
    128c:	0030      	movs	r0, r6
    128e:	f000 f83f 	bl	1310 <_sbrk_r>
    1292:	1c43      	adds	r3, r0, #1
    1294:	d12c      	bne.n	12f0 <_malloc_r+0x9c>
    1296:	230c      	movs	r3, #12
    1298:	0030      	movs	r0, r6
    129a:	6033      	str	r3, [r6, #0]
    129c:	f000 f84b 	bl	1336 <__malloc_unlock>
    12a0:	e003      	b.n	12aa <_malloc_r+0x56>
    12a2:	2d00      	cmp	r5, #0
    12a4:	dadf      	bge.n	1266 <_malloc_r+0x12>
    12a6:	230c      	movs	r3, #12
    12a8:	6033      	str	r3, [r6, #0]
    12aa:	2000      	movs	r0, #0
    12ac:	bd70      	pop	{r4, r5, r6, pc}
    12ae:	680b      	ldr	r3, [r1, #0]
    12b0:	1b5b      	subs	r3, r3, r5
    12b2:	d41a      	bmi.n	12ea <_malloc_r+0x96>
    12b4:	2b0b      	cmp	r3, #11
    12b6:	d903      	bls.n	12c0 <_malloc_r+0x6c>
    12b8:	600b      	str	r3, [r1, #0]
    12ba:	18cc      	adds	r4, r1, r3
    12bc:	6025      	str	r5, [r4, #0]
    12be:	e003      	b.n	12c8 <_malloc_r+0x74>
    12c0:	428c      	cmp	r4, r1
    12c2:	d10e      	bne.n	12e2 <_malloc_r+0x8e>
    12c4:	6863      	ldr	r3, [r4, #4]
    12c6:	6013      	str	r3, [r2, #0]
    12c8:	0030      	movs	r0, r6
    12ca:	f000 f834 	bl	1336 <__malloc_unlock>
    12ce:	0020      	movs	r0, r4
    12d0:	2207      	movs	r2, #7
    12d2:	300b      	adds	r0, #11
    12d4:	1d23      	adds	r3, r4, #4
    12d6:	4390      	bics	r0, r2
    12d8:	1ac3      	subs	r3, r0, r3
    12da:	d0e7      	beq.n	12ac <_malloc_r+0x58>
    12dc:	425a      	negs	r2, r3
    12de:	50e2      	str	r2, [r4, r3]
    12e0:	e7e4      	b.n	12ac <_malloc_r+0x58>
    12e2:	684b      	ldr	r3, [r1, #4]
    12e4:	6063      	str	r3, [r4, #4]
    12e6:	000c      	movs	r4, r1
    12e8:	e7ee      	b.n	12c8 <_malloc_r+0x74>
    12ea:	000c      	movs	r4, r1
    12ec:	6849      	ldr	r1, [r1, #4]
    12ee:	e7c2      	b.n	1276 <_malloc_r+0x22>
    12f0:	2303      	movs	r3, #3
    12f2:	1cc4      	adds	r4, r0, #3
    12f4:	439c      	bics	r4, r3
    12f6:	42a0      	cmp	r0, r4
    12f8:	d0e0      	beq.n	12bc <_malloc_r+0x68>
    12fa:	1a21      	subs	r1, r4, r0
    12fc:	0030      	movs	r0, r6
    12fe:	f000 f807 	bl	1310 <_sbrk_r>
    1302:	1c43      	adds	r3, r0, #1
    1304:	d1da      	bne.n	12bc <_malloc_r+0x68>
    1306:	e7c6      	b.n	1296 <_malloc_r+0x42>
    1308:	200000cc 	.word	0x200000cc
    130c:	200000d0 	.word	0x200000d0

00001310 <_sbrk_r>:
    1310:	2300      	movs	r3, #0
    1312:	b570      	push	{r4, r5, r6, lr}
    1314:	4c06      	ldr	r4, [pc, #24]	; (1330 <_sbrk_r+0x20>)
    1316:	0005      	movs	r5, r0
    1318:	0008      	movs	r0, r1
    131a:	6023      	str	r3, [r4, #0]
    131c:	f7ff fc08 	bl	b30 <_sbrk>
    1320:	1c43      	adds	r3, r0, #1
    1322:	d103      	bne.n	132c <_sbrk_r+0x1c>
    1324:	6823      	ldr	r3, [r4, #0]
    1326:	2b00      	cmp	r3, #0
    1328:	d000      	beq.n	132c <_sbrk_r+0x1c>
    132a:	602b      	str	r3, [r5, #0]
    132c:	bd70      	pop	{r4, r5, r6, pc}
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	20000110 	.word	0x20000110

00001334 <__malloc_lock>:
    1334:	4770      	bx	lr

00001336 <__malloc_unlock>:
    1336:	4770      	bx	lr
    1338:	000002be 	.word	0x000002be
    133c:	000002ba 	.word	0x000002ba
    1340:	000002ba 	.word	0x000002ba
    1344:	00000320 	.word	0x00000320
    1348:	00000320 	.word	0x00000320
    134c:	000002d2 	.word	0x000002d2
    1350:	000002c4 	.word	0x000002c4
    1354:	000002d8 	.word	0x000002d8
    1358:	0000030e 	.word	0x0000030e
    135c:	000004e0 	.word	0x000004e0
    1360:	000004c0 	.word	0x000004c0
    1364:	000004c0 	.word	0x000004c0
    1368:	0000054c 	.word	0x0000054c
    136c:	000004d2 	.word	0x000004d2
    1370:	000004ee 	.word	0x000004ee
    1374:	000004c4 	.word	0x000004c4
    1378:	000004fc 	.word	0x000004fc
    137c:	0000053c 	.word	0x0000053c
    1380:	000a000a 	.word	0x000a000a
    1384:	00140014 	.word	0x00140014
    1388:	00000014 	.word	0x00000014
    138c:	000a017c 	.word	0x000a017c
    1390:	000a017c 	.word	0x000a017c
    1394:	00140186 	.word	0x00140186
    1398:	00140000 	.word	0x00140000
    139c:	0122000a 	.word	0x0122000a
    13a0:	00140186 	.word	0x00140186
    13a4:	01220190 	.word	0x01220190
    13a8:	0122000a 	.word	0x0122000a
    13ac:	012c0014 	.word	0x012c0014
    13b0:	0122017c 	.word	0x0122017c
    13b4:	012c0186 	.word	0x012c0186
    13b8:	012c0014 	.word	0x012c0014
    13bc:	0136017c 	.word	0x0136017c
    13c0:	001e0000 	.word	0x001e0000
    13c4:	00280032 	.word	0x00280032
    13c8:	00320000 	.word	0x00320000
    13cc:	003c0032 	.word	0x003c0032
    13d0:	001e0050 	.word	0x001e0050
    13d4:	00280118 	.word	0x00280118
    13d8:	00280046 	.word	0x00280046
    13dc:	00be0050 	.word	0x00be0050
    13e0:	00be0050 	.word	0x00be0050
    13e4:	00c80118 	.word	0x00c80118
    13e8:	00280118 	.word	0x00280118
    13ec:	00be0122 	.word	0x00be0122
    13f0:	00460000 	.word	0x00460000
    13f4:	00500032 	.word	0x00500032
    13f8:	005a0000 	.word	0x005a0000
    13fc:	00640032 	.word	0x00640032
    1400:	006e0000 	.word	0x006e0000
    1404:	00780032 	.word	0x00780032
    1408:	00820000 	.word	0x00820000
    140c:	008c0032 	.word	0x008c0032
    1410:	00960000 	.word	0x00960000
    1414:	00a00032 	.word	0x00a00032
    1418:	00aa0000 	.word	0x00aa0000
    141c:	00b40032 	.word	0x00b40032
    1420:	00be0000 	.word	0x00be0000
    1424:	00c80032 	.word	0x00c80032
    1428:	00c8012c 	.word	0x00c8012c
    142c:	00d20172 	.word	0x00d20172
    1430:	00dc001e 	.word	0x00dc001e
    1434:	00e60172 	.word	0x00e60172
    1438:	00f0001e 	.word	0x00f0001e
    143c:	00fa0172 	.word	0x00fa0172
    1440:	0104001e 	.word	0x0104001e
    1444:	010e0172 	.word	0x010e0172
    1448:	0118005a 	.word	0x0118005a
    144c:	0122012c 	.word	0x0122012c
    1450:	82be50b4 	.word	0x82be50b4
    1454:	8cbe82aa 	.word	0x8cbe82aa
    1458:	64963c8c 	.word	0x64963c8c
    145c:	64dc3cd2 	.word	0x64dc3cd2
    1460:	a08c9682 	.word	0xa08c9682
    1464:	aadca08c 	.word	0xaadca08c
    1468:	a0e696dc 	.word	0xa0e696dc
    146c:	50f03c78 	.word	0x50f03c78
    1470:	5a78466e 	.word	0x5a78466e
    1474:	aaaa3c96 	.word	0xaaaa3c96
    1478:	a0dc3cc8 	.word	0xa0dc3cc8
    147c:	aae6a0d2 	.word	0xaae6a0d2

00001480 <beelzebub.12726>:
    1480:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    1490:	64012201 d4019201 08020702 5f023402     .".d.........4._
    14a0:	94027802 bb02a602 f902db02 7f031f03     .x..............

000014b0 <belial.12723>:
    14b0:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    14c0:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    14d0:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    14e0:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    14f0:	35c9c9c9 0000363a                       ...5:6..

000014f8 <lucifer.12725>:
    14f8:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    1508:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    1518:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    1528:	00cc0008 01707005 02030303 02d00000     .....pp.........
    1538:	00505050 00000055                       PPP.U...

00001540 <mulciber.12724>:
    1540:	03020100 02010004 00020100 01000201     ................
    1550:	02010002 00020100 01000201 01000002     ................
    1560:	02010000 00020100 01000201 03020100     ................
    1570:	00000004 01000100 01000302 02010002     ................
    1580:	00000403 00000000                       ........

00001588 <_init>:
    1588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    158e:	bc08      	pop	{r3}
    1590:	469e      	mov	lr, r3
    1592:	4770      	bx	lr

00001594 <__init_array_start>:
    1594:	000000dd 	.word	0x000000dd

00001598 <_fini>:
    1598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    159e:	bc08      	pop	{r3}
    15a0:	469e      	mov	lr, r3
    15a2:	4770      	bx	lr

000015a4 <__fini_array_start>:
    15a4:	000000b5 	.word	0x000000b5
