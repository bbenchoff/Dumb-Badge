
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008278  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000208  20000000  00008278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f20  20000208  00008480  00020208  2**2
                  ALLOC
  3 .stack        00002000  20003128  0000b3a0  00020208  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003de57  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d5f  00000000  00000000  0005e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000077f1  00000000  00000000  00063e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008f0  00000000  00000000  0006b630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b00  00000000  00000000  0006bf20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fb99  00000000  00000000  0006ca20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000153f2  00000000  00000000  0008c5b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000906ea  00000000  00000000  000a19ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ef8  00000000  00000000  00132098  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	28 51 00 20 c5 32 00 00 c1 32 00 00 c1 32 00 00     (Q. .2...2...2..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	c1 32 00 00 00 00 00 00 00 00 00 00 c1 32 00 00     .2...........2..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	41 44 00 00 c1 32 00 00 c1 32 00 00 c1 32 00 00     AD...2...2...2..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	c1 32 00 00 c1 32 00 00 c1 32 00 00 c1 32 00 00     .2...2...2...2..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	c1 32 00 00 c1 32 00 00 dd 24 00 00 ed 24 00 00     .2...2...$...$..
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	fd 24 00 00 0d 25 00 00 1d 25 00 00 2d 25 00 00     .$...%...%..-%..
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	c1 32 00 00 c1 32 00 00 c1 32 00 00 c1 32 00 00     .2...2...2...2..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	c1 32 00 00 c1 32 00 00 c1 32 00 00 c1 32 00 00     .2...2...2...2..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	11 20 00 00 c1 32 00 00 c1 32 00 00 c1 32 00 00     . ...2...2...2..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	c1 32 00 00 00 00 00 00                             .2......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000208 	.word	0x20000208
      d4:	00000000 	.word	0x00000000
      d8:	00008278 	.word	0x00008278

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000020c 	.word	0x2000020c
     108:	00008278 	.word	0x00008278
     10c:	00008278 	.word	0x00008278
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	00004bd9 	.word	0x00004bd9

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	00004af9 	.word	0x00004af9

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	00004af9 	.word	0x00004af9

000001d0 <isEmptyParser>:
int rearParam = -1;
int rearParser = -1;

bool isEmptyParser(void)
{
	if(frontParser == -1)
     1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <isEmptyParser+0x10>)
     1d2:	6818      	ldr	r0, [r3, #0]
     1d4:	3001      	adds	r0, #1
     1d6:	4243      	negs	r3, r0
     1d8:	4158      	adcs	r0, r3
     1da:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     1dc:	4770      	bx	lr
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	20000008 	.word	0x20000008

000001e4 <dequeueParser>:
}
char dequeueParser(void)
{
	char temp;
	
	temp = queueParser[frontParser];
     1e4:	4a08      	ldr	r2, [pc, #32]	; (208 <dequeueParser+0x24>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	4908      	ldr	r1, [pc, #32]	; (20c <dequeueParser+0x28>)
     1ea:	5cc8      	ldrb	r0, [r1, r3]
	frontParser++;
     1ec:	3301      	adds	r3, #1
     1ee:	6013      	str	r3, [r2, #0]
	if(frontParser > rearParser)
     1f0:	4a07      	ldr	r2, [pc, #28]	; (210 <dequeueParser+0x2c>)
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	4293      	cmp	r3, r2
     1f6:	dd05      	ble.n	204 <dequeueParser+0x20>
	{
		frontParser = rearParser = -1;
     1f8:	2301      	movs	r3, #1
     1fa:	425b      	negs	r3, r3
     1fc:	4a04      	ldr	r2, [pc, #16]	; (210 <dequeueParser+0x2c>)
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <dequeueParser+0x24>)
     202:	6013      	str	r3, [r2, #0]
	}
	return temp;
}
     204:	4770      	bx	lr
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000008 	.word	0x20000008
     20c:	200002fc 	.word	0x200002fc
     210:	20000010 	.word	0x20000010

00000214 <enqueueParser>:
void enqueueParser(char data)
{
	if(frontParser == -1)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <enqueueParser+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	3301      	adds	r3, #1
     21a:	d006      	beq.n	22a <enqueueParser+0x16>
	{
		frontParser = 0;
	}
	rearParser++;
     21c:	4a06      	ldr	r2, [pc, #24]	; (238 <enqueueParser+0x24>)
     21e:	6813      	ldr	r3, [r2, #0]
     220:	3301      	adds	r3, #1
     222:	6013      	str	r3, [r2, #0]
	queueParser[rearParser] = data;
     224:	4a05      	ldr	r2, [pc, #20]	; (23c <enqueueParser+0x28>)
     226:	54d0      	strb	r0, [r2, r3]
}
     228:	4770      	bx	lr
		frontParser = 0;
     22a:	2200      	movs	r2, #0
     22c:	4b01      	ldr	r3, [pc, #4]	; (234 <enqueueParser+0x20>)
     22e:	601a      	str	r2, [r3, #0]
     230:	e7f4      	b.n	21c <enqueueParser+0x8>
     232:	46c0      	nop			; (mov r8, r8)
     234:	20000008 	.word	0x20000008
     238:	20000010 	.word	0x20000010
     23c:	200002fc 	.word	0x200002fc

00000240 <isEmptyParam>:
bool isEmptyParam(void)
{
	if(frontParam == -1)
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <isEmptyParam+0x10>)
     242:	6818      	ldr	r0, [r3, #0]
     244:	3001      	adds	r0, #1
     246:	4243      	negs	r3, r0
     248:	4158      	adcs	r0, r3
     24a:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     24c:	4770      	bx	lr
     24e:	46c0      	nop			; (mov r8, r8)
     250:	20000004 	.word	0x20000004

00000254 <dequeueParam>:
}
uint8_t dequeueParam(void)
{
	uint8_t temp;
	
	temp = queueParam[frontParam];
     254:	4a08      	ldr	r2, [pc, #32]	; (278 <dequeueParam+0x24>)
     256:	6813      	ldr	r3, [r2, #0]
     258:	4908      	ldr	r1, [pc, #32]	; (27c <dequeueParam+0x28>)
     25a:	5cc8      	ldrb	r0, [r1, r3]
	frontParam++;
     25c:	3301      	adds	r3, #1
     25e:	6013      	str	r3, [r2, #0]
	if(frontParam > rearParam)
     260:	4a07      	ldr	r2, [pc, #28]	; (280 <dequeueParam+0x2c>)
     262:	6812      	ldr	r2, [r2, #0]
     264:	4293      	cmp	r3, r2
     266:	dd05      	ble.n	274 <dequeueParam+0x20>
	{
		frontParam = rearParam = -1;
     268:	2301      	movs	r3, #1
     26a:	425b      	negs	r3, r3
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <dequeueParam+0x2c>)
     26e:	6013      	str	r3, [r2, #0]
     270:	4a01      	ldr	r2, [pc, #4]	; (278 <dequeueParam+0x24>)
     272:	6013      	str	r3, [r2, #0]
	}

	return temp;
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	20000004 	.word	0x20000004
     27c:	20000330 	.word	0x20000330
     280:	2000000c 	.word	0x2000000c

00000284 <enqueueParam>:
void enqueueParam(uint8_t data)
{

	if(frontParam == -1)
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <enqueueParam+0x20>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	3301      	adds	r3, #1
     28a:	d006      	beq.n	29a <enqueueParam+0x16>
	{
		frontParam = 0;
	}
	rearParam++;
     28c:	4a06      	ldr	r2, [pc, #24]	; (2a8 <enqueueParam+0x24>)
     28e:	6813      	ldr	r3, [r2, #0]
     290:	3301      	adds	r3, #1
     292:	6013      	str	r3, [r2, #0]
	queueParam[rearParam] = data;
     294:	4a05      	ldr	r2, [pc, #20]	; (2ac <enqueueParam+0x28>)
     296:	54d0      	strb	r0, [r2, r3]
}
     298:	4770      	bx	lr
		frontParam = 0;
     29a:	2200      	movs	r2, #0
     29c:	4b01      	ldr	r3, [pc, #4]	; (2a4 <enqueueParam+0x20>)
     29e:	601a      	str	r2, [r3, #0]
     2a0:	e7f4      	b.n	28c <enqueueParam+0x8>
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	20000004 	.word	0x20000004
     2a8:	2000000c 	.word	0x2000000c
     2ac:	20000330 	.word	0x20000330

000002b0 <clearQueues>:
void clearQueues(void)
{
     2b0:	b530      	push	{r4, r5, lr}

	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <clearQueues+0x3c>)
     2b4:	6818      	ldr	r0, [r3, #0]
     2b6:	1e43      	subs	r3, r0, #1
     2b8:	2b00      	cmp	r3, #0
     2ba:	dd0b      	ble.n	2d4 <clearQueues+0x24>
     2bc:	0018      	movs	r0, r3
     2be:	2300      	movs	r3, #0
	{
		queueParam[i] = 0;
     2c0:	4d0b      	ldr	r5, [pc, #44]	; (2f0 <clearQueues+0x40>)
     2c2:	2200      	movs	r2, #0
		queueParser[i] = 0;
     2c4:	4c0b      	ldr	r4, [pc, #44]	; (2f4 <clearQueues+0x44>)
		queueParam[i] = 0;
     2c6:	1959      	adds	r1, r3, r5
     2c8:	700a      	strb	r2, [r1, #0]
		queueParser[i] = 0;
     2ca:	1919      	adds	r1, r3, r4
     2cc:	700a      	strb	r2, [r1, #0]
	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2ce:	3301      	adds	r3, #1
     2d0:	4283      	cmp	r3, r0
     2d2:	d1f8      	bne.n	2c6 <clearQueues+0x16>
	}
	
	frontParser = -1;
     2d4:	2301      	movs	r3, #1
     2d6:	425b      	negs	r3, r3
     2d8:	4a07      	ldr	r2, [pc, #28]	; (2f8 <clearQueues+0x48>)
     2da:	6013      	str	r3, [r2, #0]
	frontParam = -1;
     2dc:	4a07      	ldr	r2, [pc, #28]	; (2fc <clearQueues+0x4c>)
     2de:	6013      	str	r3, [r2, #0]
	rearParam = -1;
     2e0:	4a07      	ldr	r2, [pc, #28]	; (300 <clearQueues+0x50>)
     2e2:	6013      	str	r3, [r2, #0]
	rearParser = -1;
     2e4:	4a07      	ldr	r2, [pc, #28]	; (304 <clearQueues+0x54>)
     2e6:	6013      	str	r3, [r2, #0]
}
     2e8:	bd30      	pop	{r4, r5, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	20000000 	.word	0x20000000
     2f0:	20000330 	.word	0x20000330
     2f4:	200002fc 	.word	0x200002fc
     2f8:	20000008 	.word	0x20000008
     2fc:	20000004 	.word	0x20000004
     300:	2000000c 	.word	0x2000000c
     304:	20000010 	.word	0x20000010

00000308 <queueTransmogrifier>:
void queueTransmogrifier(void)
{
     308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	[24],[80]
	
	It's like reimplementing atoi() but it's not an interview question.
	*/
	
	int param = 0;
     30a:	2500      	movs	r5, #0
	char currentByte;
	
	while(!isEmptyParser())
     30c:	4e0c      	ldr	r6, [pc, #48]	; (340 <queueTransmogrifier+0x38>)
	{
		
		currentByte = dequeueParser();		//deque from parser
     30e:	4f0d      	ldr	r7, [pc, #52]	; (344 <queueTransmogrifier+0x3c>)

		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
		{
			enqueueParam(param);
     310:	4c0d      	ldr	r4, [pc, #52]	; (348 <queueTransmogrifier+0x40>)
	while(!isEmptyParser())
     312:	e002      	b.n	31a <queueTransmogrifier+0x12>
			enqueueParam(param);
     314:	b2e8      	uxtb	r0, r5
     316:	47a0      	blx	r4
			param = 0;
     318:	2500      	movs	r5, #0
	while(!isEmptyParser())
     31a:	47b0      	blx	r6
     31c:	2800      	cmp	r0, #0
     31e:	d10a      	bne.n	336 <queueTransmogrifier+0x2e>
		currentByte = dequeueParser();		//deque from parser
     320:	47b8      	blx	r7
		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
     322:	23fb      	movs	r3, #251	; 0xfb
     324:	4003      	ands	r3, r0
     326:	2b3b      	cmp	r3, #59	; 0x3b
     328:	d0f4      	beq.n	314 <queueTransmogrifier+0xc>
		}
		else
		{
			param = (10 * param) + (int)(currentByte-48);
     32a:	00ab      	lsls	r3, r5, #2
     32c:	195d      	adds	r5, r3, r5
     32e:	006d      	lsls	r5, r5, #1
     330:	3830      	subs	r0, #48	; 0x30
     332:	1945      	adds	r5, r0, r5
     334:	e7f1      	b.n	31a <queueTransmogrifier+0x12>
		}
	}
	enqueueParam(param);
     336:	b2e8      	uxtb	r0, r5
     338:	4b03      	ldr	r3, [pc, #12]	; (348 <queueTransmogrifier+0x40>)
     33a:	4798      	blx	r3
}
     33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	000001d1 	.word	0x000001d1
     344:	000001e5 	.word	0x000001e5
     348:	00000285 	.word	0x00000285

0000034c <CSIignoreState>:
	}
}

void CSIignoreState(uint8_t character)
{
	if(character == 0x1B)
     34c:	281b      	cmp	r0, #27
     34e:	d006      	beq.n	35e <CSIignoreState+0x12>
	{
		currentState = stateESC;
	}
	else if(character >= 0x40 && character <= 0x7E)
     350:	3840      	subs	r0, #64	; 0x40
     352:	283e      	cmp	r0, #62	; 0x3e
     354:	d802      	bhi.n	35c <CSIignoreState+0x10>
	{
		currentState = stateGround;
     356:	2200      	movs	r2, #0
     358:	4b03      	ldr	r3, [pc, #12]	; (368 <CSIignoreState+0x1c>)
     35a:	701a      	strb	r2, [r3, #0]
	}
}
     35c:	4770      	bx	lr
		currentState = stateESC;
     35e:	2201      	movs	r2, #1
     360:	4b01      	ldr	r3, [pc, #4]	; (368 <CSIignoreState+0x1c>)
     362:	701a      	strb	r2, [r3, #0]
     364:	e7fa      	b.n	35c <CSIignoreState+0x10>
     366:	46c0      	nop			; (mov r8, r8)
     368:	200002ed 	.word	0x200002ed

0000036c <SC>:
/************************************************************************/

void SC()
{
	//Save cursor position
	DECSCX = xCharPos;
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <SC+0x18>)
     36e:	881a      	ldrh	r2, [r3, #0]
     370:	4b05      	ldr	r3, [pc, #20]	; (388 <SC+0x1c>)
     372:	701a      	strb	r2, [r3, #0]
	DECSCY = yCharPos;
     374:	4b05      	ldr	r3, [pc, #20]	; (38c <SC+0x20>)
     376:	881a      	ldrh	r2, [r3, #0]
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <SC+0x24>)
     37a:	701a      	strb	r2, [r3, #0]
	currentState = stateGround;
     37c:	2200      	movs	r2, #0
     37e:	4b05      	ldr	r3, [pc, #20]	; (394 <SC+0x28>)
     380:	701a      	strb	r2, [r3, #0]
}
     382:	4770      	bx	lr
     384:	200002e8 	.word	0x200002e8
     388:	20000224 	.word	0x20000224
     38c:	200002ea 	.word	0x200002ea
     390:	20000225 	.word	0x20000225
     394:	200002ed 	.word	0x200002ed

00000398 <RC>:

void RC()
{
     398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Restore cursor to saved position
	
	char tempCharacter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     39a:	4c0f      	ldr	r4, [pc, #60]	; (3d8 <RC+0x40>)
     39c:	4f0f      	ldr	r7, [pc, #60]	; (3dc <RC+0x44>)
     39e:	883a      	ldrh	r2, [r7, #0]
     3a0:	4e0f      	ldr	r6, [pc, #60]	; (3e0 <RC+0x48>)
     3a2:	8831      	ldrh	r1, [r6, #0]
     3a4:	0053      	lsls	r3, r2, #1
     3a6:	189b      	adds	r3, r3, r2
     3a8:	00db      	lsls	r3, r3, #3
     3aa:	18e3      	adds	r3, r4, r3
     3ac:	5c58      	ldrb	r0, [r3, r1]
     3ae:	4d0d      	ldr	r5, [pc, #52]	; (3e4 <RC+0x4c>)
     3b0:	47a8      	blx	r5
	xCharPos = DECSCX;
     3b2:	4b0d      	ldr	r3, [pc, #52]	; (3e8 <RC+0x50>)
     3b4:	781a      	ldrb	r2, [r3, #0]
     3b6:	803a      	strh	r2, [r7, #0]
	yCharPos = DECSCY;
     3b8:	4b0c      	ldr	r3, [pc, #48]	; (3ec <RC+0x54>)
     3ba:	7819      	ldrb	r1, [r3, #0]
     3bc:	8031      	strh	r1, [r6, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     3be:	0053      	lsls	r3, r2, #1
     3c0:	189b      	adds	r3, r3, r2
     3c2:	00db      	lsls	r3, r3, #3
     3c4:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     3c6:	5c58      	ldrb	r0, [r3, r1]
     3c8:	47a8      	blx	r5
	blinkCursor();
     3ca:	4b09      	ldr	r3, [pc, #36]	; (3f0 <RC+0x58>)
     3cc:	4798      	blx	r3
	currentState = stateGround;
     3ce:	2200      	movs	r2, #0
     3d0:	4b08      	ldr	r3, [pc, #32]	; (3f4 <RC+0x5c>)
     3d2:	701a      	strb	r2, [r3, #0]
}
     3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	200003f8 	.word	0x200003f8
     3dc:	200002e8 	.word	0x200002e8
     3e0:	200002ea 	.word	0x200002ea
     3e4:	00003479 	.word	0x00003479
     3e8:	20000224 	.word	0x20000224
     3ec:	20000225 	.word	0x20000225
     3f0:	000035f9 	.word	0x000035f9
     3f4:	200002ed 	.word	0x200002ed

000003f8 <IND>:

void IND()
{
     3f8:	b570      	push	{r4, r5, r6, lr}
	//performs newline() if row = 24
	
	char tempCharacter;
	int xTemp = 0;
	
	if(yCharPos < 23)
     3fa:	4b19      	ldr	r3, [pc, #100]	; (460 <IND+0x68>)
     3fc:	881a      	ldrh	r2, [r3, #0]
     3fe:	2a16      	cmp	r2, #22
     400:	d914      	bls.n	42c <IND+0x34>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		xTemp = xCharPos;
     402:	4d18      	ldr	r5, [pc, #96]	; (464 <IND+0x6c>)
     404:	882c      	ldrh	r4, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     406:	0063      	lsls	r3, r4, #1
     408:	191b      	adds	r3, r3, r4
     40a:	00db      	lsls	r3, r3, #3
     40c:	4916      	ldr	r1, [pc, #88]	; (468 <IND+0x70>)
     40e:	18cb      	adds	r3, r1, r3
     410:	5c98      	ldrb	r0, [r3, r2]
     412:	4e16      	ldr	r6, [pc, #88]	; (46c <IND+0x74>)
     414:	47b0      	blx	r6
		newLine();
     416:	4b16      	ldr	r3, [pc, #88]	; (470 <IND+0x78>)
     418:	4798      	blx	r3
		drawChar(0x00);
     41a:	2000      	movs	r0, #0
     41c:	47b0      	blx	r6
		xCharPos = xTemp;
     41e:	802c      	strh	r4, [r5, #0]
		blinkCursor();
     420:	4b14      	ldr	r3, [pc, #80]	; (474 <IND+0x7c>)
     422:	4798      	blx	r3
	}
		
		currentState = stateGround;	
     424:	2200      	movs	r2, #0
     426:	4b14      	ldr	r3, [pc, #80]	; (478 <IND+0x80>)
     428:	701a      	strb	r2, [r3, #0]
}
     42a:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     42c:	4c0e      	ldr	r4, [pc, #56]	; (468 <IND+0x70>)
     42e:	4d0d      	ldr	r5, [pc, #52]	; (464 <IND+0x6c>)
     430:	8829      	ldrh	r1, [r5, #0]
     432:	004b      	lsls	r3, r1, #1
     434:	185b      	adds	r3, r3, r1
     436:	00db      	lsls	r3, r3, #3
     438:	18e3      	adds	r3, r4, r3
     43a:	5c98      	ldrb	r0, [r3, r2]
     43c:	4e0b      	ldr	r6, [pc, #44]	; (46c <IND+0x74>)
     43e:	47b0      	blx	r6
		yCharPos++;
     440:	4a07      	ldr	r2, [pc, #28]	; (460 <IND+0x68>)
     442:	8813      	ldrh	r3, [r2, #0]
     444:	3301      	adds	r3, #1
     446:	b29b      	uxth	r3, r3
     448:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     44a:	8829      	ldrh	r1, [r5, #0]
     44c:	004a      	lsls	r2, r1, #1
     44e:	1852      	adds	r2, r2, r1
     450:	00d2      	lsls	r2, r2, #3
     452:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     454:	5ce0      	ldrb	r0, [r4, r3]
     456:	47b0      	blx	r6
		blinkCursor();
     458:	4b06      	ldr	r3, [pc, #24]	; (474 <IND+0x7c>)
     45a:	4798      	blx	r3
     45c:	e7e2      	b.n	424 <IND+0x2c>
     45e:	46c0      	nop			; (mov r8, r8)
     460:	200002ea 	.word	0x200002ea
     464:	200002e8 	.word	0x200002e8
     468:	200003f8 	.word	0x200003f8
     46c:	00003479 	.word	0x00003479
     470:	00003755 	.word	0x00003755
     474:	000035f9 	.word	0x000035f9
     478:	200002ed 	.word	0x200002ed

0000047c <NEL>:

void NEL()
{
     47c:	b570      	push	{r4, r5, r6, lr}
	//new line, moves down one line and to the
	//first column (CR,LF) scrolls if row = 24
	
	char tempCharacter;
	
	if(yCharPos < 23)
     47e:	4b18      	ldr	r3, [pc, #96]	; (4e0 <NEL+0x64>)
     480:	881a      	ldrh	r2, [r3, #0]
     482:	2a16      	cmp	r2, #22
     484:	d915      	bls.n	4b2 <NEL+0x36>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     486:	4c17      	ldr	r4, [pc, #92]	; (4e4 <NEL+0x68>)
     488:	8821      	ldrh	r1, [r4, #0]
     48a:	004b      	lsls	r3, r1, #1
     48c:	185b      	adds	r3, r3, r1
     48e:	00db      	lsls	r3, r3, #3
     490:	4915      	ldr	r1, [pc, #84]	; (4e8 <NEL+0x6c>)
     492:	18cb      	adds	r3, r1, r3
     494:	5c98      	ldrb	r0, [r3, r2]
     496:	4d15      	ldr	r5, [pc, #84]	; (4ec <NEL+0x70>)
     498:	47a8      	blx	r5
		newLine();
     49a:	4b15      	ldr	r3, [pc, #84]	; (4f0 <NEL+0x74>)
     49c:	4798      	blx	r3
		drawChar(0x00);
     49e:	2000      	movs	r0, #0
     4a0:	47a8      	blx	r5
		xCharPos = 0;
     4a2:	2300      	movs	r3, #0
     4a4:	8023      	strh	r3, [r4, #0]
		blinkCursor();
     4a6:	4b13      	ldr	r3, [pc, #76]	; (4f4 <NEL+0x78>)
     4a8:	4798      	blx	r3
	}
		
	currentState = stateGround;
     4aa:	2200      	movs	r2, #0
     4ac:	4b12      	ldr	r3, [pc, #72]	; (4f8 <NEL+0x7c>)
     4ae:	701a      	strb	r2, [r3, #0]
}
     4b0:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4b2:	4c0d      	ldr	r4, [pc, #52]	; (4e8 <NEL+0x6c>)
     4b4:	4d0b      	ldr	r5, [pc, #44]	; (4e4 <NEL+0x68>)
     4b6:	8829      	ldrh	r1, [r5, #0]
     4b8:	004b      	lsls	r3, r1, #1
     4ba:	185b      	adds	r3, r3, r1
     4bc:	00db      	lsls	r3, r3, #3
     4be:	18e3      	adds	r3, r4, r3
     4c0:	5c98      	ldrb	r0, [r3, r2]
     4c2:	4e0a      	ldr	r6, [pc, #40]	; (4ec <NEL+0x70>)
     4c4:	47b0      	blx	r6
		yCharPos++;
     4c6:	4a06      	ldr	r2, [pc, #24]	; (4e0 <NEL+0x64>)
     4c8:	8813      	ldrh	r3, [r2, #0]
     4ca:	3301      	adds	r3, #1
     4cc:	b29b      	uxth	r3, r3
     4ce:	8013      	strh	r3, [r2, #0]
		xCharPos = 0;
     4d0:	2200      	movs	r2, #0
     4d2:	802a      	strh	r2, [r5, #0]
		drawChar(tempCharacter);
     4d4:	5ce0      	ldrb	r0, [r4, r3]
     4d6:	47b0      	blx	r6
		blinkCursor();
     4d8:	4b06      	ldr	r3, [pc, #24]	; (4f4 <NEL+0x78>)
     4da:	4798      	blx	r3
     4dc:	e7e5      	b.n	4aa <NEL+0x2e>
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	200002ea 	.word	0x200002ea
     4e4:	200002e8 	.word	0x200002e8
     4e8:	200003f8 	.word	0x200003f8
     4ec:	00003479 	.word	0x00003479
     4f0:	00003755 	.word	0x00003755
     4f4:	000035f9 	.word	0x000035f9
     4f8:	200002ed 	.word	0x200002ed

000004fc <RI>:

void RI()
{
     4fc:	b570      	push	{r4, r5, r6, lr}
	//Reverse Index
	//Moves the cursor to the same horizontal position on the preceding line
	
	char tempCharacter;
	
	if(yCharPos == 0)
     4fe:	4b10      	ldr	r3, [pc, #64]	; (540 <RI+0x44>)
     500:	881a      	ldrh	r2, [r3, #0]
     502:	2a00      	cmp	r2, #0
     504:	d103      	bne.n	50e <RI+0x12>
		yCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     506:	2200      	movs	r2, #0
     508:	4b0e      	ldr	r3, [pc, #56]	; (544 <RI+0x48>)
     50a:	701a      	strb	r2, [r3, #0]
}
     50c:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     50e:	4c0e      	ldr	r4, [pc, #56]	; (548 <RI+0x4c>)
     510:	4d0e      	ldr	r5, [pc, #56]	; (54c <RI+0x50>)
     512:	8829      	ldrh	r1, [r5, #0]
     514:	004b      	lsls	r3, r1, #1
     516:	185b      	adds	r3, r3, r1
     518:	00db      	lsls	r3, r3, #3
     51a:	18e3      	adds	r3, r4, r3
     51c:	5c98      	ldrb	r0, [r3, r2]
     51e:	4e0c      	ldr	r6, [pc, #48]	; (550 <RI+0x54>)
     520:	47b0      	blx	r6
		yCharPos--;
     522:	4a07      	ldr	r2, [pc, #28]	; (540 <RI+0x44>)
     524:	8813      	ldrh	r3, [r2, #0]
     526:	3b01      	subs	r3, #1
     528:	b29b      	uxth	r3, r3
     52a:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     52c:	8829      	ldrh	r1, [r5, #0]
     52e:	004a      	lsls	r2, r1, #1
     530:	1852      	adds	r2, r2, r1
     532:	00d2      	lsls	r2, r2, #3
     534:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     536:	5ce0      	ldrb	r0, [r4, r3]
     538:	47b0      	blx	r6
		blinkCursor();
     53a:	4b06      	ldr	r3, [pc, #24]	; (554 <RI+0x58>)
     53c:	4798      	blx	r3
     53e:	e7e2      	b.n	506 <RI+0xa>
     540:	200002ea 	.word	0x200002ea
     544:	200002ed 	.word	0x200002ed
     548:	200003f8 	.word	0x200003f8
     54c:	200002e8 	.word	0x200002e8
     550:	00003479 	.word	0x00003479
     554:	000035f9 	.word	0x000035f9

00000558 <RIS>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     558:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     55c:	4a03      	ldr	r2, [pc, #12]	; (56c <RIS+0x14>)
     55e:	4b04      	ldr	r3, [pc, #16]	; (570 <RIS+0x18>)
     560:	60da      	str	r2, [r3, #12]
     562:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     566:	46c0      	nop			; (mov r8, r8)
     568:	e7fd      	b.n	566 <RIS+0xe>
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	05fa0004 	.word	0x05fa0004
     570:	e000ed00 	.word	0xe000ed00

00000574 <escState>:
{
     574:	b510      	push	{r4, lr}
	if(character == 0x37)		//ESC + 7 - (DECSC) -
     576:	2837      	cmp	r0, #55	; 0x37
     578:	d021      	beq.n	5be <escState+0x4a>
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     57a:	2838      	cmp	r0, #56	; 0x38
     57c:	d022      	beq.n	5c4 <escState+0x50>
	else if(character == 0x44)		//ESC + D - (IND) - 
     57e:	2844      	cmp	r0, #68	; 0x44
     580:	d023      	beq.n	5ca <escState+0x56>
	else if(character == 0x45)		//ESC + E - (NEL) -
     582:	2845      	cmp	r0, #69	; 0x45
     584:	d024      	beq.n	5d0 <escState+0x5c>
	else if(character == 0x48)		//ESC + H - (HTS) - 
     586:	2848      	cmp	r0, #72	; 0x48
     588:	d025      	beq.n	5d6 <escState+0x62>
	else if(character == 0x4D)		//ESC + M - (RI)
     58a:	284d      	cmp	r0, #77	; 0x4d
     58c:	d027      	beq.n	5de <escState+0x6a>
	else if(character == 0x59)		//ESC + Z (DECID)
     58e:	2859      	cmp	r0, #89	; 0x59
     590:	d028      	beq.n	5e4 <escState+0x70>
	else if(character == 0x63)		//ESC + c - (RIS)
     592:	2863      	cmp	r0, #99	; 0x63
     594:	d02e      	beq.n	5f4 <escState+0x80>
	else if(character == 0x3E)		//ESC >
     596:	283e      	cmp	r0, #62	; 0x3e
     598:	d02e      	beq.n	5f8 <escState+0x84>
	else if(character == 0x3D)		//ESC =
     59a:	283d      	cmp	r0, #61	; 0x3d
     59c:	d030      	beq.n	600 <escState+0x8c>
	else if(character == 0x5D)		//ESC ]
     59e:	285d      	cmp	r0, #93	; 0x5d
     5a0:	d032      	beq.n	608 <escState+0x94>
	else if(character == 0x23 || character == 0x25 || character == 0x28 ||
     5a2:	22fd      	movs	r2, #253	; 0xfd
     5a4:	0003      	movs	r3, r0
     5a6:	3b23      	subs	r3, #35	; 0x23
     5a8:	4213      	tst	r3, r2
     5aa:	d031      	beq.n	610 <escState+0x9c>
     5ac:	3b05      	subs	r3, #5
     5ae:	2b01      	cmp	r3, #1
     5b0:	d92e      	bls.n	610 <escState+0x9c>
	else if(character == 0x5B)
     5b2:	285b      	cmp	r0, #91	; 0x5b
     5b4:	d032      	beq.n	61c <escState+0xa8>
		currentState = stateGround;
     5b6:	2200      	movs	r2, #0
     5b8:	4b1a      	ldr	r3, [pc, #104]	; (624 <escState+0xb0>)
     5ba:	701a      	strb	r2, [r3, #0]
}
     5bc:	e02d      	b.n	61a <escState+0xa6>
		SC();
     5be:	4b1a      	ldr	r3, [pc, #104]	; (628 <escState+0xb4>)
     5c0:	4798      	blx	r3
     5c2:	e02a      	b.n	61a <escState+0xa6>
		RC();
     5c4:	4b19      	ldr	r3, [pc, #100]	; (62c <escState+0xb8>)
     5c6:	4798      	blx	r3
     5c8:	e027      	b.n	61a <escState+0xa6>
		IND();			
     5ca:	4b19      	ldr	r3, [pc, #100]	; (630 <escState+0xbc>)
     5cc:	4798      	blx	r3
     5ce:	e024      	b.n	61a <escState+0xa6>
		NEL();
     5d0:	4b18      	ldr	r3, [pc, #96]	; (634 <escState+0xc0>)
     5d2:	4798      	blx	r3
     5d4:	e021      	b.n	61a <escState+0xa6>
}

void HTS()
{
	//set tab stop at current column, unsupported now
	currentState = stateGround;
     5d6:	2200      	movs	r2, #0
     5d8:	4b12      	ldr	r3, [pc, #72]	; (624 <escState+0xb0>)
     5da:	701a      	strb	r2, [r3, #0]
     5dc:	e01d      	b.n	61a <escState+0xa6>
		RI();
     5de:	4b16      	ldr	r3, [pc, #88]	; (638 <escState+0xc4>)
     5e0:	4798      	blx	r3
     5e2:	e01a      	b.n	61a <escState+0xa6>
		printf("%s",DECIDreturn);
     5e4:	4915      	ldr	r1, [pc, #84]	; (63c <escState+0xc8>)
     5e6:	4816      	ldr	r0, [pc, #88]	; (640 <escState+0xcc>)
     5e8:	4b16      	ldr	r3, [pc, #88]	; (644 <escState+0xd0>)
     5ea:	4798      	blx	r3
		currentState = stateGround;
     5ec:	2200      	movs	r2, #0
     5ee:	4b0d      	ldr	r3, [pc, #52]	; (624 <escState+0xb0>)
     5f0:	701a      	strb	r2, [r3, #0]
     5f2:	e012      	b.n	61a <escState+0xa6>
		RIS();
     5f4:	4b14      	ldr	r3, [pc, #80]	; (648 <escState+0xd4>)
     5f6:	4798      	blx	r3
		currentState = stateGround;
     5f8:	2200      	movs	r2, #0
     5fa:	4b0a      	ldr	r3, [pc, #40]	; (624 <escState+0xb0>)
     5fc:	701a      	strb	r2, [r3, #0]
     5fe:	e00c      	b.n	61a <escState+0xa6>
		currentState = stateGround;
     600:	2200      	movs	r2, #0
     602:	4b08      	ldr	r3, [pc, #32]	; (624 <escState+0xb0>)
     604:	701a      	strb	r2, [r3, #0]
     606:	e008      	b.n	61a <escState+0xa6>
		currentState = stateGround;
     608:	2200      	movs	r2, #0
     60a:	4b06      	ldr	r3, [pc, #24]	; (624 <escState+0xb0>)
     60c:	701a      	strb	r2, [r3, #0]
     60e:	e004      	b.n	61a <escState+0xa6>
		stateEnterBuffer = character;
     610:	4b0e      	ldr	r3, [pc, #56]	; (64c <escState+0xd8>)
     612:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     614:	2202      	movs	r2, #2
     616:	4b03      	ldr	r3, [pc, #12]	; (624 <escState+0xb0>)
     618:	701a      	strb	r2, [r3, #0]
}
     61a:	bd10      	pop	{r4, pc}
		currentState = stateCSIentry;
     61c:	2203      	movs	r2, #3
     61e:	4b01      	ldr	r3, [pc, #4]	; (624 <escState+0xb0>)
     620:	701a      	strb	r2, [r3, #0]
     622:	e7fa      	b.n	61a <escState+0xa6>
     624:	200002ed 	.word	0x200002ed
     628:	0000036d 	.word	0x0000036d
     62c:	00000399 	.word	0x00000399
     630:	000003f9 	.word	0x000003f9
     634:	0000047d 	.word	0x0000047d
     638:	000004fd 	.word	0x000004fd
     63c:	00005f40 	.word	0x00005f40
     640:	00005f74 	.word	0x00005f74
     644:	00004d61 	.word	0x00004d61
     648:	00000559 	.word	0x00000559
     64c:	20000376 	.word	0x20000376

00000650 <CUU>:

/************************************************************************/
/*    CSI mnemonic functions                                            */
/************************************************************************/
void CUU() // Cursor Up
{
     650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     652:	4b20      	ldr	r3, [pc, #128]	; (6d4 <CUU+0x84>)
     654:	4798      	blx	r3
	{
		parameter = 1;
     656:	2401      	movs	r4, #1
	if(isEmptyParam())
     658:	2800      	cmp	r0, #0
     65a:	d01d      	beq.n	698 <CUU+0x48>
		{
			parameter = 1;
		}
	}
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     65c:	4b1e      	ldr	r3, [pc, #120]	; (6d8 <CUU+0x88>)
     65e:	881a      	ldrh	r2, [r3, #0]
     660:	1b13      	subs	r3, r2, r4
     662:	2b18      	cmp	r3, #24
     664:	d91e      	bls.n	6a4 <CUU+0x54>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     666:	4c1d      	ldr	r4, [pc, #116]	; (6dc <CUU+0x8c>)
     668:	4e1d      	ldr	r6, [pc, #116]	; (6e0 <CUU+0x90>)
     66a:	8831      	ldrh	r1, [r6, #0]
     66c:	004b      	lsls	r3, r1, #1
     66e:	185b      	adds	r3, r3, r1
     670:	00db      	lsls	r3, r3, #3
     672:	18e3      	adds	r3, r4, r3
     674:	5c98      	ldrb	r0, [r3, r2]
     676:	4d1b      	ldr	r5, [pc, #108]	; (6e4 <CUU+0x94>)
     678:	47a8      	blx	r5
		yCharPos = 0;
     67a:	2200      	movs	r2, #0
     67c:	4b16      	ldr	r3, [pc, #88]	; (6d8 <CUU+0x88>)
     67e:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     680:	8832      	ldrh	r2, [r6, #0]
     682:	0053      	lsls	r3, r2, #1
     684:	189b      	adds	r3, r3, r2
     686:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     688:	5d18      	ldrb	r0, [r3, r4]
     68a:	47a8      	blx	r5
	}
	
	blinkCursor();
     68c:	4b16      	ldr	r3, [pc, #88]	; (6e8 <CUU+0x98>)
     68e:	4798      	blx	r3
	currentState = stateGround;
     690:	2200      	movs	r2, #0
     692:	4b16      	ldr	r3, [pc, #88]	; (6ec <CUU+0x9c>)
     694:	701a      	strb	r2, [r3, #0]
}
     696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     698:	4b15      	ldr	r3, [pc, #84]	; (6f0 <CUU+0xa0>)
     69a:	4798      	blx	r3
     69c:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     69e:	d1dd      	bne.n	65c <CUU+0xc>
			parameter = 1;
     6a0:	3401      	adds	r4, #1
     6a2:	e7db      	b.n	65c <CUU+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     6a4:	4d0d      	ldr	r5, [pc, #52]	; (6dc <CUU+0x8c>)
     6a6:	4e0e      	ldr	r6, [pc, #56]	; (6e0 <CUU+0x90>)
     6a8:	8831      	ldrh	r1, [r6, #0]
     6aa:	004b      	lsls	r3, r1, #1
     6ac:	185b      	adds	r3, r3, r1
     6ae:	00db      	lsls	r3, r3, #3
     6b0:	18eb      	adds	r3, r5, r3
     6b2:	5c98      	ldrb	r0, [r3, r2]
     6b4:	4f0b      	ldr	r7, [pc, #44]	; (6e4 <CUU+0x94>)
     6b6:	47b8      	blx	r7
		yCharPos = yCharPos - parameter;
     6b8:	4b07      	ldr	r3, [pc, #28]	; (6d8 <CUU+0x88>)
     6ba:	8818      	ldrh	r0, [r3, #0]
     6bc:	1b04      	subs	r4, r0, r4
     6be:	b2a4      	uxth	r4, r4
     6c0:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     6c2:	8832      	ldrh	r2, [r6, #0]
     6c4:	0053      	lsls	r3, r2, #1
     6c6:	189b      	adds	r3, r3, r2
     6c8:	00db      	lsls	r3, r3, #3
     6ca:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     6cc:	5d28      	ldrb	r0, [r5, r4]
     6ce:	47b8      	blx	r7
     6d0:	e7dc      	b.n	68c <CUU+0x3c>
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	00000241 	.word	0x00000241
     6d8:	200002ea 	.word	0x200002ea
     6dc:	200003f8 	.word	0x200003f8
     6e0:	200002e8 	.word	0x200002e8
     6e4:	00003479 	.word	0x00003479
     6e8:	000035f9 	.word	0x000035f9
     6ec:	200002ed 	.word	0x200002ed
     6f0:	00000255 	.word	0x00000255

000006f4 <CUD>:

void CUD() //Cursor Down
{
     6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     6f6:	4b20      	ldr	r3, [pc, #128]	; (778 <CUD+0x84>)
     6f8:	4798      	blx	r3
	{
		parameter = 1;
     6fa:	2401      	movs	r4, #1
	if(isEmptyParam())
     6fc:	2800      	cmp	r0, #0
     6fe:	d01e      	beq.n	73e <CUD+0x4a>
		if(parameter == 0)
		{
			parameter = 1;
		}
	}
	if((yCharPos + parameter) <= 23)
     700:	4b1e      	ldr	r3, [pc, #120]	; (77c <CUD+0x88>)
     702:	881a      	ldrh	r2, [r3, #0]
     704:	18a3      	adds	r3, r4, r2
     706:	2b17      	cmp	r3, #23
     708:	dd1f      	ble.n	74a <CUD+0x56>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     70a:	4c1d      	ldr	r4, [pc, #116]	; (780 <CUD+0x8c>)
     70c:	4e1d      	ldr	r6, [pc, #116]	; (784 <CUD+0x90>)
     70e:	8831      	ldrh	r1, [r6, #0]
     710:	004b      	lsls	r3, r1, #1
     712:	185b      	adds	r3, r3, r1
     714:	00db      	lsls	r3, r3, #3
     716:	18e3      	adds	r3, r4, r3
     718:	5c98      	ldrb	r0, [r3, r2]
     71a:	4d1b      	ldr	r5, [pc, #108]	; (788 <CUD+0x94>)
     71c:	47a8      	blx	r5
		yCharPos = 23;
     71e:	2217      	movs	r2, #23
     720:	4b16      	ldr	r3, [pc, #88]	; (77c <CUD+0x88>)
     722:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     724:	8832      	ldrh	r2, [r6, #0]
     726:	0053      	lsls	r3, r2, #1
     728:	189b      	adds	r3, r3, r2
     72a:	00db      	lsls	r3, r3, #3
     72c:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     72e:	7dd8      	ldrb	r0, [r3, #23]
     730:	47a8      	blx	r5
	}

	blinkCursor();
     732:	4b16      	ldr	r3, [pc, #88]	; (78c <CUD+0x98>)
     734:	4798      	blx	r3
	currentState = stateGround;
     736:	2200      	movs	r2, #0
     738:	4b15      	ldr	r3, [pc, #84]	; (790 <CUD+0x9c>)
     73a:	701a      	strb	r2, [r3, #0]
}
     73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     73e:	4b15      	ldr	r3, [pc, #84]	; (794 <CUD+0xa0>)
     740:	4798      	blx	r3
     742:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     744:	d1dc      	bne.n	700 <CUD+0xc>
			parameter = 1;
     746:	3401      	adds	r4, #1
     748:	e7da      	b.n	700 <CUD+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     74a:	4d0d      	ldr	r5, [pc, #52]	; (780 <CUD+0x8c>)
     74c:	4e0d      	ldr	r6, [pc, #52]	; (784 <CUD+0x90>)
     74e:	8831      	ldrh	r1, [r6, #0]
     750:	004b      	lsls	r3, r1, #1
     752:	185b      	adds	r3, r3, r1
     754:	00db      	lsls	r3, r3, #3
     756:	18eb      	adds	r3, r5, r3
     758:	5c98      	ldrb	r0, [r3, r2]
     75a:	4f0b      	ldr	r7, [pc, #44]	; (788 <CUD+0x94>)
     75c:	47b8      	blx	r7
		yCharPos = yCharPos + parameter;
     75e:	4b07      	ldr	r3, [pc, #28]	; (77c <CUD+0x88>)
     760:	8818      	ldrh	r0, [r3, #0]
     762:	1904      	adds	r4, r0, r4
     764:	b2a4      	uxth	r4, r4
     766:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     768:	8832      	ldrh	r2, [r6, #0]
     76a:	0053      	lsls	r3, r2, #1
     76c:	189b      	adds	r3, r3, r2
     76e:	00db      	lsls	r3, r3, #3
     770:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     772:	5d28      	ldrb	r0, [r5, r4]
     774:	47b8      	blx	r7
     776:	e7dc      	b.n	732 <CUD+0x3e>
     778:	00000241 	.word	0x00000241
     77c:	200002ea 	.word	0x200002ea
     780:	200003f8 	.word	0x200003f8
     784:	200002e8 	.word	0x200002e8
     788:	00003479 	.word	0x00003479
     78c:	000035f9 	.word	0x000035f9
     790:	200002ed 	.word	0x200002ed
     794:	00000255 	.word	0x00000255

00000798 <CUF>:

void CUF() //Cursor Forward
{
     798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     79a:	4b21      	ldr	r3, [pc, #132]	; (820 <CUF+0x88>)
     79c:	4798      	blx	r3
	{
		parameter = 1;
     79e:	2401      	movs	r4, #1
	if(isEmptyParam())
     7a0:	2800      	cmp	r0, #0
     7a2:	d01f      	beq.n	7e4 <CUF+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos + parameter <= 79)
     7a4:	4b1f      	ldr	r3, [pc, #124]	; (824 <CUF+0x8c>)
     7a6:	881a      	ldrh	r2, [r3, #0]
     7a8:	18a3      	adds	r3, r4, r2
     7aa:	2b4f      	cmp	r3, #79	; 0x4f
     7ac:	dd20      	ble.n	7f0 <CUF+0x58>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7ae:	4c1e      	ldr	r4, [pc, #120]	; (828 <CUF+0x90>)
     7b0:	4e1e      	ldr	r6, [pc, #120]	; (82c <CUF+0x94>)
     7b2:	8831      	ldrh	r1, [r6, #0]
     7b4:	0053      	lsls	r3, r2, #1
     7b6:	189b      	adds	r3, r3, r2
     7b8:	00db      	lsls	r3, r3, #3
     7ba:	18e3      	adds	r3, r4, r3
     7bc:	5c58      	ldrb	r0, [r3, r1]
     7be:	4d1c      	ldr	r5, [pc, #112]	; (830 <CUF+0x98>)
     7c0:	47a8      	blx	r5
		xCharPos = 79;
     7c2:	224f      	movs	r2, #79	; 0x4f
     7c4:	4b17      	ldr	r3, [pc, #92]	; (824 <CUF+0x8c>)
     7c6:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     7c8:	8833      	ldrh	r3, [r6, #0]
     7ca:	18e4      	adds	r4, r4, r3
     7cc:	23ed      	movs	r3, #237	; 0xed
     7ce:	00db      	lsls	r3, r3, #3
     7d0:	469c      	mov	ip, r3
     7d2:	4464      	add	r4, ip
		drawChar(tempCharacter);	
     7d4:	7820      	ldrb	r0, [r4, #0]
     7d6:	47a8      	blx	r5
	}
	blinkCursor();
     7d8:	4b16      	ldr	r3, [pc, #88]	; (834 <CUF+0x9c>)
     7da:	4798      	blx	r3
	currentState = stateGround;
     7dc:	2200      	movs	r2, #0
     7de:	4b16      	ldr	r3, [pc, #88]	; (838 <CUF+0xa0>)
     7e0:	701a      	strb	r2, [r3, #0]
}
     7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     7e4:	4b15      	ldr	r3, [pc, #84]	; (83c <CUF+0xa4>)
     7e6:	4798      	blx	r3
     7e8:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     7ea:	d1db      	bne.n	7a4 <CUF+0xc>
			parameter = 1;
     7ec:	3401      	adds	r4, #1
     7ee:	e7d9      	b.n	7a4 <CUF+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7f0:	4d0d      	ldr	r5, [pc, #52]	; (828 <CUF+0x90>)
     7f2:	4e0e      	ldr	r6, [pc, #56]	; (82c <CUF+0x94>)
     7f4:	8831      	ldrh	r1, [r6, #0]
     7f6:	0053      	lsls	r3, r2, #1
     7f8:	189b      	adds	r3, r3, r2
     7fa:	00db      	lsls	r3, r3, #3
     7fc:	18eb      	adds	r3, r5, r3
     7fe:	5c58      	ldrb	r0, [r3, r1]
     800:	4f0b      	ldr	r7, [pc, #44]	; (830 <CUF+0x98>)
     802:	47b8      	blx	r7
		xCharPos = xCharPos + parameter;
     804:	4b07      	ldr	r3, [pc, #28]	; (824 <CUF+0x8c>)
     806:	8818      	ldrh	r0, [r3, #0]
     808:	1904      	adds	r4, r0, r4
     80a:	b2a4      	uxth	r4, r4
     80c:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     80e:	8833      	ldrh	r3, [r6, #0]
     810:	0060      	lsls	r0, r4, #1
     812:	1904      	adds	r4, r0, r4
     814:	00e4      	lsls	r4, r4, #3
     816:	192c      	adds	r4, r5, r4
		drawChar(tempCharacter);
     818:	5ce0      	ldrb	r0, [r4, r3]
     81a:	47b8      	blx	r7
     81c:	e7dc      	b.n	7d8 <CUF+0x40>
     81e:	46c0      	nop			; (mov r8, r8)
     820:	00000241 	.word	0x00000241
     824:	200002e8 	.word	0x200002e8
     828:	200003f8 	.word	0x200003f8
     82c:	200002ea 	.word	0x200002ea
     830:	00003479 	.word	0x00003479
     834:	000035f9 	.word	0x000035f9
     838:	200002ed 	.word	0x200002ed
     83c:	00000255 	.word	0x00000255

00000840 <CUB>:

void CUB() //Cursor Backward
{
     840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     842:	4b1e      	ldr	r3, [pc, #120]	; (8bc <CUB+0x7c>)
     844:	4798      	blx	r3
	{
		parameter = 1;
     846:	2601      	movs	r6, #1
	if(isEmptyParam())
     848:	2800      	cmp	r0, #0
     84a:	d01f      	beq.n	88c <CUB+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos - parameter >= 0)
     84c:	4b1c      	ldr	r3, [pc, #112]	; (8c0 <CUB+0x80>)
     84e:	881a      	ldrh	r2, [r3, #0]
     850:	1b93      	subs	r3, r2, r6
     852:	d421      	bmi.n	898 <CUB+0x58>
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     854:	4c1b      	ldr	r4, [pc, #108]	; (8c4 <CUB+0x84>)
     856:	4d1c      	ldr	r5, [pc, #112]	; (8c8 <CUB+0x88>)
     858:	8829      	ldrh	r1, [r5, #0]
     85a:	0053      	lsls	r3, r2, #1
     85c:	189b      	adds	r3, r3, r2
     85e:	00db      	lsls	r3, r3, #3
     860:	18e3      	adds	r3, r4, r3
     862:	5c58      	ldrb	r0, [r3, r1]
     864:	4f19      	ldr	r7, [pc, #100]	; (8cc <CUB+0x8c>)
     866:	47b8      	blx	r7
		xCharPos = xCharPos - parameter;
     868:	4b15      	ldr	r3, [pc, #84]	; (8c0 <CUB+0x80>)
     86a:	8818      	ldrh	r0, [r3, #0]
     86c:	1b80      	subs	r0, r0, r6
     86e:	b280      	uxth	r0, r0
     870:	8018      	strh	r0, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     872:	882a      	ldrh	r2, [r5, #0]
     874:	0043      	lsls	r3, r0, #1
     876:	1818      	adds	r0, r3, r0
     878:	00c0      	lsls	r0, r0, #3
     87a:	1820      	adds	r0, r4, r0
		drawChar(tempCharacter);
     87c:	5c80      	ldrb	r0, [r0, r2]
     87e:	47b8      	blx	r7
		drawChar(consoleDisplay[xCharPos][yCharPos]);
		xCharPos = 0;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	blinkCursor();
     880:	4b13      	ldr	r3, [pc, #76]	; (8d0 <CUB+0x90>)
     882:	4798      	blx	r3
	currentState = stateGround;
     884:	2200      	movs	r2, #0
     886:	4b13      	ldr	r3, [pc, #76]	; (8d4 <CUB+0x94>)
     888:	701a      	strb	r2, [r3, #0]
}
     88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     88c:	4b12      	ldr	r3, [pc, #72]	; (8d8 <CUB+0x98>)
     88e:	4798      	blx	r3
     890:	1e06      	subs	r6, r0, #0
		if(parameter == 0)
     892:	d1db      	bne.n	84c <CUB+0xc>
			parameter = 1;
     894:	3601      	adds	r6, #1
     896:	e7d9      	b.n	84c <CUB+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     898:	4d0a      	ldr	r5, [pc, #40]	; (8c4 <CUB+0x84>)
     89a:	4e0b      	ldr	r6, [pc, #44]	; (8c8 <CUB+0x88>)
     89c:	8831      	ldrh	r1, [r6, #0]
     89e:	0053      	lsls	r3, r2, #1
     8a0:	189b      	adds	r3, r3, r2
     8a2:	00db      	lsls	r3, r3, #3
     8a4:	18eb      	adds	r3, r5, r3
     8a6:	5c58      	ldrb	r0, [r3, r1]
     8a8:	4c08      	ldr	r4, [pc, #32]	; (8cc <CUB+0x8c>)
     8aa:	47a0      	blx	r4
		xCharPos = 0;
     8ac:	2200      	movs	r2, #0
     8ae:	4b04      	ldr	r3, [pc, #16]	; (8c0 <CUB+0x80>)
     8b0:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8b2:	8833      	ldrh	r3, [r6, #0]
		drawChar(tempCharacter);
     8b4:	5ce8      	ldrb	r0, [r5, r3]
     8b6:	47a0      	blx	r4
     8b8:	e7e2      	b.n	880 <CUB+0x40>
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	00000241 	.word	0x00000241
     8c0:	200002e8 	.word	0x200002e8
     8c4:	200003f8 	.word	0x200003f8
     8c8:	200002ea 	.word	0x200002ea
     8cc:	00003479 	.word	0x00003479
     8d0:	000035f9 	.word	0x000035f9
     8d4:	200002ed 	.word	0x200002ed
     8d8:	00000255 	.word	0x00000255

000008dc <CNL>:

void CNL() //Cursor Next Line
{
     8dc:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     8de:	4b1d      	ldr	r3, [pc, #116]	; (954 <CNL+0x78>)
     8e0:	4798      	blx	r3
	{
		parameter = 1;
     8e2:	2401      	movs	r4, #1
	if(isEmptyParam())
     8e4:	2800      	cmp	r0, #0
     8e6:	d01c      	beq.n	922 <CNL+0x46>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     8e8:	2200      	movs	r2, #0
     8ea:	4b1b      	ldr	r3, [pc, #108]	; (958 <CNL+0x7c>)
     8ec:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos + parameter) <= 23)
     8ee:	4b1b      	ldr	r3, [pc, #108]	; (95c <CNL+0x80>)
     8f0:	881b      	ldrh	r3, [r3, #0]
     8f2:	18e2      	adds	r2, r4, r3
     8f4:	2a17      	cmp	r2, #23
     8f6:	dd1a      	ble.n	92e <CNL+0x52>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     8f8:	4c19      	ldr	r4, [pc, #100]	; (960 <CNL+0x84>)
     8fa:	5ce0      	ldrb	r0, [r4, r3]
     8fc:	4d19      	ldr	r5, [pc, #100]	; (964 <CNL+0x88>)
     8fe:	47a8      	blx	r5
		yCharPos = 23;
     900:	2217      	movs	r2, #23
     902:	4b16      	ldr	r3, [pc, #88]	; (95c <CNL+0x80>)
     904:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     906:	4b14      	ldr	r3, [pc, #80]	; (958 <CNL+0x7c>)
     908:	881a      	ldrh	r2, [r3, #0]
     90a:	0053      	lsls	r3, r2, #1
     90c:	189b      	adds	r3, r3, r2
     90e:	00db      	lsls	r3, r3, #3
     910:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     912:	7dd8      	ldrb	r0, [r3, #23]
     914:	47a8      	blx	r5
	}

	blinkCursor();
     916:	4b14      	ldr	r3, [pc, #80]	; (968 <CNL+0x8c>)
     918:	4798      	blx	r3
	currentState = stateGround;	
     91a:	2200      	movs	r2, #0
     91c:	4b13      	ldr	r3, [pc, #76]	; (96c <CNL+0x90>)
     91e:	701a      	strb	r2, [r3, #0]
}
     920:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     922:	4b13      	ldr	r3, [pc, #76]	; (970 <CNL+0x94>)
     924:	4798      	blx	r3
     926:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     928:	d1de      	bne.n	8e8 <CNL+0xc>
			parameter = 1;
     92a:	3401      	adds	r4, #1
     92c:	e7dc      	b.n	8e8 <CNL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     92e:	4d0c      	ldr	r5, [pc, #48]	; (960 <CNL+0x84>)
     930:	5ce8      	ldrb	r0, [r5, r3]
     932:	4e0c      	ldr	r6, [pc, #48]	; (964 <CNL+0x88>)
     934:	47b0      	blx	r6
		yCharPos = yCharPos + parameter;
     936:	4b09      	ldr	r3, [pc, #36]	; (95c <CNL+0x80>)
     938:	8818      	ldrh	r0, [r3, #0]
     93a:	1904      	adds	r4, r0, r4
     93c:	b2a4      	uxth	r4, r4
     93e:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <CNL+0x7c>)
     942:	881a      	ldrh	r2, [r3, #0]
     944:	0053      	lsls	r3, r2, #1
     946:	189b      	adds	r3, r3, r2
     948:	00db      	lsls	r3, r3, #3
     94a:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     94c:	5d18      	ldrb	r0, [r3, r4]
     94e:	47b0      	blx	r6
     950:	e7e1      	b.n	916 <CNL+0x3a>
     952:	46c0      	nop			; (mov r8, r8)
     954:	00000241 	.word	0x00000241
     958:	200002e8 	.word	0x200002e8
     95c:	200002ea 	.word	0x200002ea
     960:	200003f8 	.word	0x200003f8
     964:	00003479 	.word	0x00003479
     968:	000035f9 	.word	0x000035f9
     96c:	200002ed 	.word	0x200002ed
     970:	00000255 	.word	0x00000255

00000974 <CPL>:

void CPL() //Cursor Preceding Line
{
     974:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     976:	4b1c      	ldr	r3, [pc, #112]	; (9e8 <CPL+0x74>)
     978:	4798      	blx	r3
	{
		parameter = 1;
     97a:	2401      	movs	r4, #1
	if(isEmptyParam())
     97c:	2800      	cmp	r0, #0
     97e:	d01b      	beq.n	9b8 <CPL+0x44>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     980:	2200      	movs	r2, #0
     982:	4b1a      	ldr	r3, [pc, #104]	; (9ec <CPL+0x78>)
     984:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     986:	4b1a      	ldr	r3, [pc, #104]	; (9f0 <CPL+0x7c>)
     988:	881b      	ldrh	r3, [r3, #0]
     98a:	1b1a      	subs	r2, r3, r4
     98c:	2a18      	cmp	r2, #24
     98e:	d919      	bls.n	9c4 <CPL+0x50>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     990:	4d18      	ldr	r5, [pc, #96]	; (9f4 <CPL+0x80>)
     992:	5ce8      	ldrb	r0, [r5, r3]
     994:	4c18      	ldr	r4, [pc, #96]	; (9f8 <CPL+0x84>)
     996:	47a0      	blx	r4
		yCharPos = 0;
     998:	2200      	movs	r2, #0
     99a:	4b15      	ldr	r3, [pc, #84]	; (9f0 <CPL+0x7c>)
     99c:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     99e:	4b13      	ldr	r3, [pc, #76]	; (9ec <CPL+0x78>)
     9a0:	881a      	ldrh	r2, [r3, #0]
     9a2:	0053      	lsls	r3, r2, #1
     9a4:	189b      	adds	r3, r3, r2
     9a6:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     9a8:	5d58      	ldrb	r0, [r3, r5]
     9aa:	47a0      	blx	r4
	}
	
	blinkCursor();
     9ac:	4b13      	ldr	r3, [pc, #76]	; (9fc <CPL+0x88>)
     9ae:	4798      	blx	r3
	currentState = stateGround;
     9b0:	2200      	movs	r2, #0
     9b2:	4b13      	ldr	r3, [pc, #76]	; (a00 <CPL+0x8c>)
     9b4:	701a      	strb	r2, [r3, #0]
	
}
     9b6:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     9b8:	4b12      	ldr	r3, [pc, #72]	; (a04 <CPL+0x90>)
     9ba:	4798      	blx	r3
     9bc:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     9be:	d1df      	bne.n	980 <CPL+0xc>
			parameter = 1;
     9c0:	3401      	adds	r4, #1
     9c2:	e7dd      	b.n	980 <CPL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     9c4:	4d0b      	ldr	r5, [pc, #44]	; (9f4 <CPL+0x80>)
     9c6:	5ce8      	ldrb	r0, [r5, r3]
     9c8:	4e0b      	ldr	r6, [pc, #44]	; (9f8 <CPL+0x84>)
     9ca:	47b0      	blx	r6
		yCharPos = yCharPos - parameter;
     9cc:	4b08      	ldr	r3, [pc, #32]	; (9f0 <CPL+0x7c>)
     9ce:	8818      	ldrh	r0, [r3, #0]
     9d0:	1b04      	subs	r4, r0, r4
     9d2:	b2a4      	uxth	r4, r4
     9d4:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     9d6:	4b05      	ldr	r3, [pc, #20]	; (9ec <CPL+0x78>)
     9d8:	881a      	ldrh	r2, [r3, #0]
     9da:	0053      	lsls	r3, r2, #1
     9dc:	189b      	adds	r3, r3, r2
     9de:	00db      	lsls	r3, r3, #3
     9e0:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     9e2:	5d18      	ldrb	r0, [r3, r4]
     9e4:	47b0      	blx	r6
     9e6:	e7e1      	b.n	9ac <CPL+0x38>
     9e8:	00000241 	.word	0x00000241
     9ec:	200002e8 	.word	0x200002e8
     9f0:	200002ea 	.word	0x200002ea
     9f4:	200003f8 	.word	0x200003f8
     9f8:	00003479 	.word	0x00003479
     9fc:	000035f9 	.word	0x000035f9
     a00:	200002ed 	.word	0x200002ed
     a04:	00000255 	.word	0x00000255

00000a08 <CHA>:

void CHA() //Cursor Horizontal Absolute
{
     a08:	b5f0      	push	{r4, r5, r6, r7, lr}
     a0a:	46c6      	mov	lr, r8
     a0c:	b500      	push	{lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     a0e:	4b17      	ldr	r3, [pc, #92]	; (a6c <CHA+0x64>)
     a10:	4798      	blx	r3
	{
		parameter = 1;
     a12:	2501      	movs	r5, #1
	if(isEmptyParam())
     a14:	2800      	cmp	r0, #0
     a16:	d01c      	beq.n	a52 <CHA+0x4a>
		{
			parameter = 79;
		}
	}
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a18:	4c15      	ldr	r4, [pc, #84]	; (a70 <CHA+0x68>)
     a1a:	4f16      	ldr	r7, [pc, #88]	; (a74 <CHA+0x6c>)
     a1c:	883a      	ldrh	r2, [r7, #0]
     a1e:	4e16      	ldr	r6, [pc, #88]	; (a78 <CHA+0x70>)
     a20:	8831      	ldrh	r1, [r6, #0]
     a22:	0053      	lsls	r3, r2, #1
     a24:	189b      	adds	r3, r3, r2
     a26:	00db      	lsls	r3, r3, #3
     a28:	18e3      	adds	r3, r4, r3
     a2a:	5c58      	ldrb	r0, [r3, r1]
     a2c:	4b13      	ldr	r3, [pc, #76]	; (a7c <CHA+0x74>)
     a2e:	4698      	mov	r8, r3
     a30:	4798      	blx	r3
	xCharPos = parameter;
     a32:	803d      	strh	r5, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     a34:	8832      	ldrh	r2, [r6, #0]
     a36:	006b      	lsls	r3, r5, #1
     a38:	195b      	adds	r3, r3, r5
     a3a:	00db      	lsls	r3, r3, #3
     a3c:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     a3e:	5c98      	ldrb	r0, [r3, r2]
     a40:	47c0      	blx	r8
	
	blinkCursor();
     a42:	4b0f      	ldr	r3, [pc, #60]	; (a80 <CHA+0x78>)
     a44:	4798      	blx	r3
	currentState = stateGround;
     a46:	2200      	movs	r2, #0
     a48:	4b0e      	ldr	r3, [pc, #56]	; (a84 <CHA+0x7c>)
     a4a:	701a      	strb	r2, [r3, #0]
}
     a4c:	bc04      	pop	{r2}
     a4e:	4690      	mov	r8, r2
     a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     a52:	4b0d      	ldr	r3, [pc, #52]	; (a88 <CHA+0x80>)
     a54:	4798      	blx	r3
     a56:	1e02      	subs	r2, r0, #0
		if(parameter > 0)
     a58:	d001      	beq.n	a5e <CHA+0x56>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     a5a:	3801      	subs	r0, #1
     a5c:	b2c2      	uxtb	r2, r0
     a5e:	1c13      	adds	r3, r2, #0
     a60:	2a4f      	cmp	r2, #79	; 0x4f
     a62:	d900      	bls.n	a66 <CHA+0x5e>
     a64:	234f      	movs	r3, #79	; 0x4f
     a66:	b2dd      	uxtb	r5, r3
     a68:	e7d6      	b.n	a18 <CHA+0x10>
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	00000241 	.word	0x00000241
     a70:	200003f8 	.word	0x200003f8
     a74:	200002e8 	.word	0x200002e8
     a78:	200002ea 	.word	0x200002ea
     a7c:	00003479 	.word	0x00003479
     a80:	000035f9 	.word	0x000035f9
     a84:	200002ed 	.word	0x200002ed
     a88:	00000255 	.word	0x00000255

00000a8c <CUP>:

void CUP() //Cursor Position
{
     a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a8e:	46ce      	mov	lr, r9
     a90:	4647      	mov	r7, r8
     a92:	b580      	push	{r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	uint8_t xTemp = 0;
	uint8_t yTemp = 0;
	
	if(isEmptyParam())
     a94:	4b20      	ldr	r3, [pc, #128]	; (b18 <CUP+0x8c>)
     a96:	4798      	blx	r3
	{
		parameter = 0;
     a98:	2400      	movs	r4, #0
	if(isEmptyParam())
     a9a:	2800      	cmp	r0, #0
     a9c:	d024      	beq.n	ae8 <CUP+0x5c>
		}
	}
	
	xTemp = parameter;

	if(isEmptyParam())
     a9e:	4b1e      	ldr	r3, [pc, #120]	; (b18 <CUP+0x8c>)
     aa0:	4798      	blx	r3
	{
		parameter = 0;
     aa2:	2600      	movs	r6, #0
	if(isEmptyParam())
     aa4:	2800      	cmp	r0, #0
     aa6:	d02b      	beq.n	b00 <CUP+0x74>
		}
	}
	
	yTemp = parameter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     aa8:	4d1c      	ldr	r5, [pc, #112]	; (b1c <CUP+0x90>)
     aaa:	4b1d      	ldr	r3, [pc, #116]	; (b20 <CUP+0x94>)
     aac:	4698      	mov	r8, r3
     aae:	881a      	ldrh	r2, [r3, #0]
     ab0:	4f1c      	ldr	r7, [pc, #112]	; (b24 <CUP+0x98>)
     ab2:	8839      	ldrh	r1, [r7, #0]
     ab4:	0053      	lsls	r3, r2, #1
     ab6:	189b      	adds	r3, r3, r2
     ab8:	00db      	lsls	r3, r3, #3
     aba:	18eb      	adds	r3, r5, r3
     abc:	5c58      	ldrb	r0, [r3, r1]
     abe:	4b1a      	ldr	r3, [pc, #104]	; (b28 <CUP+0x9c>)
     ac0:	4699      	mov	r9, r3
     ac2:	4798      	blx	r3
	xCharPos = xTemp;
     ac4:	4643      	mov	r3, r8
     ac6:	801c      	strh	r4, [r3, #0]
	yCharPos = yTemp;
     ac8:	803e      	strh	r6, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     aca:	0063      	lsls	r3, r4, #1
     acc:	191c      	adds	r4, r3, r4
     ace:	00e4      	lsls	r4, r4, #3
     ad0:	192c      	adds	r4, r5, r4
	drawChar(tempCharacter);
     ad2:	5da0      	ldrb	r0, [r4, r6]
     ad4:	47c8      	blx	r9
	
	blinkCursor();
     ad6:	4b15      	ldr	r3, [pc, #84]	; (b2c <CUP+0xa0>)
     ad8:	4798      	blx	r3
	currentState = stateGround;
     ada:	2200      	movs	r2, #0
     adc:	4b14      	ldr	r3, [pc, #80]	; (b30 <CUP+0xa4>)
     ade:	701a      	strb	r2, [r3, #0]
}
     ae0:	bc0c      	pop	{r2, r3}
     ae2:	4690      	mov	r8, r2
     ae4:	4699      	mov	r9, r3
     ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     ae8:	4b12      	ldr	r3, [pc, #72]	; (b34 <CUP+0xa8>)
     aea:	4798      	blx	r3
     aec:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     aee:	d001      	beq.n	af4 <CUP+0x68>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     af0:	3801      	subs	r0, #1
     af2:	b2c3      	uxtb	r3, r0
     af4:	1c1c      	adds	r4, r3, #0
     af6:	2b4f      	cmp	r3, #79	; 0x4f
     af8:	d900      	bls.n	afc <CUP+0x70>
     afa:	244f      	movs	r4, #79	; 0x4f
     afc:	b2e4      	uxtb	r4, r4
     afe:	e7ce      	b.n	a9e <CUP+0x12>
		parameter = dequeueParam();
     b00:	4b0c      	ldr	r3, [pc, #48]	; (b34 <CUP+0xa8>)
     b02:	4798      	blx	r3
     b04:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     b06:	d001      	beq.n	b0c <CUP+0x80>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     b08:	3801      	subs	r0, #1
     b0a:	b2c3      	uxtb	r3, r0
     b0c:	1c1e      	adds	r6, r3, #0
     b0e:	2b17      	cmp	r3, #23
     b10:	d900      	bls.n	b14 <CUP+0x88>
     b12:	2617      	movs	r6, #23
     b14:	b2f6      	uxtb	r6, r6
     b16:	e7c7      	b.n	aa8 <CUP+0x1c>
     b18:	00000241 	.word	0x00000241
     b1c:	200003f8 	.word	0x200003f8
     b20:	200002e8 	.word	0x200002e8
     b24:	200002ea 	.word	0x200002ea
     b28:	00003479 	.word	0x00003479
     b2c:	000035f9 	.word	0x000035f9
     b30:	200002ed 	.word	0x200002ed
     b34:	00000255 	.word	0x00000255

00000b38 <ED>:
	//do this later
	currentState = stateGround;
}

void ED() //Edit In Display
{
     b38:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3a:	46de      	mov	lr, fp
     b3c:	4657      	mov	r7, sl
     b3e:	464e      	mov	r6, r9
     b40:	4645      	mov	r5, r8
     b42:	b5e0      	push	{r5, r6, r7, lr}
     b44:	b083      	sub	sp, #12
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     b46:	4b43      	ldr	r3, [pc, #268]	; (c54 <ED+0x11c>)
     b48:	881b      	ldrh	r3, [r3, #0]
     b4a:	4698      	mov	r8, r3
	uint8_t yTemp = yCharPos;
     b4c:	4b42      	ldr	r3, [pc, #264]	; (c58 <ED+0x120>)
     b4e:	881b      	ldrh	r3, [r3, #0]
     b50:	4699      	mov	r9, r3
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     b52:	2200      	movs	r2, #0
     b54:	4b41      	ldr	r3, [pc, #260]	; (c5c <ED+0x124>)
     b56:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     b58:	4b41      	ldr	r3, [pc, #260]	; (c60 <ED+0x128>)
     b5a:	4798      	blx	r3
     b5c:	2800      	cmp	r0, #0
     b5e:	d011      	beq.n	b84 <ED+0x4c>
			{
				xCharPos = i;
				drawChar(0x00);
			}
			//second step, erase previous lines
			for(int j = 0 ; j < yTemp ; j++)
     b60:	2500      	movs	r5, #0
		case 2:			//Erases entire display
			for(int j = 0 ; j < 24 ; j++)
			{
				for(int i = 0 ; i < 80 ; i++)
				{
					xCharPos = i;
     b62:	4b3c      	ldr	r3, [pc, #240]	; (c54 <ED+0x11c>)
     b64:	469a      	mov	sl, r3
					yCharPos = j;
     b66:	4f3c      	ldr	r7, [pc, #240]	; (c58 <ED+0x120>)
					drawChar(0x00);
     b68:	4e3e      	ldr	r6, [pc, #248]	; (c64 <ED+0x12c>)
			for(int j = 0 ; j < yTemp ; j++)
     b6a:	2400      	movs	r4, #0
					xCharPos = i;
     b6c:	4653      	mov	r3, sl
     b6e:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     b70:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     b72:	2000      	movs	r0, #0
     b74:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     b76:	3401      	adds	r4, #1
     b78:	2c50      	cmp	r4, #80	; 0x50
     b7a:	d1f7      	bne.n	b6c <ED+0x34>
			for(int j = 0 ; j < 24 ; j++)
     b7c:	3501      	adds	r5, #1
     b7e:	2d18      	cmp	r5, #24
     b80:	d1f3      	bne.n	b6a <ED+0x32>
     b82:	e04e      	b.n	c22 <ED+0xea>
	uint8_t xTemp = xCharPos;
     b84:	4643      	mov	r3, r8
     b86:	466a      	mov	r2, sp
     b88:	71d3      	strb	r3, [r2, #7]
     b8a:	79d4      	ldrb	r4, [r2, #7]
	uint8_t yTemp = yCharPos;
     b8c:	464b      	mov	r3, r9
     b8e:	71d3      	strb	r3, [r2, #7]
     b90:	79d3      	ldrb	r3, [r2, #7]
     b92:	469a      	mov	sl, r3
		parameter = dequeueParam();
     b94:	4b34      	ldr	r3, [pc, #208]	; (c68 <ED+0x130>)
     b96:	4798      	blx	r3
	switch(parameter)
     b98:	2801      	cmp	r0, #1
     b9a:	d004      	beq.n	ba6 <ED+0x6e>
     b9c:	2800      	cmp	r0, #0
     b9e:	d022      	beq.n	be6 <ED+0xae>
     ba0:	2802      	cmp	r0, #2
     ba2:	d13e      	bne.n	c22 <ED+0xea>
     ba4:	e7dc      	b.n	b60 <ED+0x28>
			for(int i = 0 ;  i <= xTemp ;  i++)
     ba6:	0025      	movs	r5, r4
     ba8:	2600      	movs	r6, #0
				xCharPos = i;
     baa:	4c2a      	ldr	r4, [pc, #168]	; (c54 <ED+0x11c>)
				drawChar(0x00);
     bac:	4f2d      	ldr	r7, [pc, #180]	; (c64 <ED+0x12c>)
				xCharPos = i;
     bae:	8026      	strh	r6, [r4, #0]
				drawChar(0x00);
     bb0:	2000      	movs	r0, #0
     bb2:	47b8      	blx	r7
			for(int i = 0 ;  i <= xTemp ;  i++)
     bb4:	3601      	adds	r6, #1
     bb6:	42ae      	cmp	r6, r5
     bb8:	ddf9      	ble.n	bae <ED+0x76>
			for(int j = 0 ; j < yTemp ; j++)
     bba:	46d3      	mov	fp, sl
     bbc:	2600      	movs	r6, #0
     bbe:	4653      	mov	r3, sl
     bc0:	2b00      	cmp	r3, #0
     bc2:	dd2e      	ble.n	c22 <ED+0xea>
					xCharPos = i;
     bc4:	4b23      	ldr	r3, [pc, #140]	; (c54 <ED+0x11c>)
     bc6:	469a      	mov	sl, r3
					yCharPos = j;
     bc8:	4d23      	ldr	r5, [pc, #140]	; (c58 <ED+0x120>)
					drawChar(0x00);
     bca:	4f26      	ldr	r7, [pc, #152]	; (c64 <ED+0x12c>)
			for(int i = 0 ;  i <= xTemp ;  i++)
     bcc:	2400      	movs	r4, #0
					xCharPos = i;
     bce:	4653      	mov	r3, sl
     bd0:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     bd2:	802e      	strh	r6, [r5, #0]
					drawChar(0x00);
     bd4:	2000      	movs	r0, #0
     bd6:	47b8      	blx	r7
				for(int i = 0 ; i < 80 ; i++)
     bd8:	3401      	adds	r4, #1
     bda:	2c50      	cmp	r4, #80	; 0x50
     bdc:	d1f7      	bne.n	bce <ED+0x96>
			for(int j = 0 ; j < yTemp ; j++)
     bde:	3601      	adds	r6, #1
     be0:	455e      	cmp	r6, fp
     be2:	dbf3      	blt.n	bcc <ED+0x94>
     be4:	e01d      	b.n	c22 <ED+0xea>
			for(int i = xTemp ;  i <= 78 ;  i++)
     be6:	2c4e      	cmp	r4, #78	; 0x4e
     be8:	dc07      	bgt.n	bfa <ED+0xc2>
				xCharPos = i;
     bea:	4f1a      	ldr	r7, [pc, #104]	; (c54 <ED+0x11c>)
				drawChar(0x00);
     bec:	4e1d      	ldr	r6, [pc, #116]	; (c64 <ED+0x12c>)
				xCharPos = i;
     bee:	803c      	strh	r4, [r7, #0]
				drawChar(0x00);
     bf0:	2000      	movs	r0, #0
     bf2:	47b0      	blx	r6
			for(int i = xTemp ;  i <= 78 ;  i++)
     bf4:	3401      	adds	r4, #1
     bf6:	2c4f      	cmp	r4, #79	; 0x4f
     bf8:	d1f9      	bne.n	bee <ED+0xb6>
			for(int j = yTemp+1 ; j < 24 ; j++)
     bfa:	4655      	mov	r5, sl
     bfc:	3501      	adds	r5, #1
     bfe:	2d17      	cmp	r5, #23
     c00:	dc0f      	bgt.n	c22 <ED+0xea>
					xCharPos = i;
     c02:	4b14      	ldr	r3, [pc, #80]	; (c54 <ED+0x11c>)
     c04:	469a      	mov	sl, r3
					yCharPos = j;
     c06:	4f14      	ldr	r7, [pc, #80]	; (c58 <ED+0x120>)
					drawChar(0x00);
     c08:	4e16      	ldr	r6, [pc, #88]	; (c64 <ED+0x12c>)
{
     c0a:	2400      	movs	r4, #0
					xCharPos = i;
     c0c:	4653      	mov	r3, sl
     c0e:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     c10:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     c12:	2000      	movs	r0, #0
     c14:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     c16:	3401      	adds	r4, #1
     c18:	2c50      	cmp	r4, #80	; 0x50
     c1a:	d1f7      	bne.n	c0c <ED+0xd4>
			for(int j = yTemp+1 ; j < 24 ; j++)
     c1c:	3501      	adds	r5, #1
     c1e:	2d18      	cmp	r5, #24
     c20:	d1f3      	bne.n	c0a <ED+0xd2>
				}
			}
		break;
	}
	
	blinkCursor();
     c22:	4b12      	ldr	r3, [pc, #72]	; (c6c <ED+0x134>)
     c24:	4798      	blx	r3
	xCharPos = xTemp;
     c26:	23ff      	movs	r3, #255	; 0xff
     c28:	4642      	mov	r2, r8
     c2a:	401a      	ands	r2, r3
     c2c:	4909      	ldr	r1, [pc, #36]	; (c54 <ED+0x11c>)
     c2e:	800a      	strh	r2, [r1, #0]
	yCharPos = yTemp;
     c30:	464a      	mov	r2, r9
     c32:	4013      	ands	r3, r2
     c34:	4a08      	ldr	r2, [pc, #32]	; (c58 <ED+0x120>)
     c36:	8013      	strh	r3, [r2, #0]
	drawChar(0x00);
     c38:	2000      	movs	r0, #0
     c3a:	4b0a      	ldr	r3, [pc, #40]	; (c64 <ED+0x12c>)
     c3c:	4798      	blx	r3
	
	currentState = stateGround;	
     c3e:	2200      	movs	r2, #0
     c40:	4b0b      	ldr	r3, [pc, #44]	; (c70 <ED+0x138>)
     c42:	701a      	strb	r2, [r3, #0]


}
     c44:	b003      	add	sp, #12
     c46:	bc3c      	pop	{r2, r3, r4, r5}
     c48:	4690      	mov	r8, r2
     c4a:	4699      	mov	r9, r3
     c4c:	46a2      	mov	sl, r4
     c4e:	46ab      	mov	fp, r5
     c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	200002e8 	.word	0x200002e8
     c58:	200002ea 	.word	0x200002ea
     c5c:	20000024 	.word	0x20000024
     c60:	00000241 	.word	0x00000241
     c64:	00003479 	.word	0x00003479
     c68:	00000255 	.word	0x00000255
     c6c:	000035f9 	.word	0x000035f9
     c70:	200002ed 	.word	0x200002ed

00000c74 <EL>:

void EL() //Edit In Line
{
     c74:	b5f0      	push	{r4, r5, r6, r7, lr}
     c76:	46d6      	mov	lr, sl
     c78:	464f      	mov	r7, r9
     c7a:	4646      	mov	r6, r8
     c7c:	b5c0      	push	{r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     c7e:	4b31      	ldr	r3, [pc, #196]	; (d44 <EL+0xd0>)
     c80:	881f      	ldrh	r7, [r3, #0]
     c82:	b2fc      	uxtb	r4, r7
	uint8_t yTemp = yCharPos;
     c84:	4b30      	ldr	r3, [pc, #192]	; (d48 <EL+0xd4>)
     c86:	881b      	ldrh	r3, [r3, #0]
     c88:	4698      	mov	r8, r3
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     c8a:	2200      	movs	r2, #0
     c8c:	4b2f      	ldr	r3, [pc, #188]	; (d4c <EL+0xd8>)
     c8e:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     c90:	4b2f      	ldr	r3, [pc, #188]	; (d50 <EL+0xdc>)
     c92:	4798      	blx	r3
     c94:	2800      	cmp	r0, #0
     c96:	d015      	beq.n	cc4 <EL+0x50>
	else
	{
		parameter = dequeueParam();
	}
	
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     c98:	4b2a      	ldr	r3, [pc, #168]	; (d44 <EL+0xd0>)
     c9a:	881a      	ldrh	r2, [r3, #0]
     c9c:	4b2a      	ldr	r3, [pc, #168]	; (d48 <EL+0xd4>)
     c9e:	8819      	ldrh	r1, [r3, #0]
     ca0:	0053      	lsls	r3, r2, #1
     ca2:	189b      	adds	r3, r3, r2
     ca4:	00db      	lsls	r3, r3, #3
     ca6:	4a2b      	ldr	r2, [pc, #172]	; (d54 <EL+0xe0>)
     ca8:	18d3      	adds	r3, r2, r3
     caa:	5c5b      	ldrb	r3, [r3, r1]
     cac:	4699      	mov	r9, r3
	
	switch(parameter)
	{
		case 0:			//Erases from cursor to end of line
			for(int i = xTemp ;  i <= 79 ;  i++)
     cae:	2c4f      	cmp	r4, #79	; 0x4f
     cb0:	dc24      	bgt.n	cfc <EL+0x88>
			{
				xCharPos = i;
     cb2:	4e24      	ldr	r6, [pc, #144]	; (d44 <EL+0xd0>)
				drawChar(0x00);
     cb4:	4d28      	ldr	r5, [pc, #160]	; (d58 <EL+0xe4>)
				xCharPos = i;
     cb6:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     cb8:	2000      	movs	r0, #0
     cba:	47a8      	blx	r5
			for(int i = xTemp ;  i <= 79 ;  i++)
     cbc:	3401      	adds	r4, #1
     cbe:	2c50      	cmp	r4, #80	; 0x50
     cc0:	d1f9      	bne.n	cb6 <EL+0x42>
     cc2:	e01b      	b.n	cfc <EL+0x88>
		parameter = dequeueParam();
     cc4:	4b25      	ldr	r3, [pc, #148]	; (d5c <EL+0xe8>)
     cc6:	4798      	blx	r3
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     cc8:	4b1e      	ldr	r3, [pc, #120]	; (d44 <EL+0xd0>)
     cca:	881a      	ldrh	r2, [r3, #0]
     ccc:	4b1e      	ldr	r3, [pc, #120]	; (d48 <EL+0xd4>)
     cce:	8819      	ldrh	r1, [r3, #0]
     cd0:	0053      	lsls	r3, r2, #1
     cd2:	189b      	adds	r3, r3, r2
     cd4:	00db      	lsls	r3, r3, #3
     cd6:	4a1f      	ldr	r2, [pc, #124]	; (d54 <EL+0xe0>)
     cd8:	18d3      	adds	r3, r2, r3
     cda:	5c5b      	ldrb	r3, [r3, r1]
     cdc:	4699      	mov	r9, r3
	switch(parameter)
     cde:	2801      	cmp	r0, #1
     ce0:	d021      	beq.n	d26 <EL+0xb2>
     ce2:	2800      	cmp	r0, #0
     ce4:	d0e3      	beq.n	cae <EL+0x3a>
     ce6:	2802      	cmp	r0, #2
     ce8:	d108      	bne.n	cfc <EL+0x88>
     cea:	2400      	movs	r4, #0
			break;
		
		case 2:			//Erases entire line containing cursor
			for(int i = 0 ;  i <= 78 ;  i++)
			{
				xCharPos = i;
     cec:	4e15      	ldr	r6, [pc, #84]	; (d44 <EL+0xd0>)
				drawChar(0x00);
     cee:	4d1a      	ldr	r5, [pc, #104]	; (d58 <EL+0xe4>)
				xCharPos = i;
     cf0:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     cf2:	2000      	movs	r0, #0
     cf4:	47a8      	blx	r5
			for(int i = 0 ;  i <= 78 ;  i++)
     cf6:	3401      	adds	r4, #1
     cf8:	2c4f      	cmp	r4, #79	; 0x4f
     cfa:	d1f9      	bne.n	cf0 <EL+0x7c>
			}
			break;
	}
	
	blinkCursor();
     cfc:	4b18      	ldr	r3, [pc, #96]	; (d60 <EL+0xec>)
     cfe:	4798      	blx	r3
	xCharPos = xTemp;
     d00:	23ff      	movs	r3, #255	; 0xff
     d02:	401f      	ands	r7, r3
     d04:	4a0f      	ldr	r2, [pc, #60]	; (d44 <EL+0xd0>)
     d06:	8017      	strh	r7, [r2, #0]
	yCharPos = yTemp;
     d08:	4642      	mov	r2, r8
     d0a:	4013      	ands	r3, r2
     d0c:	4a0e      	ldr	r2, [pc, #56]	; (d48 <EL+0xd4>)
     d0e:	8013      	strh	r3, [r2, #0]
	drawChar(tempCharacter);
     d10:	4648      	mov	r0, r9
     d12:	4b11      	ldr	r3, [pc, #68]	; (d58 <EL+0xe4>)
     d14:	4798      	blx	r3
	
	currentState = stateGround;	
     d16:	2200      	movs	r2, #0
     d18:	4b12      	ldr	r3, [pc, #72]	; (d64 <EL+0xf0>)
     d1a:	701a      	strb	r2, [r3, #0]
}
     d1c:	bc1c      	pop	{r2, r3, r4}
     d1e:	4690      	mov	r8, r2
     d20:	4699      	mov	r9, r3
     d22:	46a2      	mov	sl, r4
     d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     d26:	3401      	adds	r4, #1
     d28:	2500      	movs	r5, #0
     d2a:	2c00      	cmp	r4, #0
     d2c:	dbe6      	blt.n	cfc <EL+0x88>
				xCharPos = i;
     d2e:	4b05      	ldr	r3, [pc, #20]	; (d44 <EL+0xd0>)
     d30:	469a      	mov	sl, r3
				drawChar(0x00);
     d32:	4e09      	ldr	r6, [pc, #36]	; (d58 <EL+0xe4>)
				xCharPos = i;
     d34:	4653      	mov	r3, sl
     d36:	801d      	strh	r5, [r3, #0]
				drawChar(0x00);
     d38:	2000      	movs	r0, #0
     d3a:	47b0      	blx	r6
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     d3c:	3501      	adds	r5, #1
     d3e:	42a5      	cmp	r5, r4
     d40:	ddf8      	ble.n	d34 <EL+0xc0>
     d42:	e7db      	b.n	cfc <EL+0x88>
     d44:	200002e8 	.word	0x200002e8
     d48:	200002ea 	.word	0x200002ea
     d4c:	20000024 	.word	0x20000024
     d50:	00000241 	.word	0x00000241
     d54:	200003f8 	.word	0x200003f8
     d58:	00003479 	.word	0x00003479
     d5c:	00000255 	.word	0x00000255
     d60:	000035f9 	.word	0x000035f9
     d64:	200002ed 	.word	0x200002ed

00000d68 <SGR>:

void SGR() //Select Graphic Rendition
{
     d68:	b570      	push	{r4, r5, r6, lr}
	//Oh boy here we go
	uint8_t parameter;
		
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     d6a:	2200      	movs	r2, #0
     d6c:	4b24      	ldr	r3, [pc, #144]	; (e00 <SGR+0x98>)
     d6e:	701a      	strb	r2, [r3, #0]
		
	if(isEmptyParam())
     d70:	4b24      	ldr	r3, [pc, #144]	; (e04 <SGR+0x9c>)
     d72:	4798      	blx	r3
     d74:	2800      	cmp	r0, #0
     d76:	d102      	bne.n	d7e <SGR+0x16>
		textBackground = defaultBackgroundColor;
							
	}
	else
	{
		while(!isEmptyParam())
     d78:	4c22      	ldr	r4, [pc, #136]	; (e04 <SGR+0x9c>)
		{
			parameter = dequeueParam();
     d7a:	4d23      	ldr	r5, [pc, #140]	; (e08 <SGR+0xa0>)
     d7c:	e029      	b.n	dd2 <SGR+0x6a>
		textBold = false;
     d7e:	2300      	movs	r3, #0
     d80:	4a22      	ldr	r2, [pc, #136]	; (e0c <SGR+0xa4>)
     d82:	7013      	strb	r3, [r2, #0]
		textUnderscore = false;
     d84:	4a22      	ldr	r2, [pc, #136]	; (e10 <SGR+0xa8>)
     d86:	7013      	strb	r3, [r2, #0]
		textBlink = false;
     d88:	4a22      	ldr	r2, [pc, #136]	; (e14 <SGR+0xac>)
     d8a:	7013      	strb	r3, [r2, #0]
		textReverseVideo = false;
     d8c:	4a22      	ldr	r2, [pc, #136]	; (e18 <SGR+0xb0>)
     d8e:	7013      	strb	r3, [r2, #0]
		textForeground = defaultForegroundColor;
     d90:	4b22      	ldr	r3, [pc, #136]	; (e1c <SGR+0xb4>)
     d92:	881a      	ldrh	r2, [r3, #0]
     d94:	4b22      	ldr	r3, [pc, #136]	; (e20 <SGR+0xb8>)
     d96:	801a      	strh	r2, [r3, #0]
		textBackground = defaultBackgroundColor;
     d98:	4b22      	ldr	r3, [pc, #136]	; (e24 <SGR+0xbc>)
     d9a:	881a      	ldrh	r2, [r3, #0]
     d9c:	4b22      	ldr	r3, [pc, #136]	; (e28 <SGR+0xc0>)
     d9e:	801a      	strh	r2, [r3, #0]
				
			}
		}	
	}
	
	blinkCursor();
     da0:	4b22      	ldr	r3, [pc, #136]	; (e2c <SGR+0xc4>)
     da2:	4798      	blx	r3
	currentState = stateGround;
     da4:	2200      	movs	r2, #0
     da6:	4b22      	ldr	r3, [pc, #136]	; (e30 <SGR+0xc8>)
     da8:	701a      	strb	r2, [r3, #0]
}
     daa:	bd70      	pop	{r4, r5, r6, pc}
			switch(parameter)
     dac:	2800      	cmp	r0, #0
     dae:	d110      	bne.n	dd2 <SGR+0x6a>
					textBold = false;
     db0:	2300      	movs	r3, #0
     db2:	4a16      	ldr	r2, [pc, #88]	; (e0c <SGR+0xa4>)
     db4:	7013      	strb	r3, [r2, #0]
					textUnderscore = false;
     db6:	4a16      	ldr	r2, [pc, #88]	; (e10 <SGR+0xa8>)
     db8:	7013      	strb	r3, [r2, #0]
					textBlink = false;
     dba:	4a16      	ldr	r2, [pc, #88]	; (e14 <SGR+0xac>)
     dbc:	7013      	strb	r3, [r2, #0]
					textReverseVideo = false;
     dbe:	4a16      	ldr	r2, [pc, #88]	; (e18 <SGR+0xb0>)
     dc0:	7013      	strb	r3, [r2, #0]
					textForeground = defaultForegroundColor;
     dc2:	4b16      	ldr	r3, [pc, #88]	; (e1c <SGR+0xb4>)
     dc4:	881a      	ldrh	r2, [r3, #0]
     dc6:	4b16      	ldr	r3, [pc, #88]	; (e20 <SGR+0xb8>)
     dc8:	801a      	strh	r2, [r3, #0]
					textBackground = defaultBackgroundColor;
     dca:	4b16      	ldr	r3, [pc, #88]	; (e24 <SGR+0xbc>)
     dcc:	881a      	ldrh	r2, [r3, #0]
     dce:	4b16      	ldr	r3, [pc, #88]	; (e28 <SGR+0xc0>)
     dd0:	801a      	strh	r2, [r3, #0]
		while(!isEmptyParam())
     dd2:	47a0      	blx	r4
     dd4:	2800      	cmp	r0, #0
     dd6:	d1e3      	bne.n	da0 <SGR+0x38>
			parameter = dequeueParam();
     dd8:	47a8      	blx	r5
			switch(parameter)
     dda:	2807      	cmp	r0, #7
     ddc:	d008      	beq.n	df0 <SGR+0x88>
     dde:	d9e5      	bls.n	dac <SGR+0x44>
     de0:	2816      	cmp	r0, #22
     de2:	d009      	beq.n	df8 <SGR+0x90>
     de4:	281b      	cmp	r0, #27
     de6:	d1f4      	bne.n	dd2 <SGR+0x6a>
					textReverseVideo = false;
     de8:	2200      	movs	r2, #0
     dea:	4b0b      	ldr	r3, [pc, #44]	; (e18 <SGR+0xb0>)
     dec:	701a      	strb	r2, [r3, #0]
					break;
     dee:	e7f0      	b.n	dd2 <SGR+0x6a>
					textReverseVideo = true;
     df0:	2201      	movs	r2, #1
     df2:	4b09      	ldr	r3, [pc, #36]	; (e18 <SGR+0xb0>)
     df4:	701a      	strb	r2, [r3, #0]
					break;
     df6:	e7ec      	b.n	dd2 <SGR+0x6a>
					textBold = false;
     df8:	2200      	movs	r2, #0
     dfa:	4b04      	ldr	r3, [pc, #16]	; (e0c <SGR+0xa4>)
     dfc:	701a      	strb	r2, [r3, #0]
					break;
     dfe:	e7e8      	b.n	dd2 <SGR+0x6a>
     e00:	20000024 	.word	0x20000024
     e04:	00000241 	.word	0x00000241
     e08:	00000255 	.word	0x00000255
     e0c:	2000038a 	.word	0x2000038a
     e10:	20000364 	.word	0x20000364
     e14:	20000368 	.word	0x20000368
     e18:	2000038c 	.word	0x2000038c
     e1c:	20000186 	.word	0x20000186
     e20:	20000388 	.word	0x20000388
     e24:	200002ee 	.word	0x200002ee
     e28:	20000366 	.word	0x20000366
     e2c:	000035f9 	.word	0x000035f9
     e30:	200002ed 	.word	0x200002ed

00000e34 <DSR>:
void ICH(void) //Insert indicated # of blank chars
{
	currentState = stateGround;
}
void DSR(void)
{
     e34:	b5f0      	push	{r4, r5, r6, r7, lr}
     e36:	46ce      	mov	lr, r9
     e38:	4647      	mov	r7, r8
     e3a:	b580      	push	{r7, lr}
     e3c:	b087      	sub	sp, #28
	
	This function will support both ANSI and DEC formats
	*/
	unsigned char tempCharacter;
		
	uint8_t xTemp = xCharPos;
     e3e:	4b36      	ldr	r3, [pc, #216]	; (f18 <DSR+0xe4>)
     e40:	881d      	ldrh	r5, [r3, #0]
	uint8_t yTemp = yCharPos;
     e42:	4b36      	ldr	r3, [pc, #216]	; (f1c <DSR+0xe8>)
     e44:	881e      	ldrh	r6, [r3, #0]
	
	char DSROSResponse[] = {0x1b, 0x5b, 0x30, 0x6e};
     e46:	4b36      	ldr	r3, [pc, #216]	; (f20 <DSR+0xec>)
     e48:	681b      	ldr	r3, [r3, #0]
     e4a:	9305      	str	r3, [sp, #20]
	
	char stringResponse[10];
	char tempbuffer[5];
		
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     e4c:	2200      	movs	r2, #0
     e4e:	4b35      	ldr	r3, [pc, #212]	; (f24 <DSR+0xf0>)
     e50:	701a      	strb	r2, [r3, #0]
		
	tempCharacter = dequeueParser();
     e52:	4b35      	ldr	r3, [pc, #212]	; (f28 <DSR+0xf4>)
     e54:	4798      	blx	r3
     e56:	0004      	movs	r4, r0
	
	if(!isEmptyParam()) //We are in DEC format
     e58:	4b34      	ldr	r3, [pc, #208]	; (f2c <DSR+0xf8>)
     e5a:	4798      	blx	r3
     e5c:	2800      	cmp	r0, #0
     e5e:	d018      	beq.n	e92 <DSR+0x5e>
	{
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
	}
	
	switch(tempCharacter){
     e60:	2c05      	cmp	r4, #5
     e62:	d01a      	beq.n	e9a <DSR+0x66>
     e64:	2c06      	cmp	r4, #6
     e66:	d01d      	beq.n	ea4 <DSR+0x70>
		
			printf("%s",stringResponse);
		break;
	}
	
	stringResponse[0] = '\0';
     e68:	2400      	movs	r4, #0
     e6a:	ab02      	add	r3, sp, #8
     e6c:	701c      	strb	r4, [r3, #0]
	tempbuffer[0] = '\0';
     e6e:	466b      	mov	r3, sp
     e70:	701c      	strb	r4, [r3, #0]
		
	blinkCursor();
     e72:	4b2f      	ldr	r3, [pc, #188]	; (f30 <DSR+0xfc>)
     e74:	4798      	blx	r3
	xCharPos = xTemp;
     e76:	23ff      	movs	r3, #255	; 0xff
     e78:	401d      	ands	r5, r3
     e7a:	4a27      	ldr	r2, [pc, #156]	; (f18 <DSR+0xe4>)
     e7c:	8015      	strh	r5, [r2, #0]
	yCharPos = yTemp;
     e7e:	4033      	ands	r3, r6
     e80:	4a26      	ldr	r2, [pc, #152]	; (f1c <DSR+0xe8>)
     e82:	8013      	strh	r3, [r2, #0]
	currentState = stateGround;
     e84:	4b2b      	ldr	r3, [pc, #172]	; (f34 <DSR+0x100>)
     e86:	701c      	strb	r4, [r3, #0]
}
     e88:	b007      	add	sp, #28
     e8a:	bc0c      	pop	{r2, r3}
     e8c:	4690      	mov	r8, r2
     e8e:	4699      	mov	r9, r3
     e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
     e92:	4b29      	ldr	r3, [pc, #164]	; (f38 <DSR+0x104>)
     e94:	4798      	blx	r3
     e96:	0004      	movs	r4, r0
     e98:	e7e2      	b.n	e60 <DSR+0x2c>
			printf("%s",DSROSResponse);
     e9a:	a905      	add	r1, sp, #20
     e9c:	4827      	ldr	r0, [pc, #156]	; (f3c <DSR+0x108>)
     e9e:	4b28      	ldr	r3, [pc, #160]	; (f40 <DSR+0x10c>)
     ea0:	4798      	blx	r3
		break;
     ea2:	e7e1      	b.n	e68 <DSR+0x34>
			strcat(stringResponse,"\x1B");
     ea4:	a802      	add	r0, sp, #8
     ea6:	4f27      	ldr	r7, [pc, #156]	; (f44 <DSR+0x110>)
     ea8:	47b8      	blx	r7
     eaa:	ab02      	add	r3, sp, #8
     eac:	469c      	mov	ip, r3
     eae:	4460      	add	r0, ip
     eb0:	2202      	movs	r2, #2
     eb2:	4925      	ldr	r1, [pc, #148]	; (f48 <DSR+0x114>)
     eb4:	4c25      	ldr	r4, [pc, #148]	; (f4c <DSR+0x118>)
     eb6:	47a0      	blx	r4
			strcat(stringResponse,"\x5B");
     eb8:	a802      	add	r0, sp, #8
     eba:	47b8      	blx	r7
     ebc:	ab02      	add	r3, sp, #8
     ebe:	469c      	mov	ip, r3
     ec0:	4460      	add	r0, ip
     ec2:	2202      	movs	r2, #2
     ec4:	4922      	ldr	r1, [pc, #136]	; (f50 <DSR+0x11c>)
     ec6:	47a0      	blx	r4
			strcat(stringResponse,itoa(yTemp,tempbuffer,10));
     ec8:	b2f0      	uxtb	r0, r6
     eca:	220a      	movs	r2, #10
     ecc:	4669      	mov	r1, sp
     ece:	4b21      	ldr	r3, [pc, #132]	; (f54 <DSR+0x120>)
     ed0:	4699      	mov	r9, r3
     ed2:	4798      	blx	r3
     ed4:	0001      	movs	r1, r0
     ed6:	a802      	add	r0, sp, #8
     ed8:	4b1f      	ldr	r3, [pc, #124]	; (f58 <DSR+0x124>)
     eda:	4698      	mov	r8, r3
     edc:	4798      	blx	r3
			strcat(stringResponse,";");
     ede:	a802      	add	r0, sp, #8
     ee0:	47b8      	blx	r7
     ee2:	ab02      	add	r3, sp, #8
     ee4:	469c      	mov	ip, r3
     ee6:	4460      	add	r0, ip
     ee8:	2202      	movs	r2, #2
     eea:	491c      	ldr	r1, [pc, #112]	; (f5c <DSR+0x128>)
     eec:	47a0      	blx	r4
			strcat(stringResponse,itoa(xTemp,tempbuffer,10));
     eee:	b2e8      	uxtb	r0, r5
     ef0:	220a      	movs	r2, #10
     ef2:	4669      	mov	r1, sp
     ef4:	47c8      	blx	r9
     ef6:	0001      	movs	r1, r0
     ef8:	a802      	add	r0, sp, #8
     efa:	47c0      	blx	r8
			strcat(stringResponse,"R");
     efc:	a802      	add	r0, sp, #8
     efe:	47b8      	blx	r7
     f00:	ab02      	add	r3, sp, #8
     f02:	469c      	mov	ip, r3
     f04:	4460      	add	r0, ip
     f06:	2202      	movs	r2, #2
     f08:	4915      	ldr	r1, [pc, #84]	; (f60 <DSR+0x12c>)
     f0a:	47a0      	blx	r4
			printf("%s",stringResponse);
     f0c:	a902      	add	r1, sp, #8
     f0e:	480b      	ldr	r0, [pc, #44]	; (f3c <DSR+0x108>)
     f10:	4b0b      	ldr	r3, [pc, #44]	; (f40 <DSR+0x10c>)
     f12:	4798      	blx	r3
		break;
     f14:	e7a8      	b.n	e68 <DSR+0x34>
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	200002e8 	.word	0x200002e8
     f1c:	200002ea 	.word	0x200002ea
     f20:	00005dfc 	.word	0x00005dfc
     f24:	20000024 	.word	0x20000024
     f28:	000001e5 	.word	0x000001e5
     f2c:	00000241 	.word	0x00000241
     f30:	000035f9 	.word	0x000035f9
     f34:	200002ed 	.word	0x200002ed
     f38:	00000255 	.word	0x00000255
     f3c:	00005f74 	.word	0x00005f74
     f40:	00004d61 	.word	0x00004d61
     f44:	0000503b 	.word	0x0000503b
     f48:	00005f48 	.word	0x00005f48
     f4c:	00004bed 	.word	0x00004bed
     f50:	00005f4c 	.word	0x00005f4c
     f54:	00004bd1 	.word	0x00004bd1
     f58:	00005021 	.word	0x00005021
     f5c:	00006260 	.word	0x00006260
     f60:	00005f50 	.word	0x00005f50

00000f64 <isValidCSIEscapeCode>:
bool isValidCSIEscapeCode(uint8_t character)
{
	
	for(uint8_t i = 0; i <= sizeof(csiEscCodes)/sizeof(csiEscCodes[0]) ; i++)
	{
		if(character == csiEscCodes[i])
     f64:	2840      	cmp	r0, #64	; 0x40
     f66:	d006      	beq.n	f76 <isValidCSIEscapeCode+0x12>
     f68:	4b04      	ldr	r3, [pc, #16]	; (f7c <isValidCSIEscapeCode+0x18>)
     f6a:	3301      	adds	r3, #1
     f6c:	3301      	adds	r3, #1
     f6e:	1e5a      	subs	r2, r3, #1
     f70:	7812      	ldrb	r2, [r2, #0]
     f72:	4282      	cmp	r2, r0
     f74:	d1fa      	bne.n	f6c <isValidCSIEscapeCode+0x8>
		{
			return true;	
		}
	}
	return false;
}
     f76:	2001      	movs	r0, #1
     f78:	4770      	bx	lr
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	00005f54 	.word	0x00005f54

00000f80 <CSIparamState>:
{
     f80:	b510      	push	{r4, lr}
     f82:	0004      	movs	r4, r0
	if(character >= 0x30 && character <= 0x39)		//character is a digit, put it in the buffer
     f84:	0003      	movs	r3, r0
     f86:	3b30      	subs	r3, #48	; 0x30
     f88:	2b09      	cmp	r3, #9
     f8a:	d90b      	bls.n	fa4 <CSIparamState+0x24>
	else if(character == 0x3B)					//character is ';', now we take items out of 
     f8c:	283b      	cmp	r0, #59	; 0x3b
     f8e:	d00c      	beq.n	faa <CSIparamState+0x2a>
	else if(character == 0x3F)					//character is '?', this is used for DECCKM
     f90:	283f      	cmp	r0, #63	; 0x3f
     f92:	d00e      	beq.n	fb2 <CSIparamState+0x32>
	else if(isValidCSIEscapeCode(character))		//character matches a supported escape code
     f94:	4b0d      	ldr	r3, [pc, #52]	; (fcc <CSIparamState+0x4c>)
     f96:	4798      	blx	r3
     f98:	2800      	cmp	r0, #0
     f9a:	d10e      	bne.n	fba <CSIparamState+0x3a>
		currentState = stateCSIignore;
     f9c:	2205      	movs	r2, #5
     f9e:	4b0c      	ldr	r3, [pc, #48]	; (fd0 <CSIparamState+0x50>)
     fa0:	701a      	strb	r2, [r3, #0]
}
     fa2:	bd10      	pop	{r4, pc}
		enqueueParser(character);
     fa4:	4b0b      	ldr	r3, [pc, #44]	; (fd4 <CSIparamState+0x54>)
     fa6:	4798      	blx	r3
     fa8:	e7fb      	b.n	fa2 <CSIparamState+0x22>
		enqueueParser(';');						//parambuffer 			
     faa:	203b      	movs	r0, #59	; 0x3b
     fac:	4b09      	ldr	r3, [pc, #36]	; (fd4 <CSIparamState+0x54>)
     fae:	4798      	blx	r3
     fb0:	e7f7      	b.n	fa2 <CSIparamState+0x22>
		enqueueParser('?');						//the terminating character
     fb2:	203f      	movs	r0, #63	; 0x3f
     fb4:	4b07      	ldr	r3, [pc, #28]	; (fd4 <CSIparamState+0x54>)
     fb6:	4798      	blx	r3
     fb8:	e7f3      	b.n	fa2 <CSIparamState+0x22>
		queueTransmogrifier();											
     fba:	4b07      	ldr	r3, [pc, #28]	; (fd8 <CSIparamState+0x58>)
     fbc:	4798      	blx	r3
		currentState = stateCSIentry;
     fbe:	2203      	movs	r2, #3
     fc0:	4b03      	ldr	r3, [pc, #12]	; (fd0 <CSIparamState+0x50>)
     fc2:	701a      	strb	r2, [r3, #0]
		CSIentryState(character);
     fc4:	0020      	movs	r0, r4
     fc6:	4b05      	ldr	r3, [pc, #20]	; (fdc <CSIparamState+0x5c>)
     fc8:	4798      	blx	r3
     fca:	e7ea      	b.n	fa2 <CSIparamState+0x22>
     fcc:	00000f65 	.word	0x00000f65
     fd0:	200002ed 	.word	0x200002ed
     fd4:	00000215 	.word	0x00000215
     fd8:	00000309 	.word	0x00000309
     fdc:	00000fe1 	.word	0x00000fe1

00000fe0 <CSIentryState>:
{
     fe0:	b510      	push	{r4, lr}
	if(character == 0x40)		//ESC [ @ ICH insert indicated # of blank chars
     fe2:	2840      	cmp	r0, #64	; 0x40
     fe4:	d076      	beq.n	10d4 <CSIentryState+0xf4>
	else if(character == 0x41)	//ESC [ A	Cursor Up
     fe6:	2841      	cmp	r0, #65	; 0x41
     fe8:	d100      	bne.n	fec <CSIentryState+0xc>
     fea:	e077      	b.n	10dc <CSIentryState+0xfc>
	else if(character == 0x61)	//ESC [ a HPR
     fec:	2861      	cmp	r0, #97	; 0x61
     fee:	d100      	bne.n	ff2 <CSIentryState+0x12>
     ff0:	e077      	b.n	10e2 <CSIentryState+0x102>
	else if(character == 0x42)	//ESC [ B	Cursor Down
     ff2:	2842      	cmp	r0, #66	; 0x42
     ff4:	d100      	bne.n	ff8 <CSIentryState+0x18>
     ff6:	e077      	b.n	10e8 <CSIentryState+0x108>
	else if(character == 0x43)	//ESC [ C	Cursor Forward
     ff8:	2843      	cmp	r0, #67	; 0x43
     ffa:	d100      	bne.n	ffe <CSIentryState+0x1e>
     ffc:	e077      	b.n	10ee <CSIentryState+0x10e>
	else if(character == 0x63)	//ESC [ c DA
     ffe:	2863      	cmp	r0, #99	; 0x63
    1000:	d100      	bne.n	1004 <CSIentryState+0x24>
    1002:	e077      	b.n	10f4 <CSIentryState+0x114>
	else if(character == 0x44)	//ESC [ D	Cursor Backward
    1004:	2844      	cmp	r0, #68	; 0x44
    1006:	d100      	bne.n	100a <CSIentryState+0x2a>
    1008:	e07c      	b.n	1104 <CSIentryState+0x124>
	else if(character == 0x64)	//ESC [ d	VPA
    100a:	2864      	cmp	r0, #100	; 0x64
    100c:	d065      	beq.n	10da <CSIentryState+0xfa>
	else if(character == 0x45)	//ESC [ E	Cursor Next Line
    100e:	2845      	cmp	r0, #69	; 0x45
    1010:	d100      	bne.n	1014 <CSIentryState+0x34>
    1012:	e07a      	b.n	110a <CSIentryState+0x12a>
	else if(character == 0x65)	//ESC [ e VPR
    1014:	2865      	cmp	r0, #101	; 0x65
    1016:	d100      	bne.n	101a <CSIentryState+0x3a>
    1018:	e07a      	b.n	1110 <CSIentryState+0x130>
	else if(character == 0x46)	//ESC [ F	Cursor Preceding Line
    101a:	2846      	cmp	r0, #70	; 0x46
    101c:	d100      	bne.n	1020 <CSIentryState+0x40>
    101e:	e07a      	b.n	1116 <CSIentryState+0x136>
	else if(character == 0x66)	//ESC [ f HVP
    1020:	2866      	cmp	r0, #102	; 0x66
    1022:	d100      	bne.n	1026 <CSIentryState+0x46>
    1024:	e07a      	b.n	111c <CSIentryState+0x13c>
	else if(character == 0x47)	//ESC [ G	Cursor Horizontal Absolute
    1026:	2847      	cmp	r0, #71	; 0x47
    1028:	d100      	bne.n	102c <CSIentryState+0x4c>
    102a:	e07a      	b.n	1122 <CSIentryState+0x142>
	else if(character == 0x67)	//ESC [ g TBC
    102c:	2867      	cmp	r0, #103	; 0x67
    102e:	d100      	bne.n	1032 <CSIentryState+0x52>
    1030:	e07a      	b.n	1128 <CSIentryState+0x148>
	else if(character == 0x48)	//ESC [ H	Cursor Position
    1032:	2848      	cmp	r0, #72	; 0x48
    1034:	d100      	bne.n	1038 <CSIentryState+0x58>
    1036:	e07b      	b.n	1130 <CSIentryState+0x150>
	else if(character == 0x68)	//ESC [ h Set Mode
    1038:	2868      	cmp	r0, #104	; 0x68
    103a:	d100      	bne.n	103e <CSIentryState+0x5e>
    103c:	e07b      	b.n	1136 <CSIentryState+0x156>
	else if(character == 0x49)	//ESC [ I	Cursor Horizontal Tab
    103e:	2849      	cmp	r0, #73	; 0x49
    1040:	d100      	bne.n	1044 <CSIentryState+0x64>
    1042:	e07c      	b.n	113e <CSIentryState+0x15e>
	else if(character == 0x4A)	//ESC [ J	Erase In Display
    1044:	284a      	cmp	r0, #74	; 0x4a
    1046:	d100      	bne.n	104a <CSIentryState+0x6a>
    1048:	e07d      	b.n	1146 <CSIentryState+0x166>
	else if(character == 0x4B)	//ESC [ K	Erase In Line
    104a:	284b      	cmp	r0, #75	; 0x4b
    104c:	d100      	bne.n	1050 <CSIentryState+0x70>
    104e:	e07d      	b.n	114c <CSIentryState+0x16c>
	else if(character == 0x4C)	//ESC [ L 
    1050:	284c      	cmp	r0, #76	; 0x4c
    1052:	d100      	bne.n	1056 <CSIentryState+0x76>
    1054:	e07d      	b.n	1152 <CSIentryState+0x172>
	else if(character == 0x6C)	//ESC [ l	Reset mode
    1056:	286c      	cmp	r0, #108	; 0x6c
    1058:	d100      	bne.n	105c <CSIentryState+0x7c>
    105a:	e07e      	b.n	115a <CSIentryState+0x17a>
	else if(character == 0x4D)	//ESC [ M
    105c:	284d      	cmp	r0, #77	; 0x4d
    105e:	d100      	bne.n	1062 <CSIentryState+0x82>
    1060:	e07f      	b.n	1162 <CSIentryState+0x182>
	else if(character == 0x6D)	//ESC [ m	Select Graphic Rendition
    1062:	286d      	cmp	r0, #109	; 0x6d
    1064:	d100      	bne.n	1068 <CSIentryState+0x88>
    1066:	e080      	b.n	116a <CSIentryState+0x18a>
	else if(character == 0x6E)	//ESC [ n Device Status Report
    1068:	286e      	cmp	r0, #110	; 0x6e
    106a:	d100      	bne.n	106e <CSIentryState+0x8e>
    106c:	e080      	b.n	1170 <CSIentryState+0x190>
	else if(character == 0x50)	//ESC [ P	Delete Character
    106e:	2850      	cmp	r0, #80	; 0x50
    1070:	d100      	bne.n	1074 <CSIentryState+0x94>
    1072:	e080      	b.n	1176 <CSIentryState+0x196>
	else if(character == 0x51)	//ESC [ Q	Select Edit Extent Mode
    1074:	2851      	cmp	r0, #81	; 0x51
    1076:	d100      	bne.n	107a <CSIentryState+0x9a>
    1078:	e081      	b.n	117e <CSIentryState+0x19e>
	else if(character == 0x71)	//ESC [ q	Set Keyboard LEDs
    107a:	2871      	cmp	r0, #113	; 0x71
    107c:	d100      	bne.n	1080 <CSIentryState+0xa0>
    107e:	e082      	b.n	1186 <CSIentryState+0x1a6>
	else if(character == 0x72)	//ESC [ r	DECSTBM
    1080:	2872      	cmp	r0, #114	; 0x72
    1082:	d100      	bne.n	1086 <CSIentryState+0xa6>
    1084:	e083      	b.n	118e <CSIentryState+0x1ae>
	else if(character == 0x73)	//ESC [ s	Save Cursor Position
    1086:	2873      	cmp	r0, #115	; 0x73
    1088:	d100      	bne.n	108c <CSIentryState+0xac>
    108a:	e084      	b.n	1196 <CSIentryState+0x1b6>
	else if(character == 0x75)	//ESC [ u	Restore Cursor Position
    108c:	2875      	cmp	r0, #117	; 0x75
    108e:	d100      	bne.n	1092 <CSIentryState+0xb2>
    1090:	e084      	b.n	119c <CSIentryState+0x1bc>
	else if(character == 0x58)	//ESC [ X
    1092:	2858      	cmp	r0, #88	; 0x58
    1094:	d100      	bne.n	1098 <CSIentryState+0xb8>
    1096:	e084      	b.n	11a2 <CSIentryState+0x1c2>
	else if(character == 0x57)	//ESC [ W	Cursor Tabulation Control
    1098:	2857      	cmp	r0, #87	; 0x57
    109a:	d100      	bne.n	109e <CSIentryState+0xbe>
    109c:	e085      	b.n	11aa <CSIentryState+0x1ca>
	else if(character == 0x5A)	//ESC [ Z	Cursor Backwards Tab
    109e:	285a      	cmp	r0, #90	; 0x5a
    10a0:	d100      	bne.n	10a4 <CSIentryState+0xc4>
    10a2:	e086      	b.n	11b2 <CSIentryState+0x1d2>
	else if(character == 0x60)	//ESC [ ` HPA
    10a4:	2860      	cmp	r0, #96	; 0x60
    10a6:	d100      	bne.n	10aa <CSIentryState+0xca>
    10a8:	e087      	b.n	11ba <CSIentryState+0x1da>
	else if(character >= 0x30 && character <= 0x39) // if the character is a digit 0-9
    10aa:	0003      	movs	r3, r0
    10ac:	3b30      	subs	r3, #48	; 0x30
    10ae:	2b09      	cmp	r3, #9
    10b0:	d800      	bhi.n	10b4 <CSIentryState+0xd4>
    10b2:	e086      	b.n	11c2 <CSIentryState+0x1e2>
	else if(character == 0x3B)	//Semicolon ; parameter deliminator
    10b4:	283b      	cmp	r0, #59	; 0x3b
    10b6:	d100      	bne.n	10ba <CSIentryState+0xda>
    10b8:	e089      	b.n	11ce <CSIentryState+0x1ee>
	else if(character == 0x3F)	//Question '?'; this is a param
    10ba:	283f      	cmp	r0, #63	; 0x3f
    10bc:	d100      	bne.n	10c0 <CSIentryState+0xe0>
    10be:	e08c      	b.n	11da <CSIentryState+0x1fa>
	else if(character == 0x1B)		//ESC, send back to stateESC
    10c0:	281b      	cmp	r0, #27
    10c2:	d100      	bne.n	10c6 <CSIentryState+0xe6>
    10c4:	e08f      	b.n	11e6 <CSIentryState+0x206>
	else if(character == 0x3A)
    10c6:	283a      	cmp	r0, #58	; 0x3a
    10c8:	d100      	bne.n	10cc <CSIentryState+0xec>
    10ca:	e090      	b.n	11ee <CSIentryState+0x20e>
		currentState = stateGround;
    10cc:	2200      	movs	r2, #0
    10ce:	4b4a      	ldr	r3, [pc, #296]	; (11f8 <CSIentryState+0x218>)
    10d0:	701a      	strb	r2, [r3, #0]
}
    10d2:	e002      	b.n	10da <CSIentryState+0xfa>
	currentState = stateGround;
    10d4:	2200      	movs	r2, #0
    10d6:	4b48      	ldr	r3, [pc, #288]	; (11f8 <CSIentryState+0x218>)
    10d8:	701a      	strb	r2, [r3, #0]
}
    10da:	bd10      	pop	{r4, pc}
		CUU();
    10dc:	4b47      	ldr	r3, [pc, #284]	; (11fc <CSIentryState+0x21c>)
    10de:	4798      	blx	r3
    10e0:	e7fb      	b.n	10da <CSIentryState+0xfa>
		CUF();
    10e2:	4b47      	ldr	r3, [pc, #284]	; (1200 <CSIentryState+0x220>)
    10e4:	4798      	blx	r3
    10e6:	e7f8      	b.n	10da <CSIentryState+0xfa>
		CUD();
    10e8:	4b46      	ldr	r3, [pc, #280]	; (1204 <CSIentryState+0x224>)
    10ea:	4798      	blx	r3
    10ec:	e7f5      	b.n	10da <CSIentryState+0xfa>
		CUF();
    10ee:	4b44      	ldr	r3, [pc, #272]	; (1200 <CSIentryState+0x220>)
    10f0:	4798      	blx	r3
    10f2:	e7f2      	b.n	10da <CSIentryState+0xfa>
		printf("%s",DECIDreturn);
    10f4:	4944      	ldr	r1, [pc, #272]	; (1208 <CSIentryState+0x228>)
    10f6:	4845      	ldr	r0, [pc, #276]	; (120c <CSIentryState+0x22c>)
    10f8:	4b45      	ldr	r3, [pc, #276]	; (1210 <CSIentryState+0x230>)
    10fa:	4798      	blx	r3
		currentState = stateGround;
    10fc:	2200      	movs	r2, #0
    10fe:	4b3e      	ldr	r3, [pc, #248]	; (11f8 <CSIentryState+0x218>)
    1100:	701a      	strb	r2, [r3, #0]
    1102:	e7ea      	b.n	10da <CSIentryState+0xfa>
		CUB();
    1104:	4b43      	ldr	r3, [pc, #268]	; (1214 <CSIentryState+0x234>)
    1106:	4798      	blx	r3
    1108:	e7e7      	b.n	10da <CSIentryState+0xfa>
		CNL();
    110a:	4b43      	ldr	r3, [pc, #268]	; (1218 <CSIentryState+0x238>)
    110c:	4798      	blx	r3
    110e:	e7e4      	b.n	10da <CSIentryState+0xfa>
		CUD();
    1110:	4b3c      	ldr	r3, [pc, #240]	; (1204 <CSIentryState+0x224>)
    1112:	4798      	blx	r3
    1114:	e7e1      	b.n	10da <CSIentryState+0xfa>
		CPL();
    1116:	4b41      	ldr	r3, [pc, #260]	; (121c <CSIentryState+0x23c>)
    1118:	4798      	blx	r3
    111a:	e7de      	b.n	10da <CSIentryState+0xfa>
		CUP();
    111c:	4b40      	ldr	r3, [pc, #256]	; (1220 <CSIentryState+0x240>)
    111e:	4798      	blx	r3
    1120:	e7db      	b.n	10da <CSIentryState+0xfa>
		CHA();
    1122:	4b40      	ldr	r3, [pc, #256]	; (1224 <CSIentryState+0x244>)
    1124:	4798      	blx	r3
    1126:	e7d8      	b.n	10da <CSIentryState+0xfa>
		currentState = stateGround;
    1128:	2200      	movs	r2, #0
    112a:	4b33      	ldr	r3, [pc, #204]	; (11f8 <CSIentryState+0x218>)
    112c:	701a      	strb	r2, [r3, #0]
    112e:	e7d4      	b.n	10da <CSIentryState+0xfa>
		CUP();
    1130:	4b3b      	ldr	r3, [pc, #236]	; (1220 <CSIentryState+0x240>)
    1132:	4798      	blx	r3
    1134:	e7d1      	b.n	10da <CSIentryState+0xfa>
		currentState = stateGround;
    1136:	2200      	movs	r2, #0
    1138:	4b2f      	ldr	r3, [pc, #188]	; (11f8 <CSIentryState+0x218>)
    113a:	701a      	strb	r2, [r3, #0]
    113c:	e7cd      	b.n	10da <CSIentryState+0xfa>
	currentState = stateGround;
    113e:	2200      	movs	r2, #0
    1140:	4b2d      	ldr	r3, [pc, #180]	; (11f8 <CSIentryState+0x218>)
    1142:	701a      	strb	r2, [r3, #0]
    1144:	e7c9      	b.n	10da <CSIentryState+0xfa>
		ED();
    1146:	4b38      	ldr	r3, [pc, #224]	; (1228 <CSIentryState+0x248>)
    1148:	4798      	blx	r3
    114a:	e7c6      	b.n	10da <CSIentryState+0xfa>
		EL();
    114c:	4b37      	ldr	r3, [pc, #220]	; (122c <CSIentryState+0x24c>)
    114e:	4798      	blx	r3
    1150:	e7c3      	b.n	10da <CSIentryState+0xfa>
		currentState = stateGround;
    1152:	2200      	movs	r2, #0
    1154:	4b28      	ldr	r3, [pc, #160]	; (11f8 <CSIentryState+0x218>)
    1156:	701a      	strb	r2, [r3, #0]
    1158:	e7bf      	b.n	10da <CSIentryState+0xfa>
		currentState = stateGround;
    115a:	2200      	movs	r2, #0
    115c:	4b26      	ldr	r3, [pc, #152]	; (11f8 <CSIentryState+0x218>)
    115e:	701a      	strb	r2, [r3, #0]
    1160:	e7bb      	b.n	10da <CSIentryState+0xfa>
		currentState = stateGround;
    1162:	2200      	movs	r2, #0
    1164:	4b24      	ldr	r3, [pc, #144]	; (11f8 <CSIentryState+0x218>)
    1166:	701a      	strb	r2, [r3, #0]
    1168:	e7b7      	b.n	10da <CSIentryState+0xfa>
		SGR();
    116a:	4b31      	ldr	r3, [pc, #196]	; (1230 <CSIentryState+0x250>)
    116c:	4798      	blx	r3
    116e:	e7b4      	b.n	10da <CSIentryState+0xfa>
		DSR();
    1170:	4b30      	ldr	r3, [pc, #192]	; (1234 <CSIentryState+0x254>)
    1172:	4798      	blx	r3
    1174:	e7b1      	b.n	10da <CSIentryState+0xfa>
	currentState = stateGround;
    1176:	2200      	movs	r2, #0
    1178:	4b1f      	ldr	r3, [pc, #124]	; (11f8 <CSIentryState+0x218>)
    117a:	701a      	strb	r2, [r3, #0]
    117c:	e7ad      	b.n	10da <CSIentryState+0xfa>
	currentState = stateGround;
    117e:	2200      	movs	r2, #0
    1180:	4b1d      	ldr	r3, [pc, #116]	; (11f8 <CSIentryState+0x218>)
    1182:	701a      	strb	r2, [r3, #0]
    1184:	e7a9      	b.n	10da <CSIentryState+0xfa>
		currentState = stateGround;
    1186:	2200      	movs	r2, #0
    1188:	4b1b      	ldr	r3, [pc, #108]	; (11f8 <CSIentryState+0x218>)
    118a:	701a      	strb	r2, [r3, #0]
    118c:	e7a5      	b.n	10da <CSIentryState+0xfa>
		currentState = stateGround;
    118e:	2200      	movs	r2, #0
    1190:	4b19      	ldr	r3, [pc, #100]	; (11f8 <CSIentryState+0x218>)
    1192:	701a      	strb	r2, [r3, #0]
    1194:	e7a1      	b.n	10da <CSIentryState+0xfa>
		SC();
    1196:	4b28      	ldr	r3, [pc, #160]	; (1238 <CSIentryState+0x258>)
    1198:	4798      	blx	r3
    119a:	e79e      	b.n	10da <CSIentryState+0xfa>
		RC();
    119c:	4b27      	ldr	r3, [pc, #156]	; (123c <CSIentryState+0x25c>)
    119e:	4798      	blx	r3
    11a0:	e79b      	b.n	10da <CSIentryState+0xfa>
		currentState = stateGround;
    11a2:	2200      	movs	r2, #0
    11a4:	4b14      	ldr	r3, [pc, #80]	; (11f8 <CSIentryState+0x218>)
    11a6:	701a      	strb	r2, [r3, #0]
    11a8:	e797      	b.n	10da <CSIentryState+0xfa>
	currentState = stateGround;
    11aa:	2200      	movs	r2, #0
    11ac:	4b12      	ldr	r3, [pc, #72]	; (11f8 <CSIentryState+0x218>)
    11ae:	701a      	strb	r2, [r3, #0]
    11b0:	e793      	b.n	10da <CSIentryState+0xfa>
	currentState = stateGround;
    11b2:	2200      	movs	r2, #0
    11b4:	4b10      	ldr	r3, [pc, #64]	; (11f8 <CSIentryState+0x218>)
    11b6:	701a      	strb	r2, [r3, #0]
    11b8:	e78f      	b.n	10da <CSIentryState+0xfa>
		currentState = stateGround;
    11ba:	2200      	movs	r2, #0
    11bc:	4b0e      	ldr	r3, [pc, #56]	; (11f8 <CSIentryState+0x218>)
    11be:	701a      	strb	r2, [r3, #0]
    11c0:	e78b      	b.n	10da <CSIentryState+0xfa>
		currentState = stateCSIparam;
    11c2:	2204      	movs	r2, #4
    11c4:	4b0c      	ldr	r3, [pc, #48]	; (11f8 <CSIentryState+0x218>)
    11c6:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    11c8:	4b1d      	ldr	r3, [pc, #116]	; (1240 <CSIentryState+0x260>)
    11ca:	4798      	blx	r3
    11cc:	e785      	b.n	10da <CSIentryState+0xfa>
		currentState = stateCSIparam;
    11ce:	2204      	movs	r2, #4
    11d0:	4b09      	ldr	r3, [pc, #36]	; (11f8 <CSIentryState+0x218>)
    11d2:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    11d4:	4b1a      	ldr	r3, [pc, #104]	; (1240 <CSIentryState+0x260>)
    11d6:	4798      	blx	r3
    11d8:	e77f      	b.n	10da <CSIentryState+0xfa>
		currentState = stateCSIparam;
    11da:	2204      	movs	r2, #4
    11dc:	4b06      	ldr	r3, [pc, #24]	; (11f8 <CSIentryState+0x218>)
    11de:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    11e0:	4b17      	ldr	r3, [pc, #92]	; (1240 <CSIentryState+0x260>)
    11e2:	4798      	blx	r3
    11e4:	e779      	b.n	10da <CSIentryState+0xfa>
		currentState = stateESC;
    11e6:	2201      	movs	r2, #1
    11e8:	4b03      	ldr	r3, [pc, #12]	; (11f8 <CSIentryState+0x218>)
    11ea:	701a      	strb	r2, [r3, #0]
    11ec:	e775      	b.n	10da <CSIentryState+0xfa>
		currentState = stateCSIignore;
    11ee:	2205      	movs	r2, #5
    11f0:	4b01      	ldr	r3, [pc, #4]	; (11f8 <CSIentryState+0x218>)
    11f2:	701a      	strb	r2, [r3, #0]
    11f4:	e771      	b.n	10da <CSIentryState+0xfa>
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	200002ed 	.word	0x200002ed
    11fc:	00000651 	.word	0x00000651
    1200:	00000799 	.word	0x00000799
    1204:	000006f5 	.word	0x000006f5
    1208:	00005f40 	.word	0x00005f40
    120c:	00005f74 	.word	0x00005f74
    1210:	00004d61 	.word	0x00004d61
    1214:	00000841 	.word	0x00000841
    1218:	000008dd 	.word	0x000008dd
    121c:	00000975 	.word	0x00000975
    1220:	00000a8d 	.word	0x00000a8d
    1224:	00000a09 	.word	0x00000a09
    1228:	00000b39 	.word	0x00000b39
    122c:	00000c75 	.word	0x00000c75
    1230:	00000d69 	.word	0x00000d69
    1234:	00000e35 	.word	0x00000e35
    1238:	0000036d 	.word	0x0000036d
    123c:	00000399 	.word	0x00000399
    1240:	00000f81 	.word	0x00000f81

00001244 <nextTab>:


int nextTab(int a) 
{
    1244:	b510      	push	{r4, lr}
    1246:	b0d0      	sub	sp, #320	; 0x140
    1248:	0004      	movs	r4, r0
	int tabArray[] =
    124a:	22a0      	movs	r2, #160	; 0xa0
    124c:	0052      	lsls	r2, r2, #1
    124e:	4905      	ldr	r1, [pc, #20]	; (1264 <nextTab+0x20>)
    1250:	3104      	adds	r1, #4
    1252:	4668      	mov	r0, sp
    1254:	4b04      	ldr	r3, [pc, #16]	; (1268 <nextTab+0x24>)
    1256:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
    1258:	00a4      	lsls	r4, r4, #2
    125a:	466b      	mov	r3, sp
    125c:	58e0      	ldr	r0, [r4, r3]
}
    125e:	b050      	add	sp, #320	; 0x140
    1260:	bd10      	pop	{r4, pc}
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	00005dfc 	.word	0x00005dfc
    1268:	00004bed 	.word	0x00004bed

0000126c <groundState>:
{
    126c:	b570      	push	{r4, r5, r6, lr}
    126e:	0004      	movs	r4, r0
	clearQueues();									//parser and paramQueues cleared
    1270:	4bb2      	ldr	r3, [pc, #712]	; (153c <groundState+0x2d0>)
    1272:	4798      	blx	r3
	if(character == 0x00)							//NUL 0x00 DO NOTHING
    1274:	2c07      	cmp	r4, #7
    1276:	d976      	bls.n	1366 <groundState+0xfa>
	else if(character == 0x08)						//BS 0x08 Backspace
    1278:	2c08      	cmp	r4, #8
    127a:	d070      	beq.n	135e <groundState+0xf2>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
    127c:	2c09      	cmp	r4, #9
    127e:	d100      	bne.n	1282 <groundState+0x16>
    1280:	e08b      	b.n	139a <groundState+0x12e>
	else if(character == 0x0A)						//LF 0x0A Line Feed
    1282:	2c0a      	cmp	r4, #10
    1284:	d100      	bne.n	1288 <groundState+0x1c>
    1286:	e0aa      	b.n	13de <groundState+0x172>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
    1288:	2c0b      	cmp	r4, #11
    128a:	d100      	bne.n	128e <groundState+0x22>
    128c:	e0fe      	b.n	148c <groundState+0x220>
	else if(character == 0x0C)						//FF 0x0C Form Feed
    128e:	2c0c      	cmp	r4, #12
    1290:	d100      	bne.n	1294 <groundState+0x28>
    1292:	e16f      	b.n	1574 <groundState+0x308>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
    1294:	2c0d      	cmp	r4, #13
    1296:	d100      	bne.n	129a <groundState+0x2e>
    1298:	e1c4      	b.n	1624 <groundState+0x3b8>
	else if(character == 0x0E)						//SO 0x0E Shift Out
    129a:	0023      	movs	r3, r4
    129c:	3b0e      	subs	r3, #14
    129e:	2b0c      	cmp	r3, #12
    12a0:	d961      	bls.n	1366 <groundState+0xfa>
	else if(character == 0x1B)						//ESC 0x1B Escape
    12a2:	2c1b      	cmp	r4, #27
    12a4:	d100      	bne.n	12a8 <groundState+0x3c>
    12a6:	e1e3      	b.n	1670 <groundState+0x404>
	else if(character == 0x1C)						//FS 0x1C File Separator
    12a8:	0023      	movs	r3, r4
    12aa:	3b1c      	subs	r3, #28
    12ac:	2b03      	cmp	r3, #3
    12ae:	d95a      	bls.n	1366 <groundState+0xfa>
	else if(character == 0x7F)						//DEL 0x7F Delete
    12b0:	2c7f      	cmp	r4, #127	; 0x7f
    12b2:	d058      	beq.n	1366 <groundState+0xfa>
		consoleDisplay[xCharPos][yCharPos] = character;
    12b4:	4ba2      	ldr	r3, [pc, #648]	; (1540 <groundState+0x2d4>)
    12b6:	881a      	ldrh	r2, [r3, #0]
    12b8:	4ba2      	ldr	r3, [pc, #648]	; (1544 <groundState+0x2d8>)
    12ba:	881b      	ldrh	r3, [r3, #0]
    12bc:	2018      	movs	r0, #24
    12be:	4350      	muls	r0, r2
    12c0:	49a1      	ldr	r1, [pc, #644]	; (1548 <groundState+0x2dc>)
    12c2:	1809      	adds	r1, r1, r0
    12c4:	54cc      	strb	r4, [r1, r3]
		if(textReverseVideo == true)  //If this is reverse Text
    12c6:	49a1      	ldr	r1, [pc, #644]	; (154c <groundState+0x2e0>)
    12c8:	7809      	ldrb	r1, [r1, #0]
    12ca:	2900      	cmp	r1, #0
    12cc:	d100      	bne.n	12d0 <groundState+0x64>
    12ce:	e1d3      	b.n	1678 <groundState+0x40c>
			SetBit(consoleSGR[xCharPos][yCharPos],7);
    12d0:	2018      	movs	r0, #24
    12d2:	4350      	muls	r0, r2
    12d4:	499e      	ldr	r1, [pc, #632]	; (1550 <groundState+0x2e4>)
    12d6:	1809      	adds	r1, r1, r0
    12d8:	5ccd      	ldrb	r5, [r1, r3]
    12da:	2080      	movs	r0, #128	; 0x80
    12dc:	4240      	negs	r0, r0
    12de:	4328      	orrs	r0, r5
    12e0:	54c8      	strb	r0, [r1, r3]
		if(textBold == true)
    12e2:	499c      	ldr	r1, [pc, #624]	; (1554 <groundState+0x2e8>)
    12e4:	7809      	ldrb	r1, [r1, #0]
    12e6:	2900      	cmp	r1, #0
    12e8:	d100      	bne.n	12ec <groundState+0x80>
    12ea:	e1ce      	b.n	168a <groundState+0x41e>
			SetBit(consoleSGR[xCharPos][yCharPos],1);
    12ec:	2018      	movs	r0, #24
    12ee:	4350      	muls	r0, r2
    12f0:	4997      	ldr	r1, [pc, #604]	; (1550 <groundState+0x2e4>)
    12f2:	1809      	adds	r1, r1, r0
    12f4:	5ccd      	ldrb	r5, [r1, r3]
    12f6:	2002      	movs	r0, #2
    12f8:	4328      	orrs	r0, r5
    12fa:	54c8      	strb	r0, [r1, r3]
		if(textUnderscore == true)
    12fc:	4996      	ldr	r1, [pc, #600]	; (1558 <groundState+0x2ec>)
    12fe:	7809      	ldrb	r1, [r1, #0]
    1300:	2900      	cmp	r1, #0
    1302:	d100      	bne.n	1306 <groundState+0x9a>
    1304:	e1ca      	b.n	169c <groundState+0x430>
			SetBit(consoleSGR[xCharPos][yCharPos],4);
    1306:	2018      	movs	r0, #24
    1308:	4350      	muls	r0, r2
    130a:	4991      	ldr	r1, [pc, #580]	; (1550 <groundState+0x2e4>)
    130c:	1809      	adds	r1, r1, r0
    130e:	5ccd      	ldrb	r5, [r1, r3]
    1310:	2010      	movs	r0, #16
    1312:	4328      	orrs	r0, r5
    1314:	54c8      	strb	r0, [r1, r3]
		if(textBlink == true)
    1316:	4991      	ldr	r1, [pc, #580]	; (155c <groundState+0x2f0>)
    1318:	7809      	ldrb	r1, [r1, #0]
    131a:	2900      	cmp	r1, #0
    131c:	d100      	bne.n	1320 <groundState+0xb4>
    131e:	e1c6      	b.n	16ae <groundState+0x442>
			SetBit(consoleSGR[xCharPos][yCharPos],5);
    1320:	2118      	movs	r1, #24
    1322:	4351      	muls	r1, r2
    1324:	4a8a      	ldr	r2, [pc, #552]	; (1550 <groundState+0x2e4>)
    1326:	1852      	adds	r2, r2, r1
    1328:	5cd0      	ldrb	r0, [r2, r3]
    132a:	2120      	movs	r1, #32
    132c:	4301      	orrs	r1, r0
    132e:	54d1      	strb	r1, [r2, r3]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1330:	0020      	movs	r0, r4
    1332:	4d8b      	ldr	r5, [pc, #556]	; (1560 <groundState+0x2f4>)
    1334:	47a8      	blx	r5
		xCharPos++;
    1336:	4c82      	ldr	r4, [pc, #520]	; (1540 <groundState+0x2d4>)
    1338:	8823      	ldrh	r3, [r4, #0]
    133a:	3301      	adds	r3, #1
    133c:	b29b      	uxth	r3, r3
    133e:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1340:	4a80      	ldr	r2, [pc, #512]	; (1544 <groundState+0x2d8>)
    1342:	8811      	ldrh	r1, [r2, #0]
    1344:	2218      	movs	r2, #24
    1346:	435a      	muls	r2, r3
    1348:	4b7f      	ldr	r3, [pc, #508]	; (1548 <groundState+0x2dc>)
    134a:	189b      	adds	r3, r3, r2
    134c:	5c58      	ldrb	r0, [r3, r1]
    134e:	47a8      	blx	r5
		if(xCharPos > 79)		//END OF LINE
    1350:	8823      	ldrh	r3, [r4, #0]
    1352:	2b4f      	cmp	r3, #79	; 0x4f
    1354:	d907      	bls.n	1366 <groundState+0xfa>
			xCharPos--;
    1356:	3b01      	subs	r3, #1
    1358:	4a79      	ldr	r2, [pc, #484]	; (1540 <groundState+0x2d4>)
    135a:	8013      	strh	r3, [r2, #0]
}
    135c:	e003      	b.n	1366 <groundState+0xfa>
		if(xCharPos > 0)
    135e:	4b78      	ldr	r3, [pc, #480]	; (1540 <groundState+0x2d4>)
    1360:	881b      	ldrh	r3, [r3, #0]
    1362:	2b00      	cmp	r3, #0
    1364:	d100      	bne.n	1368 <groundState+0xfc>
}
    1366:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1368:	4c77      	ldr	r4, [pc, #476]	; (1548 <groundState+0x2dc>)
    136a:	4d76      	ldr	r5, [pc, #472]	; (1544 <groundState+0x2d8>)
    136c:	8829      	ldrh	r1, [r5, #0]
    136e:	005a      	lsls	r2, r3, #1
    1370:	18d3      	adds	r3, r2, r3
    1372:	00db      	lsls	r3, r3, #3
    1374:	18e3      	adds	r3, r4, r3
    1376:	5c58      	ldrb	r0, [r3, r1]
    1378:	4e79      	ldr	r6, [pc, #484]	; (1560 <groundState+0x2f4>)
    137a:	47b0      	blx	r6
			xCharPos--;
    137c:	4a70      	ldr	r2, [pc, #448]	; (1540 <groundState+0x2d4>)
    137e:	8813      	ldrh	r3, [r2, #0]
    1380:	3b01      	subs	r3, #1
    1382:	b29b      	uxth	r3, r3
    1384:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    1386:	8829      	ldrh	r1, [r5, #0]
    1388:	005a      	lsls	r2, r3, #1
    138a:	18d3      	adds	r3, r2, r3
    138c:	00db      	lsls	r3, r3, #3
    138e:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    1390:	5c58      	ldrb	r0, [r3, r1]
    1392:	47b0      	blx	r6
			blinkCursor();
    1394:	4b73      	ldr	r3, [pc, #460]	; (1564 <groundState+0x2f8>)
    1396:	4798      	blx	r3
    1398:	e7e5      	b.n	1366 <groundState+0xfa>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    139a:	4c69      	ldr	r4, [pc, #420]	; (1540 <groundState+0x2d4>)
    139c:	8822      	ldrh	r2, [r4, #0]
    139e:	4b69      	ldr	r3, [pc, #420]	; (1544 <groundState+0x2d8>)
    13a0:	8819      	ldrh	r1, [r3, #0]
    13a2:	0053      	lsls	r3, r2, #1
    13a4:	189b      	adds	r3, r3, r2
    13a6:	00db      	lsls	r3, r3, #3
    13a8:	4a67      	ldr	r2, [pc, #412]	; (1548 <groundState+0x2dc>)
    13aa:	18d3      	adds	r3, r2, r3
    13ac:	5c58      	ldrb	r0, [r3, r1]
    13ae:	4b6c      	ldr	r3, [pc, #432]	; (1560 <groundState+0x2f4>)
    13b0:	4798      	blx	r3
		if(xCharPos <= 79)
    13b2:	8820      	ldrh	r0, [r4, #0]
    13b4:	284f      	cmp	r0, #79	; 0x4f
    13b6:	d803      	bhi.n	13c0 <groundState+0x154>
			xCharPos = nextTab(xCharPos);
    13b8:	4b6b      	ldr	r3, [pc, #428]	; (1568 <groundState+0x2fc>)
    13ba:	4798      	blx	r3
    13bc:	4b60      	ldr	r3, [pc, #384]	; (1540 <groundState+0x2d4>)
    13be:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    13c0:	4b5f      	ldr	r3, [pc, #380]	; (1540 <groundState+0x2d4>)
    13c2:	881a      	ldrh	r2, [r3, #0]
    13c4:	4b5f      	ldr	r3, [pc, #380]	; (1544 <groundState+0x2d8>)
    13c6:	8819      	ldrh	r1, [r3, #0]
    13c8:	0053      	lsls	r3, r2, #1
    13ca:	189b      	adds	r3, r3, r2
    13cc:	00db      	lsls	r3, r3, #3
    13ce:	4a5e      	ldr	r2, [pc, #376]	; (1548 <groundState+0x2dc>)
    13d0:	18d3      	adds	r3, r2, r3
    13d2:	5c58      	ldrb	r0, [r3, r1]
    13d4:	4b62      	ldr	r3, [pc, #392]	; (1560 <groundState+0x2f4>)
    13d6:	4798      	blx	r3
		blinkCursor();
    13d8:	4b62      	ldr	r3, [pc, #392]	; (1564 <groundState+0x2f8>)
    13da:	4798      	blx	r3
    13dc:	e7c3      	b.n	1366 <groundState+0xfa>
		if(yCharPos == 23)
    13de:	4b59      	ldr	r3, [pc, #356]	; (1544 <groundState+0x2d8>)
    13e0:	881a      	ldrh	r2, [r3, #0]
    13e2:	2a17      	cmp	r2, #23
    13e4:	d032      	beq.n	144c <groundState+0x1e0>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    13e6:	4c58      	ldr	r4, [pc, #352]	; (1548 <groundState+0x2dc>)
    13e8:	4d55      	ldr	r5, [pc, #340]	; (1540 <groundState+0x2d4>)
    13ea:	8829      	ldrh	r1, [r5, #0]
    13ec:	004b      	lsls	r3, r1, #1
    13ee:	185b      	adds	r3, r3, r1
    13f0:	00db      	lsls	r3, r3, #3
    13f2:	18e3      	adds	r3, r4, r3
    13f4:	5c98      	ldrb	r0, [r3, r2]
    13f6:	4e5a      	ldr	r6, [pc, #360]	; (1560 <groundState+0x2f4>)
    13f8:	47b0      	blx	r6
			yCharPos++;
    13fa:	4a52      	ldr	r2, [pc, #328]	; (1544 <groundState+0x2d8>)
    13fc:	8813      	ldrh	r3, [r2, #0]
    13fe:	3301      	adds	r3, #1
    1400:	b29b      	uxth	r3, r3
    1402:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1404:	8829      	ldrh	r1, [r5, #0]
    1406:	004a      	lsls	r2, r1, #1
    1408:	1852      	adds	r2, r2, r1
    140a:	00d2      	lsls	r2, r2, #3
    140c:	18a4      	adds	r4, r4, r2
    140e:	5ce0      	ldrb	r0, [r4, r3]
    1410:	47b0      	blx	r6
			blinkCursor();
    1412:	4b54      	ldr	r3, [pc, #336]	; (1564 <groundState+0x2f8>)
    1414:	4798      	blx	r3
		if(lineFeed)
    1416:	4b55      	ldr	r3, [pc, #340]	; (156c <groundState+0x300>)
    1418:	781b      	ldrb	r3, [r3, #0]
    141a:	2b00      	cmp	r3, #0
    141c:	d0a3      	beq.n	1366 <groundState+0xfa>
			if(yCharPos == 23)
    141e:	4b49      	ldr	r3, [pc, #292]	; (1544 <groundState+0x2d8>)
    1420:	881a      	ldrh	r2, [r3, #0]
    1422:	2a17      	cmp	r2, #23
    1424:	d021      	beq.n	146a <groundState+0x1fe>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1426:	4d48      	ldr	r5, [pc, #288]	; (1548 <groundState+0x2dc>)
    1428:	4e45      	ldr	r6, [pc, #276]	; (1540 <groundState+0x2d4>)
    142a:	8831      	ldrh	r1, [r6, #0]
    142c:	004b      	lsls	r3, r1, #1
    142e:	185b      	adds	r3, r3, r1
    1430:	00db      	lsls	r3, r3, #3
    1432:	18eb      	adds	r3, r5, r3
    1434:	5c98      	ldrb	r0, [r3, r2]
    1436:	4c4a      	ldr	r4, [pc, #296]	; (1560 <groundState+0x2f4>)
    1438:	47a0      	blx	r4
				xCharPos = 0;
    143a:	2300      	movs	r3, #0
    143c:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    143e:	4b41      	ldr	r3, [pc, #260]	; (1544 <groundState+0x2d8>)
    1440:	881b      	ldrh	r3, [r3, #0]
    1442:	5ce8      	ldrb	r0, [r5, r3]
    1444:	47a0      	blx	r4
				blinkCursor();
    1446:	4b47      	ldr	r3, [pc, #284]	; (1564 <groundState+0x2f8>)
    1448:	4798      	blx	r3
    144a:	e78c      	b.n	1366 <groundState+0xfa>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    144c:	4b3c      	ldr	r3, [pc, #240]	; (1540 <groundState+0x2d4>)
    144e:	881a      	ldrh	r2, [r3, #0]
    1450:	0053      	lsls	r3, r2, #1
    1452:	189b      	adds	r3, r3, r2
    1454:	00db      	lsls	r3, r3, #3
    1456:	4a3c      	ldr	r2, [pc, #240]	; (1548 <groundState+0x2dc>)
    1458:	18d3      	adds	r3, r2, r3
    145a:	7dd8      	ldrb	r0, [r3, #23]
    145c:	4b40      	ldr	r3, [pc, #256]	; (1560 <groundState+0x2f4>)
    145e:	4798      	blx	r3
			newLine();
    1460:	4b43      	ldr	r3, [pc, #268]	; (1570 <groundState+0x304>)
    1462:	4798      	blx	r3
			blinkCursor();
    1464:	4b3f      	ldr	r3, [pc, #252]	; (1564 <groundState+0x2f8>)
    1466:	4798      	blx	r3
    1468:	e7d5      	b.n	1416 <groundState+0x1aa>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    146a:	4d35      	ldr	r5, [pc, #212]	; (1540 <groundState+0x2d4>)
    146c:	882a      	ldrh	r2, [r5, #0]
    146e:	0053      	lsls	r3, r2, #1
    1470:	189b      	adds	r3, r3, r2
    1472:	00db      	lsls	r3, r3, #3
    1474:	4a34      	ldr	r2, [pc, #208]	; (1548 <groundState+0x2dc>)
    1476:	18d3      	adds	r3, r2, r3
    1478:	7dd8      	ldrb	r0, [r3, #23]
    147a:	4c39      	ldr	r4, [pc, #228]	; (1560 <groundState+0x2f4>)
    147c:	47a0      	blx	r4
				xCharPos = 0;
    147e:	2300      	movs	r3, #0
    1480:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    1482:	2000      	movs	r0, #0
    1484:	47a0      	blx	r4
				blinkCursor();
    1486:	4b37      	ldr	r3, [pc, #220]	; (1564 <groundState+0x2f8>)
    1488:	4798      	blx	r3
    148a:	e76c      	b.n	1366 <groundState+0xfa>
		if(yCharPos == 23)
    148c:	4b2d      	ldr	r3, [pc, #180]	; (1544 <groundState+0x2d8>)
    148e:	881a      	ldrh	r2, [r3, #0]
    1490:	2a17      	cmp	r2, #23
    1492:	d033      	beq.n	14fc <groundState+0x290>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1494:	4c2c      	ldr	r4, [pc, #176]	; (1548 <groundState+0x2dc>)
    1496:	4d2a      	ldr	r5, [pc, #168]	; (1540 <groundState+0x2d4>)
    1498:	8829      	ldrh	r1, [r5, #0]
    149a:	004b      	lsls	r3, r1, #1
    149c:	185b      	adds	r3, r3, r1
    149e:	00db      	lsls	r3, r3, #3
    14a0:	18e3      	adds	r3, r4, r3
    14a2:	5c98      	ldrb	r0, [r3, r2]
    14a4:	4e2e      	ldr	r6, [pc, #184]	; (1560 <groundState+0x2f4>)
    14a6:	47b0      	blx	r6
			yCharPos++;
    14a8:	4a26      	ldr	r2, [pc, #152]	; (1544 <groundState+0x2d8>)
    14aa:	8813      	ldrh	r3, [r2, #0]
    14ac:	3301      	adds	r3, #1
    14ae:	b29b      	uxth	r3, r3
    14b0:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    14b2:	8829      	ldrh	r1, [r5, #0]
    14b4:	004a      	lsls	r2, r1, #1
    14b6:	1852      	adds	r2, r2, r1
    14b8:	00d2      	lsls	r2, r2, #3
    14ba:	18a4      	adds	r4, r4, r2
    14bc:	5ce0      	ldrb	r0, [r4, r3]
    14be:	47b0      	blx	r6
			blinkCursor();
    14c0:	4b28      	ldr	r3, [pc, #160]	; (1564 <groundState+0x2f8>)
    14c2:	4798      	blx	r3
		if(lineFeed)
    14c4:	4b29      	ldr	r3, [pc, #164]	; (156c <groundState+0x300>)
    14c6:	781b      	ldrb	r3, [r3, #0]
    14c8:	2b00      	cmp	r3, #0
    14ca:	d100      	bne.n	14ce <groundState+0x262>
    14cc:	e74b      	b.n	1366 <groundState+0xfa>
			if(yCharPos == 23)
    14ce:	4b1d      	ldr	r3, [pc, #116]	; (1544 <groundState+0x2d8>)
    14d0:	881a      	ldrh	r2, [r3, #0]
    14d2:	2a17      	cmp	r2, #23
    14d4:	d021      	beq.n	151a <groundState+0x2ae>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    14d6:	4d1c      	ldr	r5, [pc, #112]	; (1548 <groundState+0x2dc>)
    14d8:	4e19      	ldr	r6, [pc, #100]	; (1540 <groundState+0x2d4>)
    14da:	8831      	ldrh	r1, [r6, #0]
    14dc:	004b      	lsls	r3, r1, #1
    14de:	185b      	adds	r3, r3, r1
    14e0:	00db      	lsls	r3, r3, #3
    14e2:	18eb      	adds	r3, r5, r3
    14e4:	5c98      	ldrb	r0, [r3, r2]
    14e6:	4c1e      	ldr	r4, [pc, #120]	; (1560 <groundState+0x2f4>)
    14e8:	47a0      	blx	r4
				xCharPos = 0;
    14ea:	2300      	movs	r3, #0
    14ec:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    14ee:	4b15      	ldr	r3, [pc, #84]	; (1544 <groundState+0x2d8>)
    14f0:	881b      	ldrh	r3, [r3, #0]
    14f2:	5ce8      	ldrb	r0, [r5, r3]
    14f4:	47a0      	blx	r4
				blinkCursor();
    14f6:	4b1b      	ldr	r3, [pc, #108]	; (1564 <groundState+0x2f8>)
    14f8:	4798      	blx	r3
    14fa:	e734      	b.n	1366 <groundState+0xfa>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    14fc:	4b10      	ldr	r3, [pc, #64]	; (1540 <groundState+0x2d4>)
    14fe:	881a      	ldrh	r2, [r3, #0]
    1500:	0053      	lsls	r3, r2, #1
    1502:	189b      	adds	r3, r3, r2
    1504:	00db      	lsls	r3, r3, #3
    1506:	4a10      	ldr	r2, [pc, #64]	; (1548 <groundState+0x2dc>)
    1508:	18d3      	adds	r3, r2, r3
    150a:	7dd8      	ldrb	r0, [r3, #23]
    150c:	4b14      	ldr	r3, [pc, #80]	; (1560 <groundState+0x2f4>)
    150e:	4798      	blx	r3
			newLine();
    1510:	4b17      	ldr	r3, [pc, #92]	; (1570 <groundState+0x304>)
    1512:	4798      	blx	r3
			blinkCursor();
    1514:	4b13      	ldr	r3, [pc, #76]	; (1564 <groundState+0x2f8>)
    1516:	4798      	blx	r3
    1518:	e7d4      	b.n	14c4 <groundState+0x258>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    151a:	4d09      	ldr	r5, [pc, #36]	; (1540 <groundState+0x2d4>)
    151c:	882a      	ldrh	r2, [r5, #0]
    151e:	0053      	lsls	r3, r2, #1
    1520:	189b      	adds	r3, r3, r2
    1522:	00db      	lsls	r3, r3, #3
    1524:	4a08      	ldr	r2, [pc, #32]	; (1548 <groundState+0x2dc>)
    1526:	18d3      	adds	r3, r2, r3
    1528:	7dd8      	ldrb	r0, [r3, #23]
    152a:	4c0d      	ldr	r4, [pc, #52]	; (1560 <groundState+0x2f4>)
    152c:	47a0      	blx	r4
				xCharPos = 0;
    152e:	2300      	movs	r3, #0
    1530:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    1532:	2000      	movs	r0, #0
    1534:	47a0      	blx	r4
				blinkCursor();
    1536:	4b0b      	ldr	r3, [pc, #44]	; (1564 <groundState+0x2f8>)
    1538:	4798      	blx	r3
    153a:	e714      	b.n	1366 <groundState+0xfa>
    153c:	000002b1 	.word	0x000002b1
    1540:	200002e8 	.word	0x200002e8
    1544:	200002ea 	.word	0x200002ea
    1548:	200003f8 	.word	0x200003f8
    154c:	2000038c 	.word	0x2000038c
    1550:	20000b78 	.word	0x20000b78
    1554:	2000038a 	.word	0x2000038a
    1558:	20000364 	.word	0x20000364
    155c:	20000368 	.word	0x20000368
    1560:	00003479 	.word	0x00003479
    1564:	000035f9 	.word	0x000035f9
    1568:	00001245 	.word	0x00001245
    156c:	20000188 	.word	0x20000188
    1570:	00003755 	.word	0x00003755
		if(yCharPos == 23)
    1574:	4b52      	ldr	r3, [pc, #328]	; (16c0 <groundState+0x454>)
    1576:	881a      	ldrh	r2, [r3, #0]
    1578:	2a17      	cmp	r2, #23
    157a:	d033      	beq.n	15e4 <groundState+0x378>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    157c:	4c51      	ldr	r4, [pc, #324]	; (16c4 <groundState+0x458>)
    157e:	4d52      	ldr	r5, [pc, #328]	; (16c8 <groundState+0x45c>)
    1580:	8829      	ldrh	r1, [r5, #0]
    1582:	004b      	lsls	r3, r1, #1
    1584:	185b      	adds	r3, r3, r1
    1586:	00db      	lsls	r3, r3, #3
    1588:	18e3      	adds	r3, r4, r3
    158a:	5c98      	ldrb	r0, [r3, r2]
    158c:	4e4f      	ldr	r6, [pc, #316]	; (16cc <groundState+0x460>)
    158e:	47b0      	blx	r6
			yCharPos++;
    1590:	4a4b      	ldr	r2, [pc, #300]	; (16c0 <groundState+0x454>)
    1592:	8813      	ldrh	r3, [r2, #0]
    1594:	3301      	adds	r3, #1
    1596:	b29b      	uxth	r3, r3
    1598:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    159a:	8829      	ldrh	r1, [r5, #0]
    159c:	004a      	lsls	r2, r1, #1
    159e:	1852      	adds	r2, r2, r1
    15a0:	00d2      	lsls	r2, r2, #3
    15a2:	18a4      	adds	r4, r4, r2
    15a4:	5ce0      	ldrb	r0, [r4, r3]
    15a6:	47b0      	blx	r6
			blinkCursor();
    15a8:	4b49      	ldr	r3, [pc, #292]	; (16d0 <groundState+0x464>)
    15aa:	4798      	blx	r3
		if(lineFeed)
    15ac:	4b49      	ldr	r3, [pc, #292]	; (16d4 <groundState+0x468>)
    15ae:	781b      	ldrb	r3, [r3, #0]
    15b0:	2b00      	cmp	r3, #0
    15b2:	d100      	bne.n	15b6 <groundState+0x34a>
    15b4:	e6d7      	b.n	1366 <groundState+0xfa>
			if(yCharPos == 23)
    15b6:	4b42      	ldr	r3, [pc, #264]	; (16c0 <groundState+0x454>)
    15b8:	881a      	ldrh	r2, [r3, #0]
    15ba:	2a17      	cmp	r2, #23
    15bc:	d021      	beq.n	1602 <groundState+0x396>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    15be:	4d41      	ldr	r5, [pc, #260]	; (16c4 <groundState+0x458>)
    15c0:	4e41      	ldr	r6, [pc, #260]	; (16c8 <groundState+0x45c>)
    15c2:	8831      	ldrh	r1, [r6, #0]
    15c4:	004b      	lsls	r3, r1, #1
    15c6:	185b      	adds	r3, r3, r1
    15c8:	00db      	lsls	r3, r3, #3
    15ca:	18eb      	adds	r3, r5, r3
    15cc:	5c98      	ldrb	r0, [r3, r2]
    15ce:	4c3f      	ldr	r4, [pc, #252]	; (16cc <groundState+0x460>)
    15d0:	47a0      	blx	r4
				xCharPos = 0;
    15d2:	2300      	movs	r3, #0
    15d4:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    15d6:	4b3a      	ldr	r3, [pc, #232]	; (16c0 <groundState+0x454>)
    15d8:	881b      	ldrh	r3, [r3, #0]
    15da:	5ce8      	ldrb	r0, [r5, r3]
    15dc:	47a0      	blx	r4
				blinkCursor();
    15de:	4b3c      	ldr	r3, [pc, #240]	; (16d0 <groundState+0x464>)
    15e0:	4798      	blx	r3
    15e2:	e6c0      	b.n	1366 <groundState+0xfa>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    15e4:	4b38      	ldr	r3, [pc, #224]	; (16c8 <groundState+0x45c>)
    15e6:	881a      	ldrh	r2, [r3, #0]
    15e8:	0053      	lsls	r3, r2, #1
    15ea:	189b      	adds	r3, r3, r2
    15ec:	00db      	lsls	r3, r3, #3
    15ee:	4a35      	ldr	r2, [pc, #212]	; (16c4 <groundState+0x458>)
    15f0:	18d3      	adds	r3, r2, r3
    15f2:	7dd8      	ldrb	r0, [r3, #23]
    15f4:	4b35      	ldr	r3, [pc, #212]	; (16cc <groundState+0x460>)
    15f6:	4798      	blx	r3
			newLine();
    15f8:	4b37      	ldr	r3, [pc, #220]	; (16d8 <groundState+0x46c>)
    15fa:	4798      	blx	r3
			blinkCursor();
    15fc:	4b34      	ldr	r3, [pc, #208]	; (16d0 <groundState+0x464>)
    15fe:	4798      	blx	r3
    1600:	e7d4      	b.n	15ac <groundState+0x340>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1602:	4d31      	ldr	r5, [pc, #196]	; (16c8 <groundState+0x45c>)
    1604:	882a      	ldrh	r2, [r5, #0]
    1606:	0053      	lsls	r3, r2, #1
    1608:	189b      	adds	r3, r3, r2
    160a:	00db      	lsls	r3, r3, #3
    160c:	4a2d      	ldr	r2, [pc, #180]	; (16c4 <groundState+0x458>)
    160e:	18d3      	adds	r3, r2, r3
    1610:	7dd8      	ldrb	r0, [r3, #23]
    1612:	4c2e      	ldr	r4, [pc, #184]	; (16cc <groundState+0x460>)
    1614:	47a0      	blx	r4
				xCharPos = 0;
    1616:	2300      	movs	r3, #0
    1618:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    161a:	2000      	movs	r0, #0
    161c:	47a0      	blx	r4
				blinkCursor();
    161e:	4b2c      	ldr	r3, [pc, #176]	; (16d0 <groundState+0x464>)
    1620:	4798      	blx	r3
    1622:	e6a0      	b.n	1366 <groundState+0xfa>
		if(yCharPos == 23)
    1624:	4b26      	ldr	r3, [pc, #152]	; (16c0 <groundState+0x454>)
    1626:	881a      	ldrh	r2, [r3, #0]
    1628:	2a17      	cmp	r2, #23
    162a:	d012      	beq.n	1652 <groundState+0x3e6>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    162c:	4d25      	ldr	r5, [pc, #148]	; (16c4 <groundState+0x458>)
    162e:	4e26      	ldr	r6, [pc, #152]	; (16c8 <groundState+0x45c>)
    1630:	8831      	ldrh	r1, [r6, #0]
    1632:	004b      	lsls	r3, r1, #1
    1634:	185b      	adds	r3, r3, r1
    1636:	00db      	lsls	r3, r3, #3
    1638:	18eb      	adds	r3, r5, r3
    163a:	5c98      	ldrb	r0, [r3, r2]
    163c:	4c23      	ldr	r4, [pc, #140]	; (16cc <groundState+0x460>)
    163e:	47a0      	blx	r4
			xCharPos = 0;
    1640:	2300      	movs	r3, #0
    1642:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1644:	4b1e      	ldr	r3, [pc, #120]	; (16c0 <groundState+0x454>)
    1646:	881b      	ldrh	r3, [r3, #0]
    1648:	5ce8      	ldrb	r0, [r5, r3]
    164a:	47a0      	blx	r4
			blinkCursor();
    164c:	4b20      	ldr	r3, [pc, #128]	; (16d0 <groundState+0x464>)
    164e:	4798      	blx	r3
    1650:	e689      	b.n	1366 <groundState+0xfa>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1652:	4c1d      	ldr	r4, [pc, #116]	; (16c8 <groundState+0x45c>)
    1654:	8822      	ldrh	r2, [r4, #0]
    1656:	0053      	lsls	r3, r2, #1
    1658:	189b      	adds	r3, r3, r2
    165a:	00db      	lsls	r3, r3, #3
    165c:	4a19      	ldr	r2, [pc, #100]	; (16c4 <groundState+0x458>)
    165e:	18d3      	adds	r3, r2, r3
    1660:	7dd8      	ldrb	r0, [r3, #23]
    1662:	4b1a      	ldr	r3, [pc, #104]	; (16cc <groundState+0x460>)
    1664:	4798      	blx	r3
			xCharPos = 0;
    1666:	2300      	movs	r3, #0
    1668:	8023      	strh	r3, [r4, #0]
			blinkCursor();
    166a:	4b19      	ldr	r3, [pc, #100]	; (16d0 <groundState+0x464>)
    166c:	4798      	blx	r3
    166e:	e67a      	b.n	1366 <groundState+0xfa>
		currentState = stateESC;
    1670:	2201      	movs	r2, #1
    1672:	4b1a      	ldr	r3, [pc, #104]	; (16dc <groundState+0x470>)
    1674:	701a      	strb	r2, [r3, #0]
    1676:	e676      	b.n	1366 <groundState+0xfa>
			ClearBit(consoleSGR[xCharPos][yCharPos],7);
    1678:	2018      	movs	r0, #24
    167a:	4350      	muls	r0, r2
    167c:	4918      	ldr	r1, [pc, #96]	; (16e0 <groundState+0x474>)
    167e:	1809      	adds	r1, r1, r0
    1680:	5cc8      	ldrb	r0, [r1, r3]
    1682:	257f      	movs	r5, #127	; 0x7f
    1684:	4028      	ands	r0, r5
    1686:	54c8      	strb	r0, [r1, r3]
    1688:	e62b      	b.n	12e2 <groundState+0x76>
			ClearBit(consoleSGR[xCharPos][yCharPos],1);
    168a:	2018      	movs	r0, #24
    168c:	4350      	muls	r0, r2
    168e:	4914      	ldr	r1, [pc, #80]	; (16e0 <groundState+0x474>)
    1690:	1809      	adds	r1, r1, r0
    1692:	5cc8      	ldrb	r0, [r1, r3]
    1694:	2502      	movs	r5, #2
    1696:	43a8      	bics	r0, r5
    1698:	54c8      	strb	r0, [r1, r3]
    169a:	e62f      	b.n	12fc <groundState+0x90>
			ClearBit(consoleSGR[xCharPos][yCharPos],4);
    169c:	2018      	movs	r0, #24
    169e:	4350      	muls	r0, r2
    16a0:	490f      	ldr	r1, [pc, #60]	; (16e0 <groundState+0x474>)
    16a2:	1809      	adds	r1, r1, r0
    16a4:	5cc8      	ldrb	r0, [r1, r3]
    16a6:	2510      	movs	r5, #16
    16a8:	43a8      	bics	r0, r5
    16aa:	54c8      	strb	r0, [r1, r3]
    16ac:	e633      	b.n	1316 <groundState+0xaa>
			ClearBit(consoleSGR[xCharPos][yCharPos],5);
    16ae:	2118      	movs	r1, #24
    16b0:	4351      	muls	r1, r2
    16b2:	4a0b      	ldr	r2, [pc, #44]	; (16e0 <groundState+0x474>)
    16b4:	1852      	adds	r2, r2, r1
    16b6:	5cd1      	ldrb	r1, [r2, r3]
    16b8:	2020      	movs	r0, #32
    16ba:	4381      	bics	r1, r0
    16bc:	54d1      	strb	r1, [r2, r3]
    16be:	e637      	b.n	1330 <groundState+0xc4>
    16c0:	200002ea 	.word	0x200002ea
    16c4:	200003f8 	.word	0x200003f8
    16c8:	200002e8 	.word	0x200002e8
    16cc:	00003479 	.word	0x00003479
    16d0:	000035f9 	.word	0x000035f9
    16d4:	20000188 	.word	0x20000188
    16d8:	00003755 	.word	0x00003755
    16dc:	200002ed 	.word	0x200002ed
    16e0:	20000b78 	.word	0x20000b78

000016e4 <parseChar>:
{
    16e4:	b510      	push	{r4, lr}
	parserState state = currentState;
    16e6:	4b0e      	ldr	r3, [pc, #56]	; (1720 <parseChar+0x3c>)
	switch(state)
    16e8:	781a      	ldrb	r2, [r3, #0]
    16ea:	2a05      	cmp	r2, #5
    16ec:	d805      	bhi.n	16fa <parseChar+0x16>
    16ee:	0093      	lsls	r3, r2, #2
    16f0:	4a0c      	ldr	r2, [pc, #48]	; (1724 <parseChar+0x40>)
    16f2:	58d3      	ldr	r3, [r2, r3]
    16f4:	469f      	mov	pc, r3
			groundState(character);
    16f6:	4b0c      	ldr	r3, [pc, #48]	; (1728 <parseChar+0x44>)
    16f8:	4798      	blx	r3
}
    16fa:	bd10      	pop	{r4, pc}
			escState(character);
    16fc:	4b0b      	ldr	r3, [pc, #44]	; (172c <parseChar+0x48>)
    16fe:	4798      	blx	r3
			break;
    1700:	e7fb      	b.n	16fa <parseChar+0x16>
	stateEnterBuffer = 0x00;
    1702:	2300      	movs	r3, #0
    1704:	4a0a      	ldr	r2, [pc, #40]	; (1730 <parseChar+0x4c>)
    1706:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
    1708:	4a05      	ldr	r2, [pc, #20]	; (1720 <parseChar+0x3c>)
    170a:	7013      	strb	r3, [r2, #0]
    170c:	e7f5      	b.n	16fa <parseChar+0x16>
			CSIentryState(character);
    170e:	4b09      	ldr	r3, [pc, #36]	; (1734 <parseChar+0x50>)
    1710:	4798      	blx	r3
			break;
    1712:	e7f2      	b.n	16fa <parseChar+0x16>
			CSIparamState(character);
    1714:	4b08      	ldr	r3, [pc, #32]	; (1738 <parseChar+0x54>)
    1716:	4798      	blx	r3
			break;
    1718:	e7ef      	b.n	16fa <parseChar+0x16>
			CSIignoreState(character);
    171a:	4b08      	ldr	r3, [pc, #32]	; (173c <parseChar+0x58>)
    171c:	4798      	blx	r3
}
    171e:	e7ec      	b.n	16fa <parseChar+0x16>
    1720:	200002ed 	.word	0x200002ed
    1724:	00005de4 	.word	0x00005de4
    1728:	0000126d 	.word	0x0000126d
    172c:	00000575 	.word	0x00000575
    1730:	20000376 	.word	0x20000376
    1734:	00000fe1 	.word	0x00000fe1
    1738:	00000f81 	.word	0x00000f81
    173c:	0000034d 	.word	0x0000034d

00001740 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    1740:	b5f0      	push	{r4, r5, r6, r7, lr}
    1742:	b0c1      	sub	sp, #260	; 0x104
    1744:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    1746:	22d0      	movs	r2, #208	; 0xd0
    1748:	492d      	ldr	r1, [pc, #180]	; (1800 <drawKare+0xc0>)
    174a:	a80c      	add	r0, sp, #48	; 0x30
    174c:	4b2d      	ldr	r3, [pc, #180]	; (1804 <drawKare+0xc4>)
    174e:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    1750:	a805      	add	r0, sp, #20
    1752:	4b2d      	ldr	r3, [pc, #180]	; (1808 <drawKare+0xc8>)
    1754:	001a      	movs	r2, r3
    1756:	3250      	adds	r2, #80	; 0x50
    1758:	0001      	movs	r1, r0
    175a:	ca31      	ldmia	r2!, {r0, r4, r5}
    175c:	c131      	stmia	r1!, {r0, r4, r5}
    175e:	ca31      	ldmia	r2!, {r0, r4, r5}
    1760:	c131      	stmia	r1!, {r0, r4, r5}
    1762:	6812      	ldr	r2, [r2, #0]
    1764:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    1766:	336c      	adds	r3, #108	; 0x6c
    1768:	466a      	mov	r2, sp
    176a:	cb13      	ldmia	r3!, {r0, r1, r4}
    176c:	c213      	stmia	r2!, {r0, r1, r4}
    176e:	cb03      	ldmia	r3!, {r0, r1}
    1770:	c203      	stmia	r2!, {r0, r1}
    1772:	ac0c      	add	r4, sp, #48	; 0x30
    1774:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1776:	4d25      	ldr	r5, [pc, #148]	; (180c <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    1778:	88e3      	ldrh	r3, [r4, #6]
    177a:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    177c:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
    177e:	88a2      	ldrh	r2, [r4, #4]
    1780:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1782:	322d      	adds	r2, #45	; 0x2d
    1784:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
    1786:	8861      	ldrh	r1, [r4, #2]
    1788:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    178a:	3196      	adds	r1, #150	; 0x96
    178c:	8820      	ldrh	r0, [r4, #0]
    178e:	1040      	asrs	r0, r0, #1
    1790:	302d      	adds	r0, #45	; 0x2d
    1792:	30ff      	adds	r0, #255	; 0xff
    1794:	47a8      	blx	r5
    1796:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
    1798:	42b4      	cmp	r4, r6
    179a:	d1ed      	bne.n	1778 <drawKare+0x38>
	}
	switch(emotion)
    179c:	2f00      	cmp	r7, #0
    179e:	d003      	beq.n	17a8 <drawKare+0x68>
    17a0:	2f01      	cmp	r7, #1
    17a2:	d017      	beq.n	17d4 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    17a4:	b041      	add	sp, #260	; 0x104
    17a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17a8:	ac05      	add	r4, sp, #20
    17aa:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    17ac:	4d17      	ldr	r5, [pc, #92]	; (180c <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    17ae:	78e3      	ldrb	r3, [r4, #3]
    17b0:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    17b2:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    17b4:	78a2      	ldrb	r2, [r4, #2]
    17b6:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    17b8:	322d      	adds	r2, #45	; 0x2d
    17ba:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    17bc:	7861      	ldrb	r1, [r4, #1]
    17be:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    17c0:	3196      	adds	r1, #150	; 0x96
    17c2:	7820      	ldrb	r0, [r4, #0]
    17c4:	1040      	asrs	r0, r0, #1
    17c6:	302d      	adds	r0, #45	; 0x2d
    17c8:	30ff      	adds	r0, #255	; 0xff
    17ca:	47a8      	blx	r5
    17cc:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
    17ce:	42a6      	cmp	r6, r4
    17d0:	d1ed      	bne.n	17ae <drawKare+0x6e>
    17d2:	e7e7      	b.n	17a4 <drawKare+0x64>
    17d4:	466c      	mov	r4, sp
    17d6:	ae05      	add	r6, sp, #20
			fillRect((
    17d8:	4d0c      	ldr	r5, [pc, #48]	; (180c <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    17da:	78e3      	ldrb	r3, [r4, #3]
    17dc:	105b      	asrs	r3, r3, #1
			fillRect((
    17de:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    17e0:	78a2      	ldrb	r2, [r4, #2]
    17e2:	1052      	asrs	r2, r2, #1
			fillRect((
    17e4:	322d      	adds	r2, #45	; 0x2d
    17e6:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    17e8:	7861      	ldrb	r1, [r4, #1]
    17ea:	1049      	asrs	r1, r1, #1
			fillRect((
    17ec:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    17ee:	7820      	ldrb	r0, [r4, #0]
    17f0:	1040      	asrs	r0, r0, #1
			fillRect((
    17f2:	302d      	adds	r0, #45	; 0x2d
    17f4:	30ff      	adds	r0, #255	; 0xff
    17f6:	47a8      	blx	r5
    17f8:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
    17fa:	42b4      	cmp	r4, r6
    17fc:	d1ed      	bne.n	17da <drawKare+0x9a>
    17fe:	e7d1      	b.n	17a4 <drawKare+0x64>
    1800:	00005f78 	.word	0x00005f78
    1804:	00004bed 	.word	0x00004bed
    1808:	00005ff8 	.word	0x00005ff8
    180c:	00004009 	.word	0x00004009

00001810 <splashScreen>:

void splashScreen(void)
{
    1810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1812:	46ce      	mov	lr, r9
    1814:	4647      	mov	r7, r8
    1816:	b580      	push	{r7, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
    1818:	4c53      	ldr	r4, [pc, #332]	; (1968 <splashScreen+0x158>)
    181a:	4b54      	ldr	r3, [pc, #336]	; (196c <splashScreen+0x15c>)
    181c:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
    181e:	4b54      	ldr	r3, [pc, #336]	; (1970 <splashScreen+0x160>)
    1820:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
    1822:	4b54      	ldr	r3, [pc, #336]	; (1974 <splashScreen+0x164>)
    1824:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
    1826:	4b54      	ldr	r3, [pc, #336]	; (1978 <splashScreen+0x168>)
    1828:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
    182a:	4b54      	ldr	r3, [pc, #336]	; (197c <splashScreen+0x16c>)
    182c:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
    182e:	4b54      	ldr	r3, [pc, #336]	; (1980 <splashScreen+0x170>)
    1830:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
    1832:	4b54      	ldr	r3, [pc, #336]	; (1984 <splashScreen+0x174>)
    1834:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    1836:	4b54      	ldr	r3, [pc, #336]	; (1988 <splashScreen+0x178>)
    1838:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
    183a:	4b54      	ldr	r3, [pc, #336]	; (198c <splashScreen+0x17c>)
    183c:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
    183e:	4b54      	ldr	r3, [pc, #336]	; (1990 <splashScreen+0x180>)
    1840:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
    1842:	4b54      	ldr	r3, [pc, #336]	; (1994 <splashScreen+0x184>)
    1844:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
    1846:	4b54      	ldr	r3, [pc, #336]	; (1998 <splashScreen+0x188>)
    1848:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
    184a:	4b54      	ldr	r3, [pc, #336]	; (199c <splashScreen+0x18c>)
    184c:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
    184e:	4b54      	ldr	r3, [pc, #336]	; (19a0 <splashScreen+0x190>)
    1850:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "Vogon Poetry";//
    1852:	4b54      	ldr	r3, [pc, #336]	; (19a4 <splashScreen+0x194>)
    1854:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
    1856:	4b54      	ldr	r3, [pc, #336]	; (19a8 <splashScreen+0x198>)
    1858:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
    185a:	4b54      	ldr	r3, [pc, #336]	; (19ac <splashScreen+0x19c>)
    185c:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    185e:	4b54      	ldr	r3, [pc, #336]	; (19b0 <splashScreen+0x1a0>)
    1860:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
    1862:	4b54      	ldr	r3, [pc, #336]	; (19b4 <splashScreen+0x1a4>)
    1864:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020)";//
    1866:	4b54      	ldr	r3, [pc, #336]	; (19b8 <splashScreen+0x1a8>)
    1868:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
    186a:	4b54      	ldr	r3, [pc, #336]	; (19bc <splashScreen+0x1ac>)
    186c:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
    186e:	4b54      	ldr	r3, [pc, #336]	; (19c0 <splashScreen+0x1b0>)
    1870:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
    1872:	4b54      	ldr	r3, [pc, #336]	; (19c4 <splashScreen+0x1b4>)
    1874:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
    1876:	4b54      	ldr	r3, [pc, #336]	; (19c8 <splashScreen+0x1b8>)
    1878:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
    187a:	4b54      	ldr	r3, [pc, #336]	; (19cc <splashScreen+0x1bc>)
    187c:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
    187e:	4b54      	ldr	r3, [pc, #336]	; (19d0 <splashScreen+0x1c0>)
    1880:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
    1882:	4b54      	ldr	r3, [pc, #336]	; (19d4 <splashScreen+0x1c4>)
    1884:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
    1886:	4b54      	ldr	r3, [pc, #336]	; (19d8 <splashScreen+0x1c8>)
    1888:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
    188a:	4b54      	ldr	r3, [pc, #336]	; (19dc <splashScreen+0x1cc>)
    188c:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
    188e:	4b54      	ldr	r3, [pc, #336]	; (19e0 <splashScreen+0x1d0>)
    1890:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
    1892:	4b54      	ldr	r3, [pc, #336]	; (19e4 <splashScreen+0x1d4>)
    1894:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
    1896:	4b54      	ldr	r3, [pc, #336]	; (19e8 <splashScreen+0x1d8>)
    1898:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
    189a:	4a54      	ldr	r2, [pc, #336]	; (19ec <splashScreen+0x1dc>)
    189c:	2380      	movs	r3, #128	; 0x80
    189e:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
    18a0:	4b53      	ldr	r3, [pc, #332]	; (19f0 <splashScreen+0x1e0>)
    18a2:	4798      	blx	r3
    18a4:	17c3      	asrs	r3, r0, #31
    18a6:	0edb      	lsrs	r3, r3, #27
    18a8:	18c2      	adds	r2, r0, r3
    18aa:	201f      	movs	r0, #31
    18ac:	4010      	ands	r0, r2
    18ae:	1ac0      	subs	r0, r0, r3
    18b0:	0080      	lsls	r0, r0, #2
    18b2:	5906      	ldr	r6, [r0, r4]
	
	clearScreen();
    18b4:	4b4f      	ldr	r3, [pc, #316]	; (19f4 <splashScreen+0x1e4>)
    18b6:	4798      	blx	r3
	setColorRGB(255,255,255);
    18b8:	22ff      	movs	r2, #255	; 0xff
    18ba:	21ff      	movs	r1, #255	; 0xff
    18bc:	20ff      	movs	r0, #255	; 0xff
    18be:	4b4e      	ldr	r3, [pc, #312]	; (19f8 <splashScreen+0x1e8>)
    18c0:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    18c2:	2280      	movs	r2, #128	; 0x80
    18c4:	0612      	lsls	r2, r2, #24
    18c6:	4b4d      	ldr	r3, [pc, #308]	; (19fc <splashScreen+0x1ec>)
    18c8:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    18ca:	4b4d      	ldr	r3, [pc, #308]	; (1a00 <splashScreen+0x1f0>)
    18cc:	22df      	movs	r2, #223	; 0xdf
    18ce:	5c99      	ldrb	r1, [r3, r2]
    18d0:	2004      	movs	r0, #4
    18d2:	4301      	orrs	r1, r0
    18d4:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    18d6:	5c99      	ldrb	r1, [r3, r2]
    18d8:	2002      	movs	r0, #2
    18da:	4301      	orrs	r1, r0
    18dc:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    18de:	3a3f      	subs	r2, #63	; 0x3f
    18e0:	589b      	ldr	r3, [r3, r2]
    18e2:	2b00      	cmp	r3, #0
    18e4:	db3c      	blt.n	1960 <splashScreen+0x150>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
    18e6:	2000      	movs	r0, #0
    18e8:	4b46      	ldr	r3, [pc, #280]	; (1a04 <splashScreen+0x1f4>)
    18ea:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
    18ec:	0030      	movs	r0, r6
    18ee:	4b46      	ldr	r3, [pc, #280]	; (1a08 <splashScreen+0x1f8>)
    18f0:	4699      	mov	r9, r3
    18f2:	4798      	blx	r3
    18f4:	4f45      	ldr	r7, [pc, #276]	; (1a0c <splashScreen+0x1fc>)
    18f6:	0840      	lsrs	r0, r0, #1
    18f8:	2428      	movs	r4, #40	; 0x28
    18fa:	1a20      	subs	r0, r4, r0
    18fc:	8038      	strh	r0, [r7, #0]
	yCharPos = 16;
    18fe:	4d44      	ldr	r5, [pc, #272]	; (1a10 <splashScreen+0x200>)
    1900:	2310      	movs	r3, #16
    1902:	802b      	strh	r3, [r5, #0]
	writeString(textPhrase);
    1904:	0030      	movs	r0, r6
    1906:	4b43      	ldr	r3, [pc, #268]	; (1a14 <splashScreen+0x204>)
    1908:	4698      	mov	r8, r3
    190a:	4798      	blx	r3
	
	
	xCharPos = 40 - (strlen(versionLabel)/2);
    190c:	4e42      	ldr	r6, [pc, #264]	; (1a18 <splashScreen+0x208>)
    190e:	0030      	movs	r0, r6
    1910:	47c8      	blx	r9
    1912:	0840      	lsrs	r0, r0, #1
    1914:	1a20      	subs	r0, r4, r0
    1916:	8038      	strh	r0, [r7, #0]
	yCharPos = 18;
    1918:	2312      	movs	r3, #18
    191a:	802b      	strh	r3, [r5, #0]
	writeString(versionLabel);
    191c:	0030      	movs	r0, r6
    191e:	47c0      	blx	r8
	
	xCharPos = 40 - (strlen(compileTime)/2);
    1920:	4e3e      	ldr	r6, [pc, #248]	; (1a1c <splashScreen+0x20c>)
    1922:	0030      	movs	r0, r6
    1924:	47c8      	blx	r9
    1926:	0840      	lsrs	r0, r0, #1
    1928:	1a24      	subs	r4, r4, r0
    192a:	803c      	strh	r4, [r7, #0]
	yCharPos = 19;
    192c:	2313      	movs	r3, #19
    192e:	802b      	strh	r3, [r5, #0]
	writeString(compileTime);
    1930:	0030      	movs	r0, r6
    1932:	47c0      	blx	r8
	
	
	delay_ms(1500);
    1934:	483a      	ldr	r0, [pc, #232]	; (1a20 <splashScreen+0x210>)
    1936:	4b3b      	ldr	r3, [pc, #236]	; (1a24 <splashScreen+0x214>)
    1938:	4798      	blx	r3
		
	clearScreen();
    193a:	4b2e      	ldr	r3, [pc, #184]	; (19f4 <splashScreen+0x1e4>)
    193c:	4798      	blx	r3
	nullifyConsole();
    193e:	4b3a      	ldr	r3, [pc, #232]	; (1a28 <splashScreen+0x218>)
    1940:	4798      	blx	r3
	
	setColorHex(defaultForegroundColor);
    1942:	4b3a      	ldr	r3, [pc, #232]	; (1a2c <splashScreen+0x21c>)
    1944:	8818      	ldrh	r0, [r3, #0]
    1946:	4b3a      	ldr	r3, [pc, #232]	; (1a30 <splashScreen+0x220>)
    1948:	4798      	blx	r3
	setBackColorHex(defaultBackgroundColor);
    194a:	4b3a      	ldr	r3, [pc, #232]	; (1a34 <splashScreen+0x224>)
    194c:	8818      	ldrh	r0, [r3, #0]
    194e:	4b3a      	ldr	r3, [pc, #232]	; (1a38 <splashScreen+0x228>)
    1950:	4798      	blx	r3
	//setColorRGB(0,255,0);
	//setBackColorRGB(0,0,0);
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
    1952:	2300      	movs	r3, #0
    1954:	803b      	strh	r3, [r7, #0]
	yCharPos = 0;
    1956:	802b      	strh	r3, [r5, #0]
	

    1958:	bc0c      	pop	{r2, r3}
    195a:	4690      	mov	r8, r2
    195c:	4699      	mov	r9, r3
    195e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		drawKare(1);
    1960:	2001      	movs	r0, #1
    1962:	4b28      	ldr	r3, [pc, #160]	; (1a04 <splashScreen+0x1f4>)
    1964:	4798      	blx	r3
    1966:	e7c1      	b.n	18ec <splashScreen+0xdc>
    1968:	20000228 	.word	0x20000228
    196c:	00006078 	.word	0x00006078
    1970:	00006098 	.word	0x00006098
    1974:	000060ac 	.word	0x000060ac
    1978:	000060c4 	.word	0x000060c4
    197c:	000060d4 	.word	0x000060d4
    1980:	000060dc 	.word	0x000060dc
    1984:	00006104 	.word	0x00006104
    1988:	00006130 	.word	0x00006130
    198c:	00006158 	.word	0x00006158
    1990:	00006184 	.word	0x00006184
    1994:	00006190 	.word	0x00006190
    1998:	000061a8 	.word	0x000061a8
    199c:	000061c8 	.word	0x000061c8
    19a0:	000061e8 	.word	0x000061e8
    19a4:	0000620c 	.word	0x0000620c
    19a8:	0000621c 	.word	0x0000621c
    19ac:	00006228 	.word	0x00006228
    19b0:	00006244 	.word	0x00006244
    19b4:	00006264 	.word	0x00006264
    19b8:	000062a0 	.word	0x000062a0
    19bc:	000062bc 	.word	0x000062bc
    19c0:	000062d8 	.word	0x000062d8
    19c4:	000062e8 	.word	0x000062e8
    19c8:	0000630c 	.word	0x0000630c
    19cc:	00006338 	.word	0x00006338
    19d0:	00006364 	.word	0x00006364
    19d4:	00006384 	.word	0x00006384
    19d8:	000063a4 	.word	0x000063a4
    19dc:	000063b8 	.word	0x000063b8
    19e0:	000063d4 	.word	0x000063d4
    19e4:	000063e4 	.word	0x000063e4
    19e8:	00006408 	.word	0x00006408
    19ec:	00006428 	.word	0x00006428
    19f0:	00004e19 	.word	0x00004e19
    19f4:	000040d9 	.word	0x000040d9
    19f8:	00003e9d 	.word	0x00003e9d
    19fc:	4100448c 	.word	0x4100448c
    1a00:	41004400 	.word	0x41004400
    1a04:	00001741 	.word	0x00001741
    1a08:	0000503b 	.word	0x0000503b
    1a0c:	200002e8 	.word	0x200002e8
    1a10:	200002ea 	.word	0x200002ea
    1a14:	00003835 	.word	0x00003835
    1a18:	20000194 	.word	0x20000194
    1a1c:	2000016c 	.word	0x2000016c
    1a20:	000005dc 	.word	0x000005dc
    1a24:	00001ad1 	.word	0x00001ad1
    1a28:	0000387d 	.word	0x0000387d
    1a2c:	20000186 	.word	0x20000186
    1a30:	00003ec5 	.word	0x00003ec5
    1a34:	200002ee 	.word	0x200002ee
    1a38:	00003f05 	.word	0x00003f05

00001a3c <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
    1a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a3e:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
    1a40:	4e0b      	ldr	r6, [pc, #44]	; (1a70 <parseRXBuffer+0x34>)
    1a42:	4d0c      	ldr	r5, [pc, #48]	; (1a74 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
    1a44:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
    1a46:	e008      	b.n	1a5a <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
    1a48:	466b      	mov	r3, sp
    1a4a:	1ddc      	adds	r4, r3, #7
    1a4c:	0021      	movs	r1, r4
    1a4e:	6838      	ldr	r0, [r7, #0]
    1a50:	4b09      	ldr	r3, [pc, #36]	; (1a78 <parseRXBuffer+0x3c>)
    1a52:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
    1a54:	7820      	ldrb	r0, [r4, #0]
    1a56:	4b09      	ldr	r3, [pc, #36]	; (1a7c <parseRXBuffer+0x40>)
    1a58:	4798      	blx	r3
		while(!ring_empty(ouroboros))
    1a5a:	6830      	ldr	r0, [r6, #0]
    1a5c:	47a8      	blx	r5
    1a5e:	2800      	cmp	r0, #0
    1a60:	d0f2      	beq.n	1a48 <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
    1a62:	4b03      	ldr	r3, [pc, #12]	; (1a70 <parseRXBuffer+0x34>)
    1a64:	6818      	ldr	r0, [r3, #0]
    1a66:	4b06      	ldr	r3, [pc, #24]	; (1a80 <parseRXBuffer+0x44>)
    1a68:	4798      	blx	r3
}
    1a6a:	b003      	add	sp, #12
    1a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	20000394 	.word	0x20000394
    1a74:	0000017d 	.word	0x0000017d
    1a78:	00000195 	.word	0x00000195
    1a7c:	000016e5 	.word	0x000016e5
    1a80:	00000135 	.word	0x00000135

00001a84 <sendChar>:

void sendChar(char character)
{
    1a84:	b510      	push	{r4, lr}
	printf("%c", character);
    1a86:	4b01      	ldr	r3, [pc, #4]	; (1a8c <sendChar+0x8>)
    1a88:	4798      	blx	r3
    1a8a:	bd10      	pop	{r4, pc}
    1a8c:	00004d95 	.word	0x00004d95

00001a90 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1a90:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1a92:	2000      	movs	r0, #0
    1a94:	4b08      	ldr	r3, [pc, #32]	; (1ab8 <delay_init+0x28>)
    1a96:	4798      	blx	r3
    1a98:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1a9a:	4c08      	ldr	r4, [pc, #32]	; (1abc <delay_init+0x2c>)
    1a9c:	21fa      	movs	r1, #250	; 0xfa
    1a9e:	0089      	lsls	r1, r1, #2
    1aa0:	47a0      	blx	r4
    1aa2:	4b07      	ldr	r3, [pc, #28]	; (1ac0 <delay_init+0x30>)
    1aa4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1aa6:	4907      	ldr	r1, [pc, #28]	; (1ac4 <delay_init+0x34>)
    1aa8:	0028      	movs	r0, r5
    1aaa:	47a0      	blx	r4
    1aac:	4b06      	ldr	r3, [pc, #24]	; (1ac8 <delay_init+0x38>)
    1aae:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1ab0:	2205      	movs	r2, #5
    1ab2:	4b06      	ldr	r3, [pc, #24]	; (1acc <delay_init+0x3c>)
    1ab4:	601a      	str	r2, [r3, #0]
}
    1ab6:	bd70      	pop	{r4, r5, r6, pc}
    1ab8:	00003051 	.word	0x00003051
    1abc:	00004819 	.word	0x00004819
    1ac0:	20000014 	.word	0x20000014
    1ac4:	000f4240 	.word	0x000f4240
    1ac8:	20000018 	.word	0x20000018
    1acc:	e000e010 	.word	0xe000e010

00001ad0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1ad0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1ad2:	4b08      	ldr	r3, [pc, #32]	; (1af4 <delay_cycles_ms+0x24>)
    1ad4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1ad6:	4a08      	ldr	r2, [pc, #32]	; (1af8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1ad8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1ada:	2180      	movs	r1, #128	; 0x80
    1adc:	0249      	lsls	r1, r1, #9
	while (n--) {
    1ade:	3801      	subs	r0, #1
    1ae0:	d307      	bcc.n	1af2 <delay_cycles_ms+0x22>
	if (n > 0) {
    1ae2:	2c00      	cmp	r4, #0
    1ae4:	d0fb      	beq.n	1ade <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1ae6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1ae8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1aea:	6813      	ldr	r3, [r2, #0]
    1aec:	420b      	tst	r3, r1
    1aee:	d0fc      	beq.n	1aea <delay_cycles_ms+0x1a>
    1af0:	e7f5      	b.n	1ade <delay_cycles_ms+0xe>
	}
}
    1af2:	bd30      	pop	{r4, r5, pc}
    1af4:	20000014 	.word	0x20000014
    1af8:	e000e010 	.word	0xe000e010

00001afc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1afc:	4b0c      	ldr	r3, [pc, #48]	; (1b30 <cpu_irq_enter_critical+0x34>)
    1afe:	681b      	ldr	r3, [r3, #0]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d106      	bne.n	1b12 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1b04:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1b08:	2b00      	cmp	r3, #0
    1b0a:	d007      	beq.n	1b1c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1b0c:	2200      	movs	r2, #0
    1b0e:	4b09      	ldr	r3, [pc, #36]	; (1b34 <cpu_irq_enter_critical+0x38>)
    1b10:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1b12:	4a07      	ldr	r2, [pc, #28]	; (1b30 <cpu_irq_enter_critical+0x34>)
    1b14:	6813      	ldr	r3, [r2, #0]
    1b16:	3301      	adds	r3, #1
    1b18:	6013      	str	r3, [r2, #0]
}
    1b1a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1b1c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1b1e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1b22:	2200      	movs	r2, #0
    1b24:	4b04      	ldr	r3, [pc, #16]	; (1b38 <cpu_irq_enter_critical+0x3c>)
    1b26:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1b28:	3201      	adds	r2, #1
    1b2a:	4b02      	ldr	r3, [pc, #8]	; (1b34 <cpu_irq_enter_critical+0x38>)
    1b2c:	701a      	strb	r2, [r3, #0]
    1b2e:	e7f0      	b.n	1b12 <cpu_irq_enter_critical+0x16>
    1b30:	200002a8 	.word	0x200002a8
    1b34:	200002ac 	.word	0x200002ac
    1b38:	2000001c 	.word	0x2000001c

00001b3c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1b3c:	4b08      	ldr	r3, [pc, #32]	; (1b60 <cpu_irq_leave_critical+0x24>)
    1b3e:	681a      	ldr	r2, [r3, #0]
    1b40:	3a01      	subs	r2, #1
    1b42:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1b44:	681b      	ldr	r3, [r3, #0]
    1b46:	2b00      	cmp	r3, #0
    1b48:	d109      	bne.n	1b5e <cpu_irq_leave_critical+0x22>
    1b4a:	4b06      	ldr	r3, [pc, #24]	; (1b64 <cpu_irq_leave_critical+0x28>)
    1b4c:	781b      	ldrb	r3, [r3, #0]
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d005      	beq.n	1b5e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1b52:	2201      	movs	r2, #1
    1b54:	4b04      	ldr	r3, [pc, #16]	; (1b68 <cpu_irq_leave_critical+0x2c>)
    1b56:	701a      	strb	r2, [r3, #0]
    1b58:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1b5c:	b662      	cpsie	i
	}
}
    1b5e:	4770      	bx	lr
    1b60:	200002a8 	.word	0x200002a8
    1b64:	200002ac 	.word	0x200002ac
    1b68:	2000001c 	.word	0x2000001c

00001b6c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b6e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1b70:	ac01      	add	r4, sp, #4
    1b72:	2501      	movs	r5, #1
    1b74:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1b76:	2700      	movs	r7, #0
    1b78:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1b7a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1b7c:	0021      	movs	r1, r4
    1b7e:	203e      	movs	r0, #62	; 0x3e
    1b80:	4e06      	ldr	r6, [pc, #24]	; (1b9c <system_board_init+0x30>)
    1b82:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1b84:	2280      	movs	r2, #128	; 0x80
    1b86:	05d2      	lsls	r2, r2, #23
    1b88:	4b05      	ldr	r3, [pc, #20]	; (1ba0 <system_board_init+0x34>)
    1b8a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1b8c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1b8e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1b90:	0021      	movs	r1, r4
    1b92:	200f      	movs	r0, #15
    1b94:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1b96:	b003      	add	sp, #12
    1b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b9a:	46c0      	nop			; (mov r8, r8)
    1b9c:	000020d5 	.word	0x000020d5
    1ba0:	41004480 	.word	0x41004480

00001ba4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1ba4:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1ba6:	2200      	movs	r2, #0
    1ba8:	2300      	movs	r3, #0
    1baa:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1bac:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1bae:	2100      	movs	r1, #0
    1bb0:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1bb2:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1bb4:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    1bb6:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    1bb8:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    1bba:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1bbc:	24c0      	movs	r4, #192	; 0xc0
    1bbe:	0164      	lsls	r4, r4, #5
    1bc0:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1bc2:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1bc4:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    1bc6:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    1bc8:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    1bca:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1bcc:	242a      	movs	r4, #42	; 0x2a
    1bce:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    1bd0:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1bd2:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1bd4:	3c06      	subs	r4, #6
    1bd6:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    1bd8:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    1bda:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    1bdc:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1bde:	232b      	movs	r3, #43	; 0x2b
    1be0:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    1be2:	3301      	adds	r3, #1
    1be4:	54c1      	strb	r1, [r0, r3]
}
    1be6:	bd10      	pop	{r4, pc}

00001be8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bea:	46d6      	mov	lr, sl
    1bec:	464f      	mov	r7, r9
    1bee:	4646      	mov	r6, r8
    1bf0:	b5c0      	push	{r6, r7, lr}
    1bf2:	b096      	sub	sp, #88	; 0x58
    1bf4:	0007      	movs	r7, r0
    1bf6:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1bf8:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1bfa:	4ac6      	ldr	r2, [pc, #792]	; (1f14 <adc_init+0x32c>)
    1bfc:	6a10      	ldr	r0, [r2, #32]
    1bfe:	2380      	movs	r3, #128	; 0x80
    1c00:	025b      	lsls	r3, r3, #9
    1c02:	4303      	orrs	r3, r0
    1c04:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1c06:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1c08:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1c0a:	07db      	lsls	r3, r3, #31
    1c0c:	d505      	bpl.n	1c1a <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1c0e:	b016      	add	sp, #88	; 0x58
    1c10:	bc1c      	pop	{r2, r3, r4}
    1c12:	4690      	mov	r8, r2
    1c14:	4699      	mov	r9, r3
    1c16:	46a2      	mov	sl, r4
    1c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1c1a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1c1c:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1c1e:	079b      	lsls	r3, r3, #30
    1c20:	d4f5      	bmi.n	1c0e <adc_init+0x26>
	module_inst->reference = config->reference;
    1c22:	7873      	ldrb	r3, [r6, #1]
    1c24:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1c26:	2b00      	cmp	r3, #0
    1c28:	d104      	bne.n	1c34 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    1c2a:	4abb      	ldr	r2, [pc, #748]	; (1f18 <adc_init+0x330>)
    1c2c:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1c2e:	2104      	movs	r1, #4
    1c30:	430b      	orrs	r3, r1
    1c32:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1c34:	2300      	movs	r3, #0
    1c36:	60bb      	str	r3, [r7, #8]
    1c38:	60fb      	str	r3, [r7, #12]
    1c3a:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1c3c:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    1c3e:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1c40:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1c42:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1c44:	4bb5      	ldr	r3, [pc, #724]	; (1f1c <adc_init+0x334>)
    1c46:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1c48:	232a      	movs	r3, #42	; 0x2a
    1c4a:	5cf3      	ldrb	r3, [r6, r3]
    1c4c:	2b00      	cmp	r3, #0
    1c4e:	d105      	bne.n	1c5c <adc_init+0x74>
    1c50:	7d33      	ldrb	r3, [r6, #20]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d102      	bne.n	1c5c <adc_init+0x74>
		module_inst->software_trigger = true;
    1c56:	3301      	adds	r3, #1
    1c58:	777b      	strb	r3, [r7, #29]
    1c5a:	e001      	b.n	1c60 <adc_init+0x78>
		module_inst->software_trigger = false;
    1c5c:	2300      	movs	r3, #0
    1c5e:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1c60:	683b      	ldr	r3, [r7, #0]
    1c62:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1c64:	7833      	ldrb	r3, [r6, #0]
    1c66:	466a      	mov	r2, sp
    1c68:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1c6a:	4669      	mov	r1, sp
    1c6c:	201e      	movs	r0, #30
    1c6e:	4bac      	ldr	r3, [pc, #688]	; (1f20 <adc_init+0x338>)
    1c70:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1c72:	201e      	movs	r0, #30
    1c74:	4bab      	ldr	r3, [pc, #684]	; (1f24 <adc_init+0x33c>)
    1c76:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    1c78:	232c      	movs	r3, #44	; 0x2c
    1c7a:	5cf2      	ldrb	r2, [r6, r3]
    1c7c:	2a00      	cmp	r2, #0
    1c7e:	d054      	beq.n	1d2a <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1c80:	3b01      	subs	r3, #1
    1c82:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1c84:	7b33      	ldrb	r3, [r6, #12]
    1c86:	18eb      	adds	r3, r5, r3
    1c88:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    1c8a:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1c8c:	b2c9      	uxtb	r1, r1
    1c8e:	428b      	cmp	r3, r1
    1c90:	d221      	bcs.n	1cd6 <adc_init+0xee>
    1c92:	1952      	adds	r2, r2, r5
    1c94:	b2d3      	uxtb	r3, r2
    1c96:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    1c98:	4ba3      	ldr	r3, [pc, #652]	; (1f28 <adc_init+0x340>)
    1c9a:	469a      	mov	sl, r3
    1c9c:	e003      	b.n	1ca6 <adc_init+0xbe>
			offset++;
    1c9e:	3501      	adds	r5, #1
    1ca0:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1ca2:	454d      	cmp	r5, r9
    1ca4:	d017      	beq.n	1cd6 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1ca6:	240f      	movs	r4, #15
    1ca8:	402c      	ands	r4, r5
    1caa:	7b33      	ldrb	r3, [r6, #12]
    1cac:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    1cae:	2250      	movs	r2, #80	; 0x50
    1cb0:	499e      	ldr	r1, [pc, #632]	; (1f2c <adc_init+0x344>)
    1cb2:	a802      	add	r0, sp, #8
    1cb4:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1cb6:	2c13      	cmp	r4, #19
    1cb8:	d8f1      	bhi.n	1c9e <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1cba:	00a4      	lsls	r4, r4, #2
    1cbc:	ab02      	add	r3, sp, #8
    1cbe:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1cc0:	a901      	add	r1, sp, #4
    1cc2:	2300      	movs	r3, #0
    1cc4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1cc6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1cc8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1cca:	3301      	adds	r3, #1
    1ccc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1cce:	b2c0      	uxtb	r0, r0
    1cd0:	4b97      	ldr	r3, [pc, #604]	; (1f30 <adc_init+0x348>)
    1cd2:	4798      	blx	r3
    1cd4:	e7e3      	b.n	1c9e <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    1cd6:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1cd8:	2250      	movs	r2, #80	; 0x50
    1cda:	4994      	ldr	r1, [pc, #592]	; (1f2c <adc_init+0x344>)
    1cdc:	a802      	add	r0, sp, #8
    1cde:	4b92      	ldr	r3, [pc, #584]	; (1f28 <adc_init+0x340>)
    1ce0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1ce2:	2c13      	cmp	r4, #19
    1ce4:	d913      	bls.n	1d0e <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1ce6:	7d73      	ldrb	r3, [r6, #21]
    1ce8:	009b      	lsls	r3, r3, #2
    1cea:	b2db      	uxtb	r3, r3
    1cec:	4642      	mov	r2, r8
    1cee:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1cf0:	7db3      	ldrb	r3, [r6, #22]
    1cf2:	01db      	lsls	r3, r3, #7
    1cf4:	7872      	ldrb	r2, [r6, #1]
    1cf6:	4313      	orrs	r3, r2
    1cf8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    1cfa:	4642      	mov	r2, r8
    1cfc:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    1cfe:	7933      	ldrb	r3, [r6, #4]
    1d00:	2b34      	cmp	r3, #52	; 0x34
    1d02:	d900      	bls.n	1d06 <adc_init+0x11e>
    1d04:	e17b      	b.n	1ffe <adc_init+0x416>
    1d06:	009b      	lsls	r3, r3, #2
    1d08:	4a8a      	ldr	r2, [pc, #552]	; (1f34 <adc_init+0x34c>)
    1d0a:	58d3      	ldr	r3, [r2, r3]
    1d0c:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1d0e:	00a4      	lsls	r4, r4, #2
    1d10:	ab02      	add	r3, sp, #8
    1d12:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d14:	a901      	add	r1, sp, #4
    1d16:	2300      	movs	r3, #0
    1d18:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1d1a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1d1c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1d1e:	3301      	adds	r3, #1
    1d20:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1d22:	b2c0      	uxtb	r0, r0
    1d24:	4b82      	ldr	r3, [pc, #520]	; (1f30 <adc_init+0x348>)
    1d26:	4798      	blx	r3
    1d28:	e7dd      	b.n	1ce6 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    1d2a:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    1d2c:	2250      	movs	r2, #80	; 0x50
    1d2e:	497f      	ldr	r1, [pc, #508]	; (1f2c <adc_init+0x344>)
    1d30:	a802      	add	r0, sp, #8
    1d32:	4b7d      	ldr	r3, [pc, #500]	; (1f28 <adc_init+0x340>)
    1d34:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1d36:	2c13      	cmp	r4, #19
    1d38:	d915      	bls.n	1d66 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    1d3a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1d3c:	2250      	movs	r2, #80	; 0x50
    1d3e:	497b      	ldr	r1, [pc, #492]	; (1f2c <adc_init+0x344>)
    1d40:	a802      	add	r0, sp, #8
    1d42:	4b79      	ldr	r3, [pc, #484]	; (1f28 <adc_init+0x340>)
    1d44:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1d46:	2c13      	cmp	r4, #19
    1d48:	d8cd      	bhi.n	1ce6 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1d4a:	00a4      	lsls	r4, r4, #2
    1d4c:	ab02      	add	r3, sp, #8
    1d4e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d50:	a901      	add	r1, sp, #4
    1d52:	2300      	movs	r3, #0
    1d54:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1d56:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1d58:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1d5a:	3301      	adds	r3, #1
    1d5c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1d5e:	b2c0      	uxtb	r0, r0
    1d60:	4b73      	ldr	r3, [pc, #460]	; (1f30 <adc_init+0x348>)
    1d62:	4798      	blx	r3
    1d64:	e7bf      	b.n	1ce6 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1d66:	00a4      	lsls	r4, r4, #2
    1d68:	ab02      	add	r3, sp, #8
    1d6a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1d6c:	a901      	add	r1, sp, #4
    1d6e:	2300      	movs	r3, #0
    1d70:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1d72:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1d74:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1d76:	3301      	adds	r3, #1
    1d78:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1d7a:	b2c0      	uxtb	r0, r0
    1d7c:	4b6c      	ldr	r3, [pc, #432]	; (1f30 <adc_init+0x348>)
    1d7e:	4798      	blx	r3
    1d80:	e7db      	b.n	1d3a <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1d82:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1d84:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    1d86:	2102      	movs	r1, #2
    1d88:	e01a      	b.n	1dc0 <adc_init+0x1d8>
		adjres = config->divide_result;
    1d8a:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1d8c:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1d8e:	2410      	movs	r4, #16
    1d90:	e016      	b.n	1dc0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1d92:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1d94:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1d96:	2101      	movs	r1, #1
    1d98:	e012      	b.n	1dc0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    1d9a:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1d9c:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1d9e:	2100      	movs	r1, #0
    1da0:	e00e      	b.n	1dc0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1da2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1da4:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    1da6:	2100      	movs	r1, #0
    1da8:	e00a      	b.n	1dc0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1daa:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1dac:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    1dae:	2100      	movs	r1, #0
    1db0:	e006      	b.n	1dc0 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1db2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1db4:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    1db6:	2100      	movs	r1, #0
    1db8:	e002      	b.n	1dc0 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    1dba:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    1dbc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1dbe:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1dc0:	0109      	lsls	r1, r1, #4
    1dc2:	2270      	movs	r2, #112	; 0x70
    1dc4:	400a      	ands	r2, r1
    1dc6:	4313      	orrs	r3, r2
    1dc8:	4642      	mov	r2, r8
    1dca:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    1dcc:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    1dce:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    1dd0:	2b3f      	cmp	r3, #63	; 0x3f
    1dd2:	d900      	bls.n	1dd6 <adc_init+0x1ee>
    1dd4:	e71b      	b.n	1c0e <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    1dd6:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1dd8:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1dda:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1ddc:	b25b      	sxtb	r3, r3
    1dde:	2b00      	cmp	r3, #0
    1de0:	dbfb      	blt.n	1dda <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1de2:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1de4:	8872      	ldrh	r2, [r6, #2]
    1de6:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1de8:	2224      	movs	r2, #36	; 0x24
    1dea:	5cb2      	ldrb	r2, [r6, r2]
    1dec:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1dee:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1df0:	7d32      	ldrb	r2, [r6, #20]
    1df2:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1df4:	4313      	orrs	r3, r2
    1df6:	7cb2      	ldrb	r2, [r6, #18]
    1df8:	0052      	lsls	r2, r2, #1
    1dfa:	4313      	orrs	r3, r2
    1dfc:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    1dfe:	4642      	mov	r2, r8
    1e00:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1e02:	7e33      	ldrb	r3, [r6, #24]
    1e04:	2b00      	cmp	r3, #0
    1e06:	d020      	beq.n	1e4a <adc_init+0x262>
		switch (resolution) {
    1e08:	2c10      	cmp	r4, #16
    1e0a:	d100      	bne.n	1e0e <adc_init+0x226>
    1e0c:	e0d9      	b.n	1fc2 <adc_init+0x3da>
    1e0e:	d800      	bhi.n	1e12 <adc_init+0x22a>
    1e10:	e098      	b.n	1f44 <adc_init+0x35c>
    1e12:	2c20      	cmp	r4, #32
    1e14:	d100      	bne.n	1e18 <adc_init+0x230>
    1e16:	e0b6      	b.n	1f86 <adc_init+0x39e>
    1e18:	2c30      	cmp	r4, #48	; 0x30
    1e1a:	d116      	bne.n	1e4a <adc_init+0x262>
			if (config->differential_mode &&
    1e1c:	7cf2      	ldrb	r2, [r6, #19]
    1e1e:	2a00      	cmp	r2, #0
    1e20:	d00a      	beq.n	1e38 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1e22:	69f2      	ldr	r2, [r6, #28]
    1e24:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    1e26:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1e28:	2aff      	cmp	r2, #255	; 0xff
    1e2a:	d900      	bls.n	1e2e <adc_init+0x246>
    1e2c:	e6ef      	b.n	1c0e <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    1e2e:	6a32      	ldr	r2, [r6, #32]
    1e30:	3280      	adds	r2, #128	; 0x80
    1e32:	2aff      	cmp	r2, #255	; 0xff
    1e34:	d900      	bls.n	1e38 <adc_init+0x250>
    1e36:	e6ea      	b.n	1c0e <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    1e38:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    1e3a:	69f2      	ldr	r2, [r6, #28]
    1e3c:	2aff      	cmp	r2, #255	; 0xff
    1e3e:	dd00      	ble.n	1e42 <adc_init+0x25a>
    1e40:	e6e5      	b.n	1c0e <adc_init+0x26>
    1e42:	6a32      	ldr	r2, [r6, #32]
    1e44:	2aff      	cmp	r2, #255	; 0xff
    1e46:	dd00      	ble.n	1e4a <adc_init+0x262>
    1e48:	e6e1      	b.n	1c0e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1e4a:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1e4c:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1e4e:	b252      	sxtb	r2, r2
    1e50:	2a00      	cmp	r2, #0
    1e52:	dbfb      	blt.n	1e4c <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1e54:	4642      	mov	r2, r8
    1e56:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    1e58:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1e5a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1e5c:	b25b      	sxtb	r3, r3
    1e5e:	2b00      	cmp	r3, #0
    1e60:	dbfb      	blt.n	1e5a <adc_init+0x272>
	adc_module->WINLT.reg =
    1e62:	8bb3      	ldrh	r3, [r6, #28]
    1e64:	4642      	mov	r2, r8
    1e66:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    1e68:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1e6a:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1e6c:	b25b      	sxtb	r3, r3
    1e6e:	2b00      	cmp	r3, #0
    1e70:	dbfb      	blt.n	1e6a <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1e72:	8c33      	ldrh	r3, [r6, #32]
    1e74:	4642      	mov	r2, r8
    1e76:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1e78:	232c      	movs	r3, #44	; 0x2c
    1e7a:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1e7c:	2b00      	cmp	r3, #0
    1e7e:	d005      	beq.n	1e8c <adc_init+0x2a4>
		inputs_to_scan--;
    1e80:	3b01      	subs	r3, #1
    1e82:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1e84:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1e86:	2b0f      	cmp	r3, #15
    1e88:	d900      	bls.n	1e8c <adc_init+0x2a4>
    1e8a:	e6c0      	b.n	1c0e <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1e8c:	222b      	movs	r2, #43	; 0x2b
    1e8e:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1e90:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1e92:	290f      	cmp	r1, #15
    1e94:	d900      	bls.n	1e98 <adc_init+0x2b0>
    1e96:	e6ba      	b.n	1c0e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1e98:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1e9a:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1e9c:	b252      	sxtb	r2, r2
    1e9e:	2a00      	cmp	r2, #0
    1ea0:	dbfb      	blt.n	1e9a <adc_init+0x2b2>
			config->negative_input |
    1ea2:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1ea4:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    1ea6:	4302      	orrs	r2, r0
    1ea8:	68b0      	ldr	r0, [r6, #8]
    1eaa:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    1eac:	0509      	lsls	r1, r1, #20
			config->negative_input |
    1eae:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1eb0:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1eb2:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1eb4:	4642      	mov	r2, r8
    1eb6:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    1eb8:	232a      	movs	r3, #42	; 0x2a
    1eba:	5cf3      	ldrb	r3, [r6, r3]
    1ebc:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    1ebe:	230f      	movs	r3, #15
    1ec0:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1ec2:	3315      	adds	r3, #21
    1ec4:	5cf3      	ldrb	r3, [r6, r3]
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d012      	beq.n	1ef0 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1eca:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    1ecc:	4a1a      	ldr	r2, [pc, #104]	; (1f38 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    1ece:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1ed0:	4293      	cmp	r3, r2
    1ed2:	d900      	bls.n	1ed6 <adc_init+0x2ee>
    1ed4:	e69b      	b.n	1c0e <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1ed6:	4642      	mov	r2, r8
    1ed8:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    1eda:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    1edc:	2380      	movs	r3, #128	; 0x80
    1ede:	011b      	lsls	r3, r3, #4
    1ee0:	18d3      	adds	r3, r2, r3
    1ee2:	4915      	ldr	r1, [pc, #84]	; (1f38 <adc_init+0x350>)
    1ee4:	b29b      	uxth	r3, r3
    1ee6:	428b      	cmp	r3, r1
    1ee8:	d900      	bls.n	1eec <adc_init+0x304>
    1eea:	e690      	b.n	1c0e <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1eec:	4643      	mov	r3, r8
    1eee:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1ef0:	4b12      	ldr	r3, [pc, #72]	; (1f3c <adc_init+0x354>)
    1ef2:	681b      	ldr	r3, [r3, #0]
    1ef4:	015b      	lsls	r3, r3, #5
    1ef6:	22e0      	movs	r2, #224	; 0xe0
    1ef8:	00d2      	lsls	r2, r2, #3
    1efa:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    1efc:	4a10      	ldr	r2, [pc, #64]	; (1f40 <adc_init+0x358>)
    1efe:	6851      	ldr	r1, [r2, #4]
    1f00:	0149      	lsls	r1, r1, #5
    1f02:	6812      	ldr	r2, [r2, #0]
    1f04:	0ed2      	lsrs	r2, r2, #27
    1f06:	430a      	orrs	r2, r1
    1f08:	b2d2      	uxtb	r2, r2
			) |
    1f0a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1f0c:	4642      	mov	r2, r8
    1f0e:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    1f10:	2000      	movs	r0, #0
    1f12:	e67c      	b.n	1c0e <adc_init+0x26>
    1f14:	40000400 	.word	0x40000400
    1f18:	40000800 	.word	0x40000800
    1f1c:	20000398 	.word	0x20000398
    1f20:	00003169 	.word	0x00003169
    1f24:	000030dd 	.word	0x000030dd
    1f28:	00004bed 	.word	0x00004bed
    1f2c:	0000651c 	.word	0x0000651c
    1f30:	00003261 	.word	0x00003261
    1f34:	00006448 	.word	0x00006448
    1f38:	00000fff 	.word	0x00000fff
    1f3c:	00806024 	.word	0x00806024
    1f40:	00806020 	.word	0x00806020
		switch (resolution) {
    1f44:	2c00      	cmp	r4, #0
    1f46:	d000      	beq.n	1f4a <adc_init+0x362>
    1f48:	e77f      	b.n	1e4a <adc_init+0x262>
			if (config->differential_mode &&
    1f4a:	7cf2      	ldrb	r2, [r6, #19]
    1f4c:	2a00      	cmp	r2, #0
    1f4e:	d00f      	beq.n	1f70 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    1f50:	69f2      	ldr	r2, [r6, #28]
    1f52:	2180      	movs	r1, #128	; 0x80
    1f54:	0109      	lsls	r1, r1, #4
    1f56:	468c      	mov	ip, r1
    1f58:	4462      	add	r2, ip
			if (config->differential_mode &&
    1f5a:	492a      	ldr	r1, [pc, #168]	; (2004 <STACK_SIZE+0x4>)
				return STATUS_ERR_INVALID_ARG;
    1f5c:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1f5e:	428a      	cmp	r2, r1
    1f60:	d900      	bls.n	1f64 <adc_init+0x37c>
    1f62:	e654      	b.n	1c0e <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1f64:	6a32      	ldr	r2, [r6, #32]
    1f66:	4462      	add	r2, ip
    1f68:	4926      	ldr	r1, [pc, #152]	; (2004 <STACK_SIZE+0x4>)
    1f6a:	428a      	cmp	r2, r1
    1f6c:	d900      	bls.n	1f70 <adc_init+0x388>
    1f6e:	e64e      	b.n	1c0e <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    1f70:	4a24      	ldr	r2, [pc, #144]	; (2004 <STACK_SIZE+0x4>)
				return STATUS_ERR_INVALID_ARG;
    1f72:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1f74:	69f1      	ldr	r1, [r6, #28]
    1f76:	4291      	cmp	r1, r2
    1f78:	dd00      	ble.n	1f7c <adc_init+0x394>
    1f7a:	e648      	b.n	1c0e <adc_init+0x26>
    1f7c:	6a31      	ldr	r1, [r6, #32]
    1f7e:	4291      	cmp	r1, r2
    1f80:	dd00      	ble.n	1f84 <adc_init+0x39c>
    1f82:	e644      	b.n	1c0e <adc_init+0x26>
    1f84:	e761      	b.n	1e4a <adc_init+0x262>
			if (config->differential_mode &&
    1f86:	7cf2      	ldrb	r2, [r6, #19]
    1f88:	2a00      	cmp	r2, #0
    1f8a:	d00f      	beq.n	1fac <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    1f8c:	69f2      	ldr	r2, [r6, #28]
    1f8e:	2180      	movs	r1, #128	; 0x80
    1f90:	0089      	lsls	r1, r1, #2
    1f92:	468c      	mov	ip, r1
    1f94:	4462      	add	r2, ip
			if (config->differential_mode &&
    1f96:	491c      	ldr	r1, [pc, #112]	; (2008 <STACK_SIZE+0x8>)
				return STATUS_ERR_INVALID_ARG;
    1f98:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1f9a:	428a      	cmp	r2, r1
    1f9c:	d900      	bls.n	1fa0 <adc_init+0x3b8>
    1f9e:	e636      	b.n	1c0e <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    1fa0:	6a32      	ldr	r2, [r6, #32]
    1fa2:	4462      	add	r2, ip
    1fa4:	4918      	ldr	r1, [pc, #96]	; (2008 <STACK_SIZE+0x8>)
    1fa6:	428a      	cmp	r2, r1
    1fa8:	d900      	bls.n	1fac <adc_init+0x3c4>
    1faa:	e630      	b.n	1c0e <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1fac:	4a16      	ldr	r2, [pc, #88]	; (2008 <STACK_SIZE+0x8>)
				return STATUS_ERR_INVALID_ARG;
    1fae:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    1fb0:	69f1      	ldr	r1, [r6, #28]
    1fb2:	4291      	cmp	r1, r2
    1fb4:	dd00      	ble.n	1fb8 <adc_init+0x3d0>
    1fb6:	e62a      	b.n	1c0e <adc_init+0x26>
    1fb8:	6a31      	ldr	r1, [r6, #32]
    1fba:	4291      	cmp	r1, r2
    1fbc:	dd00      	ble.n	1fc0 <adc_init+0x3d8>
    1fbe:	e626      	b.n	1c0e <adc_init+0x26>
    1fc0:	e743      	b.n	1e4a <adc_init+0x262>
			if (config->differential_mode &&
    1fc2:	7cf2      	ldrb	r2, [r6, #19]
    1fc4:	2a00      	cmp	r2, #0
    1fc6:	d00f      	beq.n	1fe8 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    1fc8:	69f2      	ldr	r2, [r6, #28]
    1fca:	2180      	movs	r1, #128	; 0x80
    1fcc:	0209      	lsls	r1, r1, #8
    1fce:	468c      	mov	ip, r1
    1fd0:	4462      	add	r2, ip
			if (config->differential_mode &&
    1fd2:	490e      	ldr	r1, [pc, #56]	; (200c <STACK_SIZE+0xc>)
				return STATUS_ERR_INVALID_ARG;
    1fd4:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1fd6:	428a      	cmp	r2, r1
    1fd8:	d900      	bls.n	1fdc <adc_init+0x3f4>
    1fda:	e618      	b.n	1c0e <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    1fdc:	6a32      	ldr	r2, [r6, #32]
    1fde:	4462      	add	r2, ip
    1fe0:	490a      	ldr	r1, [pc, #40]	; (200c <STACK_SIZE+0xc>)
    1fe2:	428a      	cmp	r2, r1
    1fe4:	d900      	bls.n	1fe8 <adc_init+0x400>
    1fe6:	e612      	b.n	1c0e <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    1fe8:	4a08      	ldr	r2, [pc, #32]	; (200c <STACK_SIZE+0xc>)
				return STATUS_ERR_INVALID_ARG;
    1fea:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    1fec:	69f1      	ldr	r1, [r6, #28]
    1fee:	4291      	cmp	r1, r2
    1ff0:	dd00      	ble.n	1ff4 <adc_init+0x40c>
    1ff2:	e60c      	b.n	1c0e <adc_init+0x26>
    1ff4:	6a31      	ldr	r1, [r6, #32]
    1ff6:	4291      	cmp	r1, r2
    1ff8:	dd00      	ble.n	1ffc <adc_init+0x414>
    1ffa:	e608      	b.n	1c0e <adc_init+0x26>
    1ffc:	e725      	b.n	1e4a <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    1ffe:	2017      	movs	r0, #23
    2000:	e605      	b.n	1c0e <adc_init+0x26>
    2002:	46c0      	nop			; (mov r8, r8)
    2004:	00000fff 	.word	0x00000fff
    2008:	000003ff 	.word	0x000003ff
    200c:	0000ffff 	.word	0x0000ffff

00002010 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    2010:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    2012:	4b2f      	ldr	r3, [pc, #188]	; (20d0 <ADC_Handler+0xc0>)
    2014:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    2016:	682b      	ldr	r3, [r5, #0]
    2018:	7e1a      	ldrb	r2, [r3, #24]
    201a:	7ddc      	ldrb	r4, [r3, #23]
    201c:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    201e:	07e2      	lsls	r2, r4, #31
    2020:	d416      	bmi.n	2050 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
    2022:	0763      	lsls	r3, r4, #29
    2024:	d508      	bpl.n	2038 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2026:	2304      	movs	r3, #4
    2028:	682a      	ldr	r2, [r5, #0]
    202a:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    202c:	7eeb      	ldrb	r3, [r5, #27]
    202e:	079b      	lsls	r3, r3, #30
    2030:	d502      	bpl.n	2038 <ADC_Handler+0x28>
    2032:	7eab      	ldrb	r3, [r5, #26]
    2034:	079b      	lsls	r3, r3, #30
    2036:	d442      	bmi.n	20be <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    2038:	07a3      	lsls	r3, r4, #30
    203a:	d508      	bpl.n	204e <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    203c:	2302      	movs	r3, #2
    203e:	682a      	ldr	r2, [r5, #0]
    2040:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2042:	7eeb      	ldrb	r3, [r5, #27]
    2044:	075b      	lsls	r3, r3, #29
    2046:	d502      	bpl.n	204e <ADC_Handler+0x3e>
    2048:	7eab      	ldrb	r3, [r5, #26]
    204a:	075b      	lsls	r3, r3, #29
    204c:	d43b      	bmi.n	20c6 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    204e:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2050:	2201      	movs	r2, #1
    2052:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    2054:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2056:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
    2058:	b25b      	sxtb	r3, r3
    205a:	2b00      	cmp	r3, #0
    205c:	dbfb      	blt.n	2056 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    205e:	6969      	ldr	r1, [r5, #20]
    2060:	1c8b      	adds	r3, r1, #2
    2062:	616b      	str	r3, [r5, #20]
    2064:	8b53      	ldrh	r3, [r2, #26]
    2066:	b29b      	uxth	r3, r3
    2068:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
    206a:	8b2b      	ldrh	r3, [r5, #24]
    206c:	3b01      	subs	r3, #1
    206e:	b29b      	uxth	r3, r3
    2070:	832b      	strh	r3, [r5, #24]
    2072:	2b00      	cmp	r3, #0
    2074:	d011      	beq.n	209a <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
    2076:	7f6b      	ldrb	r3, [r5, #29]
    2078:	2b00      	cmp	r3, #0
    207a:	d0d2      	beq.n	2022 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    207c:	682a      	ldr	r2, [r5, #0]
    207e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    2080:	b25b      	sxtb	r3, r3
    2082:	2b00      	cmp	r3, #0
    2084:	dbfb      	blt.n	207e <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2086:	7b13      	ldrb	r3, [r2, #12]
    2088:	2102      	movs	r1, #2
    208a:	430b      	orrs	r3, r1
    208c:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    208e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2090:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    2092:	b25b      	sxtb	r3, r3
    2094:	2b00      	cmp	r3, #0
    2096:	dbfb      	blt.n	2090 <ADC_Handler+0x80>
    2098:	e7c3      	b.n	2022 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    209a:	2301      	movs	r3, #1
    209c:	682a      	ldr	r2, [r5, #0]
    209e:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
    20a0:	7f2b      	ldrb	r3, [r5, #28]
    20a2:	2b05      	cmp	r3, #5
    20a4:	d1bd      	bne.n	2022 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
    20a6:	2300      	movs	r3, #0
    20a8:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    20aa:	7eeb      	ldrb	r3, [r5, #27]
    20ac:	07db      	lsls	r3, r3, #31
    20ae:	d5b8      	bpl.n	2022 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    20b0:	7eab      	ldrb	r3, [r5, #26]
    20b2:	07db      	lsls	r3, r3, #31
    20b4:	d5b5      	bpl.n	2022 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    20b6:	0028      	movs	r0, r5
    20b8:	68ab      	ldr	r3, [r5, #8]
    20ba:	4798      	blx	r3
    20bc:	e7b1      	b.n	2022 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    20be:	0028      	movs	r0, r5
    20c0:	68eb      	ldr	r3, [r5, #12]
    20c2:	4798      	blx	r3
    20c4:	e7b8      	b.n	2038 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    20c6:	692b      	ldr	r3, [r5, #16]
    20c8:	0028      	movs	r0, r5
    20ca:	4798      	blx	r3
}
    20cc:	e7bf      	b.n	204e <ADC_Handler+0x3e>
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	20000398 	.word	0x20000398

000020d4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    20d4:	b500      	push	{lr}
    20d6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    20d8:	ab01      	add	r3, sp, #4
    20da:	2280      	movs	r2, #128	; 0x80
    20dc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    20de:	780a      	ldrb	r2, [r1, #0]
    20e0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    20e2:	784a      	ldrb	r2, [r1, #1]
    20e4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    20e6:	788a      	ldrb	r2, [r1, #2]
    20e8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    20ea:	0019      	movs	r1, r3
    20ec:	4b01      	ldr	r3, [pc, #4]	; (20f4 <port_pin_set_config+0x20>)
    20ee:	4798      	blx	r3
}
    20f0:	b003      	add	sp, #12
    20f2:	bd00      	pop	{pc}
    20f4:	00003261 	.word	0x00003261

000020f8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    20f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fa:	46de      	mov	lr, fp
    20fc:	4657      	mov	r7, sl
    20fe:	464e      	mov	r6, r9
    2100:	4645      	mov	r5, r8
    2102:	b5e0      	push	{r5, r6, r7, lr}
    2104:	b087      	sub	sp, #28
    2106:	4680      	mov	r8, r0
    2108:	9104      	str	r1, [sp, #16]
    210a:	0016      	movs	r6, r2
    210c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    210e:	2200      	movs	r2, #0
    2110:	2300      	movs	r3, #0
    2112:	2100      	movs	r1, #0
    2114:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    2116:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    2118:	2001      	movs	r0, #1
    211a:	0021      	movs	r1, r4
    211c:	9600      	str	r6, [sp, #0]
    211e:	9701      	str	r7, [sp, #4]
    2120:	465c      	mov	r4, fp
    2122:	9403      	str	r4, [sp, #12]
    2124:	4644      	mov	r4, r8
    2126:	9405      	str	r4, [sp, #20]
    2128:	e013      	b.n	2152 <long_division+0x5a>
    212a:	2420      	movs	r4, #32
    212c:	1a64      	subs	r4, r4, r1
    212e:	0005      	movs	r5, r0
    2130:	40e5      	lsrs	r5, r4
    2132:	46a8      	mov	r8, r5
    2134:	e014      	b.n	2160 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    2136:	9c00      	ldr	r4, [sp, #0]
    2138:	9d01      	ldr	r5, [sp, #4]
    213a:	1b12      	subs	r2, r2, r4
    213c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    213e:	465c      	mov	r4, fp
    2140:	464d      	mov	r5, r9
    2142:	432c      	orrs	r4, r5
    2144:	46a3      	mov	fp, r4
    2146:	9c03      	ldr	r4, [sp, #12]
    2148:	4645      	mov	r5, r8
    214a:	432c      	orrs	r4, r5
    214c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    214e:	3901      	subs	r1, #1
    2150:	d325      	bcc.n	219e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    2152:	2420      	movs	r4, #32
    2154:	4264      	negs	r4, r4
    2156:	190c      	adds	r4, r1, r4
    2158:	d4e7      	bmi.n	212a <long_division+0x32>
    215a:	0005      	movs	r5, r0
    215c:	40a5      	lsls	r5, r4
    215e:	46a8      	mov	r8, r5
    2160:	0004      	movs	r4, r0
    2162:	408c      	lsls	r4, r1
    2164:	46a1      	mov	r9, r4
		r = r << 1;
    2166:	1892      	adds	r2, r2, r2
    2168:	415b      	adcs	r3, r3
    216a:	0014      	movs	r4, r2
    216c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    216e:	9e05      	ldr	r6, [sp, #20]
    2170:	464f      	mov	r7, r9
    2172:	403e      	ands	r6, r7
    2174:	46b4      	mov	ip, r6
    2176:	9e04      	ldr	r6, [sp, #16]
    2178:	4647      	mov	r7, r8
    217a:	403e      	ands	r6, r7
    217c:	46b2      	mov	sl, r6
    217e:	4666      	mov	r6, ip
    2180:	4657      	mov	r7, sl
    2182:	433e      	orrs	r6, r7
    2184:	d003      	beq.n	218e <long_division+0x96>
			r |= 0x01;
    2186:	0006      	movs	r6, r0
    2188:	4326      	orrs	r6, r4
    218a:	0032      	movs	r2, r6
    218c:	002b      	movs	r3, r5
		if (r >= d) {
    218e:	9c00      	ldr	r4, [sp, #0]
    2190:	9d01      	ldr	r5, [sp, #4]
    2192:	429d      	cmp	r5, r3
    2194:	d8db      	bhi.n	214e <long_division+0x56>
    2196:	d1ce      	bne.n	2136 <long_division+0x3e>
    2198:	4294      	cmp	r4, r2
    219a:	d8d8      	bhi.n	214e <long_division+0x56>
    219c:	e7cb      	b.n	2136 <long_division+0x3e>
    219e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    21a0:	4658      	mov	r0, fp
    21a2:	0019      	movs	r1, r3
    21a4:	b007      	add	sp, #28
    21a6:	bc3c      	pop	{r2, r3, r4, r5}
    21a8:	4690      	mov	r8, r2
    21aa:	4699      	mov	r9, r3
    21ac:	46a2      	mov	sl, r4
    21ae:	46ab      	mov	fp, r5
    21b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000021b2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    21b2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    21b4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    21b6:	2340      	movs	r3, #64	; 0x40
    21b8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    21ba:	4281      	cmp	r1, r0
    21bc:	d202      	bcs.n	21c4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    21be:	0018      	movs	r0, r3
    21c0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    21c2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    21c4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    21c6:	1c63      	adds	r3, r4, #1
    21c8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    21ca:	4288      	cmp	r0, r1
    21cc:	d9f9      	bls.n	21c2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    21ce:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    21d0:	2cff      	cmp	r4, #255	; 0xff
    21d2:	d8f4      	bhi.n	21be <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    21d4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    21d6:	2300      	movs	r3, #0
    21d8:	e7f1      	b.n	21be <_sercom_get_sync_baud_val+0xc>
	...

000021dc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    21dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21de:	b083      	sub	sp, #12
    21e0:	000f      	movs	r7, r1
    21e2:	0016      	movs	r6, r2
    21e4:	aa08      	add	r2, sp, #32
    21e6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    21e8:	0004      	movs	r4, r0
    21ea:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    21ec:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    21ee:	42bc      	cmp	r4, r7
    21f0:	d902      	bls.n	21f8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    21f2:	0010      	movs	r0, r2
    21f4:	b003      	add	sp, #12
    21f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    21f8:	2b00      	cmp	r3, #0
    21fa:	d114      	bne.n	2226 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    21fc:	0002      	movs	r2, r0
    21fe:	0008      	movs	r0, r1
    2200:	2100      	movs	r1, #0
    2202:	4c19      	ldr	r4, [pc, #100]	; (2268 <_sercom_get_async_baud_val+0x8c>)
    2204:	47a0      	blx	r4
    2206:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    2208:	003a      	movs	r2, r7
    220a:	2300      	movs	r3, #0
    220c:	2000      	movs	r0, #0
    220e:	4c17      	ldr	r4, [pc, #92]	; (226c <_sercom_get_async_baud_val+0x90>)
    2210:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2212:	2200      	movs	r2, #0
    2214:	2301      	movs	r3, #1
    2216:	1a12      	subs	r2, r2, r0
    2218:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    221a:	0c12      	lsrs	r2, r2, #16
    221c:	041b      	lsls	r3, r3, #16
    221e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    2220:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    2222:	2200      	movs	r2, #0
    2224:	e7e5      	b.n	21f2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    2226:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2228:	2b01      	cmp	r3, #1
    222a:	d1f9      	bne.n	2220 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    222c:	000a      	movs	r2, r1
    222e:	2300      	movs	r3, #0
    2230:	2100      	movs	r1, #0
    2232:	4c0d      	ldr	r4, [pc, #52]	; (2268 <_sercom_get_async_baud_val+0x8c>)
    2234:	47a0      	blx	r4
    2236:	0002      	movs	r2, r0
    2238:	000b      	movs	r3, r1
    223a:	9200      	str	r2, [sp, #0]
    223c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    223e:	0038      	movs	r0, r7
    2240:	2100      	movs	r1, #0
    2242:	4c0a      	ldr	r4, [pc, #40]	; (226c <_sercom_get_async_baud_val+0x90>)
    2244:	47a0      	blx	r4
    2246:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    2248:	2380      	movs	r3, #128	; 0x80
    224a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    224c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    224e:	4298      	cmp	r0, r3
    2250:	d8cf      	bhi.n	21f2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2252:	0f79      	lsrs	r1, r7, #29
    2254:	00f8      	lsls	r0, r7, #3
    2256:	9a00      	ldr	r2, [sp, #0]
    2258:	9b01      	ldr	r3, [sp, #4]
    225a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    225c:	00ea      	lsls	r2, r5, #3
    225e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    2260:	b2d2      	uxtb	r2, r2
    2262:	0352      	lsls	r2, r2, #13
    2264:	432a      	orrs	r2, r5
    2266:	e7db      	b.n	2220 <_sercom_get_async_baud_val+0x44>
    2268:	00004b05 	.word	0x00004b05
    226c:	000020f9 	.word	0x000020f9

00002270 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2270:	b510      	push	{r4, lr}
    2272:	b082      	sub	sp, #8
    2274:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2276:	4b0e      	ldr	r3, [pc, #56]	; (22b0 <sercom_set_gclk_generator+0x40>)
    2278:	781b      	ldrb	r3, [r3, #0]
    227a:	2b00      	cmp	r3, #0
    227c:	d007      	beq.n	228e <sercom_set_gclk_generator+0x1e>
    227e:	2900      	cmp	r1, #0
    2280:	d105      	bne.n	228e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2282:	4b0b      	ldr	r3, [pc, #44]	; (22b0 <sercom_set_gclk_generator+0x40>)
    2284:	785b      	ldrb	r3, [r3, #1]
    2286:	4283      	cmp	r3, r0
    2288:	d010      	beq.n	22ac <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    228a:	201d      	movs	r0, #29
    228c:	e00c      	b.n	22a8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    228e:	a901      	add	r1, sp, #4
    2290:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    2292:	2013      	movs	r0, #19
    2294:	4b07      	ldr	r3, [pc, #28]	; (22b4 <sercom_set_gclk_generator+0x44>)
    2296:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2298:	2013      	movs	r0, #19
    229a:	4b07      	ldr	r3, [pc, #28]	; (22b8 <sercom_set_gclk_generator+0x48>)
    229c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    229e:	4b04      	ldr	r3, [pc, #16]	; (22b0 <sercom_set_gclk_generator+0x40>)
    22a0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    22a2:	2201      	movs	r2, #1
    22a4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    22a6:	2000      	movs	r0, #0
}
    22a8:	b002      	add	sp, #8
    22aa:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    22ac:	2000      	movs	r0, #0
    22ae:	e7fb      	b.n	22a8 <sercom_set_gclk_generator+0x38>
    22b0:	200002b0 	.word	0x200002b0
    22b4:	00003169 	.word	0x00003169
    22b8:	000030dd 	.word	0x000030dd

000022bc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    22bc:	4b40      	ldr	r3, [pc, #256]	; (23c0 <_sercom_get_default_pad+0x104>)
    22be:	4298      	cmp	r0, r3
    22c0:	d031      	beq.n	2326 <_sercom_get_default_pad+0x6a>
    22c2:	d90a      	bls.n	22da <_sercom_get_default_pad+0x1e>
    22c4:	4b3f      	ldr	r3, [pc, #252]	; (23c4 <_sercom_get_default_pad+0x108>)
    22c6:	4298      	cmp	r0, r3
    22c8:	d04d      	beq.n	2366 <_sercom_get_default_pad+0xaa>
    22ca:	4b3f      	ldr	r3, [pc, #252]	; (23c8 <_sercom_get_default_pad+0x10c>)
    22cc:	4298      	cmp	r0, r3
    22ce:	d05a      	beq.n	2386 <_sercom_get_default_pad+0xca>
    22d0:	4b3e      	ldr	r3, [pc, #248]	; (23cc <_sercom_get_default_pad+0x110>)
    22d2:	4298      	cmp	r0, r3
    22d4:	d037      	beq.n	2346 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    22d6:	2000      	movs	r0, #0
}
    22d8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    22da:	4b3d      	ldr	r3, [pc, #244]	; (23d0 <_sercom_get_default_pad+0x114>)
    22dc:	4298      	cmp	r0, r3
    22de:	d00c      	beq.n	22fa <_sercom_get_default_pad+0x3e>
    22e0:	4b3c      	ldr	r3, [pc, #240]	; (23d4 <_sercom_get_default_pad+0x118>)
    22e2:	4298      	cmp	r0, r3
    22e4:	d1f7      	bne.n	22d6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    22e6:	2901      	cmp	r1, #1
    22e8:	d017      	beq.n	231a <_sercom_get_default_pad+0x5e>
    22ea:	2900      	cmp	r1, #0
    22ec:	d05d      	beq.n	23aa <_sercom_get_default_pad+0xee>
    22ee:	2902      	cmp	r1, #2
    22f0:	d015      	beq.n	231e <_sercom_get_default_pad+0x62>
    22f2:	2903      	cmp	r1, #3
    22f4:	d015      	beq.n	2322 <_sercom_get_default_pad+0x66>
	return 0;
    22f6:	2000      	movs	r0, #0
    22f8:	e7ee      	b.n	22d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    22fa:	2901      	cmp	r1, #1
    22fc:	d007      	beq.n	230e <_sercom_get_default_pad+0x52>
    22fe:	2900      	cmp	r1, #0
    2300:	d051      	beq.n	23a6 <_sercom_get_default_pad+0xea>
    2302:	2902      	cmp	r1, #2
    2304:	d005      	beq.n	2312 <_sercom_get_default_pad+0x56>
    2306:	2903      	cmp	r1, #3
    2308:	d005      	beq.n	2316 <_sercom_get_default_pad+0x5a>
	return 0;
    230a:	2000      	movs	r0, #0
    230c:	e7e4      	b.n	22d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    230e:	4832      	ldr	r0, [pc, #200]	; (23d8 <_sercom_get_default_pad+0x11c>)
    2310:	e7e2      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    2312:	4832      	ldr	r0, [pc, #200]	; (23dc <_sercom_get_default_pad+0x120>)
    2314:	e7e0      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    2316:	4832      	ldr	r0, [pc, #200]	; (23e0 <_sercom_get_default_pad+0x124>)
    2318:	e7de      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    231a:	4832      	ldr	r0, [pc, #200]	; (23e4 <_sercom_get_default_pad+0x128>)
    231c:	e7dc      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    231e:	4832      	ldr	r0, [pc, #200]	; (23e8 <_sercom_get_default_pad+0x12c>)
    2320:	e7da      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    2322:	4832      	ldr	r0, [pc, #200]	; (23ec <_sercom_get_default_pad+0x130>)
    2324:	e7d8      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    2326:	2901      	cmp	r1, #1
    2328:	d007      	beq.n	233a <_sercom_get_default_pad+0x7e>
    232a:	2900      	cmp	r1, #0
    232c:	d03f      	beq.n	23ae <_sercom_get_default_pad+0xf2>
    232e:	2902      	cmp	r1, #2
    2330:	d005      	beq.n	233e <_sercom_get_default_pad+0x82>
    2332:	2903      	cmp	r1, #3
    2334:	d005      	beq.n	2342 <_sercom_get_default_pad+0x86>
	return 0;
    2336:	2000      	movs	r0, #0
    2338:	e7ce      	b.n	22d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    233a:	482d      	ldr	r0, [pc, #180]	; (23f0 <_sercom_get_default_pad+0x134>)
    233c:	e7cc      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    233e:	482d      	ldr	r0, [pc, #180]	; (23f4 <_sercom_get_default_pad+0x138>)
    2340:	e7ca      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    2342:	482d      	ldr	r0, [pc, #180]	; (23f8 <_sercom_get_default_pad+0x13c>)
    2344:	e7c8      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    2346:	2901      	cmp	r1, #1
    2348:	d007      	beq.n	235a <_sercom_get_default_pad+0x9e>
    234a:	2900      	cmp	r1, #0
    234c:	d031      	beq.n	23b2 <_sercom_get_default_pad+0xf6>
    234e:	2902      	cmp	r1, #2
    2350:	d005      	beq.n	235e <_sercom_get_default_pad+0xa2>
    2352:	2903      	cmp	r1, #3
    2354:	d005      	beq.n	2362 <_sercom_get_default_pad+0xa6>
	return 0;
    2356:	2000      	movs	r0, #0
    2358:	e7be      	b.n	22d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    235a:	4828      	ldr	r0, [pc, #160]	; (23fc <_sercom_get_default_pad+0x140>)
    235c:	e7bc      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    235e:	4828      	ldr	r0, [pc, #160]	; (2400 <_sercom_get_default_pad+0x144>)
    2360:	e7ba      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    2362:	4828      	ldr	r0, [pc, #160]	; (2404 <_sercom_get_default_pad+0x148>)
    2364:	e7b8      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    2366:	2901      	cmp	r1, #1
    2368:	d007      	beq.n	237a <_sercom_get_default_pad+0xbe>
    236a:	2900      	cmp	r1, #0
    236c:	d023      	beq.n	23b6 <_sercom_get_default_pad+0xfa>
    236e:	2902      	cmp	r1, #2
    2370:	d005      	beq.n	237e <_sercom_get_default_pad+0xc2>
    2372:	2903      	cmp	r1, #3
    2374:	d005      	beq.n	2382 <_sercom_get_default_pad+0xc6>
	return 0;
    2376:	2000      	movs	r0, #0
    2378:	e7ae      	b.n	22d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    237a:	4823      	ldr	r0, [pc, #140]	; (2408 <_sercom_get_default_pad+0x14c>)
    237c:	e7ac      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    237e:	4823      	ldr	r0, [pc, #140]	; (240c <_sercom_get_default_pad+0x150>)
    2380:	e7aa      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    2382:	4823      	ldr	r0, [pc, #140]	; (2410 <_sercom_get_default_pad+0x154>)
    2384:	e7a8      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    2386:	2901      	cmp	r1, #1
    2388:	d007      	beq.n	239a <_sercom_get_default_pad+0xde>
    238a:	2900      	cmp	r1, #0
    238c:	d015      	beq.n	23ba <_sercom_get_default_pad+0xfe>
    238e:	2902      	cmp	r1, #2
    2390:	d005      	beq.n	239e <_sercom_get_default_pad+0xe2>
    2392:	2903      	cmp	r1, #3
    2394:	d005      	beq.n	23a2 <_sercom_get_default_pad+0xe6>
	return 0;
    2396:	2000      	movs	r0, #0
    2398:	e79e      	b.n	22d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    239a:	481e      	ldr	r0, [pc, #120]	; (2414 <_sercom_get_default_pad+0x158>)
    239c:	e79c      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    239e:	481e      	ldr	r0, [pc, #120]	; (2418 <_sercom_get_default_pad+0x15c>)
    23a0:	e79a      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    23a2:	481e      	ldr	r0, [pc, #120]	; (241c <_sercom_get_default_pad+0x160>)
    23a4:	e798      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    23a6:	481e      	ldr	r0, [pc, #120]	; (2420 <_sercom_get_default_pad+0x164>)
    23a8:	e796      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    23aa:	2003      	movs	r0, #3
    23ac:	e794      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    23ae:	481d      	ldr	r0, [pc, #116]	; (2424 <_sercom_get_default_pad+0x168>)
    23b0:	e792      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    23b2:	481d      	ldr	r0, [pc, #116]	; (2428 <_sercom_get_default_pad+0x16c>)
    23b4:	e790      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    23b6:	481d      	ldr	r0, [pc, #116]	; (242c <_sercom_get_default_pad+0x170>)
    23b8:	e78e      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    23ba:	481d      	ldr	r0, [pc, #116]	; (2430 <_sercom_get_default_pad+0x174>)
    23bc:	e78c      	b.n	22d8 <_sercom_get_default_pad+0x1c>
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	42001000 	.word	0x42001000
    23c4:	42001800 	.word	0x42001800
    23c8:	42001c00 	.word	0x42001c00
    23cc:	42001400 	.word	0x42001400
    23d0:	42000800 	.word	0x42000800
    23d4:	42000c00 	.word	0x42000c00
    23d8:	00050003 	.word	0x00050003
    23dc:	00060003 	.word	0x00060003
    23e0:	00070003 	.word	0x00070003
    23e4:	00010003 	.word	0x00010003
    23e8:	001e0003 	.word	0x001e0003
    23ec:	001f0003 	.word	0x001f0003
    23f0:	00090003 	.word	0x00090003
    23f4:	000a0003 	.word	0x000a0003
    23f8:	000b0003 	.word	0x000b0003
    23fc:	00110003 	.word	0x00110003
    2400:	00120003 	.word	0x00120003
    2404:	00130003 	.word	0x00130003
    2408:	000d0003 	.word	0x000d0003
    240c:	000e0003 	.word	0x000e0003
    2410:	000f0003 	.word	0x000f0003
    2414:	00170003 	.word	0x00170003
    2418:	00180003 	.word	0x00180003
    241c:	00190003 	.word	0x00190003
    2420:	00040003 	.word	0x00040003
    2424:	00080003 	.word	0x00080003
    2428:	00100003 	.word	0x00100003
    242c:	000c0003 	.word	0x000c0003
    2430:	00160003 	.word	0x00160003

00002434 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2434:	b530      	push	{r4, r5, lr}
    2436:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2438:	4b0b      	ldr	r3, [pc, #44]	; (2468 <_sercom_get_sercom_inst_index+0x34>)
    243a:	466a      	mov	r2, sp
    243c:	cb32      	ldmia	r3!, {r1, r4, r5}
    243e:	c232      	stmia	r2!, {r1, r4, r5}
    2440:	cb32      	ldmia	r3!, {r1, r4, r5}
    2442:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2444:	9b00      	ldr	r3, [sp, #0]
    2446:	4283      	cmp	r3, r0
    2448:	d00b      	beq.n	2462 <_sercom_get_sercom_inst_index+0x2e>
    244a:	2301      	movs	r3, #1
    244c:	009a      	lsls	r2, r3, #2
    244e:	4669      	mov	r1, sp
    2450:	5852      	ldr	r2, [r2, r1]
    2452:	4282      	cmp	r2, r0
    2454:	d006      	beq.n	2464 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2456:	3301      	adds	r3, #1
    2458:	2b06      	cmp	r3, #6
    245a:	d1f7      	bne.n	244c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    245c:	2000      	movs	r0, #0
}
    245e:	b007      	add	sp, #28
    2460:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2462:	2300      	movs	r3, #0
			return i;
    2464:	b2d8      	uxtb	r0, r3
    2466:	e7fa      	b.n	245e <_sercom_get_sercom_inst_index+0x2a>
    2468:	0000656c 	.word	0x0000656c

0000246c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    246c:	4770      	bx	lr
	...

00002470 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2470:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    2472:	4b0a      	ldr	r3, [pc, #40]	; (249c <_sercom_set_handler+0x2c>)
    2474:	781b      	ldrb	r3, [r3, #0]
    2476:	2b00      	cmp	r3, #0
    2478:	d10c      	bne.n	2494 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    247a:	4f09      	ldr	r7, [pc, #36]	; (24a0 <_sercom_set_handler+0x30>)
    247c:	4e09      	ldr	r6, [pc, #36]	; (24a4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    247e:	4d0a      	ldr	r5, [pc, #40]	; (24a8 <_sercom_set_handler+0x38>)
    2480:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2482:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2484:	195a      	adds	r2, r3, r5
    2486:	6014      	str	r4, [r2, #0]
    2488:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    248a:	2b18      	cmp	r3, #24
    248c:	d1f9      	bne.n	2482 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    248e:	2201      	movs	r2, #1
    2490:	4b02      	ldr	r3, [pc, #8]	; (249c <_sercom_set_handler+0x2c>)
    2492:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2494:	0080      	lsls	r0, r0, #2
    2496:	4b02      	ldr	r3, [pc, #8]	; (24a0 <_sercom_set_handler+0x30>)
    2498:	50c1      	str	r1, [r0, r3]
}
    249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    249c:	200002b2 	.word	0x200002b2
    24a0:	200002b4 	.word	0x200002b4
    24a4:	0000246d 	.word	0x0000246d
    24a8:	2000039c 	.word	0x2000039c

000024ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    24ac:	b500      	push	{lr}
    24ae:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    24b0:	2309      	movs	r3, #9
    24b2:	466a      	mov	r2, sp
    24b4:	7013      	strb	r3, [r2, #0]
    24b6:	3301      	adds	r3, #1
    24b8:	7053      	strb	r3, [r2, #1]
    24ba:	3301      	adds	r3, #1
    24bc:	7093      	strb	r3, [r2, #2]
    24be:	3301      	adds	r3, #1
    24c0:	70d3      	strb	r3, [r2, #3]
    24c2:	3301      	adds	r3, #1
    24c4:	7113      	strb	r3, [r2, #4]
    24c6:	3301      	adds	r3, #1
    24c8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    24ca:	4b03      	ldr	r3, [pc, #12]	; (24d8 <_sercom_get_interrupt_vector+0x2c>)
    24cc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    24ce:	466b      	mov	r3, sp
    24d0:	5618      	ldrsb	r0, [r3, r0]
}
    24d2:	b003      	add	sp, #12
    24d4:	bd00      	pop	{pc}
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	00002435 	.word	0x00002435

000024dc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    24dc:	b510      	push	{r4, lr}
    24de:	4b02      	ldr	r3, [pc, #8]	; (24e8 <SERCOM0_Handler+0xc>)
    24e0:	681b      	ldr	r3, [r3, #0]
    24e2:	2000      	movs	r0, #0
    24e4:	4798      	blx	r3
    24e6:	bd10      	pop	{r4, pc}
    24e8:	200002b4 	.word	0x200002b4

000024ec <SERCOM1_Handler>:
    24ec:	b510      	push	{r4, lr}
    24ee:	4b02      	ldr	r3, [pc, #8]	; (24f8 <SERCOM1_Handler+0xc>)
    24f0:	685b      	ldr	r3, [r3, #4]
    24f2:	2001      	movs	r0, #1
    24f4:	4798      	blx	r3
    24f6:	bd10      	pop	{r4, pc}
    24f8:	200002b4 	.word	0x200002b4

000024fc <SERCOM2_Handler>:
    24fc:	b510      	push	{r4, lr}
    24fe:	4b02      	ldr	r3, [pc, #8]	; (2508 <SERCOM2_Handler+0xc>)
    2500:	689b      	ldr	r3, [r3, #8]
    2502:	2002      	movs	r0, #2
    2504:	4798      	blx	r3
    2506:	bd10      	pop	{r4, pc}
    2508:	200002b4 	.word	0x200002b4

0000250c <SERCOM3_Handler>:
    250c:	b510      	push	{r4, lr}
    250e:	4b02      	ldr	r3, [pc, #8]	; (2518 <SERCOM3_Handler+0xc>)
    2510:	68db      	ldr	r3, [r3, #12]
    2512:	2003      	movs	r0, #3
    2514:	4798      	blx	r3
    2516:	bd10      	pop	{r4, pc}
    2518:	200002b4 	.word	0x200002b4

0000251c <SERCOM4_Handler>:
    251c:	b510      	push	{r4, lr}
    251e:	4b02      	ldr	r3, [pc, #8]	; (2528 <SERCOM4_Handler+0xc>)
    2520:	691b      	ldr	r3, [r3, #16]
    2522:	2004      	movs	r0, #4
    2524:	4798      	blx	r3
    2526:	bd10      	pop	{r4, pc}
    2528:	200002b4 	.word	0x200002b4

0000252c <SERCOM5_Handler>:
    252c:	b510      	push	{r4, lr}
    252e:	4b02      	ldr	r3, [pc, #8]	; (2538 <SERCOM5_Handler+0xc>)
    2530:	695b      	ldr	r3, [r3, #20]
    2532:	2005      	movs	r0, #5
    2534:	4798      	blx	r3
    2536:	bd10      	pop	{r4, pc}
    2538:	200002b4 	.word	0x200002b4

0000253c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    253c:	b5f0      	push	{r4, r5, r6, r7, lr}
    253e:	46de      	mov	lr, fp
    2540:	4657      	mov	r7, sl
    2542:	464e      	mov	r6, r9
    2544:	4645      	mov	r5, r8
    2546:	b5e0      	push	{r5, r6, r7, lr}
    2548:	b091      	sub	sp, #68	; 0x44
    254a:	0005      	movs	r5, r0
    254c:	000c      	movs	r4, r1
    254e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2550:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2552:	0008      	movs	r0, r1
    2554:	4bba      	ldr	r3, [pc, #744]	; (2840 <usart_init+0x304>)
    2556:	4798      	blx	r3
    2558:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    255a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    255c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    255e:	07db      	lsls	r3, r3, #31
    2560:	d506      	bpl.n	2570 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2562:	b011      	add	sp, #68	; 0x44
    2564:	bc3c      	pop	{r2, r3, r4, r5}
    2566:	4690      	mov	r8, r2
    2568:	4699      	mov	r9, r3
    256a:	46a2      	mov	sl, r4
    256c:	46ab      	mov	fp, r5
    256e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2570:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2572:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2574:	079b      	lsls	r3, r3, #30
    2576:	d4f4      	bmi.n	2562 <usart_init+0x26>
    2578:	49b2      	ldr	r1, [pc, #712]	; (2844 <usart_init+0x308>)
    257a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    257c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    257e:	2301      	movs	r3, #1
    2580:	40bb      	lsls	r3, r7
    2582:	4303      	orrs	r3, r0
    2584:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2586:	a90f      	add	r1, sp, #60	; 0x3c
    2588:	272d      	movs	r7, #45	; 0x2d
    258a:	5df3      	ldrb	r3, [r6, r7]
    258c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    258e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2590:	b2d3      	uxtb	r3, r2
    2592:	9302      	str	r3, [sp, #8]
    2594:	0018      	movs	r0, r3
    2596:	4bac      	ldr	r3, [pc, #688]	; (2848 <usart_init+0x30c>)
    2598:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    259a:	9802      	ldr	r0, [sp, #8]
    259c:	4bab      	ldr	r3, [pc, #684]	; (284c <usart_init+0x310>)
    259e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    25a0:	5df0      	ldrb	r0, [r6, r7]
    25a2:	2100      	movs	r1, #0
    25a4:	4baa      	ldr	r3, [pc, #680]	; (2850 <usart_init+0x314>)
    25a6:	4798      	blx	r3
	module->character_size = config->character_size;
    25a8:	7af3      	ldrb	r3, [r6, #11]
    25aa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    25ac:	2324      	movs	r3, #36	; 0x24
    25ae:	5cf3      	ldrb	r3, [r6, r3]
    25b0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    25b2:	2325      	movs	r3, #37	; 0x25
    25b4:	5cf3      	ldrb	r3, [r6, r3]
    25b6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    25b8:	7ef3      	ldrb	r3, [r6, #27]
    25ba:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    25bc:	7f33      	ldrb	r3, [r6, #28]
    25be:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    25c0:	682b      	ldr	r3, [r5, #0]
    25c2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    25c4:	0018      	movs	r0, r3
    25c6:	4b9e      	ldr	r3, [pc, #632]	; (2840 <usart_init+0x304>)
    25c8:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    25ca:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    25cc:	2200      	movs	r2, #0
    25ce:	230e      	movs	r3, #14
    25d0:	a906      	add	r1, sp, #24
    25d2:	468c      	mov	ip, r1
    25d4:	4463      	add	r3, ip
    25d6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    25d8:	8a32      	ldrh	r2, [r6, #16]
    25da:	9202      	str	r2, [sp, #8]
    25dc:	2380      	movs	r3, #128	; 0x80
    25de:	01db      	lsls	r3, r3, #7
    25e0:	429a      	cmp	r2, r3
    25e2:	d100      	bne.n	25e6 <usart_init+0xaa>
    25e4:	e09a      	b.n	271c <usart_init+0x1e0>
    25e6:	d90f      	bls.n	2608 <usart_init+0xcc>
    25e8:	23c0      	movs	r3, #192	; 0xc0
    25ea:	01db      	lsls	r3, r3, #7
    25ec:	9a02      	ldr	r2, [sp, #8]
    25ee:	429a      	cmp	r2, r3
    25f0:	d100      	bne.n	25f4 <usart_init+0xb8>
    25f2:	e08e      	b.n	2712 <usart_init+0x1d6>
    25f4:	2380      	movs	r3, #128	; 0x80
    25f6:	021b      	lsls	r3, r3, #8
    25f8:	429a      	cmp	r2, r3
    25fa:	d000      	beq.n	25fe <usart_init+0xc2>
    25fc:	e11b      	b.n	2836 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    25fe:	2303      	movs	r3, #3
    2600:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2602:	2300      	movs	r3, #0
    2604:	9307      	str	r3, [sp, #28]
    2606:	e008      	b.n	261a <usart_init+0xde>
	switch (config->sample_rate) {
    2608:	2380      	movs	r3, #128	; 0x80
    260a:	019b      	lsls	r3, r3, #6
    260c:	429a      	cmp	r2, r3
    260e:	d000      	beq.n	2612 <usart_init+0xd6>
    2610:	e111      	b.n	2836 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2612:	2310      	movs	r3, #16
    2614:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2616:	3b0f      	subs	r3, #15
    2618:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    261a:	6833      	ldr	r3, [r6, #0]
    261c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    261e:	68f3      	ldr	r3, [r6, #12]
    2620:	469b      	mov	fp, r3
		config->sample_adjustment |
    2622:	6973      	ldr	r3, [r6, #20]
    2624:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2626:	7e33      	ldrb	r3, [r6, #24]
    2628:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    262a:	2326      	movs	r3, #38	; 0x26
    262c:	5cf3      	ldrb	r3, [r6, r3]
    262e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2630:	6873      	ldr	r3, [r6, #4]
    2632:	4699      	mov	r9, r3
	switch (transfer_mode)
    2634:	2b00      	cmp	r3, #0
    2636:	d100      	bne.n	263a <usart_init+0xfe>
    2638:	e09c      	b.n	2774 <usart_init+0x238>
    263a:	2380      	movs	r3, #128	; 0x80
    263c:	055b      	lsls	r3, r3, #21
    263e:	4599      	cmp	r9, r3
    2640:	d100      	bne.n	2644 <usart_init+0x108>
    2642:	e080      	b.n	2746 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    2644:	7e73      	ldrb	r3, [r6, #25]
    2646:	2b00      	cmp	r3, #0
    2648:	d002      	beq.n	2650 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    264a:	7eb3      	ldrb	r3, [r6, #26]
    264c:	4642      	mov	r2, r8
    264e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    2650:	230e      	movs	r3, #14
    2652:	aa06      	add	r2, sp, #24
    2654:	4694      	mov	ip, r2
    2656:	4463      	add	r3, ip
    2658:	881b      	ldrh	r3, [r3, #0]
    265a:	4642      	mov	r2, r8
    265c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    265e:	9b05      	ldr	r3, [sp, #20]
    2660:	465a      	mov	r2, fp
    2662:	4313      	orrs	r3, r2
    2664:	9a03      	ldr	r2, [sp, #12]
    2666:	4313      	orrs	r3, r2
    2668:	464a      	mov	r2, r9
    266a:	4313      	orrs	r3, r2
    266c:	9f02      	ldr	r7, [sp, #8]
    266e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2670:	9b04      	ldr	r3, [sp, #16]
    2672:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2674:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2676:	4653      	mov	r3, sl
    2678:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    267a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    267c:	2327      	movs	r3, #39	; 0x27
    267e:	5cf3      	ldrb	r3, [r6, r3]
    2680:	2b00      	cmp	r3, #0
    2682:	d101      	bne.n	2688 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2684:	3304      	adds	r3, #4
    2686:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2688:	7e73      	ldrb	r3, [r6, #25]
    268a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    268c:	7f32      	ldrb	r2, [r6, #28]
    268e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2690:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2692:	7f72      	ldrb	r2, [r6, #29]
    2694:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2696:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2698:	2224      	movs	r2, #36	; 0x24
    269a:	5cb2      	ldrb	r2, [r6, r2]
    269c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    269e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    26a0:	2225      	movs	r2, #37	; 0x25
    26a2:	5cb2      	ldrb	r2, [r6, r2]
    26a4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    26a6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    26a8:	7ab1      	ldrb	r1, [r6, #10]
    26aa:	7af2      	ldrb	r2, [r6, #11]
    26ac:	4311      	orrs	r1, r2
    26ae:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    26b0:	8933      	ldrh	r3, [r6, #8]
    26b2:	2bff      	cmp	r3, #255	; 0xff
    26b4:	d100      	bne.n	26b8 <usart_init+0x17c>
    26b6:	e081      	b.n	27bc <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    26b8:	2280      	movs	r2, #128	; 0x80
    26ba:	0452      	lsls	r2, r2, #17
    26bc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    26be:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    26c0:	232c      	movs	r3, #44	; 0x2c
    26c2:	5cf3      	ldrb	r3, [r6, r3]
    26c4:	2b00      	cmp	r3, #0
    26c6:	d103      	bne.n	26d0 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    26c8:	4b62      	ldr	r3, [pc, #392]	; (2854 <usart_init+0x318>)
    26ca:	789b      	ldrb	r3, [r3, #2]
    26cc:	079b      	lsls	r3, r3, #30
    26ce:	d501      	bpl.n	26d4 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    26d0:	2380      	movs	r3, #128	; 0x80
    26d2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    26d4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    26d6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    26d8:	2b00      	cmp	r3, #0
    26da:	d1fc      	bne.n	26d6 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    26dc:	4643      	mov	r3, r8
    26de:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    26e0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    26e2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    26e4:	2b00      	cmp	r3, #0
    26e6:	d1fc      	bne.n	26e2 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    26e8:	4643      	mov	r3, r8
    26ea:	601f      	str	r7, [r3, #0]
    26ec:	ab0e      	add	r3, sp, #56	; 0x38
    26ee:	2280      	movs	r2, #128	; 0x80
    26f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    26f2:	2200      	movs	r2, #0
    26f4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    26f6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    26f8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    26fa:	6b33      	ldr	r3, [r6, #48]	; 0x30
    26fc:	930a      	str	r3, [sp, #40]	; 0x28
    26fe:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2700:	930b      	str	r3, [sp, #44]	; 0x2c
    2702:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2704:	930c      	str	r3, [sp, #48]	; 0x30
    2706:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2708:	9302      	str	r3, [sp, #8]
    270a:	930d      	str	r3, [sp, #52]	; 0x34
    270c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    270e:	ae0a      	add	r6, sp, #40	; 0x28
    2710:	e063      	b.n	27da <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2712:	2308      	movs	r3, #8
    2714:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2716:	3b07      	subs	r3, #7
    2718:	9307      	str	r3, [sp, #28]
    271a:	e77e      	b.n	261a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    271c:	6833      	ldr	r3, [r6, #0]
    271e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2720:	68f3      	ldr	r3, [r6, #12]
    2722:	469b      	mov	fp, r3
		config->sample_adjustment |
    2724:	6973      	ldr	r3, [r6, #20]
    2726:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2728:	7e33      	ldrb	r3, [r6, #24]
    272a:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    272c:	2326      	movs	r3, #38	; 0x26
    272e:	5cf3      	ldrb	r3, [r6, r3]
    2730:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2732:	6873      	ldr	r3, [r6, #4]
    2734:	4699      	mov	r9, r3
	switch (transfer_mode)
    2736:	2b00      	cmp	r3, #0
    2738:	d018      	beq.n	276c <usart_init+0x230>
    273a:	2380      	movs	r3, #128	; 0x80
    273c:	055b      	lsls	r3, r3, #21
    273e:	4599      	cmp	r9, r3
    2740:	d001      	beq.n	2746 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    2742:	2000      	movs	r0, #0
    2744:	e025      	b.n	2792 <usart_init+0x256>
			if (!config->use_external_clock) {
    2746:	2327      	movs	r3, #39	; 0x27
    2748:	5cf3      	ldrb	r3, [r6, r3]
    274a:	2b00      	cmp	r3, #0
    274c:	d000      	beq.n	2750 <usart_init+0x214>
    274e:	e779      	b.n	2644 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2750:	6a33      	ldr	r3, [r6, #32]
    2752:	001f      	movs	r7, r3
    2754:	b2c0      	uxtb	r0, r0
    2756:	4b40      	ldr	r3, [pc, #256]	; (2858 <usart_init+0x31c>)
    2758:	4798      	blx	r3
    275a:	0001      	movs	r1, r0
    275c:	220e      	movs	r2, #14
    275e:	ab06      	add	r3, sp, #24
    2760:	469c      	mov	ip, r3
    2762:	4462      	add	r2, ip
    2764:	0038      	movs	r0, r7
    2766:	4b3d      	ldr	r3, [pc, #244]	; (285c <usart_init+0x320>)
    2768:	4798      	blx	r3
    276a:	e012      	b.n	2792 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    276c:	2308      	movs	r3, #8
    276e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2770:	2300      	movs	r3, #0
    2772:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2774:	2327      	movs	r3, #39	; 0x27
    2776:	5cf3      	ldrb	r3, [r6, r3]
    2778:	2b00      	cmp	r3, #0
    277a:	d00e      	beq.n	279a <usart_init+0x25e>
				status_code =
    277c:	9b06      	ldr	r3, [sp, #24]
    277e:	9300      	str	r3, [sp, #0]
    2780:	9b07      	ldr	r3, [sp, #28]
    2782:	220e      	movs	r2, #14
    2784:	a906      	add	r1, sp, #24
    2786:	468c      	mov	ip, r1
    2788:	4462      	add	r2, ip
    278a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    278c:	6a30      	ldr	r0, [r6, #32]
    278e:	4f34      	ldr	r7, [pc, #208]	; (2860 <usart_init+0x324>)
    2790:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2792:	2800      	cmp	r0, #0
    2794:	d000      	beq.n	2798 <usart_init+0x25c>
    2796:	e6e4      	b.n	2562 <usart_init+0x26>
    2798:	e754      	b.n	2644 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    279a:	6a33      	ldr	r3, [r6, #32]
    279c:	001f      	movs	r7, r3
    279e:	b2c0      	uxtb	r0, r0
    27a0:	4b2d      	ldr	r3, [pc, #180]	; (2858 <usart_init+0x31c>)
    27a2:	4798      	blx	r3
    27a4:	0001      	movs	r1, r0
				status_code =
    27a6:	9b06      	ldr	r3, [sp, #24]
    27a8:	9300      	str	r3, [sp, #0]
    27aa:	9b07      	ldr	r3, [sp, #28]
    27ac:	220e      	movs	r2, #14
    27ae:	a806      	add	r0, sp, #24
    27b0:	4684      	mov	ip, r0
    27b2:	4462      	add	r2, ip
    27b4:	0038      	movs	r0, r7
    27b6:	4f2a      	ldr	r7, [pc, #168]	; (2860 <usart_init+0x324>)
    27b8:	47b8      	blx	r7
    27ba:	e7ea      	b.n	2792 <usart_init+0x256>
		if(config->lin_slave_enable) {
    27bc:	7ef3      	ldrb	r3, [r6, #27]
    27be:	2b00      	cmp	r3, #0
    27c0:	d100      	bne.n	27c4 <usart_init+0x288>
    27c2:	e77d      	b.n	26c0 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    27c4:	2380      	movs	r3, #128	; 0x80
    27c6:	04db      	lsls	r3, r3, #19
    27c8:	431f      	orrs	r7, r3
    27ca:	e779      	b.n	26c0 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    27cc:	0020      	movs	r0, r4
    27ce:	4b25      	ldr	r3, [pc, #148]	; (2864 <usart_init+0x328>)
    27d0:	4798      	blx	r3
    27d2:	e007      	b.n	27e4 <usart_init+0x2a8>
    27d4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    27d6:	2f04      	cmp	r7, #4
    27d8:	d00d      	beq.n	27f6 <usart_init+0x2ba>
    27da:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    27dc:	00bb      	lsls	r3, r7, #2
    27de:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    27e0:	2800      	cmp	r0, #0
    27e2:	d0f3      	beq.n	27cc <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    27e4:	1c43      	adds	r3, r0, #1
    27e6:	d0f5      	beq.n	27d4 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    27e8:	a90e      	add	r1, sp, #56	; 0x38
    27ea:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    27ec:	0c00      	lsrs	r0, r0, #16
    27ee:	b2c0      	uxtb	r0, r0
    27f0:	4b1d      	ldr	r3, [pc, #116]	; (2868 <usart_init+0x32c>)
    27f2:	4798      	blx	r3
    27f4:	e7ee      	b.n	27d4 <usart_init+0x298>
		module->callback[i]            = NULL;
    27f6:	2300      	movs	r3, #0
    27f8:	60eb      	str	r3, [r5, #12]
    27fa:	612b      	str	r3, [r5, #16]
    27fc:	616b      	str	r3, [r5, #20]
    27fe:	61ab      	str	r3, [r5, #24]
    2800:	61eb      	str	r3, [r5, #28]
    2802:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2804:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2806:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2808:	2200      	movs	r2, #0
    280a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    280c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    280e:	3330      	adds	r3, #48	; 0x30
    2810:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2812:	3301      	adds	r3, #1
    2814:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2816:	3301      	adds	r3, #1
    2818:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    281a:	3301      	adds	r3, #1
    281c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    281e:	6828      	ldr	r0, [r5, #0]
    2820:	4b07      	ldr	r3, [pc, #28]	; (2840 <usart_init+0x304>)
    2822:	4798      	blx	r3
    2824:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2826:	4911      	ldr	r1, [pc, #68]	; (286c <usart_init+0x330>)
    2828:	4b11      	ldr	r3, [pc, #68]	; (2870 <usart_init+0x334>)
    282a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    282c:	00a4      	lsls	r4, r4, #2
    282e:	4b11      	ldr	r3, [pc, #68]	; (2874 <usart_init+0x338>)
    2830:	50e5      	str	r5, [r4, r3]
	return status_code;
    2832:	2000      	movs	r0, #0
    2834:	e695      	b.n	2562 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2836:	2310      	movs	r3, #16
    2838:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    283a:	2300      	movs	r3, #0
    283c:	9307      	str	r3, [sp, #28]
    283e:	e6ec      	b.n	261a <usart_init+0xde>
    2840:	00002435 	.word	0x00002435
    2844:	40000400 	.word	0x40000400
    2848:	00003169 	.word	0x00003169
    284c:	000030dd 	.word	0x000030dd
    2850:	00002271 	.word	0x00002271
    2854:	41002000 	.word	0x41002000
    2858:	00003185 	.word	0x00003185
    285c:	000021b3 	.word	0x000021b3
    2860:	000021dd 	.word	0x000021dd
    2864:	000022bd 	.word	0x000022bd
    2868:	00003261 	.word	0x00003261
    286c:	00002991 	.word	0x00002991
    2870:	00002471 	.word	0x00002471
    2874:	2000039c 	.word	0x2000039c

00002878 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2878:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    287a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    287c:	2a00      	cmp	r2, #0
    287e:	d101      	bne.n	2884 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2880:	0018      	movs	r0, r3
    2882:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2884:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2886:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2888:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    288a:	2a00      	cmp	r2, #0
    288c:	d1f8      	bne.n	2880 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    288e:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    2890:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2892:	2102      	movs	r1, #2
    2894:	7e13      	ldrb	r3, [r2, #24]
    2896:	420b      	tst	r3, r1
    2898:	d0fc      	beq.n	2894 <usart_write_wait+0x1c>
	return STATUS_OK;
    289a:	2300      	movs	r3, #0
    289c:	e7f0      	b.n	2880 <usart_write_wait+0x8>

0000289e <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    289e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    28a0:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    28a2:	2a00      	cmp	r2, #0
    28a4:	d101      	bne.n	28aa <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    28a6:	0018      	movs	r0, r3
    28a8:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    28aa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    28ac:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    28ae:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    28b0:	2a00      	cmp	r2, #0
    28b2:	d1f8      	bne.n	28a6 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    28b4:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    28b6:	7e10      	ldrb	r0, [r2, #24]
    28b8:	0740      	lsls	r0, r0, #29
    28ba:	d5f4      	bpl.n	28a6 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    28bc:	8b53      	ldrh	r3, [r2, #26]
    28be:	b2db      	uxtb	r3, r3
	if (error_code) {
    28c0:	0698      	lsls	r0, r3, #26
    28c2:	d01d      	beq.n	2900 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    28c4:	0798      	lsls	r0, r3, #30
    28c6:	d503      	bpl.n	28d0 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    28c8:	2302      	movs	r3, #2
    28ca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    28cc:	3318      	adds	r3, #24
    28ce:	e7ea      	b.n	28a6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    28d0:	0758      	lsls	r0, r3, #29
    28d2:	d503      	bpl.n	28dc <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    28d4:	2304      	movs	r3, #4
    28d6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    28d8:	331a      	adds	r3, #26
    28da:	e7e4      	b.n	28a6 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    28dc:	07d8      	lsls	r0, r3, #31
    28de:	d503      	bpl.n	28e8 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    28e0:	2301      	movs	r3, #1
    28e2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    28e4:	3312      	adds	r3, #18
    28e6:	e7de      	b.n	28a6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    28e8:	06d8      	lsls	r0, r3, #27
    28ea:	d503      	bpl.n	28f4 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    28ec:	2310      	movs	r3, #16
    28ee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    28f0:	3332      	adds	r3, #50	; 0x32
    28f2:	e7d8      	b.n	28a6 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    28f4:	069b      	lsls	r3, r3, #26
    28f6:	d503      	bpl.n	2900 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    28f8:	2320      	movs	r3, #32
    28fa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    28fc:	3321      	adds	r3, #33	; 0x21
    28fe:	e7d2      	b.n	28a6 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2900:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2902:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2904:	2300      	movs	r3, #0
    2906:	e7ce      	b.n	28a6 <usart_read_wait+0x8>

00002908 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    290a:	0004      	movs	r4, r0
    290c:	000d      	movs	r5, r1
    290e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2910:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2912:	4b0f      	ldr	r3, [pc, #60]	; (2950 <_usart_read_buffer+0x48>)
    2914:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2916:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2918:	b29b      	uxth	r3, r3
    291a:	2b00      	cmp	r3, #0
    291c:	d003      	beq.n	2926 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    291e:	4b0d      	ldr	r3, [pc, #52]	; (2954 <_usart_read_buffer+0x4c>)
    2920:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2922:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2926:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2928:	4b0a      	ldr	r3, [pc, #40]	; (2954 <_usart_read_buffer+0x4c>)
    292a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    292c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    292e:	2205      	movs	r2, #5
    2930:	2332      	movs	r3, #50	; 0x32
    2932:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2934:	3b2e      	subs	r3, #46	; 0x2e
    2936:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2938:	7a23      	ldrb	r3, [r4, #8]
    293a:	2b00      	cmp	r3, #0
    293c:	d001      	beq.n	2942 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    293e:	2320      	movs	r3, #32
    2940:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2942:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2944:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2946:	2b00      	cmp	r3, #0
    2948:	d0ec      	beq.n	2924 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    294a:	2308      	movs	r3, #8
    294c:	75bb      	strb	r3, [r7, #22]
    294e:	e7e9      	b.n	2924 <_usart_read_buffer+0x1c>
    2950:	00001afd 	.word	0x00001afd
    2954:	00001b3d 	.word	0x00001b3d

00002958 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2958:	1c93      	adds	r3, r2, #2
    295a:	009b      	lsls	r3, r3, #2
    295c:	18c3      	adds	r3, r0, r3
    295e:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2960:	2130      	movs	r1, #48	; 0x30
    2962:	2301      	movs	r3, #1
    2964:	4093      	lsls	r3, r2
    2966:	001a      	movs	r2, r3
    2968:	5c43      	ldrb	r3, [r0, r1]
    296a:	4313      	orrs	r3, r2
    296c:	5443      	strb	r3, [r0, r1]
}
    296e:	4770      	bx	lr

00002970 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2970:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2972:	2317      	movs	r3, #23
	if (length == 0) {
    2974:	2a00      	cmp	r2, #0
    2976:	d101      	bne.n	297c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2978:	0018      	movs	r0, r3
    297a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    297c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    297e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2980:	2c00      	cmp	r4, #0
    2982:	d0f9      	beq.n	2978 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2984:	4b01      	ldr	r3, [pc, #4]	; (298c <usart_read_buffer_job+0x1c>)
    2986:	4798      	blx	r3
    2988:	0003      	movs	r3, r0
    298a:	e7f5      	b.n	2978 <usart_read_buffer_job+0x8>
    298c:	00002909 	.word	0x00002909

00002990 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2992:	0080      	lsls	r0, r0, #2
    2994:	4b62      	ldr	r3, [pc, #392]	; (2b20 <_usart_interrupt_handler+0x190>)
    2996:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2998:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    299a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    299c:	2b00      	cmp	r3, #0
    299e:	d1fc      	bne.n	299a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    29a0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    29a2:	7da6      	ldrb	r6, [r4, #22]
    29a4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    29a6:	2330      	movs	r3, #48	; 0x30
    29a8:	5ceb      	ldrb	r3, [r5, r3]
    29aa:	2231      	movs	r2, #49	; 0x31
    29ac:	5caf      	ldrb	r7, [r5, r2]
    29ae:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    29b0:	07f3      	lsls	r3, r6, #31
    29b2:	d522      	bpl.n	29fa <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    29b4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    29b6:	b29b      	uxth	r3, r3
    29b8:	2b00      	cmp	r3, #0
    29ba:	d01c      	beq.n	29f6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    29bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    29be:	7813      	ldrb	r3, [r2, #0]
    29c0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    29c2:	1c51      	adds	r1, r2, #1
    29c4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    29c6:	7969      	ldrb	r1, [r5, #5]
    29c8:	2901      	cmp	r1, #1
    29ca:	d00e      	beq.n	29ea <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    29cc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    29ce:	05db      	lsls	r3, r3, #23
    29d0:	0ddb      	lsrs	r3, r3, #23
    29d2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    29d4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    29d6:	3b01      	subs	r3, #1
    29d8:	b29b      	uxth	r3, r3
    29da:	85eb      	strh	r3, [r5, #46]	; 0x2e
    29dc:	2b00      	cmp	r3, #0
    29de:	d10c      	bne.n	29fa <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    29e0:	3301      	adds	r3, #1
    29e2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    29e4:	3301      	adds	r3, #1
    29e6:	75a3      	strb	r3, [r4, #22]
    29e8:	e007      	b.n	29fa <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    29ea:	7851      	ldrb	r1, [r2, #1]
    29ec:	0209      	lsls	r1, r1, #8
    29ee:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    29f0:	3202      	adds	r2, #2
    29f2:	62aa      	str	r2, [r5, #40]	; 0x28
    29f4:	e7eb      	b.n	29ce <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    29f6:	2301      	movs	r3, #1
    29f8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    29fa:	07b3      	lsls	r3, r6, #30
    29fc:	d506      	bpl.n	2a0c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    29fe:	2302      	movs	r3, #2
    2a00:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2a02:	2200      	movs	r2, #0
    2a04:	3331      	adds	r3, #49	; 0x31
    2a06:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2a08:	07fb      	lsls	r3, r7, #31
    2a0a:	d41a      	bmi.n	2a42 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2a0c:	0773      	lsls	r3, r6, #29
    2a0e:	d565      	bpl.n	2adc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2a10:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2a12:	b29b      	uxth	r3, r3
    2a14:	2b00      	cmp	r3, #0
    2a16:	d05f      	beq.n	2ad8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a18:	8b63      	ldrh	r3, [r4, #26]
    2a1a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2a1c:	071a      	lsls	r2, r3, #28
    2a1e:	d414      	bmi.n	2a4a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a20:	223f      	movs	r2, #63	; 0x3f
    2a22:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2a24:	2b00      	cmp	r3, #0
    2a26:	d034      	beq.n	2a92 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2a28:	079a      	lsls	r2, r3, #30
    2a2a:	d511      	bpl.n	2a50 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2a2c:	221a      	movs	r2, #26
    2a2e:	2332      	movs	r3, #50	; 0x32
    2a30:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2a32:	3b30      	subs	r3, #48	; 0x30
    2a34:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2a36:	077b      	lsls	r3, r7, #29
    2a38:	d550      	bpl.n	2adc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2a3a:	0028      	movs	r0, r5
    2a3c:	696b      	ldr	r3, [r5, #20]
    2a3e:	4798      	blx	r3
    2a40:	e04c      	b.n	2adc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2a42:	0028      	movs	r0, r5
    2a44:	68eb      	ldr	r3, [r5, #12]
    2a46:	4798      	blx	r3
    2a48:	e7e0      	b.n	2a0c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2a4a:	2237      	movs	r2, #55	; 0x37
    2a4c:	4013      	ands	r3, r2
    2a4e:	e7e9      	b.n	2a24 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2a50:	075a      	lsls	r2, r3, #29
    2a52:	d505      	bpl.n	2a60 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2a54:	221e      	movs	r2, #30
    2a56:	2332      	movs	r3, #50	; 0x32
    2a58:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2a5a:	3b2e      	subs	r3, #46	; 0x2e
    2a5c:	8363      	strh	r3, [r4, #26]
    2a5e:	e7ea      	b.n	2a36 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2a60:	07da      	lsls	r2, r3, #31
    2a62:	d505      	bpl.n	2a70 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2a64:	2213      	movs	r2, #19
    2a66:	2332      	movs	r3, #50	; 0x32
    2a68:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2a6a:	3b31      	subs	r3, #49	; 0x31
    2a6c:	8363      	strh	r3, [r4, #26]
    2a6e:	e7e2      	b.n	2a36 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2a70:	06da      	lsls	r2, r3, #27
    2a72:	d505      	bpl.n	2a80 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2a74:	2242      	movs	r2, #66	; 0x42
    2a76:	2332      	movs	r3, #50	; 0x32
    2a78:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2a7a:	3b22      	subs	r3, #34	; 0x22
    2a7c:	8363      	strh	r3, [r4, #26]
    2a7e:	e7da      	b.n	2a36 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2a80:	2220      	movs	r2, #32
    2a82:	421a      	tst	r2, r3
    2a84:	d0d7      	beq.n	2a36 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2a86:	3221      	adds	r2, #33	; 0x21
    2a88:	2332      	movs	r3, #50	; 0x32
    2a8a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2a8c:	3b12      	subs	r3, #18
    2a8e:	8363      	strh	r3, [r4, #26]
    2a90:	e7d1      	b.n	2a36 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2a92:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2a94:	05db      	lsls	r3, r3, #23
    2a96:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2a98:	b2da      	uxtb	r2, r3
    2a9a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2a9c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2a9e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2aa0:	1c51      	adds	r1, r2, #1
    2aa2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2aa4:	7969      	ldrb	r1, [r5, #5]
    2aa6:	2901      	cmp	r1, #1
    2aa8:	d010      	beq.n	2acc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2aaa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2aac:	3b01      	subs	r3, #1
    2aae:	b29b      	uxth	r3, r3
    2ab0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d112      	bne.n	2adc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2ab6:	3304      	adds	r3, #4
    2ab8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2aba:	2200      	movs	r2, #0
    2abc:	332e      	adds	r3, #46	; 0x2e
    2abe:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2ac0:	07bb      	lsls	r3, r7, #30
    2ac2:	d50b      	bpl.n	2adc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2ac4:	0028      	movs	r0, r5
    2ac6:	692b      	ldr	r3, [r5, #16]
    2ac8:	4798      	blx	r3
    2aca:	e007      	b.n	2adc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2acc:	0a1b      	lsrs	r3, r3, #8
    2ace:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2ad0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2ad2:	3301      	adds	r3, #1
    2ad4:	626b      	str	r3, [r5, #36]	; 0x24
    2ad6:	e7e8      	b.n	2aaa <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2ad8:	2304      	movs	r3, #4
    2ada:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2adc:	06f3      	lsls	r3, r6, #27
    2ade:	d504      	bpl.n	2aea <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2ae0:	2310      	movs	r3, #16
    2ae2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2ae4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2ae6:	06fb      	lsls	r3, r7, #27
    2ae8:	d40e      	bmi.n	2b08 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2aea:	06b3      	lsls	r3, r6, #26
    2aec:	d504      	bpl.n	2af8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2aee:	2320      	movs	r3, #32
    2af0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2af2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2af4:	073b      	lsls	r3, r7, #28
    2af6:	d40b      	bmi.n	2b10 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2af8:	0733      	lsls	r3, r6, #28
    2afa:	d504      	bpl.n	2b06 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2afc:	2308      	movs	r3, #8
    2afe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2b00:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2b02:	06bb      	lsls	r3, r7, #26
    2b04:	d408      	bmi.n	2b18 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2b08:	0028      	movs	r0, r5
    2b0a:	69eb      	ldr	r3, [r5, #28]
    2b0c:	4798      	blx	r3
    2b0e:	e7ec      	b.n	2aea <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2b10:	0028      	movs	r0, r5
    2b12:	69ab      	ldr	r3, [r5, #24]
    2b14:	4798      	blx	r3
    2b16:	e7ef      	b.n	2af8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2b18:	6a2b      	ldr	r3, [r5, #32]
    2b1a:	0028      	movs	r0, r5
    2b1c:	4798      	blx	r3
}
    2b1e:	e7f2      	b.n	2b06 <_usart_interrupt_handler+0x176>
    2b20:	2000039c 	.word	0x2000039c

00002b24 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2b24:	b510      	push	{r4, lr}
	switch (clock_source) {
    2b26:	2808      	cmp	r0, #8
    2b28:	d803      	bhi.n	2b32 <system_clock_source_get_hz+0xe>
    2b2a:	0080      	lsls	r0, r0, #2
    2b2c:	4b1c      	ldr	r3, [pc, #112]	; (2ba0 <system_clock_source_get_hz+0x7c>)
    2b2e:	581b      	ldr	r3, [r3, r0]
    2b30:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2b32:	2000      	movs	r0, #0
    2b34:	e032      	b.n	2b9c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2b36:	4b1b      	ldr	r3, [pc, #108]	; (2ba4 <system_clock_source_get_hz+0x80>)
    2b38:	6918      	ldr	r0, [r3, #16]
    2b3a:	e02f      	b.n	2b9c <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2b3c:	4b1a      	ldr	r3, [pc, #104]	; (2ba8 <system_clock_source_get_hz+0x84>)
    2b3e:	6a1b      	ldr	r3, [r3, #32]
    2b40:	059b      	lsls	r3, r3, #22
    2b42:	0f9b      	lsrs	r3, r3, #30
    2b44:	4819      	ldr	r0, [pc, #100]	; (2bac <system_clock_source_get_hz+0x88>)
    2b46:	40d8      	lsrs	r0, r3
    2b48:	e028      	b.n	2b9c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2b4a:	4b16      	ldr	r3, [pc, #88]	; (2ba4 <system_clock_source_get_hz+0x80>)
    2b4c:	6958      	ldr	r0, [r3, #20]
    2b4e:	e025      	b.n	2b9c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2b50:	4b14      	ldr	r3, [pc, #80]	; (2ba4 <system_clock_source_get_hz+0x80>)
    2b52:	681b      	ldr	r3, [r3, #0]
			return 0;
    2b54:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2b56:	079b      	lsls	r3, r3, #30
    2b58:	d520      	bpl.n	2b9c <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b5a:	4913      	ldr	r1, [pc, #76]	; (2ba8 <system_clock_source_get_hz+0x84>)
    2b5c:	2210      	movs	r2, #16
    2b5e:	68cb      	ldr	r3, [r1, #12]
    2b60:	421a      	tst	r2, r3
    2b62:	d0fc      	beq.n	2b5e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2b64:	4b0f      	ldr	r3, [pc, #60]	; (2ba4 <system_clock_source_get_hz+0x80>)
    2b66:	681a      	ldr	r2, [r3, #0]
    2b68:	2324      	movs	r3, #36	; 0x24
    2b6a:	4013      	ands	r3, r2
    2b6c:	2b04      	cmp	r3, #4
    2b6e:	d001      	beq.n	2b74 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2b70:	480f      	ldr	r0, [pc, #60]	; (2bb0 <system_clock_source_get_hz+0x8c>)
    2b72:	e013      	b.n	2b9c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2b74:	2000      	movs	r0, #0
    2b76:	4b0f      	ldr	r3, [pc, #60]	; (2bb4 <system_clock_source_get_hz+0x90>)
    2b78:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2b7a:	4b0a      	ldr	r3, [pc, #40]	; (2ba4 <system_clock_source_get_hz+0x80>)
    2b7c:	689b      	ldr	r3, [r3, #8]
    2b7e:	041b      	lsls	r3, r3, #16
    2b80:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2b82:	4358      	muls	r0, r3
    2b84:	e00a      	b.n	2b9c <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2b86:	2350      	movs	r3, #80	; 0x50
    2b88:	4a07      	ldr	r2, [pc, #28]	; (2ba8 <system_clock_source_get_hz+0x84>)
    2b8a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2b8c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2b8e:	075b      	lsls	r3, r3, #29
    2b90:	d504      	bpl.n	2b9c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2b92:	4b04      	ldr	r3, [pc, #16]	; (2ba4 <system_clock_source_get_hz+0x80>)
    2b94:	68d8      	ldr	r0, [r3, #12]
    2b96:	e001      	b.n	2b9c <system_clock_source_get_hz+0x78>
		return 32768UL;
    2b98:	2080      	movs	r0, #128	; 0x80
    2b9a:	0200      	lsls	r0, r0, #8
	}
}
    2b9c:	bd10      	pop	{r4, pc}
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	00006584 	.word	0x00006584
    2ba4:	200002cc 	.word	0x200002cc
    2ba8:	40000800 	.word	0x40000800
    2bac:	007a1200 	.word	0x007a1200
    2bb0:	02dc6c00 	.word	0x02dc6c00
    2bb4:	00003185 	.word	0x00003185

00002bb8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2bb8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2bba:	490c      	ldr	r1, [pc, #48]	; (2bec <system_clock_source_osc8m_set_config+0x34>)
    2bbc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2bbe:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2bc0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2bc2:	7840      	ldrb	r0, [r0, #1]
    2bc4:	2201      	movs	r2, #1
    2bc6:	4010      	ands	r0, r2
    2bc8:	0180      	lsls	r0, r0, #6
    2bca:	2640      	movs	r6, #64	; 0x40
    2bcc:	43b3      	bics	r3, r6
    2bce:	4303      	orrs	r3, r0
    2bd0:	402a      	ands	r2, r5
    2bd2:	01d2      	lsls	r2, r2, #7
    2bd4:	2080      	movs	r0, #128	; 0x80
    2bd6:	4383      	bics	r3, r0
    2bd8:	4313      	orrs	r3, r2
    2bda:	2203      	movs	r2, #3
    2bdc:	4022      	ands	r2, r4
    2bde:	0212      	lsls	r2, r2, #8
    2be0:	4803      	ldr	r0, [pc, #12]	; (2bf0 <system_clock_source_osc8m_set_config+0x38>)
    2be2:	4003      	ands	r3, r0
    2be4:	4313      	orrs	r3, r2
    2be6:	620b      	str	r3, [r1, #32]
}
    2be8:	bd70      	pop	{r4, r5, r6, pc}
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	40000800 	.word	0x40000800
    2bf0:	fffffcff 	.word	0xfffffcff

00002bf4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bf6:	46de      	mov	lr, fp
    2bf8:	4657      	mov	r7, sl
    2bfa:	464e      	mov	r6, r9
    2bfc:	4645      	mov	r5, r8
    2bfe:	b5e0      	push	{r5, r6, r7, lr}
    2c00:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2c02:	4b26      	ldr	r3, [pc, #152]	; (2c9c <system_clock_source_xosc32k_set_config+0xa8>)
    2c04:	469b      	mov	fp, r3
    2c06:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2c08:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2c0a:	7800      	ldrb	r0, [r0, #0]
    2c0c:	4242      	negs	r2, r0
    2c0e:	4142      	adcs	r2, r0
    2c10:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2c12:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2c14:	78ca      	ldrb	r2, [r1, #3]
    2c16:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2c18:	790a      	ldrb	r2, [r1, #4]
    2c1a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2c1c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2c1e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2c20:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2c22:	688a      	ldr	r2, [r1, #8]
    2c24:	491e      	ldr	r1, [pc, #120]	; (2ca0 <system_clock_source_xosc32k_set_config+0xac>)
    2c26:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2c28:	2101      	movs	r1, #1
    2c2a:	464a      	mov	r2, r9
    2c2c:	0092      	lsls	r2, r2, #2
    2c2e:	4691      	mov	r9, r2
    2c30:	2204      	movs	r2, #4
    2c32:	4393      	bics	r3, r2
    2c34:	464a      	mov	r2, r9
    2c36:	4313      	orrs	r3, r2
    2c38:	4642      	mov	r2, r8
    2c3a:	400a      	ands	r2, r1
    2c3c:	00d2      	lsls	r2, r2, #3
    2c3e:	4690      	mov	r8, r2
    2c40:	2208      	movs	r2, #8
    2c42:	4393      	bics	r3, r2
    2c44:	4642      	mov	r2, r8
    2c46:	4313      	orrs	r3, r2
    2c48:	4662      	mov	r2, ip
    2c4a:	400a      	ands	r2, r1
    2c4c:	0112      	lsls	r2, r2, #4
    2c4e:	4694      	mov	ip, r2
    2c50:	2210      	movs	r2, #16
    2c52:	4393      	bics	r3, r2
    2c54:	4662      	mov	r2, ip
    2c56:	4313      	orrs	r3, r2
    2c58:	4008      	ands	r0, r1
    2c5a:	0140      	lsls	r0, r0, #5
    2c5c:	2220      	movs	r2, #32
    2c5e:	4393      	bics	r3, r2
    2c60:	4303      	orrs	r3, r0
    2c62:	400f      	ands	r7, r1
    2c64:	01bf      	lsls	r7, r7, #6
    2c66:	2040      	movs	r0, #64	; 0x40
    2c68:	4383      	bics	r3, r0
    2c6a:	433b      	orrs	r3, r7
    2c6c:	400e      	ands	r6, r1
    2c6e:	01f6      	lsls	r6, r6, #7
    2c70:	3040      	adds	r0, #64	; 0x40
    2c72:	4383      	bics	r3, r0
    2c74:	4333      	orrs	r3, r6
    2c76:	3879      	subs	r0, #121	; 0x79
    2c78:	4005      	ands	r5, r0
    2c7a:	022d      	lsls	r5, r5, #8
    2c7c:	4809      	ldr	r0, [pc, #36]	; (2ca4 <system_clock_source_xosc32k_set_config+0xb0>)
    2c7e:	4003      	ands	r3, r0
    2c80:	432b      	orrs	r3, r5
    2c82:	4021      	ands	r1, r4
    2c84:	0309      	lsls	r1, r1, #12
    2c86:	4808      	ldr	r0, [pc, #32]	; (2ca8 <system_clock_source_xosc32k_set_config+0xb4>)
    2c88:	4003      	ands	r3, r0
    2c8a:	430b      	orrs	r3, r1
    2c8c:	465a      	mov	r2, fp
    2c8e:	8293      	strh	r3, [r2, #20]
}
    2c90:	bc3c      	pop	{r2, r3, r4, r5}
    2c92:	4690      	mov	r8, r2
    2c94:	4699      	mov	r9, r3
    2c96:	46a2      	mov	sl, r4
    2c98:	46ab      	mov	fp, r5
    2c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c9c:	40000800 	.word	0x40000800
    2ca0:	200002cc 	.word	0x200002cc
    2ca4:	fffff8ff 	.word	0xfffff8ff
    2ca8:	ffffefff 	.word	0xffffefff

00002cac <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2cac:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2cae:	7a03      	ldrb	r3, [r0, #8]
    2cb0:	069b      	lsls	r3, r3, #26
    2cb2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2cb4:	8942      	ldrh	r2, [r0, #10]
    2cb6:	0592      	lsls	r2, r2, #22
    2cb8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2cba:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2cbc:	4918      	ldr	r1, [pc, #96]	; (2d20 <system_clock_source_dfll_set_config+0x74>)
    2cbe:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2cc0:	7983      	ldrb	r3, [r0, #6]
    2cc2:	79c2      	ldrb	r2, [r0, #7]
    2cc4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2cc6:	8842      	ldrh	r2, [r0, #2]
    2cc8:	8884      	ldrh	r4, [r0, #4]
    2cca:	4322      	orrs	r2, r4
    2ccc:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2cce:	7842      	ldrb	r2, [r0, #1]
    2cd0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2cd2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2cd4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2cd6:	7803      	ldrb	r3, [r0, #0]
    2cd8:	2b04      	cmp	r3, #4
    2cda:	d011      	beq.n	2d00 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2cdc:	2b20      	cmp	r3, #32
    2cde:	d10e      	bne.n	2cfe <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2ce0:	7b03      	ldrb	r3, [r0, #12]
    2ce2:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2ce4:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2ce6:	4313      	orrs	r3, r2
    2ce8:	89c2      	ldrh	r2, [r0, #14]
    2cea:	0412      	lsls	r2, r2, #16
    2cec:	490d      	ldr	r1, [pc, #52]	; (2d24 <system_clock_source_dfll_set_config+0x78>)
    2cee:	400a      	ands	r2, r1
    2cf0:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2cf2:	4a0b      	ldr	r2, [pc, #44]	; (2d20 <system_clock_source_dfll_set_config+0x74>)
    2cf4:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2cf6:	6811      	ldr	r1, [r2, #0]
    2cf8:	4b0b      	ldr	r3, [pc, #44]	; (2d28 <system_clock_source_dfll_set_config+0x7c>)
    2cfa:	430b      	orrs	r3, r1
    2cfc:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2cfe:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2d00:	7b03      	ldrb	r3, [r0, #12]
    2d02:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2d04:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2d06:	4313      	orrs	r3, r2
    2d08:	89c2      	ldrh	r2, [r0, #14]
    2d0a:	0412      	lsls	r2, r2, #16
    2d0c:	4905      	ldr	r1, [pc, #20]	; (2d24 <system_clock_source_dfll_set_config+0x78>)
    2d0e:	400a      	ands	r2, r1
    2d10:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2d12:	4a03      	ldr	r2, [pc, #12]	; (2d20 <system_clock_source_dfll_set_config+0x74>)
    2d14:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2d16:	6813      	ldr	r3, [r2, #0]
    2d18:	2104      	movs	r1, #4
    2d1a:	430b      	orrs	r3, r1
    2d1c:	6013      	str	r3, [r2, #0]
    2d1e:	e7ee      	b.n	2cfe <system_clock_source_dfll_set_config+0x52>
    2d20:	200002cc 	.word	0x200002cc
    2d24:	03ff0000 	.word	0x03ff0000
    2d28:	00000424 	.word	0x00000424

00002d2c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2d2c:	2808      	cmp	r0, #8
    2d2e:	d803      	bhi.n	2d38 <system_clock_source_enable+0xc>
    2d30:	0080      	lsls	r0, r0, #2
    2d32:	4b25      	ldr	r3, [pc, #148]	; (2dc8 <system_clock_source_enable+0x9c>)
    2d34:	581b      	ldr	r3, [r3, r0]
    2d36:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2d38:	2017      	movs	r0, #23
    2d3a:	e044      	b.n	2dc6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2d3c:	4a23      	ldr	r2, [pc, #140]	; (2dcc <system_clock_source_enable+0xa0>)
    2d3e:	6a13      	ldr	r3, [r2, #32]
    2d40:	2102      	movs	r1, #2
    2d42:	430b      	orrs	r3, r1
    2d44:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2d46:	2000      	movs	r0, #0
    2d48:	e03d      	b.n	2dc6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2d4a:	4a20      	ldr	r2, [pc, #128]	; (2dcc <system_clock_source_enable+0xa0>)
    2d4c:	6993      	ldr	r3, [r2, #24]
    2d4e:	2102      	movs	r1, #2
    2d50:	430b      	orrs	r3, r1
    2d52:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2d54:	2000      	movs	r0, #0
		break;
    2d56:	e036      	b.n	2dc6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2d58:	4a1c      	ldr	r2, [pc, #112]	; (2dcc <system_clock_source_enable+0xa0>)
    2d5a:	8a13      	ldrh	r3, [r2, #16]
    2d5c:	2102      	movs	r1, #2
    2d5e:	430b      	orrs	r3, r1
    2d60:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2d62:	2000      	movs	r0, #0
		break;
    2d64:	e02f      	b.n	2dc6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2d66:	4a19      	ldr	r2, [pc, #100]	; (2dcc <system_clock_source_enable+0xa0>)
    2d68:	8a93      	ldrh	r3, [r2, #20]
    2d6a:	2102      	movs	r1, #2
    2d6c:	430b      	orrs	r3, r1
    2d6e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2d70:	2000      	movs	r0, #0
		break;
    2d72:	e028      	b.n	2dc6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2d74:	4916      	ldr	r1, [pc, #88]	; (2dd0 <system_clock_source_enable+0xa4>)
    2d76:	680b      	ldr	r3, [r1, #0]
    2d78:	2202      	movs	r2, #2
    2d7a:	4313      	orrs	r3, r2
    2d7c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2d7e:	4b13      	ldr	r3, [pc, #76]	; (2dcc <system_clock_source_enable+0xa0>)
    2d80:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2d82:	0019      	movs	r1, r3
    2d84:	320e      	adds	r2, #14
    2d86:	68cb      	ldr	r3, [r1, #12]
    2d88:	421a      	tst	r2, r3
    2d8a:	d0fc      	beq.n	2d86 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2d8c:	4a10      	ldr	r2, [pc, #64]	; (2dd0 <system_clock_source_enable+0xa4>)
    2d8e:	6891      	ldr	r1, [r2, #8]
    2d90:	4b0e      	ldr	r3, [pc, #56]	; (2dcc <system_clock_source_enable+0xa0>)
    2d92:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2d94:	6852      	ldr	r2, [r2, #4]
    2d96:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2d98:	2200      	movs	r2, #0
    2d9a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2d9c:	0019      	movs	r1, r3
    2d9e:	3210      	adds	r2, #16
    2da0:	68cb      	ldr	r3, [r1, #12]
    2da2:	421a      	tst	r2, r3
    2da4:	d0fc      	beq.n	2da0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2da6:	4b0a      	ldr	r3, [pc, #40]	; (2dd0 <system_clock_source_enable+0xa4>)
    2da8:	681b      	ldr	r3, [r3, #0]
    2daa:	b29b      	uxth	r3, r3
    2dac:	4a07      	ldr	r2, [pc, #28]	; (2dcc <system_clock_source_enable+0xa0>)
    2dae:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2db0:	2000      	movs	r0, #0
    2db2:	e008      	b.n	2dc6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2db4:	4905      	ldr	r1, [pc, #20]	; (2dcc <system_clock_source_enable+0xa0>)
    2db6:	2244      	movs	r2, #68	; 0x44
    2db8:	5c8b      	ldrb	r3, [r1, r2]
    2dba:	2002      	movs	r0, #2
    2dbc:	4303      	orrs	r3, r0
    2dbe:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2dc0:	2000      	movs	r0, #0
		break;
    2dc2:	e000      	b.n	2dc6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2dc4:	2000      	movs	r0, #0
}
    2dc6:	4770      	bx	lr
    2dc8:	000065a8 	.word	0x000065a8
    2dcc:	40000800 	.word	0x40000800
    2dd0:	200002cc 	.word	0x200002cc

00002dd4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dd6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2dd8:	22c2      	movs	r2, #194	; 0xc2
    2dda:	00d2      	lsls	r2, r2, #3
    2ddc:	4b47      	ldr	r3, [pc, #284]	; (2efc <system_clock_init+0x128>)
    2dde:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2de0:	4947      	ldr	r1, [pc, #284]	; (2f00 <system_clock_init+0x12c>)
    2de2:	684b      	ldr	r3, [r1, #4]
    2de4:	221e      	movs	r2, #30
    2de6:	4393      	bics	r3, r2
    2de8:	3a1c      	subs	r2, #28
    2dea:	4313      	orrs	r3, r2
    2dec:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2dee:	ab01      	add	r3, sp, #4
    2df0:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2df2:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2df4:	4d43      	ldr	r5, [pc, #268]	; (2f04 <system_clock_init+0x130>)
    2df6:	b2e0      	uxtb	r0, r4
    2df8:	a901      	add	r1, sp, #4
    2dfa:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2dfc:	3401      	adds	r4, #1
    2dfe:	2c25      	cmp	r4, #37	; 0x25
    2e00:	d1f9      	bne.n	2df6 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2e02:	a80a      	add	r0, sp, #40	; 0x28
    2e04:	2300      	movs	r3, #0
    2e06:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2e08:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2e0a:	2280      	movs	r2, #128	; 0x80
    2e0c:	0212      	lsls	r2, r2, #8
    2e0e:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2e10:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2e12:	2201      	movs	r2, #1
    2e14:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2e16:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    2e18:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2e1a:	3205      	adds	r2, #5
    2e1c:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2e1e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2e20:	4b39      	ldr	r3, [pc, #228]	; (2f08 <system_clock_init+0x134>)
    2e22:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2e24:	2005      	movs	r0, #5
    2e26:	4b39      	ldr	r3, [pc, #228]	; (2f0c <system_clock_init+0x138>)
    2e28:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2e2a:	4934      	ldr	r1, [pc, #208]	; (2efc <system_clock_init+0x128>)
    2e2c:	2202      	movs	r2, #2
    2e2e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2e30:	421a      	tst	r2, r3
    2e32:	d0fc      	beq.n	2e2e <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2e34:	4a31      	ldr	r2, [pc, #196]	; (2efc <system_clock_init+0x128>)
    2e36:	8a93      	ldrh	r3, [r2, #20]
    2e38:	2180      	movs	r1, #128	; 0x80
    2e3a:	430b      	orrs	r3, r1
    2e3c:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2e3e:	ab05      	add	r3, sp, #20
    2e40:	2100      	movs	r1, #0
    2e42:	2200      	movs	r2, #0
    2e44:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2e46:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2e48:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2e4a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2e4c:	313f      	adds	r1, #63	; 0x3f
    2e4e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2e50:	393b      	subs	r1, #59	; 0x3b
    2e52:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2e54:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2e56:	4b2e      	ldr	r3, [pc, #184]	; (2f10 <system_clock_init+0x13c>)
    2e58:	681b      	ldr	r3, [r3, #0]
    2e5a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2e5c:	2b3f      	cmp	r3, #63	; 0x3f
    2e5e:	d04b      	beq.n	2ef8 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2e60:	a805      	add	r0, sp, #20
    2e62:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2e64:	23b7      	movs	r3, #183	; 0xb7
    2e66:	00db      	lsls	r3, r3, #3
    2e68:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2e6a:	2307      	movs	r3, #7
    2e6c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2e6e:	3338      	adds	r3, #56	; 0x38
    2e70:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2e72:	4b28      	ldr	r3, [pc, #160]	; (2f14 <system_clock_init+0x140>)
    2e74:	4798      	blx	r3
	config->run_in_standby  = false;
    2e76:	a804      	add	r0, sp, #16
    2e78:	2500      	movs	r5, #0
    2e7a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2e7c:	2601      	movs	r6, #1
    2e7e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2e80:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2e82:	4b25      	ldr	r3, [pc, #148]	; (2f18 <system_clock_init+0x144>)
    2e84:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2e86:	2006      	movs	r0, #6
    2e88:	4f20      	ldr	r7, [pc, #128]	; (2f0c <system_clock_init+0x138>)
    2e8a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2e8c:	4b23      	ldr	r3, [pc, #140]	; (2f1c <system_clock_init+0x148>)
    2e8e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2e90:	ac01      	add	r4, sp, #4
    2e92:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2e94:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2e96:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2e98:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2e9a:	2305      	movs	r3, #5
    2e9c:	7023      	strb	r3, [r4, #0]
    2e9e:	0021      	movs	r1, r4
    2ea0:	2001      	movs	r0, #1
    2ea2:	4b1f      	ldr	r3, [pc, #124]	; (2f20 <system_clock_init+0x14c>)
    2ea4:	4798      	blx	r3
    2ea6:	2001      	movs	r0, #1
    2ea8:	4b1e      	ldr	r3, [pc, #120]	; (2f24 <system_clock_init+0x150>)
    2eaa:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2eac:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2eae:	0021      	movs	r1, r4
    2eb0:	2000      	movs	r0, #0
    2eb2:	4b14      	ldr	r3, [pc, #80]	; (2f04 <system_clock_init+0x130>)
    2eb4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2eb6:	2000      	movs	r0, #0
    2eb8:	4b1b      	ldr	r3, [pc, #108]	; (2f28 <system_clock_init+0x154>)
    2eba:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2ebc:	2007      	movs	r0, #7
    2ebe:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2ec0:	490e      	ldr	r1, [pc, #56]	; (2efc <system_clock_init+0x128>)
    2ec2:	22d0      	movs	r2, #208	; 0xd0
    2ec4:	68cb      	ldr	r3, [r1, #12]
    2ec6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2ec8:	2bd0      	cmp	r3, #208	; 0xd0
    2eca:	d1fb      	bne.n	2ec4 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    2ecc:	4a17      	ldr	r2, [pc, #92]	; (2f2c <system_clock_init+0x158>)
    2ece:	2300      	movs	r3, #0
    2ed0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2ed2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2ed4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2ed6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2ed8:	a901      	add	r1, sp, #4
    2eda:	2201      	movs	r2, #1
    2edc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2ede:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2ee0:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2ee2:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2ee4:	3307      	adds	r3, #7
    2ee6:	700b      	strb	r3, [r1, #0]
    2ee8:	2000      	movs	r0, #0
    2eea:	4b0d      	ldr	r3, [pc, #52]	; (2f20 <system_clock_init+0x14c>)
    2eec:	4798      	blx	r3
    2eee:	2000      	movs	r0, #0
    2ef0:	4b0c      	ldr	r3, [pc, #48]	; (2f24 <system_clock_init+0x150>)
    2ef2:	4798      	blx	r3
#endif
}
    2ef4:	b00f      	add	sp, #60	; 0x3c
    2ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2ef8:	3b20      	subs	r3, #32
    2efa:	e7b1      	b.n	2e60 <system_clock_init+0x8c>
    2efc:	40000800 	.word	0x40000800
    2f00:	41004000 	.word	0x41004000
    2f04:	00003169 	.word	0x00003169
    2f08:	00002bf5 	.word	0x00002bf5
    2f0c:	00002d2d 	.word	0x00002d2d
    2f10:	00806024 	.word	0x00806024
    2f14:	00002cad 	.word	0x00002cad
    2f18:	00002bb9 	.word	0x00002bb9
    2f1c:	00002f31 	.word	0x00002f31
    2f20:	00002f55 	.word	0x00002f55
    2f24:	0000300d 	.word	0x0000300d
    2f28:	000030dd 	.word	0x000030dd
    2f2c:	40000400 	.word	0x40000400

00002f30 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2f30:	4a06      	ldr	r2, [pc, #24]	; (2f4c <system_gclk_init+0x1c>)
    2f32:	6993      	ldr	r3, [r2, #24]
    2f34:	2108      	movs	r1, #8
    2f36:	430b      	orrs	r3, r1
    2f38:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2f3a:	2201      	movs	r2, #1
    2f3c:	4b04      	ldr	r3, [pc, #16]	; (2f50 <system_gclk_init+0x20>)
    2f3e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2f40:	0019      	movs	r1, r3
    2f42:	780b      	ldrb	r3, [r1, #0]
    2f44:	4213      	tst	r3, r2
    2f46:	d1fc      	bne.n	2f42 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2f48:	4770      	bx	lr
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	40000400 	.word	0x40000400
    2f50:	40000c00 	.word	0x40000c00

00002f54 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2f54:	b570      	push	{r4, r5, r6, lr}
    2f56:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2f58:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2f5a:	780d      	ldrb	r5, [r1, #0]
    2f5c:	022d      	lsls	r5, r5, #8
    2f5e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2f60:	784b      	ldrb	r3, [r1, #1]
    2f62:	2b00      	cmp	r3, #0
    2f64:	d002      	beq.n	2f6c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2f66:	2380      	movs	r3, #128	; 0x80
    2f68:	02db      	lsls	r3, r3, #11
    2f6a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2f6c:	7a4b      	ldrb	r3, [r1, #9]
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d002      	beq.n	2f78 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2f72:	2380      	movs	r3, #128	; 0x80
    2f74:	031b      	lsls	r3, r3, #12
    2f76:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2f78:	6848      	ldr	r0, [r1, #4]
    2f7a:	2801      	cmp	r0, #1
    2f7c:	d910      	bls.n	2fa0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2f7e:	1e43      	subs	r3, r0, #1
    2f80:	4218      	tst	r0, r3
    2f82:	d134      	bne.n	2fee <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2f84:	2802      	cmp	r0, #2
    2f86:	d930      	bls.n	2fea <system_gclk_gen_set_config+0x96>
    2f88:	2302      	movs	r3, #2
    2f8a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2f8c:	3201      	adds	r2, #1
						mask <<= 1) {
    2f8e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2f90:	4298      	cmp	r0, r3
    2f92:	d8fb      	bhi.n	2f8c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2f94:	0212      	lsls	r2, r2, #8
    2f96:	4332      	orrs	r2, r6
    2f98:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2f9a:	2380      	movs	r3, #128	; 0x80
    2f9c:	035b      	lsls	r3, r3, #13
    2f9e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2fa0:	7a0b      	ldrb	r3, [r1, #8]
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	d002      	beq.n	2fac <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2fa6:	2380      	movs	r3, #128	; 0x80
    2fa8:	039b      	lsls	r3, r3, #14
    2faa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2fac:	4a13      	ldr	r2, [pc, #76]	; (2ffc <system_gclk_gen_set_config+0xa8>)
    2fae:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2fb0:	b25b      	sxtb	r3, r3
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	dbfb      	blt.n	2fae <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2fb6:	4b12      	ldr	r3, [pc, #72]	; (3000 <system_gclk_gen_set_config+0xac>)
    2fb8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2fba:	4b12      	ldr	r3, [pc, #72]	; (3004 <system_gclk_gen_set_config+0xb0>)
    2fbc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2fbe:	4a0f      	ldr	r2, [pc, #60]	; (2ffc <system_gclk_gen_set_config+0xa8>)
    2fc0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2fc2:	b25b      	sxtb	r3, r3
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	dbfb      	blt.n	2fc0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2fc8:	4b0c      	ldr	r3, [pc, #48]	; (2ffc <system_gclk_gen_set_config+0xa8>)
    2fca:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2fcc:	001a      	movs	r2, r3
    2fce:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2fd0:	b25b      	sxtb	r3, r3
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	dbfb      	blt.n	2fce <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2fd6:	4a09      	ldr	r2, [pc, #36]	; (2ffc <system_gclk_gen_set_config+0xa8>)
    2fd8:	6853      	ldr	r3, [r2, #4]
    2fda:	2180      	movs	r1, #128	; 0x80
    2fdc:	0249      	lsls	r1, r1, #9
    2fde:	400b      	ands	r3, r1
    2fe0:	431d      	orrs	r5, r3
    2fe2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2fe4:	4b08      	ldr	r3, [pc, #32]	; (3008 <system_gclk_gen_set_config+0xb4>)
    2fe6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2fe8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2fea:	2200      	movs	r2, #0
    2fec:	e7d2      	b.n	2f94 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2fee:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2ff0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2ff2:	2380      	movs	r3, #128	; 0x80
    2ff4:	029b      	lsls	r3, r3, #10
    2ff6:	431d      	orrs	r5, r3
    2ff8:	e7d2      	b.n	2fa0 <system_gclk_gen_set_config+0x4c>
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	40000c00 	.word	0x40000c00
    3000:	00001afd 	.word	0x00001afd
    3004:	40000c08 	.word	0x40000c08
    3008:	00001b3d 	.word	0x00001b3d

0000300c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    300c:	b510      	push	{r4, lr}
    300e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3010:	4a0b      	ldr	r2, [pc, #44]	; (3040 <system_gclk_gen_enable+0x34>)
    3012:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3014:	b25b      	sxtb	r3, r3
    3016:	2b00      	cmp	r3, #0
    3018:	dbfb      	blt.n	3012 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    301a:	4b0a      	ldr	r3, [pc, #40]	; (3044 <system_gclk_gen_enable+0x38>)
    301c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    301e:	4b0a      	ldr	r3, [pc, #40]	; (3048 <system_gclk_gen_enable+0x3c>)
    3020:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3022:	4a07      	ldr	r2, [pc, #28]	; (3040 <system_gclk_gen_enable+0x34>)
    3024:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3026:	b25b      	sxtb	r3, r3
    3028:	2b00      	cmp	r3, #0
    302a:	dbfb      	blt.n	3024 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    302c:	4a04      	ldr	r2, [pc, #16]	; (3040 <system_gclk_gen_enable+0x34>)
    302e:	6851      	ldr	r1, [r2, #4]
    3030:	2380      	movs	r3, #128	; 0x80
    3032:	025b      	lsls	r3, r3, #9
    3034:	430b      	orrs	r3, r1
    3036:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3038:	4b04      	ldr	r3, [pc, #16]	; (304c <system_gclk_gen_enable+0x40>)
    303a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    303c:	bd10      	pop	{r4, pc}
    303e:	46c0      	nop			; (mov r8, r8)
    3040:	40000c00 	.word	0x40000c00
    3044:	00001afd 	.word	0x00001afd
    3048:	40000c04 	.word	0x40000c04
    304c:	00001b3d 	.word	0x00001b3d

00003050 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3050:	b570      	push	{r4, r5, r6, lr}
    3052:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3054:	4a1a      	ldr	r2, [pc, #104]	; (30c0 <system_gclk_gen_get_hz+0x70>)
    3056:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3058:	b25b      	sxtb	r3, r3
    305a:	2b00      	cmp	r3, #0
    305c:	dbfb      	blt.n	3056 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    305e:	4b19      	ldr	r3, [pc, #100]	; (30c4 <system_gclk_gen_get_hz+0x74>)
    3060:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3062:	4b19      	ldr	r3, [pc, #100]	; (30c8 <system_gclk_gen_get_hz+0x78>)
    3064:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3066:	4a16      	ldr	r2, [pc, #88]	; (30c0 <system_gclk_gen_get_hz+0x70>)
    3068:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    306a:	b25b      	sxtb	r3, r3
    306c:	2b00      	cmp	r3, #0
    306e:	dbfb      	blt.n	3068 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3070:	4e13      	ldr	r6, [pc, #76]	; (30c0 <system_gclk_gen_get_hz+0x70>)
    3072:	6870      	ldr	r0, [r6, #4]
    3074:	04c0      	lsls	r0, r0, #19
    3076:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3078:	4b14      	ldr	r3, [pc, #80]	; (30cc <system_gclk_gen_get_hz+0x7c>)
    307a:	4798      	blx	r3
    307c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    307e:	4b12      	ldr	r3, [pc, #72]	; (30c8 <system_gclk_gen_get_hz+0x78>)
    3080:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3082:	6876      	ldr	r6, [r6, #4]
    3084:	02f6      	lsls	r6, r6, #11
    3086:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3088:	4b11      	ldr	r3, [pc, #68]	; (30d0 <system_gclk_gen_get_hz+0x80>)
    308a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    308c:	4a0c      	ldr	r2, [pc, #48]	; (30c0 <system_gclk_gen_get_hz+0x70>)
    308e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3090:	b25b      	sxtb	r3, r3
    3092:	2b00      	cmp	r3, #0
    3094:	dbfb      	blt.n	308e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3096:	4b0a      	ldr	r3, [pc, #40]	; (30c0 <system_gclk_gen_get_hz+0x70>)
    3098:	689c      	ldr	r4, [r3, #8]
    309a:	0224      	lsls	r4, r4, #8
    309c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    309e:	4b0d      	ldr	r3, [pc, #52]	; (30d4 <system_gclk_gen_get_hz+0x84>)
    30a0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    30a2:	2e00      	cmp	r6, #0
    30a4:	d107      	bne.n	30b6 <system_gclk_gen_get_hz+0x66>
    30a6:	2c01      	cmp	r4, #1
    30a8:	d907      	bls.n	30ba <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    30aa:	0021      	movs	r1, r4
    30ac:	0028      	movs	r0, r5
    30ae:	4b0a      	ldr	r3, [pc, #40]	; (30d8 <system_gclk_gen_get_hz+0x88>)
    30b0:	4798      	blx	r3
    30b2:	0005      	movs	r5, r0
    30b4:	e001      	b.n	30ba <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    30b6:	3401      	adds	r4, #1
    30b8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    30ba:	0028      	movs	r0, r5
    30bc:	bd70      	pop	{r4, r5, r6, pc}
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	40000c00 	.word	0x40000c00
    30c4:	00001afd 	.word	0x00001afd
    30c8:	40000c04 	.word	0x40000c04
    30cc:	00002b25 	.word	0x00002b25
    30d0:	40000c08 	.word	0x40000c08
    30d4:	00001b3d 	.word	0x00001b3d
    30d8:	00004819 	.word	0x00004819

000030dc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    30dc:	b510      	push	{r4, lr}
    30de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    30e0:	4b06      	ldr	r3, [pc, #24]	; (30fc <system_gclk_chan_enable+0x20>)
    30e2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    30e4:	4b06      	ldr	r3, [pc, #24]	; (3100 <system_gclk_chan_enable+0x24>)
    30e6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    30e8:	4a06      	ldr	r2, [pc, #24]	; (3104 <system_gclk_chan_enable+0x28>)
    30ea:	8853      	ldrh	r3, [r2, #2]
    30ec:	2180      	movs	r1, #128	; 0x80
    30ee:	01c9      	lsls	r1, r1, #7
    30f0:	430b      	orrs	r3, r1
    30f2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    30f4:	4b04      	ldr	r3, [pc, #16]	; (3108 <system_gclk_chan_enable+0x2c>)
    30f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    30f8:	bd10      	pop	{r4, pc}
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	00001afd 	.word	0x00001afd
    3100:	40000c02 	.word	0x40000c02
    3104:	40000c00 	.word	0x40000c00
    3108:	00001b3d 	.word	0x00001b3d

0000310c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    310c:	b510      	push	{r4, lr}
    310e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3110:	4b0f      	ldr	r3, [pc, #60]	; (3150 <system_gclk_chan_disable+0x44>)
    3112:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3114:	4b0f      	ldr	r3, [pc, #60]	; (3154 <system_gclk_chan_disable+0x48>)
    3116:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3118:	4a0f      	ldr	r2, [pc, #60]	; (3158 <system_gclk_chan_disable+0x4c>)
    311a:	8853      	ldrh	r3, [r2, #2]
    311c:	051b      	lsls	r3, r3, #20
    311e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3120:	8853      	ldrh	r3, [r2, #2]
    3122:	490e      	ldr	r1, [pc, #56]	; (315c <system_gclk_chan_disable+0x50>)
    3124:	400b      	ands	r3, r1
    3126:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3128:	8853      	ldrh	r3, [r2, #2]
    312a:	490d      	ldr	r1, [pc, #52]	; (3160 <system_gclk_chan_disable+0x54>)
    312c:	400b      	ands	r3, r1
    312e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3130:	0011      	movs	r1, r2
    3132:	2280      	movs	r2, #128	; 0x80
    3134:	01d2      	lsls	r2, r2, #7
    3136:	884b      	ldrh	r3, [r1, #2]
    3138:	4213      	tst	r3, r2
    313a:	d1fc      	bne.n	3136 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    313c:	4906      	ldr	r1, [pc, #24]	; (3158 <system_gclk_chan_disable+0x4c>)
    313e:	884a      	ldrh	r2, [r1, #2]
    3140:	0203      	lsls	r3, r0, #8
    3142:	4806      	ldr	r0, [pc, #24]	; (315c <system_gclk_chan_disable+0x50>)
    3144:	4002      	ands	r2, r0
    3146:	4313      	orrs	r3, r2
    3148:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    314a:	4b06      	ldr	r3, [pc, #24]	; (3164 <system_gclk_chan_disable+0x58>)
    314c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    314e:	bd10      	pop	{r4, pc}
    3150:	00001afd 	.word	0x00001afd
    3154:	40000c02 	.word	0x40000c02
    3158:	40000c00 	.word	0x40000c00
    315c:	fffff0ff 	.word	0xfffff0ff
    3160:	ffffbfff 	.word	0xffffbfff
    3164:	00001b3d 	.word	0x00001b3d

00003168 <system_gclk_chan_set_config>:
{
    3168:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    316a:	780c      	ldrb	r4, [r1, #0]
    316c:	0224      	lsls	r4, r4, #8
    316e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3170:	4b02      	ldr	r3, [pc, #8]	; (317c <system_gclk_chan_set_config+0x14>)
    3172:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3174:	b2a4      	uxth	r4, r4
    3176:	4b02      	ldr	r3, [pc, #8]	; (3180 <system_gclk_chan_set_config+0x18>)
    3178:	805c      	strh	r4, [r3, #2]
}
    317a:	bd10      	pop	{r4, pc}
    317c:	0000310d 	.word	0x0000310d
    3180:	40000c00 	.word	0x40000c00

00003184 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3184:	b510      	push	{r4, lr}
    3186:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3188:	4b06      	ldr	r3, [pc, #24]	; (31a4 <system_gclk_chan_get_hz+0x20>)
    318a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    318c:	4b06      	ldr	r3, [pc, #24]	; (31a8 <system_gclk_chan_get_hz+0x24>)
    318e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3190:	4b06      	ldr	r3, [pc, #24]	; (31ac <system_gclk_chan_get_hz+0x28>)
    3192:	885c      	ldrh	r4, [r3, #2]
    3194:	0524      	lsls	r4, r4, #20
    3196:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3198:	4b05      	ldr	r3, [pc, #20]	; (31b0 <system_gclk_chan_get_hz+0x2c>)
    319a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    319c:	0020      	movs	r0, r4
    319e:	4b05      	ldr	r3, [pc, #20]	; (31b4 <system_gclk_chan_get_hz+0x30>)
    31a0:	4798      	blx	r3
}
    31a2:	bd10      	pop	{r4, pc}
    31a4:	00001afd 	.word	0x00001afd
    31a8:	40000c02 	.word	0x40000c02
    31ac:	40000c00 	.word	0x40000c00
    31b0:	00001b3d 	.word	0x00001b3d
    31b4:	00003051 	.word	0x00003051

000031b8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    31b8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    31ba:	78d3      	ldrb	r3, [r2, #3]
    31bc:	2b00      	cmp	r3, #0
    31be:	d135      	bne.n	322c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    31c0:	7813      	ldrb	r3, [r2, #0]
    31c2:	2b80      	cmp	r3, #128	; 0x80
    31c4:	d029      	beq.n	321a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    31c6:	061b      	lsls	r3, r3, #24
    31c8:	2480      	movs	r4, #128	; 0x80
    31ca:	0264      	lsls	r4, r4, #9
    31cc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    31ce:	7854      	ldrb	r4, [r2, #1]
    31d0:	2502      	movs	r5, #2
    31d2:	43ac      	bics	r4, r5
    31d4:	d106      	bne.n	31e4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    31d6:	7894      	ldrb	r4, [r2, #2]
    31d8:	2c00      	cmp	r4, #0
    31da:	d120      	bne.n	321e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    31dc:	2480      	movs	r4, #128	; 0x80
    31de:	02a4      	lsls	r4, r4, #10
    31e0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    31e2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    31e4:	7854      	ldrb	r4, [r2, #1]
    31e6:	3c01      	subs	r4, #1
    31e8:	2c01      	cmp	r4, #1
    31ea:	d91c      	bls.n	3226 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    31ec:	040d      	lsls	r5, r1, #16
    31ee:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    31f0:	24a0      	movs	r4, #160	; 0xa0
    31f2:	05e4      	lsls	r4, r4, #23
    31f4:	432c      	orrs	r4, r5
    31f6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    31f8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    31fa:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    31fc:	24d0      	movs	r4, #208	; 0xd0
    31fe:	0624      	lsls	r4, r4, #24
    3200:	432c      	orrs	r4, r5
    3202:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3204:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3206:	78d4      	ldrb	r4, [r2, #3]
    3208:	2c00      	cmp	r4, #0
    320a:	d122      	bne.n	3252 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    320c:	035b      	lsls	r3, r3, #13
    320e:	d51c      	bpl.n	324a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3210:	7893      	ldrb	r3, [r2, #2]
    3212:	2b01      	cmp	r3, #1
    3214:	d01e      	beq.n	3254 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3216:	6141      	str	r1, [r0, #20]
    3218:	e017      	b.n	324a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    321a:	2300      	movs	r3, #0
    321c:	e7d7      	b.n	31ce <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    321e:	24c0      	movs	r4, #192	; 0xc0
    3220:	02e4      	lsls	r4, r4, #11
    3222:	4323      	orrs	r3, r4
    3224:	e7dd      	b.n	31e2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3226:	4c0d      	ldr	r4, [pc, #52]	; (325c <_system_pinmux_config+0xa4>)
    3228:	4023      	ands	r3, r4
    322a:	e7df      	b.n	31ec <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    322c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    322e:	040c      	lsls	r4, r1, #16
    3230:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3232:	23a0      	movs	r3, #160	; 0xa0
    3234:	05db      	lsls	r3, r3, #23
    3236:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3238:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    323a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    323c:	23d0      	movs	r3, #208	; 0xd0
    323e:	061b      	lsls	r3, r3, #24
    3240:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3242:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3244:	78d3      	ldrb	r3, [r2, #3]
    3246:	2b00      	cmp	r3, #0
    3248:	d103      	bne.n	3252 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    324a:	7853      	ldrb	r3, [r2, #1]
    324c:	3b01      	subs	r3, #1
    324e:	2b01      	cmp	r3, #1
    3250:	d902      	bls.n	3258 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3252:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3254:	6181      	str	r1, [r0, #24]
    3256:	e7f8      	b.n	324a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3258:	6081      	str	r1, [r0, #8]
}
    325a:	e7fa      	b.n	3252 <_system_pinmux_config+0x9a>
    325c:	fffbffff 	.word	0xfffbffff

00003260 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3260:	b510      	push	{r4, lr}
    3262:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3264:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3266:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3268:	2900      	cmp	r1, #0
    326a:	d104      	bne.n	3276 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    326c:	0943      	lsrs	r3, r0, #5
    326e:	01db      	lsls	r3, r3, #7
    3270:	4905      	ldr	r1, [pc, #20]	; (3288 <system_pinmux_pin_set_config+0x28>)
    3272:	468c      	mov	ip, r1
    3274:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3276:	241f      	movs	r4, #31
    3278:	4020      	ands	r0, r4
    327a:	2101      	movs	r1, #1
    327c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    327e:	0018      	movs	r0, r3
    3280:	4b02      	ldr	r3, [pc, #8]	; (328c <system_pinmux_pin_set_config+0x2c>)
    3282:	4798      	blx	r3
}
    3284:	bd10      	pop	{r4, pc}
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	41004400 	.word	0x41004400
    328c:	000031b9 	.word	0x000031b9

00003290 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3290:	4770      	bx	lr
	...

00003294 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3294:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3296:	4b05      	ldr	r3, [pc, #20]	; (32ac <system_init+0x18>)
    3298:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    329a:	4b05      	ldr	r3, [pc, #20]	; (32b0 <system_init+0x1c>)
    329c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    329e:	4b05      	ldr	r3, [pc, #20]	; (32b4 <system_init+0x20>)
    32a0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    32a2:	4b05      	ldr	r3, [pc, #20]	; (32b8 <system_init+0x24>)
    32a4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    32a6:	4b05      	ldr	r3, [pc, #20]	; (32bc <system_init+0x28>)
    32a8:	4798      	blx	r3
}
    32aa:	bd10      	pop	{r4, pc}
    32ac:	00002dd5 	.word	0x00002dd5
    32b0:	00001b6d 	.word	0x00001b6d
    32b4:	00003291 	.word	0x00003291
    32b8:	00003291 	.word	0x00003291
    32bc:	00003291 	.word	0x00003291

000032c0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    32c0:	e7fe      	b.n	32c0 <Dummy_Handler>
	...

000032c4 <Reset_Handler>:
{
    32c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    32c6:	4a2a      	ldr	r2, [pc, #168]	; (3370 <Reset_Handler+0xac>)
    32c8:	4b2a      	ldr	r3, [pc, #168]	; (3374 <Reset_Handler+0xb0>)
    32ca:	429a      	cmp	r2, r3
    32cc:	d011      	beq.n	32f2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    32ce:	001a      	movs	r2, r3
    32d0:	4b29      	ldr	r3, [pc, #164]	; (3378 <Reset_Handler+0xb4>)
    32d2:	429a      	cmp	r2, r3
    32d4:	d20d      	bcs.n	32f2 <Reset_Handler+0x2e>
    32d6:	4a29      	ldr	r2, [pc, #164]	; (337c <Reset_Handler+0xb8>)
    32d8:	3303      	adds	r3, #3
    32da:	1a9b      	subs	r3, r3, r2
    32dc:	089b      	lsrs	r3, r3, #2
    32de:	3301      	adds	r3, #1
    32e0:	009b      	lsls	r3, r3, #2
    32e2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    32e4:	4823      	ldr	r0, [pc, #140]	; (3374 <Reset_Handler+0xb0>)
    32e6:	4922      	ldr	r1, [pc, #136]	; (3370 <Reset_Handler+0xac>)
    32e8:	588c      	ldr	r4, [r1, r2]
    32ea:	5084      	str	r4, [r0, r2]
    32ec:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    32ee:	429a      	cmp	r2, r3
    32f0:	d1fa      	bne.n	32e8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    32f2:	4a23      	ldr	r2, [pc, #140]	; (3380 <Reset_Handler+0xbc>)
    32f4:	4b23      	ldr	r3, [pc, #140]	; (3384 <Reset_Handler+0xc0>)
    32f6:	429a      	cmp	r2, r3
    32f8:	d20a      	bcs.n	3310 <Reset_Handler+0x4c>
    32fa:	43d3      	mvns	r3, r2
    32fc:	4921      	ldr	r1, [pc, #132]	; (3384 <Reset_Handler+0xc0>)
    32fe:	185b      	adds	r3, r3, r1
    3300:	2103      	movs	r1, #3
    3302:	438b      	bics	r3, r1
    3304:	3304      	adds	r3, #4
    3306:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3308:	2100      	movs	r1, #0
    330a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    330c:	4293      	cmp	r3, r2
    330e:	d1fc      	bne.n	330a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3310:	4a1d      	ldr	r2, [pc, #116]	; (3388 <Reset_Handler+0xc4>)
    3312:	21ff      	movs	r1, #255	; 0xff
    3314:	4b1d      	ldr	r3, [pc, #116]	; (338c <Reset_Handler+0xc8>)
    3316:	438b      	bics	r3, r1
    3318:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    331a:	39fd      	subs	r1, #253	; 0xfd
    331c:	2390      	movs	r3, #144	; 0x90
    331e:	005b      	lsls	r3, r3, #1
    3320:	4a1b      	ldr	r2, [pc, #108]	; (3390 <Reset_Handler+0xcc>)
    3322:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3324:	4a1b      	ldr	r2, [pc, #108]	; (3394 <Reset_Handler+0xd0>)
    3326:	78d3      	ldrb	r3, [r2, #3]
    3328:	2503      	movs	r5, #3
    332a:	43ab      	bics	r3, r5
    332c:	2402      	movs	r4, #2
    332e:	4323      	orrs	r3, r4
    3330:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3332:	78d3      	ldrb	r3, [r2, #3]
    3334:	270c      	movs	r7, #12
    3336:	43bb      	bics	r3, r7
    3338:	2608      	movs	r6, #8
    333a:	4333      	orrs	r3, r6
    333c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    333e:	4b16      	ldr	r3, [pc, #88]	; (3398 <Reset_Handler+0xd4>)
    3340:	7b98      	ldrb	r0, [r3, #14]
    3342:	2230      	movs	r2, #48	; 0x30
    3344:	4390      	bics	r0, r2
    3346:	2220      	movs	r2, #32
    3348:	4310      	orrs	r0, r2
    334a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    334c:	7b99      	ldrb	r1, [r3, #14]
    334e:	43b9      	bics	r1, r7
    3350:	4331      	orrs	r1, r6
    3352:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3354:	7b9a      	ldrb	r2, [r3, #14]
    3356:	43aa      	bics	r2, r5
    3358:	4322      	orrs	r2, r4
    335a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    335c:	4a0f      	ldr	r2, [pc, #60]	; (339c <Reset_Handler+0xd8>)
    335e:	6853      	ldr	r3, [r2, #4]
    3360:	2180      	movs	r1, #128	; 0x80
    3362:	430b      	orrs	r3, r1
    3364:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3366:	4b0e      	ldr	r3, [pc, #56]	; (33a0 <Reset_Handler+0xdc>)
    3368:	4798      	blx	r3
        main();
    336a:	4b0e      	ldr	r3, [pc, #56]	; (33a4 <Reset_Handler+0xe0>)
    336c:	4798      	blx	r3
    336e:	e7fe      	b.n	336e <Reset_Handler+0xaa>
    3370:	00008278 	.word	0x00008278
    3374:	20000000 	.word	0x20000000
    3378:	20000208 	.word	0x20000208
    337c:	20000004 	.word	0x20000004
    3380:	20000208 	.word	0x20000208
    3384:	20003128 	.word	0x20003128
    3388:	e000ed00 	.word	0xe000ed00
    338c:	00000000 	.word	0x00000000
    3390:	41007000 	.word	0x41007000
    3394:	41005000 	.word	0x41005000
    3398:	41004800 	.word	0x41004800
    339c:	41004000 	.word	0x41004000
    33a0:	00004b59 	.word	0x00004b59
    33a4:	00004765 	.word	0x00004765

000033a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    33a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33aa:	46c6      	mov	lr, r8
    33ac:	b500      	push	{lr}
    33ae:	000c      	movs	r4, r1
    33b0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    33b2:	2800      	cmp	r0, #0
    33b4:	d10f      	bne.n	33d6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    33b6:	2a00      	cmp	r2, #0
    33b8:	dd11      	ble.n	33de <_read+0x36>
    33ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    33bc:	4e09      	ldr	r6, [pc, #36]	; (33e4 <_read+0x3c>)
    33be:	4d0a      	ldr	r5, [pc, #40]	; (33e8 <_read+0x40>)
    33c0:	6830      	ldr	r0, [r6, #0]
    33c2:	0021      	movs	r1, r4
    33c4:	682b      	ldr	r3, [r5, #0]
    33c6:	4798      	blx	r3
		ptr++;
    33c8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    33ca:	42bc      	cmp	r4, r7
    33cc:	d1f8      	bne.n	33c0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    33ce:	4640      	mov	r0, r8
    33d0:	bc04      	pop	{r2}
    33d2:	4690      	mov	r8, r2
    33d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    33d6:	2301      	movs	r3, #1
    33d8:	425b      	negs	r3, r3
    33da:	4698      	mov	r8, r3
    33dc:	e7f7      	b.n	33ce <_read+0x26>
	for (; len > 0; --len) {
    33de:	4680      	mov	r8, r0
    33e0:	e7f5      	b.n	33ce <_read+0x26>
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	200003bc 	.word	0x200003bc
    33e8:	200003b4 	.word	0x200003b4

000033ec <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    33ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ee:	46c6      	mov	lr, r8
    33f0:	b500      	push	{lr}
    33f2:	000e      	movs	r6, r1
    33f4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    33f6:	3801      	subs	r0, #1
    33f8:	2802      	cmp	r0, #2
    33fa:	d810      	bhi.n	341e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    33fc:	2a00      	cmp	r2, #0
    33fe:	d011      	beq.n	3424 <_write+0x38>
    3400:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3402:	4b0c      	ldr	r3, [pc, #48]	; (3434 <_write+0x48>)
    3404:	4698      	mov	r8, r3
    3406:	4f0c      	ldr	r7, [pc, #48]	; (3438 <_write+0x4c>)
    3408:	4643      	mov	r3, r8
    340a:	6818      	ldr	r0, [r3, #0]
    340c:	5d31      	ldrb	r1, [r6, r4]
    340e:	683b      	ldr	r3, [r7, #0]
    3410:	4798      	blx	r3
    3412:	2800      	cmp	r0, #0
    3414:	db08      	blt.n	3428 <_write+0x3c>
			return -1;
		}
		++nChars;
    3416:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3418:	42a5      	cmp	r5, r4
    341a:	d1f5      	bne.n	3408 <_write+0x1c>
    341c:	e006      	b.n	342c <_write+0x40>
		return -1;
    341e:	2401      	movs	r4, #1
    3420:	4264      	negs	r4, r4
    3422:	e003      	b.n	342c <_write+0x40>
	for (; len != 0; --len) {
    3424:	0014      	movs	r4, r2
    3426:	e001      	b.n	342c <_write+0x40>
			return -1;
    3428:	2401      	movs	r4, #1
    342a:	4264      	negs	r4, r4
	}
	return nChars;
}
    342c:	0020      	movs	r0, r4
    342e:	bc04      	pop	{r2}
    3430:	4690      	mov	r8, r2
    3432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3434:	200003bc 	.word	0x200003bc
    3438:	200003b8 	.word	0x200003b8

0000343c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    343c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    343e:	4a06      	ldr	r2, [pc, #24]	; (3458 <_sbrk+0x1c>)
    3440:	6812      	ldr	r2, [r2, #0]
    3442:	2a00      	cmp	r2, #0
    3444:	d004      	beq.n	3450 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3446:	4a04      	ldr	r2, [pc, #16]	; (3458 <_sbrk+0x1c>)
    3448:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    344a:	18c3      	adds	r3, r0, r3
    344c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    344e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3450:	4902      	ldr	r1, [pc, #8]	; (345c <_sbrk+0x20>)
    3452:	4a01      	ldr	r2, [pc, #4]	; (3458 <_sbrk+0x1c>)
    3454:	6011      	str	r1, [r2, #0]
    3456:	e7f6      	b.n	3446 <_sbrk+0xa>
    3458:	200002e4 	.word	0x200002e4
    345c:	20005128 	.word	0x20005128

00003460 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3460:	2001      	movs	r0, #1
    3462:	4240      	negs	r0, r0
    3464:	4770      	bx	lr

00003466 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3466:	2380      	movs	r3, #128	; 0x80
    3468:	019b      	lsls	r3, r3, #6
    346a:	604b      	str	r3, [r1, #4]

	return 0;
}
    346c:	2000      	movs	r0, #0
    346e:	4770      	bx	lr

00003470 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3470:	2001      	movs	r0, #1
    3472:	4770      	bx	lr

00003474 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3474:	2000      	movs	r0, #0
    3476:	4770      	bx	lr

00003478 <drawChar>:
uint8_t consoleSGR[80][24];



void drawChar(uint8_t character)
{
    3478:	b5f0      	push	{r4, r5, r6, r7, lr}
    347a:	46d6      	mov	lr, sl
    347c:	464f      	mov	r7, r9
    347e:	4646      	mov	r6, r8
    3480:	b5c0      	push	{r6, r7, lr}
    3482:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    3484:	4e4f      	ldr	r6, [pc, #316]	; (35c4 <drawChar+0x14c>)
    3486:	8833      	ldrh	r3, [r6, #0]
	uint16_t y = yCharPos;
    3488:	4d4f      	ldr	r5, [pc, #316]	; (35c8 <drawChar+0x150>)
    348a:	8829      	ldrh	r1, [r5, #0]
	
	
	consoleDisplay[xCharPos][yCharPos] = character;
    348c:	005a      	lsls	r2, r3, #1
    348e:	18d2      	adds	r2, r2, r3
    3490:	00d2      	lsls	r2, r2, #3
    3492:	484e      	ldr	r0, [pc, #312]	; (35cc <drawChar+0x154>)
    3494:	1882      	adds	r2, r0, r2
    3496:	5454      	strb	r4, [r2, r1]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    3498:	2080      	movs	r0, #128	; 0x80
    349a:	03c0      	lsls	r0, r0, #15
    349c:	4a4c      	ldr	r2, [pc, #304]	; (35d0 <drawChar+0x158>)
    349e:	6010      	str	r0, [r2, #0]
	if(BitVal(consoleSGR[xCharPos][yCharPos],7) == 0)
    34a0:	8830      	ldrh	r0, [r6, #0]
    34a2:	882d      	ldrh	r5, [r5, #0]
    34a4:	0042      	lsls	r2, r0, #1
    34a6:	1812      	adds	r2, r2, r0
    34a8:	00d2      	lsls	r2, r2, #3
    34aa:	484a      	ldr	r0, [pc, #296]	; (35d4 <drawChar+0x15c>)
    34ac:	1882      	adds	r2, r0, r2
    34ae:	5d52      	ldrb	r2, [r2, r5]
    34b0:	09d2      	lsrs	r2, r2, #7
    34b2:	d13e      	bne.n	3532 <drawChar+0xba>
	{
		setXY(x*10,y*20,x*10+9,y*20+19);
    34b4:	0098      	lsls	r0, r3, #2
    34b6:	1818      	adds	r0, r3, r0
    34b8:	0040      	lsls	r0, r0, #1
    34ba:	b280      	uxth	r0, r0
    34bc:	2314      	movs	r3, #20
    34be:	4359      	muls	r1, r3
    34c0:	b289      	uxth	r1, r1
    34c2:	000b      	movs	r3, r1
    34c4:	3313      	adds	r3, #19
    34c6:	b29b      	uxth	r3, r3
    34c8:	0002      	movs	r2, r0
    34ca:	3209      	adds	r2, #9
    34cc:	b292      	uxth	r2, r2
    34ce:	4d42      	ldr	r5, [pc, #264]	; (35d8 <drawChar+0x160>)
    34d0:	47a8      	blx	r5
    34d2:	4a42      	ldr	r2, [pc, #264]	; (35dc <drawChar+0x164>)
    34d4:	00a5      	lsls	r5, r4, #2
    34d6:	192d      	adds	r5, r5, r4
    34d8:	00ab      	lsls	r3, r5, #2
    34da:	18ed      	adds	r5, r5, r3
    34dc:	1955      	adds	r5, r2, r5
    34de:	3401      	adds	r4, #1
    34e0:	00a3      	lsls	r3, r4, #2
    34e2:	191c      	adds	r4, r3, r4
    34e4:	00a3      	lsls	r3, r4, #2
    34e6:	18e4      	adds	r4, r4, r3
    34e8:	4692      	mov	sl, r2
    34ea:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    34ec:	4b3c      	ldr	r3, [pc, #240]	; (35e0 <drawChar+0x168>)
    34ee:	4699      	mov	r9, r3
    34f0:	4b3c      	ldr	r3, [pc, #240]	; (35e4 <drawChar+0x16c>)
    34f2:	4698      	mov	r8, r3
    34f4:	4f3c      	ldr	r7, [pc, #240]	; (35e8 <drawChar+0x170>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    34f6:	4e3d      	ldr	r6, [pc, #244]	; (35ec <drawChar+0x174>)
    34f8:	e019      	b.n	352e <drawChar+0xb6>
					setPixel((back_Color_High<<8)|back_Color_Low);
    34fa:	464b      	mov	r3, r9
    34fc:	8818      	ldrh	r0, [r3, #0]
    34fe:	0200      	lsls	r0, r0, #8
    3500:	4643      	mov	r3, r8
    3502:	881b      	ldrh	r3, [r3, #0]
    3504:	4318      	orrs	r0, r3
    3506:	b280      	uxth	r0, r0
    3508:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    350a:	3c01      	subs	r4, #1
    350c:	d30c      	bcc.n	3528 <drawChar+0xb0>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    350e:	782b      	ldrb	r3, [r5, #0]
    3510:	4123      	asrs	r3, r4
    3512:	07db      	lsls	r3, r3, #31
    3514:	d5f1      	bpl.n	34fa <drawChar+0x82>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    3516:	8830      	ldrh	r0, [r6, #0]
    3518:	0200      	lsls	r0, r0, #8
    351a:	4b35      	ldr	r3, [pc, #212]	; (35f0 <drawChar+0x178>)
    351c:	881b      	ldrh	r3, [r3, #0]
    351e:	4318      	orrs	r0, r3
    3520:	b280      	uxth	r0, r0
    3522:	4b31      	ldr	r3, [pc, #196]	; (35e8 <drawChar+0x170>)
    3524:	4798      	blx	r3
    3526:	e7f0      	b.n	350a <drawChar+0x92>
    3528:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    352a:	4555      	cmp	r5, sl
    352c:	d040      	beq.n	35b0 <drawChar+0x138>
{
    352e:	2407      	movs	r4, #7
    3530:	e7ed      	b.n	350e <drawChar+0x96>
			}
		}
	}
	else
	{
		setXY(x*10,y*20,x*10+9,y*20+19);
    3532:	0098      	lsls	r0, r3, #2
    3534:	181b      	adds	r3, r3, r0
    3536:	005b      	lsls	r3, r3, #1
    3538:	b298      	uxth	r0, r3
    353a:	2314      	movs	r3, #20
    353c:	4359      	muls	r1, r3
    353e:	b289      	uxth	r1, r1
    3540:	000b      	movs	r3, r1
    3542:	3313      	adds	r3, #19
    3544:	b29b      	uxth	r3, r3
    3546:	0002      	movs	r2, r0
    3548:	3209      	adds	r2, #9
    354a:	b292      	uxth	r2, r2
    354c:	4d22      	ldr	r5, [pc, #136]	; (35d8 <drawChar+0x160>)
    354e:	47a8      	blx	r5
    3550:	4a22      	ldr	r2, [pc, #136]	; (35dc <drawChar+0x164>)
    3552:	00a5      	lsls	r5, r4, #2
    3554:	192d      	adds	r5, r5, r4
    3556:	00ab      	lsls	r3, r5, #2
    3558:	18ed      	adds	r5, r5, r3
    355a:	1955      	adds	r5, r2, r5
    355c:	3401      	adds	r4, #1
    355e:	00a3      	lsls	r3, r4, #2
    3560:	191c      	adds	r4, r3, r4
    3562:	00a3      	lsls	r3, r4, #2
    3564:	18e4      	adds	r4, r4, r3
    3566:	4692      	mov	sl, r2
    3568:	44a2      	add	sl, r4
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
				}
				else
				{	
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    356a:	4b20      	ldr	r3, [pc, #128]	; (35ec <drawChar+0x174>)
    356c:	4699      	mov	r9, r3
    356e:	4b20      	ldr	r3, [pc, #128]	; (35f0 <drawChar+0x178>)
    3570:	4698      	mov	r8, r3
    3572:	4f1d      	ldr	r7, [pc, #116]	; (35e8 <drawChar+0x170>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    3574:	4e1a      	ldr	r6, [pc, #104]	; (35e0 <drawChar+0x168>)
    3576:	e019      	b.n	35ac <drawChar+0x134>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    3578:	464b      	mov	r3, r9
    357a:	8818      	ldrh	r0, [r3, #0]
    357c:	0200      	lsls	r0, r0, #8
    357e:	4643      	mov	r3, r8
    3580:	881b      	ldrh	r3, [r3, #0]
    3582:	4318      	orrs	r0, r3
    3584:	b280      	uxth	r0, r0
    3586:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    3588:	3c01      	subs	r4, #1
    358a:	d30c      	bcc.n	35a6 <drawChar+0x12e>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    358c:	782b      	ldrb	r3, [r5, #0]
    358e:	4123      	asrs	r3, r4
    3590:	07db      	lsls	r3, r3, #31
    3592:	d5f1      	bpl.n	3578 <drawChar+0x100>
					setPixel((back_Color_High<<8)|back_Color_Low);
    3594:	8830      	ldrh	r0, [r6, #0]
    3596:	0200      	lsls	r0, r0, #8
    3598:	4b12      	ldr	r3, [pc, #72]	; (35e4 <drawChar+0x16c>)
    359a:	881b      	ldrh	r3, [r3, #0]
    359c:	4318      	orrs	r0, r3
    359e:	b280      	uxth	r0, r0
    35a0:	4b11      	ldr	r3, [pc, #68]	; (35e8 <drawChar+0x170>)
    35a2:	4798      	blx	r3
    35a4:	e7f0      	b.n	3588 <drawChar+0x110>
    35a6:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    35a8:	4555      	cmp	r5, sl
    35aa:	d001      	beq.n	35b0 <drawChar+0x138>
{
    35ac:	2407      	movs	r4, #7
    35ae:	e7ed      	b.n	358c <drawChar+0x114>
				}

			}
		}		
	}
	REG_PORT_OUTSET1 = LCD_CS;
    35b0:	2280      	movs	r2, #128	; 0x80
    35b2:	03d2      	lsls	r2, r2, #15
    35b4:	4b0f      	ldr	r3, [pc, #60]	; (35f4 <drawChar+0x17c>)
    35b6:	601a      	str	r2, [r3, #0]
}
    35b8:	bc1c      	pop	{r2, r3, r4}
    35ba:	4690      	mov	r8, r2
    35bc:	4699      	mov	r9, r3
    35be:	46a2      	mov	sl, r4
    35c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35c2:	46c0      	nop			; (mov r8, r8)
    35c4:	200002e8 	.word	0x200002e8
    35c8:	200002ea 	.word	0x200002ea
    35cc:	200003f8 	.word	0x200003f8
    35d0:	41004494 	.word	0x41004494
    35d4:	20000b78 	.word	0x20000b78
    35d8:	00003f91 	.word	0x00003f91
    35dc:	000065cc 	.word	0x000065cc
    35e0:	200030fe 	.word	0x200030fe
    35e4:	200030f8 	.word	0x200030f8
    35e8:	000040c9 	.word	0x000040c9
    35ec:	200030fa 	.word	0x200030fa
    35f0:	200030fc 	.word	0x200030fc
    35f4:	41004498 	.word	0x41004498

000035f8 <blinkCursor>:
*/
	
}

void blinkCursor(void)
{
    35f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35fa:	46d6      	mov	lr, sl
    35fc:	464f      	mov	r7, r9
    35fe:	4646      	mov	r6, r8
    3600:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    3602:	4b47      	ldr	r3, [pc, #284]	; (3720 <blinkCursor+0x128>)
    3604:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    3606:	4a47      	ldr	r2, [pc, #284]	; (3724 <blinkCursor+0x12c>)
    3608:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    360a:	005a      	lsls	r2, r3, #1
    360c:	18d2      	adds	r2, r2, r3
    360e:	00d2      	lsls	r2, r2, #3
    3610:	4845      	ldr	r0, [pc, #276]	; (3728 <blinkCursor+0x130>)
    3612:	1882      	adds	r2, r0, r2
    3614:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    3616:	0098      	lsls	r0, r3, #2
    3618:	181b      	adds	r3, r3, r0
    361a:	005b      	lsls	r3, r3, #1
    361c:	b298      	uxth	r0, r3
    361e:	2114      	movs	r1, #20
    3620:	4369      	muls	r1, r5
    3622:	b289      	uxth	r1, r1
    3624:	000b      	movs	r3, r1
    3626:	3313      	adds	r3, #19
    3628:	b29b      	uxth	r3, r3
    362a:	0002      	movs	r2, r0
    362c:	3209      	adds	r2, #9
    362e:	b292      	uxth	r2, r2
    3630:	4d3e      	ldr	r5, [pc, #248]	; (372c <blinkCursor+0x134>)
    3632:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    3634:	2280      	movs	r2, #128	; 0x80
    3636:	03d2      	lsls	r2, r2, #15
    3638:	4b3d      	ldr	r3, [pc, #244]	; (3730 <blinkCursor+0x138>)
    363a:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    363c:	4b3d      	ldr	r3, [pc, #244]	; (3734 <blinkCursor+0x13c>)
    363e:	781b      	ldrb	r3, [r3, #0]
    3640:	2b00      	cmp	r3, #0
    3642:	d113      	bne.n	366c <blinkCursor+0x74>
    3644:	4a3c      	ldr	r2, [pc, #240]	; (3738 <blinkCursor+0x140>)
    3646:	00a5      	lsls	r5, r4, #2
    3648:	192d      	adds	r5, r5, r4
    364a:	00ab      	lsls	r3, r5, #2
    364c:	18ed      	adds	r5, r5, r3
    364e:	1955      	adds	r5, r2, r5
    3650:	3401      	adds	r4, #1
    3652:	00a3      	lsls	r3, r4, #2
    3654:	191c      	adds	r4, r3, r4
    3656:	00a3      	lsls	r3, r4, #2
    3658:	18e4      	adds	r4, r4, r3
    365a:	4692      	mov	sl, r2
    365c:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    365e:	4b37      	ldr	r3, [pc, #220]	; (373c <blinkCursor+0x144>)
    3660:	4699      	mov	r9, r3
    3662:	4b37      	ldr	r3, [pc, #220]	; (3740 <blinkCursor+0x148>)
    3664:	4698      	mov	r8, r3
    3666:	4f37      	ldr	r7, [pc, #220]	; (3744 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    3668:	4e37      	ldr	r6, [pc, #220]	; (3748 <blinkCursor+0x150>)
    366a:	e049      	b.n	3700 <blinkCursor+0x108>
    366c:	4a32      	ldr	r2, [pc, #200]	; (3738 <blinkCursor+0x140>)
    366e:	00a5      	lsls	r5, r4, #2
    3670:	192d      	adds	r5, r5, r4
    3672:	00ab      	lsls	r3, r5, #2
    3674:	18ed      	adds	r5, r5, r3
    3676:	1955      	adds	r5, r2, r5
    3678:	3401      	adds	r4, #1
    367a:	00a3      	lsls	r3, r4, #2
    367c:	191c      	adds	r4, r3, r4
    367e:	00a3      	lsls	r3, r4, #2
    3680:	18e4      	adds	r4, r4, r3
    3682:	4692      	mov	sl, r2
    3684:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    3686:	4b30      	ldr	r3, [pc, #192]	; (3748 <blinkCursor+0x150>)
    3688:	4699      	mov	r9, r3
    368a:	4b30      	ldr	r3, [pc, #192]	; (374c <blinkCursor+0x154>)
    368c:	4698      	mov	r8, r3
    368e:	4f2d      	ldr	r7, [pc, #180]	; (3744 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    3690:	4e2a      	ldr	r6, [pc, #168]	; (373c <blinkCursor+0x144>)
    3692:	e019      	b.n	36c8 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    3694:	464b      	mov	r3, r9
    3696:	8818      	ldrh	r0, [r3, #0]
    3698:	0200      	lsls	r0, r0, #8
    369a:	4643      	mov	r3, r8
    369c:	881b      	ldrh	r3, [r3, #0]
    369e:	4318      	orrs	r0, r3
    36a0:	b280      	uxth	r0, r0
    36a2:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    36a4:	3c01      	subs	r4, #1
    36a6:	d30c      	bcc.n	36c2 <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    36a8:	782b      	ldrb	r3, [r5, #0]
    36aa:	4123      	asrs	r3, r4
    36ac:	07db      	lsls	r3, r3, #31
    36ae:	d5f1      	bpl.n	3694 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    36b0:	8830      	ldrh	r0, [r6, #0]
    36b2:	0200      	lsls	r0, r0, #8
    36b4:	4b22      	ldr	r3, [pc, #136]	; (3740 <blinkCursor+0x148>)
    36b6:	881b      	ldrh	r3, [r3, #0]
    36b8:	4318      	orrs	r0, r3
    36ba:	b280      	uxth	r0, r0
    36bc:	4b21      	ldr	r3, [pc, #132]	; (3744 <blinkCursor+0x14c>)
    36be:	4798      	blx	r3
    36c0:	e7f0      	b.n	36a4 <blinkCursor+0xac>
    36c2:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    36c4:	4555      	cmp	r5, sl
    36c6:	d01d      	beq.n	3704 <blinkCursor+0x10c>
{
    36c8:	2407      	movs	r4, #7
    36ca:	e7ed      	b.n	36a8 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    36cc:	464b      	mov	r3, r9
    36ce:	8818      	ldrh	r0, [r3, #0]
    36d0:	0200      	lsls	r0, r0, #8
    36d2:	4643      	mov	r3, r8
    36d4:	881b      	ldrh	r3, [r3, #0]
    36d6:	4318      	orrs	r0, r3
    36d8:	b280      	uxth	r0, r0
    36da:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    36dc:	3c01      	subs	r4, #1
    36de:	d30c      	bcc.n	36fa <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    36e0:	782b      	ldrb	r3, [r5, #0]
    36e2:	4123      	asrs	r3, r4
    36e4:	07db      	lsls	r3, r3, #31
    36e6:	d5f1      	bpl.n	36cc <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    36e8:	8830      	ldrh	r0, [r6, #0]
    36ea:	0200      	lsls	r0, r0, #8
    36ec:	4b17      	ldr	r3, [pc, #92]	; (374c <blinkCursor+0x154>)
    36ee:	881b      	ldrh	r3, [r3, #0]
    36f0:	4318      	orrs	r0, r3
    36f2:	b280      	uxth	r0, r0
    36f4:	4b13      	ldr	r3, [pc, #76]	; (3744 <blinkCursor+0x14c>)
    36f6:	4798      	blx	r3
    36f8:	e7f0      	b.n	36dc <blinkCursor+0xe4>
    36fa:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    36fc:	4555      	cmp	r5, sl
    36fe:	d001      	beq.n	3704 <blinkCursor+0x10c>
{
    3700:	2407      	movs	r4, #7
    3702:	e7ed      	b.n	36e0 <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    3704:	2280      	movs	r2, #128	; 0x80
    3706:	03d2      	lsls	r2, r2, #15
    3708:	4b11      	ldr	r3, [pc, #68]	; (3750 <blinkCursor+0x158>)
    370a:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    370c:	4a09      	ldr	r2, [pc, #36]	; (3734 <blinkCursor+0x13c>)
    370e:	7813      	ldrb	r3, [r2, #0]
    3710:	2101      	movs	r1, #1
    3712:	404b      	eors	r3, r1
    3714:	7013      	strb	r3, [r2, #0]
	
}
    3716:	bc1c      	pop	{r2, r3, r4}
    3718:	4690      	mov	r8, r2
    371a:	4699      	mov	r9, r3
    371c:	46a2      	mov	sl, r4
    371e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3720:	200002e8 	.word	0x200002e8
    3724:	200002ea 	.word	0x200002ea
    3728:	200003f8 	.word	0x200003f8
    372c:	00003f91 	.word	0x00003f91
    3730:	41004494 	.word	0x41004494
    3734:	20000024 	.word	0x20000024
    3738:	000065cc 	.word	0x000065cc
    373c:	200030fe 	.word	0x200030fe
    3740:	200030f8 	.word	0x200030f8
    3744:	000040c9 	.word	0x000040c9
    3748:	200030fa 	.word	0x200030fa
    374c:	200030fc 	.word	0x200030fc
    3750:	41004498 	.word	0x41004498

00003754 <newLine>:
{
    3754:	b5f0      	push	{r4, r5, r6, r7, lr}
    3756:	46de      	mov	lr, fp
    3758:	4657      	mov	r7, sl
    375a:	464e      	mov	r6, r9
    375c:	4645      	mov	r5, r8
    375e:	b5e0      	push	{r5, r6, r7, lr}
    3760:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    3762:	4b2b      	ldr	r3, [pc, #172]	; (3810 <newLine+0xbc>)
    3764:	881b      	ldrh	r3, [r3, #0]
    3766:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    3768:	4b2a      	ldr	r3, [pc, #168]	; (3814 <newLine+0xc0>)
    376a:	881b      	ldrh	r3, [r3, #0]
    376c:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    376e:	2201      	movs	r2, #1
    3770:	4b29      	ldr	r3, [pc, #164]	; (3818 <newLine+0xc4>)
    3772:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    3774:	4b29      	ldr	r3, [pc, #164]	; (381c <newLine+0xc8>)
    3776:	4798      	blx	r3
    3778:	4d29      	ldr	r5, [pc, #164]	; (3820 <newLine+0xcc>)
    377a:	4f2a      	ldr	r7, [pc, #168]	; (3824 <newLine+0xd0>)
    377c:	4e2a      	ldr	r6, [pc, #168]	; (3828 <newLine+0xd4>)
    377e:	2318      	movs	r3, #24
    3780:	469c      	mov	ip, r3
    3782:	44ac      	add	ip, r5
    3784:	23f0      	movs	r3, #240	; 0xf0
    3786:	00db      	lsls	r3, r3, #3
    3788:	18ec      	adds	r4, r5, r3
{
    378a:	0031      	movs	r1, r6
    378c:	003a      	movs	r2, r7
    378e:	002b      	movs	r3, r5
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    3790:	7858      	ldrb	r0, [r3, #1]
    3792:	7018      	strb	r0, [r3, #0]
			consoleColors[i][j-1] = consoleColors[i][j];
    3794:	6850      	ldr	r0, [r2, #4]
    3796:	6010      	str	r0, [r2, #0]
			consoleSGR[i][j-1] = consoleSGR[i][j];
    3798:	7848      	ldrb	r0, [r1, #1]
    379a:	7008      	strb	r0, [r1, #0]
    379c:	3318      	adds	r3, #24
    379e:	3260      	adds	r2, #96	; 0x60
    37a0:	3118      	adds	r1, #24
		for(int i = 0 ; i < 80 ; i++)
    37a2:	42a3      	cmp	r3, r4
    37a4:	d1f4      	bne.n	3790 <newLine+0x3c>
    37a6:	3501      	adds	r5, #1
    37a8:	3704      	adds	r7, #4
    37aa:	3601      	adds	r6, #1
	for(int j = 1 ; j <= 24 ; j++)
    37ac:	4565      	cmp	r5, ip
    37ae:	d1e9      	bne.n	3784 <newLine+0x30>
    37b0:	4b1e      	ldr	r3, [pc, #120]	; (382c <newLine+0xd8>)
    37b2:	22f0      	movs	r2, #240	; 0xf0
    37b4:	00d2      	lsls	r2, r2, #3
    37b6:	1899      	adds	r1, r3, r2
		consoleDisplay[k][23] = 0x20;
    37b8:	2220      	movs	r2, #32
    37ba:	701a      	strb	r2, [r3, #0]
    37bc:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    37be:	428b      	cmp	r3, r1
    37c0:	d1fb      	bne.n	37ba <newLine+0x66>
    37c2:	2600      	movs	r6, #0
    37c4:	4b16      	ldr	r3, [pc, #88]	; (3820 <newLine+0xcc>)
    37c6:	469a      	mov	sl, r3
			xCharPos = i;
    37c8:	4b11      	ldr	r3, [pc, #68]	; (3810 <newLine+0xbc>)
    37ca:	4699      	mov	r9, r3
			yCharPos = j;
    37cc:	4b11      	ldr	r3, [pc, #68]	; (3814 <newLine+0xc0>)
    37ce:	4698      	mov	r8, r3
    37d0:	4653      	mov	r3, sl
    37d2:	18f5      	adds	r5, r6, r3
{
    37d4:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    37d6:	4f16      	ldr	r7, [pc, #88]	; (3830 <newLine+0xdc>)
			xCharPos = i;
    37d8:	464b      	mov	r3, r9
    37da:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    37dc:	4643      	mov	r3, r8
    37de:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    37e0:	7828      	ldrb	r0, [r5, #0]
    37e2:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    37e4:	3401      	adds	r4, #1
    37e6:	3518      	adds	r5, #24
    37e8:	2c50      	cmp	r4, #80	; 0x50
    37ea:	d1f5      	bne.n	37d8 <newLine+0x84>
	for(int j = 0 ; j < 24 ; j++)
    37ec:	3601      	adds	r6, #1
    37ee:	2e18      	cmp	r6, #24
    37f0:	d1ee      	bne.n	37d0 <newLine+0x7c>
	xCharPos = tempCursorx;
    37f2:	4b07      	ldr	r3, [pc, #28]	; (3810 <newLine+0xbc>)
    37f4:	465a      	mov	r2, fp
    37f6:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    37f8:	4b06      	ldr	r3, [pc, #24]	; (3814 <newLine+0xc0>)
    37fa:	466a      	mov	r2, sp
    37fc:	8892      	ldrh	r2, [r2, #4]
    37fe:	801a      	strh	r2, [r3, #0]
}
    3800:	b003      	add	sp, #12
    3802:	bc3c      	pop	{r2, r3, r4, r5}
    3804:	4690      	mov	r8, r2
    3806:	4699      	mov	r9, r3
    3808:	46a2      	mov	sl, r4
    380a:	46ab      	mov	fp, r5
    380c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    380e:	46c0      	nop			; (mov r8, r8)
    3810:	200002e8 	.word	0x200002e8
    3814:	200002ea 	.word	0x200002ea
    3818:	20000024 	.word	0x20000024
    381c:	000035f9 	.word	0x000035f9
    3820:	200003f8 	.word	0x200003f8
    3824:	200012f8 	.word	0x200012f8
    3828:	20000b78 	.word	0x20000b78
    382c:	2000040f 	.word	0x2000040f
    3830:	00003479 	.word	0x00003479

00003834 <writeString>:

void writeString(const char str[])
{
    3834:	b5f0      	push	{r4, r5, r6, r7, lr}
    3836:	46c6      	mov	lr, r8
    3838:	b500      	push	{lr}
    383a:	0005      	movs	r5, r0
	int length = strlen(str);
    383c:	4b0c      	ldr	r3, [pc, #48]	; (3870 <writeString+0x3c>)
    383e:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    3840:	2800      	cmp	r0, #0
    3842:	dd11      	ble.n	3868 <writeString+0x34>
    3844:	002c      	movs	r4, r5
    3846:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    3848:	4f0a      	ldr	r7, [pc, #40]	; (3874 <writeString+0x40>)
		if(xCharPos <= 80)
    384a:	4e0b      	ldr	r6, [pc, #44]	; (3878 <writeString+0x44>)
		xCharPos++;
    384c:	46b0      	mov	r8, r6
    384e:	e002      	b.n	3856 <writeString+0x22>
    3850:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    3852:	42ac      	cmp	r4, r5
    3854:	d008      	beq.n	3868 <writeString+0x34>
		drawChar(str[i]);
    3856:	7820      	ldrb	r0, [r4, #0]
    3858:	47b8      	blx	r7
		if(xCharPos <= 80)
    385a:	8833      	ldrh	r3, [r6, #0]
    385c:	2b50      	cmp	r3, #80	; 0x50
    385e:	d8f7      	bhi.n	3850 <writeString+0x1c>
		xCharPos++;
    3860:	3301      	adds	r3, #1
    3862:	4642      	mov	r2, r8
    3864:	8013      	strh	r3, [r2, #0]
    3866:	e7f3      	b.n	3850 <writeString+0x1c>
	}
}
    3868:	bc04      	pop	{r2}
    386a:	4690      	mov	r8, r2
    386c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    386e:	46c0      	nop			; (mov r8, r8)
    3870:	0000503b 	.word	0x0000503b
    3874:	00003479 	.word	0x00003479
    3878:	200002e8 	.word	0x200002e8

0000387c <nullifyConsole>:

void nullifyConsole(void)
{
    387c:	b510      	push	{r4, lr}
    387e:	4909      	ldr	r1, [pc, #36]	; (38a4 <nullifyConsole+0x28>)
    3880:	4809      	ldr	r0, [pc, #36]	; (38a8 <nullifyConsole+0x2c>)
    3882:	23f0      	movs	r3, #240	; 0xf0
    3884:	00db      	lsls	r3, r3, #3
    3886:	18cc      	adds	r4, r1, r3
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    3888:	2200      	movs	r2, #0
    388a:	e003      	b.n	3894 <nullifyConsole+0x18>
    388c:	3118      	adds	r1, #24
    388e:	3018      	adds	r0, #24
	for(int i = 0 ; i < 80 ; i++)
    3890:	42a1      	cmp	r1, r4
    3892:	d006      	beq.n	38a2 <nullifyConsole+0x26>
{
    3894:	2300      	movs	r3, #0
			consoleDisplay[i][j] = 0x00;
    3896:	54ca      	strb	r2, [r1, r3]
			consoleSGR[i][j] = 0x00;
    3898:	54c2      	strb	r2, [r0, r3]
		for(int j = 0 ; j < 24 ; j++)
    389a:	3301      	adds	r3, #1
    389c:	2b18      	cmp	r3, #24
    389e:	d1fa      	bne.n	3896 <nullifyConsole+0x1a>
    38a0:	e7f4      	b.n	388c <nullifyConsole+0x10>
		}
	}	
}
    38a2:	bd10      	pop	{r4, pc}
    38a4:	200003f8 	.word	0x200003f8
    38a8:	20000b78 	.word	0x20000b78

000038ac <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    38ac:	4b09      	ldr	r3, [pc, #36]	; (38d4 <scanCodesContains+0x28>)
    38ae:	681b      	ldr	r3, [r3, #0]
    38b0:	4298      	cmp	r0, r3
    38b2:	d00b      	beq.n	38cc <scanCodesContains+0x20>
    38b4:	4a07      	ldr	r2, [pc, #28]	; (38d4 <scanCodesContains+0x28>)
    38b6:	1d13      	adds	r3, r2, #4
    38b8:	3219      	adds	r2, #25
    38ba:	32ff      	adds	r2, #255	; 0xff
    38bc:	6819      	ldr	r1, [r3, #0]
    38be:	4281      	cmp	r1, r0
    38c0:	d006      	beq.n	38d0 <scanCodesContains+0x24>
    38c2:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    38c4:	4293      	cmp	r3, r2
    38c6:	d1f9      	bne.n	38bc <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    38c8:	2000      	movs	r0, #0
    38ca:	e002      	b.n	38d2 <scanCodesContains+0x26>
			return true;
    38cc:	2001      	movs	r0, #1
    38ce:	e000      	b.n	38d2 <scanCodesContains+0x26>
    38d0:	2001      	movs	r0, #1
}
    38d2:	4770      	bx	lr
    38d4:	20000050 	.word	0x20000050

000038d8 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    38d8:	4b09      	ldr	r3, [pc, #36]	; (3900 <keyDown+0x28>)
    38da:	781b      	ldrb	r3, [r3, #0]
    38dc:	4298      	cmp	r0, r3
    38de:	d00a      	beq.n	38f6 <keyDown+0x1e>
    38e0:	4907      	ldr	r1, [pc, #28]	; (3900 <keyDown+0x28>)
    38e2:	1c4b      	adds	r3, r1, #1
    38e4:	3114      	adds	r1, #20
    38e6:	781a      	ldrb	r2, [r3, #0]
    38e8:	4282      	cmp	r2, r0
    38ea:	d006      	beq.n	38fa <keyDown+0x22>
    38ec:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    38ee:	428b      	cmp	r3, r1
    38f0:	d1f9      	bne.n	38e6 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    38f2:	2000      	movs	r0, #0
}
    38f4:	4770      	bx	lr
			return true;
    38f6:	2001      	movs	r0, #1
    38f8:	e7fc      	b.n	38f4 <keyDown+0x1c>
    38fa:	2001      	movs	r0, #1
    38fc:	e7fa      	b.n	38f4 <keyDown+0x1c>
    38fe:	46c0      	nop			; (mov r8, r8)
    3900:	20000028 	.word	0x20000028

00003904 <printKeyboardBuffer>:
{
    3904:	b5f0      	push	{r4, r5, r6, r7, lr}
    3906:	46d6      	mov	lr, sl
    3908:	464f      	mov	r7, r9
    390a:	4646      	mov	r6, r8
    390c:	b5c0      	push	{r6, r7, lr}
    390e:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    3910:	4dca      	ldr	r5, [pc, #808]	; (3c3c <printKeyboardBuffer+0x338>)
    3912:	2246      	movs	r2, #70	; 0x46
    3914:	0029      	movs	r1, r5
    3916:	a83a      	add	r0, sp, #232	; 0xe8
    3918:	4cc9      	ldr	r4, [pc, #804]	; (3c40 <printKeyboardBuffer+0x33c>)
    391a:	47a0      	blx	r4
	unsigned char shiftCase[] =
    391c:	0029      	movs	r1, r5
    391e:	3148      	adds	r1, #72	; 0x48
    3920:	2246      	movs	r2, #70	; 0x46
    3922:	a828      	add	r0, sp, #160	; 0xa0
    3924:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    3926:	4dc7      	ldr	r5, [pc, #796]	; (3c44 <printKeyboardBuffer+0x340>)
    3928:	0029      	movs	r1, r5
    392a:	3110      	adds	r1, #16
    392c:	2246      	movs	r2, #70	; 0x46
    392e:	a816      	add	r0, sp, #88	; 0x58
    3930:	47a0      	blx	r4
	unsigned char controlCase[] =
    3932:	0029      	movs	r1, r5
    3934:	3158      	adds	r1, #88	; 0x58
    3936:	2246      	movs	r2, #70	; 0x46
    3938:	a804      	add	r0, sp, #16
    393a:	47a0      	blx	r4
    393c:	4fc2      	ldr	r7, [pc, #776]	; (3c48 <printKeyboardBuffer+0x344>)
    393e:	003c      	movs	r4, r7
    3940:	3414      	adds	r4, #20
    3942:	003d      	movs	r5, r7
	bool controled = false;
    3944:	2300      	movs	r3, #0
    3946:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    3948:	9302      	str	r3, [sp, #8]
			controled = true;
    394a:	2201      	movs	r2, #1
    394c:	e004      	b.n	3958 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    394e:	2916      	cmp	r1, #22
    3950:	d011      	beq.n	3976 <printKeyboardBuffer+0x72>
    3952:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    3954:	42a5      	cmp	r5, r4
    3956:	d010      	beq.n	397a <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    3958:	7829      	ldrb	r1, [r5, #0]
    395a:	000b      	movs	r3, r1
    395c:	3b0d      	subs	r3, #13
    395e:	425e      	negs	r6, r3
    3960:	415e      	adcs	r6, r3
    3962:	46b4      	mov	ip, r6
    3964:	0008      	movs	r0, r1
    3966:	3831      	subs	r0, #49	; 0x31
    3968:	4243      	negs	r3, r0
    396a:	4143      	adcs	r3, r0
    396c:	4660      	mov	r0, ip
    396e:	4318      	orrs	r0, r3
    3970:	d0ed      	beq.n	394e <printKeyboardBuffer+0x4a>
			shifted = true;
    3972:	9002      	str	r0, [sp, #8]
    3974:	e7eb      	b.n	394e <printKeyboardBuffer+0x4a>
			controled = true;
    3976:	9203      	str	r2, [sp, #12]
    3978:	e7eb      	b.n	3952 <printKeyboardBuffer+0x4e>
    397a:	4eb4      	ldr	r6, [pc, #720]	; (3c4c <printKeyboardBuffer+0x348>)
	for(int i=0; i<20; i++)
    397c:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    397e:	4bb4      	ldr	r3, [pc, #720]	; (3c50 <printKeyboardBuffer+0x34c>)
    3980:	469a      	mov	sl, r3
    3982:	e00b      	b.n	399c <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    3984:	301b      	adds	r0, #27
    3986:	4bb3      	ldr	r3, [pc, #716]	; (3c54 <printKeyboardBuffer+0x350>)
    3988:	4798      	blx	r3
				if(localEcho)
    398a:	4bb3      	ldr	r3, [pc, #716]	; (3c58 <printKeyboardBuffer+0x354>)
    398c:	781b      	ldrb	r3, [r3, #0]
    398e:	2b00      	cmp	r3, #0
    3990:	d14a      	bne.n	3a28 <printKeyboardBuffer+0x124>
    3992:	3401      	adds	r4, #1
    3994:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    3996:	42ac      	cmp	r4, r5
    3998:	d100      	bne.n	399c <printKeyboardBuffer+0x98>
    399a:	e144      	b.n	3c26 <printKeyboardBuffer+0x322>
    399c:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    399e:	7823      	ldrb	r3, [r4, #0]
    39a0:	4698      	mov	r8, r3
    39a2:	0018      	movs	r0, r3
    39a4:	47d0      	blx	sl
    39a6:	2800      	cmp	r0, #0
    39a8:	d1f3      	bne.n	3992 <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    39aa:	4643      	mov	r3, r8
    39ac:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    39ae:	4643      	mov	r3, r8
    39b0:	2b00      	cmp	r3, #0
    39b2:	d0e7      	beq.n	3984 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    39b4:	4643      	mov	r3, r8
    39b6:	2b01      	cmp	r3, #1
    39b8:	d0eb      	beq.n	3992 <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    39ba:	2b43      	cmp	r3, #67	; 0x43
    39bc:	d03a      	beq.n	3a34 <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    39be:	4643      	mov	r3, r8
    39c0:	2b3a      	cmp	r3, #58	; 0x3a
    39c2:	d03f      	beq.n	3a44 <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    39c4:	4643      	mov	r3, r8
    39c6:	2b0c      	cmp	r3, #12
    39c8:	d078      	beq.n	3abc <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    39ca:	4643      	mov	r3, r8
    39cc:	2b03      	cmp	r3, #3
    39ce:	d07b      	beq.n	3ac8 <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    39d0:	4643      	mov	r3, r8
    39d2:	2b23      	cmp	r3, #35	; 0x23
    39d4:	d07e      	beq.n	3ad4 <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    39d6:	4643      	mov	r3, r8
    39d8:	2b2d      	cmp	r3, #45	; 0x2d
    39da:	d100      	bne.n	39de <printKeyboardBuffer+0xda>
    39dc:	e097      	b.n	3b0e <printKeyboardBuffer+0x20a>
			else if(scanCodeBuffer[i]  == 55)	//up
    39de:	4643      	mov	r3, r8
    39e0:	2b37      	cmp	r3, #55	; 0x37
    39e2:	d100      	bne.n	39e6 <printKeyboardBuffer+0xe2>
    39e4:	e0b0      	b.n	3b48 <printKeyboardBuffer+0x244>
			else if(scanCodeBuffer[i]  == 65)	//right
    39e6:	4643      	mov	r3, r8
    39e8:	2b41      	cmp	r3, #65	; 0x41
    39ea:	d100      	bne.n	39ee <printKeyboardBuffer+0xea>
    39ec:	e0c9      	b.n	3b82 <printKeyboardBuffer+0x27e>
				if(controled)
    39ee:	9b03      	ldr	r3, [sp, #12]
    39f0:	2b00      	cmp	r3, #0
    39f2:	d000      	beq.n	39f6 <printKeyboardBuffer+0xf2>
    39f4:	e0e2      	b.n	3bbc <printKeyboardBuffer+0x2b8>
				else if(capsLock)
    39f6:	4b99      	ldr	r3, [pc, #612]	; (3c5c <printKeyboardBuffer+0x358>)
    39f8:	781b      	ldrb	r3, [r3, #0]
    39fa:	2b00      	cmp	r3, #0
    39fc:	d000      	beq.n	3a00 <printKeyboardBuffer+0xfc>
    39fe:	e0f0      	b.n	3be2 <printKeyboardBuffer+0x2de>
				else if(shifted)
    3a00:	9b02      	ldr	r3, [sp, #8]
    3a02:	2b00      	cmp	r3, #0
    3a04:	d100      	bne.n	3a08 <printKeyboardBuffer+0x104>
    3a06:	e0fd      	b.n	3c04 <printKeyboardBuffer+0x300>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    3a08:	ab28      	add	r3, sp, #160	; 0xa0
    3a0a:	4642      	mov	r2, r8
    3a0c:	5c98      	ldrb	r0, [r3, r2]
    3a0e:	4b91      	ldr	r3, [pc, #580]	; (3c54 <printKeyboardBuffer+0x350>)
    3a10:	4798      	blx	r3
					if(localEcho)
    3a12:	4b91      	ldr	r3, [pc, #580]	; (3c58 <printKeyboardBuffer+0x354>)
    3a14:	781b      	ldrb	r3, [r3, #0]
    3a16:	2b00      	cmp	r3, #0
    3a18:	d0bb      	beq.n	3992 <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    3a1a:	9b01      	ldr	r3, [sp, #4]
    3a1c:	781b      	ldrb	r3, [r3, #0]
    3a1e:	aa28      	add	r2, sp, #160	; 0xa0
    3a20:	5cd0      	ldrb	r0, [r2, r3]
    3a22:	4b8f      	ldr	r3, [pc, #572]	; (3c60 <printKeyboardBuffer+0x35c>)
    3a24:	4798      	blx	r3
    3a26:	e7b4      	b.n	3992 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    3a28:	4b8e      	ldr	r3, [pc, #568]	; (3c64 <printKeyboardBuffer+0x360>)
    3a2a:	6818      	ldr	r0, [r3, #0]
    3a2c:	211b      	movs	r1, #27
    3a2e:	4b8e      	ldr	r3, [pc, #568]	; (3c68 <printKeyboardBuffer+0x364>)
    3a30:	4798      	blx	r3
    3a32:	e7ae      	b.n	3992 <printKeyboardBuffer+0x8e>
				if(breakEnable)
    3a34:	4b8d      	ldr	r3, [pc, #564]	; (3c6c <printKeyboardBuffer+0x368>)
    3a36:	781b      	ldrb	r3, [r3, #0]
    3a38:	2b00      	cmp	r3, #0
    3a3a:	d0aa      	beq.n	3992 <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    3a3c:	2000      	movs	r0, #0
    3a3e:	4b85      	ldr	r3, [pc, #532]	; (3c54 <printKeyboardBuffer+0x350>)
    3a40:	4798      	blx	r3
    3a42:	e7a6      	b.n	3992 <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    3a44:	4b8a      	ldr	r3, [pc, #552]	; (3c70 <printKeyboardBuffer+0x36c>)
    3a46:	681b      	ldr	r3, [r3, #0]
    3a48:	2b01      	cmp	r3, #1
    3a4a:	d014      	beq.n	3a76 <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    3a4c:	4b88      	ldr	r3, [pc, #544]	; (3c70 <printKeyboardBuffer+0x36c>)
    3a4e:	681b      	ldr	r3, [r3, #0]
    3a50:	2b02      	cmp	r3, #2
    3a52:	d026      	beq.n	3aa2 <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    3a54:	4b86      	ldr	r3, [pc, #536]	; (3c70 <printKeyboardBuffer+0x36c>)
    3a56:	681b      	ldr	r3, [r3, #0]
    3a58:	2b03      	cmp	r3, #3
    3a5a:	d19a      	bne.n	3992 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    3a5c:	200d      	movs	r0, #13
    3a5e:	4b7d      	ldr	r3, [pc, #500]	; (3c54 <printKeyboardBuffer+0x350>)
    3a60:	4798      	blx	r3
					if(localEcho)
    3a62:	4b7d      	ldr	r3, [pc, #500]	; (3c58 <printKeyboardBuffer+0x354>)
    3a64:	781b      	ldrb	r3, [r3, #0]
    3a66:	2b00      	cmp	r3, #0
    3a68:	d093      	beq.n	3992 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    3a6a:	4b7e      	ldr	r3, [pc, #504]	; (3c64 <printKeyboardBuffer+0x360>)
    3a6c:	6818      	ldr	r0, [r3, #0]
    3a6e:	210d      	movs	r1, #13
    3a70:	4b7d      	ldr	r3, [pc, #500]	; (3c68 <printKeyboardBuffer+0x364>)
    3a72:	4798      	blx	r3
    3a74:	e78d      	b.n	3992 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    3a76:	200d      	movs	r0, #13
    3a78:	4b76      	ldr	r3, [pc, #472]	; (3c54 <printKeyboardBuffer+0x350>)
    3a7a:	4698      	mov	r8, r3
    3a7c:	4798      	blx	r3
					sendChar(0x0A);
    3a7e:	200a      	movs	r0, #10
    3a80:	47c0      	blx	r8
					if(localEcho)
    3a82:	4b75      	ldr	r3, [pc, #468]	; (3c58 <printKeyboardBuffer+0x354>)
    3a84:	781b      	ldrb	r3, [r3, #0]
    3a86:	2b00      	cmp	r3, #0
    3a88:	d0e0      	beq.n	3a4c <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    3a8a:	4b76      	ldr	r3, [pc, #472]	; (3c64 <printKeyboardBuffer+0x360>)
    3a8c:	4699      	mov	r9, r3
    3a8e:	210d      	movs	r1, #13
    3a90:	6818      	ldr	r0, [r3, #0]
    3a92:	4b75      	ldr	r3, [pc, #468]	; (3c68 <printKeyboardBuffer+0x364>)
    3a94:	4698      	mov	r8, r3
    3a96:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    3a98:	464b      	mov	r3, r9
    3a9a:	6818      	ldr	r0, [r3, #0]
    3a9c:	210a      	movs	r1, #10
    3a9e:	47c0      	blx	r8
    3aa0:	e7d4      	b.n	3a4c <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    3aa2:	200a      	movs	r0, #10
    3aa4:	4b6b      	ldr	r3, [pc, #428]	; (3c54 <printKeyboardBuffer+0x350>)
    3aa6:	4798      	blx	r3
					if(localEcho)
    3aa8:	4b6b      	ldr	r3, [pc, #428]	; (3c58 <printKeyboardBuffer+0x354>)
    3aaa:	781b      	ldrb	r3, [r3, #0]
    3aac:	2b00      	cmp	r3, #0
    3aae:	d0d1      	beq.n	3a54 <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    3ab0:	4b6c      	ldr	r3, [pc, #432]	; (3c64 <printKeyboardBuffer+0x360>)
    3ab2:	6818      	ldr	r0, [r3, #0]
    3ab4:	210a      	movs	r1, #10
    3ab6:	4b6c      	ldr	r3, [pc, #432]	; (3c68 <printKeyboardBuffer+0x364>)
    3ab8:	4798      	blx	r3
    3aba:	e7cb      	b.n	3a54 <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    3abc:	4a67      	ldr	r2, [pc, #412]	; (3c5c <printKeyboardBuffer+0x358>)
    3abe:	7813      	ldrb	r3, [r2, #0]
    3ac0:	2101      	movs	r1, #1
    3ac2:	404b      	eors	r3, r1
    3ac4:	7013      	strb	r3, [r2, #0]
    3ac6:	e764      	b.n	3992 <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    3ac8:	4a6a      	ldr	r2, [pc, #424]	; (3c74 <printKeyboardBuffer+0x370>)
    3aca:	7813      	ldrb	r3, [r2, #0]
    3acc:	2101      	movs	r1, #1
    3ace:	404b      	eors	r3, r1
    3ad0:	7013      	strb	r3, [r2, #0]
    3ad2:	e75e      	b.n	3992 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3ad4:	201b      	movs	r0, #27
    3ad6:	4b5f      	ldr	r3, [pc, #380]	; (3c54 <printKeyboardBuffer+0x350>)
    3ad8:	4698      	mov	r8, r3
    3ada:	4798      	blx	r3
				sendChar(0x5B);
    3adc:	205b      	movs	r0, #91	; 0x5b
    3ade:	47c0      	blx	r8
				sendChar(0x44);
    3ae0:	2044      	movs	r0, #68	; 0x44
    3ae2:	47c0      	blx	r8
				if(localEcho)
    3ae4:	4b5c      	ldr	r3, [pc, #368]	; (3c58 <printKeyboardBuffer+0x354>)
    3ae6:	781b      	ldrb	r3, [r3, #0]
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d100      	bne.n	3aee <printKeyboardBuffer+0x1ea>
    3aec:	e751      	b.n	3992 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3aee:	4b5d      	ldr	r3, [pc, #372]	; (3c64 <printKeyboardBuffer+0x360>)
    3af0:	4699      	mov	r9, r3
    3af2:	211b      	movs	r1, #27
    3af4:	6818      	ldr	r0, [r3, #0]
    3af6:	4b5c      	ldr	r3, [pc, #368]	; (3c68 <printKeyboardBuffer+0x364>)
    3af8:	4698      	mov	r8, r3
    3afa:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3afc:	215b      	movs	r1, #91	; 0x5b
    3afe:	464b      	mov	r3, r9
    3b00:	6818      	ldr	r0, [r3, #0]
    3b02:	47c0      	blx	r8
					ring_put(ouroboros, 0x44);
    3b04:	464b      	mov	r3, r9
    3b06:	6818      	ldr	r0, [r3, #0]
    3b08:	2144      	movs	r1, #68	; 0x44
    3b0a:	47c0      	blx	r8
    3b0c:	e741      	b.n	3992 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3b0e:	201b      	movs	r0, #27
    3b10:	4b50      	ldr	r3, [pc, #320]	; (3c54 <printKeyboardBuffer+0x350>)
    3b12:	4698      	mov	r8, r3
    3b14:	4798      	blx	r3
				sendChar(0x5B);
    3b16:	205b      	movs	r0, #91	; 0x5b
    3b18:	47c0      	blx	r8
				sendChar(0x42);
    3b1a:	2042      	movs	r0, #66	; 0x42
    3b1c:	47c0      	blx	r8
				if(localEcho)
    3b1e:	4b4e      	ldr	r3, [pc, #312]	; (3c58 <printKeyboardBuffer+0x354>)
    3b20:	781b      	ldrb	r3, [r3, #0]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d100      	bne.n	3b28 <printKeyboardBuffer+0x224>
    3b26:	e734      	b.n	3992 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3b28:	4b4e      	ldr	r3, [pc, #312]	; (3c64 <printKeyboardBuffer+0x360>)
    3b2a:	4699      	mov	r9, r3
    3b2c:	211b      	movs	r1, #27
    3b2e:	6818      	ldr	r0, [r3, #0]
    3b30:	4b4d      	ldr	r3, [pc, #308]	; (3c68 <printKeyboardBuffer+0x364>)
    3b32:	4698      	mov	r8, r3
    3b34:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3b36:	215b      	movs	r1, #91	; 0x5b
    3b38:	464b      	mov	r3, r9
    3b3a:	6818      	ldr	r0, [r3, #0]
    3b3c:	47c0      	blx	r8
					ring_put(ouroboros, 0x42);
    3b3e:	464b      	mov	r3, r9
    3b40:	6818      	ldr	r0, [r3, #0]
    3b42:	2142      	movs	r1, #66	; 0x42
    3b44:	47c0      	blx	r8
    3b46:	e724      	b.n	3992 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3b48:	201b      	movs	r0, #27
    3b4a:	4b42      	ldr	r3, [pc, #264]	; (3c54 <printKeyboardBuffer+0x350>)
    3b4c:	4698      	mov	r8, r3
    3b4e:	4798      	blx	r3
				sendChar(0x5B);
    3b50:	205b      	movs	r0, #91	; 0x5b
    3b52:	47c0      	blx	r8
				sendChar(0x41);
    3b54:	2041      	movs	r0, #65	; 0x41
    3b56:	47c0      	blx	r8
				if(localEcho)
    3b58:	4b3f      	ldr	r3, [pc, #252]	; (3c58 <printKeyboardBuffer+0x354>)
    3b5a:	781b      	ldrb	r3, [r3, #0]
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d100      	bne.n	3b62 <printKeyboardBuffer+0x25e>
    3b60:	e717      	b.n	3992 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3b62:	4b40      	ldr	r3, [pc, #256]	; (3c64 <printKeyboardBuffer+0x360>)
    3b64:	4699      	mov	r9, r3
    3b66:	211b      	movs	r1, #27
    3b68:	6818      	ldr	r0, [r3, #0]
    3b6a:	4b3f      	ldr	r3, [pc, #252]	; (3c68 <printKeyboardBuffer+0x364>)
    3b6c:	4698      	mov	r8, r3
    3b6e:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3b70:	215b      	movs	r1, #91	; 0x5b
    3b72:	464b      	mov	r3, r9
    3b74:	6818      	ldr	r0, [r3, #0]
    3b76:	47c0      	blx	r8
					ring_put(ouroboros, 0x41);
    3b78:	464b      	mov	r3, r9
    3b7a:	6818      	ldr	r0, [r3, #0]
    3b7c:	2141      	movs	r1, #65	; 0x41
    3b7e:	47c0      	blx	r8
    3b80:	e707      	b.n	3992 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3b82:	201b      	movs	r0, #27
    3b84:	4b33      	ldr	r3, [pc, #204]	; (3c54 <printKeyboardBuffer+0x350>)
    3b86:	4698      	mov	r8, r3
    3b88:	4798      	blx	r3
				sendChar(0x5B);
    3b8a:	205b      	movs	r0, #91	; 0x5b
    3b8c:	47c0      	blx	r8
				sendChar(0x43);
    3b8e:	2043      	movs	r0, #67	; 0x43
    3b90:	47c0      	blx	r8
				if(localEcho)
    3b92:	4b31      	ldr	r3, [pc, #196]	; (3c58 <printKeyboardBuffer+0x354>)
    3b94:	781b      	ldrb	r3, [r3, #0]
    3b96:	2b00      	cmp	r3, #0
    3b98:	d100      	bne.n	3b9c <printKeyboardBuffer+0x298>
    3b9a:	e6fa      	b.n	3992 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3b9c:	4b31      	ldr	r3, [pc, #196]	; (3c64 <printKeyboardBuffer+0x360>)
    3b9e:	4699      	mov	r9, r3
    3ba0:	211b      	movs	r1, #27
    3ba2:	6818      	ldr	r0, [r3, #0]
    3ba4:	4b30      	ldr	r3, [pc, #192]	; (3c68 <printKeyboardBuffer+0x364>)
    3ba6:	4698      	mov	r8, r3
    3ba8:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3baa:	215b      	movs	r1, #91	; 0x5b
    3bac:	464b      	mov	r3, r9
    3bae:	6818      	ldr	r0, [r3, #0]
    3bb0:	47c0      	blx	r8
					ring_put(ouroboros, 0x43);
    3bb2:	464b      	mov	r3, r9
    3bb4:	6818      	ldr	r0, [r3, #0]
    3bb6:	2143      	movs	r1, #67	; 0x43
    3bb8:	47c0      	blx	r8
    3bba:	e6ea      	b.n	3992 <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    3bbc:	ab04      	add	r3, sp, #16
    3bbe:	4642      	mov	r2, r8
    3bc0:	5c98      	ldrb	r0, [r3, r2]
    3bc2:	4b24      	ldr	r3, [pc, #144]	; (3c54 <printKeyboardBuffer+0x350>)
    3bc4:	4798      	blx	r3
					if(localEcho)
    3bc6:	4b24      	ldr	r3, [pc, #144]	; (3c58 <printKeyboardBuffer+0x354>)
    3bc8:	781b      	ldrb	r3, [r3, #0]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d100      	bne.n	3bd0 <printKeyboardBuffer+0x2cc>
    3bce:	e6e0      	b.n	3992 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    3bd0:	9b01      	ldr	r3, [sp, #4]
    3bd2:	781b      	ldrb	r3, [r3, #0]
    3bd4:	aa04      	add	r2, sp, #16
    3bd6:	5cd1      	ldrb	r1, [r2, r3]
    3bd8:	4b22      	ldr	r3, [pc, #136]	; (3c64 <printKeyboardBuffer+0x360>)
    3bda:	6818      	ldr	r0, [r3, #0]
    3bdc:	4b22      	ldr	r3, [pc, #136]	; (3c68 <printKeyboardBuffer+0x364>)
    3bde:	4798      	blx	r3
    3be0:	e6d7      	b.n	3992 <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    3be2:	ab16      	add	r3, sp, #88	; 0x58
    3be4:	4642      	mov	r2, r8
    3be6:	5c98      	ldrb	r0, [r3, r2]
    3be8:	4b1a      	ldr	r3, [pc, #104]	; (3c54 <printKeyboardBuffer+0x350>)
    3bea:	4798      	blx	r3
					if(localEcho)
    3bec:	4b1a      	ldr	r3, [pc, #104]	; (3c58 <printKeyboardBuffer+0x354>)
    3bee:	781b      	ldrb	r3, [r3, #0]
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	d100      	bne.n	3bf6 <printKeyboardBuffer+0x2f2>
    3bf4:	e6cd      	b.n	3992 <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    3bf6:	9b01      	ldr	r3, [sp, #4]
    3bf8:	781b      	ldrb	r3, [r3, #0]
    3bfa:	aa16      	add	r2, sp, #88	; 0x58
    3bfc:	5cd0      	ldrb	r0, [r2, r3]
    3bfe:	4b18      	ldr	r3, [pc, #96]	; (3c60 <printKeyboardBuffer+0x35c>)
    3c00:	4798      	blx	r3
    3c02:	e6c6      	b.n	3992 <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    3c04:	ab3a      	add	r3, sp, #232	; 0xe8
    3c06:	4642      	mov	r2, r8
    3c08:	5c98      	ldrb	r0, [r3, r2]
    3c0a:	4b12      	ldr	r3, [pc, #72]	; (3c54 <printKeyboardBuffer+0x350>)
    3c0c:	4798      	blx	r3
					if(localEcho)
    3c0e:	4b12      	ldr	r3, [pc, #72]	; (3c58 <printKeyboardBuffer+0x354>)
    3c10:	781b      	ldrb	r3, [r3, #0]
    3c12:	2b00      	cmp	r3, #0
    3c14:	d100      	bne.n	3c18 <printKeyboardBuffer+0x314>
    3c16:	e6bc      	b.n	3992 <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    3c18:	9b01      	ldr	r3, [sp, #4]
    3c1a:	781b      	ldrb	r3, [r3, #0]
    3c1c:	aa3a      	add	r2, sp, #232	; 0xe8
    3c1e:	5cd0      	ldrb	r0, [r2, r3]
    3c20:	4b0f      	ldr	r3, [pc, #60]	; (3c60 <printKeyboardBuffer+0x35c>)
    3c22:	4798      	blx	r3
    3c24:	e6b5      	b.n	3992 <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    3c26:	23ff      	movs	r3, #255	; 0xff
    3c28:	703b      	strb	r3, [r7, #0]
    3c2a:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    3c2c:	42bc      	cmp	r4, r7
    3c2e:	d1fb      	bne.n	3c28 <printKeyboardBuffer+0x324>
}
    3c30:	b04c      	add	sp, #304	; 0x130
    3c32:	bc1c      	pop	{r2, r3, r4}
    3c34:	4690      	mov	r8, r2
    3c36:	4699      	mov	r9, r3
    3c38:	46a2      	mov	sl, r4
    3c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c3c:	00007ecc 	.word	0x00007ecc
    3c40:	00004bed 	.word	0x00004bed
    3c44:	00007f4c 	.word	0x00007f4c
    3c48:	2000003c 	.word	0x2000003c
    3c4c:	20000028 	.word	0x20000028
    3c50:	000038d9 	.word	0x000038d9
    3c54:	00001a85 	.word	0x00001a85
    3c58:	20000190 	.word	0x20000190
    3c5c:	20000365 	.word	0x20000365
    3c60:	000016e5 	.word	0x000016e5
    3c64:	20000394 	.word	0x20000394
    3c68:	00000141 	.word	0x00000141
    3c6c:	200002ec 	.word	0x200002ec
    3c70:	2000018c 	.word	0x2000018c
    3c74:	2000038b 	.word	0x2000038b

00003c78 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    3c78:	b510      	push	{r4, lr}
    3c7a:	4b07      	ldr	r3, [pc, #28]	; (3c98 <removeFromKeyDown+0x20>)
    3c7c:	0019      	movs	r1, r3
    3c7e:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    3c80:	24ff      	movs	r4, #255	; 0xff
    3c82:	e002      	b.n	3c8a <removeFromKeyDown+0x12>
    3c84:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    3c86:	428b      	cmp	r3, r1
    3c88:	d004      	beq.n	3c94 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    3c8a:	781a      	ldrb	r2, [r3, #0]
    3c8c:	4282      	cmp	r2, r0
    3c8e:	d1f9      	bne.n	3c84 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    3c90:	701c      	strb	r4, [r3, #0]
    3c92:	e7f7      	b.n	3c84 <removeFromKeyDown+0xc>
		}
	}
}
    3c94:	bd10      	pop	{r4, pc}
    3c96:	46c0      	nop			; (mov r8, r8)
    3c98:	20000028 	.word	0x20000028

00003c9c <readKeyboard>:
{
    3c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c9e:	46de      	mov	lr, fp
    3ca0:	4657      	mov	r7, sl
    3ca2:	464e      	mov	r6, r9
    3ca4:	4645      	mov	r5, r8
    3ca6:	b5e0      	push	{r5, r6, r7, lr}
    3ca8:	b083      	sub	sp, #12
    3caa:	4e6d      	ldr	r6, [pc, #436]	; (3e60 <readKeyboard+0x1c4>)
    3cac:	0031      	movs	r1, r6
    3cae:	3119      	adds	r1, #25
    3cb0:	31ff      	adds	r1, #255	; 0xff
    3cb2:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    3cb4:	22ff      	movs	r2, #255	; 0xff
    3cb6:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    3cb8:	428b      	cmp	r3, r1
    3cba:	d1fc      	bne.n	3cb6 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    3cbc:	4a69      	ldr	r2, [pc, #420]	; (3e64 <readKeyboard+0x1c8>)
    3cbe:	6a91      	ldr	r1, [r2, #40]	; 0x28
    3cc0:	2380      	movs	r3, #128	; 0x80
    3cc2:	03db      	lsls	r3, r3, #15
    3cc4:	430b      	orrs	r3, r1
    3cc6:	6293      	str	r3, [r2, #40]	; 0x28
    3cc8:	4c67      	ldr	r4, [pc, #412]	; (3e68 <readKeyboard+0x1cc>)
    3cca:	341c      	adds	r4, #28
    3ccc:	4b66      	ldr	r3, [pc, #408]	; (3e68 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    3cce:	4867      	ldr	r0, [pc, #412]	; (3e6c <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    3cd0:	4967      	ldr	r1, [pc, #412]	; (3e70 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    3cd2:	681a      	ldr	r2, [r3, #0]
    3cd4:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3cd6:	cb04      	ldmia	r3!, {r2}
    3cd8:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    3cda:	42a3      	cmp	r3, r4
    3cdc:	d1f9      	bne.n	3cd2 <readKeyboard+0x36>
    3cde:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    3ce0:	4b64      	ldr	r3, [pc, #400]	; (3e74 <readKeyboard+0x1d8>)
    3ce2:	469c      	mov	ip, r3
    3ce4:	4f64      	ldr	r7, [pc, #400]	; (3e78 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3ce6:	4d65      	ldr	r5, [pc, #404]	; (3e7c <readKeyboard+0x1e0>)
    3ce8:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3cea:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    3cec:	4663      	mov	r3, ip
    3cee:	58d3      	ldr	r3, [r2, r3]
    3cf0:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3cf2:	5953      	ldr	r3, [r2, r5]
    3cf4:	4962      	ldr	r1, [pc, #392]	; (3e80 <readKeyboard+0x1e4>)
    3cf6:	4688      	mov	r8, r1
    3cf8:	4443      	add	r3, r8
    3cfa:	7819      	ldrb	r1, [r3, #0]
    3cfc:	4321      	orrs	r1, r4
    3cfe:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3d00:	7819      	ldrb	r1, [r3, #0]
    3d02:	4301      	orrs	r1, r0
    3d04:	7019      	strb	r1, [r3, #0]
    3d06:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    3d08:	2a28      	cmp	r2, #40	; 0x28
    3d0a:	d1ef      	bne.n	3cec <readKeyboard+0x50>
    3d0c:	4b56      	ldr	r3, [pc, #344]	; (3e68 <readKeyboard+0x1cc>)
    3d0e:	4699      	mov	r9, r3
    3d10:	2300      	movs	r3, #0
    3d12:	4698      	mov	r8, r3
    3d14:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    3d16:	4b5b      	ldr	r3, [pc, #364]	; (3e84 <readKeyboard+0x1e8>)
    3d18:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3d1a:	4d52      	ldr	r5, [pc, #328]	; (3e64 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    3d1c:	4b50      	ldr	r3, [pc, #320]	; (3e60 <readKeyboard+0x1c4>)
    3d1e:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    3d20:	4b53      	ldr	r3, [pc, #332]	; (3e70 <readKeyboard+0x1d4>)
    3d22:	469a      	mov	sl, r3
    3d24:	9601      	str	r6, [sp, #4]
    3d26:	464e      	mov	r6, r9
    3d28:	4647      	mov	r7, r8
    3d2a:	e015      	b.n	3d58 <readKeyboard+0xbc>
    3d2c:	3304      	adds	r3, #4
    3d2e:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    3d30:	42a3      	cmp	r3, r4
    3d32:	d008      	beq.n	3d46 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3d34:	6a28      	ldr	r0, [r5, #32]
    3d36:	681e      	ldr	r6, [r3, #0]
    3d38:	4206      	tst	r6, r0
    3d3a:	d0f7      	beq.n	3d2c <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    3d3c:	0090      	lsls	r0, r2, #2
    3d3e:	4666      	mov	r6, ip
    3d40:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    3d42:	3201      	adds	r2, #1
    3d44:	e7f2      	b.n	3d2c <readKeyboard+0x90>
    3d46:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3d48:	4649      	mov	r1, r9
    3d4a:	6809      	ldr	r1, [r1, #0]
    3d4c:	4650      	mov	r0, sl
    3d4e:	6001      	str	r1, [r0, #0]
    3d50:	3604      	adds	r6, #4
    3d52:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    3d54:	2f46      	cmp	r7, #70	; 0x46
    3d56:	d00a      	beq.n	3d6e <readKeyboard+0xd2>
    3d58:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    3d5a:	465b      	mov	r3, fp
    3d5c:	6831      	ldr	r1, [r6, #0]
    3d5e:	6019      	str	r1, [r3, #0]
    3d60:	4b44      	ldr	r3, [pc, #272]	; (3e74 <readKeyboard+0x1d8>)
    3d62:	4698      	mov	r8, r3
    3d64:	001c      	movs	r4, r3
    3d66:	3428      	adds	r4, #40	; 0x28
    3d68:	0039      	movs	r1, r7
    3d6a:	9600      	str	r6, [sp, #0]
    3d6c:	e7e2      	b.n	3d34 <readKeyboard+0x98>
    3d6e:	4647      	mov	r7, r8
    3d70:	9e01      	ldr	r6, [sp, #4]
    3d72:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    3d74:	4d3d      	ldr	r5, [pc, #244]	; (3e6c <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    3d76:	4c3e      	ldr	r4, [pc, #248]	; (3e70 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    3d78:	6808      	ldr	r0, [r1, #0]
    3d7a:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    3d7c:	c901      	ldmia	r1!, {r0}
    3d7e:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3d80:	4299      	cmp	r1, r3
    3d82:	d1f9      	bne.n	3d78 <readKeyboard+0xdc>
    3d84:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    3d86:	4b38      	ldr	r3, [pc, #224]	; (3e68 <readKeyboard+0x1cc>)
    3d88:	4699      	mov	r9, r3
    3d8a:	4b3b      	ldr	r3, [pc, #236]	; (3e78 <readKeyboard+0x1dc>)
    3d8c:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    3d8e:	4b3e      	ldr	r3, [pc, #248]	; (3e88 <readKeyboard+0x1ec>)
    3d90:	469c      	mov	ip, r3
    3d92:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    3d94:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    3d96:	4643      	mov	r3, r8
    3d98:	4648      	mov	r0, r9
    3d9a:	5808      	ldr	r0, [r1, r0]
    3d9c:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    3d9e:	4663      	mov	r3, ip
    3da0:	58cb      	ldr	r3, [r1, r3]
    3da2:	4837      	ldr	r0, [pc, #220]	; (3e80 <readKeyboard+0x1e4>)
    3da4:	4682      	mov	sl, r0
    3da6:	4453      	add	r3, sl
    3da8:	7818      	ldrb	r0, [r3, #0]
    3daa:	4328      	orrs	r0, r5
    3dac:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    3dae:	7818      	ldrb	r0, [r3, #0]
    3db0:	4320      	orrs	r0, r4
    3db2:	7018      	strb	r0, [r3, #0]
    3db4:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    3db6:	291c      	cmp	r1, #28
    3db8:	d1ed      	bne.n	3d96 <readKeyboard+0xfa>
    3dba:	2300      	movs	r3, #0
    3dbc:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    3dbe:	4b31      	ldr	r3, [pc, #196]	; (3e84 <readKeyboard+0x1e8>)
    3dc0:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    3dc2:	4d28      	ldr	r5, [pc, #160]	; (3e64 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    3dc4:	4b26      	ldr	r3, [pc, #152]	; (3e60 <readKeyboard+0x1c4>)
    3dc6:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    3dc8:	4b29      	ldr	r3, [pc, #164]	; (3e70 <readKeyboard+0x1d4>)
    3dca:	469a      	mov	sl, r3
    3dcc:	46b1      	mov	r9, r6
    3dce:	003e      	movs	r6, r7
    3dd0:	4667      	mov	r7, ip
    3dd2:	e015      	b.n	3e00 <readKeyboard+0x164>
    3dd4:	3104      	adds	r1, #4
    3dd6:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    3dd8:	42a3      	cmp	r3, r4
    3dda:	d008      	beq.n	3dee <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    3ddc:	6a28      	ldr	r0, [r5, #32]
    3dde:	680e      	ldr	r6, [r1, #0]
    3de0:	4206      	tst	r6, r0
    3de2:	d0f7      	beq.n	3dd4 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    3de4:	0090      	lsls	r0, r2, #2
    3de6:	4646      	mov	r6, r8
    3de8:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    3dea:	3201      	adds	r2, #1
    3dec:	e7f2      	b.n	3dd4 <readKeyboard+0x138>
    3dee:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    3df0:	4663      	mov	r3, ip
    3df2:	681b      	ldr	r3, [r3, #0]
    3df4:	4651      	mov	r1, sl
    3df6:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3df8:	3701      	adds	r7, #1
    3dfa:	3604      	adds	r6, #4
    3dfc:	2f0a      	cmp	r7, #10
    3dfe:	d009      	beq.n	3e14 <readKeyboard+0x178>
    3e00:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    3e02:	465b      	mov	r3, fp
    3e04:	6831      	ldr	r1, [r6, #0]
    3e06:	6019      	str	r1, [r3, #0]
    3e08:	003b      	movs	r3, r7
    3e0a:	003c      	movs	r4, r7
    3e0c:	3446      	adds	r4, #70	; 0x46
    3e0e:	4916      	ldr	r1, [pc, #88]	; (3e68 <readKeyboard+0x1cc>)
    3e10:	9600      	str	r6, [sp, #0]
    3e12:	e7e3      	b.n	3ddc <readKeyboard+0x140>
    3e14:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    3e16:	2a00      	cmp	r2, #0
    3e18:	dd08      	ble.n	3e2c <readKeyboard+0x190>
    3e1a:	4b1c      	ldr	r3, [pc, #112]	; (3e8c <readKeyboard+0x1f0>)
    3e1c:	0092      	lsls	r2, r2, #2
    3e1e:	4910      	ldr	r1, [pc, #64]	; (3e60 <readKeyboard+0x1c4>)
    3e20:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    3e22:	ce02      	ldmia	r6!, {r1}
    3e24:	7019      	strb	r1, [r3, #0]
    3e26:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    3e28:	42b2      	cmp	r2, r6
    3e2a:	d1fa      	bne.n	3e22 <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    3e2c:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    3e2e:	4d18      	ldr	r5, [pc, #96]	; (3e90 <readKeyboard+0x1f4>)
    3e30:	4e18      	ldr	r6, [pc, #96]	; (3e94 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    3e32:	4f19      	ldr	r7, [pc, #100]	; (3e98 <readKeyboard+0x1fc>)
    3e34:	e002      	b.n	3e3c <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    3e36:	3401      	adds	r4, #1
    3e38:	2c46      	cmp	r4, #70	; 0x46
    3e3a:	d00a      	beq.n	3e52 <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    3e3c:	0020      	movs	r0, r4
    3e3e:	47a8      	blx	r5
    3e40:	2800      	cmp	r0, #0
    3e42:	d0f8      	beq.n	3e36 <readKeyboard+0x19a>
    3e44:	0020      	movs	r0, r4
    3e46:	47b0      	blx	r6
    3e48:	2800      	cmp	r0, #0
    3e4a:	d1f4      	bne.n	3e36 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    3e4c:	0020      	movs	r0, r4
    3e4e:	47b8      	blx	r7
    3e50:	e7f1      	b.n	3e36 <readKeyboard+0x19a>
}
    3e52:	b003      	add	sp, #12
    3e54:	bc3c      	pop	{r2, r3, r4, r5}
    3e56:	4690      	mov	r8, r2
    3e58:	4699      	mov	r9, r3
    3e5a:	46a2      	mov	sl, r4
    3e5c:	46ab      	mov	fp, r5
    3e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e60:	20000050 	.word	0x20000050
    3e64:	41004400 	.word	0x41004400
    3e68:	00007fec 	.word	0x00007fec
    3e6c:	41004408 	.word	0x41004408
    3e70:	41004414 	.word	0x41004414
    3e74:	00008024 	.word	0x00008024
    3e78:	41004404 	.word	0x41004404
    3e7c:	0000804c 	.word	0x0000804c
    3e80:	41004440 	.word	0x41004440
    3e84:	41004418 	.word	0x41004418
    3e88:	00008008 	.word	0x00008008
    3e8c:	2000003c 	.word	0x2000003c
    3e90:	000038d9 	.word	0x000038d9
    3e94:	000038ad 	.word	0x000038ad
    3e98:	00003c79 	.word	0x00003c79

00003e9c <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    3e9c:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    3e9e:	094b      	lsrs	r3, r1, #5
    3ea0:	2407      	movs	r4, #7
    3ea2:	43a0      	bics	r0, r4
    3ea4:	4318      	orrs	r0, r3
    3ea6:	4b05      	ldr	r3, [pc, #20]	; (3ebc <setColorRGB+0x20>)
    3ea8:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    3eaa:	00c9      	lsls	r1, r1, #3
    3eac:	23e0      	movs	r3, #224	; 0xe0
    3eae:	4019      	ands	r1, r3
    3eb0:	08d2      	lsrs	r2, r2, #3
    3eb2:	430a      	orrs	r2, r1
    3eb4:	4b02      	ldr	r3, [pc, #8]	; (3ec0 <setColorRGB+0x24>)
    3eb6:	801a      	strh	r2, [r3, #0]
}
    3eb8:	bd10      	pop	{r4, pc}
    3eba:	46c0      	nop			; (mov r8, r8)
    3ebc:	200030fa 	.word	0x200030fa
    3ec0:	200030fc 	.word	0x200030fc

00003ec4 <setColorHex>:

void setColorHex(uint16_t color)
{
	fore_Color_High = (color >> 8);
    3ec4:	0a02      	lsrs	r2, r0, #8
    3ec6:	4b03      	ldr	r3, [pc, #12]	; (3ed4 <setColorHex+0x10>)
    3ec8:	801a      	strh	r2, [r3, #0]
	fore_Color_Low = (color & 0xFF);
    3eca:	23ff      	movs	r3, #255	; 0xff
    3ecc:	4018      	ands	r0, r3
    3ece:	4b02      	ldr	r3, [pc, #8]	; (3ed8 <setColorHex+0x14>)
    3ed0:	8018      	strh	r0, [r3, #0]
}
    3ed2:	4770      	bx	lr
    3ed4:	200030fa 	.word	0x200030fa
    3ed8:	200030fc 	.word	0x200030fc

00003edc <setBackColorRGB>:

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    3edc:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    3ede:	094b      	lsrs	r3, r1, #5
    3ee0:	2407      	movs	r4, #7
    3ee2:	43a0      	bics	r0, r4
    3ee4:	4318      	orrs	r0, r3
    3ee6:	4b05      	ldr	r3, [pc, #20]	; (3efc <setBackColorRGB+0x20>)
    3ee8:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    3eea:	00c9      	lsls	r1, r1, #3
    3eec:	23e0      	movs	r3, #224	; 0xe0
    3eee:	4019      	ands	r1, r3
    3ef0:	08d2      	lsrs	r2, r2, #3
    3ef2:	430a      	orrs	r2, r1
    3ef4:	4b02      	ldr	r3, [pc, #8]	; (3f00 <setBackColorRGB+0x24>)
    3ef6:	801a      	strh	r2, [r3, #0]
}
    3ef8:	bd10      	pop	{r4, pc}
    3efa:	46c0      	nop			; (mov r8, r8)
    3efc:	200030fe 	.word	0x200030fe
    3f00:	200030f8 	.word	0x200030f8

00003f04 <setBackColorHex>:

void setBackColorHex(uint16_t color)
{
	back_Color_High = (color >> 8);
    3f04:	0a02      	lsrs	r2, r0, #8
    3f06:	4b03      	ldr	r3, [pc, #12]	; (3f14 <setBackColorHex+0x10>)
    3f08:	801a      	strh	r2, [r3, #0]
	back_Color_Low = (color & 0xFF);
    3f0a:	23ff      	movs	r3, #255	; 0xff
    3f0c:	4018      	ands	r0, r3
    3f0e:	4b02      	ldr	r3, [pc, #8]	; (3f18 <setBackColorHex+0x14>)
    3f10:	8018      	strh	r0, [r3, #0]
}
    3f12:	4770      	bx	lr
    3f14:	200030fe 	.word	0x200030fe
    3f18:	200030f8 	.word	0x200030f8

00003f1c <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    3f1c:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3f1e:	4c19      	ldr	r4, [pc, #100]	; (3f84 <LCD_Fast_Fill+0x68>)
    3f20:	4b19      	ldr	r3, [pc, #100]	; (3f88 <LCD_Fast_Fill+0x6c>)
    3f22:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    3f24:	0200      	lsls	r0, r0, #8
    3f26:	4301      	orrs	r1, r0
    3f28:	4b18      	ldr	r3, [pc, #96]	; (3f8c <LCD_Fast_Fill+0x70>)
    3f2a:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    3f2c:	17d3      	asrs	r3, r2, #31
    3f2e:	260f      	movs	r6, #15
    3f30:	401e      	ands	r6, r3
    3f32:	18b6      	adds	r6, r6, r2
    3f34:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    3f36:	2500      	movs	r5, #0
    3f38:	2e00      	cmp	r6, #0
    3f3a:	dd0c      	ble.n	3f56 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    3f3c:	4c12      	ldr	r4, [pc, #72]	; (3f88 <LCD_Fast_Fill+0x6c>)
    3f3e:	2180      	movs	r1, #128	; 0x80
    3f40:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    3f42:	4812      	ldr	r0, [pc, #72]	; (3f8c <LCD_Fast_Fill+0x70>)
{
    3f44:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    3f46:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    3f48:	6001      	str	r1, [r0, #0]
    3f4a:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	d1fa      	bne.n	3f46 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    3f50:	3501      	adds	r5, #1
    3f52:	42ae      	cmp	r6, r5
    3f54:	d1f6      	bne.n	3f44 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    3f56:	0713      	lsls	r3, r2, #28
    3f58:	d013      	beq.n	3f82 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    3f5a:	17d3      	asrs	r3, r2, #31
    3f5c:	0f1b      	lsrs	r3, r3, #28
    3f5e:	18d2      	adds	r2, r2, r3
    3f60:	210f      	movs	r1, #15
    3f62:	4011      	ands	r1, r2
    3f64:	1ac9      	subs	r1, r1, r3
    3f66:	1c4b      	adds	r3, r1, #1
    3f68:	2b00      	cmp	r3, #0
    3f6a:	dd0a      	ble.n	3f82 <LCD_Fast_Fill+0x66>
    3f6c:	0019      	movs	r1, r3
    3f6e:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    3f70:	4c05      	ldr	r4, [pc, #20]	; (3f88 <LCD_Fast_Fill+0x6c>)
    3f72:	2280      	movs	r2, #128	; 0x80
    3f74:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    3f76:	4805      	ldr	r0, [pc, #20]	; (3f8c <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    3f78:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    3f7a:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    3f7c:	3301      	adds	r3, #1
    3f7e:	4299      	cmp	r1, r3
    3f80:	d1fa      	bne.n	3f78 <LCD_Fast_Fill+0x5c>
	}
}
    3f82:	bd70      	pop	{r4, r5, r6, pc}
    3f84:	0000ffff 	.word	0x0000ffff
    3f88:	41004494 	.word	0x41004494
    3f8c:	41004498 	.word	0x41004498

00003f90 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    3f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f92:	b083      	sub	sp, #12
    3f94:	0007      	movs	r7, r0
    3f96:	9100      	str	r1, [sp, #0]
    3f98:	0016      	movs	r6, r2
    3f9a:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    3f9c:	2100      	movs	r1, #0
    3f9e:	202a      	movs	r0, #42	; 0x2a
    3fa0:	4c17      	ldr	r4, [pc, #92]	; (4000 <setXY+0x70>)
    3fa2:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    3fa4:	0a38      	lsrs	r0, r7, #8
    3fa6:	4d17      	ldr	r5, [pc, #92]	; (4004 <setXY+0x74>)
    3fa8:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    3faa:	2101      	movs	r1, #1
    3fac:	202a      	movs	r0, #42	; 0x2a
    3fae:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    3fb0:	b2f8      	uxtb	r0, r7
    3fb2:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    3fb4:	2102      	movs	r1, #2
    3fb6:	202a      	movs	r0, #42	; 0x2a
    3fb8:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    3fba:	0a30      	lsrs	r0, r6, #8
    3fbc:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    3fbe:	2103      	movs	r1, #3
    3fc0:	202a      	movs	r0, #42	; 0x2a
    3fc2:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    3fc4:	b2f0      	uxtb	r0, r6
    3fc6:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    3fc8:	2100      	movs	r1, #0
    3fca:	202b      	movs	r0, #43	; 0x2b
    3fcc:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    3fce:	9e00      	ldr	r6, [sp, #0]
    3fd0:	0a30      	lsrs	r0, r6, #8
    3fd2:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    3fd4:	2101      	movs	r1, #1
    3fd6:	202b      	movs	r0, #43	; 0x2b
    3fd8:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    3fda:	b2f0      	uxtb	r0, r6
    3fdc:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    3fde:	2102      	movs	r1, #2
    3fe0:	202b      	movs	r0, #43	; 0x2b
    3fe2:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    3fe4:	9e01      	ldr	r6, [sp, #4]
    3fe6:	0a30      	lsrs	r0, r6, #8
    3fe8:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    3fea:	2103      	movs	r1, #3
    3fec:	202b      	movs	r0, #43	; 0x2b
    3fee:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    3ff0:	b2f0      	uxtb	r0, r6
    3ff2:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    3ff4:	2100      	movs	r1, #0
    3ff6:	202c      	movs	r0, #44	; 0x2c
    3ff8:	47a0      	blx	r4
}
    3ffa:	b003      	add	sp, #12
    3ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ffe:	46c0      	nop			; (mov r8, r8)
    4000:	00004135 	.word	0x00004135
    4004:	00004165 	.word	0x00004165

00004008 <fillRect>:
{
    4008:	b5f0      	push	{r4, r5, r6, r7, lr}
    400a:	46ce      	mov	lr, r9
    400c:	4647      	mov	r7, r8
    400e:	b580      	push	{r7, lr}
    4010:	b083      	sub	sp, #12
    4012:	0006      	movs	r6, r0
    4014:	4689      	mov	r9, r1
    4016:	0014      	movs	r4, r2
    4018:	001d      	movs	r5, r3
	if (x1>x2)
    401a:	4290      	cmp	r0, r2
    401c:	dd01      	ble.n	4022 <fillRect+0x1a>
		x1 = x2;
    401e:	0016      	movs	r6, r2
		x2 = temp;
    4020:	0004      	movs	r4, r0
	if (y1>y2)
    4022:	45a9      	cmp	r9, r5
    4024:	dd02      	ble.n	402c <fillRect+0x24>
    4026:	0033      	movs	r3, r6
		x1 = x2;
    4028:	0026      	movs	r6, r4
		x2 = temp;
    402a:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    402c:	2380      	movs	r3, #128	; 0x80
    402e:	03db      	lsls	r3, r3, #15
    4030:	4698      	mov	r8, r3
    4032:	4b11      	ldr	r3, [pc, #68]	; (4078 <fillRect+0x70>)
    4034:	4642      	mov	r2, r8
    4036:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    4038:	b2ab      	uxth	r3, r5
    403a:	b2a2      	uxth	r2, r4
    403c:	4649      	mov	r1, r9
    403e:	4668      	mov	r0, sp
    4040:	80c1      	strh	r1, [r0, #6]
    4042:	88c1      	ldrh	r1, [r0, #6]
    4044:	b2b0      	uxth	r0, r6
    4046:	4f0d      	ldr	r7, [pc, #52]	; (407c <fillRect+0x74>)
    4048:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    404a:	4f0d      	ldr	r7, [pc, #52]	; (4080 <fillRect+0x78>)
    404c:	2380      	movs	r3, #128	; 0x80
    404e:	041b      	lsls	r3, r3, #16
    4050:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    4052:	1ba4      	subs	r4, r4, r6
    4054:	3401      	adds	r4, #1
    4056:	464b      	mov	r3, r9
    4058:	1aea      	subs	r2, r5, r3
    405a:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    405c:	4362      	muls	r2, r4
    405e:	4b09      	ldr	r3, [pc, #36]	; (4084 <fillRect+0x7c>)
    4060:	8819      	ldrh	r1, [r3, #0]
    4062:	4b09      	ldr	r3, [pc, #36]	; (4088 <fillRect+0x80>)
    4064:	8818      	ldrh	r0, [r3, #0]
    4066:	4b09      	ldr	r3, [pc, #36]	; (408c <fillRect+0x84>)
    4068:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    406a:	4643      	mov	r3, r8
    406c:	603b      	str	r3, [r7, #0]
}
    406e:	b003      	add	sp, #12
    4070:	bc0c      	pop	{r2, r3}
    4072:	4690      	mov	r8, r2
    4074:	4699      	mov	r9, r3
    4076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4078:	41004494 	.word	0x41004494
    407c:	00003f91 	.word	0x00003f91
    4080:	41004498 	.word	0x41004498
    4084:	200030fc 	.word	0x200030fc
    4088:	200030fa 	.word	0x200030fa
    408c:	00003f1d 	.word	0x00003f1d

00004090 <clrXY>:
{
    4090:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    4092:	4b04      	ldr	r3, [pc, #16]	; (40a4 <clrXY+0x14>)
    4094:	881b      	ldrh	r3, [r3, #0]
    4096:	4a04      	ldr	r2, [pc, #16]	; (40a8 <clrXY+0x18>)
    4098:	8812      	ldrh	r2, [r2, #0]
    409a:	2100      	movs	r1, #0
    409c:	2000      	movs	r0, #0
    409e:	4c03      	ldr	r4, [pc, #12]	; (40ac <clrXY+0x1c>)
    40a0:	47a0      	blx	r4
}
    40a2:	bd10      	pop	{r4, pc}
    40a4:	2000016a 	.word	0x2000016a
    40a8:	20000168 	.word	0x20000168
    40ac:	00003f91 	.word	0x00003f91

000040b0 <clrScr>:
{
    40b0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    40b2:	2280      	movs	r2, #128	; 0x80
    40b4:	03d2      	lsls	r2, r2, #15
    40b6:	4b02      	ldr	r3, [pc, #8]	; (40c0 <clrScr+0x10>)
    40b8:	601a      	str	r2, [r3, #0]
	clrXY();
    40ba:	4b02      	ldr	r3, [pc, #8]	; (40c4 <clrScr+0x14>)
    40bc:	4798      	blx	r3
}
    40be:	bd10      	pop	{r4, pc}
    40c0:	41004494 	.word	0x41004494
    40c4:	00004091 	.word	0x00004091

000040c8 <setPixel>:

void setPixel(uint16_t color)
{
    40c8:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	//LCD_Write_DATA16((color<<8),(color&0xFF)); 
	LCD_Write_DATA16((color>>8),(color&0xFF));
    40ca:	b2c1      	uxtb	r1, r0
    40cc:	0a00      	lsrs	r0, r0, #8
    40ce:	4b01      	ldr	r3, [pc, #4]	; (40d4 <setPixel+0xc>)
    40d0:	4798      	blx	r3
}
    40d2:	bd10      	pop	{r4, pc}
    40d4:	0000414d 	.word	0x0000414d

000040d8 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    40d8:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    40da:	2300      	movs	r3, #0
    40dc:	4a06      	ldr	r2, [pc, #24]	; (40f8 <clearScreen+0x20>)
    40de:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    40e0:	4a06      	ldr	r2, [pc, #24]	; (40fc <clearScreen+0x24>)
    40e2:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    40e4:	4b06      	ldr	r3, [pc, #24]	; (4100 <clearScreen+0x28>)
    40e6:	881b      	ldrh	r3, [r3, #0]
    40e8:	4a06      	ldr	r2, [pc, #24]	; (4104 <clearScreen+0x2c>)
    40ea:	8812      	ldrh	r2, [r2, #0]
    40ec:	2100      	movs	r1, #0
    40ee:	2000      	movs	r0, #0
    40f0:	4c05      	ldr	r4, [pc, #20]	; (4108 <clearScreen+0x30>)
    40f2:	47a0      	blx	r4
}
    40f4:	bd10      	pop	{r4, pc}
    40f6:	46c0      	nop			; (mov r8, r8)
    40f8:	200030fa 	.word	0x200030fa
    40fc:	200030fc 	.word	0x200030fc
    4100:	20000168 	.word	0x20000168
    4104:	2000016a 	.word	0x2000016a
    4108:	00004009 	.word	0x00004009

0000410c <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    410c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    410e:	4c06      	ldr	r4, [pc, #24]	; (4128 <LCD_Write_Bus+0x1c>)
    4110:	4b06      	ldr	r3, [pc, #24]	; (412c <LCD_Write_Bus+0x20>)
    4112:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    4114:	0200      	lsls	r0, r0, #8
    4116:	4301      	orrs	r1, r0
    4118:	4b05      	ldr	r3, [pc, #20]	; (4130 <LCD_Write_Bus+0x24>)
    411a:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    411c:	2280      	movs	r2, #128	; 0x80
    411e:	0292      	lsls	r2, r2, #10
    4120:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    4122:	601a      	str	r2, [r3, #0]
}
    4124:	bd10      	pop	{r4, pc}
    4126:	46c0      	nop			; (mov r8, r8)
    4128:	41004494 	.word	0x41004494
    412c:	0000ffff 	.word	0x0000ffff
    4130:	41004498 	.word	0x41004498

00004134 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    4134:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    4136:	2280      	movs	r2, #128	; 0x80
    4138:	0412      	lsls	r2, r2, #16
    413a:	4b02      	ldr	r3, [pc, #8]	; (4144 <LCD_Write_COM16+0x10>)
    413c:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    413e:	4b02      	ldr	r3, [pc, #8]	; (4148 <LCD_Write_COM16+0x14>)
    4140:	4798      	blx	r3
}
    4142:	bd10      	pop	{r4, pc}
    4144:	41004494 	.word	0x41004494
    4148:	0000410d 	.word	0x0000410d

0000414c <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    414c:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    414e:	2280      	movs	r2, #128	; 0x80
    4150:	0412      	lsls	r2, r2, #16
    4152:	4b02      	ldr	r3, [pc, #8]	; (415c <LCD_Write_DATA16+0x10>)
    4154:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    4156:	4b02      	ldr	r3, [pc, #8]	; (4160 <LCD_Write_DATA16+0x14>)
    4158:	4798      	blx	r3
}
    415a:	bd10      	pop	{r4, pc}
    415c:	41004498 	.word	0x41004498
    4160:	0000410d 	.word	0x0000410d

00004164 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    4164:	b510      	push	{r4, lr}
    4166:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    4168:	2280      	movs	r2, #128	; 0x80
    416a:	0412      	lsls	r2, r2, #16
    416c:	4b02      	ldr	r3, [pc, #8]	; (4178 <LCD_Write_DATA8+0x14>)
    416e:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    4170:	2000      	movs	r0, #0
    4172:	4b02      	ldr	r3, [pc, #8]	; (417c <LCD_Write_DATA8+0x18>)
    4174:	4798      	blx	r3
}
    4176:	bd10      	pop	{r4, pc}
    4178:	41004498 	.word	0x41004498
    417c:	0000410d 	.word	0x0000410d

00004180 <InitLCD>:
{
    4180:	b5f0      	push	{r4, r5, r6, r7, lr}
    4182:	46c6      	mov	lr, r8
    4184:	b500      	push	{lr}
    4186:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    4188:	4b80      	ldr	r3, [pc, #512]	; (438c <InitLCD+0x20c>)
    418a:	4f81      	ldr	r7, [pc, #516]	; (4390 <InitLCD+0x210>)
    418c:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    418e:	2580      	movs	r5, #128	; 0x80
    4190:	05ed      	lsls	r5, r5, #23
    4192:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    4194:	2680      	movs	r6, #128	; 0x80
    4196:	03f6      	lsls	r6, r6, #15
    4198:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    419a:	2080      	movs	r0, #128	; 0x80
    419c:	0280      	lsls	r0, r0, #10
    419e:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    41a0:	2180      	movs	r1, #128	; 0x80
    41a2:	0409      	lsls	r1, r1, #16
    41a4:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    41a6:	2280      	movs	r2, #128	; 0x80
    41a8:	0252      	lsls	r2, r2, #9
    41aa:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    41ac:	4c79      	ldr	r4, [pc, #484]	; (4394 <InitLCD+0x214>)
    41ae:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    41b0:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    41b2:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    41b4:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    41b6:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    41b8:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    41ba:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    41bc:	4f76      	ldr	r7, [pc, #472]	; (4398 <InitLCD+0x218>)
    41be:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    41c0:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    41c2:	2005      	movs	r0, #5
    41c4:	4b75      	ldr	r3, [pc, #468]	; (439c <InitLCD+0x21c>)
    41c6:	4698      	mov	r8, r3
    41c8:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    41ca:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    41cc:	2005      	movs	r0, #5
    41ce:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    41d0:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    41d2:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    41d4:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    41d6:	4b6f      	ldr	r3, [pc, #444]	; (4394 <InitLCD+0x214>)
    41d8:	4698      	mov	r8, r3
    41da:	2580      	movs	r5, #128	; 0x80
    41dc:	042d      	lsls	r5, r5, #16
    41de:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    41e0:	4e6f      	ldr	r6, [pc, #444]	; (43a0 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    41e2:	4643      	mov	r3, r8
    41e4:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    41e6:	5da1      	ldrb	r1, [r4, r6]
    41e8:	4b6e      	ldr	r3, [pc, #440]	; (43a4 <InitLCD+0x224>)
    41ea:	5ce0      	ldrb	r0, [r4, r3]
    41ec:	4b6e      	ldr	r3, [pc, #440]	; (43a8 <InitLCD+0x228>)
    41ee:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    41f0:	4b69      	ldr	r3, [pc, #420]	; (4398 <InitLCD+0x218>)
    41f2:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    41f4:	4b6d      	ldr	r3, [pc, #436]	; (43ac <InitLCD+0x22c>)
    41f6:	5ce0      	ldrb	r0, [r4, r3]
    41f8:	4b6d      	ldr	r3, [pc, #436]	; (43b0 <InitLCD+0x230>)
    41fa:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    41fc:	3401      	adds	r4, #1
    41fe:	2c46      	cmp	r4, #70	; 0x46
    4200:	d1ef      	bne.n	41e2 <InitLCD+0x62>
    4202:	23d1      	movs	r3, #209	; 0xd1
    4204:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    4206:	4d68      	ldr	r5, [pc, #416]	; (43a8 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    4208:	4f69      	ldr	r7, [pc, #420]	; (43b0 <InitLCD+0x230>)
    420a:	4c6a      	ldr	r4, [pc, #424]	; (43b4 <InitLCD+0x234>)
    420c:	0026      	movs	r6, r4
    420e:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    4210:	2100      	movs	r1, #0
    4212:	9801      	ldr	r0, [sp, #4]
    4214:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    4216:	7820      	ldrb	r0, [r4, #0]
    4218:	47b8      	blx	r7
    421a:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    421c:	42a6      	cmp	r6, r4
    421e:	d1f7      	bne.n	4210 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    4220:	9b01      	ldr	r3, [sp, #4]
    4222:	3301      	adds	r3, #1
    4224:	b2db      	uxtb	r3, r3
    4226:	9301      	str	r3, [sp, #4]
    4228:	2bd6      	cmp	r3, #214	; 0xd6
    422a:	d1ee      	bne.n	420a <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    422c:	2100      	movs	r1, #0
    422e:	20f0      	movs	r0, #240	; 0xf0
    4230:	4c5d      	ldr	r4, [pc, #372]	; (43a8 <InitLCD+0x228>)
    4232:	47a0      	blx	r4
    4234:	2055      	movs	r0, #85	; 0x55
    4236:	4d5e      	ldr	r5, [pc, #376]	; (43b0 <InitLCD+0x230>)
    4238:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    423a:	2101      	movs	r1, #1
    423c:	20f0      	movs	r0, #240	; 0xf0
    423e:	47a0      	blx	r4
    4240:	20aa      	movs	r0, #170	; 0xaa
    4242:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    4244:	2102      	movs	r1, #2
    4246:	20f0      	movs	r0, #240	; 0xf0
    4248:	47a0      	blx	r4
    424a:	2052      	movs	r0, #82	; 0x52
    424c:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    424e:	2103      	movs	r1, #3
    4250:	20f0      	movs	r0, #240	; 0xf0
    4252:	47a0      	blx	r4
    4254:	2008      	movs	r0, #8
    4256:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    4258:	2104      	movs	r1, #4
    425a:	20f0      	movs	r0, #240	; 0xf0
    425c:	47a0      	blx	r4
    425e:	2000      	movs	r0, #0
    4260:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    4262:	2100      	movs	r1, #0
    4264:	20b1      	movs	r0, #177	; 0xb1
    4266:	47a0      	blx	r4
    4268:	20cc      	movs	r0, #204	; 0xcc
    426a:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    426c:	2101      	movs	r1, #1
    426e:	20b1      	movs	r0, #177	; 0xb1
    4270:	47a0      	blx	r4
    4272:	2000      	movs	r0, #0
    4274:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    4276:	2100      	movs	r1, #0
    4278:	20b5      	movs	r0, #181	; 0xb5
    427a:	47a0      	blx	r4
    427c:	2050      	movs	r0, #80	; 0x50
    427e:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    4280:	2100      	movs	r1, #0
    4282:	20b6      	movs	r0, #182	; 0xb6
    4284:	47a0      	blx	r4
    4286:	2005      	movs	r0, #5
    4288:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    428a:	2100      	movs	r1, #0
    428c:	20b7      	movs	r0, #183	; 0xb7
    428e:	47a0      	blx	r4
    4290:	2070      	movs	r0, #112	; 0x70
    4292:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    4294:	2101      	movs	r1, #1
    4296:	20b7      	movs	r0, #183	; 0xb7
    4298:	47a0      	blx	r4
    429a:	2070      	movs	r0, #112	; 0x70
    429c:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    429e:	2100      	movs	r1, #0
    42a0:	20b8      	movs	r0, #184	; 0xb8
    42a2:	47a0      	blx	r4
    42a4:	2001      	movs	r0, #1
    42a6:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    42a8:	2101      	movs	r1, #1
    42aa:	20b8      	movs	r0, #184	; 0xb8
    42ac:	47a0      	blx	r4
    42ae:	2003      	movs	r0, #3
    42b0:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    42b2:	2102      	movs	r1, #2
    42b4:	20b8      	movs	r0, #184	; 0xb8
    42b6:	47a0      	blx	r4
    42b8:	2003      	movs	r0, #3
    42ba:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    42bc:	2103      	movs	r1, #3
    42be:	20b8      	movs	r0, #184	; 0xb8
    42c0:	47a0      	blx	r4
    42c2:	2003      	movs	r0, #3
    42c4:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    42c6:	2100      	movs	r1, #0
    42c8:	20bc      	movs	r0, #188	; 0xbc
    42ca:	47a0      	blx	r4
    42cc:	2002      	movs	r0, #2
    42ce:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    42d0:	2101      	movs	r1, #1
    42d2:	20bc      	movs	r0, #188	; 0xbc
    42d4:	47a0      	blx	r4
    42d6:	2000      	movs	r0, #0
    42d8:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    42da:	2102      	movs	r1, #2
    42dc:	20bc      	movs	r0, #188	; 0xbc
    42de:	47a0      	blx	r4
    42e0:	2000      	movs	r0, #0
    42e2:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    42e4:	2100      	movs	r1, #0
    42e6:	20c9      	movs	r0, #201	; 0xc9
    42e8:	47a0      	blx	r4
    42ea:	20d0      	movs	r0, #208	; 0xd0
    42ec:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    42ee:	2101      	movs	r1, #1
    42f0:	20c9      	movs	r0, #201	; 0xc9
    42f2:	47a0      	blx	r4
    42f4:	2002      	movs	r0, #2
    42f6:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    42f8:	2102      	movs	r1, #2
    42fa:	20c9      	movs	r0, #201	; 0xc9
    42fc:	47a0      	blx	r4
    42fe:	2050      	movs	r0, #80	; 0x50
    4300:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    4302:	2103      	movs	r1, #3
    4304:	20c9      	movs	r0, #201	; 0xc9
    4306:	47a0      	blx	r4
    4308:	2050      	movs	r0, #80	; 0x50
    430a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    430c:	2104      	movs	r1, #4
    430e:	20c9      	movs	r0, #201	; 0xc9
    4310:	47a0      	blx	r4
    4312:	2050      	movs	r0, #80	; 0x50
    4314:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    4316:	2100      	movs	r1, #0
    4318:	2035      	movs	r0, #53	; 0x35
    431a:	47a0      	blx	r4
    431c:	2000      	movs	r0, #0
    431e:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    4320:	2100      	movs	r1, #0
    4322:	203a      	movs	r0, #58	; 0x3a
    4324:	47a0      	blx	r4
    4326:	2055      	movs	r0, #85	; 0x55
    4328:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    432a:	2100      	movs	r1, #0
    432c:	2036      	movs	r0, #54	; 0x36
    432e:	47a0      	blx	r4
    4330:	20e2      	movs	r0, #226	; 0xe2
    4332:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    4334:	2100      	movs	r1, #0
    4336:	2011      	movs	r0, #17
    4338:	47a0      	blx	r4
  	delay_ms(100);
    433a:	2064      	movs	r0, #100	; 0x64
    433c:	4e17      	ldr	r6, [pc, #92]	; (439c <InitLCD+0x21c>)
    433e:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    4340:	2100      	movs	r1, #0
    4342:	2029      	movs	r0, #41	; 0x29
    4344:	47a0      	blx	r4
   	delay_ms(100);
    4346:	2064      	movs	r0, #100	; 0x64
    4348:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    434a:	2100      	movs	r1, #0
    434c:	2051      	movs	r0, #81	; 0x51
    434e:	47a0      	blx	r4
    4350:	20ff      	movs	r0, #255	; 0xff
    4352:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    4354:	2280      	movs	r2, #128	; 0x80
    4356:	03d2      	lsls	r2, r2, #15
    4358:	4b0f      	ldr	r3, [pc, #60]	; (4398 <InitLCD+0x218>)
    435a:	601a      	str	r2, [r3, #0]
	clrScr();
    435c:	4b16      	ldr	r3, [pc, #88]	; (43b8 <InitLCD+0x238>)
    435e:	4798      	blx	r3
	setColorRGB(0,0,0);
    4360:	2200      	movs	r2, #0
    4362:	2100      	movs	r1, #0
    4364:	2000      	movs	r0, #0
    4366:	4b15      	ldr	r3, [pc, #84]	; (43bc <InitLCD+0x23c>)
    4368:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    436a:	2200      	movs	r2, #0
    436c:	2100      	movs	r1, #0
    436e:	2000      	movs	r0, #0
    4370:	4b13      	ldr	r3, [pc, #76]	; (43c0 <InitLCD+0x240>)
    4372:	4798      	blx	r3
	fillRect(0,0,799,489);
    4374:	23ea      	movs	r3, #234	; 0xea
    4376:	33ff      	adds	r3, #255	; 0xff
    4378:	4a12      	ldr	r2, [pc, #72]	; (43c4 <InitLCD+0x244>)
    437a:	2100      	movs	r1, #0
    437c:	2000      	movs	r0, #0
    437e:	4c12      	ldr	r4, [pc, #72]	; (43c8 <InitLCD+0x248>)
    4380:	47a0      	blx	r4
}
    4382:	b002      	add	sp, #8
    4384:	bc04      	pop	{r2}
    4386:	4690      	mov	r8, r2
    4388:	bdf0      	pop	{r4, r5, r6, r7, pc}
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	41004488 	.word	0x41004488
    4390:	0000ffff 	.word	0x0000ffff
    4394:	41004494 	.word	0x41004494
    4398:	41004498 	.word	0x41004498
    439c:	00001ad1 	.word	0x00001ad1
    43a0:	00008138 	.word	0x00008138
    43a4:	000080a8 	.word	0x000080a8
    43a8:	00004135 	.word	0x00004135
    43ac:	000080f0 	.word	0x000080f0
    43b0:	00004165 	.word	0x00004165
    43b4:	00008074 	.word	0x00008074
    43b8:	000040b1 	.word	0x000040b1
    43bc:	00003e9d 	.word	0x00003e9d
    43c0:	00003edd 	.word	0x00003edd
    43c4:	0000031f 	.word	0x0000031f
    43c8:	00004009 	.word	0x00004009

000043cc <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    43cc:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    43ce:	4c06      	ldr	r4, [pc, #24]	; (43e8 <usart_read_callback+0x1c>)
    43d0:	2201      	movs	r2, #1
    43d2:	0021      	movs	r1, r4
    43d4:	4805      	ldr	r0, [pc, #20]	; (43ec <usart_read_callback+0x20>)
    43d6:	4b06      	ldr	r3, [pc, #24]	; (43f0 <usart_read_callback+0x24>)
    43d8:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    43da:	7821      	ldrb	r1, [r4, #0]
    43dc:	4b05      	ldr	r3, [pc, #20]	; (43f4 <usart_read_callback+0x28>)
    43de:	6818      	ldr	r0, [r3, #0]
    43e0:	4b05      	ldr	r3, [pc, #20]	; (43f8 <usart_read_callback+0x2c>)
    43e2:	4798      	blx	r3
}
    43e4:	bd10      	pop	{r4, pc}
    43e6:	46c0      	nop			; (mov r8, r8)
    43e8:	20003100 	.word	0x20003100
    43ec:	200003c0 	.word	0x200003c0
    43f0:	00002971 	.word	0x00002971
    43f4:	20000394 	.word	0x20000394
    43f8:	00000141 	.word	0x00000141

000043fc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    43fc:	b570      	push	{r4, r5, r6, lr}
    43fe:	b082      	sub	sp, #8
    4400:	0005      	movs	r5, r0
    4402:	000e      	movs	r6, r1
	uint16_t temp = 0;
    4404:	2200      	movs	r2, #0
    4406:	466b      	mov	r3, sp
    4408:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    440a:	4c06      	ldr	r4, [pc, #24]	; (4424 <usart_serial_getchar+0x28>)
    440c:	466b      	mov	r3, sp
    440e:	1d99      	adds	r1, r3, #6
    4410:	0028      	movs	r0, r5
    4412:	47a0      	blx	r4
    4414:	2800      	cmp	r0, #0
    4416:	d1f9      	bne.n	440c <usart_serial_getchar+0x10>

	*c = temp;
    4418:	466b      	mov	r3, sp
    441a:	3306      	adds	r3, #6
    441c:	881b      	ldrh	r3, [r3, #0]
    441e:	7033      	strb	r3, [r6, #0]
}
    4420:	b002      	add	sp, #8
    4422:	bd70      	pop	{r4, r5, r6, pc}
    4424:	0000289f 	.word	0x0000289f

00004428 <usart_serial_putchar>:
{
    4428:	b570      	push	{r4, r5, r6, lr}
    442a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    442c:	b28c      	uxth	r4, r1
    442e:	4e03      	ldr	r6, [pc, #12]	; (443c <usart_serial_putchar+0x14>)
    4430:	0021      	movs	r1, r4
    4432:	0028      	movs	r0, r5
    4434:	47b0      	blx	r6
    4436:	2800      	cmp	r0, #0
    4438:	d1fa      	bne.n	4430 <usart_serial_putchar+0x8>
}
    443a:	bd70      	pop	{r4, r5, r6, pc}
    443c:	00002879 	.word	0x00002879

00004440 <SysTick_Handler>:
	ul_tickcount++;
    4440:	4a02      	ldr	r2, [pc, #8]	; (444c <SysTick_Handler+0xc>)
    4442:	8813      	ldrh	r3, [r2, #0]
    4444:	3301      	adds	r3, #1
    4446:	8013      	strh	r3, [r2, #0]
}
    4448:	4770      	bx	lr
    444a:	46c0      	nop			; (mov r8, r8)
    444c:	200002f2 	.word	0x200002f2

00004450 <conf_systick>:
{
    4450:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    4452:	4b0e      	ldr	r3, [pc, #56]	; (448c <conf_systick+0x3c>)
    4454:	6818      	ldr	r0, [r3, #0]
    4456:	21fa      	movs	r1, #250	; 0xfa
    4458:	0089      	lsls	r1, r1, #2
    445a:	4b0d      	ldr	r3, [pc, #52]	; (4490 <conf_systick+0x40>)
    445c:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    445e:	3801      	subs	r0, #1
    4460:	4b0c      	ldr	r3, [pc, #48]	; (4494 <conf_systick+0x44>)
    4462:	4298      	cmp	r0, r3
    4464:	d80d      	bhi.n	4482 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    4466:	4a0c      	ldr	r2, [pc, #48]	; (4498 <conf_systick+0x48>)
    4468:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    446a:	480c      	ldr	r0, [pc, #48]	; (449c <conf_systick+0x4c>)
    446c:	6a03      	ldr	r3, [r0, #32]
    446e:	021b      	lsls	r3, r3, #8
    4470:	0a1b      	lsrs	r3, r3, #8
    4472:	21c0      	movs	r1, #192	; 0xc0
    4474:	0609      	lsls	r1, r1, #24
    4476:	430b      	orrs	r3, r1
    4478:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    447a:	2300      	movs	r3, #0
    447c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    447e:	3307      	adds	r3, #7
    4480:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4482:	2280      	movs	r2, #128	; 0x80
    4484:	0612      	lsls	r2, r2, #24
    4486:	4b06      	ldr	r3, [pc, #24]	; (44a0 <conf_systick+0x50>)
    4488:	601a      	str	r2, [r3, #0]
}
    448a:	bd10      	pop	{r4, pc}
    448c:	20000020 	.word	0x20000020
    4490:	00004819 	.word	0x00004819
    4494:	00ffffff 	.word	0x00ffffff
    4498:	e000e010 	.word	0xe000e010
    449c:	e000ed00 	.word	0xe000ed00
    44a0:	e000e100 	.word	0xe000e100

000044a4 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    44a4:	b570      	push	{r4, r5, r6, lr}
    44a6:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    44a8:	2380      	movs	r3, #128	; 0x80
    44aa:	05db      	lsls	r3, r3, #23
    44ac:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    44ae:	2300      	movs	r3, #0
    44b0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    44b2:	22ff      	movs	r2, #255	; 0xff
    44b4:	4669      	mov	r1, sp
    44b6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    44b8:	2200      	movs	r2, #0
    44ba:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    44bc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    44be:	2196      	movs	r1, #150	; 0x96
    44c0:	0189      	lsls	r1, r1, #6
    44c2:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    44c4:	2101      	movs	r1, #1
    44c6:	2024      	movs	r0, #36	; 0x24
    44c8:	466c      	mov	r4, sp
    44ca:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    44cc:	3001      	adds	r0, #1
    44ce:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    44d0:	3125      	adds	r1, #37	; 0x25
    44d2:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    44d4:	3101      	adds	r1, #1
    44d6:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    44d8:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    44da:	3105      	adds	r1, #5
    44dc:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    44de:	3101      	adds	r1, #1
    44e0:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    44e2:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    44e4:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    44e6:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    44e8:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    44ea:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    44ec:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    44ee:	2313      	movs	r3, #19
    44f0:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    44f2:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    44f4:	2380      	movs	r3, #128	; 0x80
    44f6:	035b      	lsls	r3, r3, #13
    44f8:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    44fa:	4b1e      	ldr	r3, [pc, #120]	; (4574 <configure_usart+0xd0>)
    44fc:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    44fe:	4b1e      	ldr	r3, [pc, #120]	; (4578 <configure_usart+0xd4>)
    4500:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    4502:	2301      	movs	r3, #1
    4504:	425b      	negs	r3, r3
    4506:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    4508:	930f      	str	r3, [sp, #60]	; 0x3c
	
	RTS on PAD2 and CTS on PAD3
	
	*/
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    450a:	4d1c      	ldr	r5, [pc, #112]	; (457c <configure_usart+0xd8>)
    450c:	4c1c      	ldr	r4, [pc, #112]	; (4580 <configure_usart+0xdc>)
    450e:	466a      	mov	r2, sp
    4510:	491c      	ldr	r1, [pc, #112]	; (4584 <configure_usart+0xe0>)
    4512:	0028      	movs	r0, r5
    4514:	47a0      	blx	r4
    4516:	2800      	cmp	r0, #0
    4518:	d1f9      	bne.n	450e <configure_usart+0x6a>
	stdio_base = (void *)module;
    451a:	4c18      	ldr	r4, [pc, #96]	; (457c <configure_usart+0xd8>)
    451c:	4b1a      	ldr	r3, [pc, #104]	; (4588 <configure_usart+0xe4>)
    451e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4520:	4a1a      	ldr	r2, [pc, #104]	; (458c <configure_usart+0xe8>)
    4522:	4b1b      	ldr	r3, [pc, #108]	; (4590 <configure_usart+0xec>)
    4524:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4526:	4a1b      	ldr	r2, [pc, #108]	; (4594 <configure_usart+0xf0>)
    4528:	4b1b      	ldr	r3, [pc, #108]	; (4598 <configure_usart+0xf4>)
    452a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    452c:	466a      	mov	r2, sp
    452e:	4915      	ldr	r1, [pc, #84]	; (4584 <configure_usart+0xe0>)
    4530:	0020      	movs	r0, r4
    4532:	4b13      	ldr	r3, [pc, #76]	; (4580 <configure_usart+0xdc>)
    4534:	4798      	blx	r3
	setbuf(stdout, NULL);
    4536:	4e19      	ldr	r6, [pc, #100]	; (459c <configure_usart+0xf8>)
    4538:	6833      	ldr	r3, [r6, #0]
    453a:	6898      	ldr	r0, [r3, #8]
    453c:	2100      	movs	r1, #0
    453e:	4d18      	ldr	r5, [pc, #96]	; (45a0 <configure_usart+0xfc>)
    4540:	47a8      	blx	r5
	setbuf(stdin, NULL);
    4542:	6833      	ldr	r3, [r6, #0]
    4544:	6858      	ldr	r0, [r3, #4]
    4546:	2100      	movs	r1, #0
    4548:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    454a:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    454c:	0028      	movs	r0, r5
    454e:	4b15      	ldr	r3, [pc, #84]	; (45a4 <configure_usart+0x100>)
    4550:	4798      	blx	r3
    4552:	231f      	movs	r3, #31
    4554:	4018      	ands	r0, r3
    4556:	3b1e      	subs	r3, #30
    4558:	4083      	lsls	r3, r0
    455a:	4a13      	ldr	r2, [pc, #76]	; (45a8 <configure_usart+0x104>)
    455c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    455e:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    4560:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4562:	2b00      	cmp	r3, #0
    4564:	d1fc      	bne.n	4560 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4566:	682b      	ldr	r3, [r5, #0]
    4568:	2202      	movs	r2, #2
    456a:	4313      	orrs	r3, r2
    456c:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    456e:	b010      	add	sp, #64	; 0x40
    4570:	bd70      	pop	{r4, r5, r6, pc}
    4572:	46c0      	nop			; (mov r8, r8)
    4574:	00080003 	.word	0x00080003
    4578:	00090003 	.word	0x00090003
    457c:	200003c0 	.word	0x200003c0
    4580:	0000253d 	.word	0x0000253d
    4584:	42001000 	.word	0x42001000
    4588:	200003bc 	.word	0x200003bc
    458c:	00004429 	.word	0x00004429
    4590:	200003b8 	.word	0x200003b8
    4594:	000043fd 	.word	0x000043fd
    4598:	200003b4 	.word	0x200003b4
    459c:	200001a4 	.word	0x200001a4
    45a0:	00004eb5 	.word	0x00004eb5
    45a4:	000024ad 	.word	0x000024ad
    45a8:	e000e100 	.word	0xe000e100

000045ac <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    45ac:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    45ae:	4c06      	ldr	r4, [pc, #24]	; (45c8 <configure_usart_callbacks+0x1c>)
    45b0:	2201      	movs	r2, #1
    45b2:	4906      	ldr	r1, [pc, #24]	; (45cc <configure_usart_callbacks+0x20>)
    45b4:	0020      	movs	r0, r4
    45b6:	4b06      	ldr	r3, [pc, #24]	; (45d0 <configure_usart_callbacks+0x24>)
    45b8:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    45ba:	2231      	movs	r2, #49	; 0x31
    45bc:	5ca3      	ldrb	r3, [r4, r2]
    45be:	2102      	movs	r1, #2
    45c0:	430b      	orrs	r3, r1
    45c2:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    45c4:	bd10      	pop	{r4, pc}
    45c6:	46c0      	nop			; (mov r8, r8)
    45c8:	200003c0 	.word	0x200003c0
    45cc:	000043cd 	.word	0x000043cd
    45d0:	00002959 	.word	0x00002959

000045d4 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    45d4:	b510      	push	{r4, lr}
    45d6:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    45d8:	4668      	mov	r0, sp
    45da:	4b16      	ldr	r3, [pc, #88]	; (4634 <configure_adc+0x60>)
    45dc:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    45de:	2301      	movs	r3, #1
    45e0:	466a      	mov	r2, sp
    45e2:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    45e4:	2380      	movs	r3, #128	; 0x80
    45e6:	009b      	lsls	r3, r3, #2
    45e8:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    45ea:	2300      	movs	r3, #0
    45ec:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    45ee:	3318      	adds	r3, #24
    45f0:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    45f2:	23c0      	movs	r3, #192	; 0xc0
    45f4:	015b      	lsls	r3, r3, #5
    45f6:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    45f8:	4c0f      	ldr	r4, [pc, #60]	; (4638 <configure_adc+0x64>)
    45fa:	4910      	ldr	r1, [pc, #64]	; (463c <configure_adc+0x68>)
    45fc:	0020      	movs	r0, r4
    45fe:	4b10      	ldr	r3, [pc, #64]	; (4640 <configure_adc+0x6c>)
    4600:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4602:	6822      	ldr	r2, [r4, #0]
    4604:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4606:	b25b      	sxtb	r3, r3
    4608:	2b00      	cmp	r3, #0
    460a:	dbfb      	blt.n	4604 <configure_adc+0x30>
    460c:	2180      	movs	r1, #128	; 0x80
    460e:	0409      	lsls	r1, r1, #16
    4610:	4b0c      	ldr	r3, [pc, #48]	; (4644 <configure_adc+0x70>)
    4612:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4614:	230f      	movs	r3, #15
    4616:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4618:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    461a:	7813      	ldrb	r3, [r2, #0]
    461c:	2102      	movs	r1, #2
    461e:	430b      	orrs	r3, r1
    4620:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    4622:	4b05      	ldr	r3, [pc, #20]	; (4638 <configure_adc+0x64>)
    4624:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    4626:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4628:	b25b      	sxtb	r3, r3
    462a:	2b00      	cmp	r3, #0
    462c:	dbfb      	blt.n	4626 <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    462e:	b00c      	add	sp, #48	; 0x30
    4630:	bd10      	pop	{r4, pc}
    4632:	46c0      	nop			; (mov r8, r8)
    4634:	00001ba5 	.word	0x00001ba5
    4638:	20003104 	.word	0x20003104
    463c:	42004000 	.word	0x42004000
    4640:	00001be9 	.word	0x00001be9
    4644:	e000e100 	.word	0xe000e100

00004648 <setupBoard>:


void setupBoard(void)
{
    4648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    464a:	2000      	movs	r0, #0
    464c:	4b31      	ldr	r3, [pc, #196]	; (4714 <setupBoard+0xcc>)
    464e:	4798      	blx	r3
    4650:	b287      	uxth	r7, r0
	

	system_init();
    4652:	4b31      	ldr	r3, [pc, #196]	; (4718 <setupBoard+0xd0>)
    4654:	4798      	blx	r3
	
	configure_adc();
    4656:	4b31      	ldr	r3, [pc, #196]	; (471c <setupBoard+0xd4>)
    4658:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    465a:	4b31      	ldr	r3, [pc, #196]	; (4720 <setupBoard+0xd8>)
    465c:	6819      	ldr	r1, [r3, #0]
    465e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4660:	b25b      	sxtb	r3, r3
    4662:	2b00      	cmp	r3, #0
    4664:	dbfb      	blt.n	465e <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4666:	7b0b      	ldrb	r3, [r1, #12]
    4668:	2202      	movs	r2, #2
    466a:	4313      	orrs	r3, r2
    466c:	730b      	strb	r3, [r1, #12]
    466e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4670:	b25b      	sxtb	r3, r3
    4672:	2b00      	cmp	r3, #0
    4674:	dbfb      	blt.n	466e <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4676:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    4678:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    467a:	2502      	movs	r5, #2
    467c:	e001      	b.n	4682 <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    467e:	4214      	tst	r4, r2
    4680:	d10a      	bne.n	4698 <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    4682:	7e0b      	ldrb	r3, [r1, #24]
    4684:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4686:	0022      	movs	r2, r4
    4688:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    468a:	421e      	tst	r6, r3
    468c:	d000      	beq.n	4690 <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    468e:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4690:	421d      	tst	r5, r3
    4692:	d0f4      	beq.n	467e <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    4694:	4332      	orrs	r2, r6
    4696:	e7f2      	b.n	467e <setupBoard+0x36>
    4698:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    469a:	b25b      	sxtb	r3, r3
    469c:	2b00      	cmp	r3, #0
    469e:	dbfb      	blt.n	4698 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    46a0:	8b48      	ldrh	r0, [r1, #26]
    46a2:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    46a4:	2301      	movs	r3, #1
    46a6:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    46a8:	7e0a      	ldrb	r2, [r1, #24]
    46aa:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    46ac:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    46ae:	0754      	lsls	r4, r2, #29
    46b0:	d501      	bpl.n	46b6 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    46b2:	2402      	movs	r4, #2
    46b4:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    46b6:	0792      	lsls	r2, r2, #30
    46b8:	d501      	bpl.n	46be <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    46ba:	2204      	movs	r2, #4
    46bc:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    46be:	075b      	lsls	r3, r3, #29
    46c0:	d501      	bpl.n	46c6 <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    46c2:	2302      	movs	r3, #2
    46c4:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    46c6:	4078      	eors	r0, r7
    46c8:	4b16      	ldr	r3, [pc, #88]	; (4724 <setupBoard+0xdc>)
    46ca:	4798      	blx	r3
	
	delay_init();
    46cc:	4b16      	ldr	r3, [pc, #88]	; (4728 <setupBoard+0xe0>)
    46ce:	4798      	blx	r3
	
	conf_systick();
    46d0:	4c16      	ldr	r4, [pc, #88]	; (472c <setupBoard+0xe4>)
    46d2:	47a0      	blx	r4
	and PAD1 (PI_RX) on pin 47.
	
	Also, this gives us the ability to bridge UARTs. THIS IS COOL
	
	*/
	configure_usart();
    46d4:	4b16      	ldr	r3, [pc, #88]	; (4730 <setupBoard+0xe8>)
    46d6:	4798      	blx	r3
	configure_usart_callbacks();
    46d8:	4b16      	ldr	r3, [pc, #88]	; (4734 <setupBoard+0xec>)
    46da:	4798      	blx	r3
	cpu_irq_enable();
    46dc:	2201      	movs	r2, #1
    46de:	4b16      	ldr	r3, [pc, #88]	; (4738 <setupBoard+0xf0>)
    46e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    46e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    46e6:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    46e8:	4914      	ldr	r1, [pc, #80]	; (473c <setupBoard+0xf4>)
    46ea:	4815      	ldr	r0, [pc, #84]	; (4740 <setupBoard+0xf8>)
    46ec:	4b15      	ldr	r3, [pc, #84]	; (4744 <setupBoard+0xfc>)
    46ee:	4798      	blx	r3
	


	printf("\n\rSerial OK 9600 8N1\n\r");
    46f0:	4815      	ldr	r0, [pc, #84]	; (4748 <setupBoard+0x100>)
    46f2:	4b16      	ldr	r3, [pc, #88]	; (474c <setupBoard+0x104>)
    46f4:	4798      	blx	r3

	
	InitLCD();
    46f6:	4b16      	ldr	r3, [pc, #88]	; (4750 <setupBoard+0x108>)
    46f8:	4798      	blx	r3
	splashScreen();
    46fa:	4b16      	ldr	r3, [pc, #88]	; (4754 <setupBoard+0x10c>)
    46fc:	4798      	blx	r3
			
	conf_systick();
    46fe:	47a0      	blx	r4

	xCharPos=0;
    4700:	2300      	movs	r3, #0
    4702:	4a15      	ldr	r2, [pc, #84]	; (4758 <setupBoard+0x110>)
    4704:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    4706:	4a15      	ldr	r2, [pc, #84]	; (475c <setupBoard+0x114>)
    4708:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    470a:	20ff      	movs	r0, #255	; 0xff
    470c:	4b14      	ldr	r3, [pc, #80]	; (4760 <setupBoard+0x118>)
    470e:	4798      	blx	r3
}
    4710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4712:	46c0      	nop			; (mov r8, r8)
    4714:	00003051 	.word	0x00003051
    4718:	00003295 	.word	0x00003295
    471c:	000045d5 	.word	0x000045d5
    4720:	20003104 	.word	0x20003104
    4724:	00004dbd 	.word	0x00004dbd
    4728:	00001a91 	.word	0x00001a91
    472c:	00004451 	.word	0x00004451
    4730:	000044a5 	.word	0x000044a5
    4734:	000045ad 	.word	0x000045ad
    4738:	2000001c 	.word	0x2000001c
    473c:	20003100 	.word	0x20003100
    4740:	200003c0 	.word	0x200003c0
    4744:	00002971 	.word	0x00002971
    4748:	00008180 	.word	0x00008180
    474c:	00004d61 	.word	0x00004d61
    4750:	00004181 	.word	0x00004181
    4754:	00001811 	.word	0x00001811
    4758:	200002e8 	.word	0x200002e8
    475c:	200002ea 	.word	0x200002ea
    4760:	00003479 	.word	0x00003479

00004764 <main>:
{
    4764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    4766:	4b20      	ldr	r3, [pc, #128]	; (47e8 <main+0x84>)
    4768:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    476a:	200a      	movs	r0, #10
    476c:	4b1f      	ldr	r3, [pc, #124]	; (47ec <main+0x88>)
    476e:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    4770:	210a      	movs	r1, #10
    4772:	4b1f      	ldr	r3, [pc, #124]	; (47f0 <main+0x8c>)
    4774:	4798      	blx	r3
    4776:	4b1f      	ldr	r3, [pc, #124]	; (47f4 <main+0x90>)
    4778:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    477a:	4f1f      	ldr	r7, [pc, #124]	; (47f8 <main+0x94>)
    477c:	4e1f      	ldr	r6, [pc, #124]	; (47fc <main+0x98>)
    477e:	4d20      	ldr	r5, [pc, #128]	; (4800 <main+0x9c>)
    4780:	e015      	b.n	47ae <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4782:	21c8      	movs	r1, #200	; 0xc8
    4784:	0020      	movs	r0, r4
    4786:	4b1d      	ldr	r3, [pc, #116]	; (47fc <main+0x98>)
    4788:	4798      	blx	r3
    478a:	b289      	uxth	r1, r1
    478c:	2900      	cmp	r1, #0
    478e:	d10e      	bne.n	47ae <main+0x4a>
    4790:	4b1c      	ldr	r3, [pc, #112]	; (4804 <main+0xa0>)
    4792:	781b      	ldrb	r3, [r3, #0]
    4794:	2b00      	cmp	r3, #0
    4796:	d10a      	bne.n	47ae <main+0x4a>
			funcLock = true;
    4798:	4c1a      	ldr	r4, [pc, #104]	; (4804 <main+0xa0>)
    479a:	2301      	movs	r3, #1
    479c:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    479e:	4b1a      	ldr	r3, [pc, #104]	; (4808 <main+0xa4>)
    47a0:	4798      	blx	r3
			printKeyboardBuffer();
    47a2:	4b1a      	ldr	r3, [pc, #104]	; (480c <main+0xa8>)
    47a4:	4798      	blx	r3
			parseRXBuffer();
    47a6:	4b1a      	ldr	r3, [pc, #104]	; (4810 <main+0xac>)
    47a8:	4798      	blx	r3
			funcLock = false;
    47aa:	2300      	movs	r3, #0
    47ac:	7023      	strb	r3, [r4, #0]
		__WFI();
    47ae:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    47b0:	883c      	ldrh	r4, [r7, #0]
    47b2:	0029      	movs	r1, r5
    47b4:	0020      	movs	r0, r4
    47b6:	47b0      	blx	r6
    47b8:	b289      	uxth	r1, r1
    47ba:	2900      	cmp	r1, #0
    47bc:	d1e1      	bne.n	4782 <main+0x1e>
    47be:	4b11      	ldr	r3, [pc, #68]	; (4804 <main+0xa0>)
    47c0:	781b      	ldrb	r3, [r3, #0]
    47c2:	2b00      	cmp	r3, #0
    47c4:	d1f3      	bne.n	47ae <main+0x4a>
			funcLock = true;
    47c6:	4c0f      	ldr	r4, [pc, #60]	; (4804 <main+0xa0>)
    47c8:	3301      	adds	r3, #1
    47ca:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    47cc:	4b11      	ldr	r3, [pc, #68]	; (4814 <main+0xb0>)
    47ce:	4798      	blx	r3
			funcLock = false;
    47d0:	2300      	movs	r3, #0
    47d2:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    47d4:	4b08      	ldr	r3, [pc, #32]	; (47f8 <main+0x94>)
    47d6:	8818      	ldrh	r0, [r3, #0]
    47d8:	21c8      	movs	r1, #200	; 0xc8
    47da:	4b08      	ldr	r3, [pc, #32]	; (47fc <main+0x98>)
    47dc:	4798      	blx	r3
    47de:	b289      	uxth	r1, r1
    47e0:	2900      	cmp	r1, #0
    47e2:	d0d9      	beq.n	4798 <main+0x34>
    47e4:	e7e3      	b.n	47ae <main+0x4a>
    47e6:	46c0      	nop			; (mov r8, r8)
    47e8:	00004649 	.word	0x00004649
    47ec:	00004bd9 	.word	0x00004bd9
    47f0:	00000115 	.word	0x00000115
    47f4:	20000394 	.word	0x20000394
    47f8:	200002f2 	.word	0x200002f2
    47fc:	00004925 	.word	0x00004925
    4800:	00003fff 	.word	0x00003fff
    4804:	200002f0 	.word	0x200002f0
    4808:	00003c9d 	.word	0x00003c9d
    480c:	00003905 	.word	0x00003905
    4810:	00001a3d 	.word	0x00001a3d
    4814:	000035f9 	.word	0x000035f9

00004818 <__udivsi3>:
    4818:	2200      	movs	r2, #0
    481a:	0843      	lsrs	r3, r0, #1
    481c:	428b      	cmp	r3, r1
    481e:	d374      	bcc.n	490a <__udivsi3+0xf2>
    4820:	0903      	lsrs	r3, r0, #4
    4822:	428b      	cmp	r3, r1
    4824:	d35f      	bcc.n	48e6 <__udivsi3+0xce>
    4826:	0a03      	lsrs	r3, r0, #8
    4828:	428b      	cmp	r3, r1
    482a:	d344      	bcc.n	48b6 <__udivsi3+0x9e>
    482c:	0b03      	lsrs	r3, r0, #12
    482e:	428b      	cmp	r3, r1
    4830:	d328      	bcc.n	4884 <__udivsi3+0x6c>
    4832:	0c03      	lsrs	r3, r0, #16
    4834:	428b      	cmp	r3, r1
    4836:	d30d      	bcc.n	4854 <__udivsi3+0x3c>
    4838:	22ff      	movs	r2, #255	; 0xff
    483a:	0209      	lsls	r1, r1, #8
    483c:	ba12      	rev	r2, r2
    483e:	0c03      	lsrs	r3, r0, #16
    4840:	428b      	cmp	r3, r1
    4842:	d302      	bcc.n	484a <__udivsi3+0x32>
    4844:	1212      	asrs	r2, r2, #8
    4846:	0209      	lsls	r1, r1, #8
    4848:	d065      	beq.n	4916 <__udivsi3+0xfe>
    484a:	0b03      	lsrs	r3, r0, #12
    484c:	428b      	cmp	r3, r1
    484e:	d319      	bcc.n	4884 <__udivsi3+0x6c>
    4850:	e000      	b.n	4854 <__udivsi3+0x3c>
    4852:	0a09      	lsrs	r1, r1, #8
    4854:	0bc3      	lsrs	r3, r0, #15
    4856:	428b      	cmp	r3, r1
    4858:	d301      	bcc.n	485e <__udivsi3+0x46>
    485a:	03cb      	lsls	r3, r1, #15
    485c:	1ac0      	subs	r0, r0, r3
    485e:	4152      	adcs	r2, r2
    4860:	0b83      	lsrs	r3, r0, #14
    4862:	428b      	cmp	r3, r1
    4864:	d301      	bcc.n	486a <__udivsi3+0x52>
    4866:	038b      	lsls	r3, r1, #14
    4868:	1ac0      	subs	r0, r0, r3
    486a:	4152      	adcs	r2, r2
    486c:	0b43      	lsrs	r3, r0, #13
    486e:	428b      	cmp	r3, r1
    4870:	d301      	bcc.n	4876 <__udivsi3+0x5e>
    4872:	034b      	lsls	r3, r1, #13
    4874:	1ac0      	subs	r0, r0, r3
    4876:	4152      	adcs	r2, r2
    4878:	0b03      	lsrs	r3, r0, #12
    487a:	428b      	cmp	r3, r1
    487c:	d301      	bcc.n	4882 <__udivsi3+0x6a>
    487e:	030b      	lsls	r3, r1, #12
    4880:	1ac0      	subs	r0, r0, r3
    4882:	4152      	adcs	r2, r2
    4884:	0ac3      	lsrs	r3, r0, #11
    4886:	428b      	cmp	r3, r1
    4888:	d301      	bcc.n	488e <__udivsi3+0x76>
    488a:	02cb      	lsls	r3, r1, #11
    488c:	1ac0      	subs	r0, r0, r3
    488e:	4152      	adcs	r2, r2
    4890:	0a83      	lsrs	r3, r0, #10
    4892:	428b      	cmp	r3, r1
    4894:	d301      	bcc.n	489a <__udivsi3+0x82>
    4896:	028b      	lsls	r3, r1, #10
    4898:	1ac0      	subs	r0, r0, r3
    489a:	4152      	adcs	r2, r2
    489c:	0a43      	lsrs	r3, r0, #9
    489e:	428b      	cmp	r3, r1
    48a0:	d301      	bcc.n	48a6 <__udivsi3+0x8e>
    48a2:	024b      	lsls	r3, r1, #9
    48a4:	1ac0      	subs	r0, r0, r3
    48a6:	4152      	adcs	r2, r2
    48a8:	0a03      	lsrs	r3, r0, #8
    48aa:	428b      	cmp	r3, r1
    48ac:	d301      	bcc.n	48b2 <__udivsi3+0x9a>
    48ae:	020b      	lsls	r3, r1, #8
    48b0:	1ac0      	subs	r0, r0, r3
    48b2:	4152      	adcs	r2, r2
    48b4:	d2cd      	bcs.n	4852 <__udivsi3+0x3a>
    48b6:	09c3      	lsrs	r3, r0, #7
    48b8:	428b      	cmp	r3, r1
    48ba:	d301      	bcc.n	48c0 <__udivsi3+0xa8>
    48bc:	01cb      	lsls	r3, r1, #7
    48be:	1ac0      	subs	r0, r0, r3
    48c0:	4152      	adcs	r2, r2
    48c2:	0983      	lsrs	r3, r0, #6
    48c4:	428b      	cmp	r3, r1
    48c6:	d301      	bcc.n	48cc <__udivsi3+0xb4>
    48c8:	018b      	lsls	r3, r1, #6
    48ca:	1ac0      	subs	r0, r0, r3
    48cc:	4152      	adcs	r2, r2
    48ce:	0943      	lsrs	r3, r0, #5
    48d0:	428b      	cmp	r3, r1
    48d2:	d301      	bcc.n	48d8 <__udivsi3+0xc0>
    48d4:	014b      	lsls	r3, r1, #5
    48d6:	1ac0      	subs	r0, r0, r3
    48d8:	4152      	adcs	r2, r2
    48da:	0903      	lsrs	r3, r0, #4
    48dc:	428b      	cmp	r3, r1
    48de:	d301      	bcc.n	48e4 <__udivsi3+0xcc>
    48e0:	010b      	lsls	r3, r1, #4
    48e2:	1ac0      	subs	r0, r0, r3
    48e4:	4152      	adcs	r2, r2
    48e6:	08c3      	lsrs	r3, r0, #3
    48e8:	428b      	cmp	r3, r1
    48ea:	d301      	bcc.n	48f0 <__udivsi3+0xd8>
    48ec:	00cb      	lsls	r3, r1, #3
    48ee:	1ac0      	subs	r0, r0, r3
    48f0:	4152      	adcs	r2, r2
    48f2:	0883      	lsrs	r3, r0, #2
    48f4:	428b      	cmp	r3, r1
    48f6:	d301      	bcc.n	48fc <__udivsi3+0xe4>
    48f8:	008b      	lsls	r3, r1, #2
    48fa:	1ac0      	subs	r0, r0, r3
    48fc:	4152      	adcs	r2, r2
    48fe:	0843      	lsrs	r3, r0, #1
    4900:	428b      	cmp	r3, r1
    4902:	d301      	bcc.n	4908 <__udivsi3+0xf0>
    4904:	004b      	lsls	r3, r1, #1
    4906:	1ac0      	subs	r0, r0, r3
    4908:	4152      	adcs	r2, r2
    490a:	1a41      	subs	r1, r0, r1
    490c:	d200      	bcs.n	4910 <__udivsi3+0xf8>
    490e:	4601      	mov	r1, r0
    4910:	4152      	adcs	r2, r2
    4912:	4610      	mov	r0, r2
    4914:	4770      	bx	lr
    4916:	e7ff      	b.n	4918 <__udivsi3+0x100>
    4918:	b501      	push	{r0, lr}
    491a:	2000      	movs	r0, #0
    491c:	f000 f8f0 	bl	4b00 <__aeabi_idiv0>
    4920:	bd02      	pop	{r1, pc}
    4922:	46c0      	nop			; (mov r8, r8)

00004924 <__aeabi_uidivmod>:
    4924:	2900      	cmp	r1, #0
    4926:	d0f7      	beq.n	4918 <__udivsi3+0x100>
    4928:	e776      	b.n	4818 <__udivsi3>
    492a:	4770      	bx	lr

0000492c <__divsi3>:
    492c:	4603      	mov	r3, r0
    492e:	430b      	orrs	r3, r1
    4930:	d47f      	bmi.n	4a32 <__divsi3+0x106>
    4932:	2200      	movs	r2, #0
    4934:	0843      	lsrs	r3, r0, #1
    4936:	428b      	cmp	r3, r1
    4938:	d374      	bcc.n	4a24 <__divsi3+0xf8>
    493a:	0903      	lsrs	r3, r0, #4
    493c:	428b      	cmp	r3, r1
    493e:	d35f      	bcc.n	4a00 <__divsi3+0xd4>
    4940:	0a03      	lsrs	r3, r0, #8
    4942:	428b      	cmp	r3, r1
    4944:	d344      	bcc.n	49d0 <__divsi3+0xa4>
    4946:	0b03      	lsrs	r3, r0, #12
    4948:	428b      	cmp	r3, r1
    494a:	d328      	bcc.n	499e <__divsi3+0x72>
    494c:	0c03      	lsrs	r3, r0, #16
    494e:	428b      	cmp	r3, r1
    4950:	d30d      	bcc.n	496e <__divsi3+0x42>
    4952:	22ff      	movs	r2, #255	; 0xff
    4954:	0209      	lsls	r1, r1, #8
    4956:	ba12      	rev	r2, r2
    4958:	0c03      	lsrs	r3, r0, #16
    495a:	428b      	cmp	r3, r1
    495c:	d302      	bcc.n	4964 <__divsi3+0x38>
    495e:	1212      	asrs	r2, r2, #8
    4960:	0209      	lsls	r1, r1, #8
    4962:	d065      	beq.n	4a30 <__divsi3+0x104>
    4964:	0b03      	lsrs	r3, r0, #12
    4966:	428b      	cmp	r3, r1
    4968:	d319      	bcc.n	499e <__divsi3+0x72>
    496a:	e000      	b.n	496e <__divsi3+0x42>
    496c:	0a09      	lsrs	r1, r1, #8
    496e:	0bc3      	lsrs	r3, r0, #15
    4970:	428b      	cmp	r3, r1
    4972:	d301      	bcc.n	4978 <__divsi3+0x4c>
    4974:	03cb      	lsls	r3, r1, #15
    4976:	1ac0      	subs	r0, r0, r3
    4978:	4152      	adcs	r2, r2
    497a:	0b83      	lsrs	r3, r0, #14
    497c:	428b      	cmp	r3, r1
    497e:	d301      	bcc.n	4984 <__divsi3+0x58>
    4980:	038b      	lsls	r3, r1, #14
    4982:	1ac0      	subs	r0, r0, r3
    4984:	4152      	adcs	r2, r2
    4986:	0b43      	lsrs	r3, r0, #13
    4988:	428b      	cmp	r3, r1
    498a:	d301      	bcc.n	4990 <__divsi3+0x64>
    498c:	034b      	lsls	r3, r1, #13
    498e:	1ac0      	subs	r0, r0, r3
    4990:	4152      	adcs	r2, r2
    4992:	0b03      	lsrs	r3, r0, #12
    4994:	428b      	cmp	r3, r1
    4996:	d301      	bcc.n	499c <__divsi3+0x70>
    4998:	030b      	lsls	r3, r1, #12
    499a:	1ac0      	subs	r0, r0, r3
    499c:	4152      	adcs	r2, r2
    499e:	0ac3      	lsrs	r3, r0, #11
    49a0:	428b      	cmp	r3, r1
    49a2:	d301      	bcc.n	49a8 <__divsi3+0x7c>
    49a4:	02cb      	lsls	r3, r1, #11
    49a6:	1ac0      	subs	r0, r0, r3
    49a8:	4152      	adcs	r2, r2
    49aa:	0a83      	lsrs	r3, r0, #10
    49ac:	428b      	cmp	r3, r1
    49ae:	d301      	bcc.n	49b4 <__divsi3+0x88>
    49b0:	028b      	lsls	r3, r1, #10
    49b2:	1ac0      	subs	r0, r0, r3
    49b4:	4152      	adcs	r2, r2
    49b6:	0a43      	lsrs	r3, r0, #9
    49b8:	428b      	cmp	r3, r1
    49ba:	d301      	bcc.n	49c0 <__divsi3+0x94>
    49bc:	024b      	lsls	r3, r1, #9
    49be:	1ac0      	subs	r0, r0, r3
    49c0:	4152      	adcs	r2, r2
    49c2:	0a03      	lsrs	r3, r0, #8
    49c4:	428b      	cmp	r3, r1
    49c6:	d301      	bcc.n	49cc <__divsi3+0xa0>
    49c8:	020b      	lsls	r3, r1, #8
    49ca:	1ac0      	subs	r0, r0, r3
    49cc:	4152      	adcs	r2, r2
    49ce:	d2cd      	bcs.n	496c <__divsi3+0x40>
    49d0:	09c3      	lsrs	r3, r0, #7
    49d2:	428b      	cmp	r3, r1
    49d4:	d301      	bcc.n	49da <__divsi3+0xae>
    49d6:	01cb      	lsls	r3, r1, #7
    49d8:	1ac0      	subs	r0, r0, r3
    49da:	4152      	adcs	r2, r2
    49dc:	0983      	lsrs	r3, r0, #6
    49de:	428b      	cmp	r3, r1
    49e0:	d301      	bcc.n	49e6 <__divsi3+0xba>
    49e2:	018b      	lsls	r3, r1, #6
    49e4:	1ac0      	subs	r0, r0, r3
    49e6:	4152      	adcs	r2, r2
    49e8:	0943      	lsrs	r3, r0, #5
    49ea:	428b      	cmp	r3, r1
    49ec:	d301      	bcc.n	49f2 <__divsi3+0xc6>
    49ee:	014b      	lsls	r3, r1, #5
    49f0:	1ac0      	subs	r0, r0, r3
    49f2:	4152      	adcs	r2, r2
    49f4:	0903      	lsrs	r3, r0, #4
    49f6:	428b      	cmp	r3, r1
    49f8:	d301      	bcc.n	49fe <__divsi3+0xd2>
    49fa:	010b      	lsls	r3, r1, #4
    49fc:	1ac0      	subs	r0, r0, r3
    49fe:	4152      	adcs	r2, r2
    4a00:	08c3      	lsrs	r3, r0, #3
    4a02:	428b      	cmp	r3, r1
    4a04:	d301      	bcc.n	4a0a <__divsi3+0xde>
    4a06:	00cb      	lsls	r3, r1, #3
    4a08:	1ac0      	subs	r0, r0, r3
    4a0a:	4152      	adcs	r2, r2
    4a0c:	0883      	lsrs	r3, r0, #2
    4a0e:	428b      	cmp	r3, r1
    4a10:	d301      	bcc.n	4a16 <__divsi3+0xea>
    4a12:	008b      	lsls	r3, r1, #2
    4a14:	1ac0      	subs	r0, r0, r3
    4a16:	4152      	adcs	r2, r2
    4a18:	0843      	lsrs	r3, r0, #1
    4a1a:	428b      	cmp	r3, r1
    4a1c:	d301      	bcc.n	4a22 <__divsi3+0xf6>
    4a1e:	004b      	lsls	r3, r1, #1
    4a20:	1ac0      	subs	r0, r0, r3
    4a22:	4152      	adcs	r2, r2
    4a24:	1a41      	subs	r1, r0, r1
    4a26:	d200      	bcs.n	4a2a <__divsi3+0xfe>
    4a28:	4601      	mov	r1, r0
    4a2a:	4152      	adcs	r2, r2
    4a2c:	4610      	mov	r0, r2
    4a2e:	4770      	bx	lr
    4a30:	e05d      	b.n	4aee <__divsi3+0x1c2>
    4a32:	0fca      	lsrs	r2, r1, #31
    4a34:	d000      	beq.n	4a38 <__divsi3+0x10c>
    4a36:	4249      	negs	r1, r1
    4a38:	1003      	asrs	r3, r0, #32
    4a3a:	d300      	bcc.n	4a3e <__divsi3+0x112>
    4a3c:	4240      	negs	r0, r0
    4a3e:	4053      	eors	r3, r2
    4a40:	2200      	movs	r2, #0
    4a42:	469c      	mov	ip, r3
    4a44:	0903      	lsrs	r3, r0, #4
    4a46:	428b      	cmp	r3, r1
    4a48:	d32d      	bcc.n	4aa6 <__divsi3+0x17a>
    4a4a:	0a03      	lsrs	r3, r0, #8
    4a4c:	428b      	cmp	r3, r1
    4a4e:	d312      	bcc.n	4a76 <__divsi3+0x14a>
    4a50:	22fc      	movs	r2, #252	; 0xfc
    4a52:	0189      	lsls	r1, r1, #6
    4a54:	ba12      	rev	r2, r2
    4a56:	0a03      	lsrs	r3, r0, #8
    4a58:	428b      	cmp	r3, r1
    4a5a:	d30c      	bcc.n	4a76 <__divsi3+0x14a>
    4a5c:	0189      	lsls	r1, r1, #6
    4a5e:	1192      	asrs	r2, r2, #6
    4a60:	428b      	cmp	r3, r1
    4a62:	d308      	bcc.n	4a76 <__divsi3+0x14a>
    4a64:	0189      	lsls	r1, r1, #6
    4a66:	1192      	asrs	r2, r2, #6
    4a68:	428b      	cmp	r3, r1
    4a6a:	d304      	bcc.n	4a76 <__divsi3+0x14a>
    4a6c:	0189      	lsls	r1, r1, #6
    4a6e:	d03a      	beq.n	4ae6 <__divsi3+0x1ba>
    4a70:	1192      	asrs	r2, r2, #6
    4a72:	e000      	b.n	4a76 <__divsi3+0x14a>
    4a74:	0989      	lsrs	r1, r1, #6
    4a76:	09c3      	lsrs	r3, r0, #7
    4a78:	428b      	cmp	r3, r1
    4a7a:	d301      	bcc.n	4a80 <__divsi3+0x154>
    4a7c:	01cb      	lsls	r3, r1, #7
    4a7e:	1ac0      	subs	r0, r0, r3
    4a80:	4152      	adcs	r2, r2
    4a82:	0983      	lsrs	r3, r0, #6
    4a84:	428b      	cmp	r3, r1
    4a86:	d301      	bcc.n	4a8c <__divsi3+0x160>
    4a88:	018b      	lsls	r3, r1, #6
    4a8a:	1ac0      	subs	r0, r0, r3
    4a8c:	4152      	adcs	r2, r2
    4a8e:	0943      	lsrs	r3, r0, #5
    4a90:	428b      	cmp	r3, r1
    4a92:	d301      	bcc.n	4a98 <__divsi3+0x16c>
    4a94:	014b      	lsls	r3, r1, #5
    4a96:	1ac0      	subs	r0, r0, r3
    4a98:	4152      	adcs	r2, r2
    4a9a:	0903      	lsrs	r3, r0, #4
    4a9c:	428b      	cmp	r3, r1
    4a9e:	d301      	bcc.n	4aa4 <__divsi3+0x178>
    4aa0:	010b      	lsls	r3, r1, #4
    4aa2:	1ac0      	subs	r0, r0, r3
    4aa4:	4152      	adcs	r2, r2
    4aa6:	08c3      	lsrs	r3, r0, #3
    4aa8:	428b      	cmp	r3, r1
    4aaa:	d301      	bcc.n	4ab0 <__divsi3+0x184>
    4aac:	00cb      	lsls	r3, r1, #3
    4aae:	1ac0      	subs	r0, r0, r3
    4ab0:	4152      	adcs	r2, r2
    4ab2:	0883      	lsrs	r3, r0, #2
    4ab4:	428b      	cmp	r3, r1
    4ab6:	d301      	bcc.n	4abc <__divsi3+0x190>
    4ab8:	008b      	lsls	r3, r1, #2
    4aba:	1ac0      	subs	r0, r0, r3
    4abc:	4152      	adcs	r2, r2
    4abe:	d2d9      	bcs.n	4a74 <__divsi3+0x148>
    4ac0:	0843      	lsrs	r3, r0, #1
    4ac2:	428b      	cmp	r3, r1
    4ac4:	d301      	bcc.n	4aca <__divsi3+0x19e>
    4ac6:	004b      	lsls	r3, r1, #1
    4ac8:	1ac0      	subs	r0, r0, r3
    4aca:	4152      	adcs	r2, r2
    4acc:	1a41      	subs	r1, r0, r1
    4ace:	d200      	bcs.n	4ad2 <__divsi3+0x1a6>
    4ad0:	4601      	mov	r1, r0
    4ad2:	4663      	mov	r3, ip
    4ad4:	4152      	adcs	r2, r2
    4ad6:	105b      	asrs	r3, r3, #1
    4ad8:	4610      	mov	r0, r2
    4ada:	d301      	bcc.n	4ae0 <__divsi3+0x1b4>
    4adc:	4240      	negs	r0, r0
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d500      	bpl.n	4ae4 <__divsi3+0x1b8>
    4ae2:	4249      	negs	r1, r1
    4ae4:	4770      	bx	lr
    4ae6:	4663      	mov	r3, ip
    4ae8:	105b      	asrs	r3, r3, #1
    4aea:	d300      	bcc.n	4aee <__divsi3+0x1c2>
    4aec:	4240      	negs	r0, r0
    4aee:	b501      	push	{r0, lr}
    4af0:	2000      	movs	r0, #0
    4af2:	f000 f805 	bl	4b00 <__aeabi_idiv0>
    4af6:	bd02      	pop	{r1, pc}

00004af8 <__aeabi_idivmod>:
    4af8:	2900      	cmp	r1, #0
    4afa:	d0f8      	beq.n	4aee <__divsi3+0x1c2>
    4afc:	e716      	b.n	492c <__divsi3>
    4afe:	4770      	bx	lr

00004b00 <__aeabi_idiv0>:
    4b00:	4770      	bx	lr
    4b02:	46c0      	nop			; (mov r8, r8)

00004b04 <__aeabi_lmul>:
    4b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b06:	46ce      	mov	lr, r9
    4b08:	4647      	mov	r7, r8
    4b0a:	0415      	lsls	r5, r2, #16
    4b0c:	0c2d      	lsrs	r5, r5, #16
    4b0e:	002e      	movs	r6, r5
    4b10:	b580      	push	{r7, lr}
    4b12:	0407      	lsls	r7, r0, #16
    4b14:	0c14      	lsrs	r4, r2, #16
    4b16:	0c3f      	lsrs	r7, r7, #16
    4b18:	4699      	mov	r9, r3
    4b1a:	0c03      	lsrs	r3, r0, #16
    4b1c:	437e      	muls	r6, r7
    4b1e:	435d      	muls	r5, r3
    4b20:	4367      	muls	r7, r4
    4b22:	4363      	muls	r3, r4
    4b24:	197f      	adds	r7, r7, r5
    4b26:	0c34      	lsrs	r4, r6, #16
    4b28:	19e4      	adds	r4, r4, r7
    4b2a:	469c      	mov	ip, r3
    4b2c:	42a5      	cmp	r5, r4
    4b2e:	d903      	bls.n	4b38 <__aeabi_lmul+0x34>
    4b30:	2380      	movs	r3, #128	; 0x80
    4b32:	025b      	lsls	r3, r3, #9
    4b34:	4698      	mov	r8, r3
    4b36:	44c4      	add	ip, r8
    4b38:	464b      	mov	r3, r9
    4b3a:	4351      	muls	r1, r2
    4b3c:	4343      	muls	r3, r0
    4b3e:	0436      	lsls	r6, r6, #16
    4b40:	0c36      	lsrs	r6, r6, #16
    4b42:	0c25      	lsrs	r5, r4, #16
    4b44:	0424      	lsls	r4, r4, #16
    4b46:	4465      	add	r5, ip
    4b48:	19a4      	adds	r4, r4, r6
    4b4a:	1859      	adds	r1, r3, r1
    4b4c:	1949      	adds	r1, r1, r5
    4b4e:	0020      	movs	r0, r4
    4b50:	bc0c      	pop	{r2, r3}
    4b52:	4690      	mov	r8, r2
    4b54:	4699      	mov	r9, r3
    4b56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004b58 <__libc_init_array>:
    4b58:	b570      	push	{r4, r5, r6, lr}
    4b5a:	2600      	movs	r6, #0
    4b5c:	4d0c      	ldr	r5, [pc, #48]	; (4b90 <__libc_init_array+0x38>)
    4b5e:	4c0d      	ldr	r4, [pc, #52]	; (4b94 <__libc_init_array+0x3c>)
    4b60:	1b64      	subs	r4, r4, r5
    4b62:	10a4      	asrs	r4, r4, #2
    4b64:	42a6      	cmp	r6, r4
    4b66:	d109      	bne.n	4b7c <__libc_init_array+0x24>
    4b68:	2600      	movs	r6, #0
    4b6a:	f003 fb75 	bl	8258 <_init>
    4b6e:	4d0a      	ldr	r5, [pc, #40]	; (4b98 <__libc_init_array+0x40>)
    4b70:	4c0a      	ldr	r4, [pc, #40]	; (4b9c <__libc_init_array+0x44>)
    4b72:	1b64      	subs	r4, r4, r5
    4b74:	10a4      	asrs	r4, r4, #2
    4b76:	42a6      	cmp	r6, r4
    4b78:	d105      	bne.n	4b86 <__libc_init_array+0x2e>
    4b7a:	bd70      	pop	{r4, r5, r6, pc}
    4b7c:	00b3      	lsls	r3, r6, #2
    4b7e:	58eb      	ldr	r3, [r5, r3]
    4b80:	4798      	blx	r3
    4b82:	3601      	adds	r6, #1
    4b84:	e7ee      	b.n	4b64 <__libc_init_array+0xc>
    4b86:	00b3      	lsls	r3, r6, #2
    4b88:	58eb      	ldr	r3, [r5, r3]
    4b8a:	4798      	blx	r3
    4b8c:	3601      	adds	r6, #1
    4b8e:	e7f2      	b.n	4b76 <__libc_init_array+0x1e>
    4b90:	00008264 	.word	0x00008264
    4b94:	00008264 	.word	0x00008264
    4b98:	00008264 	.word	0x00008264
    4b9c:	00008268 	.word	0x00008268

00004ba0 <__itoa>:
    4ba0:	1e93      	subs	r3, r2, #2
    4ba2:	b510      	push	{r4, lr}
    4ba4:	000c      	movs	r4, r1
    4ba6:	2b22      	cmp	r3, #34	; 0x22
    4ba8:	d904      	bls.n	4bb4 <__itoa+0x14>
    4baa:	2300      	movs	r3, #0
    4bac:	001c      	movs	r4, r3
    4bae:	700b      	strb	r3, [r1, #0]
    4bb0:	0020      	movs	r0, r4
    4bb2:	bd10      	pop	{r4, pc}
    4bb4:	2a0a      	cmp	r2, #10
    4bb6:	d109      	bne.n	4bcc <__itoa+0x2c>
    4bb8:	2800      	cmp	r0, #0
    4bba:	da07      	bge.n	4bcc <__itoa+0x2c>
    4bbc:	232d      	movs	r3, #45	; 0x2d
    4bbe:	700b      	strb	r3, [r1, #0]
    4bc0:	2101      	movs	r1, #1
    4bc2:	4240      	negs	r0, r0
    4bc4:	1861      	adds	r1, r4, r1
    4bc6:	f000 fa3f 	bl	5048 <__utoa>
    4bca:	e7f1      	b.n	4bb0 <__itoa+0x10>
    4bcc:	2100      	movs	r1, #0
    4bce:	e7f9      	b.n	4bc4 <__itoa+0x24>

00004bd0 <itoa>:
    4bd0:	b510      	push	{r4, lr}
    4bd2:	f7ff ffe5 	bl	4ba0 <__itoa>
    4bd6:	bd10      	pop	{r4, pc}

00004bd8 <malloc>:
    4bd8:	b510      	push	{r4, lr}
    4bda:	4b03      	ldr	r3, [pc, #12]	; (4be8 <malloc+0x10>)
    4bdc:	0001      	movs	r1, r0
    4bde:	6818      	ldr	r0, [r3, #0]
    4be0:	f000 f860 	bl	4ca4 <_malloc_r>
    4be4:	bd10      	pop	{r4, pc}
    4be6:	46c0      	nop			; (mov r8, r8)
    4be8:	200001a4 	.word	0x200001a4

00004bec <memcpy>:
    4bec:	2300      	movs	r3, #0
    4bee:	b510      	push	{r4, lr}
    4bf0:	429a      	cmp	r2, r3
    4bf2:	d100      	bne.n	4bf6 <memcpy+0xa>
    4bf4:	bd10      	pop	{r4, pc}
    4bf6:	5ccc      	ldrb	r4, [r1, r3]
    4bf8:	54c4      	strb	r4, [r0, r3]
    4bfa:	3301      	adds	r3, #1
    4bfc:	e7f8      	b.n	4bf0 <memcpy+0x4>

00004bfe <memset>:
    4bfe:	0003      	movs	r3, r0
    4c00:	1882      	adds	r2, r0, r2
    4c02:	4293      	cmp	r3, r2
    4c04:	d100      	bne.n	4c08 <memset+0xa>
    4c06:	4770      	bx	lr
    4c08:	7019      	strb	r1, [r3, #0]
    4c0a:	3301      	adds	r3, #1
    4c0c:	e7f9      	b.n	4c02 <memset+0x4>
	...

00004c10 <_free_r>:
    4c10:	b570      	push	{r4, r5, r6, lr}
    4c12:	0005      	movs	r5, r0
    4c14:	2900      	cmp	r1, #0
    4c16:	d010      	beq.n	4c3a <_free_r+0x2a>
    4c18:	1f0c      	subs	r4, r1, #4
    4c1a:	6823      	ldr	r3, [r4, #0]
    4c1c:	2b00      	cmp	r3, #0
    4c1e:	da00      	bge.n	4c22 <_free_r+0x12>
    4c20:	18e4      	adds	r4, r4, r3
    4c22:	0028      	movs	r0, r5
    4c24:	f000 fc44 	bl	54b0 <__malloc_lock>
    4c28:	4a1d      	ldr	r2, [pc, #116]	; (4ca0 <_free_r+0x90>)
    4c2a:	6813      	ldr	r3, [r2, #0]
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d105      	bne.n	4c3c <_free_r+0x2c>
    4c30:	6063      	str	r3, [r4, #4]
    4c32:	6014      	str	r4, [r2, #0]
    4c34:	0028      	movs	r0, r5
    4c36:	f000 fc3c 	bl	54b2 <__malloc_unlock>
    4c3a:	bd70      	pop	{r4, r5, r6, pc}
    4c3c:	42a3      	cmp	r3, r4
    4c3e:	d909      	bls.n	4c54 <_free_r+0x44>
    4c40:	6821      	ldr	r1, [r4, #0]
    4c42:	1860      	adds	r0, r4, r1
    4c44:	4283      	cmp	r3, r0
    4c46:	d1f3      	bne.n	4c30 <_free_r+0x20>
    4c48:	6818      	ldr	r0, [r3, #0]
    4c4a:	685b      	ldr	r3, [r3, #4]
    4c4c:	1841      	adds	r1, r0, r1
    4c4e:	6021      	str	r1, [r4, #0]
    4c50:	e7ee      	b.n	4c30 <_free_r+0x20>
    4c52:	0013      	movs	r3, r2
    4c54:	685a      	ldr	r2, [r3, #4]
    4c56:	2a00      	cmp	r2, #0
    4c58:	d001      	beq.n	4c5e <_free_r+0x4e>
    4c5a:	42a2      	cmp	r2, r4
    4c5c:	d9f9      	bls.n	4c52 <_free_r+0x42>
    4c5e:	6819      	ldr	r1, [r3, #0]
    4c60:	1858      	adds	r0, r3, r1
    4c62:	42a0      	cmp	r0, r4
    4c64:	d10b      	bne.n	4c7e <_free_r+0x6e>
    4c66:	6820      	ldr	r0, [r4, #0]
    4c68:	1809      	adds	r1, r1, r0
    4c6a:	1858      	adds	r0, r3, r1
    4c6c:	6019      	str	r1, [r3, #0]
    4c6e:	4282      	cmp	r2, r0
    4c70:	d1e0      	bne.n	4c34 <_free_r+0x24>
    4c72:	6810      	ldr	r0, [r2, #0]
    4c74:	6852      	ldr	r2, [r2, #4]
    4c76:	1841      	adds	r1, r0, r1
    4c78:	6019      	str	r1, [r3, #0]
    4c7a:	605a      	str	r2, [r3, #4]
    4c7c:	e7da      	b.n	4c34 <_free_r+0x24>
    4c7e:	42a0      	cmp	r0, r4
    4c80:	d902      	bls.n	4c88 <_free_r+0x78>
    4c82:	230c      	movs	r3, #12
    4c84:	602b      	str	r3, [r5, #0]
    4c86:	e7d5      	b.n	4c34 <_free_r+0x24>
    4c88:	6821      	ldr	r1, [r4, #0]
    4c8a:	1860      	adds	r0, r4, r1
    4c8c:	4282      	cmp	r2, r0
    4c8e:	d103      	bne.n	4c98 <_free_r+0x88>
    4c90:	6810      	ldr	r0, [r2, #0]
    4c92:	6852      	ldr	r2, [r2, #4]
    4c94:	1841      	adds	r1, r0, r1
    4c96:	6021      	str	r1, [r4, #0]
    4c98:	6062      	str	r2, [r4, #4]
    4c9a:	605c      	str	r4, [r3, #4]
    4c9c:	e7ca      	b.n	4c34 <_free_r+0x24>
    4c9e:	46c0      	nop			; (mov r8, r8)
    4ca0:	200002f4 	.word	0x200002f4

00004ca4 <_malloc_r>:
    4ca4:	2303      	movs	r3, #3
    4ca6:	b570      	push	{r4, r5, r6, lr}
    4ca8:	1ccd      	adds	r5, r1, #3
    4caa:	439d      	bics	r5, r3
    4cac:	3508      	adds	r5, #8
    4cae:	0006      	movs	r6, r0
    4cb0:	2d0c      	cmp	r5, #12
    4cb2:	d21e      	bcs.n	4cf2 <_malloc_r+0x4e>
    4cb4:	250c      	movs	r5, #12
    4cb6:	42a9      	cmp	r1, r5
    4cb8:	d81d      	bhi.n	4cf6 <_malloc_r+0x52>
    4cba:	0030      	movs	r0, r6
    4cbc:	f000 fbf8 	bl	54b0 <__malloc_lock>
    4cc0:	4a25      	ldr	r2, [pc, #148]	; (4d58 <_malloc_r+0xb4>)
    4cc2:	6814      	ldr	r4, [r2, #0]
    4cc4:	0021      	movs	r1, r4
    4cc6:	2900      	cmp	r1, #0
    4cc8:	d119      	bne.n	4cfe <_malloc_r+0x5a>
    4cca:	4c24      	ldr	r4, [pc, #144]	; (4d5c <_malloc_r+0xb8>)
    4ccc:	6823      	ldr	r3, [r4, #0]
    4cce:	2b00      	cmp	r3, #0
    4cd0:	d103      	bne.n	4cda <_malloc_r+0x36>
    4cd2:	0030      	movs	r0, r6
    4cd4:	f000 f8dc 	bl	4e90 <_sbrk_r>
    4cd8:	6020      	str	r0, [r4, #0]
    4cda:	0029      	movs	r1, r5
    4cdc:	0030      	movs	r0, r6
    4cde:	f000 f8d7 	bl	4e90 <_sbrk_r>
    4ce2:	1c43      	adds	r3, r0, #1
    4ce4:	d12c      	bne.n	4d40 <_malloc_r+0x9c>
    4ce6:	230c      	movs	r3, #12
    4ce8:	0030      	movs	r0, r6
    4cea:	6033      	str	r3, [r6, #0]
    4cec:	f000 fbe1 	bl	54b2 <__malloc_unlock>
    4cf0:	e003      	b.n	4cfa <_malloc_r+0x56>
    4cf2:	2d00      	cmp	r5, #0
    4cf4:	dadf      	bge.n	4cb6 <_malloc_r+0x12>
    4cf6:	230c      	movs	r3, #12
    4cf8:	6033      	str	r3, [r6, #0]
    4cfa:	2000      	movs	r0, #0
    4cfc:	bd70      	pop	{r4, r5, r6, pc}
    4cfe:	680b      	ldr	r3, [r1, #0]
    4d00:	1b5b      	subs	r3, r3, r5
    4d02:	d41a      	bmi.n	4d3a <_malloc_r+0x96>
    4d04:	2b0b      	cmp	r3, #11
    4d06:	d903      	bls.n	4d10 <_malloc_r+0x6c>
    4d08:	600b      	str	r3, [r1, #0]
    4d0a:	18cc      	adds	r4, r1, r3
    4d0c:	6025      	str	r5, [r4, #0]
    4d0e:	e003      	b.n	4d18 <_malloc_r+0x74>
    4d10:	428c      	cmp	r4, r1
    4d12:	d10e      	bne.n	4d32 <_malloc_r+0x8e>
    4d14:	6863      	ldr	r3, [r4, #4]
    4d16:	6013      	str	r3, [r2, #0]
    4d18:	0030      	movs	r0, r6
    4d1a:	f000 fbca 	bl	54b2 <__malloc_unlock>
    4d1e:	0020      	movs	r0, r4
    4d20:	2207      	movs	r2, #7
    4d22:	300b      	adds	r0, #11
    4d24:	1d23      	adds	r3, r4, #4
    4d26:	4390      	bics	r0, r2
    4d28:	1ac3      	subs	r3, r0, r3
    4d2a:	d0e7      	beq.n	4cfc <_malloc_r+0x58>
    4d2c:	425a      	negs	r2, r3
    4d2e:	50e2      	str	r2, [r4, r3]
    4d30:	e7e4      	b.n	4cfc <_malloc_r+0x58>
    4d32:	684b      	ldr	r3, [r1, #4]
    4d34:	6063      	str	r3, [r4, #4]
    4d36:	000c      	movs	r4, r1
    4d38:	e7ee      	b.n	4d18 <_malloc_r+0x74>
    4d3a:	000c      	movs	r4, r1
    4d3c:	6849      	ldr	r1, [r1, #4]
    4d3e:	e7c2      	b.n	4cc6 <_malloc_r+0x22>
    4d40:	2303      	movs	r3, #3
    4d42:	1cc4      	adds	r4, r0, #3
    4d44:	439c      	bics	r4, r3
    4d46:	42a0      	cmp	r0, r4
    4d48:	d0e0      	beq.n	4d0c <_malloc_r+0x68>
    4d4a:	1a21      	subs	r1, r4, r0
    4d4c:	0030      	movs	r0, r6
    4d4e:	f000 f89f 	bl	4e90 <_sbrk_r>
    4d52:	1c43      	adds	r3, r0, #1
    4d54:	d1da      	bne.n	4d0c <_malloc_r+0x68>
    4d56:	e7c6      	b.n	4ce6 <_malloc_r+0x42>
    4d58:	200002f4 	.word	0x200002f4
    4d5c:	200002f8 	.word	0x200002f8

00004d60 <iprintf>:
    4d60:	b40f      	push	{r0, r1, r2, r3}
    4d62:	4b0b      	ldr	r3, [pc, #44]	; (4d90 <iprintf+0x30>)
    4d64:	b513      	push	{r0, r1, r4, lr}
    4d66:	681c      	ldr	r4, [r3, #0]
    4d68:	2c00      	cmp	r4, #0
    4d6a:	d005      	beq.n	4d78 <iprintf+0x18>
    4d6c:	69a3      	ldr	r3, [r4, #24]
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d102      	bne.n	4d78 <iprintf+0x18>
    4d72:	0020      	movs	r0, r4
    4d74:	f000 fa9a 	bl	52ac <__sinit>
    4d78:	ab05      	add	r3, sp, #20
    4d7a:	9a04      	ldr	r2, [sp, #16]
    4d7c:	68a1      	ldr	r1, [r4, #8]
    4d7e:	0020      	movs	r0, r4
    4d80:	9301      	str	r3, [sp, #4]
    4d82:	f000 fbbf 	bl	5504 <_vfiprintf_r>
    4d86:	bc16      	pop	{r1, r2, r4}
    4d88:	bc08      	pop	{r3}
    4d8a:	b004      	add	sp, #16
    4d8c:	4718      	bx	r3
    4d8e:	46c0      	nop			; (mov r8, r8)
    4d90:	200001a4 	.word	0x200001a4

00004d94 <putchar>:
    4d94:	4b08      	ldr	r3, [pc, #32]	; (4db8 <putchar+0x24>)
    4d96:	b570      	push	{r4, r5, r6, lr}
    4d98:	681c      	ldr	r4, [r3, #0]
    4d9a:	0005      	movs	r5, r0
    4d9c:	2c00      	cmp	r4, #0
    4d9e:	d005      	beq.n	4dac <putchar+0x18>
    4da0:	69a3      	ldr	r3, [r4, #24]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d102      	bne.n	4dac <putchar+0x18>
    4da6:	0020      	movs	r0, r4
    4da8:	f000 fa80 	bl	52ac <__sinit>
    4dac:	0029      	movs	r1, r5
    4dae:	68a2      	ldr	r2, [r4, #8]
    4db0:	0020      	movs	r0, r4
    4db2:	f000 fe4b 	bl	5a4c <_putc_r>
    4db6:	bd70      	pop	{r4, r5, r6, pc}
    4db8:	200001a4 	.word	0x200001a4

00004dbc <srand>:
    4dbc:	4b10      	ldr	r3, [pc, #64]	; (4e00 <srand+0x44>)
    4dbe:	b570      	push	{r4, r5, r6, lr}
    4dc0:	681c      	ldr	r4, [r3, #0]
    4dc2:	0005      	movs	r5, r0
    4dc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4dc6:	2b00      	cmp	r3, #0
    4dc8:	d115      	bne.n	4df6 <srand+0x3a>
    4dca:	2018      	movs	r0, #24
    4dcc:	f7ff ff04 	bl	4bd8 <malloc>
    4dd0:	4b0c      	ldr	r3, [pc, #48]	; (4e04 <srand+0x48>)
    4dd2:	63a0      	str	r0, [r4, #56]	; 0x38
    4dd4:	8003      	strh	r3, [r0, #0]
    4dd6:	4b0c      	ldr	r3, [pc, #48]	; (4e08 <srand+0x4c>)
    4dd8:	2201      	movs	r2, #1
    4dda:	8043      	strh	r3, [r0, #2]
    4ddc:	4b0b      	ldr	r3, [pc, #44]	; (4e0c <srand+0x50>)
    4dde:	8083      	strh	r3, [r0, #4]
    4de0:	4b0b      	ldr	r3, [pc, #44]	; (4e10 <srand+0x54>)
    4de2:	80c3      	strh	r3, [r0, #6]
    4de4:	4b0b      	ldr	r3, [pc, #44]	; (4e14 <srand+0x58>)
    4de6:	8103      	strh	r3, [r0, #8]
    4de8:	2305      	movs	r3, #5
    4dea:	8143      	strh	r3, [r0, #10]
    4dec:	3306      	adds	r3, #6
    4dee:	8183      	strh	r3, [r0, #12]
    4df0:	2300      	movs	r3, #0
    4df2:	6102      	str	r2, [r0, #16]
    4df4:	6143      	str	r3, [r0, #20]
    4df6:	2200      	movs	r2, #0
    4df8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4dfa:	611d      	str	r5, [r3, #16]
    4dfc:	615a      	str	r2, [r3, #20]
    4dfe:	bd70      	pop	{r4, r5, r6, pc}
    4e00:	200001a4 	.word	0x200001a4
    4e04:	0000330e 	.word	0x0000330e
    4e08:	ffffabcd 	.word	0xffffabcd
    4e0c:	00001234 	.word	0x00001234
    4e10:	ffffe66d 	.word	0xffffe66d
    4e14:	ffffdeec 	.word	0xffffdeec

00004e18 <rand>:
    4e18:	4b15      	ldr	r3, [pc, #84]	; (4e70 <rand+0x58>)
    4e1a:	b510      	push	{r4, lr}
    4e1c:	681c      	ldr	r4, [r3, #0]
    4e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4e20:	2b00      	cmp	r3, #0
    4e22:	d115      	bne.n	4e50 <rand+0x38>
    4e24:	2018      	movs	r0, #24
    4e26:	f7ff fed7 	bl	4bd8 <malloc>
    4e2a:	4b12      	ldr	r3, [pc, #72]	; (4e74 <rand+0x5c>)
    4e2c:	63a0      	str	r0, [r4, #56]	; 0x38
    4e2e:	8003      	strh	r3, [r0, #0]
    4e30:	4b11      	ldr	r3, [pc, #68]	; (4e78 <rand+0x60>)
    4e32:	2201      	movs	r2, #1
    4e34:	8043      	strh	r3, [r0, #2]
    4e36:	4b11      	ldr	r3, [pc, #68]	; (4e7c <rand+0x64>)
    4e38:	8083      	strh	r3, [r0, #4]
    4e3a:	4b11      	ldr	r3, [pc, #68]	; (4e80 <rand+0x68>)
    4e3c:	80c3      	strh	r3, [r0, #6]
    4e3e:	4b11      	ldr	r3, [pc, #68]	; (4e84 <rand+0x6c>)
    4e40:	8103      	strh	r3, [r0, #8]
    4e42:	2305      	movs	r3, #5
    4e44:	8143      	strh	r3, [r0, #10]
    4e46:	3306      	adds	r3, #6
    4e48:	8183      	strh	r3, [r0, #12]
    4e4a:	2300      	movs	r3, #0
    4e4c:	6102      	str	r2, [r0, #16]
    4e4e:	6143      	str	r3, [r0, #20]
    4e50:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4e52:	4a0d      	ldr	r2, [pc, #52]	; (4e88 <rand+0x70>)
    4e54:	6920      	ldr	r0, [r4, #16]
    4e56:	6961      	ldr	r1, [r4, #20]
    4e58:	4b0c      	ldr	r3, [pc, #48]	; (4e8c <rand+0x74>)
    4e5a:	f7ff fe53 	bl	4b04 <__aeabi_lmul>
    4e5e:	2201      	movs	r2, #1
    4e60:	2300      	movs	r3, #0
    4e62:	1880      	adds	r0, r0, r2
    4e64:	4159      	adcs	r1, r3
    4e66:	6120      	str	r0, [r4, #16]
    4e68:	6161      	str	r1, [r4, #20]
    4e6a:	0048      	lsls	r0, r1, #1
    4e6c:	0840      	lsrs	r0, r0, #1
    4e6e:	bd10      	pop	{r4, pc}
    4e70:	200001a4 	.word	0x200001a4
    4e74:	0000330e 	.word	0x0000330e
    4e78:	ffffabcd 	.word	0xffffabcd
    4e7c:	00001234 	.word	0x00001234
    4e80:	ffffe66d 	.word	0xffffe66d
    4e84:	ffffdeec 	.word	0xffffdeec
    4e88:	4c957f2d 	.word	0x4c957f2d
    4e8c:	5851f42d 	.word	0x5851f42d

00004e90 <_sbrk_r>:
    4e90:	2300      	movs	r3, #0
    4e92:	b570      	push	{r4, r5, r6, lr}
    4e94:	4c06      	ldr	r4, [pc, #24]	; (4eb0 <_sbrk_r+0x20>)
    4e96:	0005      	movs	r5, r0
    4e98:	0008      	movs	r0, r1
    4e9a:	6023      	str	r3, [r4, #0]
    4e9c:	f7fe face 	bl	343c <_sbrk>
    4ea0:	1c43      	adds	r3, r0, #1
    4ea2:	d103      	bne.n	4eac <_sbrk_r+0x1c>
    4ea4:	6823      	ldr	r3, [r4, #0]
    4ea6:	2b00      	cmp	r3, #0
    4ea8:	d000      	beq.n	4eac <_sbrk_r+0x1c>
    4eaa:	602b      	str	r3, [r5, #0]
    4eac:	bd70      	pop	{r4, r5, r6, pc}
    4eae:	46c0      	nop			; (mov r8, r8)
    4eb0:	20003124 	.word	0x20003124

00004eb4 <setbuf>:
    4eb4:	424a      	negs	r2, r1
    4eb6:	414a      	adcs	r2, r1
    4eb8:	2380      	movs	r3, #128	; 0x80
    4eba:	b510      	push	{r4, lr}
    4ebc:	0052      	lsls	r2, r2, #1
    4ebe:	00db      	lsls	r3, r3, #3
    4ec0:	f000 f802 	bl	4ec8 <setvbuf>
    4ec4:	bd10      	pop	{r4, pc}
	...

00004ec8 <setvbuf>:
    4ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eca:	001d      	movs	r5, r3
    4ecc:	4b4f      	ldr	r3, [pc, #316]	; (500c <setvbuf+0x144>)
    4ece:	b085      	sub	sp, #20
    4ed0:	681e      	ldr	r6, [r3, #0]
    4ed2:	0004      	movs	r4, r0
    4ed4:	000f      	movs	r7, r1
    4ed6:	9200      	str	r2, [sp, #0]
    4ed8:	2e00      	cmp	r6, #0
    4eda:	d005      	beq.n	4ee8 <setvbuf+0x20>
    4edc:	69b3      	ldr	r3, [r6, #24]
    4ede:	2b00      	cmp	r3, #0
    4ee0:	d102      	bne.n	4ee8 <setvbuf+0x20>
    4ee2:	0030      	movs	r0, r6
    4ee4:	f000 f9e2 	bl	52ac <__sinit>
    4ee8:	4b49      	ldr	r3, [pc, #292]	; (5010 <setvbuf+0x148>)
    4eea:	429c      	cmp	r4, r3
    4eec:	d150      	bne.n	4f90 <setvbuf+0xc8>
    4eee:	6874      	ldr	r4, [r6, #4]
    4ef0:	9b00      	ldr	r3, [sp, #0]
    4ef2:	2b02      	cmp	r3, #2
    4ef4:	d005      	beq.n	4f02 <setvbuf+0x3a>
    4ef6:	2b01      	cmp	r3, #1
    4ef8:	d900      	bls.n	4efc <setvbuf+0x34>
    4efa:	e084      	b.n	5006 <setvbuf+0x13e>
    4efc:	2d00      	cmp	r5, #0
    4efe:	da00      	bge.n	4f02 <setvbuf+0x3a>
    4f00:	e081      	b.n	5006 <setvbuf+0x13e>
    4f02:	0021      	movs	r1, r4
    4f04:	0030      	movs	r0, r6
    4f06:	f000 f963 	bl	51d0 <_fflush_r>
    4f0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4f0c:	2900      	cmp	r1, #0
    4f0e:	d008      	beq.n	4f22 <setvbuf+0x5a>
    4f10:	0023      	movs	r3, r4
    4f12:	3344      	adds	r3, #68	; 0x44
    4f14:	4299      	cmp	r1, r3
    4f16:	d002      	beq.n	4f1e <setvbuf+0x56>
    4f18:	0030      	movs	r0, r6
    4f1a:	f7ff fe79 	bl	4c10 <_free_r>
    4f1e:	2300      	movs	r3, #0
    4f20:	6363      	str	r3, [r4, #52]	; 0x34
    4f22:	2300      	movs	r3, #0
    4f24:	61a3      	str	r3, [r4, #24]
    4f26:	6063      	str	r3, [r4, #4]
    4f28:	89a3      	ldrh	r3, [r4, #12]
    4f2a:	061b      	lsls	r3, r3, #24
    4f2c:	d503      	bpl.n	4f36 <setvbuf+0x6e>
    4f2e:	6921      	ldr	r1, [r4, #16]
    4f30:	0030      	movs	r0, r6
    4f32:	f7ff fe6d 	bl	4c10 <_free_r>
    4f36:	89a3      	ldrh	r3, [r4, #12]
    4f38:	4a36      	ldr	r2, [pc, #216]	; (5014 <setvbuf+0x14c>)
    4f3a:	4013      	ands	r3, r2
    4f3c:	81a3      	strh	r3, [r4, #12]
    4f3e:	9b00      	ldr	r3, [sp, #0]
    4f40:	2b02      	cmp	r3, #2
    4f42:	d05a      	beq.n	4ffa <setvbuf+0x132>
    4f44:	ab03      	add	r3, sp, #12
    4f46:	aa02      	add	r2, sp, #8
    4f48:	0021      	movs	r1, r4
    4f4a:	0030      	movs	r0, r6
    4f4c:	f000 fa44 	bl	53d8 <__swhatbuf_r>
    4f50:	89a3      	ldrh	r3, [r4, #12]
    4f52:	4318      	orrs	r0, r3
    4f54:	81a0      	strh	r0, [r4, #12]
    4f56:	2d00      	cmp	r5, #0
    4f58:	d124      	bne.n	4fa4 <setvbuf+0xdc>
    4f5a:	9d02      	ldr	r5, [sp, #8]
    4f5c:	0028      	movs	r0, r5
    4f5e:	f7ff fe3b 	bl	4bd8 <malloc>
    4f62:	9501      	str	r5, [sp, #4]
    4f64:	1e07      	subs	r7, r0, #0
    4f66:	d142      	bne.n	4fee <setvbuf+0x126>
    4f68:	9b02      	ldr	r3, [sp, #8]
    4f6a:	9301      	str	r3, [sp, #4]
    4f6c:	42ab      	cmp	r3, r5
    4f6e:	d139      	bne.n	4fe4 <setvbuf+0x11c>
    4f70:	2001      	movs	r0, #1
    4f72:	4240      	negs	r0, r0
    4f74:	2302      	movs	r3, #2
    4f76:	89a2      	ldrh	r2, [r4, #12]
    4f78:	4313      	orrs	r3, r2
    4f7a:	81a3      	strh	r3, [r4, #12]
    4f7c:	2300      	movs	r3, #0
    4f7e:	60a3      	str	r3, [r4, #8]
    4f80:	0023      	movs	r3, r4
    4f82:	3347      	adds	r3, #71	; 0x47
    4f84:	6023      	str	r3, [r4, #0]
    4f86:	6123      	str	r3, [r4, #16]
    4f88:	2301      	movs	r3, #1
    4f8a:	6163      	str	r3, [r4, #20]
    4f8c:	b005      	add	sp, #20
    4f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f90:	4b21      	ldr	r3, [pc, #132]	; (5018 <setvbuf+0x150>)
    4f92:	429c      	cmp	r4, r3
    4f94:	d101      	bne.n	4f9a <setvbuf+0xd2>
    4f96:	68b4      	ldr	r4, [r6, #8]
    4f98:	e7aa      	b.n	4ef0 <setvbuf+0x28>
    4f9a:	4b20      	ldr	r3, [pc, #128]	; (501c <setvbuf+0x154>)
    4f9c:	429c      	cmp	r4, r3
    4f9e:	d1a7      	bne.n	4ef0 <setvbuf+0x28>
    4fa0:	68f4      	ldr	r4, [r6, #12]
    4fa2:	e7a5      	b.n	4ef0 <setvbuf+0x28>
    4fa4:	2f00      	cmp	r7, #0
    4fa6:	d0d9      	beq.n	4f5c <setvbuf+0x94>
    4fa8:	69b3      	ldr	r3, [r6, #24]
    4faa:	2b00      	cmp	r3, #0
    4fac:	d102      	bne.n	4fb4 <setvbuf+0xec>
    4fae:	0030      	movs	r0, r6
    4fb0:	f000 f97c 	bl	52ac <__sinit>
    4fb4:	9b00      	ldr	r3, [sp, #0]
    4fb6:	2b01      	cmp	r3, #1
    4fb8:	d103      	bne.n	4fc2 <setvbuf+0xfa>
    4fba:	89a3      	ldrh	r3, [r4, #12]
    4fbc:	9a00      	ldr	r2, [sp, #0]
    4fbe:	431a      	orrs	r2, r3
    4fc0:	81a2      	strh	r2, [r4, #12]
    4fc2:	2008      	movs	r0, #8
    4fc4:	89a3      	ldrh	r3, [r4, #12]
    4fc6:	6027      	str	r7, [r4, #0]
    4fc8:	6127      	str	r7, [r4, #16]
    4fca:	6165      	str	r5, [r4, #20]
    4fcc:	4018      	ands	r0, r3
    4fce:	d018      	beq.n	5002 <setvbuf+0x13a>
    4fd0:	2001      	movs	r0, #1
    4fd2:	4018      	ands	r0, r3
    4fd4:	2300      	movs	r3, #0
    4fd6:	4298      	cmp	r0, r3
    4fd8:	d011      	beq.n	4ffe <setvbuf+0x136>
    4fda:	426d      	negs	r5, r5
    4fdc:	60a3      	str	r3, [r4, #8]
    4fde:	61a5      	str	r5, [r4, #24]
    4fe0:	0018      	movs	r0, r3
    4fe2:	e7d3      	b.n	4f8c <setvbuf+0xc4>
    4fe4:	9801      	ldr	r0, [sp, #4]
    4fe6:	f7ff fdf7 	bl	4bd8 <malloc>
    4fea:	1e07      	subs	r7, r0, #0
    4fec:	d0c0      	beq.n	4f70 <setvbuf+0xa8>
    4fee:	2380      	movs	r3, #128	; 0x80
    4ff0:	89a2      	ldrh	r2, [r4, #12]
    4ff2:	9d01      	ldr	r5, [sp, #4]
    4ff4:	4313      	orrs	r3, r2
    4ff6:	81a3      	strh	r3, [r4, #12]
    4ff8:	e7d6      	b.n	4fa8 <setvbuf+0xe0>
    4ffa:	2000      	movs	r0, #0
    4ffc:	e7ba      	b.n	4f74 <setvbuf+0xac>
    4ffe:	60a5      	str	r5, [r4, #8]
    5000:	e7c4      	b.n	4f8c <setvbuf+0xc4>
    5002:	60a0      	str	r0, [r4, #8]
    5004:	e7c2      	b.n	4f8c <setvbuf+0xc4>
    5006:	2001      	movs	r0, #1
    5008:	4240      	negs	r0, r0
    500a:	e7bf      	b.n	4f8c <setvbuf+0xc4>
    500c:	200001a4 	.word	0x200001a4
    5010:	000081e4 	.word	0x000081e4
    5014:	fffff35c 	.word	0xfffff35c
    5018:	00008204 	.word	0x00008204
    501c:	000081c4 	.word	0x000081c4

00005020 <strcat>:
    5020:	0002      	movs	r2, r0
    5022:	b510      	push	{r4, lr}
    5024:	7813      	ldrb	r3, [r2, #0]
    5026:	2b00      	cmp	r3, #0
    5028:	d105      	bne.n	5036 <strcat+0x16>
    502a:	5ccc      	ldrb	r4, [r1, r3]
    502c:	54d4      	strb	r4, [r2, r3]
    502e:	3301      	adds	r3, #1
    5030:	2c00      	cmp	r4, #0
    5032:	d1fa      	bne.n	502a <strcat+0xa>
    5034:	bd10      	pop	{r4, pc}
    5036:	3201      	adds	r2, #1
    5038:	e7f4      	b.n	5024 <strcat+0x4>

0000503a <strlen>:
    503a:	2300      	movs	r3, #0
    503c:	5cc2      	ldrb	r2, [r0, r3]
    503e:	3301      	adds	r3, #1
    5040:	2a00      	cmp	r2, #0
    5042:	d1fb      	bne.n	503c <strlen+0x2>
    5044:	1e58      	subs	r0, r3, #1
    5046:	4770      	bx	lr

00005048 <__utoa>:
    5048:	b5f0      	push	{r4, r5, r6, r7, lr}
    504a:	0017      	movs	r7, r2
    504c:	b08f      	sub	sp, #60	; 0x3c
    504e:	2225      	movs	r2, #37	; 0x25
    5050:	0006      	movs	r6, r0
    5052:	000d      	movs	r5, r1
    5054:	a804      	add	r0, sp, #16
    5056:	4918      	ldr	r1, [pc, #96]	; (50b8 <__utoa+0x70>)
    5058:	f7ff fdc8 	bl	4bec <memcpy>
    505c:	aa04      	add	r2, sp, #16
    505e:	1ebb      	subs	r3, r7, #2
    5060:	2400      	movs	r4, #0
    5062:	9203      	str	r2, [sp, #12]
    5064:	2b22      	cmp	r3, #34	; 0x22
    5066:	d905      	bls.n	5074 <__utoa+0x2c>
    5068:	702c      	strb	r4, [r5, #0]
    506a:	0025      	movs	r5, r4
    506c:	0028      	movs	r0, r5
    506e:	b00f      	add	sp, #60	; 0x3c
    5070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5072:	9c01      	ldr	r4, [sp, #4]
    5074:	1c63      	adds	r3, r4, #1
    5076:	9301      	str	r3, [sp, #4]
    5078:	18eb      	adds	r3, r5, r3
    507a:	9300      	str	r3, [sp, #0]
    507c:	0030      	movs	r0, r6
    507e:	3b01      	subs	r3, #1
    5080:	0039      	movs	r1, r7
    5082:	9302      	str	r3, [sp, #8]
    5084:	f7ff fc4e 	bl	4924 <__aeabi_uidivmod>
    5088:	9b03      	ldr	r3, [sp, #12]
    508a:	9a02      	ldr	r2, [sp, #8]
    508c:	5c5b      	ldrb	r3, [r3, r1]
    508e:	0030      	movs	r0, r6
    5090:	7013      	strb	r3, [r2, #0]
    5092:	0039      	movs	r1, r7
    5094:	f7ff fbc0 	bl	4818 <__udivsi3>
    5098:	1e06      	subs	r6, r0, #0
    509a:	d1ea      	bne.n	5072 <__utoa+0x2a>
    509c:	9b00      	ldr	r3, [sp, #0]
    509e:	7018      	strb	r0, [r3, #0]
    50a0:	002b      	movs	r3, r5
    50a2:	1b5a      	subs	r2, r3, r5
    50a4:	4294      	cmp	r4, r2
    50a6:	dde1      	ble.n	506c <__utoa+0x24>
    50a8:	781a      	ldrb	r2, [r3, #0]
    50aa:	5d29      	ldrb	r1, [r5, r4]
    50ac:	7019      	strb	r1, [r3, #0]
    50ae:	552a      	strb	r2, [r5, r4]
    50b0:	3301      	adds	r3, #1
    50b2:	3c01      	subs	r4, #1
    50b4:	e7f5      	b.n	50a2 <__utoa+0x5a>
    50b6:	46c0      	nop			; (mov r8, r8)
    50b8:	0000819c 	.word	0x0000819c

000050bc <__sflush_r>:
    50bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    50be:	898a      	ldrh	r2, [r1, #12]
    50c0:	0005      	movs	r5, r0
    50c2:	000c      	movs	r4, r1
    50c4:	0713      	lsls	r3, r2, #28
    50c6:	d460      	bmi.n	518a <__sflush_r+0xce>
    50c8:	684b      	ldr	r3, [r1, #4]
    50ca:	2b00      	cmp	r3, #0
    50cc:	dc04      	bgt.n	50d8 <__sflush_r+0x1c>
    50ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    50d0:	2b00      	cmp	r3, #0
    50d2:	dc01      	bgt.n	50d8 <__sflush_r+0x1c>
    50d4:	2000      	movs	r0, #0
    50d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    50d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    50da:	2f00      	cmp	r7, #0
    50dc:	d0fa      	beq.n	50d4 <__sflush_r+0x18>
    50de:	2300      	movs	r3, #0
    50e0:	682e      	ldr	r6, [r5, #0]
    50e2:	602b      	str	r3, [r5, #0]
    50e4:	2380      	movs	r3, #128	; 0x80
    50e6:	015b      	lsls	r3, r3, #5
    50e8:	401a      	ands	r2, r3
    50ea:	d034      	beq.n	5156 <__sflush_r+0x9a>
    50ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
    50ee:	89a3      	ldrh	r3, [r4, #12]
    50f0:	075b      	lsls	r3, r3, #29
    50f2:	d506      	bpl.n	5102 <__sflush_r+0x46>
    50f4:	6863      	ldr	r3, [r4, #4]
    50f6:	1ac0      	subs	r0, r0, r3
    50f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    50fa:	2b00      	cmp	r3, #0
    50fc:	d001      	beq.n	5102 <__sflush_r+0x46>
    50fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5100:	1ac0      	subs	r0, r0, r3
    5102:	0002      	movs	r2, r0
    5104:	6a21      	ldr	r1, [r4, #32]
    5106:	2300      	movs	r3, #0
    5108:	0028      	movs	r0, r5
    510a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    510c:	47b8      	blx	r7
    510e:	89a1      	ldrh	r1, [r4, #12]
    5110:	1c43      	adds	r3, r0, #1
    5112:	d106      	bne.n	5122 <__sflush_r+0x66>
    5114:	682b      	ldr	r3, [r5, #0]
    5116:	2b1d      	cmp	r3, #29
    5118:	d831      	bhi.n	517e <__sflush_r+0xc2>
    511a:	4a2c      	ldr	r2, [pc, #176]	; (51cc <__sflush_r+0x110>)
    511c:	40da      	lsrs	r2, r3
    511e:	07d3      	lsls	r3, r2, #31
    5120:	d52d      	bpl.n	517e <__sflush_r+0xc2>
    5122:	2300      	movs	r3, #0
    5124:	6063      	str	r3, [r4, #4]
    5126:	6923      	ldr	r3, [r4, #16]
    5128:	6023      	str	r3, [r4, #0]
    512a:	04cb      	lsls	r3, r1, #19
    512c:	d505      	bpl.n	513a <__sflush_r+0x7e>
    512e:	1c43      	adds	r3, r0, #1
    5130:	d102      	bne.n	5138 <__sflush_r+0x7c>
    5132:	682b      	ldr	r3, [r5, #0]
    5134:	2b00      	cmp	r3, #0
    5136:	d100      	bne.n	513a <__sflush_r+0x7e>
    5138:	6560      	str	r0, [r4, #84]	; 0x54
    513a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    513c:	602e      	str	r6, [r5, #0]
    513e:	2900      	cmp	r1, #0
    5140:	d0c8      	beq.n	50d4 <__sflush_r+0x18>
    5142:	0023      	movs	r3, r4
    5144:	3344      	adds	r3, #68	; 0x44
    5146:	4299      	cmp	r1, r3
    5148:	d002      	beq.n	5150 <__sflush_r+0x94>
    514a:	0028      	movs	r0, r5
    514c:	f7ff fd60 	bl	4c10 <_free_r>
    5150:	2000      	movs	r0, #0
    5152:	6360      	str	r0, [r4, #52]	; 0x34
    5154:	e7bf      	b.n	50d6 <__sflush_r+0x1a>
    5156:	2301      	movs	r3, #1
    5158:	6a21      	ldr	r1, [r4, #32]
    515a:	0028      	movs	r0, r5
    515c:	47b8      	blx	r7
    515e:	1c43      	adds	r3, r0, #1
    5160:	d1c5      	bne.n	50ee <__sflush_r+0x32>
    5162:	682b      	ldr	r3, [r5, #0]
    5164:	2b00      	cmp	r3, #0
    5166:	d0c2      	beq.n	50ee <__sflush_r+0x32>
    5168:	2b1d      	cmp	r3, #29
    516a:	d001      	beq.n	5170 <__sflush_r+0xb4>
    516c:	2b16      	cmp	r3, #22
    516e:	d101      	bne.n	5174 <__sflush_r+0xb8>
    5170:	602e      	str	r6, [r5, #0]
    5172:	e7af      	b.n	50d4 <__sflush_r+0x18>
    5174:	2340      	movs	r3, #64	; 0x40
    5176:	89a2      	ldrh	r2, [r4, #12]
    5178:	4313      	orrs	r3, r2
    517a:	81a3      	strh	r3, [r4, #12]
    517c:	e7ab      	b.n	50d6 <__sflush_r+0x1a>
    517e:	2340      	movs	r3, #64	; 0x40
    5180:	430b      	orrs	r3, r1
    5182:	2001      	movs	r0, #1
    5184:	81a3      	strh	r3, [r4, #12]
    5186:	4240      	negs	r0, r0
    5188:	e7a5      	b.n	50d6 <__sflush_r+0x1a>
    518a:	690f      	ldr	r7, [r1, #16]
    518c:	2f00      	cmp	r7, #0
    518e:	d0a1      	beq.n	50d4 <__sflush_r+0x18>
    5190:	680b      	ldr	r3, [r1, #0]
    5192:	600f      	str	r7, [r1, #0]
    5194:	1bdb      	subs	r3, r3, r7
    5196:	9301      	str	r3, [sp, #4]
    5198:	2300      	movs	r3, #0
    519a:	0792      	lsls	r2, r2, #30
    519c:	d100      	bne.n	51a0 <__sflush_r+0xe4>
    519e:	694b      	ldr	r3, [r1, #20]
    51a0:	60a3      	str	r3, [r4, #8]
    51a2:	9b01      	ldr	r3, [sp, #4]
    51a4:	2b00      	cmp	r3, #0
    51a6:	dc00      	bgt.n	51aa <__sflush_r+0xee>
    51a8:	e794      	b.n	50d4 <__sflush_r+0x18>
    51aa:	9b01      	ldr	r3, [sp, #4]
    51ac:	003a      	movs	r2, r7
    51ae:	6a21      	ldr	r1, [r4, #32]
    51b0:	0028      	movs	r0, r5
    51b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    51b4:	47b0      	blx	r6
    51b6:	2800      	cmp	r0, #0
    51b8:	dc03      	bgt.n	51c2 <__sflush_r+0x106>
    51ba:	2340      	movs	r3, #64	; 0x40
    51bc:	89a2      	ldrh	r2, [r4, #12]
    51be:	4313      	orrs	r3, r2
    51c0:	e7df      	b.n	5182 <__sflush_r+0xc6>
    51c2:	9b01      	ldr	r3, [sp, #4]
    51c4:	183f      	adds	r7, r7, r0
    51c6:	1a1b      	subs	r3, r3, r0
    51c8:	9301      	str	r3, [sp, #4]
    51ca:	e7ea      	b.n	51a2 <__sflush_r+0xe6>
    51cc:	20400001 	.word	0x20400001

000051d0 <_fflush_r>:
    51d0:	690b      	ldr	r3, [r1, #16]
    51d2:	b570      	push	{r4, r5, r6, lr}
    51d4:	0005      	movs	r5, r0
    51d6:	000c      	movs	r4, r1
    51d8:	2b00      	cmp	r3, #0
    51da:	d101      	bne.n	51e0 <_fflush_r+0x10>
    51dc:	2000      	movs	r0, #0
    51de:	bd70      	pop	{r4, r5, r6, pc}
    51e0:	2800      	cmp	r0, #0
    51e2:	d004      	beq.n	51ee <_fflush_r+0x1e>
    51e4:	6983      	ldr	r3, [r0, #24]
    51e6:	2b00      	cmp	r3, #0
    51e8:	d101      	bne.n	51ee <_fflush_r+0x1e>
    51ea:	f000 f85f 	bl	52ac <__sinit>
    51ee:	4b0b      	ldr	r3, [pc, #44]	; (521c <_fflush_r+0x4c>)
    51f0:	429c      	cmp	r4, r3
    51f2:	d109      	bne.n	5208 <_fflush_r+0x38>
    51f4:	686c      	ldr	r4, [r5, #4]
    51f6:	220c      	movs	r2, #12
    51f8:	5ea3      	ldrsh	r3, [r4, r2]
    51fa:	2b00      	cmp	r3, #0
    51fc:	d0ee      	beq.n	51dc <_fflush_r+0xc>
    51fe:	0021      	movs	r1, r4
    5200:	0028      	movs	r0, r5
    5202:	f7ff ff5b 	bl	50bc <__sflush_r>
    5206:	e7ea      	b.n	51de <_fflush_r+0xe>
    5208:	4b05      	ldr	r3, [pc, #20]	; (5220 <_fflush_r+0x50>)
    520a:	429c      	cmp	r4, r3
    520c:	d101      	bne.n	5212 <_fflush_r+0x42>
    520e:	68ac      	ldr	r4, [r5, #8]
    5210:	e7f1      	b.n	51f6 <_fflush_r+0x26>
    5212:	4b04      	ldr	r3, [pc, #16]	; (5224 <_fflush_r+0x54>)
    5214:	429c      	cmp	r4, r3
    5216:	d1ee      	bne.n	51f6 <_fflush_r+0x26>
    5218:	68ec      	ldr	r4, [r5, #12]
    521a:	e7ec      	b.n	51f6 <_fflush_r+0x26>
    521c:	000081e4 	.word	0x000081e4
    5220:	00008204 	.word	0x00008204
    5224:	000081c4 	.word	0x000081c4

00005228 <_cleanup_r>:
    5228:	b510      	push	{r4, lr}
    522a:	4902      	ldr	r1, [pc, #8]	; (5234 <_cleanup_r+0xc>)
    522c:	f000 f8b2 	bl	5394 <_fwalk_reent>
    5230:	bd10      	pop	{r4, pc}
    5232:	46c0      	nop			; (mov r8, r8)
    5234:	000051d1 	.word	0x000051d1

00005238 <std.isra.0>:
    5238:	2300      	movs	r3, #0
    523a:	b510      	push	{r4, lr}
    523c:	0004      	movs	r4, r0
    523e:	6003      	str	r3, [r0, #0]
    5240:	6043      	str	r3, [r0, #4]
    5242:	6083      	str	r3, [r0, #8]
    5244:	8181      	strh	r1, [r0, #12]
    5246:	6643      	str	r3, [r0, #100]	; 0x64
    5248:	81c2      	strh	r2, [r0, #14]
    524a:	6103      	str	r3, [r0, #16]
    524c:	6143      	str	r3, [r0, #20]
    524e:	6183      	str	r3, [r0, #24]
    5250:	0019      	movs	r1, r3
    5252:	2208      	movs	r2, #8
    5254:	305c      	adds	r0, #92	; 0x5c
    5256:	f7ff fcd2 	bl	4bfe <memset>
    525a:	4b05      	ldr	r3, [pc, #20]	; (5270 <std.isra.0+0x38>)
    525c:	6224      	str	r4, [r4, #32]
    525e:	6263      	str	r3, [r4, #36]	; 0x24
    5260:	4b04      	ldr	r3, [pc, #16]	; (5274 <std.isra.0+0x3c>)
    5262:	62a3      	str	r3, [r4, #40]	; 0x28
    5264:	4b04      	ldr	r3, [pc, #16]	; (5278 <std.isra.0+0x40>)
    5266:	62e3      	str	r3, [r4, #44]	; 0x2c
    5268:	4b04      	ldr	r3, [pc, #16]	; (527c <std.isra.0+0x44>)
    526a:	6323      	str	r3, [r4, #48]	; 0x30
    526c:	bd10      	pop	{r4, pc}
    526e:	46c0      	nop			; (mov r8, r8)
    5270:	00005ab9 	.word	0x00005ab9
    5274:	00005ae1 	.word	0x00005ae1
    5278:	00005b19 	.word	0x00005b19
    527c:	00005b45 	.word	0x00005b45

00005280 <__sfmoreglue>:
    5280:	b570      	push	{r4, r5, r6, lr}
    5282:	2568      	movs	r5, #104	; 0x68
    5284:	1e4a      	subs	r2, r1, #1
    5286:	4355      	muls	r5, r2
    5288:	000e      	movs	r6, r1
    528a:	0029      	movs	r1, r5
    528c:	3174      	adds	r1, #116	; 0x74
    528e:	f7ff fd09 	bl	4ca4 <_malloc_r>
    5292:	1e04      	subs	r4, r0, #0
    5294:	d008      	beq.n	52a8 <__sfmoreglue+0x28>
    5296:	2100      	movs	r1, #0
    5298:	002a      	movs	r2, r5
    529a:	6001      	str	r1, [r0, #0]
    529c:	6046      	str	r6, [r0, #4]
    529e:	300c      	adds	r0, #12
    52a0:	60a0      	str	r0, [r4, #8]
    52a2:	3268      	adds	r2, #104	; 0x68
    52a4:	f7ff fcab 	bl	4bfe <memset>
    52a8:	0020      	movs	r0, r4
    52aa:	bd70      	pop	{r4, r5, r6, pc}

000052ac <__sinit>:
    52ac:	6983      	ldr	r3, [r0, #24]
    52ae:	b513      	push	{r0, r1, r4, lr}
    52b0:	0004      	movs	r4, r0
    52b2:	2b00      	cmp	r3, #0
    52b4:	d128      	bne.n	5308 <__sinit+0x5c>
    52b6:	6483      	str	r3, [r0, #72]	; 0x48
    52b8:	64c3      	str	r3, [r0, #76]	; 0x4c
    52ba:	6503      	str	r3, [r0, #80]	; 0x50
    52bc:	4b13      	ldr	r3, [pc, #76]	; (530c <__sinit+0x60>)
    52be:	4a14      	ldr	r2, [pc, #80]	; (5310 <__sinit+0x64>)
    52c0:	681b      	ldr	r3, [r3, #0]
    52c2:	6282      	str	r2, [r0, #40]	; 0x28
    52c4:	9301      	str	r3, [sp, #4]
    52c6:	4298      	cmp	r0, r3
    52c8:	d101      	bne.n	52ce <__sinit+0x22>
    52ca:	2301      	movs	r3, #1
    52cc:	6183      	str	r3, [r0, #24]
    52ce:	0020      	movs	r0, r4
    52d0:	f000 f820 	bl	5314 <__sfp>
    52d4:	6060      	str	r0, [r4, #4]
    52d6:	0020      	movs	r0, r4
    52d8:	f000 f81c 	bl	5314 <__sfp>
    52dc:	60a0      	str	r0, [r4, #8]
    52de:	0020      	movs	r0, r4
    52e0:	f000 f818 	bl	5314 <__sfp>
    52e4:	2200      	movs	r2, #0
    52e6:	60e0      	str	r0, [r4, #12]
    52e8:	2104      	movs	r1, #4
    52ea:	6860      	ldr	r0, [r4, #4]
    52ec:	f7ff ffa4 	bl	5238 <std.isra.0>
    52f0:	2201      	movs	r2, #1
    52f2:	2109      	movs	r1, #9
    52f4:	68a0      	ldr	r0, [r4, #8]
    52f6:	f7ff ff9f 	bl	5238 <std.isra.0>
    52fa:	2202      	movs	r2, #2
    52fc:	2112      	movs	r1, #18
    52fe:	68e0      	ldr	r0, [r4, #12]
    5300:	f7ff ff9a 	bl	5238 <std.isra.0>
    5304:	2301      	movs	r3, #1
    5306:	61a3      	str	r3, [r4, #24]
    5308:	bd13      	pop	{r0, r1, r4, pc}
    530a:	46c0      	nop			; (mov r8, r8)
    530c:	00008198 	.word	0x00008198
    5310:	00005229 	.word	0x00005229

00005314 <__sfp>:
    5314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5316:	4b1e      	ldr	r3, [pc, #120]	; (5390 <__sfp+0x7c>)
    5318:	0007      	movs	r7, r0
    531a:	681e      	ldr	r6, [r3, #0]
    531c:	69b3      	ldr	r3, [r6, #24]
    531e:	2b00      	cmp	r3, #0
    5320:	d102      	bne.n	5328 <__sfp+0x14>
    5322:	0030      	movs	r0, r6
    5324:	f7ff ffc2 	bl	52ac <__sinit>
    5328:	3648      	adds	r6, #72	; 0x48
    532a:	68b4      	ldr	r4, [r6, #8]
    532c:	6873      	ldr	r3, [r6, #4]
    532e:	3b01      	subs	r3, #1
    5330:	d504      	bpl.n	533c <__sfp+0x28>
    5332:	6833      	ldr	r3, [r6, #0]
    5334:	2b00      	cmp	r3, #0
    5336:	d007      	beq.n	5348 <__sfp+0x34>
    5338:	6836      	ldr	r6, [r6, #0]
    533a:	e7f6      	b.n	532a <__sfp+0x16>
    533c:	220c      	movs	r2, #12
    533e:	5ea5      	ldrsh	r5, [r4, r2]
    5340:	2d00      	cmp	r5, #0
    5342:	d00d      	beq.n	5360 <__sfp+0x4c>
    5344:	3468      	adds	r4, #104	; 0x68
    5346:	e7f2      	b.n	532e <__sfp+0x1a>
    5348:	2104      	movs	r1, #4
    534a:	0038      	movs	r0, r7
    534c:	f7ff ff98 	bl	5280 <__sfmoreglue>
    5350:	6030      	str	r0, [r6, #0]
    5352:	2800      	cmp	r0, #0
    5354:	d1f0      	bne.n	5338 <__sfp+0x24>
    5356:	230c      	movs	r3, #12
    5358:	0004      	movs	r4, r0
    535a:	603b      	str	r3, [r7, #0]
    535c:	0020      	movs	r0, r4
    535e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5360:	2301      	movs	r3, #1
    5362:	0020      	movs	r0, r4
    5364:	425b      	negs	r3, r3
    5366:	81e3      	strh	r3, [r4, #14]
    5368:	3302      	adds	r3, #2
    536a:	81a3      	strh	r3, [r4, #12]
    536c:	6665      	str	r5, [r4, #100]	; 0x64
    536e:	6025      	str	r5, [r4, #0]
    5370:	60a5      	str	r5, [r4, #8]
    5372:	6065      	str	r5, [r4, #4]
    5374:	6125      	str	r5, [r4, #16]
    5376:	6165      	str	r5, [r4, #20]
    5378:	61a5      	str	r5, [r4, #24]
    537a:	2208      	movs	r2, #8
    537c:	0029      	movs	r1, r5
    537e:	305c      	adds	r0, #92	; 0x5c
    5380:	f7ff fc3d 	bl	4bfe <memset>
    5384:	6365      	str	r5, [r4, #52]	; 0x34
    5386:	63a5      	str	r5, [r4, #56]	; 0x38
    5388:	64a5      	str	r5, [r4, #72]	; 0x48
    538a:	64e5      	str	r5, [r4, #76]	; 0x4c
    538c:	e7e6      	b.n	535c <__sfp+0x48>
    538e:	46c0      	nop			; (mov r8, r8)
    5390:	00008198 	.word	0x00008198

00005394 <_fwalk_reent>:
    5394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5396:	0004      	movs	r4, r0
    5398:	0007      	movs	r7, r0
    539a:	2600      	movs	r6, #0
    539c:	9101      	str	r1, [sp, #4]
    539e:	3448      	adds	r4, #72	; 0x48
    53a0:	2c00      	cmp	r4, #0
    53a2:	d101      	bne.n	53a8 <_fwalk_reent+0x14>
    53a4:	0030      	movs	r0, r6
    53a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    53a8:	6863      	ldr	r3, [r4, #4]
    53aa:	68a5      	ldr	r5, [r4, #8]
    53ac:	9300      	str	r3, [sp, #0]
    53ae:	9b00      	ldr	r3, [sp, #0]
    53b0:	3b01      	subs	r3, #1
    53b2:	9300      	str	r3, [sp, #0]
    53b4:	d501      	bpl.n	53ba <_fwalk_reent+0x26>
    53b6:	6824      	ldr	r4, [r4, #0]
    53b8:	e7f2      	b.n	53a0 <_fwalk_reent+0xc>
    53ba:	89ab      	ldrh	r3, [r5, #12]
    53bc:	2b01      	cmp	r3, #1
    53be:	d908      	bls.n	53d2 <_fwalk_reent+0x3e>
    53c0:	220e      	movs	r2, #14
    53c2:	5eab      	ldrsh	r3, [r5, r2]
    53c4:	3301      	adds	r3, #1
    53c6:	d004      	beq.n	53d2 <_fwalk_reent+0x3e>
    53c8:	0029      	movs	r1, r5
    53ca:	0038      	movs	r0, r7
    53cc:	9b01      	ldr	r3, [sp, #4]
    53ce:	4798      	blx	r3
    53d0:	4306      	orrs	r6, r0
    53d2:	3568      	adds	r5, #104	; 0x68
    53d4:	e7eb      	b.n	53ae <_fwalk_reent+0x1a>
	...

000053d8 <__swhatbuf_r>:
    53d8:	b570      	push	{r4, r5, r6, lr}
    53da:	000e      	movs	r6, r1
    53dc:	001d      	movs	r5, r3
    53de:	230e      	movs	r3, #14
    53e0:	5ec9      	ldrsh	r1, [r1, r3]
    53e2:	b090      	sub	sp, #64	; 0x40
    53e4:	0014      	movs	r4, r2
    53e6:	2900      	cmp	r1, #0
    53e8:	da07      	bge.n	53fa <__swhatbuf_r+0x22>
    53ea:	2300      	movs	r3, #0
    53ec:	602b      	str	r3, [r5, #0]
    53ee:	89b3      	ldrh	r3, [r6, #12]
    53f0:	061b      	lsls	r3, r3, #24
    53f2:	d411      	bmi.n	5418 <__swhatbuf_r+0x40>
    53f4:	2380      	movs	r3, #128	; 0x80
    53f6:	00db      	lsls	r3, r3, #3
    53f8:	e00f      	b.n	541a <__swhatbuf_r+0x42>
    53fa:	aa01      	add	r2, sp, #4
    53fc:	f000 fc9a 	bl	5d34 <_fstat_r>
    5400:	2800      	cmp	r0, #0
    5402:	dbf2      	blt.n	53ea <__swhatbuf_r+0x12>
    5404:	22f0      	movs	r2, #240	; 0xf0
    5406:	9b02      	ldr	r3, [sp, #8]
    5408:	0212      	lsls	r2, r2, #8
    540a:	4013      	ands	r3, r2
    540c:	4a05      	ldr	r2, [pc, #20]	; (5424 <__swhatbuf_r+0x4c>)
    540e:	189b      	adds	r3, r3, r2
    5410:	425a      	negs	r2, r3
    5412:	4153      	adcs	r3, r2
    5414:	602b      	str	r3, [r5, #0]
    5416:	e7ed      	b.n	53f4 <__swhatbuf_r+0x1c>
    5418:	2340      	movs	r3, #64	; 0x40
    541a:	2000      	movs	r0, #0
    541c:	6023      	str	r3, [r4, #0]
    541e:	b010      	add	sp, #64	; 0x40
    5420:	bd70      	pop	{r4, r5, r6, pc}
    5422:	46c0      	nop			; (mov r8, r8)
    5424:	ffffe000 	.word	0xffffe000

00005428 <__smakebuf_r>:
    5428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    542a:	2602      	movs	r6, #2
    542c:	898b      	ldrh	r3, [r1, #12]
    542e:	0005      	movs	r5, r0
    5430:	000c      	movs	r4, r1
    5432:	4233      	tst	r3, r6
    5434:	d006      	beq.n	5444 <__smakebuf_r+0x1c>
    5436:	0023      	movs	r3, r4
    5438:	3347      	adds	r3, #71	; 0x47
    543a:	6023      	str	r3, [r4, #0]
    543c:	6123      	str	r3, [r4, #16]
    543e:	2301      	movs	r3, #1
    5440:	6163      	str	r3, [r4, #20]
    5442:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5444:	ab01      	add	r3, sp, #4
    5446:	466a      	mov	r2, sp
    5448:	f7ff ffc6 	bl	53d8 <__swhatbuf_r>
    544c:	9900      	ldr	r1, [sp, #0]
    544e:	0007      	movs	r7, r0
    5450:	0028      	movs	r0, r5
    5452:	f7ff fc27 	bl	4ca4 <_malloc_r>
    5456:	2800      	cmp	r0, #0
    5458:	d108      	bne.n	546c <__smakebuf_r+0x44>
    545a:	220c      	movs	r2, #12
    545c:	5ea3      	ldrsh	r3, [r4, r2]
    545e:	059a      	lsls	r2, r3, #22
    5460:	d4ef      	bmi.n	5442 <__smakebuf_r+0x1a>
    5462:	2203      	movs	r2, #3
    5464:	4393      	bics	r3, r2
    5466:	431e      	orrs	r6, r3
    5468:	81a6      	strh	r6, [r4, #12]
    546a:	e7e4      	b.n	5436 <__smakebuf_r+0xe>
    546c:	4b0f      	ldr	r3, [pc, #60]	; (54ac <__smakebuf_r+0x84>)
    546e:	62ab      	str	r3, [r5, #40]	; 0x28
    5470:	2380      	movs	r3, #128	; 0x80
    5472:	89a2      	ldrh	r2, [r4, #12]
    5474:	6020      	str	r0, [r4, #0]
    5476:	4313      	orrs	r3, r2
    5478:	81a3      	strh	r3, [r4, #12]
    547a:	9b00      	ldr	r3, [sp, #0]
    547c:	6120      	str	r0, [r4, #16]
    547e:	6163      	str	r3, [r4, #20]
    5480:	9b01      	ldr	r3, [sp, #4]
    5482:	2b00      	cmp	r3, #0
    5484:	d00d      	beq.n	54a2 <__smakebuf_r+0x7a>
    5486:	230e      	movs	r3, #14
    5488:	5ee1      	ldrsh	r1, [r4, r3]
    548a:	0028      	movs	r0, r5
    548c:	f000 fc64 	bl	5d58 <_isatty_r>
    5490:	2800      	cmp	r0, #0
    5492:	d006      	beq.n	54a2 <__smakebuf_r+0x7a>
    5494:	2203      	movs	r2, #3
    5496:	89a3      	ldrh	r3, [r4, #12]
    5498:	4393      	bics	r3, r2
    549a:	001a      	movs	r2, r3
    549c:	2301      	movs	r3, #1
    549e:	4313      	orrs	r3, r2
    54a0:	81a3      	strh	r3, [r4, #12]
    54a2:	89a0      	ldrh	r0, [r4, #12]
    54a4:	4338      	orrs	r0, r7
    54a6:	81a0      	strh	r0, [r4, #12]
    54a8:	e7cb      	b.n	5442 <__smakebuf_r+0x1a>
    54aa:	46c0      	nop			; (mov r8, r8)
    54ac:	00005229 	.word	0x00005229

000054b0 <__malloc_lock>:
    54b0:	4770      	bx	lr

000054b2 <__malloc_unlock>:
    54b2:	4770      	bx	lr

000054b4 <__sfputc_r>:
    54b4:	6893      	ldr	r3, [r2, #8]
    54b6:	b510      	push	{r4, lr}
    54b8:	3b01      	subs	r3, #1
    54ba:	6093      	str	r3, [r2, #8]
    54bc:	2b00      	cmp	r3, #0
    54be:	da05      	bge.n	54cc <__sfputc_r+0x18>
    54c0:	6994      	ldr	r4, [r2, #24]
    54c2:	42a3      	cmp	r3, r4
    54c4:	db08      	blt.n	54d8 <__sfputc_r+0x24>
    54c6:	b2cb      	uxtb	r3, r1
    54c8:	2b0a      	cmp	r3, #10
    54ca:	d005      	beq.n	54d8 <__sfputc_r+0x24>
    54cc:	6813      	ldr	r3, [r2, #0]
    54ce:	1c58      	adds	r0, r3, #1
    54d0:	6010      	str	r0, [r2, #0]
    54d2:	7019      	strb	r1, [r3, #0]
    54d4:	b2c8      	uxtb	r0, r1
    54d6:	bd10      	pop	{r4, pc}
    54d8:	f000 fb3a 	bl	5b50 <__swbuf_r>
    54dc:	e7fb      	b.n	54d6 <__sfputc_r+0x22>

000054de <__sfputs_r>:
    54de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54e0:	0006      	movs	r6, r0
    54e2:	000f      	movs	r7, r1
    54e4:	0014      	movs	r4, r2
    54e6:	18d5      	adds	r5, r2, r3
    54e8:	42ac      	cmp	r4, r5
    54ea:	d101      	bne.n	54f0 <__sfputs_r+0x12>
    54ec:	2000      	movs	r0, #0
    54ee:	e007      	b.n	5500 <__sfputs_r+0x22>
    54f0:	7821      	ldrb	r1, [r4, #0]
    54f2:	003a      	movs	r2, r7
    54f4:	0030      	movs	r0, r6
    54f6:	f7ff ffdd 	bl	54b4 <__sfputc_r>
    54fa:	3401      	adds	r4, #1
    54fc:	1c43      	adds	r3, r0, #1
    54fe:	d1f3      	bne.n	54e8 <__sfputs_r+0xa>
    5500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005504 <_vfiprintf_r>:
    5504:	b5f0      	push	{r4, r5, r6, r7, lr}
    5506:	b09f      	sub	sp, #124	; 0x7c
    5508:	0006      	movs	r6, r0
    550a:	000f      	movs	r7, r1
    550c:	0014      	movs	r4, r2
    550e:	9305      	str	r3, [sp, #20]
    5510:	2800      	cmp	r0, #0
    5512:	d004      	beq.n	551e <_vfiprintf_r+0x1a>
    5514:	6983      	ldr	r3, [r0, #24]
    5516:	2b00      	cmp	r3, #0
    5518:	d101      	bne.n	551e <_vfiprintf_r+0x1a>
    551a:	f7ff fec7 	bl	52ac <__sinit>
    551e:	4b7f      	ldr	r3, [pc, #508]	; (571c <_vfiprintf_r+0x218>)
    5520:	429f      	cmp	r7, r3
    5522:	d15c      	bne.n	55de <_vfiprintf_r+0xda>
    5524:	6877      	ldr	r7, [r6, #4]
    5526:	89bb      	ldrh	r3, [r7, #12]
    5528:	071b      	lsls	r3, r3, #28
    552a:	d562      	bpl.n	55f2 <_vfiprintf_r+0xee>
    552c:	693b      	ldr	r3, [r7, #16]
    552e:	2b00      	cmp	r3, #0
    5530:	d05f      	beq.n	55f2 <_vfiprintf_r+0xee>
    5532:	2300      	movs	r3, #0
    5534:	ad06      	add	r5, sp, #24
    5536:	616b      	str	r3, [r5, #20]
    5538:	3320      	adds	r3, #32
    553a:	766b      	strb	r3, [r5, #25]
    553c:	3310      	adds	r3, #16
    553e:	76ab      	strb	r3, [r5, #26]
    5540:	9402      	str	r4, [sp, #8]
    5542:	9c02      	ldr	r4, [sp, #8]
    5544:	7823      	ldrb	r3, [r4, #0]
    5546:	2b00      	cmp	r3, #0
    5548:	d15d      	bne.n	5606 <_vfiprintf_r+0x102>
    554a:	9b02      	ldr	r3, [sp, #8]
    554c:	1ae3      	subs	r3, r4, r3
    554e:	9304      	str	r3, [sp, #16]
    5550:	d00d      	beq.n	556e <_vfiprintf_r+0x6a>
    5552:	9b04      	ldr	r3, [sp, #16]
    5554:	9a02      	ldr	r2, [sp, #8]
    5556:	0039      	movs	r1, r7
    5558:	0030      	movs	r0, r6
    555a:	f7ff ffc0 	bl	54de <__sfputs_r>
    555e:	1c43      	adds	r3, r0, #1
    5560:	d100      	bne.n	5564 <_vfiprintf_r+0x60>
    5562:	e0cc      	b.n	56fe <_vfiprintf_r+0x1fa>
    5564:	696a      	ldr	r2, [r5, #20]
    5566:	9b04      	ldr	r3, [sp, #16]
    5568:	4694      	mov	ip, r2
    556a:	4463      	add	r3, ip
    556c:	616b      	str	r3, [r5, #20]
    556e:	7823      	ldrb	r3, [r4, #0]
    5570:	2b00      	cmp	r3, #0
    5572:	d100      	bne.n	5576 <_vfiprintf_r+0x72>
    5574:	e0c3      	b.n	56fe <_vfiprintf_r+0x1fa>
    5576:	2201      	movs	r2, #1
    5578:	2300      	movs	r3, #0
    557a:	4252      	negs	r2, r2
    557c:	606a      	str	r2, [r5, #4]
    557e:	a902      	add	r1, sp, #8
    5580:	3254      	adds	r2, #84	; 0x54
    5582:	1852      	adds	r2, r2, r1
    5584:	3401      	adds	r4, #1
    5586:	602b      	str	r3, [r5, #0]
    5588:	60eb      	str	r3, [r5, #12]
    558a:	60ab      	str	r3, [r5, #8]
    558c:	7013      	strb	r3, [r2, #0]
    558e:	65ab      	str	r3, [r5, #88]	; 0x58
    5590:	7821      	ldrb	r1, [r4, #0]
    5592:	2205      	movs	r2, #5
    5594:	4862      	ldr	r0, [pc, #392]	; (5720 <_vfiprintf_r+0x21c>)
    5596:	f000 fc05 	bl	5da4 <memchr>
    559a:	1c63      	adds	r3, r4, #1
    559c:	469c      	mov	ip, r3
    559e:	2800      	cmp	r0, #0
    55a0:	d135      	bne.n	560e <_vfiprintf_r+0x10a>
    55a2:	6829      	ldr	r1, [r5, #0]
    55a4:	06cb      	lsls	r3, r1, #27
    55a6:	d504      	bpl.n	55b2 <_vfiprintf_r+0xae>
    55a8:	2353      	movs	r3, #83	; 0x53
    55aa:	aa02      	add	r2, sp, #8
    55ac:	3020      	adds	r0, #32
    55ae:	189b      	adds	r3, r3, r2
    55b0:	7018      	strb	r0, [r3, #0]
    55b2:	070b      	lsls	r3, r1, #28
    55b4:	d504      	bpl.n	55c0 <_vfiprintf_r+0xbc>
    55b6:	2353      	movs	r3, #83	; 0x53
    55b8:	202b      	movs	r0, #43	; 0x2b
    55ba:	aa02      	add	r2, sp, #8
    55bc:	189b      	adds	r3, r3, r2
    55be:	7018      	strb	r0, [r3, #0]
    55c0:	7823      	ldrb	r3, [r4, #0]
    55c2:	2b2a      	cmp	r3, #42	; 0x2a
    55c4:	d02c      	beq.n	5620 <_vfiprintf_r+0x11c>
    55c6:	2000      	movs	r0, #0
    55c8:	210a      	movs	r1, #10
    55ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    55cc:	7822      	ldrb	r2, [r4, #0]
    55ce:	3a30      	subs	r2, #48	; 0x30
    55d0:	2a09      	cmp	r2, #9
    55d2:	d800      	bhi.n	55d6 <_vfiprintf_r+0xd2>
    55d4:	e06b      	b.n	56ae <_vfiprintf_r+0x1aa>
    55d6:	2800      	cmp	r0, #0
    55d8:	d02a      	beq.n	5630 <_vfiprintf_r+0x12c>
    55da:	9309      	str	r3, [sp, #36]	; 0x24
    55dc:	e028      	b.n	5630 <_vfiprintf_r+0x12c>
    55de:	4b51      	ldr	r3, [pc, #324]	; (5724 <_vfiprintf_r+0x220>)
    55e0:	429f      	cmp	r7, r3
    55e2:	d101      	bne.n	55e8 <_vfiprintf_r+0xe4>
    55e4:	68b7      	ldr	r7, [r6, #8]
    55e6:	e79e      	b.n	5526 <_vfiprintf_r+0x22>
    55e8:	4b4f      	ldr	r3, [pc, #316]	; (5728 <_vfiprintf_r+0x224>)
    55ea:	429f      	cmp	r7, r3
    55ec:	d19b      	bne.n	5526 <_vfiprintf_r+0x22>
    55ee:	68f7      	ldr	r7, [r6, #12]
    55f0:	e799      	b.n	5526 <_vfiprintf_r+0x22>
    55f2:	0039      	movs	r1, r7
    55f4:	0030      	movs	r0, r6
    55f6:	f000 fb15 	bl	5c24 <__swsetup_r>
    55fa:	2800      	cmp	r0, #0
    55fc:	d099      	beq.n	5532 <_vfiprintf_r+0x2e>
    55fe:	2001      	movs	r0, #1
    5600:	4240      	negs	r0, r0
    5602:	b01f      	add	sp, #124	; 0x7c
    5604:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5606:	2b25      	cmp	r3, #37	; 0x25
    5608:	d09f      	beq.n	554a <_vfiprintf_r+0x46>
    560a:	3401      	adds	r4, #1
    560c:	e79a      	b.n	5544 <_vfiprintf_r+0x40>
    560e:	4b44      	ldr	r3, [pc, #272]	; (5720 <_vfiprintf_r+0x21c>)
    5610:	6829      	ldr	r1, [r5, #0]
    5612:	1ac0      	subs	r0, r0, r3
    5614:	2301      	movs	r3, #1
    5616:	4083      	lsls	r3, r0
    5618:	430b      	orrs	r3, r1
    561a:	602b      	str	r3, [r5, #0]
    561c:	4664      	mov	r4, ip
    561e:	e7b7      	b.n	5590 <_vfiprintf_r+0x8c>
    5620:	9b05      	ldr	r3, [sp, #20]
    5622:	1d18      	adds	r0, r3, #4
    5624:	681b      	ldr	r3, [r3, #0]
    5626:	9005      	str	r0, [sp, #20]
    5628:	2b00      	cmp	r3, #0
    562a:	db3a      	blt.n	56a2 <_vfiprintf_r+0x19e>
    562c:	9309      	str	r3, [sp, #36]	; 0x24
    562e:	4664      	mov	r4, ip
    5630:	7823      	ldrb	r3, [r4, #0]
    5632:	2b2e      	cmp	r3, #46	; 0x2e
    5634:	d10b      	bne.n	564e <_vfiprintf_r+0x14a>
    5636:	7863      	ldrb	r3, [r4, #1]
    5638:	1c62      	adds	r2, r4, #1
    563a:	2b2a      	cmp	r3, #42	; 0x2a
    563c:	d13f      	bne.n	56be <_vfiprintf_r+0x1ba>
    563e:	9b05      	ldr	r3, [sp, #20]
    5640:	3402      	adds	r4, #2
    5642:	1d1a      	adds	r2, r3, #4
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	9205      	str	r2, [sp, #20]
    5648:	2b00      	cmp	r3, #0
    564a:	db35      	blt.n	56b8 <_vfiprintf_r+0x1b4>
    564c:	9307      	str	r3, [sp, #28]
    564e:	7821      	ldrb	r1, [r4, #0]
    5650:	2203      	movs	r2, #3
    5652:	4836      	ldr	r0, [pc, #216]	; (572c <_vfiprintf_r+0x228>)
    5654:	f000 fba6 	bl	5da4 <memchr>
    5658:	2800      	cmp	r0, #0
    565a:	d007      	beq.n	566c <_vfiprintf_r+0x168>
    565c:	4b33      	ldr	r3, [pc, #204]	; (572c <_vfiprintf_r+0x228>)
    565e:	682a      	ldr	r2, [r5, #0]
    5660:	1ac0      	subs	r0, r0, r3
    5662:	2340      	movs	r3, #64	; 0x40
    5664:	4083      	lsls	r3, r0
    5666:	4313      	orrs	r3, r2
    5668:	602b      	str	r3, [r5, #0]
    566a:	3401      	adds	r4, #1
    566c:	7821      	ldrb	r1, [r4, #0]
    566e:	1c63      	adds	r3, r4, #1
    5670:	2206      	movs	r2, #6
    5672:	482f      	ldr	r0, [pc, #188]	; (5730 <_vfiprintf_r+0x22c>)
    5674:	9302      	str	r3, [sp, #8]
    5676:	7629      	strb	r1, [r5, #24]
    5678:	f000 fb94 	bl	5da4 <memchr>
    567c:	2800      	cmp	r0, #0
    567e:	d044      	beq.n	570a <_vfiprintf_r+0x206>
    5680:	4b2c      	ldr	r3, [pc, #176]	; (5734 <_vfiprintf_r+0x230>)
    5682:	2b00      	cmp	r3, #0
    5684:	d12f      	bne.n	56e6 <_vfiprintf_r+0x1e2>
    5686:	6829      	ldr	r1, [r5, #0]
    5688:	9b05      	ldr	r3, [sp, #20]
    568a:	2207      	movs	r2, #7
    568c:	05c9      	lsls	r1, r1, #23
    568e:	d528      	bpl.n	56e2 <_vfiprintf_r+0x1de>
    5690:	189b      	adds	r3, r3, r2
    5692:	4393      	bics	r3, r2
    5694:	3308      	adds	r3, #8
    5696:	9305      	str	r3, [sp, #20]
    5698:	696b      	ldr	r3, [r5, #20]
    569a:	9a03      	ldr	r2, [sp, #12]
    569c:	189b      	adds	r3, r3, r2
    569e:	616b      	str	r3, [r5, #20]
    56a0:	e74f      	b.n	5542 <_vfiprintf_r+0x3e>
    56a2:	425b      	negs	r3, r3
    56a4:	60eb      	str	r3, [r5, #12]
    56a6:	2302      	movs	r3, #2
    56a8:	430b      	orrs	r3, r1
    56aa:	602b      	str	r3, [r5, #0]
    56ac:	e7bf      	b.n	562e <_vfiprintf_r+0x12a>
    56ae:	434b      	muls	r3, r1
    56b0:	3401      	adds	r4, #1
    56b2:	189b      	adds	r3, r3, r2
    56b4:	2001      	movs	r0, #1
    56b6:	e789      	b.n	55cc <_vfiprintf_r+0xc8>
    56b8:	2301      	movs	r3, #1
    56ba:	425b      	negs	r3, r3
    56bc:	e7c6      	b.n	564c <_vfiprintf_r+0x148>
    56be:	2300      	movs	r3, #0
    56c0:	0014      	movs	r4, r2
    56c2:	200a      	movs	r0, #10
    56c4:	001a      	movs	r2, r3
    56c6:	606b      	str	r3, [r5, #4]
    56c8:	7821      	ldrb	r1, [r4, #0]
    56ca:	3930      	subs	r1, #48	; 0x30
    56cc:	2909      	cmp	r1, #9
    56ce:	d903      	bls.n	56d8 <_vfiprintf_r+0x1d4>
    56d0:	2b00      	cmp	r3, #0
    56d2:	d0bc      	beq.n	564e <_vfiprintf_r+0x14a>
    56d4:	9207      	str	r2, [sp, #28]
    56d6:	e7ba      	b.n	564e <_vfiprintf_r+0x14a>
    56d8:	4342      	muls	r2, r0
    56da:	3401      	adds	r4, #1
    56dc:	1852      	adds	r2, r2, r1
    56de:	2301      	movs	r3, #1
    56e0:	e7f2      	b.n	56c8 <_vfiprintf_r+0x1c4>
    56e2:	3307      	adds	r3, #7
    56e4:	e7d5      	b.n	5692 <_vfiprintf_r+0x18e>
    56e6:	ab05      	add	r3, sp, #20
    56e8:	9300      	str	r3, [sp, #0]
    56ea:	003a      	movs	r2, r7
    56ec:	4b12      	ldr	r3, [pc, #72]	; (5738 <_vfiprintf_r+0x234>)
    56ee:	0029      	movs	r1, r5
    56f0:	0030      	movs	r0, r6
    56f2:	e000      	b.n	56f6 <_vfiprintf_r+0x1f2>
    56f4:	bf00      	nop
    56f6:	9003      	str	r0, [sp, #12]
    56f8:	9b03      	ldr	r3, [sp, #12]
    56fa:	3301      	adds	r3, #1
    56fc:	d1cc      	bne.n	5698 <_vfiprintf_r+0x194>
    56fe:	89bb      	ldrh	r3, [r7, #12]
    5700:	065b      	lsls	r3, r3, #25
    5702:	d500      	bpl.n	5706 <_vfiprintf_r+0x202>
    5704:	e77b      	b.n	55fe <_vfiprintf_r+0xfa>
    5706:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5708:	e77b      	b.n	5602 <_vfiprintf_r+0xfe>
    570a:	ab05      	add	r3, sp, #20
    570c:	9300      	str	r3, [sp, #0]
    570e:	003a      	movs	r2, r7
    5710:	4b09      	ldr	r3, [pc, #36]	; (5738 <_vfiprintf_r+0x234>)
    5712:	0029      	movs	r1, r5
    5714:	0030      	movs	r0, r6
    5716:	f000 f87f 	bl	5818 <_printf_i>
    571a:	e7ec      	b.n	56f6 <_vfiprintf_r+0x1f2>
    571c:	000081e4 	.word	0x000081e4
    5720:	00008224 	.word	0x00008224
    5724:	00008204 	.word	0x00008204
    5728:	000081c4 	.word	0x000081c4
    572c:	0000822a 	.word	0x0000822a
    5730:	0000822e 	.word	0x0000822e
    5734:	00000000 	.word	0x00000000
    5738:	000054df 	.word	0x000054df

0000573c <_printf_common>:
    573c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    573e:	0015      	movs	r5, r2
    5740:	9301      	str	r3, [sp, #4]
    5742:	688a      	ldr	r2, [r1, #8]
    5744:	690b      	ldr	r3, [r1, #16]
    5746:	9000      	str	r0, [sp, #0]
    5748:	000c      	movs	r4, r1
    574a:	4293      	cmp	r3, r2
    574c:	da00      	bge.n	5750 <_printf_common+0x14>
    574e:	0013      	movs	r3, r2
    5750:	0022      	movs	r2, r4
    5752:	602b      	str	r3, [r5, #0]
    5754:	3243      	adds	r2, #67	; 0x43
    5756:	7812      	ldrb	r2, [r2, #0]
    5758:	2a00      	cmp	r2, #0
    575a:	d001      	beq.n	5760 <_printf_common+0x24>
    575c:	3301      	adds	r3, #1
    575e:	602b      	str	r3, [r5, #0]
    5760:	6823      	ldr	r3, [r4, #0]
    5762:	069b      	lsls	r3, r3, #26
    5764:	d502      	bpl.n	576c <_printf_common+0x30>
    5766:	682b      	ldr	r3, [r5, #0]
    5768:	3302      	adds	r3, #2
    576a:	602b      	str	r3, [r5, #0]
    576c:	2706      	movs	r7, #6
    576e:	6823      	ldr	r3, [r4, #0]
    5770:	401f      	ands	r7, r3
    5772:	d027      	beq.n	57c4 <_printf_common+0x88>
    5774:	0023      	movs	r3, r4
    5776:	3343      	adds	r3, #67	; 0x43
    5778:	781b      	ldrb	r3, [r3, #0]
    577a:	1e5a      	subs	r2, r3, #1
    577c:	4193      	sbcs	r3, r2
    577e:	6822      	ldr	r2, [r4, #0]
    5780:	0692      	lsls	r2, r2, #26
    5782:	d430      	bmi.n	57e6 <_printf_common+0xaa>
    5784:	0022      	movs	r2, r4
    5786:	9901      	ldr	r1, [sp, #4]
    5788:	3243      	adds	r2, #67	; 0x43
    578a:	9800      	ldr	r0, [sp, #0]
    578c:	9e08      	ldr	r6, [sp, #32]
    578e:	47b0      	blx	r6
    5790:	1c43      	adds	r3, r0, #1
    5792:	d025      	beq.n	57e0 <_printf_common+0xa4>
    5794:	2306      	movs	r3, #6
    5796:	6820      	ldr	r0, [r4, #0]
    5798:	682a      	ldr	r2, [r5, #0]
    579a:	68e1      	ldr	r1, [r4, #12]
    579c:	4003      	ands	r3, r0
    579e:	2500      	movs	r5, #0
    57a0:	2b04      	cmp	r3, #4
    57a2:	d103      	bne.n	57ac <_printf_common+0x70>
    57a4:	1a8d      	subs	r5, r1, r2
    57a6:	43eb      	mvns	r3, r5
    57a8:	17db      	asrs	r3, r3, #31
    57aa:	401d      	ands	r5, r3
    57ac:	68a3      	ldr	r3, [r4, #8]
    57ae:	6922      	ldr	r2, [r4, #16]
    57b0:	4293      	cmp	r3, r2
    57b2:	dd01      	ble.n	57b8 <_printf_common+0x7c>
    57b4:	1a9b      	subs	r3, r3, r2
    57b6:	18ed      	adds	r5, r5, r3
    57b8:	2700      	movs	r7, #0
    57ba:	42bd      	cmp	r5, r7
    57bc:	d120      	bne.n	5800 <_printf_common+0xc4>
    57be:	2000      	movs	r0, #0
    57c0:	e010      	b.n	57e4 <_printf_common+0xa8>
    57c2:	3701      	adds	r7, #1
    57c4:	68e3      	ldr	r3, [r4, #12]
    57c6:	682a      	ldr	r2, [r5, #0]
    57c8:	1a9b      	subs	r3, r3, r2
    57ca:	429f      	cmp	r7, r3
    57cc:	dad2      	bge.n	5774 <_printf_common+0x38>
    57ce:	0022      	movs	r2, r4
    57d0:	2301      	movs	r3, #1
    57d2:	3219      	adds	r2, #25
    57d4:	9901      	ldr	r1, [sp, #4]
    57d6:	9800      	ldr	r0, [sp, #0]
    57d8:	9e08      	ldr	r6, [sp, #32]
    57da:	47b0      	blx	r6
    57dc:	1c43      	adds	r3, r0, #1
    57de:	d1f0      	bne.n	57c2 <_printf_common+0x86>
    57e0:	2001      	movs	r0, #1
    57e2:	4240      	negs	r0, r0
    57e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    57e6:	2030      	movs	r0, #48	; 0x30
    57e8:	18e1      	adds	r1, r4, r3
    57ea:	3143      	adds	r1, #67	; 0x43
    57ec:	7008      	strb	r0, [r1, #0]
    57ee:	0021      	movs	r1, r4
    57f0:	1c5a      	adds	r2, r3, #1
    57f2:	3145      	adds	r1, #69	; 0x45
    57f4:	7809      	ldrb	r1, [r1, #0]
    57f6:	18a2      	adds	r2, r4, r2
    57f8:	3243      	adds	r2, #67	; 0x43
    57fa:	3302      	adds	r3, #2
    57fc:	7011      	strb	r1, [r2, #0]
    57fe:	e7c1      	b.n	5784 <_printf_common+0x48>
    5800:	0022      	movs	r2, r4
    5802:	2301      	movs	r3, #1
    5804:	321a      	adds	r2, #26
    5806:	9901      	ldr	r1, [sp, #4]
    5808:	9800      	ldr	r0, [sp, #0]
    580a:	9e08      	ldr	r6, [sp, #32]
    580c:	47b0      	blx	r6
    580e:	1c43      	adds	r3, r0, #1
    5810:	d0e6      	beq.n	57e0 <_printf_common+0xa4>
    5812:	3701      	adds	r7, #1
    5814:	e7d1      	b.n	57ba <_printf_common+0x7e>
	...

00005818 <_printf_i>:
    5818:	b5f0      	push	{r4, r5, r6, r7, lr}
    581a:	b08b      	sub	sp, #44	; 0x2c
    581c:	9206      	str	r2, [sp, #24]
    581e:	000a      	movs	r2, r1
    5820:	3243      	adds	r2, #67	; 0x43
    5822:	9307      	str	r3, [sp, #28]
    5824:	9005      	str	r0, [sp, #20]
    5826:	9204      	str	r2, [sp, #16]
    5828:	7e0a      	ldrb	r2, [r1, #24]
    582a:	000c      	movs	r4, r1
    582c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    582e:	2a6e      	cmp	r2, #110	; 0x6e
    5830:	d100      	bne.n	5834 <_printf_i+0x1c>
    5832:	e08f      	b.n	5954 <_printf_i+0x13c>
    5834:	d817      	bhi.n	5866 <_printf_i+0x4e>
    5836:	2a63      	cmp	r2, #99	; 0x63
    5838:	d02c      	beq.n	5894 <_printf_i+0x7c>
    583a:	d808      	bhi.n	584e <_printf_i+0x36>
    583c:	2a00      	cmp	r2, #0
    583e:	d100      	bne.n	5842 <_printf_i+0x2a>
    5840:	e099      	b.n	5976 <_printf_i+0x15e>
    5842:	2a58      	cmp	r2, #88	; 0x58
    5844:	d054      	beq.n	58f0 <_printf_i+0xd8>
    5846:	0026      	movs	r6, r4
    5848:	3642      	adds	r6, #66	; 0x42
    584a:	7032      	strb	r2, [r6, #0]
    584c:	e029      	b.n	58a2 <_printf_i+0x8a>
    584e:	2a64      	cmp	r2, #100	; 0x64
    5850:	d001      	beq.n	5856 <_printf_i+0x3e>
    5852:	2a69      	cmp	r2, #105	; 0x69
    5854:	d1f7      	bne.n	5846 <_printf_i+0x2e>
    5856:	6821      	ldr	r1, [r4, #0]
    5858:	681a      	ldr	r2, [r3, #0]
    585a:	0608      	lsls	r0, r1, #24
    585c:	d523      	bpl.n	58a6 <_printf_i+0x8e>
    585e:	1d11      	adds	r1, r2, #4
    5860:	6019      	str	r1, [r3, #0]
    5862:	6815      	ldr	r5, [r2, #0]
    5864:	e025      	b.n	58b2 <_printf_i+0x9a>
    5866:	2a73      	cmp	r2, #115	; 0x73
    5868:	d100      	bne.n	586c <_printf_i+0x54>
    586a:	e088      	b.n	597e <_printf_i+0x166>
    586c:	d808      	bhi.n	5880 <_printf_i+0x68>
    586e:	2a6f      	cmp	r2, #111	; 0x6f
    5870:	d029      	beq.n	58c6 <_printf_i+0xae>
    5872:	2a70      	cmp	r2, #112	; 0x70
    5874:	d1e7      	bne.n	5846 <_printf_i+0x2e>
    5876:	2220      	movs	r2, #32
    5878:	6809      	ldr	r1, [r1, #0]
    587a:	430a      	orrs	r2, r1
    587c:	6022      	str	r2, [r4, #0]
    587e:	e003      	b.n	5888 <_printf_i+0x70>
    5880:	2a75      	cmp	r2, #117	; 0x75
    5882:	d020      	beq.n	58c6 <_printf_i+0xae>
    5884:	2a78      	cmp	r2, #120	; 0x78
    5886:	d1de      	bne.n	5846 <_printf_i+0x2e>
    5888:	0022      	movs	r2, r4
    588a:	2178      	movs	r1, #120	; 0x78
    588c:	3245      	adds	r2, #69	; 0x45
    588e:	7011      	strb	r1, [r2, #0]
    5890:	4a6c      	ldr	r2, [pc, #432]	; (5a44 <_printf_i+0x22c>)
    5892:	e030      	b.n	58f6 <_printf_i+0xde>
    5894:	000e      	movs	r6, r1
    5896:	681a      	ldr	r2, [r3, #0]
    5898:	3642      	adds	r6, #66	; 0x42
    589a:	1d11      	adds	r1, r2, #4
    589c:	6019      	str	r1, [r3, #0]
    589e:	6813      	ldr	r3, [r2, #0]
    58a0:	7033      	strb	r3, [r6, #0]
    58a2:	2301      	movs	r3, #1
    58a4:	e079      	b.n	599a <_printf_i+0x182>
    58a6:	0649      	lsls	r1, r1, #25
    58a8:	d5d9      	bpl.n	585e <_printf_i+0x46>
    58aa:	1d11      	adds	r1, r2, #4
    58ac:	6019      	str	r1, [r3, #0]
    58ae:	2300      	movs	r3, #0
    58b0:	5ed5      	ldrsh	r5, [r2, r3]
    58b2:	2d00      	cmp	r5, #0
    58b4:	da03      	bge.n	58be <_printf_i+0xa6>
    58b6:	232d      	movs	r3, #45	; 0x2d
    58b8:	9a04      	ldr	r2, [sp, #16]
    58ba:	426d      	negs	r5, r5
    58bc:	7013      	strb	r3, [r2, #0]
    58be:	4b62      	ldr	r3, [pc, #392]	; (5a48 <_printf_i+0x230>)
    58c0:	270a      	movs	r7, #10
    58c2:	9303      	str	r3, [sp, #12]
    58c4:	e02f      	b.n	5926 <_printf_i+0x10e>
    58c6:	6820      	ldr	r0, [r4, #0]
    58c8:	6819      	ldr	r1, [r3, #0]
    58ca:	0605      	lsls	r5, r0, #24
    58cc:	d503      	bpl.n	58d6 <_printf_i+0xbe>
    58ce:	1d08      	adds	r0, r1, #4
    58d0:	6018      	str	r0, [r3, #0]
    58d2:	680d      	ldr	r5, [r1, #0]
    58d4:	e005      	b.n	58e2 <_printf_i+0xca>
    58d6:	0640      	lsls	r0, r0, #25
    58d8:	d5f9      	bpl.n	58ce <_printf_i+0xb6>
    58da:	680d      	ldr	r5, [r1, #0]
    58dc:	1d08      	adds	r0, r1, #4
    58de:	6018      	str	r0, [r3, #0]
    58e0:	b2ad      	uxth	r5, r5
    58e2:	4b59      	ldr	r3, [pc, #356]	; (5a48 <_printf_i+0x230>)
    58e4:	2708      	movs	r7, #8
    58e6:	9303      	str	r3, [sp, #12]
    58e8:	2a6f      	cmp	r2, #111	; 0x6f
    58ea:	d018      	beq.n	591e <_printf_i+0x106>
    58ec:	270a      	movs	r7, #10
    58ee:	e016      	b.n	591e <_printf_i+0x106>
    58f0:	3145      	adds	r1, #69	; 0x45
    58f2:	700a      	strb	r2, [r1, #0]
    58f4:	4a54      	ldr	r2, [pc, #336]	; (5a48 <_printf_i+0x230>)
    58f6:	9203      	str	r2, [sp, #12]
    58f8:	681a      	ldr	r2, [r3, #0]
    58fa:	6821      	ldr	r1, [r4, #0]
    58fc:	1d10      	adds	r0, r2, #4
    58fe:	6018      	str	r0, [r3, #0]
    5900:	6815      	ldr	r5, [r2, #0]
    5902:	0608      	lsls	r0, r1, #24
    5904:	d522      	bpl.n	594c <_printf_i+0x134>
    5906:	07cb      	lsls	r3, r1, #31
    5908:	d502      	bpl.n	5910 <_printf_i+0xf8>
    590a:	2320      	movs	r3, #32
    590c:	4319      	orrs	r1, r3
    590e:	6021      	str	r1, [r4, #0]
    5910:	2710      	movs	r7, #16
    5912:	2d00      	cmp	r5, #0
    5914:	d103      	bne.n	591e <_printf_i+0x106>
    5916:	2320      	movs	r3, #32
    5918:	6822      	ldr	r2, [r4, #0]
    591a:	439a      	bics	r2, r3
    591c:	6022      	str	r2, [r4, #0]
    591e:	0023      	movs	r3, r4
    5920:	2200      	movs	r2, #0
    5922:	3343      	adds	r3, #67	; 0x43
    5924:	701a      	strb	r2, [r3, #0]
    5926:	6863      	ldr	r3, [r4, #4]
    5928:	60a3      	str	r3, [r4, #8]
    592a:	2b00      	cmp	r3, #0
    592c:	db5c      	blt.n	59e8 <_printf_i+0x1d0>
    592e:	2204      	movs	r2, #4
    5930:	6821      	ldr	r1, [r4, #0]
    5932:	4391      	bics	r1, r2
    5934:	6021      	str	r1, [r4, #0]
    5936:	2d00      	cmp	r5, #0
    5938:	d158      	bne.n	59ec <_printf_i+0x1d4>
    593a:	9e04      	ldr	r6, [sp, #16]
    593c:	2b00      	cmp	r3, #0
    593e:	d064      	beq.n	5a0a <_printf_i+0x1f2>
    5940:	0026      	movs	r6, r4
    5942:	9b03      	ldr	r3, [sp, #12]
    5944:	3642      	adds	r6, #66	; 0x42
    5946:	781b      	ldrb	r3, [r3, #0]
    5948:	7033      	strb	r3, [r6, #0]
    594a:	e05e      	b.n	5a0a <_printf_i+0x1f2>
    594c:	0648      	lsls	r0, r1, #25
    594e:	d5da      	bpl.n	5906 <_printf_i+0xee>
    5950:	b2ad      	uxth	r5, r5
    5952:	e7d8      	b.n	5906 <_printf_i+0xee>
    5954:	6809      	ldr	r1, [r1, #0]
    5956:	681a      	ldr	r2, [r3, #0]
    5958:	0608      	lsls	r0, r1, #24
    595a:	d505      	bpl.n	5968 <_printf_i+0x150>
    595c:	1d11      	adds	r1, r2, #4
    595e:	6019      	str	r1, [r3, #0]
    5960:	6813      	ldr	r3, [r2, #0]
    5962:	6962      	ldr	r2, [r4, #20]
    5964:	601a      	str	r2, [r3, #0]
    5966:	e006      	b.n	5976 <_printf_i+0x15e>
    5968:	0649      	lsls	r1, r1, #25
    596a:	d5f7      	bpl.n	595c <_printf_i+0x144>
    596c:	1d11      	adds	r1, r2, #4
    596e:	6019      	str	r1, [r3, #0]
    5970:	6813      	ldr	r3, [r2, #0]
    5972:	8aa2      	ldrh	r2, [r4, #20]
    5974:	801a      	strh	r2, [r3, #0]
    5976:	2300      	movs	r3, #0
    5978:	9e04      	ldr	r6, [sp, #16]
    597a:	6123      	str	r3, [r4, #16]
    597c:	e054      	b.n	5a28 <_printf_i+0x210>
    597e:	681a      	ldr	r2, [r3, #0]
    5980:	1d11      	adds	r1, r2, #4
    5982:	6019      	str	r1, [r3, #0]
    5984:	6816      	ldr	r6, [r2, #0]
    5986:	2100      	movs	r1, #0
    5988:	6862      	ldr	r2, [r4, #4]
    598a:	0030      	movs	r0, r6
    598c:	f000 fa0a 	bl	5da4 <memchr>
    5990:	2800      	cmp	r0, #0
    5992:	d001      	beq.n	5998 <_printf_i+0x180>
    5994:	1b80      	subs	r0, r0, r6
    5996:	6060      	str	r0, [r4, #4]
    5998:	6863      	ldr	r3, [r4, #4]
    599a:	6123      	str	r3, [r4, #16]
    599c:	2300      	movs	r3, #0
    599e:	9a04      	ldr	r2, [sp, #16]
    59a0:	7013      	strb	r3, [r2, #0]
    59a2:	e041      	b.n	5a28 <_printf_i+0x210>
    59a4:	6923      	ldr	r3, [r4, #16]
    59a6:	0032      	movs	r2, r6
    59a8:	9906      	ldr	r1, [sp, #24]
    59aa:	9805      	ldr	r0, [sp, #20]
    59ac:	9d07      	ldr	r5, [sp, #28]
    59ae:	47a8      	blx	r5
    59b0:	1c43      	adds	r3, r0, #1
    59b2:	d043      	beq.n	5a3c <_printf_i+0x224>
    59b4:	6823      	ldr	r3, [r4, #0]
    59b6:	2500      	movs	r5, #0
    59b8:	079b      	lsls	r3, r3, #30
    59ba:	d40f      	bmi.n	59dc <_printf_i+0x1c4>
    59bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59be:	68e0      	ldr	r0, [r4, #12]
    59c0:	4298      	cmp	r0, r3
    59c2:	da3d      	bge.n	5a40 <_printf_i+0x228>
    59c4:	0018      	movs	r0, r3
    59c6:	e03b      	b.n	5a40 <_printf_i+0x228>
    59c8:	0022      	movs	r2, r4
    59ca:	2301      	movs	r3, #1
    59cc:	3219      	adds	r2, #25
    59ce:	9906      	ldr	r1, [sp, #24]
    59d0:	9805      	ldr	r0, [sp, #20]
    59d2:	9e07      	ldr	r6, [sp, #28]
    59d4:	47b0      	blx	r6
    59d6:	1c43      	adds	r3, r0, #1
    59d8:	d030      	beq.n	5a3c <_printf_i+0x224>
    59da:	3501      	adds	r5, #1
    59dc:	68e3      	ldr	r3, [r4, #12]
    59de:	9a09      	ldr	r2, [sp, #36]	; 0x24
    59e0:	1a9b      	subs	r3, r3, r2
    59e2:	429d      	cmp	r5, r3
    59e4:	dbf0      	blt.n	59c8 <_printf_i+0x1b0>
    59e6:	e7e9      	b.n	59bc <_printf_i+0x1a4>
    59e8:	2d00      	cmp	r5, #0
    59ea:	d0a9      	beq.n	5940 <_printf_i+0x128>
    59ec:	9e04      	ldr	r6, [sp, #16]
    59ee:	0028      	movs	r0, r5
    59f0:	0039      	movs	r1, r7
    59f2:	f7fe ff97 	bl	4924 <__aeabi_uidivmod>
    59f6:	9b03      	ldr	r3, [sp, #12]
    59f8:	3e01      	subs	r6, #1
    59fa:	5c5b      	ldrb	r3, [r3, r1]
    59fc:	0028      	movs	r0, r5
    59fe:	7033      	strb	r3, [r6, #0]
    5a00:	0039      	movs	r1, r7
    5a02:	f7fe ff09 	bl	4818 <__udivsi3>
    5a06:	1e05      	subs	r5, r0, #0
    5a08:	d1f1      	bne.n	59ee <_printf_i+0x1d6>
    5a0a:	2f08      	cmp	r7, #8
    5a0c:	d109      	bne.n	5a22 <_printf_i+0x20a>
    5a0e:	6823      	ldr	r3, [r4, #0]
    5a10:	07db      	lsls	r3, r3, #31
    5a12:	d506      	bpl.n	5a22 <_printf_i+0x20a>
    5a14:	6863      	ldr	r3, [r4, #4]
    5a16:	6922      	ldr	r2, [r4, #16]
    5a18:	4293      	cmp	r3, r2
    5a1a:	dc02      	bgt.n	5a22 <_printf_i+0x20a>
    5a1c:	2330      	movs	r3, #48	; 0x30
    5a1e:	3e01      	subs	r6, #1
    5a20:	7033      	strb	r3, [r6, #0]
    5a22:	9b04      	ldr	r3, [sp, #16]
    5a24:	1b9b      	subs	r3, r3, r6
    5a26:	6123      	str	r3, [r4, #16]
    5a28:	9b07      	ldr	r3, [sp, #28]
    5a2a:	aa09      	add	r2, sp, #36	; 0x24
    5a2c:	9300      	str	r3, [sp, #0]
    5a2e:	0021      	movs	r1, r4
    5a30:	9b06      	ldr	r3, [sp, #24]
    5a32:	9805      	ldr	r0, [sp, #20]
    5a34:	f7ff fe82 	bl	573c <_printf_common>
    5a38:	1c43      	adds	r3, r0, #1
    5a3a:	d1b3      	bne.n	59a4 <_printf_i+0x18c>
    5a3c:	2001      	movs	r0, #1
    5a3e:	4240      	negs	r0, r0
    5a40:	b00b      	add	sp, #44	; 0x2c
    5a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a44:	00008246 	.word	0x00008246
    5a48:	00008235 	.word	0x00008235

00005a4c <_putc_r>:
    5a4c:	b570      	push	{r4, r5, r6, lr}
    5a4e:	0006      	movs	r6, r0
    5a50:	000d      	movs	r5, r1
    5a52:	0014      	movs	r4, r2
    5a54:	2800      	cmp	r0, #0
    5a56:	d004      	beq.n	5a62 <_putc_r+0x16>
    5a58:	6983      	ldr	r3, [r0, #24]
    5a5a:	2b00      	cmp	r3, #0
    5a5c:	d101      	bne.n	5a62 <_putc_r+0x16>
    5a5e:	f7ff fc25 	bl	52ac <__sinit>
    5a62:	4b12      	ldr	r3, [pc, #72]	; (5aac <_putc_r+0x60>)
    5a64:	429c      	cmp	r4, r3
    5a66:	d111      	bne.n	5a8c <_putc_r+0x40>
    5a68:	6874      	ldr	r4, [r6, #4]
    5a6a:	68a3      	ldr	r3, [r4, #8]
    5a6c:	3b01      	subs	r3, #1
    5a6e:	60a3      	str	r3, [r4, #8]
    5a70:	2b00      	cmp	r3, #0
    5a72:	da05      	bge.n	5a80 <_putc_r+0x34>
    5a74:	69a2      	ldr	r2, [r4, #24]
    5a76:	4293      	cmp	r3, r2
    5a78:	db12      	blt.n	5aa0 <_putc_r+0x54>
    5a7a:	b2eb      	uxtb	r3, r5
    5a7c:	2b0a      	cmp	r3, #10
    5a7e:	d00f      	beq.n	5aa0 <_putc_r+0x54>
    5a80:	6823      	ldr	r3, [r4, #0]
    5a82:	b2e8      	uxtb	r0, r5
    5a84:	1c5a      	adds	r2, r3, #1
    5a86:	6022      	str	r2, [r4, #0]
    5a88:	701d      	strb	r5, [r3, #0]
    5a8a:	bd70      	pop	{r4, r5, r6, pc}
    5a8c:	4b08      	ldr	r3, [pc, #32]	; (5ab0 <_putc_r+0x64>)
    5a8e:	429c      	cmp	r4, r3
    5a90:	d101      	bne.n	5a96 <_putc_r+0x4a>
    5a92:	68b4      	ldr	r4, [r6, #8]
    5a94:	e7e9      	b.n	5a6a <_putc_r+0x1e>
    5a96:	4b07      	ldr	r3, [pc, #28]	; (5ab4 <_putc_r+0x68>)
    5a98:	429c      	cmp	r4, r3
    5a9a:	d1e6      	bne.n	5a6a <_putc_r+0x1e>
    5a9c:	68f4      	ldr	r4, [r6, #12]
    5a9e:	e7e4      	b.n	5a6a <_putc_r+0x1e>
    5aa0:	0022      	movs	r2, r4
    5aa2:	0029      	movs	r1, r5
    5aa4:	0030      	movs	r0, r6
    5aa6:	f000 f853 	bl	5b50 <__swbuf_r>
    5aaa:	e7ee      	b.n	5a8a <_putc_r+0x3e>
    5aac:	000081e4 	.word	0x000081e4
    5ab0:	00008204 	.word	0x00008204
    5ab4:	000081c4 	.word	0x000081c4

00005ab8 <__sread>:
    5ab8:	b570      	push	{r4, r5, r6, lr}
    5aba:	000c      	movs	r4, r1
    5abc:	250e      	movs	r5, #14
    5abe:	5f49      	ldrsh	r1, [r1, r5]
    5ac0:	f000 f97c 	bl	5dbc <_read_r>
    5ac4:	2800      	cmp	r0, #0
    5ac6:	db03      	blt.n	5ad0 <__sread+0x18>
    5ac8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5aca:	181b      	adds	r3, r3, r0
    5acc:	6563      	str	r3, [r4, #84]	; 0x54
    5ace:	bd70      	pop	{r4, r5, r6, pc}
    5ad0:	89a3      	ldrh	r3, [r4, #12]
    5ad2:	4a02      	ldr	r2, [pc, #8]	; (5adc <__sread+0x24>)
    5ad4:	4013      	ands	r3, r2
    5ad6:	81a3      	strh	r3, [r4, #12]
    5ad8:	e7f9      	b.n	5ace <__sread+0x16>
    5ada:	46c0      	nop			; (mov r8, r8)
    5adc:	ffffefff 	.word	0xffffefff

00005ae0 <__swrite>:
    5ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ae2:	001f      	movs	r7, r3
    5ae4:	898b      	ldrh	r3, [r1, #12]
    5ae6:	0005      	movs	r5, r0
    5ae8:	000c      	movs	r4, r1
    5aea:	0016      	movs	r6, r2
    5aec:	05db      	lsls	r3, r3, #23
    5aee:	d505      	bpl.n	5afc <__swrite+0x1c>
    5af0:	230e      	movs	r3, #14
    5af2:	5ec9      	ldrsh	r1, [r1, r3]
    5af4:	2200      	movs	r2, #0
    5af6:	2302      	movs	r3, #2
    5af8:	f000 f940 	bl	5d7c <_lseek_r>
    5afc:	89a3      	ldrh	r3, [r4, #12]
    5afe:	4a05      	ldr	r2, [pc, #20]	; (5b14 <__swrite+0x34>)
    5b00:	0028      	movs	r0, r5
    5b02:	4013      	ands	r3, r2
    5b04:	81a3      	strh	r3, [r4, #12]
    5b06:	0032      	movs	r2, r6
    5b08:	230e      	movs	r3, #14
    5b0a:	5ee1      	ldrsh	r1, [r4, r3]
    5b0c:	003b      	movs	r3, r7
    5b0e:	f000 f875 	bl	5bfc <_write_r>
    5b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b14:	ffffefff 	.word	0xffffefff

00005b18 <__sseek>:
    5b18:	b570      	push	{r4, r5, r6, lr}
    5b1a:	000c      	movs	r4, r1
    5b1c:	250e      	movs	r5, #14
    5b1e:	5f49      	ldrsh	r1, [r1, r5]
    5b20:	f000 f92c 	bl	5d7c <_lseek_r>
    5b24:	89a3      	ldrh	r3, [r4, #12]
    5b26:	1c42      	adds	r2, r0, #1
    5b28:	d103      	bne.n	5b32 <__sseek+0x1a>
    5b2a:	4a05      	ldr	r2, [pc, #20]	; (5b40 <__sseek+0x28>)
    5b2c:	4013      	ands	r3, r2
    5b2e:	81a3      	strh	r3, [r4, #12]
    5b30:	bd70      	pop	{r4, r5, r6, pc}
    5b32:	2280      	movs	r2, #128	; 0x80
    5b34:	0152      	lsls	r2, r2, #5
    5b36:	4313      	orrs	r3, r2
    5b38:	81a3      	strh	r3, [r4, #12]
    5b3a:	6560      	str	r0, [r4, #84]	; 0x54
    5b3c:	e7f8      	b.n	5b30 <__sseek+0x18>
    5b3e:	46c0      	nop			; (mov r8, r8)
    5b40:	ffffefff 	.word	0xffffefff

00005b44 <__sclose>:
    5b44:	b510      	push	{r4, lr}
    5b46:	230e      	movs	r3, #14
    5b48:	5ec9      	ldrsh	r1, [r1, r3]
    5b4a:	f000 f8e1 	bl	5d10 <_close_r>
    5b4e:	bd10      	pop	{r4, pc}

00005b50 <__swbuf_r>:
    5b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b52:	0005      	movs	r5, r0
    5b54:	000e      	movs	r6, r1
    5b56:	0014      	movs	r4, r2
    5b58:	2800      	cmp	r0, #0
    5b5a:	d004      	beq.n	5b66 <__swbuf_r+0x16>
    5b5c:	6983      	ldr	r3, [r0, #24]
    5b5e:	2b00      	cmp	r3, #0
    5b60:	d101      	bne.n	5b66 <__swbuf_r+0x16>
    5b62:	f7ff fba3 	bl	52ac <__sinit>
    5b66:	4b22      	ldr	r3, [pc, #136]	; (5bf0 <__swbuf_r+0xa0>)
    5b68:	429c      	cmp	r4, r3
    5b6a:	d12d      	bne.n	5bc8 <__swbuf_r+0x78>
    5b6c:	686c      	ldr	r4, [r5, #4]
    5b6e:	69a3      	ldr	r3, [r4, #24]
    5b70:	60a3      	str	r3, [r4, #8]
    5b72:	89a3      	ldrh	r3, [r4, #12]
    5b74:	071b      	lsls	r3, r3, #28
    5b76:	d531      	bpl.n	5bdc <__swbuf_r+0x8c>
    5b78:	6923      	ldr	r3, [r4, #16]
    5b7a:	2b00      	cmp	r3, #0
    5b7c:	d02e      	beq.n	5bdc <__swbuf_r+0x8c>
    5b7e:	6823      	ldr	r3, [r4, #0]
    5b80:	6922      	ldr	r2, [r4, #16]
    5b82:	b2f7      	uxtb	r7, r6
    5b84:	1a98      	subs	r0, r3, r2
    5b86:	6963      	ldr	r3, [r4, #20]
    5b88:	b2f6      	uxtb	r6, r6
    5b8a:	4298      	cmp	r0, r3
    5b8c:	db05      	blt.n	5b9a <__swbuf_r+0x4a>
    5b8e:	0021      	movs	r1, r4
    5b90:	0028      	movs	r0, r5
    5b92:	f7ff fb1d 	bl	51d0 <_fflush_r>
    5b96:	2800      	cmp	r0, #0
    5b98:	d126      	bne.n	5be8 <__swbuf_r+0x98>
    5b9a:	68a3      	ldr	r3, [r4, #8]
    5b9c:	3001      	adds	r0, #1
    5b9e:	3b01      	subs	r3, #1
    5ba0:	60a3      	str	r3, [r4, #8]
    5ba2:	6823      	ldr	r3, [r4, #0]
    5ba4:	1c5a      	adds	r2, r3, #1
    5ba6:	6022      	str	r2, [r4, #0]
    5ba8:	701f      	strb	r7, [r3, #0]
    5baa:	6963      	ldr	r3, [r4, #20]
    5bac:	4298      	cmp	r0, r3
    5bae:	d004      	beq.n	5bba <__swbuf_r+0x6a>
    5bb0:	89a3      	ldrh	r3, [r4, #12]
    5bb2:	07db      	lsls	r3, r3, #31
    5bb4:	d51a      	bpl.n	5bec <__swbuf_r+0x9c>
    5bb6:	2e0a      	cmp	r6, #10
    5bb8:	d118      	bne.n	5bec <__swbuf_r+0x9c>
    5bba:	0021      	movs	r1, r4
    5bbc:	0028      	movs	r0, r5
    5bbe:	f7ff fb07 	bl	51d0 <_fflush_r>
    5bc2:	2800      	cmp	r0, #0
    5bc4:	d012      	beq.n	5bec <__swbuf_r+0x9c>
    5bc6:	e00f      	b.n	5be8 <__swbuf_r+0x98>
    5bc8:	4b0a      	ldr	r3, [pc, #40]	; (5bf4 <__swbuf_r+0xa4>)
    5bca:	429c      	cmp	r4, r3
    5bcc:	d101      	bne.n	5bd2 <__swbuf_r+0x82>
    5bce:	68ac      	ldr	r4, [r5, #8]
    5bd0:	e7cd      	b.n	5b6e <__swbuf_r+0x1e>
    5bd2:	4b09      	ldr	r3, [pc, #36]	; (5bf8 <__swbuf_r+0xa8>)
    5bd4:	429c      	cmp	r4, r3
    5bd6:	d1ca      	bne.n	5b6e <__swbuf_r+0x1e>
    5bd8:	68ec      	ldr	r4, [r5, #12]
    5bda:	e7c8      	b.n	5b6e <__swbuf_r+0x1e>
    5bdc:	0021      	movs	r1, r4
    5bde:	0028      	movs	r0, r5
    5be0:	f000 f820 	bl	5c24 <__swsetup_r>
    5be4:	2800      	cmp	r0, #0
    5be6:	d0ca      	beq.n	5b7e <__swbuf_r+0x2e>
    5be8:	2601      	movs	r6, #1
    5bea:	4276      	negs	r6, r6
    5bec:	0030      	movs	r0, r6
    5bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bf0:	000081e4 	.word	0x000081e4
    5bf4:	00008204 	.word	0x00008204
    5bf8:	000081c4 	.word	0x000081c4

00005bfc <_write_r>:
    5bfc:	b570      	push	{r4, r5, r6, lr}
    5bfe:	0005      	movs	r5, r0
    5c00:	0008      	movs	r0, r1
    5c02:	0011      	movs	r1, r2
    5c04:	2200      	movs	r2, #0
    5c06:	4c06      	ldr	r4, [pc, #24]	; (5c20 <_write_r+0x24>)
    5c08:	6022      	str	r2, [r4, #0]
    5c0a:	001a      	movs	r2, r3
    5c0c:	f7fd fbee 	bl	33ec <_write>
    5c10:	1c43      	adds	r3, r0, #1
    5c12:	d103      	bne.n	5c1c <_write_r+0x20>
    5c14:	6823      	ldr	r3, [r4, #0]
    5c16:	2b00      	cmp	r3, #0
    5c18:	d000      	beq.n	5c1c <_write_r+0x20>
    5c1a:	602b      	str	r3, [r5, #0]
    5c1c:	bd70      	pop	{r4, r5, r6, pc}
    5c1e:	46c0      	nop			; (mov r8, r8)
    5c20:	20003124 	.word	0x20003124

00005c24 <__swsetup_r>:
    5c24:	4b36      	ldr	r3, [pc, #216]	; (5d00 <__swsetup_r+0xdc>)
    5c26:	b570      	push	{r4, r5, r6, lr}
    5c28:	681d      	ldr	r5, [r3, #0]
    5c2a:	0006      	movs	r6, r0
    5c2c:	000c      	movs	r4, r1
    5c2e:	2d00      	cmp	r5, #0
    5c30:	d005      	beq.n	5c3e <__swsetup_r+0x1a>
    5c32:	69ab      	ldr	r3, [r5, #24]
    5c34:	2b00      	cmp	r3, #0
    5c36:	d102      	bne.n	5c3e <__swsetup_r+0x1a>
    5c38:	0028      	movs	r0, r5
    5c3a:	f7ff fb37 	bl	52ac <__sinit>
    5c3e:	4b31      	ldr	r3, [pc, #196]	; (5d04 <__swsetup_r+0xe0>)
    5c40:	429c      	cmp	r4, r3
    5c42:	d10f      	bne.n	5c64 <__swsetup_r+0x40>
    5c44:	686c      	ldr	r4, [r5, #4]
    5c46:	230c      	movs	r3, #12
    5c48:	5ee2      	ldrsh	r2, [r4, r3]
    5c4a:	b293      	uxth	r3, r2
    5c4c:	0719      	lsls	r1, r3, #28
    5c4e:	d42d      	bmi.n	5cac <__swsetup_r+0x88>
    5c50:	06d9      	lsls	r1, r3, #27
    5c52:	d411      	bmi.n	5c78 <__swsetup_r+0x54>
    5c54:	2309      	movs	r3, #9
    5c56:	2001      	movs	r0, #1
    5c58:	6033      	str	r3, [r6, #0]
    5c5a:	3337      	adds	r3, #55	; 0x37
    5c5c:	4313      	orrs	r3, r2
    5c5e:	81a3      	strh	r3, [r4, #12]
    5c60:	4240      	negs	r0, r0
    5c62:	bd70      	pop	{r4, r5, r6, pc}
    5c64:	4b28      	ldr	r3, [pc, #160]	; (5d08 <__swsetup_r+0xe4>)
    5c66:	429c      	cmp	r4, r3
    5c68:	d101      	bne.n	5c6e <__swsetup_r+0x4a>
    5c6a:	68ac      	ldr	r4, [r5, #8]
    5c6c:	e7eb      	b.n	5c46 <__swsetup_r+0x22>
    5c6e:	4b27      	ldr	r3, [pc, #156]	; (5d0c <__swsetup_r+0xe8>)
    5c70:	429c      	cmp	r4, r3
    5c72:	d1e8      	bne.n	5c46 <__swsetup_r+0x22>
    5c74:	68ec      	ldr	r4, [r5, #12]
    5c76:	e7e6      	b.n	5c46 <__swsetup_r+0x22>
    5c78:	075b      	lsls	r3, r3, #29
    5c7a:	d513      	bpl.n	5ca4 <__swsetup_r+0x80>
    5c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5c7e:	2900      	cmp	r1, #0
    5c80:	d008      	beq.n	5c94 <__swsetup_r+0x70>
    5c82:	0023      	movs	r3, r4
    5c84:	3344      	adds	r3, #68	; 0x44
    5c86:	4299      	cmp	r1, r3
    5c88:	d002      	beq.n	5c90 <__swsetup_r+0x6c>
    5c8a:	0030      	movs	r0, r6
    5c8c:	f7fe ffc0 	bl	4c10 <_free_r>
    5c90:	2300      	movs	r3, #0
    5c92:	6363      	str	r3, [r4, #52]	; 0x34
    5c94:	2224      	movs	r2, #36	; 0x24
    5c96:	89a3      	ldrh	r3, [r4, #12]
    5c98:	4393      	bics	r3, r2
    5c9a:	81a3      	strh	r3, [r4, #12]
    5c9c:	2300      	movs	r3, #0
    5c9e:	6063      	str	r3, [r4, #4]
    5ca0:	6923      	ldr	r3, [r4, #16]
    5ca2:	6023      	str	r3, [r4, #0]
    5ca4:	2308      	movs	r3, #8
    5ca6:	89a2      	ldrh	r2, [r4, #12]
    5ca8:	4313      	orrs	r3, r2
    5caa:	81a3      	strh	r3, [r4, #12]
    5cac:	6923      	ldr	r3, [r4, #16]
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d10b      	bne.n	5cca <__swsetup_r+0xa6>
    5cb2:	21a0      	movs	r1, #160	; 0xa0
    5cb4:	2280      	movs	r2, #128	; 0x80
    5cb6:	89a3      	ldrh	r3, [r4, #12]
    5cb8:	0089      	lsls	r1, r1, #2
    5cba:	0092      	lsls	r2, r2, #2
    5cbc:	400b      	ands	r3, r1
    5cbe:	4293      	cmp	r3, r2
    5cc0:	d003      	beq.n	5cca <__swsetup_r+0xa6>
    5cc2:	0021      	movs	r1, r4
    5cc4:	0030      	movs	r0, r6
    5cc6:	f7ff fbaf 	bl	5428 <__smakebuf_r>
    5cca:	2301      	movs	r3, #1
    5ccc:	89a2      	ldrh	r2, [r4, #12]
    5cce:	4013      	ands	r3, r2
    5cd0:	d011      	beq.n	5cf6 <__swsetup_r+0xd2>
    5cd2:	2300      	movs	r3, #0
    5cd4:	60a3      	str	r3, [r4, #8]
    5cd6:	6963      	ldr	r3, [r4, #20]
    5cd8:	425b      	negs	r3, r3
    5cda:	61a3      	str	r3, [r4, #24]
    5cdc:	2000      	movs	r0, #0
    5cde:	6923      	ldr	r3, [r4, #16]
    5ce0:	4283      	cmp	r3, r0
    5ce2:	d1be      	bne.n	5c62 <__swsetup_r+0x3e>
    5ce4:	230c      	movs	r3, #12
    5ce6:	5ee2      	ldrsh	r2, [r4, r3]
    5ce8:	0613      	lsls	r3, r2, #24
    5cea:	d5ba      	bpl.n	5c62 <__swsetup_r+0x3e>
    5cec:	2340      	movs	r3, #64	; 0x40
    5cee:	4313      	orrs	r3, r2
    5cf0:	81a3      	strh	r3, [r4, #12]
    5cf2:	3801      	subs	r0, #1
    5cf4:	e7b5      	b.n	5c62 <__swsetup_r+0x3e>
    5cf6:	0792      	lsls	r2, r2, #30
    5cf8:	d400      	bmi.n	5cfc <__swsetup_r+0xd8>
    5cfa:	6963      	ldr	r3, [r4, #20]
    5cfc:	60a3      	str	r3, [r4, #8]
    5cfe:	e7ed      	b.n	5cdc <__swsetup_r+0xb8>
    5d00:	200001a4 	.word	0x200001a4
    5d04:	000081e4 	.word	0x000081e4
    5d08:	00008204 	.word	0x00008204
    5d0c:	000081c4 	.word	0x000081c4

00005d10 <_close_r>:
    5d10:	2300      	movs	r3, #0
    5d12:	b570      	push	{r4, r5, r6, lr}
    5d14:	4c06      	ldr	r4, [pc, #24]	; (5d30 <_close_r+0x20>)
    5d16:	0005      	movs	r5, r0
    5d18:	0008      	movs	r0, r1
    5d1a:	6023      	str	r3, [r4, #0]
    5d1c:	f7fd fba0 	bl	3460 <_close>
    5d20:	1c43      	adds	r3, r0, #1
    5d22:	d103      	bne.n	5d2c <_close_r+0x1c>
    5d24:	6823      	ldr	r3, [r4, #0]
    5d26:	2b00      	cmp	r3, #0
    5d28:	d000      	beq.n	5d2c <_close_r+0x1c>
    5d2a:	602b      	str	r3, [r5, #0]
    5d2c:	bd70      	pop	{r4, r5, r6, pc}
    5d2e:	46c0      	nop			; (mov r8, r8)
    5d30:	20003124 	.word	0x20003124

00005d34 <_fstat_r>:
    5d34:	2300      	movs	r3, #0
    5d36:	b570      	push	{r4, r5, r6, lr}
    5d38:	4c06      	ldr	r4, [pc, #24]	; (5d54 <_fstat_r+0x20>)
    5d3a:	0005      	movs	r5, r0
    5d3c:	0008      	movs	r0, r1
    5d3e:	0011      	movs	r1, r2
    5d40:	6023      	str	r3, [r4, #0]
    5d42:	f7fd fb90 	bl	3466 <_fstat>
    5d46:	1c43      	adds	r3, r0, #1
    5d48:	d103      	bne.n	5d52 <_fstat_r+0x1e>
    5d4a:	6823      	ldr	r3, [r4, #0]
    5d4c:	2b00      	cmp	r3, #0
    5d4e:	d000      	beq.n	5d52 <_fstat_r+0x1e>
    5d50:	602b      	str	r3, [r5, #0]
    5d52:	bd70      	pop	{r4, r5, r6, pc}
    5d54:	20003124 	.word	0x20003124

00005d58 <_isatty_r>:
    5d58:	2300      	movs	r3, #0
    5d5a:	b570      	push	{r4, r5, r6, lr}
    5d5c:	4c06      	ldr	r4, [pc, #24]	; (5d78 <_isatty_r+0x20>)
    5d5e:	0005      	movs	r5, r0
    5d60:	0008      	movs	r0, r1
    5d62:	6023      	str	r3, [r4, #0]
    5d64:	f7fd fb84 	bl	3470 <_isatty>
    5d68:	1c43      	adds	r3, r0, #1
    5d6a:	d103      	bne.n	5d74 <_isatty_r+0x1c>
    5d6c:	6823      	ldr	r3, [r4, #0]
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d000      	beq.n	5d74 <_isatty_r+0x1c>
    5d72:	602b      	str	r3, [r5, #0]
    5d74:	bd70      	pop	{r4, r5, r6, pc}
    5d76:	46c0      	nop			; (mov r8, r8)
    5d78:	20003124 	.word	0x20003124

00005d7c <_lseek_r>:
    5d7c:	b570      	push	{r4, r5, r6, lr}
    5d7e:	0005      	movs	r5, r0
    5d80:	0008      	movs	r0, r1
    5d82:	0011      	movs	r1, r2
    5d84:	2200      	movs	r2, #0
    5d86:	4c06      	ldr	r4, [pc, #24]	; (5da0 <_lseek_r+0x24>)
    5d88:	6022      	str	r2, [r4, #0]
    5d8a:	001a      	movs	r2, r3
    5d8c:	f7fd fb72 	bl	3474 <_lseek>
    5d90:	1c43      	adds	r3, r0, #1
    5d92:	d103      	bne.n	5d9c <_lseek_r+0x20>
    5d94:	6823      	ldr	r3, [r4, #0]
    5d96:	2b00      	cmp	r3, #0
    5d98:	d000      	beq.n	5d9c <_lseek_r+0x20>
    5d9a:	602b      	str	r3, [r5, #0]
    5d9c:	bd70      	pop	{r4, r5, r6, pc}
    5d9e:	46c0      	nop			; (mov r8, r8)
    5da0:	20003124 	.word	0x20003124

00005da4 <memchr>:
    5da4:	b2c9      	uxtb	r1, r1
    5da6:	1882      	adds	r2, r0, r2
    5da8:	4290      	cmp	r0, r2
    5daa:	d101      	bne.n	5db0 <memchr+0xc>
    5dac:	2000      	movs	r0, #0
    5dae:	4770      	bx	lr
    5db0:	7803      	ldrb	r3, [r0, #0]
    5db2:	428b      	cmp	r3, r1
    5db4:	d0fb      	beq.n	5dae <memchr+0xa>
    5db6:	3001      	adds	r0, #1
    5db8:	e7f6      	b.n	5da8 <memchr+0x4>
	...

00005dbc <_read_r>:
    5dbc:	b570      	push	{r4, r5, r6, lr}
    5dbe:	0005      	movs	r5, r0
    5dc0:	0008      	movs	r0, r1
    5dc2:	0011      	movs	r1, r2
    5dc4:	2200      	movs	r2, #0
    5dc6:	4c06      	ldr	r4, [pc, #24]	; (5de0 <_read_r+0x24>)
    5dc8:	6022      	str	r2, [r4, #0]
    5dca:	001a      	movs	r2, r3
    5dcc:	f7fd faec 	bl	33a8 <_read>
    5dd0:	1c43      	adds	r3, r0, #1
    5dd2:	d103      	bne.n	5ddc <_read_r+0x20>
    5dd4:	6823      	ldr	r3, [r4, #0]
    5dd6:	2b00      	cmp	r3, #0
    5dd8:	d000      	beq.n	5ddc <_read_r+0x20>
    5dda:	602b      	str	r3, [r5, #0]
    5ddc:	bd70      	pop	{r4, r5, r6, pc}
    5dde:	46c0      	nop			; (mov r8, r8)
    5de0:	20003124 	.word	0x20003124
    5de4:	000016f6 	.word	0x000016f6
    5de8:	000016fc 	.word	0x000016fc
    5dec:	00001702 	.word	0x00001702
    5df0:	0000170e 	.word	0x0000170e
    5df4:	00001714 	.word	0x00001714
    5df8:	0000171a 	.word	0x0000171a
    5dfc:	6e305b1b 	.word	0x6e305b1b
    5e00:	00000008 	.word	0x00000008
    5e04:	00000008 	.word	0x00000008
    5e08:	00000008 	.word	0x00000008
    5e0c:	00000008 	.word	0x00000008
    5e10:	00000008 	.word	0x00000008
    5e14:	00000008 	.word	0x00000008
    5e18:	00000008 	.word	0x00000008
    5e1c:	00000008 	.word	0x00000008
    5e20:	00000010 	.word	0x00000010
    5e24:	00000010 	.word	0x00000010
    5e28:	00000010 	.word	0x00000010
    5e2c:	00000010 	.word	0x00000010
    5e30:	00000010 	.word	0x00000010
    5e34:	00000010 	.word	0x00000010
    5e38:	00000010 	.word	0x00000010
    5e3c:	00000010 	.word	0x00000010
    5e40:	00000018 	.word	0x00000018
    5e44:	00000018 	.word	0x00000018
    5e48:	00000018 	.word	0x00000018
    5e4c:	00000018 	.word	0x00000018
    5e50:	00000018 	.word	0x00000018
    5e54:	00000018 	.word	0x00000018
    5e58:	00000018 	.word	0x00000018
    5e5c:	00000018 	.word	0x00000018
    5e60:	00000020 	.word	0x00000020
    5e64:	00000020 	.word	0x00000020
    5e68:	00000020 	.word	0x00000020
    5e6c:	00000020 	.word	0x00000020
    5e70:	00000020 	.word	0x00000020
    5e74:	00000020 	.word	0x00000020
    5e78:	00000020 	.word	0x00000020
    5e7c:	00000020 	.word	0x00000020
    5e80:	00000028 	.word	0x00000028
    5e84:	00000028 	.word	0x00000028
    5e88:	00000028 	.word	0x00000028
    5e8c:	00000028 	.word	0x00000028
    5e90:	00000028 	.word	0x00000028
    5e94:	00000028 	.word	0x00000028
    5e98:	00000028 	.word	0x00000028
    5e9c:	00000028 	.word	0x00000028
    5ea0:	00000030 	.word	0x00000030
    5ea4:	00000030 	.word	0x00000030
    5ea8:	00000030 	.word	0x00000030
    5eac:	00000030 	.word	0x00000030
    5eb0:	00000030 	.word	0x00000030
    5eb4:	00000030 	.word	0x00000030
    5eb8:	00000030 	.word	0x00000030
    5ebc:	00000030 	.word	0x00000030
    5ec0:	00000038 	.word	0x00000038
    5ec4:	00000038 	.word	0x00000038
    5ec8:	00000038 	.word	0x00000038
    5ecc:	00000038 	.word	0x00000038
    5ed0:	00000038 	.word	0x00000038
    5ed4:	00000038 	.word	0x00000038
    5ed8:	00000038 	.word	0x00000038
    5edc:	00000038 	.word	0x00000038
    5ee0:	00000040 	.word	0x00000040
    5ee4:	00000040 	.word	0x00000040
    5ee8:	00000040 	.word	0x00000040
    5eec:	00000040 	.word	0x00000040
    5ef0:	00000040 	.word	0x00000040
    5ef4:	00000040 	.word	0x00000040
    5ef8:	00000040 	.word	0x00000040
    5efc:	00000040 	.word	0x00000040
    5f00:	00000048 	.word	0x00000048
    5f04:	00000048 	.word	0x00000048
    5f08:	00000048 	.word	0x00000048
    5f0c:	00000048 	.word	0x00000048
    5f10:	00000048 	.word	0x00000048
    5f14:	00000048 	.word	0x00000048
    5f18:	00000048 	.word	0x00000048
    5f1c:	00000048 	.word	0x00000048
    5f20:	0000004f 	.word	0x0000004f
    5f24:	0000004f 	.word	0x0000004f
    5f28:	0000004f 	.word	0x0000004f
    5f2c:	0000004f 	.word	0x0000004f
    5f30:	0000004f 	.word	0x0000004f
    5f34:	0000004f 	.word	0x0000004f
    5f38:	0000004f 	.word	0x0000004f
    5f3c:	0000004f 	.word	0x0000004f

00005f40 <DECIDreturn>:
    5f40:	363f5b1b 00000063 0000001b 0000005b     .[?6c.......[...
    5f50:	00000052                                R...

00005f54 <csiEscCodes>:
    5f54:	43424140 47464544 4c4b4a48 6158504d     @ABCDEFGHJKLMPXa
    5f64:	66656463 6d6c6867 7372716e 00006075     cdefghlmnqrsu`..
    5f74:	00007325 000a000a 00140014 00000014     %s..............
    5f84:	000a017c 000a017c 00140186 00140000     |...|...........
    5f94:	0122000a 00140186 01220190 0122000a     .."......."...".
    5fa4:	012c0014 0122017c 012c0186 012c0014     ..,.|."...,...,.
    5fb4:	0136017c 001e0000 00280032 00320000     |.6.....2.(...2.
    5fc4:	003c0032 001e0050 00280118 00280046     2.<.P.....(.F.(.
    5fd4:	00be0050 00be0050 00c80118 00280118     P...P.........(.
    5fe4:	00be0122 00460000 00500032 005a0000     ".....F.2.P...Z.
    5ff4:	00640032 006e0000 00780032 00820000     2.d...n.2.x.....
    6004:	008c0032 00960000 00a00032 00aa0000     2.......2.......
    6014:	00b40032 00be0000 00c80032 00c8012c     2.......2...,...
    6024:	00d20172 00dc001e 00e60172 00f0001e     r.......r.......
    6034:	00fa0172 0104001e 010e0172 0118005a     r.......r...Z...
    6044:	0122012c 82be50b4 8cbe82aa 64963c8c     ,."..P.......<.d
    6054:	64dc3cd2 a08c9682 aadca08c a0e696dc     .<.d............
    6064:	50f03c78 5a78466e aaaa3c96 a0dc3cc8     x<.PnFxZ.<...<..
    6074:	aae6a0d2 6e617254 69722073 73746867     ....Trans rights
    6084:	65726120 6d756820 72206e61 74686769      are human right
    6094:	00000073 355e3331 31202b20 20355e36     s...13^5 + 16^5 
    60a4:	3731203d 0000355e 69746552 616c7563     = 17^5..Reticula
    60b4:	676e6974 6c705320 73656e69 00000000     ting Splines....
    60c4:	6c6f6976 65636e65 726f772e 0000736b     violence.works..
    60d4:	2b206953 00425020 6c6c694b 6c694220     Si + PB.Kill Bil
    60e4:	6e6f696c 65726961 61282073 5420646e     lionaires (and T
    60f4:	6c6c6972 616e6f69 29657269 00000000     rillionaire)....
    6104:	65746e49 74736572 206e6920 68636574     Interest in tech
    6114:	6f6c6f6e 69207967 6f6e2073 20612074     nology is not a 
    6124:	73726570 6c616e6f 00797469 50203031     personality.10 P
    6134:	544e4952 52484320 30322824 2b352e35     RINT CHR$(205.5+
    6144:	28444e52 3b292931 47203a20 204f544f     RND(1)); : GOTO 
    6154:	00003031 67206f4e 2e73646f 206f4e20     10..No gods. No 
    6164:	7473616d 2e737265 206f4e20 65747865     masters. No exte
    6174:	6c616e72 62696c20 69726172 002e7365     rnal libraries..
    6184:	6c6c694b 7a614e20 00007369 6e616954     Kill Nazis..Tian
    6194:	656d6e61 7153206e 65726175 38393120     anmen Square 198
    61a4:	00000039 72656d41 20616369 20736177     9...America was 
    61b4:	6e756f66 20646564 73206e6f 6576616c     founded on slave
    61c4:	00007972 72656854 73692065 6c6e6f20     ry..There is onl
    61d4:	61632079 61746970 6e61206c 616c2064     y capital and la
    61e4:	00726f62 6f636e45 67617275 59532065     bor.Encourage SY
    61f4:	54454d4d 20434952 73616c63 61772073     MMETRIC class wa
    6204:	72616672 00000065 6f676f56 6f50206e     rfare...Vogon Po
    6214:	79727465 00000000 694e2041 54206563     etry....A Nice T
    6224:	00005954 78696e55 6f706520 6d206863     TY..Unix epoch m
    6234:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    6244:	3d202069 35783020 35373366 20666439     i  = 0x5f3759df 
    6254:	2028202d 3e3e2069 29203120 0000003b     - ( i >> 1 );...
    6264:	61657053 7274206b 20687475 70206f74     Speak truth to p
    6274:	7265776f 2749203b 7573206d 74206572     ower; I'm sure t
    6284:	27796568 6c206c6c 65747369 6874206e     hey'll listen th
    6294:	74207369 2e656d69 00000000 63666544     is time.....Defc
    62a4:	73276e6f 6e616320 656c6563 32282064     on's canceled (2
    62b4:	29303230 00000000 73746152 7473656e     020)....Ratsnest
    62c4:	6f4e203a 6e696874 6f542067 216f4420     : Nothing To Do!
    62d4:	00000000 68207449 36207361 656b2039     ....It has 69 ke
    62e4:	002e7379 61636542 20657375 342d5456     ys..Because VT-4
    62f4:	77203032 61207361 6165726c 74207964     20 was already t
    6304:	6e656b61 00000000 706d6f43 73736572     aken....Compress
    6314:	206e6f69 6f676c61 68746972 6162206d     ion algorithm ba
    6324:	20646573 42206e6f 28205042 37393931     sed on BBP (1997
    6334:	00000029 63616554 65682068 68746c61     )...Teach health
    6344:	736e6920 6e617275 70206563 69766f72      insurance provi
    6354:	73726564 206f7420 65646f63 0000002e     ders to code....
    6364:	6e617247 65432064 6172746e 6148206c     Grand Central Ha
    6374:	54206b63 50206568 656e616c 00000074     ck The Planet...
    6384:	69466957 20736920 20746f6e 65726977     WiFi is not wire
    6394:	7373656c 68744520 656e7265 00002174     less Ethernet!..
    63a4:	6d6d7544 68742079 20636369 65696c63     Dummy thicc clie
    63b4:	0000746e 694e2041 54206563 202e5954     nt..A Nice TTY. 
    63c4:	4f206e41 6f43204b 7475706d 002e7265     An OK Computer..
    63d4:	65545355 6964656c 6e6f646c 00736369     USTeledildonics.
    63e4:	696c6f53 69726164 69207974 6f6e2073     Solidarity is no
    63f4:	20612074 2077656e 6d617266 726f7765     t a new framewor
    6404:	0000006b 61657242 616f6264 6e696472     k...Breadboardin
    6414:	73492067 746f4e20 43204120 656d6972     g Is Not A Crime
    6424:	00000000 2066664f 6f207962 6520656e     ....Off by one e
    6434:	726f7272 72612073 6f632065 6e6f6d6d     rrors are common
    6444:	00000000 00001db2 00001ffe 00001ffe     ................
    6454:	00001ffe 00001ffe 00001ffe 00001ffe     ................
    6464:	00001ffe 00001ffe 00001ffe 00001ffe     ................
    6474:	00001ffe 00001ffe 00001ffe 00001ffe     ................
    6484:	00001ffe 00001d9a 00001ffe 00001ffe     ................
    6494:	00001ffe 00001ffe 00001ffe 00001ffe     ................
    64a4:	00001ffe 00001ffe 00001ffe 00001ffe     ................
    64b4:	00001ffe 00001ffe 00001ffe 00001ffe     ................
    64c4:	00001ffe 00001daa 00001ffe 00001ffe     ................
    64d4:	00001ffe 00001ffe 00001ffe 00001ffe     ................
    64e4:	00001ffe 00001ffe 00001ffe 00001ffe     ................
    64f4:	00001ffe 00001ffe 00001ffe 00001ffe     ................
    6504:	00001ffe 00001da2 00001dba 00001d82     ................
    6514:	00001d92 00001d8a 00000002 00000003     ................
    6524:	00000028 00000029 00000004 00000005     (...)...........
    6534:	00000006 00000007 00000020 00000021     ........ ...!...
    6544:	00000022 00000023 00000024 00000025     "...#...$...%...
    6554:	00000026 00000027 00000008 00000009     &...'...........
    6564:	0000000a 0000000b 42000800 42000c00     ...........B...B
    6574:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    6584:	00002b36 00002b32 00002b32 00002b98     6+..2+..2+...+..
    6594:	00002b98 00002b4a 00002b3c 00002b50     .+..J+..<+..P+..
    65a4:	00002b86 00002d58 00002d38 00002d38     .+..X-..8-..8-..
    65b4:	00002dc4 00002d4a 00002d66 00002d3c     .-..J-..f-..<-..
    65c4:	00002d74 00002db4                       t-...-..

000065cc <CodePage437>:
	...
    6904:	01000000 06186080 18608001 60800106     .....`....`....`
    6914:	80010000 00000060 00000000 66986106     ....`........a.f
    6924:	98618619 00000000 00000000 00000000     ..a.............
    6934:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    6944:	1966fefb 00986186 00000000 80010000     ..f..a..........
    6954:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    6964:	00000000 04000000 29a60823 1820c106     ........#..).. .
    6974:	98200304 324c1165 00000008 00000000     .. .e.L2........
    6984:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    6994:	0000f6d9 00000000 30c00000 00030618     ...........0....
    69a4:	000000c0 00000000 00000000 00000000     ................
    69b4:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    69c4:	10400002 00000000 01000000 02084000     ..@..........@..
    69d4:	06186000 18608001 00010208 00000040     .`....`.....@...
    69e4:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    69f4:	80104290 00000000 00000000 00000000     .B..............
    6a04:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    6a24:	18000000 c0000306 00001040 00000000     ........@.......
    6a34:	00000000 ff000000 0000e0bf 00000000     ................
	...
    6a58:	030e3800 0000e080 00000000 08200000     .8............ .
    6a68:	80000104 02041020 10408000 00000208     .... .....@.....
    6a78:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    6a88:	63061b6c f8e0c318 00000000 00000000     l..c............
    6a98:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    6aa8:	000000f8 00000000 c1f8e107 061860b0     .............`..
    6ab8:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    6ac8:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    6ad8:	00f8e167 00000000 40000000 03070c30     g..........@0...
    6ae8:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    6af8:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    6b08:	e167a081 000000f8 00000000 60f8e003     ..g............`
    6b18:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    6b28:	00000000 fefb0f00 20608001 00010408     ..........` ....
    6b38:	0c302080 00c00003 00000000 e0030000     . 0.............
    6b48:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    6b58:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    6b68:	0618609f e1c70003 000000f0 00000000     .`..............
    6b78:	38000000 e080030e 00000000 030e3800     ...8.........8..
    6b88:	0000e080 00000000 00000000 80030e38     ............8...
    6b98:	000000e0 0e380000 40c00003 00000010     ......8....@....
    6ba8:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    6bb8:	0c300003 00000000 00000000 00000000     ..0.............
    6bc8:	00fefb0f fefb0f00 00000000 00000000     ................
    6bd8:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    6be8:	0c0c3030 00000003 00000000 f8e10700     00..............
    6bf8:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    6c08:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    6c18:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    6c28:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    6c38:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    6c48:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    6c58:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    6c68:	00f8e063 00000000 c30f0000 861966f0     c............f..
    6c78:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    6c88:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    6c98:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    6ca8:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    6cb8:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    6cc8:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    6cd8:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    6ce8:	00000000 07000000 0618f8e1 18608001     ..............`.
    6cf8:	60800106 e1070618 000000f8 00000000     ...`............
    6d08:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    6d18:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    6d28:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    6d38:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    6d48:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    6d58:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    6d68:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    6d78:	ecb0c31e 0000061b 00000000 f8e00300     ................
    6d88:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    6d98:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    6da8:	c000038c 00030c30 00000000 07000000     ....0...........
    6db8:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    6dc8:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    6dd8:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    6de8:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    6df8:	00f8e167 00000000 fb0f0000 000208fe     g...............
    6e08:	02082080 08208000 20800002 00000000     . .... .... ....
    6e18:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    6e28:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    6e38:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    6e48:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    6e58:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    6e68:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    6e78:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    6e88:	20c00107 80000208 00000020 00000000     ... .... .......
    6e98:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    6ea8:	0000fefb 00000000 f8e00300 00030c30     ............0...
    6eb8:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    6ec8:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    6ed8:	0618c000 00000000 07000000 030cf0c1     ................
    6ee8:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    6ef8:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    6f24:	00fefb0f 00000000 80030000 00030ce0     ................
    6f34:	00001860 00000000 00000000 00000000     `...............
	...
    6f4c:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    6f5c:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    6f6c:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    6f7c:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    6f8c:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    6f9c:	c3061bec f6d9e7b0 00000000 00000000     ................
    6fac:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    6fbc:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    6fcc:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    6fdc:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    6fec:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    6ffc:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    700c:	01000000 00006080 18e08003 60800106     .....`.........`
    701c:	e1070618 000000f8 00000000 00186000     .............`..
    702c:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    703c:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    704c:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    705c:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    7078:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    7090:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    70a8:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    70c0:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    70d0:	02082080 00000000 00000000 c1fae803     . ..............
    70e0:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    70f0:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    7100:	00000003 00000000 00000000 e1070000     ................
    7110:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    7120:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    7130:	30c0c00c 00000000 00000000 00000000     ...0............
    7140:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    7158:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    7170:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    7188:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    71a4:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    71b4:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    71c4:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    71d4:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    71e4:	00000000 80010000 01061860 06186080     ........`....`..
    71f4:	18608001 60800106 00000000 0f000000     ..`....`........
    7204:	0208c003 0cc00003 c0000303 030f0208     ................
    7214:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    724c:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    725c:	f8e06398 00000608 00000000 00669801     .c............f.
    726c:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    727c:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    728c:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    729c:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    72b4:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    72cc:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    72dc:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    72ec:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    72fc:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    730c:	04fef907 00000003 00000000 07001420     ............ ...
    731c:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    732c:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    733c:	f10730c0 000000fc 00000000 18c00000     .0..............
    734c:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    735c:	00000000 98610600 80030000 010618e0     ......a.........
    736c:	06186080 00f8e107 00000000 00000000     .`..............
    737c:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    7394:	0018c000 18e08003 60800106 e1070618     ...........`....
    73a4:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    73b4:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    73c4:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    73d4:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    73e4:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    73fc:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    740c:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    741c:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    742c:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    743c:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    744c:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    745c:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    746c:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    747c:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    748c:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    749c:	00f6d9c7 00000000 01000000 0c006698     .............f..
    74ac:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    74bc:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    74cc:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    74dc:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    74ec:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    74fc:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    750c:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    751c:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    752c:	20e00302 80800f08 00000020 00000000     ... .... .......
    753c:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    754c:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    755c:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    756c:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    757c:	fef823b0 00000000 00000000 000060c0     .#...........`..
    758c:	18e08003 60800106 e1070618 000000f8     .......`........
    759c:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    75ac:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    75bc:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    75d4:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    75e4:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    75f4:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    7604:	1e08c003 00e08308 000080ff 00000000     ................
	...
    761c:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    7638:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    7648:	00c00f3f 00000000 00000000 ff000000     ?...............
    7658:	0003ecbf 00000000 00000000 00000000     ................
	...
    7670:	18e0bfff 00000006 00000000 00000000     ................
    7680:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    7690:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    76a0:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    76b0:	00000000 06180000 18000000 60800106     ...............`
    76c0:	80010618 00061860 00000000 00000000     ....`...........
    76d0:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    76e8:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    76f8:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    7708:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    7718:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    7728:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    7738:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    7748:	20800002 80000208 00020820 02082080     ... .... .... ..
    7758:	08208000 20800002 80000208 00020820     .. .... .... ...
    7768:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    7778:	00020820 02082080 f8208000 20800f02      .... .... .... 
    7788:	80000208 00020820 05142080 14504001     .... .... ...@P.
    7798:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    77a8:	00504001 00000000 00000000 013f0000     .@P...........?.
    77b8:	05145040 14504001 50400105 00000000     @P...@P...@P....
    77c8:	00000000 02f80000 0820800f 20800002     .......... .... 
    77d8:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    77e8:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    77f8:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    7808:	05145040 00504001 00000000 00000000     @P...@P.........
    7818:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    7828:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    7840:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    7858:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    787c:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    788c:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    78a4:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    78c8:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    78d8:	20800002 80000208 f0030820 02082080     ... .... .... ..
    78e8:	08208000 20800002 00000000 00000000     .. .... ........
    78f8:	3f000000 000000f0 00000000 00000000     ...?............
    7908:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    7918:	80000208 00020820 02082080 08208000     .... .... .... .
    7928:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    7938:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    7948:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    7958:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    7974:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    7984:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    79a8:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    79b8:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    79c8:	50400105 40010514 00000050 00000000     ..@P...@P.......
    79d8:	ff000000 00fc0fc0 00000000 00000000     ................
    79e8:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    79f8:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    7a08:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    7a18:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    7a28:	000000f0 00000000 00000000 00000000     ................
    7a38:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    7a48:	00020820 00002080 00000000 00000000      .... ..........
    7a58:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    7a68:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    7a80:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    7aa0:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    7ab0:	00002080 00000000 00000000 40f10700     . .............@
    7ac0:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    7ad0:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    7ae0:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    7af0:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    7b00:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    7b20:	80f00300 00020820 02082080 ff208000     .... .... .... .
    7b30:	ffffffff ffffffff ffffffff ffffffff     ................
    7b40:	ffffffff ffffffff 00000000 00000000     ................
    7b50:	3f000000 ffffffff ffffffff ffffffff     ...?............
    7b60:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    7b70:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    7b80:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    7b90:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    7bb4:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    7bc4:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    7bd4:	63c61861 000000f8 00000000 ff000000     a..c............
    7be4:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    7c00:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    7c10:	fb0f0000 06b080fe 0618c000 c0800103     ................
    7c20:	fefb2f20 00000000 00000000 00000000      /..............
    7c30:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    7c48:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    7c58:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    7c68:	06186080 00608001 00000000 00000000     .`....`.........
    7c78:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    7c88:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    7c98:	061becbf e0c31863 000000f8 00000000     ....c...........
    7ca8:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    7cb8:	00008e33 00000000 fef80300 e1070318     3...............
    7cc8:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    7cd8:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    7ce8:	00204295 00000000 00000000 07000000     .B .............
    7cf8:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    7d08:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    7d18:	03186000 0000f8e0 00000000 00000000     .`..............
    7d28:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    7d38:	000060b0 00000000 0f000000 0000fefb     .`..............
    7d48:	00fefb0f fefb0f00 00000000 00000000     ................
    7d58:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    7d68:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    7d78:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    7d88:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    7d98:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    7da8:	02082080 08208000 20800002 80000208     . .... .... ....
    7db8:	00020820 02082080 08208000 20800002      .... .... .... 
    7dc8:	80000208 09240820 00008001 18000000     .... .$.........
    7dd8:	00000006 00e0bfff 00061800 00000000     ................
	...
    7df0:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    7e08:	01092460 00000080 00000000 00000000     `$..............
	...
    7e2c:	80030e38 00000000 00000000 00000000     8...............
	...
    7e44:	01000000 00006080 00000000 0f000000     .....`..........
    7e54:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    7e64:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    7e80:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    7ea4:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    7ecc:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    7edc:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    7eec:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    7efc:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    7f0c:	0008006d 00000a7f 0009001b 47552600     m............&UG
    7f1c:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    7f2c:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    7f3c:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    7f4c:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    7f5c:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    7f6c:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    7f7c:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    7f8c:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    7f9c:	0008004d 00000a7f 0009001b 07150000     M...............
    7fac:	1100000a 00000000 000b0809 1a001700     ................
    7fbc:	0f000000 0500000a 00001801 1f001000     ................
    7fcc:	03131200 1b000000 14000000 000e1604     ................
    7fdc:	1c001d1e 02061900 0008000d 00000a00     ................

00007fec <kb_col>:
    7fec:	00010000 00020000 00040000 00080000     ................
    7ffc:	00100000 00200000 08000000              ...... .....

00008008 <kb_col_index>:
    8008:	00000010 00000011 00000012 00000013     ................
    8018:	00000014 00000015 0000001b              ............

00008024 <kb_row>:
    8024:	00000004 00000008 00000010 00000020     ............ ...
    8034:	00000040 00000080 00000400 00000800     @...............
    8044:	00001000 00002000                       ..... ..

0000804c <kb_row_index>:
    804c:	00000002 00000003 00000004 00000005     ................
    805c:	00000006 00000007 0000000a 0000000b     ................
    806c:	0000000c 0000000d                       ........

00008074 <beelzebub.12961>:
    8074:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    8084:	64012201 d4019201 08020702 5f023402     .".d.........4._
    8094:	94027802 bb02a602 db02ca02 f902e802     .x..............
    80a4:	7f031f03                                ....

000080a8 <belial.12958>:
    80a8:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    80b8:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    80c8:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    80d8:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    80e8:	35c9c9c9 0000363a                       ...5:6..

000080f0 <lucifer.12960>:
    80f0:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    8100:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    8110:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    8120:	00cc0008 01707005 02030303 02d00000     .....pp.........
    8130:	00505050 00000055                       PPP.U...

00008138 <mulciber.12959>:
    8138:	03020100 02010004 00020100 01000201     ................
    8148:	02010002 00020100 01000201 01000002     ................
    8158:	02010000 00020100 01000201 03020100     ................
    8168:	00000004 01000100 01000302 02010002     ................
    8178:	00000403 00000000 65530d0a 6c616972     ..........Serial
    8188:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00008198 <_global_impure_ptr>:
    8198:	200001a8 33323130 37363534 62613938     ... 0123456789ab
    81a8:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    81b8:	76757473 7a797877 00000000              stuvwxyz....

000081c4 <__sf_fake_stderr>:
	...

000081e4 <__sf_fake_stdin>:
	...

00008204 <__sf_fake_stdout>:
	...
    8224:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8234:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8244:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8254:	00006665                                ef..

00008258 <_init>:
    8258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    825a:	46c0      	nop			; (mov r8, r8)
    825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    825e:	bc08      	pop	{r3}
    8260:	469e      	mov	lr, r3
    8262:	4770      	bx	lr

00008264 <__init_array_start>:
    8264:	000000dd 	.word	0x000000dd

00008268 <_fini>:
    8268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    826a:	46c0      	nop			; (mov r8, r8)
    826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    826e:	bc08      	pop	{r3}
    8270:	469e      	mov	lr, r3
    8272:	4770      	bx	lr

00008274 <__fini_array_start>:
    8274:	000000b5 	.word	0x000000b5
