
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000712c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000009c  20000000  0000712c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000274  2000009c  000071c8  0002009c  2**2
                  ALLOC
  3 .stack        00002000  20000310  0000743c  0002009c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002eac6  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040ca  00000000  00000000  0004ebe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000613d  00000000  00000000  00052cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000618  00000000  00000000  00058dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000768  00000000  00000000  00059402  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c33b  00000000  00000000  00059b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ddbc  00000000  00000000  00075ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008ff08  00000000  00000000  00083c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001760  00000000  00000000  00113b6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 23 00 20 c1 18 00 00 bd 18 00 00 bd 18 00 00     .#. ............
	...
      2c:	bd 18 00 00 00 00 00 00 00 00 00 00 bd 18 00 00     ................
      3c:	5d 37 00 00 bd 18 00 00 bd 18 00 00 bd 18 00 00     ]7..............
      4c:	bd 18 00 00 bd 18 00 00 bd 18 00 00 bd 18 00 00     ................
      5c:	bd 18 00 00 bd 18 00 00 61 0b 00 00 71 0b 00 00     ........a...q...
      6c:	81 0b 00 00 91 0b 00 00 a1 0b 00 00 b1 0b 00 00     ................
      7c:	bd 18 00 00 bd 18 00 00 bd 18 00 00 bd 18 00 00     ................
      8c:	bd 18 00 00 bd 18 00 00 bd 18 00 00 bd 18 00 00     ................
      9c:	95 06 00 00 bd 18 00 00 bd 18 00 00 bd 18 00 00     ................
      ac:	bd 18 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000009c 	.word	0x2000009c
      d4:	00000000 	.word	0x00000000
      d8:	0000712c 	.word	0x0000712c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a0 	.word	0x200000a0
     108:	0000712c 	.word	0x0000712c
     10c:	0000712c 	.word	0x0000712c
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	0000164d 	.word	0x0000164d
     140:	00003ce1 	.word	0x00003ce1
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	200000b8 	.word	0x200000b8
     1b8:	200000bc 	.word	0x200000bc
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	200000b8 	.word	0x200000b8
     1e8:	200000bc 	.word	0x200000bc
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	203e      	movs	r0, #62	; 0x3e
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	05d2      	lsls	r2, r2, #23
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	200f      	movs	r0, #15
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	00000759 	.word	0x00000759
     224:	41004480 	.word	0x41004480

00000228 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     228:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     22a:	2200      	movs	r2, #0
     22c:	2300      	movs	r3, #0
     22e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     230:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     232:	2100      	movs	r1, #0
     234:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     236:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     238:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     23a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     23c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     23e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     240:	24c0      	movs	r4, #192	; 0xc0
     242:	0164      	lsls	r4, r4, #5
     244:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     246:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     248:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     24a:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     24c:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     24e:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     250:	242a      	movs	r4, #42	; 0x2a
     252:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     254:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     256:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     258:	3c06      	subs	r4, #6
     25a:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     25c:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     25e:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     260:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     262:	232b      	movs	r3, #43	; 0x2b
     264:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     266:	3301      	adds	r3, #1
     268:	54c1      	strb	r1, [r0, r3]
}
     26a:	bd10      	pop	{r4, pc}

0000026c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     26c:	b5f0      	push	{r4, r5, r6, r7, lr}
     26e:	46d6      	mov	lr, sl
     270:	464f      	mov	r7, r9
     272:	4646      	mov	r6, r8
     274:	b5c0      	push	{r6, r7, lr}
     276:	b096      	sub	sp, #88	; 0x58
     278:	0007      	movs	r7, r0
     27a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     27c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     27e:	4ac6      	ldr	r2, [pc, #792]	; (598 <adc_init+0x32c>)
     280:	6a10      	ldr	r0, [r2, #32]
     282:	2380      	movs	r3, #128	; 0x80
     284:	025b      	lsls	r3, r3, #9
     286:	4303      	orrs	r3, r0
     288:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     28a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     28c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     28e:	07db      	lsls	r3, r3, #31
     290:	d505      	bpl.n	29e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     292:	b016      	add	sp, #88	; 0x58
     294:	bc1c      	pop	{r2, r3, r4}
     296:	4690      	mov	r8, r2
     298:	4699      	mov	r9, r3
     29a:	46a2      	mov	sl, r4
     29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     29e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     2a0:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     2a2:	079b      	lsls	r3, r3, #30
     2a4:	d4f5      	bmi.n	292 <adc_init+0x26>
	module_inst->reference = config->reference;
     2a6:	7873      	ldrb	r3, [r6, #1]
     2a8:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     2aa:	2b00      	cmp	r3, #0
     2ac:	d104      	bne.n	2b8 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     2ae:	4abb      	ldr	r2, [pc, #748]	; (59c <adc_init+0x330>)
     2b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
     2b2:	2104      	movs	r1, #4
     2b4:	430b      	orrs	r3, r1
     2b6:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     2b8:	2300      	movs	r3, #0
     2ba:	60bb      	str	r3, [r7, #8]
     2bc:	60fb      	str	r3, [r7, #12]
     2be:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     2c0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     2c2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     2c4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     2c6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     2c8:	4bb5      	ldr	r3, [pc, #724]	; (5a0 <adc_init+0x334>)
     2ca:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     2cc:	232a      	movs	r3, #42	; 0x2a
     2ce:	5cf3      	ldrb	r3, [r6, r3]
     2d0:	2b00      	cmp	r3, #0
     2d2:	d105      	bne.n	2e0 <adc_init+0x74>
     2d4:	7d33      	ldrb	r3, [r6, #20]
     2d6:	2b00      	cmp	r3, #0
     2d8:	d102      	bne.n	2e0 <adc_init+0x74>
		module_inst->software_trigger = true;
     2da:	3301      	adds	r3, #1
     2dc:	777b      	strb	r3, [r7, #29]
     2de:	e001      	b.n	2e4 <adc_init+0x78>
		module_inst->software_trigger = false;
     2e0:	2300      	movs	r3, #0
     2e2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     2e4:	683b      	ldr	r3, [r7, #0]
     2e6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     2e8:	7833      	ldrb	r3, [r6, #0]
     2ea:	466a      	mov	r2, sp
     2ec:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     2ee:	4669      	mov	r1, sp
     2f0:	201e      	movs	r0, #30
     2f2:	4bac      	ldr	r3, [pc, #688]	; (5a4 <adc_init+0x338>)
     2f4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     2f6:	201e      	movs	r0, #30
     2f8:	4bab      	ldr	r3, [pc, #684]	; (5a8 <adc_init+0x33c>)
     2fa:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     2fc:	232c      	movs	r3, #44	; 0x2c
     2fe:	5cf2      	ldrb	r2, [r6, r3]
     300:	2a00      	cmp	r2, #0
     302:	d054      	beq.n	3ae <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     304:	3b01      	subs	r3, #1
     306:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     308:	7b33      	ldrb	r3, [r6, #12]
     30a:	18eb      	adds	r3, r5, r3
     30c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     30e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     310:	b2c9      	uxtb	r1, r1
     312:	428b      	cmp	r3, r1
     314:	d221      	bcs.n	35a <adc_init+0xee>
     316:	1952      	adds	r2, r2, r5
     318:	b2d3      	uxtb	r3, r2
     31a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     31c:	4ba3      	ldr	r3, [pc, #652]	; (5ac <adc_init+0x340>)
     31e:	469a      	mov	sl, r3
     320:	e003      	b.n	32a <adc_init+0xbe>
			offset++;
     322:	3501      	adds	r5, #1
     324:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     326:	454d      	cmp	r5, r9
     328:	d017      	beq.n	35a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     32a:	240f      	movs	r4, #15
     32c:	402c      	ands	r4, r5
     32e:	7b33      	ldrb	r3, [r6, #12]
     330:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     332:	2250      	movs	r2, #80	; 0x50
     334:	499e      	ldr	r1, [pc, #632]	; (5b0 <adc_init+0x344>)
     336:	a802      	add	r0, sp, #8
     338:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     33a:	2c13      	cmp	r4, #19
     33c:	d8f1      	bhi.n	322 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     33e:	00a4      	lsls	r4, r4, #2
     340:	ab02      	add	r3, sp, #8
     342:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     344:	a901      	add	r1, sp, #4
     346:	2300      	movs	r3, #0
     348:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     34a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     34c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     34e:	3301      	adds	r3, #1
     350:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     352:	b2c0      	uxtb	r0, r0
     354:	4b97      	ldr	r3, [pc, #604]	; (5b4 <adc_init+0x348>)
     356:	4798      	blx	r3
     358:	e7e3      	b.n	322 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     35a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     35c:	2250      	movs	r2, #80	; 0x50
     35e:	4994      	ldr	r1, [pc, #592]	; (5b0 <adc_init+0x344>)
     360:	a802      	add	r0, sp, #8
     362:	4b92      	ldr	r3, [pc, #584]	; (5ac <adc_init+0x340>)
     364:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     366:	2c13      	cmp	r4, #19
     368:	d913      	bls.n	392 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     36a:	7d73      	ldrb	r3, [r6, #21]
     36c:	009b      	lsls	r3, r3, #2
     36e:	b2db      	uxtb	r3, r3
     370:	4642      	mov	r2, r8
     372:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     374:	7db3      	ldrb	r3, [r6, #22]
     376:	01db      	lsls	r3, r3, #7
     378:	7872      	ldrb	r2, [r6, #1]
     37a:	4313      	orrs	r3, r2
     37c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     37e:	4642      	mov	r2, r8
     380:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     382:	7933      	ldrb	r3, [r6, #4]
     384:	2b34      	cmp	r3, #52	; 0x34
     386:	d900      	bls.n	38a <adc_init+0x11e>
     388:	e17b      	b.n	682 <adc_init+0x416>
     38a:	009b      	lsls	r3, r3, #2
     38c:	4a8a      	ldr	r2, [pc, #552]	; (5b8 <adc_init+0x34c>)
     38e:	58d3      	ldr	r3, [r2, r3]
     390:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     392:	00a4      	lsls	r4, r4, #2
     394:	ab02      	add	r3, sp, #8
     396:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     398:	a901      	add	r1, sp, #4
     39a:	2300      	movs	r3, #0
     39c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     39e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3a0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3a2:	3301      	adds	r3, #1
     3a4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3a6:	b2c0      	uxtb	r0, r0
     3a8:	4b82      	ldr	r3, [pc, #520]	; (5b4 <adc_init+0x348>)
     3aa:	4798      	blx	r3
     3ac:	e7dd      	b.n	36a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     3ae:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     3b0:	2250      	movs	r2, #80	; 0x50
     3b2:	497f      	ldr	r1, [pc, #508]	; (5b0 <adc_init+0x344>)
     3b4:	a802      	add	r0, sp, #8
     3b6:	4b7d      	ldr	r3, [pc, #500]	; (5ac <adc_init+0x340>)
     3b8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3ba:	2c13      	cmp	r4, #19
     3bc:	d915      	bls.n	3ea <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     3be:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     3c0:	2250      	movs	r2, #80	; 0x50
     3c2:	497b      	ldr	r1, [pc, #492]	; (5b0 <adc_init+0x344>)
     3c4:	a802      	add	r0, sp, #8
     3c6:	4b79      	ldr	r3, [pc, #484]	; (5ac <adc_init+0x340>)
     3c8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     3ca:	2c13      	cmp	r4, #19
     3cc:	d8cd      	bhi.n	36a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3ce:	00a4      	lsls	r4, r4, #2
     3d0:	ab02      	add	r3, sp, #8
     3d2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3d4:	a901      	add	r1, sp, #4
     3d6:	2300      	movs	r3, #0
     3d8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3da:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3dc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3de:	3301      	adds	r3, #1
     3e0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3e2:	b2c0      	uxtb	r0, r0
     3e4:	4b73      	ldr	r3, [pc, #460]	; (5b4 <adc_init+0x348>)
     3e6:	4798      	blx	r3
     3e8:	e7bf      	b.n	36a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     3ea:	00a4      	lsls	r4, r4, #2
     3ec:	ab02      	add	r3, sp, #8
     3ee:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     3f0:	a901      	add	r1, sp, #4
     3f2:	2300      	movs	r3, #0
     3f4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     3f6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     3f8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     3fa:	3301      	adds	r3, #1
     3fc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     3fe:	b2c0      	uxtb	r0, r0
     400:	4b6c      	ldr	r3, [pc, #432]	; (5b4 <adc_init+0x348>)
     402:	4798      	blx	r3
     404:	e7db      	b.n	3be <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     406:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     408:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     40a:	2102      	movs	r1, #2
     40c:	e01a      	b.n	444 <adc_init+0x1d8>
		adjres = config->divide_result;
     40e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     410:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     412:	2410      	movs	r4, #16
     414:	e016      	b.n	444 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     416:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     418:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     41a:	2101      	movs	r1, #1
     41c:	e012      	b.n	444 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     41e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     420:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     422:	2100      	movs	r1, #0
     424:	e00e      	b.n	444 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     426:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     428:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     42a:	2100      	movs	r1, #0
     42c:	e00a      	b.n	444 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     42e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     430:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     432:	2100      	movs	r1, #0
     434:	e006      	b.n	444 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     436:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     438:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     43a:	2100      	movs	r1, #0
     43c:	e002      	b.n	444 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     43e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     440:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     442:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     444:	0109      	lsls	r1, r1, #4
     446:	2270      	movs	r2, #112	; 0x70
     448:	400a      	ands	r2, r1
     44a:	4313      	orrs	r3, r2
     44c:	4642      	mov	r2, r8
     44e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     450:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     452:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     454:	2b3f      	cmp	r3, #63	; 0x3f
     456:	d900      	bls.n	45a <adc_init+0x1ee>
     458:	e71b      	b.n	292 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     45a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     45c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     45e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     460:	b25b      	sxtb	r3, r3
     462:	2b00      	cmp	r3, #0
     464:	dbfb      	blt.n	45e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     466:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     468:	8872      	ldrh	r2, [r6, #2]
     46a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     46c:	2224      	movs	r2, #36	; 0x24
     46e:	5cb2      	ldrb	r2, [r6, r2]
     470:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     472:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     474:	7d32      	ldrb	r2, [r6, #20]
     476:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     478:	4313      	orrs	r3, r2
     47a:	7cb2      	ldrb	r2, [r6, #18]
     47c:	0052      	lsls	r2, r2, #1
     47e:	4313      	orrs	r3, r2
     480:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     482:	4642      	mov	r2, r8
     484:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     486:	7e33      	ldrb	r3, [r6, #24]
     488:	2b00      	cmp	r3, #0
     48a:	d020      	beq.n	4ce <adc_init+0x262>
		switch (resolution) {
     48c:	2c10      	cmp	r4, #16
     48e:	d100      	bne.n	492 <adc_init+0x226>
     490:	e0d9      	b.n	646 <adc_init+0x3da>
     492:	d800      	bhi.n	496 <adc_init+0x22a>
     494:	e098      	b.n	5c8 <adc_init+0x35c>
     496:	2c20      	cmp	r4, #32
     498:	d100      	bne.n	49c <adc_init+0x230>
     49a:	e0b6      	b.n	60a <adc_init+0x39e>
     49c:	2c30      	cmp	r4, #48	; 0x30
     49e:	d116      	bne.n	4ce <adc_init+0x262>
			if (config->differential_mode &&
     4a0:	7cf2      	ldrb	r2, [r6, #19]
     4a2:	2a00      	cmp	r2, #0
     4a4:	d00a      	beq.n	4bc <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     4a6:	69f2      	ldr	r2, [r6, #28]
     4a8:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4aa:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4ac:	2aff      	cmp	r2, #255	; 0xff
     4ae:	d900      	bls.n	4b2 <adc_init+0x246>
     4b0:	e6ef      	b.n	292 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     4b2:	6a32      	ldr	r2, [r6, #32]
     4b4:	3280      	adds	r2, #128	; 0x80
     4b6:	2aff      	cmp	r2, #255	; 0xff
     4b8:	d900      	bls.n	4bc <adc_init+0x250>
     4ba:	e6ea      	b.n	292 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     4bc:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     4be:	69f2      	ldr	r2, [r6, #28]
     4c0:	2aff      	cmp	r2, #255	; 0xff
     4c2:	dd00      	ble.n	4c6 <adc_init+0x25a>
     4c4:	e6e5      	b.n	292 <adc_init+0x26>
     4c6:	6a32      	ldr	r2, [r6, #32]
     4c8:	2aff      	cmp	r2, #255	; 0xff
     4ca:	dd00      	ble.n	4ce <adc_init+0x262>
     4cc:	e6e1      	b.n	292 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     4ce:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4d0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     4d2:	b252      	sxtb	r2, r2
     4d4:	2a00      	cmp	r2, #0
     4d6:	dbfb      	blt.n	4d0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     4d8:	4642      	mov	r2, r8
     4da:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     4dc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4de:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     4e0:	b25b      	sxtb	r3, r3
     4e2:	2b00      	cmp	r3, #0
     4e4:	dbfb      	blt.n	4de <adc_init+0x272>
	adc_module->WINLT.reg =
     4e6:	8bb3      	ldrh	r3, [r6, #28]
     4e8:	4642      	mov	r2, r8
     4ea:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     4ec:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4ee:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     4f0:	b25b      	sxtb	r3, r3
     4f2:	2b00      	cmp	r3, #0
     4f4:	dbfb      	blt.n	4ee <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     4f6:	8c33      	ldrh	r3, [r6, #32]
     4f8:	4642      	mov	r2, r8
     4fa:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     4fc:	232c      	movs	r3, #44	; 0x2c
     4fe:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     500:	2b00      	cmp	r3, #0
     502:	d005      	beq.n	510 <adc_init+0x2a4>
		inputs_to_scan--;
     504:	3b01      	subs	r3, #1
     506:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     508:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     50a:	2b0f      	cmp	r3, #15
     50c:	d900      	bls.n	510 <adc_init+0x2a4>
     50e:	e6c0      	b.n	292 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     510:	222b      	movs	r2, #43	; 0x2b
     512:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     514:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     516:	290f      	cmp	r1, #15
     518:	d900      	bls.n	51c <adc_init+0x2b0>
     51a:	e6ba      	b.n	292 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     51c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     51e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     520:	b252      	sxtb	r2, r2
     522:	2a00      	cmp	r2, #0
     524:	dbfb      	blt.n	51e <adc_init+0x2b2>
			config->negative_input |
     526:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     528:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     52a:	4302      	orrs	r2, r0
     52c:	68b0      	ldr	r0, [r6, #8]
     52e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     530:	0509      	lsls	r1, r1, #20
			config->negative_input |
     532:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     534:	041b      	lsls	r3, r3, #16
			config->negative_input |
     536:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     538:	4642      	mov	r2, r8
     53a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     53c:	232a      	movs	r3, #42	; 0x2a
     53e:	5cf3      	ldrb	r3, [r6, r3]
     540:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     542:	230f      	movs	r3, #15
     544:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     546:	3315      	adds	r3, #21
     548:	5cf3      	ldrb	r3, [r6, r3]
     54a:	2b00      	cmp	r3, #0
     54c:	d012      	beq.n	574 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     54e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     550:	4a1a      	ldr	r2, [pc, #104]	; (5bc <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     552:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     554:	4293      	cmp	r3, r2
     556:	d900      	bls.n	55a <adc_init+0x2ee>
     558:	e69b      	b.n	292 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     55a:	4642      	mov	r2, r8
     55c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     55e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     560:	2380      	movs	r3, #128	; 0x80
     562:	011b      	lsls	r3, r3, #4
     564:	18d3      	adds	r3, r2, r3
     566:	4915      	ldr	r1, [pc, #84]	; (5bc <adc_init+0x350>)
     568:	b29b      	uxth	r3, r3
     56a:	428b      	cmp	r3, r1
     56c:	d900      	bls.n	570 <adc_init+0x304>
     56e:	e690      	b.n	292 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     570:	4643      	mov	r3, r8
     572:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     574:	4b12      	ldr	r3, [pc, #72]	; (5c0 <adc_init+0x354>)
     576:	681b      	ldr	r3, [r3, #0]
     578:	015b      	lsls	r3, r3, #5
     57a:	22e0      	movs	r2, #224	; 0xe0
     57c:	00d2      	lsls	r2, r2, #3
     57e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     580:	4a10      	ldr	r2, [pc, #64]	; (5c4 <adc_init+0x358>)
     582:	6851      	ldr	r1, [r2, #4]
     584:	0149      	lsls	r1, r1, #5
     586:	6812      	ldr	r2, [r2, #0]
     588:	0ed2      	lsrs	r2, r2, #27
     58a:	430a      	orrs	r2, r1
     58c:	b2d2      	uxtb	r2, r2
			) |
     58e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     590:	4642      	mov	r2, r8
     592:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     594:	2000      	movs	r0, #0
     596:	e67c      	b.n	292 <adc_init+0x26>
     598:	40000400 	.word	0x40000400
     59c:	40000800 	.word	0x40000800
     5a0:	20000188 	.word	0x20000188
     5a4:	00001765 	.word	0x00001765
     5a8:	000016d9 	.word	0x000016d9
     5ac:	00003e95 	.word	0x00003e95
     5b0:	00005054 	.word	0x00005054
     5b4:	0000185d 	.word	0x0000185d
     5b8:	00004f80 	.word	0x00004f80
     5bc:	00000fff 	.word	0x00000fff
     5c0:	00806024 	.word	0x00806024
     5c4:	00806020 	.word	0x00806020
		switch (resolution) {
     5c8:	2c00      	cmp	r4, #0
     5ca:	d000      	beq.n	5ce <adc_init+0x362>
     5cc:	e77f      	b.n	4ce <adc_init+0x262>
			if (config->differential_mode &&
     5ce:	7cf2      	ldrb	r2, [r6, #19]
     5d0:	2a00      	cmp	r2, #0
     5d2:	d00f      	beq.n	5f4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     5d4:	69f2      	ldr	r2, [r6, #28]
     5d6:	2180      	movs	r1, #128	; 0x80
     5d8:	0109      	lsls	r1, r1, #4
     5da:	468c      	mov	ip, r1
     5dc:	4462      	add	r2, ip
			if (config->differential_mode &&
     5de:	492a      	ldr	r1, [pc, #168]	; (688 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     5e0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5e2:	428a      	cmp	r2, r1
     5e4:	d900      	bls.n	5e8 <adc_init+0x37c>
     5e6:	e654      	b.n	292 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     5e8:	6a32      	ldr	r2, [r6, #32]
     5ea:	4462      	add	r2, ip
     5ec:	4926      	ldr	r1, [pc, #152]	; (688 <adc_init+0x41c>)
     5ee:	428a      	cmp	r2, r1
     5f0:	d900      	bls.n	5f4 <adc_init+0x388>
     5f2:	e64e      	b.n	292 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     5f4:	4a24      	ldr	r2, [pc, #144]	; (688 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     5f6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     5f8:	69f1      	ldr	r1, [r6, #28]
     5fa:	4291      	cmp	r1, r2
     5fc:	dd00      	ble.n	600 <adc_init+0x394>
     5fe:	e648      	b.n	292 <adc_init+0x26>
     600:	6a31      	ldr	r1, [r6, #32]
     602:	4291      	cmp	r1, r2
     604:	dd00      	ble.n	608 <adc_init+0x39c>
     606:	e644      	b.n	292 <adc_init+0x26>
     608:	e761      	b.n	4ce <adc_init+0x262>
			if (config->differential_mode &&
     60a:	7cf2      	ldrb	r2, [r6, #19]
     60c:	2a00      	cmp	r2, #0
     60e:	d00f      	beq.n	630 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     610:	69f2      	ldr	r2, [r6, #28]
     612:	2180      	movs	r1, #128	; 0x80
     614:	0089      	lsls	r1, r1, #2
     616:	468c      	mov	ip, r1
     618:	4462      	add	r2, ip
			if (config->differential_mode &&
     61a:	491c      	ldr	r1, [pc, #112]	; (68c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     61c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     61e:	428a      	cmp	r2, r1
     620:	d900      	bls.n	624 <adc_init+0x3b8>
     622:	e636      	b.n	292 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     624:	6a32      	ldr	r2, [r6, #32]
     626:	4462      	add	r2, ip
     628:	4918      	ldr	r1, [pc, #96]	; (68c <adc_init+0x420>)
     62a:	428a      	cmp	r2, r1
     62c:	d900      	bls.n	630 <adc_init+0x3c4>
     62e:	e630      	b.n	292 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     630:	4a16      	ldr	r2, [pc, #88]	; (68c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     632:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     634:	69f1      	ldr	r1, [r6, #28]
     636:	4291      	cmp	r1, r2
     638:	dd00      	ble.n	63c <adc_init+0x3d0>
     63a:	e62a      	b.n	292 <adc_init+0x26>
     63c:	6a31      	ldr	r1, [r6, #32]
     63e:	4291      	cmp	r1, r2
     640:	dd00      	ble.n	644 <adc_init+0x3d8>
     642:	e626      	b.n	292 <adc_init+0x26>
     644:	e743      	b.n	4ce <adc_init+0x262>
			if (config->differential_mode &&
     646:	7cf2      	ldrb	r2, [r6, #19]
     648:	2a00      	cmp	r2, #0
     64a:	d00f      	beq.n	66c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     64c:	69f2      	ldr	r2, [r6, #28]
     64e:	2180      	movs	r1, #128	; 0x80
     650:	0209      	lsls	r1, r1, #8
     652:	468c      	mov	ip, r1
     654:	4462      	add	r2, ip
			if (config->differential_mode &&
     656:	490e      	ldr	r1, [pc, #56]	; (690 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     658:	2017      	movs	r0, #23
			if (config->differential_mode &&
     65a:	428a      	cmp	r2, r1
     65c:	d900      	bls.n	660 <adc_init+0x3f4>
     65e:	e618      	b.n	292 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     660:	6a32      	ldr	r2, [r6, #32]
     662:	4462      	add	r2, ip
     664:	490a      	ldr	r1, [pc, #40]	; (690 <adc_init+0x424>)
     666:	428a      	cmp	r2, r1
     668:	d900      	bls.n	66c <adc_init+0x400>
     66a:	e612      	b.n	292 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     66c:	4a08      	ldr	r2, [pc, #32]	; (690 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     66e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     670:	69f1      	ldr	r1, [r6, #28]
     672:	4291      	cmp	r1, r2
     674:	dd00      	ble.n	678 <adc_init+0x40c>
     676:	e60c      	b.n	292 <adc_init+0x26>
     678:	6a31      	ldr	r1, [r6, #32]
     67a:	4291      	cmp	r1, r2
     67c:	dd00      	ble.n	680 <adc_init+0x414>
     67e:	e608      	b.n	292 <adc_init+0x26>
     680:	e725      	b.n	4ce <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     682:	2017      	movs	r0, #23
     684:	e605      	b.n	292 <adc_init+0x26>
     686:	46c0      	nop			; (mov r8, r8)
     688:	00000fff 	.word	0x00000fff
     68c:	000003ff 	.word	0x000003ff
     690:	0000ffff 	.word	0x0000ffff

00000694 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     694:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     696:	4b2f      	ldr	r3, [pc, #188]	; (754 <ADC_Handler+0xc0>)
     698:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     69a:	682b      	ldr	r3, [r5, #0]
     69c:	7e1a      	ldrb	r2, [r3, #24]
     69e:	7ddc      	ldrb	r4, [r3, #23]
     6a0:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     6a2:	07e2      	lsls	r2, r4, #31
     6a4:	d416      	bmi.n	6d4 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     6a6:	0763      	lsls	r3, r4, #29
     6a8:	d508      	bpl.n	6bc <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     6aa:	2304      	movs	r3, #4
     6ac:	682a      	ldr	r2, [r5, #0]
     6ae:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     6b0:	7eeb      	ldrb	r3, [r5, #27]
     6b2:	079b      	lsls	r3, r3, #30
     6b4:	d502      	bpl.n	6bc <ADC_Handler+0x28>
     6b6:	7eab      	ldrb	r3, [r5, #26]
     6b8:	079b      	lsls	r3, r3, #30
     6ba:	d442      	bmi.n	742 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     6bc:	07a3      	lsls	r3, r4, #30
     6be:	d508      	bpl.n	6d2 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     6c0:	2302      	movs	r3, #2
     6c2:	682a      	ldr	r2, [r5, #0]
     6c4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     6c6:	7eeb      	ldrb	r3, [r5, #27]
     6c8:	075b      	lsls	r3, r3, #29
     6ca:	d502      	bpl.n	6d2 <ADC_Handler+0x3e>
     6cc:	7eab      	ldrb	r3, [r5, #26]
     6ce:	075b      	lsls	r3, r3, #29
     6d0:	d43b      	bmi.n	74a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     6d2:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     6d4:	2201      	movs	r2, #1
     6d6:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     6d8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     6da:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     6dc:	b25b      	sxtb	r3, r3
     6de:	2b00      	cmp	r3, #0
     6e0:	dbfb      	blt.n	6da <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     6e2:	6969      	ldr	r1, [r5, #20]
     6e4:	1c8b      	adds	r3, r1, #2
     6e6:	616b      	str	r3, [r5, #20]
     6e8:	8b53      	ldrh	r3, [r2, #26]
     6ea:	b29b      	uxth	r3, r3
     6ec:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     6ee:	8b2b      	ldrh	r3, [r5, #24]
     6f0:	3b01      	subs	r3, #1
     6f2:	b29b      	uxth	r3, r3
     6f4:	832b      	strh	r3, [r5, #24]
     6f6:	2b00      	cmp	r3, #0
     6f8:	d011      	beq.n	71e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     6fa:	7f6b      	ldrb	r3, [r5, #29]
     6fc:	2b00      	cmp	r3, #0
     6fe:	d0d2      	beq.n	6a6 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     700:	682a      	ldr	r2, [r5, #0]
     702:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     704:	b25b      	sxtb	r3, r3
     706:	2b00      	cmp	r3, #0
     708:	dbfb      	blt.n	702 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     70a:	7b13      	ldrb	r3, [r2, #12]
     70c:	2102      	movs	r1, #2
     70e:	430b      	orrs	r3, r1
     710:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     712:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     714:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     716:	b25b      	sxtb	r3, r3
     718:	2b00      	cmp	r3, #0
     71a:	dbfb      	blt.n	714 <ADC_Handler+0x80>
     71c:	e7c3      	b.n	6a6 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     71e:	2301      	movs	r3, #1
     720:	682a      	ldr	r2, [r5, #0]
     722:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     724:	7f2b      	ldrb	r3, [r5, #28]
     726:	2b05      	cmp	r3, #5
     728:	d1bd      	bne.n	6a6 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     72a:	2300      	movs	r3, #0
     72c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     72e:	7eeb      	ldrb	r3, [r5, #27]
     730:	07db      	lsls	r3, r3, #31
     732:	d5b8      	bpl.n	6a6 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     734:	7eab      	ldrb	r3, [r5, #26]
     736:	07db      	lsls	r3, r3, #31
     738:	d5b5      	bpl.n	6a6 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     73a:	0028      	movs	r0, r5
     73c:	68ab      	ldr	r3, [r5, #8]
     73e:	4798      	blx	r3
     740:	e7b1      	b.n	6a6 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     742:	0028      	movs	r0, r5
     744:	68eb      	ldr	r3, [r5, #12]
     746:	4798      	blx	r3
     748:	e7b8      	b.n	6bc <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     74a:	692b      	ldr	r3, [r5, #16]
     74c:	0028      	movs	r0, r5
     74e:	4798      	blx	r3
}
     750:	e7bf      	b.n	6d2 <ADC_Handler+0x3e>
     752:	46c0      	nop			; (mov r8, r8)
     754:	20000188 	.word	0x20000188

00000758 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     758:	b500      	push	{lr}
     75a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     75c:	ab01      	add	r3, sp, #4
     75e:	2280      	movs	r2, #128	; 0x80
     760:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     762:	780a      	ldrb	r2, [r1, #0]
     764:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     766:	784a      	ldrb	r2, [r1, #1]
     768:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     76a:	788a      	ldrb	r2, [r1, #2]
     76c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     76e:	0019      	movs	r1, r3
     770:	4b01      	ldr	r3, [pc, #4]	; (778 <port_pin_set_config+0x20>)
     772:	4798      	blx	r3
}
     774:	b003      	add	sp, #12
     776:	bd00      	pop	{pc}
     778:	0000185d 	.word	0x0000185d

0000077c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     77c:	b5f0      	push	{r4, r5, r6, r7, lr}
     77e:	46de      	mov	lr, fp
     780:	4657      	mov	r7, sl
     782:	464e      	mov	r6, r9
     784:	4645      	mov	r5, r8
     786:	b5e0      	push	{r5, r6, r7, lr}
     788:	b087      	sub	sp, #28
     78a:	4680      	mov	r8, r0
     78c:	9104      	str	r1, [sp, #16]
     78e:	0016      	movs	r6, r2
     790:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     792:	2200      	movs	r2, #0
     794:	2300      	movs	r3, #0
     796:	2100      	movs	r1, #0
     798:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     79a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     79c:	2001      	movs	r0, #1
     79e:	0021      	movs	r1, r4
     7a0:	9600      	str	r6, [sp, #0]
     7a2:	9701      	str	r7, [sp, #4]
     7a4:	465c      	mov	r4, fp
     7a6:	9403      	str	r4, [sp, #12]
     7a8:	4644      	mov	r4, r8
     7aa:	9405      	str	r4, [sp, #20]
     7ac:	e013      	b.n	7d6 <long_division+0x5a>
     7ae:	2420      	movs	r4, #32
     7b0:	1a64      	subs	r4, r4, r1
     7b2:	0005      	movs	r5, r0
     7b4:	40e5      	lsrs	r5, r4
     7b6:	46a8      	mov	r8, r5
     7b8:	e014      	b.n	7e4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     7ba:	9c00      	ldr	r4, [sp, #0]
     7bc:	9d01      	ldr	r5, [sp, #4]
     7be:	1b12      	subs	r2, r2, r4
     7c0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     7c2:	465c      	mov	r4, fp
     7c4:	464d      	mov	r5, r9
     7c6:	432c      	orrs	r4, r5
     7c8:	46a3      	mov	fp, r4
     7ca:	9c03      	ldr	r4, [sp, #12]
     7cc:	4645      	mov	r5, r8
     7ce:	432c      	orrs	r4, r5
     7d0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     7d2:	3901      	subs	r1, #1
     7d4:	d325      	bcc.n	822 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     7d6:	2420      	movs	r4, #32
     7d8:	4264      	negs	r4, r4
     7da:	190c      	adds	r4, r1, r4
     7dc:	d4e7      	bmi.n	7ae <long_division+0x32>
     7de:	0005      	movs	r5, r0
     7e0:	40a5      	lsls	r5, r4
     7e2:	46a8      	mov	r8, r5
     7e4:	0004      	movs	r4, r0
     7e6:	408c      	lsls	r4, r1
     7e8:	46a1      	mov	r9, r4
		r = r << 1;
     7ea:	1892      	adds	r2, r2, r2
     7ec:	415b      	adcs	r3, r3
     7ee:	0014      	movs	r4, r2
     7f0:	001d      	movs	r5, r3
		if (n & bit_shift) {
     7f2:	9e05      	ldr	r6, [sp, #20]
     7f4:	464f      	mov	r7, r9
     7f6:	403e      	ands	r6, r7
     7f8:	46b4      	mov	ip, r6
     7fa:	9e04      	ldr	r6, [sp, #16]
     7fc:	4647      	mov	r7, r8
     7fe:	403e      	ands	r6, r7
     800:	46b2      	mov	sl, r6
     802:	4666      	mov	r6, ip
     804:	4657      	mov	r7, sl
     806:	433e      	orrs	r6, r7
     808:	d003      	beq.n	812 <long_division+0x96>
			r |= 0x01;
     80a:	0006      	movs	r6, r0
     80c:	4326      	orrs	r6, r4
     80e:	0032      	movs	r2, r6
     810:	002b      	movs	r3, r5
		if (r >= d) {
     812:	9c00      	ldr	r4, [sp, #0]
     814:	9d01      	ldr	r5, [sp, #4]
     816:	429d      	cmp	r5, r3
     818:	d8db      	bhi.n	7d2 <long_division+0x56>
     81a:	d1ce      	bne.n	7ba <long_division+0x3e>
     81c:	4294      	cmp	r4, r2
     81e:	d8d8      	bhi.n	7d2 <long_division+0x56>
     820:	e7cb      	b.n	7ba <long_division+0x3e>
     822:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     824:	4658      	mov	r0, fp
     826:	0019      	movs	r1, r3
     828:	b007      	add	sp, #28
     82a:	bc3c      	pop	{r2, r3, r4, r5}
     82c:	4690      	mov	r8, r2
     82e:	4699      	mov	r9, r3
     830:	46a2      	mov	sl, r4
     832:	46ab      	mov	fp, r5
     834:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000836 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     836:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     838:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     83a:	2340      	movs	r3, #64	; 0x40
     83c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     83e:	4281      	cmp	r1, r0
     840:	d202      	bcs.n	848 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     842:	0018      	movs	r0, r3
     844:	bd10      	pop	{r4, pc}
		baud_calculated++;
     846:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     848:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     84a:	1c63      	adds	r3, r4, #1
     84c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     84e:	4288      	cmp	r0, r1
     850:	d9f9      	bls.n	846 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     852:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     854:	2cff      	cmp	r4, #255	; 0xff
     856:	d8f4      	bhi.n	842 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     858:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     85a:	2300      	movs	r3, #0
     85c:	e7f1      	b.n	842 <_sercom_get_sync_baud_val+0xc>
	...

00000860 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     860:	b5f0      	push	{r4, r5, r6, r7, lr}
     862:	b083      	sub	sp, #12
     864:	000f      	movs	r7, r1
     866:	0016      	movs	r6, r2
     868:	aa08      	add	r2, sp, #32
     86a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     86c:	0004      	movs	r4, r0
     86e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     870:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     872:	42bc      	cmp	r4, r7
     874:	d902      	bls.n	87c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     876:	0010      	movs	r0, r2
     878:	b003      	add	sp, #12
     87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     87c:	2b00      	cmp	r3, #0
     87e:	d114      	bne.n	8aa <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     880:	0002      	movs	r2, r0
     882:	0008      	movs	r0, r1
     884:	2100      	movs	r1, #0
     886:	4c19      	ldr	r4, [pc, #100]	; (8ec <_sercom_get_async_baud_val+0x8c>)
     888:	47a0      	blx	r4
     88a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     88c:	003a      	movs	r2, r7
     88e:	2300      	movs	r3, #0
     890:	2000      	movs	r0, #0
     892:	4c17      	ldr	r4, [pc, #92]	; (8f0 <_sercom_get_async_baud_val+0x90>)
     894:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     896:	2200      	movs	r2, #0
     898:	2301      	movs	r3, #1
     89a:	1a12      	subs	r2, r2, r0
     89c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     89e:	0c12      	lsrs	r2, r2, #16
     8a0:	041b      	lsls	r3, r3, #16
     8a2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     8a4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     8a6:	2200      	movs	r2, #0
     8a8:	e7e5      	b.n	876 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     8aa:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     8ac:	2b01      	cmp	r3, #1
     8ae:	d1f9      	bne.n	8a4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     8b0:	000a      	movs	r2, r1
     8b2:	2300      	movs	r3, #0
     8b4:	2100      	movs	r1, #0
     8b6:	4c0d      	ldr	r4, [pc, #52]	; (8ec <_sercom_get_async_baud_val+0x8c>)
     8b8:	47a0      	blx	r4
     8ba:	0002      	movs	r2, r0
     8bc:	000b      	movs	r3, r1
     8be:	9200      	str	r2, [sp, #0]
     8c0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     8c2:	0038      	movs	r0, r7
     8c4:	2100      	movs	r1, #0
     8c6:	4c0a      	ldr	r4, [pc, #40]	; (8f0 <_sercom_get_async_baud_val+0x90>)
     8c8:	47a0      	blx	r4
     8ca:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     8cc:	2380      	movs	r3, #128	; 0x80
     8ce:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8d0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     8d2:	4298      	cmp	r0, r3
     8d4:	d8cf      	bhi.n	876 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     8d6:	0f79      	lsrs	r1, r7, #29
     8d8:	00f8      	lsls	r0, r7, #3
     8da:	9a00      	ldr	r2, [sp, #0]
     8dc:	9b01      	ldr	r3, [sp, #4]
     8de:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     8e0:	00ea      	lsls	r2, r5, #3
     8e2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     8e4:	b2d2      	uxtb	r2, r2
     8e6:	0352      	lsls	r2, r2, #13
     8e8:	432a      	orrs	r2, r5
     8ea:	e7db      	b.n	8a4 <_sercom_get_async_baud_val+0x44>
     8ec:	00003df9 	.word	0x00003df9
     8f0:	0000077d 	.word	0x0000077d

000008f4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     8f4:	b510      	push	{r4, lr}
     8f6:	b082      	sub	sp, #8
     8f8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     8fa:	4b0e      	ldr	r3, [pc, #56]	; (934 <sercom_set_gclk_generator+0x40>)
     8fc:	781b      	ldrb	r3, [r3, #0]
     8fe:	2b00      	cmp	r3, #0
     900:	d007      	beq.n	912 <sercom_set_gclk_generator+0x1e>
     902:	2900      	cmp	r1, #0
     904:	d105      	bne.n	912 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     906:	4b0b      	ldr	r3, [pc, #44]	; (934 <sercom_set_gclk_generator+0x40>)
     908:	785b      	ldrb	r3, [r3, #1]
     90a:	4283      	cmp	r3, r0
     90c:	d010      	beq.n	930 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     90e:	201d      	movs	r0, #29
     910:	e00c      	b.n	92c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     912:	a901      	add	r1, sp, #4
     914:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     916:	2013      	movs	r0, #19
     918:	4b07      	ldr	r3, [pc, #28]	; (938 <sercom_set_gclk_generator+0x44>)
     91a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     91c:	2013      	movs	r0, #19
     91e:	4b07      	ldr	r3, [pc, #28]	; (93c <sercom_set_gclk_generator+0x48>)
     920:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     922:	4b04      	ldr	r3, [pc, #16]	; (934 <sercom_set_gclk_generator+0x40>)
     924:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     926:	2201      	movs	r2, #1
     928:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     92a:	2000      	movs	r0, #0
}
     92c:	b002      	add	sp, #8
     92e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     930:	2000      	movs	r0, #0
     932:	e7fb      	b.n	92c <sercom_set_gclk_generator+0x38>
     934:	200000c0 	.word	0x200000c0
     938:	00001765 	.word	0x00001765
     93c:	000016d9 	.word	0x000016d9

00000940 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     940:	4b40      	ldr	r3, [pc, #256]	; (a44 <_sercom_get_default_pad+0x104>)
     942:	4298      	cmp	r0, r3
     944:	d031      	beq.n	9aa <_sercom_get_default_pad+0x6a>
     946:	d90a      	bls.n	95e <_sercom_get_default_pad+0x1e>
     948:	4b3f      	ldr	r3, [pc, #252]	; (a48 <_sercom_get_default_pad+0x108>)
     94a:	4298      	cmp	r0, r3
     94c:	d04d      	beq.n	9ea <_sercom_get_default_pad+0xaa>
     94e:	4b3f      	ldr	r3, [pc, #252]	; (a4c <_sercom_get_default_pad+0x10c>)
     950:	4298      	cmp	r0, r3
     952:	d05a      	beq.n	a0a <_sercom_get_default_pad+0xca>
     954:	4b3e      	ldr	r3, [pc, #248]	; (a50 <_sercom_get_default_pad+0x110>)
     956:	4298      	cmp	r0, r3
     958:	d037      	beq.n	9ca <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     95a:	2000      	movs	r0, #0
}
     95c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     95e:	4b3d      	ldr	r3, [pc, #244]	; (a54 <_sercom_get_default_pad+0x114>)
     960:	4298      	cmp	r0, r3
     962:	d00c      	beq.n	97e <_sercom_get_default_pad+0x3e>
     964:	4b3c      	ldr	r3, [pc, #240]	; (a58 <_sercom_get_default_pad+0x118>)
     966:	4298      	cmp	r0, r3
     968:	d1f7      	bne.n	95a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     96a:	2901      	cmp	r1, #1
     96c:	d017      	beq.n	99e <_sercom_get_default_pad+0x5e>
     96e:	2900      	cmp	r1, #0
     970:	d05d      	beq.n	a2e <_sercom_get_default_pad+0xee>
     972:	2902      	cmp	r1, #2
     974:	d015      	beq.n	9a2 <_sercom_get_default_pad+0x62>
     976:	2903      	cmp	r1, #3
     978:	d015      	beq.n	9a6 <_sercom_get_default_pad+0x66>
	return 0;
     97a:	2000      	movs	r0, #0
     97c:	e7ee      	b.n	95c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     97e:	2901      	cmp	r1, #1
     980:	d007      	beq.n	992 <_sercom_get_default_pad+0x52>
     982:	2900      	cmp	r1, #0
     984:	d051      	beq.n	a2a <_sercom_get_default_pad+0xea>
     986:	2902      	cmp	r1, #2
     988:	d005      	beq.n	996 <_sercom_get_default_pad+0x56>
     98a:	2903      	cmp	r1, #3
     98c:	d005      	beq.n	99a <_sercom_get_default_pad+0x5a>
	return 0;
     98e:	2000      	movs	r0, #0
     990:	e7e4      	b.n	95c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     992:	4832      	ldr	r0, [pc, #200]	; (a5c <_sercom_get_default_pad+0x11c>)
     994:	e7e2      	b.n	95c <_sercom_get_default_pad+0x1c>
     996:	4832      	ldr	r0, [pc, #200]	; (a60 <_sercom_get_default_pad+0x120>)
     998:	e7e0      	b.n	95c <_sercom_get_default_pad+0x1c>
     99a:	4832      	ldr	r0, [pc, #200]	; (a64 <_sercom_get_default_pad+0x124>)
     99c:	e7de      	b.n	95c <_sercom_get_default_pad+0x1c>
     99e:	4832      	ldr	r0, [pc, #200]	; (a68 <_sercom_get_default_pad+0x128>)
     9a0:	e7dc      	b.n	95c <_sercom_get_default_pad+0x1c>
     9a2:	4832      	ldr	r0, [pc, #200]	; (a6c <_sercom_get_default_pad+0x12c>)
     9a4:	e7da      	b.n	95c <_sercom_get_default_pad+0x1c>
     9a6:	4832      	ldr	r0, [pc, #200]	; (a70 <_sercom_get_default_pad+0x130>)
     9a8:	e7d8      	b.n	95c <_sercom_get_default_pad+0x1c>
     9aa:	2901      	cmp	r1, #1
     9ac:	d007      	beq.n	9be <_sercom_get_default_pad+0x7e>
     9ae:	2900      	cmp	r1, #0
     9b0:	d03f      	beq.n	a32 <_sercom_get_default_pad+0xf2>
     9b2:	2902      	cmp	r1, #2
     9b4:	d005      	beq.n	9c2 <_sercom_get_default_pad+0x82>
     9b6:	2903      	cmp	r1, #3
     9b8:	d005      	beq.n	9c6 <_sercom_get_default_pad+0x86>
	return 0;
     9ba:	2000      	movs	r0, #0
     9bc:	e7ce      	b.n	95c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9be:	482d      	ldr	r0, [pc, #180]	; (a74 <_sercom_get_default_pad+0x134>)
     9c0:	e7cc      	b.n	95c <_sercom_get_default_pad+0x1c>
     9c2:	482d      	ldr	r0, [pc, #180]	; (a78 <_sercom_get_default_pad+0x138>)
     9c4:	e7ca      	b.n	95c <_sercom_get_default_pad+0x1c>
     9c6:	482d      	ldr	r0, [pc, #180]	; (a7c <_sercom_get_default_pad+0x13c>)
     9c8:	e7c8      	b.n	95c <_sercom_get_default_pad+0x1c>
     9ca:	2901      	cmp	r1, #1
     9cc:	d007      	beq.n	9de <_sercom_get_default_pad+0x9e>
     9ce:	2900      	cmp	r1, #0
     9d0:	d031      	beq.n	a36 <_sercom_get_default_pad+0xf6>
     9d2:	2902      	cmp	r1, #2
     9d4:	d005      	beq.n	9e2 <_sercom_get_default_pad+0xa2>
     9d6:	2903      	cmp	r1, #3
     9d8:	d005      	beq.n	9e6 <_sercom_get_default_pad+0xa6>
	return 0;
     9da:	2000      	movs	r0, #0
     9dc:	e7be      	b.n	95c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9de:	4828      	ldr	r0, [pc, #160]	; (a80 <_sercom_get_default_pad+0x140>)
     9e0:	e7bc      	b.n	95c <_sercom_get_default_pad+0x1c>
     9e2:	4828      	ldr	r0, [pc, #160]	; (a84 <_sercom_get_default_pad+0x144>)
     9e4:	e7ba      	b.n	95c <_sercom_get_default_pad+0x1c>
     9e6:	4828      	ldr	r0, [pc, #160]	; (a88 <_sercom_get_default_pad+0x148>)
     9e8:	e7b8      	b.n	95c <_sercom_get_default_pad+0x1c>
     9ea:	2901      	cmp	r1, #1
     9ec:	d007      	beq.n	9fe <_sercom_get_default_pad+0xbe>
     9ee:	2900      	cmp	r1, #0
     9f0:	d023      	beq.n	a3a <_sercom_get_default_pad+0xfa>
     9f2:	2902      	cmp	r1, #2
     9f4:	d005      	beq.n	a02 <_sercom_get_default_pad+0xc2>
     9f6:	2903      	cmp	r1, #3
     9f8:	d005      	beq.n	a06 <_sercom_get_default_pad+0xc6>
	return 0;
     9fa:	2000      	movs	r0, #0
     9fc:	e7ae      	b.n	95c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9fe:	4823      	ldr	r0, [pc, #140]	; (a8c <_sercom_get_default_pad+0x14c>)
     a00:	e7ac      	b.n	95c <_sercom_get_default_pad+0x1c>
     a02:	4823      	ldr	r0, [pc, #140]	; (a90 <_sercom_get_default_pad+0x150>)
     a04:	e7aa      	b.n	95c <_sercom_get_default_pad+0x1c>
     a06:	4823      	ldr	r0, [pc, #140]	; (a94 <_sercom_get_default_pad+0x154>)
     a08:	e7a8      	b.n	95c <_sercom_get_default_pad+0x1c>
     a0a:	2901      	cmp	r1, #1
     a0c:	d007      	beq.n	a1e <_sercom_get_default_pad+0xde>
     a0e:	2900      	cmp	r1, #0
     a10:	d015      	beq.n	a3e <_sercom_get_default_pad+0xfe>
     a12:	2902      	cmp	r1, #2
     a14:	d005      	beq.n	a22 <_sercom_get_default_pad+0xe2>
     a16:	2903      	cmp	r1, #3
     a18:	d005      	beq.n	a26 <_sercom_get_default_pad+0xe6>
	return 0;
     a1a:	2000      	movs	r0, #0
     a1c:	e79e      	b.n	95c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a1e:	481e      	ldr	r0, [pc, #120]	; (a98 <_sercom_get_default_pad+0x158>)
     a20:	e79c      	b.n	95c <_sercom_get_default_pad+0x1c>
     a22:	481e      	ldr	r0, [pc, #120]	; (a9c <_sercom_get_default_pad+0x15c>)
     a24:	e79a      	b.n	95c <_sercom_get_default_pad+0x1c>
     a26:	481e      	ldr	r0, [pc, #120]	; (aa0 <_sercom_get_default_pad+0x160>)
     a28:	e798      	b.n	95c <_sercom_get_default_pad+0x1c>
     a2a:	481e      	ldr	r0, [pc, #120]	; (aa4 <_sercom_get_default_pad+0x164>)
     a2c:	e796      	b.n	95c <_sercom_get_default_pad+0x1c>
     a2e:	2003      	movs	r0, #3
     a30:	e794      	b.n	95c <_sercom_get_default_pad+0x1c>
     a32:	481d      	ldr	r0, [pc, #116]	; (aa8 <_sercom_get_default_pad+0x168>)
     a34:	e792      	b.n	95c <_sercom_get_default_pad+0x1c>
     a36:	481d      	ldr	r0, [pc, #116]	; (aac <_sercom_get_default_pad+0x16c>)
     a38:	e790      	b.n	95c <_sercom_get_default_pad+0x1c>
     a3a:	481d      	ldr	r0, [pc, #116]	; (ab0 <_sercom_get_default_pad+0x170>)
     a3c:	e78e      	b.n	95c <_sercom_get_default_pad+0x1c>
     a3e:	481d      	ldr	r0, [pc, #116]	; (ab4 <_sercom_get_default_pad+0x174>)
     a40:	e78c      	b.n	95c <_sercom_get_default_pad+0x1c>
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	42001000 	.word	0x42001000
     a48:	42001800 	.word	0x42001800
     a4c:	42001c00 	.word	0x42001c00
     a50:	42001400 	.word	0x42001400
     a54:	42000800 	.word	0x42000800
     a58:	42000c00 	.word	0x42000c00
     a5c:	00050003 	.word	0x00050003
     a60:	00060003 	.word	0x00060003
     a64:	00070003 	.word	0x00070003
     a68:	00010003 	.word	0x00010003
     a6c:	001e0003 	.word	0x001e0003
     a70:	001f0003 	.word	0x001f0003
     a74:	00090003 	.word	0x00090003
     a78:	000a0003 	.word	0x000a0003
     a7c:	000b0003 	.word	0x000b0003
     a80:	00110003 	.word	0x00110003
     a84:	00120003 	.word	0x00120003
     a88:	00130003 	.word	0x00130003
     a8c:	000d0003 	.word	0x000d0003
     a90:	000e0003 	.word	0x000e0003
     a94:	000f0003 	.word	0x000f0003
     a98:	00170003 	.word	0x00170003
     a9c:	00180003 	.word	0x00180003
     aa0:	00190003 	.word	0x00190003
     aa4:	00040003 	.word	0x00040003
     aa8:	00080003 	.word	0x00080003
     aac:	00100003 	.word	0x00100003
     ab0:	000c0003 	.word	0x000c0003
     ab4:	00160003 	.word	0x00160003

00000ab8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     ab8:	b530      	push	{r4, r5, lr}
     aba:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     abc:	4b0b      	ldr	r3, [pc, #44]	; (aec <_sercom_get_sercom_inst_index+0x34>)
     abe:	466a      	mov	r2, sp
     ac0:	cb32      	ldmia	r3!, {r1, r4, r5}
     ac2:	c232      	stmia	r2!, {r1, r4, r5}
     ac4:	cb32      	ldmia	r3!, {r1, r4, r5}
     ac6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ac8:	9b00      	ldr	r3, [sp, #0]
     aca:	4283      	cmp	r3, r0
     acc:	d00b      	beq.n	ae6 <_sercom_get_sercom_inst_index+0x2e>
     ace:	2301      	movs	r3, #1
     ad0:	009a      	lsls	r2, r3, #2
     ad2:	4669      	mov	r1, sp
     ad4:	5852      	ldr	r2, [r2, r1]
     ad6:	4282      	cmp	r2, r0
     ad8:	d006      	beq.n	ae8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ada:	3301      	adds	r3, #1
     adc:	2b06      	cmp	r3, #6
     ade:	d1f7      	bne.n	ad0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     ae0:	2000      	movs	r0, #0
}
     ae2:	b007      	add	sp, #28
     ae4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ae6:	2300      	movs	r3, #0
			return i;
     ae8:	b2d8      	uxtb	r0, r3
     aea:	e7fa      	b.n	ae2 <_sercom_get_sercom_inst_index+0x2a>
     aec:	000050a4 	.word	0x000050a4

00000af0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     af0:	4770      	bx	lr
	...

00000af4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     af4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     af6:	4b0a      	ldr	r3, [pc, #40]	; (b20 <_sercom_set_handler+0x2c>)
     af8:	781b      	ldrb	r3, [r3, #0]
     afa:	2b00      	cmp	r3, #0
     afc:	d10c      	bne.n	b18 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     afe:	4f09      	ldr	r7, [pc, #36]	; (b24 <_sercom_set_handler+0x30>)
     b00:	4e09      	ldr	r6, [pc, #36]	; (b28 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     b02:	4d0a      	ldr	r5, [pc, #40]	; (b2c <_sercom_set_handler+0x38>)
     b04:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b06:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     b08:	195a      	adds	r2, r3, r5
     b0a:	6014      	str	r4, [r2, #0]
     b0c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b0e:	2b18      	cmp	r3, #24
     b10:	d1f9      	bne.n	b06 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     b12:	2201      	movs	r2, #1
     b14:	4b02      	ldr	r3, [pc, #8]	; (b20 <_sercom_set_handler+0x2c>)
     b16:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b18:	0080      	lsls	r0, r0, #2
     b1a:	4b02      	ldr	r3, [pc, #8]	; (b24 <_sercom_set_handler+0x30>)
     b1c:	50c1      	str	r1, [r0, r3]
}
     b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b20:	200000c2 	.word	0x200000c2
     b24:	200000c4 	.word	0x200000c4
     b28:	00000af1 	.word	0x00000af1
     b2c:	2000018c 	.word	0x2000018c

00000b30 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     b30:	b500      	push	{lr}
     b32:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b34:	2309      	movs	r3, #9
     b36:	466a      	mov	r2, sp
     b38:	7013      	strb	r3, [r2, #0]
     b3a:	3301      	adds	r3, #1
     b3c:	7053      	strb	r3, [r2, #1]
     b3e:	3301      	adds	r3, #1
     b40:	7093      	strb	r3, [r2, #2]
     b42:	3301      	adds	r3, #1
     b44:	70d3      	strb	r3, [r2, #3]
     b46:	3301      	adds	r3, #1
     b48:	7113      	strb	r3, [r2, #4]
     b4a:	3301      	adds	r3, #1
     b4c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b4e:	4b03      	ldr	r3, [pc, #12]	; (b5c <_sercom_get_interrupt_vector+0x2c>)
     b50:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b52:	466b      	mov	r3, sp
     b54:	5618      	ldrsb	r0, [r3, r0]
}
     b56:	b003      	add	sp, #12
     b58:	bd00      	pop	{pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	00000ab9 	.word	0x00000ab9

00000b60 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b60:	b510      	push	{r4, lr}
     b62:	4b02      	ldr	r3, [pc, #8]	; (b6c <SERCOM0_Handler+0xc>)
     b64:	681b      	ldr	r3, [r3, #0]
     b66:	2000      	movs	r0, #0
     b68:	4798      	blx	r3
     b6a:	bd10      	pop	{r4, pc}
     b6c:	200000c4 	.word	0x200000c4

00000b70 <SERCOM1_Handler>:
     b70:	b510      	push	{r4, lr}
     b72:	4b02      	ldr	r3, [pc, #8]	; (b7c <SERCOM1_Handler+0xc>)
     b74:	685b      	ldr	r3, [r3, #4]
     b76:	2001      	movs	r0, #1
     b78:	4798      	blx	r3
     b7a:	bd10      	pop	{r4, pc}
     b7c:	200000c4 	.word	0x200000c4

00000b80 <SERCOM2_Handler>:
     b80:	b510      	push	{r4, lr}
     b82:	4b02      	ldr	r3, [pc, #8]	; (b8c <SERCOM2_Handler+0xc>)
     b84:	689b      	ldr	r3, [r3, #8]
     b86:	2002      	movs	r0, #2
     b88:	4798      	blx	r3
     b8a:	bd10      	pop	{r4, pc}
     b8c:	200000c4 	.word	0x200000c4

00000b90 <SERCOM3_Handler>:
     b90:	b510      	push	{r4, lr}
     b92:	4b02      	ldr	r3, [pc, #8]	; (b9c <SERCOM3_Handler+0xc>)
     b94:	68db      	ldr	r3, [r3, #12]
     b96:	2003      	movs	r0, #3
     b98:	4798      	blx	r3
     b9a:	bd10      	pop	{r4, pc}
     b9c:	200000c4 	.word	0x200000c4

00000ba0 <SERCOM4_Handler>:
     ba0:	b510      	push	{r4, lr}
     ba2:	4b02      	ldr	r3, [pc, #8]	; (bac <SERCOM4_Handler+0xc>)
     ba4:	691b      	ldr	r3, [r3, #16]
     ba6:	2004      	movs	r0, #4
     ba8:	4798      	blx	r3
     baa:	bd10      	pop	{r4, pc}
     bac:	200000c4 	.word	0x200000c4

00000bb0 <SERCOM5_Handler>:
     bb0:	b510      	push	{r4, lr}
     bb2:	4b02      	ldr	r3, [pc, #8]	; (bbc <SERCOM5_Handler+0xc>)
     bb4:	695b      	ldr	r3, [r3, #20]
     bb6:	2005      	movs	r0, #5
     bb8:	4798      	blx	r3
     bba:	bd10      	pop	{r4, pc}
     bbc:	200000c4 	.word	0x200000c4

00000bc0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bc2:	46de      	mov	lr, fp
     bc4:	4657      	mov	r7, sl
     bc6:	464e      	mov	r6, r9
     bc8:	4645      	mov	r5, r8
     bca:	b5e0      	push	{r5, r6, r7, lr}
     bcc:	b091      	sub	sp, #68	; 0x44
     bce:	0005      	movs	r5, r0
     bd0:	000c      	movs	r4, r1
     bd2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     bd4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bd6:	0008      	movs	r0, r1
     bd8:	4bba      	ldr	r3, [pc, #744]	; (ec4 <usart_init+0x304>)
     bda:	4798      	blx	r3
     bdc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     bde:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     be0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     be2:	07db      	lsls	r3, r3, #31
     be4:	d506      	bpl.n	bf4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     be6:	b011      	add	sp, #68	; 0x44
     be8:	bc3c      	pop	{r2, r3, r4, r5}
     bea:	4690      	mov	r8, r2
     bec:	4699      	mov	r9, r3
     bee:	46a2      	mov	sl, r4
     bf0:	46ab      	mov	fp, r5
     bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     bf4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     bf6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     bf8:	079b      	lsls	r3, r3, #30
     bfa:	d4f4      	bmi.n	be6 <usart_init+0x26>
     bfc:	49b2      	ldr	r1, [pc, #712]	; (ec8 <usart_init+0x308>)
     bfe:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     c00:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     c02:	2301      	movs	r3, #1
     c04:	40bb      	lsls	r3, r7
     c06:	4303      	orrs	r3, r0
     c08:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     c0a:	a90f      	add	r1, sp, #60	; 0x3c
     c0c:	272d      	movs	r7, #45	; 0x2d
     c0e:	5df3      	ldrb	r3, [r6, r7]
     c10:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c12:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     c14:	b2d3      	uxtb	r3, r2
     c16:	9302      	str	r3, [sp, #8]
     c18:	0018      	movs	r0, r3
     c1a:	4bac      	ldr	r3, [pc, #688]	; (ecc <usart_init+0x30c>)
     c1c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     c1e:	9802      	ldr	r0, [sp, #8]
     c20:	4bab      	ldr	r3, [pc, #684]	; (ed0 <usart_init+0x310>)
     c22:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     c24:	5df0      	ldrb	r0, [r6, r7]
     c26:	2100      	movs	r1, #0
     c28:	4baa      	ldr	r3, [pc, #680]	; (ed4 <usart_init+0x314>)
     c2a:	4798      	blx	r3
	module->character_size = config->character_size;
     c2c:	7af3      	ldrb	r3, [r6, #11]
     c2e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     c30:	2324      	movs	r3, #36	; 0x24
     c32:	5cf3      	ldrb	r3, [r6, r3]
     c34:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     c36:	2325      	movs	r3, #37	; 0x25
     c38:	5cf3      	ldrb	r3, [r6, r3]
     c3a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     c3c:	7ef3      	ldrb	r3, [r6, #27]
     c3e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     c40:	7f33      	ldrb	r3, [r6, #28]
     c42:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     c44:	682b      	ldr	r3, [r5, #0]
     c46:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     c48:	0018      	movs	r0, r3
     c4a:	4b9e      	ldr	r3, [pc, #632]	; (ec4 <usart_init+0x304>)
     c4c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     c4e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     c50:	2200      	movs	r2, #0
     c52:	230e      	movs	r3, #14
     c54:	a906      	add	r1, sp, #24
     c56:	468c      	mov	ip, r1
     c58:	4463      	add	r3, ip
     c5a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     c5c:	8a32      	ldrh	r2, [r6, #16]
     c5e:	9202      	str	r2, [sp, #8]
     c60:	2380      	movs	r3, #128	; 0x80
     c62:	01db      	lsls	r3, r3, #7
     c64:	429a      	cmp	r2, r3
     c66:	d100      	bne.n	c6a <usart_init+0xaa>
     c68:	e09a      	b.n	da0 <usart_init+0x1e0>
     c6a:	d90f      	bls.n	c8c <usart_init+0xcc>
     c6c:	23c0      	movs	r3, #192	; 0xc0
     c6e:	01db      	lsls	r3, r3, #7
     c70:	9a02      	ldr	r2, [sp, #8]
     c72:	429a      	cmp	r2, r3
     c74:	d100      	bne.n	c78 <usart_init+0xb8>
     c76:	e08e      	b.n	d96 <usart_init+0x1d6>
     c78:	2380      	movs	r3, #128	; 0x80
     c7a:	021b      	lsls	r3, r3, #8
     c7c:	429a      	cmp	r2, r3
     c7e:	d000      	beq.n	c82 <usart_init+0xc2>
     c80:	e11b      	b.n	eba <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     c82:	2303      	movs	r3, #3
     c84:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c86:	2300      	movs	r3, #0
     c88:	9307      	str	r3, [sp, #28]
     c8a:	e008      	b.n	c9e <usart_init+0xde>
	switch (config->sample_rate) {
     c8c:	2380      	movs	r3, #128	; 0x80
     c8e:	019b      	lsls	r3, r3, #6
     c90:	429a      	cmp	r2, r3
     c92:	d000      	beq.n	c96 <usart_init+0xd6>
     c94:	e111      	b.n	eba <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c96:	2310      	movs	r3, #16
     c98:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c9a:	3b0f      	subs	r3, #15
     c9c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     c9e:	6833      	ldr	r3, [r6, #0]
     ca0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     ca2:	68f3      	ldr	r3, [r6, #12]
     ca4:	469b      	mov	fp, r3
		config->sample_adjustment |
     ca6:	6973      	ldr	r3, [r6, #20]
     ca8:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     caa:	7e33      	ldrb	r3, [r6, #24]
     cac:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     cae:	2326      	movs	r3, #38	; 0x26
     cb0:	5cf3      	ldrb	r3, [r6, r3]
     cb2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     cb4:	6873      	ldr	r3, [r6, #4]
     cb6:	4699      	mov	r9, r3
	switch (transfer_mode)
     cb8:	2b00      	cmp	r3, #0
     cba:	d100      	bne.n	cbe <usart_init+0xfe>
     cbc:	e09c      	b.n	df8 <usart_init+0x238>
     cbe:	2380      	movs	r3, #128	; 0x80
     cc0:	055b      	lsls	r3, r3, #21
     cc2:	4599      	cmp	r9, r3
     cc4:	d100      	bne.n	cc8 <usart_init+0x108>
     cc6:	e080      	b.n	dca <usart_init+0x20a>
	if(config->encoding_format_enable) {
     cc8:	7e73      	ldrb	r3, [r6, #25]
     cca:	2b00      	cmp	r3, #0
     ccc:	d002      	beq.n	cd4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     cce:	7eb3      	ldrb	r3, [r6, #26]
     cd0:	4642      	mov	r2, r8
     cd2:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     cd4:	230e      	movs	r3, #14
     cd6:	aa06      	add	r2, sp, #24
     cd8:	4694      	mov	ip, r2
     cda:	4463      	add	r3, ip
     cdc:	881b      	ldrh	r3, [r3, #0]
     cde:	4642      	mov	r2, r8
     ce0:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     ce2:	9b05      	ldr	r3, [sp, #20]
     ce4:	465a      	mov	r2, fp
     ce6:	4313      	orrs	r3, r2
     ce8:	9a03      	ldr	r2, [sp, #12]
     cea:	4313      	orrs	r3, r2
     cec:	464a      	mov	r2, r9
     cee:	4313      	orrs	r3, r2
     cf0:	9f02      	ldr	r7, [sp, #8]
     cf2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     cf4:	9b04      	ldr	r3, [sp, #16]
     cf6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     cf8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     cfa:	4653      	mov	r3, sl
     cfc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     cfe:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     d00:	2327      	movs	r3, #39	; 0x27
     d02:	5cf3      	ldrb	r3, [r6, r3]
     d04:	2b00      	cmp	r3, #0
     d06:	d101      	bne.n	d0c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     d08:	3304      	adds	r3, #4
     d0a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     d0c:	7e73      	ldrb	r3, [r6, #25]
     d0e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d10:	7f32      	ldrb	r2, [r6, #28]
     d12:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     d14:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d16:	7f72      	ldrb	r2, [r6, #29]
     d18:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     d1a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     d1c:	2224      	movs	r2, #36	; 0x24
     d1e:	5cb2      	ldrb	r2, [r6, r2]
     d20:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     d22:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     d24:	2225      	movs	r2, #37	; 0x25
     d26:	5cb2      	ldrb	r2, [r6, r2]
     d28:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     d2a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     d2c:	7ab1      	ldrb	r1, [r6, #10]
     d2e:	7af2      	ldrb	r2, [r6, #11]
     d30:	4311      	orrs	r1, r2
     d32:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     d34:	8933      	ldrh	r3, [r6, #8]
     d36:	2bff      	cmp	r3, #255	; 0xff
     d38:	d100      	bne.n	d3c <usart_init+0x17c>
     d3a:	e081      	b.n	e40 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     d3c:	2280      	movs	r2, #128	; 0x80
     d3e:	0452      	lsls	r2, r2, #17
     d40:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     d42:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     d44:	232c      	movs	r3, #44	; 0x2c
     d46:	5cf3      	ldrb	r3, [r6, r3]
     d48:	2b00      	cmp	r3, #0
     d4a:	d103      	bne.n	d54 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     d4c:	4b62      	ldr	r3, [pc, #392]	; (ed8 <usart_init+0x318>)
     d4e:	789b      	ldrb	r3, [r3, #2]
     d50:	079b      	lsls	r3, r3, #30
     d52:	d501      	bpl.n	d58 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     d54:	2380      	movs	r3, #128	; 0x80
     d56:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     d58:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     d5a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     d5c:	2b00      	cmp	r3, #0
     d5e:	d1fc      	bne.n	d5a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     d60:	4643      	mov	r3, r8
     d62:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     d64:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     d66:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     d68:	2b00      	cmp	r3, #0
     d6a:	d1fc      	bne.n	d66 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     d6c:	4643      	mov	r3, r8
     d6e:	601f      	str	r7, [r3, #0]
     d70:	ab0e      	add	r3, sp, #56	; 0x38
     d72:	2280      	movs	r2, #128	; 0x80
     d74:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d76:	2200      	movs	r2, #0
     d78:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     d7a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     d7c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     d7e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     d80:	930a      	str	r3, [sp, #40]	; 0x28
     d82:	6b73      	ldr	r3, [r6, #52]	; 0x34
     d84:	930b      	str	r3, [sp, #44]	; 0x2c
     d86:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     d88:	930c      	str	r3, [sp, #48]	; 0x30
     d8a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     d8c:	9302      	str	r3, [sp, #8]
     d8e:	930d      	str	r3, [sp, #52]	; 0x34
     d90:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d92:	ae0a      	add	r6, sp, #40	; 0x28
     d94:	e063      	b.n	e5e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d96:	2308      	movs	r3, #8
     d98:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     d9a:	3b07      	subs	r3, #7
     d9c:	9307      	str	r3, [sp, #28]
     d9e:	e77e      	b.n	c9e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     da0:	6833      	ldr	r3, [r6, #0]
     da2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     da4:	68f3      	ldr	r3, [r6, #12]
     da6:	469b      	mov	fp, r3
		config->sample_adjustment |
     da8:	6973      	ldr	r3, [r6, #20]
     daa:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     dac:	7e33      	ldrb	r3, [r6, #24]
     dae:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     db0:	2326      	movs	r3, #38	; 0x26
     db2:	5cf3      	ldrb	r3, [r6, r3]
     db4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     db6:	6873      	ldr	r3, [r6, #4]
     db8:	4699      	mov	r9, r3
	switch (transfer_mode)
     dba:	2b00      	cmp	r3, #0
     dbc:	d018      	beq.n	df0 <usart_init+0x230>
     dbe:	2380      	movs	r3, #128	; 0x80
     dc0:	055b      	lsls	r3, r3, #21
     dc2:	4599      	cmp	r9, r3
     dc4:	d001      	beq.n	dca <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     dc6:	2000      	movs	r0, #0
     dc8:	e025      	b.n	e16 <usart_init+0x256>
			if (!config->use_external_clock) {
     dca:	2327      	movs	r3, #39	; 0x27
     dcc:	5cf3      	ldrb	r3, [r6, r3]
     dce:	2b00      	cmp	r3, #0
     dd0:	d000      	beq.n	dd4 <usart_init+0x214>
     dd2:	e779      	b.n	cc8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     dd4:	6a33      	ldr	r3, [r6, #32]
     dd6:	001f      	movs	r7, r3
     dd8:	b2c0      	uxtb	r0, r0
     dda:	4b40      	ldr	r3, [pc, #256]	; (edc <usart_init+0x31c>)
     ddc:	4798      	blx	r3
     dde:	0001      	movs	r1, r0
     de0:	220e      	movs	r2, #14
     de2:	ab06      	add	r3, sp, #24
     de4:	469c      	mov	ip, r3
     de6:	4462      	add	r2, ip
     de8:	0038      	movs	r0, r7
     dea:	4b3d      	ldr	r3, [pc, #244]	; (ee0 <usart_init+0x320>)
     dec:	4798      	blx	r3
     dee:	e012      	b.n	e16 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     df0:	2308      	movs	r3, #8
     df2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     df4:	2300      	movs	r3, #0
     df6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     df8:	2327      	movs	r3, #39	; 0x27
     dfa:	5cf3      	ldrb	r3, [r6, r3]
     dfc:	2b00      	cmp	r3, #0
     dfe:	d00e      	beq.n	e1e <usart_init+0x25e>
				status_code =
     e00:	9b06      	ldr	r3, [sp, #24]
     e02:	9300      	str	r3, [sp, #0]
     e04:	9b07      	ldr	r3, [sp, #28]
     e06:	220e      	movs	r2, #14
     e08:	a906      	add	r1, sp, #24
     e0a:	468c      	mov	ip, r1
     e0c:	4462      	add	r2, ip
     e0e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     e10:	6a30      	ldr	r0, [r6, #32]
     e12:	4f34      	ldr	r7, [pc, #208]	; (ee4 <usart_init+0x324>)
     e14:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     e16:	2800      	cmp	r0, #0
     e18:	d000      	beq.n	e1c <usart_init+0x25c>
     e1a:	e6e4      	b.n	be6 <usart_init+0x26>
     e1c:	e754      	b.n	cc8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     e1e:	6a33      	ldr	r3, [r6, #32]
     e20:	001f      	movs	r7, r3
     e22:	b2c0      	uxtb	r0, r0
     e24:	4b2d      	ldr	r3, [pc, #180]	; (edc <usart_init+0x31c>)
     e26:	4798      	blx	r3
     e28:	0001      	movs	r1, r0
				status_code =
     e2a:	9b06      	ldr	r3, [sp, #24]
     e2c:	9300      	str	r3, [sp, #0]
     e2e:	9b07      	ldr	r3, [sp, #28]
     e30:	220e      	movs	r2, #14
     e32:	a806      	add	r0, sp, #24
     e34:	4684      	mov	ip, r0
     e36:	4462      	add	r2, ip
     e38:	0038      	movs	r0, r7
     e3a:	4f2a      	ldr	r7, [pc, #168]	; (ee4 <usart_init+0x324>)
     e3c:	47b8      	blx	r7
     e3e:	e7ea      	b.n	e16 <usart_init+0x256>
		if(config->lin_slave_enable) {
     e40:	7ef3      	ldrb	r3, [r6, #27]
     e42:	2b00      	cmp	r3, #0
     e44:	d100      	bne.n	e48 <usart_init+0x288>
     e46:	e77d      	b.n	d44 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     e48:	2380      	movs	r3, #128	; 0x80
     e4a:	04db      	lsls	r3, r3, #19
     e4c:	431f      	orrs	r7, r3
     e4e:	e779      	b.n	d44 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     e50:	0020      	movs	r0, r4
     e52:	4b25      	ldr	r3, [pc, #148]	; (ee8 <usart_init+0x328>)
     e54:	4798      	blx	r3
     e56:	e007      	b.n	e68 <usart_init+0x2a8>
     e58:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     e5a:	2f04      	cmp	r7, #4
     e5c:	d00d      	beq.n	e7a <usart_init+0x2ba>
     e5e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     e60:	00bb      	lsls	r3, r7, #2
     e62:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     e64:	2800      	cmp	r0, #0
     e66:	d0f3      	beq.n	e50 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     e68:	1c43      	adds	r3, r0, #1
     e6a:	d0f5      	beq.n	e58 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     e6c:	a90e      	add	r1, sp, #56	; 0x38
     e6e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     e70:	0c00      	lsrs	r0, r0, #16
     e72:	b2c0      	uxtb	r0, r0
     e74:	4b1d      	ldr	r3, [pc, #116]	; (eec <usart_init+0x32c>)
     e76:	4798      	blx	r3
     e78:	e7ee      	b.n	e58 <usart_init+0x298>
		module->callback[i]            = NULL;
     e7a:	2300      	movs	r3, #0
     e7c:	60eb      	str	r3, [r5, #12]
     e7e:	612b      	str	r3, [r5, #16]
     e80:	616b      	str	r3, [r5, #20]
     e82:	61ab      	str	r3, [r5, #24]
     e84:	61eb      	str	r3, [r5, #28]
     e86:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     e88:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     e8a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     e8c:	2200      	movs	r2, #0
     e8e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     e90:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     e92:	3330      	adds	r3, #48	; 0x30
     e94:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     e96:	3301      	adds	r3, #1
     e98:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     e9a:	3301      	adds	r3, #1
     e9c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     e9e:	3301      	adds	r3, #1
     ea0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     ea2:	6828      	ldr	r0, [r5, #0]
     ea4:	4b07      	ldr	r3, [pc, #28]	; (ec4 <usart_init+0x304>)
     ea6:	4798      	blx	r3
     ea8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     eaa:	4911      	ldr	r1, [pc, #68]	; (ef0 <usart_init+0x330>)
     eac:	4b11      	ldr	r3, [pc, #68]	; (ef4 <usart_init+0x334>)
     eae:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     eb0:	00a4      	lsls	r4, r4, #2
     eb2:	4b11      	ldr	r3, [pc, #68]	; (ef8 <usart_init+0x338>)
     eb4:	50e5      	str	r5, [r4, r3]
	return status_code;
     eb6:	2000      	movs	r0, #0
     eb8:	e695      	b.n	be6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     eba:	2310      	movs	r3, #16
     ebc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     ebe:	2300      	movs	r3, #0
     ec0:	9307      	str	r3, [sp, #28]
     ec2:	e6ec      	b.n	c9e <usart_init+0xde>
     ec4:	00000ab9 	.word	0x00000ab9
     ec8:	40000400 	.word	0x40000400
     ecc:	00001765 	.word	0x00001765
     ed0:	000016d9 	.word	0x000016d9
     ed4:	000008f5 	.word	0x000008f5
     ed8:	41002000 	.word	0x41002000
     edc:	00001781 	.word	0x00001781
     ee0:	00000837 	.word	0x00000837
     ee4:	00000861 	.word	0x00000861
     ee8:	00000941 	.word	0x00000941
     eec:	0000185d 	.word	0x0000185d
     ef0:	00000f8d 	.word	0x00000f8d
     ef4:	00000af5 	.word	0x00000af5
     ef8:	2000018c 	.word	0x2000018c

00000efc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     efc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     efe:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     f00:	2a00      	cmp	r2, #0
     f02:	d101      	bne.n	f08 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     f04:	0018      	movs	r0, r3
     f06:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     f08:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     f0a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     f0c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     f0e:	2a00      	cmp	r2, #0
     f10:	d1f8      	bne.n	f04 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     f12:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     f14:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     f16:	2102      	movs	r1, #2
     f18:	7e13      	ldrb	r3, [r2, #24]
     f1a:	420b      	tst	r3, r1
     f1c:	d0fc      	beq.n	f18 <usart_write_wait+0x1c>
	return STATUS_OK;
     f1e:	2300      	movs	r3, #0
     f20:	e7f0      	b.n	f04 <usart_write_wait+0x8>

00000f22 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     f22:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     f24:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     f26:	2a00      	cmp	r2, #0
     f28:	d101      	bne.n	f2e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     f2a:	0018      	movs	r0, r3
     f2c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     f2e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     f30:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     f32:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     f34:	2a00      	cmp	r2, #0
     f36:	d1f8      	bne.n	f2a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     f38:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     f3a:	7e10      	ldrb	r0, [r2, #24]
     f3c:	0740      	lsls	r0, r0, #29
     f3e:	d5f4      	bpl.n	f2a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f40:	8b53      	ldrh	r3, [r2, #26]
     f42:	b2db      	uxtb	r3, r3
	if (error_code) {
     f44:	0698      	lsls	r0, r3, #26
     f46:	d01d      	beq.n	f84 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     f48:	0798      	lsls	r0, r3, #30
     f4a:	d503      	bpl.n	f54 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     f4c:	2302      	movs	r3, #2
     f4e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     f50:	3318      	adds	r3, #24
     f52:	e7ea      	b.n	f2a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     f54:	0758      	lsls	r0, r3, #29
     f56:	d503      	bpl.n	f60 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     f58:	2304      	movs	r3, #4
     f5a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     f5c:	331a      	adds	r3, #26
     f5e:	e7e4      	b.n	f2a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f60:	07d8      	lsls	r0, r3, #31
     f62:	d503      	bpl.n	f6c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     f64:	2301      	movs	r3, #1
     f66:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     f68:	3312      	adds	r3, #18
     f6a:	e7de      	b.n	f2a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     f6c:	06d8      	lsls	r0, r3, #27
     f6e:	d503      	bpl.n	f78 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     f70:	2310      	movs	r3, #16
     f72:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     f74:	3332      	adds	r3, #50	; 0x32
     f76:	e7d8      	b.n	f2a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     f78:	069b      	lsls	r3, r3, #26
     f7a:	d503      	bpl.n	f84 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     f7c:	2320      	movs	r3, #32
     f7e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     f80:	3321      	adds	r3, #33	; 0x21
     f82:	e7d2      	b.n	f2a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     f84:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     f86:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     f88:	2300      	movs	r3, #0
     f8a:	e7ce      	b.n	f2a <usart_read_wait+0x8>

00000f8c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     f8e:	0080      	lsls	r0, r0, #2
     f90:	4b62      	ldr	r3, [pc, #392]	; (111c <_usart_interrupt_handler+0x190>)
     f92:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     f94:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     f96:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     f98:	2b00      	cmp	r3, #0
     f9a:	d1fc      	bne.n	f96 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     f9c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     f9e:	7da6      	ldrb	r6, [r4, #22]
     fa0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     fa2:	2330      	movs	r3, #48	; 0x30
     fa4:	5ceb      	ldrb	r3, [r5, r3]
     fa6:	2231      	movs	r2, #49	; 0x31
     fa8:	5caf      	ldrb	r7, [r5, r2]
     faa:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     fac:	07f3      	lsls	r3, r6, #31
     fae:	d522      	bpl.n	ff6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     fb0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     fb2:	b29b      	uxth	r3, r3
     fb4:	2b00      	cmp	r3, #0
     fb6:	d01c      	beq.n	ff2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     fb8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     fba:	7813      	ldrb	r3, [r2, #0]
     fbc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     fbe:	1c51      	adds	r1, r2, #1
     fc0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     fc2:	7969      	ldrb	r1, [r5, #5]
     fc4:	2901      	cmp	r1, #1
     fc6:	d00e      	beq.n	fe6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     fc8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     fca:	05db      	lsls	r3, r3, #23
     fcc:	0ddb      	lsrs	r3, r3, #23
     fce:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     fd0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     fd2:	3b01      	subs	r3, #1
     fd4:	b29b      	uxth	r3, r3
     fd6:	85eb      	strh	r3, [r5, #46]	; 0x2e
     fd8:	2b00      	cmp	r3, #0
     fda:	d10c      	bne.n	ff6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     fdc:	3301      	adds	r3, #1
     fde:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     fe0:	3301      	adds	r3, #1
     fe2:	75a3      	strb	r3, [r4, #22]
     fe4:	e007      	b.n	ff6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     fe6:	7851      	ldrb	r1, [r2, #1]
     fe8:	0209      	lsls	r1, r1, #8
     fea:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     fec:	3202      	adds	r2, #2
     fee:	62aa      	str	r2, [r5, #40]	; 0x28
     ff0:	e7eb      	b.n	fca <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ff2:	2301      	movs	r3, #1
     ff4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     ff6:	07b3      	lsls	r3, r6, #30
     ff8:	d506      	bpl.n	1008 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     ffa:	2302      	movs	r3, #2
     ffc:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     ffe:	2200      	movs	r2, #0
    1000:	3331      	adds	r3, #49	; 0x31
    1002:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1004:	07fb      	lsls	r3, r7, #31
    1006:	d41a      	bmi.n	103e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1008:	0773      	lsls	r3, r6, #29
    100a:	d565      	bpl.n	10d8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    100c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    100e:	b29b      	uxth	r3, r3
    1010:	2b00      	cmp	r3, #0
    1012:	d05f      	beq.n	10d4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1014:	8b63      	ldrh	r3, [r4, #26]
    1016:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1018:	071a      	lsls	r2, r3, #28
    101a:	d414      	bmi.n	1046 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    101c:	223f      	movs	r2, #63	; 0x3f
    101e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1020:	2b00      	cmp	r3, #0
    1022:	d034      	beq.n	108e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1024:	079a      	lsls	r2, r3, #30
    1026:	d511      	bpl.n	104c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1028:	221a      	movs	r2, #26
    102a:	2332      	movs	r3, #50	; 0x32
    102c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    102e:	3b30      	subs	r3, #48	; 0x30
    1030:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1032:	077b      	lsls	r3, r7, #29
    1034:	d550      	bpl.n	10d8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1036:	0028      	movs	r0, r5
    1038:	696b      	ldr	r3, [r5, #20]
    103a:	4798      	blx	r3
    103c:	e04c      	b.n	10d8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    103e:	0028      	movs	r0, r5
    1040:	68eb      	ldr	r3, [r5, #12]
    1042:	4798      	blx	r3
    1044:	e7e0      	b.n	1008 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1046:	2237      	movs	r2, #55	; 0x37
    1048:	4013      	ands	r3, r2
    104a:	e7e9      	b.n	1020 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    104c:	075a      	lsls	r2, r3, #29
    104e:	d505      	bpl.n	105c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1050:	221e      	movs	r2, #30
    1052:	2332      	movs	r3, #50	; 0x32
    1054:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1056:	3b2e      	subs	r3, #46	; 0x2e
    1058:	8363      	strh	r3, [r4, #26]
    105a:	e7ea      	b.n	1032 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    105c:	07da      	lsls	r2, r3, #31
    105e:	d505      	bpl.n	106c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1060:	2213      	movs	r2, #19
    1062:	2332      	movs	r3, #50	; 0x32
    1064:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1066:	3b31      	subs	r3, #49	; 0x31
    1068:	8363      	strh	r3, [r4, #26]
    106a:	e7e2      	b.n	1032 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    106c:	06da      	lsls	r2, r3, #27
    106e:	d505      	bpl.n	107c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1070:	2242      	movs	r2, #66	; 0x42
    1072:	2332      	movs	r3, #50	; 0x32
    1074:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1076:	3b22      	subs	r3, #34	; 0x22
    1078:	8363      	strh	r3, [r4, #26]
    107a:	e7da      	b.n	1032 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    107c:	2220      	movs	r2, #32
    107e:	421a      	tst	r2, r3
    1080:	d0d7      	beq.n	1032 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1082:	3221      	adds	r2, #33	; 0x21
    1084:	2332      	movs	r3, #50	; 0x32
    1086:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1088:	3b12      	subs	r3, #18
    108a:	8363      	strh	r3, [r4, #26]
    108c:	e7d1      	b.n	1032 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    108e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1090:	05db      	lsls	r3, r3, #23
    1092:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1094:	b2da      	uxtb	r2, r3
    1096:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1098:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    109a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    109c:	1c51      	adds	r1, r2, #1
    109e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    10a0:	7969      	ldrb	r1, [r5, #5]
    10a2:	2901      	cmp	r1, #1
    10a4:	d010      	beq.n	10c8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    10a6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    10a8:	3b01      	subs	r3, #1
    10aa:	b29b      	uxth	r3, r3
    10ac:	85ab      	strh	r3, [r5, #44]	; 0x2c
    10ae:	2b00      	cmp	r3, #0
    10b0:	d112      	bne.n	10d8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    10b2:	3304      	adds	r3, #4
    10b4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    10b6:	2200      	movs	r2, #0
    10b8:	332e      	adds	r3, #46	; 0x2e
    10ba:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    10bc:	07bb      	lsls	r3, r7, #30
    10be:	d50b      	bpl.n	10d8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    10c0:	0028      	movs	r0, r5
    10c2:	692b      	ldr	r3, [r5, #16]
    10c4:	4798      	blx	r3
    10c6:	e007      	b.n	10d8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    10c8:	0a1b      	lsrs	r3, r3, #8
    10ca:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    10cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    10ce:	3301      	adds	r3, #1
    10d0:	626b      	str	r3, [r5, #36]	; 0x24
    10d2:	e7e8      	b.n	10a6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    10d4:	2304      	movs	r3, #4
    10d6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    10d8:	06f3      	lsls	r3, r6, #27
    10da:	d504      	bpl.n	10e6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    10dc:	2310      	movs	r3, #16
    10de:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    10e0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    10e2:	06fb      	lsls	r3, r7, #27
    10e4:	d40e      	bmi.n	1104 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    10e6:	06b3      	lsls	r3, r6, #26
    10e8:	d504      	bpl.n	10f4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    10ea:	2320      	movs	r3, #32
    10ec:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    10ee:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    10f0:	073b      	lsls	r3, r7, #28
    10f2:	d40b      	bmi.n	110c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    10f4:	0733      	lsls	r3, r6, #28
    10f6:	d504      	bpl.n	1102 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    10f8:	2308      	movs	r3, #8
    10fa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    10fc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    10fe:	06bb      	lsls	r3, r7, #26
    1100:	d408      	bmi.n	1114 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1104:	0028      	movs	r0, r5
    1106:	69eb      	ldr	r3, [r5, #28]
    1108:	4798      	blx	r3
    110a:	e7ec      	b.n	10e6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    110c:	0028      	movs	r0, r5
    110e:	69ab      	ldr	r3, [r5, #24]
    1110:	4798      	blx	r3
    1112:	e7ef      	b.n	10f4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1114:	6a2b      	ldr	r3, [r5, #32]
    1116:	0028      	movs	r0, r5
    1118:	4798      	blx	r3
}
    111a:	e7f2      	b.n	1102 <_usart_interrupt_handler+0x176>
    111c:	2000018c 	.word	0x2000018c

00001120 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1120:	b510      	push	{r4, lr}
	switch (clock_source) {
    1122:	2808      	cmp	r0, #8
    1124:	d803      	bhi.n	112e <system_clock_source_get_hz+0xe>
    1126:	0080      	lsls	r0, r0, #2
    1128:	4b1c      	ldr	r3, [pc, #112]	; (119c <system_clock_source_get_hz+0x7c>)
    112a:	581b      	ldr	r3, [r3, r0]
    112c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    112e:	2000      	movs	r0, #0
    1130:	e032      	b.n	1198 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1132:	4b1b      	ldr	r3, [pc, #108]	; (11a0 <system_clock_source_get_hz+0x80>)
    1134:	6918      	ldr	r0, [r3, #16]
    1136:	e02f      	b.n	1198 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1138:	4b1a      	ldr	r3, [pc, #104]	; (11a4 <system_clock_source_get_hz+0x84>)
    113a:	6a1b      	ldr	r3, [r3, #32]
    113c:	059b      	lsls	r3, r3, #22
    113e:	0f9b      	lsrs	r3, r3, #30
    1140:	4819      	ldr	r0, [pc, #100]	; (11a8 <system_clock_source_get_hz+0x88>)
    1142:	40d8      	lsrs	r0, r3
    1144:	e028      	b.n	1198 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1146:	4b16      	ldr	r3, [pc, #88]	; (11a0 <system_clock_source_get_hz+0x80>)
    1148:	6958      	ldr	r0, [r3, #20]
    114a:	e025      	b.n	1198 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    114c:	4b14      	ldr	r3, [pc, #80]	; (11a0 <system_clock_source_get_hz+0x80>)
    114e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1150:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1152:	079b      	lsls	r3, r3, #30
    1154:	d520      	bpl.n	1198 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1156:	4913      	ldr	r1, [pc, #76]	; (11a4 <system_clock_source_get_hz+0x84>)
    1158:	2210      	movs	r2, #16
    115a:	68cb      	ldr	r3, [r1, #12]
    115c:	421a      	tst	r2, r3
    115e:	d0fc      	beq.n	115a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1160:	4b0f      	ldr	r3, [pc, #60]	; (11a0 <system_clock_source_get_hz+0x80>)
    1162:	681a      	ldr	r2, [r3, #0]
    1164:	2324      	movs	r3, #36	; 0x24
    1166:	4013      	ands	r3, r2
    1168:	2b04      	cmp	r3, #4
    116a:	d001      	beq.n	1170 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    116c:	480f      	ldr	r0, [pc, #60]	; (11ac <system_clock_source_get_hz+0x8c>)
    116e:	e013      	b.n	1198 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1170:	2000      	movs	r0, #0
    1172:	4b0f      	ldr	r3, [pc, #60]	; (11b0 <system_clock_source_get_hz+0x90>)
    1174:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1176:	4b0a      	ldr	r3, [pc, #40]	; (11a0 <system_clock_source_get_hz+0x80>)
    1178:	689b      	ldr	r3, [r3, #8]
    117a:	041b      	lsls	r3, r3, #16
    117c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    117e:	4358      	muls	r0, r3
    1180:	e00a      	b.n	1198 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1182:	2350      	movs	r3, #80	; 0x50
    1184:	4a07      	ldr	r2, [pc, #28]	; (11a4 <system_clock_source_get_hz+0x84>)
    1186:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1188:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    118a:	075b      	lsls	r3, r3, #29
    118c:	d504      	bpl.n	1198 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    118e:	4b04      	ldr	r3, [pc, #16]	; (11a0 <system_clock_source_get_hz+0x80>)
    1190:	68d8      	ldr	r0, [r3, #12]
    1192:	e001      	b.n	1198 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1194:	2080      	movs	r0, #128	; 0x80
    1196:	0200      	lsls	r0, r0, #8
	}
}
    1198:	bd10      	pop	{r4, pc}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	000050bc 	.word	0x000050bc
    11a0:	200000dc 	.word	0x200000dc
    11a4:	40000800 	.word	0x40000800
    11a8:	007a1200 	.word	0x007a1200
    11ac:	02dc6c00 	.word	0x02dc6c00
    11b0:	00001781 	.word	0x00001781

000011b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    11b4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    11b6:	490c      	ldr	r1, [pc, #48]	; (11e8 <system_clock_source_osc8m_set_config+0x34>)
    11b8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    11ba:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    11bc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    11be:	7840      	ldrb	r0, [r0, #1]
    11c0:	2201      	movs	r2, #1
    11c2:	4010      	ands	r0, r2
    11c4:	0180      	lsls	r0, r0, #6
    11c6:	2640      	movs	r6, #64	; 0x40
    11c8:	43b3      	bics	r3, r6
    11ca:	4303      	orrs	r3, r0
    11cc:	402a      	ands	r2, r5
    11ce:	01d2      	lsls	r2, r2, #7
    11d0:	2080      	movs	r0, #128	; 0x80
    11d2:	4383      	bics	r3, r0
    11d4:	4313      	orrs	r3, r2
    11d6:	2203      	movs	r2, #3
    11d8:	4022      	ands	r2, r4
    11da:	0212      	lsls	r2, r2, #8
    11dc:	4803      	ldr	r0, [pc, #12]	; (11ec <system_clock_source_osc8m_set_config+0x38>)
    11de:	4003      	ands	r3, r0
    11e0:	4313      	orrs	r3, r2
    11e2:	620b      	str	r3, [r1, #32]
}
    11e4:	bd70      	pop	{r4, r5, r6, pc}
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	40000800 	.word	0x40000800
    11ec:	fffffcff 	.word	0xfffffcff

000011f0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    11f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11f2:	46de      	mov	lr, fp
    11f4:	4657      	mov	r7, sl
    11f6:	464e      	mov	r6, r9
    11f8:	4645      	mov	r5, r8
    11fa:	b5e0      	push	{r5, r6, r7, lr}
    11fc:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    11fe:	4b26      	ldr	r3, [pc, #152]	; (1298 <system_clock_source_xosc32k_set_config+0xa8>)
    1200:	469b      	mov	fp, r3
    1202:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1204:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1206:	7800      	ldrb	r0, [r0, #0]
    1208:	4242      	negs	r2, r0
    120a:	4142      	adcs	r2, r0
    120c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    120e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1210:	78ca      	ldrb	r2, [r1, #3]
    1212:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1214:	790a      	ldrb	r2, [r1, #4]
    1216:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1218:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    121a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    121c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    121e:	688a      	ldr	r2, [r1, #8]
    1220:	491e      	ldr	r1, [pc, #120]	; (129c <system_clock_source_xosc32k_set_config+0xac>)
    1222:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1224:	2101      	movs	r1, #1
    1226:	464a      	mov	r2, r9
    1228:	0092      	lsls	r2, r2, #2
    122a:	4691      	mov	r9, r2
    122c:	2204      	movs	r2, #4
    122e:	4393      	bics	r3, r2
    1230:	464a      	mov	r2, r9
    1232:	4313      	orrs	r3, r2
    1234:	4642      	mov	r2, r8
    1236:	400a      	ands	r2, r1
    1238:	00d2      	lsls	r2, r2, #3
    123a:	4690      	mov	r8, r2
    123c:	2208      	movs	r2, #8
    123e:	4393      	bics	r3, r2
    1240:	4642      	mov	r2, r8
    1242:	4313      	orrs	r3, r2
    1244:	4662      	mov	r2, ip
    1246:	400a      	ands	r2, r1
    1248:	0112      	lsls	r2, r2, #4
    124a:	4694      	mov	ip, r2
    124c:	2210      	movs	r2, #16
    124e:	4393      	bics	r3, r2
    1250:	4662      	mov	r2, ip
    1252:	4313      	orrs	r3, r2
    1254:	4008      	ands	r0, r1
    1256:	0140      	lsls	r0, r0, #5
    1258:	2220      	movs	r2, #32
    125a:	4393      	bics	r3, r2
    125c:	4303      	orrs	r3, r0
    125e:	400f      	ands	r7, r1
    1260:	01bf      	lsls	r7, r7, #6
    1262:	2040      	movs	r0, #64	; 0x40
    1264:	4383      	bics	r3, r0
    1266:	433b      	orrs	r3, r7
    1268:	400e      	ands	r6, r1
    126a:	01f6      	lsls	r6, r6, #7
    126c:	3040      	adds	r0, #64	; 0x40
    126e:	4383      	bics	r3, r0
    1270:	4333      	orrs	r3, r6
    1272:	3879      	subs	r0, #121	; 0x79
    1274:	4005      	ands	r5, r0
    1276:	022d      	lsls	r5, r5, #8
    1278:	4809      	ldr	r0, [pc, #36]	; (12a0 <system_clock_source_xosc32k_set_config+0xb0>)
    127a:	4003      	ands	r3, r0
    127c:	432b      	orrs	r3, r5
    127e:	4021      	ands	r1, r4
    1280:	0309      	lsls	r1, r1, #12
    1282:	4808      	ldr	r0, [pc, #32]	; (12a4 <system_clock_source_xosc32k_set_config+0xb4>)
    1284:	4003      	ands	r3, r0
    1286:	430b      	orrs	r3, r1
    1288:	465a      	mov	r2, fp
    128a:	8293      	strh	r3, [r2, #20]
}
    128c:	bc3c      	pop	{r2, r3, r4, r5}
    128e:	4690      	mov	r8, r2
    1290:	4699      	mov	r9, r3
    1292:	46a2      	mov	sl, r4
    1294:	46ab      	mov	fp, r5
    1296:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1298:	40000800 	.word	0x40000800
    129c:	200000dc 	.word	0x200000dc
    12a0:	fffff8ff 	.word	0xfffff8ff
    12a4:	ffffefff 	.word	0xffffefff

000012a8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    12a8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12aa:	7a03      	ldrb	r3, [r0, #8]
    12ac:	069b      	lsls	r3, r3, #26
    12ae:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    12b0:	8942      	ldrh	r2, [r0, #10]
    12b2:	0592      	lsls	r2, r2, #22
    12b4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    12b6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    12b8:	4918      	ldr	r1, [pc, #96]	; (131c <system_clock_source_dfll_set_config+0x74>)
    12ba:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    12bc:	7983      	ldrb	r3, [r0, #6]
    12be:	79c2      	ldrb	r2, [r0, #7]
    12c0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    12c2:	8842      	ldrh	r2, [r0, #2]
    12c4:	8884      	ldrh	r4, [r0, #4]
    12c6:	4322      	orrs	r2, r4
    12c8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    12ca:	7842      	ldrb	r2, [r0, #1]
    12cc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    12ce:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    12d0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    12d2:	7803      	ldrb	r3, [r0, #0]
    12d4:	2b04      	cmp	r3, #4
    12d6:	d011      	beq.n	12fc <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    12d8:	2b20      	cmp	r3, #32
    12da:	d10e      	bne.n	12fa <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12dc:	7b03      	ldrb	r3, [r0, #12]
    12de:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    12e0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    12e2:	4313      	orrs	r3, r2
    12e4:	89c2      	ldrh	r2, [r0, #14]
    12e6:	0412      	lsls	r2, r2, #16
    12e8:	490d      	ldr	r1, [pc, #52]	; (1320 <system_clock_source_dfll_set_config+0x78>)
    12ea:	400a      	ands	r2, r1
    12ec:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    12ee:	4a0b      	ldr	r2, [pc, #44]	; (131c <system_clock_source_dfll_set_config+0x74>)
    12f0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    12f2:	6811      	ldr	r1, [r2, #0]
    12f4:	4b0b      	ldr	r3, [pc, #44]	; (1324 <system_clock_source_dfll_set_config+0x7c>)
    12f6:	430b      	orrs	r3, r1
    12f8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    12fa:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    12fc:	7b03      	ldrb	r3, [r0, #12]
    12fe:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1300:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1302:	4313      	orrs	r3, r2
    1304:	89c2      	ldrh	r2, [r0, #14]
    1306:	0412      	lsls	r2, r2, #16
    1308:	4905      	ldr	r1, [pc, #20]	; (1320 <system_clock_source_dfll_set_config+0x78>)
    130a:	400a      	ands	r2, r1
    130c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    130e:	4a03      	ldr	r2, [pc, #12]	; (131c <system_clock_source_dfll_set_config+0x74>)
    1310:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1312:	6813      	ldr	r3, [r2, #0]
    1314:	2104      	movs	r1, #4
    1316:	430b      	orrs	r3, r1
    1318:	6013      	str	r3, [r2, #0]
    131a:	e7ee      	b.n	12fa <system_clock_source_dfll_set_config+0x52>
    131c:	200000dc 	.word	0x200000dc
    1320:	03ff0000 	.word	0x03ff0000
    1324:	00000424 	.word	0x00000424

00001328 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1328:	2808      	cmp	r0, #8
    132a:	d803      	bhi.n	1334 <system_clock_source_enable+0xc>
    132c:	0080      	lsls	r0, r0, #2
    132e:	4b25      	ldr	r3, [pc, #148]	; (13c4 <system_clock_source_enable+0x9c>)
    1330:	581b      	ldr	r3, [r3, r0]
    1332:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1334:	2017      	movs	r0, #23
    1336:	e044      	b.n	13c2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1338:	4a23      	ldr	r2, [pc, #140]	; (13c8 <system_clock_source_enable+0xa0>)
    133a:	6a13      	ldr	r3, [r2, #32]
    133c:	2102      	movs	r1, #2
    133e:	430b      	orrs	r3, r1
    1340:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1342:	2000      	movs	r0, #0
    1344:	e03d      	b.n	13c2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1346:	4a20      	ldr	r2, [pc, #128]	; (13c8 <system_clock_source_enable+0xa0>)
    1348:	6993      	ldr	r3, [r2, #24]
    134a:	2102      	movs	r1, #2
    134c:	430b      	orrs	r3, r1
    134e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1350:	2000      	movs	r0, #0
		break;
    1352:	e036      	b.n	13c2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1354:	4a1c      	ldr	r2, [pc, #112]	; (13c8 <system_clock_source_enable+0xa0>)
    1356:	8a13      	ldrh	r3, [r2, #16]
    1358:	2102      	movs	r1, #2
    135a:	430b      	orrs	r3, r1
    135c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    135e:	2000      	movs	r0, #0
		break;
    1360:	e02f      	b.n	13c2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1362:	4a19      	ldr	r2, [pc, #100]	; (13c8 <system_clock_source_enable+0xa0>)
    1364:	8a93      	ldrh	r3, [r2, #20]
    1366:	2102      	movs	r1, #2
    1368:	430b      	orrs	r3, r1
    136a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    136c:	2000      	movs	r0, #0
		break;
    136e:	e028      	b.n	13c2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1370:	4916      	ldr	r1, [pc, #88]	; (13cc <system_clock_source_enable+0xa4>)
    1372:	680b      	ldr	r3, [r1, #0]
    1374:	2202      	movs	r2, #2
    1376:	4313      	orrs	r3, r2
    1378:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    137a:	4b13      	ldr	r3, [pc, #76]	; (13c8 <system_clock_source_enable+0xa0>)
    137c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    137e:	0019      	movs	r1, r3
    1380:	320e      	adds	r2, #14
    1382:	68cb      	ldr	r3, [r1, #12]
    1384:	421a      	tst	r2, r3
    1386:	d0fc      	beq.n	1382 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1388:	4a10      	ldr	r2, [pc, #64]	; (13cc <system_clock_source_enable+0xa4>)
    138a:	6891      	ldr	r1, [r2, #8]
    138c:	4b0e      	ldr	r3, [pc, #56]	; (13c8 <system_clock_source_enable+0xa0>)
    138e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1390:	6852      	ldr	r2, [r2, #4]
    1392:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1394:	2200      	movs	r2, #0
    1396:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1398:	0019      	movs	r1, r3
    139a:	3210      	adds	r2, #16
    139c:	68cb      	ldr	r3, [r1, #12]
    139e:	421a      	tst	r2, r3
    13a0:	d0fc      	beq.n	139c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    13a2:	4b0a      	ldr	r3, [pc, #40]	; (13cc <system_clock_source_enable+0xa4>)
    13a4:	681b      	ldr	r3, [r3, #0]
    13a6:	b29b      	uxth	r3, r3
    13a8:	4a07      	ldr	r2, [pc, #28]	; (13c8 <system_clock_source_enable+0xa0>)
    13aa:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    13ac:	2000      	movs	r0, #0
    13ae:	e008      	b.n	13c2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    13b0:	4905      	ldr	r1, [pc, #20]	; (13c8 <system_clock_source_enable+0xa0>)
    13b2:	2244      	movs	r2, #68	; 0x44
    13b4:	5c8b      	ldrb	r3, [r1, r2]
    13b6:	2002      	movs	r0, #2
    13b8:	4303      	orrs	r3, r0
    13ba:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    13bc:	2000      	movs	r0, #0
		break;
    13be:	e000      	b.n	13c2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    13c0:	2000      	movs	r0, #0
}
    13c2:	4770      	bx	lr
    13c4:	000050e0 	.word	0x000050e0
    13c8:	40000800 	.word	0x40000800
    13cc:	200000dc 	.word	0x200000dc

000013d0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13d2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13d4:	22c2      	movs	r2, #194	; 0xc2
    13d6:	00d2      	lsls	r2, r2, #3
    13d8:	4b47      	ldr	r3, [pc, #284]	; (14f8 <system_clock_init+0x128>)
    13da:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13dc:	4947      	ldr	r1, [pc, #284]	; (14fc <system_clock_init+0x12c>)
    13de:	684b      	ldr	r3, [r1, #4]
    13e0:	221e      	movs	r2, #30
    13e2:	4393      	bics	r3, r2
    13e4:	3a1c      	subs	r2, #28
    13e6:	4313      	orrs	r3, r2
    13e8:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    13ea:	ab01      	add	r3, sp, #4
    13ec:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13ee:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    13f0:	4d43      	ldr	r5, [pc, #268]	; (1500 <system_clock_init+0x130>)
    13f2:	b2e0      	uxtb	r0, r4
    13f4:	a901      	add	r1, sp, #4
    13f6:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13f8:	3401      	adds	r4, #1
    13fa:	2c25      	cmp	r4, #37	; 0x25
    13fc:	d1f9      	bne.n	13f2 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    13fe:	a80a      	add	r0, sp, #40	; 0x28
    1400:	2300      	movs	r3, #0
    1402:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1404:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1406:	2280      	movs	r2, #128	; 0x80
    1408:	0212      	lsls	r2, r2, #8
    140a:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    140c:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    140e:	2201      	movs	r2, #1
    1410:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1412:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1414:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1416:	3205      	adds	r2, #5
    1418:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    141a:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    141c:	4b39      	ldr	r3, [pc, #228]	; (1504 <system_clock_init+0x134>)
    141e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1420:	2005      	movs	r0, #5
    1422:	4b39      	ldr	r3, [pc, #228]	; (1508 <system_clock_init+0x138>)
    1424:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1426:	4934      	ldr	r1, [pc, #208]	; (14f8 <system_clock_init+0x128>)
    1428:	2202      	movs	r2, #2
    142a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    142c:	421a      	tst	r2, r3
    142e:	d0fc      	beq.n	142a <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1430:	4a31      	ldr	r2, [pc, #196]	; (14f8 <system_clock_init+0x128>)
    1432:	8a93      	ldrh	r3, [r2, #20]
    1434:	2180      	movs	r1, #128	; 0x80
    1436:	430b      	orrs	r3, r1
    1438:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    143a:	ab05      	add	r3, sp, #20
    143c:	2100      	movs	r1, #0
    143e:	2200      	movs	r2, #0
    1440:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1442:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1444:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1446:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1448:	313f      	adds	r1, #63	; 0x3f
    144a:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    144c:	393b      	subs	r1, #59	; 0x3b
    144e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1450:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1452:	4b2e      	ldr	r3, [pc, #184]	; (150c <system_clock_init+0x13c>)
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1458:	2b3f      	cmp	r3, #63	; 0x3f
    145a:	d04b      	beq.n	14f4 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    145c:	a805      	add	r0, sp, #20
    145e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1460:	23b7      	movs	r3, #183	; 0xb7
    1462:	00db      	lsls	r3, r3, #3
    1464:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1466:	2307      	movs	r3, #7
    1468:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    146a:	3338      	adds	r3, #56	; 0x38
    146c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    146e:	4b28      	ldr	r3, [pc, #160]	; (1510 <system_clock_init+0x140>)
    1470:	4798      	blx	r3
	config->run_in_standby  = false;
    1472:	a804      	add	r0, sp, #16
    1474:	2500      	movs	r5, #0
    1476:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1478:	2601      	movs	r6, #1
    147a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    147c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    147e:	4b25      	ldr	r3, [pc, #148]	; (1514 <system_clock_init+0x144>)
    1480:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1482:	2006      	movs	r0, #6
    1484:	4f20      	ldr	r7, [pc, #128]	; (1508 <system_clock_init+0x138>)
    1486:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1488:	4b23      	ldr	r3, [pc, #140]	; (1518 <system_clock_init+0x148>)
    148a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    148c:	ac01      	add	r4, sp, #4
    148e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1490:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1492:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1494:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1496:	2305      	movs	r3, #5
    1498:	7023      	strb	r3, [r4, #0]
    149a:	0021      	movs	r1, r4
    149c:	2001      	movs	r0, #1
    149e:	4b1f      	ldr	r3, [pc, #124]	; (151c <system_clock_init+0x14c>)
    14a0:	4798      	blx	r3
    14a2:	2001      	movs	r0, #1
    14a4:	4b1e      	ldr	r3, [pc, #120]	; (1520 <system_clock_init+0x150>)
    14a6:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    14a8:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    14aa:	0021      	movs	r1, r4
    14ac:	2000      	movs	r0, #0
    14ae:	4b14      	ldr	r3, [pc, #80]	; (1500 <system_clock_init+0x130>)
    14b0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    14b2:	2000      	movs	r0, #0
    14b4:	4b1b      	ldr	r3, [pc, #108]	; (1524 <system_clock_init+0x154>)
    14b6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    14b8:	2007      	movs	r0, #7
    14ba:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    14bc:	490e      	ldr	r1, [pc, #56]	; (14f8 <system_clock_init+0x128>)
    14be:	22d0      	movs	r2, #208	; 0xd0
    14c0:	68cb      	ldr	r3, [r1, #12]
    14c2:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    14c4:	2bd0      	cmp	r3, #208	; 0xd0
    14c6:	d1fb      	bne.n	14c0 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    14c8:	4a17      	ldr	r2, [pc, #92]	; (1528 <system_clock_init+0x158>)
    14ca:	2300      	movs	r3, #0
    14cc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    14ce:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    14d0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    14d2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    14d4:	a901      	add	r1, sp, #4
    14d6:	2201      	movs	r2, #1
    14d8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    14da:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    14dc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    14de:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    14e0:	3307      	adds	r3, #7
    14e2:	700b      	strb	r3, [r1, #0]
    14e4:	2000      	movs	r0, #0
    14e6:	4b0d      	ldr	r3, [pc, #52]	; (151c <system_clock_init+0x14c>)
    14e8:	4798      	blx	r3
    14ea:	2000      	movs	r0, #0
    14ec:	4b0c      	ldr	r3, [pc, #48]	; (1520 <system_clock_init+0x150>)
    14ee:	4798      	blx	r3
#endif
}
    14f0:	b00f      	add	sp, #60	; 0x3c
    14f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    14f4:	3b20      	subs	r3, #32
    14f6:	e7b1      	b.n	145c <system_clock_init+0x8c>
    14f8:	40000800 	.word	0x40000800
    14fc:	41004000 	.word	0x41004000
    1500:	00001765 	.word	0x00001765
    1504:	000011f1 	.word	0x000011f1
    1508:	00001329 	.word	0x00001329
    150c:	00806024 	.word	0x00806024
    1510:	000012a9 	.word	0x000012a9
    1514:	000011b5 	.word	0x000011b5
    1518:	0000152d 	.word	0x0000152d
    151c:	00001551 	.word	0x00001551
    1520:	00001609 	.word	0x00001609
    1524:	000016d9 	.word	0x000016d9
    1528:	40000400 	.word	0x40000400

0000152c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    152c:	4a06      	ldr	r2, [pc, #24]	; (1548 <system_gclk_init+0x1c>)
    152e:	6993      	ldr	r3, [r2, #24]
    1530:	2108      	movs	r1, #8
    1532:	430b      	orrs	r3, r1
    1534:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1536:	2201      	movs	r2, #1
    1538:	4b04      	ldr	r3, [pc, #16]	; (154c <system_gclk_init+0x20>)
    153a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    153c:	0019      	movs	r1, r3
    153e:	780b      	ldrb	r3, [r1, #0]
    1540:	4213      	tst	r3, r2
    1542:	d1fc      	bne.n	153e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1544:	4770      	bx	lr
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	40000400 	.word	0x40000400
    154c:	40000c00 	.word	0x40000c00

00001550 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1550:	b570      	push	{r4, r5, r6, lr}
    1552:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1554:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1556:	780d      	ldrb	r5, [r1, #0]
    1558:	022d      	lsls	r5, r5, #8
    155a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    155c:	784b      	ldrb	r3, [r1, #1]
    155e:	2b00      	cmp	r3, #0
    1560:	d002      	beq.n	1568 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1562:	2380      	movs	r3, #128	; 0x80
    1564:	02db      	lsls	r3, r3, #11
    1566:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1568:	7a4b      	ldrb	r3, [r1, #9]
    156a:	2b00      	cmp	r3, #0
    156c:	d002      	beq.n	1574 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    156e:	2380      	movs	r3, #128	; 0x80
    1570:	031b      	lsls	r3, r3, #12
    1572:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1574:	6848      	ldr	r0, [r1, #4]
    1576:	2801      	cmp	r0, #1
    1578:	d910      	bls.n	159c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    157a:	1e43      	subs	r3, r0, #1
    157c:	4218      	tst	r0, r3
    157e:	d134      	bne.n	15ea <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1580:	2802      	cmp	r0, #2
    1582:	d930      	bls.n	15e6 <system_gclk_gen_set_config+0x96>
    1584:	2302      	movs	r3, #2
    1586:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1588:	3201      	adds	r2, #1
						mask <<= 1) {
    158a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    158c:	4298      	cmp	r0, r3
    158e:	d8fb      	bhi.n	1588 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1590:	0212      	lsls	r2, r2, #8
    1592:	4332      	orrs	r2, r6
    1594:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1596:	2380      	movs	r3, #128	; 0x80
    1598:	035b      	lsls	r3, r3, #13
    159a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    159c:	7a0b      	ldrb	r3, [r1, #8]
    159e:	2b00      	cmp	r3, #0
    15a0:	d002      	beq.n	15a8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    15a2:	2380      	movs	r3, #128	; 0x80
    15a4:	039b      	lsls	r3, r3, #14
    15a6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15a8:	4a13      	ldr	r2, [pc, #76]	; (15f8 <system_gclk_gen_set_config+0xa8>)
    15aa:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    15ac:	b25b      	sxtb	r3, r3
    15ae:	2b00      	cmp	r3, #0
    15b0:	dbfb      	blt.n	15aa <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15b2:	4b12      	ldr	r3, [pc, #72]	; (15fc <system_gclk_gen_set_config+0xac>)
    15b4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15b6:	4b12      	ldr	r3, [pc, #72]	; (1600 <system_gclk_gen_set_config+0xb0>)
    15b8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15ba:	4a0f      	ldr	r2, [pc, #60]	; (15f8 <system_gclk_gen_set_config+0xa8>)
    15bc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    15be:	b25b      	sxtb	r3, r3
    15c0:	2b00      	cmp	r3, #0
    15c2:	dbfb      	blt.n	15bc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    15c4:	4b0c      	ldr	r3, [pc, #48]	; (15f8 <system_gclk_gen_set_config+0xa8>)
    15c6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15c8:	001a      	movs	r2, r3
    15ca:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    15cc:	b25b      	sxtb	r3, r3
    15ce:	2b00      	cmp	r3, #0
    15d0:	dbfb      	blt.n	15ca <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    15d2:	4a09      	ldr	r2, [pc, #36]	; (15f8 <system_gclk_gen_set_config+0xa8>)
    15d4:	6853      	ldr	r3, [r2, #4]
    15d6:	2180      	movs	r1, #128	; 0x80
    15d8:	0249      	lsls	r1, r1, #9
    15da:	400b      	ands	r3, r1
    15dc:	431d      	orrs	r5, r3
    15de:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    15e0:	4b08      	ldr	r3, [pc, #32]	; (1604 <system_gclk_gen_set_config+0xb4>)
    15e2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15e4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    15e6:	2200      	movs	r2, #0
    15e8:	e7d2      	b.n	1590 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    15ea:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    15ec:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    15ee:	2380      	movs	r3, #128	; 0x80
    15f0:	029b      	lsls	r3, r3, #10
    15f2:	431d      	orrs	r5, r3
    15f4:	e7d2      	b.n	159c <system_gclk_gen_set_config+0x4c>
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	40000c00 	.word	0x40000c00
    15fc:	00000181 	.word	0x00000181
    1600:	40000c08 	.word	0x40000c08
    1604:	000001c1 	.word	0x000001c1

00001608 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1608:	b510      	push	{r4, lr}
    160a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    160c:	4a0b      	ldr	r2, [pc, #44]	; (163c <system_gclk_gen_enable+0x34>)
    160e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1610:	b25b      	sxtb	r3, r3
    1612:	2b00      	cmp	r3, #0
    1614:	dbfb      	blt.n	160e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1616:	4b0a      	ldr	r3, [pc, #40]	; (1640 <system_gclk_gen_enable+0x38>)
    1618:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    161a:	4b0a      	ldr	r3, [pc, #40]	; (1644 <system_gclk_gen_enable+0x3c>)
    161c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    161e:	4a07      	ldr	r2, [pc, #28]	; (163c <system_gclk_gen_enable+0x34>)
    1620:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1622:	b25b      	sxtb	r3, r3
    1624:	2b00      	cmp	r3, #0
    1626:	dbfb      	blt.n	1620 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1628:	4a04      	ldr	r2, [pc, #16]	; (163c <system_gclk_gen_enable+0x34>)
    162a:	6851      	ldr	r1, [r2, #4]
    162c:	2380      	movs	r3, #128	; 0x80
    162e:	025b      	lsls	r3, r3, #9
    1630:	430b      	orrs	r3, r1
    1632:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1634:	4b04      	ldr	r3, [pc, #16]	; (1648 <system_gclk_gen_enable+0x40>)
    1636:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1638:	bd10      	pop	{r4, pc}
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	40000c00 	.word	0x40000c00
    1640:	00000181 	.word	0x00000181
    1644:	40000c04 	.word	0x40000c04
    1648:	000001c1 	.word	0x000001c1

0000164c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    164c:	b570      	push	{r4, r5, r6, lr}
    164e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1650:	4a1a      	ldr	r2, [pc, #104]	; (16bc <system_gclk_gen_get_hz+0x70>)
    1652:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1654:	b25b      	sxtb	r3, r3
    1656:	2b00      	cmp	r3, #0
    1658:	dbfb      	blt.n	1652 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    165a:	4b19      	ldr	r3, [pc, #100]	; (16c0 <system_gclk_gen_get_hz+0x74>)
    165c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    165e:	4b19      	ldr	r3, [pc, #100]	; (16c4 <system_gclk_gen_get_hz+0x78>)
    1660:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1662:	4a16      	ldr	r2, [pc, #88]	; (16bc <system_gclk_gen_get_hz+0x70>)
    1664:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1666:	b25b      	sxtb	r3, r3
    1668:	2b00      	cmp	r3, #0
    166a:	dbfb      	blt.n	1664 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    166c:	4e13      	ldr	r6, [pc, #76]	; (16bc <system_gclk_gen_get_hz+0x70>)
    166e:	6870      	ldr	r0, [r6, #4]
    1670:	04c0      	lsls	r0, r0, #19
    1672:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1674:	4b14      	ldr	r3, [pc, #80]	; (16c8 <system_gclk_gen_get_hz+0x7c>)
    1676:	4798      	blx	r3
    1678:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    167a:	4b12      	ldr	r3, [pc, #72]	; (16c4 <system_gclk_gen_get_hz+0x78>)
    167c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    167e:	6876      	ldr	r6, [r6, #4]
    1680:	02f6      	lsls	r6, r6, #11
    1682:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1684:	4b11      	ldr	r3, [pc, #68]	; (16cc <system_gclk_gen_get_hz+0x80>)
    1686:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1688:	4a0c      	ldr	r2, [pc, #48]	; (16bc <system_gclk_gen_get_hz+0x70>)
    168a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    168c:	b25b      	sxtb	r3, r3
    168e:	2b00      	cmp	r3, #0
    1690:	dbfb      	blt.n	168a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1692:	4b0a      	ldr	r3, [pc, #40]	; (16bc <system_gclk_gen_get_hz+0x70>)
    1694:	689c      	ldr	r4, [r3, #8]
    1696:	0224      	lsls	r4, r4, #8
    1698:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    169a:	4b0d      	ldr	r3, [pc, #52]	; (16d0 <system_gclk_gen_get_hz+0x84>)
    169c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    169e:	2e00      	cmp	r6, #0
    16a0:	d107      	bne.n	16b2 <system_gclk_gen_get_hz+0x66>
    16a2:	2c01      	cmp	r4, #1
    16a4:	d907      	bls.n	16b6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    16a6:	0021      	movs	r1, r4
    16a8:	0028      	movs	r0, r5
    16aa:	4b0a      	ldr	r3, [pc, #40]	; (16d4 <system_gclk_gen_get_hz+0x88>)
    16ac:	4798      	blx	r3
    16ae:	0005      	movs	r5, r0
    16b0:	e001      	b.n	16b6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    16b2:	3401      	adds	r4, #1
    16b4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    16b6:	0028      	movs	r0, r5
    16b8:	bd70      	pop	{r4, r5, r6, pc}
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	40000c00 	.word	0x40000c00
    16c0:	00000181 	.word	0x00000181
    16c4:	40000c04 	.word	0x40000c04
    16c8:	00001121 	.word	0x00001121
    16cc:	40000c08 	.word	0x40000c08
    16d0:	000001c1 	.word	0x000001c1
    16d4:	00003ce1 	.word	0x00003ce1

000016d8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    16d8:	b510      	push	{r4, lr}
    16da:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    16dc:	4b06      	ldr	r3, [pc, #24]	; (16f8 <system_gclk_chan_enable+0x20>)
    16de:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16e0:	4b06      	ldr	r3, [pc, #24]	; (16fc <system_gclk_chan_enable+0x24>)
    16e2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    16e4:	4a06      	ldr	r2, [pc, #24]	; (1700 <system_gclk_chan_enable+0x28>)
    16e6:	8853      	ldrh	r3, [r2, #2]
    16e8:	2180      	movs	r1, #128	; 0x80
    16ea:	01c9      	lsls	r1, r1, #7
    16ec:	430b      	orrs	r3, r1
    16ee:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    16f0:	4b04      	ldr	r3, [pc, #16]	; (1704 <system_gclk_chan_enable+0x2c>)
    16f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16f4:	bd10      	pop	{r4, pc}
    16f6:	46c0      	nop			; (mov r8, r8)
    16f8:	00000181 	.word	0x00000181
    16fc:	40000c02 	.word	0x40000c02
    1700:	40000c00 	.word	0x40000c00
    1704:	000001c1 	.word	0x000001c1

00001708 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1708:	b510      	push	{r4, lr}
    170a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    170c:	4b0f      	ldr	r3, [pc, #60]	; (174c <system_gclk_chan_disable+0x44>)
    170e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1710:	4b0f      	ldr	r3, [pc, #60]	; (1750 <system_gclk_chan_disable+0x48>)
    1712:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1714:	4a0f      	ldr	r2, [pc, #60]	; (1754 <system_gclk_chan_disable+0x4c>)
    1716:	8853      	ldrh	r3, [r2, #2]
    1718:	051b      	lsls	r3, r3, #20
    171a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    171c:	8853      	ldrh	r3, [r2, #2]
    171e:	490e      	ldr	r1, [pc, #56]	; (1758 <system_gclk_chan_disable+0x50>)
    1720:	400b      	ands	r3, r1
    1722:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1724:	8853      	ldrh	r3, [r2, #2]
    1726:	490d      	ldr	r1, [pc, #52]	; (175c <system_gclk_chan_disable+0x54>)
    1728:	400b      	ands	r3, r1
    172a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    172c:	0011      	movs	r1, r2
    172e:	2280      	movs	r2, #128	; 0x80
    1730:	01d2      	lsls	r2, r2, #7
    1732:	884b      	ldrh	r3, [r1, #2]
    1734:	4213      	tst	r3, r2
    1736:	d1fc      	bne.n	1732 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1738:	4906      	ldr	r1, [pc, #24]	; (1754 <system_gclk_chan_disable+0x4c>)
    173a:	884a      	ldrh	r2, [r1, #2]
    173c:	0203      	lsls	r3, r0, #8
    173e:	4806      	ldr	r0, [pc, #24]	; (1758 <system_gclk_chan_disable+0x50>)
    1740:	4002      	ands	r2, r0
    1742:	4313      	orrs	r3, r2
    1744:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1746:	4b06      	ldr	r3, [pc, #24]	; (1760 <system_gclk_chan_disable+0x58>)
    1748:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    174a:	bd10      	pop	{r4, pc}
    174c:	00000181 	.word	0x00000181
    1750:	40000c02 	.word	0x40000c02
    1754:	40000c00 	.word	0x40000c00
    1758:	fffff0ff 	.word	0xfffff0ff
    175c:	ffffbfff 	.word	0xffffbfff
    1760:	000001c1 	.word	0x000001c1

00001764 <system_gclk_chan_set_config>:
{
    1764:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1766:	780c      	ldrb	r4, [r1, #0]
    1768:	0224      	lsls	r4, r4, #8
    176a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    176c:	4b02      	ldr	r3, [pc, #8]	; (1778 <system_gclk_chan_set_config+0x14>)
    176e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1770:	b2a4      	uxth	r4, r4
    1772:	4b02      	ldr	r3, [pc, #8]	; (177c <system_gclk_chan_set_config+0x18>)
    1774:	805c      	strh	r4, [r3, #2]
}
    1776:	bd10      	pop	{r4, pc}
    1778:	00001709 	.word	0x00001709
    177c:	40000c00 	.word	0x40000c00

00001780 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1780:	b510      	push	{r4, lr}
    1782:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1784:	4b06      	ldr	r3, [pc, #24]	; (17a0 <system_gclk_chan_get_hz+0x20>)
    1786:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1788:	4b06      	ldr	r3, [pc, #24]	; (17a4 <system_gclk_chan_get_hz+0x24>)
    178a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    178c:	4b06      	ldr	r3, [pc, #24]	; (17a8 <system_gclk_chan_get_hz+0x28>)
    178e:	885c      	ldrh	r4, [r3, #2]
    1790:	0524      	lsls	r4, r4, #20
    1792:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1794:	4b05      	ldr	r3, [pc, #20]	; (17ac <system_gclk_chan_get_hz+0x2c>)
    1796:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1798:	0020      	movs	r0, r4
    179a:	4b05      	ldr	r3, [pc, #20]	; (17b0 <system_gclk_chan_get_hz+0x30>)
    179c:	4798      	blx	r3
}
    179e:	bd10      	pop	{r4, pc}
    17a0:	00000181 	.word	0x00000181
    17a4:	40000c02 	.word	0x40000c02
    17a8:	40000c00 	.word	0x40000c00
    17ac:	000001c1 	.word	0x000001c1
    17b0:	0000164d 	.word	0x0000164d

000017b4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    17b4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    17b6:	78d3      	ldrb	r3, [r2, #3]
    17b8:	2b00      	cmp	r3, #0
    17ba:	d135      	bne.n	1828 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    17bc:	7813      	ldrb	r3, [r2, #0]
    17be:	2b80      	cmp	r3, #128	; 0x80
    17c0:	d029      	beq.n	1816 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    17c2:	061b      	lsls	r3, r3, #24
    17c4:	2480      	movs	r4, #128	; 0x80
    17c6:	0264      	lsls	r4, r4, #9
    17c8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    17ca:	7854      	ldrb	r4, [r2, #1]
    17cc:	2502      	movs	r5, #2
    17ce:	43ac      	bics	r4, r5
    17d0:	d106      	bne.n	17e0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    17d2:	7894      	ldrb	r4, [r2, #2]
    17d4:	2c00      	cmp	r4, #0
    17d6:	d120      	bne.n	181a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    17d8:	2480      	movs	r4, #128	; 0x80
    17da:	02a4      	lsls	r4, r4, #10
    17dc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    17de:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17e0:	7854      	ldrb	r4, [r2, #1]
    17e2:	3c01      	subs	r4, #1
    17e4:	2c01      	cmp	r4, #1
    17e6:	d91c      	bls.n	1822 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    17e8:	040d      	lsls	r5, r1, #16
    17ea:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    17ec:	24a0      	movs	r4, #160	; 0xa0
    17ee:	05e4      	lsls	r4, r4, #23
    17f0:	432c      	orrs	r4, r5
    17f2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    17f4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    17f6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    17f8:	24d0      	movs	r4, #208	; 0xd0
    17fa:	0624      	lsls	r4, r4, #24
    17fc:	432c      	orrs	r4, r5
    17fe:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1800:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1802:	78d4      	ldrb	r4, [r2, #3]
    1804:	2c00      	cmp	r4, #0
    1806:	d122      	bne.n	184e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1808:	035b      	lsls	r3, r3, #13
    180a:	d51c      	bpl.n	1846 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    180c:	7893      	ldrb	r3, [r2, #2]
    180e:	2b01      	cmp	r3, #1
    1810:	d01e      	beq.n	1850 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1812:	6141      	str	r1, [r0, #20]
    1814:	e017      	b.n	1846 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1816:	2300      	movs	r3, #0
    1818:	e7d7      	b.n	17ca <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    181a:	24c0      	movs	r4, #192	; 0xc0
    181c:	02e4      	lsls	r4, r4, #11
    181e:	4323      	orrs	r3, r4
    1820:	e7dd      	b.n	17de <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1822:	4c0d      	ldr	r4, [pc, #52]	; (1858 <_system_pinmux_config+0xa4>)
    1824:	4023      	ands	r3, r4
    1826:	e7df      	b.n	17e8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1828:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    182a:	040c      	lsls	r4, r1, #16
    182c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    182e:	23a0      	movs	r3, #160	; 0xa0
    1830:	05db      	lsls	r3, r3, #23
    1832:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1834:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1836:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1838:	23d0      	movs	r3, #208	; 0xd0
    183a:	061b      	lsls	r3, r3, #24
    183c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    183e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1840:	78d3      	ldrb	r3, [r2, #3]
    1842:	2b00      	cmp	r3, #0
    1844:	d103      	bne.n	184e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1846:	7853      	ldrb	r3, [r2, #1]
    1848:	3b01      	subs	r3, #1
    184a:	2b01      	cmp	r3, #1
    184c:	d902      	bls.n	1854 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    184e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1850:	6181      	str	r1, [r0, #24]
    1852:	e7f8      	b.n	1846 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1854:	6081      	str	r1, [r0, #8]
}
    1856:	e7fa      	b.n	184e <_system_pinmux_config+0x9a>
    1858:	fffbffff 	.word	0xfffbffff

0000185c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    185c:	b510      	push	{r4, lr}
    185e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1860:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1862:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1864:	2900      	cmp	r1, #0
    1866:	d104      	bne.n	1872 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1868:	0943      	lsrs	r3, r0, #5
    186a:	01db      	lsls	r3, r3, #7
    186c:	4905      	ldr	r1, [pc, #20]	; (1884 <system_pinmux_pin_set_config+0x28>)
    186e:	468c      	mov	ip, r1
    1870:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1872:	241f      	movs	r4, #31
    1874:	4020      	ands	r0, r4
    1876:	2101      	movs	r1, #1
    1878:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    187a:	0018      	movs	r0, r3
    187c:	4b02      	ldr	r3, [pc, #8]	; (1888 <system_pinmux_pin_set_config+0x2c>)
    187e:	4798      	blx	r3
}
    1880:	bd10      	pop	{r4, pc}
    1882:	46c0      	nop			; (mov r8, r8)
    1884:	41004400 	.word	0x41004400
    1888:	000017b5 	.word	0x000017b5

0000188c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    188c:	4770      	bx	lr
	...

00001890 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1890:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1892:	4b05      	ldr	r3, [pc, #20]	; (18a8 <system_init+0x18>)
    1894:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1896:	4b05      	ldr	r3, [pc, #20]	; (18ac <system_init+0x1c>)
    1898:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    189a:	4b05      	ldr	r3, [pc, #20]	; (18b0 <system_init+0x20>)
    189c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    189e:	4b05      	ldr	r3, [pc, #20]	; (18b4 <system_init+0x24>)
    18a0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    18a2:	4b05      	ldr	r3, [pc, #20]	; (18b8 <system_init+0x28>)
    18a4:	4798      	blx	r3
}
    18a6:	bd10      	pop	{r4, pc}
    18a8:	000013d1 	.word	0x000013d1
    18ac:	000001f1 	.word	0x000001f1
    18b0:	0000188d 	.word	0x0000188d
    18b4:	0000188d 	.word	0x0000188d
    18b8:	0000188d 	.word	0x0000188d

000018bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    18bc:	e7fe      	b.n	18bc <Dummy_Handler>
	...

000018c0 <Reset_Handler>:
{
    18c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    18c2:	4a2a      	ldr	r2, [pc, #168]	; (196c <Reset_Handler+0xac>)
    18c4:	4b2a      	ldr	r3, [pc, #168]	; (1970 <Reset_Handler+0xb0>)
    18c6:	429a      	cmp	r2, r3
    18c8:	d011      	beq.n	18ee <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    18ca:	001a      	movs	r2, r3
    18cc:	4b29      	ldr	r3, [pc, #164]	; (1974 <Reset_Handler+0xb4>)
    18ce:	429a      	cmp	r2, r3
    18d0:	d20d      	bcs.n	18ee <Reset_Handler+0x2e>
    18d2:	4a29      	ldr	r2, [pc, #164]	; (1978 <Reset_Handler+0xb8>)
    18d4:	3303      	adds	r3, #3
    18d6:	1a9b      	subs	r3, r3, r2
    18d8:	089b      	lsrs	r3, r3, #2
    18da:	3301      	adds	r3, #1
    18dc:	009b      	lsls	r3, r3, #2
    18de:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    18e0:	4823      	ldr	r0, [pc, #140]	; (1970 <Reset_Handler+0xb0>)
    18e2:	4922      	ldr	r1, [pc, #136]	; (196c <Reset_Handler+0xac>)
    18e4:	588c      	ldr	r4, [r1, r2]
    18e6:	5084      	str	r4, [r0, r2]
    18e8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    18ea:	429a      	cmp	r2, r3
    18ec:	d1fa      	bne.n	18e4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    18ee:	4a23      	ldr	r2, [pc, #140]	; (197c <Reset_Handler+0xbc>)
    18f0:	4b23      	ldr	r3, [pc, #140]	; (1980 <Reset_Handler+0xc0>)
    18f2:	429a      	cmp	r2, r3
    18f4:	d20a      	bcs.n	190c <Reset_Handler+0x4c>
    18f6:	43d3      	mvns	r3, r2
    18f8:	4921      	ldr	r1, [pc, #132]	; (1980 <Reset_Handler+0xc0>)
    18fa:	185b      	adds	r3, r3, r1
    18fc:	2103      	movs	r1, #3
    18fe:	438b      	bics	r3, r1
    1900:	3304      	adds	r3, #4
    1902:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1904:	2100      	movs	r1, #0
    1906:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1908:	4293      	cmp	r3, r2
    190a:	d1fc      	bne.n	1906 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    190c:	4a1d      	ldr	r2, [pc, #116]	; (1984 <Reset_Handler+0xc4>)
    190e:	21ff      	movs	r1, #255	; 0xff
    1910:	4b1d      	ldr	r3, [pc, #116]	; (1988 <Reset_Handler+0xc8>)
    1912:	438b      	bics	r3, r1
    1914:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1916:	39fd      	subs	r1, #253	; 0xfd
    1918:	2390      	movs	r3, #144	; 0x90
    191a:	005b      	lsls	r3, r3, #1
    191c:	4a1b      	ldr	r2, [pc, #108]	; (198c <Reset_Handler+0xcc>)
    191e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1920:	4a1b      	ldr	r2, [pc, #108]	; (1990 <Reset_Handler+0xd0>)
    1922:	78d3      	ldrb	r3, [r2, #3]
    1924:	2503      	movs	r5, #3
    1926:	43ab      	bics	r3, r5
    1928:	2402      	movs	r4, #2
    192a:	4323      	orrs	r3, r4
    192c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    192e:	78d3      	ldrb	r3, [r2, #3]
    1930:	270c      	movs	r7, #12
    1932:	43bb      	bics	r3, r7
    1934:	2608      	movs	r6, #8
    1936:	4333      	orrs	r3, r6
    1938:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    193a:	4b16      	ldr	r3, [pc, #88]	; (1994 <Reset_Handler+0xd4>)
    193c:	7b98      	ldrb	r0, [r3, #14]
    193e:	2230      	movs	r2, #48	; 0x30
    1940:	4390      	bics	r0, r2
    1942:	2220      	movs	r2, #32
    1944:	4310      	orrs	r0, r2
    1946:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1948:	7b99      	ldrb	r1, [r3, #14]
    194a:	43b9      	bics	r1, r7
    194c:	4331      	orrs	r1, r6
    194e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1950:	7b9a      	ldrb	r2, [r3, #14]
    1952:	43aa      	bics	r2, r5
    1954:	4322      	orrs	r2, r4
    1956:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1958:	4a0f      	ldr	r2, [pc, #60]	; (1998 <Reset_Handler+0xd8>)
    195a:	6853      	ldr	r3, [r2, #4]
    195c:	2180      	movs	r1, #128	; 0x80
    195e:	430b      	orrs	r3, r1
    1960:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1962:	4b0e      	ldr	r3, [pc, #56]	; (199c <Reset_Handler+0xdc>)
    1964:	4798      	blx	r3
        main();
    1966:	4b0e      	ldr	r3, [pc, #56]	; (19a0 <Reset_Handler+0xe0>)
    1968:	4798      	blx	r3
    196a:	e7fe      	b.n	196a <Reset_Handler+0xaa>
    196c:	0000712c 	.word	0x0000712c
    1970:	20000000 	.word	0x20000000
    1974:	2000009c 	.word	0x2000009c
    1978:	20000004 	.word	0x20000004
    197c:	2000009c 	.word	0x2000009c
    1980:	20000310 	.word	0x20000310
    1984:	e000ed00 	.word	0xe000ed00
    1988:	00000000 	.word	0x00000000
    198c:	41007000 	.word	0x41007000
    1990:	41005000 	.word	0x41005000
    1994:	41004800 	.word	0x41004800
    1998:	41004000 	.word	0x41004000
    199c:	00003e4d 	.word	0x00003e4d
    19a0:	00003bb1 	.word	0x00003bb1

000019a4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    19a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19a6:	46c6      	mov	lr, r8
    19a8:	b500      	push	{lr}
    19aa:	000c      	movs	r4, r1
    19ac:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    19ae:	2800      	cmp	r0, #0
    19b0:	d10f      	bne.n	19d2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    19b2:	2a00      	cmp	r2, #0
    19b4:	dd11      	ble.n	19da <_read+0x36>
    19b6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    19b8:	4e09      	ldr	r6, [pc, #36]	; (19e0 <_read+0x3c>)
    19ba:	4d0a      	ldr	r5, [pc, #40]	; (19e4 <_read+0x40>)
    19bc:	6830      	ldr	r0, [r6, #0]
    19be:	0021      	movs	r1, r4
    19c0:	682b      	ldr	r3, [r5, #0]
    19c2:	4798      	blx	r3
		ptr++;
    19c4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    19c6:	42bc      	cmp	r4, r7
    19c8:	d1f8      	bne.n	19bc <_read+0x18>
		nChars++;
	}
	return nChars;
}
    19ca:	4640      	mov	r0, r8
    19cc:	bc04      	pop	{r2}
    19ce:	4690      	mov	r8, r2
    19d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    19d2:	2301      	movs	r3, #1
    19d4:	425b      	negs	r3, r3
    19d6:	4698      	mov	r8, r3
    19d8:	e7f7      	b.n	19ca <_read+0x26>
	for (; len > 0; --len) {
    19da:	4680      	mov	r8, r0
    19dc:	e7f5      	b.n	19ca <_read+0x26>
    19de:	46c0      	nop			; (mov r8, r8)
    19e0:	200001ac 	.word	0x200001ac
    19e4:	200001a4 	.word	0x200001a4

000019e8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    19e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ea:	46c6      	mov	lr, r8
    19ec:	b500      	push	{lr}
    19ee:	000e      	movs	r6, r1
    19f0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    19f2:	3801      	subs	r0, #1
    19f4:	2802      	cmp	r0, #2
    19f6:	d810      	bhi.n	1a1a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    19f8:	2a00      	cmp	r2, #0
    19fa:	d011      	beq.n	1a20 <_write+0x38>
    19fc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    19fe:	4b0c      	ldr	r3, [pc, #48]	; (1a30 <_write+0x48>)
    1a00:	4698      	mov	r8, r3
    1a02:	4f0c      	ldr	r7, [pc, #48]	; (1a34 <_write+0x4c>)
    1a04:	4643      	mov	r3, r8
    1a06:	6818      	ldr	r0, [r3, #0]
    1a08:	5d31      	ldrb	r1, [r6, r4]
    1a0a:	683b      	ldr	r3, [r7, #0]
    1a0c:	4798      	blx	r3
    1a0e:	2800      	cmp	r0, #0
    1a10:	db08      	blt.n	1a24 <_write+0x3c>
			return -1;
		}
		++nChars;
    1a12:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1a14:	42a5      	cmp	r5, r4
    1a16:	d1f5      	bne.n	1a04 <_write+0x1c>
    1a18:	e006      	b.n	1a28 <_write+0x40>
		return -1;
    1a1a:	2401      	movs	r4, #1
    1a1c:	4264      	negs	r4, r4
    1a1e:	e003      	b.n	1a28 <_write+0x40>
	for (; len != 0; --len) {
    1a20:	0014      	movs	r4, r2
    1a22:	e001      	b.n	1a28 <_write+0x40>
			return -1;
    1a24:	2401      	movs	r4, #1
    1a26:	4264      	negs	r4, r4
	}
	return nChars;
}
    1a28:	0020      	movs	r0, r4
    1a2a:	bc04      	pop	{r2}
    1a2c:	4690      	mov	r8, r2
    1a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a30:	200001ac 	.word	0x200001ac
    1a34:	200001a8 	.word	0x200001a8

00001a38 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1a38:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1a3a:	4a06      	ldr	r2, [pc, #24]	; (1a54 <_sbrk+0x1c>)
    1a3c:	6812      	ldr	r2, [r2, #0]
    1a3e:	2a00      	cmp	r2, #0
    1a40:	d004      	beq.n	1a4c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1a42:	4a04      	ldr	r2, [pc, #16]	; (1a54 <_sbrk+0x1c>)
    1a44:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1a46:	18c3      	adds	r3, r0, r3
    1a48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1a4a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1a4c:	4902      	ldr	r1, [pc, #8]	; (1a58 <_sbrk+0x20>)
    1a4e:	4a01      	ldr	r2, [pc, #4]	; (1a54 <_sbrk+0x1c>)
    1a50:	6011      	str	r1, [r2, #0]
    1a52:	e7f6      	b.n	1a42 <_sbrk+0xa>
    1a54:	200000f4 	.word	0x200000f4
    1a58:	20002310 	.word	0x20002310

00001a5c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1a5c:	2001      	movs	r0, #1
    1a5e:	4240      	negs	r0, r0
    1a60:	4770      	bx	lr

00001a62 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1a62:	2380      	movs	r3, #128	; 0x80
    1a64:	019b      	lsls	r3, r3, #6
    1a66:	604b      	str	r3, [r1, #4]

	return 0;
}
    1a68:	2000      	movs	r0, #0
    1a6a:	4770      	bx	lr

00001a6c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1a6c:	2001      	movs	r0, #1
    1a6e:	4770      	bx	lr

00001a70 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1a70:	2000      	movs	r0, #0
    1a72:	4770      	bx	lr

00001a74 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1a74:	b570      	push	{r4, r5, r6, lr}
    1a76:	b082      	sub	sp, #8
    1a78:	0005      	movs	r5, r0
    1a7a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1a7c:	2200      	movs	r2, #0
    1a7e:	466b      	mov	r3, sp
    1a80:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1a82:	4c06      	ldr	r4, [pc, #24]	; (1a9c <usart_serial_getchar+0x28>)
    1a84:	466b      	mov	r3, sp
    1a86:	1d99      	adds	r1, r3, #6
    1a88:	0028      	movs	r0, r5
    1a8a:	47a0      	blx	r4
    1a8c:	2800      	cmp	r0, #0
    1a8e:	d1f9      	bne.n	1a84 <usart_serial_getchar+0x10>

	*c = temp;
    1a90:	466b      	mov	r3, sp
    1a92:	3306      	adds	r3, #6
    1a94:	881b      	ldrh	r3, [r3, #0]
    1a96:	7033      	strb	r3, [r6, #0]
}
    1a98:	b002      	add	sp, #8
    1a9a:	bd70      	pop	{r4, r5, r6, pc}
    1a9c:	00000f23 	.word	0x00000f23

00001aa0 <usart_serial_putchar>:
{
    1aa0:	b570      	push	{r4, r5, r6, lr}
    1aa2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1aa4:	b28c      	uxth	r4, r1
    1aa6:	4e03      	ldr	r6, [pc, #12]	; (1ab4 <usart_serial_putchar+0x14>)
    1aa8:	0021      	movs	r1, r4
    1aaa:	0028      	movs	r0, r5
    1aac:	47b0      	blx	r6
    1aae:	2800      	cmp	r0, #0
    1ab0:	d1fa      	bne.n	1aa8 <usart_serial_putchar+0x8>
}
    1ab2:	bd70      	pop	{r4, r5, r6, pc}
    1ab4:	00000efd 	.word	0x00000efd

00001ab8 <configure_console>:
#include "config_usart.h"

void configure_console(void)
{
    1ab8:	b570      	push	{r4, r5, r6, lr}
    1aba:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1abc:	2380      	movs	r3, #128	; 0x80
    1abe:	05db      	lsls	r3, r3, #23
    1ac0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1ac2:	2300      	movs	r3, #0
    1ac4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1ac6:	22ff      	movs	r2, #255	; 0xff
    1ac8:	4669      	mov	r1, sp
    1aca:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1acc:	2200      	movs	r2, #0
    1ace:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1ad0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1ad2:	2196      	movs	r1, #150	; 0x96
    1ad4:	0189      	lsls	r1, r1, #6
    1ad6:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1ad8:	2101      	movs	r1, #1
    1ada:	2024      	movs	r0, #36	; 0x24
    1adc:	466c      	mov	r4, sp
    1ade:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1ae0:	3001      	adds	r0, #1
    1ae2:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1ae4:	3125      	adds	r1, #37	; 0x25
    1ae6:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1ae8:	3101      	adds	r1, #1
    1aea:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1aec:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1aee:	3105      	adds	r1, #5
    1af0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1af2:	3101      	adds	r1, #1
    1af4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1af6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1af8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1afa:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1afc:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1afe:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1b00:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1b02:	2313      	movs	r3, #19
    1b04:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1b06:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
    1b08:	2380      	movs	r3, #128	; 0x80
    1b0a:	035b      	lsls	r3, r3, #13
    1b0c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = SERCOMPAD0;
    1b0e:	4b1e      	ldr	r3, [pc, #120]	; (1b88 <configure_console+0xd0>)
    1b10:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = SERCOMPAD1;
    1b12:	4b1e      	ldr	r3, [pc, #120]	; (1b8c <configure_console+0xd4>)
    1b14:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = SERCOMPAD2;
    1b16:	2301      	movs	r3, #1
    1b18:	425b      	negs	r3, r3
    1b1a:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = SERCOMPAD3;
    1b1c:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
    1b1e:	4d1c      	ldr	r5, [pc, #112]	; (1b90 <configure_console+0xd8>)
    1b20:	4c1c      	ldr	r4, [pc, #112]	; (1b94 <configure_console+0xdc>)
    1b22:	466a      	mov	r2, sp
    1b24:	491c      	ldr	r1, [pc, #112]	; (1b98 <configure_console+0xe0>)
    1b26:	0028      	movs	r0, r5
    1b28:	47a0      	blx	r4
    1b2a:	2800      	cmp	r0, #0
    1b2c:	d1f9      	bne.n	1b22 <configure_console+0x6a>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1b2e:	4c18      	ldr	r4, [pc, #96]	; (1b90 <configure_console+0xd8>)
    1b30:	4b1a      	ldr	r3, [pc, #104]	; (1b9c <configure_console+0xe4>)
    1b32:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1b34:	4a1a      	ldr	r2, [pc, #104]	; (1ba0 <configure_console+0xe8>)
    1b36:	4b1b      	ldr	r3, [pc, #108]	; (1ba4 <configure_console+0xec>)
    1b38:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1b3a:	4a1b      	ldr	r2, [pc, #108]	; (1ba8 <configure_console+0xf0>)
    1b3c:	4b1b      	ldr	r3, [pc, #108]	; (1bac <configure_console+0xf4>)
    1b3e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1b40:	466a      	mov	r2, sp
    1b42:	4915      	ldr	r1, [pc, #84]	; (1b98 <configure_console+0xe0>)
    1b44:	0020      	movs	r0, r4
    1b46:	4b13      	ldr	r3, [pc, #76]	; (1b94 <configure_console+0xdc>)
    1b48:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1b4a:	4e19      	ldr	r6, [pc, #100]	; (1bb0 <configure_console+0xf8>)
    1b4c:	6833      	ldr	r3, [r6, #0]
    1b4e:	6898      	ldr	r0, [r3, #8]
    1b50:	2100      	movs	r1, #0
    1b52:	4d18      	ldr	r5, [pc, #96]	; (1bb4 <configure_console+0xfc>)
    1b54:	47a8      	blx	r5
	setbuf(stdin, NULL);
    1b56:	6833      	ldr	r3, [r6, #0]
    1b58:	6858      	ldr	r0, [r3, #4]
    1b5a:	2100      	movs	r1, #0
    1b5c:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b5e:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1b60:	0028      	movs	r0, r5
    1b62:	4b15      	ldr	r3, [pc, #84]	; (1bb8 <configure_console+0x100>)
    1b64:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b66:	231f      	movs	r3, #31
    1b68:	4018      	ands	r0, r3
    1b6a:	3b1e      	subs	r3, #30
    1b6c:	4083      	lsls	r3, r0
    1b6e:	4a13      	ldr	r2, [pc, #76]	; (1bbc <configure_console+0x104>)
    1b70:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b72:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b74:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1b76:	2b00      	cmp	r3, #0
    1b78:	d1fc      	bne.n	1b74 <configure_console+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1b7a:	682b      	ldr	r3, [r5, #0]
    1b7c:	2202      	movs	r2, #2
    1b7e:	4313      	orrs	r3, r2
    1b80:	602b      	str	r3, [r5, #0]

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
    1b82:	b010      	add	sp, #64	; 0x40
    1b84:	bd70      	pop	{r4, r5, r6, pc}
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	00080003 	.word	0x00080003
    1b8c:	00090003 	.word	0x00090003
    1b90:	200001b0 	.word	0x200001b0
    1b94:	00000bc1 	.word	0x00000bc1
    1b98:	42001000 	.word	0x42001000
    1b9c:	200001ac 	.word	0x200001ac
    1ba0:	00001aa1 	.word	0x00001aa1
    1ba4:	200001a8 	.word	0x200001a8
    1ba8:	00001a75 	.word	0x00001a75
    1bac:	200001a4 	.word	0x200001a4
    1bb0:	20000038 	.word	0x20000038
    1bb4:	00003fc1 	.word	0x00003fc1
    1bb8:	00000b31 	.word	0x00000b31
    1bbc:	e000e100 	.word	0xe000e100

00001bc0 <interruptInit>:
	}
}

/**************************INTERRUPT STUFF****************************/
void interruptInit()
{
    1bc0:	b510      	push	{r4, lr}
	// Configure SysTick to trigger every millisecond using the CPU Clock
	
	SysTick->CTRL = 0;					// Disable SysTick
    1bc2:	4a08      	ldr	r2, [pc, #32]	; (1be4 <interruptInit+0x24>)
    1bc4:	2000      	movs	r0, #0
    1bc6:	6010      	str	r0, [r2, #0]
	SysTick->LOAD = 999UL;				// Set reload register for 1mS interrupts
    1bc8:	4b07      	ldr	r3, [pc, #28]	; (1be8 <interruptInit+0x28>)
    1bca:	6053      	str	r3, [r2, #4]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1bcc:	4c07      	ldr	r4, [pc, #28]	; (1bec <interruptInit+0x2c>)
    1bce:	6a23      	ldr	r3, [r4, #32]
    1bd0:	021b      	lsls	r3, r3, #8
    1bd2:	0a1b      	lsrs	r3, r3, #8
    1bd4:	21c0      	movs	r1, #192	; 0xc0
    1bd6:	0609      	lsls	r1, r1, #24
    1bd8:	430b      	orrs	r3, r1
    1bda:	6223      	str	r3, [r4, #32]
	NVIC_SetPriority(SysTick_IRQn, 3);	// Set interrupt priority to least urgency
	SysTick->VAL = 0;					// Reset the SysTick counter value
    1bdc:	6090      	str	r0, [r2, #8]
	SysTick->CTRL = 0x00000007;			// Enable SysTick, Enable SysTick Exceptions, Use CPU Clock
    1bde:	2307      	movs	r3, #7
    1be0:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(SysTick_IRQn);		// Enable SysTick Interrupt
}
    1be2:	bd10      	pop	{r4, pc}
    1be4:	e000e010 	.word	0xe000e010
    1be8:	000003e7 	.word	0x000003e7
    1bec:	e000ed00 	.word	0xe000ed00

00001bf0 <configure_usart_USB>:



/**************************SERCOM STUFF*******************************/
void configure_usart_USB(void)
{
    1bf0:	b530      	push	{r4, r5, lr}
    1bf2:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    1bf4:	2380      	movs	r3, #128	; 0x80
    1bf6:	05db      	lsls	r3, r3, #23
    1bf8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1bfa:	2300      	movs	r3, #0
    1bfc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1bfe:	22ff      	movs	r2, #255	; 0xff
    1c00:	4669      	mov	r1, sp
    1c02:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1c04:	2200      	movs	r2, #0
    1c06:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1c08:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1c0a:	2196      	movs	r1, #150	; 0x96
    1c0c:	0189      	lsls	r1, r1, #6
    1c0e:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1c10:	2101      	movs	r1, #1
    1c12:	2024      	movs	r0, #36	; 0x24
    1c14:	466c      	mov	r4, sp
    1c16:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1c18:	3001      	adds	r0, #1
    1c1a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1c1c:	3125      	adds	r1, #37	; 0x25
    1c1e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1c20:	3101      	adds	r1, #1
    1c22:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1c24:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    1c26:	3105      	adds	r1, #5
    1c28:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1c2a:	3101      	adds	r1, #1
    1c2c:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1c2e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1c30:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    1c32:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    1c34:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    1c36:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    1c38:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1c3a:	2313      	movs	r3, #19
    1c3c:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    1c3e:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart_USB;
	usart_get_config_defaults(&config_usart_USB);

		config_usart_USB.baudrate    = 9600;
		config_usart_USB.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1c40:	2380      	movs	r3, #128	; 0x80
    1c42:	035b      	lsls	r3, r3, #13
    1c44:	9303      	str	r3, [sp, #12]
		config_usart_USB.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1c46:	4b12      	ldr	r3, [pc, #72]	; (1c90 <configure_usart_USB+0xa0>)
    1c48:	930c      	str	r3, [sp, #48]	; 0x30
		config_usart_USB.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1c4a:	4b12      	ldr	r3, [pc, #72]	; (1c94 <configure_usart_USB+0xa4>)
    1c4c:	930d      	str	r3, [sp, #52]	; 0x34
		config_usart_USB.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1c4e:	2301      	movs	r3, #1
    1c50:	425b      	negs	r3, r3
    1c52:	930e      	str	r3, [sp, #56]	; 0x38
		config_usart_USB.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1c54:	930f      	str	r3, [sp, #60]	; 0x3c
		while (usart_init(&usart_USB,
    1c56:	4d10      	ldr	r5, [pc, #64]	; (1c98 <configure_usart_USB+0xa8>)
    1c58:	4c10      	ldr	r4, [pc, #64]	; (1c9c <configure_usart_USB+0xac>)
    1c5a:	466a      	mov	r2, sp
    1c5c:	4910      	ldr	r1, [pc, #64]	; (1ca0 <configure_usart_USB+0xb0>)
    1c5e:	0028      	movs	r0, r5
    1c60:	47a0      	blx	r4
    1c62:	2800      	cmp	r0, #0
    1c64:	d1f9      	bne.n	1c5a <configure_usart_USB+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c66:	4d0c      	ldr	r5, [pc, #48]	; (1c98 <configure_usart_USB+0xa8>)
    1c68:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1c6a:	0020      	movs	r0, r4
    1c6c:	4b0d      	ldr	r3, [pc, #52]	; (1ca4 <configure_usart_USB+0xb4>)
    1c6e:	4798      	blx	r3
    1c70:	231f      	movs	r3, #31
    1c72:	4018      	ands	r0, r3
    1c74:	3b1e      	subs	r3, #30
    1c76:	4083      	lsls	r3, r0
    1c78:	4a0b      	ldr	r2, [pc, #44]	; (1ca8 <configure_usart_USB+0xb8>)
    1c7a:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c7c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1c7e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1c80:	2b00      	cmp	r3, #0
    1c82:	d1fc      	bne.n	1c7e <configure_usart_USB+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1c84:	6823      	ldr	r3, [r4, #0]
    1c86:	2202      	movs	r2, #2
    1c88:	4313      	orrs	r3, r2
    1c8a:	6023      	str	r3, [r4, #0]
		EDBG_CDC_MODULE, &config_usart_USB) != STATUS_OK) {
		}

	usart_enable(&usart_USB);
}
    1c8c:	b011      	add	sp, #68	; 0x44
    1c8e:	bd30      	pop	{r4, r5, pc}
    1c90:	00160002 	.word	0x00160002
    1c94:	00170002 	.word	0x00170002
    1c98:	200002b0 	.word	0x200002b0
    1c9c:	00000bc1 	.word	0x00000bc1
    1ca0:	42001400 	.word	0x42001400
    1ca4:	00000b31 	.word	0x00000b31
    1ca8:	e000e100 	.word	0xe000e100

00001cac <configure_adc>:

void configure_adc(void)
{
    1cac:	b510      	push	{r4, lr}
    1cae:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    1cb0:	4668      	mov	r0, sp
    1cb2:	4b11      	ldr	r3, [pc, #68]	; (1cf8 <configure_adc+0x4c>)
    1cb4:	4798      	blx	r3
	config_adc.positive_input = ADC_POSITIVE_INPUT_DAC;
    1cb6:	231c      	movs	r3, #28
    1cb8:	466a      	mov	r2, sp
    1cba:	7313      	strb	r3, [r2, #12]
	adc_init(&adc_instance, ADC, &config_adc);
    1cbc:	4c0f      	ldr	r4, [pc, #60]	; (1cfc <configure_adc+0x50>)
    1cbe:	4910      	ldr	r1, [pc, #64]	; (1d00 <configure_adc+0x54>)
    1cc0:	0020      	movs	r0, r4
    1cc2:	4b10      	ldr	r3, [pc, #64]	; (1d04 <configure_adc+0x58>)
    1cc4:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    1cc6:	6822      	ldr	r2, [r4, #0]
    1cc8:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1cca:	b25b      	sxtb	r3, r3
    1ccc:	2b00      	cmp	r3, #0
    1cce:	dbfb      	blt.n	1cc8 <configure_adc+0x1c>
    1cd0:	2180      	movs	r1, #128	; 0x80
    1cd2:	0409      	lsls	r1, r1, #16
    1cd4:	4b0c      	ldr	r3, [pc, #48]	; (1d08 <configure_adc+0x5c>)
    1cd6:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    1cd8:	230f      	movs	r3, #15
    1cda:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1cdc:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1cde:	7813      	ldrb	r3, [r2, #0]
    1ce0:	2102      	movs	r1, #2
    1ce2:	430b      	orrs	r3, r1
    1ce4:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    1ce6:	4b05      	ldr	r3, [pc, #20]	; (1cfc <configure_adc+0x50>)
    1ce8:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1cea:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1cec:	b25b      	sxtb	r3, r3
    1cee:	2b00      	cmp	r3, #0
    1cf0:	dbfb      	blt.n	1cea <configure_adc+0x3e>
	adc_enable(&adc_instance);
}
    1cf2:	b00c      	add	sp, #48	; 0x30
    1cf4:	bd10      	pop	{r4, pc}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	00000229 	.word	0x00000229
    1cfc:	200002e8 	.word	0x200002e8
    1d00:	42004000 	.word	0x42004000
    1d04:	0000026d 	.word	0x0000026d
    1d08:	e000e100 	.word	0xe000e100

00001d0c <readKeyboard>:
	}
}


void readKeyboard(void)
{
    1d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d0e:	46de      	mov	lr, fp
    1d10:	4657      	mov	r7, sl
    1d12:	464e      	mov	r6, r9
    1d14:	4645      	mov	r5, r8
    1d16:	b5e0      	push	{r5, r6, r7, lr}
    1d18:	b0c7      	sub	sp, #284	; 0x11c
	
	int scanCodeIndex = 0;
	int scanCodes[70];
	
	//Set strong drive on column
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    1d1a:	4bdf      	ldr	r3, [pc, #892]	; (2098 <STACK_SIZE+0x98>)
    1d1c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    1d1e:	2280      	movs	r2, #128	; 0x80
    1d20:	03d2      	lsls	r2, r2, #15
    1d22:	430a      	orrs	r2, r1
    1d24:	629a      	str	r2, [r3, #40]	; 0x28
	
	//Set all columns as output, low
	REG_PORT_DIRSET0 = KB_COL0;
    1d26:	4add      	ldr	r2, [pc, #884]	; (209c <STACK_SIZE+0x9c>)
    1d28:	2180      	movs	r1, #128	; 0x80
    1d2a:	0249      	lsls	r1, r1, #9
    1d2c:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL1;
    1d2e:	2780      	movs	r7, #128	; 0x80
    1d30:	02bf      	lsls	r7, r7, #10
    1d32:	6017      	str	r7, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL2;
    1d34:	2680      	movs	r6, #128	; 0x80
    1d36:	02f6      	lsls	r6, r6, #11
    1d38:	6016      	str	r6, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL3;
    1d3a:	2580      	movs	r5, #128	; 0x80
    1d3c:	032d      	lsls	r5, r5, #12
    1d3e:	6015      	str	r5, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL4;
    1d40:	2480      	movs	r4, #128	; 0x80
    1d42:	0364      	lsls	r4, r4, #13
    1d44:	6014      	str	r4, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL5;
    1d46:	2080      	movs	r0, #128	; 0x80
    1d48:	0380      	lsls	r0, r0, #14
    1d4a:	6010      	str	r0, [r2, #0]
	REG_PORT_DIRSET0 = KB_COL6;
    1d4c:	2180      	movs	r1, #128	; 0x80
    1d4e:	0509      	lsls	r1, r1, #20
    1d50:	468c      	mov	ip, r1
    1d52:	6011      	str	r1, [r2, #0]

	REG_PORT_OUTCLR0 = KB_COL0;
    1d54:	4ad2      	ldr	r2, [pc, #840]	; (20a0 <STACK_SIZE+0xa0>)
    1d56:	2180      	movs	r1, #128	; 0x80
    1d58:	0249      	lsls	r1, r1, #9
    1d5a:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL1;
    1d5c:	6017      	str	r7, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL2;
    1d5e:	6016      	str	r6, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL3;
    1d60:	6015      	str	r5, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL4;
    1d62:	6014      	str	r4, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL5;
    1d64:	6010      	str	r0, [r2, #0]
	REG_PORT_OUTCLR0 = KB_COL6;
    1d66:	4661      	mov	r1, ip
    1d68:	6011      	str	r1, [r2, #0]
	
	//set rows to input, pullup enabled
	REG_PORT_DIRCLR0 = KB_ROW0;
    1d6a:	4ace      	ldr	r2, [pc, #824]	; (20a4 <STACK_SIZE+0xa4>)
    1d6c:	2104      	movs	r1, #4
    1d6e:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_ROW1;
    1d70:	3104      	adds	r1, #4
    1d72:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_ROW2;
    1d74:	3108      	adds	r1, #8
    1d76:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_ROW3;
    1d78:	3110      	adds	r1, #16
    1d7a:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_ROW4;
    1d7c:	3120      	adds	r1, #32
    1d7e:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_ROW5;
    1d80:	3140      	adds	r1, #64	; 0x40
    1d82:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_ROW6;
    1d84:	2180      	movs	r1, #128	; 0x80
    1d86:	00c9      	lsls	r1, r1, #3
    1d88:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_ROW7;
    1d8a:	2180      	movs	r1, #128	; 0x80
    1d8c:	0109      	lsls	r1, r1, #4
    1d8e:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_ROW8;
    1d90:	2180      	movs	r1, #128	; 0x80
    1d92:	0149      	lsls	r1, r1, #5
    1d94:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_ROW9;
    1d96:	2180      	movs	r1, #128	; 0x80
    1d98:	0189      	lsls	r1, r1, #6
    1d9a:	6011      	str	r1, [r2, #0]
	
	PORT->Group[0].PINCFG[02].bit.PULLEN = 1;
    1d9c:	2242      	movs	r2, #66	; 0x42
    1d9e:	4692      	mov	sl, r2
    1da0:	5c99      	ldrb	r1, [r3, r2]
    1da2:	2204      	movs	r2, #4
    1da4:	4311      	orrs	r1, r2
    1da6:	4650      	mov	r0, sl
    1da8:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[03].bit.PULLEN = 1;
    1daa:	2143      	movs	r1, #67	; 0x43
    1dac:	4689      	mov	r9, r1
    1dae:	5c59      	ldrb	r1, [r3, r1]
    1db0:	4311      	orrs	r1, r2
    1db2:	4648      	mov	r0, r9
    1db4:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[04].bit.PULLEN = 1;
    1db6:	2144      	movs	r1, #68	; 0x44
    1db8:	4688      	mov	r8, r1
    1dba:	5c59      	ldrb	r1, [r3, r1]
    1dbc:	4311      	orrs	r1, r2
    1dbe:	4640      	mov	r0, r8
    1dc0:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[05].bit.PULLEN = 1;
    1dc2:	2145      	movs	r1, #69	; 0x45
    1dc4:	468c      	mov	ip, r1
    1dc6:	5c59      	ldrb	r1, [r3, r1]
    1dc8:	4311      	orrs	r1, r2
    1dca:	4660      	mov	r0, ip
    1dcc:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[06].bit.PULLEN = 1;
    1dce:	2746      	movs	r7, #70	; 0x46
    1dd0:	5dd9      	ldrb	r1, [r3, r7]
    1dd2:	4311      	orrs	r1, r2
    1dd4:	55d9      	strb	r1, [r3, r7]
	PORT->Group[0].PINCFG[07].bit.PULLEN = 1;
    1dd6:	2647      	movs	r6, #71	; 0x47
    1dd8:	5d99      	ldrb	r1, [r3, r6]
    1dda:	4311      	orrs	r1, r2
    1ddc:	5599      	strb	r1, [r3, r6]
	PORT->Group[0].PINCFG[10].bit.PULLEN = 1;
    1dde:	254a      	movs	r5, #74	; 0x4a
    1de0:	5d59      	ldrb	r1, [r3, r5]
    1de2:	4311      	orrs	r1, r2
    1de4:	5559      	strb	r1, [r3, r5]
	PORT->Group[0].PINCFG[11].bit.PULLEN = 1;
    1de6:	244b      	movs	r4, #75	; 0x4b
    1de8:	5d19      	ldrb	r1, [r3, r4]
    1dea:	4311      	orrs	r1, r2
    1dec:	5519      	strb	r1, [r3, r4]
	PORT->Group[0].PINCFG[12].bit.PULLEN = 1;
    1dee:	214c      	movs	r1, #76	; 0x4c
    1df0:	5c59      	ldrb	r1, [r3, r1]
    1df2:	4311      	orrs	r1, r2
    1df4:	3007      	adds	r0, #7
    1df6:	5419      	strb	r1, [r3, r0]
	PORT->Group[0].PINCFG[13].bit.PULLEN = 1;
    1df8:	214d      	movs	r1, #77	; 0x4d
    1dfa:	5c59      	ldrb	r1, [r3, r1]
    1dfc:	430a      	orrs	r2, r1
    1dfe:	214d      	movs	r1, #77	; 0x4d
    1e00:	545a      	strb	r2, [r3, r1]
	
	PORT->Group[0].PINCFG[02].bit.INEN = 1;
    1e02:	4652      	mov	r2, sl
    1e04:	5c9a      	ldrb	r2, [r3, r2]
    1e06:	4693      	mov	fp, r2
    1e08:	2202      	movs	r2, #2
    1e0a:	4659      	mov	r1, fp
    1e0c:	4311      	orrs	r1, r2
    1e0e:	468b      	mov	fp, r1
    1e10:	4651      	mov	r1, sl
    1e12:	4658      	mov	r0, fp
    1e14:	5458      	strb	r0, [r3, r1]
	PORT->Group[0].PINCFG[03].bit.INEN = 1;
    1e16:	4649      	mov	r1, r9
    1e18:	5c59      	ldrb	r1, [r3, r1]
    1e1a:	4311      	orrs	r1, r2
    1e1c:	468a      	mov	sl, r1
    1e1e:	4649      	mov	r1, r9
    1e20:	4650      	mov	r0, sl
    1e22:	5458      	strb	r0, [r3, r1]
	PORT->Group[0].PINCFG[04].bit.INEN = 1;
    1e24:	4641      	mov	r1, r8
    1e26:	5c59      	ldrb	r1, [r3, r1]
    1e28:	4311      	orrs	r1, r2
    1e2a:	4689      	mov	r9, r1
    1e2c:	4641      	mov	r1, r8
    1e2e:	4648      	mov	r0, r9
    1e30:	5458      	strb	r0, [r3, r1]
	PORT->Group[0].PINCFG[05].bit.INEN = 1;
    1e32:	4661      	mov	r1, ip
    1e34:	5c59      	ldrb	r1, [r3, r1]
    1e36:	4311      	orrs	r1, r2
    1e38:	4688      	mov	r8, r1
    1e3a:	4661      	mov	r1, ip
    1e3c:	4640      	mov	r0, r8
    1e3e:	5458      	strb	r0, [r3, r1]
	PORT->Group[0].PINCFG[06].bit.INEN = 1;
    1e40:	5dd9      	ldrb	r1, [r3, r7]
    1e42:	4311      	orrs	r1, r2
    1e44:	55d9      	strb	r1, [r3, r7]
	PORT->Group[0].PINCFG[07].bit.INEN = 1;
    1e46:	5d9f      	ldrb	r7, [r3, r6]
    1e48:	4317      	orrs	r7, r2
    1e4a:	559f      	strb	r7, [r3, r6]
	PORT->Group[0].PINCFG[10].bit.INEN = 1;
    1e4c:	5d5e      	ldrb	r6, [r3, r5]
    1e4e:	4316      	orrs	r6, r2
    1e50:	555e      	strb	r6, [r3, r5]
	PORT->Group[0].PINCFG[11].bit.INEN = 1;
    1e52:	5d1d      	ldrb	r5, [r3, r4]
    1e54:	4315      	orrs	r5, r2
    1e56:	551d      	strb	r5, [r3, r4]
	PORT->Group[0].PINCFG[12].bit.INEN = 1;
    1e58:	214c      	movs	r1, #76	; 0x4c
    1e5a:	5c5c      	ldrb	r4, [r3, r1]
    1e5c:	4314      	orrs	r4, r2
    1e5e:	545c      	strb	r4, [r3, r1]
	PORT->Group[0].PINCFG[13].bit.INEN = 1;
    1e60:	3101      	adds	r1, #1
    1e62:	5c58      	ldrb	r0, [r3, r1]
    1e64:	4302      	orrs	r2, r0
    1e66:	545a      	strb	r2, [r3, r1]
			
	//Step through columns, if high, save that column.
	//This is column 0
	REG_PORT_OUTSET0 = KB_COL0;
    1e68:	4a8f      	ldr	r2, [pc, #572]	; (20a8 <STACK_SIZE+0xa8>)
    1e6a:	2180      	movs	r1, #128	; 0x80
    1e6c:	0249      	lsls	r1, r1, #9
    1e6e:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    1e70:	6a1a      	ldr	r2, [r3, #32]
	int scanCodeIndex = 0;
    1e72:	2300      	movs	r3, #0
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    1e74:	2104      	movs	r1, #4
    1e76:	4211      	tst	r1, r2
    1e78:	d001      	beq.n	1e7e <readKeyboard+0x172>
	{
		scanCodes[scanCodeIndex] = 0; scanCodeIndex++;
    1e7a:	9300      	str	r3, [sp, #0]
    1e7c:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    1e7e:	4a86      	ldr	r2, [pc, #536]	; (2098 <STACK_SIZE+0x98>)
    1e80:	6a12      	ldr	r2, [r2, #32]
    1e82:	0712      	lsls	r2, r2, #28
    1e84:	d504      	bpl.n	1e90 <readKeyboard+0x184>
	{
		scanCodes[scanCodeIndex] = 1; scanCodeIndex++;
    1e86:	009a      	lsls	r2, r3, #2
    1e88:	2101      	movs	r1, #1
    1e8a:	4668      	mov	r0, sp
    1e8c:	5011      	str	r1, [r2, r0]
    1e8e:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    1e90:	4a81      	ldr	r2, [pc, #516]	; (2098 <STACK_SIZE+0x98>)
    1e92:	6a12      	ldr	r2, [r2, #32]
    1e94:	06d2      	lsls	r2, r2, #27
    1e96:	d504      	bpl.n	1ea2 <readKeyboard+0x196>
	{
		scanCodes[scanCodeIndex] = 2; scanCodeIndex++;
    1e98:	009a      	lsls	r2, r3, #2
    1e9a:	2102      	movs	r1, #2
    1e9c:	4668      	mov	r0, sp
    1e9e:	5011      	str	r1, [r2, r0]
    1ea0:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    1ea2:	4a7d      	ldr	r2, [pc, #500]	; (2098 <STACK_SIZE+0x98>)
    1ea4:	6a12      	ldr	r2, [r2, #32]
    1ea6:	0692      	lsls	r2, r2, #26
    1ea8:	d504      	bpl.n	1eb4 <readKeyboard+0x1a8>
	{
		scanCodes[scanCodeIndex] = 3; scanCodeIndex++;
    1eaa:	009a      	lsls	r2, r3, #2
    1eac:	2103      	movs	r1, #3
    1eae:	4668      	mov	r0, sp
    1eb0:	5011      	str	r1, [r2, r0]
    1eb2:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    1eb4:	4a78      	ldr	r2, [pc, #480]	; (2098 <STACK_SIZE+0x98>)
    1eb6:	6a12      	ldr	r2, [r2, #32]
    1eb8:	0652      	lsls	r2, r2, #25
    1eba:	d504      	bpl.n	1ec6 <readKeyboard+0x1ba>
	{
		scanCodes[scanCodeIndex] = 4; scanCodeIndex++;
    1ebc:	009a      	lsls	r2, r3, #2
    1ebe:	2104      	movs	r1, #4
    1ec0:	4668      	mov	r0, sp
    1ec2:	5011      	str	r1, [r2, r0]
    1ec4:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    1ec6:	4a74      	ldr	r2, [pc, #464]	; (2098 <STACK_SIZE+0x98>)
    1ec8:	6a12      	ldr	r2, [r2, #32]
    1eca:	0612      	lsls	r2, r2, #24
    1ecc:	d504      	bpl.n	1ed8 <readKeyboard+0x1cc>
	{
		scanCodes[scanCodeIndex] = 5; scanCodeIndex++;
    1ece:	009a      	lsls	r2, r3, #2
    1ed0:	2105      	movs	r1, #5
    1ed2:	4668      	mov	r0, sp
    1ed4:	5011      	str	r1, [r2, r0]
    1ed6:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    1ed8:	4a6f      	ldr	r2, [pc, #444]	; (2098 <STACK_SIZE+0x98>)
    1eda:	6a12      	ldr	r2, [r2, #32]
    1edc:	0552      	lsls	r2, r2, #21
    1ede:	d504      	bpl.n	1eea <readKeyboard+0x1de>
	{
		scanCodes[scanCodeIndex] = 6; scanCodeIndex++;
    1ee0:	009a      	lsls	r2, r3, #2
    1ee2:	2106      	movs	r1, #6
    1ee4:	4668      	mov	r0, sp
    1ee6:	5011      	str	r1, [r2, r0]
    1ee8:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    1eea:	4a6b      	ldr	r2, [pc, #428]	; (2098 <STACK_SIZE+0x98>)
    1eec:	6a12      	ldr	r2, [r2, #32]
    1eee:	0512      	lsls	r2, r2, #20
    1ef0:	d504      	bpl.n	1efc <readKeyboard+0x1f0>
	{
		scanCodes[scanCodeIndex] = 7; scanCodeIndex++;
    1ef2:	009a      	lsls	r2, r3, #2
    1ef4:	2107      	movs	r1, #7
    1ef6:	4668      	mov	r0, sp
    1ef8:	5011      	str	r1, [r2, r0]
    1efa:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    1efc:	4a66      	ldr	r2, [pc, #408]	; (2098 <STACK_SIZE+0x98>)
    1efe:	6a12      	ldr	r2, [r2, #32]
    1f00:	04d2      	lsls	r2, r2, #19
    1f02:	d504      	bpl.n	1f0e <readKeyboard+0x202>
	{
		scanCodes[scanCodeIndex] = 8; scanCodeIndex++;
    1f04:	009a      	lsls	r2, r3, #2
    1f06:	2108      	movs	r1, #8
    1f08:	4668      	mov	r0, sp
    1f0a:	5011      	str	r1, [r2, r0]
    1f0c:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    1f0e:	4a62      	ldr	r2, [pc, #392]	; (2098 <STACK_SIZE+0x98>)
    1f10:	6a12      	ldr	r2, [r2, #32]
    1f12:	0492      	lsls	r2, r2, #18
    1f14:	d504      	bpl.n	1f20 <readKeyboard+0x214>
	{
		scanCodes[scanCodeIndex] = 9; scanCodeIndex++;
    1f16:	009a      	lsls	r2, r3, #2
    1f18:	2109      	movs	r1, #9
    1f1a:	4668      	mov	r0, sp
    1f1c:	5011      	str	r1, [r2, r0]
    1f1e:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_COL0;
    1f20:	2180      	movs	r1, #128	; 0x80
    1f22:	0249      	lsls	r1, r1, #9
    1f24:	4a5e      	ldr	r2, [pc, #376]	; (20a0 <STACK_SIZE+0xa0>)
    1f26:	6011      	str	r1, [r2, #0]
	
	//This is column 1
	REG_PORT_OUTSET0 = KB_COL1;
    1f28:	2180      	movs	r1, #128	; 0x80
    1f2a:	0289      	lsls	r1, r1, #10
    1f2c:	4a5e      	ldr	r2, [pc, #376]	; (20a8 <STACK_SIZE+0xa8>)
    1f2e:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    1f30:	4a59      	ldr	r2, [pc, #356]	; (2098 <STACK_SIZE+0x98>)
    1f32:	6a12      	ldr	r2, [r2, #32]
    1f34:	0752      	lsls	r2, r2, #29
    1f36:	d504      	bpl.n	1f42 <readKeyboard+0x236>
	{
		scanCodes[scanCodeIndex] = 10; scanCodeIndex++;
    1f38:	009a      	lsls	r2, r3, #2
    1f3a:	210a      	movs	r1, #10
    1f3c:	4668      	mov	r0, sp
    1f3e:	5011      	str	r1, [r2, r0]
    1f40:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    1f42:	4a55      	ldr	r2, [pc, #340]	; (2098 <STACK_SIZE+0x98>)
    1f44:	6a12      	ldr	r2, [r2, #32]
    1f46:	0712      	lsls	r2, r2, #28
    1f48:	d504      	bpl.n	1f54 <readKeyboard+0x248>
	{
		scanCodes[scanCodeIndex] = 11; scanCodeIndex++;
    1f4a:	009a      	lsls	r2, r3, #2
    1f4c:	210b      	movs	r1, #11
    1f4e:	4668      	mov	r0, sp
    1f50:	5011      	str	r1, [r2, r0]
    1f52:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    1f54:	4a50      	ldr	r2, [pc, #320]	; (2098 <STACK_SIZE+0x98>)
    1f56:	6a12      	ldr	r2, [r2, #32]
    1f58:	06d2      	lsls	r2, r2, #27
    1f5a:	d504      	bpl.n	1f66 <readKeyboard+0x25a>
	{
		scanCodes[scanCodeIndex] = 12; scanCodeIndex++;
    1f5c:	009a      	lsls	r2, r3, #2
    1f5e:	210c      	movs	r1, #12
    1f60:	4668      	mov	r0, sp
    1f62:	5011      	str	r1, [r2, r0]
    1f64:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    1f66:	4a4c      	ldr	r2, [pc, #304]	; (2098 <STACK_SIZE+0x98>)
    1f68:	6a12      	ldr	r2, [r2, #32]
    1f6a:	0692      	lsls	r2, r2, #26
    1f6c:	d504      	bpl.n	1f78 <readKeyboard+0x26c>
	{
		scanCodes[scanCodeIndex] = 13; scanCodeIndex++;
    1f6e:	009a      	lsls	r2, r3, #2
    1f70:	210d      	movs	r1, #13
    1f72:	4668      	mov	r0, sp
    1f74:	5011      	str	r1, [r2, r0]
    1f76:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    1f78:	4a47      	ldr	r2, [pc, #284]	; (2098 <STACK_SIZE+0x98>)
    1f7a:	6a12      	ldr	r2, [r2, #32]
    1f7c:	0652      	lsls	r2, r2, #25
    1f7e:	d504      	bpl.n	1f8a <readKeyboard+0x27e>
	{
		scanCodes[scanCodeIndex] = 14; scanCodeIndex++;
    1f80:	009a      	lsls	r2, r3, #2
    1f82:	210e      	movs	r1, #14
    1f84:	4668      	mov	r0, sp
    1f86:	5011      	str	r1, [r2, r0]
    1f88:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    1f8a:	4a43      	ldr	r2, [pc, #268]	; (2098 <STACK_SIZE+0x98>)
    1f8c:	6a12      	ldr	r2, [r2, #32]
    1f8e:	0612      	lsls	r2, r2, #24
    1f90:	d504      	bpl.n	1f9c <readKeyboard+0x290>
	{
		scanCodes[scanCodeIndex] = 15; scanCodeIndex++;
    1f92:	009a      	lsls	r2, r3, #2
    1f94:	210f      	movs	r1, #15
    1f96:	4668      	mov	r0, sp
    1f98:	5011      	str	r1, [r2, r0]
    1f9a:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    1f9c:	4a3e      	ldr	r2, [pc, #248]	; (2098 <STACK_SIZE+0x98>)
    1f9e:	6a12      	ldr	r2, [r2, #32]
    1fa0:	0552      	lsls	r2, r2, #21
    1fa2:	d504      	bpl.n	1fae <readKeyboard+0x2a2>
	{
		scanCodes[scanCodeIndex] = 16; scanCodeIndex++;
    1fa4:	009a      	lsls	r2, r3, #2
    1fa6:	2110      	movs	r1, #16
    1fa8:	4668      	mov	r0, sp
    1faa:	5011      	str	r1, [r2, r0]
    1fac:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    1fae:	4a3a      	ldr	r2, [pc, #232]	; (2098 <STACK_SIZE+0x98>)
    1fb0:	6a12      	ldr	r2, [r2, #32]
    1fb2:	0512      	lsls	r2, r2, #20
    1fb4:	d504      	bpl.n	1fc0 <readKeyboard+0x2b4>
	{
		scanCodes[scanCodeIndex] = 17; scanCodeIndex++;
    1fb6:	009a      	lsls	r2, r3, #2
    1fb8:	2111      	movs	r1, #17
    1fba:	4668      	mov	r0, sp
    1fbc:	5011      	str	r1, [r2, r0]
    1fbe:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    1fc0:	4a35      	ldr	r2, [pc, #212]	; (2098 <STACK_SIZE+0x98>)
    1fc2:	6a12      	ldr	r2, [r2, #32]
    1fc4:	04d2      	lsls	r2, r2, #19
    1fc6:	d504      	bpl.n	1fd2 <readKeyboard+0x2c6>
	{
		scanCodes[scanCodeIndex] = 18; scanCodeIndex++;
    1fc8:	009a      	lsls	r2, r3, #2
    1fca:	2112      	movs	r1, #18
    1fcc:	4668      	mov	r0, sp
    1fce:	5011      	str	r1, [r2, r0]
    1fd0:	3301      	adds	r3, #1
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
	{
		scanCodes[scanCodeIndex] = 19; scanCodeIndex++;
	}
	*/
	REG_PORT_OUTCLR0 = KB_COL1;
    1fd2:	2180      	movs	r1, #128	; 0x80
    1fd4:	0289      	lsls	r1, r1, #10
    1fd6:	4a32      	ldr	r2, [pc, #200]	; (20a0 <STACK_SIZE+0xa0>)
    1fd8:	6011      	str	r1, [r2, #0]
	
	//This is column 2
	REG_PORT_OUTSET0 = KB_COL2;
    1fda:	2180      	movs	r1, #128	; 0x80
    1fdc:	02c9      	lsls	r1, r1, #11
    1fde:	4a32      	ldr	r2, [pc, #200]	; (20a8 <STACK_SIZE+0xa8>)
    1fe0:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    1fe2:	4a2d      	ldr	r2, [pc, #180]	; (2098 <STACK_SIZE+0x98>)
    1fe4:	6a12      	ldr	r2, [r2, #32]
    1fe6:	0752      	lsls	r2, r2, #29
    1fe8:	d504      	bpl.n	1ff4 <readKeyboard+0x2e8>
	{
		scanCodes[scanCodeIndex] = 20; scanCodeIndex++;
    1fea:	009a      	lsls	r2, r3, #2
    1fec:	2114      	movs	r1, #20
    1fee:	4668      	mov	r0, sp
    1ff0:	5011      	str	r1, [r2, r0]
    1ff2:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    1ff4:	4a28      	ldr	r2, [pc, #160]	; (2098 <STACK_SIZE+0x98>)
    1ff6:	6a12      	ldr	r2, [r2, #32]
    1ff8:	0712      	lsls	r2, r2, #28
    1ffa:	d504      	bpl.n	2006 <STACK_SIZE+0x6>
	{
		scanCodes[scanCodeIndex] = 21; scanCodeIndex++;
    1ffc:	009a      	lsls	r2, r3, #2
    1ffe:	2115      	movs	r1, #21
    2000:	4668      	mov	r0, sp
    2002:	5011      	str	r1, [r2, r0]
    2004:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    2006:	4a24      	ldr	r2, [pc, #144]	; (2098 <STACK_SIZE+0x98>)
    2008:	6a12      	ldr	r2, [r2, #32]
    200a:	06d2      	lsls	r2, r2, #27
    200c:	d504      	bpl.n	2018 <STACK_SIZE+0x18>
	{
		scanCodes[scanCodeIndex] = 22; scanCodeIndex++;
    200e:	009a      	lsls	r2, r3, #2
    2010:	2116      	movs	r1, #22
    2012:	4668      	mov	r0, sp
    2014:	5011      	str	r1, [r2, r0]
    2016:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    2018:	4a1f      	ldr	r2, [pc, #124]	; (2098 <STACK_SIZE+0x98>)
    201a:	6a12      	ldr	r2, [r2, #32]
    201c:	0692      	lsls	r2, r2, #26
    201e:	d504      	bpl.n	202a <STACK_SIZE+0x2a>
	{
		scanCodes[scanCodeIndex] = 23; scanCodeIndex++;
    2020:	009a      	lsls	r2, r3, #2
    2022:	2117      	movs	r1, #23
    2024:	4668      	mov	r0, sp
    2026:	5011      	str	r1, [r2, r0]
    2028:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    202a:	4a1b      	ldr	r2, [pc, #108]	; (2098 <STACK_SIZE+0x98>)
    202c:	6a12      	ldr	r2, [r2, #32]
    202e:	0652      	lsls	r2, r2, #25
    2030:	d504      	bpl.n	203c <STACK_SIZE+0x3c>
	{
		scanCodes[scanCodeIndex] = 24; scanCodeIndex++;
    2032:	009a      	lsls	r2, r3, #2
    2034:	2118      	movs	r1, #24
    2036:	4668      	mov	r0, sp
    2038:	5011      	str	r1, [r2, r0]
    203a:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    203c:	4a16      	ldr	r2, [pc, #88]	; (2098 <STACK_SIZE+0x98>)
    203e:	6a12      	ldr	r2, [r2, #32]
    2040:	0612      	lsls	r2, r2, #24
    2042:	d504      	bpl.n	204e <STACK_SIZE+0x4e>
	{
		scanCodes[scanCodeIndex] = 25; scanCodeIndex++;
    2044:	009a      	lsls	r2, r3, #2
    2046:	2119      	movs	r1, #25
    2048:	4668      	mov	r0, sp
    204a:	5011      	str	r1, [r2, r0]
    204c:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    204e:	4a12      	ldr	r2, [pc, #72]	; (2098 <STACK_SIZE+0x98>)
    2050:	6a12      	ldr	r2, [r2, #32]
    2052:	0552      	lsls	r2, r2, #21
    2054:	d504      	bpl.n	2060 <STACK_SIZE+0x60>
	{
		scanCodes[scanCodeIndex] = 26; scanCodeIndex++;
    2056:	009a      	lsls	r2, r3, #2
    2058:	211a      	movs	r1, #26
    205a:	4668      	mov	r0, sp
    205c:	5011      	str	r1, [r2, r0]
    205e:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    2060:	4a0d      	ldr	r2, [pc, #52]	; (2098 <STACK_SIZE+0x98>)
    2062:	6a12      	ldr	r2, [r2, #32]
    2064:	0512      	lsls	r2, r2, #20
    2066:	d504      	bpl.n	2072 <STACK_SIZE+0x72>
	{
		scanCodes[scanCodeIndex] = 27; scanCodeIndex++;
    2068:	009a      	lsls	r2, r3, #2
    206a:	211b      	movs	r1, #27
    206c:	4668      	mov	r0, sp
    206e:	5011      	str	r1, [r2, r0]
    2070:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    2072:	4a09      	ldr	r2, [pc, #36]	; (2098 <STACK_SIZE+0x98>)
    2074:	6a12      	ldr	r2, [r2, #32]
    2076:	04d2      	lsls	r2, r2, #19
    2078:	d504      	bpl.n	2084 <STACK_SIZE+0x84>
	{
		scanCodes[scanCodeIndex] = 28; scanCodeIndex++;
    207a:	009a      	lsls	r2, r3, #2
    207c:	211c      	movs	r1, #28
    207e:	4668      	mov	r0, sp
    2080:	5011      	str	r1, [r2, r0]
    2082:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    2084:	4a04      	ldr	r2, [pc, #16]	; (2098 <STACK_SIZE+0x98>)
    2086:	6a12      	ldr	r2, [r2, #32]
    2088:	0492      	lsls	r2, r2, #18
    208a:	d50f      	bpl.n	20ac <STACK_SIZE+0xac>
	{
		scanCodes[scanCodeIndex] = 29; scanCodeIndex++;
    208c:	009a      	lsls	r2, r3, #2
    208e:	211d      	movs	r1, #29
    2090:	4668      	mov	r0, sp
    2092:	5011      	str	r1, [r2, r0]
    2094:	3301      	adds	r3, #1
    2096:	e009      	b.n	20ac <STACK_SIZE+0xac>
    2098:	41004400 	.word	0x41004400
    209c:	41004408 	.word	0x41004408
    20a0:	41004414 	.word	0x41004414
    20a4:	41004404 	.word	0x41004404
    20a8:	41004418 	.word	0x41004418
	}
	REG_PORT_OUTCLR0 = KB_COL2;
    20ac:	2180      	movs	r1, #128	; 0x80
    20ae:	02c9      	lsls	r1, r1, #11
    20b0:	4ad6      	ldr	r2, [pc, #856]	; (240c <STACK_SIZE+0x40c>)
    20b2:	6011      	str	r1, [r2, #0]
	
	//This is column 3
	REG_PORT_OUTSET0 = KB_COL3;
    20b4:	2180      	movs	r1, #128	; 0x80
    20b6:	0309      	lsls	r1, r1, #12
    20b8:	4ad5      	ldr	r2, [pc, #852]	; (2410 <STACK_SIZE+0x410>)
    20ba:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    20bc:	4ad5      	ldr	r2, [pc, #852]	; (2414 <STACK_SIZE+0x414>)
    20be:	6a12      	ldr	r2, [r2, #32]
    20c0:	0752      	lsls	r2, r2, #29
    20c2:	d504      	bpl.n	20ce <STACK_SIZE+0xce>
	{
		scanCodes[scanCodeIndex] = 30; scanCodeIndex++;
    20c4:	009a      	lsls	r2, r3, #2
    20c6:	211e      	movs	r1, #30
    20c8:	4668      	mov	r0, sp
    20ca:	5011      	str	r1, [r2, r0]
    20cc:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    20ce:	4ad1      	ldr	r2, [pc, #836]	; (2414 <STACK_SIZE+0x414>)
    20d0:	6a12      	ldr	r2, [r2, #32]
    20d2:	0712      	lsls	r2, r2, #28
    20d4:	d504      	bpl.n	20e0 <STACK_SIZE+0xe0>
	{
		scanCodes[scanCodeIndex] = 31; scanCodeIndex++;
    20d6:	009a      	lsls	r2, r3, #2
    20d8:	211f      	movs	r1, #31
    20da:	4668      	mov	r0, sp
    20dc:	5011      	str	r1, [r2, r0]
    20de:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    20e0:	4acc      	ldr	r2, [pc, #816]	; (2414 <STACK_SIZE+0x414>)
    20e2:	6a12      	ldr	r2, [r2, #32]
    20e4:	06d2      	lsls	r2, r2, #27
    20e6:	d504      	bpl.n	20f2 <STACK_SIZE+0xf2>
	{
		scanCodes[scanCodeIndex] = 32; scanCodeIndex++;
    20e8:	009a      	lsls	r2, r3, #2
    20ea:	2120      	movs	r1, #32
    20ec:	4668      	mov	r0, sp
    20ee:	5011      	str	r1, [r2, r0]
    20f0:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    20f2:	4ac8      	ldr	r2, [pc, #800]	; (2414 <STACK_SIZE+0x414>)
    20f4:	6a12      	ldr	r2, [r2, #32]
    20f6:	0692      	lsls	r2, r2, #26
    20f8:	d504      	bpl.n	2104 <STACK_SIZE+0x104>
	{
		scanCodes[scanCodeIndex] = 33; scanCodeIndex++;
    20fa:	009a      	lsls	r2, r3, #2
    20fc:	2121      	movs	r1, #33	; 0x21
    20fe:	4668      	mov	r0, sp
    2100:	5011      	str	r1, [r2, r0]
    2102:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    2104:	4ac3      	ldr	r2, [pc, #780]	; (2414 <STACK_SIZE+0x414>)
    2106:	6a12      	ldr	r2, [r2, #32]
    2108:	0652      	lsls	r2, r2, #25
    210a:	d504      	bpl.n	2116 <STACK_SIZE+0x116>
	{
		scanCodes[scanCodeIndex] = 34; scanCodeIndex++;
    210c:	009a      	lsls	r2, r3, #2
    210e:	2122      	movs	r1, #34	; 0x22
    2110:	4668      	mov	r0, sp
    2112:	5011      	str	r1, [r2, r0]
    2114:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    2116:	4abf      	ldr	r2, [pc, #764]	; (2414 <STACK_SIZE+0x414>)
    2118:	6a12      	ldr	r2, [r2, #32]
    211a:	0612      	lsls	r2, r2, #24
    211c:	d504      	bpl.n	2128 <STACK_SIZE+0x128>
	{
		scanCodes[scanCodeIndex] = 35; scanCodeIndex++;
    211e:	009a      	lsls	r2, r3, #2
    2120:	2123      	movs	r1, #35	; 0x23
    2122:	4668      	mov	r0, sp
    2124:	5011      	str	r1, [r2, r0]
    2126:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    2128:	4aba      	ldr	r2, [pc, #744]	; (2414 <STACK_SIZE+0x414>)
    212a:	6a12      	ldr	r2, [r2, #32]
    212c:	0552      	lsls	r2, r2, #21
    212e:	d504      	bpl.n	213a <STACK_SIZE+0x13a>
	{
		scanCodes[scanCodeIndex] = 36; scanCodeIndex++;
    2130:	009a      	lsls	r2, r3, #2
    2132:	2124      	movs	r1, #36	; 0x24
    2134:	4668      	mov	r0, sp
    2136:	5011      	str	r1, [r2, r0]
    2138:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    213a:	4ab6      	ldr	r2, [pc, #728]	; (2414 <STACK_SIZE+0x414>)
    213c:	6a12      	ldr	r2, [r2, #32]
    213e:	0512      	lsls	r2, r2, #20
    2140:	d504      	bpl.n	214c <STACK_SIZE+0x14c>
	{
		scanCodes[scanCodeIndex] = 37; scanCodeIndex++;
    2142:	009a      	lsls	r2, r3, #2
    2144:	2125      	movs	r1, #37	; 0x25
    2146:	4668      	mov	r0, sp
    2148:	5011      	str	r1, [r2, r0]
    214a:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    214c:	4ab1      	ldr	r2, [pc, #708]	; (2414 <STACK_SIZE+0x414>)
    214e:	6a12      	ldr	r2, [r2, #32]
    2150:	04d2      	lsls	r2, r2, #19
    2152:	d504      	bpl.n	215e <STACK_SIZE+0x15e>
	{
		scanCodes[scanCodeIndex] = 38; scanCodeIndex++;
    2154:	009a      	lsls	r2, r3, #2
    2156:	2126      	movs	r1, #38	; 0x26
    2158:	4668      	mov	r0, sp
    215a:	5011      	str	r1, [r2, r0]
    215c:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    215e:	4aad      	ldr	r2, [pc, #692]	; (2414 <STACK_SIZE+0x414>)
    2160:	6a12      	ldr	r2, [r2, #32]
    2162:	0492      	lsls	r2, r2, #18
    2164:	d504      	bpl.n	2170 <STACK_SIZE+0x170>
	{
		scanCodes[scanCodeIndex] = 39; scanCodeIndex++;
    2166:	009a      	lsls	r2, r3, #2
    2168:	2127      	movs	r1, #39	; 0x27
    216a:	4668      	mov	r0, sp
    216c:	5011      	str	r1, [r2, r0]
    216e:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_COL3;
    2170:	2180      	movs	r1, #128	; 0x80
    2172:	0309      	lsls	r1, r1, #12
    2174:	4aa5      	ldr	r2, [pc, #660]	; (240c <STACK_SIZE+0x40c>)
    2176:	6011      	str	r1, [r2, #0]
	
	//This is column 4
	REG_PORT_OUTSET0 = KB_COL4;
    2178:	2180      	movs	r1, #128	; 0x80
    217a:	0349      	lsls	r1, r1, #13
    217c:	4aa4      	ldr	r2, [pc, #656]	; (2410 <STACK_SIZE+0x410>)
    217e:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    2180:	4aa4      	ldr	r2, [pc, #656]	; (2414 <STACK_SIZE+0x414>)
    2182:	6a12      	ldr	r2, [r2, #32]
    2184:	0752      	lsls	r2, r2, #29
    2186:	d504      	bpl.n	2192 <STACK_SIZE+0x192>
	{
		scanCodes[scanCodeIndex] = 40; scanCodeIndex++;
    2188:	009a      	lsls	r2, r3, #2
    218a:	2128      	movs	r1, #40	; 0x28
    218c:	4668      	mov	r0, sp
    218e:	5011      	str	r1, [r2, r0]
    2190:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    2192:	4aa0      	ldr	r2, [pc, #640]	; (2414 <STACK_SIZE+0x414>)
    2194:	6a12      	ldr	r2, [r2, #32]
    2196:	0712      	lsls	r2, r2, #28
    2198:	d504      	bpl.n	21a4 <STACK_SIZE+0x1a4>
	{
		scanCodes[scanCodeIndex] = 41; scanCodeIndex++;
    219a:	009a      	lsls	r2, r3, #2
    219c:	2129      	movs	r1, #41	; 0x29
    219e:	4668      	mov	r0, sp
    21a0:	5011      	str	r1, [r2, r0]
    21a2:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    21a4:	4a9b      	ldr	r2, [pc, #620]	; (2414 <STACK_SIZE+0x414>)
    21a6:	6a12      	ldr	r2, [r2, #32]
    21a8:	06d2      	lsls	r2, r2, #27
    21aa:	d504      	bpl.n	21b6 <STACK_SIZE+0x1b6>
	{
		scanCodes[scanCodeIndex] = 42; scanCodeIndex++;
    21ac:	009a      	lsls	r2, r3, #2
    21ae:	212a      	movs	r1, #42	; 0x2a
    21b0:	4668      	mov	r0, sp
    21b2:	5011      	str	r1, [r2, r0]
    21b4:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    21b6:	4a97      	ldr	r2, [pc, #604]	; (2414 <STACK_SIZE+0x414>)
    21b8:	6a12      	ldr	r2, [r2, #32]
    21ba:	0692      	lsls	r2, r2, #26
    21bc:	d504      	bpl.n	21c8 <STACK_SIZE+0x1c8>
	{
		scanCodes[scanCodeIndex] = 43; scanCodeIndex++;
    21be:	009a      	lsls	r2, r3, #2
    21c0:	212b      	movs	r1, #43	; 0x2b
    21c2:	4668      	mov	r0, sp
    21c4:	5011      	str	r1, [r2, r0]
    21c6:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    21c8:	4a92      	ldr	r2, [pc, #584]	; (2414 <STACK_SIZE+0x414>)
    21ca:	6a12      	ldr	r2, [r2, #32]
    21cc:	0652      	lsls	r2, r2, #25
    21ce:	d504      	bpl.n	21da <STACK_SIZE+0x1da>
	{
		scanCodes[scanCodeIndex] = 44; scanCodeIndex++;
    21d0:	009a      	lsls	r2, r3, #2
    21d2:	212c      	movs	r1, #44	; 0x2c
    21d4:	4668      	mov	r0, sp
    21d6:	5011      	str	r1, [r2, r0]
    21d8:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    21da:	4a8e      	ldr	r2, [pc, #568]	; (2414 <STACK_SIZE+0x414>)
    21dc:	6a12      	ldr	r2, [r2, #32]
    21de:	0612      	lsls	r2, r2, #24
    21e0:	d504      	bpl.n	21ec <STACK_SIZE+0x1ec>
	{
		scanCodes[scanCodeIndex] = 45; scanCodeIndex++;
    21e2:	009a      	lsls	r2, r3, #2
    21e4:	212d      	movs	r1, #45	; 0x2d
    21e6:	4668      	mov	r0, sp
    21e8:	5011      	str	r1, [r2, r0]
    21ea:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    21ec:	4a89      	ldr	r2, [pc, #548]	; (2414 <STACK_SIZE+0x414>)
    21ee:	6a12      	ldr	r2, [r2, #32]
    21f0:	0552      	lsls	r2, r2, #21
    21f2:	d504      	bpl.n	21fe <STACK_SIZE+0x1fe>
	{
		scanCodes[scanCodeIndex] = 46; scanCodeIndex++;
    21f4:	009a      	lsls	r2, r3, #2
    21f6:	212e      	movs	r1, #46	; 0x2e
    21f8:	4668      	mov	r0, sp
    21fa:	5011      	str	r1, [r2, r0]
    21fc:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    21fe:	4a85      	ldr	r2, [pc, #532]	; (2414 <STACK_SIZE+0x414>)
    2200:	6a12      	ldr	r2, [r2, #32]
    2202:	0512      	lsls	r2, r2, #20
    2204:	d504      	bpl.n	2210 <STACK_SIZE+0x210>
	{
		scanCodes[scanCodeIndex] = 47; scanCodeIndex++;
    2206:	009a      	lsls	r2, r3, #2
    2208:	212f      	movs	r1, #47	; 0x2f
    220a:	4668      	mov	r0, sp
    220c:	5011      	str	r1, [r2, r0]
    220e:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    2210:	4a80      	ldr	r2, [pc, #512]	; (2414 <STACK_SIZE+0x414>)
    2212:	6a12      	ldr	r2, [r2, #32]
    2214:	04d2      	lsls	r2, r2, #19
    2216:	d504      	bpl.n	2222 <STACK_SIZE+0x222>
	{
		scanCodes[scanCodeIndex] = 48; scanCodeIndex++;
    2218:	009a      	lsls	r2, r3, #2
    221a:	2130      	movs	r1, #48	; 0x30
    221c:	4668      	mov	r0, sp
    221e:	5011      	str	r1, [r2, r0]
    2220:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    2222:	4a7c      	ldr	r2, [pc, #496]	; (2414 <STACK_SIZE+0x414>)
    2224:	6a12      	ldr	r2, [r2, #32]
    2226:	0492      	lsls	r2, r2, #18
    2228:	d504      	bpl.n	2234 <STACK_SIZE+0x234>
	{
		scanCodes[scanCodeIndex] = 49; scanCodeIndex++;
    222a:	009a      	lsls	r2, r3, #2
    222c:	2131      	movs	r1, #49	; 0x31
    222e:	4668      	mov	r0, sp
    2230:	5011      	str	r1, [r2, r0]
    2232:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_COL4;
    2234:	2180      	movs	r1, #128	; 0x80
    2236:	0349      	lsls	r1, r1, #13
    2238:	4a74      	ldr	r2, [pc, #464]	; (240c <STACK_SIZE+0x40c>)
    223a:	6011      	str	r1, [r2, #0]
	
	//This is column 5
	REG_PORT_OUTSET0 = KB_COL5;
    223c:	2180      	movs	r1, #128	; 0x80
    223e:	0389      	lsls	r1, r1, #14
    2240:	4a73      	ldr	r2, [pc, #460]	; (2410 <STACK_SIZE+0x410>)
    2242:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    2244:	4a73      	ldr	r2, [pc, #460]	; (2414 <STACK_SIZE+0x414>)
    2246:	6a12      	ldr	r2, [r2, #32]
    2248:	0752      	lsls	r2, r2, #29
    224a:	d504      	bpl.n	2256 <STACK_SIZE+0x256>
	{
		scanCodes[scanCodeIndex] = 50; scanCodeIndex++;
    224c:	009a      	lsls	r2, r3, #2
    224e:	2132      	movs	r1, #50	; 0x32
    2250:	4668      	mov	r0, sp
    2252:	5011      	str	r1, [r2, r0]
    2254:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    2256:	4a6f      	ldr	r2, [pc, #444]	; (2414 <STACK_SIZE+0x414>)
    2258:	6a12      	ldr	r2, [r2, #32]
    225a:	0712      	lsls	r2, r2, #28
    225c:	d504      	bpl.n	2268 <STACK_SIZE+0x268>
	{
		scanCodes[scanCodeIndex] = 51; scanCodeIndex++;
    225e:	009a      	lsls	r2, r3, #2
    2260:	2133      	movs	r1, #51	; 0x33
    2262:	4668      	mov	r0, sp
    2264:	5011      	str	r1, [r2, r0]
    2266:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    2268:	4a6a      	ldr	r2, [pc, #424]	; (2414 <STACK_SIZE+0x414>)
    226a:	6a12      	ldr	r2, [r2, #32]
    226c:	06d2      	lsls	r2, r2, #27
    226e:	d504      	bpl.n	227a <STACK_SIZE+0x27a>
	{
		scanCodes[scanCodeIndex] = 52; scanCodeIndex++;
    2270:	009a      	lsls	r2, r3, #2
    2272:	2134      	movs	r1, #52	; 0x34
    2274:	4668      	mov	r0, sp
    2276:	5011      	str	r1, [r2, r0]
    2278:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    227a:	4a66      	ldr	r2, [pc, #408]	; (2414 <STACK_SIZE+0x414>)
    227c:	6a12      	ldr	r2, [r2, #32]
    227e:	0692      	lsls	r2, r2, #26
    2280:	d504      	bpl.n	228c <STACK_SIZE+0x28c>
	{
		scanCodes[scanCodeIndex] = 53; scanCodeIndex++;
    2282:	009a      	lsls	r2, r3, #2
    2284:	2135      	movs	r1, #53	; 0x35
    2286:	4668      	mov	r0, sp
    2288:	5011      	str	r1, [r2, r0]
    228a:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    228c:	4a61      	ldr	r2, [pc, #388]	; (2414 <STACK_SIZE+0x414>)
    228e:	6a12      	ldr	r2, [r2, #32]
    2290:	0652      	lsls	r2, r2, #25
    2292:	d504      	bpl.n	229e <STACK_SIZE+0x29e>
	{
		scanCodes[scanCodeIndex] = 54; scanCodeIndex++;
    2294:	009a      	lsls	r2, r3, #2
    2296:	2136      	movs	r1, #54	; 0x36
    2298:	4668      	mov	r0, sp
    229a:	5011      	str	r1, [r2, r0]
    229c:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    229e:	4a5d      	ldr	r2, [pc, #372]	; (2414 <STACK_SIZE+0x414>)
    22a0:	6a12      	ldr	r2, [r2, #32]
    22a2:	0612      	lsls	r2, r2, #24
    22a4:	d504      	bpl.n	22b0 <STACK_SIZE+0x2b0>
	{
		scanCodes[scanCodeIndex] = 55; scanCodeIndex++;
    22a6:	009a      	lsls	r2, r3, #2
    22a8:	2137      	movs	r1, #55	; 0x37
    22aa:	4668      	mov	r0, sp
    22ac:	5011      	str	r1, [r2, r0]
    22ae:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    22b0:	4a58      	ldr	r2, [pc, #352]	; (2414 <STACK_SIZE+0x414>)
    22b2:	6a12      	ldr	r2, [r2, #32]
    22b4:	0552      	lsls	r2, r2, #21
    22b6:	d504      	bpl.n	22c2 <STACK_SIZE+0x2c2>
	{
		scanCodes[scanCodeIndex] = 56; scanCodeIndex++;
    22b8:	009a      	lsls	r2, r3, #2
    22ba:	2138      	movs	r1, #56	; 0x38
    22bc:	4668      	mov	r0, sp
    22be:	5011      	str	r1, [r2, r0]
    22c0:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    22c2:	4a54      	ldr	r2, [pc, #336]	; (2414 <STACK_SIZE+0x414>)
    22c4:	6a12      	ldr	r2, [r2, #32]
    22c6:	0512      	lsls	r2, r2, #20
    22c8:	d504      	bpl.n	22d4 <STACK_SIZE+0x2d4>
	{
		scanCodes[scanCodeIndex] = 57; scanCodeIndex++;
    22ca:	009a      	lsls	r2, r3, #2
    22cc:	2139      	movs	r1, #57	; 0x39
    22ce:	4668      	mov	r0, sp
    22d0:	5011      	str	r1, [r2, r0]
    22d2:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    22d4:	4a4f      	ldr	r2, [pc, #316]	; (2414 <STACK_SIZE+0x414>)
    22d6:	6a12      	ldr	r2, [r2, #32]
    22d8:	04d2      	lsls	r2, r2, #19
    22da:	d504      	bpl.n	22e6 <STACK_SIZE+0x2e6>
	{
		scanCodes[scanCodeIndex] = 58; scanCodeIndex++;
    22dc:	009a      	lsls	r2, r3, #2
    22de:	213a      	movs	r1, #58	; 0x3a
    22e0:	4668      	mov	r0, sp
    22e2:	5011      	str	r1, [r2, r0]
    22e4:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    22e6:	4a4b      	ldr	r2, [pc, #300]	; (2414 <STACK_SIZE+0x414>)
    22e8:	6a12      	ldr	r2, [r2, #32]
    22ea:	0492      	lsls	r2, r2, #18
    22ec:	d504      	bpl.n	22f8 <STACK_SIZE+0x2f8>
	{
		scanCodes[scanCodeIndex] = 59; scanCodeIndex++;
    22ee:	009a      	lsls	r2, r3, #2
    22f0:	213b      	movs	r1, #59	; 0x3b
    22f2:	4668      	mov	r0, sp
    22f4:	5011      	str	r1, [r2, r0]
    22f6:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_COL5;
    22f8:	2180      	movs	r1, #128	; 0x80
    22fa:	0389      	lsls	r1, r1, #14
    22fc:	4a43      	ldr	r2, [pc, #268]	; (240c <STACK_SIZE+0x40c>)
    22fe:	6011      	str	r1, [r2, #0]
	
	//This is column 6
	REG_PORT_OUTSET0 = KB_COL6;
    2300:	2180      	movs	r1, #128	; 0x80
    2302:	0509      	lsls	r1, r1, #20
    2304:	4a42      	ldr	r2, [pc, #264]	; (2410 <STACK_SIZE+0x410>)
    2306:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_ROW0) != 0)
    2308:	4a42      	ldr	r2, [pc, #264]	; (2414 <STACK_SIZE+0x414>)
    230a:	6a12      	ldr	r2, [r2, #32]
    230c:	0752      	lsls	r2, r2, #29
    230e:	d504      	bpl.n	231a <STACK_SIZE+0x31a>
	{
		scanCodes[scanCodeIndex] = 60; scanCodeIndex++;
    2310:	009a      	lsls	r2, r3, #2
    2312:	213c      	movs	r1, #60	; 0x3c
    2314:	4668      	mov	r0, sp
    2316:	5011      	str	r1, [r2, r0]
    2318:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW1) != 0)
    231a:	4a3e      	ldr	r2, [pc, #248]	; (2414 <STACK_SIZE+0x414>)
    231c:	6a12      	ldr	r2, [r2, #32]
    231e:	0712      	lsls	r2, r2, #28
    2320:	d504      	bpl.n	232c <STACK_SIZE+0x32c>
	{
		scanCodes[scanCodeIndex] = 61; scanCodeIndex++;
    2322:	009a      	lsls	r2, r3, #2
    2324:	213d      	movs	r1, #61	; 0x3d
    2326:	4668      	mov	r0, sp
    2328:	5011      	str	r1, [r2, r0]
    232a:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW2) != 0)
    232c:	4a39      	ldr	r2, [pc, #228]	; (2414 <STACK_SIZE+0x414>)
    232e:	6a12      	ldr	r2, [r2, #32]
    2330:	06d2      	lsls	r2, r2, #27
    2332:	d504      	bpl.n	233e <STACK_SIZE+0x33e>
	{
		scanCodes[scanCodeIndex] = 62; scanCodeIndex++;
    2334:	009a      	lsls	r2, r3, #2
    2336:	213e      	movs	r1, #62	; 0x3e
    2338:	4668      	mov	r0, sp
    233a:	5011      	str	r1, [r2, r0]
    233c:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW3) != 0)
    233e:	4a35      	ldr	r2, [pc, #212]	; (2414 <STACK_SIZE+0x414>)
    2340:	6a12      	ldr	r2, [r2, #32]
    2342:	0692      	lsls	r2, r2, #26
    2344:	d504      	bpl.n	2350 <STACK_SIZE+0x350>
	{
		scanCodes[scanCodeIndex] = 63; scanCodeIndex++;
    2346:	009a      	lsls	r2, r3, #2
    2348:	213f      	movs	r1, #63	; 0x3f
    234a:	4668      	mov	r0, sp
    234c:	5011      	str	r1, [r2, r0]
    234e:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW4) != 0)
    2350:	4a30      	ldr	r2, [pc, #192]	; (2414 <STACK_SIZE+0x414>)
    2352:	6a12      	ldr	r2, [r2, #32]
    2354:	0652      	lsls	r2, r2, #25
    2356:	d504      	bpl.n	2362 <STACK_SIZE+0x362>
	{
		scanCodes[scanCodeIndex] = 64; scanCodeIndex++;
    2358:	009a      	lsls	r2, r3, #2
    235a:	2140      	movs	r1, #64	; 0x40
    235c:	4668      	mov	r0, sp
    235e:	5011      	str	r1, [r2, r0]
    2360:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW5) != 0)
    2362:	4a2c      	ldr	r2, [pc, #176]	; (2414 <STACK_SIZE+0x414>)
    2364:	6a12      	ldr	r2, [r2, #32]
    2366:	0612      	lsls	r2, r2, #24
    2368:	d504      	bpl.n	2374 <STACK_SIZE+0x374>
	{
		scanCodes[scanCodeIndex] = 65; scanCodeIndex++;
    236a:	009a      	lsls	r2, r3, #2
    236c:	2141      	movs	r1, #65	; 0x41
    236e:	4668      	mov	r0, sp
    2370:	5011      	str	r1, [r2, r0]
    2372:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW6) != 0)
    2374:	4a27      	ldr	r2, [pc, #156]	; (2414 <STACK_SIZE+0x414>)
    2376:	6a12      	ldr	r2, [r2, #32]
    2378:	0552      	lsls	r2, r2, #21
    237a:	d504      	bpl.n	2386 <STACK_SIZE+0x386>
	{
		scanCodes[scanCodeIndex] = 66; scanCodeIndex++;
    237c:	009a      	lsls	r2, r3, #2
    237e:	2142      	movs	r1, #66	; 0x42
    2380:	4668      	mov	r0, sp
    2382:	5011      	str	r1, [r2, r0]
    2384:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW7) != 0)
    2386:	4a23      	ldr	r2, [pc, #140]	; (2414 <STACK_SIZE+0x414>)
    2388:	6a12      	ldr	r2, [r2, #32]
    238a:	0512      	lsls	r2, r2, #20
    238c:	d504      	bpl.n	2398 <STACK_SIZE+0x398>
	{
		scanCodes[scanCodeIndex] = 67; scanCodeIndex++;
    238e:	009a      	lsls	r2, r3, #2
    2390:	2143      	movs	r1, #67	; 0x43
    2392:	4668      	mov	r0, sp
    2394:	5011      	str	r1, [r2, r0]
    2396:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW8) != 0)
    2398:	4a1e      	ldr	r2, [pc, #120]	; (2414 <STACK_SIZE+0x414>)
    239a:	6a12      	ldr	r2, [r2, #32]
    239c:	04d2      	lsls	r2, r2, #19
    239e:	d504      	bpl.n	23aa <STACK_SIZE+0x3aa>
	{
		scanCodes[scanCodeIndex] = 68; scanCodeIndex++;
    23a0:	009a      	lsls	r2, r3, #2
    23a2:	2144      	movs	r1, #68	; 0x44
    23a4:	4668      	mov	r0, sp
    23a6:	5011      	str	r1, [r2, r0]
    23a8:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_ROW9) != 0)
    23aa:	4a1a      	ldr	r2, [pc, #104]	; (2414 <STACK_SIZE+0x414>)
    23ac:	6a12      	ldr	r2, [r2, #32]
    23ae:	0492      	lsls	r2, r2, #18
    23b0:	d504      	bpl.n	23bc <STACK_SIZE+0x3bc>
	{
		scanCodes[scanCodeIndex] = 69; scanCodeIndex++; //nice.
    23b2:	009a      	lsls	r2, r3, #2
    23b4:	2145      	movs	r1, #69	; 0x45
    23b6:	4668      	mov	r0, sp
    23b8:	5011      	str	r1, [r2, r0]
    23ba:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_COL6;
    23bc:	4a13      	ldr	r2, [pc, #76]	; (240c <STACK_SIZE+0x40c>)
    23be:	2180      	movs	r1, #128	; 0x80
    23c0:	0509      	lsls	r1, r1, #20
    23c2:	6011      	str	r1, [r2, #0]
	/*Now we set all of the *ROWS* as outputs, starting low, and read the
	column pins. Stuff them into the array, just like before.
	*/
	
	//Set all rows as output, low
	REG_PORT_DIRSET0 = KB_ROW0;
    23c4:	4914      	ldr	r1, [pc, #80]	; (2418 <STACK_SIZE+0x418>)
    23c6:	2004      	movs	r0, #4
    23c8:	6008      	str	r0, [r1, #0]
	REG_PORT_DIRSET0 = KB_ROW1;
    23ca:	3004      	adds	r0, #4
    23cc:	4683      	mov	fp, r0
    23ce:	6008      	str	r0, [r1, #0]
	REG_PORT_DIRSET0 = KB_ROW2;
    23d0:	3008      	adds	r0, #8
    23d2:	4682      	mov	sl, r0
    23d4:	6008      	str	r0, [r1, #0]
	REG_PORT_DIRSET0 = KB_ROW3;
    23d6:	3010      	adds	r0, #16
    23d8:	4681      	mov	r9, r0
    23da:	6008      	str	r0, [r1, #0]
	REG_PORT_DIRSET0 = KB_ROW4;
    23dc:	3020      	adds	r0, #32
    23de:	4680      	mov	r8, r0
    23e0:	6008      	str	r0, [r1, #0]
	REG_PORT_DIRSET0 = KB_ROW5;
    23e2:	3040      	adds	r0, #64	; 0x40
    23e4:	6008      	str	r0, [r1, #0]
	REG_PORT_DIRSET0 = KB_ROW6;
    23e6:	2780      	movs	r7, #128	; 0x80
    23e8:	00ff      	lsls	r7, r7, #3
    23ea:	600f      	str	r7, [r1, #0]
	REG_PORT_DIRSET0 = KB_ROW7;
    23ec:	2680      	movs	r6, #128	; 0x80
    23ee:	0136      	lsls	r6, r6, #4
    23f0:	600e      	str	r6, [r1, #0]
	REG_PORT_DIRSET0 = KB_ROW8;
    23f2:	2580      	movs	r5, #128	; 0x80
    23f4:	016d      	lsls	r5, r5, #5
    23f6:	600d      	str	r5, [r1, #0]
	REG_PORT_DIRSET0 = KB_ROW9;
    23f8:	2480      	movs	r4, #128	; 0x80
    23fa:	01a4      	lsls	r4, r4, #6
    23fc:	600c      	str	r4, [r1, #0]
	
	REG_PORT_OUTCLR0 = KB_ROW0;
    23fe:	2104      	movs	r1, #4
    2400:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTCLR0 = KB_ROW1;
    2402:	4659      	mov	r1, fp
    2404:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTCLR0 = KB_ROW2;
    2406:	4651      	mov	r1, sl
    2408:	e008      	b.n	241c <STACK_SIZE+0x41c>
    240a:	46c0      	nop			; (mov r8, r8)
    240c:	41004414 	.word	0x41004414
    2410:	41004418 	.word	0x41004418
    2414:	41004400 	.word	0x41004400
    2418:	41004408 	.word	0x41004408
    241c:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTCLR0 = KB_ROW3;
    241e:	4649      	mov	r1, r9
    2420:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTCLR0 = KB_ROW4;
    2422:	4641      	mov	r1, r8
    2424:	6011      	str	r1, [r2, #0]
	REG_PORT_OUTCLR0 = KB_ROW5;
    2426:	6010      	str	r0, [r2, #0]
	REG_PORT_OUTCLR0 = KB_ROW6;
    2428:	6017      	str	r7, [r2, #0]
	REG_PORT_OUTCLR0 = KB_ROW7;
    242a:	6016      	str	r6, [r2, #0]
	REG_PORT_OUTCLR0 = KB_ROW8;
    242c:	6015      	str	r5, [r2, #0]
	REG_PORT_OUTCLR0 = KB_ROW9;
    242e:	6014      	str	r4, [r2, #0]
		
	//set columns to input, pullup enabled
	REG_PORT_DIRCLR0 = KB_COL0;
    2430:	4ada      	ldr	r2, [pc, #872]	; (279c <STACK_SIZE+0x79c>)
    2432:	2180      	movs	r1, #128	; 0x80
    2434:	0249      	lsls	r1, r1, #9
    2436:	4688      	mov	r8, r1
    2438:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_COL1;
    243a:	2180      	movs	r1, #128	; 0x80
    243c:	0289      	lsls	r1, r1, #10
    243e:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_COL2;
    2440:	2180      	movs	r1, #128	; 0x80
    2442:	02c9      	lsls	r1, r1, #11
    2444:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_COL3;
    2446:	2180      	movs	r1, #128	; 0x80
    2448:	0309      	lsls	r1, r1, #12
    244a:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_COL4;
    244c:	2180      	movs	r1, #128	; 0x80
    244e:	0349      	lsls	r1, r1, #13
    2450:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_COL5;
    2452:	2180      	movs	r1, #128	; 0x80
    2454:	0389      	lsls	r1, r1, #14
    2456:	6011      	str	r1, [r2, #0]
	REG_PORT_DIRCLR0 = KB_COL6;
    2458:	2180      	movs	r1, #128	; 0x80
    245a:	0509      	lsls	r1, r1, #20
    245c:	6011      	str	r1, [r2, #0]
	
	PORT->Group[0].PINCFG[16].bit.PULLEN = 1;
    245e:	4ad0      	ldr	r2, [pc, #832]	; (27a0 <STACK_SIZE+0x7a0>)
    2460:	2150      	movs	r1, #80	; 0x50
    2462:	468a      	mov	sl, r1
    2464:	5c54      	ldrb	r4, [r2, r1]
    2466:	2104      	movs	r1, #4
    2468:	430c      	orrs	r4, r1
    246a:	4650      	mov	r0, sl
    246c:	5414      	strb	r4, [r2, r0]
	PORT->Group[0].PINCFG[17].bit.PULLEN = 1;
    246e:	3001      	adds	r0, #1
    2470:	4681      	mov	r9, r0
    2472:	5c14      	ldrb	r4, [r2, r0]
    2474:	430c      	orrs	r4, r1
    2476:	5414      	strb	r4, [r2, r0]
	PORT->Group[0].PINCFG[18].bit.PULLEN = 1;
    2478:	3001      	adds	r0, #1
    247a:	4684      	mov	ip, r0
    247c:	5c14      	ldrb	r4, [r2, r0]
    247e:	430c      	orrs	r4, r1
    2480:	5414      	strb	r4, [r2, r0]
	PORT->Group[0].PINCFG[19].bit.PULLEN = 1;
    2482:	2753      	movs	r7, #83	; 0x53
    2484:	5dd4      	ldrb	r4, [r2, r7]
    2486:	430c      	orrs	r4, r1
    2488:	55d4      	strb	r4, [r2, r7]
	PORT->Group[0].PINCFG[20].bit.PULLEN = 1;
    248a:	2654      	movs	r6, #84	; 0x54
    248c:	5d94      	ldrb	r4, [r2, r6]
    248e:	430c      	orrs	r4, r1
    2490:	5594      	strb	r4, [r2, r6]
	PORT->Group[0].PINCFG[21].bit.PULLEN = 1;
    2492:	2555      	movs	r5, #85	; 0x55
    2494:	5d54      	ldrb	r4, [r2, r5]
    2496:	430c      	orrs	r4, r1
    2498:	5554      	strb	r4, [r2, r5]
	PORT->Group[0].PINCFG[27].bit.PULLEN = 1;
    249a:	3009      	adds	r0, #9
    249c:	5c10      	ldrb	r0, [r2, r0]
    249e:	4301      	orrs	r1, r0
    24a0:	205b      	movs	r0, #91	; 0x5b
    24a2:	5411      	strb	r1, [r2, r0]
	
	PORT->Group[0].PINCFG[16].bit.INEN = 1;
    24a4:	4651      	mov	r1, sl
    24a6:	5c51      	ldrb	r1, [r2, r1]
    24a8:	468b      	mov	fp, r1
    24aa:	2102      	movs	r1, #2
    24ac:	4658      	mov	r0, fp
    24ae:	4308      	orrs	r0, r1
    24b0:	4683      	mov	fp, r0
    24b2:	4650      	mov	r0, sl
    24b4:	465c      	mov	r4, fp
    24b6:	5414      	strb	r4, [r2, r0]
	PORT->Group[0].PINCFG[17].bit.INEN = 1;
    24b8:	4648      	mov	r0, r9
    24ba:	5c10      	ldrb	r0, [r2, r0]
    24bc:	4308      	orrs	r0, r1
    24be:	4682      	mov	sl, r0
    24c0:	4648      	mov	r0, r9
    24c2:	4654      	mov	r4, sl
    24c4:	5414      	strb	r4, [r2, r0]
	PORT->Group[0].PINCFG[18].bit.INEN = 1;
    24c6:	4660      	mov	r0, ip
    24c8:	5c10      	ldrb	r0, [r2, r0]
    24ca:	4308      	orrs	r0, r1
    24cc:	4681      	mov	r9, r0
    24ce:	4660      	mov	r0, ip
    24d0:	464c      	mov	r4, r9
    24d2:	5414      	strb	r4, [r2, r0]
	PORT->Group[0].PINCFG[19].bit.INEN = 1;
    24d4:	5dd0      	ldrb	r0, [r2, r7]
    24d6:	4308      	orrs	r0, r1
    24d8:	55d0      	strb	r0, [r2, r7]
	PORT->Group[0].PINCFG[20].bit.INEN = 1;
    24da:	5d97      	ldrb	r7, [r2, r6]
    24dc:	430f      	orrs	r7, r1
    24de:	5597      	strb	r7, [r2, r6]
	PORT->Group[0].PINCFG[21].bit.INEN = 1;
    24e0:	5d56      	ldrb	r6, [r2, r5]
    24e2:	430e      	orrs	r6, r1
    24e4:	5556      	strb	r6, [r2, r5]
	PORT->Group[0].PINCFG[27].bit.INEN = 1;
    24e6:	205b      	movs	r0, #91	; 0x5b
    24e8:	5c15      	ldrb	r5, [r2, r0]
    24ea:	4329      	orrs	r1, r5
    24ec:	5411      	strb	r1, [r2, r0]
	
	//This is row 0
	REG_PORT_OUTSET0 = KB_ROW0;
    24ee:	49ad      	ldr	r1, [pc, #692]	; (27a4 <STACK_SIZE+0x7a4>)
    24f0:	3857      	subs	r0, #87	; 0x57
    24f2:	6008      	str	r0, [r1, #0]
	if((PORT->Group[0].IN.reg & KB_COL0) != 0)
    24f4:	6a12      	ldr	r2, [r2, #32]
    24f6:	4641      	mov	r1, r8
    24f8:	420a      	tst	r2, r1
    24fa:	d004      	beq.n	2506 <STACK_SIZE+0x506>
	{
		scanCodes[scanCodeIndex] = 0; scanCodeIndex++;
    24fc:	009a      	lsls	r2, r3, #2
    24fe:	2100      	movs	r1, #0
    2500:	4668      	mov	r0, sp
    2502:	5011      	str	r1, [r2, r0]
    2504:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL1) != 0)
    2506:	4aa6      	ldr	r2, [pc, #664]	; (27a0 <STACK_SIZE+0x7a0>)
    2508:	6a12      	ldr	r2, [r2, #32]
    250a:	0392      	lsls	r2, r2, #14
    250c:	d504      	bpl.n	2518 <STACK_SIZE+0x518>
	{
		scanCodes[scanCodeIndex] = 10; scanCodeIndex++;
    250e:	009a      	lsls	r2, r3, #2
    2510:	210a      	movs	r1, #10
    2512:	4668      	mov	r0, sp
    2514:	5011      	str	r1, [r2, r0]
    2516:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL2) != 0)
    2518:	4aa1      	ldr	r2, [pc, #644]	; (27a0 <STACK_SIZE+0x7a0>)
    251a:	6a12      	ldr	r2, [r2, #32]
    251c:	0352      	lsls	r2, r2, #13
    251e:	d504      	bpl.n	252a <STACK_SIZE+0x52a>
	{
		scanCodes[scanCodeIndex] = 20; scanCodeIndex++;
    2520:	009a      	lsls	r2, r3, #2
    2522:	2114      	movs	r1, #20
    2524:	4668      	mov	r0, sp
    2526:	5011      	str	r1, [r2, r0]
    2528:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL3) != 0)
    252a:	4a9d      	ldr	r2, [pc, #628]	; (27a0 <STACK_SIZE+0x7a0>)
    252c:	6a12      	ldr	r2, [r2, #32]
    252e:	0312      	lsls	r2, r2, #12
    2530:	d504      	bpl.n	253c <STACK_SIZE+0x53c>
	{
		scanCodes[scanCodeIndex] = 30; scanCodeIndex++;
    2532:	009a      	lsls	r2, r3, #2
    2534:	211e      	movs	r1, #30
    2536:	4668      	mov	r0, sp
    2538:	5011      	str	r1, [r2, r0]
    253a:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL4) != 0)
    253c:	4a98      	ldr	r2, [pc, #608]	; (27a0 <STACK_SIZE+0x7a0>)
    253e:	6a12      	ldr	r2, [r2, #32]
    2540:	02d2      	lsls	r2, r2, #11
    2542:	d504      	bpl.n	254e <STACK_SIZE+0x54e>
	{
		scanCodes[scanCodeIndex] = 40; scanCodeIndex++;
    2544:	009a      	lsls	r2, r3, #2
    2546:	2128      	movs	r1, #40	; 0x28
    2548:	4668      	mov	r0, sp
    254a:	5011      	str	r1, [r2, r0]
    254c:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL5) != 0)
    254e:	4a94      	ldr	r2, [pc, #592]	; (27a0 <STACK_SIZE+0x7a0>)
    2550:	6a12      	ldr	r2, [r2, #32]
    2552:	0292      	lsls	r2, r2, #10
    2554:	d504      	bpl.n	2560 <STACK_SIZE+0x560>
	{
		scanCodes[scanCodeIndex] = 50; scanCodeIndex++;
    2556:	009a      	lsls	r2, r3, #2
    2558:	2132      	movs	r1, #50	; 0x32
    255a:	4668      	mov	r0, sp
    255c:	5011      	str	r1, [r2, r0]
    255e:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL6) != 0)
    2560:	4a8f      	ldr	r2, [pc, #572]	; (27a0 <STACK_SIZE+0x7a0>)
    2562:	6a12      	ldr	r2, [r2, #32]
    2564:	0112      	lsls	r2, r2, #4
    2566:	d504      	bpl.n	2572 <STACK_SIZE+0x572>
	{
		scanCodes[scanCodeIndex] = 60; scanCodeIndex++;
    2568:	009a      	lsls	r2, r3, #2
    256a:	213c      	movs	r1, #60	; 0x3c
    256c:	4668      	mov	r0, sp
    256e:	5011      	str	r1, [r2, r0]
    2570:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_ROW0;
    2572:	2104      	movs	r1, #4
    2574:	4a8c      	ldr	r2, [pc, #560]	; (27a8 <STACK_SIZE+0x7a8>)
    2576:	6011      	str	r1, [r2, #0]
	
	//This is row 1
	REG_PORT_OUTSET0 = KB_ROW1;
    2578:	3104      	adds	r1, #4
    257a:	4a8a      	ldr	r2, [pc, #552]	; (27a4 <STACK_SIZE+0x7a4>)
    257c:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_COL0) != 0)
    257e:	4a88      	ldr	r2, [pc, #544]	; (27a0 <STACK_SIZE+0x7a0>)
    2580:	6a12      	ldr	r2, [r2, #32]
    2582:	03d2      	lsls	r2, r2, #15
    2584:	d504      	bpl.n	2590 <STACK_SIZE+0x590>
	{
		scanCodes[scanCodeIndex] = 1; scanCodeIndex++;
    2586:	009a      	lsls	r2, r3, #2
    2588:	3907      	subs	r1, #7
    258a:	4668      	mov	r0, sp
    258c:	5011      	str	r1, [r2, r0]
    258e:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL1) != 0)
    2590:	4a83      	ldr	r2, [pc, #524]	; (27a0 <STACK_SIZE+0x7a0>)
    2592:	6a12      	ldr	r2, [r2, #32]
    2594:	0392      	lsls	r2, r2, #14
    2596:	d504      	bpl.n	25a2 <STACK_SIZE+0x5a2>
	{
		scanCodes[scanCodeIndex] = 11; scanCodeIndex++;
    2598:	009a      	lsls	r2, r3, #2
    259a:	210b      	movs	r1, #11
    259c:	4668      	mov	r0, sp
    259e:	5011      	str	r1, [r2, r0]
    25a0:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL2) != 0)
    25a2:	4a7f      	ldr	r2, [pc, #508]	; (27a0 <STACK_SIZE+0x7a0>)
    25a4:	6a12      	ldr	r2, [r2, #32]
    25a6:	0352      	lsls	r2, r2, #13
    25a8:	d504      	bpl.n	25b4 <STACK_SIZE+0x5b4>
	{
		scanCodes[scanCodeIndex] = 21; scanCodeIndex++;
    25aa:	009a      	lsls	r2, r3, #2
    25ac:	2115      	movs	r1, #21
    25ae:	4668      	mov	r0, sp
    25b0:	5011      	str	r1, [r2, r0]
    25b2:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL3) != 0)
    25b4:	4a7a      	ldr	r2, [pc, #488]	; (27a0 <STACK_SIZE+0x7a0>)
    25b6:	6a12      	ldr	r2, [r2, #32]
    25b8:	0312      	lsls	r2, r2, #12
    25ba:	d504      	bpl.n	25c6 <STACK_SIZE+0x5c6>
	{
		scanCodes[scanCodeIndex] = 31; scanCodeIndex++;
    25bc:	009a      	lsls	r2, r3, #2
    25be:	211f      	movs	r1, #31
    25c0:	4668      	mov	r0, sp
    25c2:	5011      	str	r1, [r2, r0]
    25c4:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL4) != 0)
    25c6:	4a76      	ldr	r2, [pc, #472]	; (27a0 <STACK_SIZE+0x7a0>)
    25c8:	6a12      	ldr	r2, [r2, #32]
    25ca:	02d2      	lsls	r2, r2, #11
    25cc:	d504      	bpl.n	25d8 <STACK_SIZE+0x5d8>
	{
		scanCodes[scanCodeIndex] = 41; scanCodeIndex++;
    25ce:	009a      	lsls	r2, r3, #2
    25d0:	2129      	movs	r1, #41	; 0x29
    25d2:	4668      	mov	r0, sp
    25d4:	5011      	str	r1, [r2, r0]
    25d6:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL5) != 0)
    25d8:	4a71      	ldr	r2, [pc, #452]	; (27a0 <STACK_SIZE+0x7a0>)
    25da:	6a12      	ldr	r2, [r2, #32]
    25dc:	0292      	lsls	r2, r2, #10
    25de:	d504      	bpl.n	25ea <STACK_SIZE+0x5ea>
	{
		scanCodes[scanCodeIndex] = 51; scanCodeIndex++;
    25e0:	009a      	lsls	r2, r3, #2
    25e2:	2133      	movs	r1, #51	; 0x33
    25e4:	4668      	mov	r0, sp
    25e6:	5011      	str	r1, [r2, r0]
    25e8:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL6) != 0)
    25ea:	4a6d      	ldr	r2, [pc, #436]	; (27a0 <STACK_SIZE+0x7a0>)
    25ec:	6a12      	ldr	r2, [r2, #32]
    25ee:	0112      	lsls	r2, r2, #4
    25f0:	d504      	bpl.n	25fc <STACK_SIZE+0x5fc>
	{
		scanCodes[scanCodeIndex] = 61; scanCodeIndex++;
    25f2:	009a      	lsls	r2, r3, #2
    25f4:	213d      	movs	r1, #61	; 0x3d
    25f6:	4668      	mov	r0, sp
    25f8:	5011      	str	r1, [r2, r0]
    25fa:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_ROW1;
    25fc:	2108      	movs	r1, #8
    25fe:	4a6a      	ldr	r2, [pc, #424]	; (27a8 <STACK_SIZE+0x7a8>)
    2600:	6011      	str	r1, [r2, #0]
	
	//This is row 2
	REG_PORT_OUTSET0 = KB_ROW2;
    2602:	3108      	adds	r1, #8
    2604:	4a67      	ldr	r2, [pc, #412]	; (27a4 <STACK_SIZE+0x7a4>)
    2606:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_COL0) != 0)
    2608:	4a65      	ldr	r2, [pc, #404]	; (27a0 <STACK_SIZE+0x7a0>)
    260a:	6a12      	ldr	r2, [r2, #32]
    260c:	03d2      	lsls	r2, r2, #15
    260e:	d504      	bpl.n	261a <STACK_SIZE+0x61a>
	{
		scanCodes[scanCodeIndex] = 2; scanCodeIndex++;
    2610:	009a      	lsls	r2, r3, #2
    2612:	390e      	subs	r1, #14
    2614:	4668      	mov	r0, sp
    2616:	5011      	str	r1, [r2, r0]
    2618:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL1) != 0)
    261a:	4a61      	ldr	r2, [pc, #388]	; (27a0 <STACK_SIZE+0x7a0>)
    261c:	6a12      	ldr	r2, [r2, #32]
    261e:	0392      	lsls	r2, r2, #14
    2620:	d504      	bpl.n	262c <STACK_SIZE+0x62c>
	{
		scanCodes[scanCodeIndex] = 12; scanCodeIndex++;
    2622:	009a      	lsls	r2, r3, #2
    2624:	210c      	movs	r1, #12
    2626:	4668      	mov	r0, sp
    2628:	5011      	str	r1, [r2, r0]
    262a:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL2) != 0)
    262c:	4a5c      	ldr	r2, [pc, #368]	; (27a0 <STACK_SIZE+0x7a0>)
    262e:	6a12      	ldr	r2, [r2, #32]
    2630:	0352      	lsls	r2, r2, #13
    2632:	d504      	bpl.n	263e <STACK_SIZE+0x63e>
	{
		scanCodes[scanCodeIndex] = 22; scanCodeIndex++;
    2634:	009a      	lsls	r2, r3, #2
    2636:	2116      	movs	r1, #22
    2638:	4668      	mov	r0, sp
    263a:	5011      	str	r1, [r2, r0]
    263c:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL3) != 0)
    263e:	4a58      	ldr	r2, [pc, #352]	; (27a0 <STACK_SIZE+0x7a0>)
    2640:	6a12      	ldr	r2, [r2, #32]
    2642:	0312      	lsls	r2, r2, #12
    2644:	d504      	bpl.n	2650 <STACK_SIZE+0x650>
	{
		scanCodes[scanCodeIndex] = 32; scanCodeIndex++;
    2646:	009a      	lsls	r2, r3, #2
    2648:	2120      	movs	r1, #32
    264a:	4668      	mov	r0, sp
    264c:	5011      	str	r1, [r2, r0]
    264e:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL4) != 0)
    2650:	4a53      	ldr	r2, [pc, #332]	; (27a0 <STACK_SIZE+0x7a0>)
    2652:	6a12      	ldr	r2, [r2, #32]
    2654:	02d2      	lsls	r2, r2, #11
    2656:	d504      	bpl.n	2662 <STACK_SIZE+0x662>
	{
		scanCodes[scanCodeIndex] = 42; scanCodeIndex++;
    2658:	009a      	lsls	r2, r3, #2
    265a:	212a      	movs	r1, #42	; 0x2a
    265c:	4668      	mov	r0, sp
    265e:	5011      	str	r1, [r2, r0]
    2660:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL5) != 0)
    2662:	4a4f      	ldr	r2, [pc, #316]	; (27a0 <STACK_SIZE+0x7a0>)
    2664:	6a12      	ldr	r2, [r2, #32]
    2666:	0292      	lsls	r2, r2, #10
    2668:	d504      	bpl.n	2674 <STACK_SIZE+0x674>
	{
		scanCodes[scanCodeIndex] = 52; scanCodeIndex++;
    266a:	009a      	lsls	r2, r3, #2
    266c:	2134      	movs	r1, #52	; 0x34
    266e:	4668      	mov	r0, sp
    2670:	5011      	str	r1, [r2, r0]
    2672:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL6) != 0)
    2674:	4a4a      	ldr	r2, [pc, #296]	; (27a0 <STACK_SIZE+0x7a0>)
    2676:	6a12      	ldr	r2, [r2, #32]
    2678:	0112      	lsls	r2, r2, #4
    267a:	d504      	bpl.n	2686 <STACK_SIZE+0x686>
	{
		scanCodes[scanCodeIndex] = 62; scanCodeIndex++;
    267c:	009a      	lsls	r2, r3, #2
    267e:	213e      	movs	r1, #62	; 0x3e
    2680:	4668      	mov	r0, sp
    2682:	5011      	str	r1, [r2, r0]
    2684:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_ROW2;
    2686:	2110      	movs	r1, #16
    2688:	4a47      	ldr	r2, [pc, #284]	; (27a8 <STACK_SIZE+0x7a8>)
    268a:	6011      	str	r1, [r2, #0]
	
	//This is row 3
	REG_PORT_OUTSET0 = KB_ROW3;
    268c:	3110      	adds	r1, #16
    268e:	4a45      	ldr	r2, [pc, #276]	; (27a4 <STACK_SIZE+0x7a4>)
    2690:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_COL0) != 0)
    2692:	4a43      	ldr	r2, [pc, #268]	; (27a0 <STACK_SIZE+0x7a0>)
    2694:	6a12      	ldr	r2, [r2, #32]
    2696:	03d2      	lsls	r2, r2, #15
    2698:	d504      	bpl.n	26a4 <STACK_SIZE+0x6a4>
	{
		scanCodes[scanCodeIndex] = 3; scanCodeIndex++;
    269a:	009a      	lsls	r2, r3, #2
    269c:	391d      	subs	r1, #29
    269e:	4668      	mov	r0, sp
    26a0:	5011      	str	r1, [r2, r0]
    26a2:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL1) != 0)
    26a4:	4a3e      	ldr	r2, [pc, #248]	; (27a0 <STACK_SIZE+0x7a0>)
    26a6:	6a12      	ldr	r2, [r2, #32]
    26a8:	0392      	lsls	r2, r2, #14
    26aa:	d504      	bpl.n	26b6 <STACK_SIZE+0x6b6>
	{
		scanCodes[scanCodeIndex] = 13; scanCodeIndex++;
    26ac:	009a      	lsls	r2, r3, #2
    26ae:	210d      	movs	r1, #13
    26b0:	4668      	mov	r0, sp
    26b2:	5011      	str	r1, [r2, r0]
    26b4:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL2) != 0)
    26b6:	4a3a      	ldr	r2, [pc, #232]	; (27a0 <STACK_SIZE+0x7a0>)
    26b8:	6a12      	ldr	r2, [r2, #32]
    26ba:	0352      	lsls	r2, r2, #13
    26bc:	d504      	bpl.n	26c8 <STACK_SIZE+0x6c8>
	{
		scanCodes[scanCodeIndex] = 23; scanCodeIndex++;
    26be:	009a      	lsls	r2, r3, #2
    26c0:	2117      	movs	r1, #23
    26c2:	4668      	mov	r0, sp
    26c4:	5011      	str	r1, [r2, r0]
    26c6:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL3) != 0)
    26c8:	4a35      	ldr	r2, [pc, #212]	; (27a0 <STACK_SIZE+0x7a0>)
    26ca:	6a12      	ldr	r2, [r2, #32]
    26cc:	0312      	lsls	r2, r2, #12
    26ce:	d504      	bpl.n	26da <STACK_SIZE+0x6da>
	{
		scanCodes[scanCodeIndex] = 33; scanCodeIndex++;
    26d0:	009a      	lsls	r2, r3, #2
    26d2:	2121      	movs	r1, #33	; 0x21
    26d4:	4668      	mov	r0, sp
    26d6:	5011      	str	r1, [r2, r0]
    26d8:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL4) != 0)
    26da:	4a31      	ldr	r2, [pc, #196]	; (27a0 <STACK_SIZE+0x7a0>)
    26dc:	6a12      	ldr	r2, [r2, #32]
    26de:	02d2      	lsls	r2, r2, #11
    26e0:	d504      	bpl.n	26ec <STACK_SIZE+0x6ec>
	{
		scanCodes[scanCodeIndex] = 43; scanCodeIndex++;
    26e2:	009a      	lsls	r2, r3, #2
    26e4:	212b      	movs	r1, #43	; 0x2b
    26e6:	4668      	mov	r0, sp
    26e8:	5011      	str	r1, [r2, r0]
    26ea:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL5) != 0)
    26ec:	4a2c      	ldr	r2, [pc, #176]	; (27a0 <STACK_SIZE+0x7a0>)
    26ee:	6a12      	ldr	r2, [r2, #32]
    26f0:	0292      	lsls	r2, r2, #10
    26f2:	d504      	bpl.n	26fe <STACK_SIZE+0x6fe>
	{
		scanCodes[scanCodeIndex] = 53; scanCodeIndex++;
    26f4:	009a      	lsls	r2, r3, #2
    26f6:	2135      	movs	r1, #53	; 0x35
    26f8:	4668      	mov	r0, sp
    26fa:	5011      	str	r1, [r2, r0]
    26fc:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL6) != 0)
    26fe:	4a28      	ldr	r2, [pc, #160]	; (27a0 <STACK_SIZE+0x7a0>)
    2700:	6a12      	ldr	r2, [r2, #32]
    2702:	0112      	lsls	r2, r2, #4
    2704:	d504      	bpl.n	2710 <STACK_SIZE+0x710>
	{
		scanCodes[scanCodeIndex] = 63; scanCodeIndex++;
    2706:	009a      	lsls	r2, r3, #2
    2708:	213f      	movs	r1, #63	; 0x3f
    270a:	4668      	mov	r0, sp
    270c:	5011      	str	r1, [r2, r0]
    270e:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_ROW3;
    2710:	2120      	movs	r1, #32
    2712:	4a25      	ldr	r2, [pc, #148]	; (27a8 <STACK_SIZE+0x7a8>)
    2714:	6011      	str	r1, [r2, #0]
	
	//This is row 4
	REG_PORT_OUTSET0 = KB_ROW4;
    2716:	3120      	adds	r1, #32
    2718:	4a22      	ldr	r2, [pc, #136]	; (27a4 <STACK_SIZE+0x7a4>)
    271a:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_COL0) != 0)
    271c:	4a20      	ldr	r2, [pc, #128]	; (27a0 <STACK_SIZE+0x7a0>)
    271e:	6a12      	ldr	r2, [r2, #32]
    2720:	03d2      	lsls	r2, r2, #15
    2722:	d504      	bpl.n	272e <STACK_SIZE+0x72e>
	{
		scanCodes[scanCodeIndex] = 4; scanCodeIndex++;
    2724:	009a      	lsls	r2, r3, #2
    2726:	393c      	subs	r1, #60	; 0x3c
    2728:	4668      	mov	r0, sp
    272a:	5011      	str	r1, [r2, r0]
    272c:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL1) != 0)
    272e:	4a1c      	ldr	r2, [pc, #112]	; (27a0 <STACK_SIZE+0x7a0>)
    2730:	6a12      	ldr	r2, [r2, #32]
    2732:	0392      	lsls	r2, r2, #14
    2734:	d504      	bpl.n	2740 <STACK_SIZE+0x740>
	{
		scanCodes[scanCodeIndex] = 14; scanCodeIndex++;
    2736:	009a      	lsls	r2, r3, #2
    2738:	210e      	movs	r1, #14
    273a:	4668      	mov	r0, sp
    273c:	5011      	str	r1, [r2, r0]
    273e:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL2) != 0)
    2740:	4a17      	ldr	r2, [pc, #92]	; (27a0 <STACK_SIZE+0x7a0>)
    2742:	6a12      	ldr	r2, [r2, #32]
    2744:	0352      	lsls	r2, r2, #13
    2746:	d504      	bpl.n	2752 <STACK_SIZE+0x752>
	{
		scanCodes[scanCodeIndex] = 24; scanCodeIndex++;
    2748:	009a      	lsls	r2, r3, #2
    274a:	2118      	movs	r1, #24
    274c:	4668      	mov	r0, sp
    274e:	5011      	str	r1, [r2, r0]
    2750:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL3) != 0)
    2752:	4a13      	ldr	r2, [pc, #76]	; (27a0 <STACK_SIZE+0x7a0>)
    2754:	6a12      	ldr	r2, [r2, #32]
    2756:	0312      	lsls	r2, r2, #12
    2758:	d504      	bpl.n	2764 <STACK_SIZE+0x764>
	{
		scanCodes[scanCodeIndex] = 34; scanCodeIndex++;
    275a:	009a      	lsls	r2, r3, #2
    275c:	2122      	movs	r1, #34	; 0x22
    275e:	4668      	mov	r0, sp
    2760:	5011      	str	r1, [r2, r0]
    2762:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL4) != 0)
    2764:	4a0e      	ldr	r2, [pc, #56]	; (27a0 <STACK_SIZE+0x7a0>)
    2766:	6a12      	ldr	r2, [r2, #32]
    2768:	02d2      	lsls	r2, r2, #11
    276a:	d504      	bpl.n	2776 <STACK_SIZE+0x776>
	{
		scanCodes[scanCodeIndex] = 44; scanCodeIndex++;
    276c:	009a      	lsls	r2, r3, #2
    276e:	212c      	movs	r1, #44	; 0x2c
    2770:	4668      	mov	r0, sp
    2772:	5011      	str	r1, [r2, r0]
    2774:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL5) != 0)
    2776:	4a0a      	ldr	r2, [pc, #40]	; (27a0 <STACK_SIZE+0x7a0>)
    2778:	6a12      	ldr	r2, [r2, #32]
    277a:	0292      	lsls	r2, r2, #10
    277c:	d504      	bpl.n	2788 <STACK_SIZE+0x788>
	{
		scanCodes[scanCodeIndex] = 54; scanCodeIndex++;
    277e:	009a      	lsls	r2, r3, #2
    2780:	2136      	movs	r1, #54	; 0x36
    2782:	4668      	mov	r0, sp
    2784:	5011      	str	r1, [r2, r0]
    2786:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL6) != 0)
    2788:	4a05      	ldr	r2, [pc, #20]	; (27a0 <STACK_SIZE+0x7a0>)
    278a:	6a12      	ldr	r2, [r2, #32]
    278c:	0112      	lsls	r2, r2, #4
    278e:	d50d      	bpl.n	27ac <STACK_SIZE+0x7ac>
	{
		scanCodes[scanCodeIndex] = 64; scanCodeIndex++;
    2790:	009a      	lsls	r2, r3, #2
    2792:	2140      	movs	r1, #64	; 0x40
    2794:	4668      	mov	r0, sp
    2796:	5011      	str	r1, [r2, r0]
    2798:	3301      	adds	r3, #1
    279a:	e007      	b.n	27ac <STACK_SIZE+0x7ac>
    279c:	41004404 	.word	0x41004404
    27a0:	41004400 	.word	0x41004400
    27a4:	41004418 	.word	0x41004418
    27a8:	41004414 	.word	0x41004414
	}
	REG_PORT_OUTCLR0 = KB_ROW4;
    27ac:	2140      	movs	r1, #64	; 0x40
    27ae:	4abc      	ldr	r2, [pc, #752]	; (2aa0 <STACK_SIZE+0xaa0>)
    27b0:	6011      	str	r1, [r2, #0]
	
	//This is row 5
	REG_PORT_OUTSET0 = KB_ROW5;
    27b2:	3140      	adds	r1, #64	; 0x40
    27b4:	4abb      	ldr	r2, [pc, #748]	; (2aa4 <STACK_SIZE+0xaa4>)
    27b6:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_COL0) != 0)
    27b8:	4abb      	ldr	r2, [pc, #748]	; (2aa8 <STACK_SIZE+0xaa8>)
    27ba:	6a12      	ldr	r2, [r2, #32]
    27bc:	03d2      	lsls	r2, r2, #15
    27be:	d504      	bpl.n	27ca <STACK_SIZE+0x7ca>
	{
		scanCodes[scanCodeIndex] = 5; scanCodeIndex++;
    27c0:	009a      	lsls	r2, r3, #2
    27c2:	397b      	subs	r1, #123	; 0x7b
    27c4:	4668      	mov	r0, sp
    27c6:	5011      	str	r1, [r2, r0]
    27c8:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL1) != 0)
    27ca:	4ab7      	ldr	r2, [pc, #732]	; (2aa8 <STACK_SIZE+0xaa8>)
    27cc:	6a12      	ldr	r2, [r2, #32]
    27ce:	0392      	lsls	r2, r2, #14
    27d0:	d504      	bpl.n	27dc <STACK_SIZE+0x7dc>
	{
		scanCodes[scanCodeIndex] = 15; scanCodeIndex++;
    27d2:	009a      	lsls	r2, r3, #2
    27d4:	210f      	movs	r1, #15
    27d6:	4668      	mov	r0, sp
    27d8:	5011      	str	r1, [r2, r0]
    27da:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL2) != 0)
    27dc:	4ab2      	ldr	r2, [pc, #712]	; (2aa8 <STACK_SIZE+0xaa8>)
    27de:	6a12      	ldr	r2, [r2, #32]
    27e0:	0352      	lsls	r2, r2, #13
    27e2:	d504      	bpl.n	27ee <STACK_SIZE+0x7ee>
	{
		scanCodes[scanCodeIndex] = 25; scanCodeIndex++;
    27e4:	009a      	lsls	r2, r3, #2
    27e6:	2119      	movs	r1, #25
    27e8:	4668      	mov	r0, sp
    27ea:	5011      	str	r1, [r2, r0]
    27ec:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL3) != 0)
    27ee:	4aae      	ldr	r2, [pc, #696]	; (2aa8 <STACK_SIZE+0xaa8>)
    27f0:	6a12      	ldr	r2, [r2, #32]
    27f2:	0312      	lsls	r2, r2, #12
    27f4:	d504      	bpl.n	2800 <STACK_SIZE+0x800>
	{
		scanCodes[scanCodeIndex] = 35; scanCodeIndex++;
    27f6:	009a      	lsls	r2, r3, #2
    27f8:	2123      	movs	r1, #35	; 0x23
    27fa:	4668      	mov	r0, sp
    27fc:	5011      	str	r1, [r2, r0]
    27fe:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL4) != 0)
    2800:	4aa9      	ldr	r2, [pc, #676]	; (2aa8 <STACK_SIZE+0xaa8>)
    2802:	6a12      	ldr	r2, [r2, #32]
    2804:	02d2      	lsls	r2, r2, #11
    2806:	d504      	bpl.n	2812 <STACK_SIZE+0x812>
	{
		scanCodes[scanCodeIndex] = 45; scanCodeIndex++;
    2808:	009a      	lsls	r2, r3, #2
    280a:	212d      	movs	r1, #45	; 0x2d
    280c:	4668      	mov	r0, sp
    280e:	5011      	str	r1, [r2, r0]
    2810:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL5) != 0)
    2812:	4aa5      	ldr	r2, [pc, #660]	; (2aa8 <STACK_SIZE+0xaa8>)
    2814:	6a12      	ldr	r2, [r2, #32]
    2816:	0292      	lsls	r2, r2, #10
    2818:	d504      	bpl.n	2824 <STACK_SIZE+0x824>
	{
		scanCodes[scanCodeIndex] = 55; scanCodeIndex++;
    281a:	009a      	lsls	r2, r3, #2
    281c:	2137      	movs	r1, #55	; 0x37
    281e:	4668      	mov	r0, sp
    2820:	5011      	str	r1, [r2, r0]
    2822:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL6) != 0)
    2824:	4aa0      	ldr	r2, [pc, #640]	; (2aa8 <STACK_SIZE+0xaa8>)
    2826:	6a12      	ldr	r2, [r2, #32]
    2828:	0112      	lsls	r2, r2, #4
    282a:	d504      	bpl.n	2836 <STACK_SIZE+0x836>
	{
		scanCodes[scanCodeIndex] = 65; scanCodeIndex++;
    282c:	009a      	lsls	r2, r3, #2
    282e:	2141      	movs	r1, #65	; 0x41
    2830:	4668      	mov	r0, sp
    2832:	5011      	str	r1, [r2, r0]
    2834:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_ROW5;
    2836:	2180      	movs	r1, #128	; 0x80
    2838:	4a99      	ldr	r2, [pc, #612]	; (2aa0 <STACK_SIZE+0xaa0>)
    283a:	6011      	str	r1, [r2, #0]
	
	//This is row 6
	REG_PORT_OUTSET0 = KB_ROW6;
    283c:	2180      	movs	r1, #128	; 0x80
    283e:	00c9      	lsls	r1, r1, #3
    2840:	4a98      	ldr	r2, [pc, #608]	; (2aa4 <STACK_SIZE+0xaa4>)
    2842:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_COL0) != 0)
    2844:	4a98      	ldr	r2, [pc, #608]	; (2aa8 <STACK_SIZE+0xaa8>)
    2846:	6a12      	ldr	r2, [r2, #32]
    2848:	03d2      	lsls	r2, r2, #15
    284a:	d504      	bpl.n	2856 <STACK_SIZE+0x856>
	{
		scanCodes[scanCodeIndex] = 6; scanCodeIndex++;
    284c:	009a      	lsls	r2, r3, #2
    284e:	2106      	movs	r1, #6
    2850:	4668      	mov	r0, sp
    2852:	5011      	str	r1, [r2, r0]
    2854:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL1) != 0)
    2856:	4a94      	ldr	r2, [pc, #592]	; (2aa8 <STACK_SIZE+0xaa8>)
    2858:	6a12      	ldr	r2, [r2, #32]
    285a:	0392      	lsls	r2, r2, #14
    285c:	d504      	bpl.n	2868 <STACK_SIZE+0x868>
	{
		scanCodes[scanCodeIndex] = 16; scanCodeIndex++;
    285e:	009a      	lsls	r2, r3, #2
    2860:	2110      	movs	r1, #16
    2862:	4668      	mov	r0, sp
    2864:	5011      	str	r1, [r2, r0]
    2866:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL2) != 0)
    2868:	4a8f      	ldr	r2, [pc, #572]	; (2aa8 <STACK_SIZE+0xaa8>)
    286a:	6a12      	ldr	r2, [r2, #32]
    286c:	0352      	lsls	r2, r2, #13
    286e:	d504      	bpl.n	287a <STACK_SIZE+0x87a>
	{
		scanCodes[scanCodeIndex] = 26; scanCodeIndex++;
    2870:	009a      	lsls	r2, r3, #2
    2872:	211a      	movs	r1, #26
    2874:	4668      	mov	r0, sp
    2876:	5011      	str	r1, [r2, r0]
    2878:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL3) != 0)
    287a:	4a8b      	ldr	r2, [pc, #556]	; (2aa8 <STACK_SIZE+0xaa8>)
    287c:	6a12      	ldr	r2, [r2, #32]
    287e:	0312      	lsls	r2, r2, #12
    2880:	d504      	bpl.n	288c <STACK_SIZE+0x88c>
	{
		scanCodes[scanCodeIndex] = 36; scanCodeIndex++;
    2882:	009a      	lsls	r2, r3, #2
    2884:	2124      	movs	r1, #36	; 0x24
    2886:	4668      	mov	r0, sp
    2888:	5011      	str	r1, [r2, r0]
    288a:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL4) != 0)
    288c:	4a86      	ldr	r2, [pc, #536]	; (2aa8 <STACK_SIZE+0xaa8>)
    288e:	6a12      	ldr	r2, [r2, #32]
    2890:	02d2      	lsls	r2, r2, #11
    2892:	d504      	bpl.n	289e <STACK_SIZE+0x89e>
	{
		scanCodes[scanCodeIndex] = 46; scanCodeIndex++;
    2894:	009a      	lsls	r2, r3, #2
    2896:	212e      	movs	r1, #46	; 0x2e
    2898:	4668      	mov	r0, sp
    289a:	5011      	str	r1, [r2, r0]
    289c:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL5) != 0)
    289e:	4a82      	ldr	r2, [pc, #520]	; (2aa8 <STACK_SIZE+0xaa8>)
    28a0:	6a12      	ldr	r2, [r2, #32]
    28a2:	0292      	lsls	r2, r2, #10
    28a4:	d504      	bpl.n	28b0 <STACK_SIZE+0x8b0>
	{
		scanCodes[scanCodeIndex] = 56; scanCodeIndex++;
    28a6:	009a      	lsls	r2, r3, #2
    28a8:	2138      	movs	r1, #56	; 0x38
    28aa:	4668      	mov	r0, sp
    28ac:	5011      	str	r1, [r2, r0]
    28ae:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL6) != 0)
    28b0:	4a7d      	ldr	r2, [pc, #500]	; (2aa8 <STACK_SIZE+0xaa8>)
    28b2:	6a12      	ldr	r2, [r2, #32]
    28b4:	0112      	lsls	r2, r2, #4
    28b6:	d504      	bpl.n	28c2 <STACK_SIZE+0x8c2>
	{
		scanCodes[scanCodeIndex] = 66; scanCodeIndex++;
    28b8:	009a      	lsls	r2, r3, #2
    28ba:	2142      	movs	r1, #66	; 0x42
    28bc:	4668      	mov	r0, sp
    28be:	5011      	str	r1, [r2, r0]
    28c0:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_ROW6;
    28c2:	2180      	movs	r1, #128	; 0x80
    28c4:	00c9      	lsls	r1, r1, #3
    28c6:	4a76      	ldr	r2, [pc, #472]	; (2aa0 <STACK_SIZE+0xaa0>)
    28c8:	6011      	str	r1, [r2, #0]
	
	//This is row 7
	REG_PORT_OUTSET0 = KB_ROW7;
    28ca:	2180      	movs	r1, #128	; 0x80
    28cc:	0109      	lsls	r1, r1, #4
    28ce:	4a75      	ldr	r2, [pc, #468]	; (2aa4 <STACK_SIZE+0xaa4>)
    28d0:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_COL0) != 0)
    28d2:	4a75      	ldr	r2, [pc, #468]	; (2aa8 <STACK_SIZE+0xaa8>)
    28d4:	6a12      	ldr	r2, [r2, #32]
    28d6:	03d2      	lsls	r2, r2, #15
    28d8:	d504      	bpl.n	28e4 <STACK_SIZE+0x8e4>
	{
		scanCodes[scanCodeIndex] = 7; scanCodeIndex++;
    28da:	009a      	lsls	r2, r3, #2
    28dc:	2107      	movs	r1, #7
    28de:	4668      	mov	r0, sp
    28e0:	5011      	str	r1, [r2, r0]
    28e2:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL1) != 0)
    28e4:	4a70      	ldr	r2, [pc, #448]	; (2aa8 <STACK_SIZE+0xaa8>)
    28e6:	6a12      	ldr	r2, [r2, #32]
    28e8:	0392      	lsls	r2, r2, #14
    28ea:	d504      	bpl.n	28f6 <STACK_SIZE+0x8f6>
	{
		scanCodes[scanCodeIndex] = 17; scanCodeIndex++;
    28ec:	009a      	lsls	r2, r3, #2
    28ee:	2111      	movs	r1, #17
    28f0:	4668      	mov	r0, sp
    28f2:	5011      	str	r1, [r2, r0]
    28f4:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL2) != 0)
    28f6:	4a6c      	ldr	r2, [pc, #432]	; (2aa8 <STACK_SIZE+0xaa8>)
    28f8:	6a12      	ldr	r2, [r2, #32]
    28fa:	0352      	lsls	r2, r2, #13
    28fc:	d504      	bpl.n	2908 <STACK_SIZE+0x908>
	{
		scanCodes[scanCodeIndex] = 27; scanCodeIndex++;
    28fe:	009a      	lsls	r2, r3, #2
    2900:	211b      	movs	r1, #27
    2902:	4668      	mov	r0, sp
    2904:	5011      	str	r1, [r2, r0]
    2906:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL3) != 0)
    2908:	4a67      	ldr	r2, [pc, #412]	; (2aa8 <STACK_SIZE+0xaa8>)
    290a:	6a12      	ldr	r2, [r2, #32]
    290c:	0312      	lsls	r2, r2, #12
    290e:	d504      	bpl.n	291a <STACK_SIZE+0x91a>
	{
		scanCodes[scanCodeIndex] = 37; scanCodeIndex++;
    2910:	009a      	lsls	r2, r3, #2
    2912:	2125      	movs	r1, #37	; 0x25
    2914:	4668      	mov	r0, sp
    2916:	5011      	str	r1, [r2, r0]
    2918:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL4) != 0)
    291a:	4a63      	ldr	r2, [pc, #396]	; (2aa8 <STACK_SIZE+0xaa8>)
    291c:	6a12      	ldr	r2, [r2, #32]
    291e:	02d2      	lsls	r2, r2, #11
    2920:	d504      	bpl.n	292c <STACK_SIZE+0x92c>
	{
		scanCodes[scanCodeIndex] = 47; scanCodeIndex++;
    2922:	009a      	lsls	r2, r3, #2
    2924:	212f      	movs	r1, #47	; 0x2f
    2926:	4668      	mov	r0, sp
    2928:	5011      	str	r1, [r2, r0]
    292a:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL5) != 0)
    292c:	4a5e      	ldr	r2, [pc, #376]	; (2aa8 <STACK_SIZE+0xaa8>)
    292e:	6a12      	ldr	r2, [r2, #32]
    2930:	0292      	lsls	r2, r2, #10
    2932:	d504      	bpl.n	293e <STACK_SIZE+0x93e>
	{
		scanCodes[scanCodeIndex] = 57; scanCodeIndex++;
    2934:	009a      	lsls	r2, r3, #2
    2936:	2139      	movs	r1, #57	; 0x39
    2938:	4668      	mov	r0, sp
    293a:	5011      	str	r1, [r2, r0]
    293c:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL6) != 0)
    293e:	4a5a      	ldr	r2, [pc, #360]	; (2aa8 <STACK_SIZE+0xaa8>)
    2940:	6a12      	ldr	r2, [r2, #32]
    2942:	0112      	lsls	r2, r2, #4
    2944:	d504      	bpl.n	2950 <STACK_SIZE+0x950>
	{
		scanCodes[scanCodeIndex] = 67; scanCodeIndex++;
    2946:	009a      	lsls	r2, r3, #2
    2948:	2143      	movs	r1, #67	; 0x43
    294a:	4668      	mov	r0, sp
    294c:	5011      	str	r1, [r2, r0]
    294e:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_ROW7;
    2950:	2180      	movs	r1, #128	; 0x80
    2952:	0109      	lsls	r1, r1, #4
    2954:	4a52      	ldr	r2, [pc, #328]	; (2aa0 <STACK_SIZE+0xaa0>)
    2956:	6011      	str	r1, [r2, #0]
	
	//This is row 8
	REG_PORT_OUTSET0 = KB_ROW8;
    2958:	2180      	movs	r1, #128	; 0x80
    295a:	0149      	lsls	r1, r1, #5
    295c:	4a51      	ldr	r2, [pc, #324]	; (2aa4 <STACK_SIZE+0xaa4>)
    295e:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_COL0) != 0)
    2960:	4a51      	ldr	r2, [pc, #324]	; (2aa8 <STACK_SIZE+0xaa8>)
    2962:	6a12      	ldr	r2, [r2, #32]
    2964:	03d2      	lsls	r2, r2, #15
    2966:	d504      	bpl.n	2972 <STACK_SIZE+0x972>
	{
		scanCodes[scanCodeIndex] = 8; scanCodeIndex++;
    2968:	009a      	lsls	r2, r3, #2
    296a:	2108      	movs	r1, #8
    296c:	4668      	mov	r0, sp
    296e:	5011      	str	r1, [r2, r0]
    2970:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL1) != 0)
    2972:	4a4d      	ldr	r2, [pc, #308]	; (2aa8 <STACK_SIZE+0xaa8>)
    2974:	6a12      	ldr	r2, [r2, #32]
    2976:	0392      	lsls	r2, r2, #14
    2978:	d504      	bpl.n	2984 <STACK_SIZE+0x984>
	{
		scanCodes[scanCodeIndex] = 18; scanCodeIndex++;
    297a:	009a      	lsls	r2, r3, #2
    297c:	2112      	movs	r1, #18
    297e:	4668      	mov	r0, sp
    2980:	5011      	str	r1, [r2, r0]
    2982:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL2) != 0)
    2984:	4a48      	ldr	r2, [pc, #288]	; (2aa8 <STACK_SIZE+0xaa8>)
    2986:	6a12      	ldr	r2, [r2, #32]
    2988:	0352      	lsls	r2, r2, #13
    298a:	d504      	bpl.n	2996 <STACK_SIZE+0x996>
	{
		scanCodes[scanCodeIndex] = 28; scanCodeIndex++;
    298c:	009a      	lsls	r2, r3, #2
    298e:	211c      	movs	r1, #28
    2990:	4668      	mov	r0, sp
    2992:	5011      	str	r1, [r2, r0]
    2994:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL3) != 0)
    2996:	4a44      	ldr	r2, [pc, #272]	; (2aa8 <STACK_SIZE+0xaa8>)
    2998:	6a12      	ldr	r2, [r2, #32]
    299a:	0312      	lsls	r2, r2, #12
    299c:	d504      	bpl.n	29a8 <STACK_SIZE+0x9a8>
	{
		scanCodes[scanCodeIndex] = 38; scanCodeIndex++;
    299e:	009a      	lsls	r2, r3, #2
    29a0:	2126      	movs	r1, #38	; 0x26
    29a2:	4668      	mov	r0, sp
    29a4:	5011      	str	r1, [r2, r0]
    29a6:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL4) != 0)
    29a8:	4a3f      	ldr	r2, [pc, #252]	; (2aa8 <STACK_SIZE+0xaa8>)
    29aa:	6a12      	ldr	r2, [r2, #32]
    29ac:	02d2      	lsls	r2, r2, #11
    29ae:	d504      	bpl.n	29ba <STACK_SIZE+0x9ba>
	{
		scanCodes[scanCodeIndex] = 48; scanCodeIndex++;
    29b0:	009a      	lsls	r2, r3, #2
    29b2:	2130      	movs	r1, #48	; 0x30
    29b4:	4668      	mov	r0, sp
    29b6:	5011      	str	r1, [r2, r0]
    29b8:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL5) != 0)
    29ba:	4a3b      	ldr	r2, [pc, #236]	; (2aa8 <STACK_SIZE+0xaa8>)
    29bc:	6a12      	ldr	r2, [r2, #32]
    29be:	0292      	lsls	r2, r2, #10
    29c0:	d504      	bpl.n	29cc <STACK_SIZE+0x9cc>
	{
		scanCodes[scanCodeIndex] = 58; scanCodeIndex++;
    29c2:	009a      	lsls	r2, r3, #2
    29c4:	213a      	movs	r1, #58	; 0x3a
    29c6:	4668      	mov	r0, sp
    29c8:	5011      	str	r1, [r2, r0]
    29ca:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL6) != 0)
    29cc:	4a36      	ldr	r2, [pc, #216]	; (2aa8 <STACK_SIZE+0xaa8>)
    29ce:	6a12      	ldr	r2, [r2, #32]
    29d0:	0112      	lsls	r2, r2, #4
    29d2:	d504      	bpl.n	29de <STACK_SIZE+0x9de>
	{
		scanCodes[scanCodeIndex] = 68; scanCodeIndex++;
    29d4:	009a      	lsls	r2, r3, #2
    29d6:	2144      	movs	r1, #68	; 0x44
    29d8:	4668      	mov	r0, sp
    29da:	5011      	str	r1, [r2, r0]
    29dc:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_ROW8;
    29de:	2180      	movs	r1, #128	; 0x80
    29e0:	0149      	lsls	r1, r1, #5
    29e2:	4a2f      	ldr	r2, [pc, #188]	; (2aa0 <STACK_SIZE+0xaa0>)
    29e4:	6011      	str	r1, [r2, #0]

	//This is row 9
	REG_PORT_OUTSET0 = KB_ROW9;
    29e6:	2180      	movs	r1, #128	; 0x80
    29e8:	0189      	lsls	r1, r1, #6
    29ea:	4a2e      	ldr	r2, [pc, #184]	; (2aa4 <STACK_SIZE+0xaa4>)
    29ec:	6011      	str	r1, [r2, #0]
	if((PORT->Group[0].IN.reg & KB_COL0) != 0)
    29ee:	4a2e      	ldr	r2, [pc, #184]	; (2aa8 <STACK_SIZE+0xaa8>)
    29f0:	6a12      	ldr	r2, [r2, #32]
    29f2:	03d2      	lsls	r2, r2, #15
    29f4:	d504      	bpl.n	2a00 <STACK_SIZE+0xa00>
	{
		scanCodes[scanCodeIndex] = 9; scanCodeIndex++;
    29f6:	009a      	lsls	r2, r3, #2
    29f8:	2109      	movs	r1, #9
    29fa:	4668      	mov	r0, sp
    29fc:	5011      	str	r1, [r2, r0]
    29fe:	3301      	adds	r3, #1
	if((PORT->Group[0].IN.reg & KB_COL1) != 0)
	{
		scanCodes[scanCodeIndex] = 19; scanCodeIndex++;
	}
	*/
	if((PORT->Group[0].IN.reg & KB_COL2) != 0)
    2a00:	4a29      	ldr	r2, [pc, #164]	; (2aa8 <STACK_SIZE+0xaa8>)
    2a02:	6a12      	ldr	r2, [r2, #32]
    2a04:	0352      	lsls	r2, r2, #13
    2a06:	d504      	bpl.n	2a12 <STACK_SIZE+0xa12>
	{
		scanCodes[scanCodeIndex] = 29; scanCodeIndex++;
    2a08:	009a      	lsls	r2, r3, #2
    2a0a:	211d      	movs	r1, #29
    2a0c:	4668      	mov	r0, sp
    2a0e:	5011      	str	r1, [r2, r0]
    2a10:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL3) != 0)
    2a12:	4a25      	ldr	r2, [pc, #148]	; (2aa8 <STACK_SIZE+0xaa8>)
    2a14:	6a12      	ldr	r2, [r2, #32]
    2a16:	0312      	lsls	r2, r2, #12
    2a18:	d504      	bpl.n	2a24 <STACK_SIZE+0xa24>
	{
		scanCodes[scanCodeIndex] = 39; scanCodeIndex++;
    2a1a:	009a      	lsls	r2, r3, #2
    2a1c:	2127      	movs	r1, #39	; 0x27
    2a1e:	4668      	mov	r0, sp
    2a20:	5011      	str	r1, [r2, r0]
    2a22:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL4) != 0)
    2a24:	4a20      	ldr	r2, [pc, #128]	; (2aa8 <STACK_SIZE+0xaa8>)
    2a26:	6a12      	ldr	r2, [r2, #32]
    2a28:	02d2      	lsls	r2, r2, #11
    2a2a:	d504      	bpl.n	2a36 <STACK_SIZE+0xa36>
	{
		scanCodes[scanCodeIndex] = 49; scanCodeIndex++;
    2a2c:	009a      	lsls	r2, r3, #2
    2a2e:	2131      	movs	r1, #49	; 0x31
    2a30:	4668      	mov	r0, sp
    2a32:	5011      	str	r1, [r2, r0]
    2a34:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL5) != 0)
    2a36:	4a1c      	ldr	r2, [pc, #112]	; (2aa8 <STACK_SIZE+0xaa8>)
    2a38:	6a12      	ldr	r2, [r2, #32]
    2a3a:	0292      	lsls	r2, r2, #10
    2a3c:	d504      	bpl.n	2a48 <STACK_SIZE+0xa48>
	{
		scanCodes[scanCodeIndex] = 59; scanCodeIndex++;
    2a3e:	009a      	lsls	r2, r3, #2
    2a40:	213b      	movs	r1, #59	; 0x3b
    2a42:	4668      	mov	r0, sp
    2a44:	5011      	str	r1, [r2, r0]
    2a46:	3301      	adds	r3, #1
	}
	if((PORT->Group[0].IN.reg & KB_COL6) != 0)
    2a48:	4a17      	ldr	r2, [pc, #92]	; (2aa8 <STACK_SIZE+0xaa8>)
    2a4a:	6a12      	ldr	r2, [r2, #32]
    2a4c:	0112      	lsls	r2, r2, #4
    2a4e:	d504      	bpl.n	2a5a <STACK_SIZE+0xa5a>
	{
		scanCodes[scanCodeIndex] = 69; scanCodeIndex++;
    2a50:	009a      	lsls	r2, r3, #2
    2a52:	2145      	movs	r1, #69	; 0x45
    2a54:	4668      	mov	r0, sp
    2a56:	5011      	str	r1, [r2, r0]
    2a58:	3301      	adds	r3, #1
	}
	REG_PORT_OUTCLR0 = KB_ROW9;
    2a5a:	2180      	movs	r1, #128	; 0x80
    2a5c:	0189      	lsls	r1, r1, #6
    2a5e:	4a10      	ldr	r2, [pc, #64]	; (2aa0 <STACK_SIZE+0xaa0>)
    2a60:	6011      	str	r1, [r2, #0]
		
			
	for(int i = 0; i < scanCodeIndex; i++)
    2a62:	2b00      	cmp	r3, #0
    2a64:	dd12      	ble.n	2a8c <STACK_SIZE+0xa8c>
    2a66:	466e      	mov	r6, sp
    2a68:	4d10      	ldr	r5, [pc, #64]	; (2aac <STACK_SIZE+0xaac>)
    2a6a:	18ec      	adds	r4, r5, r3
		if(scanCodeBuffer[i] == scanCode)
    2a6c:	002f      	movs	r7, r5
	{
		if(!bufferContains(scanCodes[i]))
		{
			
			scanCodeBuffer[i] = scanCodes[i];
			printf("%i \t", scanCodes[i]);
    2a6e:	4b10      	ldr	r3, [pc, #64]	; (2ab0 <STACK_SIZE+0xab0>)
    2a70:	4698      	mov	r8, r3
    2a72:	e003      	b.n	2a7c <STACK_SIZE+0xa7c>
    2a74:	3604      	adds	r6, #4
    2a76:	3501      	adds	r5, #1
	for(int i = 0; i < scanCodeIndex; i++)
    2a78:	42a5      	cmp	r5, r4
    2a7a:	d007      	beq.n	2a8c <STACK_SIZE+0xa8c>
		if(!bufferContains(scanCodes[i]))
    2a7c:	6831      	ldr	r1, [r6, #0]
		if(scanCodeBuffer[i] == scanCode)
    2a7e:	783b      	ldrb	r3, [r7, #0]
		if(!bufferContains(scanCodes[i]))
    2a80:	4299      	cmp	r1, r3
    2a82:	d0f7      	beq.n	2a74 <STACK_SIZE+0xa74>
			scanCodeBuffer[i] = scanCodes[i];
    2a84:	7029      	strb	r1, [r5, #0]
			printf("%i \t", scanCodes[i]);
    2a86:	480b      	ldr	r0, [pc, #44]	; (2ab4 <STACK_SIZE+0xab4>)
    2a88:	47c0      	blx	r8
    2a8a:	e7f3      	b.n	2a74 <STACK_SIZE+0xa74>
		}
	}
	printf("\n\r");
    2a8c:	480a      	ldr	r0, [pc, #40]	; (2ab8 <STACK_SIZE+0xab8>)
    2a8e:	4b08      	ldr	r3, [pc, #32]	; (2ab0 <STACK_SIZE+0xab0>)
    2a90:	4798      	blx	r3
}
    2a92:	b047      	add	sp, #284	; 0x11c
    2a94:	bc3c      	pop	{r2, r3, r4, r5}
    2a96:	4690      	mov	r8, r2
    2a98:	4699      	mov	r9, r3
    2a9a:	46a2      	mov	sl, r4
    2a9c:	46ab      	mov	fp, r5
    2a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aa0:	41004414 	.word	0x41004414
    2aa4:	41004418 	.word	0x41004418
    2aa8:	41004400 	.word	0x41004400
    2aac:	20000024 	.word	0x20000024
    2ab0:	00003eb9 	.word	0x00003eb9
    2ab4:	00006cb0 	.word	0x00006cb0
    2ab8:	00006cb8 	.word	0x00006cb8

00002abc <LCD_Write_Bus>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Write_Bus(char VH, char VL)
{
    2abc:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2abe:	4c06      	ldr	r4, [pc, #24]	; (2ad8 <LCD_Write_Bus+0x1c>)
    2ac0:	4b06      	ldr	r3, [pc, #24]	; (2adc <LCD_Write_Bus+0x20>)
    2ac2:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2ac4:	0200      	lsls	r0, r0, #8
    2ac6:	4301      	orrs	r1, r0
    2ac8:	4b05      	ldr	r3, [pc, #20]	; (2ae0 <LCD_Write_Bus+0x24>)
    2aca:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2acc:	2280      	movs	r2, #128	; 0x80
    2ace:	0292      	lsls	r2, r2, #10
    2ad0:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2ad2:	601a      	str	r2, [r3, #0]
}
    2ad4:	bd10      	pop	{r4, pc}
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	41004494 	.word	0x41004494
    2adc:	0000ffff 	.word	0x0000ffff
    2ae0:	41004498 	.word	0x41004498

00002ae4 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2ae4:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2ae6:	2280      	movs	r2, #128	; 0x80
    2ae8:	0412      	lsls	r2, r2, #16
    2aea:	4b02      	ldr	r3, [pc, #8]	; (2af4 <LCD_Write_COM16+0x10>)
    2aec:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2aee:	4b02      	ldr	r3, [pc, #8]	; (2af8 <LCD_Write_COM16+0x14>)
    2af0:	4798      	blx	r3
}
    2af2:	bd10      	pop	{r4, pc}
    2af4:	41004494 	.word	0x41004494
    2af8:	00002abd 	.word	0x00002abd

00002afc <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2afc:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2afe:	2280      	movs	r2, #128	; 0x80
    2b00:	0412      	lsls	r2, r2, #16
    2b02:	4b02      	ldr	r3, [pc, #8]	; (2b0c <LCD_Write_DATA16+0x10>)
    2b04:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2b06:	4b02      	ldr	r3, [pc, #8]	; (2b10 <LCD_Write_DATA16+0x14>)
    2b08:	4798      	blx	r3
}
    2b0a:	bd10      	pop	{r4, pc}
    2b0c:	41004498 	.word	0x41004498
    2b10:	00002abd 	.word	0x00002abd

00002b14 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2b14:	b510      	push	{r4, lr}
    2b16:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2b18:	2280      	movs	r2, #128	; 0x80
    2b1a:	0412      	lsls	r2, r2, #16
    2b1c:	4b02      	ldr	r3, [pc, #8]	; (2b28 <LCD_Write_DATA8+0x14>)
    2b1e:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2b20:	2000      	movs	r0, #0
    2b22:	4b02      	ldr	r3, [pc, #8]	; (2b2c <LCD_Write_DATA8+0x18>)
    2b24:	4798      	blx	r3
}
    2b26:	bd10      	pop	{r4, pc}
    2b28:	41004498 	.word	0x41004498
    2b2c:	00002abd 	.word	0x00002abd

00002b30 <setDrawDirection>:
{
    2b30:	b570      	push	{r4, r5, r6, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2b32:	4b09      	ldr	r3, [pc, #36]	; (2b58 <setDrawDirection+0x28>)
    2b34:	2580      	movs	r5, #128	; 0x80
    2b36:	03ed      	lsls	r5, r5, #15
    2b38:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2b3a:	2680      	movs	r6, #128	; 0x80
    2b3c:	0436      	lsls	r6, r6, #16
    2b3e:	601e      	str	r6, [r3, #0]
	LCD_Write_COM16(0x36, 0x00);
    2b40:	2100      	movs	r1, #0
    2b42:	2036      	movs	r0, #54	; 0x36
    2b44:	4b05      	ldr	r3, [pc, #20]	; (2b5c <setDrawDirection+0x2c>)
    2b46:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    2b48:	4c05      	ldr	r4, [pc, #20]	; (2b60 <setDrawDirection+0x30>)
    2b4a:	6026      	str	r6, [r4, #0]
	LCD_Write_DATA8(0x80);
    2b4c:	2080      	movs	r0, #128	; 0x80
    2b4e:	4b05      	ldr	r3, [pc, #20]	; (2b64 <setDrawDirection+0x34>)
    2b50:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2b52:	6025      	str	r5, [r4, #0]
}
    2b54:	bd70      	pop	{r4, r5, r6, pc}
    2b56:	46c0      	nop			; (mov r8, r8)
    2b58:	41004494 	.word	0x41004494
    2b5c:	00002ae5 	.word	0x00002ae5
    2b60:	41004498 	.word	0x41004498
    2b64:	00002b15 	.word	0x00002b15

00002b68 <setPixel>:

void setPixel(uint16_t color)
{
    2b68:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2b6a:	b2c1      	uxtb	r1, r0
    2b6c:	0a00      	lsrs	r0, r0, #8
    2b6e:	4b01      	ldr	r3, [pc, #4]	; (2b74 <setPixel+0xc>)
    2b70:	4798      	blx	r3
}
    2b72:	bd10      	pop	{r4, pc}
    2b74:	00002afd 	.word	0x00002afd

00002b78 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2b78:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
		
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2b7a:	4c19      	ldr	r4, [pc, #100]	; (2be0 <LCD_Fast_Fill+0x68>)
    2b7c:	4b19      	ldr	r3, [pc, #100]	; (2be4 <LCD_Fast_Fill+0x6c>)
    2b7e:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    2b80:	0200      	lsls	r0, r0, #8
    2b82:	4301      	orrs	r1, r0
    2b84:	4b18      	ldr	r3, [pc, #96]	; (2be8 <LCD_Fast_Fill+0x70>)
    2b86:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2b88:	17d3      	asrs	r3, r2, #31
    2b8a:	260f      	movs	r6, #15
    2b8c:	401e      	ands	r6, r3
    2b8e:	18b6      	adds	r6, r6, r2
    2b90:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    2b92:	2500      	movs	r5, #0
    2b94:	2e00      	cmp	r6, #0
    2b96:	dd0c      	ble.n	2bb2 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2b98:	4c12      	ldr	r4, [pc, #72]	; (2be4 <LCD_Fast_Fill+0x6c>)
    2b9a:	2180      	movs	r1, #128	; 0x80
    2b9c:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2b9e:	4812      	ldr	r0, [pc, #72]	; (2be8 <LCD_Fast_Fill+0x70>)
{
    2ba0:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    2ba2:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2ba4:	6001      	str	r1, [r0, #0]
    2ba6:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d1fa      	bne.n	2ba2 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2bac:	3501      	adds	r5, #1
    2bae:	42ae      	cmp	r6, r5
    2bb0:	d1f6      	bne.n	2ba0 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    2bb2:	0713      	lsls	r3, r2, #28
    2bb4:	d013      	beq.n	2bde <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2bb6:	17d3      	asrs	r3, r2, #31
    2bb8:	0f1b      	lsrs	r3, r3, #28
    2bba:	18d2      	adds	r2, r2, r3
    2bbc:	210f      	movs	r1, #15
    2bbe:	4011      	ands	r1, r2
    2bc0:	1ac9      	subs	r1, r1, r3
    2bc2:	1c4b      	adds	r3, r1, #1
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	dd0a      	ble.n	2bde <LCD_Fast_Fill+0x66>
    2bc8:	0019      	movs	r1, r3
    2bca:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2bcc:	4c05      	ldr	r4, [pc, #20]	; (2be4 <LCD_Fast_Fill+0x6c>)
    2bce:	2280      	movs	r2, #128	; 0x80
    2bd0:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    2bd2:	4805      	ldr	r0, [pc, #20]	; (2be8 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2bd4:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    2bd6:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2bd8:	3301      	adds	r3, #1
    2bda:	4299      	cmp	r1, r3
    2bdc:	d1fa      	bne.n	2bd4 <LCD_Fast_Fill+0x5c>
	}
}
    2bde:	bd70      	pop	{r4, r5, r6, pc}
    2be0:	0000ffff 	.word	0x0000ffff
    2be4:	41004494 	.word	0x41004494
    2be8:	41004498 	.word	0x41004498

00002bec <setXY>:
	back_Color_High = (color >> 8);
	back_Color_Low = (color & 0xFF);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bee:	b083      	sub	sp, #12
    2bf0:	000e      	movs	r6, r1
    2bf2:	9300      	str	r3, [sp, #0]
	
	SwapUint16(x1, y1);
	SwapUint16(x2, y2);
	y1=display_Y_size-y1;
    2bf4:	4b1c      	ldr	r3, [pc, #112]	; (2c68 <setXY+0x7c>)
    2bf6:	881d      	ldrh	r5, [r3, #0]
    2bf8:	1a28      	subs	r0, r5, r0
    2bfa:	b287      	uxth	r7, r0
	y2=display_Y_size-y2;
    2bfc:	1aad      	subs	r5, r5, r2
    2bfe:	b2ad      	uxth	r5, r5
	SwapUint16(y1, y2);
	
	
	LCD_Write_COM16(0x2a,0x00);
    2c00:	2100      	movs	r1, #0
    2c02:	202a      	movs	r0, #42	; 0x2a
    2c04:	4c19      	ldr	r4, [pc, #100]	; (2c6c <setXY+0x80>)
    2c06:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2c08:	9601      	str	r6, [sp, #4]
    2c0a:	0a30      	lsrs	r0, r6, #8
    2c0c:	4e18      	ldr	r6, [pc, #96]	; (2c70 <setXY+0x84>)
    2c0e:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x01);
    2c10:	2101      	movs	r1, #1
    2c12:	202a      	movs	r0, #42	; 0x2a
    2c14:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2c16:	466b      	mov	r3, sp
    2c18:	7918      	ldrb	r0, [r3, #4]
    2c1a:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x02);
    2c1c:	2102      	movs	r1, #2
    2c1e:	202a      	movs	r0, #42	; 0x2a
    2c20:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    2c22:	9b00      	ldr	r3, [sp, #0]
    2c24:	0a18      	lsrs	r0, r3, #8
    2c26:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x03);
    2c28:	2103      	movs	r1, #3
    2c2a:	202a      	movs	r0, #42	; 0x2a
    2c2c:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2c2e:	466b      	mov	r3, sp
    2c30:	7818      	ldrb	r0, [r3, #0]
    2c32:	47b0      	blx	r6

	LCD_Write_COM16(0x2b,0x00);
    2c34:	2100      	movs	r1, #0
    2c36:	202b      	movs	r0, #43	; 0x2b
    2c38:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2c3a:	0a28      	lsrs	r0, r5, #8
    2c3c:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x01);
    2c3e:	2101      	movs	r1, #1
    2c40:	202b      	movs	r0, #43	; 0x2b
    2c42:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2c44:	b2e8      	uxtb	r0, r5
    2c46:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x02);
    2c48:	2102      	movs	r1, #2
    2c4a:	202b      	movs	r0, #43	; 0x2b
    2c4c:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2c4e:	0a38      	lsrs	r0, r7, #8
    2c50:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x03);
    2c52:	2103      	movs	r1, #3
    2c54:	202b      	movs	r0, #43	; 0x2b
    2c56:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2c58:	b2f8      	uxtb	r0, r7
    2c5a:	47b0      	blx	r6

	LCD_Write_COM16(0x2c,0x00);
    2c5c:	2100      	movs	r1, #0
    2c5e:	202c      	movs	r0, #44	; 0x2c
    2c60:	47a0      	blx	r4
    2c62:	b003      	add	sp, #12
    2c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	2000000c 	.word	0x2000000c
    2c6c:	00002ae5 	.word	0x00002ae5
    2c70:	00002b15 	.word	0x00002b15

00002c74 <drawCursorBuffer>:
{
    2c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c76:	46c6      	mov	lr, r8
    2c78:	b500      	push	{lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2c7a:	4c2d      	ldr	r4, [pc, #180]	; (2d30 <drawCursorBuffer+0xbc>)
    2c7c:	2580      	movs	r5, #128	; 0x80
    2c7e:	03ed      	lsls	r5, r5, #15
    2c80:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2c82:	2780      	movs	r7, #128	; 0x80
    2c84:	043f      	lsls	r7, r7, #16
    2c86:	6027      	str	r7, [r4, #0]
	LCD_Write_COM16(0x36, 0x00);
    2c88:	2100      	movs	r1, #0
    2c8a:	2036      	movs	r0, #54	; 0x36
    2c8c:	4b29      	ldr	r3, [pc, #164]	; (2d34 <drawCursorBuffer+0xc0>)
    2c8e:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    2c90:	4e29      	ldr	r6, [pc, #164]	; (2d38 <drawCursorBuffer+0xc4>)
    2c92:	6037      	str	r7, [r6, #0]
	LCD_Write_DATA8(0x00);
    2c94:	2000      	movs	r0, #0
    2c96:	4b29      	ldr	r3, [pc, #164]	; (2d3c <drawCursorBuffer+0xc8>)
    2c98:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2c9a:	6035      	str	r5, [r6, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2c9c:	6025      	str	r5, [r4, #0]
	setXY((xCharPos*10)-1, yCharPos*20, ((xCharPos+1)*10)-1, (yCharPos+1)*20);
    2c9e:	4b28      	ldr	r3, [pc, #160]	; (2d40 <drawCursorBuffer+0xcc>)
    2ca0:	7818      	ldrb	r0, [r3, #0]
    2ca2:	4b28      	ldr	r3, [pc, #160]	; (2d44 <drawCursorBuffer+0xd0>)
    2ca4:	7819      	ldrb	r1, [r3, #0]
    2ca6:	1c4b      	adds	r3, r1, #1
    2ca8:	2414      	movs	r4, #20
    2caa:	4363      	muls	r3, r4
    2cac:	b29b      	uxth	r3, r3
    2cae:	1c42      	adds	r2, r0, #1
    2cb0:	0095      	lsls	r5, r2, #2
    2cb2:	1952      	adds	r2, r2, r5
    2cb4:	0052      	lsls	r2, r2, #1
    2cb6:	3a01      	subs	r2, #1
    2cb8:	b292      	uxth	r2, r2
    2cba:	4361      	muls	r1, r4
    2cbc:	b289      	uxth	r1, r1
    2cbe:	0084      	lsls	r4, r0, #2
    2cc0:	1900      	adds	r0, r0, r4
    2cc2:	0040      	lsls	r0, r0, #1
    2cc4:	3801      	subs	r0, #1
    2cc6:	b280      	uxth	r0, r0
    2cc8:	4c1f      	ldr	r4, [pc, #124]	; (2d48 <drawCursorBuffer+0xd4>)
    2cca:	47a0      	blx	r4
    2ccc:	4c1f      	ldr	r4, [pc, #124]	; (2d4c <drawCursorBuffer+0xd8>)
    2cce:	0025      	movs	r5, r4
    2cd0:	35c8      	adds	r5, #200	; 0xc8
		setPixel((back_Color_High<<8)|back_Color_Low);
    2cd2:	4b1f      	ldr	r3, [pc, #124]	; (2d50 <drawCursorBuffer+0xdc>)
    2cd4:	4698      	mov	r8, r3
    2cd6:	4f1f      	ldr	r7, [pc, #124]	; (2d54 <drawCursorBuffer+0xe0>)
    2cd8:	4e1f      	ldr	r6, [pc, #124]	; (2d58 <drawCursorBuffer+0xe4>)
    2cda:	e00b      	b.n	2cf4 <drawCursorBuffer+0x80>
		setPixel((fore_Color_High<<8)|fore_Color_Low);
    2cdc:	4b1f      	ldr	r3, [pc, #124]	; (2d5c <drawCursorBuffer+0xe8>)
    2cde:	8818      	ldrh	r0, [r3, #0]
    2ce0:	0200      	lsls	r0, r0, #8
    2ce2:	4b1f      	ldr	r3, [pc, #124]	; (2d60 <drawCursorBuffer+0xec>)
    2ce4:	881b      	ldrh	r3, [r3, #0]
    2ce6:	4318      	orrs	r0, r3
    2ce8:	b280      	uxth	r0, r0
    2cea:	4b1b      	ldr	r3, [pc, #108]	; (2d58 <drawCursorBuffer+0xe4>)
    2cec:	4798      	blx	r3
    2cee:	3401      	adds	r4, #1
	for(uint16_t i = 0 ; i < 200 ; i++)
    2cf0:	42ac      	cmp	r4, r5
    2cf2:	d00a      	beq.n	2d0a <drawCursorBuffer+0x96>
		if((cursorBuffer[i] == 0xFF))
    2cf4:	7823      	ldrb	r3, [r4, #0]
    2cf6:	2bff      	cmp	r3, #255	; 0xff
    2cf8:	d0f0      	beq.n	2cdc <drawCursorBuffer+0x68>
		setPixel((back_Color_High<<8)|back_Color_Low);
    2cfa:	4643      	mov	r3, r8
    2cfc:	8818      	ldrh	r0, [r3, #0]
    2cfe:	0200      	lsls	r0, r0, #8
    2d00:	883b      	ldrh	r3, [r7, #0]
    2d02:	4318      	orrs	r0, r3
    2d04:	b280      	uxth	r0, r0
    2d06:	47b0      	blx	r6
    2d08:	e7f1      	b.n	2cee <drawCursorBuffer+0x7a>
	REG_PORT_OUTCLR1 = LCD_DC;
    2d0a:	2580      	movs	r5, #128	; 0x80
    2d0c:	042d      	lsls	r5, r5, #16
    2d0e:	4b08      	ldr	r3, [pc, #32]	; (2d30 <drawCursorBuffer+0xbc>)
    2d10:	601d      	str	r5, [r3, #0]
	LCD_Write_COM16(0x36, 0x00);
    2d12:	2100      	movs	r1, #0
    2d14:	2036      	movs	r0, #54	; 0x36
    2d16:	4b07      	ldr	r3, [pc, #28]	; (2d34 <drawCursorBuffer+0xc0>)
    2d18:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    2d1a:	4c07      	ldr	r4, [pc, #28]	; (2d38 <drawCursorBuffer+0xc4>)
    2d1c:	6025      	str	r5, [r4, #0]
	LCD_Write_DATA8(0x80);
    2d1e:	2080      	movs	r0, #128	; 0x80
    2d20:	4b06      	ldr	r3, [pc, #24]	; (2d3c <drawCursorBuffer+0xc8>)
    2d22:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2d24:	2380      	movs	r3, #128	; 0x80
    2d26:	03db      	lsls	r3, r3, #15
    2d28:	6023      	str	r3, [r4, #0]
}
    2d2a:	bc04      	pop	{r2}
    2d2c:	4690      	mov	r8, r2
    2d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d30:	41004494 	.word	0x41004494
    2d34:	00002ae5 	.word	0x00002ae5
    2d38:	41004498 	.word	0x41004498
    2d3c:	00002b15 	.word	0x00002b15
    2d40:	2000017c 	.word	0x2000017c
    2d44:	2000017d 	.word	0x2000017d
    2d48:	00002bed 	.word	0x00002bed
    2d4c:	200001e8 	.word	0x200001e8
    2d50:	2000030a 	.word	0x2000030a
    2d54:	200002e4 	.word	0x200002e4
    2d58:	00002b69 	.word	0x00002b69
    2d5c:	200002e6 	.word	0x200002e6
    2d60:	20000308 	.word	0x20000308

00002d64 <moveCursor>:
{
    2d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d66:	46de      	mov	lr, fp
    2d68:	4657      	mov	r7, sl
    2d6a:	464e      	mov	r6, r9
    2d6c:	4645      	mov	r5, r8
    2d6e:	b5e0      	push	{r5, r6, r7, lr}
    2d70:	b083      	sub	sp, #12
    2d72:	0007      	movs	r7, r0
    2d74:	9001      	str	r0, [sp, #4]
    2d76:	468b      	mov	fp, r1
	REG_PORT_OUTCLR1 = LCD_CS;
    2d78:	4d40      	ldr	r5, [pc, #256]	; (2e7c <moveCursor+0x118>)
    2d7a:	2380      	movs	r3, #128	; 0x80
    2d7c:	03db      	lsls	r3, r3, #15
    2d7e:	469a      	mov	sl, r3
    2d80:	602b      	str	r3, [r5, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2d82:	2680      	movs	r6, #128	; 0x80
    2d84:	0436      	lsls	r6, r6, #16
    2d86:	602e      	str	r6, [r5, #0]
	LCD_Write_COM16(0x36, 0x00);
    2d88:	2100      	movs	r1, #0
    2d8a:	2036      	movs	r0, #54	; 0x36
    2d8c:	4b3c      	ldr	r3, [pc, #240]	; (2e80 <moveCursor+0x11c>)
    2d8e:	4698      	mov	r8, r3
    2d90:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    2d92:	4c3c      	ldr	r4, [pc, #240]	; (2e84 <moveCursor+0x120>)
    2d94:	6026      	str	r6, [r4, #0]
	LCD_Write_DATA8(0x00);
    2d96:	2000      	movs	r0, #0
    2d98:	4b3b      	ldr	r3, [pc, #236]	; (2e88 <moveCursor+0x124>)
    2d9a:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2d9c:	4653      	mov	r3, sl
    2d9e:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2da0:	602b      	str	r3, [r5, #0]
	setXY(x*10, y*20, ((x+1)*10), (y+1)*20);
    2da2:	465b      	mov	r3, fp
    2da4:	3301      	adds	r3, #1
    2da6:	2114      	movs	r1, #20
    2da8:	434b      	muls	r3, r1
    2daa:	b29b      	uxth	r3, r3
    2dac:	003a      	movs	r2, r7
    2dae:	3201      	adds	r2, #1
    2db0:	0090      	lsls	r0, r2, #2
    2db2:	1812      	adds	r2, r2, r0
    2db4:	0052      	lsls	r2, r2, #1
    2db6:	b292      	uxth	r2, r2
    2db8:	4658      	mov	r0, fp
    2dba:	4341      	muls	r1, r0
    2dbc:	b289      	uxth	r1, r1
    2dbe:	00b8      	lsls	r0, r7, #2
    2dc0:	46bc      	mov	ip, r7
    2dc2:	4460      	add	r0, ip
    2dc4:	0040      	lsls	r0, r0, #1
    2dc6:	4f31      	ldr	r7, [pc, #196]	; (2e8c <moveCursor+0x128>)
    2dc8:	47b8      	blx	r7
	LCD_Write_COM16(0x2E,0x00);
    2dca:	2100      	movs	r1, #0
    2dcc:	202e      	movs	r0, #46	; 0x2e
    2dce:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_DC;
    2dd0:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2dd2:	2380      	movs	r3, #128	; 0x80
    2dd4:	025b      	lsls	r3, r3, #9
    2dd6:	602b      	str	r3, [r5, #0]
	REG_PORT_OUTSET1 = LCD_RD;
    2dd8:	6023      	str	r3, [r4, #0]
	REG_PORT_DIRCLR1 = PORT_PB07;
    2dda:	2280      	movs	r2, #128	; 0x80
    2ddc:	4b2c      	ldr	r3, [pc, #176]	; (2e90 <moveCursor+0x12c>)
    2dde:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[7].bit.INEN = 1;
    2de0:	4a2c      	ldr	r2, [pc, #176]	; (2e94 <moveCursor+0x130>)
    2de2:	23c7      	movs	r3, #199	; 0xc7
    2de4:	5cd1      	ldrb	r1, [r2, r3]
    2de6:	2002      	movs	r0, #2
    2de8:	4301      	orrs	r1, r0
    2dea:	54d1      	strb	r1, [r2, r3]
	PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    2dec:	5cd1      	ldrb	r1, [r2, r3]
    2dee:	2004      	movs	r0, #4
    2df0:	4301      	orrs	r1, r0
    2df2:	54d1      	strb	r1, [r2, r3]
    2df4:	4b28      	ldr	r3, [pc, #160]	; (2e98 <moveCursor+0x134>)
    2df6:	22c9      	movs	r2, #201	; 0xc9
    2df8:	4691      	mov	r9, r2
    2dfa:	4499      	add	r9, r3
		REG_PORT_OUTCLR1 = LCD_RD;
    2dfc:	0028      	movs	r0, r5
    2dfe:	2280      	movs	r2, #128	; 0x80
    2e00:	0252      	lsls	r2, r2, #9
		REG_PORT_OUTSET1 = LCD_RD;
    2e02:	0021      	movs	r1, r4
		if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2e04:	4c23      	ldr	r4, [pc, #140]	; (2e94 <moveCursor+0x130>)
    2e06:	46a0      	mov	r8, r4
    2e08:	24a0      	movs	r4, #160	; 0xa0
    2e0a:	46a4      	mov	ip, r4
    2e0c:	2580      	movs	r5, #128	; 0x80
			cursorBuffer[pixel] = 0x00;
    2e0e:	2400      	movs	r4, #0
    2e10:	46a2      	mov	sl, r4
			cursorBuffer[pixel] = 0xFF;
    2e12:	27ff      	movs	r7, #255	; 0xff
    2e14:	e006      	b.n	2e24 <moveCursor+0xc0>
			cursorBuffer[pixel] = 0x00;
    2e16:	4654      	mov	r4, sl
    2e18:	701c      	strb	r4, [r3, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    2e1a:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTSET1 = LCD_RD;		
    2e1c:	600a      	str	r2, [r1, #0]
    2e1e:	3301      	adds	r3, #1
	for(uint8_t pixel = 0; pixel <= 200 ; pixel++)
    2e20:	454b      	cmp	r3, r9
    2e22:	d008      	beq.n	2e36 <moveCursor+0xd2>
		REG_PORT_OUTCLR1 = LCD_RD;
    2e24:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    2e26:	600a      	str	r2, [r1, #0]
		if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    2e28:	4644      	mov	r4, r8
    2e2a:	4666      	mov	r6, ip
    2e2c:	59a4      	ldr	r4, [r4, r6]
    2e2e:	4225      	tst	r5, r4
    2e30:	d0f1      	beq.n	2e16 <moveCursor+0xb2>
			cursorBuffer[pixel] = 0xFF;
    2e32:	701f      	strb	r7, [r3, #0]
    2e34:	e7f1      	b.n	2e1a <moveCursor+0xb6>
	REG_PORT_OUTSET1 = LCD_DC;
    2e36:	4c13      	ldr	r4, [pc, #76]	; (2e84 <moveCursor+0x120>)
    2e38:	2580      	movs	r5, #128	; 0x80
    2e3a:	042d      	lsls	r5, r5, #16
    2e3c:	6025      	str	r5, [r4, #0]
	REG_PORT_DIRSET1 = 0x0000FFFF;
    2e3e:	4a17      	ldr	r2, [pc, #92]	; (2e9c <moveCursor+0x138>)
    2e40:	4b17      	ldr	r3, [pc, #92]	; (2ea0 <moveCursor+0x13c>)
    2e42:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2e44:	4b0d      	ldr	r3, [pc, #52]	; (2e7c <moveCursor+0x118>)
    2e46:	601d      	str	r5, [r3, #0]
	LCD_Write_COM16(0x36, 0x00);
    2e48:	2100      	movs	r1, #0
    2e4a:	2036      	movs	r0, #54	; 0x36
    2e4c:	4b0c      	ldr	r3, [pc, #48]	; (2e80 <moveCursor+0x11c>)
    2e4e:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    2e50:	6025      	str	r5, [r4, #0]
	LCD_Write_DATA8(0x80);
    2e52:	2080      	movs	r0, #128	; 0x80
    2e54:	4b0c      	ldr	r3, [pc, #48]	; (2e88 <moveCursor+0x124>)
    2e56:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2e58:	2380      	movs	r3, #128	; 0x80
    2e5a:	03db      	lsls	r3, r3, #15
    2e5c:	6023      	str	r3, [r4, #0]
	xCharPos = x;
    2e5e:	4b11      	ldr	r3, [pc, #68]	; (2ea4 <moveCursor+0x140>)
    2e60:	466a      	mov	r2, sp
    2e62:	7912      	ldrb	r2, [r2, #4]
    2e64:	701a      	strb	r2, [r3, #0]
	yCharPos = y;
    2e66:	4b10      	ldr	r3, [pc, #64]	; (2ea8 <moveCursor+0x144>)
    2e68:	465a      	mov	r2, fp
    2e6a:	701a      	strb	r2, [r3, #0]
}
    2e6c:	b003      	add	sp, #12
    2e6e:	bc3c      	pop	{r2, r3, r4, r5}
    2e70:	4690      	mov	r8, r2
    2e72:	4699      	mov	r9, r3
    2e74:	46a2      	mov	sl, r4
    2e76:	46ab      	mov	fp, r5
    2e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	41004494 	.word	0x41004494
    2e80:	00002ae5 	.word	0x00002ae5
    2e84:	41004498 	.word	0x41004498
    2e88:	00002b15 	.word	0x00002b15
    2e8c:	00002bed 	.word	0x00002bed
    2e90:	41004484 	.word	0x41004484
    2e94:	41004400 	.word	0x41004400
    2e98:	200001e8 	.word	0x200001e8
    2e9c:	0000ffff 	.word	0x0000ffff
    2ea0:	41004488 	.word	0x41004488
    2ea4:	2000017c 	.word	0x2000017c
    2ea8:	2000017d 	.word	0x2000017d

00002eac <drawChar>:
{
    2eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eae:	46d6      	mov	lr, sl
    2eb0:	464f      	mov	r7, r9
    2eb2:	4646      	mov	r6, r8
    2eb4:	b5c0      	push	{r6, r7, lr}
    2eb6:	4c2f      	ldr	r4, [pc, #188]	; (2f74 <drawChar+0xc8>)
    2eb8:	44a5      	add	sp, r4
    2eba:	0004      	movs	r4, r0
	const uint8_t TermFont[256][25] = {
    2ebc:	22c8      	movs	r2, #200	; 0xc8
    2ebe:	0152      	lsls	r2, r2, #5
    2ec0:	492d      	ldr	r1, [pc, #180]	; (2f78 <drawChar+0xcc>)
    2ec2:	4668      	mov	r0, sp
    2ec4:	4b2d      	ldr	r3, [pc, #180]	; (2f7c <drawChar+0xd0>)
    2ec6:	4798      	blx	r3
	int x = abs(xCharPos-79);
    2ec8:	4b2d      	ldr	r3, [pc, #180]	; (2f80 <drawChar+0xd4>)
    2eca:	7818      	ldrb	r0, [r3, #0]
    2ecc:	384f      	subs	r0, #79	; 0x4f
    2ece:	17c3      	asrs	r3, r0, #31
    2ed0:	18c0      	adds	r0, r0, r3
    2ed2:	4058      	eors	r0, r3
	int y = (yCharPos);
    2ed4:	4b2b      	ldr	r3, [pc, #172]	; (2f84 <drawChar+0xd8>)
    2ed6:	7819      	ldrb	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2ed8:	2280      	movs	r2, #128	; 0x80
    2eda:	03d2      	lsls	r2, r2, #15
    2edc:	4b2a      	ldr	r3, [pc, #168]	; (2f88 <drawChar+0xdc>)
    2ede:	601a      	str	r2, [r3, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2ee0:	0083      	lsls	r3, r0, #2
    2ee2:	18c0      	adds	r0, r0, r3
    2ee4:	0040      	lsls	r0, r0, #1
    2ee6:	b280      	uxth	r0, r0
    2ee8:	2314      	movs	r3, #20
    2eea:	4359      	muls	r1, r3
    2eec:	000b      	movs	r3, r1
    2eee:	3313      	adds	r3, #19
    2ef0:	b29b      	uxth	r3, r3
    2ef2:	0002      	movs	r2, r0
    2ef4:	3209      	adds	r2, #9
    2ef6:	b292      	uxth	r2, r2
    2ef8:	4d24      	ldr	r5, [pc, #144]	; (2f8c <drawChar+0xe0>)
    2efa:	47a8      	blx	r5
    2efc:	00a5      	lsls	r5, r4, #2
    2efe:	192d      	adds	r5, r5, r4
    2f00:	00ab      	lsls	r3, r5, #2
    2f02:	18ed      	adds	r5, r5, r3
    2f04:	446d      	add	r5, sp
    2f06:	3401      	adds	r4, #1
    2f08:	00a3      	lsls	r3, r4, #2
    2f0a:	191b      	adds	r3, r3, r4
    2f0c:	009a      	lsls	r2, r3, #2
    2f0e:	189b      	adds	r3, r3, r2
    2f10:	446b      	add	r3, sp
    2f12:	469a      	mov	sl, r3
				setPixel((back_Color_High<<8)|back_Color_Low);
    2f14:	4b1e      	ldr	r3, [pc, #120]	; (2f90 <drawChar+0xe4>)
    2f16:	4699      	mov	r9, r3
    2f18:	4b1e      	ldr	r3, [pc, #120]	; (2f94 <drawChar+0xe8>)
    2f1a:	4698      	mov	r8, r3
    2f1c:	4f1e      	ldr	r7, [pc, #120]	; (2f98 <drawChar+0xec>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    2f1e:	4e1f      	ldr	r6, [pc, #124]	; (2f9c <drawChar+0xf0>)
    2f20:	e019      	b.n	2f56 <drawChar+0xaa>
				setPixel((back_Color_High<<8)|back_Color_Low);
    2f22:	464b      	mov	r3, r9
    2f24:	8818      	ldrh	r0, [r3, #0]
    2f26:	0200      	lsls	r0, r0, #8
    2f28:	4643      	mov	r3, r8
    2f2a:	881b      	ldrh	r3, [r3, #0]
    2f2c:	4318      	orrs	r0, r3
    2f2e:	b280      	uxth	r0, r0
    2f30:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    2f32:	3c01      	subs	r4, #1
    2f34:	d30c      	bcc.n	2f50 <drawChar+0xa4>
			if((TermFont[character][i]&(1<<(7-j)))!=0)
    2f36:	782b      	ldrb	r3, [r5, #0]
    2f38:	4123      	asrs	r3, r4
    2f3a:	07db      	lsls	r3, r3, #31
    2f3c:	d5f1      	bpl.n	2f22 <drawChar+0x76>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    2f3e:	8830      	ldrh	r0, [r6, #0]
    2f40:	0200      	lsls	r0, r0, #8
    2f42:	4b17      	ldr	r3, [pc, #92]	; (2fa0 <drawChar+0xf4>)
    2f44:	881b      	ldrh	r3, [r3, #0]
    2f46:	4318      	orrs	r0, r3
    2f48:	b280      	uxth	r0, r0
    2f4a:	4b13      	ldr	r3, [pc, #76]	; (2f98 <drawChar+0xec>)
    2f4c:	4798      	blx	r3
    2f4e:	e7f0      	b.n	2f32 <drawChar+0x86>
    2f50:	3501      	adds	r5, #1
	for(uint8_t i=0; i <= 24; i++)
    2f52:	4555      	cmp	r5, sl
    2f54:	d001      	beq.n	2f5a <drawChar+0xae>
{
    2f56:	2407      	movs	r4, #7
    2f58:	e7ed      	b.n	2f36 <drawChar+0x8a>
	REG_PORT_OUTSET1 = LCD_CS;
    2f5a:	2280      	movs	r2, #128	; 0x80
    2f5c:	03d2      	lsls	r2, r2, #15
    2f5e:	4b11      	ldr	r3, [pc, #68]	; (2fa4 <drawChar+0xf8>)
    2f60:	601a      	str	r2, [r3, #0]
}
    2f62:	23c8      	movs	r3, #200	; 0xc8
    2f64:	015b      	lsls	r3, r3, #5
    2f66:	449d      	add	sp, r3
    2f68:	bc1c      	pop	{r2, r3, r4}
    2f6a:	4690      	mov	r8, r2
    2f6c:	4699      	mov	r9, r3
    2f6e:	46a2      	mov	sl, r4
    2f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f72:	46c0      	nop			; (mov r8, r8)
    2f74:	ffffe700 	.word	0xffffe700
    2f78:	00005104 	.word	0x00005104
    2f7c:	00003e95 	.word	0x00003e95
    2f80:	2000017c 	.word	0x2000017c
    2f84:	2000017d 	.word	0x2000017d
    2f88:	41004494 	.word	0x41004494
    2f8c:	00002bed 	.word	0x00002bed
    2f90:	2000030a 	.word	0x2000030a
    2f94:	200002e4 	.word	0x200002e4
    2f98:	00002b69 	.word	0x00002b69
    2f9c:	200002e6 	.word	0x200002e6
    2fa0:	20000308 	.word	0x20000308
    2fa4:	41004498 	.word	0x41004498

00002fa8 <writeString>:
{
    2fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2faa:	46c6      	mov	lr, r8
    2fac:	b500      	push	{lr}
    2fae:	0005      	movs	r5, r0
	int length = strlen(str);
    2fb0:	4b0c      	ldr	r3, [pc, #48]	; (2fe4 <writeString+0x3c>)
    2fb2:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2fb4:	2800      	cmp	r0, #0
    2fb6:	dd11      	ble.n	2fdc <writeString+0x34>
    2fb8:	002c      	movs	r4, r5
    2fba:	182d      	adds	r5, r5, r0
		drawChar(str[i]);
    2fbc:	4f0a      	ldr	r7, [pc, #40]	; (2fe8 <writeString+0x40>)
		if(xCharPos <= 80)
    2fbe:	4e0b      	ldr	r6, [pc, #44]	; (2fec <writeString+0x44>)
			xCharPos++;
    2fc0:	46b0      	mov	r8, r6
    2fc2:	e002      	b.n	2fca <writeString+0x22>
    2fc4:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    2fc6:	42ac      	cmp	r4, r5
    2fc8:	d008      	beq.n	2fdc <writeString+0x34>
		drawChar(str[i]);
    2fca:	7820      	ldrb	r0, [r4, #0]
    2fcc:	47b8      	blx	r7
		if(xCharPos <= 80)
    2fce:	7833      	ldrb	r3, [r6, #0]
    2fd0:	2b50      	cmp	r3, #80	; 0x50
    2fd2:	d8f7      	bhi.n	2fc4 <writeString+0x1c>
			xCharPos++;
    2fd4:	3301      	adds	r3, #1
    2fd6:	4642      	mov	r2, r8
    2fd8:	7013      	strb	r3, [r2, #0]
    2fda:	e7f3      	b.n	2fc4 <writeString+0x1c>
}
    2fdc:	bc04      	pop	{r2}
    2fde:	4690      	mov	r8, r2
    2fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	0000412d 	.word	0x0000412d
    2fe8:	00002ead 	.word	0x00002ead
    2fec:	2000017c 	.word	0x2000017c

00002ff0 <fillRect>:
{
    2ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ff2:	46ce      	mov	lr, r9
    2ff4:	4647      	mov	r7, r8
    2ff6:	b580      	push	{r7, lr}
    2ff8:	b083      	sub	sp, #12
    2ffa:	4681      	mov	r9, r0
    2ffc:	4688      	mov	r8, r1
    2ffe:	0015      	movs	r5, r2
    3000:	001c      	movs	r4, r3
	if (x1>x2)
    3002:	4290      	cmp	r0, r2
    3004:	dd02      	ble.n	300c <fillRect+0x1c>
    3006:	0403      	lsls	r3, r0, #16
	SwapUint16(x1, x2);
    3008:	4691      	mov	r9, r2
    300a:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    300c:	45a0      	cmp	r8, r4
    300e:	dd03      	ble.n	3018 <fillRect+0x28>
    3010:	4643      	mov	r3, r8
    3012:	041b      	lsls	r3, r3, #16
	SwapUint16(y1, y2);
    3014:	46a0      	mov	r8, r4
    3016:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    3018:	2780      	movs	r7, #128	; 0x80
    301a:	03ff      	lsls	r7, r7, #15
    301c:	4b12      	ldr	r3, [pc, #72]	; (3068 <fillRect+0x78>)
    301e:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    3020:	b2a3      	uxth	r3, r4
    3022:	b2aa      	uxth	r2, r5
    3024:	4641      	mov	r1, r8
    3026:	4668      	mov	r0, sp
    3028:	80c1      	strh	r1, [r0, #6]
    302a:	88c1      	ldrh	r1, [r0, #6]
    302c:	4648      	mov	r0, r9
    302e:	466e      	mov	r6, sp
    3030:	80f0      	strh	r0, [r6, #6]
    3032:	88f0      	ldrh	r0, [r6, #6]
    3034:	4e0d      	ldr	r6, [pc, #52]	; (306c <fillRect+0x7c>)
    3036:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    3038:	4e0d      	ldr	r6, [pc, #52]	; (3070 <fillRect+0x80>)
    303a:	2380      	movs	r3, #128	; 0x80
    303c:	041b      	lsls	r3, r3, #16
    303e:	6033      	str	r3, [r6, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    3040:	464b      	mov	r3, r9
    3042:	1aed      	subs	r5, r5, r3
    3044:	3501      	adds	r5, #1
    3046:	4643      	mov	r3, r8
    3048:	1ae2      	subs	r2, r4, r3
    304a:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    304c:	436a      	muls	r2, r5
    304e:	4b09      	ldr	r3, [pc, #36]	; (3074 <fillRect+0x84>)
    3050:	8819      	ldrh	r1, [r3, #0]
    3052:	4b09      	ldr	r3, [pc, #36]	; (3078 <fillRect+0x88>)
    3054:	8818      	ldrh	r0, [r3, #0]
    3056:	4b09      	ldr	r3, [pc, #36]	; (307c <fillRect+0x8c>)
    3058:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    305a:	6037      	str	r7, [r6, #0]
}
    305c:	b003      	add	sp, #12
    305e:	bc0c      	pop	{r2, r3}
    3060:	4690      	mov	r8, r2
    3062:	4699      	mov	r9, r3
    3064:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	41004494 	.word	0x41004494
    306c:	00002bed 	.word	0x00002bed
    3070:	41004498 	.word	0x41004498
    3074:	20000308 	.word	0x20000308
    3078:	200002e6 	.word	0x200002e6
    307c:	00002b79 	.word	0x00002b79

00003080 <clearScreen>:
{
    3080:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    3082:	2300      	movs	r3, #0
    3084:	4a06      	ldr	r2, [pc, #24]	; (30a0 <clearScreen+0x20>)
    3086:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    3088:	4a06      	ldr	r2, [pc, #24]	; (30a4 <clearScreen+0x24>)
    308a:	8013      	strh	r3, [r2, #0]
	fillRect(0,0,display_Y_size,display_X_size);
    308c:	4b06      	ldr	r3, [pc, #24]	; (30a8 <clearScreen+0x28>)
    308e:	881b      	ldrh	r3, [r3, #0]
    3090:	4a06      	ldr	r2, [pc, #24]	; (30ac <clearScreen+0x2c>)
    3092:	8812      	ldrh	r2, [r2, #0]
    3094:	2100      	movs	r1, #0
    3096:	2000      	movs	r0, #0
    3098:	4c05      	ldr	r4, [pc, #20]	; (30b0 <clearScreen+0x30>)
    309a:	47a0      	blx	r4
}
    309c:	bd10      	pop	{r4, pc}
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	200002e6 	.word	0x200002e6
    30a4:	20000308 	.word	0x20000308
    30a8:	2000000a 	.word	0x2000000a
    30ac:	2000000c 	.word	0x2000000c
    30b0:	00002ff1 	.word	0x00002ff1

000030b4 <drawKare>:
{
    30b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    30b6:	b0c1      	sub	sp, #260	; 0x104
    30b8:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    30ba:	22d0      	movs	r2, #208	; 0xd0
    30bc:	492d      	ldr	r1, [pc, #180]	; (3174 <drawKare+0xc0>)
    30be:	a80c      	add	r0, sp, #48	; 0x30
    30c0:	4b2d      	ldr	r3, [pc, #180]	; (3178 <drawKare+0xc4>)
    30c2:	4798      	blx	r3
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    30c4:	a805      	add	r0, sp, #20
    30c6:	4b2d      	ldr	r3, [pc, #180]	; (317c <drawKare+0xc8>)
    30c8:	001a      	movs	r2, r3
    30ca:	3250      	adds	r2, #80	; 0x50
    30cc:	0001      	movs	r1, r0
    30ce:	ca31      	ldmia	r2!, {r0, r4, r5}
    30d0:	c131      	stmia	r1!, {r0, r4, r5}
    30d2:	ca31      	ldmia	r2!, {r0, r4, r5}
    30d4:	c131      	stmia	r1!, {r0, r4, r5}
    30d6:	6812      	ldr	r2, [r2, #0]
    30d8:	600a      	str	r2, [r1, #0]
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    30da:	336c      	adds	r3, #108	; 0x6c
    30dc:	466a      	mov	r2, sp
    30de:	cb13      	ldmia	r3!, {r0, r1, r4}
    30e0:	c213      	stmia	r2!, {r0, r1, r4}
    30e2:	cb03      	ldmia	r3!, {r0, r1}
    30e4:	c203      	stmia	r2!, {r0, r1}
    30e6:	ac0c      	add	r4, sp, #48	; 0x30
    30e8:	ae40      	add	r6, sp, #256	; 0x100
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    30ea:	4d25      	ldr	r5, [pc, #148]	; (3180 <drawKare+0xcc>)
		((body[i+3]/iSv)+(offsetGraphicY)));
    30ec:	88e3      	ldrh	r3, [r4, #6]
    30ee:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    30f0:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
    30f2:	88a2      	ldrh	r2, [r4, #4]
    30f4:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    30f6:	322d      	adds	r2, #45	; 0x2d
    30f8:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
    30fa:	8861      	ldrh	r1, [r4, #2]
    30fc:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    30fe:	3196      	adds	r1, #150	; 0x96
    3100:	8820      	ldrh	r0, [r4, #0]
    3102:	1040      	asrs	r0, r0, #1
    3104:	302d      	adds	r0, #45	; 0x2d
    3106:	30ff      	adds	r0, #255	; 0xff
    3108:	47a8      	blx	r5
    310a:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
    310c:	42b4      	cmp	r4, r6
    310e:	d1ed      	bne.n	30ec <drawKare+0x38>
	switch(emotion)
    3110:	2f00      	cmp	r7, #0
    3112:	d003      	beq.n	311c <drawKare+0x68>
    3114:	2f01      	cmp	r7, #1
    3116:	d017      	beq.n	3148 <drawKare+0x94>
}
    3118:	b041      	add	sp, #260	; 0x104
    311a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    311c:	ac05      	add	r4, sp, #20
    311e:	ae0c      	add	r6, sp, #48	; 0x30
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    3120:	4d17      	ldr	r5, [pc, #92]	; (3180 <drawKare+0xcc>)
					((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    3122:	78e3      	ldrb	r3, [r4, #3]
    3124:	105b      	asrs	r3, r3, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    3126:	3396      	adds	r3, #150	; 0x96
					((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    3128:	78a2      	ldrb	r2, [r4, #2]
    312a:	1052      	asrs	r2, r2, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    312c:	322d      	adds	r2, #45	; 0x2d
    312e:	32ff      	adds	r2, #255	; 0xff
					((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    3130:	7861      	ldrb	r1, [r4, #1]
    3132:	1049      	asrs	r1, r1, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    3134:	3196      	adds	r1, #150	; 0x96
    3136:	7820      	ldrb	r0, [r4, #0]
    3138:	1040      	asrs	r0, r0, #1
    313a:	302d      	adds	r0, #45	; 0x2d
    313c:	30ff      	adds	r0, #255	; 0xff
    313e:	47a8      	blx	r5
    3140:	3404      	adds	r4, #4
				for(int i = 0; i < 28; i = i+4)
    3142:	42a6      	cmp	r6, r4
    3144:	d1ed      	bne.n	3122 <drawKare+0x6e>
    3146:	e7e7      	b.n	3118 <drawKare+0x64>
    3148:	466c      	mov	r4, sp
    314a:	ae05      	add	r6, sp, #20
					fillRect((
    314c:	4d0c      	ldr	r5, [pc, #48]	; (3180 <drawKare+0xcc>)
					((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    314e:	78e3      	ldrb	r3, [r4, #3]
    3150:	105b      	asrs	r3, r3, #1
					fillRect((
    3152:	3396      	adds	r3, #150	; 0x96
					((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    3154:	78a2      	ldrb	r2, [r4, #2]
    3156:	1052      	asrs	r2, r2, #1
					fillRect((
    3158:	322d      	adds	r2, #45	; 0x2d
    315a:	32ff      	adds	r2, #255	; 0xff
					((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    315c:	7861      	ldrb	r1, [r4, #1]
    315e:	1049      	asrs	r1, r1, #1
					fillRect((
    3160:	3196      	adds	r1, #150	; 0x96
					(rPiBeret[i]/iSv)+(offsetGraphicX)),
    3162:	7820      	ldrb	r0, [r4, #0]
    3164:	1040      	asrs	r0, r0, #1
					fillRect((
    3166:	302d      	adds	r0, #45	; 0x2d
    3168:	30ff      	adds	r0, #255	; 0xff
    316a:	47a8      	blx	r5
    316c:	3404      	adds	r4, #4
				for(int i = 0; i < 20; i = i+4)
    316e:	42b4      	cmp	r4, r6
    3170:	d1ed      	bne.n	314e <drawKare+0x9a>
    3172:	e7d1      	b.n	3118 <drawKare+0x64>
    3174:	00006a04 	.word	0x00006a04
    3178:	00003e95 	.word	0x00003e95
    317c:	00006a84 	.word	0x00006a84
    3180:	00002ff1 	.word	0x00002ff1

00003184 <splashScreen>:
{	
    3184:	b510      	push	{r4, lr}
		splashText[0] = "Unix epoch minus 0xFF days";//
    3186:	4c42      	ldr	r4, [pc, #264]	; (3290 <splashScreen+0x10c>)
    3188:	4b42      	ldr	r3, [pc, #264]	; (3294 <splashScreen+0x110>)
    318a:	6023      	str	r3, [r4, #0]
		splashText[1] = "13^5 + 16^5 = 17^5";//
    318c:	4b42      	ldr	r3, [pc, #264]	; (3298 <splashScreen+0x114>)
    318e:	6063      	str	r3, [r4, #4]
		splashText[2] = "Reticulating Splines";//
    3190:	4b42      	ldr	r3, [pc, #264]	; (329c <splashScreen+0x118>)
    3192:	60a3      	str	r3, [r4, #8]
		splashText[3] = "Violence works";//
    3194:	4b42      	ldr	r3, [pc, #264]	; (32a0 <splashScreen+0x11c>)
    3196:	60e3      	str	r3, [r4, #12]
		splashText[4] = "Tabs!";//
    3198:	4b42      	ldr	r3, [pc, #264]	; (32a4 <splashScreen+0x120>)
    319a:	6123      	str	r3, [r4, #16]
		splashText[5] = "Kill Billionaires (and Trillionaire)";//
    319c:	4b42      	ldr	r3, [pc, #264]	; (32a8 <splashScreen+0x124>)
    319e:	6163      	str	r3, [r4, #20]
		splashText[6] = "Interest in technology is not a personality";//
    31a0:	4b42      	ldr	r3, [pc, #264]	; (32ac <splashScreen+0x128>)
    31a2:	61a3      	str	r3, [r4, #24]
		splashText[7] = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    31a4:	4b42      	ldr	r3, [pc, #264]	; (32b0 <splashScreen+0x12c>)
    31a6:	61e3      	str	r3, [r4, #28]
		splashText[8] = "No gods. No masters. No external libraries.";//
    31a8:	4b42      	ldr	r3, [pc, #264]	; (32b4 <splashScreen+0x130>)
    31aa:	6223      	str	r3, [r4, #32]
		splashText[9] = "Spaces!";//
    31ac:	4b42      	ldr	r3, [pc, #264]	; (32b8 <splashScreen+0x134>)
    31ae:	6263      	str	r3, [r4, #36]	; 0x24
		splashText[10] = "Tiananmen Square 1989";//
    31b0:	4b42      	ldr	r3, [pc, #264]	; (32bc <splashScreen+0x138>)
    31b2:	62a3      	str	r3, [r4, #40]	; 0x28
		splashText[11] = "America was founded on slavery";
    31b4:	4b42      	ldr	r3, [pc, #264]	; (32c0 <splashScreen+0x13c>)
    31b6:	62e3      	str	r3, [r4, #44]	; 0x2c
		splashText[12] = "There is only capital and labor";//
    31b8:	4b42      	ldr	r3, [pc, #264]	; (32c4 <splashScreen+0x140>)
    31ba:	6323      	str	r3, [r4, #48]	; 0x30
		splashText[13] = "Encourage symmetric class warfare";//
    31bc:	4b42      	ldr	r3, [pc, #264]	; (32c8 <splashScreen+0x144>)
    31be:	6363      	str	r3, [r4, #52]	; 0x34
		splashText[14] = "$CURRENT_MEME";//
    31c0:	4b42      	ldr	r3, [pc, #264]	; (32cc <splashScreen+0x148>)
    31c2:	63a3      	str	r3, [r4, #56]	; 0x38
		splashText[15] = "A Nice TTY";//
    31c4:	4b42      	ldr	r3, [pc, #264]	; (32d0 <splashScreen+0x14c>)
    31c6:	63e3      	str	r3, [r4, #60]	; 0x3c
		splashText[16] = "Trans rights are human rights";//
    31c8:	4b42      	ldr	r3, [pc, #264]	; (32d4 <splashScreen+0x150>)
    31ca:	6423      	str	r3, [r4, #64]	; 0x40
		splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    31cc:	4b42      	ldr	r3, [pc, #264]	; (32d8 <splashScreen+0x154>)
    31ce:	6463      	str	r3, [r4, #68]	; 0x44
		splashText[18] = "ACAB";//
    31d0:	4b42      	ldr	r3, [pc, #264]	; (32dc <splashScreen+0x158>)
    31d2:	64a3      	str	r3, [r4, #72]	; 0x48
		splashText[19] = "Defcon's canceled.";//
    31d4:	4b42      	ldr	r3, [pc, #264]	; (32e0 <splashScreen+0x15c>)
    31d6:	64e3      	str	r3, [r4, #76]	; 0x4c
		splashText[20] = "Ratsnest: Nothing To Do!";//
    31d8:	4b42      	ldr	r3, [pc, #264]	; (32e4 <splashScreen+0x160>)
    31da:	6523      	str	r3, [r4, #80]	; 0x50
		splashText[21] = "It has 69 keys.";//
    31dc:	4b42      	ldr	r3, [pc, #264]	; (32e8 <splashScreen+0x164>)
    31de:	6563      	str	r3, [r4, #84]	; 0x54
		splashText[22] = "Because VT-420 was already taken";//
    31e0:	4b42      	ldr	r3, [pc, #264]	; (32ec <splashScreen+0x168>)
    31e2:	65a3      	str	r3, [r4, #88]	; 0x58
		splashText[23] = "Compression algorithm based on BBP (1997)";//
    31e4:	4b42      	ldr	r3, [pc, #264]	; (32f0 <splashScreen+0x16c>)
    31e6:	65e3      	str	r3, [r4, #92]	; 0x5c
		splashText[24] = "Time travel in Star Trek is common yet almost always accidental";
    31e8:	4b42      	ldr	r3, [pc, #264]	; (32f4 <splashScreen+0x170>)
    31ea:	6623      	str	r3, [r4, #96]	; 0x60
		splashText[25] = "Offensive hardware";//
    31ec:	4b42      	ldr	r3, [pc, #264]	; (32f8 <splashScreen+0x174>)
    31ee:	6663      	str	r3, [r4, #100]	; 0x64
		splashText[26] = "Follow World Pog Federation    @WorldPog";//
    31f0:	4b42      	ldr	r3, [pc, #264]	; (32fc <splashScreen+0x178>)
    31f2:	66a3      	str	r3, [r4, #104]	; 0x68
		splashText[27] = "Dummy thicc client";//
    31f4:	4b42      	ldr	r3, [pc, #264]	; (3300 <splashScreen+0x17c>)
    31f6:	66e3      	str	r3, [r4, #108]	; 0x6c
		splashText[28] = "A Nice TTY. An OK Computer.";//
    31f8:	4b42      	ldr	r3, [pc, #264]	; (3304 <splashScreen+0x180>)
    31fa:	6723      	str	r3, [r4, #112]	; 0x70
		splashText[29] = "I cAn OpEn A LoCk WiTh A sOdA cAn";//
    31fc:	4b42      	ldr	r3, [pc, #264]	; (3308 <splashScreen+0x184>)
    31fe:	6763      	str	r3, [r4, #116]	; 0x74
		splashText[30] = "Solidarity is not a new framework";//
    3200:	4b42      	ldr	r3, [pc, #264]	; (330c <splashScreen+0x188>)
    3202:	67a3      	str	r3, [r4, #120]	; 0x78
		splashText[31] = "Breadboarding Is Not A Crime";//
    3204:	4b42      	ldr	r3, [pc, #264]	; (3310 <splashScreen+0x18c>)
    3206:	67e3      	str	r3, [r4, #124]	; 0x7c
		splashText[32] = "Off by one errors are common";
    3208:	4a42      	ldr	r2, [pc, #264]	; (3314 <splashScreen+0x190>)
    320a:	2380      	movs	r3, #128	; 0x80
    320c:	50e2      	str	r2, [r4, r3]
	const char *textPhrase = splashText[((rand()%32))];
    320e:	4b42      	ldr	r3, [pc, #264]	; (3318 <splashScreen+0x194>)
    3210:	4798      	blx	r3
    3212:	17c3      	asrs	r3, r0, #31
    3214:	0edb      	lsrs	r3, r3, #27
    3216:	18c2      	adds	r2, r0, r3
    3218:	201f      	movs	r0, #31
    321a:	4010      	ands	r0, r2
    321c:	1ac0      	subs	r0, r0, r3
    321e:	0080      	lsls	r0, r0, #2
    3220:	5904      	ldr	r4, [r0, r4]
	clearScreen();
    3222:	4b3e      	ldr	r3, [pc, #248]	; (331c <splashScreen+0x198>)
    3224:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
    3226:	23ff      	movs	r3, #255	; 0xff
    3228:	4a3d      	ldr	r2, [pc, #244]	; (3320 <splashScreen+0x19c>)
    322a:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    322c:	4a3d      	ldr	r2, [pc, #244]	; (3324 <splashScreen+0x1a0>)
    322e:	8013      	strh	r3, [r2, #0]
	REG_PORT_DIRTGL1 = PORT_PB31;
    3230:	2280      	movs	r2, #128	; 0x80
    3232:	0612      	lsls	r2, r2, #24
    3234:	4b3c      	ldr	r3, [pc, #240]	; (3328 <splashScreen+0x1a4>)
    3236:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    3238:	4b3c      	ldr	r3, [pc, #240]	; (332c <splashScreen+0x1a8>)
    323a:	22df      	movs	r2, #223	; 0xdf
    323c:	5c99      	ldrb	r1, [r3, r2]
    323e:	2004      	movs	r0, #4
    3240:	4301      	orrs	r1, r0
    3242:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    3244:	5c99      	ldrb	r1, [r3, r2]
    3246:	2002      	movs	r0, #2
    3248:	4301      	orrs	r1, r0
    324a:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    324c:	3a3f      	subs	r2, #63	; 0x3f
    324e:	589b      	ldr	r3, [r3, r2]
    3250:	2b00      	cmp	r3, #0
    3252:	db19      	blt.n	3288 <splashScreen+0x104>
		drawKare(0); //The normal graphic
    3254:	2000      	movs	r0, #0
    3256:	4b36      	ldr	r3, [pc, #216]	; (3330 <splashScreen+0x1ac>)
    3258:	4798      	blx	r3
	setDrawDirection();
    325a:	4b36      	ldr	r3, [pc, #216]	; (3334 <splashScreen+0x1b0>)
    325c:	4798      	blx	r3
	xCharPos = 40 - (strlen(textPhrase)/2);
    325e:	0020      	movs	r0, r4
    3260:	4b35      	ldr	r3, [pc, #212]	; (3338 <splashScreen+0x1b4>)
    3262:	4798      	blx	r3
    3264:	0840      	lsrs	r0, r0, #1
    3266:	2328      	movs	r3, #40	; 0x28
    3268:	1a18      	subs	r0, r3, r0
    326a:	4b34      	ldr	r3, [pc, #208]	; (333c <splashScreen+0x1b8>)
    326c:	7018      	strb	r0, [r3, #0]
	yCharPos = 16;
    326e:	2210      	movs	r2, #16
    3270:	4b33      	ldr	r3, [pc, #204]	; (3340 <splashScreen+0x1bc>)
    3272:	701a      	strb	r2, [r3, #0]
	writeString(textPhrase);
    3274:	0020      	movs	r0, r4
    3276:	4b33      	ldr	r3, [pc, #204]	; (3344 <splashScreen+0x1c0>)
    3278:	4798      	blx	r3
	delay_ms(2000);
    327a:	20fa      	movs	r0, #250	; 0xfa
    327c:	00c0      	lsls	r0, r0, #3
    327e:	4b32      	ldr	r3, [pc, #200]	; (3348 <splashScreen+0x1c4>)
    3280:	4798      	blx	r3
	clearScreen();
    3282:	4b26      	ldr	r3, [pc, #152]	; (331c <splashScreen+0x198>)
    3284:	4798      	blx	r3
}
    3286:	bd10      	pop	{r4, pc}
		drawKare(1);
    3288:	2001      	movs	r0, #1
    328a:	4b29      	ldr	r3, [pc, #164]	; (3330 <splashScreen+0x1ac>)
    328c:	4798      	blx	r3
    328e:	e7e4      	b.n	325a <splashScreen+0xd6>
    3290:	200000f8 	.word	0x200000f8
    3294:	00006cbc 	.word	0x00006cbc
    3298:	00006cd8 	.word	0x00006cd8
    329c:	00006cec 	.word	0x00006cec
    32a0:	00006d04 	.word	0x00006d04
    32a4:	00006d14 	.word	0x00006d14
    32a8:	00006d1c 	.word	0x00006d1c
    32ac:	00006d44 	.word	0x00006d44
    32b0:	00006d70 	.word	0x00006d70
    32b4:	00006d98 	.word	0x00006d98
    32b8:	00006dc4 	.word	0x00006dc4
    32bc:	00006dcc 	.word	0x00006dcc
    32c0:	00006de4 	.word	0x00006de4
    32c4:	00006e04 	.word	0x00006e04
    32c8:	00006e24 	.word	0x00006e24
    32cc:	00006e48 	.word	0x00006e48
    32d0:	00006e58 	.word	0x00006e58
    32d4:	00006e64 	.word	0x00006e64
    32d8:	00006e84 	.word	0x00006e84
    32dc:	00006ea4 	.word	0x00006ea4
    32e0:	00006eac 	.word	0x00006eac
    32e4:	00006ec0 	.word	0x00006ec0
    32e8:	00006edc 	.word	0x00006edc
    32ec:	00006eec 	.word	0x00006eec
    32f0:	00006f10 	.word	0x00006f10
    32f4:	00006f3c 	.word	0x00006f3c
    32f8:	00006f7c 	.word	0x00006f7c
    32fc:	00006f90 	.word	0x00006f90
    3300:	00006fbc 	.word	0x00006fbc
    3304:	00006fd0 	.word	0x00006fd0
    3308:	00006fec 	.word	0x00006fec
    330c:	00007010 	.word	0x00007010
    3310:	00007034 	.word	0x00007034
    3314:	00007054 	.word	0x00007054
    3318:	00003f49 	.word	0x00003f49
    331c:	00003081 	.word	0x00003081
    3320:	200002e6 	.word	0x200002e6
    3324:	20000308 	.word	0x20000308
    3328:	4100448c 	.word	0x4100448c
    332c:	41004400 	.word	0x41004400
    3330:	000030b5 	.word	0x000030b5
    3334:	00002b31 	.word	0x00002b31
    3338:	0000412d 	.word	0x0000412d
    333c:	2000017c 	.word	0x2000017c
    3340:	2000017d 	.word	0x2000017d
    3344:	00002fa9 	.word	0x00002fa9
    3348:	00000155 	.word	0x00000155

0000334c <fillRectBackColor>:
{
    334c:	b5f0      	push	{r4, r5, r6, r7, lr}
    334e:	46ce      	mov	lr, r9
    3350:	4647      	mov	r7, r8
    3352:	b580      	push	{r7, lr}
    3354:	b083      	sub	sp, #12
    3356:	4681      	mov	r9, r0
    3358:	4688      	mov	r8, r1
    335a:	0015      	movs	r5, r2
    335c:	001c      	movs	r4, r3
	if (x1>x2)
    335e:	4290      	cmp	r0, r2
    3360:	dd02      	ble.n	3368 <fillRectBackColor+0x1c>
    3362:	0403      	lsls	r3, r0, #16
	SwapUint16(x1, x2);
    3364:	4691      	mov	r9, r2
    3366:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    3368:	45a0      	cmp	r8, r4
    336a:	dd03      	ble.n	3374 <fillRectBackColor+0x28>
    336c:	4643      	mov	r3, r8
    336e:	041b      	lsls	r3, r3, #16
	SwapUint16(y1, y2);
    3370:	46a0      	mov	r8, r4
    3372:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    3374:	2780      	movs	r7, #128	; 0x80
    3376:	03ff      	lsls	r7, r7, #15
    3378:	4b12      	ldr	r3, [pc, #72]	; (33c4 <fillRectBackColor+0x78>)
    337a:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    337c:	b2a3      	uxth	r3, r4
    337e:	b2aa      	uxth	r2, r5
    3380:	4641      	mov	r1, r8
    3382:	4668      	mov	r0, sp
    3384:	80c1      	strh	r1, [r0, #6]
    3386:	88c1      	ldrh	r1, [r0, #6]
    3388:	4648      	mov	r0, r9
    338a:	466e      	mov	r6, sp
    338c:	80f0      	strh	r0, [r6, #6]
    338e:	88f0      	ldrh	r0, [r6, #6]
    3390:	4e0d      	ldr	r6, [pc, #52]	; (33c8 <fillRectBackColor+0x7c>)
    3392:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    3394:	4e0d      	ldr	r6, [pc, #52]	; (33cc <fillRectBackColor+0x80>)
    3396:	2380      	movs	r3, #128	; 0x80
    3398:	041b      	lsls	r3, r3, #16
    339a:	6033      	str	r3, [r6, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    339c:	464b      	mov	r3, r9
    339e:	1aed      	subs	r5, r5, r3
    33a0:	3501      	adds	r5, #1
    33a2:	4643      	mov	r3, r8
    33a4:	1ae2      	subs	r2, r4, r3
    33a6:	3201      	adds	r2, #1
	LCD_Fast_Fill(back_Color_High, back_Color_Low,
    33a8:	436a      	muls	r2, r5
    33aa:	4b09      	ldr	r3, [pc, #36]	; (33d0 <fillRectBackColor+0x84>)
    33ac:	8819      	ldrh	r1, [r3, #0]
    33ae:	4b09      	ldr	r3, [pc, #36]	; (33d4 <fillRectBackColor+0x88>)
    33b0:	8818      	ldrh	r0, [r3, #0]
    33b2:	4b09      	ldr	r3, [pc, #36]	; (33d8 <fillRectBackColor+0x8c>)
    33b4:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    33b6:	6037      	str	r7, [r6, #0]
}
    33b8:	b003      	add	sp, #12
    33ba:	bc0c      	pop	{r2, r3}
    33bc:	4690      	mov	r8, r2
    33be:	4699      	mov	r9, r3
    33c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33c2:	46c0      	nop			; (mov r8, r8)
    33c4:	41004494 	.word	0x41004494
    33c8:	00002bed 	.word	0x00002bed
    33cc:	41004498 	.word	0x41004498
    33d0:	200002e4 	.word	0x200002e4
    33d4:	2000030a 	.word	0x2000030a
    33d8:	00002b79 	.word	0x00002b79

000033dc <newLine>:
{
    33dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    33de:	46de      	mov	lr, fp
    33e0:	4657      	mov	r7, sl
    33e2:	464e      	mov	r6, r9
    33e4:	4645      	mov	r5, r8
    33e6:	b5e0      	push	{r5, r6, r7, lr}
    33e8:	4c5a      	ldr	r4, [pc, #360]	; (3554 <newLine+0x178>)
    33ea:	44a5      	add	sp, r4
	REG_PORT_OUTCLR1 = LCD_CS;
    33ec:	4b5a      	ldr	r3, [pc, #360]	; (3558 <newLine+0x17c>)
    33ee:	2580      	movs	r5, #128	; 0x80
    33f0:	03ed      	lsls	r5, r5, #15
    33f2:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    33f4:	2680      	movs	r6, #128	; 0x80
    33f6:	0436      	lsls	r6, r6, #16
    33f8:	601e      	str	r6, [r3, #0]
	LCD_Write_COM16(0x36, 0x00);
    33fa:	2100      	movs	r1, #0
    33fc:	2036      	movs	r0, #54	; 0x36
    33fe:	4b57      	ldr	r3, [pc, #348]	; (355c <newLine+0x180>)
    3400:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    3402:	4c57      	ldr	r4, [pc, #348]	; (3560 <newLine+0x184>)
    3404:	6026      	str	r6, [r4, #0]
	LCD_Write_DATA8(0x00);
    3406:	2000      	movs	r0, #0
    3408:	4b56      	ldr	r3, [pc, #344]	; (3564 <newLine+0x188>)
    340a:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    340c:	6025      	str	r5, [r4, #0]
	for(uint16_t row = 0 ; row < 460 ; row++)
    340e:	2300      	movs	r3, #0
    3410:	9300      	str	r3, [sp, #0]
		REG_PORT_OUTCLR1 = LCD_CS;
    3412:	4b51      	ldr	r3, [pc, #324]	; (3558 <newLine+0x17c>)
    3414:	4698      	mov	r8, r3
		REG_PORT_OUTSET1 = LCD_DC;
    3416:	0027      	movs	r7, r4
			REG_PORT_OUTCLR1 = LCD_RD;
    3418:	2680      	movs	r6, #128	; 0x80
    341a:	0276      	lsls	r6, r6, #9
    341c:	e046      	b.n	34ac <newLine+0xd0>
				rowPixel[getpixel] = 0x00;
    341e:	4653      	mov	r3, sl
    3420:	7023      	strb	r3, [r4, #0]
			REG_PORT_OUTCLR1 = LCD_RD;
    3422:	4643      	mov	r3, r8
    3424:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    3426:	603e      	str	r6, [r7, #0]
    3428:	3401      	adds	r4, #1
		for(uint16_t getpixel = 0 ; getpixel < 800 ; getpixel++)
    342a:	4564      	cmp	r4, ip
    342c:	d008      	beq.n	3440 <newLine+0x64>
			REG_PORT_OUTCLR1 = LCD_RD;
    342e:	4643      	mov	r3, r8
    3430:	601e      	str	r6, [r3, #0]
			REG_PORT_OUTSET1 = LCD_RD;
    3432:	603e      	str	r6, [r7, #0]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    3434:	5843      	ldr	r3, [r0, r1]
    3436:	421a      	tst	r2, r3
    3438:	d0f1      	beq.n	341e <newLine+0x42>
				rowPixel[getpixel] = 0xFF;
    343a:	464b      	mov	r3, r9
    343c:	7023      	strb	r3, [r4, #0]
    343e:	e7f0      	b.n	3422 <newLine+0x46>
    3440:	9401      	str	r4, [sp, #4]
		REG_PORT_OUTSET1 = LCD_DC;
    3442:	2380      	movs	r3, #128	; 0x80
    3444:	041b      	lsls	r3, r3, #16
    3446:	603b      	str	r3, [r7, #0]
		REG_PORT_DIRSET1 = 0x0000FFFF;
    3448:	4a47      	ldr	r2, [pc, #284]	; (3568 <newLine+0x18c>)
    344a:	4b48      	ldr	r3, [pc, #288]	; (356c <newLine+0x190>)
    344c:	601a      	str	r2, [r3, #0]
		setXY(0, row, 799, row);	
    344e:	9900      	ldr	r1, [sp, #0]
    3450:	000b      	movs	r3, r1
    3452:	4a47      	ldr	r2, [pc, #284]	; (3570 <newLine+0x194>)
    3454:	2000      	movs	r0, #0
    3456:	4c47      	ldr	r4, [pc, #284]	; (3574 <newLine+0x198>)
    3458:	47a0      	blx	r4
				setPixel((back_Color_High<<8)|back_Color_Low);
    345a:	4b47      	ldr	r3, [pc, #284]	; (3578 <newLine+0x19c>)
    345c:	469b      	mov	fp, r3
    345e:	4b47      	ldr	r3, [pc, #284]	; (357c <newLine+0x1a0>)
    3460:	469a      	mov	sl, r3
    3462:	4b47      	ldr	r3, [pc, #284]	; (3580 <newLine+0x1a4>)
    3464:	4699      	mov	r9, r3
    3466:	9c01      	ldr	r4, [sp, #4]
    3468:	e00b      	b.n	3482 <newLine+0xa6>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    346a:	4b46      	ldr	r3, [pc, #280]	; (3584 <newLine+0x1a8>)
    346c:	8818      	ldrh	r0, [r3, #0]
    346e:	0200      	lsls	r0, r0, #8
    3470:	4b45      	ldr	r3, [pc, #276]	; (3588 <newLine+0x1ac>)
    3472:	881b      	ldrh	r3, [r3, #0]
    3474:	4318      	orrs	r0, r3
    3476:	b280      	uxth	r0, r0
    3478:	4b41      	ldr	r3, [pc, #260]	; (3580 <newLine+0x1a4>)
    347a:	4798      	blx	r3
    347c:	3501      	adds	r5, #1
		for(uint16_t writepixel = 0 ; writepixel < 800 ; writepixel++)
    347e:	42ac      	cmp	r4, r5
    3480:	d00b      	beq.n	349a <newLine+0xbe>
			if((rowPixel[writepixel] == 0xFF))
    3482:	782b      	ldrb	r3, [r5, #0]
    3484:	2bff      	cmp	r3, #255	; 0xff
    3486:	d0f0      	beq.n	346a <newLine+0x8e>
				setPixel((back_Color_High<<8)|back_Color_Low);
    3488:	465b      	mov	r3, fp
    348a:	8818      	ldrh	r0, [r3, #0]
    348c:	0200      	lsls	r0, r0, #8
    348e:	4653      	mov	r3, sl
    3490:	881b      	ldrh	r3, [r3, #0]
    3492:	4318      	orrs	r0, r3
    3494:	b280      	uxth	r0, r0
    3496:	47c8      	blx	r9
    3498:	e7f0      	b.n	347c <newLine+0xa0>
	for(uint16_t row = 0 ; row < 460 ; row++)
    349a:	9b00      	ldr	r3, [sp, #0]
    349c:	3301      	adds	r3, #1
    349e:	b29b      	uxth	r3, r3
    34a0:	001a      	movs	r2, r3
    34a2:	9300      	str	r3, [sp, #0]
    34a4:	23e6      	movs	r3, #230	; 0xe6
    34a6:	005b      	lsls	r3, r3, #1
    34a8:	429a      	cmp	r2, r3
    34aa:	d031      	beq.n	3510 <newLine+0x134>
		REG_PORT_OUTCLR1 = LCD_CS;
    34ac:	4643      	mov	r3, r8
    34ae:	2280      	movs	r2, #128	; 0x80
    34b0:	03d2      	lsls	r2, r2, #15
    34b2:	601a      	str	r2, [r3, #0]
		setXY(0, row+20, 799, row+20);
    34b4:	9900      	ldr	r1, [sp, #0]
    34b6:	3114      	adds	r1, #20
    34b8:	b289      	uxth	r1, r1
    34ba:	000b      	movs	r3, r1
    34bc:	4a2c      	ldr	r2, [pc, #176]	; (3570 <newLine+0x194>)
    34be:	2000      	movs	r0, #0
    34c0:	4c2c      	ldr	r4, [pc, #176]	; (3574 <newLine+0x198>)
    34c2:	47a0      	blx	r4
		LCD_Write_COM16(0x2E,0x00);
    34c4:	2100      	movs	r1, #0
    34c6:	202e      	movs	r0, #46	; 0x2e
    34c8:	4b24      	ldr	r3, [pc, #144]	; (355c <newLine+0x180>)
    34ca:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    34cc:	2380      	movs	r3, #128	; 0x80
    34ce:	041b      	lsls	r3, r3, #16
    34d0:	603b      	str	r3, [r7, #0]
		REG_PORT_OUTCLR1 = LCD_RD;
    34d2:	4643      	mov	r3, r8
    34d4:	2280      	movs	r2, #128	; 0x80
    34d6:	0252      	lsls	r2, r2, #9
    34d8:	601a      	str	r2, [r3, #0]
		REG_PORT_OUTSET1 = LCD_RD;
    34da:	603a      	str	r2, [r7, #0]
		REG_PORT_DIRCLR1 = PORT_PB07;
    34dc:	2280      	movs	r2, #128	; 0x80
    34de:	4b2b      	ldr	r3, [pc, #172]	; (358c <newLine+0x1b0>)
    34e0:	601a      	str	r2, [r3, #0]
		PORT->Group[1].PINCFG[7].bit.INEN = 1;
    34e2:	4a2b      	ldr	r2, [pc, #172]	; (3590 <newLine+0x1b4>)
    34e4:	23c7      	movs	r3, #199	; 0xc7
    34e6:	5cd1      	ldrb	r1, [r2, r3]
    34e8:	2002      	movs	r0, #2
    34ea:	4301      	orrs	r1, r0
    34ec:	54d1      	strb	r1, [r2, r3]
		PORT->Group[1].PINCFG[7].bit.PULLEN = 1;
    34ee:	5cd1      	ldrb	r1, [r2, r3]
    34f0:	2004      	movs	r0, #4
    34f2:	4301      	orrs	r1, r0
    34f4:	54d1      	strb	r1, [r2, r3]
    34f6:	ad02      	add	r5, sp, #8
    34f8:	abca      	add	r3, sp, #808	; 0x328
    34fa:	469c      	mov	ip, r3
    34fc:	9501      	str	r5, [sp, #4]
			if((PORT->Group[1].IN.reg & PORT_PB07) != 0)
    34fe:	0010      	movs	r0, r2
    3500:	21a0      	movs	r1, #160	; 0xa0
    3502:	2280      	movs	r2, #128	; 0x80
				rowPixel[getpixel] = 0x00;
    3504:	2300      	movs	r3, #0
    3506:	469a      	mov	sl, r3
				rowPixel[getpixel] = 0xFF;
    3508:	33ff      	adds	r3, #255	; 0xff
    350a:	4699      	mov	r9, r3
    350c:	002c      	movs	r4, r5
    350e:	e78e      	b.n	342e <newLine+0x52>
	REG_PORT_OUTCLR1 = LCD_DC;
    3510:	2580      	movs	r5, #128	; 0x80
    3512:	042d      	lsls	r5, r5, #16
    3514:	4b10      	ldr	r3, [pc, #64]	; (3558 <newLine+0x17c>)
    3516:	601d      	str	r5, [r3, #0]
	LCD_Write_COM16(0x36, 0x00);
    3518:	2100      	movs	r1, #0
    351a:	2036      	movs	r0, #54	; 0x36
    351c:	4b0f      	ldr	r3, [pc, #60]	; (355c <newLine+0x180>)
    351e:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_DC;
    3520:	4c0f      	ldr	r4, [pc, #60]	; (3560 <newLine+0x184>)
    3522:	6025      	str	r5, [r4, #0]
	LCD_Write_DATA8(0x80);
    3524:	2080      	movs	r0, #128	; 0x80
    3526:	4b0f      	ldr	r3, [pc, #60]	; (3564 <newLine+0x188>)
    3528:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    352a:	2380      	movs	r3, #128	; 0x80
    352c:	03db      	lsls	r3, r3, #15
    352e:	6023      	str	r3, [r4, #0]
	fillRectBackColor(0, 460, 799, 480);
    3530:	23f0      	movs	r3, #240	; 0xf0
    3532:	005b      	lsls	r3, r3, #1
    3534:	4a0e      	ldr	r2, [pc, #56]	; (3570 <newLine+0x194>)
    3536:	21e6      	movs	r1, #230	; 0xe6
    3538:	0049      	lsls	r1, r1, #1
    353a:	2000      	movs	r0, #0
    353c:	4c15      	ldr	r4, [pc, #84]	; (3594 <newLine+0x1b8>)
    353e:	47a0      	blx	r4
}
    3540:	23cb      	movs	r3, #203	; 0xcb
    3542:	009b      	lsls	r3, r3, #2
    3544:	449d      	add	sp, r3
    3546:	bc3c      	pop	{r2, r3, r4, r5}
    3548:	4690      	mov	r8, r2
    354a:	4699      	mov	r9, r3
    354c:	46a2      	mov	sl, r4
    354e:	46ab      	mov	fp, r5
    3550:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	fffffcd4 	.word	0xfffffcd4
    3558:	41004494 	.word	0x41004494
    355c:	00002ae5 	.word	0x00002ae5
    3560:	41004498 	.word	0x41004498
    3564:	00002b15 	.word	0x00002b15
    3568:	0000ffff 	.word	0x0000ffff
    356c:	41004488 	.word	0x41004488
    3570:	0000031f 	.word	0x0000031f
    3574:	00002bed 	.word	0x00002bed
    3578:	2000030a 	.word	0x2000030a
    357c:	200002e4 	.word	0x200002e4
    3580:	00002b69 	.word	0x00002b69
    3584:	200002e6 	.word	0x200002e6
    3588:	20000308 	.word	0x20000308
    358c:	41004484 	.word	0x41004484
    3590:	41004400 	.word	0x41004400
    3594:	0000334d 	.word	0x0000334d

00003598 <printKeyboardBuffer>:
{
    3598:	b5f0      	push	{r4, r5, r6, r7, lr}
    359a:	46ce      	mov	lr, r9
    359c:	4647      	mov	r7, r8
    359e:	b580      	push	{r7, lr}
    35a0:	b0a7      	sub	sp, #156	; 0x9c
	char noCase[] =	  {0xFF,0xFF,0xFF,0xFF,0xFF,	//Col0, Row0-4
    35a2:	4c63      	ldr	r4, [pc, #396]	; (3730 <printKeyboardBuffer+0x198>)
    35a4:	2246      	movs	r2, #70	; 0x46
    35a6:	0021      	movs	r1, r4
    35a8:	a814      	add	r0, sp, #80	; 0x50
    35aa:	4d62      	ldr	r5, [pc, #392]	; (3734 <printKeyboardBuffer+0x19c>)
    35ac:	47a8      	blx	r5
	char shiftCase[] = {0xFF,0xFF,0xFF,0xFF,0xFF,	//Col0, Row0-4
    35ae:	0021      	movs	r1, r4
    35b0:	3148      	adds	r1, #72	; 0x48
    35b2:	2246      	movs	r2, #70	; 0x46
    35b4:	a802      	add	r0, sp, #8
    35b6:	47a8      	blx	r5
    35b8:	4e5f      	ldr	r6, [pc, #380]	; (3738 <printKeyboardBuffer+0x1a0>)
    35ba:	0031      	movs	r1, r6
    35bc:	3114      	adds	r1, #20
    35be:	0035      	movs	r5, r6
	bool shifted = false;
    35c0:	2300      	movs	r3, #0
    35c2:	9301      	str	r3, [sp, #4]
    35c4:	e002      	b.n	35cc <printKeyboardBuffer+0x34>
    35c6:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    35c8:	428d      	cmp	r5, r1
    35ca:	d00b      	beq.n	35e4 <printKeyboardBuffer+0x4c>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    35cc:	782b      	ldrb	r3, [r5, #0]
    35ce:	001a      	movs	r2, r3
    35d0:	3a0d      	subs	r2, #13
    35d2:	4250      	negs	r0, r2
    35d4:	4142      	adcs	r2, r0
    35d6:	3b31      	subs	r3, #49	; 0x31
    35d8:	4258      	negs	r0, r3
    35da:	4143      	adcs	r3, r0
    35dc:	4313      	orrs	r3, r2
    35de:	d0f2      	beq.n	35c6 <printKeyboardBuffer+0x2e>
			shifted = true;
    35e0:	9301      	str	r3, [sp, #4]
    35e2:	e7f0      	b.n	35c6 <printKeyboardBuffer+0x2e>
    35e4:	2700      	movs	r7, #0
		if(!keyDown(scanCodeBuffer[i]))
    35e6:	4b54      	ldr	r3, [pc, #336]	; (3738 <printKeyboardBuffer+0x1a0>)
    35e8:	4699      	mov	r9, r3
		if(keyDownBuffer[i] == scancode)
    35ea:	4c54      	ldr	r4, [pc, #336]	; (373c <printKeyboardBuffer+0x1a4>)
			keyDownBuffer[i] = scanCodeBuffer[i];
    35ec:	46a0      	mov	r8, r4
    35ee:	e007      	b.n	3600 <printKeyboardBuffer+0x68>
					if(xCharPos > 0)
    35f0:	4b53      	ldr	r3, [pc, #332]	; (3740 <printKeyboardBuffer+0x1a8>)
    35f2:	781b      	ldrb	r3, [r3, #0]
    35f4:	2b00      	cmp	r3, #0
    35f6:	d12e      	bne.n	3656 <printKeyboardBuffer+0xbe>
	for(int i=0; i<20; i++)
    35f8:	3701      	adds	r7, #1
    35fa:	2f14      	cmp	r7, #20
    35fc:	d100      	bne.n	3600 <printKeyboardBuffer+0x68>
    35fe:	e08d      	b.n	371c <printKeyboardBuffer+0x184>
		if(!keyDown(scanCodeBuffer[i]))
    3600:	464b      	mov	r3, r9
    3602:	5cfb      	ldrb	r3, [r7, r3]
		if(keyDownBuffer[i] == scancode)
    3604:	7822      	ldrb	r2, [r4, #0]
		if(!keyDown(scanCodeBuffer[i]))
    3606:	4293      	cmp	r3, r2
    3608:	d0f6      	beq.n	35f8 <printKeyboardBuffer+0x60>
			keyDownBuffer[i] = scanCodeBuffer[i];
    360a:	4642      	mov	r2, r8
    360c:	55d3      	strb	r3, [r2, r7]
				if(scanCodeBuffer[i] == 0xFF)
    360e:	2bff      	cmp	r3, #255	; 0xff
    3610:	d0f2      	beq.n	35f8 <printKeyboardBuffer+0x60>
				else if(scanCodeBuffer[i] == 35) //left
    3612:	2b23      	cmp	r3, #35	; 0x23
    3614:	d0ec      	beq.n	35f0 <printKeyboardBuffer+0x58>
				else if(scanCodeBuffer[i] == 45)	//down
    3616:	2b2d      	cmp	r3, #45	; 0x2d
    3618:	d028      	beq.n	366c <printKeyboardBuffer+0xd4>
				else if(scanCodeBuffer[i] == 55)	//up
    361a:	2b37      	cmp	r3, #55	; 0x37
    361c:	d035      	beq.n	368a <printKeyboardBuffer+0xf2>
				else if(scanCodeBuffer[i] == 65)	//right
    361e:	2b41      	cmp	r3, #65	; 0x41
    3620:	d042      	beq.n	36a8 <printKeyboardBuffer+0x110>
				else if((scanCodeBuffer[i] == 49) | (scanCodeBuffer[i] == 13))
    3622:	2b31      	cmp	r3, #49	; 0x31
    3624:	d0e8      	beq.n	35f8 <printKeyboardBuffer+0x60>
    3626:	2b0d      	cmp	r3, #13
    3628:	d0e6      	beq.n	35f8 <printKeyboardBuffer+0x60>
				else if(scanCodeBuffer[i] == 58) //Return
    362a:	2b3a      	cmp	r3, #58	; 0x3a
    362c:	d04b      	beq.n	36c6 <printKeyboardBuffer+0x12e>
				else if(scanCodeBuffer[i] == 69) //Line
    362e:	2b45      	cmp	r3, #69	; 0x45
    3630:	d05a      	beq.n	36e8 <printKeyboardBuffer+0x150>
					if(shifted)
    3632:	9a01      	ldr	r2, [sp, #4]
    3634:	2a00      	cmp	r2, #0
    3636:	d062      	beq.n	36fe <printKeyboardBuffer+0x166>
						drawChar(shiftCase[scanCodeBuffer[i]]);
    3638:	aa02      	add	r2, sp, #8
    363a:	5cd0      	ldrb	r0, [r2, r3]
    363c:	4b41      	ldr	r3, [pc, #260]	; (3744 <printKeyboardBuffer+0x1ac>)
    363e:	4798      	blx	r3
						if(xCharPos < 79)
    3640:	4b3f      	ldr	r3, [pc, #252]	; (3740 <printKeyboardBuffer+0x1a8>)
    3642:	781b      	ldrb	r3, [r3, #0]
    3644:	2b4e      	cmp	r3, #78	; 0x4e
    3646:	d802      	bhi.n	364e <printKeyboardBuffer+0xb6>
						xCharPos++;
    3648:	3301      	adds	r3, #1
    364a:	4a3d      	ldr	r2, [pc, #244]	; (3740 <printKeyboardBuffer+0x1a8>)
    364c:	7013      	strb	r3, [r2, #0]
						cursorBlinkState = true;
    364e:	2201      	movs	r2, #1
    3650:	4b3d      	ldr	r3, [pc, #244]	; (3748 <printKeyboardBuffer+0x1b0>)
    3652:	701a      	strb	r2, [r3, #0]
    3654:	e7d0      	b.n	35f8 <printKeyboardBuffer+0x60>
						drawCursorBuffer();
    3656:	4b3d      	ldr	r3, [pc, #244]	; (374c <printKeyboardBuffer+0x1b4>)
    3658:	4798      	blx	r3
						moveCursor((xCharPos-1),(yCharPos));
    365a:	4b3d      	ldr	r3, [pc, #244]	; (3750 <printKeyboardBuffer+0x1b8>)
    365c:	7819      	ldrb	r1, [r3, #0]
    365e:	4b38      	ldr	r3, [pc, #224]	; (3740 <printKeyboardBuffer+0x1a8>)
    3660:	7818      	ldrb	r0, [r3, #0]
    3662:	3801      	subs	r0, #1
    3664:	b2c0      	uxtb	r0, r0
    3666:	4b3b      	ldr	r3, [pc, #236]	; (3754 <printKeyboardBuffer+0x1bc>)
    3668:	4798      	blx	r3
    366a:	e7c5      	b.n	35f8 <printKeyboardBuffer+0x60>
					if(yCharPos < 24)
    366c:	4b38      	ldr	r3, [pc, #224]	; (3750 <printKeyboardBuffer+0x1b8>)
    366e:	781b      	ldrb	r3, [r3, #0]
    3670:	2b17      	cmp	r3, #23
    3672:	d8c1      	bhi.n	35f8 <printKeyboardBuffer+0x60>
						drawCursorBuffer();
    3674:	4b35      	ldr	r3, [pc, #212]	; (374c <printKeyboardBuffer+0x1b4>)
    3676:	4798      	blx	r3
						moveCursor((xCharPos),(yCharPos+1));
    3678:	4b35      	ldr	r3, [pc, #212]	; (3750 <printKeyboardBuffer+0x1b8>)
    367a:	7819      	ldrb	r1, [r3, #0]
    367c:	3101      	adds	r1, #1
    367e:	b2c9      	uxtb	r1, r1
    3680:	4b2f      	ldr	r3, [pc, #188]	; (3740 <printKeyboardBuffer+0x1a8>)
    3682:	7818      	ldrb	r0, [r3, #0]
    3684:	4b33      	ldr	r3, [pc, #204]	; (3754 <printKeyboardBuffer+0x1bc>)
    3686:	4798      	blx	r3
    3688:	e7b6      	b.n	35f8 <printKeyboardBuffer+0x60>
					if(yCharPos > 0)
    368a:	4b31      	ldr	r3, [pc, #196]	; (3750 <printKeyboardBuffer+0x1b8>)
    368c:	781b      	ldrb	r3, [r3, #0]
    368e:	2b00      	cmp	r3, #0
    3690:	d0b2      	beq.n	35f8 <printKeyboardBuffer+0x60>
						drawCursorBuffer();
    3692:	4b2e      	ldr	r3, [pc, #184]	; (374c <printKeyboardBuffer+0x1b4>)
    3694:	4798      	blx	r3
						moveCursor((xCharPos),(yCharPos-1));
    3696:	4b2e      	ldr	r3, [pc, #184]	; (3750 <printKeyboardBuffer+0x1b8>)
    3698:	7819      	ldrb	r1, [r3, #0]
    369a:	3901      	subs	r1, #1
    369c:	b2c9      	uxtb	r1, r1
    369e:	4b28      	ldr	r3, [pc, #160]	; (3740 <printKeyboardBuffer+0x1a8>)
    36a0:	7818      	ldrb	r0, [r3, #0]
    36a2:	4b2c      	ldr	r3, [pc, #176]	; (3754 <printKeyboardBuffer+0x1bc>)
    36a4:	4798      	blx	r3
    36a6:	e7a7      	b.n	35f8 <printKeyboardBuffer+0x60>
					if(xCharPos < 79)
    36a8:	4b25      	ldr	r3, [pc, #148]	; (3740 <printKeyboardBuffer+0x1a8>)
    36aa:	781b      	ldrb	r3, [r3, #0]
    36ac:	2b4e      	cmp	r3, #78	; 0x4e
    36ae:	d8a3      	bhi.n	35f8 <printKeyboardBuffer+0x60>
						drawCursorBuffer();
    36b0:	4b26      	ldr	r3, [pc, #152]	; (374c <printKeyboardBuffer+0x1b4>)
    36b2:	4798      	blx	r3
						moveCursor((xCharPos+1),(yCharPos));
    36b4:	4b26      	ldr	r3, [pc, #152]	; (3750 <printKeyboardBuffer+0x1b8>)
    36b6:	7819      	ldrb	r1, [r3, #0]
    36b8:	4b21      	ldr	r3, [pc, #132]	; (3740 <printKeyboardBuffer+0x1a8>)
    36ba:	7818      	ldrb	r0, [r3, #0]
    36bc:	3001      	adds	r0, #1
    36be:	b2c0      	uxtb	r0, r0
    36c0:	4b24      	ldr	r3, [pc, #144]	; (3754 <printKeyboardBuffer+0x1bc>)
    36c2:	4798      	blx	r3
    36c4:	e798      	b.n	35f8 <printKeyboardBuffer+0x60>
					if(yCharPos == 23)
    36c6:	4b22      	ldr	r3, [pc, #136]	; (3750 <printKeyboardBuffer+0x1b8>)
    36c8:	781b      	ldrb	r3, [r3, #0]
    36ca:	2b17      	cmp	r3, #23
    36cc:	d006      	beq.n	36dc <printKeyboardBuffer+0x144>
						yCharPos++;
    36ce:	3301      	adds	r3, #1
    36d0:	4a1f      	ldr	r2, [pc, #124]	; (3750 <printKeyboardBuffer+0x1b8>)
    36d2:	7013      	strb	r3, [r2, #0]
						xCharPos = 0;
    36d4:	2200      	movs	r2, #0
    36d6:	4b1a      	ldr	r3, [pc, #104]	; (3740 <printKeyboardBuffer+0x1a8>)
    36d8:	701a      	strb	r2, [r3, #0]
    36da:	e78d      	b.n	35f8 <printKeyboardBuffer+0x60>
						newLine();
    36dc:	4b1e      	ldr	r3, [pc, #120]	; (3758 <printKeyboardBuffer+0x1c0>)
    36de:	4798      	blx	r3
						xCharPos = 0;
    36e0:	2200      	movs	r2, #0
    36e2:	4b17      	ldr	r3, [pc, #92]	; (3740 <printKeyboardBuffer+0x1a8>)
    36e4:	701a      	strb	r2, [r3, #0]
    36e6:	e787      	b.n	35f8 <printKeyboardBuffer+0x60>
					if(yCharPos == 23)
    36e8:	4b19      	ldr	r3, [pc, #100]	; (3750 <printKeyboardBuffer+0x1b8>)
    36ea:	781b      	ldrb	r3, [r3, #0]
    36ec:	2b17      	cmp	r3, #23
    36ee:	d003      	beq.n	36f8 <printKeyboardBuffer+0x160>
						yCharPos++;
    36f0:	3301      	adds	r3, #1
    36f2:	4a17      	ldr	r2, [pc, #92]	; (3750 <printKeyboardBuffer+0x1b8>)
    36f4:	7013      	strb	r3, [r2, #0]
    36f6:	e77f      	b.n	35f8 <printKeyboardBuffer+0x60>
						newLine();
    36f8:	4b17      	ldr	r3, [pc, #92]	; (3758 <printKeyboardBuffer+0x1c0>)
    36fa:	4798      	blx	r3
    36fc:	e77c      	b.n	35f8 <printKeyboardBuffer+0x60>
						drawChar(noCase[scanCodeBuffer[i]]);
    36fe:	aa14      	add	r2, sp, #80	; 0x50
    3700:	5cd0      	ldrb	r0, [r2, r3]
    3702:	4b10      	ldr	r3, [pc, #64]	; (3744 <printKeyboardBuffer+0x1ac>)
    3704:	4798      	blx	r3
						if(xCharPos < 79)
    3706:	4b0e      	ldr	r3, [pc, #56]	; (3740 <printKeyboardBuffer+0x1a8>)
    3708:	781b      	ldrb	r3, [r3, #0]
    370a:	2b4e      	cmp	r3, #78	; 0x4e
    370c:	d802      	bhi.n	3714 <printKeyboardBuffer+0x17c>
						xCharPos++;
    370e:	3301      	adds	r3, #1
    3710:	4a0b      	ldr	r2, [pc, #44]	; (3740 <printKeyboardBuffer+0x1a8>)
    3712:	7013      	strb	r3, [r2, #0]
						cursorBlinkState = true;
    3714:	2201      	movs	r2, #1
    3716:	4b0c      	ldr	r3, [pc, #48]	; (3748 <printKeyboardBuffer+0x1b0>)
    3718:	701a      	strb	r2, [r3, #0]
    371a:	e76d      	b.n	35f8 <printKeyboardBuffer+0x60>
		scanCodeBuffer[i] = 0xFF;
    371c:	23ff      	movs	r3, #255	; 0xff
    371e:	7033      	strb	r3, [r6, #0]
    3720:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    3722:	42b5      	cmp	r5, r6
    3724:	d1fb      	bne.n	371e <printKeyboardBuffer+0x186>
}
    3726:	b027      	add	sp, #156	; 0x9c
    3728:	bc0c      	pop	{r2, r3}
    372a:	4690      	mov	r8, r2
    372c:	4699      	mov	r9, r3
    372e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3730:	00006b04 	.word	0x00006b04
    3734:	00003e95 	.word	0x00003e95
    3738:	20000024 	.word	0x20000024
    373c:	20000010 	.word	0x20000010
    3740:	2000017c 	.word	0x2000017c
    3744:	00002ead 	.word	0x00002ead
    3748:	20000009 	.word	0x20000009
    374c:	00002c75 	.word	0x00002c75
    3750:	2000017d 	.word	0x2000017d
    3754:	00002d65 	.word	0x00002d65
    3758:	000033dd 	.word	0x000033dd

0000375c <SysTick_Handler>:
{
    375c:	b5f0      	push	{r4, r5, r6, r7, lr}
    375e:	46c6      	mov	lr, r8
    3760:	b500      	push	{lr}
	ul_tickcount++;
    3762:	4b69      	ldr	r3, [pc, #420]	; (3908 <SysTick_Handler+0x1ac>)
    3764:	681a      	ldr	r2, [r3, #0]
    3766:	1c50      	adds	r0, r2, #1
    3768:	6018      	str	r0, [r3, #0]
	if(ul_tickcount % 2000 == 0)
    376a:	21fa      	movs	r1, #250	; 0xfa
    376c:	00c9      	lsls	r1, r1, #3
    376e:	4b67      	ldr	r3, [pc, #412]	; (390c <SysTick_Handler+0x1b0>)
    3770:	4798      	blx	r3
    3772:	2900      	cmp	r1, #0
    3774:	d15d      	bne.n	3832 <SysTick_Handler+0xd6>
		if(cursorBlinkState)
    3776:	4b66      	ldr	r3, [pc, #408]	; (3910 <SysTick_Handler+0x1b4>)
    3778:	781b      	ldrb	r3, [r3, #0]
    377a:	2b00      	cmp	r3, #0
    377c:	d063      	beq.n	3846 <SysTick_Handler+0xea>
			REG_PORT_OUTCLR1 = LCD_CS;
    377e:	4c65      	ldr	r4, [pc, #404]	; (3914 <SysTick_Handler+0x1b8>)
    3780:	2580      	movs	r5, #128	; 0x80
    3782:	03ed      	lsls	r5, r5, #15
    3784:	6025      	str	r5, [r4, #0]
			REG_PORT_OUTCLR1 = LCD_DC;
    3786:	2780      	movs	r7, #128	; 0x80
    3788:	043f      	lsls	r7, r7, #16
    378a:	6027      	str	r7, [r4, #0]
			LCD_Write_COM16(0x36, 0x00);
    378c:	2036      	movs	r0, #54	; 0x36
    378e:	4b62      	ldr	r3, [pc, #392]	; (3918 <SysTick_Handler+0x1bc>)
    3790:	4798      	blx	r3
			REG_PORT_OUTSET1 = LCD_DC;
    3792:	4e62      	ldr	r6, [pc, #392]	; (391c <SysTick_Handler+0x1c0>)
    3794:	6037      	str	r7, [r6, #0]
			LCD_Write_DATA8(0x00);
    3796:	2000      	movs	r0, #0
    3798:	4b61      	ldr	r3, [pc, #388]	; (3920 <SysTick_Handler+0x1c4>)
    379a:	4798      	blx	r3
			REG_PORT_OUTSET1 = LCD_CS;
    379c:	6035      	str	r5, [r6, #0]
			REG_PORT_OUTCLR1 = LCD_CS;
    379e:	6025      	str	r5, [r4, #0]
			setXY((xCharPos*10)-1, yCharPos*20, ((xCharPos+1)*10)-1, ((yCharPos+1)*20));
    37a0:	4b60      	ldr	r3, [pc, #384]	; (3924 <SysTick_Handler+0x1c8>)
    37a2:	7818      	ldrb	r0, [r3, #0]
    37a4:	4b60      	ldr	r3, [pc, #384]	; (3928 <SysTick_Handler+0x1cc>)
    37a6:	7819      	ldrb	r1, [r3, #0]
    37a8:	1c4b      	adds	r3, r1, #1
    37aa:	2414      	movs	r4, #20
    37ac:	4363      	muls	r3, r4
    37ae:	b29b      	uxth	r3, r3
    37b0:	1c42      	adds	r2, r0, #1
    37b2:	0095      	lsls	r5, r2, #2
    37b4:	1952      	adds	r2, r2, r5
    37b6:	0052      	lsls	r2, r2, #1
    37b8:	3a01      	subs	r2, #1
    37ba:	b292      	uxth	r2, r2
    37bc:	4361      	muls	r1, r4
    37be:	b289      	uxth	r1, r1
    37c0:	0084      	lsls	r4, r0, #2
    37c2:	1900      	adds	r0, r0, r4
    37c4:	0040      	lsls	r0, r0, #1
    37c6:	3801      	subs	r0, #1
    37c8:	b280      	uxth	r0, r0
    37ca:	4c58      	ldr	r4, [pc, #352]	; (392c <SysTick_Handler+0x1d0>)
    37cc:	47a0      	blx	r4
    37ce:	4c58      	ldr	r4, [pc, #352]	; (3930 <SysTick_Handler+0x1d4>)
    37d0:	0025      	movs	r5, r4
    37d2:	35c8      	adds	r5, #200	; 0xc8
				setPixel((back_Color_High<<8)|back_Color_Low);
    37d4:	4b57      	ldr	r3, [pc, #348]	; (3934 <SysTick_Handler+0x1d8>)
    37d6:	4698      	mov	r8, r3
    37d8:	4f57      	ldr	r7, [pc, #348]	; (3938 <SysTick_Handler+0x1dc>)
    37da:	4e58      	ldr	r6, [pc, #352]	; (393c <SysTick_Handler+0x1e0>)
    37dc:	e009      	b.n	37f2 <SysTick_Handler+0x96>
    37de:	4643      	mov	r3, r8
    37e0:	8818      	ldrh	r0, [r3, #0]
    37e2:	0200      	lsls	r0, r0, #8
    37e4:	883b      	ldrh	r3, [r7, #0]
    37e6:	4318      	orrs	r0, r3
    37e8:	b280      	uxth	r0, r0
    37ea:	47b0      	blx	r6
    37ec:	3401      	adds	r4, #1
			for(uint16_t i = 0 ; i < 200 ; i++)
    37ee:	42a5      	cmp	r5, r4
    37f0:	d00c      	beq.n	380c <SysTick_Handler+0xb0>
				if((cursorBuffer[i] != 0xFF))
    37f2:	7823      	ldrb	r3, [r4, #0]
    37f4:	2bff      	cmp	r3, #255	; 0xff
    37f6:	d0f2      	beq.n	37de <SysTick_Handler+0x82>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    37f8:	4b51      	ldr	r3, [pc, #324]	; (3940 <SysTick_Handler+0x1e4>)
    37fa:	8818      	ldrh	r0, [r3, #0]
    37fc:	0200      	lsls	r0, r0, #8
    37fe:	4b51      	ldr	r3, [pc, #324]	; (3944 <SysTick_Handler+0x1e8>)
    3800:	881b      	ldrh	r3, [r3, #0]
    3802:	4318      	orrs	r0, r3
    3804:	b280      	uxth	r0, r0
    3806:	4b4d      	ldr	r3, [pc, #308]	; (393c <SysTick_Handler+0x1e0>)
    3808:	4798      	blx	r3
    380a:	e7ef      	b.n	37ec <SysTick_Handler+0x90>
			REG_PORT_OUTCLR1 = LCD_DC;
    380c:	2580      	movs	r5, #128	; 0x80
    380e:	042d      	lsls	r5, r5, #16
    3810:	4b40      	ldr	r3, [pc, #256]	; (3914 <SysTick_Handler+0x1b8>)
    3812:	601d      	str	r5, [r3, #0]
			LCD_Write_COM16(0x36, 0x00);
    3814:	2100      	movs	r1, #0
    3816:	2036      	movs	r0, #54	; 0x36
    3818:	4b3f      	ldr	r3, [pc, #252]	; (3918 <SysTick_Handler+0x1bc>)
    381a:	4798      	blx	r3
			REG_PORT_OUTSET1 = LCD_DC;
    381c:	4c3f      	ldr	r4, [pc, #252]	; (391c <SysTick_Handler+0x1c0>)
    381e:	6025      	str	r5, [r4, #0]
			LCD_Write_DATA8(0x80);
    3820:	2080      	movs	r0, #128	; 0x80
    3822:	4b3f      	ldr	r3, [pc, #252]	; (3920 <SysTick_Handler+0x1c4>)
    3824:	4798      	blx	r3
			REG_PORT_OUTSET1 = LCD_CS;
    3826:	2380      	movs	r3, #128	; 0x80
    3828:	03db      	lsls	r3, r3, #15
    382a:	6023      	str	r3, [r4, #0]
			cursorBlinkState = false;
    382c:	2200      	movs	r2, #0
    382e:	4b38      	ldr	r3, [pc, #224]	; (3910 <SysTick_Handler+0x1b4>)
    3830:	701a      	strb	r2, [r3, #0]
	if(ul_tickcount % 20 == 0)
    3832:	4b35      	ldr	r3, [pc, #212]	; (3908 <SysTick_Handler+0x1ac>)
    3834:	6818      	ldr	r0, [r3, #0]
    3836:	2114      	movs	r1, #20
    3838:	4b34      	ldr	r3, [pc, #208]	; (390c <SysTick_Handler+0x1b0>)
    383a:	4798      	blx	r3
    383c:	2900      	cmp	r1, #0
    383e:	d05e      	beq.n	38fe <SysTick_Handler+0x1a2>
}
    3840:	bc04      	pop	{r2}
    3842:	4690      	mov	r8, r2
    3844:	bdf0      	pop	{r4, r5, r6, r7, pc}
			REG_PORT_OUTCLR1 = LCD_CS;
    3846:	4c33      	ldr	r4, [pc, #204]	; (3914 <SysTick_Handler+0x1b8>)
    3848:	2580      	movs	r5, #128	; 0x80
    384a:	03ed      	lsls	r5, r5, #15
    384c:	6025      	str	r5, [r4, #0]
			REG_PORT_OUTCLR1 = LCD_DC;
    384e:	2780      	movs	r7, #128	; 0x80
    3850:	043f      	lsls	r7, r7, #16
    3852:	6027      	str	r7, [r4, #0]
			LCD_Write_COM16(0x36, 0x00);
    3854:	2100      	movs	r1, #0
    3856:	2036      	movs	r0, #54	; 0x36
    3858:	4b2f      	ldr	r3, [pc, #188]	; (3918 <SysTick_Handler+0x1bc>)
    385a:	4798      	blx	r3
			REG_PORT_OUTSET1 = LCD_DC;
    385c:	4e2f      	ldr	r6, [pc, #188]	; (391c <SysTick_Handler+0x1c0>)
    385e:	6037      	str	r7, [r6, #0]
			LCD_Write_DATA8(0x00);
    3860:	2000      	movs	r0, #0
    3862:	4b2f      	ldr	r3, [pc, #188]	; (3920 <SysTick_Handler+0x1c4>)
    3864:	4798      	blx	r3
			REG_PORT_OUTSET1 = LCD_CS;
    3866:	6035      	str	r5, [r6, #0]
			REG_PORT_OUTCLR1 = LCD_CS;
    3868:	6025      	str	r5, [r4, #0]
			setXY((xCharPos*10)-1, yCharPos*20, ((xCharPos+1)*10)-1, ((yCharPos+1)*20));
    386a:	4b2e      	ldr	r3, [pc, #184]	; (3924 <SysTick_Handler+0x1c8>)
    386c:	7818      	ldrb	r0, [r3, #0]
    386e:	4b2e      	ldr	r3, [pc, #184]	; (3928 <SysTick_Handler+0x1cc>)
    3870:	7819      	ldrb	r1, [r3, #0]
    3872:	1c4b      	adds	r3, r1, #1
    3874:	2414      	movs	r4, #20
    3876:	4363      	muls	r3, r4
    3878:	b29b      	uxth	r3, r3
    387a:	1c42      	adds	r2, r0, #1
    387c:	0095      	lsls	r5, r2, #2
    387e:	1952      	adds	r2, r2, r5
    3880:	0052      	lsls	r2, r2, #1
    3882:	3a01      	subs	r2, #1
    3884:	b292      	uxth	r2, r2
    3886:	4361      	muls	r1, r4
    3888:	b289      	uxth	r1, r1
    388a:	0084      	lsls	r4, r0, #2
    388c:	1900      	adds	r0, r0, r4
    388e:	0040      	lsls	r0, r0, #1
    3890:	3801      	subs	r0, #1
    3892:	b280      	uxth	r0, r0
    3894:	4c25      	ldr	r4, [pc, #148]	; (392c <SysTick_Handler+0x1d0>)
    3896:	47a0      	blx	r4
    3898:	4c25      	ldr	r4, [pc, #148]	; (3930 <SysTick_Handler+0x1d4>)
    389a:	0025      	movs	r5, r4
    389c:	35c8      	adds	r5, #200	; 0xc8
				setPixel((back_Color_High<<8)|back_Color_Low);
    389e:	4b25      	ldr	r3, [pc, #148]	; (3934 <SysTick_Handler+0x1d8>)
    38a0:	4698      	mov	r8, r3
    38a2:	4f25      	ldr	r7, [pc, #148]	; (3938 <SysTick_Handler+0x1dc>)
    38a4:	4e25      	ldr	r6, [pc, #148]	; (393c <SysTick_Handler+0x1e0>)
    38a6:	e00b      	b.n	38c0 <SysTick_Handler+0x164>
				setPixel((fore_Color_High<<8)|fore_Color_Low);
    38a8:	4b25      	ldr	r3, [pc, #148]	; (3940 <SysTick_Handler+0x1e4>)
    38aa:	8818      	ldrh	r0, [r3, #0]
    38ac:	0200      	lsls	r0, r0, #8
    38ae:	4b25      	ldr	r3, [pc, #148]	; (3944 <SysTick_Handler+0x1e8>)
    38b0:	881b      	ldrh	r3, [r3, #0]
    38b2:	4318      	orrs	r0, r3
    38b4:	b280      	uxth	r0, r0
    38b6:	4b21      	ldr	r3, [pc, #132]	; (393c <SysTick_Handler+0x1e0>)
    38b8:	4798      	blx	r3
    38ba:	3401      	adds	r4, #1
			for(uint16_t i = 0 ; i < 200 ; i++)
    38bc:	42ac      	cmp	r4, r5
    38be:	d00a      	beq.n	38d6 <SysTick_Handler+0x17a>
				if((cursorBuffer[i] == 0xFF))
    38c0:	7823      	ldrb	r3, [r4, #0]
    38c2:	2bff      	cmp	r3, #255	; 0xff
    38c4:	d0f0      	beq.n	38a8 <SysTick_Handler+0x14c>
				setPixel((back_Color_High<<8)|back_Color_Low);
    38c6:	4643      	mov	r3, r8
    38c8:	8818      	ldrh	r0, [r3, #0]
    38ca:	0200      	lsls	r0, r0, #8
    38cc:	883b      	ldrh	r3, [r7, #0]
    38ce:	4318      	orrs	r0, r3
    38d0:	b280      	uxth	r0, r0
    38d2:	47b0      	blx	r6
    38d4:	e7f1      	b.n	38ba <SysTick_Handler+0x15e>
			REG_PORT_OUTCLR1 = LCD_DC;
    38d6:	2580      	movs	r5, #128	; 0x80
    38d8:	042d      	lsls	r5, r5, #16
    38da:	4b0e      	ldr	r3, [pc, #56]	; (3914 <SysTick_Handler+0x1b8>)
    38dc:	601d      	str	r5, [r3, #0]
			LCD_Write_COM16(0x36, 0x00);
    38de:	2100      	movs	r1, #0
    38e0:	2036      	movs	r0, #54	; 0x36
    38e2:	4b0d      	ldr	r3, [pc, #52]	; (3918 <SysTick_Handler+0x1bc>)
    38e4:	4798      	blx	r3
			REG_PORT_OUTSET1 = LCD_DC;
    38e6:	4c0d      	ldr	r4, [pc, #52]	; (391c <SysTick_Handler+0x1c0>)
    38e8:	6025      	str	r5, [r4, #0]
			LCD_Write_DATA8(0x80);
    38ea:	2080      	movs	r0, #128	; 0x80
    38ec:	4b0c      	ldr	r3, [pc, #48]	; (3920 <SysTick_Handler+0x1c4>)
    38ee:	4798      	blx	r3
			REG_PORT_OUTSET1 = LCD_CS;
    38f0:	2380      	movs	r3, #128	; 0x80
    38f2:	03db      	lsls	r3, r3, #15
    38f4:	6023      	str	r3, [r4, #0]
			cursorBlinkState = true;
    38f6:	2201      	movs	r2, #1
    38f8:	4b05      	ldr	r3, [pc, #20]	; (3910 <SysTick_Handler+0x1b4>)
    38fa:	701a      	strb	r2, [r3, #0]
    38fc:	e799      	b.n	3832 <SysTick_Handler+0xd6>
		readKeyboard();
    38fe:	4b12      	ldr	r3, [pc, #72]	; (3948 <SysTick_Handler+0x1ec>)
    3900:	4798      	blx	r3
		printKeyboardBuffer();
    3902:	4b12      	ldr	r3, [pc, #72]	; (394c <SysTick_Handler+0x1f0>)
    3904:	4798      	blx	r3
}
    3906:	e79b      	b.n	3840 <SysTick_Handler+0xe4>
    3908:	20000178 	.word	0x20000178
    390c:	00003ded 	.word	0x00003ded
    3910:	20000009 	.word	0x20000009
    3914:	41004494 	.word	0x41004494
    3918:	00002ae5 	.word	0x00002ae5
    391c:	41004498 	.word	0x41004498
    3920:	00002b15 	.word	0x00002b15
    3924:	2000017c 	.word	0x2000017c
    3928:	2000017d 	.word	0x2000017d
    392c:	00002bed 	.word	0x00002bed
    3930:	200001e8 	.word	0x200001e8
    3934:	2000030a 	.word	0x2000030a
    3938:	200002e4 	.word	0x200002e4
    393c:	00002b69 	.word	0x00002b69
    3940:	200002e6 	.word	0x200002e6
    3944:	20000308 	.word	0x20000308
    3948:	00001d0d 	.word	0x00001d0d
    394c:	00003599 	.word	0x00003599

00003950 <clrXY>:
{
    3950:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    3952:	4b04      	ldr	r3, [pc, #16]	; (3964 <clrXY+0x14>)
    3954:	881b      	ldrh	r3, [r3, #0]
    3956:	4a04      	ldr	r2, [pc, #16]	; (3968 <clrXY+0x18>)
    3958:	8812      	ldrh	r2, [r2, #0]
    395a:	2100      	movs	r1, #0
    395c:	2000      	movs	r0, #0
    395e:	4c03      	ldr	r4, [pc, #12]	; (396c <clrXY+0x1c>)
    3960:	47a0      	blx	r4
}
    3962:	bd10      	pop	{r4, pc}
    3964:	2000000c 	.word	0x2000000c
    3968:	2000000a 	.word	0x2000000a
    396c:	00002bed 	.word	0x00002bed

00003970 <clrScr>:
{
    3970:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    3972:	2280      	movs	r2, #128	; 0x80
    3974:	03d2      	lsls	r2, r2, #15
    3976:	4b02      	ldr	r3, [pc, #8]	; (3980 <clrScr+0x10>)
    3978:	601a      	str	r2, [r3, #0]
	clrXY();
    397a:	4b02      	ldr	r3, [pc, #8]	; (3984 <clrScr+0x14>)
    397c:	4798      	blx	r3
}
    397e:	bd10      	pop	{r4, pc}
    3980:	41004494 	.word	0x41004494
    3984:	00003951 	.word	0x00003951

00003988 <InitLCD>:
 {
    3988:	b5f0      	push	{r4, r5, r6, r7, lr}
    398a:	46c6      	mov	lr, r8
    398c:	b500      	push	{lr}
    398e:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = PORT_PB16;
    3990:	2380      	movs	r3, #128	; 0x80
    3992:	025b      	lsls	r3, r3, #9
    3994:	4a75      	ldr	r2, [pc, #468]	; (3b6c <InitLCD+0x1e4>)
    3996:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    3998:	4c75      	ldr	r4, [pc, #468]	; (3b70 <InitLCD+0x1e8>)
    399a:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    399c:	2580      	movs	r5, #128	; 0x80
    399e:	05ed      	lsls	r5, r5, #23
    39a0:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    39a2:	2005      	movs	r0, #5
    39a4:	4f73      	ldr	r7, [pc, #460]	; (3b74 <InitLCD+0x1ec>)
    39a6:	47b8      	blx	r7
	REG_PORT_OUTCLR1 = LCD_Reset;
    39a8:	4e73      	ldr	r6, [pc, #460]	; (3b78 <InitLCD+0x1f0>)
    39aa:	6035      	str	r5, [r6, #0]
	delay_ms(5);
    39ac:	2005      	movs	r0, #5
    39ae:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_Reset;
    39b0:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    39b2:	2380      	movs	r3, #128	; 0x80
    39b4:	03db      	lsls	r3, r3, #15
    39b6:	6033      	str	r3, [r6, #0]
	for(int i = 0; i < 70; i++)
    39b8:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    39ba:	46b0      	mov	r8, r6
    39bc:	2580      	movs	r5, #128	; 0x80
    39be:	042d      	lsls	r5, r5, #16
    39c0:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    39c2:	4e6e      	ldr	r6, [pc, #440]	; (3b7c <InitLCD+0x1f4>)
		REG_PORT_OUTCLR1 = LCD_DC;
    39c4:	4643      	mov	r3, r8
    39c6:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    39c8:	5da1      	ldrb	r1, [r4, r6]
    39ca:	4b6d      	ldr	r3, [pc, #436]	; (3b80 <InitLCD+0x1f8>)
    39cc:	5ce0      	ldrb	r0, [r4, r3]
    39ce:	4b6d      	ldr	r3, [pc, #436]	; (3b84 <InitLCD+0x1fc>)
    39d0:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    39d2:	4b67      	ldr	r3, [pc, #412]	; (3b70 <InitLCD+0x1e8>)
    39d4:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    39d6:	4b6c      	ldr	r3, [pc, #432]	; (3b88 <InitLCD+0x200>)
    39d8:	5ce0      	ldrb	r0, [r4, r3]
    39da:	4b6c      	ldr	r3, [pc, #432]	; (3b8c <InitLCD+0x204>)
    39dc:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    39de:	3401      	adds	r4, #1
    39e0:	2c46      	cmp	r4, #70	; 0x46
    39e2:	d1ef      	bne.n	39c4 <InitLCD+0x3c>
    39e4:	23d1      	movs	r3, #209	; 0xd1
    39e6:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    39e8:	4d66      	ldr	r5, [pc, #408]	; (3b84 <InitLCD+0x1fc>)
			LCD_Write_DATA8(beelzebub[l]);
    39ea:	4f68      	ldr	r7, [pc, #416]	; (3b8c <InitLCD+0x204>)
    39ec:	4c68      	ldr	r4, [pc, #416]	; (3b90 <InitLCD+0x208>)
    39ee:	0026      	movs	r6, r4
    39f0:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    39f2:	2100      	movs	r1, #0
    39f4:	9801      	ldr	r0, [sp, #4]
    39f6:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    39f8:	7820      	ldrb	r0, [r4, #0]
    39fa:	47b8      	blx	r7
    39fc:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    39fe:	42a6      	cmp	r6, r4
    3a00:	d1f7      	bne.n	39f2 <InitLCD+0x6a>
	for(char k = 0xD1; k < 0xD6; k++)
    3a02:	9b01      	ldr	r3, [sp, #4]
    3a04:	3301      	adds	r3, #1
    3a06:	b2db      	uxtb	r3, r3
    3a08:	9301      	str	r3, [sp, #4]
    3a0a:	2bd6      	cmp	r3, #214	; 0xd6
    3a0c:	d1ee      	bne.n	39ec <InitLCD+0x64>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    3a0e:	2100      	movs	r1, #0
    3a10:	20f0      	movs	r0, #240	; 0xf0
    3a12:	4c5c      	ldr	r4, [pc, #368]	; (3b84 <InitLCD+0x1fc>)
    3a14:	47a0      	blx	r4
    3a16:	2055      	movs	r0, #85	; 0x55
    3a18:	4d5c      	ldr	r5, [pc, #368]	; (3b8c <InitLCD+0x204>)
    3a1a:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    3a1c:	2101      	movs	r1, #1
    3a1e:	20f0      	movs	r0, #240	; 0xf0
    3a20:	47a0      	blx	r4
    3a22:	20aa      	movs	r0, #170	; 0xaa
    3a24:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    3a26:	2102      	movs	r1, #2
    3a28:	20f0      	movs	r0, #240	; 0xf0
    3a2a:	47a0      	blx	r4
    3a2c:	2052      	movs	r0, #82	; 0x52
    3a2e:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    3a30:	2103      	movs	r1, #3
    3a32:	20f0      	movs	r0, #240	; 0xf0
    3a34:	47a0      	blx	r4
    3a36:	2008      	movs	r0, #8
    3a38:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    3a3a:	2104      	movs	r1, #4
    3a3c:	20f0      	movs	r0, #240	; 0xf0
    3a3e:	47a0      	blx	r4
    3a40:	2000      	movs	r0, #0
    3a42:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    3a44:	2100      	movs	r1, #0
    3a46:	20b1      	movs	r0, #177	; 0xb1
    3a48:	47a0      	blx	r4
    3a4a:	20cc      	movs	r0, #204	; 0xcc
    3a4c:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    3a4e:	2101      	movs	r1, #1
    3a50:	20b1      	movs	r0, #177	; 0xb1
    3a52:	47a0      	blx	r4
    3a54:	2000      	movs	r0, #0
    3a56:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    3a58:	2100      	movs	r1, #0
    3a5a:	20b5      	movs	r0, #181	; 0xb5
    3a5c:	47a0      	blx	r4
    3a5e:	2050      	movs	r0, #80	; 0x50
    3a60:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    3a62:	2100      	movs	r1, #0
    3a64:	20b6      	movs	r0, #182	; 0xb6
    3a66:	47a0      	blx	r4
    3a68:	2005      	movs	r0, #5
    3a6a:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    3a6c:	2100      	movs	r1, #0
    3a6e:	20b7      	movs	r0, #183	; 0xb7
    3a70:	47a0      	blx	r4
    3a72:	2070      	movs	r0, #112	; 0x70
    3a74:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    3a76:	2101      	movs	r1, #1
    3a78:	20b7      	movs	r0, #183	; 0xb7
    3a7a:	47a0      	blx	r4
    3a7c:	2070      	movs	r0, #112	; 0x70
    3a7e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    3a80:	2100      	movs	r1, #0
    3a82:	20b8      	movs	r0, #184	; 0xb8
    3a84:	47a0      	blx	r4
    3a86:	2001      	movs	r0, #1
    3a88:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    3a8a:	2101      	movs	r1, #1
    3a8c:	20b8      	movs	r0, #184	; 0xb8
    3a8e:	47a0      	blx	r4
    3a90:	2003      	movs	r0, #3
    3a92:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    3a94:	2102      	movs	r1, #2
    3a96:	20b8      	movs	r0, #184	; 0xb8
    3a98:	47a0      	blx	r4
    3a9a:	2003      	movs	r0, #3
    3a9c:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    3a9e:	2103      	movs	r1, #3
    3aa0:	20b8      	movs	r0, #184	; 0xb8
    3aa2:	47a0      	blx	r4
    3aa4:	2003      	movs	r0, #3
    3aa6:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    3aa8:	2100      	movs	r1, #0
    3aaa:	20bc      	movs	r0, #188	; 0xbc
    3aac:	47a0      	blx	r4
    3aae:	2002      	movs	r0, #2
    3ab0:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    3ab2:	2101      	movs	r1, #1
    3ab4:	20bc      	movs	r0, #188	; 0xbc
    3ab6:	47a0      	blx	r4
    3ab8:	2000      	movs	r0, #0
    3aba:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    3abc:	2102      	movs	r1, #2
    3abe:	20bc      	movs	r0, #188	; 0xbc
    3ac0:	47a0      	blx	r4
    3ac2:	2000      	movs	r0, #0
    3ac4:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    3ac6:	2100      	movs	r1, #0
    3ac8:	20c9      	movs	r0, #201	; 0xc9
    3aca:	47a0      	blx	r4
    3acc:	20d0      	movs	r0, #208	; 0xd0
    3ace:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    3ad0:	2101      	movs	r1, #1
    3ad2:	20c9      	movs	r0, #201	; 0xc9
    3ad4:	47a0      	blx	r4
    3ad6:	2002      	movs	r0, #2
    3ad8:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    3ada:	2102      	movs	r1, #2
    3adc:	20c9      	movs	r0, #201	; 0xc9
    3ade:	47a0      	blx	r4
    3ae0:	2050      	movs	r0, #80	; 0x50
    3ae2:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    3ae4:	2103      	movs	r1, #3
    3ae6:	20c9      	movs	r0, #201	; 0xc9
    3ae8:	47a0      	blx	r4
    3aea:	2050      	movs	r0, #80	; 0x50
    3aec:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    3aee:	2104      	movs	r1, #4
    3af0:	20c9      	movs	r0, #201	; 0xc9
    3af2:	47a0      	blx	r4
    3af4:	2050      	movs	r0, #80	; 0x50
    3af6:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    3af8:	2100      	movs	r1, #0
    3afa:	2035      	movs	r0, #53	; 0x35
    3afc:	47a0      	blx	r4
    3afe:	2000      	movs	r0, #0
    3b00:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    3b02:	2100      	movs	r1, #0
    3b04:	203a      	movs	r0, #58	; 0x3a
    3b06:	47a0      	blx	r4
    3b08:	2055      	movs	r0, #85	; 0x55
    3b0a:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0x00);
    3b0c:	2100      	movs	r1, #0
    3b0e:	2036      	movs	r0, #54	; 0x36
    3b10:	47a0      	blx	r4
    3b12:	2000      	movs	r0, #0
    3b14:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    3b16:	2100      	movs	r1, #0
    3b18:	2011      	movs	r0, #17
    3b1a:	47a0      	blx	r4
  	delay_ms(100);
    3b1c:	2064      	movs	r0, #100	; 0x64
    3b1e:	4e15      	ldr	r6, [pc, #84]	; (3b74 <InitLCD+0x1ec>)
    3b20:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    3b22:	2100      	movs	r1, #0
    3b24:	2029      	movs	r0, #41	; 0x29
    3b26:	47a0      	blx	r4
   	delay_ms(100);
    3b28:	2064      	movs	r0, #100	; 0x64
    3b2a:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    3b2c:	2100      	movs	r1, #0
    3b2e:	2051      	movs	r0, #81	; 0x51
    3b30:	47a0      	blx	r4
    3b32:	20ff      	movs	r0, #255	; 0xff
    3b34:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    3b36:	2280      	movs	r2, #128	; 0x80
    3b38:	03d2      	lsls	r2, r2, #15
    3b3a:	4b0d      	ldr	r3, [pc, #52]	; (3b70 <InitLCD+0x1e8>)
    3b3c:	601a      	str	r2, [r3, #0]
	clrScr();
    3b3e:	4b15      	ldr	r3, [pc, #84]	; (3b94 <InitLCD+0x20c>)
    3b40:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
    3b42:	2300      	movs	r3, #0
    3b44:	4a14      	ldr	r2, [pc, #80]	; (3b98 <InitLCD+0x210>)
    3b46:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    3b48:	4a14      	ldr	r2, [pc, #80]	; (3b9c <InitLCD+0x214>)
    3b4a:	8013      	strh	r3, [r2, #0]
	back_Color_High = ((r&248)|g>>5);
    3b4c:	4a14      	ldr	r2, [pc, #80]	; (3ba0 <InitLCD+0x218>)
    3b4e:	8013      	strh	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    3b50:	4a14      	ldr	r2, [pc, #80]	; (3ba4 <InitLCD+0x21c>)
    3b52:	8013      	strh	r3, [r2, #0]
	fillRect(0,0,799,489);
    3b54:	23ea      	movs	r3, #234	; 0xea
    3b56:	33ff      	adds	r3, #255	; 0xff
    3b58:	4a13      	ldr	r2, [pc, #76]	; (3ba8 <InitLCD+0x220>)
    3b5a:	2100      	movs	r1, #0
    3b5c:	2000      	movs	r0, #0
    3b5e:	4c13      	ldr	r4, [pc, #76]	; (3bac <InitLCD+0x224>)
    3b60:	47a0      	blx	r4
}
    3b62:	b002      	add	sp, #8
    3b64:	bc04      	pop	{r2}
    3b66:	4690      	mov	r8, r2
    3b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b6a:	46c0      	nop			; (mov r8, r8)
    3b6c:	41004488 	.word	0x41004488
    3b70:	41004498 	.word	0x41004498
    3b74:	00000155 	.word	0x00000155
    3b78:	41004494 	.word	0x41004494
    3b7c:	00006c68 	.word	0x00006c68
    3b80:	00006bc8 	.word	0x00006bc8
    3b84:	00002ae5 	.word	0x00002ae5
    3b88:	00006c10 	.word	0x00006c10
    3b8c:	00002b15 	.word	0x00002b15
    3b90:	00006b94 	.word	0x00006b94
    3b94:	00003971 	.word	0x00003971
    3b98:	200002e6 	.word	0x200002e6
    3b9c:	20000308 	.word	0x20000308
    3ba0:	2000030a 	.word	0x2000030a
    3ba4:	200002e4 	.word	0x200002e4
    3ba8:	0000031f 	.word	0x0000031f
    3bac:	00002ff1 	.word	0x00002ff1

00003bb0 <main>:
{
    3bb0:	b570      	push	{r4, r5, r6, lr}
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    3bb2:	4b38      	ldr	r3, [pc, #224]	; (3c94 <main+0xe4>)
    3bb4:	4e38      	ldr	r6, [pc, #224]	; (3c98 <main+0xe8>)
    3bb6:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    3bb8:	2580      	movs	r5, #128	; 0x80
    3bba:	05ed      	lsls	r5, r5, #23
    3bbc:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    3bbe:	2480      	movs	r4, #128	; 0x80
    3bc0:	03e4      	lsls	r4, r4, #15
    3bc2:	601c      	str	r4, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    3bc4:	2080      	movs	r0, #128	; 0x80
    3bc6:	0280      	lsls	r0, r0, #10
    3bc8:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    3bca:	2180      	movs	r1, #128	; 0x80
    3bcc:	0409      	lsls	r1, r1, #16
    3bce:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    3bd0:	2280      	movs	r2, #128	; 0x80
    3bd2:	0252      	lsls	r2, r2, #9
    3bd4:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3bd6:	4b31      	ldr	r3, [pc, #196]	; (3c9c <main+0xec>)
    3bd8:	601e      	str	r6, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    3bda:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    3bdc:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    3bde:	6018      	str	r0, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    3be0:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    3be2:	601a      	str	r2, [r3, #0]
	configure_adc();
    3be4:	4b2e      	ldr	r3, [pc, #184]	; (3ca0 <main+0xf0>)
    3be6:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3be8:	4b2e      	ldr	r3, [pc, #184]	; (3ca4 <main+0xf4>)
    3bea:	681b      	ldr	r3, [r3, #0]
    3bec:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    3bee:	b252      	sxtb	r2, r2
    3bf0:	2a00      	cmp	r2, #0
    3bf2:	dbfb      	blt.n	3bec <main+0x3c>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3bf4:	7b1a      	ldrb	r2, [r3, #12]
    3bf6:	2102      	movs	r1, #2
    3bf8:	430a      	orrs	r2, r1
    3bfa:	731a      	strb	r2, [r3, #12]
    3bfc:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    3bfe:	b252      	sxtb	r2, r2
    3c00:	2a00      	cmp	r2, #0
    3c02:	dbfb      	blt.n	3bfc <main+0x4c>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3c04:	2501      	movs	r5, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3c06:	2404      	movs	r4, #4
		status_flags |= ADC_STATUS_WINDOW;
    3c08:	2002      	movs	r0, #2
    3c0a:	e001      	b.n	3c10 <main+0x60>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    3c0c:	4215      	tst	r5, r2
    3c0e:	d10a      	bne.n	3c26 <main+0x76>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3c10:	7e19      	ldrb	r1, [r3, #24]
    3c12:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3c14:	002a      	movs	r2, r5
    3c16:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3c18:	420c      	tst	r4, r1
    3c1a:	d000      	beq.n	3c1e <main+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    3c1c:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3c1e:	4208      	tst	r0, r1
    3c20:	d0f4      	beq.n	3c0c <main+0x5c>
		status_flags |= ADC_STATUS_OVERRUN;
    3c22:	4322      	orrs	r2, r4
    3c24:	e7f2      	b.n	3c0c <main+0x5c>
    3c26:	7e5a      	ldrb	r2, [r3, #25]
	while (adc_is_syncing(module_inst)) {
    3c28:	b252      	sxtb	r2, r2
    3c2a:	2a00      	cmp	r2, #0
    3c2c:	dbfb      	blt.n	3c26 <main+0x76>
	*result = adc_module->RESULT.reg;
    3c2e:	8b5c      	ldrh	r4, [r3, #26]
    3c30:	b2a4      	uxth	r4, r4
	adc_module->INTFLAG.reg = int_flags;
    3c32:	2201      	movs	r2, #1
    3c34:	761a      	strb	r2, [r3, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3c36:	7e19      	ldrb	r1, [r3, #24]
    3c38:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3c3a:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3c3c:	0748      	lsls	r0, r1, #29
    3c3e:	d501      	bpl.n	3c44 <main+0x94>
		status_flags |= ADC_STATUS_WINDOW;
    3c40:	2002      	movs	r0, #2
    3c42:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3c44:	0789      	lsls	r1, r1, #30
    3c46:	d501      	bpl.n	3c4c <main+0x9c>
		status_flags |= ADC_STATUS_OVERRUN;
    3c48:	2104      	movs	r1, #4
    3c4a:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3c4c:	0752      	lsls	r2, r2, #29
    3c4e:	d501      	bpl.n	3c54 <main+0xa4>
	adc_module->INTFLAG.reg = int_flags;
    3c50:	2202      	movs	r2, #2
    3c52:	761a      	strb	r2, [r3, #24]
	system_init();	
    3c54:	4b14      	ldr	r3, [pc, #80]	; (3ca8 <main+0xf8>)
    3c56:	4798      	blx	r3
	delay_init();
    3c58:	4b14      	ldr	r3, [pc, #80]	; (3cac <main+0xfc>)
    3c5a:	4798      	blx	r3
	srand(adcResult);
    3c5c:	0020      	movs	r0, r4
    3c5e:	4b14      	ldr	r3, [pc, #80]	; (3cb0 <main+0x100>)
    3c60:	4798      	blx	r3
	configure_usart_USB();
    3c62:	4b14      	ldr	r3, [pc, #80]	; (3cb4 <main+0x104>)
    3c64:	4798      	blx	r3
	configure_console();
    3c66:	4b14      	ldr	r3, [pc, #80]	; (3cb8 <main+0x108>)
    3c68:	4798      	blx	r3
	printf("Hello World\n\r");
    3c6a:	4814      	ldr	r0, [pc, #80]	; (3cbc <main+0x10c>)
    3c6c:	4b14      	ldr	r3, [pc, #80]	; (3cc0 <main+0x110>)
    3c6e:	4798      	blx	r3
	InitLCD();
    3c70:	4b14      	ldr	r3, [pc, #80]	; (3cc4 <main+0x114>)
    3c72:	4798      	blx	r3
	splashScreen();
    3c74:	4b14      	ldr	r3, [pc, #80]	; (3cc8 <main+0x118>)
    3c76:	4798      	blx	r3
	interruptInit();
    3c78:	4b14      	ldr	r3, [pc, #80]	; (3ccc <main+0x11c>)
    3c7a:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
    3c7c:	22ff      	movs	r2, #255	; 0xff
    3c7e:	4b14      	ldr	r3, [pc, #80]	; (3cd0 <main+0x120>)
    3c80:	801a      	strh	r2, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    3c82:	3a1f      	subs	r2, #31
    3c84:	4b13      	ldr	r3, [pc, #76]	; (3cd4 <main+0x124>)
    3c86:	801a      	strh	r2, [r3, #0]
	xCharPos = 0;
    3c88:	2300      	movs	r3, #0
    3c8a:	4a13      	ldr	r2, [pc, #76]	; (3cd8 <main+0x128>)
    3c8c:	7013      	strb	r3, [r2, #0]
	yCharPos = 0;
    3c8e:	4a13      	ldr	r2, [pc, #76]	; (3cdc <main+0x12c>)
    3c90:	7013      	strb	r3, [r2, #0]
    3c92:	e7fe      	b.n	3c92 <main+0xe2>
    3c94:	41004488 	.word	0x41004488
    3c98:	0000ffff 	.word	0x0000ffff
    3c9c:	41004494 	.word	0x41004494
    3ca0:	00001cad 	.word	0x00001cad
    3ca4:	200002e8 	.word	0x200002e8
    3ca8:	00001891 	.word	0x00001891
    3cac:	00000115 	.word	0x00000115
    3cb0:	00003eed 	.word	0x00003eed
    3cb4:	00001bf1 	.word	0x00001bf1
    3cb8:	00001ab9 	.word	0x00001ab9
    3cbc:	00006c58 	.word	0x00006c58
    3cc0:	00003eb9 	.word	0x00003eb9
    3cc4:	00003989 	.word	0x00003989
    3cc8:	00003185 	.word	0x00003185
    3ccc:	00001bc1 	.word	0x00001bc1
    3cd0:	200002e6 	.word	0x200002e6
    3cd4:	20000308 	.word	0x20000308
    3cd8:	2000017c 	.word	0x2000017c
    3cdc:	2000017d 	.word	0x2000017d

00003ce0 <__udivsi3>:
    3ce0:	2200      	movs	r2, #0
    3ce2:	0843      	lsrs	r3, r0, #1
    3ce4:	428b      	cmp	r3, r1
    3ce6:	d374      	bcc.n	3dd2 <__udivsi3+0xf2>
    3ce8:	0903      	lsrs	r3, r0, #4
    3cea:	428b      	cmp	r3, r1
    3cec:	d35f      	bcc.n	3dae <__udivsi3+0xce>
    3cee:	0a03      	lsrs	r3, r0, #8
    3cf0:	428b      	cmp	r3, r1
    3cf2:	d344      	bcc.n	3d7e <__udivsi3+0x9e>
    3cf4:	0b03      	lsrs	r3, r0, #12
    3cf6:	428b      	cmp	r3, r1
    3cf8:	d328      	bcc.n	3d4c <__udivsi3+0x6c>
    3cfa:	0c03      	lsrs	r3, r0, #16
    3cfc:	428b      	cmp	r3, r1
    3cfe:	d30d      	bcc.n	3d1c <__udivsi3+0x3c>
    3d00:	22ff      	movs	r2, #255	; 0xff
    3d02:	0209      	lsls	r1, r1, #8
    3d04:	ba12      	rev	r2, r2
    3d06:	0c03      	lsrs	r3, r0, #16
    3d08:	428b      	cmp	r3, r1
    3d0a:	d302      	bcc.n	3d12 <__udivsi3+0x32>
    3d0c:	1212      	asrs	r2, r2, #8
    3d0e:	0209      	lsls	r1, r1, #8
    3d10:	d065      	beq.n	3dde <__udivsi3+0xfe>
    3d12:	0b03      	lsrs	r3, r0, #12
    3d14:	428b      	cmp	r3, r1
    3d16:	d319      	bcc.n	3d4c <__udivsi3+0x6c>
    3d18:	e000      	b.n	3d1c <__udivsi3+0x3c>
    3d1a:	0a09      	lsrs	r1, r1, #8
    3d1c:	0bc3      	lsrs	r3, r0, #15
    3d1e:	428b      	cmp	r3, r1
    3d20:	d301      	bcc.n	3d26 <__udivsi3+0x46>
    3d22:	03cb      	lsls	r3, r1, #15
    3d24:	1ac0      	subs	r0, r0, r3
    3d26:	4152      	adcs	r2, r2
    3d28:	0b83      	lsrs	r3, r0, #14
    3d2a:	428b      	cmp	r3, r1
    3d2c:	d301      	bcc.n	3d32 <__udivsi3+0x52>
    3d2e:	038b      	lsls	r3, r1, #14
    3d30:	1ac0      	subs	r0, r0, r3
    3d32:	4152      	adcs	r2, r2
    3d34:	0b43      	lsrs	r3, r0, #13
    3d36:	428b      	cmp	r3, r1
    3d38:	d301      	bcc.n	3d3e <__udivsi3+0x5e>
    3d3a:	034b      	lsls	r3, r1, #13
    3d3c:	1ac0      	subs	r0, r0, r3
    3d3e:	4152      	adcs	r2, r2
    3d40:	0b03      	lsrs	r3, r0, #12
    3d42:	428b      	cmp	r3, r1
    3d44:	d301      	bcc.n	3d4a <__udivsi3+0x6a>
    3d46:	030b      	lsls	r3, r1, #12
    3d48:	1ac0      	subs	r0, r0, r3
    3d4a:	4152      	adcs	r2, r2
    3d4c:	0ac3      	lsrs	r3, r0, #11
    3d4e:	428b      	cmp	r3, r1
    3d50:	d301      	bcc.n	3d56 <__udivsi3+0x76>
    3d52:	02cb      	lsls	r3, r1, #11
    3d54:	1ac0      	subs	r0, r0, r3
    3d56:	4152      	adcs	r2, r2
    3d58:	0a83      	lsrs	r3, r0, #10
    3d5a:	428b      	cmp	r3, r1
    3d5c:	d301      	bcc.n	3d62 <__udivsi3+0x82>
    3d5e:	028b      	lsls	r3, r1, #10
    3d60:	1ac0      	subs	r0, r0, r3
    3d62:	4152      	adcs	r2, r2
    3d64:	0a43      	lsrs	r3, r0, #9
    3d66:	428b      	cmp	r3, r1
    3d68:	d301      	bcc.n	3d6e <__udivsi3+0x8e>
    3d6a:	024b      	lsls	r3, r1, #9
    3d6c:	1ac0      	subs	r0, r0, r3
    3d6e:	4152      	adcs	r2, r2
    3d70:	0a03      	lsrs	r3, r0, #8
    3d72:	428b      	cmp	r3, r1
    3d74:	d301      	bcc.n	3d7a <__udivsi3+0x9a>
    3d76:	020b      	lsls	r3, r1, #8
    3d78:	1ac0      	subs	r0, r0, r3
    3d7a:	4152      	adcs	r2, r2
    3d7c:	d2cd      	bcs.n	3d1a <__udivsi3+0x3a>
    3d7e:	09c3      	lsrs	r3, r0, #7
    3d80:	428b      	cmp	r3, r1
    3d82:	d301      	bcc.n	3d88 <__udivsi3+0xa8>
    3d84:	01cb      	lsls	r3, r1, #7
    3d86:	1ac0      	subs	r0, r0, r3
    3d88:	4152      	adcs	r2, r2
    3d8a:	0983      	lsrs	r3, r0, #6
    3d8c:	428b      	cmp	r3, r1
    3d8e:	d301      	bcc.n	3d94 <__udivsi3+0xb4>
    3d90:	018b      	lsls	r3, r1, #6
    3d92:	1ac0      	subs	r0, r0, r3
    3d94:	4152      	adcs	r2, r2
    3d96:	0943      	lsrs	r3, r0, #5
    3d98:	428b      	cmp	r3, r1
    3d9a:	d301      	bcc.n	3da0 <__udivsi3+0xc0>
    3d9c:	014b      	lsls	r3, r1, #5
    3d9e:	1ac0      	subs	r0, r0, r3
    3da0:	4152      	adcs	r2, r2
    3da2:	0903      	lsrs	r3, r0, #4
    3da4:	428b      	cmp	r3, r1
    3da6:	d301      	bcc.n	3dac <__udivsi3+0xcc>
    3da8:	010b      	lsls	r3, r1, #4
    3daa:	1ac0      	subs	r0, r0, r3
    3dac:	4152      	adcs	r2, r2
    3dae:	08c3      	lsrs	r3, r0, #3
    3db0:	428b      	cmp	r3, r1
    3db2:	d301      	bcc.n	3db8 <__udivsi3+0xd8>
    3db4:	00cb      	lsls	r3, r1, #3
    3db6:	1ac0      	subs	r0, r0, r3
    3db8:	4152      	adcs	r2, r2
    3dba:	0883      	lsrs	r3, r0, #2
    3dbc:	428b      	cmp	r3, r1
    3dbe:	d301      	bcc.n	3dc4 <__udivsi3+0xe4>
    3dc0:	008b      	lsls	r3, r1, #2
    3dc2:	1ac0      	subs	r0, r0, r3
    3dc4:	4152      	adcs	r2, r2
    3dc6:	0843      	lsrs	r3, r0, #1
    3dc8:	428b      	cmp	r3, r1
    3dca:	d301      	bcc.n	3dd0 <__udivsi3+0xf0>
    3dcc:	004b      	lsls	r3, r1, #1
    3dce:	1ac0      	subs	r0, r0, r3
    3dd0:	4152      	adcs	r2, r2
    3dd2:	1a41      	subs	r1, r0, r1
    3dd4:	d200      	bcs.n	3dd8 <__udivsi3+0xf8>
    3dd6:	4601      	mov	r1, r0
    3dd8:	4152      	adcs	r2, r2
    3dda:	4610      	mov	r0, r2
    3ddc:	4770      	bx	lr
    3dde:	e7ff      	b.n	3de0 <__udivsi3+0x100>
    3de0:	b501      	push	{r0, lr}
    3de2:	2000      	movs	r0, #0
    3de4:	f000 f806 	bl	3df4 <__aeabi_idiv0>
    3de8:	bd02      	pop	{r1, pc}
    3dea:	46c0      	nop			; (mov r8, r8)

00003dec <__aeabi_uidivmod>:
    3dec:	2900      	cmp	r1, #0
    3dee:	d0f7      	beq.n	3de0 <__udivsi3+0x100>
    3df0:	e776      	b.n	3ce0 <__udivsi3>
    3df2:	4770      	bx	lr

00003df4 <__aeabi_idiv0>:
    3df4:	4770      	bx	lr
    3df6:	46c0      	nop			; (mov r8, r8)

00003df8 <__aeabi_lmul>:
    3df8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dfa:	46ce      	mov	lr, r9
    3dfc:	4647      	mov	r7, r8
    3dfe:	0415      	lsls	r5, r2, #16
    3e00:	0c2d      	lsrs	r5, r5, #16
    3e02:	002e      	movs	r6, r5
    3e04:	b580      	push	{r7, lr}
    3e06:	0407      	lsls	r7, r0, #16
    3e08:	0c14      	lsrs	r4, r2, #16
    3e0a:	0c3f      	lsrs	r7, r7, #16
    3e0c:	4699      	mov	r9, r3
    3e0e:	0c03      	lsrs	r3, r0, #16
    3e10:	437e      	muls	r6, r7
    3e12:	435d      	muls	r5, r3
    3e14:	4367      	muls	r7, r4
    3e16:	4363      	muls	r3, r4
    3e18:	197f      	adds	r7, r7, r5
    3e1a:	0c34      	lsrs	r4, r6, #16
    3e1c:	19e4      	adds	r4, r4, r7
    3e1e:	469c      	mov	ip, r3
    3e20:	42a5      	cmp	r5, r4
    3e22:	d903      	bls.n	3e2c <__aeabi_lmul+0x34>
    3e24:	2380      	movs	r3, #128	; 0x80
    3e26:	025b      	lsls	r3, r3, #9
    3e28:	4698      	mov	r8, r3
    3e2a:	44c4      	add	ip, r8
    3e2c:	464b      	mov	r3, r9
    3e2e:	4351      	muls	r1, r2
    3e30:	4343      	muls	r3, r0
    3e32:	0436      	lsls	r6, r6, #16
    3e34:	0c36      	lsrs	r6, r6, #16
    3e36:	0c25      	lsrs	r5, r4, #16
    3e38:	0424      	lsls	r4, r4, #16
    3e3a:	4465      	add	r5, ip
    3e3c:	19a4      	adds	r4, r4, r6
    3e3e:	1859      	adds	r1, r3, r1
    3e40:	1949      	adds	r1, r1, r5
    3e42:	0020      	movs	r0, r4
    3e44:	bc0c      	pop	{r2, r3}
    3e46:	4690      	mov	r8, r2
    3e48:	4699      	mov	r9, r3
    3e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003e4c <__libc_init_array>:
    3e4c:	b570      	push	{r4, r5, r6, lr}
    3e4e:	2600      	movs	r6, #0
    3e50:	4d0c      	ldr	r5, [pc, #48]	; (3e84 <__libc_init_array+0x38>)
    3e52:	4c0d      	ldr	r4, [pc, #52]	; (3e88 <__libc_init_array+0x3c>)
    3e54:	1b64      	subs	r4, r4, r5
    3e56:	10a4      	asrs	r4, r4, #2
    3e58:	42a6      	cmp	r6, r4
    3e5a:	d109      	bne.n	3e70 <__libc_init_array+0x24>
    3e5c:	2600      	movs	r6, #0
    3e5e:	f003 f955 	bl	710c <_init>
    3e62:	4d0a      	ldr	r5, [pc, #40]	; (3e8c <__libc_init_array+0x40>)
    3e64:	4c0a      	ldr	r4, [pc, #40]	; (3e90 <__libc_init_array+0x44>)
    3e66:	1b64      	subs	r4, r4, r5
    3e68:	10a4      	asrs	r4, r4, #2
    3e6a:	42a6      	cmp	r6, r4
    3e6c:	d105      	bne.n	3e7a <__libc_init_array+0x2e>
    3e6e:	bd70      	pop	{r4, r5, r6, pc}
    3e70:	00b3      	lsls	r3, r6, #2
    3e72:	58eb      	ldr	r3, [r5, r3]
    3e74:	4798      	blx	r3
    3e76:	3601      	adds	r6, #1
    3e78:	e7ee      	b.n	3e58 <__libc_init_array+0xc>
    3e7a:	00b3      	lsls	r3, r6, #2
    3e7c:	58eb      	ldr	r3, [r5, r3]
    3e7e:	4798      	blx	r3
    3e80:	3601      	adds	r6, #1
    3e82:	e7f2      	b.n	3e6a <__libc_init_array+0x1e>
    3e84:	00007118 	.word	0x00007118
    3e88:	00007118 	.word	0x00007118
    3e8c:	00007118 	.word	0x00007118
    3e90:	0000711c 	.word	0x0000711c

00003e94 <memcpy>:
    3e94:	2300      	movs	r3, #0
    3e96:	b510      	push	{r4, lr}
    3e98:	429a      	cmp	r2, r3
    3e9a:	d100      	bne.n	3e9e <memcpy+0xa>
    3e9c:	bd10      	pop	{r4, pc}
    3e9e:	5ccc      	ldrb	r4, [r1, r3]
    3ea0:	54c4      	strb	r4, [r0, r3]
    3ea2:	3301      	adds	r3, #1
    3ea4:	e7f8      	b.n	3e98 <memcpy+0x4>

00003ea6 <memset>:
    3ea6:	0003      	movs	r3, r0
    3ea8:	1882      	adds	r2, r0, r2
    3eaa:	4293      	cmp	r3, r2
    3eac:	d100      	bne.n	3eb0 <memset+0xa>
    3eae:	4770      	bx	lr
    3eb0:	7019      	strb	r1, [r3, #0]
    3eb2:	3301      	adds	r3, #1
    3eb4:	e7f9      	b.n	3eaa <memset+0x4>
	...

00003eb8 <iprintf>:
    3eb8:	b40f      	push	{r0, r1, r2, r3}
    3eba:	4b0b      	ldr	r3, [pc, #44]	; (3ee8 <iprintf+0x30>)
    3ebc:	b513      	push	{r0, r1, r4, lr}
    3ebe:	681c      	ldr	r4, [r3, #0]
    3ec0:	2c00      	cmp	r4, #0
    3ec2:	d005      	beq.n	3ed0 <iprintf+0x18>
    3ec4:	69a3      	ldr	r3, [r4, #24]
    3ec6:	2b00      	cmp	r3, #0
    3ec8:	d102      	bne.n	3ed0 <iprintf+0x18>
    3eca:	0020      	movs	r0, r4
    3ecc:	f000 fa2e 	bl	432c <__sinit>
    3ed0:	ab05      	add	r3, sp, #20
    3ed2:	9a04      	ldr	r2, [sp, #16]
    3ed4:	68a1      	ldr	r1, [r4, #8]
    3ed6:	0020      	movs	r0, r4
    3ed8:	9301      	str	r3, [sp, #4]
    3eda:	f000 fc03 	bl	46e4 <_vfiprintf_r>
    3ede:	bc16      	pop	{r1, r2, r4}
    3ee0:	bc08      	pop	{r3}
    3ee2:	b004      	add	sp, #16
    3ee4:	4718      	bx	r3
    3ee6:	46c0      	nop			; (mov r8, r8)
    3ee8:	20000038 	.word	0x20000038

00003eec <srand>:
    3eec:	4b10      	ldr	r3, [pc, #64]	; (3f30 <srand+0x44>)
    3eee:	b570      	push	{r4, r5, r6, lr}
    3ef0:	681c      	ldr	r4, [r3, #0]
    3ef2:	0005      	movs	r5, r0
    3ef4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d115      	bne.n	3f26 <srand+0x3a>
    3efa:	2018      	movs	r0, #24
    3efc:	f000 fb18 	bl	4530 <malloc>
    3f00:	4b0c      	ldr	r3, [pc, #48]	; (3f34 <srand+0x48>)
    3f02:	63a0      	str	r0, [r4, #56]	; 0x38
    3f04:	8003      	strh	r3, [r0, #0]
    3f06:	4b0c      	ldr	r3, [pc, #48]	; (3f38 <srand+0x4c>)
    3f08:	2201      	movs	r2, #1
    3f0a:	8043      	strh	r3, [r0, #2]
    3f0c:	4b0b      	ldr	r3, [pc, #44]	; (3f3c <srand+0x50>)
    3f0e:	8083      	strh	r3, [r0, #4]
    3f10:	4b0b      	ldr	r3, [pc, #44]	; (3f40 <srand+0x54>)
    3f12:	80c3      	strh	r3, [r0, #6]
    3f14:	4b0b      	ldr	r3, [pc, #44]	; (3f44 <srand+0x58>)
    3f16:	8103      	strh	r3, [r0, #8]
    3f18:	2305      	movs	r3, #5
    3f1a:	8143      	strh	r3, [r0, #10]
    3f1c:	3306      	adds	r3, #6
    3f1e:	8183      	strh	r3, [r0, #12]
    3f20:	2300      	movs	r3, #0
    3f22:	6102      	str	r2, [r0, #16]
    3f24:	6143      	str	r3, [r0, #20]
    3f26:	2200      	movs	r2, #0
    3f28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3f2a:	611d      	str	r5, [r3, #16]
    3f2c:	615a      	str	r2, [r3, #20]
    3f2e:	bd70      	pop	{r4, r5, r6, pc}
    3f30:	20000038 	.word	0x20000038
    3f34:	0000330e 	.word	0x0000330e
    3f38:	ffffabcd 	.word	0xffffabcd
    3f3c:	00001234 	.word	0x00001234
    3f40:	ffffe66d 	.word	0xffffe66d
    3f44:	ffffdeec 	.word	0xffffdeec

00003f48 <rand>:
    3f48:	4b15      	ldr	r3, [pc, #84]	; (3fa0 <rand+0x58>)
    3f4a:	b510      	push	{r4, lr}
    3f4c:	681c      	ldr	r4, [r3, #0]
    3f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3f50:	2b00      	cmp	r3, #0
    3f52:	d115      	bne.n	3f80 <rand+0x38>
    3f54:	2018      	movs	r0, #24
    3f56:	f000 faeb 	bl	4530 <malloc>
    3f5a:	4b12      	ldr	r3, [pc, #72]	; (3fa4 <rand+0x5c>)
    3f5c:	63a0      	str	r0, [r4, #56]	; 0x38
    3f5e:	8003      	strh	r3, [r0, #0]
    3f60:	4b11      	ldr	r3, [pc, #68]	; (3fa8 <rand+0x60>)
    3f62:	2201      	movs	r2, #1
    3f64:	8043      	strh	r3, [r0, #2]
    3f66:	4b11      	ldr	r3, [pc, #68]	; (3fac <rand+0x64>)
    3f68:	8083      	strh	r3, [r0, #4]
    3f6a:	4b11      	ldr	r3, [pc, #68]	; (3fb0 <rand+0x68>)
    3f6c:	80c3      	strh	r3, [r0, #6]
    3f6e:	4b11      	ldr	r3, [pc, #68]	; (3fb4 <rand+0x6c>)
    3f70:	8103      	strh	r3, [r0, #8]
    3f72:	2305      	movs	r3, #5
    3f74:	8143      	strh	r3, [r0, #10]
    3f76:	3306      	adds	r3, #6
    3f78:	8183      	strh	r3, [r0, #12]
    3f7a:	2300      	movs	r3, #0
    3f7c:	6102      	str	r2, [r0, #16]
    3f7e:	6143      	str	r3, [r0, #20]
    3f80:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    3f82:	4a0d      	ldr	r2, [pc, #52]	; (3fb8 <rand+0x70>)
    3f84:	6920      	ldr	r0, [r4, #16]
    3f86:	6961      	ldr	r1, [r4, #20]
    3f88:	4b0c      	ldr	r3, [pc, #48]	; (3fbc <rand+0x74>)
    3f8a:	f7ff ff35 	bl	3df8 <__aeabi_lmul>
    3f8e:	2201      	movs	r2, #1
    3f90:	2300      	movs	r3, #0
    3f92:	1880      	adds	r0, r0, r2
    3f94:	4159      	adcs	r1, r3
    3f96:	6120      	str	r0, [r4, #16]
    3f98:	6161      	str	r1, [r4, #20]
    3f9a:	0048      	lsls	r0, r1, #1
    3f9c:	0840      	lsrs	r0, r0, #1
    3f9e:	bd10      	pop	{r4, pc}
    3fa0:	20000038 	.word	0x20000038
    3fa4:	0000330e 	.word	0x0000330e
    3fa8:	ffffabcd 	.word	0xffffabcd
    3fac:	00001234 	.word	0x00001234
    3fb0:	ffffe66d 	.word	0xffffe66d
    3fb4:	ffffdeec 	.word	0xffffdeec
    3fb8:	4c957f2d 	.word	0x4c957f2d
    3fbc:	5851f42d 	.word	0x5851f42d

00003fc0 <setbuf>:
    3fc0:	424a      	negs	r2, r1
    3fc2:	414a      	adcs	r2, r1
    3fc4:	2380      	movs	r3, #128	; 0x80
    3fc6:	b510      	push	{r4, lr}
    3fc8:	0052      	lsls	r2, r2, #1
    3fca:	00db      	lsls	r3, r3, #3
    3fcc:	f000 f802 	bl	3fd4 <setvbuf>
    3fd0:	bd10      	pop	{r4, pc}
	...

00003fd4 <setvbuf>:
    3fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fd6:	001d      	movs	r5, r3
    3fd8:	4b4f      	ldr	r3, [pc, #316]	; (4118 <setvbuf+0x144>)
    3fda:	b085      	sub	sp, #20
    3fdc:	681e      	ldr	r6, [r3, #0]
    3fde:	0004      	movs	r4, r0
    3fe0:	000f      	movs	r7, r1
    3fe2:	9200      	str	r2, [sp, #0]
    3fe4:	2e00      	cmp	r6, #0
    3fe6:	d005      	beq.n	3ff4 <setvbuf+0x20>
    3fe8:	69b3      	ldr	r3, [r6, #24]
    3fea:	2b00      	cmp	r3, #0
    3fec:	d102      	bne.n	3ff4 <setvbuf+0x20>
    3fee:	0030      	movs	r0, r6
    3ff0:	f000 f99c 	bl	432c <__sinit>
    3ff4:	4b49      	ldr	r3, [pc, #292]	; (411c <setvbuf+0x148>)
    3ff6:	429c      	cmp	r4, r3
    3ff8:	d150      	bne.n	409c <setvbuf+0xc8>
    3ffa:	6874      	ldr	r4, [r6, #4]
    3ffc:	9b00      	ldr	r3, [sp, #0]
    3ffe:	2b02      	cmp	r3, #2
    4000:	d005      	beq.n	400e <setvbuf+0x3a>
    4002:	2b01      	cmp	r3, #1
    4004:	d900      	bls.n	4008 <setvbuf+0x34>
    4006:	e084      	b.n	4112 <setvbuf+0x13e>
    4008:	2d00      	cmp	r5, #0
    400a:	da00      	bge.n	400e <setvbuf+0x3a>
    400c:	e081      	b.n	4112 <setvbuf+0x13e>
    400e:	0021      	movs	r1, r4
    4010:	0030      	movs	r0, r6
    4012:	f000 f91d 	bl	4250 <_fflush_r>
    4016:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4018:	2900      	cmp	r1, #0
    401a:	d008      	beq.n	402e <setvbuf+0x5a>
    401c:	0023      	movs	r3, r4
    401e:	3344      	adds	r3, #68	; 0x44
    4020:	4299      	cmp	r1, r3
    4022:	d002      	beq.n	402a <setvbuf+0x56>
    4024:	0030      	movs	r0, r6
    4026:	f000 fa8d 	bl	4544 <_free_r>
    402a:	2300      	movs	r3, #0
    402c:	6363      	str	r3, [r4, #52]	; 0x34
    402e:	2300      	movs	r3, #0
    4030:	61a3      	str	r3, [r4, #24]
    4032:	6063      	str	r3, [r4, #4]
    4034:	89a3      	ldrh	r3, [r4, #12]
    4036:	061b      	lsls	r3, r3, #24
    4038:	d503      	bpl.n	4042 <setvbuf+0x6e>
    403a:	6921      	ldr	r1, [r4, #16]
    403c:	0030      	movs	r0, r6
    403e:	f000 fa81 	bl	4544 <_free_r>
    4042:	89a3      	ldrh	r3, [r4, #12]
    4044:	4a36      	ldr	r2, [pc, #216]	; (4120 <setvbuf+0x14c>)
    4046:	4013      	ands	r3, r2
    4048:	81a3      	strh	r3, [r4, #12]
    404a:	9b00      	ldr	r3, [sp, #0]
    404c:	2b02      	cmp	r3, #2
    404e:	d05a      	beq.n	4106 <setvbuf+0x132>
    4050:	ab03      	add	r3, sp, #12
    4052:	aa02      	add	r2, sp, #8
    4054:	0021      	movs	r1, r4
    4056:	0030      	movs	r0, r6
    4058:	f000 f9fe 	bl	4458 <__swhatbuf_r>
    405c:	89a3      	ldrh	r3, [r4, #12]
    405e:	4318      	orrs	r0, r3
    4060:	81a0      	strh	r0, [r4, #12]
    4062:	2d00      	cmp	r5, #0
    4064:	d124      	bne.n	40b0 <setvbuf+0xdc>
    4066:	9d02      	ldr	r5, [sp, #8]
    4068:	0028      	movs	r0, r5
    406a:	f000 fa61 	bl	4530 <malloc>
    406e:	9501      	str	r5, [sp, #4]
    4070:	1e07      	subs	r7, r0, #0
    4072:	d142      	bne.n	40fa <setvbuf+0x126>
    4074:	9b02      	ldr	r3, [sp, #8]
    4076:	9301      	str	r3, [sp, #4]
    4078:	42ab      	cmp	r3, r5
    407a:	d139      	bne.n	40f0 <setvbuf+0x11c>
    407c:	2001      	movs	r0, #1
    407e:	4240      	negs	r0, r0
    4080:	2302      	movs	r3, #2
    4082:	89a2      	ldrh	r2, [r4, #12]
    4084:	4313      	orrs	r3, r2
    4086:	81a3      	strh	r3, [r4, #12]
    4088:	2300      	movs	r3, #0
    408a:	60a3      	str	r3, [r4, #8]
    408c:	0023      	movs	r3, r4
    408e:	3347      	adds	r3, #71	; 0x47
    4090:	6023      	str	r3, [r4, #0]
    4092:	6123      	str	r3, [r4, #16]
    4094:	2301      	movs	r3, #1
    4096:	6163      	str	r3, [r4, #20]
    4098:	b005      	add	sp, #20
    409a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    409c:	4b21      	ldr	r3, [pc, #132]	; (4124 <setvbuf+0x150>)
    409e:	429c      	cmp	r4, r3
    40a0:	d101      	bne.n	40a6 <setvbuf+0xd2>
    40a2:	68b4      	ldr	r4, [r6, #8]
    40a4:	e7aa      	b.n	3ffc <setvbuf+0x28>
    40a6:	4b20      	ldr	r3, [pc, #128]	; (4128 <setvbuf+0x154>)
    40a8:	429c      	cmp	r4, r3
    40aa:	d1a7      	bne.n	3ffc <setvbuf+0x28>
    40ac:	68f4      	ldr	r4, [r6, #12]
    40ae:	e7a5      	b.n	3ffc <setvbuf+0x28>
    40b0:	2f00      	cmp	r7, #0
    40b2:	d0d9      	beq.n	4068 <setvbuf+0x94>
    40b4:	69b3      	ldr	r3, [r6, #24]
    40b6:	2b00      	cmp	r3, #0
    40b8:	d102      	bne.n	40c0 <setvbuf+0xec>
    40ba:	0030      	movs	r0, r6
    40bc:	f000 f936 	bl	432c <__sinit>
    40c0:	9b00      	ldr	r3, [sp, #0]
    40c2:	2b01      	cmp	r3, #1
    40c4:	d103      	bne.n	40ce <setvbuf+0xfa>
    40c6:	89a3      	ldrh	r3, [r4, #12]
    40c8:	9a00      	ldr	r2, [sp, #0]
    40ca:	431a      	orrs	r2, r3
    40cc:	81a2      	strh	r2, [r4, #12]
    40ce:	2008      	movs	r0, #8
    40d0:	89a3      	ldrh	r3, [r4, #12]
    40d2:	6027      	str	r7, [r4, #0]
    40d4:	6127      	str	r7, [r4, #16]
    40d6:	6165      	str	r5, [r4, #20]
    40d8:	4018      	ands	r0, r3
    40da:	d018      	beq.n	410e <setvbuf+0x13a>
    40dc:	2001      	movs	r0, #1
    40de:	4018      	ands	r0, r3
    40e0:	2300      	movs	r3, #0
    40e2:	4298      	cmp	r0, r3
    40e4:	d011      	beq.n	410a <setvbuf+0x136>
    40e6:	426d      	negs	r5, r5
    40e8:	60a3      	str	r3, [r4, #8]
    40ea:	61a5      	str	r5, [r4, #24]
    40ec:	0018      	movs	r0, r3
    40ee:	e7d3      	b.n	4098 <setvbuf+0xc4>
    40f0:	9801      	ldr	r0, [sp, #4]
    40f2:	f000 fa1d 	bl	4530 <malloc>
    40f6:	1e07      	subs	r7, r0, #0
    40f8:	d0c0      	beq.n	407c <setvbuf+0xa8>
    40fa:	2380      	movs	r3, #128	; 0x80
    40fc:	89a2      	ldrh	r2, [r4, #12]
    40fe:	9d01      	ldr	r5, [sp, #4]
    4100:	4313      	orrs	r3, r2
    4102:	81a3      	strh	r3, [r4, #12]
    4104:	e7d6      	b.n	40b4 <setvbuf+0xe0>
    4106:	2000      	movs	r0, #0
    4108:	e7ba      	b.n	4080 <setvbuf+0xac>
    410a:	60a5      	str	r5, [r4, #8]
    410c:	e7c4      	b.n	4098 <setvbuf+0xc4>
    410e:	60a0      	str	r0, [r4, #8]
    4110:	e7c2      	b.n	4098 <setvbuf+0xc4>
    4112:	2001      	movs	r0, #1
    4114:	4240      	negs	r0, r0
    4116:	e7bf      	b.n	4098 <setvbuf+0xc4>
    4118:	20000038 	.word	0x20000038
    411c:	00007098 	.word	0x00007098
    4120:	fffff35c 	.word	0xfffff35c
    4124:	000070b8 	.word	0x000070b8
    4128:	00007078 	.word	0x00007078

0000412c <strlen>:
    412c:	2300      	movs	r3, #0
    412e:	5cc2      	ldrb	r2, [r0, r3]
    4130:	3301      	adds	r3, #1
    4132:	2a00      	cmp	r2, #0
    4134:	d1fb      	bne.n	412e <strlen+0x2>
    4136:	1e58      	subs	r0, r3, #1
    4138:	4770      	bx	lr
	...

0000413c <__sflush_r>:
    413c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    413e:	898a      	ldrh	r2, [r1, #12]
    4140:	0005      	movs	r5, r0
    4142:	000c      	movs	r4, r1
    4144:	0713      	lsls	r3, r2, #28
    4146:	d460      	bmi.n	420a <__sflush_r+0xce>
    4148:	684b      	ldr	r3, [r1, #4]
    414a:	2b00      	cmp	r3, #0
    414c:	dc04      	bgt.n	4158 <__sflush_r+0x1c>
    414e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4150:	2b00      	cmp	r3, #0
    4152:	dc01      	bgt.n	4158 <__sflush_r+0x1c>
    4154:	2000      	movs	r0, #0
    4156:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4158:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    415a:	2f00      	cmp	r7, #0
    415c:	d0fa      	beq.n	4154 <__sflush_r+0x18>
    415e:	2300      	movs	r3, #0
    4160:	682e      	ldr	r6, [r5, #0]
    4162:	602b      	str	r3, [r5, #0]
    4164:	2380      	movs	r3, #128	; 0x80
    4166:	015b      	lsls	r3, r3, #5
    4168:	401a      	ands	r2, r3
    416a:	d034      	beq.n	41d6 <__sflush_r+0x9a>
    416c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    416e:	89a3      	ldrh	r3, [r4, #12]
    4170:	075b      	lsls	r3, r3, #29
    4172:	d506      	bpl.n	4182 <__sflush_r+0x46>
    4174:	6863      	ldr	r3, [r4, #4]
    4176:	1ac0      	subs	r0, r0, r3
    4178:	6b63      	ldr	r3, [r4, #52]	; 0x34
    417a:	2b00      	cmp	r3, #0
    417c:	d001      	beq.n	4182 <__sflush_r+0x46>
    417e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4180:	1ac0      	subs	r0, r0, r3
    4182:	0002      	movs	r2, r0
    4184:	6a21      	ldr	r1, [r4, #32]
    4186:	2300      	movs	r3, #0
    4188:	0028      	movs	r0, r5
    418a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    418c:	47b8      	blx	r7
    418e:	89a1      	ldrh	r1, [r4, #12]
    4190:	1c43      	adds	r3, r0, #1
    4192:	d106      	bne.n	41a2 <__sflush_r+0x66>
    4194:	682b      	ldr	r3, [r5, #0]
    4196:	2b1d      	cmp	r3, #29
    4198:	d831      	bhi.n	41fe <__sflush_r+0xc2>
    419a:	4a2c      	ldr	r2, [pc, #176]	; (424c <__sflush_r+0x110>)
    419c:	40da      	lsrs	r2, r3
    419e:	07d3      	lsls	r3, r2, #31
    41a0:	d52d      	bpl.n	41fe <__sflush_r+0xc2>
    41a2:	2300      	movs	r3, #0
    41a4:	6063      	str	r3, [r4, #4]
    41a6:	6923      	ldr	r3, [r4, #16]
    41a8:	6023      	str	r3, [r4, #0]
    41aa:	04cb      	lsls	r3, r1, #19
    41ac:	d505      	bpl.n	41ba <__sflush_r+0x7e>
    41ae:	1c43      	adds	r3, r0, #1
    41b0:	d102      	bne.n	41b8 <__sflush_r+0x7c>
    41b2:	682b      	ldr	r3, [r5, #0]
    41b4:	2b00      	cmp	r3, #0
    41b6:	d100      	bne.n	41ba <__sflush_r+0x7e>
    41b8:	6560      	str	r0, [r4, #84]	; 0x54
    41ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    41bc:	602e      	str	r6, [r5, #0]
    41be:	2900      	cmp	r1, #0
    41c0:	d0c8      	beq.n	4154 <__sflush_r+0x18>
    41c2:	0023      	movs	r3, r4
    41c4:	3344      	adds	r3, #68	; 0x44
    41c6:	4299      	cmp	r1, r3
    41c8:	d002      	beq.n	41d0 <__sflush_r+0x94>
    41ca:	0028      	movs	r0, r5
    41cc:	f000 f9ba 	bl	4544 <_free_r>
    41d0:	2000      	movs	r0, #0
    41d2:	6360      	str	r0, [r4, #52]	; 0x34
    41d4:	e7bf      	b.n	4156 <__sflush_r+0x1a>
    41d6:	2301      	movs	r3, #1
    41d8:	6a21      	ldr	r1, [r4, #32]
    41da:	0028      	movs	r0, r5
    41dc:	47b8      	blx	r7
    41de:	1c43      	adds	r3, r0, #1
    41e0:	d1c5      	bne.n	416e <__sflush_r+0x32>
    41e2:	682b      	ldr	r3, [r5, #0]
    41e4:	2b00      	cmp	r3, #0
    41e6:	d0c2      	beq.n	416e <__sflush_r+0x32>
    41e8:	2b1d      	cmp	r3, #29
    41ea:	d001      	beq.n	41f0 <__sflush_r+0xb4>
    41ec:	2b16      	cmp	r3, #22
    41ee:	d101      	bne.n	41f4 <__sflush_r+0xb8>
    41f0:	602e      	str	r6, [r5, #0]
    41f2:	e7af      	b.n	4154 <__sflush_r+0x18>
    41f4:	2340      	movs	r3, #64	; 0x40
    41f6:	89a2      	ldrh	r2, [r4, #12]
    41f8:	4313      	orrs	r3, r2
    41fa:	81a3      	strh	r3, [r4, #12]
    41fc:	e7ab      	b.n	4156 <__sflush_r+0x1a>
    41fe:	2340      	movs	r3, #64	; 0x40
    4200:	430b      	orrs	r3, r1
    4202:	2001      	movs	r0, #1
    4204:	81a3      	strh	r3, [r4, #12]
    4206:	4240      	negs	r0, r0
    4208:	e7a5      	b.n	4156 <__sflush_r+0x1a>
    420a:	690f      	ldr	r7, [r1, #16]
    420c:	2f00      	cmp	r7, #0
    420e:	d0a1      	beq.n	4154 <__sflush_r+0x18>
    4210:	680b      	ldr	r3, [r1, #0]
    4212:	600f      	str	r7, [r1, #0]
    4214:	1bdb      	subs	r3, r3, r7
    4216:	9301      	str	r3, [sp, #4]
    4218:	2300      	movs	r3, #0
    421a:	0792      	lsls	r2, r2, #30
    421c:	d100      	bne.n	4220 <__sflush_r+0xe4>
    421e:	694b      	ldr	r3, [r1, #20]
    4220:	60a3      	str	r3, [r4, #8]
    4222:	9b01      	ldr	r3, [sp, #4]
    4224:	2b00      	cmp	r3, #0
    4226:	dc00      	bgt.n	422a <__sflush_r+0xee>
    4228:	e794      	b.n	4154 <__sflush_r+0x18>
    422a:	9b01      	ldr	r3, [sp, #4]
    422c:	003a      	movs	r2, r7
    422e:	6a21      	ldr	r1, [r4, #32]
    4230:	0028      	movs	r0, r5
    4232:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4234:	47b0      	blx	r6
    4236:	2800      	cmp	r0, #0
    4238:	dc03      	bgt.n	4242 <__sflush_r+0x106>
    423a:	2340      	movs	r3, #64	; 0x40
    423c:	89a2      	ldrh	r2, [r4, #12]
    423e:	4313      	orrs	r3, r2
    4240:	e7df      	b.n	4202 <__sflush_r+0xc6>
    4242:	9b01      	ldr	r3, [sp, #4]
    4244:	183f      	adds	r7, r7, r0
    4246:	1a1b      	subs	r3, r3, r0
    4248:	9301      	str	r3, [sp, #4]
    424a:	e7ea      	b.n	4222 <__sflush_r+0xe6>
    424c:	20400001 	.word	0x20400001

00004250 <_fflush_r>:
    4250:	690b      	ldr	r3, [r1, #16]
    4252:	b570      	push	{r4, r5, r6, lr}
    4254:	0005      	movs	r5, r0
    4256:	000c      	movs	r4, r1
    4258:	2b00      	cmp	r3, #0
    425a:	d101      	bne.n	4260 <_fflush_r+0x10>
    425c:	2000      	movs	r0, #0
    425e:	bd70      	pop	{r4, r5, r6, pc}
    4260:	2800      	cmp	r0, #0
    4262:	d004      	beq.n	426e <_fflush_r+0x1e>
    4264:	6983      	ldr	r3, [r0, #24]
    4266:	2b00      	cmp	r3, #0
    4268:	d101      	bne.n	426e <_fflush_r+0x1e>
    426a:	f000 f85f 	bl	432c <__sinit>
    426e:	4b0b      	ldr	r3, [pc, #44]	; (429c <_fflush_r+0x4c>)
    4270:	429c      	cmp	r4, r3
    4272:	d109      	bne.n	4288 <_fflush_r+0x38>
    4274:	686c      	ldr	r4, [r5, #4]
    4276:	220c      	movs	r2, #12
    4278:	5ea3      	ldrsh	r3, [r4, r2]
    427a:	2b00      	cmp	r3, #0
    427c:	d0ee      	beq.n	425c <_fflush_r+0xc>
    427e:	0021      	movs	r1, r4
    4280:	0028      	movs	r0, r5
    4282:	f7ff ff5b 	bl	413c <__sflush_r>
    4286:	e7ea      	b.n	425e <_fflush_r+0xe>
    4288:	4b05      	ldr	r3, [pc, #20]	; (42a0 <_fflush_r+0x50>)
    428a:	429c      	cmp	r4, r3
    428c:	d101      	bne.n	4292 <_fflush_r+0x42>
    428e:	68ac      	ldr	r4, [r5, #8]
    4290:	e7f1      	b.n	4276 <_fflush_r+0x26>
    4292:	4b04      	ldr	r3, [pc, #16]	; (42a4 <_fflush_r+0x54>)
    4294:	429c      	cmp	r4, r3
    4296:	d1ee      	bne.n	4276 <_fflush_r+0x26>
    4298:	68ec      	ldr	r4, [r5, #12]
    429a:	e7ec      	b.n	4276 <_fflush_r+0x26>
    429c:	00007098 	.word	0x00007098
    42a0:	000070b8 	.word	0x000070b8
    42a4:	00007078 	.word	0x00007078

000042a8 <_cleanup_r>:
    42a8:	b510      	push	{r4, lr}
    42aa:	4902      	ldr	r1, [pc, #8]	; (42b4 <_cleanup_r+0xc>)
    42ac:	f000 f8b2 	bl	4414 <_fwalk_reent>
    42b0:	bd10      	pop	{r4, pc}
    42b2:	46c0      	nop			; (mov r8, r8)
    42b4:	00004251 	.word	0x00004251

000042b8 <std.isra.0>:
    42b8:	2300      	movs	r3, #0
    42ba:	b510      	push	{r4, lr}
    42bc:	0004      	movs	r4, r0
    42be:	6003      	str	r3, [r0, #0]
    42c0:	6043      	str	r3, [r0, #4]
    42c2:	6083      	str	r3, [r0, #8]
    42c4:	8181      	strh	r1, [r0, #12]
    42c6:	6643      	str	r3, [r0, #100]	; 0x64
    42c8:	81c2      	strh	r2, [r0, #14]
    42ca:	6103      	str	r3, [r0, #16]
    42cc:	6143      	str	r3, [r0, #20]
    42ce:	6183      	str	r3, [r0, #24]
    42d0:	0019      	movs	r1, r3
    42d2:	2208      	movs	r2, #8
    42d4:	305c      	adds	r0, #92	; 0x5c
    42d6:	f7ff fde6 	bl	3ea6 <memset>
    42da:	4b05      	ldr	r3, [pc, #20]	; (42f0 <std.isra.0+0x38>)
    42dc:	6224      	str	r4, [r4, #32]
    42de:	6263      	str	r3, [r4, #36]	; 0x24
    42e0:	4b04      	ldr	r3, [pc, #16]	; (42f4 <std.isra.0+0x3c>)
    42e2:	62a3      	str	r3, [r4, #40]	; 0x28
    42e4:	4b04      	ldr	r3, [pc, #16]	; (42f8 <std.isra.0+0x40>)
    42e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    42e8:	4b04      	ldr	r3, [pc, #16]	; (42fc <std.isra.0+0x44>)
    42ea:	6323      	str	r3, [r4, #48]	; 0x30
    42ec:	bd10      	pop	{r4, pc}
    42ee:	46c0      	nop			; (mov r8, r8)
    42f0:	00004c51 	.word	0x00004c51
    42f4:	00004c79 	.word	0x00004c79
    42f8:	00004cb1 	.word	0x00004cb1
    42fc:	00004cdd 	.word	0x00004cdd

00004300 <__sfmoreglue>:
    4300:	b570      	push	{r4, r5, r6, lr}
    4302:	2568      	movs	r5, #104	; 0x68
    4304:	1e4a      	subs	r2, r1, #1
    4306:	4355      	muls	r5, r2
    4308:	000e      	movs	r6, r1
    430a:	0029      	movs	r1, r5
    430c:	3174      	adds	r1, #116	; 0x74
    430e:	f000 f963 	bl	45d8 <_malloc_r>
    4312:	1e04      	subs	r4, r0, #0
    4314:	d008      	beq.n	4328 <__sfmoreglue+0x28>
    4316:	2100      	movs	r1, #0
    4318:	002a      	movs	r2, r5
    431a:	6001      	str	r1, [r0, #0]
    431c:	6046      	str	r6, [r0, #4]
    431e:	300c      	adds	r0, #12
    4320:	60a0      	str	r0, [r4, #8]
    4322:	3268      	adds	r2, #104	; 0x68
    4324:	f7ff fdbf 	bl	3ea6 <memset>
    4328:	0020      	movs	r0, r4
    432a:	bd70      	pop	{r4, r5, r6, pc}

0000432c <__sinit>:
    432c:	6983      	ldr	r3, [r0, #24]
    432e:	b513      	push	{r0, r1, r4, lr}
    4330:	0004      	movs	r4, r0
    4332:	2b00      	cmp	r3, #0
    4334:	d128      	bne.n	4388 <__sinit+0x5c>
    4336:	6483      	str	r3, [r0, #72]	; 0x48
    4338:	64c3      	str	r3, [r0, #76]	; 0x4c
    433a:	6503      	str	r3, [r0, #80]	; 0x50
    433c:	4b13      	ldr	r3, [pc, #76]	; (438c <__sinit+0x60>)
    433e:	4a14      	ldr	r2, [pc, #80]	; (4390 <__sinit+0x64>)
    4340:	681b      	ldr	r3, [r3, #0]
    4342:	6282      	str	r2, [r0, #40]	; 0x28
    4344:	9301      	str	r3, [sp, #4]
    4346:	4298      	cmp	r0, r3
    4348:	d101      	bne.n	434e <__sinit+0x22>
    434a:	2301      	movs	r3, #1
    434c:	6183      	str	r3, [r0, #24]
    434e:	0020      	movs	r0, r4
    4350:	f000 f820 	bl	4394 <__sfp>
    4354:	6060      	str	r0, [r4, #4]
    4356:	0020      	movs	r0, r4
    4358:	f000 f81c 	bl	4394 <__sfp>
    435c:	60a0      	str	r0, [r4, #8]
    435e:	0020      	movs	r0, r4
    4360:	f000 f818 	bl	4394 <__sfp>
    4364:	2200      	movs	r2, #0
    4366:	60e0      	str	r0, [r4, #12]
    4368:	2104      	movs	r1, #4
    436a:	6860      	ldr	r0, [r4, #4]
    436c:	f7ff ffa4 	bl	42b8 <std.isra.0>
    4370:	2201      	movs	r2, #1
    4372:	2109      	movs	r1, #9
    4374:	68a0      	ldr	r0, [r4, #8]
    4376:	f7ff ff9f 	bl	42b8 <std.isra.0>
    437a:	2202      	movs	r2, #2
    437c:	2112      	movs	r1, #18
    437e:	68e0      	ldr	r0, [r4, #12]
    4380:	f7ff ff9a 	bl	42b8 <std.isra.0>
    4384:	2301      	movs	r3, #1
    4386:	61a3      	str	r3, [r4, #24]
    4388:	bd13      	pop	{r0, r1, r4, pc}
    438a:	46c0      	nop			; (mov r8, r8)
    438c:	00007074 	.word	0x00007074
    4390:	000042a9 	.word	0x000042a9

00004394 <__sfp>:
    4394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4396:	4b1e      	ldr	r3, [pc, #120]	; (4410 <__sfp+0x7c>)
    4398:	0007      	movs	r7, r0
    439a:	681e      	ldr	r6, [r3, #0]
    439c:	69b3      	ldr	r3, [r6, #24]
    439e:	2b00      	cmp	r3, #0
    43a0:	d102      	bne.n	43a8 <__sfp+0x14>
    43a2:	0030      	movs	r0, r6
    43a4:	f7ff ffc2 	bl	432c <__sinit>
    43a8:	3648      	adds	r6, #72	; 0x48
    43aa:	68b4      	ldr	r4, [r6, #8]
    43ac:	6873      	ldr	r3, [r6, #4]
    43ae:	3b01      	subs	r3, #1
    43b0:	d504      	bpl.n	43bc <__sfp+0x28>
    43b2:	6833      	ldr	r3, [r6, #0]
    43b4:	2b00      	cmp	r3, #0
    43b6:	d007      	beq.n	43c8 <__sfp+0x34>
    43b8:	6836      	ldr	r6, [r6, #0]
    43ba:	e7f6      	b.n	43aa <__sfp+0x16>
    43bc:	220c      	movs	r2, #12
    43be:	5ea5      	ldrsh	r5, [r4, r2]
    43c0:	2d00      	cmp	r5, #0
    43c2:	d00d      	beq.n	43e0 <__sfp+0x4c>
    43c4:	3468      	adds	r4, #104	; 0x68
    43c6:	e7f2      	b.n	43ae <__sfp+0x1a>
    43c8:	2104      	movs	r1, #4
    43ca:	0038      	movs	r0, r7
    43cc:	f7ff ff98 	bl	4300 <__sfmoreglue>
    43d0:	6030      	str	r0, [r6, #0]
    43d2:	2800      	cmp	r0, #0
    43d4:	d1f0      	bne.n	43b8 <__sfp+0x24>
    43d6:	230c      	movs	r3, #12
    43d8:	0004      	movs	r4, r0
    43da:	603b      	str	r3, [r7, #0]
    43dc:	0020      	movs	r0, r4
    43de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43e0:	2301      	movs	r3, #1
    43e2:	0020      	movs	r0, r4
    43e4:	425b      	negs	r3, r3
    43e6:	81e3      	strh	r3, [r4, #14]
    43e8:	3302      	adds	r3, #2
    43ea:	81a3      	strh	r3, [r4, #12]
    43ec:	6665      	str	r5, [r4, #100]	; 0x64
    43ee:	6025      	str	r5, [r4, #0]
    43f0:	60a5      	str	r5, [r4, #8]
    43f2:	6065      	str	r5, [r4, #4]
    43f4:	6125      	str	r5, [r4, #16]
    43f6:	6165      	str	r5, [r4, #20]
    43f8:	61a5      	str	r5, [r4, #24]
    43fa:	2208      	movs	r2, #8
    43fc:	0029      	movs	r1, r5
    43fe:	305c      	adds	r0, #92	; 0x5c
    4400:	f7ff fd51 	bl	3ea6 <memset>
    4404:	6365      	str	r5, [r4, #52]	; 0x34
    4406:	63a5      	str	r5, [r4, #56]	; 0x38
    4408:	64a5      	str	r5, [r4, #72]	; 0x48
    440a:	64e5      	str	r5, [r4, #76]	; 0x4c
    440c:	e7e6      	b.n	43dc <__sfp+0x48>
    440e:	46c0      	nop			; (mov r8, r8)
    4410:	00007074 	.word	0x00007074

00004414 <_fwalk_reent>:
    4414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4416:	0004      	movs	r4, r0
    4418:	0007      	movs	r7, r0
    441a:	2600      	movs	r6, #0
    441c:	9101      	str	r1, [sp, #4]
    441e:	3448      	adds	r4, #72	; 0x48
    4420:	2c00      	cmp	r4, #0
    4422:	d101      	bne.n	4428 <_fwalk_reent+0x14>
    4424:	0030      	movs	r0, r6
    4426:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4428:	6863      	ldr	r3, [r4, #4]
    442a:	68a5      	ldr	r5, [r4, #8]
    442c:	9300      	str	r3, [sp, #0]
    442e:	9b00      	ldr	r3, [sp, #0]
    4430:	3b01      	subs	r3, #1
    4432:	9300      	str	r3, [sp, #0]
    4434:	d501      	bpl.n	443a <_fwalk_reent+0x26>
    4436:	6824      	ldr	r4, [r4, #0]
    4438:	e7f2      	b.n	4420 <_fwalk_reent+0xc>
    443a:	89ab      	ldrh	r3, [r5, #12]
    443c:	2b01      	cmp	r3, #1
    443e:	d908      	bls.n	4452 <_fwalk_reent+0x3e>
    4440:	220e      	movs	r2, #14
    4442:	5eab      	ldrsh	r3, [r5, r2]
    4444:	3301      	adds	r3, #1
    4446:	d004      	beq.n	4452 <_fwalk_reent+0x3e>
    4448:	0029      	movs	r1, r5
    444a:	0038      	movs	r0, r7
    444c:	9b01      	ldr	r3, [sp, #4]
    444e:	4798      	blx	r3
    4450:	4306      	orrs	r6, r0
    4452:	3568      	adds	r5, #104	; 0x68
    4454:	e7eb      	b.n	442e <_fwalk_reent+0x1a>
	...

00004458 <__swhatbuf_r>:
    4458:	b570      	push	{r4, r5, r6, lr}
    445a:	000e      	movs	r6, r1
    445c:	001d      	movs	r5, r3
    445e:	230e      	movs	r3, #14
    4460:	5ec9      	ldrsh	r1, [r1, r3]
    4462:	b090      	sub	sp, #64	; 0x40
    4464:	0014      	movs	r4, r2
    4466:	2900      	cmp	r1, #0
    4468:	da07      	bge.n	447a <__swhatbuf_r+0x22>
    446a:	2300      	movs	r3, #0
    446c:	602b      	str	r3, [r5, #0]
    446e:	89b3      	ldrh	r3, [r6, #12]
    4470:	061b      	lsls	r3, r3, #24
    4472:	d411      	bmi.n	4498 <__swhatbuf_r+0x40>
    4474:	2380      	movs	r3, #128	; 0x80
    4476:	00db      	lsls	r3, r3, #3
    4478:	e00f      	b.n	449a <__swhatbuf_r+0x42>
    447a:	aa01      	add	r2, sp, #4
    447c:	f000 fd26 	bl	4ecc <_fstat_r>
    4480:	2800      	cmp	r0, #0
    4482:	dbf2      	blt.n	446a <__swhatbuf_r+0x12>
    4484:	22f0      	movs	r2, #240	; 0xf0
    4486:	9b02      	ldr	r3, [sp, #8]
    4488:	0212      	lsls	r2, r2, #8
    448a:	4013      	ands	r3, r2
    448c:	4a05      	ldr	r2, [pc, #20]	; (44a4 <__swhatbuf_r+0x4c>)
    448e:	189b      	adds	r3, r3, r2
    4490:	425a      	negs	r2, r3
    4492:	4153      	adcs	r3, r2
    4494:	602b      	str	r3, [r5, #0]
    4496:	e7ed      	b.n	4474 <__swhatbuf_r+0x1c>
    4498:	2340      	movs	r3, #64	; 0x40
    449a:	2000      	movs	r0, #0
    449c:	6023      	str	r3, [r4, #0]
    449e:	b010      	add	sp, #64	; 0x40
    44a0:	bd70      	pop	{r4, r5, r6, pc}
    44a2:	46c0      	nop			; (mov r8, r8)
    44a4:	ffffe000 	.word	0xffffe000

000044a8 <__smakebuf_r>:
    44a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    44aa:	2602      	movs	r6, #2
    44ac:	898b      	ldrh	r3, [r1, #12]
    44ae:	0005      	movs	r5, r0
    44b0:	000c      	movs	r4, r1
    44b2:	4233      	tst	r3, r6
    44b4:	d006      	beq.n	44c4 <__smakebuf_r+0x1c>
    44b6:	0023      	movs	r3, r4
    44b8:	3347      	adds	r3, #71	; 0x47
    44ba:	6023      	str	r3, [r4, #0]
    44bc:	6123      	str	r3, [r4, #16]
    44be:	2301      	movs	r3, #1
    44c0:	6163      	str	r3, [r4, #20]
    44c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    44c4:	ab01      	add	r3, sp, #4
    44c6:	466a      	mov	r2, sp
    44c8:	f7ff ffc6 	bl	4458 <__swhatbuf_r>
    44cc:	9900      	ldr	r1, [sp, #0]
    44ce:	0007      	movs	r7, r0
    44d0:	0028      	movs	r0, r5
    44d2:	f000 f881 	bl	45d8 <_malloc_r>
    44d6:	2800      	cmp	r0, #0
    44d8:	d108      	bne.n	44ec <__smakebuf_r+0x44>
    44da:	220c      	movs	r2, #12
    44dc:	5ea3      	ldrsh	r3, [r4, r2]
    44de:	059a      	lsls	r2, r3, #22
    44e0:	d4ef      	bmi.n	44c2 <__smakebuf_r+0x1a>
    44e2:	2203      	movs	r2, #3
    44e4:	4393      	bics	r3, r2
    44e6:	431e      	orrs	r6, r3
    44e8:	81a6      	strh	r6, [r4, #12]
    44ea:	e7e4      	b.n	44b6 <__smakebuf_r+0xe>
    44ec:	4b0f      	ldr	r3, [pc, #60]	; (452c <__smakebuf_r+0x84>)
    44ee:	62ab      	str	r3, [r5, #40]	; 0x28
    44f0:	2380      	movs	r3, #128	; 0x80
    44f2:	89a2      	ldrh	r2, [r4, #12]
    44f4:	6020      	str	r0, [r4, #0]
    44f6:	4313      	orrs	r3, r2
    44f8:	81a3      	strh	r3, [r4, #12]
    44fa:	9b00      	ldr	r3, [sp, #0]
    44fc:	6120      	str	r0, [r4, #16]
    44fe:	6163      	str	r3, [r4, #20]
    4500:	9b01      	ldr	r3, [sp, #4]
    4502:	2b00      	cmp	r3, #0
    4504:	d00d      	beq.n	4522 <__smakebuf_r+0x7a>
    4506:	230e      	movs	r3, #14
    4508:	5ee1      	ldrsh	r1, [r4, r3]
    450a:	0028      	movs	r0, r5
    450c:	f000 fcf0 	bl	4ef0 <_isatty_r>
    4510:	2800      	cmp	r0, #0
    4512:	d006      	beq.n	4522 <__smakebuf_r+0x7a>
    4514:	2203      	movs	r2, #3
    4516:	89a3      	ldrh	r3, [r4, #12]
    4518:	4393      	bics	r3, r2
    451a:	001a      	movs	r2, r3
    451c:	2301      	movs	r3, #1
    451e:	4313      	orrs	r3, r2
    4520:	81a3      	strh	r3, [r4, #12]
    4522:	89a0      	ldrh	r0, [r4, #12]
    4524:	4338      	orrs	r0, r7
    4526:	81a0      	strh	r0, [r4, #12]
    4528:	e7cb      	b.n	44c2 <__smakebuf_r+0x1a>
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	000042a9 	.word	0x000042a9

00004530 <malloc>:
    4530:	b510      	push	{r4, lr}
    4532:	4b03      	ldr	r3, [pc, #12]	; (4540 <malloc+0x10>)
    4534:	0001      	movs	r1, r0
    4536:	6818      	ldr	r0, [r3, #0]
    4538:	f000 f84e 	bl	45d8 <_malloc_r>
    453c:	bd10      	pop	{r4, pc}
    453e:	46c0      	nop			; (mov r8, r8)
    4540:	20000038 	.word	0x20000038

00004544 <_free_r>:
    4544:	b570      	push	{r4, r5, r6, lr}
    4546:	0005      	movs	r5, r0
    4548:	2900      	cmp	r1, #0
    454a:	d010      	beq.n	456e <_free_r+0x2a>
    454c:	1f0c      	subs	r4, r1, #4
    454e:	6823      	ldr	r3, [r4, #0]
    4550:	2b00      	cmp	r3, #0
    4552:	da00      	bge.n	4556 <_free_r+0x12>
    4554:	18e4      	adds	r4, r4, r3
    4556:	0028      	movs	r0, r5
    4558:	f000 fcfb 	bl	4f52 <__malloc_lock>
    455c:	4a1d      	ldr	r2, [pc, #116]	; (45d4 <_free_r+0x90>)
    455e:	6813      	ldr	r3, [r2, #0]
    4560:	2b00      	cmp	r3, #0
    4562:	d105      	bne.n	4570 <_free_r+0x2c>
    4564:	6063      	str	r3, [r4, #4]
    4566:	6014      	str	r4, [r2, #0]
    4568:	0028      	movs	r0, r5
    456a:	f000 fcf3 	bl	4f54 <__malloc_unlock>
    456e:	bd70      	pop	{r4, r5, r6, pc}
    4570:	42a3      	cmp	r3, r4
    4572:	d909      	bls.n	4588 <_free_r+0x44>
    4574:	6821      	ldr	r1, [r4, #0]
    4576:	1860      	adds	r0, r4, r1
    4578:	4283      	cmp	r3, r0
    457a:	d1f3      	bne.n	4564 <_free_r+0x20>
    457c:	6818      	ldr	r0, [r3, #0]
    457e:	685b      	ldr	r3, [r3, #4]
    4580:	1841      	adds	r1, r0, r1
    4582:	6021      	str	r1, [r4, #0]
    4584:	e7ee      	b.n	4564 <_free_r+0x20>
    4586:	0013      	movs	r3, r2
    4588:	685a      	ldr	r2, [r3, #4]
    458a:	2a00      	cmp	r2, #0
    458c:	d001      	beq.n	4592 <_free_r+0x4e>
    458e:	42a2      	cmp	r2, r4
    4590:	d9f9      	bls.n	4586 <_free_r+0x42>
    4592:	6819      	ldr	r1, [r3, #0]
    4594:	1858      	adds	r0, r3, r1
    4596:	42a0      	cmp	r0, r4
    4598:	d10b      	bne.n	45b2 <_free_r+0x6e>
    459a:	6820      	ldr	r0, [r4, #0]
    459c:	1809      	adds	r1, r1, r0
    459e:	1858      	adds	r0, r3, r1
    45a0:	6019      	str	r1, [r3, #0]
    45a2:	4282      	cmp	r2, r0
    45a4:	d1e0      	bne.n	4568 <_free_r+0x24>
    45a6:	6810      	ldr	r0, [r2, #0]
    45a8:	6852      	ldr	r2, [r2, #4]
    45aa:	1841      	adds	r1, r0, r1
    45ac:	6019      	str	r1, [r3, #0]
    45ae:	605a      	str	r2, [r3, #4]
    45b0:	e7da      	b.n	4568 <_free_r+0x24>
    45b2:	42a0      	cmp	r0, r4
    45b4:	d902      	bls.n	45bc <_free_r+0x78>
    45b6:	230c      	movs	r3, #12
    45b8:	602b      	str	r3, [r5, #0]
    45ba:	e7d5      	b.n	4568 <_free_r+0x24>
    45bc:	6821      	ldr	r1, [r4, #0]
    45be:	1860      	adds	r0, r4, r1
    45c0:	4282      	cmp	r2, r0
    45c2:	d103      	bne.n	45cc <_free_r+0x88>
    45c4:	6810      	ldr	r0, [r2, #0]
    45c6:	6852      	ldr	r2, [r2, #4]
    45c8:	1841      	adds	r1, r0, r1
    45ca:	6021      	str	r1, [r4, #0]
    45cc:	6062      	str	r2, [r4, #4]
    45ce:	605c      	str	r4, [r3, #4]
    45d0:	e7ca      	b.n	4568 <_free_r+0x24>
    45d2:	46c0      	nop			; (mov r8, r8)
    45d4:	20000180 	.word	0x20000180

000045d8 <_malloc_r>:
    45d8:	2303      	movs	r3, #3
    45da:	b570      	push	{r4, r5, r6, lr}
    45dc:	1ccd      	adds	r5, r1, #3
    45de:	439d      	bics	r5, r3
    45e0:	3508      	adds	r5, #8
    45e2:	0006      	movs	r6, r0
    45e4:	2d0c      	cmp	r5, #12
    45e6:	d21e      	bcs.n	4626 <_malloc_r+0x4e>
    45e8:	250c      	movs	r5, #12
    45ea:	42a9      	cmp	r1, r5
    45ec:	d81d      	bhi.n	462a <_malloc_r+0x52>
    45ee:	0030      	movs	r0, r6
    45f0:	f000 fcaf 	bl	4f52 <__malloc_lock>
    45f4:	4a25      	ldr	r2, [pc, #148]	; (468c <_malloc_r+0xb4>)
    45f6:	6814      	ldr	r4, [r2, #0]
    45f8:	0021      	movs	r1, r4
    45fa:	2900      	cmp	r1, #0
    45fc:	d119      	bne.n	4632 <_malloc_r+0x5a>
    45fe:	4c24      	ldr	r4, [pc, #144]	; (4690 <_malloc_r+0xb8>)
    4600:	6823      	ldr	r3, [r4, #0]
    4602:	2b00      	cmp	r3, #0
    4604:	d103      	bne.n	460e <_malloc_r+0x36>
    4606:	0030      	movs	r0, r6
    4608:	f000 fb10 	bl	4c2c <_sbrk_r>
    460c:	6020      	str	r0, [r4, #0]
    460e:	0029      	movs	r1, r5
    4610:	0030      	movs	r0, r6
    4612:	f000 fb0b 	bl	4c2c <_sbrk_r>
    4616:	1c43      	adds	r3, r0, #1
    4618:	d12c      	bne.n	4674 <_malloc_r+0x9c>
    461a:	230c      	movs	r3, #12
    461c:	0030      	movs	r0, r6
    461e:	6033      	str	r3, [r6, #0]
    4620:	f000 fc98 	bl	4f54 <__malloc_unlock>
    4624:	e003      	b.n	462e <_malloc_r+0x56>
    4626:	2d00      	cmp	r5, #0
    4628:	dadf      	bge.n	45ea <_malloc_r+0x12>
    462a:	230c      	movs	r3, #12
    462c:	6033      	str	r3, [r6, #0]
    462e:	2000      	movs	r0, #0
    4630:	bd70      	pop	{r4, r5, r6, pc}
    4632:	680b      	ldr	r3, [r1, #0]
    4634:	1b5b      	subs	r3, r3, r5
    4636:	d41a      	bmi.n	466e <_malloc_r+0x96>
    4638:	2b0b      	cmp	r3, #11
    463a:	d903      	bls.n	4644 <_malloc_r+0x6c>
    463c:	600b      	str	r3, [r1, #0]
    463e:	18cc      	adds	r4, r1, r3
    4640:	6025      	str	r5, [r4, #0]
    4642:	e003      	b.n	464c <_malloc_r+0x74>
    4644:	428c      	cmp	r4, r1
    4646:	d10e      	bne.n	4666 <_malloc_r+0x8e>
    4648:	6863      	ldr	r3, [r4, #4]
    464a:	6013      	str	r3, [r2, #0]
    464c:	0030      	movs	r0, r6
    464e:	f000 fc81 	bl	4f54 <__malloc_unlock>
    4652:	0020      	movs	r0, r4
    4654:	2207      	movs	r2, #7
    4656:	300b      	adds	r0, #11
    4658:	1d23      	adds	r3, r4, #4
    465a:	4390      	bics	r0, r2
    465c:	1ac3      	subs	r3, r0, r3
    465e:	d0e7      	beq.n	4630 <_malloc_r+0x58>
    4660:	425a      	negs	r2, r3
    4662:	50e2      	str	r2, [r4, r3]
    4664:	e7e4      	b.n	4630 <_malloc_r+0x58>
    4666:	684b      	ldr	r3, [r1, #4]
    4668:	6063      	str	r3, [r4, #4]
    466a:	000c      	movs	r4, r1
    466c:	e7ee      	b.n	464c <_malloc_r+0x74>
    466e:	000c      	movs	r4, r1
    4670:	6849      	ldr	r1, [r1, #4]
    4672:	e7c2      	b.n	45fa <_malloc_r+0x22>
    4674:	2303      	movs	r3, #3
    4676:	1cc4      	adds	r4, r0, #3
    4678:	439c      	bics	r4, r3
    467a:	42a0      	cmp	r0, r4
    467c:	d0e0      	beq.n	4640 <_malloc_r+0x68>
    467e:	1a21      	subs	r1, r4, r0
    4680:	0030      	movs	r0, r6
    4682:	f000 fad3 	bl	4c2c <_sbrk_r>
    4686:	1c43      	adds	r3, r0, #1
    4688:	d1da      	bne.n	4640 <_malloc_r+0x68>
    468a:	e7c6      	b.n	461a <_malloc_r+0x42>
    468c:	20000180 	.word	0x20000180
    4690:	20000184 	.word	0x20000184

00004694 <__sfputc_r>:
    4694:	6893      	ldr	r3, [r2, #8]
    4696:	b510      	push	{r4, lr}
    4698:	3b01      	subs	r3, #1
    469a:	6093      	str	r3, [r2, #8]
    469c:	2b00      	cmp	r3, #0
    469e:	da05      	bge.n	46ac <__sfputc_r+0x18>
    46a0:	6994      	ldr	r4, [r2, #24]
    46a2:	42a3      	cmp	r3, r4
    46a4:	db08      	blt.n	46b8 <__sfputc_r+0x24>
    46a6:	b2cb      	uxtb	r3, r1
    46a8:	2b0a      	cmp	r3, #10
    46aa:	d005      	beq.n	46b8 <__sfputc_r+0x24>
    46ac:	6813      	ldr	r3, [r2, #0]
    46ae:	1c58      	adds	r0, r3, #1
    46b0:	6010      	str	r0, [r2, #0]
    46b2:	7019      	strb	r1, [r3, #0]
    46b4:	b2c8      	uxtb	r0, r1
    46b6:	bd10      	pop	{r4, pc}
    46b8:	f000 fb16 	bl	4ce8 <__swbuf_r>
    46bc:	e7fb      	b.n	46b6 <__sfputc_r+0x22>

000046be <__sfputs_r>:
    46be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46c0:	0006      	movs	r6, r0
    46c2:	000f      	movs	r7, r1
    46c4:	0014      	movs	r4, r2
    46c6:	18d5      	adds	r5, r2, r3
    46c8:	42ac      	cmp	r4, r5
    46ca:	d101      	bne.n	46d0 <__sfputs_r+0x12>
    46cc:	2000      	movs	r0, #0
    46ce:	e007      	b.n	46e0 <__sfputs_r+0x22>
    46d0:	7821      	ldrb	r1, [r4, #0]
    46d2:	003a      	movs	r2, r7
    46d4:	0030      	movs	r0, r6
    46d6:	f7ff ffdd 	bl	4694 <__sfputc_r>
    46da:	3401      	adds	r4, #1
    46dc:	1c43      	adds	r3, r0, #1
    46de:	d1f3      	bne.n	46c8 <__sfputs_r+0xa>
    46e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000046e4 <_vfiprintf_r>:
    46e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    46e6:	b09f      	sub	sp, #124	; 0x7c
    46e8:	0006      	movs	r6, r0
    46ea:	000f      	movs	r7, r1
    46ec:	0014      	movs	r4, r2
    46ee:	9305      	str	r3, [sp, #20]
    46f0:	2800      	cmp	r0, #0
    46f2:	d004      	beq.n	46fe <_vfiprintf_r+0x1a>
    46f4:	6983      	ldr	r3, [r0, #24]
    46f6:	2b00      	cmp	r3, #0
    46f8:	d101      	bne.n	46fe <_vfiprintf_r+0x1a>
    46fa:	f7ff fe17 	bl	432c <__sinit>
    46fe:	4b7f      	ldr	r3, [pc, #508]	; (48fc <_vfiprintf_r+0x218>)
    4700:	429f      	cmp	r7, r3
    4702:	d15c      	bne.n	47be <_vfiprintf_r+0xda>
    4704:	6877      	ldr	r7, [r6, #4]
    4706:	89bb      	ldrh	r3, [r7, #12]
    4708:	071b      	lsls	r3, r3, #28
    470a:	d562      	bpl.n	47d2 <_vfiprintf_r+0xee>
    470c:	693b      	ldr	r3, [r7, #16]
    470e:	2b00      	cmp	r3, #0
    4710:	d05f      	beq.n	47d2 <_vfiprintf_r+0xee>
    4712:	2300      	movs	r3, #0
    4714:	ad06      	add	r5, sp, #24
    4716:	616b      	str	r3, [r5, #20]
    4718:	3320      	adds	r3, #32
    471a:	766b      	strb	r3, [r5, #25]
    471c:	3310      	adds	r3, #16
    471e:	76ab      	strb	r3, [r5, #26]
    4720:	9402      	str	r4, [sp, #8]
    4722:	9c02      	ldr	r4, [sp, #8]
    4724:	7823      	ldrb	r3, [r4, #0]
    4726:	2b00      	cmp	r3, #0
    4728:	d15d      	bne.n	47e6 <_vfiprintf_r+0x102>
    472a:	9b02      	ldr	r3, [sp, #8]
    472c:	1ae3      	subs	r3, r4, r3
    472e:	9304      	str	r3, [sp, #16]
    4730:	d00d      	beq.n	474e <_vfiprintf_r+0x6a>
    4732:	9b04      	ldr	r3, [sp, #16]
    4734:	9a02      	ldr	r2, [sp, #8]
    4736:	0039      	movs	r1, r7
    4738:	0030      	movs	r0, r6
    473a:	f7ff ffc0 	bl	46be <__sfputs_r>
    473e:	1c43      	adds	r3, r0, #1
    4740:	d100      	bne.n	4744 <_vfiprintf_r+0x60>
    4742:	e0cc      	b.n	48de <_vfiprintf_r+0x1fa>
    4744:	696a      	ldr	r2, [r5, #20]
    4746:	9b04      	ldr	r3, [sp, #16]
    4748:	4694      	mov	ip, r2
    474a:	4463      	add	r3, ip
    474c:	616b      	str	r3, [r5, #20]
    474e:	7823      	ldrb	r3, [r4, #0]
    4750:	2b00      	cmp	r3, #0
    4752:	d100      	bne.n	4756 <_vfiprintf_r+0x72>
    4754:	e0c3      	b.n	48de <_vfiprintf_r+0x1fa>
    4756:	2201      	movs	r2, #1
    4758:	2300      	movs	r3, #0
    475a:	4252      	negs	r2, r2
    475c:	606a      	str	r2, [r5, #4]
    475e:	a902      	add	r1, sp, #8
    4760:	3254      	adds	r2, #84	; 0x54
    4762:	1852      	adds	r2, r2, r1
    4764:	3401      	adds	r4, #1
    4766:	602b      	str	r3, [r5, #0]
    4768:	60eb      	str	r3, [r5, #12]
    476a:	60ab      	str	r3, [r5, #8]
    476c:	7013      	strb	r3, [r2, #0]
    476e:	65ab      	str	r3, [r5, #88]	; 0x58
    4770:	7821      	ldrb	r1, [r4, #0]
    4772:	2205      	movs	r2, #5
    4774:	4862      	ldr	r0, [pc, #392]	; (4900 <_vfiprintf_r+0x21c>)
    4776:	f000 fbe1 	bl	4f3c <memchr>
    477a:	1c63      	adds	r3, r4, #1
    477c:	469c      	mov	ip, r3
    477e:	2800      	cmp	r0, #0
    4780:	d135      	bne.n	47ee <_vfiprintf_r+0x10a>
    4782:	6829      	ldr	r1, [r5, #0]
    4784:	06cb      	lsls	r3, r1, #27
    4786:	d504      	bpl.n	4792 <_vfiprintf_r+0xae>
    4788:	2353      	movs	r3, #83	; 0x53
    478a:	aa02      	add	r2, sp, #8
    478c:	3020      	adds	r0, #32
    478e:	189b      	adds	r3, r3, r2
    4790:	7018      	strb	r0, [r3, #0]
    4792:	070b      	lsls	r3, r1, #28
    4794:	d504      	bpl.n	47a0 <_vfiprintf_r+0xbc>
    4796:	2353      	movs	r3, #83	; 0x53
    4798:	202b      	movs	r0, #43	; 0x2b
    479a:	aa02      	add	r2, sp, #8
    479c:	189b      	adds	r3, r3, r2
    479e:	7018      	strb	r0, [r3, #0]
    47a0:	7823      	ldrb	r3, [r4, #0]
    47a2:	2b2a      	cmp	r3, #42	; 0x2a
    47a4:	d02c      	beq.n	4800 <_vfiprintf_r+0x11c>
    47a6:	2000      	movs	r0, #0
    47a8:	210a      	movs	r1, #10
    47aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    47ac:	7822      	ldrb	r2, [r4, #0]
    47ae:	3a30      	subs	r2, #48	; 0x30
    47b0:	2a09      	cmp	r2, #9
    47b2:	d800      	bhi.n	47b6 <_vfiprintf_r+0xd2>
    47b4:	e06b      	b.n	488e <_vfiprintf_r+0x1aa>
    47b6:	2800      	cmp	r0, #0
    47b8:	d02a      	beq.n	4810 <_vfiprintf_r+0x12c>
    47ba:	9309      	str	r3, [sp, #36]	; 0x24
    47bc:	e028      	b.n	4810 <_vfiprintf_r+0x12c>
    47be:	4b51      	ldr	r3, [pc, #324]	; (4904 <_vfiprintf_r+0x220>)
    47c0:	429f      	cmp	r7, r3
    47c2:	d101      	bne.n	47c8 <_vfiprintf_r+0xe4>
    47c4:	68b7      	ldr	r7, [r6, #8]
    47c6:	e79e      	b.n	4706 <_vfiprintf_r+0x22>
    47c8:	4b4f      	ldr	r3, [pc, #316]	; (4908 <_vfiprintf_r+0x224>)
    47ca:	429f      	cmp	r7, r3
    47cc:	d19b      	bne.n	4706 <_vfiprintf_r+0x22>
    47ce:	68f7      	ldr	r7, [r6, #12]
    47d0:	e799      	b.n	4706 <_vfiprintf_r+0x22>
    47d2:	0039      	movs	r1, r7
    47d4:	0030      	movs	r0, r6
    47d6:	f000 faf1 	bl	4dbc <__swsetup_r>
    47da:	2800      	cmp	r0, #0
    47dc:	d099      	beq.n	4712 <_vfiprintf_r+0x2e>
    47de:	2001      	movs	r0, #1
    47e0:	4240      	negs	r0, r0
    47e2:	b01f      	add	sp, #124	; 0x7c
    47e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47e6:	2b25      	cmp	r3, #37	; 0x25
    47e8:	d09f      	beq.n	472a <_vfiprintf_r+0x46>
    47ea:	3401      	adds	r4, #1
    47ec:	e79a      	b.n	4724 <_vfiprintf_r+0x40>
    47ee:	4b44      	ldr	r3, [pc, #272]	; (4900 <_vfiprintf_r+0x21c>)
    47f0:	6829      	ldr	r1, [r5, #0]
    47f2:	1ac0      	subs	r0, r0, r3
    47f4:	2301      	movs	r3, #1
    47f6:	4083      	lsls	r3, r0
    47f8:	430b      	orrs	r3, r1
    47fa:	602b      	str	r3, [r5, #0]
    47fc:	4664      	mov	r4, ip
    47fe:	e7b7      	b.n	4770 <_vfiprintf_r+0x8c>
    4800:	9b05      	ldr	r3, [sp, #20]
    4802:	1d18      	adds	r0, r3, #4
    4804:	681b      	ldr	r3, [r3, #0]
    4806:	9005      	str	r0, [sp, #20]
    4808:	2b00      	cmp	r3, #0
    480a:	db3a      	blt.n	4882 <_vfiprintf_r+0x19e>
    480c:	9309      	str	r3, [sp, #36]	; 0x24
    480e:	4664      	mov	r4, ip
    4810:	7823      	ldrb	r3, [r4, #0]
    4812:	2b2e      	cmp	r3, #46	; 0x2e
    4814:	d10b      	bne.n	482e <_vfiprintf_r+0x14a>
    4816:	7863      	ldrb	r3, [r4, #1]
    4818:	1c62      	adds	r2, r4, #1
    481a:	2b2a      	cmp	r3, #42	; 0x2a
    481c:	d13f      	bne.n	489e <_vfiprintf_r+0x1ba>
    481e:	9b05      	ldr	r3, [sp, #20]
    4820:	3402      	adds	r4, #2
    4822:	1d1a      	adds	r2, r3, #4
    4824:	681b      	ldr	r3, [r3, #0]
    4826:	9205      	str	r2, [sp, #20]
    4828:	2b00      	cmp	r3, #0
    482a:	db35      	blt.n	4898 <_vfiprintf_r+0x1b4>
    482c:	9307      	str	r3, [sp, #28]
    482e:	7821      	ldrb	r1, [r4, #0]
    4830:	2203      	movs	r2, #3
    4832:	4836      	ldr	r0, [pc, #216]	; (490c <_vfiprintf_r+0x228>)
    4834:	f000 fb82 	bl	4f3c <memchr>
    4838:	2800      	cmp	r0, #0
    483a:	d007      	beq.n	484c <_vfiprintf_r+0x168>
    483c:	4b33      	ldr	r3, [pc, #204]	; (490c <_vfiprintf_r+0x228>)
    483e:	682a      	ldr	r2, [r5, #0]
    4840:	1ac0      	subs	r0, r0, r3
    4842:	2340      	movs	r3, #64	; 0x40
    4844:	4083      	lsls	r3, r0
    4846:	4313      	orrs	r3, r2
    4848:	602b      	str	r3, [r5, #0]
    484a:	3401      	adds	r4, #1
    484c:	7821      	ldrb	r1, [r4, #0]
    484e:	1c63      	adds	r3, r4, #1
    4850:	2206      	movs	r2, #6
    4852:	482f      	ldr	r0, [pc, #188]	; (4910 <_vfiprintf_r+0x22c>)
    4854:	9302      	str	r3, [sp, #8]
    4856:	7629      	strb	r1, [r5, #24]
    4858:	f000 fb70 	bl	4f3c <memchr>
    485c:	2800      	cmp	r0, #0
    485e:	d044      	beq.n	48ea <_vfiprintf_r+0x206>
    4860:	4b2c      	ldr	r3, [pc, #176]	; (4914 <_vfiprintf_r+0x230>)
    4862:	2b00      	cmp	r3, #0
    4864:	d12f      	bne.n	48c6 <_vfiprintf_r+0x1e2>
    4866:	6829      	ldr	r1, [r5, #0]
    4868:	9b05      	ldr	r3, [sp, #20]
    486a:	2207      	movs	r2, #7
    486c:	05c9      	lsls	r1, r1, #23
    486e:	d528      	bpl.n	48c2 <_vfiprintf_r+0x1de>
    4870:	189b      	adds	r3, r3, r2
    4872:	4393      	bics	r3, r2
    4874:	3308      	adds	r3, #8
    4876:	9305      	str	r3, [sp, #20]
    4878:	696b      	ldr	r3, [r5, #20]
    487a:	9a03      	ldr	r2, [sp, #12]
    487c:	189b      	adds	r3, r3, r2
    487e:	616b      	str	r3, [r5, #20]
    4880:	e74f      	b.n	4722 <_vfiprintf_r+0x3e>
    4882:	425b      	negs	r3, r3
    4884:	60eb      	str	r3, [r5, #12]
    4886:	2302      	movs	r3, #2
    4888:	430b      	orrs	r3, r1
    488a:	602b      	str	r3, [r5, #0]
    488c:	e7bf      	b.n	480e <_vfiprintf_r+0x12a>
    488e:	434b      	muls	r3, r1
    4890:	3401      	adds	r4, #1
    4892:	189b      	adds	r3, r3, r2
    4894:	2001      	movs	r0, #1
    4896:	e789      	b.n	47ac <_vfiprintf_r+0xc8>
    4898:	2301      	movs	r3, #1
    489a:	425b      	negs	r3, r3
    489c:	e7c6      	b.n	482c <_vfiprintf_r+0x148>
    489e:	2300      	movs	r3, #0
    48a0:	0014      	movs	r4, r2
    48a2:	200a      	movs	r0, #10
    48a4:	001a      	movs	r2, r3
    48a6:	606b      	str	r3, [r5, #4]
    48a8:	7821      	ldrb	r1, [r4, #0]
    48aa:	3930      	subs	r1, #48	; 0x30
    48ac:	2909      	cmp	r1, #9
    48ae:	d903      	bls.n	48b8 <_vfiprintf_r+0x1d4>
    48b0:	2b00      	cmp	r3, #0
    48b2:	d0bc      	beq.n	482e <_vfiprintf_r+0x14a>
    48b4:	9207      	str	r2, [sp, #28]
    48b6:	e7ba      	b.n	482e <_vfiprintf_r+0x14a>
    48b8:	4342      	muls	r2, r0
    48ba:	3401      	adds	r4, #1
    48bc:	1852      	adds	r2, r2, r1
    48be:	2301      	movs	r3, #1
    48c0:	e7f2      	b.n	48a8 <_vfiprintf_r+0x1c4>
    48c2:	3307      	adds	r3, #7
    48c4:	e7d5      	b.n	4872 <_vfiprintf_r+0x18e>
    48c6:	ab05      	add	r3, sp, #20
    48c8:	9300      	str	r3, [sp, #0]
    48ca:	003a      	movs	r2, r7
    48cc:	4b12      	ldr	r3, [pc, #72]	; (4918 <_vfiprintf_r+0x234>)
    48ce:	0029      	movs	r1, r5
    48d0:	0030      	movs	r0, r6
    48d2:	e000      	b.n	48d6 <_vfiprintf_r+0x1f2>
    48d4:	bf00      	nop
    48d6:	9003      	str	r0, [sp, #12]
    48d8:	9b03      	ldr	r3, [sp, #12]
    48da:	3301      	adds	r3, #1
    48dc:	d1cc      	bne.n	4878 <_vfiprintf_r+0x194>
    48de:	89bb      	ldrh	r3, [r7, #12]
    48e0:	065b      	lsls	r3, r3, #25
    48e2:	d500      	bpl.n	48e6 <_vfiprintf_r+0x202>
    48e4:	e77b      	b.n	47de <_vfiprintf_r+0xfa>
    48e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    48e8:	e77b      	b.n	47e2 <_vfiprintf_r+0xfe>
    48ea:	ab05      	add	r3, sp, #20
    48ec:	9300      	str	r3, [sp, #0]
    48ee:	003a      	movs	r2, r7
    48f0:	4b09      	ldr	r3, [pc, #36]	; (4918 <_vfiprintf_r+0x234>)
    48f2:	0029      	movs	r1, r5
    48f4:	0030      	movs	r0, r6
    48f6:	f000 f87f 	bl	49f8 <_printf_i>
    48fa:	e7ec      	b.n	48d6 <_vfiprintf_r+0x1f2>
    48fc:	00007098 	.word	0x00007098
    4900:	000070d8 	.word	0x000070d8
    4904:	000070b8 	.word	0x000070b8
    4908:	00007078 	.word	0x00007078
    490c:	000070de 	.word	0x000070de
    4910:	000070e2 	.word	0x000070e2
    4914:	00000000 	.word	0x00000000
    4918:	000046bf 	.word	0x000046bf

0000491c <_printf_common>:
    491c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    491e:	0015      	movs	r5, r2
    4920:	9301      	str	r3, [sp, #4]
    4922:	688a      	ldr	r2, [r1, #8]
    4924:	690b      	ldr	r3, [r1, #16]
    4926:	9000      	str	r0, [sp, #0]
    4928:	000c      	movs	r4, r1
    492a:	4293      	cmp	r3, r2
    492c:	da00      	bge.n	4930 <_printf_common+0x14>
    492e:	0013      	movs	r3, r2
    4930:	0022      	movs	r2, r4
    4932:	602b      	str	r3, [r5, #0]
    4934:	3243      	adds	r2, #67	; 0x43
    4936:	7812      	ldrb	r2, [r2, #0]
    4938:	2a00      	cmp	r2, #0
    493a:	d001      	beq.n	4940 <_printf_common+0x24>
    493c:	3301      	adds	r3, #1
    493e:	602b      	str	r3, [r5, #0]
    4940:	6823      	ldr	r3, [r4, #0]
    4942:	069b      	lsls	r3, r3, #26
    4944:	d502      	bpl.n	494c <_printf_common+0x30>
    4946:	682b      	ldr	r3, [r5, #0]
    4948:	3302      	adds	r3, #2
    494a:	602b      	str	r3, [r5, #0]
    494c:	2706      	movs	r7, #6
    494e:	6823      	ldr	r3, [r4, #0]
    4950:	401f      	ands	r7, r3
    4952:	d027      	beq.n	49a4 <_printf_common+0x88>
    4954:	0023      	movs	r3, r4
    4956:	3343      	adds	r3, #67	; 0x43
    4958:	781b      	ldrb	r3, [r3, #0]
    495a:	1e5a      	subs	r2, r3, #1
    495c:	4193      	sbcs	r3, r2
    495e:	6822      	ldr	r2, [r4, #0]
    4960:	0692      	lsls	r2, r2, #26
    4962:	d430      	bmi.n	49c6 <_printf_common+0xaa>
    4964:	0022      	movs	r2, r4
    4966:	9901      	ldr	r1, [sp, #4]
    4968:	3243      	adds	r2, #67	; 0x43
    496a:	9800      	ldr	r0, [sp, #0]
    496c:	9e08      	ldr	r6, [sp, #32]
    496e:	47b0      	blx	r6
    4970:	1c43      	adds	r3, r0, #1
    4972:	d025      	beq.n	49c0 <_printf_common+0xa4>
    4974:	2306      	movs	r3, #6
    4976:	6820      	ldr	r0, [r4, #0]
    4978:	682a      	ldr	r2, [r5, #0]
    497a:	68e1      	ldr	r1, [r4, #12]
    497c:	4003      	ands	r3, r0
    497e:	2500      	movs	r5, #0
    4980:	2b04      	cmp	r3, #4
    4982:	d103      	bne.n	498c <_printf_common+0x70>
    4984:	1a8d      	subs	r5, r1, r2
    4986:	43eb      	mvns	r3, r5
    4988:	17db      	asrs	r3, r3, #31
    498a:	401d      	ands	r5, r3
    498c:	68a3      	ldr	r3, [r4, #8]
    498e:	6922      	ldr	r2, [r4, #16]
    4990:	4293      	cmp	r3, r2
    4992:	dd01      	ble.n	4998 <_printf_common+0x7c>
    4994:	1a9b      	subs	r3, r3, r2
    4996:	18ed      	adds	r5, r5, r3
    4998:	2700      	movs	r7, #0
    499a:	42bd      	cmp	r5, r7
    499c:	d120      	bne.n	49e0 <_printf_common+0xc4>
    499e:	2000      	movs	r0, #0
    49a0:	e010      	b.n	49c4 <_printf_common+0xa8>
    49a2:	3701      	adds	r7, #1
    49a4:	68e3      	ldr	r3, [r4, #12]
    49a6:	682a      	ldr	r2, [r5, #0]
    49a8:	1a9b      	subs	r3, r3, r2
    49aa:	429f      	cmp	r7, r3
    49ac:	dad2      	bge.n	4954 <_printf_common+0x38>
    49ae:	0022      	movs	r2, r4
    49b0:	2301      	movs	r3, #1
    49b2:	3219      	adds	r2, #25
    49b4:	9901      	ldr	r1, [sp, #4]
    49b6:	9800      	ldr	r0, [sp, #0]
    49b8:	9e08      	ldr	r6, [sp, #32]
    49ba:	47b0      	blx	r6
    49bc:	1c43      	adds	r3, r0, #1
    49be:	d1f0      	bne.n	49a2 <_printf_common+0x86>
    49c0:	2001      	movs	r0, #1
    49c2:	4240      	negs	r0, r0
    49c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    49c6:	2030      	movs	r0, #48	; 0x30
    49c8:	18e1      	adds	r1, r4, r3
    49ca:	3143      	adds	r1, #67	; 0x43
    49cc:	7008      	strb	r0, [r1, #0]
    49ce:	0021      	movs	r1, r4
    49d0:	1c5a      	adds	r2, r3, #1
    49d2:	3145      	adds	r1, #69	; 0x45
    49d4:	7809      	ldrb	r1, [r1, #0]
    49d6:	18a2      	adds	r2, r4, r2
    49d8:	3243      	adds	r2, #67	; 0x43
    49da:	3302      	adds	r3, #2
    49dc:	7011      	strb	r1, [r2, #0]
    49de:	e7c1      	b.n	4964 <_printf_common+0x48>
    49e0:	0022      	movs	r2, r4
    49e2:	2301      	movs	r3, #1
    49e4:	321a      	adds	r2, #26
    49e6:	9901      	ldr	r1, [sp, #4]
    49e8:	9800      	ldr	r0, [sp, #0]
    49ea:	9e08      	ldr	r6, [sp, #32]
    49ec:	47b0      	blx	r6
    49ee:	1c43      	adds	r3, r0, #1
    49f0:	d0e6      	beq.n	49c0 <_printf_common+0xa4>
    49f2:	3701      	adds	r7, #1
    49f4:	e7d1      	b.n	499a <_printf_common+0x7e>
	...

000049f8 <_printf_i>:
    49f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    49fa:	b08b      	sub	sp, #44	; 0x2c
    49fc:	9206      	str	r2, [sp, #24]
    49fe:	000a      	movs	r2, r1
    4a00:	3243      	adds	r2, #67	; 0x43
    4a02:	9307      	str	r3, [sp, #28]
    4a04:	9005      	str	r0, [sp, #20]
    4a06:	9204      	str	r2, [sp, #16]
    4a08:	7e0a      	ldrb	r2, [r1, #24]
    4a0a:	000c      	movs	r4, r1
    4a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4a0e:	2a6e      	cmp	r2, #110	; 0x6e
    4a10:	d100      	bne.n	4a14 <_printf_i+0x1c>
    4a12:	e08f      	b.n	4b34 <_printf_i+0x13c>
    4a14:	d817      	bhi.n	4a46 <_printf_i+0x4e>
    4a16:	2a63      	cmp	r2, #99	; 0x63
    4a18:	d02c      	beq.n	4a74 <_printf_i+0x7c>
    4a1a:	d808      	bhi.n	4a2e <_printf_i+0x36>
    4a1c:	2a00      	cmp	r2, #0
    4a1e:	d100      	bne.n	4a22 <_printf_i+0x2a>
    4a20:	e099      	b.n	4b56 <_printf_i+0x15e>
    4a22:	2a58      	cmp	r2, #88	; 0x58
    4a24:	d054      	beq.n	4ad0 <_printf_i+0xd8>
    4a26:	0026      	movs	r6, r4
    4a28:	3642      	adds	r6, #66	; 0x42
    4a2a:	7032      	strb	r2, [r6, #0]
    4a2c:	e029      	b.n	4a82 <_printf_i+0x8a>
    4a2e:	2a64      	cmp	r2, #100	; 0x64
    4a30:	d001      	beq.n	4a36 <_printf_i+0x3e>
    4a32:	2a69      	cmp	r2, #105	; 0x69
    4a34:	d1f7      	bne.n	4a26 <_printf_i+0x2e>
    4a36:	6821      	ldr	r1, [r4, #0]
    4a38:	681a      	ldr	r2, [r3, #0]
    4a3a:	0608      	lsls	r0, r1, #24
    4a3c:	d523      	bpl.n	4a86 <_printf_i+0x8e>
    4a3e:	1d11      	adds	r1, r2, #4
    4a40:	6019      	str	r1, [r3, #0]
    4a42:	6815      	ldr	r5, [r2, #0]
    4a44:	e025      	b.n	4a92 <_printf_i+0x9a>
    4a46:	2a73      	cmp	r2, #115	; 0x73
    4a48:	d100      	bne.n	4a4c <_printf_i+0x54>
    4a4a:	e088      	b.n	4b5e <_printf_i+0x166>
    4a4c:	d808      	bhi.n	4a60 <_printf_i+0x68>
    4a4e:	2a6f      	cmp	r2, #111	; 0x6f
    4a50:	d029      	beq.n	4aa6 <_printf_i+0xae>
    4a52:	2a70      	cmp	r2, #112	; 0x70
    4a54:	d1e7      	bne.n	4a26 <_printf_i+0x2e>
    4a56:	2220      	movs	r2, #32
    4a58:	6809      	ldr	r1, [r1, #0]
    4a5a:	430a      	orrs	r2, r1
    4a5c:	6022      	str	r2, [r4, #0]
    4a5e:	e003      	b.n	4a68 <_printf_i+0x70>
    4a60:	2a75      	cmp	r2, #117	; 0x75
    4a62:	d020      	beq.n	4aa6 <_printf_i+0xae>
    4a64:	2a78      	cmp	r2, #120	; 0x78
    4a66:	d1de      	bne.n	4a26 <_printf_i+0x2e>
    4a68:	0022      	movs	r2, r4
    4a6a:	2178      	movs	r1, #120	; 0x78
    4a6c:	3245      	adds	r2, #69	; 0x45
    4a6e:	7011      	strb	r1, [r2, #0]
    4a70:	4a6c      	ldr	r2, [pc, #432]	; (4c24 <_printf_i+0x22c>)
    4a72:	e030      	b.n	4ad6 <_printf_i+0xde>
    4a74:	000e      	movs	r6, r1
    4a76:	681a      	ldr	r2, [r3, #0]
    4a78:	3642      	adds	r6, #66	; 0x42
    4a7a:	1d11      	adds	r1, r2, #4
    4a7c:	6019      	str	r1, [r3, #0]
    4a7e:	6813      	ldr	r3, [r2, #0]
    4a80:	7033      	strb	r3, [r6, #0]
    4a82:	2301      	movs	r3, #1
    4a84:	e079      	b.n	4b7a <_printf_i+0x182>
    4a86:	0649      	lsls	r1, r1, #25
    4a88:	d5d9      	bpl.n	4a3e <_printf_i+0x46>
    4a8a:	1d11      	adds	r1, r2, #4
    4a8c:	6019      	str	r1, [r3, #0]
    4a8e:	2300      	movs	r3, #0
    4a90:	5ed5      	ldrsh	r5, [r2, r3]
    4a92:	2d00      	cmp	r5, #0
    4a94:	da03      	bge.n	4a9e <_printf_i+0xa6>
    4a96:	232d      	movs	r3, #45	; 0x2d
    4a98:	9a04      	ldr	r2, [sp, #16]
    4a9a:	426d      	negs	r5, r5
    4a9c:	7013      	strb	r3, [r2, #0]
    4a9e:	4b62      	ldr	r3, [pc, #392]	; (4c28 <_printf_i+0x230>)
    4aa0:	270a      	movs	r7, #10
    4aa2:	9303      	str	r3, [sp, #12]
    4aa4:	e02f      	b.n	4b06 <_printf_i+0x10e>
    4aa6:	6820      	ldr	r0, [r4, #0]
    4aa8:	6819      	ldr	r1, [r3, #0]
    4aaa:	0605      	lsls	r5, r0, #24
    4aac:	d503      	bpl.n	4ab6 <_printf_i+0xbe>
    4aae:	1d08      	adds	r0, r1, #4
    4ab0:	6018      	str	r0, [r3, #0]
    4ab2:	680d      	ldr	r5, [r1, #0]
    4ab4:	e005      	b.n	4ac2 <_printf_i+0xca>
    4ab6:	0640      	lsls	r0, r0, #25
    4ab8:	d5f9      	bpl.n	4aae <_printf_i+0xb6>
    4aba:	680d      	ldr	r5, [r1, #0]
    4abc:	1d08      	adds	r0, r1, #4
    4abe:	6018      	str	r0, [r3, #0]
    4ac0:	b2ad      	uxth	r5, r5
    4ac2:	4b59      	ldr	r3, [pc, #356]	; (4c28 <_printf_i+0x230>)
    4ac4:	2708      	movs	r7, #8
    4ac6:	9303      	str	r3, [sp, #12]
    4ac8:	2a6f      	cmp	r2, #111	; 0x6f
    4aca:	d018      	beq.n	4afe <_printf_i+0x106>
    4acc:	270a      	movs	r7, #10
    4ace:	e016      	b.n	4afe <_printf_i+0x106>
    4ad0:	3145      	adds	r1, #69	; 0x45
    4ad2:	700a      	strb	r2, [r1, #0]
    4ad4:	4a54      	ldr	r2, [pc, #336]	; (4c28 <_printf_i+0x230>)
    4ad6:	9203      	str	r2, [sp, #12]
    4ad8:	681a      	ldr	r2, [r3, #0]
    4ada:	6821      	ldr	r1, [r4, #0]
    4adc:	1d10      	adds	r0, r2, #4
    4ade:	6018      	str	r0, [r3, #0]
    4ae0:	6815      	ldr	r5, [r2, #0]
    4ae2:	0608      	lsls	r0, r1, #24
    4ae4:	d522      	bpl.n	4b2c <_printf_i+0x134>
    4ae6:	07cb      	lsls	r3, r1, #31
    4ae8:	d502      	bpl.n	4af0 <_printf_i+0xf8>
    4aea:	2320      	movs	r3, #32
    4aec:	4319      	orrs	r1, r3
    4aee:	6021      	str	r1, [r4, #0]
    4af0:	2710      	movs	r7, #16
    4af2:	2d00      	cmp	r5, #0
    4af4:	d103      	bne.n	4afe <_printf_i+0x106>
    4af6:	2320      	movs	r3, #32
    4af8:	6822      	ldr	r2, [r4, #0]
    4afa:	439a      	bics	r2, r3
    4afc:	6022      	str	r2, [r4, #0]
    4afe:	0023      	movs	r3, r4
    4b00:	2200      	movs	r2, #0
    4b02:	3343      	adds	r3, #67	; 0x43
    4b04:	701a      	strb	r2, [r3, #0]
    4b06:	6863      	ldr	r3, [r4, #4]
    4b08:	60a3      	str	r3, [r4, #8]
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	db5c      	blt.n	4bc8 <_printf_i+0x1d0>
    4b0e:	2204      	movs	r2, #4
    4b10:	6821      	ldr	r1, [r4, #0]
    4b12:	4391      	bics	r1, r2
    4b14:	6021      	str	r1, [r4, #0]
    4b16:	2d00      	cmp	r5, #0
    4b18:	d158      	bne.n	4bcc <_printf_i+0x1d4>
    4b1a:	9e04      	ldr	r6, [sp, #16]
    4b1c:	2b00      	cmp	r3, #0
    4b1e:	d064      	beq.n	4bea <_printf_i+0x1f2>
    4b20:	0026      	movs	r6, r4
    4b22:	9b03      	ldr	r3, [sp, #12]
    4b24:	3642      	adds	r6, #66	; 0x42
    4b26:	781b      	ldrb	r3, [r3, #0]
    4b28:	7033      	strb	r3, [r6, #0]
    4b2a:	e05e      	b.n	4bea <_printf_i+0x1f2>
    4b2c:	0648      	lsls	r0, r1, #25
    4b2e:	d5da      	bpl.n	4ae6 <_printf_i+0xee>
    4b30:	b2ad      	uxth	r5, r5
    4b32:	e7d8      	b.n	4ae6 <_printf_i+0xee>
    4b34:	6809      	ldr	r1, [r1, #0]
    4b36:	681a      	ldr	r2, [r3, #0]
    4b38:	0608      	lsls	r0, r1, #24
    4b3a:	d505      	bpl.n	4b48 <_printf_i+0x150>
    4b3c:	1d11      	adds	r1, r2, #4
    4b3e:	6019      	str	r1, [r3, #0]
    4b40:	6813      	ldr	r3, [r2, #0]
    4b42:	6962      	ldr	r2, [r4, #20]
    4b44:	601a      	str	r2, [r3, #0]
    4b46:	e006      	b.n	4b56 <_printf_i+0x15e>
    4b48:	0649      	lsls	r1, r1, #25
    4b4a:	d5f7      	bpl.n	4b3c <_printf_i+0x144>
    4b4c:	1d11      	adds	r1, r2, #4
    4b4e:	6019      	str	r1, [r3, #0]
    4b50:	6813      	ldr	r3, [r2, #0]
    4b52:	8aa2      	ldrh	r2, [r4, #20]
    4b54:	801a      	strh	r2, [r3, #0]
    4b56:	2300      	movs	r3, #0
    4b58:	9e04      	ldr	r6, [sp, #16]
    4b5a:	6123      	str	r3, [r4, #16]
    4b5c:	e054      	b.n	4c08 <_printf_i+0x210>
    4b5e:	681a      	ldr	r2, [r3, #0]
    4b60:	1d11      	adds	r1, r2, #4
    4b62:	6019      	str	r1, [r3, #0]
    4b64:	6816      	ldr	r6, [r2, #0]
    4b66:	2100      	movs	r1, #0
    4b68:	6862      	ldr	r2, [r4, #4]
    4b6a:	0030      	movs	r0, r6
    4b6c:	f000 f9e6 	bl	4f3c <memchr>
    4b70:	2800      	cmp	r0, #0
    4b72:	d001      	beq.n	4b78 <_printf_i+0x180>
    4b74:	1b80      	subs	r0, r0, r6
    4b76:	6060      	str	r0, [r4, #4]
    4b78:	6863      	ldr	r3, [r4, #4]
    4b7a:	6123      	str	r3, [r4, #16]
    4b7c:	2300      	movs	r3, #0
    4b7e:	9a04      	ldr	r2, [sp, #16]
    4b80:	7013      	strb	r3, [r2, #0]
    4b82:	e041      	b.n	4c08 <_printf_i+0x210>
    4b84:	6923      	ldr	r3, [r4, #16]
    4b86:	0032      	movs	r2, r6
    4b88:	9906      	ldr	r1, [sp, #24]
    4b8a:	9805      	ldr	r0, [sp, #20]
    4b8c:	9d07      	ldr	r5, [sp, #28]
    4b8e:	47a8      	blx	r5
    4b90:	1c43      	adds	r3, r0, #1
    4b92:	d043      	beq.n	4c1c <_printf_i+0x224>
    4b94:	6823      	ldr	r3, [r4, #0]
    4b96:	2500      	movs	r5, #0
    4b98:	079b      	lsls	r3, r3, #30
    4b9a:	d40f      	bmi.n	4bbc <_printf_i+0x1c4>
    4b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4b9e:	68e0      	ldr	r0, [r4, #12]
    4ba0:	4298      	cmp	r0, r3
    4ba2:	da3d      	bge.n	4c20 <_printf_i+0x228>
    4ba4:	0018      	movs	r0, r3
    4ba6:	e03b      	b.n	4c20 <_printf_i+0x228>
    4ba8:	0022      	movs	r2, r4
    4baa:	2301      	movs	r3, #1
    4bac:	3219      	adds	r2, #25
    4bae:	9906      	ldr	r1, [sp, #24]
    4bb0:	9805      	ldr	r0, [sp, #20]
    4bb2:	9e07      	ldr	r6, [sp, #28]
    4bb4:	47b0      	blx	r6
    4bb6:	1c43      	adds	r3, r0, #1
    4bb8:	d030      	beq.n	4c1c <_printf_i+0x224>
    4bba:	3501      	adds	r5, #1
    4bbc:	68e3      	ldr	r3, [r4, #12]
    4bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4bc0:	1a9b      	subs	r3, r3, r2
    4bc2:	429d      	cmp	r5, r3
    4bc4:	dbf0      	blt.n	4ba8 <_printf_i+0x1b0>
    4bc6:	e7e9      	b.n	4b9c <_printf_i+0x1a4>
    4bc8:	2d00      	cmp	r5, #0
    4bca:	d0a9      	beq.n	4b20 <_printf_i+0x128>
    4bcc:	9e04      	ldr	r6, [sp, #16]
    4bce:	0028      	movs	r0, r5
    4bd0:	0039      	movs	r1, r7
    4bd2:	f7ff f90b 	bl	3dec <__aeabi_uidivmod>
    4bd6:	9b03      	ldr	r3, [sp, #12]
    4bd8:	3e01      	subs	r6, #1
    4bda:	5c5b      	ldrb	r3, [r3, r1]
    4bdc:	0028      	movs	r0, r5
    4bde:	7033      	strb	r3, [r6, #0]
    4be0:	0039      	movs	r1, r7
    4be2:	f7ff f87d 	bl	3ce0 <__udivsi3>
    4be6:	1e05      	subs	r5, r0, #0
    4be8:	d1f1      	bne.n	4bce <_printf_i+0x1d6>
    4bea:	2f08      	cmp	r7, #8
    4bec:	d109      	bne.n	4c02 <_printf_i+0x20a>
    4bee:	6823      	ldr	r3, [r4, #0]
    4bf0:	07db      	lsls	r3, r3, #31
    4bf2:	d506      	bpl.n	4c02 <_printf_i+0x20a>
    4bf4:	6863      	ldr	r3, [r4, #4]
    4bf6:	6922      	ldr	r2, [r4, #16]
    4bf8:	4293      	cmp	r3, r2
    4bfa:	dc02      	bgt.n	4c02 <_printf_i+0x20a>
    4bfc:	2330      	movs	r3, #48	; 0x30
    4bfe:	3e01      	subs	r6, #1
    4c00:	7033      	strb	r3, [r6, #0]
    4c02:	9b04      	ldr	r3, [sp, #16]
    4c04:	1b9b      	subs	r3, r3, r6
    4c06:	6123      	str	r3, [r4, #16]
    4c08:	9b07      	ldr	r3, [sp, #28]
    4c0a:	aa09      	add	r2, sp, #36	; 0x24
    4c0c:	9300      	str	r3, [sp, #0]
    4c0e:	0021      	movs	r1, r4
    4c10:	9b06      	ldr	r3, [sp, #24]
    4c12:	9805      	ldr	r0, [sp, #20]
    4c14:	f7ff fe82 	bl	491c <_printf_common>
    4c18:	1c43      	adds	r3, r0, #1
    4c1a:	d1b3      	bne.n	4b84 <_printf_i+0x18c>
    4c1c:	2001      	movs	r0, #1
    4c1e:	4240      	negs	r0, r0
    4c20:	b00b      	add	sp, #44	; 0x2c
    4c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c24:	000070fa 	.word	0x000070fa
    4c28:	000070e9 	.word	0x000070e9

00004c2c <_sbrk_r>:
    4c2c:	2300      	movs	r3, #0
    4c2e:	b570      	push	{r4, r5, r6, lr}
    4c30:	4c06      	ldr	r4, [pc, #24]	; (4c4c <_sbrk_r+0x20>)
    4c32:	0005      	movs	r5, r0
    4c34:	0008      	movs	r0, r1
    4c36:	6023      	str	r3, [r4, #0]
    4c38:	f7fc fefe 	bl	1a38 <_sbrk>
    4c3c:	1c43      	adds	r3, r0, #1
    4c3e:	d103      	bne.n	4c48 <_sbrk_r+0x1c>
    4c40:	6823      	ldr	r3, [r4, #0]
    4c42:	2b00      	cmp	r3, #0
    4c44:	d000      	beq.n	4c48 <_sbrk_r+0x1c>
    4c46:	602b      	str	r3, [r5, #0]
    4c48:	bd70      	pop	{r4, r5, r6, pc}
    4c4a:	46c0      	nop			; (mov r8, r8)
    4c4c:	2000030c 	.word	0x2000030c

00004c50 <__sread>:
    4c50:	b570      	push	{r4, r5, r6, lr}
    4c52:	000c      	movs	r4, r1
    4c54:	250e      	movs	r5, #14
    4c56:	5f49      	ldrsh	r1, [r1, r5]
    4c58:	f000 f97e 	bl	4f58 <_read_r>
    4c5c:	2800      	cmp	r0, #0
    4c5e:	db03      	blt.n	4c68 <__sread+0x18>
    4c60:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4c62:	181b      	adds	r3, r3, r0
    4c64:	6563      	str	r3, [r4, #84]	; 0x54
    4c66:	bd70      	pop	{r4, r5, r6, pc}
    4c68:	89a3      	ldrh	r3, [r4, #12]
    4c6a:	4a02      	ldr	r2, [pc, #8]	; (4c74 <__sread+0x24>)
    4c6c:	4013      	ands	r3, r2
    4c6e:	81a3      	strh	r3, [r4, #12]
    4c70:	e7f9      	b.n	4c66 <__sread+0x16>
    4c72:	46c0      	nop			; (mov r8, r8)
    4c74:	ffffefff 	.word	0xffffefff

00004c78 <__swrite>:
    4c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c7a:	001f      	movs	r7, r3
    4c7c:	898b      	ldrh	r3, [r1, #12]
    4c7e:	0005      	movs	r5, r0
    4c80:	000c      	movs	r4, r1
    4c82:	0016      	movs	r6, r2
    4c84:	05db      	lsls	r3, r3, #23
    4c86:	d505      	bpl.n	4c94 <__swrite+0x1c>
    4c88:	230e      	movs	r3, #14
    4c8a:	5ec9      	ldrsh	r1, [r1, r3]
    4c8c:	2200      	movs	r2, #0
    4c8e:	2302      	movs	r3, #2
    4c90:	f000 f940 	bl	4f14 <_lseek_r>
    4c94:	89a3      	ldrh	r3, [r4, #12]
    4c96:	4a05      	ldr	r2, [pc, #20]	; (4cac <__swrite+0x34>)
    4c98:	0028      	movs	r0, r5
    4c9a:	4013      	ands	r3, r2
    4c9c:	81a3      	strh	r3, [r4, #12]
    4c9e:	0032      	movs	r2, r6
    4ca0:	230e      	movs	r3, #14
    4ca2:	5ee1      	ldrsh	r1, [r4, r3]
    4ca4:	003b      	movs	r3, r7
    4ca6:	f000 f875 	bl	4d94 <_write_r>
    4caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cac:	ffffefff 	.word	0xffffefff

00004cb0 <__sseek>:
    4cb0:	b570      	push	{r4, r5, r6, lr}
    4cb2:	000c      	movs	r4, r1
    4cb4:	250e      	movs	r5, #14
    4cb6:	5f49      	ldrsh	r1, [r1, r5]
    4cb8:	f000 f92c 	bl	4f14 <_lseek_r>
    4cbc:	89a3      	ldrh	r3, [r4, #12]
    4cbe:	1c42      	adds	r2, r0, #1
    4cc0:	d103      	bne.n	4cca <__sseek+0x1a>
    4cc2:	4a05      	ldr	r2, [pc, #20]	; (4cd8 <__sseek+0x28>)
    4cc4:	4013      	ands	r3, r2
    4cc6:	81a3      	strh	r3, [r4, #12]
    4cc8:	bd70      	pop	{r4, r5, r6, pc}
    4cca:	2280      	movs	r2, #128	; 0x80
    4ccc:	0152      	lsls	r2, r2, #5
    4cce:	4313      	orrs	r3, r2
    4cd0:	81a3      	strh	r3, [r4, #12]
    4cd2:	6560      	str	r0, [r4, #84]	; 0x54
    4cd4:	e7f8      	b.n	4cc8 <__sseek+0x18>
    4cd6:	46c0      	nop			; (mov r8, r8)
    4cd8:	ffffefff 	.word	0xffffefff

00004cdc <__sclose>:
    4cdc:	b510      	push	{r4, lr}
    4cde:	230e      	movs	r3, #14
    4ce0:	5ec9      	ldrsh	r1, [r1, r3]
    4ce2:	f000 f8e1 	bl	4ea8 <_close_r>
    4ce6:	bd10      	pop	{r4, pc}

00004ce8 <__swbuf_r>:
    4ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cea:	0005      	movs	r5, r0
    4cec:	000e      	movs	r6, r1
    4cee:	0014      	movs	r4, r2
    4cf0:	2800      	cmp	r0, #0
    4cf2:	d004      	beq.n	4cfe <__swbuf_r+0x16>
    4cf4:	6983      	ldr	r3, [r0, #24]
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d101      	bne.n	4cfe <__swbuf_r+0x16>
    4cfa:	f7ff fb17 	bl	432c <__sinit>
    4cfe:	4b22      	ldr	r3, [pc, #136]	; (4d88 <__swbuf_r+0xa0>)
    4d00:	429c      	cmp	r4, r3
    4d02:	d12d      	bne.n	4d60 <__swbuf_r+0x78>
    4d04:	686c      	ldr	r4, [r5, #4]
    4d06:	69a3      	ldr	r3, [r4, #24]
    4d08:	60a3      	str	r3, [r4, #8]
    4d0a:	89a3      	ldrh	r3, [r4, #12]
    4d0c:	071b      	lsls	r3, r3, #28
    4d0e:	d531      	bpl.n	4d74 <__swbuf_r+0x8c>
    4d10:	6923      	ldr	r3, [r4, #16]
    4d12:	2b00      	cmp	r3, #0
    4d14:	d02e      	beq.n	4d74 <__swbuf_r+0x8c>
    4d16:	6823      	ldr	r3, [r4, #0]
    4d18:	6922      	ldr	r2, [r4, #16]
    4d1a:	b2f7      	uxtb	r7, r6
    4d1c:	1a98      	subs	r0, r3, r2
    4d1e:	6963      	ldr	r3, [r4, #20]
    4d20:	b2f6      	uxtb	r6, r6
    4d22:	4298      	cmp	r0, r3
    4d24:	db05      	blt.n	4d32 <__swbuf_r+0x4a>
    4d26:	0021      	movs	r1, r4
    4d28:	0028      	movs	r0, r5
    4d2a:	f7ff fa91 	bl	4250 <_fflush_r>
    4d2e:	2800      	cmp	r0, #0
    4d30:	d126      	bne.n	4d80 <__swbuf_r+0x98>
    4d32:	68a3      	ldr	r3, [r4, #8]
    4d34:	3001      	adds	r0, #1
    4d36:	3b01      	subs	r3, #1
    4d38:	60a3      	str	r3, [r4, #8]
    4d3a:	6823      	ldr	r3, [r4, #0]
    4d3c:	1c5a      	adds	r2, r3, #1
    4d3e:	6022      	str	r2, [r4, #0]
    4d40:	701f      	strb	r7, [r3, #0]
    4d42:	6963      	ldr	r3, [r4, #20]
    4d44:	4298      	cmp	r0, r3
    4d46:	d004      	beq.n	4d52 <__swbuf_r+0x6a>
    4d48:	89a3      	ldrh	r3, [r4, #12]
    4d4a:	07db      	lsls	r3, r3, #31
    4d4c:	d51a      	bpl.n	4d84 <__swbuf_r+0x9c>
    4d4e:	2e0a      	cmp	r6, #10
    4d50:	d118      	bne.n	4d84 <__swbuf_r+0x9c>
    4d52:	0021      	movs	r1, r4
    4d54:	0028      	movs	r0, r5
    4d56:	f7ff fa7b 	bl	4250 <_fflush_r>
    4d5a:	2800      	cmp	r0, #0
    4d5c:	d012      	beq.n	4d84 <__swbuf_r+0x9c>
    4d5e:	e00f      	b.n	4d80 <__swbuf_r+0x98>
    4d60:	4b0a      	ldr	r3, [pc, #40]	; (4d8c <__swbuf_r+0xa4>)
    4d62:	429c      	cmp	r4, r3
    4d64:	d101      	bne.n	4d6a <__swbuf_r+0x82>
    4d66:	68ac      	ldr	r4, [r5, #8]
    4d68:	e7cd      	b.n	4d06 <__swbuf_r+0x1e>
    4d6a:	4b09      	ldr	r3, [pc, #36]	; (4d90 <__swbuf_r+0xa8>)
    4d6c:	429c      	cmp	r4, r3
    4d6e:	d1ca      	bne.n	4d06 <__swbuf_r+0x1e>
    4d70:	68ec      	ldr	r4, [r5, #12]
    4d72:	e7c8      	b.n	4d06 <__swbuf_r+0x1e>
    4d74:	0021      	movs	r1, r4
    4d76:	0028      	movs	r0, r5
    4d78:	f000 f820 	bl	4dbc <__swsetup_r>
    4d7c:	2800      	cmp	r0, #0
    4d7e:	d0ca      	beq.n	4d16 <__swbuf_r+0x2e>
    4d80:	2601      	movs	r6, #1
    4d82:	4276      	negs	r6, r6
    4d84:	0030      	movs	r0, r6
    4d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d88:	00007098 	.word	0x00007098
    4d8c:	000070b8 	.word	0x000070b8
    4d90:	00007078 	.word	0x00007078

00004d94 <_write_r>:
    4d94:	b570      	push	{r4, r5, r6, lr}
    4d96:	0005      	movs	r5, r0
    4d98:	0008      	movs	r0, r1
    4d9a:	0011      	movs	r1, r2
    4d9c:	2200      	movs	r2, #0
    4d9e:	4c06      	ldr	r4, [pc, #24]	; (4db8 <_write_r+0x24>)
    4da0:	6022      	str	r2, [r4, #0]
    4da2:	001a      	movs	r2, r3
    4da4:	f7fc fe20 	bl	19e8 <_write>
    4da8:	1c43      	adds	r3, r0, #1
    4daa:	d103      	bne.n	4db4 <_write_r+0x20>
    4dac:	6823      	ldr	r3, [r4, #0]
    4dae:	2b00      	cmp	r3, #0
    4db0:	d000      	beq.n	4db4 <_write_r+0x20>
    4db2:	602b      	str	r3, [r5, #0]
    4db4:	bd70      	pop	{r4, r5, r6, pc}
    4db6:	46c0      	nop			; (mov r8, r8)
    4db8:	2000030c 	.word	0x2000030c

00004dbc <__swsetup_r>:
    4dbc:	4b36      	ldr	r3, [pc, #216]	; (4e98 <__swsetup_r+0xdc>)
    4dbe:	b570      	push	{r4, r5, r6, lr}
    4dc0:	681d      	ldr	r5, [r3, #0]
    4dc2:	0006      	movs	r6, r0
    4dc4:	000c      	movs	r4, r1
    4dc6:	2d00      	cmp	r5, #0
    4dc8:	d005      	beq.n	4dd6 <__swsetup_r+0x1a>
    4dca:	69ab      	ldr	r3, [r5, #24]
    4dcc:	2b00      	cmp	r3, #0
    4dce:	d102      	bne.n	4dd6 <__swsetup_r+0x1a>
    4dd0:	0028      	movs	r0, r5
    4dd2:	f7ff faab 	bl	432c <__sinit>
    4dd6:	4b31      	ldr	r3, [pc, #196]	; (4e9c <__swsetup_r+0xe0>)
    4dd8:	429c      	cmp	r4, r3
    4dda:	d10f      	bne.n	4dfc <__swsetup_r+0x40>
    4ddc:	686c      	ldr	r4, [r5, #4]
    4dde:	230c      	movs	r3, #12
    4de0:	5ee2      	ldrsh	r2, [r4, r3]
    4de2:	b293      	uxth	r3, r2
    4de4:	0719      	lsls	r1, r3, #28
    4de6:	d42d      	bmi.n	4e44 <__swsetup_r+0x88>
    4de8:	06d9      	lsls	r1, r3, #27
    4dea:	d411      	bmi.n	4e10 <__swsetup_r+0x54>
    4dec:	2309      	movs	r3, #9
    4dee:	2001      	movs	r0, #1
    4df0:	6033      	str	r3, [r6, #0]
    4df2:	3337      	adds	r3, #55	; 0x37
    4df4:	4313      	orrs	r3, r2
    4df6:	81a3      	strh	r3, [r4, #12]
    4df8:	4240      	negs	r0, r0
    4dfa:	bd70      	pop	{r4, r5, r6, pc}
    4dfc:	4b28      	ldr	r3, [pc, #160]	; (4ea0 <__swsetup_r+0xe4>)
    4dfe:	429c      	cmp	r4, r3
    4e00:	d101      	bne.n	4e06 <__swsetup_r+0x4a>
    4e02:	68ac      	ldr	r4, [r5, #8]
    4e04:	e7eb      	b.n	4dde <__swsetup_r+0x22>
    4e06:	4b27      	ldr	r3, [pc, #156]	; (4ea4 <__swsetup_r+0xe8>)
    4e08:	429c      	cmp	r4, r3
    4e0a:	d1e8      	bne.n	4dde <__swsetup_r+0x22>
    4e0c:	68ec      	ldr	r4, [r5, #12]
    4e0e:	e7e6      	b.n	4dde <__swsetup_r+0x22>
    4e10:	075b      	lsls	r3, r3, #29
    4e12:	d513      	bpl.n	4e3c <__swsetup_r+0x80>
    4e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4e16:	2900      	cmp	r1, #0
    4e18:	d008      	beq.n	4e2c <__swsetup_r+0x70>
    4e1a:	0023      	movs	r3, r4
    4e1c:	3344      	adds	r3, #68	; 0x44
    4e1e:	4299      	cmp	r1, r3
    4e20:	d002      	beq.n	4e28 <__swsetup_r+0x6c>
    4e22:	0030      	movs	r0, r6
    4e24:	f7ff fb8e 	bl	4544 <_free_r>
    4e28:	2300      	movs	r3, #0
    4e2a:	6363      	str	r3, [r4, #52]	; 0x34
    4e2c:	2224      	movs	r2, #36	; 0x24
    4e2e:	89a3      	ldrh	r3, [r4, #12]
    4e30:	4393      	bics	r3, r2
    4e32:	81a3      	strh	r3, [r4, #12]
    4e34:	2300      	movs	r3, #0
    4e36:	6063      	str	r3, [r4, #4]
    4e38:	6923      	ldr	r3, [r4, #16]
    4e3a:	6023      	str	r3, [r4, #0]
    4e3c:	2308      	movs	r3, #8
    4e3e:	89a2      	ldrh	r2, [r4, #12]
    4e40:	4313      	orrs	r3, r2
    4e42:	81a3      	strh	r3, [r4, #12]
    4e44:	6923      	ldr	r3, [r4, #16]
    4e46:	2b00      	cmp	r3, #0
    4e48:	d10b      	bne.n	4e62 <__swsetup_r+0xa6>
    4e4a:	21a0      	movs	r1, #160	; 0xa0
    4e4c:	2280      	movs	r2, #128	; 0x80
    4e4e:	89a3      	ldrh	r3, [r4, #12]
    4e50:	0089      	lsls	r1, r1, #2
    4e52:	0092      	lsls	r2, r2, #2
    4e54:	400b      	ands	r3, r1
    4e56:	4293      	cmp	r3, r2
    4e58:	d003      	beq.n	4e62 <__swsetup_r+0xa6>
    4e5a:	0021      	movs	r1, r4
    4e5c:	0030      	movs	r0, r6
    4e5e:	f7ff fb23 	bl	44a8 <__smakebuf_r>
    4e62:	2301      	movs	r3, #1
    4e64:	89a2      	ldrh	r2, [r4, #12]
    4e66:	4013      	ands	r3, r2
    4e68:	d011      	beq.n	4e8e <__swsetup_r+0xd2>
    4e6a:	2300      	movs	r3, #0
    4e6c:	60a3      	str	r3, [r4, #8]
    4e6e:	6963      	ldr	r3, [r4, #20]
    4e70:	425b      	negs	r3, r3
    4e72:	61a3      	str	r3, [r4, #24]
    4e74:	2000      	movs	r0, #0
    4e76:	6923      	ldr	r3, [r4, #16]
    4e78:	4283      	cmp	r3, r0
    4e7a:	d1be      	bne.n	4dfa <__swsetup_r+0x3e>
    4e7c:	230c      	movs	r3, #12
    4e7e:	5ee2      	ldrsh	r2, [r4, r3]
    4e80:	0613      	lsls	r3, r2, #24
    4e82:	d5ba      	bpl.n	4dfa <__swsetup_r+0x3e>
    4e84:	2340      	movs	r3, #64	; 0x40
    4e86:	4313      	orrs	r3, r2
    4e88:	81a3      	strh	r3, [r4, #12]
    4e8a:	3801      	subs	r0, #1
    4e8c:	e7b5      	b.n	4dfa <__swsetup_r+0x3e>
    4e8e:	0792      	lsls	r2, r2, #30
    4e90:	d400      	bmi.n	4e94 <__swsetup_r+0xd8>
    4e92:	6963      	ldr	r3, [r4, #20]
    4e94:	60a3      	str	r3, [r4, #8]
    4e96:	e7ed      	b.n	4e74 <__swsetup_r+0xb8>
    4e98:	20000038 	.word	0x20000038
    4e9c:	00007098 	.word	0x00007098
    4ea0:	000070b8 	.word	0x000070b8
    4ea4:	00007078 	.word	0x00007078

00004ea8 <_close_r>:
    4ea8:	2300      	movs	r3, #0
    4eaa:	b570      	push	{r4, r5, r6, lr}
    4eac:	4c06      	ldr	r4, [pc, #24]	; (4ec8 <_close_r+0x20>)
    4eae:	0005      	movs	r5, r0
    4eb0:	0008      	movs	r0, r1
    4eb2:	6023      	str	r3, [r4, #0]
    4eb4:	f7fc fdd2 	bl	1a5c <_close>
    4eb8:	1c43      	adds	r3, r0, #1
    4eba:	d103      	bne.n	4ec4 <_close_r+0x1c>
    4ebc:	6823      	ldr	r3, [r4, #0]
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d000      	beq.n	4ec4 <_close_r+0x1c>
    4ec2:	602b      	str	r3, [r5, #0]
    4ec4:	bd70      	pop	{r4, r5, r6, pc}
    4ec6:	46c0      	nop			; (mov r8, r8)
    4ec8:	2000030c 	.word	0x2000030c

00004ecc <_fstat_r>:
    4ecc:	2300      	movs	r3, #0
    4ece:	b570      	push	{r4, r5, r6, lr}
    4ed0:	4c06      	ldr	r4, [pc, #24]	; (4eec <_fstat_r+0x20>)
    4ed2:	0005      	movs	r5, r0
    4ed4:	0008      	movs	r0, r1
    4ed6:	0011      	movs	r1, r2
    4ed8:	6023      	str	r3, [r4, #0]
    4eda:	f7fc fdc2 	bl	1a62 <_fstat>
    4ede:	1c43      	adds	r3, r0, #1
    4ee0:	d103      	bne.n	4eea <_fstat_r+0x1e>
    4ee2:	6823      	ldr	r3, [r4, #0]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d000      	beq.n	4eea <_fstat_r+0x1e>
    4ee8:	602b      	str	r3, [r5, #0]
    4eea:	bd70      	pop	{r4, r5, r6, pc}
    4eec:	2000030c 	.word	0x2000030c

00004ef0 <_isatty_r>:
    4ef0:	2300      	movs	r3, #0
    4ef2:	b570      	push	{r4, r5, r6, lr}
    4ef4:	4c06      	ldr	r4, [pc, #24]	; (4f10 <_isatty_r+0x20>)
    4ef6:	0005      	movs	r5, r0
    4ef8:	0008      	movs	r0, r1
    4efa:	6023      	str	r3, [r4, #0]
    4efc:	f7fc fdb6 	bl	1a6c <_isatty>
    4f00:	1c43      	adds	r3, r0, #1
    4f02:	d103      	bne.n	4f0c <_isatty_r+0x1c>
    4f04:	6823      	ldr	r3, [r4, #0]
    4f06:	2b00      	cmp	r3, #0
    4f08:	d000      	beq.n	4f0c <_isatty_r+0x1c>
    4f0a:	602b      	str	r3, [r5, #0]
    4f0c:	bd70      	pop	{r4, r5, r6, pc}
    4f0e:	46c0      	nop			; (mov r8, r8)
    4f10:	2000030c 	.word	0x2000030c

00004f14 <_lseek_r>:
    4f14:	b570      	push	{r4, r5, r6, lr}
    4f16:	0005      	movs	r5, r0
    4f18:	0008      	movs	r0, r1
    4f1a:	0011      	movs	r1, r2
    4f1c:	2200      	movs	r2, #0
    4f1e:	4c06      	ldr	r4, [pc, #24]	; (4f38 <_lseek_r+0x24>)
    4f20:	6022      	str	r2, [r4, #0]
    4f22:	001a      	movs	r2, r3
    4f24:	f7fc fda4 	bl	1a70 <_lseek>
    4f28:	1c43      	adds	r3, r0, #1
    4f2a:	d103      	bne.n	4f34 <_lseek_r+0x20>
    4f2c:	6823      	ldr	r3, [r4, #0]
    4f2e:	2b00      	cmp	r3, #0
    4f30:	d000      	beq.n	4f34 <_lseek_r+0x20>
    4f32:	602b      	str	r3, [r5, #0]
    4f34:	bd70      	pop	{r4, r5, r6, pc}
    4f36:	46c0      	nop			; (mov r8, r8)
    4f38:	2000030c 	.word	0x2000030c

00004f3c <memchr>:
    4f3c:	b2c9      	uxtb	r1, r1
    4f3e:	1882      	adds	r2, r0, r2
    4f40:	4290      	cmp	r0, r2
    4f42:	d101      	bne.n	4f48 <memchr+0xc>
    4f44:	2000      	movs	r0, #0
    4f46:	4770      	bx	lr
    4f48:	7803      	ldrb	r3, [r0, #0]
    4f4a:	428b      	cmp	r3, r1
    4f4c:	d0fb      	beq.n	4f46 <memchr+0xa>
    4f4e:	3001      	adds	r0, #1
    4f50:	e7f6      	b.n	4f40 <memchr+0x4>

00004f52 <__malloc_lock>:
    4f52:	4770      	bx	lr

00004f54 <__malloc_unlock>:
    4f54:	4770      	bx	lr
	...

00004f58 <_read_r>:
    4f58:	b570      	push	{r4, r5, r6, lr}
    4f5a:	0005      	movs	r5, r0
    4f5c:	0008      	movs	r0, r1
    4f5e:	0011      	movs	r1, r2
    4f60:	2200      	movs	r2, #0
    4f62:	4c06      	ldr	r4, [pc, #24]	; (4f7c <_read_r+0x24>)
    4f64:	6022      	str	r2, [r4, #0]
    4f66:	001a      	movs	r2, r3
    4f68:	f7fc fd1c 	bl	19a4 <_read>
    4f6c:	1c43      	adds	r3, r0, #1
    4f6e:	d103      	bne.n	4f78 <_read_r+0x20>
    4f70:	6823      	ldr	r3, [r4, #0]
    4f72:	2b00      	cmp	r3, #0
    4f74:	d000      	beq.n	4f78 <_read_r+0x20>
    4f76:	602b      	str	r3, [r5, #0]
    4f78:	bd70      	pop	{r4, r5, r6, pc}
    4f7a:	46c0      	nop			; (mov r8, r8)
    4f7c:	2000030c 	.word	0x2000030c
    4f80:	00000436 	.word	0x00000436
    4f84:	00000682 	.word	0x00000682
    4f88:	00000682 	.word	0x00000682
    4f8c:	00000682 	.word	0x00000682
    4f90:	00000682 	.word	0x00000682
    4f94:	00000682 	.word	0x00000682
    4f98:	00000682 	.word	0x00000682
    4f9c:	00000682 	.word	0x00000682
    4fa0:	00000682 	.word	0x00000682
    4fa4:	00000682 	.word	0x00000682
    4fa8:	00000682 	.word	0x00000682
    4fac:	00000682 	.word	0x00000682
    4fb0:	00000682 	.word	0x00000682
    4fb4:	00000682 	.word	0x00000682
    4fb8:	00000682 	.word	0x00000682
    4fbc:	00000682 	.word	0x00000682
    4fc0:	0000041e 	.word	0x0000041e
    4fc4:	00000682 	.word	0x00000682
    4fc8:	00000682 	.word	0x00000682
    4fcc:	00000682 	.word	0x00000682
    4fd0:	00000682 	.word	0x00000682
    4fd4:	00000682 	.word	0x00000682
    4fd8:	00000682 	.word	0x00000682
    4fdc:	00000682 	.word	0x00000682
    4fe0:	00000682 	.word	0x00000682
    4fe4:	00000682 	.word	0x00000682
    4fe8:	00000682 	.word	0x00000682
    4fec:	00000682 	.word	0x00000682
    4ff0:	00000682 	.word	0x00000682
    4ff4:	00000682 	.word	0x00000682
    4ff8:	00000682 	.word	0x00000682
    4ffc:	00000682 	.word	0x00000682
    5000:	0000042e 	.word	0x0000042e
    5004:	00000682 	.word	0x00000682
    5008:	00000682 	.word	0x00000682
    500c:	00000682 	.word	0x00000682
    5010:	00000682 	.word	0x00000682
    5014:	00000682 	.word	0x00000682
    5018:	00000682 	.word	0x00000682
    501c:	00000682 	.word	0x00000682
    5020:	00000682 	.word	0x00000682
    5024:	00000682 	.word	0x00000682
    5028:	00000682 	.word	0x00000682
    502c:	00000682 	.word	0x00000682
    5030:	00000682 	.word	0x00000682
    5034:	00000682 	.word	0x00000682
    5038:	00000682 	.word	0x00000682
    503c:	00000682 	.word	0x00000682
    5040:	00000426 	.word	0x00000426
    5044:	0000043e 	.word	0x0000043e
    5048:	00000406 	.word	0x00000406
    504c:	00000416 	.word	0x00000416
    5050:	0000040e 	.word	0x0000040e
    5054:	00000002 	.word	0x00000002
    5058:	00000003 	.word	0x00000003
    505c:	00000028 	.word	0x00000028
    5060:	00000029 	.word	0x00000029
    5064:	00000004 	.word	0x00000004
    5068:	00000005 	.word	0x00000005
    506c:	00000006 	.word	0x00000006
    5070:	00000007 	.word	0x00000007
    5074:	00000020 	.word	0x00000020
    5078:	00000021 	.word	0x00000021
    507c:	00000022 	.word	0x00000022
    5080:	00000023 	.word	0x00000023
    5084:	00000024 	.word	0x00000024
    5088:	00000025 	.word	0x00000025
    508c:	00000026 	.word	0x00000026
    5090:	00000027 	.word	0x00000027
    5094:	00000008 	.word	0x00000008
    5098:	00000009 	.word	0x00000009
    509c:	0000000a 	.word	0x0000000a
    50a0:	0000000b 	.word	0x0000000b
    50a4:	42000800 	.word	0x42000800
    50a8:	42000c00 	.word	0x42000c00
    50ac:	42001000 	.word	0x42001000
    50b0:	42001400 	.word	0x42001400
    50b4:	42001800 	.word	0x42001800
    50b8:	42001c00 	.word	0x42001c00
    50bc:	00001132 	.word	0x00001132
    50c0:	0000112e 	.word	0x0000112e
    50c4:	0000112e 	.word	0x0000112e
    50c8:	00001194 	.word	0x00001194
    50cc:	00001194 	.word	0x00001194
    50d0:	00001146 	.word	0x00001146
    50d4:	00001138 	.word	0x00001138
    50d8:	0000114c 	.word	0x0000114c
    50dc:	00001182 	.word	0x00001182
    50e0:	00001354 	.word	0x00001354
    50e4:	00001334 	.word	0x00001334
    50e8:	00001334 	.word	0x00001334
    50ec:	000013c0 	.word	0x000013c0
    50f0:	00001346 	.word	0x00001346
    50f4:	00001362 	.word	0x00001362
    50f8:	00001338 	.word	0x00001338
    50fc:	00001370 	.word	0x00001370
    5100:	000013b0 	.word	0x000013b0
	...
    5444:	3f30ff03 	.word	0x3f30ff03
    5448:	000000f3 	.word	0x000000f3
	...
    5458:	3f00f003 	.word	0x3f00f003
    545c:	00000000 	.word	0x00000000
    5460:	f0030000 	.word	0xf0030000
    5464:	00003f00 	.word	0x00003f00
    5468:	00000000 	.word	0x00000000
    546c:	03000000 	.word	0x03000000
    5470:	f0ff0330 	.word	0xf0ff0330
    5474:	3300ff3f 	.word	0x3300ff3f
    5478:	03300300 	.word	0x03300300
    547c:	ff3ff0ff 	.word	0xff3ff0ff
    5480:	03003300 	.word	0x03003300
    5484:	00000030 	.word	0x00000030
    5488:	cc000003 	.word	0xcc000003
    548c:	03cc0cc0 	.word	0x03cc0cc0
    5490:	ff3ff0ff 	.word	0xff3ff0ff
    5494:	0cc0cc00 	.word	0x0cc0cc00
    5498:	000300cc 	.word	0x000300cc
    549c:	00000000 	.word	0x00000000
    54a0:	03031c00 	.word	0x03031c00
    54a4:	380ee030 	.word	0x380ee030
    54a8:	03000e00 	.word	0x03000e00
    54ac:	c0e10080 	.word	0xc0e10080
    54b0:	00003338 	.word	0x00003338
    54b4:	000000e0 	.word	0x000000e0
    54b8:	3c0f0000 	.word	0x3c0f0000
    54bc:	30300c03 	.word	0x30300c03
    54c0:	300c03c3 	.word	0x300c03c3
    54c4:	f300c330 	.word	0xf300c330
    54c8:	000c0030 	.word	0x000c0030
    54cc:	33003003 	.word	0x33003003
	...
    54d8:	f0000003 	.word	0xf0000003
    54dc:	03003c00 	.word	0x03003c00
	...
    54f0:	00f00300 	.word	0x00f00300
    54f4:	0c0c003f 	.word	0x0c0c003f
    54f8:	00300003 	.word	0x00300003
	...
    550c:	0c300003 	.word	0x0c300003
    5510:	003f000c 	.word	0x003f000c
    5514:	0000f003 	.word	0x0000f003
    5518:	00000000 	.word	0x00000000
    551c:	c0000000 	.word	0xc0000000
    5520:	03c0cc00 	.word	0x03c0cc00
    5524:	000c00f0 	.word	0x000c00f0
    5528:	3f00c000 	.word	0x3f00c000
    552c:	00cc0c00 	.word	0x00cc0c00
    5530:	0000000c 	.word	0x0000000c
    5534:	00000000 	.word	0x00000000
    5538:	000c00c0 	.word	0x000c00c0
    553c:	0c00c000 	.word	0x0c00c000
    5540:	00fc0f00 	.word	0x00fc0f00
    5544:	c000000c 	.word	0xc000000c
    5548:	00000c00 	.word	0x00000c00
    554c:	000000c0 	.word	0x000000c0
    5550:	00000000 	.word	0x00000000
    5554:	0003000c 	.word	0x0003000c
    5558:	0c00f000 	.word	0x0c00f000
	...
    5568:	00c00000 	.word	0x00c00000
    556c:	c000000c 	.word	0xc000000c
    5570:	00000c00 	.word	0x00000c00
    5574:	000c00c0 	.word	0x000c00c0
    5578:	0c00c000 	.word	0x0c00c000
    557c:	00c00000 	.word	0x00c00000
	...
    5588:	f000000f 	.word	0xf000000f
    558c:	00000f00 	.word	0x00000f00
	...
    559c:	c0000003 	.word	0xc0000003
    55a0:	0c003000 	.word	0x0c003000
    55a4:	00000300 	.word	0x00000300
    55a8:	003000c0 	.word	0x003000c0
	...
    55b4:	ff00f003 	.word	0xff00f003
    55b8:	030f3cc0 	.word	0x030f3cc0
    55bc:	03303000 	.word	0x03303000
    55c0:	3c300003 	.word	0x3c300003
    55c4:	c0ff000f 	.word	0xc0ff000f
    55c8:	0000f003 	.word	0x0000f003
    55cc:	00000000 	.word	0x00000000
    55d0:	030c3060 	.word	0x030c3060
    55d4:	3f308001 	.word	0x3f308001
    55d8:	f0ff03ff 	.word	0xf0ff03ff
    55dc:	00000300 	.word	0x00000300
    55e0:	00000000 	.word	0x00000000
    55e4:	0f0c0000 	.word	0x0f0c0000
    55e8:	30f0c303 	.word	0x30f0c303
    55ec:	30030333 	.word	0x30030333
    55f0:	0c03c330 	.word	0x0c03c330
    55f4:	00c33030 	.word	0x00c33030
    55f8:	030f30f0 	.word	0x030f30f0
    55fc:	30000000 	.word	0x30000000
    5600:	7000030c 	.word	0x7000030c
    5604:	00030330 	.word	0x00030330
    5608:	03c33130 	.word	0x03c33130
    560c:	c33e303c 	.word	0xc33e303c
    5610:	30c0c303 	.word	0x30c0c303
    5614:	0000003c 	.word	0x0000003c
    5618:	0f007000 	.word	0x0f007000
    561c:	00b00300 	.word	0x00b00300
    5620:	301c0063 	.word	0x301c0063
    5624:	00f0ff03 	.word	0x00f0ff03
    5628:	00030030 	.word	0x00030030
    562c:	00003000 	.word	0x00003000
    5630:	03cc3f00 	.word	0x03cc3f00
    5634:	033330fc 	.word	0x033330fc
    5638:	33303003 	.word	0x33303003
    563c:	30300303 	.word	0x30300303
    5640:	0f030333 	.word	0x0f030333
    5644:	00fc30c0 	.word	0x00fc30c0
    5648:	fc030000 	.word	0xfc030000
    564c:	3cf0ff00 	.word	0x3cf0ff00
    5650:	300c03c3 	.word	0x300c03c3
    5654:	0c03c330 	.word	0x0c03c330
    5658:	00c33030 	.word	0x00c33030
    565c:	3c00c003 	.word	0x3c00c003
    5660:	30000000 	.word	0x30000000
    5664:	00000300 	.word	0x00000300
    5668:	00030f30 	.word	0x00030f30
    566c:	033030f0 	.word	0x033030f0
    5670:	0033000c 	.word	0x0033000c
    5674:	3c00c003 	.word	0x3c00c003
    5678:	00000000 	.word	0x00000000
    567c:	f3003c0f 	.word	0xf3003c0f
    5680:	03c330c0 	.word	0x03c330c0
    5684:	c330300c 	.word	0xc330300c
    5688:	30300c03 	.word	0x30300c03
    568c:	c0f300c3 	.word	0xc0f300c3
    5690:	00003c0f 	.word	0x00003c0f
    5694:	03000f00 	.word	0x03000f00
    5698:	c33030fc 	.word	0xc33030fc
    569c:	30300c03 	.word	0x30300c03
    56a0:	300c03c3 	.word	0x300c03c3
    56a4:	ff000e33 	.word	0xff000e33
    56a8:	00f00fc0 	.word	0x00f00fc0
    56ac:	00000000 	.word	0x00000000
    56b0:	0f000000 	.word	0x0f000000
    56b4:	f0f0000f 	.word	0xf0f0000f
    56b8:	00000f0f 	.word	0x00000f0f
	...
    56c8:	0c000000 	.word	0x0c000000
    56cc:	f0000f0f 	.word	0xf0000f0f
    56d0:	000c0ff0 	.word	0x000c0ff0
	...
    56e0:	0c00c000 	.word	0x0c00c000
    56e4:	00300300 	.word	0x00300300
    56e8:	0c0c0033 	.word	0x0c0c0033
    56ec:	30c0c000 	.word	0x30c0c000
    56f0:	30000303 	.word	0x30000303
    56f4:	00000000 	.word	0x00000000
    56f8:	00300300 	.word	0x00300300
    56fc:	30030033 	.word	0x30030033
    5700:	03003300 	.word	0x03003300
    5704:	00330030 	.word	0x00330030
    5708:	33003003 	.word	0x33003003
    570c:	00300300 	.word	0x00300300
    5710:	03300000 	.word	0x03300000
    5714:	0c300003 	.word	0x0c300003
    5718:	c0c0000c 	.word	0xc0c0000c
    571c:	33003003 	.word	0x33003003
    5720:	00c00000 	.word	0x00c00000
    5724:	0000000c 	.word	0x0000000c
    5728:	0c000000 	.word	0x0c000000
    572c:	00c00300 	.word	0x00c00300
    5730:	0f030030 	.word	0x0f030030
    5734:	03f33030 	.word	0x03f33030
    5738:	00330030 	.word	0x00330030
    573c:	0c00c000 	.word	0x0c00c000
    5740:	00000000 	.word	0x00000000
    5744:	ff03fc0f 	.word	0xff03fc0f
    5748:	030330f0 	.word	0x030330f0
    574c:	3333300c 	.word	0x3333300c
    5750:	31303303 	.word	0x31303303
    5754:	00ff00e3 	.word	0x00ff00e3
    5758:	0000f00f 	.word	0x0000f00f
    575c:	00ff0000 	.word	0x00ff0000
    5760:	300ff03f 	.word	0x300ff03f
    5764:	3000c301 	.word	0x3000c301
    5768:	00c30130 	.word	0x00c30130
    576c:	3f00300f 	.word	0x3f00300f
    5770:	00ff00f0 	.word	0x00ff00f0
    5774:	03300000 	.word	0x03300000
    5778:	3ff0ff03 	.word	0x3ff0ff03
    577c:	300c03ff 	.word	0x300c03ff
    5780:	0c03c330 	.word	0x0c03c330
    5784:	00c33030 	.word	0x00c33030
    5788:	3c0fc0f3 	.word	0x3c0fc0f3
    578c:	03000000 	.word	0x03000000
    5790:	c0ff00f0 	.word	0xc0ff00f0
    5794:	00030f3c 	.word	0x00030f3c
    5798:	03033030 	.word	0x03033030
    579c:	03303000 	.word	0x03303000
    57a0:	0cc0c000 	.word	0x0cc0c000
    57a4:	0000000c 	.word	0x0000000c
    57a8:	ff030330 	.word	0xff030330
    57ac:	03ff3ff0 	.word	0x03ff3ff0
    57b0:	03303000 	.word	0x03303000
    57b4:	0ef0c003 	.word	0x0ef0c003
    57b8:	003f001c 	.word	0x003f001c
    57bc:	0000e001 	.word	0x0000e001
    57c0:	03ff3f00 	.word	0x03ff3f00
    57c4:	c330f0ff 	.word	0xc330f0ff
    57c8:	30300c03 	.word	0x30300c03
    57cc:	300c03c3 	.word	0x300c03c3
    57d0:	00030330 	.word	0x00030330
    57d4:	00033030 	.word	0x00033030
    57d8:	ff3f0000 	.word	0xff3f0000
    57dc:	30f0ff03 	.word	0x30f0ff03
    57e0:	000c03c0 	.word	0x000c03c0
    57e4:	0c03c030 	.word	0x0c03c030
    57e8:	03003000 	.word	0x03003000
    57ec:	00300000 	.word	0x00300000
    57f0:	03000000 	.word	0x03000000
    57f4:	c0ff00f0 	.word	0xc0ff00f0
    57f8:	00030f3c 	.word	0x00030f3c
    57fc:	03033030 	.word	0x03033030
    5800:	33303003 	.word	0x33303003
    5804:	0cc0c300 	.word	0x0cc0c300
    5808:	0000003c 	.word	0x0000003c
    580c:	ff03ff3f 	.word	0xff03ff3f
    5810:	00c000f0 	.word	0x00c000f0
    5814:	c000000c 	.word	0xc000000c
    5818:	00000c00 	.word	0x00000c00
    581c:	f0ff03c0 	.word	0xf0ff03c0
    5820:	0000ff3f 	.word	0x0000ff3f
    5824:	03000000 	.word	0x03000000
    5828:	03303000 	.word	0x03303000
    582c:	3ff0ff03 	.word	0x3ff0ff03
    5830:	300003ff 	.word	0x300003ff
    5834:	00000330 	.word	0x00000330
    5838:	00000000 	.word	0x00000000
    583c:	0c000000 	.word	0x0c000000
    5840:	00f00000 	.word	0x00f00000
    5844:	30000303 	.word	0x30000303
    5848:	ff030330 	.word	0xff030330
    584c:	03fc3ff0 	.word	0x03fc3ff0
    5850:	00300000 	.word	0x00300000
    5854:	3f000000 	.word	0x3f000000
    5858:	f0ff03ff 	.word	0xf0ff03ff
    585c:	3300c000 	.word	0x3300c000
    5860:	00300300 	.word	0x00300300
    5864:	0c0cc0c0 	.word	0x0c0cc0c0
    5868:	30300003 	.word	0x30300003
    586c:	00000003 	.word	0x00000003
    5870:	ff03ff3f 	.word	0xff03ff3f
    5874:	000300f0 	.word	0x000300f0
    5878:	03003000 	.word	0x03003000
    587c:	00300000 	.word	0x00300000
    5880:	30000003 	.word	0x30000003
    5884:	00000300 	.word	0x00000300
    5888:	03ff3f00 	.word	0x03ff3f00
    588c:	001cf0ff 	.word	0x001cf0ff
    5890:	03007000 	.word	0x03007000
    5894:	007000c0 	.word	0x007000c0
    5898:	ff03001c 	.word	0xff03001c
    589c:	00ff3ff0 	.word	0x00ff3ff0
    58a0:	ff3f0000 	.word	0xff3f0000
    58a4:	1cf0ff03 	.word	0x1cf0ff03
    58a8:	00700000 	.word	0x00700000
    58ac:	0700c001 	.word	0x0700c001
    58b0:	031c0000 	.word	0x031c0000
    58b4:	ff3ff0ff 	.word	0xff3ff0ff
    58b8:	0f000000 	.word	0x0f000000
    58bc:	c0ff00fc 	.word	0xc0ff00fc
    58c0:	00030738 	.word	0x00030738
    58c4:	03033030 	.word	0x03033030
    58c8:	07383000 	.word	0x07383000
    58cc:	0fc0ff00 	.word	0x0fc0ff00
    58d0:	000000fc 	.word	0x000000fc
    58d4:	ff03ff3f 	.word	0xff03ff3f
    58d8:	03c030f0 	.word	0x03c030f0
    58dc:	c030000c 	.word	0xc030000c
    58e0:	30000c03 	.word	0x30000c03
    58e4:	00f000c0 	.word	0x00f000c0
    58e8:	0000000f 	.word	0x0000000f
    58ec:	03fc0f00 	.word	0x03fc0f00
    58f0:	0330f0ff 	.word	0x0330f0ff
    58f4:	30300003 	.word	0x30300003
    58f8:	f0030333 	.word	0xf0030333
    58fc:	ff000c30 	.word	0xff000c30
    5900:	00f30f30 	.word	0x00f30f30
    5904:	ff3f0000 	.word	0xff3f0000
    5908:	30f0ff03 	.word	0x30f0ff03
    590c:	000c03c0 	.word	0x000c03c0
    5910:	0f03c030 	.word	0x0f03c030
    5914:	00fc3000 	.word	0x00fc3000
    5918:	030ff0f0 	.word	0x030ff0f0
    591c:	0f000000 	.word	0x0f000000
    5920:	f0fc030c 	.word	0xf0fc030c
    5924:	0c03c330 	.word	0x0c03c330
    5928:	03c33030 	.word	0x03c33030
    592c:	c330300c 	.word	0xc330300c
    5930:	0cc0c300 	.word	0x0cc0c300
    5934:	0000003c 	.word	0x0000003c
    5938:	00030030 	.word	0x00030030
    593c:	03003000 	.word	0x03003000
    5940:	ff3f0000 	.word	0xff3f0000
    5944:	30000003 	.word	0x30000003
    5948:	00000300 	.word	0x00000300
    594c:	00000030 	.word	0x00000030
    5950:	03fc3f00 	.word	0x03fc3f00
    5954:	0300c0ff 	.word	0x0300c0ff
    5958:	00300000 	.word	0x00300000
    595c:	30000003 	.word	0x30000003
    5960:	ff030300 	.word	0xff030300
    5964:	00fc3fc0 	.word	0x00fc3fc0
    5968:	003c0000 	.word	0x003c0000
    596c:	0300fc03 	.word	0x0300fc03
    5970:	e00300fc 	.word	0xe00300fc
    5974:	03000300 	.word	0x03000300
    5978:	03fc03e0 	.word	0x03fc03e0
    597c:	003c00fc 	.word	0x003c00fc
    5980:	3f000000 	.word	0x3f000000
    5984:	f0ff03fe 	.word	0xf0ff03fe
    5988:	03000300 	.word	0x03000300
    598c:	00f000e0 	.word	0x00f000e0
    5990:	0300e003 	.word	0x0300e003
    5994:	3ff0ff03 	.word	0x3ff0ff03
    5998:	000000fe 	.word	0x000000fe
    599c:	c0030330 	.word	0xc0030330
    59a0:	003c0ff0 	.word	0x003c0ff0
    59a4:	e0010037 	.word	0xe0010037
    59a8:	0f003b00 	.word	0x0f003b00
    59ac:	f0c0033c 	.word	0xf0c0033c
    59b0:	00000330 	.word	0x00000330
    59b4:	03003000 	.word	0x03003000
    59b8:	000f00c0 	.word	0x000f00c0
    59bc:	00003e00 	.word	0x00003e00
    59c0:	003e00ff 	.word	0x003e00ff
    59c4:	c003000f 	.word	0xc003000f
    59c8:	00003000 	.word	0x00003000
    59cc:	0f300000 	.word	0x0f300000
    59d0:	30f00103 	.word	0x30f00103
    59d4:	30070333 	.word	0x30070333
    59d8:	3803c330 	.word	0x3803c330
    59dc:	03033e30 	.word	0x03033e30
    59e0:	033030c0 	.word	0x033030c0
	...
    59ec:	ff03ff3f 	.word	0xff03ff3f
    59f0:	030330f0 	.word	0x030330f0
    59f4:	03303000 	.word	0x03303000
	...
    5a00:	00030000 	.word	0x00030000
    5a04:	00003c00 	.word	0x00003c00
    5a08:	c00300f0 	.word	0xc00300f0
    5a0c:	00000f00 	.word	0x00000f00
    5a10:	f000003c 	.word	0xf000003c
    5a14:	00000300 	.word	0x00000300
    5a18:	03000000 	.word	0x03000000
    5a1c:	03303000 	.word	0x03303000
    5a20:	3f300003 	.word	0x3f300003
    5a24:	f0ff03ff 	.word	0xf0ff03ff
	...
    5a30:	c0000000 	.word	0xc0000000
    5a34:	0f003c00 	.word	0x0f003c00
    5a38:	00c00100 	.word	0x00c00100
    5a3c:	c0010030 	.word	0xc0010030
    5a40:	00000f00 	.word	0x00000f00
    5a44:	c000003c 	.word	0xc000003c
    5a48:	00000000 	.word	0x00000000
    5a4c:	30000003 	.word	0x30000003
    5a50:	00000300 	.word	0x00000300
    5a54:	00030030 	.word	0x00030030
    5a58:	03003000 	.word	0x03003000
    5a5c:	00300000 	.word	0x00300000
    5a60:	00000003 	.word	0x00000003
    5a64:	00000000 	.word	0x00000000
    5a68:	03003000 	.word	0x03003000
    5a6c:	003c0000 	.word	0x003c0000
    5a70:	0300f000 	.word	0x0300f000
	...
    5a7c:	000c0000 	.word	0x000c0000
    5a80:	3303c000 	.word	0x3303c000
    5a84:	03303300 	.word	0x03303300
    5a88:	30330033 	.word	0x30330033
    5a8c:	3f003303 	.word	0x3f003303
    5a90:	00ff0030 	.word	0x00ff0030
    5a94:	ff3f0000 	.word	0xff3f0000
    5a98:	01f0ff03 	.word	0x01f0ff03
    5a9c:	303000ce 	.word	0x303000ce
    5aa0:	30000303 	.word	0x30000303
    5aa4:	00030330 	.word	0x00030330
    5aa8:	fc00f03c 	.word	0xfc00f03c
    5aac:	00000000 	.word	0x00000000
    5ab0:	f03f00fc 	.word	0xf03f00fc
    5ab4:	30000303 	.word	0x30000303
    5ab8:	00030330 	.word	0x00030330
    5abc:	03033030 	.word	0x03033030
    5ac0:	00300c00 	.word	0x00300c00
    5ac4:	000000c3 	.word	0x000000c3
    5ac8:	3f00fc00 	.word	0x3f00fc00
    5acc:	000303f0 	.word	0x000303f0
    5ad0:	03033030 	.word	0x03033030
    5ad4:	00303000 	.word	0x00303000
    5ad8:	f0ff03cc 	.word	0xf0ff03cc
    5adc:	0000ff3f 	.word	0x0000ff3f
    5ae0:	00fc0000 	.word	0x00fc0000
    5ae4:	3303f03f 	.word	0x3303f03f
    5ae8:	03303300 	.word	0x03303300
    5aec:	30330033 	.word	0x30330033
    5af0:	0f003303 	.word	0x0f003303
    5af4:	00f00030 	.word	0x00f00030
    5af8:	c0000000 	.word	0xc0000000
    5afc:	0f000c00 	.word	0x0f000c00
    5b00:	f0ff00ff 	.word	0xf0ff00ff
    5b04:	0c03c030 	.word	0x0c03c030
    5b08:	00003000 	.word	0x00003000
    5b0c:	000c00c0 	.word	0x000c00c0
    5b10:	00000000 	.word	0x00000000
    5b14:	ff3fc0cc 	.word	0xff3fc0cc
    5b18:	33303303 	.word	0x33303303
    5b1c:	30330333 	.word	0x30330333
    5b20:	c300333f 	.word	0xc300333f
    5b24:	030c30f0 	.word	0x030c30f0
    5b28:	0000c000 	.word	0x0000c000
    5b2c:	ff03ff3f 	.word	0xff03ff3f
    5b30:	00c000f0 	.word	0x00c000f0
    5b34:	00030030 	.word	0x00030030
    5b38:	03003000 	.word	0x03003000
    5b3c:	f00f0000 	.word	0xf00f0000
    5b40:	0000ff00 	.word	0x0000ff00
    5b44:	00000000 	.word	0x00000000
    5b48:	03033000 	.word	0x03033000
    5b4c:	33f03f03 	.word	0x33f03f03
    5b50:	300000ff 	.word	0x300000ff
    5b54:	00000300 	.word	0x00000300
    5b58:	00000000 	.word	0x00000000
    5b5c:	03000000 	.word	0x03000000
    5b60:	003f00c0 	.word	0x003f00c0
    5b64:	03003000 	.word	0x03003000
    5b68:	3f330000 	.word	0x3f330000
    5b6c:	c0ff33ff 	.word	0xc0ff33ff
    5b70:	00000000 	.word	0x00000000
    5b74:	3f000000 	.word	0x3f000000
    5b78:	f0ff03ff 	.word	0xf0ff03ff
    5b7c:	07003000 	.word	0x07003000
    5b80:	00ec0100 	.word	0x00ec0100
    5b84:	0306c038 	.word	0x0306c038
    5b88:	00300000 	.word	0x00300000
	...
    5b94:	03033000 	.word	0x03033000
    5b98:	ff3f3000 	.word	0xff3f3000
    5b9c:	00f0ff03 	.word	0x00f0ff03
    5ba0:	00000003 	.word	0x00000003
    5ba4:	00000000 	.word	0x00000000
    5ba8:	00ff0300 	.word	0x00ff0300
    5bac:	c000f03f 	.word	0xc000f03f
    5bb0:	00000700 	.word	0x00000700
    5bb4:	000c0070 	.word	0x000c0070
    5bb8:	3f008003 	.word	0x3f008003
    5bbc:	00ff00f0 	.word	0x00ff00f0
    5bc0:	ff030000 	.word	0xff030000
    5bc4:	03f00f00 	.word	0x03f00f00
    5bc8:	003000c0 	.word	0x003000c0
    5bcc:	30000003 	.word	0x30000003
    5bd0:	00000300 	.word	0x00000300
    5bd4:	ff00f00f 	.word	0xff00f00f
    5bd8:	00000000 	.word	0x00000000
    5bdc:	f03f00fc 	.word	0xf03f00fc
    5be0:	30000303 	.word	0x30000303
    5be4:	00030330 	.word	0x00030330
    5be8:	ff033030 	.word	0xff033030
    5bec:	00c00f00 	.word	0x00c00f00
    5bf0:	00000000 	.word	0x00000000
    5bf4:	0ff0ff03 	.word	0x0ff0ff03
    5bf8:	000c0300 	.word	0x000c0300
    5bfc:	0c03c030 	.word	0x0c03c030
    5c00:	03c03000 	.word	0x03c03000
    5c04:	000f000c 	.word	0x000f000c
    5c08:	0000f000 	.word	0x0000f000
    5c0c:	00f00000 	.word	0x00f00000
    5c10:	0c03000f 	.word	0x0c03000f
    5c14:	03c03000 	.word	0x03c03000
    5c18:	c030000c 	.word	0xc030000c
    5c1c:	0f000c03 	.word	0x0f000c03
    5c20:	f0ff0300 	.word	0xf0ff0300
    5c24:	ff030000 	.word	0xff030000
    5c28:	00f00f00 	.word	0x00f00f00
    5c2c:	001c00c0 	.word	0x001c00c0
    5c30:	30000003 	.word	0x30000003
    5c34:	00000300 	.word	0x00000300
    5c38:	c000001c 	.word	0xc000001c
    5c3c:	00000000 	.word	0x00000000
    5c40:	303f00c3 	.word	0x303f00c3
    5c44:	33003303 	.word	0x33003303
    5c48:	00330330 	.word	0x00330330
    5c4c:	33033033 	.word	0x33033033
    5c50:	00c00000 	.word	0x00c00000
    5c54:	0000000c 	.word	0x0000000c
    5c58:	30000003 	.word	0x30000003
    5c5c:	03fc3f00 	.word	0x03fc3f00
    5c60:	0303c0ff 	.word	0x0303c0ff
    5c64:	03303000 	.word	0x03303000
    5c68:	c000000c 	.word	0xc000000c
    5c6c:	00000000 	.word	0x00000000
    5c70:	00fc0300 	.word	0x00fc0300
    5c74:	0300f03f 	.word	0x0300f03f
    5c78:	00300000 	.word	0x00300000
    5c7c:	30000003 	.word	0x30000003
    5c80:	3f00fc03 	.word	0x3f00fc03
    5c84:	000300f0 	.word	0x000300f0
    5c88:	c0010000 	.word	0xc0010000
    5c8c:	00000e00 	.word	0x00000e00
    5c90:	e0010078 	.word	0xe0010078
    5c94:	01000f00 	.word	0x01000f00
    5c98:	007800e0 	.word	0x007800e0
    5c9c:	c001000e 	.word	0xc001000e
    5ca0:	03000000 	.word	0x03000000
    5ca4:	f03f00fc 	.word	0xf03f00fc
    5ca8:	01000300 	.word	0x01000300
    5cac:	003000c0 	.word	0x003000c0
    5cb0:	0300c001 	.word	0x0300c001
    5cb4:	03f03f00 	.word	0x03f03f00
    5cb8:	000000fc 	.word	0x000000fc
    5cbc:	1c000303 	.word	0x1c000303
    5cc0:	007800e0 	.word	0x007800e0
    5cc4:	78000003 	.word	0x78000003
    5cc8:	03e01c00 	.word	0x03e01c00
    5ccc:	00000003 	.word	0x00000003
    5cd0:	00000000 	.word	0x00000000
    5cd4:	c0f00300 	.word	0xc0f00300
    5cd8:	0c00cf3f 	.word	0x0c00cf3f
    5cdc:	00c30070 	.word	0x00c30070
    5ce0:	ff3f700c 	.word	0xff3f700c
    5ce4:	00c0ff03 	.word	0x00c0ff03
    5ce8:	00000000 	.word	0x00000000
    5cec:	03030000 	.word	0x03030000
    5cf0:	03303000 	.word	0x03303000
    5cf4:	f030000f 	.word	0xf030000f
    5cf8:	33003303 	.word	0x33003303
    5cfc:	00c30330 	.word	0x00c30330
    5d00:	0303303c 	.word	0x0303303c
	...
    5d0c:	0c00c000 	.word	0x0c00c000
    5d10:	03cc0c00 	.word	0x03cc0c00
    5d14:	03303033 	.word	0x03303033
    5d18:	30300003 	.word	0x30300003
    5d1c:	00000003 	.word	0x00000003
    5d20:	00000000 	.word	0x00000000
    5d24:	03000000 	.word	0x03000000
    5d28:	ff3ff0ff 	.word	0xff3ff0ff
	...
    5d38:	03033000 	.word	0x03033000
    5d3c:	33333000 	.word	0x33333000
    5d40:	0c303303 	.word	0x0c303303
    5d44:	000c00cc 	.word	0x000c00cc
	...
    5d50:	000f0000 	.word	0x000f0000
    5d54:	3000f003 	.word	0x3000f003
    5d58:	00800300 	.word	0x00800300
    5d5c:	7000000c 	.word	0x7000000c
    5d60:	03000300 	.word	0x03000300
    5d64:	003c00f0 	.word	0x003c00f0
	...
    5d84:	ff00f003 	.word	0xff00f003
    5d88:	030f3cc0 	.word	0x030f3cc0
    5d8c:	03303400 	.word	0x03303400
    5d90:	303000c3 	.word	0x303000c3
    5d94:	c0c00003 	.word	0xc0c00003
    5d98:	00000c0c 	.word	0x00000c0c
    5d9c:	01fc0300 	.word	0x01fc0300
    5da0:	0318f0bf 	.word	0x0318f0bf
    5da4:	00300000 	.word	0x00300000
    5da8:	30800103 	.word	0x30800103
    5dac:	3f00fc1b 	.word	0x3f00fc1b
    5db0:	000300f0 	.word	0x000300f0
    5db4:	fc000000 	.word	0xfc000000
    5db8:	03f03f00 	.word	0x03f03f00
    5dbc:	30330033 	.word	0x30330033
    5dc0:	b301330b 	.word	0xb301330b
    5dc4:	00331330 	.word	0x00331330
    5dc8:	f000300f 	.word	0xf000300f
    5dcc:	00000000 	.word	0x00000000
    5dd0:	c000000c 	.word	0xc000000c
    5dd4:	33003303 	.word	0x33003303
    5dd8:	01330b30 	.word	0x01330b30
    5ddc:	330b3033 	.word	0x330b3033
    5de0:	00303f00 	.word	0x00303f00
    5de4:	000000ff 	.word	0x000000ff
    5de8:	00000c00 	.word	0x00000c00
    5dec:	01331bc0 	.word	0x01331bc0
    5df0:	330330b3 	.word	0x330330b3
    5df4:	1b303300 	.word	0x1b303300
    5df8:	30bf0133 	.word	0x30bf0133
    5dfc:	0000ff00 	.word	0x0000ff00
    5e00:	000c0000 	.word	0x000c0000
    5e04:	3303c000 	.word	0x3303c000
    5e08:	1b303301 	.word	0x1b303301
    5e0c:	30b30033 	.word	0x30b30033
    5e10:	3f003303 	.word	0x3f003303
    5e14:	00ff0030 	.word	0x00ff0030
    5e18:	0c000000 	.word	0x0c000000
    5e1c:	03c00000 	.word	0x03c00000
    5e20:	30330333 	.word	0x30330333
    5e24:	b304334b 	.word	0xb304334b
    5e28:	00333330 	.word	0x00333330
    5e2c:	ff00303f 	.word	0xff00303f
    5e30:	00000000 	.word	0x00000000
    5e34:	f03f00fc 	.word	0xf03f00fc
    5e38:	30000303 	.word	0x30000303
    5e3c:	40030330 	.word	0x40030330
    5e40:	03033c30 	.word	0x03033c30
    5e44:	00300c00 	.word	0x00300c00
    5e48:	000000c3 	.word	0x000000c3
    5e4c:	3f00fc00 	.word	0x3f00fc00
    5e50:	003303f0 	.word	0x003303f0
    5e54:	331330b3 	.word	0x331330b3
    5e58:	0330b300 	.word	0x0330b300
    5e5c:	300f0033 	.word	0x300f0033
    5e60:	0000f000 	.word	0x0000f000
    5e64:	01fc0000 	.word	0x01fc0000
    5e68:	331bf0bf 	.word	0x331bf0bf
    5e6c:	03303300 	.word	0x03303300
    5e70:	30b30133 	.word	0x30b30133
    5e74:	0f00331b 	.word	0x0f00331b
    5e78:	00f00030 	.word	0x00f00030
    5e7c:	fc000000 	.word	0xfc000000
    5e80:	13f03f00 	.word	0x13f03f00
    5e84:	30b30133 	.word	0x30b30133
    5e88:	3300330b 	.word	0x3300330b
    5e8c:	00330330 	.word	0x00330330
    5e90:	f000300f 	.word	0xf000300f
    5e94:	00000000 	.word	0x00000000
    5e98:	30000300 	.word	0x30000300
    5e9c:	3f000333 	.word	0x3f000333
    5ea0:	03ff03f0 	.word	0x03ff03f0
    5ea4:	03303000 	.word	0x03303000
	...
    5eb4:	01030b30 	.word	0x01030b30
    5eb8:	ff0bf03f 	.word	0xff0bf03f
    5ebc:	00300000 	.word	0x00300000
    5ec0:	00000003 	.word	0x00000003
	...
    5ecc:	03133000 	.word	0x03133000
    5ed0:	0bf0bf01 	.word	0x0bf0bf01
    5ed4:	300000ff 	.word	0x300000ff
    5ed8:	00000300 	.word	0x00000300
    5edc:	00000000 	.word	0x00000000
    5ee0:	ff000000 	.word	0xff000000
    5ee4:	cff03f0c 	.word	0xcff03f0c
    5ee8:	00c30130 	.word	0x00c30130
    5eec:	c3013030 	.word	0xc3013030
    5ef0:	0c30cf00 	.word	0x0c30cf00
    5ef4:	ff00f03f 	.word	0xff00f03f
    5ef8:	00000000 	.word	0x00000000
    5efc:	f03f00ff 	.word	0xf03f00ff
    5f00:	c30b304f 	.word	0xc30b304f
    5f04:	0b30b000 	.word	0x0b30b000
    5f08:	304f00c3 	.word	0x304f00c3
    5f0c:	00f03f00 	.word	0x00f03f00
    5f10:	000000ff 	.word	0x000000ff
    5f14:	ff03ff3f 	.word	0xff03ff3f
    5f18:	07c330f0 	.word	0x07c330f0
    5f1c:	c370300c 	.word	0xc370300c
    5f20:	b0300c0b 	.word	0xb0300c0b
    5f24:	30000303 	.word	0x30000303
    5f28:	00000330 	.word	0x00000330
    5f2c:	001c0000 	.word	0x001c0000
    5f30:	3303f033 	.word	0x3303f033
    5f34:	01303f00 	.word	0x01303f00
    5f38:	e03b00ff 	.word	0xe03b00ff
    5f3c:	3b001303 	.word	0x3b001303
    5f40:	00f30330 	.word	0x00f30330
    5f44:	ff000000 	.word	0xff000000
    5f48:	0ff03f00 	.word	0x0ff03f00
    5f4c:	00c30130 	.word	0x00c30130
    5f50:	ff033030 	.word	0xff033030
    5f54:	03ff3ff0 	.word	0x03ff3ff0
    5f58:	c330300c 	.word	0xc330300c
    5f5c:	00000000 	.word	0x00000000
    5f60:	f03f00fc 	.word	0xf03f00fc
    5f64:	b0000303 	.word	0xb0000303
    5f68:	00031330 	.word	0x00031330
    5f6c:	ff0330b0 	.word	0xff0330b0
    5f70:	00c00f00 	.word	0x00c00f00
    5f74:	00000000 	.word	0x00000000
    5f78:	bf01fc00 	.word	0xbf01fc00
    5f7c:	00031bf0 	.word	0x00031bf0
    5f80:	03033030 	.word	0x03033030
    5f84:	1b30b001 	.word	0x1b30b001
    5f88:	c00f00ff 	.word	0xc00f00ff
    5f8c:	00000000 	.word	0x00000000
    5f90:	00fc0000 	.word	0x00fc0000
    5f94:	0313f03f 	.word	0x0313f03f
    5f98:	0b30b001 	.word	0x0b30b001
    5f9c:	30300003 	.word	0x30300003
    5fa0:	0f00ff03 	.word	0x0f00ff03
    5fa4:	000000c0 	.word	0x000000c0
    5fa8:	fc030000 	.word	0xfc030000
    5fac:	00f03f00 	.word	0x00f03f00
    5fb0:	30800003 	.word	0x30800003
    5fb4:	80000310 	.word	0x80000310
    5fb8:	00fc0330 	.word	0x00fc0330
    5fbc:	0300f03f 	.word	0x0300f03f
    5fc0:	03000000 	.word	0x03000000
    5fc4:	f03f00fc 	.word	0xf03f00fc
    5fc8:	00010300 	.word	0x00010300
    5fcc:	00031830 	.word	0x00031830
    5fd0:	fc033080 	.word	0xfc033080
    5fd4:	00f03f00 	.word	0x00f03f00
    5fd8:	00000003 	.word	0x00000003
    5fdc:	bfc1f003 	.word	0xbfc1f003
    5fe0:	700c18cf 	.word	0x700c18cf
    5fe4:	0c00c300 	.word	0x0c00c300
    5fe8:	1bffbf71 	.word	0x1bffbf71
    5fec:	0000c0ff 	.word	0x0000c0ff
    5ff0:	00000000 	.word	0x00000000
    5ff4:	00fc0700 	.word	0x00fc0700
    5ff8:	07dcc07f 	.word	0x07dcc07f
    5ffc:	1830800d 	.word	0x1830800d
    6000:	30800d03 	.word	0x30800d03
    6004:	7f0007dc 	.word	0x7f0007dc
    6008:	00fc07c0 	.word	0x00fc07c0
    600c:	fc1f0000 	.word	0xfc1f0000
    6010:	c0c0ff01 	.word	0xc0c0ff01
    6014:	30000c03 	.word	0x30000c03
    6018:	00000300 	.word	0x00000300
    601c:	0d03c030 	.word	0x0d03c030
    6020:	fc1fc0ff 	.word	0xfc1fc0ff
    6024:	03000000 	.word	0x03000000
    6028:	c0ff00f0 	.word	0xc0ff00f0
    602c:	c0000c0c 	.word	0xc0000c0c
    6030:	80ef7dc0 	.word	0x80ef7dc0
    6034:	0c0cc0c0 	.word	0x0c0cc0c0
    6038:	03003300 	.word	0x03003300
    603c:	00000030 	.word	0x00000030
    6040:	ff006300 	.word	0xff006300
    6044:	03ff1ff0 	.word	0x03ff1ff0
    6048:	63303086 	.word	0x63303086
    604c:	18300003 	.word	0x18300003
    6050:	30c00003 	.word	0x30c00003
    6054:	00000300 	.word	0x00000300
    6058:	03002000 	.word	0x03002000
    605c:	240e0080 	.word	0x240e0080
    6060:	00403a00 	.word	0x00403a00
    6064:	403a00ff 	.word	0x403a00ff
    6068:	8003240e 	.word	0x8003240e
    606c:	00002000 	.word	0x00002000
    6070:	ff3f0000 	.word	0xff3f0000
    6074:	31f0ff03 	.word	0x31f0ff03
    6078:	e01b0380 	.word	0xe01b0380
    607c:	1903bf31 	.word	0x1903bf31
    6080:	00933130 	.word	0x00933130
    6084:	000e00e0 	.word	0x000e00e0
    6088:	00000000 	.word	0x00000000
    608c:	fc0c00c0 	.word	0xfc0c00c0
    6090:	ffc0ff0f 	.word	0xffc0ff0f
    6094:	03c03fc0 	.word	0x03c03fc0
    6098:	c038008c 	.word	0xc038008c
    609c:	0e00e001 	.word	0x0e00e001
    60a0:	00000000 	.word	0x00000000
    60a4:	00000c00 	.word	0x00000c00
    60a8:	003303c0 	.word	0x003303c0
    60ac:	330b3033 	.word	0x330b3033
    60b0:	1330b301 	.word	0x1330b301
    60b4:	303f0033 	.word	0x303f0033
    60b8:	0000ff00 	.word	0x0000ff00
    60bc:	00000000 	.word	0x00000000
    60c0:	03033000 	.word	0x03033000
    60c4:	33f03f01 	.word	0x33f03f01
    60c8:	300002ff 	.word	0x300002ff
    60cc:	00000300 	.word	0x00000300
    60d0:	00000000 	.word	0x00000000
    60d4:	fc000000 	.word	0xfc000000
    60d8:	03f03f00 	.word	0x03f03f00
    60dc:	30b00003 	.word	0x30b00003
    60e0:	3001031b 	.word	0x3001031b
    60e4:	00ff0330 	.word	0x00ff0330
    60e8:	0000c00f 	.word	0x0000c00f
    60ec:	03000000 	.word	0x03000000
    60f0:	f03f00fc 	.word	0xf03f00fc
    60f4:	80000300 	.word	0x80000300
    60f8:	01031830 	.word	0x01031830
    60fc:	fc033000 	.word	0xfc033000
    6100:	00f03f00 	.word	0x00f03f00
    6104:	00000003 	.word	0x00000003
    6108:	0f00ff03 	.word	0x0f00ff03
    610c:	00c013f0 	.word	0x00c013f0
    6110:	000b00b0 	.word	0x000b00b0
    6114:	13003001 	.word	0x13003001
    6118:	f08f0000 	.word	0xf08f0000
    611c:	0000ff00 	.word	0x0000ff00
    6120:	0bff3f00 	.word	0x0bff3f00
    6124:	004cf0ff 	.word	0x004cf0ff
    6128:	80003004 	.word	0x80003004
    612c:	000308c0 	.word	0x000308c0
    6130:	ff030c40 	.word	0xff030c40
    6134:	00ff3ff0 	.word	0x00ff3ff0
    6138:	80000000 	.word	0x80000000
    613c:	26000800 	.word	0x26000800
    6140:	00a80280 	.word	0x00a80280
    6144:	a802802a 	.word	0xa802802a
    6148:	00801e00 	.word	0x00801e00
    614c:	80000008 	.word	0x80000008
    6150:	00000000 	.word	0x00000000
    6154:	00080080 	.word	0x00080080
    6158:	6803801c 	.word	0x6803801c
    615c:	03802200 	.word	0x03802200
    6160:	801c0068 	.word	0x801c0068
    6164:	00000800 	.word	0x00000800
    6168:	00000080 	.word	0x00000080
    616c:	00000300 	.word	0x00000300
    6170:	c00c0030 	.word	0xc00c0030
    6174:	f00ccc00 	.word	0xf00ccc00
    6178:	000ccfc0 	.word	0x000ccfc0
    617c:	3c00c000 	.word	0x3c00c000
    6180:	00000300 	.word	0x00000300
    6184:	00f00000 	.word	0x00f00000
    6188:	c000000f 	.word	0xc000000f
    618c:	00000c00 	.word	0x00000c00
    6190:	000c00c0 	.word	0x000c00c0
    6194:	0c00c000 	.word	0x0c00c000
    6198:	00c00000 	.word	0x00c00000
    619c:	c0000000 	.word	0xc0000000
    61a0:	00000c00 	.word	0x00000c00
    61a4:	000c00c0 	.word	0x000c00c0
    61a8:	0c00c000 	.word	0x0c00c000
    61ac:	00c00000 	.word	0x00c00000
    61b0:	f000000f 	.word	0xf000000f
    61b4:	00000000 	.word	0x00000000
    61b8:	000c00c0 	.word	0x000c00c0
    61bc:	0c40c400 	.word	0x0c40c400
    61c0:	c7d97ecc 	.word	0xc7d97ecc
    61c4:	de00b4ed 	.word	0xde00b4ed
    61c8:	00c40c40 	.word	0x00c40c40
    61cc:	000000c0 	.word	0x000000c0
    61d0:	0d00c000 	.word	0x0d00c000
    61d4:	00df00f0 	.word	0x00df00f0
    61d8:	c17e100c 	.word	0xc17e100c
    61dc:	00feec07 	.word	0x00feec07
    61e0:	100ce0cf 	.word	0x100ce0cf
    61e4:	0000c000 	.word	0x0000c000
	...
    61f0:	0cfccf00 	.word	0x0cfccf00
    61f4:	0000c0ff 	.word	0x0000c0ff
	...
    6200:	40000000 	.word	0x40000000
    6204:	01000a00 	.word	0x01000a00
    6208:	80240010 	.word	0x80240010
    620c:	1100a000 	.word	0x1100a000
    6210:	00080200 	.word	0x00080200
	...
    6220:	11000802 	.word	0x11000802
    6224:	00a00000 	.word	0x00a00000
    6228:	10018024 	.word	0x10018024
    622c:	00000a00 	.word	0x00000a00
    6230:	00000040 	.word	0x00000040
    6234:	82200882 	.word	0x82200882
    6238:	08822008 	.word	0x08822008
    623c:	20088220 	.word	0x20088220
    6240:	82200882 	.word	0x82200882
    6244:	08822008 	.word	0x08822008
    6248:	20088220 	.word	0x20088220
    624c:	24499282 	.word	0x24499282
    6250:	92244992 	.word	0x92244992
    6254:	49922449 	.word	0x49922449
    6258:	24499224 	.word	0x24499224
    625c:	92244992 	.word	0x92244992
    6260:	49922449 	.word	0x49922449
    6264:	b66d9224 	.word	0xb66d9224
    6268:	dbb66ddb 	.word	0xdbb66ddb
    626c:	6ddbb66d 	.word	0x6ddbb66d
    6270:	b66ddbb6 	.word	0xb66ddbb6
    6274:	dbb66ddb 	.word	0xdbb66ddb
    6278:	6ddbb66d 	.word	0x6ddbb66d
    627c:	006ddbb6 	.word	0x006ddbb6
	...
    6288:	f0ffff00 	.word	0xf0ffff00
	...
    6298:	04004000 	.word	0x04004000
    629c:	00400000 	.word	0x00400000
    62a0:	ffff0004 	.word	0xffff0004
    62a4:	000000f0 	.word	0x000000f0
	...
    62b0:	00a00000 	.word	0x00a00000
    62b4:	a000000a 	.word	0xa000000a
    62b8:	ff000a00 	.word	0xff000a00
    62bc:	0000f0ff 	.word	0x0000f0ff
	...
    62c8:	40000000 	.word	0x40000000
    62cc:	00000400 	.word	0x00000400
    62d0:	ffff0f40 	.word	0xffff0f40
    62d4:	ff0f0000 	.word	0xff0f0000
    62d8:	000000ff 	.word	0x000000ff
	...
    62e4:	00040040 	.word	0x00040040
    62e8:	07004000 	.word	0x07004000
    62ec:	004000ff 	.word	0x004000ff
    62f0:	0000ff07 	.word	0x0000ff07
	...
    62fc:	0a00a000 	.word	0x0a00a000
    6300:	00a00000 	.word	0x00a00000
    6304:	ff00000a 	.word	0xff00000a
    6308:	000000f0 	.word	0x000000f0
	...
    6314:	00a00000 	.word	0x00a00000
    6318:	a000000a 	.word	0xa000000a
    631c:	00fffb0f 	.word	0x00fffb0f
    6320:	ffff0f00 	.word	0xffff0f00
	...
    6334:	ffff0f00 	.word	0xffff0f00
    6338:	ff0f0000 	.word	0xff0f0000
    633c:	000000ff 	.word	0x000000ff
	...
    6348:	000a00a0 	.word	0x000a00a0
    634c:	0b00a000 	.word	0x0b00a000
    6350:	008000ff 	.word	0x008000ff
    6354:	0000ff0f 	.word	0x0000ff0f
	...
    6360:	0a00a000 	.word	0x0a00a000
    6364:	0fa00000 	.word	0x0fa00000
    6368:	200000fa 	.word	0x200000fa
    636c:	0000fe0f 	.word	0x0000fe0f
	...
    6378:	00400000 	.word	0x00400000
    637c:	40000004 	.word	0x40000004
    6380:	0000fc0f 	.word	0x0000fc0f
    6384:	00fc0f40 	.word	0x00fc0f40
	...
    6390:	a0000000 	.word	0xa0000000
    6394:	00000a00 	.word	0x00000a00
    6398:	000a00a0 	.word	0x000a00a0
    639c:	0000e0ff 	.word	0x0000e0ff
	...
    63ac:	00040040 	.word	0x00040040
    63b0:	04004000 	.word	0x04004000
    63b4:	f07f0000 	.word	0xf07f0000
	...
    63cc:	c0ff0000 	.word	0xc0ff0000
    63d0:	00000400 	.word	0x00000400
    63d4:	00040040 	.word	0x00040040
    63d8:	04004000 	.word	0x04004000
    63dc:	00400000 	.word	0x00400000
    63e0:	40000004 	.word	0x40000004
    63e4:	ff000400 	.word	0xff000400
    63e8:	000400c0 	.word	0x000400c0
    63ec:	04004000 	.word	0x04004000
    63f0:	00400000 	.word	0x00400000
    63f4:	40000004 	.word	0x40000004
    63f8:	00000400 	.word	0x00000400
    63fc:	00040040 	.word	0x00040040
    6400:	04f07f00 	.word	0x04f07f00
    6404:	00400000 	.word	0x00400000
    6408:	40000004 	.word	0x40000004
    640c:	00000400 	.word	0x00000400
	...
    6418:	f0ffff00 	.word	0xf0ffff00
    641c:	40000004 	.word	0x40000004
    6420:	00000400 	.word	0x00000400
    6424:	00040040 	.word	0x00040040
    6428:	04004000 	.word	0x04004000
    642c:	00400000 	.word	0x00400000
    6430:	40000004 	.word	0x40000004
    6434:	00000400 	.word	0x00000400
    6438:	00040040 	.word	0x00040040
    643c:	04004000 	.word	0x04004000
    6440:	00400000 	.word	0x00400000
    6444:	40000004 	.word	0x40000004
    6448:	ff000400 	.word	0xff000400
    644c:	0004f0ff 	.word	0x0004f0ff
    6450:	04004000 	.word	0x04004000
    6454:	00400000 	.word	0x00400000
    6458:	00000004 	.word	0x00000004
	...
    6464:	0af0ffff 	.word	0x0af0ffff
    6468:	00a00000 	.word	0x00a00000
    646c:	a000000a 	.word	0xa000000a
    6470:	00000a00 	.word	0x00000a00
    6474:	00000000 	.word	0x00000000
    6478:	ff0f0000 	.word	0xff0f0000
    647c:	0f0000ff 	.word	0x0f0000ff
    6480:	4000ffff 	.word	0x4000ffff
    6484:	00000400 	.word	0x00000400
    6488:	00040040 	.word	0x00040040
    648c:	00000000 	.word	0x00000000
    6490:	0f000000 	.word	0x0f000000
    6494:	200000fe 	.word	0x200000fe
    6498:	0000fa0f 	.word	0x0000fa0f
    649c:	000a00a0 	.word	0x000a00a0
    64a0:	0a00a000 	.word	0x0a00a000
	...
    64ac:	00ff0f00 	.word	0x00ff0f00
    64b0:	ff0b0080 	.word	0xff0b0080
    64b4:	0a00a000 	.word	0x0a00a000
    64b8:	00a00000 	.word	0x00a00000
    64bc:	a000000a 	.word	0xa000000a
    64c0:	00000a00 	.word	0x00000a00
    64c4:	00fa0fa0 	.word	0x00fa0fa0
    64c8:	fa0f2000 	.word	0xfa0f2000
    64cc:	00a00000 	.word	0x00a00000
    64d0:	a000000a 	.word	0xa000000a
    64d4:	00000a00 	.word	0x00000a00
    64d8:	000a00a0 	.word	0x000a00a0
    64dc:	0b00a000 	.word	0x0b00a000
    64e0:	008000ff 	.word	0x008000ff
    64e4:	a000ff0b 	.word	0xa000ff0b
    64e8:	00000a00 	.word	0x00000a00
    64ec:	000a00a0 	.word	0x000a00a0
    64f0:	00000000 	.word	0x00000000
    64f4:	0f000000 	.word	0x0f000000
    64f8:	0000ffff 	.word	0x0000ffff
    64fc:	00fffb0f 	.word	0x00fffb0f
    6500:	000a00a0 	.word	0x000a00a0
    6504:	0a00a000 	.word	0x0a00a000
    6508:	00a00000 	.word	0x00a00000
    650c:	a000000a 	.word	0xa000000a
    6510:	00000a00 	.word	0x00000a00
    6514:	000a00a0 	.word	0x000a00a0
    6518:	0a00a000 	.word	0x0a00a000
    651c:	00a00000 	.word	0x00a00000
    6520:	a000000a 	.word	0xa000000a
    6524:	00000a00 	.word	0x00000a00
    6528:	fffb0fa0 	.word	0xfffb0fa0
    652c:	fb0f0000 	.word	0xfb0f0000
    6530:	00a000ff 	.word	0x00a000ff
    6534:	a000000a 	.word	0xa000000a
    6538:	00000a00 	.word	0x00000a00
    653c:	000a00a0 	.word	0x000a00a0
    6540:	0a00a000 	.word	0x0a00a000
    6544:	00a0ff00 	.word	0x00a0ff00
    6548:	a000000a 	.word	0xa000000a
    654c:	00000a00 	.word	0x00000a00
    6550:	000a00a0 	.word	0x000a00a0
    6554:	04004000 	.word	0x04004000
    6558:	0f400000 	.word	0x0f400000
    655c:	400000fc 	.word	0x400000fc
    6560:	0000fc0f 	.word	0x0000fc0f
    6564:	00040040 	.word	0x00040040
    6568:	04004000 	.word	0x04004000
    656c:	00a00000 	.word	0x00a00000
    6570:	a000000a 	.word	0xa000000a
    6574:	00000a00 	.word	0x00000a00
    6578:	000af0bf 	.word	0x000af0bf
    657c:	0a00a000 	.word	0x0a00a000
    6580:	00a00000 	.word	0x00a00000
    6584:	4000000a 	.word	0x4000000a
    6588:	00000400 	.word	0x00000400
    658c:	ff070040 	.word	0xff070040
    6590:	07004000 	.word	0x07004000
    6594:	004000ff 	.word	0x004000ff
    6598:	40000004 	.word	0x40000004
    659c:	00000400 	.word	0x00000400
    65a0:	00000000 	.word	0x00000000
    65a4:	fc0f0000 	.word	0xfc0f0000
    65a8:	0f400000 	.word	0x0f400000
    65ac:	400000fc 	.word	0x400000fc
    65b0:	00000400 	.word	0x00000400
    65b4:	00040040 	.word	0x00040040
	...
    65c0:	e0ff0000 	.word	0xe0ff0000
    65c4:	00000a00 	.word	0x00000a00
    65c8:	000a00a0 	.word	0x000a00a0
    65cc:	0a00a000 	.word	0x0a00a000
	...
    65dc:	000af0ff 	.word	0x000af0ff
    65e0:	0a00a000 	.word	0x0a00a000
    65e4:	00a00000 	.word	0x00a00000
    65e8:	0000000a 	.word	0x0000000a
    65ec:	00000000 	.word	0x00000000
    65f0:	ff070000 	.word	0xff070000
    65f4:	07004000 	.word	0x07004000
    65f8:	004000ff 	.word	0x004000ff
    65fc:	40000004 	.word	0x40000004
    6600:	00000400 	.word	0x00000400
    6604:	00040040 	.word	0x00040040
    6608:	ff0f4000 	.word	0xff0f4000
    660c:	0f4000ff 	.word	0x0f4000ff
    6610:	4000ffff 	.word	0x4000ffff
    6614:	00000400 	.word	0x00000400
    6618:	00040040 	.word	0x00040040
    661c:	0a00a000 	.word	0x0a00a000
    6620:	00a00000 	.word	0x00a00000
    6624:	ffff000a 	.word	0xffff000a
    6628:	00000af0 	.word	0x00000af0
    662c:	000a00a0 	.word	0x000a00a0
    6630:	0a00a000 	.word	0x0a00a000
    6634:	00400000 	.word	0x00400000
    6638:	40000004 	.word	0x40000004
    663c:	ff000400 	.word	0xff000400
    6640:	000000c0 	.word	0x000000c0
	...
    6658:	04f07f00 	.word	0x04f07f00
    665c:	00400000 	.word	0x00400000
    6660:	40000004 	.word	0x40000004
    6664:	ff000400 	.word	0xff000400
    6668:	ffffffff 	.word	0xffffffff
    666c:	ffffffff 	.word	0xffffffff
    6670:	ffffffff 	.word	0xffffffff
    6674:	ffffffff 	.word	0xffffffff
    6678:	ffffffff 	.word	0xffffffff
    667c:	ffffffff 	.word	0xffffffff
    6680:	07f07f00 	.word	0x07f07f00
    6684:	f07f00ff 	.word	0xf07f00ff
    6688:	7f00ff07 	.word	0x7f00ff07
    668c:	00ff07f0 	.word	0x00ff07f0
    6690:	ff07f07f 	.word	0xff07f07f
    6694:	07f07f00 	.word	0x07f07f00
    6698:	ffffffff 	.word	0xffffffff
    669c:	ffffffff 	.word	0xffffffff
    66a0:	ffffffff 	.word	0xffffffff
    66a4:	0000f0ff 	.word	0x0000f0ff
	...
    66bc:	ffffffff 	.word	0xffffffff
    66c0:	ffffffff 	.word	0xffffffff
    66c4:	ffffffff 	.word	0xffffffff
    66c8:	ffffffff 	.word	0xffffffff
    66cc:	00fc0fc0 	.word	0x00fc0fc0
    66d0:	fc0fc0ff 	.word	0xfc0fc0ff
    66d4:	0fc0ff00 	.word	0x0fc0ff00
    66d8:	c0ff00fc 	.word	0xc0ff00fc
    66dc:	ff00fc0f 	.word	0xff00fc0f
    66e0:	00fc0fc0 	.word	0x00fc0fc0
    66e4:	03003c00 	.word	0x03003c00
    66e8:	00c300c0 	.word	0x00c300c0
    66ec:	c300300c 	.word	0xc300300c
    66f0:	00200400 	.word	0x00200400
    66f4:	2004003c 	.word	0x2004003c
    66f8:	00008100 	.word	0x00008100
    66fc:	00010000 	.word	0x00010000
    6700:	ff0ff07f 	.word	0xff0ff07f
    6704:	08108c00 	.word	0x08108c00
    6708:	30de00c1 	.word	0x30de00c1
    670c:	01003707 	.word	0x01003707
    6710:	000000c0 	.word	0x000000c0
    6714:	01080000 	.word	0x01080000
    6718:	0ff0ff00 	.word	0x0ff0ff00
    671c:	10c000ff 	.word	0x10c000ff
    6720:	c000000c 	.word	0xc000000c
    6724:	00800f00 	.word	0x00800f00
    6728:	000000f8 	.word	0x000000f8
    672c:	00000000 	.word	0x00000000
    6730:	f00f0081 	.word	0xf00f0081
    6734:	0c00ff00 	.word	0x0c00ff00
    6738:	00c00000 	.word	0x00c00000
    673c:	ff00000c 	.word	0xff00000c
    6740:	00f00f00 	.word	0x00f00f00
    6744:	00000081 	.word	0x00000081
    6748:	61030f3c 	.word	0x61030f3c
    674c:	033333b0 	.word	0x033333b0
    6750:	c330301e 	.word	0xc330301e
    6754:	30300003 	.word	0x30300003
    6758:	30000303 	.word	0x30000303
    675c:	00000738 	.word	0x00000738
    6760:	00fc0000 	.word	0x00fc0000
    6764:	0303f03f 	.word	0x0303f03f
    6768:	03303000 	.word	0x03303000
    676c:	30300003 	.word	0x30300003
    6770:	3f00ff03 	.word	0x3f00ff03
    6774:	000003c0 	.word	0x000003c0
    6778:	ff030000 	.word	0xff030000
    677c:	00fe3fe0 	.word	0x00fe3fe0
    6780:	30000003 	.word	0x30000003
    6784:	00000300 	.word	0x00000300
    6788:	00fc0330 	.word	0x00fc0330
    678c:	0300f03f 	.word	0x0300f03f
    6790:	03000000 	.word	0x03000000
    6794:	00380000 	.word	0x00380000
    6798:	0f00c001 	.word	0x0f00c001
    679c:	00ff03f0 	.word	0x00ff03f0
    67a0:	80030030 	.word	0x80030030
    67a4:	00001c00 	.word	0x00001c00
    67a8:	000000c0 	.word	0x000000c0
    67ac:	5f80fc04 	.word	0x5f80fc04
    67b0:	800307e8 	.word	0x800307e8
    67b4:	03073870 	.word	0x03073870
    67b8:	05387080 	.word	0x05387080
    67bc:	c84f80fe 	.word	0xc84f80fe
    67c0:	00000000 	.word	0x00000000
    67c4:	00f00300 	.word	0x00f00300
    67c8:	cf3cc0ff 	.word	0xcf3cc0ff
    67cc:	30300c03 	.word	0x30300c03
    67d0:	300c03c3 	.word	0x300c03c3
    67d4:	ff00cf3c 	.word	0xff00cf3c
    67d8:	00f003c0 	.word	0x00f003c0
    67dc:	f90f0000 	.word	0xf90f0000
    67e0:	38f0ff01 	.word	0x38f0ff01
    67e4:	0000031f 	.word	0x0000031f
    67e8:	00030030 	.word	0x00030030
    67ec:	011f3800 	.word	0x011f3800
    67f0:	f90ff0ff 	.word	0xf90ff0ff
    67f4:	00000000 	.word	0x00000000
    67f8:	f03f00fc 	.word	0xf03f00fc
    67fc:	b0030333 	.word	0xb0030333
    6800:	03033f30 	.word	0x03033f30
    6804:	ff333070 	.word	0xff333070
    6808:	30c00f03 	.word	0x30c00f03
    680c:	00000000 	.word	0x00000000
    6810:	1000f800 	.word	0x1000f800
    6814:	00020240 	.word	0x00020240
    6818:	f8004010 	.word	0xf8004010
    681c:	02401000 	.word	0x02401000
    6820:	40100002 	.word	0x40100002
    6824:	0000f800 	.word	0x0000f800
    6828:	00fd0100 	.word	0x00fd0100
    682c:	0e027030 	.word	0x0e027030
    6830:	04b06100 	.word	0x04b06100
    6834:	306c0071 	.word	0x306c0071
    6838:	70008203 	.word	0x70008203
    683c:	00fc0560 	.word	0x00fc0560
    6840:	f0030000 	.word	0xf0030000
    6844:	3cc0ff00 	.word	0x3cc0ff00
    6848:	300c03cf 	.word	0x300c03cf
    684c:	0c03c330 	.word	0x0c03c330
    6850:	00033030 	.word	0x00033030
    6854:	00000000 	.word	0x00000000
    6858:	03000000 	.word	0x03000000
    685c:	fc3fc0ff 	.word	0xfc3fc0ff
    6860:	c000000c 	.word	0xc000000c
    6864:	00000c00 	.word	0x00000c00
    6868:	000c00c0 	.word	0x000c00c0
    686c:	03fc3f00 	.word	0x03fc3f00
    6870:	0000c0ff 	.word	0x0000c0ff
    6874:	33003303 	.word	0x33003303
    6878:	00330330 	.word	0x00330330
    687c:	33033033 	.word	0x33033033
    6880:	03303300 	.word	0x03303300
    6884:	30330033 	.word	0x30330033
    6888:	00003303 	.word	0x00003303
    688c:	00c10000 	.word	0x00c10000
    6890:	c100100c 	.word	0xc100100c
    6894:	0f100c00 	.word	0x0f100c00
    6898:	100c00fd 	.word	0x100c00fd
    689c:	0c00c100 	.word	0x0c00c100
    68a0:	00c10010 	.word	0x00c10010
    68a4:	03300000 	.word	0x03300000
    68a8:	0c360063 	.word	0x0c360063
    68ac:	c6c0600c 	.word	0xc6c0600c
    68b0:	33603003 	.word	0x33603003
    68b4:	60c00006 	.word	0x60c00006
    68b8:	0000060c 	.word	0x0000060c
    68bc:	00000000 	.word	0x00000000
    68c0:	060c60c0 	.word	0x060c60c0
    68c4:	33603003 	.word	0x33603003
    68c8:	600c0c06 	.word	0x600c0c06
    68cc:	0330c6c0 	.word	0x0330c6c0
    68d0:	00360063 	.word	0x00360063
	...
    68e0:	ff7f0000 	.word	0xff7f0000
    68e4:	800000fc 	.word	0x800000fc
    68e8:	00000c00 	.word	0x00000c00
    68ec:	00000060 	.word	0x00000060
    68f0:	60000000 	.word	0x60000000
    68f4:	00000100 	.word	0x00000100
    68f8:	ff060010 	.word	0xff060010
    68fc:	000080ff 	.word	0x000080ff
	...
    6908:	c0000000 	.word	0xc0000000
    690c:	00000c00 	.word	0x00000c00
    6910:	c0cc00c0 	.word	0xc0cc00c0
    6914:	0c00cc0c 	.word	0x0c00cc0c
    6918:	00c00000 	.word	0x00c00000
    691c:	c000000c 	.word	0xc000000c
    6920:	03000000 	.word	0x03000000
    6924:	00660030 	.word	0x00660030
    6928:	66006006 	.word	0x66006006
    692c:	00300300 	.word	0x00300300
    6930:	98018019 	.word	0x98018019
    6934:	03801900 	.word	0x03801900
    6938:	00000030 	.word	0x00000030
    693c:	00000000 	.word	0x00000000
    6940:	01000c00 	.word	0x01000c00
    6944:	00120020 	.word	0x00120020
    6948:	0000c000 	.word	0x0000c000
	...
    6958:	0e000000 	.word	0x0e000000
    695c:	00e00000 	.word	0x00e00000
    6960:	0000000e 	.word	0x0000000e
	...
    6974:	30000000 	.word	0x30000000
    6978:	00000300 	.word	0x00000300
	...
    6988:	80030020 	.word	0x80030020
    698c:	03000700 	.word	0x03000700
    6990:	00c001c0 	.word	0x00c001c0
    6994:	001000e0 	.word	0x001000e0
    6998:	10000001 	.word	0x10000001
    699c:	00000100 	.word	0x00000100
    69a0:	00000000 	.word	0x00000000
    69a4:	03007e00 	.word	0x03007e00
    69a8:	006000e0 	.word	0x006000e0
    69ac:	60000006 	.word	0x60000006
    69b0:	00e00700 	.word	0x00e00700
    69b4:	0000001e 	.word	0x0000001e
    69b8:	00000000 	.word	0x00000000
    69bc:	80210000 	.word	0x80210000
    69c0:	67003806 	.word	0x67003806
    69c4:	00e80680 	.word	0x00e80680
    69c8:	8803807c 	.word	0x8803807c
    69cc:	00000000 	.word	0x00000000
    69d0:	ff000000 	.word	0xff000000
    69d4:	00f00f00 	.word	0x00f00f00
    69d8:	f00f00ff 	.word	0xf00f00ff
    69dc:	0f00ff00 	.word	0x0f00ff00
    69e0:	000000f0 	.word	0x000000f0
	...
    6a04:	000a000a 	.word	0x000a000a
    6a08:	00140014 	.word	0x00140014
    6a0c:	00000014 	.word	0x00000014
    6a10:	000a017c 	.word	0x000a017c
    6a14:	000a017c 	.word	0x000a017c
    6a18:	00140186 	.word	0x00140186
    6a1c:	00140000 	.word	0x00140000
    6a20:	0122000a 	.word	0x0122000a
    6a24:	00140186 	.word	0x00140186
    6a28:	01220190 	.word	0x01220190
    6a2c:	0122000a 	.word	0x0122000a
    6a30:	012c0014 	.word	0x012c0014
    6a34:	0122017c 	.word	0x0122017c
    6a38:	012c0186 	.word	0x012c0186
    6a3c:	012c0014 	.word	0x012c0014
    6a40:	0136017c 	.word	0x0136017c
    6a44:	001e0000 	.word	0x001e0000
    6a48:	00280032 	.word	0x00280032
    6a4c:	00320000 	.word	0x00320000
    6a50:	003c0032 	.word	0x003c0032
    6a54:	001e0050 	.word	0x001e0050
    6a58:	00280118 	.word	0x00280118
    6a5c:	00280046 	.word	0x00280046
    6a60:	00be0050 	.word	0x00be0050
    6a64:	00be0050 	.word	0x00be0050
    6a68:	00c80118 	.word	0x00c80118
    6a6c:	00280118 	.word	0x00280118
    6a70:	00be0122 	.word	0x00be0122
    6a74:	00460000 	.word	0x00460000
    6a78:	00500032 	.word	0x00500032
    6a7c:	005a0000 	.word	0x005a0000
    6a80:	00640032 	.word	0x00640032
    6a84:	006e0000 	.word	0x006e0000
    6a88:	00780032 	.word	0x00780032
    6a8c:	00820000 	.word	0x00820000
    6a90:	008c0032 	.word	0x008c0032
    6a94:	00960000 	.word	0x00960000
    6a98:	00a00032 	.word	0x00a00032
    6a9c:	00aa0000 	.word	0x00aa0000
    6aa0:	00b40032 	.word	0x00b40032
    6aa4:	00be0000 	.word	0x00be0000
    6aa8:	00c80032 	.word	0x00c80032
    6aac:	00c8012c 	.word	0x00c8012c
    6ab0:	00d20172 	.word	0x00d20172
    6ab4:	00dc001e 	.word	0x00dc001e
    6ab8:	00e60172 	.word	0x00e60172
    6abc:	00f0001e 	.word	0x00f0001e
    6ac0:	00fa0172 	.word	0x00fa0172
    6ac4:	0104001e 	.word	0x0104001e
    6ac8:	010e0172 	.word	0x010e0172
    6acc:	0118005a 	.word	0x0118005a
    6ad0:	0122012c 	.word	0x0122012c
    6ad4:	82be50b4 	.word	0x82be50b4
    6ad8:	8cbe82aa 	.word	0x8cbe82aa
    6adc:	64963c8c 	.word	0x64963c8c
    6ae0:	64dc3cd2 	.word	0x64dc3cd2
    6ae4:	a08c9682 	.word	0xa08c9682
    6ae8:	aadca08c 	.word	0xaadca08c
    6aec:	a0e696dc 	.word	0xa0e696dc
    6af0:	50f03c78 	.word	0x50f03c78
    6af4:	5a78466e 	.word	0x5a78466e
    6af8:	aaaa3c96 	.word	0xaaaa3c96
    6afc:	a0dc3cc8 	.word	0xa0dc3cc8
    6b00:	aae6a0d2 	.word	0xaae6a0d2
    6b04:	ffffffff 	.word	0xffffffff
    6b08:	677537ff 	.word	0x677537ff
    6b0c:	71312c6a 	.word	0x71312c6a
    6b10:	38ffffff 	.word	0x38ffffff
    6b14:	ff6b6869 	.word	0xff6b6869
    6b18:	7aff7732 	.word	0x7aff7732
    6b1c:	6f3039ff 	.word	0x6f3039ff
    6b20:	65332e6c 	.word	0x65332e6c
    6b24:	ffff7861 	.word	0xffff7861
    6b28:	2f3b702d 	.word	0x2f3b702d
    6b2c:	63737234 	.word	0x63737234
    6b30:	5b3dff20 	.word	0x5b3dff20
    6b34:	7435ff27 	.word	0x7435ff27
    6b38:	ff6e7664 	.word	0xff6e7664
    6b3c:	5cff5d27 	.word	0x5cff5d27
    6b40:	62667936 	.word	0x62667936
    6b44:	ffffff6d 	.word	0xffffff6d
    6b48:	0000ffff 	.word	0x0000ffff
    6b4c:	ffffffff 	.word	0xffffffff
    6b50:	475526ff 	.word	0x475526ff
    6b54:	51213c4a 	.word	0x51213c4a
    6b58:	2affffff 	.word	0x2affffff
    6b5c:	ff4b4849 	.word	0xff4b4849
    6b60:	5aff5740 	.word	0x5aff5740
    6b64:	4f2928ff 	.word	0x4f2928ff
    6b68:	45233e4c 	.word	0x45233e4c
    6b6c:	ffff5841 	.word	0xffff5841
    6b70:	3f3a505f 	.word	0x3f3a505f
    6b74:	43535224 	.word	0x43535224
    6b78:	7b2bff20 	.word	0x7b2bff20
    6b7c:	5425ff22 	.word	0x5425ff22
    6b80:	ff4e5644 	.word	0xff4e5644
    6b84:	7cff7d7e 	.word	0x7cff7d7e
    6b88:	4246595e 	.word	0x4246595e
    6b8c:	ffffff4d 	.word	0xffffff4d
    6b90:	0000ffff 	.word	0x0000ffff

00006b94 <beelzebub.13339>:
    6b94:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    6ba4:	64012201 d4019201 08020702 5f023402     .".d.........4._
    6bb4:	94027802 bb02a602 db02ca02 f902e802     .x..............
    6bc4:	7f031f03                                ....

00006bc8 <belial.13336>:
    6bc8:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    6bd8:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    6be8:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    6bf8:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    6c08:	35c9c9c9 0000363a                       ...5:6..

00006c10 <lucifer.13338>:
    6c10:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    6c20:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    6c30:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6c40:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6c50:	00505050 00000055 6c6c6548 6f57206f     PPP.U...Hello Wo
    6c60:	0a646c72 0000000d                       rld.....

00006c68 <mulciber.13337>:
    6c68:	03020100 02010004 00020100 01000201     ................
    6c78:	02010002 00020100 01000201 01000002     ................
    6c88:	02010000 00020100 01000201 03020100     ................
    6c98:	00000004 01000100 01000302 02010002     ................
    6ca8:	00000403 00000000 09206925 00000000     ........%i .....
    6cb8:	00000d0a 78696e55 6f706520 6d206863     ....Unix epoch m
    6cc8:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    6cd8:	355e3331 31202b20 20355e36 3731203d     13^5 + 16^5 = 17
    6ce8:	0000355e 69746552 616c7563 676e6974     ^5..Reticulating
    6cf8:	6c705320 73656e69 00000000 6c6f6956      Splines....Viol
    6d08:	65636e65 726f7720 0000736b 73626154     ence works..Tabs
    6d18:	00000021 6c6c694b 6c694220 6e6f696c     !...Kill Billion
    6d28:	65726961 61282073 5420646e 6c6c6972     aires (and Trill
    6d38:	616e6f69 29657269 00000000 65746e49     ionaire)....Inte
    6d48:	74736572 206e6920 68636574 6f6c6f6e     rest in technolo
    6d58:	69207967 6f6e2073 20612074 73726570     gy is not a pers
    6d68:	6c616e6f 00797469 50203031 544e4952     onality.10 PRINT
    6d78:	52484320 30322824 2b352e35 28444e52      CHR$(205.5+RND(
    6d88:	3b292931 47203a20 204f544f 00003031     1)); : GOTO 10..
    6d98:	67206f4e 2e73646f 206f4e20 7473616d     No gods. No mast
    6da8:	2e737265 206f4e20 65747865 6c616e72     ers. No external
    6db8:	62696c20 69726172 002e7365 63617053      libraries..Spac
    6dc8:	00217365 6e616954 656d6e61 7153206e     es!.Tiananmen Sq
    6dd8:	65726175 38393120 00000039 72656d41     uare 1989...Amer
    6de8:	20616369 20736177 6e756f66 20646564     ica was founded 
    6df8:	73206e6f 6576616c 00007972 72656854     on slavery..Ther
    6e08:	73692065 6c6e6f20 61632079 61746970     e is only capita
    6e18:	6e61206c 616c2064 00726f62 6f636e45     l and labor.Enco
    6e28:	67617275 79732065 74656d6d 20636972     urage symmetric 
    6e38:	73616c63 61772073 72616672 00000065     class warfare...
    6e48:	52554324 544e4552 4d454d5f 00000045     $CURRENT_MEME...
    6e58:	694e2041 54206563 00005954 6e617254     A Nice TTY..Tran
    6e68:	69722073 73746867 65726120 6d756820     s rights are hum
    6e78:	72206e61 74686769 00000073 3d202069     an rights...i  =
    6e88:	35783020 35373366 20666439 2028202d      0x5f3759df - ( 
    6e98:	3e3e2069 29203120 0000003b 42414341     i >> 1 );...ACAB
    6ea8:	00000000 63666544 73276e6f 6e616320     ....Defcon's can
    6eb8:	656c6563 00002e64 73746152 7473656e     celed...Ratsnest
    6ec8:	6f4e203a 6e696874 6f542067 216f4420     : Nothing To Do!
    6ed8:	00000000 68207449 36207361 656b2039     ....It has 69 ke
    6ee8:	002e7379 61636542 20657375 342d5456     ys..Because VT-4
    6ef8:	77203032 61207361 6165726c 74207964     20 was already t
    6f08:	6e656b61 00000000 706d6f43 73736572     aken....Compress
    6f18:	206e6f69 6f676c61 68746972 6162206d     ion algorithm ba
    6f28:	20646573 42206e6f 28205042 37393931     sed on BBP (1997
    6f38:	00000029 656d6954 61727420 206c6576     )...Time travel 
    6f48:	53206e69 20726174 6b657254 20736920     in Star Trek is 
    6f58:	6d6d6f63 79206e6f 61207465 736f6d6c     common yet almos
    6f68:	6c612074 73796177 63636120 6e656469     t always acciden
    6f78:	006c6174 6566664f 7669736e 61682065     tal.Offensive ha
    6f88:	61776472 00006572 6c6c6f46 5720776f     rdware..Follow W
    6f98:	646c726f 676f5020 64654620 74617265     orld Pog Federat
    6fa8:	206e6f69 40202020 6c726f57 676f5064     ion    @WorldPog
    6fb8:	00000000 6d6d7544 68742079 20636369     ....Dummy thicc 
    6fc8:	65696c63 0000746e 694e2041 54206563     client..A Nice T
    6fd8:	202e5954 4f206e41 6f43204b 7475706d     TY. An OK Comput
    6fe8:	002e7265 41632049 704f206e 41206e45     er..I cAn OpEn A
    6ff8:	436f4c20 6957206b 41206854 644f7320      LoCk WiTh A sOd
    7008:	41632041 0000006e 696c6f53 69726164     A cAn...Solidari
    7018:	69207974 6f6e2073 20612074 2077656e     ty is not a new 
    7028:	6d617266 726f7765 0000006b 61657242     framework...Brea
    7038:	616f6264 6e696472 73492067 746f4e20     dboarding Is Not
    7048:	43204120 656d6972 00000000 2066664f      A Crime....Off 
    7058:	6f207962 6520656e 726f7272 72612073     by one errors ar
    7068:	6f632065 6e6f6d6d 00000000              e common....

00007074 <_global_impure_ptr>:
    7074:	2000003c                                <.. 

00007078 <__sf_fake_stderr>:
	...

00007098 <__sf_fake_stdin>:
	...

000070b8 <__sf_fake_stdout>:
	...
    70d8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    70e8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    70f8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7108:	00006665                                ef..

0000710c <_init>:
    710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    710e:	46c0      	nop			; (mov r8, r8)
    7110:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7112:	bc08      	pop	{r3}
    7114:	469e      	mov	lr, r3
    7116:	4770      	bx	lr

00007118 <__init_array_start>:
    7118:	000000dd 	.word	0x000000dd

0000711c <_fini>:
    711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    711e:	46c0      	nop			; (mov r8, r8)
    7120:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7122:	bc08      	pop	{r3}
    7124:	469e      	mov	lr, r3
    7126:	4770      	bx	lr

00007128 <__fini_array_start>:
    7128:	000000b5 	.word	0x000000b5
