
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006dc0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001c8  20000000  00006dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000908  200001c8  00006f88  000201c8  2**2
                  ALLOC
  3 .stack        00002000  20000ad0  00007890  000201c8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003a071  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005731  00000000  00000000  0005a2ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000690a  00000000  00000000  0005f9eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000780  00000000  00000000  000662f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008d0  00000000  00000000  00066a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f2fa  00000000  00000000  00067345  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013dd7  00000000  00000000  0008663f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009033b  00000000  00000000  0009a416  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001a30  00000000  00000000  0012a754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	d0 2a 00 20 ed 1f 00 00 e9 1f 00 00 e9 1f 00 00     .*. ............
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	e9 1f 00 00 00 00 00 00 00 00 00 00 e9 1f 00 00     ................
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	11 31 00 00 e9 1f 00 00 e9 1f 00 00 e9 1f 00 00     .1..............
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	e9 1f 00 00 e9 1f 00 00 e9 1f 00 00 e9 1f 00 00     ................
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	e9 1f 00 00 e9 1f 00 00 05 12 00 00 15 12 00 00     ................
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	25 12 00 00 35 12 00 00 45 12 00 00 55 12 00 00     %...5...E...U...
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	e9 1f 00 00 e9 1f 00 00 e9 1f 00 00 e9 1f 00 00     ................
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	e9 1f 00 00 e9 1f 00 00 e9 1f 00 00 e9 1f 00 00     ................
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	39 0d 00 00 e9 1f 00 00 e9 1f 00 00 e9 1f 00 00     9...............
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	e9 1f 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001c8 	.word	0x200001c8
      d4:	00000000 	.word	0x00000000
      d8:	00006dc0 	.word	0x00006dc0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001cc 	.word	0x200001cc
     108:	00006dc0 	.word	0x00006dc0
     10c:	00006dc0 	.word	0x00006dc0
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	00003871 	.word	0x00003871

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	000037c9 	.word	0x000037c9

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	000037c9 	.word	0x000037c9

000001d0 <nextTab>:
		}
	}
}

int nextTab(int a) 
{
     1d0:	b510      	push	{r4, lr}
     1d2:	b0d0      	sub	sp, #320	; 0x140
     1d4:	0004      	movs	r4, r0
	int tabArray[] =
     1d6:	22a0      	movs	r2, #160	; 0xa0
     1d8:	0052      	lsls	r2, r2, #1
     1da:	4904      	ldr	r1, [pc, #16]	; (1ec <nextTab+0x1c>)
     1dc:	4668      	mov	r0, sp
     1de:	4b04      	ldr	r3, [pc, #16]	; (1f0 <nextTab+0x20>)
     1e0:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
     1e2:	00a4      	lsls	r4, r4, #2
     1e4:	466b      	mov	r3, sp
     1e6:	58e0      	ldr	r0, [r4, r3]
}
     1e8:	b050      	add	sp, #320	; 0x140
     1ea:	bd10      	pop	{r4, pc}
     1ec:	000049f0 	.word	0x000049f0
     1f0:	00003885 	.word	0x00003885

000001f4 <parseChar>:
{
     1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f6:	46c6      	mov	lr, r8
     1f8:	b500      	push	{lr}
	if(character == 0x00)							//NUL 0x00 DO NOTHING
     1fa:	2807      	cmp	r0, #7
     1fc:	d934      	bls.n	268 <parseChar+0x74>
	else if(character == 0x08)						//BS 0x08 Backspace
     1fe:	2808      	cmp	r0, #8
     200:	d02e      	beq.n	260 <parseChar+0x6c>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
     202:	2809      	cmp	r0, #9
     204:	d04c      	beq.n	2a0 <parseChar+0xac>
	else if(character == 0x0A)						//LF 0x0A Line Feed
     206:	280a      	cmp	r0, #10
     208:	d100      	bne.n	20c <parseChar+0x18>
     20a:	e06b      	b.n	2e4 <parseChar+0xf0>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
     20c:	280b      	cmp	r0, #11
     20e:	d100      	bne.n	212 <parseChar+0x1e>
     210:	e0bf      	b.n	392 <parseChar+0x19e>
	else if(character == 0x0C)						//FF 0x0C Form Feed
     212:	280c      	cmp	r0, #12
     214:	d028      	beq.n	268 <parseChar+0x74>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
     216:	280d      	cmp	r0, #13
     218:	d100      	bne.n	21c <parseChar+0x28>
     21a:	e112      	b.n	442 <parseChar+0x24e>
	else if(character == 0x0E)						//SO 0x0E Shift Out
     21c:	0003      	movs	r3, r0
     21e:	3b0e      	subs	r3, #14
     220:	2b11      	cmp	r3, #17
     222:	d921      	bls.n	268 <parseChar+0x74>
	else if(character == 0x7F)						//DEL 0x7F Delete
     224:	287f      	cmp	r0, #127	; 0x7f
     226:	d01f      	beq.n	268 <parseChar+0x74>
		consoleDisplay[xCharPos][yCharPos] = character;
     228:	4d99      	ldr	r5, [pc, #612]	; (490 <parseChar+0x29c>)
     22a:	4c9a      	ldr	r4, [pc, #616]	; (494 <parseChar+0x2a0>)
     22c:	8823      	ldrh	r3, [r4, #0]
     22e:	4f9a      	ldr	r7, [pc, #616]	; (498 <parseChar+0x2a4>)
     230:	883a      	ldrh	r2, [r7, #0]
     232:	2618      	movs	r6, #24
     234:	4373      	muls	r3, r6
     236:	18eb      	adds	r3, r5, r3
     238:	5498      	strb	r0, [r3, r2]
		drawChar(character);
     23a:	4b98      	ldr	r3, [pc, #608]	; (49c <parseChar+0x2a8>)
     23c:	4698      	mov	r8, r3
     23e:	4798      	blx	r3
		xCharPos++;
     240:	8823      	ldrh	r3, [r4, #0]
     242:	3301      	adds	r3, #1
     244:	b29b      	uxth	r3, r3
     246:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     248:	883a      	ldrh	r2, [r7, #0]
     24a:	4373      	muls	r3, r6
     24c:	18ed      	adds	r5, r5, r3
     24e:	5ca8      	ldrb	r0, [r5, r2]
     250:	47c0      	blx	r8
		if(xCharPos > 79)		//END OF LINE
     252:	8823      	ldrh	r3, [r4, #0]
     254:	2b4f      	cmp	r3, #79	; 0x4f
     256:	d907      	bls.n	268 <parseChar+0x74>
			xCharPos--;
     258:	3b01      	subs	r3, #1
     25a:	4a8e      	ldr	r2, [pc, #568]	; (494 <parseChar+0x2a0>)
     25c:	8013      	strh	r3, [r2, #0]
}
     25e:	e003      	b.n	268 <parseChar+0x74>
		if(xCharPos > 0)
     260:	4b8c      	ldr	r3, [pc, #560]	; (494 <parseChar+0x2a0>)
     262:	881b      	ldrh	r3, [r3, #0]
     264:	2b00      	cmp	r3, #0
     266:	d102      	bne.n	26e <parseChar+0x7a>
}
     268:	bc04      	pop	{r2}
     26a:	4690      	mov	r8, r2
     26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     26e:	4c88      	ldr	r4, [pc, #544]	; (490 <parseChar+0x29c>)
     270:	4d89      	ldr	r5, [pc, #548]	; (498 <parseChar+0x2a4>)
     272:	8829      	ldrh	r1, [r5, #0]
     274:	005a      	lsls	r2, r3, #1
     276:	18d3      	adds	r3, r2, r3
     278:	00db      	lsls	r3, r3, #3
     27a:	18e3      	adds	r3, r4, r3
     27c:	5c58      	ldrb	r0, [r3, r1]
     27e:	4e87      	ldr	r6, [pc, #540]	; (49c <parseChar+0x2a8>)
     280:	47b0      	blx	r6
			xCharPos--;
     282:	4a84      	ldr	r2, [pc, #528]	; (494 <parseChar+0x2a0>)
     284:	8813      	ldrh	r3, [r2, #0]
     286:	3b01      	subs	r3, #1
     288:	b29b      	uxth	r3, r3
     28a:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     28c:	8829      	ldrh	r1, [r5, #0]
     28e:	005a      	lsls	r2, r3, #1
     290:	18d3      	adds	r3, r2, r3
     292:	00db      	lsls	r3, r3, #3
     294:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
     296:	5c58      	ldrb	r0, [r3, r1]
     298:	47b0      	blx	r6
			blinkCursor();	
     29a:	4b81      	ldr	r3, [pc, #516]	; (4a0 <parseChar+0x2ac>)
     29c:	4798      	blx	r3
     29e:	e7e3      	b.n	268 <parseChar+0x74>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     2a0:	4c7c      	ldr	r4, [pc, #496]	; (494 <parseChar+0x2a0>)
     2a2:	8822      	ldrh	r2, [r4, #0]
     2a4:	4b7c      	ldr	r3, [pc, #496]	; (498 <parseChar+0x2a4>)
     2a6:	8819      	ldrh	r1, [r3, #0]
     2a8:	0053      	lsls	r3, r2, #1
     2aa:	189b      	adds	r3, r3, r2
     2ac:	00db      	lsls	r3, r3, #3
     2ae:	4a78      	ldr	r2, [pc, #480]	; (490 <parseChar+0x29c>)
     2b0:	18d3      	adds	r3, r2, r3
     2b2:	5c58      	ldrb	r0, [r3, r1]
     2b4:	4b79      	ldr	r3, [pc, #484]	; (49c <parseChar+0x2a8>)
     2b6:	4798      	blx	r3
		if(xCharPos <= 79)
     2b8:	8820      	ldrh	r0, [r4, #0]
     2ba:	284f      	cmp	r0, #79	; 0x4f
     2bc:	d803      	bhi.n	2c6 <parseChar+0xd2>
			xCharPos = nextTab(xCharPos);
     2be:	4b79      	ldr	r3, [pc, #484]	; (4a4 <parseChar+0x2b0>)
     2c0:	4798      	blx	r3
     2c2:	4b74      	ldr	r3, [pc, #464]	; (494 <parseChar+0x2a0>)
     2c4:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     2c6:	4b73      	ldr	r3, [pc, #460]	; (494 <parseChar+0x2a0>)
     2c8:	881a      	ldrh	r2, [r3, #0]
     2ca:	4b73      	ldr	r3, [pc, #460]	; (498 <parseChar+0x2a4>)
     2cc:	8819      	ldrh	r1, [r3, #0]
     2ce:	0053      	lsls	r3, r2, #1
     2d0:	189b      	adds	r3, r3, r2
     2d2:	00db      	lsls	r3, r3, #3
     2d4:	4a6e      	ldr	r2, [pc, #440]	; (490 <parseChar+0x29c>)
     2d6:	18d3      	adds	r3, r2, r3
     2d8:	5c58      	ldrb	r0, [r3, r1]
     2da:	4b70      	ldr	r3, [pc, #448]	; (49c <parseChar+0x2a8>)
     2dc:	4798      	blx	r3
		blinkCursor();
     2de:	4b70      	ldr	r3, [pc, #448]	; (4a0 <parseChar+0x2ac>)
     2e0:	4798      	blx	r3
     2e2:	e7c1      	b.n	268 <parseChar+0x74>
		if(yCharPos == 23)
     2e4:	4b6c      	ldr	r3, [pc, #432]	; (498 <parseChar+0x2a4>)
     2e6:	881a      	ldrh	r2, [r3, #0]
     2e8:	2a17      	cmp	r2, #23
     2ea:	d032      	beq.n	352 <parseChar+0x15e>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     2ec:	4c68      	ldr	r4, [pc, #416]	; (490 <parseChar+0x29c>)
     2ee:	4d69      	ldr	r5, [pc, #420]	; (494 <parseChar+0x2a0>)
     2f0:	8829      	ldrh	r1, [r5, #0]
     2f2:	004b      	lsls	r3, r1, #1
     2f4:	185b      	adds	r3, r3, r1
     2f6:	00db      	lsls	r3, r3, #3
     2f8:	18e3      	adds	r3, r4, r3
     2fa:	5c98      	ldrb	r0, [r3, r2]
     2fc:	4e67      	ldr	r6, [pc, #412]	; (49c <parseChar+0x2a8>)
     2fe:	47b0      	blx	r6
			yCharPos++;
     300:	4a65      	ldr	r2, [pc, #404]	; (498 <parseChar+0x2a4>)
     302:	8813      	ldrh	r3, [r2, #0]
     304:	3301      	adds	r3, #1
     306:	b29b      	uxth	r3, r3
     308:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     30a:	8829      	ldrh	r1, [r5, #0]
     30c:	004a      	lsls	r2, r1, #1
     30e:	1852      	adds	r2, r2, r1
     310:	00d2      	lsls	r2, r2, #3
     312:	18a4      	adds	r4, r4, r2
     314:	5ce0      	ldrb	r0, [r4, r3]
     316:	47b0      	blx	r6
			blinkCursor();
     318:	4b61      	ldr	r3, [pc, #388]	; (4a0 <parseChar+0x2ac>)
     31a:	4798      	blx	r3
		if(lineFeed)
     31c:	4b62      	ldr	r3, [pc, #392]	; (4a8 <parseChar+0x2b4>)
     31e:	781b      	ldrb	r3, [r3, #0]
     320:	2b00      	cmp	r3, #0
     322:	d0a1      	beq.n	268 <parseChar+0x74>
			if(yCharPos == 23)
     324:	4b5c      	ldr	r3, [pc, #368]	; (498 <parseChar+0x2a4>)
     326:	881a      	ldrh	r2, [r3, #0]
     328:	2a17      	cmp	r2, #23
     32a:	d021      	beq.n	370 <parseChar+0x17c>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     32c:	4d58      	ldr	r5, [pc, #352]	; (490 <parseChar+0x29c>)
     32e:	4e59      	ldr	r6, [pc, #356]	; (494 <parseChar+0x2a0>)
     330:	8831      	ldrh	r1, [r6, #0]
     332:	004b      	lsls	r3, r1, #1
     334:	185b      	adds	r3, r3, r1
     336:	00db      	lsls	r3, r3, #3
     338:	18eb      	adds	r3, r5, r3
     33a:	5c98      	ldrb	r0, [r3, r2]
     33c:	4c57      	ldr	r4, [pc, #348]	; (49c <parseChar+0x2a8>)
     33e:	47a0      	blx	r4
				xCharPos = 0;
     340:	2300      	movs	r3, #0
     342:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     344:	4b54      	ldr	r3, [pc, #336]	; (498 <parseChar+0x2a4>)
     346:	881b      	ldrh	r3, [r3, #0]
     348:	5ce8      	ldrb	r0, [r5, r3]
     34a:	47a0      	blx	r4
				blinkCursor();
     34c:	4b54      	ldr	r3, [pc, #336]	; (4a0 <parseChar+0x2ac>)
     34e:	4798      	blx	r3
     350:	e78a      	b.n	268 <parseChar+0x74>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     352:	4b50      	ldr	r3, [pc, #320]	; (494 <parseChar+0x2a0>)
     354:	881a      	ldrh	r2, [r3, #0]
     356:	0053      	lsls	r3, r2, #1
     358:	189b      	adds	r3, r3, r2
     35a:	00db      	lsls	r3, r3, #3
     35c:	4a4c      	ldr	r2, [pc, #304]	; (490 <parseChar+0x29c>)
     35e:	18d3      	adds	r3, r2, r3
     360:	7dd8      	ldrb	r0, [r3, #23]
     362:	4b4e      	ldr	r3, [pc, #312]	; (49c <parseChar+0x2a8>)
     364:	4798      	blx	r3
			newLine();
     366:	4b51      	ldr	r3, [pc, #324]	; (4ac <parseChar+0x2b8>)
     368:	4798      	blx	r3
			blinkCursor();
     36a:	4b4d      	ldr	r3, [pc, #308]	; (4a0 <parseChar+0x2ac>)
     36c:	4798      	blx	r3
     36e:	e7d5      	b.n	31c <parseChar+0x128>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     370:	4d48      	ldr	r5, [pc, #288]	; (494 <parseChar+0x2a0>)
     372:	882a      	ldrh	r2, [r5, #0]
     374:	0053      	lsls	r3, r2, #1
     376:	189b      	adds	r3, r3, r2
     378:	00db      	lsls	r3, r3, #3
     37a:	4a45      	ldr	r2, [pc, #276]	; (490 <parseChar+0x29c>)
     37c:	18d3      	adds	r3, r2, r3
     37e:	7dd8      	ldrb	r0, [r3, #23]
     380:	4c46      	ldr	r4, [pc, #280]	; (49c <parseChar+0x2a8>)
     382:	47a0      	blx	r4
				xCharPos = 0;
     384:	2300      	movs	r3, #0
     386:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     388:	2000      	movs	r0, #0
     38a:	47a0      	blx	r4
				blinkCursor();
     38c:	4b44      	ldr	r3, [pc, #272]	; (4a0 <parseChar+0x2ac>)
     38e:	4798      	blx	r3
     390:	e76a      	b.n	268 <parseChar+0x74>
		if(yCharPos == 23)
     392:	4b41      	ldr	r3, [pc, #260]	; (498 <parseChar+0x2a4>)
     394:	881a      	ldrh	r2, [r3, #0]
     396:	2a17      	cmp	r2, #23
     398:	d033      	beq.n	402 <parseChar+0x20e>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     39a:	4c3d      	ldr	r4, [pc, #244]	; (490 <parseChar+0x29c>)
     39c:	4d3d      	ldr	r5, [pc, #244]	; (494 <parseChar+0x2a0>)
     39e:	8829      	ldrh	r1, [r5, #0]
     3a0:	004b      	lsls	r3, r1, #1
     3a2:	185b      	adds	r3, r3, r1
     3a4:	00db      	lsls	r3, r3, #3
     3a6:	18e3      	adds	r3, r4, r3
     3a8:	5c98      	ldrb	r0, [r3, r2]
     3aa:	4e3c      	ldr	r6, [pc, #240]	; (49c <parseChar+0x2a8>)
     3ac:	47b0      	blx	r6
			yCharPos++;
     3ae:	4a3a      	ldr	r2, [pc, #232]	; (498 <parseChar+0x2a4>)
     3b0:	8813      	ldrh	r3, [r2, #0]
     3b2:	3301      	adds	r3, #1
     3b4:	b29b      	uxth	r3, r3
     3b6:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     3b8:	8829      	ldrh	r1, [r5, #0]
     3ba:	004a      	lsls	r2, r1, #1
     3bc:	1852      	adds	r2, r2, r1
     3be:	00d2      	lsls	r2, r2, #3
     3c0:	18a4      	adds	r4, r4, r2
     3c2:	5ce0      	ldrb	r0, [r4, r3]
     3c4:	47b0      	blx	r6
			blinkCursor();
     3c6:	4b36      	ldr	r3, [pc, #216]	; (4a0 <parseChar+0x2ac>)
     3c8:	4798      	blx	r3
		if(lineFeed)
     3ca:	4b37      	ldr	r3, [pc, #220]	; (4a8 <parseChar+0x2b4>)
     3cc:	781b      	ldrb	r3, [r3, #0]
     3ce:	2b00      	cmp	r3, #0
     3d0:	d100      	bne.n	3d4 <parseChar+0x1e0>
     3d2:	e749      	b.n	268 <parseChar+0x74>
			if(yCharPos == 23)
     3d4:	4b30      	ldr	r3, [pc, #192]	; (498 <parseChar+0x2a4>)
     3d6:	881a      	ldrh	r2, [r3, #0]
     3d8:	2a17      	cmp	r2, #23
     3da:	d021      	beq.n	420 <parseChar+0x22c>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     3dc:	4d2c      	ldr	r5, [pc, #176]	; (490 <parseChar+0x29c>)
     3de:	4e2d      	ldr	r6, [pc, #180]	; (494 <parseChar+0x2a0>)
     3e0:	8831      	ldrh	r1, [r6, #0]
     3e2:	004b      	lsls	r3, r1, #1
     3e4:	185b      	adds	r3, r3, r1
     3e6:	00db      	lsls	r3, r3, #3
     3e8:	18eb      	adds	r3, r5, r3
     3ea:	5c98      	ldrb	r0, [r3, r2]
     3ec:	4c2b      	ldr	r4, [pc, #172]	; (49c <parseChar+0x2a8>)
     3ee:	47a0      	blx	r4
				xCharPos = 0;
     3f0:	2300      	movs	r3, #0
     3f2:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     3f4:	4b28      	ldr	r3, [pc, #160]	; (498 <parseChar+0x2a4>)
     3f6:	881b      	ldrh	r3, [r3, #0]
     3f8:	5ce8      	ldrb	r0, [r5, r3]
     3fa:	47a0      	blx	r4
				blinkCursor();
     3fc:	4b28      	ldr	r3, [pc, #160]	; (4a0 <parseChar+0x2ac>)
     3fe:	4798      	blx	r3
     400:	e732      	b.n	268 <parseChar+0x74>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     402:	4b24      	ldr	r3, [pc, #144]	; (494 <parseChar+0x2a0>)
     404:	881a      	ldrh	r2, [r3, #0]
     406:	0053      	lsls	r3, r2, #1
     408:	189b      	adds	r3, r3, r2
     40a:	00db      	lsls	r3, r3, #3
     40c:	4a20      	ldr	r2, [pc, #128]	; (490 <parseChar+0x29c>)
     40e:	18d3      	adds	r3, r2, r3
     410:	7dd8      	ldrb	r0, [r3, #23]
     412:	4b22      	ldr	r3, [pc, #136]	; (49c <parseChar+0x2a8>)
     414:	4798      	blx	r3
			newLine();
     416:	4b25      	ldr	r3, [pc, #148]	; (4ac <parseChar+0x2b8>)
     418:	4798      	blx	r3
			blinkCursor();
     41a:	4b21      	ldr	r3, [pc, #132]	; (4a0 <parseChar+0x2ac>)
     41c:	4798      	blx	r3
     41e:	e7d4      	b.n	3ca <parseChar+0x1d6>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     420:	4d1c      	ldr	r5, [pc, #112]	; (494 <parseChar+0x2a0>)
     422:	882a      	ldrh	r2, [r5, #0]
     424:	0053      	lsls	r3, r2, #1
     426:	189b      	adds	r3, r3, r2
     428:	00db      	lsls	r3, r3, #3
     42a:	4a19      	ldr	r2, [pc, #100]	; (490 <parseChar+0x29c>)
     42c:	18d3      	adds	r3, r2, r3
     42e:	7dd8      	ldrb	r0, [r3, #23]
     430:	4c1a      	ldr	r4, [pc, #104]	; (49c <parseChar+0x2a8>)
     432:	47a0      	blx	r4
				xCharPos = 0;
     434:	2300      	movs	r3, #0
     436:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     438:	2000      	movs	r0, #0
     43a:	47a0      	blx	r4
				blinkCursor();
     43c:	4b18      	ldr	r3, [pc, #96]	; (4a0 <parseChar+0x2ac>)
     43e:	4798      	blx	r3
     440:	e712      	b.n	268 <parseChar+0x74>
		if(yCharPos == 23)
     442:	4b15      	ldr	r3, [pc, #84]	; (498 <parseChar+0x2a4>)
     444:	881a      	ldrh	r2, [r3, #0]
     446:	2a17      	cmp	r2, #23
     448:	d012      	beq.n	470 <parseChar+0x27c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     44a:	4d11      	ldr	r5, [pc, #68]	; (490 <parseChar+0x29c>)
     44c:	4e11      	ldr	r6, [pc, #68]	; (494 <parseChar+0x2a0>)
     44e:	8831      	ldrh	r1, [r6, #0]
     450:	004b      	lsls	r3, r1, #1
     452:	185b      	adds	r3, r3, r1
     454:	00db      	lsls	r3, r3, #3
     456:	18eb      	adds	r3, r5, r3
     458:	5c98      	ldrb	r0, [r3, r2]
     45a:	4c10      	ldr	r4, [pc, #64]	; (49c <parseChar+0x2a8>)
     45c:	47a0      	blx	r4
			xCharPos = 0;
     45e:	2300      	movs	r3, #0
     460:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     462:	4b0d      	ldr	r3, [pc, #52]	; (498 <parseChar+0x2a4>)
     464:	881b      	ldrh	r3, [r3, #0]
     466:	5ce8      	ldrb	r0, [r5, r3]
     468:	47a0      	blx	r4
			blinkCursor();
     46a:	4b0d      	ldr	r3, [pc, #52]	; (4a0 <parseChar+0x2ac>)
     46c:	4798      	blx	r3
     46e:	e6fb      	b.n	268 <parseChar+0x74>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     470:	4c08      	ldr	r4, [pc, #32]	; (494 <parseChar+0x2a0>)
     472:	8822      	ldrh	r2, [r4, #0]
     474:	0053      	lsls	r3, r2, #1
     476:	189b      	adds	r3, r3, r2
     478:	00db      	lsls	r3, r3, #3
     47a:	4a05      	ldr	r2, [pc, #20]	; (490 <parseChar+0x29c>)
     47c:	18d3      	adds	r3, r2, r3
     47e:	7dd8      	ldrb	r0, [r3, #23]
     480:	4b06      	ldr	r3, [pc, #24]	; (49c <parseChar+0x2a8>)
     482:	4798      	blx	r3
			xCharPos = 0;
     484:	2300      	movs	r3, #0
     486:	8023      	strh	r3, [r4, #0]
			blinkCursor();
     488:	4b05      	ldr	r3, [pc, #20]	; (4a0 <parseChar+0x2ac>)
     48a:	4798      	blx	r3
     48c:	e6ec      	b.n	268 <parseChar+0x74>
     48e:	46c0      	nop			; (mov r8, r8)
     490:	20000320 	.word	0x20000320
     494:	200002a4 	.word	0x200002a4
     498:	200002a6 	.word	0x200002a6
     49c:	000021a1 	.word	0x000021a1
     4a0:	00002289 	.word	0x00002289
     4a4:	000001d1 	.word	0x000001d1
     4a8:	20000158 	.word	0x20000158
     4ac:	000023e5 	.word	0x000023e5

000004b0 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4b2:	b0c1      	sub	sp, #260	; 0x104
     4b4:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     4b6:	22d0      	movs	r2, #208	; 0xd0
     4b8:	492d      	ldr	r1, [pc, #180]	; (570 <drawKare+0xc0>)
     4ba:	a80c      	add	r0, sp, #48	; 0x30
     4bc:	4b2d      	ldr	r3, [pc, #180]	; (574 <drawKare+0xc4>)
     4be:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     4c0:	a805      	add	r0, sp, #20
     4c2:	4b2d      	ldr	r3, [pc, #180]	; (578 <drawKare+0xc8>)
     4c4:	001a      	movs	r2, r3
     4c6:	3250      	adds	r2, #80	; 0x50
     4c8:	0001      	movs	r1, r0
     4ca:	ca31      	ldmia	r2!, {r0, r4, r5}
     4cc:	c131      	stmia	r1!, {r0, r4, r5}
     4ce:	ca31      	ldmia	r2!, {r0, r4, r5}
     4d0:	c131      	stmia	r1!, {r0, r4, r5}
     4d2:	6812      	ldr	r2, [r2, #0]
     4d4:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     4d6:	336c      	adds	r3, #108	; 0x6c
     4d8:	466a      	mov	r2, sp
     4da:	cb13      	ldmia	r3!, {r0, r1, r4}
     4dc:	c213      	stmia	r2!, {r0, r1, r4}
     4de:	cb03      	ldmia	r3!, {r0, r1}
     4e0:	c203      	stmia	r2!, {r0, r1}
     4e2:	ac0c      	add	r4, sp, #48	; 0x30
     4e4:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     4e6:	4d25      	ldr	r5, [pc, #148]	; (57c <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     4e8:	88e3      	ldrh	r3, [r4, #6]
     4ea:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     4ec:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     4ee:	88a2      	ldrh	r2, [r4, #4]
     4f0:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     4f2:	322d      	adds	r2, #45	; 0x2d
     4f4:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     4f6:	8861      	ldrh	r1, [r4, #2]
     4f8:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     4fa:	3196      	adds	r1, #150	; 0x96
     4fc:	8820      	ldrh	r0, [r4, #0]
     4fe:	1040      	asrs	r0, r0, #1
     500:	302d      	adds	r0, #45	; 0x2d
     502:	30ff      	adds	r0, #255	; 0xff
     504:	47a8      	blx	r5
     506:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     508:	42b4      	cmp	r4, r6
     50a:	d1ed      	bne.n	4e8 <drawKare+0x38>
	}
	switch(emotion)
     50c:	2f00      	cmp	r7, #0
     50e:	d003      	beq.n	518 <drawKare+0x68>
     510:	2f01      	cmp	r7, #1
     512:	d017      	beq.n	544 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     514:	b041      	add	sp, #260	; 0x104
     516:	bdf0      	pop	{r4, r5, r6, r7, pc}
     518:	ac05      	add	r4, sp, #20
     51a:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     51c:	4d17      	ldr	r5, [pc, #92]	; (57c <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     51e:	78e3      	ldrb	r3, [r4, #3]
     520:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     522:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     524:	78a2      	ldrb	r2, [r4, #2]
     526:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     528:	322d      	adds	r2, #45	; 0x2d
     52a:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     52c:	7861      	ldrb	r1, [r4, #1]
     52e:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     530:	3196      	adds	r1, #150	; 0x96
     532:	7820      	ldrb	r0, [r4, #0]
     534:	1040      	asrs	r0, r0, #1
     536:	302d      	adds	r0, #45	; 0x2d
     538:	30ff      	adds	r0, #255	; 0xff
     53a:	47a8      	blx	r5
     53c:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     53e:	42a6      	cmp	r6, r4
     540:	d1ed      	bne.n	51e <drawKare+0x6e>
     542:	e7e7      	b.n	514 <drawKare+0x64>
     544:	466c      	mov	r4, sp
     546:	ae05      	add	r6, sp, #20
			fillRect((
     548:	4d0c      	ldr	r5, [pc, #48]	; (57c <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     54a:	78e3      	ldrb	r3, [r4, #3]
     54c:	105b      	asrs	r3, r3, #1
			fillRect((
     54e:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     550:	78a2      	ldrb	r2, [r4, #2]
     552:	1052      	asrs	r2, r2, #1
			fillRect((
     554:	322d      	adds	r2, #45	; 0x2d
     556:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     558:	7861      	ldrb	r1, [r4, #1]
     55a:	1049      	asrs	r1, r1, #1
			fillRect((
     55c:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     55e:	7820      	ldrb	r0, [r4, #0]
     560:	1040      	asrs	r0, r0, #1
			fillRect((
     562:	302d      	adds	r0, #45	; 0x2d
     564:	30ff      	adds	r0, #255	; 0xff
     566:	47a8      	blx	r5
     568:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     56a:	42b4      	cmp	r4, r6
     56c:	d1ed      	bne.n	54a <drawKare+0x9a>
     56e:	e7d1      	b.n	514 <drawKare+0x64>
     570:	00004b30 	.word	0x00004b30
     574:	00003885 	.word	0x00003885
     578:	00004bb0 	.word	0x00004bb0
     57c:	00002cd9 	.word	0x00002cd9

00000580 <splashScreen>:

void splashScreen(void)
{
     580:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
     582:	4c49      	ldr	r4, [pc, #292]	; (6a8 <splashScreen+0x128>)
     584:	4b49      	ldr	r3, [pc, #292]	; (6ac <splashScreen+0x12c>)
     586:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
     588:	4b49      	ldr	r3, [pc, #292]	; (6b0 <splashScreen+0x130>)
     58a:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
     58c:	4b49      	ldr	r3, [pc, #292]	; (6b4 <splashScreen+0x134>)
     58e:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
     590:	4b49      	ldr	r3, [pc, #292]	; (6b8 <splashScreen+0x138>)
     592:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Tabs!";//
     594:	4b49      	ldr	r3, [pc, #292]	; (6bc <splashScreen+0x13c>)
     596:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
     598:	4b49      	ldr	r3, [pc, #292]	; (6c0 <splashScreen+0x140>)
     59a:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
     59c:	4b49      	ldr	r3, [pc, #292]	; (6c4 <splashScreen+0x144>)
     59e:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     5a0:	4b49      	ldr	r3, [pc, #292]	; (6c8 <splashScreen+0x148>)
     5a2:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
     5a4:	4b49      	ldr	r3, [pc, #292]	; (6cc <splashScreen+0x14c>)
     5a6:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
     5a8:	4b49      	ldr	r3, [pc, #292]	; (6d0 <splashScreen+0x150>)
     5aa:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     5ac:	4b49      	ldr	r3, [pc, #292]	; (6d4 <splashScreen+0x154>)
     5ae:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     5b0:	4b49      	ldr	r3, [pc, #292]	; (6d8 <splashScreen+0x158>)
     5b2:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     5b4:	4b49      	ldr	r3, [pc, #292]	; (6dc <splashScreen+0x15c>)
     5b6:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
     5b8:	4b49      	ldr	r3, [pc, #292]	; (6e0 <splashScreen+0x160>)
     5ba:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     5bc:	4b49      	ldr	r3, [pc, #292]	; (6e4 <splashScreen+0x164>)
     5be:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     5c0:	4b49      	ldr	r3, [pc, #292]	; (6e8 <splashScreen+0x168>)
     5c2:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     5c4:	4b49      	ldr	r3, [pc, #292]	; (6ec <splashScreen+0x16c>)
     5c6:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     5c8:	4b49      	ldr	r3, [pc, #292]	; (6f0 <splashScreen+0x170>)
     5ca:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     5cc:	4b49      	ldr	r3, [pc, #292]	; (6f4 <splashScreen+0x174>)
     5ce:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     5d0:	4b49      	ldr	r3, [pc, #292]	; (6f8 <splashScreen+0x178>)
     5d2:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     5d4:	4b49      	ldr	r3, [pc, #292]	; (6fc <splashScreen+0x17c>)
     5d6:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     5d8:	4b49      	ldr	r3, [pc, #292]	; (700 <splashScreen+0x180>)
     5da:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     5dc:	4b49      	ldr	r3, [pc, #292]	; (704 <splashScreen+0x184>)
     5de:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     5e0:	4b49      	ldr	r3, [pc, #292]	; (708 <splashScreen+0x188>)
     5e2:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
     5e4:	4b49      	ldr	r3, [pc, #292]	; (70c <splashScreen+0x18c>)
     5e6:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     5e8:	4b49      	ldr	r3, [pc, #292]	; (710 <splashScreen+0x190>)
     5ea:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
     5ec:	4b49      	ldr	r3, [pc, #292]	; (714 <splashScreen+0x194>)
     5ee:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     5f0:	4b49      	ldr	r3, [pc, #292]	; (718 <splashScreen+0x198>)
     5f2:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     5f4:	4b49      	ldr	r3, [pc, #292]	; (71c <splashScreen+0x19c>)
     5f6:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
     5f8:	4b49      	ldr	r3, [pc, #292]	; (720 <splashScreen+0x1a0>)
     5fa:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     5fc:	4b49      	ldr	r3, [pc, #292]	; (724 <splashScreen+0x1a4>)
     5fe:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     600:	4b49      	ldr	r3, [pc, #292]	; (728 <splashScreen+0x1a8>)
     602:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     604:	4a49      	ldr	r2, [pc, #292]	; (72c <splashScreen+0x1ac>)
     606:	2380      	movs	r3, #128	; 0x80
     608:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
     60a:	4b49      	ldr	r3, [pc, #292]	; (730 <splashScreen+0x1b0>)
     60c:	4798      	blx	r3
     60e:	17c3      	asrs	r3, r0, #31
     610:	0edb      	lsrs	r3, r3, #27
     612:	18c2      	adds	r2, r0, r3
     614:	201f      	movs	r0, #31
     616:	4010      	ands	r0, r2
     618:	1ac0      	subs	r0, r0, r3
     61a:	0080      	lsls	r0, r0, #2
     61c:	5904      	ldr	r4, [r0, r4]


	
	clearScreen();
     61e:	4b45      	ldr	r3, [pc, #276]	; (734 <splashScreen+0x1b4>)
     620:	4798      	blx	r3
	setColorRGB(255,255,255);
     622:	22ff      	movs	r2, #255	; 0xff
     624:	21ff      	movs	r1, #255	; 0xff
     626:	20ff      	movs	r0, #255	; 0xff
     628:	4b43      	ldr	r3, [pc, #268]	; (738 <splashScreen+0x1b8>)
     62a:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     62c:	2280      	movs	r2, #128	; 0x80
     62e:	0612      	lsls	r2, r2, #24
     630:	4b42      	ldr	r3, [pc, #264]	; (73c <splashScreen+0x1bc>)
     632:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     634:	4b42      	ldr	r3, [pc, #264]	; (740 <splashScreen+0x1c0>)
     636:	22df      	movs	r2, #223	; 0xdf
     638:	5c99      	ldrb	r1, [r3, r2]
     63a:	2004      	movs	r0, #4
     63c:	4301      	orrs	r1, r0
     63e:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     640:	5c99      	ldrb	r1, [r3, r2]
     642:	2002      	movs	r0, #2
     644:	4301      	orrs	r1, r0
     646:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     648:	3a3f      	subs	r2, #63	; 0x3f
     64a:	589b      	ldr	r3, [r3, r2]
     64c:	2b00      	cmp	r3, #0
     64e:	db26      	blt.n	69e <splashScreen+0x11e>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     650:	2000      	movs	r0, #0
     652:	4b3c      	ldr	r3, [pc, #240]	; (744 <splashScreen+0x1c4>)
     654:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     656:	0020      	movs	r0, r4
     658:	4b3b      	ldr	r3, [pc, #236]	; (748 <splashScreen+0x1c8>)
     65a:	4798      	blx	r3
     65c:	4e3b      	ldr	r6, [pc, #236]	; (74c <splashScreen+0x1cc>)
     65e:	0840      	lsrs	r0, r0, #1
     660:	2328      	movs	r3, #40	; 0x28
     662:	1a18      	subs	r0, r3, r0
     664:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
     666:	4d3a      	ldr	r5, [pc, #232]	; (750 <splashScreen+0x1d0>)
     668:	2310      	movs	r3, #16
     66a:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
     66c:	0020      	movs	r0, r4
     66e:	4b39      	ldr	r3, [pc, #228]	; (754 <splashScreen+0x1d4>)
     670:	4798      	blx	r3
	xCharPos = 40 - (strlen(versionLabel)/2);
	yCharPos = 18;
	
	writeString(versionLabel);
	*/
	delay_ms(2000);
     672:	20fa      	movs	r0, #250	; 0xfa
     674:	00c0      	lsls	r0, r0, #3
     676:	4b38      	ldr	r3, [pc, #224]	; (758 <splashScreen+0x1d8>)
     678:	4798      	blx	r3
		
	clearScreen();
     67a:	4b2e      	ldr	r3, [pc, #184]	; (734 <splashScreen+0x1b4>)
     67c:	4798      	blx	r3
	nullifyConsole();
     67e:	4b37      	ldr	r3, [pc, #220]	; (75c <splashScreen+0x1dc>)
     680:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     682:	2200      	movs	r2, #0
     684:	21ff      	movs	r1, #255	; 0xff
     686:	2000      	movs	r0, #0
     688:	4b2b      	ldr	r3, [pc, #172]	; (738 <splashScreen+0x1b8>)
     68a:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     68c:	2200      	movs	r2, #0
     68e:	2100      	movs	r1, #0
     690:	2000      	movs	r0, #0
     692:	4b33      	ldr	r3, [pc, #204]	; (760 <splashScreen+0x1e0>)
     694:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     696:	2300      	movs	r3, #0
     698:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
     69a:	802b      	strh	r3, [r5, #0]
	

     69c:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     69e:	2001      	movs	r0, #1
     6a0:	4b28      	ldr	r3, [pc, #160]	; (744 <splashScreen+0x1c4>)
     6a2:	4798      	blx	r3
     6a4:	e7d7      	b.n	656 <splashScreen+0xd6>
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	200001e4 	.word	0x200001e4
     6ac:	00004c30 	.word	0x00004c30
     6b0:	00004c50 	.word	0x00004c50
     6b4:	00004c64 	.word	0x00004c64
     6b8:	00004c7c 	.word	0x00004c7c
     6bc:	00004c8c 	.word	0x00004c8c
     6c0:	00004c94 	.word	0x00004c94
     6c4:	00004cbc 	.word	0x00004cbc
     6c8:	00004ce8 	.word	0x00004ce8
     6cc:	00004d10 	.word	0x00004d10
     6d0:	00004d3c 	.word	0x00004d3c
     6d4:	00004d48 	.word	0x00004d48
     6d8:	00004d60 	.word	0x00004d60
     6dc:	00004d80 	.word	0x00004d80
     6e0:	00004da0 	.word	0x00004da0
     6e4:	00004dc4 	.word	0x00004dc4
     6e8:	00004dd4 	.word	0x00004dd4
     6ec:	00004de0 	.word	0x00004de0
     6f0:	00004dfc 	.word	0x00004dfc
     6f4:	00004e1c 	.word	0x00004e1c
     6f8:	00004e24 	.word	0x00004e24
     6fc:	00004e38 	.word	0x00004e38
     700:	00004e54 	.word	0x00004e54
     704:	00004e64 	.word	0x00004e64
     708:	00004e88 	.word	0x00004e88
     70c:	00004eb4 	.word	0x00004eb4
     710:	00004ee0 	.word	0x00004ee0
     714:	00004ef4 	.word	0x00004ef4
     718:	00004f14 	.word	0x00004f14
     71c:	00004f28 	.word	0x00004f28
     720:	00004f44 	.word	0x00004f44
     724:	00004f54 	.word	0x00004f54
     728:	00004f78 	.word	0x00004f78
     72c:	00004f98 	.word	0x00004f98
     730:	00003ab1 	.word	0x00003ab1
     734:	00002da9 	.word	0x00002da9
     738:	00002b9d 	.word	0x00002b9d
     73c:	4100448c 	.word	0x4100448c
     740:	41004400 	.word	0x41004400
     744:	000004b1 	.word	0x000004b1
     748:	00003cb9 	.word	0x00003cb9
     74c:	200002a4 	.word	0x200002a4
     750:	200002a6 	.word	0x200002a6
     754:	000024a1 	.word	0x000024a1
     758:	000007f9 	.word	0x000007f9
     75c:	000024e9 	.word	0x000024e9
     760:	00002bc5 	.word	0x00002bc5

00000764 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
     764:	b5f0      	push	{r4, r5, r6, r7, lr}
     766:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
     768:	4e0b      	ldr	r6, [pc, #44]	; (798 <parseRXBuffer+0x34>)
     76a:	4d0c      	ldr	r5, [pc, #48]	; (79c <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
     76c:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
     76e:	e008      	b.n	782 <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
     770:	466b      	mov	r3, sp
     772:	1ddc      	adds	r4, r3, #7
     774:	0021      	movs	r1, r4
     776:	6838      	ldr	r0, [r7, #0]
     778:	4b09      	ldr	r3, [pc, #36]	; (7a0 <parseRXBuffer+0x3c>)
     77a:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
     77c:	7820      	ldrb	r0, [r4, #0]
     77e:	4b09      	ldr	r3, [pc, #36]	; (7a4 <parseRXBuffer+0x40>)
     780:	4798      	blx	r3
		while(!ring_empty(ouroboros))
     782:	6830      	ldr	r0, [r6, #0]
     784:	47a8      	blx	r5
     786:	2800      	cmp	r0, #0
     788:	d0f2      	beq.n	770 <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
     78a:	4b03      	ldr	r3, [pc, #12]	; (798 <parseRXBuffer+0x34>)
     78c:	6818      	ldr	r0, [r3, #0]
     78e:	4b06      	ldr	r3, [pc, #24]	; (7a8 <parseRXBuffer+0x44>)
     790:	4798      	blx	r3
}
     792:	b003      	add	sp, #12
     794:	bdf0      	pop	{r4, r5, r6, r7, pc}
     796:	46c0      	nop			; (mov r8, r8)
     798:	200002bc 	.word	0x200002bc
     79c:	0000017d 	.word	0x0000017d
     7a0:	00000195 	.word	0x00000195
     7a4:	000001f5 	.word	0x000001f5
     7a8:	00000135 	.word	0x00000135

000007ac <sendChar>:

void sendChar(char character)
{
     7ac:	b510      	push	{r4, lr}
	printf("%c", character);
     7ae:	4b01      	ldr	r3, [pc, #4]	; (7b4 <sendChar+0x8>)
     7b0:	4798      	blx	r3
     7b2:	bd10      	pop	{r4, pc}
     7b4:	00003a2d 	.word	0x00003a2d

000007b8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     7b8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     7ba:	2000      	movs	r0, #0
     7bc:	4b08      	ldr	r3, [pc, #32]	; (7e0 <delay_init+0x28>)
     7be:	4798      	blx	r3
     7c0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     7c2:	4c08      	ldr	r4, [pc, #32]	; (7e4 <delay_init+0x2c>)
     7c4:	21fa      	movs	r1, #250	; 0xfa
     7c6:	0089      	lsls	r1, r1, #2
     7c8:	47a0      	blx	r4
     7ca:	4b07      	ldr	r3, [pc, #28]	; (7e8 <delay_init+0x30>)
     7cc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     7ce:	4907      	ldr	r1, [pc, #28]	; (7ec <delay_init+0x34>)
     7d0:	0028      	movs	r0, r5
     7d2:	47a0      	blx	r4
     7d4:	4b06      	ldr	r3, [pc, #24]	; (7f0 <delay_init+0x38>)
     7d6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     7d8:	2205      	movs	r2, #5
     7da:	4b06      	ldr	r3, [pc, #24]	; (7f4 <delay_init+0x3c>)
     7dc:	601a      	str	r2, [r3, #0]
}
     7de:	bd70      	pop	{r4, r5, r6, pc}
     7e0:	00001d79 	.word	0x00001d79
     7e4:	000034e9 	.word	0x000034e9
     7e8:	20000000 	.word	0x20000000
     7ec:	000f4240 	.word	0x000f4240
     7f0:	20000004 	.word	0x20000004
     7f4:	e000e010 	.word	0xe000e010

000007f8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     7f8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     7fa:	4b08      	ldr	r3, [pc, #32]	; (81c <delay_cycles_ms+0x24>)
     7fc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     7fe:	4a08      	ldr	r2, [pc, #32]	; (820 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     800:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     802:	2180      	movs	r1, #128	; 0x80
     804:	0249      	lsls	r1, r1, #9
	while (n--) {
     806:	3801      	subs	r0, #1
     808:	d307      	bcc.n	81a <delay_cycles_ms+0x22>
	if (n > 0) {
     80a:	2c00      	cmp	r4, #0
     80c:	d0fb      	beq.n	806 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     80e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     810:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     812:	6813      	ldr	r3, [r2, #0]
     814:	420b      	tst	r3, r1
     816:	d0fc      	beq.n	812 <delay_cycles_ms+0x1a>
     818:	e7f5      	b.n	806 <delay_cycles_ms+0xe>
	}
}
     81a:	bd30      	pop	{r4, r5, pc}
     81c:	20000000 	.word	0x20000000
     820:	e000e010 	.word	0xe000e010

00000824 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     824:	4b0c      	ldr	r3, [pc, #48]	; (858 <cpu_irq_enter_critical+0x34>)
     826:	681b      	ldr	r3, [r3, #0]
     828:	2b00      	cmp	r3, #0
     82a:	d106      	bne.n	83a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     82c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     830:	2b00      	cmp	r3, #0
     832:	d007      	beq.n	844 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     834:	2200      	movs	r2, #0
     836:	4b09      	ldr	r3, [pc, #36]	; (85c <cpu_irq_enter_critical+0x38>)
     838:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     83a:	4a07      	ldr	r2, [pc, #28]	; (858 <cpu_irq_enter_critical+0x34>)
     83c:	6813      	ldr	r3, [r2, #0]
     83e:	3301      	adds	r3, #1
     840:	6013      	str	r3, [r2, #0]
}
     842:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     844:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     846:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     84a:	2200      	movs	r2, #0
     84c:	4b04      	ldr	r3, [pc, #16]	; (860 <cpu_irq_enter_critical+0x3c>)
     84e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     850:	3201      	adds	r2, #1
     852:	4b02      	ldr	r3, [pc, #8]	; (85c <cpu_irq_enter_critical+0x38>)
     854:	701a      	strb	r2, [r3, #0]
     856:	e7f0      	b.n	83a <cpu_irq_enter_critical+0x16>
     858:	20000264 	.word	0x20000264
     85c:	20000268 	.word	0x20000268
     860:	20000008 	.word	0x20000008

00000864 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     864:	4b08      	ldr	r3, [pc, #32]	; (888 <cpu_irq_leave_critical+0x24>)
     866:	681a      	ldr	r2, [r3, #0]
     868:	3a01      	subs	r2, #1
     86a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     86c:	681b      	ldr	r3, [r3, #0]
     86e:	2b00      	cmp	r3, #0
     870:	d109      	bne.n	886 <cpu_irq_leave_critical+0x22>
     872:	4b06      	ldr	r3, [pc, #24]	; (88c <cpu_irq_leave_critical+0x28>)
     874:	781b      	ldrb	r3, [r3, #0]
     876:	2b00      	cmp	r3, #0
     878:	d005      	beq.n	886 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     87a:	2201      	movs	r2, #1
     87c:	4b04      	ldr	r3, [pc, #16]	; (890 <cpu_irq_leave_critical+0x2c>)
     87e:	701a      	strb	r2, [r3, #0]
     880:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     884:	b662      	cpsie	i
	}
}
     886:	4770      	bx	lr
     888:	20000264 	.word	0x20000264
     88c:	20000268 	.word	0x20000268
     890:	20000008 	.word	0x20000008

00000894 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     894:	b5f0      	push	{r4, r5, r6, r7, lr}
     896:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     898:	ac01      	add	r4, sp, #4
     89a:	2501      	movs	r5, #1
     89c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     89e:	2700      	movs	r7, #0
     8a0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     8a2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     8a4:	0021      	movs	r1, r4
     8a6:	203e      	movs	r0, #62	; 0x3e
     8a8:	4e06      	ldr	r6, [pc, #24]	; (8c4 <system_board_init+0x30>)
     8aa:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     8ac:	2280      	movs	r2, #128	; 0x80
     8ae:	05d2      	lsls	r2, r2, #23
     8b0:	4b05      	ldr	r3, [pc, #20]	; (8c8 <system_board_init+0x34>)
     8b2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     8b4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     8b6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     8b8:	0021      	movs	r1, r4
     8ba:	200f      	movs	r0, #15
     8bc:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     8be:	b003      	add	sp, #12
     8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	00000dfd 	.word	0x00000dfd
     8c8:	41004480 	.word	0x41004480

000008cc <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     8cc:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     8ce:	2200      	movs	r2, #0
     8d0:	2300      	movs	r3, #0
     8d2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     8d4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     8d6:	2100      	movs	r1, #0
     8d8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     8da:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     8dc:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     8de:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     8e0:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     8e2:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     8e4:	24c0      	movs	r4, #192	; 0xc0
     8e6:	0164      	lsls	r4, r4, #5
     8e8:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     8ea:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     8ec:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     8ee:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     8f0:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     8f2:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     8f4:	242a      	movs	r4, #42	; 0x2a
     8f6:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     8f8:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     8fa:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     8fc:	3c06      	subs	r4, #6
     8fe:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     900:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     902:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     904:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     906:	232b      	movs	r3, #43	; 0x2b
     908:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     90a:	3301      	adds	r3, #1
     90c:	54c1      	strb	r1, [r0, r3]
}
     90e:	bd10      	pop	{r4, pc}

00000910 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     910:	b5f0      	push	{r4, r5, r6, r7, lr}
     912:	46d6      	mov	lr, sl
     914:	464f      	mov	r7, r9
     916:	4646      	mov	r6, r8
     918:	b5c0      	push	{r6, r7, lr}
     91a:	b096      	sub	sp, #88	; 0x58
     91c:	0007      	movs	r7, r0
     91e:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     920:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     922:	4ac6      	ldr	r2, [pc, #792]	; (c3c <adc_init+0x32c>)
     924:	6a10      	ldr	r0, [r2, #32]
     926:	2380      	movs	r3, #128	; 0x80
     928:	025b      	lsls	r3, r3, #9
     92a:	4303      	orrs	r3, r0
     92c:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     92e:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     930:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     932:	07db      	lsls	r3, r3, #31
     934:	d505      	bpl.n	942 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     936:	b016      	add	sp, #88	; 0x58
     938:	bc1c      	pop	{r2, r3, r4}
     93a:	4690      	mov	r8, r2
     93c:	4699      	mov	r9, r3
     93e:	46a2      	mov	sl, r4
     940:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     942:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     944:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     946:	079b      	lsls	r3, r3, #30
     948:	d4f5      	bmi.n	936 <adc_init+0x26>
	module_inst->reference = config->reference;
     94a:	7873      	ldrb	r3, [r6, #1]
     94c:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     94e:	2b00      	cmp	r3, #0
     950:	d104      	bne.n	95c <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     952:	4abb      	ldr	r2, [pc, #748]	; (c40 <adc_init+0x330>)
     954:	6c13      	ldr	r3, [r2, #64]	; 0x40
     956:	2104      	movs	r1, #4
     958:	430b      	orrs	r3, r1
     95a:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     95c:	2300      	movs	r3, #0
     95e:	60bb      	str	r3, [r7, #8]
     960:	60fb      	str	r3, [r7, #12]
     962:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     964:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     966:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     968:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     96a:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     96c:	4bb5      	ldr	r3, [pc, #724]	; (c44 <adc_init+0x334>)
     96e:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     970:	232a      	movs	r3, #42	; 0x2a
     972:	5cf3      	ldrb	r3, [r6, r3]
     974:	2b00      	cmp	r3, #0
     976:	d105      	bne.n	984 <adc_init+0x74>
     978:	7d33      	ldrb	r3, [r6, #20]
     97a:	2b00      	cmp	r3, #0
     97c:	d102      	bne.n	984 <adc_init+0x74>
		module_inst->software_trigger = true;
     97e:	3301      	adds	r3, #1
     980:	777b      	strb	r3, [r7, #29]
     982:	e001      	b.n	988 <adc_init+0x78>
		module_inst->software_trigger = false;
     984:	2300      	movs	r3, #0
     986:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     988:	683b      	ldr	r3, [r7, #0]
     98a:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     98c:	7833      	ldrb	r3, [r6, #0]
     98e:	466a      	mov	r2, sp
     990:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     992:	4669      	mov	r1, sp
     994:	201e      	movs	r0, #30
     996:	4bac      	ldr	r3, [pc, #688]	; (c48 <adc_init+0x338>)
     998:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     99a:	201e      	movs	r0, #30
     99c:	4bab      	ldr	r3, [pc, #684]	; (c4c <adc_init+0x33c>)
     99e:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     9a0:	232c      	movs	r3, #44	; 0x2c
     9a2:	5cf2      	ldrb	r2, [r6, r3]
     9a4:	2a00      	cmp	r2, #0
     9a6:	d054      	beq.n	a52 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     9a8:	3b01      	subs	r3, #1
     9aa:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     9ac:	7b33      	ldrb	r3, [r6, #12]
     9ae:	18eb      	adds	r3, r5, r3
     9b0:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     9b2:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     9b4:	b2c9      	uxtb	r1, r1
     9b6:	428b      	cmp	r3, r1
     9b8:	d221      	bcs.n	9fe <adc_init+0xee>
     9ba:	1952      	adds	r2, r2, r5
     9bc:	b2d3      	uxtb	r3, r2
     9be:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     9c0:	4ba3      	ldr	r3, [pc, #652]	; (c50 <adc_init+0x340>)
     9c2:	469a      	mov	sl, r3
     9c4:	e003      	b.n	9ce <adc_init+0xbe>
			offset++;
     9c6:	3501      	adds	r5, #1
     9c8:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     9ca:	454d      	cmp	r5, r9
     9cc:	d017      	beq.n	9fe <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     9ce:	240f      	movs	r4, #15
     9d0:	402c      	ands	r4, r5
     9d2:	7b33      	ldrb	r3, [r6, #12]
     9d4:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     9d6:	2250      	movs	r2, #80	; 0x50
     9d8:	499e      	ldr	r1, [pc, #632]	; (c54 <adc_init+0x344>)
     9da:	a802      	add	r0, sp, #8
     9dc:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     9de:	2c13      	cmp	r4, #19
     9e0:	d8f1      	bhi.n	9c6 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     9e2:	00a4      	lsls	r4, r4, #2
     9e4:	ab02      	add	r3, sp, #8
     9e6:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9e8:	a901      	add	r1, sp, #4
     9ea:	2300      	movs	r3, #0
     9ec:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     9ee:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     9f0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     9f2:	3301      	adds	r3, #1
     9f4:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     9f6:	b2c0      	uxtb	r0, r0
     9f8:	4b97      	ldr	r3, [pc, #604]	; (c58 <adc_init+0x348>)
     9fa:	4798      	blx	r3
     9fc:	e7e3      	b.n	9c6 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     9fe:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     a00:	2250      	movs	r2, #80	; 0x50
     a02:	4994      	ldr	r1, [pc, #592]	; (c54 <adc_init+0x344>)
     a04:	a802      	add	r0, sp, #8
     a06:	4b92      	ldr	r3, [pc, #584]	; (c50 <adc_init+0x340>)
     a08:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     a0a:	2c13      	cmp	r4, #19
     a0c:	d913      	bls.n	a36 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     a0e:	7d73      	ldrb	r3, [r6, #21]
     a10:	009b      	lsls	r3, r3, #2
     a12:	b2db      	uxtb	r3, r3
     a14:	4642      	mov	r2, r8
     a16:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     a18:	7db3      	ldrb	r3, [r6, #22]
     a1a:	01db      	lsls	r3, r3, #7
     a1c:	7872      	ldrb	r2, [r6, #1]
     a1e:	4313      	orrs	r3, r2
     a20:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     a22:	4642      	mov	r2, r8
     a24:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     a26:	7933      	ldrb	r3, [r6, #4]
     a28:	2b34      	cmp	r3, #52	; 0x34
     a2a:	d900      	bls.n	a2e <adc_init+0x11e>
     a2c:	e17b      	b.n	d26 <adc_init+0x416>
     a2e:	009b      	lsls	r3, r3, #2
     a30:	4a8a      	ldr	r2, [pc, #552]	; (c5c <adc_init+0x34c>)
     a32:	58d3      	ldr	r3, [r2, r3]
     a34:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a36:	00a4      	lsls	r4, r4, #2
     a38:	ab02      	add	r3, sp, #8
     a3a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a3c:	a901      	add	r1, sp, #4
     a3e:	2300      	movs	r3, #0
     a40:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     a42:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a44:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a46:	3301      	adds	r3, #1
     a48:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     a4a:	b2c0      	uxtb	r0, r0
     a4c:	4b82      	ldr	r3, [pc, #520]	; (c58 <adc_init+0x348>)
     a4e:	4798      	blx	r3
     a50:	e7dd      	b.n	a0e <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     a52:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     a54:	2250      	movs	r2, #80	; 0x50
     a56:	497f      	ldr	r1, [pc, #508]	; (c54 <adc_init+0x344>)
     a58:	a802      	add	r0, sp, #8
     a5a:	4b7d      	ldr	r3, [pc, #500]	; (c50 <adc_init+0x340>)
     a5c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     a5e:	2c13      	cmp	r4, #19
     a60:	d915      	bls.n	a8e <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     a62:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     a64:	2250      	movs	r2, #80	; 0x50
     a66:	497b      	ldr	r1, [pc, #492]	; (c54 <adc_init+0x344>)
     a68:	a802      	add	r0, sp, #8
     a6a:	4b79      	ldr	r3, [pc, #484]	; (c50 <adc_init+0x340>)
     a6c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     a6e:	2c13      	cmp	r4, #19
     a70:	d8cd      	bhi.n	a0e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a72:	00a4      	lsls	r4, r4, #2
     a74:	ab02      	add	r3, sp, #8
     a76:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a78:	a901      	add	r1, sp, #4
     a7a:	2300      	movs	r3, #0
     a7c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     a7e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a80:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a82:	3301      	adds	r3, #1
     a84:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     a86:	b2c0      	uxtb	r0, r0
     a88:	4b73      	ldr	r3, [pc, #460]	; (c58 <adc_init+0x348>)
     a8a:	4798      	blx	r3
     a8c:	e7bf      	b.n	a0e <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a8e:	00a4      	lsls	r4, r4, #2
     a90:	ab02      	add	r3, sp, #8
     a92:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a94:	a901      	add	r1, sp, #4
     a96:	2300      	movs	r3, #0
     a98:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     a9a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a9c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a9e:	3301      	adds	r3, #1
     aa0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     aa2:	b2c0      	uxtb	r0, r0
     aa4:	4b6c      	ldr	r3, [pc, #432]	; (c58 <adc_init+0x348>)
     aa6:	4798      	blx	r3
     aa8:	e7db      	b.n	a62 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     aaa:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     aac:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     aae:	2102      	movs	r1, #2
     ab0:	e01a      	b.n	ae8 <adc_init+0x1d8>
		adjres = config->divide_result;
     ab2:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     ab4:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     ab6:	2410      	movs	r4, #16
     ab8:	e016      	b.n	ae8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     aba:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     abc:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     abe:	2101      	movs	r1, #1
     ac0:	e012      	b.n	ae8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     ac2:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     ac4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     ac6:	2100      	movs	r1, #0
     ac8:	e00e      	b.n	ae8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     aca:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     acc:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     ace:	2100      	movs	r1, #0
     ad0:	e00a      	b.n	ae8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     ad2:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     ad4:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     ad6:	2100      	movs	r1, #0
     ad8:	e006      	b.n	ae8 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     ada:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     adc:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     ade:	2100      	movs	r1, #0
     ae0:	e002      	b.n	ae8 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     ae2:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     ae4:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     ae6:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     ae8:	0109      	lsls	r1, r1, #4
     aea:	2270      	movs	r2, #112	; 0x70
     aec:	400a      	ands	r2, r1
     aee:	4313      	orrs	r3, r2
     af0:	4642      	mov	r2, r8
     af2:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     af4:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     af6:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     af8:	2b3f      	cmp	r3, #63	; 0x3f
     afa:	d900      	bls.n	afe <adc_init+0x1ee>
     afc:	e71b      	b.n	936 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     afe:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     b00:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b02:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     b04:	b25b      	sxtb	r3, r3
     b06:	2b00      	cmp	r3, #0
     b08:	dbfb      	blt.n	b02 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     b0a:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     b0c:	8872      	ldrh	r2, [r6, #2]
     b0e:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     b10:	2224      	movs	r2, #36	; 0x24
     b12:	5cb2      	ldrb	r2, [r6, r2]
     b14:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     b16:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     b18:	7d32      	ldrb	r2, [r6, #20]
     b1a:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     b1c:	4313      	orrs	r3, r2
     b1e:	7cb2      	ldrb	r2, [r6, #18]
     b20:	0052      	lsls	r2, r2, #1
     b22:	4313      	orrs	r3, r2
     b24:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     b26:	4642      	mov	r2, r8
     b28:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     b2a:	7e33      	ldrb	r3, [r6, #24]
     b2c:	2b00      	cmp	r3, #0
     b2e:	d020      	beq.n	b72 <adc_init+0x262>
		switch (resolution) {
     b30:	2c10      	cmp	r4, #16
     b32:	d100      	bne.n	b36 <adc_init+0x226>
     b34:	e0d9      	b.n	cea <adc_init+0x3da>
     b36:	d800      	bhi.n	b3a <adc_init+0x22a>
     b38:	e098      	b.n	c6c <adc_init+0x35c>
     b3a:	2c20      	cmp	r4, #32
     b3c:	d100      	bne.n	b40 <adc_init+0x230>
     b3e:	e0b6      	b.n	cae <adc_init+0x39e>
     b40:	2c30      	cmp	r4, #48	; 0x30
     b42:	d116      	bne.n	b72 <adc_init+0x262>
			if (config->differential_mode &&
     b44:	7cf2      	ldrb	r2, [r6, #19]
     b46:	2a00      	cmp	r2, #0
     b48:	d00a      	beq.n	b60 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     b4a:	69f2      	ldr	r2, [r6, #28]
     b4c:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     b4e:	2017      	movs	r0, #23
			if (config->differential_mode &&
     b50:	2aff      	cmp	r2, #255	; 0xff
     b52:	d900      	bls.n	b56 <adc_init+0x246>
     b54:	e6ef      	b.n	936 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     b56:	6a32      	ldr	r2, [r6, #32]
     b58:	3280      	adds	r2, #128	; 0x80
     b5a:	2aff      	cmp	r2, #255	; 0xff
     b5c:	d900      	bls.n	b60 <adc_init+0x250>
     b5e:	e6ea      	b.n	936 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     b60:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     b62:	69f2      	ldr	r2, [r6, #28]
     b64:	2aff      	cmp	r2, #255	; 0xff
     b66:	dd00      	ble.n	b6a <adc_init+0x25a>
     b68:	e6e5      	b.n	936 <adc_init+0x26>
     b6a:	6a32      	ldr	r2, [r6, #32]
     b6c:	2aff      	cmp	r2, #255	; 0xff
     b6e:	dd00      	ble.n	b72 <adc_init+0x262>
     b70:	e6e1      	b.n	936 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     b72:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b74:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     b76:	b252      	sxtb	r2, r2
     b78:	2a00      	cmp	r2, #0
     b7a:	dbfb      	blt.n	b74 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     b7c:	4642      	mov	r2, r8
     b7e:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     b80:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b82:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     b84:	b25b      	sxtb	r3, r3
     b86:	2b00      	cmp	r3, #0
     b88:	dbfb      	blt.n	b82 <adc_init+0x272>
	adc_module->WINLT.reg =
     b8a:	8bb3      	ldrh	r3, [r6, #28]
     b8c:	4642      	mov	r2, r8
     b8e:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     b90:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b92:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     b94:	b25b      	sxtb	r3, r3
     b96:	2b00      	cmp	r3, #0
     b98:	dbfb      	blt.n	b92 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     b9a:	8c33      	ldrh	r3, [r6, #32]
     b9c:	4642      	mov	r2, r8
     b9e:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     ba0:	232c      	movs	r3, #44	; 0x2c
     ba2:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     ba4:	2b00      	cmp	r3, #0
     ba6:	d005      	beq.n	bb4 <adc_init+0x2a4>
		inputs_to_scan--;
     ba8:	3b01      	subs	r3, #1
     baa:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     bac:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     bae:	2b0f      	cmp	r3, #15
     bb0:	d900      	bls.n	bb4 <adc_init+0x2a4>
     bb2:	e6c0      	b.n	936 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     bb4:	222b      	movs	r2, #43	; 0x2b
     bb6:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     bb8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     bba:	290f      	cmp	r1, #15
     bbc:	d900      	bls.n	bc0 <adc_init+0x2b0>
     bbe:	e6ba      	b.n	936 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     bc0:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     bc2:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     bc4:	b252      	sxtb	r2, r2
     bc6:	2a00      	cmp	r2, #0
     bc8:	dbfb      	blt.n	bc2 <adc_init+0x2b2>
			config->negative_input |
     bca:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     bcc:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     bce:	4302      	orrs	r2, r0
     bd0:	68b0      	ldr	r0, [r6, #8]
     bd2:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     bd4:	0509      	lsls	r1, r1, #20
			config->negative_input |
     bd6:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     bd8:	041b      	lsls	r3, r3, #16
			config->negative_input |
     bda:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     bdc:	4642      	mov	r2, r8
     bde:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     be0:	232a      	movs	r3, #42	; 0x2a
     be2:	5cf3      	ldrb	r3, [r6, r3]
     be4:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     be6:	230f      	movs	r3, #15
     be8:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     bea:	3315      	adds	r3, #21
     bec:	5cf3      	ldrb	r3, [r6, r3]
     bee:	2b00      	cmp	r3, #0
     bf0:	d012      	beq.n	c18 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     bf2:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     bf4:	4a1a      	ldr	r2, [pc, #104]	; (c60 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     bf6:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     bf8:	4293      	cmp	r3, r2
     bfa:	d900      	bls.n	bfe <adc_init+0x2ee>
     bfc:	e69b      	b.n	936 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     bfe:	4642      	mov	r2, r8
     c00:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     c02:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     c04:	2380      	movs	r3, #128	; 0x80
     c06:	011b      	lsls	r3, r3, #4
     c08:	18d3      	adds	r3, r2, r3
     c0a:	4915      	ldr	r1, [pc, #84]	; (c60 <adc_init+0x350>)
     c0c:	b29b      	uxth	r3, r3
     c0e:	428b      	cmp	r3, r1
     c10:	d900      	bls.n	c14 <adc_init+0x304>
     c12:	e690      	b.n	936 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     c14:	4643      	mov	r3, r8
     c16:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     c18:	4b12      	ldr	r3, [pc, #72]	; (c64 <adc_init+0x354>)
     c1a:	681b      	ldr	r3, [r3, #0]
     c1c:	015b      	lsls	r3, r3, #5
     c1e:	22e0      	movs	r2, #224	; 0xe0
     c20:	00d2      	lsls	r2, r2, #3
     c22:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     c24:	4a10      	ldr	r2, [pc, #64]	; (c68 <adc_init+0x358>)
     c26:	6851      	ldr	r1, [r2, #4]
     c28:	0149      	lsls	r1, r1, #5
     c2a:	6812      	ldr	r2, [r2, #0]
     c2c:	0ed2      	lsrs	r2, r2, #27
     c2e:	430a      	orrs	r2, r1
     c30:	b2d2      	uxtb	r2, r2
			) |
     c32:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     c34:	4642      	mov	r2, r8
     c36:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     c38:	2000      	movs	r0, #0
     c3a:	e67c      	b.n	936 <adc_init+0x26>
     c3c:	40000400 	.word	0x40000400
     c40:	40000800 	.word	0x40000800
     c44:	200002c0 	.word	0x200002c0
     c48:	00001e91 	.word	0x00001e91
     c4c:	00001e05 	.word	0x00001e05
     c50:	00003885 	.word	0x00003885
     c54:	0000508c 	.word	0x0000508c
     c58:	00001f89 	.word	0x00001f89
     c5c:	00004fb8 	.word	0x00004fb8
     c60:	00000fff 	.word	0x00000fff
     c64:	00806024 	.word	0x00806024
     c68:	00806020 	.word	0x00806020
		switch (resolution) {
     c6c:	2c00      	cmp	r4, #0
     c6e:	d000      	beq.n	c72 <adc_init+0x362>
     c70:	e77f      	b.n	b72 <adc_init+0x262>
			if (config->differential_mode &&
     c72:	7cf2      	ldrb	r2, [r6, #19]
     c74:	2a00      	cmp	r2, #0
     c76:	d00f      	beq.n	c98 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     c78:	69f2      	ldr	r2, [r6, #28]
     c7a:	2180      	movs	r1, #128	; 0x80
     c7c:	0109      	lsls	r1, r1, #4
     c7e:	468c      	mov	ip, r1
     c80:	4462      	add	r2, ip
			if (config->differential_mode &&
     c82:	492a      	ldr	r1, [pc, #168]	; (d2c <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     c84:	2017      	movs	r0, #23
			if (config->differential_mode &&
     c86:	428a      	cmp	r2, r1
     c88:	d900      	bls.n	c8c <adc_init+0x37c>
     c8a:	e654      	b.n	936 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     c8c:	6a32      	ldr	r2, [r6, #32]
     c8e:	4462      	add	r2, ip
     c90:	4926      	ldr	r1, [pc, #152]	; (d2c <adc_init+0x41c>)
     c92:	428a      	cmp	r2, r1
     c94:	d900      	bls.n	c98 <adc_init+0x388>
     c96:	e64e      	b.n	936 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     c98:	4a24      	ldr	r2, [pc, #144]	; (d2c <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     c9a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     c9c:	69f1      	ldr	r1, [r6, #28]
     c9e:	4291      	cmp	r1, r2
     ca0:	dd00      	ble.n	ca4 <adc_init+0x394>
     ca2:	e648      	b.n	936 <adc_init+0x26>
     ca4:	6a31      	ldr	r1, [r6, #32]
     ca6:	4291      	cmp	r1, r2
     ca8:	dd00      	ble.n	cac <adc_init+0x39c>
     caa:	e644      	b.n	936 <adc_init+0x26>
     cac:	e761      	b.n	b72 <adc_init+0x262>
			if (config->differential_mode &&
     cae:	7cf2      	ldrb	r2, [r6, #19]
     cb0:	2a00      	cmp	r2, #0
     cb2:	d00f      	beq.n	cd4 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     cb4:	69f2      	ldr	r2, [r6, #28]
     cb6:	2180      	movs	r1, #128	; 0x80
     cb8:	0089      	lsls	r1, r1, #2
     cba:	468c      	mov	ip, r1
     cbc:	4462      	add	r2, ip
			if (config->differential_mode &&
     cbe:	491c      	ldr	r1, [pc, #112]	; (d30 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     cc0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     cc2:	428a      	cmp	r2, r1
     cc4:	d900      	bls.n	cc8 <adc_init+0x3b8>
     cc6:	e636      	b.n	936 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     cc8:	6a32      	ldr	r2, [r6, #32]
     cca:	4462      	add	r2, ip
     ccc:	4918      	ldr	r1, [pc, #96]	; (d30 <adc_init+0x420>)
     cce:	428a      	cmp	r2, r1
     cd0:	d900      	bls.n	cd4 <adc_init+0x3c4>
     cd2:	e630      	b.n	936 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     cd4:	4a16      	ldr	r2, [pc, #88]	; (d30 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     cd6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     cd8:	69f1      	ldr	r1, [r6, #28]
     cda:	4291      	cmp	r1, r2
     cdc:	dd00      	ble.n	ce0 <adc_init+0x3d0>
     cde:	e62a      	b.n	936 <adc_init+0x26>
     ce0:	6a31      	ldr	r1, [r6, #32]
     ce2:	4291      	cmp	r1, r2
     ce4:	dd00      	ble.n	ce8 <adc_init+0x3d8>
     ce6:	e626      	b.n	936 <adc_init+0x26>
     ce8:	e743      	b.n	b72 <adc_init+0x262>
			if (config->differential_mode &&
     cea:	7cf2      	ldrb	r2, [r6, #19]
     cec:	2a00      	cmp	r2, #0
     cee:	d00f      	beq.n	d10 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     cf0:	69f2      	ldr	r2, [r6, #28]
     cf2:	2180      	movs	r1, #128	; 0x80
     cf4:	0209      	lsls	r1, r1, #8
     cf6:	468c      	mov	ip, r1
     cf8:	4462      	add	r2, ip
			if (config->differential_mode &&
     cfa:	490e      	ldr	r1, [pc, #56]	; (d34 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     cfc:	2017      	movs	r0, #23
			if (config->differential_mode &&
     cfe:	428a      	cmp	r2, r1
     d00:	d900      	bls.n	d04 <adc_init+0x3f4>
     d02:	e618      	b.n	936 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     d04:	6a32      	ldr	r2, [r6, #32]
     d06:	4462      	add	r2, ip
     d08:	490a      	ldr	r1, [pc, #40]	; (d34 <adc_init+0x424>)
     d0a:	428a      	cmp	r2, r1
     d0c:	d900      	bls.n	d10 <adc_init+0x400>
     d0e:	e612      	b.n	936 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     d10:	4a08      	ldr	r2, [pc, #32]	; (d34 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     d12:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     d14:	69f1      	ldr	r1, [r6, #28]
     d16:	4291      	cmp	r1, r2
     d18:	dd00      	ble.n	d1c <adc_init+0x40c>
     d1a:	e60c      	b.n	936 <adc_init+0x26>
     d1c:	6a31      	ldr	r1, [r6, #32]
     d1e:	4291      	cmp	r1, r2
     d20:	dd00      	ble.n	d24 <adc_init+0x414>
     d22:	e608      	b.n	936 <adc_init+0x26>
     d24:	e725      	b.n	b72 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     d26:	2017      	movs	r0, #23
     d28:	e605      	b.n	936 <adc_init+0x26>
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	00000fff 	.word	0x00000fff
     d30:	000003ff 	.word	0x000003ff
     d34:	0000ffff 	.word	0x0000ffff

00000d38 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     d38:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     d3a:	4b2f      	ldr	r3, [pc, #188]	; (df8 <ADC_Handler+0xc0>)
     d3c:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     d3e:	682b      	ldr	r3, [r5, #0]
     d40:	7e1a      	ldrb	r2, [r3, #24]
     d42:	7ddc      	ldrb	r4, [r3, #23]
     d44:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     d46:	07e2      	lsls	r2, r4, #31
     d48:	d416      	bmi.n	d78 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     d4a:	0763      	lsls	r3, r4, #29
     d4c:	d508      	bpl.n	d60 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     d4e:	2304      	movs	r3, #4
     d50:	682a      	ldr	r2, [r5, #0]
     d52:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     d54:	7eeb      	ldrb	r3, [r5, #27]
     d56:	079b      	lsls	r3, r3, #30
     d58:	d502      	bpl.n	d60 <ADC_Handler+0x28>
     d5a:	7eab      	ldrb	r3, [r5, #26]
     d5c:	079b      	lsls	r3, r3, #30
     d5e:	d442      	bmi.n	de6 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     d60:	07a3      	lsls	r3, r4, #30
     d62:	d508      	bpl.n	d76 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     d64:	2302      	movs	r3, #2
     d66:	682a      	ldr	r2, [r5, #0]
     d68:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     d6a:	7eeb      	ldrb	r3, [r5, #27]
     d6c:	075b      	lsls	r3, r3, #29
     d6e:	d502      	bpl.n	d76 <ADC_Handler+0x3e>
     d70:	7eab      	ldrb	r3, [r5, #26]
     d72:	075b      	lsls	r3, r3, #29
     d74:	d43b      	bmi.n	dee <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     d76:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     d78:	2201      	movs	r2, #1
     d7a:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     d7c:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d7e:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     d80:	b25b      	sxtb	r3, r3
     d82:	2b00      	cmp	r3, #0
     d84:	dbfb      	blt.n	d7e <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     d86:	6969      	ldr	r1, [r5, #20]
     d88:	1c8b      	adds	r3, r1, #2
     d8a:	616b      	str	r3, [r5, #20]
     d8c:	8b53      	ldrh	r3, [r2, #26]
     d8e:	b29b      	uxth	r3, r3
     d90:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     d92:	8b2b      	ldrh	r3, [r5, #24]
     d94:	3b01      	subs	r3, #1
     d96:	b29b      	uxth	r3, r3
     d98:	832b      	strh	r3, [r5, #24]
     d9a:	2b00      	cmp	r3, #0
     d9c:	d011      	beq.n	dc2 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     d9e:	7f6b      	ldrb	r3, [r5, #29]
     da0:	2b00      	cmp	r3, #0
     da2:	d0d2      	beq.n	d4a <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     da4:	682a      	ldr	r2, [r5, #0]
     da6:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     da8:	b25b      	sxtb	r3, r3
     daa:	2b00      	cmp	r3, #0
     dac:	dbfb      	blt.n	da6 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     dae:	7b13      	ldrb	r3, [r2, #12]
     db0:	2102      	movs	r1, #2
     db2:	430b      	orrs	r3, r1
     db4:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     db6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     db8:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     dba:	b25b      	sxtb	r3, r3
     dbc:	2b00      	cmp	r3, #0
     dbe:	dbfb      	blt.n	db8 <ADC_Handler+0x80>
     dc0:	e7c3      	b.n	d4a <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     dc2:	2301      	movs	r3, #1
     dc4:	682a      	ldr	r2, [r5, #0]
     dc6:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     dc8:	7f2b      	ldrb	r3, [r5, #28]
     dca:	2b05      	cmp	r3, #5
     dcc:	d1bd      	bne.n	d4a <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     dce:	2300      	movs	r3, #0
     dd0:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     dd2:	7eeb      	ldrb	r3, [r5, #27]
     dd4:	07db      	lsls	r3, r3, #31
     dd6:	d5b8      	bpl.n	d4a <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     dd8:	7eab      	ldrb	r3, [r5, #26]
     dda:	07db      	lsls	r3, r3, #31
     ddc:	d5b5      	bpl.n	d4a <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     dde:	0028      	movs	r0, r5
     de0:	68ab      	ldr	r3, [r5, #8]
     de2:	4798      	blx	r3
     de4:	e7b1      	b.n	d4a <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     de6:	0028      	movs	r0, r5
     de8:	68eb      	ldr	r3, [r5, #12]
     dea:	4798      	blx	r3
     dec:	e7b8      	b.n	d60 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     dee:	692b      	ldr	r3, [r5, #16]
     df0:	0028      	movs	r0, r5
     df2:	4798      	blx	r3
}
     df4:	e7bf      	b.n	d76 <ADC_Handler+0x3e>
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	200002c0 	.word	0x200002c0

00000dfc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     dfc:	b500      	push	{lr}
     dfe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e00:	ab01      	add	r3, sp, #4
     e02:	2280      	movs	r2, #128	; 0x80
     e04:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e06:	780a      	ldrb	r2, [r1, #0]
     e08:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e0a:	784a      	ldrb	r2, [r1, #1]
     e0c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e0e:	788a      	ldrb	r2, [r1, #2]
     e10:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e12:	0019      	movs	r1, r3
     e14:	4b01      	ldr	r3, [pc, #4]	; (e1c <port_pin_set_config+0x20>)
     e16:	4798      	blx	r3
}
     e18:	b003      	add	sp, #12
     e1a:	bd00      	pop	{pc}
     e1c:	00001f89 	.word	0x00001f89

00000e20 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     e20:	b5f0      	push	{r4, r5, r6, r7, lr}
     e22:	46de      	mov	lr, fp
     e24:	4657      	mov	r7, sl
     e26:	464e      	mov	r6, r9
     e28:	4645      	mov	r5, r8
     e2a:	b5e0      	push	{r5, r6, r7, lr}
     e2c:	b087      	sub	sp, #28
     e2e:	4680      	mov	r8, r0
     e30:	9104      	str	r1, [sp, #16]
     e32:	0016      	movs	r6, r2
     e34:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     e36:	2200      	movs	r2, #0
     e38:	2300      	movs	r3, #0
     e3a:	2100      	movs	r1, #0
     e3c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     e3e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     e40:	2001      	movs	r0, #1
     e42:	0021      	movs	r1, r4
     e44:	9600      	str	r6, [sp, #0]
     e46:	9701      	str	r7, [sp, #4]
     e48:	465c      	mov	r4, fp
     e4a:	9403      	str	r4, [sp, #12]
     e4c:	4644      	mov	r4, r8
     e4e:	9405      	str	r4, [sp, #20]
     e50:	e013      	b.n	e7a <long_division+0x5a>
     e52:	2420      	movs	r4, #32
     e54:	1a64      	subs	r4, r4, r1
     e56:	0005      	movs	r5, r0
     e58:	40e5      	lsrs	r5, r4
     e5a:	46a8      	mov	r8, r5
     e5c:	e014      	b.n	e88 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     e5e:	9c00      	ldr	r4, [sp, #0]
     e60:	9d01      	ldr	r5, [sp, #4]
     e62:	1b12      	subs	r2, r2, r4
     e64:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     e66:	465c      	mov	r4, fp
     e68:	464d      	mov	r5, r9
     e6a:	432c      	orrs	r4, r5
     e6c:	46a3      	mov	fp, r4
     e6e:	9c03      	ldr	r4, [sp, #12]
     e70:	4645      	mov	r5, r8
     e72:	432c      	orrs	r4, r5
     e74:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     e76:	3901      	subs	r1, #1
     e78:	d325      	bcc.n	ec6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     e7a:	2420      	movs	r4, #32
     e7c:	4264      	negs	r4, r4
     e7e:	190c      	adds	r4, r1, r4
     e80:	d4e7      	bmi.n	e52 <long_division+0x32>
     e82:	0005      	movs	r5, r0
     e84:	40a5      	lsls	r5, r4
     e86:	46a8      	mov	r8, r5
     e88:	0004      	movs	r4, r0
     e8a:	408c      	lsls	r4, r1
     e8c:	46a1      	mov	r9, r4
		r = r << 1;
     e8e:	1892      	adds	r2, r2, r2
     e90:	415b      	adcs	r3, r3
     e92:	0014      	movs	r4, r2
     e94:	001d      	movs	r5, r3
		if (n & bit_shift) {
     e96:	9e05      	ldr	r6, [sp, #20]
     e98:	464f      	mov	r7, r9
     e9a:	403e      	ands	r6, r7
     e9c:	46b4      	mov	ip, r6
     e9e:	9e04      	ldr	r6, [sp, #16]
     ea0:	4647      	mov	r7, r8
     ea2:	403e      	ands	r6, r7
     ea4:	46b2      	mov	sl, r6
     ea6:	4666      	mov	r6, ip
     ea8:	4657      	mov	r7, sl
     eaa:	433e      	orrs	r6, r7
     eac:	d003      	beq.n	eb6 <long_division+0x96>
			r |= 0x01;
     eae:	0006      	movs	r6, r0
     eb0:	4326      	orrs	r6, r4
     eb2:	0032      	movs	r2, r6
     eb4:	002b      	movs	r3, r5
		if (r >= d) {
     eb6:	9c00      	ldr	r4, [sp, #0]
     eb8:	9d01      	ldr	r5, [sp, #4]
     eba:	429d      	cmp	r5, r3
     ebc:	d8db      	bhi.n	e76 <long_division+0x56>
     ebe:	d1ce      	bne.n	e5e <long_division+0x3e>
     ec0:	4294      	cmp	r4, r2
     ec2:	d8d8      	bhi.n	e76 <long_division+0x56>
     ec4:	e7cb      	b.n	e5e <long_division+0x3e>
     ec6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     ec8:	4658      	mov	r0, fp
     eca:	0019      	movs	r1, r3
     ecc:	b007      	add	sp, #28
     ece:	bc3c      	pop	{r2, r3, r4, r5}
     ed0:	4690      	mov	r8, r2
     ed2:	4699      	mov	r9, r3
     ed4:	46a2      	mov	sl, r4
     ed6:	46ab      	mov	fp, r5
     ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000eda <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     eda:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     edc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ede:	2340      	movs	r3, #64	; 0x40
     ee0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     ee2:	4281      	cmp	r1, r0
     ee4:	d202      	bcs.n	eec <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     ee6:	0018      	movs	r0, r3
     ee8:	bd10      	pop	{r4, pc}
		baud_calculated++;
     eea:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     eec:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     eee:	1c63      	adds	r3, r4, #1
     ef0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     ef2:	4288      	cmp	r0, r1
     ef4:	d9f9      	bls.n	eea <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ef6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     ef8:	2cff      	cmp	r4, #255	; 0xff
     efa:	d8f4      	bhi.n	ee6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     efc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     efe:	2300      	movs	r3, #0
     f00:	e7f1      	b.n	ee6 <_sercom_get_sync_baud_val+0xc>
	...

00000f04 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     f04:	b5f0      	push	{r4, r5, r6, r7, lr}
     f06:	b083      	sub	sp, #12
     f08:	000f      	movs	r7, r1
     f0a:	0016      	movs	r6, r2
     f0c:	aa08      	add	r2, sp, #32
     f0e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     f10:	0004      	movs	r4, r0
     f12:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f14:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     f16:	42bc      	cmp	r4, r7
     f18:	d902      	bls.n	f20 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     f1a:	0010      	movs	r0, r2
     f1c:	b003      	add	sp, #12
     f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     f20:	2b00      	cmp	r3, #0
     f22:	d114      	bne.n	f4e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     f24:	0002      	movs	r2, r0
     f26:	0008      	movs	r0, r1
     f28:	2100      	movs	r1, #0
     f2a:	4c19      	ldr	r4, [pc, #100]	; (f90 <_sercom_get_async_baud_val+0x8c>)
     f2c:	47a0      	blx	r4
     f2e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     f30:	003a      	movs	r2, r7
     f32:	2300      	movs	r3, #0
     f34:	2000      	movs	r0, #0
     f36:	4c17      	ldr	r4, [pc, #92]	; (f94 <_sercom_get_async_baud_val+0x90>)
     f38:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     f3a:	2200      	movs	r2, #0
     f3c:	2301      	movs	r3, #1
     f3e:	1a12      	subs	r2, r2, r0
     f40:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     f42:	0c12      	lsrs	r2, r2, #16
     f44:	041b      	lsls	r3, r3, #16
     f46:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     f48:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     f4a:	2200      	movs	r2, #0
     f4c:	e7e5      	b.n	f1a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     f4e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     f50:	2b01      	cmp	r3, #1
     f52:	d1f9      	bne.n	f48 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     f54:	000a      	movs	r2, r1
     f56:	2300      	movs	r3, #0
     f58:	2100      	movs	r1, #0
     f5a:	4c0d      	ldr	r4, [pc, #52]	; (f90 <_sercom_get_async_baud_val+0x8c>)
     f5c:	47a0      	blx	r4
     f5e:	0002      	movs	r2, r0
     f60:	000b      	movs	r3, r1
     f62:	9200      	str	r2, [sp, #0]
     f64:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     f66:	0038      	movs	r0, r7
     f68:	2100      	movs	r1, #0
     f6a:	4c0a      	ldr	r4, [pc, #40]	; (f94 <_sercom_get_async_baud_val+0x90>)
     f6c:	47a0      	blx	r4
     f6e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     f70:	2380      	movs	r3, #128	; 0x80
     f72:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     f74:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     f76:	4298      	cmp	r0, r3
     f78:	d8cf      	bhi.n	f1a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     f7a:	0f79      	lsrs	r1, r7, #29
     f7c:	00f8      	lsls	r0, r7, #3
     f7e:	9a00      	ldr	r2, [sp, #0]
     f80:	9b01      	ldr	r3, [sp, #4]
     f82:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     f84:	00ea      	lsls	r2, r5, #3
     f86:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     f88:	b2d2      	uxtb	r2, r2
     f8a:	0352      	lsls	r2, r2, #13
     f8c:	432a      	orrs	r2, r5
     f8e:	e7db      	b.n	f48 <_sercom_get_async_baud_val+0x44>
     f90:	000037d5 	.word	0x000037d5
     f94:	00000e21 	.word	0x00000e21

00000f98 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     f98:	b510      	push	{r4, lr}
     f9a:	b082      	sub	sp, #8
     f9c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     f9e:	4b0e      	ldr	r3, [pc, #56]	; (fd8 <sercom_set_gclk_generator+0x40>)
     fa0:	781b      	ldrb	r3, [r3, #0]
     fa2:	2b00      	cmp	r3, #0
     fa4:	d007      	beq.n	fb6 <sercom_set_gclk_generator+0x1e>
     fa6:	2900      	cmp	r1, #0
     fa8:	d105      	bne.n	fb6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     faa:	4b0b      	ldr	r3, [pc, #44]	; (fd8 <sercom_set_gclk_generator+0x40>)
     fac:	785b      	ldrb	r3, [r3, #1]
     fae:	4283      	cmp	r3, r0
     fb0:	d010      	beq.n	fd4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     fb2:	201d      	movs	r0, #29
     fb4:	e00c      	b.n	fd0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     fb6:	a901      	add	r1, sp, #4
     fb8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     fba:	2013      	movs	r0, #19
     fbc:	4b07      	ldr	r3, [pc, #28]	; (fdc <sercom_set_gclk_generator+0x44>)
     fbe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     fc0:	2013      	movs	r0, #19
     fc2:	4b07      	ldr	r3, [pc, #28]	; (fe0 <sercom_set_gclk_generator+0x48>)
     fc4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     fc6:	4b04      	ldr	r3, [pc, #16]	; (fd8 <sercom_set_gclk_generator+0x40>)
     fc8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     fca:	2201      	movs	r2, #1
     fcc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     fce:	2000      	movs	r0, #0
}
     fd0:	b002      	add	sp, #8
     fd2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     fd4:	2000      	movs	r0, #0
     fd6:	e7fb      	b.n	fd0 <sercom_set_gclk_generator+0x38>
     fd8:	2000026c 	.word	0x2000026c
     fdc:	00001e91 	.word	0x00001e91
     fe0:	00001e05 	.word	0x00001e05

00000fe4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     fe4:	4b40      	ldr	r3, [pc, #256]	; (10e8 <_sercom_get_default_pad+0x104>)
     fe6:	4298      	cmp	r0, r3
     fe8:	d031      	beq.n	104e <_sercom_get_default_pad+0x6a>
     fea:	d90a      	bls.n	1002 <_sercom_get_default_pad+0x1e>
     fec:	4b3f      	ldr	r3, [pc, #252]	; (10ec <_sercom_get_default_pad+0x108>)
     fee:	4298      	cmp	r0, r3
     ff0:	d04d      	beq.n	108e <_sercom_get_default_pad+0xaa>
     ff2:	4b3f      	ldr	r3, [pc, #252]	; (10f0 <_sercom_get_default_pad+0x10c>)
     ff4:	4298      	cmp	r0, r3
     ff6:	d05a      	beq.n	10ae <_sercom_get_default_pad+0xca>
     ff8:	4b3e      	ldr	r3, [pc, #248]	; (10f4 <_sercom_get_default_pad+0x110>)
     ffa:	4298      	cmp	r0, r3
     ffc:	d037      	beq.n	106e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     ffe:	2000      	movs	r0, #0
}
    1000:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1002:	4b3d      	ldr	r3, [pc, #244]	; (10f8 <_sercom_get_default_pad+0x114>)
    1004:	4298      	cmp	r0, r3
    1006:	d00c      	beq.n	1022 <_sercom_get_default_pad+0x3e>
    1008:	4b3c      	ldr	r3, [pc, #240]	; (10fc <_sercom_get_default_pad+0x118>)
    100a:	4298      	cmp	r0, r3
    100c:	d1f7      	bne.n	ffe <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    100e:	2901      	cmp	r1, #1
    1010:	d017      	beq.n	1042 <_sercom_get_default_pad+0x5e>
    1012:	2900      	cmp	r1, #0
    1014:	d05d      	beq.n	10d2 <_sercom_get_default_pad+0xee>
    1016:	2902      	cmp	r1, #2
    1018:	d015      	beq.n	1046 <_sercom_get_default_pad+0x62>
    101a:	2903      	cmp	r1, #3
    101c:	d015      	beq.n	104a <_sercom_get_default_pad+0x66>
	return 0;
    101e:	2000      	movs	r0, #0
    1020:	e7ee      	b.n	1000 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1022:	2901      	cmp	r1, #1
    1024:	d007      	beq.n	1036 <_sercom_get_default_pad+0x52>
    1026:	2900      	cmp	r1, #0
    1028:	d051      	beq.n	10ce <_sercom_get_default_pad+0xea>
    102a:	2902      	cmp	r1, #2
    102c:	d005      	beq.n	103a <_sercom_get_default_pad+0x56>
    102e:	2903      	cmp	r1, #3
    1030:	d005      	beq.n	103e <_sercom_get_default_pad+0x5a>
	return 0;
    1032:	2000      	movs	r0, #0
    1034:	e7e4      	b.n	1000 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1036:	4832      	ldr	r0, [pc, #200]	; (1100 <_sercom_get_default_pad+0x11c>)
    1038:	e7e2      	b.n	1000 <_sercom_get_default_pad+0x1c>
    103a:	4832      	ldr	r0, [pc, #200]	; (1104 <_sercom_get_default_pad+0x120>)
    103c:	e7e0      	b.n	1000 <_sercom_get_default_pad+0x1c>
    103e:	4832      	ldr	r0, [pc, #200]	; (1108 <_sercom_get_default_pad+0x124>)
    1040:	e7de      	b.n	1000 <_sercom_get_default_pad+0x1c>
    1042:	4832      	ldr	r0, [pc, #200]	; (110c <_sercom_get_default_pad+0x128>)
    1044:	e7dc      	b.n	1000 <_sercom_get_default_pad+0x1c>
    1046:	4832      	ldr	r0, [pc, #200]	; (1110 <_sercom_get_default_pad+0x12c>)
    1048:	e7da      	b.n	1000 <_sercom_get_default_pad+0x1c>
    104a:	4832      	ldr	r0, [pc, #200]	; (1114 <_sercom_get_default_pad+0x130>)
    104c:	e7d8      	b.n	1000 <_sercom_get_default_pad+0x1c>
    104e:	2901      	cmp	r1, #1
    1050:	d007      	beq.n	1062 <_sercom_get_default_pad+0x7e>
    1052:	2900      	cmp	r1, #0
    1054:	d03f      	beq.n	10d6 <_sercom_get_default_pad+0xf2>
    1056:	2902      	cmp	r1, #2
    1058:	d005      	beq.n	1066 <_sercom_get_default_pad+0x82>
    105a:	2903      	cmp	r1, #3
    105c:	d005      	beq.n	106a <_sercom_get_default_pad+0x86>
	return 0;
    105e:	2000      	movs	r0, #0
    1060:	e7ce      	b.n	1000 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1062:	482d      	ldr	r0, [pc, #180]	; (1118 <_sercom_get_default_pad+0x134>)
    1064:	e7cc      	b.n	1000 <_sercom_get_default_pad+0x1c>
    1066:	482d      	ldr	r0, [pc, #180]	; (111c <_sercom_get_default_pad+0x138>)
    1068:	e7ca      	b.n	1000 <_sercom_get_default_pad+0x1c>
    106a:	482d      	ldr	r0, [pc, #180]	; (1120 <_sercom_get_default_pad+0x13c>)
    106c:	e7c8      	b.n	1000 <_sercom_get_default_pad+0x1c>
    106e:	2901      	cmp	r1, #1
    1070:	d007      	beq.n	1082 <_sercom_get_default_pad+0x9e>
    1072:	2900      	cmp	r1, #0
    1074:	d031      	beq.n	10da <_sercom_get_default_pad+0xf6>
    1076:	2902      	cmp	r1, #2
    1078:	d005      	beq.n	1086 <_sercom_get_default_pad+0xa2>
    107a:	2903      	cmp	r1, #3
    107c:	d005      	beq.n	108a <_sercom_get_default_pad+0xa6>
	return 0;
    107e:	2000      	movs	r0, #0
    1080:	e7be      	b.n	1000 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1082:	4828      	ldr	r0, [pc, #160]	; (1124 <_sercom_get_default_pad+0x140>)
    1084:	e7bc      	b.n	1000 <_sercom_get_default_pad+0x1c>
    1086:	4828      	ldr	r0, [pc, #160]	; (1128 <_sercom_get_default_pad+0x144>)
    1088:	e7ba      	b.n	1000 <_sercom_get_default_pad+0x1c>
    108a:	4828      	ldr	r0, [pc, #160]	; (112c <_sercom_get_default_pad+0x148>)
    108c:	e7b8      	b.n	1000 <_sercom_get_default_pad+0x1c>
    108e:	2901      	cmp	r1, #1
    1090:	d007      	beq.n	10a2 <_sercom_get_default_pad+0xbe>
    1092:	2900      	cmp	r1, #0
    1094:	d023      	beq.n	10de <_sercom_get_default_pad+0xfa>
    1096:	2902      	cmp	r1, #2
    1098:	d005      	beq.n	10a6 <_sercom_get_default_pad+0xc2>
    109a:	2903      	cmp	r1, #3
    109c:	d005      	beq.n	10aa <_sercom_get_default_pad+0xc6>
	return 0;
    109e:	2000      	movs	r0, #0
    10a0:	e7ae      	b.n	1000 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10a2:	4823      	ldr	r0, [pc, #140]	; (1130 <_sercom_get_default_pad+0x14c>)
    10a4:	e7ac      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10a6:	4823      	ldr	r0, [pc, #140]	; (1134 <_sercom_get_default_pad+0x150>)
    10a8:	e7aa      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10aa:	4823      	ldr	r0, [pc, #140]	; (1138 <_sercom_get_default_pad+0x154>)
    10ac:	e7a8      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10ae:	2901      	cmp	r1, #1
    10b0:	d007      	beq.n	10c2 <_sercom_get_default_pad+0xde>
    10b2:	2900      	cmp	r1, #0
    10b4:	d015      	beq.n	10e2 <_sercom_get_default_pad+0xfe>
    10b6:	2902      	cmp	r1, #2
    10b8:	d005      	beq.n	10c6 <_sercom_get_default_pad+0xe2>
    10ba:	2903      	cmp	r1, #3
    10bc:	d005      	beq.n	10ca <_sercom_get_default_pad+0xe6>
	return 0;
    10be:	2000      	movs	r0, #0
    10c0:	e79e      	b.n	1000 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10c2:	481e      	ldr	r0, [pc, #120]	; (113c <_sercom_get_default_pad+0x158>)
    10c4:	e79c      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10c6:	481e      	ldr	r0, [pc, #120]	; (1140 <_sercom_get_default_pad+0x15c>)
    10c8:	e79a      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10ca:	481e      	ldr	r0, [pc, #120]	; (1144 <_sercom_get_default_pad+0x160>)
    10cc:	e798      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10ce:	481e      	ldr	r0, [pc, #120]	; (1148 <_sercom_get_default_pad+0x164>)
    10d0:	e796      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10d2:	2003      	movs	r0, #3
    10d4:	e794      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10d6:	481d      	ldr	r0, [pc, #116]	; (114c <_sercom_get_default_pad+0x168>)
    10d8:	e792      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10da:	481d      	ldr	r0, [pc, #116]	; (1150 <_sercom_get_default_pad+0x16c>)
    10dc:	e790      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10de:	481d      	ldr	r0, [pc, #116]	; (1154 <_sercom_get_default_pad+0x170>)
    10e0:	e78e      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10e2:	481d      	ldr	r0, [pc, #116]	; (1158 <_sercom_get_default_pad+0x174>)
    10e4:	e78c      	b.n	1000 <_sercom_get_default_pad+0x1c>
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	42001000 	.word	0x42001000
    10ec:	42001800 	.word	0x42001800
    10f0:	42001c00 	.word	0x42001c00
    10f4:	42001400 	.word	0x42001400
    10f8:	42000800 	.word	0x42000800
    10fc:	42000c00 	.word	0x42000c00
    1100:	00050003 	.word	0x00050003
    1104:	00060003 	.word	0x00060003
    1108:	00070003 	.word	0x00070003
    110c:	00010003 	.word	0x00010003
    1110:	001e0003 	.word	0x001e0003
    1114:	001f0003 	.word	0x001f0003
    1118:	00090003 	.word	0x00090003
    111c:	000a0003 	.word	0x000a0003
    1120:	000b0003 	.word	0x000b0003
    1124:	00110003 	.word	0x00110003
    1128:	00120003 	.word	0x00120003
    112c:	00130003 	.word	0x00130003
    1130:	000d0003 	.word	0x000d0003
    1134:	000e0003 	.word	0x000e0003
    1138:	000f0003 	.word	0x000f0003
    113c:	00170003 	.word	0x00170003
    1140:	00180003 	.word	0x00180003
    1144:	00190003 	.word	0x00190003
    1148:	00040003 	.word	0x00040003
    114c:	00080003 	.word	0x00080003
    1150:	00100003 	.word	0x00100003
    1154:	000c0003 	.word	0x000c0003
    1158:	00160003 	.word	0x00160003

0000115c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    115c:	b530      	push	{r4, r5, lr}
    115e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1160:	4b0b      	ldr	r3, [pc, #44]	; (1190 <_sercom_get_sercom_inst_index+0x34>)
    1162:	466a      	mov	r2, sp
    1164:	cb32      	ldmia	r3!, {r1, r4, r5}
    1166:	c232      	stmia	r2!, {r1, r4, r5}
    1168:	cb32      	ldmia	r3!, {r1, r4, r5}
    116a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    116c:	9b00      	ldr	r3, [sp, #0]
    116e:	4283      	cmp	r3, r0
    1170:	d00b      	beq.n	118a <_sercom_get_sercom_inst_index+0x2e>
    1172:	2301      	movs	r3, #1
    1174:	009a      	lsls	r2, r3, #2
    1176:	4669      	mov	r1, sp
    1178:	5852      	ldr	r2, [r2, r1]
    117a:	4282      	cmp	r2, r0
    117c:	d006      	beq.n	118c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    117e:	3301      	adds	r3, #1
    1180:	2b06      	cmp	r3, #6
    1182:	d1f7      	bne.n	1174 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1184:	2000      	movs	r0, #0
}
    1186:	b007      	add	sp, #28
    1188:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    118a:	2300      	movs	r3, #0
			return i;
    118c:	b2d8      	uxtb	r0, r3
    118e:	e7fa      	b.n	1186 <_sercom_get_sercom_inst_index+0x2a>
    1190:	000050dc 	.word	0x000050dc

00001194 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1194:	4770      	bx	lr
	...

00001198 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1198:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    119a:	4b0a      	ldr	r3, [pc, #40]	; (11c4 <_sercom_set_handler+0x2c>)
    119c:	781b      	ldrb	r3, [r3, #0]
    119e:	2b00      	cmp	r3, #0
    11a0:	d10c      	bne.n	11bc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11a2:	4f09      	ldr	r7, [pc, #36]	; (11c8 <_sercom_set_handler+0x30>)
    11a4:	4e09      	ldr	r6, [pc, #36]	; (11cc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    11a6:	4d0a      	ldr	r5, [pc, #40]	; (11d0 <_sercom_set_handler+0x38>)
    11a8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11aa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    11ac:	195a      	adds	r2, r3, r5
    11ae:	6014      	str	r4, [r2, #0]
    11b0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11b2:	2b18      	cmp	r3, #24
    11b4:	d1f9      	bne.n	11aa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    11b6:	2201      	movs	r2, #1
    11b8:	4b02      	ldr	r3, [pc, #8]	; (11c4 <_sercom_set_handler+0x2c>)
    11ba:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    11bc:	0080      	lsls	r0, r0, #2
    11be:	4b02      	ldr	r3, [pc, #8]	; (11c8 <_sercom_set_handler+0x30>)
    11c0:	50c1      	str	r1, [r0, r3]
}
    11c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11c4:	2000026e 	.word	0x2000026e
    11c8:	20000270 	.word	0x20000270
    11cc:	00001195 	.word	0x00001195
    11d0:	200002c4 	.word	0x200002c4

000011d4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    11d4:	b500      	push	{lr}
    11d6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    11d8:	2309      	movs	r3, #9
    11da:	466a      	mov	r2, sp
    11dc:	7013      	strb	r3, [r2, #0]
    11de:	3301      	adds	r3, #1
    11e0:	7053      	strb	r3, [r2, #1]
    11e2:	3301      	adds	r3, #1
    11e4:	7093      	strb	r3, [r2, #2]
    11e6:	3301      	adds	r3, #1
    11e8:	70d3      	strb	r3, [r2, #3]
    11ea:	3301      	adds	r3, #1
    11ec:	7113      	strb	r3, [r2, #4]
    11ee:	3301      	adds	r3, #1
    11f0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    11f2:	4b03      	ldr	r3, [pc, #12]	; (1200 <_sercom_get_interrupt_vector+0x2c>)
    11f4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    11f6:	466b      	mov	r3, sp
    11f8:	5618      	ldrsb	r0, [r3, r0]
}
    11fa:	b003      	add	sp, #12
    11fc:	bd00      	pop	{pc}
    11fe:	46c0      	nop			; (mov r8, r8)
    1200:	0000115d 	.word	0x0000115d

00001204 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1204:	b510      	push	{r4, lr}
    1206:	4b02      	ldr	r3, [pc, #8]	; (1210 <SERCOM0_Handler+0xc>)
    1208:	681b      	ldr	r3, [r3, #0]
    120a:	2000      	movs	r0, #0
    120c:	4798      	blx	r3
    120e:	bd10      	pop	{r4, pc}
    1210:	20000270 	.word	0x20000270

00001214 <SERCOM1_Handler>:
    1214:	b510      	push	{r4, lr}
    1216:	4b02      	ldr	r3, [pc, #8]	; (1220 <SERCOM1_Handler+0xc>)
    1218:	685b      	ldr	r3, [r3, #4]
    121a:	2001      	movs	r0, #1
    121c:	4798      	blx	r3
    121e:	bd10      	pop	{r4, pc}
    1220:	20000270 	.word	0x20000270

00001224 <SERCOM2_Handler>:
    1224:	b510      	push	{r4, lr}
    1226:	4b02      	ldr	r3, [pc, #8]	; (1230 <SERCOM2_Handler+0xc>)
    1228:	689b      	ldr	r3, [r3, #8]
    122a:	2002      	movs	r0, #2
    122c:	4798      	blx	r3
    122e:	bd10      	pop	{r4, pc}
    1230:	20000270 	.word	0x20000270

00001234 <SERCOM3_Handler>:
    1234:	b510      	push	{r4, lr}
    1236:	4b02      	ldr	r3, [pc, #8]	; (1240 <SERCOM3_Handler+0xc>)
    1238:	68db      	ldr	r3, [r3, #12]
    123a:	2003      	movs	r0, #3
    123c:	4798      	blx	r3
    123e:	bd10      	pop	{r4, pc}
    1240:	20000270 	.word	0x20000270

00001244 <SERCOM4_Handler>:
    1244:	b510      	push	{r4, lr}
    1246:	4b02      	ldr	r3, [pc, #8]	; (1250 <SERCOM4_Handler+0xc>)
    1248:	691b      	ldr	r3, [r3, #16]
    124a:	2004      	movs	r0, #4
    124c:	4798      	blx	r3
    124e:	bd10      	pop	{r4, pc}
    1250:	20000270 	.word	0x20000270

00001254 <SERCOM5_Handler>:
    1254:	b510      	push	{r4, lr}
    1256:	4b02      	ldr	r3, [pc, #8]	; (1260 <SERCOM5_Handler+0xc>)
    1258:	695b      	ldr	r3, [r3, #20]
    125a:	2005      	movs	r0, #5
    125c:	4798      	blx	r3
    125e:	bd10      	pop	{r4, pc}
    1260:	20000270 	.word	0x20000270

00001264 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1264:	b5f0      	push	{r4, r5, r6, r7, lr}
    1266:	46de      	mov	lr, fp
    1268:	4657      	mov	r7, sl
    126a:	464e      	mov	r6, r9
    126c:	4645      	mov	r5, r8
    126e:	b5e0      	push	{r5, r6, r7, lr}
    1270:	b091      	sub	sp, #68	; 0x44
    1272:	0005      	movs	r5, r0
    1274:	000c      	movs	r4, r1
    1276:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1278:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    127a:	0008      	movs	r0, r1
    127c:	4bba      	ldr	r3, [pc, #744]	; (1568 <usart_init+0x304>)
    127e:	4798      	blx	r3
    1280:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1282:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1284:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1286:	07db      	lsls	r3, r3, #31
    1288:	d506      	bpl.n	1298 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    128a:	b011      	add	sp, #68	; 0x44
    128c:	bc3c      	pop	{r2, r3, r4, r5}
    128e:	4690      	mov	r8, r2
    1290:	4699      	mov	r9, r3
    1292:	46a2      	mov	sl, r4
    1294:	46ab      	mov	fp, r5
    1296:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1298:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    129a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    129c:	079b      	lsls	r3, r3, #30
    129e:	d4f4      	bmi.n	128a <usart_init+0x26>
    12a0:	49b2      	ldr	r1, [pc, #712]	; (156c <usart_init+0x308>)
    12a2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    12a4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    12a6:	2301      	movs	r3, #1
    12a8:	40bb      	lsls	r3, r7
    12aa:	4303      	orrs	r3, r0
    12ac:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    12ae:	a90f      	add	r1, sp, #60	; 0x3c
    12b0:	272d      	movs	r7, #45	; 0x2d
    12b2:	5df3      	ldrb	r3, [r6, r7]
    12b4:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12b6:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    12b8:	b2d3      	uxtb	r3, r2
    12ba:	9302      	str	r3, [sp, #8]
    12bc:	0018      	movs	r0, r3
    12be:	4bac      	ldr	r3, [pc, #688]	; (1570 <usart_init+0x30c>)
    12c0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    12c2:	9802      	ldr	r0, [sp, #8]
    12c4:	4bab      	ldr	r3, [pc, #684]	; (1574 <usart_init+0x310>)
    12c6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    12c8:	5df0      	ldrb	r0, [r6, r7]
    12ca:	2100      	movs	r1, #0
    12cc:	4baa      	ldr	r3, [pc, #680]	; (1578 <usart_init+0x314>)
    12ce:	4798      	blx	r3
	module->character_size = config->character_size;
    12d0:	7af3      	ldrb	r3, [r6, #11]
    12d2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    12d4:	2324      	movs	r3, #36	; 0x24
    12d6:	5cf3      	ldrb	r3, [r6, r3]
    12d8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    12da:	2325      	movs	r3, #37	; 0x25
    12dc:	5cf3      	ldrb	r3, [r6, r3]
    12de:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    12e0:	7ef3      	ldrb	r3, [r6, #27]
    12e2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    12e4:	7f33      	ldrb	r3, [r6, #28]
    12e6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    12e8:	682b      	ldr	r3, [r5, #0]
    12ea:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12ec:	0018      	movs	r0, r3
    12ee:	4b9e      	ldr	r3, [pc, #632]	; (1568 <usart_init+0x304>)
    12f0:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    12f2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    12f4:	2200      	movs	r2, #0
    12f6:	230e      	movs	r3, #14
    12f8:	a906      	add	r1, sp, #24
    12fa:	468c      	mov	ip, r1
    12fc:	4463      	add	r3, ip
    12fe:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1300:	8a32      	ldrh	r2, [r6, #16]
    1302:	9202      	str	r2, [sp, #8]
    1304:	2380      	movs	r3, #128	; 0x80
    1306:	01db      	lsls	r3, r3, #7
    1308:	429a      	cmp	r2, r3
    130a:	d100      	bne.n	130e <usart_init+0xaa>
    130c:	e09a      	b.n	1444 <usart_init+0x1e0>
    130e:	d90f      	bls.n	1330 <usart_init+0xcc>
    1310:	23c0      	movs	r3, #192	; 0xc0
    1312:	01db      	lsls	r3, r3, #7
    1314:	9a02      	ldr	r2, [sp, #8]
    1316:	429a      	cmp	r2, r3
    1318:	d100      	bne.n	131c <usart_init+0xb8>
    131a:	e08e      	b.n	143a <usart_init+0x1d6>
    131c:	2380      	movs	r3, #128	; 0x80
    131e:	021b      	lsls	r3, r3, #8
    1320:	429a      	cmp	r2, r3
    1322:	d000      	beq.n	1326 <usart_init+0xc2>
    1324:	e11b      	b.n	155e <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1326:	2303      	movs	r3, #3
    1328:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    132a:	2300      	movs	r3, #0
    132c:	9307      	str	r3, [sp, #28]
    132e:	e008      	b.n	1342 <usart_init+0xde>
	switch (config->sample_rate) {
    1330:	2380      	movs	r3, #128	; 0x80
    1332:	019b      	lsls	r3, r3, #6
    1334:	429a      	cmp	r2, r3
    1336:	d000      	beq.n	133a <usart_init+0xd6>
    1338:	e111      	b.n	155e <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    133a:	2310      	movs	r3, #16
    133c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    133e:	3b0f      	subs	r3, #15
    1340:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1342:	6833      	ldr	r3, [r6, #0]
    1344:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1346:	68f3      	ldr	r3, [r6, #12]
    1348:	469b      	mov	fp, r3
		config->sample_adjustment |
    134a:	6973      	ldr	r3, [r6, #20]
    134c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    134e:	7e33      	ldrb	r3, [r6, #24]
    1350:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1352:	2326      	movs	r3, #38	; 0x26
    1354:	5cf3      	ldrb	r3, [r6, r3]
    1356:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1358:	6873      	ldr	r3, [r6, #4]
    135a:	4699      	mov	r9, r3
	switch (transfer_mode)
    135c:	2b00      	cmp	r3, #0
    135e:	d100      	bne.n	1362 <usart_init+0xfe>
    1360:	e09c      	b.n	149c <usart_init+0x238>
    1362:	2380      	movs	r3, #128	; 0x80
    1364:	055b      	lsls	r3, r3, #21
    1366:	4599      	cmp	r9, r3
    1368:	d100      	bne.n	136c <usart_init+0x108>
    136a:	e080      	b.n	146e <usart_init+0x20a>
	if(config->encoding_format_enable) {
    136c:	7e73      	ldrb	r3, [r6, #25]
    136e:	2b00      	cmp	r3, #0
    1370:	d002      	beq.n	1378 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1372:	7eb3      	ldrb	r3, [r6, #26]
    1374:	4642      	mov	r2, r8
    1376:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1378:	230e      	movs	r3, #14
    137a:	aa06      	add	r2, sp, #24
    137c:	4694      	mov	ip, r2
    137e:	4463      	add	r3, ip
    1380:	881b      	ldrh	r3, [r3, #0]
    1382:	4642      	mov	r2, r8
    1384:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1386:	9b05      	ldr	r3, [sp, #20]
    1388:	465a      	mov	r2, fp
    138a:	4313      	orrs	r3, r2
    138c:	9a03      	ldr	r2, [sp, #12]
    138e:	4313      	orrs	r3, r2
    1390:	464a      	mov	r2, r9
    1392:	4313      	orrs	r3, r2
    1394:	9f02      	ldr	r7, [sp, #8]
    1396:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1398:	9b04      	ldr	r3, [sp, #16]
    139a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    139c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    139e:	4653      	mov	r3, sl
    13a0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    13a2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    13a4:	2327      	movs	r3, #39	; 0x27
    13a6:	5cf3      	ldrb	r3, [r6, r3]
    13a8:	2b00      	cmp	r3, #0
    13aa:	d101      	bne.n	13b0 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    13ac:	3304      	adds	r3, #4
    13ae:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    13b0:	7e73      	ldrb	r3, [r6, #25]
    13b2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    13b4:	7f32      	ldrb	r2, [r6, #28]
    13b6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    13b8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    13ba:	7f72      	ldrb	r2, [r6, #29]
    13bc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    13be:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    13c0:	2224      	movs	r2, #36	; 0x24
    13c2:	5cb2      	ldrb	r2, [r6, r2]
    13c4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    13c6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    13c8:	2225      	movs	r2, #37	; 0x25
    13ca:	5cb2      	ldrb	r2, [r6, r2]
    13cc:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    13ce:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    13d0:	7ab1      	ldrb	r1, [r6, #10]
    13d2:	7af2      	ldrb	r2, [r6, #11]
    13d4:	4311      	orrs	r1, r2
    13d6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    13d8:	8933      	ldrh	r3, [r6, #8]
    13da:	2bff      	cmp	r3, #255	; 0xff
    13dc:	d100      	bne.n	13e0 <usart_init+0x17c>
    13de:	e081      	b.n	14e4 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    13e0:	2280      	movs	r2, #128	; 0x80
    13e2:	0452      	lsls	r2, r2, #17
    13e4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    13e6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    13e8:	232c      	movs	r3, #44	; 0x2c
    13ea:	5cf3      	ldrb	r3, [r6, r3]
    13ec:	2b00      	cmp	r3, #0
    13ee:	d103      	bne.n	13f8 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    13f0:	4b62      	ldr	r3, [pc, #392]	; (157c <usart_init+0x318>)
    13f2:	789b      	ldrb	r3, [r3, #2]
    13f4:	079b      	lsls	r3, r3, #30
    13f6:	d501      	bpl.n	13fc <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    13f8:	2380      	movs	r3, #128	; 0x80
    13fa:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    13fc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    13fe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1400:	2b00      	cmp	r3, #0
    1402:	d1fc      	bne.n	13fe <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    1404:	4643      	mov	r3, r8
    1406:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1408:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    140a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    140c:	2b00      	cmp	r3, #0
    140e:	d1fc      	bne.n	140a <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1410:	4643      	mov	r3, r8
    1412:	601f      	str	r7, [r3, #0]
    1414:	ab0e      	add	r3, sp, #56	; 0x38
    1416:	2280      	movs	r2, #128	; 0x80
    1418:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    141a:	2200      	movs	r2, #0
    141c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    141e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1420:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1422:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1424:	930a      	str	r3, [sp, #40]	; 0x28
    1426:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1428:	930b      	str	r3, [sp, #44]	; 0x2c
    142a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    142c:	930c      	str	r3, [sp, #48]	; 0x30
    142e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1430:	9302      	str	r3, [sp, #8]
    1432:	930d      	str	r3, [sp, #52]	; 0x34
    1434:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1436:	ae0a      	add	r6, sp, #40	; 0x28
    1438:	e063      	b.n	1502 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    143a:	2308      	movs	r3, #8
    143c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    143e:	3b07      	subs	r3, #7
    1440:	9307      	str	r3, [sp, #28]
    1442:	e77e      	b.n	1342 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1444:	6833      	ldr	r3, [r6, #0]
    1446:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1448:	68f3      	ldr	r3, [r6, #12]
    144a:	469b      	mov	fp, r3
		config->sample_adjustment |
    144c:	6973      	ldr	r3, [r6, #20]
    144e:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1450:	7e33      	ldrb	r3, [r6, #24]
    1452:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1454:	2326      	movs	r3, #38	; 0x26
    1456:	5cf3      	ldrb	r3, [r6, r3]
    1458:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    145a:	6873      	ldr	r3, [r6, #4]
    145c:	4699      	mov	r9, r3
	switch (transfer_mode)
    145e:	2b00      	cmp	r3, #0
    1460:	d018      	beq.n	1494 <usart_init+0x230>
    1462:	2380      	movs	r3, #128	; 0x80
    1464:	055b      	lsls	r3, r3, #21
    1466:	4599      	cmp	r9, r3
    1468:	d001      	beq.n	146e <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    146a:	2000      	movs	r0, #0
    146c:	e025      	b.n	14ba <usart_init+0x256>
			if (!config->use_external_clock) {
    146e:	2327      	movs	r3, #39	; 0x27
    1470:	5cf3      	ldrb	r3, [r6, r3]
    1472:	2b00      	cmp	r3, #0
    1474:	d000      	beq.n	1478 <usart_init+0x214>
    1476:	e779      	b.n	136c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1478:	6a33      	ldr	r3, [r6, #32]
    147a:	001f      	movs	r7, r3
    147c:	b2c0      	uxtb	r0, r0
    147e:	4b40      	ldr	r3, [pc, #256]	; (1580 <usart_init+0x31c>)
    1480:	4798      	blx	r3
    1482:	0001      	movs	r1, r0
    1484:	220e      	movs	r2, #14
    1486:	ab06      	add	r3, sp, #24
    1488:	469c      	mov	ip, r3
    148a:	4462      	add	r2, ip
    148c:	0038      	movs	r0, r7
    148e:	4b3d      	ldr	r3, [pc, #244]	; (1584 <usart_init+0x320>)
    1490:	4798      	blx	r3
    1492:	e012      	b.n	14ba <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1494:	2308      	movs	r3, #8
    1496:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1498:	2300      	movs	r3, #0
    149a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    149c:	2327      	movs	r3, #39	; 0x27
    149e:	5cf3      	ldrb	r3, [r6, r3]
    14a0:	2b00      	cmp	r3, #0
    14a2:	d00e      	beq.n	14c2 <usart_init+0x25e>
				status_code =
    14a4:	9b06      	ldr	r3, [sp, #24]
    14a6:	9300      	str	r3, [sp, #0]
    14a8:	9b07      	ldr	r3, [sp, #28]
    14aa:	220e      	movs	r2, #14
    14ac:	a906      	add	r1, sp, #24
    14ae:	468c      	mov	ip, r1
    14b0:	4462      	add	r2, ip
    14b2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    14b4:	6a30      	ldr	r0, [r6, #32]
    14b6:	4f34      	ldr	r7, [pc, #208]	; (1588 <usart_init+0x324>)
    14b8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    14ba:	2800      	cmp	r0, #0
    14bc:	d000      	beq.n	14c0 <usart_init+0x25c>
    14be:	e6e4      	b.n	128a <usart_init+0x26>
    14c0:	e754      	b.n	136c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    14c2:	6a33      	ldr	r3, [r6, #32]
    14c4:	001f      	movs	r7, r3
    14c6:	b2c0      	uxtb	r0, r0
    14c8:	4b2d      	ldr	r3, [pc, #180]	; (1580 <usart_init+0x31c>)
    14ca:	4798      	blx	r3
    14cc:	0001      	movs	r1, r0
				status_code =
    14ce:	9b06      	ldr	r3, [sp, #24]
    14d0:	9300      	str	r3, [sp, #0]
    14d2:	9b07      	ldr	r3, [sp, #28]
    14d4:	220e      	movs	r2, #14
    14d6:	a806      	add	r0, sp, #24
    14d8:	4684      	mov	ip, r0
    14da:	4462      	add	r2, ip
    14dc:	0038      	movs	r0, r7
    14de:	4f2a      	ldr	r7, [pc, #168]	; (1588 <usart_init+0x324>)
    14e0:	47b8      	blx	r7
    14e2:	e7ea      	b.n	14ba <usart_init+0x256>
		if(config->lin_slave_enable) {
    14e4:	7ef3      	ldrb	r3, [r6, #27]
    14e6:	2b00      	cmp	r3, #0
    14e8:	d100      	bne.n	14ec <usart_init+0x288>
    14ea:	e77d      	b.n	13e8 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    14ec:	2380      	movs	r3, #128	; 0x80
    14ee:	04db      	lsls	r3, r3, #19
    14f0:	431f      	orrs	r7, r3
    14f2:	e779      	b.n	13e8 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    14f4:	0020      	movs	r0, r4
    14f6:	4b25      	ldr	r3, [pc, #148]	; (158c <usart_init+0x328>)
    14f8:	4798      	blx	r3
    14fa:	e007      	b.n	150c <usart_init+0x2a8>
    14fc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    14fe:	2f04      	cmp	r7, #4
    1500:	d00d      	beq.n	151e <usart_init+0x2ba>
    1502:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1504:	00bb      	lsls	r3, r7, #2
    1506:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1508:	2800      	cmp	r0, #0
    150a:	d0f3      	beq.n	14f4 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    150c:	1c43      	adds	r3, r0, #1
    150e:	d0f5      	beq.n	14fc <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1510:	a90e      	add	r1, sp, #56	; 0x38
    1512:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1514:	0c00      	lsrs	r0, r0, #16
    1516:	b2c0      	uxtb	r0, r0
    1518:	4b1d      	ldr	r3, [pc, #116]	; (1590 <usart_init+0x32c>)
    151a:	4798      	blx	r3
    151c:	e7ee      	b.n	14fc <usart_init+0x298>
		module->callback[i]            = NULL;
    151e:	2300      	movs	r3, #0
    1520:	60eb      	str	r3, [r5, #12]
    1522:	612b      	str	r3, [r5, #16]
    1524:	616b      	str	r3, [r5, #20]
    1526:	61ab      	str	r3, [r5, #24]
    1528:	61eb      	str	r3, [r5, #28]
    152a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    152c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    152e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1530:	2200      	movs	r2, #0
    1532:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1534:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1536:	3330      	adds	r3, #48	; 0x30
    1538:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    153a:	3301      	adds	r3, #1
    153c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    153e:	3301      	adds	r3, #1
    1540:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1542:	3301      	adds	r3, #1
    1544:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1546:	6828      	ldr	r0, [r5, #0]
    1548:	4b07      	ldr	r3, [pc, #28]	; (1568 <usart_init+0x304>)
    154a:	4798      	blx	r3
    154c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    154e:	4911      	ldr	r1, [pc, #68]	; (1594 <usart_init+0x330>)
    1550:	4b11      	ldr	r3, [pc, #68]	; (1598 <usart_init+0x334>)
    1552:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1554:	00a4      	lsls	r4, r4, #2
    1556:	4b11      	ldr	r3, [pc, #68]	; (159c <usart_init+0x338>)
    1558:	50e5      	str	r5, [r4, r3]
	return status_code;
    155a:	2000      	movs	r0, #0
    155c:	e695      	b.n	128a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    155e:	2310      	movs	r3, #16
    1560:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1562:	2300      	movs	r3, #0
    1564:	9307      	str	r3, [sp, #28]
    1566:	e6ec      	b.n	1342 <usart_init+0xde>
    1568:	0000115d 	.word	0x0000115d
    156c:	40000400 	.word	0x40000400
    1570:	00001e91 	.word	0x00001e91
    1574:	00001e05 	.word	0x00001e05
    1578:	00000f99 	.word	0x00000f99
    157c:	41002000 	.word	0x41002000
    1580:	00001ead 	.word	0x00001ead
    1584:	00000edb 	.word	0x00000edb
    1588:	00000f05 	.word	0x00000f05
    158c:	00000fe5 	.word	0x00000fe5
    1590:	00001f89 	.word	0x00001f89
    1594:	000016b9 	.word	0x000016b9
    1598:	00001199 	.word	0x00001199
    159c:	200002c4 	.word	0x200002c4

000015a0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    15a0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    15a2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    15a4:	2a00      	cmp	r2, #0
    15a6:	d101      	bne.n	15ac <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    15a8:	0018      	movs	r0, r3
    15aa:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    15ac:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    15ae:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    15b0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    15b2:	2a00      	cmp	r2, #0
    15b4:	d1f8      	bne.n	15a8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    15b6:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    15b8:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    15ba:	2102      	movs	r1, #2
    15bc:	7e13      	ldrb	r3, [r2, #24]
    15be:	420b      	tst	r3, r1
    15c0:	d0fc      	beq.n	15bc <usart_write_wait+0x1c>
	return STATUS_OK;
    15c2:	2300      	movs	r3, #0
    15c4:	e7f0      	b.n	15a8 <usart_write_wait+0x8>

000015c6 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    15c6:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    15c8:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    15ca:	2a00      	cmp	r2, #0
    15cc:	d101      	bne.n	15d2 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    15ce:	0018      	movs	r0, r3
    15d0:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    15d2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    15d4:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    15d6:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    15d8:	2a00      	cmp	r2, #0
    15da:	d1f8      	bne.n	15ce <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    15dc:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    15de:	7e10      	ldrb	r0, [r2, #24]
    15e0:	0740      	lsls	r0, r0, #29
    15e2:	d5f4      	bpl.n	15ce <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    15e4:	8b53      	ldrh	r3, [r2, #26]
    15e6:	b2db      	uxtb	r3, r3
	if (error_code) {
    15e8:	0698      	lsls	r0, r3, #26
    15ea:	d01d      	beq.n	1628 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    15ec:	0798      	lsls	r0, r3, #30
    15ee:	d503      	bpl.n	15f8 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    15f0:	2302      	movs	r3, #2
    15f2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    15f4:	3318      	adds	r3, #24
    15f6:	e7ea      	b.n	15ce <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    15f8:	0758      	lsls	r0, r3, #29
    15fa:	d503      	bpl.n	1604 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    15fc:	2304      	movs	r3, #4
    15fe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1600:	331a      	adds	r3, #26
    1602:	e7e4      	b.n	15ce <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1604:	07d8      	lsls	r0, r3, #31
    1606:	d503      	bpl.n	1610 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1608:	2301      	movs	r3, #1
    160a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    160c:	3312      	adds	r3, #18
    160e:	e7de      	b.n	15ce <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1610:	06d8      	lsls	r0, r3, #27
    1612:	d503      	bpl.n	161c <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1614:	2310      	movs	r3, #16
    1616:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1618:	3332      	adds	r3, #50	; 0x32
    161a:	e7d8      	b.n	15ce <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    161c:	069b      	lsls	r3, r3, #26
    161e:	d503      	bpl.n	1628 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1620:	2320      	movs	r3, #32
    1622:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1624:	3321      	adds	r3, #33	; 0x21
    1626:	e7d2      	b.n	15ce <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1628:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    162a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    162c:	2300      	movs	r3, #0
    162e:	e7ce      	b.n	15ce <usart_read_wait+0x8>

00001630 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1632:	0004      	movs	r4, r0
    1634:	000d      	movs	r5, r1
    1636:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1638:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    163a:	4b0f      	ldr	r3, [pc, #60]	; (1678 <_usart_read_buffer+0x48>)
    163c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    163e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1640:	b29b      	uxth	r3, r3
    1642:	2b00      	cmp	r3, #0
    1644:	d003      	beq.n	164e <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    1646:	4b0d      	ldr	r3, [pc, #52]	; (167c <_usart_read_buffer+0x4c>)
    1648:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    164a:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    164c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    164e:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1650:	4b0a      	ldr	r3, [pc, #40]	; (167c <_usart_read_buffer+0x4c>)
    1652:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1654:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1656:	2205      	movs	r2, #5
    1658:	2332      	movs	r3, #50	; 0x32
    165a:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    165c:	3b2e      	subs	r3, #46	; 0x2e
    165e:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1660:	7a23      	ldrb	r3, [r4, #8]
    1662:	2b00      	cmp	r3, #0
    1664:	d001      	beq.n	166a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1666:	2320      	movs	r3, #32
    1668:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    166a:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    166c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    166e:	2b00      	cmp	r3, #0
    1670:	d0ec      	beq.n	164c <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1672:	2308      	movs	r3, #8
    1674:	75bb      	strb	r3, [r7, #22]
    1676:	e7e9      	b.n	164c <_usart_read_buffer+0x1c>
    1678:	00000825 	.word	0x00000825
    167c:	00000865 	.word	0x00000865

00001680 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1680:	1c93      	adds	r3, r2, #2
    1682:	009b      	lsls	r3, r3, #2
    1684:	18c3      	adds	r3, r0, r3
    1686:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1688:	2130      	movs	r1, #48	; 0x30
    168a:	2301      	movs	r3, #1
    168c:	4093      	lsls	r3, r2
    168e:	001a      	movs	r2, r3
    1690:	5c43      	ldrb	r3, [r0, r1]
    1692:	4313      	orrs	r3, r2
    1694:	5443      	strb	r3, [r0, r1]
}
    1696:	4770      	bx	lr

00001698 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1698:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    169a:	2317      	movs	r3, #23
	if (length == 0) {
    169c:	2a00      	cmp	r2, #0
    169e:	d101      	bne.n	16a4 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    16a0:	0018      	movs	r0, r3
    16a2:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    16a4:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    16a6:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    16a8:	2c00      	cmp	r4, #0
    16aa:	d0f9      	beq.n	16a0 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    16ac:	4b01      	ldr	r3, [pc, #4]	; (16b4 <usart_read_buffer_job+0x1c>)
    16ae:	4798      	blx	r3
    16b0:	0003      	movs	r3, r0
    16b2:	e7f5      	b.n	16a0 <usart_read_buffer_job+0x8>
    16b4:	00001631 	.word	0x00001631

000016b8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    16b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    16ba:	0080      	lsls	r0, r0, #2
    16bc:	4b62      	ldr	r3, [pc, #392]	; (1848 <_usart_interrupt_handler+0x190>)
    16be:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    16c0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    16c2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    16c4:	2b00      	cmp	r3, #0
    16c6:	d1fc      	bne.n	16c2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    16c8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    16ca:	7da6      	ldrb	r6, [r4, #22]
    16cc:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    16ce:	2330      	movs	r3, #48	; 0x30
    16d0:	5ceb      	ldrb	r3, [r5, r3]
    16d2:	2231      	movs	r2, #49	; 0x31
    16d4:	5caf      	ldrb	r7, [r5, r2]
    16d6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    16d8:	07f3      	lsls	r3, r6, #31
    16da:	d522      	bpl.n	1722 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    16dc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    16de:	b29b      	uxth	r3, r3
    16e0:	2b00      	cmp	r3, #0
    16e2:	d01c      	beq.n	171e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    16e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    16e6:	7813      	ldrb	r3, [r2, #0]
    16e8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    16ea:	1c51      	adds	r1, r2, #1
    16ec:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    16ee:	7969      	ldrb	r1, [r5, #5]
    16f0:	2901      	cmp	r1, #1
    16f2:	d00e      	beq.n	1712 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    16f4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    16f6:	05db      	lsls	r3, r3, #23
    16f8:	0ddb      	lsrs	r3, r3, #23
    16fa:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    16fc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    16fe:	3b01      	subs	r3, #1
    1700:	b29b      	uxth	r3, r3
    1702:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1704:	2b00      	cmp	r3, #0
    1706:	d10c      	bne.n	1722 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1708:	3301      	adds	r3, #1
    170a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    170c:	3301      	adds	r3, #1
    170e:	75a3      	strb	r3, [r4, #22]
    1710:	e007      	b.n	1722 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1712:	7851      	ldrb	r1, [r2, #1]
    1714:	0209      	lsls	r1, r1, #8
    1716:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1718:	3202      	adds	r2, #2
    171a:	62aa      	str	r2, [r5, #40]	; 0x28
    171c:	e7eb      	b.n	16f6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    171e:	2301      	movs	r3, #1
    1720:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1722:	07b3      	lsls	r3, r6, #30
    1724:	d506      	bpl.n	1734 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1726:	2302      	movs	r3, #2
    1728:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    172a:	2200      	movs	r2, #0
    172c:	3331      	adds	r3, #49	; 0x31
    172e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1730:	07fb      	lsls	r3, r7, #31
    1732:	d41a      	bmi.n	176a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1734:	0773      	lsls	r3, r6, #29
    1736:	d565      	bpl.n	1804 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1738:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    173a:	b29b      	uxth	r3, r3
    173c:	2b00      	cmp	r3, #0
    173e:	d05f      	beq.n	1800 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1740:	8b63      	ldrh	r3, [r4, #26]
    1742:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1744:	071a      	lsls	r2, r3, #28
    1746:	d414      	bmi.n	1772 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1748:	223f      	movs	r2, #63	; 0x3f
    174a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    174c:	2b00      	cmp	r3, #0
    174e:	d034      	beq.n	17ba <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1750:	079a      	lsls	r2, r3, #30
    1752:	d511      	bpl.n	1778 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1754:	221a      	movs	r2, #26
    1756:	2332      	movs	r3, #50	; 0x32
    1758:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    175a:	3b30      	subs	r3, #48	; 0x30
    175c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    175e:	077b      	lsls	r3, r7, #29
    1760:	d550      	bpl.n	1804 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1762:	0028      	movs	r0, r5
    1764:	696b      	ldr	r3, [r5, #20]
    1766:	4798      	blx	r3
    1768:	e04c      	b.n	1804 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    176a:	0028      	movs	r0, r5
    176c:	68eb      	ldr	r3, [r5, #12]
    176e:	4798      	blx	r3
    1770:	e7e0      	b.n	1734 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1772:	2237      	movs	r2, #55	; 0x37
    1774:	4013      	ands	r3, r2
    1776:	e7e9      	b.n	174c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1778:	075a      	lsls	r2, r3, #29
    177a:	d505      	bpl.n	1788 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    177c:	221e      	movs	r2, #30
    177e:	2332      	movs	r3, #50	; 0x32
    1780:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1782:	3b2e      	subs	r3, #46	; 0x2e
    1784:	8363      	strh	r3, [r4, #26]
    1786:	e7ea      	b.n	175e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1788:	07da      	lsls	r2, r3, #31
    178a:	d505      	bpl.n	1798 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    178c:	2213      	movs	r2, #19
    178e:	2332      	movs	r3, #50	; 0x32
    1790:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1792:	3b31      	subs	r3, #49	; 0x31
    1794:	8363      	strh	r3, [r4, #26]
    1796:	e7e2      	b.n	175e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1798:	06da      	lsls	r2, r3, #27
    179a:	d505      	bpl.n	17a8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    179c:	2242      	movs	r2, #66	; 0x42
    179e:	2332      	movs	r3, #50	; 0x32
    17a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    17a2:	3b22      	subs	r3, #34	; 0x22
    17a4:	8363      	strh	r3, [r4, #26]
    17a6:	e7da      	b.n	175e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    17a8:	2220      	movs	r2, #32
    17aa:	421a      	tst	r2, r3
    17ac:	d0d7      	beq.n	175e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    17ae:	3221      	adds	r2, #33	; 0x21
    17b0:	2332      	movs	r3, #50	; 0x32
    17b2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    17b4:	3b12      	subs	r3, #18
    17b6:	8363      	strh	r3, [r4, #26]
    17b8:	e7d1      	b.n	175e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    17ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    17bc:	05db      	lsls	r3, r3, #23
    17be:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    17c0:	b2da      	uxtb	r2, r3
    17c2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    17c4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    17c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    17c8:	1c51      	adds	r1, r2, #1
    17ca:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    17cc:	7969      	ldrb	r1, [r5, #5]
    17ce:	2901      	cmp	r1, #1
    17d0:	d010      	beq.n	17f4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    17d2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    17d4:	3b01      	subs	r3, #1
    17d6:	b29b      	uxth	r3, r3
    17d8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    17da:	2b00      	cmp	r3, #0
    17dc:	d112      	bne.n	1804 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    17de:	3304      	adds	r3, #4
    17e0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    17e2:	2200      	movs	r2, #0
    17e4:	332e      	adds	r3, #46	; 0x2e
    17e6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    17e8:	07bb      	lsls	r3, r7, #30
    17ea:	d50b      	bpl.n	1804 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    17ec:	0028      	movs	r0, r5
    17ee:	692b      	ldr	r3, [r5, #16]
    17f0:	4798      	blx	r3
    17f2:	e007      	b.n	1804 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    17f4:	0a1b      	lsrs	r3, r3, #8
    17f6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    17f8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    17fa:	3301      	adds	r3, #1
    17fc:	626b      	str	r3, [r5, #36]	; 0x24
    17fe:	e7e8      	b.n	17d2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1800:	2304      	movs	r3, #4
    1802:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1804:	06f3      	lsls	r3, r6, #27
    1806:	d504      	bpl.n	1812 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1808:	2310      	movs	r3, #16
    180a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    180c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    180e:	06fb      	lsls	r3, r7, #27
    1810:	d40e      	bmi.n	1830 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1812:	06b3      	lsls	r3, r6, #26
    1814:	d504      	bpl.n	1820 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1816:	2320      	movs	r3, #32
    1818:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    181a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    181c:	073b      	lsls	r3, r7, #28
    181e:	d40b      	bmi.n	1838 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1820:	0733      	lsls	r3, r6, #28
    1822:	d504      	bpl.n	182e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1824:	2308      	movs	r3, #8
    1826:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1828:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    182a:	06bb      	lsls	r3, r7, #26
    182c:	d408      	bmi.n	1840 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    182e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1830:	0028      	movs	r0, r5
    1832:	69eb      	ldr	r3, [r5, #28]
    1834:	4798      	blx	r3
    1836:	e7ec      	b.n	1812 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1838:	0028      	movs	r0, r5
    183a:	69ab      	ldr	r3, [r5, #24]
    183c:	4798      	blx	r3
    183e:	e7ef      	b.n	1820 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1840:	6a2b      	ldr	r3, [r5, #32]
    1842:	0028      	movs	r0, r5
    1844:	4798      	blx	r3
}
    1846:	e7f2      	b.n	182e <_usart_interrupt_handler+0x176>
    1848:	200002c4 	.word	0x200002c4

0000184c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    184c:	b510      	push	{r4, lr}
	switch (clock_source) {
    184e:	2808      	cmp	r0, #8
    1850:	d803      	bhi.n	185a <system_clock_source_get_hz+0xe>
    1852:	0080      	lsls	r0, r0, #2
    1854:	4b1c      	ldr	r3, [pc, #112]	; (18c8 <system_clock_source_get_hz+0x7c>)
    1856:	581b      	ldr	r3, [r3, r0]
    1858:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    185a:	2000      	movs	r0, #0
    185c:	e032      	b.n	18c4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    185e:	4b1b      	ldr	r3, [pc, #108]	; (18cc <system_clock_source_get_hz+0x80>)
    1860:	6918      	ldr	r0, [r3, #16]
    1862:	e02f      	b.n	18c4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1864:	4b1a      	ldr	r3, [pc, #104]	; (18d0 <system_clock_source_get_hz+0x84>)
    1866:	6a1b      	ldr	r3, [r3, #32]
    1868:	059b      	lsls	r3, r3, #22
    186a:	0f9b      	lsrs	r3, r3, #30
    186c:	4819      	ldr	r0, [pc, #100]	; (18d4 <system_clock_source_get_hz+0x88>)
    186e:	40d8      	lsrs	r0, r3
    1870:	e028      	b.n	18c4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1872:	4b16      	ldr	r3, [pc, #88]	; (18cc <system_clock_source_get_hz+0x80>)
    1874:	6958      	ldr	r0, [r3, #20]
    1876:	e025      	b.n	18c4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1878:	4b14      	ldr	r3, [pc, #80]	; (18cc <system_clock_source_get_hz+0x80>)
    187a:	681b      	ldr	r3, [r3, #0]
			return 0;
    187c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    187e:	079b      	lsls	r3, r3, #30
    1880:	d520      	bpl.n	18c4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1882:	4913      	ldr	r1, [pc, #76]	; (18d0 <system_clock_source_get_hz+0x84>)
    1884:	2210      	movs	r2, #16
    1886:	68cb      	ldr	r3, [r1, #12]
    1888:	421a      	tst	r2, r3
    188a:	d0fc      	beq.n	1886 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    188c:	4b0f      	ldr	r3, [pc, #60]	; (18cc <system_clock_source_get_hz+0x80>)
    188e:	681a      	ldr	r2, [r3, #0]
    1890:	2324      	movs	r3, #36	; 0x24
    1892:	4013      	ands	r3, r2
    1894:	2b04      	cmp	r3, #4
    1896:	d001      	beq.n	189c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1898:	480f      	ldr	r0, [pc, #60]	; (18d8 <system_clock_source_get_hz+0x8c>)
    189a:	e013      	b.n	18c4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    189c:	2000      	movs	r0, #0
    189e:	4b0f      	ldr	r3, [pc, #60]	; (18dc <system_clock_source_get_hz+0x90>)
    18a0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    18a2:	4b0a      	ldr	r3, [pc, #40]	; (18cc <system_clock_source_get_hz+0x80>)
    18a4:	689b      	ldr	r3, [r3, #8]
    18a6:	041b      	lsls	r3, r3, #16
    18a8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    18aa:	4358      	muls	r0, r3
    18ac:	e00a      	b.n	18c4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    18ae:	2350      	movs	r3, #80	; 0x50
    18b0:	4a07      	ldr	r2, [pc, #28]	; (18d0 <system_clock_source_get_hz+0x84>)
    18b2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    18b4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    18b6:	075b      	lsls	r3, r3, #29
    18b8:	d504      	bpl.n	18c4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    18ba:	4b04      	ldr	r3, [pc, #16]	; (18cc <system_clock_source_get_hz+0x80>)
    18bc:	68d8      	ldr	r0, [r3, #12]
    18be:	e001      	b.n	18c4 <system_clock_source_get_hz+0x78>
		return 32768UL;
    18c0:	2080      	movs	r0, #128	; 0x80
    18c2:	0200      	lsls	r0, r0, #8
	}
}
    18c4:	bd10      	pop	{r4, pc}
    18c6:	46c0      	nop			; (mov r8, r8)
    18c8:	000050f4 	.word	0x000050f4
    18cc:	20000288 	.word	0x20000288
    18d0:	40000800 	.word	0x40000800
    18d4:	007a1200 	.word	0x007a1200
    18d8:	02dc6c00 	.word	0x02dc6c00
    18dc:	00001ead 	.word	0x00001ead

000018e0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    18e0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    18e2:	490c      	ldr	r1, [pc, #48]	; (1914 <system_clock_source_osc8m_set_config+0x34>)
    18e4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    18e6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    18e8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    18ea:	7840      	ldrb	r0, [r0, #1]
    18ec:	2201      	movs	r2, #1
    18ee:	4010      	ands	r0, r2
    18f0:	0180      	lsls	r0, r0, #6
    18f2:	2640      	movs	r6, #64	; 0x40
    18f4:	43b3      	bics	r3, r6
    18f6:	4303      	orrs	r3, r0
    18f8:	402a      	ands	r2, r5
    18fa:	01d2      	lsls	r2, r2, #7
    18fc:	2080      	movs	r0, #128	; 0x80
    18fe:	4383      	bics	r3, r0
    1900:	4313      	orrs	r3, r2
    1902:	2203      	movs	r2, #3
    1904:	4022      	ands	r2, r4
    1906:	0212      	lsls	r2, r2, #8
    1908:	4803      	ldr	r0, [pc, #12]	; (1918 <system_clock_source_osc8m_set_config+0x38>)
    190a:	4003      	ands	r3, r0
    190c:	4313      	orrs	r3, r2
    190e:	620b      	str	r3, [r1, #32]
}
    1910:	bd70      	pop	{r4, r5, r6, pc}
    1912:	46c0      	nop			; (mov r8, r8)
    1914:	40000800 	.word	0x40000800
    1918:	fffffcff 	.word	0xfffffcff

0000191c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    191c:	b5f0      	push	{r4, r5, r6, r7, lr}
    191e:	46de      	mov	lr, fp
    1920:	4657      	mov	r7, sl
    1922:	464e      	mov	r6, r9
    1924:	4645      	mov	r5, r8
    1926:	b5e0      	push	{r5, r6, r7, lr}
    1928:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    192a:	4b26      	ldr	r3, [pc, #152]	; (19c4 <system_clock_source_xosc32k_set_config+0xa8>)
    192c:	469b      	mov	fp, r3
    192e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1930:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1932:	7800      	ldrb	r0, [r0, #0]
    1934:	4242      	negs	r2, r0
    1936:	4142      	adcs	r2, r0
    1938:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    193a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    193c:	78ca      	ldrb	r2, [r1, #3]
    193e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1940:	790a      	ldrb	r2, [r1, #4]
    1942:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1944:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1946:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1948:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    194a:	688a      	ldr	r2, [r1, #8]
    194c:	491e      	ldr	r1, [pc, #120]	; (19c8 <system_clock_source_xosc32k_set_config+0xac>)
    194e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1950:	2101      	movs	r1, #1
    1952:	464a      	mov	r2, r9
    1954:	0092      	lsls	r2, r2, #2
    1956:	4691      	mov	r9, r2
    1958:	2204      	movs	r2, #4
    195a:	4393      	bics	r3, r2
    195c:	464a      	mov	r2, r9
    195e:	4313      	orrs	r3, r2
    1960:	4642      	mov	r2, r8
    1962:	400a      	ands	r2, r1
    1964:	00d2      	lsls	r2, r2, #3
    1966:	4690      	mov	r8, r2
    1968:	2208      	movs	r2, #8
    196a:	4393      	bics	r3, r2
    196c:	4642      	mov	r2, r8
    196e:	4313      	orrs	r3, r2
    1970:	4662      	mov	r2, ip
    1972:	400a      	ands	r2, r1
    1974:	0112      	lsls	r2, r2, #4
    1976:	4694      	mov	ip, r2
    1978:	2210      	movs	r2, #16
    197a:	4393      	bics	r3, r2
    197c:	4662      	mov	r2, ip
    197e:	4313      	orrs	r3, r2
    1980:	4008      	ands	r0, r1
    1982:	0140      	lsls	r0, r0, #5
    1984:	2220      	movs	r2, #32
    1986:	4393      	bics	r3, r2
    1988:	4303      	orrs	r3, r0
    198a:	400f      	ands	r7, r1
    198c:	01bf      	lsls	r7, r7, #6
    198e:	2040      	movs	r0, #64	; 0x40
    1990:	4383      	bics	r3, r0
    1992:	433b      	orrs	r3, r7
    1994:	400e      	ands	r6, r1
    1996:	01f6      	lsls	r6, r6, #7
    1998:	3040      	adds	r0, #64	; 0x40
    199a:	4383      	bics	r3, r0
    199c:	4333      	orrs	r3, r6
    199e:	3879      	subs	r0, #121	; 0x79
    19a0:	4005      	ands	r5, r0
    19a2:	022d      	lsls	r5, r5, #8
    19a4:	4809      	ldr	r0, [pc, #36]	; (19cc <system_clock_source_xosc32k_set_config+0xb0>)
    19a6:	4003      	ands	r3, r0
    19a8:	432b      	orrs	r3, r5
    19aa:	4021      	ands	r1, r4
    19ac:	0309      	lsls	r1, r1, #12
    19ae:	4808      	ldr	r0, [pc, #32]	; (19d0 <system_clock_source_xosc32k_set_config+0xb4>)
    19b0:	4003      	ands	r3, r0
    19b2:	430b      	orrs	r3, r1
    19b4:	465a      	mov	r2, fp
    19b6:	8293      	strh	r3, [r2, #20]
}
    19b8:	bc3c      	pop	{r2, r3, r4, r5}
    19ba:	4690      	mov	r8, r2
    19bc:	4699      	mov	r9, r3
    19be:	46a2      	mov	sl, r4
    19c0:	46ab      	mov	fp, r5
    19c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19c4:	40000800 	.word	0x40000800
    19c8:	20000288 	.word	0x20000288
    19cc:	fffff8ff 	.word	0xfffff8ff
    19d0:	ffffefff 	.word	0xffffefff

000019d4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    19d4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    19d6:	7a03      	ldrb	r3, [r0, #8]
    19d8:	069b      	lsls	r3, r3, #26
    19da:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    19dc:	8942      	ldrh	r2, [r0, #10]
    19de:	0592      	lsls	r2, r2, #22
    19e0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    19e2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    19e4:	4918      	ldr	r1, [pc, #96]	; (1a48 <system_clock_source_dfll_set_config+0x74>)
    19e6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    19e8:	7983      	ldrb	r3, [r0, #6]
    19ea:	79c2      	ldrb	r2, [r0, #7]
    19ec:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    19ee:	8842      	ldrh	r2, [r0, #2]
    19f0:	8884      	ldrh	r4, [r0, #4]
    19f2:	4322      	orrs	r2, r4
    19f4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    19f6:	7842      	ldrb	r2, [r0, #1]
    19f8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    19fa:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    19fc:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    19fe:	7803      	ldrb	r3, [r0, #0]
    1a00:	2b04      	cmp	r3, #4
    1a02:	d011      	beq.n	1a28 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1a04:	2b20      	cmp	r3, #32
    1a06:	d10e      	bne.n	1a26 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1a08:	7b03      	ldrb	r3, [r0, #12]
    1a0a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1a0c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1a0e:	4313      	orrs	r3, r2
    1a10:	89c2      	ldrh	r2, [r0, #14]
    1a12:	0412      	lsls	r2, r2, #16
    1a14:	490d      	ldr	r1, [pc, #52]	; (1a4c <system_clock_source_dfll_set_config+0x78>)
    1a16:	400a      	ands	r2, r1
    1a18:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1a1a:	4a0b      	ldr	r2, [pc, #44]	; (1a48 <system_clock_source_dfll_set_config+0x74>)
    1a1c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1a1e:	6811      	ldr	r1, [r2, #0]
    1a20:	4b0b      	ldr	r3, [pc, #44]	; (1a50 <system_clock_source_dfll_set_config+0x7c>)
    1a22:	430b      	orrs	r3, r1
    1a24:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1a26:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1a28:	7b03      	ldrb	r3, [r0, #12]
    1a2a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1a2c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1a2e:	4313      	orrs	r3, r2
    1a30:	89c2      	ldrh	r2, [r0, #14]
    1a32:	0412      	lsls	r2, r2, #16
    1a34:	4905      	ldr	r1, [pc, #20]	; (1a4c <system_clock_source_dfll_set_config+0x78>)
    1a36:	400a      	ands	r2, r1
    1a38:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1a3a:	4a03      	ldr	r2, [pc, #12]	; (1a48 <system_clock_source_dfll_set_config+0x74>)
    1a3c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1a3e:	6813      	ldr	r3, [r2, #0]
    1a40:	2104      	movs	r1, #4
    1a42:	430b      	orrs	r3, r1
    1a44:	6013      	str	r3, [r2, #0]
    1a46:	e7ee      	b.n	1a26 <system_clock_source_dfll_set_config+0x52>
    1a48:	20000288 	.word	0x20000288
    1a4c:	03ff0000 	.word	0x03ff0000
    1a50:	00000424 	.word	0x00000424

00001a54 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1a54:	2808      	cmp	r0, #8
    1a56:	d803      	bhi.n	1a60 <system_clock_source_enable+0xc>
    1a58:	0080      	lsls	r0, r0, #2
    1a5a:	4b25      	ldr	r3, [pc, #148]	; (1af0 <system_clock_source_enable+0x9c>)
    1a5c:	581b      	ldr	r3, [r3, r0]
    1a5e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a60:	2017      	movs	r0, #23
    1a62:	e044      	b.n	1aee <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1a64:	4a23      	ldr	r2, [pc, #140]	; (1af4 <system_clock_source_enable+0xa0>)
    1a66:	6a13      	ldr	r3, [r2, #32]
    1a68:	2102      	movs	r1, #2
    1a6a:	430b      	orrs	r3, r1
    1a6c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1a6e:	2000      	movs	r0, #0
    1a70:	e03d      	b.n	1aee <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a72:	4a20      	ldr	r2, [pc, #128]	; (1af4 <system_clock_source_enable+0xa0>)
    1a74:	6993      	ldr	r3, [r2, #24]
    1a76:	2102      	movs	r1, #2
    1a78:	430b      	orrs	r3, r1
    1a7a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1a7c:	2000      	movs	r0, #0
		break;
    1a7e:	e036      	b.n	1aee <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1a80:	4a1c      	ldr	r2, [pc, #112]	; (1af4 <system_clock_source_enable+0xa0>)
    1a82:	8a13      	ldrh	r3, [r2, #16]
    1a84:	2102      	movs	r1, #2
    1a86:	430b      	orrs	r3, r1
    1a88:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1a8a:	2000      	movs	r0, #0
		break;
    1a8c:	e02f      	b.n	1aee <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1a8e:	4a19      	ldr	r2, [pc, #100]	; (1af4 <system_clock_source_enable+0xa0>)
    1a90:	8a93      	ldrh	r3, [r2, #20]
    1a92:	2102      	movs	r1, #2
    1a94:	430b      	orrs	r3, r1
    1a96:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1a98:	2000      	movs	r0, #0
		break;
    1a9a:	e028      	b.n	1aee <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1a9c:	4916      	ldr	r1, [pc, #88]	; (1af8 <system_clock_source_enable+0xa4>)
    1a9e:	680b      	ldr	r3, [r1, #0]
    1aa0:	2202      	movs	r2, #2
    1aa2:	4313      	orrs	r3, r2
    1aa4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1aa6:	4b13      	ldr	r3, [pc, #76]	; (1af4 <system_clock_source_enable+0xa0>)
    1aa8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1aaa:	0019      	movs	r1, r3
    1aac:	320e      	adds	r2, #14
    1aae:	68cb      	ldr	r3, [r1, #12]
    1ab0:	421a      	tst	r2, r3
    1ab2:	d0fc      	beq.n	1aae <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1ab4:	4a10      	ldr	r2, [pc, #64]	; (1af8 <system_clock_source_enable+0xa4>)
    1ab6:	6891      	ldr	r1, [r2, #8]
    1ab8:	4b0e      	ldr	r3, [pc, #56]	; (1af4 <system_clock_source_enable+0xa0>)
    1aba:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1abc:	6852      	ldr	r2, [r2, #4]
    1abe:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1ac0:	2200      	movs	r2, #0
    1ac2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ac4:	0019      	movs	r1, r3
    1ac6:	3210      	adds	r2, #16
    1ac8:	68cb      	ldr	r3, [r1, #12]
    1aca:	421a      	tst	r2, r3
    1acc:	d0fc      	beq.n	1ac8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1ace:	4b0a      	ldr	r3, [pc, #40]	; (1af8 <system_clock_source_enable+0xa4>)
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	b29b      	uxth	r3, r3
    1ad4:	4a07      	ldr	r2, [pc, #28]	; (1af4 <system_clock_source_enable+0xa0>)
    1ad6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1ad8:	2000      	movs	r0, #0
    1ada:	e008      	b.n	1aee <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1adc:	4905      	ldr	r1, [pc, #20]	; (1af4 <system_clock_source_enable+0xa0>)
    1ade:	2244      	movs	r2, #68	; 0x44
    1ae0:	5c8b      	ldrb	r3, [r1, r2]
    1ae2:	2002      	movs	r0, #2
    1ae4:	4303      	orrs	r3, r0
    1ae6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1ae8:	2000      	movs	r0, #0
		break;
    1aea:	e000      	b.n	1aee <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1aec:	2000      	movs	r0, #0
}
    1aee:	4770      	bx	lr
    1af0:	00005118 	.word	0x00005118
    1af4:	40000800 	.word	0x40000800
    1af8:	20000288 	.word	0x20000288

00001afc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1afe:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1b00:	22c2      	movs	r2, #194	; 0xc2
    1b02:	00d2      	lsls	r2, r2, #3
    1b04:	4b47      	ldr	r3, [pc, #284]	; (1c24 <system_clock_init+0x128>)
    1b06:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1b08:	4947      	ldr	r1, [pc, #284]	; (1c28 <system_clock_init+0x12c>)
    1b0a:	684b      	ldr	r3, [r1, #4]
    1b0c:	221e      	movs	r2, #30
    1b0e:	4393      	bics	r3, r2
    1b10:	3a1c      	subs	r2, #28
    1b12:	4313      	orrs	r3, r2
    1b14:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1b16:	ab01      	add	r3, sp, #4
    1b18:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1b1a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1b1c:	4d43      	ldr	r5, [pc, #268]	; (1c2c <system_clock_init+0x130>)
    1b1e:	b2e0      	uxtb	r0, r4
    1b20:	a901      	add	r1, sp, #4
    1b22:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1b24:	3401      	adds	r4, #1
    1b26:	2c25      	cmp	r4, #37	; 0x25
    1b28:	d1f9      	bne.n	1b1e <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1b2a:	a80a      	add	r0, sp, #40	; 0x28
    1b2c:	2300      	movs	r3, #0
    1b2e:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1b30:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1b32:	2280      	movs	r2, #128	; 0x80
    1b34:	0212      	lsls	r2, r2, #8
    1b36:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1b38:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1b3a:	2201      	movs	r2, #1
    1b3c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1b3e:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1b40:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1b42:	3205      	adds	r2, #5
    1b44:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1b46:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1b48:	4b39      	ldr	r3, [pc, #228]	; (1c30 <system_clock_init+0x134>)
    1b4a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1b4c:	2005      	movs	r0, #5
    1b4e:	4b39      	ldr	r3, [pc, #228]	; (1c34 <system_clock_init+0x138>)
    1b50:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1b52:	4934      	ldr	r1, [pc, #208]	; (1c24 <system_clock_init+0x128>)
    1b54:	2202      	movs	r2, #2
    1b56:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1b58:	421a      	tst	r2, r3
    1b5a:	d0fc      	beq.n	1b56 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1b5c:	4a31      	ldr	r2, [pc, #196]	; (1c24 <system_clock_init+0x128>)
    1b5e:	8a93      	ldrh	r3, [r2, #20]
    1b60:	2180      	movs	r1, #128	; 0x80
    1b62:	430b      	orrs	r3, r1
    1b64:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1b66:	ab05      	add	r3, sp, #20
    1b68:	2100      	movs	r1, #0
    1b6a:	2200      	movs	r2, #0
    1b6c:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1b6e:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1b70:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1b72:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1b74:	313f      	adds	r1, #63	; 0x3f
    1b76:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1b78:	393b      	subs	r1, #59	; 0x3b
    1b7a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1b7c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1b7e:	4b2e      	ldr	r3, [pc, #184]	; (1c38 <system_clock_init+0x13c>)
    1b80:	681b      	ldr	r3, [r3, #0]
    1b82:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1b84:	2b3f      	cmp	r3, #63	; 0x3f
    1b86:	d04b      	beq.n	1c20 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1b88:	a805      	add	r0, sp, #20
    1b8a:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1b8c:	23b7      	movs	r3, #183	; 0xb7
    1b8e:	00db      	lsls	r3, r3, #3
    1b90:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1b92:	2307      	movs	r3, #7
    1b94:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1b96:	3338      	adds	r3, #56	; 0x38
    1b98:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1b9a:	4b28      	ldr	r3, [pc, #160]	; (1c3c <system_clock_init+0x140>)
    1b9c:	4798      	blx	r3
	config->run_in_standby  = false;
    1b9e:	a804      	add	r0, sp, #16
    1ba0:	2500      	movs	r5, #0
    1ba2:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1ba4:	2601      	movs	r6, #1
    1ba6:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1ba8:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1baa:	4b25      	ldr	r3, [pc, #148]	; (1c40 <system_clock_init+0x144>)
    1bac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1bae:	2006      	movs	r0, #6
    1bb0:	4f20      	ldr	r7, [pc, #128]	; (1c34 <system_clock_init+0x138>)
    1bb2:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1bb4:	4b23      	ldr	r3, [pc, #140]	; (1c44 <system_clock_init+0x148>)
    1bb6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1bb8:	ac01      	add	r4, sp, #4
    1bba:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1bbc:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1bbe:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1bc0:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1bc2:	2305      	movs	r3, #5
    1bc4:	7023      	strb	r3, [r4, #0]
    1bc6:	0021      	movs	r1, r4
    1bc8:	2001      	movs	r0, #1
    1bca:	4b1f      	ldr	r3, [pc, #124]	; (1c48 <system_clock_init+0x14c>)
    1bcc:	4798      	blx	r3
    1bce:	2001      	movs	r0, #1
    1bd0:	4b1e      	ldr	r3, [pc, #120]	; (1c4c <system_clock_init+0x150>)
    1bd2:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1bd4:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1bd6:	0021      	movs	r1, r4
    1bd8:	2000      	movs	r0, #0
    1bda:	4b14      	ldr	r3, [pc, #80]	; (1c2c <system_clock_init+0x130>)
    1bdc:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1bde:	2000      	movs	r0, #0
    1be0:	4b1b      	ldr	r3, [pc, #108]	; (1c50 <system_clock_init+0x154>)
    1be2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1be4:	2007      	movs	r0, #7
    1be6:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1be8:	490e      	ldr	r1, [pc, #56]	; (1c24 <system_clock_init+0x128>)
    1bea:	22d0      	movs	r2, #208	; 0xd0
    1bec:	68cb      	ldr	r3, [r1, #12]
    1bee:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1bf0:	2bd0      	cmp	r3, #208	; 0xd0
    1bf2:	d1fb      	bne.n	1bec <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1bf4:	4a17      	ldr	r2, [pc, #92]	; (1c54 <system_clock_init+0x158>)
    1bf6:	2300      	movs	r3, #0
    1bf8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1bfa:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1bfc:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1bfe:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1c00:	a901      	add	r1, sp, #4
    1c02:	2201      	movs	r2, #1
    1c04:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1c06:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1c08:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1c0a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1c0c:	3307      	adds	r3, #7
    1c0e:	700b      	strb	r3, [r1, #0]
    1c10:	2000      	movs	r0, #0
    1c12:	4b0d      	ldr	r3, [pc, #52]	; (1c48 <system_clock_init+0x14c>)
    1c14:	4798      	blx	r3
    1c16:	2000      	movs	r0, #0
    1c18:	4b0c      	ldr	r3, [pc, #48]	; (1c4c <system_clock_init+0x150>)
    1c1a:	4798      	blx	r3
#endif
}
    1c1c:	b00f      	add	sp, #60	; 0x3c
    1c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1c20:	3b20      	subs	r3, #32
    1c22:	e7b1      	b.n	1b88 <system_clock_init+0x8c>
    1c24:	40000800 	.word	0x40000800
    1c28:	41004000 	.word	0x41004000
    1c2c:	00001e91 	.word	0x00001e91
    1c30:	0000191d 	.word	0x0000191d
    1c34:	00001a55 	.word	0x00001a55
    1c38:	00806024 	.word	0x00806024
    1c3c:	000019d5 	.word	0x000019d5
    1c40:	000018e1 	.word	0x000018e1
    1c44:	00001c59 	.word	0x00001c59
    1c48:	00001c7d 	.word	0x00001c7d
    1c4c:	00001d35 	.word	0x00001d35
    1c50:	00001e05 	.word	0x00001e05
    1c54:	40000400 	.word	0x40000400

00001c58 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1c58:	4a06      	ldr	r2, [pc, #24]	; (1c74 <system_gclk_init+0x1c>)
    1c5a:	6993      	ldr	r3, [r2, #24]
    1c5c:	2108      	movs	r1, #8
    1c5e:	430b      	orrs	r3, r1
    1c60:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1c62:	2201      	movs	r2, #1
    1c64:	4b04      	ldr	r3, [pc, #16]	; (1c78 <system_gclk_init+0x20>)
    1c66:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1c68:	0019      	movs	r1, r3
    1c6a:	780b      	ldrb	r3, [r1, #0]
    1c6c:	4213      	tst	r3, r2
    1c6e:	d1fc      	bne.n	1c6a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1c70:	4770      	bx	lr
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	40000400 	.word	0x40000400
    1c78:	40000c00 	.word	0x40000c00

00001c7c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1c7c:	b570      	push	{r4, r5, r6, lr}
    1c7e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1c80:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1c82:	780d      	ldrb	r5, [r1, #0]
    1c84:	022d      	lsls	r5, r5, #8
    1c86:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1c88:	784b      	ldrb	r3, [r1, #1]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d002      	beq.n	1c94 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1c8e:	2380      	movs	r3, #128	; 0x80
    1c90:	02db      	lsls	r3, r3, #11
    1c92:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1c94:	7a4b      	ldrb	r3, [r1, #9]
    1c96:	2b00      	cmp	r3, #0
    1c98:	d002      	beq.n	1ca0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1c9a:	2380      	movs	r3, #128	; 0x80
    1c9c:	031b      	lsls	r3, r3, #12
    1c9e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1ca0:	6848      	ldr	r0, [r1, #4]
    1ca2:	2801      	cmp	r0, #1
    1ca4:	d910      	bls.n	1cc8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1ca6:	1e43      	subs	r3, r0, #1
    1ca8:	4218      	tst	r0, r3
    1caa:	d134      	bne.n	1d16 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1cac:	2802      	cmp	r0, #2
    1cae:	d930      	bls.n	1d12 <system_gclk_gen_set_config+0x96>
    1cb0:	2302      	movs	r3, #2
    1cb2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1cb4:	3201      	adds	r2, #1
						mask <<= 1) {
    1cb6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1cb8:	4298      	cmp	r0, r3
    1cba:	d8fb      	bhi.n	1cb4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1cbc:	0212      	lsls	r2, r2, #8
    1cbe:	4332      	orrs	r2, r6
    1cc0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1cc2:	2380      	movs	r3, #128	; 0x80
    1cc4:	035b      	lsls	r3, r3, #13
    1cc6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1cc8:	7a0b      	ldrb	r3, [r1, #8]
    1cca:	2b00      	cmp	r3, #0
    1ccc:	d002      	beq.n	1cd4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1cce:	2380      	movs	r3, #128	; 0x80
    1cd0:	039b      	lsls	r3, r3, #14
    1cd2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cd4:	4a13      	ldr	r2, [pc, #76]	; (1d24 <system_gclk_gen_set_config+0xa8>)
    1cd6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1cd8:	b25b      	sxtb	r3, r3
    1cda:	2b00      	cmp	r3, #0
    1cdc:	dbfb      	blt.n	1cd6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1cde:	4b12      	ldr	r3, [pc, #72]	; (1d28 <system_gclk_gen_set_config+0xac>)
    1ce0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1ce2:	4b12      	ldr	r3, [pc, #72]	; (1d2c <system_gclk_gen_set_config+0xb0>)
    1ce4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ce6:	4a0f      	ldr	r2, [pc, #60]	; (1d24 <system_gclk_gen_set_config+0xa8>)
    1ce8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1cea:	b25b      	sxtb	r3, r3
    1cec:	2b00      	cmp	r3, #0
    1cee:	dbfb      	blt.n	1ce8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1cf0:	4b0c      	ldr	r3, [pc, #48]	; (1d24 <system_gclk_gen_set_config+0xa8>)
    1cf2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cf4:	001a      	movs	r2, r3
    1cf6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1cf8:	b25b      	sxtb	r3, r3
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	dbfb      	blt.n	1cf6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1cfe:	4a09      	ldr	r2, [pc, #36]	; (1d24 <system_gclk_gen_set_config+0xa8>)
    1d00:	6853      	ldr	r3, [r2, #4]
    1d02:	2180      	movs	r1, #128	; 0x80
    1d04:	0249      	lsls	r1, r1, #9
    1d06:	400b      	ands	r3, r1
    1d08:	431d      	orrs	r5, r3
    1d0a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1d0c:	4b08      	ldr	r3, [pc, #32]	; (1d30 <system_gclk_gen_set_config+0xb4>)
    1d0e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d10:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1d12:	2200      	movs	r2, #0
    1d14:	e7d2      	b.n	1cbc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1d16:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1d18:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1d1a:	2380      	movs	r3, #128	; 0x80
    1d1c:	029b      	lsls	r3, r3, #10
    1d1e:	431d      	orrs	r5, r3
    1d20:	e7d2      	b.n	1cc8 <system_gclk_gen_set_config+0x4c>
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	40000c00 	.word	0x40000c00
    1d28:	00000825 	.word	0x00000825
    1d2c:	40000c08 	.word	0x40000c08
    1d30:	00000865 	.word	0x00000865

00001d34 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1d34:	b510      	push	{r4, lr}
    1d36:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d38:	4a0b      	ldr	r2, [pc, #44]	; (1d68 <system_gclk_gen_enable+0x34>)
    1d3a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d3c:	b25b      	sxtb	r3, r3
    1d3e:	2b00      	cmp	r3, #0
    1d40:	dbfb      	blt.n	1d3a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1d42:	4b0a      	ldr	r3, [pc, #40]	; (1d6c <system_gclk_gen_enable+0x38>)
    1d44:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d46:	4b0a      	ldr	r3, [pc, #40]	; (1d70 <system_gclk_gen_enable+0x3c>)
    1d48:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d4a:	4a07      	ldr	r2, [pc, #28]	; (1d68 <system_gclk_gen_enable+0x34>)
    1d4c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d4e:	b25b      	sxtb	r3, r3
    1d50:	2b00      	cmp	r3, #0
    1d52:	dbfb      	blt.n	1d4c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1d54:	4a04      	ldr	r2, [pc, #16]	; (1d68 <system_gclk_gen_enable+0x34>)
    1d56:	6851      	ldr	r1, [r2, #4]
    1d58:	2380      	movs	r3, #128	; 0x80
    1d5a:	025b      	lsls	r3, r3, #9
    1d5c:	430b      	orrs	r3, r1
    1d5e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1d60:	4b04      	ldr	r3, [pc, #16]	; (1d74 <system_gclk_gen_enable+0x40>)
    1d62:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1d64:	bd10      	pop	{r4, pc}
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	40000c00 	.word	0x40000c00
    1d6c:	00000825 	.word	0x00000825
    1d70:	40000c04 	.word	0x40000c04
    1d74:	00000865 	.word	0x00000865

00001d78 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1d78:	b570      	push	{r4, r5, r6, lr}
    1d7a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d7c:	4a1a      	ldr	r2, [pc, #104]	; (1de8 <system_gclk_gen_get_hz+0x70>)
    1d7e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d80:	b25b      	sxtb	r3, r3
    1d82:	2b00      	cmp	r3, #0
    1d84:	dbfb      	blt.n	1d7e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1d86:	4b19      	ldr	r3, [pc, #100]	; (1dec <system_gclk_gen_get_hz+0x74>)
    1d88:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d8a:	4b19      	ldr	r3, [pc, #100]	; (1df0 <system_gclk_gen_get_hz+0x78>)
    1d8c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d8e:	4a16      	ldr	r2, [pc, #88]	; (1de8 <system_gclk_gen_get_hz+0x70>)
    1d90:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1d92:	b25b      	sxtb	r3, r3
    1d94:	2b00      	cmp	r3, #0
    1d96:	dbfb      	blt.n	1d90 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1d98:	4e13      	ldr	r6, [pc, #76]	; (1de8 <system_gclk_gen_get_hz+0x70>)
    1d9a:	6870      	ldr	r0, [r6, #4]
    1d9c:	04c0      	lsls	r0, r0, #19
    1d9e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1da0:	4b14      	ldr	r3, [pc, #80]	; (1df4 <system_gclk_gen_get_hz+0x7c>)
    1da2:	4798      	blx	r3
    1da4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1da6:	4b12      	ldr	r3, [pc, #72]	; (1df0 <system_gclk_gen_get_hz+0x78>)
    1da8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1daa:	6876      	ldr	r6, [r6, #4]
    1dac:	02f6      	lsls	r6, r6, #11
    1dae:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1db0:	4b11      	ldr	r3, [pc, #68]	; (1df8 <system_gclk_gen_get_hz+0x80>)
    1db2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1db4:	4a0c      	ldr	r2, [pc, #48]	; (1de8 <system_gclk_gen_get_hz+0x70>)
    1db6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1db8:	b25b      	sxtb	r3, r3
    1dba:	2b00      	cmp	r3, #0
    1dbc:	dbfb      	blt.n	1db6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1dbe:	4b0a      	ldr	r3, [pc, #40]	; (1de8 <system_gclk_gen_get_hz+0x70>)
    1dc0:	689c      	ldr	r4, [r3, #8]
    1dc2:	0224      	lsls	r4, r4, #8
    1dc4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1dc6:	4b0d      	ldr	r3, [pc, #52]	; (1dfc <system_gclk_gen_get_hz+0x84>)
    1dc8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1dca:	2e00      	cmp	r6, #0
    1dcc:	d107      	bne.n	1dde <system_gclk_gen_get_hz+0x66>
    1dce:	2c01      	cmp	r4, #1
    1dd0:	d907      	bls.n	1de2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1dd2:	0021      	movs	r1, r4
    1dd4:	0028      	movs	r0, r5
    1dd6:	4b0a      	ldr	r3, [pc, #40]	; (1e00 <system_gclk_gen_get_hz+0x88>)
    1dd8:	4798      	blx	r3
    1dda:	0005      	movs	r5, r0
    1ddc:	e001      	b.n	1de2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1dde:	3401      	adds	r4, #1
    1de0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1de2:	0028      	movs	r0, r5
    1de4:	bd70      	pop	{r4, r5, r6, pc}
    1de6:	46c0      	nop			; (mov r8, r8)
    1de8:	40000c00 	.word	0x40000c00
    1dec:	00000825 	.word	0x00000825
    1df0:	40000c04 	.word	0x40000c04
    1df4:	0000184d 	.word	0x0000184d
    1df8:	40000c08 	.word	0x40000c08
    1dfc:	00000865 	.word	0x00000865
    1e00:	000034e9 	.word	0x000034e9

00001e04 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1e04:	b510      	push	{r4, lr}
    1e06:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e08:	4b06      	ldr	r3, [pc, #24]	; (1e24 <system_gclk_chan_enable+0x20>)
    1e0a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e0c:	4b06      	ldr	r3, [pc, #24]	; (1e28 <system_gclk_chan_enable+0x24>)
    1e0e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1e10:	4a06      	ldr	r2, [pc, #24]	; (1e2c <system_gclk_chan_enable+0x28>)
    1e12:	8853      	ldrh	r3, [r2, #2]
    1e14:	2180      	movs	r1, #128	; 0x80
    1e16:	01c9      	lsls	r1, r1, #7
    1e18:	430b      	orrs	r3, r1
    1e1a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1e1c:	4b04      	ldr	r3, [pc, #16]	; (1e30 <system_gclk_chan_enable+0x2c>)
    1e1e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e20:	bd10      	pop	{r4, pc}
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	00000825 	.word	0x00000825
    1e28:	40000c02 	.word	0x40000c02
    1e2c:	40000c00 	.word	0x40000c00
    1e30:	00000865 	.word	0x00000865

00001e34 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1e34:	b510      	push	{r4, lr}
    1e36:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e38:	4b0f      	ldr	r3, [pc, #60]	; (1e78 <system_gclk_chan_disable+0x44>)
    1e3a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e3c:	4b0f      	ldr	r3, [pc, #60]	; (1e7c <system_gclk_chan_disable+0x48>)
    1e3e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1e40:	4a0f      	ldr	r2, [pc, #60]	; (1e80 <system_gclk_chan_disable+0x4c>)
    1e42:	8853      	ldrh	r3, [r2, #2]
    1e44:	051b      	lsls	r3, r3, #20
    1e46:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1e48:	8853      	ldrh	r3, [r2, #2]
    1e4a:	490e      	ldr	r1, [pc, #56]	; (1e84 <system_gclk_chan_disable+0x50>)
    1e4c:	400b      	ands	r3, r1
    1e4e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1e50:	8853      	ldrh	r3, [r2, #2]
    1e52:	490d      	ldr	r1, [pc, #52]	; (1e88 <system_gclk_chan_disable+0x54>)
    1e54:	400b      	ands	r3, r1
    1e56:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1e58:	0011      	movs	r1, r2
    1e5a:	2280      	movs	r2, #128	; 0x80
    1e5c:	01d2      	lsls	r2, r2, #7
    1e5e:	884b      	ldrh	r3, [r1, #2]
    1e60:	4213      	tst	r3, r2
    1e62:	d1fc      	bne.n	1e5e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1e64:	4906      	ldr	r1, [pc, #24]	; (1e80 <system_gclk_chan_disable+0x4c>)
    1e66:	884a      	ldrh	r2, [r1, #2]
    1e68:	0203      	lsls	r3, r0, #8
    1e6a:	4806      	ldr	r0, [pc, #24]	; (1e84 <system_gclk_chan_disable+0x50>)
    1e6c:	4002      	ands	r2, r0
    1e6e:	4313      	orrs	r3, r2
    1e70:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1e72:	4b06      	ldr	r3, [pc, #24]	; (1e8c <system_gclk_chan_disable+0x58>)
    1e74:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1e76:	bd10      	pop	{r4, pc}
    1e78:	00000825 	.word	0x00000825
    1e7c:	40000c02 	.word	0x40000c02
    1e80:	40000c00 	.word	0x40000c00
    1e84:	fffff0ff 	.word	0xfffff0ff
    1e88:	ffffbfff 	.word	0xffffbfff
    1e8c:	00000865 	.word	0x00000865

00001e90 <system_gclk_chan_set_config>:
{
    1e90:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1e92:	780c      	ldrb	r4, [r1, #0]
    1e94:	0224      	lsls	r4, r4, #8
    1e96:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1e98:	4b02      	ldr	r3, [pc, #8]	; (1ea4 <system_gclk_chan_set_config+0x14>)
    1e9a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1e9c:	b2a4      	uxth	r4, r4
    1e9e:	4b02      	ldr	r3, [pc, #8]	; (1ea8 <system_gclk_chan_set_config+0x18>)
    1ea0:	805c      	strh	r4, [r3, #2]
}
    1ea2:	bd10      	pop	{r4, pc}
    1ea4:	00001e35 	.word	0x00001e35
    1ea8:	40000c00 	.word	0x40000c00

00001eac <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1eac:	b510      	push	{r4, lr}
    1eae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1eb0:	4b06      	ldr	r3, [pc, #24]	; (1ecc <system_gclk_chan_get_hz+0x20>)
    1eb2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1eb4:	4b06      	ldr	r3, [pc, #24]	; (1ed0 <system_gclk_chan_get_hz+0x24>)
    1eb6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1eb8:	4b06      	ldr	r3, [pc, #24]	; (1ed4 <system_gclk_chan_get_hz+0x28>)
    1eba:	885c      	ldrh	r4, [r3, #2]
    1ebc:	0524      	lsls	r4, r4, #20
    1ebe:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1ec0:	4b05      	ldr	r3, [pc, #20]	; (1ed8 <system_gclk_chan_get_hz+0x2c>)
    1ec2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1ec4:	0020      	movs	r0, r4
    1ec6:	4b05      	ldr	r3, [pc, #20]	; (1edc <system_gclk_chan_get_hz+0x30>)
    1ec8:	4798      	blx	r3
}
    1eca:	bd10      	pop	{r4, pc}
    1ecc:	00000825 	.word	0x00000825
    1ed0:	40000c02 	.word	0x40000c02
    1ed4:	40000c00 	.word	0x40000c00
    1ed8:	00000865 	.word	0x00000865
    1edc:	00001d79 	.word	0x00001d79

00001ee0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1ee0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1ee2:	78d3      	ldrb	r3, [r2, #3]
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d135      	bne.n	1f54 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ee8:	7813      	ldrb	r3, [r2, #0]
    1eea:	2b80      	cmp	r3, #128	; 0x80
    1eec:	d029      	beq.n	1f42 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1eee:	061b      	lsls	r3, r3, #24
    1ef0:	2480      	movs	r4, #128	; 0x80
    1ef2:	0264      	lsls	r4, r4, #9
    1ef4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ef6:	7854      	ldrb	r4, [r2, #1]
    1ef8:	2502      	movs	r5, #2
    1efa:	43ac      	bics	r4, r5
    1efc:	d106      	bne.n	1f0c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1efe:	7894      	ldrb	r4, [r2, #2]
    1f00:	2c00      	cmp	r4, #0
    1f02:	d120      	bne.n	1f46 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1f04:	2480      	movs	r4, #128	; 0x80
    1f06:	02a4      	lsls	r4, r4, #10
    1f08:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1f0a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f0c:	7854      	ldrb	r4, [r2, #1]
    1f0e:	3c01      	subs	r4, #1
    1f10:	2c01      	cmp	r4, #1
    1f12:	d91c      	bls.n	1f4e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f14:	040d      	lsls	r5, r1, #16
    1f16:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f18:	24a0      	movs	r4, #160	; 0xa0
    1f1a:	05e4      	lsls	r4, r4, #23
    1f1c:	432c      	orrs	r4, r5
    1f1e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f20:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f22:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f24:	24d0      	movs	r4, #208	; 0xd0
    1f26:	0624      	lsls	r4, r4, #24
    1f28:	432c      	orrs	r4, r5
    1f2a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f2c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1f2e:	78d4      	ldrb	r4, [r2, #3]
    1f30:	2c00      	cmp	r4, #0
    1f32:	d122      	bne.n	1f7a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1f34:	035b      	lsls	r3, r3, #13
    1f36:	d51c      	bpl.n	1f72 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1f38:	7893      	ldrb	r3, [r2, #2]
    1f3a:	2b01      	cmp	r3, #1
    1f3c:	d01e      	beq.n	1f7c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1f3e:	6141      	str	r1, [r0, #20]
    1f40:	e017      	b.n	1f72 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1f42:	2300      	movs	r3, #0
    1f44:	e7d7      	b.n	1ef6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1f46:	24c0      	movs	r4, #192	; 0xc0
    1f48:	02e4      	lsls	r4, r4, #11
    1f4a:	4323      	orrs	r3, r4
    1f4c:	e7dd      	b.n	1f0a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1f4e:	4c0d      	ldr	r4, [pc, #52]	; (1f84 <_system_pinmux_config+0xa4>)
    1f50:	4023      	ands	r3, r4
    1f52:	e7df      	b.n	1f14 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1f54:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f56:	040c      	lsls	r4, r1, #16
    1f58:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f5a:	23a0      	movs	r3, #160	; 0xa0
    1f5c:	05db      	lsls	r3, r3, #23
    1f5e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f60:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f62:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f64:	23d0      	movs	r3, #208	; 0xd0
    1f66:	061b      	lsls	r3, r3, #24
    1f68:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f6a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1f6c:	78d3      	ldrb	r3, [r2, #3]
    1f6e:	2b00      	cmp	r3, #0
    1f70:	d103      	bne.n	1f7a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f72:	7853      	ldrb	r3, [r2, #1]
    1f74:	3b01      	subs	r3, #1
    1f76:	2b01      	cmp	r3, #1
    1f78:	d902      	bls.n	1f80 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1f7a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1f7c:	6181      	str	r1, [r0, #24]
    1f7e:	e7f8      	b.n	1f72 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1f80:	6081      	str	r1, [r0, #8]
}
    1f82:	e7fa      	b.n	1f7a <_system_pinmux_config+0x9a>
    1f84:	fffbffff 	.word	0xfffbffff

00001f88 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1f88:	b510      	push	{r4, lr}
    1f8a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1f8c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1f8e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1f90:	2900      	cmp	r1, #0
    1f92:	d104      	bne.n	1f9e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1f94:	0943      	lsrs	r3, r0, #5
    1f96:	01db      	lsls	r3, r3, #7
    1f98:	4905      	ldr	r1, [pc, #20]	; (1fb0 <system_pinmux_pin_set_config+0x28>)
    1f9a:	468c      	mov	ip, r1
    1f9c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1f9e:	241f      	movs	r4, #31
    1fa0:	4020      	ands	r0, r4
    1fa2:	2101      	movs	r1, #1
    1fa4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1fa6:	0018      	movs	r0, r3
    1fa8:	4b02      	ldr	r3, [pc, #8]	; (1fb4 <system_pinmux_pin_set_config+0x2c>)
    1faa:	4798      	blx	r3
}
    1fac:	bd10      	pop	{r4, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	41004400 	.word	0x41004400
    1fb4:	00001ee1 	.word	0x00001ee1

00001fb8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1fb8:	4770      	bx	lr
	...

00001fbc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1fbc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1fbe:	4b05      	ldr	r3, [pc, #20]	; (1fd4 <system_init+0x18>)
    1fc0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1fc2:	4b05      	ldr	r3, [pc, #20]	; (1fd8 <system_init+0x1c>)
    1fc4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1fc6:	4b05      	ldr	r3, [pc, #20]	; (1fdc <system_init+0x20>)
    1fc8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1fca:	4b05      	ldr	r3, [pc, #20]	; (1fe0 <system_init+0x24>)
    1fcc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1fce:	4b05      	ldr	r3, [pc, #20]	; (1fe4 <system_init+0x28>)
    1fd0:	4798      	blx	r3
}
    1fd2:	bd10      	pop	{r4, pc}
    1fd4:	00001afd 	.word	0x00001afd
    1fd8:	00000895 	.word	0x00000895
    1fdc:	00001fb9 	.word	0x00001fb9
    1fe0:	00001fb9 	.word	0x00001fb9
    1fe4:	00001fb9 	.word	0x00001fb9

00001fe8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1fe8:	e7fe      	b.n	1fe8 <Dummy_Handler>
	...

00001fec <Reset_Handler>:
{
    1fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1fee:	4a2a      	ldr	r2, [pc, #168]	; (2098 <STACK_SIZE+0x98>)
    1ff0:	4b2a      	ldr	r3, [pc, #168]	; (209c <STACK_SIZE+0x9c>)
    1ff2:	429a      	cmp	r2, r3
    1ff4:	d011      	beq.n	201a <STACK_SIZE+0x1a>
                for (; pDest < &_erelocate;) {
    1ff6:	001a      	movs	r2, r3
    1ff8:	4b29      	ldr	r3, [pc, #164]	; (20a0 <STACK_SIZE+0xa0>)
    1ffa:	429a      	cmp	r2, r3
    1ffc:	d20d      	bcs.n	201a <STACK_SIZE+0x1a>
    1ffe:	4a29      	ldr	r2, [pc, #164]	; (20a4 <STACK_SIZE+0xa4>)
    2000:	3303      	adds	r3, #3
    2002:	1a9b      	subs	r3, r3, r2
    2004:	089b      	lsrs	r3, r3, #2
    2006:	3301      	adds	r3, #1
    2008:	009b      	lsls	r3, r3, #2
    200a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    200c:	4823      	ldr	r0, [pc, #140]	; (209c <STACK_SIZE+0x9c>)
    200e:	4922      	ldr	r1, [pc, #136]	; (2098 <STACK_SIZE+0x98>)
    2010:	588c      	ldr	r4, [r1, r2]
    2012:	5084      	str	r4, [r0, r2]
    2014:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2016:	429a      	cmp	r2, r3
    2018:	d1fa      	bne.n	2010 <STACK_SIZE+0x10>
        for (pDest = &_szero; pDest < &_ezero;) {
    201a:	4a23      	ldr	r2, [pc, #140]	; (20a8 <STACK_SIZE+0xa8>)
    201c:	4b23      	ldr	r3, [pc, #140]	; (20ac <STACK_SIZE+0xac>)
    201e:	429a      	cmp	r2, r3
    2020:	d20a      	bcs.n	2038 <STACK_SIZE+0x38>
    2022:	43d3      	mvns	r3, r2
    2024:	4921      	ldr	r1, [pc, #132]	; (20ac <STACK_SIZE+0xac>)
    2026:	185b      	adds	r3, r3, r1
    2028:	2103      	movs	r1, #3
    202a:	438b      	bics	r3, r1
    202c:	3304      	adds	r3, #4
    202e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2030:	2100      	movs	r1, #0
    2032:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2034:	4293      	cmp	r3, r2
    2036:	d1fc      	bne.n	2032 <STACK_SIZE+0x32>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2038:	4a1d      	ldr	r2, [pc, #116]	; (20b0 <STACK_SIZE+0xb0>)
    203a:	21ff      	movs	r1, #255	; 0xff
    203c:	4b1d      	ldr	r3, [pc, #116]	; (20b4 <STACK_SIZE+0xb4>)
    203e:	438b      	bics	r3, r1
    2040:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2042:	39fd      	subs	r1, #253	; 0xfd
    2044:	2390      	movs	r3, #144	; 0x90
    2046:	005b      	lsls	r3, r3, #1
    2048:	4a1b      	ldr	r2, [pc, #108]	; (20b8 <STACK_SIZE+0xb8>)
    204a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    204c:	4a1b      	ldr	r2, [pc, #108]	; (20bc <STACK_SIZE+0xbc>)
    204e:	78d3      	ldrb	r3, [r2, #3]
    2050:	2503      	movs	r5, #3
    2052:	43ab      	bics	r3, r5
    2054:	2402      	movs	r4, #2
    2056:	4323      	orrs	r3, r4
    2058:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    205a:	78d3      	ldrb	r3, [r2, #3]
    205c:	270c      	movs	r7, #12
    205e:	43bb      	bics	r3, r7
    2060:	2608      	movs	r6, #8
    2062:	4333      	orrs	r3, r6
    2064:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2066:	4b16      	ldr	r3, [pc, #88]	; (20c0 <STACK_SIZE+0xc0>)
    2068:	7b98      	ldrb	r0, [r3, #14]
    206a:	2230      	movs	r2, #48	; 0x30
    206c:	4390      	bics	r0, r2
    206e:	2220      	movs	r2, #32
    2070:	4310      	orrs	r0, r2
    2072:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2074:	7b99      	ldrb	r1, [r3, #14]
    2076:	43b9      	bics	r1, r7
    2078:	4331      	orrs	r1, r6
    207a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    207c:	7b9a      	ldrb	r2, [r3, #14]
    207e:	43aa      	bics	r2, r5
    2080:	4322      	orrs	r2, r4
    2082:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2084:	4a0f      	ldr	r2, [pc, #60]	; (20c4 <STACK_SIZE+0xc4>)
    2086:	6853      	ldr	r3, [r2, #4]
    2088:	2180      	movs	r1, #128	; 0x80
    208a:	430b      	orrs	r3, r1
    208c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    208e:	4b0e      	ldr	r3, [pc, #56]	; (20c8 <STACK_SIZE+0xc8>)
    2090:	4798      	blx	r3
        main();
    2092:	4b0e      	ldr	r3, [pc, #56]	; (20cc <STACK_SIZE+0xcc>)
    2094:	4798      	blx	r3
    2096:	e7fe      	b.n	2096 <STACK_SIZE+0x96>
    2098:	00006dc0 	.word	0x00006dc0
    209c:	20000000 	.word	0x20000000
    20a0:	200001c8 	.word	0x200001c8
    20a4:	20000004 	.word	0x20000004
    20a8:	200001c8 	.word	0x200001c8
    20ac:	20000ad0 	.word	0x20000ad0
    20b0:	e000ed00 	.word	0xe000ed00
    20b4:	00000000 	.word	0x00000000
    20b8:	41007000 	.word	0x41007000
    20bc:	41005000 	.word	0x41005000
    20c0:	41004800 	.word	0x41004800
    20c4:	41004000 	.word	0x41004000
    20c8:	00003829 	.word	0x00003829
    20cc:	00003435 	.word	0x00003435

000020d0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20d2:	46c6      	mov	lr, r8
    20d4:	b500      	push	{lr}
    20d6:	000c      	movs	r4, r1
    20d8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    20da:	2800      	cmp	r0, #0
    20dc:	d10f      	bne.n	20fe <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    20de:	2a00      	cmp	r2, #0
    20e0:	dd11      	ble.n	2106 <_read+0x36>
    20e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    20e4:	4e09      	ldr	r6, [pc, #36]	; (210c <_read+0x3c>)
    20e6:	4d0a      	ldr	r5, [pc, #40]	; (2110 <_read+0x40>)
    20e8:	6830      	ldr	r0, [r6, #0]
    20ea:	0021      	movs	r1, r4
    20ec:	682b      	ldr	r3, [r5, #0]
    20ee:	4798      	blx	r3
		ptr++;
    20f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    20f2:	42bc      	cmp	r4, r7
    20f4:	d1f8      	bne.n	20e8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    20f6:	4640      	mov	r0, r8
    20f8:	bc04      	pop	{r2}
    20fa:	4690      	mov	r8, r2
    20fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    20fe:	2301      	movs	r3, #1
    2100:	425b      	negs	r3, r3
    2102:	4698      	mov	r8, r3
    2104:	e7f7      	b.n	20f6 <_read+0x26>
	for (; len > 0; --len) {
    2106:	4680      	mov	r8, r0
    2108:	e7f5      	b.n	20f6 <_read+0x26>
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	200002e4 	.word	0x200002e4
    2110:	200002dc 	.word	0x200002dc

00002114 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2114:	b5f0      	push	{r4, r5, r6, r7, lr}
    2116:	46c6      	mov	lr, r8
    2118:	b500      	push	{lr}
    211a:	000e      	movs	r6, r1
    211c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    211e:	3801      	subs	r0, #1
    2120:	2802      	cmp	r0, #2
    2122:	d810      	bhi.n	2146 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2124:	2a00      	cmp	r2, #0
    2126:	d011      	beq.n	214c <_write+0x38>
    2128:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    212a:	4b0c      	ldr	r3, [pc, #48]	; (215c <_write+0x48>)
    212c:	4698      	mov	r8, r3
    212e:	4f0c      	ldr	r7, [pc, #48]	; (2160 <_write+0x4c>)
    2130:	4643      	mov	r3, r8
    2132:	6818      	ldr	r0, [r3, #0]
    2134:	5d31      	ldrb	r1, [r6, r4]
    2136:	683b      	ldr	r3, [r7, #0]
    2138:	4798      	blx	r3
    213a:	2800      	cmp	r0, #0
    213c:	db08      	blt.n	2150 <_write+0x3c>
			return -1;
		}
		++nChars;
    213e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2140:	42a5      	cmp	r5, r4
    2142:	d1f5      	bne.n	2130 <_write+0x1c>
    2144:	e006      	b.n	2154 <_write+0x40>
		return -1;
    2146:	2401      	movs	r4, #1
    2148:	4264      	negs	r4, r4
    214a:	e003      	b.n	2154 <_write+0x40>
	for (; len != 0; --len) {
    214c:	0014      	movs	r4, r2
    214e:	e001      	b.n	2154 <_write+0x40>
			return -1;
    2150:	2401      	movs	r4, #1
    2152:	4264      	negs	r4, r4
	}
	return nChars;
}
    2154:	0020      	movs	r0, r4
    2156:	bc04      	pop	{r2}
    2158:	4690      	mov	r8, r2
    215a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    215c:	200002e4 	.word	0x200002e4
    2160:	200002e0 	.word	0x200002e0

00002164 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2164:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2166:	4a06      	ldr	r2, [pc, #24]	; (2180 <_sbrk+0x1c>)
    2168:	6812      	ldr	r2, [r2, #0]
    216a:	2a00      	cmp	r2, #0
    216c:	d004      	beq.n	2178 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    216e:	4a04      	ldr	r2, [pc, #16]	; (2180 <_sbrk+0x1c>)
    2170:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2172:	18c3      	adds	r3, r0, r3
    2174:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2176:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2178:	4902      	ldr	r1, [pc, #8]	; (2184 <_sbrk+0x20>)
    217a:	4a01      	ldr	r2, [pc, #4]	; (2180 <_sbrk+0x1c>)
    217c:	6011      	str	r1, [r2, #0]
    217e:	e7f6      	b.n	216e <_sbrk+0xa>
    2180:	200002a0 	.word	0x200002a0
    2184:	20002ad0 	.word	0x20002ad0

00002188 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2188:	2001      	movs	r0, #1
    218a:	4240      	negs	r0, r0
    218c:	4770      	bx	lr

0000218e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    218e:	2380      	movs	r3, #128	; 0x80
    2190:	019b      	lsls	r3, r3, #6
    2192:	604b      	str	r3, [r1, #4]

	return 0;
}
    2194:	2000      	movs	r0, #0
    2196:	4770      	bx	lr

00002198 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2198:	2001      	movs	r0, #1
    219a:	4770      	bx	lr

0000219c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    219c:	2000      	movs	r0, #0
    219e:	4770      	bx	lr

000021a0 <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    21a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21a2:	46d6      	mov	lr, sl
    21a4:	464f      	mov	r7, r9
    21a6:	4646      	mov	r6, r8
    21a8:	b5c0      	push	{r6, r7, lr}
    21aa:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    21ac:	4b2a      	ldr	r3, [pc, #168]	; (2258 <drawChar+0xb8>)
    21ae:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    21b0:	4a2a      	ldr	r2, [pc, #168]	; (225c <drawChar+0xbc>)
    21b2:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    21b4:	005a      	lsls	r2, r3, #1
    21b6:	18d2      	adds	r2, r2, r3
    21b8:	00d2      	lsls	r2, r2, #3
    21ba:	4829      	ldr	r0, [pc, #164]	; (2260 <drawChar+0xc0>)
    21bc:	1882      	adds	r2, r0, r2
    21be:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    21c0:	2180      	movs	r1, #128	; 0x80
    21c2:	03c9      	lsls	r1, r1, #15
    21c4:	4a27      	ldr	r2, [pc, #156]	; (2264 <drawChar+0xc4>)
    21c6:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    21c8:	0098      	lsls	r0, r3, #2
    21ca:	181b      	adds	r3, r3, r0
    21cc:	005b      	lsls	r3, r3, #1
    21ce:	b298      	uxth	r0, r3
    21d0:	2114      	movs	r1, #20
    21d2:	4369      	muls	r1, r5
    21d4:	b289      	uxth	r1, r1
    21d6:	000b      	movs	r3, r1
    21d8:	3313      	adds	r3, #19
    21da:	b29b      	uxth	r3, r3
    21dc:	0002      	movs	r2, r0
    21de:	3209      	adds	r2, #9
    21e0:	b292      	uxth	r2, r2
    21e2:	4d21      	ldr	r5, [pc, #132]	; (2268 <drawChar+0xc8>)
    21e4:	47a8      	blx	r5
    21e6:	4a21      	ldr	r2, [pc, #132]	; (226c <drawChar+0xcc>)
    21e8:	00a5      	lsls	r5, r4, #2
    21ea:	192d      	adds	r5, r5, r4
    21ec:	00ab      	lsls	r3, r5, #2
    21ee:	18ed      	adds	r5, r5, r3
    21f0:	1955      	adds	r5, r2, r5
    21f2:	3401      	adds	r4, #1
    21f4:	00a3      	lsls	r3, r4, #2
    21f6:	191c      	adds	r4, r3, r4
    21f8:	00a3      	lsls	r3, r4, #2
    21fa:	18e4      	adds	r4, r4, r3
    21fc:	4692      	mov	sl, r2
    21fe:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    2200:	4b1b      	ldr	r3, [pc, #108]	; (2270 <drawChar+0xd0>)
    2202:	4699      	mov	r9, r3
    2204:	4b1b      	ldr	r3, [pc, #108]	; (2274 <drawChar+0xd4>)
    2206:	4698      	mov	r8, r3
    2208:	4f1b      	ldr	r7, [pc, #108]	; (2278 <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    220a:	4e1c      	ldr	r6, [pc, #112]	; (227c <drawChar+0xdc>)
    220c:	e019      	b.n	2242 <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    220e:	464b      	mov	r3, r9
    2210:	8818      	ldrh	r0, [r3, #0]
    2212:	0200      	lsls	r0, r0, #8
    2214:	4643      	mov	r3, r8
    2216:	881b      	ldrh	r3, [r3, #0]
    2218:	4318      	orrs	r0, r3
    221a:	b280      	uxth	r0, r0
    221c:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    221e:	3c01      	subs	r4, #1
    2220:	d30c      	bcc.n	223c <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2222:	782b      	ldrb	r3, [r5, #0]
    2224:	4123      	asrs	r3, r4
    2226:	07db      	lsls	r3, r3, #31
    2228:	d5f1      	bpl.n	220e <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    222a:	8830      	ldrh	r0, [r6, #0]
    222c:	0200      	lsls	r0, r0, #8
    222e:	4b14      	ldr	r3, [pc, #80]	; (2280 <drawChar+0xe0>)
    2230:	881b      	ldrh	r3, [r3, #0]
    2232:	4318      	orrs	r0, r3
    2234:	b280      	uxth	r0, r0
    2236:	4b10      	ldr	r3, [pc, #64]	; (2278 <drawChar+0xd8>)
    2238:	4798      	blx	r3
    223a:	e7f0      	b.n	221e <drawChar+0x7e>
    223c:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    223e:	4555      	cmp	r5, sl
    2240:	d001      	beq.n	2246 <drawChar+0xa6>
{
    2242:	2407      	movs	r4, #7
    2244:	e7ed      	b.n	2222 <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    2246:	2280      	movs	r2, #128	; 0x80
    2248:	03d2      	lsls	r2, r2, #15
    224a:	4b0e      	ldr	r3, [pc, #56]	; (2284 <drawChar+0xe4>)
    224c:	601a      	str	r2, [r3, #0]
	

}
    224e:	bc1c      	pop	{r2, r3, r4}
    2250:	4690      	mov	r8, r2
    2252:	4699      	mov	r9, r3
    2254:	46a2      	mov	sl, r4
    2256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2258:	200002a4 	.word	0x200002a4
    225c:	200002a6 	.word	0x200002a6
    2260:	20000320 	.word	0x20000320
    2264:	41004494 	.word	0x41004494
    2268:	00002c61 	.word	0x00002c61
    226c:	0000513c 	.word	0x0000513c
    2270:	20000aa6 	.word	0x20000aa6
    2274:	20000aa0 	.word	0x20000aa0
    2278:	00002d99 	.word	0x00002d99
    227c:	20000aa2 	.word	0x20000aa2
    2280:	20000aa4 	.word	0x20000aa4
    2284:	41004498 	.word	0x41004498

00002288 <blinkCursor>:
	*/
	
}

void blinkCursor(void)
{
    2288:	b5f0      	push	{r4, r5, r6, r7, lr}
    228a:	46d6      	mov	lr, sl
    228c:	464f      	mov	r7, r9
    228e:	4646      	mov	r6, r8
    2290:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    2292:	4b47      	ldr	r3, [pc, #284]	; (23b0 <blinkCursor+0x128>)
    2294:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    2296:	4a47      	ldr	r2, [pc, #284]	; (23b4 <blinkCursor+0x12c>)
    2298:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    229a:	005a      	lsls	r2, r3, #1
    229c:	18d2      	adds	r2, r2, r3
    229e:	00d2      	lsls	r2, r2, #3
    22a0:	4845      	ldr	r0, [pc, #276]	; (23b8 <blinkCursor+0x130>)
    22a2:	1882      	adds	r2, r0, r2
    22a4:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    22a6:	0098      	lsls	r0, r3, #2
    22a8:	181b      	adds	r3, r3, r0
    22aa:	005b      	lsls	r3, r3, #1
    22ac:	b298      	uxth	r0, r3
    22ae:	2114      	movs	r1, #20
    22b0:	4369      	muls	r1, r5
    22b2:	b289      	uxth	r1, r1
    22b4:	000b      	movs	r3, r1
    22b6:	3313      	adds	r3, #19
    22b8:	b29b      	uxth	r3, r3
    22ba:	0002      	movs	r2, r0
    22bc:	3209      	adds	r2, #9
    22be:	b292      	uxth	r2, r2
    22c0:	4d3e      	ldr	r5, [pc, #248]	; (23bc <blinkCursor+0x134>)
    22c2:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    22c4:	2280      	movs	r2, #128	; 0x80
    22c6:	03d2      	lsls	r2, r2, #15
    22c8:	4b3d      	ldr	r3, [pc, #244]	; (23c0 <blinkCursor+0x138>)
    22ca:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    22cc:	4b3d      	ldr	r3, [pc, #244]	; (23c4 <blinkCursor+0x13c>)
    22ce:	781b      	ldrb	r3, [r3, #0]
    22d0:	2b00      	cmp	r3, #0
    22d2:	d113      	bne.n	22fc <blinkCursor+0x74>
    22d4:	4a3c      	ldr	r2, [pc, #240]	; (23c8 <blinkCursor+0x140>)
    22d6:	00a5      	lsls	r5, r4, #2
    22d8:	192d      	adds	r5, r5, r4
    22da:	00ab      	lsls	r3, r5, #2
    22dc:	18ed      	adds	r5, r5, r3
    22de:	1955      	adds	r5, r2, r5
    22e0:	3401      	adds	r4, #1
    22e2:	00a3      	lsls	r3, r4, #2
    22e4:	191c      	adds	r4, r3, r4
    22e6:	00a3      	lsls	r3, r4, #2
    22e8:	18e4      	adds	r4, r4, r3
    22ea:	4692      	mov	sl, r2
    22ec:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    22ee:	4b37      	ldr	r3, [pc, #220]	; (23cc <blinkCursor+0x144>)
    22f0:	4699      	mov	r9, r3
    22f2:	4b37      	ldr	r3, [pc, #220]	; (23d0 <blinkCursor+0x148>)
    22f4:	4698      	mov	r8, r3
    22f6:	4f37      	ldr	r7, [pc, #220]	; (23d4 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    22f8:	4e37      	ldr	r6, [pc, #220]	; (23d8 <blinkCursor+0x150>)
    22fa:	e049      	b.n	2390 <blinkCursor+0x108>
    22fc:	4a32      	ldr	r2, [pc, #200]	; (23c8 <blinkCursor+0x140>)
    22fe:	00a5      	lsls	r5, r4, #2
    2300:	192d      	adds	r5, r5, r4
    2302:	00ab      	lsls	r3, r5, #2
    2304:	18ed      	adds	r5, r5, r3
    2306:	1955      	adds	r5, r2, r5
    2308:	3401      	adds	r4, #1
    230a:	00a3      	lsls	r3, r4, #2
    230c:	191c      	adds	r4, r3, r4
    230e:	00a3      	lsls	r3, r4, #2
    2310:	18e4      	adds	r4, r4, r3
    2312:	4692      	mov	sl, r2
    2314:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2316:	4b30      	ldr	r3, [pc, #192]	; (23d8 <blinkCursor+0x150>)
    2318:	4699      	mov	r9, r3
    231a:	4b30      	ldr	r3, [pc, #192]	; (23dc <blinkCursor+0x154>)
    231c:	4698      	mov	r8, r3
    231e:	4f2d      	ldr	r7, [pc, #180]	; (23d4 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    2320:	4e2a      	ldr	r6, [pc, #168]	; (23cc <blinkCursor+0x144>)
    2322:	e019      	b.n	2358 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2324:	464b      	mov	r3, r9
    2326:	8818      	ldrh	r0, [r3, #0]
    2328:	0200      	lsls	r0, r0, #8
    232a:	4643      	mov	r3, r8
    232c:	881b      	ldrh	r3, [r3, #0]
    232e:	4318      	orrs	r0, r3
    2330:	b280      	uxth	r0, r0
    2332:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2334:	3c01      	subs	r4, #1
    2336:	d30c      	bcc.n	2352 <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2338:	782b      	ldrb	r3, [r5, #0]
    233a:	4123      	asrs	r3, r4
    233c:	07db      	lsls	r3, r3, #31
    233e:	d5f1      	bpl.n	2324 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2340:	8830      	ldrh	r0, [r6, #0]
    2342:	0200      	lsls	r0, r0, #8
    2344:	4b22      	ldr	r3, [pc, #136]	; (23d0 <blinkCursor+0x148>)
    2346:	881b      	ldrh	r3, [r3, #0]
    2348:	4318      	orrs	r0, r3
    234a:	b280      	uxth	r0, r0
    234c:	4b21      	ldr	r3, [pc, #132]	; (23d4 <blinkCursor+0x14c>)
    234e:	4798      	blx	r3
    2350:	e7f0      	b.n	2334 <blinkCursor+0xac>
    2352:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2354:	4555      	cmp	r5, sl
    2356:	d01d      	beq.n	2394 <blinkCursor+0x10c>
{
    2358:	2407      	movs	r4, #7
    235a:	e7ed      	b.n	2338 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    235c:	464b      	mov	r3, r9
    235e:	8818      	ldrh	r0, [r3, #0]
    2360:	0200      	lsls	r0, r0, #8
    2362:	4643      	mov	r3, r8
    2364:	881b      	ldrh	r3, [r3, #0]
    2366:	4318      	orrs	r0, r3
    2368:	b280      	uxth	r0, r0
    236a:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    236c:	3c01      	subs	r4, #1
    236e:	d30c      	bcc.n	238a <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2370:	782b      	ldrb	r3, [r5, #0]
    2372:	4123      	asrs	r3, r4
    2374:	07db      	lsls	r3, r3, #31
    2376:	d5f1      	bpl.n	235c <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2378:	8830      	ldrh	r0, [r6, #0]
    237a:	0200      	lsls	r0, r0, #8
    237c:	4b17      	ldr	r3, [pc, #92]	; (23dc <blinkCursor+0x154>)
    237e:	881b      	ldrh	r3, [r3, #0]
    2380:	4318      	orrs	r0, r3
    2382:	b280      	uxth	r0, r0
    2384:	4b13      	ldr	r3, [pc, #76]	; (23d4 <blinkCursor+0x14c>)
    2386:	4798      	blx	r3
    2388:	e7f0      	b.n	236c <blinkCursor+0xe4>
    238a:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    238c:	4555      	cmp	r5, sl
    238e:	d001      	beq.n	2394 <blinkCursor+0x10c>
{
    2390:	2407      	movs	r4, #7
    2392:	e7ed      	b.n	2370 <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    2394:	2280      	movs	r2, #128	; 0x80
    2396:	03d2      	lsls	r2, r2, #15
    2398:	4b11      	ldr	r3, [pc, #68]	; (23e0 <blinkCursor+0x158>)
    239a:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    239c:	4a09      	ldr	r2, [pc, #36]	; (23c4 <blinkCursor+0x13c>)
    239e:	7813      	ldrb	r3, [r2, #0]
    23a0:	2101      	movs	r1, #1
    23a2:	404b      	eors	r3, r1
    23a4:	7013      	strb	r3, [r2, #0]
	
}
    23a6:	bc1c      	pop	{r2, r3, r4}
    23a8:	4690      	mov	r8, r2
    23aa:	4699      	mov	r9, r3
    23ac:	46a2      	mov	sl, r4
    23ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23b0:	200002a4 	.word	0x200002a4
    23b4:	200002a6 	.word	0x200002a6
    23b8:	20000320 	.word	0x20000320
    23bc:	00002c61 	.word	0x00002c61
    23c0:	41004494 	.word	0x41004494
    23c4:	20000010 	.word	0x20000010
    23c8:	0000513c 	.word	0x0000513c
    23cc:	20000aa6 	.word	0x20000aa6
    23d0:	20000aa0 	.word	0x20000aa0
    23d4:	00002d99 	.word	0x00002d99
    23d8:	20000aa2 	.word	0x20000aa2
    23dc:	20000aa4 	.word	0x20000aa4
    23e0:	41004498 	.word	0x41004498

000023e4 <newLine>:
{
    23e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23e6:	46de      	mov	lr, fp
    23e8:	4657      	mov	r7, sl
    23ea:	464e      	mov	r6, r9
    23ec:	4645      	mov	r5, r8
    23ee:	b5e0      	push	{r5, r6, r7, lr}
    23f0:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    23f2:	4b24      	ldr	r3, [pc, #144]	; (2484 <newLine+0xa0>)
    23f4:	881b      	ldrh	r3, [r3, #0]
    23f6:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    23f8:	4b23      	ldr	r3, [pc, #140]	; (2488 <newLine+0xa4>)
    23fa:	881b      	ldrh	r3, [r3, #0]
    23fc:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    23fe:	2201      	movs	r2, #1
    2400:	4b22      	ldr	r3, [pc, #136]	; (248c <newLine+0xa8>)
    2402:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    2404:	4b22      	ldr	r3, [pc, #136]	; (2490 <newLine+0xac>)
    2406:	4798      	blx	r3
    2408:	4822      	ldr	r0, [pc, #136]	; (2494 <newLine+0xb0>)
    240a:	0004      	movs	r4, r0
    240c:	3418      	adds	r4, #24
    240e:	23f0      	movs	r3, #240	; 0xf0
    2410:	00db      	lsls	r3, r3, #3
    2412:	18c1      	adds	r1, r0, r3
{
    2414:	0003      	movs	r3, r0
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    2416:	785a      	ldrb	r2, [r3, #1]
    2418:	701a      	strb	r2, [r3, #0]
    241a:	3318      	adds	r3, #24
		for(int i = 0 ; i < 80 ; i++)
    241c:	428b      	cmp	r3, r1
    241e:	d1fa      	bne.n	2416 <newLine+0x32>
    2420:	3001      	adds	r0, #1
	for(int j = 1 ; j <= 24 ; j++)
    2422:	42a0      	cmp	r0, r4
    2424:	d1f3      	bne.n	240e <newLine+0x2a>
    2426:	4b1c      	ldr	r3, [pc, #112]	; (2498 <newLine+0xb4>)
    2428:	22f0      	movs	r2, #240	; 0xf0
    242a:	00d2      	lsls	r2, r2, #3
    242c:	1899      	adds	r1, r3, r2
		consoleDisplay[k][23] = 0x20;
    242e:	2220      	movs	r2, #32
    2430:	701a      	strb	r2, [r3, #0]
    2432:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    2434:	428b      	cmp	r3, r1
    2436:	d1fb      	bne.n	2430 <newLine+0x4c>
    2438:	2600      	movs	r6, #0
    243a:	4b16      	ldr	r3, [pc, #88]	; (2494 <newLine+0xb0>)
    243c:	469a      	mov	sl, r3
			xCharPos = i;
    243e:	4b11      	ldr	r3, [pc, #68]	; (2484 <newLine+0xa0>)
    2440:	4699      	mov	r9, r3
			yCharPos = j;
    2442:	4b11      	ldr	r3, [pc, #68]	; (2488 <newLine+0xa4>)
    2444:	4698      	mov	r8, r3
    2446:	4653      	mov	r3, sl
    2448:	18f5      	adds	r5, r6, r3
{
    244a:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    244c:	4f13      	ldr	r7, [pc, #76]	; (249c <newLine+0xb8>)
			xCharPos = i;
    244e:	464b      	mov	r3, r9
    2450:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    2452:	4643      	mov	r3, r8
    2454:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    2456:	7828      	ldrb	r0, [r5, #0]
    2458:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    245a:	3401      	adds	r4, #1
    245c:	3518      	adds	r5, #24
    245e:	2c50      	cmp	r4, #80	; 0x50
    2460:	d1f5      	bne.n	244e <newLine+0x6a>
	for(int j = 0 ; j < 24 ; j++)
    2462:	3601      	adds	r6, #1
    2464:	2e18      	cmp	r6, #24
    2466:	d1ee      	bne.n	2446 <newLine+0x62>
	xCharPos = tempCursorx;
    2468:	4b06      	ldr	r3, [pc, #24]	; (2484 <newLine+0xa0>)
    246a:	465a      	mov	r2, fp
    246c:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    246e:	4b06      	ldr	r3, [pc, #24]	; (2488 <newLine+0xa4>)
    2470:	466a      	mov	r2, sp
    2472:	8892      	ldrh	r2, [r2, #4]
    2474:	801a      	strh	r2, [r3, #0]
}
    2476:	b003      	add	sp, #12
    2478:	bc3c      	pop	{r2, r3, r4, r5}
    247a:	4690      	mov	r8, r2
    247c:	4699      	mov	r9, r3
    247e:	46a2      	mov	sl, r4
    2480:	46ab      	mov	fp, r5
    2482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2484:	200002a4 	.word	0x200002a4
    2488:	200002a6 	.word	0x200002a6
    248c:	20000010 	.word	0x20000010
    2490:	00002289 	.word	0x00002289
    2494:	20000320 	.word	0x20000320
    2498:	20000337 	.word	0x20000337
    249c:	000021a1 	.word	0x000021a1

000024a0 <writeString>:

void writeString(const char str[])
{
    24a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    24a2:	46c6      	mov	lr, r8
    24a4:	b500      	push	{lr}
    24a6:	0005      	movs	r5, r0
	int length = strlen(str);
    24a8:	4b0c      	ldr	r3, [pc, #48]	; (24dc <writeString+0x3c>)
    24aa:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    24ac:	2800      	cmp	r0, #0
    24ae:	dd11      	ble.n	24d4 <writeString+0x34>
    24b0:	002c      	movs	r4, r5
    24b2:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    24b4:	4f0a      	ldr	r7, [pc, #40]	; (24e0 <writeString+0x40>)
		if(xCharPos <= 80)
    24b6:	4e0b      	ldr	r6, [pc, #44]	; (24e4 <writeString+0x44>)
		xCharPos++;
    24b8:	46b0      	mov	r8, r6
    24ba:	e002      	b.n	24c2 <writeString+0x22>
    24bc:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    24be:	42ac      	cmp	r4, r5
    24c0:	d008      	beq.n	24d4 <writeString+0x34>
		drawChar(str[i]);
    24c2:	7820      	ldrb	r0, [r4, #0]
    24c4:	47b8      	blx	r7
		if(xCharPos <= 80)
    24c6:	8833      	ldrh	r3, [r6, #0]
    24c8:	2b50      	cmp	r3, #80	; 0x50
    24ca:	d8f7      	bhi.n	24bc <writeString+0x1c>
		xCharPos++;
    24cc:	3301      	adds	r3, #1
    24ce:	4642      	mov	r2, r8
    24d0:	8013      	strh	r3, [r2, #0]
    24d2:	e7f3      	b.n	24bc <writeString+0x1c>
	}
}
    24d4:	bc04      	pop	{r2}
    24d6:	4690      	mov	r8, r2
    24d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	00003cb9 	.word	0x00003cb9
    24e0:	000021a1 	.word	0x000021a1
    24e4:	200002a4 	.word	0x200002a4

000024e8 <nullifyConsole>:

void nullifyConsole(void)
{
    24e8:	4b08      	ldr	r3, [pc, #32]	; (250c <nullifyConsole+0x24>)
    24ea:	22f0      	movs	r2, #240	; 0xf0
    24ec:	00d2      	lsls	r2, r2, #3
    24ee:	1898      	adds	r0, r3, r2
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    24f0:	2100      	movs	r1, #0
    24f2:	e002      	b.n	24fa <nullifyConsole+0x12>
    24f4:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    24f6:	4290      	cmp	r0, r2
    24f8:	d006      	beq.n	2508 <nullifyConsole+0x20>
    24fa:	001a      	movs	r2, r3
    24fc:	3218      	adds	r2, #24
			consoleDisplay[i][j] = 0x00;
    24fe:	7019      	strb	r1, [r3, #0]
    2500:	3301      	adds	r3, #1
		for(int j = 0 ; j < 24 ; j++)
    2502:	4293      	cmp	r3, r2
    2504:	d1fb      	bne.n	24fe <nullifyConsole+0x16>
    2506:	e7f5      	b.n	24f4 <nullifyConsole+0xc>
		}
	}
}
    2508:	4770      	bx	lr
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	20000320 	.word	0x20000320

00002510 <arrowKey>:

void arrowKey(int scancode)
{
    2510:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	//Arrow key handling
	if(scancode == 35) //left
    2512:	2823      	cmp	r0, #35	; 0x23
    2514:	d006      	beq.n	2524 <arrowKey+0x14>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 45)	//down
    2516:	282d      	cmp	r0, #45	; 0x2d
    2518:	d021      	beq.n	255e <arrowKey+0x4e>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 55)	//up
    251a:	2837      	cmp	r0, #55	; 0x37
    251c:	d03c      	beq.n	2598 <arrowKey+0x88>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 65)	//right
    251e:	2841      	cmp	r0, #65	; 0x41
    2520:	d057      	beq.n	25d2 <arrowKey+0xc2>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
    2522:	bd70      	pop	{r4, r5, r6, pc}
		if(xCharPos > 0)
    2524:	4b39      	ldr	r3, [pc, #228]	; (260c <arrowKey+0xfc>)
    2526:	881b      	ldrh	r3, [r3, #0]
    2528:	2b00      	cmp	r3, #0
    252a:	d0fa      	beq.n	2522 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    252c:	4c38      	ldr	r4, [pc, #224]	; (2610 <arrowKey+0x100>)
    252e:	4d39      	ldr	r5, [pc, #228]	; (2614 <arrowKey+0x104>)
    2530:	8829      	ldrh	r1, [r5, #0]
    2532:	005a      	lsls	r2, r3, #1
    2534:	18d3      	adds	r3, r2, r3
    2536:	00db      	lsls	r3, r3, #3
    2538:	18e3      	adds	r3, r4, r3
    253a:	5c58      	ldrb	r0, [r3, r1]
    253c:	4e36      	ldr	r6, [pc, #216]	; (2618 <arrowKey+0x108>)
    253e:	47b0      	blx	r6
			xCharPos--;
    2540:	4a32      	ldr	r2, [pc, #200]	; (260c <arrowKey+0xfc>)
    2542:	8813      	ldrh	r3, [r2, #0]
    2544:	3b01      	subs	r3, #1
    2546:	b29b      	uxth	r3, r3
    2548:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    254a:	8829      	ldrh	r1, [r5, #0]
    254c:	005a      	lsls	r2, r3, #1
    254e:	18d3      	adds	r3, r2, r3
    2550:	00db      	lsls	r3, r3, #3
    2552:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    2554:	5c58      	ldrb	r0, [r3, r1]
    2556:	47b0      	blx	r6
			blinkCursor();
    2558:	4b30      	ldr	r3, [pc, #192]	; (261c <arrowKey+0x10c>)
    255a:	4798      	blx	r3
    255c:	e7e1      	b.n	2522 <arrowKey+0x12>
		if(yCharPos < 23)
    255e:	4b2d      	ldr	r3, [pc, #180]	; (2614 <arrowKey+0x104>)
    2560:	881a      	ldrh	r2, [r3, #0]
    2562:	2a16      	cmp	r2, #22
    2564:	d8dd      	bhi.n	2522 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    2566:	4c2a      	ldr	r4, [pc, #168]	; (2610 <arrowKey+0x100>)
    2568:	4d28      	ldr	r5, [pc, #160]	; (260c <arrowKey+0xfc>)
    256a:	8829      	ldrh	r1, [r5, #0]
    256c:	004b      	lsls	r3, r1, #1
    256e:	185b      	adds	r3, r3, r1
    2570:	00db      	lsls	r3, r3, #3
    2572:	18e3      	adds	r3, r4, r3
    2574:	5c98      	ldrb	r0, [r3, r2]
    2576:	4e28      	ldr	r6, [pc, #160]	; (2618 <arrowKey+0x108>)
    2578:	47b0      	blx	r6
			yCharPos++;
    257a:	4a26      	ldr	r2, [pc, #152]	; (2614 <arrowKey+0x104>)
    257c:	8813      	ldrh	r3, [r2, #0]
    257e:	3301      	adds	r3, #1
    2580:	b29b      	uxth	r3, r3
    2582:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2584:	8829      	ldrh	r1, [r5, #0]
    2586:	004a      	lsls	r2, r1, #1
    2588:	1852      	adds	r2, r2, r1
    258a:	00d2      	lsls	r2, r2, #3
    258c:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    258e:	5ce0      	ldrb	r0, [r4, r3]
    2590:	47b0      	blx	r6
			blinkCursor();
    2592:	4b22      	ldr	r3, [pc, #136]	; (261c <arrowKey+0x10c>)
    2594:	4798      	blx	r3
    2596:	e7c4      	b.n	2522 <arrowKey+0x12>
		if(yCharPos > 0)
    2598:	4b1e      	ldr	r3, [pc, #120]	; (2614 <arrowKey+0x104>)
    259a:	881a      	ldrh	r2, [r3, #0]
    259c:	2a00      	cmp	r2, #0
    259e:	d0c0      	beq.n	2522 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    25a0:	4c1b      	ldr	r4, [pc, #108]	; (2610 <arrowKey+0x100>)
    25a2:	4d1a      	ldr	r5, [pc, #104]	; (260c <arrowKey+0xfc>)
    25a4:	8829      	ldrh	r1, [r5, #0]
    25a6:	004b      	lsls	r3, r1, #1
    25a8:	185b      	adds	r3, r3, r1
    25aa:	00db      	lsls	r3, r3, #3
    25ac:	18e3      	adds	r3, r4, r3
    25ae:	5c98      	ldrb	r0, [r3, r2]
    25b0:	4e19      	ldr	r6, [pc, #100]	; (2618 <arrowKey+0x108>)
    25b2:	47b0      	blx	r6
			yCharPos--;
    25b4:	4a17      	ldr	r2, [pc, #92]	; (2614 <arrowKey+0x104>)
    25b6:	8813      	ldrh	r3, [r2, #0]
    25b8:	3b01      	subs	r3, #1
    25ba:	b29b      	uxth	r3, r3
    25bc:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    25be:	8829      	ldrh	r1, [r5, #0]
    25c0:	004a      	lsls	r2, r1, #1
    25c2:	1852      	adds	r2, r2, r1
    25c4:	00d2      	lsls	r2, r2, #3
    25c6:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    25c8:	5ce0      	ldrb	r0, [r4, r3]
    25ca:	47b0      	blx	r6
			blinkCursor();
    25cc:	4b13      	ldr	r3, [pc, #76]	; (261c <arrowKey+0x10c>)
    25ce:	4798      	blx	r3
    25d0:	e7a7      	b.n	2522 <arrowKey+0x12>
		if(xCharPos < 79)
    25d2:	4b0e      	ldr	r3, [pc, #56]	; (260c <arrowKey+0xfc>)
    25d4:	881a      	ldrh	r2, [r3, #0]
    25d6:	2a4e      	cmp	r2, #78	; 0x4e
    25d8:	d8a3      	bhi.n	2522 <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    25da:	4c0d      	ldr	r4, [pc, #52]	; (2610 <arrowKey+0x100>)
    25dc:	4d0d      	ldr	r5, [pc, #52]	; (2614 <arrowKey+0x104>)
    25de:	8829      	ldrh	r1, [r5, #0]
    25e0:	0053      	lsls	r3, r2, #1
    25e2:	189b      	adds	r3, r3, r2
    25e4:	00db      	lsls	r3, r3, #3
    25e6:	18e3      	adds	r3, r4, r3
    25e8:	5c58      	ldrb	r0, [r3, r1]
    25ea:	4e0b      	ldr	r6, [pc, #44]	; (2618 <arrowKey+0x108>)
    25ec:	47b0      	blx	r6
			xCharPos++;
    25ee:	4a07      	ldr	r2, [pc, #28]	; (260c <arrowKey+0xfc>)
    25f0:	8813      	ldrh	r3, [r2, #0]
    25f2:	3301      	adds	r3, #1
    25f4:	b29b      	uxth	r3, r3
    25f6:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    25f8:	8829      	ldrh	r1, [r5, #0]
    25fa:	005a      	lsls	r2, r3, #1
    25fc:	18d3      	adds	r3, r2, r3
    25fe:	00db      	lsls	r3, r3, #3
    2600:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    2602:	5c58      	ldrb	r0, [r3, r1]
    2604:	47b0      	blx	r6
			blinkCursor();
    2606:	4b05      	ldr	r3, [pc, #20]	; (261c <arrowKey+0x10c>)
    2608:	4798      	blx	r3
    260a:	e78a      	b.n	2522 <arrowKey+0x12>
    260c:	200002a4 	.word	0x200002a4
    2610:	20000320 	.word	0x20000320
    2614:	200002a6 	.word	0x200002a6
    2618:	000021a1 	.word	0x000021a1
    261c:	00002289 	.word	0x00002289

00002620 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    2620:	4b09      	ldr	r3, [pc, #36]	; (2648 <scanCodesContains+0x28>)
    2622:	681b      	ldr	r3, [r3, #0]
    2624:	4298      	cmp	r0, r3
    2626:	d00b      	beq.n	2640 <scanCodesContains+0x20>
    2628:	4a07      	ldr	r2, [pc, #28]	; (2648 <scanCodesContains+0x28>)
    262a:	1d13      	adds	r3, r2, #4
    262c:	3219      	adds	r2, #25
    262e:	32ff      	adds	r2, #255	; 0xff
    2630:	6819      	ldr	r1, [r3, #0]
    2632:	4281      	cmp	r1, r0
    2634:	d006      	beq.n	2644 <scanCodesContains+0x24>
    2636:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2638:	4293      	cmp	r3, r2
    263a:	d1f9      	bne.n	2630 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    263c:	2000      	movs	r0, #0
    263e:	e002      	b.n	2646 <scanCodesContains+0x26>
			return true;
    2640:	2001      	movs	r0, #1
    2642:	e000      	b.n	2646 <scanCodesContains+0x26>
    2644:	2001      	movs	r0, #1
}
    2646:	4770      	bx	lr
    2648:	2000003c 	.word	0x2000003c

0000264c <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    264c:	4b09      	ldr	r3, [pc, #36]	; (2674 <keyDown+0x28>)
    264e:	781b      	ldrb	r3, [r3, #0]
    2650:	4298      	cmp	r0, r3
    2652:	d00a      	beq.n	266a <keyDown+0x1e>
    2654:	4907      	ldr	r1, [pc, #28]	; (2674 <keyDown+0x28>)
    2656:	1c4b      	adds	r3, r1, #1
    2658:	3114      	adds	r1, #20
    265a:	781a      	ldrb	r2, [r3, #0]
    265c:	4282      	cmp	r2, r0
    265e:	d006      	beq.n	266e <keyDown+0x22>
    2660:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    2662:	428b      	cmp	r3, r1
    2664:	d1f9      	bne.n	265a <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    2666:	2000      	movs	r0, #0
}
    2668:	4770      	bx	lr
			return true;
    266a:	2001      	movs	r0, #1
    266c:	e7fc      	b.n	2668 <keyDown+0x1c>
    266e:	2001      	movs	r0, #1
    2670:	e7fa      	b.n	2668 <keyDown+0x1c>
    2672:	46c0      	nop			; (mov r8, r8)
    2674:	20000014 	.word	0x20000014

00002678 <printKeyboardBuffer>:
{
    2678:	b5f0      	push	{r4, r5, r6, r7, lr}
    267a:	46d6      	mov	lr, sl
    267c:	464f      	mov	r7, r9
    267e:	4646      	mov	r6, r8
    2680:	b5c0      	push	{r6, r7, lr}
    2682:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    2684:	4dac      	ldr	r5, [pc, #688]	; (2938 <printKeyboardBuffer+0x2c0>)
    2686:	2246      	movs	r2, #70	; 0x46
    2688:	0029      	movs	r1, r5
    268a:	a83a      	add	r0, sp, #232	; 0xe8
    268c:	4cab      	ldr	r4, [pc, #684]	; (293c <printKeyboardBuffer+0x2c4>)
    268e:	47a0      	blx	r4
	unsigned char shiftCase[] =
    2690:	0029      	movs	r1, r5
    2692:	3148      	adds	r1, #72	; 0x48
    2694:	2246      	movs	r2, #70	; 0x46
    2696:	a828      	add	r0, sp, #160	; 0xa0
    2698:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    269a:	4da9      	ldr	r5, [pc, #676]	; (2940 <printKeyboardBuffer+0x2c8>)
    269c:	0029      	movs	r1, r5
    269e:	3110      	adds	r1, #16
    26a0:	2246      	movs	r2, #70	; 0x46
    26a2:	a816      	add	r0, sp, #88	; 0x58
    26a4:	47a0      	blx	r4
	unsigned char controlCase[] =
    26a6:	0029      	movs	r1, r5
    26a8:	3158      	adds	r1, #88	; 0x58
    26aa:	2246      	movs	r2, #70	; 0x46
    26ac:	a804      	add	r0, sp, #16
    26ae:	47a0      	blx	r4
    26b0:	4fa4      	ldr	r7, [pc, #656]	; (2944 <printKeyboardBuffer+0x2cc>)
    26b2:	003c      	movs	r4, r7
    26b4:	3414      	adds	r4, #20
    26b6:	003d      	movs	r5, r7
	bool controled = false;
    26b8:	2300      	movs	r3, #0
    26ba:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    26bc:	9302      	str	r3, [sp, #8]
			controled = true;
    26be:	2201      	movs	r2, #1
    26c0:	e004      	b.n	26cc <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    26c2:	2916      	cmp	r1, #22
    26c4:	d011      	beq.n	26ea <printKeyboardBuffer+0x72>
    26c6:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    26c8:	42a5      	cmp	r5, r4
    26ca:	d010      	beq.n	26ee <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    26cc:	7829      	ldrb	r1, [r5, #0]
    26ce:	000b      	movs	r3, r1
    26d0:	3b0d      	subs	r3, #13
    26d2:	425e      	negs	r6, r3
    26d4:	415e      	adcs	r6, r3
    26d6:	46b4      	mov	ip, r6
    26d8:	0008      	movs	r0, r1
    26da:	3831      	subs	r0, #49	; 0x31
    26dc:	4243      	negs	r3, r0
    26de:	4143      	adcs	r3, r0
    26e0:	4660      	mov	r0, ip
    26e2:	4318      	orrs	r0, r3
    26e4:	d0ed      	beq.n	26c2 <printKeyboardBuffer+0x4a>
			shifted = true;
    26e6:	9002      	str	r0, [sp, #8]
    26e8:	e7eb      	b.n	26c2 <printKeyboardBuffer+0x4a>
			controled = true;
    26ea:	9203      	str	r2, [sp, #12]
    26ec:	e7eb      	b.n	26c6 <printKeyboardBuffer+0x4e>
    26ee:	4e96      	ldr	r6, [pc, #600]	; (2948 <printKeyboardBuffer+0x2d0>)
	for(int i=0; i<20; i++)
    26f0:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    26f2:	4b96      	ldr	r3, [pc, #600]	; (294c <printKeyboardBuffer+0x2d4>)
    26f4:	469a      	mov	sl, r3
    26f6:	e008      	b.n	270a <printKeyboardBuffer+0x92>
				if(breakEnable)
    26f8:	4b95      	ldr	r3, [pc, #596]	; (2950 <printKeyboardBuffer+0x2d8>)
    26fa:	781b      	ldrb	r3, [r3, #0]
    26fc:	2b00      	cmp	r3, #0
    26fe:	d147      	bne.n	2790 <printKeyboardBuffer+0x118>
    2700:	3401      	adds	r4, #1
    2702:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    2704:	42ac      	cmp	r4, r5
    2706:	d100      	bne.n	270a <printKeyboardBuffer+0x92>
    2708:	e10a      	b.n	2920 <printKeyboardBuffer+0x2a8>
    270a:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    270c:	7823      	ldrb	r3, [r4, #0]
    270e:	4699      	mov	r9, r3
    2710:	0018      	movs	r0, r3
    2712:	47d0      	blx	sl
    2714:	2800      	cmp	r0, #0
    2716:	d1f3      	bne.n	2700 <printKeyboardBuffer+0x88>
			keyDownBuffer[i] = scanCodeBuffer[i];
    2718:	464b      	mov	r3, r9
    271a:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //do nothing
    271c:	464b      	mov	r3, r9
    271e:	2b01      	cmp	r3, #1
    2720:	d9ee      	bls.n	2700 <printKeyboardBuffer+0x88>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    2722:	2b43      	cmp	r3, #67	; 0x43
    2724:	d0e8      	beq.n	26f8 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 58)   //Return key
    2726:	464b      	mov	r3, r9
    2728:	2b3a      	cmp	r3, #58	; 0x3a
    272a:	d034      	beq.n	2796 <printKeyboardBuffer+0x11e>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    272c:	464b      	mov	r3, r9
    272e:	2b0c      	cmp	r3, #12
    2730:	d06d      	beq.n	280e <printKeyboardBuffer+0x196>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    2732:	464b      	mov	r3, r9
    2734:	2b03      	cmp	r3, #3
    2736:	d070      	beq.n	281a <printKeyboardBuffer+0x1a2>
			else if(scanCodeBuffer[i] == 35) //left
    2738:	464b      	mov	r3, r9
    273a:	2b23      	cmp	r3, #35	; 0x23
    273c:	d073      	beq.n	2826 <printKeyboardBuffer+0x1ae>
			else if(scanCodeBuffer[i]  == 45)	//down
    273e:	464b      	mov	r3, r9
    2740:	2b2d      	cmp	r3, #45	; 0x2d
    2742:	d100      	bne.n	2746 <printKeyboardBuffer+0xce>
    2744:	e081      	b.n	284a <printKeyboardBuffer+0x1d2>
			else if(scanCodeBuffer[i]  == 55)	//up
    2746:	464b      	mov	r3, r9
    2748:	2b37      	cmp	r3, #55	; 0x37
    274a:	d100      	bne.n	274e <printKeyboardBuffer+0xd6>
    274c:	e08f      	b.n	286e <printKeyboardBuffer+0x1f6>
			else if(scanCodeBuffer[i]  == 65)	//right
    274e:	464b      	mov	r3, r9
    2750:	2b41      	cmp	r3, #65	; 0x41
    2752:	d100      	bne.n	2756 <printKeyboardBuffer+0xde>
    2754:	e09d      	b.n	2892 <printKeyboardBuffer+0x21a>
				if(controled)
    2756:	9b03      	ldr	r3, [sp, #12]
    2758:	2b00      	cmp	r3, #0
    275a:	d000      	beq.n	275e <printKeyboardBuffer+0xe6>
    275c:	e0ab      	b.n	28b6 <printKeyboardBuffer+0x23e>
				else if(capsLock)
    275e:	4b7d      	ldr	r3, [pc, #500]	; (2954 <printKeyboardBuffer+0x2dc>)
    2760:	781b      	ldrb	r3, [r3, #0]
    2762:	2b00      	cmp	r3, #0
    2764:	d000      	beq.n	2768 <printKeyboardBuffer+0xf0>
    2766:	e0b9      	b.n	28dc <printKeyboardBuffer+0x264>
				else if(shifted)
    2768:	9b02      	ldr	r3, [sp, #8]
    276a:	2b00      	cmp	r3, #0
    276c:	d100      	bne.n	2770 <printKeyboardBuffer+0xf8>
    276e:	e0c6      	b.n	28fe <printKeyboardBuffer+0x286>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    2770:	ab28      	add	r3, sp, #160	; 0xa0
    2772:	464a      	mov	r2, r9
    2774:	5c98      	ldrb	r0, [r3, r2]
    2776:	4b78      	ldr	r3, [pc, #480]	; (2958 <printKeyboardBuffer+0x2e0>)
    2778:	4798      	blx	r3
					if(localEcho)
    277a:	4b78      	ldr	r3, [pc, #480]	; (295c <printKeyboardBuffer+0x2e4>)
    277c:	781b      	ldrb	r3, [r3, #0]
    277e:	2b00      	cmp	r3, #0
    2780:	d0be      	beq.n	2700 <printKeyboardBuffer+0x88>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    2782:	9b01      	ldr	r3, [sp, #4]
    2784:	781b      	ldrb	r3, [r3, #0]
    2786:	aa28      	add	r2, sp, #160	; 0xa0
    2788:	5cd0      	ldrb	r0, [r2, r3]
    278a:	4b75      	ldr	r3, [pc, #468]	; (2960 <printKeyboardBuffer+0x2e8>)
    278c:	4798      	blx	r3
    278e:	e7b7      	b.n	2700 <printKeyboardBuffer+0x88>
					sendChar(0x00);
    2790:	4b71      	ldr	r3, [pc, #452]	; (2958 <printKeyboardBuffer+0x2e0>)
    2792:	4798      	blx	r3
    2794:	e7b4      	b.n	2700 <printKeyboardBuffer+0x88>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    2796:	4b73      	ldr	r3, [pc, #460]	; (2964 <printKeyboardBuffer+0x2ec>)
    2798:	681b      	ldr	r3, [r3, #0]
    279a:	2b01      	cmp	r3, #1
    279c:	d014      	beq.n	27c8 <printKeyboardBuffer+0x150>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    279e:	4b71      	ldr	r3, [pc, #452]	; (2964 <printKeyboardBuffer+0x2ec>)
    27a0:	681b      	ldr	r3, [r3, #0]
    27a2:	2b02      	cmp	r3, #2
    27a4:	d026      	beq.n	27f4 <printKeyboardBuffer+0x17c>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    27a6:	4b6f      	ldr	r3, [pc, #444]	; (2964 <printKeyboardBuffer+0x2ec>)
    27a8:	681b      	ldr	r3, [r3, #0]
    27aa:	2b03      	cmp	r3, #3
    27ac:	d1a8      	bne.n	2700 <printKeyboardBuffer+0x88>
					sendChar(0x0D);
    27ae:	200d      	movs	r0, #13
    27b0:	4b69      	ldr	r3, [pc, #420]	; (2958 <printKeyboardBuffer+0x2e0>)
    27b2:	4798      	blx	r3
					if(localEcho)
    27b4:	4b69      	ldr	r3, [pc, #420]	; (295c <printKeyboardBuffer+0x2e4>)
    27b6:	781b      	ldrb	r3, [r3, #0]
    27b8:	2b00      	cmp	r3, #0
    27ba:	d0a1      	beq.n	2700 <printKeyboardBuffer+0x88>
						ring_put(ouroboros, 0x0D);
    27bc:	4b6a      	ldr	r3, [pc, #424]	; (2968 <printKeyboardBuffer+0x2f0>)
    27be:	6818      	ldr	r0, [r3, #0]
    27c0:	210d      	movs	r1, #13
    27c2:	4b6a      	ldr	r3, [pc, #424]	; (296c <printKeyboardBuffer+0x2f4>)
    27c4:	4798      	blx	r3
    27c6:	e79b      	b.n	2700 <printKeyboardBuffer+0x88>
					sendChar(0x0D);
    27c8:	200d      	movs	r0, #13
    27ca:	4b63      	ldr	r3, [pc, #396]	; (2958 <printKeyboardBuffer+0x2e0>)
    27cc:	4698      	mov	r8, r3
    27ce:	4798      	blx	r3
					sendChar(0x0A);
    27d0:	200a      	movs	r0, #10
    27d2:	47c0      	blx	r8
					if(localEcho)
    27d4:	4b61      	ldr	r3, [pc, #388]	; (295c <printKeyboardBuffer+0x2e4>)
    27d6:	781b      	ldrb	r3, [r3, #0]
    27d8:	2b00      	cmp	r3, #0
    27da:	d0e0      	beq.n	279e <printKeyboardBuffer+0x126>
						ring_put(ouroboros, 0x0D);
    27dc:	4b62      	ldr	r3, [pc, #392]	; (2968 <printKeyboardBuffer+0x2f0>)
    27de:	4698      	mov	r8, r3
    27e0:	210d      	movs	r1, #13
    27e2:	6818      	ldr	r0, [r3, #0]
    27e4:	4b61      	ldr	r3, [pc, #388]	; (296c <printKeyboardBuffer+0x2f4>)
    27e6:	4699      	mov	r9, r3
    27e8:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    27ea:	4643      	mov	r3, r8
    27ec:	6818      	ldr	r0, [r3, #0]
    27ee:	210a      	movs	r1, #10
    27f0:	47c8      	blx	r9
    27f2:	e7d4      	b.n	279e <printKeyboardBuffer+0x126>
					sendChar(0x0A);
    27f4:	200a      	movs	r0, #10
    27f6:	4b58      	ldr	r3, [pc, #352]	; (2958 <printKeyboardBuffer+0x2e0>)
    27f8:	4798      	blx	r3
					if(localEcho)
    27fa:	4b58      	ldr	r3, [pc, #352]	; (295c <printKeyboardBuffer+0x2e4>)
    27fc:	781b      	ldrb	r3, [r3, #0]
    27fe:	2b00      	cmp	r3, #0
    2800:	d0d1      	beq.n	27a6 <printKeyboardBuffer+0x12e>
						ring_put(ouroboros, 0x0A);
    2802:	4b59      	ldr	r3, [pc, #356]	; (2968 <printKeyboardBuffer+0x2f0>)
    2804:	6818      	ldr	r0, [r3, #0]
    2806:	210a      	movs	r1, #10
    2808:	4b58      	ldr	r3, [pc, #352]	; (296c <printKeyboardBuffer+0x2f4>)
    280a:	4798      	blx	r3
    280c:	e7cb      	b.n	27a6 <printKeyboardBuffer+0x12e>
				capsLock = !capsLock;
    280e:	4a51      	ldr	r2, [pc, #324]	; (2954 <printKeyboardBuffer+0x2dc>)
    2810:	7813      	ldrb	r3, [r2, #0]
    2812:	2101      	movs	r1, #1
    2814:	404b      	eors	r3, r1
    2816:	7013      	strb	r3, [r2, #0]
    2818:	e772      	b.n	2700 <printKeyboardBuffer+0x88>
				scrollLock = !scrollLock;
    281a:	4a55      	ldr	r2, [pc, #340]	; (2970 <printKeyboardBuffer+0x2f8>)
    281c:	7813      	ldrb	r3, [r2, #0]
    281e:	2101      	movs	r1, #1
    2820:	404b      	eors	r3, r1
    2822:	7013      	strb	r3, [r2, #0]
    2824:	e76c      	b.n	2700 <printKeyboardBuffer+0x88>
				sendChar(0x1B);
    2826:	201b      	movs	r0, #27
    2828:	4b4b      	ldr	r3, [pc, #300]	; (2958 <printKeyboardBuffer+0x2e0>)
    282a:	4699      	mov	r9, r3
    282c:	4798      	blx	r3
				sendChar(0x5B);
    282e:	205b      	movs	r0, #91	; 0x5b
    2830:	47c8      	blx	r9
				sendChar(0x44);
    2832:	2044      	movs	r0, #68	; 0x44
    2834:	47c8      	blx	r9
				if(localEcho)
    2836:	4b49      	ldr	r3, [pc, #292]	; (295c <printKeyboardBuffer+0x2e4>)
    2838:	781b      	ldrb	r3, [r3, #0]
    283a:	2b00      	cmp	r3, #0
    283c:	d100      	bne.n	2840 <printKeyboardBuffer+0x1c8>
    283e:	e75f      	b.n	2700 <printKeyboardBuffer+0x88>
					arrowKey(scanCodeBuffer[i]);
    2840:	9b01      	ldr	r3, [sp, #4]
    2842:	7818      	ldrb	r0, [r3, #0]
    2844:	4b4b      	ldr	r3, [pc, #300]	; (2974 <printKeyboardBuffer+0x2fc>)
    2846:	4798      	blx	r3
    2848:	e75a      	b.n	2700 <printKeyboardBuffer+0x88>
				sendChar(0x1B);
    284a:	201b      	movs	r0, #27
    284c:	4b42      	ldr	r3, [pc, #264]	; (2958 <printKeyboardBuffer+0x2e0>)
    284e:	4699      	mov	r9, r3
    2850:	4798      	blx	r3
				sendChar(0x5B);
    2852:	205b      	movs	r0, #91	; 0x5b
    2854:	47c8      	blx	r9
				sendChar(0x42);
    2856:	2042      	movs	r0, #66	; 0x42
    2858:	47c8      	blx	r9
				if(localEcho)
    285a:	4b40      	ldr	r3, [pc, #256]	; (295c <printKeyboardBuffer+0x2e4>)
    285c:	781b      	ldrb	r3, [r3, #0]
    285e:	2b00      	cmp	r3, #0
    2860:	d100      	bne.n	2864 <printKeyboardBuffer+0x1ec>
    2862:	e74d      	b.n	2700 <printKeyboardBuffer+0x88>
					arrowKey(scanCodeBuffer[i]);
    2864:	9b01      	ldr	r3, [sp, #4]
    2866:	7818      	ldrb	r0, [r3, #0]
    2868:	4b42      	ldr	r3, [pc, #264]	; (2974 <printKeyboardBuffer+0x2fc>)
    286a:	4798      	blx	r3
    286c:	e748      	b.n	2700 <printKeyboardBuffer+0x88>
				sendChar(0x1B);
    286e:	201b      	movs	r0, #27
    2870:	4b39      	ldr	r3, [pc, #228]	; (2958 <printKeyboardBuffer+0x2e0>)
    2872:	4699      	mov	r9, r3
    2874:	4798      	blx	r3
				sendChar(0x5B);
    2876:	205b      	movs	r0, #91	; 0x5b
    2878:	47c8      	blx	r9
				sendChar(0x41);
    287a:	2041      	movs	r0, #65	; 0x41
    287c:	47c8      	blx	r9
				if(localEcho)
    287e:	4b37      	ldr	r3, [pc, #220]	; (295c <printKeyboardBuffer+0x2e4>)
    2880:	781b      	ldrb	r3, [r3, #0]
    2882:	2b00      	cmp	r3, #0
    2884:	d100      	bne.n	2888 <printKeyboardBuffer+0x210>
    2886:	e73b      	b.n	2700 <printKeyboardBuffer+0x88>
					arrowKey(scanCodeBuffer[i]);
    2888:	9b01      	ldr	r3, [sp, #4]
    288a:	7818      	ldrb	r0, [r3, #0]
    288c:	4b39      	ldr	r3, [pc, #228]	; (2974 <printKeyboardBuffer+0x2fc>)
    288e:	4798      	blx	r3
    2890:	e736      	b.n	2700 <printKeyboardBuffer+0x88>
				sendChar(0x1B);
    2892:	201b      	movs	r0, #27
    2894:	4b30      	ldr	r3, [pc, #192]	; (2958 <printKeyboardBuffer+0x2e0>)
    2896:	4699      	mov	r9, r3
    2898:	4798      	blx	r3
				sendChar(0x5B);
    289a:	205b      	movs	r0, #91	; 0x5b
    289c:	47c8      	blx	r9
				sendChar(0x43);
    289e:	2043      	movs	r0, #67	; 0x43
    28a0:	47c8      	blx	r9
				if(localEcho)
    28a2:	4b2e      	ldr	r3, [pc, #184]	; (295c <printKeyboardBuffer+0x2e4>)
    28a4:	781b      	ldrb	r3, [r3, #0]
    28a6:	2b00      	cmp	r3, #0
    28a8:	d100      	bne.n	28ac <printKeyboardBuffer+0x234>
    28aa:	e729      	b.n	2700 <printKeyboardBuffer+0x88>
					arrowKey(scanCodeBuffer[i]);
    28ac:	9b01      	ldr	r3, [sp, #4]
    28ae:	7818      	ldrb	r0, [r3, #0]
    28b0:	4b30      	ldr	r3, [pc, #192]	; (2974 <printKeyboardBuffer+0x2fc>)
    28b2:	4798      	blx	r3
    28b4:	e724      	b.n	2700 <printKeyboardBuffer+0x88>
					sendChar(controlCase[scanCodeBuffer[i]]);
    28b6:	ab04      	add	r3, sp, #16
    28b8:	464a      	mov	r2, r9
    28ba:	5c98      	ldrb	r0, [r3, r2]
    28bc:	4b26      	ldr	r3, [pc, #152]	; (2958 <printKeyboardBuffer+0x2e0>)
    28be:	4798      	blx	r3
					if(localEcho)
    28c0:	4b26      	ldr	r3, [pc, #152]	; (295c <printKeyboardBuffer+0x2e4>)
    28c2:	781b      	ldrb	r3, [r3, #0]
    28c4:	2b00      	cmp	r3, #0
    28c6:	d100      	bne.n	28ca <printKeyboardBuffer+0x252>
    28c8:	e71a      	b.n	2700 <printKeyboardBuffer+0x88>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    28ca:	9b01      	ldr	r3, [sp, #4]
    28cc:	781b      	ldrb	r3, [r3, #0]
    28ce:	aa04      	add	r2, sp, #16
    28d0:	5cd1      	ldrb	r1, [r2, r3]
    28d2:	4b25      	ldr	r3, [pc, #148]	; (2968 <printKeyboardBuffer+0x2f0>)
    28d4:	6818      	ldr	r0, [r3, #0]
    28d6:	4b25      	ldr	r3, [pc, #148]	; (296c <printKeyboardBuffer+0x2f4>)
    28d8:	4798      	blx	r3
    28da:	e711      	b.n	2700 <printKeyboardBuffer+0x88>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    28dc:	ab16      	add	r3, sp, #88	; 0x58
    28de:	464a      	mov	r2, r9
    28e0:	5c98      	ldrb	r0, [r3, r2]
    28e2:	4b1d      	ldr	r3, [pc, #116]	; (2958 <printKeyboardBuffer+0x2e0>)
    28e4:	4798      	blx	r3
					if(localEcho)
    28e6:	4b1d      	ldr	r3, [pc, #116]	; (295c <printKeyboardBuffer+0x2e4>)
    28e8:	781b      	ldrb	r3, [r3, #0]
    28ea:	2b00      	cmp	r3, #0
    28ec:	d100      	bne.n	28f0 <printKeyboardBuffer+0x278>
    28ee:	e707      	b.n	2700 <printKeyboardBuffer+0x88>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    28f0:	9b01      	ldr	r3, [sp, #4]
    28f2:	781b      	ldrb	r3, [r3, #0]
    28f4:	aa16      	add	r2, sp, #88	; 0x58
    28f6:	5cd0      	ldrb	r0, [r2, r3]
    28f8:	4b19      	ldr	r3, [pc, #100]	; (2960 <printKeyboardBuffer+0x2e8>)
    28fa:	4798      	blx	r3
    28fc:	e700      	b.n	2700 <printKeyboardBuffer+0x88>
					sendChar(noCase[scanCodeBuffer[i]]);
    28fe:	ab3a      	add	r3, sp, #232	; 0xe8
    2900:	464a      	mov	r2, r9
    2902:	5c98      	ldrb	r0, [r3, r2]
    2904:	4b14      	ldr	r3, [pc, #80]	; (2958 <printKeyboardBuffer+0x2e0>)
    2906:	4798      	blx	r3
					if(localEcho)
    2908:	4b14      	ldr	r3, [pc, #80]	; (295c <printKeyboardBuffer+0x2e4>)
    290a:	781b      	ldrb	r3, [r3, #0]
    290c:	2b00      	cmp	r3, #0
    290e:	d100      	bne.n	2912 <printKeyboardBuffer+0x29a>
    2910:	e6f6      	b.n	2700 <printKeyboardBuffer+0x88>
						parseChar(noCase[scanCodeBuffer[i]]);
    2912:	9b01      	ldr	r3, [sp, #4]
    2914:	781b      	ldrb	r3, [r3, #0]
    2916:	aa3a      	add	r2, sp, #232	; 0xe8
    2918:	5cd0      	ldrb	r0, [r2, r3]
    291a:	4b11      	ldr	r3, [pc, #68]	; (2960 <printKeyboardBuffer+0x2e8>)
    291c:	4798      	blx	r3
    291e:	e6ef      	b.n	2700 <printKeyboardBuffer+0x88>
		scanCodeBuffer[i] = 0xFF;
    2920:	23ff      	movs	r3, #255	; 0xff
    2922:	703b      	strb	r3, [r7, #0]
    2924:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    2926:	42bc      	cmp	r4, r7
    2928:	d1fb      	bne.n	2922 <printKeyboardBuffer+0x2aa>
}
    292a:	b04c      	add	sp, #304	; 0x130
    292c:	bc1c      	pop	{r2, r3, r4}
    292e:	4690      	mov	r8, r2
    2930:	4699      	mov	r9, r3
    2932:	46a2      	mov	sl, r4
    2934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	00006a3c 	.word	0x00006a3c
    293c:	00003885 	.word	0x00003885
    2940:	00006abc 	.word	0x00006abc
    2944:	20000028 	.word	0x20000028
    2948:	20000014 	.word	0x20000014
    294c:	0000264d 	.word	0x0000264d
    2950:	200002a8 	.word	0x200002a8
    2954:	200002b4 	.word	0x200002b4
    2958:	000007ad 	.word	0x000007ad
    295c:	20000160 	.word	0x20000160
    2960:	000001f5 	.word	0x000001f5
    2964:	2000015c 	.word	0x2000015c
    2968:	200002bc 	.word	0x200002bc
    296c:	00000141 	.word	0x00000141
    2970:	200002b6 	.word	0x200002b6
    2974:	00002511 	.word	0x00002511

00002978 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    2978:	b510      	push	{r4, lr}
    297a:	4b07      	ldr	r3, [pc, #28]	; (2998 <removeFromKeyDown+0x20>)
    297c:	0019      	movs	r1, r3
    297e:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    2980:	24ff      	movs	r4, #255	; 0xff
    2982:	e002      	b.n	298a <removeFromKeyDown+0x12>
    2984:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    2986:	428b      	cmp	r3, r1
    2988:	d004      	beq.n	2994 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    298a:	781a      	ldrb	r2, [r3, #0]
    298c:	4282      	cmp	r2, r0
    298e:	d1f9      	bne.n	2984 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    2990:	701c      	strb	r4, [r3, #0]
    2992:	e7f7      	b.n	2984 <removeFromKeyDown+0xc>
		}
	}
}
    2994:	bd10      	pop	{r4, pc}
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	20000014 	.word	0x20000014

0000299c <readKeyboard>:
{
    299c:	b5f0      	push	{r4, r5, r6, r7, lr}
    299e:	46de      	mov	lr, fp
    29a0:	4657      	mov	r7, sl
    29a2:	464e      	mov	r6, r9
    29a4:	4645      	mov	r5, r8
    29a6:	b5e0      	push	{r5, r6, r7, lr}
    29a8:	b083      	sub	sp, #12
    29aa:	4e6d      	ldr	r6, [pc, #436]	; (2b60 <readKeyboard+0x1c4>)
    29ac:	0031      	movs	r1, r6
    29ae:	3119      	adds	r1, #25
    29b0:	31ff      	adds	r1, #255	; 0xff
    29b2:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    29b4:	22ff      	movs	r2, #255	; 0xff
    29b6:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    29b8:	428b      	cmp	r3, r1
    29ba:	d1fc      	bne.n	29b6 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    29bc:	4a69      	ldr	r2, [pc, #420]	; (2b64 <readKeyboard+0x1c8>)
    29be:	6a91      	ldr	r1, [r2, #40]	; 0x28
    29c0:	2380      	movs	r3, #128	; 0x80
    29c2:	03db      	lsls	r3, r3, #15
    29c4:	430b      	orrs	r3, r1
    29c6:	6293      	str	r3, [r2, #40]	; 0x28
    29c8:	4c67      	ldr	r4, [pc, #412]	; (2b68 <readKeyboard+0x1cc>)
    29ca:	341c      	adds	r4, #28
    29cc:	4b66      	ldr	r3, [pc, #408]	; (2b68 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    29ce:	4867      	ldr	r0, [pc, #412]	; (2b6c <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    29d0:	4967      	ldr	r1, [pc, #412]	; (2b70 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    29d2:	681a      	ldr	r2, [r3, #0]
    29d4:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    29d6:	cb04      	ldmia	r3!, {r2}
    29d8:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    29da:	42a3      	cmp	r3, r4
    29dc:	d1f9      	bne.n	29d2 <readKeyboard+0x36>
    29de:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    29e0:	4b64      	ldr	r3, [pc, #400]	; (2b74 <readKeyboard+0x1d8>)
    29e2:	469c      	mov	ip, r3
    29e4:	4f64      	ldr	r7, [pc, #400]	; (2b78 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    29e6:	4d65      	ldr	r5, [pc, #404]	; (2b7c <readKeyboard+0x1e0>)
    29e8:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    29ea:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    29ec:	4663      	mov	r3, ip
    29ee:	58d3      	ldr	r3, [r2, r3]
    29f0:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    29f2:	5953      	ldr	r3, [r2, r5]
    29f4:	4962      	ldr	r1, [pc, #392]	; (2b80 <readKeyboard+0x1e4>)
    29f6:	4688      	mov	r8, r1
    29f8:	4443      	add	r3, r8
    29fa:	7819      	ldrb	r1, [r3, #0]
    29fc:	4321      	orrs	r1, r4
    29fe:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2a00:	7819      	ldrb	r1, [r3, #0]
    2a02:	4301      	orrs	r1, r0
    2a04:	7019      	strb	r1, [r3, #0]
    2a06:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    2a08:	2a28      	cmp	r2, #40	; 0x28
    2a0a:	d1ef      	bne.n	29ec <readKeyboard+0x50>
    2a0c:	4b56      	ldr	r3, [pc, #344]	; (2b68 <readKeyboard+0x1cc>)
    2a0e:	4699      	mov	r9, r3
    2a10:	2300      	movs	r3, #0
    2a12:	4698      	mov	r8, r3
    2a14:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    2a16:	4b5b      	ldr	r3, [pc, #364]	; (2b84 <readKeyboard+0x1e8>)
    2a18:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2a1a:	4d52      	ldr	r5, [pc, #328]	; (2b64 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2a1c:	4b50      	ldr	r3, [pc, #320]	; (2b60 <readKeyboard+0x1c4>)
    2a1e:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    2a20:	4b53      	ldr	r3, [pc, #332]	; (2b70 <readKeyboard+0x1d4>)
    2a22:	469a      	mov	sl, r3
    2a24:	9601      	str	r6, [sp, #4]
    2a26:	464e      	mov	r6, r9
    2a28:	4647      	mov	r7, r8
    2a2a:	e015      	b.n	2a58 <readKeyboard+0xbc>
    2a2c:	3304      	adds	r3, #4
    2a2e:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    2a30:	42a3      	cmp	r3, r4
    2a32:	d008      	beq.n	2a46 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2a34:	6a28      	ldr	r0, [r5, #32]
    2a36:	681e      	ldr	r6, [r3, #0]
    2a38:	4206      	tst	r6, r0
    2a3a:	d0f7      	beq.n	2a2c <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2a3c:	0090      	lsls	r0, r2, #2
    2a3e:	4666      	mov	r6, ip
    2a40:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    2a42:	3201      	adds	r2, #1
    2a44:	e7f2      	b.n	2a2c <readKeyboard+0x90>
    2a46:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2a48:	4649      	mov	r1, r9
    2a4a:	6809      	ldr	r1, [r1, #0]
    2a4c:	4650      	mov	r0, sl
    2a4e:	6001      	str	r1, [r0, #0]
    2a50:	3604      	adds	r6, #4
    2a52:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    2a54:	2f46      	cmp	r7, #70	; 0x46
    2a56:	d00a      	beq.n	2a6e <readKeyboard+0xd2>
    2a58:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    2a5a:	465b      	mov	r3, fp
    2a5c:	6831      	ldr	r1, [r6, #0]
    2a5e:	6019      	str	r1, [r3, #0]
    2a60:	4b44      	ldr	r3, [pc, #272]	; (2b74 <readKeyboard+0x1d8>)
    2a62:	4698      	mov	r8, r3
    2a64:	001c      	movs	r4, r3
    2a66:	3428      	adds	r4, #40	; 0x28
    2a68:	0039      	movs	r1, r7
    2a6a:	9600      	str	r6, [sp, #0]
    2a6c:	e7e2      	b.n	2a34 <readKeyboard+0x98>
    2a6e:	4647      	mov	r7, r8
    2a70:	9e01      	ldr	r6, [sp, #4]
    2a72:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    2a74:	4d3d      	ldr	r5, [pc, #244]	; (2b6c <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    2a76:	4c3e      	ldr	r4, [pc, #248]	; (2b70 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    2a78:	6808      	ldr	r0, [r1, #0]
    2a7a:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2a7c:	c901      	ldmia	r1!, {r0}
    2a7e:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2a80:	4299      	cmp	r1, r3
    2a82:	d1f9      	bne.n	2a78 <readKeyboard+0xdc>
    2a84:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    2a86:	4b38      	ldr	r3, [pc, #224]	; (2b68 <readKeyboard+0x1cc>)
    2a88:	4699      	mov	r9, r3
    2a8a:	4b3b      	ldr	r3, [pc, #236]	; (2b78 <readKeyboard+0x1dc>)
    2a8c:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    2a8e:	4b3e      	ldr	r3, [pc, #248]	; (2b88 <readKeyboard+0x1ec>)
    2a90:	469c      	mov	ip, r3
    2a92:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2a94:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    2a96:	4643      	mov	r3, r8
    2a98:	4648      	mov	r0, r9
    2a9a:	5808      	ldr	r0, [r1, r0]
    2a9c:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    2a9e:	4663      	mov	r3, ip
    2aa0:	58cb      	ldr	r3, [r1, r3]
    2aa2:	4837      	ldr	r0, [pc, #220]	; (2b80 <readKeyboard+0x1e4>)
    2aa4:	4682      	mov	sl, r0
    2aa6:	4453      	add	r3, sl
    2aa8:	7818      	ldrb	r0, [r3, #0]
    2aaa:	4328      	orrs	r0, r5
    2aac:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2aae:	7818      	ldrb	r0, [r3, #0]
    2ab0:	4320      	orrs	r0, r4
    2ab2:	7018      	strb	r0, [r3, #0]
    2ab4:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    2ab6:	291c      	cmp	r1, #28
    2ab8:	d1ed      	bne.n	2a96 <readKeyboard+0xfa>
    2aba:	2300      	movs	r3, #0
    2abc:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    2abe:	4b31      	ldr	r3, [pc, #196]	; (2b84 <readKeyboard+0x1e8>)
    2ac0:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2ac2:	4d28      	ldr	r5, [pc, #160]	; (2b64 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2ac4:	4b26      	ldr	r3, [pc, #152]	; (2b60 <readKeyboard+0x1c4>)
    2ac6:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    2ac8:	4b29      	ldr	r3, [pc, #164]	; (2b70 <readKeyboard+0x1d4>)
    2aca:	469a      	mov	sl, r3
    2acc:	46b1      	mov	r9, r6
    2ace:	003e      	movs	r6, r7
    2ad0:	4667      	mov	r7, ip
    2ad2:	e015      	b.n	2b00 <readKeyboard+0x164>
    2ad4:	3104      	adds	r1, #4
    2ad6:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    2ad8:	42a3      	cmp	r3, r4
    2ada:	d008      	beq.n	2aee <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2adc:	6a28      	ldr	r0, [r5, #32]
    2ade:	680e      	ldr	r6, [r1, #0]
    2ae0:	4206      	tst	r6, r0
    2ae2:	d0f7      	beq.n	2ad4 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2ae4:	0090      	lsls	r0, r2, #2
    2ae6:	4646      	mov	r6, r8
    2ae8:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    2aea:	3201      	adds	r2, #1
    2aec:	e7f2      	b.n	2ad4 <readKeyboard+0x138>
    2aee:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2af0:	4663      	mov	r3, ip
    2af2:	681b      	ldr	r3, [r3, #0]
    2af4:	4651      	mov	r1, sl
    2af6:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2af8:	3701      	adds	r7, #1
    2afa:	3604      	adds	r6, #4
    2afc:	2f0a      	cmp	r7, #10
    2afe:	d009      	beq.n	2b14 <readKeyboard+0x178>
    2b00:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    2b02:	465b      	mov	r3, fp
    2b04:	6831      	ldr	r1, [r6, #0]
    2b06:	6019      	str	r1, [r3, #0]
    2b08:	003b      	movs	r3, r7
    2b0a:	003c      	movs	r4, r7
    2b0c:	3446      	adds	r4, #70	; 0x46
    2b0e:	4916      	ldr	r1, [pc, #88]	; (2b68 <readKeyboard+0x1cc>)
    2b10:	9600      	str	r6, [sp, #0]
    2b12:	e7e3      	b.n	2adc <readKeyboard+0x140>
    2b14:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    2b16:	2a00      	cmp	r2, #0
    2b18:	dd08      	ble.n	2b2c <readKeyboard+0x190>
    2b1a:	4b1c      	ldr	r3, [pc, #112]	; (2b8c <readKeyboard+0x1f0>)
    2b1c:	0092      	lsls	r2, r2, #2
    2b1e:	4910      	ldr	r1, [pc, #64]	; (2b60 <readKeyboard+0x1c4>)
    2b20:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    2b22:	ce02      	ldmia	r6!, {r1}
    2b24:	7019      	strb	r1, [r3, #0]
    2b26:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2b28:	42b2      	cmp	r2, r6
    2b2a:	d1fa      	bne.n	2b22 <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    2b2c:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    2b2e:	4d18      	ldr	r5, [pc, #96]	; (2b90 <readKeyboard+0x1f4>)
    2b30:	4e18      	ldr	r6, [pc, #96]	; (2b94 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    2b32:	4f19      	ldr	r7, [pc, #100]	; (2b98 <readKeyboard+0x1fc>)
    2b34:	e002      	b.n	2b3c <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    2b36:	3401      	adds	r4, #1
    2b38:	2c46      	cmp	r4, #70	; 0x46
    2b3a:	d00a      	beq.n	2b52 <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    2b3c:	0020      	movs	r0, r4
    2b3e:	47a8      	blx	r5
    2b40:	2800      	cmp	r0, #0
    2b42:	d0f8      	beq.n	2b36 <readKeyboard+0x19a>
    2b44:	0020      	movs	r0, r4
    2b46:	47b0      	blx	r6
    2b48:	2800      	cmp	r0, #0
    2b4a:	d1f4      	bne.n	2b36 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    2b4c:	0020      	movs	r0, r4
    2b4e:	47b8      	blx	r7
    2b50:	e7f1      	b.n	2b36 <readKeyboard+0x19a>
}
    2b52:	b003      	add	sp, #12
    2b54:	bc3c      	pop	{r2, r3, r4, r5}
    2b56:	4690      	mov	r8, r2
    2b58:	4699      	mov	r9, r3
    2b5a:	46a2      	mov	sl, r4
    2b5c:	46ab      	mov	fp, r5
    2b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b60:	2000003c 	.word	0x2000003c
    2b64:	41004400 	.word	0x41004400
    2b68:	00006b5c 	.word	0x00006b5c
    2b6c:	41004408 	.word	0x41004408
    2b70:	41004414 	.word	0x41004414
    2b74:	00006b94 	.word	0x00006b94
    2b78:	41004404 	.word	0x41004404
    2b7c:	00006bbc 	.word	0x00006bbc
    2b80:	41004440 	.word	0x41004440
    2b84:	41004418 	.word	0x41004418
    2b88:	00006b78 	.word	0x00006b78
    2b8c:	20000028 	.word	0x20000028
    2b90:	0000264d 	.word	0x0000264d
    2b94:	00002621 	.word	0x00002621
    2b98:	00002979 	.word	0x00002979

00002b9c <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    2b9c:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2b9e:	094b      	lsrs	r3, r1, #5
    2ba0:	2407      	movs	r4, #7
    2ba2:	43a0      	bics	r0, r4
    2ba4:	4318      	orrs	r0, r3
    2ba6:	4b05      	ldr	r3, [pc, #20]	; (2bbc <setColorRGB+0x20>)
    2ba8:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2baa:	00c9      	lsls	r1, r1, #3
    2bac:	23e0      	movs	r3, #224	; 0xe0
    2bae:	4019      	ands	r1, r3
    2bb0:	08d2      	lsrs	r2, r2, #3
    2bb2:	430a      	orrs	r2, r1
    2bb4:	4b02      	ldr	r3, [pc, #8]	; (2bc0 <setColorRGB+0x24>)
    2bb6:	801a      	strh	r2, [r3, #0]
}
    2bb8:	bd10      	pop	{r4, pc}
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	20000aa2 	.word	0x20000aa2
    2bc0:	20000aa4 	.word	0x20000aa4

00002bc4 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    2bc4:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    2bc6:	094b      	lsrs	r3, r1, #5
    2bc8:	2407      	movs	r4, #7
    2bca:	43a0      	bics	r0, r4
    2bcc:	4318      	orrs	r0, r3
    2bce:	4b05      	ldr	r3, [pc, #20]	; (2be4 <setBackColorRGB+0x20>)
    2bd0:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    2bd2:	00c9      	lsls	r1, r1, #3
    2bd4:	23e0      	movs	r3, #224	; 0xe0
    2bd6:	4019      	ands	r1, r3
    2bd8:	08d2      	lsrs	r2, r2, #3
    2bda:	430a      	orrs	r2, r1
    2bdc:	4b02      	ldr	r3, [pc, #8]	; (2be8 <setBackColorRGB+0x24>)
    2bde:	801a      	strh	r2, [r3, #0]
}
    2be0:	bd10      	pop	{r4, pc}
    2be2:	46c0      	nop			; (mov r8, r8)
    2be4:	20000aa6 	.word	0x20000aa6
    2be8:	20000aa0 	.word	0x20000aa0

00002bec <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2bec:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2bee:	4c19      	ldr	r4, [pc, #100]	; (2c54 <LCD_Fast_Fill+0x68>)
    2bf0:	4b19      	ldr	r3, [pc, #100]	; (2c58 <LCD_Fast_Fill+0x6c>)
    2bf2:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    2bf4:	0200      	lsls	r0, r0, #8
    2bf6:	4301      	orrs	r1, r0
    2bf8:	4b18      	ldr	r3, [pc, #96]	; (2c5c <LCD_Fast_Fill+0x70>)
    2bfa:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2bfc:	17d3      	asrs	r3, r2, #31
    2bfe:	260f      	movs	r6, #15
    2c00:	401e      	ands	r6, r3
    2c02:	18b6      	adds	r6, r6, r2
    2c04:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    2c06:	2500      	movs	r5, #0
    2c08:	2e00      	cmp	r6, #0
    2c0a:	dd0c      	ble.n	2c26 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2c0c:	4c12      	ldr	r4, [pc, #72]	; (2c58 <LCD_Fast_Fill+0x6c>)
    2c0e:	2180      	movs	r1, #128	; 0x80
    2c10:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2c12:	4812      	ldr	r0, [pc, #72]	; (2c5c <LCD_Fast_Fill+0x70>)
{
    2c14:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    2c16:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2c18:	6001      	str	r1, [r0, #0]
    2c1a:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2c1c:	2b00      	cmp	r3, #0
    2c1e:	d1fa      	bne.n	2c16 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2c20:	3501      	adds	r5, #1
    2c22:	42ae      	cmp	r6, r5
    2c24:	d1f6      	bne.n	2c14 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    2c26:	0713      	lsls	r3, r2, #28
    2c28:	d013      	beq.n	2c52 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2c2a:	17d3      	asrs	r3, r2, #31
    2c2c:	0f1b      	lsrs	r3, r3, #28
    2c2e:	18d2      	adds	r2, r2, r3
    2c30:	210f      	movs	r1, #15
    2c32:	4011      	ands	r1, r2
    2c34:	1ac9      	subs	r1, r1, r3
    2c36:	1c4b      	adds	r3, r1, #1
    2c38:	2b00      	cmp	r3, #0
    2c3a:	dd0a      	ble.n	2c52 <LCD_Fast_Fill+0x66>
    2c3c:	0019      	movs	r1, r3
    2c3e:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2c40:	4c05      	ldr	r4, [pc, #20]	; (2c58 <LCD_Fast_Fill+0x6c>)
    2c42:	2280      	movs	r2, #128	; 0x80
    2c44:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    2c46:	4805      	ldr	r0, [pc, #20]	; (2c5c <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2c48:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    2c4a:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2c4c:	3301      	adds	r3, #1
    2c4e:	4299      	cmp	r1, r3
    2c50:	d1fa      	bne.n	2c48 <LCD_Fast_Fill+0x5c>
	}
}
    2c52:	bd70      	pop	{r4, r5, r6, pc}
    2c54:	0000ffff 	.word	0x0000ffff
    2c58:	41004494 	.word	0x41004494
    2c5c:	41004498 	.word	0x41004498

00002c60 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c62:	b083      	sub	sp, #12
    2c64:	0007      	movs	r7, r0
    2c66:	9100      	str	r1, [sp, #0]
    2c68:	0016      	movs	r6, r2
    2c6a:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    2c6c:	2100      	movs	r1, #0
    2c6e:	202a      	movs	r0, #42	; 0x2a
    2c70:	4c17      	ldr	r4, [pc, #92]	; (2cd0 <setXY+0x70>)
    2c72:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2c74:	0a38      	lsrs	r0, r7, #8
    2c76:	4d17      	ldr	r5, [pc, #92]	; (2cd4 <setXY+0x74>)
    2c78:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    2c7a:	2101      	movs	r1, #1
    2c7c:	202a      	movs	r0, #42	; 0x2a
    2c7e:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2c80:	b2f8      	uxtb	r0, r7
    2c82:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2c84:	2102      	movs	r1, #2
    2c86:	202a      	movs	r0, #42	; 0x2a
    2c88:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    2c8a:	0a30      	lsrs	r0, r6, #8
    2c8c:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    2c8e:	2103      	movs	r1, #3
    2c90:	202a      	movs	r0, #42	; 0x2a
    2c92:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2c94:	b2f0      	uxtb	r0, r6
    2c96:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    2c98:	2100      	movs	r1, #0
    2c9a:	202b      	movs	r0, #43	; 0x2b
    2c9c:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2c9e:	9e00      	ldr	r6, [sp, #0]
    2ca0:	0a30      	lsrs	r0, r6, #8
    2ca2:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    2ca4:	2101      	movs	r1, #1
    2ca6:	202b      	movs	r0, #43	; 0x2b
    2ca8:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2caa:	b2f0      	uxtb	r0, r6
    2cac:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    2cae:	2102      	movs	r1, #2
    2cb0:	202b      	movs	r0, #43	; 0x2b
    2cb2:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2cb4:	9e01      	ldr	r6, [sp, #4]
    2cb6:	0a30      	lsrs	r0, r6, #8
    2cb8:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    2cba:	2103      	movs	r1, #3
    2cbc:	202b      	movs	r0, #43	; 0x2b
    2cbe:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2cc0:	b2f0      	uxtb	r0, r6
    2cc2:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    2cc4:	2100      	movs	r1, #0
    2cc6:	202c      	movs	r0, #44	; 0x2c
    2cc8:	47a0      	blx	r4
}
    2cca:	b003      	add	sp, #12
    2ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	00002e05 	.word	0x00002e05
    2cd4:	00002e35 	.word	0x00002e35

00002cd8 <fillRect>:
{
    2cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cda:	46ce      	mov	lr, r9
    2cdc:	4647      	mov	r7, r8
    2cde:	b580      	push	{r7, lr}
    2ce0:	b083      	sub	sp, #12
    2ce2:	0006      	movs	r6, r0
    2ce4:	4689      	mov	r9, r1
    2ce6:	0014      	movs	r4, r2
    2ce8:	001d      	movs	r5, r3
	if (x1>x2)
    2cea:	4290      	cmp	r0, r2
    2cec:	dd01      	ble.n	2cf2 <fillRect+0x1a>
		x1 = x2;
    2cee:	0016      	movs	r6, r2
		x2 = temp;
    2cf0:	0004      	movs	r4, r0
	if (y1>y2)
    2cf2:	45a9      	cmp	r9, r5
    2cf4:	dd02      	ble.n	2cfc <fillRect+0x24>
    2cf6:	0033      	movs	r3, r6
		x1 = x2;
    2cf8:	0026      	movs	r6, r4
		x2 = temp;
    2cfa:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2cfc:	2380      	movs	r3, #128	; 0x80
    2cfe:	03db      	lsls	r3, r3, #15
    2d00:	4698      	mov	r8, r3
    2d02:	4b11      	ldr	r3, [pc, #68]	; (2d48 <fillRect+0x70>)
    2d04:	4642      	mov	r2, r8
    2d06:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2d08:	b2ab      	uxth	r3, r5
    2d0a:	b2a2      	uxth	r2, r4
    2d0c:	4649      	mov	r1, r9
    2d0e:	4668      	mov	r0, sp
    2d10:	80c1      	strh	r1, [r0, #6]
    2d12:	88c1      	ldrh	r1, [r0, #6]
    2d14:	b2b0      	uxth	r0, r6
    2d16:	4f0d      	ldr	r7, [pc, #52]	; (2d4c <fillRect+0x74>)
    2d18:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2d1a:	4f0d      	ldr	r7, [pc, #52]	; (2d50 <fillRect+0x78>)
    2d1c:	2380      	movs	r3, #128	; 0x80
    2d1e:	041b      	lsls	r3, r3, #16
    2d20:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2d22:	1ba4      	subs	r4, r4, r6
    2d24:	3401      	adds	r4, #1
    2d26:	464b      	mov	r3, r9
    2d28:	1aea      	subs	r2, r5, r3
    2d2a:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2d2c:	4362      	muls	r2, r4
    2d2e:	4b09      	ldr	r3, [pc, #36]	; (2d54 <fillRect+0x7c>)
    2d30:	8819      	ldrh	r1, [r3, #0]
    2d32:	4b09      	ldr	r3, [pc, #36]	; (2d58 <fillRect+0x80>)
    2d34:	8818      	ldrh	r0, [r3, #0]
    2d36:	4b09      	ldr	r3, [pc, #36]	; (2d5c <fillRect+0x84>)
    2d38:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2d3a:	4643      	mov	r3, r8
    2d3c:	603b      	str	r3, [r7, #0]
}
    2d3e:	b003      	add	sp, #12
    2d40:	bc0c      	pop	{r2, r3}
    2d42:	4690      	mov	r8, r2
    2d44:	4699      	mov	r9, r3
    2d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d48:	41004494 	.word	0x41004494
    2d4c:	00002c61 	.word	0x00002c61
    2d50:	41004498 	.word	0x41004498
    2d54:	20000aa4 	.word	0x20000aa4
    2d58:	20000aa2 	.word	0x20000aa2
    2d5c:	00002bed 	.word	0x00002bed

00002d60 <clrXY>:
{
    2d60:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2d62:	4b04      	ldr	r3, [pc, #16]	; (2d74 <clrXY+0x14>)
    2d64:	881b      	ldrh	r3, [r3, #0]
    2d66:	4a04      	ldr	r2, [pc, #16]	; (2d78 <clrXY+0x18>)
    2d68:	8812      	ldrh	r2, [r2, #0]
    2d6a:	2100      	movs	r1, #0
    2d6c:	2000      	movs	r0, #0
    2d6e:	4c03      	ldr	r4, [pc, #12]	; (2d7c <clrXY+0x1c>)
    2d70:	47a0      	blx	r4
}
    2d72:	bd10      	pop	{r4, pc}
    2d74:	20000156 	.word	0x20000156
    2d78:	20000154 	.word	0x20000154
    2d7c:	00002c61 	.word	0x00002c61

00002d80 <clrScr>:
{
    2d80:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2d82:	2280      	movs	r2, #128	; 0x80
    2d84:	03d2      	lsls	r2, r2, #15
    2d86:	4b02      	ldr	r3, [pc, #8]	; (2d90 <clrScr+0x10>)
    2d88:	601a      	str	r2, [r3, #0]
	clrXY();
    2d8a:	4b02      	ldr	r3, [pc, #8]	; (2d94 <clrScr+0x14>)
    2d8c:	4798      	blx	r3
}
    2d8e:	bd10      	pop	{r4, pc}
    2d90:	41004494 	.word	0x41004494
    2d94:	00002d61 	.word	0x00002d61

00002d98 <setPixel>:

void setPixel(uint16_t color)
{
    2d98:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2d9a:	b2c1      	uxtb	r1, r0
    2d9c:	0a00      	lsrs	r0, r0, #8
    2d9e:	4b01      	ldr	r3, [pc, #4]	; (2da4 <setPixel+0xc>)
    2da0:	4798      	blx	r3
}
    2da2:	bd10      	pop	{r4, pc}
    2da4:	00002e1d 	.word	0x00002e1d

00002da8 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2da8:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2daa:	2300      	movs	r3, #0
    2dac:	4a06      	ldr	r2, [pc, #24]	; (2dc8 <clearScreen+0x20>)
    2dae:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2db0:	4a06      	ldr	r2, [pc, #24]	; (2dcc <clearScreen+0x24>)
    2db2:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2db4:	4b06      	ldr	r3, [pc, #24]	; (2dd0 <clearScreen+0x28>)
    2db6:	881b      	ldrh	r3, [r3, #0]
    2db8:	4a06      	ldr	r2, [pc, #24]	; (2dd4 <clearScreen+0x2c>)
    2dba:	8812      	ldrh	r2, [r2, #0]
    2dbc:	2100      	movs	r1, #0
    2dbe:	2000      	movs	r0, #0
    2dc0:	4c05      	ldr	r4, [pc, #20]	; (2dd8 <clearScreen+0x30>)
    2dc2:	47a0      	blx	r4
}
    2dc4:	bd10      	pop	{r4, pc}
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	20000aa2 	.word	0x20000aa2
    2dcc:	20000aa4 	.word	0x20000aa4
    2dd0:	20000154 	.word	0x20000154
    2dd4:	20000156 	.word	0x20000156
    2dd8:	00002cd9 	.word	0x00002cd9

00002ddc <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2ddc:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2dde:	4c06      	ldr	r4, [pc, #24]	; (2df8 <LCD_Write_Bus+0x1c>)
    2de0:	4b06      	ldr	r3, [pc, #24]	; (2dfc <LCD_Write_Bus+0x20>)
    2de2:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2de4:	0200      	lsls	r0, r0, #8
    2de6:	4301      	orrs	r1, r0
    2de8:	4b05      	ldr	r3, [pc, #20]	; (2e00 <LCD_Write_Bus+0x24>)
    2dea:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2dec:	2280      	movs	r2, #128	; 0x80
    2dee:	0292      	lsls	r2, r2, #10
    2df0:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2df2:	601a      	str	r2, [r3, #0]
}
    2df4:	bd10      	pop	{r4, pc}
    2df6:	46c0      	nop			; (mov r8, r8)
    2df8:	41004494 	.word	0x41004494
    2dfc:	0000ffff 	.word	0x0000ffff
    2e00:	41004498 	.word	0x41004498

00002e04 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2e04:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2e06:	2280      	movs	r2, #128	; 0x80
    2e08:	0412      	lsls	r2, r2, #16
    2e0a:	4b02      	ldr	r3, [pc, #8]	; (2e14 <LCD_Write_COM16+0x10>)
    2e0c:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2e0e:	4b02      	ldr	r3, [pc, #8]	; (2e18 <LCD_Write_COM16+0x14>)
    2e10:	4798      	blx	r3
}
    2e12:	bd10      	pop	{r4, pc}
    2e14:	41004494 	.word	0x41004494
    2e18:	00002ddd 	.word	0x00002ddd

00002e1c <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    2e1c:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    2e1e:	2280      	movs	r2, #128	; 0x80
    2e20:	0412      	lsls	r2, r2, #16
    2e22:	4b02      	ldr	r3, [pc, #8]	; (2e2c <LCD_Write_DATA16+0x10>)
    2e24:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2e26:	4b02      	ldr	r3, [pc, #8]	; (2e30 <LCD_Write_DATA16+0x14>)
    2e28:	4798      	blx	r3
}
    2e2a:	bd10      	pop	{r4, pc}
    2e2c:	41004498 	.word	0x41004498
    2e30:	00002ddd 	.word	0x00002ddd

00002e34 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    2e34:	b510      	push	{r4, lr}
    2e36:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    2e38:	2280      	movs	r2, #128	; 0x80
    2e3a:	0412      	lsls	r2, r2, #16
    2e3c:	4b02      	ldr	r3, [pc, #8]	; (2e48 <LCD_Write_DATA8+0x14>)
    2e3e:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    2e40:	2000      	movs	r0, #0
    2e42:	4b02      	ldr	r3, [pc, #8]	; (2e4c <LCD_Write_DATA8+0x18>)
    2e44:	4798      	blx	r3
}
    2e46:	bd10      	pop	{r4, pc}
    2e48:	41004498 	.word	0x41004498
    2e4c:	00002ddd 	.word	0x00002ddd

00002e50 <InitLCD>:
{
    2e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e52:	46c6      	mov	lr, r8
    2e54:	b500      	push	{lr}
    2e56:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    2e58:	4b80      	ldr	r3, [pc, #512]	; (305c <InitLCD+0x20c>)
    2e5a:	4f81      	ldr	r7, [pc, #516]	; (3060 <InitLCD+0x210>)
    2e5c:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    2e5e:	2580      	movs	r5, #128	; 0x80
    2e60:	05ed      	lsls	r5, r5, #23
    2e62:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    2e64:	2680      	movs	r6, #128	; 0x80
    2e66:	03f6      	lsls	r6, r6, #15
    2e68:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    2e6a:	2080      	movs	r0, #128	; 0x80
    2e6c:	0280      	lsls	r0, r0, #10
    2e6e:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    2e70:	2180      	movs	r1, #128	; 0x80
    2e72:	0409      	lsls	r1, r1, #16
    2e74:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2e76:	2280      	movs	r2, #128	; 0x80
    2e78:	0252      	lsls	r2, r2, #9
    2e7a:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2e7c:	4c79      	ldr	r4, [pc, #484]	; (3064 <InitLCD+0x214>)
    2e7e:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    2e80:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2e82:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2e84:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2e86:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2e88:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2e8a:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    2e8c:	4f76      	ldr	r7, [pc, #472]	; (3068 <InitLCD+0x218>)
    2e8e:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    2e90:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    2e92:	2005      	movs	r0, #5
    2e94:	4b75      	ldr	r3, [pc, #468]	; (306c <InitLCD+0x21c>)
    2e96:	4698      	mov	r8, r3
    2e98:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    2e9a:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    2e9c:	2005      	movs	r0, #5
    2e9e:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    2ea0:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2ea2:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    2ea4:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    2ea6:	4b6f      	ldr	r3, [pc, #444]	; (3064 <InitLCD+0x214>)
    2ea8:	4698      	mov	r8, r3
    2eaa:	2580      	movs	r5, #128	; 0x80
    2eac:	042d      	lsls	r5, r5, #16
    2eae:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    2eb0:	4e6f      	ldr	r6, [pc, #444]	; (3070 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    2eb2:	4643      	mov	r3, r8
    2eb4:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    2eb6:	5da1      	ldrb	r1, [r4, r6]
    2eb8:	4b6e      	ldr	r3, [pc, #440]	; (3074 <InitLCD+0x224>)
    2eba:	5ce0      	ldrb	r0, [r4, r3]
    2ebc:	4b6e      	ldr	r3, [pc, #440]	; (3078 <InitLCD+0x228>)
    2ebe:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2ec0:	4b69      	ldr	r3, [pc, #420]	; (3068 <InitLCD+0x218>)
    2ec2:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    2ec4:	4b6d      	ldr	r3, [pc, #436]	; (307c <InitLCD+0x22c>)
    2ec6:	5ce0      	ldrb	r0, [r4, r3]
    2ec8:	4b6d      	ldr	r3, [pc, #436]	; (3080 <InitLCD+0x230>)
    2eca:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2ecc:	3401      	adds	r4, #1
    2ece:	2c46      	cmp	r4, #70	; 0x46
    2ed0:	d1ef      	bne.n	2eb2 <InitLCD+0x62>
    2ed2:	23d1      	movs	r3, #209	; 0xd1
    2ed4:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    2ed6:	4d68      	ldr	r5, [pc, #416]	; (3078 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    2ed8:	4f69      	ldr	r7, [pc, #420]	; (3080 <InitLCD+0x230>)
    2eda:	4c6a      	ldr	r4, [pc, #424]	; (3084 <InitLCD+0x234>)
    2edc:	0026      	movs	r6, r4
    2ede:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    2ee0:	2100      	movs	r1, #0
    2ee2:	9801      	ldr	r0, [sp, #4]
    2ee4:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    2ee6:	7820      	ldrb	r0, [r4, #0]
    2ee8:	47b8      	blx	r7
    2eea:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    2eec:	42a6      	cmp	r6, r4
    2eee:	d1f7      	bne.n	2ee0 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    2ef0:	9b01      	ldr	r3, [sp, #4]
    2ef2:	3301      	adds	r3, #1
    2ef4:	b2db      	uxtb	r3, r3
    2ef6:	9301      	str	r3, [sp, #4]
    2ef8:	2bd6      	cmp	r3, #214	; 0xd6
    2efa:	d1ee      	bne.n	2eda <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    2efc:	2100      	movs	r1, #0
    2efe:	20f0      	movs	r0, #240	; 0xf0
    2f00:	4c5d      	ldr	r4, [pc, #372]	; (3078 <InitLCD+0x228>)
    2f02:	47a0      	blx	r4
    2f04:	2055      	movs	r0, #85	; 0x55
    2f06:	4d5e      	ldr	r5, [pc, #376]	; (3080 <InitLCD+0x230>)
    2f08:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    2f0a:	2101      	movs	r1, #1
    2f0c:	20f0      	movs	r0, #240	; 0xf0
    2f0e:	47a0      	blx	r4
    2f10:	20aa      	movs	r0, #170	; 0xaa
    2f12:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    2f14:	2102      	movs	r1, #2
    2f16:	20f0      	movs	r0, #240	; 0xf0
    2f18:	47a0      	blx	r4
    2f1a:	2052      	movs	r0, #82	; 0x52
    2f1c:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    2f1e:	2103      	movs	r1, #3
    2f20:	20f0      	movs	r0, #240	; 0xf0
    2f22:	47a0      	blx	r4
    2f24:	2008      	movs	r0, #8
    2f26:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    2f28:	2104      	movs	r1, #4
    2f2a:	20f0      	movs	r0, #240	; 0xf0
    2f2c:	47a0      	blx	r4
    2f2e:	2000      	movs	r0, #0
    2f30:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    2f32:	2100      	movs	r1, #0
    2f34:	20b1      	movs	r0, #177	; 0xb1
    2f36:	47a0      	blx	r4
    2f38:	20cc      	movs	r0, #204	; 0xcc
    2f3a:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    2f3c:	2101      	movs	r1, #1
    2f3e:	20b1      	movs	r0, #177	; 0xb1
    2f40:	47a0      	blx	r4
    2f42:	2000      	movs	r0, #0
    2f44:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    2f46:	2100      	movs	r1, #0
    2f48:	20b5      	movs	r0, #181	; 0xb5
    2f4a:	47a0      	blx	r4
    2f4c:	2050      	movs	r0, #80	; 0x50
    2f4e:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    2f50:	2100      	movs	r1, #0
    2f52:	20b6      	movs	r0, #182	; 0xb6
    2f54:	47a0      	blx	r4
    2f56:	2005      	movs	r0, #5
    2f58:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    2f5a:	2100      	movs	r1, #0
    2f5c:	20b7      	movs	r0, #183	; 0xb7
    2f5e:	47a0      	blx	r4
    2f60:	2070      	movs	r0, #112	; 0x70
    2f62:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    2f64:	2101      	movs	r1, #1
    2f66:	20b7      	movs	r0, #183	; 0xb7
    2f68:	47a0      	blx	r4
    2f6a:	2070      	movs	r0, #112	; 0x70
    2f6c:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    2f6e:	2100      	movs	r1, #0
    2f70:	20b8      	movs	r0, #184	; 0xb8
    2f72:	47a0      	blx	r4
    2f74:	2001      	movs	r0, #1
    2f76:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2f78:	2101      	movs	r1, #1
    2f7a:	20b8      	movs	r0, #184	; 0xb8
    2f7c:	47a0      	blx	r4
    2f7e:	2003      	movs	r0, #3
    2f80:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    2f82:	2102      	movs	r1, #2
    2f84:	20b8      	movs	r0, #184	; 0xb8
    2f86:	47a0      	blx	r4
    2f88:	2003      	movs	r0, #3
    2f8a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2f8c:	2103      	movs	r1, #3
    2f8e:	20b8      	movs	r0, #184	; 0xb8
    2f90:	47a0      	blx	r4
    2f92:	2003      	movs	r0, #3
    2f94:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2f96:	2100      	movs	r1, #0
    2f98:	20bc      	movs	r0, #188	; 0xbc
    2f9a:	47a0      	blx	r4
    2f9c:	2002      	movs	r0, #2
    2f9e:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    2fa0:	2101      	movs	r1, #1
    2fa2:	20bc      	movs	r0, #188	; 0xbc
    2fa4:	47a0      	blx	r4
    2fa6:	2000      	movs	r0, #0
    2fa8:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2faa:	2102      	movs	r1, #2
    2fac:	20bc      	movs	r0, #188	; 0xbc
    2fae:	47a0      	blx	r4
    2fb0:	2000      	movs	r0, #0
    2fb2:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    2fb4:	2100      	movs	r1, #0
    2fb6:	20c9      	movs	r0, #201	; 0xc9
    2fb8:	47a0      	blx	r4
    2fba:	20d0      	movs	r0, #208	; 0xd0
    2fbc:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    2fbe:	2101      	movs	r1, #1
    2fc0:	20c9      	movs	r0, #201	; 0xc9
    2fc2:	47a0      	blx	r4
    2fc4:	2002      	movs	r0, #2
    2fc6:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2fc8:	2102      	movs	r1, #2
    2fca:	20c9      	movs	r0, #201	; 0xc9
    2fcc:	47a0      	blx	r4
    2fce:	2050      	movs	r0, #80	; 0x50
    2fd0:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    2fd2:	2103      	movs	r1, #3
    2fd4:	20c9      	movs	r0, #201	; 0xc9
    2fd6:	47a0      	blx	r4
    2fd8:	2050      	movs	r0, #80	; 0x50
    2fda:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2fdc:	2104      	movs	r1, #4
    2fde:	20c9      	movs	r0, #201	; 0xc9
    2fe0:	47a0      	blx	r4
    2fe2:	2050      	movs	r0, #80	; 0x50
    2fe4:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2fe6:	2100      	movs	r1, #0
    2fe8:	2035      	movs	r0, #53	; 0x35
    2fea:	47a0      	blx	r4
    2fec:	2000      	movs	r0, #0
    2fee:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    2ff0:	2100      	movs	r1, #0
    2ff2:	203a      	movs	r0, #58	; 0x3a
    2ff4:	47a0      	blx	r4
    2ff6:	2055      	movs	r0, #85	; 0x55
    2ff8:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    2ffa:	2100      	movs	r1, #0
    2ffc:	2036      	movs	r0, #54	; 0x36
    2ffe:	47a0      	blx	r4
    3000:	20e2      	movs	r0, #226	; 0xe2
    3002:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    3004:	2100      	movs	r1, #0
    3006:	2011      	movs	r0, #17
    3008:	47a0      	blx	r4
  	delay_ms(100);
    300a:	2064      	movs	r0, #100	; 0x64
    300c:	4e17      	ldr	r6, [pc, #92]	; (306c <InitLCD+0x21c>)
    300e:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    3010:	2100      	movs	r1, #0
    3012:	2029      	movs	r0, #41	; 0x29
    3014:	47a0      	blx	r4
   	delay_ms(100);
    3016:	2064      	movs	r0, #100	; 0x64
    3018:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    301a:	2100      	movs	r1, #0
    301c:	2051      	movs	r0, #81	; 0x51
    301e:	47a0      	blx	r4
    3020:	20ff      	movs	r0, #255	; 0xff
    3022:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    3024:	2280      	movs	r2, #128	; 0x80
    3026:	03d2      	lsls	r2, r2, #15
    3028:	4b0f      	ldr	r3, [pc, #60]	; (3068 <InitLCD+0x218>)
    302a:	601a      	str	r2, [r3, #0]
	clrScr();
    302c:	4b16      	ldr	r3, [pc, #88]	; (3088 <InitLCD+0x238>)
    302e:	4798      	blx	r3
	setColorRGB(0,0,0);
    3030:	2200      	movs	r2, #0
    3032:	2100      	movs	r1, #0
    3034:	2000      	movs	r0, #0
    3036:	4b15      	ldr	r3, [pc, #84]	; (308c <InitLCD+0x23c>)
    3038:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    303a:	2200      	movs	r2, #0
    303c:	2100      	movs	r1, #0
    303e:	2000      	movs	r0, #0
    3040:	4b13      	ldr	r3, [pc, #76]	; (3090 <InitLCD+0x240>)
    3042:	4798      	blx	r3
	fillRect(0,0,799,489);
    3044:	23ea      	movs	r3, #234	; 0xea
    3046:	33ff      	adds	r3, #255	; 0xff
    3048:	4a12      	ldr	r2, [pc, #72]	; (3094 <InitLCD+0x244>)
    304a:	2100      	movs	r1, #0
    304c:	2000      	movs	r0, #0
    304e:	4c12      	ldr	r4, [pc, #72]	; (3098 <InitLCD+0x248>)
    3050:	47a0      	blx	r4
}
    3052:	b002      	add	sp, #8
    3054:	bc04      	pop	{r2}
    3056:	4690      	mov	r8, r2
    3058:	bdf0      	pop	{r4, r5, r6, r7, pc}
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	41004488 	.word	0x41004488
    3060:	0000ffff 	.word	0x0000ffff
    3064:	41004494 	.word	0x41004494
    3068:	41004498 	.word	0x41004498
    306c:	000007f9 	.word	0x000007f9
    3070:	00006ca8 	.word	0x00006ca8
    3074:	00006c18 	.word	0x00006c18
    3078:	00002e05 	.word	0x00002e05
    307c:	00006c60 	.word	0x00006c60
    3080:	00002e35 	.word	0x00002e35
    3084:	00006be4 	.word	0x00006be4
    3088:	00002d81 	.word	0x00002d81
    308c:	00002b9d 	.word	0x00002b9d
    3090:	00002bc5 	.word	0x00002bc5
    3094:	0000031f 	.word	0x0000031f
    3098:	00002cd9 	.word	0x00002cd9

0000309c <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    309c:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    309e:	4c06      	ldr	r4, [pc, #24]	; (30b8 <usart_read_callback+0x1c>)
    30a0:	2201      	movs	r2, #1
    30a2:	0021      	movs	r1, r4
    30a4:	4805      	ldr	r0, [pc, #20]	; (30bc <usart_read_callback+0x20>)
    30a6:	4b06      	ldr	r3, [pc, #24]	; (30c0 <usart_read_callback+0x24>)
    30a8:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    30aa:	7821      	ldrb	r1, [r4, #0]
    30ac:	4b05      	ldr	r3, [pc, #20]	; (30c4 <usart_read_callback+0x28>)
    30ae:	6818      	ldr	r0, [r3, #0]
    30b0:	4b05      	ldr	r3, [pc, #20]	; (30c8 <usart_read_callback+0x2c>)
    30b2:	4798      	blx	r3
}
    30b4:	bd10      	pop	{r4, pc}
    30b6:	46c0      	nop			; (mov r8, r8)
    30b8:	20000aa8 	.word	0x20000aa8
    30bc:	200002e8 	.word	0x200002e8
    30c0:	00001699 	.word	0x00001699
    30c4:	200002bc 	.word	0x200002bc
    30c8:	00000141 	.word	0x00000141

000030cc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    30cc:	b570      	push	{r4, r5, r6, lr}
    30ce:	b082      	sub	sp, #8
    30d0:	0005      	movs	r5, r0
    30d2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    30d4:	2200      	movs	r2, #0
    30d6:	466b      	mov	r3, sp
    30d8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    30da:	4c06      	ldr	r4, [pc, #24]	; (30f4 <usart_serial_getchar+0x28>)
    30dc:	466b      	mov	r3, sp
    30de:	1d99      	adds	r1, r3, #6
    30e0:	0028      	movs	r0, r5
    30e2:	47a0      	blx	r4
    30e4:	2800      	cmp	r0, #0
    30e6:	d1f9      	bne.n	30dc <usart_serial_getchar+0x10>

	*c = temp;
    30e8:	466b      	mov	r3, sp
    30ea:	3306      	adds	r3, #6
    30ec:	881b      	ldrh	r3, [r3, #0]
    30ee:	7033      	strb	r3, [r6, #0]
}
    30f0:	b002      	add	sp, #8
    30f2:	bd70      	pop	{r4, r5, r6, pc}
    30f4:	000015c7 	.word	0x000015c7

000030f8 <usart_serial_putchar>:
{
    30f8:	b570      	push	{r4, r5, r6, lr}
    30fa:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    30fc:	b28c      	uxth	r4, r1
    30fe:	4e03      	ldr	r6, [pc, #12]	; (310c <usart_serial_putchar+0x14>)
    3100:	0021      	movs	r1, r4
    3102:	0028      	movs	r0, r5
    3104:	47b0      	blx	r6
    3106:	2800      	cmp	r0, #0
    3108:	d1fa      	bne.n	3100 <usart_serial_putchar+0x8>
}
    310a:	bd70      	pop	{r4, r5, r6, pc}
    310c:	000015a1 	.word	0x000015a1

00003110 <SysTick_Handler>:
	ul_tickcount++;
    3110:	4a02      	ldr	r2, [pc, #8]	; (311c <SysTick_Handler+0xc>)
    3112:	8813      	ldrh	r3, [r2, #0]
    3114:	3301      	adds	r3, #1
    3116:	8013      	strh	r3, [r2, #0]
}
    3118:	4770      	bx	lr
    311a:	46c0      	nop			; (mov r8, r8)
    311c:	200002aa 	.word	0x200002aa

00003120 <conf_systick>:
{
    3120:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    3122:	4b0e      	ldr	r3, [pc, #56]	; (315c <conf_systick+0x3c>)
    3124:	6818      	ldr	r0, [r3, #0]
    3126:	21fa      	movs	r1, #250	; 0xfa
    3128:	0089      	lsls	r1, r1, #2
    312a:	4b0d      	ldr	r3, [pc, #52]	; (3160 <conf_systick+0x40>)
    312c:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    312e:	3801      	subs	r0, #1
    3130:	4b0c      	ldr	r3, [pc, #48]	; (3164 <conf_systick+0x44>)
    3132:	4298      	cmp	r0, r3
    3134:	d80d      	bhi.n	3152 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3136:	4a0c      	ldr	r2, [pc, #48]	; (3168 <conf_systick+0x48>)
    3138:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    313a:	480c      	ldr	r0, [pc, #48]	; (316c <conf_systick+0x4c>)
    313c:	6a03      	ldr	r3, [r0, #32]
    313e:	021b      	lsls	r3, r3, #8
    3140:	0a1b      	lsrs	r3, r3, #8
    3142:	21c0      	movs	r1, #192	; 0xc0
    3144:	0609      	lsls	r1, r1, #24
    3146:	430b      	orrs	r3, r1
    3148:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    314a:	2300      	movs	r3, #0
    314c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    314e:	3307      	adds	r3, #7
    3150:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3152:	2280      	movs	r2, #128	; 0x80
    3154:	0612      	lsls	r2, r2, #24
    3156:	4b06      	ldr	r3, [pc, #24]	; (3170 <conf_systick+0x50>)
    3158:	601a      	str	r2, [r3, #0]
}
    315a:	bd10      	pop	{r4, pc}
    315c:	2000000c 	.word	0x2000000c
    3160:	000034e9 	.word	0x000034e9
    3164:	00ffffff 	.word	0x00ffffff
    3168:	e000e010 	.word	0xe000e010
    316c:	e000ed00 	.word	0xe000ed00
    3170:	e000e100 	.word	0xe000e100

00003174 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    3174:	b570      	push	{r4, r5, r6, lr}
    3176:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    3178:	2380      	movs	r3, #128	; 0x80
    317a:	05db      	lsls	r3, r3, #23
    317c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    317e:	2300      	movs	r3, #0
    3180:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3182:	22ff      	movs	r2, #255	; 0xff
    3184:	4669      	mov	r1, sp
    3186:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3188:	2200      	movs	r2, #0
    318a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    318c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    318e:	2196      	movs	r1, #150	; 0x96
    3190:	0189      	lsls	r1, r1, #6
    3192:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    3194:	2101      	movs	r1, #1
    3196:	2024      	movs	r0, #36	; 0x24
    3198:	466c      	mov	r4, sp
    319a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    319c:	3001      	adds	r0, #1
    319e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    31a0:	3125      	adds	r1, #37	; 0x25
    31a2:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    31a4:	3101      	adds	r1, #1
    31a6:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    31a8:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    31aa:	3105      	adds	r1, #5
    31ac:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    31ae:	3101      	adds	r1, #1
    31b0:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    31b2:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    31b4:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    31b6:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    31b8:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    31ba:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    31bc:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    31be:	2313      	movs	r3, #19
    31c0:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    31c2:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    31c4:	2380      	movs	r3, #128	; 0x80
    31c6:	035b      	lsls	r3, r3, #13
    31c8:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    31ca:	4b1e      	ldr	r3, [pc, #120]	; (3244 <configure_usart+0xd0>)
    31cc:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    31ce:	4b1e      	ldr	r3, [pc, #120]	; (3248 <configure_usart+0xd4>)
    31d0:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    31d2:	2301      	movs	r3, #1
    31d4:	425b      	negs	r3, r3
    31d6:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    31d8:	930f      	str	r3, [sp, #60]	; 0x3c
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    31da:	4d1c      	ldr	r5, [pc, #112]	; (324c <configure_usart+0xd8>)
    31dc:	4c1c      	ldr	r4, [pc, #112]	; (3250 <configure_usart+0xdc>)
    31de:	466a      	mov	r2, sp
    31e0:	491c      	ldr	r1, [pc, #112]	; (3254 <configure_usart+0xe0>)
    31e2:	0028      	movs	r0, r5
    31e4:	47a0      	blx	r4
    31e6:	2800      	cmp	r0, #0
    31e8:	d1f9      	bne.n	31de <configure_usart+0x6a>
	stdio_base = (void *)module;
    31ea:	4c18      	ldr	r4, [pc, #96]	; (324c <configure_usart+0xd8>)
    31ec:	4b1a      	ldr	r3, [pc, #104]	; (3258 <configure_usart+0xe4>)
    31ee:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    31f0:	4a1a      	ldr	r2, [pc, #104]	; (325c <configure_usart+0xe8>)
    31f2:	4b1b      	ldr	r3, [pc, #108]	; (3260 <configure_usart+0xec>)
    31f4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    31f6:	4a1b      	ldr	r2, [pc, #108]	; (3264 <configure_usart+0xf0>)
    31f8:	4b1b      	ldr	r3, [pc, #108]	; (3268 <configure_usart+0xf4>)
    31fa:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    31fc:	466a      	mov	r2, sp
    31fe:	4915      	ldr	r1, [pc, #84]	; (3254 <configure_usart+0xe0>)
    3200:	0020      	movs	r0, r4
    3202:	4b13      	ldr	r3, [pc, #76]	; (3250 <configure_usart+0xdc>)
    3204:	4798      	blx	r3
	setbuf(stdout, NULL);
    3206:	4e19      	ldr	r6, [pc, #100]	; (326c <configure_usart+0xf8>)
    3208:	6833      	ldr	r3, [r6, #0]
    320a:	6898      	ldr	r0, [r3, #8]
    320c:	2100      	movs	r1, #0
    320e:	4d18      	ldr	r5, [pc, #96]	; (3270 <configure_usart+0xfc>)
    3210:	47a8      	blx	r5
	setbuf(stdin, NULL);
    3212:	6833      	ldr	r3, [r6, #0]
    3214:	6858      	ldr	r0, [r3, #4]
    3216:	2100      	movs	r1, #0
    3218:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    321a:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    321c:	0028      	movs	r0, r5
    321e:	4b15      	ldr	r3, [pc, #84]	; (3274 <configure_usart+0x100>)
    3220:	4798      	blx	r3
    3222:	231f      	movs	r3, #31
    3224:	4018      	ands	r0, r3
    3226:	3b1e      	subs	r3, #30
    3228:	4083      	lsls	r3, r0
    322a:	4a13      	ldr	r2, [pc, #76]	; (3278 <configure_usart+0x104>)
    322c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    322e:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    3230:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3232:	2b00      	cmp	r3, #0
    3234:	d1fc      	bne.n	3230 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3236:	682b      	ldr	r3, [r5, #0]
    3238:	2202      	movs	r2, #2
    323a:	4313      	orrs	r3, r2
    323c:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    323e:	b010      	add	sp, #64	; 0x40
    3240:	bd70      	pop	{r4, r5, r6, pc}
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	00080003 	.word	0x00080003
    3248:	00090003 	.word	0x00090003
    324c:	200002e8 	.word	0x200002e8
    3250:	00001265 	.word	0x00001265
    3254:	42001000 	.word	0x42001000
    3258:	200002e4 	.word	0x200002e4
    325c:	000030f9 	.word	0x000030f9
    3260:	200002e0 	.word	0x200002e0
    3264:	000030cd 	.word	0x000030cd
    3268:	200002dc 	.word	0x200002dc
    326c:	20000164 	.word	0x20000164
    3270:	00003b4d 	.word	0x00003b4d
    3274:	000011d5 	.word	0x000011d5
    3278:	e000e100 	.word	0xe000e100

0000327c <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    327c:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    327e:	4c06      	ldr	r4, [pc, #24]	; (3298 <configure_usart_callbacks+0x1c>)
    3280:	2201      	movs	r2, #1
    3282:	4906      	ldr	r1, [pc, #24]	; (329c <configure_usart_callbacks+0x20>)
    3284:	0020      	movs	r0, r4
    3286:	4b06      	ldr	r3, [pc, #24]	; (32a0 <configure_usart_callbacks+0x24>)
    3288:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    328a:	2231      	movs	r2, #49	; 0x31
    328c:	5ca3      	ldrb	r3, [r4, r2]
    328e:	2102      	movs	r1, #2
    3290:	430b      	orrs	r3, r1
    3292:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    3294:	bd10      	pop	{r4, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	200002e8 	.word	0x200002e8
    329c:	0000309d 	.word	0x0000309d
    32a0:	00001681 	.word	0x00001681

000032a4 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    32a4:	b510      	push	{r4, lr}
    32a6:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    32a8:	4668      	mov	r0, sp
    32aa:	4b16      	ldr	r3, [pc, #88]	; (3304 <configure_adc+0x60>)
    32ac:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    32ae:	2301      	movs	r3, #1
    32b0:	466a      	mov	r2, sp
    32b2:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    32b4:	2380      	movs	r3, #128	; 0x80
    32b6:	009b      	lsls	r3, r3, #2
    32b8:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    32ba:	2300      	movs	r3, #0
    32bc:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    32be:	3318      	adds	r3, #24
    32c0:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    32c2:	23c0      	movs	r3, #192	; 0xc0
    32c4:	015b      	lsls	r3, r3, #5
    32c6:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    32c8:	4c0f      	ldr	r4, [pc, #60]	; (3308 <configure_adc+0x64>)
    32ca:	4910      	ldr	r1, [pc, #64]	; (330c <configure_adc+0x68>)
    32cc:	0020      	movs	r0, r4
    32ce:	4b10      	ldr	r3, [pc, #64]	; (3310 <configure_adc+0x6c>)
    32d0:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    32d2:	6822      	ldr	r2, [r4, #0]
    32d4:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    32d6:	b25b      	sxtb	r3, r3
    32d8:	2b00      	cmp	r3, #0
    32da:	dbfb      	blt.n	32d4 <configure_adc+0x30>
    32dc:	2180      	movs	r1, #128	; 0x80
    32de:	0409      	lsls	r1, r1, #16
    32e0:	4b0c      	ldr	r3, [pc, #48]	; (3314 <configure_adc+0x70>)
    32e2:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    32e4:	230f      	movs	r3, #15
    32e6:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    32e8:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    32ea:	7813      	ldrb	r3, [r2, #0]
    32ec:	2102      	movs	r1, #2
    32ee:	430b      	orrs	r3, r1
    32f0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    32f2:	4b05      	ldr	r3, [pc, #20]	; (3308 <configure_adc+0x64>)
    32f4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    32f6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    32f8:	b25b      	sxtb	r3, r3
    32fa:	2b00      	cmp	r3, #0
    32fc:	dbfb      	blt.n	32f6 <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    32fe:	b00c      	add	sp, #48	; 0x30
    3300:	bd10      	pop	{r4, pc}
    3302:	46c0      	nop			; (mov r8, r8)
    3304:	000008cd 	.word	0x000008cd
    3308:	20000aac 	.word	0x20000aac
    330c:	42004000 	.word	0x42004000
    3310:	00000911 	.word	0x00000911
    3314:	e000e100 	.word	0xe000e100

00003318 <setupBoard>:


void setupBoard(void)
{
    3318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    331a:	2000      	movs	r0, #0
    331c:	4b31      	ldr	r3, [pc, #196]	; (33e4 <setupBoard+0xcc>)
    331e:	4798      	blx	r3
    3320:	b287      	uxth	r7, r0
	uint32_t randomSeed = 0;

	system_init();
    3322:	4b31      	ldr	r3, [pc, #196]	; (33e8 <setupBoard+0xd0>)
    3324:	4798      	blx	r3
	
	configure_adc();
    3326:	4b31      	ldr	r3, [pc, #196]	; (33ec <setupBoard+0xd4>)
    3328:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    332a:	4b31      	ldr	r3, [pc, #196]	; (33f0 <setupBoard+0xd8>)
    332c:	6819      	ldr	r1, [r3, #0]
    332e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3330:	b25b      	sxtb	r3, r3
    3332:	2b00      	cmp	r3, #0
    3334:	dbfb      	blt.n	332e <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3336:	7b0b      	ldrb	r3, [r1, #12]
    3338:	2202      	movs	r2, #2
    333a:	4313      	orrs	r3, r2
    333c:	730b      	strb	r3, [r1, #12]
    333e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3340:	b25b      	sxtb	r3, r3
    3342:	2b00      	cmp	r3, #0
    3344:	dbfb      	blt.n	333e <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3346:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3348:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    334a:	2502      	movs	r5, #2
    334c:	e001      	b.n	3352 <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    334e:	4214      	tst	r4, r2
    3350:	d10a      	bne.n	3368 <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3352:	7e0b      	ldrb	r3, [r1, #24]
    3354:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3356:	0022      	movs	r2, r4
    3358:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    335a:	421e      	tst	r6, r3
    335c:	d000      	beq.n	3360 <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    335e:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3360:	421d      	tst	r5, r3
    3362:	d0f4      	beq.n	334e <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    3364:	4332      	orrs	r2, r6
    3366:	e7f2      	b.n	334e <setupBoard+0x36>
    3368:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    336a:	b25b      	sxtb	r3, r3
    336c:	2b00      	cmp	r3, #0
    336e:	dbfb      	blt.n	3368 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    3370:	8b48      	ldrh	r0, [r1, #26]
    3372:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    3374:	2301      	movs	r3, #1
    3376:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3378:	7e0a      	ldrb	r2, [r1, #24]
    337a:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    337c:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    337e:	0754      	lsls	r4, r2, #29
    3380:	d501      	bpl.n	3386 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    3382:	2402      	movs	r4, #2
    3384:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3386:	0792      	lsls	r2, r2, #30
    3388:	d501      	bpl.n	338e <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    338a:	2204      	movs	r2, #4
    338c:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    338e:	075b      	lsls	r3, r3, #29
    3390:	d501      	bpl.n	3396 <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    3392:	2302      	movs	r3, #2
    3394:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    3396:	4078      	eors	r0, r7
    3398:	4b16      	ldr	r3, [pc, #88]	; (33f4 <setupBoard+0xdc>)
    339a:	4798      	blx	r3
	
	delay_init();
    339c:	4b16      	ldr	r3, [pc, #88]	; (33f8 <setupBoard+0xe0>)
    339e:	4798      	blx	r3
	
	conf_systick();
    33a0:	4c16      	ldr	r4, [pc, #88]	; (33fc <setupBoard+0xe4>)
    33a2:	47a0      	blx	r4

	//configure_usart_USB();
	
	configure_usart();
    33a4:	4b16      	ldr	r3, [pc, #88]	; (3400 <setupBoard+0xe8>)
    33a6:	4798      	blx	r3
	configure_usart_callbacks();
    33a8:	4b16      	ldr	r3, [pc, #88]	; (3404 <setupBoard+0xec>)
    33aa:	4798      	blx	r3
	cpu_irq_enable();
    33ac:	2201      	movs	r2, #1
    33ae:	4b16      	ldr	r3, [pc, #88]	; (3408 <setupBoard+0xf0>)
    33b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    33b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    33b6:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    33b8:	4914      	ldr	r1, [pc, #80]	; (340c <setupBoard+0xf4>)
    33ba:	4815      	ldr	r0, [pc, #84]	; (3410 <setupBoard+0xf8>)
    33bc:	4b15      	ldr	r3, [pc, #84]	; (3414 <setupBoard+0xfc>)
    33be:	4798      	blx	r3

	printf("\n\rSerial OK 9600 8N1\n\r");
    33c0:	4815      	ldr	r0, [pc, #84]	; (3418 <setupBoard+0x100>)
    33c2:	4b16      	ldr	r3, [pc, #88]	; (341c <setupBoard+0x104>)
    33c4:	4798      	blx	r3

	
	InitLCD();
    33c6:	4b16      	ldr	r3, [pc, #88]	; (3420 <setupBoard+0x108>)
    33c8:	4798      	blx	r3
	splashScreen();
    33ca:	4b16      	ldr	r3, [pc, #88]	; (3424 <setupBoard+0x10c>)
    33cc:	4798      	blx	r3
			
	conf_systick();
    33ce:	47a0      	blx	r4

	xCharPos=0;
    33d0:	2300      	movs	r3, #0
    33d2:	4a15      	ldr	r2, [pc, #84]	; (3428 <setupBoard+0x110>)
    33d4:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    33d6:	4a15      	ldr	r2, [pc, #84]	; (342c <setupBoard+0x114>)
    33d8:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    33da:	20ff      	movs	r0, #255	; 0xff
    33dc:	4b14      	ldr	r3, [pc, #80]	; (3430 <setupBoard+0x118>)
    33de:	4798      	blx	r3
}
    33e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	00001d79 	.word	0x00001d79
    33e8:	00001fbd 	.word	0x00001fbd
    33ec:	000032a5 	.word	0x000032a5
    33f0:	20000aac 	.word	0x20000aac
    33f4:	00003a55 	.word	0x00003a55
    33f8:	000007b9 	.word	0x000007b9
    33fc:	00003121 	.word	0x00003121
    3400:	00003175 	.word	0x00003175
    3404:	0000327d 	.word	0x0000327d
    3408:	20000008 	.word	0x20000008
    340c:	20000aa8 	.word	0x20000aa8
    3410:	200002e8 	.word	0x200002e8
    3414:	00001699 	.word	0x00001699
    3418:	00006cf0 	.word	0x00006cf0
    341c:	000039f9 	.word	0x000039f9
    3420:	00002e51 	.word	0x00002e51
    3424:	00000581 	.word	0x00000581
    3428:	200002a4 	.word	0x200002a4
    342c:	200002a6 	.word	0x200002a6
    3430:	000021a1 	.word	0x000021a1

00003434 <main>:
{
    3434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    3436:	4b20      	ldr	r3, [pc, #128]	; (34b8 <main+0x84>)
    3438:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    343a:	200a      	movs	r0, #10
    343c:	4b1f      	ldr	r3, [pc, #124]	; (34bc <main+0x88>)
    343e:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    3440:	210a      	movs	r1, #10
    3442:	4b1f      	ldr	r3, [pc, #124]	; (34c0 <main+0x8c>)
    3444:	4798      	blx	r3
    3446:	4b1f      	ldr	r3, [pc, #124]	; (34c4 <main+0x90>)
    3448:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    344a:	4f1f      	ldr	r7, [pc, #124]	; (34c8 <main+0x94>)
    344c:	4e1f      	ldr	r6, [pc, #124]	; (34cc <main+0x98>)
    344e:	4d20      	ldr	r5, [pc, #128]	; (34d0 <main+0x9c>)
    3450:	e015      	b.n	347e <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3452:	21c8      	movs	r1, #200	; 0xc8
    3454:	0020      	movs	r0, r4
    3456:	4b1d      	ldr	r3, [pc, #116]	; (34cc <main+0x98>)
    3458:	4798      	blx	r3
    345a:	b289      	uxth	r1, r1
    345c:	2900      	cmp	r1, #0
    345e:	d10e      	bne.n	347e <main+0x4a>
    3460:	4b1c      	ldr	r3, [pc, #112]	; (34d4 <main+0xa0>)
    3462:	781b      	ldrb	r3, [r3, #0]
    3464:	2b00      	cmp	r3, #0
    3466:	d10a      	bne.n	347e <main+0x4a>
			funcLock = true;
    3468:	4c1a      	ldr	r4, [pc, #104]	; (34d4 <main+0xa0>)
    346a:	2301      	movs	r3, #1
    346c:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    346e:	4b1a      	ldr	r3, [pc, #104]	; (34d8 <main+0xa4>)
    3470:	4798      	blx	r3
			printKeyboardBuffer();
    3472:	4b1a      	ldr	r3, [pc, #104]	; (34dc <main+0xa8>)
    3474:	4798      	blx	r3
			parseRXBuffer();
    3476:	4b1a      	ldr	r3, [pc, #104]	; (34e0 <main+0xac>)
    3478:	4798      	blx	r3
			funcLock = false;
    347a:	2300      	movs	r3, #0
    347c:	7023      	strb	r3, [r4, #0]
		__WFI();
    347e:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3480:	883c      	ldrh	r4, [r7, #0]
    3482:	0029      	movs	r1, r5
    3484:	0020      	movs	r0, r4
    3486:	47b0      	blx	r6
    3488:	b289      	uxth	r1, r1
    348a:	2900      	cmp	r1, #0
    348c:	d1e1      	bne.n	3452 <main+0x1e>
    348e:	4b11      	ldr	r3, [pc, #68]	; (34d4 <main+0xa0>)
    3490:	781b      	ldrb	r3, [r3, #0]
    3492:	2b00      	cmp	r3, #0
    3494:	d1f3      	bne.n	347e <main+0x4a>
			funcLock = true;
    3496:	4c0f      	ldr	r4, [pc, #60]	; (34d4 <main+0xa0>)
    3498:	3301      	adds	r3, #1
    349a:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    349c:	4b11      	ldr	r3, [pc, #68]	; (34e4 <main+0xb0>)
    349e:	4798      	blx	r3
			funcLock = false;
    34a0:	2300      	movs	r3, #0
    34a2:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    34a4:	4b08      	ldr	r3, [pc, #32]	; (34c8 <main+0x94>)
    34a6:	8818      	ldrh	r0, [r3, #0]
    34a8:	21c8      	movs	r1, #200	; 0xc8
    34aa:	4b08      	ldr	r3, [pc, #32]	; (34cc <main+0x98>)
    34ac:	4798      	blx	r3
    34ae:	b289      	uxth	r1, r1
    34b0:	2900      	cmp	r1, #0
    34b2:	d0d9      	beq.n	3468 <main+0x34>
    34b4:	e7e3      	b.n	347e <main+0x4a>
    34b6:	46c0      	nop			; (mov r8, r8)
    34b8:	00003319 	.word	0x00003319
    34bc:	00003871 	.word	0x00003871
    34c0:	00000115 	.word	0x00000115
    34c4:	200002bc 	.word	0x200002bc
    34c8:	200002aa 	.word	0x200002aa
    34cc:	000035f5 	.word	0x000035f5
    34d0:	00003fff 	.word	0x00003fff
    34d4:	200002a9 	.word	0x200002a9
    34d8:	0000299d 	.word	0x0000299d
    34dc:	00002679 	.word	0x00002679
    34e0:	00000765 	.word	0x00000765
    34e4:	00002289 	.word	0x00002289

000034e8 <__udivsi3>:
    34e8:	2200      	movs	r2, #0
    34ea:	0843      	lsrs	r3, r0, #1
    34ec:	428b      	cmp	r3, r1
    34ee:	d374      	bcc.n	35da <__udivsi3+0xf2>
    34f0:	0903      	lsrs	r3, r0, #4
    34f2:	428b      	cmp	r3, r1
    34f4:	d35f      	bcc.n	35b6 <__udivsi3+0xce>
    34f6:	0a03      	lsrs	r3, r0, #8
    34f8:	428b      	cmp	r3, r1
    34fa:	d344      	bcc.n	3586 <__udivsi3+0x9e>
    34fc:	0b03      	lsrs	r3, r0, #12
    34fe:	428b      	cmp	r3, r1
    3500:	d328      	bcc.n	3554 <__udivsi3+0x6c>
    3502:	0c03      	lsrs	r3, r0, #16
    3504:	428b      	cmp	r3, r1
    3506:	d30d      	bcc.n	3524 <__udivsi3+0x3c>
    3508:	22ff      	movs	r2, #255	; 0xff
    350a:	0209      	lsls	r1, r1, #8
    350c:	ba12      	rev	r2, r2
    350e:	0c03      	lsrs	r3, r0, #16
    3510:	428b      	cmp	r3, r1
    3512:	d302      	bcc.n	351a <__udivsi3+0x32>
    3514:	1212      	asrs	r2, r2, #8
    3516:	0209      	lsls	r1, r1, #8
    3518:	d065      	beq.n	35e6 <__udivsi3+0xfe>
    351a:	0b03      	lsrs	r3, r0, #12
    351c:	428b      	cmp	r3, r1
    351e:	d319      	bcc.n	3554 <__udivsi3+0x6c>
    3520:	e000      	b.n	3524 <__udivsi3+0x3c>
    3522:	0a09      	lsrs	r1, r1, #8
    3524:	0bc3      	lsrs	r3, r0, #15
    3526:	428b      	cmp	r3, r1
    3528:	d301      	bcc.n	352e <__udivsi3+0x46>
    352a:	03cb      	lsls	r3, r1, #15
    352c:	1ac0      	subs	r0, r0, r3
    352e:	4152      	adcs	r2, r2
    3530:	0b83      	lsrs	r3, r0, #14
    3532:	428b      	cmp	r3, r1
    3534:	d301      	bcc.n	353a <__udivsi3+0x52>
    3536:	038b      	lsls	r3, r1, #14
    3538:	1ac0      	subs	r0, r0, r3
    353a:	4152      	adcs	r2, r2
    353c:	0b43      	lsrs	r3, r0, #13
    353e:	428b      	cmp	r3, r1
    3540:	d301      	bcc.n	3546 <__udivsi3+0x5e>
    3542:	034b      	lsls	r3, r1, #13
    3544:	1ac0      	subs	r0, r0, r3
    3546:	4152      	adcs	r2, r2
    3548:	0b03      	lsrs	r3, r0, #12
    354a:	428b      	cmp	r3, r1
    354c:	d301      	bcc.n	3552 <__udivsi3+0x6a>
    354e:	030b      	lsls	r3, r1, #12
    3550:	1ac0      	subs	r0, r0, r3
    3552:	4152      	adcs	r2, r2
    3554:	0ac3      	lsrs	r3, r0, #11
    3556:	428b      	cmp	r3, r1
    3558:	d301      	bcc.n	355e <__udivsi3+0x76>
    355a:	02cb      	lsls	r3, r1, #11
    355c:	1ac0      	subs	r0, r0, r3
    355e:	4152      	adcs	r2, r2
    3560:	0a83      	lsrs	r3, r0, #10
    3562:	428b      	cmp	r3, r1
    3564:	d301      	bcc.n	356a <__udivsi3+0x82>
    3566:	028b      	lsls	r3, r1, #10
    3568:	1ac0      	subs	r0, r0, r3
    356a:	4152      	adcs	r2, r2
    356c:	0a43      	lsrs	r3, r0, #9
    356e:	428b      	cmp	r3, r1
    3570:	d301      	bcc.n	3576 <__udivsi3+0x8e>
    3572:	024b      	lsls	r3, r1, #9
    3574:	1ac0      	subs	r0, r0, r3
    3576:	4152      	adcs	r2, r2
    3578:	0a03      	lsrs	r3, r0, #8
    357a:	428b      	cmp	r3, r1
    357c:	d301      	bcc.n	3582 <__udivsi3+0x9a>
    357e:	020b      	lsls	r3, r1, #8
    3580:	1ac0      	subs	r0, r0, r3
    3582:	4152      	adcs	r2, r2
    3584:	d2cd      	bcs.n	3522 <__udivsi3+0x3a>
    3586:	09c3      	lsrs	r3, r0, #7
    3588:	428b      	cmp	r3, r1
    358a:	d301      	bcc.n	3590 <__udivsi3+0xa8>
    358c:	01cb      	lsls	r3, r1, #7
    358e:	1ac0      	subs	r0, r0, r3
    3590:	4152      	adcs	r2, r2
    3592:	0983      	lsrs	r3, r0, #6
    3594:	428b      	cmp	r3, r1
    3596:	d301      	bcc.n	359c <__udivsi3+0xb4>
    3598:	018b      	lsls	r3, r1, #6
    359a:	1ac0      	subs	r0, r0, r3
    359c:	4152      	adcs	r2, r2
    359e:	0943      	lsrs	r3, r0, #5
    35a0:	428b      	cmp	r3, r1
    35a2:	d301      	bcc.n	35a8 <__udivsi3+0xc0>
    35a4:	014b      	lsls	r3, r1, #5
    35a6:	1ac0      	subs	r0, r0, r3
    35a8:	4152      	adcs	r2, r2
    35aa:	0903      	lsrs	r3, r0, #4
    35ac:	428b      	cmp	r3, r1
    35ae:	d301      	bcc.n	35b4 <__udivsi3+0xcc>
    35b0:	010b      	lsls	r3, r1, #4
    35b2:	1ac0      	subs	r0, r0, r3
    35b4:	4152      	adcs	r2, r2
    35b6:	08c3      	lsrs	r3, r0, #3
    35b8:	428b      	cmp	r3, r1
    35ba:	d301      	bcc.n	35c0 <__udivsi3+0xd8>
    35bc:	00cb      	lsls	r3, r1, #3
    35be:	1ac0      	subs	r0, r0, r3
    35c0:	4152      	adcs	r2, r2
    35c2:	0883      	lsrs	r3, r0, #2
    35c4:	428b      	cmp	r3, r1
    35c6:	d301      	bcc.n	35cc <__udivsi3+0xe4>
    35c8:	008b      	lsls	r3, r1, #2
    35ca:	1ac0      	subs	r0, r0, r3
    35cc:	4152      	adcs	r2, r2
    35ce:	0843      	lsrs	r3, r0, #1
    35d0:	428b      	cmp	r3, r1
    35d2:	d301      	bcc.n	35d8 <__udivsi3+0xf0>
    35d4:	004b      	lsls	r3, r1, #1
    35d6:	1ac0      	subs	r0, r0, r3
    35d8:	4152      	adcs	r2, r2
    35da:	1a41      	subs	r1, r0, r1
    35dc:	d200      	bcs.n	35e0 <__udivsi3+0xf8>
    35de:	4601      	mov	r1, r0
    35e0:	4152      	adcs	r2, r2
    35e2:	4610      	mov	r0, r2
    35e4:	4770      	bx	lr
    35e6:	e7ff      	b.n	35e8 <__udivsi3+0x100>
    35e8:	b501      	push	{r0, lr}
    35ea:	2000      	movs	r0, #0
    35ec:	f000 f8f0 	bl	37d0 <__aeabi_idiv0>
    35f0:	bd02      	pop	{r1, pc}
    35f2:	46c0      	nop			; (mov r8, r8)

000035f4 <__aeabi_uidivmod>:
    35f4:	2900      	cmp	r1, #0
    35f6:	d0f7      	beq.n	35e8 <__udivsi3+0x100>
    35f8:	e776      	b.n	34e8 <__udivsi3>
    35fa:	4770      	bx	lr

000035fc <__divsi3>:
    35fc:	4603      	mov	r3, r0
    35fe:	430b      	orrs	r3, r1
    3600:	d47f      	bmi.n	3702 <__divsi3+0x106>
    3602:	2200      	movs	r2, #0
    3604:	0843      	lsrs	r3, r0, #1
    3606:	428b      	cmp	r3, r1
    3608:	d374      	bcc.n	36f4 <__divsi3+0xf8>
    360a:	0903      	lsrs	r3, r0, #4
    360c:	428b      	cmp	r3, r1
    360e:	d35f      	bcc.n	36d0 <__divsi3+0xd4>
    3610:	0a03      	lsrs	r3, r0, #8
    3612:	428b      	cmp	r3, r1
    3614:	d344      	bcc.n	36a0 <__divsi3+0xa4>
    3616:	0b03      	lsrs	r3, r0, #12
    3618:	428b      	cmp	r3, r1
    361a:	d328      	bcc.n	366e <__divsi3+0x72>
    361c:	0c03      	lsrs	r3, r0, #16
    361e:	428b      	cmp	r3, r1
    3620:	d30d      	bcc.n	363e <__divsi3+0x42>
    3622:	22ff      	movs	r2, #255	; 0xff
    3624:	0209      	lsls	r1, r1, #8
    3626:	ba12      	rev	r2, r2
    3628:	0c03      	lsrs	r3, r0, #16
    362a:	428b      	cmp	r3, r1
    362c:	d302      	bcc.n	3634 <__divsi3+0x38>
    362e:	1212      	asrs	r2, r2, #8
    3630:	0209      	lsls	r1, r1, #8
    3632:	d065      	beq.n	3700 <__divsi3+0x104>
    3634:	0b03      	lsrs	r3, r0, #12
    3636:	428b      	cmp	r3, r1
    3638:	d319      	bcc.n	366e <__divsi3+0x72>
    363a:	e000      	b.n	363e <__divsi3+0x42>
    363c:	0a09      	lsrs	r1, r1, #8
    363e:	0bc3      	lsrs	r3, r0, #15
    3640:	428b      	cmp	r3, r1
    3642:	d301      	bcc.n	3648 <__divsi3+0x4c>
    3644:	03cb      	lsls	r3, r1, #15
    3646:	1ac0      	subs	r0, r0, r3
    3648:	4152      	adcs	r2, r2
    364a:	0b83      	lsrs	r3, r0, #14
    364c:	428b      	cmp	r3, r1
    364e:	d301      	bcc.n	3654 <__divsi3+0x58>
    3650:	038b      	lsls	r3, r1, #14
    3652:	1ac0      	subs	r0, r0, r3
    3654:	4152      	adcs	r2, r2
    3656:	0b43      	lsrs	r3, r0, #13
    3658:	428b      	cmp	r3, r1
    365a:	d301      	bcc.n	3660 <__divsi3+0x64>
    365c:	034b      	lsls	r3, r1, #13
    365e:	1ac0      	subs	r0, r0, r3
    3660:	4152      	adcs	r2, r2
    3662:	0b03      	lsrs	r3, r0, #12
    3664:	428b      	cmp	r3, r1
    3666:	d301      	bcc.n	366c <__divsi3+0x70>
    3668:	030b      	lsls	r3, r1, #12
    366a:	1ac0      	subs	r0, r0, r3
    366c:	4152      	adcs	r2, r2
    366e:	0ac3      	lsrs	r3, r0, #11
    3670:	428b      	cmp	r3, r1
    3672:	d301      	bcc.n	3678 <__divsi3+0x7c>
    3674:	02cb      	lsls	r3, r1, #11
    3676:	1ac0      	subs	r0, r0, r3
    3678:	4152      	adcs	r2, r2
    367a:	0a83      	lsrs	r3, r0, #10
    367c:	428b      	cmp	r3, r1
    367e:	d301      	bcc.n	3684 <__divsi3+0x88>
    3680:	028b      	lsls	r3, r1, #10
    3682:	1ac0      	subs	r0, r0, r3
    3684:	4152      	adcs	r2, r2
    3686:	0a43      	lsrs	r3, r0, #9
    3688:	428b      	cmp	r3, r1
    368a:	d301      	bcc.n	3690 <__divsi3+0x94>
    368c:	024b      	lsls	r3, r1, #9
    368e:	1ac0      	subs	r0, r0, r3
    3690:	4152      	adcs	r2, r2
    3692:	0a03      	lsrs	r3, r0, #8
    3694:	428b      	cmp	r3, r1
    3696:	d301      	bcc.n	369c <__divsi3+0xa0>
    3698:	020b      	lsls	r3, r1, #8
    369a:	1ac0      	subs	r0, r0, r3
    369c:	4152      	adcs	r2, r2
    369e:	d2cd      	bcs.n	363c <__divsi3+0x40>
    36a0:	09c3      	lsrs	r3, r0, #7
    36a2:	428b      	cmp	r3, r1
    36a4:	d301      	bcc.n	36aa <__divsi3+0xae>
    36a6:	01cb      	lsls	r3, r1, #7
    36a8:	1ac0      	subs	r0, r0, r3
    36aa:	4152      	adcs	r2, r2
    36ac:	0983      	lsrs	r3, r0, #6
    36ae:	428b      	cmp	r3, r1
    36b0:	d301      	bcc.n	36b6 <__divsi3+0xba>
    36b2:	018b      	lsls	r3, r1, #6
    36b4:	1ac0      	subs	r0, r0, r3
    36b6:	4152      	adcs	r2, r2
    36b8:	0943      	lsrs	r3, r0, #5
    36ba:	428b      	cmp	r3, r1
    36bc:	d301      	bcc.n	36c2 <__divsi3+0xc6>
    36be:	014b      	lsls	r3, r1, #5
    36c0:	1ac0      	subs	r0, r0, r3
    36c2:	4152      	adcs	r2, r2
    36c4:	0903      	lsrs	r3, r0, #4
    36c6:	428b      	cmp	r3, r1
    36c8:	d301      	bcc.n	36ce <__divsi3+0xd2>
    36ca:	010b      	lsls	r3, r1, #4
    36cc:	1ac0      	subs	r0, r0, r3
    36ce:	4152      	adcs	r2, r2
    36d0:	08c3      	lsrs	r3, r0, #3
    36d2:	428b      	cmp	r3, r1
    36d4:	d301      	bcc.n	36da <__divsi3+0xde>
    36d6:	00cb      	lsls	r3, r1, #3
    36d8:	1ac0      	subs	r0, r0, r3
    36da:	4152      	adcs	r2, r2
    36dc:	0883      	lsrs	r3, r0, #2
    36de:	428b      	cmp	r3, r1
    36e0:	d301      	bcc.n	36e6 <__divsi3+0xea>
    36e2:	008b      	lsls	r3, r1, #2
    36e4:	1ac0      	subs	r0, r0, r3
    36e6:	4152      	adcs	r2, r2
    36e8:	0843      	lsrs	r3, r0, #1
    36ea:	428b      	cmp	r3, r1
    36ec:	d301      	bcc.n	36f2 <__divsi3+0xf6>
    36ee:	004b      	lsls	r3, r1, #1
    36f0:	1ac0      	subs	r0, r0, r3
    36f2:	4152      	adcs	r2, r2
    36f4:	1a41      	subs	r1, r0, r1
    36f6:	d200      	bcs.n	36fa <__divsi3+0xfe>
    36f8:	4601      	mov	r1, r0
    36fa:	4152      	adcs	r2, r2
    36fc:	4610      	mov	r0, r2
    36fe:	4770      	bx	lr
    3700:	e05d      	b.n	37be <__divsi3+0x1c2>
    3702:	0fca      	lsrs	r2, r1, #31
    3704:	d000      	beq.n	3708 <__divsi3+0x10c>
    3706:	4249      	negs	r1, r1
    3708:	1003      	asrs	r3, r0, #32
    370a:	d300      	bcc.n	370e <__divsi3+0x112>
    370c:	4240      	negs	r0, r0
    370e:	4053      	eors	r3, r2
    3710:	2200      	movs	r2, #0
    3712:	469c      	mov	ip, r3
    3714:	0903      	lsrs	r3, r0, #4
    3716:	428b      	cmp	r3, r1
    3718:	d32d      	bcc.n	3776 <__divsi3+0x17a>
    371a:	0a03      	lsrs	r3, r0, #8
    371c:	428b      	cmp	r3, r1
    371e:	d312      	bcc.n	3746 <__divsi3+0x14a>
    3720:	22fc      	movs	r2, #252	; 0xfc
    3722:	0189      	lsls	r1, r1, #6
    3724:	ba12      	rev	r2, r2
    3726:	0a03      	lsrs	r3, r0, #8
    3728:	428b      	cmp	r3, r1
    372a:	d30c      	bcc.n	3746 <__divsi3+0x14a>
    372c:	0189      	lsls	r1, r1, #6
    372e:	1192      	asrs	r2, r2, #6
    3730:	428b      	cmp	r3, r1
    3732:	d308      	bcc.n	3746 <__divsi3+0x14a>
    3734:	0189      	lsls	r1, r1, #6
    3736:	1192      	asrs	r2, r2, #6
    3738:	428b      	cmp	r3, r1
    373a:	d304      	bcc.n	3746 <__divsi3+0x14a>
    373c:	0189      	lsls	r1, r1, #6
    373e:	d03a      	beq.n	37b6 <__divsi3+0x1ba>
    3740:	1192      	asrs	r2, r2, #6
    3742:	e000      	b.n	3746 <__divsi3+0x14a>
    3744:	0989      	lsrs	r1, r1, #6
    3746:	09c3      	lsrs	r3, r0, #7
    3748:	428b      	cmp	r3, r1
    374a:	d301      	bcc.n	3750 <__divsi3+0x154>
    374c:	01cb      	lsls	r3, r1, #7
    374e:	1ac0      	subs	r0, r0, r3
    3750:	4152      	adcs	r2, r2
    3752:	0983      	lsrs	r3, r0, #6
    3754:	428b      	cmp	r3, r1
    3756:	d301      	bcc.n	375c <__divsi3+0x160>
    3758:	018b      	lsls	r3, r1, #6
    375a:	1ac0      	subs	r0, r0, r3
    375c:	4152      	adcs	r2, r2
    375e:	0943      	lsrs	r3, r0, #5
    3760:	428b      	cmp	r3, r1
    3762:	d301      	bcc.n	3768 <__divsi3+0x16c>
    3764:	014b      	lsls	r3, r1, #5
    3766:	1ac0      	subs	r0, r0, r3
    3768:	4152      	adcs	r2, r2
    376a:	0903      	lsrs	r3, r0, #4
    376c:	428b      	cmp	r3, r1
    376e:	d301      	bcc.n	3774 <__divsi3+0x178>
    3770:	010b      	lsls	r3, r1, #4
    3772:	1ac0      	subs	r0, r0, r3
    3774:	4152      	adcs	r2, r2
    3776:	08c3      	lsrs	r3, r0, #3
    3778:	428b      	cmp	r3, r1
    377a:	d301      	bcc.n	3780 <__divsi3+0x184>
    377c:	00cb      	lsls	r3, r1, #3
    377e:	1ac0      	subs	r0, r0, r3
    3780:	4152      	adcs	r2, r2
    3782:	0883      	lsrs	r3, r0, #2
    3784:	428b      	cmp	r3, r1
    3786:	d301      	bcc.n	378c <__divsi3+0x190>
    3788:	008b      	lsls	r3, r1, #2
    378a:	1ac0      	subs	r0, r0, r3
    378c:	4152      	adcs	r2, r2
    378e:	d2d9      	bcs.n	3744 <__divsi3+0x148>
    3790:	0843      	lsrs	r3, r0, #1
    3792:	428b      	cmp	r3, r1
    3794:	d301      	bcc.n	379a <__divsi3+0x19e>
    3796:	004b      	lsls	r3, r1, #1
    3798:	1ac0      	subs	r0, r0, r3
    379a:	4152      	adcs	r2, r2
    379c:	1a41      	subs	r1, r0, r1
    379e:	d200      	bcs.n	37a2 <__divsi3+0x1a6>
    37a0:	4601      	mov	r1, r0
    37a2:	4663      	mov	r3, ip
    37a4:	4152      	adcs	r2, r2
    37a6:	105b      	asrs	r3, r3, #1
    37a8:	4610      	mov	r0, r2
    37aa:	d301      	bcc.n	37b0 <__divsi3+0x1b4>
    37ac:	4240      	negs	r0, r0
    37ae:	2b00      	cmp	r3, #0
    37b0:	d500      	bpl.n	37b4 <__divsi3+0x1b8>
    37b2:	4249      	negs	r1, r1
    37b4:	4770      	bx	lr
    37b6:	4663      	mov	r3, ip
    37b8:	105b      	asrs	r3, r3, #1
    37ba:	d300      	bcc.n	37be <__divsi3+0x1c2>
    37bc:	4240      	negs	r0, r0
    37be:	b501      	push	{r0, lr}
    37c0:	2000      	movs	r0, #0
    37c2:	f000 f805 	bl	37d0 <__aeabi_idiv0>
    37c6:	bd02      	pop	{r1, pc}

000037c8 <__aeabi_idivmod>:
    37c8:	2900      	cmp	r1, #0
    37ca:	d0f8      	beq.n	37be <__divsi3+0x1c2>
    37cc:	e716      	b.n	35fc <__divsi3>
    37ce:	4770      	bx	lr

000037d0 <__aeabi_idiv0>:
    37d0:	4770      	bx	lr
    37d2:	46c0      	nop			; (mov r8, r8)

000037d4 <__aeabi_lmul>:
    37d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37d6:	46ce      	mov	lr, r9
    37d8:	4647      	mov	r7, r8
    37da:	0415      	lsls	r5, r2, #16
    37dc:	0c2d      	lsrs	r5, r5, #16
    37de:	002e      	movs	r6, r5
    37e0:	b580      	push	{r7, lr}
    37e2:	0407      	lsls	r7, r0, #16
    37e4:	0c14      	lsrs	r4, r2, #16
    37e6:	0c3f      	lsrs	r7, r7, #16
    37e8:	4699      	mov	r9, r3
    37ea:	0c03      	lsrs	r3, r0, #16
    37ec:	437e      	muls	r6, r7
    37ee:	435d      	muls	r5, r3
    37f0:	4367      	muls	r7, r4
    37f2:	4363      	muls	r3, r4
    37f4:	197f      	adds	r7, r7, r5
    37f6:	0c34      	lsrs	r4, r6, #16
    37f8:	19e4      	adds	r4, r4, r7
    37fa:	469c      	mov	ip, r3
    37fc:	42a5      	cmp	r5, r4
    37fe:	d903      	bls.n	3808 <__aeabi_lmul+0x34>
    3800:	2380      	movs	r3, #128	; 0x80
    3802:	025b      	lsls	r3, r3, #9
    3804:	4698      	mov	r8, r3
    3806:	44c4      	add	ip, r8
    3808:	464b      	mov	r3, r9
    380a:	4351      	muls	r1, r2
    380c:	4343      	muls	r3, r0
    380e:	0436      	lsls	r6, r6, #16
    3810:	0c36      	lsrs	r6, r6, #16
    3812:	0c25      	lsrs	r5, r4, #16
    3814:	0424      	lsls	r4, r4, #16
    3816:	4465      	add	r5, ip
    3818:	19a4      	adds	r4, r4, r6
    381a:	1859      	adds	r1, r3, r1
    381c:	1949      	adds	r1, r1, r5
    381e:	0020      	movs	r0, r4
    3820:	bc0c      	pop	{r2, r3}
    3822:	4690      	mov	r8, r2
    3824:	4699      	mov	r9, r3
    3826:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003828 <__libc_init_array>:
    3828:	b570      	push	{r4, r5, r6, lr}
    382a:	2600      	movs	r6, #0
    382c:	4d0c      	ldr	r5, [pc, #48]	; (3860 <__libc_init_array+0x38>)
    382e:	4c0d      	ldr	r4, [pc, #52]	; (3864 <__libc_init_array+0x3c>)
    3830:	1b64      	subs	r4, r4, r5
    3832:	10a4      	asrs	r4, r4, #2
    3834:	42a6      	cmp	r6, r4
    3836:	d109      	bne.n	384c <__libc_init_array+0x24>
    3838:	2600      	movs	r6, #0
    383a:	f003 fab1 	bl	6da0 <_init>
    383e:	4d0a      	ldr	r5, [pc, #40]	; (3868 <__libc_init_array+0x40>)
    3840:	4c0a      	ldr	r4, [pc, #40]	; (386c <__libc_init_array+0x44>)
    3842:	1b64      	subs	r4, r4, r5
    3844:	10a4      	asrs	r4, r4, #2
    3846:	42a6      	cmp	r6, r4
    3848:	d105      	bne.n	3856 <__libc_init_array+0x2e>
    384a:	bd70      	pop	{r4, r5, r6, pc}
    384c:	00b3      	lsls	r3, r6, #2
    384e:	58eb      	ldr	r3, [r5, r3]
    3850:	4798      	blx	r3
    3852:	3601      	adds	r6, #1
    3854:	e7ee      	b.n	3834 <__libc_init_array+0xc>
    3856:	00b3      	lsls	r3, r6, #2
    3858:	58eb      	ldr	r3, [r5, r3]
    385a:	4798      	blx	r3
    385c:	3601      	adds	r6, #1
    385e:	e7f2      	b.n	3846 <__libc_init_array+0x1e>
    3860:	00006dac 	.word	0x00006dac
    3864:	00006dac 	.word	0x00006dac
    3868:	00006dac 	.word	0x00006dac
    386c:	00006db0 	.word	0x00006db0

00003870 <malloc>:
    3870:	b510      	push	{r4, lr}
    3872:	4b03      	ldr	r3, [pc, #12]	; (3880 <malloc+0x10>)
    3874:	0001      	movs	r1, r0
    3876:	6818      	ldr	r0, [r3, #0]
    3878:	f000 f860 	bl	393c <_malloc_r>
    387c:	bd10      	pop	{r4, pc}
    387e:	46c0      	nop			; (mov r8, r8)
    3880:	20000164 	.word	0x20000164

00003884 <memcpy>:
    3884:	2300      	movs	r3, #0
    3886:	b510      	push	{r4, lr}
    3888:	429a      	cmp	r2, r3
    388a:	d100      	bne.n	388e <memcpy+0xa>
    388c:	bd10      	pop	{r4, pc}
    388e:	5ccc      	ldrb	r4, [r1, r3]
    3890:	54c4      	strb	r4, [r0, r3]
    3892:	3301      	adds	r3, #1
    3894:	e7f8      	b.n	3888 <memcpy+0x4>

00003896 <memset>:
    3896:	0003      	movs	r3, r0
    3898:	1882      	adds	r2, r0, r2
    389a:	4293      	cmp	r3, r2
    389c:	d100      	bne.n	38a0 <memset+0xa>
    389e:	4770      	bx	lr
    38a0:	7019      	strb	r1, [r3, #0]
    38a2:	3301      	adds	r3, #1
    38a4:	e7f9      	b.n	389a <memset+0x4>
	...

000038a8 <_free_r>:
    38a8:	b570      	push	{r4, r5, r6, lr}
    38aa:	0005      	movs	r5, r0
    38ac:	2900      	cmp	r1, #0
    38ae:	d010      	beq.n	38d2 <_free_r+0x2a>
    38b0:	1f0c      	subs	r4, r1, #4
    38b2:	6823      	ldr	r3, [r4, #0]
    38b4:	2b00      	cmp	r3, #0
    38b6:	da00      	bge.n	38ba <_free_r+0x12>
    38b8:	18e4      	adds	r4, r4, r3
    38ba:	0028      	movs	r0, r5
    38bc:	f000 fbfe 	bl	40bc <__malloc_lock>
    38c0:	4a1d      	ldr	r2, [pc, #116]	; (3938 <_free_r+0x90>)
    38c2:	6813      	ldr	r3, [r2, #0]
    38c4:	2b00      	cmp	r3, #0
    38c6:	d105      	bne.n	38d4 <_free_r+0x2c>
    38c8:	6063      	str	r3, [r4, #4]
    38ca:	6014      	str	r4, [r2, #0]
    38cc:	0028      	movs	r0, r5
    38ce:	f000 fbf6 	bl	40be <__malloc_unlock>
    38d2:	bd70      	pop	{r4, r5, r6, pc}
    38d4:	42a3      	cmp	r3, r4
    38d6:	d909      	bls.n	38ec <_free_r+0x44>
    38d8:	6821      	ldr	r1, [r4, #0]
    38da:	1860      	adds	r0, r4, r1
    38dc:	4283      	cmp	r3, r0
    38de:	d1f3      	bne.n	38c8 <_free_r+0x20>
    38e0:	6818      	ldr	r0, [r3, #0]
    38e2:	685b      	ldr	r3, [r3, #4]
    38e4:	1841      	adds	r1, r0, r1
    38e6:	6021      	str	r1, [r4, #0]
    38e8:	e7ee      	b.n	38c8 <_free_r+0x20>
    38ea:	0013      	movs	r3, r2
    38ec:	685a      	ldr	r2, [r3, #4]
    38ee:	2a00      	cmp	r2, #0
    38f0:	d001      	beq.n	38f6 <_free_r+0x4e>
    38f2:	42a2      	cmp	r2, r4
    38f4:	d9f9      	bls.n	38ea <_free_r+0x42>
    38f6:	6819      	ldr	r1, [r3, #0]
    38f8:	1858      	adds	r0, r3, r1
    38fa:	42a0      	cmp	r0, r4
    38fc:	d10b      	bne.n	3916 <_free_r+0x6e>
    38fe:	6820      	ldr	r0, [r4, #0]
    3900:	1809      	adds	r1, r1, r0
    3902:	1858      	adds	r0, r3, r1
    3904:	6019      	str	r1, [r3, #0]
    3906:	4282      	cmp	r2, r0
    3908:	d1e0      	bne.n	38cc <_free_r+0x24>
    390a:	6810      	ldr	r0, [r2, #0]
    390c:	6852      	ldr	r2, [r2, #4]
    390e:	1841      	adds	r1, r0, r1
    3910:	6019      	str	r1, [r3, #0]
    3912:	605a      	str	r2, [r3, #4]
    3914:	e7da      	b.n	38cc <_free_r+0x24>
    3916:	42a0      	cmp	r0, r4
    3918:	d902      	bls.n	3920 <_free_r+0x78>
    391a:	230c      	movs	r3, #12
    391c:	602b      	str	r3, [r5, #0]
    391e:	e7d5      	b.n	38cc <_free_r+0x24>
    3920:	6821      	ldr	r1, [r4, #0]
    3922:	1860      	adds	r0, r4, r1
    3924:	4282      	cmp	r2, r0
    3926:	d103      	bne.n	3930 <_free_r+0x88>
    3928:	6810      	ldr	r0, [r2, #0]
    392a:	6852      	ldr	r2, [r2, #4]
    392c:	1841      	adds	r1, r0, r1
    392e:	6021      	str	r1, [r4, #0]
    3930:	6062      	str	r2, [r4, #4]
    3932:	605c      	str	r4, [r3, #4]
    3934:	e7ca      	b.n	38cc <_free_r+0x24>
    3936:	46c0      	nop			; (mov r8, r8)
    3938:	200002ac 	.word	0x200002ac

0000393c <_malloc_r>:
    393c:	2303      	movs	r3, #3
    393e:	b570      	push	{r4, r5, r6, lr}
    3940:	1ccd      	adds	r5, r1, #3
    3942:	439d      	bics	r5, r3
    3944:	3508      	adds	r5, #8
    3946:	0006      	movs	r6, r0
    3948:	2d0c      	cmp	r5, #12
    394a:	d21e      	bcs.n	398a <_malloc_r+0x4e>
    394c:	250c      	movs	r5, #12
    394e:	42a9      	cmp	r1, r5
    3950:	d81d      	bhi.n	398e <_malloc_r+0x52>
    3952:	0030      	movs	r0, r6
    3954:	f000 fbb2 	bl	40bc <__malloc_lock>
    3958:	4a25      	ldr	r2, [pc, #148]	; (39f0 <_malloc_r+0xb4>)
    395a:	6814      	ldr	r4, [r2, #0]
    395c:	0021      	movs	r1, r4
    395e:	2900      	cmp	r1, #0
    3960:	d119      	bne.n	3996 <_malloc_r+0x5a>
    3962:	4c24      	ldr	r4, [pc, #144]	; (39f4 <_malloc_r+0xb8>)
    3964:	6823      	ldr	r3, [r4, #0]
    3966:	2b00      	cmp	r3, #0
    3968:	d103      	bne.n	3972 <_malloc_r+0x36>
    396a:	0030      	movs	r0, r6
    396c:	f000 f8dc 	bl	3b28 <_sbrk_r>
    3970:	6020      	str	r0, [r4, #0]
    3972:	0029      	movs	r1, r5
    3974:	0030      	movs	r0, r6
    3976:	f000 f8d7 	bl	3b28 <_sbrk_r>
    397a:	1c43      	adds	r3, r0, #1
    397c:	d12c      	bne.n	39d8 <_malloc_r+0x9c>
    397e:	230c      	movs	r3, #12
    3980:	0030      	movs	r0, r6
    3982:	6033      	str	r3, [r6, #0]
    3984:	f000 fb9b 	bl	40be <__malloc_unlock>
    3988:	e003      	b.n	3992 <_malloc_r+0x56>
    398a:	2d00      	cmp	r5, #0
    398c:	dadf      	bge.n	394e <_malloc_r+0x12>
    398e:	230c      	movs	r3, #12
    3990:	6033      	str	r3, [r6, #0]
    3992:	2000      	movs	r0, #0
    3994:	bd70      	pop	{r4, r5, r6, pc}
    3996:	680b      	ldr	r3, [r1, #0]
    3998:	1b5b      	subs	r3, r3, r5
    399a:	d41a      	bmi.n	39d2 <_malloc_r+0x96>
    399c:	2b0b      	cmp	r3, #11
    399e:	d903      	bls.n	39a8 <_malloc_r+0x6c>
    39a0:	600b      	str	r3, [r1, #0]
    39a2:	18cc      	adds	r4, r1, r3
    39a4:	6025      	str	r5, [r4, #0]
    39a6:	e003      	b.n	39b0 <_malloc_r+0x74>
    39a8:	428c      	cmp	r4, r1
    39aa:	d10e      	bne.n	39ca <_malloc_r+0x8e>
    39ac:	6863      	ldr	r3, [r4, #4]
    39ae:	6013      	str	r3, [r2, #0]
    39b0:	0030      	movs	r0, r6
    39b2:	f000 fb84 	bl	40be <__malloc_unlock>
    39b6:	0020      	movs	r0, r4
    39b8:	2207      	movs	r2, #7
    39ba:	300b      	adds	r0, #11
    39bc:	1d23      	adds	r3, r4, #4
    39be:	4390      	bics	r0, r2
    39c0:	1ac3      	subs	r3, r0, r3
    39c2:	d0e7      	beq.n	3994 <_malloc_r+0x58>
    39c4:	425a      	negs	r2, r3
    39c6:	50e2      	str	r2, [r4, r3]
    39c8:	e7e4      	b.n	3994 <_malloc_r+0x58>
    39ca:	684b      	ldr	r3, [r1, #4]
    39cc:	6063      	str	r3, [r4, #4]
    39ce:	000c      	movs	r4, r1
    39d0:	e7ee      	b.n	39b0 <_malloc_r+0x74>
    39d2:	000c      	movs	r4, r1
    39d4:	6849      	ldr	r1, [r1, #4]
    39d6:	e7c2      	b.n	395e <_malloc_r+0x22>
    39d8:	2303      	movs	r3, #3
    39da:	1cc4      	adds	r4, r0, #3
    39dc:	439c      	bics	r4, r3
    39de:	42a0      	cmp	r0, r4
    39e0:	d0e0      	beq.n	39a4 <_malloc_r+0x68>
    39e2:	1a21      	subs	r1, r4, r0
    39e4:	0030      	movs	r0, r6
    39e6:	f000 f89f 	bl	3b28 <_sbrk_r>
    39ea:	1c43      	adds	r3, r0, #1
    39ec:	d1da      	bne.n	39a4 <_malloc_r+0x68>
    39ee:	e7c6      	b.n	397e <_malloc_r+0x42>
    39f0:	200002ac 	.word	0x200002ac
    39f4:	200002b0 	.word	0x200002b0

000039f8 <iprintf>:
    39f8:	b40f      	push	{r0, r1, r2, r3}
    39fa:	4b0b      	ldr	r3, [pc, #44]	; (3a28 <iprintf+0x30>)
    39fc:	b513      	push	{r0, r1, r4, lr}
    39fe:	681c      	ldr	r4, [r3, #0]
    3a00:	2c00      	cmp	r4, #0
    3a02:	d005      	beq.n	3a10 <iprintf+0x18>
    3a04:	69a3      	ldr	r3, [r4, #24]
    3a06:	2b00      	cmp	r3, #0
    3a08:	d102      	bne.n	3a10 <iprintf+0x18>
    3a0a:	0020      	movs	r0, r4
    3a0c:	f000 fa54 	bl	3eb8 <__sinit>
    3a10:	ab05      	add	r3, sp, #20
    3a12:	9a04      	ldr	r2, [sp, #16]
    3a14:	68a1      	ldr	r1, [r4, #8]
    3a16:	0020      	movs	r0, r4
    3a18:	9301      	str	r3, [sp, #4]
    3a1a:	f000 fb79 	bl	4110 <_vfiprintf_r>
    3a1e:	bc16      	pop	{r1, r2, r4}
    3a20:	bc08      	pop	{r3}
    3a22:	b004      	add	sp, #16
    3a24:	4718      	bx	r3
    3a26:	46c0      	nop			; (mov r8, r8)
    3a28:	20000164 	.word	0x20000164

00003a2c <putchar>:
    3a2c:	4b08      	ldr	r3, [pc, #32]	; (3a50 <putchar+0x24>)
    3a2e:	b570      	push	{r4, r5, r6, lr}
    3a30:	681c      	ldr	r4, [r3, #0]
    3a32:	0005      	movs	r5, r0
    3a34:	2c00      	cmp	r4, #0
    3a36:	d005      	beq.n	3a44 <putchar+0x18>
    3a38:	69a3      	ldr	r3, [r4, #24]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d102      	bne.n	3a44 <putchar+0x18>
    3a3e:	0020      	movs	r0, r4
    3a40:	f000 fa3a 	bl	3eb8 <__sinit>
    3a44:	0029      	movs	r1, r5
    3a46:	68a2      	ldr	r2, [r4, #8]
    3a48:	0020      	movs	r0, r4
    3a4a:	f000 fe05 	bl	4658 <_putc_r>
    3a4e:	bd70      	pop	{r4, r5, r6, pc}
    3a50:	20000164 	.word	0x20000164

00003a54 <srand>:
    3a54:	4b10      	ldr	r3, [pc, #64]	; (3a98 <srand+0x44>)
    3a56:	b570      	push	{r4, r5, r6, lr}
    3a58:	681c      	ldr	r4, [r3, #0]
    3a5a:	0005      	movs	r5, r0
    3a5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d115      	bne.n	3a8e <srand+0x3a>
    3a62:	2018      	movs	r0, #24
    3a64:	f7ff ff04 	bl	3870 <malloc>
    3a68:	4b0c      	ldr	r3, [pc, #48]	; (3a9c <srand+0x48>)
    3a6a:	63a0      	str	r0, [r4, #56]	; 0x38
    3a6c:	8003      	strh	r3, [r0, #0]
    3a6e:	4b0c      	ldr	r3, [pc, #48]	; (3aa0 <srand+0x4c>)
    3a70:	2201      	movs	r2, #1
    3a72:	8043      	strh	r3, [r0, #2]
    3a74:	4b0b      	ldr	r3, [pc, #44]	; (3aa4 <srand+0x50>)
    3a76:	8083      	strh	r3, [r0, #4]
    3a78:	4b0b      	ldr	r3, [pc, #44]	; (3aa8 <srand+0x54>)
    3a7a:	80c3      	strh	r3, [r0, #6]
    3a7c:	4b0b      	ldr	r3, [pc, #44]	; (3aac <srand+0x58>)
    3a7e:	8103      	strh	r3, [r0, #8]
    3a80:	2305      	movs	r3, #5
    3a82:	8143      	strh	r3, [r0, #10]
    3a84:	3306      	adds	r3, #6
    3a86:	8183      	strh	r3, [r0, #12]
    3a88:	2300      	movs	r3, #0
    3a8a:	6102      	str	r2, [r0, #16]
    3a8c:	6143      	str	r3, [r0, #20]
    3a8e:	2200      	movs	r2, #0
    3a90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3a92:	611d      	str	r5, [r3, #16]
    3a94:	615a      	str	r2, [r3, #20]
    3a96:	bd70      	pop	{r4, r5, r6, pc}
    3a98:	20000164 	.word	0x20000164
    3a9c:	0000330e 	.word	0x0000330e
    3aa0:	ffffabcd 	.word	0xffffabcd
    3aa4:	00001234 	.word	0x00001234
    3aa8:	ffffe66d 	.word	0xffffe66d
    3aac:	ffffdeec 	.word	0xffffdeec

00003ab0 <rand>:
    3ab0:	4b15      	ldr	r3, [pc, #84]	; (3b08 <rand+0x58>)
    3ab2:	b510      	push	{r4, lr}
    3ab4:	681c      	ldr	r4, [r3, #0]
    3ab6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3ab8:	2b00      	cmp	r3, #0
    3aba:	d115      	bne.n	3ae8 <rand+0x38>
    3abc:	2018      	movs	r0, #24
    3abe:	f7ff fed7 	bl	3870 <malloc>
    3ac2:	4b12      	ldr	r3, [pc, #72]	; (3b0c <rand+0x5c>)
    3ac4:	63a0      	str	r0, [r4, #56]	; 0x38
    3ac6:	8003      	strh	r3, [r0, #0]
    3ac8:	4b11      	ldr	r3, [pc, #68]	; (3b10 <rand+0x60>)
    3aca:	2201      	movs	r2, #1
    3acc:	8043      	strh	r3, [r0, #2]
    3ace:	4b11      	ldr	r3, [pc, #68]	; (3b14 <rand+0x64>)
    3ad0:	8083      	strh	r3, [r0, #4]
    3ad2:	4b11      	ldr	r3, [pc, #68]	; (3b18 <rand+0x68>)
    3ad4:	80c3      	strh	r3, [r0, #6]
    3ad6:	4b11      	ldr	r3, [pc, #68]	; (3b1c <rand+0x6c>)
    3ad8:	8103      	strh	r3, [r0, #8]
    3ada:	2305      	movs	r3, #5
    3adc:	8143      	strh	r3, [r0, #10]
    3ade:	3306      	adds	r3, #6
    3ae0:	8183      	strh	r3, [r0, #12]
    3ae2:	2300      	movs	r3, #0
    3ae4:	6102      	str	r2, [r0, #16]
    3ae6:	6143      	str	r3, [r0, #20]
    3ae8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    3aea:	4a0d      	ldr	r2, [pc, #52]	; (3b20 <rand+0x70>)
    3aec:	6920      	ldr	r0, [r4, #16]
    3aee:	6961      	ldr	r1, [r4, #20]
    3af0:	4b0c      	ldr	r3, [pc, #48]	; (3b24 <rand+0x74>)
    3af2:	f7ff fe6f 	bl	37d4 <__aeabi_lmul>
    3af6:	2201      	movs	r2, #1
    3af8:	2300      	movs	r3, #0
    3afa:	1880      	adds	r0, r0, r2
    3afc:	4159      	adcs	r1, r3
    3afe:	6120      	str	r0, [r4, #16]
    3b00:	6161      	str	r1, [r4, #20]
    3b02:	0048      	lsls	r0, r1, #1
    3b04:	0840      	lsrs	r0, r0, #1
    3b06:	bd10      	pop	{r4, pc}
    3b08:	20000164 	.word	0x20000164
    3b0c:	0000330e 	.word	0x0000330e
    3b10:	ffffabcd 	.word	0xffffabcd
    3b14:	00001234 	.word	0x00001234
    3b18:	ffffe66d 	.word	0xffffe66d
    3b1c:	ffffdeec 	.word	0xffffdeec
    3b20:	4c957f2d 	.word	0x4c957f2d
    3b24:	5851f42d 	.word	0x5851f42d

00003b28 <_sbrk_r>:
    3b28:	2300      	movs	r3, #0
    3b2a:	b570      	push	{r4, r5, r6, lr}
    3b2c:	4c06      	ldr	r4, [pc, #24]	; (3b48 <_sbrk_r+0x20>)
    3b2e:	0005      	movs	r5, r0
    3b30:	0008      	movs	r0, r1
    3b32:	6023      	str	r3, [r4, #0]
    3b34:	f7fe fb16 	bl	2164 <_sbrk>
    3b38:	1c43      	adds	r3, r0, #1
    3b3a:	d103      	bne.n	3b44 <_sbrk_r+0x1c>
    3b3c:	6823      	ldr	r3, [r4, #0]
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d000      	beq.n	3b44 <_sbrk_r+0x1c>
    3b42:	602b      	str	r3, [r5, #0]
    3b44:	bd70      	pop	{r4, r5, r6, pc}
    3b46:	46c0      	nop			; (mov r8, r8)
    3b48:	20000acc 	.word	0x20000acc

00003b4c <setbuf>:
    3b4c:	424a      	negs	r2, r1
    3b4e:	414a      	adcs	r2, r1
    3b50:	2380      	movs	r3, #128	; 0x80
    3b52:	b510      	push	{r4, lr}
    3b54:	0052      	lsls	r2, r2, #1
    3b56:	00db      	lsls	r3, r3, #3
    3b58:	f000 f802 	bl	3b60 <setvbuf>
    3b5c:	bd10      	pop	{r4, pc}
	...

00003b60 <setvbuf>:
    3b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b62:	001d      	movs	r5, r3
    3b64:	4b4f      	ldr	r3, [pc, #316]	; (3ca4 <setvbuf+0x144>)
    3b66:	b085      	sub	sp, #20
    3b68:	681e      	ldr	r6, [r3, #0]
    3b6a:	0004      	movs	r4, r0
    3b6c:	000f      	movs	r7, r1
    3b6e:	9200      	str	r2, [sp, #0]
    3b70:	2e00      	cmp	r6, #0
    3b72:	d005      	beq.n	3b80 <setvbuf+0x20>
    3b74:	69b3      	ldr	r3, [r6, #24]
    3b76:	2b00      	cmp	r3, #0
    3b78:	d102      	bne.n	3b80 <setvbuf+0x20>
    3b7a:	0030      	movs	r0, r6
    3b7c:	f000 f99c 	bl	3eb8 <__sinit>
    3b80:	4b49      	ldr	r3, [pc, #292]	; (3ca8 <setvbuf+0x148>)
    3b82:	429c      	cmp	r4, r3
    3b84:	d150      	bne.n	3c28 <setvbuf+0xc8>
    3b86:	6874      	ldr	r4, [r6, #4]
    3b88:	9b00      	ldr	r3, [sp, #0]
    3b8a:	2b02      	cmp	r3, #2
    3b8c:	d005      	beq.n	3b9a <setvbuf+0x3a>
    3b8e:	2b01      	cmp	r3, #1
    3b90:	d900      	bls.n	3b94 <setvbuf+0x34>
    3b92:	e084      	b.n	3c9e <setvbuf+0x13e>
    3b94:	2d00      	cmp	r5, #0
    3b96:	da00      	bge.n	3b9a <setvbuf+0x3a>
    3b98:	e081      	b.n	3c9e <setvbuf+0x13e>
    3b9a:	0021      	movs	r1, r4
    3b9c:	0030      	movs	r0, r6
    3b9e:	f000 f91d 	bl	3ddc <_fflush_r>
    3ba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3ba4:	2900      	cmp	r1, #0
    3ba6:	d008      	beq.n	3bba <setvbuf+0x5a>
    3ba8:	0023      	movs	r3, r4
    3baa:	3344      	adds	r3, #68	; 0x44
    3bac:	4299      	cmp	r1, r3
    3bae:	d002      	beq.n	3bb6 <setvbuf+0x56>
    3bb0:	0030      	movs	r0, r6
    3bb2:	f7ff fe79 	bl	38a8 <_free_r>
    3bb6:	2300      	movs	r3, #0
    3bb8:	6363      	str	r3, [r4, #52]	; 0x34
    3bba:	2300      	movs	r3, #0
    3bbc:	61a3      	str	r3, [r4, #24]
    3bbe:	6063      	str	r3, [r4, #4]
    3bc0:	89a3      	ldrh	r3, [r4, #12]
    3bc2:	061b      	lsls	r3, r3, #24
    3bc4:	d503      	bpl.n	3bce <setvbuf+0x6e>
    3bc6:	6921      	ldr	r1, [r4, #16]
    3bc8:	0030      	movs	r0, r6
    3bca:	f7ff fe6d 	bl	38a8 <_free_r>
    3bce:	89a3      	ldrh	r3, [r4, #12]
    3bd0:	4a36      	ldr	r2, [pc, #216]	; (3cac <setvbuf+0x14c>)
    3bd2:	4013      	ands	r3, r2
    3bd4:	81a3      	strh	r3, [r4, #12]
    3bd6:	9b00      	ldr	r3, [sp, #0]
    3bd8:	2b02      	cmp	r3, #2
    3bda:	d05a      	beq.n	3c92 <setvbuf+0x132>
    3bdc:	ab03      	add	r3, sp, #12
    3bde:	aa02      	add	r2, sp, #8
    3be0:	0021      	movs	r1, r4
    3be2:	0030      	movs	r0, r6
    3be4:	f000 f9fe 	bl	3fe4 <__swhatbuf_r>
    3be8:	89a3      	ldrh	r3, [r4, #12]
    3bea:	4318      	orrs	r0, r3
    3bec:	81a0      	strh	r0, [r4, #12]
    3bee:	2d00      	cmp	r5, #0
    3bf0:	d124      	bne.n	3c3c <setvbuf+0xdc>
    3bf2:	9d02      	ldr	r5, [sp, #8]
    3bf4:	0028      	movs	r0, r5
    3bf6:	f7ff fe3b 	bl	3870 <malloc>
    3bfa:	9501      	str	r5, [sp, #4]
    3bfc:	1e07      	subs	r7, r0, #0
    3bfe:	d142      	bne.n	3c86 <setvbuf+0x126>
    3c00:	9b02      	ldr	r3, [sp, #8]
    3c02:	9301      	str	r3, [sp, #4]
    3c04:	42ab      	cmp	r3, r5
    3c06:	d139      	bne.n	3c7c <setvbuf+0x11c>
    3c08:	2001      	movs	r0, #1
    3c0a:	4240      	negs	r0, r0
    3c0c:	2302      	movs	r3, #2
    3c0e:	89a2      	ldrh	r2, [r4, #12]
    3c10:	4313      	orrs	r3, r2
    3c12:	81a3      	strh	r3, [r4, #12]
    3c14:	2300      	movs	r3, #0
    3c16:	60a3      	str	r3, [r4, #8]
    3c18:	0023      	movs	r3, r4
    3c1a:	3347      	adds	r3, #71	; 0x47
    3c1c:	6023      	str	r3, [r4, #0]
    3c1e:	6123      	str	r3, [r4, #16]
    3c20:	2301      	movs	r3, #1
    3c22:	6163      	str	r3, [r4, #20]
    3c24:	b005      	add	sp, #20
    3c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c28:	4b21      	ldr	r3, [pc, #132]	; (3cb0 <setvbuf+0x150>)
    3c2a:	429c      	cmp	r4, r3
    3c2c:	d101      	bne.n	3c32 <setvbuf+0xd2>
    3c2e:	68b4      	ldr	r4, [r6, #8]
    3c30:	e7aa      	b.n	3b88 <setvbuf+0x28>
    3c32:	4b20      	ldr	r3, [pc, #128]	; (3cb4 <setvbuf+0x154>)
    3c34:	429c      	cmp	r4, r3
    3c36:	d1a7      	bne.n	3b88 <setvbuf+0x28>
    3c38:	68f4      	ldr	r4, [r6, #12]
    3c3a:	e7a5      	b.n	3b88 <setvbuf+0x28>
    3c3c:	2f00      	cmp	r7, #0
    3c3e:	d0d9      	beq.n	3bf4 <setvbuf+0x94>
    3c40:	69b3      	ldr	r3, [r6, #24]
    3c42:	2b00      	cmp	r3, #0
    3c44:	d102      	bne.n	3c4c <setvbuf+0xec>
    3c46:	0030      	movs	r0, r6
    3c48:	f000 f936 	bl	3eb8 <__sinit>
    3c4c:	9b00      	ldr	r3, [sp, #0]
    3c4e:	2b01      	cmp	r3, #1
    3c50:	d103      	bne.n	3c5a <setvbuf+0xfa>
    3c52:	89a3      	ldrh	r3, [r4, #12]
    3c54:	9a00      	ldr	r2, [sp, #0]
    3c56:	431a      	orrs	r2, r3
    3c58:	81a2      	strh	r2, [r4, #12]
    3c5a:	2008      	movs	r0, #8
    3c5c:	89a3      	ldrh	r3, [r4, #12]
    3c5e:	6027      	str	r7, [r4, #0]
    3c60:	6127      	str	r7, [r4, #16]
    3c62:	6165      	str	r5, [r4, #20]
    3c64:	4018      	ands	r0, r3
    3c66:	d018      	beq.n	3c9a <setvbuf+0x13a>
    3c68:	2001      	movs	r0, #1
    3c6a:	4018      	ands	r0, r3
    3c6c:	2300      	movs	r3, #0
    3c6e:	4298      	cmp	r0, r3
    3c70:	d011      	beq.n	3c96 <setvbuf+0x136>
    3c72:	426d      	negs	r5, r5
    3c74:	60a3      	str	r3, [r4, #8]
    3c76:	61a5      	str	r5, [r4, #24]
    3c78:	0018      	movs	r0, r3
    3c7a:	e7d3      	b.n	3c24 <setvbuf+0xc4>
    3c7c:	9801      	ldr	r0, [sp, #4]
    3c7e:	f7ff fdf7 	bl	3870 <malloc>
    3c82:	1e07      	subs	r7, r0, #0
    3c84:	d0c0      	beq.n	3c08 <setvbuf+0xa8>
    3c86:	2380      	movs	r3, #128	; 0x80
    3c88:	89a2      	ldrh	r2, [r4, #12]
    3c8a:	9d01      	ldr	r5, [sp, #4]
    3c8c:	4313      	orrs	r3, r2
    3c8e:	81a3      	strh	r3, [r4, #12]
    3c90:	e7d6      	b.n	3c40 <setvbuf+0xe0>
    3c92:	2000      	movs	r0, #0
    3c94:	e7ba      	b.n	3c0c <setvbuf+0xac>
    3c96:	60a5      	str	r5, [r4, #8]
    3c98:	e7c4      	b.n	3c24 <setvbuf+0xc4>
    3c9a:	60a0      	str	r0, [r4, #8]
    3c9c:	e7c2      	b.n	3c24 <setvbuf+0xc4>
    3c9e:	2001      	movs	r0, #1
    3ca0:	4240      	negs	r0, r0
    3ca2:	e7bf      	b.n	3c24 <setvbuf+0xc4>
    3ca4:	20000164 	.word	0x20000164
    3ca8:	00006d2c 	.word	0x00006d2c
    3cac:	fffff35c 	.word	0xfffff35c
    3cb0:	00006d4c 	.word	0x00006d4c
    3cb4:	00006d0c 	.word	0x00006d0c

00003cb8 <strlen>:
    3cb8:	2300      	movs	r3, #0
    3cba:	5cc2      	ldrb	r2, [r0, r3]
    3cbc:	3301      	adds	r3, #1
    3cbe:	2a00      	cmp	r2, #0
    3cc0:	d1fb      	bne.n	3cba <strlen+0x2>
    3cc2:	1e58      	subs	r0, r3, #1
    3cc4:	4770      	bx	lr
	...

00003cc8 <__sflush_r>:
    3cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3cca:	898a      	ldrh	r2, [r1, #12]
    3ccc:	0005      	movs	r5, r0
    3cce:	000c      	movs	r4, r1
    3cd0:	0713      	lsls	r3, r2, #28
    3cd2:	d460      	bmi.n	3d96 <__sflush_r+0xce>
    3cd4:	684b      	ldr	r3, [r1, #4]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	dc04      	bgt.n	3ce4 <__sflush_r+0x1c>
    3cda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3cdc:	2b00      	cmp	r3, #0
    3cde:	dc01      	bgt.n	3ce4 <__sflush_r+0x1c>
    3ce0:	2000      	movs	r0, #0
    3ce2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3ce4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3ce6:	2f00      	cmp	r7, #0
    3ce8:	d0fa      	beq.n	3ce0 <__sflush_r+0x18>
    3cea:	2300      	movs	r3, #0
    3cec:	682e      	ldr	r6, [r5, #0]
    3cee:	602b      	str	r3, [r5, #0]
    3cf0:	2380      	movs	r3, #128	; 0x80
    3cf2:	015b      	lsls	r3, r3, #5
    3cf4:	401a      	ands	r2, r3
    3cf6:	d034      	beq.n	3d62 <__sflush_r+0x9a>
    3cf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3cfa:	89a3      	ldrh	r3, [r4, #12]
    3cfc:	075b      	lsls	r3, r3, #29
    3cfe:	d506      	bpl.n	3d0e <__sflush_r+0x46>
    3d00:	6863      	ldr	r3, [r4, #4]
    3d02:	1ac0      	subs	r0, r0, r3
    3d04:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3d06:	2b00      	cmp	r3, #0
    3d08:	d001      	beq.n	3d0e <__sflush_r+0x46>
    3d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3d0c:	1ac0      	subs	r0, r0, r3
    3d0e:	0002      	movs	r2, r0
    3d10:	6a21      	ldr	r1, [r4, #32]
    3d12:	2300      	movs	r3, #0
    3d14:	0028      	movs	r0, r5
    3d16:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3d18:	47b8      	blx	r7
    3d1a:	89a1      	ldrh	r1, [r4, #12]
    3d1c:	1c43      	adds	r3, r0, #1
    3d1e:	d106      	bne.n	3d2e <__sflush_r+0x66>
    3d20:	682b      	ldr	r3, [r5, #0]
    3d22:	2b1d      	cmp	r3, #29
    3d24:	d831      	bhi.n	3d8a <__sflush_r+0xc2>
    3d26:	4a2c      	ldr	r2, [pc, #176]	; (3dd8 <__sflush_r+0x110>)
    3d28:	40da      	lsrs	r2, r3
    3d2a:	07d3      	lsls	r3, r2, #31
    3d2c:	d52d      	bpl.n	3d8a <__sflush_r+0xc2>
    3d2e:	2300      	movs	r3, #0
    3d30:	6063      	str	r3, [r4, #4]
    3d32:	6923      	ldr	r3, [r4, #16]
    3d34:	6023      	str	r3, [r4, #0]
    3d36:	04cb      	lsls	r3, r1, #19
    3d38:	d505      	bpl.n	3d46 <__sflush_r+0x7e>
    3d3a:	1c43      	adds	r3, r0, #1
    3d3c:	d102      	bne.n	3d44 <__sflush_r+0x7c>
    3d3e:	682b      	ldr	r3, [r5, #0]
    3d40:	2b00      	cmp	r3, #0
    3d42:	d100      	bne.n	3d46 <__sflush_r+0x7e>
    3d44:	6560      	str	r0, [r4, #84]	; 0x54
    3d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3d48:	602e      	str	r6, [r5, #0]
    3d4a:	2900      	cmp	r1, #0
    3d4c:	d0c8      	beq.n	3ce0 <__sflush_r+0x18>
    3d4e:	0023      	movs	r3, r4
    3d50:	3344      	adds	r3, #68	; 0x44
    3d52:	4299      	cmp	r1, r3
    3d54:	d002      	beq.n	3d5c <__sflush_r+0x94>
    3d56:	0028      	movs	r0, r5
    3d58:	f7ff fda6 	bl	38a8 <_free_r>
    3d5c:	2000      	movs	r0, #0
    3d5e:	6360      	str	r0, [r4, #52]	; 0x34
    3d60:	e7bf      	b.n	3ce2 <__sflush_r+0x1a>
    3d62:	2301      	movs	r3, #1
    3d64:	6a21      	ldr	r1, [r4, #32]
    3d66:	0028      	movs	r0, r5
    3d68:	47b8      	blx	r7
    3d6a:	1c43      	adds	r3, r0, #1
    3d6c:	d1c5      	bne.n	3cfa <__sflush_r+0x32>
    3d6e:	682b      	ldr	r3, [r5, #0]
    3d70:	2b00      	cmp	r3, #0
    3d72:	d0c2      	beq.n	3cfa <__sflush_r+0x32>
    3d74:	2b1d      	cmp	r3, #29
    3d76:	d001      	beq.n	3d7c <__sflush_r+0xb4>
    3d78:	2b16      	cmp	r3, #22
    3d7a:	d101      	bne.n	3d80 <__sflush_r+0xb8>
    3d7c:	602e      	str	r6, [r5, #0]
    3d7e:	e7af      	b.n	3ce0 <__sflush_r+0x18>
    3d80:	2340      	movs	r3, #64	; 0x40
    3d82:	89a2      	ldrh	r2, [r4, #12]
    3d84:	4313      	orrs	r3, r2
    3d86:	81a3      	strh	r3, [r4, #12]
    3d88:	e7ab      	b.n	3ce2 <__sflush_r+0x1a>
    3d8a:	2340      	movs	r3, #64	; 0x40
    3d8c:	430b      	orrs	r3, r1
    3d8e:	2001      	movs	r0, #1
    3d90:	81a3      	strh	r3, [r4, #12]
    3d92:	4240      	negs	r0, r0
    3d94:	e7a5      	b.n	3ce2 <__sflush_r+0x1a>
    3d96:	690f      	ldr	r7, [r1, #16]
    3d98:	2f00      	cmp	r7, #0
    3d9a:	d0a1      	beq.n	3ce0 <__sflush_r+0x18>
    3d9c:	680b      	ldr	r3, [r1, #0]
    3d9e:	600f      	str	r7, [r1, #0]
    3da0:	1bdb      	subs	r3, r3, r7
    3da2:	9301      	str	r3, [sp, #4]
    3da4:	2300      	movs	r3, #0
    3da6:	0792      	lsls	r2, r2, #30
    3da8:	d100      	bne.n	3dac <__sflush_r+0xe4>
    3daa:	694b      	ldr	r3, [r1, #20]
    3dac:	60a3      	str	r3, [r4, #8]
    3dae:	9b01      	ldr	r3, [sp, #4]
    3db0:	2b00      	cmp	r3, #0
    3db2:	dc00      	bgt.n	3db6 <__sflush_r+0xee>
    3db4:	e794      	b.n	3ce0 <__sflush_r+0x18>
    3db6:	9b01      	ldr	r3, [sp, #4]
    3db8:	003a      	movs	r2, r7
    3dba:	6a21      	ldr	r1, [r4, #32]
    3dbc:	0028      	movs	r0, r5
    3dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3dc0:	47b0      	blx	r6
    3dc2:	2800      	cmp	r0, #0
    3dc4:	dc03      	bgt.n	3dce <__sflush_r+0x106>
    3dc6:	2340      	movs	r3, #64	; 0x40
    3dc8:	89a2      	ldrh	r2, [r4, #12]
    3dca:	4313      	orrs	r3, r2
    3dcc:	e7df      	b.n	3d8e <__sflush_r+0xc6>
    3dce:	9b01      	ldr	r3, [sp, #4]
    3dd0:	183f      	adds	r7, r7, r0
    3dd2:	1a1b      	subs	r3, r3, r0
    3dd4:	9301      	str	r3, [sp, #4]
    3dd6:	e7ea      	b.n	3dae <__sflush_r+0xe6>
    3dd8:	20400001 	.word	0x20400001

00003ddc <_fflush_r>:
    3ddc:	690b      	ldr	r3, [r1, #16]
    3dde:	b570      	push	{r4, r5, r6, lr}
    3de0:	0005      	movs	r5, r0
    3de2:	000c      	movs	r4, r1
    3de4:	2b00      	cmp	r3, #0
    3de6:	d101      	bne.n	3dec <_fflush_r+0x10>
    3de8:	2000      	movs	r0, #0
    3dea:	bd70      	pop	{r4, r5, r6, pc}
    3dec:	2800      	cmp	r0, #0
    3dee:	d004      	beq.n	3dfa <_fflush_r+0x1e>
    3df0:	6983      	ldr	r3, [r0, #24]
    3df2:	2b00      	cmp	r3, #0
    3df4:	d101      	bne.n	3dfa <_fflush_r+0x1e>
    3df6:	f000 f85f 	bl	3eb8 <__sinit>
    3dfa:	4b0b      	ldr	r3, [pc, #44]	; (3e28 <_fflush_r+0x4c>)
    3dfc:	429c      	cmp	r4, r3
    3dfe:	d109      	bne.n	3e14 <_fflush_r+0x38>
    3e00:	686c      	ldr	r4, [r5, #4]
    3e02:	220c      	movs	r2, #12
    3e04:	5ea3      	ldrsh	r3, [r4, r2]
    3e06:	2b00      	cmp	r3, #0
    3e08:	d0ee      	beq.n	3de8 <_fflush_r+0xc>
    3e0a:	0021      	movs	r1, r4
    3e0c:	0028      	movs	r0, r5
    3e0e:	f7ff ff5b 	bl	3cc8 <__sflush_r>
    3e12:	e7ea      	b.n	3dea <_fflush_r+0xe>
    3e14:	4b05      	ldr	r3, [pc, #20]	; (3e2c <_fflush_r+0x50>)
    3e16:	429c      	cmp	r4, r3
    3e18:	d101      	bne.n	3e1e <_fflush_r+0x42>
    3e1a:	68ac      	ldr	r4, [r5, #8]
    3e1c:	e7f1      	b.n	3e02 <_fflush_r+0x26>
    3e1e:	4b04      	ldr	r3, [pc, #16]	; (3e30 <_fflush_r+0x54>)
    3e20:	429c      	cmp	r4, r3
    3e22:	d1ee      	bne.n	3e02 <_fflush_r+0x26>
    3e24:	68ec      	ldr	r4, [r5, #12]
    3e26:	e7ec      	b.n	3e02 <_fflush_r+0x26>
    3e28:	00006d2c 	.word	0x00006d2c
    3e2c:	00006d4c 	.word	0x00006d4c
    3e30:	00006d0c 	.word	0x00006d0c

00003e34 <_cleanup_r>:
    3e34:	b510      	push	{r4, lr}
    3e36:	4902      	ldr	r1, [pc, #8]	; (3e40 <_cleanup_r+0xc>)
    3e38:	f000 f8b2 	bl	3fa0 <_fwalk_reent>
    3e3c:	bd10      	pop	{r4, pc}
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	00003ddd 	.word	0x00003ddd

00003e44 <std.isra.0>:
    3e44:	2300      	movs	r3, #0
    3e46:	b510      	push	{r4, lr}
    3e48:	0004      	movs	r4, r0
    3e4a:	6003      	str	r3, [r0, #0]
    3e4c:	6043      	str	r3, [r0, #4]
    3e4e:	6083      	str	r3, [r0, #8]
    3e50:	8181      	strh	r1, [r0, #12]
    3e52:	6643      	str	r3, [r0, #100]	; 0x64
    3e54:	81c2      	strh	r2, [r0, #14]
    3e56:	6103      	str	r3, [r0, #16]
    3e58:	6143      	str	r3, [r0, #20]
    3e5a:	6183      	str	r3, [r0, #24]
    3e5c:	0019      	movs	r1, r3
    3e5e:	2208      	movs	r2, #8
    3e60:	305c      	adds	r0, #92	; 0x5c
    3e62:	f7ff fd18 	bl	3896 <memset>
    3e66:	4b05      	ldr	r3, [pc, #20]	; (3e7c <std.isra.0+0x38>)
    3e68:	6224      	str	r4, [r4, #32]
    3e6a:	6263      	str	r3, [r4, #36]	; 0x24
    3e6c:	4b04      	ldr	r3, [pc, #16]	; (3e80 <std.isra.0+0x3c>)
    3e6e:	62a3      	str	r3, [r4, #40]	; 0x28
    3e70:	4b04      	ldr	r3, [pc, #16]	; (3e84 <std.isra.0+0x40>)
    3e72:	62e3      	str	r3, [r4, #44]	; 0x2c
    3e74:	4b04      	ldr	r3, [pc, #16]	; (3e88 <std.isra.0+0x44>)
    3e76:	6323      	str	r3, [r4, #48]	; 0x30
    3e78:	bd10      	pop	{r4, pc}
    3e7a:	46c0      	nop			; (mov r8, r8)
    3e7c:	000046c5 	.word	0x000046c5
    3e80:	000046ed 	.word	0x000046ed
    3e84:	00004725 	.word	0x00004725
    3e88:	00004751 	.word	0x00004751

00003e8c <__sfmoreglue>:
    3e8c:	b570      	push	{r4, r5, r6, lr}
    3e8e:	2568      	movs	r5, #104	; 0x68
    3e90:	1e4a      	subs	r2, r1, #1
    3e92:	4355      	muls	r5, r2
    3e94:	000e      	movs	r6, r1
    3e96:	0029      	movs	r1, r5
    3e98:	3174      	adds	r1, #116	; 0x74
    3e9a:	f7ff fd4f 	bl	393c <_malloc_r>
    3e9e:	1e04      	subs	r4, r0, #0
    3ea0:	d008      	beq.n	3eb4 <__sfmoreglue+0x28>
    3ea2:	2100      	movs	r1, #0
    3ea4:	002a      	movs	r2, r5
    3ea6:	6001      	str	r1, [r0, #0]
    3ea8:	6046      	str	r6, [r0, #4]
    3eaa:	300c      	adds	r0, #12
    3eac:	60a0      	str	r0, [r4, #8]
    3eae:	3268      	adds	r2, #104	; 0x68
    3eb0:	f7ff fcf1 	bl	3896 <memset>
    3eb4:	0020      	movs	r0, r4
    3eb6:	bd70      	pop	{r4, r5, r6, pc}

00003eb8 <__sinit>:
    3eb8:	6983      	ldr	r3, [r0, #24]
    3eba:	b513      	push	{r0, r1, r4, lr}
    3ebc:	0004      	movs	r4, r0
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	d128      	bne.n	3f14 <__sinit+0x5c>
    3ec2:	6483      	str	r3, [r0, #72]	; 0x48
    3ec4:	64c3      	str	r3, [r0, #76]	; 0x4c
    3ec6:	6503      	str	r3, [r0, #80]	; 0x50
    3ec8:	4b13      	ldr	r3, [pc, #76]	; (3f18 <__sinit+0x60>)
    3eca:	4a14      	ldr	r2, [pc, #80]	; (3f1c <__sinit+0x64>)
    3ecc:	681b      	ldr	r3, [r3, #0]
    3ece:	6282      	str	r2, [r0, #40]	; 0x28
    3ed0:	9301      	str	r3, [sp, #4]
    3ed2:	4298      	cmp	r0, r3
    3ed4:	d101      	bne.n	3eda <__sinit+0x22>
    3ed6:	2301      	movs	r3, #1
    3ed8:	6183      	str	r3, [r0, #24]
    3eda:	0020      	movs	r0, r4
    3edc:	f000 f820 	bl	3f20 <__sfp>
    3ee0:	6060      	str	r0, [r4, #4]
    3ee2:	0020      	movs	r0, r4
    3ee4:	f000 f81c 	bl	3f20 <__sfp>
    3ee8:	60a0      	str	r0, [r4, #8]
    3eea:	0020      	movs	r0, r4
    3eec:	f000 f818 	bl	3f20 <__sfp>
    3ef0:	2200      	movs	r2, #0
    3ef2:	60e0      	str	r0, [r4, #12]
    3ef4:	2104      	movs	r1, #4
    3ef6:	6860      	ldr	r0, [r4, #4]
    3ef8:	f7ff ffa4 	bl	3e44 <std.isra.0>
    3efc:	2201      	movs	r2, #1
    3efe:	2109      	movs	r1, #9
    3f00:	68a0      	ldr	r0, [r4, #8]
    3f02:	f7ff ff9f 	bl	3e44 <std.isra.0>
    3f06:	2202      	movs	r2, #2
    3f08:	2112      	movs	r1, #18
    3f0a:	68e0      	ldr	r0, [r4, #12]
    3f0c:	f7ff ff9a 	bl	3e44 <std.isra.0>
    3f10:	2301      	movs	r3, #1
    3f12:	61a3      	str	r3, [r4, #24]
    3f14:	bd13      	pop	{r0, r1, r4, pc}
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	00006d08 	.word	0x00006d08
    3f1c:	00003e35 	.word	0x00003e35

00003f20 <__sfp>:
    3f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f22:	4b1e      	ldr	r3, [pc, #120]	; (3f9c <__sfp+0x7c>)
    3f24:	0007      	movs	r7, r0
    3f26:	681e      	ldr	r6, [r3, #0]
    3f28:	69b3      	ldr	r3, [r6, #24]
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d102      	bne.n	3f34 <__sfp+0x14>
    3f2e:	0030      	movs	r0, r6
    3f30:	f7ff ffc2 	bl	3eb8 <__sinit>
    3f34:	3648      	adds	r6, #72	; 0x48
    3f36:	68b4      	ldr	r4, [r6, #8]
    3f38:	6873      	ldr	r3, [r6, #4]
    3f3a:	3b01      	subs	r3, #1
    3f3c:	d504      	bpl.n	3f48 <__sfp+0x28>
    3f3e:	6833      	ldr	r3, [r6, #0]
    3f40:	2b00      	cmp	r3, #0
    3f42:	d007      	beq.n	3f54 <__sfp+0x34>
    3f44:	6836      	ldr	r6, [r6, #0]
    3f46:	e7f6      	b.n	3f36 <__sfp+0x16>
    3f48:	220c      	movs	r2, #12
    3f4a:	5ea5      	ldrsh	r5, [r4, r2]
    3f4c:	2d00      	cmp	r5, #0
    3f4e:	d00d      	beq.n	3f6c <__sfp+0x4c>
    3f50:	3468      	adds	r4, #104	; 0x68
    3f52:	e7f2      	b.n	3f3a <__sfp+0x1a>
    3f54:	2104      	movs	r1, #4
    3f56:	0038      	movs	r0, r7
    3f58:	f7ff ff98 	bl	3e8c <__sfmoreglue>
    3f5c:	6030      	str	r0, [r6, #0]
    3f5e:	2800      	cmp	r0, #0
    3f60:	d1f0      	bne.n	3f44 <__sfp+0x24>
    3f62:	230c      	movs	r3, #12
    3f64:	0004      	movs	r4, r0
    3f66:	603b      	str	r3, [r7, #0]
    3f68:	0020      	movs	r0, r4
    3f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f6c:	2301      	movs	r3, #1
    3f6e:	0020      	movs	r0, r4
    3f70:	425b      	negs	r3, r3
    3f72:	81e3      	strh	r3, [r4, #14]
    3f74:	3302      	adds	r3, #2
    3f76:	81a3      	strh	r3, [r4, #12]
    3f78:	6665      	str	r5, [r4, #100]	; 0x64
    3f7a:	6025      	str	r5, [r4, #0]
    3f7c:	60a5      	str	r5, [r4, #8]
    3f7e:	6065      	str	r5, [r4, #4]
    3f80:	6125      	str	r5, [r4, #16]
    3f82:	6165      	str	r5, [r4, #20]
    3f84:	61a5      	str	r5, [r4, #24]
    3f86:	2208      	movs	r2, #8
    3f88:	0029      	movs	r1, r5
    3f8a:	305c      	adds	r0, #92	; 0x5c
    3f8c:	f7ff fc83 	bl	3896 <memset>
    3f90:	6365      	str	r5, [r4, #52]	; 0x34
    3f92:	63a5      	str	r5, [r4, #56]	; 0x38
    3f94:	64a5      	str	r5, [r4, #72]	; 0x48
    3f96:	64e5      	str	r5, [r4, #76]	; 0x4c
    3f98:	e7e6      	b.n	3f68 <__sfp+0x48>
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	00006d08 	.word	0x00006d08

00003fa0 <_fwalk_reent>:
    3fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3fa2:	0004      	movs	r4, r0
    3fa4:	0007      	movs	r7, r0
    3fa6:	2600      	movs	r6, #0
    3fa8:	9101      	str	r1, [sp, #4]
    3faa:	3448      	adds	r4, #72	; 0x48
    3fac:	2c00      	cmp	r4, #0
    3fae:	d101      	bne.n	3fb4 <_fwalk_reent+0x14>
    3fb0:	0030      	movs	r0, r6
    3fb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3fb4:	6863      	ldr	r3, [r4, #4]
    3fb6:	68a5      	ldr	r5, [r4, #8]
    3fb8:	9300      	str	r3, [sp, #0]
    3fba:	9b00      	ldr	r3, [sp, #0]
    3fbc:	3b01      	subs	r3, #1
    3fbe:	9300      	str	r3, [sp, #0]
    3fc0:	d501      	bpl.n	3fc6 <_fwalk_reent+0x26>
    3fc2:	6824      	ldr	r4, [r4, #0]
    3fc4:	e7f2      	b.n	3fac <_fwalk_reent+0xc>
    3fc6:	89ab      	ldrh	r3, [r5, #12]
    3fc8:	2b01      	cmp	r3, #1
    3fca:	d908      	bls.n	3fde <_fwalk_reent+0x3e>
    3fcc:	220e      	movs	r2, #14
    3fce:	5eab      	ldrsh	r3, [r5, r2]
    3fd0:	3301      	adds	r3, #1
    3fd2:	d004      	beq.n	3fde <_fwalk_reent+0x3e>
    3fd4:	0029      	movs	r1, r5
    3fd6:	0038      	movs	r0, r7
    3fd8:	9b01      	ldr	r3, [sp, #4]
    3fda:	4798      	blx	r3
    3fdc:	4306      	orrs	r6, r0
    3fde:	3568      	adds	r5, #104	; 0x68
    3fe0:	e7eb      	b.n	3fba <_fwalk_reent+0x1a>
	...

00003fe4 <__swhatbuf_r>:
    3fe4:	b570      	push	{r4, r5, r6, lr}
    3fe6:	000e      	movs	r6, r1
    3fe8:	001d      	movs	r5, r3
    3fea:	230e      	movs	r3, #14
    3fec:	5ec9      	ldrsh	r1, [r1, r3]
    3fee:	b090      	sub	sp, #64	; 0x40
    3ff0:	0014      	movs	r4, r2
    3ff2:	2900      	cmp	r1, #0
    3ff4:	da07      	bge.n	4006 <__swhatbuf_r+0x22>
    3ff6:	2300      	movs	r3, #0
    3ff8:	602b      	str	r3, [r5, #0]
    3ffa:	89b3      	ldrh	r3, [r6, #12]
    3ffc:	061b      	lsls	r3, r3, #24
    3ffe:	d411      	bmi.n	4024 <__swhatbuf_r+0x40>
    4000:	2380      	movs	r3, #128	; 0x80
    4002:	00db      	lsls	r3, r3, #3
    4004:	e00f      	b.n	4026 <__swhatbuf_r+0x42>
    4006:	aa01      	add	r2, sp, #4
    4008:	f000 fc9a 	bl	4940 <_fstat_r>
    400c:	2800      	cmp	r0, #0
    400e:	dbf2      	blt.n	3ff6 <__swhatbuf_r+0x12>
    4010:	22f0      	movs	r2, #240	; 0xf0
    4012:	9b02      	ldr	r3, [sp, #8]
    4014:	0212      	lsls	r2, r2, #8
    4016:	4013      	ands	r3, r2
    4018:	4a05      	ldr	r2, [pc, #20]	; (4030 <__swhatbuf_r+0x4c>)
    401a:	189b      	adds	r3, r3, r2
    401c:	425a      	negs	r2, r3
    401e:	4153      	adcs	r3, r2
    4020:	602b      	str	r3, [r5, #0]
    4022:	e7ed      	b.n	4000 <__swhatbuf_r+0x1c>
    4024:	2340      	movs	r3, #64	; 0x40
    4026:	2000      	movs	r0, #0
    4028:	6023      	str	r3, [r4, #0]
    402a:	b010      	add	sp, #64	; 0x40
    402c:	bd70      	pop	{r4, r5, r6, pc}
    402e:	46c0      	nop			; (mov r8, r8)
    4030:	ffffe000 	.word	0xffffe000

00004034 <__smakebuf_r>:
    4034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4036:	2602      	movs	r6, #2
    4038:	898b      	ldrh	r3, [r1, #12]
    403a:	0005      	movs	r5, r0
    403c:	000c      	movs	r4, r1
    403e:	4233      	tst	r3, r6
    4040:	d006      	beq.n	4050 <__smakebuf_r+0x1c>
    4042:	0023      	movs	r3, r4
    4044:	3347      	adds	r3, #71	; 0x47
    4046:	6023      	str	r3, [r4, #0]
    4048:	6123      	str	r3, [r4, #16]
    404a:	2301      	movs	r3, #1
    404c:	6163      	str	r3, [r4, #20]
    404e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4050:	ab01      	add	r3, sp, #4
    4052:	466a      	mov	r2, sp
    4054:	f7ff ffc6 	bl	3fe4 <__swhatbuf_r>
    4058:	9900      	ldr	r1, [sp, #0]
    405a:	0007      	movs	r7, r0
    405c:	0028      	movs	r0, r5
    405e:	f7ff fc6d 	bl	393c <_malloc_r>
    4062:	2800      	cmp	r0, #0
    4064:	d108      	bne.n	4078 <__smakebuf_r+0x44>
    4066:	220c      	movs	r2, #12
    4068:	5ea3      	ldrsh	r3, [r4, r2]
    406a:	059a      	lsls	r2, r3, #22
    406c:	d4ef      	bmi.n	404e <__smakebuf_r+0x1a>
    406e:	2203      	movs	r2, #3
    4070:	4393      	bics	r3, r2
    4072:	431e      	orrs	r6, r3
    4074:	81a6      	strh	r6, [r4, #12]
    4076:	e7e4      	b.n	4042 <__smakebuf_r+0xe>
    4078:	4b0f      	ldr	r3, [pc, #60]	; (40b8 <__smakebuf_r+0x84>)
    407a:	62ab      	str	r3, [r5, #40]	; 0x28
    407c:	2380      	movs	r3, #128	; 0x80
    407e:	89a2      	ldrh	r2, [r4, #12]
    4080:	6020      	str	r0, [r4, #0]
    4082:	4313      	orrs	r3, r2
    4084:	81a3      	strh	r3, [r4, #12]
    4086:	9b00      	ldr	r3, [sp, #0]
    4088:	6120      	str	r0, [r4, #16]
    408a:	6163      	str	r3, [r4, #20]
    408c:	9b01      	ldr	r3, [sp, #4]
    408e:	2b00      	cmp	r3, #0
    4090:	d00d      	beq.n	40ae <__smakebuf_r+0x7a>
    4092:	230e      	movs	r3, #14
    4094:	5ee1      	ldrsh	r1, [r4, r3]
    4096:	0028      	movs	r0, r5
    4098:	f000 fc64 	bl	4964 <_isatty_r>
    409c:	2800      	cmp	r0, #0
    409e:	d006      	beq.n	40ae <__smakebuf_r+0x7a>
    40a0:	2203      	movs	r2, #3
    40a2:	89a3      	ldrh	r3, [r4, #12]
    40a4:	4393      	bics	r3, r2
    40a6:	001a      	movs	r2, r3
    40a8:	2301      	movs	r3, #1
    40aa:	4313      	orrs	r3, r2
    40ac:	81a3      	strh	r3, [r4, #12]
    40ae:	89a0      	ldrh	r0, [r4, #12]
    40b0:	4338      	orrs	r0, r7
    40b2:	81a0      	strh	r0, [r4, #12]
    40b4:	e7cb      	b.n	404e <__smakebuf_r+0x1a>
    40b6:	46c0      	nop			; (mov r8, r8)
    40b8:	00003e35 	.word	0x00003e35

000040bc <__malloc_lock>:
    40bc:	4770      	bx	lr

000040be <__malloc_unlock>:
    40be:	4770      	bx	lr

000040c0 <__sfputc_r>:
    40c0:	6893      	ldr	r3, [r2, #8]
    40c2:	b510      	push	{r4, lr}
    40c4:	3b01      	subs	r3, #1
    40c6:	6093      	str	r3, [r2, #8]
    40c8:	2b00      	cmp	r3, #0
    40ca:	da05      	bge.n	40d8 <__sfputc_r+0x18>
    40cc:	6994      	ldr	r4, [r2, #24]
    40ce:	42a3      	cmp	r3, r4
    40d0:	db08      	blt.n	40e4 <__sfputc_r+0x24>
    40d2:	b2cb      	uxtb	r3, r1
    40d4:	2b0a      	cmp	r3, #10
    40d6:	d005      	beq.n	40e4 <__sfputc_r+0x24>
    40d8:	6813      	ldr	r3, [r2, #0]
    40da:	1c58      	adds	r0, r3, #1
    40dc:	6010      	str	r0, [r2, #0]
    40de:	7019      	strb	r1, [r3, #0]
    40e0:	b2c8      	uxtb	r0, r1
    40e2:	bd10      	pop	{r4, pc}
    40e4:	f000 fb3a 	bl	475c <__swbuf_r>
    40e8:	e7fb      	b.n	40e2 <__sfputc_r+0x22>

000040ea <__sfputs_r>:
    40ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ec:	0006      	movs	r6, r0
    40ee:	000f      	movs	r7, r1
    40f0:	0014      	movs	r4, r2
    40f2:	18d5      	adds	r5, r2, r3
    40f4:	42ac      	cmp	r4, r5
    40f6:	d101      	bne.n	40fc <__sfputs_r+0x12>
    40f8:	2000      	movs	r0, #0
    40fa:	e007      	b.n	410c <__sfputs_r+0x22>
    40fc:	7821      	ldrb	r1, [r4, #0]
    40fe:	003a      	movs	r2, r7
    4100:	0030      	movs	r0, r6
    4102:	f7ff ffdd 	bl	40c0 <__sfputc_r>
    4106:	3401      	adds	r4, #1
    4108:	1c43      	adds	r3, r0, #1
    410a:	d1f3      	bne.n	40f4 <__sfputs_r+0xa>
    410c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004110 <_vfiprintf_r>:
    4110:	b5f0      	push	{r4, r5, r6, r7, lr}
    4112:	b09f      	sub	sp, #124	; 0x7c
    4114:	0006      	movs	r6, r0
    4116:	000f      	movs	r7, r1
    4118:	0014      	movs	r4, r2
    411a:	9305      	str	r3, [sp, #20]
    411c:	2800      	cmp	r0, #0
    411e:	d004      	beq.n	412a <_vfiprintf_r+0x1a>
    4120:	6983      	ldr	r3, [r0, #24]
    4122:	2b00      	cmp	r3, #0
    4124:	d101      	bne.n	412a <_vfiprintf_r+0x1a>
    4126:	f7ff fec7 	bl	3eb8 <__sinit>
    412a:	4b7f      	ldr	r3, [pc, #508]	; (4328 <_vfiprintf_r+0x218>)
    412c:	429f      	cmp	r7, r3
    412e:	d15c      	bne.n	41ea <_vfiprintf_r+0xda>
    4130:	6877      	ldr	r7, [r6, #4]
    4132:	89bb      	ldrh	r3, [r7, #12]
    4134:	071b      	lsls	r3, r3, #28
    4136:	d562      	bpl.n	41fe <_vfiprintf_r+0xee>
    4138:	693b      	ldr	r3, [r7, #16]
    413a:	2b00      	cmp	r3, #0
    413c:	d05f      	beq.n	41fe <_vfiprintf_r+0xee>
    413e:	2300      	movs	r3, #0
    4140:	ad06      	add	r5, sp, #24
    4142:	616b      	str	r3, [r5, #20]
    4144:	3320      	adds	r3, #32
    4146:	766b      	strb	r3, [r5, #25]
    4148:	3310      	adds	r3, #16
    414a:	76ab      	strb	r3, [r5, #26]
    414c:	9402      	str	r4, [sp, #8]
    414e:	9c02      	ldr	r4, [sp, #8]
    4150:	7823      	ldrb	r3, [r4, #0]
    4152:	2b00      	cmp	r3, #0
    4154:	d15d      	bne.n	4212 <_vfiprintf_r+0x102>
    4156:	9b02      	ldr	r3, [sp, #8]
    4158:	1ae3      	subs	r3, r4, r3
    415a:	9304      	str	r3, [sp, #16]
    415c:	d00d      	beq.n	417a <_vfiprintf_r+0x6a>
    415e:	9b04      	ldr	r3, [sp, #16]
    4160:	9a02      	ldr	r2, [sp, #8]
    4162:	0039      	movs	r1, r7
    4164:	0030      	movs	r0, r6
    4166:	f7ff ffc0 	bl	40ea <__sfputs_r>
    416a:	1c43      	adds	r3, r0, #1
    416c:	d100      	bne.n	4170 <_vfiprintf_r+0x60>
    416e:	e0cc      	b.n	430a <_vfiprintf_r+0x1fa>
    4170:	696a      	ldr	r2, [r5, #20]
    4172:	9b04      	ldr	r3, [sp, #16]
    4174:	4694      	mov	ip, r2
    4176:	4463      	add	r3, ip
    4178:	616b      	str	r3, [r5, #20]
    417a:	7823      	ldrb	r3, [r4, #0]
    417c:	2b00      	cmp	r3, #0
    417e:	d100      	bne.n	4182 <_vfiprintf_r+0x72>
    4180:	e0c3      	b.n	430a <_vfiprintf_r+0x1fa>
    4182:	2201      	movs	r2, #1
    4184:	2300      	movs	r3, #0
    4186:	4252      	negs	r2, r2
    4188:	606a      	str	r2, [r5, #4]
    418a:	a902      	add	r1, sp, #8
    418c:	3254      	adds	r2, #84	; 0x54
    418e:	1852      	adds	r2, r2, r1
    4190:	3401      	adds	r4, #1
    4192:	602b      	str	r3, [r5, #0]
    4194:	60eb      	str	r3, [r5, #12]
    4196:	60ab      	str	r3, [r5, #8]
    4198:	7013      	strb	r3, [r2, #0]
    419a:	65ab      	str	r3, [r5, #88]	; 0x58
    419c:	7821      	ldrb	r1, [r4, #0]
    419e:	2205      	movs	r2, #5
    41a0:	4862      	ldr	r0, [pc, #392]	; (432c <_vfiprintf_r+0x21c>)
    41a2:	f000 fc05 	bl	49b0 <memchr>
    41a6:	1c63      	adds	r3, r4, #1
    41a8:	469c      	mov	ip, r3
    41aa:	2800      	cmp	r0, #0
    41ac:	d135      	bne.n	421a <_vfiprintf_r+0x10a>
    41ae:	6829      	ldr	r1, [r5, #0]
    41b0:	06cb      	lsls	r3, r1, #27
    41b2:	d504      	bpl.n	41be <_vfiprintf_r+0xae>
    41b4:	2353      	movs	r3, #83	; 0x53
    41b6:	aa02      	add	r2, sp, #8
    41b8:	3020      	adds	r0, #32
    41ba:	189b      	adds	r3, r3, r2
    41bc:	7018      	strb	r0, [r3, #0]
    41be:	070b      	lsls	r3, r1, #28
    41c0:	d504      	bpl.n	41cc <_vfiprintf_r+0xbc>
    41c2:	2353      	movs	r3, #83	; 0x53
    41c4:	202b      	movs	r0, #43	; 0x2b
    41c6:	aa02      	add	r2, sp, #8
    41c8:	189b      	adds	r3, r3, r2
    41ca:	7018      	strb	r0, [r3, #0]
    41cc:	7823      	ldrb	r3, [r4, #0]
    41ce:	2b2a      	cmp	r3, #42	; 0x2a
    41d0:	d02c      	beq.n	422c <_vfiprintf_r+0x11c>
    41d2:	2000      	movs	r0, #0
    41d4:	210a      	movs	r1, #10
    41d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    41d8:	7822      	ldrb	r2, [r4, #0]
    41da:	3a30      	subs	r2, #48	; 0x30
    41dc:	2a09      	cmp	r2, #9
    41de:	d800      	bhi.n	41e2 <_vfiprintf_r+0xd2>
    41e0:	e06b      	b.n	42ba <_vfiprintf_r+0x1aa>
    41e2:	2800      	cmp	r0, #0
    41e4:	d02a      	beq.n	423c <_vfiprintf_r+0x12c>
    41e6:	9309      	str	r3, [sp, #36]	; 0x24
    41e8:	e028      	b.n	423c <_vfiprintf_r+0x12c>
    41ea:	4b51      	ldr	r3, [pc, #324]	; (4330 <_vfiprintf_r+0x220>)
    41ec:	429f      	cmp	r7, r3
    41ee:	d101      	bne.n	41f4 <_vfiprintf_r+0xe4>
    41f0:	68b7      	ldr	r7, [r6, #8]
    41f2:	e79e      	b.n	4132 <_vfiprintf_r+0x22>
    41f4:	4b4f      	ldr	r3, [pc, #316]	; (4334 <_vfiprintf_r+0x224>)
    41f6:	429f      	cmp	r7, r3
    41f8:	d19b      	bne.n	4132 <_vfiprintf_r+0x22>
    41fa:	68f7      	ldr	r7, [r6, #12]
    41fc:	e799      	b.n	4132 <_vfiprintf_r+0x22>
    41fe:	0039      	movs	r1, r7
    4200:	0030      	movs	r0, r6
    4202:	f000 fb15 	bl	4830 <__swsetup_r>
    4206:	2800      	cmp	r0, #0
    4208:	d099      	beq.n	413e <_vfiprintf_r+0x2e>
    420a:	2001      	movs	r0, #1
    420c:	4240      	negs	r0, r0
    420e:	b01f      	add	sp, #124	; 0x7c
    4210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4212:	2b25      	cmp	r3, #37	; 0x25
    4214:	d09f      	beq.n	4156 <_vfiprintf_r+0x46>
    4216:	3401      	adds	r4, #1
    4218:	e79a      	b.n	4150 <_vfiprintf_r+0x40>
    421a:	4b44      	ldr	r3, [pc, #272]	; (432c <_vfiprintf_r+0x21c>)
    421c:	6829      	ldr	r1, [r5, #0]
    421e:	1ac0      	subs	r0, r0, r3
    4220:	2301      	movs	r3, #1
    4222:	4083      	lsls	r3, r0
    4224:	430b      	orrs	r3, r1
    4226:	602b      	str	r3, [r5, #0]
    4228:	4664      	mov	r4, ip
    422a:	e7b7      	b.n	419c <_vfiprintf_r+0x8c>
    422c:	9b05      	ldr	r3, [sp, #20]
    422e:	1d18      	adds	r0, r3, #4
    4230:	681b      	ldr	r3, [r3, #0]
    4232:	9005      	str	r0, [sp, #20]
    4234:	2b00      	cmp	r3, #0
    4236:	db3a      	blt.n	42ae <_vfiprintf_r+0x19e>
    4238:	9309      	str	r3, [sp, #36]	; 0x24
    423a:	4664      	mov	r4, ip
    423c:	7823      	ldrb	r3, [r4, #0]
    423e:	2b2e      	cmp	r3, #46	; 0x2e
    4240:	d10b      	bne.n	425a <_vfiprintf_r+0x14a>
    4242:	7863      	ldrb	r3, [r4, #1]
    4244:	1c62      	adds	r2, r4, #1
    4246:	2b2a      	cmp	r3, #42	; 0x2a
    4248:	d13f      	bne.n	42ca <_vfiprintf_r+0x1ba>
    424a:	9b05      	ldr	r3, [sp, #20]
    424c:	3402      	adds	r4, #2
    424e:	1d1a      	adds	r2, r3, #4
    4250:	681b      	ldr	r3, [r3, #0]
    4252:	9205      	str	r2, [sp, #20]
    4254:	2b00      	cmp	r3, #0
    4256:	db35      	blt.n	42c4 <_vfiprintf_r+0x1b4>
    4258:	9307      	str	r3, [sp, #28]
    425a:	7821      	ldrb	r1, [r4, #0]
    425c:	2203      	movs	r2, #3
    425e:	4836      	ldr	r0, [pc, #216]	; (4338 <_vfiprintf_r+0x228>)
    4260:	f000 fba6 	bl	49b0 <memchr>
    4264:	2800      	cmp	r0, #0
    4266:	d007      	beq.n	4278 <_vfiprintf_r+0x168>
    4268:	4b33      	ldr	r3, [pc, #204]	; (4338 <_vfiprintf_r+0x228>)
    426a:	682a      	ldr	r2, [r5, #0]
    426c:	1ac0      	subs	r0, r0, r3
    426e:	2340      	movs	r3, #64	; 0x40
    4270:	4083      	lsls	r3, r0
    4272:	4313      	orrs	r3, r2
    4274:	602b      	str	r3, [r5, #0]
    4276:	3401      	adds	r4, #1
    4278:	7821      	ldrb	r1, [r4, #0]
    427a:	1c63      	adds	r3, r4, #1
    427c:	2206      	movs	r2, #6
    427e:	482f      	ldr	r0, [pc, #188]	; (433c <_vfiprintf_r+0x22c>)
    4280:	9302      	str	r3, [sp, #8]
    4282:	7629      	strb	r1, [r5, #24]
    4284:	f000 fb94 	bl	49b0 <memchr>
    4288:	2800      	cmp	r0, #0
    428a:	d044      	beq.n	4316 <_vfiprintf_r+0x206>
    428c:	4b2c      	ldr	r3, [pc, #176]	; (4340 <_vfiprintf_r+0x230>)
    428e:	2b00      	cmp	r3, #0
    4290:	d12f      	bne.n	42f2 <_vfiprintf_r+0x1e2>
    4292:	6829      	ldr	r1, [r5, #0]
    4294:	9b05      	ldr	r3, [sp, #20]
    4296:	2207      	movs	r2, #7
    4298:	05c9      	lsls	r1, r1, #23
    429a:	d528      	bpl.n	42ee <_vfiprintf_r+0x1de>
    429c:	189b      	adds	r3, r3, r2
    429e:	4393      	bics	r3, r2
    42a0:	3308      	adds	r3, #8
    42a2:	9305      	str	r3, [sp, #20]
    42a4:	696b      	ldr	r3, [r5, #20]
    42a6:	9a03      	ldr	r2, [sp, #12]
    42a8:	189b      	adds	r3, r3, r2
    42aa:	616b      	str	r3, [r5, #20]
    42ac:	e74f      	b.n	414e <_vfiprintf_r+0x3e>
    42ae:	425b      	negs	r3, r3
    42b0:	60eb      	str	r3, [r5, #12]
    42b2:	2302      	movs	r3, #2
    42b4:	430b      	orrs	r3, r1
    42b6:	602b      	str	r3, [r5, #0]
    42b8:	e7bf      	b.n	423a <_vfiprintf_r+0x12a>
    42ba:	434b      	muls	r3, r1
    42bc:	3401      	adds	r4, #1
    42be:	189b      	adds	r3, r3, r2
    42c0:	2001      	movs	r0, #1
    42c2:	e789      	b.n	41d8 <_vfiprintf_r+0xc8>
    42c4:	2301      	movs	r3, #1
    42c6:	425b      	negs	r3, r3
    42c8:	e7c6      	b.n	4258 <_vfiprintf_r+0x148>
    42ca:	2300      	movs	r3, #0
    42cc:	0014      	movs	r4, r2
    42ce:	200a      	movs	r0, #10
    42d0:	001a      	movs	r2, r3
    42d2:	606b      	str	r3, [r5, #4]
    42d4:	7821      	ldrb	r1, [r4, #0]
    42d6:	3930      	subs	r1, #48	; 0x30
    42d8:	2909      	cmp	r1, #9
    42da:	d903      	bls.n	42e4 <_vfiprintf_r+0x1d4>
    42dc:	2b00      	cmp	r3, #0
    42de:	d0bc      	beq.n	425a <_vfiprintf_r+0x14a>
    42e0:	9207      	str	r2, [sp, #28]
    42e2:	e7ba      	b.n	425a <_vfiprintf_r+0x14a>
    42e4:	4342      	muls	r2, r0
    42e6:	3401      	adds	r4, #1
    42e8:	1852      	adds	r2, r2, r1
    42ea:	2301      	movs	r3, #1
    42ec:	e7f2      	b.n	42d4 <_vfiprintf_r+0x1c4>
    42ee:	3307      	adds	r3, #7
    42f0:	e7d5      	b.n	429e <_vfiprintf_r+0x18e>
    42f2:	ab05      	add	r3, sp, #20
    42f4:	9300      	str	r3, [sp, #0]
    42f6:	003a      	movs	r2, r7
    42f8:	4b12      	ldr	r3, [pc, #72]	; (4344 <_vfiprintf_r+0x234>)
    42fa:	0029      	movs	r1, r5
    42fc:	0030      	movs	r0, r6
    42fe:	e000      	b.n	4302 <_vfiprintf_r+0x1f2>
    4300:	bf00      	nop
    4302:	9003      	str	r0, [sp, #12]
    4304:	9b03      	ldr	r3, [sp, #12]
    4306:	3301      	adds	r3, #1
    4308:	d1cc      	bne.n	42a4 <_vfiprintf_r+0x194>
    430a:	89bb      	ldrh	r3, [r7, #12]
    430c:	065b      	lsls	r3, r3, #25
    430e:	d500      	bpl.n	4312 <_vfiprintf_r+0x202>
    4310:	e77b      	b.n	420a <_vfiprintf_r+0xfa>
    4312:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4314:	e77b      	b.n	420e <_vfiprintf_r+0xfe>
    4316:	ab05      	add	r3, sp, #20
    4318:	9300      	str	r3, [sp, #0]
    431a:	003a      	movs	r2, r7
    431c:	4b09      	ldr	r3, [pc, #36]	; (4344 <_vfiprintf_r+0x234>)
    431e:	0029      	movs	r1, r5
    4320:	0030      	movs	r0, r6
    4322:	f000 f87f 	bl	4424 <_printf_i>
    4326:	e7ec      	b.n	4302 <_vfiprintf_r+0x1f2>
    4328:	00006d2c 	.word	0x00006d2c
    432c:	00006d6c 	.word	0x00006d6c
    4330:	00006d4c 	.word	0x00006d4c
    4334:	00006d0c 	.word	0x00006d0c
    4338:	00006d72 	.word	0x00006d72
    433c:	00006d76 	.word	0x00006d76
    4340:	00000000 	.word	0x00000000
    4344:	000040eb 	.word	0x000040eb

00004348 <_printf_common>:
    4348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    434a:	0015      	movs	r5, r2
    434c:	9301      	str	r3, [sp, #4]
    434e:	688a      	ldr	r2, [r1, #8]
    4350:	690b      	ldr	r3, [r1, #16]
    4352:	9000      	str	r0, [sp, #0]
    4354:	000c      	movs	r4, r1
    4356:	4293      	cmp	r3, r2
    4358:	da00      	bge.n	435c <_printf_common+0x14>
    435a:	0013      	movs	r3, r2
    435c:	0022      	movs	r2, r4
    435e:	602b      	str	r3, [r5, #0]
    4360:	3243      	adds	r2, #67	; 0x43
    4362:	7812      	ldrb	r2, [r2, #0]
    4364:	2a00      	cmp	r2, #0
    4366:	d001      	beq.n	436c <_printf_common+0x24>
    4368:	3301      	adds	r3, #1
    436a:	602b      	str	r3, [r5, #0]
    436c:	6823      	ldr	r3, [r4, #0]
    436e:	069b      	lsls	r3, r3, #26
    4370:	d502      	bpl.n	4378 <_printf_common+0x30>
    4372:	682b      	ldr	r3, [r5, #0]
    4374:	3302      	adds	r3, #2
    4376:	602b      	str	r3, [r5, #0]
    4378:	2706      	movs	r7, #6
    437a:	6823      	ldr	r3, [r4, #0]
    437c:	401f      	ands	r7, r3
    437e:	d027      	beq.n	43d0 <_printf_common+0x88>
    4380:	0023      	movs	r3, r4
    4382:	3343      	adds	r3, #67	; 0x43
    4384:	781b      	ldrb	r3, [r3, #0]
    4386:	1e5a      	subs	r2, r3, #1
    4388:	4193      	sbcs	r3, r2
    438a:	6822      	ldr	r2, [r4, #0]
    438c:	0692      	lsls	r2, r2, #26
    438e:	d430      	bmi.n	43f2 <_printf_common+0xaa>
    4390:	0022      	movs	r2, r4
    4392:	9901      	ldr	r1, [sp, #4]
    4394:	3243      	adds	r2, #67	; 0x43
    4396:	9800      	ldr	r0, [sp, #0]
    4398:	9e08      	ldr	r6, [sp, #32]
    439a:	47b0      	blx	r6
    439c:	1c43      	adds	r3, r0, #1
    439e:	d025      	beq.n	43ec <_printf_common+0xa4>
    43a0:	2306      	movs	r3, #6
    43a2:	6820      	ldr	r0, [r4, #0]
    43a4:	682a      	ldr	r2, [r5, #0]
    43a6:	68e1      	ldr	r1, [r4, #12]
    43a8:	4003      	ands	r3, r0
    43aa:	2500      	movs	r5, #0
    43ac:	2b04      	cmp	r3, #4
    43ae:	d103      	bne.n	43b8 <_printf_common+0x70>
    43b0:	1a8d      	subs	r5, r1, r2
    43b2:	43eb      	mvns	r3, r5
    43b4:	17db      	asrs	r3, r3, #31
    43b6:	401d      	ands	r5, r3
    43b8:	68a3      	ldr	r3, [r4, #8]
    43ba:	6922      	ldr	r2, [r4, #16]
    43bc:	4293      	cmp	r3, r2
    43be:	dd01      	ble.n	43c4 <_printf_common+0x7c>
    43c0:	1a9b      	subs	r3, r3, r2
    43c2:	18ed      	adds	r5, r5, r3
    43c4:	2700      	movs	r7, #0
    43c6:	42bd      	cmp	r5, r7
    43c8:	d120      	bne.n	440c <_printf_common+0xc4>
    43ca:	2000      	movs	r0, #0
    43cc:	e010      	b.n	43f0 <_printf_common+0xa8>
    43ce:	3701      	adds	r7, #1
    43d0:	68e3      	ldr	r3, [r4, #12]
    43d2:	682a      	ldr	r2, [r5, #0]
    43d4:	1a9b      	subs	r3, r3, r2
    43d6:	429f      	cmp	r7, r3
    43d8:	dad2      	bge.n	4380 <_printf_common+0x38>
    43da:	0022      	movs	r2, r4
    43dc:	2301      	movs	r3, #1
    43de:	3219      	adds	r2, #25
    43e0:	9901      	ldr	r1, [sp, #4]
    43e2:	9800      	ldr	r0, [sp, #0]
    43e4:	9e08      	ldr	r6, [sp, #32]
    43e6:	47b0      	blx	r6
    43e8:	1c43      	adds	r3, r0, #1
    43ea:	d1f0      	bne.n	43ce <_printf_common+0x86>
    43ec:	2001      	movs	r0, #1
    43ee:	4240      	negs	r0, r0
    43f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    43f2:	2030      	movs	r0, #48	; 0x30
    43f4:	18e1      	adds	r1, r4, r3
    43f6:	3143      	adds	r1, #67	; 0x43
    43f8:	7008      	strb	r0, [r1, #0]
    43fa:	0021      	movs	r1, r4
    43fc:	1c5a      	adds	r2, r3, #1
    43fe:	3145      	adds	r1, #69	; 0x45
    4400:	7809      	ldrb	r1, [r1, #0]
    4402:	18a2      	adds	r2, r4, r2
    4404:	3243      	adds	r2, #67	; 0x43
    4406:	3302      	adds	r3, #2
    4408:	7011      	strb	r1, [r2, #0]
    440a:	e7c1      	b.n	4390 <_printf_common+0x48>
    440c:	0022      	movs	r2, r4
    440e:	2301      	movs	r3, #1
    4410:	321a      	adds	r2, #26
    4412:	9901      	ldr	r1, [sp, #4]
    4414:	9800      	ldr	r0, [sp, #0]
    4416:	9e08      	ldr	r6, [sp, #32]
    4418:	47b0      	blx	r6
    441a:	1c43      	adds	r3, r0, #1
    441c:	d0e6      	beq.n	43ec <_printf_common+0xa4>
    441e:	3701      	adds	r7, #1
    4420:	e7d1      	b.n	43c6 <_printf_common+0x7e>
	...

00004424 <_printf_i>:
    4424:	b5f0      	push	{r4, r5, r6, r7, lr}
    4426:	b08b      	sub	sp, #44	; 0x2c
    4428:	9206      	str	r2, [sp, #24]
    442a:	000a      	movs	r2, r1
    442c:	3243      	adds	r2, #67	; 0x43
    442e:	9307      	str	r3, [sp, #28]
    4430:	9005      	str	r0, [sp, #20]
    4432:	9204      	str	r2, [sp, #16]
    4434:	7e0a      	ldrb	r2, [r1, #24]
    4436:	000c      	movs	r4, r1
    4438:	9b10      	ldr	r3, [sp, #64]	; 0x40
    443a:	2a6e      	cmp	r2, #110	; 0x6e
    443c:	d100      	bne.n	4440 <_printf_i+0x1c>
    443e:	e08f      	b.n	4560 <_printf_i+0x13c>
    4440:	d817      	bhi.n	4472 <_printf_i+0x4e>
    4442:	2a63      	cmp	r2, #99	; 0x63
    4444:	d02c      	beq.n	44a0 <_printf_i+0x7c>
    4446:	d808      	bhi.n	445a <_printf_i+0x36>
    4448:	2a00      	cmp	r2, #0
    444a:	d100      	bne.n	444e <_printf_i+0x2a>
    444c:	e099      	b.n	4582 <_printf_i+0x15e>
    444e:	2a58      	cmp	r2, #88	; 0x58
    4450:	d054      	beq.n	44fc <_printf_i+0xd8>
    4452:	0026      	movs	r6, r4
    4454:	3642      	adds	r6, #66	; 0x42
    4456:	7032      	strb	r2, [r6, #0]
    4458:	e029      	b.n	44ae <_printf_i+0x8a>
    445a:	2a64      	cmp	r2, #100	; 0x64
    445c:	d001      	beq.n	4462 <_printf_i+0x3e>
    445e:	2a69      	cmp	r2, #105	; 0x69
    4460:	d1f7      	bne.n	4452 <_printf_i+0x2e>
    4462:	6821      	ldr	r1, [r4, #0]
    4464:	681a      	ldr	r2, [r3, #0]
    4466:	0608      	lsls	r0, r1, #24
    4468:	d523      	bpl.n	44b2 <_printf_i+0x8e>
    446a:	1d11      	adds	r1, r2, #4
    446c:	6019      	str	r1, [r3, #0]
    446e:	6815      	ldr	r5, [r2, #0]
    4470:	e025      	b.n	44be <_printf_i+0x9a>
    4472:	2a73      	cmp	r2, #115	; 0x73
    4474:	d100      	bne.n	4478 <_printf_i+0x54>
    4476:	e088      	b.n	458a <_printf_i+0x166>
    4478:	d808      	bhi.n	448c <_printf_i+0x68>
    447a:	2a6f      	cmp	r2, #111	; 0x6f
    447c:	d029      	beq.n	44d2 <_printf_i+0xae>
    447e:	2a70      	cmp	r2, #112	; 0x70
    4480:	d1e7      	bne.n	4452 <_printf_i+0x2e>
    4482:	2220      	movs	r2, #32
    4484:	6809      	ldr	r1, [r1, #0]
    4486:	430a      	orrs	r2, r1
    4488:	6022      	str	r2, [r4, #0]
    448a:	e003      	b.n	4494 <_printf_i+0x70>
    448c:	2a75      	cmp	r2, #117	; 0x75
    448e:	d020      	beq.n	44d2 <_printf_i+0xae>
    4490:	2a78      	cmp	r2, #120	; 0x78
    4492:	d1de      	bne.n	4452 <_printf_i+0x2e>
    4494:	0022      	movs	r2, r4
    4496:	2178      	movs	r1, #120	; 0x78
    4498:	3245      	adds	r2, #69	; 0x45
    449a:	7011      	strb	r1, [r2, #0]
    449c:	4a6c      	ldr	r2, [pc, #432]	; (4650 <_printf_i+0x22c>)
    449e:	e030      	b.n	4502 <_printf_i+0xde>
    44a0:	000e      	movs	r6, r1
    44a2:	681a      	ldr	r2, [r3, #0]
    44a4:	3642      	adds	r6, #66	; 0x42
    44a6:	1d11      	adds	r1, r2, #4
    44a8:	6019      	str	r1, [r3, #0]
    44aa:	6813      	ldr	r3, [r2, #0]
    44ac:	7033      	strb	r3, [r6, #0]
    44ae:	2301      	movs	r3, #1
    44b0:	e079      	b.n	45a6 <_printf_i+0x182>
    44b2:	0649      	lsls	r1, r1, #25
    44b4:	d5d9      	bpl.n	446a <_printf_i+0x46>
    44b6:	1d11      	adds	r1, r2, #4
    44b8:	6019      	str	r1, [r3, #0]
    44ba:	2300      	movs	r3, #0
    44bc:	5ed5      	ldrsh	r5, [r2, r3]
    44be:	2d00      	cmp	r5, #0
    44c0:	da03      	bge.n	44ca <_printf_i+0xa6>
    44c2:	232d      	movs	r3, #45	; 0x2d
    44c4:	9a04      	ldr	r2, [sp, #16]
    44c6:	426d      	negs	r5, r5
    44c8:	7013      	strb	r3, [r2, #0]
    44ca:	4b62      	ldr	r3, [pc, #392]	; (4654 <_printf_i+0x230>)
    44cc:	270a      	movs	r7, #10
    44ce:	9303      	str	r3, [sp, #12]
    44d0:	e02f      	b.n	4532 <_printf_i+0x10e>
    44d2:	6820      	ldr	r0, [r4, #0]
    44d4:	6819      	ldr	r1, [r3, #0]
    44d6:	0605      	lsls	r5, r0, #24
    44d8:	d503      	bpl.n	44e2 <_printf_i+0xbe>
    44da:	1d08      	adds	r0, r1, #4
    44dc:	6018      	str	r0, [r3, #0]
    44de:	680d      	ldr	r5, [r1, #0]
    44e0:	e005      	b.n	44ee <_printf_i+0xca>
    44e2:	0640      	lsls	r0, r0, #25
    44e4:	d5f9      	bpl.n	44da <_printf_i+0xb6>
    44e6:	680d      	ldr	r5, [r1, #0]
    44e8:	1d08      	adds	r0, r1, #4
    44ea:	6018      	str	r0, [r3, #0]
    44ec:	b2ad      	uxth	r5, r5
    44ee:	4b59      	ldr	r3, [pc, #356]	; (4654 <_printf_i+0x230>)
    44f0:	2708      	movs	r7, #8
    44f2:	9303      	str	r3, [sp, #12]
    44f4:	2a6f      	cmp	r2, #111	; 0x6f
    44f6:	d018      	beq.n	452a <_printf_i+0x106>
    44f8:	270a      	movs	r7, #10
    44fa:	e016      	b.n	452a <_printf_i+0x106>
    44fc:	3145      	adds	r1, #69	; 0x45
    44fe:	700a      	strb	r2, [r1, #0]
    4500:	4a54      	ldr	r2, [pc, #336]	; (4654 <_printf_i+0x230>)
    4502:	9203      	str	r2, [sp, #12]
    4504:	681a      	ldr	r2, [r3, #0]
    4506:	6821      	ldr	r1, [r4, #0]
    4508:	1d10      	adds	r0, r2, #4
    450a:	6018      	str	r0, [r3, #0]
    450c:	6815      	ldr	r5, [r2, #0]
    450e:	0608      	lsls	r0, r1, #24
    4510:	d522      	bpl.n	4558 <_printf_i+0x134>
    4512:	07cb      	lsls	r3, r1, #31
    4514:	d502      	bpl.n	451c <_printf_i+0xf8>
    4516:	2320      	movs	r3, #32
    4518:	4319      	orrs	r1, r3
    451a:	6021      	str	r1, [r4, #0]
    451c:	2710      	movs	r7, #16
    451e:	2d00      	cmp	r5, #0
    4520:	d103      	bne.n	452a <_printf_i+0x106>
    4522:	2320      	movs	r3, #32
    4524:	6822      	ldr	r2, [r4, #0]
    4526:	439a      	bics	r2, r3
    4528:	6022      	str	r2, [r4, #0]
    452a:	0023      	movs	r3, r4
    452c:	2200      	movs	r2, #0
    452e:	3343      	adds	r3, #67	; 0x43
    4530:	701a      	strb	r2, [r3, #0]
    4532:	6863      	ldr	r3, [r4, #4]
    4534:	60a3      	str	r3, [r4, #8]
    4536:	2b00      	cmp	r3, #0
    4538:	db5c      	blt.n	45f4 <_printf_i+0x1d0>
    453a:	2204      	movs	r2, #4
    453c:	6821      	ldr	r1, [r4, #0]
    453e:	4391      	bics	r1, r2
    4540:	6021      	str	r1, [r4, #0]
    4542:	2d00      	cmp	r5, #0
    4544:	d158      	bne.n	45f8 <_printf_i+0x1d4>
    4546:	9e04      	ldr	r6, [sp, #16]
    4548:	2b00      	cmp	r3, #0
    454a:	d064      	beq.n	4616 <_printf_i+0x1f2>
    454c:	0026      	movs	r6, r4
    454e:	9b03      	ldr	r3, [sp, #12]
    4550:	3642      	adds	r6, #66	; 0x42
    4552:	781b      	ldrb	r3, [r3, #0]
    4554:	7033      	strb	r3, [r6, #0]
    4556:	e05e      	b.n	4616 <_printf_i+0x1f2>
    4558:	0648      	lsls	r0, r1, #25
    455a:	d5da      	bpl.n	4512 <_printf_i+0xee>
    455c:	b2ad      	uxth	r5, r5
    455e:	e7d8      	b.n	4512 <_printf_i+0xee>
    4560:	6809      	ldr	r1, [r1, #0]
    4562:	681a      	ldr	r2, [r3, #0]
    4564:	0608      	lsls	r0, r1, #24
    4566:	d505      	bpl.n	4574 <_printf_i+0x150>
    4568:	1d11      	adds	r1, r2, #4
    456a:	6019      	str	r1, [r3, #0]
    456c:	6813      	ldr	r3, [r2, #0]
    456e:	6962      	ldr	r2, [r4, #20]
    4570:	601a      	str	r2, [r3, #0]
    4572:	e006      	b.n	4582 <_printf_i+0x15e>
    4574:	0649      	lsls	r1, r1, #25
    4576:	d5f7      	bpl.n	4568 <_printf_i+0x144>
    4578:	1d11      	adds	r1, r2, #4
    457a:	6019      	str	r1, [r3, #0]
    457c:	6813      	ldr	r3, [r2, #0]
    457e:	8aa2      	ldrh	r2, [r4, #20]
    4580:	801a      	strh	r2, [r3, #0]
    4582:	2300      	movs	r3, #0
    4584:	9e04      	ldr	r6, [sp, #16]
    4586:	6123      	str	r3, [r4, #16]
    4588:	e054      	b.n	4634 <_printf_i+0x210>
    458a:	681a      	ldr	r2, [r3, #0]
    458c:	1d11      	adds	r1, r2, #4
    458e:	6019      	str	r1, [r3, #0]
    4590:	6816      	ldr	r6, [r2, #0]
    4592:	2100      	movs	r1, #0
    4594:	6862      	ldr	r2, [r4, #4]
    4596:	0030      	movs	r0, r6
    4598:	f000 fa0a 	bl	49b0 <memchr>
    459c:	2800      	cmp	r0, #0
    459e:	d001      	beq.n	45a4 <_printf_i+0x180>
    45a0:	1b80      	subs	r0, r0, r6
    45a2:	6060      	str	r0, [r4, #4]
    45a4:	6863      	ldr	r3, [r4, #4]
    45a6:	6123      	str	r3, [r4, #16]
    45a8:	2300      	movs	r3, #0
    45aa:	9a04      	ldr	r2, [sp, #16]
    45ac:	7013      	strb	r3, [r2, #0]
    45ae:	e041      	b.n	4634 <_printf_i+0x210>
    45b0:	6923      	ldr	r3, [r4, #16]
    45b2:	0032      	movs	r2, r6
    45b4:	9906      	ldr	r1, [sp, #24]
    45b6:	9805      	ldr	r0, [sp, #20]
    45b8:	9d07      	ldr	r5, [sp, #28]
    45ba:	47a8      	blx	r5
    45bc:	1c43      	adds	r3, r0, #1
    45be:	d043      	beq.n	4648 <_printf_i+0x224>
    45c0:	6823      	ldr	r3, [r4, #0]
    45c2:	2500      	movs	r5, #0
    45c4:	079b      	lsls	r3, r3, #30
    45c6:	d40f      	bmi.n	45e8 <_printf_i+0x1c4>
    45c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    45ca:	68e0      	ldr	r0, [r4, #12]
    45cc:	4298      	cmp	r0, r3
    45ce:	da3d      	bge.n	464c <_printf_i+0x228>
    45d0:	0018      	movs	r0, r3
    45d2:	e03b      	b.n	464c <_printf_i+0x228>
    45d4:	0022      	movs	r2, r4
    45d6:	2301      	movs	r3, #1
    45d8:	3219      	adds	r2, #25
    45da:	9906      	ldr	r1, [sp, #24]
    45dc:	9805      	ldr	r0, [sp, #20]
    45de:	9e07      	ldr	r6, [sp, #28]
    45e0:	47b0      	blx	r6
    45e2:	1c43      	adds	r3, r0, #1
    45e4:	d030      	beq.n	4648 <_printf_i+0x224>
    45e6:	3501      	adds	r5, #1
    45e8:	68e3      	ldr	r3, [r4, #12]
    45ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
    45ec:	1a9b      	subs	r3, r3, r2
    45ee:	429d      	cmp	r5, r3
    45f0:	dbf0      	blt.n	45d4 <_printf_i+0x1b0>
    45f2:	e7e9      	b.n	45c8 <_printf_i+0x1a4>
    45f4:	2d00      	cmp	r5, #0
    45f6:	d0a9      	beq.n	454c <_printf_i+0x128>
    45f8:	9e04      	ldr	r6, [sp, #16]
    45fa:	0028      	movs	r0, r5
    45fc:	0039      	movs	r1, r7
    45fe:	f7fe fff9 	bl	35f4 <__aeabi_uidivmod>
    4602:	9b03      	ldr	r3, [sp, #12]
    4604:	3e01      	subs	r6, #1
    4606:	5c5b      	ldrb	r3, [r3, r1]
    4608:	0028      	movs	r0, r5
    460a:	7033      	strb	r3, [r6, #0]
    460c:	0039      	movs	r1, r7
    460e:	f7fe ff6b 	bl	34e8 <__udivsi3>
    4612:	1e05      	subs	r5, r0, #0
    4614:	d1f1      	bne.n	45fa <_printf_i+0x1d6>
    4616:	2f08      	cmp	r7, #8
    4618:	d109      	bne.n	462e <_printf_i+0x20a>
    461a:	6823      	ldr	r3, [r4, #0]
    461c:	07db      	lsls	r3, r3, #31
    461e:	d506      	bpl.n	462e <_printf_i+0x20a>
    4620:	6863      	ldr	r3, [r4, #4]
    4622:	6922      	ldr	r2, [r4, #16]
    4624:	4293      	cmp	r3, r2
    4626:	dc02      	bgt.n	462e <_printf_i+0x20a>
    4628:	2330      	movs	r3, #48	; 0x30
    462a:	3e01      	subs	r6, #1
    462c:	7033      	strb	r3, [r6, #0]
    462e:	9b04      	ldr	r3, [sp, #16]
    4630:	1b9b      	subs	r3, r3, r6
    4632:	6123      	str	r3, [r4, #16]
    4634:	9b07      	ldr	r3, [sp, #28]
    4636:	aa09      	add	r2, sp, #36	; 0x24
    4638:	9300      	str	r3, [sp, #0]
    463a:	0021      	movs	r1, r4
    463c:	9b06      	ldr	r3, [sp, #24]
    463e:	9805      	ldr	r0, [sp, #20]
    4640:	f7ff fe82 	bl	4348 <_printf_common>
    4644:	1c43      	adds	r3, r0, #1
    4646:	d1b3      	bne.n	45b0 <_printf_i+0x18c>
    4648:	2001      	movs	r0, #1
    464a:	4240      	negs	r0, r0
    464c:	b00b      	add	sp, #44	; 0x2c
    464e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4650:	00006d8e 	.word	0x00006d8e
    4654:	00006d7d 	.word	0x00006d7d

00004658 <_putc_r>:
    4658:	b570      	push	{r4, r5, r6, lr}
    465a:	0006      	movs	r6, r0
    465c:	000d      	movs	r5, r1
    465e:	0014      	movs	r4, r2
    4660:	2800      	cmp	r0, #0
    4662:	d004      	beq.n	466e <_putc_r+0x16>
    4664:	6983      	ldr	r3, [r0, #24]
    4666:	2b00      	cmp	r3, #0
    4668:	d101      	bne.n	466e <_putc_r+0x16>
    466a:	f7ff fc25 	bl	3eb8 <__sinit>
    466e:	4b12      	ldr	r3, [pc, #72]	; (46b8 <_putc_r+0x60>)
    4670:	429c      	cmp	r4, r3
    4672:	d111      	bne.n	4698 <_putc_r+0x40>
    4674:	6874      	ldr	r4, [r6, #4]
    4676:	68a3      	ldr	r3, [r4, #8]
    4678:	3b01      	subs	r3, #1
    467a:	60a3      	str	r3, [r4, #8]
    467c:	2b00      	cmp	r3, #0
    467e:	da05      	bge.n	468c <_putc_r+0x34>
    4680:	69a2      	ldr	r2, [r4, #24]
    4682:	4293      	cmp	r3, r2
    4684:	db12      	blt.n	46ac <_putc_r+0x54>
    4686:	b2eb      	uxtb	r3, r5
    4688:	2b0a      	cmp	r3, #10
    468a:	d00f      	beq.n	46ac <_putc_r+0x54>
    468c:	6823      	ldr	r3, [r4, #0]
    468e:	b2e8      	uxtb	r0, r5
    4690:	1c5a      	adds	r2, r3, #1
    4692:	6022      	str	r2, [r4, #0]
    4694:	701d      	strb	r5, [r3, #0]
    4696:	bd70      	pop	{r4, r5, r6, pc}
    4698:	4b08      	ldr	r3, [pc, #32]	; (46bc <_putc_r+0x64>)
    469a:	429c      	cmp	r4, r3
    469c:	d101      	bne.n	46a2 <_putc_r+0x4a>
    469e:	68b4      	ldr	r4, [r6, #8]
    46a0:	e7e9      	b.n	4676 <_putc_r+0x1e>
    46a2:	4b07      	ldr	r3, [pc, #28]	; (46c0 <_putc_r+0x68>)
    46a4:	429c      	cmp	r4, r3
    46a6:	d1e6      	bne.n	4676 <_putc_r+0x1e>
    46a8:	68f4      	ldr	r4, [r6, #12]
    46aa:	e7e4      	b.n	4676 <_putc_r+0x1e>
    46ac:	0022      	movs	r2, r4
    46ae:	0029      	movs	r1, r5
    46b0:	0030      	movs	r0, r6
    46b2:	f000 f853 	bl	475c <__swbuf_r>
    46b6:	e7ee      	b.n	4696 <_putc_r+0x3e>
    46b8:	00006d2c 	.word	0x00006d2c
    46bc:	00006d4c 	.word	0x00006d4c
    46c0:	00006d0c 	.word	0x00006d0c

000046c4 <__sread>:
    46c4:	b570      	push	{r4, r5, r6, lr}
    46c6:	000c      	movs	r4, r1
    46c8:	250e      	movs	r5, #14
    46ca:	5f49      	ldrsh	r1, [r1, r5]
    46cc:	f000 f97c 	bl	49c8 <_read_r>
    46d0:	2800      	cmp	r0, #0
    46d2:	db03      	blt.n	46dc <__sread+0x18>
    46d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    46d6:	181b      	adds	r3, r3, r0
    46d8:	6563      	str	r3, [r4, #84]	; 0x54
    46da:	bd70      	pop	{r4, r5, r6, pc}
    46dc:	89a3      	ldrh	r3, [r4, #12]
    46de:	4a02      	ldr	r2, [pc, #8]	; (46e8 <__sread+0x24>)
    46e0:	4013      	ands	r3, r2
    46e2:	81a3      	strh	r3, [r4, #12]
    46e4:	e7f9      	b.n	46da <__sread+0x16>
    46e6:	46c0      	nop			; (mov r8, r8)
    46e8:	ffffefff 	.word	0xffffefff

000046ec <__swrite>:
    46ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46ee:	001f      	movs	r7, r3
    46f0:	898b      	ldrh	r3, [r1, #12]
    46f2:	0005      	movs	r5, r0
    46f4:	000c      	movs	r4, r1
    46f6:	0016      	movs	r6, r2
    46f8:	05db      	lsls	r3, r3, #23
    46fa:	d505      	bpl.n	4708 <__swrite+0x1c>
    46fc:	230e      	movs	r3, #14
    46fe:	5ec9      	ldrsh	r1, [r1, r3]
    4700:	2200      	movs	r2, #0
    4702:	2302      	movs	r3, #2
    4704:	f000 f940 	bl	4988 <_lseek_r>
    4708:	89a3      	ldrh	r3, [r4, #12]
    470a:	4a05      	ldr	r2, [pc, #20]	; (4720 <__swrite+0x34>)
    470c:	0028      	movs	r0, r5
    470e:	4013      	ands	r3, r2
    4710:	81a3      	strh	r3, [r4, #12]
    4712:	0032      	movs	r2, r6
    4714:	230e      	movs	r3, #14
    4716:	5ee1      	ldrsh	r1, [r4, r3]
    4718:	003b      	movs	r3, r7
    471a:	f000 f875 	bl	4808 <_write_r>
    471e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4720:	ffffefff 	.word	0xffffefff

00004724 <__sseek>:
    4724:	b570      	push	{r4, r5, r6, lr}
    4726:	000c      	movs	r4, r1
    4728:	250e      	movs	r5, #14
    472a:	5f49      	ldrsh	r1, [r1, r5]
    472c:	f000 f92c 	bl	4988 <_lseek_r>
    4730:	89a3      	ldrh	r3, [r4, #12]
    4732:	1c42      	adds	r2, r0, #1
    4734:	d103      	bne.n	473e <__sseek+0x1a>
    4736:	4a05      	ldr	r2, [pc, #20]	; (474c <__sseek+0x28>)
    4738:	4013      	ands	r3, r2
    473a:	81a3      	strh	r3, [r4, #12]
    473c:	bd70      	pop	{r4, r5, r6, pc}
    473e:	2280      	movs	r2, #128	; 0x80
    4740:	0152      	lsls	r2, r2, #5
    4742:	4313      	orrs	r3, r2
    4744:	81a3      	strh	r3, [r4, #12]
    4746:	6560      	str	r0, [r4, #84]	; 0x54
    4748:	e7f8      	b.n	473c <__sseek+0x18>
    474a:	46c0      	nop			; (mov r8, r8)
    474c:	ffffefff 	.word	0xffffefff

00004750 <__sclose>:
    4750:	b510      	push	{r4, lr}
    4752:	230e      	movs	r3, #14
    4754:	5ec9      	ldrsh	r1, [r1, r3]
    4756:	f000 f8e1 	bl	491c <_close_r>
    475a:	bd10      	pop	{r4, pc}

0000475c <__swbuf_r>:
    475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    475e:	0005      	movs	r5, r0
    4760:	000e      	movs	r6, r1
    4762:	0014      	movs	r4, r2
    4764:	2800      	cmp	r0, #0
    4766:	d004      	beq.n	4772 <__swbuf_r+0x16>
    4768:	6983      	ldr	r3, [r0, #24]
    476a:	2b00      	cmp	r3, #0
    476c:	d101      	bne.n	4772 <__swbuf_r+0x16>
    476e:	f7ff fba3 	bl	3eb8 <__sinit>
    4772:	4b22      	ldr	r3, [pc, #136]	; (47fc <__swbuf_r+0xa0>)
    4774:	429c      	cmp	r4, r3
    4776:	d12d      	bne.n	47d4 <__swbuf_r+0x78>
    4778:	686c      	ldr	r4, [r5, #4]
    477a:	69a3      	ldr	r3, [r4, #24]
    477c:	60a3      	str	r3, [r4, #8]
    477e:	89a3      	ldrh	r3, [r4, #12]
    4780:	071b      	lsls	r3, r3, #28
    4782:	d531      	bpl.n	47e8 <__swbuf_r+0x8c>
    4784:	6923      	ldr	r3, [r4, #16]
    4786:	2b00      	cmp	r3, #0
    4788:	d02e      	beq.n	47e8 <__swbuf_r+0x8c>
    478a:	6823      	ldr	r3, [r4, #0]
    478c:	6922      	ldr	r2, [r4, #16]
    478e:	b2f7      	uxtb	r7, r6
    4790:	1a98      	subs	r0, r3, r2
    4792:	6963      	ldr	r3, [r4, #20]
    4794:	b2f6      	uxtb	r6, r6
    4796:	4298      	cmp	r0, r3
    4798:	db05      	blt.n	47a6 <__swbuf_r+0x4a>
    479a:	0021      	movs	r1, r4
    479c:	0028      	movs	r0, r5
    479e:	f7ff fb1d 	bl	3ddc <_fflush_r>
    47a2:	2800      	cmp	r0, #0
    47a4:	d126      	bne.n	47f4 <__swbuf_r+0x98>
    47a6:	68a3      	ldr	r3, [r4, #8]
    47a8:	3001      	adds	r0, #1
    47aa:	3b01      	subs	r3, #1
    47ac:	60a3      	str	r3, [r4, #8]
    47ae:	6823      	ldr	r3, [r4, #0]
    47b0:	1c5a      	adds	r2, r3, #1
    47b2:	6022      	str	r2, [r4, #0]
    47b4:	701f      	strb	r7, [r3, #0]
    47b6:	6963      	ldr	r3, [r4, #20]
    47b8:	4298      	cmp	r0, r3
    47ba:	d004      	beq.n	47c6 <__swbuf_r+0x6a>
    47bc:	89a3      	ldrh	r3, [r4, #12]
    47be:	07db      	lsls	r3, r3, #31
    47c0:	d51a      	bpl.n	47f8 <__swbuf_r+0x9c>
    47c2:	2e0a      	cmp	r6, #10
    47c4:	d118      	bne.n	47f8 <__swbuf_r+0x9c>
    47c6:	0021      	movs	r1, r4
    47c8:	0028      	movs	r0, r5
    47ca:	f7ff fb07 	bl	3ddc <_fflush_r>
    47ce:	2800      	cmp	r0, #0
    47d0:	d012      	beq.n	47f8 <__swbuf_r+0x9c>
    47d2:	e00f      	b.n	47f4 <__swbuf_r+0x98>
    47d4:	4b0a      	ldr	r3, [pc, #40]	; (4800 <__swbuf_r+0xa4>)
    47d6:	429c      	cmp	r4, r3
    47d8:	d101      	bne.n	47de <__swbuf_r+0x82>
    47da:	68ac      	ldr	r4, [r5, #8]
    47dc:	e7cd      	b.n	477a <__swbuf_r+0x1e>
    47de:	4b09      	ldr	r3, [pc, #36]	; (4804 <__swbuf_r+0xa8>)
    47e0:	429c      	cmp	r4, r3
    47e2:	d1ca      	bne.n	477a <__swbuf_r+0x1e>
    47e4:	68ec      	ldr	r4, [r5, #12]
    47e6:	e7c8      	b.n	477a <__swbuf_r+0x1e>
    47e8:	0021      	movs	r1, r4
    47ea:	0028      	movs	r0, r5
    47ec:	f000 f820 	bl	4830 <__swsetup_r>
    47f0:	2800      	cmp	r0, #0
    47f2:	d0ca      	beq.n	478a <__swbuf_r+0x2e>
    47f4:	2601      	movs	r6, #1
    47f6:	4276      	negs	r6, r6
    47f8:	0030      	movs	r0, r6
    47fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47fc:	00006d2c 	.word	0x00006d2c
    4800:	00006d4c 	.word	0x00006d4c
    4804:	00006d0c 	.word	0x00006d0c

00004808 <_write_r>:
    4808:	b570      	push	{r4, r5, r6, lr}
    480a:	0005      	movs	r5, r0
    480c:	0008      	movs	r0, r1
    480e:	0011      	movs	r1, r2
    4810:	2200      	movs	r2, #0
    4812:	4c06      	ldr	r4, [pc, #24]	; (482c <_write_r+0x24>)
    4814:	6022      	str	r2, [r4, #0]
    4816:	001a      	movs	r2, r3
    4818:	f7fd fc7c 	bl	2114 <_write>
    481c:	1c43      	adds	r3, r0, #1
    481e:	d103      	bne.n	4828 <_write_r+0x20>
    4820:	6823      	ldr	r3, [r4, #0]
    4822:	2b00      	cmp	r3, #0
    4824:	d000      	beq.n	4828 <_write_r+0x20>
    4826:	602b      	str	r3, [r5, #0]
    4828:	bd70      	pop	{r4, r5, r6, pc}
    482a:	46c0      	nop			; (mov r8, r8)
    482c:	20000acc 	.word	0x20000acc

00004830 <__swsetup_r>:
    4830:	4b36      	ldr	r3, [pc, #216]	; (490c <__swsetup_r+0xdc>)
    4832:	b570      	push	{r4, r5, r6, lr}
    4834:	681d      	ldr	r5, [r3, #0]
    4836:	0006      	movs	r6, r0
    4838:	000c      	movs	r4, r1
    483a:	2d00      	cmp	r5, #0
    483c:	d005      	beq.n	484a <__swsetup_r+0x1a>
    483e:	69ab      	ldr	r3, [r5, #24]
    4840:	2b00      	cmp	r3, #0
    4842:	d102      	bne.n	484a <__swsetup_r+0x1a>
    4844:	0028      	movs	r0, r5
    4846:	f7ff fb37 	bl	3eb8 <__sinit>
    484a:	4b31      	ldr	r3, [pc, #196]	; (4910 <__swsetup_r+0xe0>)
    484c:	429c      	cmp	r4, r3
    484e:	d10f      	bne.n	4870 <__swsetup_r+0x40>
    4850:	686c      	ldr	r4, [r5, #4]
    4852:	230c      	movs	r3, #12
    4854:	5ee2      	ldrsh	r2, [r4, r3]
    4856:	b293      	uxth	r3, r2
    4858:	0719      	lsls	r1, r3, #28
    485a:	d42d      	bmi.n	48b8 <__swsetup_r+0x88>
    485c:	06d9      	lsls	r1, r3, #27
    485e:	d411      	bmi.n	4884 <__swsetup_r+0x54>
    4860:	2309      	movs	r3, #9
    4862:	2001      	movs	r0, #1
    4864:	6033      	str	r3, [r6, #0]
    4866:	3337      	adds	r3, #55	; 0x37
    4868:	4313      	orrs	r3, r2
    486a:	81a3      	strh	r3, [r4, #12]
    486c:	4240      	negs	r0, r0
    486e:	bd70      	pop	{r4, r5, r6, pc}
    4870:	4b28      	ldr	r3, [pc, #160]	; (4914 <__swsetup_r+0xe4>)
    4872:	429c      	cmp	r4, r3
    4874:	d101      	bne.n	487a <__swsetup_r+0x4a>
    4876:	68ac      	ldr	r4, [r5, #8]
    4878:	e7eb      	b.n	4852 <__swsetup_r+0x22>
    487a:	4b27      	ldr	r3, [pc, #156]	; (4918 <__swsetup_r+0xe8>)
    487c:	429c      	cmp	r4, r3
    487e:	d1e8      	bne.n	4852 <__swsetup_r+0x22>
    4880:	68ec      	ldr	r4, [r5, #12]
    4882:	e7e6      	b.n	4852 <__swsetup_r+0x22>
    4884:	075b      	lsls	r3, r3, #29
    4886:	d513      	bpl.n	48b0 <__swsetup_r+0x80>
    4888:	6b61      	ldr	r1, [r4, #52]	; 0x34
    488a:	2900      	cmp	r1, #0
    488c:	d008      	beq.n	48a0 <__swsetup_r+0x70>
    488e:	0023      	movs	r3, r4
    4890:	3344      	adds	r3, #68	; 0x44
    4892:	4299      	cmp	r1, r3
    4894:	d002      	beq.n	489c <__swsetup_r+0x6c>
    4896:	0030      	movs	r0, r6
    4898:	f7ff f806 	bl	38a8 <_free_r>
    489c:	2300      	movs	r3, #0
    489e:	6363      	str	r3, [r4, #52]	; 0x34
    48a0:	2224      	movs	r2, #36	; 0x24
    48a2:	89a3      	ldrh	r3, [r4, #12]
    48a4:	4393      	bics	r3, r2
    48a6:	81a3      	strh	r3, [r4, #12]
    48a8:	2300      	movs	r3, #0
    48aa:	6063      	str	r3, [r4, #4]
    48ac:	6923      	ldr	r3, [r4, #16]
    48ae:	6023      	str	r3, [r4, #0]
    48b0:	2308      	movs	r3, #8
    48b2:	89a2      	ldrh	r2, [r4, #12]
    48b4:	4313      	orrs	r3, r2
    48b6:	81a3      	strh	r3, [r4, #12]
    48b8:	6923      	ldr	r3, [r4, #16]
    48ba:	2b00      	cmp	r3, #0
    48bc:	d10b      	bne.n	48d6 <__swsetup_r+0xa6>
    48be:	21a0      	movs	r1, #160	; 0xa0
    48c0:	2280      	movs	r2, #128	; 0x80
    48c2:	89a3      	ldrh	r3, [r4, #12]
    48c4:	0089      	lsls	r1, r1, #2
    48c6:	0092      	lsls	r2, r2, #2
    48c8:	400b      	ands	r3, r1
    48ca:	4293      	cmp	r3, r2
    48cc:	d003      	beq.n	48d6 <__swsetup_r+0xa6>
    48ce:	0021      	movs	r1, r4
    48d0:	0030      	movs	r0, r6
    48d2:	f7ff fbaf 	bl	4034 <__smakebuf_r>
    48d6:	2301      	movs	r3, #1
    48d8:	89a2      	ldrh	r2, [r4, #12]
    48da:	4013      	ands	r3, r2
    48dc:	d011      	beq.n	4902 <__swsetup_r+0xd2>
    48de:	2300      	movs	r3, #0
    48e0:	60a3      	str	r3, [r4, #8]
    48e2:	6963      	ldr	r3, [r4, #20]
    48e4:	425b      	negs	r3, r3
    48e6:	61a3      	str	r3, [r4, #24]
    48e8:	2000      	movs	r0, #0
    48ea:	6923      	ldr	r3, [r4, #16]
    48ec:	4283      	cmp	r3, r0
    48ee:	d1be      	bne.n	486e <__swsetup_r+0x3e>
    48f0:	230c      	movs	r3, #12
    48f2:	5ee2      	ldrsh	r2, [r4, r3]
    48f4:	0613      	lsls	r3, r2, #24
    48f6:	d5ba      	bpl.n	486e <__swsetup_r+0x3e>
    48f8:	2340      	movs	r3, #64	; 0x40
    48fa:	4313      	orrs	r3, r2
    48fc:	81a3      	strh	r3, [r4, #12]
    48fe:	3801      	subs	r0, #1
    4900:	e7b5      	b.n	486e <__swsetup_r+0x3e>
    4902:	0792      	lsls	r2, r2, #30
    4904:	d400      	bmi.n	4908 <__swsetup_r+0xd8>
    4906:	6963      	ldr	r3, [r4, #20]
    4908:	60a3      	str	r3, [r4, #8]
    490a:	e7ed      	b.n	48e8 <__swsetup_r+0xb8>
    490c:	20000164 	.word	0x20000164
    4910:	00006d2c 	.word	0x00006d2c
    4914:	00006d4c 	.word	0x00006d4c
    4918:	00006d0c 	.word	0x00006d0c

0000491c <_close_r>:
    491c:	2300      	movs	r3, #0
    491e:	b570      	push	{r4, r5, r6, lr}
    4920:	4c06      	ldr	r4, [pc, #24]	; (493c <_close_r+0x20>)
    4922:	0005      	movs	r5, r0
    4924:	0008      	movs	r0, r1
    4926:	6023      	str	r3, [r4, #0]
    4928:	f7fd fc2e 	bl	2188 <_close>
    492c:	1c43      	adds	r3, r0, #1
    492e:	d103      	bne.n	4938 <_close_r+0x1c>
    4930:	6823      	ldr	r3, [r4, #0]
    4932:	2b00      	cmp	r3, #0
    4934:	d000      	beq.n	4938 <_close_r+0x1c>
    4936:	602b      	str	r3, [r5, #0]
    4938:	bd70      	pop	{r4, r5, r6, pc}
    493a:	46c0      	nop			; (mov r8, r8)
    493c:	20000acc 	.word	0x20000acc

00004940 <_fstat_r>:
    4940:	2300      	movs	r3, #0
    4942:	b570      	push	{r4, r5, r6, lr}
    4944:	4c06      	ldr	r4, [pc, #24]	; (4960 <_fstat_r+0x20>)
    4946:	0005      	movs	r5, r0
    4948:	0008      	movs	r0, r1
    494a:	0011      	movs	r1, r2
    494c:	6023      	str	r3, [r4, #0]
    494e:	f7fd fc1e 	bl	218e <_fstat>
    4952:	1c43      	adds	r3, r0, #1
    4954:	d103      	bne.n	495e <_fstat_r+0x1e>
    4956:	6823      	ldr	r3, [r4, #0]
    4958:	2b00      	cmp	r3, #0
    495a:	d000      	beq.n	495e <_fstat_r+0x1e>
    495c:	602b      	str	r3, [r5, #0]
    495e:	bd70      	pop	{r4, r5, r6, pc}
    4960:	20000acc 	.word	0x20000acc

00004964 <_isatty_r>:
    4964:	2300      	movs	r3, #0
    4966:	b570      	push	{r4, r5, r6, lr}
    4968:	4c06      	ldr	r4, [pc, #24]	; (4984 <_isatty_r+0x20>)
    496a:	0005      	movs	r5, r0
    496c:	0008      	movs	r0, r1
    496e:	6023      	str	r3, [r4, #0]
    4970:	f7fd fc12 	bl	2198 <_isatty>
    4974:	1c43      	adds	r3, r0, #1
    4976:	d103      	bne.n	4980 <_isatty_r+0x1c>
    4978:	6823      	ldr	r3, [r4, #0]
    497a:	2b00      	cmp	r3, #0
    497c:	d000      	beq.n	4980 <_isatty_r+0x1c>
    497e:	602b      	str	r3, [r5, #0]
    4980:	bd70      	pop	{r4, r5, r6, pc}
    4982:	46c0      	nop			; (mov r8, r8)
    4984:	20000acc 	.word	0x20000acc

00004988 <_lseek_r>:
    4988:	b570      	push	{r4, r5, r6, lr}
    498a:	0005      	movs	r5, r0
    498c:	0008      	movs	r0, r1
    498e:	0011      	movs	r1, r2
    4990:	2200      	movs	r2, #0
    4992:	4c06      	ldr	r4, [pc, #24]	; (49ac <_lseek_r+0x24>)
    4994:	6022      	str	r2, [r4, #0]
    4996:	001a      	movs	r2, r3
    4998:	f7fd fc00 	bl	219c <_lseek>
    499c:	1c43      	adds	r3, r0, #1
    499e:	d103      	bne.n	49a8 <_lseek_r+0x20>
    49a0:	6823      	ldr	r3, [r4, #0]
    49a2:	2b00      	cmp	r3, #0
    49a4:	d000      	beq.n	49a8 <_lseek_r+0x20>
    49a6:	602b      	str	r3, [r5, #0]
    49a8:	bd70      	pop	{r4, r5, r6, pc}
    49aa:	46c0      	nop			; (mov r8, r8)
    49ac:	20000acc 	.word	0x20000acc

000049b0 <memchr>:
    49b0:	b2c9      	uxtb	r1, r1
    49b2:	1882      	adds	r2, r0, r2
    49b4:	4290      	cmp	r0, r2
    49b6:	d101      	bne.n	49bc <memchr+0xc>
    49b8:	2000      	movs	r0, #0
    49ba:	4770      	bx	lr
    49bc:	7803      	ldrb	r3, [r0, #0]
    49be:	428b      	cmp	r3, r1
    49c0:	d0fb      	beq.n	49ba <memchr+0xa>
    49c2:	3001      	adds	r0, #1
    49c4:	e7f6      	b.n	49b4 <memchr+0x4>
	...

000049c8 <_read_r>:
    49c8:	b570      	push	{r4, r5, r6, lr}
    49ca:	0005      	movs	r5, r0
    49cc:	0008      	movs	r0, r1
    49ce:	0011      	movs	r1, r2
    49d0:	2200      	movs	r2, #0
    49d2:	4c06      	ldr	r4, [pc, #24]	; (49ec <_read_r+0x24>)
    49d4:	6022      	str	r2, [r4, #0]
    49d6:	001a      	movs	r2, r3
    49d8:	f7fd fb7a 	bl	20d0 <_read>
    49dc:	1c43      	adds	r3, r0, #1
    49de:	d103      	bne.n	49e8 <_read_r+0x20>
    49e0:	6823      	ldr	r3, [r4, #0]
    49e2:	2b00      	cmp	r3, #0
    49e4:	d000      	beq.n	49e8 <_read_r+0x20>
    49e6:	602b      	str	r3, [r5, #0]
    49e8:	bd70      	pop	{r4, r5, r6, pc}
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	20000acc 	.word	0x20000acc
    49f0:	00000008 	.word	0x00000008
    49f4:	00000008 	.word	0x00000008
    49f8:	00000008 	.word	0x00000008
    49fc:	00000008 	.word	0x00000008
    4a00:	00000008 	.word	0x00000008
    4a04:	00000008 	.word	0x00000008
    4a08:	00000008 	.word	0x00000008
    4a0c:	00000008 	.word	0x00000008
    4a10:	00000010 	.word	0x00000010
    4a14:	00000010 	.word	0x00000010
    4a18:	00000010 	.word	0x00000010
    4a1c:	00000010 	.word	0x00000010
    4a20:	00000010 	.word	0x00000010
    4a24:	00000010 	.word	0x00000010
    4a28:	00000010 	.word	0x00000010
    4a2c:	00000010 	.word	0x00000010
    4a30:	00000018 	.word	0x00000018
    4a34:	00000018 	.word	0x00000018
    4a38:	00000018 	.word	0x00000018
    4a3c:	00000018 	.word	0x00000018
    4a40:	00000018 	.word	0x00000018
    4a44:	00000018 	.word	0x00000018
    4a48:	00000018 	.word	0x00000018
    4a4c:	00000018 	.word	0x00000018
    4a50:	00000020 	.word	0x00000020
    4a54:	00000020 	.word	0x00000020
    4a58:	00000020 	.word	0x00000020
    4a5c:	00000020 	.word	0x00000020
    4a60:	00000020 	.word	0x00000020
    4a64:	00000020 	.word	0x00000020
    4a68:	00000020 	.word	0x00000020
    4a6c:	00000020 	.word	0x00000020
    4a70:	00000028 	.word	0x00000028
    4a74:	00000028 	.word	0x00000028
    4a78:	00000028 	.word	0x00000028
    4a7c:	00000028 	.word	0x00000028
    4a80:	00000028 	.word	0x00000028
    4a84:	00000028 	.word	0x00000028
    4a88:	00000028 	.word	0x00000028
    4a8c:	00000028 	.word	0x00000028
    4a90:	00000030 	.word	0x00000030
    4a94:	00000030 	.word	0x00000030
    4a98:	00000030 	.word	0x00000030
    4a9c:	00000030 	.word	0x00000030
    4aa0:	00000030 	.word	0x00000030
    4aa4:	00000030 	.word	0x00000030
    4aa8:	00000030 	.word	0x00000030
    4aac:	00000030 	.word	0x00000030
    4ab0:	00000038 	.word	0x00000038
    4ab4:	00000038 	.word	0x00000038
    4ab8:	00000038 	.word	0x00000038
    4abc:	00000038 	.word	0x00000038
    4ac0:	00000038 	.word	0x00000038
    4ac4:	00000038 	.word	0x00000038
    4ac8:	00000038 	.word	0x00000038
    4acc:	00000038 	.word	0x00000038
    4ad0:	00000040 	.word	0x00000040
    4ad4:	00000040 	.word	0x00000040
    4ad8:	00000040 	.word	0x00000040
    4adc:	00000040 	.word	0x00000040
    4ae0:	00000040 	.word	0x00000040
    4ae4:	00000040 	.word	0x00000040
    4ae8:	00000040 	.word	0x00000040
    4aec:	00000040 	.word	0x00000040
    4af0:	00000048 	.word	0x00000048
    4af4:	00000048 	.word	0x00000048
    4af8:	00000048 	.word	0x00000048
    4afc:	00000048 	.word	0x00000048
    4b00:	00000048 	.word	0x00000048
    4b04:	00000048 	.word	0x00000048
    4b08:	00000048 	.word	0x00000048
    4b0c:	00000048 	.word	0x00000048
    4b10:	0000004f 	.word	0x0000004f
    4b14:	0000004f 	.word	0x0000004f
    4b18:	0000004f 	.word	0x0000004f
    4b1c:	0000004f 	.word	0x0000004f
    4b20:	0000004f 	.word	0x0000004f
    4b24:	0000004f 	.word	0x0000004f
    4b28:	0000004f 	.word	0x0000004f
    4b2c:	0000004f 	.word	0x0000004f
    4b30:	000a000a 	.word	0x000a000a
    4b34:	00140014 	.word	0x00140014
    4b38:	00000014 	.word	0x00000014
    4b3c:	000a017c 	.word	0x000a017c
    4b40:	000a017c 	.word	0x000a017c
    4b44:	00140186 	.word	0x00140186
    4b48:	00140000 	.word	0x00140000
    4b4c:	0122000a 	.word	0x0122000a
    4b50:	00140186 	.word	0x00140186
    4b54:	01220190 	.word	0x01220190
    4b58:	0122000a 	.word	0x0122000a
    4b5c:	012c0014 	.word	0x012c0014
    4b60:	0122017c 	.word	0x0122017c
    4b64:	012c0186 	.word	0x012c0186
    4b68:	012c0014 	.word	0x012c0014
    4b6c:	0136017c 	.word	0x0136017c
    4b70:	001e0000 	.word	0x001e0000
    4b74:	00280032 	.word	0x00280032
    4b78:	00320000 	.word	0x00320000
    4b7c:	003c0032 	.word	0x003c0032
    4b80:	001e0050 	.word	0x001e0050
    4b84:	00280118 	.word	0x00280118
    4b88:	00280046 	.word	0x00280046
    4b8c:	00be0050 	.word	0x00be0050
    4b90:	00be0050 	.word	0x00be0050
    4b94:	00c80118 	.word	0x00c80118
    4b98:	00280118 	.word	0x00280118
    4b9c:	00be0122 	.word	0x00be0122
    4ba0:	00460000 	.word	0x00460000
    4ba4:	00500032 	.word	0x00500032
    4ba8:	005a0000 	.word	0x005a0000
    4bac:	00640032 	.word	0x00640032
    4bb0:	006e0000 	.word	0x006e0000
    4bb4:	00780032 	.word	0x00780032
    4bb8:	00820000 	.word	0x00820000
    4bbc:	008c0032 	.word	0x008c0032
    4bc0:	00960000 	.word	0x00960000
    4bc4:	00a00032 	.word	0x00a00032
    4bc8:	00aa0000 	.word	0x00aa0000
    4bcc:	00b40032 	.word	0x00b40032
    4bd0:	00be0000 	.word	0x00be0000
    4bd4:	00c80032 	.word	0x00c80032
    4bd8:	00c8012c 	.word	0x00c8012c
    4bdc:	00d20172 	.word	0x00d20172
    4be0:	00dc001e 	.word	0x00dc001e
    4be4:	00e60172 	.word	0x00e60172
    4be8:	00f0001e 	.word	0x00f0001e
    4bec:	00fa0172 	.word	0x00fa0172
    4bf0:	0104001e 	.word	0x0104001e
    4bf4:	010e0172 	.word	0x010e0172
    4bf8:	0118005a 	.word	0x0118005a
    4bfc:	0122012c 	.word	0x0122012c
    4c00:	82be50b4 	.word	0x82be50b4
    4c04:	8cbe82aa 	.word	0x8cbe82aa
    4c08:	64963c8c 	.word	0x64963c8c
    4c0c:	64dc3cd2 	.word	0x64dc3cd2
    4c10:	a08c9682 	.word	0xa08c9682
    4c14:	aadca08c 	.word	0xaadca08c
    4c18:	a0e696dc 	.word	0xa0e696dc
    4c1c:	50f03c78 	.word	0x50f03c78
    4c20:	5a78466e 	.word	0x5a78466e
    4c24:	aaaa3c96 	.word	0xaaaa3c96
    4c28:	a0dc3cc8 	.word	0xa0dc3cc8
    4c2c:	aae6a0d2 	.word	0xaae6a0d2
    4c30:	6e617254 	.word	0x6e617254
    4c34:	69722073 	.word	0x69722073
    4c38:	73746867 	.word	0x73746867
    4c3c:	65726120 	.word	0x65726120
    4c40:	6d756820 	.word	0x6d756820
    4c44:	72206e61 	.word	0x72206e61
    4c48:	74686769 	.word	0x74686769
    4c4c:	00000073 	.word	0x00000073
    4c50:	355e3331 	.word	0x355e3331
    4c54:	31202b20 	.word	0x31202b20
    4c58:	20355e36 	.word	0x20355e36
    4c5c:	3731203d 	.word	0x3731203d
    4c60:	0000355e 	.word	0x0000355e
    4c64:	69746552 	.word	0x69746552
    4c68:	616c7563 	.word	0x616c7563
    4c6c:	676e6974 	.word	0x676e6974
    4c70:	6c705320 	.word	0x6c705320
    4c74:	73656e69 	.word	0x73656e69
    4c78:	00000000 	.word	0x00000000
    4c7c:	6c6f6976 	.word	0x6c6f6976
    4c80:	65636e65 	.word	0x65636e65
    4c84:	726f772e 	.word	0x726f772e
    4c88:	0000736b 	.word	0x0000736b
    4c8c:	73626154 	.word	0x73626154
    4c90:	00000021 	.word	0x00000021
    4c94:	6c6c694b 	.word	0x6c6c694b
    4c98:	6c694220 	.word	0x6c694220
    4c9c:	6e6f696c 	.word	0x6e6f696c
    4ca0:	65726961 	.word	0x65726961
    4ca4:	61282073 	.word	0x61282073
    4ca8:	5420646e 	.word	0x5420646e
    4cac:	6c6c6972 	.word	0x6c6c6972
    4cb0:	616e6f69 	.word	0x616e6f69
    4cb4:	29657269 	.word	0x29657269
    4cb8:	00000000 	.word	0x00000000
    4cbc:	65746e49 	.word	0x65746e49
    4cc0:	74736572 	.word	0x74736572
    4cc4:	206e6920 	.word	0x206e6920
    4cc8:	68636574 	.word	0x68636574
    4ccc:	6f6c6f6e 	.word	0x6f6c6f6e
    4cd0:	69207967 	.word	0x69207967
    4cd4:	6f6e2073 	.word	0x6f6e2073
    4cd8:	20612074 	.word	0x20612074
    4cdc:	73726570 	.word	0x73726570
    4ce0:	6c616e6f 	.word	0x6c616e6f
    4ce4:	00797469 	.word	0x00797469
    4ce8:	50203031 	.word	0x50203031
    4cec:	544e4952 	.word	0x544e4952
    4cf0:	52484320 	.word	0x52484320
    4cf4:	30322824 	.word	0x30322824
    4cf8:	2b352e35 	.word	0x2b352e35
    4cfc:	28444e52 	.word	0x28444e52
    4d00:	3b292931 	.word	0x3b292931
    4d04:	47203a20 	.word	0x47203a20
    4d08:	204f544f 	.word	0x204f544f
    4d0c:	00003031 	.word	0x00003031
    4d10:	67206f4e 	.word	0x67206f4e
    4d14:	2e73646f 	.word	0x2e73646f
    4d18:	206f4e20 	.word	0x206f4e20
    4d1c:	7473616d 	.word	0x7473616d
    4d20:	2e737265 	.word	0x2e737265
    4d24:	206f4e20 	.word	0x206f4e20
    4d28:	65747865 	.word	0x65747865
    4d2c:	6c616e72 	.word	0x6c616e72
    4d30:	62696c20 	.word	0x62696c20
    4d34:	69726172 	.word	0x69726172
    4d38:	002e7365 	.word	0x002e7365
    4d3c:	6c6c694b 	.word	0x6c6c694b
    4d40:	7a614e20 	.word	0x7a614e20
    4d44:	00007369 	.word	0x00007369
    4d48:	6e616954 	.word	0x6e616954
    4d4c:	656d6e61 	.word	0x656d6e61
    4d50:	7153206e 	.word	0x7153206e
    4d54:	65726175 	.word	0x65726175
    4d58:	38393120 	.word	0x38393120
    4d5c:	00000039 	.word	0x00000039
    4d60:	72656d41 	.word	0x72656d41
    4d64:	20616369 	.word	0x20616369
    4d68:	20736177 	.word	0x20736177
    4d6c:	6e756f66 	.word	0x6e756f66
    4d70:	20646564 	.word	0x20646564
    4d74:	73206e6f 	.word	0x73206e6f
    4d78:	6576616c 	.word	0x6576616c
    4d7c:	00007972 	.word	0x00007972
    4d80:	72656854 	.word	0x72656854
    4d84:	73692065 	.word	0x73692065
    4d88:	6c6e6f20 	.word	0x6c6e6f20
    4d8c:	61632079 	.word	0x61632079
    4d90:	61746970 	.word	0x61746970
    4d94:	6e61206c 	.word	0x6e61206c
    4d98:	616c2064 	.word	0x616c2064
    4d9c:	00726f62 	.word	0x00726f62
    4da0:	6f636e45 	.word	0x6f636e45
    4da4:	67617275 	.word	0x67617275
    4da8:	59532065 	.word	0x59532065
    4dac:	54454d4d 	.word	0x54454d4d
    4db0:	20434952 	.word	0x20434952
    4db4:	73616c63 	.word	0x73616c63
    4db8:	61772073 	.word	0x61772073
    4dbc:	72616672 	.word	0x72616672
    4dc0:	00000065 	.word	0x00000065
    4dc4:	52554324 	.word	0x52554324
    4dc8:	544e4552 	.word	0x544e4552
    4dcc:	4d454d5f 	.word	0x4d454d5f
    4dd0:	00000045 	.word	0x00000045
    4dd4:	694e2041 	.word	0x694e2041
    4dd8:	54206563 	.word	0x54206563
    4ddc:	00005954 	.word	0x00005954
    4de0:	78696e55 	.word	0x78696e55
    4de4:	6f706520 	.word	0x6f706520
    4de8:	6d206863 	.word	0x6d206863
    4dec:	73756e69 	.word	0x73756e69
    4df0:	46783020 	.word	0x46783020
    4df4:	61642046 	.word	0x61642046
    4df8:	00007379 	.word	0x00007379
    4dfc:	3d202069 	.word	0x3d202069
    4e00:	35783020 	.word	0x35783020
    4e04:	35373366 	.word	0x35373366
    4e08:	20666439 	.word	0x20666439
    4e0c:	2028202d 	.word	0x2028202d
    4e10:	3e3e2069 	.word	0x3e3e2069
    4e14:	29203120 	.word	0x29203120
    4e18:	0000003b 	.word	0x0000003b
    4e1c:	42414341 	.word	0x42414341
    4e20:	00000000 	.word	0x00000000
    4e24:	63666544 	.word	0x63666544
    4e28:	73276e6f 	.word	0x73276e6f
    4e2c:	6e616320 	.word	0x6e616320
    4e30:	656c6563 	.word	0x656c6563
    4e34:	00002e64 	.word	0x00002e64
    4e38:	73746152 	.word	0x73746152
    4e3c:	7473656e 	.word	0x7473656e
    4e40:	6f4e203a 	.word	0x6f4e203a
    4e44:	6e696874 	.word	0x6e696874
    4e48:	6f542067 	.word	0x6f542067
    4e4c:	216f4420 	.word	0x216f4420
    4e50:	00000000 	.word	0x00000000
    4e54:	68207449 	.word	0x68207449
    4e58:	36207361 	.word	0x36207361
    4e5c:	656b2039 	.word	0x656b2039
    4e60:	002e7379 	.word	0x002e7379
    4e64:	61636542 	.word	0x61636542
    4e68:	20657375 	.word	0x20657375
    4e6c:	342d5456 	.word	0x342d5456
    4e70:	77203032 	.word	0x77203032
    4e74:	61207361 	.word	0x61207361
    4e78:	6165726c 	.word	0x6165726c
    4e7c:	74207964 	.word	0x74207964
    4e80:	6e656b61 	.word	0x6e656b61
    4e84:	00000000 	.word	0x00000000
    4e88:	706d6f43 	.word	0x706d6f43
    4e8c:	73736572 	.word	0x73736572
    4e90:	206e6f69 	.word	0x206e6f69
    4e94:	6f676c61 	.word	0x6f676c61
    4e98:	68746972 	.word	0x68746972
    4e9c:	6162206d 	.word	0x6162206d
    4ea0:	20646573 	.word	0x20646573
    4ea4:	42206e6f 	.word	0x42206e6f
    4ea8:	28205042 	.word	0x28205042
    4eac:	37393931 	.word	0x37393931
    4eb0:	00000029 	.word	0x00000029
    4eb4:	63616554 	.word	0x63616554
    4eb8:	65682068 	.word	0x65682068
    4ebc:	68746c61 	.word	0x68746c61
    4ec0:	736e6920 	.word	0x736e6920
    4ec4:	6e617275 	.word	0x6e617275
    4ec8:	70206563 	.word	0x70206563
    4ecc:	69766f72 	.word	0x69766f72
    4ed0:	73726564 	.word	0x73726564
    4ed4:	206f7420 	.word	0x206f7420
    4ed8:	65646f63 	.word	0x65646f63
    4edc:	0000002e 	.word	0x0000002e
    4ee0:	6566664f 	.word	0x6566664f
    4ee4:	7669736e 	.word	0x7669736e
    4ee8:	61682065 	.word	0x61682065
    4eec:	61776472 	.word	0x61776472
    4ef0:	00006572 	.word	0x00006572
    4ef4:	69466957 	.word	0x69466957
    4ef8:	20736920 	.word	0x20736920
    4efc:	20746f6e 	.word	0x20746f6e
    4f00:	65726977 	.word	0x65726977
    4f04:	7373656c 	.word	0x7373656c
    4f08:	68744520 	.word	0x68744520
    4f0c:	656e7265 	.word	0x656e7265
    4f10:	00002174 	.word	0x00002174
    4f14:	6d6d7544 	.word	0x6d6d7544
    4f18:	68742079 	.word	0x68742079
    4f1c:	20636369 	.word	0x20636369
    4f20:	65696c63 	.word	0x65696c63
    4f24:	0000746e 	.word	0x0000746e
    4f28:	694e2041 	.word	0x694e2041
    4f2c:	54206563 	.word	0x54206563
    4f30:	202e5954 	.word	0x202e5954
    4f34:	4f206e41 	.word	0x4f206e41
    4f38:	6f43204b 	.word	0x6f43204b
    4f3c:	7475706d 	.word	0x7475706d
    4f40:	002e7265 	.word	0x002e7265
    4f44:	65545355 	.word	0x65545355
    4f48:	6964656c 	.word	0x6964656c
    4f4c:	6e6f646c 	.word	0x6e6f646c
    4f50:	00736369 	.word	0x00736369
    4f54:	696c6f53 	.word	0x696c6f53
    4f58:	69726164 	.word	0x69726164
    4f5c:	69207974 	.word	0x69207974
    4f60:	6f6e2073 	.word	0x6f6e2073
    4f64:	20612074 	.word	0x20612074
    4f68:	2077656e 	.word	0x2077656e
    4f6c:	6d617266 	.word	0x6d617266
    4f70:	726f7765 	.word	0x726f7765
    4f74:	0000006b 	.word	0x0000006b
    4f78:	61657242 	.word	0x61657242
    4f7c:	616f6264 	.word	0x616f6264
    4f80:	6e696472 	.word	0x6e696472
    4f84:	73492067 	.word	0x73492067
    4f88:	746f4e20 	.word	0x746f4e20
    4f8c:	43204120 	.word	0x43204120
    4f90:	656d6972 	.word	0x656d6972
    4f94:	00000000 	.word	0x00000000
    4f98:	2066664f 	.word	0x2066664f
    4f9c:	6f207962 	.word	0x6f207962
    4fa0:	6520656e 	.word	0x6520656e
    4fa4:	726f7272 	.word	0x726f7272
    4fa8:	72612073 	.word	0x72612073
    4fac:	6f632065 	.word	0x6f632065
    4fb0:	6e6f6d6d 	.word	0x6e6f6d6d
    4fb4:	00000000 	.word	0x00000000
    4fb8:	00000ada 	.word	0x00000ada
    4fbc:	00000d26 	.word	0x00000d26
    4fc0:	00000d26 	.word	0x00000d26
    4fc4:	00000d26 	.word	0x00000d26
    4fc8:	00000d26 	.word	0x00000d26
    4fcc:	00000d26 	.word	0x00000d26
    4fd0:	00000d26 	.word	0x00000d26
    4fd4:	00000d26 	.word	0x00000d26
    4fd8:	00000d26 	.word	0x00000d26
    4fdc:	00000d26 	.word	0x00000d26
    4fe0:	00000d26 	.word	0x00000d26
    4fe4:	00000d26 	.word	0x00000d26
    4fe8:	00000d26 	.word	0x00000d26
    4fec:	00000d26 	.word	0x00000d26
    4ff0:	00000d26 	.word	0x00000d26
    4ff4:	00000d26 	.word	0x00000d26
    4ff8:	00000ac2 	.word	0x00000ac2
    4ffc:	00000d26 	.word	0x00000d26
    5000:	00000d26 	.word	0x00000d26
    5004:	00000d26 	.word	0x00000d26
    5008:	00000d26 	.word	0x00000d26
    500c:	00000d26 	.word	0x00000d26
    5010:	00000d26 	.word	0x00000d26
    5014:	00000d26 	.word	0x00000d26
    5018:	00000d26 	.word	0x00000d26
    501c:	00000d26 	.word	0x00000d26
    5020:	00000d26 	.word	0x00000d26
    5024:	00000d26 	.word	0x00000d26
    5028:	00000d26 	.word	0x00000d26
    502c:	00000d26 	.word	0x00000d26
    5030:	00000d26 	.word	0x00000d26
    5034:	00000d26 	.word	0x00000d26
    5038:	00000ad2 	.word	0x00000ad2
    503c:	00000d26 	.word	0x00000d26
    5040:	00000d26 	.word	0x00000d26
    5044:	00000d26 	.word	0x00000d26
    5048:	00000d26 	.word	0x00000d26
    504c:	00000d26 	.word	0x00000d26
    5050:	00000d26 	.word	0x00000d26
    5054:	00000d26 	.word	0x00000d26
    5058:	00000d26 	.word	0x00000d26
    505c:	00000d26 	.word	0x00000d26
    5060:	00000d26 	.word	0x00000d26
    5064:	00000d26 	.word	0x00000d26
    5068:	00000d26 	.word	0x00000d26
    506c:	00000d26 	.word	0x00000d26
    5070:	00000d26 	.word	0x00000d26
    5074:	00000d26 	.word	0x00000d26
    5078:	00000aca 	.word	0x00000aca
    507c:	00000ae2 	.word	0x00000ae2
    5080:	00000aaa 	.word	0x00000aaa
    5084:	00000aba 	.word	0x00000aba
    5088:	00000ab2 	.word	0x00000ab2
    508c:	00000002 	.word	0x00000002
    5090:	00000003 	.word	0x00000003
    5094:	00000028 	.word	0x00000028
    5098:	00000029 	.word	0x00000029
    509c:	00000004 	.word	0x00000004
    50a0:	00000005 	.word	0x00000005
    50a4:	00000006 	.word	0x00000006
    50a8:	00000007 	.word	0x00000007
    50ac:	00000020 	.word	0x00000020
    50b0:	00000021 	.word	0x00000021
    50b4:	00000022 	.word	0x00000022
    50b8:	00000023 	.word	0x00000023
    50bc:	00000024 	.word	0x00000024
    50c0:	00000025 	.word	0x00000025
    50c4:	00000026 	.word	0x00000026
    50c8:	00000027 	.word	0x00000027
    50cc:	00000008 	.word	0x00000008
    50d0:	00000009 	.word	0x00000009
    50d4:	0000000a 	.word	0x0000000a
    50d8:	0000000b 	.word	0x0000000b
    50dc:	42000800 	.word	0x42000800
    50e0:	42000c00 	.word	0x42000c00
    50e4:	42001000 	.word	0x42001000
    50e8:	42001400 	.word	0x42001400
    50ec:	42001800 	.word	0x42001800
    50f0:	42001c00 	.word	0x42001c00
    50f4:	0000185e 	.word	0x0000185e
    50f8:	0000185a 	.word	0x0000185a
    50fc:	0000185a 	.word	0x0000185a
    5100:	000018c0 	.word	0x000018c0
    5104:	000018c0 	.word	0x000018c0
    5108:	00001872 	.word	0x00001872
    510c:	00001864 	.word	0x00001864
    5110:	00001878 	.word	0x00001878
    5114:	000018ae 	.word	0x000018ae
    5118:	00001a80 	.word	0x00001a80
    511c:	00001a60 	.word	0x00001a60
    5120:	00001a60 	.word	0x00001a60
    5124:	00001aec 	.word	0x00001aec
    5128:	00001a72 	.word	0x00001a72
    512c:	00001a8e 	.word	0x00001a8e
    5130:	00001a64 	.word	0x00001a64
    5134:	00001a9c 	.word	0x00001a9c
    5138:	00001adc 	.word	0x00001adc

0000513c <CodePage437>:
	...
    5474:	01000000 06186080 18608001 60800106     .....`....`....`
    5484:	80010000 00000060 00000000 66986106     ....`........a.f
    5494:	98618619 00000000 00000000 00000000     ..a.............
    54a4:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    54b4:	1966fefb 00986186 00000000 80010000     ..f..a..........
    54c4:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    54d4:	00000000 04000000 29a60823 1820c106     ........#..).. .
    54e4:	98200304 324c1165 00000008 00000000     .. .e.L2........
    54f4:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    5504:	0000f6d9 00000000 30c00000 00030618     ...........0....
    5514:	000000c0 00000000 00000000 00000000     ................
    5524:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    5534:	10400002 00000000 01000000 02084000     ..@..........@..
    5544:	06186000 18608001 00010208 00000040     .`....`.....@...
    5554:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    5564:	80104290 00000000 00000000 00000000     .B..............
    5574:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    5594:	18000000 c0000306 00001040 00000000     ........@.......
    55a4:	00000000 ff000000 0000e0bf 00000000     ................
	...
    55c8:	030e3800 0000e080 00000000 08200000     .8............ .
    55d8:	80000104 02041020 10408000 00000208     .... .....@.....
    55e8:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    55f8:	63061b6c f8e0c318 00000000 00000000     l..c............
    5608:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    5618:	000000f8 00000000 c1f8e107 061860b0     .............`..
    5628:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    5638:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    5648:	00f8e167 00000000 40000000 03070c30     g..........@0...
    5658:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    5668:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    5678:	e167a081 000000f8 00000000 60f8e003     ..g............`
    5688:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    5698:	00000000 fefb0f00 20608001 00010408     ..........` ....
    56a8:	0c302080 00c00003 00000000 e0030000     . 0.............
    56b8:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    56c8:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    56d8:	0618609f e1c70003 000000f0 00000000     .`..............
    56e8:	38000000 e080030e 00000000 030e3800     ...8.........8..
    56f8:	0000e080 00000000 00000000 80030e38     ............8...
    5708:	000000e0 0e380000 40c00003 00000010     ......8....@....
    5718:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    5728:	0c300003 00000000 00000000 00000000     ..0.............
    5738:	00fefb0f fefb0f00 00000000 00000000     ................
    5748:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    5758:	0c0c3030 00000003 00000000 f8e10700     00..............
    5768:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    5778:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    5788:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    5798:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    57a8:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    57b8:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    57c8:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    57d8:	00f8e063 00000000 c30f0000 861966f0     c............f..
    57e8:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    57f8:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    5808:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    5818:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    5828:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    5838:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    5848:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    5858:	00000000 07000000 0618f8e1 18608001     ..............`.
    5868:	60800106 e1070618 000000f8 00000000     ...`............
    5878:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    5888:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    5898:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    58a8:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    58b8:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    58c8:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    58d8:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    58e8:	ecb0c31e 0000061b 00000000 f8e00300     ................
    58f8:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    5908:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    5918:	c000038c 00030c30 00000000 07000000     ....0...........
    5928:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    5938:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    5948:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    5958:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    5968:	00f8e167 00000000 fb0f0000 000208fe     g...............
    5978:	02082080 08208000 20800002 00000000     . .... .... ....
    5988:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    5998:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    59a8:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    59b8:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    59c8:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    59d8:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    59e8:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    59f8:	20c00107 80000208 00000020 00000000     ... .... .......
    5a08:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    5a18:	0000fefb 00000000 f8e00300 00030c30     ............0...
    5a28:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    5a38:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    5a48:	0618c000 00000000 07000000 030cf0c1     ................
    5a58:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    5a68:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    5a94:	00fefb0f 00000000 80030000 00030ce0     ................
    5aa4:	00001860 00000000 00000000 00000000     `...............
	...
    5abc:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    5acc:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    5adc:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    5aec:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    5afc:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    5b0c:	c3061bec f6d9e7b0 00000000 00000000     ................
    5b1c:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    5b2c:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    5b3c:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    5b4c:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    5b5c:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    5b6c:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    5b7c:	01000000 00006080 18e08003 60800106     .....`.........`
    5b8c:	e1070618 000000f8 00000000 00186000     .............`..
    5b9c:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    5bac:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    5bbc:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    5bcc:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    5be8:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    5c00:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    5c18:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    5c30:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    5c40:	02082080 00000000 00000000 c1fae803     . ..............
    5c50:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    5c60:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    5c70:	00000003 00000000 00000000 e1070000     ................
    5c80:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    5c90:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    5ca0:	30c0c00c 00000000 00000000 00000000     ...0............
    5cb0:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    5cc8:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    5ce0:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    5cf8:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    5d14:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    5d24:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    5d34:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    5d44:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    5d54:	00000000 80010000 01061860 06186080     ........`....`..
    5d64:	18608001 60800106 00000000 0f000000     ..`....`........
    5d74:	0208c003 0cc00003 c0000303 030f0208     ................
    5d84:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    5dbc:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    5dcc:	f8e06398 00000608 00000000 00669801     .c............f.
    5ddc:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    5dec:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    5dfc:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    5e0c:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    5e24:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    5e3c:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    5e4c:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    5e5c:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    5e6c:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    5e7c:	04fef907 00000003 00000000 07001420     ............ ...
    5e8c:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    5e9c:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    5eac:	f10730c0 000000fc 00000000 18c00000     .0..............
    5ebc:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    5ecc:	00000000 98610600 80030000 010618e0     ......a.........
    5edc:	06186080 00f8e107 00000000 00000000     .`..............
    5eec:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    5f04:	0018c000 18e08003 60800106 e1070618     ...........`....
    5f14:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    5f24:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    5f34:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    5f44:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    5f54:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    5f6c:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    5f7c:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    5f8c:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    5f9c:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    5fac:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    5fbc:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    5fcc:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    5fdc:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    5fec:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    5ffc:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    600c:	00f6d9c7 00000000 01000000 0c006698     .............f..
    601c:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    602c:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    603c:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    604c:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    605c:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    606c:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    607c:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    608c:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    609c:	20e00302 80800f08 00000020 00000000     ... .... .......
    60ac:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    60bc:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    60cc:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    60dc:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    60ec:	fef823b0 00000000 00000000 000060c0     .#...........`..
    60fc:	18e08003 60800106 e1070618 000000f8     .......`........
    610c:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    611c:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    612c:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    6144:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    6154:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    6164:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    6174:	1e08c003 00e08308 000080ff 00000000     ................
	...
    618c:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    61a8:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    61b8:	00c00f3f 00000000 00000000 ff000000     ?...............
    61c8:	0003ecbf 00000000 00000000 00000000     ................
	...
    61e0:	18e0bfff 00000006 00000000 00000000     ................
    61f0:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    6200:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    6210:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    6220:	00000000 06180000 18000000 60800106     ...............`
    6230:	80010618 00061860 00000000 00000000     ....`...........
    6240:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    6258:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    6268:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    6278:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    6288:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    6298:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    62a8:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    62b8:	20800002 80000208 00020820 02082080     ... .... .... ..
    62c8:	08208000 20800002 80000208 00020820     .. .... .... ...
    62d8:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    62e8:	00020820 02082080 f8208000 20800f02      .... .... .... 
    62f8:	80000208 00020820 05142080 14504001     .... .... ...@P.
    6308:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    6318:	00504001 00000000 00000000 013f0000     .@P...........?.
    6328:	05145040 14504001 50400105 00000000     @P...@P...@P....
    6338:	00000000 02f80000 0820800f 20800002     .......... .... 
    6348:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    6358:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    6368:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    6378:	05145040 00504001 00000000 00000000     @P...@P.........
    6388:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    6398:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    63b0:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    63c8:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    63ec:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    63fc:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    6414:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    6438:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    6448:	20800002 80000208 f0030820 02082080     ... .... .... ..
    6458:	08208000 20800002 00000000 00000000     .. .... ........
    6468:	3f000000 000000f0 00000000 00000000     ...?............
    6478:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    6488:	80000208 00020820 02082080 08208000     .... .... .... .
    6498:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    64a8:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    64b8:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    64c8:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    64e4:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    64f4:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    6518:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    6528:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    6538:	50400105 40010514 00000050 00000000     ..@P...@P.......
    6548:	ff000000 00fc0fc0 00000000 00000000     ................
    6558:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    6568:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    6578:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    6588:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    6598:	000000f0 00000000 00000000 00000000     ................
    65a8:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    65b8:	00020820 00002080 00000000 00000000      .... ..........
    65c8:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    65d8:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    65f0:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    6610:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    6620:	00002080 00000000 00000000 40f10700     . .............@
    6630:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    6640:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    6650:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    6660:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    6670:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    6690:	80f00300 00020820 02082080 ff208000     .... .... .... .
    66a0:	ffffffff ffffffff ffffffff ffffffff     ................
    66b0:	ffffffff ffffffff 00000000 00000000     ................
    66c0:	3f000000 ffffffff ffffffff ffffffff     ...?............
    66d0:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    66e0:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    66f0:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    6700:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    6724:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    6734:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    6744:	63c61861 000000f8 00000000 ff000000     a..c............
    6754:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    6770:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    6780:	fb0f0000 06b080fe 0618c000 c0800103     ................
    6790:	fefb2f20 00000000 00000000 00000000      /..............
    67a0:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    67b8:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    67c8:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    67d8:	06186080 00608001 00000000 00000000     .`....`.........
    67e8:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    67f8:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    6808:	061becbf e0c31863 000000f8 00000000     ....c...........
    6818:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    6828:	00008e33 00000000 fef80300 e1070318     3...............
    6838:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    6848:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    6858:	00204295 00000000 00000000 07000000     .B .............
    6868:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    6878:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    6888:	03186000 0000f8e0 00000000 00000000     .`..............
    6898:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    68a8:	000060b0 00000000 0f000000 0000fefb     .`..............
    68b8:	00fefb0f fefb0f00 00000000 00000000     ................
    68c8:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    68d8:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    68e8:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    68f8:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    6908:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    6918:	02082080 08208000 20800002 80000208     . .... .... ....
    6928:	00020820 02082080 08208000 20800002      .... .... .... 
    6938:	80000208 09240820 00008001 18000000     .... .$.........
    6948:	00000006 00e0bfff 00061800 00000000     ................
	...
    6960:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    6978:	01092460 00000080 00000000 00000000     `$..............
	...
    699c:	80030e38 00000000 00000000 00000000     8...............
	...
    69b4:	01000000 00006080 00000000 0f000000     .....`..........
    69c4:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    69d4:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    69f0:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    6a14:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    6a3c:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    6a4c:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    6a5c:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    6a6c:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    6a7c:	0008006d 00000a7f 0009001b 47552600     m............&UG
    6a8c:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    6a9c:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    6aac:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    6abc:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    6acc:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    6adc:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    6aec:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    6afc:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    6b0c:	0008004d 00000a7f 0009001b 07150000     M...............
    6b1c:	1100000a 00000000 000b0809 1a001700     ................
    6b2c:	0f000000 0500000a 00001801 1f001000     ................
    6b3c:	03131200 1b000000 14000000 000e1604     ................
    6b4c:	1c001d1e 02061900 0008000d 00000a00     ................

00006b5c <kb_col>:
    6b5c:	00010000 00020000 00040000 00080000     ................
    6b6c:	00100000 00200000 08000000              ...... .....

00006b78 <kb_col_index>:
    6b78:	00000010 00000011 00000012 00000013     ................
    6b88:	00000014 00000015 0000001b              ............

00006b94 <kb_row>:
    6b94:	00000004 00000008 00000010 00000020     ............ ...
    6ba4:	00000040 00000080 00000400 00000800     @...............
    6bb4:	00001000 00002000                       ..... ..

00006bbc <kb_row_index>:
    6bbc:	00000002 00000003 00000004 00000005     ................
    6bcc:	00000006 00000007 0000000a 0000000b     ................
    6bdc:	0000000c 0000000d                       ........

00006be4 <beelzebub.12955>:
    6be4:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    6bf4:	64012201 d4019201 08020702 5f023402     .".d.........4._
    6c04:	94027802 bb02a602 db02ca02 f902e802     .x..............
    6c14:	7f031f03                                ....

00006c18 <belial.12952>:
    6c18:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    6c28:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    6c38:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    6c48:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    6c58:	35c9c9c9 0000363a                       ...5:6..

00006c60 <lucifer.12954>:
    6c60:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    6c70:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    6c80:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6c90:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6ca0:	00505050 00000055                       PPP.U...

00006ca8 <mulciber.12953>:
    6ca8:	03020100 02010004 00020100 01000201     ................
    6cb8:	02010002 00020100 01000201 01000002     ................
    6cc8:	02010000 00020100 01000201 03020100     ................
    6cd8:	00000004 01000100 01000302 02010002     ................
    6ce8:	00000403 00000000 65530d0a 6c616972     ..........Serial
    6cf8:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00006d08 <_global_impure_ptr>:
    6d08:	20000168                                h.. 

00006d0c <__sf_fake_stderr>:
	...

00006d2c <__sf_fake_stdin>:
	...

00006d4c <__sf_fake_stdout>:
	...
    6d6c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6d7c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6d8c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6d9c:	00006665                                ef..

00006da0 <_init>:
    6da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6da2:	46c0      	nop			; (mov r8, r8)
    6da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6da6:	bc08      	pop	{r3}
    6da8:	469e      	mov	lr, r3
    6daa:	4770      	bx	lr

00006dac <__init_array_start>:
    6dac:	000000dd 	.word	0x000000dd

00006db0 <_fini>:
    6db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6db2:	46c0      	nop			; (mov r8, r8)
    6db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6db6:	bc08      	pop	{r3}
    6db8:	469e      	mov	lr, r3
    6dba:	4770      	bx	lr

00006dbc <__fini_array_start>:
    6dbc:	000000b5 	.word	0x000000b5
