
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d4c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00001d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000010  00001d5c  00020010  2**2
                  ALLOC
  3 .stack        00002000  20000050  00001d9c  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014a5c  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e28  00000000  00000000  00034aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000020fa  00000000  00000000  00036915  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002c8  00000000  00000000  00038a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000270  00000000  00000000  00038cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000183a2  00000000  00000000  00038f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000067f6  00000000  00000000  000512e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008bc98  00000000  00000000  00057adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000006a0  00000000  00000000  000e3778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 20 00 20 c1 07 00 00 bd 07 00 00 bd 07 00 00     P . ............
	...
      2c:	bd 07 00 00 00 00 00 00 00 00 00 00 bd 07 00 00     ................
      3c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
      4c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
      5c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
      6c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
      7c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
      8c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
      9c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
      ac:	bd 07 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000010 	.word	0x20000010
      d4:	00000000 	.word	0x00000000
      d8:	00001d4c 	.word	0x00001d4c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000014 	.word	0x20000014
     108:	00001d4c 	.word	0x00001d4c
     10c:	00001d4c 	.word	0x00001d4c
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	0000057d 	.word	0x0000057d
     140:	00001b85 	.word	0x00001b85
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	2000002c 	.word	0x2000002c
     1b8:	20000030 	.word	0x20000030
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	2000002c 	.word	0x2000002c
     1e8:	20000030 	.word	0x20000030
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	203e      	movs	r0, #62	; 0x3e
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	05d2      	lsls	r2, r2, #23
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	200f      	movs	r0, #15
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	00000229 	.word	0x00000229
     224:	41004480 	.word	0x41004480

00000228 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     228:	b500      	push	{lr}
     22a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     22c:	ab01      	add	r3, sp, #4
     22e:	2280      	movs	r2, #128	; 0x80
     230:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     232:	780a      	ldrb	r2, [r1, #0]
     234:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     236:	784a      	ldrb	r2, [r1, #1]
     238:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     23a:	788a      	ldrb	r2, [r1, #2]
     23c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     23e:	0019      	movs	r1, r3
     240:	4b01      	ldr	r3, [pc, #4]	; (248 <port_pin_set_config+0x20>)
     242:	4798      	blx	r3
}
     244:	b003      	add	sp, #12
     246:	bd00      	pop	{pc}
     248:	0000075d 	.word	0x0000075d

0000024c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     24c:	b510      	push	{r4, lr}
	switch (clock_source) {
     24e:	2808      	cmp	r0, #8
     250:	d803      	bhi.n	25a <system_clock_source_get_hz+0xe>
     252:	0080      	lsls	r0, r0, #2
     254:	4b1c      	ldr	r3, [pc, #112]	; (2c8 <system_clock_source_get_hz+0x7c>)
     256:	581b      	ldr	r3, [r3, r0]
     258:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     25a:	2000      	movs	r0, #0
     25c:	e032      	b.n	2c4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     25e:	4b1b      	ldr	r3, [pc, #108]	; (2cc <system_clock_source_get_hz+0x80>)
     260:	6918      	ldr	r0, [r3, #16]
     262:	e02f      	b.n	2c4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     264:	4b1a      	ldr	r3, [pc, #104]	; (2d0 <system_clock_source_get_hz+0x84>)
     266:	6a1b      	ldr	r3, [r3, #32]
     268:	059b      	lsls	r3, r3, #22
     26a:	0f9b      	lsrs	r3, r3, #30
     26c:	4819      	ldr	r0, [pc, #100]	; (2d4 <system_clock_source_get_hz+0x88>)
     26e:	40d8      	lsrs	r0, r3
     270:	e028      	b.n	2c4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     272:	4b16      	ldr	r3, [pc, #88]	; (2cc <system_clock_source_get_hz+0x80>)
     274:	6958      	ldr	r0, [r3, #20]
     276:	e025      	b.n	2c4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     278:	4b14      	ldr	r3, [pc, #80]	; (2cc <system_clock_source_get_hz+0x80>)
     27a:	681b      	ldr	r3, [r3, #0]
			return 0;
     27c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     27e:	079b      	lsls	r3, r3, #30
     280:	d520      	bpl.n	2c4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     282:	4913      	ldr	r1, [pc, #76]	; (2d0 <system_clock_source_get_hz+0x84>)
     284:	2210      	movs	r2, #16
     286:	68cb      	ldr	r3, [r1, #12]
     288:	421a      	tst	r2, r3
     28a:	d0fc      	beq.n	286 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     28c:	4b0f      	ldr	r3, [pc, #60]	; (2cc <system_clock_source_get_hz+0x80>)
     28e:	681a      	ldr	r2, [r3, #0]
     290:	2324      	movs	r3, #36	; 0x24
     292:	4013      	ands	r3, r2
     294:	2b04      	cmp	r3, #4
     296:	d001      	beq.n	29c <system_clock_source_get_hz+0x50>
			return 48000000UL;
     298:	480f      	ldr	r0, [pc, #60]	; (2d8 <system_clock_source_get_hz+0x8c>)
     29a:	e013      	b.n	2c4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     29c:	2000      	movs	r0, #0
     29e:	4b0f      	ldr	r3, [pc, #60]	; (2dc <system_clock_source_get_hz+0x90>)
     2a0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     2a2:	4b0a      	ldr	r3, [pc, #40]	; (2cc <system_clock_source_get_hz+0x80>)
     2a4:	689b      	ldr	r3, [r3, #8]
     2a6:	041b      	lsls	r3, r3, #16
     2a8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     2aa:	4358      	muls	r0, r3
     2ac:	e00a      	b.n	2c4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     2ae:	2350      	movs	r3, #80	; 0x50
     2b0:	4a07      	ldr	r2, [pc, #28]	; (2d0 <system_clock_source_get_hz+0x84>)
     2b2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     2b4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     2b6:	075b      	lsls	r3, r3, #29
     2b8:	d504      	bpl.n	2c4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <system_clock_source_get_hz+0x80>)
     2bc:	68d8      	ldr	r0, [r3, #12]
     2be:	e001      	b.n	2c4 <system_clock_source_get_hz+0x78>
		return 32768UL;
     2c0:	2080      	movs	r0, #128	; 0x80
     2c2:	0200      	lsls	r0, r0, #8
	}
}
     2c4:	bd10      	pop	{r4, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	00001ce4 	.word	0x00001ce4
     2cc:	20000034 	.word	0x20000034
     2d0:	40000800 	.word	0x40000800
     2d4:	007a1200 	.word	0x007a1200
     2d8:	02dc6c00 	.word	0x02dc6c00
     2dc:	00000681 	.word	0x00000681

000002e0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     2e0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     2e2:	490c      	ldr	r1, [pc, #48]	; (314 <system_clock_source_osc8m_set_config+0x34>)
     2e4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     2e6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     2e8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     2ea:	7840      	ldrb	r0, [r0, #1]
     2ec:	2201      	movs	r2, #1
     2ee:	4010      	ands	r0, r2
     2f0:	0180      	lsls	r0, r0, #6
     2f2:	2640      	movs	r6, #64	; 0x40
     2f4:	43b3      	bics	r3, r6
     2f6:	4303      	orrs	r3, r0
     2f8:	402a      	ands	r2, r5
     2fa:	01d2      	lsls	r2, r2, #7
     2fc:	2080      	movs	r0, #128	; 0x80
     2fe:	4383      	bics	r3, r0
     300:	4313      	orrs	r3, r2
     302:	2203      	movs	r2, #3
     304:	4022      	ands	r2, r4
     306:	0212      	lsls	r2, r2, #8
     308:	4803      	ldr	r0, [pc, #12]	; (318 <system_clock_source_osc8m_set_config+0x38>)
     30a:	4003      	ands	r3, r0
     30c:	4313      	orrs	r3, r2
     30e:	620b      	str	r3, [r1, #32]
}
     310:	bd70      	pop	{r4, r5, r6, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	40000800 	.word	0x40000800
     318:	fffffcff 	.word	0xfffffcff

0000031c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     31c:	2808      	cmp	r0, #8
     31e:	d803      	bhi.n	328 <system_clock_source_enable+0xc>
     320:	0080      	lsls	r0, r0, #2
     322:	4b25      	ldr	r3, [pc, #148]	; (3b8 <system_clock_source_enable+0x9c>)
     324:	581b      	ldr	r3, [r3, r0]
     326:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     328:	2017      	movs	r0, #23
     32a:	e044      	b.n	3b6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     32c:	4a23      	ldr	r2, [pc, #140]	; (3bc <system_clock_source_enable+0xa0>)
     32e:	6a13      	ldr	r3, [r2, #32]
     330:	2102      	movs	r1, #2
     332:	430b      	orrs	r3, r1
     334:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     336:	2000      	movs	r0, #0
     338:	e03d      	b.n	3b6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     33a:	4a20      	ldr	r2, [pc, #128]	; (3bc <system_clock_source_enable+0xa0>)
     33c:	6993      	ldr	r3, [r2, #24]
     33e:	2102      	movs	r1, #2
     340:	430b      	orrs	r3, r1
     342:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     344:	2000      	movs	r0, #0
		break;
     346:	e036      	b.n	3b6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     348:	4a1c      	ldr	r2, [pc, #112]	; (3bc <system_clock_source_enable+0xa0>)
     34a:	8a13      	ldrh	r3, [r2, #16]
     34c:	2102      	movs	r1, #2
     34e:	430b      	orrs	r3, r1
     350:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     352:	2000      	movs	r0, #0
		break;
     354:	e02f      	b.n	3b6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     356:	4a19      	ldr	r2, [pc, #100]	; (3bc <system_clock_source_enable+0xa0>)
     358:	8a93      	ldrh	r3, [r2, #20]
     35a:	2102      	movs	r1, #2
     35c:	430b      	orrs	r3, r1
     35e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     360:	2000      	movs	r0, #0
		break;
     362:	e028      	b.n	3b6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     364:	4916      	ldr	r1, [pc, #88]	; (3c0 <system_clock_source_enable+0xa4>)
     366:	680b      	ldr	r3, [r1, #0]
     368:	2202      	movs	r2, #2
     36a:	4313      	orrs	r3, r2
     36c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     36e:	4b13      	ldr	r3, [pc, #76]	; (3bc <system_clock_source_enable+0xa0>)
     370:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     372:	0019      	movs	r1, r3
     374:	320e      	adds	r2, #14
     376:	68cb      	ldr	r3, [r1, #12]
     378:	421a      	tst	r2, r3
     37a:	d0fc      	beq.n	376 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     37c:	4a10      	ldr	r2, [pc, #64]	; (3c0 <system_clock_source_enable+0xa4>)
     37e:	6891      	ldr	r1, [r2, #8]
     380:	4b0e      	ldr	r3, [pc, #56]	; (3bc <system_clock_source_enable+0xa0>)
     382:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     384:	6852      	ldr	r2, [r2, #4]
     386:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     388:	2200      	movs	r2, #0
     38a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     38c:	0019      	movs	r1, r3
     38e:	3210      	adds	r2, #16
     390:	68cb      	ldr	r3, [r1, #12]
     392:	421a      	tst	r2, r3
     394:	d0fc      	beq.n	390 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     396:	4b0a      	ldr	r3, [pc, #40]	; (3c0 <system_clock_source_enable+0xa4>)
     398:	681b      	ldr	r3, [r3, #0]
     39a:	b29b      	uxth	r3, r3
     39c:	4a07      	ldr	r2, [pc, #28]	; (3bc <system_clock_source_enable+0xa0>)
     39e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     3a0:	2000      	movs	r0, #0
     3a2:	e008      	b.n	3b6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     3a4:	4905      	ldr	r1, [pc, #20]	; (3bc <system_clock_source_enable+0xa0>)
     3a6:	2244      	movs	r2, #68	; 0x44
     3a8:	5c8b      	ldrb	r3, [r1, r2]
     3aa:	2002      	movs	r0, #2
     3ac:	4303      	orrs	r3, r0
     3ae:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     3b0:	2000      	movs	r0, #0
		break;
     3b2:	e000      	b.n	3b6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
     3b4:	2000      	movs	r0, #0
}
     3b6:	4770      	bx	lr
     3b8:	00001d08 	.word	0x00001d08
     3bc:	40000800 	.word	0x40000800
     3c0:	20000034 	.word	0x20000034

000003c4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     3c4:	b530      	push	{r4, r5, lr}
     3c6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     3c8:	22c2      	movs	r2, #194	; 0xc2
     3ca:	00d2      	lsls	r2, r2, #3
     3cc:	4b1a      	ldr	r3, [pc, #104]	; (438 <system_clock_init+0x74>)
     3ce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     3d0:	4a1a      	ldr	r2, [pc, #104]	; (43c <system_clock_init+0x78>)
     3d2:	6853      	ldr	r3, [r2, #4]
     3d4:	211e      	movs	r1, #30
     3d6:	438b      	bics	r3, r1
     3d8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     3da:	2301      	movs	r3, #1
     3dc:	466a      	mov	r2, sp
     3de:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     3e0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     3e2:	4d17      	ldr	r5, [pc, #92]	; (440 <system_clock_init+0x7c>)
     3e4:	b2e0      	uxtb	r0, r4
     3e6:	4669      	mov	r1, sp
     3e8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     3ea:	3401      	adds	r4, #1
     3ec:	2c25      	cmp	r4, #37	; 0x25
     3ee:	d1f9      	bne.n	3e4 <system_clock_init+0x20>
	config->run_in_standby  = false;
     3f0:	a803      	add	r0, sp, #12
     3f2:	2400      	movs	r4, #0
     3f4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     3f6:	2501      	movs	r5, #1
     3f8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     3fa:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     3fc:	4b11      	ldr	r3, [pc, #68]	; (444 <system_clock_init+0x80>)
     3fe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     400:	2006      	movs	r0, #6
     402:	4b11      	ldr	r3, [pc, #68]	; (448 <system_clock_init+0x84>)
     404:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     406:	4b11      	ldr	r3, [pc, #68]	; (44c <system_clock_init+0x88>)
     408:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     40a:	4b11      	ldr	r3, [pc, #68]	; (450 <system_clock_init+0x8c>)
     40c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     40e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     410:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     412:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     414:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     416:	466b      	mov	r3, sp
     418:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     41a:	2306      	movs	r3, #6
     41c:	466a      	mov	r2, sp
     41e:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     420:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     422:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     424:	4669      	mov	r1, sp
     426:	2000      	movs	r0, #0
     428:	4b0a      	ldr	r3, [pc, #40]	; (454 <system_clock_init+0x90>)
     42a:	4798      	blx	r3
     42c:	2000      	movs	r0, #0
     42e:	4b0a      	ldr	r3, [pc, #40]	; (458 <system_clock_init+0x94>)
     430:	4798      	blx	r3
#endif
}
     432:	b005      	add	sp, #20
     434:	bd30      	pop	{r4, r5, pc}
     436:	46c0      	nop			; (mov r8, r8)
     438:	40000800 	.word	0x40000800
     43c:	41004000 	.word	0x41004000
     440:	00000665 	.word	0x00000665
     444:	000002e1 	.word	0x000002e1
     448:	0000031d 	.word	0x0000031d
     44c:	0000045d 	.word	0x0000045d
     450:	40000400 	.word	0x40000400
     454:	00000481 	.word	0x00000481
     458:	00000539 	.word	0x00000539

0000045c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     45c:	4a06      	ldr	r2, [pc, #24]	; (478 <system_gclk_init+0x1c>)
     45e:	6993      	ldr	r3, [r2, #24]
     460:	2108      	movs	r1, #8
     462:	430b      	orrs	r3, r1
     464:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     466:	2201      	movs	r2, #1
     468:	4b04      	ldr	r3, [pc, #16]	; (47c <system_gclk_init+0x20>)
     46a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     46c:	0019      	movs	r1, r3
     46e:	780b      	ldrb	r3, [r1, #0]
     470:	4213      	tst	r3, r2
     472:	d1fc      	bne.n	46e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     474:	4770      	bx	lr
     476:	46c0      	nop			; (mov r8, r8)
     478:	40000400 	.word	0x40000400
     47c:	40000c00 	.word	0x40000c00

00000480 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     480:	b570      	push	{r4, r5, r6, lr}
     482:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     484:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     486:	780d      	ldrb	r5, [r1, #0]
     488:	022d      	lsls	r5, r5, #8
     48a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     48c:	784b      	ldrb	r3, [r1, #1]
     48e:	2b00      	cmp	r3, #0
     490:	d002      	beq.n	498 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     492:	2380      	movs	r3, #128	; 0x80
     494:	02db      	lsls	r3, r3, #11
     496:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     498:	7a4b      	ldrb	r3, [r1, #9]
     49a:	2b00      	cmp	r3, #0
     49c:	d002      	beq.n	4a4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     49e:	2380      	movs	r3, #128	; 0x80
     4a0:	031b      	lsls	r3, r3, #12
     4a2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     4a4:	6848      	ldr	r0, [r1, #4]
     4a6:	2801      	cmp	r0, #1
     4a8:	d910      	bls.n	4cc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     4aa:	1e43      	subs	r3, r0, #1
     4ac:	4218      	tst	r0, r3
     4ae:	d134      	bne.n	51a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     4b0:	2802      	cmp	r0, #2
     4b2:	d930      	bls.n	516 <system_gclk_gen_set_config+0x96>
     4b4:	2302      	movs	r3, #2
     4b6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     4b8:	3201      	adds	r2, #1
						mask <<= 1) {
     4ba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     4bc:	4298      	cmp	r0, r3
     4be:	d8fb      	bhi.n	4b8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     4c0:	0212      	lsls	r2, r2, #8
     4c2:	4332      	orrs	r2, r6
     4c4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     4c6:	2380      	movs	r3, #128	; 0x80
     4c8:	035b      	lsls	r3, r3, #13
     4ca:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     4cc:	7a0b      	ldrb	r3, [r1, #8]
     4ce:	2b00      	cmp	r3, #0
     4d0:	d002      	beq.n	4d8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     4d2:	2380      	movs	r3, #128	; 0x80
     4d4:	039b      	lsls	r3, r3, #14
     4d6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     4d8:	4a13      	ldr	r2, [pc, #76]	; (528 <system_gclk_gen_set_config+0xa8>)
     4da:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     4dc:	b25b      	sxtb	r3, r3
     4de:	2b00      	cmp	r3, #0
     4e0:	dbfb      	blt.n	4da <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     4e2:	4b12      	ldr	r3, [pc, #72]	; (52c <system_gclk_gen_set_config+0xac>)
     4e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     4e6:	4b12      	ldr	r3, [pc, #72]	; (530 <system_gclk_gen_set_config+0xb0>)
     4e8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     4ea:	4a0f      	ldr	r2, [pc, #60]	; (528 <system_gclk_gen_set_config+0xa8>)
     4ec:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     4ee:	b25b      	sxtb	r3, r3
     4f0:	2b00      	cmp	r3, #0
     4f2:	dbfb      	blt.n	4ec <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     4f4:	4b0c      	ldr	r3, [pc, #48]	; (528 <system_gclk_gen_set_config+0xa8>)
     4f6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     4f8:	001a      	movs	r2, r3
     4fa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     4fc:	b25b      	sxtb	r3, r3
     4fe:	2b00      	cmp	r3, #0
     500:	dbfb      	blt.n	4fa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     502:	4a09      	ldr	r2, [pc, #36]	; (528 <system_gclk_gen_set_config+0xa8>)
     504:	6853      	ldr	r3, [r2, #4]
     506:	2180      	movs	r1, #128	; 0x80
     508:	0249      	lsls	r1, r1, #9
     50a:	400b      	ands	r3, r1
     50c:	431d      	orrs	r5, r3
     50e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     510:	4b08      	ldr	r3, [pc, #32]	; (534 <system_gclk_gen_set_config+0xb4>)
     512:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     514:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     516:	2200      	movs	r2, #0
     518:	e7d2      	b.n	4c0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     51a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     51c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     51e:	2380      	movs	r3, #128	; 0x80
     520:	029b      	lsls	r3, r3, #10
     522:	431d      	orrs	r5, r3
     524:	e7d2      	b.n	4cc <system_gclk_gen_set_config+0x4c>
     526:	46c0      	nop			; (mov r8, r8)
     528:	40000c00 	.word	0x40000c00
     52c:	00000181 	.word	0x00000181
     530:	40000c08 	.word	0x40000c08
     534:	000001c1 	.word	0x000001c1

00000538 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     538:	b510      	push	{r4, lr}
     53a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     53c:	4a0b      	ldr	r2, [pc, #44]	; (56c <system_gclk_gen_enable+0x34>)
     53e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     540:	b25b      	sxtb	r3, r3
     542:	2b00      	cmp	r3, #0
     544:	dbfb      	blt.n	53e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     546:	4b0a      	ldr	r3, [pc, #40]	; (570 <system_gclk_gen_enable+0x38>)
     548:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     54a:	4b0a      	ldr	r3, [pc, #40]	; (574 <system_gclk_gen_enable+0x3c>)
     54c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     54e:	4a07      	ldr	r2, [pc, #28]	; (56c <system_gclk_gen_enable+0x34>)
     550:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     552:	b25b      	sxtb	r3, r3
     554:	2b00      	cmp	r3, #0
     556:	dbfb      	blt.n	550 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     558:	4a04      	ldr	r2, [pc, #16]	; (56c <system_gclk_gen_enable+0x34>)
     55a:	6851      	ldr	r1, [r2, #4]
     55c:	2380      	movs	r3, #128	; 0x80
     55e:	025b      	lsls	r3, r3, #9
     560:	430b      	orrs	r3, r1
     562:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     564:	4b04      	ldr	r3, [pc, #16]	; (578 <system_gclk_gen_enable+0x40>)
     566:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     568:	bd10      	pop	{r4, pc}
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	40000c00 	.word	0x40000c00
     570:	00000181 	.word	0x00000181
     574:	40000c04 	.word	0x40000c04
     578:	000001c1 	.word	0x000001c1

0000057c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     57c:	b570      	push	{r4, r5, r6, lr}
     57e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     580:	4a1a      	ldr	r2, [pc, #104]	; (5ec <system_gclk_gen_get_hz+0x70>)
     582:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     584:	b25b      	sxtb	r3, r3
     586:	2b00      	cmp	r3, #0
     588:	dbfb      	blt.n	582 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     58a:	4b19      	ldr	r3, [pc, #100]	; (5f0 <system_gclk_gen_get_hz+0x74>)
     58c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     58e:	4b19      	ldr	r3, [pc, #100]	; (5f4 <system_gclk_gen_get_hz+0x78>)
     590:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     592:	4a16      	ldr	r2, [pc, #88]	; (5ec <system_gclk_gen_get_hz+0x70>)
     594:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     596:	b25b      	sxtb	r3, r3
     598:	2b00      	cmp	r3, #0
     59a:	dbfb      	blt.n	594 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     59c:	4e13      	ldr	r6, [pc, #76]	; (5ec <system_gclk_gen_get_hz+0x70>)
     59e:	6870      	ldr	r0, [r6, #4]
     5a0:	04c0      	lsls	r0, r0, #19
     5a2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     5a4:	4b14      	ldr	r3, [pc, #80]	; (5f8 <system_gclk_gen_get_hz+0x7c>)
     5a6:	4798      	blx	r3
     5a8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     5aa:	4b12      	ldr	r3, [pc, #72]	; (5f4 <system_gclk_gen_get_hz+0x78>)
     5ac:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     5ae:	6876      	ldr	r6, [r6, #4]
     5b0:	02f6      	lsls	r6, r6, #11
     5b2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     5b4:	4b11      	ldr	r3, [pc, #68]	; (5fc <system_gclk_gen_get_hz+0x80>)
     5b6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     5b8:	4a0c      	ldr	r2, [pc, #48]	; (5ec <system_gclk_gen_get_hz+0x70>)
     5ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     5bc:	b25b      	sxtb	r3, r3
     5be:	2b00      	cmp	r3, #0
     5c0:	dbfb      	blt.n	5ba <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     5c2:	4b0a      	ldr	r3, [pc, #40]	; (5ec <system_gclk_gen_get_hz+0x70>)
     5c4:	689c      	ldr	r4, [r3, #8]
     5c6:	0224      	lsls	r4, r4, #8
     5c8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     5ca:	4b0d      	ldr	r3, [pc, #52]	; (600 <system_gclk_gen_get_hz+0x84>)
     5cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     5ce:	2e00      	cmp	r6, #0
     5d0:	d107      	bne.n	5e2 <system_gclk_gen_get_hz+0x66>
     5d2:	2c01      	cmp	r4, #1
     5d4:	d907      	bls.n	5e6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     5d6:	0021      	movs	r1, r4
     5d8:	0028      	movs	r0, r5
     5da:	4b0a      	ldr	r3, [pc, #40]	; (604 <system_gclk_gen_get_hz+0x88>)
     5dc:	4798      	blx	r3
     5de:	0005      	movs	r5, r0
     5e0:	e001      	b.n	5e6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     5e2:	3401      	adds	r4, #1
     5e4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     5e6:	0028      	movs	r0, r5
     5e8:	bd70      	pop	{r4, r5, r6, pc}
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	40000c00 	.word	0x40000c00
     5f0:	00000181 	.word	0x00000181
     5f4:	40000c04 	.word	0x40000c04
     5f8:	0000024d 	.word	0x0000024d
     5fc:	40000c08 	.word	0x40000c08
     600:	000001c1 	.word	0x000001c1
     604:	00001b85 	.word	0x00001b85

00000608 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     608:	b510      	push	{r4, lr}
     60a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     60c:	4b0f      	ldr	r3, [pc, #60]	; (64c <system_gclk_chan_disable+0x44>)
     60e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     610:	4b0f      	ldr	r3, [pc, #60]	; (650 <system_gclk_chan_disable+0x48>)
     612:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     614:	4a0f      	ldr	r2, [pc, #60]	; (654 <system_gclk_chan_disable+0x4c>)
     616:	8853      	ldrh	r3, [r2, #2]
     618:	051b      	lsls	r3, r3, #20
     61a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     61c:	8853      	ldrh	r3, [r2, #2]
     61e:	490e      	ldr	r1, [pc, #56]	; (658 <system_gclk_chan_disable+0x50>)
     620:	400b      	ands	r3, r1
     622:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     624:	8853      	ldrh	r3, [r2, #2]
     626:	490d      	ldr	r1, [pc, #52]	; (65c <system_gclk_chan_disable+0x54>)
     628:	400b      	ands	r3, r1
     62a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     62c:	0011      	movs	r1, r2
     62e:	2280      	movs	r2, #128	; 0x80
     630:	01d2      	lsls	r2, r2, #7
     632:	884b      	ldrh	r3, [r1, #2]
     634:	4213      	tst	r3, r2
     636:	d1fc      	bne.n	632 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     638:	4906      	ldr	r1, [pc, #24]	; (654 <system_gclk_chan_disable+0x4c>)
     63a:	884a      	ldrh	r2, [r1, #2]
     63c:	0203      	lsls	r3, r0, #8
     63e:	4806      	ldr	r0, [pc, #24]	; (658 <system_gclk_chan_disable+0x50>)
     640:	4002      	ands	r2, r0
     642:	4313      	orrs	r3, r2
     644:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     646:	4b06      	ldr	r3, [pc, #24]	; (660 <system_gclk_chan_disable+0x58>)
     648:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     64a:	bd10      	pop	{r4, pc}
     64c:	00000181 	.word	0x00000181
     650:	40000c02 	.word	0x40000c02
     654:	40000c00 	.word	0x40000c00
     658:	fffff0ff 	.word	0xfffff0ff
     65c:	ffffbfff 	.word	0xffffbfff
     660:	000001c1 	.word	0x000001c1

00000664 <system_gclk_chan_set_config>:
{
     664:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     666:	780c      	ldrb	r4, [r1, #0]
     668:	0224      	lsls	r4, r4, #8
     66a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     66c:	4b02      	ldr	r3, [pc, #8]	; (678 <system_gclk_chan_set_config+0x14>)
     66e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     670:	b2a4      	uxth	r4, r4
     672:	4b02      	ldr	r3, [pc, #8]	; (67c <system_gclk_chan_set_config+0x18>)
     674:	805c      	strh	r4, [r3, #2]
}
     676:	bd10      	pop	{r4, pc}
     678:	00000609 	.word	0x00000609
     67c:	40000c00 	.word	0x40000c00

00000680 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     680:	b510      	push	{r4, lr}
     682:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     684:	4b06      	ldr	r3, [pc, #24]	; (6a0 <system_gclk_chan_get_hz+0x20>)
     686:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     688:	4b06      	ldr	r3, [pc, #24]	; (6a4 <system_gclk_chan_get_hz+0x24>)
     68a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     68c:	4b06      	ldr	r3, [pc, #24]	; (6a8 <system_gclk_chan_get_hz+0x28>)
     68e:	885c      	ldrh	r4, [r3, #2]
     690:	0524      	lsls	r4, r4, #20
     692:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     694:	4b05      	ldr	r3, [pc, #20]	; (6ac <system_gclk_chan_get_hz+0x2c>)
     696:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     698:	0020      	movs	r0, r4
     69a:	4b05      	ldr	r3, [pc, #20]	; (6b0 <system_gclk_chan_get_hz+0x30>)
     69c:	4798      	blx	r3
}
     69e:	bd10      	pop	{r4, pc}
     6a0:	00000181 	.word	0x00000181
     6a4:	40000c02 	.word	0x40000c02
     6a8:	40000c00 	.word	0x40000c00
     6ac:	000001c1 	.word	0x000001c1
     6b0:	0000057d 	.word	0x0000057d

000006b4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     6b4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     6b6:	78d3      	ldrb	r3, [r2, #3]
     6b8:	2b00      	cmp	r3, #0
     6ba:	d135      	bne.n	728 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     6bc:	7813      	ldrb	r3, [r2, #0]
     6be:	2b80      	cmp	r3, #128	; 0x80
     6c0:	d029      	beq.n	716 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     6c2:	061b      	lsls	r3, r3, #24
     6c4:	2480      	movs	r4, #128	; 0x80
     6c6:	0264      	lsls	r4, r4, #9
     6c8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     6ca:	7854      	ldrb	r4, [r2, #1]
     6cc:	2502      	movs	r5, #2
     6ce:	43ac      	bics	r4, r5
     6d0:	d106      	bne.n	6e0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     6d2:	7894      	ldrb	r4, [r2, #2]
     6d4:	2c00      	cmp	r4, #0
     6d6:	d120      	bne.n	71a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     6d8:	2480      	movs	r4, #128	; 0x80
     6da:	02a4      	lsls	r4, r4, #10
     6dc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     6de:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     6e0:	7854      	ldrb	r4, [r2, #1]
     6e2:	3c01      	subs	r4, #1
     6e4:	2c01      	cmp	r4, #1
     6e6:	d91c      	bls.n	722 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     6e8:	040d      	lsls	r5, r1, #16
     6ea:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     6ec:	24a0      	movs	r4, #160	; 0xa0
     6ee:	05e4      	lsls	r4, r4, #23
     6f0:	432c      	orrs	r4, r5
     6f2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     6f4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     6f6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     6f8:	24d0      	movs	r4, #208	; 0xd0
     6fa:	0624      	lsls	r4, r4, #24
     6fc:	432c      	orrs	r4, r5
     6fe:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     700:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     702:	78d4      	ldrb	r4, [r2, #3]
     704:	2c00      	cmp	r4, #0
     706:	d122      	bne.n	74e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     708:	035b      	lsls	r3, r3, #13
     70a:	d51c      	bpl.n	746 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     70c:	7893      	ldrb	r3, [r2, #2]
     70e:	2b01      	cmp	r3, #1
     710:	d01e      	beq.n	750 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     712:	6141      	str	r1, [r0, #20]
     714:	e017      	b.n	746 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     716:	2300      	movs	r3, #0
     718:	e7d7      	b.n	6ca <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     71a:	24c0      	movs	r4, #192	; 0xc0
     71c:	02e4      	lsls	r4, r4, #11
     71e:	4323      	orrs	r3, r4
     720:	e7dd      	b.n	6de <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     722:	4c0d      	ldr	r4, [pc, #52]	; (758 <_system_pinmux_config+0xa4>)
     724:	4023      	ands	r3, r4
     726:	e7df      	b.n	6e8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     728:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     72a:	040c      	lsls	r4, r1, #16
     72c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     72e:	23a0      	movs	r3, #160	; 0xa0
     730:	05db      	lsls	r3, r3, #23
     732:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     734:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     736:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     738:	23d0      	movs	r3, #208	; 0xd0
     73a:	061b      	lsls	r3, r3, #24
     73c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     73e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     740:	78d3      	ldrb	r3, [r2, #3]
     742:	2b00      	cmp	r3, #0
     744:	d103      	bne.n	74e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     746:	7853      	ldrb	r3, [r2, #1]
     748:	3b01      	subs	r3, #1
     74a:	2b01      	cmp	r3, #1
     74c:	d902      	bls.n	754 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     74e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     750:	6181      	str	r1, [r0, #24]
     752:	e7f8      	b.n	746 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     754:	6081      	str	r1, [r0, #8]
}
     756:	e7fa      	b.n	74e <_system_pinmux_config+0x9a>
     758:	fffbffff 	.word	0xfffbffff

0000075c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     75c:	b510      	push	{r4, lr}
     75e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     760:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     762:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     764:	2900      	cmp	r1, #0
     766:	d104      	bne.n	772 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     768:	0943      	lsrs	r3, r0, #5
     76a:	01db      	lsls	r3, r3, #7
     76c:	4905      	ldr	r1, [pc, #20]	; (784 <system_pinmux_pin_set_config+0x28>)
     76e:	468c      	mov	ip, r1
     770:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     772:	241f      	movs	r4, #31
     774:	4020      	ands	r0, r4
     776:	2101      	movs	r1, #1
     778:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     77a:	0018      	movs	r0, r3
     77c:	4b02      	ldr	r3, [pc, #8]	; (788 <system_pinmux_pin_set_config+0x2c>)
     77e:	4798      	blx	r3
}
     780:	bd10      	pop	{r4, pc}
     782:	46c0      	nop			; (mov r8, r8)
     784:	41004400 	.word	0x41004400
     788:	000006b5 	.word	0x000006b5

0000078c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     78c:	4770      	bx	lr
	...

00000790 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     790:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     792:	4b05      	ldr	r3, [pc, #20]	; (7a8 <system_init+0x18>)
     794:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     796:	4b05      	ldr	r3, [pc, #20]	; (7ac <system_init+0x1c>)
     798:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     79a:	4b05      	ldr	r3, [pc, #20]	; (7b0 <system_init+0x20>)
     79c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     79e:	4b05      	ldr	r3, [pc, #20]	; (7b4 <system_init+0x24>)
     7a0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
     7a2:	4b05      	ldr	r3, [pc, #20]	; (7b8 <system_init+0x28>)
     7a4:	4798      	blx	r3
}
     7a6:	bd10      	pop	{r4, pc}
     7a8:	000003c5 	.word	0x000003c5
     7ac:	000001f1 	.word	0x000001f1
     7b0:	0000078d 	.word	0x0000078d
     7b4:	0000078d 	.word	0x0000078d
     7b8:	0000078d 	.word	0x0000078d

000007bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     7bc:	e7fe      	b.n	7bc <Dummy_Handler>
	...

000007c0 <Reset_Handler>:
{
     7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     7c2:	4a2a      	ldr	r2, [pc, #168]	; (86c <Reset_Handler+0xac>)
     7c4:	4b2a      	ldr	r3, [pc, #168]	; (870 <Reset_Handler+0xb0>)
     7c6:	429a      	cmp	r2, r3
     7c8:	d011      	beq.n	7ee <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     7ca:	001a      	movs	r2, r3
     7cc:	4b29      	ldr	r3, [pc, #164]	; (874 <Reset_Handler+0xb4>)
     7ce:	429a      	cmp	r2, r3
     7d0:	d20d      	bcs.n	7ee <Reset_Handler+0x2e>
     7d2:	4a29      	ldr	r2, [pc, #164]	; (878 <Reset_Handler+0xb8>)
     7d4:	3303      	adds	r3, #3
     7d6:	1a9b      	subs	r3, r3, r2
     7d8:	089b      	lsrs	r3, r3, #2
     7da:	3301      	adds	r3, #1
     7dc:	009b      	lsls	r3, r3, #2
     7de:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     7e0:	4823      	ldr	r0, [pc, #140]	; (870 <Reset_Handler+0xb0>)
     7e2:	4922      	ldr	r1, [pc, #136]	; (86c <Reset_Handler+0xac>)
     7e4:	588c      	ldr	r4, [r1, r2]
     7e6:	5084      	str	r4, [r0, r2]
     7e8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     7ea:	429a      	cmp	r2, r3
     7ec:	d1fa      	bne.n	7e4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     7ee:	4a23      	ldr	r2, [pc, #140]	; (87c <Reset_Handler+0xbc>)
     7f0:	4b23      	ldr	r3, [pc, #140]	; (880 <Reset_Handler+0xc0>)
     7f2:	429a      	cmp	r2, r3
     7f4:	d20a      	bcs.n	80c <Reset_Handler+0x4c>
     7f6:	43d3      	mvns	r3, r2
     7f8:	4921      	ldr	r1, [pc, #132]	; (880 <Reset_Handler+0xc0>)
     7fa:	185b      	adds	r3, r3, r1
     7fc:	2103      	movs	r1, #3
     7fe:	438b      	bics	r3, r1
     800:	3304      	adds	r3, #4
     802:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     804:	2100      	movs	r1, #0
     806:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     808:	4293      	cmp	r3, r2
     80a:	d1fc      	bne.n	806 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     80c:	4a1d      	ldr	r2, [pc, #116]	; (884 <Reset_Handler+0xc4>)
     80e:	21ff      	movs	r1, #255	; 0xff
     810:	4b1d      	ldr	r3, [pc, #116]	; (888 <Reset_Handler+0xc8>)
     812:	438b      	bics	r3, r1
     814:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     816:	39fd      	subs	r1, #253	; 0xfd
     818:	2390      	movs	r3, #144	; 0x90
     81a:	005b      	lsls	r3, r3, #1
     81c:	4a1b      	ldr	r2, [pc, #108]	; (88c <Reset_Handler+0xcc>)
     81e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     820:	4a1b      	ldr	r2, [pc, #108]	; (890 <Reset_Handler+0xd0>)
     822:	78d3      	ldrb	r3, [r2, #3]
     824:	2503      	movs	r5, #3
     826:	43ab      	bics	r3, r5
     828:	2402      	movs	r4, #2
     82a:	4323      	orrs	r3, r4
     82c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     82e:	78d3      	ldrb	r3, [r2, #3]
     830:	270c      	movs	r7, #12
     832:	43bb      	bics	r3, r7
     834:	2608      	movs	r6, #8
     836:	4333      	orrs	r3, r6
     838:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     83a:	4b16      	ldr	r3, [pc, #88]	; (894 <Reset_Handler+0xd4>)
     83c:	7b98      	ldrb	r0, [r3, #14]
     83e:	2230      	movs	r2, #48	; 0x30
     840:	4390      	bics	r0, r2
     842:	2220      	movs	r2, #32
     844:	4310      	orrs	r0, r2
     846:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     848:	7b99      	ldrb	r1, [r3, #14]
     84a:	43b9      	bics	r1, r7
     84c:	4331      	orrs	r1, r6
     84e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     850:	7b9a      	ldrb	r2, [r3, #14]
     852:	43aa      	bics	r2, r5
     854:	4322      	orrs	r2, r4
     856:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     858:	4a0f      	ldr	r2, [pc, #60]	; (898 <Reset_Handler+0xd8>)
     85a:	6853      	ldr	r3, [r2, #4]
     85c:	2180      	movs	r1, #128	; 0x80
     85e:	430b      	orrs	r3, r1
     860:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <Reset_Handler+0xdc>)
     864:	4798      	blx	r3
        main();
     866:	4b0e      	ldr	r3, [pc, #56]	; (8a0 <Reset_Handler+0xe0>)
     868:	4798      	blx	r3
     86a:	e7fe      	b.n	86a <Reset_Handler+0xaa>
     86c:	00001d4c 	.word	0x00001d4c
     870:	20000000 	.word	0x20000000
     874:	20000010 	.word	0x20000010
     878:	20000004 	.word	0x20000004
     87c:	20000010 	.word	0x20000010
     880:	20000050 	.word	0x20000050
     884:	e000ed00 	.word	0xe000ed00
     888:	00000000 	.word	0x00000000
     88c:	41007000 	.word	0x41007000
     890:	41005000 	.word	0x41005000
     894:	41004800 	.word	0x41004800
     898:	41004000 	.word	0x41004000
     89c:	00001c9d 	.word	0x00001c9d
     8a0:	00001a65 	.word	0x00001a65

000008a4 <LCD_Fast_Fill>:
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low, (((x2-x1)+1)*((y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, int pix)
{
     8a4:	b530      	push	{r4, r5, lr}
	int blocks;

	REG_PORT_OUTCLR1 = 0x0000ffff;
     8a6:	4c26      	ldr	r4, [pc, #152]	; (940 <LCD_Fast_Fill+0x9c>)
     8a8:	4b26      	ldr	r3, [pc, #152]	; (944 <LCD_Fast_Fill+0xa0>)
     8aa:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
     8ac:	0200      	lsls	r0, r0, #8
     8ae:	4301      	orrs	r1, r0
     8b0:	4b25      	ldr	r3, [pc, #148]	; (948 <LCD_Fast_Fill+0xa4>)
     8b2:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
     8b4:	17d3      	asrs	r3, r2, #31
     8b6:	250f      	movs	r5, #15
     8b8:	401d      	ands	r5, r3
     8ba:	18ad      	adds	r5, r5, r2
     8bc:	112d      	asrs	r5, r5, #4
	for (int i=0; i<blocks; i++)
     8be:	2d00      	cmp	r5, #0
     8c0:	dd27      	ble.n	912 <LCD_Fast_Fill+0x6e>
     8c2:	2400      	movs	r4, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
     8c4:	481f      	ldr	r0, [pc, #124]	; (944 <LCD_Fast_Fill+0xa0>)
     8c6:	2380      	movs	r3, #128	; 0x80
     8c8:	029b      	lsls	r3, r3, #10
		REG_PORT_OUTSET1 = LCD_WR;
     8ca:	491f      	ldr	r1, [pc, #124]	; (948 <LCD_Fast_Fill+0xa4>)
		REG_PORT_OUTCLR1 = LCD_WR;
     8cc:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8ce:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8d0:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8d2:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8d4:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8d6:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8d8:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8da:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8dc:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8de:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8e0:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8e2:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8e4:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8e6:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8e8:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8ea:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8ec:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8ee:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8f0:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8f2:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8f4:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8f6:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8f8:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8fa:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     8fc:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     8fe:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     900:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     902:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     904:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     906:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
     908:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     90a:	600b      	str	r3, [r1, #0]
	for (int i=0; i<blocks; i++)
     90c:	3401      	adds	r4, #1
     90e:	42a5      	cmp	r5, r4
     910:	d1dc      	bne.n	8cc <LCD_Fast_Fill+0x28>
	}
	
	if ((pix % 16) != 0)
     912:	0713      	lsls	r3, r2, #28
     914:	d013      	beq.n	93e <LCD_Fast_Fill+0x9a>
		for (int i=0; i<(pix % 16)+1; i++)
     916:	17d3      	asrs	r3, r2, #31
     918:	0f1b      	lsrs	r3, r3, #28
     91a:	18d2      	adds	r2, r2, r3
     91c:	210f      	movs	r1, #15
     91e:	4011      	ands	r1, r2
     920:	1ac9      	subs	r1, r1, r3
     922:	1c4b      	adds	r3, r1, #1
     924:	2b00      	cmp	r3, #0
     926:	dd0a      	ble.n	93e <LCD_Fast_Fill+0x9a>
     928:	0019      	movs	r1, r3
     92a:	2300      	movs	r3, #0
		{
			REG_PORT_OUTCLR1 = LCD_WR;
     92c:	4c05      	ldr	r4, [pc, #20]	; (944 <LCD_Fast_Fill+0xa0>)
     92e:	2280      	movs	r2, #128	; 0x80
     930:	0292      	lsls	r2, r2, #10
			REG_PORT_OUTSET1 = LCD_WR;
     932:	4805      	ldr	r0, [pc, #20]	; (948 <LCD_Fast_Fill+0xa4>)
			REG_PORT_OUTCLR1 = LCD_WR;
     934:	6022      	str	r2, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
     936:	6002      	str	r2, [r0, #0]
		for (int i=0; i<(pix % 16)+1; i++)
     938:	3301      	adds	r3, #1
     93a:	428b      	cmp	r3, r1
     93c:	d1fa      	bne.n	934 <LCD_Fast_Fill+0x90>
		}
}
     93e:	bd30      	pop	{r4, r5, pc}
     940:	0000ffff 	.word	0x0000ffff
     944:	41004494 	.word	0x41004494
     948:	41004498 	.word	0x41004498

0000094c <LCD_Write_Bus>:
}


void LCD_Write_Bus(char VH, char VL)
{
	REG_PORT_OUTCLR1 = 0x0000ffff;
     94c:	4804      	ldr	r0, [pc, #16]	; (960 <LCD_Write_Bus+0x14>)
     94e:	4b05      	ldr	r3, [pc, #20]	; (964 <LCD_Write_Bus+0x18>)
     950:	6003      	str	r3, [r0, #0]
	REG_PORT_OUTSET1 = (VH >> 8) | VL;
     952:	4b05      	ldr	r3, [pc, #20]	; (968 <LCD_Write_Bus+0x1c>)
     954:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
     956:	2280      	movs	r2, #128	; 0x80
     958:	0292      	lsls	r2, r2, #10
     95a:	6002      	str	r2, [r0, #0]
	REG_PORT_OUTSET1 = LCD_WR;
     95c:	601a      	str	r2, [r3, #0]
}
     95e:	4770      	bx	lr
     960:	41004494 	.word	0x41004494
     964:	0000ffff 	.word	0x0000ffff
     968:	41004498 	.word	0x41004498

0000096c <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
     96c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
     96e:	2280      	movs	r2, #128	; 0x80
     970:	0412      	lsls	r2, r2, #16
     972:	4b02      	ldr	r3, [pc, #8]	; (97c <LCD_Write_COM16+0x10>)
     974:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
     976:	4b02      	ldr	r3, [pc, #8]	; (980 <LCD_Write_COM16+0x14>)
     978:	4798      	blx	r3
}
     97a:	bd10      	pop	{r4, pc}
     97c:	41004494 	.word	0x41004494
     980:	0000094d 	.word	0x0000094d

00000984 <LCD_Write_DATA8>:
	REG_PORT_OUTSET1 = LCD_DC;
	LCD_Write_Bus(VH,VL);
}

void LCD_Write_DATA8(char VL)
{
     984:	b510      	push	{r4, lr}
     986:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
     988:	2280      	movs	r2, #128	; 0x80
     98a:	0412      	lsls	r2, r2, #16
     98c:	4b02      	ldr	r3, [pc, #8]	; (998 <LCD_Write_DATA8+0x14>)
     98e:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
     990:	2000      	movs	r0, #0
     992:	4b02      	ldr	r3, [pc, #8]	; (99c <LCD_Write_DATA8+0x18>)
     994:	4798      	blx	r3
}
     996:	bd10      	pop	{r4, pc}
     998:	41004498 	.word	0x41004498
     99c:	0000094d 	.word	0x0000094d

000009a0 <setXY>:
{
     9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9a2:	b083      	sub	sp, #12
     9a4:	0006      	movs	r6, r0
     9a6:	9200      	str	r2, [sp, #0]
	y1=display_Y_size-y1;
     9a8:	4a1c      	ldr	r2, [pc, #112]	; (a1c <setXY+0x7c>)
     9aa:	8815      	ldrh	r5, [r2, #0]
     9ac:	1a69      	subs	r1, r5, r1
     9ae:	b28f      	uxth	r7, r1
	y2=display_Y_size-y2;
     9b0:	1aed      	subs	r5, r5, r3
     9b2:	b2ad      	uxth	r5, r5
	LCD_Write_COM16(0x2a,0x00);
     9b4:	2100      	movs	r1, #0
     9b6:	202a      	movs	r0, #42	; 0x2a
     9b8:	4c19      	ldr	r4, [pc, #100]	; (a20 <setXY+0x80>)
     9ba:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
     9bc:	9601      	str	r6, [sp, #4]
     9be:	0a30      	lsrs	r0, r6, #8
     9c0:	4e18      	ldr	r6, [pc, #96]	; (a24 <setXY+0x84>)
     9c2:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x01);
     9c4:	2101      	movs	r1, #1
     9c6:	202a      	movs	r0, #42	; 0x2a
     9c8:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
     9ca:	466b      	mov	r3, sp
     9cc:	7918      	ldrb	r0, [r3, #4]
     9ce:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x02);
     9d0:	2102      	movs	r1, #2
     9d2:	202a      	movs	r0, #42	; 0x2a
     9d4:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
     9d6:	9b00      	ldr	r3, [sp, #0]
     9d8:	0a18      	lsrs	r0, r3, #8
     9da:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x03);
     9dc:	2103      	movs	r1, #3
     9de:	202a      	movs	r0, #42	; 0x2a
     9e0:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
     9e2:	466b      	mov	r3, sp
     9e4:	7818      	ldrb	r0, [r3, #0]
     9e6:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x00);
     9e8:	2100      	movs	r1, #0
     9ea:	202b      	movs	r0, #43	; 0x2b
     9ec:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
     9ee:	0a38      	lsrs	r0, r7, #8
     9f0:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x01);
     9f2:	2101      	movs	r1, #1
     9f4:	202b      	movs	r0, #43	; 0x2b
     9f6:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
     9f8:	b2f8      	uxtb	r0, r7
     9fa:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x02);
     9fc:	2102      	movs	r1, #2
     9fe:	202b      	movs	r0, #43	; 0x2b
     a00:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
     a02:	0a28      	lsrs	r0, r5, #8
     a04:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x03);
     a06:	2103      	movs	r1, #3
     a08:	202b      	movs	r0, #43	; 0x2b
     a0a:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
     a0c:	b2e8      	uxtb	r0, r5
     a0e:	47b0      	blx	r6
	LCD_Write_COM16(0x2c,0x00);
     a10:	2100      	movs	r1, #0
     a12:	202c      	movs	r0, #44	; 0x2c
     a14:	47a0      	blx	r4
}
     a16:	b003      	add	sp, #12
     a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	2000000c 	.word	0x2000000c
     a20:	0000096d 	.word	0x0000096d
     a24:	00000985 	.word	0x00000985

00000a28 <fillRect>:
{
     a28:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2a:	b083      	sub	sp, #12
     a2c:	0007      	movs	r7, r0
     a2e:	0015      	movs	r5, r2
     a30:	001a      	movs	r2, r3
	REG_PORT_OUTCLR1 = LCD_CS;
     a32:	2680      	movs	r6, #128	; 0x80
     a34:	03f6      	lsls	r6, r6, #15
     a36:	4b10      	ldr	r3, [pc, #64]	; (a78 <fillRect+0x50>)
     a38:	601e      	str	r6, [r3, #0]
	setXY(x1, y1, x2, y2);
     a3a:	9201      	str	r2, [sp, #4]
     a3c:	466b      	mov	r3, sp
     a3e:	889b      	ldrh	r3, [r3, #4]
     a40:	b2aa      	uxth	r2, r5
     a42:	9100      	str	r1, [sp, #0]
     a44:	4669      	mov	r1, sp
     a46:	8809      	ldrh	r1, [r1, #0]
     a48:	b280      	uxth	r0, r0
     a4a:	4c0c      	ldr	r4, [pc, #48]	; (a7c <fillRect+0x54>)
     a4c:	47a0      	blx	r4
	REG_PORT_OUTSET1 = LCD_DC;
     a4e:	4c0c      	ldr	r4, [pc, #48]	; (a80 <fillRect+0x58>)
     a50:	2380      	movs	r3, #128	; 0x80
     a52:	041b      	lsls	r3, r3, #16
     a54:	6023      	str	r3, [r4, #0]
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low, (((x2-x1)+1)*((y2-y1)+1)));
     a56:	1bed      	subs	r5, r5, r7
     a58:	3501      	adds	r5, #1
     a5a:	9b01      	ldr	r3, [sp, #4]
     a5c:	9a00      	ldr	r2, [sp, #0]
     a5e:	1a9a      	subs	r2, r3, r2
     a60:	3201      	adds	r2, #1
     a62:	436a      	muls	r2, r5
     a64:	4b07      	ldr	r3, [pc, #28]	; (a84 <fillRect+0x5c>)
     a66:	7819      	ldrb	r1, [r3, #0]
     a68:	4b07      	ldr	r3, [pc, #28]	; (a88 <fillRect+0x60>)
     a6a:	7818      	ldrb	r0, [r3, #0]
     a6c:	4b07      	ldr	r3, [pc, #28]	; (a8c <fillRect+0x64>)
     a6e:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
     a70:	6026      	str	r6, [r4, #0]
}
     a72:	b003      	add	sp, #12
     a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	41004494 	.word	0x41004494
     a7c:	000009a1 	.word	0x000009a1
     a80:	41004498 	.word	0x41004498
     a84:	2000004e 	.word	0x2000004e
     a88:	2000004d 	.word	0x2000004d
     a8c:	000008a5 	.word	0x000008a5

00000a90 <clrXY>:
{
     a90:	b510      	push	{r4, lr}
	setXY(0,0,display_Y_size,display_X_size);
     a92:	4b04      	ldr	r3, [pc, #16]	; (aa4 <clrXY+0x14>)
     a94:	881b      	ldrh	r3, [r3, #0]
     a96:	4a04      	ldr	r2, [pc, #16]	; (aa8 <clrXY+0x18>)
     a98:	8812      	ldrh	r2, [r2, #0]
     a9a:	2100      	movs	r1, #0
     a9c:	2000      	movs	r0, #0
     a9e:	4c03      	ldr	r4, [pc, #12]	; (aac <clrXY+0x1c>)
     aa0:	47a0      	blx	r4
}
     aa2:	bd10      	pop	{r4, pc}
     aa4:	2000000a 	.word	0x2000000a
     aa8:	2000000c 	.word	0x2000000c
     aac:	000009a1 	.word	0x000009a1

00000ab0 <clrScr>:
{
     ab0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
     ab2:	2280      	movs	r2, #128	; 0x80
     ab4:	03d2      	lsls	r2, r2, #15
     ab6:	4b02      	ldr	r3, [pc, #8]	; (ac0 <clrScr+0x10>)
     ab8:	601a      	str	r2, [r3, #0]
	clrXY();
     aba:	4b02      	ldr	r3, [pc, #8]	; (ac4 <clrScr+0x14>)
     abc:	4798      	blx	r3
}
     abe:	bd10      	pop	{r4, pc}
     ac0:	41004494 	.word	0x41004494
     ac4:	00000a91 	.word	0x00000a91

00000ac8 <InitLCD>:

void InitLCD(void)
{
     ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			(120+100+15+15+5). This does not include writing all black
			to the display.
	6) pull Chip Select high.
	*/
	
	REG_PORT_DIRSET1 = 0x00010000;
     aca:	2380      	movs	r3, #128	; 0x80
     acc:	025b      	lsls	r3, r3, #9
     ace:	4afe      	ldr	r2, [pc, #1016]	; (ec8 <InitLCD+0x400>)
     ad0:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
     ad2:	4cfe      	ldr	r4, [pc, #1016]	; (ecc <InitLCD+0x404>)
     ad4:	6023      	str	r3, [r4, #0]
	
	REG_PORT_OUTSET1 = LCD_Reset;
     ad6:	2580      	movs	r5, #128	; 0x80
     ad8:	05ed      	lsls	r5, r5, #23
     ada:	6025      	str	r5, [r4, #0]
	delay_ms(5);
     adc:	2005      	movs	r0, #5
     ade:	4ffc      	ldr	r7, [pc, #1008]	; (ed0 <InitLCD+0x408>)
     ae0:	47b8      	blx	r7
	REG_PORT_OUTCLR1 = LCD_Reset;
     ae2:	4efc      	ldr	r6, [pc, #1008]	; (ed4 <InitLCD+0x40c>)
     ae4:	6035      	str	r5, [r6, #0]
	delay_ms(15);
     ae6:	200f      	movs	r0, #15
     ae8:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_Reset;
     aea:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;		
     aec:	2380      	movs	r3, #128	; 0x80
     aee:	03db      	lsls	r3, r3, #15
     af0:	6033      	str	r3, [r6, #0]
	
	//LCD CS pin can be permanently grounded per data sheet version 0.00 page 85
	//However, we're going to do whatever I stole from the Chinese in this 
	//instance because this is a fucking load of bullshit
									
	LCD_Write_COM16(0xF0,0x00);	LCD_Write_DATA8(0x55);
     af2:	2100      	movs	r1, #0
     af4:	20f0      	movs	r0, #240	; 0xf0
     af6:	4cf8      	ldr	r4, [pc, #992]	; (ed8 <InitLCD+0x410>)
     af8:	47a0      	blx	r4
     afa:	2055      	movs	r0, #85	; 0x55
     afc:	4df7      	ldr	r5, [pc, #988]	; (edc <InitLCD+0x414>)
     afe:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x01);	LCD_Write_DATA8(0xAA);
     b00:	2101      	movs	r1, #1
     b02:	20f0      	movs	r0, #240	; 0xf0
     b04:	47a0      	blx	r4
     b06:	20aa      	movs	r0, #170	; 0xaa
     b08:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x02);	LCD_Write_DATA8(0x52);
     b0a:	2102      	movs	r1, #2
     b0c:	20f0      	movs	r0, #240	; 0xf0
     b0e:	47a0      	blx	r4
     b10:	2052      	movs	r0, #82	; 0x52
     b12:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x03);	LCD_Write_DATA8(0x08);
     b14:	2103      	movs	r1, #3
     b16:	20f0      	movs	r0, #240	; 0xf0
     b18:	47a0      	blx	r4
     b1a:	2008      	movs	r0, #8
     b1c:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x04);	LCD_Write_DATA8(0x01);
     b1e:	2104      	movs	r1, #4
     b20:	20f0      	movs	r0, #240	; 0xf0
     b22:	47a0      	blx	r4
     b24:	2001      	movs	r0, #1
     b26:	47a8      	blx	r5
	
	//#AVDD Set AVDD 5.2V
	LCD_Write_COM16(0xB0,0x00);	LCD_Write_DATA8(0x0D);
     b28:	2100      	movs	r1, #0
     b2a:	20b0      	movs	r0, #176	; 0xb0
     b2c:	47a0      	blx	r4
     b2e:	200d      	movs	r0, #13
     b30:	47a8      	blx	r5
	LCD_Write_COM16(0xB0,0x01);	LCD_Write_DATA8(0x0D);
     b32:	2101      	movs	r1, #1
     b34:	20b0      	movs	r0, #176	; 0xb0
     b36:	47a0      	blx	r4
     b38:	200d      	movs	r0, #13
     b3a:	47a8      	blx	r5
	LCD_Write_COM16(0xB0,0x02);	LCD_Write_DATA8(0x0D);
     b3c:	2102      	movs	r1, #2
     b3e:	20b0      	movs	r0, #176	; 0xb0
     b40:	47a0      	blx	r4
     b42:	200d      	movs	r0, #13
     b44:	47a8      	blx	r5
	
	//#AVDD ratio
	LCD_Write_COM16(0xB6,0x00);	LCD_Write_DATA8(0x34);
     b46:	2100      	movs	r1, #0
     b48:	20b6      	movs	r0, #182	; 0xb6
     b4a:	47a0      	blx	r4
     b4c:	2034      	movs	r0, #52	; 0x34
     b4e:	47a8      	blx	r5
	LCD_Write_COM16(0xB6,0x01);	LCD_Write_DATA8(0x34);
     b50:	2101      	movs	r1, #1
     b52:	20b6      	movs	r0, #182	; 0xb6
     b54:	47a0      	blx	r4
     b56:	2034      	movs	r0, #52	; 0x34
     b58:	47a8      	blx	r5
	LCD_Write_COM16(0xB6,0x02);	LCD_Write_DATA8(0x34);
     b5a:	2102      	movs	r1, #2
     b5c:	20b6      	movs	r0, #182	; 0xb6
     b5e:	47a0      	blx	r4
     b60:	2034      	movs	r0, #52	; 0x34
     b62:	47a8      	blx	r5
	 
	//#AVEE  -5.2V
	LCD_Write_COM16(0xB1,0x00);	LCD_Write_DATA8(0x0D);
     b64:	2100      	movs	r1, #0
     b66:	20b1      	movs	r0, #177	; 0xb1
     b68:	47a0      	blx	r4
     b6a:	200d      	movs	r0, #13
     b6c:	47a8      	blx	r5
	LCD_Write_COM16(0xB1,0x01);	LCD_Write_DATA8(0x0D);
     b6e:	2101      	movs	r1, #1
     b70:	20b1      	movs	r0, #177	; 0xb1
     b72:	47a0      	blx	r4
     b74:	200d      	movs	r0, #13
     b76:	47a8      	blx	r5
	LCD_Write_COM16(0xB1,0x02);	LCD_Write_DATA8(0x0D);
     b78:	2102      	movs	r1, #2
     b7a:	20b1      	movs	r0, #177	; 0xb1
     b7c:	47a0      	blx	r4
     b7e:	200d      	movs	r0, #13
     b80:	47a8      	blx	r5
	
	//#AVEE ratio
	LCD_Write_COM16(0xB7,0x00);	LCD_Write_DATA8(0x34);
     b82:	2100      	movs	r1, #0
     b84:	20b7      	movs	r0, #183	; 0xb7
     b86:	47a0      	blx	r4
     b88:	2034      	movs	r0, #52	; 0x34
     b8a:	47a8      	blx	r5
	LCD_Write_COM16(0xB7,0x01);	LCD_Write_DATA8(0x34);
     b8c:	2101      	movs	r1, #1
     b8e:	20b7      	movs	r0, #183	; 0xb7
     b90:	47a0      	blx	r4
     b92:	2034      	movs	r0, #52	; 0x34
     b94:	47a8      	blx	r5
	LCD_Write_COM16(0xB7,0x02);	LCD_Write_DATA8(0x34);
     b96:	2102      	movs	r1, #2
     b98:	20b7      	movs	r0, #183	; 0xb7
     b9a:	47a0      	blx	r4
     b9c:	2034      	movs	r0, #52	; 0x34
     b9e:	47a8      	blx	r5
	
	//#VCL  -2.5V
	LCD_Write_COM16(0xB2,0x00);	LCD_Write_DATA8(0x00);
     ba0:	2100      	movs	r1, #0
     ba2:	20b2      	movs	r0, #178	; 0xb2
     ba4:	47a0      	blx	r4
     ba6:	2000      	movs	r0, #0
     ba8:	47a8      	blx	r5
	LCD_Write_COM16(0xB2,0x01);	LCD_Write_DATA8(0x00);
     baa:	2101      	movs	r1, #1
     bac:	20b2      	movs	r0, #178	; 0xb2
     bae:	47a0      	blx	r4
     bb0:	2000      	movs	r0, #0
     bb2:	47a8      	blx	r5
	LCD_Write_COM16(0xB2,0x02);	LCD_Write_DATA8(0x00);
     bb4:	2102      	movs	r1, #2
     bb6:	20b2      	movs	r0, #178	; 0xb2
     bb8:	47a0      	blx	r4
     bba:	2000      	movs	r0, #0
     bbc:	47a8      	blx	r5
	
	//#VCL ratio
	LCD_Write_COM16(0xB8,0x00);	LCD_Write_DATA8(0x24);
     bbe:	2100      	movs	r1, #0
     bc0:	20b8      	movs	r0, #184	; 0xb8
     bc2:	47a0      	blx	r4
     bc4:	2024      	movs	r0, #36	; 0x24
     bc6:	47a8      	blx	r5
	LCD_Write_COM16(0xB8,0x01);	LCD_Write_DATA8(0x24);
     bc8:	2101      	movs	r1, #1
     bca:	20b8      	movs	r0, #184	; 0xb8
     bcc:	47a0      	blx	r4
     bce:	2024      	movs	r0, #36	; 0x24
     bd0:	47a8      	blx	r5
	LCD_Write_COM16(0xB8,0x02);	LCD_Write_DATA8(0x24); 
     bd2:	2102      	movs	r1, #2
     bd4:	20b8      	movs	r0, #184	; 0xb8
     bd6:	47a0      	blx	r4
     bd8:	2024      	movs	r0, #36	; 0x24
     bda:	47a8      	blx	r5
	
	//#VGH  15V
	LCD_Write_COM16(0xBF,0x00);	LCD_Write_DATA8(0x01);
     bdc:	2100      	movs	r1, #0
     bde:	20bf      	movs	r0, #191	; 0xbf
     be0:	47a0      	blx	r4
     be2:	2001      	movs	r0, #1
     be4:	47a8      	blx	r5
	LCD_Write_COM16(0xB3,0x00);	LCD_Write_DATA8(0x0F);
     be6:	2100      	movs	r1, #0
     be8:	20b3      	movs	r0, #179	; 0xb3
     bea:	47a0      	blx	r4
     bec:	200f      	movs	r0, #15
     bee:	47a8      	blx	r5
	LCD_Write_COM16(0xB3,0x01);	LCD_Write_DATA8(0x0F);
     bf0:	2101      	movs	r1, #1
     bf2:	20b3      	movs	r0, #179	; 0xb3
     bf4:	47a0      	blx	r4
     bf6:	200f      	movs	r0, #15
     bf8:	47a8      	blx	r5
	LCD_Write_COM16(0xB3,0x02);	LCD_Write_DATA8(0x0F);
     bfa:	2102      	movs	r1, #2
     bfc:	20b3      	movs	r0, #179	; 0xb3
     bfe:	47a0      	blx	r4
     c00:	200f      	movs	r0, #15
     c02:	47a8      	blx	r5
	
	//#VGH  ratio
	LCD_Write_COM16(0xB9,0x00);	LCD_Write_DATA8(0x34);
     c04:	2100      	movs	r1, #0
     c06:	20b9      	movs	r0, #185	; 0xb9
     c08:	47a0      	blx	r4
     c0a:	2034      	movs	r0, #52	; 0x34
     c0c:	47a8      	blx	r5
	LCD_Write_COM16(0xB9,0x01);	LCD_Write_DATA8(0x34);
     c0e:	2101      	movs	r1, #1
     c10:	20b9      	movs	r0, #185	; 0xb9
     c12:	47a0      	blx	r4
     c14:	2034      	movs	r0, #52	; 0x34
     c16:	47a8      	blx	r5
	LCD_Write_COM16(0xB9,0x02);	LCD_Write_DATA8(0x34); 
     c18:	2102      	movs	r1, #2
     c1a:	20b9      	movs	r0, #185	; 0xb9
     c1c:	47a0      	blx	r4
     c1e:	2034      	movs	r0, #52	; 0x34
     c20:	47a8      	blx	r5
	
	//#VGL_REG  -10V
	LCD_Write_COM16(0xB5,0x00);	LCD_Write_DATA8(0x08);
     c22:	2100      	movs	r1, #0
     c24:	20b5      	movs	r0, #181	; 0xb5
     c26:	47a0      	blx	r4
     c28:	2008      	movs	r0, #8
     c2a:	47a8      	blx	r5
	LCD_Write_COM16(0xB5,0x00);	LCD_Write_DATA8(0x08);
     c2c:	2100      	movs	r1, #0
     c2e:	20b5      	movs	r0, #181	; 0xb5
     c30:	47a0      	blx	r4
     c32:	2008      	movs	r0, #8
     c34:	47a8      	blx	r5
	LCD_Write_COM16(0xB5,0x01);	LCD_Write_DATA8(0x08);
     c36:	2101      	movs	r1, #1
     c38:	20b5      	movs	r0, #181	; 0xb5
     c3a:	47a0      	blx	r4
     c3c:	2008      	movs	r0, #8
     c3e:	47a8      	blx	r5
	LCD_Write_COM16(0xC2,0x00);	LCD_Write_DATA8(0x03);
     c40:	2100      	movs	r1, #0
     c42:	20c2      	movs	r0, #194	; 0xc2
     c44:	47a0      	blx	r4
     c46:	2003      	movs	r0, #3
     c48:	47a8      	blx	r5
	
	//#VGLX  ratio
	LCD_Write_COM16(0xBA,0x00);	LCD_Write_DATA8(0x24);
     c4a:	2100      	movs	r1, #0
     c4c:	20ba      	movs	r0, #186	; 0xba
     c4e:	47a0      	blx	r4
     c50:	2024      	movs	r0, #36	; 0x24
     c52:	47a8      	blx	r5
	LCD_Write_COM16(0xBA,0x01);	LCD_Write_DATA8(0x24);
     c54:	2101      	movs	r1, #1
     c56:	20ba      	movs	r0, #186	; 0xba
     c58:	47a0      	blx	r4
     c5a:	2024      	movs	r0, #36	; 0x24
     c5c:	47a8      	blx	r5
	LCD_Write_COM16(0xBA,0x02);	LCD_Write_DATA8(0x24);
     c5e:	2102      	movs	r1, #2
     c60:	20ba      	movs	r0, #186	; 0xba
     c62:	47a0      	blx	r4
     c64:	2024      	movs	r0, #36	; 0x24
     c66:	47a8      	blx	r5
	
	//#VGMP/VGSP 4.5V/0V
	LCD_Write_COM16(0xBC,0x00);	LCD_Write_DATA8(0x00);
     c68:	2100      	movs	r1, #0
     c6a:	20bc      	movs	r0, #188	; 0xbc
     c6c:	47a0      	blx	r4
     c6e:	2000      	movs	r0, #0
     c70:	47a8      	blx	r5
	LCD_Write_COM16(0xBC,0x01);	LCD_Write_DATA8(0x78);
     c72:	2101      	movs	r1, #1
     c74:	20bc      	movs	r0, #188	; 0xbc
     c76:	47a0      	blx	r4
     c78:	2078      	movs	r0, #120	; 0x78
     c7a:	47a8      	blx	r5
	LCD_Write_COM16(0xBC,0x02);	LCD_Write_DATA8(0x00);
     c7c:	2102      	movs	r1, #2
     c7e:	20bc      	movs	r0, #188	; 0xbc
     c80:	47a0      	blx	r4
     c82:	2000      	movs	r0, #0
     c84:	47a8      	blx	r5
	
	//#VGMN/VGSN -4.5V/0V
	LCD_Write_COM16(0xBD,0x00);	LCD_Write_DATA8(0x00);
     c86:	2100      	movs	r1, #0
     c88:	20bd      	movs	r0, #189	; 0xbd
     c8a:	47a0      	blx	r4
     c8c:	2000      	movs	r0, #0
     c8e:	47a8      	blx	r5
	LCD_Write_COM16(0xBD,0x01);	LCD_Write_DATA8(0x78);
     c90:	2101      	movs	r1, #1
     c92:	20bd      	movs	r0, #189	; 0xbd
     c94:	47a0      	blx	r4
     c96:	2078      	movs	r0, #120	; 0x78
     c98:	47a8      	blx	r5
	LCD_Write_COM16(0xBD,0x02);	LCD_Write_DATA8(0x00);
     c9a:	2102      	movs	r1, #2
     c9c:	20bd      	movs	r0, #189	; 0xbd
     c9e:	47a0      	blx	r4
     ca0:	2000      	movs	r0, #0
     ca2:	47a8      	blx	r5
	
	//#VCOM  -1.325V
	LCD_Write_COM16(0xBE,0x00);	LCD_Write_DATA8(0x00);
     ca4:	2100      	movs	r1, #0
     ca6:	20be      	movs	r0, #190	; 0xbe
     ca8:	47a0      	blx	r4
     caa:	2000      	movs	r0, #0
     cac:	47a8      	blx	r5
	LCD_Write_COM16(0xBE,0x01);	LCD_Write_DATA8(0x89);
     cae:	2101      	movs	r1, #1
     cb0:	20be      	movs	r0, #190	; 0xbe
     cb2:	47a0      	blx	r4
     cb4:	2089      	movs	r0, #137	; 0x89
     cb6:	47a8      	blx	r5
	
	 //Gamma Setting	 
	LCD_Write_COM16(0xD1,0x00);	LCD_Write_DATA8(0x00);
     cb8:	2100      	movs	r1, #0
     cba:	20d1      	movs	r0, #209	; 0xd1
     cbc:	47a0      	blx	r4
     cbe:	2000      	movs	r0, #0
     cc0:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x01);	LCD_Write_DATA8(0x2D);
     cc2:	2101      	movs	r1, #1
     cc4:	20d1      	movs	r0, #209	; 0xd1
     cc6:	47a0      	blx	r4
     cc8:	202d      	movs	r0, #45	; 0x2d
     cca:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x02);	LCD_Write_DATA8(0x00);
     ccc:	2102      	movs	r1, #2
     cce:	20d1      	movs	r0, #209	; 0xd1
     cd0:	47a0      	blx	r4
     cd2:	2000      	movs	r0, #0
     cd4:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x03);	LCD_Write_DATA8(0x2E);
     cd6:	2103      	movs	r1, #3
     cd8:	20d1      	movs	r0, #209	; 0xd1
     cda:	47a0      	blx	r4
     cdc:	202e      	movs	r0, #46	; 0x2e
     cde:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x04);	LCD_Write_DATA8(0x00); 
     ce0:	2104      	movs	r1, #4
     ce2:	20d1      	movs	r0, #209	; 0xd1
     ce4:	47a0      	blx	r4
     ce6:	2000      	movs	r0, #0
     ce8:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x05);	LCD_Write_DATA8(0x32);
     cea:	2105      	movs	r1, #5
     cec:	20d1      	movs	r0, #209	; 0xd1
     cee:	47a0      	blx	r4
     cf0:	2032      	movs	r0, #50	; 0x32
     cf2:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x06);	LCD_Write_DATA8(0x00);
     cf4:	2106      	movs	r1, #6
     cf6:	20d1      	movs	r0, #209	; 0xd1
     cf8:	47a0      	blx	r4
     cfa:	2000      	movs	r0, #0
     cfc:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x07);	LCD_Write_DATA8(0x44);
     cfe:	2107      	movs	r1, #7
     d00:	20d1      	movs	r0, #209	; 0xd1
     d02:	47a0      	blx	r4
     d04:	2044      	movs	r0, #68	; 0x44
     d06:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x08);	LCD_Write_DATA8(0x00);
     d08:	2108      	movs	r1, #8
     d0a:	20d1      	movs	r0, #209	; 0xd1
     d0c:	47a0      	blx	r4
     d0e:	2000      	movs	r0, #0
     d10:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x09);	LCD_Write_DATA8(0x53);
     d12:	2109      	movs	r1, #9
     d14:	20d1      	movs	r0, #209	; 0xd1
     d16:	47a0      	blx	r4
     d18:	2053      	movs	r0, #83	; 0x53
     d1a:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0A);	LCD_Write_DATA8(0x00);
     d1c:	210a      	movs	r1, #10
     d1e:	20d1      	movs	r0, #209	; 0xd1
     d20:	47a0      	blx	r4
     d22:	2000      	movs	r0, #0
     d24:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0B);	LCD_Write_DATA8(0x88);
     d26:	210b      	movs	r1, #11
     d28:	20d1      	movs	r0, #209	; 0xd1
     d2a:	47a0      	blx	r4
     d2c:	2088      	movs	r0, #136	; 0x88
     d2e:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0C);	LCD_Write_DATA8(0x00);
     d30:	210c      	movs	r1, #12
     d32:	20d1      	movs	r0, #209	; 0xd1
     d34:	47a0      	blx	r4
     d36:	2000      	movs	r0, #0
     d38:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0D);	LCD_Write_DATA8(0xB6);
     d3a:	210d      	movs	r1, #13
     d3c:	20d1      	movs	r0, #209	; 0xd1
     d3e:	47a0      	blx	r4
     d40:	20b6      	movs	r0, #182	; 0xb6
     d42:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0E);	LCD_Write_DATA8(0x00);
     d44:	210e      	movs	r1, #14
     d46:	20d1      	movs	r0, #209	; 0xd1
     d48:	47a0      	blx	r4
     d4a:	2000      	movs	r0, #0
     d4c:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0F);	LCD_Write_DATA8(0xF3);
     d4e:	210f      	movs	r1, #15
     d50:	20d1      	movs	r0, #209	; 0xd1
     d52:	47a0      	blx	r4
     d54:	20f3      	movs	r0, #243	; 0xf3
     d56:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x10);	LCD_Write_DATA8(0x01);
     d58:	2110      	movs	r1, #16
     d5a:	20d1      	movs	r0, #209	; 0xd1
     d5c:	47a0      	blx	r4
     d5e:	2001      	movs	r0, #1
     d60:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x11);	LCD_Write_DATA8(0x22);
     d62:	2111      	movs	r1, #17
     d64:	20d1      	movs	r0, #209	; 0xd1
     d66:	47a0      	blx	r4
     d68:	2022      	movs	r0, #34	; 0x22
     d6a:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x12);	LCD_Write_DATA8(0x01);
     d6c:	2112      	movs	r1, #18
     d6e:	20d1      	movs	r0, #209	; 0xd1
     d70:	47a0      	blx	r4
     d72:	2001      	movs	r0, #1
     d74:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x13);	LCD_Write_DATA8(0x64);
     d76:	2113      	movs	r1, #19
     d78:	20d1      	movs	r0, #209	; 0xd1
     d7a:	47a0      	blx	r4
     d7c:	2064      	movs	r0, #100	; 0x64
     d7e:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x14);	LCD_Write_DATA8(0x01);
     d80:	2114      	movs	r1, #20
     d82:	20d1      	movs	r0, #209	; 0xd1
     d84:	47a0      	blx	r4
     d86:	2001      	movs	r0, #1
     d88:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x15);	LCD_Write_DATA8(0x92);
     d8a:	2115      	movs	r1, #21
     d8c:	20d1      	movs	r0, #209	; 0xd1
     d8e:	47a0      	blx	r4
     d90:	2092      	movs	r0, #146	; 0x92
     d92:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x16);	LCD_Write_DATA8(0x01);
     d94:	2116      	movs	r1, #22
     d96:	20d1      	movs	r0, #209	; 0xd1
     d98:	47a0      	blx	r4
     d9a:	2001      	movs	r0, #1
     d9c:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x17);	LCD_Write_DATA8(0xD4);
     d9e:	2117      	movs	r1, #23
     da0:	20d1      	movs	r0, #209	; 0xd1
     da2:	47a0      	blx	r4
     da4:	20d4      	movs	r0, #212	; 0xd4
     da6:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x18);	LCD_Write_DATA8(0x02);	
     da8:	2118      	movs	r1, #24
     daa:	20d1      	movs	r0, #209	; 0xd1
     dac:	47a0      	blx	r4
     dae:	2002      	movs	r0, #2
     db0:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x19);	LCD_Write_DATA8(0x07);
     db2:	2119      	movs	r1, #25
     db4:	20d1      	movs	r0, #209	; 0xd1
     db6:	47a0      	blx	r4
     db8:	2007      	movs	r0, #7
     dba:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1A);	LCD_Write_DATA8(0x02);
     dbc:	211a      	movs	r1, #26
     dbe:	20d1      	movs	r0, #209	; 0xd1
     dc0:	47a0      	blx	r4
     dc2:	2002      	movs	r0, #2
     dc4:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1B);	LCD_Write_DATA8(0x08);
     dc6:	211b      	movs	r1, #27
     dc8:	20d1      	movs	r0, #209	; 0xd1
     dca:	47a0      	blx	r4
     dcc:	2008      	movs	r0, #8
     dce:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1C);	LCD_Write_DATA8(0x02);
     dd0:	211c      	movs	r1, #28
     dd2:	20d1      	movs	r0, #209	; 0xd1
     dd4:	47a0      	blx	r4
     dd6:	2002      	movs	r0, #2
     dd8:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1D);	LCD_Write_DATA8(0x34);
     dda:	211d      	movs	r1, #29
     ddc:	20d1      	movs	r0, #209	; 0xd1
     dde:	47a0      	blx	r4
     de0:	2034      	movs	r0, #52	; 0x34
     de2:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1E);	LCD_Write_DATA8(0x02);
     de4:	211e      	movs	r1, #30
     de6:	20d1      	movs	r0, #209	; 0xd1
     de8:	47a0      	blx	r4
     dea:	2002      	movs	r0, #2
     dec:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1F);	LCD_Write_DATA8(0x5F);
     dee:	211f      	movs	r1, #31
     df0:	20d1      	movs	r0, #209	; 0xd1
     df2:	47a0      	blx	r4
     df4:	205f      	movs	r0, #95	; 0x5f
     df6:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x20);	LCD_Write_DATA8(0x02);
     df8:	2120      	movs	r1, #32
     dfa:	20d1      	movs	r0, #209	; 0xd1
     dfc:	47a0      	blx	r4
     dfe:	2002      	movs	r0, #2
     e00:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x21);	LCD_Write_DATA8(0x78);
     e02:	2121      	movs	r1, #33	; 0x21
     e04:	20d1      	movs	r0, #209	; 0xd1
     e06:	47a0      	blx	r4
     e08:	2078      	movs	r0, #120	; 0x78
     e0a:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x22);	LCD_Write_DATA8(0x02);
     e0c:	2122      	movs	r1, #34	; 0x22
     e0e:	20d1      	movs	r0, #209	; 0xd1
     e10:	47a0      	blx	r4
     e12:	2002      	movs	r0, #2
     e14:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x23);	LCD_Write_DATA8(0x94);
     e16:	2123      	movs	r1, #35	; 0x23
     e18:	20d1      	movs	r0, #209	; 0xd1
     e1a:	47a0      	blx	r4
     e1c:	2094      	movs	r0, #148	; 0x94
     e1e:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x24);	LCD_Write_DATA8(0x02);
     e20:	2124      	movs	r1, #36	; 0x24
     e22:	20d1      	movs	r0, #209	; 0xd1
     e24:	47a0      	blx	r4
     e26:	2002      	movs	r0, #2
     e28:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x25);	LCD_Write_DATA8(0xA6);
     e2a:	2125      	movs	r1, #37	; 0x25
     e2c:	20d1      	movs	r0, #209	; 0xd1
     e2e:	47a0      	blx	r4
     e30:	20a6      	movs	r0, #166	; 0xa6
     e32:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x26);	LCD_Write_DATA8(0x02);
     e34:	2126      	movs	r1, #38	; 0x26
     e36:	20d1      	movs	r0, #209	; 0xd1
     e38:	47a0      	blx	r4
     e3a:	2002      	movs	r0, #2
     e3c:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x27);	LCD_Write_DATA8(0xBB);
     e3e:	2127      	movs	r1, #39	; 0x27
     e40:	20d1      	movs	r0, #209	; 0xd1
     e42:	47a0      	blx	r4
     e44:	20bb      	movs	r0, #187	; 0xbb
     e46:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x28);	LCD_Write_DATA8(0x02); 
     e48:	2128      	movs	r1, #40	; 0x28
     e4a:	20d1      	movs	r0, #209	; 0xd1
     e4c:	47a0      	blx	r4
     e4e:	2002      	movs	r0, #2
     e50:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x29);	LCD_Write_DATA8(0xCA);
     e52:	2129      	movs	r1, #41	; 0x29
     e54:	20d1      	movs	r0, #209	; 0xd1
     e56:	47a0      	blx	r4
     e58:	20ca      	movs	r0, #202	; 0xca
     e5a:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2A);	LCD_Write_DATA8(0x02);
     e5c:	212a      	movs	r1, #42	; 0x2a
     e5e:	20d1      	movs	r0, #209	; 0xd1
     e60:	47a0      	blx	r4
     e62:	2002      	movs	r0, #2
     e64:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2B);	LCD_Write_DATA8(0xDB);
     e66:	212b      	movs	r1, #43	; 0x2b
     e68:	20d1      	movs	r0, #209	; 0xd1
     e6a:	47a0      	blx	r4
     e6c:	20db      	movs	r0, #219	; 0xdb
     e6e:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2C);	LCD_Write_DATA8(0x02);
     e70:	212c      	movs	r1, #44	; 0x2c
     e72:	20d1      	movs	r0, #209	; 0xd1
     e74:	47a0      	blx	r4
     e76:	2002      	movs	r0, #2
     e78:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2D);	LCD_Write_DATA8(0xE8);
     e7a:	212d      	movs	r1, #45	; 0x2d
     e7c:	20d1      	movs	r0, #209	; 0xd1
     e7e:	47a0      	blx	r4
     e80:	20e8      	movs	r0, #232	; 0xe8
     e82:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2E);	LCD_Write_DATA8(0x02);
     e84:	212e      	movs	r1, #46	; 0x2e
     e86:	20d1      	movs	r0, #209	; 0xd1
     e88:	47a0      	blx	r4
     e8a:	2002      	movs	r0, #2
     e8c:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2F);	LCD_Write_DATA8(0xF9);
     e8e:	212f      	movs	r1, #47	; 0x2f
     e90:	20d1      	movs	r0, #209	; 0xd1
     e92:	47a0      	blx	r4
     e94:	20f9      	movs	r0, #249	; 0xf9
     e96:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x30);	LCD_Write_DATA8(0x03); 
     e98:	2130      	movs	r1, #48	; 0x30
     e9a:	20d1      	movs	r0, #209	; 0xd1
     e9c:	47a0      	blx	r4
     e9e:	2003      	movs	r0, #3
     ea0:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x31);	LCD_Write_DATA8(0x1F);
     ea2:	2131      	movs	r1, #49	; 0x31
     ea4:	20d1      	movs	r0, #209	; 0xd1
     ea6:	47a0      	blx	r4
     ea8:	201f      	movs	r0, #31
     eaa:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x32);	LCD_Write_DATA8(0x03);
     eac:	2132      	movs	r1, #50	; 0x32
     eae:	20d1      	movs	r0, #209	; 0xd1
     eb0:	47a0      	blx	r4
     eb2:	2003      	movs	r0, #3
     eb4:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x33);	LCD_Write_DATA8(0x7F);
     eb6:	2133      	movs	r1, #51	; 0x33
     eb8:	20d1      	movs	r0, #209	; 0xd1
     eba:	47a0      	blx	r4
     ebc:	207f      	movs	r0, #127	; 0x7f
     ebe:	47a8      	blx	r5
	
	LCD_Write_COM16(0xD2,0x00);	LCD_Write_DATA8(0x00);
     ec0:	2100      	movs	r1, #0
     ec2:	20d2      	movs	r0, #210	; 0xd2
     ec4:	47a0      	blx	r4
     ec6:	e00b      	b.n	ee0 <InitLCD+0x418>
     ec8:	41004488 	.word	0x41004488
     ecc:	41004498 	.word	0x41004498
     ed0:	00000155 	.word	0x00000155
     ed4:	41004494 	.word	0x41004494
     ed8:	0000096d 	.word	0x0000096d
     edc:	00000985 	.word	0x00000985
     ee0:	2000      	movs	r0, #0
     ee2:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x01);	LCD_Write_DATA8(0x2D);
     ee4:	2101      	movs	r1, #1
     ee6:	20d2      	movs	r0, #210	; 0xd2
     ee8:	47a0      	blx	r4
     eea:	202d      	movs	r0, #45	; 0x2d
     eec:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x02);	LCD_Write_DATA8(0x00);
     eee:	2102      	movs	r1, #2
     ef0:	20d2      	movs	r0, #210	; 0xd2
     ef2:	47a0      	blx	r4
     ef4:	2000      	movs	r0, #0
     ef6:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x03);	LCD_Write_DATA8(0x2E);
     ef8:	2103      	movs	r1, #3
     efa:	20d2      	movs	r0, #210	; 0xd2
     efc:	47a0      	blx	r4
     efe:	202e      	movs	r0, #46	; 0x2e
     f00:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x04);	LCD_Write_DATA8(0x00); 
     f02:	2104      	movs	r1, #4
     f04:	20d2      	movs	r0, #210	; 0xd2
     f06:	47a0      	blx	r4
     f08:	2000      	movs	r0, #0
     f0a:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x05);	LCD_Write_DATA8(0x32);
     f0c:	2105      	movs	r1, #5
     f0e:	20d2      	movs	r0, #210	; 0xd2
     f10:	47a0      	blx	r4
     f12:	2032      	movs	r0, #50	; 0x32
     f14:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x06);	LCD_Write_DATA8(0x00);
     f16:	2106      	movs	r1, #6
     f18:	20d2      	movs	r0, #210	; 0xd2
     f1a:	47a0      	blx	r4
     f1c:	2000      	movs	r0, #0
     f1e:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x07);	LCD_Write_DATA8(0x44);
     f20:	2107      	movs	r1, #7
     f22:	20d2      	movs	r0, #210	; 0xd2
     f24:	47a0      	blx	r4
     f26:	2044      	movs	r0, #68	; 0x44
     f28:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x08);	LCD_Write_DATA8(0x00);
     f2a:	2108      	movs	r1, #8
     f2c:	20d2      	movs	r0, #210	; 0xd2
     f2e:	47a0      	blx	r4
     f30:	2000      	movs	r0, #0
     f32:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x09);	LCD_Write_DATA8(0x53);
     f34:	2109      	movs	r1, #9
     f36:	20d2      	movs	r0, #210	; 0xd2
     f38:	47a0      	blx	r4
     f3a:	2053      	movs	r0, #83	; 0x53
     f3c:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0A);	LCD_Write_DATA8(0x00);
     f3e:	210a      	movs	r1, #10
     f40:	20d2      	movs	r0, #210	; 0xd2
     f42:	47a0      	blx	r4
     f44:	2000      	movs	r0, #0
     f46:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0B);	LCD_Write_DATA8(0x88);
     f48:	210b      	movs	r1, #11
     f4a:	20d2      	movs	r0, #210	; 0xd2
     f4c:	47a0      	blx	r4
     f4e:	2088      	movs	r0, #136	; 0x88
     f50:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0C);	LCD_Write_DATA8(0x00);
     f52:	210c      	movs	r1, #12
     f54:	20d2      	movs	r0, #210	; 0xd2
     f56:	47a0      	blx	r4
     f58:	2000      	movs	r0, #0
     f5a:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0D);	LCD_Write_DATA8(0xB6);
     f5c:	210d      	movs	r1, #13
     f5e:	20d2      	movs	r0, #210	; 0xd2
     f60:	47a0      	blx	r4
     f62:	20b6      	movs	r0, #182	; 0xb6
     f64:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0E);	LCD_Write_DATA8(0x00);
     f66:	210e      	movs	r1, #14
     f68:	20d2      	movs	r0, #210	; 0xd2
     f6a:	47a0      	blx	r4
     f6c:	2000      	movs	r0, #0
     f6e:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0F);	LCD_Write_DATA8(0xF3);
     f70:	210f      	movs	r1, #15
     f72:	20d2      	movs	r0, #210	; 0xd2
     f74:	47a0      	blx	r4
     f76:	20f3      	movs	r0, #243	; 0xf3
     f78:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x10);	LCD_Write_DATA8(0x01);
     f7a:	2110      	movs	r1, #16
     f7c:	20d2      	movs	r0, #210	; 0xd2
     f7e:	47a0      	blx	r4
     f80:	2001      	movs	r0, #1
     f82:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x11);	LCD_Write_DATA8(0x22);
     f84:	2111      	movs	r1, #17
     f86:	20d2      	movs	r0, #210	; 0xd2
     f88:	47a0      	blx	r4
     f8a:	2022      	movs	r0, #34	; 0x22
     f8c:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x12);	LCD_Write_DATA8(0x01);
     f8e:	2112      	movs	r1, #18
     f90:	20d2      	movs	r0, #210	; 0xd2
     f92:	47a0      	blx	r4
     f94:	2001      	movs	r0, #1
     f96:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x13);	LCD_Write_DATA8(0x64);
     f98:	2113      	movs	r1, #19
     f9a:	20d2      	movs	r0, #210	; 0xd2
     f9c:	47a0      	blx	r4
     f9e:	2064      	movs	r0, #100	; 0x64
     fa0:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x14);	LCD_Write_DATA8(0x01);
     fa2:	2114      	movs	r1, #20
     fa4:	20d2      	movs	r0, #210	; 0xd2
     fa6:	47a0      	blx	r4
     fa8:	2001      	movs	r0, #1
     faa:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x15);	LCD_Write_DATA8(0x92);
     fac:	2115      	movs	r1, #21
     fae:	20d2      	movs	r0, #210	; 0xd2
     fb0:	47a0      	blx	r4
     fb2:	2092      	movs	r0, #146	; 0x92
     fb4:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x16);	LCD_Write_DATA8(0x01);
     fb6:	2116      	movs	r1, #22
     fb8:	20d2      	movs	r0, #210	; 0xd2
     fba:	47a0      	blx	r4
     fbc:	2001      	movs	r0, #1
     fbe:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x17);	LCD_Write_DATA8(0xD4);
     fc0:	2117      	movs	r1, #23
     fc2:	20d2      	movs	r0, #210	; 0xd2
     fc4:	47a0      	blx	r4
     fc6:	20d4      	movs	r0, #212	; 0xd4
     fc8:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x18);	LCD_Write_DATA8(0x02);	
     fca:	2118      	movs	r1, #24
     fcc:	20d2      	movs	r0, #210	; 0xd2
     fce:	47a0      	blx	r4
     fd0:	2002      	movs	r0, #2
     fd2:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x19);	LCD_Write_DATA8(0x07);
     fd4:	2119      	movs	r1, #25
     fd6:	20d2      	movs	r0, #210	; 0xd2
     fd8:	47a0      	blx	r4
     fda:	2007      	movs	r0, #7
     fdc:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1A);	LCD_Write_DATA8(0x02);
     fde:	211a      	movs	r1, #26
     fe0:	20d2      	movs	r0, #210	; 0xd2
     fe2:	47a0      	blx	r4
     fe4:	2002      	movs	r0, #2
     fe6:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1B);	LCD_Write_DATA8(0x08);
     fe8:	211b      	movs	r1, #27
     fea:	20d2      	movs	r0, #210	; 0xd2
     fec:	47a0      	blx	r4
     fee:	2008      	movs	r0, #8
     ff0:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1C);	LCD_Write_DATA8(0x02);
     ff2:	211c      	movs	r1, #28
     ff4:	20d2      	movs	r0, #210	; 0xd2
     ff6:	47a0      	blx	r4
     ff8:	2002      	movs	r0, #2
     ffa:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1D);	LCD_Write_DATA8(0x34);
     ffc:	211d      	movs	r1, #29
     ffe:	20d2      	movs	r0, #210	; 0xd2
    1000:	47a0      	blx	r4
    1002:	2034      	movs	r0, #52	; 0x34
    1004:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1E);	LCD_Write_DATA8(0x02);
    1006:	211e      	movs	r1, #30
    1008:	20d2      	movs	r0, #210	; 0xd2
    100a:	47a0      	blx	r4
    100c:	2002      	movs	r0, #2
    100e:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1F);	LCD_Write_DATA8(0x5F);
    1010:	211f      	movs	r1, #31
    1012:	20d2      	movs	r0, #210	; 0xd2
    1014:	47a0      	blx	r4
    1016:	205f      	movs	r0, #95	; 0x5f
    1018:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x20);	LCD_Write_DATA8(0x02);
    101a:	2120      	movs	r1, #32
    101c:	20d2      	movs	r0, #210	; 0xd2
    101e:	47a0      	blx	r4
    1020:	2002      	movs	r0, #2
    1022:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x21);	LCD_Write_DATA8(0x78);
    1024:	2121      	movs	r1, #33	; 0x21
    1026:	20d2      	movs	r0, #210	; 0xd2
    1028:	47a0      	blx	r4
    102a:	2078      	movs	r0, #120	; 0x78
    102c:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x22);	LCD_Write_DATA8(0x02);
    102e:	2122      	movs	r1, #34	; 0x22
    1030:	20d2      	movs	r0, #210	; 0xd2
    1032:	47a0      	blx	r4
    1034:	2002      	movs	r0, #2
    1036:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x23);	LCD_Write_DATA8(0x94);
    1038:	2123      	movs	r1, #35	; 0x23
    103a:	20d2      	movs	r0, #210	; 0xd2
    103c:	47a0      	blx	r4
    103e:	2094      	movs	r0, #148	; 0x94
    1040:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x24);	LCD_Write_DATA8(0x02);
    1042:	2124      	movs	r1, #36	; 0x24
    1044:	20d2      	movs	r0, #210	; 0xd2
    1046:	47a0      	blx	r4
    1048:	2002      	movs	r0, #2
    104a:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x25);	LCD_Write_DATA8(0xA6);
    104c:	2125      	movs	r1, #37	; 0x25
    104e:	20d2      	movs	r0, #210	; 0xd2
    1050:	47a0      	blx	r4
    1052:	20a6      	movs	r0, #166	; 0xa6
    1054:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x26);	LCD_Write_DATA8(0x02);
    1056:	2126      	movs	r1, #38	; 0x26
    1058:	20d2      	movs	r0, #210	; 0xd2
    105a:	47a0      	blx	r4
    105c:	2002      	movs	r0, #2
    105e:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x27);	LCD_Write_DATA8(0xBB);
    1060:	2127      	movs	r1, #39	; 0x27
    1062:	20d2      	movs	r0, #210	; 0xd2
    1064:	47a0      	blx	r4
    1066:	20bb      	movs	r0, #187	; 0xbb
    1068:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x28);	LCD_Write_DATA8(0x02); 
    106a:	2128      	movs	r1, #40	; 0x28
    106c:	20d2      	movs	r0, #210	; 0xd2
    106e:	47a0      	blx	r4
    1070:	2002      	movs	r0, #2
    1072:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x29);	LCD_Write_DATA8(0xCA);
    1074:	2129      	movs	r1, #41	; 0x29
    1076:	20d2      	movs	r0, #210	; 0xd2
    1078:	47a0      	blx	r4
    107a:	20ca      	movs	r0, #202	; 0xca
    107c:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2A);	LCD_Write_DATA8(0x02);
    107e:	212a      	movs	r1, #42	; 0x2a
    1080:	20d2      	movs	r0, #210	; 0xd2
    1082:	47a0      	blx	r4
    1084:	2002      	movs	r0, #2
    1086:	4dfe      	ldr	r5, [pc, #1016]	; (1480 <InitLCD+0x9b8>)
    1088:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2B);	LCD_Write_DATA8(0xDB);
    108a:	212b      	movs	r1, #43	; 0x2b
    108c:	20d2      	movs	r0, #210	; 0xd2
    108e:	4cfd      	ldr	r4, [pc, #1012]	; (1484 <InitLCD+0x9bc>)
    1090:	47a0      	blx	r4
    1092:	20db      	movs	r0, #219	; 0xdb
    1094:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2C);	LCD_Write_DATA8(0x02);
    1096:	212c      	movs	r1, #44	; 0x2c
    1098:	20d2      	movs	r0, #210	; 0xd2
    109a:	47a0      	blx	r4
    109c:	2002      	movs	r0, #2
    109e:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2D);	LCD_Write_DATA8(0xE8);
    10a0:	212d      	movs	r1, #45	; 0x2d
    10a2:	20d2      	movs	r0, #210	; 0xd2
    10a4:	47a0      	blx	r4
    10a6:	20e8      	movs	r0, #232	; 0xe8
    10a8:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2E);	LCD_Write_DATA8(0x02);
    10aa:	212e      	movs	r1, #46	; 0x2e
    10ac:	20d2      	movs	r0, #210	; 0xd2
    10ae:	47a0      	blx	r4
    10b0:	2002      	movs	r0, #2
    10b2:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2F);	LCD_Write_DATA8(0xF9);
    10b4:	212f      	movs	r1, #47	; 0x2f
    10b6:	20d2      	movs	r0, #210	; 0xd2
    10b8:	47a0      	blx	r4
    10ba:	20f9      	movs	r0, #249	; 0xf9
    10bc:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x30);	LCD_Write_DATA8(0x03); 
    10be:	2130      	movs	r1, #48	; 0x30
    10c0:	20d2      	movs	r0, #210	; 0xd2
    10c2:	47a0      	blx	r4
    10c4:	2003      	movs	r0, #3
    10c6:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x31);	LCD_Write_DATA8(0x1F);
    10c8:	2131      	movs	r1, #49	; 0x31
    10ca:	20d2      	movs	r0, #210	; 0xd2
    10cc:	47a0      	blx	r4
    10ce:	201f      	movs	r0, #31
    10d0:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x32);	LCD_Write_DATA8(0x03);
    10d2:	2132      	movs	r1, #50	; 0x32
    10d4:	20d2      	movs	r0, #210	; 0xd2
    10d6:	47a0      	blx	r4
    10d8:	2003      	movs	r0, #3
    10da:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x33);	LCD_Write_DATA8(0x7F);
    10dc:	2133      	movs	r1, #51	; 0x33
    10de:	20d2      	movs	r0, #210	; 0xd2
    10e0:	47a0      	blx	r4
    10e2:	207f      	movs	r0, #127	; 0x7f
    10e4:	47a8      	blx	r5
		 
	LCD_Write_COM16(0xD3,0x00);	LCD_Write_DATA8(0x00);
    10e6:	2100      	movs	r1, #0
    10e8:	20d3      	movs	r0, #211	; 0xd3
    10ea:	47a0      	blx	r4
    10ec:	2000      	movs	r0, #0
    10ee:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x01);	LCD_Write_DATA8(0x2D);
    10f0:	2101      	movs	r1, #1
    10f2:	20d3      	movs	r0, #211	; 0xd3
    10f4:	47a0      	blx	r4
    10f6:	202d      	movs	r0, #45	; 0x2d
    10f8:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x02);	LCD_Write_DATA8(0x00);
    10fa:	2102      	movs	r1, #2
    10fc:	20d3      	movs	r0, #211	; 0xd3
    10fe:	47a0      	blx	r4
    1100:	2000      	movs	r0, #0
    1102:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x03);	LCD_Write_DATA8(0x2E);
    1104:	2103      	movs	r1, #3
    1106:	20d3      	movs	r0, #211	; 0xd3
    1108:	47a0      	blx	r4
    110a:	202e      	movs	r0, #46	; 0x2e
    110c:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x04);	LCD_Write_DATA8(0x00); 
    110e:	2104      	movs	r1, #4
    1110:	20d3      	movs	r0, #211	; 0xd3
    1112:	47a0      	blx	r4
    1114:	2000      	movs	r0, #0
    1116:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x05);	LCD_Write_DATA8(0x32);
    1118:	2105      	movs	r1, #5
    111a:	20d3      	movs	r0, #211	; 0xd3
    111c:	47a0      	blx	r4
    111e:	2032      	movs	r0, #50	; 0x32
    1120:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x06);	LCD_Write_DATA8(0x00);
    1122:	2106      	movs	r1, #6
    1124:	20d3      	movs	r0, #211	; 0xd3
    1126:	47a0      	blx	r4
    1128:	2000      	movs	r0, #0
    112a:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x07);	LCD_Write_DATA8(0x44);
    112c:	2107      	movs	r1, #7
    112e:	20d3      	movs	r0, #211	; 0xd3
    1130:	47a0      	blx	r4
    1132:	2044      	movs	r0, #68	; 0x44
    1134:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x08);	LCD_Write_DATA8(0x00);
    1136:	2108      	movs	r1, #8
    1138:	20d3      	movs	r0, #211	; 0xd3
    113a:	47a0      	blx	r4
    113c:	2000      	movs	r0, #0
    113e:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x09);	LCD_Write_DATA8(0x53);
    1140:	2109      	movs	r1, #9
    1142:	20d3      	movs	r0, #211	; 0xd3
    1144:	47a0      	blx	r4
    1146:	2053      	movs	r0, #83	; 0x53
    1148:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0A);	LCD_Write_DATA8(0x00);
    114a:	210a      	movs	r1, #10
    114c:	20d3      	movs	r0, #211	; 0xd3
    114e:	47a0      	blx	r4
    1150:	2000      	movs	r0, #0
    1152:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0B);	LCD_Write_DATA8(0x88);
    1154:	210b      	movs	r1, #11
    1156:	20d3      	movs	r0, #211	; 0xd3
    1158:	47a0      	blx	r4
    115a:	2088      	movs	r0, #136	; 0x88
    115c:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0C);	LCD_Write_DATA8(0x00);
    115e:	210c      	movs	r1, #12
    1160:	20d3      	movs	r0, #211	; 0xd3
    1162:	47a0      	blx	r4
    1164:	2000      	movs	r0, #0
    1166:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0D);	LCD_Write_DATA8(0xB6);
    1168:	210d      	movs	r1, #13
    116a:	20d3      	movs	r0, #211	; 0xd3
    116c:	47a0      	blx	r4
    116e:	20b6      	movs	r0, #182	; 0xb6
    1170:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0E);	LCD_Write_DATA8(0x00);
    1172:	210e      	movs	r1, #14
    1174:	20d3      	movs	r0, #211	; 0xd3
    1176:	47a0      	blx	r4
    1178:	2000      	movs	r0, #0
    117a:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0F);	LCD_Write_DATA8(0xF3);
    117c:	210f      	movs	r1, #15
    117e:	20d3      	movs	r0, #211	; 0xd3
    1180:	47a0      	blx	r4
    1182:	20f3      	movs	r0, #243	; 0xf3
    1184:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x10);	LCD_Write_DATA8(0x01);
    1186:	2110      	movs	r1, #16
    1188:	20d3      	movs	r0, #211	; 0xd3
    118a:	47a0      	blx	r4
    118c:	2001      	movs	r0, #1
    118e:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x11);	LCD_Write_DATA8(0x22);
    1190:	2111      	movs	r1, #17
    1192:	20d3      	movs	r0, #211	; 0xd3
    1194:	47a0      	blx	r4
    1196:	2022      	movs	r0, #34	; 0x22
    1198:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x12);	LCD_Write_DATA8(0x01);
    119a:	2112      	movs	r1, #18
    119c:	20d3      	movs	r0, #211	; 0xd3
    119e:	47a0      	blx	r4
    11a0:	2001      	movs	r0, #1
    11a2:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x13);	LCD_Write_DATA8(0x64);
    11a4:	2113      	movs	r1, #19
    11a6:	20d3      	movs	r0, #211	; 0xd3
    11a8:	47a0      	blx	r4
    11aa:	2064      	movs	r0, #100	; 0x64
    11ac:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x14);	LCD_Write_DATA8(0x01);
    11ae:	2114      	movs	r1, #20
    11b0:	20d3      	movs	r0, #211	; 0xd3
    11b2:	47a0      	blx	r4
    11b4:	2001      	movs	r0, #1
    11b6:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x15);	LCD_Write_DATA8(0x92);
    11b8:	2115      	movs	r1, #21
    11ba:	20d3      	movs	r0, #211	; 0xd3
    11bc:	47a0      	blx	r4
    11be:	2092      	movs	r0, #146	; 0x92
    11c0:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x16);	LCD_Write_DATA8(0x01);
    11c2:	2116      	movs	r1, #22
    11c4:	20d3      	movs	r0, #211	; 0xd3
    11c6:	47a0      	blx	r4
    11c8:	2001      	movs	r0, #1
    11ca:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x17);	LCD_Write_DATA8(0xD4);
    11cc:	2117      	movs	r1, #23
    11ce:	20d3      	movs	r0, #211	; 0xd3
    11d0:	47a0      	blx	r4
    11d2:	20d4      	movs	r0, #212	; 0xd4
    11d4:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x18);	LCD_Write_DATA8(0x02);	
    11d6:	2118      	movs	r1, #24
    11d8:	20d3      	movs	r0, #211	; 0xd3
    11da:	47a0      	blx	r4
    11dc:	2002      	movs	r0, #2
    11de:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x19);	LCD_Write_DATA8(0x07);
    11e0:	2119      	movs	r1, #25
    11e2:	20d3      	movs	r0, #211	; 0xd3
    11e4:	47a0      	blx	r4
    11e6:	2007      	movs	r0, #7
    11e8:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1A);	LCD_Write_DATA8(0x02);
    11ea:	211a      	movs	r1, #26
    11ec:	20d3      	movs	r0, #211	; 0xd3
    11ee:	47a0      	blx	r4
    11f0:	2002      	movs	r0, #2
    11f2:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1B);	LCD_Write_DATA8(0x08);
    11f4:	211b      	movs	r1, #27
    11f6:	20d3      	movs	r0, #211	; 0xd3
    11f8:	47a0      	blx	r4
    11fa:	2008      	movs	r0, #8
    11fc:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1C);	LCD_Write_DATA8(0x02);
    11fe:	211c      	movs	r1, #28
    1200:	20d3      	movs	r0, #211	; 0xd3
    1202:	47a0      	blx	r4
    1204:	2002      	movs	r0, #2
    1206:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1D);	LCD_Write_DATA8(0x34);
    1208:	211d      	movs	r1, #29
    120a:	20d3      	movs	r0, #211	; 0xd3
    120c:	47a0      	blx	r4
    120e:	2034      	movs	r0, #52	; 0x34
    1210:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1E);	LCD_Write_DATA8(0x02);
    1212:	211e      	movs	r1, #30
    1214:	20d3      	movs	r0, #211	; 0xd3
    1216:	47a0      	blx	r4
    1218:	2002      	movs	r0, #2
    121a:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1F);	LCD_Write_DATA8(0x5F);
    121c:	211f      	movs	r1, #31
    121e:	20d3      	movs	r0, #211	; 0xd3
    1220:	47a0      	blx	r4
    1222:	205f      	movs	r0, #95	; 0x5f
    1224:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x20);	LCD_Write_DATA8(0x02);
    1226:	2120      	movs	r1, #32
    1228:	20d3      	movs	r0, #211	; 0xd3
    122a:	47a0      	blx	r4
    122c:	2002      	movs	r0, #2
    122e:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x21);	LCD_Write_DATA8(0x78);
    1230:	2121      	movs	r1, #33	; 0x21
    1232:	20d3      	movs	r0, #211	; 0xd3
    1234:	47a0      	blx	r4
    1236:	2078      	movs	r0, #120	; 0x78
    1238:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x22);	LCD_Write_DATA8(0x02);
    123a:	2122      	movs	r1, #34	; 0x22
    123c:	20d3      	movs	r0, #211	; 0xd3
    123e:	47a0      	blx	r4
    1240:	2002      	movs	r0, #2
    1242:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x23);	LCD_Write_DATA8(0x94);
    1244:	2123      	movs	r1, #35	; 0x23
    1246:	20d3      	movs	r0, #211	; 0xd3
    1248:	47a0      	blx	r4
    124a:	2094      	movs	r0, #148	; 0x94
    124c:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x24);	LCD_Write_DATA8(0x02);
    124e:	2124      	movs	r1, #36	; 0x24
    1250:	20d3      	movs	r0, #211	; 0xd3
    1252:	47a0      	blx	r4
    1254:	2002      	movs	r0, #2
    1256:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x25);	LCD_Write_DATA8(0xA6);
    1258:	2125      	movs	r1, #37	; 0x25
    125a:	20d3      	movs	r0, #211	; 0xd3
    125c:	47a0      	blx	r4
    125e:	20a6      	movs	r0, #166	; 0xa6
    1260:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x26);	LCD_Write_DATA8(0x02);
    1262:	2126      	movs	r1, #38	; 0x26
    1264:	20d3      	movs	r0, #211	; 0xd3
    1266:	47a0      	blx	r4
    1268:	2002      	movs	r0, #2
    126a:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x27);	LCD_Write_DATA8(0xBB);
    126c:	2127      	movs	r1, #39	; 0x27
    126e:	20d3      	movs	r0, #211	; 0xd3
    1270:	47a0      	blx	r4
    1272:	20bb      	movs	r0, #187	; 0xbb
    1274:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x28);	LCD_Write_DATA8(0x02); 
    1276:	2128      	movs	r1, #40	; 0x28
    1278:	20d3      	movs	r0, #211	; 0xd3
    127a:	47a0      	blx	r4
    127c:	2002      	movs	r0, #2
    127e:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x29);	LCD_Write_DATA8(0xCA);
    1280:	2129      	movs	r1, #41	; 0x29
    1282:	20d3      	movs	r0, #211	; 0xd3
    1284:	47a0      	blx	r4
    1286:	20ca      	movs	r0, #202	; 0xca
    1288:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2A);	LCD_Write_DATA8(0x02);
    128a:	212a      	movs	r1, #42	; 0x2a
    128c:	20d3      	movs	r0, #211	; 0xd3
    128e:	47a0      	blx	r4
    1290:	2002      	movs	r0, #2
    1292:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2B);	LCD_Write_DATA8(0xDB);
    1294:	212b      	movs	r1, #43	; 0x2b
    1296:	20d3      	movs	r0, #211	; 0xd3
    1298:	47a0      	blx	r4
    129a:	20db      	movs	r0, #219	; 0xdb
    129c:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2C);	LCD_Write_DATA8(0x02);
    129e:	212c      	movs	r1, #44	; 0x2c
    12a0:	20d3      	movs	r0, #211	; 0xd3
    12a2:	47a0      	blx	r4
    12a4:	2002      	movs	r0, #2
    12a6:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2D);	LCD_Write_DATA8(0xE8);
    12a8:	212d      	movs	r1, #45	; 0x2d
    12aa:	20d3      	movs	r0, #211	; 0xd3
    12ac:	47a0      	blx	r4
    12ae:	20e8      	movs	r0, #232	; 0xe8
    12b0:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2E);	LCD_Write_DATA8(0x02);
    12b2:	212e      	movs	r1, #46	; 0x2e
    12b4:	20d3      	movs	r0, #211	; 0xd3
    12b6:	47a0      	blx	r4
    12b8:	2002      	movs	r0, #2
    12ba:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2F);	LCD_Write_DATA8(0xF9);
    12bc:	212f      	movs	r1, #47	; 0x2f
    12be:	20d3      	movs	r0, #211	; 0xd3
    12c0:	47a0      	blx	r4
    12c2:	20f9      	movs	r0, #249	; 0xf9
    12c4:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x30);	LCD_Write_DATA8(0x03); 
    12c6:	2130      	movs	r1, #48	; 0x30
    12c8:	20d3      	movs	r0, #211	; 0xd3
    12ca:	47a0      	blx	r4
    12cc:	2003      	movs	r0, #3
    12ce:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x31);	LCD_Write_DATA8(0x1F);
    12d0:	2131      	movs	r1, #49	; 0x31
    12d2:	20d3      	movs	r0, #211	; 0xd3
    12d4:	47a0      	blx	r4
    12d6:	201f      	movs	r0, #31
    12d8:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x32);	LCD_Write_DATA8(0x03);
    12da:	2132      	movs	r1, #50	; 0x32
    12dc:	20d3      	movs	r0, #211	; 0xd3
    12de:	47a0      	blx	r4
    12e0:	2003      	movs	r0, #3
    12e2:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x33);	LCD_Write_DATA8(0x7F);
    12e4:	2133      	movs	r1, #51	; 0x33
    12e6:	20d3      	movs	r0, #211	; 0xd3
    12e8:	47a0      	blx	r4
    12ea:	207f      	movs	r0, #127	; 0x7f
    12ec:	47a8      	blx	r5
		 
	LCD_Write_COM16(0xD4,0x00);	LCD_Write_DATA8(0x00);
    12ee:	2100      	movs	r1, #0
    12f0:	20d4      	movs	r0, #212	; 0xd4
    12f2:	47a0      	blx	r4
    12f4:	2000      	movs	r0, #0
    12f6:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x01);	LCD_Write_DATA8(0x2D);
    12f8:	2101      	movs	r1, #1
    12fa:	20d4      	movs	r0, #212	; 0xd4
    12fc:	47a0      	blx	r4
    12fe:	202d      	movs	r0, #45	; 0x2d
    1300:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x02);	LCD_Write_DATA8(0x00);
    1302:	2102      	movs	r1, #2
    1304:	20d4      	movs	r0, #212	; 0xd4
    1306:	47a0      	blx	r4
    1308:	2000      	movs	r0, #0
    130a:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x03);	LCD_Write_DATA8(0x2E);
    130c:	2103      	movs	r1, #3
    130e:	20d4      	movs	r0, #212	; 0xd4
    1310:	47a0      	blx	r4
    1312:	202e      	movs	r0, #46	; 0x2e
    1314:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x04);	LCD_Write_DATA8(0x00); 
    1316:	2104      	movs	r1, #4
    1318:	20d4      	movs	r0, #212	; 0xd4
    131a:	47a0      	blx	r4
    131c:	2000      	movs	r0, #0
    131e:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x05);	LCD_Write_DATA8(0x32);
    1320:	2105      	movs	r1, #5
    1322:	20d4      	movs	r0, #212	; 0xd4
    1324:	47a0      	blx	r4
    1326:	2032      	movs	r0, #50	; 0x32
    1328:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x06);	LCD_Write_DATA8(0x00);
    132a:	2106      	movs	r1, #6
    132c:	20d4      	movs	r0, #212	; 0xd4
    132e:	47a0      	blx	r4
    1330:	2000      	movs	r0, #0
    1332:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x07);	LCD_Write_DATA8(0x44);
    1334:	2107      	movs	r1, #7
    1336:	20d4      	movs	r0, #212	; 0xd4
    1338:	47a0      	blx	r4
    133a:	2044      	movs	r0, #68	; 0x44
    133c:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x08);	LCD_Write_DATA8(0x00);
    133e:	2108      	movs	r1, #8
    1340:	20d4      	movs	r0, #212	; 0xd4
    1342:	47a0      	blx	r4
    1344:	2000      	movs	r0, #0
    1346:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x09);	LCD_Write_DATA8(0x53);
    1348:	2109      	movs	r1, #9
    134a:	20d4      	movs	r0, #212	; 0xd4
    134c:	47a0      	blx	r4
    134e:	2053      	movs	r0, #83	; 0x53
    1350:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0A);	LCD_Write_DATA8(0x00);
    1352:	210a      	movs	r1, #10
    1354:	20d4      	movs	r0, #212	; 0xd4
    1356:	47a0      	blx	r4
    1358:	2000      	movs	r0, #0
    135a:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0B);	LCD_Write_DATA8(0x88);
    135c:	210b      	movs	r1, #11
    135e:	20d4      	movs	r0, #212	; 0xd4
    1360:	47a0      	blx	r4
    1362:	2088      	movs	r0, #136	; 0x88
    1364:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0C);	LCD_Write_DATA8(0x00);
    1366:	210c      	movs	r1, #12
    1368:	20d4      	movs	r0, #212	; 0xd4
    136a:	47a0      	blx	r4
    136c:	2000      	movs	r0, #0
    136e:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0D);	LCD_Write_DATA8(0xB6);
    1370:	210d      	movs	r1, #13
    1372:	20d4      	movs	r0, #212	; 0xd4
    1374:	47a0      	blx	r4
    1376:	20b6      	movs	r0, #182	; 0xb6
    1378:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0E);	LCD_Write_DATA8(0x00);
    137a:	210e      	movs	r1, #14
    137c:	20d4      	movs	r0, #212	; 0xd4
    137e:	47a0      	blx	r4
    1380:	2000      	movs	r0, #0
    1382:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0F);	LCD_Write_DATA8(0xF3);
    1384:	210f      	movs	r1, #15
    1386:	20d4      	movs	r0, #212	; 0xd4
    1388:	47a0      	blx	r4
    138a:	20f3      	movs	r0, #243	; 0xf3
    138c:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x10);	LCD_Write_DATA8(0x01);
    138e:	2110      	movs	r1, #16
    1390:	20d4      	movs	r0, #212	; 0xd4
    1392:	47a0      	blx	r4
    1394:	2001      	movs	r0, #1
    1396:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x11);	LCD_Write_DATA8(0x22);
    1398:	2111      	movs	r1, #17
    139a:	20d4      	movs	r0, #212	; 0xd4
    139c:	47a0      	blx	r4
    139e:	2022      	movs	r0, #34	; 0x22
    13a0:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x12);	LCD_Write_DATA8(0x01);
    13a2:	2112      	movs	r1, #18
    13a4:	20d4      	movs	r0, #212	; 0xd4
    13a6:	47a0      	blx	r4
    13a8:	2001      	movs	r0, #1
    13aa:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x13);	LCD_Write_DATA8(0x64);
    13ac:	2113      	movs	r1, #19
    13ae:	20d4      	movs	r0, #212	; 0xd4
    13b0:	47a0      	blx	r4
    13b2:	2064      	movs	r0, #100	; 0x64
    13b4:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x14);	LCD_Write_DATA8(0x01);
    13b6:	2114      	movs	r1, #20
    13b8:	20d4      	movs	r0, #212	; 0xd4
    13ba:	47a0      	blx	r4
    13bc:	2001      	movs	r0, #1
    13be:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x15);	LCD_Write_DATA8(0x92);
    13c0:	2115      	movs	r1, #21
    13c2:	20d4      	movs	r0, #212	; 0xd4
    13c4:	47a0      	blx	r4
    13c6:	2092      	movs	r0, #146	; 0x92
    13c8:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x16);	LCD_Write_DATA8(0x01);
    13ca:	2116      	movs	r1, #22
    13cc:	20d4      	movs	r0, #212	; 0xd4
    13ce:	47a0      	blx	r4
    13d0:	2001      	movs	r0, #1
    13d2:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x17);	LCD_Write_DATA8(0xD4);
    13d4:	2117      	movs	r1, #23
    13d6:	20d4      	movs	r0, #212	; 0xd4
    13d8:	47a0      	blx	r4
    13da:	20d4      	movs	r0, #212	; 0xd4
    13dc:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x18);	LCD_Write_DATA8(0x02);	
    13de:	2118      	movs	r1, #24
    13e0:	20d4      	movs	r0, #212	; 0xd4
    13e2:	47a0      	blx	r4
    13e4:	2002      	movs	r0, #2
    13e6:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x19);	LCD_Write_DATA8(0x07);
    13e8:	2119      	movs	r1, #25
    13ea:	20d4      	movs	r0, #212	; 0xd4
    13ec:	47a0      	blx	r4
    13ee:	2007      	movs	r0, #7
    13f0:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1A);	LCD_Write_DATA8(0x02);
    13f2:	211a      	movs	r1, #26
    13f4:	20d4      	movs	r0, #212	; 0xd4
    13f6:	47a0      	blx	r4
    13f8:	2002      	movs	r0, #2
    13fa:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1B);	LCD_Write_DATA8(0x08);
    13fc:	211b      	movs	r1, #27
    13fe:	20d4      	movs	r0, #212	; 0xd4
    1400:	47a0      	blx	r4
    1402:	2008      	movs	r0, #8
    1404:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1C);	LCD_Write_DATA8(0x02);
    1406:	211c      	movs	r1, #28
    1408:	20d4      	movs	r0, #212	; 0xd4
    140a:	47a0      	blx	r4
    140c:	2002      	movs	r0, #2
    140e:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1D);	LCD_Write_DATA8(0x34);
    1410:	211d      	movs	r1, #29
    1412:	20d4      	movs	r0, #212	; 0xd4
    1414:	47a0      	blx	r4
    1416:	2034      	movs	r0, #52	; 0x34
    1418:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1E);	LCD_Write_DATA8(0x02);
    141a:	211e      	movs	r1, #30
    141c:	20d4      	movs	r0, #212	; 0xd4
    141e:	47a0      	blx	r4
    1420:	2002      	movs	r0, #2
    1422:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1F);	LCD_Write_DATA8(0x5F);
    1424:	211f      	movs	r1, #31
    1426:	20d4      	movs	r0, #212	; 0xd4
    1428:	47a0      	blx	r4
    142a:	205f      	movs	r0, #95	; 0x5f
    142c:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x20);	LCD_Write_DATA8(0x02);
    142e:	2120      	movs	r1, #32
    1430:	20d4      	movs	r0, #212	; 0xd4
    1432:	47a0      	blx	r4
    1434:	2002      	movs	r0, #2
    1436:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x21);	LCD_Write_DATA8(0x78);
    1438:	2121      	movs	r1, #33	; 0x21
    143a:	20d4      	movs	r0, #212	; 0xd4
    143c:	47a0      	blx	r4
    143e:	2078      	movs	r0, #120	; 0x78
    1440:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x22);	LCD_Write_DATA8(0x02);
    1442:	2122      	movs	r1, #34	; 0x22
    1444:	20d4      	movs	r0, #212	; 0xd4
    1446:	47a0      	blx	r4
    1448:	2002      	movs	r0, #2
    144a:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x23);	LCD_Write_DATA8(0x94);
    144c:	2123      	movs	r1, #35	; 0x23
    144e:	20d4      	movs	r0, #212	; 0xd4
    1450:	47a0      	blx	r4
    1452:	2094      	movs	r0, #148	; 0x94
    1454:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x24);	LCD_Write_DATA8(0x02);
    1456:	2124      	movs	r1, #36	; 0x24
    1458:	20d4      	movs	r0, #212	; 0xd4
    145a:	47a0      	blx	r4
    145c:	2002      	movs	r0, #2
    145e:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x25);	LCD_Write_DATA8(0xA6);
    1460:	2125      	movs	r1, #37	; 0x25
    1462:	20d4      	movs	r0, #212	; 0xd4
    1464:	47a0      	blx	r4
    1466:	20a6      	movs	r0, #166	; 0xa6
    1468:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x26);	LCD_Write_DATA8(0x02);
    146a:	2126      	movs	r1, #38	; 0x26
    146c:	20d4      	movs	r0, #212	; 0xd4
    146e:	47a0      	blx	r4
    1470:	2002      	movs	r0, #2
    1472:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x27);	LCD_Write_DATA8(0xBB);
    1474:	2127      	movs	r1, #39	; 0x27
    1476:	20d4      	movs	r0, #212	; 0xd4
    1478:	47a0      	blx	r4
    147a:	20bb      	movs	r0, #187	; 0xbb
    147c:	47a8      	blx	r5
    147e:	e003      	b.n	1488 <InitLCD+0x9c0>
    1480:	00000985 	.word	0x00000985
    1484:	0000096d 	.word	0x0000096d
	LCD_Write_COM16(0xD4,0x28);	LCD_Write_DATA8(0x02); 
    1488:	2128      	movs	r1, #40	; 0x28
    148a:	20d4      	movs	r0, #212	; 0xd4
    148c:	47a0      	blx	r4
    148e:	2002      	movs	r0, #2
    1490:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x29);	LCD_Write_DATA8(0xCA);
    1492:	2129      	movs	r1, #41	; 0x29
    1494:	20d4      	movs	r0, #212	; 0xd4
    1496:	47a0      	blx	r4
    1498:	20ca      	movs	r0, #202	; 0xca
    149a:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2A);	LCD_Write_DATA8(0x02);
    149c:	212a      	movs	r1, #42	; 0x2a
    149e:	20d4      	movs	r0, #212	; 0xd4
    14a0:	47a0      	blx	r4
    14a2:	2002      	movs	r0, #2
    14a4:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2B);	LCD_Write_DATA8(0xDB);
    14a6:	212b      	movs	r1, #43	; 0x2b
    14a8:	20d4      	movs	r0, #212	; 0xd4
    14aa:	47a0      	blx	r4
    14ac:	20db      	movs	r0, #219	; 0xdb
    14ae:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2C);	LCD_Write_DATA8(0x02);
    14b0:	212c      	movs	r1, #44	; 0x2c
    14b2:	20d4      	movs	r0, #212	; 0xd4
    14b4:	47a0      	blx	r4
    14b6:	2002      	movs	r0, #2
    14b8:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2D);	LCD_Write_DATA8(0xE8);
    14ba:	212d      	movs	r1, #45	; 0x2d
    14bc:	20d4      	movs	r0, #212	; 0xd4
    14be:	47a0      	blx	r4
    14c0:	20e8      	movs	r0, #232	; 0xe8
    14c2:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2E);	LCD_Write_DATA8(0x02);
    14c4:	212e      	movs	r1, #46	; 0x2e
    14c6:	20d4      	movs	r0, #212	; 0xd4
    14c8:	47a0      	blx	r4
    14ca:	2002      	movs	r0, #2
    14cc:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2F);	LCD_Write_DATA8(0xF9);
    14ce:	212f      	movs	r1, #47	; 0x2f
    14d0:	20d4      	movs	r0, #212	; 0xd4
    14d2:	47a0      	blx	r4
    14d4:	20f9      	movs	r0, #249	; 0xf9
    14d6:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x30);	LCD_Write_DATA8(0x03); 
    14d8:	2130      	movs	r1, #48	; 0x30
    14da:	20d4      	movs	r0, #212	; 0xd4
    14dc:	47a0      	blx	r4
    14de:	2003      	movs	r0, #3
    14e0:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x31);	LCD_Write_DATA8(0x1F);
    14e2:	2131      	movs	r1, #49	; 0x31
    14e4:	20d4      	movs	r0, #212	; 0xd4
    14e6:	47a0      	blx	r4
    14e8:	201f      	movs	r0, #31
    14ea:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x32);	LCD_Write_DATA8(0x03);
    14ec:	2132      	movs	r1, #50	; 0x32
    14ee:	20d4      	movs	r0, #212	; 0xd4
    14f0:	47a0      	blx	r4
    14f2:	2003      	movs	r0, #3
    14f4:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x33);	LCD_Write_DATA8(0x7F);
    14f6:	2133      	movs	r1, #51	; 0x33
    14f8:	20d4      	movs	r0, #212	; 0xd4
    14fa:	47a0      	blx	r4
    14fc:	207f      	movs	r0, #127	; 0x7f
    14fe:	47a8      	blx	r5
		 
	LCD_Write_COM16(0xD5,0x00);	LCD_Write_DATA8(0x00);
    1500:	2100      	movs	r1, #0
    1502:	20d5      	movs	r0, #213	; 0xd5
    1504:	47a0      	blx	r4
    1506:	2000      	movs	r0, #0
    1508:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x01);	LCD_Write_DATA8(0x2D);
    150a:	2101      	movs	r1, #1
    150c:	20d5      	movs	r0, #213	; 0xd5
    150e:	47a0      	blx	r4
    1510:	202d      	movs	r0, #45	; 0x2d
    1512:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x02);	LCD_Write_DATA8(0x00);
    1514:	2102      	movs	r1, #2
    1516:	20d5      	movs	r0, #213	; 0xd5
    1518:	47a0      	blx	r4
    151a:	2000      	movs	r0, #0
    151c:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x03);	LCD_Write_DATA8(0x2E);
    151e:	2103      	movs	r1, #3
    1520:	20d5      	movs	r0, #213	; 0xd5
    1522:	47a0      	blx	r4
    1524:	202e      	movs	r0, #46	; 0x2e
    1526:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x04);	LCD_Write_DATA8(0x00); 
    1528:	2104      	movs	r1, #4
    152a:	20d5      	movs	r0, #213	; 0xd5
    152c:	47a0      	blx	r4
    152e:	2000      	movs	r0, #0
    1530:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x05);	LCD_Write_DATA8(0x32);
    1532:	2105      	movs	r1, #5
    1534:	20d5      	movs	r0, #213	; 0xd5
    1536:	47a0      	blx	r4
    1538:	2032      	movs	r0, #50	; 0x32
    153a:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x06);	LCD_Write_DATA8(0x00);
    153c:	2106      	movs	r1, #6
    153e:	20d5      	movs	r0, #213	; 0xd5
    1540:	47a0      	blx	r4
    1542:	2000      	movs	r0, #0
    1544:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x07);	LCD_Write_DATA8(0x44);
    1546:	2107      	movs	r1, #7
    1548:	20d5      	movs	r0, #213	; 0xd5
    154a:	47a0      	blx	r4
    154c:	2044      	movs	r0, #68	; 0x44
    154e:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x08);	LCD_Write_DATA8(0x00);
    1550:	2108      	movs	r1, #8
    1552:	20d5      	movs	r0, #213	; 0xd5
    1554:	47a0      	blx	r4
    1556:	2000      	movs	r0, #0
    1558:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x09);	LCD_Write_DATA8(0x53);
    155a:	2109      	movs	r1, #9
    155c:	20d5      	movs	r0, #213	; 0xd5
    155e:	47a0      	blx	r4
    1560:	2053      	movs	r0, #83	; 0x53
    1562:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0A);	LCD_Write_DATA8(0x00);
    1564:	210a      	movs	r1, #10
    1566:	20d5      	movs	r0, #213	; 0xd5
    1568:	47a0      	blx	r4
    156a:	2000      	movs	r0, #0
    156c:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0B);	LCD_Write_DATA8(0x88);
    156e:	210b      	movs	r1, #11
    1570:	20d5      	movs	r0, #213	; 0xd5
    1572:	47a0      	blx	r4
    1574:	2088      	movs	r0, #136	; 0x88
    1576:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0C);	LCD_Write_DATA8(0x00);
    1578:	210c      	movs	r1, #12
    157a:	20d5      	movs	r0, #213	; 0xd5
    157c:	47a0      	blx	r4
    157e:	2000      	movs	r0, #0
    1580:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0D);	LCD_Write_DATA8(0xB6);
    1582:	210d      	movs	r1, #13
    1584:	20d5      	movs	r0, #213	; 0xd5
    1586:	47a0      	blx	r4
    1588:	20b6      	movs	r0, #182	; 0xb6
    158a:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0E);	LCD_Write_DATA8(0x00);
    158c:	210e      	movs	r1, #14
    158e:	20d5      	movs	r0, #213	; 0xd5
    1590:	47a0      	blx	r4
    1592:	2000      	movs	r0, #0
    1594:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0F);	LCD_Write_DATA8(0xF3);
    1596:	210f      	movs	r1, #15
    1598:	20d5      	movs	r0, #213	; 0xd5
    159a:	47a0      	blx	r4
    159c:	20f3      	movs	r0, #243	; 0xf3
    159e:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x10);	LCD_Write_DATA8(0x01);
    15a0:	2110      	movs	r1, #16
    15a2:	20d5      	movs	r0, #213	; 0xd5
    15a4:	47a0      	blx	r4
    15a6:	2001      	movs	r0, #1
    15a8:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x11);	LCD_Write_DATA8(0x22);
    15aa:	2111      	movs	r1, #17
    15ac:	20d5      	movs	r0, #213	; 0xd5
    15ae:	47a0      	blx	r4
    15b0:	2022      	movs	r0, #34	; 0x22
    15b2:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x12);	LCD_Write_DATA8(0x01);
    15b4:	2112      	movs	r1, #18
    15b6:	20d5      	movs	r0, #213	; 0xd5
    15b8:	47a0      	blx	r4
    15ba:	2001      	movs	r0, #1
    15bc:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x13);	LCD_Write_DATA8(0x64);
    15be:	2113      	movs	r1, #19
    15c0:	20d5      	movs	r0, #213	; 0xd5
    15c2:	47a0      	blx	r4
    15c4:	2064      	movs	r0, #100	; 0x64
    15c6:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x14);	LCD_Write_DATA8(0x01);
    15c8:	2114      	movs	r1, #20
    15ca:	20d5      	movs	r0, #213	; 0xd5
    15cc:	47a0      	blx	r4
    15ce:	2001      	movs	r0, #1
    15d0:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x15);	LCD_Write_DATA8(0x92);
    15d2:	2115      	movs	r1, #21
    15d4:	20d5      	movs	r0, #213	; 0xd5
    15d6:	47a0      	blx	r4
    15d8:	2092      	movs	r0, #146	; 0x92
    15da:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x16);	LCD_Write_DATA8(0x01);
    15dc:	2116      	movs	r1, #22
    15de:	20d5      	movs	r0, #213	; 0xd5
    15e0:	47a0      	blx	r4
    15e2:	2001      	movs	r0, #1
    15e4:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x17);	LCD_Write_DATA8(0xD4);
    15e6:	2117      	movs	r1, #23
    15e8:	20d5      	movs	r0, #213	; 0xd5
    15ea:	47a0      	blx	r4
    15ec:	20d4      	movs	r0, #212	; 0xd4
    15ee:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x18);	LCD_Write_DATA8(0x02);	
    15f0:	2118      	movs	r1, #24
    15f2:	20d5      	movs	r0, #213	; 0xd5
    15f4:	47a0      	blx	r4
    15f6:	2002      	movs	r0, #2
    15f8:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x19);	LCD_Write_DATA8(0x07);
    15fa:	2119      	movs	r1, #25
    15fc:	20d5      	movs	r0, #213	; 0xd5
    15fe:	47a0      	blx	r4
    1600:	2007      	movs	r0, #7
    1602:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1A);	LCD_Write_DATA8(0x02);
    1604:	211a      	movs	r1, #26
    1606:	20d5      	movs	r0, #213	; 0xd5
    1608:	47a0      	blx	r4
    160a:	2002      	movs	r0, #2
    160c:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1B);	LCD_Write_DATA8(0x08);
    160e:	211b      	movs	r1, #27
    1610:	20d5      	movs	r0, #213	; 0xd5
    1612:	47a0      	blx	r4
    1614:	2008      	movs	r0, #8
    1616:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1C);	LCD_Write_DATA8(0x02);
    1618:	211c      	movs	r1, #28
    161a:	20d5      	movs	r0, #213	; 0xd5
    161c:	47a0      	blx	r4
    161e:	2002      	movs	r0, #2
    1620:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1D);	LCD_Write_DATA8(0x34);
    1622:	211d      	movs	r1, #29
    1624:	20d5      	movs	r0, #213	; 0xd5
    1626:	47a0      	blx	r4
    1628:	2034      	movs	r0, #52	; 0x34
    162a:	4dfe      	ldr	r5, [pc, #1016]	; (1a24 <InitLCD+0xf5c>)
    162c:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1E);	LCD_Write_DATA8(0x02);
    162e:	211e      	movs	r1, #30
    1630:	20d5      	movs	r0, #213	; 0xd5
    1632:	4cfd      	ldr	r4, [pc, #1012]	; (1a28 <InitLCD+0xf60>)
    1634:	47a0      	blx	r4
    1636:	2002      	movs	r0, #2
    1638:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1F);	LCD_Write_DATA8(0x5F);
    163a:	211f      	movs	r1, #31
    163c:	20d5      	movs	r0, #213	; 0xd5
    163e:	47a0      	blx	r4
    1640:	205f      	movs	r0, #95	; 0x5f
    1642:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x20);	LCD_Write_DATA8(0x02);
    1644:	2120      	movs	r1, #32
    1646:	20d5      	movs	r0, #213	; 0xd5
    1648:	47a0      	blx	r4
    164a:	2002      	movs	r0, #2
    164c:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x21);	LCD_Write_DATA8(0x78);
    164e:	2121      	movs	r1, #33	; 0x21
    1650:	20d5      	movs	r0, #213	; 0xd5
    1652:	47a0      	blx	r4
    1654:	2078      	movs	r0, #120	; 0x78
    1656:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x22);	LCD_Write_DATA8(0x02);
    1658:	2122      	movs	r1, #34	; 0x22
    165a:	20d5      	movs	r0, #213	; 0xd5
    165c:	47a0      	blx	r4
    165e:	2002      	movs	r0, #2
    1660:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x23);	LCD_Write_DATA8(0x94);
    1662:	2123      	movs	r1, #35	; 0x23
    1664:	20d5      	movs	r0, #213	; 0xd5
    1666:	47a0      	blx	r4
    1668:	2094      	movs	r0, #148	; 0x94
    166a:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x24);	LCD_Write_DATA8(0x02);
    166c:	2124      	movs	r1, #36	; 0x24
    166e:	20d5      	movs	r0, #213	; 0xd5
    1670:	47a0      	blx	r4
    1672:	2002      	movs	r0, #2
    1674:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x25);	LCD_Write_DATA8(0xA6);
    1676:	2125      	movs	r1, #37	; 0x25
    1678:	20d5      	movs	r0, #213	; 0xd5
    167a:	47a0      	blx	r4
    167c:	20a6      	movs	r0, #166	; 0xa6
    167e:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x26);	LCD_Write_DATA8(0x02);
    1680:	2126      	movs	r1, #38	; 0x26
    1682:	20d5      	movs	r0, #213	; 0xd5
    1684:	47a0      	blx	r4
    1686:	2002      	movs	r0, #2
    1688:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x27);	LCD_Write_DATA8(0xBB);
    168a:	2127      	movs	r1, #39	; 0x27
    168c:	20d5      	movs	r0, #213	; 0xd5
    168e:	47a0      	blx	r4
    1690:	20bb      	movs	r0, #187	; 0xbb
    1692:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x28);	LCD_Write_DATA8(0x02); 
    1694:	2128      	movs	r1, #40	; 0x28
    1696:	20d5      	movs	r0, #213	; 0xd5
    1698:	47a0      	blx	r4
    169a:	2002      	movs	r0, #2
    169c:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x29);	LCD_Write_DATA8(0xCA);
    169e:	2129      	movs	r1, #41	; 0x29
    16a0:	20d5      	movs	r0, #213	; 0xd5
    16a2:	47a0      	blx	r4
    16a4:	20ca      	movs	r0, #202	; 0xca
    16a6:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2A);	LCD_Write_DATA8(0x02);
    16a8:	212a      	movs	r1, #42	; 0x2a
    16aa:	20d5      	movs	r0, #213	; 0xd5
    16ac:	47a0      	blx	r4
    16ae:	2002      	movs	r0, #2
    16b0:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2B);	LCD_Write_DATA8(0xDB);
    16b2:	212b      	movs	r1, #43	; 0x2b
    16b4:	20d5      	movs	r0, #213	; 0xd5
    16b6:	47a0      	blx	r4
    16b8:	20db      	movs	r0, #219	; 0xdb
    16ba:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2C);	LCD_Write_DATA8(0x02);
    16bc:	212c      	movs	r1, #44	; 0x2c
    16be:	20d5      	movs	r0, #213	; 0xd5
    16c0:	47a0      	blx	r4
    16c2:	2002      	movs	r0, #2
    16c4:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2D);	LCD_Write_DATA8(0xE8);
    16c6:	212d      	movs	r1, #45	; 0x2d
    16c8:	20d5      	movs	r0, #213	; 0xd5
    16ca:	47a0      	blx	r4
    16cc:	20e8      	movs	r0, #232	; 0xe8
    16ce:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2E);	LCD_Write_DATA8(0x02);
    16d0:	212e      	movs	r1, #46	; 0x2e
    16d2:	20d5      	movs	r0, #213	; 0xd5
    16d4:	47a0      	blx	r4
    16d6:	2002      	movs	r0, #2
    16d8:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2F);	LCD_Write_DATA8(0xF9);
    16da:	212f      	movs	r1, #47	; 0x2f
    16dc:	20d5      	movs	r0, #213	; 0xd5
    16de:	47a0      	blx	r4
    16e0:	20f9      	movs	r0, #249	; 0xf9
    16e2:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x30);	LCD_Write_DATA8(0x03); 
    16e4:	2130      	movs	r1, #48	; 0x30
    16e6:	20d5      	movs	r0, #213	; 0xd5
    16e8:	47a0      	blx	r4
    16ea:	2003      	movs	r0, #3
    16ec:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x31);	LCD_Write_DATA8(0x1F);
    16ee:	2131      	movs	r1, #49	; 0x31
    16f0:	20d5      	movs	r0, #213	; 0xd5
    16f2:	47a0      	blx	r4
    16f4:	201f      	movs	r0, #31
    16f6:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x32);	LCD_Write_DATA8(0x03);
    16f8:	2132      	movs	r1, #50	; 0x32
    16fa:	20d5      	movs	r0, #213	; 0xd5
    16fc:	47a0      	blx	r4
    16fe:	2003      	movs	r0, #3
    1700:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x33);	LCD_Write_DATA8(0x7F);
    1702:	2133      	movs	r1, #51	; 0x33
    1704:	20d5      	movs	r0, #213	; 0xd5
    1706:	47a0      	blx	r4
    1708:	207f      	movs	r0, #127	; 0x7f
    170a:	47a8      	blx	r5
		 
	LCD_Write_COM16(0xD6,0x00);	LCD_Write_DATA8(0x00);
    170c:	2100      	movs	r1, #0
    170e:	20d6      	movs	r0, #214	; 0xd6
    1710:	47a0      	blx	r4
    1712:	2000      	movs	r0, #0
    1714:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x01);	LCD_Write_DATA8(0x2D);
    1716:	2101      	movs	r1, #1
    1718:	20d6      	movs	r0, #214	; 0xd6
    171a:	47a0      	blx	r4
    171c:	202d      	movs	r0, #45	; 0x2d
    171e:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x02);	LCD_Write_DATA8(0x00);
    1720:	2102      	movs	r1, #2
    1722:	20d6      	movs	r0, #214	; 0xd6
    1724:	47a0      	blx	r4
    1726:	2000      	movs	r0, #0
    1728:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x03);	LCD_Write_DATA8(0x2E);
    172a:	2103      	movs	r1, #3
    172c:	20d6      	movs	r0, #214	; 0xd6
    172e:	47a0      	blx	r4
    1730:	202e      	movs	r0, #46	; 0x2e
    1732:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x04);	LCD_Write_DATA8(0x00); 
    1734:	2104      	movs	r1, #4
    1736:	20d6      	movs	r0, #214	; 0xd6
    1738:	47a0      	blx	r4
    173a:	2000      	movs	r0, #0
    173c:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x05);	LCD_Write_DATA8(0x32);
    173e:	2105      	movs	r1, #5
    1740:	20d6      	movs	r0, #214	; 0xd6
    1742:	47a0      	blx	r4
    1744:	2032      	movs	r0, #50	; 0x32
    1746:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x06);	LCD_Write_DATA8(0x00);
    1748:	2106      	movs	r1, #6
    174a:	20d6      	movs	r0, #214	; 0xd6
    174c:	47a0      	blx	r4
    174e:	2000      	movs	r0, #0
    1750:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x07);	LCD_Write_DATA8(0x44);
    1752:	2107      	movs	r1, #7
    1754:	20d6      	movs	r0, #214	; 0xd6
    1756:	47a0      	blx	r4
    1758:	2044      	movs	r0, #68	; 0x44
    175a:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x08);	LCD_Write_DATA8(0x00);
    175c:	2108      	movs	r1, #8
    175e:	20d6      	movs	r0, #214	; 0xd6
    1760:	47a0      	blx	r4
    1762:	2000      	movs	r0, #0
    1764:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x09);	LCD_Write_DATA8(0x53);
    1766:	2109      	movs	r1, #9
    1768:	20d6      	movs	r0, #214	; 0xd6
    176a:	47a0      	blx	r4
    176c:	2053      	movs	r0, #83	; 0x53
    176e:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0A);	LCD_Write_DATA8(0x00);
    1770:	210a      	movs	r1, #10
    1772:	20d6      	movs	r0, #214	; 0xd6
    1774:	47a0      	blx	r4
    1776:	2000      	movs	r0, #0
    1778:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0B);	LCD_Write_DATA8(0x88);
    177a:	210b      	movs	r1, #11
    177c:	20d6      	movs	r0, #214	; 0xd6
    177e:	47a0      	blx	r4
    1780:	2088      	movs	r0, #136	; 0x88
    1782:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0C);	LCD_Write_DATA8(0x00);
    1784:	210c      	movs	r1, #12
    1786:	20d6      	movs	r0, #214	; 0xd6
    1788:	47a0      	blx	r4
    178a:	2000      	movs	r0, #0
    178c:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0D);	LCD_Write_DATA8(0xB6);
    178e:	210d      	movs	r1, #13
    1790:	20d6      	movs	r0, #214	; 0xd6
    1792:	47a0      	blx	r4
    1794:	20b6      	movs	r0, #182	; 0xb6
    1796:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0E);	LCD_Write_DATA8(0x00);
    1798:	210e      	movs	r1, #14
    179a:	20d6      	movs	r0, #214	; 0xd6
    179c:	47a0      	blx	r4
    179e:	2000      	movs	r0, #0
    17a0:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0F);	LCD_Write_DATA8(0xF3);
    17a2:	210f      	movs	r1, #15
    17a4:	20d6      	movs	r0, #214	; 0xd6
    17a6:	47a0      	blx	r4
    17a8:	20f3      	movs	r0, #243	; 0xf3
    17aa:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x10);	LCD_Write_DATA8(0x01);
    17ac:	2110      	movs	r1, #16
    17ae:	20d6      	movs	r0, #214	; 0xd6
    17b0:	47a0      	blx	r4
    17b2:	2001      	movs	r0, #1
    17b4:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x11);	LCD_Write_DATA8(0x22);
    17b6:	2111      	movs	r1, #17
    17b8:	20d6      	movs	r0, #214	; 0xd6
    17ba:	47a0      	blx	r4
    17bc:	2022      	movs	r0, #34	; 0x22
    17be:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x12);	LCD_Write_DATA8(0x01);
    17c0:	2112      	movs	r1, #18
    17c2:	20d6      	movs	r0, #214	; 0xd6
    17c4:	47a0      	blx	r4
    17c6:	2001      	movs	r0, #1
    17c8:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x13);	LCD_Write_DATA8(0x64);
    17ca:	2113      	movs	r1, #19
    17cc:	20d6      	movs	r0, #214	; 0xd6
    17ce:	47a0      	blx	r4
    17d0:	2064      	movs	r0, #100	; 0x64
    17d2:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x14);	LCD_Write_DATA8(0x01);
    17d4:	2114      	movs	r1, #20
    17d6:	20d6      	movs	r0, #214	; 0xd6
    17d8:	47a0      	blx	r4
    17da:	2001      	movs	r0, #1
    17dc:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x15);	LCD_Write_DATA8(0x92);
    17de:	2115      	movs	r1, #21
    17e0:	20d6      	movs	r0, #214	; 0xd6
    17e2:	47a0      	blx	r4
    17e4:	2092      	movs	r0, #146	; 0x92
    17e6:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x16);	LCD_Write_DATA8(0x01);
    17e8:	2116      	movs	r1, #22
    17ea:	20d6      	movs	r0, #214	; 0xd6
    17ec:	47a0      	blx	r4
    17ee:	2001      	movs	r0, #1
    17f0:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x17);	LCD_Write_DATA8(0xD4);
    17f2:	2117      	movs	r1, #23
    17f4:	20d6      	movs	r0, #214	; 0xd6
    17f6:	47a0      	blx	r4
    17f8:	20d4      	movs	r0, #212	; 0xd4
    17fa:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x18);	LCD_Write_DATA8(0x02);	
    17fc:	2118      	movs	r1, #24
    17fe:	20d6      	movs	r0, #214	; 0xd6
    1800:	47a0      	blx	r4
    1802:	2002      	movs	r0, #2
    1804:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x19);	LCD_Write_DATA8(0x07);
    1806:	2119      	movs	r1, #25
    1808:	20d6      	movs	r0, #214	; 0xd6
    180a:	47a0      	blx	r4
    180c:	2007      	movs	r0, #7
    180e:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1A);	LCD_Write_DATA8(0x02);
    1810:	211a      	movs	r1, #26
    1812:	20d6      	movs	r0, #214	; 0xd6
    1814:	47a0      	blx	r4
    1816:	2002      	movs	r0, #2
    1818:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1B);	LCD_Write_DATA8(0x08);
    181a:	211b      	movs	r1, #27
    181c:	20d6      	movs	r0, #214	; 0xd6
    181e:	47a0      	blx	r4
    1820:	2008      	movs	r0, #8
    1822:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1C);	LCD_Write_DATA8(0x02);
    1824:	211c      	movs	r1, #28
    1826:	20d6      	movs	r0, #214	; 0xd6
    1828:	47a0      	blx	r4
    182a:	2002      	movs	r0, #2
    182c:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1D);	LCD_Write_DATA8(0x34);
    182e:	211d      	movs	r1, #29
    1830:	20d6      	movs	r0, #214	; 0xd6
    1832:	47a0      	blx	r4
    1834:	2034      	movs	r0, #52	; 0x34
    1836:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1E);	LCD_Write_DATA8(0x02);
    1838:	211e      	movs	r1, #30
    183a:	20d6      	movs	r0, #214	; 0xd6
    183c:	47a0      	blx	r4
    183e:	2002      	movs	r0, #2
    1840:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1F);	LCD_Write_DATA8(0x5F);
    1842:	211f      	movs	r1, #31
    1844:	20d6      	movs	r0, #214	; 0xd6
    1846:	47a0      	blx	r4
    1848:	205f      	movs	r0, #95	; 0x5f
    184a:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x20);	LCD_Write_DATA8(0x02);
    184c:	2120      	movs	r1, #32
    184e:	20d6      	movs	r0, #214	; 0xd6
    1850:	47a0      	blx	r4
    1852:	2002      	movs	r0, #2
    1854:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x21);	LCD_Write_DATA8(0x78);
    1856:	2121      	movs	r1, #33	; 0x21
    1858:	20d6      	movs	r0, #214	; 0xd6
    185a:	47a0      	blx	r4
    185c:	2078      	movs	r0, #120	; 0x78
    185e:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x22);	LCD_Write_DATA8(0x02);
    1860:	2122      	movs	r1, #34	; 0x22
    1862:	20d6      	movs	r0, #214	; 0xd6
    1864:	47a0      	blx	r4
    1866:	2002      	movs	r0, #2
    1868:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x23);	LCD_Write_DATA8(0x94);
    186a:	2123      	movs	r1, #35	; 0x23
    186c:	20d6      	movs	r0, #214	; 0xd6
    186e:	47a0      	blx	r4
    1870:	2094      	movs	r0, #148	; 0x94
    1872:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x24);	LCD_Write_DATA8(0x02);
    1874:	2124      	movs	r1, #36	; 0x24
    1876:	20d6      	movs	r0, #214	; 0xd6
    1878:	47a0      	blx	r4
    187a:	2002      	movs	r0, #2
    187c:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x25);	LCD_Write_DATA8(0xA6);
    187e:	2125      	movs	r1, #37	; 0x25
    1880:	20d6      	movs	r0, #214	; 0xd6
    1882:	47a0      	blx	r4
    1884:	20a6      	movs	r0, #166	; 0xa6
    1886:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x26);	LCD_Write_DATA8(0x02);
    1888:	2126      	movs	r1, #38	; 0x26
    188a:	20d6      	movs	r0, #214	; 0xd6
    188c:	47a0      	blx	r4
    188e:	2002      	movs	r0, #2
    1890:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x27);	LCD_Write_DATA8(0xBB);
    1892:	2127      	movs	r1, #39	; 0x27
    1894:	20d6      	movs	r0, #214	; 0xd6
    1896:	47a0      	blx	r4
    1898:	20bb      	movs	r0, #187	; 0xbb
    189a:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x28);	LCD_Write_DATA8(0x02); 
    189c:	2128      	movs	r1, #40	; 0x28
    189e:	20d6      	movs	r0, #214	; 0xd6
    18a0:	47a0      	blx	r4
    18a2:	2002      	movs	r0, #2
    18a4:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x29);	LCD_Write_DATA8(0xCA);
    18a6:	2129      	movs	r1, #41	; 0x29
    18a8:	20d6      	movs	r0, #214	; 0xd6
    18aa:	47a0      	blx	r4
    18ac:	20ca      	movs	r0, #202	; 0xca
    18ae:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2A);	LCD_Write_DATA8(0x02);
    18b0:	212a      	movs	r1, #42	; 0x2a
    18b2:	20d6      	movs	r0, #214	; 0xd6
    18b4:	47a0      	blx	r4
    18b6:	2002      	movs	r0, #2
    18b8:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2B);	LCD_Write_DATA8(0xDB);
    18ba:	212b      	movs	r1, #43	; 0x2b
    18bc:	20d6      	movs	r0, #214	; 0xd6
    18be:	47a0      	blx	r4
    18c0:	20db      	movs	r0, #219	; 0xdb
    18c2:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2C);	LCD_Write_DATA8(0x02);
    18c4:	212c      	movs	r1, #44	; 0x2c
    18c6:	20d6      	movs	r0, #214	; 0xd6
    18c8:	47a0      	blx	r4
    18ca:	2002      	movs	r0, #2
    18cc:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2D);	LCD_Write_DATA8(0xE8);
    18ce:	212d      	movs	r1, #45	; 0x2d
    18d0:	20d6      	movs	r0, #214	; 0xd6
    18d2:	47a0      	blx	r4
    18d4:	20e8      	movs	r0, #232	; 0xe8
    18d6:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2E);	LCD_Write_DATA8(0x02);
    18d8:	212e      	movs	r1, #46	; 0x2e
    18da:	20d6      	movs	r0, #214	; 0xd6
    18dc:	47a0      	blx	r4
    18de:	2002      	movs	r0, #2
    18e0:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2F);	LCD_Write_DATA8(0xF9);
    18e2:	212f      	movs	r1, #47	; 0x2f
    18e4:	20d6      	movs	r0, #214	; 0xd6
    18e6:	47a0      	blx	r4
    18e8:	20f9      	movs	r0, #249	; 0xf9
    18ea:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x30);	LCD_Write_DATA8(0x03); 
    18ec:	2130      	movs	r1, #48	; 0x30
    18ee:	20d6      	movs	r0, #214	; 0xd6
    18f0:	47a0      	blx	r4
    18f2:	2003      	movs	r0, #3
    18f4:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x31);	LCD_Write_DATA8(0x1F);
    18f6:	2131      	movs	r1, #49	; 0x31
    18f8:	20d6      	movs	r0, #214	; 0xd6
    18fa:	47a0      	blx	r4
    18fc:	201f      	movs	r0, #31
    18fe:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x32);	LCD_Write_DATA8(0x03);
    1900:	2132      	movs	r1, #50	; 0x32
    1902:	20d6      	movs	r0, #214	; 0xd6
    1904:	47a0      	blx	r4
    1906:	2003      	movs	r0, #3
    1908:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x33);	LCD_Write_DATA8(0x7F);
    190a:	2133      	movs	r1, #51	; 0x33
    190c:	20d6      	movs	r0, #214	; 0xd6
    190e:	47a0      	blx	r4
    1910:	207f      	movs	r0, #127	; 0x7f
    1912:	47a8      	blx	r5
	 
	//#LV2 Page 0 enable
	LCD_Write_COM16(0xF0,0x00);	LCD_Write_DATA8(0x55);
    1914:	2100      	movs	r1, #0
    1916:	20f0      	movs	r0, #240	; 0xf0
    1918:	47a0      	blx	r4
    191a:	2055      	movs	r0, #85	; 0x55
    191c:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x01);	LCD_Write_DATA8(0xAA);
    191e:	2101      	movs	r1, #1
    1920:	20f0      	movs	r0, #240	; 0xf0
    1922:	47a0      	blx	r4
    1924:	20aa      	movs	r0, #170	; 0xaa
    1926:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x02);	LCD_Write_DATA8(0x52);
    1928:	2102      	movs	r1, #2
    192a:	20f0      	movs	r0, #240	; 0xf0
    192c:	47a0      	blx	r4
    192e:	2052      	movs	r0, #82	; 0x52
    1930:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x03);	LCD_Write_DATA8(0x08);
    1932:	2103      	movs	r1, #3
    1934:	20f0      	movs	r0, #240	; 0xf0
    1936:	47a0      	blx	r4
    1938:	2008      	movs	r0, #8
    193a:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x04);	LCD_Write_DATA8(0x00); 
    193c:	2104      	movs	r1, #4
    193e:	20f0      	movs	r0, #240	; 0xf0
    1940:	47a0      	blx	r4
    1942:	2000      	movs	r0, #0
    1944:	47a8      	blx	r5
	
	//#DISPLAY CONTROL
	LCD_Write_COM16(0xB1,0x00);	LCD_Write_DATA8(0xCC);
    1946:	2100      	movs	r1, #0
    1948:	20b1      	movs	r0, #177	; 0xb1
    194a:	47a0      	blx	r4
    194c:	20cc      	movs	r0, #204	; 0xcc
    194e:	47a8      	blx	r5
	LCD_Write_COM16(0xB1,0x01);	LCD_Write_DATA8(0x00); 
    1950:	2101      	movs	r1, #1
    1952:	20b1      	movs	r0, #177	; 0xb1
    1954:	47a0      	blx	r4
    1956:	2000      	movs	r0, #0
    1958:	47a8      	blx	r5
	
	//#SOURCE HOLD TIME
	LCD_Write_COM16(0xB6,0x00);	LCD_Write_DATA8(0x05);
    195a:	2100      	movs	r1, #0
    195c:	20b6      	movs	r0, #182	; 0xb6
    195e:	47a0      	blx	r4
    1960:	2005      	movs	r0, #5
    1962:	47a8      	blx	r5
	
	//Set Gate EQ     
	LCD_Write_COM16(0xB7,0x00);	LCD_Write_DATA8(0x70); 
    1964:	2100      	movs	r1, #0
    1966:	20b7      	movs	r0, #183	; 0xb7
    1968:	47a0      	blx	r4
    196a:	2070      	movs	r0, #112	; 0x70
    196c:	47a8      	blx	r5
	LCD_Write_COM16(0xB7,0x01);	LCD_Write_DATA8(0x70);
    196e:	2101      	movs	r1, #1
    1970:	20b7      	movs	r0, #183	; 0xb7
    1972:	47a0      	blx	r4
    1974:	2070      	movs	r0, #112	; 0x70
    1976:	47a8      	blx	r5
	
	//#Source EQ control (Mode 2)
	LCD_Write_COM16(0xB8,0x00);	LCD_Write_DATA8(0x01);
    1978:	2100      	movs	r1, #0
    197a:	20b8      	movs	r0, #184	; 0xb8
    197c:	47a0      	blx	r4
    197e:	2001      	movs	r0, #1
    1980:	47a8      	blx	r5
	LCD_Write_COM16(0xB8,0x01);	LCD_Write_DATA8(0x03);
    1982:	2101      	movs	r1, #1
    1984:	20b8      	movs	r0, #184	; 0xb8
    1986:	47a0      	blx	r4
    1988:	2003      	movs	r0, #3
    198a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8,0x02);	LCD_Write_DATA8(0x03);
    198c:	2102      	movs	r1, #2
    198e:	20b8      	movs	r0, #184	; 0xb8
    1990:	47a0      	blx	r4
    1992:	2003      	movs	r0, #3
    1994:	47a8      	blx	r5
	LCD_Write_COM16(0xB8,0x03);	LCD_Write_DATA8(0x03);
    1996:	2103      	movs	r1, #3
    1998:	20b8      	movs	r0, #184	; 0xb8
    199a:	47a0      	blx	r4
    199c:	2003      	movs	r0, #3
    199e:	47a8      	blx	r5
	
	//#INVERSION MODE
	LCD_Write_COM16(0xBC,0x00);	LCD_Write_DATA8(0x02);
    19a0:	2100      	movs	r1, #0
    19a2:	20bc      	movs	r0, #188	; 0xbc
    19a4:	47a0      	blx	r4
    19a6:	2002      	movs	r0, #2
    19a8:	47a8      	blx	r5
	LCD_Write_COM16(0xBC,0x01);	LCD_Write_DATA8(0x00);	
    19aa:	2101      	movs	r1, #1
    19ac:	20bc      	movs	r0, #188	; 0xbc
    19ae:	47a0      	blx	r4
    19b0:	2000      	movs	r0, #0
    19b2:	47a8      	blx	r5
	LCD_Write_COM16(0xBC,0x02);	LCD_Write_DATA8(0x00); 
    19b4:	2102      	movs	r1, #2
    19b6:	20bc      	movs	r0, #188	; 0xbc
    19b8:	47a0      	blx	r4
    19ba:	2000      	movs	r0, #0
    19bc:	47a8      	blx	r5
	
	//#Timing control
	LCD_Write_COM16(0xC9,0x00);	LCD_Write_DATA8(0xD0);   
    19be:	2100      	movs	r1, #0
    19c0:	20c9      	movs	r0, #201	; 0xc9
    19c2:	47a0      	blx	r4
    19c4:	20d0      	movs	r0, #208	; 0xd0
    19c6:	47a8      	blx	r5
	LCD_Write_COM16(0xC9,0x01);	LCD_Write_DATA8(0x02);
    19c8:	2101      	movs	r1, #1
    19ca:	20c9      	movs	r0, #201	; 0xc9
    19cc:	47a0      	blx	r4
    19ce:	2002      	movs	r0, #2
    19d0:	47a8      	blx	r5
	LCD_Write_COM16(0xC9,0x02);	LCD_Write_DATA8(0x50);
    19d2:	2102      	movs	r1, #2
    19d4:	20c9      	movs	r0, #201	; 0xc9
    19d6:	47a0      	blx	r4
    19d8:	2050      	movs	r0, #80	; 0x50
    19da:	47a8      	blx	r5
	LCD_Write_COM16(0xC9,0x03);	LCD_Write_DATA8(0x50); 
    19dc:	2103      	movs	r1, #3
    19de:	20c9      	movs	r0, #201	; 0xc9
    19e0:	47a0      	blx	r4
    19e2:	2050      	movs	r0, #80	; 0x50
    19e4:	47a8      	blx	r5
	LCD_Write_COM16(0xC9,0x04);	LCD_Write_DATA8(0x50); 
    19e6:	2104      	movs	r1, #4
    19e8:	20c9      	movs	r0, #201	; 0xc9
    19ea:	47a0      	blx	r4
    19ec:	2050      	movs	r0, #80	; 0x50
    19ee:	47a8      	blx	r5
	

   	LCD_Write_COM16(0x35,0x00);   LCD_Write_DATA8(0x00); 
    19f0:	2100      	movs	r1, #0
    19f2:	2035      	movs	r0, #53	; 0x35
    19f4:	47a0      	blx	r4
    19f6:	2000      	movs	r0, #0
    19f8:	47a8      	blx	r5


  	LCD_Write_COM16(0x3A,0x00);   LCD_Write_DATA8(0x55);
    19fa:	2100      	movs	r1, #0
    19fc:	203a      	movs	r0, #58	; 0x3a
    19fe:	47a0      	blx	r4
    1a00:	2055      	movs	r0, #85	; 0x55
    1a02:	47a8      	blx	r5

  	LCD_Write_COM16(0x36,0x00);   LCD_Write_DATA8(0x00);   
    1a04:	2100      	movs	r1, #0
    1a06:	2036      	movs	r0, #54	; 0x36
    1a08:	47a0      	blx	r4
    1a0a:	2000      	movs	r0, #0
    1a0c:	47a8      	blx	r5


  	LCD_Write_COM16(0x11,0x00);   //StartUp  
    1a0e:	2100      	movs	r1, #0
    1a10:	2011      	movs	r0, #17
    1a12:	47a0      	blx	r4
  
  	delay_ms(120);
    1a14:	2078      	movs	r0, #120	; 0x78
    1a16:	4d05      	ldr	r5, [pc, #20]	; (1a2c <InitLCD+0xf64>)
    1a18:	47a8      	blx	r5

  	LCD_Write_COM16(0x29,0x00);   //Display On  
    1a1a:	2100      	movs	r1, #0
    1a1c:	2029      	movs	r0, #41	; 0x29
    1a1e:	47a0      	blx	r4
	  
   	delay_ms(100);
    1a20:	2064      	movs	r0, #100	; 0x64
    1a22:	e005      	b.n	1a30 <InitLCD+0xf68>
    1a24:	00000985 	.word	0x00000985
    1a28:	0000096d 	.word	0x0000096d
    1a2c:	00000155 	.word	0x00000155
    1a30:	47a8      	blx	r5
	
	REG_PORT_OUTSET1 = LCD_CS;
    1a32:	2280      	movs	r2, #128	; 0x80
    1a34:	03d2      	lsls	r2, r2, #15
    1a36:	4b06      	ldr	r3, [pc, #24]	; (1a50 <InitLCD+0xf88>)
    1a38:	601a      	str	r2, [r3, #0]
	
}

void setColorRGB(char r, char g, char b)
{
	fore_Color_High = ((r&248)|g>>5);
    1a3a:	23ff      	movs	r3, #255	; 0xff
    1a3c:	4a05      	ldr	r2, [pc, #20]	; (1a54 <InitLCD+0xf8c>)
    1a3e:	7013      	strb	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    1a40:	4a05      	ldr	r2, [pc, #20]	; (1a58 <InitLCD+0xf90>)
    1a42:	7013      	strb	r3, [r2, #0]
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(char r, char g, char b)
{
	back_Color_High = ((r&248)|g>>5);
    1a44:	2300      	movs	r3, #0
    1a46:	4a05      	ldr	r2, [pc, #20]	; (1a5c <InitLCD+0xf94>)
    1a48:	7013      	strb	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    1a4a:	4a05      	ldr	r2, [pc, #20]	; (1a60 <InitLCD+0xf98>)
    1a4c:	7013      	strb	r3, [r2, #0]
}
    1a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a50:	41004498 	.word	0x41004498
    1a54:	2000004d 	.word	0x2000004d
    1a58:	2000004e 	.word	0x2000004e
    1a5c:	2000004f 	.word	0x2000004f
    1a60:	2000004c 	.word	0x2000004c

00001a64 <main>:
{
    1a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a66:	46de      	mov	lr, fp
    1a68:	4657      	mov	r7, sl
    1a6a:	464e      	mov	r6, r9
    1a6c:	4645      	mov	r5, r8
    1a6e:	b5e0      	push	{r5, r6, r7, lr}
	system_init();
    1a70:	4b34      	ldr	r3, [pc, #208]	; (1b44 <main+0xe0>)
    1a72:	4798      	blx	r3
	delay_init();
    1a74:	4b34      	ldr	r3, [pc, #208]	; (1b48 <main+0xe4>)
    1a76:	4798      	blx	r3
	REG_PORT_DIRSET1 = 0x0000ffff;		//this is the LCD data bus, PB00 - PB15
    1a78:	4b34      	ldr	r3, [pc, #208]	; (1b4c <main+0xe8>)
    1a7a:	4a35      	ldr	r2, [pc, #212]	; (1b50 <main+0xec>)
    1a7c:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    1a7e:	2580      	movs	r5, #128	; 0x80
    1a80:	05ed      	lsls	r5, r5, #23
    1a82:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    1a84:	2480      	movs	r4, #128	; 0x80
    1a86:	03e4      	lsls	r4, r4, #15
    1a88:	601c      	str	r4, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    1a8a:	2080      	movs	r0, #128	; 0x80
    1a8c:	0280      	lsls	r0, r0, #10
    1a8e:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    1a90:	2180      	movs	r1, #128	; 0x80
    1a92:	0409      	lsls	r1, r1, #16
    1a94:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    1a96:	3201      	adds	r2, #1
    1a98:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    1a9a:	4b2e      	ldr	r3, [pc, #184]	; (1b54 <main+0xf0>)
    1a9c:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    1a9e:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    1aa0:	6018      	str	r0, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    1aa2:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    1aa4:	601a      	str	r2, [r3, #0]
	InitLCD();
    1aa6:	4b2c      	ldr	r3, [pc, #176]	; (1b58 <main+0xf4>)
    1aa8:	4798      	blx	r3
		clrScr();
    1aaa:	4b2c      	ldr	r3, [pc, #176]	; (1b5c <main+0xf8>)
    1aac:	4698      	mov	r8, r3
		fillRect(0, 466, 799, 479);
    1aae:	4e2c      	ldr	r6, [pc, #176]	; (1b60 <main+0xfc>)
		delay_ms(500);
    1ab0:	4d2c      	ldr	r5, [pc, #176]	; (1b64 <main+0x100>)
    1ab2:	e007      	b.n	1ac4 <main+0x60>
			delay_ms(1000);
    1ab4:	20fa      	movs	r0, #250	; 0xfa
    1ab6:	0080      	lsls	r0, r0, #2
    1ab8:	4b2a      	ldr	r3, [pc, #168]	; (1b64 <main+0x100>)
    1aba:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1abc:	2280      	movs	r2, #128	; 0x80
    1abe:	05d2      	lsls	r2, r2, #23
    1ac0:	4b29      	ldr	r3, [pc, #164]	; (1b68 <main+0x104>)
    1ac2:	615a      	str	r2, [r3, #20]
		clrScr();
    1ac4:	47c0      	blx	r8
		fillRect(0, 466, 799, 479);
    1ac6:	23e0      	movs	r3, #224	; 0xe0
    1ac8:	33ff      	adds	r3, #255	; 0xff
    1aca:	4a28      	ldr	r2, [pc, #160]	; (1b6c <main+0x108>)
    1acc:	21e9      	movs	r1, #233	; 0xe9
    1ace:	0049      	lsls	r1, r1, #1
    1ad0:	2000      	movs	r0, #0
    1ad2:	47b0      	blx	r6
		delay_ms(500);
    1ad4:	20fa      	movs	r0, #250	; 0xfa
    1ad6:	0040      	lsls	r0, r0, #1
    1ad8:	47a8      	blx	r5
	fore_Color_High = ((r&248)|g>>5);
    1ada:	4b25      	ldr	r3, [pc, #148]	; (1b70 <main+0x10c>)
    1adc:	469b      	mov	fp, r3
    1ade:	24ff      	movs	r4, #255	; 0xff
    1ae0:	701c      	strb	r4, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    1ae2:	4b24      	ldr	r3, [pc, #144]	; (1b74 <main+0x110>)
    1ae4:	469a      	mov	sl, r3
    1ae6:	701c      	strb	r4, [r3, #0]
	back_Color_High = ((r&248)|g>>5);
    1ae8:	4b23      	ldr	r3, [pc, #140]	; (1b78 <main+0x114>)
    1aea:	4699      	mov	r9, r3
    1aec:	23f8      	movs	r3, #248	; 0xf8
    1aee:	464a      	mov	r2, r9
    1af0:	7013      	strb	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    1af2:	4f22      	ldr	r7, [pc, #136]	; (1b7c <main+0x118>)
    1af4:	2300      	movs	r3, #0
    1af6:	703b      	strb	r3, [r7, #0]
		fillRect(0, 466, 799, 479);
    1af8:	23e0      	movs	r3, #224	; 0xe0
    1afa:	33ff      	adds	r3, #255	; 0xff
    1afc:	4a1b      	ldr	r2, [pc, #108]	; (1b6c <main+0x108>)
    1afe:	21e9      	movs	r1, #233	; 0xe9
    1b00:	0049      	lsls	r1, r1, #1
    1b02:	2000      	movs	r0, #0
    1b04:	47b0      	blx	r6
		delay_ms(500);
    1b06:	20fa      	movs	r0, #250	; 0xfa
    1b08:	0040      	lsls	r0, r0, #1
    1b0a:	47a8      	blx	r5
	fore_Color_High = ((r&248)|g>>5);
    1b0c:	2307      	movs	r3, #7
    1b0e:	465a      	mov	r2, fp
    1b10:	7013      	strb	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    1b12:	4653      	mov	r3, sl
    1b14:	701c      	strb	r4, [r3, #0]
	back_Color_High = ((r&248)|g>>5);
    1b16:	464b      	mov	r3, r9
    1b18:	701c      	strb	r4, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    1b1a:	23e0      	movs	r3, #224	; 0xe0
    1b1c:	703b      	strb	r3, [r7, #0]
		fillRect(0, 466, 799, 479);
    1b1e:	23e0      	movs	r3, #224	; 0xe0
    1b20:	33ff      	adds	r3, #255	; 0xff
    1b22:	4a12      	ldr	r2, [pc, #72]	; (1b6c <main+0x108>)
    1b24:	21e9      	movs	r1, #233	; 0xe9
    1b26:	0049      	lsls	r1, r1, #1
    1b28:	2000      	movs	r0, #0
    1b2a:	47b0      	blx	r6
		delay_ms(500);
    1b2c:	20fa      	movs	r0, #250	; 0xfa
    1b2e:	0040      	lsls	r0, r0, #1
    1b30:	47a8      	blx	r5
	return (port_base->IN.reg & pin_mask);
    1b32:	4b13      	ldr	r3, [pc, #76]	; (1b80 <main+0x11c>)
    1b34:	6a1b      	ldr	r3, [r3, #32]
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    1b36:	041b      	lsls	r3, r3, #16
    1b38:	d5bc      	bpl.n	1ab4 <main+0x50>
		port_base->OUTSET.reg = pin_mask;
    1b3a:	2280      	movs	r2, #128	; 0x80
    1b3c:	05d2      	lsls	r2, r2, #23
    1b3e:	4b0a      	ldr	r3, [pc, #40]	; (1b68 <main+0x104>)
    1b40:	619a      	str	r2, [r3, #24]
    1b42:	e7bf      	b.n	1ac4 <main+0x60>
    1b44:	00000791 	.word	0x00000791
    1b48:	00000115 	.word	0x00000115
    1b4c:	41004488 	.word	0x41004488
    1b50:	0000ffff 	.word	0x0000ffff
    1b54:	41004494 	.word	0x41004494
    1b58:	00000ac9 	.word	0x00000ac9
    1b5c:	00000ab1 	.word	0x00000ab1
    1b60:	00000a29 	.word	0x00000a29
    1b64:	00000155 	.word	0x00000155
    1b68:	41004480 	.word	0x41004480
    1b6c:	0000031f 	.word	0x0000031f
    1b70:	2000004d 	.word	0x2000004d
    1b74:	2000004e 	.word	0x2000004e
    1b78:	2000004f 	.word	0x2000004f
    1b7c:	2000004c 	.word	0x2000004c
    1b80:	41004400 	.word	0x41004400

00001b84 <__udivsi3>:
    1b84:	2200      	movs	r2, #0
    1b86:	0843      	lsrs	r3, r0, #1
    1b88:	428b      	cmp	r3, r1
    1b8a:	d374      	bcc.n	1c76 <__udivsi3+0xf2>
    1b8c:	0903      	lsrs	r3, r0, #4
    1b8e:	428b      	cmp	r3, r1
    1b90:	d35f      	bcc.n	1c52 <__udivsi3+0xce>
    1b92:	0a03      	lsrs	r3, r0, #8
    1b94:	428b      	cmp	r3, r1
    1b96:	d344      	bcc.n	1c22 <__udivsi3+0x9e>
    1b98:	0b03      	lsrs	r3, r0, #12
    1b9a:	428b      	cmp	r3, r1
    1b9c:	d328      	bcc.n	1bf0 <__udivsi3+0x6c>
    1b9e:	0c03      	lsrs	r3, r0, #16
    1ba0:	428b      	cmp	r3, r1
    1ba2:	d30d      	bcc.n	1bc0 <__udivsi3+0x3c>
    1ba4:	22ff      	movs	r2, #255	; 0xff
    1ba6:	0209      	lsls	r1, r1, #8
    1ba8:	ba12      	rev	r2, r2
    1baa:	0c03      	lsrs	r3, r0, #16
    1bac:	428b      	cmp	r3, r1
    1bae:	d302      	bcc.n	1bb6 <__udivsi3+0x32>
    1bb0:	1212      	asrs	r2, r2, #8
    1bb2:	0209      	lsls	r1, r1, #8
    1bb4:	d065      	beq.n	1c82 <__udivsi3+0xfe>
    1bb6:	0b03      	lsrs	r3, r0, #12
    1bb8:	428b      	cmp	r3, r1
    1bba:	d319      	bcc.n	1bf0 <__udivsi3+0x6c>
    1bbc:	e000      	b.n	1bc0 <__udivsi3+0x3c>
    1bbe:	0a09      	lsrs	r1, r1, #8
    1bc0:	0bc3      	lsrs	r3, r0, #15
    1bc2:	428b      	cmp	r3, r1
    1bc4:	d301      	bcc.n	1bca <__udivsi3+0x46>
    1bc6:	03cb      	lsls	r3, r1, #15
    1bc8:	1ac0      	subs	r0, r0, r3
    1bca:	4152      	adcs	r2, r2
    1bcc:	0b83      	lsrs	r3, r0, #14
    1bce:	428b      	cmp	r3, r1
    1bd0:	d301      	bcc.n	1bd6 <__udivsi3+0x52>
    1bd2:	038b      	lsls	r3, r1, #14
    1bd4:	1ac0      	subs	r0, r0, r3
    1bd6:	4152      	adcs	r2, r2
    1bd8:	0b43      	lsrs	r3, r0, #13
    1bda:	428b      	cmp	r3, r1
    1bdc:	d301      	bcc.n	1be2 <__udivsi3+0x5e>
    1bde:	034b      	lsls	r3, r1, #13
    1be0:	1ac0      	subs	r0, r0, r3
    1be2:	4152      	adcs	r2, r2
    1be4:	0b03      	lsrs	r3, r0, #12
    1be6:	428b      	cmp	r3, r1
    1be8:	d301      	bcc.n	1bee <__udivsi3+0x6a>
    1bea:	030b      	lsls	r3, r1, #12
    1bec:	1ac0      	subs	r0, r0, r3
    1bee:	4152      	adcs	r2, r2
    1bf0:	0ac3      	lsrs	r3, r0, #11
    1bf2:	428b      	cmp	r3, r1
    1bf4:	d301      	bcc.n	1bfa <__udivsi3+0x76>
    1bf6:	02cb      	lsls	r3, r1, #11
    1bf8:	1ac0      	subs	r0, r0, r3
    1bfa:	4152      	adcs	r2, r2
    1bfc:	0a83      	lsrs	r3, r0, #10
    1bfe:	428b      	cmp	r3, r1
    1c00:	d301      	bcc.n	1c06 <__udivsi3+0x82>
    1c02:	028b      	lsls	r3, r1, #10
    1c04:	1ac0      	subs	r0, r0, r3
    1c06:	4152      	adcs	r2, r2
    1c08:	0a43      	lsrs	r3, r0, #9
    1c0a:	428b      	cmp	r3, r1
    1c0c:	d301      	bcc.n	1c12 <__udivsi3+0x8e>
    1c0e:	024b      	lsls	r3, r1, #9
    1c10:	1ac0      	subs	r0, r0, r3
    1c12:	4152      	adcs	r2, r2
    1c14:	0a03      	lsrs	r3, r0, #8
    1c16:	428b      	cmp	r3, r1
    1c18:	d301      	bcc.n	1c1e <__udivsi3+0x9a>
    1c1a:	020b      	lsls	r3, r1, #8
    1c1c:	1ac0      	subs	r0, r0, r3
    1c1e:	4152      	adcs	r2, r2
    1c20:	d2cd      	bcs.n	1bbe <__udivsi3+0x3a>
    1c22:	09c3      	lsrs	r3, r0, #7
    1c24:	428b      	cmp	r3, r1
    1c26:	d301      	bcc.n	1c2c <__udivsi3+0xa8>
    1c28:	01cb      	lsls	r3, r1, #7
    1c2a:	1ac0      	subs	r0, r0, r3
    1c2c:	4152      	adcs	r2, r2
    1c2e:	0983      	lsrs	r3, r0, #6
    1c30:	428b      	cmp	r3, r1
    1c32:	d301      	bcc.n	1c38 <__udivsi3+0xb4>
    1c34:	018b      	lsls	r3, r1, #6
    1c36:	1ac0      	subs	r0, r0, r3
    1c38:	4152      	adcs	r2, r2
    1c3a:	0943      	lsrs	r3, r0, #5
    1c3c:	428b      	cmp	r3, r1
    1c3e:	d301      	bcc.n	1c44 <__udivsi3+0xc0>
    1c40:	014b      	lsls	r3, r1, #5
    1c42:	1ac0      	subs	r0, r0, r3
    1c44:	4152      	adcs	r2, r2
    1c46:	0903      	lsrs	r3, r0, #4
    1c48:	428b      	cmp	r3, r1
    1c4a:	d301      	bcc.n	1c50 <__udivsi3+0xcc>
    1c4c:	010b      	lsls	r3, r1, #4
    1c4e:	1ac0      	subs	r0, r0, r3
    1c50:	4152      	adcs	r2, r2
    1c52:	08c3      	lsrs	r3, r0, #3
    1c54:	428b      	cmp	r3, r1
    1c56:	d301      	bcc.n	1c5c <__udivsi3+0xd8>
    1c58:	00cb      	lsls	r3, r1, #3
    1c5a:	1ac0      	subs	r0, r0, r3
    1c5c:	4152      	adcs	r2, r2
    1c5e:	0883      	lsrs	r3, r0, #2
    1c60:	428b      	cmp	r3, r1
    1c62:	d301      	bcc.n	1c68 <__udivsi3+0xe4>
    1c64:	008b      	lsls	r3, r1, #2
    1c66:	1ac0      	subs	r0, r0, r3
    1c68:	4152      	adcs	r2, r2
    1c6a:	0843      	lsrs	r3, r0, #1
    1c6c:	428b      	cmp	r3, r1
    1c6e:	d301      	bcc.n	1c74 <__udivsi3+0xf0>
    1c70:	004b      	lsls	r3, r1, #1
    1c72:	1ac0      	subs	r0, r0, r3
    1c74:	4152      	adcs	r2, r2
    1c76:	1a41      	subs	r1, r0, r1
    1c78:	d200      	bcs.n	1c7c <__udivsi3+0xf8>
    1c7a:	4601      	mov	r1, r0
    1c7c:	4152      	adcs	r2, r2
    1c7e:	4610      	mov	r0, r2
    1c80:	4770      	bx	lr
    1c82:	e7ff      	b.n	1c84 <__udivsi3+0x100>
    1c84:	b501      	push	{r0, lr}
    1c86:	2000      	movs	r0, #0
    1c88:	f000 f806 	bl	1c98 <__aeabi_idiv0>
    1c8c:	bd02      	pop	{r1, pc}
    1c8e:	46c0      	nop			; (mov r8, r8)

00001c90 <__aeabi_uidivmod>:
    1c90:	2900      	cmp	r1, #0
    1c92:	d0f7      	beq.n	1c84 <__udivsi3+0x100>
    1c94:	e776      	b.n	1b84 <__udivsi3>
    1c96:	4770      	bx	lr

00001c98 <__aeabi_idiv0>:
    1c98:	4770      	bx	lr
    1c9a:	46c0      	nop			; (mov r8, r8)

00001c9c <__libc_init_array>:
    1c9c:	b570      	push	{r4, r5, r6, lr}
    1c9e:	2600      	movs	r6, #0
    1ca0:	4d0c      	ldr	r5, [pc, #48]	; (1cd4 <__libc_init_array+0x38>)
    1ca2:	4c0d      	ldr	r4, [pc, #52]	; (1cd8 <__libc_init_array+0x3c>)
    1ca4:	1b64      	subs	r4, r4, r5
    1ca6:	10a4      	asrs	r4, r4, #2
    1ca8:	42a6      	cmp	r6, r4
    1caa:	d109      	bne.n	1cc0 <__libc_init_array+0x24>
    1cac:	2600      	movs	r6, #0
    1cae:	f000 f83d 	bl	1d2c <_init>
    1cb2:	4d0a      	ldr	r5, [pc, #40]	; (1cdc <__libc_init_array+0x40>)
    1cb4:	4c0a      	ldr	r4, [pc, #40]	; (1ce0 <__libc_init_array+0x44>)
    1cb6:	1b64      	subs	r4, r4, r5
    1cb8:	10a4      	asrs	r4, r4, #2
    1cba:	42a6      	cmp	r6, r4
    1cbc:	d105      	bne.n	1cca <__libc_init_array+0x2e>
    1cbe:	bd70      	pop	{r4, r5, r6, pc}
    1cc0:	00b3      	lsls	r3, r6, #2
    1cc2:	58eb      	ldr	r3, [r5, r3]
    1cc4:	4798      	blx	r3
    1cc6:	3601      	adds	r6, #1
    1cc8:	e7ee      	b.n	1ca8 <__libc_init_array+0xc>
    1cca:	00b3      	lsls	r3, r6, #2
    1ccc:	58eb      	ldr	r3, [r5, r3]
    1cce:	4798      	blx	r3
    1cd0:	3601      	adds	r6, #1
    1cd2:	e7f2      	b.n	1cba <__libc_init_array+0x1e>
    1cd4:	00001d38 	.word	0x00001d38
    1cd8:	00001d38 	.word	0x00001d38
    1cdc:	00001d38 	.word	0x00001d38
    1ce0:	00001d3c 	.word	0x00001d3c
    1ce4:	0000025e 	.word	0x0000025e
    1ce8:	0000025a 	.word	0x0000025a
    1cec:	0000025a 	.word	0x0000025a
    1cf0:	000002c0 	.word	0x000002c0
    1cf4:	000002c0 	.word	0x000002c0
    1cf8:	00000272 	.word	0x00000272
    1cfc:	00000264 	.word	0x00000264
    1d00:	00000278 	.word	0x00000278
    1d04:	000002ae 	.word	0x000002ae
    1d08:	00000348 	.word	0x00000348
    1d0c:	00000328 	.word	0x00000328
    1d10:	00000328 	.word	0x00000328
    1d14:	000003b4 	.word	0x000003b4
    1d18:	0000033a 	.word	0x0000033a
    1d1c:	00000356 	.word	0x00000356
    1d20:	0000032c 	.word	0x0000032c
    1d24:	00000364 	.word	0x00000364
    1d28:	000003a4 	.word	0x000003a4

00001d2c <_init>:
    1d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d2e:	46c0      	nop			; (mov r8, r8)
    1d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d32:	bc08      	pop	{r3}
    1d34:	469e      	mov	lr, r3
    1d36:	4770      	bx	lr

00001d38 <__init_array_start>:
    1d38:	000000dd 	.word	0x000000dd

00001d3c <_fini>:
    1d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1d42:	bc08      	pop	{r3}
    1d44:	469e      	mov	lr, r3
    1d46:	4770      	bx	lr

00001d48 <__fini_array_start>:
    1d48:	000000b5 	.word	0x000000b5
