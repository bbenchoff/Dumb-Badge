
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007f90  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001d8  20000000  00007f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000998  200001d8  00008168  000201d8  2**2
                  ALLOC
  3 .stack        00002000  20000b70  00008b00  000201d8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003d8b0  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d62  00000000  00000000  0005db09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007577  00000000  00000000  0006386b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008f0  00000000  00000000  0006ade2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ae8  00000000  00000000  0006b6d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fb4c  00000000  00000000  0006c1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015366  00000000  00000000  0008bd06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009057d  00000000  00000000  000a106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ee0  00000000  00000000  001315ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	70 2b 00 20 d1 30 00 00 cd 30 00 00 cd 30 00 00     p+. .0...0...0..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	cd 30 00 00 00 00 00 00 00 00 00 00 cd 30 00 00     .0...........0..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	59 41 00 00 cd 30 00 00 cd 30 00 00 cd 30 00 00     YA...0...0...0..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	cd 30 00 00 cd 30 00 00 cd 30 00 00 cd 30 00 00     .0...0...0...0..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	cd 30 00 00 cd 30 00 00 e9 22 00 00 f9 22 00 00     .0...0..."..."..
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	09 23 00 00 19 23 00 00 29 23 00 00 39 23 00 00     .#...#..)#..9#..
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	cd 30 00 00 cd 30 00 00 cd 30 00 00 cd 30 00 00     .0...0...0...0..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	cd 30 00 00 cd 30 00 00 cd 30 00 00 cd 30 00 00     .0...0...0...0..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	1d 1e 00 00 cd 30 00 00 cd 30 00 00 cd 30 00 00     .....0...0...0..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	cd 30 00 00 00 00 00 00                             .0......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001d8 	.word	0x200001d8
      d4:	00000000 	.word	0x00000000
      d8:	00007f90 	.word	0x00007f90

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001dc 	.word	0x200001dc
     108:	00007f90 	.word	0x00007f90
     10c:	00007f90 	.word	0x00007f90
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	000048f1 	.word	0x000048f1

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	00004811 	.word	0x00004811

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	00004811 	.word	0x00004811

000001d0 <isEmptyParser>:
int rearParam = -1;
int rearParser = -1;

bool isEmptyParser(void)
{
	if(frontParser == -1)
     1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <isEmptyParser+0x10>)
     1d2:	6818      	ldr	r0, [r3, #0]
     1d4:	3001      	adds	r0, #1
     1d6:	4243      	negs	r3, r0
     1d8:	4158      	adcs	r0, r3
     1da:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     1dc:	4770      	bx	lr
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	20000008 	.word	0x20000008

000001e4 <dequeueParser>:
}
char dequeueParser(void)
{
	char temp;
	
	temp = queueParser[frontParser];
     1e4:	4a08      	ldr	r2, [pc, #32]	; (208 <dequeueParser+0x24>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	4908      	ldr	r1, [pc, #32]	; (20c <dequeueParser+0x28>)
     1ea:	5cc8      	ldrb	r0, [r1, r3]
	frontParser++;
     1ec:	3301      	adds	r3, #1
     1ee:	6013      	str	r3, [r2, #0]
	if(frontParser > rearParser)
     1f0:	4a07      	ldr	r2, [pc, #28]	; (210 <dequeueParser+0x2c>)
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	4293      	cmp	r3, r2
     1f6:	dd05      	ble.n	204 <dequeueParser+0x20>
	{
		frontParser = rearParser = -1;
     1f8:	2301      	movs	r3, #1
     1fa:	425b      	negs	r3, r3
     1fc:	4a04      	ldr	r2, [pc, #16]	; (210 <dequeueParser+0x2c>)
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <dequeueParser+0x24>)
     202:	6013      	str	r3, [r2, #0]
	}
	return temp;
}
     204:	4770      	bx	lr
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000008 	.word	0x20000008
     20c:	200002cc 	.word	0x200002cc
     210:	20000010 	.word	0x20000010

00000214 <enqueueParser>:
void enqueueParser(char data)
{
	if(frontParser == -1)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <enqueueParser+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	3301      	adds	r3, #1
     21a:	d006      	beq.n	22a <enqueueParser+0x16>
	{
		frontParser = 0;
	}
	rearParser++;
     21c:	4a06      	ldr	r2, [pc, #24]	; (238 <enqueueParser+0x24>)
     21e:	6813      	ldr	r3, [r2, #0]
     220:	3301      	adds	r3, #1
     222:	6013      	str	r3, [r2, #0]
	queueParser[rearParser] = data;
     224:	4a05      	ldr	r2, [pc, #20]	; (23c <enqueueParser+0x28>)
     226:	54d0      	strb	r0, [r2, r3]
}
     228:	4770      	bx	lr
		frontParser = 0;
     22a:	2200      	movs	r2, #0
     22c:	4b01      	ldr	r3, [pc, #4]	; (234 <enqueueParser+0x20>)
     22e:	601a      	str	r2, [r3, #0]
     230:	e7f4      	b.n	21c <enqueueParser+0x8>
     232:	46c0      	nop			; (mov r8, r8)
     234:	20000008 	.word	0x20000008
     238:	20000010 	.word	0x20000010
     23c:	200002cc 	.word	0x200002cc

00000240 <isEmptyParam>:
bool isEmptyParam(void)
{
	if(frontParam == -1)
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <isEmptyParam+0x10>)
     242:	6818      	ldr	r0, [r3, #0]
     244:	3001      	adds	r0, #1
     246:	4243      	negs	r3, r0
     248:	4158      	adcs	r0, r3
     24a:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     24c:	4770      	bx	lr
     24e:	46c0      	nop			; (mov r8, r8)
     250:	20000004 	.word	0x20000004

00000254 <dequeueParam>:
}
uint8_t dequeueParam(void)
{
	uint8_t temp;
	
	temp = queueParam[frontParam];
     254:	4a08      	ldr	r2, [pc, #32]	; (278 <dequeueParam+0x24>)
     256:	6813      	ldr	r3, [r2, #0]
     258:	4908      	ldr	r1, [pc, #32]	; (27c <dequeueParam+0x28>)
     25a:	5cc8      	ldrb	r0, [r1, r3]
	frontParam++;
     25c:	3301      	adds	r3, #1
     25e:	6013      	str	r3, [r2, #0]
	if(frontParam > rearParam)
     260:	4a07      	ldr	r2, [pc, #28]	; (280 <dequeueParam+0x2c>)
     262:	6812      	ldr	r2, [r2, #0]
     264:	4293      	cmp	r3, r2
     266:	dd05      	ble.n	274 <dequeueParam+0x20>
	{
		frontParam = rearParam = -1;
     268:	2301      	movs	r3, #1
     26a:	425b      	negs	r3, r3
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <dequeueParam+0x2c>)
     26e:	6013      	str	r3, [r2, #0]
     270:	4a01      	ldr	r2, [pc, #4]	; (278 <dequeueParam+0x24>)
     272:	6013      	str	r3, [r2, #0]
	}

	return temp;
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	20000004 	.word	0x20000004
     27c:	20000300 	.word	0x20000300
     280:	2000000c 	.word	0x2000000c

00000284 <enqueueParam>:
void enqueueParam(uint8_t data)
{

	if(frontParam == -1)
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <enqueueParam+0x20>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	3301      	adds	r3, #1
     28a:	d006      	beq.n	29a <enqueueParam+0x16>
	{
		frontParam = 0;
	}
	rearParam++;
     28c:	4a06      	ldr	r2, [pc, #24]	; (2a8 <enqueueParam+0x24>)
     28e:	6813      	ldr	r3, [r2, #0]
     290:	3301      	adds	r3, #1
     292:	6013      	str	r3, [r2, #0]
	queueParam[rearParam] = data;
     294:	4a05      	ldr	r2, [pc, #20]	; (2ac <enqueueParam+0x28>)
     296:	54d0      	strb	r0, [r2, r3]
}
     298:	4770      	bx	lr
		frontParam = 0;
     29a:	2200      	movs	r2, #0
     29c:	4b01      	ldr	r3, [pc, #4]	; (2a4 <enqueueParam+0x20>)
     29e:	601a      	str	r2, [r3, #0]
     2a0:	e7f4      	b.n	28c <enqueueParam+0x8>
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	20000004 	.word	0x20000004
     2a8:	2000000c 	.word	0x2000000c
     2ac:	20000300 	.word	0x20000300

000002b0 <clearQueues>:
void clearQueues(void)
{
     2b0:	b530      	push	{r4, r5, lr}

	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <clearQueues+0x3c>)
     2b4:	6818      	ldr	r0, [r3, #0]
     2b6:	1e43      	subs	r3, r0, #1
     2b8:	2b00      	cmp	r3, #0
     2ba:	dd0b      	ble.n	2d4 <clearQueues+0x24>
     2bc:	0018      	movs	r0, r3
     2be:	2300      	movs	r3, #0
	{
		queueParam[i] = 0;
     2c0:	4d0b      	ldr	r5, [pc, #44]	; (2f0 <clearQueues+0x40>)
     2c2:	2200      	movs	r2, #0
		queueParser[i] = 0;
     2c4:	4c0b      	ldr	r4, [pc, #44]	; (2f4 <clearQueues+0x44>)
		queueParam[i] = 0;
     2c6:	1959      	adds	r1, r3, r5
     2c8:	700a      	strb	r2, [r1, #0]
		queueParser[i] = 0;
     2ca:	1919      	adds	r1, r3, r4
     2cc:	700a      	strb	r2, [r1, #0]
	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2ce:	3301      	adds	r3, #1
     2d0:	4283      	cmp	r3, r0
     2d2:	d1f8      	bne.n	2c6 <clearQueues+0x16>
	}
	
	frontParser = -1;
     2d4:	2301      	movs	r3, #1
     2d6:	425b      	negs	r3, r3
     2d8:	4a07      	ldr	r2, [pc, #28]	; (2f8 <clearQueues+0x48>)
     2da:	6013      	str	r3, [r2, #0]
	frontParam = -1;
     2dc:	4a07      	ldr	r2, [pc, #28]	; (2fc <clearQueues+0x4c>)
     2de:	6013      	str	r3, [r2, #0]
	rearParam = -1;
     2e0:	4a07      	ldr	r2, [pc, #28]	; (300 <clearQueues+0x50>)
     2e2:	6013      	str	r3, [r2, #0]
	rearParser = -1;
     2e4:	4a07      	ldr	r2, [pc, #28]	; (304 <clearQueues+0x54>)
     2e6:	6013      	str	r3, [r2, #0]
}
     2e8:	bd30      	pop	{r4, r5, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	20000000 	.word	0x20000000
     2f0:	20000300 	.word	0x20000300
     2f4:	200002cc 	.word	0x200002cc
     2f8:	20000008 	.word	0x20000008
     2fc:	20000004 	.word	0x20000004
     300:	2000000c 	.word	0x2000000c
     304:	20000010 	.word	0x20000010

00000308 <queueTransmogrifier>:
void queueTransmogrifier(void)
{
     308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	[24],[80]
	
	It's like reimplementing atoi() but it's not an interview question.
	*/
	
	int param = 0;
     30a:	2500      	movs	r5, #0
	char currentByte;
	
	while(!isEmptyParser())
     30c:	4e0c      	ldr	r6, [pc, #48]	; (340 <queueTransmogrifier+0x38>)
	{
		
		currentByte = dequeueParser();		//deque from parser
     30e:	4f0d      	ldr	r7, [pc, #52]	; (344 <queueTransmogrifier+0x3c>)

		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
		{
			enqueueParam(param);
     310:	4c0d      	ldr	r4, [pc, #52]	; (348 <queueTransmogrifier+0x40>)
	while(!isEmptyParser())
     312:	e002      	b.n	31a <queueTransmogrifier+0x12>
			enqueueParam(param);
     314:	b2e8      	uxtb	r0, r5
     316:	47a0      	blx	r4
			param = 0;
     318:	2500      	movs	r5, #0
	while(!isEmptyParser())
     31a:	47b0      	blx	r6
     31c:	2800      	cmp	r0, #0
     31e:	d10a      	bne.n	336 <queueTransmogrifier+0x2e>
		currentByte = dequeueParser();		//deque from parser
     320:	47b8      	blx	r7
		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
     322:	23fb      	movs	r3, #251	; 0xfb
     324:	4003      	ands	r3, r0
     326:	2b3b      	cmp	r3, #59	; 0x3b
     328:	d0f4      	beq.n	314 <queueTransmogrifier+0xc>
		}
		else
		{
			param = (10 * param) + (int)(currentByte-48);
     32a:	00ab      	lsls	r3, r5, #2
     32c:	195d      	adds	r5, r3, r5
     32e:	006d      	lsls	r5, r5, #1
     330:	3830      	subs	r0, #48	; 0x30
     332:	1945      	adds	r5, r0, r5
     334:	e7f1      	b.n	31a <queueTransmogrifier+0x12>
		}
	}
	enqueueParam(param);
     336:	b2e8      	uxtb	r0, r5
     338:	4b03      	ldr	r3, [pc, #12]	; (348 <queueTransmogrifier+0x40>)
     33a:	4798      	blx	r3
}
     33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	000001d1 	.word	0x000001d1
     344:	000001e5 	.word	0x000001e5
     348:	00000285 	.word	0x00000285

0000034c <CSIignoreState>:
	}
}

void CSIignoreState(uint8_t character)
{
	if(character == 0x1B)
     34c:	281b      	cmp	r0, #27
     34e:	d000      	beq.n	352 <CSIignoreState+0x6>
	{
		currentState = stateGround;
	}
}
     350:	4770      	bx	lr
		currentState = stateGround;
     352:	2200      	movs	r2, #0
     354:	4b01      	ldr	r3, [pc, #4]	; (35c <CSIignoreState+0x10>)
     356:	701a      	strb	r2, [r3, #0]
}
     358:	e7fa      	b.n	350 <CSIignoreState+0x4>
     35a:	46c0      	nop			; (mov r8, r8)
     35c:	200002bd 	.word	0x200002bd

00000360 <SC>:
/************************************************************************/

void SC()
{
	//Save cursor position
	DECSCX = xCharPos;
     360:	4b05      	ldr	r3, [pc, #20]	; (378 <SC+0x18>)
     362:	881a      	ldrh	r2, [r3, #0]
     364:	4b05      	ldr	r3, [pc, #20]	; (37c <SC+0x1c>)
     366:	701a      	strb	r2, [r3, #0]
	DECSCY = yCharPos;
     368:	4b05      	ldr	r3, [pc, #20]	; (380 <SC+0x20>)
     36a:	881a      	ldrh	r2, [r3, #0]
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <SC+0x24>)
     36e:	701a      	strb	r2, [r3, #0]
	currentState = stateGround;
     370:	2200      	movs	r2, #0
     372:	4b05      	ldr	r3, [pc, #20]	; (388 <SC+0x28>)
     374:	701a      	strb	r2, [r3, #0]
}
     376:	4770      	bx	lr
     378:	200002b8 	.word	0x200002b8
     37c:	200001f4 	.word	0x200001f4
     380:	200002ba 	.word	0x200002ba
     384:	200001f5 	.word	0x200001f5
     388:	200002bd 	.word	0x200002bd

0000038c <RC>:

void RC()
{
     38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Restore cursor to saved position
	
	char tempCharacter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     38e:	4c0f      	ldr	r4, [pc, #60]	; (3cc <RC+0x40>)
     390:	4f0f      	ldr	r7, [pc, #60]	; (3d0 <RC+0x44>)
     392:	883a      	ldrh	r2, [r7, #0]
     394:	4e0f      	ldr	r6, [pc, #60]	; (3d4 <RC+0x48>)
     396:	8831      	ldrh	r1, [r6, #0]
     398:	0053      	lsls	r3, r2, #1
     39a:	189b      	adds	r3, r3, r2
     39c:	00db      	lsls	r3, r3, #3
     39e:	18e3      	adds	r3, r4, r3
     3a0:	5c58      	ldrb	r0, [r3, r1]
     3a2:	4d0d      	ldr	r5, [pc, #52]	; (3d8 <RC+0x4c>)
     3a4:	47a8      	blx	r5
	xCharPos = DECSCX;
     3a6:	4b0d      	ldr	r3, [pc, #52]	; (3dc <RC+0x50>)
     3a8:	781a      	ldrb	r2, [r3, #0]
     3aa:	803a      	strh	r2, [r7, #0]
	yCharPos = DECSCY;
     3ac:	4b0c      	ldr	r3, [pc, #48]	; (3e0 <RC+0x54>)
     3ae:	7819      	ldrb	r1, [r3, #0]
     3b0:	8031      	strh	r1, [r6, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     3b2:	0053      	lsls	r3, r2, #1
     3b4:	189b      	adds	r3, r3, r2
     3b6:	00db      	lsls	r3, r3, #3
     3b8:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     3ba:	5c58      	ldrb	r0, [r3, r1]
     3bc:	47a8      	blx	r5
	blinkCursor();
     3be:	4b09      	ldr	r3, [pc, #36]	; (3e4 <RC+0x58>)
     3c0:	4798      	blx	r3
	currentState = stateGround;
     3c2:	2200      	movs	r2, #0
     3c4:	4b08      	ldr	r3, [pc, #32]	; (3e8 <RC+0x5c>)
     3c6:	701a      	strb	r2, [r3, #0]
}
     3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3ca:	46c0      	nop			; (mov r8, r8)
     3cc:	200003c0 	.word	0x200003c0
     3d0:	200002b8 	.word	0x200002b8
     3d4:	200002ba 	.word	0x200002ba
     3d8:	00003285 	.word	0x00003285
     3dc:	200001f4 	.word	0x200001f4
     3e0:	200001f5 	.word	0x200001f5
     3e4:	0000336d 	.word	0x0000336d
     3e8:	200002bd 	.word	0x200002bd

000003ec <IND>:

void IND()
{
     3ec:	b570      	push	{r4, r5, r6, lr}
	//performs newline() if row = 24
	
	char tempCharacter;
	int xTemp = 0;
	
	if(yCharPos < 23)
     3ee:	4b19      	ldr	r3, [pc, #100]	; (454 <IND+0x68>)
     3f0:	881a      	ldrh	r2, [r3, #0]
     3f2:	2a16      	cmp	r2, #22
     3f4:	d914      	bls.n	420 <IND+0x34>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		xTemp = xCharPos;
     3f6:	4d18      	ldr	r5, [pc, #96]	; (458 <IND+0x6c>)
     3f8:	882c      	ldrh	r4, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     3fa:	0063      	lsls	r3, r4, #1
     3fc:	191b      	adds	r3, r3, r4
     3fe:	00db      	lsls	r3, r3, #3
     400:	4916      	ldr	r1, [pc, #88]	; (45c <IND+0x70>)
     402:	18cb      	adds	r3, r1, r3
     404:	5c98      	ldrb	r0, [r3, r2]
     406:	4e16      	ldr	r6, [pc, #88]	; (460 <IND+0x74>)
     408:	47b0      	blx	r6
		newLine();
     40a:	4b16      	ldr	r3, [pc, #88]	; (464 <IND+0x78>)
     40c:	4798      	blx	r3
		drawChar(0x00);
     40e:	2000      	movs	r0, #0
     410:	47b0      	blx	r6
		xCharPos = xTemp;
     412:	802c      	strh	r4, [r5, #0]
		blinkCursor();
     414:	4b14      	ldr	r3, [pc, #80]	; (468 <IND+0x7c>)
     416:	4798      	blx	r3
	}
		
		currentState = stateGround;	
     418:	2200      	movs	r2, #0
     41a:	4b14      	ldr	r3, [pc, #80]	; (46c <IND+0x80>)
     41c:	701a      	strb	r2, [r3, #0]
}
     41e:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     420:	4c0e      	ldr	r4, [pc, #56]	; (45c <IND+0x70>)
     422:	4d0d      	ldr	r5, [pc, #52]	; (458 <IND+0x6c>)
     424:	8829      	ldrh	r1, [r5, #0]
     426:	004b      	lsls	r3, r1, #1
     428:	185b      	adds	r3, r3, r1
     42a:	00db      	lsls	r3, r3, #3
     42c:	18e3      	adds	r3, r4, r3
     42e:	5c98      	ldrb	r0, [r3, r2]
     430:	4e0b      	ldr	r6, [pc, #44]	; (460 <IND+0x74>)
     432:	47b0      	blx	r6
		yCharPos++;
     434:	4a07      	ldr	r2, [pc, #28]	; (454 <IND+0x68>)
     436:	8813      	ldrh	r3, [r2, #0]
     438:	3301      	adds	r3, #1
     43a:	b29b      	uxth	r3, r3
     43c:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     43e:	8829      	ldrh	r1, [r5, #0]
     440:	004a      	lsls	r2, r1, #1
     442:	1852      	adds	r2, r2, r1
     444:	00d2      	lsls	r2, r2, #3
     446:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     448:	5ce0      	ldrb	r0, [r4, r3]
     44a:	47b0      	blx	r6
		blinkCursor();
     44c:	4b06      	ldr	r3, [pc, #24]	; (468 <IND+0x7c>)
     44e:	4798      	blx	r3
     450:	e7e2      	b.n	418 <IND+0x2c>
     452:	46c0      	nop			; (mov r8, r8)
     454:	200002ba 	.word	0x200002ba
     458:	200002b8 	.word	0x200002b8
     45c:	200003c0 	.word	0x200003c0
     460:	00003285 	.word	0x00003285
     464:	000034c9 	.word	0x000034c9
     468:	0000336d 	.word	0x0000336d
     46c:	200002bd 	.word	0x200002bd

00000470 <NEL>:

void NEL()
{
     470:	b570      	push	{r4, r5, r6, lr}
	//new line, moves down one line and to the
	//first column (CR,LF) scrolls if row = 24
	
	char tempCharacter;
	
	if(yCharPos < 23)
     472:	4b18      	ldr	r3, [pc, #96]	; (4d4 <NEL+0x64>)
     474:	881a      	ldrh	r2, [r3, #0]
     476:	2a16      	cmp	r2, #22
     478:	d915      	bls.n	4a6 <NEL+0x36>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     47a:	4c17      	ldr	r4, [pc, #92]	; (4d8 <NEL+0x68>)
     47c:	8821      	ldrh	r1, [r4, #0]
     47e:	004b      	lsls	r3, r1, #1
     480:	185b      	adds	r3, r3, r1
     482:	00db      	lsls	r3, r3, #3
     484:	4915      	ldr	r1, [pc, #84]	; (4dc <NEL+0x6c>)
     486:	18cb      	adds	r3, r1, r3
     488:	5c98      	ldrb	r0, [r3, r2]
     48a:	4d15      	ldr	r5, [pc, #84]	; (4e0 <NEL+0x70>)
     48c:	47a8      	blx	r5
		newLine();
     48e:	4b15      	ldr	r3, [pc, #84]	; (4e4 <NEL+0x74>)
     490:	4798      	blx	r3
		drawChar(0x00);
     492:	2000      	movs	r0, #0
     494:	47a8      	blx	r5
		xCharPos = 0;
     496:	2300      	movs	r3, #0
     498:	8023      	strh	r3, [r4, #0]
		blinkCursor();
     49a:	4b13      	ldr	r3, [pc, #76]	; (4e8 <NEL+0x78>)
     49c:	4798      	blx	r3
	}
		
	currentState = stateGround;
     49e:	2200      	movs	r2, #0
     4a0:	4b12      	ldr	r3, [pc, #72]	; (4ec <NEL+0x7c>)
     4a2:	701a      	strb	r2, [r3, #0]
}
     4a4:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4a6:	4c0d      	ldr	r4, [pc, #52]	; (4dc <NEL+0x6c>)
     4a8:	4d0b      	ldr	r5, [pc, #44]	; (4d8 <NEL+0x68>)
     4aa:	8829      	ldrh	r1, [r5, #0]
     4ac:	004b      	lsls	r3, r1, #1
     4ae:	185b      	adds	r3, r3, r1
     4b0:	00db      	lsls	r3, r3, #3
     4b2:	18e3      	adds	r3, r4, r3
     4b4:	5c98      	ldrb	r0, [r3, r2]
     4b6:	4e0a      	ldr	r6, [pc, #40]	; (4e0 <NEL+0x70>)
     4b8:	47b0      	blx	r6
		yCharPos++;
     4ba:	4a06      	ldr	r2, [pc, #24]	; (4d4 <NEL+0x64>)
     4bc:	8813      	ldrh	r3, [r2, #0]
     4be:	3301      	adds	r3, #1
     4c0:	b29b      	uxth	r3, r3
     4c2:	8013      	strh	r3, [r2, #0]
		xCharPos = 0;
     4c4:	2200      	movs	r2, #0
     4c6:	802a      	strh	r2, [r5, #0]
		drawChar(tempCharacter);
     4c8:	5ce0      	ldrb	r0, [r4, r3]
     4ca:	47b0      	blx	r6
		blinkCursor();
     4cc:	4b06      	ldr	r3, [pc, #24]	; (4e8 <NEL+0x78>)
     4ce:	4798      	blx	r3
     4d0:	e7e5      	b.n	49e <NEL+0x2e>
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	200002ba 	.word	0x200002ba
     4d8:	200002b8 	.word	0x200002b8
     4dc:	200003c0 	.word	0x200003c0
     4e0:	00003285 	.word	0x00003285
     4e4:	000034c9 	.word	0x000034c9
     4e8:	0000336d 	.word	0x0000336d
     4ec:	200002bd 	.word	0x200002bd

000004f0 <RI>:

void RI()
{
     4f0:	b570      	push	{r4, r5, r6, lr}
	//Reverse Index
	//Moves the cursor to the same horizontal position on the preceding line
	
	char tempCharacter;
	
	if(yCharPos == 0)
     4f2:	4b10      	ldr	r3, [pc, #64]	; (534 <RI+0x44>)
     4f4:	881a      	ldrh	r2, [r3, #0]
     4f6:	2a00      	cmp	r2, #0
     4f8:	d103      	bne.n	502 <RI+0x12>
		yCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     4fa:	2200      	movs	r2, #0
     4fc:	4b0e      	ldr	r3, [pc, #56]	; (538 <RI+0x48>)
     4fe:	701a      	strb	r2, [r3, #0]
}
     500:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     502:	4c0e      	ldr	r4, [pc, #56]	; (53c <RI+0x4c>)
     504:	4d0e      	ldr	r5, [pc, #56]	; (540 <RI+0x50>)
     506:	8829      	ldrh	r1, [r5, #0]
     508:	004b      	lsls	r3, r1, #1
     50a:	185b      	adds	r3, r3, r1
     50c:	00db      	lsls	r3, r3, #3
     50e:	18e3      	adds	r3, r4, r3
     510:	5c98      	ldrb	r0, [r3, r2]
     512:	4e0c      	ldr	r6, [pc, #48]	; (544 <RI+0x54>)
     514:	47b0      	blx	r6
		yCharPos--;
     516:	4a07      	ldr	r2, [pc, #28]	; (534 <RI+0x44>)
     518:	8813      	ldrh	r3, [r2, #0]
     51a:	3b01      	subs	r3, #1
     51c:	b29b      	uxth	r3, r3
     51e:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     520:	8829      	ldrh	r1, [r5, #0]
     522:	004a      	lsls	r2, r1, #1
     524:	1852      	adds	r2, r2, r1
     526:	00d2      	lsls	r2, r2, #3
     528:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     52a:	5ce0      	ldrb	r0, [r4, r3]
     52c:	47b0      	blx	r6
		blinkCursor();
     52e:	4b06      	ldr	r3, [pc, #24]	; (548 <RI+0x58>)
     530:	4798      	blx	r3
     532:	e7e2      	b.n	4fa <RI+0xa>
     534:	200002ba 	.word	0x200002ba
     538:	200002bd 	.word	0x200002bd
     53c:	200003c0 	.word	0x200003c0
     540:	200002b8 	.word	0x200002b8
     544:	00003285 	.word	0x00003285
     548:	0000336d 	.word	0x0000336d

0000054c <RIS>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     54c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     550:	4a03      	ldr	r2, [pc, #12]	; (560 <RIS+0x14>)
     552:	4b04      	ldr	r3, [pc, #16]	; (564 <RIS+0x18>)
     554:	60da      	str	r2, [r3, #12]
     556:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	e7fd      	b.n	55a <RIS+0xe>
     55e:	46c0      	nop			; (mov r8, r8)
     560:	05fa0004 	.word	0x05fa0004
     564:	e000ed00 	.word	0xe000ed00

00000568 <escState>:
{
     568:	b510      	push	{r4, lr}
	if(character == 0x37)		//ESC + 7 - (DECSC) -
     56a:	2837      	cmp	r0, #55	; 0x37
     56c:	d021      	beq.n	5b2 <escState+0x4a>
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     56e:	2838      	cmp	r0, #56	; 0x38
     570:	d022      	beq.n	5b8 <escState+0x50>
	else if(character == 0x44)		//ESC + D - (IND) - 
     572:	2844      	cmp	r0, #68	; 0x44
     574:	d023      	beq.n	5be <escState+0x56>
	else if(character == 0x45)		//ESC + E - (NEL) -
     576:	2845      	cmp	r0, #69	; 0x45
     578:	d024      	beq.n	5c4 <escState+0x5c>
	else if(character == 0x48)		//ESC + H - (HTS) - 
     57a:	2848      	cmp	r0, #72	; 0x48
     57c:	d025      	beq.n	5ca <escState+0x62>
	else if(character == 0x4D)		//ESC + M - (RI)
     57e:	284d      	cmp	r0, #77	; 0x4d
     580:	d027      	beq.n	5d2 <escState+0x6a>
	else if(character == 0x59)		//ESC + Z (DECID)
     582:	2859      	cmp	r0, #89	; 0x59
     584:	d028      	beq.n	5d8 <escState+0x70>
	else if(character == 0x63)		//ESC + c - (RIS)
     586:	2863      	cmp	r0, #99	; 0x63
     588:	d02e      	beq.n	5e8 <escState+0x80>
	else if(character == 0x3E)		//ESC >
     58a:	283e      	cmp	r0, #62	; 0x3e
     58c:	d02e      	beq.n	5ec <escState+0x84>
	else if(character == 0x3D)		//ESC =
     58e:	283d      	cmp	r0, #61	; 0x3d
     590:	d030      	beq.n	5f4 <escState+0x8c>
	else if(character == 0x5D)		//ESC ]
     592:	285d      	cmp	r0, #93	; 0x5d
     594:	d032      	beq.n	5fc <escState+0x94>
	else if(character == 0x23 || character == 0x25 || character == 0x28 ||
     596:	22fd      	movs	r2, #253	; 0xfd
     598:	0003      	movs	r3, r0
     59a:	3b23      	subs	r3, #35	; 0x23
     59c:	4213      	tst	r3, r2
     59e:	d031      	beq.n	604 <escState+0x9c>
     5a0:	3b05      	subs	r3, #5
     5a2:	2b01      	cmp	r3, #1
     5a4:	d92e      	bls.n	604 <escState+0x9c>
	else if(character == 0x5B)
     5a6:	285b      	cmp	r0, #91	; 0x5b
     5a8:	d032      	beq.n	610 <escState+0xa8>
		currentState = stateGround;
     5aa:	2200      	movs	r2, #0
     5ac:	4b1a      	ldr	r3, [pc, #104]	; (618 <escState+0xb0>)
     5ae:	701a      	strb	r2, [r3, #0]
}
     5b0:	e02d      	b.n	60e <escState+0xa6>
		SC();
     5b2:	4b1a      	ldr	r3, [pc, #104]	; (61c <escState+0xb4>)
     5b4:	4798      	blx	r3
     5b6:	e02a      	b.n	60e <escState+0xa6>
		RC();
     5b8:	4b19      	ldr	r3, [pc, #100]	; (620 <escState+0xb8>)
     5ba:	4798      	blx	r3
     5bc:	e027      	b.n	60e <escState+0xa6>
		IND();			
     5be:	4b19      	ldr	r3, [pc, #100]	; (624 <escState+0xbc>)
     5c0:	4798      	blx	r3
     5c2:	e024      	b.n	60e <escState+0xa6>
		NEL();
     5c4:	4b18      	ldr	r3, [pc, #96]	; (628 <escState+0xc0>)
     5c6:	4798      	blx	r3
     5c8:	e021      	b.n	60e <escState+0xa6>
}

void HTS()
{
	//set tab stop at current column, unsupported now
	currentState = stateGround;
     5ca:	2200      	movs	r2, #0
     5cc:	4b12      	ldr	r3, [pc, #72]	; (618 <escState+0xb0>)
     5ce:	701a      	strb	r2, [r3, #0]
     5d0:	e01d      	b.n	60e <escState+0xa6>
		RI();
     5d2:	4b16      	ldr	r3, [pc, #88]	; (62c <escState+0xc4>)
     5d4:	4798      	blx	r3
     5d6:	e01a      	b.n	60e <escState+0xa6>
		printf("%s",DECIDreturn);
     5d8:	4915      	ldr	r1, [pc, #84]	; (630 <escState+0xc8>)
     5da:	4816      	ldr	r0, [pc, #88]	; (634 <escState+0xcc>)
     5dc:	4b16      	ldr	r3, [pc, #88]	; (638 <escState+0xd0>)
     5de:	4798      	blx	r3
		currentState = stateGround;
     5e0:	2200      	movs	r2, #0
     5e2:	4b0d      	ldr	r3, [pc, #52]	; (618 <escState+0xb0>)
     5e4:	701a      	strb	r2, [r3, #0]
     5e6:	e012      	b.n	60e <escState+0xa6>
		RIS();
     5e8:	4b14      	ldr	r3, [pc, #80]	; (63c <escState+0xd4>)
     5ea:	4798      	blx	r3
		currentState = stateGround;
     5ec:	2200      	movs	r2, #0
     5ee:	4b0a      	ldr	r3, [pc, #40]	; (618 <escState+0xb0>)
     5f0:	701a      	strb	r2, [r3, #0]
     5f2:	e00c      	b.n	60e <escState+0xa6>
		currentState = stateGround;
     5f4:	2200      	movs	r2, #0
     5f6:	4b08      	ldr	r3, [pc, #32]	; (618 <escState+0xb0>)
     5f8:	701a      	strb	r2, [r3, #0]
     5fa:	e008      	b.n	60e <escState+0xa6>
		currentState = stateGround;
     5fc:	2200      	movs	r2, #0
     5fe:	4b06      	ldr	r3, [pc, #24]	; (618 <escState+0xb0>)
     600:	701a      	strb	r2, [r3, #0]
     602:	e004      	b.n	60e <escState+0xa6>
		stateEnterBuffer = character;
     604:	4b0e      	ldr	r3, [pc, #56]	; (640 <escState+0xd8>)
     606:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     608:	2202      	movs	r2, #2
     60a:	4b03      	ldr	r3, [pc, #12]	; (618 <escState+0xb0>)
     60c:	701a      	strb	r2, [r3, #0]
}
     60e:	bd10      	pop	{r4, pc}
		currentState = stateCSIentry;
     610:	2203      	movs	r2, #3
     612:	4b01      	ldr	r3, [pc, #4]	; (618 <escState+0xb0>)
     614:	701a      	strb	r2, [r3, #0]
     616:	e7fa      	b.n	60e <escState+0xa6>
     618:	200002bd 	.word	0x200002bd
     61c:	00000361 	.word	0x00000361
     620:	0000038d 	.word	0x0000038d
     624:	000003ed 	.word	0x000003ed
     628:	00000471 	.word	0x00000471
     62c:	000004f1 	.word	0x000004f1
     630:	00005c58 	.word	0x00005c58
     634:	00005c8c 	.word	0x00005c8c
     638:	00004a79 	.word	0x00004a79
     63c:	0000054d 	.word	0x0000054d
     640:	20000342 	.word	0x20000342

00000644 <CUU>:

/************************************************************************/
/*    CSI mnemonic functions                                            */
/************************************************************************/
void CUU() // Cursor Up
{
     644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     646:	4b20      	ldr	r3, [pc, #128]	; (6c8 <CUU+0x84>)
     648:	4798      	blx	r3
	{
		parameter = 1;
     64a:	2401      	movs	r4, #1
	if(isEmptyParam())
     64c:	2800      	cmp	r0, #0
     64e:	d01d      	beq.n	68c <CUU+0x48>
		{
			parameter = 1;
		}
	}
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     650:	4b1e      	ldr	r3, [pc, #120]	; (6cc <CUU+0x88>)
     652:	881a      	ldrh	r2, [r3, #0]
     654:	1b13      	subs	r3, r2, r4
     656:	2b18      	cmp	r3, #24
     658:	d91e      	bls.n	698 <CUU+0x54>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     65a:	4c1d      	ldr	r4, [pc, #116]	; (6d0 <CUU+0x8c>)
     65c:	4e1d      	ldr	r6, [pc, #116]	; (6d4 <CUU+0x90>)
     65e:	8831      	ldrh	r1, [r6, #0]
     660:	004b      	lsls	r3, r1, #1
     662:	185b      	adds	r3, r3, r1
     664:	00db      	lsls	r3, r3, #3
     666:	18e3      	adds	r3, r4, r3
     668:	5c98      	ldrb	r0, [r3, r2]
     66a:	4d1b      	ldr	r5, [pc, #108]	; (6d8 <CUU+0x94>)
     66c:	47a8      	blx	r5
		yCharPos = 0;
     66e:	2200      	movs	r2, #0
     670:	4b16      	ldr	r3, [pc, #88]	; (6cc <CUU+0x88>)
     672:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     674:	8832      	ldrh	r2, [r6, #0]
     676:	0053      	lsls	r3, r2, #1
     678:	189b      	adds	r3, r3, r2
     67a:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     67c:	5d18      	ldrb	r0, [r3, r4]
     67e:	47a8      	blx	r5
	}
	
	blinkCursor();
     680:	4b16      	ldr	r3, [pc, #88]	; (6dc <CUU+0x98>)
     682:	4798      	blx	r3
	currentState = stateGround;
     684:	2200      	movs	r2, #0
     686:	4b16      	ldr	r3, [pc, #88]	; (6e0 <CUU+0x9c>)
     688:	701a      	strb	r2, [r3, #0]
}
     68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     68c:	4b15      	ldr	r3, [pc, #84]	; (6e4 <CUU+0xa0>)
     68e:	4798      	blx	r3
     690:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     692:	d1dd      	bne.n	650 <CUU+0xc>
			parameter = 1;
     694:	3401      	adds	r4, #1
     696:	e7db      	b.n	650 <CUU+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     698:	4d0d      	ldr	r5, [pc, #52]	; (6d0 <CUU+0x8c>)
     69a:	4e0e      	ldr	r6, [pc, #56]	; (6d4 <CUU+0x90>)
     69c:	8831      	ldrh	r1, [r6, #0]
     69e:	004b      	lsls	r3, r1, #1
     6a0:	185b      	adds	r3, r3, r1
     6a2:	00db      	lsls	r3, r3, #3
     6a4:	18eb      	adds	r3, r5, r3
     6a6:	5c98      	ldrb	r0, [r3, r2]
     6a8:	4f0b      	ldr	r7, [pc, #44]	; (6d8 <CUU+0x94>)
     6aa:	47b8      	blx	r7
		yCharPos = yCharPos - parameter;
     6ac:	4b07      	ldr	r3, [pc, #28]	; (6cc <CUU+0x88>)
     6ae:	8818      	ldrh	r0, [r3, #0]
     6b0:	1b04      	subs	r4, r0, r4
     6b2:	b2a4      	uxth	r4, r4
     6b4:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     6b6:	8832      	ldrh	r2, [r6, #0]
     6b8:	0053      	lsls	r3, r2, #1
     6ba:	189b      	adds	r3, r3, r2
     6bc:	00db      	lsls	r3, r3, #3
     6be:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     6c0:	5d28      	ldrb	r0, [r5, r4]
     6c2:	47b8      	blx	r7
     6c4:	e7dc      	b.n	680 <CUU+0x3c>
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	00000241 	.word	0x00000241
     6cc:	200002ba 	.word	0x200002ba
     6d0:	200003c0 	.word	0x200003c0
     6d4:	200002b8 	.word	0x200002b8
     6d8:	00003285 	.word	0x00003285
     6dc:	0000336d 	.word	0x0000336d
     6e0:	200002bd 	.word	0x200002bd
     6e4:	00000255 	.word	0x00000255

000006e8 <CUD>:
void CUD() //Cursor Down
{
     6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     6ea:	4b20      	ldr	r3, [pc, #128]	; (76c <CUD+0x84>)
     6ec:	4798      	blx	r3
	{
		parameter = 1;
     6ee:	2401      	movs	r4, #1
	if(isEmptyParam())
     6f0:	2800      	cmp	r0, #0
     6f2:	d01e      	beq.n	732 <CUD+0x4a>
		if(parameter == 0)
		{
			parameter = 1;
		}
	}
	if((yCharPos + parameter) <= 23)
     6f4:	4b1e      	ldr	r3, [pc, #120]	; (770 <CUD+0x88>)
     6f6:	881a      	ldrh	r2, [r3, #0]
     6f8:	18a3      	adds	r3, r4, r2
     6fa:	2b17      	cmp	r3, #23
     6fc:	dd1f      	ble.n	73e <CUD+0x56>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     6fe:	4c1d      	ldr	r4, [pc, #116]	; (774 <CUD+0x8c>)
     700:	4e1d      	ldr	r6, [pc, #116]	; (778 <CUD+0x90>)
     702:	8831      	ldrh	r1, [r6, #0]
     704:	004b      	lsls	r3, r1, #1
     706:	185b      	adds	r3, r3, r1
     708:	00db      	lsls	r3, r3, #3
     70a:	18e3      	adds	r3, r4, r3
     70c:	5c98      	ldrb	r0, [r3, r2]
     70e:	4d1b      	ldr	r5, [pc, #108]	; (77c <CUD+0x94>)
     710:	47a8      	blx	r5
		yCharPos = 23;
     712:	2217      	movs	r2, #23
     714:	4b16      	ldr	r3, [pc, #88]	; (770 <CUD+0x88>)
     716:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     718:	8832      	ldrh	r2, [r6, #0]
     71a:	0053      	lsls	r3, r2, #1
     71c:	189b      	adds	r3, r3, r2
     71e:	00db      	lsls	r3, r3, #3
     720:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     722:	7dd8      	ldrb	r0, [r3, #23]
     724:	47a8      	blx	r5
	}

	blinkCursor();
     726:	4b16      	ldr	r3, [pc, #88]	; (780 <CUD+0x98>)
     728:	4798      	blx	r3
	currentState = stateGround;
     72a:	2200      	movs	r2, #0
     72c:	4b15      	ldr	r3, [pc, #84]	; (784 <CUD+0x9c>)
     72e:	701a      	strb	r2, [r3, #0]
}
     730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     732:	4b15      	ldr	r3, [pc, #84]	; (788 <CUD+0xa0>)
     734:	4798      	blx	r3
     736:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     738:	d1dc      	bne.n	6f4 <CUD+0xc>
			parameter = 1;
     73a:	3401      	adds	r4, #1
     73c:	e7da      	b.n	6f4 <CUD+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     73e:	4d0d      	ldr	r5, [pc, #52]	; (774 <CUD+0x8c>)
     740:	4e0d      	ldr	r6, [pc, #52]	; (778 <CUD+0x90>)
     742:	8831      	ldrh	r1, [r6, #0]
     744:	004b      	lsls	r3, r1, #1
     746:	185b      	adds	r3, r3, r1
     748:	00db      	lsls	r3, r3, #3
     74a:	18eb      	adds	r3, r5, r3
     74c:	5c98      	ldrb	r0, [r3, r2]
     74e:	4f0b      	ldr	r7, [pc, #44]	; (77c <CUD+0x94>)
     750:	47b8      	blx	r7
		yCharPos = yCharPos + parameter;
     752:	4b07      	ldr	r3, [pc, #28]	; (770 <CUD+0x88>)
     754:	8818      	ldrh	r0, [r3, #0]
     756:	1904      	adds	r4, r0, r4
     758:	b2a4      	uxth	r4, r4
     75a:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     75c:	8832      	ldrh	r2, [r6, #0]
     75e:	0053      	lsls	r3, r2, #1
     760:	189b      	adds	r3, r3, r2
     762:	00db      	lsls	r3, r3, #3
     764:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     766:	5d28      	ldrb	r0, [r5, r4]
     768:	47b8      	blx	r7
     76a:	e7dc      	b.n	726 <CUD+0x3e>
     76c:	00000241 	.word	0x00000241
     770:	200002ba 	.word	0x200002ba
     774:	200003c0 	.word	0x200003c0
     778:	200002b8 	.word	0x200002b8
     77c:	00003285 	.word	0x00003285
     780:	0000336d 	.word	0x0000336d
     784:	200002bd 	.word	0x200002bd
     788:	00000255 	.word	0x00000255

0000078c <CUF>:
void CUF() //Cursor Forward
{
     78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     78e:	4b21      	ldr	r3, [pc, #132]	; (814 <CUF+0x88>)
     790:	4798      	blx	r3
	{
		parameter = 1;
     792:	2401      	movs	r4, #1
	if(isEmptyParam())
     794:	2800      	cmp	r0, #0
     796:	d01f      	beq.n	7d8 <CUF+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos + parameter <= 79)
     798:	4b1f      	ldr	r3, [pc, #124]	; (818 <CUF+0x8c>)
     79a:	881a      	ldrh	r2, [r3, #0]
     79c:	18a3      	adds	r3, r4, r2
     79e:	2b4f      	cmp	r3, #79	; 0x4f
     7a0:	dd20      	ble.n	7e4 <CUF+0x58>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7a2:	4c1e      	ldr	r4, [pc, #120]	; (81c <CUF+0x90>)
     7a4:	4e1e      	ldr	r6, [pc, #120]	; (820 <CUF+0x94>)
     7a6:	8831      	ldrh	r1, [r6, #0]
     7a8:	0053      	lsls	r3, r2, #1
     7aa:	189b      	adds	r3, r3, r2
     7ac:	00db      	lsls	r3, r3, #3
     7ae:	18e3      	adds	r3, r4, r3
     7b0:	5c58      	ldrb	r0, [r3, r1]
     7b2:	4d1c      	ldr	r5, [pc, #112]	; (824 <CUF+0x98>)
     7b4:	47a8      	blx	r5
		xCharPos = 79;
     7b6:	224f      	movs	r2, #79	; 0x4f
     7b8:	4b17      	ldr	r3, [pc, #92]	; (818 <CUF+0x8c>)
     7ba:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     7bc:	8833      	ldrh	r3, [r6, #0]
     7be:	18e4      	adds	r4, r4, r3
     7c0:	23ed      	movs	r3, #237	; 0xed
     7c2:	00db      	lsls	r3, r3, #3
     7c4:	469c      	mov	ip, r3
     7c6:	4464      	add	r4, ip
		drawChar(tempCharacter);	
     7c8:	7820      	ldrb	r0, [r4, #0]
     7ca:	47a8      	blx	r5
	}
	blinkCursor();
     7cc:	4b16      	ldr	r3, [pc, #88]	; (828 <CUF+0x9c>)
     7ce:	4798      	blx	r3
	currentState = stateGround;
     7d0:	2200      	movs	r2, #0
     7d2:	4b16      	ldr	r3, [pc, #88]	; (82c <CUF+0xa0>)
     7d4:	701a      	strb	r2, [r3, #0]
}
     7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     7d8:	4b15      	ldr	r3, [pc, #84]	; (830 <CUF+0xa4>)
     7da:	4798      	blx	r3
     7dc:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     7de:	d1db      	bne.n	798 <CUF+0xc>
			parameter = 1;
     7e0:	3401      	adds	r4, #1
     7e2:	e7d9      	b.n	798 <CUF+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7e4:	4d0d      	ldr	r5, [pc, #52]	; (81c <CUF+0x90>)
     7e6:	4e0e      	ldr	r6, [pc, #56]	; (820 <CUF+0x94>)
     7e8:	8831      	ldrh	r1, [r6, #0]
     7ea:	0053      	lsls	r3, r2, #1
     7ec:	189b      	adds	r3, r3, r2
     7ee:	00db      	lsls	r3, r3, #3
     7f0:	18eb      	adds	r3, r5, r3
     7f2:	5c58      	ldrb	r0, [r3, r1]
     7f4:	4f0b      	ldr	r7, [pc, #44]	; (824 <CUF+0x98>)
     7f6:	47b8      	blx	r7
		xCharPos = xCharPos + parameter;
     7f8:	4b07      	ldr	r3, [pc, #28]	; (818 <CUF+0x8c>)
     7fa:	8818      	ldrh	r0, [r3, #0]
     7fc:	1904      	adds	r4, r0, r4
     7fe:	b2a4      	uxth	r4, r4
     800:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     802:	8833      	ldrh	r3, [r6, #0]
     804:	0060      	lsls	r0, r4, #1
     806:	1904      	adds	r4, r0, r4
     808:	00e4      	lsls	r4, r4, #3
     80a:	192c      	adds	r4, r5, r4
		drawChar(tempCharacter);
     80c:	5ce0      	ldrb	r0, [r4, r3]
     80e:	47b8      	blx	r7
     810:	e7dc      	b.n	7cc <CUF+0x40>
     812:	46c0      	nop			; (mov r8, r8)
     814:	00000241 	.word	0x00000241
     818:	200002b8 	.word	0x200002b8
     81c:	200003c0 	.word	0x200003c0
     820:	200002ba 	.word	0x200002ba
     824:	00003285 	.word	0x00003285
     828:	0000336d 	.word	0x0000336d
     82c:	200002bd 	.word	0x200002bd
     830:	00000255 	.word	0x00000255

00000834 <CUB>:
void CUB() //Cursor Backward
{
     834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     836:	4b1e      	ldr	r3, [pc, #120]	; (8b0 <CUB+0x7c>)
     838:	4798      	blx	r3
	{
		parameter = 1;
     83a:	2601      	movs	r6, #1
	if(isEmptyParam())
     83c:	2800      	cmp	r0, #0
     83e:	d01f      	beq.n	880 <CUB+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos - parameter >= 0)
     840:	4b1c      	ldr	r3, [pc, #112]	; (8b4 <CUB+0x80>)
     842:	881a      	ldrh	r2, [r3, #0]
     844:	1b93      	subs	r3, r2, r6
     846:	d421      	bmi.n	88c <CUB+0x58>
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     848:	4c1b      	ldr	r4, [pc, #108]	; (8b8 <CUB+0x84>)
     84a:	4d1c      	ldr	r5, [pc, #112]	; (8bc <CUB+0x88>)
     84c:	8829      	ldrh	r1, [r5, #0]
     84e:	0053      	lsls	r3, r2, #1
     850:	189b      	adds	r3, r3, r2
     852:	00db      	lsls	r3, r3, #3
     854:	18e3      	adds	r3, r4, r3
     856:	5c58      	ldrb	r0, [r3, r1]
     858:	4f19      	ldr	r7, [pc, #100]	; (8c0 <CUB+0x8c>)
     85a:	47b8      	blx	r7
		xCharPos = xCharPos - parameter;
     85c:	4b15      	ldr	r3, [pc, #84]	; (8b4 <CUB+0x80>)
     85e:	8818      	ldrh	r0, [r3, #0]
     860:	1b80      	subs	r0, r0, r6
     862:	b280      	uxth	r0, r0
     864:	8018      	strh	r0, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     866:	882a      	ldrh	r2, [r5, #0]
     868:	0043      	lsls	r3, r0, #1
     86a:	1818      	adds	r0, r3, r0
     86c:	00c0      	lsls	r0, r0, #3
     86e:	1820      	adds	r0, r4, r0
		drawChar(tempCharacter);
     870:	5c80      	ldrb	r0, [r0, r2]
     872:	47b8      	blx	r7
		drawChar(consoleDisplay[xCharPos][yCharPos]);
		xCharPos = 0;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	blinkCursor();
     874:	4b13      	ldr	r3, [pc, #76]	; (8c4 <CUB+0x90>)
     876:	4798      	blx	r3
	currentState = stateGround;
     878:	2200      	movs	r2, #0
     87a:	4b13      	ldr	r3, [pc, #76]	; (8c8 <CUB+0x94>)
     87c:	701a      	strb	r2, [r3, #0]
}
     87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     880:	4b12      	ldr	r3, [pc, #72]	; (8cc <CUB+0x98>)
     882:	4798      	blx	r3
     884:	1e06      	subs	r6, r0, #0
		if(parameter == 0)
     886:	d1db      	bne.n	840 <CUB+0xc>
			parameter = 1;
     888:	3601      	adds	r6, #1
     88a:	e7d9      	b.n	840 <CUB+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     88c:	4d0a      	ldr	r5, [pc, #40]	; (8b8 <CUB+0x84>)
     88e:	4e0b      	ldr	r6, [pc, #44]	; (8bc <CUB+0x88>)
     890:	8831      	ldrh	r1, [r6, #0]
     892:	0053      	lsls	r3, r2, #1
     894:	189b      	adds	r3, r3, r2
     896:	00db      	lsls	r3, r3, #3
     898:	18eb      	adds	r3, r5, r3
     89a:	5c58      	ldrb	r0, [r3, r1]
     89c:	4c08      	ldr	r4, [pc, #32]	; (8c0 <CUB+0x8c>)
     89e:	47a0      	blx	r4
		xCharPos = 0;
     8a0:	2200      	movs	r2, #0
     8a2:	4b04      	ldr	r3, [pc, #16]	; (8b4 <CUB+0x80>)
     8a4:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8a6:	8833      	ldrh	r3, [r6, #0]
		drawChar(tempCharacter);
     8a8:	5ce8      	ldrb	r0, [r5, r3]
     8aa:	47a0      	blx	r4
     8ac:	e7e2      	b.n	874 <CUB+0x40>
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	00000241 	.word	0x00000241
     8b4:	200002b8 	.word	0x200002b8
     8b8:	200003c0 	.word	0x200003c0
     8bc:	200002ba 	.word	0x200002ba
     8c0:	00003285 	.word	0x00003285
     8c4:	0000336d 	.word	0x0000336d
     8c8:	200002bd 	.word	0x200002bd
     8cc:	00000255 	.word	0x00000255

000008d0 <CNL>:
void CNL() //Cursor Next Line
{
     8d0:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     8d2:	4b1d      	ldr	r3, [pc, #116]	; (948 <CNL+0x78>)
     8d4:	4798      	blx	r3
	{
		parameter = 1;
     8d6:	2401      	movs	r4, #1
	if(isEmptyParam())
     8d8:	2800      	cmp	r0, #0
     8da:	d01c      	beq.n	916 <CNL+0x46>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     8dc:	2200      	movs	r2, #0
     8de:	4b1b      	ldr	r3, [pc, #108]	; (94c <CNL+0x7c>)
     8e0:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos + parameter) <= 23)
     8e2:	4b1b      	ldr	r3, [pc, #108]	; (950 <CNL+0x80>)
     8e4:	881b      	ldrh	r3, [r3, #0]
     8e6:	18e2      	adds	r2, r4, r3
     8e8:	2a17      	cmp	r2, #23
     8ea:	dd1a      	ble.n	922 <CNL+0x52>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     8ec:	4c19      	ldr	r4, [pc, #100]	; (954 <CNL+0x84>)
     8ee:	5ce0      	ldrb	r0, [r4, r3]
     8f0:	4d19      	ldr	r5, [pc, #100]	; (958 <CNL+0x88>)
     8f2:	47a8      	blx	r5
		yCharPos = 23;
     8f4:	2217      	movs	r2, #23
     8f6:	4b16      	ldr	r3, [pc, #88]	; (950 <CNL+0x80>)
     8f8:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8fa:	4b14      	ldr	r3, [pc, #80]	; (94c <CNL+0x7c>)
     8fc:	881a      	ldrh	r2, [r3, #0]
     8fe:	0053      	lsls	r3, r2, #1
     900:	189b      	adds	r3, r3, r2
     902:	00db      	lsls	r3, r3, #3
     904:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     906:	7dd8      	ldrb	r0, [r3, #23]
     908:	47a8      	blx	r5
	}

	blinkCursor();
     90a:	4b14      	ldr	r3, [pc, #80]	; (95c <CNL+0x8c>)
     90c:	4798      	blx	r3
	currentState = stateGround;	
     90e:	2200      	movs	r2, #0
     910:	4b13      	ldr	r3, [pc, #76]	; (960 <CNL+0x90>)
     912:	701a      	strb	r2, [r3, #0]
}
     914:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     916:	4b13      	ldr	r3, [pc, #76]	; (964 <CNL+0x94>)
     918:	4798      	blx	r3
     91a:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     91c:	d1de      	bne.n	8dc <CNL+0xc>
			parameter = 1;
     91e:	3401      	adds	r4, #1
     920:	e7dc      	b.n	8dc <CNL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     922:	4d0c      	ldr	r5, [pc, #48]	; (954 <CNL+0x84>)
     924:	5ce8      	ldrb	r0, [r5, r3]
     926:	4e0c      	ldr	r6, [pc, #48]	; (958 <CNL+0x88>)
     928:	47b0      	blx	r6
		yCharPos = yCharPos + parameter;
     92a:	4b09      	ldr	r3, [pc, #36]	; (950 <CNL+0x80>)
     92c:	8818      	ldrh	r0, [r3, #0]
     92e:	1904      	adds	r4, r0, r4
     930:	b2a4      	uxth	r4, r4
     932:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     934:	4b05      	ldr	r3, [pc, #20]	; (94c <CNL+0x7c>)
     936:	881a      	ldrh	r2, [r3, #0]
     938:	0053      	lsls	r3, r2, #1
     93a:	189b      	adds	r3, r3, r2
     93c:	00db      	lsls	r3, r3, #3
     93e:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     940:	5d18      	ldrb	r0, [r3, r4]
     942:	47b0      	blx	r6
     944:	e7e1      	b.n	90a <CNL+0x3a>
     946:	46c0      	nop			; (mov r8, r8)
     948:	00000241 	.word	0x00000241
     94c:	200002b8 	.word	0x200002b8
     950:	200002ba 	.word	0x200002ba
     954:	200003c0 	.word	0x200003c0
     958:	00003285 	.word	0x00003285
     95c:	0000336d 	.word	0x0000336d
     960:	200002bd 	.word	0x200002bd
     964:	00000255 	.word	0x00000255

00000968 <CPL>:
void CPL() //Cursor Preceding Line
{
     968:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     96a:	4b1c      	ldr	r3, [pc, #112]	; (9dc <CPL+0x74>)
     96c:	4798      	blx	r3
	{
		parameter = 1;
     96e:	2401      	movs	r4, #1
	if(isEmptyParam())
     970:	2800      	cmp	r0, #0
     972:	d01b      	beq.n	9ac <CPL+0x44>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     974:	2200      	movs	r2, #0
     976:	4b1a      	ldr	r3, [pc, #104]	; (9e0 <CPL+0x78>)
     978:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     97a:	4b1a      	ldr	r3, [pc, #104]	; (9e4 <CPL+0x7c>)
     97c:	881b      	ldrh	r3, [r3, #0]
     97e:	1b1a      	subs	r2, r3, r4
     980:	2a18      	cmp	r2, #24
     982:	d919      	bls.n	9b8 <CPL+0x50>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     984:	4d18      	ldr	r5, [pc, #96]	; (9e8 <CPL+0x80>)
     986:	5ce8      	ldrb	r0, [r5, r3]
     988:	4c18      	ldr	r4, [pc, #96]	; (9ec <CPL+0x84>)
     98a:	47a0      	blx	r4
		yCharPos = 0;
     98c:	2200      	movs	r2, #0
     98e:	4b15      	ldr	r3, [pc, #84]	; (9e4 <CPL+0x7c>)
     990:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     992:	4b13      	ldr	r3, [pc, #76]	; (9e0 <CPL+0x78>)
     994:	881a      	ldrh	r2, [r3, #0]
     996:	0053      	lsls	r3, r2, #1
     998:	189b      	adds	r3, r3, r2
     99a:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     99c:	5d58      	ldrb	r0, [r3, r5]
     99e:	47a0      	blx	r4
	}
	
	blinkCursor();
     9a0:	4b13      	ldr	r3, [pc, #76]	; (9f0 <CPL+0x88>)
     9a2:	4798      	blx	r3
	currentState = stateGround;
     9a4:	2200      	movs	r2, #0
     9a6:	4b13      	ldr	r3, [pc, #76]	; (9f4 <CPL+0x8c>)
     9a8:	701a      	strb	r2, [r3, #0]
	
}
     9aa:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     9ac:	4b12      	ldr	r3, [pc, #72]	; (9f8 <CPL+0x90>)
     9ae:	4798      	blx	r3
     9b0:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     9b2:	d1df      	bne.n	974 <CPL+0xc>
			parameter = 1;
     9b4:	3401      	adds	r4, #1
     9b6:	e7dd      	b.n	974 <CPL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     9b8:	4d0b      	ldr	r5, [pc, #44]	; (9e8 <CPL+0x80>)
     9ba:	5ce8      	ldrb	r0, [r5, r3]
     9bc:	4e0b      	ldr	r6, [pc, #44]	; (9ec <CPL+0x84>)
     9be:	47b0      	blx	r6
		yCharPos = yCharPos - parameter;
     9c0:	4b08      	ldr	r3, [pc, #32]	; (9e4 <CPL+0x7c>)
     9c2:	8818      	ldrh	r0, [r3, #0]
     9c4:	1b04      	subs	r4, r0, r4
     9c6:	b2a4      	uxth	r4, r4
     9c8:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     9ca:	4b05      	ldr	r3, [pc, #20]	; (9e0 <CPL+0x78>)
     9cc:	881a      	ldrh	r2, [r3, #0]
     9ce:	0053      	lsls	r3, r2, #1
     9d0:	189b      	adds	r3, r3, r2
     9d2:	00db      	lsls	r3, r3, #3
     9d4:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     9d6:	5d18      	ldrb	r0, [r3, r4]
     9d8:	47b0      	blx	r6
     9da:	e7e1      	b.n	9a0 <CPL+0x38>
     9dc:	00000241 	.word	0x00000241
     9e0:	200002b8 	.word	0x200002b8
     9e4:	200002ba 	.word	0x200002ba
     9e8:	200003c0 	.word	0x200003c0
     9ec:	00003285 	.word	0x00003285
     9f0:	0000336d 	.word	0x0000336d
     9f4:	200002bd 	.word	0x200002bd
     9f8:	00000255 	.word	0x00000255

000009fc <CHA>:
void CHA() //Cursor Horizontal Absolute
{
     9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9fe:	46c6      	mov	lr, r8
     a00:	b500      	push	{lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     a02:	4b17      	ldr	r3, [pc, #92]	; (a60 <CHA+0x64>)
     a04:	4798      	blx	r3
	{
		parameter = 1;
     a06:	2501      	movs	r5, #1
	if(isEmptyParam())
     a08:	2800      	cmp	r0, #0
     a0a:	d01c      	beq.n	a46 <CHA+0x4a>
		{
			parameter = 79;
		}
	}
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a0c:	4c15      	ldr	r4, [pc, #84]	; (a64 <CHA+0x68>)
     a0e:	4f16      	ldr	r7, [pc, #88]	; (a68 <CHA+0x6c>)
     a10:	883a      	ldrh	r2, [r7, #0]
     a12:	4e16      	ldr	r6, [pc, #88]	; (a6c <CHA+0x70>)
     a14:	8831      	ldrh	r1, [r6, #0]
     a16:	0053      	lsls	r3, r2, #1
     a18:	189b      	adds	r3, r3, r2
     a1a:	00db      	lsls	r3, r3, #3
     a1c:	18e3      	adds	r3, r4, r3
     a1e:	5c58      	ldrb	r0, [r3, r1]
     a20:	4b13      	ldr	r3, [pc, #76]	; (a70 <CHA+0x74>)
     a22:	4698      	mov	r8, r3
     a24:	4798      	blx	r3
	xCharPos = parameter;
     a26:	803d      	strh	r5, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     a28:	8832      	ldrh	r2, [r6, #0]
     a2a:	006b      	lsls	r3, r5, #1
     a2c:	195b      	adds	r3, r3, r5
     a2e:	00db      	lsls	r3, r3, #3
     a30:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     a32:	5c98      	ldrb	r0, [r3, r2]
     a34:	47c0      	blx	r8
	
	blinkCursor();
     a36:	4b0f      	ldr	r3, [pc, #60]	; (a74 <CHA+0x78>)
     a38:	4798      	blx	r3
	currentState = stateGround;
     a3a:	2200      	movs	r2, #0
     a3c:	4b0e      	ldr	r3, [pc, #56]	; (a78 <CHA+0x7c>)
     a3e:	701a      	strb	r2, [r3, #0]
}
     a40:	bc04      	pop	{r2}
     a42:	4690      	mov	r8, r2
     a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     a46:	4b0d      	ldr	r3, [pc, #52]	; (a7c <CHA+0x80>)
     a48:	4798      	blx	r3
     a4a:	1e02      	subs	r2, r0, #0
		if(parameter > 0)
     a4c:	d001      	beq.n	a52 <CHA+0x56>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     a4e:	3801      	subs	r0, #1
     a50:	b2c2      	uxtb	r2, r0
     a52:	1c13      	adds	r3, r2, #0
     a54:	2a4f      	cmp	r2, #79	; 0x4f
     a56:	d900      	bls.n	a5a <CHA+0x5e>
     a58:	234f      	movs	r3, #79	; 0x4f
     a5a:	b2dd      	uxtb	r5, r3
     a5c:	e7d6      	b.n	a0c <CHA+0x10>
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	00000241 	.word	0x00000241
     a64:	200003c0 	.word	0x200003c0
     a68:	200002b8 	.word	0x200002b8
     a6c:	200002ba 	.word	0x200002ba
     a70:	00003285 	.word	0x00003285
     a74:	0000336d 	.word	0x0000336d
     a78:	200002bd 	.word	0x200002bd
     a7c:	00000255 	.word	0x00000255

00000a80 <CUP>:
void CUP() //Cursor Position
{
     a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a82:	46ce      	mov	lr, r9
     a84:	4647      	mov	r7, r8
     a86:	b580      	push	{r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	uint8_t xTemp = 0;
	uint8_t yTemp = 0;
	
	if(isEmptyParam())
     a88:	4b20      	ldr	r3, [pc, #128]	; (b0c <CUP+0x8c>)
     a8a:	4798      	blx	r3
	{
		parameter = 0;
     a8c:	2400      	movs	r4, #0
	if(isEmptyParam())
     a8e:	2800      	cmp	r0, #0
     a90:	d024      	beq.n	adc <CUP+0x5c>
		}
	}
	
	xTemp = parameter;

	if(isEmptyParam())
     a92:	4b1e      	ldr	r3, [pc, #120]	; (b0c <CUP+0x8c>)
     a94:	4798      	blx	r3
	{
		parameter = 0;
     a96:	2600      	movs	r6, #0
	if(isEmptyParam())
     a98:	2800      	cmp	r0, #0
     a9a:	d02b      	beq.n	af4 <CUP+0x74>
		}
	}
	
	yTemp = parameter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a9c:	4d1c      	ldr	r5, [pc, #112]	; (b10 <CUP+0x90>)
     a9e:	4b1d      	ldr	r3, [pc, #116]	; (b14 <CUP+0x94>)
     aa0:	4698      	mov	r8, r3
     aa2:	881a      	ldrh	r2, [r3, #0]
     aa4:	4f1c      	ldr	r7, [pc, #112]	; (b18 <CUP+0x98>)
     aa6:	8839      	ldrh	r1, [r7, #0]
     aa8:	0053      	lsls	r3, r2, #1
     aaa:	189b      	adds	r3, r3, r2
     aac:	00db      	lsls	r3, r3, #3
     aae:	18eb      	adds	r3, r5, r3
     ab0:	5c58      	ldrb	r0, [r3, r1]
     ab2:	4b1a      	ldr	r3, [pc, #104]	; (b1c <CUP+0x9c>)
     ab4:	4699      	mov	r9, r3
     ab6:	4798      	blx	r3
	xCharPos = xTemp;
     ab8:	4643      	mov	r3, r8
     aba:	801c      	strh	r4, [r3, #0]
	yCharPos = yTemp;
     abc:	803e      	strh	r6, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     abe:	0063      	lsls	r3, r4, #1
     ac0:	191c      	adds	r4, r3, r4
     ac2:	00e4      	lsls	r4, r4, #3
     ac4:	192c      	adds	r4, r5, r4
	drawChar(tempCharacter);
     ac6:	5da0      	ldrb	r0, [r4, r6]
     ac8:	47c8      	blx	r9
	
	blinkCursor();
     aca:	4b15      	ldr	r3, [pc, #84]	; (b20 <CUP+0xa0>)
     acc:	4798      	blx	r3
	currentState = stateGround;
     ace:	2200      	movs	r2, #0
     ad0:	4b14      	ldr	r3, [pc, #80]	; (b24 <CUP+0xa4>)
     ad2:	701a      	strb	r2, [r3, #0]
}
     ad4:	bc0c      	pop	{r2, r3}
     ad6:	4690      	mov	r8, r2
     ad8:	4699      	mov	r9, r3
     ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     adc:	4b12      	ldr	r3, [pc, #72]	; (b28 <CUP+0xa8>)
     ade:	4798      	blx	r3
     ae0:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     ae2:	d001      	beq.n	ae8 <CUP+0x68>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     ae4:	3801      	subs	r0, #1
     ae6:	b2c3      	uxtb	r3, r0
     ae8:	1c1c      	adds	r4, r3, #0
     aea:	2b4f      	cmp	r3, #79	; 0x4f
     aec:	d900      	bls.n	af0 <CUP+0x70>
     aee:	244f      	movs	r4, #79	; 0x4f
     af0:	b2e4      	uxtb	r4, r4
     af2:	e7ce      	b.n	a92 <CUP+0x12>
		parameter = dequeueParam();
     af4:	4b0c      	ldr	r3, [pc, #48]	; (b28 <CUP+0xa8>)
     af6:	4798      	blx	r3
     af8:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     afa:	d001      	beq.n	b00 <CUP+0x80>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     afc:	3801      	subs	r0, #1
     afe:	b2c3      	uxtb	r3, r0
     b00:	1c1e      	adds	r6, r3, #0
     b02:	2b17      	cmp	r3, #23
     b04:	d900      	bls.n	b08 <CUP+0x88>
     b06:	2617      	movs	r6, #23
     b08:	b2f6      	uxtb	r6, r6
     b0a:	e7c7      	b.n	a9c <CUP+0x1c>
     b0c:	00000241 	.word	0x00000241
     b10:	200003c0 	.word	0x200003c0
     b14:	200002b8 	.word	0x200002b8
     b18:	200002ba 	.word	0x200002ba
     b1c:	00003285 	.word	0x00003285
     b20:	0000336d 	.word	0x0000336d
     b24:	200002bd 	.word	0x200002bd
     b28:	00000255 	.word	0x00000255

00000b2c <ED>:
{
	//do this later
	currentState = stateGround;
}
void ED() //Edit In Display
{
     b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b2e:	46de      	mov	lr, fp
     b30:	4657      	mov	r7, sl
     b32:	464e      	mov	r6, r9
     b34:	4645      	mov	r5, r8
     b36:	b5e0      	push	{r5, r6, r7, lr}
     b38:	b083      	sub	sp, #12
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     b3a:	4b43      	ldr	r3, [pc, #268]	; (c48 <ED+0x11c>)
     b3c:	881b      	ldrh	r3, [r3, #0]
     b3e:	4698      	mov	r8, r3
	uint8_t yTemp = yCharPos;
     b40:	4b42      	ldr	r3, [pc, #264]	; (c4c <ED+0x120>)
     b42:	881b      	ldrh	r3, [r3, #0]
     b44:	4699      	mov	r9, r3
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     b46:	2200      	movs	r2, #0
     b48:	4b41      	ldr	r3, [pc, #260]	; (c50 <ED+0x124>)
     b4a:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     b4c:	4b41      	ldr	r3, [pc, #260]	; (c54 <ED+0x128>)
     b4e:	4798      	blx	r3
     b50:	2800      	cmp	r0, #0
     b52:	d011      	beq.n	b78 <ED+0x4c>
			{
				xCharPos = i;
				drawChar(0x00);
			}
			//second step, erase previous lines
			for(int j = 0 ; j < yTemp ; j++)
     b54:	2500      	movs	r5, #0
		case 2:			//Erases entire display
			for(int j = 0 ; j < 24 ; j++)
			{
				for(int i = 0 ; i < 80 ; i++)
				{
					xCharPos = i;
     b56:	4b3c      	ldr	r3, [pc, #240]	; (c48 <ED+0x11c>)
     b58:	469a      	mov	sl, r3
					yCharPos = j;
     b5a:	4f3c      	ldr	r7, [pc, #240]	; (c4c <ED+0x120>)
					drawChar(0x00);
     b5c:	4e3e      	ldr	r6, [pc, #248]	; (c58 <ED+0x12c>)
			for(int j = 0 ; j < yTemp ; j++)
     b5e:	2400      	movs	r4, #0
					xCharPos = i;
     b60:	4653      	mov	r3, sl
     b62:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     b64:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     b66:	2000      	movs	r0, #0
     b68:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     b6a:	3401      	adds	r4, #1
     b6c:	2c50      	cmp	r4, #80	; 0x50
     b6e:	d1f7      	bne.n	b60 <ED+0x34>
			for(int j = 0 ; j < 24 ; j++)
     b70:	3501      	adds	r5, #1
     b72:	2d18      	cmp	r5, #24
     b74:	d1f3      	bne.n	b5e <ED+0x32>
     b76:	e04e      	b.n	c16 <ED+0xea>
	uint8_t xTemp = xCharPos;
     b78:	4643      	mov	r3, r8
     b7a:	466a      	mov	r2, sp
     b7c:	71d3      	strb	r3, [r2, #7]
     b7e:	79d4      	ldrb	r4, [r2, #7]
	uint8_t yTemp = yCharPos;
     b80:	464b      	mov	r3, r9
     b82:	71d3      	strb	r3, [r2, #7]
     b84:	79d3      	ldrb	r3, [r2, #7]
     b86:	469a      	mov	sl, r3
		parameter = dequeueParam();
     b88:	4b34      	ldr	r3, [pc, #208]	; (c5c <ED+0x130>)
     b8a:	4798      	blx	r3
	switch(parameter)
     b8c:	2801      	cmp	r0, #1
     b8e:	d004      	beq.n	b9a <ED+0x6e>
     b90:	2800      	cmp	r0, #0
     b92:	d022      	beq.n	bda <ED+0xae>
     b94:	2802      	cmp	r0, #2
     b96:	d13e      	bne.n	c16 <ED+0xea>
     b98:	e7dc      	b.n	b54 <ED+0x28>
			for(int i = 0 ;  i <= xTemp ;  i++)
     b9a:	0025      	movs	r5, r4
     b9c:	2600      	movs	r6, #0
				xCharPos = i;
     b9e:	4c2a      	ldr	r4, [pc, #168]	; (c48 <ED+0x11c>)
				drawChar(0x00);
     ba0:	4f2d      	ldr	r7, [pc, #180]	; (c58 <ED+0x12c>)
				xCharPos = i;
     ba2:	8026      	strh	r6, [r4, #0]
				drawChar(0x00);
     ba4:	2000      	movs	r0, #0
     ba6:	47b8      	blx	r7
			for(int i = 0 ;  i <= xTemp ;  i++)
     ba8:	3601      	adds	r6, #1
     baa:	42ae      	cmp	r6, r5
     bac:	ddf9      	ble.n	ba2 <ED+0x76>
			for(int j = 0 ; j < yTemp ; j++)
     bae:	46d3      	mov	fp, sl
     bb0:	2600      	movs	r6, #0
     bb2:	4653      	mov	r3, sl
     bb4:	2b00      	cmp	r3, #0
     bb6:	dd2e      	ble.n	c16 <ED+0xea>
					xCharPos = i;
     bb8:	4b23      	ldr	r3, [pc, #140]	; (c48 <ED+0x11c>)
     bba:	469a      	mov	sl, r3
					yCharPos = j;
     bbc:	4d23      	ldr	r5, [pc, #140]	; (c4c <ED+0x120>)
					drawChar(0x00);
     bbe:	4f26      	ldr	r7, [pc, #152]	; (c58 <ED+0x12c>)
			for(int i = 0 ;  i <= xTemp ;  i++)
     bc0:	2400      	movs	r4, #0
					xCharPos = i;
     bc2:	4653      	mov	r3, sl
     bc4:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     bc6:	802e      	strh	r6, [r5, #0]
					drawChar(0x00);
     bc8:	2000      	movs	r0, #0
     bca:	47b8      	blx	r7
				for(int i = 0 ; i < 80 ; i++)
     bcc:	3401      	adds	r4, #1
     bce:	2c50      	cmp	r4, #80	; 0x50
     bd0:	d1f7      	bne.n	bc2 <ED+0x96>
			for(int j = 0 ; j < yTemp ; j++)
     bd2:	3601      	adds	r6, #1
     bd4:	455e      	cmp	r6, fp
     bd6:	dbf3      	blt.n	bc0 <ED+0x94>
     bd8:	e01d      	b.n	c16 <ED+0xea>
			for(int i = xTemp ;  i <= 78 ;  i++)
     bda:	2c4e      	cmp	r4, #78	; 0x4e
     bdc:	dc07      	bgt.n	bee <ED+0xc2>
				xCharPos = i;
     bde:	4f1a      	ldr	r7, [pc, #104]	; (c48 <ED+0x11c>)
				drawChar(0x00);
     be0:	4e1d      	ldr	r6, [pc, #116]	; (c58 <ED+0x12c>)
				xCharPos = i;
     be2:	803c      	strh	r4, [r7, #0]
				drawChar(0x00);
     be4:	2000      	movs	r0, #0
     be6:	47b0      	blx	r6
			for(int i = xTemp ;  i <= 78 ;  i++)
     be8:	3401      	adds	r4, #1
     bea:	2c4f      	cmp	r4, #79	; 0x4f
     bec:	d1f9      	bne.n	be2 <ED+0xb6>
			for(int j = yTemp+1 ; j < 24 ; j++)
     bee:	4655      	mov	r5, sl
     bf0:	3501      	adds	r5, #1
     bf2:	2d17      	cmp	r5, #23
     bf4:	dc0f      	bgt.n	c16 <ED+0xea>
					xCharPos = i;
     bf6:	4b14      	ldr	r3, [pc, #80]	; (c48 <ED+0x11c>)
     bf8:	469a      	mov	sl, r3
					yCharPos = j;
     bfa:	4f14      	ldr	r7, [pc, #80]	; (c4c <ED+0x120>)
					drawChar(0x00);
     bfc:	4e16      	ldr	r6, [pc, #88]	; (c58 <ED+0x12c>)
{
     bfe:	2400      	movs	r4, #0
					xCharPos = i;
     c00:	4653      	mov	r3, sl
     c02:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     c04:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     c06:	2000      	movs	r0, #0
     c08:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     c0a:	3401      	adds	r4, #1
     c0c:	2c50      	cmp	r4, #80	; 0x50
     c0e:	d1f7      	bne.n	c00 <ED+0xd4>
			for(int j = yTemp+1 ; j < 24 ; j++)
     c10:	3501      	adds	r5, #1
     c12:	2d18      	cmp	r5, #24
     c14:	d1f3      	bne.n	bfe <ED+0xd2>
				}
			}
		break;
	}
	
	blinkCursor();
     c16:	4b12      	ldr	r3, [pc, #72]	; (c60 <ED+0x134>)
     c18:	4798      	blx	r3
	xCharPos = xTemp;
     c1a:	23ff      	movs	r3, #255	; 0xff
     c1c:	4642      	mov	r2, r8
     c1e:	401a      	ands	r2, r3
     c20:	4909      	ldr	r1, [pc, #36]	; (c48 <ED+0x11c>)
     c22:	800a      	strh	r2, [r1, #0]
	yCharPos = yTemp;
     c24:	464a      	mov	r2, r9
     c26:	4013      	ands	r3, r2
     c28:	4a08      	ldr	r2, [pc, #32]	; (c4c <ED+0x120>)
     c2a:	8013      	strh	r3, [r2, #0]
	drawChar(0x00);
     c2c:	2000      	movs	r0, #0
     c2e:	4b0a      	ldr	r3, [pc, #40]	; (c58 <ED+0x12c>)
     c30:	4798      	blx	r3
	
	currentState = stateGround;	
     c32:	2200      	movs	r2, #0
     c34:	4b0b      	ldr	r3, [pc, #44]	; (c64 <ED+0x138>)
     c36:	701a      	strb	r2, [r3, #0]


}
     c38:	b003      	add	sp, #12
     c3a:	bc3c      	pop	{r2, r3, r4, r5}
     c3c:	4690      	mov	r8, r2
     c3e:	4699      	mov	r9, r3
     c40:	46a2      	mov	sl, r4
     c42:	46ab      	mov	fp, r5
     c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	200002b8 	.word	0x200002b8
     c4c:	200002ba 	.word	0x200002ba
     c50:	20000024 	.word	0x20000024
     c54:	00000241 	.word	0x00000241
     c58:	00003285 	.word	0x00003285
     c5c:	00000255 	.word	0x00000255
     c60:	0000336d 	.word	0x0000336d
     c64:	200002bd 	.word	0x200002bd

00000c68 <EL>:
void EL() //Edit In Line
{
     c68:	b5f0      	push	{r4, r5, r6, r7, lr}
     c6a:	46d6      	mov	lr, sl
     c6c:	464f      	mov	r7, r9
     c6e:	4646      	mov	r6, r8
     c70:	b5c0      	push	{r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     c72:	4b31      	ldr	r3, [pc, #196]	; (d38 <EL+0xd0>)
     c74:	881f      	ldrh	r7, [r3, #0]
     c76:	b2fc      	uxtb	r4, r7
	uint8_t yTemp = yCharPos;
     c78:	4b30      	ldr	r3, [pc, #192]	; (d3c <EL+0xd4>)
     c7a:	881b      	ldrh	r3, [r3, #0]
     c7c:	4698      	mov	r8, r3
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     c7e:	2200      	movs	r2, #0
     c80:	4b2f      	ldr	r3, [pc, #188]	; (d40 <EL+0xd8>)
     c82:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     c84:	4b2f      	ldr	r3, [pc, #188]	; (d44 <EL+0xdc>)
     c86:	4798      	blx	r3
     c88:	2800      	cmp	r0, #0
     c8a:	d015      	beq.n	cb8 <EL+0x50>
	else
	{
		parameter = dequeueParam();
	}
	
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     c8c:	4b2a      	ldr	r3, [pc, #168]	; (d38 <EL+0xd0>)
     c8e:	881a      	ldrh	r2, [r3, #0]
     c90:	4b2a      	ldr	r3, [pc, #168]	; (d3c <EL+0xd4>)
     c92:	8819      	ldrh	r1, [r3, #0]
     c94:	0053      	lsls	r3, r2, #1
     c96:	189b      	adds	r3, r3, r2
     c98:	00db      	lsls	r3, r3, #3
     c9a:	4a2b      	ldr	r2, [pc, #172]	; (d48 <EL+0xe0>)
     c9c:	18d3      	adds	r3, r2, r3
     c9e:	5c5b      	ldrb	r3, [r3, r1]
     ca0:	4699      	mov	r9, r3
	
	switch(parameter)
	{
		case 0:			//Erases from cursor to end of line
			for(int i = xTemp ;  i <= 79 ;  i++)
     ca2:	2c4f      	cmp	r4, #79	; 0x4f
     ca4:	dc24      	bgt.n	cf0 <EL+0x88>
			{
				xCharPos = i;
     ca6:	4e24      	ldr	r6, [pc, #144]	; (d38 <EL+0xd0>)
				drawChar(0x00);
     ca8:	4d28      	ldr	r5, [pc, #160]	; (d4c <EL+0xe4>)
				xCharPos = i;
     caa:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     cac:	2000      	movs	r0, #0
     cae:	47a8      	blx	r5
			for(int i = xTemp ;  i <= 79 ;  i++)
     cb0:	3401      	adds	r4, #1
     cb2:	2c50      	cmp	r4, #80	; 0x50
     cb4:	d1f9      	bne.n	caa <EL+0x42>
     cb6:	e01b      	b.n	cf0 <EL+0x88>
		parameter = dequeueParam();
     cb8:	4b25      	ldr	r3, [pc, #148]	; (d50 <EL+0xe8>)
     cba:	4798      	blx	r3
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     cbc:	4b1e      	ldr	r3, [pc, #120]	; (d38 <EL+0xd0>)
     cbe:	881a      	ldrh	r2, [r3, #0]
     cc0:	4b1e      	ldr	r3, [pc, #120]	; (d3c <EL+0xd4>)
     cc2:	8819      	ldrh	r1, [r3, #0]
     cc4:	0053      	lsls	r3, r2, #1
     cc6:	189b      	adds	r3, r3, r2
     cc8:	00db      	lsls	r3, r3, #3
     cca:	4a1f      	ldr	r2, [pc, #124]	; (d48 <EL+0xe0>)
     ccc:	18d3      	adds	r3, r2, r3
     cce:	5c5b      	ldrb	r3, [r3, r1]
     cd0:	4699      	mov	r9, r3
	switch(parameter)
     cd2:	2801      	cmp	r0, #1
     cd4:	d021      	beq.n	d1a <EL+0xb2>
     cd6:	2800      	cmp	r0, #0
     cd8:	d0e3      	beq.n	ca2 <EL+0x3a>
     cda:	2802      	cmp	r0, #2
     cdc:	d108      	bne.n	cf0 <EL+0x88>
     cde:	2400      	movs	r4, #0
		break;
		
		case 2:			//Erases entire line containing cursor
			for(int i = 0 ;  i <= 78 ;  i++)
			{
				xCharPos = i;
     ce0:	4e15      	ldr	r6, [pc, #84]	; (d38 <EL+0xd0>)
				drawChar(0x00);
     ce2:	4d1a      	ldr	r5, [pc, #104]	; (d4c <EL+0xe4>)
				xCharPos = i;
     ce4:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     ce6:	2000      	movs	r0, #0
     ce8:	47a8      	blx	r5
			for(int i = 0 ;  i <= 78 ;  i++)
     cea:	3401      	adds	r4, #1
     cec:	2c4f      	cmp	r4, #79	; 0x4f
     cee:	d1f9      	bne.n	ce4 <EL+0x7c>
			}
		break;
	}
	
	blinkCursor();
     cf0:	4b18      	ldr	r3, [pc, #96]	; (d54 <EL+0xec>)
     cf2:	4798      	blx	r3
	xCharPos = xTemp;
     cf4:	23ff      	movs	r3, #255	; 0xff
     cf6:	401f      	ands	r7, r3
     cf8:	4a0f      	ldr	r2, [pc, #60]	; (d38 <EL+0xd0>)
     cfa:	8017      	strh	r7, [r2, #0]
	yCharPos = yTemp;
     cfc:	4642      	mov	r2, r8
     cfe:	4013      	ands	r3, r2
     d00:	4a0e      	ldr	r2, [pc, #56]	; (d3c <EL+0xd4>)
     d02:	8013      	strh	r3, [r2, #0]
	drawChar(tempCharacter);
     d04:	4648      	mov	r0, r9
     d06:	4b11      	ldr	r3, [pc, #68]	; (d4c <EL+0xe4>)
     d08:	4798      	blx	r3
	
	currentState = stateGround;	
     d0a:	2200      	movs	r2, #0
     d0c:	4b12      	ldr	r3, [pc, #72]	; (d58 <EL+0xf0>)
     d0e:	701a      	strb	r2, [r3, #0]
}
     d10:	bc1c      	pop	{r2, r3, r4}
     d12:	4690      	mov	r8, r2
     d14:	4699      	mov	r9, r3
     d16:	46a2      	mov	sl, r4
     d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     d1a:	3401      	adds	r4, #1
     d1c:	2500      	movs	r5, #0
     d1e:	2c00      	cmp	r4, #0
     d20:	dbe6      	blt.n	cf0 <EL+0x88>
				xCharPos = i;
     d22:	4b05      	ldr	r3, [pc, #20]	; (d38 <EL+0xd0>)
     d24:	469a      	mov	sl, r3
				drawChar(0x00);
     d26:	4e09      	ldr	r6, [pc, #36]	; (d4c <EL+0xe4>)
				xCharPos = i;
     d28:	4653      	mov	r3, sl
     d2a:	801d      	strh	r5, [r3, #0]
				drawChar(0x00);
     d2c:	2000      	movs	r0, #0
     d2e:	47b0      	blx	r6
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     d30:	3501      	adds	r5, #1
     d32:	42a5      	cmp	r5, r4
     d34:	ddf8      	ble.n	d28 <EL+0xc0>
     d36:	e7db      	b.n	cf0 <EL+0x88>
     d38:	200002b8 	.word	0x200002b8
     d3c:	200002ba 	.word	0x200002ba
     d40:	20000024 	.word	0x20000024
     d44:	00000241 	.word	0x00000241
     d48:	200003c0 	.word	0x200003c0
     d4c:	00003285 	.word	0x00003285
     d50:	00000255 	.word	0x00000255
     d54:	0000336d 	.word	0x0000336d
     d58:	200002bd 	.word	0x200002bd

00000d5c <DSR>:
void ICH(void) //Insert indicated # of blank chars
{
	currentState = stateGround;
}
void DSR(void)
{
     d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d5e:	46ce      	mov	lr, r9
     d60:	4647      	mov	r7, r8
     d62:	b580      	push	{r7, lr}
     d64:	b087      	sub	sp, #28
	
	This function will support both ANSI and DEC formats
	*/
	unsigned char tempCharacter;
		
	uint8_t xTemp = xCharPos;
     d66:	4b36      	ldr	r3, [pc, #216]	; (e40 <DSR+0xe4>)
     d68:	881d      	ldrh	r5, [r3, #0]
	uint8_t yTemp = yCharPos;
     d6a:	4b36      	ldr	r3, [pc, #216]	; (e44 <DSR+0xe8>)
     d6c:	881e      	ldrh	r6, [r3, #0]
	
	char DSROSResponse[] = {0x1b, 0x5b, 0x30, 0x6e};
     d6e:	4b36      	ldr	r3, [pc, #216]	; (e48 <DSR+0xec>)
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	9305      	str	r3, [sp, #20]
	
	char stringResponse[10];
	char tempbuffer[5];
		
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     d74:	2200      	movs	r2, #0
     d76:	4b35      	ldr	r3, [pc, #212]	; (e4c <DSR+0xf0>)
     d78:	701a      	strb	r2, [r3, #0]
		
	tempCharacter = dequeueParser();
     d7a:	4b35      	ldr	r3, [pc, #212]	; (e50 <DSR+0xf4>)
     d7c:	4798      	blx	r3
     d7e:	0004      	movs	r4, r0
	
	if(!isEmptyParam()) //We are in DEC format
     d80:	4b34      	ldr	r3, [pc, #208]	; (e54 <DSR+0xf8>)
     d82:	4798      	blx	r3
     d84:	2800      	cmp	r0, #0
     d86:	d018      	beq.n	dba <DSR+0x5e>
	{
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
	}
	
	switch(tempCharacter){
     d88:	2c05      	cmp	r4, #5
     d8a:	d01a      	beq.n	dc2 <DSR+0x66>
     d8c:	2c06      	cmp	r4, #6
     d8e:	d01d      	beq.n	dcc <DSR+0x70>
		
			printf("%s",stringResponse);
		break;
	}
	
	stringResponse[0] = '\0';
     d90:	2400      	movs	r4, #0
     d92:	ab02      	add	r3, sp, #8
     d94:	701c      	strb	r4, [r3, #0]
	tempbuffer[0] = '\0';
     d96:	466b      	mov	r3, sp
     d98:	701c      	strb	r4, [r3, #0]
		
	blinkCursor();
     d9a:	4b2f      	ldr	r3, [pc, #188]	; (e58 <DSR+0xfc>)
     d9c:	4798      	blx	r3
	xCharPos = xTemp;
     d9e:	23ff      	movs	r3, #255	; 0xff
     da0:	401d      	ands	r5, r3
     da2:	4a27      	ldr	r2, [pc, #156]	; (e40 <DSR+0xe4>)
     da4:	8015      	strh	r5, [r2, #0]
	yCharPos = yTemp;
     da6:	4033      	ands	r3, r6
     da8:	4a26      	ldr	r2, [pc, #152]	; (e44 <DSR+0xe8>)
     daa:	8013      	strh	r3, [r2, #0]
	currentState = stateGround;
     dac:	4b2b      	ldr	r3, [pc, #172]	; (e5c <DSR+0x100>)
     dae:	701c      	strb	r4, [r3, #0]
}
     db0:	b007      	add	sp, #28
     db2:	bc0c      	pop	{r2, r3}
     db4:	4690      	mov	r8, r2
     db6:	4699      	mov	r9, r3
     db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
     dba:	4b29      	ldr	r3, [pc, #164]	; (e60 <DSR+0x104>)
     dbc:	4798      	blx	r3
     dbe:	0004      	movs	r4, r0
     dc0:	e7e2      	b.n	d88 <DSR+0x2c>
			printf("%s",DSROSResponse);
     dc2:	a905      	add	r1, sp, #20
     dc4:	4827      	ldr	r0, [pc, #156]	; (e64 <DSR+0x108>)
     dc6:	4b28      	ldr	r3, [pc, #160]	; (e68 <DSR+0x10c>)
     dc8:	4798      	blx	r3
		break;
     dca:	e7e1      	b.n	d90 <DSR+0x34>
			strcat(stringResponse,"\x1B");
     dcc:	a802      	add	r0, sp, #8
     dce:	4f27      	ldr	r7, [pc, #156]	; (e6c <DSR+0x110>)
     dd0:	47b8      	blx	r7
     dd2:	ab02      	add	r3, sp, #8
     dd4:	469c      	mov	ip, r3
     dd6:	4460      	add	r0, ip
     dd8:	2202      	movs	r2, #2
     dda:	4925      	ldr	r1, [pc, #148]	; (e70 <DSR+0x114>)
     ddc:	4c25      	ldr	r4, [pc, #148]	; (e74 <DSR+0x118>)
     dde:	47a0      	blx	r4
			strcat(stringResponse,"\x5B");
     de0:	a802      	add	r0, sp, #8
     de2:	47b8      	blx	r7
     de4:	ab02      	add	r3, sp, #8
     de6:	469c      	mov	ip, r3
     de8:	4460      	add	r0, ip
     dea:	2202      	movs	r2, #2
     dec:	4922      	ldr	r1, [pc, #136]	; (e78 <DSR+0x11c>)
     dee:	47a0      	blx	r4
			strcat(stringResponse,itoa(yTemp,tempbuffer,10));
     df0:	b2f0      	uxtb	r0, r6
     df2:	220a      	movs	r2, #10
     df4:	4669      	mov	r1, sp
     df6:	4b21      	ldr	r3, [pc, #132]	; (e7c <DSR+0x120>)
     df8:	4699      	mov	r9, r3
     dfa:	4798      	blx	r3
     dfc:	0001      	movs	r1, r0
     dfe:	a802      	add	r0, sp, #8
     e00:	4b1f      	ldr	r3, [pc, #124]	; (e80 <DSR+0x124>)
     e02:	4698      	mov	r8, r3
     e04:	4798      	blx	r3
			strcat(stringResponse,";");
     e06:	a802      	add	r0, sp, #8
     e08:	47b8      	blx	r7
     e0a:	ab02      	add	r3, sp, #8
     e0c:	469c      	mov	ip, r3
     e0e:	4460      	add	r0, ip
     e10:	2202      	movs	r2, #2
     e12:	491c      	ldr	r1, [pc, #112]	; (e84 <DSR+0x128>)
     e14:	47a0      	blx	r4
			strcat(stringResponse,itoa(xTemp,tempbuffer,10));
     e16:	b2e8      	uxtb	r0, r5
     e18:	220a      	movs	r2, #10
     e1a:	4669      	mov	r1, sp
     e1c:	47c8      	blx	r9
     e1e:	0001      	movs	r1, r0
     e20:	a802      	add	r0, sp, #8
     e22:	47c0      	blx	r8
			strcat(stringResponse,"R");
     e24:	a802      	add	r0, sp, #8
     e26:	47b8      	blx	r7
     e28:	ab02      	add	r3, sp, #8
     e2a:	469c      	mov	ip, r3
     e2c:	4460      	add	r0, ip
     e2e:	2202      	movs	r2, #2
     e30:	4915      	ldr	r1, [pc, #84]	; (e88 <DSR+0x12c>)
     e32:	47a0      	blx	r4
			printf("%s",stringResponse);
     e34:	a902      	add	r1, sp, #8
     e36:	480b      	ldr	r0, [pc, #44]	; (e64 <DSR+0x108>)
     e38:	4b0b      	ldr	r3, [pc, #44]	; (e68 <DSR+0x10c>)
     e3a:	4798      	blx	r3
		break;
     e3c:	e7a8      	b.n	d90 <DSR+0x34>
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	200002b8 	.word	0x200002b8
     e44:	200002ba 	.word	0x200002ba
     e48:	00005b14 	.word	0x00005b14
     e4c:	20000024 	.word	0x20000024
     e50:	000001e5 	.word	0x000001e5
     e54:	00000241 	.word	0x00000241
     e58:	0000336d 	.word	0x0000336d
     e5c:	200002bd 	.word	0x200002bd
     e60:	00000255 	.word	0x00000255
     e64:	00005c8c 	.word	0x00005c8c
     e68:	00004a79 	.word	0x00004a79
     e6c:	00004d53 	.word	0x00004d53
     e70:	00005c60 	.word	0x00005c60
     e74:	00004905 	.word	0x00004905
     e78:	00005c64 	.word	0x00005c64
     e7c:	000048e9 	.word	0x000048e9
     e80:	00004d39 	.word	0x00004d39
     e84:	00005f78 	.word	0x00005f78
     e88:	00005c68 	.word	0x00005c68

00000e8c <isValidCSIEscapeCode>:
bool isValidCSIEscapeCode(uint8_t character)
{
	
	for(uint8_t i = 0; i <= sizeof(csiEscCodes)/sizeof(csiEscCodes[0]) ; i++)
	{
		if(character == csiEscCodes[i])
     e8c:	2840      	cmp	r0, #64	; 0x40
     e8e:	d006      	beq.n	e9e <isValidCSIEscapeCode+0x12>
     e90:	4b04      	ldr	r3, [pc, #16]	; (ea4 <isValidCSIEscapeCode+0x18>)
     e92:	3301      	adds	r3, #1
     e94:	3301      	adds	r3, #1
     e96:	1e5a      	subs	r2, r3, #1
     e98:	7812      	ldrb	r2, [r2, #0]
     e9a:	4282      	cmp	r2, r0
     e9c:	d1fa      	bne.n	e94 <isValidCSIEscapeCode+0x8>
		{
			return true;	
		}
	}
	return false;
}
     e9e:	2001      	movs	r0, #1
     ea0:	4770      	bx	lr
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	00005c6c 	.word	0x00005c6c

00000ea8 <CSIparamState>:
{
     ea8:	b510      	push	{r4, lr}
     eaa:	0004      	movs	r4, r0
	if(character >= 0x30 && character <= 0x39)		//character is a digit, put it in the buffer
     eac:	0003      	movs	r3, r0
     eae:	3b30      	subs	r3, #48	; 0x30
     eb0:	2b09      	cmp	r3, #9
     eb2:	d90b      	bls.n	ecc <CSIparamState+0x24>
	else if(character == 0x3B)					//character is ';', now we take items out of 
     eb4:	283b      	cmp	r0, #59	; 0x3b
     eb6:	d00c      	beq.n	ed2 <CSIparamState+0x2a>
	else if(character == 0x3F)					//character is '?', this is used for DECCKM
     eb8:	283f      	cmp	r0, #63	; 0x3f
     eba:	d00e      	beq.n	eda <CSIparamState+0x32>
	else if(isValidCSIEscapeCode(character))		//character matches a supported escape code
     ebc:	4b0d      	ldr	r3, [pc, #52]	; (ef4 <CSIparamState+0x4c>)
     ebe:	4798      	blx	r3
     ec0:	2800      	cmp	r0, #0
     ec2:	d10e      	bne.n	ee2 <CSIparamState+0x3a>
		currentState = stateCSIignore;
     ec4:	2205      	movs	r2, #5
     ec6:	4b0c      	ldr	r3, [pc, #48]	; (ef8 <CSIparamState+0x50>)
     ec8:	701a      	strb	r2, [r3, #0]
}
     eca:	bd10      	pop	{r4, pc}
		enqueueParser(character);
     ecc:	4b0b      	ldr	r3, [pc, #44]	; (efc <CSIparamState+0x54>)
     ece:	4798      	blx	r3
     ed0:	e7fb      	b.n	eca <CSIparamState+0x22>
		enqueueParser(';');						//parambuffer 			
     ed2:	203b      	movs	r0, #59	; 0x3b
     ed4:	4b09      	ldr	r3, [pc, #36]	; (efc <CSIparamState+0x54>)
     ed6:	4798      	blx	r3
     ed8:	e7f7      	b.n	eca <CSIparamState+0x22>
		enqueueParser('?');						//the terminating character
     eda:	203f      	movs	r0, #63	; 0x3f
     edc:	4b07      	ldr	r3, [pc, #28]	; (efc <CSIparamState+0x54>)
     ede:	4798      	blx	r3
     ee0:	e7f3      	b.n	eca <CSIparamState+0x22>
		queueTransmogrifier();											
     ee2:	4b07      	ldr	r3, [pc, #28]	; (f00 <CSIparamState+0x58>)
     ee4:	4798      	blx	r3
		currentState = stateCSIentry;
     ee6:	2203      	movs	r2, #3
     ee8:	4b03      	ldr	r3, [pc, #12]	; (ef8 <CSIparamState+0x50>)
     eea:	701a      	strb	r2, [r3, #0]
		CSIentryState(character);
     eec:	0020      	movs	r0, r4
     eee:	4b05      	ldr	r3, [pc, #20]	; (f04 <CSIparamState+0x5c>)
     ef0:	4798      	blx	r3
     ef2:	e7ea      	b.n	eca <CSIparamState+0x22>
     ef4:	00000e8d 	.word	0x00000e8d
     ef8:	200002bd 	.word	0x200002bd
     efc:	00000215 	.word	0x00000215
     f00:	00000309 	.word	0x00000309
     f04:	00000f09 	.word	0x00000f09

00000f08 <CSIentryState>:
{
     f08:	b510      	push	{r4, lr}
	if(character == 0x40)		//ESC [ @ ICH insert indicated # of blank chars
     f0a:	2840      	cmp	r0, #64	; 0x40
     f0c:	d076      	beq.n	ffc <CSIentryState+0xf4>
	else if(character == 0x41)	//ESC [ A	Cursor Up
     f0e:	2841      	cmp	r0, #65	; 0x41
     f10:	d100      	bne.n	f14 <CSIentryState+0xc>
     f12:	e077      	b.n	1004 <CSIentryState+0xfc>
	else if(character == 0x61)	//ESC [ a HPR
     f14:	2861      	cmp	r0, #97	; 0x61
     f16:	d100      	bne.n	f1a <CSIentryState+0x12>
     f18:	e077      	b.n	100a <CSIentryState+0x102>
	else if(character == 0x42)	//ESC [ B	Cursor Down
     f1a:	2842      	cmp	r0, #66	; 0x42
     f1c:	d100      	bne.n	f20 <CSIentryState+0x18>
     f1e:	e077      	b.n	1010 <CSIentryState+0x108>
	else if(character == 0x43)	//ESC [ C	Cursor Forward
     f20:	2843      	cmp	r0, #67	; 0x43
     f22:	d100      	bne.n	f26 <CSIentryState+0x1e>
     f24:	e077      	b.n	1016 <CSIentryState+0x10e>
	else if(character == 0x63)	//ESC [ c DA
     f26:	2863      	cmp	r0, #99	; 0x63
     f28:	d100      	bne.n	f2c <CSIentryState+0x24>
     f2a:	e077      	b.n	101c <CSIentryState+0x114>
	else if(character == 0x44)	//ESC [ D	Cursor Backward
     f2c:	2844      	cmp	r0, #68	; 0x44
     f2e:	d100      	bne.n	f32 <CSIentryState+0x2a>
     f30:	e07c      	b.n	102c <CSIentryState+0x124>
	else if(character == 0x64)	//ESC [ d	VPA
     f32:	2864      	cmp	r0, #100	; 0x64
     f34:	d065      	beq.n	1002 <CSIentryState+0xfa>
	else if(character == 0x45)	//ESC [ E	Cursor Next Line
     f36:	2845      	cmp	r0, #69	; 0x45
     f38:	d100      	bne.n	f3c <CSIentryState+0x34>
     f3a:	e07a      	b.n	1032 <CSIentryState+0x12a>
	else if(character == 0x65)	//ESC [ e VPR
     f3c:	2865      	cmp	r0, #101	; 0x65
     f3e:	d100      	bne.n	f42 <CSIentryState+0x3a>
     f40:	e07a      	b.n	1038 <CSIentryState+0x130>
	else if(character == 0x46)	//ESC [ F	Cursor Preceding Line
     f42:	2846      	cmp	r0, #70	; 0x46
     f44:	d100      	bne.n	f48 <CSIentryState+0x40>
     f46:	e07a      	b.n	103e <CSIentryState+0x136>
	else if(character == 0x66)	//ESC [ f HVP
     f48:	2866      	cmp	r0, #102	; 0x66
     f4a:	d100      	bne.n	f4e <CSIentryState+0x46>
     f4c:	e07a      	b.n	1044 <CSIentryState+0x13c>
	else if(character == 0x47)	//ESC [ G	Cursor Horizontal Absolute
     f4e:	2847      	cmp	r0, #71	; 0x47
     f50:	d100      	bne.n	f54 <CSIentryState+0x4c>
     f52:	e07a      	b.n	104a <CSIentryState+0x142>
	else if(character == 0x67)	//ESC [ g TBC
     f54:	2867      	cmp	r0, #103	; 0x67
     f56:	d100      	bne.n	f5a <CSIentryState+0x52>
     f58:	e07a      	b.n	1050 <CSIentryState+0x148>
	else if(character == 0x48)	//ESC [ H	Cursor Position
     f5a:	2848      	cmp	r0, #72	; 0x48
     f5c:	d100      	bne.n	f60 <CSIentryState+0x58>
     f5e:	e07b      	b.n	1058 <CSIentryState+0x150>
	else if(character == 0x68)	//ESC [ h Set Mode
     f60:	2868      	cmp	r0, #104	; 0x68
     f62:	d100      	bne.n	f66 <CSIentryState+0x5e>
     f64:	e07b      	b.n	105e <CSIentryState+0x156>
	else if(character == 0x49)	//ESC [ I	Cursor Horizontal Tab
     f66:	2849      	cmp	r0, #73	; 0x49
     f68:	d100      	bne.n	f6c <CSIentryState+0x64>
     f6a:	e07c      	b.n	1066 <CSIentryState+0x15e>
	else if(character == 0x4A)	//ESC [ J	Erase In Display
     f6c:	284a      	cmp	r0, #74	; 0x4a
     f6e:	d100      	bne.n	f72 <CSIentryState+0x6a>
     f70:	e07d      	b.n	106e <CSIentryState+0x166>
	else if(character == 0x4B)	//ESC [ K	Erase In Line
     f72:	284b      	cmp	r0, #75	; 0x4b
     f74:	d100      	bne.n	f78 <CSIentryState+0x70>
     f76:	e07d      	b.n	1074 <CSIentryState+0x16c>
	else if(character == 0x4C)	//ESC [ L 
     f78:	284c      	cmp	r0, #76	; 0x4c
     f7a:	d100      	bne.n	f7e <CSIentryState+0x76>
     f7c:	e07d      	b.n	107a <CSIentryState+0x172>
	else if(character == 0x6C)	//ESC [ l	Reset mode
     f7e:	286c      	cmp	r0, #108	; 0x6c
     f80:	d100      	bne.n	f84 <CSIentryState+0x7c>
     f82:	e07e      	b.n	1082 <CSIentryState+0x17a>
	else if(character == 0x4D)	//ESC [ M
     f84:	284d      	cmp	r0, #77	; 0x4d
     f86:	d100      	bne.n	f8a <CSIentryState+0x82>
     f88:	e07f      	b.n	108a <CSIentryState+0x182>
	else if(character == 0x6D)	//ESC [ m	Select Graphic Rendition
     f8a:	286d      	cmp	r0, #109	; 0x6d
     f8c:	d100      	bne.n	f90 <CSIentryState+0x88>
     f8e:	e080      	b.n	1092 <CSIentryState+0x18a>
	else if(character == 0x6E)	//ESC [ n Device Status Report
     f90:	286e      	cmp	r0, #110	; 0x6e
     f92:	d100      	bne.n	f96 <CSIentryState+0x8e>
     f94:	e081      	b.n	109a <CSIentryState+0x192>
	else if(character == 0x50)	//ESC [ P	Delete Character
     f96:	2850      	cmp	r0, #80	; 0x50
     f98:	d100      	bne.n	f9c <CSIentryState+0x94>
     f9a:	e081      	b.n	10a0 <CSIentryState+0x198>
	else if(character == 0x51)	//ESC [ Q	Select Edit Extent Mode
     f9c:	2851      	cmp	r0, #81	; 0x51
     f9e:	d100      	bne.n	fa2 <CSIentryState+0x9a>
     fa0:	e082      	b.n	10a8 <CSIentryState+0x1a0>
	else if(character == 0x71)	//ESC [ q	Set Keyboard LEDs
     fa2:	2871      	cmp	r0, #113	; 0x71
     fa4:	d100      	bne.n	fa8 <CSIentryState+0xa0>
     fa6:	e083      	b.n	10b0 <CSIentryState+0x1a8>
	else if(character == 0x72)	//ESC [ r	DECSTBM
     fa8:	2872      	cmp	r0, #114	; 0x72
     faa:	d100      	bne.n	fae <CSIentryState+0xa6>
     fac:	e084      	b.n	10b8 <CSIentryState+0x1b0>
	else if(character == 0x73)	//ESC [ s	Save Cursor Position
     fae:	2873      	cmp	r0, #115	; 0x73
     fb0:	d100      	bne.n	fb4 <CSIentryState+0xac>
     fb2:	e085      	b.n	10c0 <CSIentryState+0x1b8>
	else if(character == 0x75)	//ESC [ u	Restore Cursor Position
     fb4:	2875      	cmp	r0, #117	; 0x75
     fb6:	d100      	bne.n	fba <CSIentryState+0xb2>
     fb8:	e085      	b.n	10c6 <CSIentryState+0x1be>
	else if(character == 0x58)	//ESC [ X
     fba:	2858      	cmp	r0, #88	; 0x58
     fbc:	d100      	bne.n	fc0 <CSIentryState+0xb8>
     fbe:	e085      	b.n	10cc <CSIentryState+0x1c4>
	else if(character == 0x57)	//ESC [ W	Cursor Tabulation Control
     fc0:	2857      	cmp	r0, #87	; 0x57
     fc2:	d100      	bne.n	fc6 <CSIentryState+0xbe>
     fc4:	e086      	b.n	10d4 <CSIentryState+0x1cc>
	else if(character == 0x5A)	//ESC [ Z	Cursor Backwards Tab
     fc6:	285a      	cmp	r0, #90	; 0x5a
     fc8:	d100      	bne.n	fcc <CSIentryState+0xc4>
     fca:	e087      	b.n	10dc <CSIentryState+0x1d4>
	else if(character == 0x60)	//ESC [ ` HPA
     fcc:	2860      	cmp	r0, #96	; 0x60
     fce:	d100      	bne.n	fd2 <CSIentryState+0xca>
     fd0:	e088      	b.n	10e4 <CSIentryState+0x1dc>
	else if(character >= 0x30 && character <= 0x39) // if the character is a digit 0-9
     fd2:	0003      	movs	r3, r0
     fd4:	3b30      	subs	r3, #48	; 0x30
     fd6:	2b09      	cmp	r3, #9
     fd8:	d800      	bhi.n	fdc <CSIentryState+0xd4>
     fda:	e087      	b.n	10ec <CSIentryState+0x1e4>
	else if(character == 0x3B)	//Semicolon ; parameter deliminator
     fdc:	283b      	cmp	r0, #59	; 0x3b
     fde:	d100      	bne.n	fe2 <CSIentryState+0xda>
     fe0:	e08a      	b.n	10f8 <CSIentryState+0x1f0>
	else if(character == 0x3F)	//Question '?'; this is a param
     fe2:	283f      	cmp	r0, #63	; 0x3f
     fe4:	d100      	bne.n	fe8 <CSIentryState+0xe0>
     fe6:	e08d      	b.n	1104 <CSIentryState+0x1fc>
	else if(character == 0x1B)		//ESC, send back to stateESC
     fe8:	281b      	cmp	r0, #27
     fea:	d100      	bne.n	fee <CSIentryState+0xe6>
     fec:	e090      	b.n	1110 <CSIentryState+0x208>
	else if(character == 0x3A)
     fee:	283a      	cmp	r0, #58	; 0x3a
     ff0:	d100      	bne.n	ff4 <CSIentryState+0xec>
     ff2:	e091      	b.n	1118 <CSIentryState+0x210>
		currentState = stateGround;
     ff4:	2200      	movs	r2, #0
     ff6:	4b4a      	ldr	r3, [pc, #296]	; (1120 <CSIentryState+0x218>)
     ff8:	701a      	strb	r2, [r3, #0]
}
     ffa:	e002      	b.n	1002 <CSIentryState+0xfa>
	currentState = stateGround;
     ffc:	2200      	movs	r2, #0
     ffe:	4b48      	ldr	r3, [pc, #288]	; (1120 <CSIentryState+0x218>)
    1000:	701a      	strb	r2, [r3, #0]
}
    1002:	bd10      	pop	{r4, pc}
		CUU();
    1004:	4b47      	ldr	r3, [pc, #284]	; (1124 <CSIentryState+0x21c>)
    1006:	4798      	blx	r3
    1008:	e7fb      	b.n	1002 <CSIentryState+0xfa>
		CUF();
    100a:	4b47      	ldr	r3, [pc, #284]	; (1128 <CSIentryState+0x220>)
    100c:	4798      	blx	r3
    100e:	e7f8      	b.n	1002 <CSIentryState+0xfa>
		CUD();
    1010:	4b46      	ldr	r3, [pc, #280]	; (112c <CSIentryState+0x224>)
    1012:	4798      	blx	r3
    1014:	e7f5      	b.n	1002 <CSIentryState+0xfa>
		CUF();
    1016:	4b44      	ldr	r3, [pc, #272]	; (1128 <CSIentryState+0x220>)
    1018:	4798      	blx	r3
    101a:	e7f2      	b.n	1002 <CSIentryState+0xfa>
		printf("%s",DECIDreturn);
    101c:	4944      	ldr	r1, [pc, #272]	; (1130 <CSIentryState+0x228>)
    101e:	4845      	ldr	r0, [pc, #276]	; (1134 <CSIentryState+0x22c>)
    1020:	4b45      	ldr	r3, [pc, #276]	; (1138 <CSIentryState+0x230>)
    1022:	4798      	blx	r3
		currentState = stateGround;
    1024:	2200      	movs	r2, #0
    1026:	4b3e      	ldr	r3, [pc, #248]	; (1120 <CSIentryState+0x218>)
    1028:	701a      	strb	r2, [r3, #0]
    102a:	e7ea      	b.n	1002 <CSIentryState+0xfa>
		CUB();
    102c:	4b43      	ldr	r3, [pc, #268]	; (113c <CSIentryState+0x234>)
    102e:	4798      	blx	r3
    1030:	e7e7      	b.n	1002 <CSIentryState+0xfa>
		CNL();
    1032:	4b43      	ldr	r3, [pc, #268]	; (1140 <CSIentryState+0x238>)
    1034:	4798      	blx	r3
    1036:	e7e4      	b.n	1002 <CSIentryState+0xfa>
		CUD();
    1038:	4b3c      	ldr	r3, [pc, #240]	; (112c <CSIentryState+0x224>)
    103a:	4798      	blx	r3
    103c:	e7e1      	b.n	1002 <CSIentryState+0xfa>
		CPL();
    103e:	4b41      	ldr	r3, [pc, #260]	; (1144 <CSIentryState+0x23c>)
    1040:	4798      	blx	r3
    1042:	e7de      	b.n	1002 <CSIentryState+0xfa>
		CUP();
    1044:	4b40      	ldr	r3, [pc, #256]	; (1148 <CSIentryState+0x240>)
    1046:	4798      	blx	r3
    1048:	e7db      	b.n	1002 <CSIentryState+0xfa>
		CHA();
    104a:	4b40      	ldr	r3, [pc, #256]	; (114c <CSIentryState+0x244>)
    104c:	4798      	blx	r3
    104e:	e7d8      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateGround;
    1050:	2200      	movs	r2, #0
    1052:	4b33      	ldr	r3, [pc, #204]	; (1120 <CSIentryState+0x218>)
    1054:	701a      	strb	r2, [r3, #0]
    1056:	e7d4      	b.n	1002 <CSIentryState+0xfa>
		CUP();
    1058:	4b3b      	ldr	r3, [pc, #236]	; (1148 <CSIentryState+0x240>)
    105a:	4798      	blx	r3
    105c:	e7d1      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateGround;
    105e:	2200      	movs	r2, #0
    1060:	4b2f      	ldr	r3, [pc, #188]	; (1120 <CSIentryState+0x218>)
    1062:	701a      	strb	r2, [r3, #0]
    1064:	e7cd      	b.n	1002 <CSIentryState+0xfa>
	currentState = stateGround;
    1066:	2200      	movs	r2, #0
    1068:	4b2d      	ldr	r3, [pc, #180]	; (1120 <CSIentryState+0x218>)
    106a:	701a      	strb	r2, [r3, #0]
    106c:	e7c9      	b.n	1002 <CSIentryState+0xfa>
		ED();
    106e:	4b38      	ldr	r3, [pc, #224]	; (1150 <CSIentryState+0x248>)
    1070:	4798      	blx	r3
    1072:	e7c6      	b.n	1002 <CSIentryState+0xfa>
		EL();
    1074:	4b37      	ldr	r3, [pc, #220]	; (1154 <CSIentryState+0x24c>)
    1076:	4798      	blx	r3
    1078:	e7c3      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateGround;
    107a:	2200      	movs	r2, #0
    107c:	4b28      	ldr	r3, [pc, #160]	; (1120 <CSIentryState+0x218>)
    107e:	701a      	strb	r2, [r3, #0]
    1080:	e7bf      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateGround;
    1082:	2200      	movs	r2, #0
    1084:	4b26      	ldr	r3, [pc, #152]	; (1120 <CSIentryState+0x218>)
    1086:	701a      	strb	r2, [r3, #0]
    1088:	e7bb      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateGround;
    108a:	2200      	movs	r2, #0
    108c:	4b24      	ldr	r3, [pc, #144]	; (1120 <CSIentryState+0x218>)
    108e:	701a      	strb	r2, [r3, #0]
    1090:	e7b7      	b.n	1002 <CSIentryState+0xfa>
	currentState = stateGround;
    1092:	2200      	movs	r2, #0
    1094:	4b22      	ldr	r3, [pc, #136]	; (1120 <CSIentryState+0x218>)
    1096:	701a      	strb	r2, [r3, #0]
    1098:	e7b3      	b.n	1002 <CSIentryState+0xfa>
		DSR();
    109a:	4b2f      	ldr	r3, [pc, #188]	; (1158 <CSIentryState+0x250>)
    109c:	4798      	blx	r3
    109e:	e7b0      	b.n	1002 <CSIentryState+0xfa>
	currentState = stateGround;
    10a0:	2200      	movs	r2, #0
    10a2:	4b1f      	ldr	r3, [pc, #124]	; (1120 <CSIentryState+0x218>)
    10a4:	701a      	strb	r2, [r3, #0]
    10a6:	e7ac      	b.n	1002 <CSIentryState+0xfa>
	currentState = stateGround;
    10a8:	2200      	movs	r2, #0
    10aa:	4b1d      	ldr	r3, [pc, #116]	; (1120 <CSIentryState+0x218>)
    10ac:	701a      	strb	r2, [r3, #0]
    10ae:	e7a8      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateGround;
    10b0:	2200      	movs	r2, #0
    10b2:	4b1b      	ldr	r3, [pc, #108]	; (1120 <CSIentryState+0x218>)
    10b4:	701a      	strb	r2, [r3, #0]
    10b6:	e7a4      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateGround;
    10b8:	2200      	movs	r2, #0
    10ba:	4b19      	ldr	r3, [pc, #100]	; (1120 <CSIentryState+0x218>)
    10bc:	701a      	strb	r2, [r3, #0]
    10be:	e7a0      	b.n	1002 <CSIentryState+0xfa>
		SC();
    10c0:	4b26      	ldr	r3, [pc, #152]	; (115c <CSIentryState+0x254>)
    10c2:	4798      	blx	r3
    10c4:	e79d      	b.n	1002 <CSIentryState+0xfa>
		RC();
    10c6:	4b26      	ldr	r3, [pc, #152]	; (1160 <CSIentryState+0x258>)
    10c8:	4798      	blx	r3
    10ca:	e79a      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateGround;
    10cc:	2200      	movs	r2, #0
    10ce:	4b14      	ldr	r3, [pc, #80]	; (1120 <CSIentryState+0x218>)
    10d0:	701a      	strb	r2, [r3, #0]
    10d2:	e796      	b.n	1002 <CSIentryState+0xfa>
	currentState = stateGround;
    10d4:	2200      	movs	r2, #0
    10d6:	4b12      	ldr	r3, [pc, #72]	; (1120 <CSIentryState+0x218>)
    10d8:	701a      	strb	r2, [r3, #0]
    10da:	e792      	b.n	1002 <CSIentryState+0xfa>
	currentState = stateGround;
    10dc:	2200      	movs	r2, #0
    10de:	4b10      	ldr	r3, [pc, #64]	; (1120 <CSIentryState+0x218>)
    10e0:	701a      	strb	r2, [r3, #0]
    10e2:	e78e      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateGround;
    10e4:	2200      	movs	r2, #0
    10e6:	4b0e      	ldr	r3, [pc, #56]	; (1120 <CSIentryState+0x218>)
    10e8:	701a      	strb	r2, [r3, #0]
    10ea:	e78a      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateCSIparam;
    10ec:	2204      	movs	r2, #4
    10ee:	4b0c      	ldr	r3, [pc, #48]	; (1120 <CSIentryState+0x218>)
    10f0:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    10f2:	4b1c      	ldr	r3, [pc, #112]	; (1164 <CSIentryState+0x25c>)
    10f4:	4798      	blx	r3
    10f6:	e784      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateCSIparam;
    10f8:	2204      	movs	r2, #4
    10fa:	4b09      	ldr	r3, [pc, #36]	; (1120 <CSIentryState+0x218>)
    10fc:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    10fe:	4b19      	ldr	r3, [pc, #100]	; (1164 <CSIentryState+0x25c>)
    1100:	4798      	blx	r3
    1102:	e77e      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateCSIparam;
    1104:	2204      	movs	r2, #4
    1106:	4b06      	ldr	r3, [pc, #24]	; (1120 <CSIentryState+0x218>)
    1108:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    110a:	4b16      	ldr	r3, [pc, #88]	; (1164 <CSIentryState+0x25c>)
    110c:	4798      	blx	r3
    110e:	e778      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateESC;
    1110:	2201      	movs	r2, #1
    1112:	4b03      	ldr	r3, [pc, #12]	; (1120 <CSIentryState+0x218>)
    1114:	701a      	strb	r2, [r3, #0]
    1116:	e774      	b.n	1002 <CSIentryState+0xfa>
		currentState = stateCSIignore;
    1118:	2205      	movs	r2, #5
    111a:	4b01      	ldr	r3, [pc, #4]	; (1120 <CSIentryState+0x218>)
    111c:	701a      	strb	r2, [r3, #0]
    111e:	e770      	b.n	1002 <CSIentryState+0xfa>
    1120:	200002bd 	.word	0x200002bd
    1124:	00000645 	.word	0x00000645
    1128:	0000078d 	.word	0x0000078d
    112c:	000006e9 	.word	0x000006e9
    1130:	00005c58 	.word	0x00005c58
    1134:	00005c8c 	.word	0x00005c8c
    1138:	00004a79 	.word	0x00004a79
    113c:	00000835 	.word	0x00000835
    1140:	000008d1 	.word	0x000008d1
    1144:	00000969 	.word	0x00000969
    1148:	00000a81 	.word	0x00000a81
    114c:	000009fd 	.word	0x000009fd
    1150:	00000b2d 	.word	0x00000b2d
    1154:	00000c69 	.word	0x00000c69
    1158:	00000d5d 	.word	0x00000d5d
    115c:	00000361 	.word	0x00000361
    1160:	0000038d 	.word	0x0000038d
    1164:	00000ea9 	.word	0x00000ea9

00001168 <nextTab>:


int nextTab(int a) 
{
    1168:	b510      	push	{r4, lr}
    116a:	b0d0      	sub	sp, #320	; 0x140
    116c:	0004      	movs	r4, r0
	int tabArray[] =
    116e:	22a0      	movs	r2, #160	; 0xa0
    1170:	0052      	lsls	r2, r2, #1
    1172:	4905      	ldr	r1, [pc, #20]	; (1188 <nextTab+0x20>)
    1174:	3104      	adds	r1, #4
    1176:	4668      	mov	r0, sp
    1178:	4b04      	ldr	r3, [pc, #16]	; (118c <nextTab+0x24>)
    117a:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
    117c:	00a4      	lsls	r4, r4, #2
    117e:	466b      	mov	r3, sp
    1180:	58e0      	ldr	r0, [r4, r3]
}
    1182:	b050      	add	sp, #320	; 0x140
    1184:	bd10      	pop	{r4, pc}
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	00005b14 	.word	0x00005b14
    118c:	00004905 	.word	0x00004905

00001190 <groundState>:
{
    1190:	b5f0      	push	{r4, r5, r6, r7, lr}
    1192:	46c6      	mov	lr, r8
    1194:	b500      	push	{lr}
    1196:	0004      	movs	r4, r0
	clearQueues();									//parser and paramQueues cleared
    1198:	4bc3      	ldr	r3, [pc, #780]	; (14a8 <groundState+0x318>)
    119a:	4798      	blx	r3
	if(character == 0x00)							//NUL 0x00 DO NOTHING
    119c:	2c07      	cmp	r4, #7
    119e:	d93e      	bls.n	121e <groundState+0x8e>
	else if(character == 0x08)						//BS 0x08 Backspace
    11a0:	2c08      	cmp	r4, #8
    11a2:	d038      	beq.n	1216 <groundState+0x86>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
    11a4:	2c09      	cmp	r4, #9
    11a6:	d056      	beq.n	1256 <groundState+0xc6>
	else if(character == 0x0A)						//LF 0x0A Line Feed
    11a8:	2c0a      	cmp	r4, #10
    11aa:	d100      	bne.n	11ae <groundState+0x1e>
    11ac:	e075      	b.n	129a <groundState+0x10a>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
    11ae:	2c0b      	cmp	r4, #11
    11b0:	d100      	bne.n	11b4 <groundState+0x24>
    11b2:	e0c9      	b.n	1348 <groundState+0x1b8>
	else if(character == 0x0C)						//FF 0x0C Form Feed
    11b4:	2c0c      	cmp	r4, #12
    11b6:	d100      	bne.n	11ba <groundState+0x2a>
    11b8:	e11e      	b.n	13f8 <groundState+0x268>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
    11ba:	2c0d      	cmp	r4, #13
    11bc:	d100      	bne.n	11c0 <groundState+0x30>
    11be:	e185      	b.n	14cc <groundState+0x33c>
	else if(character == 0x0E)						//SO 0x0E Shift Out
    11c0:	0023      	movs	r3, r4
    11c2:	3b0e      	subs	r3, #14
    11c4:	2b0c      	cmp	r3, #12
    11c6:	d92a      	bls.n	121e <groundState+0x8e>
	else if(character == 0x1B)						//ESC 0x1B Escape
    11c8:	2c1b      	cmp	r4, #27
    11ca:	d100      	bne.n	11ce <groundState+0x3e>
    11cc:	e1a4      	b.n	1518 <groundState+0x388>
	else if(character == 0x1C)						//FS 0x1C File Separator
    11ce:	0023      	movs	r3, r4
    11d0:	3b1c      	subs	r3, #28
    11d2:	2b03      	cmp	r3, #3
    11d4:	d923      	bls.n	121e <groundState+0x8e>
	else if(character == 0x7F)						//DEL 0x7F Delete
    11d6:	2c7f      	cmp	r4, #127	; 0x7f
    11d8:	d021      	beq.n	121e <groundState+0x8e>
		consoleDisplay[xCharPos][yCharPos] = character;
    11da:	4eb4      	ldr	r6, [pc, #720]	; (14ac <groundState+0x31c>)
    11dc:	4db4      	ldr	r5, [pc, #720]	; (14b0 <groundState+0x320>)
    11de:	882b      	ldrh	r3, [r5, #0]
    11e0:	4ab4      	ldr	r2, [pc, #720]	; (14b4 <groundState+0x324>)
    11e2:	4690      	mov	r8, r2
    11e4:	8812      	ldrh	r2, [r2, #0]
    11e6:	2718      	movs	r7, #24
    11e8:	437b      	muls	r3, r7
    11ea:	18f3      	adds	r3, r6, r3
    11ec:	549c      	strb	r4, [r3, r2]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    11ee:	0020      	movs	r0, r4
    11f0:	4cb1      	ldr	r4, [pc, #708]	; (14b8 <groundState+0x328>)
    11f2:	47a0      	blx	r4
		xCharPos++;
    11f4:	882b      	ldrh	r3, [r5, #0]
    11f6:	3301      	adds	r3, #1
    11f8:	b29b      	uxth	r3, r3
    11fa:	802b      	strh	r3, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    11fc:	4642      	mov	r2, r8
    11fe:	8812      	ldrh	r2, [r2, #0]
    1200:	437b      	muls	r3, r7
    1202:	18f6      	adds	r6, r6, r3
    1204:	5cb0      	ldrb	r0, [r6, r2]
    1206:	47a0      	blx	r4
		if(xCharPos > 79)		//END OF LINE
    1208:	882b      	ldrh	r3, [r5, #0]
    120a:	2b4f      	cmp	r3, #79	; 0x4f
    120c:	d907      	bls.n	121e <groundState+0x8e>
			xCharPos--;
    120e:	3b01      	subs	r3, #1
    1210:	4aa7      	ldr	r2, [pc, #668]	; (14b0 <groundState+0x320>)
    1212:	8013      	strh	r3, [r2, #0]
}
    1214:	e003      	b.n	121e <groundState+0x8e>
		if(xCharPos > 0)
    1216:	4ba6      	ldr	r3, [pc, #664]	; (14b0 <groundState+0x320>)
    1218:	881b      	ldrh	r3, [r3, #0]
    121a:	2b00      	cmp	r3, #0
    121c:	d102      	bne.n	1224 <groundState+0x94>
}
    121e:	bc04      	pop	{r2}
    1220:	4690      	mov	r8, r2
    1222:	bdf0      	pop	{r4, r5, r6, r7, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1224:	4ca1      	ldr	r4, [pc, #644]	; (14ac <groundState+0x31c>)
    1226:	4da3      	ldr	r5, [pc, #652]	; (14b4 <groundState+0x324>)
    1228:	8829      	ldrh	r1, [r5, #0]
    122a:	005a      	lsls	r2, r3, #1
    122c:	18d3      	adds	r3, r2, r3
    122e:	00db      	lsls	r3, r3, #3
    1230:	18e3      	adds	r3, r4, r3
    1232:	5c58      	ldrb	r0, [r3, r1]
    1234:	4ea0      	ldr	r6, [pc, #640]	; (14b8 <groundState+0x328>)
    1236:	47b0      	blx	r6
			xCharPos--;
    1238:	4a9d      	ldr	r2, [pc, #628]	; (14b0 <groundState+0x320>)
    123a:	8813      	ldrh	r3, [r2, #0]
    123c:	3b01      	subs	r3, #1
    123e:	b29b      	uxth	r3, r3
    1240:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    1242:	8829      	ldrh	r1, [r5, #0]
    1244:	005a      	lsls	r2, r3, #1
    1246:	18d3      	adds	r3, r2, r3
    1248:	00db      	lsls	r3, r3, #3
    124a:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    124c:	5c58      	ldrb	r0, [r3, r1]
    124e:	47b0      	blx	r6
			blinkCursor();
    1250:	4b9a      	ldr	r3, [pc, #616]	; (14bc <groundState+0x32c>)
    1252:	4798      	blx	r3
    1254:	e7e3      	b.n	121e <groundState+0x8e>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1256:	4c96      	ldr	r4, [pc, #600]	; (14b0 <groundState+0x320>)
    1258:	8822      	ldrh	r2, [r4, #0]
    125a:	4b96      	ldr	r3, [pc, #600]	; (14b4 <groundState+0x324>)
    125c:	8819      	ldrh	r1, [r3, #0]
    125e:	0053      	lsls	r3, r2, #1
    1260:	189b      	adds	r3, r3, r2
    1262:	00db      	lsls	r3, r3, #3
    1264:	4a91      	ldr	r2, [pc, #580]	; (14ac <groundState+0x31c>)
    1266:	18d3      	adds	r3, r2, r3
    1268:	5c58      	ldrb	r0, [r3, r1]
    126a:	4b93      	ldr	r3, [pc, #588]	; (14b8 <groundState+0x328>)
    126c:	4798      	blx	r3
		if(xCharPos <= 79)
    126e:	8820      	ldrh	r0, [r4, #0]
    1270:	284f      	cmp	r0, #79	; 0x4f
    1272:	d803      	bhi.n	127c <groundState+0xec>
			xCharPos = nextTab(xCharPos);
    1274:	4b92      	ldr	r3, [pc, #584]	; (14c0 <groundState+0x330>)
    1276:	4798      	blx	r3
    1278:	4b8d      	ldr	r3, [pc, #564]	; (14b0 <groundState+0x320>)
    127a:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    127c:	4b8c      	ldr	r3, [pc, #560]	; (14b0 <groundState+0x320>)
    127e:	881a      	ldrh	r2, [r3, #0]
    1280:	4b8c      	ldr	r3, [pc, #560]	; (14b4 <groundState+0x324>)
    1282:	8819      	ldrh	r1, [r3, #0]
    1284:	0053      	lsls	r3, r2, #1
    1286:	189b      	adds	r3, r3, r2
    1288:	00db      	lsls	r3, r3, #3
    128a:	4a88      	ldr	r2, [pc, #544]	; (14ac <groundState+0x31c>)
    128c:	18d3      	adds	r3, r2, r3
    128e:	5c58      	ldrb	r0, [r3, r1]
    1290:	4b89      	ldr	r3, [pc, #548]	; (14b8 <groundState+0x328>)
    1292:	4798      	blx	r3
		blinkCursor();
    1294:	4b89      	ldr	r3, [pc, #548]	; (14bc <groundState+0x32c>)
    1296:	4798      	blx	r3
    1298:	e7c1      	b.n	121e <groundState+0x8e>
		if(yCharPos == 23)
    129a:	4b86      	ldr	r3, [pc, #536]	; (14b4 <groundState+0x324>)
    129c:	881a      	ldrh	r2, [r3, #0]
    129e:	2a17      	cmp	r2, #23
    12a0:	d032      	beq.n	1308 <groundState+0x178>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    12a2:	4c82      	ldr	r4, [pc, #520]	; (14ac <groundState+0x31c>)
    12a4:	4d82      	ldr	r5, [pc, #520]	; (14b0 <groundState+0x320>)
    12a6:	8829      	ldrh	r1, [r5, #0]
    12a8:	004b      	lsls	r3, r1, #1
    12aa:	185b      	adds	r3, r3, r1
    12ac:	00db      	lsls	r3, r3, #3
    12ae:	18e3      	adds	r3, r4, r3
    12b0:	5c98      	ldrb	r0, [r3, r2]
    12b2:	4e81      	ldr	r6, [pc, #516]	; (14b8 <groundState+0x328>)
    12b4:	47b0      	blx	r6
			yCharPos++;
    12b6:	4a7f      	ldr	r2, [pc, #508]	; (14b4 <groundState+0x324>)
    12b8:	8813      	ldrh	r3, [r2, #0]
    12ba:	3301      	adds	r3, #1
    12bc:	b29b      	uxth	r3, r3
    12be:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    12c0:	8829      	ldrh	r1, [r5, #0]
    12c2:	004a      	lsls	r2, r1, #1
    12c4:	1852      	adds	r2, r2, r1
    12c6:	00d2      	lsls	r2, r2, #3
    12c8:	18a4      	adds	r4, r4, r2
    12ca:	5ce0      	ldrb	r0, [r4, r3]
    12cc:	47b0      	blx	r6
			blinkCursor();
    12ce:	4b7b      	ldr	r3, [pc, #492]	; (14bc <groundState+0x32c>)
    12d0:	4798      	blx	r3
		if(lineFeed)
    12d2:	4b7c      	ldr	r3, [pc, #496]	; (14c4 <groundState+0x334>)
    12d4:	781b      	ldrb	r3, [r3, #0]
    12d6:	2b00      	cmp	r3, #0
    12d8:	d0a1      	beq.n	121e <groundState+0x8e>
			if(yCharPos == 23)
    12da:	4b76      	ldr	r3, [pc, #472]	; (14b4 <groundState+0x324>)
    12dc:	881a      	ldrh	r2, [r3, #0]
    12de:	2a17      	cmp	r2, #23
    12e0:	d021      	beq.n	1326 <groundState+0x196>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    12e2:	4d72      	ldr	r5, [pc, #456]	; (14ac <groundState+0x31c>)
    12e4:	4e72      	ldr	r6, [pc, #456]	; (14b0 <groundState+0x320>)
    12e6:	8831      	ldrh	r1, [r6, #0]
    12e8:	004b      	lsls	r3, r1, #1
    12ea:	185b      	adds	r3, r3, r1
    12ec:	00db      	lsls	r3, r3, #3
    12ee:	18eb      	adds	r3, r5, r3
    12f0:	5c98      	ldrb	r0, [r3, r2]
    12f2:	4c71      	ldr	r4, [pc, #452]	; (14b8 <groundState+0x328>)
    12f4:	47a0      	blx	r4
				xCharPos = 0;
    12f6:	2300      	movs	r3, #0
    12f8:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    12fa:	4b6e      	ldr	r3, [pc, #440]	; (14b4 <groundState+0x324>)
    12fc:	881b      	ldrh	r3, [r3, #0]
    12fe:	5ce8      	ldrb	r0, [r5, r3]
    1300:	47a0      	blx	r4
				blinkCursor();
    1302:	4b6e      	ldr	r3, [pc, #440]	; (14bc <groundState+0x32c>)
    1304:	4798      	blx	r3
    1306:	e78a      	b.n	121e <groundState+0x8e>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1308:	4b69      	ldr	r3, [pc, #420]	; (14b0 <groundState+0x320>)
    130a:	881a      	ldrh	r2, [r3, #0]
    130c:	0053      	lsls	r3, r2, #1
    130e:	189b      	adds	r3, r3, r2
    1310:	00db      	lsls	r3, r3, #3
    1312:	4a66      	ldr	r2, [pc, #408]	; (14ac <groundState+0x31c>)
    1314:	18d3      	adds	r3, r2, r3
    1316:	7dd8      	ldrb	r0, [r3, #23]
    1318:	4b67      	ldr	r3, [pc, #412]	; (14b8 <groundState+0x328>)
    131a:	4798      	blx	r3
			newLine();
    131c:	4b6a      	ldr	r3, [pc, #424]	; (14c8 <groundState+0x338>)
    131e:	4798      	blx	r3
			blinkCursor();
    1320:	4b66      	ldr	r3, [pc, #408]	; (14bc <groundState+0x32c>)
    1322:	4798      	blx	r3
    1324:	e7d5      	b.n	12d2 <groundState+0x142>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1326:	4d62      	ldr	r5, [pc, #392]	; (14b0 <groundState+0x320>)
    1328:	882a      	ldrh	r2, [r5, #0]
    132a:	0053      	lsls	r3, r2, #1
    132c:	189b      	adds	r3, r3, r2
    132e:	00db      	lsls	r3, r3, #3
    1330:	4a5e      	ldr	r2, [pc, #376]	; (14ac <groundState+0x31c>)
    1332:	18d3      	adds	r3, r2, r3
    1334:	7dd8      	ldrb	r0, [r3, #23]
    1336:	4c60      	ldr	r4, [pc, #384]	; (14b8 <groundState+0x328>)
    1338:	47a0      	blx	r4
				xCharPos = 0;
    133a:	2300      	movs	r3, #0
    133c:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    133e:	2000      	movs	r0, #0
    1340:	47a0      	blx	r4
				blinkCursor();
    1342:	4b5e      	ldr	r3, [pc, #376]	; (14bc <groundState+0x32c>)
    1344:	4798      	blx	r3
    1346:	e76a      	b.n	121e <groundState+0x8e>
		if(yCharPos == 23)
    1348:	4b5a      	ldr	r3, [pc, #360]	; (14b4 <groundState+0x324>)
    134a:	881a      	ldrh	r2, [r3, #0]
    134c:	2a17      	cmp	r2, #23
    134e:	d033      	beq.n	13b8 <groundState+0x228>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1350:	4c56      	ldr	r4, [pc, #344]	; (14ac <groundState+0x31c>)
    1352:	4d57      	ldr	r5, [pc, #348]	; (14b0 <groundState+0x320>)
    1354:	8829      	ldrh	r1, [r5, #0]
    1356:	004b      	lsls	r3, r1, #1
    1358:	185b      	adds	r3, r3, r1
    135a:	00db      	lsls	r3, r3, #3
    135c:	18e3      	adds	r3, r4, r3
    135e:	5c98      	ldrb	r0, [r3, r2]
    1360:	4e55      	ldr	r6, [pc, #340]	; (14b8 <groundState+0x328>)
    1362:	47b0      	blx	r6
			yCharPos++;
    1364:	4a53      	ldr	r2, [pc, #332]	; (14b4 <groundState+0x324>)
    1366:	8813      	ldrh	r3, [r2, #0]
    1368:	3301      	adds	r3, #1
    136a:	b29b      	uxth	r3, r3
    136c:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    136e:	8829      	ldrh	r1, [r5, #0]
    1370:	004a      	lsls	r2, r1, #1
    1372:	1852      	adds	r2, r2, r1
    1374:	00d2      	lsls	r2, r2, #3
    1376:	18a4      	adds	r4, r4, r2
    1378:	5ce0      	ldrb	r0, [r4, r3]
    137a:	47b0      	blx	r6
			blinkCursor();
    137c:	4b4f      	ldr	r3, [pc, #316]	; (14bc <groundState+0x32c>)
    137e:	4798      	blx	r3
		if(lineFeed)
    1380:	4b50      	ldr	r3, [pc, #320]	; (14c4 <groundState+0x334>)
    1382:	781b      	ldrb	r3, [r3, #0]
    1384:	2b00      	cmp	r3, #0
    1386:	d100      	bne.n	138a <groundState+0x1fa>
    1388:	e749      	b.n	121e <groundState+0x8e>
			if(yCharPos == 23)
    138a:	4b4a      	ldr	r3, [pc, #296]	; (14b4 <groundState+0x324>)
    138c:	881a      	ldrh	r2, [r3, #0]
    138e:	2a17      	cmp	r2, #23
    1390:	d021      	beq.n	13d6 <groundState+0x246>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1392:	4d46      	ldr	r5, [pc, #280]	; (14ac <groundState+0x31c>)
    1394:	4e46      	ldr	r6, [pc, #280]	; (14b0 <groundState+0x320>)
    1396:	8831      	ldrh	r1, [r6, #0]
    1398:	004b      	lsls	r3, r1, #1
    139a:	185b      	adds	r3, r3, r1
    139c:	00db      	lsls	r3, r3, #3
    139e:	18eb      	adds	r3, r5, r3
    13a0:	5c98      	ldrb	r0, [r3, r2]
    13a2:	4c45      	ldr	r4, [pc, #276]	; (14b8 <groundState+0x328>)
    13a4:	47a0      	blx	r4
				xCharPos = 0;
    13a6:	2300      	movs	r3, #0
    13a8:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    13aa:	4b42      	ldr	r3, [pc, #264]	; (14b4 <groundState+0x324>)
    13ac:	881b      	ldrh	r3, [r3, #0]
    13ae:	5ce8      	ldrb	r0, [r5, r3]
    13b0:	47a0      	blx	r4
				blinkCursor();
    13b2:	4b42      	ldr	r3, [pc, #264]	; (14bc <groundState+0x32c>)
    13b4:	4798      	blx	r3
    13b6:	e732      	b.n	121e <groundState+0x8e>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    13b8:	4b3d      	ldr	r3, [pc, #244]	; (14b0 <groundState+0x320>)
    13ba:	881a      	ldrh	r2, [r3, #0]
    13bc:	0053      	lsls	r3, r2, #1
    13be:	189b      	adds	r3, r3, r2
    13c0:	00db      	lsls	r3, r3, #3
    13c2:	4a3a      	ldr	r2, [pc, #232]	; (14ac <groundState+0x31c>)
    13c4:	18d3      	adds	r3, r2, r3
    13c6:	7dd8      	ldrb	r0, [r3, #23]
    13c8:	4b3b      	ldr	r3, [pc, #236]	; (14b8 <groundState+0x328>)
    13ca:	4798      	blx	r3
			newLine();
    13cc:	4b3e      	ldr	r3, [pc, #248]	; (14c8 <groundState+0x338>)
    13ce:	4798      	blx	r3
			blinkCursor();
    13d0:	4b3a      	ldr	r3, [pc, #232]	; (14bc <groundState+0x32c>)
    13d2:	4798      	blx	r3
    13d4:	e7d4      	b.n	1380 <groundState+0x1f0>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    13d6:	4d36      	ldr	r5, [pc, #216]	; (14b0 <groundState+0x320>)
    13d8:	882a      	ldrh	r2, [r5, #0]
    13da:	0053      	lsls	r3, r2, #1
    13dc:	189b      	adds	r3, r3, r2
    13de:	00db      	lsls	r3, r3, #3
    13e0:	4a32      	ldr	r2, [pc, #200]	; (14ac <groundState+0x31c>)
    13e2:	18d3      	adds	r3, r2, r3
    13e4:	7dd8      	ldrb	r0, [r3, #23]
    13e6:	4c34      	ldr	r4, [pc, #208]	; (14b8 <groundState+0x328>)
    13e8:	47a0      	blx	r4
				xCharPos = 0;
    13ea:	2300      	movs	r3, #0
    13ec:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    13ee:	2000      	movs	r0, #0
    13f0:	47a0      	blx	r4
				blinkCursor();
    13f2:	4b32      	ldr	r3, [pc, #200]	; (14bc <groundState+0x32c>)
    13f4:	4798      	blx	r3
    13f6:	e712      	b.n	121e <groundState+0x8e>
		if(yCharPos == 23)
    13f8:	4b2e      	ldr	r3, [pc, #184]	; (14b4 <groundState+0x324>)
    13fa:	881a      	ldrh	r2, [r3, #0]
    13fc:	2a17      	cmp	r2, #23
    13fe:	d033      	beq.n	1468 <groundState+0x2d8>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1400:	4c2a      	ldr	r4, [pc, #168]	; (14ac <groundState+0x31c>)
    1402:	4d2b      	ldr	r5, [pc, #172]	; (14b0 <groundState+0x320>)
    1404:	8829      	ldrh	r1, [r5, #0]
    1406:	004b      	lsls	r3, r1, #1
    1408:	185b      	adds	r3, r3, r1
    140a:	00db      	lsls	r3, r3, #3
    140c:	18e3      	adds	r3, r4, r3
    140e:	5c98      	ldrb	r0, [r3, r2]
    1410:	4e29      	ldr	r6, [pc, #164]	; (14b8 <groundState+0x328>)
    1412:	47b0      	blx	r6
			yCharPos++;
    1414:	4a27      	ldr	r2, [pc, #156]	; (14b4 <groundState+0x324>)
    1416:	8813      	ldrh	r3, [r2, #0]
    1418:	3301      	adds	r3, #1
    141a:	b29b      	uxth	r3, r3
    141c:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    141e:	8829      	ldrh	r1, [r5, #0]
    1420:	004a      	lsls	r2, r1, #1
    1422:	1852      	adds	r2, r2, r1
    1424:	00d2      	lsls	r2, r2, #3
    1426:	18a4      	adds	r4, r4, r2
    1428:	5ce0      	ldrb	r0, [r4, r3]
    142a:	47b0      	blx	r6
			blinkCursor();
    142c:	4b23      	ldr	r3, [pc, #140]	; (14bc <groundState+0x32c>)
    142e:	4798      	blx	r3
		if(lineFeed)
    1430:	4b24      	ldr	r3, [pc, #144]	; (14c4 <groundState+0x334>)
    1432:	781b      	ldrb	r3, [r3, #0]
    1434:	2b00      	cmp	r3, #0
    1436:	d100      	bne.n	143a <groundState+0x2aa>
    1438:	e6f1      	b.n	121e <groundState+0x8e>
			if(yCharPos == 23)
    143a:	4b1e      	ldr	r3, [pc, #120]	; (14b4 <groundState+0x324>)
    143c:	881a      	ldrh	r2, [r3, #0]
    143e:	2a17      	cmp	r2, #23
    1440:	d021      	beq.n	1486 <groundState+0x2f6>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1442:	4d1a      	ldr	r5, [pc, #104]	; (14ac <groundState+0x31c>)
    1444:	4e1a      	ldr	r6, [pc, #104]	; (14b0 <groundState+0x320>)
    1446:	8831      	ldrh	r1, [r6, #0]
    1448:	004b      	lsls	r3, r1, #1
    144a:	185b      	adds	r3, r3, r1
    144c:	00db      	lsls	r3, r3, #3
    144e:	18eb      	adds	r3, r5, r3
    1450:	5c98      	ldrb	r0, [r3, r2]
    1452:	4c19      	ldr	r4, [pc, #100]	; (14b8 <groundState+0x328>)
    1454:	47a0      	blx	r4
				xCharPos = 0;
    1456:	2300      	movs	r3, #0
    1458:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    145a:	4b16      	ldr	r3, [pc, #88]	; (14b4 <groundState+0x324>)
    145c:	881b      	ldrh	r3, [r3, #0]
    145e:	5ce8      	ldrb	r0, [r5, r3]
    1460:	47a0      	blx	r4
				blinkCursor();
    1462:	4b16      	ldr	r3, [pc, #88]	; (14bc <groundState+0x32c>)
    1464:	4798      	blx	r3
    1466:	e6da      	b.n	121e <groundState+0x8e>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1468:	4b11      	ldr	r3, [pc, #68]	; (14b0 <groundState+0x320>)
    146a:	881a      	ldrh	r2, [r3, #0]
    146c:	0053      	lsls	r3, r2, #1
    146e:	189b      	adds	r3, r3, r2
    1470:	00db      	lsls	r3, r3, #3
    1472:	4a0e      	ldr	r2, [pc, #56]	; (14ac <groundState+0x31c>)
    1474:	18d3      	adds	r3, r2, r3
    1476:	7dd8      	ldrb	r0, [r3, #23]
    1478:	4b0f      	ldr	r3, [pc, #60]	; (14b8 <groundState+0x328>)
    147a:	4798      	blx	r3
			newLine();
    147c:	4b12      	ldr	r3, [pc, #72]	; (14c8 <groundState+0x338>)
    147e:	4798      	blx	r3
			blinkCursor();
    1480:	4b0e      	ldr	r3, [pc, #56]	; (14bc <groundState+0x32c>)
    1482:	4798      	blx	r3
    1484:	e7d4      	b.n	1430 <groundState+0x2a0>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1486:	4d0a      	ldr	r5, [pc, #40]	; (14b0 <groundState+0x320>)
    1488:	882a      	ldrh	r2, [r5, #0]
    148a:	0053      	lsls	r3, r2, #1
    148c:	189b      	adds	r3, r3, r2
    148e:	00db      	lsls	r3, r3, #3
    1490:	4a06      	ldr	r2, [pc, #24]	; (14ac <groundState+0x31c>)
    1492:	18d3      	adds	r3, r2, r3
    1494:	7dd8      	ldrb	r0, [r3, #23]
    1496:	4c08      	ldr	r4, [pc, #32]	; (14b8 <groundState+0x328>)
    1498:	47a0      	blx	r4
				xCharPos = 0;
    149a:	2300      	movs	r3, #0
    149c:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    149e:	2000      	movs	r0, #0
    14a0:	47a0      	blx	r4
				blinkCursor();
    14a2:	4b06      	ldr	r3, [pc, #24]	; (14bc <groundState+0x32c>)
    14a4:	4798      	blx	r3
    14a6:	e6ba      	b.n	121e <groundState+0x8e>
    14a8:	000002b1 	.word	0x000002b1
    14ac:	200003c0 	.word	0x200003c0
    14b0:	200002b8 	.word	0x200002b8
    14b4:	200002ba 	.word	0x200002ba
    14b8:	00003285 	.word	0x00003285
    14bc:	0000336d 	.word	0x0000336d
    14c0:	00001169 	.word	0x00001169
    14c4:	2000016c 	.word	0x2000016c
    14c8:	000034c9 	.word	0x000034c9
		if(yCharPos == 23)
    14cc:	4b14      	ldr	r3, [pc, #80]	; (1520 <groundState+0x390>)
    14ce:	881a      	ldrh	r2, [r3, #0]
    14d0:	2a17      	cmp	r2, #23
    14d2:	d012      	beq.n	14fa <groundState+0x36a>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    14d4:	4d13      	ldr	r5, [pc, #76]	; (1524 <groundState+0x394>)
    14d6:	4e14      	ldr	r6, [pc, #80]	; (1528 <groundState+0x398>)
    14d8:	8831      	ldrh	r1, [r6, #0]
    14da:	004b      	lsls	r3, r1, #1
    14dc:	185b      	adds	r3, r3, r1
    14de:	00db      	lsls	r3, r3, #3
    14e0:	18eb      	adds	r3, r5, r3
    14e2:	5c98      	ldrb	r0, [r3, r2]
    14e4:	4c11      	ldr	r4, [pc, #68]	; (152c <groundState+0x39c>)
    14e6:	47a0      	blx	r4
			xCharPos = 0;
    14e8:	2300      	movs	r3, #0
    14ea:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    14ec:	4b0c      	ldr	r3, [pc, #48]	; (1520 <groundState+0x390>)
    14ee:	881b      	ldrh	r3, [r3, #0]
    14f0:	5ce8      	ldrb	r0, [r5, r3]
    14f2:	47a0      	blx	r4
			blinkCursor();
    14f4:	4b0e      	ldr	r3, [pc, #56]	; (1530 <groundState+0x3a0>)
    14f6:	4798      	blx	r3
    14f8:	e691      	b.n	121e <groundState+0x8e>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    14fa:	4c0b      	ldr	r4, [pc, #44]	; (1528 <groundState+0x398>)
    14fc:	8822      	ldrh	r2, [r4, #0]
    14fe:	0053      	lsls	r3, r2, #1
    1500:	189b      	adds	r3, r3, r2
    1502:	00db      	lsls	r3, r3, #3
    1504:	4a07      	ldr	r2, [pc, #28]	; (1524 <groundState+0x394>)
    1506:	18d3      	adds	r3, r2, r3
    1508:	7dd8      	ldrb	r0, [r3, #23]
    150a:	4b08      	ldr	r3, [pc, #32]	; (152c <groundState+0x39c>)
    150c:	4798      	blx	r3
			xCharPos = 0;
    150e:	2300      	movs	r3, #0
    1510:	8023      	strh	r3, [r4, #0]
			blinkCursor();
    1512:	4b07      	ldr	r3, [pc, #28]	; (1530 <groundState+0x3a0>)
    1514:	4798      	blx	r3
    1516:	e682      	b.n	121e <groundState+0x8e>
		currentState = stateESC;
    1518:	2201      	movs	r2, #1
    151a:	4b06      	ldr	r3, [pc, #24]	; (1534 <groundState+0x3a4>)
    151c:	701a      	strb	r2, [r3, #0]
    151e:	e67e      	b.n	121e <groundState+0x8e>
    1520:	200002ba 	.word	0x200002ba
    1524:	200003c0 	.word	0x200003c0
    1528:	200002b8 	.word	0x200002b8
    152c:	00003285 	.word	0x00003285
    1530:	0000336d 	.word	0x0000336d
    1534:	200002bd 	.word	0x200002bd

00001538 <parseChar>:
{
    1538:	b510      	push	{r4, lr}
	parserState state = currentState;
    153a:	4b0e      	ldr	r3, [pc, #56]	; (1574 <parseChar+0x3c>)
	switch(state)
    153c:	781a      	ldrb	r2, [r3, #0]
    153e:	2a05      	cmp	r2, #5
    1540:	d805      	bhi.n	154e <parseChar+0x16>
    1542:	0093      	lsls	r3, r2, #2
    1544:	4a0c      	ldr	r2, [pc, #48]	; (1578 <parseChar+0x40>)
    1546:	58d3      	ldr	r3, [r2, r3]
    1548:	469f      	mov	pc, r3
			groundState(character);
    154a:	4b0c      	ldr	r3, [pc, #48]	; (157c <parseChar+0x44>)
    154c:	4798      	blx	r3
}
    154e:	bd10      	pop	{r4, pc}
			escState(character);
    1550:	4b0b      	ldr	r3, [pc, #44]	; (1580 <parseChar+0x48>)
    1552:	4798      	blx	r3
		break;
    1554:	e7fb      	b.n	154e <parseChar+0x16>
	stateEnterBuffer = 0x00;
    1556:	2300      	movs	r3, #0
    1558:	4a0a      	ldr	r2, [pc, #40]	; (1584 <parseChar+0x4c>)
    155a:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
    155c:	4a05      	ldr	r2, [pc, #20]	; (1574 <parseChar+0x3c>)
    155e:	7013      	strb	r3, [r2, #0]
    1560:	e7f5      	b.n	154e <parseChar+0x16>
			CSIentryState(character);
    1562:	4b09      	ldr	r3, [pc, #36]	; (1588 <parseChar+0x50>)
    1564:	4798      	blx	r3
		break;
    1566:	e7f2      	b.n	154e <parseChar+0x16>
			CSIparamState(character);
    1568:	4b08      	ldr	r3, [pc, #32]	; (158c <parseChar+0x54>)
    156a:	4798      	blx	r3
		break;
    156c:	e7ef      	b.n	154e <parseChar+0x16>
			CSIignoreState(character);
    156e:	4b08      	ldr	r3, [pc, #32]	; (1590 <parseChar+0x58>)
    1570:	4798      	blx	r3
}
    1572:	e7ec      	b.n	154e <parseChar+0x16>
    1574:	200002bd 	.word	0x200002bd
    1578:	00005afc 	.word	0x00005afc
    157c:	00001191 	.word	0x00001191
    1580:	00000569 	.word	0x00000569
    1584:	20000342 	.word	0x20000342
    1588:	00000f09 	.word	0x00000f09
    158c:	00000ea9 	.word	0x00000ea9
    1590:	0000034d 	.word	0x0000034d

00001594 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    1594:	b5f0      	push	{r4, r5, r6, r7, lr}
    1596:	b0c1      	sub	sp, #260	; 0x104
    1598:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    159a:	22d0      	movs	r2, #208	; 0xd0
    159c:	492d      	ldr	r1, [pc, #180]	; (1654 <drawKare+0xc0>)
    159e:	a80c      	add	r0, sp, #48	; 0x30
    15a0:	4b2d      	ldr	r3, [pc, #180]	; (1658 <drawKare+0xc4>)
    15a2:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    15a4:	a805      	add	r0, sp, #20
    15a6:	4b2d      	ldr	r3, [pc, #180]	; (165c <drawKare+0xc8>)
    15a8:	001a      	movs	r2, r3
    15aa:	3250      	adds	r2, #80	; 0x50
    15ac:	0001      	movs	r1, r0
    15ae:	ca31      	ldmia	r2!, {r0, r4, r5}
    15b0:	c131      	stmia	r1!, {r0, r4, r5}
    15b2:	ca31      	ldmia	r2!, {r0, r4, r5}
    15b4:	c131      	stmia	r1!, {r0, r4, r5}
    15b6:	6812      	ldr	r2, [r2, #0]
    15b8:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    15ba:	336c      	adds	r3, #108	; 0x6c
    15bc:	466a      	mov	r2, sp
    15be:	cb13      	ldmia	r3!, {r0, r1, r4}
    15c0:	c213      	stmia	r2!, {r0, r1, r4}
    15c2:	cb03      	ldmia	r3!, {r0, r1}
    15c4:	c203      	stmia	r2!, {r0, r1}
    15c6:	ac0c      	add	r4, sp, #48	; 0x30
    15c8:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    15ca:	4d25      	ldr	r5, [pc, #148]	; (1660 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    15cc:	88e3      	ldrh	r3, [r4, #6]
    15ce:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    15d0:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
    15d2:	88a2      	ldrh	r2, [r4, #4]
    15d4:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    15d6:	322d      	adds	r2, #45	; 0x2d
    15d8:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
    15da:	8861      	ldrh	r1, [r4, #2]
    15dc:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    15de:	3196      	adds	r1, #150	; 0x96
    15e0:	8820      	ldrh	r0, [r4, #0]
    15e2:	1040      	asrs	r0, r0, #1
    15e4:	302d      	adds	r0, #45	; 0x2d
    15e6:	30ff      	adds	r0, #255	; 0xff
    15e8:	47a8      	blx	r5
    15ea:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
    15ec:	42b4      	cmp	r4, r6
    15ee:	d1ed      	bne.n	15cc <drawKare+0x38>
	}
	switch(emotion)
    15f0:	2f00      	cmp	r7, #0
    15f2:	d003      	beq.n	15fc <drawKare+0x68>
    15f4:	2f01      	cmp	r7, #1
    15f6:	d017      	beq.n	1628 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    15f8:	b041      	add	sp, #260	; 0x104
    15fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15fc:	ac05      	add	r4, sp, #20
    15fe:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1600:	4d17      	ldr	r5, [pc, #92]	; (1660 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    1602:	78e3      	ldrb	r3, [r4, #3]
    1604:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1606:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    1608:	78a2      	ldrb	r2, [r4, #2]
    160a:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    160c:	322d      	adds	r2, #45	; 0x2d
    160e:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    1610:	7861      	ldrb	r1, [r4, #1]
    1612:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1614:	3196      	adds	r1, #150	; 0x96
    1616:	7820      	ldrb	r0, [r4, #0]
    1618:	1040      	asrs	r0, r0, #1
    161a:	302d      	adds	r0, #45	; 0x2d
    161c:	30ff      	adds	r0, #255	; 0xff
    161e:	47a8      	blx	r5
    1620:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
    1622:	42a6      	cmp	r6, r4
    1624:	d1ed      	bne.n	1602 <drawKare+0x6e>
    1626:	e7e7      	b.n	15f8 <drawKare+0x64>
    1628:	466c      	mov	r4, sp
    162a:	ae05      	add	r6, sp, #20
			fillRect((
    162c:	4d0c      	ldr	r5, [pc, #48]	; (1660 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    162e:	78e3      	ldrb	r3, [r4, #3]
    1630:	105b      	asrs	r3, r3, #1
			fillRect((
    1632:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    1634:	78a2      	ldrb	r2, [r4, #2]
    1636:	1052      	asrs	r2, r2, #1
			fillRect((
    1638:	322d      	adds	r2, #45	; 0x2d
    163a:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    163c:	7861      	ldrb	r1, [r4, #1]
    163e:	1049      	asrs	r1, r1, #1
			fillRect((
    1640:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    1642:	7820      	ldrb	r0, [r4, #0]
    1644:	1040      	asrs	r0, r0, #1
			fillRect((
    1646:	302d      	adds	r0, #45	; 0x2d
    1648:	30ff      	adds	r0, #255	; 0xff
    164a:	47a8      	blx	r5
    164c:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
    164e:	42b4      	cmp	r4, r6
    1650:	d1ed      	bne.n	162e <drawKare+0x9a>
    1652:	e7d1      	b.n	15f8 <drawKare+0x64>
    1654:	00005c90 	.word	0x00005c90
    1658:	00004905 	.word	0x00004905
    165c:	00005d10 	.word	0x00005d10
    1660:	00003d21 	.word	0x00003d21

00001664 <splashScreen>:

void splashScreen(void)
{
    1664:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
    1666:	4c49      	ldr	r4, [pc, #292]	; (178c <splashScreen+0x128>)
    1668:	4b49      	ldr	r3, [pc, #292]	; (1790 <splashScreen+0x12c>)
    166a:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
    166c:	4b49      	ldr	r3, [pc, #292]	; (1794 <splashScreen+0x130>)
    166e:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
    1670:	4b49      	ldr	r3, [pc, #292]	; (1798 <splashScreen+0x134>)
    1672:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
    1674:	4b49      	ldr	r3, [pc, #292]	; (179c <splashScreen+0x138>)
    1676:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
    1678:	4b49      	ldr	r3, [pc, #292]	; (17a0 <splashScreen+0x13c>)
    167a:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
    167c:	4b49      	ldr	r3, [pc, #292]	; (17a4 <splashScreen+0x140>)
    167e:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
    1680:	4b49      	ldr	r3, [pc, #292]	; (17a8 <splashScreen+0x144>)
    1682:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    1684:	4b49      	ldr	r3, [pc, #292]	; (17ac <splashScreen+0x148>)
    1686:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
    1688:	4b49      	ldr	r3, [pc, #292]	; (17b0 <splashScreen+0x14c>)
    168a:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
    168c:	4b49      	ldr	r3, [pc, #292]	; (17b4 <splashScreen+0x150>)
    168e:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
    1690:	4b49      	ldr	r3, [pc, #292]	; (17b8 <splashScreen+0x154>)
    1692:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
    1694:	4b49      	ldr	r3, [pc, #292]	; (17bc <splashScreen+0x158>)
    1696:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
    1698:	4b49      	ldr	r3, [pc, #292]	; (17c0 <splashScreen+0x15c>)
    169a:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
    169c:	4b49      	ldr	r3, [pc, #292]	; (17c4 <splashScreen+0x160>)
    169e:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
    16a0:	4b49      	ldr	r3, [pc, #292]	; (17c8 <splashScreen+0x164>)
    16a2:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
    16a4:	4b49      	ldr	r3, [pc, #292]	; (17cc <splashScreen+0x168>)
    16a6:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
    16a8:	4b49      	ldr	r3, [pc, #292]	; (17d0 <splashScreen+0x16c>)
    16aa:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    16ac:	4b49      	ldr	r3, [pc, #292]	; (17d4 <splashScreen+0x170>)
    16ae:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
    16b0:	4b49      	ldr	r3, [pc, #292]	; (17d8 <splashScreen+0x174>)
    16b2:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020)";//
    16b4:	4b49      	ldr	r3, [pc, #292]	; (17dc <splashScreen+0x178>)
    16b6:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
    16b8:	4b49      	ldr	r3, [pc, #292]	; (17e0 <splashScreen+0x17c>)
    16ba:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
    16bc:	4b49      	ldr	r3, [pc, #292]	; (17e4 <splashScreen+0x180>)
    16be:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
    16c0:	4b49      	ldr	r3, [pc, #292]	; (17e8 <splashScreen+0x184>)
    16c2:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
    16c4:	4b49      	ldr	r3, [pc, #292]	; (17ec <splashScreen+0x188>)
    16c6:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
    16c8:	4b49      	ldr	r3, [pc, #292]	; (17f0 <splashScreen+0x18c>)
    16ca:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
    16cc:	4b49      	ldr	r3, [pc, #292]	; (17f4 <splashScreen+0x190>)
    16ce:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
    16d0:	4b49      	ldr	r3, [pc, #292]	; (17f8 <splashScreen+0x194>)
    16d2:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
    16d4:	4b49      	ldr	r3, [pc, #292]	; (17fc <splashScreen+0x198>)
    16d6:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
    16d8:	4b49      	ldr	r3, [pc, #292]	; (1800 <splashScreen+0x19c>)
    16da:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
    16dc:	4b49      	ldr	r3, [pc, #292]	; (1804 <splashScreen+0x1a0>)
    16de:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
    16e0:	4b49      	ldr	r3, [pc, #292]	; (1808 <splashScreen+0x1a4>)
    16e2:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
    16e4:	4b49      	ldr	r3, [pc, #292]	; (180c <splashScreen+0x1a8>)
    16e6:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
    16e8:	4a49      	ldr	r2, [pc, #292]	; (1810 <splashScreen+0x1ac>)
    16ea:	2380      	movs	r3, #128	; 0x80
    16ec:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
    16ee:	4b49      	ldr	r3, [pc, #292]	; (1814 <splashScreen+0x1b0>)
    16f0:	4798      	blx	r3
    16f2:	17c3      	asrs	r3, r0, #31
    16f4:	0edb      	lsrs	r3, r3, #27
    16f6:	18c2      	adds	r2, r0, r3
    16f8:	201f      	movs	r0, #31
    16fa:	4010      	ands	r0, r2
    16fc:	1ac0      	subs	r0, r0, r3
    16fe:	0080      	lsls	r0, r0, #2
    1700:	5904      	ldr	r4, [r0, r4]
	
	clearScreen();
    1702:	4b45      	ldr	r3, [pc, #276]	; (1818 <splashScreen+0x1b4>)
    1704:	4798      	blx	r3
	setColorRGB(0xff, 0xaa,0xff);
    1706:	22ff      	movs	r2, #255	; 0xff
    1708:	21aa      	movs	r1, #170	; 0xaa
    170a:	20ff      	movs	r0, #255	; 0xff
    170c:	4b43      	ldr	r3, [pc, #268]	; (181c <splashScreen+0x1b8>)
    170e:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    1710:	2280      	movs	r2, #128	; 0x80
    1712:	0612      	lsls	r2, r2, #24
    1714:	4b42      	ldr	r3, [pc, #264]	; (1820 <splashScreen+0x1bc>)
    1716:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    1718:	4b42      	ldr	r3, [pc, #264]	; (1824 <splashScreen+0x1c0>)
    171a:	22df      	movs	r2, #223	; 0xdf
    171c:	5c99      	ldrb	r1, [r3, r2]
    171e:	2004      	movs	r0, #4
    1720:	4301      	orrs	r1, r0
    1722:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    1724:	5c99      	ldrb	r1, [r3, r2]
    1726:	2002      	movs	r0, #2
    1728:	4301      	orrs	r1, r0
    172a:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    172c:	3a3f      	subs	r2, #63	; 0x3f
    172e:	589b      	ldr	r3, [r3, r2]
    1730:	2b00      	cmp	r3, #0
    1732:	db26      	blt.n	1782 <splashScreen+0x11e>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
    1734:	2000      	movs	r0, #0
    1736:	4b3c      	ldr	r3, [pc, #240]	; (1828 <splashScreen+0x1c4>)
    1738:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
    173a:	0020      	movs	r0, r4
    173c:	4b3b      	ldr	r3, [pc, #236]	; (182c <splashScreen+0x1c8>)
    173e:	4798      	blx	r3
    1740:	4e3b      	ldr	r6, [pc, #236]	; (1830 <splashScreen+0x1cc>)
    1742:	0840      	lsrs	r0, r0, #1
    1744:	2328      	movs	r3, #40	; 0x28
    1746:	1a18      	subs	r0, r3, r0
    1748:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
    174a:	4d3a      	ldr	r5, [pc, #232]	; (1834 <splashScreen+0x1d0>)
    174c:	2310      	movs	r3, #16
    174e:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
    1750:	0020      	movs	r0, r4
    1752:	4b39      	ldr	r3, [pc, #228]	; (1838 <splashScreen+0x1d4>)
    1754:	4798      	blx	r3
	xCharPos = 40 - (strlen(versionLabel)/2);
	yCharPos = 18;
	
	writeString(versionLabel);
	*/
	delay_ms(2000);
    1756:	20fa      	movs	r0, #250	; 0xfa
    1758:	00c0      	lsls	r0, r0, #3
    175a:	4b38      	ldr	r3, [pc, #224]	; (183c <splashScreen+0x1d8>)
    175c:	4798      	blx	r3
		
	clearScreen();
    175e:	4b2e      	ldr	r3, [pc, #184]	; (1818 <splashScreen+0x1b4>)
    1760:	4798      	blx	r3
	nullifyConsole();
    1762:	4b37      	ldr	r3, [pc, #220]	; (1840 <splashScreen+0x1dc>)
    1764:	4798      	blx	r3
	
	setColorRGB(0,255,0);
    1766:	2200      	movs	r2, #0
    1768:	21ff      	movs	r1, #255	; 0xff
    176a:	2000      	movs	r0, #0
    176c:	4b2b      	ldr	r3, [pc, #172]	; (181c <splashScreen+0x1b8>)
    176e:	4798      	blx	r3
	setBackColorRGB(0,0,0);
    1770:	2200      	movs	r2, #0
    1772:	2100      	movs	r1, #0
    1774:	2000      	movs	r0, #0
    1776:	4b33      	ldr	r3, [pc, #204]	; (1844 <splashScreen+0x1e0>)
    1778:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
    177a:	2300      	movs	r3, #0
    177c:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
    177e:	802b      	strh	r3, [r5, #0]
	

    1780:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
    1782:	2001      	movs	r0, #1
    1784:	4b28      	ldr	r3, [pc, #160]	; (1828 <splashScreen+0x1c4>)
    1786:	4798      	blx	r3
    1788:	e7d7      	b.n	173a <splashScreen+0xd6>
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	200001f8 	.word	0x200001f8
    1790:	00005d90 	.word	0x00005d90
    1794:	00005db0 	.word	0x00005db0
    1798:	00005dc4 	.word	0x00005dc4
    179c:	00005ddc 	.word	0x00005ddc
    17a0:	00005dec 	.word	0x00005dec
    17a4:	00005df4 	.word	0x00005df4
    17a8:	00005e1c 	.word	0x00005e1c
    17ac:	00005e48 	.word	0x00005e48
    17b0:	00005e70 	.word	0x00005e70
    17b4:	00005e9c 	.word	0x00005e9c
    17b8:	00005ea8 	.word	0x00005ea8
    17bc:	00005ec0 	.word	0x00005ec0
    17c0:	00005ee0 	.word	0x00005ee0
    17c4:	00005f00 	.word	0x00005f00
    17c8:	00005f24 	.word	0x00005f24
    17cc:	00005f34 	.word	0x00005f34
    17d0:	00005f40 	.word	0x00005f40
    17d4:	00005f5c 	.word	0x00005f5c
    17d8:	00005f7c 	.word	0x00005f7c
    17dc:	00005fb8 	.word	0x00005fb8
    17e0:	00005fd4 	.word	0x00005fd4
    17e4:	00005ff0 	.word	0x00005ff0
    17e8:	00006000 	.word	0x00006000
    17ec:	00006024 	.word	0x00006024
    17f0:	00006050 	.word	0x00006050
    17f4:	0000607c 	.word	0x0000607c
    17f8:	0000609c 	.word	0x0000609c
    17fc:	000060bc 	.word	0x000060bc
    1800:	000060d0 	.word	0x000060d0
    1804:	000060ec 	.word	0x000060ec
    1808:	000060fc 	.word	0x000060fc
    180c:	00006120 	.word	0x00006120
    1810:	00006140 	.word	0x00006140
    1814:	00004b31 	.word	0x00004b31
    1818:	00003df1 	.word	0x00003df1
    181c:	00003be5 	.word	0x00003be5
    1820:	4100448c 	.word	0x4100448c
    1824:	41004400 	.word	0x41004400
    1828:	00001595 	.word	0x00001595
    182c:	00004d53 	.word	0x00004d53
    1830:	200002b8 	.word	0x200002b8
    1834:	200002ba 	.word	0x200002ba
    1838:	00003585 	.word	0x00003585
    183c:	000018dd 	.word	0x000018dd
    1840:	000035cd 	.word	0x000035cd
    1844:	00003c0d 	.word	0x00003c0d

00001848 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
    1848:	b5f0      	push	{r4, r5, r6, r7, lr}
    184a:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
    184c:	4e0b      	ldr	r6, [pc, #44]	; (187c <parseRXBuffer+0x34>)
    184e:	4d0c      	ldr	r5, [pc, #48]	; (1880 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
    1850:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
    1852:	e008      	b.n	1866 <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
    1854:	466b      	mov	r3, sp
    1856:	1ddc      	adds	r4, r3, #7
    1858:	0021      	movs	r1, r4
    185a:	6838      	ldr	r0, [r7, #0]
    185c:	4b09      	ldr	r3, [pc, #36]	; (1884 <parseRXBuffer+0x3c>)
    185e:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
    1860:	7820      	ldrb	r0, [r4, #0]
    1862:	4b09      	ldr	r3, [pc, #36]	; (1888 <parseRXBuffer+0x40>)
    1864:	4798      	blx	r3
		while(!ring_empty(ouroboros))
    1866:	6830      	ldr	r0, [r6, #0]
    1868:	47a8      	blx	r5
    186a:	2800      	cmp	r0, #0
    186c:	d0f2      	beq.n	1854 <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
    186e:	4b03      	ldr	r3, [pc, #12]	; (187c <parseRXBuffer+0x34>)
    1870:	6818      	ldr	r0, [r3, #0]
    1872:	4b06      	ldr	r3, [pc, #24]	; (188c <parseRXBuffer+0x44>)
    1874:	4798      	blx	r3
}
    1876:	b003      	add	sp, #12
    1878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    187a:	46c0      	nop			; (mov r8, r8)
    187c:	2000035c 	.word	0x2000035c
    1880:	0000017d 	.word	0x0000017d
    1884:	00000195 	.word	0x00000195
    1888:	00001539 	.word	0x00001539
    188c:	00000135 	.word	0x00000135

00001890 <sendChar>:

void sendChar(char character)
{
    1890:	b510      	push	{r4, lr}
	printf("%c", character);
    1892:	4b01      	ldr	r3, [pc, #4]	; (1898 <sendChar+0x8>)
    1894:	4798      	blx	r3
    1896:	bd10      	pop	{r4, pc}
    1898:	00004aad 	.word	0x00004aad

0000189c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    189c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    189e:	2000      	movs	r0, #0
    18a0:	4b08      	ldr	r3, [pc, #32]	; (18c4 <delay_init+0x28>)
    18a2:	4798      	blx	r3
    18a4:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    18a6:	4c08      	ldr	r4, [pc, #32]	; (18c8 <delay_init+0x2c>)
    18a8:	21fa      	movs	r1, #250	; 0xfa
    18aa:	0089      	lsls	r1, r1, #2
    18ac:	47a0      	blx	r4
    18ae:	4b07      	ldr	r3, [pc, #28]	; (18cc <delay_init+0x30>)
    18b0:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    18b2:	4907      	ldr	r1, [pc, #28]	; (18d0 <delay_init+0x34>)
    18b4:	0028      	movs	r0, r5
    18b6:	47a0      	blx	r4
    18b8:	4b06      	ldr	r3, [pc, #24]	; (18d4 <delay_init+0x38>)
    18ba:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    18bc:	2205      	movs	r2, #5
    18be:	4b06      	ldr	r3, [pc, #24]	; (18d8 <delay_init+0x3c>)
    18c0:	601a      	str	r2, [r3, #0]
}
    18c2:	bd70      	pop	{r4, r5, r6, pc}
    18c4:	00002e5d 	.word	0x00002e5d
    18c8:	00004531 	.word	0x00004531
    18cc:	20000014 	.word	0x20000014
    18d0:	000f4240 	.word	0x000f4240
    18d4:	20000018 	.word	0x20000018
    18d8:	e000e010 	.word	0xe000e010

000018dc <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    18dc:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    18de:	4b08      	ldr	r3, [pc, #32]	; (1900 <delay_cycles_ms+0x24>)
    18e0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    18e2:	4a08      	ldr	r2, [pc, #32]	; (1904 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    18e4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    18e6:	2180      	movs	r1, #128	; 0x80
    18e8:	0249      	lsls	r1, r1, #9
	while (n--) {
    18ea:	3801      	subs	r0, #1
    18ec:	d307      	bcc.n	18fe <delay_cycles_ms+0x22>
	if (n > 0) {
    18ee:	2c00      	cmp	r4, #0
    18f0:	d0fb      	beq.n	18ea <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    18f2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    18f4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    18f6:	6813      	ldr	r3, [r2, #0]
    18f8:	420b      	tst	r3, r1
    18fa:	d0fc      	beq.n	18f6 <delay_cycles_ms+0x1a>
    18fc:	e7f5      	b.n	18ea <delay_cycles_ms+0xe>
	}
}
    18fe:	bd30      	pop	{r4, r5, pc}
    1900:	20000014 	.word	0x20000014
    1904:	e000e010 	.word	0xe000e010

00001908 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1908:	4b0c      	ldr	r3, [pc, #48]	; (193c <cpu_irq_enter_critical+0x34>)
    190a:	681b      	ldr	r3, [r3, #0]
    190c:	2b00      	cmp	r3, #0
    190e:	d106      	bne.n	191e <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1910:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1914:	2b00      	cmp	r3, #0
    1916:	d007      	beq.n	1928 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1918:	2200      	movs	r2, #0
    191a:	4b09      	ldr	r3, [pc, #36]	; (1940 <cpu_irq_enter_critical+0x38>)
    191c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    191e:	4a07      	ldr	r2, [pc, #28]	; (193c <cpu_irq_enter_critical+0x34>)
    1920:	6813      	ldr	r3, [r2, #0]
    1922:	3301      	adds	r3, #1
    1924:	6013      	str	r3, [r2, #0]
}
    1926:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1928:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    192a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    192e:	2200      	movs	r2, #0
    1930:	4b04      	ldr	r3, [pc, #16]	; (1944 <cpu_irq_enter_critical+0x3c>)
    1932:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1934:	3201      	adds	r2, #1
    1936:	4b02      	ldr	r3, [pc, #8]	; (1940 <cpu_irq_enter_critical+0x38>)
    1938:	701a      	strb	r2, [r3, #0]
    193a:	e7f0      	b.n	191e <cpu_irq_enter_critical+0x16>
    193c:	20000278 	.word	0x20000278
    1940:	2000027c 	.word	0x2000027c
    1944:	2000001c 	.word	0x2000001c

00001948 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1948:	4b08      	ldr	r3, [pc, #32]	; (196c <cpu_irq_leave_critical+0x24>)
    194a:	681a      	ldr	r2, [r3, #0]
    194c:	3a01      	subs	r2, #1
    194e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	2b00      	cmp	r3, #0
    1954:	d109      	bne.n	196a <cpu_irq_leave_critical+0x22>
    1956:	4b06      	ldr	r3, [pc, #24]	; (1970 <cpu_irq_leave_critical+0x28>)
    1958:	781b      	ldrb	r3, [r3, #0]
    195a:	2b00      	cmp	r3, #0
    195c:	d005      	beq.n	196a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    195e:	2201      	movs	r2, #1
    1960:	4b04      	ldr	r3, [pc, #16]	; (1974 <cpu_irq_leave_critical+0x2c>)
    1962:	701a      	strb	r2, [r3, #0]
    1964:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1968:	b662      	cpsie	i
	}
}
    196a:	4770      	bx	lr
    196c:	20000278 	.word	0x20000278
    1970:	2000027c 	.word	0x2000027c
    1974:	2000001c 	.word	0x2000001c

00001978 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1978:	b5f0      	push	{r4, r5, r6, r7, lr}
    197a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    197c:	ac01      	add	r4, sp, #4
    197e:	2501      	movs	r5, #1
    1980:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1982:	2700      	movs	r7, #0
    1984:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1986:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1988:	0021      	movs	r1, r4
    198a:	203e      	movs	r0, #62	; 0x3e
    198c:	4e06      	ldr	r6, [pc, #24]	; (19a8 <system_board_init+0x30>)
    198e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1990:	2280      	movs	r2, #128	; 0x80
    1992:	05d2      	lsls	r2, r2, #23
    1994:	4b05      	ldr	r3, [pc, #20]	; (19ac <system_board_init+0x34>)
    1996:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1998:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    199a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    199c:	0021      	movs	r1, r4
    199e:	200f      	movs	r0, #15
    19a0:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    19a2:	b003      	add	sp, #12
    19a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	00001ee1 	.word	0x00001ee1
    19ac:	41004480 	.word	0x41004480

000019b0 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    19b0:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    19b2:	2200      	movs	r2, #0
    19b4:	2300      	movs	r3, #0
    19b6:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    19b8:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    19ba:	2100      	movs	r1, #0
    19bc:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    19be:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    19c0:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    19c2:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    19c4:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    19c6:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    19c8:	24c0      	movs	r4, #192	; 0xc0
    19ca:	0164      	lsls	r4, r4, #5
    19cc:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    19ce:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    19d0:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    19d2:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    19d4:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    19d6:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    19d8:	242a      	movs	r4, #42	; 0x2a
    19da:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    19dc:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    19de:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    19e0:	3c06      	subs	r4, #6
    19e2:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    19e4:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    19e6:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    19e8:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    19ea:	232b      	movs	r3, #43	; 0x2b
    19ec:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    19ee:	3301      	adds	r3, #1
    19f0:	54c1      	strb	r1, [r0, r3]
}
    19f2:	bd10      	pop	{r4, pc}

000019f4 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    19f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19f6:	46d6      	mov	lr, sl
    19f8:	464f      	mov	r7, r9
    19fa:	4646      	mov	r6, r8
    19fc:	b5c0      	push	{r6, r7, lr}
    19fe:	b096      	sub	sp, #88	; 0x58
    1a00:	0007      	movs	r7, r0
    1a02:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1a04:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1a06:	4ac6      	ldr	r2, [pc, #792]	; (1d20 <adc_init+0x32c>)
    1a08:	6a10      	ldr	r0, [r2, #32]
    1a0a:	2380      	movs	r3, #128	; 0x80
    1a0c:	025b      	lsls	r3, r3, #9
    1a0e:	4303      	orrs	r3, r0
    1a10:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1a12:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1a14:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1a16:	07db      	lsls	r3, r3, #31
    1a18:	d505      	bpl.n	1a26 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1a1a:	b016      	add	sp, #88	; 0x58
    1a1c:	bc1c      	pop	{r2, r3, r4}
    1a1e:	4690      	mov	r8, r2
    1a20:	4699      	mov	r9, r3
    1a22:	46a2      	mov	sl, r4
    1a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1a26:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1a28:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1a2a:	079b      	lsls	r3, r3, #30
    1a2c:	d4f5      	bmi.n	1a1a <adc_init+0x26>
	module_inst->reference = config->reference;
    1a2e:	7873      	ldrb	r3, [r6, #1]
    1a30:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1a32:	2b00      	cmp	r3, #0
    1a34:	d104      	bne.n	1a40 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    1a36:	4abb      	ldr	r2, [pc, #748]	; (1d24 <adc_init+0x330>)
    1a38:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1a3a:	2104      	movs	r1, #4
    1a3c:	430b      	orrs	r3, r1
    1a3e:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1a40:	2300      	movs	r3, #0
    1a42:	60bb      	str	r3, [r7, #8]
    1a44:	60fb      	str	r3, [r7, #12]
    1a46:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1a48:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    1a4a:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1a4c:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1a4e:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1a50:	4bb5      	ldr	r3, [pc, #724]	; (1d28 <adc_init+0x334>)
    1a52:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1a54:	232a      	movs	r3, #42	; 0x2a
    1a56:	5cf3      	ldrb	r3, [r6, r3]
    1a58:	2b00      	cmp	r3, #0
    1a5a:	d105      	bne.n	1a68 <adc_init+0x74>
    1a5c:	7d33      	ldrb	r3, [r6, #20]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d102      	bne.n	1a68 <adc_init+0x74>
		module_inst->software_trigger = true;
    1a62:	3301      	adds	r3, #1
    1a64:	777b      	strb	r3, [r7, #29]
    1a66:	e001      	b.n	1a6c <adc_init+0x78>
		module_inst->software_trigger = false;
    1a68:	2300      	movs	r3, #0
    1a6a:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1a6c:	683b      	ldr	r3, [r7, #0]
    1a6e:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1a70:	7833      	ldrb	r3, [r6, #0]
    1a72:	466a      	mov	r2, sp
    1a74:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1a76:	4669      	mov	r1, sp
    1a78:	201e      	movs	r0, #30
    1a7a:	4bac      	ldr	r3, [pc, #688]	; (1d2c <adc_init+0x338>)
    1a7c:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1a7e:	201e      	movs	r0, #30
    1a80:	4bab      	ldr	r3, [pc, #684]	; (1d30 <adc_init+0x33c>)
    1a82:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    1a84:	232c      	movs	r3, #44	; 0x2c
    1a86:	5cf2      	ldrb	r2, [r6, r3]
    1a88:	2a00      	cmp	r2, #0
    1a8a:	d054      	beq.n	1b36 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1a8c:	3b01      	subs	r3, #1
    1a8e:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1a90:	7b33      	ldrb	r3, [r6, #12]
    1a92:	18eb      	adds	r3, r5, r3
    1a94:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    1a96:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1a98:	b2c9      	uxtb	r1, r1
    1a9a:	428b      	cmp	r3, r1
    1a9c:	d221      	bcs.n	1ae2 <adc_init+0xee>
    1a9e:	1952      	adds	r2, r2, r5
    1aa0:	b2d3      	uxtb	r3, r2
    1aa2:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    1aa4:	4ba3      	ldr	r3, [pc, #652]	; (1d34 <adc_init+0x340>)
    1aa6:	469a      	mov	sl, r3
    1aa8:	e003      	b.n	1ab2 <adc_init+0xbe>
			offset++;
    1aaa:	3501      	adds	r5, #1
    1aac:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1aae:	454d      	cmp	r5, r9
    1ab0:	d017      	beq.n	1ae2 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1ab2:	240f      	movs	r4, #15
    1ab4:	402c      	ands	r4, r5
    1ab6:	7b33      	ldrb	r3, [r6, #12]
    1ab8:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    1aba:	2250      	movs	r2, #80	; 0x50
    1abc:	499e      	ldr	r1, [pc, #632]	; (1d38 <adc_init+0x344>)
    1abe:	a802      	add	r0, sp, #8
    1ac0:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1ac2:	2c13      	cmp	r4, #19
    1ac4:	d8f1      	bhi.n	1aaa <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1ac6:	00a4      	lsls	r4, r4, #2
    1ac8:	ab02      	add	r3, sp, #8
    1aca:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1acc:	a901      	add	r1, sp, #4
    1ace:	2300      	movs	r3, #0
    1ad0:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1ad2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1ad4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1ad6:	3301      	adds	r3, #1
    1ad8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1ada:	b2c0      	uxtb	r0, r0
    1adc:	4b97      	ldr	r3, [pc, #604]	; (1d3c <adc_init+0x348>)
    1ade:	4798      	blx	r3
    1ae0:	e7e3      	b.n	1aaa <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    1ae2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1ae4:	2250      	movs	r2, #80	; 0x50
    1ae6:	4994      	ldr	r1, [pc, #592]	; (1d38 <adc_init+0x344>)
    1ae8:	a802      	add	r0, sp, #8
    1aea:	4b92      	ldr	r3, [pc, #584]	; (1d34 <adc_init+0x340>)
    1aec:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1aee:	2c13      	cmp	r4, #19
    1af0:	d913      	bls.n	1b1a <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1af2:	7d73      	ldrb	r3, [r6, #21]
    1af4:	009b      	lsls	r3, r3, #2
    1af6:	b2db      	uxtb	r3, r3
    1af8:	4642      	mov	r2, r8
    1afa:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1afc:	7db3      	ldrb	r3, [r6, #22]
    1afe:	01db      	lsls	r3, r3, #7
    1b00:	7872      	ldrb	r2, [r6, #1]
    1b02:	4313      	orrs	r3, r2
    1b04:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    1b06:	4642      	mov	r2, r8
    1b08:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    1b0a:	7933      	ldrb	r3, [r6, #4]
    1b0c:	2b34      	cmp	r3, #52	; 0x34
    1b0e:	d900      	bls.n	1b12 <adc_init+0x11e>
    1b10:	e17b      	b.n	1e0a <adc_init+0x416>
    1b12:	009b      	lsls	r3, r3, #2
    1b14:	4a8a      	ldr	r2, [pc, #552]	; (1d40 <adc_init+0x34c>)
    1b16:	58d3      	ldr	r3, [r2, r3]
    1b18:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1b1a:	00a4      	lsls	r4, r4, #2
    1b1c:	ab02      	add	r3, sp, #8
    1b1e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b20:	a901      	add	r1, sp, #4
    1b22:	2300      	movs	r3, #0
    1b24:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1b26:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1b28:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1b2a:	3301      	adds	r3, #1
    1b2c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1b2e:	b2c0      	uxtb	r0, r0
    1b30:	4b82      	ldr	r3, [pc, #520]	; (1d3c <adc_init+0x348>)
    1b32:	4798      	blx	r3
    1b34:	e7dd      	b.n	1af2 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    1b36:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    1b38:	2250      	movs	r2, #80	; 0x50
    1b3a:	497f      	ldr	r1, [pc, #508]	; (1d38 <adc_init+0x344>)
    1b3c:	a802      	add	r0, sp, #8
    1b3e:	4b7d      	ldr	r3, [pc, #500]	; (1d34 <adc_init+0x340>)
    1b40:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1b42:	2c13      	cmp	r4, #19
    1b44:	d915      	bls.n	1b72 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    1b46:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1b48:	2250      	movs	r2, #80	; 0x50
    1b4a:	497b      	ldr	r1, [pc, #492]	; (1d38 <adc_init+0x344>)
    1b4c:	a802      	add	r0, sp, #8
    1b4e:	4b79      	ldr	r3, [pc, #484]	; (1d34 <adc_init+0x340>)
    1b50:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1b52:	2c13      	cmp	r4, #19
    1b54:	d8cd      	bhi.n	1af2 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1b56:	00a4      	lsls	r4, r4, #2
    1b58:	ab02      	add	r3, sp, #8
    1b5a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b5c:	a901      	add	r1, sp, #4
    1b5e:	2300      	movs	r3, #0
    1b60:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1b62:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1b64:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1b66:	3301      	adds	r3, #1
    1b68:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1b6a:	b2c0      	uxtb	r0, r0
    1b6c:	4b73      	ldr	r3, [pc, #460]	; (1d3c <adc_init+0x348>)
    1b6e:	4798      	blx	r3
    1b70:	e7bf      	b.n	1af2 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1b72:	00a4      	lsls	r4, r4, #2
    1b74:	ab02      	add	r3, sp, #8
    1b76:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1b78:	a901      	add	r1, sp, #4
    1b7a:	2300      	movs	r3, #0
    1b7c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1b7e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1b80:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1b82:	3301      	adds	r3, #1
    1b84:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1b86:	b2c0      	uxtb	r0, r0
    1b88:	4b6c      	ldr	r3, [pc, #432]	; (1d3c <adc_init+0x348>)
    1b8a:	4798      	blx	r3
    1b8c:	e7db      	b.n	1b46 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1b8e:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1b90:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    1b92:	2102      	movs	r1, #2
    1b94:	e01a      	b.n	1bcc <adc_init+0x1d8>
		adjres = config->divide_result;
    1b96:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1b98:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1b9a:	2410      	movs	r4, #16
    1b9c:	e016      	b.n	1bcc <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1b9e:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1ba0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1ba2:	2101      	movs	r1, #1
    1ba4:	e012      	b.n	1bcc <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    1ba6:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1ba8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1baa:	2100      	movs	r1, #0
    1bac:	e00e      	b.n	1bcc <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1bae:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1bb0:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    1bb2:	2100      	movs	r1, #0
    1bb4:	e00a      	b.n	1bcc <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1bb6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1bb8:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    1bba:	2100      	movs	r1, #0
    1bbc:	e006      	b.n	1bcc <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1bbe:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1bc0:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    1bc2:	2100      	movs	r1, #0
    1bc4:	e002      	b.n	1bcc <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    1bc6:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    1bc8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1bca:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1bcc:	0109      	lsls	r1, r1, #4
    1bce:	2270      	movs	r2, #112	; 0x70
    1bd0:	400a      	ands	r2, r1
    1bd2:	4313      	orrs	r3, r2
    1bd4:	4642      	mov	r2, r8
    1bd6:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    1bd8:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    1bda:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    1bdc:	2b3f      	cmp	r3, #63	; 0x3f
    1bde:	d900      	bls.n	1be2 <adc_init+0x1ee>
    1be0:	e71b      	b.n	1a1a <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    1be2:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1be4:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1be6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1be8:	b25b      	sxtb	r3, r3
    1bea:	2b00      	cmp	r3, #0
    1bec:	dbfb      	blt.n	1be6 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1bee:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1bf0:	8872      	ldrh	r2, [r6, #2]
    1bf2:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1bf4:	2224      	movs	r2, #36	; 0x24
    1bf6:	5cb2      	ldrb	r2, [r6, r2]
    1bf8:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1bfa:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1bfc:	7d32      	ldrb	r2, [r6, #20]
    1bfe:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1c00:	4313      	orrs	r3, r2
    1c02:	7cb2      	ldrb	r2, [r6, #18]
    1c04:	0052      	lsls	r2, r2, #1
    1c06:	4313      	orrs	r3, r2
    1c08:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    1c0a:	4642      	mov	r2, r8
    1c0c:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1c0e:	7e33      	ldrb	r3, [r6, #24]
    1c10:	2b00      	cmp	r3, #0
    1c12:	d020      	beq.n	1c56 <adc_init+0x262>
		switch (resolution) {
    1c14:	2c10      	cmp	r4, #16
    1c16:	d100      	bne.n	1c1a <adc_init+0x226>
    1c18:	e0d9      	b.n	1dce <adc_init+0x3da>
    1c1a:	d800      	bhi.n	1c1e <adc_init+0x22a>
    1c1c:	e098      	b.n	1d50 <adc_init+0x35c>
    1c1e:	2c20      	cmp	r4, #32
    1c20:	d100      	bne.n	1c24 <adc_init+0x230>
    1c22:	e0b6      	b.n	1d92 <adc_init+0x39e>
    1c24:	2c30      	cmp	r4, #48	; 0x30
    1c26:	d116      	bne.n	1c56 <adc_init+0x262>
			if (config->differential_mode &&
    1c28:	7cf2      	ldrb	r2, [r6, #19]
    1c2a:	2a00      	cmp	r2, #0
    1c2c:	d00a      	beq.n	1c44 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1c2e:	69f2      	ldr	r2, [r6, #28]
    1c30:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    1c32:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1c34:	2aff      	cmp	r2, #255	; 0xff
    1c36:	d900      	bls.n	1c3a <adc_init+0x246>
    1c38:	e6ef      	b.n	1a1a <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    1c3a:	6a32      	ldr	r2, [r6, #32]
    1c3c:	3280      	adds	r2, #128	; 0x80
    1c3e:	2aff      	cmp	r2, #255	; 0xff
    1c40:	d900      	bls.n	1c44 <adc_init+0x250>
    1c42:	e6ea      	b.n	1a1a <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    1c44:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    1c46:	69f2      	ldr	r2, [r6, #28]
    1c48:	2aff      	cmp	r2, #255	; 0xff
    1c4a:	dd00      	ble.n	1c4e <adc_init+0x25a>
    1c4c:	e6e5      	b.n	1a1a <adc_init+0x26>
    1c4e:	6a32      	ldr	r2, [r6, #32]
    1c50:	2aff      	cmp	r2, #255	; 0xff
    1c52:	dd00      	ble.n	1c56 <adc_init+0x262>
    1c54:	e6e1      	b.n	1a1a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1c56:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1c58:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1c5a:	b252      	sxtb	r2, r2
    1c5c:	2a00      	cmp	r2, #0
    1c5e:	dbfb      	blt.n	1c58 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1c60:	4642      	mov	r2, r8
    1c62:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    1c64:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1c66:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1c68:	b25b      	sxtb	r3, r3
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	dbfb      	blt.n	1c66 <adc_init+0x272>
	adc_module->WINLT.reg =
    1c6e:	8bb3      	ldrh	r3, [r6, #28]
    1c70:	4642      	mov	r2, r8
    1c72:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    1c74:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1c76:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1c78:	b25b      	sxtb	r3, r3
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	dbfb      	blt.n	1c76 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1c7e:	8c33      	ldrh	r3, [r6, #32]
    1c80:	4642      	mov	r2, r8
    1c82:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1c84:	232c      	movs	r3, #44	; 0x2c
    1c86:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1c88:	2b00      	cmp	r3, #0
    1c8a:	d005      	beq.n	1c98 <adc_init+0x2a4>
		inputs_to_scan--;
    1c8c:	3b01      	subs	r3, #1
    1c8e:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1c90:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1c92:	2b0f      	cmp	r3, #15
    1c94:	d900      	bls.n	1c98 <adc_init+0x2a4>
    1c96:	e6c0      	b.n	1a1a <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1c98:	222b      	movs	r2, #43	; 0x2b
    1c9a:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1c9c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1c9e:	290f      	cmp	r1, #15
    1ca0:	d900      	bls.n	1ca4 <adc_init+0x2b0>
    1ca2:	e6ba      	b.n	1a1a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1ca4:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1ca6:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1ca8:	b252      	sxtb	r2, r2
    1caa:	2a00      	cmp	r2, #0
    1cac:	dbfb      	blt.n	1ca6 <adc_init+0x2b2>
			config->negative_input |
    1cae:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1cb0:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    1cb2:	4302      	orrs	r2, r0
    1cb4:	68b0      	ldr	r0, [r6, #8]
    1cb6:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    1cb8:	0509      	lsls	r1, r1, #20
			config->negative_input |
    1cba:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1cbc:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1cbe:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1cc0:	4642      	mov	r2, r8
    1cc2:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    1cc4:	232a      	movs	r3, #42	; 0x2a
    1cc6:	5cf3      	ldrb	r3, [r6, r3]
    1cc8:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    1cca:	230f      	movs	r3, #15
    1ccc:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1cce:	3315      	adds	r3, #21
    1cd0:	5cf3      	ldrb	r3, [r6, r3]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d012      	beq.n	1cfc <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1cd6:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    1cd8:	4a1a      	ldr	r2, [pc, #104]	; (1d44 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    1cda:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1cdc:	4293      	cmp	r3, r2
    1cde:	d900      	bls.n	1ce2 <adc_init+0x2ee>
    1ce0:	e69b      	b.n	1a1a <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1ce2:	4642      	mov	r2, r8
    1ce4:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    1ce6:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    1ce8:	2380      	movs	r3, #128	; 0x80
    1cea:	011b      	lsls	r3, r3, #4
    1cec:	18d3      	adds	r3, r2, r3
    1cee:	4915      	ldr	r1, [pc, #84]	; (1d44 <adc_init+0x350>)
    1cf0:	b29b      	uxth	r3, r3
    1cf2:	428b      	cmp	r3, r1
    1cf4:	d900      	bls.n	1cf8 <adc_init+0x304>
    1cf6:	e690      	b.n	1a1a <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    1cf8:	4643      	mov	r3, r8
    1cfa:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    1cfc:	4b12      	ldr	r3, [pc, #72]	; (1d48 <adc_init+0x354>)
    1cfe:	681b      	ldr	r3, [r3, #0]
    1d00:	015b      	lsls	r3, r3, #5
    1d02:	22e0      	movs	r2, #224	; 0xe0
    1d04:	00d2      	lsls	r2, r2, #3
    1d06:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    1d08:	4a10      	ldr	r2, [pc, #64]	; (1d4c <adc_init+0x358>)
    1d0a:	6851      	ldr	r1, [r2, #4]
    1d0c:	0149      	lsls	r1, r1, #5
    1d0e:	6812      	ldr	r2, [r2, #0]
    1d10:	0ed2      	lsrs	r2, r2, #27
    1d12:	430a      	orrs	r2, r1
    1d14:	b2d2      	uxtb	r2, r2
			) |
    1d16:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    1d18:	4642      	mov	r2, r8
    1d1a:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    1d1c:	2000      	movs	r0, #0
    1d1e:	e67c      	b.n	1a1a <adc_init+0x26>
    1d20:	40000400 	.word	0x40000400
    1d24:	40000800 	.word	0x40000800
    1d28:	20000360 	.word	0x20000360
    1d2c:	00002f75 	.word	0x00002f75
    1d30:	00002ee9 	.word	0x00002ee9
    1d34:	00004905 	.word	0x00004905
    1d38:	00006234 	.word	0x00006234
    1d3c:	0000306d 	.word	0x0000306d
    1d40:	00006160 	.word	0x00006160
    1d44:	00000fff 	.word	0x00000fff
    1d48:	00806024 	.word	0x00806024
    1d4c:	00806020 	.word	0x00806020
		switch (resolution) {
    1d50:	2c00      	cmp	r4, #0
    1d52:	d000      	beq.n	1d56 <adc_init+0x362>
    1d54:	e77f      	b.n	1c56 <adc_init+0x262>
			if (config->differential_mode &&
    1d56:	7cf2      	ldrb	r2, [r6, #19]
    1d58:	2a00      	cmp	r2, #0
    1d5a:	d00f      	beq.n	1d7c <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    1d5c:	69f2      	ldr	r2, [r6, #28]
    1d5e:	2180      	movs	r1, #128	; 0x80
    1d60:	0109      	lsls	r1, r1, #4
    1d62:	468c      	mov	ip, r1
    1d64:	4462      	add	r2, ip
			if (config->differential_mode &&
    1d66:	492a      	ldr	r1, [pc, #168]	; (1e10 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1d68:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1d6a:	428a      	cmp	r2, r1
    1d6c:	d900      	bls.n	1d70 <adc_init+0x37c>
    1d6e:	e654      	b.n	1a1a <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1d70:	6a32      	ldr	r2, [r6, #32]
    1d72:	4462      	add	r2, ip
    1d74:	4926      	ldr	r1, [pc, #152]	; (1e10 <adc_init+0x41c>)
    1d76:	428a      	cmp	r2, r1
    1d78:	d900      	bls.n	1d7c <adc_init+0x388>
    1d7a:	e64e      	b.n	1a1a <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    1d7c:	4a24      	ldr	r2, [pc, #144]	; (1e10 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1d7e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1d80:	69f1      	ldr	r1, [r6, #28]
    1d82:	4291      	cmp	r1, r2
    1d84:	dd00      	ble.n	1d88 <adc_init+0x394>
    1d86:	e648      	b.n	1a1a <adc_init+0x26>
    1d88:	6a31      	ldr	r1, [r6, #32]
    1d8a:	4291      	cmp	r1, r2
    1d8c:	dd00      	ble.n	1d90 <adc_init+0x39c>
    1d8e:	e644      	b.n	1a1a <adc_init+0x26>
    1d90:	e761      	b.n	1c56 <adc_init+0x262>
			if (config->differential_mode &&
    1d92:	7cf2      	ldrb	r2, [r6, #19]
    1d94:	2a00      	cmp	r2, #0
    1d96:	d00f      	beq.n	1db8 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    1d98:	69f2      	ldr	r2, [r6, #28]
    1d9a:	2180      	movs	r1, #128	; 0x80
    1d9c:	0089      	lsls	r1, r1, #2
    1d9e:	468c      	mov	ip, r1
    1da0:	4462      	add	r2, ip
			if (config->differential_mode &&
    1da2:	491c      	ldr	r1, [pc, #112]	; (1e14 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1da4:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1da6:	428a      	cmp	r2, r1
    1da8:	d900      	bls.n	1dac <adc_init+0x3b8>
    1daa:	e636      	b.n	1a1a <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    1dac:	6a32      	ldr	r2, [r6, #32]
    1dae:	4462      	add	r2, ip
    1db0:	4918      	ldr	r1, [pc, #96]	; (1e14 <adc_init+0x420>)
    1db2:	428a      	cmp	r2, r1
    1db4:	d900      	bls.n	1db8 <adc_init+0x3c4>
    1db6:	e630      	b.n	1a1a <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1db8:	4a16      	ldr	r2, [pc, #88]	; (1e14 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1dba:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    1dbc:	69f1      	ldr	r1, [r6, #28]
    1dbe:	4291      	cmp	r1, r2
    1dc0:	dd00      	ble.n	1dc4 <adc_init+0x3d0>
    1dc2:	e62a      	b.n	1a1a <adc_init+0x26>
    1dc4:	6a31      	ldr	r1, [r6, #32]
    1dc6:	4291      	cmp	r1, r2
    1dc8:	dd00      	ble.n	1dcc <adc_init+0x3d8>
    1dca:	e626      	b.n	1a1a <adc_init+0x26>
    1dcc:	e743      	b.n	1c56 <adc_init+0x262>
			if (config->differential_mode &&
    1dce:	7cf2      	ldrb	r2, [r6, #19]
    1dd0:	2a00      	cmp	r2, #0
    1dd2:	d00f      	beq.n	1df4 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    1dd4:	69f2      	ldr	r2, [r6, #28]
    1dd6:	2180      	movs	r1, #128	; 0x80
    1dd8:	0209      	lsls	r1, r1, #8
    1dda:	468c      	mov	ip, r1
    1ddc:	4462      	add	r2, ip
			if (config->differential_mode &&
    1dde:	490e      	ldr	r1, [pc, #56]	; (1e18 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1de0:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1de2:	428a      	cmp	r2, r1
    1de4:	d900      	bls.n	1de8 <adc_init+0x3f4>
    1de6:	e618      	b.n	1a1a <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    1de8:	6a32      	ldr	r2, [r6, #32]
    1dea:	4462      	add	r2, ip
    1dec:	490a      	ldr	r1, [pc, #40]	; (1e18 <adc_init+0x424>)
    1dee:	428a      	cmp	r2, r1
    1df0:	d900      	bls.n	1df4 <adc_init+0x400>
    1df2:	e612      	b.n	1a1a <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    1df4:	4a08      	ldr	r2, [pc, #32]	; (1e18 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    1df6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    1df8:	69f1      	ldr	r1, [r6, #28]
    1dfa:	4291      	cmp	r1, r2
    1dfc:	dd00      	ble.n	1e00 <adc_init+0x40c>
    1dfe:	e60c      	b.n	1a1a <adc_init+0x26>
    1e00:	6a31      	ldr	r1, [r6, #32]
    1e02:	4291      	cmp	r1, r2
    1e04:	dd00      	ble.n	1e08 <adc_init+0x414>
    1e06:	e608      	b.n	1a1a <adc_init+0x26>
    1e08:	e725      	b.n	1c56 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    1e0a:	2017      	movs	r0, #23
    1e0c:	e605      	b.n	1a1a <adc_init+0x26>
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	00000fff 	.word	0x00000fff
    1e14:	000003ff 	.word	0x000003ff
    1e18:	0000ffff 	.word	0x0000ffff

00001e1c <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    1e1c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    1e1e:	4b2f      	ldr	r3, [pc, #188]	; (1edc <ADC_Handler+0xc0>)
    1e20:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    1e22:	682b      	ldr	r3, [r5, #0]
    1e24:	7e1a      	ldrb	r2, [r3, #24]
    1e26:	7ddc      	ldrb	r4, [r3, #23]
    1e28:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    1e2a:	07e2      	lsls	r2, r4, #31
    1e2c:	d416      	bmi.n	1e5c <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
    1e2e:	0763      	lsls	r3, r4, #29
    1e30:	d508      	bpl.n	1e44 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1e32:	2304      	movs	r3, #4
    1e34:	682a      	ldr	r2, [r5, #0]
    1e36:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1e38:	7eeb      	ldrb	r3, [r5, #27]
    1e3a:	079b      	lsls	r3, r3, #30
    1e3c:	d502      	bpl.n	1e44 <ADC_Handler+0x28>
    1e3e:	7eab      	ldrb	r3, [r5, #26]
    1e40:	079b      	lsls	r3, r3, #30
    1e42:	d442      	bmi.n	1eca <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    1e44:	07a3      	lsls	r3, r4, #30
    1e46:	d508      	bpl.n	1e5a <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1e48:	2302      	movs	r3, #2
    1e4a:	682a      	ldr	r2, [r5, #0]
    1e4c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    1e4e:	7eeb      	ldrb	r3, [r5, #27]
    1e50:	075b      	lsls	r3, r3, #29
    1e52:	d502      	bpl.n	1e5a <ADC_Handler+0x3e>
    1e54:	7eab      	ldrb	r3, [r5, #26]
    1e56:	075b      	lsls	r3, r3, #29
    1e58:	d43b      	bmi.n	1ed2 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    1e5a:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1e5c:	2201      	movs	r2, #1
    1e5e:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    1e60:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1e62:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
    1e64:	b25b      	sxtb	r3, r3
    1e66:	2b00      	cmp	r3, #0
    1e68:	dbfb      	blt.n	1e62 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    1e6a:	6969      	ldr	r1, [r5, #20]
    1e6c:	1c8b      	adds	r3, r1, #2
    1e6e:	616b      	str	r3, [r5, #20]
    1e70:	8b53      	ldrh	r3, [r2, #26]
    1e72:	b29b      	uxth	r3, r3
    1e74:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
    1e76:	8b2b      	ldrh	r3, [r5, #24]
    1e78:	3b01      	subs	r3, #1
    1e7a:	b29b      	uxth	r3, r3
    1e7c:	832b      	strh	r3, [r5, #24]
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d011      	beq.n	1ea6 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
    1e82:	7f6b      	ldrb	r3, [r5, #29]
    1e84:	2b00      	cmp	r3, #0
    1e86:	d0d2      	beq.n	1e2e <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1e88:	682a      	ldr	r2, [r5, #0]
    1e8a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1e8c:	b25b      	sxtb	r3, r3
    1e8e:	2b00      	cmp	r3, #0
    1e90:	dbfb      	blt.n	1e8a <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1e92:	7b13      	ldrb	r3, [r2, #12]
    1e94:	2102      	movs	r1, #2
    1e96:	430b      	orrs	r3, r1
    1e98:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    1e9a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1e9c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    1e9e:	b25b      	sxtb	r3, r3
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	dbfb      	blt.n	1e9c <ADC_Handler+0x80>
    1ea4:	e7c3      	b.n	1e2e <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    1ea6:	2301      	movs	r3, #1
    1ea8:	682a      	ldr	r2, [r5, #0]
    1eaa:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
    1eac:	7f2b      	ldrb	r3, [r5, #28]
    1eae:	2b05      	cmp	r3, #5
    1eb0:	d1bd      	bne.n	1e2e <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
    1eb2:	2300      	movs	r3, #0
    1eb4:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    1eb6:	7eeb      	ldrb	r3, [r5, #27]
    1eb8:	07db      	lsls	r3, r3, #31
    1eba:	d5b8      	bpl.n	1e2e <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    1ebc:	7eab      	ldrb	r3, [r5, #26]
    1ebe:	07db      	lsls	r3, r3, #31
    1ec0:	d5b5      	bpl.n	1e2e <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1ec2:	0028      	movs	r0, r5
    1ec4:	68ab      	ldr	r3, [r5, #8]
    1ec6:	4798      	blx	r3
    1ec8:	e7b1      	b.n	1e2e <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1eca:	0028      	movs	r0, r5
    1ecc:	68eb      	ldr	r3, [r5, #12]
    1ece:	4798      	blx	r3
    1ed0:	e7b8      	b.n	1e44 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    1ed2:	692b      	ldr	r3, [r5, #16]
    1ed4:	0028      	movs	r0, r5
    1ed6:	4798      	blx	r3
}
    1ed8:	e7bf      	b.n	1e5a <ADC_Handler+0x3e>
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	20000360 	.word	0x20000360

00001ee0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1ee0:	b500      	push	{lr}
    1ee2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1ee4:	ab01      	add	r3, sp, #4
    1ee6:	2280      	movs	r2, #128	; 0x80
    1ee8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1eea:	780a      	ldrb	r2, [r1, #0]
    1eec:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1eee:	784a      	ldrb	r2, [r1, #1]
    1ef0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1ef2:	788a      	ldrb	r2, [r1, #2]
    1ef4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1ef6:	0019      	movs	r1, r3
    1ef8:	4b01      	ldr	r3, [pc, #4]	; (1f00 <port_pin_set_config+0x20>)
    1efa:	4798      	blx	r3
}
    1efc:	b003      	add	sp, #12
    1efe:	bd00      	pop	{pc}
    1f00:	0000306d 	.word	0x0000306d

00001f04 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f06:	46de      	mov	lr, fp
    1f08:	4657      	mov	r7, sl
    1f0a:	464e      	mov	r6, r9
    1f0c:	4645      	mov	r5, r8
    1f0e:	b5e0      	push	{r5, r6, r7, lr}
    1f10:	b087      	sub	sp, #28
    1f12:	4680      	mov	r8, r0
    1f14:	9104      	str	r1, [sp, #16]
    1f16:	0016      	movs	r6, r2
    1f18:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1f1a:	2200      	movs	r2, #0
    1f1c:	2300      	movs	r3, #0
    1f1e:	2100      	movs	r1, #0
    1f20:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1f22:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1f24:	2001      	movs	r0, #1
    1f26:	0021      	movs	r1, r4
    1f28:	9600      	str	r6, [sp, #0]
    1f2a:	9701      	str	r7, [sp, #4]
    1f2c:	465c      	mov	r4, fp
    1f2e:	9403      	str	r4, [sp, #12]
    1f30:	4644      	mov	r4, r8
    1f32:	9405      	str	r4, [sp, #20]
    1f34:	e013      	b.n	1f5e <long_division+0x5a>
    1f36:	2420      	movs	r4, #32
    1f38:	1a64      	subs	r4, r4, r1
    1f3a:	0005      	movs	r5, r0
    1f3c:	40e5      	lsrs	r5, r4
    1f3e:	46a8      	mov	r8, r5
    1f40:	e014      	b.n	1f6c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1f42:	9c00      	ldr	r4, [sp, #0]
    1f44:	9d01      	ldr	r5, [sp, #4]
    1f46:	1b12      	subs	r2, r2, r4
    1f48:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1f4a:	465c      	mov	r4, fp
    1f4c:	464d      	mov	r5, r9
    1f4e:	432c      	orrs	r4, r5
    1f50:	46a3      	mov	fp, r4
    1f52:	9c03      	ldr	r4, [sp, #12]
    1f54:	4645      	mov	r5, r8
    1f56:	432c      	orrs	r4, r5
    1f58:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1f5a:	3901      	subs	r1, #1
    1f5c:	d325      	bcc.n	1faa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1f5e:	2420      	movs	r4, #32
    1f60:	4264      	negs	r4, r4
    1f62:	190c      	adds	r4, r1, r4
    1f64:	d4e7      	bmi.n	1f36 <long_division+0x32>
    1f66:	0005      	movs	r5, r0
    1f68:	40a5      	lsls	r5, r4
    1f6a:	46a8      	mov	r8, r5
    1f6c:	0004      	movs	r4, r0
    1f6e:	408c      	lsls	r4, r1
    1f70:	46a1      	mov	r9, r4
		r = r << 1;
    1f72:	1892      	adds	r2, r2, r2
    1f74:	415b      	adcs	r3, r3
    1f76:	0014      	movs	r4, r2
    1f78:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1f7a:	9e05      	ldr	r6, [sp, #20]
    1f7c:	464f      	mov	r7, r9
    1f7e:	403e      	ands	r6, r7
    1f80:	46b4      	mov	ip, r6
    1f82:	9e04      	ldr	r6, [sp, #16]
    1f84:	4647      	mov	r7, r8
    1f86:	403e      	ands	r6, r7
    1f88:	46b2      	mov	sl, r6
    1f8a:	4666      	mov	r6, ip
    1f8c:	4657      	mov	r7, sl
    1f8e:	433e      	orrs	r6, r7
    1f90:	d003      	beq.n	1f9a <long_division+0x96>
			r |= 0x01;
    1f92:	0006      	movs	r6, r0
    1f94:	4326      	orrs	r6, r4
    1f96:	0032      	movs	r2, r6
    1f98:	002b      	movs	r3, r5
		if (r >= d) {
    1f9a:	9c00      	ldr	r4, [sp, #0]
    1f9c:	9d01      	ldr	r5, [sp, #4]
    1f9e:	429d      	cmp	r5, r3
    1fa0:	d8db      	bhi.n	1f5a <long_division+0x56>
    1fa2:	d1ce      	bne.n	1f42 <long_division+0x3e>
    1fa4:	4294      	cmp	r4, r2
    1fa6:	d8d8      	bhi.n	1f5a <long_division+0x56>
    1fa8:	e7cb      	b.n	1f42 <long_division+0x3e>
    1faa:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1fac:	4658      	mov	r0, fp
    1fae:	0019      	movs	r1, r3
    1fb0:	b007      	add	sp, #28
    1fb2:	bc3c      	pop	{r2, r3, r4, r5}
    1fb4:	4690      	mov	r8, r2
    1fb6:	4699      	mov	r9, r3
    1fb8:	46a2      	mov	sl, r4
    1fba:	46ab      	mov	fp, r5
    1fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001fbe <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1fbe:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1fc0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1fc2:	2340      	movs	r3, #64	; 0x40
    1fc4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1fc6:	4281      	cmp	r1, r0
    1fc8:	d202      	bcs.n	1fd0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1fca:	0018      	movs	r0, r3
    1fcc:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1fce:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1fd0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1fd2:	1c63      	adds	r3, r4, #1
    1fd4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1fd6:	4288      	cmp	r0, r1
    1fd8:	d9f9      	bls.n	1fce <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1fda:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1fdc:	2cff      	cmp	r4, #255	; 0xff
    1fde:	d8f4      	bhi.n	1fca <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1fe0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1fe2:	2300      	movs	r3, #0
    1fe4:	e7f1      	b.n	1fca <_sercom_get_sync_baud_val+0xc>
	...

00001fe8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fea:	b083      	sub	sp, #12
    1fec:	000f      	movs	r7, r1
    1fee:	0016      	movs	r6, r2
    1ff0:	aa08      	add	r2, sp, #32
    1ff2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1ff4:	0004      	movs	r4, r0
    1ff6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ff8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1ffa:	42bc      	cmp	r4, r7
    1ffc:	d902      	bls.n	2004 <STACK_SIZE+0x4>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1ffe:	0010      	movs	r0, r2
    2000:	b003      	add	sp, #12
    2002:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    2004:	2b00      	cmp	r3, #0
    2006:	d114      	bne.n	2032 <STACK_SIZE+0x32>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2008:	0002      	movs	r2, r0
    200a:	0008      	movs	r0, r1
    200c:	2100      	movs	r1, #0
    200e:	4c19      	ldr	r4, [pc, #100]	; (2074 <STACK_SIZE+0x74>)
    2010:	47a0      	blx	r4
    2012:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    2014:	003a      	movs	r2, r7
    2016:	2300      	movs	r3, #0
    2018:	2000      	movs	r0, #0
    201a:	4c17      	ldr	r4, [pc, #92]	; (2078 <STACK_SIZE+0x78>)
    201c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    201e:	2200      	movs	r2, #0
    2020:	2301      	movs	r3, #1
    2022:	1a12      	subs	r2, r2, r0
    2024:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    2026:	0c12      	lsrs	r2, r2, #16
    2028:	041b      	lsls	r3, r3, #16
    202a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    202c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    202e:	2200      	movs	r2, #0
    2030:	e7e5      	b.n	1ffe <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    2032:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    2034:	2b01      	cmp	r3, #1
    2036:	d1f9      	bne.n	202c <STACK_SIZE+0x2c>
		temp1 = ((uint64_t)baudrate * sample_num);
    2038:	000a      	movs	r2, r1
    203a:	2300      	movs	r3, #0
    203c:	2100      	movs	r1, #0
    203e:	4c0d      	ldr	r4, [pc, #52]	; (2074 <STACK_SIZE+0x74>)
    2040:	47a0      	blx	r4
    2042:	0002      	movs	r2, r0
    2044:	000b      	movs	r3, r1
    2046:	9200      	str	r2, [sp, #0]
    2048:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    204a:	0038      	movs	r0, r7
    204c:	2100      	movs	r1, #0
    204e:	4c0a      	ldr	r4, [pc, #40]	; (2078 <STACK_SIZE+0x78>)
    2050:	47a0      	blx	r4
    2052:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    2054:	2380      	movs	r3, #128	; 0x80
    2056:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2058:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    205a:	4298      	cmp	r0, r3
    205c:	d8cf      	bhi.n	1ffe <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    205e:	0f79      	lsrs	r1, r7, #29
    2060:	00f8      	lsls	r0, r7, #3
    2062:	9a00      	ldr	r2, [sp, #0]
    2064:	9b01      	ldr	r3, [sp, #4]
    2066:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    2068:	00ea      	lsls	r2, r5, #3
    206a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    206c:	b2d2      	uxtb	r2, r2
    206e:	0352      	lsls	r2, r2, #13
    2070:	432a      	orrs	r2, r5
    2072:	e7db      	b.n	202c <STACK_SIZE+0x2c>
    2074:	0000481d 	.word	0x0000481d
    2078:	00001f05 	.word	0x00001f05

0000207c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    207c:	b510      	push	{r4, lr}
    207e:	b082      	sub	sp, #8
    2080:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2082:	4b0e      	ldr	r3, [pc, #56]	; (20bc <sercom_set_gclk_generator+0x40>)
    2084:	781b      	ldrb	r3, [r3, #0]
    2086:	2b00      	cmp	r3, #0
    2088:	d007      	beq.n	209a <sercom_set_gclk_generator+0x1e>
    208a:	2900      	cmp	r1, #0
    208c:	d105      	bne.n	209a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    208e:	4b0b      	ldr	r3, [pc, #44]	; (20bc <sercom_set_gclk_generator+0x40>)
    2090:	785b      	ldrb	r3, [r3, #1]
    2092:	4283      	cmp	r3, r0
    2094:	d010      	beq.n	20b8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2096:	201d      	movs	r0, #29
    2098:	e00c      	b.n	20b4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    209a:	a901      	add	r1, sp, #4
    209c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    209e:	2013      	movs	r0, #19
    20a0:	4b07      	ldr	r3, [pc, #28]	; (20c0 <sercom_set_gclk_generator+0x44>)
    20a2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    20a4:	2013      	movs	r0, #19
    20a6:	4b07      	ldr	r3, [pc, #28]	; (20c4 <sercom_set_gclk_generator+0x48>)
    20a8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    20aa:	4b04      	ldr	r3, [pc, #16]	; (20bc <sercom_set_gclk_generator+0x40>)
    20ac:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    20ae:	2201      	movs	r2, #1
    20b0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    20b2:	2000      	movs	r0, #0
}
    20b4:	b002      	add	sp, #8
    20b6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    20b8:	2000      	movs	r0, #0
    20ba:	e7fb      	b.n	20b4 <sercom_set_gclk_generator+0x38>
    20bc:	20000280 	.word	0x20000280
    20c0:	00002f75 	.word	0x00002f75
    20c4:	00002ee9 	.word	0x00002ee9

000020c8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    20c8:	4b40      	ldr	r3, [pc, #256]	; (21cc <_sercom_get_default_pad+0x104>)
    20ca:	4298      	cmp	r0, r3
    20cc:	d031      	beq.n	2132 <_sercom_get_default_pad+0x6a>
    20ce:	d90a      	bls.n	20e6 <_sercom_get_default_pad+0x1e>
    20d0:	4b3f      	ldr	r3, [pc, #252]	; (21d0 <_sercom_get_default_pad+0x108>)
    20d2:	4298      	cmp	r0, r3
    20d4:	d04d      	beq.n	2172 <_sercom_get_default_pad+0xaa>
    20d6:	4b3f      	ldr	r3, [pc, #252]	; (21d4 <_sercom_get_default_pad+0x10c>)
    20d8:	4298      	cmp	r0, r3
    20da:	d05a      	beq.n	2192 <_sercom_get_default_pad+0xca>
    20dc:	4b3e      	ldr	r3, [pc, #248]	; (21d8 <_sercom_get_default_pad+0x110>)
    20de:	4298      	cmp	r0, r3
    20e0:	d037      	beq.n	2152 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    20e2:	2000      	movs	r0, #0
}
    20e4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    20e6:	4b3d      	ldr	r3, [pc, #244]	; (21dc <_sercom_get_default_pad+0x114>)
    20e8:	4298      	cmp	r0, r3
    20ea:	d00c      	beq.n	2106 <_sercom_get_default_pad+0x3e>
    20ec:	4b3c      	ldr	r3, [pc, #240]	; (21e0 <_sercom_get_default_pad+0x118>)
    20ee:	4298      	cmp	r0, r3
    20f0:	d1f7      	bne.n	20e2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    20f2:	2901      	cmp	r1, #1
    20f4:	d017      	beq.n	2126 <_sercom_get_default_pad+0x5e>
    20f6:	2900      	cmp	r1, #0
    20f8:	d05d      	beq.n	21b6 <_sercom_get_default_pad+0xee>
    20fa:	2902      	cmp	r1, #2
    20fc:	d015      	beq.n	212a <_sercom_get_default_pad+0x62>
    20fe:	2903      	cmp	r1, #3
    2100:	d015      	beq.n	212e <_sercom_get_default_pad+0x66>
	return 0;
    2102:	2000      	movs	r0, #0
    2104:	e7ee      	b.n	20e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2106:	2901      	cmp	r1, #1
    2108:	d007      	beq.n	211a <_sercom_get_default_pad+0x52>
    210a:	2900      	cmp	r1, #0
    210c:	d051      	beq.n	21b2 <_sercom_get_default_pad+0xea>
    210e:	2902      	cmp	r1, #2
    2110:	d005      	beq.n	211e <_sercom_get_default_pad+0x56>
    2112:	2903      	cmp	r1, #3
    2114:	d005      	beq.n	2122 <_sercom_get_default_pad+0x5a>
	return 0;
    2116:	2000      	movs	r0, #0
    2118:	e7e4      	b.n	20e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    211a:	4832      	ldr	r0, [pc, #200]	; (21e4 <_sercom_get_default_pad+0x11c>)
    211c:	e7e2      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    211e:	4832      	ldr	r0, [pc, #200]	; (21e8 <_sercom_get_default_pad+0x120>)
    2120:	e7e0      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    2122:	4832      	ldr	r0, [pc, #200]	; (21ec <_sercom_get_default_pad+0x124>)
    2124:	e7de      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    2126:	4832      	ldr	r0, [pc, #200]	; (21f0 <_sercom_get_default_pad+0x128>)
    2128:	e7dc      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    212a:	4832      	ldr	r0, [pc, #200]	; (21f4 <_sercom_get_default_pad+0x12c>)
    212c:	e7da      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    212e:	4832      	ldr	r0, [pc, #200]	; (21f8 <_sercom_get_default_pad+0x130>)
    2130:	e7d8      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    2132:	2901      	cmp	r1, #1
    2134:	d007      	beq.n	2146 <_sercom_get_default_pad+0x7e>
    2136:	2900      	cmp	r1, #0
    2138:	d03f      	beq.n	21ba <_sercom_get_default_pad+0xf2>
    213a:	2902      	cmp	r1, #2
    213c:	d005      	beq.n	214a <_sercom_get_default_pad+0x82>
    213e:	2903      	cmp	r1, #3
    2140:	d005      	beq.n	214e <_sercom_get_default_pad+0x86>
	return 0;
    2142:	2000      	movs	r0, #0
    2144:	e7ce      	b.n	20e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2146:	482d      	ldr	r0, [pc, #180]	; (21fc <_sercom_get_default_pad+0x134>)
    2148:	e7cc      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    214a:	482d      	ldr	r0, [pc, #180]	; (2200 <_sercom_get_default_pad+0x138>)
    214c:	e7ca      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    214e:	482d      	ldr	r0, [pc, #180]	; (2204 <_sercom_get_default_pad+0x13c>)
    2150:	e7c8      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    2152:	2901      	cmp	r1, #1
    2154:	d007      	beq.n	2166 <_sercom_get_default_pad+0x9e>
    2156:	2900      	cmp	r1, #0
    2158:	d031      	beq.n	21be <_sercom_get_default_pad+0xf6>
    215a:	2902      	cmp	r1, #2
    215c:	d005      	beq.n	216a <_sercom_get_default_pad+0xa2>
    215e:	2903      	cmp	r1, #3
    2160:	d005      	beq.n	216e <_sercom_get_default_pad+0xa6>
	return 0;
    2162:	2000      	movs	r0, #0
    2164:	e7be      	b.n	20e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2166:	4828      	ldr	r0, [pc, #160]	; (2208 <_sercom_get_default_pad+0x140>)
    2168:	e7bc      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    216a:	4828      	ldr	r0, [pc, #160]	; (220c <_sercom_get_default_pad+0x144>)
    216c:	e7ba      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    216e:	4828      	ldr	r0, [pc, #160]	; (2210 <_sercom_get_default_pad+0x148>)
    2170:	e7b8      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    2172:	2901      	cmp	r1, #1
    2174:	d007      	beq.n	2186 <_sercom_get_default_pad+0xbe>
    2176:	2900      	cmp	r1, #0
    2178:	d023      	beq.n	21c2 <_sercom_get_default_pad+0xfa>
    217a:	2902      	cmp	r1, #2
    217c:	d005      	beq.n	218a <_sercom_get_default_pad+0xc2>
    217e:	2903      	cmp	r1, #3
    2180:	d005      	beq.n	218e <_sercom_get_default_pad+0xc6>
	return 0;
    2182:	2000      	movs	r0, #0
    2184:	e7ae      	b.n	20e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2186:	4823      	ldr	r0, [pc, #140]	; (2214 <_sercom_get_default_pad+0x14c>)
    2188:	e7ac      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    218a:	4823      	ldr	r0, [pc, #140]	; (2218 <_sercom_get_default_pad+0x150>)
    218c:	e7aa      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    218e:	4823      	ldr	r0, [pc, #140]	; (221c <_sercom_get_default_pad+0x154>)
    2190:	e7a8      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    2192:	2901      	cmp	r1, #1
    2194:	d007      	beq.n	21a6 <_sercom_get_default_pad+0xde>
    2196:	2900      	cmp	r1, #0
    2198:	d015      	beq.n	21c6 <_sercom_get_default_pad+0xfe>
    219a:	2902      	cmp	r1, #2
    219c:	d005      	beq.n	21aa <_sercom_get_default_pad+0xe2>
    219e:	2903      	cmp	r1, #3
    21a0:	d005      	beq.n	21ae <_sercom_get_default_pad+0xe6>
	return 0;
    21a2:	2000      	movs	r0, #0
    21a4:	e79e      	b.n	20e4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    21a6:	481e      	ldr	r0, [pc, #120]	; (2220 <_sercom_get_default_pad+0x158>)
    21a8:	e79c      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    21aa:	481e      	ldr	r0, [pc, #120]	; (2224 <_sercom_get_default_pad+0x15c>)
    21ac:	e79a      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    21ae:	481e      	ldr	r0, [pc, #120]	; (2228 <_sercom_get_default_pad+0x160>)
    21b0:	e798      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    21b2:	481e      	ldr	r0, [pc, #120]	; (222c <_sercom_get_default_pad+0x164>)
    21b4:	e796      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    21b6:	2003      	movs	r0, #3
    21b8:	e794      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    21ba:	481d      	ldr	r0, [pc, #116]	; (2230 <_sercom_get_default_pad+0x168>)
    21bc:	e792      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    21be:	481d      	ldr	r0, [pc, #116]	; (2234 <_sercom_get_default_pad+0x16c>)
    21c0:	e790      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    21c2:	481d      	ldr	r0, [pc, #116]	; (2238 <_sercom_get_default_pad+0x170>)
    21c4:	e78e      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    21c6:	481d      	ldr	r0, [pc, #116]	; (223c <_sercom_get_default_pad+0x174>)
    21c8:	e78c      	b.n	20e4 <_sercom_get_default_pad+0x1c>
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	42001000 	.word	0x42001000
    21d0:	42001800 	.word	0x42001800
    21d4:	42001c00 	.word	0x42001c00
    21d8:	42001400 	.word	0x42001400
    21dc:	42000800 	.word	0x42000800
    21e0:	42000c00 	.word	0x42000c00
    21e4:	00050003 	.word	0x00050003
    21e8:	00060003 	.word	0x00060003
    21ec:	00070003 	.word	0x00070003
    21f0:	00010003 	.word	0x00010003
    21f4:	001e0003 	.word	0x001e0003
    21f8:	001f0003 	.word	0x001f0003
    21fc:	00090003 	.word	0x00090003
    2200:	000a0003 	.word	0x000a0003
    2204:	000b0003 	.word	0x000b0003
    2208:	00110003 	.word	0x00110003
    220c:	00120003 	.word	0x00120003
    2210:	00130003 	.word	0x00130003
    2214:	000d0003 	.word	0x000d0003
    2218:	000e0003 	.word	0x000e0003
    221c:	000f0003 	.word	0x000f0003
    2220:	00170003 	.word	0x00170003
    2224:	00180003 	.word	0x00180003
    2228:	00190003 	.word	0x00190003
    222c:	00040003 	.word	0x00040003
    2230:	00080003 	.word	0x00080003
    2234:	00100003 	.word	0x00100003
    2238:	000c0003 	.word	0x000c0003
    223c:	00160003 	.word	0x00160003

00002240 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2240:	b530      	push	{r4, r5, lr}
    2242:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2244:	4b0b      	ldr	r3, [pc, #44]	; (2274 <_sercom_get_sercom_inst_index+0x34>)
    2246:	466a      	mov	r2, sp
    2248:	cb32      	ldmia	r3!, {r1, r4, r5}
    224a:	c232      	stmia	r2!, {r1, r4, r5}
    224c:	cb32      	ldmia	r3!, {r1, r4, r5}
    224e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2250:	9b00      	ldr	r3, [sp, #0]
    2252:	4283      	cmp	r3, r0
    2254:	d00b      	beq.n	226e <_sercom_get_sercom_inst_index+0x2e>
    2256:	2301      	movs	r3, #1
    2258:	009a      	lsls	r2, r3, #2
    225a:	4669      	mov	r1, sp
    225c:	5852      	ldr	r2, [r2, r1]
    225e:	4282      	cmp	r2, r0
    2260:	d006      	beq.n	2270 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2262:	3301      	adds	r3, #1
    2264:	2b06      	cmp	r3, #6
    2266:	d1f7      	bne.n	2258 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2268:	2000      	movs	r0, #0
}
    226a:	b007      	add	sp, #28
    226c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    226e:	2300      	movs	r3, #0
			return i;
    2270:	b2d8      	uxtb	r0, r3
    2272:	e7fa      	b.n	226a <_sercom_get_sercom_inst_index+0x2a>
    2274:	00006284 	.word	0x00006284

00002278 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2278:	4770      	bx	lr
	...

0000227c <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    227c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    227e:	4b0a      	ldr	r3, [pc, #40]	; (22a8 <_sercom_set_handler+0x2c>)
    2280:	781b      	ldrb	r3, [r3, #0]
    2282:	2b00      	cmp	r3, #0
    2284:	d10c      	bne.n	22a0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2286:	4f09      	ldr	r7, [pc, #36]	; (22ac <_sercom_set_handler+0x30>)
    2288:	4e09      	ldr	r6, [pc, #36]	; (22b0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    228a:	4d0a      	ldr	r5, [pc, #40]	; (22b4 <_sercom_set_handler+0x38>)
    228c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    228e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2290:	195a      	adds	r2, r3, r5
    2292:	6014      	str	r4, [r2, #0]
    2294:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2296:	2b18      	cmp	r3, #24
    2298:	d1f9      	bne.n	228e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    229a:	2201      	movs	r2, #1
    229c:	4b02      	ldr	r3, [pc, #8]	; (22a8 <_sercom_set_handler+0x2c>)
    229e:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    22a0:	0080      	lsls	r0, r0, #2
    22a2:	4b02      	ldr	r3, [pc, #8]	; (22ac <_sercom_set_handler+0x30>)
    22a4:	50c1      	str	r1, [r0, r3]
}
    22a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22a8:	20000282 	.word	0x20000282
    22ac:	20000284 	.word	0x20000284
    22b0:	00002279 	.word	0x00002279
    22b4:	20000364 	.word	0x20000364

000022b8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    22b8:	b500      	push	{lr}
    22ba:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    22bc:	2309      	movs	r3, #9
    22be:	466a      	mov	r2, sp
    22c0:	7013      	strb	r3, [r2, #0]
    22c2:	3301      	adds	r3, #1
    22c4:	7053      	strb	r3, [r2, #1]
    22c6:	3301      	adds	r3, #1
    22c8:	7093      	strb	r3, [r2, #2]
    22ca:	3301      	adds	r3, #1
    22cc:	70d3      	strb	r3, [r2, #3]
    22ce:	3301      	adds	r3, #1
    22d0:	7113      	strb	r3, [r2, #4]
    22d2:	3301      	adds	r3, #1
    22d4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    22d6:	4b03      	ldr	r3, [pc, #12]	; (22e4 <_sercom_get_interrupt_vector+0x2c>)
    22d8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    22da:	466b      	mov	r3, sp
    22dc:	5618      	ldrsb	r0, [r3, r0]
}
    22de:	b003      	add	sp, #12
    22e0:	bd00      	pop	{pc}
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	00002241 	.word	0x00002241

000022e8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    22e8:	b510      	push	{r4, lr}
    22ea:	4b02      	ldr	r3, [pc, #8]	; (22f4 <SERCOM0_Handler+0xc>)
    22ec:	681b      	ldr	r3, [r3, #0]
    22ee:	2000      	movs	r0, #0
    22f0:	4798      	blx	r3
    22f2:	bd10      	pop	{r4, pc}
    22f4:	20000284 	.word	0x20000284

000022f8 <SERCOM1_Handler>:
    22f8:	b510      	push	{r4, lr}
    22fa:	4b02      	ldr	r3, [pc, #8]	; (2304 <SERCOM1_Handler+0xc>)
    22fc:	685b      	ldr	r3, [r3, #4]
    22fe:	2001      	movs	r0, #1
    2300:	4798      	blx	r3
    2302:	bd10      	pop	{r4, pc}
    2304:	20000284 	.word	0x20000284

00002308 <SERCOM2_Handler>:
    2308:	b510      	push	{r4, lr}
    230a:	4b02      	ldr	r3, [pc, #8]	; (2314 <SERCOM2_Handler+0xc>)
    230c:	689b      	ldr	r3, [r3, #8]
    230e:	2002      	movs	r0, #2
    2310:	4798      	blx	r3
    2312:	bd10      	pop	{r4, pc}
    2314:	20000284 	.word	0x20000284

00002318 <SERCOM3_Handler>:
    2318:	b510      	push	{r4, lr}
    231a:	4b02      	ldr	r3, [pc, #8]	; (2324 <SERCOM3_Handler+0xc>)
    231c:	68db      	ldr	r3, [r3, #12]
    231e:	2003      	movs	r0, #3
    2320:	4798      	blx	r3
    2322:	bd10      	pop	{r4, pc}
    2324:	20000284 	.word	0x20000284

00002328 <SERCOM4_Handler>:
    2328:	b510      	push	{r4, lr}
    232a:	4b02      	ldr	r3, [pc, #8]	; (2334 <SERCOM4_Handler+0xc>)
    232c:	691b      	ldr	r3, [r3, #16]
    232e:	2004      	movs	r0, #4
    2330:	4798      	blx	r3
    2332:	bd10      	pop	{r4, pc}
    2334:	20000284 	.word	0x20000284

00002338 <SERCOM5_Handler>:
    2338:	b510      	push	{r4, lr}
    233a:	4b02      	ldr	r3, [pc, #8]	; (2344 <SERCOM5_Handler+0xc>)
    233c:	695b      	ldr	r3, [r3, #20]
    233e:	2005      	movs	r0, #5
    2340:	4798      	blx	r3
    2342:	bd10      	pop	{r4, pc}
    2344:	20000284 	.word	0x20000284

00002348 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2348:	b5f0      	push	{r4, r5, r6, r7, lr}
    234a:	46de      	mov	lr, fp
    234c:	4657      	mov	r7, sl
    234e:	464e      	mov	r6, r9
    2350:	4645      	mov	r5, r8
    2352:	b5e0      	push	{r5, r6, r7, lr}
    2354:	b091      	sub	sp, #68	; 0x44
    2356:	0005      	movs	r5, r0
    2358:	000c      	movs	r4, r1
    235a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    235c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    235e:	0008      	movs	r0, r1
    2360:	4bba      	ldr	r3, [pc, #744]	; (264c <usart_init+0x304>)
    2362:	4798      	blx	r3
    2364:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2366:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2368:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    236a:	07db      	lsls	r3, r3, #31
    236c:	d506      	bpl.n	237c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    236e:	b011      	add	sp, #68	; 0x44
    2370:	bc3c      	pop	{r2, r3, r4, r5}
    2372:	4690      	mov	r8, r2
    2374:	4699      	mov	r9, r3
    2376:	46a2      	mov	sl, r4
    2378:	46ab      	mov	fp, r5
    237a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    237c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    237e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2380:	079b      	lsls	r3, r3, #30
    2382:	d4f4      	bmi.n	236e <usart_init+0x26>
    2384:	49b2      	ldr	r1, [pc, #712]	; (2650 <usart_init+0x308>)
    2386:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2388:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    238a:	2301      	movs	r3, #1
    238c:	40bb      	lsls	r3, r7
    238e:	4303      	orrs	r3, r0
    2390:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2392:	a90f      	add	r1, sp, #60	; 0x3c
    2394:	272d      	movs	r7, #45	; 0x2d
    2396:	5df3      	ldrb	r3, [r6, r7]
    2398:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    239a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    239c:	b2d3      	uxtb	r3, r2
    239e:	9302      	str	r3, [sp, #8]
    23a0:	0018      	movs	r0, r3
    23a2:	4bac      	ldr	r3, [pc, #688]	; (2654 <usart_init+0x30c>)
    23a4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    23a6:	9802      	ldr	r0, [sp, #8]
    23a8:	4bab      	ldr	r3, [pc, #684]	; (2658 <usart_init+0x310>)
    23aa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    23ac:	5df0      	ldrb	r0, [r6, r7]
    23ae:	2100      	movs	r1, #0
    23b0:	4baa      	ldr	r3, [pc, #680]	; (265c <usart_init+0x314>)
    23b2:	4798      	blx	r3
	module->character_size = config->character_size;
    23b4:	7af3      	ldrb	r3, [r6, #11]
    23b6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    23b8:	2324      	movs	r3, #36	; 0x24
    23ba:	5cf3      	ldrb	r3, [r6, r3]
    23bc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    23be:	2325      	movs	r3, #37	; 0x25
    23c0:	5cf3      	ldrb	r3, [r6, r3]
    23c2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    23c4:	7ef3      	ldrb	r3, [r6, #27]
    23c6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    23c8:	7f33      	ldrb	r3, [r6, #28]
    23ca:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    23cc:	682b      	ldr	r3, [r5, #0]
    23ce:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    23d0:	0018      	movs	r0, r3
    23d2:	4b9e      	ldr	r3, [pc, #632]	; (264c <usart_init+0x304>)
    23d4:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    23d6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    23d8:	2200      	movs	r2, #0
    23da:	230e      	movs	r3, #14
    23dc:	a906      	add	r1, sp, #24
    23de:	468c      	mov	ip, r1
    23e0:	4463      	add	r3, ip
    23e2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    23e4:	8a32      	ldrh	r2, [r6, #16]
    23e6:	9202      	str	r2, [sp, #8]
    23e8:	2380      	movs	r3, #128	; 0x80
    23ea:	01db      	lsls	r3, r3, #7
    23ec:	429a      	cmp	r2, r3
    23ee:	d100      	bne.n	23f2 <usart_init+0xaa>
    23f0:	e09a      	b.n	2528 <usart_init+0x1e0>
    23f2:	d90f      	bls.n	2414 <usart_init+0xcc>
    23f4:	23c0      	movs	r3, #192	; 0xc0
    23f6:	01db      	lsls	r3, r3, #7
    23f8:	9a02      	ldr	r2, [sp, #8]
    23fa:	429a      	cmp	r2, r3
    23fc:	d100      	bne.n	2400 <usart_init+0xb8>
    23fe:	e08e      	b.n	251e <usart_init+0x1d6>
    2400:	2380      	movs	r3, #128	; 0x80
    2402:	021b      	lsls	r3, r3, #8
    2404:	429a      	cmp	r2, r3
    2406:	d000      	beq.n	240a <usart_init+0xc2>
    2408:	e11b      	b.n	2642 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    240a:	2303      	movs	r3, #3
    240c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    240e:	2300      	movs	r3, #0
    2410:	9307      	str	r3, [sp, #28]
    2412:	e008      	b.n	2426 <usart_init+0xde>
	switch (config->sample_rate) {
    2414:	2380      	movs	r3, #128	; 0x80
    2416:	019b      	lsls	r3, r3, #6
    2418:	429a      	cmp	r2, r3
    241a:	d000      	beq.n	241e <usart_init+0xd6>
    241c:	e111      	b.n	2642 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    241e:	2310      	movs	r3, #16
    2420:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2422:	3b0f      	subs	r3, #15
    2424:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2426:	6833      	ldr	r3, [r6, #0]
    2428:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    242a:	68f3      	ldr	r3, [r6, #12]
    242c:	469b      	mov	fp, r3
		config->sample_adjustment |
    242e:	6973      	ldr	r3, [r6, #20]
    2430:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2432:	7e33      	ldrb	r3, [r6, #24]
    2434:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2436:	2326      	movs	r3, #38	; 0x26
    2438:	5cf3      	ldrb	r3, [r6, r3]
    243a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    243c:	6873      	ldr	r3, [r6, #4]
    243e:	4699      	mov	r9, r3
	switch (transfer_mode)
    2440:	2b00      	cmp	r3, #0
    2442:	d100      	bne.n	2446 <usart_init+0xfe>
    2444:	e09c      	b.n	2580 <usart_init+0x238>
    2446:	2380      	movs	r3, #128	; 0x80
    2448:	055b      	lsls	r3, r3, #21
    244a:	4599      	cmp	r9, r3
    244c:	d100      	bne.n	2450 <usart_init+0x108>
    244e:	e080      	b.n	2552 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    2450:	7e73      	ldrb	r3, [r6, #25]
    2452:	2b00      	cmp	r3, #0
    2454:	d002      	beq.n	245c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2456:	7eb3      	ldrb	r3, [r6, #26]
    2458:	4642      	mov	r2, r8
    245a:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    245c:	230e      	movs	r3, #14
    245e:	aa06      	add	r2, sp, #24
    2460:	4694      	mov	ip, r2
    2462:	4463      	add	r3, ip
    2464:	881b      	ldrh	r3, [r3, #0]
    2466:	4642      	mov	r2, r8
    2468:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    246a:	9b05      	ldr	r3, [sp, #20]
    246c:	465a      	mov	r2, fp
    246e:	4313      	orrs	r3, r2
    2470:	9a03      	ldr	r2, [sp, #12]
    2472:	4313      	orrs	r3, r2
    2474:	464a      	mov	r2, r9
    2476:	4313      	orrs	r3, r2
    2478:	9f02      	ldr	r7, [sp, #8]
    247a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    247c:	9b04      	ldr	r3, [sp, #16]
    247e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2480:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2482:	4653      	mov	r3, sl
    2484:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2486:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2488:	2327      	movs	r3, #39	; 0x27
    248a:	5cf3      	ldrb	r3, [r6, r3]
    248c:	2b00      	cmp	r3, #0
    248e:	d101      	bne.n	2494 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2490:	3304      	adds	r3, #4
    2492:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2494:	7e73      	ldrb	r3, [r6, #25]
    2496:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2498:	7f32      	ldrb	r2, [r6, #28]
    249a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    249c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    249e:	7f72      	ldrb	r2, [r6, #29]
    24a0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    24a2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    24a4:	2224      	movs	r2, #36	; 0x24
    24a6:	5cb2      	ldrb	r2, [r6, r2]
    24a8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    24aa:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    24ac:	2225      	movs	r2, #37	; 0x25
    24ae:	5cb2      	ldrb	r2, [r6, r2]
    24b0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    24b2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    24b4:	7ab1      	ldrb	r1, [r6, #10]
    24b6:	7af2      	ldrb	r2, [r6, #11]
    24b8:	4311      	orrs	r1, r2
    24ba:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    24bc:	8933      	ldrh	r3, [r6, #8]
    24be:	2bff      	cmp	r3, #255	; 0xff
    24c0:	d100      	bne.n	24c4 <usart_init+0x17c>
    24c2:	e081      	b.n	25c8 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    24c4:	2280      	movs	r2, #128	; 0x80
    24c6:	0452      	lsls	r2, r2, #17
    24c8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    24ca:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    24cc:	232c      	movs	r3, #44	; 0x2c
    24ce:	5cf3      	ldrb	r3, [r6, r3]
    24d0:	2b00      	cmp	r3, #0
    24d2:	d103      	bne.n	24dc <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    24d4:	4b62      	ldr	r3, [pc, #392]	; (2660 <usart_init+0x318>)
    24d6:	789b      	ldrb	r3, [r3, #2]
    24d8:	079b      	lsls	r3, r3, #30
    24da:	d501      	bpl.n	24e0 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    24dc:	2380      	movs	r3, #128	; 0x80
    24de:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    24e0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    24e2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    24e4:	2b00      	cmp	r3, #0
    24e6:	d1fc      	bne.n	24e2 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    24e8:	4643      	mov	r3, r8
    24ea:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    24ec:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    24ee:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    24f0:	2b00      	cmp	r3, #0
    24f2:	d1fc      	bne.n	24ee <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    24f4:	4643      	mov	r3, r8
    24f6:	601f      	str	r7, [r3, #0]
    24f8:	ab0e      	add	r3, sp, #56	; 0x38
    24fa:	2280      	movs	r2, #128	; 0x80
    24fc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    24fe:	2200      	movs	r2, #0
    2500:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2502:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2504:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2506:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2508:	930a      	str	r3, [sp, #40]	; 0x28
    250a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    250c:	930b      	str	r3, [sp, #44]	; 0x2c
    250e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2510:	930c      	str	r3, [sp, #48]	; 0x30
    2512:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2514:	9302      	str	r3, [sp, #8]
    2516:	930d      	str	r3, [sp, #52]	; 0x34
    2518:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    251a:	ae0a      	add	r6, sp, #40	; 0x28
    251c:	e063      	b.n	25e6 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    251e:	2308      	movs	r3, #8
    2520:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2522:	3b07      	subs	r3, #7
    2524:	9307      	str	r3, [sp, #28]
    2526:	e77e      	b.n	2426 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2528:	6833      	ldr	r3, [r6, #0]
    252a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    252c:	68f3      	ldr	r3, [r6, #12]
    252e:	469b      	mov	fp, r3
		config->sample_adjustment |
    2530:	6973      	ldr	r3, [r6, #20]
    2532:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2534:	7e33      	ldrb	r3, [r6, #24]
    2536:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2538:	2326      	movs	r3, #38	; 0x26
    253a:	5cf3      	ldrb	r3, [r6, r3]
    253c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    253e:	6873      	ldr	r3, [r6, #4]
    2540:	4699      	mov	r9, r3
	switch (transfer_mode)
    2542:	2b00      	cmp	r3, #0
    2544:	d018      	beq.n	2578 <usart_init+0x230>
    2546:	2380      	movs	r3, #128	; 0x80
    2548:	055b      	lsls	r3, r3, #21
    254a:	4599      	cmp	r9, r3
    254c:	d001      	beq.n	2552 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    254e:	2000      	movs	r0, #0
    2550:	e025      	b.n	259e <usart_init+0x256>
			if (!config->use_external_clock) {
    2552:	2327      	movs	r3, #39	; 0x27
    2554:	5cf3      	ldrb	r3, [r6, r3]
    2556:	2b00      	cmp	r3, #0
    2558:	d000      	beq.n	255c <usart_init+0x214>
    255a:	e779      	b.n	2450 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    255c:	6a33      	ldr	r3, [r6, #32]
    255e:	001f      	movs	r7, r3
    2560:	b2c0      	uxtb	r0, r0
    2562:	4b40      	ldr	r3, [pc, #256]	; (2664 <usart_init+0x31c>)
    2564:	4798      	blx	r3
    2566:	0001      	movs	r1, r0
    2568:	220e      	movs	r2, #14
    256a:	ab06      	add	r3, sp, #24
    256c:	469c      	mov	ip, r3
    256e:	4462      	add	r2, ip
    2570:	0038      	movs	r0, r7
    2572:	4b3d      	ldr	r3, [pc, #244]	; (2668 <usart_init+0x320>)
    2574:	4798      	blx	r3
    2576:	e012      	b.n	259e <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2578:	2308      	movs	r3, #8
    257a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    257c:	2300      	movs	r3, #0
    257e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2580:	2327      	movs	r3, #39	; 0x27
    2582:	5cf3      	ldrb	r3, [r6, r3]
    2584:	2b00      	cmp	r3, #0
    2586:	d00e      	beq.n	25a6 <usart_init+0x25e>
				status_code =
    2588:	9b06      	ldr	r3, [sp, #24]
    258a:	9300      	str	r3, [sp, #0]
    258c:	9b07      	ldr	r3, [sp, #28]
    258e:	220e      	movs	r2, #14
    2590:	a906      	add	r1, sp, #24
    2592:	468c      	mov	ip, r1
    2594:	4462      	add	r2, ip
    2596:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2598:	6a30      	ldr	r0, [r6, #32]
    259a:	4f34      	ldr	r7, [pc, #208]	; (266c <usart_init+0x324>)
    259c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    259e:	2800      	cmp	r0, #0
    25a0:	d000      	beq.n	25a4 <usart_init+0x25c>
    25a2:	e6e4      	b.n	236e <usart_init+0x26>
    25a4:	e754      	b.n	2450 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    25a6:	6a33      	ldr	r3, [r6, #32]
    25a8:	001f      	movs	r7, r3
    25aa:	b2c0      	uxtb	r0, r0
    25ac:	4b2d      	ldr	r3, [pc, #180]	; (2664 <usart_init+0x31c>)
    25ae:	4798      	blx	r3
    25b0:	0001      	movs	r1, r0
				status_code =
    25b2:	9b06      	ldr	r3, [sp, #24]
    25b4:	9300      	str	r3, [sp, #0]
    25b6:	9b07      	ldr	r3, [sp, #28]
    25b8:	220e      	movs	r2, #14
    25ba:	a806      	add	r0, sp, #24
    25bc:	4684      	mov	ip, r0
    25be:	4462      	add	r2, ip
    25c0:	0038      	movs	r0, r7
    25c2:	4f2a      	ldr	r7, [pc, #168]	; (266c <usart_init+0x324>)
    25c4:	47b8      	blx	r7
    25c6:	e7ea      	b.n	259e <usart_init+0x256>
		if(config->lin_slave_enable) {
    25c8:	7ef3      	ldrb	r3, [r6, #27]
    25ca:	2b00      	cmp	r3, #0
    25cc:	d100      	bne.n	25d0 <usart_init+0x288>
    25ce:	e77d      	b.n	24cc <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    25d0:	2380      	movs	r3, #128	; 0x80
    25d2:	04db      	lsls	r3, r3, #19
    25d4:	431f      	orrs	r7, r3
    25d6:	e779      	b.n	24cc <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    25d8:	0020      	movs	r0, r4
    25da:	4b25      	ldr	r3, [pc, #148]	; (2670 <usart_init+0x328>)
    25dc:	4798      	blx	r3
    25de:	e007      	b.n	25f0 <usart_init+0x2a8>
    25e0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    25e2:	2f04      	cmp	r7, #4
    25e4:	d00d      	beq.n	2602 <usart_init+0x2ba>
    25e6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    25e8:	00bb      	lsls	r3, r7, #2
    25ea:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    25ec:	2800      	cmp	r0, #0
    25ee:	d0f3      	beq.n	25d8 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    25f0:	1c43      	adds	r3, r0, #1
    25f2:	d0f5      	beq.n	25e0 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    25f4:	a90e      	add	r1, sp, #56	; 0x38
    25f6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    25f8:	0c00      	lsrs	r0, r0, #16
    25fa:	b2c0      	uxtb	r0, r0
    25fc:	4b1d      	ldr	r3, [pc, #116]	; (2674 <usart_init+0x32c>)
    25fe:	4798      	blx	r3
    2600:	e7ee      	b.n	25e0 <usart_init+0x298>
		module->callback[i]            = NULL;
    2602:	2300      	movs	r3, #0
    2604:	60eb      	str	r3, [r5, #12]
    2606:	612b      	str	r3, [r5, #16]
    2608:	616b      	str	r3, [r5, #20]
    260a:	61ab      	str	r3, [r5, #24]
    260c:	61eb      	str	r3, [r5, #28]
    260e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2610:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2612:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2614:	2200      	movs	r2, #0
    2616:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2618:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    261a:	3330      	adds	r3, #48	; 0x30
    261c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    261e:	3301      	adds	r3, #1
    2620:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2622:	3301      	adds	r3, #1
    2624:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2626:	3301      	adds	r3, #1
    2628:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    262a:	6828      	ldr	r0, [r5, #0]
    262c:	4b07      	ldr	r3, [pc, #28]	; (264c <usart_init+0x304>)
    262e:	4798      	blx	r3
    2630:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2632:	4911      	ldr	r1, [pc, #68]	; (2678 <usart_init+0x330>)
    2634:	4b11      	ldr	r3, [pc, #68]	; (267c <usart_init+0x334>)
    2636:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2638:	00a4      	lsls	r4, r4, #2
    263a:	4b11      	ldr	r3, [pc, #68]	; (2680 <usart_init+0x338>)
    263c:	50e5      	str	r5, [r4, r3]
	return status_code;
    263e:	2000      	movs	r0, #0
    2640:	e695      	b.n	236e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2642:	2310      	movs	r3, #16
    2644:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2646:	2300      	movs	r3, #0
    2648:	9307      	str	r3, [sp, #28]
    264a:	e6ec      	b.n	2426 <usart_init+0xde>
    264c:	00002241 	.word	0x00002241
    2650:	40000400 	.word	0x40000400
    2654:	00002f75 	.word	0x00002f75
    2658:	00002ee9 	.word	0x00002ee9
    265c:	0000207d 	.word	0x0000207d
    2660:	41002000 	.word	0x41002000
    2664:	00002f91 	.word	0x00002f91
    2668:	00001fbf 	.word	0x00001fbf
    266c:	00001fe9 	.word	0x00001fe9
    2670:	000020c9 	.word	0x000020c9
    2674:	0000306d 	.word	0x0000306d
    2678:	0000279d 	.word	0x0000279d
    267c:	0000227d 	.word	0x0000227d
    2680:	20000364 	.word	0x20000364

00002684 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2684:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2686:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2688:	2a00      	cmp	r2, #0
    268a:	d101      	bne.n	2690 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    268c:	0018      	movs	r0, r3
    268e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2690:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2692:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2694:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2696:	2a00      	cmp	r2, #0
    2698:	d1f8      	bne.n	268c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    269a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    269c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    269e:	2102      	movs	r1, #2
    26a0:	7e13      	ldrb	r3, [r2, #24]
    26a2:	420b      	tst	r3, r1
    26a4:	d0fc      	beq.n	26a0 <usart_write_wait+0x1c>
	return STATUS_OK;
    26a6:	2300      	movs	r3, #0
    26a8:	e7f0      	b.n	268c <usart_write_wait+0x8>

000026aa <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    26aa:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    26ac:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    26ae:	2a00      	cmp	r2, #0
    26b0:	d101      	bne.n	26b6 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    26b2:	0018      	movs	r0, r3
    26b4:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    26b6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    26b8:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    26ba:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    26bc:	2a00      	cmp	r2, #0
    26be:	d1f8      	bne.n	26b2 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    26c0:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    26c2:	7e10      	ldrb	r0, [r2, #24]
    26c4:	0740      	lsls	r0, r0, #29
    26c6:	d5f4      	bpl.n	26b2 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    26c8:	8b53      	ldrh	r3, [r2, #26]
    26ca:	b2db      	uxtb	r3, r3
	if (error_code) {
    26cc:	0698      	lsls	r0, r3, #26
    26ce:	d01d      	beq.n	270c <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    26d0:	0798      	lsls	r0, r3, #30
    26d2:	d503      	bpl.n	26dc <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    26d4:	2302      	movs	r3, #2
    26d6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    26d8:	3318      	adds	r3, #24
    26da:	e7ea      	b.n	26b2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    26dc:	0758      	lsls	r0, r3, #29
    26de:	d503      	bpl.n	26e8 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    26e0:	2304      	movs	r3, #4
    26e2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    26e4:	331a      	adds	r3, #26
    26e6:	e7e4      	b.n	26b2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    26e8:	07d8      	lsls	r0, r3, #31
    26ea:	d503      	bpl.n	26f4 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    26ec:	2301      	movs	r3, #1
    26ee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    26f0:	3312      	adds	r3, #18
    26f2:	e7de      	b.n	26b2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    26f4:	06d8      	lsls	r0, r3, #27
    26f6:	d503      	bpl.n	2700 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    26f8:	2310      	movs	r3, #16
    26fa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    26fc:	3332      	adds	r3, #50	; 0x32
    26fe:	e7d8      	b.n	26b2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2700:	069b      	lsls	r3, r3, #26
    2702:	d503      	bpl.n	270c <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2704:	2320      	movs	r3, #32
    2706:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2708:	3321      	adds	r3, #33	; 0x21
    270a:	e7d2      	b.n	26b2 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    270c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    270e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2710:	2300      	movs	r3, #0
    2712:	e7ce      	b.n	26b2 <usart_read_wait+0x8>

00002714 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2716:	0004      	movs	r4, r0
    2718:	000d      	movs	r5, r1
    271a:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    271c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    271e:	4b0f      	ldr	r3, [pc, #60]	; (275c <_usart_read_buffer+0x48>)
    2720:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2722:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2724:	b29b      	uxth	r3, r3
    2726:	2b00      	cmp	r3, #0
    2728:	d003      	beq.n	2732 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    272a:	4b0d      	ldr	r3, [pc, #52]	; (2760 <_usart_read_buffer+0x4c>)
    272c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    272e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2732:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2734:	4b0a      	ldr	r3, [pc, #40]	; (2760 <_usart_read_buffer+0x4c>)
    2736:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2738:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    273a:	2205      	movs	r2, #5
    273c:	2332      	movs	r3, #50	; 0x32
    273e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2740:	3b2e      	subs	r3, #46	; 0x2e
    2742:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2744:	7a23      	ldrb	r3, [r4, #8]
    2746:	2b00      	cmp	r3, #0
    2748:	d001      	beq.n	274e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    274a:	2320      	movs	r3, #32
    274c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    274e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2750:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2752:	2b00      	cmp	r3, #0
    2754:	d0ec      	beq.n	2730 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2756:	2308      	movs	r3, #8
    2758:	75bb      	strb	r3, [r7, #22]
    275a:	e7e9      	b.n	2730 <_usart_read_buffer+0x1c>
    275c:	00001909 	.word	0x00001909
    2760:	00001949 	.word	0x00001949

00002764 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2764:	1c93      	adds	r3, r2, #2
    2766:	009b      	lsls	r3, r3, #2
    2768:	18c3      	adds	r3, r0, r3
    276a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    276c:	2130      	movs	r1, #48	; 0x30
    276e:	2301      	movs	r3, #1
    2770:	4093      	lsls	r3, r2
    2772:	001a      	movs	r2, r3
    2774:	5c43      	ldrb	r3, [r0, r1]
    2776:	4313      	orrs	r3, r2
    2778:	5443      	strb	r3, [r0, r1]
}
    277a:	4770      	bx	lr

0000277c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    277c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    277e:	2317      	movs	r3, #23
	if (length == 0) {
    2780:	2a00      	cmp	r2, #0
    2782:	d101      	bne.n	2788 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2784:	0018      	movs	r0, r3
    2786:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2788:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    278a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    278c:	2c00      	cmp	r4, #0
    278e:	d0f9      	beq.n	2784 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2790:	4b01      	ldr	r3, [pc, #4]	; (2798 <usart_read_buffer_job+0x1c>)
    2792:	4798      	blx	r3
    2794:	0003      	movs	r3, r0
    2796:	e7f5      	b.n	2784 <usart_read_buffer_job+0x8>
    2798:	00002715 	.word	0x00002715

0000279c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    279e:	0080      	lsls	r0, r0, #2
    27a0:	4b62      	ldr	r3, [pc, #392]	; (292c <_usart_interrupt_handler+0x190>)
    27a2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    27a4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    27a6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    27a8:	2b00      	cmp	r3, #0
    27aa:	d1fc      	bne.n	27a6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    27ac:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    27ae:	7da6      	ldrb	r6, [r4, #22]
    27b0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    27b2:	2330      	movs	r3, #48	; 0x30
    27b4:	5ceb      	ldrb	r3, [r5, r3]
    27b6:	2231      	movs	r2, #49	; 0x31
    27b8:	5caf      	ldrb	r7, [r5, r2]
    27ba:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    27bc:	07f3      	lsls	r3, r6, #31
    27be:	d522      	bpl.n	2806 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    27c0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    27c2:	b29b      	uxth	r3, r3
    27c4:	2b00      	cmp	r3, #0
    27c6:	d01c      	beq.n	2802 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    27c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    27ca:	7813      	ldrb	r3, [r2, #0]
    27cc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    27ce:	1c51      	adds	r1, r2, #1
    27d0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    27d2:	7969      	ldrb	r1, [r5, #5]
    27d4:	2901      	cmp	r1, #1
    27d6:	d00e      	beq.n	27f6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    27d8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    27da:	05db      	lsls	r3, r3, #23
    27dc:	0ddb      	lsrs	r3, r3, #23
    27de:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    27e0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    27e2:	3b01      	subs	r3, #1
    27e4:	b29b      	uxth	r3, r3
    27e6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    27e8:	2b00      	cmp	r3, #0
    27ea:	d10c      	bne.n	2806 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    27ec:	3301      	adds	r3, #1
    27ee:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    27f0:	3301      	adds	r3, #1
    27f2:	75a3      	strb	r3, [r4, #22]
    27f4:	e007      	b.n	2806 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    27f6:	7851      	ldrb	r1, [r2, #1]
    27f8:	0209      	lsls	r1, r1, #8
    27fa:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    27fc:	3202      	adds	r2, #2
    27fe:	62aa      	str	r2, [r5, #40]	; 0x28
    2800:	e7eb      	b.n	27da <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2802:	2301      	movs	r3, #1
    2804:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2806:	07b3      	lsls	r3, r6, #30
    2808:	d506      	bpl.n	2818 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    280a:	2302      	movs	r3, #2
    280c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    280e:	2200      	movs	r2, #0
    2810:	3331      	adds	r3, #49	; 0x31
    2812:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2814:	07fb      	lsls	r3, r7, #31
    2816:	d41a      	bmi.n	284e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2818:	0773      	lsls	r3, r6, #29
    281a:	d565      	bpl.n	28e8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    281c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    281e:	b29b      	uxth	r3, r3
    2820:	2b00      	cmp	r3, #0
    2822:	d05f      	beq.n	28e4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2824:	8b63      	ldrh	r3, [r4, #26]
    2826:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2828:	071a      	lsls	r2, r3, #28
    282a:	d414      	bmi.n	2856 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    282c:	223f      	movs	r2, #63	; 0x3f
    282e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2830:	2b00      	cmp	r3, #0
    2832:	d034      	beq.n	289e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2834:	079a      	lsls	r2, r3, #30
    2836:	d511      	bpl.n	285c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2838:	221a      	movs	r2, #26
    283a:	2332      	movs	r3, #50	; 0x32
    283c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    283e:	3b30      	subs	r3, #48	; 0x30
    2840:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2842:	077b      	lsls	r3, r7, #29
    2844:	d550      	bpl.n	28e8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2846:	0028      	movs	r0, r5
    2848:	696b      	ldr	r3, [r5, #20]
    284a:	4798      	blx	r3
    284c:	e04c      	b.n	28e8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    284e:	0028      	movs	r0, r5
    2850:	68eb      	ldr	r3, [r5, #12]
    2852:	4798      	blx	r3
    2854:	e7e0      	b.n	2818 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2856:	2237      	movs	r2, #55	; 0x37
    2858:	4013      	ands	r3, r2
    285a:	e7e9      	b.n	2830 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    285c:	075a      	lsls	r2, r3, #29
    285e:	d505      	bpl.n	286c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2860:	221e      	movs	r2, #30
    2862:	2332      	movs	r3, #50	; 0x32
    2864:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2866:	3b2e      	subs	r3, #46	; 0x2e
    2868:	8363      	strh	r3, [r4, #26]
    286a:	e7ea      	b.n	2842 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    286c:	07da      	lsls	r2, r3, #31
    286e:	d505      	bpl.n	287c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2870:	2213      	movs	r2, #19
    2872:	2332      	movs	r3, #50	; 0x32
    2874:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2876:	3b31      	subs	r3, #49	; 0x31
    2878:	8363      	strh	r3, [r4, #26]
    287a:	e7e2      	b.n	2842 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    287c:	06da      	lsls	r2, r3, #27
    287e:	d505      	bpl.n	288c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2880:	2242      	movs	r2, #66	; 0x42
    2882:	2332      	movs	r3, #50	; 0x32
    2884:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2886:	3b22      	subs	r3, #34	; 0x22
    2888:	8363      	strh	r3, [r4, #26]
    288a:	e7da      	b.n	2842 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    288c:	2220      	movs	r2, #32
    288e:	421a      	tst	r2, r3
    2890:	d0d7      	beq.n	2842 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2892:	3221      	adds	r2, #33	; 0x21
    2894:	2332      	movs	r3, #50	; 0x32
    2896:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2898:	3b12      	subs	r3, #18
    289a:	8363      	strh	r3, [r4, #26]
    289c:	e7d1      	b.n	2842 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    289e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    28a0:	05db      	lsls	r3, r3, #23
    28a2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    28a4:	b2da      	uxtb	r2, r3
    28a6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    28a8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    28aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    28ac:	1c51      	adds	r1, r2, #1
    28ae:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    28b0:	7969      	ldrb	r1, [r5, #5]
    28b2:	2901      	cmp	r1, #1
    28b4:	d010      	beq.n	28d8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    28b6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    28b8:	3b01      	subs	r3, #1
    28ba:	b29b      	uxth	r3, r3
    28bc:	85ab      	strh	r3, [r5, #44]	; 0x2c
    28be:	2b00      	cmp	r3, #0
    28c0:	d112      	bne.n	28e8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    28c2:	3304      	adds	r3, #4
    28c4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    28c6:	2200      	movs	r2, #0
    28c8:	332e      	adds	r3, #46	; 0x2e
    28ca:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    28cc:	07bb      	lsls	r3, r7, #30
    28ce:	d50b      	bpl.n	28e8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    28d0:	0028      	movs	r0, r5
    28d2:	692b      	ldr	r3, [r5, #16]
    28d4:	4798      	blx	r3
    28d6:	e007      	b.n	28e8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    28d8:	0a1b      	lsrs	r3, r3, #8
    28da:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    28dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    28de:	3301      	adds	r3, #1
    28e0:	626b      	str	r3, [r5, #36]	; 0x24
    28e2:	e7e8      	b.n	28b6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    28e4:	2304      	movs	r3, #4
    28e6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    28e8:	06f3      	lsls	r3, r6, #27
    28ea:	d504      	bpl.n	28f6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    28ec:	2310      	movs	r3, #16
    28ee:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    28f0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    28f2:	06fb      	lsls	r3, r7, #27
    28f4:	d40e      	bmi.n	2914 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    28f6:	06b3      	lsls	r3, r6, #26
    28f8:	d504      	bpl.n	2904 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    28fa:	2320      	movs	r3, #32
    28fc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    28fe:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2900:	073b      	lsls	r3, r7, #28
    2902:	d40b      	bmi.n	291c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2904:	0733      	lsls	r3, r6, #28
    2906:	d504      	bpl.n	2912 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2908:	2308      	movs	r3, #8
    290a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    290c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    290e:	06bb      	lsls	r3, r7, #26
    2910:	d408      	bmi.n	2924 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2914:	0028      	movs	r0, r5
    2916:	69eb      	ldr	r3, [r5, #28]
    2918:	4798      	blx	r3
    291a:	e7ec      	b.n	28f6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    291c:	0028      	movs	r0, r5
    291e:	69ab      	ldr	r3, [r5, #24]
    2920:	4798      	blx	r3
    2922:	e7ef      	b.n	2904 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2924:	6a2b      	ldr	r3, [r5, #32]
    2926:	0028      	movs	r0, r5
    2928:	4798      	blx	r3
}
    292a:	e7f2      	b.n	2912 <_usart_interrupt_handler+0x176>
    292c:	20000364 	.word	0x20000364

00002930 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2930:	b510      	push	{r4, lr}
	switch (clock_source) {
    2932:	2808      	cmp	r0, #8
    2934:	d803      	bhi.n	293e <system_clock_source_get_hz+0xe>
    2936:	0080      	lsls	r0, r0, #2
    2938:	4b1c      	ldr	r3, [pc, #112]	; (29ac <system_clock_source_get_hz+0x7c>)
    293a:	581b      	ldr	r3, [r3, r0]
    293c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    293e:	2000      	movs	r0, #0
    2940:	e032      	b.n	29a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2942:	4b1b      	ldr	r3, [pc, #108]	; (29b0 <system_clock_source_get_hz+0x80>)
    2944:	6918      	ldr	r0, [r3, #16]
    2946:	e02f      	b.n	29a8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2948:	4b1a      	ldr	r3, [pc, #104]	; (29b4 <system_clock_source_get_hz+0x84>)
    294a:	6a1b      	ldr	r3, [r3, #32]
    294c:	059b      	lsls	r3, r3, #22
    294e:	0f9b      	lsrs	r3, r3, #30
    2950:	4819      	ldr	r0, [pc, #100]	; (29b8 <system_clock_source_get_hz+0x88>)
    2952:	40d8      	lsrs	r0, r3
    2954:	e028      	b.n	29a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2956:	4b16      	ldr	r3, [pc, #88]	; (29b0 <system_clock_source_get_hz+0x80>)
    2958:	6958      	ldr	r0, [r3, #20]
    295a:	e025      	b.n	29a8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    295c:	4b14      	ldr	r3, [pc, #80]	; (29b0 <system_clock_source_get_hz+0x80>)
    295e:	681b      	ldr	r3, [r3, #0]
			return 0;
    2960:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2962:	079b      	lsls	r3, r3, #30
    2964:	d520      	bpl.n	29a8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2966:	4913      	ldr	r1, [pc, #76]	; (29b4 <system_clock_source_get_hz+0x84>)
    2968:	2210      	movs	r2, #16
    296a:	68cb      	ldr	r3, [r1, #12]
    296c:	421a      	tst	r2, r3
    296e:	d0fc      	beq.n	296a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2970:	4b0f      	ldr	r3, [pc, #60]	; (29b0 <system_clock_source_get_hz+0x80>)
    2972:	681a      	ldr	r2, [r3, #0]
    2974:	2324      	movs	r3, #36	; 0x24
    2976:	4013      	ands	r3, r2
    2978:	2b04      	cmp	r3, #4
    297a:	d001      	beq.n	2980 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    297c:	480f      	ldr	r0, [pc, #60]	; (29bc <system_clock_source_get_hz+0x8c>)
    297e:	e013      	b.n	29a8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2980:	2000      	movs	r0, #0
    2982:	4b0f      	ldr	r3, [pc, #60]	; (29c0 <system_clock_source_get_hz+0x90>)
    2984:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2986:	4b0a      	ldr	r3, [pc, #40]	; (29b0 <system_clock_source_get_hz+0x80>)
    2988:	689b      	ldr	r3, [r3, #8]
    298a:	041b      	lsls	r3, r3, #16
    298c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    298e:	4358      	muls	r0, r3
    2990:	e00a      	b.n	29a8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2992:	2350      	movs	r3, #80	; 0x50
    2994:	4a07      	ldr	r2, [pc, #28]	; (29b4 <system_clock_source_get_hz+0x84>)
    2996:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2998:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    299a:	075b      	lsls	r3, r3, #29
    299c:	d504      	bpl.n	29a8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    299e:	4b04      	ldr	r3, [pc, #16]	; (29b0 <system_clock_source_get_hz+0x80>)
    29a0:	68d8      	ldr	r0, [r3, #12]
    29a2:	e001      	b.n	29a8 <system_clock_source_get_hz+0x78>
		return 32768UL;
    29a4:	2080      	movs	r0, #128	; 0x80
    29a6:	0200      	lsls	r0, r0, #8
	}
}
    29a8:	bd10      	pop	{r4, pc}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	0000629c 	.word	0x0000629c
    29b0:	2000029c 	.word	0x2000029c
    29b4:	40000800 	.word	0x40000800
    29b8:	007a1200 	.word	0x007a1200
    29bc:	02dc6c00 	.word	0x02dc6c00
    29c0:	00002f91 	.word	0x00002f91

000029c4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    29c4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    29c6:	490c      	ldr	r1, [pc, #48]	; (29f8 <system_clock_source_osc8m_set_config+0x34>)
    29c8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    29ca:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    29cc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    29ce:	7840      	ldrb	r0, [r0, #1]
    29d0:	2201      	movs	r2, #1
    29d2:	4010      	ands	r0, r2
    29d4:	0180      	lsls	r0, r0, #6
    29d6:	2640      	movs	r6, #64	; 0x40
    29d8:	43b3      	bics	r3, r6
    29da:	4303      	orrs	r3, r0
    29dc:	402a      	ands	r2, r5
    29de:	01d2      	lsls	r2, r2, #7
    29e0:	2080      	movs	r0, #128	; 0x80
    29e2:	4383      	bics	r3, r0
    29e4:	4313      	orrs	r3, r2
    29e6:	2203      	movs	r2, #3
    29e8:	4022      	ands	r2, r4
    29ea:	0212      	lsls	r2, r2, #8
    29ec:	4803      	ldr	r0, [pc, #12]	; (29fc <system_clock_source_osc8m_set_config+0x38>)
    29ee:	4003      	ands	r3, r0
    29f0:	4313      	orrs	r3, r2
    29f2:	620b      	str	r3, [r1, #32]
}
    29f4:	bd70      	pop	{r4, r5, r6, pc}
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	40000800 	.word	0x40000800
    29fc:	fffffcff 	.word	0xfffffcff

00002a00 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a02:	46de      	mov	lr, fp
    2a04:	4657      	mov	r7, sl
    2a06:	464e      	mov	r6, r9
    2a08:	4645      	mov	r5, r8
    2a0a:	b5e0      	push	{r5, r6, r7, lr}
    2a0c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2a0e:	4b26      	ldr	r3, [pc, #152]	; (2aa8 <system_clock_source_xosc32k_set_config+0xa8>)
    2a10:	469b      	mov	fp, r3
    2a12:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2a14:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2a16:	7800      	ldrb	r0, [r0, #0]
    2a18:	4242      	negs	r2, r0
    2a1a:	4142      	adcs	r2, r0
    2a1c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2a1e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2a20:	78ca      	ldrb	r2, [r1, #3]
    2a22:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2a24:	790a      	ldrb	r2, [r1, #4]
    2a26:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2a28:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2a2a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2a2c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2a2e:	688a      	ldr	r2, [r1, #8]
    2a30:	491e      	ldr	r1, [pc, #120]	; (2aac <system_clock_source_xosc32k_set_config+0xac>)
    2a32:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2a34:	2101      	movs	r1, #1
    2a36:	464a      	mov	r2, r9
    2a38:	0092      	lsls	r2, r2, #2
    2a3a:	4691      	mov	r9, r2
    2a3c:	2204      	movs	r2, #4
    2a3e:	4393      	bics	r3, r2
    2a40:	464a      	mov	r2, r9
    2a42:	4313      	orrs	r3, r2
    2a44:	4642      	mov	r2, r8
    2a46:	400a      	ands	r2, r1
    2a48:	00d2      	lsls	r2, r2, #3
    2a4a:	4690      	mov	r8, r2
    2a4c:	2208      	movs	r2, #8
    2a4e:	4393      	bics	r3, r2
    2a50:	4642      	mov	r2, r8
    2a52:	4313      	orrs	r3, r2
    2a54:	4662      	mov	r2, ip
    2a56:	400a      	ands	r2, r1
    2a58:	0112      	lsls	r2, r2, #4
    2a5a:	4694      	mov	ip, r2
    2a5c:	2210      	movs	r2, #16
    2a5e:	4393      	bics	r3, r2
    2a60:	4662      	mov	r2, ip
    2a62:	4313      	orrs	r3, r2
    2a64:	4008      	ands	r0, r1
    2a66:	0140      	lsls	r0, r0, #5
    2a68:	2220      	movs	r2, #32
    2a6a:	4393      	bics	r3, r2
    2a6c:	4303      	orrs	r3, r0
    2a6e:	400f      	ands	r7, r1
    2a70:	01bf      	lsls	r7, r7, #6
    2a72:	2040      	movs	r0, #64	; 0x40
    2a74:	4383      	bics	r3, r0
    2a76:	433b      	orrs	r3, r7
    2a78:	400e      	ands	r6, r1
    2a7a:	01f6      	lsls	r6, r6, #7
    2a7c:	3040      	adds	r0, #64	; 0x40
    2a7e:	4383      	bics	r3, r0
    2a80:	4333      	orrs	r3, r6
    2a82:	3879      	subs	r0, #121	; 0x79
    2a84:	4005      	ands	r5, r0
    2a86:	022d      	lsls	r5, r5, #8
    2a88:	4809      	ldr	r0, [pc, #36]	; (2ab0 <system_clock_source_xosc32k_set_config+0xb0>)
    2a8a:	4003      	ands	r3, r0
    2a8c:	432b      	orrs	r3, r5
    2a8e:	4021      	ands	r1, r4
    2a90:	0309      	lsls	r1, r1, #12
    2a92:	4808      	ldr	r0, [pc, #32]	; (2ab4 <system_clock_source_xosc32k_set_config+0xb4>)
    2a94:	4003      	ands	r3, r0
    2a96:	430b      	orrs	r3, r1
    2a98:	465a      	mov	r2, fp
    2a9a:	8293      	strh	r3, [r2, #20]
}
    2a9c:	bc3c      	pop	{r2, r3, r4, r5}
    2a9e:	4690      	mov	r8, r2
    2aa0:	4699      	mov	r9, r3
    2aa2:	46a2      	mov	sl, r4
    2aa4:	46ab      	mov	fp, r5
    2aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aa8:	40000800 	.word	0x40000800
    2aac:	2000029c 	.word	0x2000029c
    2ab0:	fffff8ff 	.word	0xfffff8ff
    2ab4:	ffffefff 	.word	0xffffefff

00002ab8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2ab8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2aba:	7a03      	ldrb	r3, [r0, #8]
    2abc:	069b      	lsls	r3, r3, #26
    2abe:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2ac0:	8942      	ldrh	r2, [r0, #10]
    2ac2:	0592      	lsls	r2, r2, #22
    2ac4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2ac6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2ac8:	4918      	ldr	r1, [pc, #96]	; (2b2c <system_clock_source_dfll_set_config+0x74>)
    2aca:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2acc:	7983      	ldrb	r3, [r0, #6]
    2ace:	79c2      	ldrb	r2, [r0, #7]
    2ad0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2ad2:	8842      	ldrh	r2, [r0, #2]
    2ad4:	8884      	ldrh	r4, [r0, #4]
    2ad6:	4322      	orrs	r2, r4
    2ad8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2ada:	7842      	ldrb	r2, [r0, #1]
    2adc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2ade:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2ae0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2ae2:	7803      	ldrb	r3, [r0, #0]
    2ae4:	2b04      	cmp	r3, #4
    2ae6:	d011      	beq.n	2b0c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2ae8:	2b20      	cmp	r3, #32
    2aea:	d10e      	bne.n	2b0a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2aec:	7b03      	ldrb	r3, [r0, #12]
    2aee:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2af0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2af2:	4313      	orrs	r3, r2
    2af4:	89c2      	ldrh	r2, [r0, #14]
    2af6:	0412      	lsls	r2, r2, #16
    2af8:	490d      	ldr	r1, [pc, #52]	; (2b30 <system_clock_source_dfll_set_config+0x78>)
    2afa:	400a      	ands	r2, r1
    2afc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2afe:	4a0b      	ldr	r2, [pc, #44]	; (2b2c <system_clock_source_dfll_set_config+0x74>)
    2b00:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2b02:	6811      	ldr	r1, [r2, #0]
    2b04:	4b0b      	ldr	r3, [pc, #44]	; (2b34 <system_clock_source_dfll_set_config+0x7c>)
    2b06:	430b      	orrs	r3, r1
    2b08:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2b0a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2b0c:	7b03      	ldrb	r3, [r0, #12]
    2b0e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2b10:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2b12:	4313      	orrs	r3, r2
    2b14:	89c2      	ldrh	r2, [r0, #14]
    2b16:	0412      	lsls	r2, r2, #16
    2b18:	4905      	ldr	r1, [pc, #20]	; (2b30 <system_clock_source_dfll_set_config+0x78>)
    2b1a:	400a      	ands	r2, r1
    2b1c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2b1e:	4a03      	ldr	r2, [pc, #12]	; (2b2c <system_clock_source_dfll_set_config+0x74>)
    2b20:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2b22:	6813      	ldr	r3, [r2, #0]
    2b24:	2104      	movs	r1, #4
    2b26:	430b      	orrs	r3, r1
    2b28:	6013      	str	r3, [r2, #0]
    2b2a:	e7ee      	b.n	2b0a <system_clock_source_dfll_set_config+0x52>
    2b2c:	2000029c 	.word	0x2000029c
    2b30:	03ff0000 	.word	0x03ff0000
    2b34:	00000424 	.word	0x00000424

00002b38 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2b38:	2808      	cmp	r0, #8
    2b3a:	d803      	bhi.n	2b44 <system_clock_source_enable+0xc>
    2b3c:	0080      	lsls	r0, r0, #2
    2b3e:	4b25      	ldr	r3, [pc, #148]	; (2bd4 <system_clock_source_enable+0x9c>)
    2b40:	581b      	ldr	r3, [r3, r0]
    2b42:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2b44:	2017      	movs	r0, #23
    2b46:	e044      	b.n	2bd2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2b48:	4a23      	ldr	r2, [pc, #140]	; (2bd8 <system_clock_source_enable+0xa0>)
    2b4a:	6a13      	ldr	r3, [r2, #32]
    2b4c:	2102      	movs	r1, #2
    2b4e:	430b      	orrs	r3, r1
    2b50:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2b52:	2000      	movs	r0, #0
    2b54:	e03d      	b.n	2bd2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2b56:	4a20      	ldr	r2, [pc, #128]	; (2bd8 <system_clock_source_enable+0xa0>)
    2b58:	6993      	ldr	r3, [r2, #24]
    2b5a:	2102      	movs	r1, #2
    2b5c:	430b      	orrs	r3, r1
    2b5e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2b60:	2000      	movs	r0, #0
		break;
    2b62:	e036      	b.n	2bd2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2b64:	4a1c      	ldr	r2, [pc, #112]	; (2bd8 <system_clock_source_enable+0xa0>)
    2b66:	8a13      	ldrh	r3, [r2, #16]
    2b68:	2102      	movs	r1, #2
    2b6a:	430b      	orrs	r3, r1
    2b6c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2b6e:	2000      	movs	r0, #0
		break;
    2b70:	e02f      	b.n	2bd2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2b72:	4a19      	ldr	r2, [pc, #100]	; (2bd8 <system_clock_source_enable+0xa0>)
    2b74:	8a93      	ldrh	r3, [r2, #20]
    2b76:	2102      	movs	r1, #2
    2b78:	430b      	orrs	r3, r1
    2b7a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2b7c:	2000      	movs	r0, #0
		break;
    2b7e:	e028      	b.n	2bd2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2b80:	4916      	ldr	r1, [pc, #88]	; (2bdc <system_clock_source_enable+0xa4>)
    2b82:	680b      	ldr	r3, [r1, #0]
    2b84:	2202      	movs	r2, #2
    2b86:	4313      	orrs	r3, r2
    2b88:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2b8a:	4b13      	ldr	r3, [pc, #76]	; (2bd8 <system_clock_source_enable+0xa0>)
    2b8c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2b8e:	0019      	movs	r1, r3
    2b90:	320e      	adds	r2, #14
    2b92:	68cb      	ldr	r3, [r1, #12]
    2b94:	421a      	tst	r2, r3
    2b96:	d0fc      	beq.n	2b92 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2b98:	4a10      	ldr	r2, [pc, #64]	; (2bdc <system_clock_source_enable+0xa4>)
    2b9a:	6891      	ldr	r1, [r2, #8]
    2b9c:	4b0e      	ldr	r3, [pc, #56]	; (2bd8 <system_clock_source_enable+0xa0>)
    2b9e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2ba0:	6852      	ldr	r2, [r2, #4]
    2ba2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2ba4:	2200      	movs	r2, #0
    2ba6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ba8:	0019      	movs	r1, r3
    2baa:	3210      	adds	r2, #16
    2bac:	68cb      	ldr	r3, [r1, #12]
    2bae:	421a      	tst	r2, r3
    2bb0:	d0fc      	beq.n	2bac <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2bb2:	4b0a      	ldr	r3, [pc, #40]	; (2bdc <system_clock_source_enable+0xa4>)
    2bb4:	681b      	ldr	r3, [r3, #0]
    2bb6:	b29b      	uxth	r3, r3
    2bb8:	4a07      	ldr	r2, [pc, #28]	; (2bd8 <system_clock_source_enable+0xa0>)
    2bba:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2bbc:	2000      	movs	r0, #0
    2bbe:	e008      	b.n	2bd2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2bc0:	4905      	ldr	r1, [pc, #20]	; (2bd8 <system_clock_source_enable+0xa0>)
    2bc2:	2244      	movs	r2, #68	; 0x44
    2bc4:	5c8b      	ldrb	r3, [r1, r2]
    2bc6:	2002      	movs	r0, #2
    2bc8:	4303      	orrs	r3, r0
    2bca:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2bcc:	2000      	movs	r0, #0
		break;
    2bce:	e000      	b.n	2bd2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2bd0:	2000      	movs	r0, #0
}
    2bd2:	4770      	bx	lr
    2bd4:	000062c0 	.word	0x000062c0
    2bd8:	40000800 	.word	0x40000800
    2bdc:	2000029c 	.word	0x2000029c

00002be0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2be2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2be4:	22c2      	movs	r2, #194	; 0xc2
    2be6:	00d2      	lsls	r2, r2, #3
    2be8:	4b47      	ldr	r3, [pc, #284]	; (2d08 <system_clock_init+0x128>)
    2bea:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2bec:	4947      	ldr	r1, [pc, #284]	; (2d0c <system_clock_init+0x12c>)
    2bee:	684b      	ldr	r3, [r1, #4]
    2bf0:	221e      	movs	r2, #30
    2bf2:	4393      	bics	r3, r2
    2bf4:	3a1c      	subs	r2, #28
    2bf6:	4313      	orrs	r3, r2
    2bf8:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2bfa:	ab01      	add	r3, sp, #4
    2bfc:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2bfe:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2c00:	4d43      	ldr	r5, [pc, #268]	; (2d10 <system_clock_init+0x130>)
    2c02:	b2e0      	uxtb	r0, r4
    2c04:	a901      	add	r1, sp, #4
    2c06:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2c08:	3401      	adds	r4, #1
    2c0a:	2c25      	cmp	r4, #37	; 0x25
    2c0c:	d1f9      	bne.n	2c02 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2c0e:	a80a      	add	r0, sp, #40	; 0x28
    2c10:	2300      	movs	r3, #0
    2c12:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2c14:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2c16:	2280      	movs	r2, #128	; 0x80
    2c18:	0212      	lsls	r2, r2, #8
    2c1a:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2c1c:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2c1e:	2201      	movs	r2, #1
    2c20:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2c22:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    2c24:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2c26:	3205      	adds	r2, #5
    2c28:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2c2a:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2c2c:	4b39      	ldr	r3, [pc, #228]	; (2d14 <system_clock_init+0x134>)
    2c2e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2c30:	2005      	movs	r0, #5
    2c32:	4b39      	ldr	r3, [pc, #228]	; (2d18 <system_clock_init+0x138>)
    2c34:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2c36:	4934      	ldr	r1, [pc, #208]	; (2d08 <system_clock_init+0x128>)
    2c38:	2202      	movs	r2, #2
    2c3a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2c3c:	421a      	tst	r2, r3
    2c3e:	d0fc      	beq.n	2c3a <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2c40:	4a31      	ldr	r2, [pc, #196]	; (2d08 <system_clock_init+0x128>)
    2c42:	8a93      	ldrh	r3, [r2, #20]
    2c44:	2180      	movs	r1, #128	; 0x80
    2c46:	430b      	orrs	r3, r1
    2c48:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2c4a:	ab05      	add	r3, sp, #20
    2c4c:	2100      	movs	r1, #0
    2c4e:	2200      	movs	r2, #0
    2c50:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2c52:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2c54:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2c56:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2c58:	313f      	adds	r1, #63	; 0x3f
    2c5a:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2c5c:	393b      	subs	r1, #59	; 0x3b
    2c5e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2c60:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2c62:	4b2e      	ldr	r3, [pc, #184]	; (2d1c <system_clock_init+0x13c>)
    2c64:	681b      	ldr	r3, [r3, #0]
    2c66:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2c68:	2b3f      	cmp	r3, #63	; 0x3f
    2c6a:	d04b      	beq.n	2d04 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2c6c:	a805      	add	r0, sp, #20
    2c6e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2c70:	23b7      	movs	r3, #183	; 0xb7
    2c72:	00db      	lsls	r3, r3, #3
    2c74:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2c76:	2307      	movs	r3, #7
    2c78:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2c7a:	3338      	adds	r3, #56	; 0x38
    2c7c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2c7e:	4b28      	ldr	r3, [pc, #160]	; (2d20 <system_clock_init+0x140>)
    2c80:	4798      	blx	r3
	config->run_in_standby  = false;
    2c82:	a804      	add	r0, sp, #16
    2c84:	2500      	movs	r5, #0
    2c86:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2c88:	2601      	movs	r6, #1
    2c8a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2c8c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2c8e:	4b25      	ldr	r3, [pc, #148]	; (2d24 <system_clock_init+0x144>)
    2c90:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2c92:	2006      	movs	r0, #6
    2c94:	4f20      	ldr	r7, [pc, #128]	; (2d18 <system_clock_init+0x138>)
    2c96:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2c98:	4b23      	ldr	r3, [pc, #140]	; (2d28 <system_clock_init+0x148>)
    2c9a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2c9c:	ac01      	add	r4, sp, #4
    2c9e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2ca0:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2ca2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2ca4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2ca6:	2305      	movs	r3, #5
    2ca8:	7023      	strb	r3, [r4, #0]
    2caa:	0021      	movs	r1, r4
    2cac:	2001      	movs	r0, #1
    2cae:	4b1f      	ldr	r3, [pc, #124]	; (2d2c <system_clock_init+0x14c>)
    2cb0:	4798      	blx	r3
    2cb2:	2001      	movs	r0, #1
    2cb4:	4b1e      	ldr	r3, [pc, #120]	; (2d30 <system_clock_init+0x150>)
    2cb6:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2cb8:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2cba:	0021      	movs	r1, r4
    2cbc:	2000      	movs	r0, #0
    2cbe:	4b14      	ldr	r3, [pc, #80]	; (2d10 <system_clock_init+0x130>)
    2cc0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2cc2:	2000      	movs	r0, #0
    2cc4:	4b1b      	ldr	r3, [pc, #108]	; (2d34 <system_clock_init+0x154>)
    2cc6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2cc8:	2007      	movs	r0, #7
    2cca:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2ccc:	490e      	ldr	r1, [pc, #56]	; (2d08 <system_clock_init+0x128>)
    2cce:	22d0      	movs	r2, #208	; 0xd0
    2cd0:	68cb      	ldr	r3, [r1, #12]
    2cd2:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2cd4:	2bd0      	cmp	r3, #208	; 0xd0
    2cd6:	d1fb      	bne.n	2cd0 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    2cd8:	4a17      	ldr	r2, [pc, #92]	; (2d38 <system_clock_init+0x158>)
    2cda:	2300      	movs	r3, #0
    2cdc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2cde:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2ce0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2ce2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2ce4:	a901      	add	r1, sp, #4
    2ce6:	2201      	movs	r2, #1
    2ce8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2cea:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2cec:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2cee:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2cf0:	3307      	adds	r3, #7
    2cf2:	700b      	strb	r3, [r1, #0]
    2cf4:	2000      	movs	r0, #0
    2cf6:	4b0d      	ldr	r3, [pc, #52]	; (2d2c <system_clock_init+0x14c>)
    2cf8:	4798      	blx	r3
    2cfa:	2000      	movs	r0, #0
    2cfc:	4b0c      	ldr	r3, [pc, #48]	; (2d30 <system_clock_init+0x150>)
    2cfe:	4798      	blx	r3
#endif
}
    2d00:	b00f      	add	sp, #60	; 0x3c
    2d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    2d04:	3b20      	subs	r3, #32
    2d06:	e7b1      	b.n	2c6c <system_clock_init+0x8c>
    2d08:	40000800 	.word	0x40000800
    2d0c:	41004000 	.word	0x41004000
    2d10:	00002f75 	.word	0x00002f75
    2d14:	00002a01 	.word	0x00002a01
    2d18:	00002b39 	.word	0x00002b39
    2d1c:	00806024 	.word	0x00806024
    2d20:	00002ab9 	.word	0x00002ab9
    2d24:	000029c5 	.word	0x000029c5
    2d28:	00002d3d 	.word	0x00002d3d
    2d2c:	00002d61 	.word	0x00002d61
    2d30:	00002e19 	.word	0x00002e19
    2d34:	00002ee9 	.word	0x00002ee9
    2d38:	40000400 	.word	0x40000400

00002d3c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2d3c:	4a06      	ldr	r2, [pc, #24]	; (2d58 <system_gclk_init+0x1c>)
    2d3e:	6993      	ldr	r3, [r2, #24]
    2d40:	2108      	movs	r1, #8
    2d42:	430b      	orrs	r3, r1
    2d44:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2d46:	2201      	movs	r2, #1
    2d48:	4b04      	ldr	r3, [pc, #16]	; (2d5c <system_gclk_init+0x20>)
    2d4a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2d4c:	0019      	movs	r1, r3
    2d4e:	780b      	ldrb	r3, [r1, #0]
    2d50:	4213      	tst	r3, r2
    2d52:	d1fc      	bne.n	2d4e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2d54:	4770      	bx	lr
    2d56:	46c0      	nop			; (mov r8, r8)
    2d58:	40000400 	.word	0x40000400
    2d5c:	40000c00 	.word	0x40000c00

00002d60 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2d60:	b570      	push	{r4, r5, r6, lr}
    2d62:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2d64:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2d66:	780d      	ldrb	r5, [r1, #0]
    2d68:	022d      	lsls	r5, r5, #8
    2d6a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2d6c:	784b      	ldrb	r3, [r1, #1]
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d002      	beq.n	2d78 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2d72:	2380      	movs	r3, #128	; 0x80
    2d74:	02db      	lsls	r3, r3, #11
    2d76:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2d78:	7a4b      	ldrb	r3, [r1, #9]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d002      	beq.n	2d84 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2d7e:	2380      	movs	r3, #128	; 0x80
    2d80:	031b      	lsls	r3, r3, #12
    2d82:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2d84:	6848      	ldr	r0, [r1, #4]
    2d86:	2801      	cmp	r0, #1
    2d88:	d910      	bls.n	2dac <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2d8a:	1e43      	subs	r3, r0, #1
    2d8c:	4218      	tst	r0, r3
    2d8e:	d134      	bne.n	2dfa <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2d90:	2802      	cmp	r0, #2
    2d92:	d930      	bls.n	2df6 <system_gclk_gen_set_config+0x96>
    2d94:	2302      	movs	r3, #2
    2d96:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2d98:	3201      	adds	r2, #1
						mask <<= 1) {
    2d9a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2d9c:	4298      	cmp	r0, r3
    2d9e:	d8fb      	bhi.n	2d98 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2da0:	0212      	lsls	r2, r2, #8
    2da2:	4332      	orrs	r2, r6
    2da4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2da6:	2380      	movs	r3, #128	; 0x80
    2da8:	035b      	lsls	r3, r3, #13
    2daa:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2dac:	7a0b      	ldrb	r3, [r1, #8]
    2dae:	2b00      	cmp	r3, #0
    2db0:	d002      	beq.n	2db8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2db2:	2380      	movs	r3, #128	; 0x80
    2db4:	039b      	lsls	r3, r3, #14
    2db6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2db8:	4a13      	ldr	r2, [pc, #76]	; (2e08 <system_gclk_gen_set_config+0xa8>)
    2dba:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2dbc:	b25b      	sxtb	r3, r3
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	dbfb      	blt.n	2dba <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2dc2:	4b12      	ldr	r3, [pc, #72]	; (2e0c <system_gclk_gen_set_config+0xac>)
    2dc4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2dc6:	4b12      	ldr	r3, [pc, #72]	; (2e10 <system_gclk_gen_set_config+0xb0>)
    2dc8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2dca:	4a0f      	ldr	r2, [pc, #60]	; (2e08 <system_gclk_gen_set_config+0xa8>)
    2dcc:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2dce:	b25b      	sxtb	r3, r3
    2dd0:	2b00      	cmp	r3, #0
    2dd2:	dbfb      	blt.n	2dcc <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2dd4:	4b0c      	ldr	r3, [pc, #48]	; (2e08 <system_gclk_gen_set_config+0xa8>)
    2dd6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2dd8:	001a      	movs	r2, r3
    2dda:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2ddc:	b25b      	sxtb	r3, r3
    2dde:	2b00      	cmp	r3, #0
    2de0:	dbfb      	blt.n	2dda <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2de2:	4a09      	ldr	r2, [pc, #36]	; (2e08 <system_gclk_gen_set_config+0xa8>)
    2de4:	6853      	ldr	r3, [r2, #4]
    2de6:	2180      	movs	r1, #128	; 0x80
    2de8:	0249      	lsls	r1, r1, #9
    2dea:	400b      	ands	r3, r1
    2dec:	431d      	orrs	r5, r3
    2dee:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2df0:	4b08      	ldr	r3, [pc, #32]	; (2e14 <system_gclk_gen_set_config+0xb4>)
    2df2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2df4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2df6:	2200      	movs	r2, #0
    2df8:	e7d2      	b.n	2da0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2dfa:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2dfc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2dfe:	2380      	movs	r3, #128	; 0x80
    2e00:	029b      	lsls	r3, r3, #10
    2e02:	431d      	orrs	r5, r3
    2e04:	e7d2      	b.n	2dac <system_gclk_gen_set_config+0x4c>
    2e06:	46c0      	nop			; (mov r8, r8)
    2e08:	40000c00 	.word	0x40000c00
    2e0c:	00001909 	.word	0x00001909
    2e10:	40000c08 	.word	0x40000c08
    2e14:	00001949 	.word	0x00001949

00002e18 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2e18:	b510      	push	{r4, lr}
    2e1a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e1c:	4a0b      	ldr	r2, [pc, #44]	; (2e4c <system_gclk_gen_enable+0x34>)
    2e1e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e20:	b25b      	sxtb	r3, r3
    2e22:	2b00      	cmp	r3, #0
    2e24:	dbfb      	blt.n	2e1e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2e26:	4b0a      	ldr	r3, [pc, #40]	; (2e50 <system_gclk_gen_enable+0x38>)
    2e28:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e2a:	4b0a      	ldr	r3, [pc, #40]	; (2e54 <system_gclk_gen_enable+0x3c>)
    2e2c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e2e:	4a07      	ldr	r2, [pc, #28]	; (2e4c <system_gclk_gen_enable+0x34>)
    2e30:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e32:	b25b      	sxtb	r3, r3
    2e34:	2b00      	cmp	r3, #0
    2e36:	dbfb      	blt.n	2e30 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2e38:	4a04      	ldr	r2, [pc, #16]	; (2e4c <system_gclk_gen_enable+0x34>)
    2e3a:	6851      	ldr	r1, [r2, #4]
    2e3c:	2380      	movs	r3, #128	; 0x80
    2e3e:	025b      	lsls	r3, r3, #9
    2e40:	430b      	orrs	r3, r1
    2e42:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2e44:	4b04      	ldr	r3, [pc, #16]	; (2e58 <system_gclk_gen_enable+0x40>)
    2e46:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2e48:	bd10      	pop	{r4, pc}
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	40000c00 	.word	0x40000c00
    2e50:	00001909 	.word	0x00001909
    2e54:	40000c04 	.word	0x40000c04
    2e58:	00001949 	.word	0x00001949

00002e5c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2e5c:	b570      	push	{r4, r5, r6, lr}
    2e5e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e60:	4a1a      	ldr	r2, [pc, #104]	; (2ecc <system_gclk_gen_get_hz+0x70>)
    2e62:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e64:	b25b      	sxtb	r3, r3
    2e66:	2b00      	cmp	r3, #0
    2e68:	dbfb      	blt.n	2e62 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2e6a:	4b19      	ldr	r3, [pc, #100]	; (2ed0 <system_gclk_gen_get_hz+0x74>)
    2e6c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e6e:	4b19      	ldr	r3, [pc, #100]	; (2ed4 <system_gclk_gen_get_hz+0x78>)
    2e70:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e72:	4a16      	ldr	r2, [pc, #88]	; (2ecc <system_gclk_gen_get_hz+0x70>)
    2e74:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e76:	b25b      	sxtb	r3, r3
    2e78:	2b00      	cmp	r3, #0
    2e7a:	dbfb      	blt.n	2e74 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2e7c:	4e13      	ldr	r6, [pc, #76]	; (2ecc <system_gclk_gen_get_hz+0x70>)
    2e7e:	6870      	ldr	r0, [r6, #4]
    2e80:	04c0      	lsls	r0, r0, #19
    2e82:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2e84:	4b14      	ldr	r3, [pc, #80]	; (2ed8 <system_gclk_gen_get_hz+0x7c>)
    2e86:	4798      	blx	r3
    2e88:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2e8a:	4b12      	ldr	r3, [pc, #72]	; (2ed4 <system_gclk_gen_get_hz+0x78>)
    2e8c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2e8e:	6876      	ldr	r6, [r6, #4]
    2e90:	02f6      	lsls	r6, r6, #11
    2e92:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2e94:	4b11      	ldr	r3, [pc, #68]	; (2edc <system_gclk_gen_get_hz+0x80>)
    2e96:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2e98:	4a0c      	ldr	r2, [pc, #48]	; (2ecc <system_gclk_gen_get_hz+0x70>)
    2e9a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2e9c:	b25b      	sxtb	r3, r3
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	dbfb      	blt.n	2e9a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2ea2:	4b0a      	ldr	r3, [pc, #40]	; (2ecc <system_gclk_gen_get_hz+0x70>)
    2ea4:	689c      	ldr	r4, [r3, #8]
    2ea6:	0224      	lsls	r4, r4, #8
    2ea8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2eaa:	4b0d      	ldr	r3, [pc, #52]	; (2ee0 <system_gclk_gen_get_hz+0x84>)
    2eac:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2eae:	2e00      	cmp	r6, #0
    2eb0:	d107      	bne.n	2ec2 <system_gclk_gen_get_hz+0x66>
    2eb2:	2c01      	cmp	r4, #1
    2eb4:	d907      	bls.n	2ec6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2eb6:	0021      	movs	r1, r4
    2eb8:	0028      	movs	r0, r5
    2eba:	4b0a      	ldr	r3, [pc, #40]	; (2ee4 <system_gclk_gen_get_hz+0x88>)
    2ebc:	4798      	blx	r3
    2ebe:	0005      	movs	r5, r0
    2ec0:	e001      	b.n	2ec6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2ec2:	3401      	adds	r4, #1
    2ec4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2ec6:	0028      	movs	r0, r5
    2ec8:	bd70      	pop	{r4, r5, r6, pc}
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	40000c00 	.word	0x40000c00
    2ed0:	00001909 	.word	0x00001909
    2ed4:	40000c04 	.word	0x40000c04
    2ed8:	00002931 	.word	0x00002931
    2edc:	40000c08 	.word	0x40000c08
    2ee0:	00001949 	.word	0x00001949
    2ee4:	00004531 	.word	0x00004531

00002ee8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2ee8:	b510      	push	{r4, lr}
    2eea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2eec:	4b06      	ldr	r3, [pc, #24]	; (2f08 <system_gclk_chan_enable+0x20>)
    2eee:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2ef0:	4b06      	ldr	r3, [pc, #24]	; (2f0c <system_gclk_chan_enable+0x24>)
    2ef2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2ef4:	4a06      	ldr	r2, [pc, #24]	; (2f10 <system_gclk_chan_enable+0x28>)
    2ef6:	8853      	ldrh	r3, [r2, #2]
    2ef8:	2180      	movs	r1, #128	; 0x80
    2efa:	01c9      	lsls	r1, r1, #7
    2efc:	430b      	orrs	r3, r1
    2efe:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2f00:	4b04      	ldr	r3, [pc, #16]	; (2f14 <system_gclk_chan_enable+0x2c>)
    2f02:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2f04:	bd10      	pop	{r4, pc}
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	00001909 	.word	0x00001909
    2f0c:	40000c02 	.word	0x40000c02
    2f10:	40000c00 	.word	0x40000c00
    2f14:	00001949 	.word	0x00001949

00002f18 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2f18:	b510      	push	{r4, lr}
    2f1a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2f1c:	4b0f      	ldr	r3, [pc, #60]	; (2f5c <system_gclk_chan_disable+0x44>)
    2f1e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2f20:	4b0f      	ldr	r3, [pc, #60]	; (2f60 <system_gclk_chan_disable+0x48>)
    2f22:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2f24:	4a0f      	ldr	r2, [pc, #60]	; (2f64 <system_gclk_chan_disable+0x4c>)
    2f26:	8853      	ldrh	r3, [r2, #2]
    2f28:	051b      	lsls	r3, r3, #20
    2f2a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2f2c:	8853      	ldrh	r3, [r2, #2]
    2f2e:	490e      	ldr	r1, [pc, #56]	; (2f68 <system_gclk_chan_disable+0x50>)
    2f30:	400b      	ands	r3, r1
    2f32:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2f34:	8853      	ldrh	r3, [r2, #2]
    2f36:	490d      	ldr	r1, [pc, #52]	; (2f6c <system_gclk_chan_disable+0x54>)
    2f38:	400b      	ands	r3, r1
    2f3a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2f3c:	0011      	movs	r1, r2
    2f3e:	2280      	movs	r2, #128	; 0x80
    2f40:	01d2      	lsls	r2, r2, #7
    2f42:	884b      	ldrh	r3, [r1, #2]
    2f44:	4213      	tst	r3, r2
    2f46:	d1fc      	bne.n	2f42 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2f48:	4906      	ldr	r1, [pc, #24]	; (2f64 <system_gclk_chan_disable+0x4c>)
    2f4a:	884a      	ldrh	r2, [r1, #2]
    2f4c:	0203      	lsls	r3, r0, #8
    2f4e:	4806      	ldr	r0, [pc, #24]	; (2f68 <system_gclk_chan_disable+0x50>)
    2f50:	4002      	ands	r2, r0
    2f52:	4313      	orrs	r3, r2
    2f54:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2f56:	4b06      	ldr	r3, [pc, #24]	; (2f70 <system_gclk_chan_disable+0x58>)
    2f58:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2f5a:	bd10      	pop	{r4, pc}
    2f5c:	00001909 	.word	0x00001909
    2f60:	40000c02 	.word	0x40000c02
    2f64:	40000c00 	.word	0x40000c00
    2f68:	fffff0ff 	.word	0xfffff0ff
    2f6c:	ffffbfff 	.word	0xffffbfff
    2f70:	00001949 	.word	0x00001949

00002f74 <system_gclk_chan_set_config>:
{
    2f74:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2f76:	780c      	ldrb	r4, [r1, #0]
    2f78:	0224      	lsls	r4, r4, #8
    2f7a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2f7c:	4b02      	ldr	r3, [pc, #8]	; (2f88 <system_gclk_chan_set_config+0x14>)
    2f7e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2f80:	b2a4      	uxth	r4, r4
    2f82:	4b02      	ldr	r3, [pc, #8]	; (2f8c <system_gclk_chan_set_config+0x18>)
    2f84:	805c      	strh	r4, [r3, #2]
}
    2f86:	bd10      	pop	{r4, pc}
    2f88:	00002f19 	.word	0x00002f19
    2f8c:	40000c00 	.word	0x40000c00

00002f90 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2f90:	b510      	push	{r4, lr}
    2f92:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2f94:	4b06      	ldr	r3, [pc, #24]	; (2fb0 <system_gclk_chan_get_hz+0x20>)
    2f96:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2f98:	4b06      	ldr	r3, [pc, #24]	; (2fb4 <system_gclk_chan_get_hz+0x24>)
    2f9a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2f9c:	4b06      	ldr	r3, [pc, #24]	; (2fb8 <system_gclk_chan_get_hz+0x28>)
    2f9e:	885c      	ldrh	r4, [r3, #2]
    2fa0:	0524      	lsls	r4, r4, #20
    2fa2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2fa4:	4b05      	ldr	r3, [pc, #20]	; (2fbc <system_gclk_chan_get_hz+0x2c>)
    2fa6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2fa8:	0020      	movs	r0, r4
    2faa:	4b05      	ldr	r3, [pc, #20]	; (2fc0 <system_gclk_chan_get_hz+0x30>)
    2fac:	4798      	blx	r3
}
    2fae:	bd10      	pop	{r4, pc}
    2fb0:	00001909 	.word	0x00001909
    2fb4:	40000c02 	.word	0x40000c02
    2fb8:	40000c00 	.word	0x40000c00
    2fbc:	00001949 	.word	0x00001949
    2fc0:	00002e5d 	.word	0x00002e5d

00002fc4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2fc4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2fc6:	78d3      	ldrb	r3, [r2, #3]
    2fc8:	2b00      	cmp	r3, #0
    2fca:	d135      	bne.n	3038 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2fcc:	7813      	ldrb	r3, [r2, #0]
    2fce:	2b80      	cmp	r3, #128	; 0x80
    2fd0:	d029      	beq.n	3026 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2fd2:	061b      	lsls	r3, r3, #24
    2fd4:	2480      	movs	r4, #128	; 0x80
    2fd6:	0264      	lsls	r4, r4, #9
    2fd8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2fda:	7854      	ldrb	r4, [r2, #1]
    2fdc:	2502      	movs	r5, #2
    2fde:	43ac      	bics	r4, r5
    2fe0:	d106      	bne.n	2ff0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2fe2:	7894      	ldrb	r4, [r2, #2]
    2fe4:	2c00      	cmp	r4, #0
    2fe6:	d120      	bne.n	302a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2fe8:	2480      	movs	r4, #128	; 0x80
    2fea:	02a4      	lsls	r4, r4, #10
    2fec:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2fee:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2ff0:	7854      	ldrb	r4, [r2, #1]
    2ff2:	3c01      	subs	r4, #1
    2ff4:	2c01      	cmp	r4, #1
    2ff6:	d91c      	bls.n	3032 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2ff8:	040d      	lsls	r5, r1, #16
    2ffa:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2ffc:	24a0      	movs	r4, #160	; 0xa0
    2ffe:	05e4      	lsls	r4, r4, #23
    3000:	432c      	orrs	r4, r5
    3002:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3004:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3006:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3008:	24d0      	movs	r4, #208	; 0xd0
    300a:	0624      	lsls	r4, r4, #24
    300c:	432c      	orrs	r4, r5
    300e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3010:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3012:	78d4      	ldrb	r4, [r2, #3]
    3014:	2c00      	cmp	r4, #0
    3016:	d122      	bne.n	305e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3018:	035b      	lsls	r3, r3, #13
    301a:	d51c      	bpl.n	3056 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    301c:	7893      	ldrb	r3, [r2, #2]
    301e:	2b01      	cmp	r3, #1
    3020:	d01e      	beq.n	3060 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    3022:	6141      	str	r1, [r0, #20]
    3024:	e017      	b.n	3056 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3026:	2300      	movs	r3, #0
    3028:	e7d7      	b.n	2fda <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    302a:	24c0      	movs	r4, #192	; 0xc0
    302c:	02e4      	lsls	r4, r4, #11
    302e:	4323      	orrs	r3, r4
    3030:	e7dd      	b.n	2fee <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3032:	4c0d      	ldr	r4, [pc, #52]	; (3068 <_system_pinmux_config+0xa4>)
    3034:	4023      	ands	r3, r4
    3036:	e7df      	b.n	2ff8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3038:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    303a:	040c      	lsls	r4, r1, #16
    303c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    303e:	23a0      	movs	r3, #160	; 0xa0
    3040:	05db      	lsls	r3, r3, #23
    3042:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3044:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3046:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3048:	23d0      	movs	r3, #208	; 0xd0
    304a:	061b      	lsls	r3, r3, #24
    304c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    304e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3050:	78d3      	ldrb	r3, [r2, #3]
    3052:	2b00      	cmp	r3, #0
    3054:	d103      	bne.n	305e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3056:	7853      	ldrb	r3, [r2, #1]
    3058:	3b01      	subs	r3, #1
    305a:	2b01      	cmp	r3, #1
    305c:	d902      	bls.n	3064 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    305e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3060:	6181      	str	r1, [r0, #24]
    3062:	e7f8      	b.n	3056 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3064:	6081      	str	r1, [r0, #8]
}
    3066:	e7fa      	b.n	305e <_system_pinmux_config+0x9a>
    3068:	fffbffff 	.word	0xfffbffff

0000306c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    306c:	b510      	push	{r4, lr}
    306e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3070:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3072:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3074:	2900      	cmp	r1, #0
    3076:	d104      	bne.n	3082 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3078:	0943      	lsrs	r3, r0, #5
    307a:	01db      	lsls	r3, r3, #7
    307c:	4905      	ldr	r1, [pc, #20]	; (3094 <system_pinmux_pin_set_config+0x28>)
    307e:	468c      	mov	ip, r1
    3080:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3082:	241f      	movs	r4, #31
    3084:	4020      	ands	r0, r4
    3086:	2101      	movs	r1, #1
    3088:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    308a:	0018      	movs	r0, r3
    308c:	4b02      	ldr	r3, [pc, #8]	; (3098 <system_pinmux_pin_set_config+0x2c>)
    308e:	4798      	blx	r3
}
    3090:	bd10      	pop	{r4, pc}
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	41004400 	.word	0x41004400
    3098:	00002fc5 	.word	0x00002fc5

0000309c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    309c:	4770      	bx	lr
	...

000030a0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    30a0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    30a2:	4b05      	ldr	r3, [pc, #20]	; (30b8 <system_init+0x18>)
    30a4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    30a6:	4b05      	ldr	r3, [pc, #20]	; (30bc <system_init+0x1c>)
    30a8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    30aa:	4b05      	ldr	r3, [pc, #20]	; (30c0 <system_init+0x20>)
    30ac:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    30ae:	4b05      	ldr	r3, [pc, #20]	; (30c4 <system_init+0x24>)
    30b0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    30b2:	4b05      	ldr	r3, [pc, #20]	; (30c8 <system_init+0x28>)
    30b4:	4798      	blx	r3
}
    30b6:	bd10      	pop	{r4, pc}
    30b8:	00002be1 	.word	0x00002be1
    30bc:	00001979 	.word	0x00001979
    30c0:	0000309d 	.word	0x0000309d
    30c4:	0000309d 	.word	0x0000309d
    30c8:	0000309d 	.word	0x0000309d

000030cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    30cc:	e7fe      	b.n	30cc <Dummy_Handler>
	...

000030d0 <Reset_Handler>:
{
    30d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    30d2:	4a2a      	ldr	r2, [pc, #168]	; (317c <Reset_Handler+0xac>)
    30d4:	4b2a      	ldr	r3, [pc, #168]	; (3180 <Reset_Handler+0xb0>)
    30d6:	429a      	cmp	r2, r3
    30d8:	d011      	beq.n	30fe <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    30da:	001a      	movs	r2, r3
    30dc:	4b29      	ldr	r3, [pc, #164]	; (3184 <Reset_Handler+0xb4>)
    30de:	429a      	cmp	r2, r3
    30e0:	d20d      	bcs.n	30fe <Reset_Handler+0x2e>
    30e2:	4a29      	ldr	r2, [pc, #164]	; (3188 <Reset_Handler+0xb8>)
    30e4:	3303      	adds	r3, #3
    30e6:	1a9b      	subs	r3, r3, r2
    30e8:	089b      	lsrs	r3, r3, #2
    30ea:	3301      	adds	r3, #1
    30ec:	009b      	lsls	r3, r3, #2
    30ee:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    30f0:	4823      	ldr	r0, [pc, #140]	; (3180 <Reset_Handler+0xb0>)
    30f2:	4922      	ldr	r1, [pc, #136]	; (317c <Reset_Handler+0xac>)
    30f4:	588c      	ldr	r4, [r1, r2]
    30f6:	5084      	str	r4, [r0, r2]
    30f8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    30fa:	429a      	cmp	r2, r3
    30fc:	d1fa      	bne.n	30f4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    30fe:	4a23      	ldr	r2, [pc, #140]	; (318c <Reset_Handler+0xbc>)
    3100:	4b23      	ldr	r3, [pc, #140]	; (3190 <Reset_Handler+0xc0>)
    3102:	429a      	cmp	r2, r3
    3104:	d20a      	bcs.n	311c <Reset_Handler+0x4c>
    3106:	43d3      	mvns	r3, r2
    3108:	4921      	ldr	r1, [pc, #132]	; (3190 <Reset_Handler+0xc0>)
    310a:	185b      	adds	r3, r3, r1
    310c:	2103      	movs	r1, #3
    310e:	438b      	bics	r3, r1
    3110:	3304      	adds	r3, #4
    3112:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3114:	2100      	movs	r1, #0
    3116:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3118:	4293      	cmp	r3, r2
    311a:	d1fc      	bne.n	3116 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    311c:	4a1d      	ldr	r2, [pc, #116]	; (3194 <Reset_Handler+0xc4>)
    311e:	21ff      	movs	r1, #255	; 0xff
    3120:	4b1d      	ldr	r3, [pc, #116]	; (3198 <Reset_Handler+0xc8>)
    3122:	438b      	bics	r3, r1
    3124:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3126:	39fd      	subs	r1, #253	; 0xfd
    3128:	2390      	movs	r3, #144	; 0x90
    312a:	005b      	lsls	r3, r3, #1
    312c:	4a1b      	ldr	r2, [pc, #108]	; (319c <Reset_Handler+0xcc>)
    312e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3130:	4a1b      	ldr	r2, [pc, #108]	; (31a0 <Reset_Handler+0xd0>)
    3132:	78d3      	ldrb	r3, [r2, #3]
    3134:	2503      	movs	r5, #3
    3136:	43ab      	bics	r3, r5
    3138:	2402      	movs	r4, #2
    313a:	4323      	orrs	r3, r4
    313c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    313e:	78d3      	ldrb	r3, [r2, #3]
    3140:	270c      	movs	r7, #12
    3142:	43bb      	bics	r3, r7
    3144:	2608      	movs	r6, #8
    3146:	4333      	orrs	r3, r6
    3148:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    314a:	4b16      	ldr	r3, [pc, #88]	; (31a4 <Reset_Handler+0xd4>)
    314c:	7b98      	ldrb	r0, [r3, #14]
    314e:	2230      	movs	r2, #48	; 0x30
    3150:	4390      	bics	r0, r2
    3152:	2220      	movs	r2, #32
    3154:	4310      	orrs	r0, r2
    3156:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3158:	7b99      	ldrb	r1, [r3, #14]
    315a:	43b9      	bics	r1, r7
    315c:	4331      	orrs	r1, r6
    315e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3160:	7b9a      	ldrb	r2, [r3, #14]
    3162:	43aa      	bics	r2, r5
    3164:	4322      	orrs	r2, r4
    3166:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3168:	4a0f      	ldr	r2, [pc, #60]	; (31a8 <Reset_Handler+0xd8>)
    316a:	6853      	ldr	r3, [r2, #4]
    316c:	2180      	movs	r1, #128	; 0x80
    316e:	430b      	orrs	r3, r1
    3170:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3172:	4b0e      	ldr	r3, [pc, #56]	; (31ac <Reset_Handler+0xdc>)
    3174:	4798      	blx	r3
        main();
    3176:	4b0e      	ldr	r3, [pc, #56]	; (31b0 <Reset_Handler+0xe0>)
    3178:	4798      	blx	r3
    317a:	e7fe      	b.n	317a <Reset_Handler+0xaa>
    317c:	00007f90 	.word	0x00007f90
    3180:	20000000 	.word	0x20000000
    3184:	200001d8 	.word	0x200001d8
    3188:	20000004 	.word	0x20000004
    318c:	200001d8 	.word	0x200001d8
    3190:	20000b70 	.word	0x20000b70
    3194:	e000ed00 	.word	0xe000ed00
    3198:	00000000 	.word	0x00000000
    319c:	41007000 	.word	0x41007000
    31a0:	41005000 	.word	0x41005000
    31a4:	41004800 	.word	0x41004800
    31a8:	41004000 	.word	0x41004000
    31ac:	00004871 	.word	0x00004871
    31b0:	0000447d 	.word	0x0000447d

000031b4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    31b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31b6:	46c6      	mov	lr, r8
    31b8:	b500      	push	{lr}
    31ba:	000c      	movs	r4, r1
    31bc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    31be:	2800      	cmp	r0, #0
    31c0:	d10f      	bne.n	31e2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    31c2:	2a00      	cmp	r2, #0
    31c4:	dd11      	ble.n	31ea <_read+0x36>
    31c6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    31c8:	4e09      	ldr	r6, [pc, #36]	; (31f0 <_read+0x3c>)
    31ca:	4d0a      	ldr	r5, [pc, #40]	; (31f4 <_read+0x40>)
    31cc:	6830      	ldr	r0, [r6, #0]
    31ce:	0021      	movs	r1, r4
    31d0:	682b      	ldr	r3, [r5, #0]
    31d2:	4798      	blx	r3
		ptr++;
    31d4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    31d6:	42bc      	cmp	r4, r7
    31d8:	d1f8      	bne.n	31cc <_read+0x18>
		nChars++;
	}
	return nChars;
}
    31da:	4640      	mov	r0, r8
    31dc:	bc04      	pop	{r2}
    31de:	4690      	mov	r8, r2
    31e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    31e2:	2301      	movs	r3, #1
    31e4:	425b      	negs	r3, r3
    31e6:	4698      	mov	r8, r3
    31e8:	e7f7      	b.n	31da <_read+0x26>
	for (; len > 0; --len) {
    31ea:	4680      	mov	r8, r0
    31ec:	e7f5      	b.n	31da <_read+0x26>
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	20000384 	.word	0x20000384
    31f4:	2000037c 	.word	0x2000037c

000031f8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    31f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31fa:	46c6      	mov	lr, r8
    31fc:	b500      	push	{lr}
    31fe:	000e      	movs	r6, r1
    3200:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3202:	3801      	subs	r0, #1
    3204:	2802      	cmp	r0, #2
    3206:	d810      	bhi.n	322a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3208:	2a00      	cmp	r2, #0
    320a:	d011      	beq.n	3230 <_write+0x38>
    320c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    320e:	4b0c      	ldr	r3, [pc, #48]	; (3240 <_write+0x48>)
    3210:	4698      	mov	r8, r3
    3212:	4f0c      	ldr	r7, [pc, #48]	; (3244 <_write+0x4c>)
    3214:	4643      	mov	r3, r8
    3216:	6818      	ldr	r0, [r3, #0]
    3218:	5d31      	ldrb	r1, [r6, r4]
    321a:	683b      	ldr	r3, [r7, #0]
    321c:	4798      	blx	r3
    321e:	2800      	cmp	r0, #0
    3220:	db08      	blt.n	3234 <_write+0x3c>
			return -1;
		}
		++nChars;
    3222:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3224:	42a5      	cmp	r5, r4
    3226:	d1f5      	bne.n	3214 <_write+0x1c>
    3228:	e006      	b.n	3238 <_write+0x40>
		return -1;
    322a:	2401      	movs	r4, #1
    322c:	4264      	negs	r4, r4
    322e:	e003      	b.n	3238 <_write+0x40>
	for (; len != 0; --len) {
    3230:	0014      	movs	r4, r2
    3232:	e001      	b.n	3238 <_write+0x40>
			return -1;
    3234:	2401      	movs	r4, #1
    3236:	4264      	negs	r4, r4
	}
	return nChars;
}
    3238:	0020      	movs	r0, r4
    323a:	bc04      	pop	{r2}
    323c:	4690      	mov	r8, r2
    323e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3240:	20000384 	.word	0x20000384
    3244:	20000380 	.word	0x20000380

00003248 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3248:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    324a:	4a06      	ldr	r2, [pc, #24]	; (3264 <_sbrk+0x1c>)
    324c:	6812      	ldr	r2, [r2, #0]
    324e:	2a00      	cmp	r2, #0
    3250:	d004      	beq.n	325c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3252:	4a04      	ldr	r2, [pc, #16]	; (3264 <_sbrk+0x1c>)
    3254:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3256:	18c3      	adds	r3, r0, r3
    3258:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    325a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    325c:	4902      	ldr	r1, [pc, #8]	; (3268 <_sbrk+0x20>)
    325e:	4a01      	ldr	r2, [pc, #4]	; (3264 <_sbrk+0x1c>)
    3260:	6011      	str	r1, [r2, #0]
    3262:	e7f6      	b.n	3252 <_sbrk+0xa>
    3264:	200002b4 	.word	0x200002b4
    3268:	20002b70 	.word	0x20002b70

0000326c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    326c:	2001      	movs	r0, #1
    326e:	4240      	negs	r0, r0
    3270:	4770      	bx	lr

00003272 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3272:	2380      	movs	r3, #128	; 0x80
    3274:	019b      	lsls	r3, r3, #6
    3276:	604b      	str	r3, [r1, #4]

	return 0;
}
    3278:	2000      	movs	r0, #0
    327a:	4770      	bx	lr

0000327c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    327c:	2001      	movs	r0, #1
    327e:	4770      	bx	lr

00003280 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3280:	2000      	movs	r0, #0
    3282:	4770      	bx	lr

00003284 <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    3284:	b5f0      	push	{r4, r5, r6, r7, lr}
    3286:	46d6      	mov	lr, sl
    3288:	464f      	mov	r7, r9
    328a:	4646      	mov	r6, r8
    328c:	b5c0      	push	{r6, r7, lr}
    328e:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    3290:	4b2a      	ldr	r3, [pc, #168]	; (333c <drawChar+0xb8>)
    3292:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    3294:	4a2a      	ldr	r2, [pc, #168]	; (3340 <drawChar+0xbc>)
    3296:	8815      	ldrh	r5, [r2, #0]
	

	
	consoleDisplay[xCharPos][yCharPos] = character;
    3298:	005a      	lsls	r2, r3, #1
    329a:	18d2      	adds	r2, r2, r3
    329c:	00d2      	lsls	r2, r2, #3
    329e:	4829      	ldr	r0, [pc, #164]	; (3344 <drawChar+0xc0>)
    32a0:	1882      	adds	r2, r0, r2
    32a2:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    32a4:	2180      	movs	r1, #128	; 0x80
    32a6:	03c9      	lsls	r1, r1, #15
    32a8:	4a27      	ldr	r2, [pc, #156]	; (3348 <drawChar+0xc4>)
    32aa:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    32ac:	0098      	lsls	r0, r3, #2
    32ae:	181b      	adds	r3, r3, r0
    32b0:	005b      	lsls	r3, r3, #1
    32b2:	b298      	uxth	r0, r3
    32b4:	2114      	movs	r1, #20
    32b6:	4369      	muls	r1, r5
    32b8:	b289      	uxth	r1, r1
    32ba:	000b      	movs	r3, r1
    32bc:	3313      	adds	r3, #19
    32be:	b29b      	uxth	r3, r3
    32c0:	0002      	movs	r2, r0
    32c2:	3209      	adds	r2, #9
    32c4:	b292      	uxth	r2, r2
    32c6:	4d21      	ldr	r5, [pc, #132]	; (334c <drawChar+0xc8>)
    32c8:	47a8      	blx	r5
    32ca:	4a21      	ldr	r2, [pc, #132]	; (3350 <drawChar+0xcc>)
    32cc:	00a5      	lsls	r5, r4, #2
    32ce:	192d      	adds	r5, r5, r4
    32d0:	00ab      	lsls	r3, r5, #2
    32d2:	18ed      	adds	r5, r5, r3
    32d4:	1955      	adds	r5, r2, r5
    32d6:	3401      	adds	r4, #1
    32d8:	00a3      	lsls	r3, r4, #2
    32da:	191c      	adds	r4, r3, r4
    32dc:	00a3      	lsls	r3, r4, #2
    32de:	18e4      	adds	r4, r4, r3
    32e0:	4692      	mov	sl, r2
    32e2:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    32e4:	4b1b      	ldr	r3, [pc, #108]	; (3354 <drawChar+0xd0>)
    32e6:	4699      	mov	r9, r3
    32e8:	4b1b      	ldr	r3, [pc, #108]	; (3358 <drawChar+0xd4>)
    32ea:	4698      	mov	r8, r3
    32ec:	4f1b      	ldr	r7, [pc, #108]	; (335c <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    32ee:	4e1c      	ldr	r6, [pc, #112]	; (3360 <drawChar+0xdc>)
    32f0:	e019      	b.n	3326 <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    32f2:	464b      	mov	r3, r9
    32f4:	8818      	ldrh	r0, [r3, #0]
    32f6:	0200      	lsls	r0, r0, #8
    32f8:	4643      	mov	r3, r8
    32fa:	881b      	ldrh	r3, [r3, #0]
    32fc:	4318      	orrs	r0, r3
    32fe:	b280      	uxth	r0, r0
    3300:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    3302:	3c01      	subs	r4, #1
    3304:	d30c      	bcc.n	3320 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3306:	782b      	ldrb	r3, [r5, #0]
    3308:	4123      	asrs	r3, r4
    330a:	07db      	lsls	r3, r3, #31
    330c:	d5f1      	bpl.n	32f2 <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    330e:	8830      	ldrh	r0, [r6, #0]
    3310:	0200      	lsls	r0, r0, #8
    3312:	4b14      	ldr	r3, [pc, #80]	; (3364 <drawChar+0xe0>)
    3314:	881b      	ldrh	r3, [r3, #0]
    3316:	4318      	orrs	r0, r3
    3318:	b280      	uxth	r0, r0
    331a:	4b10      	ldr	r3, [pc, #64]	; (335c <drawChar+0xd8>)
    331c:	4798      	blx	r3
    331e:	e7f0      	b.n	3302 <drawChar+0x7e>
    3320:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    3322:	4555      	cmp	r5, sl
    3324:	d001      	beq.n	332a <drawChar+0xa6>
{
    3326:	2407      	movs	r4, #7
    3328:	e7ed      	b.n	3306 <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    332a:	2280      	movs	r2, #128	; 0x80
    332c:	03d2      	lsls	r2, r2, #15
    332e:	4b0e      	ldr	r3, [pc, #56]	; (3368 <drawChar+0xe4>)
    3330:	601a      	str	r2, [r3, #0]
	

}
    3332:	bc1c      	pop	{r2, r3, r4}
    3334:	4690      	mov	r8, r2
    3336:	4699      	mov	r9, r3
    3338:	46a2      	mov	sl, r4
    333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    333c:	200002b8 	.word	0x200002b8
    3340:	200002ba 	.word	0x200002ba
    3344:	200003c0 	.word	0x200003c0
    3348:	41004494 	.word	0x41004494
    334c:	00003ca9 	.word	0x00003ca9
    3350:	000062e4 	.word	0x000062e4
    3354:	20000b46 	.word	0x20000b46
    3358:	20000b40 	.word	0x20000b40
    335c:	00003de1 	.word	0x00003de1
    3360:	20000b42 	.word	0x20000b42
    3364:	20000b44 	.word	0x20000b44
    3368:	41004498 	.word	0x41004498

0000336c <blinkCursor>:
	*/
	
}

void blinkCursor(void)
{
    336c:	b5f0      	push	{r4, r5, r6, r7, lr}
    336e:	46d6      	mov	lr, sl
    3370:	464f      	mov	r7, r9
    3372:	4646      	mov	r6, r8
    3374:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    3376:	4b47      	ldr	r3, [pc, #284]	; (3494 <blinkCursor+0x128>)
    3378:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    337a:	4a47      	ldr	r2, [pc, #284]	; (3498 <blinkCursor+0x12c>)
    337c:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    337e:	005a      	lsls	r2, r3, #1
    3380:	18d2      	adds	r2, r2, r3
    3382:	00d2      	lsls	r2, r2, #3
    3384:	4845      	ldr	r0, [pc, #276]	; (349c <blinkCursor+0x130>)
    3386:	1882      	adds	r2, r0, r2
    3388:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    338a:	0098      	lsls	r0, r3, #2
    338c:	181b      	adds	r3, r3, r0
    338e:	005b      	lsls	r3, r3, #1
    3390:	b298      	uxth	r0, r3
    3392:	2114      	movs	r1, #20
    3394:	4369      	muls	r1, r5
    3396:	b289      	uxth	r1, r1
    3398:	000b      	movs	r3, r1
    339a:	3313      	adds	r3, #19
    339c:	b29b      	uxth	r3, r3
    339e:	0002      	movs	r2, r0
    33a0:	3209      	adds	r2, #9
    33a2:	b292      	uxth	r2, r2
    33a4:	4d3e      	ldr	r5, [pc, #248]	; (34a0 <blinkCursor+0x134>)
    33a6:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    33a8:	2280      	movs	r2, #128	; 0x80
    33aa:	03d2      	lsls	r2, r2, #15
    33ac:	4b3d      	ldr	r3, [pc, #244]	; (34a4 <blinkCursor+0x138>)
    33ae:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    33b0:	4b3d      	ldr	r3, [pc, #244]	; (34a8 <blinkCursor+0x13c>)
    33b2:	781b      	ldrb	r3, [r3, #0]
    33b4:	2b00      	cmp	r3, #0
    33b6:	d113      	bne.n	33e0 <blinkCursor+0x74>
    33b8:	4a3c      	ldr	r2, [pc, #240]	; (34ac <blinkCursor+0x140>)
    33ba:	00a5      	lsls	r5, r4, #2
    33bc:	192d      	adds	r5, r5, r4
    33be:	00ab      	lsls	r3, r5, #2
    33c0:	18ed      	adds	r5, r5, r3
    33c2:	1955      	adds	r5, r2, r5
    33c4:	3401      	adds	r4, #1
    33c6:	00a3      	lsls	r3, r4, #2
    33c8:	191c      	adds	r4, r3, r4
    33ca:	00a3      	lsls	r3, r4, #2
    33cc:	18e4      	adds	r4, r4, r3
    33ce:	4692      	mov	sl, r2
    33d0:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    33d2:	4b37      	ldr	r3, [pc, #220]	; (34b0 <blinkCursor+0x144>)
    33d4:	4699      	mov	r9, r3
    33d6:	4b37      	ldr	r3, [pc, #220]	; (34b4 <blinkCursor+0x148>)
    33d8:	4698      	mov	r8, r3
    33da:	4f37      	ldr	r7, [pc, #220]	; (34b8 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    33dc:	4e37      	ldr	r6, [pc, #220]	; (34bc <blinkCursor+0x150>)
    33de:	e049      	b.n	3474 <blinkCursor+0x108>
    33e0:	4a32      	ldr	r2, [pc, #200]	; (34ac <blinkCursor+0x140>)
    33e2:	00a5      	lsls	r5, r4, #2
    33e4:	192d      	adds	r5, r5, r4
    33e6:	00ab      	lsls	r3, r5, #2
    33e8:	18ed      	adds	r5, r5, r3
    33ea:	1955      	adds	r5, r2, r5
    33ec:	3401      	adds	r4, #1
    33ee:	00a3      	lsls	r3, r4, #2
    33f0:	191c      	adds	r4, r3, r4
    33f2:	00a3      	lsls	r3, r4, #2
    33f4:	18e4      	adds	r4, r4, r3
    33f6:	4692      	mov	sl, r2
    33f8:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    33fa:	4b30      	ldr	r3, [pc, #192]	; (34bc <blinkCursor+0x150>)
    33fc:	4699      	mov	r9, r3
    33fe:	4b30      	ldr	r3, [pc, #192]	; (34c0 <blinkCursor+0x154>)
    3400:	4698      	mov	r8, r3
    3402:	4f2d      	ldr	r7, [pc, #180]	; (34b8 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    3404:	4e2a      	ldr	r6, [pc, #168]	; (34b0 <blinkCursor+0x144>)
    3406:	e019      	b.n	343c <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    3408:	464b      	mov	r3, r9
    340a:	8818      	ldrh	r0, [r3, #0]
    340c:	0200      	lsls	r0, r0, #8
    340e:	4643      	mov	r3, r8
    3410:	881b      	ldrh	r3, [r3, #0]
    3412:	4318      	orrs	r0, r3
    3414:	b280      	uxth	r0, r0
    3416:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    3418:	3c01      	subs	r4, #1
    341a:	d30c      	bcc.n	3436 <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    341c:	782b      	ldrb	r3, [r5, #0]
    341e:	4123      	asrs	r3, r4
    3420:	07db      	lsls	r3, r3, #31
    3422:	d5f1      	bpl.n	3408 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    3424:	8830      	ldrh	r0, [r6, #0]
    3426:	0200      	lsls	r0, r0, #8
    3428:	4b22      	ldr	r3, [pc, #136]	; (34b4 <blinkCursor+0x148>)
    342a:	881b      	ldrh	r3, [r3, #0]
    342c:	4318      	orrs	r0, r3
    342e:	b280      	uxth	r0, r0
    3430:	4b21      	ldr	r3, [pc, #132]	; (34b8 <blinkCursor+0x14c>)
    3432:	4798      	blx	r3
    3434:	e7f0      	b.n	3418 <blinkCursor+0xac>
    3436:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    3438:	4555      	cmp	r5, sl
    343a:	d01d      	beq.n	3478 <blinkCursor+0x10c>
{
    343c:	2407      	movs	r4, #7
    343e:	e7ed      	b.n	341c <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    3440:	464b      	mov	r3, r9
    3442:	8818      	ldrh	r0, [r3, #0]
    3444:	0200      	lsls	r0, r0, #8
    3446:	4643      	mov	r3, r8
    3448:	881b      	ldrh	r3, [r3, #0]
    344a:	4318      	orrs	r0, r3
    344c:	b280      	uxth	r0, r0
    344e:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    3450:	3c01      	subs	r4, #1
    3452:	d30c      	bcc.n	346e <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3454:	782b      	ldrb	r3, [r5, #0]
    3456:	4123      	asrs	r3, r4
    3458:	07db      	lsls	r3, r3, #31
    345a:	d5f1      	bpl.n	3440 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    345c:	8830      	ldrh	r0, [r6, #0]
    345e:	0200      	lsls	r0, r0, #8
    3460:	4b17      	ldr	r3, [pc, #92]	; (34c0 <blinkCursor+0x154>)
    3462:	881b      	ldrh	r3, [r3, #0]
    3464:	4318      	orrs	r0, r3
    3466:	b280      	uxth	r0, r0
    3468:	4b13      	ldr	r3, [pc, #76]	; (34b8 <blinkCursor+0x14c>)
    346a:	4798      	blx	r3
    346c:	e7f0      	b.n	3450 <blinkCursor+0xe4>
    346e:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    3470:	4555      	cmp	r5, sl
    3472:	d001      	beq.n	3478 <blinkCursor+0x10c>
{
    3474:	2407      	movs	r4, #7
    3476:	e7ed      	b.n	3454 <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    3478:	2280      	movs	r2, #128	; 0x80
    347a:	03d2      	lsls	r2, r2, #15
    347c:	4b11      	ldr	r3, [pc, #68]	; (34c4 <blinkCursor+0x158>)
    347e:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    3480:	4a09      	ldr	r2, [pc, #36]	; (34a8 <blinkCursor+0x13c>)
    3482:	7813      	ldrb	r3, [r2, #0]
    3484:	2101      	movs	r1, #1
    3486:	404b      	eors	r3, r1
    3488:	7013      	strb	r3, [r2, #0]
	
}
    348a:	bc1c      	pop	{r2, r3, r4}
    348c:	4690      	mov	r8, r2
    348e:	4699      	mov	r9, r3
    3490:	46a2      	mov	sl, r4
    3492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3494:	200002b8 	.word	0x200002b8
    3498:	200002ba 	.word	0x200002ba
    349c:	200003c0 	.word	0x200003c0
    34a0:	00003ca9 	.word	0x00003ca9
    34a4:	41004494 	.word	0x41004494
    34a8:	20000024 	.word	0x20000024
    34ac:	000062e4 	.word	0x000062e4
    34b0:	20000b46 	.word	0x20000b46
    34b4:	20000b40 	.word	0x20000b40
    34b8:	00003de1 	.word	0x00003de1
    34bc:	20000b42 	.word	0x20000b42
    34c0:	20000b44 	.word	0x20000b44
    34c4:	41004498 	.word	0x41004498

000034c8 <newLine>:
{
    34c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ca:	46de      	mov	lr, fp
    34cc:	4657      	mov	r7, sl
    34ce:	464e      	mov	r6, r9
    34d0:	4645      	mov	r5, r8
    34d2:	b5e0      	push	{r5, r6, r7, lr}
    34d4:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    34d6:	4b24      	ldr	r3, [pc, #144]	; (3568 <newLine+0xa0>)
    34d8:	881b      	ldrh	r3, [r3, #0]
    34da:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    34dc:	4b23      	ldr	r3, [pc, #140]	; (356c <newLine+0xa4>)
    34de:	881b      	ldrh	r3, [r3, #0]
    34e0:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    34e2:	2201      	movs	r2, #1
    34e4:	4b22      	ldr	r3, [pc, #136]	; (3570 <newLine+0xa8>)
    34e6:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    34e8:	4b22      	ldr	r3, [pc, #136]	; (3574 <newLine+0xac>)
    34ea:	4798      	blx	r3
    34ec:	4822      	ldr	r0, [pc, #136]	; (3578 <newLine+0xb0>)
    34ee:	0004      	movs	r4, r0
    34f0:	3418      	adds	r4, #24
    34f2:	23f0      	movs	r3, #240	; 0xf0
    34f4:	00db      	lsls	r3, r3, #3
    34f6:	18c1      	adds	r1, r0, r3
{
    34f8:	0003      	movs	r3, r0
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    34fa:	785a      	ldrb	r2, [r3, #1]
    34fc:	701a      	strb	r2, [r3, #0]
    34fe:	3318      	adds	r3, #24
		for(int i = 0 ; i < 80 ; i++)
    3500:	428b      	cmp	r3, r1
    3502:	d1fa      	bne.n	34fa <newLine+0x32>
    3504:	3001      	adds	r0, #1
	for(int j = 1 ; j <= 24 ; j++)
    3506:	42a0      	cmp	r0, r4
    3508:	d1f3      	bne.n	34f2 <newLine+0x2a>
    350a:	4b1c      	ldr	r3, [pc, #112]	; (357c <newLine+0xb4>)
    350c:	22f0      	movs	r2, #240	; 0xf0
    350e:	00d2      	lsls	r2, r2, #3
    3510:	1899      	adds	r1, r3, r2
		consoleDisplay[k][23] = 0x20;
    3512:	2220      	movs	r2, #32
    3514:	701a      	strb	r2, [r3, #0]
    3516:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    3518:	428b      	cmp	r3, r1
    351a:	d1fb      	bne.n	3514 <newLine+0x4c>
    351c:	2600      	movs	r6, #0
    351e:	4b16      	ldr	r3, [pc, #88]	; (3578 <newLine+0xb0>)
    3520:	469a      	mov	sl, r3
			xCharPos = i;
    3522:	4b11      	ldr	r3, [pc, #68]	; (3568 <newLine+0xa0>)
    3524:	4699      	mov	r9, r3
			yCharPos = j;
    3526:	4b11      	ldr	r3, [pc, #68]	; (356c <newLine+0xa4>)
    3528:	4698      	mov	r8, r3
    352a:	4653      	mov	r3, sl
    352c:	18f5      	adds	r5, r6, r3
{
    352e:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    3530:	4f13      	ldr	r7, [pc, #76]	; (3580 <newLine+0xb8>)
			xCharPos = i;
    3532:	464b      	mov	r3, r9
    3534:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    3536:	4643      	mov	r3, r8
    3538:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    353a:	7828      	ldrb	r0, [r5, #0]
    353c:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    353e:	3401      	adds	r4, #1
    3540:	3518      	adds	r5, #24
    3542:	2c50      	cmp	r4, #80	; 0x50
    3544:	d1f5      	bne.n	3532 <newLine+0x6a>
	for(int j = 0 ; j < 24 ; j++)
    3546:	3601      	adds	r6, #1
    3548:	2e18      	cmp	r6, #24
    354a:	d1ee      	bne.n	352a <newLine+0x62>
	xCharPos = tempCursorx;
    354c:	4b06      	ldr	r3, [pc, #24]	; (3568 <newLine+0xa0>)
    354e:	465a      	mov	r2, fp
    3550:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    3552:	4b06      	ldr	r3, [pc, #24]	; (356c <newLine+0xa4>)
    3554:	466a      	mov	r2, sp
    3556:	8892      	ldrh	r2, [r2, #4]
    3558:	801a      	strh	r2, [r3, #0]
}
    355a:	b003      	add	sp, #12
    355c:	bc3c      	pop	{r2, r3, r4, r5}
    355e:	4690      	mov	r8, r2
    3560:	4699      	mov	r9, r3
    3562:	46a2      	mov	sl, r4
    3564:	46ab      	mov	fp, r5
    3566:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3568:	200002b8 	.word	0x200002b8
    356c:	200002ba 	.word	0x200002ba
    3570:	20000024 	.word	0x20000024
    3574:	0000336d 	.word	0x0000336d
    3578:	200003c0 	.word	0x200003c0
    357c:	200003d7 	.word	0x200003d7
    3580:	00003285 	.word	0x00003285

00003584 <writeString>:

void writeString(const char str[])
{
    3584:	b5f0      	push	{r4, r5, r6, r7, lr}
    3586:	46c6      	mov	lr, r8
    3588:	b500      	push	{lr}
    358a:	0005      	movs	r5, r0
	int length = strlen(str);
    358c:	4b0c      	ldr	r3, [pc, #48]	; (35c0 <writeString+0x3c>)
    358e:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    3590:	2800      	cmp	r0, #0
    3592:	dd11      	ble.n	35b8 <writeString+0x34>
    3594:	002c      	movs	r4, r5
    3596:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    3598:	4f0a      	ldr	r7, [pc, #40]	; (35c4 <writeString+0x40>)
		if(xCharPos <= 80)
    359a:	4e0b      	ldr	r6, [pc, #44]	; (35c8 <writeString+0x44>)
		xCharPos++;
    359c:	46b0      	mov	r8, r6
    359e:	e002      	b.n	35a6 <writeString+0x22>
    35a0:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    35a2:	42ac      	cmp	r4, r5
    35a4:	d008      	beq.n	35b8 <writeString+0x34>
		drawChar(str[i]);
    35a6:	7820      	ldrb	r0, [r4, #0]
    35a8:	47b8      	blx	r7
		if(xCharPos <= 80)
    35aa:	8833      	ldrh	r3, [r6, #0]
    35ac:	2b50      	cmp	r3, #80	; 0x50
    35ae:	d8f7      	bhi.n	35a0 <writeString+0x1c>
		xCharPos++;
    35b0:	3301      	adds	r3, #1
    35b2:	4642      	mov	r2, r8
    35b4:	8013      	strh	r3, [r2, #0]
    35b6:	e7f3      	b.n	35a0 <writeString+0x1c>
	}
}
    35b8:	bc04      	pop	{r2}
    35ba:	4690      	mov	r8, r2
    35bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    35be:	46c0      	nop			; (mov r8, r8)
    35c0:	00004d53 	.word	0x00004d53
    35c4:	00003285 	.word	0x00003285
    35c8:	200002b8 	.word	0x200002b8

000035cc <nullifyConsole>:

void nullifyConsole(void)
{
    35cc:	4b08      	ldr	r3, [pc, #32]	; (35f0 <nullifyConsole+0x24>)
    35ce:	22f0      	movs	r2, #240	; 0xf0
    35d0:	00d2      	lsls	r2, r2, #3
    35d2:	1898      	adds	r0, r3, r2
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    35d4:	2100      	movs	r1, #0
    35d6:	e002      	b.n	35de <nullifyConsole+0x12>
    35d8:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    35da:	4290      	cmp	r0, r2
    35dc:	d006      	beq.n	35ec <nullifyConsole+0x20>
    35de:	001a      	movs	r2, r3
    35e0:	3218      	adds	r2, #24
			consoleDisplay[i][j] = 0x00;
    35e2:	7019      	strb	r1, [r3, #0]
    35e4:	3301      	adds	r3, #1
		for(int j = 0 ; j < 24 ; j++)
    35e6:	4293      	cmp	r3, r2
    35e8:	d1fb      	bne.n	35e2 <nullifyConsole+0x16>
    35ea:	e7f5      	b.n	35d8 <nullifyConsole+0xc>
		}
	}
}
    35ec:	4770      	bx	lr
    35ee:	46c0      	nop			; (mov r8, r8)
    35f0:	200003c0 	.word	0x200003c0

000035f4 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    35f4:	4b09      	ldr	r3, [pc, #36]	; (361c <scanCodesContains+0x28>)
    35f6:	681b      	ldr	r3, [r3, #0]
    35f8:	4298      	cmp	r0, r3
    35fa:	d00b      	beq.n	3614 <scanCodesContains+0x20>
    35fc:	4a07      	ldr	r2, [pc, #28]	; (361c <scanCodesContains+0x28>)
    35fe:	1d13      	adds	r3, r2, #4
    3600:	3219      	adds	r2, #25
    3602:	32ff      	adds	r2, #255	; 0xff
    3604:	6819      	ldr	r1, [r3, #0]
    3606:	4281      	cmp	r1, r0
    3608:	d006      	beq.n	3618 <scanCodesContains+0x24>
    360a:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    360c:	4293      	cmp	r3, r2
    360e:	d1f9      	bne.n	3604 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    3610:	2000      	movs	r0, #0
    3612:	e002      	b.n	361a <scanCodesContains+0x26>
			return true;
    3614:	2001      	movs	r0, #1
    3616:	e000      	b.n	361a <scanCodesContains+0x26>
    3618:	2001      	movs	r0, #1
}
    361a:	4770      	bx	lr
    361c:	20000050 	.word	0x20000050

00003620 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    3620:	4b09      	ldr	r3, [pc, #36]	; (3648 <keyDown+0x28>)
    3622:	781b      	ldrb	r3, [r3, #0]
    3624:	4298      	cmp	r0, r3
    3626:	d00a      	beq.n	363e <keyDown+0x1e>
    3628:	4907      	ldr	r1, [pc, #28]	; (3648 <keyDown+0x28>)
    362a:	1c4b      	adds	r3, r1, #1
    362c:	3114      	adds	r1, #20
    362e:	781a      	ldrb	r2, [r3, #0]
    3630:	4282      	cmp	r2, r0
    3632:	d006      	beq.n	3642 <keyDown+0x22>
    3634:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    3636:	428b      	cmp	r3, r1
    3638:	d1f9      	bne.n	362e <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    363a:	2000      	movs	r0, #0
}
    363c:	4770      	bx	lr
			return true;
    363e:	2001      	movs	r0, #1
    3640:	e7fc      	b.n	363c <keyDown+0x1c>
    3642:	2001      	movs	r0, #1
    3644:	e7fa      	b.n	363c <keyDown+0x1c>
    3646:	46c0      	nop			; (mov r8, r8)
    3648:	20000028 	.word	0x20000028

0000364c <printKeyboardBuffer>:
{
    364c:	b5f0      	push	{r4, r5, r6, r7, lr}
    364e:	46d6      	mov	lr, sl
    3650:	464f      	mov	r7, r9
    3652:	4646      	mov	r6, r8
    3654:	b5c0      	push	{r6, r7, lr}
    3656:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    3658:	4dca      	ldr	r5, [pc, #808]	; (3984 <printKeyboardBuffer+0x338>)
    365a:	2246      	movs	r2, #70	; 0x46
    365c:	0029      	movs	r1, r5
    365e:	a83a      	add	r0, sp, #232	; 0xe8
    3660:	4cc9      	ldr	r4, [pc, #804]	; (3988 <printKeyboardBuffer+0x33c>)
    3662:	47a0      	blx	r4
	unsigned char shiftCase[] =
    3664:	0029      	movs	r1, r5
    3666:	3148      	adds	r1, #72	; 0x48
    3668:	2246      	movs	r2, #70	; 0x46
    366a:	a828      	add	r0, sp, #160	; 0xa0
    366c:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    366e:	4dc7      	ldr	r5, [pc, #796]	; (398c <printKeyboardBuffer+0x340>)
    3670:	0029      	movs	r1, r5
    3672:	3110      	adds	r1, #16
    3674:	2246      	movs	r2, #70	; 0x46
    3676:	a816      	add	r0, sp, #88	; 0x58
    3678:	47a0      	blx	r4
	unsigned char controlCase[] =
    367a:	0029      	movs	r1, r5
    367c:	3158      	adds	r1, #88	; 0x58
    367e:	2246      	movs	r2, #70	; 0x46
    3680:	a804      	add	r0, sp, #16
    3682:	47a0      	blx	r4
    3684:	4fc2      	ldr	r7, [pc, #776]	; (3990 <printKeyboardBuffer+0x344>)
    3686:	003c      	movs	r4, r7
    3688:	3414      	adds	r4, #20
    368a:	003d      	movs	r5, r7
	bool controled = false;
    368c:	2300      	movs	r3, #0
    368e:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    3690:	9302      	str	r3, [sp, #8]
			controled = true;
    3692:	2201      	movs	r2, #1
    3694:	e004      	b.n	36a0 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    3696:	2916      	cmp	r1, #22
    3698:	d011      	beq.n	36be <printKeyboardBuffer+0x72>
    369a:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    369c:	42a5      	cmp	r5, r4
    369e:	d010      	beq.n	36c2 <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    36a0:	7829      	ldrb	r1, [r5, #0]
    36a2:	000b      	movs	r3, r1
    36a4:	3b0d      	subs	r3, #13
    36a6:	425e      	negs	r6, r3
    36a8:	415e      	adcs	r6, r3
    36aa:	46b4      	mov	ip, r6
    36ac:	0008      	movs	r0, r1
    36ae:	3831      	subs	r0, #49	; 0x31
    36b0:	4243      	negs	r3, r0
    36b2:	4143      	adcs	r3, r0
    36b4:	4660      	mov	r0, ip
    36b6:	4318      	orrs	r0, r3
    36b8:	d0ed      	beq.n	3696 <printKeyboardBuffer+0x4a>
			shifted = true;
    36ba:	9002      	str	r0, [sp, #8]
    36bc:	e7eb      	b.n	3696 <printKeyboardBuffer+0x4a>
			controled = true;
    36be:	9203      	str	r2, [sp, #12]
    36c0:	e7eb      	b.n	369a <printKeyboardBuffer+0x4e>
    36c2:	4eb4      	ldr	r6, [pc, #720]	; (3994 <printKeyboardBuffer+0x348>)
	for(int i=0; i<20; i++)
    36c4:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    36c6:	4bb4      	ldr	r3, [pc, #720]	; (3998 <printKeyboardBuffer+0x34c>)
    36c8:	469a      	mov	sl, r3
    36ca:	e00b      	b.n	36e4 <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    36cc:	301b      	adds	r0, #27
    36ce:	4bb3      	ldr	r3, [pc, #716]	; (399c <printKeyboardBuffer+0x350>)
    36d0:	4798      	blx	r3
				if(localEcho)
    36d2:	4bb3      	ldr	r3, [pc, #716]	; (39a0 <printKeyboardBuffer+0x354>)
    36d4:	781b      	ldrb	r3, [r3, #0]
    36d6:	2b00      	cmp	r3, #0
    36d8:	d14a      	bne.n	3770 <printKeyboardBuffer+0x124>
    36da:	3401      	adds	r4, #1
    36dc:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    36de:	42ac      	cmp	r4, r5
    36e0:	d100      	bne.n	36e4 <printKeyboardBuffer+0x98>
    36e2:	e144      	b.n	396e <printKeyboardBuffer+0x322>
    36e4:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    36e6:	7823      	ldrb	r3, [r4, #0]
    36e8:	4698      	mov	r8, r3
    36ea:	0018      	movs	r0, r3
    36ec:	47d0      	blx	sl
    36ee:	2800      	cmp	r0, #0
    36f0:	d1f3      	bne.n	36da <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    36f2:	4643      	mov	r3, r8
    36f4:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    36f6:	4643      	mov	r3, r8
    36f8:	2b00      	cmp	r3, #0
    36fa:	d0e7      	beq.n	36cc <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    36fc:	4643      	mov	r3, r8
    36fe:	2b01      	cmp	r3, #1
    3700:	d0eb      	beq.n	36da <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    3702:	2b43      	cmp	r3, #67	; 0x43
    3704:	d03a      	beq.n	377c <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    3706:	4643      	mov	r3, r8
    3708:	2b3a      	cmp	r3, #58	; 0x3a
    370a:	d03f      	beq.n	378c <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    370c:	4643      	mov	r3, r8
    370e:	2b0c      	cmp	r3, #12
    3710:	d078      	beq.n	3804 <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    3712:	4643      	mov	r3, r8
    3714:	2b03      	cmp	r3, #3
    3716:	d07b      	beq.n	3810 <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    3718:	4643      	mov	r3, r8
    371a:	2b23      	cmp	r3, #35	; 0x23
    371c:	d07e      	beq.n	381c <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    371e:	4643      	mov	r3, r8
    3720:	2b2d      	cmp	r3, #45	; 0x2d
    3722:	d100      	bne.n	3726 <printKeyboardBuffer+0xda>
    3724:	e097      	b.n	3856 <printKeyboardBuffer+0x20a>
			else if(scanCodeBuffer[i]  == 55)	//up
    3726:	4643      	mov	r3, r8
    3728:	2b37      	cmp	r3, #55	; 0x37
    372a:	d100      	bne.n	372e <printKeyboardBuffer+0xe2>
    372c:	e0b0      	b.n	3890 <printKeyboardBuffer+0x244>
			else if(scanCodeBuffer[i]  == 65)	//right
    372e:	4643      	mov	r3, r8
    3730:	2b41      	cmp	r3, #65	; 0x41
    3732:	d100      	bne.n	3736 <printKeyboardBuffer+0xea>
    3734:	e0c9      	b.n	38ca <printKeyboardBuffer+0x27e>
				if(controled)
    3736:	9b03      	ldr	r3, [sp, #12]
    3738:	2b00      	cmp	r3, #0
    373a:	d000      	beq.n	373e <printKeyboardBuffer+0xf2>
    373c:	e0e2      	b.n	3904 <printKeyboardBuffer+0x2b8>
				else if(capsLock)
    373e:	4b99      	ldr	r3, [pc, #612]	; (39a4 <printKeyboardBuffer+0x358>)
    3740:	781b      	ldrb	r3, [r3, #0]
    3742:	2b00      	cmp	r3, #0
    3744:	d000      	beq.n	3748 <printKeyboardBuffer+0xfc>
    3746:	e0f0      	b.n	392a <printKeyboardBuffer+0x2de>
				else if(shifted)
    3748:	9b02      	ldr	r3, [sp, #8]
    374a:	2b00      	cmp	r3, #0
    374c:	d100      	bne.n	3750 <printKeyboardBuffer+0x104>
    374e:	e0fd      	b.n	394c <printKeyboardBuffer+0x300>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    3750:	ab28      	add	r3, sp, #160	; 0xa0
    3752:	4642      	mov	r2, r8
    3754:	5c98      	ldrb	r0, [r3, r2]
    3756:	4b91      	ldr	r3, [pc, #580]	; (399c <printKeyboardBuffer+0x350>)
    3758:	4798      	blx	r3
					if(localEcho)
    375a:	4b91      	ldr	r3, [pc, #580]	; (39a0 <printKeyboardBuffer+0x354>)
    375c:	781b      	ldrb	r3, [r3, #0]
    375e:	2b00      	cmp	r3, #0
    3760:	d0bb      	beq.n	36da <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    3762:	9b01      	ldr	r3, [sp, #4]
    3764:	781b      	ldrb	r3, [r3, #0]
    3766:	aa28      	add	r2, sp, #160	; 0xa0
    3768:	5cd0      	ldrb	r0, [r2, r3]
    376a:	4b8f      	ldr	r3, [pc, #572]	; (39a8 <printKeyboardBuffer+0x35c>)
    376c:	4798      	blx	r3
    376e:	e7b4      	b.n	36da <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    3770:	4b8e      	ldr	r3, [pc, #568]	; (39ac <printKeyboardBuffer+0x360>)
    3772:	6818      	ldr	r0, [r3, #0]
    3774:	211b      	movs	r1, #27
    3776:	4b8e      	ldr	r3, [pc, #568]	; (39b0 <printKeyboardBuffer+0x364>)
    3778:	4798      	blx	r3
    377a:	e7ae      	b.n	36da <printKeyboardBuffer+0x8e>
				if(breakEnable)
    377c:	4b8d      	ldr	r3, [pc, #564]	; (39b4 <printKeyboardBuffer+0x368>)
    377e:	781b      	ldrb	r3, [r3, #0]
    3780:	2b00      	cmp	r3, #0
    3782:	d0aa      	beq.n	36da <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    3784:	2000      	movs	r0, #0
    3786:	4b85      	ldr	r3, [pc, #532]	; (399c <printKeyboardBuffer+0x350>)
    3788:	4798      	blx	r3
    378a:	e7a6      	b.n	36da <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    378c:	4b8a      	ldr	r3, [pc, #552]	; (39b8 <printKeyboardBuffer+0x36c>)
    378e:	681b      	ldr	r3, [r3, #0]
    3790:	2b01      	cmp	r3, #1
    3792:	d014      	beq.n	37be <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    3794:	4b88      	ldr	r3, [pc, #544]	; (39b8 <printKeyboardBuffer+0x36c>)
    3796:	681b      	ldr	r3, [r3, #0]
    3798:	2b02      	cmp	r3, #2
    379a:	d026      	beq.n	37ea <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    379c:	4b86      	ldr	r3, [pc, #536]	; (39b8 <printKeyboardBuffer+0x36c>)
    379e:	681b      	ldr	r3, [r3, #0]
    37a0:	2b03      	cmp	r3, #3
    37a2:	d19a      	bne.n	36da <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    37a4:	200d      	movs	r0, #13
    37a6:	4b7d      	ldr	r3, [pc, #500]	; (399c <printKeyboardBuffer+0x350>)
    37a8:	4798      	blx	r3
					if(localEcho)
    37aa:	4b7d      	ldr	r3, [pc, #500]	; (39a0 <printKeyboardBuffer+0x354>)
    37ac:	781b      	ldrb	r3, [r3, #0]
    37ae:	2b00      	cmp	r3, #0
    37b0:	d093      	beq.n	36da <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    37b2:	4b7e      	ldr	r3, [pc, #504]	; (39ac <printKeyboardBuffer+0x360>)
    37b4:	6818      	ldr	r0, [r3, #0]
    37b6:	210d      	movs	r1, #13
    37b8:	4b7d      	ldr	r3, [pc, #500]	; (39b0 <printKeyboardBuffer+0x364>)
    37ba:	4798      	blx	r3
    37bc:	e78d      	b.n	36da <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    37be:	200d      	movs	r0, #13
    37c0:	4b76      	ldr	r3, [pc, #472]	; (399c <printKeyboardBuffer+0x350>)
    37c2:	4698      	mov	r8, r3
    37c4:	4798      	blx	r3
					sendChar(0x0A);
    37c6:	200a      	movs	r0, #10
    37c8:	47c0      	blx	r8
					if(localEcho)
    37ca:	4b75      	ldr	r3, [pc, #468]	; (39a0 <printKeyboardBuffer+0x354>)
    37cc:	781b      	ldrb	r3, [r3, #0]
    37ce:	2b00      	cmp	r3, #0
    37d0:	d0e0      	beq.n	3794 <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    37d2:	4b76      	ldr	r3, [pc, #472]	; (39ac <printKeyboardBuffer+0x360>)
    37d4:	4699      	mov	r9, r3
    37d6:	210d      	movs	r1, #13
    37d8:	6818      	ldr	r0, [r3, #0]
    37da:	4b75      	ldr	r3, [pc, #468]	; (39b0 <printKeyboardBuffer+0x364>)
    37dc:	4698      	mov	r8, r3
    37de:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    37e0:	464b      	mov	r3, r9
    37e2:	6818      	ldr	r0, [r3, #0]
    37e4:	210a      	movs	r1, #10
    37e6:	47c0      	blx	r8
    37e8:	e7d4      	b.n	3794 <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    37ea:	200a      	movs	r0, #10
    37ec:	4b6b      	ldr	r3, [pc, #428]	; (399c <printKeyboardBuffer+0x350>)
    37ee:	4798      	blx	r3
					if(localEcho)
    37f0:	4b6b      	ldr	r3, [pc, #428]	; (39a0 <printKeyboardBuffer+0x354>)
    37f2:	781b      	ldrb	r3, [r3, #0]
    37f4:	2b00      	cmp	r3, #0
    37f6:	d0d1      	beq.n	379c <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    37f8:	4b6c      	ldr	r3, [pc, #432]	; (39ac <printKeyboardBuffer+0x360>)
    37fa:	6818      	ldr	r0, [r3, #0]
    37fc:	210a      	movs	r1, #10
    37fe:	4b6c      	ldr	r3, [pc, #432]	; (39b0 <printKeyboardBuffer+0x364>)
    3800:	4798      	blx	r3
    3802:	e7cb      	b.n	379c <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    3804:	4a67      	ldr	r2, [pc, #412]	; (39a4 <printKeyboardBuffer+0x358>)
    3806:	7813      	ldrb	r3, [r2, #0]
    3808:	2101      	movs	r1, #1
    380a:	404b      	eors	r3, r1
    380c:	7013      	strb	r3, [r2, #0]
    380e:	e764      	b.n	36da <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    3810:	4a6a      	ldr	r2, [pc, #424]	; (39bc <printKeyboardBuffer+0x370>)
    3812:	7813      	ldrb	r3, [r2, #0]
    3814:	2101      	movs	r1, #1
    3816:	404b      	eors	r3, r1
    3818:	7013      	strb	r3, [r2, #0]
    381a:	e75e      	b.n	36da <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    381c:	201b      	movs	r0, #27
    381e:	4b5f      	ldr	r3, [pc, #380]	; (399c <printKeyboardBuffer+0x350>)
    3820:	4698      	mov	r8, r3
    3822:	4798      	blx	r3
				sendChar(0x5B);
    3824:	205b      	movs	r0, #91	; 0x5b
    3826:	47c0      	blx	r8
				sendChar(0x44);
    3828:	2044      	movs	r0, #68	; 0x44
    382a:	47c0      	blx	r8
				if(localEcho)
    382c:	4b5c      	ldr	r3, [pc, #368]	; (39a0 <printKeyboardBuffer+0x354>)
    382e:	781b      	ldrb	r3, [r3, #0]
    3830:	2b00      	cmp	r3, #0
    3832:	d100      	bne.n	3836 <printKeyboardBuffer+0x1ea>
    3834:	e751      	b.n	36da <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3836:	4b5d      	ldr	r3, [pc, #372]	; (39ac <printKeyboardBuffer+0x360>)
    3838:	4699      	mov	r9, r3
    383a:	211b      	movs	r1, #27
    383c:	6818      	ldr	r0, [r3, #0]
    383e:	4b5c      	ldr	r3, [pc, #368]	; (39b0 <printKeyboardBuffer+0x364>)
    3840:	4698      	mov	r8, r3
    3842:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3844:	215b      	movs	r1, #91	; 0x5b
    3846:	464b      	mov	r3, r9
    3848:	6818      	ldr	r0, [r3, #0]
    384a:	47c0      	blx	r8
					ring_put(ouroboros, 0x44);
    384c:	464b      	mov	r3, r9
    384e:	6818      	ldr	r0, [r3, #0]
    3850:	2144      	movs	r1, #68	; 0x44
    3852:	47c0      	blx	r8
    3854:	e741      	b.n	36da <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3856:	201b      	movs	r0, #27
    3858:	4b50      	ldr	r3, [pc, #320]	; (399c <printKeyboardBuffer+0x350>)
    385a:	4698      	mov	r8, r3
    385c:	4798      	blx	r3
				sendChar(0x5B);
    385e:	205b      	movs	r0, #91	; 0x5b
    3860:	47c0      	blx	r8
				sendChar(0x42);
    3862:	2042      	movs	r0, #66	; 0x42
    3864:	47c0      	blx	r8
				if(localEcho)
    3866:	4b4e      	ldr	r3, [pc, #312]	; (39a0 <printKeyboardBuffer+0x354>)
    3868:	781b      	ldrb	r3, [r3, #0]
    386a:	2b00      	cmp	r3, #0
    386c:	d100      	bne.n	3870 <printKeyboardBuffer+0x224>
    386e:	e734      	b.n	36da <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3870:	4b4e      	ldr	r3, [pc, #312]	; (39ac <printKeyboardBuffer+0x360>)
    3872:	4699      	mov	r9, r3
    3874:	211b      	movs	r1, #27
    3876:	6818      	ldr	r0, [r3, #0]
    3878:	4b4d      	ldr	r3, [pc, #308]	; (39b0 <printKeyboardBuffer+0x364>)
    387a:	4698      	mov	r8, r3
    387c:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    387e:	215b      	movs	r1, #91	; 0x5b
    3880:	464b      	mov	r3, r9
    3882:	6818      	ldr	r0, [r3, #0]
    3884:	47c0      	blx	r8
					ring_put(ouroboros, 0x42);
    3886:	464b      	mov	r3, r9
    3888:	6818      	ldr	r0, [r3, #0]
    388a:	2142      	movs	r1, #66	; 0x42
    388c:	47c0      	blx	r8
    388e:	e724      	b.n	36da <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3890:	201b      	movs	r0, #27
    3892:	4b42      	ldr	r3, [pc, #264]	; (399c <printKeyboardBuffer+0x350>)
    3894:	4698      	mov	r8, r3
    3896:	4798      	blx	r3
				sendChar(0x5B);
    3898:	205b      	movs	r0, #91	; 0x5b
    389a:	47c0      	blx	r8
				sendChar(0x41);
    389c:	2041      	movs	r0, #65	; 0x41
    389e:	47c0      	blx	r8
				if(localEcho)
    38a0:	4b3f      	ldr	r3, [pc, #252]	; (39a0 <printKeyboardBuffer+0x354>)
    38a2:	781b      	ldrb	r3, [r3, #0]
    38a4:	2b00      	cmp	r3, #0
    38a6:	d100      	bne.n	38aa <printKeyboardBuffer+0x25e>
    38a8:	e717      	b.n	36da <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    38aa:	4b40      	ldr	r3, [pc, #256]	; (39ac <printKeyboardBuffer+0x360>)
    38ac:	4699      	mov	r9, r3
    38ae:	211b      	movs	r1, #27
    38b0:	6818      	ldr	r0, [r3, #0]
    38b2:	4b3f      	ldr	r3, [pc, #252]	; (39b0 <printKeyboardBuffer+0x364>)
    38b4:	4698      	mov	r8, r3
    38b6:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    38b8:	215b      	movs	r1, #91	; 0x5b
    38ba:	464b      	mov	r3, r9
    38bc:	6818      	ldr	r0, [r3, #0]
    38be:	47c0      	blx	r8
					ring_put(ouroboros, 0x41);
    38c0:	464b      	mov	r3, r9
    38c2:	6818      	ldr	r0, [r3, #0]
    38c4:	2141      	movs	r1, #65	; 0x41
    38c6:	47c0      	blx	r8
    38c8:	e707      	b.n	36da <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    38ca:	201b      	movs	r0, #27
    38cc:	4b33      	ldr	r3, [pc, #204]	; (399c <printKeyboardBuffer+0x350>)
    38ce:	4698      	mov	r8, r3
    38d0:	4798      	blx	r3
				sendChar(0x5B);
    38d2:	205b      	movs	r0, #91	; 0x5b
    38d4:	47c0      	blx	r8
				sendChar(0x43);
    38d6:	2043      	movs	r0, #67	; 0x43
    38d8:	47c0      	blx	r8
				if(localEcho)
    38da:	4b31      	ldr	r3, [pc, #196]	; (39a0 <printKeyboardBuffer+0x354>)
    38dc:	781b      	ldrb	r3, [r3, #0]
    38de:	2b00      	cmp	r3, #0
    38e0:	d100      	bne.n	38e4 <printKeyboardBuffer+0x298>
    38e2:	e6fa      	b.n	36da <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    38e4:	4b31      	ldr	r3, [pc, #196]	; (39ac <printKeyboardBuffer+0x360>)
    38e6:	4699      	mov	r9, r3
    38e8:	211b      	movs	r1, #27
    38ea:	6818      	ldr	r0, [r3, #0]
    38ec:	4b30      	ldr	r3, [pc, #192]	; (39b0 <printKeyboardBuffer+0x364>)
    38ee:	4698      	mov	r8, r3
    38f0:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    38f2:	215b      	movs	r1, #91	; 0x5b
    38f4:	464b      	mov	r3, r9
    38f6:	6818      	ldr	r0, [r3, #0]
    38f8:	47c0      	blx	r8
					ring_put(ouroboros, 0x43);
    38fa:	464b      	mov	r3, r9
    38fc:	6818      	ldr	r0, [r3, #0]
    38fe:	2143      	movs	r1, #67	; 0x43
    3900:	47c0      	blx	r8
    3902:	e6ea      	b.n	36da <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    3904:	ab04      	add	r3, sp, #16
    3906:	4642      	mov	r2, r8
    3908:	5c98      	ldrb	r0, [r3, r2]
    390a:	4b24      	ldr	r3, [pc, #144]	; (399c <printKeyboardBuffer+0x350>)
    390c:	4798      	blx	r3
					if(localEcho)
    390e:	4b24      	ldr	r3, [pc, #144]	; (39a0 <printKeyboardBuffer+0x354>)
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	2b00      	cmp	r3, #0
    3914:	d100      	bne.n	3918 <printKeyboardBuffer+0x2cc>
    3916:	e6e0      	b.n	36da <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    3918:	9b01      	ldr	r3, [sp, #4]
    391a:	781b      	ldrb	r3, [r3, #0]
    391c:	aa04      	add	r2, sp, #16
    391e:	5cd1      	ldrb	r1, [r2, r3]
    3920:	4b22      	ldr	r3, [pc, #136]	; (39ac <printKeyboardBuffer+0x360>)
    3922:	6818      	ldr	r0, [r3, #0]
    3924:	4b22      	ldr	r3, [pc, #136]	; (39b0 <printKeyboardBuffer+0x364>)
    3926:	4798      	blx	r3
    3928:	e6d7      	b.n	36da <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    392a:	ab16      	add	r3, sp, #88	; 0x58
    392c:	4642      	mov	r2, r8
    392e:	5c98      	ldrb	r0, [r3, r2]
    3930:	4b1a      	ldr	r3, [pc, #104]	; (399c <printKeyboardBuffer+0x350>)
    3932:	4798      	blx	r3
					if(localEcho)
    3934:	4b1a      	ldr	r3, [pc, #104]	; (39a0 <printKeyboardBuffer+0x354>)
    3936:	781b      	ldrb	r3, [r3, #0]
    3938:	2b00      	cmp	r3, #0
    393a:	d100      	bne.n	393e <printKeyboardBuffer+0x2f2>
    393c:	e6cd      	b.n	36da <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    393e:	9b01      	ldr	r3, [sp, #4]
    3940:	781b      	ldrb	r3, [r3, #0]
    3942:	aa16      	add	r2, sp, #88	; 0x58
    3944:	5cd0      	ldrb	r0, [r2, r3]
    3946:	4b18      	ldr	r3, [pc, #96]	; (39a8 <printKeyboardBuffer+0x35c>)
    3948:	4798      	blx	r3
    394a:	e6c6      	b.n	36da <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    394c:	ab3a      	add	r3, sp, #232	; 0xe8
    394e:	4642      	mov	r2, r8
    3950:	5c98      	ldrb	r0, [r3, r2]
    3952:	4b12      	ldr	r3, [pc, #72]	; (399c <printKeyboardBuffer+0x350>)
    3954:	4798      	blx	r3
					if(localEcho)
    3956:	4b12      	ldr	r3, [pc, #72]	; (39a0 <printKeyboardBuffer+0x354>)
    3958:	781b      	ldrb	r3, [r3, #0]
    395a:	2b00      	cmp	r3, #0
    395c:	d100      	bne.n	3960 <printKeyboardBuffer+0x314>
    395e:	e6bc      	b.n	36da <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    3960:	9b01      	ldr	r3, [sp, #4]
    3962:	781b      	ldrb	r3, [r3, #0]
    3964:	aa3a      	add	r2, sp, #232	; 0xe8
    3966:	5cd0      	ldrb	r0, [r2, r3]
    3968:	4b0f      	ldr	r3, [pc, #60]	; (39a8 <printKeyboardBuffer+0x35c>)
    396a:	4798      	blx	r3
    396c:	e6b5      	b.n	36da <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    396e:	23ff      	movs	r3, #255	; 0xff
    3970:	703b      	strb	r3, [r7, #0]
    3972:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    3974:	42bc      	cmp	r4, r7
    3976:	d1fb      	bne.n	3970 <printKeyboardBuffer+0x324>
}
    3978:	b04c      	add	sp, #304	; 0x130
    397a:	bc1c      	pop	{r2, r3, r4}
    397c:	4690      	mov	r8, r2
    397e:	4699      	mov	r9, r3
    3980:	46a2      	mov	sl, r4
    3982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3984:	00007be4 	.word	0x00007be4
    3988:	00004905 	.word	0x00004905
    398c:	00007c64 	.word	0x00007c64
    3990:	2000003c 	.word	0x2000003c
    3994:	20000028 	.word	0x20000028
    3998:	00003621 	.word	0x00003621
    399c:	00001891 	.word	0x00001891
    39a0:	200002bf 	.word	0x200002bf
    39a4:	20000334 	.word	0x20000334
    39a8:	00001539 	.word	0x00001539
    39ac:	2000035c 	.word	0x2000035c
    39b0:	00000141 	.word	0x00000141
    39b4:	200002bc 	.word	0x200002bc
    39b8:	20000170 	.word	0x20000170
    39bc:	20000354 	.word	0x20000354

000039c0 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    39c0:	b510      	push	{r4, lr}
    39c2:	4b07      	ldr	r3, [pc, #28]	; (39e0 <removeFromKeyDown+0x20>)
    39c4:	0019      	movs	r1, r3
    39c6:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    39c8:	24ff      	movs	r4, #255	; 0xff
    39ca:	e002      	b.n	39d2 <removeFromKeyDown+0x12>
    39cc:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    39ce:	428b      	cmp	r3, r1
    39d0:	d004      	beq.n	39dc <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    39d2:	781a      	ldrb	r2, [r3, #0]
    39d4:	4282      	cmp	r2, r0
    39d6:	d1f9      	bne.n	39cc <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    39d8:	701c      	strb	r4, [r3, #0]
    39da:	e7f7      	b.n	39cc <removeFromKeyDown+0xc>
		}
	}
}
    39dc:	bd10      	pop	{r4, pc}
    39de:	46c0      	nop			; (mov r8, r8)
    39e0:	20000028 	.word	0x20000028

000039e4 <readKeyboard>:
{
    39e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39e6:	46de      	mov	lr, fp
    39e8:	4657      	mov	r7, sl
    39ea:	464e      	mov	r6, r9
    39ec:	4645      	mov	r5, r8
    39ee:	b5e0      	push	{r5, r6, r7, lr}
    39f0:	b083      	sub	sp, #12
    39f2:	4e6d      	ldr	r6, [pc, #436]	; (3ba8 <readKeyboard+0x1c4>)
    39f4:	0031      	movs	r1, r6
    39f6:	3119      	adds	r1, #25
    39f8:	31ff      	adds	r1, #255	; 0xff
    39fa:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    39fc:	22ff      	movs	r2, #255	; 0xff
    39fe:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    3a00:	428b      	cmp	r3, r1
    3a02:	d1fc      	bne.n	39fe <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    3a04:	4a69      	ldr	r2, [pc, #420]	; (3bac <readKeyboard+0x1c8>)
    3a06:	6a91      	ldr	r1, [r2, #40]	; 0x28
    3a08:	2380      	movs	r3, #128	; 0x80
    3a0a:	03db      	lsls	r3, r3, #15
    3a0c:	430b      	orrs	r3, r1
    3a0e:	6293      	str	r3, [r2, #40]	; 0x28
    3a10:	4c67      	ldr	r4, [pc, #412]	; (3bb0 <readKeyboard+0x1cc>)
    3a12:	341c      	adds	r4, #28
    3a14:	4b66      	ldr	r3, [pc, #408]	; (3bb0 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    3a16:	4867      	ldr	r0, [pc, #412]	; (3bb4 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    3a18:	4967      	ldr	r1, [pc, #412]	; (3bb8 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    3a1a:	681a      	ldr	r2, [r3, #0]
    3a1c:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3a1e:	cb04      	ldmia	r3!, {r2}
    3a20:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    3a22:	42a3      	cmp	r3, r4
    3a24:	d1f9      	bne.n	3a1a <readKeyboard+0x36>
    3a26:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    3a28:	4b64      	ldr	r3, [pc, #400]	; (3bbc <readKeyboard+0x1d8>)
    3a2a:	469c      	mov	ip, r3
    3a2c:	4f64      	ldr	r7, [pc, #400]	; (3bc0 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3a2e:	4d65      	ldr	r5, [pc, #404]	; (3bc4 <readKeyboard+0x1e0>)
    3a30:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3a32:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    3a34:	4663      	mov	r3, ip
    3a36:	58d3      	ldr	r3, [r2, r3]
    3a38:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3a3a:	5953      	ldr	r3, [r2, r5]
    3a3c:	4962      	ldr	r1, [pc, #392]	; (3bc8 <readKeyboard+0x1e4>)
    3a3e:	4688      	mov	r8, r1
    3a40:	4443      	add	r3, r8
    3a42:	7819      	ldrb	r1, [r3, #0]
    3a44:	4321      	orrs	r1, r4
    3a46:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3a48:	7819      	ldrb	r1, [r3, #0]
    3a4a:	4301      	orrs	r1, r0
    3a4c:	7019      	strb	r1, [r3, #0]
    3a4e:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    3a50:	2a28      	cmp	r2, #40	; 0x28
    3a52:	d1ef      	bne.n	3a34 <readKeyboard+0x50>
    3a54:	4b56      	ldr	r3, [pc, #344]	; (3bb0 <readKeyboard+0x1cc>)
    3a56:	4699      	mov	r9, r3
    3a58:	2300      	movs	r3, #0
    3a5a:	4698      	mov	r8, r3
    3a5c:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    3a5e:	4b5b      	ldr	r3, [pc, #364]	; (3bcc <readKeyboard+0x1e8>)
    3a60:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3a62:	4d52      	ldr	r5, [pc, #328]	; (3bac <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    3a64:	4b50      	ldr	r3, [pc, #320]	; (3ba8 <readKeyboard+0x1c4>)
    3a66:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    3a68:	4b53      	ldr	r3, [pc, #332]	; (3bb8 <readKeyboard+0x1d4>)
    3a6a:	469a      	mov	sl, r3
    3a6c:	9601      	str	r6, [sp, #4]
    3a6e:	464e      	mov	r6, r9
    3a70:	4647      	mov	r7, r8
    3a72:	e015      	b.n	3aa0 <readKeyboard+0xbc>
    3a74:	3304      	adds	r3, #4
    3a76:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    3a78:	42a3      	cmp	r3, r4
    3a7a:	d008      	beq.n	3a8e <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3a7c:	6a28      	ldr	r0, [r5, #32]
    3a7e:	681e      	ldr	r6, [r3, #0]
    3a80:	4206      	tst	r6, r0
    3a82:	d0f7      	beq.n	3a74 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    3a84:	0090      	lsls	r0, r2, #2
    3a86:	4666      	mov	r6, ip
    3a88:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    3a8a:	3201      	adds	r2, #1
    3a8c:	e7f2      	b.n	3a74 <readKeyboard+0x90>
    3a8e:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3a90:	4649      	mov	r1, r9
    3a92:	6809      	ldr	r1, [r1, #0]
    3a94:	4650      	mov	r0, sl
    3a96:	6001      	str	r1, [r0, #0]
    3a98:	3604      	adds	r6, #4
    3a9a:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    3a9c:	2f46      	cmp	r7, #70	; 0x46
    3a9e:	d00a      	beq.n	3ab6 <readKeyboard+0xd2>
    3aa0:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    3aa2:	465b      	mov	r3, fp
    3aa4:	6831      	ldr	r1, [r6, #0]
    3aa6:	6019      	str	r1, [r3, #0]
    3aa8:	4b44      	ldr	r3, [pc, #272]	; (3bbc <readKeyboard+0x1d8>)
    3aaa:	4698      	mov	r8, r3
    3aac:	001c      	movs	r4, r3
    3aae:	3428      	adds	r4, #40	; 0x28
    3ab0:	0039      	movs	r1, r7
    3ab2:	9600      	str	r6, [sp, #0]
    3ab4:	e7e2      	b.n	3a7c <readKeyboard+0x98>
    3ab6:	4647      	mov	r7, r8
    3ab8:	9e01      	ldr	r6, [sp, #4]
    3aba:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    3abc:	4d3d      	ldr	r5, [pc, #244]	; (3bb4 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    3abe:	4c3e      	ldr	r4, [pc, #248]	; (3bb8 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    3ac0:	6808      	ldr	r0, [r1, #0]
    3ac2:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    3ac4:	c901      	ldmia	r1!, {r0}
    3ac6:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3ac8:	4299      	cmp	r1, r3
    3aca:	d1f9      	bne.n	3ac0 <readKeyboard+0xdc>
    3acc:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    3ace:	4b38      	ldr	r3, [pc, #224]	; (3bb0 <readKeyboard+0x1cc>)
    3ad0:	4699      	mov	r9, r3
    3ad2:	4b3b      	ldr	r3, [pc, #236]	; (3bc0 <readKeyboard+0x1dc>)
    3ad4:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    3ad6:	4b3e      	ldr	r3, [pc, #248]	; (3bd0 <readKeyboard+0x1ec>)
    3ad8:	469c      	mov	ip, r3
    3ada:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    3adc:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    3ade:	4643      	mov	r3, r8
    3ae0:	4648      	mov	r0, r9
    3ae2:	5808      	ldr	r0, [r1, r0]
    3ae4:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    3ae6:	4663      	mov	r3, ip
    3ae8:	58cb      	ldr	r3, [r1, r3]
    3aea:	4837      	ldr	r0, [pc, #220]	; (3bc8 <readKeyboard+0x1e4>)
    3aec:	4682      	mov	sl, r0
    3aee:	4453      	add	r3, sl
    3af0:	7818      	ldrb	r0, [r3, #0]
    3af2:	4328      	orrs	r0, r5
    3af4:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    3af6:	7818      	ldrb	r0, [r3, #0]
    3af8:	4320      	orrs	r0, r4
    3afa:	7018      	strb	r0, [r3, #0]
    3afc:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    3afe:	291c      	cmp	r1, #28
    3b00:	d1ed      	bne.n	3ade <readKeyboard+0xfa>
    3b02:	2300      	movs	r3, #0
    3b04:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    3b06:	4b31      	ldr	r3, [pc, #196]	; (3bcc <readKeyboard+0x1e8>)
    3b08:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    3b0a:	4d28      	ldr	r5, [pc, #160]	; (3bac <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    3b0c:	4b26      	ldr	r3, [pc, #152]	; (3ba8 <readKeyboard+0x1c4>)
    3b0e:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    3b10:	4b29      	ldr	r3, [pc, #164]	; (3bb8 <readKeyboard+0x1d4>)
    3b12:	469a      	mov	sl, r3
    3b14:	46b1      	mov	r9, r6
    3b16:	003e      	movs	r6, r7
    3b18:	4667      	mov	r7, ip
    3b1a:	e015      	b.n	3b48 <readKeyboard+0x164>
    3b1c:	3104      	adds	r1, #4
    3b1e:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    3b20:	42a3      	cmp	r3, r4
    3b22:	d008      	beq.n	3b36 <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    3b24:	6a28      	ldr	r0, [r5, #32]
    3b26:	680e      	ldr	r6, [r1, #0]
    3b28:	4206      	tst	r6, r0
    3b2a:	d0f7      	beq.n	3b1c <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    3b2c:	0090      	lsls	r0, r2, #2
    3b2e:	4646      	mov	r6, r8
    3b30:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    3b32:	3201      	adds	r2, #1
    3b34:	e7f2      	b.n	3b1c <readKeyboard+0x138>
    3b36:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    3b38:	4663      	mov	r3, ip
    3b3a:	681b      	ldr	r3, [r3, #0]
    3b3c:	4651      	mov	r1, sl
    3b3e:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3b40:	3701      	adds	r7, #1
    3b42:	3604      	adds	r6, #4
    3b44:	2f0a      	cmp	r7, #10
    3b46:	d009      	beq.n	3b5c <readKeyboard+0x178>
    3b48:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    3b4a:	465b      	mov	r3, fp
    3b4c:	6831      	ldr	r1, [r6, #0]
    3b4e:	6019      	str	r1, [r3, #0]
    3b50:	003b      	movs	r3, r7
    3b52:	003c      	movs	r4, r7
    3b54:	3446      	adds	r4, #70	; 0x46
    3b56:	4916      	ldr	r1, [pc, #88]	; (3bb0 <readKeyboard+0x1cc>)
    3b58:	9600      	str	r6, [sp, #0]
    3b5a:	e7e3      	b.n	3b24 <readKeyboard+0x140>
    3b5c:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    3b5e:	2a00      	cmp	r2, #0
    3b60:	dd08      	ble.n	3b74 <readKeyboard+0x190>
    3b62:	4b1c      	ldr	r3, [pc, #112]	; (3bd4 <readKeyboard+0x1f0>)
    3b64:	0092      	lsls	r2, r2, #2
    3b66:	4910      	ldr	r1, [pc, #64]	; (3ba8 <readKeyboard+0x1c4>)
    3b68:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    3b6a:	ce02      	ldmia	r6!, {r1}
    3b6c:	7019      	strb	r1, [r3, #0]
    3b6e:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    3b70:	42b2      	cmp	r2, r6
    3b72:	d1fa      	bne.n	3b6a <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    3b74:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    3b76:	4d18      	ldr	r5, [pc, #96]	; (3bd8 <readKeyboard+0x1f4>)
    3b78:	4e18      	ldr	r6, [pc, #96]	; (3bdc <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    3b7a:	4f19      	ldr	r7, [pc, #100]	; (3be0 <readKeyboard+0x1fc>)
    3b7c:	e002      	b.n	3b84 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    3b7e:	3401      	adds	r4, #1
    3b80:	2c46      	cmp	r4, #70	; 0x46
    3b82:	d00a      	beq.n	3b9a <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    3b84:	0020      	movs	r0, r4
    3b86:	47a8      	blx	r5
    3b88:	2800      	cmp	r0, #0
    3b8a:	d0f8      	beq.n	3b7e <readKeyboard+0x19a>
    3b8c:	0020      	movs	r0, r4
    3b8e:	47b0      	blx	r6
    3b90:	2800      	cmp	r0, #0
    3b92:	d1f4      	bne.n	3b7e <readKeyboard+0x19a>
			removeFromKeyDown(i);
    3b94:	0020      	movs	r0, r4
    3b96:	47b8      	blx	r7
    3b98:	e7f1      	b.n	3b7e <readKeyboard+0x19a>
}
    3b9a:	b003      	add	sp, #12
    3b9c:	bc3c      	pop	{r2, r3, r4, r5}
    3b9e:	4690      	mov	r8, r2
    3ba0:	4699      	mov	r9, r3
    3ba2:	46a2      	mov	sl, r4
    3ba4:	46ab      	mov	fp, r5
    3ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ba8:	20000050 	.word	0x20000050
    3bac:	41004400 	.word	0x41004400
    3bb0:	00007d04 	.word	0x00007d04
    3bb4:	41004408 	.word	0x41004408
    3bb8:	41004414 	.word	0x41004414
    3bbc:	00007d3c 	.word	0x00007d3c
    3bc0:	41004404 	.word	0x41004404
    3bc4:	00007d64 	.word	0x00007d64
    3bc8:	41004440 	.word	0x41004440
    3bcc:	41004418 	.word	0x41004418
    3bd0:	00007d20 	.word	0x00007d20
    3bd4:	2000003c 	.word	0x2000003c
    3bd8:	00003621 	.word	0x00003621
    3bdc:	000035f5 	.word	0x000035f5
    3be0:	000039c1 	.word	0x000039c1

00003be4 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    3be4:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    3be6:	094b      	lsrs	r3, r1, #5
    3be8:	2407      	movs	r4, #7
    3bea:	43a0      	bics	r0, r4
    3bec:	4318      	orrs	r0, r3
    3bee:	4b05      	ldr	r3, [pc, #20]	; (3c04 <setColorRGB+0x20>)
    3bf0:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    3bf2:	00c9      	lsls	r1, r1, #3
    3bf4:	23e0      	movs	r3, #224	; 0xe0
    3bf6:	4019      	ands	r1, r3
    3bf8:	08d2      	lsrs	r2, r2, #3
    3bfa:	430a      	orrs	r2, r1
    3bfc:	4b02      	ldr	r3, [pc, #8]	; (3c08 <setColorRGB+0x24>)
    3bfe:	801a      	strh	r2, [r3, #0]
}
    3c00:	bd10      	pop	{r4, pc}
    3c02:	46c0      	nop			; (mov r8, r8)
    3c04:	20000b42 	.word	0x20000b42
    3c08:	20000b44 	.word	0x20000b44

00003c0c <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    3c0c:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    3c0e:	094b      	lsrs	r3, r1, #5
    3c10:	2407      	movs	r4, #7
    3c12:	43a0      	bics	r0, r4
    3c14:	4318      	orrs	r0, r3
    3c16:	4b05      	ldr	r3, [pc, #20]	; (3c2c <setBackColorRGB+0x20>)
    3c18:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    3c1a:	00c9      	lsls	r1, r1, #3
    3c1c:	23e0      	movs	r3, #224	; 0xe0
    3c1e:	4019      	ands	r1, r3
    3c20:	08d2      	lsrs	r2, r2, #3
    3c22:	430a      	orrs	r2, r1
    3c24:	4b02      	ldr	r3, [pc, #8]	; (3c30 <setBackColorRGB+0x24>)
    3c26:	801a      	strh	r2, [r3, #0]
}
    3c28:	bd10      	pop	{r4, pc}
    3c2a:	46c0      	nop			; (mov r8, r8)
    3c2c:	20000b46 	.word	0x20000b46
    3c30:	20000b40 	.word	0x20000b40

00003c34 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    3c34:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3c36:	4c19      	ldr	r4, [pc, #100]	; (3c9c <LCD_Fast_Fill+0x68>)
    3c38:	4b19      	ldr	r3, [pc, #100]	; (3ca0 <LCD_Fast_Fill+0x6c>)
    3c3a:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    3c3c:	0200      	lsls	r0, r0, #8
    3c3e:	4301      	orrs	r1, r0
    3c40:	4b18      	ldr	r3, [pc, #96]	; (3ca4 <LCD_Fast_Fill+0x70>)
    3c42:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    3c44:	17d3      	asrs	r3, r2, #31
    3c46:	260f      	movs	r6, #15
    3c48:	401e      	ands	r6, r3
    3c4a:	18b6      	adds	r6, r6, r2
    3c4c:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    3c4e:	2500      	movs	r5, #0
    3c50:	2e00      	cmp	r6, #0
    3c52:	dd0c      	ble.n	3c6e <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    3c54:	4c12      	ldr	r4, [pc, #72]	; (3ca0 <LCD_Fast_Fill+0x6c>)
    3c56:	2180      	movs	r1, #128	; 0x80
    3c58:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    3c5a:	4812      	ldr	r0, [pc, #72]	; (3ca4 <LCD_Fast_Fill+0x70>)
{
    3c5c:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    3c5e:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    3c60:	6001      	str	r1, [r0, #0]
    3c62:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    3c64:	2b00      	cmp	r3, #0
    3c66:	d1fa      	bne.n	3c5e <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    3c68:	3501      	adds	r5, #1
    3c6a:	42ae      	cmp	r6, r5
    3c6c:	d1f6      	bne.n	3c5c <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    3c6e:	0713      	lsls	r3, r2, #28
    3c70:	d013      	beq.n	3c9a <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    3c72:	17d3      	asrs	r3, r2, #31
    3c74:	0f1b      	lsrs	r3, r3, #28
    3c76:	18d2      	adds	r2, r2, r3
    3c78:	210f      	movs	r1, #15
    3c7a:	4011      	ands	r1, r2
    3c7c:	1ac9      	subs	r1, r1, r3
    3c7e:	1c4b      	adds	r3, r1, #1
    3c80:	2b00      	cmp	r3, #0
    3c82:	dd0a      	ble.n	3c9a <LCD_Fast_Fill+0x66>
    3c84:	0019      	movs	r1, r3
    3c86:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    3c88:	4c05      	ldr	r4, [pc, #20]	; (3ca0 <LCD_Fast_Fill+0x6c>)
    3c8a:	2280      	movs	r2, #128	; 0x80
    3c8c:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    3c8e:	4805      	ldr	r0, [pc, #20]	; (3ca4 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    3c90:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    3c92:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    3c94:	3301      	adds	r3, #1
    3c96:	4299      	cmp	r1, r3
    3c98:	d1fa      	bne.n	3c90 <LCD_Fast_Fill+0x5c>
	}
}
    3c9a:	bd70      	pop	{r4, r5, r6, pc}
    3c9c:	0000ffff 	.word	0x0000ffff
    3ca0:	41004494 	.word	0x41004494
    3ca4:	41004498 	.word	0x41004498

00003ca8 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    3ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3caa:	b083      	sub	sp, #12
    3cac:	0007      	movs	r7, r0
    3cae:	9100      	str	r1, [sp, #0]
    3cb0:	0016      	movs	r6, r2
    3cb2:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    3cb4:	2100      	movs	r1, #0
    3cb6:	202a      	movs	r0, #42	; 0x2a
    3cb8:	4c17      	ldr	r4, [pc, #92]	; (3d18 <setXY+0x70>)
    3cba:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    3cbc:	0a38      	lsrs	r0, r7, #8
    3cbe:	4d17      	ldr	r5, [pc, #92]	; (3d1c <setXY+0x74>)
    3cc0:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    3cc2:	2101      	movs	r1, #1
    3cc4:	202a      	movs	r0, #42	; 0x2a
    3cc6:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    3cc8:	b2f8      	uxtb	r0, r7
    3cca:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    3ccc:	2102      	movs	r1, #2
    3cce:	202a      	movs	r0, #42	; 0x2a
    3cd0:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    3cd2:	0a30      	lsrs	r0, r6, #8
    3cd4:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    3cd6:	2103      	movs	r1, #3
    3cd8:	202a      	movs	r0, #42	; 0x2a
    3cda:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    3cdc:	b2f0      	uxtb	r0, r6
    3cde:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    3ce0:	2100      	movs	r1, #0
    3ce2:	202b      	movs	r0, #43	; 0x2b
    3ce4:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    3ce6:	9e00      	ldr	r6, [sp, #0]
    3ce8:	0a30      	lsrs	r0, r6, #8
    3cea:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    3cec:	2101      	movs	r1, #1
    3cee:	202b      	movs	r0, #43	; 0x2b
    3cf0:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    3cf2:	b2f0      	uxtb	r0, r6
    3cf4:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    3cf6:	2102      	movs	r1, #2
    3cf8:	202b      	movs	r0, #43	; 0x2b
    3cfa:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    3cfc:	9e01      	ldr	r6, [sp, #4]
    3cfe:	0a30      	lsrs	r0, r6, #8
    3d00:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    3d02:	2103      	movs	r1, #3
    3d04:	202b      	movs	r0, #43	; 0x2b
    3d06:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    3d08:	b2f0      	uxtb	r0, r6
    3d0a:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    3d0c:	2100      	movs	r1, #0
    3d0e:	202c      	movs	r0, #44	; 0x2c
    3d10:	47a0      	blx	r4
}
    3d12:	b003      	add	sp, #12
    3d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	00003e4d 	.word	0x00003e4d
    3d1c:	00003e7d 	.word	0x00003e7d

00003d20 <fillRect>:
{
    3d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d22:	46ce      	mov	lr, r9
    3d24:	4647      	mov	r7, r8
    3d26:	b580      	push	{r7, lr}
    3d28:	b083      	sub	sp, #12
    3d2a:	0006      	movs	r6, r0
    3d2c:	4689      	mov	r9, r1
    3d2e:	0014      	movs	r4, r2
    3d30:	001d      	movs	r5, r3
	if (x1>x2)
    3d32:	4290      	cmp	r0, r2
    3d34:	dd01      	ble.n	3d3a <fillRect+0x1a>
		x1 = x2;
    3d36:	0016      	movs	r6, r2
		x2 = temp;
    3d38:	0004      	movs	r4, r0
	if (y1>y2)
    3d3a:	45a9      	cmp	r9, r5
    3d3c:	dd02      	ble.n	3d44 <fillRect+0x24>
    3d3e:	0033      	movs	r3, r6
		x1 = x2;
    3d40:	0026      	movs	r6, r4
		x2 = temp;
    3d42:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    3d44:	2380      	movs	r3, #128	; 0x80
    3d46:	03db      	lsls	r3, r3, #15
    3d48:	4698      	mov	r8, r3
    3d4a:	4b11      	ldr	r3, [pc, #68]	; (3d90 <fillRect+0x70>)
    3d4c:	4642      	mov	r2, r8
    3d4e:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    3d50:	b2ab      	uxth	r3, r5
    3d52:	b2a2      	uxth	r2, r4
    3d54:	4649      	mov	r1, r9
    3d56:	4668      	mov	r0, sp
    3d58:	80c1      	strh	r1, [r0, #6]
    3d5a:	88c1      	ldrh	r1, [r0, #6]
    3d5c:	b2b0      	uxth	r0, r6
    3d5e:	4f0d      	ldr	r7, [pc, #52]	; (3d94 <fillRect+0x74>)
    3d60:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    3d62:	4f0d      	ldr	r7, [pc, #52]	; (3d98 <fillRect+0x78>)
    3d64:	2380      	movs	r3, #128	; 0x80
    3d66:	041b      	lsls	r3, r3, #16
    3d68:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    3d6a:	1ba4      	subs	r4, r4, r6
    3d6c:	3401      	adds	r4, #1
    3d6e:	464b      	mov	r3, r9
    3d70:	1aea      	subs	r2, r5, r3
    3d72:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    3d74:	4362      	muls	r2, r4
    3d76:	4b09      	ldr	r3, [pc, #36]	; (3d9c <fillRect+0x7c>)
    3d78:	8819      	ldrh	r1, [r3, #0]
    3d7a:	4b09      	ldr	r3, [pc, #36]	; (3da0 <fillRect+0x80>)
    3d7c:	8818      	ldrh	r0, [r3, #0]
    3d7e:	4b09      	ldr	r3, [pc, #36]	; (3da4 <fillRect+0x84>)
    3d80:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    3d82:	4643      	mov	r3, r8
    3d84:	603b      	str	r3, [r7, #0]
}
    3d86:	b003      	add	sp, #12
    3d88:	bc0c      	pop	{r2, r3}
    3d8a:	4690      	mov	r8, r2
    3d8c:	4699      	mov	r9, r3
    3d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d90:	41004494 	.word	0x41004494
    3d94:	00003ca9 	.word	0x00003ca9
    3d98:	41004498 	.word	0x41004498
    3d9c:	20000b44 	.word	0x20000b44
    3da0:	20000b42 	.word	0x20000b42
    3da4:	00003c35 	.word	0x00003c35

00003da8 <clrXY>:
{
    3da8:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    3daa:	4b04      	ldr	r3, [pc, #16]	; (3dbc <clrXY+0x14>)
    3dac:	881b      	ldrh	r3, [r3, #0]
    3dae:	4a04      	ldr	r2, [pc, #16]	; (3dc0 <clrXY+0x18>)
    3db0:	8812      	ldrh	r2, [r2, #0]
    3db2:	2100      	movs	r1, #0
    3db4:	2000      	movs	r0, #0
    3db6:	4c03      	ldr	r4, [pc, #12]	; (3dc4 <clrXY+0x1c>)
    3db8:	47a0      	blx	r4
}
    3dba:	bd10      	pop	{r4, pc}
    3dbc:	2000016a 	.word	0x2000016a
    3dc0:	20000168 	.word	0x20000168
    3dc4:	00003ca9 	.word	0x00003ca9

00003dc8 <clrScr>:
{
    3dc8:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    3dca:	2280      	movs	r2, #128	; 0x80
    3dcc:	03d2      	lsls	r2, r2, #15
    3dce:	4b02      	ldr	r3, [pc, #8]	; (3dd8 <clrScr+0x10>)
    3dd0:	601a      	str	r2, [r3, #0]
	clrXY();
    3dd2:	4b02      	ldr	r3, [pc, #8]	; (3ddc <clrScr+0x14>)
    3dd4:	4798      	blx	r3
}
    3dd6:	bd10      	pop	{r4, pc}
    3dd8:	41004494 	.word	0x41004494
    3ddc:	00003da9 	.word	0x00003da9

00003de0 <setPixel>:

void setPixel(uint16_t color)
{
    3de0:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color<<8),(color&0xFF));
    3de2:	b2c1      	uxtb	r1, r0
    3de4:	2000      	movs	r0, #0
    3de6:	4b01      	ldr	r3, [pc, #4]	; (3dec <setPixel+0xc>)
    3de8:	4798      	blx	r3
}
    3dea:	bd10      	pop	{r4, pc}
    3dec:	00003e65 	.word	0x00003e65

00003df0 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    3df0:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    3df2:	2300      	movs	r3, #0
    3df4:	4a06      	ldr	r2, [pc, #24]	; (3e10 <clearScreen+0x20>)
    3df6:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    3df8:	4a06      	ldr	r2, [pc, #24]	; (3e14 <clearScreen+0x24>)
    3dfa:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    3dfc:	4b06      	ldr	r3, [pc, #24]	; (3e18 <clearScreen+0x28>)
    3dfe:	881b      	ldrh	r3, [r3, #0]
    3e00:	4a06      	ldr	r2, [pc, #24]	; (3e1c <clearScreen+0x2c>)
    3e02:	8812      	ldrh	r2, [r2, #0]
    3e04:	2100      	movs	r1, #0
    3e06:	2000      	movs	r0, #0
    3e08:	4c05      	ldr	r4, [pc, #20]	; (3e20 <clearScreen+0x30>)
    3e0a:	47a0      	blx	r4
}
    3e0c:	bd10      	pop	{r4, pc}
    3e0e:	46c0      	nop			; (mov r8, r8)
    3e10:	20000b42 	.word	0x20000b42
    3e14:	20000b44 	.word	0x20000b44
    3e18:	20000168 	.word	0x20000168
    3e1c:	2000016a 	.word	0x2000016a
    3e20:	00003d21 	.word	0x00003d21

00003e24 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    3e24:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3e26:	4c06      	ldr	r4, [pc, #24]	; (3e40 <LCD_Write_Bus+0x1c>)
    3e28:	4b06      	ldr	r3, [pc, #24]	; (3e44 <LCD_Write_Bus+0x20>)
    3e2a:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    3e2c:	0200      	lsls	r0, r0, #8
    3e2e:	4301      	orrs	r1, r0
    3e30:	4b05      	ldr	r3, [pc, #20]	; (3e48 <LCD_Write_Bus+0x24>)
    3e32:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    3e34:	2280      	movs	r2, #128	; 0x80
    3e36:	0292      	lsls	r2, r2, #10
    3e38:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    3e3a:	601a      	str	r2, [r3, #0]
}
    3e3c:	bd10      	pop	{r4, pc}
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	41004494 	.word	0x41004494
    3e44:	0000ffff 	.word	0x0000ffff
    3e48:	41004498 	.word	0x41004498

00003e4c <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    3e4c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    3e4e:	2280      	movs	r2, #128	; 0x80
    3e50:	0412      	lsls	r2, r2, #16
    3e52:	4b02      	ldr	r3, [pc, #8]	; (3e5c <LCD_Write_COM16+0x10>)
    3e54:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    3e56:	4b02      	ldr	r3, [pc, #8]	; (3e60 <LCD_Write_COM16+0x14>)
    3e58:	4798      	blx	r3
}
    3e5a:	bd10      	pop	{r4, pc}
    3e5c:	41004494 	.word	0x41004494
    3e60:	00003e25 	.word	0x00003e25

00003e64 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    3e64:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    3e66:	2280      	movs	r2, #128	; 0x80
    3e68:	0412      	lsls	r2, r2, #16
    3e6a:	4b02      	ldr	r3, [pc, #8]	; (3e74 <LCD_Write_DATA16+0x10>)
    3e6c:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    3e6e:	4b02      	ldr	r3, [pc, #8]	; (3e78 <LCD_Write_DATA16+0x14>)
    3e70:	4798      	blx	r3
}
    3e72:	bd10      	pop	{r4, pc}
    3e74:	41004498 	.word	0x41004498
    3e78:	00003e25 	.word	0x00003e25

00003e7c <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    3e7c:	b510      	push	{r4, lr}
    3e7e:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    3e80:	2280      	movs	r2, #128	; 0x80
    3e82:	0412      	lsls	r2, r2, #16
    3e84:	4b02      	ldr	r3, [pc, #8]	; (3e90 <LCD_Write_DATA8+0x14>)
    3e86:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    3e88:	2000      	movs	r0, #0
    3e8a:	4b02      	ldr	r3, [pc, #8]	; (3e94 <LCD_Write_DATA8+0x18>)
    3e8c:	4798      	blx	r3
}
    3e8e:	bd10      	pop	{r4, pc}
    3e90:	41004498 	.word	0x41004498
    3e94:	00003e25 	.word	0x00003e25

00003e98 <InitLCD>:
{
    3e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e9a:	46c6      	mov	lr, r8
    3e9c:	b500      	push	{lr}
    3e9e:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    3ea0:	4b80      	ldr	r3, [pc, #512]	; (40a4 <InitLCD+0x20c>)
    3ea2:	4f81      	ldr	r7, [pc, #516]	; (40a8 <InitLCD+0x210>)
    3ea4:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    3ea6:	2580      	movs	r5, #128	; 0x80
    3ea8:	05ed      	lsls	r5, r5, #23
    3eaa:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    3eac:	2680      	movs	r6, #128	; 0x80
    3eae:	03f6      	lsls	r6, r6, #15
    3eb0:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    3eb2:	2080      	movs	r0, #128	; 0x80
    3eb4:	0280      	lsls	r0, r0, #10
    3eb6:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    3eb8:	2180      	movs	r1, #128	; 0x80
    3eba:	0409      	lsls	r1, r1, #16
    3ebc:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    3ebe:	2280      	movs	r2, #128	; 0x80
    3ec0:	0252      	lsls	r2, r2, #9
    3ec2:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3ec4:	4c79      	ldr	r4, [pc, #484]	; (40ac <InitLCD+0x214>)
    3ec6:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    3ec8:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    3eca:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    3ecc:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    3ece:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    3ed0:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    3ed2:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    3ed4:	4f76      	ldr	r7, [pc, #472]	; (40b0 <InitLCD+0x218>)
    3ed6:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    3ed8:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    3eda:	2005      	movs	r0, #5
    3edc:	4b75      	ldr	r3, [pc, #468]	; (40b4 <InitLCD+0x21c>)
    3ede:	4698      	mov	r8, r3
    3ee0:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    3ee2:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    3ee4:	2005      	movs	r0, #5
    3ee6:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    3ee8:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    3eea:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    3eec:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    3eee:	4b6f      	ldr	r3, [pc, #444]	; (40ac <InitLCD+0x214>)
    3ef0:	4698      	mov	r8, r3
    3ef2:	2580      	movs	r5, #128	; 0x80
    3ef4:	042d      	lsls	r5, r5, #16
    3ef6:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    3ef8:	4e6f      	ldr	r6, [pc, #444]	; (40b8 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    3efa:	4643      	mov	r3, r8
    3efc:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    3efe:	5da1      	ldrb	r1, [r4, r6]
    3f00:	4b6e      	ldr	r3, [pc, #440]	; (40bc <InitLCD+0x224>)
    3f02:	5ce0      	ldrb	r0, [r4, r3]
    3f04:	4b6e      	ldr	r3, [pc, #440]	; (40c0 <InitLCD+0x228>)
    3f06:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    3f08:	4b69      	ldr	r3, [pc, #420]	; (40b0 <InitLCD+0x218>)
    3f0a:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    3f0c:	4b6d      	ldr	r3, [pc, #436]	; (40c4 <InitLCD+0x22c>)
    3f0e:	5ce0      	ldrb	r0, [r4, r3]
    3f10:	4b6d      	ldr	r3, [pc, #436]	; (40c8 <InitLCD+0x230>)
    3f12:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    3f14:	3401      	adds	r4, #1
    3f16:	2c46      	cmp	r4, #70	; 0x46
    3f18:	d1ef      	bne.n	3efa <InitLCD+0x62>
    3f1a:	23d1      	movs	r3, #209	; 0xd1
    3f1c:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    3f1e:	4d68      	ldr	r5, [pc, #416]	; (40c0 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    3f20:	4f69      	ldr	r7, [pc, #420]	; (40c8 <InitLCD+0x230>)
    3f22:	4c6a      	ldr	r4, [pc, #424]	; (40cc <InitLCD+0x234>)
    3f24:	0026      	movs	r6, r4
    3f26:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    3f28:	2100      	movs	r1, #0
    3f2a:	9801      	ldr	r0, [sp, #4]
    3f2c:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    3f2e:	7820      	ldrb	r0, [r4, #0]
    3f30:	47b8      	blx	r7
    3f32:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    3f34:	42a6      	cmp	r6, r4
    3f36:	d1f7      	bne.n	3f28 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    3f38:	9b01      	ldr	r3, [sp, #4]
    3f3a:	3301      	adds	r3, #1
    3f3c:	b2db      	uxtb	r3, r3
    3f3e:	9301      	str	r3, [sp, #4]
    3f40:	2bd6      	cmp	r3, #214	; 0xd6
    3f42:	d1ee      	bne.n	3f22 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    3f44:	2100      	movs	r1, #0
    3f46:	20f0      	movs	r0, #240	; 0xf0
    3f48:	4c5d      	ldr	r4, [pc, #372]	; (40c0 <InitLCD+0x228>)
    3f4a:	47a0      	blx	r4
    3f4c:	2055      	movs	r0, #85	; 0x55
    3f4e:	4d5e      	ldr	r5, [pc, #376]	; (40c8 <InitLCD+0x230>)
    3f50:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    3f52:	2101      	movs	r1, #1
    3f54:	20f0      	movs	r0, #240	; 0xf0
    3f56:	47a0      	blx	r4
    3f58:	20aa      	movs	r0, #170	; 0xaa
    3f5a:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    3f5c:	2102      	movs	r1, #2
    3f5e:	20f0      	movs	r0, #240	; 0xf0
    3f60:	47a0      	blx	r4
    3f62:	2052      	movs	r0, #82	; 0x52
    3f64:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    3f66:	2103      	movs	r1, #3
    3f68:	20f0      	movs	r0, #240	; 0xf0
    3f6a:	47a0      	blx	r4
    3f6c:	2008      	movs	r0, #8
    3f6e:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    3f70:	2104      	movs	r1, #4
    3f72:	20f0      	movs	r0, #240	; 0xf0
    3f74:	47a0      	blx	r4
    3f76:	2000      	movs	r0, #0
    3f78:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    3f7a:	2100      	movs	r1, #0
    3f7c:	20b1      	movs	r0, #177	; 0xb1
    3f7e:	47a0      	blx	r4
    3f80:	20cc      	movs	r0, #204	; 0xcc
    3f82:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    3f84:	2101      	movs	r1, #1
    3f86:	20b1      	movs	r0, #177	; 0xb1
    3f88:	47a0      	blx	r4
    3f8a:	2000      	movs	r0, #0
    3f8c:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    3f8e:	2100      	movs	r1, #0
    3f90:	20b5      	movs	r0, #181	; 0xb5
    3f92:	47a0      	blx	r4
    3f94:	2050      	movs	r0, #80	; 0x50
    3f96:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    3f98:	2100      	movs	r1, #0
    3f9a:	20b6      	movs	r0, #182	; 0xb6
    3f9c:	47a0      	blx	r4
    3f9e:	2005      	movs	r0, #5
    3fa0:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    3fa2:	2100      	movs	r1, #0
    3fa4:	20b7      	movs	r0, #183	; 0xb7
    3fa6:	47a0      	blx	r4
    3fa8:	2070      	movs	r0, #112	; 0x70
    3faa:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    3fac:	2101      	movs	r1, #1
    3fae:	20b7      	movs	r0, #183	; 0xb7
    3fb0:	47a0      	blx	r4
    3fb2:	2070      	movs	r0, #112	; 0x70
    3fb4:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    3fb6:	2100      	movs	r1, #0
    3fb8:	20b8      	movs	r0, #184	; 0xb8
    3fba:	47a0      	blx	r4
    3fbc:	2001      	movs	r0, #1
    3fbe:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    3fc0:	2101      	movs	r1, #1
    3fc2:	20b8      	movs	r0, #184	; 0xb8
    3fc4:	47a0      	blx	r4
    3fc6:	2003      	movs	r0, #3
    3fc8:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    3fca:	2102      	movs	r1, #2
    3fcc:	20b8      	movs	r0, #184	; 0xb8
    3fce:	47a0      	blx	r4
    3fd0:	2003      	movs	r0, #3
    3fd2:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    3fd4:	2103      	movs	r1, #3
    3fd6:	20b8      	movs	r0, #184	; 0xb8
    3fd8:	47a0      	blx	r4
    3fda:	2003      	movs	r0, #3
    3fdc:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    3fde:	2100      	movs	r1, #0
    3fe0:	20bc      	movs	r0, #188	; 0xbc
    3fe2:	47a0      	blx	r4
    3fe4:	2002      	movs	r0, #2
    3fe6:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    3fe8:	2101      	movs	r1, #1
    3fea:	20bc      	movs	r0, #188	; 0xbc
    3fec:	47a0      	blx	r4
    3fee:	2000      	movs	r0, #0
    3ff0:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    3ff2:	2102      	movs	r1, #2
    3ff4:	20bc      	movs	r0, #188	; 0xbc
    3ff6:	47a0      	blx	r4
    3ff8:	2000      	movs	r0, #0
    3ffa:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    3ffc:	2100      	movs	r1, #0
    3ffe:	20c9      	movs	r0, #201	; 0xc9
    4000:	47a0      	blx	r4
    4002:	20d0      	movs	r0, #208	; 0xd0
    4004:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    4006:	2101      	movs	r1, #1
    4008:	20c9      	movs	r0, #201	; 0xc9
    400a:	47a0      	blx	r4
    400c:	2002      	movs	r0, #2
    400e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    4010:	2102      	movs	r1, #2
    4012:	20c9      	movs	r0, #201	; 0xc9
    4014:	47a0      	blx	r4
    4016:	2050      	movs	r0, #80	; 0x50
    4018:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    401a:	2103      	movs	r1, #3
    401c:	20c9      	movs	r0, #201	; 0xc9
    401e:	47a0      	blx	r4
    4020:	2050      	movs	r0, #80	; 0x50
    4022:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    4024:	2104      	movs	r1, #4
    4026:	20c9      	movs	r0, #201	; 0xc9
    4028:	47a0      	blx	r4
    402a:	2050      	movs	r0, #80	; 0x50
    402c:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    402e:	2100      	movs	r1, #0
    4030:	2035      	movs	r0, #53	; 0x35
    4032:	47a0      	blx	r4
    4034:	2000      	movs	r0, #0
    4036:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    4038:	2100      	movs	r1, #0
    403a:	203a      	movs	r0, #58	; 0x3a
    403c:	47a0      	blx	r4
    403e:	2055      	movs	r0, #85	; 0x55
    4040:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    4042:	2100      	movs	r1, #0
    4044:	2036      	movs	r0, #54	; 0x36
    4046:	47a0      	blx	r4
    4048:	20e2      	movs	r0, #226	; 0xe2
    404a:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    404c:	2100      	movs	r1, #0
    404e:	2011      	movs	r0, #17
    4050:	47a0      	blx	r4
  	delay_ms(100);
    4052:	2064      	movs	r0, #100	; 0x64
    4054:	4e17      	ldr	r6, [pc, #92]	; (40b4 <InitLCD+0x21c>)
    4056:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    4058:	2100      	movs	r1, #0
    405a:	2029      	movs	r0, #41	; 0x29
    405c:	47a0      	blx	r4
   	delay_ms(100);
    405e:	2064      	movs	r0, #100	; 0x64
    4060:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    4062:	2100      	movs	r1, #0
    4064:	2051      	movs	r0, #81	; 0x51
    4066:	47a0      	blx	r4
    4068:	20ff      	movs	r0, #255	; 0xff
    406a:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    406c:	2280      	movs	r2, #128	; 0x80
    406e:	03d2      	lsls	r2, r2, #15
    4070:	4b0f      	ldr	r3, [pc, #60]	; (40b0 <InitLCD+0x218>)
    4072:	601a      	str	r2, [r3, #0]
	clrScr();
    4074:	4b16      	ldr	r3, [pc, #88]	; (40d0 <InitLCD+0x238>)
    4076:	4798      	blx	r3
	setColorRGB(0,0,0);
    4078:	2200      	movs	r2, #0
    407a:	2100      	movs	r1, #0
    407c:	2000      	movs	r0, #0
    407e:	4b15      	ldr	r3, [pc, #84]	; (40d4 <InitLCD+0x23c>)
    4080:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    4082:	2200      	movs	r2, #0
    4084:	2100      	movs	r1, #0
    4086:	2000      	movs	r0, #0
    4088:	4b13      	ldr	r3, [pc, #76]	; (40d8 <InitLCD+0x240>)
    408a:	4798      	blx	r3
	fillRect(0,0,799,489);
    408c:	23ea      	movs	r3, #234	; 0xea
    408e:	33ff      	adds	r3, #255	; 0xff
    4090:	4a12      	ldr	r2, [pc, #72]	; (40dc <InitLCD+0x244>)
    4092:	2100      	movs	r1, #0
    4094:	2000      	movs	r0, #0
    4096:	4c12      	ldr	r4, [pc, #72]	; (40e0 <InitLCD+0x248>)
    4098:	47a0      	blx	r4
}
    409a:	b002      	add	sp, #8
    409c:	bc04      	pop	{r2}
    409e:	4690      	mov	r8, r2
    40a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40a2:	46c0      	nop			; (mov r8, r8)
    40a4:	41004488 	.word	0x41004488
    40a8:	0000ffff 	.word	0x0000ffff
    40ac:	41004494 	.word	0x41004494
    40b0:	41004498 	.word	0x41004498
    40b4:	000018dd 	.word	0x000018dd
    40b8:	00007e50 	.word	0x00007e50
    40bc:	00007dc0 	.word	0x00007dc0
    40c0:	00003e4d 	.word	0x00003e4d
    40c4:	00007e08 	.word	0x00007e08
    40c8:	00003e7d 	.word	0x00003e7d
    40cc:	00007d8c 	.word	0x00007d8c
    40d0:	00003dc9 	.word	0x00003dc9
    40d4:	00003be5 	.word	0x00003be5
    40d8:	00003c0d 	.word	0x00003c0d
    40dc:	0000031f 	.word	0x0000031f
    40e0:	00003d21 	.word	0x00003d21

000040e4 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    40e4:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    40e6:	4c06      	ldr	r4, [pc, #24]	; (4100 <usart_read_callback+0x1c>)
    40e8:	2201      	movs	r2, #1
    40ea:	0021      	movs	r1, r4
    40ec:	4805      	ldr	r0, [pc, #20]	; (4104 <usart_read_callback+0x20>)
    40ee:	4b06      	ldr	r3, [pc, #24]	; (4108 <usart_read_callback+0x24>)
    40f0:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    40f2:	7821      	ldrb	r1, [r4, #0]
    40f4:	4b05      	ldr	r3, [pc, #20]	; (410c <usart_read_callback+0x28>)
    40f6:	6818      	ldr	r0, [r3, #0]
    40f8:	4b05      	ldr	r3, [pc, #20]	; (4110 <usart_read_callback+0x2c>)
    40fa:	4798      	blx	r3
}
    40fc:	bd10      	pop	{r4, pc}
    40fe:	46c0      	nop			; (mov r8, r8)
    4100:	20000b48 	.word	0x20000b48
    4104:	20000388 	.word	0x20000388
    4108:	0000277d 	.word	0x0000277d
    410c:	2000035c 	.word	0x2000035c
    4110:	00000141 	.word	0x00000141

00004114 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4114:	b570      	push	{r4, r5, r6, lr}
    4116:	b082      	sub	sp, #8
    4118:	0005      	movs	r5, r0
    411a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    411c:	2200      	movs	r2, #0
    411e:	466b      	mov	r3, sp
    4120:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4122:	4c06      	ldr	r4, [pc, #24]	; (413c <usart_serial_getchar+0x28>)
    4124:	466b      	mov	r3, sp
    4126:	1d99      	adds	r1, r3, #6
    4128:	0028      	movs	r0, r5
    412a:	47a0      	blx	r4
    412c:	2800      	cmp	r0, #0
    412e:	d1f9      	bne.n	4124 <usart_serial_getchar+0x10>

	*c = temp;
    4130:	466b      	mov	r3, sp
    4132:	3306      	adds	r3, #6
    4134:	881b      	ldrh	r3, [r3, #0]
    4136:	7033      	strb	r3, [r6, #0]
}
    4138:	b002      	add	sp, #8
    413a:	bd70      	pop	{r4, r5, r6, pc}
    413c:	000026ab 	.word	0x000026ab

00004140 <usart_serial_putchar>:
{
    4140:	b570      	push	{r4, r5, r6, lr}
    4142:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    4144:	b28c      	uxth	r4, r1
    4146:	4e03      	ldr	r6, [pc, #12]	; (4154 <usart_serial_putchar+0x14>)
    4148:	0021      	movs	r1, r4
    414a:	0028      	movs	r0, r5
    414c:	47b0      	blx	r6
    414e:	2800      	cmp	r0, #0
    4150:	d1fa      	bne.n	4148 <usart_serial_putchar+0x8>
}
    4152:	bd70      	pop	{r4, r5, r6, pc}
    4154:	00002685 	.word	0x00002685

00004158 <SysTick_Handler>:
	ul_tickcount++;
    4158:	4a02      	ldr	r2, [pc, #8]	; (4164 <SysTick_Handler+0xc>)
    415a:	8813      	ldrh	r3, [r2, #0]
    415c:	3301      	adds	r3, #1
    415e:	8013      	strh	r3, [r2, #0]
}
    4160:	4770      	bx	lr
    4162:	46c0      	nop			; (mov r8, r8)
    4164:	200002c0 	.word	0x200002c0

00004168 <conf_systick>:
{
    4168:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    416a:	4b0e      	ldr	r3, [pc, #56]	; (41a4 <conf_systick+0x3c>)
    416c:	6818      	ldr	r0, [r3, #0]
    416e:	21fa      	movs	r1, #250	; 0xfa
    4170:	0089      	lsls	r1, r1, #2
    4172:	4b0d      	ldr	r3, [pc, #52]	; (41a8 <conf_systick+0x40>)
    4174:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    4176:	3801      	subs	r0, #1
    4178:	4b0c      	ldr	r3, [pc, #48]	; (41ac <conf_systick+0x44>)
    417a:	4298      	cmp	r0, r3
    417c:	d80d      	bhi.n	419a <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    417e:	4a0c      	ldr	r2, [pc, #48]	; (41b0 <conf_systick+0x48>)
    4180:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4182:	480c      	ldr	r0, [pc, #48]	; (41b4 <conf_systick+0x4c>)
    4184:	6a03      	ldr	r3, [r0, #32]
    4186:	021b      	lsls	r3, r3, #8
    4188:	0a1b      	lsrs	r3, r3, #8
    418a:	21c0      	movs	r1, #192	; 0xc0
    418c:	0609      	lsls	r1, r1, #24
    418e:	430b      	orrs	r3, r1
    4190:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    4192:	2300      	movs	r3, #0
    4194:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    4196:	3307      	adds	r3, #7
    4198:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    419a:	2280      	movs	r2, #128	; 0x80
    419c:	0612      	lsls	r2, r2, #24
    419e:	4b06      	ldr	r3, [pc, #24]	; (41b8 <conf_systick+0x50>)
    41a0:	601a      	str	r2, [r3, #0]
}
    41a2:	bd10      	pop	{r4, pc}
    41a4:	20000020 	.word	0x20000020
    41a8:	00004531 	.word	0x00004531
    41ac:	00ffffff 	.word	0x00ffffff
    41b0:	e000e010 	.word	0xe000e010
    41b4:	e000ed00 	.word	0xe000ed00
    41b8:	e000e100 	.word	0xe000e100

000041bc <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    41bc:	b570      	push	{r4, r5, r6, lr}
    41be:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    41c0:	2380      	movs	r3, #128	; 0x80
    41c2:	05db      	lsls	r3, r3, #23
    41c4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    41c6:	2300      	movs	r3, #0
    41c8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    41ca:	22ff      	movs	r2, #255	; 0xff
    41cc:	4669      	mov	r1, sp
    41ce:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    41d0:	2200      	movs	r2, #0
    41d2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    41d4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    41d6:	2196      	movs	r1, #150	; 0x96
    41d8:	0189      	lsls	r1, r1, #6
    41da:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    41dc:	2101      	movs	r1, #1
    41de:	2024      	movs	r0, #36	; 0x24
    41e0:	466c      	mov	r4, sp
    41e2:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    41e4:	3001      	adds	r0, #1
    41e6:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    41e8:	3125      	adds	r1, #37	; 0x25
    41ea:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    41ec:	3101      	adds	r1, #1
    41ee:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    41f0:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    41f2:	3105      	adds	r1, #5
    41f4:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    41f6:	3101      	adds	r1, #1
    41f8:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    41fa:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    41fc:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    41fe:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    4200:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    4202:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    4204:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    4206:	2313      	movs	r3, #19
    4208:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    420a:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    420c:	2380      	movs	r3, #128	; 0x80
    420e:	035b      	lsls	r3, r3, #13
    4210:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    4212:	4b1e      	ldr	r3, [pc, #120]	; (428c <configure_usart+0xd0>)
    4214:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    4216:	4b1e      	ldr	r3, [pc, #120]	; (4290 <configure_usart+0xd4>)
    4218:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    421a:	2301      	movs	r3, #1
    421c:	425b      	negs	r3, r3
    421e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    4220:	930f      	str	r3, [sp, #60]	; 0x3c
	
	
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    4222:	4d1c      	ldr	r5, [pc, #112]	; (4294 <configure_usart+0xd8>)
    4224:	4c1c      	ldr	r4, [pc, #112]	; (4298 <configure_usart+0xdc>)
    4226:	466a      	mov	r2, sp
    4228:	491c      	ldr	r1, [pc, #112]	; (429c <configure_usart+0xe0>)
    422a:	0028      	movs	r0, r5
    422c:	47a0      	blx	r4
    422e:	2800      	cmp	r0, #0
    4230:	d1f9      	bne.n	4226 <configure_usart+0x6a>
	stdio_base = (void *)module;
    4232:	4c18      	ldr	r4, [pc, #96]	; (4294 <configure_usart+0xd8>)
    4234:	4b1a      	ldr	r3, [pc, #104]	; (42a0 <configure_usart+0xe4>)
    4236:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4238:	4a1a      	ldr	r2, [pc, #104]	; (42a4 <configure_usart+0xe8>)
    423a:	4b1b      	ldr	r3, [pc, #108]	; (42a8 <configure_usart+0xec>)
    423c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    423e:	4a1b      	ldr	r2, [pc, #108]	; (42ac <configure_usart+0xf0>)
    4240:	4b1b      	ldr	r3, [pc, #108]	; (42b0 <configure_usart+0xf4>)
    4242:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4244:	466a      	mov	r2, sp
    4246:	4915      	ldr	r1, [pc, #84]	; (429c <configure_usart+0xe0>)
    4248:	0020      	movs	r0, r4
    424a:	4b13      	ldr	r3, [pc, #76]	; (4298 <configure_usart+0xdc>)
    424c:	4798      	blx	r3
	setbuf(stdout, NULL);
    424e:	4e19      	ldr	r6, [pc, #100]	; (42b4 <configure_usart+0xf8>)
    4250:	6833      	ldr	r3, [r6, #0]
    4252:	6898      	ldr	r0, [r3, #8]
    4254:	2100      	movs	r1, #0
    4256:	4d18      	ldr	r5, [pc, #96]	; (42b8 <configure_usart+0xfc>)
    4258:	47a8      	blx	r5
	setbuf(stdin, NULL);
    425a:	6833      	ldr	r3, [r6, #0]
    425c:	6858      	ldr	r0, [r3, #4]
    425e:	2100      	movs	r1, #0
    4260:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    4262:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4264:	0028      	movs	r0, r5
    4266:	4b15      	ldr	r3, [pc, #84]	; (42bc <configure_usart+0x100>)
    4268:	4798      	blx	r3
    426a:	231f      	movs	r3, #31
    426c:	4018      	ands	r0, r3
    426e:	3b1e      	subs	r3, #30
    4270:	4083      	lsls	r3, r0
    4272:	4a13      	ldr	r2, [pc, #76]	; (42c0 <configure_usart+0x104>)
    4274:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4276:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    4278:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    427a:	2b00      	cmp	r3, #0
    427c:	d1fc      	bne.n	4278 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    427e:	682b      	ldr	r3, [r5, #0]
    4280:	2202      	movs	r2, #2
    4282:	4313      	orrs	r3, r2
    4284:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    4286:	b010      	add	sp, #64	; 0x40
    4288:	bd70      	pop	{r4, r5, r6, pc}
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	00080003 	.word	0x00080003
    4290:	00090003 	.word	0x00090003
    4294:	20000388 	.word	0x20000388
    4298:	00002349 	.word	0x00002349
    429c:	42001000 	.word	0x42001000
    42a0:	20000384 	.word	0x20000384
    42a4:	00004141 	.word	0x00004141
    42a8:	20000380 	.word	0x20000380
    42ac:	00004115 	.word	0x00004115
    42b0:	2000037c 	.word	0x2000037c
    42b4:	20000174 	.word	0x20000174
    42b8:	00004bcd 	.word	0x00004bcd
    42bc:	000022b9 	.word	0x000022b9
    42c0:	e000e100 	.word	0xe000e100

000042c4 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    42c4:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    42c6:	4c06      	ldr	r4, [pc, #24]	; (42e0 <configure_usart_callbacks+0x1c>)
    42c8:	2201      	movs	r2, #1
    42ca:	4906      	ldr	r1, [pc, #24]	; (42e4 <configure_usart_callbacks+0x20>)
    42cc:	0020      	movs	r0, r4
    42ce:	4b06      	ldr	r3, [pc, #24]	; (42e8 <configure_usart_callbacks+0x24>)
    42d0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    42d2:	2231      	movs	r2, #49	; 0x31
    42d4:	5ca3      	ldrb	r3, [r4, r2]
    42d6:	2102      	movs	r1, #2
    42d8:	430b      	orrs	r3, r1
    42da:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    42dc:	bd10      	pop	{r4, pc}
    42de:	46c0      	nop			; (mov r8, r8)
    42e0:	20000388 	.word	0x20000388
    42e4:	000040e5 	.word	0x000040e5
    42e8:	00002765 	.word	0x00002765

000042ec <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    42ec:	b510      	push	{r4, lr}
    42ee:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    42f0:	4668      	mov	r0, sp
    42f2:	4b16      	ldr	r3, [pc, #88]	; (434c <configure_adc+0x60>)
    42f4:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    42f6:	2301      	movs	r3, #1
    42f8:	466a      	mov	r2, sp
    42fa:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    42fc:	2380      	movs	r3, #128	; 0x80
    42fe:	009b      	lsls	r3, r3, #2
    4300:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    4302:	2300      	movs	r3, #0
    4304:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    4306:	3318      	adds	r3, #24
    4308:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    430a:	23c0      	movs	r3, #192	; 0xc0
    430c:	015b      	lsls	r3, r3, #5
    430e:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    4310:	4c0f      	ldr	r4, [pc, #60]	; (4350 <configure_adc+0x64>)
    4312:	4910      	ldr	r1, [pc, #64]	; (4354 <configure_adc+0x68>)
    4314:	0020      	movs	r0, r4
    4316:	4b10      	ldr	r3, [pc, #64]	; (4358 <configure_adc+0x6c>)
    4318:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    431a:	6822      	ldr	r2, [r4, #0]
    431c:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    431e:	b25b      	sxtb	r3, r3
    4320:	2b00      	cmp	r3, #0
    4322:	dbfb      	blt.n	431c <configure_adc+0x30>
    4324:	2180      	movs	r1, #128	; 0x80
    4326:	0409      	lsls	r1, r1, #16
    4328:	4b0c      	ldr	r3, [pc, #48]	; (435c <configure_adc+0x70>)
    432a:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    432c:	230f      	movs	r3, #15
    432e:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4330:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4332:	7813      	ldrb	r3, [r2, #0]
    4334:	2102      	movs	r1, #2
    4336:	430b      	orrs	r3, r1
    4338:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    433a:	4b05      	ldr	r3, [pc, #20]	; (4350 <configure_adc+0x64>)
    433c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    433e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4340:	b25b      	sxtb	r3, r3
    4342:	2b00      	cmp	r3, #0
    4344:	dbfb      	blt.n	433e <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    4346:	b00c      	add	sp, #48	; 0x30
    4348:	bd10      	pop	{r4, pc}
    434a:	46c0      	nop			; (mov r8, r8)
    434c:	000019b1 	.word	0x000019b1
    4350:	20000b4c 	.word	0x20000b4c
    4354:	42004000 	.word	0x42004000
    4358:	000019f5 	.word	0x000019f5
    435c:	e000e100 	.word	0xe000e100

00004360 <setupBoard>:


void setupBoard(void)
{
    4360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    4362:	2000      	movs	r0, #0
    4364:	4b31      	ldr	r3, [pc, #196]	; (442c <setupBoard+0xcc>)
    4366:	4798      	blx	r3
    4368:	b287      	uxth	r7, r0
	

	system_init();
    436a:	4b31      	ldr	r3, [pc, #196]	; (4430 <setupBoard+0xd0>)
    436c:	4798      	blx	r3
	
	configure_adc();
    436e:	4b31      	ldr	r3, [pc, #196]	; (4434 <setupBoard+0xd4>)
    4370:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4372:	4b31      	ldr	r3, [pc, #196]	; (4438 <setupBoard+0xd8>)
    4374:	6819      	ldr	r1, [r3, #0]
    4376:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4378:	b25b      	sxtb	r3, r3
    437a:	2b00      	cmp	r3, #0
    437c:	dbfb      	blt.n	4376 <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    437e:	7b0b      	ldrb	r3, [r1, #12]
    4380:	2202      	movs	r2, #2
    4382:	4313      	orrs	r3, r2
    4384:	730b      	strb	r3, [r1, #12]
    4386:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4388:	b25b      	sxtb	r3, r3
    438a:	2b00      	cmp	r3, #0
    438c:	dbfb      	blt.n	4386 <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    438e:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    4390:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    4392:	2502      	movs	r5, #2
    4394:	e001      	b.n	439a <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4396:	4214      	tst	r4, r2
    4398:	d10a      	bne.n	43b0 <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    439a:	7e0b      	ldrb	r3, [r1, #24]
    439c:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    439e:	0022      	movs	r2, r4
    43a0:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    43a2:	421e      	tst	r6, r3
    43a4:	d000      	beq.n	43a8 <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    43a6:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    43a8:	421d      	tst	r5, r3
    43aa:	d0f4      	beq.n	4396 <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    43ac:	4332      	orrs	r2, r6
    43ae:	e7f2      	b.n	4396 <setupBoard+0x36>
    43b0:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    43b2:	b25b      	sxtb	r3, r3
    43b4:	2b00      	cmp	r3, #0
    43b6:	dbfb      	blt.n	43b0 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    43b8:	8b48      	ldrh	r0, [r1, #26]
    43ba:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    43bc:	2301      	movs	r3, #1
    43be:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    43c0:	7e0a      	ldrb	r2, [r1, #24]
    43c2:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    43c4:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    43c6:	0754      	lsls	r4, r2, #29
    43c8:	d501      	bpl.n	43ce <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    43ca:	2402      	movs	r4, #2
    43cc:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    43ce:	0792      	lsls	r2, r2, #30
    43d0:	d501      	bpl.n	43d6 <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    43d2:	2204      	movs	r2, #4
    43d4:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    43d6:	075b      	lsls	r3, r3, #29
    43d8:	d501      	bpl.n	43de <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    43da:	2302      	movs	r3, #2
    43dc:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    43de:	4078      	eors	r0, r7
    43e0:	4b16      	ldr	r3, [pc, #88]	; (443c <setupBoard+0xdc>)
    43e2:	4798      	blx	r3
	
	delay_init();
    43e4:	4b16      	ldr	r3, [pc, #88]	; (4440 <setupBoard+0xe0>)
    43e6:	4798      	blx	r3
	
	conf_systick();
    43e8:	4c16      	ldr	r4, [pc, #88]	; (4444 <setupBoard+0xe4>)
    43ea:	47a0      	blx	r4

	//configure_usart_USB();
	
	configure_usart();
    43ec:	4b16      	ldr	r3, [pc, #88]	; (4448 <setupBoard+0xe8>)
    43ee:	4798      	blx	r3
	configure_usart_callbacks();
    43f0:	4b16      	ldr	r3, [pc, #88]	; (444c <setupBoard+0xec>)
    43f2:	4798      	blx	r3
	cpu_irq_enable();
    43f4:	2201      	movs	r2, #1
    43f6:	4b16      	ldr	r3, [pc, #88]	; (4450 <setupBoard+0xf0>)
    43f8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    43fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    43fe:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    4400:	4914      	ldr	r1, [pc, #80]	; (4454 <setupBoard+0xf4>)
    4402:	4815      	ldr	r0, [pc, #84]	; (4458 <setupBoard+0xf8>)
    4404:	4b15      	ldr	r3, [pc, #84]	; (445c <setupBoard+0xfc>)
    4406:	4798      	blx	r3
	


	printf("\n\rSerial OK 9600 8N1\n\r");
    4408:	4815      	ldr	r0, [pc, #84]	; (4460 <setupBoard+0x100>)
    440a:	4b16      	ldr	r3, [pc, #88]	; (4464 <setupBoard+0x104>)
    440c:	4798      	blx	r3

	
	InitLCD();
    440e:	4b16      	ldr	r3, [pc, #88]	; (4468 <setupBoard+0x108>)
    4410:	4798      	blx	r3
	splashScreen();
    4412:	4b16      	ldr	r3, [pc, #88]	; (446c <setupBoard+0x10c>)
    4414:	4798      	blx	r3
			
	conf_systick();
    4416:	47a0      	blx	r4

	xCharPos=0;
    4418:	2300      	movs	r3, #0
    441a:	4a15      	ldr	r2, [pc, #84]	; (4470 <setupBoard+0x110>)
    441c:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    441e:	4a15      	ldr	r2, [pc, #84]	; (4474 <setupBoard+0x114>)
    4420:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    4422:	20ff      	movs	r0, #255	; 0xff
    4424:	4b14      	ldr	r3, [pc, #80]	; (4478 <setupBoard+0x118>)
    4426:	4798      	blx	r3
}
    4428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    442a:	46c0      	nop			; (mov r8, r8)
    442c:	00002e5d 	.word	0x00002e5d
    4430:	000030a1 	.word	0x000030a1
    4434:	000042ed 	.word	0x000042ed
    4438:	20000b4c 	.word	0x20000b4c
    443c:	00004ad5 	.word	0x00004ad5
    4440:	0000189d 	.word	0x0000189d
    4444:	00004169 	.word	0x00004169
    4448:	000041bd 	.word	0x000041bd
    444c:	000042c5 	.word	0x000042c5
    4450:	2000001c 	.word	0x2000001c
    4454:	20000b48 	.word	0x20000b48
    4458:	20000388 	.word	0x20000388
    445c:	0000277d 	.word	0x0000277d
    4460:	00007e98 	.word	0x00007e98
    4464:	00004a79 	.word	0x00004a79
    4468:	00003e99 	.word	0x00003e99
    446c:	00001665 	.word	0x00001665
    4470:	200002b8 	.word	0x200002b8
    4474:	200002ba 	.word	0x200002ba
    4478:	00003285 	.word	0x00003285

0000447c <main>:
{
    447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    447e:	4b20      	ldr	r3, [pc, #128]	; (4500 <main+0x84>)
    4480:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    4482:	200a      	movs	r0, #10
    4484:	4b1f      	ldr	r3, [pc, #124]	; (4504 <main+0x88>)
    4486:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    4488:	210a      	movs	r1, #10
    448a:	4b1f      	ldr	r3, [pc, #124]	; (4508 <main+0x8c>)
    448c:	4798      	blx	r3
    448e:	4b1f      	ldr	r3, [pc, #124]	; (450c <main+0x90>)
    4490:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    4492:	4f1f      	ldr	r7, [pc, #124]	; (4510 <main+0x94>)
    4494:	4e1f      	ldr	r6, [pc, #124]	; (4514 <main+0x98>)
    4496:	4d20      	ldr	r5, [pc, #128]	; (4518 <main+0x9c>)
    4498:	e015      	b.n	44c6 <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    449a:	21c8      	movs	r1, #200	; 0xc8
    449c:	0020      	movs	r0, r4
    449e:	4b1d      	ldr	r3, [pc, #116]	; (4514 <main+0x98>)
    44a0:	4798      	blx	r3
    44a2:	b289      	uxth	r1, r1
    44a4:	2900      	cmp	r1, #0
    44a6:	d10e      	bne.n	44c6 <main+0x4a>
    44a8:	4b1c      	ldr	r3, [pc, #112]	; (451c <main+0xa0>)
    44aa:	781b      	ldrb	r3, [r3, #0]
    44ac:	2b00      	cmp	r3, #0
    44ae:	d10a      	bne.n	44c6 <main+0x4a>
			funcLock = true;
    44b0:	4c1a      	ldr	r4, [pc, #104]	; (451c <main+0xa0>)
    44b2:	2301      	movs	r3, #1
    44b4:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    44b6:	4b1a      	ldr	r3, [pc, #104]	; (4520 <main+0xa4>)
    44b8:	4798      	blx	r3
			printKeyboardBuffer();
    44ba:	4b1a      	ldr	r3, [pc, #104]	; (4524 <main+0xa8>)
    44bc:	4798      	blx	r3
			parseRXBuffer();
    44be:	4b1a      	ldr	r3, [pc, #104]	; (4528 <main+0xac>)
    44c0:	4798      	blx	r3
			funcLock = false;
    44c2:	2300      	movs	r3, #0
    44c4:	7023      	strb	r3, [r4, #0]
		__WFI();
    44c6:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    44c8:	883c      	ldrh	r4, [r7, #0]
    44ca:	0029      	movs	r1, r5
    44cc:	0020      	movs	r0, r4
    44ce:	47b0      	blx	r6
    44d0:	b289      	uxth	r1, r1
    44d2:	2900      	cmp	r1, #0
    44d4:	d1e1      	bne.n	449a <main+0x1e>
    44d6:	4b11      	ldr	r3, [pc, #68]	; (451c <main+0xa0>)
    44d8:	781b      	ldrb	r3, [r3, #0]
    44da:	2b00      	cmp	r3, #0
    44dc:	d1f3      	bne.n	44c6 <main+0x4a>
			funcLock = true;
    44de:	4c0f      	ldr	r4, [pc, #60]	; (451c <main+0xa0>)
    44e0:	3301      	adds	r3, #1
    44e2:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    44e4:	4b11      	ldr	r3, [pc, #68]	; (452c <main+0xb0>)
    44e6:	4798      	blx	r3
			funcLock = false;
    44e8:	2300      	movs	r3, #0
    44ea:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    44ec:	4b08      	ldr	r3, [pc, #32]	; (4510 <main+0x94>)
    44ee:	8818      	ldrh	r0, [r3, #0]
    44f0:	21c8      	movs	r1, #200	; 0xc8
    44f2:	4b08      	ldr	r3, [pc, #32]	; (4514 <main+0x98>)
    44f4:	4798      	blx	r3
    44f6:	b289      	uxth	r1, r1
    44f8:	2900      	cmp	r1, #0
    44fa:	d0d9      	beq.n	44b0 <main+0x34>
    44fc:	e7e3      	b.n	44c6 <main+0x4a>
    44fe:	46c0      	nop			; (mov r8, r8)
    4500:	00004361 	.word	0x00004361
    4504:	000048f1 	.word	0x000048f1
    4508:	00000115 	.word	0x00000115
    450c:	2000035c 	.word	0x2000035c
    4510:	200002c0 	.word	0x200002c0
    4514:	0000463d 	.word	0x0000463d
    4518:	00003fff 	.word	0x00003fff
    451c:	200002be 	.word	0x200002be
    4520:	000039e5 	.word	0x000039e5
    4524:	0000364d 	.word	0x0000364d
    4528:	00001849 	.word	0x00001849
    452c:	0000336d 	.word	0x0000336d

00004530 <__udivsi3>:
    4530:	2200      	movs	r2, #0
    4532:	0843      	lsrs	r3, r0, #1
    4534:	428b      	cmp	r3, r1
    4536:	d374      	bcc.n	4622 <__udivsi3+0xf2>
    4538:	0903      	lsrs	r3, r0, #4
    453a:	428b      	cmp	r3, r1
    453c:	d35f      	bcc.n	45fe <__udivsi3+0xce>
    453e:	0a03      	lsrs	r3, r0, #8
    4540:	428b      	cmp	r3, r1
    4542:	d344      	bcc.n	45ce <__udivsi3+0x9e>
    4544:	0b03      	lsrs	r3, r0, #12
    4546:	428b      	cmp	r3, r1
    4548:	d328      	bcc.n	459c <__udivsi3+0x6c>
    454a:	0c03      	lsrs	r3, r0, #16
    454c:	428b      	cmp	r3, r1
    454e:	d30d      	bcc.n	456c <__udivsi3+0x3c>
    4550:	22ff      	movs	r2, #255	; 0xff
    4552:	0209      	lsls	r1, r1, #8
    4554:	ba12      	rev	r2, r2
    4556:	0c03      	lsrs	r3, r0, #16
    4558:	428b      	cmp	r3, r1
    455a:	d302      	bcc.n	4562 <__udivsi3+0x32>
    455c:	1212      	asrs	r2, r2, #8
    455e:	0209      	lsls	r1, r1, #8
    4560:	d065      	beq.n	462e <__udivsi3+0xfe>
    4562:	0b03      	lsrs	r3, r0, #12
    4564:	428b      	cmp	r3, r1
    4566:	d319      	bcc.n	459c <__udivsi3+0x6c>
    4568:	e000      	b.n	456c <__udivsi3+0x3c>
    456a:	0a09      	lsrs	r1, r1, #8
    456c:	0bc3      	lsrs	r3, r0, #15
    456e:	428b      	cmp	r3, r1
    4570:	d301      	bcc.n	4576 <__udivsi3+0x46>
    4572:	03cb      	lsls	r3, r1, #15
    4574:	1ac0      	subs	r0, r0, r3
    4576:	4152      	adcs	r2, r2
    4578:	0b83      	lsrs	r3, r0, #14
    457a:	428b      	cmp	r3, r1
    457c:	d301      	bcc.n	4582 <__udivsi3+0x52>
    457e:	038b      	lsls	r3, r1, #14
    4580:	1ac0      	subs	r0, r0, r3
    4582:	4152      	adcs	r2, r2
    4584:	0b43      	lsrs	r3, r0, #13
    4586:	428b      	cmp	r3, r1
    4588:	d301      	bcc.n	458e <__udivsi3+0x5e>
    458a:	034b      	lsls	r3, r1, #13
    458c:	1ac0      	subs	r0, r0, r3
    458e:	4152      	adcs	r2, r2
    4590:	0b03      	lsrs	r3, r0, #12
    4592:	428b      	cmp	r3, r1
    4594:	d301      	bcc.n	459a <__udivsi3+0x6a>
    4596:	030b      	lsls	r3, r1, #12
    4598:	1ac0      	subs	r0, r0, r3
    459a:	4152      	adcs	r2, r2
    459c:	0ac3      	lsrs	r3, r0, #11
    459e:	428b      	cmp	r3, r1
    45a0:	d301      	bcc.n	45a6 <__udivsi3+0x76>
    45a2:	02cb      	lsls	r3, r1, #11
    45a4:	1ac0      	subs	r0, r0, r3
    45a6:	4152      	adcs	r2, r2
    45a8:	0a83      	lsrs	r3, r0, #10
    45aa:	428b      	cmp	r3, r1
    45ac:	d301      	bcc.n	45b2 <__udivsi3+0x82>
    45ae:	028b      	lsls	r3, r1, #10
    45b0:	1ac0      	subs	r0, r0, r3
    45b2:	4152      	adcs	r2, r2
    45b4:	0a43      	lsrs	r3, r0, #9
    45b6:	428b      	cmp	r3, r1
    45b8:	d301      	bcc.n	45be <__udivsi3+0x8e>
    45ba:	024b      	lsls	r3, r1, #9
    45bc:	1ac0      	subs	r0, r0, r3
    45be:	4152      	adcs	r2, r2
    45c0:	0a03      	lsrs	r3, r0, #8
    45c2:	428b      	cmp	r3, r1
    45c4:	d301      	bcc.n	45ca <__udivsi3+0x9a>
    45c6:	020b      	lsls	r3, r1, #8
    45c8:	1ac0      	subs	r0, r0, r3
    45ca:	4152      	adcs	r2, r2
    45cc:	d2cd      	bcs.n	456a <__udivsi3+0x3a>
    45ce:	09c3      	lsrs	r3, r0, #7
    45d0:	428b      	cmp	r3, r1
    45d2:	d301      	bcc.n	45d8 <__udivsi3+0xa8>
    45d4:	01cb      	lsls	r3, r1, #7
    45d6:	1ac0      	subs	r0, r0, r3
    45d8:	4152      	adcs	r2, r2
    45da:	0983      	lsrs	r3, r0, #6
    45dc:	428b      	cmp	r3, r1
    45de:	d301      	bcc.n	45e4 <__udivsi3+0xb4>
    45e0:	018b      	lsls	r3, r1, #6
    45e2:	1ac0      	subs	r0, r0, r3
    45e4:	4152      	adcs	r2, r2
    45e6:	0943      	lsrs	r3, r0, #5
    45e8:	428b      	cmp	r3, r1
    45ea:	d301      	bcc.n	45f0 <__udivsi3+0xc0>
    45ec:	014b      	lsls	r3, r1, #5
    45ee:	1ac0      	subs	r0, r0, r3
    45f0:	4152      	adcs	r2, r2
    45f2:	0903      	lsrs	r3, r0, #4
    45f4:	428b      	cmp	r3, r1
    45f6:	d301      	bcc.n	45fc <__udivsi3+0xcc>
    45f8:	010b      	lsls	r3, r1, #4
    45fa:	1ac0      	subs	r0, r0, r3
    45fc:	4152      	adcs	r2, r2
    45fe:	08c3      	lsrs	r3, r0, #3
    4600:	428b      	cmp	r3, r1
    4602:	d301      	bcc.n	4608 <__udivsi3+0xd8>
    4604:	00cb      	lsls	r3, r1, #3
    4606:	1ac0      	subs	r0, r0, r3
    4608:	4152      	adcs	r2, r2
    460a:	0883      	lsrs	r3, r0, #2
    460c:	428b      	cmp	r3, r1
    460e:	d301      	bcc.n	4614 <__udivsi3+0xe4>
    4610:	008b      	lsls	r3, r1, #2
    4612:	1ac0      	subs	r0, r0, r3
    4614:	4152      	adcs	r2, r2
    4616:	0843      	lsrs	r3, r0, #1
    4618:	428b      	cmp	r3, r1
    461a:	d301      	bcc.n	4620 <__udivsi3+0xf0>
    461c:	004b      	lsls	r3, r1, #1
    461e:	1ac0      	subs	r0, r0, r3
    4620:	4152      	adcs	r2, r2
    4622:	1a41      	subs	r1, r0, r1
    4624:	d200      	bcs.n	4628 <__udivsi3+0xf8>
    4626:	4601      	mov	r1, r0
    4628:	4152      	adcs	r2, r2
    462a:	4610      	mov	r0, r2
    462c:	4770      	bx	lr
    462e:	e7ff      	b.n	4630 <__udivsi3+0x100>
    4630:	b501      	push	{r0, lr}
    4632:	2000      	movs	r0, #0
    4634:	f000 f8f0 	bl	4818 <__aeabi_idiv0>
    4638:	bd02      	pop	{r1, pc}
    463a:	46c0      	nop			; (mov r8, r8)

0000463c <__aeabi_uidivmod>:
    463c:	2900      	cmp	r1, #0
    463e:	d0f7      	beq.n	4630 <__udivsi3+0x100>
    4640:	e776      	b.n	4530 <__udivsi3>
    4642:	4770      	bx	lr

00004644 <__divsi3>:
    4644:	4603      	mov	r3, r0
    4646:	430b      	orrs	r3, r1
    4648:	d47f      	bmi.n	474a <__divsi3+0x106>
    464a:	2200      	movs	r2, #0
    464c:	0843      	lsrs	r3, r0, #1
    464e:	428b      	cmp	r3, r1
    4650:	d374      	bcc.n	473c <__divsi3+0xf8>
    4652:	0903      	lsrs	r3, r0, #4
    4654:	428b      	cmp	r3, r1
    4656:	d35f      	bcc.n	4718 <__divsi3+0xd4>
    4658:	0a03      	lsrs	r3, r0, #8
    465a:	428b      	cmp	r3, r1
    465c:	d344      	bcc.n	46e8 <__divsi3+0xa4>
    465e:	0b03      	lsrs	r3, r0, #12
    4660:	428b      	cmp	r3, r1
    4662:	d328      	bcc.n	46b6 <__divsi3+0x72>
    4664:	0c03      	lsrs	r3, r0, #16
    4666:	428b      	cmp	r3, r1
    4668:	d30d      	bcc.n	4686 <__divsi3+0x42>
    466a:	22ff      	movs	r2, #255	; 0xff
    466c:	0209      	lsls	r1, r1, #8
    466e:	ba12      	rev	r2, r2
    4670:	0c03      	lsrs	r3, r0, #16
    4672:	428b      	cmp	r3, r1
    4674:	d302      	bcc.n	467c <__divsi3+0x38>
    4676:	1212      	asrs	r2, r2, #8
    4678:	0209      	lsls	r1, r1, #8
    467a:	d065      	beq.n	4748 <__divsi3+0x104>
    467c:	0b03      	lsrs	r3, r0, #12
    467e:	428b      	cmp	r3, r1
    4680:	d319      	bcc.n	46b6 <__divsi3+0x72>
    4682:	e000      	b.n	4686 <__divsi3+0x42>
    4684:	0a09      	lsrs	r1, r1, #8
    4686:	0bc3      	lsrs	r3, r0, #15
    4688:	428b      	cmp	r3, r1
    468a:	d301      	bcc.n	4690 <__divsi3+0x4c>
    468c:	03cb      	lsls	r3, r1, #15
    468e:	1ac0      	subs	r0, r0, r3
    4690:	4152      	adcs	r2, r2
    4692:	0b83      	lsrs	r3, r0, #14
    4694:	428b      	cmp	r3, r1
    4696:	d301      	bcc.n	469c <__divsi3+0x58>
    4698:	038b      	lsls	r3, r1, #14
    469a:	1ac0      	subs	r0, r0, r3
    469c:	4152      	adcs	r2, r2
    469e:	0b43      	lsrs	r3, r0, #13
    46a0:	428b      	cmp	r3, r1
    46a2:	d301      	bcc.n	46a8 <__divsi3+0x64>
    46a4:	034b      	lsls	r3, r1, #13
    46a6:	1ac0      	subs	r0, r0, r3
    46a8:	4152      	adcs	r2, r2
    46aa:	0b03      	lsrs	r3, r0, #12
    46ac:	428b      	cmp	r3, r1
    46ae:	d301      	bcc.n	46b4 <__divsi3+0x70>
    46b0:	030b      	lsls	r3, r1, #12
    46b2:	1ac0      	subs	r0, r0, r3
    46b4:	4152      	adcs	r2, r2
    46b6:	0ac3      	lsrs	r3, r0, #11
    46b8:	428b      	cmp	r3, r1
    46ba:	d301      	bcc.n	46c0 <__divsi3+0x7c>
    46bc:	02cb      	lsls	r3, r1, #11
    46be:	1ac0      	subs	r0, r0, r3
    46c0:	4152      	adcs	r2, r2
    46c2:	0a83      	lsrs	r3, r0, #10
    46c4:	428b      	cmp	r3, r1
    46c6:	d301      	bcc.n	46cc <__divsi3+0x88>
    46c8:	028b      	lsls	r3, r1, #10
    46ca:	1ac0      	subs	r0, r0, r3
    46cc:	4152      	adcs	r2, r2
    46ce:	0a43      	lsrs	r3, r0, #9
    46d0:	428b      	cmp	r3, r1
    46d2:	d301      	bcc.n	46d8 <__divsi3+0x94>
    46d4:	024b      	lsls	r3, r1, #9
    46d6:	1ac0      	subs	r0, r0, r3
    46d8:	4152      	adcs	r2, r2
    46da:	0a03      	lsrs	r3, r0, #8
    46dc:	428b      	cmp	r3, r1
    46de:	d301      	bcc.n	46e4 <__divsi3+0xa0>
    46e0:	020b      	lsls	r3, r1, #8
    46e2:	1ac0      	subs	r0, r0, r3
    46e4:	4152      	adcs	r2, r2
    46e6:	d2cd      	bcs.n	4684 <__divsi3+0x40>
    46e8:	09c3      	lsrs	r3, r0, #7
    46ea:	428b      	cmp	r3, r1
    46ec:	d301      	bcc.n	46f2 <__divsi3+0xae>
    46ee:	01cb      	lsls	r3, r1, #7
    46f0:	1ac0      	subs	r0, r0, r3
    46f2:	4152      	adcs	r2, r2
    46f4:	0983      	lsrs	r3, r0, #6
    46f6:	428b      	cmp	r3, r1
    46f8:	d301      	bcc.n	46fe <__divsi3+0xba>
    46fa:	018b      	lsls	r3, r1, #6
    46fc:	1ac0      	subs	r0, r0, r3
    46fe:	4152      	adcs	r2, r2
    4700:	0943      	lsrs	r3, r0, #5
    4702:	428b      	cmp	r3, r1
    4704:	d301      	bcc.n	470a <__divsi3+0xc6>
    4706:	014b      	lsls	r3, r1, #5
    4708:	1ac0      	subs	r0, r0, r3
    470a:	4152      	adcs	r2, r2
    470c:	0903      	lsrs	r3, r0, #4
    470e:	428b      	cmp	r3, r1
    4710:	d301      	bcc.n	4716 <__divsi3+0xd2>
    4712:	010b      	lsls	r3, r1, #4
    4714:	1ac0      	subs	r0, r0, r3
    4716:	4152      	adcs	r2, r2
    4718:	08c3      	lsrs	r3, r0, #3
    471a:	428b      	cmp	r3, r1
    471c:	d301      	bcc.n	4722 <__divsi3+0xde>
    471e:	00cb      	lsls	r3, r1, #3
    4720:	1ac0      	subs	r0, r0, r3
    4722:	4152      	adcs	r2, r2
    4724:	0883      	lsrs	r3, r0, #2
    4726:	428b      	cmp	r3, r1
    4728:	d301      	bcc.n	472e <__divsi3+0xea>
    472a:	008b      	lsls	r3, r1, #2
    472c:	1ac0      	subs	r0, r0, r3
    472e:	4152      	adcs	r2, r2
    4730:	0843      	lsrs	r3, r0, #1
    4732:	428b      	cmp	r3, r1
    4734:	d301      	bcc.n	473a <__divsi3+0xf6>
    4736:	004b      	lsls	r3, r1, #1
    4738:	1ac0      	subs	r0, r0, r3
    473a:	4152      	adcs	r2, r2
    473c:	1a41      	subs	r1, r0, r1
    473e:	d200      	bcs.n	4742 <__divsi3+0xfe>
    4740:	4601      	mov	r1, r0
    4742:	4152      	adcs	r2, r2
    4744:	4610      	mov	r0, r2
    4746:	4770      	bx	lr
    4748:	e05d      	b.n	4806 <__divsi3+0x1c2>
    474a:	0fca      	lsrs	r2, r1, #31
    474c:	d000      	beq.n	4750 <__divsi3+0x10c>
    474e:	4249      	negs	r1, r1
    4750:	1003      	asrs	r3, r0, #32
    4752:	d300      	bcc.n	4756 <__divsi3+0x112>
    4754:	4240      	negs	r0, r0
    4756:	4053      	eors	r3, r2
    4758:	2200      	movs	r2, #0
    475a:	469c      	mov	ip, r3
    475c:	0903      	lsrs	r3, r0, #4
    475e:	428b      	cmp	r3, r1
    4760:	d32d      	bcc.n	47be <__divsi3+0x17a>
    4762:	0a03      	lsrs	r3, r0, #8
    4764:	428b      	cmp	r3, r1
    4766:	d312      	bcc.n	478e <__divsi3+0x14a>
    4768:	22fc      	movs	r2, #252	; 0xfc
    476a:	0189      	lsls	r1, r1, #6
    476c:	ba12      	rev	r2, r2
    476e:	0a03      	lsrs	r3, r0, #8
    4770:	428b      	cmp	r3, r1
    4772:	d30c      	bcc.n	478e <__divsi3+0x14a>
    4774:	0189      	lsls	r1, r1, #6
    4776:	1192      	asrs	r2, r2, #6
    4778:	428b      	cmp	r3, r1
    477a:	d308      	bcc.n	478e <__divsi3+0x14a>
    477c:	0189      	lsls	r1, r1, #6
    477e:	1192      	asrs	r2, r2, #6
    4780:	428b      	cmp	r3, r1
    4782:	d304      	bcc.n	478e <__divsi3+0x14a>
    4784:	0189      	lsls	r1, r1, #6
    4786:	d03a      	beq.n	47fe <__divsi3+0x1ba>
    4788:	1192      	asrs	r2, r2, #6
    478a:	e000      	b.n	478e <__divsi3+0x14a>
    478c:	0989      	lsrs	r1, r1, #6
    478e:	09c3      	lsrs	r3, r0, #7
    4790:	428b      	cmp	r3, r1
    4792:	d301      	bcc.n	4798 <__divsi3+0x154>
    4794:	01cb      	lsls	r3, r1, #7
    4796:	1ac0      	subs	r0, r0, r3
    4798:	4152      	adcs	r2, r2
    479a:	0983      	lsrs	r3, r0, #6
    479c:	428b      	cmp	r3, r1
    479e:	d301      	bcc.n	47a4 <__divsi3+0x160>
    47a0:	018b      	lsls	r3, r1, #6
    47a2:	1ac0      	subs	r0, r0, r3
    47a4:	4152      	adcs	r2, r2
    47a6:	0943      	lsrs	r3, r0, #5
    47a8:	428b      	cmp	r3, r1
    47aa:	d301      	bcc.n	47b0 <__divsi3+0x16c>
    47ac:	014b      	lsls	r3, r1, #5
    47ae:	1ac0      	subs	r0, r0, r3
    47b0:	4152      	adcs	r2, r2
    47b2:	0903      	lsrs	r3, r0, #4
    47b4:	428b      	cmp	r3, r1
    47b6:	d301      	bcc.n	47bc <__divsi3+0x178>
    47b8:	010b      	lsls	r3, r1, #4
    47ba:	1ac0      	subs	r0, r0, r3
    47bc:	4152      	adcs	r2, r2
    47be:	08c3      	lsrs	r3, r0, #3
    47c0:	428b      	cmp	r3, r1
    47c2:	d301      	bcc.n	47c8 <__divsi3+0x184>
    47c4:	00cb      	lsls	r3, r1, #3
    47c6:	1ac0      	subs	r0, r0, r3
    47c8:	4152      	adcs	r2, r2
    47ca:	0883      	lsrs	r3, r0, #2
    47cc:	428b      	cmp	r3, r1
    47ce:	d301      	bcc.n	47d4 <__divsi3+0x190>
    47d0:	008b      	lsls	r3, r1, #2
    47d2:	1ac0      	subs	r0, r0, r3
    47d4:	4152      	adcs	r2, r2
    47d6:	d2d9      	bcs.n	478c <__divsi3+0x148>
    47d8:	0843      	lsrs	r3, r0, #1
    47da:	428b      	cmp	r3, r1
    47dc:	d301      	bcc.n	47e2 <__divsi3+0x19e>
    47de:	004b      	lsls	r3, r1, #1
    47e0:	1ac0      	subs	r0, r0, r3
    47e2:	4152      	adcs	r2, r2
    47e4:	1a41      	subs	r1, r0, r1
    47e6:	d200      	bcs.n	47ea <__divsi3+0x1a6>
    47e8:	4601      	mov	r1, r0
    47ea:	4663      	mov	r3, ip
    47ec:	4152      	adcs	r2, r2
    47ee:	105b      	asrs	r3, r3, #1
    47f0:	4610      	mov	r0, r2
    47f2:	d301      	bcc.n	47f8 <__divsi3+0x1b4>
    47f4:	4240      	negs	r0, r0
    47f6:	2b00      	cmp	r3, #0
    47f8:	d500      	bpl.n	47fc <__divsi3+0x1b8>
    47fa:	4249      	negs	r1, r1
    47fc:	4770      	bx	lr
    47fe:	4663      	mov	r3, ip
    4800:	105b      	asrs	r3, r3, #1
    4802:	d300      	bcc.n	4806 <__divsi3+0x1c2>
    4804:	4240      	negs	r0, r0
    4806:	b501      	push	{r0, lr}
    4808:	2000      	movs	r0, #0
    480a:	f000 f805 	bl	4818 <__aeabi_idiv0>
    480e:	bd02      	pop	{r1, pc}

00004810 <__aeabi_idivmod>:
    4810:	2900      	cmp	r1, #0
    4812:	d0f8      	beq.n	4806 <__divsi3+0x1c2>
    4814:	e716      	b.n	4644 <__divsi3>
    4816:	4770      	bx	lr

00004818 <__aeabi_idiv0>:
    4818:	4770      	bx	lr
    481a:	46c0      	nop			; (mov r8, r8)

0000481c <__aeabi_lmul>:
    481c:	b5f0      	push	{r4, r5, r6, r7, lr}
    481e:	46ce      	mov	lr, r9
    4820:	4647      	mov	r7, r8
    4822:	0415      	lsls	r5, r2, #16
    4824:	0c2d      	lsrs	r5, r5, #16
    4826:	002e      	movs	r6, r5
    4828:	b580      	push	{r7, lr}
    482a:	0407      	lsls	r7, r0, #16
    482c:	0c14      	lsrs	r4, r2, #16
    482e:	0c3f      	lsrs	r7, r7, #16
    4830:	4699      	mov	r9, r3
    4832:	0c03      	lsrs	r3, r0, #16
    4834:	437e      	muls	r6, r7
    4836:	435d      	muls	r5, r3
    4838:	4367      	muls	r7, r4
    483a:	4363      	muls	r3, r4
    483c:	197f      	adds	r7, r7, r5
    483e:	0c34      	lsrs	r4, r6, #16
    4840:	19e4      	adds	r4, r4, r7
    4842:	469c      	mov	ip, r3
    4844:	42a5      	cmp	r5, r4
    4846:	d903      	bls.n	4850 <__aeabi_lmul+0x34>
    4848:	2380      	movs	r3, #128	; 0x80
    484a:	025b      	lsls	r3, r3, #9
    484c:	4698      	mov	r8, r3
    484e:	44c4      	add	ip, r8
    4850:	464b      	mov	r3, r9
    4852:	4351      	muls	r1, r2
    4854:	4343      	muls	r3, r0
    4856:	0436      	lsls	r6, r6, #16
    4858:	0c36      	lsrs	r6, r6, #16
    485a:	0c25      	lsrs	r5, r4, #16
    485c:	0424      	lsls	r4, r4, #16
    485e:	4465      	add	r5, ip
    4860:	19a4      	adds	r4, r4, r6
    4862:	1859      	adds	r1, r3, r1
    4864:	1949      	adds	r1, r1, r5
    4866:	0020      	movs	r0, r4
    4868:	bc0c      	pop	{r2, r3}
    486a:	4690      	mov	r8, r2
    486c:	4699      	mov	r9, r3
    486e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004870 <__libc_init_array>:
    4870:	b570      	push	{r4, r5, r6, lr}
    4872:	2600      	movs	r6, #0
    4874:	4d0c      	ldr	r5, [pc, #48]	; (48a8 <__libc_init_array+0x38>)
    4876:	4c0d      	ldr	r4, [pc, #52]	; (48ac <__libc_init_array+0x3c>)
    4878:	1b64      	subs	r4, r4, r5
    487a:	10a4      	asrs	r4, r4, #2
    487c:	42a6      	cmp	r6, r4
    487e:	d109      	bne.n	4894 <__libc_init_array+0x24>
    4880:	2600      	movs	r6, #0
    4882:	f003 fb75 	bl	7f70 <_init>
    4886:	4d0a      	ldr	r5, [pc, #40]	; (48b0 <__libc_init_array+0x40>)
    4888:	4c0a      	ldr	r4, [pc, #40]	; (48b4 <__libc_init_array+0x44>)
    488a:	1b64      	subs	r4, r4, r5
    488c:	10a4      	asrs	r4, r4, #2
    488e:	42a6      	cmp	r6, r4
    4890:	d105      	bne.n	489e <__libc_init_array+0x2e>
    4892:	bd70      	pop	{r4, r5, r6, pc}
    4894:	00b3      	lsls	r3, r6, #2
    4896:	58eb      	ldr	r3, [r5, r3]
    4898:	4798      	blx	r3
    489a:	3601      	adds	r6, #1
    489c:	e7ee      	b.n	487c <__libc_init_array+0xc>
    489e:	00b3      	lsls	r3, r6, #2
    48a0:	58eb      	ldr	r3, [r5, r3]
    48a2:	4798      	blx	r3
    48a4:	3601      	adds	r6, #1
    48a6:	e7f2      	b.n	488e <__libc_init_array+0x1e>
    48a8:	00007f7c 	.word	0x00007f7c
    48ac:	00007f7c 	.word	0x00007f7c
    48b0:	00007f7c 	.word	0x00007f7c
    48b4:	00007f80 	.word	0x00007f80

000048b8 <__itoa>:
    48b8:	1e93      	subs	r3, r2, #2
    48ba:	b510      	push	{r4, lr}
    48bc:	000c      	movs	r4, r1
    48be:	2b22      	cmp	r3, #34	; 0x22
    48c0:	d904      	bls.n	48cc <__itoa+0x14>
    48c2:	2300      	movs	r3, #0
    48c4:	001c      	movs	r4, r3
    48c6:	700b      	strb	r3, [r1, #0]
    48c8:	0020      	movs	r0, r4
    48ca:	bd10      	pop	{r4, pc}
    48cc:	2a0a      	cmp	r2, #10
    48ce:	d109      	bne.n	48e4 <__itoa+0x2c>
    48d0:	2800      	cmp	r0, #0
    48d2:	da07      	bge.n	48e4 <__itoa+0x2c>
    48d4:	232d      	movs	r3, #45	; 0x2d
    48d6:	700b      	strb	r3, [r1, #0]
    48d8:	2101      	movs	r1, #1
    48da:	4240      	negs	r0, r0
    48dc:	1861      	adds	r1, r4, r1
    48de:	f000 fa3f 	bl	4d60 <__utoa>
    48e2:	e7f1      	b.n	48c8 <__itoa+0x10>
    48e4:	2100      	movs	r1, #0
    48e6:	e7f9      	b.n	48dc <__itoa+0x24>

000048e8 <itoa>:
    48e8:	b510      	push	{r4, lr}
    48ea:	f7ff ffe5 	bl	48b8 <__itoa>
    48ee:	bd10      	pop	{r4, pc}

000048f0 <malloc>:
    48f0:	b510      	push	{r4, lr}
    48f2:	4b03      	ldr	r3, [pc, #12]	; (4900 <malloc+0x10>)
    48f4:	0001      	movs	r1, r0
    48f6:	6818      	ldr	r0, [r3, #0]
    48f8:	f000 f860 	bl	49bc <_malloc_r>
    48fc:	bd10      	pop	{r4, pc}
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	20000174 	.word	0x20000174

00004904 <memcpy>:
    4904:	2300      	movs	r3, #0
    4906:	b510      	push	{r4, lr}
    4908:	429a      	cmp	r2, r3
    490a:	d100      	bne.n	490e <memcpy+0xa>
    490c:	bd10      	pop	{r4, pc}
    490e:	5ccc      	ldrb	r4, [r1, r3]
    4910:	54c4      	strb	r4, [r0, r3]
    4912:	3301      	adds	r3, #1
    4914:	e7f8      	b.n	4908 <memcpy+0x4>

00004916 <memset>:
    4916:	0003      	movs	r3, r0
    4918:	1882      	adds	r2, r0, r2
    491a:	4293      	cmp	r3, r2
    491c:	d100      	bne.n	4920 <memset+0xa>
    491e:	4770      	bx	lr
    4920:	7019      	strb	r1, [r3, #0]
    4922:	3301      	adds	r3, #1
    4924:	e7f9      	b.n	491a <memset+0x4>
	...

00004928 <_free_r>:
    4928:	b570      	push	{r4, r5, r6, lr}
    492a:	0005      	movs	r5, r0
    492c:	2900      	cmp	r1, #0
    492e:	d010      	beq.n	4952 <_free_r+0x2a>
    4930:	1f0c      	subs	r4, r1, #4
    4932:	6823      	ldr	r3, [r4, #0]
    4934:	2b00      	cmp	r3, #0
    4936:	da00      	bge.n	493a <_free_r+0x12>
    4938:	18e4      	adds	r4, r4, r3
    493a:	0028      	movs	r0, r5
    493c:	f000 fc44 	bl	51c8 <__malloc_lock>
    4940:	4a1d      	ldr	r2, [pc, #116]	; (49b8 <_free_r+0x90>)
    4942:	6813      	ldr	r3, [r2, #0]
    4944:	2b00      	cmp	r3, #0
    4946:	d105      	bne.n	4954 <_free_r+0x2c>
    4948:	6063      	str	r3, [r4, #4]
    494a:	6014      	str	r4, [r2, #0]
    494c:	0028      	movs	r0, r5
    494e:	f000 fc3c 	bl	51ca <__malloc_unlock>
    4952:	bd70      	pop	{r4, r5, r6, pc}
    4954:	42a3      	cmp	r3, r4
    4956:	d909      	bls.n	496c <_free_r+0x44>
    4958:	6821      	ldr	r1, [r4, #0]
    495a:	1860      	adds	r0, r4, r1
    495c:	4283      	cmp	r3, r0
    495e:	d1f3      	bne.n	4948 <_free_r+0x20>
    4960:	6818      	ldr	r0, [r3, #0]
    4962:	685b      	ldr	r3, [r3, #4]
    4964:	1841      	adds	r1, r0, r1
    4966:	6021      	str	r1, [r4, #0]
    4968:	e7ee      	b.n	4948 <_free_r+0x20>
    496a:	0013      	movs	r3, r2
    496c:	685a      	ldr	r2, [r3, #4]
    496e:	2a00      	cmp	r2, #0
    4970:	d001      	beq.n	4976 <_free_r+0x4e>
    4972:	42a2      	cmp	r2, r4
    4974:	d9f9      	bls.n	496a <_free_r+0x42>
    4976:	6819      	ldr	r1, [r3, #0]
    4978:	1858      	adds	r0, r3, r1
    497a:	42a0      	cmp	r0, r4
    497c:	d10b      	bne.n	4996 <_free_r+0x6e>
    497e:	6820      	ldr	r0, [r4, #0]
    4980:	1809      	adds	r1, r1, r0
    4982:	1858      	adds	r0, r3, r1
    4984:	6019      	str	r1, [r3, #0]
    4986:	4282      	cmp	r2, r0
    4988:	d1e0      	bne.n	494c <_free_r+0x24>
    498a:	6810      	ldr	r0, [r2, #0]
    498c:	6852      	ldr	r2, [r2, #4]
    498e:	1841      	adds	r1, r0, r1
    4990:	6019      	str	r1, [r3, #0]
    4992:	605a      	str	r2, [r3, #4]
    4994:	e7da      	b.n	494c <_free_r+0x24>
    4996:	42a0      	cmp	r0, r4
    4998:	d902      	bls.n	49a0 <_free_r+0x78>
    499a:	230c      	movs	r3, #12
    499c:	602b      	str	r3, [r5, #0]
    499e:	e7d5      	b.n	494c <_free_r+0x24>
    49a0:	6821      	ldr	r1, [r4, #0]
    49a2:	1860      	adds	r0, r4, r1
    49a4:	4282      	cmp	r2, r0
    49a6:	d103      	bne.n	49b0 <_free_r+0x88>
    49a8:	6810      	ldr	r0, [r2, #0]
    49aa:	6852      	ldr	r2, [r2, #4]
    49ac:	1841      	adds	r1, r0, r1
    49ae:	6021      	str	r1, [r4, #0]
    49b0:	6062      	str	r2, [r4, #4]
    49b2:	605c      	str	r4, [r3, #4]
    49b4:	e7ca      	b.n	494c <_free_r+0x24>
    49b6:	46c0      	nop			; (mov r8, r8)
    49b8:	200002c4 	.word	0x200002c4

000049bc <_malloc_r>:
    49bc:	2303      	movs	r3, #3
    49be:	b570      	push	{r4, r5, r6, lr}
    49c0:	1ccd      	adds	r5, r1, #3
    49c2:	439d      	bics	r5, r3
    49c4:	3508      	adds	r5, #8
    49c6:	0006      	movs	r6, r0
    49c8:	2d0c      	cmp	r5, #12
    49ca:	d21e      	bcs.n	4a0a <_malloc_r+0x4e>
    49cc:	250c      	movs	r5, #12
    49ce:	42a9      	cmp	r1, r5
    49d0:	d81d      	bhi.n	4a0e <_malloc_r+0x52>
    49d2:	0030      	movs	r0, r6
    49d4:	f000 fbf8 	bl	51c8 <__malloc_lock>
    49d8:	4a25      	ldr	r2, [pc, #148]	; (4a70 <_malloc_r+0xb4>)
    49da:	6814      	ldr	r4, [r2, #0]
    49dc:	0021      	movs	r1, r4
    49de:	2900      	cmp	r1, #0
    49e0:	d119      	bne.n	4a16 <_malloc_r+0x5a>
    49e2:	4c24      	ldr	r4, [pc, #144]	; (4a74 <_malloc_r+0xb8>)
    49e4:	6823      	ldr	r3, [r4, #0]
    49e6:	2b00      	cmp	r3, #0
    49e8:	d103      	bne.n	49f2 <_malloc_r+0x36>
    49ea:	0030      	movs	r0, r6
    49ec:	f000 f8dc 	bl	4ba8 <_sbrk_r>
    49f0:	6020      	str	r0, [r4, #0]
    49f2:	0029      	movs	r1, r5
    49f4:	0030      	movs	r0, r6
    49f6:	f000 f8d7 	bl	4ba8 <_sbrk_r>
    49fa:	1c43      	adds	r3, r0, #1
    49fc:	d12c      	bne.n	4a58 <_malloc_r+0x9c>
    49fe:	230c      	movs	r3, #12
    4a00:	0030      	movs	r0, r6
    4a02:	6033      	str	r3, [r6, #0]
    4a04:	f000 fbe1 	bl	51ca <__malloc_unlock>
    4a08:	e003      	b.n	4a12 <_malloc_r+0x56>
    4a0a:	2d00      	cmp	r5, #0
    4a0c:	dadf      	bge.n	49ce <_malloc_r+0x12>
    4a0e:	230c      	movs	r3, #12
    4a10:	6033      	str	r3, [r6, #0]
    4a12:	2000      	movs	r0, #0
    4a14:	bd70      	pop	{r4, r5, r6, pc}
    4a16:	680b      	ldr	r3, [r1, #0]
    4a18:	1b5b      	subs	r3, r3, r5
    4a1a:	d41a      	bmi.n	4a52 <_malloc_r+0x96>
    4a1c:	2b0b      	cmp	r3, #11
    4a1e:	d903      	bls.n	4a28 <_malloc_r+0x6c>
    4a20:	600b      	str	r3, [r1, #0]
    4a22:	18cc      	adds	r4, r1, r3
    4a24:	6025      	str	r5, [r4, #0]
    4a26:	e003      	b.n	4a30 <_malloc_r+0x74>
    4a28:	428c      	cmp	r4, r1
    4a2a:	d10e      	bne.n	4a4a <_malloc_r+0x8e>
    4a2c:	6863      	ldr	r3, [r4, #4]
    4a2e:	6013      	str	r3, [r2, #0]
    4a30:	0030      	movs	r0, r6
    4a32:	f000 fbca 	bl	51ca <__malloc_unlock>
    4a36:	0020      	movs	r0, r4
    4a38:	2207      	movs	r2, #7
    4a3a:	300b      	adds	r0, #11
    4a3c:	1d23      	adds	r3, r4, #4
    4a3e:	4390      	bics	r0, r2
    4a40:	1ac3      	subs	r3, r0, r3
    4a42:	d0e7      	beq.n	4a14 <_malloc_r+0x58>
    4a44:	425a      	negs	r2, r3
    4a46:	50e2      	str	r2, [r4, r3]
    4a48:	e7e4      	b.n	4a14 <_malloc_r+0x58>
    4a4a:	684b      	ldr	r3, [r1, #4]
    4a4c:	6063      	str	r3, [r4, #4]
    4a4e:	000c      	movs	r4, r1
    4a50:	e7ee      	b.n	4a30 <_malloc_r+0x74>
    4a52:	000c      	movs	r4, r1
    4a54:	6849      	ldr	r1, [r1, #4]
    4a56:	e7c2      	b.n	49de <_malloc_r+0x22>
    4a58:	2303      	movs	r3, #3
    4a5a:	1cc4      	adds	r4, r0, #3
    4a5c:	439c      	bics	r4, r3
    4a5e:	42a0      	cmp	r0, r4
    4a60:	d0e0      	beq.n	4a24 <_malloc_r+0x68>
    4a62:	1a21      	subs	r1, r4, r0
    4a64:	0030      	movs	r0, r6
    4a66:	f000 f89f 	bl	4ba8 <_sbrk_r>
    4a6a:	1c43      	adds	r3, r0, #1
    4a6c:	d1da      	bne.n	4a24 <_malloc_r+0x68>
    4a6e:	e7c6      	b.n	49fe <_malloc_r+0x42>
    4a70:	200002c4 	.word	0x200002c4
    4a74:	200002c8 	.word	0x200002c8

00004a78 <iprintf>:
    4a78:	b40f      	push	{r0, r1, r2, r3}
    4a7a:	4b0b      	ldr	r3, [pc, #44]	; (4aa8 <iprintf+0x30>)
    4a7c:	b513      	push	{r0, r1, r4, lr}
    4a7e:	681c      	ldr	r4, [r3, #0]
    4a80:	2c00      	cmp	r4, #0
    4a82:	d005      	beq.n	4a90 <iprintf+0x18>
    4a84:	69a3      	ldr	r3, [r4, #24]
    4a86:	2b00      	cmp	r3, #0
    4a88:	d102      	bne.n	4a90 <iprintf+0x18>
    4a8a:	0020      	movs	r0, r4
    4a8c:	f000 fa9a 	bl	4fc4 <__sinit>
    4a90:	ab05      	add	r3, sp, #20
    4a92:	9a04      	ldr	r2, [sp, #16]
    4a94:	68a1      	ldr	r1, [r4, #8]
    4a96:	0020      	movs	r0, r4
    4a98:	9301      	str	r3, [sp, #4]
    4a9a:	f000 fbbf 	bl	521c <_vfiprintf_r>
    4a9e:	bc16      	pop	{r1, r2, r4}
    4aa0:	bc08      	pop	{r3}
    4aa2:	b004      	add	sp, #16
    4aa4:	4718      	bx	r3
    4aa6:	46c0      	nop			; (mov r8, r8)
    4aa8:	20000174 	.word	0x20000174

00004aac <putchar>:
    4aac:	4b08      	ldr	r3, [pc, #32]	; (4ad0 <putchar+0x24>)
    4aae:	b570      	push	{r4, r5, r6, lr}
    4ab0:	681c      	ldr	r4, [r3, #0]
    4ab2:	0005      	movs	r5, r0
    4ab4:	2c00      	cmp	r4, #0
    4ab6:	d005      	beq.n	4ac4 <putchar+0x18>
    4ab8:	69a3      	ldr	r3, [r4, #24]
    4aba:	2b00      	cmp	r3, #0
    4abc:	d102      	bne.n	4ac4 <putchar+0x18>
    4abe:	0020      	movs	r0, r4
    4ac0:	f000 fa80 	bl	4fc4 <__sinit>
    4ac4:	0029      	movs	r1, r5
    4ac6:	68a2      	ldr	r2, [r4, #8]
    4ac8:	0020      	movs	r0, r4
    4aca:	f000 fe4b 	bl	5764 <_putc_r>
    4ace:	bd70      	pop	{r4, r5, r6, pc}
    4ad0:	20000174 	.word	0x20000174

00004ad4 <srand>:
    4ad4:	4b10      	ldr	r3, [pc, #64]	; (4b18 <srand+0x44>)
    4ad6:	b570      	push	{r4, r5, r6, lr}
    4ad8:	681c      	ldr	r4, [r3, #0]
    4ada:	0005      	movs	r5, r0
    4adc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4ade:	2b00      	cmp	r3, #0
    4ae0:	d115      	bne.n	4b0e <srand+0x3a>
    4ae2:	2018      	movs	r0, #24
    4ae4:	f7ff ff04 	bl	48f0 <malloc>
    4ae8:	4b0c      	ldr	r3, [pc, #48]	; (4b1c <srand+0x48>)
    4aea:	63a0      	str	r0, [r4, #56]	; 0x38
    4aec:	8003      	strh	r3, [r0, #0]
    4aee:	4b0c      	ldr	r3, [pc, #48]	; (4b20 <srand+0x4c>)
    4af0:	2201      	movs	r2, #1
    4af2:	8043      	strh	r3, [r0, #2]
    4af4:	4b0b      	ldr	r3, [pc, #44]	; (4b24 <srand+0x50>)
    4af6:	8083      	strh	r3, [r0, #4]
    4af8:	4b0b      	ldr	r3, [pc, #44]	; (4b28 <srand+0x54>)
    4afa:	80c3      	strh	r3, [r0, #6]
    4afc:	4b0b      	ldr	r3, [pc, #44]	; (4b2c <srand+0x58>)
    4afe:	8103      	strh	r3, [r0, #8]
    4b00:	2305      	movs	r3, #5
    4b02:	8143      	strh	r3, [r0, #10]
    4b04:	3306      	adds	r3, #6
    4b06:	8183      	strh	r3, [r0, #12]
    4b08:	2300      	movs	r3, #0
    4b0a:	6102      	str	r2, [r0, #16]
    4b0c:	6143      	str	r3, [r0, #20]
    4b0e:	2200      	movs	r2, #0
    4b10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4b12:	611d      	str	r5, [r3, #16]
    4b14:	615a      	str	r2, [r3, #20]
    4b16:	bd70      	pop	{r4, r5, r6, pc}
    4b18:	20000174 	.word	0x20000174
    4b1c:	0000330e 	.word	0x0000330e
    4b20:	ffffabcd 	.word	0xffffabcd
    4b24:	00001234 	.word	0x00001234
    4b28:	ffffe66d 	.word	0xffffe66d
    4b2c:	ffffdeec 	.word	0xffffdeec

00004b30 <rand>:
    4b30:	4b15      	ldr	r3, [pc, #84]	; (4b88 <rand+0x58>)
    4b32:	b510      	push	{r4, lr}
    4b34:	681c      	ldr	r4, [r3, #0]
    4b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d115      	bne.n	4b68 <rand+0x38>
    4b3c:	2018      	movs	r0, #24
    4b3e:	f7ff fed7 	bl	48f0 <malloc>
    4b42:	4b12      	ldr	r3, [pc, #72]	; (4b8c <rand+0x5c>)
    4b44:	63a0      	str	r0, [r4, #56]	; 0x38
    4b46:	8003      	strh	r3, [r0, #0]
    4b48:	4b11      	ldr	r3, [pc, #68]	; (4b90 <rand+0x60>)
    4b4a:	2201      	movs	r2, #1
    4b4c:	8043      	strh	r3, [r0, #2]
    4b4e:	4b11      	ldr	r3, [pc, #68]	; (4b94 <rand+0x64>)
    4b50:	8083      	strh	r3, [r0, #4]
    4b52:	4b11      	ldr	r3, [pc, #68]	; (4b98 <rand+0x68>)
    4b54:	80c3      	strh	r3, [r0, #6]
    4b56:	4b11      	ldr	r3, [pc, #68]	; (4b9c <rand+0x6c>)
    4b58:	8103      	strh	r3, [r0, #8]
    4b5a:	2305      	movs	r3, #5
    4b5c:	8143      	strh	r3, [r0, #10]
    4b5e:	3306      	adds	r3, #6
    4b60:	8183      	strh	r3, [r0, #12]
    4b62:	2300      	movs	r3, #0
    4b64:	6102      	str	r2, [r0, #16]
    4b66:	6143      	str	r3, [r0, #20]
    4b68:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4b6a:	4a0d      	ldr	r2, [pc, #52]	; (4ba0 <rand+0x70>)
    4b6c:	6920      	ldr	r0, [r4, #16]
    4b6e:	6961      	ldr	r1, [r4, #20]
    4b70:	4b0c      	ldr	r3, [pc, #48]	; (4ba4 <rand+0x74>)
    4b72:	f7ff fe53 	bl	481c <__aeabi_lmul>
    4b76:	2201      	movs	r2, #1
    4b78:	2300      	movs	r3, #0
    4b7a:	1880      	adds	r0, r0, r2
    4b7c:	4159      	adcs	r1, r3
    4b7e:	6120      	str	r0, [r4, #16]
    4b80:	6161      	str	r1, [r4, #20]
    4b82:	0048      	lsls	r0, r1, #1
    4b84:	0840      	lsrs	r0, r0, #1
    4b86:	bd10      	pop	{r4, pc}
    4b88:	20000174 	.word	0x20000174
    4b8c:	0000330e 	.word	0x0000330e
    4b90:	ffffabcd 	.word	0xffffabcd
    4b94:	00001234 	.word	0x00001234
    4b98:	ffffe66d 	.word	0xffffe66d
    4b9c:	ffffdeec 	.word	0xffffdeec
    4ba0:	4c957f2d 	.word	0x4c957f2d
    4ba4:	5851f42d 	.word	0x5851f42d

00004ba8 <_sbrk_r>:
    4ba8:	2300      	movs	r3, #0
    4baa:	b570      	push	{r4, r5, r6, lr}
    4bac:	4c06      	ldr	r4, [pc, #24]	; (4bc8 <_sbrk_r+0x20>)
    4bae:	0005      	movs	r5, r0
    4bb0:	0008      	movs	r0, r1
    4bb2:	6023      	str	r3, [r4, #0]
    4bb4:	f7fe fb48 	bl	3248 <_sbrk>
    4bb8:	1c43      	adds	r3, r0, #1
    4bba:	d103      	bne.n	4bc4 <_sbrk_r+0x1c>
    4bbc:	6823      	ldr	r3, [r4, #0]
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	d000      	beq.n	4bc4 <_sbrk_r+0x1c>
    4bc2:	602b      	str	r3, [r5, #0]
    4bc4:	bd70      	pop	{r4, r5, r6, pc}
    4bc6:	46c0      	nop			; (mov r8, r8)
    4bc8:	20000b6c 	.word	0x20000b6c

00004bcc <setbuf>:
    4bcc:	424a      	negs	r2, r1
    4bce:	414a      	adcs	r2, r1
    4bd0:	2380      	movs	r3, #128	; 0x80
    4bd2:	b510      	push	{r4, lr}
    4bd4:	0052      	lsls	r2, r2, #1
    4bd6:	00db      	lsls	r3, r3, #3
    4bd8:	f000 f802 	bl	4be0 <setvbuf>
    4bdc:	bd10      	pop	{r4, pc}
	...

00004be0 <setvbuf>:
    4be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4be2:	001d      	movs	r5, r3
    4be4:	4b4f      	ldr	r3, [pc, #316]	; (4d24 <setvbuf+0x144>)
    4be6:	b085      	sub	sp, #20
    4be8:	681e      	ldr	r6, [r3, #0]
    4bea:	0004      	movs	r4, r0
    4bec:	000f      	movs	r7, r1
    4bee:	9200      	str	r2, [sp, #0]
    4bf0:	2e00      	cmp	r6, #0
    4bf2:	d005      	beq.n	4c00 <setvbuf+0x20>
    4bf4:	69b3      	ldr	r3, [r6, #24]
    4bf6:	2b00      	cmp	r3, #0
    4bf8:	d102      	bne.n	4c00 <setvbuf+0x20>
    4bfa:	0030      	movs	r0, r6
    4bfc:	f000 f9e2 	bl	4fc4 <__sinit>
    4c00:	4b49      	ldr	r3, [pc, #292]	; (4d28 <setvbuf+0x148>)
    4c02:	429c      	cmp	r4, r3
    4c04:	d150      	bne.n	4ca8 <setvbuf+0xc8>
    4c06:	6874      	ldr	r4, [r6, #4]
    4c08:	9b00      	ldr	r3, [sp, #0]
    4c0a:	2b02      	cmp	r3, #2
    4c0c:	d005      	beq.n	4c1a <setvbuf+0x3a>
    4c0e:	2b01      	cmp	r3, #1
    4c10:	d900      	bls.n	4c14 <setvbuf+0x34>
    4c12:	e084      	b.n	4d1e <setvbuf+0x13e>
    4c14:	2d00      	cmp	r5, #0
    4c16:	da00      	bge.n	4c1a <setvbuf+0x3a>
    4c18:	e081      	b.n	4d1e <setvbuf+0x13e>
    4c1a:	0021      	movs	r1, r4
    4c1c:	0030      	movs	r0, r6
    4c1e:	f000 f963 	bl	4ee8 <_fflush_r>
    4c22:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4c24:	2900      	cmp	r1, #0
    4c26:	d008      	beq.n	4c3a <setvbuf+0x5a>
    4c28:	0023      	movs	r3, r4
    4c2a:	3344      	adds	r3, #68	; 0x44
    4c2c:	4299      	cmp	r1, r3
    4c2e:	d002      	beq.n	4c36 <setvbuf+0x56>
    4c30:	0030      	movs	r0, r6
    4c32:	f7ff fe79 	bl	4928 <_free_r>
    4c36:	2300      	movs	r3, #0
    4c38:	6363      	str	r3, [r4, #52]	; 0x34
    4c3a:	2300      	movs	r3, #0
    4c3c:	61a3      	str	r3, [r4, #24]
    4c3e:	6063      	str	r3, [r4, #4]
    4c40:	89a3      	ldrh	r3, [r4, #12]
    4c42:	061b      	lsls	r3, r3, #24
    4c44:	d503      	bpl.n	4c4e <setvbuf+0x6e>
    4c46:	6921      	ldr	r1, [r4, #16]
    4c48:	0030      	movs	r0, r6
    4c4a:	f7ff fe6d 	bl	4928 <_free_r>
    4c4e:	89a3      	ldrh	r3, [r4, #12]
    4c50:	4a36      	ldr	r2, [pc, #216]	; (4d2c <setvbuf+0x14c>)
    4c52:	4013      	ands	r3, r2
    4c54:	81a3      	strh	r3, [r4, #12]
    4c56:	9b00      	ldr	r3, [sp, #0]
    4c58:	2b02      	cmp	r3, #2
    4c5a:	d05a      	beq.n	4d12 <setvbuf+0x132>
    4c5c:	ab03      	add	r3, sp, #12
    4c5e:	aa02      	add	r2, sp, #8
    4c60:	0021      	movs	r1, r4
    4c62:	0030      	movs	r0, r6
    4c64:	f000 fa44 	bl	50f0 <__swhatbuf_r>
    4c68:	89a3      	ldrh	r3, [r4, #12]
    4c6a:	4318      	orrs	r0, r3
    4c6c:	81a0      	strh	r0, [r4, #12]
    4c6e:	2d00      	cmp	r5, #0
    4c70:	d124      	bne.n	4cbc <setvbuf+0xdc>
    4c72:	9d02      	ldr	r5, [sp, #8]
    4c74:	0028      	movs	r0, r5
    4c76:	f7ff fe3b 	bl	48f0 <malloc>
    4c7a:	9501      	str	r5, [sp, #4]
    4c7c:	1e07      	subs	r7, r0, #0
    4c7e:	d142      	bne.n	4d06 <setvbuf+0x126>
    4c80:	9b02      	ldr	r3, [sp, #8]
    4c82:	9301      	str	r3, [sp, #4]
    4c84:	42ab      	cmp	r3, r5
    4c86:	d139      	bne.n	4cfc <setvbuf+0x11c>
    4c88:	2001      	movs	r0, #1
    4c8a:	4240      	negs	r0, r0
    4c8c:	2302      	movs	r3, #2
    4c8e:	89a2      	ldrh	r2, [r4, #12]
    4c90:	4313      	orrs	r3, r2
    4c92:	81a3      	strh	r3, [r4, #12]
    4c94:	2300      	movs	r3, #0
    4c96:	60a3      	str	r3, [r4, #8]
    4c98:	0023      	movs	r3, r4
    4c9a:	3347      	adds	r3, #71	; 0x47
    4c9c:	6023      	str	r3, [r4, #0]
    4c9e:	6123      	str	r3, [r4, #16]
    4ca0:	2301      	movs	r3, #1
    4ca2:	6163      	str	r3, [r4, #20]
    4ca4:	b005      	add	sp, #20
    4ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ca8:	4b21      	ldr	r3, [pc, #132]	; (4d30 <setvbuf+0x150>)
    4caa:	429c      	cmp	r4, r3
    4cac:	d101      	bne.n	4cb2 <setvbuf+0xd2>
    4cae:	68b4      	ldr	r4, [r6, #8]
    4cb0:	e7aa      	b.n	4c08 <setvbuf+0x28>
    4cb2:	4b20      	ldr	r3, [pc, #128]	; (4d34 <setvbuf+0x154>)
    4cb4:	429c      	cmp	r4, r3
    4cb6:	d1a7      	bne.n	4c08 <setvbuf+0x28>
    4cb8:	68f4      	ldr	r4, [r6, #12]
    4cba:	e7a5      	b.n	4c08 <setvbuf+0x28>
    4cbc:	2f00      	cmp	r7, #0
    4cbe:	d0d9      	beq.n	4c74 <setvbuf+0x94>
    4cc0:	69b3      	ldr	r3, [r6, #24]
    4cc2:	2b00      	cmp	r3, #0
    4cc4:	d102      	bne.n	4ccc <setvbuf+0xec>
    4cc6:	0030      	movs	r0, r6
    4cc8:	f000 f97c 	bl	4fc4 <__sinit>
    4ccc:	9b00      	ldr	r3, [sp, #0]
    4cce:	2b01      	cmp	r3, #1
    4cd0:	d103      	bne.n	4cda <setvbuf+0xfa>
    4cd2:	89a3      	ldrh	r3, [r4, #12]
    4cd4:	9a00      	ldr	r2, [sp, #0]
    4cd6:	431a      	orrs	r2, r3
    4cd8:	81a2      	strh	r2, [r4, #12]
    4cda:	2008      	movs	r0, #8
    4cdc:	89a3      	ldrh	r3, [r4, #12]
    4cde:	6027      	str	r7, [r4, #0]
    4ce0:	6127      	str	r7, [r4, #16]
    4ce2:	6165      	str	r5, [r4, #20]
    4ce4:	4018      	ands	r0, r3
    4ce6:	d018      	beq.n	4d1a <setvbuf+0x13a>
    4ce8:	2001      	movs	r0, #1
    4cea:	4018      	ands	r0, r3
    4cec:	2300      	movs	r3, #0
    4cee:	4298      	cmp	r0, r3
    4cf0:	d011      	beq.n	4d16 <setvbuf+0x136>
    4cf2:	426d      	negs	r5, r5
    4cf4:	60a3      	str	r3, [r4, #8]
    4cf6:	61a5      	str	r5, [r4, #24]
    4cf8:	0018      	movs	r0, r3
    4cfa:	e7d3      	b.n	4ca4 <setvbuf+0xc4>
    4cfc:	9801      	ldr	r0, [sp, #4]
    4cfe:	f7ff fdf7 	bl	48f0 <malloc>
    4d02:	1e07      	subs	r7, r0, #0
    4d04:	d0c0      	beq.n	4c88 <setvbuf+0xa8>
    4d06:	2380      	movs	r3, #128	; 0x80
    4d08:	89a2      	ldrh	r2, [r4, #12]
    4d0a:	9d01      	ldr	r5, [sp, #4]
    4d0c:	4313      	orrs	r3, r2
    4d0e:	81a3      	strh	r3, [r4, #12]
    4d10:	e7d6      	b.n	4cc0 <setvbuf+0xe0>
    4d12:	2000      	movs	r0, #0
    4d14:	e7ba      	b.n	4c8c <setvbuf+0xac>
    4d16:	60a5      	str	r5, [r4, #8]
    4d18:	e7c4      	b.n	4ca4 <setvbuf+0xc4>
    4d1a:	60a0      	str	r0, [r4, #8]
    4d1c:	e7c2      	b.n	4ca4 <setvbuf+0xc4>
    4d1e:	2001      	movs	r0, #1
    4d20:	4240      	negs	r0, r0
    4d22:	e7bf      	b.n	4ca4 <setvbuf+0xc4>
    4d24:	20000174 	.word	0x20000174
    4d28:	00007efc 	.word	0x00007efc
    4d2c:	fffff35c 	.word	0xfffff35c
    4d30:	00007f1c 	.word	0x00007f1c
    4d34:	00007edc 	.word	0x00007edc

00004d38 <strcat>:
    4d38:	0002      	movs	r2, r0
    4d3a:	b510      	push	{r4, lr}
    4d3c:	7813      	ldrb	r3, [r2, #0]
    4d3e:	2b00      	cmp	r3, #0
    4d40:	d105      	bne.n	4d4e <strcat+0x16>
    4d42:	5ccc      	ldrb	r4, [r1, r3]
    4d44:	54d4      	strb	r4, [r2, r3]
    4d46:	3301      	adds	r3, #1
    4d48:	2c00      	cmp	r4, #0
    4d4a:	d1fa      	bne.n	4d42 <strcat+0xa>
    4d4c:	bd10      	pop	{r4, pc}
    4d4e:	3201      	adds	r2, #1
    4d50:	e7f4      	b.n	4d3c <strcat+0x4>

00004d52 <strlen>:
    4d52:	2300      	movs	r3, #0
    4d54:	5cc2      	ldrb	r2, [r0, r3]
    4d56:	3301      	adds	r3, #1
    4d58:	2a00      	cmp	r2, #0
    4d5a:	d1fb      	bne.n	4d54 <strlen+0x2>
    4d5c:	1e58      	subs	r0, r3, #1
    4d5e:	4770      	bx	lr

00004d60 <__utoa>:
    4d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d62:	0017      	movs	r7, r2
    4d64:	b08f      	sub	sp, #60	; 0x3c
    4d66:	2225      	movs	r2, #37	; 0x25
    4d68:	0006      	movs	r6, r0
    4d6a:	000d      	movs	r5, r1
    4d6c:	a804      	add	r0, sp, #16
    4d6e:	4918      	ldr	r1, [pc, #96]	; (4dd0 <__utoa+0x70>)
    4d70:	f7ff fdc8 	bl	4904 <memcpy>
    4d74:	aa04      	add	r2, sp, #16
    4d76:	1ebb      	subs	r3, r7, #2
    4d78:	2400      	movs	r4, #0
    4d7a:	9203      	str	r2, [sp, #12]
    4d7c:	2b22      	cmp	r3, #34	; 0x22
    4d7e:	d905      	bls.n	4d8c <__utoa+0x2c>
    4d80:	702c      	strb	r4, [r5, #0]
    4d82:	0025      	movs	r5, r4
    4d84:	0028      	movs	r0, r5
    4d86:	b00f      	add	sp, #60	; 0x3c
    4d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d8a:	9c01      	ldr	r4, [sp, #4]
    4d8c:	1c63      	adds	r3, r4, #1
    4d8e:	9301      	str	r3, [sp, #4]
    4d90:	18eb      	adds	r3, r5, r3
    4d92:	9300      	str	r3, [sp, #0]
    4d94:	0030      	movs	r0, r6
    4d96:	3b01      	subs	r3, #1
    4d98:	0039      	movs	r1, r7
    4d9a:	9302      	str	r3, [sp, #8]
    4d9c:	f7ff fc4e 	bl	463c <__aeabi_uidivmod>
    4da0:	9b03      	ldr	r3, [sp, #12]
    4da2:	9a02      	ldr	r2, [sp, #8]
    4da4:	5c5b      	ldrb	r3, [r3, r1]
    4da6:	0030      	movs	r0, r6
    4da8:	7013      	strb	r3, [r2, #0]
    4daa:	0039      	movs	r1, r7
    4dac:	f7ff fbc0 	bl	4530 <__udivsi3>
    4db0:	1e06      	subs	r6, r0, #0
    4db2:	d1ea      	bne.n	4d8a <__utoa+0x2a>
    4db4:	9b00      	ldr	r3, [sp, #0]
    4db6:	7018      	strb	r0, [r3, #0]
    4db8:	002b      	movs	r3, r5
    4dba:	1b5a      	subs	r2, r3, r5
    4dbc:	4294      	cmp	r4, r2
    4dbe:	dde1      	ble.n	4d84 <__utoa+0x24>
    4dc0:	781a      	ldrb	r2, [r3, #0]
    4dc2:	5d29      	ldrb	r1, [r5, r4]
    4dc4:	7019      	strb	r1, [r3, #0]
    4dc6:	552a      	strb	r2, [r5, r4]
    4dc8:	3301      	adds	r3, #1
    4dca:	3c01      	subs	r4, #1
    4dcc:	e7f5      	b.n	4dba <__utoa+0x5a>
    4dce:	46c0      	nop			; (mov r8, r8)
    4dd0:	00007eb4 	.word	0x00007eb4

00004dd4 <__sflush_r>:
    4dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4dd6:	898a      	ldrh	r2, [r1, #12]
    4dd8:	0005      	movs	r5, r0
    4dda:	000c      	movs	r4, r1
    4ddc:	0713      	lsls	r3, r2, #28
    4dde:	d460      	bmi.n	4ea2 <__sflush_r+0xce>
    4de0:	684b      	ldr	r3, [r1, #4]
    4de2:	2b00      	cmp	r3, #0
    4de4:	dc04      	bgt.n	4df0 <__sflush_r+0x1c>
    4de6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4de8:	2b00      	cmp	r3, #0
    4dea:	dc01      	bgt.n	4df0 <__sflush_r+0x1c>
    4dec:	2000      	movs	r0, #0
    4dee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4df0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4df2:	2f00      	cmp	r7, #0
    4df4:	d0fa      	beq.n	4dec <__sflush_r+0x18>
    4df6:	2300      	movs	r3, #0
    4df8:	682e      	ldr	r6, [r5, #0]
    4dfa:	602b      	str	r3, [r5, #0]
    4dfc:	2380      	movs	r3, #128	; 0x80
    4dfe:	015b      	lsls	r3, r3, #5
    4e00:	401a      	ands	r2, r3
    4e02:	d034      	beq.n	4e6e <__sflush_r+0x9a>
    4e04:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4e06:	89a3      	ldrh	r3, [r4, #12]
    4e08:	075b      	lsls	r3, r3, #29
    4e0a:	d506      	bpl.n	4e1a <__sflush_r+0x46>
    4e0c:	6863      	ldr	r3, [r4, #4]
    4e0e:	1ac0      	subs	r0, r0, r3
    4e10:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4e12:	2b00      	cmp	r3, #0
    4e14:	d001      	beq.n	4e1a <__sflush_r+0x46>
    4e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4e18:	1ac0      	subs	r0, r0, r3
    4e1a:	0002      	movs	r2, r0
    4e1c:	6a21      	ldr	r1, [r4, #32]
    4e1e:	2300      	movs	r3, #0
    4e20:	0028      	movs	r0, r5
    4e22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4e24:	47b8      	blx	r7
    4e26:	89a1      	ldrh	r1, [r4, #12]
    4e28:	1c43      	adds	r3, r0, #1
    4e2a:	d106      	bne.n	4e3a <__sflush_r+0x66>
    4e2c:	682b      	ldr	r3, [r5, #0]
    4e2e:	2b1d      	cmp	r3, #29
    4e30:	d831      	bhi.n	4e96 <__sflush_r+0xc2>
    4e32:	4a2c      	ldr	r2, [pc, #176]	; (4ee4 <__sflush_r+0x110>)
    4e34:	40da      	lsrs	r2, r3
    4e36:	07d3      	lsls	r3, r2, #31
    4e38:	d52d      	bpl.n	4e96 <__sflush_r+0xc2>
    4e3a:	2300      	movs	r3, #0
    4e3c:	6063      	str	r3, [r4, #4]
    4e3e:	6923      	ldr	r3, [r4, #16]
    4e40:	6023      	str	r3, [r4, #0]
    4e42:	04cb      	lsls	r3, r1, #19
    4e44:	d505      	bpl.n	4e52 <__sflush_r+0x7e>
    4e46:	1c43      	adds	r3, r0, #1
    4e48:	d102      	bne.n	4e50 <__sflush_r+0x7c>
    4e4a:	682b      	ldr	r3, [r5, #0]
    4e4c:	2b00      	cmp	r3, #0
    4e4e:	d100      	bne.n	4e52 <__sflush_r+0x7e>
    4e50:	6560      	str	r0, [r4, #84]	; 0x54
    4e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4e54:	602e      	str	r6, [r5, #0]
    4e56:	2900      	cmp	r1, #0
    4e58:	d0c8      	beq.n	4dec <__sflush_r+0x18>
    4e5a:	0023      	movs	r3, r4
    4e5c:	3344      	adds	r3, #68	; 0x44
    4e5e:	4299      	cmp	r1, r3
    4e60:	d002      	beq.n	4e68 <__sflush_r+0x94>
    4e62:	0028      	movs	r0, r5
    4e64:	f7ff fd60 	bl	4928 <_free_r>
    4e68:	2000      	movs	r0, #0
    4e6a:	6360      	str	r0, [r4, #52]	; 0x34
    4e6c:	e7bf      	b.n	4dee <__sflush_r+0x1a>
    4e6e:	2301      	movs	r3, #1
    4e70:	6a21      	ldr	r1, [r4, #32]
    4e72:	0028      	movs	r0, r5
    4e74:	47b8      	blx	r7
    4e76:	1c43      	adds	r3, r0, #1
    4e78:	d1c5      	bne.n	4e06 <__sflush_r+0x32>
    4e7a:	682b      	ldr	r3, [r5, #0]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d0c2      	beq.n	4e06 <__sflush_r+0x32>
    4e80:	2b1d      	cmp	r3, #29
    4e82:	d001      	beq.n	4e88 <__sflush_r+0xb4>
    4e84:	2b16      	cmp	r3, #22
    4e86:	d101      	bne.n	4e8c <__sflush_r+0xb8>
    4e88:	602e      	str	r6, [r5, #0]
    4e8a:	e7af      	b.n	4dec <__sflush_r+0x18>
    4e8c:	2340      	movs	r3, #64	; 0x40
    4e8e:	89a2      	ldrh	r2, [r4, #12]
    4e90:	4313      	orrs	r3, r2
    4e92:	81a3      	strh	r3, [r4, #12]
    4e94:	e7ab      	b.n	4dee <__sflush_r+0x1a>
    4e96:	2340      	movs	r3, #64	; 0x40
    4e98:	430b      	orrs	r3, r1
    4e9a:	2001      	movs	r0, #1
    4e9c:	81a3      	strh	r3, [r4, #12]
    4e9e:	4240      	negs	r0, r0
    4ea0:	e7a5      	b.n	4dee <__sflush_r+0x1a>
    4ea2:	690f      	ldr	r7, [r1, #16]
    4ea4:	2f00      	cmp	r7, #0
    4ea6:	d0a1      	beq.n	4dec <__sflush_r+0x18>
    4ea8:	680b      	ldr	r3, [r1, #0]
    4eaa:	600f      	str	r7, [r1, #0]
    4eac:	1bdb      	subs	r3, r3, r7
    4eae:	9301      	str	r3, [sp, #4]
    4eb0:	2300      	movs	r3, #0
    4eb2:	0792      	lsls	r2, r2, #30
    4eb4:	d100      	bne.n	4eb8 <__sflush_r+0xe4>
    4eb6:	694b      	ldr	r3, [r1, #20]
    4eb8:	60a3      	str	r3, [r4, #8]
    4eba:	9b01      	ldr	r3, [sp, #4]
    4ebc:	2b00      	cmp	r3, #0
    4ebe:	dc00      	bgt.n	4ec2 <__sflush_r+0xee>
    4ec0:	e794      	b.n	4dec <__sflush_r+0x18>
    4ec2:	9b01      	ldr	r3, [sp, #4]
    4ec4:	003a      	movs	r2, r7
    4ec6:	6a21      	ldr	r1, [r4, #32]
    4ec8:	0028      	movs	r0, r5
    4eca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4ecc:	47b0      	blx	r6
    4ece:	2800      	cmp	r0, #0
    4ed0:	dc03      	bgt.n	4eda <__sflush_r+0x106>
    4ed2:	2340      	movs	r3, #64	; 0x40
    4ed4:	89a2      	ldrh	r2, [r4, #12]
    4ed6:	4313      	orrs	r3, r2
    4ed8:	e7df      	b.n	4e9a <__sflush_r+0xc6>
    4eda:	9b01      	ldr	r3, [sp, #4]
    4edc:	183f      	adds	r7, r7, r0
    4ede:	1a1b      	subs	r3, r3, r0
    4ee0:	9301      	str	r3, [sp, #4]
    4ee2:	e7ea      	b.n	4eba <__sflush_r+0xe6>
    4ee4:	20400001 	.word	0x20400001

00004ee8 <_fflush_r>:
    4ee8:	690b      	ldr	r3, [r1, #16]
    4eea:	b570      	push	{r4, r5, r6, lr}
    4eec:	0005      	movs	r5, r0
    4eee:	000c      	movs	r4, r1
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d101      	bne.n	4ef8 <_fflush_r+0x10>
    4ef4:	2000      	movs	r0, #0
    4ef6:	bd70      	pop	{r4, r5, r6, pc}
    4ef8:	2800      	cmp	r0, #0
    4efa:	d004      	beq.n	4f06 <_fflush_r+0x1e>
    4efc:	6983      	ldr	r3, [r0, #24]
    4efe:	2b00      	cmp	r3, #0
    4f00:	d101      	bne.n	4f06 <_fflush_r+0x1e>
    4f02:	f000 f85f 	bl	4fc4 <__sinit>
    4f06:	4b0b      	ldr	r3, [pc, #44]	; (4f34 <_fflush_r+0x4c>)
    4f08:	429c      	cmp	r4, r3
    4f0a:	d109      	bne.n	4f20 <_fflush_r+0x38>
    4f0c:	686c      	ldr	r4, [r5, #4]
    4f0e:	220c      	movs	r2, #12
    4f10:	5ea3      	ldrsh	r3, [r4, r2]
    4f12:	2b00      	cmp	r3, #0
    4f14:	d0ee      	beq.n	4ef4 <_fflush_r+0xc>
    4f16:	0021      	movs	r1, r4
    4f18:	0028      	movs	r0, r5
    4f1a:	f7ff ff5b 	bl	4dd4 <__sflush_r>
    4f1e:	e7ea      	b.n	4ef6 <_fflush_r+0xe>
    4f20:	4b05      	ldr	r3, [pc, #20]	; (4f38 <_fflush_r+0x50>)
    4f22:	429c      	cmp	r4, r3
    4f24:	d101      	bne.n	4f2a <_fflush_r+0x42>
    4f26:	68ac      	ldr	r4, [r5, #8]
    4f28:	e7f1      	b.n	4f0e <_fflush_r+0x26>
    4f2a:	4b04      	ldr	r3, [pc, #16]	; (4f3c <_fflush_r+0x54>)
    4f2c:	429c      	cmp	r4, r3
    4f2e:	d1ee      	bne.n	4f0e <_fflush_r+0x26>
    4f30:	68ec      	ldr	r4, [r5, #12]
    4f32:	e7ec      	b.n	4f0e <_fflush_r+0x26>
    4f34:	00007efc 	.word	0x00007efc
    4f38:	00007f1c 	.word	0x00007f1c
    4f3c:	00007edc 	.word	0x00007edc

00004f40 <_cleanup_r>:
    4f40:	b510      	push	{r4, lr}
    4f42:	4902      	ldr	r1, [pc, #8]	; (4f4c <_cleanup_r+0xc>)
    4f44:	f000 f8b2 	bl	50ac <_fwalk_reent>
    4f48:	bd10      	pop	{r4, pc}
    4f4a:	46c0      	nop			; (mov r8, r8)
    4f4c:	00004ee9 	.word	0x00004ee9

00004f50 <std.isra.0>:
    4f50:	2300      	movs	r3, #0
    4f52:	b510      	push	{r4, lr}
    4f54:	0004      	movs	r4, r0
    4f56:	6003      	str	r3, [r0, #0]
    4f58:	6043      	str	r3, [r0, #4]
    4f5a:	6083      	str	r3, [r0, #8]
    4f5c:	8181      	strh	r1, [r0, #12]
    4f5e:	6643      	str	r3, [r0, #100]	; 0x64
    4f60:	81c2      	strh	r2, [r0, #14]
    4f62:	6103      	str	r3, [r0, #16]
    4f64:	6143      	str	r3, [r0, #20]
    4f66:	6183      	str	r3, [r0, #24]
    4f68:	0019      	movs	r1, r3
    4f6a:	2208      	movs	r2, #8
    4f6c:	305c      	adds	r0, #92	; 0x5c
    4f6e:	f7ff fcd2 	bl	4916 <memset>
    4f72:	4b05      	ldr	r3, [pc, #20]	; (4f88 <std.isra.0+0x38>)
    4f74:	6224      	str	r4, [r4, #32]
    4f76:	6263      	str	r3, [r4, #36]	; 0x24
    4f78:	4b04      	ldr	r3, [pc, #16]	; (4f8c <std.isra.0+0x3c>)
    4f7a:	62a3      	str	r3, [r4, #40]	; 0x28
    4f7c:	4b04      	ldr	r3, [pc, #16]	; (4f90 <std.isra.0+0x40>)
    4f7e:	62e3      	str	r3, [r4, #44]	; 0x2c
    4f80:	4b04      	ldr	r3, [pc, #16]	; (4f94 <std.isra.0+0x44>)
    4f82:	6323      	str	r3, [r4, #48]	; 0x30
    4f84:	bd10      	pop	{r4, pc}
    4f86:	46c0      	nop			; (mov r8, r8)
    4f88:	000057d1 	.word	0x000057d1
    4f8c:	000057f9 	.word	0x000057f9
    4f90:	00005831 	.word	0x00005831
    4f94:	0000585d 	.word	0x0000585d

00004f98 <__sfmoreglue>:
    4f98:	b570      	push	{r4, r5, r6, lr}
    4f9a:	2568      	movs	r5, #104	; 0x68
    4f9c:	1e4a      	subs	r2, r1, #1
    4f9e:	4355      	muls	r5, r2
    4fa0:	000e      	movs	r6, r1
    4fa2:	0029      	movs	r1, r5
    4fa4:	3174      	adds	r1, #116	; 0x74
    4fa6:	f7ff fd09 	bl	49bc <_malloc_r>
    4faa:	1e04      	subs	r4, r0, #0
    4fac:	d008      	beq.n	4fc0 <__sfmoreglue+0x28>
    4fae:	2100      	movs	r1, #0
    4fb0:	002a      	movs	r2, r5
    4fb2:	6001      	str	r1, [r0, #0]
    4fb4:	6046      	str	r6, [r0, #4]
    4fb6:	300c      	adds	r0, #12
    4fb8:	60a0      	str	r0, [r4, #8]
    4fba:	3268      	adds	r2, #104	; 0x68
    4fbc:	f7ff fcab 	bl	4916 <memset>
    4fc0:	0020      	movs	r0, r4
    4fc2:	bd70      	pop	{r4, r5, r6, pc}

00004fc4 <__sinit>:
    4fc4:	6983      	ldr	r3, [r0, #24]
    4fc6:	b513      	push	{r0, r1, r4, lr}
    4fc8:	0004      	movs	r4, r0
    4fca:	2b00      	cmp	r3, #0
    4fcc:	d128      	bne.n	5020 <__sinit+0x5c>
    4fce:	6483      	str	r3, [r0, #72]	; 0x48
    4fd0:	64c3      	str	r3, [r0, #76]	; 0x4c
    4fd2:	6503      	str	r3, [r0, #80]	; 0x50
    4fd4:	4b13      	ldr	r3, [pc, #76]	; (5024 <__sinit+0x60>)
    4fd6:	4a14      	ldr	r2, [pc, #80]	; (5028 <__sinit+0x64>)
    4fd8:	681b      	ldr	r3, [r3, #0]
    4fda:	6282      	str	r2, [r0, #40]	; 0x28
    4fdc:	9301      	str	r3, [sp, #4]
    4fde:	4298      	cmp	r0, r3
    4fe0:	d101      	bne.n	4fe6 <__sinit+0x22>
    4fe2:	2301      	movs	r3, #1
    4fe4:	6183      	str	r3, [r0, #24]
    4fe6:	0020      	movs	r0, r4
    4fe8:	f000 f820 	bl	502c <__sfp>
    4fec:	6060      	str	r0, [r4, #4]
    4fee:	0020      	movs	r0, r4
    4ff0:	f000 f81c 	bl	502c <__sfp>
    4ff4:	60a0      	str	r0, [r4, #8]
    4ff6:	0020      	movs	r0, r4
    4ff8:	f000 f818 	bl	502c <__sfp>
    4ffc:	2200      	movs	r2, #0
    4ffe:	60e0      	str	r0, [r4, #12]
    5000:	2104      	movs	r1, #4
    5002:	6860      	ldr	r0, [r4, #4]
    5004:	f7ff ffa4 	bl	4f50 <std.isra.0>
    5008:	2201      	movs	r2, #1
    500a:	2109      	movs	r1, #9
    500c:	68a0      	ldr	r0, [r4, #8]
    500e:	f7ff ff9f 	bl	4f50 <std.isra.0>
    5012:	2202      	movs	r2, #2
    5014:	2112      	movs	r1, #18
    5016:	68e0      	ldr	r0, [r4, #12]
    5018:	f7ff ff9a 	bl	4f50 <std.isra.0>
    501c:	2301      	movs	r3, #1
    501e:	61a3      	str	r3, [r4, #24]
    5020:	bd13      	pop	{r0, r1, r4, pc}
    5022:	46c0      	nop			; (mov r8, r8)
    5024:	00007eb0 	.word	0x00007eb0
    5028:	00004f41 	.word	0x00004f41

0000502c <__sfp>:
    502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    502e:	4b1e      	ldr	r3, [pc, #120]	; (50a8 <__sfp+0x7c>)
    5030:	0007      	movs	r7, r0
    5032:	681e      	ldr	r6, [r3, #0]
    5034:	69b3      	ldr	r3, [r6, #24]
    5036:	2b00      	cmp	r3, #0
    5038:	d102      	bne.n	5040 <__sfp+0x14>
    503a:	0030      	movs	r0, r6
    503c:	f7ff ffc2 	bl	4fc4 <__sinit>
    5040:	3648      	adds	r6, #72	; 0x48
    5042:	68b4      	ldr	r4, [r6, #8]
    5044:	6873      	ldr	r3, [r6, #4]
    5046:	3b01      	subs	r3, #1
    5048:	d504      	bpl.n	5054 <__sfp+0x28>
    504a:	6833      	ldr	r3, [r6, #0]
    504c:	2b00      	cmp	r3, #0
    504e:	d007      	beq.n	5060 <__sfp+0x34>
    5050:	6836      	ldr	r6, [r6, #0]
    5052:	e7f6      	b.n	5042 <__sfp+0x16>
    5054:	220c      	movs	r2, #12
    5056:	5ea5      	ldrsh	r5, [r4, r2]
    5058:	2d00      	cmp	r5, #0
    505a:	d00d      	beq.n	5078 <__sfp+0x4c>
    505c:	3468      	adds	r4, #104	; 0x68
    505e:	e7f2      	b.n	5046 <__sfp+0x1a>
    5060:	2104      	movs	r1, #4
    5062:	0038      	movs	r0, r7
    5064:	f7ff ff98 	bl	4f98 <__sfmoreglue>
    5068:	6030      	str	r0, [r6, #0]
    506a:	2800      	cmp	r0, #0
    506c:	d1f0      	bne.n	5050 <__sfp+0x24>
    506e:	230c      	movs	r3, #12
    5070:	0004      	movs	r4, r0
    5072:	603b      	str	r3, [r7, #0]
    5074:	0020      	movs	r0, r4
    5076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5078:	2301      	movs	r3, #1
    507a:	0020      	movs	r0, r4
    507c:	425b      	negs	r3, r3
    507e:	81e3      	strh	r3, [r4, #14]
    5080:	3302      	adds	r3, #2
    5082:	81a3      	strh	r3, [r4, #12]
    5084:	6665      	str	r5, [r4, #100]	; 0x64
    5086:	6025      	str	r5, [r4, #0]
    5088:	60a5      	str	r5, [r4, #8]
    508a:	6065      	str	r5, [r4, #4]
    508c:	6125      	str	r5, [r4, #16]
    508e:	6165      	str	r5, [r4, #20]
    5090:	61a5      	str	r5, [r4, #24]
    5092:	2208      	movs	r2, #8
    5094:	0029      	movs	r1, r5
    5096:	305c      	adds	r0, #92	; 0x5c
    5098:	f7ff fc3d 	bl	4916 <memset>
    509c:	6365      	str	r5, [r4, #52]	; 0x34
    509e:	63a5      	str	r5, [r4, #56]	; 0x38
    50a0:	64a5      	str	r5, [r4, #72]	; 0x48
    50a2:	64e5      	str	r5, [r4, #76]	; 0x4c
    50a4:	e7e6      	b.n	5074 <__sfp+0x48>
    50a6:	46c0      	nop			; (mov r8, r8)
    50a8:	00007eb0 	.word	0x00007eb0

000050ac <_fwalk_reent>:
    50ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    50ae:	0004      	movs	r4, r0
    50b0:	0007      	movs	r7, r0
    50b2:	2600      	movs	r6, #0
    50b4:	9101      	str	r1, [sp, #4]
    50b6:	3448      	adds	r4, #72	; 0x48
    50b8:	2c00      	cmp	r4, #0
    50ba:	d101      	bne.n	50c0 <_fwalk_reent+0x14>
    50bc:	0030      	movs	r0, r6
    50be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    50c0:	6863      	ldr	r3, [r4, #4]
    50c2:	68a5      	ldr	r5, [r4, #8]
    50c4:	9300      	str	r3, [sp, #0]
    50c6:	9b00      	ldr	r3, [sp, #0]
    50c8:	3b01      	subs	r3, #1
    50ca:	9300      	str	r3, [sp, #0]
    50cc:	d501      	bpl.n	50d2 <_fwalk_reent+0x26>
    50ce:	6824      	ldr	r4, [r4, #0]
    50d0:	e7f2      	b.n	50b8 <_fwalk_reent+0xc>
    50d2:	89ab      	ldrh	r3, [r5, #12]
    50d4:	2b01      	cmp	r3, #1
    50d6:	d908      	bls.n	50ea <_fwalk_reent+0x3e>
    50d8:	220e      	movs	r2, #14
    50da:	5eab      	ldrsh	r3, [r5, r2]
    50dc:	3301      	adds	r3, #1
    50de:	d004      	beq.n	50ea <_fwalk_reent+0x3e>
    50e0:	0029      	movs	r1, r5
    50e2:	0038      	movs	r0, r7
    50e4:	9b01      	ldr	r3, [sp, #4]
    50e6:	4798      	blx	r3
    50e8:	4306      	orrs	r6, r0
    50ea:	3568      	adds	r5, #104	; 0x68
    50ec:	e7eb      	b.n	50c6 <_fwalk_reent+0x1a>
	...

000050f0 <__swhatbuf_r>:
    50f0:	b570      	push	{r4, r5, r6, lr}
    50f2:	000e      	movs	r6, r1
    50f4:	001d      	movs	r5, r3
    50f6:	230e      	movs	r3, #14
    50f8:	5ec9      	ldrsh	r1, [r1, r3]
    50fa:	b090      	sub	sp, #64	; 0x40
    50fc:	0014      	movs	r4, r2
    50fe:	2900      	cmp	r1, #0
    5100:	da07      	bge.n	5112 <__swhatbuf_r+0x22>
    5102:	2300      	movs	r3, #0
    5104:	602b      	str	r3, [r5, #0]
    5106:	89b3      	ldrh	r3, [r6, #12]
    5108:	061b      	lsls	r3, r3, #24
    510a:	d411      	bmi.n	5130 <__swhatbuf_r+0x40>
    510c:	2380      	movs	r3, #128	; 0x80
    510e:	00db      	lsls	r3, r3, #3
    5110:	e00f      	b.n	5132 <__swhatbuf_r+0x42>
    5112:	aa01      	add	r2, sp, #4
    5114:	f000 fc9a 	bl	5a4c <_fstat_r>
    5118:	2800      	cmp	r0, #0
    511a:	dbf2      	blt.n	5102 <__swhatbuf_r+0x12>
    511c:	22f0      	movs	r2, #240	; 0xf0
    511e:	9b02      	ldr	r3, [sp, #8]
    5120:	0212      	lsls	r2, r2, #8
    5122:	4013      	ands	r3, r2
    5124:	4a05      	ldr	r2, [pc, #20]	; (513c <__swhatbuf_r+0x4c>)
    5126:	189b      	adds	r3, r3, r2
    5128:	425a      	negs	r2, r3
    512a:	4153      	adcs	r3, r2
    512c:	602b      	str	r3, [r5, #0]
    512e:	e7ed      	b.n	510c <__swhatbuf_r+0x1c>
    5130:	2340      	movs	r3, #64	; 0x40
    5132:	2000      	movs	r0, #0
    5134:	6023      	str	r3, [r4, #0]
    5136:	b010      	add	sp, #64	; 0x40
    5138:	bd70      	pop	{r4, r5, r6, pc}
    513a:	46c0      	nop			; (mov r8, r8)
    513c:	ffffe000 	.word	0xffffe000

00005140 <__smakebuf_r>:
    5140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5142:	2602      	movs	r6, #2
    5144:	898b      	ldrh	r3, [r1, #12]
    5146:	0005      	movs	r5, r0
    5148:	000c      	movs	r4, r1
    514a:	4233      	tst	r3, r6
    514c:	d006      	beq.n	515c <__smakebuf_r+0x1c>
    514e:	0023      	movs	r3, r4
    5150:	3347      	adds	r3, #71	; 0x47
    5152:	6023      	str	r3, [r4, #0]
    5154:	6123      	str	r3, [r4, #16]
    5156:	2301      	movs	r3, #1
    5158:	6163      	str	r3, [r4, #20]
    515a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    515c:	ab01      	add	r3, sp, #4
    515e:	466a      	mov	r2, sp
    5160:	f7ff ffc6 	bl	50f0 <__swhatbuf_r>
    5164:	9900      	ldr	r1, [sp, #0]
    5166:	0007      	movs	r7, r0
    5168:	0028      	movs	r0, r5
    516a:	f7ff fc27 	bl	49bc <_malloc_r>
    516e:	2800      	cmp	r0, #0
    5170:	d108      	bne.n	5184 <__smakebuf_r+0x44>
    5172:	220c      	movs	r2, #12
    5174:	5ea3      	ldrsh	r3, [r4, r2]
    5176:	059a      	lsls	r2, r3, #22
    5178:	d4ef      	bmi.n	515a <__smakebuf_r+0x1a>
    517a:	2203      	movs	r2, #3
    517c:	4393      	bics	r3, r2
    517e:	431e      	orrs	r6, r3
    5180:	81a6      	strh	r6, [r4, #12]
    5182:	e7e4      	b.n	514e <__smakebuf_r+0xe>
    5184:	4b0f      	ldr	r3, [pc, #60]	; (51c4 <__smakebuf_r+0x84>)
    5186:	62ab      	str	r3, [r5, #40]	; 0x28
    5188:	2380      	movs	r3, #128	; 0x80
    518a:	89a2      	ldrh	r2, [r4, #12]
    518c:	6020      	str	r0, [r4, #0]
    518e:	4313      	orrs	r3, r2
    5190:	81a3      	strh	r3, [r4, #12]
    5192:	9b00      	ldr	r3, [sp, #0]
    5194:	6120      	str	r0, [r4, #16]
    5196:	6163      	str	r3, [r4, #20]
    5198:	9b01      	ldr	r3, [sp, #4]
    519a:	2b00      	cmp	r3, #0
    519c:	d00d      	beq.n	51ba <__smakebuf_r+0x7a>
    519e:	230e      	movs	r3, #14
    51a0:	5ee1      	ldrsh	r1, [r4, r3]
    51a2:	0028      	movs	r0, r5
    51a4:	f000 fc64 	bl	5a70 <_isatty_r>
    51a8:	2800      	cmp	r0, #0
    51aa:	d006      	beq.n	51ba <__smakebuf_r+0x7a>
    51ac:	2203      	movs	r2, #3
    51ae:	89a3      	ldrh	r3, [r4, #12]
    51b0:	4393      	bics	r3, r2
    51b2:	001a      	movs	r2, r3
    51b4:	2301      	movs	r3, #1
    51b6:	4313      	orrs	r3, r2
    51b8:	81a3      	strh	r3, [r4, #12]
    51ba:	89a0      	ldrh	r0, [r4, #12]
    51bc:	4338      	orrs	r0, r7
    51be:	81a0      	strh	r0, [r4, #12]
    51c0:	e7cb      	b.n	515a <__smakebuf_r+0x1a>
    51c2:	46c0      	nop			; (mov r8, r8)
    51c4:	00004f41 	.word	0x00004f41

000051c8 <__malloc_lock>:
    51c8:	4770      	bx	lr

000051ca <__malloc_unlock>:
    51ca:	4770      	bx	lr

000051cc <__sfputc_r>:
    51cc:	6893      	ldr	r3, [r2, #8]
    51ce:	b510      	push	{r4, lr}
    51d0:	3b01      	subs	r3, #1
    51d2:	6093      	str	r3, [r2, #8]
    51d4:	2b00      	cmp	r3, #0
    51d6:	da05      	bge.n	51e4 <__sfputc_r+0x18>
    51d8:	6994      	ldr	r4, [r2, #24]
    51da:	42a3      	cmp	r3, r4
    51dc:	db08      	blt.n	51f0 <__sfputc_r+0x24>
    51de:	b2cb      	uxtb	r3, r1
    51e0:	2b0a      	cmp	r3, #10
    51e2:	d005      	beq.n	51f0 <__sfputc_r+0x24>
    51e4:	6813      	ldr	r3, [r2, #0]
    51e6:	1c58      	adds	r0, r3, #1
    51e8:	6010      	str	r0, [r2, #0]
    51ea:	7019      	strb	r1, [r3, #0]
    51ec:	b2c8      	uxtb	r0, r1
    51ee:	bd10      	pop	{r4, pc}
    51f0:	f000 fb3a 	bl	5868 <__swbuf_r>
    51f4:	e7fb      	b.n	51ee <__sfputc_r+0x22>

000051f6 <__sfputs_r>:
    51f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51f8:	0006      	movs	r6, r0
    51fa:	000f      	movs	r7, r1
    51fc:	0014      	movs	r4, r2
    51fe:	18d5      	adds	r5, r2, r3
    5200:	42ac      	cmp	r4, r5
    5202:	d101      	bne.n	5208 <__sfputs_r+0x12>
    5204:	2000      	movs	r0, #0
    5206:	e007      	b.n	5218 <__sfputs_r+0x22>
    5208:	7821      	ldrb	r1, [r4, #0]
    520a:	003a      	movs	r2, r7
    520c:	0030      	movs	r0, r6
    520e:	f7ff ffdd 	bl	51cc <__sfputc_r>
    5212:	3401      	adds	r4, #1
    5214:	1c43      	adds	r3, r0, #1
    5216:	d1f3      	bne.n	5200 <__sfputs_r+0xa>
    5218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000521c <_vfiprintf_r>:
    521c:	b5f0      	push	{r4, r5, r6, r7, lr}
    521e:	b09f      	sub	sp, #124	; 0x7c
    5220:	0006      	movs	r6, r0
    5222:	000f      	movs	r7, r1
    5224:	0014      	movs	r4, r2
    5226:	9305      	str	r3, [sp, #20]
    5228:	2800      	cmp	r0, #0
    522a:	d004      	beq.n	5236 <_vfiprintf_r+0x1a>
    522c:	6983      	ldr	r3, [r0, #24]
    522e:	2b00      	cmp	r3, #0
    5230:	d101      	bne.n	5236 <_vfiprintf_r+0x1a>
    5232:	f7ff fec7 	bl	4fc4 <__sinit>
    5236:	4b7f      	ldr	r3, [pc, #508]	; (5434 <_vfiprintf_r+0x218>)
    5238:	429f      	cmp	r7, r3
    523a:	d15c      	bne.n	52f6 <_vfiprintf_r+0xda>
    523c:	6877      	ldr	r7, [r6, #4]
    523e:	89bb      	ldrh	r3, [r7, #12]
    5240:	071b      	lsls	r3, r3, #28
    5242:	d562      	bpl.n	530a <_vfiprintf_r+0xee>
    5244:	693b      	ldr	r3, [r7, #16]
    5246:	2b00      	cmp	r3, #0
    5248:	d05f      	beq.n	530a <_vfiprintf_r+0xee>
    524a:	2300      	movs	r3, #0
    524c:	ad06      	add	r5, sp, #24
    524e:	616b      	str	r3, [r5, #20]
    5250:	3320      	adds	r3, #32
    5252:	766b      	strb	r3, [r5, #25]
    5254:	3310      	adds	r3, #16
    5256:	76ab      	strb	r3, [r5, #26]
    5258:	9402      	str	r4, [sp, #8]
    525a:	9c02      	ldr	r4, [sp, #8]
    525c:	7823      	ldrb	r3, [r4, #0]
    525e:	2b00      	cmp	r3, #0
    5260:	d15d      	bne.n	531e <_vfiprintf_r+0x102>
    5262:	9b02      	ldr	r3, [sp, #8]
    5264:	1ae3      	subs	r3, r4, r3
    5266:	9304      	str	r3, [sp, #16]
    5268:	d00d      	beq.n	5286 <_vfiprintf_r+0x6a>
    526a:	9b04      	ldr	r3, [sp, #16]
    526c:	9a02      	ldr	r2, [sp, #8]
    526e:	0039      	movs	r1, r7
    5270:	0030      	movs	r0, r6
    5272:	f7ff ffc0 	bl	51f6 <__sfputs_r>
    5276:	1c43      	adds	r3, r0, #1
    5278:	d100      	bne.n	527c <_vfiprintf_r+0x60>
    527a:	e0cc      	b.n	5416 <_vfiprintf_r+0x1fa>
    527c:	696a      	ldr	r2, [r5, #20]
    527e:	9b04      	ldr	r3, [sp, #16]
    5280:	4694      	mov	ip, r2
    5282:	4463      	add	r3, ip
    5284:	616b      	str	r3, [r5, #20]
    5286:	7823      	ldrb	r3, [r4, #0]
    5288:	2b00      	cmp	r3, #0
    528a:	d100      	bne.n	528e <_vfiprintf_r+0x72>
    528c:	e0c3      	b.n	5416 <_vfiprintf_r+0x1fa>
    528e:	2201      	movs	r2, #1
    5290:	2300      	movs	r3, #0
    5292:	4252      	negs	r2, r2
    5294:	606a      	str	r2, [r5, #4]
    5296:	a902      	add	r1, sp, #8
    5298:	3254      	adds	r2, #84	; 0x54
    529a:	1852      	adds	r2, r2, r1
    529c:	3401      	adds	r4, #1
    529e:	602b      	str	r3, [r5, #0]
    52a0:	60eb      	str	r3, [r5, #12]
    52a2:	60ab      	str	r3, [r5, #8]
    52a4:	7013      	strb	r3, [r2, #0]
    52a6:	65ab      	str	r3, [r5, #88]	; 0x58
    52a8:	7821      	ldrb	r1, [r4, #0]
    52aa:	2205      	movs	r2, #5
    52ac:	4862      	ldr	r0, [pc, #392]	; (5438 <_vfiprintf_r+0x21c>)
    52ae:	f000 fc05 	bl	5abc <memchr>
    52b2:	1c63      	adds	r3, r4, #1
    52b4:	469c      	mov	ip, r3
    52b6:	2800      	cmp	r0, #0
    52b8:	d135      	bne.n	5326 <_vfiprintf_r+0x10a>
    52ba:	6829      	ldr	r1, [r5, #0]
    52bc:	06cb      	lsls	r3, r1, #27
    52be:	d504      	bpl.n	52ca <_vfiprintf_r+0xae>
    52c0:	2353      	movs	r3, #83	; 0x53
    52c2:	aa02      	add	r2, sp, #8
    52c4:	3020      	adds	r0, #32
    52c6:	189b      	adds	r3, r3, r2
    52c8:	7018      	strb	r0, [r3, #0]
    52ca:	070b      	lsls	r3, r1, #28
    52cc:	d504      	bpl.n	52d8 <_vfiprintf_r+0xbc>
    52ce:	2353      	movs	r3, #83	; 0x53
    52d0:	202b      	movs	r0, #43	; 0x2b
    52d2:	aa02      	add	r2, sp, #8
    52d4:	189b      	adds	r3, r3, r2
    52d6:	7018      	strb	r0, [r3, #0]
    52d8:	7823      	ldrb	r3, [r4, #0]
    52da:	2b2a      	cmp	r3, #42	; 0x2a
    52dc:	d02c      	beq.n	5338 <_vfiprintf_r+0x11c>
    52de:	2000      	movs	r0, #0
    52e0:	210a      	movs	r1, #10
    52e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    52e4:	7822      	ldrb	r2, [r4, #0]
    52e6:	3a30      	subs	r2, #48	; 0x30
    52e8:	2a09      	cmp	r2, #9
    52ea:	d800      	bhi.n	52ee <_vfiprintf_r+0xd2>
    52ec:	e06b      	b.n	53c6 <_vfiprintf_r+0x1aa>
    52ee:	2800      	cmp	r0, #0
    52f0:	d02a      	beq.n	5348 <_vfiprintf_r+0x12c>
    52f2:	9309      	str	r3, [sp, #36]	; 0x24
    52f4:	e028      	b.n	5348 <_vfiprintf_r+0x12c>
    52f6:	4b51      	ldr	r3, [pc, #324]	; (543c <_vfiprintf_r+0x220>)
    52f8:	429f      	cmp	r7, r3
    52fa:	d101      	bne.n	5300 <_vfiprintf_r+0xe4>
    52fc:	68b7      	ldr	r7, [r6, #8]
    52fe:	e79e      	b.n	523e <_vfiprintf_r+0x22>
    5300:	4b4f      	ldr	r3, [pc, #316]	; (5440 <_vfiprintf_r+0x224>)
    5302:	429f      	cmp	r7, r3
    5304:	d19b      	bne.n	523e <_vfiprintf_r+0x22>
    5306:	68f7      	ldr	r7, [r6, #12]
    5308:	e799      	b.n	523e <_vfiprintf_r+0x22>
    530a:	0039      	movs	r1, r7
    530c:	0030      	movs	r0, r6
    530e:	f000 fb15 	bl	593c <__swsetup_r>
    5312:	2800      	cmp	r0, #0
    5314:	d099      	beq.n	524a <_vfiprintf_r+0x2e>
    5316:	2001      	movs	r0, #1
    5318:	4240      	negs	r0, r0
    531a:	b01f      	add	sp, #124	; 0x7c
    531c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    531e:	2b25      	cmp	r3, #37	; 0x25
    5320:	d09f      	beq.n	5262 <_vfiprintf_r+0x46>
    5322:	3401      	adds	r4, #1
    5324:	e79a      	b.n	525c <_vfiprintf_r+0x40>
    5326:	4b44      	ldr	r3, [pc, #272]	; (5438 <_vfiprintf_r+0x21c>)
    5328:	6829      	ldr	r1, [r5, #0]
    532a:	1ac0      	subs	r0, r0, r3
    532c:	2301      	movs	r3, #1
    532e:	4083      	lsls	r3, r0
    5330:	430b      	orrs	r3, r1
    5332:	602b      	str	r3, [r5, #0]
    5334:	4664      	mov	r4, ip
    5336:	e7b7      	b.n	52a8 <_vfiprintf_r+0x8c>
    5338:	9b05      	ldr	r3, [sp, #20]
    533a:	1d18      	adds	r0, r3, #4
    533c:	681b      	ldr	r3, [r3, #0]
    533e:	9005      	str	r0, [sp, #20]
    5340:	2b00      	cmp	r3, #0
    5342:	db3a      	blt.n	53ba <_vfiprintf_r+0x19e>
    5344:	9309      	str	r3, [sp, #36]	; 0x24
    5346:	4664      	mov	r4, ip
    5348:	7823      	ldrb	r3, [r4, #0]
    534a:	2b2e      	cmp	r3, #46	; 0x2e
    534c:	d10b      	bne.n	5366 <_vfiprintf_r+0x14a>
    534e:	7863      	ldrb	r3, [r4, #1]
    5350:	1c62      	adds	r2, r4, #1
    5352:	2b2a      	cmp	r3, #42	; 0x2a
    5354:	d13f      	bne.n	53d6 <_vfiprintf_r+0x1ba>
    5356:	9b05      	ldr	r3, [sp, #20]
    5358:	3402      	adds	r4, #2
    535a:	1d1a      	adds	r2, r3, #4
    535c:	681b      	ldr	r3, [r3, #0]
    535e:	9205      	str	r2, [sp, #20]
    5360:	2b00      	cmp	r3, #0
    5362:	db35      	blt.n	53d0 <_vfiprintf_r+0x1b4>
    5364:	9307      	str	r3, [sp, #28]
    5366:	7821      	ldrb	r1, [r4, #0]
    5368:	2203      	movs	r2, #3
    536a:	4836      	ldr	r0, [pc, #216]	; (5444 <_vfiprintf_r+0x228>)
    536c:	f000 fba6 	bl	5abc <memchr>
    5370:	2800      	cmp	r0, #0
    5372:	d007      	beq.n	5384 <_vfiprintf_r+0x168>
    5374:	4b33      	ldr	r3, [pc, #204]	; (5444 <_vfiprintf_r+0x228>)
    5376:	682a      	ldr	r2, [r5, #0]
    5378:	1ac0      	subs	r0, r0, r3
    537a:	2340      	movs	r3, #64	; 0x40
    537c:	4083      	lsls	r3, r0
    537e:	4313      	orrs	r3, r2
    5380:	602b      	str	r3, [r5, #0]
    5382:	3401      	adds	r4, #1
    5384:	7821      	ldrb	r1, [r4, #0]
    5386:	1c63      	adds	r3, r4, #1
    5388:	2206      	movs	r2, #6
    538a:	482f      	ldr	r0, [pc, #188]	; (5448 <_vfiprintf_r+0x22c>)
    538c:	9302      	str	r3, [sp, #8]
    538e:	7629      	strb	r1, [r5, #24]
    5390:	f000 fb94 	bl	5abc <memchr>
    5394:	2800      	cmp	r0, #0
    5396:	d044      	beq.n	5422 <_vfiprintf_r+0x206>
    5398:	4b2c      	ldr	r3, [pc, #176]	; (544c <_vfiprintf_r+0x230>)
    539a:	2b00      	cmp	r3, #0
    539c:	d12f      	bne.n	53fe <_vfiprintf_r+0x1e2>
    539e:	6829      	ldr	r1, [r5, #0]
    53a0:	9b05      	ldr	r3, [sp, #20]
    53a2:	2207      	movs	r2, #7
    53a4:	05c9      	lsls	r1, r1, #23
    53a6:	d528      	bpl.n	53fa <_vfiprintf_r+0x1de>
    53a8:	189b      	adds	r3, r3, r2
    53aa:	4393      	bics	r3, r2
    53ac:	3308      	adds	r3, #8
    53ae:	9305      	str	r3, [sp, #20]
    53b0:	696b      	ldr	r3, [r5, #20]
    53b2:	9a03      	ldr	r2, [sp, #12]
    53b4:	189b      	adds	r3, r3, r2
    53b6:	616b      	str	r3, [r5, #20]
    53b8:	e74f      	b.n	525a <_vfiprintf_r+0x3e>
    53ba:	425b      	negs	r3, r3
    53bc:	60eb      	str	r3, [r5, #12]
    53be:	2302      	movs	r3, #2
    53c0:	430b      	orrs	r3, r1
    53c2:	602b      	str	r3, [r5, #0]
    53c4:	e7bf      	b.n	5346 <_vfiprintf_r+0x12a>
    53c6:	434b      	muls	r3, r1
    53c8:	3401      	adds	r4, #1
    53ca:	189b      	adds	r3, r3, r2
    53cc:	2001      	movs	r0, #1
    53ce:	e789      	b.n	52e4 <_vfiprintf_r+0xc8>
    53d0:	2301      	movs	r3, #1
    53d2:	425b      	negs	r3, r3
    53d4:	e7c6      	b.n	5364 <_vfiprintf_r+0x148>
    53d6:	2300      	movs	r3, #0
    53d8:	0014      	movs	r4, r2
    53da:	200a      	movs	r0, #10
    53dc:	001a      	movs	r2, r3
    53de:	606b      	str	r3, [r5, #4]
    53e0:	7821      	ldrb	r1, [r4, #0]
    53e2:	3930      	subs	r1, #48	; 0x30
    53e4:	2909      	cmp	r1, #9
    53e6:	d903      	bls.n	53f0 <_vfiprintf_r+0x1d4>
    53e8:	2b00      	cmp	r3, #0
    53ea:	d0bc      	beq.n	5366 <_vfiprintf_r+0x14a>
    53ec:	9207      	str	r2, [sp, #28]
    53ee:	e7ba      	b.n	5366 <_vfiprintf_r+0x14a>
    53f0:	4342      	muls	r2, r0
    53f2:	3401      	adds	r4, #1
    53f4:	1852      	adds	r2, r2, r1
    53f6:	2301      	movs	r3, #1
    53f8:	e7f2      	b.n	53e0 <_vfiprintf_r+0x1c4>
    53fa:	3307      	adds	r3, #7
    53fc:	e7d5      	b.n	53aa <_vfiprintf_r+0x18e>
    53fe:	ab05      	add	r3, sp, #20
    5400:	9300      	str	r3, [sp, #0]
    5402:	003a      	movs	r2, r7
    5404:	4b12      	ldr	r3, [pc, #72]	; (5450 <_vfiprintf_r+0x234>)
    5406:	0029      	movs	r1, r5
    5408:	0030      	movs	r0, r6
    540a:	e000      	b.n	540e <_vfiprintf_r+0x1f2>
    540c:	bf00      	nop
    540e:	9003      	str	r0, [sp, #12]
    5410:	9b03      	ldr	r3, [sp, #12]
    5412:	3301      	adds	r3, #1
    5414:	d1cc      	bne.n	53b0 <_vfiprintf_r+0x194>
    5416:	89bb      	ldrh	r3, [r7, #12]
    5418:	065b      	lsls	r3, r3, #25
    541a:	d500      	bpl.n	541e <_vfiprintf_r+0x202>
    541c:	e77b      	b.n	5316 <_vfiprintf_r+0xfa>
    541e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5420:	e77b      	b.n	531a <_vfiprintf_r+0xfe>
    5422:	ab05      	add	r3, sp, #20
    5424:	9300      	str	r3, [sp, #0]
    5426:	003a      	movs	r2, r7
    5428:	4b09      	ldr	r3, [pc, #36]	; (5450 <_vfiprintf_r+0x234>)
    542a:	0029      	movs	r1, r5
    542c:	0030      	movs	r0, r6
    542e:	f000 f87f 	bl	5530 <_printf_i>
    5432:	e7ec      	b.n	540e <_vfiprintf_r+0x1f2>
    5434:	00007efc 	.word	0x00007efc
    5438:	00007f3c 	.word	0x00007f3c
    543c:	00007f1c 	.word	0x00007f1c
    5440:	00007edc 	.word	0x00007edc
    5444:	00007f42 	.word	0x00007f42
    5448:	00007f46 	.word	0x00007f46
    544c:	00000000 	.word	0x00000000
    5450:	000051f7 	.word	0x000051f7

00005454 <_printf_common>:
    5454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5456:	0015      	movs	r5, r2
    5458:	9301      	str	r3, [sp, #4]
    545a:	688a      	ldr	r2, [r1, #8]
    545c:	690b      	ldr	r3, [r1, #16]
    545e:	9000      	str	r0, [sp, #0]
    5460:	000c      	movs	r4, r1
    5462:	4293      	cmp	r3, r2
    5464:	da00      	bge.n	5468 <_printf_common+0x14>
    5466:	0013      	movs	r3, r2
    5468:	0022      	movs	r2, r4
    546a:	602b      	str	r3, [r5, #0]
    546c:	3243      	adds	r2, #67	; 0x43
    546e:	7812      	ldrb	r2, [r2, #0]
    5470:	2a00      	cmp	r2, #0
    5472:	d001      	beq.n	5478 <_printf_common+0x24>
    5474:	3301      	adds	r3, #1
    5476:	602b      	str	r3, [r5, #0]
    5478:	6823      	ldr	r3, [r4, #0]
    547a:	069b      	lsls	r3, r3, #26
    547c:	d502      	bpl.n	5484 <_printf_common+0x30>
    547e:	682b      	ldr	r3, [r5, #0]
    5480:	3302      	adds	r3, #2
    5482:	602b      	str	r3, [r5, #0]
    5484:	2706      	movs	r7, #6
    5486:	6823      	ldr	r3, [r4, #0]
    5488:	401f      	ands	r7, r3
    548a:	d027      	beq.n	54dc <_printf_common+0x88>
    548c:	0023      	movs	r3, r4
    548e:	3343      	adds	r3, #67	; 0x43
    5490:	781b      	ldrb	r3, [r3, #0]
    5492:	1e5a      	subs	r2, r3, #1
    5494:	4193      	sbcs	r3, r2
    5496:	6822      	ldr	r2, [r4, #0]
    5498:	0692      	lsls	r2, r2, #26
    549a:	d430      	bmi.n	54fe <_printf_common+0xaa>
    549c:	0022      	movs	r2, r4
    549e:	9901      	ldr	r1, [sp, #4]
    54a0:	3243      	adds	r2, #67	; 0x43
    54a2:	9800      	ldr	r0, [sp, #0]
    54a4:	9e08      	ldr	r6, [sp, #32]
    54a6:	47b0      	blx	r6
    54a8:	1c43      	adds	r3, r0, #1
    54aa:	d025      	beq.n	54f8 <_printf_common+0xa4>
    54ac:	2306      	movs	r3, #6
    54ae:	6820      	ldr	r0, [r4, #0]
    54b0:	682a      	ldr	r2, [r5, #0]
    54b2:	68e1      	ldr	r1, [r4, #12]
    54b4:	4003      	ands	r3, r0
    54b6:	2500      	movs	r5, #0
    54b8:	2b04      	cmp	r3, #4
    54ba:	d103      	bne.n	54c4 <_printf_common+0x70>
    54bc:	1a8d      	subs	r5, r1, r2
    54be:	43eb      	mvns	r3, r5
    54c0:	17db      	asrs	r3, r3, #31
    54c2:	401d      	ands	r5, r3
    54c4:	68a3      	ldr	r3, [r4, #8]
    54c6:	6922      	ldr	r2, [r4, #16]
    54c8:	4293      	cmp	r3, r2
    54ca:	dd01      	ble.n	54d0 <_printf_common+0x7c>
    54cc:	1a9b      	subs	r3, r3, r2
    54ce:	18ed      	adds	r5, r5, r3
    54d0:	2700      	movs	r7, #0
    54d2:	42bd      	cmp	r5, r7
    54d4:	d120      	bne.n	5518 <_printf_common+0xc4>
    54d6:	2000      	movs	r0, #0
    54d8:	e010      	b.n	54fc <_printf_common+0xa8>
    54da:	3701      	adds	r7, #1
    54dc:	68e3      	ldr	r3, [r4, #12]
    54de:	682a      	ldr	r2, [r5, #0]
    54e0:	1a9b      	subs	r3, r3, r2
    54e2:	429f      	cmp	r7, r3
    54e4:	dad2      	bge.n	548c <_printf_common+0x38>
    54e6:	0022      	movs	r2, r4
    54e8:	2301      	movs	r3, #1
    54ea:	3219      	adds	r2, #25
    54ec:	9901      	ldr	r1, [sp, #4]
    54ee:	9800      	ldr	r0, [sp, #0]
    54f0:	9e08      	ldr	r6, [sp, #32]
    54f2:	47b0      	blx	r6
    54f4:	1c43      	adds	r3, r0, #1
    54f6:	d1f0      	bne.n	54da <_printf_common+0x86>
    54f8:	2001      	movs	r0, #1
    54fa:	4240      	negs	r0, r0
    54fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    54fe:	2030      	movs	r0, #48	; 0x30
    5500:	18e1      	adds	r1, r4, r3
    5502:	3143      	adds	r1, #67	; 0x43
    5504:	7008      	strb	r0, [r1, #0]
    5506:	0021      	movs	r1, r4
    5508:	1c5a      	adds	r2, r3, #1
    550a:	3145      	adds	r1, #69	; 0x45
    550c:	7809      	ldrb	r1, [r1, #0]
    550e:	18a2      	adds	r2, r4, r2
    5510:	3243      	adds	r2, #67	; 0x43
    5512:	3302      	adds	r3, #2
    5514:	7011      	strb	r1, [r2, #0]
    5516:	e7c1      	b.n	549c <_printf_common+0x48>
    5518:	0022      	movs	r2, r4
    551a:	2301      	movs	r3, #1
    551c:	321a      	adds	r2, #26
    551e:	9901      	ldr	r1, [sp, #4]
    5520:	9800      	ldr	r0, [sp, #0]
    5522:	9e08      	ldr	r6, [sp, #32]
    5524:	47b0      	blx	r6
    5526:	1c43      	adds	r3, r0, #1
    5528:	d0e6      	beq.n	54f8 <_printf_common+0xa4>
    552a:	3701      	adds	r7, #1
    552c:	e7d1      	b.n	54d2 <_printf_common+0x7e>
	...

00005530 <_printf_i>:
    5530:	b5f0      	push	{r4, r5, r6, r7, lr}
    5532:	b08b      	sub	sp, #44	; 0x2c
    5534:	9206      	str	r2, [sp, #24]
    5536:	000a      	movs	r2, r1
    5538:	3243      	adds	r2, #67	; 0x43
    553a:	9307      	str	r3, [sp, #28]
    553c:	9005      	str	r0, [sp, #20]
    553e:	9204      	str	r2, [sp, #16]
    5540:	7e0a      	ldrb	r2, [r1, #24]
    5542:	000c      	movs	r4, r1
    5544:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5546:	2a6e      	cmp	r2, #110	; 0x6e
    5548:	d100      	bne.n	554c <_printf_i+0x1c>
    554a:	e08f      	b.n	566c <_printf_i+0x13c>
    554c:	d817      	bhi.n	557e <_printf_i+0x4e>
    554e:	2a63      	cmp	r2, #99	; 0x63
    5550:	d02c      	beq.n	55ac <_printf_i+0x7c>
    5552:	d808      	bhi.n	5566 <_printf_i+0x36>
    5554:	2a00      	cmp	r2, #0
    5556:	d100      	bne.n	555a <_printf_i+0x2a>
    5558:	e099      	b.n	568e <_printf_i+0x15e>
    555a:	2a58      	cmp	r2, #88	; 0x58
    555c:	d054      	beq.n	5608 <_printf_i+0xd8>
    555e:	0026      	movs	r6, r4
    5560:	3642      	adds	r6, #66	; 0x42
    5562:	7032      	strb	r2, [r6, #0]
    5564:	e029      	b.n	55ba <_printf_i+0x8a>
    5566:	2a64      	cmp	r2, #100	; 0x64
    5568:	d001      	beq.n	556e <_printf_i+0x3e>
    556a:	2a69      	cmp	r2, #105	; 0x69
    556c:	d1f7      	bne.n	555e <_printf_i+0x2e>
    556e:	6821      	ldr	r1, [r4, #0]
    5570:	681a      	ldr	r2, [r3, #0]
    5572:	0608      	lsls	r0, r1, #24
    5574:	d523      	bpl.n	55be <_printf_i+0x8e>
    5576:	1d11      	adds	r1, r2, #4
    5578:	6019      	str	r1, [r3, #0]
    557a:	6815      	ldr	r5, [r2, #0]
    557c:	e025      	b.n	55ca <_printf_i+0x9a>
    557e:	2a73      	cmp	r2, #115	; 0x73
    5580:	d100      	bne.n	5584 <_printf_i+0x54>
    5582:	e088      	b.n	5696 <_printf_i+0x166>
    5584:	d808      	bhi.n	5598 <_printf_i+0x68>
    5586:	2a6f      	cmp	r2, #111	; 0x6f
    5588:	d029      	beq.n	55de <_printf_i+0xae>
    558a:	2a70      	cmp	r2, #112	; 0x70
    558c:	d1e7      	bne.n	555e <_printf_i+0x2e>
    558e:	2220      	movs	r2, #32
    5590:	6809      	ldr	r1, [r1, #0]
    5592:	430a      	orrs	r2, r1
    5594:	6022      	str	r2, [r4, #0]
    5596:	e003      	b.n	55a0 <_printf_i+0x70>
    5598:	2a75      	cmp	r2, #117	; 0x75
    559a:	d020      	beq.n	55de <_printf_i+0xae>
    559c:	2a78      	cmp	r2, #120	; 0x78
    559e:	d1de      	bne.n	555e <_printf_i+0x2e>
    55a0:	0022      	movs	r2, r4
    55a2:	2178      	movs	r1, #120	; 0x78
    55a4:	3245      	adds	r2, #69	; 0x45
    55a6:	7011      	strb	r1, [r2, #0]
    55a8:	4a6c      	ldr	r2, [pc, #432]	; (575c <_printf_i+0x22c>)
    55aa:	e030      	b.n	560e <_printf_i+0xde>
    55ac:	000e      	movs	r6, r1
    55ae:	681a      	ldr	r2, [r3, #0]
    55b0:	3642      	adds	r6, #66	; 0x42
    55b2:	1d11      	adds	r1, r2, #4
    55b4:	6019      	str	r1, [r3, #0]
    55b6:	6813      	ldr	r3, [r2, #0]
    55b8:	7033      	strb	r3, [r6, #0]
    55ba:	2301      	movs	r3, #1
    55bc:	e079      	b.n	56b2 <_printf_i+0x182>
    55be:	0649      	lsls	r1, r1, #25
    55c0:	d5d9      	bpl.n	5576 <_printf_i+0x46>
    55c2:	1d11      	adds	r1, r2, #4
    55c4:	6019      	str	r1, [r3, #0]
    55c6:	2300      	movs	r3, #0
    55c8:	5ed5      	ldrsh	r5, [r2, r3]
    55ca:	2d00      	cmp	r5, #0
    55cc:	da03      	bge.n	55d6 <_printf_i+0xa6>
    55ce:	232d      	movs	r3, #45	; 0x2d
    55d0:	9a04      	ldr	r2, [sp, #16]
    55d2:	426d      	negs	r5, r5
    55d4:	7013      	strb	r3, [r2, #0]
    55d6:	4b62      	ldr	r3, [pc, #392]	; (5760 <_printf_i+0x230>)
    55d8:	270a      	movs	r7, #10
    55da:	9303      	str	r3, [sp, #12]
    55dc:	e02f      	b.n	563e <_printf_i+0x10e>
    55de:	6820      	ldr	r0, [r4, #0]
    55e0:	6819      	ldr	r1, [r3, #0]
    55e2:	0605      	lsls	r5, r0, #24
    55e4:	d503      	bpl.n	55ee <_printf_i+0xbe>
    55e6:	1d08      	adds	r0, r1, #4
    55e8:	6018      	str	r0, [r3, #0]
    55ea:	680d      	ldr	r5, [r1, #0]
    55ec:	e005      	b.n	55fa <_printf_i+0xca>
    55ee:	0640      	lsls	r0, r0, #25
    55f0:	d5f9      	bpl.n	55e6 <_printf_i+0xb6>
    55f2:	680d      	ldr	r5, [r1, #0]
    55f4:	1d08      	adds	r0, r1, #4
    55f6:	6018      	str	r0, [r3, #0]
    55f8:	b2ad      	uxth	r5, r5
    55fa:	4b59      	ldr	r3, [pc, #356]	; (5760 <_printf_i+0x230>)
    55fc:	2708      	movs	r7, #8
    55fe:	9303      	str	r3, [sp, #12]
    5600:	2a6f      	cmp	r2, #111	; 0x6f
    5602:	d018      	beq.n	5636 <_printf_i+0x106>
    5604:	270a      	movs	r7, #10
    5606:	e016      	b.n	5636 <_printf_i+0x106>
    5608:	3145      	adds	r1, #69	; 0x45
    560a:	700a      	strb	r2, [r1, #0]
    560c:	4a54      	ldr	r2, [pc, #336]	; (5760 <_printf_i+0x230>)
    560e:	9203      	str	r2, [sp, #12]
    5610:	681a      	ldr	r2, [r3, #0]
    5612:	6821      	ldr	r1, [r4, #0]
    5614:	1d10      	adds	r0, r2, #4
    5616:	6018      	str	r0, [r3, #0]
    5618:	6815      	ldr	r5, [r2, #0]
    561a:	0608      	lsls	r0, r1, #24
    561c:	d522      	bpl.n	5664 <_printf_i+0x134>
    561e:	07cb      	lsls	r3, r1, #31
    5620:	d502      	bpl.n	5628 <_printf_i+0xf8>
    5622:	2320      	movs	r3, #32
    5624:	4319      	orrs	r1, r3
    5626:	6021      	str	r1, [r4, #0]
    5628:	2710      	movs	r7, #16
    562a:	2d00      	cmp	r5, #0
    562c:	d103      	bne.n	5636 <_printf_i+0x106>
    562e:	2320      	movs	r3, #32
    5630:	6822      	ldr	r2, [r4, #0]
    5632:	439a      	bics	r2, r3
    5634:	6022      	str	r2, [r4, #0]
    5636:	0023      	movs	r3, r4
    5638:	2200      	movs	r2, #0
    563a:	3343      	adds	r3, #67	; 0x43
    563c:	701a      	strb	r2, [r3, #0]
    563e:	6863      	ldr	r3, [r4, #4]
    5640:	60a3      	str	r3, [r4, #8]
    5642:	2b00      	cmp	r3, #0
    5644:	db5c      	blt.n	5700 <_printf_i+0x1d0>
    5646:	2204      	movs	r2, #4
    5648:	6821      	ldr	r1, [r4, #0]
    564a:	4391      	bics	r1, r2
    564c:	6021      	str	r1, [r4, #0]
    564e:	2d00      	cmp	r5, #0
    5650:	d158      	bne.n	5704 <_printf_i+0x1d4>
    5652:	9e04      	ldr	r6, [sp, #16]
    5654:	2b00      	cmp	r3, #0
    5656:	d064      	beq.n	5722 <_printf_i+0x1f2>
    5658:	0026      	movs	r6, r4
    565a:	9b03      	ldr	r3, [sp, #12]
    565c:	3642      	adds	r6, #66	; 0x42
    565e:	781b      	ldrb	r3, [r3, #0]
    5660:	7033      	strb	r3, [r6, #0]
    5662:	e05e      	b.n	5722 <_printf_i+0x1f2>
    5664:	0648      	lsls	r0, r1, #25
    5666:	d5da      	bpl.n	561e <_printf_i+0xee>
    5668:	b2ad      	uxth	r5, r5
    566a:	e7d8      	b.n	561e <_printf_i+0xee>
    566c:	6809      	ldr	r1, [r1, #0]
    566e:	681a      	ldr	r2, [r3, #0]
    5670:	0608      	lsls	r0, r1, #24
    5672:	d505      	bpl.n	5680 <_printf_i+0x150>
    5674:	1d11      	adds	r1, r2, #4
    5676:	6019      	str	r1, [r3, #0]
    5678:	6813      	ldr	r3, [r2, #0]
    567a:	6962      	ldr	r2, [r4, #20]
    567c:	601a      	str	r2, [r3, #0]
    567e:	e006      	b.n	568e <_printf_i+0x15e>
    5680:	0649      	lsls	r1, r1, #25
    5682:	d5f7      	bpl.n	5674 <_printf_i+0x144>
    5684:	1d11      	adds	r1, r2, #4
    5686:	6019      	str	r1, [r3, #0]
    5688:	6813      	ldr	r3, [r2, #0]
    568a:	8aa2      	ldrh	r2, [r4, #20]
    568c:	801a      	strh	r2, [r3, #0]
    568e:	2300      	movs	r3, #0
    5690:	9e04      	ldr	r6, [sp, #16]
    5692:	6123      	str	r3, [r4, #16]
    5694:	e054      	b.n	5740 <_printf_i+0x210>
    5696:	681a      	ldr	r2, [r3, #0]
    5698:	1d11      	adds	r1, r2, #4
    569a:	6019      	str	r1, [r3, #0]
    569c:	6816      	ldr	r6, [r2, #0]
    569e:	2100      	movs	r1, #0
    56a0:	6862      	ldr	r2, [r4, #4]
    56a2:	0030      	movs	r0, r6
    56a4:	f000 fa0a 	bl	5abc <memchr>
    56a8:	2800      	cmp	r0, #0
    56aa:	d001      	beq.n	56b0 <_printf_i+0x180>
    56ac:	1b80      	subs	r0, r0, r6
    56ae:	6060      	str	r0, [r4, #4]
    56b0:	6863      	ldr	r3, [r4, #4]
    56b2:	6123      	str	r3, [r4, #16]
    56b4:	2300      	movs	r3, #0
    56b6:	9a04      	ldr	r2, [sp, #16]
    56b8:	7013      	strb	r3, [r2, #0]
    56ba:	e041      	b.n	5740 <_printf_i+0x210>
    56bc:	6923      	ldr	r3, [r4, #16]
    56be:	0032      	movs	r2, r6
    56c0:	9906      	ldr	r1, [sp, #24]
    56c2:	9805      	ldr	r0, [sp, #20]
    56c4:	9d07      	ldr	r5, [sp, #28]
    56c6:	47a8      	blx	r5
    56c8:	1c43      	adds	r3, r0, #1
    56ca:	d043      	beq.n	5754 <_printf_i+0x224>
    56cc:	6823      	ldr	r3, [r4, #0]
    56ce:	2500      	movs	r5, #0
    56d0:	079b      	lsls	r3, r3, #30
    56d2:	d40f      	bmi.n	56f4 <_printf_i+0x1c4>
    56d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    56d6:	68e0      	ldr	r0, [r4, #12]
    56d8:	4298      	cmp	r0, r3
    56da:	da3d      	bge.n	5758 <_printf_i+0x228>
    56dc:	0018      	movs	r0, r3
    56de:	e03b      	b.n	5758 <_printf_i+0x228>
    56e0:	0022      	movs	r2, r4
    56e2:	2301      	movs	r3, #1
    56e4:	3219      	adds	r2, #25
    56e6:	9906      	ldr	r1, [sp, #24]
    56e8:	9805      	ldr	r0, [sp, #20]
    56ea:	9e07      	ldr	r6, [sp, #28]
    56ec:	47b0      	blx	r6
    56ee:	1c43      	adds	r3, r0, #1
    56f0:	d030      	beq.n	5754 <_printf_i+0x224>
    56f2:	3501      	adds	r5, #1
    56f4:	68e3      	ldr	r3, [r4, #12]
    56f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    56f8:	1a9b      	subs	r3, r3, r2
    56fa:	429d      	cmp	r5, r3
    56fc:	dbf0      	blt.n	56e0 <_printf_i+0x1b0>
    56fe:	e7e9      	b.n	56d4 <_printf_i+0x1a4>
    5700:	2d00      	cmp	r5, #0
    5702:	d0a9      	beq.n	5658 <_printf_i+0x128>
    5704:	9e04      	ldr	r6, [sp, #16]
    5706:	0028      	movs	r0, r5
    5708:	0039      	movs	r1, r7
    570a:	f7fe ff97 	bl	463c <__aeabi_uidivmod>
    570e:	9b03      	ldr	r3, [sp, #12]
    5710:	3e01      	subs	r6, #1
    5712:	5c5b      	ldrb	r3, [r3, r1]
    5714:	0028      	movs	r0, r5
    5716:	7033      	strb	r3, [r6, #0]
    5718:	0039      	movs	r1, r7
    571a:	f7fe ff09 	bl	4530 <__udivsi3>
    571e:	1e05      	subs	r5, r0, #0
    5720:	d1f1      	bne.n	5706 <_printf_i+0x1d6>
    5722:	2f08      	cmp	r7, #8
    5724:	d109      	bne.n	573a <_printf_i+0x20a>
    5726:	6823      	ldr	r3, [r4, #0]
    5728:	07db      	lsls	r3, r3, #31
    572a:	d506      	bpl.n	573a <_printf_i+0x20a>
    572c:	6863      	ldr	r3, [r4, #4]
    572e:	6922      	ldr	r2, [r4, #16]
    5730:	4293      	cmp	r3, r2
    5732:	dc02      	bgt.n	573a <_printf_i+0x20a>
    5734:	2330      	movs	r3, #48	; 0x30
    5736:	3e01      	subs	r6, #1
    5738:	7033      	strb	r3, [r6, #0]
    573a:	9b04      	ldr	r3, [sp, #16]
    573c:	1b9b      	subs	r3, r3, r6
    573e:	6123      	str	r3, [r4, #16]
    5740:	9b07      	ldr	r3, [sp, #28]
    5742:	aa09      	add	r2, sp, #36	; 0x24
    5744:	9300      	str	r3, [sp, #0]
    5746:	0021      	movs	r1, r4
    5748:	9b06      	ldr	r3, [sp, #24]
    574a:	9805      	ldr	r0, [sp, #20]
    574c:	f7ff fe82 	bl	5454 <_printf_common>
    5750:	1c43      	adds	r3, r0, #1
    5752:	d1b3      	bne.n	56bc <_printf_i+0x18c>
    5754:	2001      	movs	r0, #1
    5756:	4240      	negs	r0, r0
    5758:	b00b      	add	sp, #44	; 0x2c
    575a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    575c:	00007f5e 	.word	0x00007f5e
    5760:	00007f4d 	.word	0x00007f4d

00005764 <_putc_r>:
    5764:	b570      	push	{r4, r5, r6, lr}
    5766:	0006      	movs	r6, r0
    5768:	000d      	movs	r5, r1
    576a:	0014      	movs	r4, r2
    576c:	2800      	cmp	r0, #0
    576e:	d004      	beq.n	577a <_putc_r+0x16>
    5770:	6983      	ldr	r3, [r0, #24]
    5772:	2b00      	cmp	r3, #0
    5774:	d101      	bne.n	577a <_putc_r+0x16>
    5776:	f7ff fc25 	bl	4fc4 <__sinit>
    577a:	4b12      	ldr	r3, [pc, #72]	; (57c4 <_putc_r+0x60>)
    577c:	429c      	cmp	r4, r3
    577e:	d111      	bne.n	57a4 <_putc_r+0x40>
    5780:	6874      	ldr	r4, [r6, #4]
    5782:	68a3      	ldr	r3, [r4, #8]
    5784:	3b01      	subs	r3, #1
    5786:	60a3      	str	r3, [r4, #8]
    5788:	2b00      	cmp	r3, #0
    578a:	da05      	bge.n	5798 <_putc_r+0x34>
    578c:	69a2      	ldr	r2, [r4, #24]
    578e:	4293      	cmp	r3, r2
    5790:	db12      	blt.n	57b8 <_putc_r+0x54>
    5792:	b2eb      	uxtb	r3, r5
    5794:	2b0a      	cmp	r3, #10
    5796:	d00f      	beq.n	57b8 <_putc_r+0x54>
    5798:	6823      	ldr	r3, [r4, #0]
    579a:	b2e8      	uxtb	r0, r5
    579c:	1c5a      	adds	r2, r3, #1
    579e:	6022      	str	r2, [r4, #0]
    57a0:	701d      	strb	r5, [r3, #0]
    57a2:	bd70      	pop	{r4, r5, r6, pc}
    57a4:	4b08      	ldr	r3, [pc, #32]	; (57c8 <_putc_r+0x64>)
    57a6:	429c      	cmp	r4, r3
    57a8:	d101      	bne.n	57ae <_putc_r+0x4a>
    57aa:	68b4      	ldr	r4, [r6, #8]
    57ac:	e7e9      	b.n	5782 <_putc_r+0x1e>
    57ae:	4b07      	ldr	r3, [pc, #28]	; (57cc <_putc_r+0x68>)
    57b0:	429c      	cmp	r4, r3
    57b2:	d1e6      	bne.n	5782 <_putc_r+0x1e>
    57b4:	68f4      	ldr	r4, [r6, #12]
    57b6:	e7e4      	b.n	5782 <_putc_r+0x1e>
    57b8:	0022      	movs	r2, r4
    57ba:	0029      	movs	r1, r5
    57bc:	0030      	movs	r0, r6
    57be:	f000 f853 	bl	5868 <__swbuf_r>
    57c2:	e7ee      	b.n	57a2 <_putc_r+0x3e>
    57c4:	00007efc 	.word	0x00007efc
    57c8:	00007f1c 	.word	0x00007f1c
    57cc:	00007edc 	.word	0x00007edc

000057d0 <__sread>:
    57d0:	b570      	push	{r4, r5, r6, lr}
    57d2:	000c      	movs	r4, r1
    57d4:	250e      	movs	r5, #14
    57d6:	5f49      	ldrsh	r1, [r1, r5]
    57d8:	f000 f97c 	bl	5ad4 <_read_r>
    57dc:	2800      	cmp	r0, #0
    57de:	db03      	blt.n	57e8 <__sread+0x18>
    57e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    57e2:	181b      	adds	r3, r3, r0
    57e4:	6563      	str	r3, [r4, #84]	; 0x54
    57e6:	bd70      	pop	{r4, r5, r6, pc}
    57e8:	89a3      	ldrh	r3, [r4, #12]
    57ea:	4a02      	ldr	r2, [pc, #8]	; (57f4 <__sread+0x24>)
    57ec:	4013      	ands	r3, r2
    57ee:	81a3      	strh	r3, [r4, #12]
    57f0:	e7f9      	b.n	57e6 <__sread+0x16>
    57f2:	46c0      	nop			; (mov r8, r8)
    57f4:	ffffefff 	.word	0xffffefff

000057f8 <__swrite>:
    57f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57fa:	001f      	movs	r7, r3
    57fc:	898b      	ldrh	r3, [r1, #12]
    57fe:	0005      	movs	r5, r0
    5800:	000c      	movs	r4, r1
    5802:	0016      	movs	r6, r2
    5804:	05db      	lsls	r3, r3, #23
    5806:	d505      	bpl.n	5814 <__swrite+0x1c>
    5808:	230e      	movs	r3, #14
    580a:	5ec9      	ldrsh	r1, [r1, r3]
    580c:	2200      	movs	r2, #0
    580e:	2302      	movs	r3, #2
    5810:	f000 f940 	bl	5a94 <_lseek_r>
    5814:	89a3      	ldrh	r3, [r4, #12]
    5816:	4a05      	ldr	r2, [pc, #20]	; (582c <__swrite+0x34>)
    5818:	0028      	movs	r0, r5
    581a:	4013      	ands	r3, r2
    581c:	81a3      	strh	r3, [r4, #12]
    581e:	0032      	movs	r2, r6
    5820:	230e      	movs	r3, #14
    5822:	5ee1      	ldrsh	r1, [r4, r3]
    5824:	003b      	movs	r3, r7
    5826:	f000 f875 	bl	5914 <_write_r>
    582a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    582c:	ffffefff 	.word	0xffffefff

00005830 <__sseek>:
    5830:	b570      	push	{r4, r5, r6, lr}
    5832:	000c      	movs	r4, r1
    5834:	250e      	movs	r5, #14
    5836:	5f49      	ldrsh	r1, [r1, r5]
    5838:	f000 f92c 	bl	5a94 <_lseek_r>
    583c:	89a3      	ldrh	r3, [r4, #12]
    583e:	1c42      	adds	r2, r0, #1
    5840:	d103      	bne.n	584a <__sseek+0x1a>
    5842:	4a05      	ldr	r2, [pc, #20]	; (5858 <__sseek+0x28>)
    5844:	4013      	ands	r3, r2
    5846:	81a3      	strh	r3, [r4, #12]
    5848:	bd70      	pop	{r4, r5, r6, pc}
    584a:	2280      	movs	r2, #128	; 0x80
    584c:	0152      	lsls	r2, r2, #5
    584e:	4313      	orrs	r3, r2
    5850:	81a3      	strh	r3, [r4, #12]
    5852:	6560      	str	r0, [r4, #84]	; 0x54
    5854:	e7f8      	b.n	5848 <__sseek+0x18>
    5856:	46c0      	nop			; (mov r8, r8)
    5858:	ffffefff 	.word	0xffffefff

0000585c <__sclose>:
    585c:	b510      	push	{r4, lr}
    585e:	230e      	movs	r3, #14
    5860:	5ec9      	ldrsh	r1, [r1, r3]
    5862:	f000 f8e1 	bl	5a28 <_close_r>
    5866:	bd10      	pop	{r4, pc}

00005868 <__swbuf_r>:
    5868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    586a:	0005      	movs	r5, r0
    586c:	000e      	movs	r6, r1
    586e:	0014      	movs	r4, r2
    5870:	2800      	cmp	r0, #0
    5872:	d004      	beq.n	587e <__swbuf_r+0x16>
    5874:	6983      	ldr	r3, [r0, #24]
    5876:	2b00      	cmp	r3, #0
    5878:	d101      	bne.n	587e <__swbuf_r+0x16>
    587a:	f7ff fba3 	bl	4fc4 <__sinit>
    587e:	4b22      	ldr	r3, [pc, #136]	; (5908 <__swbuf_r+0xa0>)
    5880:	429c      	cmp	r4, r3
    5882:	d12d      	bne.n	58e0 <__swbuf_r+0x78>
    5884:	686c      	ldr	r4, [r5, #4]
    5886:	69a3      	ldr	r3, [r4, #24]
    5888:	60a3      	str	r3, [r4, #8]
    588a:	89a3      	ldrh	r3, [r4, #12]
    588c:	071b      	lsls	r3, r3, #28
    588e:	d531      	bpl.n	58f4 <__swbuf_r+0x8c>
    5890:	6923      	ldr	r3, [r4, #16]
    5892:	2b00      	cmp	r3, #0
    5894:	d02e      	beq.n	58f4 <__swbuf_r+0x8c>
    5896:	6823      	ldr	r3, [r4, #0]
    5898:	6922      	ldr	r2, [r4, #16]
    589a:	b2f7      	uxtb	r7, r6
    589c:	1a98      	subs	r0, r3, r2
    589e:	6963      	ldr	r3, [r4, #20]
    58a0:	b2f6      	uxtb	r6, r6
    58a2:	4298      	cmp	r0, r3
    58a4:	db05      	blt.n	58b2 <__swbuf_r+0x4a>
    58a6:	0021      	movs	r1, r4
    58a8:	0028      	movs	r0, r5
    58aa:	f7ff fb1d 	bl	4ee8 <_fflush_r>
    58ae:	2800      	cmp	r0, #0
    58b0:	d126      	bne.n	5900 <__swbuf_r+0x98>
    58b2:	68a3      	ldr	r3, [r4, #8]
    58b4:	3001      	adds	r0, #1
    58b6:	3b01      	subs	r3, #1
    58b8:	60a3      	str	r3, [r4, #8]
    58ba:	6823      	ldr	r3, [r4, #0]
    58bc:	1c5a      	adds	r2, r3, #1
    58be:	6022      	str	r2, [r4, #0]
    58c0:	701f      	strb	r7, [r3, #0]
    58c2:	6963      	ldr	r3, [r4, #20]
    58c4:	4298      	cmp	r0, r3
    58c6:	d004      	beq.n	58d2 <__swbuf_r+0x6a>
    58c8:	89a3      	ldrh	r3, [r4, #12]
    58ca:	07db      	lsls	r3, r3, #31
    58cc:	d51a      	bpl.n	5904 <__swbuf_r+0x9c>
    58ce:	2e0a      	cmp	r6, #10
    58d0:	d118      	bne.n	5904 <__swbuf_r+0x9c>
    58d2:	0021      	movs	r1, r4
    58d4:	0028      	movs	r0, r5
    58d6:	f7ff fb07 	bl	4ee8 <_fflush_r>
    58da:	2800      	cmp	r0, #0
    58dc:	d012      	beq.n	5904 <__swbuf_r+0x9c>
    58de:	e00f      	b.n	5900 <__swbuf_r+0x98>
    58e0:	4b0a      	ldr	r3, [pc, #40]	; (590c <__swbuf_r+0xa4>)
    58e2:	429c      	cmp	r4, r3
    58e4:	d101      	bne.n	58ea <__swbuf_r+0x82>
    58e6:	68ac      	ldr	r4, [r5, #8]
    58e8:	e7cd      	b.n	5886 <__swbuf_r+0x1e>
    58ea:	4b09      	ldr	r3, [pc, #36]	; (5910 <__swbuf_r+0xa8>)
    58ec:	429c      	cmp	r4, r3
    58ee:	d1ca      	bne.n	5886 <__swbuf_r+0x1e>
    58f0:	68ec      	ldr	r4, [r5, #12]
    58f2:	e7c8      	b.n	5886 <__swbuf_r+0x1e>
    58f4:	0021      	movs	r1, r4
    58f6:	0028      	movs	r0, r5
    58f8:	f000 f820 	bl	593c <__swsetup_r>
    58fc:	2800      	cmp	r0, #0
    58fe:	d0ca      	beq.n	5896 <__swbuf_r+0x2e>
    5900:	2601      	movs	r6, #1
    5902:	4276      	negs	r6, r6
    5904:	0030      	movs	r0, r6
    5906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5908:	00007efc 	.word	0x00007efc
    590c:	00007f1c 	.word	0x00007f1c
    5910:	00007edc 	.word	0x00007edc

00005914 <_write_r>:
    5914:	b570      	push	{r4, r5, r6, lr}
    5916:	0005      	movs	r5, r0
    5918:	0008      	movs	r0, r1
    591a:	0011      	movs	r1, r2
    591c:	2200      	movs	r2, #0
    591e:	4c06      	ldr	r4, [pc, #24]	; (5938 <_write_r+0x24>)
    5920:	6022      	str	r2, [r4, #0]
    5922:	001a      	movs	r2, r3
    5924:	f7fd fc68 	bl	31f8 <_write>
    5928:	1c43      	adds	r3, r0, #1
    592a:	d103      	bne.n	5934 <_write_r+0x20>
    592c:	6823      	ldr	r3, [r4, #0]
    592e:	2b00      	cmp	r3, #0
    5930:	d000      	beq.n	5934 <_write_r+0x20>
    5932:	602b      	str	r3, [r5, #0]
    5934:	bd70      	pop	{r4, r5, r6, pc}
    5936:	46c0      	nop			; (mov r8, r8)
    5938:	20000b6c 	.word	0x20000b6c

0000593c <__swsetup_r>:
    593c:	4b36      	ldr	r3, [pc, #216]	; (5a18 <__swsetup_r+0xdc>)
    593e:	b570      	push	{r4, r5, r6, lr}
    5940:	681d      	ldr	r5, [r3, #0]
    5942:	0006      	movs	r6, r0
    5944:	000c      	movs	r4, r1
    5946:	2d00      	cmp	r5, #0
    5948:	d005      	beq.n	5956 <__swsetup_r+0x1a>
    594a:	69ab      	ldr	r3, [r5, #24]
    594c:	2b00      	cmp	r3, #0
    594e:	d102      	bne.n	5956 <__swsetup_r+0x1a>
    5950:	0028      	movs	r0, r5
    5952:	f7ff fb37 	bl	4fc4 <__sinit>
    5956:	4b31      	ldr	r3, [pc, #196]	; (5a1c <__swsetup_r+0xe0>)
    5958:	429c      	cmp	r4, r3
    595a:	d10f      	bne.n	597c <__swsetup_r+0x40>
    595c:	686c      	ldr	r4, [r5, #4]
    595e:	230c      	movs	r3, #12
    5960:	5ee2      	ldrsh	r2, [r4, r3]
    5962:	b293      	uxth	r3, r2
    5964:	0719      	lsls	r1, r3, #28
    5966:	d42d      	bmi.n	59c4 <__swsetup_r+0x88>
    5968:	06d9      	lsls	r1, r3, #27
    596a:	d411      	bmi.n	5990 <__swsetup_r+0x54>
    596c:	2309      	movs	r3, #9
    596e:	2001      	movs	r0, #1
    5970:	6033      	str	r3, [r6, #0]
    5972:	3337      	adds	r3, #55	; 0x37
    5974:	4313      	orrs	r3, r2
    5976:	81a3      	strh	r3, [r4, #12]
    5978:	4240      	negs	r0, r0
    597a:	bd70      	pop	{r4, r5, r6, pc}
    597c:	4b28      	ldr	r3, [pc, #160]	; (5a20 <__swsetup_r+0xe4>)
    597e:	429c      	cmp	r4, r3
    5980:	d101      	bne.n	5986 <__swsetup_r+0x4a>
    5982:	68ac      	ldr	r4, [r5, #8]
    5984:	e7eb      	b.n	595e <__swsetup_r+0x22>
    5986:	4b27      	ldr	r3, [pc, #156]	; (5a24 <__swsetup_r+0xe8>)
    5988:	429c      	cmp	r4, r3
    598a:	d1e8      	bne.n	595e <__swsetup_r+0x22>
    598c:	68ec      	ldr	r4, [r5, #12]
    598e:	e7e6      	b.n	595e <__swsetup_r+0x22>
    5990:	075b      	lsls	r3, r3, #29
    5992:	d513      	bpl.n	59bc <__swsetup_r+0x80>
    5994:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5996:	2900      	cmp	r1, #0
    5998:	d008      	beq.n	59ac <__swsetup_r+0x70>
    599a:	0023      	movs	r3, r4
    599c:	3344      	adds	r3, #68	; 0x44
    599e:	4299      	cmp	r1, r3
    59a0:	d002      	beq.n	59a8 <__swsetup_r+0x6c>
    59a2:	0030      	movs	r0, r6
    59a4:	f7fe ffc0 	bl	4928 <_free_r>
    59a8:	2300      	movs	r3, #0
    59aa:	6363      	str	r3, [r4, #52]	; 0x34
    59ac:	2224      	movs	r2, #36	; 0x24
    59ae:	89a3      	ldrh	r3, [r4, #12]
    59b0:	4393      	bics	r3, r2
    59b2:	81a3      	strh	r3, [r4, #12]
    59b4:	2300      	movs	r3, #0
    59b6:	6063      	str	r3, [r4, #4]
    59b8:	6923      	ldr	r3, [r4, #16]
    59ba:	6023      	str	r3, [r4, #0]
    59bc:	2308      	movs	r3, #8
    59be:	89a2      	ldrh	r2, [r4, #12]
    59c0:	4313      	orrs	r3, r2
    59c2:	81a3      	strh	r3, [r4, #12]
    59c4:	6923      	ldr	r3, [r4, #16]
    59c6:	2b00      	cmp	r3, #0
    59c8:	d10b      	bne.n	59e2 <__swsetup_r+0xa6>
    59ca:	21a0      	movs	r1, #160	; 0xa0
    59cc:	2280      	movs	r2, #128	; 0x80
    59ce:	89a3      	ldrh	r3, [r4, #12]
    59d0:	0089      	lsls	r1, r1, #2
    59d2:	0092      	lsls	r2, r2, #2
    59d4:	400b      	ands	r3, r1
    59d6:	4293      	cmp	r3, r2
    59d8:	d003      	beq.n	59e2 <__swsetup_r+0xa6>
    59da:	0021      	movs	r1, r4
    59dc:	0030      	movs	r0, r6
    59de:	f7ff fbaf 	bl	5140 <__smakebuf_r>
    59e2:	2301      	movs	r3, #1
    59e4:	89a2      	ldrh	r2, [r4, #12]
    59e6:	4013      	ands	r3, r2
    59e8:	d011      	beq.n	5a0e <__swsetup_r+0xd2>
    59ea:	2300      	movs	r3, #0
    59ec:	60a3      	str	r3, [r4, #8]
    59ee:	6963      	ldr	r3, [r4, #20]
    59f0:	425b      	negs	r3, r3
    59f2:	61a3      	str	r3, [r4, #24]
    59f4:	2000      	movs	r0, #0
    59f6:	6923      	ldr	r3, [r4, #16]
    59f8:	4283      	cmp	r3, r0
    59fa:	d1be      	bne.n	597a <__swsetup_r+0x3e>
    59fc:	230c      	movs	r3, #12
    59fe:	5ee2      	ldrsh	r2, [r4, r3]
    5a00:	0613      	lsls	r3, r2, #24
    5a02:	d5ba      	bpl.n	597a <__swsetup_r+0x3e>
    5a04:	2340      	movs	r3, #64	; 0x40
    5a06:	4313      	orrs	r3, r2
    5a08:	81a3      	strh	r3, [r4, #12]
    5a0a:	3801      	subs	r0, #1
    5a0c:	e7b5      	b.n	597a <__swsetup_r+0x3e>
    5a0e:	0792      	lsls	r2, r2, #30
    5a10:	d400      	bmi.n	5a14 <__swsetup_r+0xd8>
    5a12:	6963      	ldr	r3, [r4, #20]
    5a14:	60a3      	str	r3, [r4, #8]
    5a16:	e7ed      	b.n	59f4 <__swsetup_r+0xb8>
    5a18:	20000174 	.word	0x20000174
    5a1c:	00007efc 	.word	0x00007efc
    5a20:	00007f1c 	.word	0x00007f1c
    5a24:	00007edc 	.word	0x00007edc

00005a28 <_close_r>:
    5a28:	2300      	movs	r3, #0
    5a2a:	b570      	push	{r4, r5, r6, lr}
    5a2c:	4c06      	ldr	r4, [pc, #24]	; (5a48 <_close_r+0x20>)
    5a2e:	0005      	movs	r5, r0
    5a30:	0008      	movs	r0, r1
    5a32:	6023      	str	r3, [r4, #0]
    5a34:	f7fd fc1a 	bl	326c <_close>
    5a38:	1c43      	adds	r3, r0, #1
    5a3a:	d103      	bne.n	5a44 <_close_r+0x1c>
    5a3c:	6823      	ldr	r3, [r4, #0]
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d000      	beq.n	5a44 <_close_r+0x1c>
    5a42:	602b      	str	r3, [r5, #0]
    5a44:	bd70      	pop	{r4, r5, r6, pc}
    5a46:	46c0      	nop			; (mov r8, r8)
    5a48:	20000b6c 	.word	0x20000b6c

00005a4c <_fstat_r>:
    5a4c:	2300      	movs	r3, #0
    5a4e:	b570      	push	{r4, r5, r6, lr}
    5a50:	4c06      	ldr	r4, [pc, #24]	; (5a6c <_fstat_r+0x20>)
    5a52:	0005      	movs	r5, r0
    5a54:	0008      	movs	r0, r1
    5a56:	0011      	movs	r1, r2
    5a58:	6023      	str	r3, [r4, #0]
    5a5a:	f7fd fc0a 	bl	3272 <_fstat>
    5a5e:	1c43      	adds	r3, r0, #1
    5a60:	d103      	bne.n	5a6a <_fstat_r+0x1e>
    5a62:	6823      	ldr	r3, [r4, #0]
    5a64:	2b00      	cmp	r3, #0
    5a66:	d000      	beq.n	5a6a <_fstat_r+0x1e>
    5a68:	602b      	str	r3, [r5, #0]
    5a6a:	bd70      	pop	{r4, r5, r6, pc}
    5a6c:	20000b6c 	.word	0x20000b6c

00005a70 <_isatty_r>:
    5a70:	2300      	movs	r3, #0
    5a72:	b570      	push	{r4, r5, r6, lr}
    5a74:	4c06      	ldr	r4, [pc, #24]	; (5a90 <_isatty_r+0x20>)
    5a76:	0005      	movs	r5, r0
    5a78:	0008      	movs	r0, r1
    5a7a:	6023      	str	r3, [r4, #0]
    5a7c:	f7fd fbfe 	bl	327c <_isatty>
    5a80:	1c43      	adds	r3, r0, #1
    5a82:	d103      	bne.n	5a8c <_isatty_r+0x1c>
    5a84:	6823      	ldr	r3, [r4, #0]
    5a86:	2b00      	cmp	r3, #0
    5a88:	d000      	beq.n	5a8c <_isatty_r+0x1c>
    5a8a:	602b      	str	r3, [r5, #0]
    5a8c:	bd70      	pop	{r4, r5, r6, pc}
    5a8e:	46c0      	nop			; (mov r8, r8)
    5a90:	20000b6c 	.word	0x20000b6c

00005a94 <_lseek_r>:
    5a94:	b570      	push	{r4, r5, r6, lr}
    5a96:	0005      	movs	r5, r0
    5a98:	0008      	movs	r0, r1
    5a9a:	0011      	movs	r1, r2
    5a9c:	2200      	movs	r2, #0
    5a9e:	4c06      	ldr	r4, [pc, #24]	; (5ab8 <_lseek_r+0x24>)
    5aa0:	6022      	str	r2, [r4, #0]
    5aa2:	001a      	movs	r2, r3
    5aa4:	f7fd fbec 	bl	3280 <_lseek>
    5aa8:	1c43      	adds	r3, r0, #1
    5aaa:	d103      	bne.n	5ab4 <_lseek_r+0x20>
    5aac:	6823      	ldr	r3, [r4, #0]
    5aae:	2b00      	cmp	r3, #0
    5ab0:	d000      	beq.n	5ab4 <_lseek_r+0x20>
    5ab2:	602b      	str	r3, [r5, #0]
    5ab4:	bd70      	pop	{r4, r5, r6, pc}
    5ab6:	46c0      	nop			; (mov r8, r8)
    5ab8:	20000b6c 	.word	0x20000b6c

00005abc <memchr>:
    5abc:	b2c9      	uxtb	r1, r1
    5abe:	1882      	adds	r2, r0, r2
    5ac0:	4290      	cmp	r0, r2
    5ac2:	d101      	bne.n	5ac8 <memchr+0xc>
    5ac4:	2000      	movs	r0, #0
    5ac6:	4770      	bx	lr
    5ac8:	7803      	ldrb	r3, [r0, #0]
    5aca:	428b      	cmp	r3, r1
    5acc:	d0fb      	beq.n	5ac6 <memchr+0xa>
    5ace:	3001      	adds	r0, #1
    5ad0:	e7f6      	b.n	5ac0 <memchr+0x4>
	...

00005ad4 <_read_r>:
    5ad4:	b570      	push	{r4, r5, r6, lr}
    5ad6:	0005      	movs	r5, r0
    5ad8:	0008      	movs	r0, r1
    5ada:	0011      	movs	r1, r2
    5adc:	2200      	movs	r2, #0
    5ade:	4c06      	ldr	r4, [pc, #24]	; (5af8 <_read_r+0x24>)
    5ae0:	6022      	str	r2, [r4, #0]
    5ae2:	001a      	movs	r2, r3
    5ae4:	f7fd fb66 	bl	31b4 <_read>
    5ae8:	1c43      	adds	r3, r0, #1
    5aea:	d103      	bne.n	5af4 <_read_r+0x20>
    5aec:	6823      	ldr	r3, [r4, #0]
    5aee:	2b00      	cmp	r3, #0
    5af0:	d000      	beq.n	5af4 <_read_r+0x20>
    5af2:	602b      	str	r3, [r5, #0]
    5af4:	bd70      	pop	{r4, r5, r6, pc}
    5af6:	46c0      	nop			; (mov r8, r8)
    5af8:	20000b6c 	.word	0x20000b6c
    5afc:	0000154a 	.word	0x0000154a
    5b00:	00001550 	.word	0x00001550
    5b04:	00001556 	.word	0x00001556
    5b08:	00001562 	.word	0x00001562
    5b0c:	00001568 	.word	0x00001568
    5b10:	0000156e 	.word	0x0000156e
    5b14:	6e305b1b 	.word	0x6e305b1b
    5b18:	00000008 	.word	0x00000008
    5b1c:	00000008 	.word	0x00000008
    5b20:	00000008 	.word	0x00000008
    5b24:	00000008 	.word	0x00000008
    5b28:	00000008 	.word	0x00000008
    5b2c:	00000008 	.word	0x00000008
    5b30:	00000008 	.word	0x00000008
    5b34:	00000008 	.word	0x00000008
    5b38:	00000010 	.word	0x00000010
    5b3c:	00000010 	.word	0x00000010
    5b40:	00000010 	.word	0x00000010
    5b44:	00000010 	.word	0x00000010
    5b48:	00000010 	.word	0x00000010
    5b4c:	00000010 	.word	0x00000010
    5b50:	00000010 	.word	0x00000010
    5b54:	00000010 	.word	0x00000010
    5b58:	00000018 	.word	0x00000018
    5b5c:	00000018 	.word	0x00000018
    5b60:	00000018 	.word	0x00000018
    5b64:	00000018 	.word	0x00000018
    5b68:	00000018 	.word	0x00000018
    5b6c:	00000018 	.word	0x00000018
    5b70:	00000018 	.word	0x00000018
    5b74:	00000018 	.word	0x00000018
    5b78:	00000020 	.word	0x00000020
    5b7c:	00000020 	.word	0x00000020
    5b80:	00000020 	.word	0x00000020
    5b84:	00000020 	.word	0x00000020
    5b88:	00000020 	.word	0x00000020
    5b8c:	00000020 	.word	0x00000020
    5b90:	00000020 	.word	0x00000020
    5b94:	00000020 	.word	0x00000020
    5b98:	00000028 	.word	0x00000028
    5b9c:	00000028 	.word	0x00000028
    5ba0:	00000028 	.word	0x00000028
    5ba4:	00000028 	.word	0x00000028
    5ba8:	00000028 	.word	0x00000028
    5bac:	00000028 	.word	0x00000028
    5bb0:	00000028 	.word	0x00000028
    5bb4:	00000028 	.word	0x00000028
    5bb8:	00000030 	.word	0x00000030
    5bbc:	00000030 	.word	0x00000030
    5bc0:	00000030 	.word	0x00000030
    5bc4:	00000030 	.word	0x00000030
    5bc8:	00000030 	.word	0x00000030
    5bcc:	00000030 	.word	0x00000030
    5bd0:	00000030 	.word	0x00000030
    5bd4:	00000030 	.word	0x00000030
    5bd8:	00000038 	.word	0x00000038
    5bdc:	00000038 	.word	0x00000038
    5be0:	00000038 	.word	0x00000038
    5be4:	00000038 	.word	0x00000038
    5be8:	00000038 	.word	0x00000038
    5bec:	00000038 	.word	0x00000038
    5bf0:	00000038 	.word	0x00000038
    5bf4:	00000038 	.word	0x00000038
    5bf8:	00000040 	.word	0x00000040
    5bfc:	00000040 	.word	0x00000040
    5c00:	00000040 	.word	0x00000040
    5c04:	00000040 	.word	0x00000040
    5c08:	00000040 	.word	0x00000040
    5c0c:	00000040 	.word	0x00000040
    5c10:	00000040 	.word	0x00000040
    5c14:	00000040 	.word	0x00000040
    5c18:	00000048 	.word	0x00000048
    5c1c:	00000048 	.word	0x00000048
    5c20:	00000048 	.word	0x00000048
    5c24:	00000048 	.word	0x00000048
    5c28:	00000048 	.word	0x00000048
    5c2c:	00000048 	.word	0x00000048
    5c30:	00000048 	.word	0x00000048
    5c34:	00000048 	.word	0x00000048
    5c38:	0000004f 	.word	0x0000004f
    5c3c:	0000004f 	.word	0x0000004f
    5c40:	0000004f 	.word	0x0000004f
    5c44:	0000004f 	.word	0x0000004f
    5c48:	0000004f 	.word	0x0000004f
    5c4c:	0000004f 	.word	0x0000004f
    5c50:	0000004f 	.word	0x0000004f
    5c54:	0000004f 	.word	0x0000004f

00005c58 <DECIDreturn>:
    5c58:	363f5b1b 00000063 0000001b 0000005b     .[?6c.......[...
    5c68:	00000052                                R...

00005c6c <csiEscCodes>:
    5c6c:	43424140 47464544 4c4b4a48 6158504d     @ABCDEFGHJKLMPXa
    5c7c:	66656463 6d6c6867 7372716e 00006075     cdefghlmnqrsu`..
    5c8c:	00007325 000a000a 00140014 00000014     %s..............
    5c9c:	000a017c 000a017c 00140186 00140000     |...|...........
    5cac:	0122000a 00140186 01220190 0122000a     .."......."...".
    5cbc:	012c0014 0122017c 012c0186 012c0014     ..,.|."...,...,.
    5ccc:	0136017c 001e0000 00280032 00320000     |.6.....2.(...2.
    5cdc:	003c0032 001e0050 00280118 00280046     2.<.P.....(.F.(.
    5cec:	00be0050 00be0050 00c80118 00280118     P...P.........(.
    5cfc:	00be0122 00460000 00500032 005a0000     ".....F.2.P...Z.
    5d0c:	00640032 006e0000 00780032 00820000     2.d...n.2.x.....
    5d1c:	008c0032 00960000 00a00032 00aa0000     2.......2.......
    5d2c:	00b40032 00be0000 00c80032 00c8012c     2.......2...,...
    5d3c:	00d20172 00dc001e 00e60172 00f0001e     r.......r.......
    5d4c:	00fa0172 0104001e 010e0172 0118005a     r.......r...Z...
    5d5c:	0122012c 82be50b4 8cbe82aa 64963c8c     ,."..P.......<.d
    5d6c:	64dc3cd2 a08c9682 aadca08c a0e696dc     .<.d............
    5d7c:	50f03c78 5a78466e aaaa3c96 a0dc3cc8     x<.PnFxZ.<...<..
    5d8c:	aae6a0d2 6e617254 69722073 73746867     ....Trans rights
    5d9c:	65726120 6d756820 72206e61 74686769      are human right
    5dac:	00000073 355e3331 31202b20 20355e36     s...13^5 + 16^5 
    5dbc:	3731203d 0000355e 69746552 616c7563     = 17^5..Reticula
    5dcc:	676e6974 6c705320 73656e69 00000000     ting Splines....
    5ddc:	6c6f6976 65636e65 726f772e 0000736b     violence.works..
    5dec:	2b206953 00425020 6c6c694b 6c694220     Si + PB.Kill Bil
    5dfc:	6e6f696c 65726961 61282073 5420646e     lionaires (and T
    5e0c:	6c6c6972 616e6f69 29657269 00000000     rillionaire)....
    5e1c:	65746e49 74736572 206e6920 68636574     Interest in tech
    5e2c:	6f6c6f6e 69207967 6f6e2073 20612074     nology is not a 
    5e3c:	73726570 6c616e6f 00797469 50203031     personality.10 P
    5e4c:	544e4952 52484320 30322824 2b352e35     RINT CHR$(205.5+
    5e5c:	28444e52 3b292931 47203a20 204f544f     RND(1)); : GOTO 
    5e6c:	00003031 67206f4e 2e73646f 206f4e20     10..No gods. No 
    5e7c:	7473616d 2e737265 206f4e20 65747865     masters. No exte
    5e8c:	6c616e72 62696c20 69726172 002e7365     rnal libraries..
    5e9c:	6c6c694b 7a614e20 00007369 6e616954     Kill Nazis..Tian
    5eac:	656d6e61 7153206e 65726175 38393120     anmen Square 198
    5ebc:	00000039 72656d41 20616369 20736177     9...America was 
    5ecc:	6e756f66 20646564 73206e6f 6576616c     founded on slave
    5edc:	00007972 72656854 73692065 6c6e6f20     ry..There is onl
    5eec:	61632079 61746970 6e61206c 616c2064     y capital and la
    5efc:	00726f62 6f636e45 67617275 59532065     bor.Encourage SY
    5f0c:	54454d4d 20434952 73616c63 61772073     MMETRIC class wa
    5f1c:	72616672 00000065 52554324 544e4552     rfare...$CURRENT
    5f2c:	4d454d5f 00000045 694e2041 54206563     _MEME...A Nice T
    5f3c:	00005954 78696e55 6f706520 6d206863     TY..Unix epoch m
    5f4c:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    5f5c:	3d202069 35783020 35373366 20666439     i  = 0x5f3759df 
    5f6c:	2028202d 3e3e2069 29203120 0000003b     - ( i >> 1 );...
    5f7c:	61657053 7274206b 20687475 70206f74     Speak truth to p
    5f8c:	7265776f 2749203b 7573206d 74206572     ower; I'm sure t
    5f9c:	27796568 6c206c6c 65747369 6874206e     hey'll listen th
    5fac:	74207369 2e656d69 00000000 63666544     is time.....Defc
    5fbc:	73276e6f 6e616320 656c6563 32282064     on's canceled (2
    5fcc:	29303230 00000000 73746152 7473656e     020)....Ratsnest
    5fdc:	6f4e203a 6e696874 6f542067 216f4420     : Nothing To Do!
    5fec:	00000000 68207449 36207361 656b2039     ....It has 69 ke
    5ffc:	002e7379 61636542 20657375 342d5456     ys..Because VT-4
    600c:	77203032 61207361 6165726c 74207964     20 was already t
    601c:	6e656b61 00000000 706d6f43 73736572     aken....Compress
    602c:	206e6f69 6f676c61 68746972 6162206d     ion algorithm ba
    603c:	20646573 42206e6f 28205042 37393931     sed on BBP (1997
    604c:	00000029 63616554 65682068 68746c61     )...Teach health
    605c:	736e6920 6e617275 70206563 69766f72      insurance provi
    606c:	73726564 206f7420 65646f63 0000002e     ders to code....
    607c:	6e617247 65432064 6172746e 6148206c     Grand Central Ha
    608c:	54206b63 50206568 656e616c 00000074     ck The Planet...
    609c:	69466957 20736920 20746f6e 65726977     WiFi is not wire
    60ac:	7373656c 68744520 656e7265 00002174     less Ethernet!..
    60bc:	6d6d7544 68742079 20636369 65696c63     Dummy thicc clie
    60cc:	0000746e 694e2041 54206563 202e5954     nt..A Nice TTY. 
    60dc:	4f206e41 6f43204b 7475706d 002e7265     An OK Computer..
    60ec:	65545355 6964656c 6e6f646c 00736369     USTeledildonics.
    60fc:	696c6f53 69726164 69207974 6f6e2073     Solidarity is no
    610c:	20612074 2077656e 6d617266 726f7765     t a new framewor
    611c:	0000006b 61657242 616f6264 6e696472     k...Breadboardin
    612c:	73492067 746f4e20 43204120 656d6972     g Is Not A Crime
    613c:	00000000 2066664f 6f207962 6520656e     ....Off by one e
    614c:	726f7272 72612073 6f632065 6e6f6d6d     rrors are common
    615c:	00000000 00001bbe 00001e0a 00001e0a     ................
    616c:	00001e0a 00001e0a 00001e0a 00001e0a     ................
    617c:	00001e0a 00001e0a 00001e0a 00001e0a     ................
    618c:	00001e0a 00001e0a 00001e0a 00001e0a     ................
    619c:	00001e0a 00001ba6 00001e0a 00001e0a     ................
    61ac:	00001e0a 00001e0a 00001e0a 00001e0a     ................
    61bc:	00001e0a 00001e0a 00001e0a 00001e0a     ................
    61cc:	00001e0a 00001e0a 00001e0a 00001e0a     ................
    61dc:	00001e0a 00001bb6 00001e0a 00001e0a     ................
    61ec:	00001e0a 00001e0a 00001e0a 00001e0a     ................
    61fc:	00001e0a 00001e0a 00001e0a 00001e0a     ................
    620c:	00001e0a 00001e0a 00001e0a 00001e0a     ................
    621c:	00001e0a 00001bae 00001bc6 00001b8e     ................
    622c:	00001b9e 00001b96 00000002 00000003     ................
    623c:	00000028 00000029 00000004 00000005     (...)...........
    624c:	00000006 00000007 00000020 00000021     ........ ...!...
    625c:	00000022 00000023 00000024 00000025     "...#...$...%...
    626c:	00000026 00000027 00000008 00000009     &...'...........
    627c:	0000000a 0000000b 42000800 42000c00     ...........B...B
    628c:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    629c:	00002942 0000293e 0000293e 000029a4     B)..>)..>)...)..
    62ac:	000029a4 00002956 00002948 0000295c     .)..V)..H)..\)..
    62bc:	00002992 00002b64 00002b44 00002b44     .)..d+..D+..D+..
    62cc:	00002bd0 00002b56 00002b72 00002b48     .+..V+..r+..H+..
    62dc:	00002b80 00002bc0                       .+...+..

000062e4 <CodePage437>:
	...
    661c:	01000000 06186080 18608001 60800106     .....`....`....`
    662c:	80010000 00000060 00000000 66986106     ....`........a.f
    663c:	98618619 00000000 00000000 00000000     ..a.............
    664c:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    665c:	1966fefb 00986186 00000000 80010000     ..f..a..........
    666c:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    667c:	00000000 04000000 29a60823 1820c106     ........#..).. .
    668c:	98200304 324c1165 00000008 00000000     .. .e.L2........
    669c:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    66ac:	0000f6d9 00000000 30c00000 00030618     ...........0....
    66bc:	000000c0 00000000 00000000 00000000     ................
    66cc:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    66dc:	10400002 00000000 01000000 02084000     ..@..........@..
    66ec:	06186000 18608001 00010208 00000040     .`....`.....@...
    66fc:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    670c:	80104290 00000000 00000000 00000000     .B..............
    671c:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    673c:	18000000 c0000306 00001040 00000000     ........@.......
    674c:	00000000 ff000000 0000e0bf 00000000     ................
	...
    6770:	030e3800 0000e080 00000000 08200000     .8............ .
    6780:	80000104 02041020 10408000 00000208     .... .....@.....
    6790:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    67a0:	63061b6c f8e0c318 00000000 00000000     l..c............
    67b0:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    67c0:	000000f8 00000000 c1f8e107 061860b0     .............`..
    67d0:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    67e0:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    67f0:	00f8e167 00000000 40000000 03070c30     g..........@0...
    6800:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    6810:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    6820:	e167a081 000000f8 00000000 60f8e003     ..g............`
    6830:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    6840:	00000000 fefb0f00 20608001 00010408     ..........` ....
    6850:	0c302080 00c00003 00000000 e0030000     . 0.............
    6860:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    6870:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    6880:	0618609f e1c70003 000000f0 00000000     .`..............
    6890:	38000000 e080030e 00000000 030e3800     ...8.........8..
    68a0:	0000e080 00000000 00000000 80030e38     ............8...
    68b0:	000000e0 0e380000 40c00003 00000010     ......8....@....
    68c0:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    68d0:	0c300003 00000000 00000000 00000000     ..0.............
    68e0:	00fefb0f fefb0f00 00000000 00000000     ................
    68f0:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    6900:	0c0c3030 00000003 00000000 f8e10700     00..............
    6910:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    6920:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    6930:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    6940:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    6950:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    6960:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    6970:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    6980:	00f8e063 00000000 c30f0000 861966f0     c............f..
    6990:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    69a0:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    69b0:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    69c0:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    69d0:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    69e0:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    69f0:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    6a00:	00000000 07000000 0618f8e1 18608001     ..............`.
    6a10:	60800106 e1070618 000000f8 00000000     ...`............
    6a20:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    6a30:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    6a40:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    6a50:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    6a60:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    6a70:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    6a80:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    6a90:	ecb0c31e 0000061b 00000000 f8e00300     ................
    6aa0:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    6ab0:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    6ac0:	c000038c 00030c30 00000000 07000000     ....0...........
    6ad0:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    6ae0:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    6af0:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    6b00:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    6b10:	00f8e167 00000000 fb0f0000 000208fe     g...............
    6b20:	02082080 08208000 20800002 00000000     . .... .... ....
    6b30:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    6b40:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    6b50:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    6b60:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    6b70:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    6b80:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    6b90:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    6ba0:	20c00107 80000208 00000020 00000000     ... .... .......
    6bb0:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    6bc0:	0000fefb 00000000 f8e00300 00030c30     ............0...
    6bd0:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    6be0:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    6bf0:	0618c000 00000000 07000000 030cf0c1     ................
    6c00:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    6c10:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    6c3c:	00fefb0f 00000000 80030000 00030ce0     ................
    6c4c:	00001860 00000000 00000000 00000000     `...............
	...
    6c64:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    6c74:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    6c84:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    6c94:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    6ca4:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    6cb4:	c3061bec f6d9e7b0 00000000 00000000     ................
    6cc4:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    6cd4:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    6ce4:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    6cf4:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    6d04:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    6d14:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    6d24:	01000000 00006080 18e08003 60800106     .....`.........`
    6d34:	e1070618 000000f8 00000000 00186000     .............`..
    6d44:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    6d54:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    6d64:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    6d74:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    6d90:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    6da8:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    6dc0:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    6dd8:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    6de8:	02082080 00000000 00000000 c1fae803     . ..............
    6df8:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    6e08:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    6e18:	00000003 00000000 00000000 e1070000     ................
    6e28:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    6e38:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    6e48:	30c0c00c 00000000 00000000 00000000     ...0............
    6e58:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    6e70:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    6e88:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    6ea0:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    6ebc:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    6ecc:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    6edc:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    6eec:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    6efc:	00000000 80010000 01061860 06186080     ........`....`..
    6f0c:	18608001 60800106 00000000 0f000000     ..`....`........
    6f1c:	0208c003 0cc00003 c0000303 030f0208     ................
    6f2c:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    6f64:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    6f74:	f8e06398 00000608 00000000 00669801     .c............f.
    6f84:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    6f94:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    6fa4:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    6fb4:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    6fcc:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    6fe4:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    6ff4:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    7004:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    7014:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    7024:	04fef907 00000003 00000000 07001420     ............ ...
    7034:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    7044:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    7054:	f10730c0 000000fc 00000000 18c00000     .0..............
    7064:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    7074:	00000000 98610600 80030000 010618e0     ......a.........
    7084:	06186080 00f8e107 00000000 00000000     .`..............
    7094:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    70ac:	0018c000 18e08003 60800106 e1070618     ...........`....
    70bc:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    70cc:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    70dc:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    70ec:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    70fc:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    7114:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    7124:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    7134:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    7144:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    7154:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    7164:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    7174:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    7184:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    7194:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    71a4:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    71b4:	00f6d9c7 00000000 01000000 0c006698     .............f..
    71c4:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    71d4:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    71e4:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    71f4:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    7204:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    7214:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    7224:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    7234:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    7244:	20e00302 80800f08 00000020 00000000     ... .... .......
    7254:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    7264:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    7274:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    7284:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    7294:	fef823b0 00000000 00000000 000060c0     .#...........`..
    72a4:	18e08003 60800106 e1070618 000000f8     .......`........
    72b4:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    72c4:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    72d4:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    72ec:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    72fc:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    730c:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    731c:	1e08c003 00e08308 000080ff 00000000     ................
	...
    7334:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    7350:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    7360:	00c00f3f 00000000 00000000 ff000000     ?...............
    7370:	0003ecbf 00000000 00000000 00000000     ................
	...
    7388:	18e0bfff 00000006 00000000 00000000     ................
    7398:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    73a8:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    73b8:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    73c8:	00000000 06180000 18000000 60800106     ...............`
    73d8:	80010618 00061860 00000000 00000000     ....`...........
    73e8:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    7400:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    7410:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    7420:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    7430:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    7440:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    7450:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    7460:	20800002 80000208 00020820 02082080     ... .... .... ..
    7470:	08208000 20800002 80000208 00020820     .. .... .... ...
    7480:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    7490:	00020820 02082080 f8208000 20800f02      .... .... .... 
    74a0:	80000208 00020820 05142080 14504001     .... .... ...@P.
    74b0:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    74c0:	00504001 00000000 00000000 013f0000     .@P...........?.
    74d0:	05145040 14504001 50400105 00000000     @P...@P...@P....
    74e0:	00000000 02f80000 0820800f 20800002     .......... .... 
    74f0:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    7500:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    7510:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    7520:	05145040 00504001 00000000 00000000     @P...@P.........
    7530:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    7540:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    7558:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    7570:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    7594:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    75a4:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    75bc:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    75e0:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    75f0:	20800002 80000208 f0030820 02082080     ... .... .... ..
    7600:	08208000 20800002 00000000 00000000     .. .... ........
    7610:	3f000000 000000f0 00000000 00000000     ...?............
    7620:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    7630:	80000208 00020820 02082080 08208000     .... .... .... .
    7640:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    7650:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    7660:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    7670:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    768c:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    769c:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    76c0:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    76d0:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    76e0:	50400105 40010514 00000050 00000000     ..@P...@P.......
    76f0:	ff000000 00fc0fc0 00000000 00000000     ................
    7700:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    7710:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    7720:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    7730:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    7740:	000000f0 00000000 00000000 00000000     ................
    7750:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    7760:	00020820 00002080 00000000 00000000      .... ..........
    7770:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    7780:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    7798:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    77b8:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    77c8:	00002080 00000000 00000000 40f10700     . .............@
    77d8:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    77e8:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    77f8:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    7808:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    7818:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    7838:	80f00300 00020820 02082080 ff208000     .... .... .... .
    7848:	ffffffff ffffffff ffffffff ffffffff     ................
    7858:	ffffffff ffffffff 00000000 00000000     ................
    7868:	3f000000 ffffffff ffffffff ffffffff     ...?............
    7878:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    7888:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    7898:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    78a8:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    78cc:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    78dc:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    78ec:	63c61861 000000f8 00000000 ff000000     a..c............
    78fc:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    7918:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    7928:	fb0f0000 06b080fe 0618c000 c0800103     ................
    7938:	fefb2f20 00000000 00000000 00000000      /..............
    7948:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    7960:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    7970:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    7980:	06186080 00608001 00000000 00000000     .`....`.........
    7990:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    79a0:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    79b0:	061becbf e0c31863 000000f8 00000000     ....c...........
    79c0:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    79d0:	00008e33 00000000 fef80300 e1070318     3...............
    79e0:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    79f0:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    7a00:	00204295 00000000 00000000 07000000     .B .............
    7a10:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    7a20:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    7a30:	03186000 0000f8e0 00000000 00000000     .`..............
    7a40:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    7a50:	000060b0 00000000 0f000000 0000fefb     .`..............
    7a60:	00fefb0f fefb0f00 00000000 00000000     ................
    7a70:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    7a80:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    7a90:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    7aa0:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    7ab0:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    7ac0:	02082080 08208000 20800002 80000208     . .... .... ....
    7ad0:	00020820 02082080 08208000 20800002      .... .... .... 
    7ae0:	80000208 09240820 00008001 18000000     .... .$.........
    7af0:	00000006 00e0bfff 00061800 00000000     ................
	...
    7b08:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    7b20:	01092460 00000080 00000000 00000000     `$..............
	...
    7b44:	80030e38 00000000 00000000 00000000     8...............
	...
    7b5c:	01000000 00006080 00000000 0f000000     .....`..........
    7b6c:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    7b7c:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    7b98:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    7bbc:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    7be4:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    7bf4:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    7c04:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    7c14:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    7c24:	0008006d 00000a7f 0009001b 47552600     m............&UG
    7c34:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    7c44:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    7c54:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    7c64:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    7c74:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    7c84:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    7c94:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    7ca4:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    7cb4:	0008004d 00000a7f 0009001b 07150000     M...............
    7cc4:	1100000a 00000000 000b0809 1a001700     ................
    7cd4:	0f000000 0500000a 00001801 1f001000     ................
    7ce4:	03131200 1b000000 14000000 000e1604     ................
    7cf4:	1c001d1e 02061900 0008000d 00000a00     ................

00007d04 <kb_col>:
    7d04:	00010000 00020000 00040000 00080000     ................
    7d14:	00100000 00200000 08000000              ...... .....

00007d20 <kb_col_index>:
    7d20:	00000010 00000011 00000012 00000013     ................
    7d30:	00000014 00000015 0000001b              ............

00007d3c <kb_row>:
    7d3c:	00000004 00000008 00000010 00000020     ............ ...
    7d4c:	00000040 00000080 00000400 00000800     @...............
    7d5c:	00001000 00002000                       ..... ..

00007d64 <kb_row_index>:
    7d64:	00000002 00000003 00000004 00000005     ................
    7d74:	00000006 00000007 0000000a 0000000b     ................
    7d84:	0000000c 0000000d                       ........

00007d8c <beelzebub.12957>:
    7d8c:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    7d9c:	64012201 d4019201 08020702 5f023402     .".d.........4._
    7dac:	94027802 bb02a602 db02ca02 f902e802     .x..............
    7dbc:	7f031f03                                ....

00007dc0 <belial.12954>:
    7dc0:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    7dd0:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    7de0:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    7df0:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    7e00:	35c9c9c9 0000363a                       ...5:6..

00007e08 <lucifer.12956>:
    7e08:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    7e18:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    7e28:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    7e38:	00cc0008 01707005 02030303 02d00000     .....pp.........
    7e48:	00505050 00000055                       PPP.U...

00007e50 <mulciber.12955>:
    7e50:	03020100 02010004 00020100 01000201     ................
    7e60:	02010002 00020100 01000201 01000002     ................
    7e70:	02010000 00020100 01000201 03020100     ................
    7e80:	00000004 01000100 01000302 02010002     ................
    7e90:	00000403 00000000 65530d0a 6c616972     ..........Serial
    7ea0:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00007eb0 <_global_impure_ptr>:
    7eb0:	20000178 33323130 37363534 62613938     x.. 0123456789ab
    7ec0:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    7ed0:	76757473 7a797877 00000000              stuvwxyz....

00007edc <__sf_fake_stderr>:
	...

00007efc <__sf_fake_stdin>:
	...

00007f1c <__sf_fake_stdout>:
	...
    7f3c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7f4c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7f5c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7f6c:	00006665                                ef..

00007f70 <_init>:
    7f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f72:	46c0      	nop			; (mov r8, r8)
    7f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7f76:	bc08      	pop	{r3}
    7f78:	469e      	mov	lr, r3
    7f7a:	4770      	bx	lr

00007f7c <__init_array_start>:
    7f7c:	000000dd 	.word	0x000000dd

00007f80 <_fini>:
    7f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f82:	46c0      	nop			; (mov r8, r8)
    7f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7f86:	bc08      	pop	{r3}
    7f88:	469e      	mov	lr, r3
    7f8a:	4770      	bx	lr

00007f8c <__fini_array_start>:
    7f8c:	000000b5 	.word	0x000000b5
