
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007458  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00007458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000958  200001dc  00007634  000201dc  2**2
                  ALLOC
  3 .stack        00002004  20000b34  00007f8c  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003cf0a  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005cf3  00000000  00000000  0005d167  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006cfd  00000000  00000000  00062e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008d0  00000000  00000000  00069b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a10  00000000  00000000  0006a427  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fb41  00000000  00000000  0006ae37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015079  00000000  00000000  0008a978  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009052b  00000000  00000000  0009f9f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d44  00000000  00000000  0012ff1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	38 2b 00 20 a1 26 00 00 9d 26 00 00 9d 26 00 00     8+. .&...&...&..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	9d 26 00 00 00 00 00 00 00 00 00 00 9d 26 00 00     .&...........&..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	29 37 00 00 9d 26 00 00 9d 26 00 00 9d 26 00 00     )7...&...&...&..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	9d 26 00 00 9d 26 00 00 9d 26 00 00 9d 26 00 00     .&...&...&...&..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	9d 26 00 00 9d 26 00 00 b9 18 00 00 c9 18 00 00     .&...&..........
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	d9 18 00 00 e9 18 00 00 f9 18 00 00 09 19 00 00     ................
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	9d 26 00 00 9d 26 00 00 9d 26 00 00 9d 26 00 00     .&...&...&...&..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	9d 26 00 00 9d 26 00 00 9d 26 00 00 9d 26 00 00     .&...&...&...&..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	ed 13 00 00 9d 26 00 00 9d 26 00 00 9d 26 00 00     .....&...&...&..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	9d 26 00 00 00 00 00 00                             .&......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00007458 	.word	0x00007458

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00007458 	.word	0x00007458
     10c:	00007458 	.word	0x00007458
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	00003e89 	.word	0x00003e89

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	00003de1 	.word	0x00003de1

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	00003de1 	.word	0x00003de1

000001d0 <isEmptyParser>:
int rearParam = -1;
int rearParser = -1;

bool isEmptyParser(void)
{
	if(frontParser == -1)
     1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <isEmptyParser+0x10>)
     1d2:	6818      	ldr	r0, [r3, #0]
     1d4:	3001      	adds	r0, #1
     1d6:	4243      	negs	r3, r0
     1d8:	4158      	adcs	r0, r3
     1da:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     1dc:	4770      	bx	lr
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	20000008 	.word	0x20000008

000001e4 <dequeueParser>:
}
char dequeueParser(void)
{
	char temp;
	
	temp = queueParser[frontParser];
     1e4:	4a08      	ldr	r2, [pc, #32]	; (208 <dequeueParser+0x24>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	4908      	ldr	r1, [pc, #32]	; (20c <dequeueParser+0x28>)
     1ea:	5cc8      	ldrb	r0, [r1, r3]
	frontParser++;
     1ec:	3301      	adds	r3, #1
     1ee:	6013      	str	r3, [r2, #0]
	if(frontParser > rearParser)
     1f0:	4a07      	ldr	r2, [pc, #28]	; (210 <dequeueParser+0x2c>)
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	4293      	cmp	r3, r2
     1f6:	dd05      	ble.n	204 <dequeueParser+0x20>
	{
		frontParser = rearParser = -1;
     1f8:	2301      	movs	r3, #1
     1fa:	425b      	negs	r3, r3
     1fc:	4a04      	ldr	r2, [pc, #16]	; (210 <dequeueParser+0x2c>)
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <dequeueParser+0x24>)
     202:	6013      	str	r3, [r2, #0]
	}
	return temp;
}
     204:	4770      	bx	lr
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000008 	.word	0x20000008
     20c:	200002d0 	.word	0x200002d0
     210:	20000010 	.word	0x20000010

00000214 <enqueueParser>:
void enqueueParser(char data)
{
	if(frontParser == -1)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <enqueueParser+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	3301      	adds	r3, #1
     21a:	d006      	beq.n	22a <enqueueParser+0x16>
	{
		frontParser = 0;
	}
	rearParser++;
     21c:	4a06      	ldr	r2, [pc, #24]	; (238 <enqueueParser+0x24>)
     21e:	6813      	ldr	r3, [r2, #0]
     220:	3301      	adds	r3, #1
     222:	6013      	str	r3, [r2, #0]
	queueParser[rearParser] = data;
     224:	4a05      	ldr	r2, [pc, #20]	; (23c <enqueueParser+0x28>)
     226:	54d0      	strb	r0, [r2, r3]
}
     228:	4770      	bx	lr
		frontParser = 0;
     22a:	2200      	movs	r2, #0
     22c:	4b01      	ldr	r3, [pc, #4]	; (234 <enqueueParser+0x20>)
     22e:	601a      	str	r2, [r3, #0]
     230:	e7f4      	b.n	21c <enqueueParser+0x8>
     232:	46c0      	nop			; (mov r8, r8)
     234:	20000008 	.word	0x20000008
     238:	20000010 	.word	0x20000010
     23c:	200002d0 	.word	0x200002d0

00000240 <clearQueues>:
	queueParam[rearParam] = data;

}

void clearQueues(void)
{
     240:	b530      	push	{r4, r5, lr}

	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     242:	4b0e      	ldr	r3, [pc, #56]	; (27c <clearQueues+0x3c>)
     244:	6818      	ldr	r0, [r3, #0]
     246:	1e43      	subs	r3, r0, #1
     248:	2b00      	cmp	r3, #0
     24a:	dd0b      	ble.n	264 <clearQueues+0x24>
     24c:	0018      	movs	r0, r3
     24e:	2300      	movs	r3, #0
	{
		queueParam[i] = 0;
     250:	4d0b      	ldr	r5, [pc, #44]	; (280 <clearQueues+0x40>)
     252:	2200      	movs	r2, #0
		queueParser[i] = 0;
     254:	4c0b      	ldr	r4, [pc, #44]	; (284 <clearQueues+0x44>)
		queueParam[i] = 0;
     256:	1959      	adds	r1, r3, r5
     258:	700a      	strb	r2, [r1, #0]
		queueParser[i] = 0;
     25a:	1919      	adds	r1, r3, r4
     25c:	700a      	strb	r2, [r1, #0]
	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     25e:	3301      	adds	r3, #1
     260:	4283      	cmp	r3, r0
     262:	d1f8      	bne.n	256 <clearQueues+0x16>
	}
	
	frontParser = -1;
     264:	2301      	movs	r3, #1
     266:	425b      	negs	r3, r3
     268:	4a07      	ldr	r2, [pc, #28]	; (288 <clearQueues+0x48>)
     26a:	6013      	str	r3, [r2, #0]
	frontParam = -1;
     26c:	4a07      	ldr	r2, [pc, #28]	; (28c <clearQueues+0x4c>)
     26e:	6013      	str	r3, [r2, #0]
	rearParam = -1;
     270:	4a07      	ldr	r2, [pc, #28]	; (290 <clearQueues+0x50>)
     272:	6013      	str	r3, [r2, #0]
	rearParser = -1;
     274:	4a07      	ldr	r2, [pc, #28]	; (294 <clearQueues+0x54>)
     276:	6013      	str	r3, [r2, #0]
     278:	bd30      	pop	{r4, r5, pc}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	20000000 	.word	0x20000000
     280:	200002e4 	.word	0x200002e4
     284:	200002d0 	.word	0x200002d0
     288:	20000008 	.word	0x20000008
     28c:	20000004 	.word	0x20000004
     290:	2000000c 	.word	0x2000000c
     294:	20000010 	.word	0x20000010

00000298 <CSIignoreState>:
	}
}

void CSIignoreState(uint8_t character)
{
	if(character == 0x1B)
     298:	281b      	cmp	r0, #27
     29a:	d003      	beq.n	2a4 <CSIignoreState+0xc>
	{
		currentState = stateGround;
	}
	else
	{
		currentState = stateGround;
     29c:	2200      	movs	r2, #0
     29e:	4b03      	ldr	r3, [pc, #12]	; (2ac <CSIignoreState+0x14>)
     2a0:	701a      	strb	r2, [r3, #0]
	}
}
     2a2:	4770      	bx	lr
		currentState = stateGround;
     2a4:	2200      	movs	r2, #0
     2a6:	4b01      	ldr	r3, [pc, #4]	; (2ac <CSIignoreState+0x14>)
     2a8:	701a      	strb	r2, [r3, #0]
     2aa:	e7fa      	b.n	2a2 <CSIignoreState+0xa>
     2ac:	200002c1 	.word	0x200002c1

000002b0 <SC>:
/************************************************************************/

void SC()
{
	//Save cursor position
	DECSCX = xCharPos;
     2b0:	4b05      	ldr	r3, [pc, #20]	; (2c8 <SC+0x18>)
     2b2:	881a      	ldrh	r2, [r3, #0]
     2b4:	4b05      	ldr	r3, [pc, #20]	; (2cc <SC+0x1c>)
     2b6:	701a      	strb	r2, [r3, #0]
	DECSCY = yCharPos;
     2b8:	4b05      	ldr	r3, [pc, #20]	; (2d0 <SC+0x20>)
     2ba:	881a      	ldrh	r2, [r3, #0]
     2bc:	4b05      	ldr	r3, [pc, #20]	; (2d4 <SC+0x24>)
     2be:	701a      	strb	r2, [r3, #0]
	currentState = stateGround;
     2c0:	2200      	movs	r2, #0
     2c2:	4b05      	ldr	r3, [pc, #20]	; (2d8 <SC+0x28>)
     2c4:	701a      	strb	r2, [r3, #0]
}
     2c6:	4770      	bx	lr
     2c8:	200002bc 	.word	0x200002bc
     2cc:	200001f8 	.word	0x200001f8
     2d0:	200002be 	.word	0x200002be
     2d4:	200001f9 	.word	0x200001f9
     2d8:	200002c1 	.word	0x200002c1

000002dc <RC>:

void RC()
{
     2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Restore cursor to saved position
	
	char tempCharacter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     2de:	4c0f      	ldr	r4, [pc, #60]	; (31c <RC+0x40>)
     2e0:	4f0f      	ldr	r7, [pc, #60]	; (320 <RC+0x44>)
     2e2:	883a      	ldrh	r2, [r7, #0]
     2e4:	4e0f      	ldr	r6, [pc, #60]	; (324 <RC+0x48>)
     2e6:	8831      	ldrh	r1, [r6, #0]
     2e8:	0053      	lsls	r3, r2, #1
     2ea:	189b      	adds	r3, r3, r2
     2ec:	00db      	lsls	r3, r3, #3
     2ee:	18e3      	adds	r3, r4, r3
     2f0:	5c58      	ldrb	r0, [r3, r1]
     2f2:	4d0d      	ldr	r5, [pc, #52]	; (328 <RC+0x4c>)
     2f4:	47a8      	blx	r5
	xCharPos = DECSCX;
     2f6:	4b0d      	ldr	r3, [pc, #52]	; (32c <RC+0x50>)
     2f8:	781a      	ldrb	r2, [r3, #0]
     2fa:	803a      	strh	r2, [r7, #0]
	yCharPos = DECSCY;
     2fc:	4b0c      	ldr	r3, [pc, #48]	; (330 <RC+0x54>)
     2fe:	7819      	ldrb	r1, [r3, #0]
     300:	8031      	strh	r1, [r6, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     302:	0053      	lsls	r3, r2, #1
     304:	189b      	adds	r3, r3, r2
     306:	00db      	lsls	r3, r3, #3
     308:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     30a:	5c58      	ldrb	r0, [r3, r1]
     30c:	47a8      	blx	r5
	blinkCursor();
     30e:	4b09      	ldr	r3, [pc, #36]	; (334 <RC+0x58>)
     310:	4798      	blx	r3
	currentState = stateGround;
     312:	2200      	movs	r2, #0
     314:	4b08      	ldr	r3, [pc, #32]	; (338 <RC+0x5c>)
     316:	701a      	strb	r2, [r3, #0]
}
     318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	20000384 	.word	0x20000384
     320:	200002bc 	.word	0x200002bc
     324:	200002be 	.word	0x200002be
     328:	00002855 	.word	0x00002855
     32c:	200001f8 	.word	0x200001f8
     330:	200001f9 	.word	0x200001f9
     334:	0000293d 	.word	0x0000293d
     338:	200002c1 	.word	0x200002c1

0000033c <IND>:

void IND()
{
     33c:	b570      	push	{r4, r5, r6, lr}
	//performs newline() if row = 24
	
	char tempCharacter;
	int xTemp = 0;
	
	if(yCharPos < 23)
     33e:	4b19      	ldr	r3, [pc, #100]	; (3a4 <IND+0x68>)
     340:	881a      	ldrh	r2, [r3, #0]
     342:	2a16      	cmp	r2, #22
     344:	d914      	bls.n	370 <IND+0x34>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		xTemp = xCharPos;
     346:	4d18      	ldr	r5, [pc, #96]	; (3a8 <IND+0x6c>)
     348:	882c      	ldrh	r4, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     34a:	0063      	lsls	r3, r4, #1
     34c:	191b      	adds	r3, r3, r4
     34e:	00db      	lsls	r3, r3, #3
     350:	4916      	ldr	r1, [pc, #88]	; (3ac <IND+0x70>)
     352:	18cb      	adds	r3, r1, r3
     354:	5c98      	ldrb	r0, [r3, r2]
     356:	4e16      	ldr	r6, [pc, #88]	; (3b0 <IND+0x74>)
     358:	47b0      	blx	r6
		newLine();
     35a:	4b16      	ldr	r3, [pc, #88]	; (3b4 <IND+0x78>)
     35c:	4798      	blx	r3
		drawChar(0x00);
     35e:	2000      	movs	r0, #0
     360:	47b0      	blx	r6
		xCharPos = xTemp;
     362:	802c      	strh	r4, [r5, #0]
		blinkCursor();
     364:	4b14      	ldr	r3, [pc, #80]	; (3b8 <IND+0x7c>)
     366:	4798      	blx	r3
	}
		
		currentState = stateGround;	
     368:	2200      	movs	r2, #0
     36a:	4b14      	ldr	r3, [pc, #80]	; (3bc <IND+0x80>)
     36c:	701a      	strb	r2, [r3, #0]
}
     36e:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     370:	4c0e      	ldr	r4, [pc, #56]	; (3ac <IND+0x70>)
     372:	4d0d      	ldr	r5, [pc, #52]	; (3a8 <IND+0x6c>)
     374:	8829      	ldrh	r1, [r5, #0]
     376:	004b      	lsls	r3, r1, #1
     378:	185b      	adds	r3, r3, r1
     37a:	00db      	lsls	r3, r3, #3
     37c:	18e3      	adds	r3, r4, r3
     37e:	5c98      	ldrb	r0, [r3, r2]
     380:	4e0b      	ldr	r6, [pc, #44]	; (3b0 <IND+0x74>)
     382:	47b0      	blx	r6
		yCharPos++;
     384:	4a07      	ldr	r2, [pc, #28]	; (3a4 <IND+0x68>)
     386:	8813      	ldrh	r3, [r2, #0]
     388:	3301      	adds	r3, #1
     38a:	b29b      	uxth	r3, r3
     38c:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     38e:	8829      	ldrh	r1, [r5, #0]
     390:	004a      	lsls	r2, r1, #1
     392:	1852      	adds	r2, r2, r1
     394:	00d2      	lsls	r2, r2, #3
     396:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     398:	5ce0      	ldrb	r0, [r4, r3]
     39a:	47b0      	blx	r6
		blinkCursor();
     39c:	4b06      	ldr	r3, [pc, #24]	; (3b8 <IND+0x7c>)
     39e:	4798      	blx	r3
     3a0:	e7e2      	b.n	368 <IND+0x2c>
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	200002be 	.word	0x200002be
     3a8:	200002bc 	.word	0x200002bc
     3ac:	20000384 	.word	0x20000384
     3b0:	00002855 	.word	0x00002855
     3b4:	00002a99 	.word	0x00002a99
     3b8:	0000293d 	.word	0x0000293d
     3bc:	200002c1 	.word	0x200002c1

000003c0 <NEL>:

void NEL()
{
     3c0:	b570      	push	{r4, r5, r6, lr}
	//new line, moves down one line and to the
	//first column (CR,LF) scrolls if row = 24
	
	char tempCharacter;
	
	if(yCharPos < 23)
     3c2:	4b18      	ldr	r3, [pc, #96]	; (424 <NEL+0x64>)
     3c4:	881a      	ldrh	r2, [r3, #0]
     3c6:	2a16      	cmp	r2, #22
     3c8:	d915      	bls.n	3f6 <NEL+0x36>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     3ca:	4c17      	ldr	r4, [pc, #92]	; (428 <NEL+0x68>)
     3cc:	8821      	ldrh	r1, [r4, #0]
     3ce:	004b      	lsls	r3, r1, #1
     3d0:	185b      	adds	r3, r3, r1
     3d2:	00db      	lsls	r3, r3, #3
     3d4:	4915      	ldr	r1, [pc, #84]	; (42c <NEL+0x6c>)
     3d6:	18cb      	adds	r3, r1, r3
     3d8:	5c98      	ldrb	r0, [r3, r2]
     3da:	4d15      	ldr	r5, [pc, #84]	; (430 <NEL+0x70>)
     3dc:	47a8      	blx	r5
		newLine();
     3de:	4b15      	ldr	r3, [pc, #84]	; (434 <NEL+0x74>)
     3e0:	4798      	blx	r3
		drawChar(0x00);
     3e2:	2000      	movs	r0, #0
     3e4:	47a8      	blx	r5
		xCharPos = 0;
     3e6:	2300      	movs	r3, #0
     3e8:	8023      	strh	r3, [r4, #0]
		blinkCursor();
     3ea:	4b13      	ldr	r3, [pc, #76]	; (438 <NEL+0x78>)
     3ec:	4798      	blx	r3
	}
		
	currentState = stateGround;
     3ee:	2200      	movs	r2, #0
     3f0:	4b12      	ldr	r3, [pc, #72]	; (43c <NEL+0x7c>)
     3f2:	701a      	strb	r2, [r3, #0]
}
     3f4:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     3f6:	4c0d      	ldr	r4, [pc, #52]	; (42c <NEL+0x6c>)
     3f8:	4d0b      	ldr	r5, [pc, #44]	; (428 <NEL+0x68>)
     3fa:	8829      	ldrh	r1, [r5, #0]
     3fc:	004b      	lsls	r3, r1, #1
     3fe:	185b      	adds	r3, r3, r1
     400:	00db      	lsls	r3, r3, #3
     402:	18e3      	adds	r3, r4, r3
     404:	5c98      	ldrb	r0, [r3, r2]
     406:	4e0a      	ldr	r6, [pc, #40]	; (430 <NEL+0x70>)
     408:	47b0      	blx	r6
		yCharPos++;
     40a:	4a06      	ldr	r2, [pc, #24]	; (424 <NEL+0x64>)
     40c:	8813      	ldrh	r3, [r2, #0]
     40e:	3301      	adds	r3, #1
     410:	b29b      	uxth	r3, r3
     412:	8013      	strh	r3, [r2, #0]
		xCharPos = 0;
     414:	2200      	movs	r2, #0
     416:	802a      	strh	r2, [r5, #0]
		drawChar(tempCharacter);
     418:	5ce0      	ldrb	r0, [r4, r3]
     41a:	47b0      	blx	r6
		blinkCursor();
     41c:	4b06      	ldr	r3, [pc, #24]	; (438 <NEL+0x78>)
     41e:	4798      	blx	r3
     420:	e7e5      	b.n	3ee <NEL+0x2e>
     422:	46c0      	nop			; (mov r8, r8)
     424:	200002be 	.word	0x200002be
     428:	200002bc 	.word	0x200002bc
     42c:	20000384 	.word	0x20000384
     430:	00002855 	.word	0x00002855
     434:	00002a99 	.word	0x00002a99
     438:	0000293d 	.word	0x0000293d
     43c:	200002c1 	.word	0x200002c1

00000440 <RI>:

void RI()
{
     440:	b570      	push	{r4, r5, r6, lr}
	//Reverse Index
	//Moves the cursor to the same horizontal position on the preceding line
	
	char tempCharacter;
	
	if(yCharPos == 0)
     442:	4b10      	ldr	r3, [pc, #64]	; (484 <RI+0x44>)
     444:	881a      	ldrh	r2, [r3, #0]
     446:	2a00      	cmp	r2, #0
     448:	d103      	bne.n	452 <RI+0x12>
		yCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     44a:	2200      	movs	r2, #0
     44c:	4b0e      	ldr	r3, [pc, #56]	; (488 <RI+0x48>)
     44e:	701a      	strb	r2, [r3, #0]
}
     450:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     452:	4c0e      	ldr	r4, [pc, #56]	; (48c <RI+0x4c>)
     454:	4d0e      	ldr	r5, [pc, #56]	; (490 <RI+0x50>)
     456:	8829      	ldrh	r1, [r5, #0]
     458:	004b      	lsls	r3, r1, #1
     45a:	185b      	adds	r3, r3, r1
     45c:	00db      	lsls	r3, r3, #3
     45e:	18e3      	adds	r3, r4, r3
     460:	5c98      	ldrb	r0, [r3, r2]
     462:	4e0c      	ldr	r6, [pc, #48]	; (494 <RI+0x54>)
     464:	47b0      	blx	r6
		yCharPos--;
     466:	4a07      	ldr	r2, [pc, #28]	; (484 <RI+0x44>)
     468:	8813      	ldrh	r3, [r2, #0]
     46a:	3b01      	subs	r3, #1
     46c:	b29b      	uxth	r3, r3
     46e:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     470:	8829      	ldrh	r1, [r5, #0]
     472:	004a      	lsls	r2, r1, #1
     474:	1852      	adds	r2, r2, r1
     476:	00d2      	lsls	r2, r2, #3
     478:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     47a:	5ce0      	ldrb	r0, [r4, r3]
     47c:	47b0      	blx	r6
		blinkCursor();
     47e:	4b06      	ldr	r3, [pc, #24]	; (498 <RI+0x58>)
     480:	4798      	blx	r3
     482:	e7e2      	b.n	44a <RI+0xa>
     484:	200002be 	.word	0x200002be
     488:	200002c1 	.word	0x200002c1
     48c:	20000384 	.word	0x20000384
     490:	200002bc 	.word	0x200002bc
     494:	00002855 	.word	0x00002855
     498:	0000293d 	.word	0x0000293d

0000049c <RIS>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     49c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     4a0:	4a03      	ldr	r2, [pc, #12]	; (4b0 <RIS+0x14>)
     4a2:	4b04      	ldr	r3, [pc, #16]	; (4b4 <RIS+0x18>)
     4a4:	60da      	str	r2, [r3, #12]
     4a6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	e7fd      	b.n	4aa <RIS+0xe>
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	05fa0004 	.word	0x05fa0004
     4b4:	e000ed00 	.word	0xe000ed00

000004b8 <escState>:
{
     4b8:	b510      	push	{r4, lr}
	if(character == 0x37)		//ESC + 7 - (DECSC) -
     4ba:	2837      	cmp	r0, #55	; 0x37
     4bc:	d010      	beq.n	4e0 <escState+0x28>
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     4be:	2838      	cmp	r0, #56	; 0x38
     4c0:	d011      	beq.n	4e6 <escState+0x2e>
	else if(character == 0x44)		//ESC + D - (IND) - 
     4c2:	2844      	cmp	r0, #68	; 0x44
     4c4:	d012      	beq.n	4ec <escState+0x34>
	else if(character == 0x45)		//ESC + E - (NEL) -
     4c6:	2845      	cmp	r0, #69	; 0x45
     4c8:	d013      	beq.n	4f2 <escState+0x3a>
	else if(character == 0x4D)		//ESC + M - (RI)
     4ca:	284d      	cmp	r0, #77	; 0x4d
     4cc:	d014      	beq.n	4f8 <escState+0x40>
	else if(character == 0x63)		//ESC + c - (RIS)
     4ce:	2863      	cmp	r0, #99	; 0x63
     4d0:	d015      	beq.n	4fe <escState+0x46>
	else if(character == 0x23 || character == 0x28)
     4d2:	2823      	cmp	r0, #35	; 0x23
     4d4:	d015      	beq.n	502 <escState+0x4a>
     4d6:	2828      	cmp	r0, #40	; 0x28
     4d8:	d013      	beq.n	502 <escState+0x4a>
	else if(character == 0x5B)
     4da:	285b      	cmp	r0, #91	; 0x5b
     4dc:	d017      	beq.n	50e <escState+0x56>
}
     4de:	bd10      	pop	{r4, pc}
		SC();
     4e0:	4b0d      	ldr	r3, [pc, #52]	; (518 <escState+0x60>)
     4e2:	4798      	blx	r3
     4e4:	e7fb      	b.n	4de <escState+0x26>
		RC();
     4e6:	4b0d      	ldr	r3, [pc, #52]	; (51c <escState+0x64>)
     4e8:	4798      	blx	r3
     4ea:	e7f8      	b.n	4de <escState+0x26>
		IND();			
     4ec:	4b0c      	ldr	r3, [pc, #48]	; (520 <escState+0x68>)
     4ee:	4798      	blx	r3
     4f0:	e7f5      	b.n	4de <escState+0x26>
		NEL();
     4f2:	4b0c      	ldr	r3, [pc, #48]	; (524 <escState+0x6c>)
     4f4:	4798      	blx	r3
     4f6:	e7f2      	b.n	4de <escState+0x26>
		RI();
     4f8:	4b0b      	ldr	r3, [pc, #44]	; (528 <escState+0x70>)
     4fa:	4798      	blx	r3
     4fc:	e7ef      	b.n	4de <escState+0x26>
		RIS();
     4fe:	4b0b      	ldr	r3, [pc, #44]	; (52c <escState+0x74>)
     500:	4798      	blx	r3
		stateEnterBuffer = character;
     502:	4b0b      	ldr	r3, [pc, #44]	; (530 <escState+0x78>)
     504:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     506:	2202      	movs	r2, #2
     508:	4b0a      	ldr	r3, [pc, #40]	; (534 <escState+0x7c>)
     50a:	701a      	strb	r2, [r3, #0]
     50c:	e7e7      	b.n	4de <escState+0x26>
		currentState = stateCSIentry;
     50e:	2203      	movs	r2, #3
     510:	4b08      	ldr	r3, [pc, #32]	; (534 <escState+0x7c>)
     512:	701a      	strb	r2, [r3, #0]
}
     514:	e7e3      	b.n	4de <escState+0x26>
     516:	46c0      	nop			; (mov r8, r8)
     518:	000002b1 	.word	0x000002b1
     51c:	000002dd 	.word	0x000002dd
     520:	0000033d 	.word	0x0000033d
     524:	000003c1 	.word	0x000003c1
     528:	00000441 	.word	0x00000441
     52c:	0000049d 	.word	0x0000049d
     530:	20000306 	.word	0x20000306
     534:	200002c1 	.word	0x200002c1

00000538 <CUU>:

/************************************************************************/
/*    CSI mnemonic functions                                            */
/************************************************************************/
void CUU() // Cursor Up
{
     538:	b570      	push	{r4, r5, r6, lr}
	{
		ring_get(paramBuffer, (int)parameter);
	}
	*/
	
	while(!isEmptyParser())
     53a:	4c16      	ldr	r4, [pc, #88]	; (594 <CUU+0x5c>)
	{
		printf("%c\n",dequeueParser());
     53c:	4d16      	ldr	r5, [pc, #88]	; (598 <CUU+0x60>)
	while(!isEmptyParser())
     53e:	e004      	b.n	54a <CUU+0x12>
		printf("%c\n",dequeueParser());
     540:	47a8      	blx	r5
     542:	0001      	movs	r1, r0
     544:	4815      	ldr	r0, [pc, #84]	; (59c <CUU+0x64>)
     546:	4b16      	ldr	r3, [pc, #88]	; (5a0 <CUU+0x68>)
     548:	4798      	blx	r3
	while(!isEmptyParser())
     54a:	47a0      	blx	r4
     54c:	2800      	cmp	r0, #0
     54e:	d0f7      	beq.n	540 <CUU+0x8>
	}
	
	if(yCharPos > 0)
     550:	4b14      	ldr	r3, [pc, #80]	; (5a4 <CUU+0x6c>)
     552:	881a      	ldrh	r2, [r3, #0]
     554:	2a00      	cmp	r2, #0
     556:	d103      	bne.n	560 <CUU+0x28>
		yCharPos = yCharPos - parameter;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     558:	2200      	movs	r2, #0
     55a:	4b13      	ldr	r3, [pc, #76]	; (5a8 <CUU+0x70>)
     55c:	701a      	strb	r2, [r3, #0]
}
     55e:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     560:	4c12      	ldr	r4, [pc, #72]	; (5ac <CUU+0x74>)
     562:	4d13      	ldr	r5, [pc, #76]	; (5b0 <CUU+0x78>)
     564:	8829      	ldrh	r1, [r5, #0]
     566:	004b      	lsls	r3, r1, #1
     568:	185b      	adds	r3, r3, r1
     56a:	00db      	lsls	r3, r3, #3
     56c:	18e3      	adds	r3, r4, r3
     56e:	5c98      	ldrb	r0, [r3, r2]
     570:	4e10      	ldr	r6, [pc, #64]	; (5b4 <CUU+0x7c>)
     572:	47b0      	blx	r6
		yCharPos = yCharPos - parameter;
     574:	4a0b      	ldr	r2, [pc, #44]	; (5a4 <CUU+0x6c>)
     576:	8813      	ldrh	r3, [r2, #0]
     578:	3b01      	subs	r3, #1
     57a:	b29b      	uxth	r3, r3
     57c:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     57e:	8829      	ldrh	r1, [r5, #0]
     580:	004a      	lsls	r2, r1, #1
     582:	1852      	adds	r2, r2, r1
     584:	00d2      	lsls	r2, r2, #3
     586:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     588:	5ce0      	ldrb	r0, [r4, r3]
     58a:	47b0      	blx	r6
		blinkCursor();
     58c:	4b0a      	ldr	r3, [pc, #40]	; (5b8 <CUU+0x80>)
     58e:	4798      	blx	r3
     590:	e7e2      	b.n	558 <CUU+0x20>
     592:	46c0      	nop			; (mov r8, r8)
     594:	000001d1 	.word	0x000001d1
     598:	000001e5 	.word	0x000001e5
     59c:	00005164 	.word	0x00005164
     5a0:	00004011 	.word	0x00004011
     5a4:	200002be 	.word	0x200002be
     5a8:	200002c1 	.word	0x200002c1
     5ac:	20000384 	.word	0x20000384
     5b0:	200002bc 	.word	0x200002bc
     5b4:	00002855 	.word	0x00002855
     5b8:	0000293d 	.word	0x0000293d

000005bc <CUD>:
void CUD() //Cursor Down
{
     5bc:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	if(yCharPos < 23)
     5be:	4b10      	ldr	r3, [pc, #64]	; (600 <CUD+0x44>)
     5c0:	881a      	ldrh	r2, [r3, #0]
     5c2:	2a16      	cmp	r2, #22
     5c4:	d903      	bls.n	5ce <CUD+0x12>
		yCharPos++;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     5c6:	2200      	movs	r2, #0
     5c8:	4b0e      	ldr	r3, [pc, #56]	; (604 <CUD+0x48>)
     5ca:	701a      	strb	r2, [r3, #0]
}
     5cc:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     5ce:	4c0e      	ldr	r4, [pc, #56]	; (608 <CUD+0x4c>)
     5d0:	4d0e      	ldr	r5, [pc, #56]	; (60c <CUD+0x50>)
     5d2:	8829      	ldrh	r1, [r5, #0]
     5d4:	004b      	lsls	r3, r1, #1
     5d6:	185b      	adds	r3, r3, r1
     5d8:	00db      	lsls	r3, r3, #3
     5da:	18e3      	adds	r3, r4, r3
     5dc:	5c98      	ldrb	r0, [r3, r2]
     5de:	4e0c      	ldr	r6, [pc, #48]	; (610 <CUD+0x54>)
     5e0:	47b0      	blx	r6
		yCharPos++;
     5e2:	4a07      	ldr	r2, [pc, #28]	; (600 <CUD+0x44>)
     5e4:	8813      	ldrh	r3, [r2, #0]
     5e6:	3301      	adds	r3, #1
     5e8:	b29b      	uxth	r3, r3
     5ea:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     5ec:	8829      	ldrh	r1, [r5, #0]
     5ee:	004a      	lsls	r2, r1, #1
     5f0:	1852      	adds	r2, r2, r1
     5f2:	00d2      	lsls	r2, r2, #3
     5f4:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     5f6:	5ce0      	ldrb	r0, [r4, r3]
     5f8:	47b0      	blx	r6
		blinkCursor();
     5fa:	4b06      	ldr	r3, [pc, #24]	; (614 <CUD+0x58>)
     5fc:	4798      	blx	r3
     5fe:	e7e2      	b.n	5c6 <CUD+0xa>
     600:	200002be 	.word	0x200002be
     604:	200002c1 	.word	0x200002c1
     608:	20000384 	.word	0x20000384
     60c:	200002bc 	.word	0x200002bc
     610:	00002855 	.word	0x00002855
     614:	0000293d 	.word	0x0000293d

00000618 <CUF>:
void CUF() //Cursor Forward
{
     618:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	if(xCharPos < 79)
     61a:	4b10      	ldr	r3, [pc, #64]	; (65c <CUF+0x44>)
     61c:	881b      	ldrh	r3, [r3, #0]
     61e:	2b4e      	cmp	r3, #78	; 0x4e
     620:	d903      	bls.n	62a <CUF+0x12>
		xCharPos++;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     622:	2200      	movs	r2, #0
     624:	4b0e      	ldr	r3, [pc, #56]	; (660 <CUF+0x48>)
     626:	701a      	strb	r2, [r3, #0]
}
     628:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     62a:	4c0e      	ldr	r4, [pc, #56]	; (664 <CUF+0x4c>)
     62c:	4d0e      	ldr	r5, [pc, #56]	; (668 <CUF+0x50>)
     62e:	8829      	ldrh	r1, [r5, #0]
     630:	005a      	lsls	r2, r3, #1
     632:	18d2      	adds	r2, r2, r3
     634:	00d2      	lsls	r2, r2, #3
     636:	18a2      	adds	r2, r4, r2
     638:	5c50      	ldrb	r0, [r2, r1]
     63a:	4e0c      	ldr	r6, [pc, #48]	; (66c <CUF+0x54>)
     63c:	47b0      	blx	r6
		xCharPos++;
     63e:	4a07      	ldr	r2, [pc, #28]	; (65c <CUF+0x44>)
     640:	8813      	ldrh	r3, [r2, #0]
     642:	3301      	adds	r3, #1
     644:	b29b      	uxth	r3, r3
     646:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     648:	8829      	ldrh	r1, [r5, #0]
     64a:	005a      	lsls	r2, r3, #1
     64c:	18d3      	adds	r3, r2, r3
     64e:	00db      	lsls	r3, r3, #3
     650:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     652:	5c58      	ldrb	r0, [r3, r1]
     654:	47b0      	blx	r6
		blinkCursor();
     656:	4b06      	ldr	r3, [pc, #24]	; (670 <CUF+0x58>)
     658:	4798      	blx	r3
     65a:	e7e2      	b.n	622 <CUF+0xa>
     65c:	200002bc 	.word	0x200002bc
     660:	200002c1 	.word	0x200002c1
     664:	20000384 	.word	0x20000384
     668:	200002be 	.word	0x200002be
     66c:	00002855 	.word	0x00002855
     670:	0000293d 	.word	0x0000293d

00000674 <CUB>:
void CUB() //Cursor Backward
{
     674:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	if(xCharPos > 0)
     676:	4b10      	ldr	r3, [pc, #64]	; (6b8 <CUB+0x44>)
     678:	881b      	ldrh	r3, [r3, #0]
     67a:	2b00      	cmp	r3, #0
     67c:	d103      	bne.n	686 <CUB+0x12>
		xCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     67e:	2200      	movs	r2, #0
     680:	4b0e      	ldr	r3, [pc, #56]	; (6bc <CUB+0x48>)
     682:	701a      	strb	r2, [r3, #0]
}
     684:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     686:	4c0e      	ldr	r4, [pc, #56]	; (6c0 <CUB+0x4c>)
     688:	4d0e      	ldr	r5, [pc, #56]	; (6c4 <CUB+0x50>)
     68a:	8829      	ldrh	r1, [r5, #0]
     68c:	005a      	lsls	r2, r3, #1
     68e:	18d2      	adds	r2, r2, r3
     690:	00d2      	lsls	r2, r2, #3
     692:	18a2      	adds	r2, r4, r2
     694:	5c50      	ldrb	r0, [r2, r1]
     696:	4e0c      	ldr	r6, [pc, #48]	; (6c8 <CUB+0x54>)
     698:	47b0      	blx	r6
		xCharPos--;
     69a:	4a07      	ldr	r2, [pc, #28]	; (6b8 <CUB+0x44>)
     69c:	8813      	ldrh	r3, [r2, #0]
     69e:	3b01      	subs	r3, #1
     6a0:	b29b      	uxth	r3, r3
     6a2:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     6a4:	8829      	ldrh	r1, [r5, #0]
     6a6:	005a      	lsls	r2, r3, #1
     6a8:	18d3      	adds	r3, r2, r3
     6aa:	00db      	lsls	r3, r3, #3
     6ac:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     6ae:	5c58      	ldrb	r0, [r3, r1]
     6b0:	47b0      	blx	r6
		blinkCursor();
     6b2:	4b06      	ldr	r3, [pc, #24]	; (6cc <CUB+0x58>)
     6b4:	4798      	blx	r3
     6b6:	e7e2      	b.n	67e <CUB+0xa>
     6b8:	200002bc 	.word	0x200002bc
     6bc:	200002c1 	.word	0x200002c1
     6c0:	20000384 	.word	0x20000384
     6c4:	200002be 	.word	0x200002be
     6c8:	00002855 	.word	0x00002855
     6cc:	0000293d 	.word	0x0000293d

000006d0 <isValidCSIEscapeCode>:
{
	int sizeCsiEscCodes = sizeof(csiEscCodes)/sizeof(csiEscCodes[0]);
	
	for(int i = 0; i <= sizeCsiEscCodes ; i++)
	{
		if(csiEscCodes[i] == character)
     6d0:	2841      	cmp	r0, #65	; 0x41
     6d2:	d006      	beq.n	6e2 <isValidCSIEscapeCode+0x12>
     6d4:	4b04      	ldr	r3, [pc, #16]	; (6e8 <isValidCSIEscapeCode+0x18>)
     6d6:	3301      	adds	r3, #1
     6d8:	3301      	adds	r3, #1
     6da:	1e5a      	subs	r2, r3, #1
     6dc:	7812      	ldrb	r2, [r2, #0]
     6de:	4282      	cmp	r2, r0
     6e0:	d1fa      	bne.n	6d8 <isValidCSIEscapeCode+0x8>
		{
			return true;	
		}
	}
	return false;
}
     6e2:	2001      	movs	r0, #1
     6e4:	4770      	bx	lr
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	00005168 	.word	0x00005168

000006ec <CSIparamState>:
{
     6ec:	b570      	push	{r4, r5, r6, lr}
     6ee:	0004      	movs	r4, r0
	if(character >= 0x30 && character <= 0x39)		//character is a digit, put it in the buffer
     6f0:	0003      	movs	r3, r0
     6f2:	3b30      	subs	r3, #48	; 0x30
     6f4:	2b09      	cmp	r3, #9
     6f6:	d909      	bls.n	70c <CSIparamState+0x20>
	else if(character == 0x3B)					//character is ';', now we take items out of 
     6f8:	283b      	cmp	r0, #59	; 0x3b
     6fa:	d00a      	beq.n	712 <CSIparamState+0x26>
	else if(isValidCSIEscapeCode(character))		//character matches a supported escape code
     6fc:	4b12      	ldr	r3, [pc, #72]	; (748 <CSIparamState+0x5c>)
     6fe:	4798      	blx	r3
     700:	2800      	cmp	r0, #0
     702:	d10a      	bne.n	71a <CSIparamState+0x2e>
		currentState = stateGround;
     704:	2200      	movs	r2, #0
     706:	4b11      	ldr	r3, [pc, #68]	; (74c <CSIparamState+0x60>)
     708:	701a      	strb	r2, [r3, #0]
}
     70a:	bd70      	pop	{r4, r5, r6, pc}
		enqueueParser(character);
     70c:	4b10      	ldr	r3, [pc, #64]	; (750 <CSIparamState+0x64>)
     70e:	4798      	blx	r3
     710:	e7fb      	b.n	70a <CSIparamState+0x1e>
		enqueueParser(';');						//parambuffer 			
     712:	203b      	movs	r0, #59	; 0x3b
     714:	4b0e      	ldr	r3, [pc, #56]	; (750 <CSIparamState+0x64>)
     716:	4798      	blx	r3
     718:	e7f7      	b.n	70a <CSIparamState+0x1e>
		char temp = dequeueParser();
     71a:	4b0e      	ldr	r3, [pc, #56]	; (754 <CSIparamState+0x68>)
     71c:	4798      	blx	r3
		printf("%c",temp);
     71e:	4b0e      	ldr	r3, [pc, #56]	; (758 <CSIparamState+0x6c>)
     720:	4798      	blx	r3
		while(!isEmptyParser())
     722:	4d0e      	ldr	r5, [pc, #56]	; (75c <CSIparamState+0x70>)
			printf("%c\n",dequeueParser());
     724:	4e0b      	ldr	r6, [pc, #44]	; (754 <CSIparamState+0x68>)
		while(!isEmptyParser())
     726:	e004      	b.n	732 <CSIparamState+0x46>
			printf("%c\n",dequeueParser());
     728:	47b0      	blx	r6
     72a:	0001      	movs	r1, r0
     72c:	480c      	ldr	r0, [pc, #48]	; (760 <CSIparamState+0x74>)
     72e:	4b0d      	ldr	r3, [pc, #52]	; (764 <CSIparamState+0x78>)
     730:	4798      	blx	r3
		while(!isEmptyParser())
     732:	47a8      	blx	r5
     734:	2800      	cmp	r0, #0
     736:	d0f7      	beq.n	728 <CSIparamState+0x3c>
		currentState = stateCSIentry;
     738:	2203      	movs	r2, #3
     73a:	4b04      	ldr	r3, [pc, #16]	; (74c <CSIparamState+0x60>)
     73c:	701a      	strb	r2, [r3, #0]
		CSIentryState(character);
     73e:	0020      	movs	r0, r4
     740:	4b09      	ldr	r3, [pc, #36]	; (768 <CSIparamState+0x7c>)
     742:	4798      	blx	r3
     744:	e7e1      	b.n	70a <CSIparamState+0x1e>
     746:	46c0      	nop			; (mov r8, r8)
     748:	000006d1 	.word	0x000006d1
     74c:	200002c1 	.word	0x200002c1
     750:	00000215 	.word	0x00000215
     754:	000001e5 	.word	0x000001e5
     758:	00004045 	.word	0x00004045
     75c:	000001d1 	.word	0x000001d1
     760:	00005164 	.word	0x00005164
     764:	00004011 	.word	0x00004011
     768:	0000076d 	.word	0x0000076d

0000076c <CSIentryState>:
{
     76c:	b510      	push	{r4, lr}
	if(character == 0x41)		//ESC [ A	Cursor Up
     76e:	2841      	cmp	r0, #65	; 0x41
     770:	d01e      	beq.n	7b0 <CSIentryState+0x44>
	else if(character == 0x42)	//ESC [ B	Cursor Down
     772:	2842      	cmp	r0, #66	; 0x42
     774:	d01f      	beq.n	7b6 <CSIentryState+0x4a>
	else if(character == 0x43)	//ESC [ C	Cursor Forward
     776:	2843      	cmp	r0, #67	; 0x43
     778:	d020      	beq.n	7bc <CSIentryState+0x50>
	else if(character == 0x44)	//ESC [ D	Cursor Backward
     77a:	2844      	cmp	r0, #68	; 0x44
     77c:	d021      	beq.n	7c2 <CSIentryState+0x56>
	else if(character == 0x45)	//ESC [ E	Cursor Next Line
     77e:	0003      	movs	r3, r0
     780:	3b45      	subs	r3, #69	; 0x45
     782:	b2db      	uxtb	r3, r3
     784:	2b15      	cmp	r3, #21
     786:	d803      	bhi.n	790 <CSIentryState+0x24>
     788:	4a16      	ldr	r2, [pc, #88]	; (7e4 <CSIentryState+0x78>)
     78a:	40da      	lsrs	r2, r3
     78c:	07d3      	lsls	r3, r2, #31
     78e:	d411      	bmi.n	7b4 <CSIentryState+0x48>
	else if(character == 0x6D)	//ESC [ m	Select Graphic Rendition
     790:	286d      	cmp	r0, #109	; 0x6d
     792:	d00f      	beq.n	7b4 <CSIentryState+0x48>
	else if(character >= 0x30 && character <= 0x39) // if the character is a digit 0-9
     794:	0003      	movs	r3, r0
     796:	3b30      	subs	r3, #48	; 0x30
     798:	2b09      	cmp	r3, #9
     79a:	d915      	bls.n	7c8 <CSIentryState+0x5c>
	else if(character == 0x3B)	//Semicolon ; parameter deliminator
     79c:	283b      	cmp	r0, #59	; 0x3b
     79e:	d016      	beq.n	7ce <CSIentryState+0x62>
	else if(character == 0x1B)
     7a0:	281b      	cmp	r0, #27
     7a2:	d017      	beq.n	7d4 <CSIentryState+0x68>
	else if(character == 0x3A)
     7a4:	283a      	cmp	r0, #58	; 0x3a
     7a6:	d019      	beq.n	7dc <CSIentryState+0x70>
		currentState = stateCSIignore;
     7a8:	2206      	movs	r2, #6
     7aa:	4b0f      	ldr	r3, [pc, #60]	; (7e8 <CSIentryState+0x7c>)
     7ac:	701a      	strb	r2, [r3, #0]
}
     7ae:	e001      	b.n	7b4 <CSIentryState+0x48>
		CUU();
     7b0:	4b0e      	ldr	r3, [pc, #56]	; (7ec <CSIentryState+0x80>)
     7b2:	4798      	blx	r3
}
     7b4:	bd10      	pop	{r4, pc}
		CUD();
     7b6:	4b0e      	ldr	r3, [pc, #56]	; (7f0 <CSIentryState+0x84>)
     7b8:	4798      	blx	r3
     7ba:	e7fb      	b.n	7b4 <CSIentryState+0x48>
		CUF();
     7bc:	4b0d      	ldr	r3, [pc, #52]	; (7f4 <CSIentryState+0x88>)
     7be:	4798      	blx	r3
     7c0:	e7f8      	b.n	7b4 <CSIentryState+0x48>
		CUB();
     7c2:	4b0d      	ldr	r3, [pc, #52]	; (7f8 <CSIentryState+0x8c>)
     7c4:	4798      	blx	r3
     7c6:	e7f5      	b.n	7b4 <CSIentryState+0x48>
		CSIparamState(character);
     7c8:	4b0c      	ldr	r3, [pc, #48]	; (7fc <CSIentryState+0x90>)
     7ca:	4798      	blx	r3
     7cc:	e7f2      	b.n	7b4 <CSIentryState+0x48>
		CSIparamState(character);
     7ce:	4b0b      	ldr	r3, [pc, #44]	; (7fc <CSIentryState+0x90>)
     7d0:	4798      	blx	r3
     7d2:	e7ef      	b.n	7b4 <CSIentryState+0x48>
		currentState = stateGround;
     7d4:	2200      	movs	r2, #0
     7d6:	4b04      	ldr	r3, [pc, #16]	; (7e8 <CSIentryState+0x7c>)
     7d8:	701a      	strb	r2, [r3, #0]
     7da:	e7eb      	b.n	7b4 <CSIentryState+0x48>
		currentState = stateCSIignore;
     7dc:	2206      	movs	r2, #6
     7de:	4b02      	ldr	r3, [pc, #8]	; (7e8 <CSIentryState+0x7c>)
     7e0:	701a      	strb	r2, [r3, #0]
     7e2:	e7e7      	b.n	7b4 <CSIentryState+0x48>
     7e4:	002c187f 	.word	0x002c187f
     7e8:	200002c1 	.word	0x200002c1
     7ec:	00000539 	.word	0x00000539
     7f0:	000005bd 	.word	0x000005bd
     7f4:	00000619 	.word	0x00000619
     7f8:	00000675 	.word	0x00000675
     7fc:	000006ed 	.word	0x000006ed

00000800 <nextTab>:


int nextTab(int a) 
{
     800:	b510      	push	{r4, lr}
     802:	b0d0      	sub	sp, #320	; 0x140
     804:	0004      	movs	r4, r0
	int tabArray[] =
     806:	22a0      	movs	r2, #160	; 0xa0
     808:	0052      	lsls	r2, r2, #1
     80a:	4904      	ldr	r1, [pc, #16]	; (81c <nextTab+0x1c>)
     80c:	4668      	mov	r0, sp
     80e:	4b04      	ldr	r3, [pc, #16]	; (820 <nextTab+0x20>)
     810:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
     812:	00a4      	lsls	r4, r4, #2
     814:	466b      	mov	r3, sp
     816:	58e0      	ldr	r0, [r4, r3]
}
     818:	b050      	add	sp, #320	; 0x140
     81a:	bd10      	pop	{r4, pc}
     81c:	00005024 	.word	0x00005024
     820:	00003e9d 	.word	0x00003e9d

00000824 <groundState>:
{
     824:	b5f0      	push	{r4, r5, r6, r7, lr}
     826:	46c6      	mov	lr, r8
     828:	b500      	push	{lr}
     82a:	0004      	movs	r4, r0
	clearQueues();									//parser and paramQueues cleared
     82c:	4bac      	ldr	r3, [pc, #688]	; (ae0 <groundState+0x2bc>)
     82e:	4798      	blx	r3
	if(character == 0x00)							//NUL 0x00 DO NOTHING
     830:	2c07      	cmp	r4, #7
     832:	d93d      	bls.n	8b0 <groundState+0x8c>
	else if(character == 0x08)						//BS 0x08 Backspace
     834:	2c08      	cmp	r4, #8
     836:	d037      	beq.n	8a8 <groundState+0x84>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
     838:	2c09      	cmp	r4, #9
     83a:	d055      	beq.n	8e8 <groundState+0xc4>
	else if(character == 0x0A)						//LF 0x0A Line Feed
     83c:	2c0a      	cmp	r4, #10
     83e:	d100      	bne.n	842 <groundState+0x1e>
     840:	e074      	b.n	92c <groundState+0x108>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
     842:	2c0b      	cmp	r4, #11
     844:	d100      	bne.n	848 <groundState+0x24>
     846:	e0c8      	b.n	9da <groundState+0x1b6>
	else if(character == 0x0C)						//FF 0x0C Form Feed
     848:	2c0c      	cmp	r4, #12
     84a:	d031      	beq.n	8b0 <groundState+0x8c>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
     84c:	2c0d      	cmp	r4, #13
     84e:	d100      	bne.n	852 <groundState+0x2e>
     850:	e11b      	b.n	a8a <groundState+0x266>
	else if(character == 0x0E)						//SO 0x0E Shift Out
     852:	0023      	movs	r3, r4
     854:	3b0e      	subs	r3, #14
     856:	2b0c      	cmp	r3, #12
     858:	d92a      	bls.n	8b0 <groundState+0x8c>
	else if(character == 0x1B)						//ESC 0x1B Escape
     85a:	2c1b      	cmp	r4, #27
     85c:	d100      	bne.n	860 <groundState+0x3c>
     85e:	e13a      	b.n	ad6 <groundState+0x2b2>
	else if(character == 0x1C)						//FS 0x1C File Separator
     860:	0023      	movs	r3, r4
     862:	3b1c      	subs	r3, #28
     864:	2b03      	cmp	r3, #3
     866:	d923      	bls.n	8b0 <groundState+0x8c>
	else if(character == 0x7F)						//DEL 0x7F Delete
     868:	2c7f      	cmp	r4, #127	; 0x7f
     86a:	d021      	beq.n	8b0 <groundState+0x8c>
		consoleDisplay[xCharPos][yCharPos] = character;
     86c:	4e9d      	ldr	r6, [pc, #628]	; (ae4 <groundState+0x2c0>)
     86e:	4d9e      	ldr	r5, [pc, #632]	; (ae8 <groundState+0x2c4>)
     870:	882b      	ldrh	r3, [r5, #0]
     872:	4a9e      	ldr	r2, [pc, #632]	; (aec <groundState+0x2c8>)
     874:	4690      	mov	r8, r2
     876:	8812      	ldrh	r2, [r2, #0]
     878:	2718      	movs	r7, #24
     87a:	437b      	muls	r3, r7
     87c:	18f3      	adds	r3, r6, r3
     87e:	549c      	strb	r4, [r3, r2]
		drawChar(character);
     880:	0020      	movs	r0, r4
     882:	4c9b      	ldr	r4, [pc, #620]	; (af0 <groundState+0x2cc>)
     884:	47a0      	blx	r4
		xCharPos++;
     886:	882b      	ldrh	r3, [r5, #0]
     888:	3301      	adds	r3, #1
     88a:	b29b      	uxth	r3, r3
     88c:	802b      	strh	r3, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     88e:	4642      	mov	r2, r8
     890:	8812      	ldrh	r2, [r2, #0]
     892:	437b      	muls	r3, r7
     894:	18f6      	adds	r6, r6, r3
     896:	5cb0      	ldrb	r0, [r6, r2]
     898:	47a0      	blx	r4
		if(xCharPos > 79)		//END OF LINE
     89a:	882b      	ldrh	r3, [r5, #0]
     89c:	2b4f      	cmp	r3, #79	; 0x4f
     89e:	d907      	bls.n	8b0 <groundState+0x8c>
			xCharPos--;
     8a0:	3b01      	subs	r3, #1
     8a2:	4a91      	ldr	r2, [pc, #580]	; (ae8 <groundState+0x2c4>)
     8a4:	8013      	strh	r3, [r2, #0]
}
     8a6:	e003      	b.n	8b0 <groundState+0x8c>
		if(xCharPos > 0)
     8a8:	4b8f      	ldr	r3, [pc, #572]	; (ae8 <groundState+0x2c4>)
     8aa:	881b      	ldrh	r3, [r3, #0]
     8ac:	2b00      	cmp	r3, #0
     8ae:	d102      	bne.n	8b6 <groundState+0x92>
}
     8b0:	bc04      	pop	{r2}
     8b2:	4690      	mov	r8, r2
     8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     8b6:	4c8b      	ldr	r4, [pc, #556]	; (ae4 <groundState+0x2c0>)
     8b8:	4d8c      	ldr	r5, [pc, #560]	; (aec <groundState+0x2c8>)
     8ba:	8829      	ldrh	r1, [r5, #0]
     8bc:	005a      	lsls	r2, r3, #1
     8be:	18d3      	adds	r3, r2, r3
     8c0:	00db      	lsls	r3, r3, #3
     8c2:	18e3      	adds	r3, r4, r3
     8c4:	5c58      	ldrb	r0, [r3, r1]
     8c6:	4e8a      	ldr	r6, [pc, #552]	; (af0 <groundState+0x2cc>)
     8c8:	47b0      	blx	r6
			xCharPos--;
     8ca:	4a87      	ldr	r2, [pc, #540]	; (ae8 <groundState+0x2c4>)
     8cc:	8813      	ldrh	r3, [r2, #0]
     8ce:	3b01      	subs	r3, #1
     8d0:	b29b      	uxth	r3, r3
     8d2:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8d4:	8829      	ldrh	r1, [r5, #0]
     8d6:	005a      	lsls	r2, r3, #1
     8d8:	18d3      	adds	r3, r2, r3
     8da:	00db      	lsls	r3, r3, #3
     8dc:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
     8de:	5c58      	ldrb	r0, [r3, r1]
     8e0:	47b0      	blx	r6
			blinkCursor();
     8e2:	4b84      	ldr	r3, [pc, #528]	; (af4 <groundState+0x2d0>)
     8e4:	4798      	blx	r3
     8e6:	e7e3      	b.n	8b0 <groundState+0x8c>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     8e8:	4c7f      	ldr	r4, [pc, #508]	; (ae8 <groundState+0x2c4>)
     8ea:	8822      	ldrh	r2, [r4, #0]
     8ec:	4b7f      	ldr	r3, [pc, #508]	; (aec <groundState+0x2c8>)
     8ee:	8819      	ldrh	r1, [r3, #0]
     8f0:	0053      	lsls	r3, r2, #1
     8f2:	189b      	adds	r3, r3, r2
     8f4:	00db      	lsls	r3, r3, #3
     8f6:	4a7b      	ldr	r2, [pc, #492]	; (ae4 <groundState+0x2c0>)
     8f8:	18d3      	adds	r3, r2, r3
     8fa:	5c58      	ldrb	r0, [r3, r1]
     8fc:	4b7c      	ldr	r3, [pc, #496]	; (af0 <groundState+0x2cc>)
     8fe:	4798      	blx	r3
		if(xCharPos <= 79)
     900:	8820      	ldrh	r0, [r4, #0]
     902:	284f      	cmp	r0, #79	; 0x4f
     904:	d803      	bhi.n	90e <groundState+0xea>
			xCharPos = nextTab(xCharPos);
     906:	4b7c      	ldr	r3, [pc, #496]	; (af8 <groundState+0x2d4>)
     908:	4798      	blx	r3
     90a:	4b77      	ldr	r3, [pc, #476]	; (ae8 <groundState+0x2c4>)
     90c:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     90e:	4b76      	ldr	r3, [pc, #472]	; (ae8 <groundState+0x2c4>)
     910:	881a      	ldrh	r2, [r3, #0]
     912:	4b76      	ldr	r3, [pc, #472]	; (aec <groundState+0x2c8>)
     914:	8819      	ldrh	r1, [r3, #0]
     916:	0053      	lsls	r3, r2, #1
     918:	189b      	adds	r3, r3, r2
     91a:	00db      	lsls	r3, r3, #3
     91c:	4a71      	ldr	r2, [pc, #452]	; (ae4 <groundState+0x2c0>)
     91e:	18d3      	adds	r3, r2, r3
     920:	5c58      	ldrb	r0, [r3, r1]
     922:	4b73      	ldr	r3, [pc, #460]	; (af0 <groundState+0x2cc>)
     924:	4798      	blx	r3
		blinkCursor();
     926:	4b73      	ldr	r3, [pc, #460]	; (af4 <groundState+0x2d0>)
     928:	4798      	blx	r3
     92a:	e7c1      	b.n	8b0 <groundState+0x8c>
		if(yCharPos == 23)
     92c:	4b6f      	ldr	r3, [pc, #444]	; (aec <groundState+0x2c8>)
     92e:	881a      	ldrh	r2, [r3, #0]
     930:	2a17      	cmp	r2, #23
     932:	d032      	beq.n	99a <groundState+0x176>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     934:	4c6b      	ldr	r4, [pc, #428]	; (ae4 <groundState+0x2c0>)
     936:	4d6c      	ldr	r5, [pc, #432]	; (ae8 <groundState+0x2c4>)
     938:	8829      	ldrh	r1, [r5, #0]
     93a:	004b      	lsls	r3, r1, #1
     93c:	185b      	adds	r3, r3, r1
     93e:	00db      	lsls	r3, r3, #3
     940:	18e3      	adds	r3, r4, r3
     942:	5c98      	ldrb	r0, [r3, r2]
     944:	4e6a      	ldr	r6, [pc, #424]	; (af0 <groundState+0x2cc>)
     946:	47b0      	blx	r6
			yCharPos++;
     948:	4a68      	ldr	r2, [pc, #416]	; (aec <groundState+0x2c8>)
     94a:	8813      	ldrh	r3, [r2, #0]
     94c:	3301      	adds	r3, #1
     94e:	b29b      	uxth	r3, r3
     950:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     952:	8829      	ldrh	r1, [r5, #0]
     954:	004a      	lsls	r2, r1, #1
     956:	1852      	adds	r2, r2, r1
     958:	00d2      	lsls	r2, r2, #3
     95a:	18a4      	adds	r4, r4, r2
     95c:	5ce0      	ldrb	r0, [r4, r3]
     95e:	47b0      	blx	r6
			blinkCursor();
     960:	4b64      	ldr	r3, [pc, #400]	; (af4 <groundState+0x2d0>)
     962:	4798      	blx	r3
		if(lineFeed)
     964:	4b65      	ldr	r3, [pc, #404]	; (afc <groundState+0x2d8>)
     966:	781b      	ldrb	r3, [r3, #0]
     968:	2b00      	cmp	r3, #0
     96a:	d0a1      	beq.n	8b0 <groundState+0x8c>
			if(yCharPos == 23)
     96c:	4b5f      	ldr	r3, [pc, #380]	; (aec <groundState+0x2c8>)
     96e:	881a      	ldrh	r2, [r3, #0]
     970:	2a17      	cmp	r2, #23
     972:	d021      	beq.n	9b8 <groundState+0x194>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     974:	4d5b      	ldr	r5, [pc, #364]	; (ae4 <groundState+0x2c0>)
     976:	4e5c      	ldr	r6, [pc, #368]	; (ae8 <groundState+0x2c4>)
     978:	8831      	ldrh	r1, [r6, #0]
     97a:	004b      	lsls	r3, r1, #1
     97c:	185b      	adds	r3, r3, r1
     97e:	00db      	lsls	r3, r3, #3
     980:	18eb      	adds	r3, r5, r3
     982:	5c98      	ldrb	r0, [r3, r2]
     984:	4c5a      	ldr	r4, [pc, #360]	; (af0 <groundState+0x2cc>)
     986:	47a0      	blx	r4
				xCharPos = 0;
     988:	2300      	movs	r3, #0
     98a:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     98c:	4b57      	ldr	r3, [pc, #348]	; (aec <groundState+0x2c8>)
     98e:	881b      	ldrh	r3, [r3, #0]
     990:	5ce8      	ldrb	r0, [r5, r3]
     992:	47a0      	blx	r4
				blinkCursor();
     994:	4b57      	ldr	r3, [pc, #348]	; (af4 <groundState+0x2d0>)
     996:	4798      	blx	r3
     998:	e78a      	b.n	8b0 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     99a:	4b53      	ldr	r3, [pc, #332]	; (ae8 <groundState+0x2c4>)
     99c:	881a      	ldrh	r2, [r3, #0]
     99e:	0053      	lsls	r3, r2, #1
     9a0:	189b      	adds	r3, r3, r2
     9a2:	00db      	lsls	r3, r3, #3
     9a4:	4a4f      	ldr	r2, [pc, #316]	; (ae4 <groundState+0x2c0>)
     9a6:	18d3      	adds	r3, r2, r3
     9a8:	7dd8      	ldrb	r0, [r3, #23]
     9aa:	4b51      	ldr	r3, [pc, #324]	; (af0 <groundState+0x2cc>)
     9ac:	4798      	blx	r3
			newLine();
     9ae:	4b54      	ldr	r3, [pc, #336]	; (b00 <groundState+0x2dc>)
     9b0:	4798      	blx	r3
			blinkCursor();
     9b2:	4b50      	ldr	r3, [pc, #320]	; (af4 <groundState+0x2d0>)
     9b4:	4798      	blx	r3
     9b6:	e7d5      	b.n	964 <groundState+0x140>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     9b8:	4d4b      	ldr	r5, [pc, #300]	; (ae8 <groundState+0x2c4>)
     9ba:	882a      	ldrh	r2, [r5, #0]
     9bc:	0053      	lsls	r3, r2, #1
     9be:	189b      	adds	r3, r3, r2
     9c0:	00db      	lsls	r3, r3, #3
     9c2:	4a48      	ldr	r2, [pc, #288]	; (ae4 <groundState+0x2c0>)
     9c4:	18d3      	adds	r3, r2, r3
     9c6:	7dd8      	ldrb	r0, [r3, #23]
     9c8:	4c49      	ldr	r4, [pc, #292]	; (af0 <groundState+0x2cc>)
     9ca:	47a0      	blx	r4
				xCharPos = 0;
     9cc:	2300      	movs	r3, #0
     9ce:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     9d0:	2000      	movs	r0, #0
     9d2:	47a0      	blx	r4
				blinkCursor();
     9d4:	4b47      	ldr	r3, [pc, #284]	; (af4 <groundState+0x2d0>)
     9d6:	4798      	blx	r3
     9d8:	e76a      	b.n	8b0 <groundState+0x8c>
		if(yCharPos == 23)
     9da:	4b44      	ldr	r3, [pc, #272]	; (aec <groundState+0x2c8>)
     9dc:	881a      	ldrh	r2, [r3, #0]
     9de:	2a17      	cmp	r2, #23
     9e0:	d033      	beq.n	a4a <groundState+0x226>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     9e2:	4c40      	ldr	r4, [pc, #256]	; (ae4 <groundState+0x2c0>)
     9e4:	4d40      	ldr	r5, [pc, #256]	; (ae8 <groundState+0x2c4>)
     9e6:	8829      	ldrh	r1, [r5, #0]
     9e8:	004b      	lsls	r3, r1, #1
     9ea:	185b      	adds	r3, r3, r1
     9ec:	00db      	lsls	r3, r3, #3
     9ee:	18e3      	adds	r3, r4, r3
     9f0:	5c98      	ldrb	r0, [r3, r2]
     9f2:	4e3f      	ldr	r6, [pc, #252]	; (af0 <groundState+0x2cc>)
     9f4:	47b0      	blx	r6
			yCharPos++;
     9f6:	4a3d      	ldr	r2, [pc, #244]	; (aec <groundState+0x2c8>)
     9f8:	8813      	ldrh	r3, [r2, #0]
     9fa:	3301      	adds	r3, #1
     9fc:	b29b      	uxth	r3, r3
     9fe:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     a00:	8829      	ldrh	r1, [r5, #0]
     a02:	004a      	lsls	r2, r1, #1
     a04:	1852      	adds	r2, r2, r1
     a06:	00d2      	lsls	r2, r2, #3
     a08:	18a4      	adds	r4, r4, r2
     a0a:	5ce0      	ldrb	r0, [r4, r3]
     a0c:	47b0      	blx	r6
			blinkCursor();
     a0e:	4b39      	ldr	r3, [pc, #228]	; (af4 <groundState+0x2d0>)
     a10:	4798      	blx	r3
		if(lineFeed)
     a12:	4b3a      	ldr	r3, [pc, #232]	; (afc <groundState+0x2d8>)
     a14:	781b      	ldrb	r3, [r3, #0]
     a16:	2b00      	cmp	r3, #0
     a18:	d100      	bne.n	a1c <groundState+0x1f8>
     a1a:	e749      	b.n	8b0 <groundState+0x8c>
			if(yCharPos == 23)
     a1c:	4b33      	ldr	r3, [pc, #204]	; (aec <groundState+0x2c8>)
     a1e:	881a      	ldrh	r2, [r3, #0]
     a20:	2a17      	cmp	r2, #23
     a22:	d021      	beq.n	a68 <groundState+0x244>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     a24:	4d2f      	ldr	r5, [pc, #188]	; (ae4 <groundState+0x2c0>)
     a26:	4e30      	ldr	r6, [pc, #192]	; (ae8 <groundState+0x2c4>)
     a28:	8831      	ldrh	r1, [r6, #0]
     a2a:	004b      	lsls	r3, r1, #1
     a2c:	185b      	adds	r3, r3, r1
     a2e:	00db      	lsls	r3, r3, #3
     a30:	18eb      	adds	r3, r5, r3
     a32:	5c98      	ldrb	r0, [r3, r2]
     a34:	4c2e      	ldr	r4, [pc, #184]	; (af0 <groundState+0x2cc>)
     a36:	47a0      	blx	r4
				xCharPos = 0;
     a38:	2300      	movs	r3, #0
     a3a:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     a3c:	4b2b      	ldr	r3, [pc, #172]	; (aec <groundState+0x2c8>)
     a3e:	881b      	ldrh	r3, [r3, #0]
     a40:	5ce8      	ldrb	r0, [r5, r3]
     a42:	47a0      	blx	r4
				blinkCursor();
     a44:	4b2b      	ldr	r3, [pc, #172]	; (af4 <groundState+0x2d0>)
     a46:	4798      	blx	r3
     a48:	e732      	b.n	8b0 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     a4a:	4b27      	ldr	r3, [pc, #156]	; (ae8 <groundState+0x2c4>)
     a4c:	881a      	ldrh	r2, [r3, #0]
     a4e:	0053      	lsls	r3, r2, #1
     a50:	189b      	adds	r3, r3, r2
     a52:	00db      	lsls	r3, r3, #3
     a54:	4a23      	ldr	r2, [pc, #140]	; (ae4 <groundState+0x2c0>)
     a56:	18d3      	adds	r3, r2, r3
     a58:	7dd8      	ldrb	r0, [r3, #23]
     a5a:	4b25      	ldr	r3, [pc, #148]	; (af0 <groundState+0x2cc>)
     a5c:	4798      	blx	r3
			newLine();
     a5e:	4b28      	ldr	r3, [pc, #160]	; (b00 <groundState+0x2dc>)
     a60:	4798      	blx	r3
			blinkCursor();
     a62:	4b24      	ldr	r3, [pc, #144]	; (af4 <groundState+0x2d0>)
     a64:	4798      	blx	r3
     a66:	e7d4      	b.n	a12 <groundState+0x1ee>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     a68:	4d1f      	ldr	r5, [pc, #124]	; (ae8 <groundState+0x2c4>)
     a6a:	882a      	ldrh	r2, [r5, #0]
     a6c:	0053      	lsls	r3, r2, #1
     a6e:	189b      	adds	r3, r3, r2
     a70:	00db      	lsls	r3, r3, #3
     a72:	4a1c      	ldr	r2, [pc, #112]	; (ae4 <groundState+0x2c0>)
     a74:	18d3      	adds	r3, r2, r3
     a76:	7dd8      	ldrb	r0, [r3, #23]
     a78:	4c1d      	ldr	r4, [pc, #116]	; (af0 <groundState+0x2cc>)
     a7a:	47a0      	blx	r4
				xCharPos = 0;
     a7c:	2300      	movs	r3, #0
     a7e:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     a80:	2000      	movs	r0, #0
     a82:	47a0      	blx	r4
				blinkCursor();
     a84:	4b1b      	ldr	r3, [pc, #108]	; (af4 <groundState+0x2d0>)
     a86:	4798      	blx	r3
     a88:	e712      	b.n	8b0 <groundState+0x8c>
		if(yCharPos == 23)
     a8a:	4b18      	ldr	r3, [pc, #96]	; (aec <groundState+0x2c8>)
     a8c:	881a      	ldrh	r2, [r3, #0]
     a8e:	2a17      	cmp	r2, #23
     a90:	d012      	beq.n	ab8 <groundState+0x294>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     a92:	4d14      	ldr	r5, [pc, #80]	; (ae4 <groundState+0x2c0>)
     a94:	4e14      	ldr	r6, [pc, #80]	; (ae8 <groundState+0x2c4>)
     a96:	8831      	ldrh	r1, [r6, #0]
     a98:	004b      	lsls	r3, r1, #1
     a9a:	185b      	adds	r3, r3, r1
     a9c:	00db      	lsls	r3, r3, #3
     a9e:	18eb      	adds	r3, r5, r3
     aa0:	5c98      	ldrb	r0, [r3, r2]
     aa2:	4c13      	ldr	r4, [pc, #76]	; (af0 <groundState+0x2cc>)
     aa4:	47a0      	blx	r4
			xCharPos = 0;
     aa6:	2300      	movs	r3, #0
     aa8:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     aaa:	4b10      	ldr	r3, [pc, #64]	; (aec <groundState+0x2c8>)
     aac:	881b      	ldrh	r3, [r3, #0]
     aae:	5ce8      	ldrb	r0, [r5, r3]
     ab0:	47a0      	blx	r4
			blinkCursor();
     ab2:	4b10      	ldr	r3, [pc, #64]	; (af4 <groundState+0x2d0>)
     ab4:	4798      	blx	r3
     ab6:	e6fb      	b.n	8b0 <groundState+0x8c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     ab8:	4c0b      	ldr	r4, [pc, #44]	; (ae8 <groundState+0x2c4>)
     aba:	8822      	ldrh	r2, [r4, #0]
     abc:	0053      	lsls	r3, r2, #1
     abe:	189b      	adds	r3, r3, r2
     ac0:	00db      	lsls	r3, r3, #3
     ac2:	4a08      	ldr	r2, [pc, #32]	; (ae4 <groundState+0x2c0>)
     ac4:	18d3      	adds	r3, r2, r3
     ac6:	7dd8      	ldrb	r0, [r3, #23]
     ac8:	4b09      	ldr	r3, [pc, #36]	; (af0 <groundState+0x2cc>)
     aca:	4798      	blx	r3
			xCharPos = 0;
     acc:	2300      	movs	r3, #0
     ace:	8023      	strh	r3, [r4, #0]
			blinkCursor();
     ad0:	4b08      	ldr	r3, [pc, #32]	; (af4 <groundState+0x2d0>)
     ad2:	4798      	blx	r3
     ad4:	e6ec      	b.n	8b0 <groundState+0x8c>
		currentState = stateESC;
     ad6:	2201      	movs	r2, #1
     ad8:	4b0a      	ldr	r3, [pc, #40]	; (b04 <groundState+0x2e0>)
     ada:	701a      	strb	r2, [r3, #0]
     adc:	e6e8      	b.n	8b0 <groundState+0x8c>
     ade:	46c0      	nop			; (mov r8, r8)
     ae0:	00000241 	.word	0x00000241
     ae4:	20000384 	.word	0x20000384
     ae8:	200002bc 	.word	0x200002bc
     aec:	200002be 	.word	0x200002be
     af0:	00002855 	.word	0x00002855
     af4:	0000293d 	.word	0x0000293d
     af8:	00000801 	.word	0x00000801
     afc:	2000016c 	.word	0x2000016c
     b00:	00002a99 	.word	0x00002a99
     b04:	200002c1 	.word	0x200002c1

00000b08 <parseChar>:
{
     b08:	b510      	push	{r4, lr}
	parserState state = currentState;
     b0a:	4b0e      	ldr	r3, [pc, #56]	; (b44 <parseChar+0x3c>)
	switch(state)
     b0c:	781a      	ldrb	r2, [r3, #0]
     b0e:	2a06      	cmp	r2, #6
     b10:	d805      	bhi.n	b1e <parseChar+0x16>
     b12:	0093      	lsls	r3, r2, #2
     b14:	4a0c      	ldr	r2, [pc, #48]	; (b48 <parseChar+0x40>)
     b16:	58d3      	ldr	r3, [r2, r3]
     b18:	469f      	mov	pc, r3
			groundState(character);
     b1a:	4b0c      	ldr	r3, [pc, #48]	; (b4c <parseChar+0x44>)
     b1c:	4798      	blx	r3
}
     b1e:	bd10      	pop	{r4, pc}
			escState(character);
     b20:	4b0b      	ldr	r3, [pc, #44]	; (b50 <parseChar+0x48>)
     b22:	4798      	blx	r3
		break;
     b24:	e7fb      	b.n	b1e <parseChar+0x16>
	stateEnterBuffer = 0x00;
     b26:	2300      	movs	r3, #0
     b28:	4a0a      	ldr	r2, [pc, #40]	; (b54 <parseChar+0x4c>)
     b2a:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
     b2c:	4a05      	ldr	r2, [pc, #20]	; (b44 <parseChar+0x3c>)
     b2e:	7013      	strb	r3, [r2, #0]
     b30:	e7f5      	b.n	b1e <parseChar+0x16>
			CSIentryState(character);
     b32:	4b09      	ldr	r3, [pc, #36]	; (b58 <parseChar+0x50>)
     b34:	4798      	blx	r3
		break;
     b36:	e7f2      	b.n	b1e <parseChar+0x16>
			CSIparamState(character);
     b38:	4b08      	ldr	r3, [pc, #32]	; (b5c <parseChar+0x54>)
     b3a:	4798      	blx	r3
		break;
     b3c:	e7ef      	b.n	b1e <parseChar+0x16>
			CSIignoreState(character);
     b3e:	4b08      	ldr	r3, [pc, #32]	; (b60 <parseChar+0x58>)
     b40:	4798      	blx	r3
}
     b42:	e7ec      	b.n	b1e <parseChar+0x16>
     b44:	200002c1 	.word	0x200002c1
     b48:	00005008 	.word	0x00005008
     b4c:	00000825 	.word	0x00000825
     b50:	000004b9 	.word	0x000004b9
     b54:	20000306 	.word	0x20000306
     b58:	0000076d 	.word	0x0000076d
     b5c:	000006ed 	.word	0x000006ed
     b60:	00000299 	.word	0x00000299

00000b64 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     b64:	b5f0      	push	{r4, r5, r6, r7, lr}
     b66:	b0c1      	sub	sp, #260	; 0x104
     b68:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     b6a:	22d0      	movs	r2, #208	; 0xd0
     b6c:	492d      	ldr	r1, [pc, #180]	; (c24 <drawKare+0xc0>)
     b6e:	a80c      	add	r0, sp, #48	; 0x30
     b70:	4b2d      	ldr	r3, [pc, #180]	; (c28 <drawKare+0xc4>)
     b72:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     b74:	a805      	add	r0, sp, #20
     b76:	4b2d      	ldr	r3, [pc, #180]	; (c2c <drawKare+0xc8>)
     b78:	001a      	movs	r2, r3
     b7a:	3250      	adds	r2, #80	; 0x50
     b7c:	0001      	movs	r1, r0
     b7e:	ca31      	ldmia	r2!, {r0, r4, r5}
     b80:	c131      	stmia	r1!, {r0, r4, r5}
     b82:	ca31      	ldmia	r2!, {r0, r4, r5}
     b84:	c131      	stmia	r1!, {r0, r4, r5}
     b86:	6812      	ldr	r2, [r2, #0]
     b88:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     b8a:	336c      	adds	r3, #108	; 0x6c
     b8c:	466a      	mov	r2, sp
     b8e:	cb13      	ldmia	r3!, {r0, r1, r4}
     b90:	c213      	stmia	r2!, {r0, r1, r4}
     b92:	cb03      	ldmia	r3!, {r0, r1}
     b94:	c203      	stmia	r2!, {r0, r1}
     b96:	ac0c      	add	r4, sp, #48	; 0x30
     b98:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     b9a:	4d25      	ldr	r5, [pc, #148]	; (c30 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     b9c:	88e3      	ldrh	r3, [r4, #6]
     b9e:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     ba0:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     ba2:	88a2      	ldrh	r2, [r4, #4]
     ba4:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     ba6:	322d      	adds	r2, #45	; 0x2d
     ba8:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     baa:	8861      	ldrh	r1, [r4, #2]
     bac:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     bae:	3196      	adds	r1, #150	; 0x96
     bb0:	8820      	ldrh	r0, [r4, #0]
     bb2:	1040      	asrs	r0, r0, #1
     bb4:	302d      	adds	r0, #45	; 0x2d
     bb6:	30ff      	adds	r0, #255	; 0xff
     bb8:	47a8      	blx	r5
     bba:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     bbc:	42b4      	cmp	r4, r6
     bbe:	d1ed      	bne.n	b9c <drawKare+0x38>
	}
	switch(emotion)
     bc0:	2f00      	cmp	r7, #0
     bc2:	d003      	beq.n	bcc <drawKare+0x68>
     bc4:	2f01      	cmp	r7, #1
     bc6:	d017      	beq.n	bf8 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     bc8:	b041      	add	sp, #260	; 0x104
     bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bcc:	ac05      	add	r4, sp, #20
     bce:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     bd0:	4d17      	ldr	r5, [pc, #92]	; (c30 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     bd2:	78e3      	ldrb	r3, [r4, #3]
     bd4:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     bd6:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     bd8:	78a2      	ldrb	r2, [r4, #2]
     bda:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     bdc:	322d      	adds	r2, #45	; 0x2d
     bde:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     be0:	7861      	ldrb	r1, [r4, #1]
     be2:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     be4:	3196      	adds	r1, #150	; 0x96
     be6:	7820      	ldrb	r0, [r4, #0]
     be8:	1040      	asrs	r0, r0, #1
     bea:	302d      	adds	r0, #45	; 0x2d
     bec:	30ff      	adds	r0, #255	; 0xff
     bee:	47a8      	blx	r5
     bf0:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     bf2:	42a6      	cmp	r6, r4
     bf4:	d1ed      	bne.n	bd2 <drawKare+0x6e>
     bf6:	e7e7      	b.n	bc8 <drawKare+0x64>
     bf8:	466c      	mov	r4, sp
     bfa:	ae05      	add	r6, sp, #20
			fillRect((
     bfc:	4d0c      	ldr	r5, [pc, #48]	; (c30 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     bfe:	78e3      	ldrb	r3, [r4, #3]
     c00:	105b      	asrs	r3, r3, #1
			fillRect((
     c02:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     c04:	78a2      	ldrb	r2, [r4, #2]
     c06:	1052      	asrs	r2, r2, #1
			fillRect((
     c08:	322d      	adds	r2, #45	; 0x2d
     c0a:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     c0c:	7861      	ldrb	r1, [r4, #1]
     c0e:	1049      	asrs	r1, r1, #1
			fillRect((
     c10:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     c12:	7820      	ldrb	r0, [r4, #0]
     c14:	1040      	asrs	r0, r0, #1
			fillRect((
     c16:	302d      	adds	r0, #45	; 0x2d
     c18:	30ff      	adds	r0, #255	; 0xff
     c1a:	47a8      	blx	r5
     c1c:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     c1e:	42b4      	cmp	r4, r6
     c20:	d1ed      	bne.n	bfe <drawKare+0x9a>
     c22:	e7d1      	b.n	bc8 <drawKare+0x64>
     c24:	0000517c 	.word	0x0000517c
     c28:	00003e9d 	.word	0x00003e9d
     c2c:	000051fc 	.word	0x000051fc
     c30:	000032f1 	.word	0x000032f1

00000c34 <splashScreen>:

void splashScreen(void)
{
     c34:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
     c36:	4c49      	ldr	r4, [pc, #292]	; (d5c <splashScreen+0x128>)
     c38:	4b49      	ldr	r3, [pc, #292]	; (d60 <splashScreen+0x12c>)
     c3a:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
     c3c:	4b49      	ldr	r3, [pc, #292]	; (d64 <splashScreen+0x130>)
     c3e:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
     c40:	4b49      	ldr	r3, [pc, #292]	; (d68 <splashScreen+0x134>)
     c42:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
     c44:	4b49      	ldr	r3, [pc, #292]	; (d6c <splashScreen+0x138>)
     c46:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
     c48:	4b49      	ldr	r3, [pc, #292]	; (d70 <splashScreen+0x13c>)
     c4a:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
     c4c:	4b49      	ldr	r3, [pc, #292]	; (d74 <splashScreen+0x140>)
     c4e:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
     c50:	4b49      	ldr	r3, [pc, #292]	; (d78 <splashScreen+0x144>)
     c52:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     c54:	4b49      	ldr	r3, [pc, #292]	; (d7c <splashScreen+0x148>)
     c56:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
     c58:	4b49      	ldr	r3, [pc, #292]	; (d80 <splashScreen+0x14c>)
     c5a:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
     c5c:	4b49      	ldr	r3, [pc, #292]	; (d84 <splashScreen+0x150>)
     c5e:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     c60:	4b49      	ldr	r3, [pc, #292]	; (d88 <splashScreen+0x154>)
     c62:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     c64:	4b49      	ldr	r3, [pc, #292]	; (d8c <splashScreen+0x158>)
     c66:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     c68:	4b49      	ldr	r3, [pc, #292]	; (d90 <splashScreen+0x15c>)
     c6a:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
     c6c:	4b49      	ldr	r3, [pc, #292]	; (d94 <splashScreen+0x160>)
     c6e:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     c70:	4b49      	ldr	r3, [pc, #292]	; (d98 <splashScreen+0x164>)
     c72:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     c74:	4b49      	ldr	r3, [pc, #292]	; (d9c <splashScreen+0x168>)
     c76:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     c78:	4b49      	ldr	r3, [pc, #292]	; (da0 <splashScreen+0x16c>)
     c7a:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     c7c:	4b49      	ldr	r3, [pc, #292]	; (da4 <splashScreen+0x170>)
     c7e:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
     c80:	4b49      	ldr	r3, [pc, #292]	; (da8 <splashScreen+0x174>)
     c82:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020) (2021)";//
     c84:	4b49      	ldr	r3, [pc, #292]	; (dac <splashScreen+0x178>)
     c86:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     c88:	4b49      	ldr	r3, [pc, #292]	; (db0 <splashScreen+0x17c>)
     c8a:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     c8c:	4b49      	ldr	r3, [pc, #292]	; (db4 <splashScreen+0x180>)
     c8e:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     c90:	4b49      	ldr	r3, [pc, #292]	; (db8 <splashScreen+0x184>)
     c92:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     c94:	4b49      	ldr	r3, [pc, #292]	; (dbc <splashScreen+0x188>)
     c96:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
     c98:	4b49      	ldr	r3, [pc, #292]	; (dc0 <splashScreen+0x18c>)
     c9a:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
     c9c:	4b49      	ldr	r3, [pc, #292]	; (dc4 <splashScreen+0x190>)
     c9e:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
     ca0:	4b49      	ldr	r3, [pc, #292]	; (dc8 <splashScreen+0x194>)
     ca2:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     ca4:	4b49      	ldr	r3, [pc, #292]	; (dcc <splashScreen+0x198>)
     ca6:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     ca8:	4b49      	ldr	r3, [pc, #292]	; (dd0 <splashScreen+0x19c>)
     caa:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
     cac:	4b49      	ldr	r3, [pc, #292]	; (dd4 <splashScreen+0x1a0>)
     cae:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     cb0:	4b49      	ldr	r3, [pc, #292]	; (dd8 <splashScreen+0x1a4>)
     cb2:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     cb4:	4b49      	ldr	r3, [pc, #292]	; (ddc <splashScreen+0x1a8>)
     cb6:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     cb8:	4a49      	ldr	r2, [pc, #292]	; (de0 <splashScreen+0x1ac>)
     cba:	2380      	movs	r3, #128	; 0x80
     cbc:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
     cbe:	4b49      	ldr	r3, [pc, #292]	; (de4 <splashScreen+0x1b0>)
     cc0:	4798      	blx	r3
     cc2:	17c3      	asrs	r3, r0, #31
     cc4:	0edb      	lsrs	r3, r3, #27
     cc6:	18c2      	adds	r2, r0, r3
     cc8:	201f      	movs	r0, #31
     cca:	4010      	ands	r0, r2
     ccc:	1ac0      	subs	r0, r0, r3
     cce:	0080      	lsls	r0, r0, #2
     cd0:	5904      	ldr	r4, [r0, r4]
	
	clearScreen();
     cd2:	4b45      	ldr	r3, [pc, #276]	; (de8 <splashScreen+0x1b4>)
     cd4:	4798      	blx	r3
	setColorRGB(255,255,255);
     cd6:	22ff      	movs	r2, #255	; 0xff
     cd8:	21ff      	movs	r1, #255	; 0xff
     cda:	20ff      	movs	r0, #255	; 0xff
     cdc:	4b43      	ldr	r3, [pc, #268]	; (dec <splashScreen+0x1b8>)
     cde:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     ce0:	2280      	movs	r2, #128	; 0x80
     ce2:	0612      	lsls	r2, r2, #24
     ce4:	4b42      	ldr	r3, [pc, #264]	; (df0 <splashScreen+0x1bc>)
     ce6:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     ce8:	4b42      	ldr	r3, [pc, #264]	; (df4 <splashScreen+0x1c0>)
     cea:	22df      	movs	r2, #223	; 0xdf
     cec:	5c99      	ldrb	r1, [r3, r2]
     cee:	2004      	movs	r0, #4
     cf0:	4301      	orrs	r1, r0
     cf2:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     cf4:	5c99      	ldrb	r1, [r3, r2]
     cf6:	2002      	movs	r0, #2
     cf8:	4301      	orrs	r1, r0
     cfa:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     cfc:	3a3f      	subs	r2, #63	; 0x3f
     cfe:	589b      	ldr	r3, [r3, r2]
     d00:	2b00      	cmp	r3, #0
     d02:	db26      	blt.n	d52 <splashScreen+0x11e>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     d04:	2000      	movs	r0, #0
     d06:	4b3c      	ldr	r3, [pc, #240]	; (df8 <splashScreen+0x1c4>)
     d08:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     d0a:	0020      	movs	r0, r4
     d0c:	4b3b      	ldr	r3, [pc, #236]	; (dfc <splashScreen+0x1c8>)
     d0e:	4798      	blx	r3
     d10:	4e3b      	ldr	r6, [pc, #236]	; (e00 <splashScreen+0x1cc>)
     d12:	0840      	lsrs	r0, r0, #1
     d14:	2328      	movs	r3, #40	; 0x28
     d16:	1a18      	subs	r0, r3, r0
     d18:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
     d1a:	4d3a      	ldr	r5, [pc, #232]	; (e04 <splashScreen+0x1d0>)
     d1c:	2310      	movs	r3, #16
     d1e:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
     d20:	0020      	movs	r0, r4
     d22:	4b39      	ldr	r3, [pc, #228]	; (e08 <splashScreen+0x1d4>)
     d24:	4798      	blx	r3
	xCharPos = 40 - (strlen(versionLabel)/2);
	yCharPos = 18;
	
	writeString(versionLabel);
	*/
	delay_ms(2000);
     d26:	20fa      	movs	r0, #250	; 0xfa
     d28:	00c0      	lsls	r0, r0, #3
     d2a:	4b38      	ldr	r3, [pc, #224]	; (e0c <splashScreen+0x1d8>)
     d2c:	4798      	blx	r3
		
	clearScreen();
     d2e:	4b2e      	ldr	r3, [pc, #184]	; (de8 <splashScreen+0x1b4>)
     d30:	4798      	blx	r3
	nullifyConsole();
     d32:	4b37      	ldr	r3, [pc, #220]	; (e10 <splashScreen+0x1dc>)
     d34:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     d36:	2200      	movs	r2, #0
     d38:	21ff      	movs	r1, #255	; 0xff
     d3a:	2000      	movs	r0, #0
     d3c:	4b2b      	ldr	r3, [pc, #172]	; (dec <splashScreen+0x1b8>)
     d3e:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     d40:	2200      	movs	r2, #0
     d42:	2100      	movs	r1, #0
     d44:	2000      	movs	r0, #0
     d46:	4b33      	ldr	r3, [pc, #204]	; (e14 <splashScreen+0x1e0>)
     d48:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     d4a:	2300      	movs	r3, #0
     d4c:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
     d4e:	802b      	strh	r3, [r5, #0]
	

     d50:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     d52:	2001      	movs	r0, #1
     d54:	4b28      	ldr	r3, [pc, #160]	; (df8 <splashScreen+0x1c4>)
     d56:	4798      	blx	r3
     d58:	e7d7      	b.n	d0a <splashScreen+0xd6>
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	200001fc 	.word	0x200001fc
     d60:	0000527c 	.word	0x0000527c
     d64:	0000529c 	.word	0x0000529c
     d68:	000052b0 	.word	0x000052b0
     d6c:	000052c8 	.word	0x000052c8
     d70:	000052d8 	.word	0x000052d8
     d74:	000052e0 	.word	0x000052e0
     d78:	00005308 	.word	0x00005308
     d7c:	00005334 	.word	0x00005334
     d80:	0000535c 	.word	0x0000535c
     d84:	00005388 	.word	0x00005388
     d88:	00005394 	.word	0x00005394
     d8c:	000053ac 	.word	0x000053ac
     d90:	000053cc 	.word	0x000053cc
     d94:	000053ec 	.word	0x000053ec
     d98:	00005410 	.word	0x00005410
     d9c:	00005420 	.word	0x00005420
     da0:	0000542c 	.word	0x0000542c
     da4:	00005448 	.word	0x00005448
     da8:	00005468 	.word	0x00005468
     dac:	000054a4 	.word	0x000054a4
     db0:	000054c4 	.word	0x000054c4
     db4:	000054e0 	.word	0x000054e0
     db8:	000054f0 	.word	0x000054f0
     dbc:	00005514 	.word	0x00005514
     dc0:	00005540 	.word	0x00005540
     dc4:	0000556c 	.word	0x0000556c
     dc8:	0000558c 	.word	0x0000558c
     dcc:	000055ac 	.word	0x000055ac
     dd0:	000055c0 	.word	0x000055c0
     dd4:	000055dc 	.word	0x000055dc
     dd8:	000055ec 	.word	0x000055ec
     ddc:	00005610 	.word	0x00005610
     de0:	00005630 	.word	0x00005630
     de4:	000040c9 	.word	0x000040c9
     de8:	000033c1 	.word	0x000033c1
     dec:	000031b5 	.word	0x000031b5
     df0:	4100448c 	.word	0x4100448c
     df4:	41004400 	.word	0x41004400
     df8:	00000b65 	.word	0x00000b65
     dfc:	000042d1 	.word	0x000042d1
     e00:	200002bc 	.word	0x200002bc
     e04:	200002be 	.word	0x200002be
     e08:	00002b55 	.word	0x00002b55
     e0c:	00000ead 	.word	0x00000ead
     e10:	00002b9d 	.word	0x00002b9d
     e14:	000031dd 	.word	0x000031dd

00000e18 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
     e18:	b5f0      	push	{r4, r5, r6, r7, lr}
     e1a:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
     e1c:	4e0b      	ldr	r6, [pc, #44]	; (e4c <parseRXBuffer+0x34>)
     e1e:	4d0c      	ldr	r5, [pc, #48]	; (e50 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
     e20:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
     e22:	e008      	b.n	e36 <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
     e24:	466b      	mov	r3, sp
     e26:	1ddc      	adds	r4, r3, #7
     e28:	0021      	movs	r1, r4
     e2a:	6838      	ldr	r0, [r7, #0]
     e2c:	4b09      	ldr	r3, [pc, #36]	; (e54 <parseRXBuffer+0x3c>)
     e2e:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
     e30:	7820      	ldrb	r0, [r4, #0]
     e32:	4b09      	ldr	r3, [pc, #36]	; (e58 <parseRXBuffer+0x40>)
     e34:	4798      	blx	r3
		while(!ring_empty(ouroboros))
     e36:	6830      	ldr	r0, [r6, #0]
     e38:	47a8      	blx	r5
     e3a:	2800      	cmp	r0, #0
     e3c:	d0f2      	beq.n	e24 <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
     e3e:	4b03      	ldr	r3, [pc, #12]	; (e4c <parseRXBuffer+0x34>)
     e40:	6818      	ldr	r0, [r3, #0]
     e42:	4b06      	ldr	r3, [pc, #24]	; (e5c <parseRXBuffer+0x44>)
     e44:	4798      	blx	r3
}
     e46:	b003      	add	sp, #12
     e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	20000320 	.word	0x20000320
     e50:	0000017d 	.word	0x0000017d
     e54:	00000195 	.word	0x00000195
     e58:	00000b09 	.word	0x00000b09
     e5c:	00000135 	.word	0x00000135

00000e60 <sendChar>:

void sendChar(char character)
{
     e60:	b510      	push	{r4, lr}
	printf("%c", character);
     e62:	4b01      	ldr	r3, [pc, #4]	; (e68 <sendChar+0x8>)
     e64:	4798      	blx	r3
     e66:	bd10      	pop	{r4, pc}
     e68:	00004045 	.word	0x00004045

00000e6c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     e6c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     e6e:	2000      	movs	r0, #0
     e70:	4b08      	ldr	r3, [pc, #32]	; (e94 <delay_init+0x28>)
     e72:	4798      	blx	r3
     e74:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     e76:	4c08      	ldr	r4, [pc, #32]	; (e98 <delay_init+0x2c>)
     e78:	21fa      	movs	r1, #250	; 0xfa
     e7a:	0089      	lsls	r1, r1, #2
     e7c:	47a0      	blx	r4
     e7e:	4b07      	ldr	r3, [pc, #28]	; (e9c <delay_init+0x30>)
     e80:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     e82:	4907      	ldr	r1, [pc, #28]	; (ea0 <delay_init+0x34>)
     e84:	0028      	movs	r0, r5
     e86:	47a0      	blx	r4
     e88:	4b06      	ldr	r3, [pc, #24]	; (ea4 <delay_init+0x38>)
     e8a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     e8c:	2205      	movs	r2, #5
     e8e:	4b06      	ldr	r3, [pc, #24]	; (ea8 <delay_init+0x3c>)
     e90:	601a      	str	r2, [r3, #0]
}
     e92:	bd70      	pop	{r4, r5, r6, pc}
     e94:	0000242d 	.word	0x0000242d
     e98:	00003b01 	.word	0x00003b01
     e9c:	20000014 	.word	0x20000014
     ea0:	000f4240 	.word	0x000f4240
     ea4:	20000018 	.word	0x20000018
     ea8:	e000e010 	.word	0xe000e010

00000eac <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     eac:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     eae:	4b08      	ldr	r3, [pc, #32]	; (ed0 <delay_cycles_ms+0x24>)
     eb0:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     eb2:	4a08      	ldr	r2, [pc, #32]	; (ed4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     eb4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     eb6:	2180      	movs	r1, #128	; 0x80
     eb8:	0249      	lsls	r1, r1, #9
	while (n--) {
     eba:	3801      	subs	r0, #1
     ebc:	d307      	bcc.n	ece <delay_cycles_ms+0x22>
	if (n > 0) {
     ebe:	2c00      	cmp	r4, #0
     ec0:	d0fb      	beq.n	eba <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     ec2:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     ec4:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ec6:	6813      	ldr	r3, [r2, #0]
     ec8:	420b      	tst	r3, r1
     eca:	d0fc      	beq.n	ec6 <delay_cycles_ms+0x1a>
     ecc:	e7f5      	b.n	eba <delay_cycles_ms+0xe>
	}
}
     ece:	bd30      	pop	{r4, r5, pc}
     ed0:	20000014 	.word	0x20000014
     ed4:	e000e010 	.word	0xe000e010

00000ed8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     ed8:	4b0c      	ldr	r3, [pc, #48]	; (f0c <cpu_irq_enter_critical+0x34>)
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	2b00      	cmp	r3, #0
     ede:	d106      	bne.n	eee <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ee0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     ee4:	2b00      	cmp	r3, #0
     ee6:	d007      	beq.n	ef8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     ee8:	2200      	movs	r2, #0
     eea:	4b09      	ldr	r3, [pc, #36]	; (f10 <cpu_irq_enter_critical+0x38>)
     eec:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     eee:	4a07      	ldr	r2, [pc, #28]	; (f0c <cpu_irq_enter_critical+0x34>)
     ef0:	6813      	ldr	r3, [r2, #0]
     ef2:	3301      	adds	r3, #1
     ef4:	6013      	str	r3, [r2, #0]
}
     ef6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     ef8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     efa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     efe:	2200      	movs	r2, #0
     f00:	4b04      	ldr	r3, [pc, #16]	; (f14 <cpu_irq_enter_critical+0x3c>)
     f02:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     f04:	3201      	adds	r2, #1
     f06:	4b02      	ldr	r3, [pc, #8]	; (f10 <cpu_irq_enter_critical+0x38>)
     f08:	701a      	strb	r2, [r3, #0]
     f0a:	e7f0      	b.n	eee <cpu_irq_enter_critical+0x16>
     f0c:	2000027c 	.word	0x2000027c
     f10:	20000280 	.word	0x20000280
     f14:	2000001c 	.word	0x2000001c

00000f18 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     f18:	4b08      	ldr	r3, [pc, #32]	; (f3c <cpu_irq_leave_critical+0x24>)
     f1a:	681a      	ldr	r2, [r3, #0]
     f1c:	3a01      	subs	r2, #1
     f1e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     f20:	681b      	ldr	r3, [r3, #0]
     f22:	2b00      	cmp	r3, #0
     f24:	d109      	bne.n	f3a <cpu_irq_leave_critical+0x22>
     f26:	4b06      	ldr	r3, [pc, #24]	; (f40 <cpu_irq_leave_critical+0x28>)
     f28:	781b      	ldrb	r3, [r3, #0]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d005      	beq.n	f3a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     f2e:	2201      	movs	r2, #1
     f30:	4b04      	ldr	r3, [pc, #16]	; (f44 <cpu_irq_leave_critical+0x2c>)
     f32:	701a      	strb	r2, [r3, #0]
     f34:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     f38:	b662      	cpsie	i
	}
}
     f3a:	4770      	bx	lr
     f3c:	2000027c 	.word	0x2000027c
     f40:	20000280 	.word	0x20000280
     f44:	2000001c 	.word	0x2000001c

00000f48 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     f48:	b5f0      	push	{r4, r5, r6, r7, lr}
     f4a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     f4c:	ac01      	add	r4, sp, #4
     f4e:	2501      	movs	r5, #1
     f50:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     f52:	2700      	movs	r7, #0
     f54:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     f56:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     f58:	0021      	movs	r1, r4
     f5a:	203e      	movs	r0, #62	; 0x3e
     f5c:	4e06      	ldr	r6, [pc, #24]	; (f78 <system_board_init+0x30>)
     f5e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     f60:	2280      	movs	r2, #128	; 0x80
     f62:	05d2      	lsls	r2, r2, #23
     f64:	4b05      	ldr	r3, [pc, #20]	; (f7c <system_board_init+0x34>)
     f66:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     f68:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     f6a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     f6c:	0021      	movs	r1, r4
     f6e:	200f      	movs	r0, #15
     f70:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     f72:	b003      	add	sp, #12
     f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	000014b1 	.word	0x000014b1
     f7c:	41004480 	.word	0x41004480

00000f80 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     f80:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     f82:	2200      	movs	r2, #0
     f84:	2300      	movs	r3, #0
     f86:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     f88:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     f8a:	2100      	movs	r1, #0
     f8c:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     f8e:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     f90:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     f92:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     f94:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     f96:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     f98:	24c0      	movs	r4, #192	; 0xc0
     f9a:	0164      	lsls	r4, r4, #5
     f9c:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     f9e:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     fa0:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     fa2:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     fa4:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     fa6:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     fa8:	242a      	movs	r4, #42	; 0x2a
     faa:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     fac:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     fae:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     fb0:	3c06      	subs	r4, #6
     fb2:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     fb4:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     fb6:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     fb8:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     fba:	232b      	movs	r3, #43	; 0x2b
     fbc:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     fbe:	3301      	adds	r3, #1
     fc0:	54c1      	strb	r1, [r0, r3]
}
     fc2:	bd10      	pop	{r4, pc}

00000fc4 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     fc6:	46d6      	mov	lr, sl
     fc8:	464f      	mov	r7, r9
     fca:	4646      	mov	r6, r8
     fcc:	b5c0      	push	{r6, r7, lr}
     fce:	b096      	sub	sp, #88	; 0x58
     fd0:	0007      	movs	r7, r0
     fd2:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     fd4:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     fd6:	4ac6      	ldr	r2, [pc, #792]	; (12f0 <adc_init+0x32c>)
     fd8:	6a10      	ldr	r0, [r2, #32]
     fda:	2380      	movs	r3, #128	; 0x80
     fdc:	025b      	lsls	r3, r3, #9
     fde:	4303      	orrs	r3, r0
     fe0:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     fe2:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     fe4:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     fe6:	07db      	lsls	r3, r3, #31
     fe8:	d505      	bpl.n	ff6 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     fea:	b016      	add	sp, #88	; 0x58
     fec:	bc1c      	pop	{r2, r3, r4}
     fee:	4690      	mov	r8, r2
     ff0:	4699      	mov	r9, r3
     ff2:	46a2      	mov	sl, r4
     ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     ff6:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     ff8:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     ffa:	079b      	lsls	r3, r3, #30
     ffc:	d4f5      	bmi.n	fea <adc_init+0x26>
	module_inst->reference = config->reference;
     ffe:	7873      	ldrb	r3, [r6, #1]
    1000:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1002:	2b00      	cmp	r3, #0
    1004:	d104      	bne.n	1010 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    1006:	4abb      	ldr	r2, [pc, #748]	; (12f4 <adc_init+0x330>)
    1008:	6c13      	ldr	r3, [r2, #64]	; 0x40
    100a:	2104      	movs	r1, #4
    100c:	430b      	orrs	r3, r1
    100e:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1010:	2300      	movs	r3, #0
    1012:	60bb      	str	r3, [r7, #8]
    1014:	60fb      	str	r3, [r7, #12]
    1016:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1018:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    101a:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    101c:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    101e:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1020:	4bb5      	ldr	r3, [pc, #724]	; (12f8 <adc_init+0x334>)
    1022:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1024:	232a      	movs	r3, #42	; 0x2a
    1026:	5cf3      	ldrb	r3, [r6, r3]
    1028:	2b00      	cmp	r3, #0
    102a:	d105      	bne.n	1038 <adc_init+0x74>
    102c:	7d33      	ldrb	r3, [r6, #20]
    102e:	2b00      	cmp	r3, #0
    1030:	d102      	bne.n	1038 <adc_init+0x74>
		module_inst->software_trigger = true;
    1032:	3301      	adds	r3, #1
    1034:	777b      	strb	r3, [r7, #29]
    1036:	e001      	b.n	103c <adc_init+0x78>
		module_inst->software_trigger = false;
    1038:	2300      	movs	r3, #0
    103a:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    103c:	683b      	ldr	r3, [r7, #0]
    103e:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1040:	7833      	ldrb	r3, [r6, #0]
    1042:	466a      	mov	r2, sp
    1044:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1046:	4669      	mov	r1, sp
    1048:	201e      	movs	r0, #30
    104a:	4bac      	ldr	r3, [pc, #688]	; (12fc <adc_init+0x338>)
    104c:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    104e:	201e      	movs	r0, #30
    1050:	4bab      	ldr	r3, [pc, #684]	; (1300 <adc_init+0x33c>)
    1052:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    1054:	232c      	movs	r3, #44	; 0x2c
    1056:	5cf2      	ldrb	r2, [r6, r3]
    1058:	2a00      	cmp	r2, #0
    105a:	d054      	beq.n	1106 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    105c:	3b01      	subs	r3, #1
    105e:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1060:	7b33      	ldrb	r3, [r6, #12]
    1062:	18eb      	adds	r3, r5, r3
    1064:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    1066:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1068:	b2c9      	uxtb	r1, r1
    106a:	428b      	cmp	r3, r1
    106c:	d221      	bcs.n	10b2 <adc_init+0xee>
    106e:	1952      	adds	r2, r2, r5
    1070:	b2d3      	uxtb	r3, r2
    1072:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    1074:	4ba3      	ldr	r3, [pc, #652]	; (1304 <adc_init+0x340>)
    1076:	469a      	mov	sl, r3
    1078:	e003      	b.n	1082 <adc_init+0xbe>
			offset++;
    107a:	3501      	adds	r5, #1
    107c:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    107e:	454d      	cmp	r5, r9
    1080:	d017      	beq.n	10b2 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1082:	240f      	movs	r4, #15
    1084:	402c      	ands	r4, r5
    1086:	7b33      	ldrb	r3, [r6, #12]
    1088:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    108a:	2250      	movs	r2, #80	; 0x50
    108c:	499e      	ldr	r1, [pc, #632]	; (1308 <adc_init+0x344>)
    108e:	a802      	add	r0, sp, #8
    1090:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1092:	2c13      	cmp	r4, #19
    1094:	d8f1      	bhi.n	107a <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1096:	00a4      	lsls	r4, r4, #2
    1098:	ab02      	add	r3, sp, #8
    109a:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    109c:	a901      	add	r1, sp, #4
    109e:	2300      	movs	r3, #0
    10a0:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    10a2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    10a4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    10a6:	3301      	adds	r3, #1
    10a8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    10aa:	b2c0      	uxtb	r0, r0
    10ac:	4b97      	ldr	r3, [pc, #604]	; (130c <adc_init+0x348>)
    10ae:	4798      	blx	r3
    10b0:	e7e3      	b.n	107a <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    10b2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    10b4:	2250      	movs	r2, #80	; 0x50
    10b6:	4994      	ldr	r1, [pc, #592]	; (1308 <adc_init+0x344>)
    10b8:	a802      	add	r0, sp, #8
    10ba:	4b92      	ldr	r3, [pc, #584]	; (1304 <adc_init+0x340>)
    10bc:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    10be:	2c13      	cmp	r4, #19
    10c0:	d913      	bls.n	10ea <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    10c2:	7d73      	ldrb	r3, [r6, #21]
    10c4:	009b      	lsls	r3, r3, #2
    10c6:	b2db      	uxtb	r3, r3
    10c8:	4642      	mov	r2, r8
    10ca:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    10cc:	7db3      	ldrb	r3, [r6, #22]
    10ce:	01db      	lsls	r3, r3, #7
    10d0:	7872      	ldrb	r2, [r6, #1]
    10d2:	4313      	orrs	r3, r2
    10d4:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    10d6:	4642      	mov	r2, r8
    10d8:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    10da:	7933      	ldrb	r3, [r6, #4]
    10dc:	2b34      	cmp	r3, #52	; 0x34
    10de:	d900      	bls.n	10e2 <adc_init+0x11e>
    10e0:	e17b      	b.n	13da <adc_init+0x416>
    10e2:	009b      	lsls	r3, r3, #2
    10e4:	4a8a      	ldr	r2, [pc, #552]	; (1310 <adc_init+0x34c>)
    10e6:	58d3      	ldr	r3, [r2, r3]
    10e8:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    10ea:	00a4      	lsls	r4, r4, #2
    10ec:	ab02      	add	r3, sp, #8
    10ee:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10f0:	a901      	add	r1, sp, #4
    10f2:	2300      	movs	r3, #0
    10f4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    10f6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    10f8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    10fa:	3301      	adds	r3, #1
    10fc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    10fe:	b2c0      	uxtb	r0, r0
    1100:	4b82      	ldr	r3, [pc, #520]	; (130c <adc_init+0x348>)
    1102:	4798      	blx	r3
    1104:	e7dd      	b.n	10c2 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    1106:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    1108:	2250      	movs	r2, #80	; 0x50
    110a:	497f      	ldr	r1, [pc, #508]	; (1308 <adc_init+0x344>)
    110c:	a802      	add	r0, sp, #8
    110e:	4b7d      	ldr	r3, [pc, #500]	; (1304 <adc_init+0x340>)
    1110:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1112:	2c13      	cmp	r4, #19
    1114:	d915      	bls.n	1142 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    1116:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1118:	2250      	movs	r2, #80	; 0x50
    111a:	497b      	ldr	r1, [pc, #492]	; (1308 <adc_init+0x344>)
    111c:	a802      	add	r0, sp, #8
    111e:	4b79      	ldr	r3, [pc, #484]	; (1304 <adc_init+0x340>)
    1120:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1122:	2c13      	cmp	r4, #19
    1124:	d8cd      	bhi.n	10c2 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1126:	00a4      	lsls	r4, r4, #2
    1128:	ab02      	add	r3, sp, #8
    112a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    112c:	a901      	add	r1, sp, #4
    112e:	2300      	movs	r3, #0
    1130:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1132:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1134:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1136:	3301      	adds	r3, #1
    1138:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    113a:	b2c0      	uxtb	r0, r0
    113c:	4b73      	ldr	r3, [pc, #460]	; (130c <adc_init+0x348>)
    113e:	4798      	blx	r3
    1140:	e7bf      	b.n	10c2 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1142:	00a4      	lsls	r4, r4, #2
    1144:	ab02      	add	r3, sp, #8
    1146:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1148:	a901      	add	r1, sp, #4
    114a:	2300      	movs	r3, #0
    114c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    114e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1150:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1152:	3301      	adds	r3, #1
    1154:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1156:	b2c0      	uxtb	r0, r0
    1158:	4b6c      	ldr	r3, [pc, #432]	; (130c <adc_init+0x348>)
    115a:	4798      	blx	r3
    115c:	e7db      	b.n	1116 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    115e:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1160:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    1162:	2102      	movs	r1, #2
    1164:	e01a      	b.n	119c <adc_init+0x1d8>
		adjres = config->divide_result;
    1166:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1168:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    116a:	2410      	movs	r4, #16
    116c:	e016      	b.n	119c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    116e:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1170:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1172:	2101      	movs	r1, #1
    1174:	e012      	b.n	119c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    1176:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1178:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    117a:	2100      	movs	r1, #0
    117c:	e00e      	b.n	119c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    117e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1180:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    1182:	2100      	movs	r1, #0
    1184:	e00a      	b.n	119c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1186:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1188:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    118a:	2100      	movs	r1, #0
    118c:	e006      	b.n	119c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    118e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1190:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    1192:	2100      	movs	r1, #0
    1194:	e002      	b.n	119c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    1196:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    1198:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    119a:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    119c:	0109      	lsls	r1, r1, #4
    119e:	2270      	movs	r2, #112	; 0x70
    11a0:	400a      	ands	r2, r1
    11a2:	4313      	orrs	r3, r2
    11a4:	4642      	mov	r2, r8
    11a6:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    11a8:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    11aa:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    11ac:	2b3f      	cmp	r3, #63	; 0x3f
    11ae:	d900      	bls.n	11b2 <adc_init+0x1ee>
    11b0:	e71b      	b.n	fea <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    11b2:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    11b4:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    11b6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    11b8:	b25b      	sxtb	r3, r3
    11ba:	2b00      	cmp	r3, #0
    11bc:	dbfb      	blt.n	11b6 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    11be:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    11c0:	8872      	ldrh	r2, [r6, #2]
    11c2:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    11c4:	2224      	movs	r2, #36	; 0x24
    11c6:	5cb2      	ldrb	r2, [r6, r2]
    11c8:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    11ca:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    11cc:	7d32      	ldrb	r2, [r6, #20]
    11ce:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    11d0:	4313      	orrs	r3, r2
    11d2:	7cb2      	ldrb	r2, [r6, #18]
    11d4:	0052      	lsls	r2, r2, #1
    11d6:	4313      	orrs	r3, r2
    11d8:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    11da:	4642      	mov	r2, r8
    11dc:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    11de:	7e33      	ldrb	r3, [r6, #24]
    11e0:	2b00      	cmp	r3, #0
    11e2:	d020      	beq.n	1226 <adc_init+0x262>
		switch (resolution) {
    11e4:	2c10      	cmp	r4, #16
    11e6:	d100      	bne.n	11ea <adc_init+0x226>
    11e8:	e0d9      	b.n	139e <adc_init+0x3da>
    11ea:	d800      	bhi.n	11ee <adc_init+0x22a>
    11ec:	e098      	b.n	1320 <adc_init+0x35c>
    11ee:	2c20      	cmp	r4, #32
    11f0:	d100      	bne.n	11f4 <adc_init+0x230>
    11f2:	e0b6      	b.n	1362 <adc_init+0x39e>
    11f4:	2c30      	cmp	r4, #48	; 0x30
    11f6:	d116      	bne.n	1226 <adc_init+0x262>
			if (config->differential_mode &&
    11f8:	7cf2      	ldrb	r2, [r6, #19]
    11fa:	2a00      	cmp	r2, #0
    11fc:	d00a      	beq.n	1214 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    11fe:	69f2      	ldr	r2, [r6, #28]
    1200:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    1202:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1204:	2aff      	cmp	r2, #255	; 0xff
    1206:	d900      	bls.n	120a <adc_init+0x246>
    1208:	e6ef      	b.n	fea <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    120a:	6a32      	ldr	r2, [r6, #32]
    120c:	3280      	adds	r2, #128	; 0x80
    120e:	2aff      	cmp	r2, #255	; 0xff
    1210:	d900      	bls.n	1214 <adc_init+0x250>
    1212:	e6ea      	b.n	fea <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    1214:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    1216:	69f2      	ldr	r2, [r6, #28]
    1218:	2aff      	cmp	r2, #255	; 0xff
    121a:	dd00      	ble.n	121e <adc_init+0x25a>
    121c:	e6e5      	b.n	fea <adc_init+0x26>
    121e:	6a32      	ldr	r2, [r6, #32]
    1220:	2aff      	cmp	r2, #255	; 0xff
    1222:	dd00      	ble.n	1226 <adc_init+0x262>
    1224:	e6e1      	b.n	fea <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1226:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1228:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    122a:	b252      	sxtb	r2, r2
    122c:	2a00      	cmp	r2, #0
    122e:	dbfb      	blt.n	1228 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1230:	4642      	mov	r2, r8
    1232:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    1234:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1236:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1238:	b25b      	sxtb	r3, r3
    123a:	2b00      	cmp	r3, #0
    123c:	dbfb      	blt.n	1236 <adc_init+0x272>
	adc_module->WINLT.reg =
    123e:	8bb3      	ldrh	r3, [r6, #28]
    1240:	4642      	mov	r2, r8
    1242:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    1244:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1246:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1248:	b25b      	sxtb	r3, r3
    124a:	2b00      	cmp	r3, #0
    124c:	dbfb      	blt.n	1246 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    124e:	8c33      	ldrh	r3, [r6, #32]
    1250:	4642      	mov	r2, r8
    1252:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1254:	232c      	movs	r3, #44	; 0x2c
    1256:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1258:	2b00      	cmp	r3, #0
    125a:	d005      	beq.n	1268 <adc_init+0x2a4>
		inputs_to_scan--;
    125c:	3b01      	subs	r3, #1
    125e:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1260:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1262:	2b0f      	cmp	r3, #15
    1264:	d900      	bls.n	1268 <adc_init+0x2a4>
    1266:	e6c0      	b.n	fea <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1268:	222b      	movs	r2, #43	; 0x2b
    126a:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    126c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    126e:	290f      	cmp	r1, #15
    1270:	d900      	bls.n	1274 <adc_init+0x2b0>
    1272:	e6ba      	b.n	fea <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1274:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1276:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1278:	b252      	sxtb	r2, r2
    127a:	2a00      	cmp	r2, #0
    127c:	dbfb      	blt.n	1276 <adc_init+0x2b2>
			config->negative_input |
    127e:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1280:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    1282:	4302      	orrs	r2, r0
    1284:	68b0      	ldr	r0, [r6, #8]
    1286:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    1288:	0509      	lsls	r1, r1, #20
			config->negative_input |
    128a:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    128c:	041b      	lsls	r3, r3, #16
			config->negative_input |
    128e:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1290:	4642      	mov	r2, r8
    1292:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    1294:	232a      	movs	r3, #42	; 0x2a
    1296:	5cf3      	ldrb	r3, [r6, r3]
    1298:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    129a:	230f      	movs	r3, #15
    129c:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    129e:	3315      	adds	r3, #21
    12a0:	5cf3      	ldrb	r3, [r6, r3]
    12a2:	2b00      	cmp	r3, #0
    12a4:	d012      	beq.n	12cc <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    12a6:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    12a8:	4a1a      	ldr	r2, [pc, #104]	; (1314 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    12aa:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    12ac:	4293      	cmp	r3, r2
    12ae:	d900      	bls.n	12b2 <adc_init+0x2ee>
    12b0:	e69b      	b.n	fea <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    12b2:	4642      	mov	r2, r8
    12b4:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    12b6:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    12b8:	2380      	movs	r3, #128	; 0x80
    12ba:	011b      	lsls	r3, r3, #4
    12bc:	18d3      	adds	r3, r2, r3
    12be:	4915      	ldr	r1, [pc, #84]	; (1314 <adc_init+0x350>)
    12c0:	b29b      	uxth	r3, r3
    12c2:	428b      	cmp	r3, r1
    12c4:	d900      	bls.n	12c8 <adc_init+0x304>
    12c6:	e690      	b.n	fea <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    12c8:	4643      	mov	r3, r8
    12ca:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    12cc:	4b12      	ldr	r3, [pc, #72]	; (1318 <adc_init+0x354>)
    12ce:	681b      	ldr	r3, [r3, #0]
    12d0:	015b      	lsls	r3, r3, #5
    12d2:	22e0      	movs	r2, #224	; 0xe0
    12d4:	00d2      	lsls	r2, r2, #3
    12d6:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    12d8:	4a10      	ldr	r2, [pc, #64]	; (131c <adc_init+0x358>)
    12da:	6851      	ldr	r1, [r2, #4]
    12dc:	0149      	lsls	r1, r1, #5
    12de:	6812      	ldr	r2, [r2, #0]
    12e0:	0ed2      	lsrs	r2, r2, #27
    12e2:	430a      	orrs	r2, r1
    12e4:	b2d2      	uxtb	r2, r2
			) |
    12e6:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    12e8:	4642      	mov	r2, r8
    12ea:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    12ec:	2000      	movs	r0, #0
    12ee:	e67c      	b.n	fea <adc_init+0x26>
    12f0:	40000400 	.word	0x40000400
    12f4:	40000800 	.word	0x40000800
    12f8:	20000324 	.word	0x20000324
    12fc:	00002545 	.word	0x00002545
    1300:	000024b9 	.word	0x000024b9
    1304:	00003e9d 	.word	0x00003e9d
    1308:	00005724 	.word	0x00005724
    130c:	0000263d 	.word	0x0000263d
    1310:	00005650 	.word	0x00005650
    1314:	00000fff 	.word	0x00000fff
    1318:	00806024 	.word	0x00806024
    131c:	00806020 	.word	0x00806020
		switch (resolution) {
    1320:	2c00      	cmp	r4, #0
    1322:	d000      	beq.n	1326 <adc_init+0x362>
    1324:	e77f      	b.n	1226 <adc_init+0x262>
			if (config->differential_mode &&
    1326:	7cf2      	ldrb	r2, [r6, #19]
    1328:	2a00      	cmp	r2, #0
    132a:	d00f      	beq.n	134c <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    132c:	69f2      	ldr	r2, [r6, #28]
    132e:	2180      	movs	r1, #128	; 0x80
    1330:	0109      	lsls	r1, r1, #4
    1332:	468c      	mov	ip, r1
    1334:	4462      	add	r2, ip
			if (config->differential_mode &&
    1336:	492a      	ldr	r1, [pc, #168]	; (13e0 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    1338:	2017      	movs	r0, #23
			if (config->differential_mode &&
    133a:	428a      	cmp	r2, r1
    133c:	d900      	bls.n	1340 <adc_init+0x37c>
    133e:	e654      	b.n	fea <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    1340:	6a32      	ldr	r2, [r6, #32]
    1342:	4462      	add	r2, ip
    1344:	4926      	ldr	r1, [pc, #152]	; (13e0 <adc_init+0x41c>)
    1346:	428a      	cmp	r2, r1
    1348:	d900      	bls.n	134c <adc_init+0x388>
    134a:	e64e      	b.n	fea <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    134c:	4a24      	ldr	r2, [pc, #144]	; (13e0 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    134e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    1350:	69f1      	ldr	r1, [r6, #28]
    1352:	4291      	cmp	r1, r2
    1354:	dd00      	ble.n	1358 <adc_init+0x394>
    1356:	e648      	b.n	fea <adc_init+0x26>
    1358:	6a31      	ldr	r1, [r6, #32]
    135a:	4291      	cmp	r1, r2
    135c:	dd00      	ble.n	1360 <adc_init+0x39c>
    135e:	e644      	b.n	fea <adc_init+0x26>
    1360:	e761      	b.n	1226 <adc_init+0x262>
			if (config->differential_mode &&
    1362:	7cf2      	ldrb	r2, [r6, #19]
    1364:	2a00      	cmp	r2, #0
    1366:	d00f      	beq.n	1388 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    1368:	69f2      	ldr	r2, [r6, #28]
    136a:	2180      	movs	r1, #128	; 0x80
    136c:	0089      	lsls	r1, r1, #2
    136e:	468c      	mov	ip, r1
    1370:	4462      	add	r2, ip
			if (config->differential_mode &&
    1372:	491c      	ldr	r1, [pc, #112]	; (13e4 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    1374:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1376:	428a      	cmp	r2, r1
    1378:	d900      	bls.n	137c <adc_init+0x3b8>
    137a:	e636      	b.n	fea <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    137c:	6a32      	ldr	r2, [r6, #32]
    137e:	4462      	add	r2, ip
    1380:	4918      	ldr	r1, [pc, #96]	; (13e4 <adc_init+0x420>)
    1382:	428a      	cmp	r2, r1
    1384:	d900      	bls.n	1388 <adc_init+0x3c4>
    1386:	e630      	b.n	fea <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    1388:	4a16      	ldr	r2, [pc, #88]	; (13e4 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    138a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    138c:	69f1      	ldr	r1, [r6, #28]
    138e:	4291      	cmp	r1, r2
    1390:	dd00      	ble.n	1394 <adc_init+0x3d0>
    1392:	e62a      	b.n	fea <adc_init+0x26>
    1394:	6a31      	ldr	r1, [r6, #32]
    1396:	4291      	cmp	r1, r2
    1398:	dd00      	ble.n	139c <adc_init+0x3d8>
    139a:	e626      	b.n	fea <adc_init+0x26>
    139c:	e743      	b.n	1226 <adc_init+0x262>
			if (config->differential_mode &&
    139e:	7cf2      	ldrb	r2, [r6, #19]
    13a0:	2a00      	cmp	r2, #0
    13a2:	d00f      	beq.n	13c4 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    13a4:	69f2      	ldr	r2, [r6, #28]
    13a6:	2180      	movs	r1, #128	; 0x80
    13a8:	0209      	lsls	r1, r1, #8
    13aa:	468c      	mov	ip, r1
    13ac:	4462      	add	r2, ip
			if (config->differential_mode &&
    13ae:	490e      	ldr	r1, [pc, #56]	; (13e8 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    13b0:	2017      	movs	r0, #23
			if (config->differential_mode &&
    13b2:	428a      	cmp	r2, r1
    13b4:	d900      	bls.n	13b8 <adc_init+0x3f4>
    13b6:	e618      	b.n	fea <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    13b8:	6a32      	ldr	r2, [r6, #32]
    13ba:	4462      	add	r2, ip
    13bc:	490a      	ldr	r1, [pc, #40]	; (13e8 <adc_init+0x424>)
    13be:	428a      	cmp	r2, r1
    13c0:	d900      	bls.n	13c4 <adc_init+0x400>
    13c2:	e612      	b.n	fea <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    13c4:	4a08      	ldr	r2, [pc, #32]	; (13e8 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    13c6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    13c8:	69f1      	ldr	r1, [r6, #28]
    13ca:	4291      	cmp	r1, r2
    13cc:	dd00      	ble.n	13d0 <adc_init+0x40c>
    13ce:	e60c      	b.n	fea <adc_init+0x26>
    13d0:	6a31      	ldr	r1, [r6, #32]
    13d2:	4291      	cmp	r1, r2
    13d4:	dd00      	ble.n	13d8 <adc_init+0x414>
    13d6:	e608      	b.n	fea <adc_init+0x26>
    13d8:	e725      	b.n	1226 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    13da:	2017      	movs	r0, #23
    13dc:	e605      	b.n	fea <adc_init+0x26>
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	00000fff 	.word	0x00000fff
    13e4:	000003ff 	.word	0x000003ff
    13e8:	0000ffff 	.word	0x0000ffff

000013ec <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    13ec:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    13ee:	4b2f      	ldr	r3, [pc, #188]	; (14ac <ADC_Handler+0xc0>)
    13f0:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    13f2:	682b      	ldr	r3, [r5, #0]
    13f4:	7e1a      	ldrb	r2, [r3, #24]
    13f6:	7ddc      	ldrb	r4, [r3, #23]
    13f8:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    13fa:	07e2      	lsls	r2, r4, #31
    13fc:	d416      	bmi.n	142c <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
    13fe:	0763      	lsls	r3, r4, #29
    1400:	d508      	bpl.n	1414 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    1402:	2304      	movs	r3, #4
    1404:	682a      	ldr	r2, [r5, #0]
    1406:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    1408:	7eeb      	ldrb	r3, [r5, #27]
    140a:	079b      	lsls	r3, r3, #30
    140c:	d502      	bpl.n	1414 <ADC_Handler+0x28>
    140e:	7eab      	ldrb	r3, [r5, #26]
    1410:	079b      	lsls	r3, r3, #30
    1412:	d442      	bmi.n	149a <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    1414:	07a3      	lsls	r3, r4, #30
    1416:	d508      	bpl.n	142a <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    1418:	2302      	movs	r3, #2
    141a:	682a      	ldr	r2, [r5, #0]
    141c:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    141e:	7eeb      	ldrb	r3, [r5, #27]
    1420:	075b      	lsls	r3, r3, #29
    1422:	d502      	bpl.n	142a <ADC_Handler+0x3e>
    1424:	7eab      	ldrb	r3, [r5, #26]
    1426:	075b      	lsls	r3, r3, #29
    1428:	d43b      	bmi.n	14a2 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    142a:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    142c:	2201      	movs	r2, #1
    142e:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    1430:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1432:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
    1434:	b25b      	sxtb	r3, r3
    1436:	2b00      	cmp	r3, #0
    1438:	dbfb      	blt.n	1432 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    143a:	6969      	ldr	r1, [r5, #20]
    143c:	1c8b      	adds	r3, r1, #2
    143e:	616b      	str	r3, [r5, #20]
    1440:	8b53      	ldrh	r3, [r2, #26]
    1442:	b29b      	uxth	r3, r3
    1444:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
    1446:	8b2b      	ldrh	r3, [r5, #24]
    1448:	3b01      	subs	r3, #1
    144a:	b29b      	uxth	r3, r3
    144c:	832b      	strh	r3, [r5, #24]
    144e:	2b00      	cmp	r3, #0
    1450:	d011      	beq.n	1476 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
    1452:	7f6b      	ldrb	r3, [r5, #29]
    1454:	2b00      	cmp	r3, #0
    1456:	d0d2      	beq.n	13fe <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1458:	682a      	ldr	r2, [r5, #0]
    145a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    145c:	b25b      	sxtb	r3, r3
    145e:	2b00      	cmp	r3, #0
    1460:	dbfb      	blt.n	145a <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    1462:	7b13      	ldrb	r3, [r2, #12]
    1464:	2102      	movs	r1, #2
    1466:	430b      	orrs	r3, r1
    1468:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    146a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    146c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    146e:	b25b      	sxtb	r3, r3
    1470:	2b00      	cmp	r3, #0
    1472:	dbfb      	blt.n	146c <ADC_Handler+0x80>
    1474:	e7c3      	b.n	13fe <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    1476:	2301      	movs	r3, #1
    1478:	682a      	ldr	r2, [r5, #0]
    147a:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
    147c:	7f2b      	ldrb	r3, [r5, #28]
    147e:	2b05      	cmp	r3, #5
    1480:	d1bd      	bne.n	13fe <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
    1482:	2300      	movs	r3, #0
    1484:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    1486:	7eeb      	ldrb	r3, [r5, #27]
    1488:	07db      	lsls	r3, r3, #31
    148a:	d5b8      	bpl.n	13fe <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    148c:	7eab      	ldrb	r3, [r5, #26]
    148e:	07db      	lsls	r3, r3, #31
    1490:	d5b5      	bpl.n	13fe <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    1492:	0028      	movs	r0, r5
    1494:	68ab      	ldr	r3, [r5, #8]
    1496:	4798      	blx	r3
    1498:	e7b1      	b.n	13fe <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    149a:	0028      	movs	r0, r5
    149c:	68eb      	ldr	r3, [r5, #12]
    149e:	4798      	blx	r3
    14a0:	e7b8      	b.n	1414 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    14a2:	692b      	ldr	r3, [r5, #16]
    14a4:	0028      	movs	r0, r5
    14a6:	4798      	blx	r3
}
    14a8:	e7bf      	b.n	142a <ADC_Handler+0x3e>
    14aa:	46c0      	nop			; (mov r8, r8)
    14ac:	20000324 	.word	0x20000324

000014b0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    14b0:	b500      	push	{lr}
    14b2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    14b4:	ab01      	add	r3, sp, #4
    14b6:	2280      	movs	r2, #128	; 0x80
    14b8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    14ba:	780a      	ldrb	r2, [r1, #0]
    14bc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    14be:	784a      	ldrb	r2, [r1, #1]
    14c0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    14c2:	788a      	ldrb	r2, [r1, #2]
    14c4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    14c6:	0019      	movs	r1, r3
    14c8:	4b01      	ldr	r3, [pc, #4]	; (14d0 <port_pin_set_config+0x20>)
    14ca:	4798      	blx	r3
}
    14cc:	b003      	add	sp, #12
    14ce:	bd00      	pop	{pc}
    14d0:	0000263d 	.word	0x0000263d

000014d4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    14d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14d6:	46de      	mov	lr, fp
    14d8:	4657      	mov	r7, sl
    14da:	464e      	mov	r6, r9
    14dc:	4645      	mov	r5, r8
    14de:	b5e0      	push	{r5, r6, r7, lr}
    14e0:	b087      	sub	sp, #28
    14e2:	4680      	mov	r8, r0
    14e4:	9104      	str	r1, [sp, #16]
    14e6:	0016      	movs	r6, r2
    14e8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    14ea:	2200      	movs	r2, #0
    14ec:	2300      	movs	r3, #0
    14ee:	2100      	movs	r1, #0
    14f0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    14f2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    14f4:	2001      	movs	r0, #1
    14f6:	0021      	movs	r1, r4
    14f8:	9600      	str	r6, [sp, #0]
    14fa:	9701      	str	r7, [sp, #4]
    14fc:	465c      	mov	r4, fp
    14fe:	9403      	str	r4, [sp, #12]
    1500:	4644      	mov	r4, r8
    1502:	9405      	str	r4, [sp, #20]
    1504:	e013      	b.n	152e <long_division+0x5a>
    1506:	2420      	movs	r4, #32
    1508:	1a64      	subs	r4, r4, r1
    150a:	0005      	movs	r5, r0
    150c:	40e5      	lsrs	r5, r4
    150e:	46a8      	mov	r8, r5
    1510:	e014      	b.n	153c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1512:	9c00      	ldr	r4, [sp, #0]
    1514:	9d01      	ldr	r5, [sp, #4]
    1516:	1b12      	subs	r2, r2, r4
    1518:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    151a:	465c      	mov	r4, fp
    151c:	464d      	mov	r5, r9
    151e:	432c      	orrs	r4, r5
    1520:	46a3      	mov	fp, r4
    1522:	9c03      	ldr	r4, [sp, #12]
    1524:	4645      	mov	r5, r8
    1526:	432c      	orrs	r4, r5
    1528:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    152a:	3901      	subs	r1, #1
    152c:	d325      	bcc.n	157a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    152e:	2420      	movs	r4, #32
    1530:	4264      	negs	r4, r4
    1532:	190c      	adds	r4, r1, r4
    1534:	d4e7      	bmi.n	1506 <long_division+0x32>
    1536:	0005      	movs	r5, r0
    1538:	40a5      	lsls	r5, r4
    153a:	46a8      	mov	r8, r5
    153c:	0004      	movs	r4, r0
    153e:	408c      	lsls	r4, r1
    1540:	46a1      	mov	r9, r4
		r = r << 1;
    1542:	1892      	adds	r2, r2, r2
    1544:	415b      	adcs	r3, r3
    1546:	0014      	movs	r4, r2
    1548:	001d      	movs	r5, r3
		if (n & bit_shift) {
    154a:	9e05      	ldr	r6, [sp, #20]
    154c:	464f      	mov	r7, r9
    154e:	403e      	ands	r6, r7
    1550:	46b4      	mov	ip, r6
    1552:	9e04      	ldr	r6, [sp, #16]
    1554:	4647      	mov	r7, r8
    1556:	403e      	ands	r6, r7
    1558:	46b2      	mov	sl, r6
    155a:	4666      	mov	r6, ip
    155c:	4657      	mov	r7, sl
    155e:	433e      	orrs	r6, r7
    1560:	d003      	beq.n	156a <long_division+0x96>
			r |= 0x01;
    1562:	0006      	movs	r6, r0
    1564:	4326      	orrs	r6, r4
    1566:	0032      	movs	r2, r6
    1568:	002b      	movs	r3, r5
		if (r >= d) {
    156a:	9c00      	ldr	r4, [sp, #0]
    156c:	9d01      	ldr	r5, [sp, #4]
    156e:	429d      	cmp	r5, r3
    1570:	d8db      	bhi.n	152a <long_division+0x56>
    1572:	d1ce      	bne.n	1512 <long_division+0x3e>
    1574:	4294      	cmp	r4, r2
    1576:	d8d8      	bhi.n	152a <long_division+0x56>
    1578:	e7cb      	b.n	1512 <long_division+0x3e>
    157a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    157c:	4658      	mov	r0, fp
    157e:	0019      	movs	r1, r3
    1580:	b007      	add	sp, #28
    1582:	bc3c      	pop	{r2, r3, r4, r5}
    1584:	4690      	mov	r8, r2
    1586:	4699      	mov	r9, r3
    1588:	46a2      	mov	sl, r4
    158a:	46ab      	mov	fp, r5
    158c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000158e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    158e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1590:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1592:	2340      	movs	r3, #64	; 0x40
    1594:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1596:	4281      	cmp	r1, r0
    1598:	d202      	bcs.n	15a0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    159a:	0018      	movs	r0, r3
    159c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    159e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    15a0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    15a2:	1c63      	adds	r3, r4, #1
    15a4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    15a6:	4288      	cmp	r0, r1
    15a8:	d9f9      	bls.n	159e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    15aa:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    15ac:	2cff      	cmp	r4, #255	; 0xff
    15ae:	d8f4      	bhi.n	159a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    15b0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    15b2:	2300      	movs	r3, #0
    15b4:	e7f1      	b.n	159a <_sercom_get_sync_baud_val+0xc>
	...

000015b8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    15b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15ba:	b083      	sub	sp, #12
    15bc:	000f      	movs	r7, r1
    15be:	0016      	movs	r6, r2
    15c0:	aa08      	add	r2, sp, #32
    15c2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    15c4:	0004      	movs	r4, r0
    15c6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    15c8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    15ca:	42bc      	cmp	r4, r7
    15cc:	d902      	bls.n	15d4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    15ce:	0010      	movs	r0, r2
    15d0:	b003      	add	sp, #12
    15d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    15d4:	2b00      	cmp	r3, #0
    15d6:	d114      	bne.n	1602 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    15d8:	0002      	movs	r2, r0
    15da:	0008      	movs	r0, r1
    15dc:	2100      	movs	r1, #0
    15de:	4c19      	ldr	r4, [pc, #100]	; (1644 <_sercom_get_async_baud_val+0x8c>)
    15e0:	47a0      	blx	r4
    15e2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    15e4:	003a      	movs	r2, r7
    15e6:	2300      	movs	r3, #0
    15e8:	2000      	movs	r0, #0
    15ea:	4c17      	ldr	r4, [pc, #92]	; (1648 <_sercom_get_async_baud_val+0x90>)
    15ec:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    15ee:	2200      	movs	r2, #0
    15f0:	2301      	movs	r3, #1
    15f2:	1a12      	subs	r2, r2, r0
    15f4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    15f6:	0c12      	lsrs	r2, r2, #16
    15f8:	041b      	lsls	r3, r3, #16
    15fa:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    15fc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    15fe:	2200      	movs	r2, #0
    1600:	e7e5      	b.n	15ce <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1602:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1604:	2b01      	cmp	r3, #1
    1606:	d1f9      	bne.n	15fc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1608:	000a      	movs	r2, r1
    160a:	2300      	movs	r3, #0
    160c:	2100      	movs	r1, #0
    160e:	4c0d      	ldr	r4, [pc, #52]	; (1644 <_sercom_get_async_baud_val+0x8c>)
    1610:	47a0      	blx	r4
    1612:	0002      	movs	r2, r0
    1614:	000b      	movs	r3, r1
    1616:	9200      	str	r2, [sp, #0]
    1618:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    161a:	0038      	movs	r0, r7
    161c:	2100      	movs	r1, #0
    161e:	4c0a      	ldr	r4, [pc, #40]	; (1648 <_sercom_get_async_baud_val+0x90>)
    1620:	47a0      	blx	r4
    1622:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1624:	2380      	movs	r3, #128	; 0x80
    1626:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1628:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    162a:	4298      	cmp	r0, r3
    162c:	d8cf      	bhi.n	15ce <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    162e:	0f79      	lsrs	r1, r7, #29
    1630:	00f8      	lsls	r0, r7, #3
    1632:	9a00      	ldr	r2, [sp, #0]
    1634:	9b01      	ldr	r3, [sp, #4]
    1636:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1638:	00ea      	lsls	r2, r5, #3
    163a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    163c:	b2d2      	uxtb	r2, r2
    163e:	0352      	lsls	r2, r2, #13
    1640:	432a      	orrs	r2, r5
    1642:	e7db      	b.n	15fc <_sercom_get_async_baud_val+0x44>
    1644:	00003ded 	.word	0x00003ded
    1648:	000014d5 	.word	0x000014d5

0000164c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    164c:	b510      	push	{r4, lr}
    164e:	b082      	sub	sp, #8
    1650:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1652:	4b0e      	ldr	r3, [pc, #56]	; (168c <sercom_set_gclk_generator+0x40>)
    1654:	781b      	ldrb	r3, [r3, #0]
    1656:	2b00      	cmp	r3, #0
    1658:	d007      	beq.n	166a <sercom_set_gclk_generator+0x1e>
    165a:	2900      	cmp	r1, #0
    165c:	d105      	bne.n	166a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    165e:	4b0b      	ldr	r3, [pc, #44]	; (168c <sercom_set_gclk_generator+0x40>)
    1660:	785b      	ldrb	r3, [r3, #1]
    1662:	4283      	cmp	r3, r0
    1664:	d010      	beq.n	1688 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1666:	201d      	movs	r0, #29
    1668:	e00c      	b.n	1684 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    166a:	a901      	add	r1, sp, #4
    166c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    166e:	2013      	movs	r0, #19
    1670:	4b07      	ldr	r3, [pc, #28]	; (1690 <sercom_set_gclk_generator+0x44>)
    1672:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1674:	2013      	movs	r0, #19
    1676:	4b07      	ldr	r3, [pc, #28]	; (1694 <sercom_set_gclk_generator+0x48>)
    1678:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    167a:	4b04      	ldr	r3, [pc, #16]	; (168c <sercom_set_gclk_generator+0x40>)
    167c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    167e:	2201      	movs	r2, #1
    1680:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1682:	2000      	movs	r0, #0
}
    1684:	b002      	add	sp, #8
    1686:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1688:	2000      	movs	r0, #0
    168a:	e7fb      	b.n	1684 <sercom_set_gclk_generator+0x38>
    168c:	20000284 	.word	0x20000284
    1690:	00002545 	.word	0x00002545
    1694:	000024b9 	.word	0x000024b9

00001698 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1698:	4b40      	ldr	r3, [pc, #256]	; (179c <_sercom_get_default_pad+0x104>)
    169a:	4298      	cmp	r0, r3
    169c:	d031      	beq.n	1702 <_sercom_get_default_pad+0x6a>
    169e:	d90a      	bls.n	16b6 <_sercom_get_default_pad+0x1e>
    16a0:	4b3f      	ldr	r3, [pc, #252]	; (17a0 <_sercom_get_default_pad+0x108>)
    16a2:	4298      	cmp	r0, r3
    16a4:	d04d      	beq.n	1742 <_sercom_get_default_pad+0xaa>
    16a6:	4b3f      	ldr	r3, [pc, #252]	; (17a4 <_sercom_get_default_pad+0x10c>)
    16a8:	4298      	cmp	r0, r3
    16aa:	d05a      	beq.n	1762 <_sercom_get_default_pad+0xca>
    16ac:	4b3e      	ldr	r3, [pc, #248]	; (17a8 <_sercom_get_default_pad+0x110>)
    16ae:	4298      	cmp	r0, r3
    16b0:	d037      	beq.n	1722 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    16b2:	2000      	movs	r0, #0
}
    16b4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    16b6:	4b3d      	ldr	r3, [pc, #244]	; (17ac <_sercom_get_default_pad+0x114>)
    16b8:	4298      	cmp	r0, r3
    16ba:	d00c      	beq.n	16d6 <_sercom_get_default_pad+0x3e>
    16bc:	4b3c      	ldr	r3, [pc, #240]	; (17b0 <_sercom_get_default_pad+0x118>)
    16be:	4298      	cmp	r0, r3
    16c0:	d1f7      	bne.n	16b2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    16c2:	2901      	cmp	r1, #1
    16c4:	d017      	beq.n	16f6 <_sercom_get_default_pad+0x5e>
    16c6:	2900      	cmp	r1, #0
    16c8:	d05d      	beq.n	1786 <_sercom_get_default_pad+0xee>
    16ca:	2902      	cmp	r1, #2
    16cc:	d015      	beq.n	16fa <_sercom_get_default_pad+0x62>
    16ce:	2903      	cmp	r1, #3
    16d0:	d015      	beq.n	16fe <_sercom_get_default_pad+0x66>
	return 0;
    16d2:	2000      	movs	r0, #0
    16d4:	e7ee      	b.n	16b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    16d6:	2901      	cmp	r1, #1
    16d8:	d007      	beq.n	16ea <_sercom_get_default_pad+0x52>
    16da:	2900      	cmp	r1, #0
    16dc:	d051      	beq.n	1782 <_sercom_get_default_pad+0xea>
    16de:	2902      	cmp	r1, #2
    16e0:	d005      	beq.n	16ee <_sercom_get_default_pad+0x56>
    16e2:	2903      	cmp	r1, #3
    16e4:	d005      	beq.n	16f2 <_sercom_get_default_pad+0x5a>
	return 0;
    16e6:	2000      	movs	r0, #0
    16e8:	e7e4      	b.n	16b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    16ea:	4832      	ldr	r0, [pc, #200]	; (17b4 <_sercom_get_default_pad+0x11c>)
    16ec:	e7e2      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    16ee:	4832      	ldr	r0, [pc, #200]	; (17b8 <_sercom_get_default_pad+0x120>)
    16f0:	e7e0      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    16f2:	4832      	ldr	r0, [pc, #200]	; (17bc <_sercom_get_default_pad+0x124>)
    16f4:	e7de      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    16f6:	4832      	ldr	r0, [pc, #200]	; (17c0 <_sercom_get_default_pad+0x128>)
    16f8:	e7dc      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    16fa:	4832      	ldr	r0, [pc, #200]	; (17c4 <_sercom_get_default_pad+0x12c>)
    16fc:	e7da      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    16fe:	4832      	ldr	r0, [pc, #200]	; (17c8 <_sercom_get_default_pad+0x130>)
    1700:	e7d8      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    1702:	2901      	cmp	r1, #1
    1704:	d007      	beq.n	1716 <_sercom_get_default_pad+0x7e>
    1706:	2900      	cmp	r1, #0
    1708:	d03f      	beq.n	178a <_sercom_get_default_pad+0xf2>
    170a:	2902      	cmp	r1, #2
    170c:	d005      	beq.n	171a <_sercom_get_default_pad+0x82>
    170e:	2903      	cmp	r1, #3
    1710:	d005      	beq.n	171e <_sercom_get_default_pad+0x86>
	return 0;
    1712:	2000      	movs	r0, #0
    1714:	e7ce      	b.n	16b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1716:	482d      	ldr	r0, [pc, #180]	; (17cc <_sercom_get_default_pad+0x134>)
    1718:	e7cc      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    171a:	482d      	ldr	r0, [pc, #180]	; (17d0 <_sercom_get_default_pad+0x138>)
    171c:	e7ca      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    171e:	482d      	ldr	r0, [pc, #180]	; (17d4 <_sercom_get_default_pad+0x13c>)
    1720:	e7c8      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    1722:	2901      	cmp	r1, #1
    1724:	d007      	beq.n	1736 <_sercom_get_default_pad+0x9e>
    1726:	2900      	cmp	r1, #0
    1728:	d031      	beq.n	178e <_sercom_get_default_pad+0xf6>
    172a:	2902      	cmp	r1, #2
    172c:	d005      	beq.n	173a <_sercom_get_default_pad+0xa2>
    172e:	2903      	cmp	r1, #3
    1730:	d005      	beq.n	173e <_sercom_get_default_pad+0xa6>
	return 0;
    1732:	2000      	movs	r0, #0
    1734:	e7be      	b.n	16b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1736:	4828      	ldr	r0, [pc, #160]	; (17d8 <_sercom_get_default_pad+0x140>)
    1738:	e7bc      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    173a:	4828      	ldr	r0, [pc, #160]	; (17dc <_sercom_get_default_pad+0x144>)
    173c:	e7ba      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    173e:	4828      	ldr	r0, [pc, #160]	; (17e0 <_sercom_get_default_pad+0x148>)
    1740:	e7b8      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    1742:	2901      	cmp	r1, #1
    1744:	d007      	beq.n	1756 <_sercom_get_default_pad+0xbe>
    1746:	2900      	cmp	r1, #0
    1748:	d023      	beq.n	1792 <_sercom_get_default_pad+0xfa>
    174a:	2902      	cmp	r1, #2
    174c:	d005      	beq.n	175a <_sercom_get_default_pad+0xc2>
    174e:	2903      	cmp	r1, #3
    1750:	d005      	beq.n	175e <_sercom_get_default_pad+0xc6>
	return 0;
    1752:	2000      	movs	r0, #0
    1754:	e7ae      	b.n	16b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1756:	4823      	ldr	r0, [pc, #140]	; (17e4 <_sercom_get_default_pad+0x14c>)
    1758:	e7ac      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    175a:	4823      	ldr	r0, [pc, #140]	; (17e8 <_sercom_get_default_pad+0x150>)
    175c:	e7aa      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    175e:	4823      	ldr	r0, [pc, #140]	; (17ec <_sercom_get_default_pad+0x154>)
    1760:	e7a8      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    1762:	2901      	cmp	r1, #1
    1764:	d007      	beq.n	1776 <_sercom_get_default_pad+0xde>
    1766:	2900      	cmp	r1, #0
    1768:	d015      	beq.n	1796 <_sercom_get_default_pad+0xfe>
    176a:	2902      	cmp	r1, #2
    176c:	d005      	beq.n	177a <_sercom_get_default_pad+0xe2>
    176e:	2903      	cmp	r1, #3
    1770:	d005      	beq.n	177e <_sercom_get_default_pad+0xe6>
	return 0;
    1772:	2000      	movs	r0, #0
    1774:	e79e      	b.n	16b4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1776:	481e      	ldr	r0, [pc, #120]	; (17f0 <_sercom_get_default_pad+0x158>)
    1778:	e79c      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    177a:	481e      	ldr	r0, [pc, #120]	; (17f4 <_sercom_get_default_pad+0x15c>)
    177c:	e79a      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    177e:	481e      	ldr	r0, [pc, #120]	; (17f8 <_sercom_get_default_pad+0x160>)
    1780:	e798      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    1782:	481e      	ldr	r0, [pc, #120]	; (17fc <_sercom_get_default_pad+0x164>)
    1784:	e796      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    1786:	2003      	movs	r0, #3
    1788:	e794      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    178a:	481d      	ldr	r0, [pc, #116]	; (1800 <_sercom_get_default_pad+0x168>)
    178c:	e792      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    178e:	481d      	ldr	r0, [pc, #116]	; (1804 <_sercom_get_default_pad+0x16c>)
    1790:	e790      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    1792:	481d      	ldr	r0, [pc, #116]	; (1808 <_sercom_get_default_pad+0x170>)
    1794:	e78e      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    1796:	481d      	ldr	r0, [pc, #116]	; (180c <_sercom_get_default_pad+0x174>)
    1798:	e78c      	b.n	16b4 <_sercom_get_default_pad+0x1c>
    179a:	46c0      	nop			; (mov r8, r8)
    179c:	42001000 	.word	0x42001000
    17a0:	42001800 	.word	0x42001800
    17a4:	42001c00 	.word	0x42001c00
    17a8:	42001400 	.word	0x42001400
    17ac:	42000800 	.word	0x42000800
    17b0:	42000c00 	.word	0x42000c00
    17b4:	00050003 	.word	0x00050003
    17b8:	00060003 	.word	0x00060003
    17bc:	00070003 	.word	0x00070003
    17c0:	00010003 	.word	0x00010003
    17c4:	001e0003 	.word	0x001e0003
    17c8:	001f0003 	.word	0x001f0003
    17cc:	00090003 	.word	0x00090003
    17d0:	000a0003 	.word	0x000a0003
    17d4:	000b0003 	.word	0x000b0003
    17d8:	00110003 	.word	0x00110003
    17dc:	00120003 	.word	0x00120003
    17e0:	00130003 	.word	0x00130003
    17e4:	000d0003 	.word	0x000d0003
    17e8:	000e0003 	.word	0x000e0003
    17ec:	000f0003 	.word	0x000f0003
    17f0:	00170003 	.word	0x00170003
    17f4:	00180003 	.word	0x00180003
    17f8:	00190003 	.word	0x00190003
    17fc:	00040003 	.word	0x00040003
    1800:	00080003 	.word	0x00080003
    1804:	00100003 	.word	0x00100003
    1808:	000c0003 	.word	0x000c0003
    180c:	00160003 	.word	0x00160003

00001810 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1810:	b530      	push	{r4, r5, lr}
    1812:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1814:	4b0b      	ldr	r3, [pc, #44]	; (1844 <_sercom_get_sercom_inst_index+0x34>)
    1816:	466a      	mov	r2, sp
    1818:	cb32      	ldmia	r3!, {r1, r4, r5}
    181a:	c232      	stmia	r2!, {r1, r4, r5}
    181c:	cb32      	ldmia	r3!, {r1, r4, r5}
    181e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1820:	9b00      	ldr	r3, [sp, #0]
    1822:	4283      	cmp	r3, r0
    1824:	d00b      	beq.n	183e <_sercom_get_sercom_inst_index+0x2e>
    1826:	2301      	movs	r3, #1
    1828:	009a      	lsls	r2, r3, #2
    182a:	4669      	mov	r1, sp
    182c:	5852      	ldr	r2, [r2, r1]
    182e:	4282      	cmp	r2, r0
    1830:	d006      	beq.n	1840 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1832:	3301      	adds	r3, #1
    1834:	2b06      	cmp	r3, #6
    1836:	d1f7      	bne.n	1828 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1838:	2000      	movs	r0, #0
}
    183a:	b007      	add	sp, #28
    183c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    183e:	2300      	movs	r3, #0
			return i;
    1840:	b2d8      	uxtb	r0, r3
    1842:	e7fa      	b.n	183a <_sercom_get_sercom_inst_index+0x2a>
    1844:	00005774 	.word	0x00005774

00001848 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1848:	4770      	bx	lr
	...

0000184c <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    184c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    184e:	4b0a      	ldr	r3, [pc, #40]	; (1878 <_sercom_set_handler+0x2c>)
    1850:	781b      	ldrb	r3, [r3, #0]
    1852:	2b00      	cmp	r3, #0
    1854:	d10c      	bne.n	1870 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1856:	4f09      	ldr	r7, [pc, #36]	; (187c <_sercom_set_handler+0x30>)
    1858:	4e09      	ldr	r6, [pc, #36]	; (1880 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    185a:	4d0a      	ldr	r5, [pc, #40]	; (1884 <_sercom_set_handler+0x38>)
    185c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    185e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1860:	195a      	adds	r2, r3, r5
    1862:	6014      	str	r4, [r2, #0]
    1864:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1866:	2b18      	cmp	r3, #24
    1868:	d1f9      	bne.n	185e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    186a:	2201      	movs	r2, #1
    186c:	4b02      	ldr	r3, [pc, #8]	; (1878 <_sercom_set_handler+0x2c>)
    186e:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1870:	0080      	lsls	r0, r0, #2
    1872:	4b02      	ldr	r3, [pc, #8]	; (187c <_sercom_set_handler+0x30>)
    1874:	50c1      	str	r1, [r0, r3]
}
    1876:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1878:	20000286 	.word	0x20000286
    187c:	20000288 	.word	0x20000288
    1880:	00001849 	.word	0x00001849
    1884:	20000328 	.word	0x20000328

00001888 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1888:	b500      	push	{lr}
    188a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    188c:	2309      	movs	r3, #9
    188e:	466a      	mov	r2, sp
    1890:	7013      	strb	r3, [r2, #0]
    1892:	3301      	adds	r3, #1
    1894:	7053      	strb	r3, [r2, #1]
    1896:	3301      	adds	r3, #1
    1898:	7093      	strb	r3, [r2, #2]
    189a:	3301      	adds	r3, #1
    189c:	70d3      	strb	r3, [r2, #3]
    189e:	3301      	adds	r3, #1
    18a0:	7113      	strb	r3, [r2, #4]
    18a2:	3301      	adds	r3, #1
    18a4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    18a6:	4b03      	ldr	r3, [pc, #12]	; (18b4 <_sercom_get_interrupt_vector+0x2c>)
    18a8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    18aa:	466b      	mov	r3, sp
    18ac:	5618      	ldrsb	r0, [r3, r0]
}
    18ae:	b003      	add	sp, #12
    18b0:	bd00      	pop	{pc}
    18b2:	46c0      	nop			; (mov r8, r8)
    18b4:	00001811 	.word	0x00001811

000018b8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    18b8:	b510      	push	{r4, lr}
    18ba:	4b02      	ldr	r3, [pc, #8]	; (18c4 <SERCOM0_Handler+0xc>)
    18bc:	681b      	ldr	r3, [r3, #0]
    18be:	2000      	movs	r0, #0
    18c0:	4798      	blx	r3
    18c2:	bd10      	pop	{r4, pc}
    18c4:	20000288 	.word	0x20000288

000018c8 <SERCOM1_Handler>:
    18c8:	b510      	push	{r4, lr}
    18ca:	4b02      	ldr	r3, [pc, #8]	; (18d4 <SERCOM1_Handler+0xc>)
    18cc:	685b      	ldr	r3, [r3, #4]
    18ce:	2001      	movs	r0, #1
    18d0:	4798      	blx	r3
    18d2:	bd10      	pop	{r4, pc}
    18d4:	20000288 	.word	0x20000288

000018d8 <SERCOM2_Handler>:
    18d8:	b510      	push	{r4, lr}
    18da:	4b02      	ldr	r3, [pc, #8]	; (18e4 <SERCOM2_Handler+0xc>)
    18dc:	689b      	ldr	r3, [r3, #8]
    18de:	2002      	movs	r0, #2
    18e0:	4798      	blx	r3
    18e2:	bd10      	pop	{r4, pc}
    18e4:	20000288 	.word	0x20000288

000018e8 <SERCOM3_Handler>:
    18e8:	b510      	push	{r4, lr}
    18ea:	4b02      	ldr	r3, [pc, #8]	; (18f4 <SERCOM3_Handler+0xc>)
    18ec:	68db      	ldr	r3, [r3, #12]
    18ee:	2003      	movs	r0, #3
    18f0:	4798      	blx	r3
    18f2:	bd10      	pop	{r4, pc}
    18f4:	20000288 	.word	0x20000288

000018f8 <SERCOM4_Handler>:
    18f8:	b510      	push	{r4, lr}
    18fa:	4b02      	ldr	r3, [pc, #8]	; (1904 <SERCOM4_Handler+0xc>)
    18fc:	691b      	ldr	r3, [r3, #16]
    18fe:	2004      	movs	r0, #4
    1900:	4798      	blx	r3
    1902:	bd10      	pop	{r4, pc}
    1904:	20000288 	.word	0x20000288

00001908 <SERCOM5_Handler>:
    1908:	b510      	push	{r4, lr}
    190a:	4b02      	ldr	r3, [pc, #8]	; (1914 <SERCOM5_Handler+0xc>)
    190c:	695b      	ldr	r3, [r3, #20]
    190e:	2005      	movs	r0, #5
    1910:	4798      	blx	r3
    1912:	bd10      	pop	{r4, pc}
    1914:	20000288 	.word	0x20000288

00001918 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1918:	b5f0      	push	{r4, r5, r6, r7, lr}
    191a:	46de      	mov	lr, fp
    191c:	4657      	mov	r7, sl
    191e:	464e      	mov	r6, r9
    1920:	4645      	mov	r5, r8
    1922:	b5e0      	push	{r5, r6, r7, lr}
    1924:	b091      	sub	sp, #68	; 0x44
    1926:	0005      	movs	r5, r0
    1928:	000c      	movs	r4, r1
    192a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    192c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    192e:	0008      	movs	r0, r1
    1930:	4bba      	ldr	r3, [pc, #744]	; (1c1c <usart_init+0x304>)
    1932:	4798      	blx	r3
    1934:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1936:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1938:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    193a:	07db      	lsls	r3, r3, #31
    193c:	d506      	bpl.n	194c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    193e:	b011      	add	sp, #68	; 0x44
    1940:	bc3c      	pop	{r2, r3, r4, r5}
    1942:	4690      	mov	r8, r2
    1944:	4699      	mov	r9, r3
    1946:	46a2      	mov	sl, r4
    1948:	46ab      	mov	fp, r5
    194a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    194c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    194e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1950:	079b      	lsls	r3, r3, #30
    1952:	d4f4      	bmi.n	193e <usart_init+0x26>
    1954:	49b2      	ldr	r1, [pc, #712]	; (1c20 <usart_init+0x308>)
    1956:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1958:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    195a:	2301      	movs	r3, #1
    195c:	40bb      	lsls	r3, r7
    195e:	4303      	orrs	r3, r0
    1960:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1962:	a90f      	add	r1, sp, #60	; 0x3c
    1964:	272d      	movs	r7, #45	; 0x2d
    1966:	5df3      	ldrb	r3, [r6, r7]
    1968:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    196a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    196c:	b2d3      	uxtb	r3, r2
    196e:	9302      	str	r3, [sp, #8]
    1970:	0018      	movs	r0, r3
    1972:	4bac      	ldr	r3, [pc, #688]	; (1c24 <usart_init+0x30c>)
    1974:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1976:	9802      	ldr	r0, [sp, #8]
    1978:	4bab      	ldr	r3, [pc, #684]	; (1c28 <usart_init+0x310>)
    197a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    197c:	5df0      	ldrb	r0, [r6, r7]
    197e:	2100      	movs	r1, #0
    1980:	4baa      	ldr	r3, [pc, #680]	; (1c2c <usart_init+0x314>)
    1982:	4798      	blx	r3
	module->character_size = config->character_size;
    1984:	7af3      	ldrb	r3, [r6, #11]
    1986:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1988:	2324      	movs	r3, #36	; 0x24
    198a:	5cf3      	ldrb	r3, [r6, r3]
    198c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    198e:	2325      	movs	r3, #37	; 0x25
    1990:	5cf3      	ldrb	r3, [r6, r3]
    1992:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1994:	7ef3      	ldrb	r3, [r6, #27]
    1996:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1998:	7f33      	ldrb	r3, [r6, #28]
    199a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    199c:	682b      	ldr	r3, [r5, #0]
    199e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    19a0:	0018      	movs	r0, r3
    19a2:	4b9e      	ldr	r3, [pc, #632]	; (1c1c <usart_init+0x304>)
    19a4:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    19a6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    19a8:	2200      	movs	r2, #0
    19aa:	230e      	movs	r3, #14
    19ac:	a906      	add	r1, sp, #24
    19ae:	468c      	mov	ip, r1
    19b0:	4463      	add	r3, ip
    19b2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    19b4:	8a32      	ldrh	r2, [r6, #16]
    19b6:	9202      	str	r2, [sp, #8]
    19b8:	2380      	movs	r3, #128	; 0x80
    19ba:	01db      	lsls	r3, r3, #7
    19bc:	429a      	cmp	r2, r3
    19be:	d100      	bne.n	19c2 <usart_init+0xaa>
    19c0:	e09a      	b.n	1af8 <usart_init+0x1e0>
    19c2:	d90f      	bls.n	19e4 <usart_init+0xcc>
    19c4:	23c0      	movs	r3, #192	; 0xc0
    19c6:	01db      	lsls	r3, r3, #7
    19c8:	9a02      	ldr	r2, [sp, #8]
    19ca:	429a      	cmp	r2, r3
    19cc:	d100      	bne.n	19d0 <usart_init+0xb8>
    19ce:	e08e      	b.n	1aee <usart_init+0x1d6>
    19d0:	2380      	movs	r3, #128	; 0x80
    19d2:	021b      	lsls	r3, r3, #8
    19d4:	429a      	cmp	r2, r3
    19d6:	d000      	beq.n	19da <usart_init+0xc2>
    19d8:	e11b      	b.n	1c12 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    19da:	2303      	movs	r3, #3
    19dc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    19de:	2300      	movs	r3, #0
    19e0:	9307      	str	r3, [sp, #28]
    19e2:	e008      	b.n	19f6 <usart_init+0xde>
	switch (config->sample_rate) {
    19e4:	2380      	movs	r3, #128	; 0x80
    19e6:	019b      	lsls	r3, r3, #6
    19e8:	429a      	cmp	r2, r3
    19ea:	d000      	beq.n	19ee <usart_init+0xd6>
    19ec:	e111      	b.n	1c12 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    19ee:	2310      	movs	r3, #16
    19f0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    19f2:	3b0f      	subs	r3, #15
    19f4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    19f6:	6833      	ldr	r3, [r6, #0]
    19f8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    19fa:	68f3      	ldr	r3, [r6, #12]
    19fc:	469b      	mov	fp, r3
		config->sample_adjustment |
    19fe:	6973      	ldr	r3, [r6, #20]
    1a00:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1a02:	7e33      	ldrb	r3, [r6, #24]
    1a04:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1a06:	2326      	movs	r3, #38	; 0x26
    1a08:	5cf3      	ldrb	r3, [r6, r3]
    1a0a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1a0c:	6873      	ldr	r3, [r6, #4]
    1a0e:	4699      	mov	r9, r3
	switch (transfer_mode)
    1a10:	2b00      	cmp	r3, #0
    1a12:	d100      	bne.n	1a16 <usart_init+0xfe>
    1a14:	e09c      	b.n	1b50 <usart_init+0x238>
    1a16:	2380      	movs	r3, #128	; 0x80
    1a18:	055b      	lsls	r3, r3, #21
    1a1a:	4599      	cmp	r9, r3
    1a1c:	d100      	bne.n	1a20 <usart_init+0x108>
    1a1e:	e080      	b.n	1b22 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    1a20:	7e73      	ldrb	r3, [r6, #25]
    1a22:	2b00      	cmp	r3, #0
    1a24:	d002      	beq.n	1a2c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1a26:	7eb3      	ldrb	r3, [r6, #26]
    1a28:	4642      	mov	r2, r8
    1a2a:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1a2c:	230e      	movs	r3, #14
    1a2e:	aa06      	add	r2, sp, #24
    1a30:	4694      	mov	ip, r2
    1a32:	4463      	add	r3, ip
    1a34:	881b      	ldrh	r3, [r3, #0]
    1a36:	4642      	mov	r2, r8
    1a38:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1a3a:	9b05      	ldr	r3, [sp, #20]
    1a3c:	465a      	mov	r2, fp
    1a3e:	4313      	orrs	r3, r2
    1a40:	9a03      	ldr	r2, [sp, #12]
    1a42:	4313      	orrs	r3, r2
    1a44:	464a      	mov	r2, r9
    1a46:	4313      	orrs	r3, r2
    1a48:	9f02      	ldr	r7, [sp, #8]
    1a4a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1a4c:	9b04      	ldr	r3, [sp, #16]
    1a4e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1a50:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1a52:	4653      	mov	r3, sl
    1a54:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1a56:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1a58:	2327      	movs	r3, #39	; 0x27
    1a5a:	5cf3      	ldrb	r3, [r6, r3]
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	d101      	bne.n	1a64 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1a60:	3304      	adds	r3, #4
    1a62:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1a64:	7e73      	ldrb	r3, [r6, #25]
    1a66:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1a68:	7f32      	ldrb	r2, [r6, #28]
    1a6a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1a6c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1a6e:	7f72      	ldrb	r2, [r6, #29]
    1a70:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1a72:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1a74:	2224      	movs	r2, #36	; 0x24
    1a76:	5cb2      	ldrb	r2, [r6, r2]
    1a78:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1a7a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1a7c:	2225      	movs	r2, #37	; 0x25
    1a7e:	5cb2      	ldrb	r2, [r6, r2]
    1a80:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1a82:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1a84:	7ab1      	ldrb	r1, [r6, #10]
    1a86:	7af2      	ldrb	r2, [r6, #11]
    1a88:	4311      	orrs	r1, r2
    1a8a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1a8c:	8933      	ldrh	r3, [r6, #8]
    1a8e:	2bff      	cmp	r3, #255	; 0xff
    1a90:	d100      	bne.n	1a94 <usart_init+0x17c>
    1a92:	e081      	b.n	1b98 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1a94:	2280      	movs	r2, #128	; 0x80
    1a96:	0452      	lsls	r2, r2, #17
    1a98:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1a9a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1a9c:	232c      	movs	r3, #44	; 0x2c
    1a9e:	5cf3      	ldrb	r3, [r6, r3]
    1aa0:	2b00      	cmp	r3, #0
    1aa2:	d103      	bne.n	1aac <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1aa4:	4b62      	ldr	r3, [pc, #392]	; (1c30 <usart_init+0x318>)
    1aa6:	789b      	ldrb	r3, [r3, #2]
    1aa8:	079b      	lsls	r3, r3, #30
    1aaa:	d501      	bpl.n	1ab0 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1aac:	2380      	movs	r3, #128	; 0x80
    1aae:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ab0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1ab2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ab4:	2b00      	cmp	r3, #0
    1ab6:	d1fc      	bne.n	1ab2 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    1ab8:	4643      	mov	r3, r8
    1aba:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1abc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1abe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d1fc      	bne.n	1abe <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    1ac4:	4643      	mov	r3, r8
    1ac6:	601f      	str	r7, [r3, #0]
    1ac8:	ab0e      	add	r3, sp, #56	; 0x38
    1aca:	2280      	movs	r2, #128	; 0x80
    1acc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ace:	2200      	movs	r2, #0
    1ad0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1ad2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1ad4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1ad6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1ad8:	930a      	str	r3, [sp, #40]	; 0x28
    1ada:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1adc:	930b      	str	r3, [sp, #44]	; 0x2c
    1ade:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1ae0:	930c      	str	r3, [sp, #48]	; 0x30
    1ae2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1ae4:	9302      	str	r3, [sp, #8]
    1ae6:	930d      	str	r3, [sp, #52]	; 0x34
    1ae8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1aea:	ae0a      	add	r6, sp, #40	; 0x28
    1aec:	e063      	b.n	1bb6 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1aee:	2308      	movs	r3, #8
    1af0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1af2:	3b07      	subs	r3, #7
    1af4:	9307      	str	r3, [sp, #28]
    1af6:	e77e      	b.n	19f6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1af8:	6833      	ldr	r3, [r6, #0]
    1afa:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1afc:	68f3      	ldr	r3, [r6, #12]
    1afe:	469b      	mov	fp, r3
		config->sample_adjustment |
    1b00:	6973      	ldr	r3, [r6, #20]
    1b02:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1b04:	7e33      	ldrb	r3, [r6, #24]
    1b06:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1b08:	2326      	movs	r3, #38	; 0x26
    1b0a:	5cf3      	ldrb	r3, [r6, r3]
    1b0c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1b0e:	6873      	ldr	r3, [r6, #4]
    1b10:	4699      	mov	r9, r3
	switch (transfer_mode)
    1b12:	2b00      	cmp	r3, #0
    1b14:	d018      	beq.n	1b48 <usart_init+0x230>
    1b16:	2380      	movs	r3, #128	; 0x80
    1b18:	055b      	lsls	r3, r3, #21
    1b1a:	4599      	cmp	r9, r3
    1b1c:	d001      	beq.n	1b22 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    1b1e:	2000      	movs	r0, #0
    1b20:	e025      	b.n	1b6e <usart_init+0x256>
			if (!config->use_external_clock) {
    1b22:	2327      	movs	r3, #39	; 0x27
    1b24:	5cf3      	ldrb	r3, [r6, r3]
    1b26:	2b00      	cmp	r3, #0
    1b28:	d000      	beq.n	1b2c <usart_init+0x214>
    1b2a:	e779      	b.n	1a20 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1b2c:	6a33      	ldr	r3, [r6, #32]
    1b2e:	001f      	movs	r7, r3
    1b30:	b2c0      	uxtb	r0, r0
    1b32:	4b40      	ldr	r3, [pc, #256]	; (1c34 <usart_init+0x31c>)
    1b34:	4798      	blx	r3
    1b36:	0001      	movs	r1, r0
    1b38:	220e      	movs	r2, #14
    1b3a:	ab06      	add	r3, sp, #24
    1b3c:	469c      	mov	ip, r3
    1b3e:	4462      	add	r2, ip
    1b40:	0038      	movs	r0, r7
    1b42:	4b3d      	ldr	r3, [pc, #244]	; (1c38 <usart_init+0x320>)
    1b44:	4798      	blx	r3
    1b46:	e012      	b.n	1b6e <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1b48:	2308      	movs	r3, #8
    1b4a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b4c:	2300      	movs	r3, #0
    1b4e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1b50:	2327      	movs	r3, #39	; 0x27
    1b52:	5cf3      	ldrb	r3, [r6, r3]
    1b54:	2b00      	cmp	r3, #0
    1b56:	d00e      	beq.n	1b76 <usart_init+0x25e>
				status_code =
    1b58:	9b06      	ldr	r3, [sp, #24]
    1b5a:	9300      	str	r3, [sp, #0]
    1b5c:	9b07      	ldr	r3, [sp, #28]
    1b5e:	220e      	movs	r2, #14
    1b60:	a906      	add	r1, sp, #24
    1b62:	468c      	mov	ip, r1
    1b64:	4462      	add	r2, ip
    1b66:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1b68:	6a30      	ldr	r0, [r6, #32]
    1b6a:	4f34      	ldr	r7, [pc, #208]	; (1c3c <usart_init+0x324>)
    1b6c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1b6e:	2800      	cmp	r0, #0
    1b70:	d000      	beq.n	1b74 <usart_init+0x25c>
    1b72:	e6e4      	b.n	193e <usart_init+0x26>
    1b74:	e754      	b.n	1a20 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1b76:	6a33      	ldr	r3, [r6, #32]
    1b78:	001f      	movs	r7, r3
    1b7a:	b2c0      	uxtb	r0, r0
    1b7c:	4b2d      	ldr	r3, [pc, #180]	; (1c34 <usart_init+0x31c>)
    1b7e:	4798      	blx	r3
    1b80:	0001      	movs	r1, r0
				status_code =
    1b82:	9b06      	ldr	r3, [sp, #24]
    1b84:	9300      	str	r3, [sp, #0]
    1b86:	9b07      	ldr	r3, [sp, #28]
    1b88:	220e      	movs	r2, #14
    1b8a:	a806      	add	r0, sp, #24
    1b8c:	4684      	mov	ip, r0
    1b8e:	4462      	add	r2, ip
    1b90:	0038      	movs	r0, r7
    1b92:	4f2a      	ldr	r7, [pc, #168]	; (1c3c <usart_init+0x324>)
    1b94:	47b8      	blx	r7
    1b96:	e7ea      	b.n	1b6e <usart_init+0x256>
		if(config->lin_slave_enable) {
    1b98:	7ef3      	ldrb	r3, [r6, #27]
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d100      	bne.n	1ba0 <usart_init+0x288>
    1b9e:	e77d      	b.n	1a9c <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1ba0:	2380      	movs	r3, #128	; 0x80
    1ba2:	04db      	lsls	r3, r3, #19
    1ba4:	431f      	orrs	r7, r3
    1ba6:	e779      	b.n	1a9c <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1ba8:	0020      	movs	r0, r4
    1baa:	4b25      	ldr	r3, [pc, #148]	; (1c40 <usart_init+0x328>)
    1bac:	4798      	blx	r3
    1bae:	e007      	b.n	1bc0 <usart_init+0x2a8>
    1bb0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1bb2:	2f04      	cmp	r7, #4
    1bb4:	d00d      	beq.n	1bd2 <usart_init+0x2ba>
    1bb6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1bb8:	00bb      	lsls	r3, r7, #2
    1bba:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1bbc:	2800      	cmp	r0, #0
    1bbe:	d0f3      	beq.n	1ba8 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1bc0:	1c43      	adds	r3, r0, #1
    1bc2:	d0f5      	beq.n	1bb0 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1bc4:	a90e      	add	r1, sp, #56	; 0x38
    1bc6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1bc8:	0c00      	lsrs	r0, r0, #16
    1bca:	b2c0      	uxtb	r0, r0
    1bcc:	4b1d      	ldr	r3, [pc, #116]	; (1c44 <usart_init+0x32c>)
    1bce:	4798      	blx	r3
    1bd0:	e7ee      	b.n	1bb0 <usart_init+0x298>
		module->callback[i]            = NULL;
    1bd2:	2300      	movs	r3, #0
    1bd4:	60eb      	str	r3, [r5, #12]
    1bd6:	612b      	str	r3, [r5, #16]
    1bd8:	616b      	str	r3, [r5, #20]
    1bda:	61ab      	str	r3, [r5, #24]
    1bdc:	61eb      	str	r3, [r5, #28]
    1bde:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1be0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1be2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1be4:	2200      	movs	r2, #0
    1be6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1be8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1bea:	3330      	adds	r3, #48	; 0x30
    1bec:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1bee:	3301      	adds	r3, #1
    1bf0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1bf2:	3301      	adds	r3, #1
    1bf4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1bf6:	3301      	adds	r3, #1
    1bf8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1bfa:	6828      	ldr	r0, [r5, #0]
    1bfc:	4b07      	ldr	r3, [pc, #28]	; (1c1c <usart_init+0x304>)
    1bfe:	4798      	blx	r3
    1c00:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1c02:	4911      	ldr	r1, [pc, #68]	; (1c48 <usart_init+0x330>)
    1c04:	4b11      	ldr	r3, [pc, #68]	; (1c4c <usart_init+0x334>)
    1c06:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1c08:	00a4      	lsls	r4, r4, #2
    1c0a:	4b11      	ldr	r3, [pc, #68]	; (1c50 <usart_init+0x338>)
    1c0c:	50e5      	str	r5, [r4, r3]
	return status_code;
    1c0e:	2000      	movs	r0, #0
    1c10:	e695      	b.n	193e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1c12:	2310      	movs	r3, #16
    1c14:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1c16:	2300      	movs	r3, #0
    1c18:	9307      	str	r3, [sp, #28]
    1c1a:	e6ec      	b.n	19f6 <usart_init+0xde>
    1c1c:	00001811 	.word	0x00001811
    1c20:	40000400 	.word	0x40000400
    1c24:	00002545 	.word	0x00002545
    1c28:	000024b9 	.word	0x000024b9
    1c2c:	0000164d 	.word	0x0000164d
    1c30:	41002000 	.word	0x41002000
    1c34:	00002561 	.word	0x00002561
    1c38:	0000158f 	.word	0x0000158f
    1c3c:	000015b9 	.word	0x000015b9
    1c40:	00001699 	.word	0x00001699
    1c44:	0000263d 	.word	0x0000263d
    1c48:	00001d6d 	.word	0x00001d6d
    1c4c:	0000184d 	.word	0x0000184d
    1c50:	20000328 	.word	0x20000328

00001c54 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1c54:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1c56:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1c58:	2a00      	cmp	r2, #0
    1c5a:	d101      	bne.n	1c60 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1c5c:	0018      	movs	r0, r3
    1c5e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1c60:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1c62:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1c64:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1c66:	2a00      	cmp	r2, #0
    1c68:	d1f8      	bne.n	1c5c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c6a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1c6c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1c6e:	2102      	movs	r1, #2
    1c70:	7e13      	ldrb	r3, [r2, #24]
    1c72:	420b      	tst	r3, r1
    1c74:	d0fc      	beq.n	1c70 <usart_write_wait+0x1c>
	return STATUS_OK;
    1c76:	2300      	movs	r3, #0
    1c78:	e7f0      	b.n	1c5c <usart_write_wait+0x8>

00001c7a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1c7a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1c7c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1c7e:	2a00      	cmp	r2, #0
    1c80:	d101      	bne.n	1c86 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1c82:	0018      	movs	r0, r3
    1c84:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1c86:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1c88:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1c8a:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1c8c:	2a00      	cmp	r2, #0
    1c8e:	d1f8      	bne.n	1c82 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c90:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1c92:	7e10      	ldrb	r0, [r2, #24]
    1c94:	0740      	lsls	r0, r0, #29
    1c96:	d5f4      	bpl.n	1c82 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1c98:	8b53      	ldrh	r3, [r2, #26]
    1c9a:	b2db      	uxtb	r3, r3
	if (error_code) {
    1c9c:	0698      	lsls	r0, r3, #26
    1c9e:	d01d      	beq.n	1cdc <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1ca0:	0798      	lsls	r0, r3, #30
    1ca2:	d503      	bpl.n	1cac <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1ca4:	2302      	movs	r3, #2
    1ca6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1ca8:	3318      	adds	r3, #24
    1caa:	e7ea      	b.n	1c82 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1cac:	0758      	lsls	r0, r3, #29
    1cae:	d503      	bpl.n	1cb8 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1cb0:	2304      	movs	r3, #4
    1cb2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1cb4:	331a      	adds	r3, #26
    1cb6:	e7e4      	b.n	1c82 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1cb8:	07d8      	lsls	r0, r3, #31
    1cba:	d503      	bpl.n	1cc4 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1cbc:	2301      	movs	r3, #1
    1cbe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1cc0:	3312      	adds	r3, #18
    1cc2:	e7de      	b.n	1c82 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1cc4:	06d8      	lsls	r0, r3, #27
    1cc6:	d503      	bpl.n	1cd0 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1cc8:	2310      	movs	r3, #16
    1cca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1ccc:	3332      	adds	r3, #50	; 0x32
    1cce:	e7d8      	b.n	1c82 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1cd0:	069b      	lsls	r3, r3, #26
    1cd2:	d503      	bpl.n	1cdc <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1cd4:	2320      	movs	r3, #32
    1cd6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1cd8:	3321      	adds	r3, #33	; 0x21
    1cda:	e7d2      	b.n	1c82 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1cdc:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1cde:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1ce0:	2300      	movs	r3, #0
    1ce2:	e7ce      	b.n	1c82 <usart_read_wait+0x8>

00001ce4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ce6:	0004      	movs	r4, r0
    1ce8:	000d      	movs	r5, r1
    1cea:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1cec:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1cee:	4b0f      	ldr	r3, [pc, #60]	; (1d2c <_usart_read_buffer+0x48>)
    1cf0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1cf2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1cf4:	b29b      	uxth	r3, r3
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	d003      	beq.n	1d02 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    1cfa:	4b0d      	ldr	r3, [pc, #52]	; (1d30 <_usart_read_buffer+0x4c>)
    1cfc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1cfe:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1d02:	85a6      	strh	r6, [r4, #44]	; 0x2c
    1d04:	4b0a      	ldr	r3, [pc, #40]	; (1d30 <_usart_read_buffer+0x4c>)
    1d06:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1d08:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1d0a:	2205      	movs	r2, #5
    1d0c:	2332      	movs	r3, #50	; 0x32
    1d0e:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1d10:	3b2e      	subs	r3, #46	; 0x2e
    1d12:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    1d14:	7a23      	ldrb	r3, [r4, #8]
    1d16:	2b00      	cmp	r3, #0
    1d18:	d001      	beq.n	1d1e <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1d1a:	2320      	movs	r3, #32
    1d1c:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    1d1e:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1d20:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    1d22:	2b00      	cmp	r3, #0
    1d24:	d0ec      	beq.n	1d00 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    1d26:	2308      	movs	r3, #8
    1d28:	75bb      	strb	r3, [r7, #22]
    1d2a:	e7e9      	b.n	1d00 <_usart_read_buffer+0x1c>
    1d2c:	00000ed9 	.word	0x00000ed9
    1d30:	00000f19 	.word	0x00000f19

00001d34 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1d34:	1c93      	adds	r3, r2, #2
    1d36:	009b      	lsls	r3, r3, #2
    1d38:	18c3      	adds	r3, r0, r3
    1d3a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1d3c:	2130      	movs	r1, #48	; 0x30
    1d3e:	2301      	movs	r3, #1
    1d40:	4093      	lsls	r3, r2
    1d42:	001a      	movs	r2, r3
    1d44:	5c43      	ldrb	r3, [r0, r1]
    1d46:	4313      	orrs	r3, r2
    1d48:	5443      	strb	r3, [r0, r1]
}
    1d4a:	4770      	bx	lr

00001d4c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1d4c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1d4e:	2317      	movs	r3, #23
	if (length == 0) {
    1d50:	2a00      	cmp	r2, #0
    1d52:	d101      	bne.n	1d58 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1d54:	0018      	movs	r0, r3
    1d56:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1d58:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1d5a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1d5c:	2c00      	cmp	r4, #0
    1d5e:	d0f9      	beq.n	1d54 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1d60:	4b01      	ldr	r3, [pc, #4]	; (1d68 <usart_read_buffer_job+0x1c>)
    1d62:	4798      	blx	r3
    1d64:	0003      	movs	r3, r0
    1d66:	e7f5      	b.n	1d54 <usart_read_buffer_job+0x8>
    1d68:	00001ce5 	.word	0x00001ce5

00001d6c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1d6e:	0080      	lsls	r0, r0, #2
    1d70:	4b62      	ldr	r3, [pc, #392]	; (1efc <_usart_interrupt_handler+0x190>)
    1d72:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1d74:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1d76:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d1fc      	bne.n	1d76 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1d7c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1d7e:	7da6      	ldrb	r6, [r4, #22]
    1d80:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1d82:	2330      	movs	r3, #48	; 0x30
    1d84:	5ceb      	ldrb	r3, [r5, r3]
    1d86:	2231      	movs	r2, #49	; 0x31
    1d88:	5caf      	ldrb	r7, [r5, r2]
    1d8a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1d8c:	07f3      	lsls	r3, r6, #31
    1d8e:	d522      	bpl.n	1dd6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1d90:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1d92:	b29b      	uxth	r3, r3
    1d94:	2b00      	cmp	r3, #0
    1d96:	d01c      	beq.n	1dd2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1d98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1d9a:	7813      	ldrb	r3, [r2, #0]
    1d9c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1d9e:	1c51      	adds	r1, r2, #1
    1da0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1da2:	7969      	ldrb	r1, [r5, #5]
    1da4:	2901      	cmp	r1, #1
    1da6:	d00e      	beq.n	1dc6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1da8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1daa:	05db      	lsls	r3, r3, #23
    1dac:	0ddb      	lsrs	r3, r3, #23
    1dae:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1db0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1db2:	3b01      	subs	r3, #1
    1db4:	b29b      	uxth	r3, r3
    1db6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1db8:	2b00      	cmp	r3, #0
    1dba:	d10c      	bne.n	1dd6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1dbc:	3301      	adds	r3, #1
    1dbe:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1dc0:	3301      	adds	r3, #1
    1dc2:	75a3      	strb	r3, [r4, #22]
    1dc4:	e007      	b.n	1dd6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1dc6:	7851      	ldrb	r1, [r2, #1]
    1dc8:	0209      	lsls	r1, r1, #8
    1dca:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1dcc:	3202      	adds	r2, #2
    1dce:	62aa      	str	r2, [r5, #40]	; 0x28
    1dd0:	e7eb      	b.n	1daa <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1dd2:	2301      	movs	r3, #1
    1dd4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1dd6:	07b3      	lsls	r3, r6, #30
    1dd8:	d506      	bpl.n	1de8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1dda:	2302      	movs	r3, #2
    1ddc:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1dde:	2200      	movs	r2, #0
    1de0:	3331      	adds	r3, #49	; 0x31
    1de2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1de4:	07fb      	lsls	r3, r7, #31
    1de6:	d41a      	bmi.n	1e1e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1de8:	0773      	lsls	r3, r6, #29
    1dea:	d565      	bpl.n	1eb8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1dec:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1dee:	b29b      	uxth	r3, r3
    1df0:	2b00      	cmp	r3, #0
    1df2:	d05f      	beq.n	1eb4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1df4:	8b63      	ldrh	r3, [r4, #26]
    1df6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1df8:	071a      	lsls	r2, r3, #28
    1dfa:	d414      	bmi.n	1e26 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1dfc:	223f      	movs	r2, #63	; 0x3f
    1dfe:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1e00:	2b00      	cmp	r3, #0
    1e02:	d034      	beq.n	1e6e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1e04:	079a      	lsls	r2, r3, #30
    1e06:	d511      	bpl.n	1e2c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1e08:	221a      	movs	r2, #26
    1e0a:	2332      	movs	r3, #50	; 0x32
    1e0c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1e0e:	3b30      	subs	r3, #48	; 0x30
    1e10:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1e12:	077b      	lsls	r3, r7, #29
    1e14:	d550      	bpl.n	1eb8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1e16:	0028      	movs	r0, r5
    1e18:	696b      	ldr	r3, [r5, #20]
    1e1a:	4798      	blx	r3
    1e1c:	e04c      	b.n	1eb8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1e1e:	0028      	movs	r0, r5
    1e20:	68eb      	ldr	r3, [r5, #12]
    1e22:	4798      	blx	r3
    1e24:	e7e0      	b.n	1de8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1e26:	2237      	movs	r2, #55	; 0x37
    1e28:	4013      	ands	r3, r2
    1e2a:	e7e9      	b.n	1e00 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1e2c:	075a      	lsls	r2, r3, #29
    1e2e:	d505      	bpl.n	1e3c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1e30:	221e      	movs	r2, #30
    1e32:	2332      	movs	r3, #50	; 0x32
    1e34:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1e36:	3b2e      	subs	r3, #46	; 0x2e
    1e38:	8363      	strh	r3, [r4, #26]
    1e3a:	e7ea      	b.n	1e12 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1e3c:	07da      	lsls	r2, r3, #31
    1e3e:	d505      	bpl.n	1e4c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1e40:	2213      	movs	r2, #19
    1e42:	2332      	movs	r3, #50	; 0x32
    1e44:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1e46:	3b31      	subs	r3, #49	; 0x31
    1e48:	8363      	strh	r3, [r4, #26]
    1e4a:	e7e2      	b.n	1e12 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1e4c:	06da      	lsls	r2, r3, #27
    1e4e:	d505      	bpl.n	1e5c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1e50:	2242      	movs	r2, #66	; 0x42
    1e52:	2332      	movs	r3, #50	; 0x32
    1e54:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1e56:	3b22      	subs	r3, #34	; 0x22
    1e58:	8363      	strh	r3, [r4, #26]
    1e5a:	e7da      	b.n	1e12 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1e5c:	2220      	movs	r2, #32
    1e5e:	421a      	tst	r2, r3
    1e60:	d0d7      	beq.n	1e12 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1e62:	3221      	adds	r2, #33	; 0x21
    1e64:	2332      	movs	r3, #50	; 0x32
    1e66:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1e68:	3b12      	subs	r3, #18
    1e6a:	8363      	strh	r3, [r4, #26]
    1e6c:	e7d1      	b.n	1e12 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1e6e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1e70:	05db      	lsls	r3, r3, #23
    1e72:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1e74:	b2da      	uxtb	r2, r3
    1e76:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1e78:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1e7a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1e7c:	1c51      	adds	r1, r2, #1
    1e7e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1e80:	7969      	ldrb	r1, [r5, #5]
    1e82:	2901      	cmp	r1, #1
    1e84:	d010      	beq.n	1ea8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1e86:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1e88:	3b01      	subs	r3, #1
    1e8a:	b29b      	uxth	r3, r3
    1e8c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1e8e:	2b00      	cmp	r3, #0
    1e90:	d112      	bne.n	1eb8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1e92:	3304      	adds	r3, #4
    1e94:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1e96:	2200      	movs	r2, #0
    1e98:	332e      	adds	r3, #46	; 0x2e
    1e9a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1e9c:	07bb      	lsls	r3, r7, #30
    1e9e:	d50b      	bpl.n	1eb8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1ea0:	0028      	movs	r0, r5
    1ea2:	692b      	ldr	r3, [r5, #16]
    1ea4:	4798      	blx	r3
    1ea6:	e007      	b.n	1eb8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1ea8:	0a1b      	lsrs	r3, r3, #8
    1eaa:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1eac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1eae:	3301      	adds	r3, #1
    1eb0:	626b      	str	r3, [r5, #36]	; 0x24
    1eb2:	e7e8      	b.n	1e86 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1eb4:	2304      	movs	r3, #4
    1eb6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1eb8:	06f3      	lsls	r3, r6, #27
    1eba:	d504      	bpl.n	1ec6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1ebc:	2310      	movs	r3, #16
    1ebe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1ec0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1ec2:	06fb      	lsls	r3, r7, #27
    1ec4:	d40e      	bmi.n	1ee4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1ec6:	06b3      	lsls	r3, r6, #26
    1ec8:	d504      	bpl.n	1ed4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1eca:	2320      	movs	r3, #32
    1ecc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1ece:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1ed0:	073b      	lsls	r3, r7, #28
    1ed2:	d40b      	bmi.n	1eec <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1ed4:	0733      	lsls	r3, r6, #28
    1ed6:	d504      	bpl.n	1ee2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1ed8:	2308      	movs	r3, #8
    1eda:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1edc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1ede:	06bb      	lsls	r3, r7, #26
    1ee0:	d408      	bmi.n	1ef4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1ee4:	0028      	movs	r0, r5
    1ee6:	69eb      	ldr	r3, [r5, #28]
    1ee8:	4798      	blx	r3
    1eea:	e7ec      	b.n	1ec6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1eec:	0028      	movs	r0, r5
    1eee:	69ab      	ldr	r3, [r5, #24]
    1ef0:	4798      	blx	r3
    1ef2:	e7ef      	b.n	1ed4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1ef4:	6a2b      	ldr	r3, [r5, #32]
    1ef6:	0028      	movs	r0, r5
    1ef8:	4798      	blx	r3
}
    1efa:	e7f2      	b.n	1ee2 <_usart_interrupt_handler+0x176>
    1efc:	20000328 	.word	0x20000328

00001f00 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1f00:	b510      	push	{r4, lr}
	switch (clock_source) {
    1f02:	2808      	cmp	r0, #8
    1f04:	d803      	bhi.n	1f0e <system_clock_source_get_hz+0xe>
    1f06:	0080      	lsls	r0, r0, #2
    1f08:	4b1c      	ldr	r3, [pc, #112]	; (1f7c <system_clock_source_get_hz+0x7c>)
    1f0a:	581b      	ldr	r3, [r3, r0]
    1f0c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1f0e:	2000      	movs	r0, #0
    1f10:	e032      	b.n	1f78 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1f12:	4b1b      	ldr	r3, [pc, #108]	; (1f80 <system_clock_source_get_hz+0x80>)
    1f14:	6918      	ldr	r0, [r3, #16]
    1f16:	e02f      	b.n	1f78 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1f18:	4b1a      	ldr	r3, [pc, #104]	; (1f84 <system_clock_source_get_hz+0x84>)
    1f1a:	6a1b      	ldr	r3, [r3, #32]
    1f1c:	059b      	lsls	r3, r3, #22
    1f1e:	0f9b      	lsrs	r3, r3, #30
    1f20:	4819      	ldr	r0, [pc, #100]	; (1f88 <system_clock_source_get_hz+0x88>)
    1f22:	40d8      	lsrs	r0, r3
    1f24:	e028      	b.n	1f78 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1f26:	4b16      	ldr	r3, [pc, #88]	; (1f80 <system_clock_source_get_hz+0x80>)
    1f28:	6958      	ldr	r0, [r3, #20]
    1f2a:	e025      	b.n	1f78 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1f2c:	4b14      	ldr	r3, [pc, #80]	; (1f80 <system_clock_source_get_hz+0x80>)
    1f2e:	681b      	ldr	r3, [r3, #0]
			return 0;
    1f30:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1f32:	079b      	lsls	r3, r3, #30
    1f34:	d520      	bpl.n	1f78 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1f36:	4913      	ldr	r1, [pc, #76]	; (1f84 <system_clock_source_get_hz+0x84>)
    1f38:	2210      	movs	r2, #16
    1f3a:	68cb      	ldr	r3, [r1, #12]
    1f3c:	421a      	tst	r2, r3
    1f3e:	d0fc      	beq.n	1f3a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1f40:	4b0f      	ldr	r3, [pc, #60]	; (1f80 <system_clock_source_get_hz+0x80>)
    1f42:	681a      	ldr	r2, [r3, #0]
    1f44:	2324      	movs	r3, #36	; 0x24
    1f46:	4013      	ands	r3, r2
    1f48:	2b04      	cmp	r3, #4
    1f4a:	d001      	beq.n	1f50 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1f4c:	480f      	ldr	r0, [pc, #60]	; (1f8c <system_clock_source_get_hz+0x8c>)
    1f4e:	e013      	b.n	1f78 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1f50:	2000      	movs	r0, #0
    1f52:	4b0f      	ldr	r3, [pc, #60]	; (1f90 <system_clock_source_get_hz+0x90>)
    1f54:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1f56:	4b0a      	ldr	r3, [pc, #40]	; (1f80 <system_clock_source_get_hz+0x80>)
    1f58:	689b      	ldr	r3, [r3, #8]
    1f5a:	041b      	lsls	r3, r3, #16
    1f5c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1f5e:	4358      	muls	r0, r3
    1f60:	e00a      	b.n	1f78 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1f62:	2350      	movs	r3, #80	; 0x50
    1f64:	4a07      	ldr	r2, [pc, #28]	; (1f84 <system_clock_source_get_hz+0x84>)
    1f66:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1f68:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1f6a:	075b      	lsls	r3, r3, #29
    1f6c:	d504      	bpl.n	1f78 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1f6e:	4b04      	ldr	r3, [pc, #16]	; (1f80 <system_clock_source_get_hz+0x80>)
    1f70:	68d8      	ldr	r0, [r3, #12]
    1f72:	e001      	b.n	1f78 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1f74:	2080      	movs	r0, #128	; 0x80
    1f76:	0200      	lsls	r0, r0, #8
	}
}
    1f78:	bd10      	pop	{r4, pc}
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	0000578c 	.word	0x0000578c
    1f80:	200002a0 	.word	0x200002a0
    1f84:	40000800 	.word	0x40000800
    1f88:	007a1200 	.word	0x007a1200
    1f8c:	02dc6c00 	.word	0x02dc6c00
    1f90:	00002561 	.word	0x00002561

00001f94 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1f94:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1f96:	490c      	ldr	r1, [pc, #48]	; (1fc8 <system_clock_source_osc8m_set_config+0x34>)
    1f98:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1f9a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1f9c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1f9e:	7840      	ldrb	r0, [r0, #1]
    1fa0:	2201      	movs	r2, #1
    1fa2:	4010      	ands	r0, r2
    1fa4:	0180      	lsls	r0, r0, #6
    1fa6:	2640      	movs	r6, #64	; 0x40
    1fa8:	43b3      	bics	r3, r6
    1faa:	4303      	orrs	r3, r0
    1fac:	402a      	ands	r2, r5
    1fae:	01d2      	lsls	r2, r2, #7
    1fb0:	2080      	movs	r0, #128	; 0x80
    1fb2:	4383      	bics	r3, r0
    1fb4:	4313      	orrs	r3, r2
    1fb6:	2203      	movs	r2, #3
    1fb8:	4022      	ands	r2, r4
    1fba:	0212      	lsls	r2, r2, #8
    1fbc:	4803      	ldr	r0, [pc, #12]	; (1fcc <system_clock_source_osc8m_set_config+0x38>)
    1fbe:	4003      	ands	r3, r0
    1fc0:	4313      	orrs	r3, r2
    1fc2:	620b      	str	r3, [r1, #32]
}
    1fc4:	bd70      	pop	{r4, r5, r6, pc}
    1fc6:	46c0      	nop			; (mov r8, r8)
    1fc8:	40000800 	.word	0x40000800
    1fcc:	fffffcff 	.word	0xfffffcff

00001fd0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd2:	46de      	mov	lr, fp
    1fd4:	4657      	mov	r7, sl
    1fd6:	464e      	mov	r6, r9
    1fd8:	4645      	mov	r5, r8
    1fda:	b5e0      	push	{r5, r6, r7, lr}
    1fdc:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1fde:	4b26      	ldr	r3, [pc, #152]	; (2078 <STACK_SIZE+0x78>)
    1fe0:	469b      	mov	fp, r3
    1fe2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1fe4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1fe6:	7800      	ldrb	r0, [r0, #0]
    1fe8:	4242      	negs	r2, r0
    1fea:	4142      	adcs	r2, r0
    1fec:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1fee:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1ff0:	78ca      	ldrb	r2, [r1, #3]
    1ff2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1ff4:	790a      	ldrb	r2, [r1, #4]
    1ff6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1ff8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1ffa:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1ffc:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1ffe:	688a      	ldr	r2, [r1, #8]
    2000:	491e      	ldr	r1, [pc, #120]	; (207c <STACK_SIZE+0x7c>)
    2002:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2004:	2101      	movs	r1, #1
    2006:	464a      	mov	r2, r9
    2008:	0092      	lsls	r2, r2, #2
    200a:	4691      	mov	r9, r2
    200c:	2204      	movs	r2, #4
    200e:	4393      	bics	r3, r2
    2010:	464a      	mov	r2, r9
    2012:	4313      	orrs	r3, r2
    2014:	4642      	mov	r2, r8
    2016:	400a      	ands	r2, r1
    2018:	00d2      	lsls	r2, r2, #3
    201a:	4690      	mov	r8, r2
    201c:	2208      	movs	r2, #8
    201e:	4393      	bics	r3, r2
    2020:	4642      	mov	r2, r8
    2022:	4313      	orrs	r3, r2
    2024:	4662      	mov	r2, ip
    2026:	400a      	ands	r2, r1
    2028:	0112      	lsls	r2, r2, #4
    202a:	4694      	mov	ip, r2
    202c:	2210      	movs	r2, #16
    202e:	4393      	bics	r3, r2
    2030:	4662      	mov	r2, ip
    2032:	4313      	orrs	r3, r2
    2034:	4008      	ands	r0, r1
    2036:	0140      	lsls	r0, r0, #5
    2038:	2220      	movs	r2, #32
    203a:	4393      	bics	r3, r2
    203c:	4303      	orrs	r3, r0
    203e:	400f      	ands	r7, r1
    2040:	01bf      	lsls	r7, r7, #6
    2042:	2040      	movs	r0, #64	; 0x40
    2044:	4383      	bics	r3, r0
    2046:	433b      	orrs	r3, r7
    2048:	400e      	ands	r6, r1
    204a:	01f6      	lsls	r6, r6, #7
    204c:	3040      	adds	r0, #64	; 0x40
    204e:	4383      	bics	r3, r0
    2050:	4333      	orrs	r3, r6
    2052:	3879      	subs	r0, #121	; 0x79
    2054:	4005      	ands	r5, r0
    2056:	022d      	lsls	r5, r5, #8
    2058:	4809      	ldr	r0, [pc, #36]	; (2080 <STACK_SIZE+0x80>)
    205a:	4003      	ands	r3, r0
    205c:	432b      	orrs	r3, r5
    205e:	4021      	ands	r1, r4
    2060:	0309      	lsls	r1, r1, #12
    2062:	4808      	ldr	r0, [pc, #32]	; (2084 <STACK_SIZE+0x84>)
    2064:	4003      	ands	r3, r0
    2066:	430b      	orrs	r3, r1
    2068:	465a      	mov	r2, fp
    206a:	8293      	strh	r3, [r2, #20]
}
    206c:	bc3c      	pop	{r2, r3, r4, r5}
    206e:	4690      	mov	r8, r2
    2070:	4699      	mov	r9, r3
    2072:	46a2      	mov	sl, r4
    2074:	46ab      	mov	fp, r5
    2076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2078:	40000800 	.word	0x40000800
    207c:	200002a0 	.word	0x200002a0
    2080:	fffff8ff 	.word	0xfffff8ff
    2084:	ffffefff 	.word	0xffffefff

00002088 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2088:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    208a:	7a03      	ldrb	r3, [r0, #8]
    208c:	069b      	lsls	r3, r3, #26
    208e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2090:	8942      	ldrh	r2, [r0, #10]
    2092:	0592      	lsls	r2, r2, #22
    2094:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2096:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2098:	4918      	ldr	r1, [pc, #96]	; (20fc <system_clock_source_dfll_set_config+0x74>)
    209a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    209c:	7983      	ldrb	r3, [r0, #6]
    209e:	79c2      	ldrb	r2, [r0, #7]
    20a0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    20a2:	8842      	ldrh	r2, [r0, #2]
    20a4:	8884      	ldrh	r4, [r0, #4]
    20a6:	4322      	orrs	r2, r4
    20a8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    20aa:	7842      	ldrb	r2, [r0, #1]
    20ac:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    20ae:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    20b0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    20b2:	7803      	ldrb	r3, [r0, #0]
    20b4:	2b04      	cmp	r3, #4
    20b6:	d011      	beq.n	20dc <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    20b8:	2b20      	cmp	r3, #32
    20ba:	d10e      	bne.n	20da <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    20bc:	7b03      	ldrb	r3, [r0, #12]
    20be:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    20c0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    20c2:	4313      	orrs	r3, r2
    20c4:	89c2      	ldrh	r2, [r0, #14]
    20c6:	0412      	lsls	r2, r2, #16
    20c8:	490d      	ldr	r1, [pc, #52]	; (2100 <system_clock_source_dfll_set_config+0x78>)
    20ca:	400a      	ands	r2, r1
    20cc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    20ce:	4a0b      	ldr	r2, [pc, #44]	; (20fc <system_clock_source_dfll_set_config+0x74>)
    20d0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    20d2:	6811      	ldr	r1, [r2, #0]
    20d4:	4b0b      	ldr	r3, [pc, #44]	; (2104 <system_clock_source_dfll_set_config+0x7c>)
    20d6:	430b      	orrs	r3, r1
    20d8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    20da:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    20dc:	7b03      	ldrb	r3, [r0, #12]
    20de:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    20e0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    20e2:	4313      	orrs	r3, r2
    20e4:	89c2      	ldrh	r2, [r0, #14]
    20e6:	0412      	lsls	r2, r2, #16
    20e8:	4905      	ldr	r1, [pc, #20]	; (2100 <system_clock_source_dfll_set_config+0x78>)
    20ea:	400a      	ands	r2, r1
    20ec:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    20ee:	4a03      	ldr	r2, [pc, #12]	; (20fc <system_clock_source_dfll_set_config+0x74>)
    20f0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    20f2:	6813      	ldr	r3, [r2, #0]
    20f4:	2104      	movs	r1, #4
    20f6:	430b      	orrs	r3, r1
    20f8:	6013      	str	r3, [r2, #0]
    20fa:	e7ee      	b.n	20da <system_clock_source_dfll_set_config+0x52>
    20fc:	200002a0 	.word	0x200002a0
    2100:	03ff0000 	.word	0x03ff0000
    2104:	00000424 	.word	0x00000424

00002108 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2108:	2808      	cmp	r0, #8
    210a:	d803      	bhi.n	2114 <system_clock_source_enable+0xc>
    210c:	0080      	lsls	r0, r0, #2
    210e:	4b25      	ldr	r3, [pc, #148]	; (21a4 <system_clock_source_enable+0x9c>)
    2110:	581b      	ldr	r3, [r3, r0]
    2112:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2114:	2017      	movs	r0, #23
    2116:	e044      	b.n	21a2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2118:	4a23      	ldr	r2, [pc, #140]	; (21a8 <system_clock_source_enable+0xa0>)
    211a:	6a13      	ldr	r3, [r2, #32]
    211c:	2102      	movs	r1, #2
    211e:	430b      	orrs	r3, r1
    2120:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2122:	2000      	movs	r0, #0
    2124:	e03d      	b.n	21a2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2126:	4a20      	ldr	r2, [pc, #128]	; (21a8 <system_clock_source_enable+0xa0>)
    2128:	6993      	ldr	r3, [r2, #24]
    212a:	2102      	movs	r1, #2
    212c:	430b      	orrs	r3, r1
    212e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2130:	2000      	movs	r0, #0
		break;
    2132:	e036      	b.n	21a2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2134:	4a1c      	ldr	r2, [pc, #112]	; (21a8 <system_clock_source_enable+0xa0>)
    2136:	8a13      	ldrh	r3, [r2, #16]
    2138:	2102      	movs	r1, #2
    213a:	430b      	orrs	r3, r1
    213c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    213e:	2000      	movs	r0, #0
		break;
    2140:	e02f      	b.n	21a2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2142:	4a19      	ldr	r2, [pc, #100]	; (21a8 <system_clock_source_enable+0xa0>)
    2144:	8a93      	ldrh	r3, [r2, #20]
    2146:	2102      	movs	r1, #2
    2148:	430b      	orrs	r3, r1
    214a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    214c:	2000      	movs	r0, #0
		break;
    214e:	e028      	b.n	21a2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2150:	4916      	ldr	r1, [pc, #88]	; (21ac <system_clock_source_enable+0xa4>)
    2152:	680b      	ldr	r3, [r1, #0]
    2154:	2202      	movs	r2, #2
    2156:	4313      	orrs	r3, r2
    2158:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    215a:	4b13      	ldr	r3, [pc, #76]	; (21a8 <system_clock_source_enable+0xa0>)
    215c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    215e:	0019      	movs	r1, r3
    2160:	320e      	adds	r2, #14
    2162:	68cb      	ldr	r3, [r1, #12]
    2164:	421a      	tst	r2, r3
    2166:	d0fc      	beq.n	2162 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2168:	4a10      	ldr	r2, [pc, #64]	; (21ac <system_clock_source_enable+0xa4>)
    216a:	6891      	ldr	r1, [r2, #8]
    216c:	4b0e      	ldr	r3, [pc, #56]	; (21a8 <system_clock_source_enable+0xa0>)
    216e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2170:	6852      	ldr	r2, [r2, #4]
    2172:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2174:	2200      	movs	r2, #0
    2176:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2178:	0019      	movs	r1, r3
    217a:	3210      	adds	r2, #16
    217c:	68cb      	ldr	r3, [r1, #12]
    217e:	421a      	tst	r2, r3
    2180:	d0fc      	beq.n	217c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2182:	4b0a      	ldr	r3, [pc, #40]	; (21ac <system_clock_source_enable+0xa4>)
    2184:	681b      	ldr	r3, [r3, #0]
    2186:	b29b      	uxth	r3, r3
    2188:	4a07      	ldr	r2, [pc, #28]	; (21a8 <system_clock_source_enable+0xa0>)
    218a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    218c:	2000      	movs	r0, #0
    218e:	e008      	b.n	21a2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2190:	4905      	ldr	r1, [pc, #20]	; (21a8 <system_clock_source_enable+0xa0>)
    2192:	2244      	movs	r2, #68	; 0x44
    2194:	5c8b      	ldrb	r3, [r1, r2]
    2196:	2002      	movs	r0, #2
    2198:	4303      	orrs	r3, r0
    219a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    219c:	2000      	movs	r0, #0
		break;
    219e:	e000      	b.n	21a2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    21a0:	2000      	movs	r0, #0
}
    21a2:	4770      	bx	lr
    21a4:	000057b0 	.word	0x000057b0
    21a8:	40000800 	.word	0x40000800
    21ac:	200002a0 	.word	0x200002a0

000021b0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    21b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21b2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    21b4:	22c2      	movs	r2, #194	; 0xc2
    21b6:	00d2      	lsls	r2, r2, #3
    21b8:	4b47      	ldr	r3, [pc, #284]	; (22d8 <system_clock_init+0x128>)
    21ba:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    21bc:	4947      	ldr	r1, [pc, #284]	; (22dc <system_clock_init+0x12c>)
    21be:	684b      	ldr	r3, [r1, #4]
    21c0:	221e      	movs	r2, #30
    21c2:	4393      	bics	r3, r2
    21c4:	3a1c      	subs	r2, #28
    21c6:	4313      	orrs	r3, r2
    21c8:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    21ca:	ab01      	add	r3, sp, #4
    21cc:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    21ce:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    21d0:	4d43      	ldr	r5, [pc, #268]	; (22e0 <system_clock_init+0x130>)
    21d2:	b2e0      	uxtb	r0, r4
    21d4:	a901      	add	r1, sp, #4
    21d6:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    21d8:	3401      	adds	r4, #1
    21da:	2c25      	cmp	r4, #37	; 0x25
    21dc:	d1f9      	bne.n	21d2 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    21de:	a80a      	add	r0, sp, #40	; 0x28
    21e0:	2300      	movs	r3, #0
    21e2:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    21e4:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    21e6:	2280      	movs	r2, #128	; 0x80
    21e8:	0212      	lsls	r2, r2, #8
    21ea:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    21ec:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    21ee:	2201      	movs	r2, #1
    21f0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    21f2:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    21f4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    21f6:	3205      	adds	r2, #5
    21f8:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    21fa:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    21fc:	4b39      	ldr	r3, [pc, #228]	; (22e4 <system_clock_init+0x134>)
    21fe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2200:	2005      	movs	r0, #5
    2202:	4b39      	ldr	r3, [pc, #228]	; (22e8 <system_clock_init+0x138>)
    2204:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2206:	4934      	ldr	r1, [pc, #208]	; (22d8 <system_clock_init+0x128>)
    2208:	2202      	movs	r2, #2
    220a:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    220c:	421a      	tst	r2, r3
    220e:	d0fc      	beq.n	220a <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2210:	4a31      	ldr	r2, [pc, #196]	; (22d8 <system_clock_init+0x128>)
    2212:	8a93      	ldrh	r3, [r2, #20]
    2214:	2180      	movs	r1, #128	; 0x80
    2216:	430b      	orrs	r3, r1
    2218:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    221a:	ab05      	add	r3, sp, #20
    221c:	2100      	movs	r1, #0
    221e:	2200      	movs	r2, #0
    2220:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2222:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2224:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2226:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2228:	313f      	adds	r1, #63	; 0x3f
    222a:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    222c:	393b      	subs	r1, #59	; 0x3b
    222e:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2230:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2232:	4b2e      	ldr	r3, [pc, #184]	; (22ec <system_clock_init+0x13c>)
    2234:	681b      	ldr	r3, [r3, #0]
    2236:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2238:	2b3f      	cmp	r3, #63	; 0x3f
    223a:	d04b      	beq.n	22d4 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    223c:	a805      	add	r0, sp, #20
    223e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2240:	23b7      	movs	r3, #183	; 0xb7
    2242:	00db      	lsls	r3, r3, #3
    2244:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2246:	2307      	movs	r3, #7
    2248:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    224a:	3338      	adds	r3, #56	; 0x38
    224c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    224e:	4b28      	ldr	r3, [pc, #160]	; (22f0 <system_clock_init+0x140>)
    2250:	4798      	blx	r3
	config->run_in_standby  = false;
    2252:	a804      	add	r0, sp, #16
    2254:	2500      	movs	r5, #0
    2256:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2258:	2601      	movs	r6, #1
    225a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    225c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    225e:	4b25      	ldr	r3, [pc, #148]	; (22f4 <system_clock_init+0x144>)
    2260:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2262:	2006      	movs	r0, #6
    2264:	4f20      	ldr	r7, [pc, #128]	; (22e8 <system_clock_init+0x138>)
    2266:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2268:	4b23      	ldr	r3, [pc, #140]	; (22f8 <system_clock_init+0x148>)
    226a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    226c:	ac01      	add	r4, sp, #4
    226e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2270:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2272:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2274:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2276:	2305      	movs	r3, #5
    2278:	7023      	strb	r3, [r4, #0]
    227a:	0021      	movs	r1, r4
    227c:	2001      	movs	r0, #1
    227e:	4b1f      	ldr	r3, [pc, #124]	; (22fc <system_clock_init+0x14c>)
    2280:	4798      	blx	r3
    2282:	2001      	movs	r0, #1
    2284:	4b1e      	ldr	r3, [pc, #120]	; (2300 <system_clock_init+0x150>)
    2286:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2288:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    228a:	0021      	movs	r1, r4
    228c:	2000      	movs	r0, #0
    228e:	4b14      	ldr	r3, [pc, #80]	; (22e0 <system_clock_init+0x130>)
    2290:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2292:	2000      	movs	r0, #0
    2294:	4b1b      	ldr	r3, [pc, #108]	; (2304 <system_clock_init+0x154>)
    2296:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2298:	2007      	movs	r0, #7
    229a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    229c:	490e      	ldr	r1, [pc, #56]	; (22d8 <system_clock_init+0x128>)
    229e:	22d0      	movs	r2, #208	; 0xd0
    22a0:	68cb      	ldr	r3, [r1, #12]
    22a2:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    22a4:	2bd0      	cmp	r3, #208	; 0xd0
    22a6:	d1fb      	bne.n	22a0 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    22a8:	4a17      	ldr	r2, [pc, #92]	; (2308 <system_clock_init+0x158>)
    22aa:	2300      	movs	r3, #0
    22ac:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    22ae:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    22b0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    22b2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    22b4:	a901      	add	r1, sp, #4
    22b6:	2201      	movs	r2, #1
    22b8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    22ba:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    22bc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    22be:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    22c0:	3307      	adds	r3, #7
    22c2:	700b      	strb	r3, [r1, #0]
    22c4:	2000      	movs	r0, #0
    22c6:	4b0d      	ldr	r3, [pc, #52]	; (22fc <system_clock_init+0x14c>)
    22c8:	4798      	blx	r3
    22ca:	2000      	movs	r0, #0
    22cc:	4b0c      	ldr	r3, [pc, #48]	; (2300 <system_clock_init+0x150>)
    22ce:	4798      	blx	r3
#endif
}
    22d0:	b00f      	add	sp, #60	; 0x3c
    22d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    22d4:	3b20      	subs	r3, #32
    22d6:	e7b1      	b.n	223c <system_clock_init+0x8c>
    22d8:	40000800 	.word	0x40000800
    22dc:	41004000 	.word	0x41004000
    22e0:	00002545 	.word	0x00002545
    22e4:	00001fd1 	.word	0x00001fd1
    22e8:	00002109 	.word	0x00002109
    22ec:	00806024 	.word	0x00806024
    22f0:	00002089 	.word	0x00002089
    22f4:	00001f95 	.word	0x00001f95
    22f8:	0000230d 	.word	0x0000230d
    22fc:	00002331 	.word	0x00002331
    2300:	000023e9 	.word	0x000023e9
    2304:	000024b9 	.word	0x000024b9
    2308:	40000400 	.word	0x40000400

0000230c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    230c:	4a06      	ldr	r2, [pc, #24]	; (2328 <system_gclk_init+0x1c>)
    230e:	6993      	ldr	r3, [r2, #24]
    2310:	2108      	movs	r1, #8
    2312:	430b      	orrs	r3, r1
    2314:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2316:	2201      	movs	r2, #1
    2318:	4b04      	ldr	r3, [pc, #16]	; (232c <system_gclk_init+0x20>)
    231a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    231c:	0019      	movs	r1, r3
    231e:	780b      	ldrb	r3, [r1, #0]
    2320:	4213      	tst	r3, r2
    2322:	d1fc      	bne.n	231e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2324:	4770      	bx	lr
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	40000400 	.word	0x40000400
    232c:	40000c00 	.word	0x40000c00

00002330 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2330:	b570      	push	{r4, r5, r6, lr}
    2332:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2334:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2336:	780d      	ldrb	r5, [r1, #0]
    2338:	022d      	lsls	r5, r5, #8
    233a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    233c:	784b      	ldrb	r3, [r1, #1]
    233e:	2b00      	cmp	r3, #0
    2340:	d002      	beq.n	2348 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2342:	2380      	movs	r3, #128	; 0x80
    2344:	02db      	lsls	r3, r3, #11
    2346:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2348:	7a4b      	ldrb	r3, [r1, #9]
    234a:	2b00      	cmp	r3, #0
    234c:	d002      	beq.n	2354 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    234e:	2380      	movs	r3, #128	; 0x80
    2350:	031b      	lsls	r3, r3, #12
    2352:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2354:	6848      	ldr	r0, [r1, #4]
    2356:	2801      	cmp	r0, #1
    2358:	d910      	bls.n	237c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    235a:	1e43      	subs	r3, r0, #1
    235c:	4218      	tst	r0, r3
    235e:	d134      	bne.n	23ca <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2360:	2802      	cmp	r0, #2
    2362:	d930      	bls.n	23c6 <system_gclk_gen_set_config+0x96>
    2364:	2302      	movs	r3, #2
    2366:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2368:	3201      	adds	r2, #1
						mask <<= 1) {
    236a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    236c:	4298      	cmp	r0, r3
    236e:	d8fb      	bhi.n	2368 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2370:	0212      	lsls	r2, r2, #8
    2372:	4332      	orrs	r2, r6
    2374:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2376:	2380      	movs	r3, #128	; 0x80
    2378:	035b      	lsls	r3, r3, #13
    237a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    237c:	7a0b      	ldrb	r3, [r1, #8]
    237e:	2b00      	cmp	r3, #0
    2380:	d002      	beq.n	2388 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2382:	2380      	movs	r3, #128	; 0x80
    2384:	039b      	lsls	r3, r3, #14
    2386:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2388:	4a13      	ldr	r2, [pc, #76]	; (23d8 <system_gclk_gen_set_config+0xa8>)
    238a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    238c:	b25b      	sxtb	r3, r3
    238e:	2b00      	cmp	r3, #0
    2390:	dbfb      	blt.n	238a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2392:	4b12      	ldr	r3, [pc, #72]	; (23dc <system_gclk_gen_set_config+0xac>)
    2394:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2396:	4b12      	ldr	r3, [pc, #72]	; (23e0 <system_gclk_gen_set_config+0xb0>)
    2398:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    239a:	4a0f      	ldr	r2, [pc, #60]	; (23d8 <system_gclk_gen_set_config+0xa8>)
    239c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    239e:	b25b      	sxtb	r3, r3
    23a0:	2b00      	cmp	r3, #0
    23a2:	dbfb      	blt.n	239c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    23a4:	4b0c      	ldr	r3, [pc, #48]	; (23d8 <system_gclk_gen_set_config+0xa8>)
    23a6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23a8:	001a      	movs	r2, r3
    23aa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    23ac:	b25b      	sxtb	r3, r3
    23ae:	2b00      	cmp	r3, #0
    23b0:	dbfb      	blt.n	23aa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    23b2:	4a09      	ldr	r2, [pc, #36]	; (23d8 <system_gclk_gen_set_config+0xa8>)
    23b4:	6853      	ldr	r3, [r2, #4]
    23b6:	2180      	movs	r1, #128	; 0x80
    23b8:	0249      	lsls	r1, r1, #9
    23ba:	400b      	ands	r3, r1
    23bc:	431d      	orrs	r5, r3
    23be:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    23c0:	4b08      	ldr	r3, [pc, #32]	; (23e4 <system_gclk_gen_set_config+0xb4>)
    23c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    23c4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    23c6:	2200      	movs	r2, #0
    23c8:	e7d2      	b.n	2370 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    23ca:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    23cc:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    23ce:	2380      	movs	r3, #128	; 0x80
    23d0:	029b      	lsls	r3, r3, #10
    23d2:	431d      	orrs	r5, r3
    23d4:	e7d2      	b.n	237c <system_gclk_gen_set_config+0x4c>
    23d6:	46c0      	nop			; (mov r8, r8)
    23d8:	40000c00 	.word	0x40000c00
    23dc:	00000ed9 	.word	0x00000ed9
    23e0:	40000c08 	.word	0x40000c08
    23e4:	00000f19 	.word	0x00000f19

000023e8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    23e8:	b510      	push	{r4, lr}
    23ea:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23ec:	4a0b      	ldr	r2, [pc, #44]	; (241c <system_gclk_gen_enable+0x34>)
    23ee:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    23f0:	b25b      	sxtb	r3, r3
    23f2:	2b00      	cmp	r3, #0
    23f4:	dbfb      	blt.n	23ee <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    23f6:	4b0a      	ldr	r3, [pc, #40]	; (2420 <system_gclk_gen_enable+0x38>)
    23f8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    23fa:	4b0a      	ldr	r3, [pc, #40]	; (2424 <system_gclk_gen_enable+0x3c>)
    23fc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    23fe:	4a07      	ldr	r2, [pc, #28]	; (241c <system_gclk_gen_enable+0x34>)
    2400:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2402:	b25b      	sxtb	r3, r3
    2404:	2b00      	cmp	r3, #0
    2406:	dbfb      	blt.n	2400 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2408:	4a04      	ldr	r2, [pc, #16]	; (241c <system_gclk_gen_enable+0x34>)
    240a:	6851      	ldr	r1, [r2, #4]
    240c:	2380      	movs	r3, #128	; 0x80
    240e:	025b      	lsls	r3, r3, #9
    2410:	430b      	orrs	r3, r1
    2412:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2414:	4b04      	ldr	r3, [pc, #16]	; (2428 <system_gclk_gen_enable+0x40>)
    2416:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2418:	bd10      	pop	{r4, pc}
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	40000c00 	.word	0x40000c00
    2420:	00000ed9 	.word	0x00000ed9
    2424:	40000c04 	.word	0x40000c04
    2428:	00000f19 	.word	0x00000f19

0000242c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    242c:	b570      	push	{r4, r5, r6, lr}
    242e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2430:	4a1a      	ldr	r2, [pc, #104]	; (249c <system_gclk_gen_get_hz+0x70>)
    2432:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2434:	b25b      	sxtb	r3, r3
    2436:	2b00      	cmp	r3, #0
    2438:	dbfb      	blt.n	2432 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    243a:	4b19      	ldr	r3, [pc, #100]	; (24a0 <system_gclk_gen_get_hz+0x74>)
    243c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    243e:	4b19      	ldr	r3, [pc, #100]	; (24a4 <system_gclk_gen_get_hz+0x78>)
    2440:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2442:	4a16      	ldr	r2, [pc, #88]	; (249c <system_gclk_gen_get_hz+0x70>)
    2444:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2446:	b25b      	sxtb	r3, r3
    2448:	2b00      	cmp	r3, #0
    244a:	dbfb      	blt.n	2444 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    244c:	4e13      	ldr	r6, [pc, #76]	; (249c <system_gclk_gen_get_hz+0x70>)
    244e:	6870      	ldr	r0, [r6, #4]
    2450:	04c0      	lsls	r0, r0, #19
    2452:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2454:	4b14      	ldr	r3, [pc, #80]	; (24a8 <system_gclk_gen_get_hz+0x7c>)
    2456:	4798      	blx	r3
    2458:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    245a:	4b12      	ldr	r3, [pc, #72]	; (24a4 <system_gclk_gen_get_hz+0x78>)
    245c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    245e:	6876      	ldr	r6, [r6, #4]
    2460:	02f6      	lsls	r6, r6, #11
    2462:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2464:	4b11      	ldr	r3, [pc, #68]	; (24ac <system_gclk_gen_get_hz+0x80>)
    2466:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2468:	4a0c      	ldr	r2, [pc, #48]	; (249c <system_gclk_gen_get_hz+0x70>)
    246a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    246c:	b25b      	sxtb	r3, r3
    246e:	2b00      	cmp	r3, #0
    2470:	dbfb      	blt.n	246a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2472:	4b0a      	ldr	r3, [pc, #40]	; (249c <system_gclk_gen_get_hz+0x70>)
    2474:	689c      	ldr	r4, [r3, #8]
    2476:	0224      	lsls	r4, r4, #8
    2478:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    247a:	4b0d      	ldr	r3, [pc, #52]	; (24b0 <system_gclk_gen_get_hz+0x84>)
    247c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    247e:	2e00      	cmp	r6, #0
    2480:	d107      	bne.n	2492 <system_gclk_gen_get_hz+0x66>
    2482:	2c01      	cmp	r4, #1
    2484:	d907      	bls.n	2496 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2486:	0021      	movs	r1, r4
    2488:	0028      	movs	r0, r5
    248a:	4b0a      	ldr	r3, [pc, #40]	; (24b4 <system_gclk_gen_get_hz+0x88>)
    248c:	4798      	blx	r3
    248e:	0005      	movs	r5, r0
    2490:	e001      	b.n	2496 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2492:	3401      	adds	r4, #1
    2494:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2496:	0028      	movs	r0, r5
    2498:	bd70      	pop	{r4, r5, r6, pc}
    249a:	46c0      	nop			; (mov r8, r8)
    249c:	40000c00 	.word	0x40000c00
    24a0:	00000ed9 	.word	0x00000ed9
    24a4:	40000c04 	.word	0x40000c04
    24a8:	00001f01 	.word	0x00001f01
    24ac:	40000c08 	.word	0x40000c08
    24b0:	00000f19 	.word	0x00000f19
    24b4:	00003b01 	.word	0x00003b01

000024b8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    24b8:	b510      	push	{r4, lr}
    24ba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    24bc:	4b06      	ldr	r3, [pc, #24]	; (24d8 <system_gclk_chan_enable+0x20>)
    24be:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    24c0:	4b06      	ldr	r3, [pc, #24]	; (24dc <system_gclk_chan_enable+0x24>)
    24c2:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    24c4:	4a06      	ldr	r2, [pc, #24]	; (24e0 <system_gclk_chan_enable+0x28>)
    24c6:	8853      	ldrh	r3, [r2, #2]
    24c8:	2180      	movs	r1, #128	; 0x80
    24ca:	01c9      	lsls	r1, r1, #7
    24cc:	430b      	orrs	r3, r1
    24ce:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    24d0:	4b04      	ldr	r3, [pc, #16]	; (24e4 <system_gclk_chan_enable+0x2c>)
    24d2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    24d4:	bd10      	pop	{r4, pc}
    24d6:	46c0      	nop			; (mov r8, r8)
    24d8:	00000ed9 	.word	0x00000ed9
    24dc:	40000c02 	.word	0x40000c02
    24e0:	40000c00 	.word	0x40000c00
    24e4:	00000f19 	.word	0x00000f19

000024e8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    24e8:	b510      	push	{r4, lr}
    24ea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    24ec:	4b0f      	ldr	r3, [pc, #60]	; (252c <system_gclk_chan_disable+0x44>)
    24ee:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    24f0:	4b0f      	ldr	r3, [pc, #60]	; (2530 <system_gclk_chan_disable+0x48>)
    24f2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    24f4:	4a0f      	ldr	r2, [pc, #60]	; (2534 <system_gclk_chan_disable+0x4c>)
    24f6:	8853      	ldrh	r3, [r2, #2]
    24f8:	051b      	lsls	r3, r3, #20
    24fa:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    24fc:	8853      	ldrh	r3, [r2, #2]
    24fe:	490e      	ldr	r1, [pc, #56]	; (2538 <system_gclk_chan_disable+0x50>)
    2500:	400b      	ands	r3, r1
    2502:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2504:	8853      	ldrh	r3, [r2, #2]
    2506:	490d      	ldr	r1, [pc, #52]	; (253c <system_gclk_chan_disable+0x54>)
    2508:	400b      	ands	r3, r1
    250a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    250c:	0011      	movs	r1, r2
    250e:	2280      	movs	r2, #128	; 0x80
    2510:	01d2      	lsls	r2, r2, #7
    2512:	884b      	ldrh	r3, [r1, #2]
    2514:	4213      	tst	r3, r2
    2516:	d1fc      	bne.n	2512 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2518:	4906      	ldr	r1, [pc, #24]	; (2534 <system_gclk_chan_disable+0x4c>)
    251a:	884a      	ldrh	r2, [r1, #2]
    251c:	0203      	lsls	r3, r0, #8
    251e:	4806      	ldr	r0, [pc, #24]	; (2538 <system_gclk_chan_disable+0x50>)
    2520:	4002      	ands	r2, r0
    2522:	4313      	orrs	r3, r2
    2524:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2526:	4b06      	ldr	r3, [pc, #24]	; (2540 <system_gclk_chan_disable+0x58>)
    2528:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    252a:	bd10      	pop	{r4, pc}
    252c:	00000ed9 	.word	0x00000ed9
    2530:	40000c02 	.word	0x40000c02
    2534:	40000c00 	.word	0x40000c00
    2538:	fffff0ff 	.word	0xfffff0ff
    253c:	ffffbfff 	.word	0xffffbfff
    2540:	00000f19 	.word	0x00000f19

00002544 <system_gclk_chan_set_config>:
{
    2544:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2546:	780c      	ldrb	r4, [r1, #0]
    2548:	0224      	lsls	r4, r4, #8
    254a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    254c:	4b02      	ldr	r3, [pc, #8]	; (2558 <system_gclk_chan_set_config+0x14>)
    254e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2550:	b2a4      	uxth	r4, r4
    2552:	4b02      	ldr	r3, [pc, #8]	; (255c <system_gclk_chan_set_config+0x18>)
    2554:	805c      	strh	r4, [r3, #2]
}
    2556:	bd10      	pop	{r4, pc}
    2558:	000024e9 	.word	0x000024e9
    255c:	40000c00 	.word	0x40000c00

00002560 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2560:	b510      	push	{r4, lr}
    2562:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2564:	4b06      	ldr	r3, [pc, #24]	; (2580 <system_gclk_chan_get_hz+0x20>)
    2566:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2568:	4b06      	ldr	r3, [pc, #24]	; (2584 <system_gclk_chan_get_hz+0x24>)
    256a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    256c:	4b06      	ldr	r3, [pc, #24]	; (2588 <system_gclk_chan_get_hz+0x28>)
    256e:	885c      	ldrh	r4, [r3, #2]
    2570:	0524      	lsls	r4, r4, #20
    2572:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2574:	4b05      	ldr	r3, [pc, #20]	; (258c <system_gclk_chan_get_hz+0x2c>)
    2576:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2578:	0020      	movs	r0, r4
    257a:	4b05      	ldr	r3, [pc, #20]	; (2590 <system_gclk_chan_get_hz+0x30>)
    257c:	4798      	blx	r3
}
    257e:	bd10      	pop	{r4, pc}
    2580:	00000ed9 	.word	0x00000ed9
    2584:	40000c02 	.word	0x40000c02
    2588:	40000c00 	.word	0x40000c00
    258c:	00000f19 	.word	0x00000f19
    2590:	0000242d 	.word	0x0000242d

00002594 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2594:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2596:	78d3      	ldrb	r3, [r2, #3]
    2598:	2b00      	cmp	r3, #0
    259a:	d135      	bne.n	2608 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    259c:	7813      	ldrb	r3, [r2, #0]
    259e:	2b80      	cmp	r3, #128	; 0x80
    25a0:	d029      	beq.n	25f6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    25a2:	061b      	lsls	r3, r3, #24
    25a4:	2480      	movs	r4, #128	; 0x80
    25a6:	0264      	lsls	r4, r4, #9
    25a8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    25aa:	7854      	ldrb	r4, [r2, #1]
    25ac:	2502      	movs	r5, #2
    25ae:	43ac      	bics	r4, r5
    25b0:	d106      	bne.n	25c0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    25b2:	7894      	ldrb	r4, [r2, #2]
    25b4:	2c00      	cmp	r4, #0
    25b6:	d120      	bne.n	25fa <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    25b8:	2480      	movs	r4, #128	; 0x80
    25ba:	02a4      	lsls	r4, r4, #10
    25bc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    25be:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    25c0:	7854      	ldrb	r4, [r2, #1]
    25c2:	3c01      	subs	r4, #1
    25c4:	2c01      	cmp	r4, #1
    25c6:	d91c      	bls.n	2602 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    25c8:	040d      	lsls	r5, r1, #16
    25ca:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    25cc:	24a0      	movs	r4, #160	; 0xa0
    25ce:	05e4      	lsls	r4, r4, #23
    25d0:	432c      	orrs	r4, r5
    25d2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    25d4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    25d6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    25d8:	24d0      	movs	r4, #208	; 0xd0
    25da:	0624      	lsls	r4, r4, #24
    25dc:	432c      	orrs	r4, r5
    25de:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    25e0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    25e2:	78d4      	ldrb	r4, [r2, #3]
    25e4:	2c00      	cmp	r4, #0
    25e6:	d122      	bne.n	262e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    25e8:	035b      	lsls	r3, r3, #13
    25ea:	d51c      	bpl.n	2626 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    25ec:	7893      	ldrb	r3, [r2, #2]
    25ee:	2b01      	cmp	r3, #1
    25f0:	d01e      	beq.n	2630 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    25f2:	6141      	str	r1, [r0, #20]
    25f4:	e017      	b.n	2626 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    25f6:	2300      	movs	r3, #0
    25f8:	e7d7      	b.n	25aa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    25fa:	24c0      	movs	r4, #192	; 0xc0
    25fc:	02e4      	lsls	r4, r4, #11
    25fe:	4323      	orrs	r3, r4
    2600:	e7dd      	b.n	25be <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2602:	4c0d      	ldr	r4, [pc, #52]	; (2638 <_system_pinmux_config+0xa4>)
    2604:	4023      	ands	r3, r4
    2606:	e7df      	b.n	25c8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2608:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    260a:	040c      	lsls	r4, r1, #16
    260c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    260e:	23a0      	movs	r3, #160	; 0xa0
    2610:	05db      	lsls	r3, r3, #23
    2612:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2614:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2616:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2618:	23d0      	movs	r3, #208	; 0xd0
    261a:	061b      	lsls	r3, r3, #24
    261c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    261e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2620:	78d3      	ldrb	r3, [r2, #3]
    2622:	2b00      	cmp	r3, #0
    2624:	d103      	bne.n	262e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2626:	7853      	ldrb	r3, [r2, #1]
    2628:	3b01      	subs	r3, #1
    262a:	2b01      	cmp	r3, #1
    262c:	d902      	bls.n	2634 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    262e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2630:	6181      	str	r1, [r0, #24]
    2632:	e7f8      	b.n	2626 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2634:	6081      	str	r1, [r0, #8]
}
    2636:	e7fa      	b.n	262e <_system_pinmux_config+0x9a>
    2638:	fffbffff 	.word	0xfffbffff

0000263c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    263c:	b510      	push	{r4, lr}
    263e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2640:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2642:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2644:	2900      	cmp	r1, #0
    2646:	d104      	bne.n	2652 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2648:	0943      	lsrs	r3, r0, #5
    264a:	01db      	lsls	r3, r3, #7
    264c:	4905      	ldr	r1, [pc, #20]	; (2664 <system_pinmux_pin_set_config+0x28>)
    264e:	468c      	mov	ip, r1
    2650:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2652:	241f      	movs	r4, #31
    2654:	4020      	ands	r0, r4
    2656:	2101      	movs	r1, #1
    2658:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    265a:	0018      	movs	r0, r3
    265c:	4b02      	ldr	r3, [pc, #8]	; (2668 <system_pinmux_pin_set_config+0x2c>)
    265e:	4798      	blx	r3
}
    2660:	bd10      	pop	{r4, pc}
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	41004400 	.word	0x41004400
    2668:	00002595 	.word	0x00002595

0000266c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    266c:	4770      	bx	lr
	...

00002670 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2670:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2672:	4b05      	ldr	r3, [pc, #20]	; (2688 <system_init+0x18>)
    2674:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2676:	4b05      	ldr	r3, [pc, #20]	; (268c <system_init+0x1c>)
    2678:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    267a:	4b05      	ldr	r3, [pc, #20]	; (2690 <system_init+0x20>)
    267c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    267e:	4b05      	ldr	r3, [pc, #20]	; (2694 <system_init+0x24>)
    2680:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    2682:	4b05      	ldr	r3, [pc, #20]	; (2698 <system_init+0x28>)
    2684:	4798      	blx	r3
}
    2686:	bd10      	pop	{r4, pc}
    2688:	000021b1 	.word	0x000021b1
    268c:	00000f49 	.word	0x00000f49
    2690:	0000266d 	.word	0x0000266d
    2694:	0000266d 	.word	0x0000266d
    2698:	0000266d 	.word	0x0000266d

0000269c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    269c:	e7fe      	b.n	269c <Dummy_Handler>
	...

000026a0 <Reset_Handler>:
{
    26a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    26a2:	4a2a      	ldr	r2, [pc, #168]	; (274c <Reset_Handler+0xac>)
    26a4:	4b2a      	ldr	r3, [pc, #168]	; (2750 <Reset_Handler+0xb0>)
    26a6:	429a      	cmp	r2, r3
    26a8:	d011      	beq.n	26ce <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    26aa:	001a      	movs	r2, r3
    26ac:	4b29      	ldr	r3, [pc, #164]	; (2754 <Reset_Handler+0xb4>)
    26ae:	429a      	cmp	r2, r3
    26b0:	d20d      	bcs.n	26ce <Reset_Handler+0x2e>
    26b2:	4a29      	ldr	r2, [pc, #164]	; (2758 <Reset_Handler+0xb8>)
    26b4:	3303      	adds	r3, #3
    26b6:	1a9b      	subs	r3, r3, r2
    26b8:	089b      	lsrs	r3, r3, #2
    26ba:	3301      	adds	r3, #1
    26bc:	009b      	lsls	r3, r3, #2
    26be:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    26c0:	4823      	ldr	r0, [pc, #140]	; (2750 <Reset_Handler+0xb0>)
    26c2:	4922      	ldr	r1, [pc, #136]	; (274c <Reset_Handler+0xac>)
    26c4:	588c      	ldr	r4, [r1, r2]
    26c6:	5084      	str	r4, [r0, r2]
    26c8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    26ca:	429a      	cmp	r2, r3
    26cc:	d1fa      	bne.n	26c4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    26ce:	4a23      	ldr	r2, [pc, #140]	; (275c <Reset_Handler+0xbc>)
    26d0:	4b23      	ldr	r3, [pc, #140]	; (2760 <Reset_Handler+0xc0>)
    26d2:	429a      	cmp	r2, r3
    26d4:	d20a      	bcs.n	26ec <Reset_Handler+0x4c>
    26d6:	43d3      	mvns	r3, r2
    26d8:	4921      	ldr	r1, [pc, #132]	; (2760 <Reset_Handler+0xc0>)
    26da:	185b      	adds	r3, r3, r1
    26dc:	2103      	movs	r1, #3
    26de:	438b      	bics	r3, r1
    26e0:	3304      	adds	r3, #4
    26e2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    26e4:	2100      	movs	r1, #0
    26e6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    26e8:	4293      	cmp	r3, r2
    26ea:	d1fc      	bne.n	26e6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    26ec:	4a1d      	ldr	r2, [pc, #116]	; (2764 <Reset_Handler+0xc4>)
    26ee:	21ff      	movs	r1, #255	; 0xff
    26f0:	4b1d      	ldr	r3, [pc, #116]	; (2768 <Reset_Handler+0xc8>)
    26f2:	438b      	bics	r3, r1
    26f4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    26f6:	39fd      	subs	r1, #253	; 0xfd
    26f8:	2390      	movs	r3, #144	; 0x90
    26fa:	005b      	lsls	r3, r3, #1
    26fc:	4a1b      	ldr	r2, [pc, #108]	; (276c <Reset_Handler+0xcc>)
    26fe:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2700:	4a1b      	ldr	r2, [pc, #108]	; (2770 <Reset_Handler+0xd0>)
    2702:	78d3      	ldrb	r3, [r2, #3]
    2704:	2503      	movs	r5, #3
    2706:	43ab      	bics	r3, r5
    2708:	2402      	movs	r4, #2
    270a:	4323      	orrs	r3, r4
    270c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    270e:	78d3      	ldrb	r3, [r2, #3]
    2710:	270c      	movs	r7, #12
    2712:	43bb      	bics	r3, r7
    2714:	2608      	movs	r6, #8
    2716:	4333      	orrs	r3, r6
    2718:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    271a:	4b16      	ldr	r3, [pc, #88]	; (2774 <Reset_Handler+0xd4>)
    271c:	7b98      	ldrb	r0, [r3, #14]
    271e:	2230      	movs	r2, #48	; 0x30
    2720:	4390      	bics	r0, r2
    2722:	2220      	movs	r2, #32
    2724:	4310      	orrs	r0, r2
    2726:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2728:	7b99      	ldrb	r1, [r3, #14]
    272a:	43b9      	bics	r1, r7
    272c:	4331      	orrs	r1, r6
    272e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2730:	7b9a      	ldrb	r2, [r3, #14]
    2732:	43aa      	bics	r2, r5
    2734:	4322      	orrs	r2, r4
    2736:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2738:	4a0f      	ldr	r2, [pc, #60]	; (2778 <Reset_Handler+0xd8>)
    273a:	6853      	ldr	r3, [r2, #4]
    273c:	2180      	movs	r1, #128	; 0x80
    273e:	430b      	orrs	r3, r1
    2740:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2742:	4b0e      	ldr	r3, [pc, #56]	; (277c <Reset_Handler+0xdc>)
    2744:	4798      	blx	r3
        main();
    2746:	4b0e      	ldr	r3, [pc, #56]	; (2780 <Reset_Handler+0xe0>)
    2748:	4798      	blx	r3
    274a:	e7fe      	b.n	274a <Reset_Handler+0xaa>
    274c:	00007458 	.word	0x00007458
    2750:	20000000 	.word	0x20000000
    2754:	200001dc 	.word	0x200001dc
    2758:	20000004 	.word	0x20000004
    275c:	200001dc 	.word	0x200001dc
    2760:	20000b34 	.word	0x20000b34
    2764:	e000ed00 	.word	0xe000ed00
    2768:	00000000 	.word	0x00000000
    276c:	41007000 	.word	0x41007000
    2770:	41005000 	.word	0x41005000
    2774:	41004800 	.word	0x41004800
    2778:	41004000 	.word	0x41004000
    277c:	00003e41 	.word	0x00003e41
    2780:	00003a4d 	.word	0x00003a4d

00002784 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2784:	b5f0      	push	{r4, r5, r6, r7, lr}
    2786:	46c6      	mov	lr, r8
    2788:	b500      	push	{lr}
    278a:	000c      	movs	r4, r1
    278c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    278e:	2800      	cmp	r0, #0
    2790:	d10f      	bne.n	27b2 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    2792:	2a00      	cmp	r2, #0
    2794:	dd11      	ble.n	27ba <_read+0x36>
    2796:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2798:	4e09      	ldr	r6, [pc, #36]	; (27c0 <_read+0x3c>)
    279a:	4d0a      	ldr	r5, [pc, #40]	; (27c4 <_read+0x40>)
    279c:	6830      	ldr	r0, [r6, #0]
    279e:	0021      	movs	r1, r4
    27a0:	682b      	ldr	r3, [r5, #0]
    27a2:	4798      	blx	r3
		ptr++;
    27a4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    27a6:	42bc      	cmp	r4, r7
    27a8:	d1f8      	bne.n	279c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    27aa:	4640      	mov	r0, r8
    27ac:	bc04      	pop	{r2}
    27ae:	4690      	mov	r8, r2
    27b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    27b2:	2301      	movs	r3, #1
    27b4:	425b      	negs	r3, r3
    27b6:	4698      	mov	r8, r3
    27b8:	e7f7      	b.n	27aa <_read+0x26>
	for (; len > 0; --len) {
    27ba:	4680      	mov	r8, r0
    27bc:	e7f5      	b.n	27aa <_read+0x26>
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	20000348 	.word	0x20000348
    27c4:	20000340 	.word	0x20000340

000027c8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    27c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ca:	46c6      	mov	lr, r8
    27cc:	b500      	push	{lr}
    27ce:	000e      	movs	r6, r1
    27d0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    27d2:	3801      	subs	r0, #1
    27d4:	2802      	cmp	r0, #2
    27d6:	d810      	bhi.n	27fa <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    27d8:	2a00      	cmp	r2, #0
    27da:	d011      	beq.n	2800 <_write+0x38>
    27dc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    27de:	4b0c      	ldr	r3, [pc, #48]	; (2810 <_write+0x48>)
    27e0:	4698      	mov	r8, r3
    27e2:	4f0c      	ldr	r7, [pc, #48]	; (2814 <_write+0x4c>)
    27e4:	4643      	mov	r3, r8
    27e6:	6818      	ldr	r0, [r3, #0]
    27e8:	5d31      	ldrb	r1, [r6, r4]
    27ea:	683b      	ldr	r3, [r7, #0]
    27ec:	4798      	blx	r3
    27ee:	2800      	cmp	r0, #0
    27f0:	db08      	blt.n	2804 <_write+0x3c>
			return -1;
		}
		++nChars;
    27f2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    27f4:	42a5      	cmp	r5, r4
    27f6:	d1f5      	bne.n	27e4 <_write+0x1c>
    27f8:	e006      	b.n	2808 <_write+0x40>
		return -1;
    27fa:	2401      	movs	r4, #1
    27fc:	4264      	negs	r4, r4
    27fe:	e003      	b.n	2808 <_write+0x40>
	for (; len != 0; --len) {
    2800:	0014      	movs	r4, r2
    2802:	e001      	b.n	2808 <_write+0x40>
			return -1;
    2804:	2401      	movs	r4, #1
    2806:	4264      	negs	r4, r4
	}
	return nChars;
}
    2808:	0020      	movs	r0, r4
    280a:	bc04      	pop	{r2}
    280c:	4690      	mov	r8, r2
    280e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2810:	20000348 	.word	0x20000348
    2814:	20000344 	.word	0x20000344

00002818 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2818:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    281a:	4a06      	ldr	r2, [pc, #24]	; (2834 <_sbrk+0x1c>)
    281c:	6812      	ldr	r2, [r2, #0]
    281e:	2a00      	cmp	r2, #0
    2820:	d004      	beq.n	282c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2822:	4a04      	ldr	r2, [pc, #16]	; (2834 <_sbrk+0x1c>)
    2824:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2826:	18c3      	adds	r3, r0, r3
    2828:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    282a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    282c:	4902      	ldr	r1, [pc, #8]	; (2838 <_sbrk+0x20>)
    282e:	4a01      	ldr	r2, [pc, #4]	; (2834 <_sbrk+0x1c>)
    2830:	6011      	str	r1, [r2, #0]
    2832:	e7f6      	b.n	2822 <_sbrk+0xa>
    2834:	200002b8 	.word	0x200002b8
    2838:	20002b38 	.word	0x20002b38

0000283c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    283c:	2001      	movs	r0, #1
    283e:	4240      	negs	r0, r0
    2840:	4770      	bx	lr

00002842 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2842:	2380      	movs	r3, #128	; 0x80
    2844:	019b      	lsls	r3, r3, #6
    2846:	604b      	str	r3, [r1, #4]

	return 0;
}
    2848:	2000      	movs	r0, #0
    284a:	4770      	bx	lr

0000284c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    284c:	2001      	movs	r0, #1
    284e:	4770      	bx	lr

00002850 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2850:	2000      	movs	r0, #0
    2852:	4770      	bx	lr

00002854 <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    2854:	b5f0      	push	{r4, r5, r6, r7, lr}
    2856:	46d6      	mov	lr, sl
    2858:	464f      	mov	r7, r9
    285a:	4646      	mov	r6, r8
    285c:	b5c0      	push	{r6, r7, lr}
    285e:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    2860:	4b2a      	ldr	r3, [pc, #168]	; (290c <drawChar+0xb8>)
    2862:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    2864:	4a2a      	ldr	r2, [pc, #168]	; (2910 <drawChar+0xbc>)
    2866:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    2868:	005a      	lsls	r2, r3, #1
    286a:	18d2      	adds	r2, r2, r3
    286c:	00d2      	lsls	r2, r2, #3
    286e:	4829      	ldr	r0, [pc, #164]	; (2914 <drawChar+0xc0>)
    2870:	1882      	adds	r2, r0, r2
    2872:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    2874:	2180      	movs	r1, #128	; 0x80
    2876:	03c9      	lsls	r1, r1, #15
    2878:	4a27      	ldr	r2, [pc, #156]	; (2918 <drawChar+0xc4>)
    287a:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    287c:	0098      	lsls	r0, r3, #2
    287e:	181b      	adds	r3, r3, r0
    2880:	005b      	lsls	r3, r3, #1
    2882:	b298      	uxth	r0, r3
    2884:	2114      	movs	r1, #20
    2886:	4369      	muls	r1, r5
    2888:	b289      	uxth	r1, r1
    288a:	000b      	movs	r3, r1
    288c:	3313      	adds	r3, #19
    288e:	b29b      	uxth	r3, r3
    2890:	0002      	movs	r2, r0
    2892:	3209      	adds	r2, #9
    2894:	b292      	uxth	r2, r2
    2896:	4d21      	ldr	r5, [pc, #132]	; (291c <drawChar+0xc8>)
    2898:	47a8      	blx	r5
    289a:	4a21      	ldr	r2, [pc, #132]	; (2920 <drawChar+0xcc>)
    289c:	00a5      	lsls	r5, r4, #2
    289e:	192d      	adds	r5, r5, r4
    28a0:	00ab      	lsls	r3, r5, #2
    28a2:	18ed      	adds	r5, r5, r3
    28a4:	1955      	adds	r5, r2, r5
    28a6:	3401      	adds	r4, #1
    28a8:	00a3      	lsls	r3, r4, #2
    28aa:	191c      	adds	r4, r3, r4
    28ac:	00a3      	lsls	r3, r4, #2
    28ae:	18e4      	adds	r4, r4, r3
    28b0:	4692      	mov	sl, r2
    28b2:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    28b4:	4b1b      	ldr	r3, [pc, #108]	; (2924 <drawChar+0xd0>)
    28b6:	4699      	mov	r9, r3
    28b8:	4b1b      	ldr	r3, [pc, #108]	; (2928 <drawChar+0xd4>)
    28ba:	4698      	mov	r8, r3
    28bc:	4f1b      	ldr	r7, [pc, #108]	; (292c <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    28be:	4e1c      	ldr	r6, [pc, #112]	; (2930 <drawChar+0xdc>)
    28c0:	e019      	b.n	28f6 <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    28c2:	464b      	mov	r3, r9
    28c4:	8818      	ldrh	r0, [r3, #0]
    28c6:	0200      	lsls	r0, r0, #8
    28c8:	4643      	mov	r3, r8
    28ca:	881b      	ldrh	r3, [r3, #0]
    28cc:	4318      	orrs	r0, r3
    28ce:	b280      	uxth	r0, r0
    28d0:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    28d2:	3c01      	subs	r4, #1
    28d4:	d30c      	bcc.n	28f0 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    28d6:	782b      	ldrb	r3, [r5, #0]
    28d8:	4123      	asrs	r3, r4
    28da:	07db      	lsls	r3, r3, #31
    28dc:	d5f1      	bpl.n	28c2 <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    28de:	8830      	ldrh	r0, [r6, #0]
    28e0:	0200      	lsls	r0, r0, #8
    28e2:	4b14      	ldr	r3, [pc, #80]	; (2934 <drawChar+0xe0>)
    28e4:	881b      	ldrh	r3, [r3, #0]
    28e6:	4318      	orrs	r0, r3
    28e8:	b280      	uxth	r0, r0
    28ea:	4b10      	ldr	r3, [pc, #64]	; (292c <drawChar+0xd8>)
    28ec:	4798      	blx	r3
    28ee:	e7f0      	b.n	28d2 <drawChar+0x7e>
    28f0:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    28f2:	4555      	cmp	r5, sl
    28f4:	d001      	beq.n	28fa <drawChar+0xa6>
{
    28f6:	2407      	movs	r4, #7
    28f8:	e7ed      	b.n	28d6 <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    28fa:	2280      	movs	r2, #128	; 0x80
    28fc:	03d2      	lsls	r2, r2, #15
    28fe:	4b0e      	ldr	r3, [pc, #56]	; (2938 <drawChar+0xe4>)
    2900:	601a      	str	r2, [r3, #0]
	

}
    2902:	bc1c      	pop	{r2, r3, r4}
    2904:	4690      	mov	r8, r2
    2906:	4699      	mov	r9, r3
    2908:	46a2      	mov	sl, r4
    290a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    290c:	200002bc 	.word	0x200002bc
    2910:	200002be 	.word	0x200002be
    2914:	20000384 	.word	0x20000384
    2918:	41004494 	.word	0x41004494
    291c:	00003279 	.word	0x00003279
    2920:	000057d4 	.word	0x000057d4
    2924:	20000b0a 	.word	0x20000b0a
    2928:	20000b04 	.word	0x20000b04
    292c:	000033b1 	.word	0x000033b1
    2930:	20000b06 	.word	0x20000b06
    2934:	20000b08 	.word	0x20000b08
    2938:	41004498 	.word	0x41004498

0000293c <blinkCursor>:
	*/
	
}

void blinkCursor(void)
{
    293c:	b5f0      	push	{r4, r5, r6, r7, lr}
    293e:	46d6      	mov	lr, sl
    2940:	464f      	mov	r7, r9
    2942:	4646      	mov	r6, r8
    2944:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    2946:	4b47      	ldr	r3, [pc, #284]	; (2a64 <blinkCursor+0x128>)
    2948:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    294a:	4a47      	ldr	r2, [pc, #284]	; (2a68 <blinkCursor+0x12c>)
    294c:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    294e:	005a      	lsls	r2, r3, #1
    2950:	18d2      	adds	r2, r2, r3
    2952:	00d2      	lsls	r2, r2, #3
    2954:	4845      	ldr	r0, [pc, #276]	; (2a6c <blinkCursor+0x130>)
    2956:	1882      	adds	r2, r0, r2
    2958:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    295a:	0098      	lsls	r0, r3, #2
    295c:	181b      	adds	r3, r3, r0
    295e:	005b      	lsls	r3, r3, #1
    2960:	b298      	uxth	r0, r3
    2962:	2114      	movs	r1, #20
    2964:	4369      	muls	r1, r5
    2966:	b289      	uxth	r1, r1
    2968:	000b      	movs	r3, r1
    296a:	3313      	adds	r3, #19
    296c:	b29b      	uxth	r3, r3
    296e:	0002      	movs	r2, r0
    2970:	3209      	adds	r2, #9
    2972:	b292      	uxth	r2, r2
    2974:	4d3e      	ldr	r5, [pc, #248]	; (2a70 <blinkCursor+0x134>)
    2976:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    2978:	2280      	movs	r2, #128	; 0x80
    297a:	03d2      	lsls	r2, r2, #15
    297c:	4b3d      	ldr	r3, [pc, #244]	; (2a74 <blinkCursor+0x138>)
    297e:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    2980:	4b3d      	ldr	r3, [pc, #244]	; (2a78 <blinkCursor+0x13c>)
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	2b00      	cmp	r3, #0
    2986:	d113      	bne.n	29b0 <blinkCursor+0x74>
    2988:	4a3c      	ldr	r2, [pc, #240]	; (2a7c <blinkCursor+0x140>)
    298a:	00a5      	lsls	r5, r4, #2
    298c:	192d      	adds	r5, r5, r4
    298e:	00ab      	lsls	r3, r5, #2
    2990:	18ed      	adds	r5, r5, r3
    2992:	1955      	adds	r5, r2, r5
    2994:	3401      	adds	r4, #1
    2996:	00a3      	lsls	r3, r4, #2
    2998:	191c      	adds	r4, r3, r4
    299a:	00a3      	lsls	r3, r4, #2
    299c:	18e4      	adds	r4, r4, r3
    299e:	4692      	mov	sl, r2
    29a0:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    29a2:	4b37      	ldr	r3, [pc, #220]	; (2a80 <blinkCursor+0x144>)
    29a4:	4699      	mov	r9, r3
    29a6:	4b37      	ldr	r3, [pc, #220]	; (2a84 <blinkCursor+0x148>)
    29a8:	4698      	mov	r8, r3
    29aa:	4f37      	ldr	r7, [pc, #220]	; (2a88 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    29ac:	4e37      	ldr	r6, [pc, #220]	; (2a8c <blinkCursor+0x150>)
    29ae:	e049      	b.n	2a44 <blinkCursor+0x108>
    29b0:	4a32      	ldr	r2, [pc, #200]	; (2a7c <blinkCursor+0x140>)
    29b2:	00a5      	lsls	r5, r4, #2
    29b4:	192d      	adds	r5, r5, r4
    29b6:	00ab      	lsls	r3, r5, #2
    29b8:	18ed      	adds	r5, r5, r3
    29ba:	1955      	adds	r5, r2, r5
    29bc:	3401      	adds	r4, #1
    29be:	00a3      	lsls	r3, r4, #2
    29c0:	191c      	adds	r4, r3, r4
    29c2:	00a3      	lsls	r3, r4, #2
    29c4:	18e4      	adds	r4, r4, r3
    29c6:	4692      	mov	sl, r2
    29c8:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    29ca:	4b30      	ldr	r3, [pc, #192]	; (2a8c <blinkCursor+0x150>)
    29cc:	4699      	mov	r9, r3
    29ce:	4b30      	ldr	r3, [pc, #192]	; (2a90 <blinkCursor+0x154>)
    29d0:	4698      	mov	r8, r3
    29d2:	4f2d      	ldr	r7, [pc, #180]	; (2a88 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    29d4:	4e2a      	ldr	r6, [pc, #168]	; (2a80 <blinkCursor+0x144>)
    29d6:	e019      	b.n	2a0c <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    29d8:	464b      	mov	r3, r9
    29da:	8818      	ldrh	r0, [r3, #0]
    29dc:	0200      	lsls	r0, r0, #8
    29de:	4643      	mov	r3, r8
    29e0:	881b      	ldrh	r3, [r3, #0]
    29e2:	4318      	orrs	r0, r3
    29e4:	b280      	uxth	r0, r0
    29e6:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    29e8:	3c01      	subs	r4, #1
    29ea:	d30c      	bcc.n	2a06 <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    29ec:	782b      	ldrb	r3, [r5, #0]
    29ee:	4123      	asrs	r3, r4
    29f0:	07db      	lsls	r3, r3, #31
    29f2:	d5f1      	bpl.n	29d8 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    29f4:	8830      	ldrh	r0, [r6, #0]
    29f6:	0200      	lsls	r0, r0, #8
    29f8:	4b22      	ldr	r3, [pc, #136]	; (2a84 <blinkCursor+0x148>)
    29fa:	881b      	ldrh	r3, [r3, #0]
    29fc:	4318      	orrs	r0, r3
    29fe:	b280      	uxth	r0, r0
    2a00:	4b21      	ldr	r3, [pc, #132]	; (2a88 <blinkCursor+0x14c>)
    2a02:	4798      	blx	r3
    2a04:	e7f0      	b.n	29e8 <blinkCursor+0xac>
    2a06:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2a08:	4555      	cmp	r5, sl
    2a0a:	d01d      	beq.n	2a48 <blinkCursor+0x10c>
{
    2a0c:	2407      	movs	r4, #7
    2a0e:	e7ed      	b.n	29ec <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2a10:	464b      	mov	r3, r9
    2a12:	8818      	ldrh	r0, [r3, #0]
    2a14:	0200      	lsls	r0, r0, #8
    2a16:	4643      	mov	r3, r8
    2a18:	881b      	ldrh	r3, [r3, #0]
    2a1a:	4318      	orrs	r0, r3
    2a1c:	b280      	uxth	r0, r0
    2a1e:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2a20:	3c01      	subs	r4, #1
    2a22:	d30c      	bcc.n	2a3e <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2a24:	782b      	ldrb	r3, [r5, #0]
    2a26:	4123      	asrs	r3, r4
    2a28:	07db      	lsls	r3, r3, #31
    2a2a:	d5f1      	bpl.n	2a10 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2a2c:	8830      	ldrh	r0, [r6, #0]
    2a2e:	0200      	lsls	r0, r0, #8
    2a30:	4b17      	ldr	r3, [pc, #92]	; (2a90 <blinkCursor+0x154>)
    2a32:	881b      	ldrh	r3, [r3, #0]
    2a34:	4318      	orrs	r0, r3
    2a36:	b280      	uxth	r0, r0
    2a38:	4b13      	ldr	r3, [pc, #76]	; (2a88 <blinkCursor+0x14c>)
    2a3a:	4798      	blx	r3
    2a3c:	e7f0      	b.n	2a20 <blinkCursor+0xe4>
    2a3e:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2a40:	4555      	cmp	r5, sl
    2a42:	d001      	beq.n	2a48 <blinkCursor+0x10c>
{
    2a44:	2407      	movs	r4, #7
    2a46:	e7ed      	b.n	2a24 <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    2a48:	2280      	movs	r2, #128	; 0x80
    2a4a:	03d2      	lsls	r2, r2, #15
    2a4c:	4b11      	ldr	r3, [pc, #68]	; (2a94 <blinkCursor+0x158>)
    2a4e:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    2a50:	4a09      	ldr	r2, [pc, #36]	; (2a78 <blinkCursor+0x13c>)
    2a52:	7813      	ldrb	r3, [r2, #0]
    2a54:	2101      	movs	r1, #1
    2a56:	404b      	eors	r3, r1
    2a58:	7013      	strb	r3, [r2, #0]
	
}
    2a5a:	bc1c      	pop	{r2, r3, r4}
    2a5c:	4690      	mov	r8, r2
    2a5e:	4699      	mov	r9, r3
    2a60:	46a2      	mov	sl, r4
    2a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a64:	200002bc 	.word	0x200002bc
    2a68:	200002be 	.word	0x200002be
    2a6c:	20000384 	.word	0x20000384
    2a70:	00003279 	.word	0x00003279
    2a74:	41004494 	.word	0x41004494
    2a78:	20000024 	.word	0x20000024
    2a7c:	000057d4 	.word	0x000057d4
    2a80:	20000b0a 	.word	0x20000b0a
    2a84:	20000b04 	.word	0x20000b04
    2a88:	000033b1 	.word	0x000033b1
    2a8c:	20000b06 	.word	0x20000b06
    2a90:	20000b08 	.word	0x20000b08
    2a94:	41004498 	.word	0x41004498

00002a98 <newLine>:
{
    2a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a9a:	46de      	mov	lr, fp
    2a9c:	4657      	mov	r7, sl
    2a9e:	464e      	mov	r6, r9
    2aa0:	4645      	mov	r5, r8
    2aa2:	b5e0      	push	{r5, r6, r7, lr}
    2aa4:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    2aa6:	4b24      	ldr	r3, [pc, #144]	; (2b38 <newLine+0xa0>)
    2aa8:	881b      	ldrh	r3, [r3, #0]
    2aaa:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    2aac:	4b23      	ldr	r3, [pc, #140]	; (2b3c <newLine+0xa4>)
    2aae:	881b      	ldrh	r3, [r3, #0]
    2ab0:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    2ab2:	2201      	movs	r2, #1
    2ab4:	4b22      	ldr	r3, [pc, #136]	; (2b40 <newLine+0xa8>)
    2ab6:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    2ab8:	4b22      	ldr	r3, [pc, #136]	; (2b44 <newLine+0xac>)
    2aba:	4798      	blx	r3
    2abc:	4822      	ldr	r0, [pc, #136]	; (2b48 <newLine+0xb0>)
    2abe:	0004      	movs	r4, r0
    2ac0:	3418      	adds	r4, #24
    2ac2:	23f0      	movs	r3, #240	; 0xf0
    2ac4:	00db      	lsls	r3, r3, #3
    2ac6:	18c1      	adds	r1, r0, r3
{
    2ac8:	0003      	movs	r3, r0
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    2aca:	785a      	ldrb	r2, [r3, #1]
    2acc:	701a      	strb	r2, [r3, #0]
    2ace:	3318      	adds	r3, #24
		for(int i = 0 ; i < 80 ; i++)
    2ad0:	428b      	cmp	r3, r1
    2ad2:	d1fa      	bne.n	2aca <newLine+0x32>
    2ad4:	3001      	adds	r0, #1
	for(int j = 1 ; j <= 24 ; j++)
    2ad6:	42a0      	cmp	r0, r4
    2ad8:	d1f3      	bne.n	2ac2 <newLine+0x2a>
    2ada:	4b1c      	ldr	r3, [pc, #112]	; (2b4c <newLine+0xb4>)
    2adc:	22f0      	movs	r2, #240	; 0xf0
    2ade:	00d2      	lsls	r2, r2, #3
    2ae0:	1899      	adds	r1, r3, r2
		consoleDisplay[k][23] = 0x20;
    2ae2:	2220      	movs	r2, #32
    2ae4:	701a      	strb	r2, [r3, #0]
    2ae6:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    2ae8:	428b      	cmp	r3, r1
    2aea:	d1fb      	bne.n	2ae4 <newLine+0x4c>
    2aec:	2600      	movs	r6, #0
    2aee:	4b16      	ldr	r3, [pc, #88]	; (2b48 <newLine+0xb0>)
    2af0:	469a      	mov	sl, r3
			xCharPos = i;
    2af2:	4b11      	ldr	r3, [pc, #68]	; (2b38 <newLine+0xa0>)
    2af4:	4699      	mov	r9, r3
			yCharPos = j;
    2af6:	4b11      	ldr	r3, [pc, #68]	; (2b3c <newLine+0xa4>)
    2af8:	4698      	mov	r8, r3
    2afa:	4653      	mov	r3, sl
    2afc:	18f5      	adds	r5, r6, r3
{
    2afe:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    2b00:	4f13      	ldr	r7, [pc, #76]	; (2b50 <newLine+0xb8>)
			xCharPos = i;
    2b02:	464b      	mov	r3, r9
    2b04:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    2b06:	4643      	mov	r3, r8
    2b08:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    2b0a:	7828      	ldrb	r0, [r5, #0]
    2b0c:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    2b0e:	3401      	adds	r4, #1
    2b10:	3518      	adds	r5, #24
    2b12:	2c50      	cmp	r4, #80	; 0x50
    2b14:	d1f5      	bne.n	2b02 <newLine+0x6a>
	for(int j = 0 ; j < 24 ; j++)
    2b16:	3601      	adds	r6, #1
    2b18:	2e18      	cmp	r6, #24
    2b1a:	d1ee      	bne.n	2afa <newLine+0x62>
	xCharPos = tempCursorx;
    2b1c:	4b06      	ldr	r3, [pc, #24]	; (2b38 <newLine+0xa0>)
    2b1e:	465a      	mov	r2, fp
    2b20:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    2b22:	4b06      	ldr	r3, [pc, #24]	; (2b3c <newLine+0xa4>)
    2b24:	466a      	mov	r2, sp
    2b26:	8892      	ldrh	r2, [r2, #4]
    2b28:	801a      	strh	r2, [r3, #0]
}
    2b2a:	b003      	add	sp, #12
    2b2c:	bc3c      	pop	{r2, r3, r4, r5}
    2b2e:	4690      	mov	r8, r2
    2b30:	4699      	mov	r9, r3
    2b32:	46a2      	mov	sl, r4
    2b34:	46ab      	mov	fp, r5
    2b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b38:	200002bc 	.word	0x200002bc
    2b3c:	200002be 	.word	0x200002be
    2b40:	20000024 	.word	0x20000024
    2b44:	0000293d 	.word	0x0000293d
    2b48:	20000384 	.word	0x20000384
    2b4c:	2000039b 	.word	0x2000039b
    2b50:	00002855 	.word	0x00002855

00002b54 <writeString>:

void writeString(const char str[])
{
    2b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b56:	46c6      	mov	lr, r8
    2b58:	b500      	push	{lr}
    2b5a:	0005      	movs	r5, r0
	int length = strlen(str);
    2b5c:	4b0c      	ldr	r3, [pc, #48]	; (2b90 <writeString+0x3c>)
    2b5e:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2b60:	2800      	cmp	r0, #0
    2b62:	dd11      	ble.n	2b88 <writeString+0x34>
    2b64:	002c      	movs	r4, r5
    2b66:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    2b68:	4f0a      	ldr	r7, [pc, #40]	; (2b94 <writeString+0x40>)
		if(xCharPos <= 80)
    2b6a:	4e0b      	ldr	r6, [pc, #44]	; (2b98 <writeString+0x44>)
		xCharPos++;
    2b6c:	46b0      	mov	r8, r6
    2b6e:	e002      	b.n	2b76 <writeString+0x22>
    2b70:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    2b72:	42ac      	cmp	r4, r5
    2b74:	d008      	beq.n	2b88 <writeString+0x34>
		drawChar(str[i]);
    2b76:	7820      	ldrb	r0, [r4, #0]
    2b78:	47b8      	blx	r7
		if(xCharPos <= 80)
    2b7a:	8833      	ldrh	r3, [r6, #0]
    2b7c:	2b50      	cmp	r3, #80	; 0x50
    2b7e:	d8f7      	bhi.n	2b70 <writeString+0x1c>
		xCharPos++;
    2b80:	3301      	adds	r3, #1
    2b82:	4642      	mov	r2, r8
    2b84:	8013      	strh	r3, [r2, #0]
    2b86:	e7f3      	b.n	2b70 <writeString+0x1c>
	}
}
    2b88:	bc04      	pop	{r2}
    2b8a:	4690      	mov	r8, r2
    2b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b8e:	46c0      	nop			; (mov r8, r8)
    2b90:	000042d1 	.word	0x000042d1
    2b94:	00002855 	.word	0x00002855
    2b98:	200002bc 	.word	0x200002bc

00002b9c <nullifyConsole>:

void nullifyConsole(void)
{
    2b9c:	4b08      	ldr	r3, [pc, #32]	; (2bc0 <nullifyConsole+0x24>)
    2b9e:	22f0      	movs	r2, #240	; 0xf0
    2ba0:	00d2      	lsls	r2, r2, #3
    2ba2:	1898      	adds	r0, r3, r2
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    2ba4:	2100      	movs	r1, #0
    2ba6:	e002      	b.n	2bae <nullifyConsole+0x12>
    2ba8:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    2baa:	4290      	cmp	r0, r2
    2bac:	d006      	beq.n	2bbc <nullifyConsole+0x20>
    2bae:	001a      	movs	r2, r3
    2bb0:	3218      	adds	r2, #24
			consoleDisplay[i][j] = 0x00;
    2bb2:	7019      	strb	r1, [r3, #0]
    2bb4:	3301      	adds	r3, #1
		for(int j = 0 ; j < 24 ; j++)
    2bb6:	4293      	cmp	r3, r2
    2bb8:	d1fb      	bne.n	2bb2 <nullifyConsole+0x16>
    2bba:	e7f5      	b.n	2ba8 <nullifyConsole+0xc>
		}
	}
}
    2bbc:	4770      	bx	lr
    2bbe:	46c0      	nop			; (mov r8, r8)
    2bc0:	20000384 	.word	0x20000384

00002bc4 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    2bc4:	4b09      	ldr	r3, [pc, #36]	; (2bec <scanCodesContains+0x28>)
    2bc6:	681b      	ldr	r3, [r3, #0]
    2bc8:	4298      	cmp	r0, r3
    2bca:	d00b      	beq.n	2be4 <scanCodesContains+0x20>
    2bcc:	4a07      	ldr	r2, [pc, #28]	; (2bec <scanCodesContains+0x28>)
    2bce:	1d13      	adds	r3, r2, #4
    2bd0:	3219      	adds	r2, #25
    2bd2:	32ff      	adds	r2, #255	; 0xff
    2bd4:	6819      	ldr	r1, [r3, #0]
    2bd6:	4281      	cmp	r1, r0
    2bd8:	d006      	beq.n	2be8 <scanCodesContains+0x24>
    2bda:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2bdc:	4293      	cmp	r3, r2
    2bde:	d1f9      	bne.n	2bd4 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2be0:	2000      	movs	r0, #0
    2be2:	e002      	b.n	2bea <scanCodesContains+0x26>
			return true;
    2be4:	2001      	movs	r0, #1
    2be6:	e000      	b.n	2bea <scanCodesContains+0x26>
    2be8:	2001      	movs	r0, #1
}
    2bea:	4770      	bx	lr
    2bec:	20000050 	.word	0x20000050

00002bf0 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    2bf0:	4b09      	ldr	r3, [pc, #36]	; (2c18 <keyDown+0x28>)
    2bf2:	781b      	ldrb	r3, [r3, #0]
    2bf4:	4298      	cmp	r0, r3
    2bf6:	d00a      	beq.n	2c0e <keyDown+0x1e>
    2bf8:	4907      	ldr	r1, [pc, #28]	; (2c18 <keyDown+0x28>)
    2bfa:	1c4b      	adds	r3, r1, #1
    2bfc:	3114      	adds	r1, #20
    2bfe:	781a      	ldrb	r2, [r3, #0]
    2c00:	4282      	cmp	r2, r0
    2c02:	d006      	beq.n	2c12 <keyDown+0x22>
    2c04:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    2c06:	428b      	cmp	r3, r1
    2c08:	d1f9      	bne.n	2bfe <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    2c0a:	2000      	movs	r0, #0
}
    2c0c:	4770      	bx	lr
			return true;
    2c0e:	2001      	movs	r0, #1
    2c10:	e7fc      	b.n	2c0c <keyDown+0x1c>
    2c12:	2001      	movs	r0, #1
    2c14:	e7fa      	b.n	2c0c <keyDown+0x1c>
    2c16:	46c0      	nop			; (mov r8, r8)
    2c18:	20000028 	.word	0x20000028

00002c1c <printKeyboardBuffer>:
{
    2c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c1e:	46d6      	mov	lr, sl
    2c20:	464f      	mov	r7, r9
    2c22:	4646      	mov	r6, r8
    2c24:	b5c0      	push	{r6, r7, lr}
    2c26:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    2c28:	4dca      	ldr	r5, [pc, #808]	; (2f54 <printKeyboardBuffer+0x338>)
    2c2a:	2246      	movs	r2, #70	; 0x46
    2c2c:	0029      	movs	r1, r5
    2c2e:	a83a      	add	r0, sp, #232	; 0xe8
    2c30:	4cc9      	ldr	r4, [pc, #804]	; (2f58 <printKeyboardBuffer+0x33c>)
    2c32:	47a0      	blx	r4
	unsigned char shiftCase[] =
    2c34:	0029      	movs	r1, r5
    2c36:	3148      	adds	r1, #72	; 0x48
    2c38:	2246      	movs	r2, #70	; 0x46
    2c3a:	a828      	add	r0, sp, #160	; 0xa0
    2c3c:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    2c3e:	4dc7      	ldr	r5, [pc, #796]	; (2f5c <printKeyboardBuffer+0x340>)
    2c40:	0029      	movs	r1, r5
    2c42:	3110      	adds	r1, #16
    2c44:	2246      	movs	r2, #70	; 0x46
    2c46:	a816      	add	r0, sp, #88	; 0x58
    2c48:	47a0      	blx	r4
	unsigned char controlCase[] =
    2c4a:	0029      	movs	r1, r5
    2c4c:	3158      	adds	r1, #88	; 0x58
    2c4e:	2246      	movs	r2, #70	; 0x46
    2c50:	a804      	add	r0, sp, #16
    2c52:	47a0      	blx	r4
    2c54:	4fc2      	ldr	r7, [pc, #776]	; (2f60 <printKeyboardBuffer+0x344>)
    2c56:	003c      	movs	r4, r7
    2c58:	3414      	adds	r4, #20
    2c5a:	003d      	movs	r5, r7
	bool controled = false;
    2c5c:	2300      	movs	r3, #0
    2c5e:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    2c60:	9302      	str	r3, [sp, #8]
			controled = true;
    2c62:	2201      	movs	r2, #1
    2c64:	e004      	b.n	2c70 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    2c66:	2916      	cmp	r1, #22
    2c68:	d011      	beq.n	2c8e <printKeyboardBuffer+0x72>
    2c6a:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    2c6c:	42a5      	cmp	r5, r4
    2c6e:	d010      	beq.n	2c92 <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    2c70:	7829      	ldrb	r1, [r5, #0]
    2c72:	000b      	movs	r3, r1
    2c74:	3b0d      	subs	r3, #13
    2c76:	425e      	negs	r6, r3
    2c78:	415e      	adcs	r6, r3
    2c7a:	46b4      	mov	ip, r6
    2c7c:	0008      	movs	r0, r1
    2c7e:	3831      	subs	r0, #49	; 0x31
    2c80:	4243      	negs	r3, r0
    2c82:	4143      	adcs	r3, r0
    2c84:	4660      	mov	r0, ip
    2c86:	4318      	orrs	r0, r3
    2c88:	d0ed      	beq.n	2c66 <printKeyboardBuffer+0x4a>
			shifted = true;
    2c8a:	9002      	str	r0, [sp, #8]
    2c8c:	e7eb      	b.n	2c66 <printKeyboardBuffer+0x4a>
			controled = true;
    2c8e:	9203      	str	r2, [sp, #12]
    2c90:	e7eb      	b.n	2c6a <printKeyboardBuffer+0x4e>
    2c92:	4eb4      	ldr	r6, [pc, #720]	; (2f64 <printKeyboardBuffer+0x348>)
	for(int i=0; i<20; i++)
    2c94:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    2c96:	4bb4      	ldr	r3, [pc, #720]	; (2f68 <printKeyboardBuffer+0x34c>)
    2c98:	469a      	mov	sl, r3
    2c9a:	e00b      	b.n	2cb4 <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    2c9c:	301b      	adds	r0, #27
    2c9e:	4bb3      	ldr	r3, [pc, #716]	; (2f6c <printKeyboardBuffer+0x350>)
    2ca0:	4798      	blx	r3
				if(localEcho)
    2ca2:	4bb3      	ldr	r3, [pc, #716]	; (2f70 <printKeyboardBuffer+0x354>)
    2ca4:	781b      	ldrb	r3, [r3, #0]
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d14a      	bne.n	2d40 <printKeyboardBuffer+0x124>
    2caa:	3401      	adds	r4, #1
    2cac:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    2cae:	42ac      	cmp	r4, r5
    2cb0:	d100      	bne.n	2cb4 <printKeyboardBuffer+0x98>
    2cb2:	e144      	b.n	2f3e <printKeyboardBuffer+0x322>
    2cb4:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    2cb6:	7823      	ldrb	r3, [r4, #0]
    2cb8:	4698      	mov	r8, r3
    2cba:	0018      	movs	r0, r3
    2cbc:	47d0      	blx	sl
    2cbe:	2800      	cmp	r0, #0
    2cc0:	d1f3      	bne.n	2caa <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    2cc2:	4643      	mov	r3, r8
    2cc4:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    2cc6:	4643      	mov	r3, r8
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d0e7      	beq.n	2c9c <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    2ccc:	4643      	mov	r3, r8
    2cce:	2b01      	cmp	r3, #1
    2cd0:	d0eb      	beq.n	2caa <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    2cd2:	2b43      	cmp	r3, #67	; 0x43
    2cd4:	d03a      	beq.n	2d4c <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    2cd6:	4643      	mov	r3, r8
    2cd8:	2b3a      	cmp	r3, #58	; 0x3a
    2cda:	d03f      	beq.n	2d5c <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    2cdc:	4643      	mov	r3, r8
    2cde:	2b0c      	cmp	r3, #12
    2ce0:	d078      	beq.n	2dd4 <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    2ce2:	4643      	mov	r3, r8
    2ce4:	2b03      	cmp	r3, #3
    2ce6:	d07b      	beq.n	2de0 <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    2ce8:	4643      	mov	r3, r8
    2cea:	2b23      	cmp	r3, #35	; 0x23
    2cec:	d07e      	beq.n	2dec <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    2cee:	4643      	mov	r3, r8
    2cf0:	2b2d      	cmp	r3, #45	; 0x2d
    2cf2:	d100      	bne.n	2cf6 <printKeyboardBuffer+0xda>
    2cf4:	e097      	b.n	2e26 <printKeyboardBuffer+0x20a>
			else if(scanCodeBuffer[i]  == 55)	//up
    2cf6:	4643      	mov	r3, r8
    2cf8:	2b37      	cmp	r3, #55	; 0x37
    2cfa:	d100      	bne.n	2cfe <printKeyboardBuffer+0xe2>
    2cfc:	e0b0      	b.n	2e60 <printKeyboardBuffer+0x244>
			else if(scanCodeBuffer[i]  == 65)	//right
    2cfe:	4643      	mov	r3, r8
    2d00:	2b41      	cmp	r3, #65	; 0x41
    2d02:	d100      	bne.n	2d06 <printKeyboardBuffer+0xea>
    2d04:	e0c9      	b.n	2e9a <printKeyboardBuffer+0x27e>
				if(controled)
    2d06:	9b03      	ldr	r3, [sp, #12]
    2d08:	2b00      	cmp	r3, #0
    2d0a:	d000      	beq.n	2d0e <printKeyboardBuffer+0xf2>
    2d0c:	e0e2      	b.n	2ed4 <printKeyboardBuffer+0x2b8>
				else if(capsLock)
    2d0e:	4b99      	ldr	r3, [pc, #612]	; (2f74 <printKeyboardBuffer+0x358>)
    2d10:	781b      	ldrb	r3, [r3, #0]
    2d12:	2b00      	cmp	r3, #0
    2d14:	d000      	beq.n	2d18 <printKeyboardBuffer+0xfc>
    2d16:	e0f0      	b.n	2efa <printKeyboardBuffer+0x2de>
				else if(shifted)
    2d18:	9b02      	ldr	r3, [sp, #8]
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d100      	bne.n	2d20 <printKeyboardBuffer+0x104>
    2d1e:	e0fd      	b.n	2f1c <printKeyboardBuffer+0x300>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    2d20:	ab28      	add	r3, sp, #160	; 0xa0
    2d22:	4642      	mov	r2, r8
    2d24:	5c98      	ldrb	r0, [r3, r2]
    2d26:	4b91      	ldr	r3, [pc, #580]	; (2f6c <printKeyboardBuffer+0x350>)
    2d28:	4798      	blx	r3
					if(localEcho)
    2d2a:	4b91      	ldr	r3, [pc, #580]	; (2f70 <printKeyboardBuffer+0x354>)
    2d2c:	781b      	ldrb	r3, [r3, #0]
    2d2e:	2b00      	cmp	r3, #0
    2d30:	d0bb      	beq.n	2caa <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    2d32:	9b01      	ldr	r3, [sp, #4]
    2d34:	781b      	ldrb	r3, [r3, #0]
    2d36:	aa28      	add	r2, sp, #160	; 0xa0
    2d38:	5cd0      	ldrb	r0, [r2, r3]
    2d3a:	4b8f      	ldr	r3, [pc, #572]	; (2f78 <printKeyboardBuffer+0x35c>)
    2d3c:	4798      	blx	r3
    2d3e:	e7b4      	b.n	2caa <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    2d40:	4b8e      	ldr	r3, [pc, #568]	; (2f7c <printKeyboardBuffer+0x360>)
    2d42:	6818      	ldr	r0, [r3, #0]
    2d44:	211b      	movs	r1, #27
    2d46:	4b8e      	ldr	r3, [pc, #568]	; (2f80 <printKeyboardBuffer+0x364>)
    2d48:	4798      	blx	r3
    2d4a:	e7ae      	b.n	2caa <printKeyboardBuffer+0x8e>
				if(breakEnable)
    2d4c:	4b8d      	ldr	r3, [pc, #564]	; (2f84 <printKeyboardBuffer+0x368>)
    2d4e:	781b      	ldrb	r3, [r3, #0]
    2d50:	2b00      	cmp	r3, #0
    2d52:	d0aa      	beq.n	2caa <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    2d54:	2000      	movs	r0, #0
    2d56:	4b85      	ldr	r3, [pc, #532]	; (2f6c <printKeyboardBuffer+0x350>)
    2d58:	4798      	blx	r3
    2d5a:	e7a6      	b.n	2caa <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    2d5c:	4b8a      	ldr	r3, [pc, #552]	; (2f88 <printKeyboardBuffer+0x36c>)
    2d5e:	681b      	ldr	r3, [r3, #0]
    2d60:	2b01      	cmp	r3, #1
    2d62:	d014      	beq.n	2d8e <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    2d64:	4b88      	ldr	r3, [pc, #544]	; (2f88 <printKeyboardBuffer+0x36c>)
    2d66:	681b      	ldr	r3, [r3, #0]
    2d68:	2b02      	cmp	r3, #2
    2d6a:	d026      	beq.n	2dba <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    2d6c:	4b86      	ldr	r3, [pc, #536]	; (2f88 <printKeyboardBuffer+0x36c>)
    2d6e:	681b      	ldr	r3, [r3, #0]
    2d70:	2b03      	cmp	r3, #3
    2d72:	d19a      	bne.n	2caa <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    2d74:	200d      	movs	r0, #13
    2d76:	4b7d      	ldr	r3, [pc, #500]	; (2f6c <printKeyboardBuffer+0x350>)
    2d78:	4798      	blx	r3
					if(localEcho)
    2d7a:	4b7d      	ldr	r3, [pc, #500]	; (2f70 <printKeyboardBuffer+0x354>)
    2d7c:	781b      	ldrb	r3, [r3, #0]
    2d7e:	2b00      	cmp	r3, #0
    2d80:	d093      	beq.n	2caa <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    2d82:	4b7e      	ldr	r3, [pc, #504]	; (2f7c <printKeyboardBuffer+0x360>)
    2d84:	6818      	ldr	r0, [r3, #0]
    2d86:	210d      	movs	r1, #13
    2d88:	4b7d      	ldr	r3, [pc, #500]	; (2f80 <printKeyboardBuffer+0x364>)
    2d8a:	4798      	blx	r3
    2d8c:	e78d      	b.n	2caa <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    2d8e:	200d      	movs	r0, #13
    2d90:	4b76      	ldr	r3, [pc, #472]	; (2f6c <printKeyboardBuffer+0x350>)
    2d92:	4698      	mov	r8, r3
    2d94:	4798      	blx	r3
					sendChar(0x0A);
    2d96:	200a      	movs	r0, #10
    2d98:	47c0      	blx	r8
					if(localEcho)
    2d9a:	4b75      	ldr	r3, [pc, #468]	; (2f70 <printKeyboardBuffer+0x354>)
    2d9c:	781b      	ldrb	r3, [r3, #0]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d0e0      	beq.n	2d64 <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    2da2:	4b76      	ldr	r3, [pc, #472]	; (2f7c <printKeyboardBuffer+0x360>)
    2da4:	4699      	mov	r9, r3
    2da6:	210d      	movs	r1, #13
    2da8:	6818      	ldr	r0, [r3, #0]
    2daa:	4b75      	ldr	r3, [pc, #468]	; (2f80 <printKeyboardBuffer+0x364>)
    2dac:	4698      	mov	r8, r3
    2dae:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    2db0:	464b      	mov	r3, r9
    2db2:	6818      	ldr	r0, [r3, #0]
    2db4:	210a      	movs	r1, #10
    2db6:	47c0      	blx	r8
    2db8:	e7d4      	b.n	2d64 <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    2dba:	200a      	movs	r0, #10
    2dbc:	4b6b      	ldr	r3, [pc, #428]	; (2f6c <printKeyboardBuffer+0x350>)
    2dbe:	4798      	blx	r3
					if(localEcho)
    2dc0:	4b6b      	ldr	r3, [pc, #428]	; (2f70 <printKeyboardBuffer+0x354>)
    2dc2:	781b      	ldrb	r3, [r3, #0]
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	d0d1      	beq.n	2d6c <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    2dc8:	4b6c      	ldr	r3, [pc, #432]	; (2f7c <printKeyboardBuffer+0x360>)
    2dca:	6818      	ldr	r0, [r3, #0]
    2dcc:	210a      	movs	r1, #10
    2dce:	4b6c      	ldr	r3, [pc, #432]	; (2f80 <printKeyboardBuffer+0x364>)
    2dd0:	4798      	blx	r3
    2dd2:	e7cb      	b.n	2d6c <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    2dd4:	4a67      	ldr	r2, [pc, #412]	; (2f74 <printKeyboardBuffer+0x358>)
    2dd6:	7813      	ldrb	r3, [r2, #0]
    2dd8:	2101      	movs	r1, #1
    2dda:	404b      	eors	r3, r1
    2ddc:	7013      	strb	r3, [r2, #0]
    2dde:	e764      	b.n	2caa <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    2de0:	4a6a      	ldr	r2, [pc, #424]	; (2f8c <printKeyboardBuffer+0x370>)
    2de2:	7813      	ldrb	r3, [r2, #0]
    2de4:	2101      	movs	r1, #1
    2de6:	404b      	eors	r3, r1
    2de8:	7013      	strb	r3, [r2, #0]
    2dea:	e75e      	b.n	2caa <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2dec:	201b      	movs	r0, #27
    2dee:	4b5f      	ldr	r3, [pc, #380]	; (2f6c <printKeyboardBuffer+0x350>)
    2df0:	4698      	mov	r8, r3
    2df2:	4798      	blx	r3
				sendChar(0x5B);
    2df4:	205b      	movs	r0, #91	; 0x5b
    2df6:	47c0      	blx	r8
				sendChar(0x44);
    2df8:	2044      	movs	r0, #68	; 0x44
    2dfa:	47c0      	blx	r8
				if(localEcho)
    2dfc:	4b5c      	ldr	r3, [pc, #368]	; (2f70 <printKeyboardBuffer+0x354>)
    2dfe:	781b      	ldrb	r3, [r3, #0]
    2e00:	2b00      	cmp	r3, #0
    2e02:	d100      	bne.n	2e06 <printKeyboardBuffer+0x1ea>
    2e04:	e751      	b.n	2caa <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    2e06:	4b5d      	ldr	r3, [pc, #372]	; (2f7c <printKeyboardBuffer+0x360>)
    2e08:	4699      	mov	r9, r3
    2e0a:	211b      	movs	r1, #27
    2e0c:	6818      	ldr	r0, [r3, #0]
    2e0e:	4b5c      	ldr	r3, [pc, #368]	; (2f80 <printKeyboardBuffer+0x364>)
    2e10:	4698      	mov	r8, r3
    2e12:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    2e14:	215b      	movs	r1, #91	; 0x5b
    2e16:	464b      	mov	r3, r9
    2e18:	6818      	ldr	r0, [r3, #0]
    2e1a:	47c0      	blx	r8
					ring_put(ouroboros, 0x44);
    2e1c:	464b      	mov	r3, r9
    2e1e:	6818      	ldr	r0, [r3, #0]
    2e20:	2144      	movs	r1, #68	; 0x44
    2e22:	47c0      	blx	r8
    2e24:	e741      	b.n	2caa <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2e26:	201b      	movs	r0, #27
    2e28:	4b50      	ldr	r3, [pc, #320]	; (2f6c <printKeyboardBuffer+0x350>)
    2e2a:	4698      	mov	r8, r3
    2e2c:	4798      	blx	r3
				sendChar(0x5B);
    2e2e:	205b      	movs	r0, #91	; 0x5b
    2e30:	47c0      	blx	r8
				sendChar(0x42);
    2e32:	2042      	movs	r0, #66	; 0x42
    2e34:	47c0      	blx	r8
				if(localEcho)
    2e36:	4b4e      	ldr	r3, [pc, #312]	; (2f70 <printKeyboardBuffer+0x354>)
    2e38:	781b      	ldrb	r3, [r3, #0]
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d100      	bne.n	2e40 <printKeyboardBuffer+0x224>
    2e3e:	e734      	b.n	2caa <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    2e40:	4b4e      	ldr	r3, [pc, #312]	; (2f7c <printKeyboardBuffer+0x360>)
    2e42:	4699      	mov	r9, r3
    2e44:	211b      	movs	r1, #27
    2e46:	6818      	ldr	r0, [r3, #0]
    2e48:	4b4d      	ldr	r3, [pc, #308]	; (2f80 <printKeyboardBuffer+0x364>)
    2e4a:	4698      	mov	r8, r3
    2e4c:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    2e4e:	215b      	movs	r1, #91	; 0x5b
    2e50:	464b      	mov	r3, r9
    2e52:	6818      	ldr	r0, [r3, #0]
    2e54:	47c0      	blx	r8
					ring_put(ouroboros, 0x42);
    2e56:	464b      	mov	r3, r9
    2e58:	6818      	ldr	r0, [r3, #0]
    2e5a:	2142      	movs	r1, #66	; 0x42
    2e5c:	47c0      	blx	r8
    2e5e:	e724      	b.n	2caa <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2e60:	201b      	movs	r0, #27
    2e62:	4b42      	ldr	r3, [pc, #264]	; (2f6c <printKeyboardBuffer+0x350>)
    2e64:	4698      	mov	r8, r3
    2e66:	4798      	blx	r3
				sendChar(0x5B);
    2e68:	205b      	movs	r0, #91	; 0x5b
    2e6a:	47c0      	blx	r8
				sendChar(0x41);
    2e6c:	2041      	movs	r0, #65	; 0x41
    2e6e:	47c0      	blx	r8
				if(localEcho)
    2e70:	4b3f      	ldr	r3, [pc, #252]	; (2f70 <printKeyboardBuffer+0x354>)
    2e72:	781b      	ldrb	r3, [r3, #0]
    2e74:	2b00      	cmp	r3, #0
    2e76:	d100      	bne.n	2e7a <printKeyboardBuffer+0x25e>
    2e78:	e717      	b.n	2caa <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    2e7a:	4b40      	ldr	r3, [pc, #256]	; (2f7c <printKeyboardBuffer+0x360>)
    2e7c:	4699      	mov	r9, r3
    2e7e:	211b      	movs	r1, #27
    2e80:	6818      	ldr	r0, [r3, #0]
    2e82:	4b3f      	ldr	r3, [pc, #252]	; (2f80 <printKeyboardBuffer+0x364>)
    2e84:	4698      	mov	r8, r3
    2e86:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    2e88:	215b      	movs	r1, #91	; 0x5b
    2e8a:	464b      	mov	r3, r9
    2e8c:	6818      	ldr	r0, [r3, #0]
    2e8e:	47c0      	blx	r8
					ring_put(ouroboros, 0x41);
    2e90:	464b      	mov	r3, r9
    2e92:	6818      	ldr	r0, [r3, #0]
    2e94:	2141      	movs	r1, #65	; 0x41
    2e96:	47c0      	blx	r8
    2e98:	e707      	b.n	2caa <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2e9a:	201b      	movs	r0, #27
    2e9c:	4b33      	ldr	r3, [pc, #204]	; (2f6c <printKeyboardBuffer+0x350>)
    2e9e:	4698      	mov	r8, r3
    2ea0:	4798      	blx	r3
				sendChar(0x5B);
    2ea2:	205b      	movs	r0, #91	; 0x5b
    2ea4:	47c0      	blx	r8
				sendChar(0x43);
    2ea6:	2043      	movs	r0, #67	; 0x43
    2ea8:	47c0      	blx	r8
				if(localEcho)
    2eaa:	4b31      	ldr	r3, [pc, #196]	; (2f70 <printKeyboardBuffer+0x354>)
    2eac:	781b      	ldrb	r3, [r3, #0]
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d100      	bne.n	2eb4 <printKeyboardBuffer+0x298>
    2eb2:	e6fa      	b.n	2caa <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    2eb4:	4b31      	ldr	r3, [pc, #196]	; (2f7c <printKeyboardBuffer+0x360>)
    2eb6:	4699      	mov	r9, r3
    2eb8:	211b      	movs	r1, #27
    2eba:	6818      	ldr	r0, [r3, #0]
    2ebc:	4b30      	ldr	r3, [pc, #192]	; (2f80 <printKeyboardBuffer+0x364>)
    2ebe:	4698      	mov	r8, r3
    2ec0:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    2ec2:	215b      	movs	r1, #91	; 0x5b
    2ec4:	464b      	mov	r3, r9
    2ec6:	6818      	ldr	r0, [r3, #0]
    2ec8:	47c0      	blx	r8
					ring_put(ouroboros, 0x43);
    2eca:	464b      	mov	r3, r9
    2ecc:	6818      	ldr	r0, [r3, #0]
    2ece:	2143      	movs	r1, #67	; 0x43
    2ed0:	47c0      	blx	r8
    2ed2:	e6ea      	b.n	2caa <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    2ed4:	ab04      	add	r3, sp, #16
    2ed6:	4642      	mov	r2, r8
    2ed8:	5c98      	ldrb	r0, [r3, r2]
    2eda:	4b24      	ldr	r3, [pc, #144]	; (2f6c <printKeyboardBuffer+0x350>)
    2edc:	4798      	blx	r3
					if(localEcho)
    2ede:	4b24      	ldr	r3, [pc, #144]	; (2f70 <printKeyboardBuffer+0x354>)
    2ee0:	781b      	ldrb	r3, [r3, #0]
    2ee2:	2b00      	cmp	r3, #0
    2ee4:	d100      	bne.n	2ee8 <printKeyboardBuffer+0x2cc>
    2ee6:	e6e0      	b.n	2caa <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    2ee8:	9b01      	ldr	r3, [sp, #4]
    2eea:	781b      	ldrb	r3, [r3, #0]
    2eec:	aa04      	add	r2, sp, #16
    2eee:	5cd1      	ldrb	r1, [r2, r3]
    2ef0:	4b22      	ldr	r3, [pc, #136]	; (2f7c <printKeyboardBuffer+0x360>)
    2ef2:	6818      	ldr	r0, [r3, #0]
    2ef4:	4b22      	ldr	r3, [pc, #136]	; (2f80 <printKeyboardBuffer+0x364>)
    2ef6:	4798      	blx	r3
    2ef8:	e6d7      	b.n	2caa <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    2efa:	ab16      	add	r3, sp, #88	; 0x58
    2efc:	4642      	mov	r2, r8
    2efe:	5c98      	ldrb	r0, [r3, r2]
    2f00:	4b1a      	ldr	r3, [pc, #104]	; (2f6c <printKeyboardBuffer+0x350>)
    2f02:	4798      	blx	r3
					if(localEcho)
    2f04:	4b1a      	ldr	r3, [pc, #104]	; (2f70 <printKeyboardBuffer+0x354>)
    2f06:	781b      	ldrb	r3, [r3, #0]
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d100      	bne.n	2f0e <printKeyboardBuffer+0x2f2>
    2f0c:	e6cd      	b.n	2caa <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    2f0e:	9b01      	ldr	r3, [sp, #4]
    2f10:	781b      	ldrb	r3, [r3, #0]
    2f12:	aa16      	add	r2, sp, #88	; 0x58
    2f14:	5cd0      	ldrb	r0, [r2, r3]
    2f16:	4b18      	ldr	r3, [pc, #96]	; (2f78 <printKeyboardBuffer+0x35c>)
    2f18:	4798      	blx	r3
    2f1a:	e6c6      	b.n	2caa <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    2f1c:	ab3a      	add	r3, sp, #232	; 0xe8
    2f1e:	4642      	mov	r2, r8
    2f20:	5c98      	ldrb	r0, [r3, r2]
    2f22:	4b12      	ldr	r3, [pc, #72]	; (2f6c <printKeyboardBuffer+0x350>)
    2f24:	4798      	blx	r3
					if(localEcho)
    2f26:	4b12      	ldr	r3, [pc, #72]	; (2f70 <printKeyboardBuffer+0x354>)
    2f28:	781b      	ldrb	r3, [r3, #0]
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d100      	bne.n	2f30 <printKeyboardBuffer+0x314>
    2f2e:	e6bc      	b.n	2caa <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    2f30:	9b01      	ldr	r3, [sp, #4]
    2f32:	781b      	ldrb	r3, [r3, #0]
    2f34:	aa3a      	add	r2, sp, #232	; 0xe8
    2f36:	5cd0      	ldrb	r0, [r2, r3]
    2f38:	4b0f      	ldr	r3, [pc, #60]	; (2f78 <printKeyboardBuffer+0x35c>)
    2f3a:	4798      	blx	r3
    2f3c:	e6b5      	b.n	2caa <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    2f3e:	23ff      	movs	r3, #255	; 0xff
    2f40:	703b      	strb	r3, [r7, #0]
    2f42:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    2f44:	42bc      	cmp	r4, r7
    2f46:	d1fb      	bne.n	2f40 <printKeyboardBuffer+0x324>
}
    2f48:	b04c      	add	sp, #304	; 0x130
    2f4a:	bc1c      	pop	{r2, r3, r4}
    2f4c:	4690      	mov	r8, r2
    2f4e:	4699      	mov	r9, r3
    2f50:	46a2      	mov	sl, r4
    2f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f54:	000070d4 	.word	0x000070d4
    2f58:	00003e9d 	.word	0x00003e9d
    2f5c:	00007154 	.word	0x00007154
    2f60:	2000003c 	.word	0x2000003c
    2f64:	20000028 	.word	0x20000028
    2f68:	00002bf1 	.word	0x00002bf1
    2f6c:	00000e61 	.word	0x00000e61
    2f70:	20000174 	.word	0x20000174
    2f74:	200002f8 	.word	0x200002f8
    2f78:	00000b09 	.word	0x00000b09
    2f7c:	20000320 	.word	0x20000320
    2f80:	00000141 	.word	0x00000141
    2f84:	200002c0 	.word	0x200002c0
    2f88:	20000170 	.word	0x20000170
    2f8c:	20000319 	.word	0x20000319

00002f90 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    2f90:	b510      	push	{r4, lr}
    2f92:	4b07      	ldr	r3, [pc, #28]	; (2fb0 <removeFromKeyDown+0x20>)
    2f94:	0019      	movs	r1, r3
    2f96:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    2f98:	24ff      	movs	r4, #255	; 0xff
    2f9a:	e002      	b.n	2fa2 <removeFromKeyDown+0x12>
    2f9c:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    2f9e:	428b      	cmp	r3, r1
    2fa0:	d004      	beq.n	2fac <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    2fa2:	781a      	ldrb	r2, [r3, #0]
    2fa4:	4282      	cmp	r2, r0
    2fa6:	d1f9      	bne.n	2f9c <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    2fa8:	701c      	strb	r4, [r3, #0]
    2faa:	e7f7      	b.n	2f9c <removeFromKeyDown+0xc>
		}
	}
}
    2fac:	bd10      	pop	{r4, pc}
    2fae:	46c0      	nop			; (mov r8, r8)
    2fb0:	20000028 	.word	0x20000028

00002fb4 <readKeyboard>:
{
    2fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fb6:	46de      	mov	lr, fp
    2fb8:	4657      	mov	r7, sl
    2fba:	464e      	mov	r6, r9
    2fbc:	4645      	mov	r5, r8
    2fbe:	b5e0      	push	{r5, r6, r7, lr}
    2fc0:	b083      	sub	sp, #12
    2fc2:	4e6d      	ldr	r6, [pc, #436]	; (3178 <readKeyboard+0x1c4>)
    2fc4:	0031      	movs	r1, r6
    2fc6:	3119      	adds	r1, #25
    2fc8:	31ff      	adds	r1, #255	; 0xff
    2fca:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    2fcc:	22ff      	movs	r2, #255	; 0xff
    2fce:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    2fd0:	428b      	cmp	r3, r1
    2fd2:	d1fc      	bne.n	2fce <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    2fd4:	4a69      	ldr	r2, [pc, #420]	; (317c <readKeyboard+0x1c8>)
    2fd6:	6a91      	ldr	r1, [r2, #40]	; 0x28
    2fd8:	2380      	movs	r3, #128	; 0x80
    2fda:	03db      	lsls	r3, r3, #15
    2fdc:	430b      	orrs	r3, r1
    2fde:	6293      	str	r3, [r2, #40]	; 0x28
    2fe0:	4c67      	ldr	r4, [pc, #412]	; (3180 <readKeyboard+0x1cc>)
    2fe2:	341c      	adds	r4, #28
    2fe4:	4b66      	ldr	r3, [pc, #408]	; (3180 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    2fe6:	4867      	ldr	r0, [pc, #412]	; (3184 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    2fe8:	4967      	ldr	r1, [pc, #412]	; (3188 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    2fea:	681a      	ldr	r2, [r3, #0]
    2fec:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2fee:	cb04      	ldmia	r3!, {r2}
    2ff0:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    2ff2:	42a3      	cmp	r3, r4
    2ff4:	d1f9      	bne.n	2fea <readKeyboard+0x36>
    2ff6:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    2ff8:	4b64      	ldr	r3, [pc, #400]	; (318c <readKeyboard+0x1d8>)
    2ffa:	469c      	mov	ip, r3
    2ffc:	4f64      	ldr	r7, [pc, #400]	; (3190 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2ffe:	4d65      	ldr	r5, [pc, #404]	; (3194 <readKeyboard+0x1e0>)
    3000:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3002:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    3004:	4663      	mov	r3, ip
    3006:	58d3      	ldr	r3, [r2, r3]
    3008:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    300a:	5953      	ldr	r3, [r2, r5]
    300c:	4962      	ldr	r1, [pc, #392]	; (3198 <readKeyboard+0x1e4>)
    300e:	4688      	mov	r8, r1
    3010:	4443      	add	r3, r8
    3012:	7819      	ldrb	r1, [r3, #0]
    3014:	4321      	orrs	r1, r4
    3016:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3018:	7819      	ldrb	r1, [r3, #0]
    301a:	4301      	orrs	r1, r0
    301c:	7019      	strb	r1, [r3, #0]
    301e:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    3020:	2a28      	cmp	r2, #40	; 0x28
    3022:	d1ef      	bne.n	3004 <readKeyboard+0x50>
    3024:	4b56      	ldr	r3, [pc, #344]	; (3180 <readKeyboard+0x1cc>)
    3026:	4699      	mov	r9, r3
    3028:	2300      	movs	r3, #0
    302a:	4698      	mov	r8, r3
    302c:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    302e:	4b5b      	ldr	r3, [pc, #364]	; (319c <readKeyboard+0x1e8>)
    3030:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3032:	4d52      	ldr	r5, [pc, #328]	; (317c <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    3034:	4b50      	ldr	r3, [pc, #320]	; (3178 <readKeyboard+0x1c4>)
    3036:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    3038:	4b53      	ldr	r3, [pc, #332]	; (3188 <readKeyboard+0x1d4>)
    303a:	469a      	mov	sl, r3
    303c:	9601      	str	r6, [sp, #4]
    303e:	464e      	mov	r6, r9
    3040:	4647      	mov	r7, r8
    3042:	e015      	b.n	3070 <readKeyboard+0xbc>
    3044:	3304      	adds	r3, #4
    3046:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    3048:	42a3      	cmp	r3, r4
    304a:	d008      	beq.n	305e <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    304c:	6a28      	ldr	r0, [r5, #32]
    304e:	681e      	ldr	r6, [r3, #0]
    3050:	4206      	tst	r6, r0
    3052:	d0f7      	beq.n	3044 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    3054:	0090      	lsls	r0, r2, #2
    3056:	4666      	mov	r6, ip
    3058:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    305a:	3201      	adds	r2, #1
    305c:	e7f2      	b.n	3044 <readKeyboard+0x90>
    305e:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3060:	4649      	mov	r1, r9
    3062:	6809      	ldr	r1, [r1, #0]
    3064:	4650      	mov	r0, sl
    3066:	6001      	str	r1, [r0, #0]
    3068:	3604      	adds	r6, #4
    306a:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    306c:	2f46      	cmp	r7, #70	; 0x46
    306e:	d00a      	beq.n	3086 <readKeyboard+0xd2>
    3070:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    3072:	465b      	mov	r3, fp
    3074:	6831      	ldr	r1, [r6, #0]
    3076:	6019      	str	r1, [r3, #0]
    3078:	4b44      	ldr	r3, [pc, #272]	; (318c <readKeyboard+0x1d8>)
    307a:	4698      	mov	r8, r3
    307c:	001c      	movs	r4, r3
    307e:	3428      	adds	r4, #40	; 0x28
    3080:	0039      	movs	r1, r7
    3082:	9600      	str	r6, [sp, #0]
    3084:	e7e2      	b.n	304c <readKeyboard+0x98>
    3086:	4647      	mov	r7, r8
    3088:	9e01      	ldr	r6, [sp, #4]
    308a:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    308c:	4d3d      	ldr	r5, [pc, #244]	; (3184 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    308e:	4c3e      	ldr	r4, [pc, #248]	; (3188 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    3090:	6808      	ldr	r0, [r1, #0]
    3092:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    3094:	c901      	ldmia	r1!, {r0}
    3096:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3098:	4299      	cmp	r1, r3
    309a:	d1f9      	bne.n	3090 <readKeyboard+0xdc>
    309c:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    309e:	4b38      	ldr	r3, [pc, #224]	; (3180 <readKeyboard+0x1cc>)
    30a0:	4699      	mov	r9, r3
    30a2:	4b3b      	ldr	r3, [pc, #236]	; (3190 <readKeyboard+0x1dc>)
    30a4:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    30a6:	4b3e      	ldr	r3, [pc, #248]	; (31a0 <readKeyboard+0x1ec>)
    30a8:	469c      	mov	ip, r3
    30aa:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    30ac:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    30ae:	4643      	mov	r3, r8
    30b0:	4648      	mov	r0, r9
    30b2:	5808      	ldr	r0, [r1, r0]
    30b4:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    30b6:	4663      	mov	r3, ip
    30b8:	58cb      	ldr	r3, [r1, r3]
    30ba:	4837      	ldr	r0, [pc, #220]	; (3198 <readKeyboard+0x1e4>)
    30bc:	4682      	mov	sl, r0
    30be:	4453      	add	r3, sl
    30c0:	7818      	ldrb	r0, [r3, #0]
    30c2:	4328      	orrs	r0, r5
    30c4:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    30c6:	7818      	ldrb	r0, [r3, #0]
    30c8:	4320      	orrs	r0, r4
    30ca:	7018      	strb	r0, [r3, #0]
    30cc:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    30ce:	291c      	cmp	r1, #28
    30d0:	d1ed      	bne.n	30ae <readKeyboard+0xfa>
    30d2:	2300      	movs	r3, #0
    30d4:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    30d6:	4b31      	ldr	r3, [pc, #196]	; (319c <readKeyboard+0x1e8>)
    30d8:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    30da:	4d28      	ldr	r5, [pc, #160]	; (317c <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    30dc:	4b26      	ldr	r3, [pc, #152]	; (3178 <readKeyboard+0x1c4>)
    30de:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    30e0:	4b29      	ldr	r3, [pc, #164]	; (3188 <readKeyboard+0x1d4>)
    30e2:	469a      	mov	sl, r3
    30e4:	46b1      	mov	r9, r6
    30e6:	003e      	movs	r6, r7
    30e8:	4667      	mov	r7, ip
    30ea:	e015      	b.n	3118 <readKeyboard+0x164>
    30ec:	3104      	adds	r1, #4
    30ee:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    30f0:	42a3      	cmp	r3, r4
    30f2:	d008      	beq.n	3106 <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    30f4:	6a28      	ldr	r0, [r5, #32]
    30f6:	680e      	ldr	r6, [r1, #0]
    30f8:	4206      	tst	r6, r0
    30fa:	d0f7      	beq.n	30ec <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    30fc:	0090      	lsls	r0, r2, #2
    30fe:	4646      	mov	r6, r8
    3100:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    3102:	3201      	adds	r2, #1
    3104:	e7f2      	b.n	30ec <readKeyboard+0x138>
    3106:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    3108:	4663      	mov	r3, ip
    310a:	681b      	ldr	r3, [r3, #0]
    310c:	4651      	mov	r1, sl
    310e:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3110:	3701      	adds	r7, #1
    3112:	3604      	adds	r6, #4
    3114:	2f0a      	cmp	r7, #10
    3116:	d009      	beq.n	312c <readKeyboard+0x178>
    3118:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    311a:	465b      	mov	r3, fp
    311c:	6831      	ldr	r1, [r6, #0]
    311e:	6019      	str	r1, [r3, #0]
    3120:	003b      	movs	r3, r7
    3122:	003c      	movs	r4, r7
    3124:	3446      	adds	r4, #70	; 0x46
    3126:	4916      	ldr	r1, [pc, #88]	; (3180 <readKeyboard+0x1cc>)
    3128:	9600      	str	r6, [sp, #0]
    312a:	e7e3      	b.n	30f4 <readKeyboard+0x140>
    312c:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    312e:	2a00      	cmp	r2, #0
    3130:	dd08      	ble.n	3144 <readKeyboard+0x190>
    3132:	4b1c      	ldr	r3, [pc, #112]	; (31a4 <readKeyboard+0x1f0>)
    3134:	0092      	lsls	r2, r2, #2
    3136:	4910      	ldr	r1, [pc, #64]	; (3178 <readKeyboard+0x1c4>)
    3138:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    313a:	ce02      	ldmia	r6!, {r1}
    313c:	7019      	strb	r1, [r3, #0]
    313e:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    3140:	42b2      	cmp	r2, r6
    3142:	d1fa      	bne.n	313a <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    3144:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    3146:	4d18      	ldr	r5, [pc, #96]	; (31a8 <readKeyboard+0x1f4>)
    3148:	4e18      	ldr	r6, [pc, #96]	; (31ac <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    314a:	4f19      	ldr	r7, [pc, #100]	; (31b0 <readKeyboard+0x1fc>)
    314c:	e002      	b.n	3154 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    314e:	3401      	adds	r4, #1
    3150:	2c46      	cmp	r4, #70	; 0x46
    3152:	d00a      	beq.n	316a <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    3154:	0020      	movs	r0, r4
    3156:	47a8      	blx	r5
    3158:	2800      	cmp	r0, #0
    315a:	d0f8      	beq.n	314e <readKeyboard+0x19a>
    315c:	0020      	movs	r0, r4
    315e:	47b0      	blx	r6
    3160:	2800      	cmp	r0, #0
    3162:	d1f4      	bne.n	314e <readKeyboard+0x19a>
			removeFromKeyDown(i);
    3164:	0020      	movs	r0, r4
    3166:	47b8      	blx	r7
    3168:	e7f1      	b.n	314e <readKeyboard+0x19a>
}
    316a:	b003      	add	sp, #12
    316c:	bc3c      	pop	{r2, r3, r4, r5}
    316e:	4690      	mov	r8, r2
    3170:	4699      	mov	r9, r3
    3172:	46a2      	mov	sl, r4
    3174:	46ab      	mov	fp, r5
    3176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3178:	20000050 	.word	0x20000050
    317c:	41004400 	.word	0x41004400
    3180:	000071f4 	.word	0x000071f4
    3184:	41004408 	.word	0x41004408
    3188:	41004414 	.word	0x41004414
    318c:	0000722c 	.word	0x0000722c
    3190:	41004404 	.word	0x41004404
    3194:	00007254 	.word	0x00007254
    3198:	41004440 	.word	0x41004440
    319c:	41004418 	.word	0x41004418
    31a0:	00007210 	.word	0x00007210
    31a4:	2000003c 	.word	0x2000003c
    31a8:	00002bf1 	.word	0x00002bf1
    31ac:	00002bc5 	.word	0x00002bc5
    31b0:	00002f91 	.word	0x00002f91

000031b4 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    31b4:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    31b6:	094b      	lsrs	r3, r1, #5
    31b8:	2407      	movs	r4, #7
    31ba:	43a0      	bics	r0, r4
    31bc:	4318      	orrs	r0, r3
    31be:	4b05      	ldr	r3, [pc, #20]	; (31d4 <setColorRGB+0x20>)
    31c0:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    31c2:	00c9      	lsls	r1, r1, #3
    31c4:	23e0      	movs	r3, #224	; 0xe0
    31c6:	4019      	ands	r1, r3
    31c8:	08d2      	lsrs	r2, r2, #3
    31ca:	430a      	orrs	r2, r1
    31cc:	4b02      	ldr	r3, [pc, #8]	; (31d8 <setColorRGB+0x24>)
    31ce:	801a      	strh	r2, [r3, #0]
}
    31d0:	bd10      	pop	{r4, pc}
    31d2:	46c0      	nop			; (mov r8, r8)
    31d4:	20000b06 	.word	0x20000b06
    31d8:	20000b08 	.word	0x20000b08

000031dc <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    31dc:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    31de:	094b      	lsrs	r3, r1, #5
    31e0:	2407      	movs	r4, #7
    31e2:	43a0      	bics	r0, r4
    31e4:	4318      	orrs	r0, r3
    31e6:	4b05      	ldr	r3, [pc, #20]	; (31fc <setBackColorRGB+0x20>)
    31e8:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    31ea:	00c9      	lsls	r1, r1, #3
    31ec:	23e0      	movs	r3, #224	; 0xe0
    31ee:	4019      	ands	r1, r3
    31f0:	08d2      	lsrs	r2, r2, #3
    31f2:	430a      	orrs	r2, r1
    31f4:	4b02      	ldr	r3, [pc, #8]	; (3200 <setBackColorRGB+0x24>)
    31f6:	801a      	strh	r2, [r3, #0]
}
    31f8:	bd10      	pop	{r4, pc}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	20000b0a 	.word	0x20000b0a
    3200:	20000b04 	.word	0x20000b04

00003204 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    3204:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3206:	4c19      	ldr	r4, [pc, #100]	; (326c <LCD_Fast_Fill+0x68>)
    3208:	4b19      	ldr	r3, [pc, #100]	; (3270 <LCD_Fast_Fill+0x6c>)
    320a:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    320c:	0200      	lsls	r0, r0, #8
    320e:	4301      	orrs	r1, r0
    3210:	4b18      	ldr	r3, [pc, #96]	; (3274 <LCD_Fast_Fill+0x70>)
    3212:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    3214:	17d3      	asrs	r3, r2, #31
    3216:	260f      	movs	r6, #15
    3218:	401e      	ands	r6, r3
    321a:	18b6      	adds	r6, r6, r2
    321c:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    321e:	2500      	movs	r5, #0
    3220:	2e00      	cmp	r6, #0
    3222:	dd0c      	ble.n	323e <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    3224:	4c12      	ldr	r4, [pc, #72]	; (3270 <LCD_Fast_Fill+0x6c>)
    3226:	2180      	movs	r1, #128	; 0x80
    3228:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    322a:	4812      	ldr	r0, [pc, #72]	; (3274 <LCD_Fast_Fill+0x70>)
{
    322c:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    322e:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    3230:	6001      	str	r1, [r0, #0]
    3232:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    3234:	2b00      	cmp	r3, #0
    3236:	d1fa      	bne.n	322e <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    3238:	3501      	adds	r5, #1
    323a:	42ae      	cmp	r6, r5
    323c:	d1f6      	bne.n	322c <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    323e:	0713      	lsls	r3, r2, #28
    3240:	d013      	beq.n	326a <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    3242:	17d3      	asrs	r3, r2, #31
    3244:	0f1b      	lsrs	r3, r3, #28
    3246:	18d2      	adds	r2, r2, r3
    3248:	210f      	movs	r1, #15
    324a:	4011      	ands	r1, r2
    324c:	1ac9      	subs	r1, r1, r3
    324e:	1c4b      	adds	r3, r1, #1
    3250:	2b00      	cmp	r3, #0
    3252:	dd0a      	ble.n	326a <LCD_Fast_Fill+0x66>
    3254:	0019      	movs	r1, r3
    3256:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    3258:	4c05      	ldr	r4, [pc, #20]	; (3270 <LCD_Fast_Fill+0x6c>)
    325a:	2280      	movs	r2, #128	; 0x80
    325c:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    325e:	4805      	ldr	r0, [pc, #20]	; (3274 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    3260:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    3262:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    3264:	3301      	adds	r3, #1
    3266:	4299      	cmp	r1, r3
    3268:	d1fa      	bne.n	3260 <LCD_Fast_Fill+0x5c>
	}
}
    326a:	bd70      	pop	{r4, r5, r6, pc}
    326c:	0000ffff 	.word	0x0000ffff
    3270:	41004494 	.word	0x41004494
    3274:	41004498 	.word	0x41004498

00003278 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    3278:	b5f0      	push	{r4, r5, r6, r7, lr}
    327a:	b083      	sub	sp, #12
    327c:	0007      	movs	r7, r0
    327e:	9100      	str	r1, [sp, #0]
    3280:	0016      	movs	r6, r2
    3282:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    3284:	2100      	movs	r1, #0
    3286:	202a      	movs	r0, #42	; 0x2a
    3288:	4c17      	ldr	r4, [pc, #92]	; (32e8 <setXY+0x70>)
    328a:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    328c:	0a38      	lsrs	r0, r7, #8
    328e:	4d17      	ldr	r5, [pc, #92]	; (32ec <setXY+0x74>)
    3290:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    3292:	2101      	movs	r1, #1
    3294:	202a      	movs	r0, #42	; 0x2a
    3296:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    3298:	b2f8      	uxtb	r0, r7
    329a:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    329c:	2102      	movs	r1, #2
    329e:	202a      	movs	r0, #42	; 0x2a
    32a0:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    32a2:	0a30      	lsrs	r0, r6, #8
    32a4:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    32a6:	2103      	movs	r1, #3
    32a8:	202a      	movs	r0, #42	; 0x2a
    32aa:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    32ac:	b2f0      	uxtb	r0, r6
    32ae:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    32b0:	2100      	movs	r1, #0
    32b2:	202b      	movs	r0, #43	; 0x2b
    32b4:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    32b6:	9e00      	ldr	r6, [sp, #0]
    32b8:	0a30      	lsrs	r0, r6, #8
    32ba:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    32bc:	2101      	movs	r1, #1
    32be:	202b      	movs	r0, #43	; 0x2b
    32c0:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    32c2:	b2f0      	uxtb	r0, r6
    32c4:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    32c6:	2102      	movs	r1, #2
    32c8:	202b      	movs	r0, #43	; 0x2b
    32ca:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    32cc:	9e01      	ldr	r6, [sp, #4]
    32ce:	0a30      	lsrs	r0, r6, #8
    32d0:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    32d2:	2103      	movs	r1, #3
    32d4:	202b      	movs	r0, #43	; 0x2b
    32d6:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    32d8:	b2f0      	uxtb	r0, r6
    32da:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    32dc:	2100      	movs	r1, #0
    32de:	202c      	movs	r0, #44	; 0x2c
    32e0:	47a0      	blx	r4
}
    32e2:	b003      	add	sp, #12
    32e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32e6:	46c0      	nop			; (mov r8, r8)
    32e8:	0000341d 	.word	0x0000341d
    32ec:	0000344d 	.word	0x0000344d

000032f0 <fillRect>:
{
    32f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32f2:	46ce      	mov	lr, r9
    32f4:	4647      	mov	r7, r8
    32f6:	b580      	push	{r7, lr}
    32f8:	b083      	sub	sp, #12
    32fa:	0006      	movs	r6, r0
    32fc:	4689      	mov	r9, r1
    32fe:	0014      	movs	r4, r2
    3300:	001d      	movs	r5, r3
	if (x1>x2)
    3302:	4290      	cmp	r0, r2
    3304:	dd01      	ble.n	330a <fillRect+0x1a>
		x1 = x2;
    3306:	0016      	movs	r6, r2
		x2 = temp;
    3308:	0004      	movs	r4, r0
	if (y1>y2)
    330a:	45a9      	cmp	r9, r5
    330c:	dd02      	ble.n	3314 <fillRect+0x24>
    330e:	0033      	movs	r3, r6
		x1 = x2;
    3310:	0026      	movs	r6, r4
		x2 = temp;
    3312:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    3314:	2380      	movs	r3, #128	; 0x80
    3316:	03db      	lsls	r3, r3, #15
    3318:	4698      	mov	r8, r3
    331a:	4b11      	ldr	r3, [pc, #68]	; (3360 <fillRect+0x70>)
    331c:	4642      	mov	r2, r8
    331e:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    3320:	b2ab      	uxth	r3, r5
    3322:	b2a2      	uxth	r2, r4
    3324:	4649      	mov	r1, r9
    3326:	4668      	mov	r0, sp
    3328:	80c1      	strh	r1, [r0, #6]
    332a:	88c1      	ldrh	r1, [r0, #6]
    332c:	b2b0      	uxth	r0, r6
    332e:	4f0d      	ldr	r7, [pc, #52]	; (3364 <fillRect+0x74>)
    3330:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    3332:	4f0d      	ldr	r7, [pc, #52]	; (3368 <fillRect+0x78>)
    3334:	2380      	movs	r3, #128	; 0x80
    3336:	041b      	lsls	r3, r3, #16
    3338:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    333a:	1ba4      	subs	r4, r4, r6
    333c:	3401      	adds	r4, #1
    333e:	464b      	mov	r3, r9
    3340:	1aea      	subs	r2, r5, r3
    3342:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    3344:	4362      	muls	r2, r4
    3346:	4b09      	ldr	r3, [pc, #36]	; (336c <fillRect+0x7c>)
    3348:	8819      	ldrh	r1, [r3, #0]
    334a:	4b09      	ldr	r3, [pc, #36]	; (3370 <fillRect+0x80>)
    334c:	8818      	ldrh	r0, [r3, #0]
    334e:	4b09      	ldr	r3, [pc, #36]	; (3374 <fillRect+0x84>)
    3350:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    3352:	4643      	mov	r3, r8
    3354:	603b      	str	r3, [r7, #0]
}
    3356:	b003      	add	sp, #12
    3358:	bc0c      	pop	{r2, r3}
    335a:	4690      	mov	r8, r2
    335c:	4699      	mov	r9, r3
    335e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3360:	41004494 	.word	0x41004494
    3364:	00003279 	.word	0x00003279
    3368:	41004498 	.word	0x41004498
    336c:	20000b08 	.word	0x20000b08
    3370:	20000b06 	.word	0x20000b06
    3374:	00003205 	.word	0x00003205

00003378 <clrXY>:
{
    3378:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    337a:	4b04      	ldr	r3, [pc, #16]	; (338c <clrXY+0x14>)
    337c:	881b      	ldrh	r3, [r3, #0]
    337e:	4a04      	ldr	r2, [pc, #16]	; (3390 <clrXY+0x18>)
    3380:	8812      	ldrh	r2, [r2, #0]
    3382:	2100      	movs	r1, #0
    3384:	2000      	movs	r0, #0
    3386:	4c03      	ldr	r4, [pc, #12]	; (3394 <clrXY+0x1c>)
    3388:	47a0      	blx	r4
}
    338a:	bd10      	pop	{r4, pc}
    338c:	2000016a 	.word	0x2000016a
    3390:	20000168 	.word	0x20000168
    3394:	00003279 	.word	0x00003279

00003398 <clrScr>:
{
    3398:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    339a:	2280      	movs	r2, #128	; 0x80
    339c:	03d2      	lsls	r2, r2, #15
    339e:	4b02      	ldr	r3, [pc, #8]	; (33a8 <clrScr+0x10>)
    33a0:	601a      	str	r2, [r3, #0]
	clrXY();
    33a2:	4b02      	ldr	r3, [pc, #8]	; (33ac <clrScr+0x14>)
    33a4:	4798      	blx	r3
}
    33a6:	bd10      	pop	{r4, pc}
    33a8:	41004494 	.word	0x41004494
    33ac:	00003379 	.word	0x00003379

000033b0 <setPixel>:

void setPixel(uint16_t color)
{
    33b0:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    33b2:	b2c1      	uxtb	r1, r0
    33b4:	0a00      	lsrs	r0, r0, #8
    33b6:	4b01      	ldr	r3, [pc, #4]	; (33bc <setPixel+0xc>)
    33b8:	4798      	blx	r3
}
    33ba:	bd10      	pop	{r4, pc}
    33bc:	00003435 	.word	0x00003435

000033c0 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    33c0:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    33c2:	2300      	movs	r3, #0
    33c4:	4a06      	ldr	r2, [pc, #24]	; (33e0 <clearScreen+0x20>)
    33c6:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    33c8:	4a06      	ldr	r2, [pc, #24]	; (33e4 <clearScreen+0x24>)
    33ca:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    33cc:	4b06      	ldr	r3, [pc, #24]	; (33e8 <clearScreen+0x28>)
    33ce:	881b      	ldrh	r3, [r3, #0]
    33d0:	4a06      	ldr	r2, [pc, #24]	; (33ec <clearScreen+0x2c>)
    33d2:	8812      	ldrh	r2, [r2, #0]
    33d4:	2100      	movs	r1, #0
    33d6:	2000      	movs	r0, #0
    33d8:	4c05      	ldr	r4, [pc, #20]	; (33f0 <clearScreen+0x30>)
    33da:	47a0      	blx	r4
}
    33dc:	bd10      	pop	{r4, pc}
    33de:	46c0      	nop			; (mov r8, r8)
    33e0:	20000b06 	.word	0x20000b06
    33e4:	20000b08 	.word	0x20000b08
    33e8:	20000168 	.word	0x20000168
    33ec:	2000016a 	.word	0x2000016a
    33f0:	000032f1 	.word	0x000032f1

000033f4 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    33f4:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    33f6:	4c06      	ldr	r4, [pc, #24]	; (3410 <LCD_Write_Bus+0x1c>)
    33f8:	4b06      	ldr	r3, [pc, #24]	; (3414 <LCD_Write_Bus+0x20>)
    33fa:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    33fc:	0200      	lsls	r0, r0, #8
    33fe:	4301      	orrs	r1, r0
    3400:	4b05      	ldr	r3, [pc, #20]	; (3418 <LCD_Write_Bus+0x24>)
    3402:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    3404:	2280      	movs	r2, #128	; 0x80
    3406:	0292      	lsls	r2, r2, #10
    3408:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    340a:	601a      	str	r2, [r3, #0]
}
    340c:	bd10      	pop	{r4, pc}
    340e:	46c0      	nop			; (mov r8, r8)
    3410:	41004494 	.word	0x41004494
    3414:	0000ffff 	.word	0x0000ffff
    3418:	41004498 	.word	0x41004498

0000341c <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    341c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    341e:	2280      	movs	r2, #128	; 0x80
    3420:	0412      	lsls	r2, r2, #16
    3422:	4b02      	ldr	r3, [pc, #8]	; (342c <LCD_Write_COM16+0x10>)
    3424:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    3426:	4b02      	ldr	r3, [pc, #8]	; (3430 <LCD_Write_COM16+0x14>)
    3428:	4798      	blx	r3
}
    342a:	bd10      	pop	{r4, pc}
    342c:	41004494 	.word	0x41004494
    3430:	000033f5 	.word	0x000033f5

00003434 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    3434:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    3436:	2280      	movs	r2, #128	; 0x80
    3438:	0412      	lsls	r2, r2, #16
    343a:	4b02      	ldr	r3, [pc, #8]	; (3444 <LCD_Write_DATA16+0x10>)
    343c:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    343e:	4b02      	ldr	r3, [pc, #8]	; (3448 <LCD_Write_DATA16+0x14>)
    3440:	4798      	blx	r3
}
    3442:	bd10      	pop	{r4, pc}
    3444:	41004498 	.word	0x41004498
    3448:	000033f5 	.word	0x000033f5

0000344c <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    344c:	b510      	push	{r4, lr}
    344e:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    3450:	2280      	movs	r2, #128	; 0x80
    3452:	0412      	lsls	r2, r2, #16
    3454:	4b02      	ldr	r3, [pc, #8]	; (3460 <LCD_Write_DATA8+0x14>)
    3456:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    3458:	2000      	movs	r0, #0
    345a:	4b02      	ldr	r3, [pc, #8]	; (3464 <LCD_Write_DATA8+0x18>)
    345c:	4798      	blx	r3
}
    345e:	bd10      	pop	{r4, pc}
    3460:	41004498 	.word	0x41004498
    3464:	000033f5 	.word	0x000033f5

00003468 <InitLCD>:
{
    3468:	b5f0      	push	{r4, r5, r6, r7, lr}
    346a:	46c6      	mov	lr, r8
    346c:	b500      	push	{lr}
    346e:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    3470:	4b80      	ldr	r3, [pc, #512]	; (3674 <InitLCD+0x20c>)
    3472:	4f81      	ldr	r7, [pc, #516]	; (3678 <InitLCD+0x210>)
    3474:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    3476:	2580      	movs	r5, #128	; 0x80
    3478:	05ed      	lsls	r5, r5, #23
    347a:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    347c:	2680      	movs	r6, #128	; 0x80
    347e:	03f6      	lsls	r6, r6, #15
    3480:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    3482:	2080      	movs	r0, #128	; 0x80
    3484:	0280      	lsls	r0, r0, #10
    3486:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    3488:	2180      	movs	r1, #128	; 0x80
    348a:	0409      	lsls	r1, r1, #16
    348c:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    348e:	2280      	movs	r2, #128	; 0x80
    3490:	0252      	lsls	r2, r2, #9
    3492:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3494:	4c79      	ldr	r4, [pc, #484]	; (367c <InitLCD+0x214>)
    3496:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    3498:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    349a:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    349c:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    349e:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    34a0:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    34a2:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    34a4:	4f76      	ldr	r7, [pc, #472]	; (3680 <InitLCD+0x218>)
    34a6:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    34a8:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    34aa:	2005      	movs	r0, #5
    34ac:	4b75      	ldr	r3, [pc, #468]	; (3684 <InitLCD+0x21c>)
    34ae:	4698      	mov	r8, r3
    34b0:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    34b2:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    34b4:	2005      	movs	r0, #5
    34b6:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    34b8:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    34ba:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    34bc:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    34be:	4b6f      	ldr	r3, [pc, #444]	; (367c <InitLCD+0x214>)
    34c0:	4698      	mov	r8, r3
    34c2:	2580      	movs	r5, #128	; 0x80
    34c4:	042d      	lsls	r5, r5, #16
    34c6:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    34c8:	4e6f      	ldr	r6, [pc, #444]	; (3688 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    34ca:	4643      	mov	r3, r8
    34cc:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    34ce:	5da1      	ldrb	r1, [r4, r6]
    34d0:	4b6e      	ldr	r3, [pc, #440]	; (368c <InitLCD+0x224>)
    34d2:	5ce0      	ldrb	r0, [r4, r3]
    34d4:	4b6e      	ldr	r3, [pc, #440]	; (3690 <InitLCD+0x228>)
    34d6:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    34d8:	4b69      	ldr	r3, [pc, #420]	; (3680 <InitLCD+0x218>)
    34da:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    34dc:	4b6d      	ldr	r3, [pc, #436]	; (3694 <InitLCD+0x22c>)
    34de:	5ce0      	ldrb	r0, [r4, r3]
    34e0:	4b6d      	ldr	r3, [pc, #436]	; (3698 <InitLCD+0x230>)
    34e2:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    34e4:	3401      	adds	r4, #1
    34e6:	2c46      	cmp	r4, #70	; 0x46
    34e8:	d1ef      	bne.n	34ca <InitLCD+0x62>
    34ea:	23d1      	movs	r3, #209	; 0xd1
    34ec:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    34ee:	4d68      	ldr	r5, [pc, #416]	; (3690 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    34f0:	4f69      	ldr	r7, [pc, #420]	; (3698 <InitLCD+0x230>)
    34f2:	4c6a      	ldr	r4, [pc, #424]	; (369c <InitLCD+0x234>)
    34f4:	0026      	movs	r6, r4
    34f6:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    34f8:	2100      	movs	r1, #0
    34fa:	9801      	ldr	r0, [sp, #4]
    34fc:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    34fe:	7820      	ldrb	r0, [r4, #0]
    3500:	47b8      	blx	r7
    3502:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    3504:	42a6      	cmp	r6, r4
    3506:	d1f7      	bne.n	34f8 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    3508:	9b01      	ldr	r3, [sp, #4]
    350a:	3301      	adds	r3, #1
    350c:	b2db      	uxtb	r3, r3
    350e:	9301      	str	r3, [sp, #4]
    3510:	2bd6      	cmp	r3, #214	; 0xd6
    3512:	d1ee      	bne.n	34f2 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    3514:	2100      	movs	r1, #0
    3516:	20f0      	movs	r0, #240	; 0xf0
    3518:	4c5d      	ldr	r4, [pc, #372]	; (3690 <InitLCD+0x228>)
    351a:	47a0      	blx	r4
    351c:	2055      	movs	r0, #85	; 0x55
    351e:	4d5e      	ldr	r5, [pc, #376]	; (3698 <InitLCD+0x230>)
    3520:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    3522:	2101      	movs	r1, #1
    3524:	20f0      	movs	r0, #240	; 0xf0
    3526:	47a0      	blx	r4
    3528:	20aa      	movs	r0, #170	; 0xaa
    352a:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    352c:	2102      	movs	r1, #2
    352e:	20f0      	movs	r0, #240	; 0xf0
    3530:	47a0      	blx	r4
    3532:	2052      	movs	r0, #82	; 0x52
    3534:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    3536:	2103      	movs	r1, #3
    3538:	20f0      	movs	r0, #240	; 0xf0
    353a:	47a0      	blx	r4
    353c:	2008      	movs	r0, #8
    353e:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    3540:	2104      	movs	r1, #4
    3542:	20f0      	movs	r0, #240	; 0xf0
    3544:	47a0      	blx	r4
    3546:	2000      	movs	r0, #0
    3548:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    354a:	2100      	movs	r1, #0
    354c:	20b1      	movs	r0, #177	; 0xb1
    354e:	47a0      	blx	r4
    3550:	20cc      	movs	r0, #204	; 0xcc
    3552:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    3554:	2101      	movs	r1, #1
    3556:	20b1      	movs	r0, #177	; 0xb1
    3558:	47a0      	blx	r4
    355a:	2000      	movs	r0, #0
    355c:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    355e:	2100      	movs	r1, #0
    3560:	20b5      	movs	r0, #181	; 0xb5
    3562:	47a0      	blx	r4
    3564:	2050      	movs	r0, #80	; 0x50
    3566:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    3568:	2100      	movs	r1, #0
    356a:	20b6      	movs	r0, #182	; 0xb6
    356c:	47a0      	blx	r4
    356e:	2005      	movs	r0, #5
    3570:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    3572:	2100      	movs	r1, #0
    3574:	20b7      	movs	r0, #183	; 0xb7
    3576:	47a0      	blx	r4
    3578:	2070      	movs	r0, #112	; 0x70
    357a:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    357c:	2101      	movs	r1, #1
    357e:	20b7      	movs	r0, #183	; 0xb7
    3580:	47a0      	blx	r4
    3582:	2070      	movs	r0, #112	; 0x70
    3584:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    3586:	2100      	movs	r1, #0
    3588:	20b8      	movs	r0, #184	; 0xb8
    358a:	47a0      	blx	r4
    358c:	2001      	movs	r0, #1
    358e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    3590:	2101      	movs	r1, #1
    3592:	20b8      	movs	r0, #184	; 0xb8
    3594:	47a0      	blx	r4
    3596:	2003      	movs	r0, #3
    3598:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    359a:	2102      	movs	r1, #2
    359c:	20b8      	movs	r0, #184	; 0xb8
    359e:	47a0      	blx	r4
    35a0:	2003      	movs	r0, #3
    35a2:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    35a4:	2103      	movs	r1, #3
    35a6:	20b8      	movs	r0, #184	; 0xb8
    35a8:	47a0      	blx	r4
    35aa:	2003      	movs	r0, #3
    35ac:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    35ae:	2100      	movs	r1, #0
    35b0:	20bc      	movs	r0, #188	; 0xbc
    35b2:	47a0      	blx	r4
    35b4:	2002      	movs	r0, #2
    35b6:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    35b8:	2101      	movs	r1, #1
    35ba:	20bc      	movs	r0, #188	; 0xbc
    35bc:	47a0      	blx	r4
    35be:	2000      	movs	r0, #0
    35c0:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    35c2:	2102      	movs	r1, #2
    35c4:	20bc      	movs	r0, #188	; 0xbc
    35c6:	47a0      	blx	r4
    35c8:	2000      	movs	r0, #0
    35ca:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    35cc:	2100      	movs	r1, #0
    35ce:	20c9      	movs	r0, #201	; 0xc9
    35d0:	47a0      	blx	r4
    35d2:	20d0      	movs	r0, #208	; 0xd0
    35d4:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    35d6:	2101      	movs	r1, #1
    35d8:	20c9      	movs	r0, #201	; 0xc9
    35da:	47a0      	blx	r4
    35dc:	2002      	movs	r0, #2
    35de:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    35e0:	2102      	movs	r1, #2
    35e2:	20c9      	movs	r0, #201	; 0xc9
    35e4:	47a0      	blx	r4
    35e6:	2050      	movs	r0, #80	; 0x50
    35e8:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    35ea:	2103      	movs	r1, #3
    35ec:	20c9      	movs	r0, #201	; 0xc9
    35ee:	47a0      	blx	r4
    35f0:	2050      	movs	r0, #80	; 0x50
    35f2:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    35f4:	2104      	movs	r1, #4
    35f6:	20c9      	movs	r0, #201	; 0xc9
    35f8:	47a0      	blx	r4
    35fa:	2050      	movs	r0, #80	; 0x50
    35fc:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    35fe:	2100      	movs	r1, #0
    3600:	2035      	movs	r0, #53	; 0x35
    3602:	47a0      	blx	r4
    3604:	2000      	movs	r0, #0
    3606:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    3608:	2100      	movs	r1, #0
    360a:	203a      	movs	r0, #58	; 0x3a
    360c:	47a0      	blx	r4
    360e:	2055      	movs	r0, #85	; 0x55
    3610:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    3612:	2100      	movs	r1, #0
    3614:	2036      	movs	r0, #54	; 0x36
    3616:	47a0      	blx	r4
    3618:	20e2      	movs	r0, #226	; 0xe2
    361a:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    361c:	2100      	movs	r1, #0
    361e:	2011      	movs	r0, #17
    3620:	47a0      	blx	r4
  	delay_ms(100);
    3622:	2064      	movs	r0, #100	; 0x64
    3624:	4e17      	ldr	r6, [pc, #92]	; (3684 <InitLCD+0x21c>)
    3626:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    3628:	2100      	movs	r1, #0
    362a:	2029      	movs	r0, #41	; 0x29
    362c:	47a0      	blx	r4
   	delay_ms(100);
    362e:	2064      	movs	r0, #100	; 0x64
    3630:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    3632:	2100      	movs	r1, #0
    3634:	2051      	movs	r0, #81	; 0x51
    3636:	47a0      	blx	r4
    3638:	20ff      	movs	r0, #255	; 0xff
    363a:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    363c:	2280      	movs	r2, #128	; 0x80
    363e:	03d2      	lsls	r2, r2, #15
    3640:	4b0f      	ldr	r3, [pc, #60]	; (3680 <InitLCD+0x218>)
    3642:	601a      	str	r2, [r3, #0]
	clrScr();
    3644:	4b16      	ldr	r3, [pc, #88]	; (36a0 <InitLCD+0x238>)
    3646:	4798      	blx	r3
	setColorRGB(0,0,0);
    3648:	2200      	movs	r2, #0
    364a:	2100      	movs	r1, #0
    364c:	2000      	movs	r0, #0
    364e:	4b15      	ldr	r3, [pc, #84]	; (36a4 <InitLCD+0x23c>)
    3650:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    3652:	2200      	movs	r2, #0
    3654:	2100      	movs	r1, #0
    3656:	2000      	movs	r0, #0
    3658:	4b13      	ldr	r3, [pc, #76]	; (36a8 <InitLCD+0x240>)
    365a:	4798      	blx	r3
	fillRect(0,0,799,489);
    365c:	23ea      	movs	r3, #234	; 0xea
    365e:	33ff      	adds	r3, #255	; 0xff
    3660:	4a12      	ldr	r2, [pc, #72]	; (36ac <InitLCD+0x244>)
    3662:	2100      	movs	r1, #0
    3664:	2000      	movs	r0, #0
    3666:	4c12      	ldr	r4, [pc, #72]	; (36b0 <InitLCD+0x248>)
    3668:	47a0      	blx	r4
}
    366a:	b002      	add	sp, #8
    366c:	bc04      	pop	{r2}
    366e:	4690      	mov	r8, r2
    3670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3672:	46c0      	nop			; (mov r8, r8)
    3674:	41004488 	.word	0x41004488
    3678:	0000ffff 	.word	0x0000ffff
    367c:	41004494 	.word	0x41004494
    3680:	41004498 	.word	0x41004498
    3684:	00000ead 	.word	0x00000ead
    3688:	00007340 	.word	0x00007340
    368c:	000072b0 	.word	0x000072b0
    3690:	0000341d 	.word	0x0000341d
    3694:	000072f8 	.word	0x000072f8
    3698:	0000344d 	.word	0x0000344d
    369c:	0000727c 	.word	0x0000727c
    36a0:	00003399 	.word	0x00003399
    36a4:	000031b5 	.word	0x000031b5
    36a8:	000031dd 	.word	0x000031dd
    36ac:	0000031f 	.word	0x0000031f
    36b0:	000032f1 	.word	0x000032f1

000036b4 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    36b4:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    36b6:	4c06      	ldr	r4, [pc, #24]	; (36d0 <usart_read_callback+0x1c>)
    36b8:	2201      	movs	r2, #1
    36ba:	0021      	movs	r1, r4
    36bc:	4805      	ldr	r0, [pc, #20]	; (36d4 <usart_read_callback+0x20>)
    36be:	4b06      	ldr	r3, [pc, #24]	; (36d8 <usart_read_callback+0x24>)
    36c0:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    36c2:	7821      	ldrb	r1, [r4, #0]
    36c4:	4b05      	ldr	r3, [pc, #20]	; (36dc <usart_read_callback+0x28>)
    36c6:	6818      	ldr	r0, [r3, #0]
    36c8:	4b05      	ldr	r3, [pc, #20]	; (36e0 <usart_read_callback+0x2c>)
    36ca:	4798      	blx	r3
}
    36cc:	bd10      	pop	{r4, pc}
    36ce:	46c0      	nop			; (mov r8, r8)
    36d0:	20000b0c 	.word	0x20000b0c
    36d4:	2000034c 	.word	0x2000034c
    36d8:	00001d4d 	.word	0x00001d4d
    36dc:	20000320 	.word	0x20000320
    36e0:	00000141 	.word	0x00000141

000036e4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    36e4:	b570      	push	{r4, r5, r6, lr}
    36e6:	b082      	sub	sp, #8
    36e8:	0005      	movs	r5, r0
    36ea:	000e      	movs	r6, r1
	uint16_t temp = 0;
    36ec:	2200      	movs	r2, #0
    36ee:	466b      	mov	r3, sp
    36f0:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    36f2:	4c06      	ldr	r4, [pc, #24]	; (370c <usart_serial_getchar+0x28>)
    36f4:	466b      	mov	r3, sp
    36f6:	1d99      	adds	r1, r3, #6
    36f8:	0028      	movs	r0, r5
    36fa:	47a0      	blx	r4
    36fc:	2800      	cmp	r0, #0
    36fe:	d1f9      	bne.n	36f4 <usart_serial_getchar+0x10>

	*c = temp;
    3700:	466b      	mov	r3, sp
    3702:	3306      	adds	r3, #6
    3704:	881b      	ldrh	r3, [r3, #0]
    3706:	7033      	strb	r3, [r6, #0]
}
    3708:	b002      	add	sp, #8
    370a:	bd70      	pop	{r4, r5, r6, pc}
    370c:	00001c7b 	.word	0x00001c7b

00003710 <usart_serial_putchar>:
{
    3710:	b570      	push	{r4, r5, r6, lr}
    3712:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3714:	b28c      	uxth	r4, r1
    3716:	4e03      	ldr	r6, [pc, #12]	; (3724 <usart_serial_putchar+0x14>)
    3718:	0021      	movs	r1, r4
    371a:	0028      	movs	r0, r5
    371c:	47b0      	blx	r6
    371e:	2800      	cmp	r0, #0
    3720:	d1fa      	bne.n	3718 <usart_serial_putchar+0x8>
}
    3722:	bd70      	pop	{r4, r5, r6, pc}
    3724:	00001c55 	.word	0x00001c55

00003728 <SysTick_Handler>:
	ul_tickcount++;
    3728:	4a02      	ldr	r2, [pc, #8]	; (3734 <SysTick_Handler+0xc>)
    372a:	8813      	ldrh	r3, [r2, #0]
    372c:	3301      	adds	r3, #1
    372e:	8013      	strh	r3, [r2, #0]
}
    3730:	4770      	bx	lr
    3732:	46c0      	nop			; (mov r8, r8)
    3734:	200002c4 	.word	0x200002c4

00003738 <conf_systick>:
{
    3738:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    373a:	4b0e      	ldr	r3, [pc, #56]	; (3774 <conf_systick+0x3c>)
    373c:	6818      	ldr	r0, [r3, #0]
    373e:	21fa      	movs	r1, #250	; 0xfa
    3740:	0089      	lsls	r1, r1, #2
    3742:	4b0d      	ldr	r3, [pc, #52]	; (3778 <conf_systick+0x40>)
    3744:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    3746:	3801      	subs	r0, #1
    3748:	4b0c      	ldr	r3, [pc, #48]	; (377c <conf_systick+0x44>)
    374a:	4298      	cmp	r0, r3
    374c:	d80d      	bhi.n	376a <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    374e:	4a0c      	ldr	r2, [pc, #48]	; (3780 <conf_systick+0x48>)
    3750:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3752:	480c      	ldr	r0, [pc, #48]	; (3784 <conf_systick+0x4c>)
    3754:	6a03      	ldr	r3, [r0, #32]
    3756:	021b      	lsls	r3, r3, #8
    3758:	0a1b      	lsrs	r3, r3, #8
    375a:	21c0      	movs	r1, #192	; 0xc0
    375c:	0609      	lsls	r1, r1, #24
    375e:	430b      	orrs	r3, r1
    3760:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3762:	2300      	movs	r3, #0
    3764:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    3766:	3307      	adds	r3, #7
    3768:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    376a:	2280      	movs	r2, #128	; 0x80
    376c:	0612      	lsls	r2, r2, #24
    376e:	4b06      	ldr	r3, [pc, #24]	; (3788 <conf_systick+0x50>)
    3770:	601a      	str	r2, [r3, #0]
}
    3772:	bd10      	pop	{r4, pc}
    3774:	20000020 	.word	0x20000020
    3778:	00003b01 	.word	0x00003b01
    377c:	00ffffff 	.word	0x00ffffff
    3780:	e000e010 	.word	0xe000e010
    3784:	e000ed00 	.word	0xe000ed00
    3788:	e000e100 	.word	0xe000e100

0000378c <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    378c:	b570      	push	{r4, r5, r6, lr}
    378e:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    3790:	2380      	movs	r3, #128	; 0x80
    3792:	05db      	lsls	r3, r3, #23
    3794:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3796:	2300      	movs	r3, #0
    3798:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    379a:	22ff      	movs	r2, #255	; 0xff
    379c:	4669      	mov	r1, sp
    379e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    37a0:	2200      	movs	r2, #0
    37a2:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    37a4:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    37a6:	2196      	movs	r1, #150	; 0x96
    37a8:	0189      	lsls	r1, r1, #6
    37aa:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    37ac:	2101      	movs	r1, #1
    37ae:	2024      	movs	r0, #36	; 0x24
    37b0:	466c      	mov	r4, sp
    37b2:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    37b4:	3001      	adds	r0, #1
    37b6:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    37b8:	3125      	adds	r1, #37	; 0x25
    37ba:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    37bc:	3101      	adds	r1, #1
    37be:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    37c0:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    37c2:	3105      	adds	r1, #5
    37c4:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    37c6:	3101      	adds	r1, #1
    37c8:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    37ca:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    37cc:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    37ce:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    37d0:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    37d2:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    37d4:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    37d6:	2313      	movs	r3, #19
    37d8:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    37da:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    37dc:	2380      	movs	r3, #128	; 0x80
    37de:	035b      	lsls	r3, r3, #13
    37e0:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    37e2:	4b1e      	ldr	r3, [pc, #120]	; (385c <configure_usart+0xd0>)
    37e4:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    37e6:	4b1e      	ldr	r3, [pc, #120]	; (3860 <configure_usart+0xd4>)
    37e8:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    37ea:	2301      	movs	r3, #1
    37ec:	425b      	negs	r3, r3
    37ee:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    37f0:	930f      	str	r3, [sp, #60]	; 0x3c
	
	
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    37f2:	4d1c      	ldr	r5, [pc, #112]	; (3864 <configure_usart+0xd8>)
    37f4:	4c1c      	ldr	r4, [pc, #112]	; (3868 <configure_usart+0xdc>)
    37f6:	466a      	mov	r2, sp
    37f8:	491c      	ldr	r1, [pc, #112]	; (386c <configure_usart+0xe0>)
    37fa:	0028      	movs	r0, r5
    37fc:	47a0      	blx	r4
    37fe:	2800      	cmp	r0, #0
    3800:	d1f9      	bne.n	37f6 <configure_usart+0x6a>
	stdio_base = (void *)module;
    3802:	4c18      	ldr	r4, [pc, #96]	; (3864 <configure_usart+0xd8>)
    3804:	4b1a      	ldr	r3, [pc, #104]	; (3870 <configure_usart+0xe4>)
    3806:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3808:	4a1a      	ldr	r2, [pc, #104]	; (3874 <configure_usart+0xe8>)
    380a:	4b1b      	ldr	r3, [pc, #108]	; (3878 <configure_usart+0xec>)
    380c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    380e:	4a1b      	ldr	r2, [pc, #108]	; (387c <configure_usart+0xf0>)
    3810:	4b1b      	ldr	r3, [pc, #108]	; (3880 <configure_usart+0xf4>)
    3812:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3814:	466a      	mov	r2, sp
    3816:	4915      	ldr	r1, [pc, #84]	; (386c <configure_usart+0xe0>)
    3818:	0020      	movs	r0, r4
    381a:	4b13      	ldr	r3, [pc, #76]	; (3868 <configure_usart+0xdc>)
    381c:	4798      	blx	r3
	setbuf(stdout, NULL);
    381e:	4e19      	ldr	r6, [pc, #100]	; (3884 <configure_usart+0xf8>)
    3820:	6833      	ldr	r3, [r6, #0]
    3822:	6898      	ldr	r0, [r3, #8]
    3824:	2100      	movs	r1, #0
    3826:	4d18      	ldr	r5, [pc, #96]	; (3888 <configure_usart+0xfc>)
    3828:	47a8      	blx	r5
	setbuf(stdin, NULL);
    382a:	6833      	ldr	r3, [r6, #0]
    382c:	6858      	ldr	r0, [r3, #4]
    382e:	2100      	movs	r1, #0
    3830:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    3832:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3834:	0028      	movs	r0, r5
    3836:	4b15      	ldr	r3, [pc, #84]	; (388c <configure_usart+0x100>)
    3838:	4798      	blx	r3
    383a:	231f      	movs	r3, #31
    383c:	4018      	ands	r0, r3
    383e:	3b1e      	subs	r3, #30
    3840:	4083      	lsls	r3, r0
    3842:	4a13      	ldr	r2, [pc, #76]	; (3890 <configure_usart+0x104>)
    3844:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3846:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    3848:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    384a:	2b00      	cmp	r3, #0
    384c:	d1fc      	bne.n	3848 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    384e:	682b      	ldr	r3, [r5, #0]
    3850:	2202      	movs	r2, #2
    3852:	4313      	orrs	r3, r2
    3854:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    3856:	b010      	add	sp, #64	; 0x40
    3858:	bd70      	pop	{r4, r5, r6, pc}
    385a:	46c0      	nop			; (mov r8, r8)
    385c:	00080003 	.word	0x00080003
    3860:	00090003 	.word	0x00090003
    3864:	2000034c 	.word	0x2000034c
    3868:	00001919 	.word	0x00001919
    386c:	42001000 	.word	0x42001000
    3870:	20000348 	.word	0x20000348
    3874:	00003711 	.word	0x00003711
    3878:	20000344 	.word	0x20000344
    387c:	000036e5 	.word	0x000036e5
    3880:	20000340 	.word	0x20000340
    3884:	20000178 	.word	0x20000178
    3888:	00004165 	.word	0x00004165
    388c:	00001889 	.word	0x00001889
    3890:	e000e100 	.word	0xe000e100

00003894 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    3894:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    3896:	4c06      	ldr	r4, [pc, #24]	; (38b0 <configure_usart_callbacks+0x1c>)
    3898:	2201      	movs	r2, #1
    389a:	4906      	ldr	r1, [pc, #24]	; (38b4 <configure_usart_callbacks+0x20>)
    389c:	0020      	movs	r0, r4
    389e:	4b06      	ldr	r3, [pc, #24]	; (38b8 <configure_usart_callbacks+0x24>)
    38a0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    38a2:	2231      	movs	r2, #49	; 0x31
    38a4:	5ca3      	ldrb	r3, [r4, r2]
    38a6:	2102      	movs	r1, #2
    38a8:	430b      	orrs	r3, r1
    38aa:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    38ac:	bd10      	pop	{r4, pc}
    38ae:	46c0      	nop			; (mov r8, r8)
    38b0:	2000034c 	.word	0x2000034c
    38b4:	000036b5 	.word	0x000036b5
    38b8:	00001d35 	.word	0x00001d35

000038bc <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    38bc:	b510      	push	{r4, lr}
    38be:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    38c0:	4668      	mov	r0, sp
    38c2:	4b16      	ldr	r3, [pc, #88]	; (391c <configure_adc+0x60>)
    38c4:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    38c6:	2301      	movs	r3, #1
    38c8:	466a      	mov	r2, sp
    38ca:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    38cc:	2380      	movs	r3, #128	; 0x80
    38ce:	009b      	lsls	r3, r3, #2
    38d0:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    38d2:	2300      	movs	r3, #0
    38d4:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    38d6:	3318      	adds	r3, #24
    38d8:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    38da:	23c0      	movs	r3, #192	; 0xc0
    38dc:	015b      	lsls	r3, r3, #5
    38de:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    38e0:	4c0f      	ldr	r4, [pc, #60]	; (3920 <configure_adc+0x64>)
    38e2:	4910      	ldr	r1, [pc, #64]	; (3924 <configure_adc+0x68>)
    38e4:	0020      	movs	r0, r4
    38e6:	4b10      	ldr	r3, [pc, #64]	; (3928 <configure_adc+0x6c>)
    38e8:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    38ea:	6822      	ldr	r2, [r4, #0]
    38ec:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    38ee:	b25b      	sxtb	r3, r3
    38f0:	2b00      	cmp	r3, #0
    38f2:	dbfb      	blt.n	38ec <configure_adc+0x30>
    38f4:	2180      	movs	r1, #128	; 0x80
    38f6:	0409      	lsls	r1, r1, #16
    38f8:	4b0c      	ldr	r3, [pc, #48]	; (392c <configure_adc+0x70>)
    38fa:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    38fc:	230f      	movs	r3, #15
    38fe:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3900:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3902:	7813      	ldrb	r3, [r2, #0]
    3904:	2102      	movs	r1, #2
    3906:	430b      	orrs	r3, r1
    3908:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    390a:	4b05      	ldr	r3, [pc, #20]	; (3920 <configure_adc+0x64>)
    390c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    390e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3910:	b25b      	sxtb	r3, r3
    3912:	2b00      	cmp	r3, #0
    3914:	dbfb      	blt.n	390e <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    3916:	b00c      	add	sp, #48	; 0x30
    3918:	bd10      	pop	{r4, pc}
    391a:	46c0      	nop			; (mov r8, r8)
    391c:	00000f81 	.word	0x00000f81
    3920:	20000b10 	.word	0x20000b10
    3924:	42004000 	.word	0x42004000
    3928:	00000fc5 	.word	0x00000fc5
    392c:	e000e100 	.word	0xe000e100

00003930 <setupBoard>:


void setupBoard(void)
{
    3930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    3932:	2000      	movs	r0, #0
    3934:	4b31      	ldr	r3, [pc, #196]	; (39fc <setupBoard+0xcc>)
    3936:	4798      	blx	r3
    3938:	b287      	uxth	r7, r0
	

	system_init();
    393a:	4b31      	ldr	r3, [pc, #196]	; (3a00 <setupBoard+0xd0>)
    393c:	4798      	blx	r3
	
	configure_adc();
    393e:	4b31      	ldr	r3, [pc, #196]	; (3a04 <setupBoard+0xd4>)
    3940:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3942:	4b31      	ldr	r3, [pc, #196]	; (3a08 <setupBoard+0xd8>)
    3944:	6819      	ldr	r1, [r3, #0]
    3946:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3948:	b25b      	sxtb	r3, r3
    394a:	2b00      	cmp	r3, #0
    394c:	dbfb      	blt.n	3946 <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    394e:	7b0b      	ldrb	r3, [r1, #12]
    3950:	2202      	movs	r2, #2
    3952:	4313      	orrs	r3, r2
    3954:	730b      	strb	r3, [r1, #12]
    3956:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3958:	b25b      	sxtb	r3, r3
    395a:	2b00      	cmp	r3, #0
    395c:	dbfb      	blt.n	3956 <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    395e:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3960:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    3962:	2502      	movs	r5, #2
    3964:	e001      	b.n	396a <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    3966:	4214      	tst	r4, r2
    3968:	d10a      	bne.n	3980 <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    396a:	7e0b      	ldrb	r3, [r1, #24]
    396c:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    396e:	0022      	movs	r2, r4
    3970:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    3972:	421e      	tst	r6, r3
    3974:	d000      	beq.n	3978 <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    3976:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3978:	421d      	tst	r5, r3
    397a:	d0f4      	beq.n	3966 <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    397c:	4332      	orrs	r2, r6
    397e:	e7f2      	b.n	3966 <setupBoard+0x36>
    3980:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3982:	b25b      	sxtb	r3, r3
    3984:	2b00      	cmp	r3, #0
    3986:	dbfb      	blt.n	3980 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    3988:	8b48      	ldrh	r0, [r1, #26]
    398a:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    398c:	2301      	movs	r3, #1
    398e:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3990:	7e0a      	ldrb	r2, [r1, #24]
    3992:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3994:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    3996:	0754      	lsls	r4, r2, #29
    3998:	d501      	bpl.n	399e <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    399a:	2402      	movs	r4, #2
    399c:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    399e:	0792      	lsls	r2, r2, #30
    39a0:	d501      	bpl.n	39a6 <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    39a2:	2204      	movs	r2, #4
    39a4:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    39a6:	075b      	lsls	r3, r3, #29
    39a8:	d501      	bpl.n	39ae <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    39aa:	2302      	movs	r3, #2
    39ac:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    39ae:	4078      	eors	r0, r7
    39b0:	4b16      	ldr	r3, [pc, #88]	; (3a0c <setupBoard+0xdc>)
    39b2:	4798      	blx	r3
	
	delay_init();
    39b4:	4b16      	ldr	r3, [pc, #88]	; (3a10 <setupBoard+0xe0>)
    39b6:	4798      	blx	r3
	
	conf_systick();
    39b8:	4c16      	ldr	r4, [pc, #88]	; (3a14 <setupBoard+0xe4>)
    39ba:	47a0      	blx	r4

	//configure_usart_USB();
	
	configure_usart();
    39bc:	4b16      	ldr	r3, [pc, #88]	; (3a18 <setupBoard+0xe8>)
    39be:	4798      	blx	r3
	configure_usart_callbacks();
    39c0:	4b16      	ldr	r3, [pc, #88]	; (3a1c <setupBoard+0xec>)
    39c2:	4798      	blx	r3
	cpu_irq_enable();
    39c4:	2201      	movs	r2, #1
    39c6:	4b16      	ldr	r3, [pc, #88]	; (3a20 <setupBoard+0xf0>)
    39c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    39ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    39ce:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    39d0:	4914      	ldr	r1, [pc, #80]	; (3a24 <setupBoard+0xf4>)
    39d2:	4815      	ldr	r0, [pc, #84]	; (3a28 <setupBoard+0xf8>)
    39d4:	4b15      	ldr	r3, [pc, #84]	; (3a2c <setupBoard+0xfc>)
    39d6:	4798      	blx	r3
	


	printf("\n\rSerial OK 9600 8N1\n\r");
    39d8:	4815      	ldr	r0, [pc, #84]	; (3a30 <setupBoard+0x100>)
    39da:	4b16      	ldr	r3, [pc, #88]	; (3a34 <setupBoard+0x104>)
    39dc:	4798      	blx	r3

	
	InitLCD();
    39de:	4b16      	ldr	r3, [pc, #88]	; (3a38 <setupBoard+0x108>)
    39e0:	4798      	blx	r3
	splashScreen();
    39e2:	4b16      	ldr	r3, [pc, #88]	; (3a3c <setupBoard+0x10c>)
    39e4:	4798      	blx	r3
			
	conf_systick();
    39e6:	47a0      	blx	r4

	xCharPos=0;
    39e8:	2300      	movs	r3, #0
    39ea:	4a15      	ldr	r2, [pc, #84]	; (3a40 <setupBoard+0x110>)
    39ec:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    39ee:	4a15      	ldr	r2, [pc, #84]	; (3a44 <setupBoard+0x114>)
    39f0:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    39f2:	20ff      	movs	r0, #255	; 0xff
    39f4:	4b14      	ldr	r3, [pc, #80]	; (3a48 <setupBoard+0x118>)
    39f6:	4798      	blx	r3
}
    39f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39fa:	46c0      	nop			; (mov r8, r8)
    39fc:	0000242d 	.word	0x0000242d
    3a00:	00002671 	.word	0x00002671
    3a04:	000038bd 	.word	0x000038bd
    3a08:	20000b10 	.word	0x20000b10
    3a0c:	0000406d 	.word	0x0000406d
    3a10:	00000e6d 	.word	0x00000e6d
    3a14:	00003739 	.word	0x00003739
    3a18:	0000378d 	.word	0x0000378d
    3a1c:	00003895 	.word	0x00003895
    3a20:	2000001c 	.word	0x2000001c
    3a24:	20000b0c 	.word	0x20000b0c
    3a28:	2000034c 	.word	0x2000034c
    3a2c:	00001d4d 	.word	0x00001d4d
    3a30:	00007388 	.word	0x00007388
    3a34:	00004011 	.word	0x00004011
    3a38:	00003469 	.word	0x00003469
    3a3c:	00000c35 	.word	0x00000c35
    3a40:	200002bc 	.word	0x200002bc
    3a44:	200002be 	.word	0x200002be
    3a48:	00002855 	.word	0x00002855

00003a4c <main>:
{
    3a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    3a4e:	4b20      	ldr	r3, [pc, #128]	; (3ad0 <main+0x84>)
    3a50:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    3a52:	200a      	movs	r0, #10
    3a54:	4b1f      	ldr	r3, [pc, #124]	; (3ad4 <main+0x88>)
    3a56:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    3a58:	210a      	movs	r1, #10
    3a5a:	4b1f      	ldr	r3, [pc, #124]	; (3ad8 <main+0x8c>)
    3a5c:	4798      	blx	r3
    3a5e:	4b1f      	ldr	r3, [pc, #124]	; (3adc <main+0x90>)
    3a60:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3a62:	4f1f      	ldr	r7, [pc, #124]	; (3ae0 <main+0x94>)
    3a64:	4e1f      	ldr	r6, [pc, #124]	; (3ae4 <main+0x98>)
    3a66:	4d20      	ldr	r5, [pc, #128]	; (3ae8 <main+0x9c>)
    3a68:	e015      	b.n	3a96 <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3a6a:	21c8      	movs	r1, #200	; 0xc8
    3a6c:	0020      	movs	r0, r4
    3a6e:	4b1d      	ldr	r3, [pc, #116]	; (3ae4 <main+0x98>)
    3a70:	4798      	blx	r3
    3a72:	b289      	uxth	r1, r1
    3a74:	2900      	cmp	r1, #0
    3a76:	d10e      	bne.n	3a96 <main+0x4a>
    3a78:	4b1c      	ldr	r3, [pc, #112]	; (3aec <main+0xa0>)
    3a7a:	781b      	ldrb	r3, [r3, #0]
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d10a      	bne.n	3a96 <main+0x4a>
			funcLock = true;
    3a80:	4c1a      	ldr	r4, [pc, #104]	; (3aec <main+0xa0>)
    3a82:	2301      	movs	r3, #1
    3a84:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    3a86:	4b1a      	ldr	r3, [pc, #104]	; (3af0 <main+0xa4>)
    3a88:	4798      	blx	r3
			printKeyboardBuffer();
    3a8a:	4b1a      	ldr	r3, [pc, #104]	; (3af4 <main+0xa8>)
    3a8c:	4798      	blx	r3
			parseRXBuffer();
    3a8e:	4b1a      	ldr	r3, [pc, #104]	; (3af8 <main+0xac>)
    3a90:	4798      	blx	r3
			funcLock = false;
    3a92:	2300      	movs	r3, #0
    3a94:	7023      	strb	r3, [r4, #0]
		__WFI();
    3a96:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3a98:	883c      	ldrh	r4, [r7, #0]
    3a9a:	0029      	movs	r1, r5
    3a9c:	0020      	movs	r0, r4
    3a9e:	47b0      	blx	r6
    3aa0:	b289      	uxth	r1, r1
    3aa2:	2900      	cmp	r1, #0
    3aa4:	d1e1      	bne.n	3a6a <main+0x1e>
    3aa6:	4b11      	ldr	r3, [pc, #68]	; (3aec <main+0xa0>)
    3aa8:	781b      	ldrb	r3, [r3, #0]
    3aaa:	2b00      	cmp	r3, #0
    3aac:	d1f3      	bne.n	3a96 <main+0x4a>
			funcLock = true;
    3aae:	4c0f      	ldr	r4, [pc, #60]	; (3aec <main+0xa0>)
    3ab0:	3301      	adds	r3, #1
    3ab2:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    3ab4:	4b11      	ldr	r3, [pc, #68]	; (3afc <main+0xb0>)
    3ab6:	4798      	blx	r3
			funcLock = false;
    3ab8:	2300      	movs	r3, #0
    3aba:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3abc:	4b08      	ldr	r3, [pc, #32]	; (3ae0 <main+0x94>)
    3abe:	8818      	ldrh	r0, [r3, #0]
    3ac0:	21c8      	movs	r1, #200	; 0xc8
    3ac2:	4b08      	ldr	r3, [pc, #32]	; (3ae4 <main+0x98>)
    3ac4:	4798      	blx	r3
    3ac6:	b289      	uxth	r1, r1
    3ac8:	2900      	cmp	r1, #0
    3aca:	d0d9      	beq.n	3a80 <main+0x34>
    3acc:	e7e3      	b.n	3a96 <main+0x4a>
    3ace:	46c0      	nop			; (mov r8, r8)
    3ad0:	00003931 	.word	0x00003931
    3ad4:	00003e89 	.word	0x00003e89
    3ad8:	00000115 	.word	0x00000115
    3adc:	20000320 	.word	0x20000320
    3ae0:	200002c4 	.word	0x200002c4
    3ae4:	00003c0d 	.word	0x00003c0d
    3ae8:	00003fff 	.word	0x00003fff
    3aec:	200002c2 	.word	0x200002c2
    3af0:	00002fb5 	.word	0x00002fb5
    3af4:	00002c1d 	.word	0x00002c1d
    3af8:	00000e19 	.word	0x00000e19
    3afc:	0000293d 	.word	0x0000293d

00003b00 <__udivsi3>:
    3b00:	2200      	movs	r2, #0
    3b02:	0843      	lsrs	r3, r0, #1
    3b04:	428b      	cmp	r3, r1
    3b06:	d374      	bcc.n	3bf2 <__udivsi3+0xf2>
    3b08:	0903      	lsrs	r3, r0, #4
    3b0a:	428b      	cmp	r3, r1
    3b0c:	d35f      	bcc.n	3bce <__udivsi3+0xce>
    3b0e:	0a03      	lsrs	r3, r0, #8
    3b10:	428b      	cmp	r3, r1
    3b12:	d344      	bcc.n	3b9e <__udivsi3+0x9e>
    3b14:	0b03      	lsrs	r3, r0, #12
    3b16:	428b      	cmp	r3, r1
    3b18:	d328      	bcc.n	3b6c <__udivsi3+0x6c>
    3b1a:	0c03      	lsrs	r3, r0, #16
    3b1c:	428b      	cmp	r3, r1
    3b1e:	d30d      	bcc.n	3b3c <__udivsi3+0x3c>
    3b20:	22ff      	movs	r2, #255	; 0xff
    3b22:	0209      	lsls	r1, r1, #8
    3b24:	ba12      	rev	r2, r2
    3b26:	0c03      	lsrs	r3, r0, #16
    3b28:	428b      	cmp	r3, r1
    3b2a:	d302      	bcc.n	3b32 <__udivsi3+0x32>
    3b2c:	1212      	asrs	r2, r2, #8
    3b2e:	0209      	lsls	r1, r1, #8
    3b30:	d065      	beq.n	3bfe <__udivsi3+0xfe>
    3b32:	0b03      	lsrs	r3, r0, #12
    3b34:	428b      	cmp	r3, r1
    3b36:	d319      	bcc.n	3b6c <__udivsi3+0x6c>
    3b38:	e000      	b.n	3b3c <__udivsi3+0x3c>
    3b3a:	0a09      	lsrs	r1, r1, #8
    3b3c:	0bc3      	lsrs	r3, r0, #15
    3b3e:	428b      	cmp	r3, r1
    3b40:	d301      	bcc.n	3b46 <__udivsi3+0x46>
    3b42:	03cb      	lsls	r3, r1, #15
    3b44:	1ac0      	subs	r0, r0, r3
    3b46:	4152      	adcs	r2, r2
    3b48:	0b83      	lsrs	r3, r0, #14
    3b4a:	428b      	cmp	r3, r1
    3b4c:	d301      	bcc.n	3b52 <__udivsi3+0x52>
    3b4e:	038b      	lsls	r3, r1, #14
    3b50:	1ac0      	subs	r0, r0, r3
    3b52:	4152      	adcs	r2, r2
    3b54:	0b43      	lsrs	r3, r0, #13
    3b56:	428b      	cmp	r3, r1
    3b58:	d301      	bcc.n	3b5e <__udivsi3+0x5e>
    3b5a:	034b      	lsls	r3, r1, #13
    3b5c:	1ac0      	subs	r0, r0, r3
    3b5e:	4152      	adcs	r2, r2
    3b60:	0b03      	lsrs	r3, r0, #12
    3b62:	428b      	cmp	r3, r1
    3b64:	d301      	bcc.n	3b6a <__udivsi3+0x6a>
    3b66:	030b      	lsls	r3, r1, #12
    3b68:	1ac0      	subs	r0, r0, r3
    3b6a:	4152      	adcs	r2, r2
    3b6c:	0ac3      	lsrs	r3, r0, #11
    3b6e:	428b      	cmp	r3, r1
    3b70:	d301      	bcc.n	3b76 <__udivsi3+0x76>
    3b72:	02cb      	lsls	r3, r1, #11
    3b74:	1ac0      	subs	r0, r0, r3
    3b76:	4152      	adcs	r2, r2
    3b78:	0a83      	lsrs	r3, r0, #10
    3b7a:	428b      	cmp	r3, r1
    3b7c:	d301      	bcc.n	3b82 <__udivsi3+0x82>
    3b7e:	028b      	lsls	r3, r1, #10
    3b80:	1ac0      	subs	r0, r0, r3
    3b82:	4152      	adcs	r2, r2
    3b84:	0a43      	lsrs	r3, r0, #9
    3b86:	428b      	cmp	r3, r1
    3b88:	d301      	bcc.n	3b8e <__udivsi3+0x8e>
    3b8a:	024b      	lsls	r3, r1, #9
    3b8c:	1ac0      	subs	r0, r0, r3
    3b8e:	4152      	adcs	r2, r2
    3b90:	0a03      	lsrs	r3, r0, #8
    3b92:	428b      	cmp	r3, r1
    3b94:	d301      	bcc.n	3b9a <__udivsi3+0x9a>
    3b96:	020b      	lsls	r3, r1, #8
    3b98:	1ac0      	subs	r0, r0, r3
    3b9a:	4152      	adcs	r2, r2
    3b9c:	d2cd      	bcs.n	3b3a <__udivsi3+0x3a>
    3b9e:	09c3      	lsrs	r3, r0, #7
    3ba0:	428b      	cmp	r3, r1
    3ba2:	d301      	bcc.n	3ba8 <__udivsi3+0xa8>
    3ba4:	01cb      	lsls	r3, r1, #7
    3ba6:	1ac0      	subs	r0, r0, r3
    3ba8:	4152      	adcs	r2, r2
    3baa:	0983      	lsrs	r3, r0, #6
    3bac:	428b      	cmp	r3, r1
    3bae:	d301      	bcc.n	3bb4 <__udivsi3+0xb4>
    3bb0:	018b      	lsls	r3, r1, #6
    3bb2:	1ac0      	subs	r0, r0, r3
    3bb4:	4152      	adcs	r2, r2
    3bb6:	0943      	lsrs	r3, r0, #5
    3bb8:	428b      	cmp	r3, r1
    3bba:	d301      	bcc.n	3bc0 <__udivsi3+0xc0>
    3bbc:	014b      	lsls	r3, r1, #5
    3bbe:	1ac0      	subs	r0, r0, r3
    3bc0:	4152      	adcs	r2, r2
    3bc2:	0903      	lsrs	r3, r0, #4
    3bc4:	428b      	cmp	r3, r1
    3bc6:	d301      	bcc.n	3bcc <__udivsi3+0xcc>
    3bc8:	010b      	lsls	r3, r1, #4
    3bca:	1ac0      	subs	r0, r0, r3
    3bcc:	4152      	adcs	r2, r2
    3bce:	08c3      	lsrs	r3, r0, #3
    3bd0:	428b      	cmp	r3, r1
    3bd2:	d301      	bcc.n	3bd8 <__udivsi3+0xd8>
    3bd4:	00cb      	lsls	r3, r1, #3
    3bd6:	1ac0      	subs	r0, r0, r3
    3bd8:	4152      	adcs	r2, r2
    3bda:	0883      	lsrs	r3, r0, #2
    3bdc:	428b      	cmp	r3, r1
    3bde:	d301      	bcc.n	3be4 <__udivsi3+0xe4>
    3be0:	008b      	lsls	r3, r1, #2
    3be2:	1ac0      	subs	r0, r0, r3
    3be4:	4152      	adcs	r2, r2
    3be6:	0843      	lsrs	r3, r0, #1
    3be8:	428b      	cmp	r3, r1
    3bea:	d301      	bcc.n	3bf0 <__udivsi3+0xf0>
    3bec:	004b      	lsls	r3, r1, #1
    3bee:	1ac0      	subs	r0, r0, r3
    3bf0:	4152      	adcs	r2, r2
    3bf2:	1a41      	subs	r1, r0, r1
    3bf4:	d200      	bcs.n	3bf8 <__udivsi3+0xf8>
    3bf6:	4601      	mov	r1, r0
    3bf8:	4152      	adcs	r2, r2
    3bfa:	4610      	mov	r0, r2
    3bfc:	4770      	bx	lr
    3bfe:	e7ff      	b.n	3c00 <__udivsi3+0x100>
    3c00:	b501      	push	{r0, lr}
    3c02:	2000      	movs	r0, #0
    3c04:	f000 f8f0 	bl	3de8 <__aeabi_idiv0>
    3c08:	bd02      	pop	{r1, pc}
    3c0a:	46c0      	nop			; (mov r8, r8)

00003c0c <__aeabi_uidivmod>:
    3c0c:	2900      	cmp	r1, #0
    3c0e:	d0f7      	beq.n	3c00 <__udivsi3+0x100>
    3c10:	e776      	b.n	3b00 <__udivsi3>
    3c12:	4770      	bx	lr

00003c14 <__divsi3>:
    3c14:	4603      	mov	r3, r0
    3c16:	430b      	orrs	r3, r1
    3c18:	d47f      	bmi.n	3d1a <__divsi3+0x106>
    3c1a:	2200      	movs	r2, #0
    3c1c:	0843      	lsrs	r3, r0, #1
    3c1e:	428b      	cmp	r3, r1
    3c20:	d374      	bcc.n	3d0c <__divsi3+0xf8>
    3c22:	0903      	lsrs	r3, r0, #4
    3c24:	428b      	cmp	r3, r1
    3c26:	d35f      	bcc.n	3ce8 <__divsi3+0xd4>
    3c28:	0a03      	lsrs	r3, r0, #8
    3c2a:	428b      	cmp	r3, r1
    3c2c:	d344      	bcc.n	3cb8 <__divsi3+0xa4>
    3c2e:	0b03      	lsrs	r3, r0, #12
    3c30:	428b      	cmp	r3, r1
    3c32:	d328      	bcc.n	3c86 <__divsi3+0x72>
    3c34:	0c03      	lsrs	r3, r0, #16
    3c36:	428b      	cmp	r3, r1
    3c38:	d30d      	bcc.n	3c56 <__divsi3+0x42>
    3c3a:	22ff      	movs	r2, #255	; 0xff
    3c3c:	0209      	lsls	r1, r1, #8
    3c3e:	ba12      	rev	r2, r2
    3c40:	0c03      	lsrs	r3, r0, #16
    3c42:	428b      	cmp	r3, r1
    3c44:	d302      	bcc.n	3c4c <__divsi3+0x38>
    3c46:	1212      	asrs	r2, r2, #8
    3c48:	0209      	lsls	r1, r1, #8
    3c4a:	d065      	beq.n	3d18 <__divsi3+0x104>
    3c4c:	0b03      	lsrs	r3, r0, #12
    3c4e:	428b      	cmp	r3, r1
    3c50:	d319      	bcc.n	3c86 <__divsi3+0x72>
    3c52:	e000      	b.n	3c56 <__divsi3+0x42>
    3c54:	0a09      	lsrs	r1, r1, #8
    3c56:	0bc3      	lsrs	r3, r0, #15
    3c58:	428b      	cmp	r3, r1
    3c5a:	d301      	bcc.n	3c60 <__divsi3+0x4c>
    3c5c:	03cb      	lsls	r3, r1, #15
    3c5e:	1ac0      	subs	r0, r0, r3
    3c60:	4152      	adcs	r2, r2
    3c62:	0b83      	lsrs	r3, r0, #14
    3c64:	428b      	cmp	r3, r1
    3c66:	d301      	bcc.n	3c6c <__divsi3+0x58>
    3c68:	038b      	lsls	r3, r1, #14
    3c6a:	1ac0      	subs	r0, r0, r3
    3c6c:	4152      	adcs	r2, r2
    3c6e:	0b43      	lsrs	r3, r0, #13
    3c70:	428b      	cmp	r3, r1
    3c72:	d301      	bcc.n	3c78 <__divsi3+0x64>
    3c74:	034b      	lsls	r3, r1, #13
    3c76:	1ac0      	subs	r0, r0, r3
    3c78:	4152      	adcs	r2, r2
    3c7a:	0b03      	lsrs	r3, r0, #12
    3c7c:	428b      	cmp	r3, r1
    3c7e:	d301      	bcc.n	3c84 <__divsi3+0x70>
    3c80:	030b      	lsls	r3, r1, #12
    3c82:	1ac0      	subs	r0, r0, r3
    3c84:	4152      	adcs	r2, r2
    3c86:	0ac3      	lsrs	r3, r0, #11
    3c88:	428b      	cmp	r3, r1
    3c8a:	d301      	bcc.n	3c90 <__divsi3+0x7c>
    3c8c:	02cb      	lsls	r3, r1, #11
    3c8e:	1ac0      	subs	r0, r0, r3
    3c90:	4152      	adcs	r2, r2
    3c92:	0a83      	lsrs	r3, r0, #10
    3c94:	428b      	cmp	r3, r1
    3c96:	d301      	bcc.n	3c9c <__divsi3+0x88>
    3c98:	028b      	lsls	r3, r1, #10
    3c9a:	1ac0      	subs	r0, r0, r3
    3c9c:	4152      	adcs	r2, r2
    3c9e:	0a43      	lsrs	r3, r0, #9
    3ca0:	428b      	cmp	r3, r1
    3ca2:	d301      	bcc.n	3ca8 <__divsi3+0x94>
    3ca4:	024b      	lsls	r3, r1, #9
    3ca6:	1ac0      	subs	r0, r0, r3
    3ca8:	4152      	adcs	r2, r2
    3caa:	0a03      	lsrs	r3, r0, #8
    3cac:	428b      	cmp	r3, r1
    3cae:	d301      	bcc.n	3cb4 <__divsi3+0xa0>
    3cb0:	020b      	lsls	r3, r1, #8
    3cb2:	1ac0      	subs	r0, r0, r3
    3cb4:	4152      	adcs	r2, r2
    3cb6:	d2cd      	bcs.n	3c54 <__divsi3+0x40>
    3cb8:	09c3      	lsrs	r3, r0, #7
    3cba:	428b      	cmp	r3, r1
    3cbc:	d301      	bcc.n	3cc2 <__divsi3+0xae>
    3cbe:	01cb      	lsls	r3, r1, #7
    3cc0:	1ac0      	subs	r0, r0, r3
    3cc2:	4152      	adcs	r2, r2
    3cc4:	0983      	lsrs	r3, r0, #6
    3cc6:	428b      	cmp	r3, r1
    3cc8:	d301      	bcc.n	3cce <__divsi3+0xba>
    3cca:	018b      	lsls	r3, r1, #6
    3ccc:	1ac0      	subs	r0, r0, r3
    3cce:	4152      	adcs	r2, r2
    3cd0:	0943      	lsrs	r3, r0, #5
    3cd2:	428b      	cmp	r3, r1
    3cd4:	d301      	bcc.n	3cda <__divsi3+0xc6>
    3cd6:	014b      	lsls	r3, r1, #5
    3cd8:	1ac0      	subs	r0, r0, r3
    3cda:	4152      	adcs	r2, r2
    3cdc:	0903      	lsrs	r3, r0, #4
    3cde:	428b      	cmp	r3, r1
    3ce0:	d301      	bcc.n	3ce6 <__divsi3+0xd2>
    3ce2:	010b      	lsls	r3, r1, #4
    3ce4:	1ac0      	subs	r0, r0, r3
    3ce6:	4152      	adcs	r2, r2
    3ce8:	08c3      	lsrs	r3, r0, #3
    3cea:	428b      	cmp	r3, r1
    3cec:	d301      	bcc.n	3cf2 <__divsi3+0xde>
    3cee:	00cb      	lsls	r3, r1, #3
    3cf0:	1ac0      	subs	r0, r0, r3
    3cf2:	4152      	adcs	r2, r2
    3cf4:	0883      	lsrs	r3, r0, #2
    3cf6:	428b      	cmp	r3, r1
    3cf8:	d301      	bcc.n	3cfe <__divsi3+0xea>
    3cfa:	008b      	lsls	r3, r1, #2
    3cfc:	1ac0      	subs	r0, r0, r3
    3cfe:	4152      	adcs	r2, r2
    3d00:	0843      	lsrs	r3, r0, #1
    3d02:	428b      	cmp	r3, r1
    3d04:	d301      	bcc.n	3d0a <__divsi3+0xf6>
    3d06:	004b      	lsls	r3, r1, #1
    3d08:	1ac0      	subs	r0, r0, r3
    3d0a:	4152      	adcs	r2, r2
    3d0c:	1a41      	subs	r1, r0, r1
    3d0e:	d200      	bcs.n	3d12 <__divsi3+0xfe>
    3d10:	4601      	mov	r1, r0
    3d12:	4152      	adcs	r2, r2
    3d14:	4610      	mov	r0, r2
    3d16:	4770      	bx	lr
    3d18:	e05d      	b.n	3dd6 <__divsi3+0x1c2>
    3d1a:	0fca      	lsrs	r2, r1, #31
    3d1c:	d000      	beq.n	3d20 <__divsi3+0x10c>
    3d1e:	4249      	negs	r1, r1
    3d20:	1003      	asrs	r3, r0, #32
    3d22:	d300      	bcc.n	3d26 <__divsi3+0x112>
    3d24:	4240      	negs	r0, r0
    3d26:	4053      	eors	r3, r2
    3d28:	2200      	movs	r2, #0
    3d2a:	469c      	mov	ip, r3
    3d2c:	0903      	lsrs	r3, r0, #4
    3d2e:	428b      	cmp	r3, r1
    3d30:	d32d      	bcc.n	3d8e <__divsi3+0x17a>
    3d32:	0a03      	lsrs	r3, r0, #8
    3d34:	428b      	cmp	r3, r1
    3d36:	d312      	bcc.n	3d5e <__divsi3+0x14a>
    3d38:	22fc      	movs	r2, #252	; 0xfc
    3d3a:	0189      	lsls	r1, r1, #6
    3d3c:	ba12      	rev	r2, r2
    3d3e:	0a03      	lsrs	r3, r0, #8
    3d40:	428b      	cmp	r3, r1
    3d42:	d30c      	bcc.n	3d5e <__divsi3+0x14a>
    3d44:	0189      	lsls	r1, r1, #6
    3d46:	1192      	asrs	r2, r2, #6
    3d48:	428b      	cmp	r3, r1
    3d4a:	d308      	bcc.n	3d5e <__divsi3+0x14a>
    3d4c:	0189      	lsls	r1, r1, #6
    3d4e:	1192      	asrs	r2, r2, #6
    3d50:	428b      	cmp	r3, r1
    3d52:	d304      	bcc.n	3d5e <__divsi3+0x14a>
    3d54:	0189      	lsls	r1, r1, #6
    3d56:	d03a      	beq.n	3dce <__divsi3+0x1ba>
    3d58:	1192      	asrs	r2, r2, #6
    3d5a:	e000      	b.n	3d5e <__divsi3+0x14a>
    3d5c:	0989      	lsrs	r1, r1, #6
    3d5e:	09c3      	lsrs	r3, r0, #7
    3d60:	428b      	cmp	r3, r1
    3d62:	d301      	bcc.n	3d68 <__divsi3+0x154>
    3d64:	01cb      	lsls	r3, r1, #7
    3d66:	1ac0      	subs	r0, r0, r3
    3d68:	4152      	adcs	r2, r2
    3d6a:	0983      	lsrs	r3, r0, #6
    3d6c:	428b      	cmp	r3, r1
    3d6e:	d301      	bcc.n	3d74 <__divsi3+0x160>
    3d70:	018b      	lsls	r3, r1, #6
    3d72:	1ac0      	subs	r0, r0, r3
    3d74:	4152      	adcs	r2, r2
    3d76:	0943      	lsrs	r3, r0, #5
    3d78:	428b      	cmp	r3, r1
    3d7a:	d301      	bcc.n	3d80 <__divsi3+0x16c>
    3d7c:	014b      	lsls	r3, r1, #5
    3d7e:	1ac0      	subs	r0, r0, r3
    3d80:	4152      	adcs	r2, r2
    3d82:	0903      	lsrs	r3, r0, #4
    3d84:	428b      	cmp	r3, r1
    3d86:	d301      	bcc.n	3d8c <__divsi3+0x178>
    3d88:	010b      	lsls	r3, r1, #4
    3d8a:	1ac0      	subs	r0, r0, r3
    3d8c:	4152      	adcs	r2, r2
    3d8e:	08c3      	lsrs	r3, r0, #3
    3d90:	428b      	cmp	r3, r1
    3d92:	d301      	bcc.n	3d98 <__divsi3+0x184>
    3d94:	00cb      	lsls	r3, r1, #3
    3d96:	1ac0      	subs	r0, r0, r3
    3d98:	4152      	adcs	r2, r2
    3d9a:	0883      	lsrs	r3, r0, #2
    3d9c:	428b      	cmp	r3, r1
    3d9e:	d301      	bcc.n	3da4 <__divsi3+0x190>
    3da0:	008b      	lsls	r3, r1, #2
    3da2:	1ac0      	subs	r0, r0, r3
    3da4:	4152      	adcs	r2, r2
    3da6:	d2d9      	bcs.n	3d5c <__divsi3+0x148>
    3da8:	0843      	lsrs	r3, r0, #1
    3daa:	428b      	cmp	r3, r1
    3dac:	d301      	bcc.n	3db2 <__divsi3+0x19e>
    3dae:	004b      	lsls	r3, r1, #1
    3db0:	1ac0      	subs	r0, r0, r3
    3db2:	4152      	adcs	r2, r2
    3db4:	1a41      	subs	r1, r0, r1
    3db6:	d200      	bcs.n	3dba <__divsi3+0x1a6>
    3db8:	4601      	mov	r1, r0
    3dba:	4663      	mov	r3, ip
    3dbc:	4152      	adcs	r2, r2
    3dbe:	105b      	asrs	r3, r3, #1
    3dc0:	4610      	mov	r0, r2
    3dc2:	d301      	bcc.n	3dc8 <__divsi3+0x1b4>
    3dc4:	4240      	negs	r0, r0
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d500      	bpl.n	3dcc <__divsi3+0x1b8>
    3dca:	4249      	negs	r1, r1
    3dcc:	4770      	bx	lr
    3dce:	4663      	mov	r3, ip
    3dd0:	105b      	asrs	r3, r3, #1
    3dd2:	d300      	bcc.n	3dd6 <__divsi3+0x1c2>
    3dd4:	4240      	negs	r0, r0
    3dd6:	b501      	push	{r0, lr}
    3dd8:	2000      	movs	r0, #0
    3dda:	f000 f805 	bl	3de8 <__aeabi_idiv0>
    3dde:	bd02      	pop	{r1, pc}

00003de0 <__aeabi_idivmod>:
    3de0:	2900      	cmp	r1, #0
    3de2:	d0f8      	beq.n	3dd6 <__divsi3+0x1c2>
    3de4:	e716      	b.n	3c14 <__divsi3>
    3de6:	4770      	bx	lr

00003de8 <__aeabi_idiv0>:
    3de8:	4770      	bx	lr
    3dea:	46c0      	nop			; (mov r8, r8)

00003dec <__aeabi_lmul>:
    3dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dee:	46ce      	mov	lr, r9
    3df0:	4647      	mov	r7, r8
    3df2:	0415      	lsls	r5, r2, #16
    3df4:	0c2d      	lsrs	r5, r5, #16
    3df6:	002e      	movs	r6, r5
    3df8:	b580      	push	{r7, lr}
    3dfa:	0407      	lsls	r7, r0, #16
    3dfc:	0c14      	lsrs	r4, r2, #16
    3dfe:	0c3f      	lsrs	r7, r7, #16
    3e00:	4699      	mov	r9, r3
    3e02:	0c03      	lsrs	r3, r0, #16
    3e04:	437e      	muls	r6, r7
    3e06:	435d      	muls	r5, r3
    3e08:	4367      	muls	r7, r4
    3e0a:	4363      	muls	r3, r4
    3e0c:	197f      	adds	r7, r7, r5
    3e0e:	0c34      	lsrs	r4, r6, #16
    3e10:	19e4      	adds	r4, r4, r7
    3e12:	469c      	mov	ip, r3
    3e14:	42a5      	cmp	r5, r4
    3e16:	d903      	bls.n	3e20 <__aeabi_lmul+0x34>
    3e18:	2380      	movs	r3, #128	; 0x80
    3e1a:	025b      	lsls	r3, r3, #9
    3e1c:	4698      	mov	r8, r3
    3e1e:	44c4      	add	ip, r8
    3e20:	464b      	mov	r3, r9
    3e22:	4351      	muls	r1, r2
    3e24:	4343      	muls	r3, r0
    3e26:	0436      	lsls	r6, r6, #16
    3e28:	0c36      	lsrs	r6, r6, #16
    3e2a:	0c25      	lsrs	r5, r4, #16
    3e2c:	0424      	lsls	r4, r4, #16
    3e2e:	4465      	add	r5, ip
    3e30:	19a4      	adds	r4, r4, r6
    3e32:	1859      	adds	r1, r3, r1
    3e34:	1949      	adds	r1, r1, r5
    3e36:	0020      	movs	r0, r4
    3e38:	bc0c      	pop	{r2, r3}
    3e3a:	4690      	mov	r8, r2
    3e3c:	4699      	mov	r9, r3
    3e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003e40 <__libc_init_array>:
    3e40:	b570      	push	{r4, r5, r6, lr}
    3e42:	2600      	movs	r6, #0
    3e44:	4d0c      	ldr	r5, [pc, #48]	; (3e78 <__libc_init_array+0x38>)
    3e46:	4c0d      	ldr	r4, [pc, #52]	; (3e7c <__libc_init_array+0x3c>)
    3e48:	1b64      	subs	r4, r4, r5
    3e4a:	10a4      	asrs	r4, r4, #2
    3e4c:	42a6      	cmp	r6, r4
    3e4e:	d109      	bne.n	3e64 <__libc_init_array+0x24>
    3e50:	2600      	movs	r6, #0
    3e52:	f003 faf1 	bl	7438 <_init>
    3e56:	4d0a      	ldr	r5, [pc, #40]	; (3e80 <__libc_init_array+0x40>)
    3e58:	4c0a      	ldr	r4, [pc, #40]	; (3e84 <__libc_init_array+0x44>)
    3e5a:	1b64      	subs	r4, r4, r5
    3e5c:	10a4      	asrs	r4, r4, #2
    3e5e:	42a6      	cmp	r6, r4
    3e60:	d105      	bne.n	3e6e <__libc_init_array+0x2e>
    3e62:	bd70      	pop	{r4, r5, r6, pc}
    3e64:	00b3      	lsls	r3, r6, #2
    3e66:	58eb      	ldr	r3, [r5, r3]
    3e68:	4798      	blx	r3
    3e6a:	3601      	adds	r6, #1
    3e6c:	e7ee      	b.n	3e4c <__libc_init_array+0xc>
    3e6e:	00b3      	lsls	r3, r6, #2
    3e70:	58eb      	ldr	r3, [r5, r3]
    3e72:	4798      	blx	r3
    3e74:	3601      	adds	r6, #1
    3e76:	e7f2      	b.n	3e5e <__libc_init_array+0x1e>
    3e78:	00007444 	.word	0x00007444
    3e7c:	00007444 	.word	0x00007444
    3e80:	00007444 	.word	0x00007444
    3e84:	00007448 	.word	0x00007448

00003e88 <malloc>:
    3e88:	b510      	push	{r4, lr}
    3e8a:	4b03      	ldr	r3, [pc, #12]	; (3e98 <malloc+0x10>)
    3e8c:	0001      	movs	r1, r0
    3e8e:	6818      	ldr	r0, [r3, #0]
    3e90:	f000 f860 	bl	3f54 <_malloc_r>
    3e94:	bd10      	pop	{r4, pc}
    3e96:	46c0      	nop			; (mov r8, r8)
    3e98:	20000178 	.word	0x20000178

00003e9c <memcpy>:
    3e9c:	2300      	movs	r3, #0
    3e9e:	b510      	push	{r4, lr}
    3ea0:	429a      	cmp	r2, r3
    3ea2:	d100      	bne.n	3ea6 <memcpy+0xa>
    3ea4:	bd10      	pop	{r4, pc}
    3ea6:	5ccc      	ldrb	r4, [r1, r3]
    3ea8:	54c4      	strb	r4, [r0, r3]
    3eaa:	3301      	adds	r3, #1
    3eac:	e7f8      	b.n	3ea0 <memcpy+0x4>

00003eae <memset>:
    3eae:	0003      	movs	r3, r0
    3eb0:	1882      	adds	r2, r0, r2
    3eb2:	4293      	cmp	r3, r2
    3eb4:	d100      	bne.n	3eb8 <memset+0xa>
    3eb6:	4770      	bx	lr
    3eb8:	7019      	strb	r1, [r3, #0]
    3eba:	3301      	adds	r3, #1
    3ebc:	e7f9      	b.n	3eb2 <memset+0x4>
	...

00003ec0 <_free_r>:
    3ec0:	b570      	push	{r4, r5, r6, lr}
    3ec2:	0005      	movs	r5, r0
    3ec4:	2900      	cmp	r1, #0
    3ec6:	d010      	beq.n	3eea <_free_r+0x2a>
    3ec8:	1f0c      	subs	r4, r1, #4
    3eca:	6823      	ldr	r3, [r4, #0]
    3ecc:	2b00      	cmp	r3, #0
    3ece:	da00      	bge.n	3ed2 <_free_r+0x12>
    3ed0:	18e4      	adds	r4, r4, r3
    3ed2:	0028      	movs	r0, r5
    3ed4:	f000 fbfe 	bl	46d4 <__malloc_lock>
    3ed8:	4a1d      	ldr	r2, [pc, #116]	; (3f50 <_free_r+0x90>)
    3eda:	6813      	ldr	r3, [r2, #0]
    3edc:	2b00      	cmp	r3, #0
    3ede:	d105      	bne.n	3eec <_free_r+0x2c>
    3ee0:	6063      	str	r3, [r4, #4]
    3ee2:	6014      	str	r4, [r2, #0]
    3ee4:	0028      	movs	r0, r5
    3ee6:	f000 fbf6 	bl	46d6 <__malloc_unlock>
    3eea:	bd70      	pop	{r4, r5, r6, pc}
    3eec:	42a3      	cmp	r3, r4
    3eee:	d909      	bls.n	3f04 <_free_r+0x44>
    3ef0:	6821      	ldr	r1, [r4, #0]
    3ef2:	1860      	adds	r0, r4, r1
    3ef4:	4283      	cmp	r3, r0
    3ef6:	d1f3      	bne.n	3ee0 <_free_r+0x20>
    3ef8:	6818      	ldr	r0, [r3, #0]
    3efa:	685b      	ldr	r3, [r3, #4]
    3efc:	1841      	adds	r1, r0, r1
    3efe:	6021      	str	r1, [r4, #0]
    3f00:	e7ee      	b.n	3ee0 <_free_r+0x20>
    3f02:	0013      	movs	r3, r2
    3f04:	685a      	ldr	r2, [r3, #4]
    3f06:	2a00      	cmp	r2, #0
    3f08:	d001      	beq.n	3f0e <_free_r+0x4e>
    3f0a:	42a2      	cmp	r2, r4
    3f0c:	d9f9      	bls.n	3f02 <_free_r+0x42>
    3f0e:	6819      	ldr	r1, [r3, #0]
    3f10:	1858      	adds	r0, r3, r1
    3f12:	42a0      	cmp	r0, r4
    3f14:	d10b      	bne.n	3f2e <_free_r+0x6e>
    3f16:	6820      	ldr	r0, [r4, #0]
    3f18:	1809      	adds	r1, r1, r0
    3f1a:	1858      	adds	r0, r3, r1
    3f1c:	6019      	str	r1, [r3, #0]
    3f1e:	4282      	cmp	r2, r0
    3f20:	d1e0      	bne.n	3ee4 <_free_r+0x24>
    3f22:	6810      	ldr	r0, [r2, #0]
    3f24:	6852      	ldr	r2, [r2, #4]
    3f26:	1841      	adds	r1, r0, r1
    3f28:	6019      	str	r1, [r3, #0]
    3f2a:	605a      	str	r2, [r3, #4]
    3f2c:	e7da      	b.n	3ee4 <_free_r+0x24>
    3f2e:	42a0      	cmp	r0, r4
    3f30:	d902      	bls.n	3f38 <_free_r+0x78>
    3f32:	230c      	movs	r3, #12
    3f34:	602b      	str	r3, [r5, #0]
    3f36:	e7d5      	b.n	3ee4 <_free_r+0x24>
    3f38:	6821      	ldr	r1, [r4, #0]
    3f3a:	1860      	adds	r0, r4, r1
    3f3c:	4282      	cmp	r2, r0
    3f3e:	d103      	bne.n	3f48 <_free_r+0x88>
    3f40:	6810      	ldr	r0, [r2, #0]
    3f42:	6852      	ldr	r2, [r2, #4]
    3f44:	1841      	adds	r1, r0, r1
    3f46:	6021      	str	r1, [r4, #0]
    3f48:	6062      	str	r2, [r4, #4]
    3f4a:	605c      	str	r4, [r3, #4]
    3f4c:	e7ca      	b.n	3ee4 <_free_r+0x24>
    3f4e:	46c0      	nop			; (mov r8, r8)
    3f50:	200002c8 	.word	0x200002c8

00003f54 <_malloc_r>:
    3f54:	2303      	movs	r3, #3
    3f56:	b570      	push	{r4, r5, r6, lr}
    3f58:	1ccd      	adds	r5, r1, #3
    3f5a:	439d      	bics	r5, r3
    3f5c:	3508      	adds	r5, #8
    3f5e:	0006      	movs	r6, r0
    3f60:	2d0c      	cmp	r5, #12
    3f62:	d21e      	bcs.n	3fa2 <_malloc_r+0x4e>
    3f64:	250c      	movs	r5, #12
    3f66:	42a9      	cmp	r1, r5
    3f68:	d81d      	bhi.n	3fa6 <_malloc_r+0x52>
    3f6a:	0030      	movs	r0, r6
    3f6c:	f000 fbb2 	bl	46d4 <__malloc_lock>
    3f70:	4a25      	ldr	r2, [pc, #148]	; (4008 <_malloc_r+0xb4>)
    3f72:	6814      	ldr	r4, [r2, #0]
    3f74:	0021      	movs	r1, r4
    3f76:	2900      	cmp	r1, #0
    3f78:	d119      	bne.n	3fae <_malloc_r+0x5a>
    3f7a:	4c24      	ldr	r4, [pc, #144]	; (400c <_malloc_r+0xb8>)
    3f7c:	6823      	ldr	r3, [r4, #0]
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d103      	bne.n	3f8a <_malloc_r+0x36>
    3f82:	0030      	movs	r0, r6
    3f84:	f000 f8dc 	bl	4140 <_sbrk_r>
    3f88:	6020      	str	r0, [r4, #0]
    3f8a:	0029      	movs	r1, r5
    3f8c:	0030      	movs	r0, r6
    3f8e:	f000 f8d7 	bl	4140 <_sbrk_r>
    3f92:	1c43      	adds	r3, r0, #1
    3f94:	d12c      	bne.n	3ff0 <_malloc_r+0x9c>
    3f96:	230c      	movs	r3, #12
    3f98:	0030      	movs	r0, r6
    3f9a:	6033      	str	r3, [r6, #0]
    3f9c:	f000 fb9b 	bl	46d6 <__malloc_unlock>
    3fa0:	e003      	b.n	3faa <_malloc_r+0x56>
    3fa2:	2d00      	cmp	r5, #0
    3fa4:	dadf      	bge.n	3f66 <_malloc_r+0x12>
    3fa6:	230c      	movs	r3, #12
    3fa8:	6033      	str	r3, [r6, #0]
    3faa:	2000      	movs	r0, #0
    3fac:	bd70      	pop	{r4, r5, r6, pc}
    3fae:	680b      	ldr	r3, [r1, #0]
    3fb0:	1b5b      	subs	r3, r3, r5
    3fb2:	d41a      	bmi.n	3fea <_malloc_r+0x96>
    3fb4:	2b0b      	cmp	r3, #11
    3fb6:	d903      	bls.n	3fc0 <_malloc_r+0x6c>
    3fb8:	600b      	str	r3, [r1, #0]
    3fba:	18cc      	adds	r4, r1, r3
    3fbc:	6025      	str	r5, [r4, #0]
    3fbe:	e003      	b.n	3fc8 <_malloc_r+0x74>
    3fc0:	428c      	cmp	r4, r1
    3fc2:	d10e      	bne.n	3fe2 <_malloc_r+0x8e>
    3fc4:	6863      	ldr	r3, [r4, #4]
    3fc6:	6013      	str	r3, [r2, #0]
    3fc8:	0030      	movs	r0, r6
    3fca:	f000 fb84 	bl	46d6 <__malloc_unlock>
    3fce:	0020      	movs	r0, r4
    3fd0:	2207      	movs	r2, #7
    3fd2:	300b      	adds	r0, #11
    3fd4:	1d23      	adds	r3, r4, #4
    3fd6:	4390      	bics	r0, r2
    3fd8:	1ac3      	subs	r3, r0, r3
    3fda:	d0e7      	beq.n	3fac <_malloc_r+0x58>
    3fdc:	425a      	negs	r2, r3
    3fde:	50e2      	str	r2, [r4, r3]
    3fe0:	e7e4      	b.n	3fac <_malloc_r+0x58>
    3fe2:	684b      	ldr	r3, [r1, #4]
    3fe4:	6063      	str	r3, [r4, #4]
    3fe6:	000c      	movs	r4, r1
    3fe8:	e7ee      	b.n	3fc8 <_malloc_r+0x74>
    3fea:	000c      	movs	r4, r1
    3fec:	6849      	ldr	r1, [r1, #4]
    3fee:	e7c2      	b.n	3f76 <_malloc_r+0x22>
    3ff0:	2303      	movs	r3, #3
    3ff2:	1cc4      	adds	r4, r0, #3
    3ff4:	439c      	bics	r4, r3
    3ff6:	42a0      	cmp	r0, r4
    3ff8:	d0e0      	beq.n	3fbc <_malloc_r+0x68>
    3ffa:	1a21      	subs	r1, r4, r0
    3ffc:	0030      	movs	r0, r6
    3ffe:	f000 f89f 	bl	4140 <_sbrk_r>
    4002:	1c43      	adds	r3, r0, #1
    4004:	d1da      	bne.n	3fbc <_malloc_r+0x68>
    4006:	e7c6      	b.n	3f96 <_malloc_r+0x42>
    4008:	200002c8 	.word	0x200002c8
    400c:	200002cc 	.word	0x200002cc

00004010 <iprintf>:
    4010:	b40f      	push	{r0, r1, r2, r3}
    4012:	4b0b      	ldr	r3, [pc, #44]	; (4040 <iprintf+0x30>)
    4014:	b513      	push	{r0, r1, r4, lr}
    4016:	681c      	ldr	r4, [r3, #0]
    4018:	2c00      	cmp	r4, #0
    401a:	d005      	beq.n	4028 <iprintf+0x18>
    401c:	69a3      	ldr	r3, [r4, #24]
    401e:	2b00      	cmp	r3, #0
    4020:	d102      	bne.n	4028 <iprintf+0x18>
    4022:	0020      	movs	r0, r4
    4024:	f000 fa54 	bl	44d0 <__sinit>
    4028:	ab05      	add	r3, sp, #20
    402a:	9a04      	ldr	r2, [sp, #16]
    402c:	68a1      	ldr	r1, [r4, #8]
    402e:	0020      	movs	r0, r4
    4030:	9301      	str	r3, [sp, #4]
    4032:	f000 fb79 	bl	4728 <_vfiprintf_r>
    4036:	bc16      	pop	{r1, r2, r4}
    4038:	bc08      	pop	{r3}
    403a:	b004      	add	sp, #16
    403c:	4718      	bx	r3
    403e:	46c0      	nop			; (mov r8, r8)
    4040:	20000178 	.word	0x20000178

00004044 <putchar>:
    4044:	4b08      	ldr	r3, [pc, #32]	; (4068 <putchar+0x24>)
    4046:	b570      	push	{r4, r5, r6, lr}
    4048:	681c      	ldr	r4, [r3, #0]
    404a:	0005      	movs	r5, r0
    404c:	2c00      	cmp	r4, #0
    404e:	d005      	beq.n	405c <putchar+0x18>
    4050:	69a3      	ldr	r3, [r4, #24]
    4052:	2b00      	cmp	r3, #0
    4054:	d102      	bne.n	405c <putchar+0x18>
    4056:	0020      	movs	r0, r4
    4058:	f000 fa3a 	bl	44d0 <__sinit>
    405c:	0029      	movs	r1, r5
    405e:	68a2      	ldr	r2, [r4, #8]
    4060:	0020      	movs	r0, r4
    4062:	f000 fe05 	bl	4c70 <_putc_r>
    4066:	bd70      	pop	{r4, r5, r6, pc}
    4068:	20000178 	.word	0x20000178

0000406c <srand>:
    406c:	4b10      	ldr	r3, [pc, #64]	; (40b0 <srand+0x44>)
    406e:	b570      	push	{r4, r5, r6, lr}
    4070:	681c      	ldr	r4, [r3, #0]
    4072:	0005      	movs	r5, r0
    4074:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4076:	2b00      	cmp	r3, #0
    4078:	d115      	bne.n	40a6 <srand+0x3a>
    407a:	2018      	movs	r0, #24
    407c:	f7ff ff04 	bl	3e88 <malloc>
    4080:	4b0c      	ldr	r3, [pc, #48]	; (40b4 <srand+0x48>)
    4082:	63a0      	str	r0, [r4, #56]	; 0x38
    4084:	8003      	strh	r3, [r0, #0]
    4086:	4b0c      	ldr	r3, [pc, #48]	; (40b8 <srand+0x4c>)
    4088:	2201      	movs	r2, #1
    408a:	8043      	strh	r3, [r0, #2]
    408c:	4b0b      	ldr	r3, [pc, #44]	; (40bc <srand+0x50>)
    408e:	8083      	strh	r3, [r0, #4]
    4090:	4b0b      	ldr	r3, [pc, #44]	; (40c0 <srand+0x54>)
    4092:	80c3      	strh	r3, [r0, #6]
    4094:	4b0b      	ldr	r3, [pc, #44]	; (40c4 <srand+0x58>)
    4096:	8103      	strh	r3, [r0, #8]
    4098:	2305      	movs	r3, #5
    409a:	8143      	strh	r3, [r0, #10]
    409c:	3306      	adds	r3, #6
    409e:	8183      	strh	r3, [r0, #12]
    40a0:	2300      	movs	r3, #0
    40a2:	6102      	str	r2, [r0, #16]
    40a4:	6143      	str	r3, [r0, #20]
    40a6:	2200      	movs	r2, #0
    40a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    40aa:	611d      	str	r5, [r3, #16]
    40ac:	615a      	str	r2, [r3, #20]
    40ae:	bd70      	pop	{r4, r5, r6, pc}
    40b0:	20000178 	.word	0x20000178
    40b4:	0000330e 	.word	0x0000330e
    40b8:	ffffabcd 	.word	0xffffabcd
    40bc:	00001234 	.word	0x00001234
    40c0:	ffffe66d 	.word	0xffffe66d
    40c4:	ffffdeec 	.word	0xffffdeec

000040c8 <rand>:
    40c8:	4b15      	ldr	r3, [pc, #84]	; (4120 <rand+0x58>)
    40ca:	b510      	push	{r4, lr}
    40cc:	681c      	ldr	r4, [r3, #0]
    40ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    40d0:	2b00      	cmp	r3, #0
    40d2:	d115      	bne.n	4100 <rand+0x38>
    40d4:	2018      	movs	r0, #24
    40d6:	f7ff fed7 	bl	3e88 <malloc>
    40da:	4b12      	ldr	r3, [pc, #72]	; (4124 <rand+0x5c>)
    40dc:	63a0      	str	r0, [r4, #56]	; 0x38
    40de:	8003      	strh	r3, [r0, #0]
    40e0:	4b11      	ldr	r3, [pc, #68]	; (4128 <rand+0x60>)
    40e2:	2201      	movs	r2, #1
    40e4:	8043      	strh	r3, [r0, #2]
    40e6:	4b11      	ldr	r3, [pc, #68]	; (412c <rand+0x64>)
    40e8:	8083      	strh	r3, [r0, #4]
    40ea:	4b11      	ldr	r3, [pc, #68]	; (4130 <rand+0x68>)
    40ec:	80c3      	strh	r3, [r0, #6]
    40ee:	4b11      	ldr	r3, [pc, #68]	; (4134 <rand+0x6c>)
    40f0:	8103      	strh	r3, [r0, #8]
    40f2:	2305      	movs	r3, #5
    40f4:	8143      	strh	r3, [r0, #10]
    40f6:	3306      	adds	r3, #6
    40f8:	8183      	strh	r3, [r0, #12]
    40fa:	2300      	movs	r3, #0
    40fc:	6102      	str	r2, [r0, #16]
    40fe:	6143      	str	r3, [r0, #20]
    4100:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4102:	4a0d      	ldr	r2, [pc, #52]	; (4138 <rand+0x70>)
    4104:	6920      	ldr	r0, [r4, #16]
    4106:	6961      	ldr	r1, [r4, #20]
    4108:	4b0c      	ldr	r3, [pc, #48]	; (413c <rand+0x74>)
    410a:	f7ff fe6f 	bl	3dec <__aeabi_lmul>
    410e:	2201      	movs	r2, #1
    4110:	2300      	movs	r3, #0
    4112:	1880      	adds	r0, r0, r2
    4114:	4159      	adcs	r1, r3
    4116:	6120      	str	r0, [r4, #16]
    4118:	6161      	str	r1, [r4, #20]
    411a:	0048      	lsls	r0, r1, #1
    411c:	0840      	lsrs	r0, r0, #1
    411e:	bd10      	pop	{r4, pc}
    4120:	20000178 	.word	0x20000178
    4124:	0000330e 	.word	0x0000330e
    4128:	ffffabcd 	.word	0xffffabcd
    412c:	00001234 	.word	0x00001234
    4130:	ffffe66d 	.word	0xffffe66d
    4134:	ffffdeec 	.word	0xffffdeec
    4138:	4c957f2d 	.word	0x4c957f2d
    413c:	5851f42d 	.word	0x5851f42d

00004140 <_sbrk_r>:
    4140:	2300      	movs	r3, #0
    4142:	b570      	push	{r4, r5, r6, lr}
    4144:	4c06      	ldr	r4, [pc, #24]	; (4160 <_sbrk_r+0x20>)
    4146:	0005      	movs	r5, r0
    4148:	0008      	movs	r0, r1
    414a:	6023      	str	r3, [r4, #0]
    414c:	f7fe fb64 	bl	2818 <_sbrk>
    4150:	1c43      	adds	r3, r0, #1
    4152:	d103      	bne.n	415c <_sbrk_r+0x1c>
    4154:	6823      	ldr	r3, [r4, #0]
    4156:	2b00      	cmp	r3, #0
    4158:	d000      	beq.n	415c <_sbrk_r+0x1c>
    415a:	602b      	str	r3, [r5, #0]
    415c:	bd70      	pop	{r4, r5, r6, pc}
    415e:	46c0      	nop			; (mov r8, r8)
    4160:	20000b30 	.word	0x20000b30

00004164 <setbuf>:
    4164:	424a      	negs	r2, r1
    4166:	414a      	adcs	r2, r1
    4168:	2380      	movs	r3, #128	; 0x80
    416a:	b510      	push	{r4, lr}
    416c:	0052      	lsls	r2, r2, #1
    416e:	00db      	lsls	r3, r3, #3
    4170:	f000 f802 	bl	4178 <setvbuf>
    4174:	bd10      	pop	{r4, pc}
	...

00004178 <setvbuf>:
    4178:	b5f0      	push	{r4, r5, r6, r7, lr}
    417a:	001d      	movs	r5, r3
    417c:	4b4f      	ldr	r3, [pc, #316]	; (42bc <setvbuf+0x144>)
    417e:	b085      	sub	sp, #20
    4180:	681e      	ldr	r6, [r3, #0]
    4182:	0004      	movs	r4, r0
    4184:	000f      	movs	r7, r1
    4186:	9200      	str	r2, [sp, #0]
    4188:	2e00      	cmp	r6, #0
    418a:	d005      	beq.n	4198 <setvbuf+0x20>
    418c:	69b3      	ldr	r3, [r6, #24]
    418e:	2b00      	cmp	r3, #0
    4190:	d102      	bne.n	4198 <setvbuf+0x20>
    4192:	0030      	movs	r0, r6
    4194:	f000 f99c 	bl	44d0 <__sinit>
    4198:	4b49      	ldr	r3, [pc, #292]	; (42c0 <setvbuf+0x148>)
    419a:	429c      	cmp	r4, r3
    419c:	d150      	bne.n	4240 <setvbuf+0xc8>
    419e:	6874      	ldr	r4, [r6, #4]
    41a0:	9b00      	ldr	r3, [sp, #0]
    41a2:	2b02      	cmp	r3, #2
    41a4:	d005      	beq.n	41b2 <setvbuf+0x3a>
    41a6:	2b01      	cmp	r3, #1
    41a8:	d900      	bls.n	41ac <setvbuf+0x34>
    41aa:	e084      	b.n	42b6 <setvbuf+0x13e>
    41ac:	2d00      	cmp	r5, #0
    41ae:	da00      	bge.n	41b2 <setvbuf+0x3a>
    41b0:	e081      	b.n	42b6 <setvbuf+0x13e>
    41b2:	0021      	movs	r1, r4
    41b4:	0030      	movs	r0, r6
    41b6:	f000 f91d 	bl	43f4 <_fflush_r>
    41ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    41bc:	2900      	cmp	r1, #0
    41be:	d008      	beq.n	41d2 <setvbuf+0x5a>
    41c0:	0023      	movs	r3, r4
    41c2:	3344      	adds	r3, #68	; 0x44
    41c4:	4299      	cmp	r1, r3
    41c6:	d002      	beq.n	41ce <setvbuf+0x56>
    41c8:	0030      	movs	r0, r6
    41ca:	f7ff fe79 	bl	3ec0 <_free_r>
    41ce:	2300      	movs	r3, #0
    41d0:	6363      	str	r3, [r4, #52]	; 0x34
    41d2:	2300      	movs	r3, #0
    41d4:	61a3      	str	r3, [r4, #24]
    41d6:	6063      	str	r3, [r4, #4]
    41d8:	89a3      	ldrh	r3, [r4, #12]
    41da:	061b      	lsls	r3, r3, #24
    41dc:	d503      	bpl.n	41e6 <setvbuf+0x6e>
    41de:	6921      	ldr	r1, [r4, #16]
    41e0:	0030      	movs	r0, r6
    41e2:	f7ff fe6d 	bl	3ec0 <_free_r>
    41e6:	89a3      	ldrh	r3, [r4, #12]
    41e8:	4a36      	ldr	r2, [pc, #216]	; (42c4 <setvbuf+0x14c>)
    41ea:	4013      	ands	r3, r2
    41ec:	81a3      	strh	r3, [r4, #12]
    41ee:	9b00      	ldr	r3, [sp, #0]
    41f0:	2b02      	cmp	r3, #2
    41f2:	d05a      	beq.n	42aa <setvbuf+0x132>
    41f4:	ab03      	add	r3, sp, #12
    41f6:	aa02      	add	r2, sp, #8
    41f8:	0021      	movs	r1, r4
    41fa:	0030      	movs	r0, r6
    41fc:	f000 f9fe 	bl	45fc <__swhatbuf_r>
    4200:	89a3      	ldrh	r3, [r4, #12]
    4202:	4318      	orrs	r0, r3
    4204:	81a0      	strh	r0, [r4, #12]
    4206:	2d00      	cmp	r5, #0
    4208:	d124      	bne.n	4254 <setvbuf+0xdc>
    420a:	9d02      	ldr	r5, [sp, #8]
    420c:	0028      	movs	r0, r5
    420e:	f7ff fe3b 	bl	3e88 <malloc>
    4212:	9501      	str	r5, [sp, #4]
    4214:	1e07      	subs	r7, r0, #0
    4216:	d142      	bne.n	429e <setvbuf+0x126>
    4218:	9b02      	ldr	r3, [sp, #8]
    421a:	9301      	str	r3, [sp, #4]
    421c:	42ab      	cmp	r3, r5
    421e:	d139      	bne.n	4294 <setvbuf+0x11c>
    4220:	2001      	movs	r0, #1
    4222:	4240      	negs	r0, r0
    4224:	2302      	movs	r3, #2
    4226:	89a2      	ldrh	r2, [r4, #12]
    4228:	4313      	orrs	r3, r2
    422a:	81a3      	strh	r3, [r4, #12]
    422c:	2300      	movs	r3, #0
    422e:	60a3      	str	r3, [r4, #8]
    4230:	0023      	movs	r3, r4
    4232:	3347      	adds	r3, #71	; 0x47
    4234:	6023      	str	r3, [r4, #0]
    4236:	6123      	str	r3, [r4, #16]
    4238:	2301      	movs	r3, #1
    423a:	6163      	str	r3, [r4, #20]
    423c:	b005      	add	sp, #20
    423e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4240:	4b21      	ldr	r3, [pc, #132]	; (42c8 <setvbuf+0x150>)
    4242:	429c      	cmp	r4, r3
    4244:	d101      	bne.n	424a <setvbuf+0xd2>
    4246:	68b4      	ldr	r4, [r6, #8]
    4248:	e7aa      	b.n	41a0 <setvbuf+0x28>
    424a:	4b20      	ldr	r3, [pc, #128]	; (42cc <setvbuf+0x154>)
    424c:	429c      	cmp	r4, r3
    424e:	d1a7      	bne.n	41a0 <setvbuf+0x28>
    4250:	68f4      	ldr	r4, [r6, #12]
    4252:	e7a5      	b.n	41a0 <setvbuf+0x28>
    4254:	2f00      	cmp	r7, #0
    4256:	d0d9      	beq.n	420c <setvbuf+0x94>
    4258:	69b3      	ldr	r3, [r6, #24]
    425a:	2b00      	cmp	r3, #0
    425c:	d102      	bne.n	4264 <setvbuf+0xec>
    425e:	0030      	movs	r0, r6
    4260:	f000 f936 	bl	44d0 <__sinit>
    4264:	9b00      	ldr	r3, [sp, #0]
    4266:	2b01      	cmp	r3, #1
    4268:	d103      	bne.n	4272 <setvbuf+0xfa>
    426a:	89a3      	ldrh	r3, [r4, #12]
    426c:	9a00      	ldr	r2, [sp, #0]
    426e:	431a      	orrs	r2, r3
    4270:	81a2      	strh	r2, [r4, #12]
    4272:	2008      	movs	r0, #8
    4274:	89a3      	ldrh	r3, [r4, #12]
    4276:	6027      	str	r7, [r4, #0]
    4278:	6127      	str	r7, [r4, #16]
    427a:	6165      	str	r5, [r4, #20]
    427c:	4018      	ands	r0, r3
    427e:	d018      	beq.n	42b2 <setvbuf+0x13a>
    4280:	2001      	movs	r0, #1
    4282:	4018      	ands	r0, r3
    4284:	2300      	movs	r3, #0
    4286:	4298      	cmp	r0, r3
    4288:	d011      	beq.n	42ae <setvbuf+0x136>
    428a:	426d      	negs	r5, r5
    428c:	60a3      	str	r3, [r4, #8]
    428e:	61a5      	str	r5, [r4, #24]
    4290:	0018      	movs	r0, r3
    4292:	e7d3      	b.n	423c <setvbuf+0xc4>
    4294:	9801      	ldr	r0, [sp, #4]
    4296:	f7ff fdf7 	bl	3e88 <malloc>
    429a:	1e07      	subs	r7, r0, #0
    429c:	d0c0      	beq.n	4220 <setvbuf+0xa8>
    429e:	2380      	movs	r3, #128	; 0x80
    42a0:	89a2      	ldrh	r2, [r4, #12]
    42a2:	9d01      	ldr	r5, [sp, #4]
    42a4:	4313      	orrs	r3, r2
    42a6:	81a3      	strh	r3, [r4, #12]
    42a8:	e7d6      	b.n	4258 <setvbuf+0xe0>
    42aa:	2000      	movs	r0, #0
    42ac:	e7ba      	b.n	4224 <setvbuf+0xac>
    42ae:	60a5      	str	r5, [r4, #8]
    42b0:	e7c4      	b.n	423c <setvbuf+0xc4>
    42b2:	60a0      	str	r0, [r4, #8]
    42b4:	e7c2      	b.n	423c <setvbuf+0xc4>
    42b6:	2001      	movs	r0, #1
    42b8:	4240      	negs	r0, r0
    42ba:	e7bf      	b.n	423c <setvbuf+0xc4>
    42bc:	20000178 	.word	0x20000178
    42c0:	000073c4 	.word	0x000073c4
    42c4:	fffff35c 	.word	0xfffff35c
    42c8:	000073e4 	.word	0x000073e4
    42cc:	000073a4 	.word	0x000073a4

000042d0 <strlen>:
    42d0:	2300      	movs	r3, #0
    42d2:	5cc2      	ldrb	r2, [r0, r3]
    42d4:	3301      	adds	r3, #1
    42d6:	2a00      	cmp	r2, #0
    42d8:	d1fb      	bne.n	42d2 <strlen+0x2>
    42da:	1e58      	subs	r0, r3, #1
    42dc:	4770      	bx	lr
	...

000042e0 <__sflush_r>:
    42e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42e2:	898a      	ldrh	r2, [r1, #12]
    42e4:	0005      	movs	r5, r0
    42e6:	000c      	movs	r4, r1
    42e8:	0713      	lsls	r3, r2, #28
    42ea:	d460      	bmi.n	43ae <__sflush_r+0xce>
    42ec:	684b      	ldr	r3, [r1, #4]
    42ee:	2b00      	cmp	r3, #0
    42f0:	dc04      	bgt.n	42fc <__sflush_r+0x1c>
    42f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    42f4:	2b00      	cmp	r3, #0
    42f6:	dc01      	bgt.n	42fc <__sflush_r+0x1c>
    42f8:	2000      	movs	r0, #0
    42fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    42fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    42fe:	2f00      	cmp	r7, #0
    4300:	d0fa      	beq.n	42f8 <__sflush_r+0x18>
    4302:	2300      	movs	r3, #0
    4304:	682e      	ldr	r6, [r5, #0]
    4306:	602b      	str	r3, [r5, #0]
    4308:	2380      	movs	r3, #128	; 0x80
    430a:	015b      	lsls	r3, r3, #5
    430c:	401a      	ands	r2, r3
    430e:	d034      	beq.n	437a <__sflush_r+0x9a>
    4310:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4312:	89a3      	ldrh	r3, [r4, #12]
    4314:	075b      	lsls	r3, r3, #29
    4316:	d506      	bpl.n	4326 <__sflush_r+0x46>
    4318:	6863      	ldr	r3, [r4, #4]
    431a:	1ac0      	subs	r0, r0, r3
    431c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    431e:	2b00      	cmp	r3, #0
    4320:	d001      	beq.n	4326 <__sflush_r+0x46>
    4322:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4324:	1ac0      	subs	r0, r0, r3
    4326:	0002      	movs	r2, r0
    4328:	6a21      	ldr	r1, [r4, #32]
    432a:	2300      	movs	r3, #0
    432c:	0028      	movs	r0, r5
    432e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4330:	47b8      	blx	r7
    4332:	89a1      	ldrh	r1, [r4, #12]
    4334:	1c43      	adds	r3, r0, #1
    4336:	d106      	bne.n	4346 <__sflush_r+0x66>
    4338:	682b      	ldr	r3, [r5, #0]
    433a:	2b1d      	cmp	r3, #29
    433c:	d831      	bhi.n	43a2 <__sflush_r+0xc2>
    433e:	4a2c      	ldr	r2, [pc, #176]	; (43f0 <__sflush_r+0x110>)
    4340:	40da      	lsrs	r2, r3
    4342:	07d3      	lsls	r3, r2, #31
    4344:	d52d      	bpl.n	43a2 <__sflush_r+0xc2>
    4346:	2300      	movs	r3, #0
    4348:	6063      	str	r3, [r4, #4]
    434a:	6923      	ldr	r3, [r4, #16]
    434c:	6023      	str	r3, [r4, #0]
    434e:	04cb      	lsls	r3, r1, #19
    4350:	d505      	bpl.n	435e <__sflush_r+0x7e>
    4352:	1c43      	adds	r3, r0, #1
    4354:	d102      	bne.n	435c <__sflush_r+0x7c>
    4356:	682b      	ldr	r3, [r5, #0]
    4358:	2b00      	cmp	r3, #0
    435a:	d100      	bne.n	435e <__sflush_r+0x7e>
    435c:	6560      	str	r0, [r4, #84]	; 0x54
    435e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4360:	602e      	str	r6, [r5, #0]
    4362:	2900      	cmp	r1, #0
    4364:	d0c8      	beq.n	42f8 <__sflush_r+0x18>
    4366:	0023      	movs	r3, r4
    4368:	3344      	adds	r3, #68	; 0x44
    436a:	4299      	cmp	r1, r3
    436c:	d002      	beq.n	4374 <__sflush_r+0x94>
    436e:	0028      	movs	r0, r5
    4370:	f7ff fda6 	bl	3ec0 <_free_r>
    4374:	2000      	movs	r0, #0
    4376:	6360      	str	r0, [r4, #52]	; 0x34
    4378:	e7bf      	b.n	42fa <__sflush_r+0x1a>
    437a:	2301      	movs	r3, #1
    437c:	6a21      	ldr	r1, [r4, #32]
    437e:	0028      	movs	r0, r5
    4380:	47b8      	blx	r7
    4382:	1c43      	adds	r3, r0, #1
    4384:	d1c5      	bne.n	4312 <__sflush_r+0x32>
    4386:	682b      	ldr	r3, [r5, #0]
    4388:	2b00      	cmp	r3, #0
    438a:	d0c2      	beq.n	4312 <__sflush_r+0x32>
    438c:	2b1d      	cmp	r3, #29
    438e:	d001      	beq.n	4394 <__sflush_r+0xb4>
    4390:	2b16      	cmp	r3, #22
    4392:	d101      	bne.n	4398 <__sflush_r+0xb8>
    4394:	602e      	str	r6, [r5, #0]
    4396:	e7af      	b.n	42f8 <__sflush_r+0x18>
    4398:	2340      	movs	r3, #64	; 0x40
    439a:	89a2      	ldrh	r2, [r4, #12]
    439c:	4313      	orrs	r3, r2
    439e:	81a3      	strh	r3, [r4, #12]
    43a0:	e7ab      	b.n	42fa <__sflush_r+0x1a>
    43a2:	2340      	movs	r3, #64	; 0x40
    43a4:	430b      	orrs	r3, r1
    43a6:	2001      	movs	r0, #1
    43a8:	81a3      	strh	r3, [r4, #12]
    43aa:	4240      	negs	r0, r0
    43ac:	e7a5      	b.n	42fa <__sflush_r+0x1a>
    43ae:	690f      	ldr	r7, [r1, #16]
    43b0:	2f00      	cmp	r7, #0
    43b2:	d0a1      	beq.n	42f8 <__sflush_r+0x18>
    43b4:	680b      	ldr	r3, [r1, #0]
    43b6:	600f      	str	r7, [r1, #0]
    43b8:	1bdb      	subs	r3, r3, r7
    43ba:	9301      	str	r3, [sp, #4]
    43bc:	2300      	movs	r3, #0
    43be:	0792      	lsls	r2, r2, #30
    43c0:	d100      	bne.n	43c4 <__sflush_r+0xe4>
    43c2:	694b      	ldr	r3, [r1, #20]
    43c4:	60a3      	str	r3, [r4, #8]
    43c6:	9b01      	ldr	r3, [sp, #4]
    43c8:	2b00      	cmp	r3, #0
    43ca:	dc00      	bgt.n	43ce <__sflush_r+0xee>
    43cc:	e794      	b.n	42f8 <__sflush_r+0x18>
    43ce:	9b01      	ldr	r3, [sp, #4]
    43d0:	003a      	movs	r2, r7
    43d2:	6a21      	ldr	r1, [r4, #32]
    43d4:	0028      	movs	r0, r5
    43d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    43d8:	47b0      	blx	r6
    43da:	2800      	cmp	r0, #0
    43dc:	dc03      	bgt.n	43e6 <__sflush_r+0x106>
    43de:	2340      	movs	r3, #64	; 0x40
    43e0:	89a2      	ldrh	r2, [r4, #12]
    43e2:	4313      	orrs	r3, r2
    43e4:	e7df      	b.n	43a6 <__sflush_r+0xc6>
    43e6:	9b01      	ldr	r3, [sp, #4]
    43e8:	183f      	adds	r7, r7, r0
    43ea:	1a1b      	subs	r3, r3, r0
    43ec:	9301      	str	r3, [sp, #4]
    43ee:	e7ea      	b.n	43c6 <__sflush_r+0xe6>
    43f0:	20400001 	.word	0x20400001

000043f4 <_fflush_r>:
    43f4:	690b      	ldr	r3, [r1, #16]
    43f6:	b570      	push	{r4, r5, r6, lr}
    43f8:	0005      	movs	r5, r0
    43fa:	000c      	movs	r4, r1
    43fc:	2b00      	cmp	r3, #0
    43fe:	d101      	bne.n	4404 <_fflush_r+0x10>
    4400:	2000      	movs	r0, #0
    4402:	bd70      	pop	{r4, r5, r6, pc}
    4404:	2800      	cmp	r0, #0
    4406:	d004      	beq.n	4412 <_fflush_r+0x1e>
    4408:	6983      	ldr	r3, [r0, #24]
    440a:	2b00      	cmp	r3, #0
    440c:	d101      	bne.n	4412 <_fflush_r+0x1e>
    440e:	f000 f85f 	bl	44d0 <__sinit>
    4412:	4b0b      	ldr	r3, [pc, #44]	; (4440 <_fflush_r+0x4c>)
    4414:	429c      	cmp	r4, r3
    4416:	d109      	bne.n	442c <_fflush_r+0x38>
    4418:	686c      	ldr	r4, [r5, #4]
    441a:	220c      	movs	r2, #12
    441c:	5ea3      	ldrsh	r3, [r4, r2]
    441e:	2b00      	cmp	r3, #0
    4420:	d0ee      	beq.n	4400 <_fflush_r+0xc>
    4422:	0021      	movs	r1, r4
    4424:	0028      	movs	r0, r5
    4426:	f7ff ff5b 	bl	42e0 <__sflush_r>
    442a:	e7ea      	b.n	4402 <_fflush_r+0xe>
    442c:	4b05      	ldr	r3, [pc, #20]	; (4444 <_fflush_r+0x50>)
    442e:	429c      	cmp	r4, r3
    4430:	d101      	bne.n	4436 <_fflush_r+0x42>
    4432:	68ac      	ldr	r4, [r5, #8]
    4434:	e7f1      	b.n	441a <_fflush_r+0x26>
    4436:	4b04      	ldr	r3, [pc, #16]	; (4448 <_fflush_r+0x54>)
    4438:	429c      	cmp	r4, r3
    443a:	d1ee      	bne.n	441a <_fflush_r+0x26>
    443c:	68ec      	ldr	r4, [r5, #12]
    443e:	e7ec      	b.n	441a <_fflush_r+0x26>
    4440:	000073c4 	.word	0x000073c4
    4444:	000073e4 	.word	0x000073e4
    4448:	000073a4 	.word	0x000073a4

0000444c <_cleanup_r>:
    444c:	b510      	push	{r4, lr}
    444e:	4902      	ldr	r1, [pc, #8]	; (4458 <_cleanup_r+0xc>)
    4450:	f000 f8b2 	bl	45b8 <_fwalk_reent>
    4454:	bd10      	pop	{r4, pc}
    4456:	46c0      	nop			; (mov r8, r8)
    4458:	000043f5 	.word	0x000043f5

0000445c <std.isra.0>:
    445c:	2300      	movs	r3, #0
    445e:	b510      	push	{r4, lr}
    4460:	0004      	movs	r4, r0
    4462:	6003      	str	r3, [r0, #0]
    4464:	6043      	str	r3, [r0, #4]
    4466:	6083      	str	r3, [r0, #8]
    4468:	8181      	strh	r1, [r0, #12]
    446a:	6643      	str	r3, [r0, #100]	; 0x64
    446c:	81c2      	strh	r2, [r0, #14]
    446e:	6103      	str	r3, [r0, #16]
    4470:	6143      	str	r3, [r0, #20]
    4472:	6183      	str	r3, [r0, #24]
    4474:	0019      	movs	r1, r3
    4476:	2208      	movs	r2, #8
    4478:	305c      	adds	r0, #92	; 0x5c
    447a:	f7ff fd18 	bl	3eae <memset>
    447e:	4b05      	ldr	r3, [pc, #20]	; (4494 <std.isra.0+0x38>)
    4480:	6224      	str	r4, [r4, #32]
    4482:	6263      	str	r3, [r4, #36]	; 0x24
    4484:	4b04      	ldr	r3, [pc, #16]	; (4498 <std.isra.0+0x3c>)
    4486:	62a3      	str	r3, [r4, #40]	; 0x28
    4488:	4b04      	ldr	r3, [pc, #16]	; (449c <std.isra.0+0x40>)
    448a:	62e3      	str	r3, [r4, #44]	; 0x2c
    448c:	4b04      	ldr	r3, [pc, #16]	; (44a0 <std.isra.0+0x44>)
    448e:	6323      	str	r3, [r4, #48]	; 0x30
    4490:	bd10      	pop	{r4, pc}
    4492:	46c0      	nop			; (mov r8, r8)
    4494:	00004cdd 	.word	0x00004cdd
    4498:	00004d05 	.word	0x00004d05
    449c:	00004d3d 	.word	0x00004d3d
    44a0:	00004d69 	.word	0x00004d69

000044a4 <__sfmoreglue>:
    44a4:	b570      	push	{r4, r5, r6, lr}
    44a6:	2568      	movs	r5, #104	; 0x68
    44a8:	1e4a      	subs	r2, r1, #1
    44aa:	4355      	muls	r5, r2
    44ac:	000e      	movs	r6, r1
    44ae:	0029      	movs	r1, r5
    44b0:	3174      	adds	r1, #116	; 0x74
    44b2:	f7ff fd4f 	bl	3f54 <_malloc_r>
    44b6:	1e04      	subs	r4, r0, #0
    44b8:	d008      	beq.n	44cc <__sfmoreglue+0x28>
    44ba:	2100      	movs	r1, #0
    44bc:	002a      	movs	r2, r5
    44be:	6001      	str	r1, [r0, #0]
    44c0:	6046      	str	r6, [r0, #4]
    44c2:	300c      	adds	r0, #12
    44c4:	60a0      	str	r0, [r4, #8]
    44c6:	3268      	adds	r2, #104	; 0x68
    44c8:	f7ff fcf1 	bl	3eae <memset>
    44cc:	0020      	movs	r0, r4
    44ce:	bd70      	pop	{r4, r5, r6, pc}

000044d0 <__sinit>:
    44d0:	6983      	ldr	r3, [r0, #24]
    44d2:	b513      	push	{r0, r1, r4, lr}
    44d4:	0004      	movs	r4, r0
    44d6:	2b00      	cmp	r3, #0
    44d8:	d128      	bne.n	452c <__sinit+0x5c>
    44da:	6483      	str	r3, [r0, #72]	; 0x48
    44dc:	64c3      	str	r3, [r0, #76]	; 0x4c
    44de:	6503      	str	r3, [r0, #80]	; 0x50
    44e0:	4b13      	ldr	r3, [pc, #76]	; (4530 <__sinit+0x60>)
    44e2:	4a14      	ldr	r2, [pc, #80]	; (4534 <__sinit+0x64>)
    44e4:	681b      	ldr	r3, [r3, #0]
    44e6:	6282      	str	r2, [r0, #40]	; 0x28
    44e8:	9301      	str	r3, [sp, #4]
    44ea:	4298      	cmp	r0, r3
    44ec:	d101      	bne.n	44f2 <__sinit+0x22>
    44ee:	2301      	movs	r3, #1
    44f0:	6183      	str	r3, [r0, #24]
    44f2:	0020      	movs	r0, r4
    44f4:	f000 f820 	bl	4538 <__sfp>
    44f8:	6060      	str	r0, [r4, #4]
    44fa:	0020      	movs	r0, r4
    44fc:	f000 f81c 	bl	4538 <__sfp>
    4500:	60a0      	str	r0, [r4, #8]
    4502:	0020      	movs	r0, r4
    4504:	f000 f818 	bl	4538 <__sfp>
    4508:	2200      	movs	r2, #0
    450a:	60e0      	str	r0, [r4, #12]
    450c:	2104      	movs	r1, #4
    450e:	6860      	ldr	r0, [r4, #4]
    4510:	f7ff ffa4 	bl	445c <std.isra.0>
    4514:	2201      	movs	r2, #1
    4516:	2109      	movs	r1, #9
    4518:	68a0      	ldr	r0, [r4, #8]
    451a:	f7ff ff9f 	bl	445c <std.isra.0>
    451e:	2202      	movs	r2, #2
    4520:	2112      	movs	r1, #18
    4522:	68e0      	ldr	r0, [r4, #12]
    4524:	f7ff ff9a 	bl	445c <std.isra.0>
    4528:	2301      	movs	r3, #1
    452a:	61a3      	str	r3, [r4, #24]
    452c:	bd13      	pop	{r0, r1, r4, pc}
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	000073a0 	.word	0x000073a0
    4534:	0000444d 	.word	0x0000444d

00004538 <__sfp>:
    4538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    453a:	4b1e      	ldr	r3, [pc, #120]	; (45b4 <__sfp+0x7c>)
    453c:	0007      	movs	r7, r0
    453e:	681e      	ldr	r6, [r3, #0]
    4540:	69b3      	ldr	r3, [r6, #24]
    4542:	2b00      	cmp	r3, #0
    4544:	d102      	bne.n	454c <__sfp+0x14>
    4546:	0030      	movs	r0, r6
    4548:	f7ff ffc2 	bl	44d0 <__sinit>
    454c:	3648      	adds	r6, #72	; 0x48
    454e:	68b4      	ldr	r4, [r6, #8]
    4550:	6873      	ldr	r3, [r6, #4]
    4552:	3b01      	subs	r3, #1
    4554:	d504      	bpl.n	4560 <__sfp+0x28>
    4556:	6833      	ldr	r3, [r6, #0]
    4558:	2b00      	cmp	r3, #0
    455a:	d007      	beq.n	456c <__sfp+0x34>
    455c:	6836      	ldr	r6, [r6, #0]
    455e:	e7f6      	b.n	454e <__sfp+0x16>
    4560:	220c      	movs	r2, #12
    4562:	5ea5      	ldrsh	r5, [r4, r2]
    4564:	2d00      	cmp	r5, #0
    4566:	d00d      	beq.n	4584 <__sfp+0x4c>
    4568:	3468      	adds	r4, #104	; 0x68
    456a:	e7f2      	b.n	4552 <__sfp+0x1a>
    456c:	2104      	movs	r1, #4
    456e:	0038      	movs	r0, r7
    4570:	f7ff ff98 	bl	44a4 <__sfmoreglue>
    4574:	6030      	str	r0, [r6, #0]
    4576:	2800      	cmp	r0, #0
    4578:	d1f0      	bne.n	455c <__sfp+0x24>
    457a:	230c      	movs	r3, #12
    457c:	0004      	movs	r4, r0
    457e:	603b      	str	r3, [r7, #0]
    4580:	0020      	movs	r0, r4
    4582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4584:	2301      	movs	r3, #1
    4586:	0020      	movs	r0, r4
    4588:	425b      	negs	r3, r3
    458a:	81e3      	strh	r3, [r4, #14]
    458c:	3302      	adds	r3, #2
    458e:	81a3      	strh	r3, [r4, #12]
    4590:	6665      	str	r5, [r4, #100]	; 0x64
    4592:	6025      	str	r5, [r4, #0]
    4594:	60a5      	str	r5, [r4, #8]
    4596:	6065      	str	r5, [r4, #4]
    4598:	6125      	str	r5, [r4, #16]
    459a:	6165      	str	r5, [r4, #20]
    459c:	61a5      	str	r5, [r4, #24]
    459e:	2208      	movs	r2, #8
    45a0:	0029      	movs	r1, r5
    45a2:	305c      	adds	r0, #92	; 0x5c
    45a4:	f7ff fc83 	bl	3eae <memset>
    45a8:	6365      	str	r5, [r4, #52]	; 0x34
    45aa:	63a5      	str	r5, [r4, #56]	; 0x38
    45ac:	64a5      	str	r5, [r4, #72]	; 0x48
    45ae:	64e5      	str	r5, [r4, #76]	; 0x4c
    45b0:	e7e6      	b.n	4580 <__sfp+0x48>
    45b2:	46c0      	nop			; (mov r8, r8)
    45b4:	000073a0 	.word	0x000073a0

000045b8 <_fwalk_reent>:
    45b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45ba:	0004      	movs	r4, r0
    45bc:	0007      	movs	r7, r0
    45be:	2600      	movs	r6, #0
    45c0:	9101      	str	r1, [sp, #4]
    45c2:	3448      	adds	r4, #72	; 0x48
    45c4:	2c00      	cmp	r4, #0
    45c6:	d101      	bne.n	45cc <_fwalk_reent+0x14>
    45c8:	0030      	movs	r0, r6
    45ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    45cc:	6863      	ldr	r3, [r4, #4]
    45ce:	68a5      	ldr	r5, [r4, #8]
    45d0:	9300      	str	r3, [sp, #0]
    45d2:	9b00      	ldr	r3, [sp, #0]
    45d4:	3b01      	subs	r3, #1
    45d6:	9300      	str	r3, [sp, #0]
    45d8:	d501      	bpl.n	45de <_fwalk_reent+0x26>
    45da:	6824      	ldr	r4, [r4, #0]
    45dc:	e7f2      	b.n	45c4 <_fwalk_reent+0xc>
    45de:	89ab      	ldrh	r3, [r5, #12]
    45e0:	2b01      	cmp	r3, #1
    45e2:	d908      	bls.n	45f6 <_fwalk_reent+0x3e>
    45e4:	220e      	movs	r2, #14
    45e6:	5eab      	ldrsh	r3, [r5, r2]
    45e8:	3301      	adds	r3, #1
    45ea:	d004      	beq.n	45f6 <_fwalk_reent+0x3e>
    45ec:	0029      	movs	r1, r5
    45ee:	0038      	movs	r0, r7
    45f0:	9b01      	ldr	r3, [sp, #4]
    45f2:	4798      	blx	r3
    45f4:	4306      	orrs	r6, r0
    45f6:	3568      	adds	r5, #104	; 0x68
    45f8:	e7eb      	b.n	45d2 <_fwalk_reent+0x1a>
	...

000045fc <__swhatbuf_r>:
    45fc:	b570      	push	{r4, r5, r6, lr}
    45fe:	000e      	movs	r6, r1
    4600:	001d      	movs	r5, r3
    4602:	230e      	movs	r3, #14
    4604:	5ec9      	ldrsh	r1, [r1, r3]
    4606:	b090      	sub	sp, #64	; 0x40
    4608:	0014      	movs	r4, r2
    460a:	2900      	cmp	r1, #0
    460c:	da07      	bge.n	461e <__swhatbuf_r+0x22>
    460e:	2300      	movs	r3, #0
    4610:	602b      	str	r3, [r5, #0]
    4612:	89b3      	ldrh	r3, [r6, #12]
    4614:	061b      	lsls	r3, r3, #24
    4616:	d411      	bmi.n	463c <__swhatbuf_r+0x40>
    4618:	2380      	movs	r3, #128	; 0x80
    461a:	00db      	lsls	r3, r3, #3
    461c:	e00f      	b.n	463e <__swhatbuf_r+0x42>
    461e:	aa01      	add	r2, sp, #4
    4620:	f000 fc9a 	bl	4f58 <_fstat_r>
    4624:	2800      	cmp	r0, #0
    4626:	dbf2      	blt.n	460e <__swhatbuf_r+0x12>
    4628:	22f0      	movs	r2, #240	; 0xf0
    462a:	9b02      	ldr	r3, [sp, #8]
    462c:	0212      	lsls	r2, r2, #8
    462e:	4013      	ands	r3, r2
    4630:	4a05      	ldr	r2, [pc, #20]	; (4648 <__swhatbuf_r+0x4c>)
    4632:	189b      	adds	r3, r3, r2
    4634:	425a      	negs	r2, r3
    4636:	4153      	adcs	r3, r2
    4638:	602b      	str	r3, [r5, #0]
    463a:	e7ed      	b.n	4618 <__swhatbuf_r+0x1c>
    463c:	2340      	movs	r3, #64	; 0x40
    463e:	2000      	movs	r0, #0
    4640:	6023      	str	r3, [r4, #0]
    4642:	b010      	add	sp, #64	; 0x40
    4644:	bd70      	pop	{r4, r5, r6, pc}
    4646:	46c0      	nop			; (mov r8, r8)
    4648:	ffffe000 	.word	0xffffe000

0000464c <__smakebuf_r>:
    464c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    464e:	2602      	movs	r6, #2
    4650:	898b      	ldrh	r3, [r1, #12]
    4652:	0005      	movs	r5, r0
    4654:	000c      	movs	r4, r1
    4656:	4233      	tst	r3, r6
    4658:	d006      	beq.n	4668 <__smakebuf_r+0x1c>
    465a:	0023      	movs	r3, r4
    465c:	3347      	adds	r3, #71	; 0x47
    465e:	6023      	str	r3, [r4, #0]
    4660:	6123      	str	r3, [r4, #16]
    4662:	2301      	movs	r3, #1
    4664:	6163      	str	r3, [r4, #20]
    4666:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4668:	ab01      	add	r3, sp, #4
    466a:	466a      	mov	r2, sp
    466c:	f7ff ffc6 	bl	45fc <__swhatbuf_r>
    4670:	9900      	ldr	r1, [sp, #0]
    4672:	0007      	movs	r7, r0
    4674:	0028      	movs	r0, r5
    4676:	f7ff fc6d 	bl	3f54 <_malloc_r>
    467a:	2800      	cmp	r0, #0
    467c:	d108      	bne.n	4690 <__smakebuf_r+0x44>
    467e:	220c      	movs	r2, #12
    4680:	5ea3      	ldrsh	r3, [r4, r2]
    4682:	059a      	lsls	r2, r3, #22
    4684:	d4ef      	bmi.n	4666 <__smakebuf_r+0x1a>
    4686:	2203      	movs	r2, #3
    4688:	4393      	bics	r3, r2
    468a:	431e      	orrs	r6, r3
    468c:	81a6      	strh	r6, [r4, #12]
    468e:	e7e4      	b.n	465a <__smakebuf_r+0xe>
    4690:	4b0f      	ldr	r3, [pc, #60]	; (46d0 <__smakebuf_r+0x84>)
    4692:	62ab      	str	r3, [r5, #40]	; 0x28
    4694:	2380      	movs	r3, #128	; 0x80
    4696:	89a2      	ldrh	r2, [r4, #12]
    4698:	6020      	str	r0, [r4, #0]
    469a:	4313      	orrs	r3, r2
    469c:	81a3      	strh	r3, [r4, #12]
    469e:	9b00      	ldr	r3, [sp, #0]
    46a0:	6120      	str	r0, [r4, #16]
    46a2:	6163      	str	r3, [r4, #20]
    46a4:	9b01      	ldr	r3, [sp, #4]
    46a6:	2b00      	cmp	r3, #0
    46a8:	d00d      	beq.n	46c6 <__smakebuf_r+0x7a>
    46aa:	230e      	movs	r3, #14
    46ac:	5ee1      	ldrsh	r1, [r4, r3]
    46ae:	0028      	movs	r0, r5
    46b0:	f000 fc64 	bl	4f7c <_isatty_r>
    46b4:	2800      	cmp	r0, #0
    46b6:	d006      	beq.n	46c6 <__smakebuf_r+0x7a>
    46b8:	2203      	movs	r2, #3
    46ba:	89a3      	ldrh	r3, [r4, #12]
    46bc:	4393      	bics	r3, r2
    46be:	001a      	movs	r2, r3
    46c0:	2301      	movs	r3, #1
    46c2:	4313      	orrs	r3, r2
    46c4:	81a3      	strh	r3, [r4, #12]
    46c6:	89a0      	ldrh	r0, [r4, #12]
    46c8:	4338      	orrs	r0, r7
    46ca:	81a0      	strh	r0, [r4, #12]
    46cc:	e7cb      	b.n	4666 <__smakebuf_r+0x1a>
    46ce:	46c0      	nop			; (mov r8, r8)
    46d0:	0000444d 	.word	0x0000444d

000046d4 <__malloc_lock>:
    46d4:	4770      	bx	lr

000046d6 <__malloc_unlock>:
    46d6:	4770      	bx	lr

000046d8 <__sfputc_r>:
    46d8:	6893      	ldr	r3, [r2, #8]
    46da:	b510      	push	{r4, lr}
    46dc:	3b01      	subs	r3, #1
    46de:	6093      	str	r3, [r2, #8]
    46e0:	2b00      	cmp	r3, #0
    46e2:	da05      	bge.n	46f0 <__sfputc_r+0x18>
    46e4:	6994      	ldr	r4, [r2, #24]
    46e6:	42a3      	cmp	r3, r4
    46e8:	db08      	blt.n	46fc <__sfputc_r+0x24>
    46ea:	b2cb      	uxtb	r3, r1
    46ec:	2b0a      	cmp	r3, #10
    46ee:	d005      	beq.n	46fc <__sfputc_r+0x24>
    46f0:	6813      	ldr	r3, [r2, #0]
    46f2:	1c58      	adds	r0, r3, #1
    46f4:	6010      	str	r0, [r2, #0]
    46f6:	7019      	strb	r1, [r3, #0]
    46f8:	b2c8      	uxtb	r0, r1
    46fa:	bd10      	pop	{r4, pc}
    46fc:	f000 fb3a 	bl	4d74 <__swbuf_r>
    4700:	e7fb      	b.n	46fa <__sfputc_r+0x22>

00004702 <__sfputs_r>:
    4702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4704:	0006      	movs	r6, r0
    4706:	000f      	movs	r7, r1
    4708:	0014      	movs	r4, r2
    470a:	18d5      	adds	r5, r2, r3
    470c:	42ac      	cmp	r4, r5
    470e:	d101      	bne.n	4714 <__sfputs_r+0x12>
    4710:	2000      	movs	r0, #0
    4712:	e007      	b.n	4724 <__sfputs_r+0x22>
    4714:	7821      	ldrb	r1, [r4, #0]
    4716:	003a      	movs	r2, r7
    4718:	0030      	movs	r0, r6
    471a:	f7ff ffdd 	bl	46d8 <__sfputc_r>
    471e:	3401      	adds	r4, #1
    4720:	1c43      	adds	r3, r0, #1
    4722:	d1f3      	bne.n	470c <__sfputs_r+0xa>
    4724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004728 <_vfiprintf_r>:
    4728:	b5f0      	push	{r4, r5, r6, r7, lr}
    472a:	b09f      	sub	sp, #124	; 0x7c
    472c:	0006      	movs	r6, r0
    472e:	000f      	movs	r7, r1
    4730:	0014      	movs	r4, r2
    4732:	9305      	str	r3, [sp, #20]
    4734:	2800      	cmp	r0, #0
    4736:	d004      	beq.n	4742 <_vfiprintf_r+0x1a>
    4738:	6983      	ldr	r3, [r0, #24]
    473a:	2b00      	cmp	r3, #0
    473c:	d101      	bne.n	4742 <_vfiprintf_r+0x1a>
    473e:	f7ff fec7 	bl	44d0 <__sinit>
    4742:	4b7f      	ldr	r3, [pc, #508]	; (4940 <_vfiprintf_r+0x218>)
    4744:	429f      	cmp	r7, r3
    4746:	d15c      	bne.n	4802 <_vfiprintf_r+0xda>
    4748:	6877      	ldr	r7, [r6, #4]
    474a:	89bb      	ldrh	r3, [r7, #12]
    474c:	071b      	lsls	r3, r3, #28
    474e:	d562      	bpl.n	4816 <_vfiprintf_r+0xee>
    4750:	693b      	ldr	r3, [r7, #16]
    4752:	2b00      	cmp	r3, #0
    4754:	d05f      	beq.n	4816 <_vfiprintf_r+0xee>
    4756:	2300      	movs	r3, #0
    4758:	ad06      	add	r5, sp, #24
    475a:	616b      	str	r3, [r5, #20]
    475c:	3320      	adds	r3, #32
    475e:	766b      	strb	r3, [r5, #25]
    4760:	3310      	adds	r3, #16
    4762:	76ab      	strb	r3, [r5, #26]
    4764:	9402      	str	r4, [sp, #8]
    4766:	9c02      	ldr	r4, [sp, #8]
    4768:	7823      	ldrb	r3, [r4, #0]
    476a:	2b00      	cmp	r3, #0
    476c:	d15d      	bne.n	482a <_vfiprintf_r+0x102>
    476e:	9b02      	ldr	r3, [sp, #8]
    4770:	1ae3      	subs	r3, r4, r3
    4772:	9304      	str	r3, [sp, #16]
    4774:	d00d      	beq.n	4792 <_vfiprintf_r+0x6a>
    4776:	9b04      	ldr	r3, [sp, #16]
    4778:	9a02      	ldr	r2, [sp, #8]
    477a:	0039      	movs	r1, r7
    477c:	0030      	movs	r0, r6
    477e:	f7ff ffc0 	bl	4702 <__sfputs_r>
    4782:	1c43      	adds	r3, r0, #1
    4784:	d100      	bne.n	4788 <_vfiprintf_r+0x60>
    4786:	e0cc      	b.n	4922 <_vfiprintf_r+0x1fa>
    4788:	696a      	ldr	r2, [r5, #20]
    478a:	9b04      	ldr	r3, [sp, #16]
    478c:	4694      	mov	ip, r2
    478e:	4463      	add	r3, ip
    4790:	616b      	str	r3, [r5, #20]
    4792:	7823      	ldrb	r3, [r4, #0]
    4794:	2b00      	cmp	r3, #0
    4796:	d100      	bne.n	479a <_vfiprintf_r+0x72>
    4798:	e0c3      	b.n	4922 <_vfiprintf_r+0x1fa>
    479a:	2201      	movs	r2, #1
    479c:	2300      	movs	r3, #0
    479e:	4252      	negs	r2, r2
    47a0:	606a      	str	r2, [r5, #4]
    47a2:	a902      	add	r1, sp, #8
    47a4:	3254      	adds	r2, #84	; 0x54
    47a6:	1852      	adds	r2, r2, r1
    47a8:	3401      	adds	r4, #1
    47aa:	602b      	str	r3, [r5, #0]
    47ac:	60eb      	str	r3, [r5, #12]
    47ae:	60ab      	str	r3, [r5, #8]
    47b0:	7013      	strb	r3, [r2, #0]
    47b2:	65ab      	str	r3, [r5, #88]	; 0x58
    47b4:	7821      	ldrb	r1, [r4, #0]
    47b6:	2205      	movs	r2, #5
    47b8:	4862      	ldr	r0, [pc, #392]	; (4944 <_vfiprintf_r+0x21c>)
    47ba:	f000 fc05 	bl	4fc8 <memchr>
    47be:	1c63      	adds	r3, r4, #1
    47c0:	469c      	mov	ip, r3
    47c2:	2800      	cmp	r0, #0
    47c4:	d135      	bne.n	4832 <_vfiprintf_r+0x10a>
    47c6:	6829      	ldr	r1, [r5, #0]
    47c8:	06cb      	lsls	r3, r1, #27
    47ca:	d504      	bpl.n	47d6 <_vfiprintf_r+0xae>
    47cc:	2353      	movs	r3, #83	; 0x53
    47ce:	aa02      	add	r2, sp, #8
    47d0:	3020      	adds	r0, #32
    47d2:	189b      	adds	r3, r3, r2
    47d4:	7018      	strb	r0, [r3, #0]
    47d6:	070b      	lsls	r3, r1, #28
    47d8:	d504      	bpl.n	47e4 <_vfiprintf_r+0xbc>
    47da:	2353      	movs	r3, #83	; 0x53
    47dc:	202b      	movs	r0, #43	; 0x2b
    47de:	aa02      	add	r2, sp, #8
    47e0:	189b      	adds	r3, r3, r2
    47e2:	7018      	strb	r0, [r3, #0]
    47e4:	7823      	ldrb	r3, [r4, #0]
    47e6:	2b2a      	cmp	r3, #42	; 0x2a
    47e8:	d02c      	beq.n	4844 <_vfiprintf_r+0x11c>
    47ea:	2000      	movs	r0, #0
    47ec:	210a      	movs	r1, #10
    47ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    47f0:	7822      	ldrb	r2, [r4, #0]
    47f2:	3a30      	subs	r2, #48	; 0x30
    47f4:	2a09      	cmp	r2, #9
    47f6:	d800      	bhi.n	47fa <_vfiprintf_r+0xd2>
    47f8:	e06b      	b.n	48d2 <_vfiprintf_r+0x1aa>
    47fa:	2800      	cmp	r0, #0
    47fc:	d02a      	beq.n	4854 <_vfiprintf_r+0x12c>
    47fe:	9309      	str	r3, [sp, #36]	; 0x24
    4800:	e028      	b.n	4854 <_vfiprintf_r+0x12c>
    4802:	4b51      	ldr	r3, [pc, #324]	; (4948 <_vfiprintf_r+0x220>)
    4804:	429f      	cmp	r7, r3
    4806:	d101      	bne.n	480c <_vfiprintf_r+0xe4>
    4808:	68b7      	ldr	r7, [r6, #8]
    480a:	e79e      	b.n	474a <_vfiprintf_r+0x22>
    480c:	4b4f      	ldr	r3, [pc, #316]	; (494c <_vfiprintf_r+0x224>)
    480e:	429f      	cmp	r7, r3
    4810:	d19b      	bne.n	474a <_vfiprintf_r+0x22>
    4812:	68f7      	ldr	r7, [r6, #12]
    4814:	e799      	b.n	474a <_vfiprintf_r+0x22>
    4816:	0039      	movs	r1, r7
    4818:	0030      	movs	r0, r6
    481a:	f000 fb15 	bl	4e48 <__swsetup_r>
    481e:	2800      	cmp	r0, #0
    4820:	d099      	beq.n	4756 <_vfiprintf_r+0x2e>
    4822:	2001      	movs	r0, #1
    4824:	4240      	negs	r0, r0
    4826:	b01f      	add	sp, #124	; 0x7c
    4828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    482a:	2b25      	cmp	r3, #37	; 0x25
    482c:	d09f      	beq.n	476e <_vfiprintf_r+0x46>
    482e:	3401      	adds	r4, #1
    4830:	e79a      	b.n	4768 <_vfiprintf_r+0x40>
    4832:	4b44      	ldr	r3, [pc, #272]	; (4944 <_vfiprintf_r+0x21c>)
    4834:	6829      	ldr	r1, [r5, #0]
    4836:	1ac0      	subs	r0, r0, r3
    4838:	2301      	movs	r3, #1
    483a:	4083      	lsls	r3, r0
    483c:	430b      	orrs	r3, r1
    483e:	602b      	str	r3, [r5, #0]
    4840:	4664      	mov	r4, ip
    4842:	e7b7      	b.n	47b4 <_vfiprintf_r+0x8c>
    4844:	9b05      	ldr	r3, [sp, #20]
    4846:	1d18      	adds	r0, r3, #4
    4848:	681b      	ldr	r3, [r3, #0]
    484a:	9005      	str	r0, [sp, #20]
    484c:	2b00      	cmp	r3, #0
    484e:	db3a      	blt.n	48c6 <_vfiprintf_r+0x19e>
    4850:	9309      	str	r3, [sp, #36]	; 0x24
    4852:	4664      	mov	r4, ip
    4854:	7823      	ldrb	r3, [r4, #0]
    4856:	2b2e      	cmp	r3, #46	; 0x2e
    4858:	d10b      	bne.n	4872 <_vfiprintf_r+0x14a>
    485a:	7863      	ldrb	r3, [r4, #1]
    485c:	1c62      	adds	r2, r4, #1
    485e:	2b2a      	cmp	r3, #42	; 0x2a
    4860:	d13f      	bne.n	48e2 <_vfiprintf_r+0x1ba>
    4862:	9b05      	ldr	r3, [sp, #20]
    4864:	3402      	adds	r4, #2
    4866:	1d1a      	adds	r2, r3, #4
    4868:	681b      	ldr	r3, [r3, #0]
    486a:	9205      	str	r2, [sp, #20]
    486c:	2b00      	cmp	r3, #0
    486e:	db35      	blt.n	48dc <_vfiprintf_r+0x1b4>
    4870:	9307      	str	r3, [sp, #28]
    4872:	7821      	ldrb	r1, [r4, #0]
    4874:	2203      	movs	r2, #3
    4876:	4836      	ldr	r0, [pc, #216]	; (4950 <_vfiprintf_r+0x228>)
    4878:	f000 fba6 	bl	4fc8 <memchr>
    487c:	2800      	cmp	r0, #0
    487e:	d007      	beq.n	4890 <_vfiprintf_r+0x168>
    4880:	4b33      	ldr	r3, [pc, #204]	; (4950 <_vfiprintf_r+0x228>)
    4882:	682a      	ldr	r2, [r5, #0]
    4884:	1ac0      	subs	r0, r0, r3
    4886:	2340      	movs	r3, #64	; 0x40
    4888:	4083      	lsls	r3, r0
    488a:	4313      	orrs	r3, r2
    488c:	602b      	str	r3, [r5, #0]
    488e:	3401      	adds	r4, #1
    4890:	7821      	ldrb	r1, [r4, #0]
    4892:	1c63      	adds	r3, r4, #1
    4894:	2206      	movs	r2, #6
    4896:	482f      	ldr	r0, [pc, #188]	; (4954 <_vfiprintf_r+0x22c>)
    4898:	9302      	str	r3, [sp, #8]
    489a:	7629      	strb	r1, [r5, #24]
    489c:	f000 fb94 	bl	4fc8 <memchr>
    48a0:	2800      	cmp	r0, #0
    48a2:	d044      	beq.n	492e <_vfiprintf_r+0x206>
    48a4:	4b2c      	ldr	r3, [pc, #176]	; (4958 <_vfiprintf_r+0x230>)
    48a6:	2b00      	cmp	r3, #0
    48a8:	d12f      	bne.n	490a <_vfiprintf_r+0x1e2>
    48aa:	6829      	ldr	r1, [r5, #0]
    48ac:	9b05      	ldr	r3, [sp, #20]
    48ae:	2207      	movs	r2, #7
    48b0:	05c9      	lsls	r1, r1, #23
    48b2:	d528      	bpl.n	4906 <_vfiprintf_r+0x1de>
    48b4:	189b      	adds	r3, r3, r2
    48b6:	4393      	bics	r3, r2
    48b8:	3308      	adds	r3, #8
    48ba:	9305      	str	r3, [sp, #20]
    48bc:	696b      	ldr	r3, [r5, #20]
    48be:	9a03      	ldr	r2, [sp, #12]
    48c0:	189b      	adds	r3, r3, r2
    48c2:	616b      	str	r3, [r5, #20]
    48c4:	e74f      	b.n	4766 <_vfiprintf_r+0x3e>
    48c6:	425b      	negs	r3, r3
    48c8:	60eb      	str	r3, [r5, #12]
    48ca:	2302      	movs	r3, #2
    48cc:	430b      	orrs	r3, r1
    48ce:	602b      	str	r3, [r5, #0]
    48d0:	e7bf      	b.n	4852 <_vfiprintf_r+0x12a>
    48d2:	434b      	muls	r3, r1
    48d4:	3401      	adds	r4, #1
    48d6:	189b      	adds	r3, r3, r2
    48d8:	2001      	movs	r0, #1
    48da:	e789      	b.n	47f0 <_vfiprintf_r+0xc8>
    48dc:	2301      	movs	r3, #1
    48de:	425b      	negs	r3, r3
    48e0:	e7c6      	b.n	4870 <_vfiprintf_r+0x148>
    48e2:	2300      	movs	r3, #0
    48e4:	0014      	movs	r4, r2
    48e6:	200a      	movs	r0, #10
    48e8:	001a      	movs	r2, r3
    48ea:	606b      	str	r3, [r5, #4]
    48ec:	7821      	ldrb	r1, [r4, #0]
    48ee:	3930      	subs	r1, #48	; 0x30
    48f0:	2909      	cmp	r1, #9
    48f2:	d903      	bls.n	48fc <_vfiprintf_r+0x1d4>
    48f4:	2b00      	cmp	r3, #0
    48f6:	d0bc      	beq.n	4872 <_vfiprintf_r+0x14a>
    48f8:	9207      	str	r2, [sp, #28]
    48fa:	e7ba      	b.n	4872 <_vfiprintf_r+0x14a>
    48fc:	4342      	muls	r2, r0
    48fe:	3401      	adds	r4, #1
    4900:	1852      	adds	r2, r2, r1
    4902:	2301      	movs	r3, #1
    4904:	e7f2      	b.n	48ec <_vfiprintf_r+0x1c4>
    4906:	3307      	adds	r3, #7
    4908:	e7d5      	b.n	48b6 <_vfiprintf_r+0x18e>
    490a:	ab05      	add	r3, sp, #20
    490c:	9300      	str	r3, [sp, #0]
    490e:	003a      	movs	r2, r7
    4910:	4b12      	ldr	r3, [pc, #72]	; (495c <_vfiprintf_r+0x234>)
    4912:	0029      	movs	r1, r5
    4914:	0030      	movs	r0, r6
    4916:	e000      	b.n	491a <_vfiprintf_r+0x1f2>
    4918:	bf00      	nop
    491a:	9003      	str	r0, [sp, #12]
    491c:	9b03      	ldr	r3, [sp, #12]
    491e:	3301      	adds	r3, #1
    4920:	d1cc      	bne.n	48bc <_vfiprintf_r+0x194>
    4922:	89bb      	ldrh	r3, [r7, #12]
    4924:	065b      	lsls	r3, r3, #25
    4926:	d500      	bpl.n	492a <_vfiprintf_r+0x202>
    4928:	e77b      	b.n	4822 <_vfiprintf_r+0xfa>
    492a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    492c:	e77b      	b.n	4826 <_vfiprintf_r+0xfe>
    492e:	ab05      	add	r3, sp, #20
    4930:	9300      	str	r3, [sp, #0]
    4932:	003a      	movs	r2, r7
    4934:	4b09      	ldr	r3, [pc, #36]	; (495c <_vfiprintf_r+0x234>)
    4936:	0029      	movs	r1, r5
    4938:	0030      	movs	r0, r6
    493a:	f000 f87f 	bl	4a3c <_printf_i>
    493e:	e7ec      	b.n	491a <_vfiprintf_r+0x1f2>
    4940:	000073c4 	.word	0x000073c4
    4944:	00007404 	.word	0x00007404
    4948:	000073e4 	.word	0x000073e4
    494c:	000073a4 	.word	0x000073a4
    4950:	0000740a 	.word	0x0000740a
    4954:	0000740e 	.word	0x0000740e
    4958:	00000000 	.word	0x00000000
    495c:	00004703 	.word	0x00004703

00004960 <_printf_common>:
    4960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4962:	0015      	movs	r5, r2
    4964:	9301      	str	r3, [sp, #4]
    4966:	688a      	ldr	r2, [r1, #8]
    4968:	690b      	ldr	r3, [r1, #16]
    496a:	9000      	str	r0, [sp, #0]
    496c:	000c      	movs	r4, r1
    496e:	4293      	cmp	r3, r2
    4970:	da00      	bge.n	4974 <_printf_common+0x14>
    4972:	0013      	movs	r3, r2
    4974:	0022      	movs	r2, r4
    4976:	602b      	str	r3, [r5, #0]
    4978:	3243      	adds	r2, #67	; 0x43
    497a:	7812      	ldrb	r2, [r2, #0]
    497c:	2a00      	cmp	r2, #0
    497e:	d001      	beq.n	4984 <_printf_common+0x24>
    4980:	3301      	adds	r3, #1
    4982:	602b      	str	r3, [r5, #0]
    4984:	6823      	ldr	r3, [r4, #0]
    4986:	069b      	lsls	r3, r3, #26
    4988:	d502      	bpl.n	4990 <_printf_common+0x30>
    498a:	682b      	ldr	r3, [r5, #0]
    498c:	3302      	adds	r3, #2
    498e:	602b      	str	r3, [r5, #0]
    4990:	2706      	movs	r7, #6
    4992:	6823      	ldr	r3, [r4, #0]
    4994:	401f      	ands	r7, r3
    4996:	d027      	beq.n	49e8 <_printf_common+0x88>
    4998:	0023      	movs	r3, r4
    499a:	3343      	adds	r3, #67	; 0x43
    499c:	781b      	ldrb	r3, [r3, #0]
    499e:	1e5a      	subs	r2, r3, #1
    49a0:	4193      	sbcs	r3, r2
    49a2:	6822      	ldr	r2, [r4, #0]
    49a4:	0692      	lsls	r2, r2, #26
    49a6:	d430      	bmi.n	4a0a <_printf_common+0xaa>
    49a8:	0022      	movs	r2, r4
    49aa:	9901      	ldr	r1, [sp, #4]
    49ac:	3243      	adds	r2, #67	; 0x43
    49ae:	9800      	ldr	r0, [sp, #0]
    49b0:	9e08      	ldr	r6, [sp, #32]
    49b2:	47b0      	blx	r6
    49b4:	1c43      	adds	r3, r0, #1
    49b6:	d025      	beq.n	4a04 <_printf_common+0xa4>
    49b8:	2306      	movs	r3, #6
    49ba:	6820      	ldr	r0, [r4, #0]
    49bc:	682a      	ldr	r2, [r5, #0]
    49be:	68e1      	ldr	r1, [r4, #12]
    49c0:	4003      	ands	r3, r0
    49c2:	2500      	movs	r5, #0
    49c4:	2b04      	cmp	r3, #4
    49c6:	d103      	bne.n	49d0 <_printf_common+0x70>
    49c8:	1a8d      	subs	r5, r1, r2
    49ca:	43eb      	mvns	r3, r5
    49cc:	17db      	asrs	r3, r3, #31
    49ce:	401d      	ands	r5, r3
    49d0:	68a3      	ldr	r3, [r4, #8]
    49d2:	6922      	ldr	r2, [r4, #16]
    49d4:	4293      	cmp	r3, r2
    49d6:	dd01      	ble.n	49dc <_printf_common+0x7c>
    49d8:	1a9b      	subs	r3, r3, r2
    49da:	18ed      	adds	r5, r5, r3
    49dc:	2700      	movs	r7, #0
    49de:	42bd      	cmp	r5, r7
    49e0:	d120      	bne.n	4a24 <_printf_common+0xc4>
    49e2:	2000      	movs	r0, #0
    49e4:	e010      	b.n	4a08 <_printf_common+0xa8>
    49e6:	3701      	adds	r7, #1
    49e8:	68e3      	ldr	r3, [r4, #12]
    49ea:	682a      	ldr	r2, [r5, #0]
    49ec:	1a9b      	subs	r3, r3, r2
    49ee:	429f      	cmp	r7, r3
    49f0:	dad2      	bge.n	4998 <_printf_common+0x38>
    49f2:	0022      	movs	r2, r4
    49f4:	2301      	movs	r3, #1
    49f6:	3219      	adds	r2, #25
    49f8:	9901      	ldr	r1, [sp, #4]
    49fa:	9800      	ldr	r0, [sp, #0]
    49fc:	9e08      	ldr	r6, [sp, #32]
    49fe:	47b0      	blx	r6
    4a00:	1c43      	adds	r3, r0, #1
    4a02:	d1f0      	bne.n	49e6 <_printf_common+0x86>
    4a04:	2001      	movs	r0, #1
    4a06:	4240      	negs	r0, r0
    4a08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4a0a:	2030      	movs	r0, #48	; 0x30
    4a0c:	18e1      	adds	r1, r4, r3
    4a0e:	3143      	adds	r1, #67	; 0x43
    4a10:	7008      	strb	r0, [r1, #0]
    4a12:	0021      	movs	r1, r4
    4a14:	1c5a      	adds	r2, r3, #1
    4a16:	3145      	adds	r1, #69	; 0x45
    4a18:	7809      	ldrb	r1, [r1, #0]
    4a1a:	18a2      	adds	r2, r4, r2
    4a1c:	3243      	adds	r2, #67	; 0x43
    4a1e:	3302      	adds	r3, #2
    4a20:	7011      	strb	r1, [r2, #0]
    4a22:	e7c1      	b.n	49a8 <_printf_common+0x48>
    4a24:	0022      	movs	r2, r4
    4a26:	2301      	movs	r3, #1
    4a28:	321a      	adds	r2, #26
    4a2a:	9901      	ldr	r1, [sp, #4]
    4a2c:	9800      	ldr	r0, [sp, #0]
    4a2e:	9e08      	ldr	r6, [sp, #32]
    4a30:	47b0      	blx	r6
    4a32:	1c43      	adds	r3, r0, #1
    4a34:	d0e6      	beq.n	4a04 <_printf_common+0xa4>
    4a36:	3701      	adds	r7, #1
    4a38:	e7d1      	b.n	49de <_printf_common+0x7e>
	...

00004a3c <_printf_i>:
    4a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a3e:	b08b      	sub	sp, #44	; 0x2c
    4a40:	9206      	str	r2, [sp, #24]
    4a42:	000a      	movs	r2, r1
    4a44:	3243      	adds	r2, #67	; 0x43
    4a46:	9307      	str	r3, [sp, #28]
    4a48:	9005      	str	r0, [sp, #20]
    4a4a:	9204      	str	r2, [sp, #16]
    4a4c:	7e0a      	ldrb	r2, [r1, #24]
    4a4e:	000c      	movs	r4, r1
    4a50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4a52:	2a6e      	cmp	r2, #110	; 0x6e
    4a54:	d100      	bne.n	4a58 <_printf_i+0x1c>
    4a56:	e08f      	b.n	4b78 <_printf_i+0x13c>
    4a58:	d817      	bhi.n	4a8a <_printf_i+0x4e>
    4a5a:	2a63      	cmp	r2, #99	; 0x63
    4a5c:	d02c      	beq.n	4ab8 <_printf_i+0x7c>
    4a5e:	d808      	bhi.n	4a72 <_printf_i+0x36>
    4a60:	2a00      	cmp	r2, #0
    4a62:	d100      	bne.n	4a66 <_printf_i+0x2a>
    4a64:	e099      	b.n	4b9a <_printf_i+0x15e>
    4a66:	2a58      	cmp	r2, #88	; 0x58
    4a68:	d054      	beq.n	4b14 <_printf_i+0xd8>
    4a6a:	0026      	movs	r6, r4
    4a6c:	3642      	adds	r6, #66	; 0x42
    4a6e:	7032      	strb	r2, [r6, #0]
    4a70:	e029      	b.n	4ac6 <_printf_i+0x8a>
    4a72:	2a64      	cmp	r2, #100	; 0x64
    4a74:	d001      	beq.n	4a7a <_printf_i+0x3e>
    4a76:	2a69      	cmp	r2, #105	; 0x69
    4a78:	d1f7      	bne.n	4a6a <_printf_i+0x2e>
    4a7a:	6821      	ldr	r1, [r4, #0]
    4a7c:	681a      	ldr	r2, [r3, #0]
    4a7e:	0608      	lsls	r0, r1, #24
    4a80:	d523      	bpl.n	4aca <_printf_i+0x8e>
    4a82:	1d11      	adds	r1, r2, #4
    4a84:	6019      	str	r1, [r3, #0]
    4a86:	6815      	ldr	r5, [r2, #0]
    4a88:	e025      	b.n	4ad6 <_printf_i+0x9a>
    4a8a:	2a73      	cmp	r2, #115	; 0x73
    4a8c:	d100      	bne.n	4a90 <_printf_i+0x54>
    4a8e:	e088      	b.n	4ba2 <_printf_i+0x166>
    4a90:	d808      	bhi.n	4aa4 <_printf_i+0x68>
    4a92:	2a6f      	cmp	r2, #111	; 0x6f
    4a94:	d029      	beq.n	4aea <_printf_i+0xae>
    4a96:	2a70      	cmp	r2, #112	; 0x70
    4a98:	d1e7      	bne.n	4a6a <_printf_i+0x2e>
    4a9a:	2220      	movs	r2, #32
    4a9c:	6809      	ldr	r1, [r1, #0]
    4a9e:	430a      	orrs	r2, r1
    4aa0:	6022      	str	r2, [r4, #0]
    4aa2:	e003      	b.n	4aac <_printf_i+0x70>
    4aa4:	2a75      	cmp	r2, #117	; 0x75
    4aa6:	d020      	beq.n	4aea <_printf_i+0xae>
    4aa8:	2a78      	cmp	r2, #120	; 0x78
    4aaa:	d1de      	bne.n	4a6a <_printf_i+0x2e>
    4aac:	0022      	movs	r2, r4
    4aae:	2178      	movs	r1, #120	; 0x78
    4ab0:	3245      	adds	r2, #69	; 0x45
    4ab2:	7011      	strb	r1, [r2, #0]
    4ab4:	4a6c      	ldr	r2, [pc, #432]	; (4c68 <_printf_i+0x22c>)
    4ab6:	e030      	b.n	4b1a <_printf_i+0xde>
    4ab8:	000e      	movs	r6, r1
    4aba:	681a      	ldr	r2, [r3, #0]
    4abc:	3642      	adds	r6, #66	; 0x42
    4abe:	1d11      	adds	r1, r2, #4
    4ac0:	6019      	str	r1, [r3, #0]
    4ac2:	6813      	ldr	r3, [r2, #0]
    4ac4:	7033      	strb	r3, [r6, #0]
    4ac6:	2301      	movs	r3, #1
    4ac8:	e079      	b.n	4bbe <_printf_i+0x182>
    4aca:	0649      	lsls	r1, r1, #25
    4acc:	d5d9      	bpl.n	4a82 <_printf_i+0x46>
    4ace:	1d11      	adds	r1, r2, #4
    4ad0:	6019      	str	r1, [r3, #0]
    4ad2:	2300      	movs	r3, #0
    4ad4:	5ed5      	ldrsh	r5, [r2, r3]
    4ad6:	2d00      	cmp	r5, #0
    4ad8:	da03      	bge.n	4ae2 <_printf_i+0xa6>
    4ada:	232d      	movs	r3, #45	; 0x2d
    4adc:	9a04      	ldr	r2, [sp, #16]
    4ade:	426d      	negs	r5, r5
    4ae0:	7013      	strb	r3, [r2, #0]
    4ae2:	4b62      	ldr	r3, [pc, #392]	; (4c6c <_printf_i+0x230>)
    4ae4:	270a      	movs	r7, #10
    4ae6:	9303      	str	r3, [sp, #12]
    4ae8:	e02f      	b.n	4b4a <_printf_i+0x10e>
    4aea:	6820      	ldr	r0, [r4, #0]
    4aec:	6819      	ldr	r1, [r3, #0]
    4aee:	0605      	lsls	r5, r0, #24
    4af0:	d503      	bpl.n	4afa <_printf_i+0xbe>
    4af2:	1d08      	adds	r0, r1, #4
    4af4:	6018      	str	r0, [r3, #0]
    4af6:	680d      	ldr	r5, [r1, #0]
    4af8:	e005      	b.n	4b06 <_printf_i+0xca>
    4afa:	0640      	lsls	r0, r0, #25
    4afc:	d5f9      	bpl.n	4af2 <_printf_i+0xb6>
    4afe:	680d      	ldr	r5, [r1, #0]
    4b00:	1d08      	adds	r0, r1, #4
    4b02:	6018      	str	r0, [r3, #0]
    4b04:	b2ad      	uxth	r5, r5
    4b06:	4b59      	ldr	r3, [pc, #356]	; (4c6c <_printf_i+0x230>)
    4b08:	2708      	movs	r7, #8
    4b0a:	9303      	str	r3, [sp, #12]
    4b0c:	2a6f      	cmp	r2, #111	; 0x6f
    4b0e:	d018      	beq.n	4b42 <_printf_i+0x106>
    4b10:	270a      	movs	r7, #10
    4b12:	e016      	b.n	4b42 <_printf_i+0x106>
    4b14:	3145      	adds	r1, #69	; 0x45
    4b16:	700a      	strb	r2, [r1, #0]
    4b18:	4a54      	ldr	r2, [pc, #336]	; (4c6c <_printf_i+0x230>)
    4b1a:	9203      	str	r2, [sp, #12]
    4b1c:	681a      	ldr	r2, [r3, #0]
    4b1e:	6821      	ldr	r1, [r4, #0]
    4b20:	1d10      	adds	r0, r2, #4
    4b22:	6018      	str	r0, [r3, #0]
    4b24:	6815      	ldr	r5, [r2, #0]
    4b26:	0608      	lsls	r0, r1, #24
    4b28:	d522      	bpl.n	4b70 <_printf_i+0x134>
    4b2a:	07cb      	lsls	r3, r1, #31
    4b2c:	d502      	bpl.n	4b34 <_printf_i+0xf8>
    4b2e:	2320      	movs	r3, #32
    4b30:	4319      	orrs	r1, r3
    4b32:	6021      	str	r1, [r4, #0]
    4b34:	2710      	movs	r7, #16
    4b36:	2d00      	cmp	r5, #0
    4b38:	d103      	bne.n	4b42 <_printf_i+0x106>
    4b3a:	2320      	movs	r3, #32
    4b3c:	6822      	ldr	r2, [r4, #0]
    4b3e:	439a      	bics	r2, r3
    4b40:	6022      	str	r2, [r4, #0]
    4b42:	0023      	movs	r3, r4
    4b44:	2200      	movs	r2, #0
    4b46:	3343      	adds	r3, #67	; 0x43
    4b48:	701a      	strb	r2, [r3, #0]
    4b4a:	6863      	ldr	r3, [r4, #4]
    4b4c:	60a3      	str	r3, [r4, #8]
    4b4e:	2b00      	cmp	r3, #0
    4b50:	db5c      	blt.n	4c0c <_printf_i+0x1d0>
    4b52:	2204      	movs	r2, #4
    4b54:	6821      	ldr	r1, [r4, #0]
    4b56:	4391      	bics	r1, r2
    4b58:	6021      	str	r1, [r4, #0]
    4b5a:	2d00      	cmp	r5, #0
    4b5c:	d158      	bne.n	4c10 <_printf_i+0x1d4>
    4b5e:	9e04      	ldr	r6, [sp, #16]
    4b60:	2b00      	cmp	r3, #0
    4b62:	d064      	beq.n	4c2e <_printf_i+0x1f2>
    4b64:	0026      	movs	r6, r4
    4b66:	9b03      	ldr	r3, [sp, #12]
    4b68:	3642      	adds	r6, #66	; 0x42
    4b6a:	781b      	ldrb	r3, [r3, #0]
    4b6c:	7033      	strb	r3, [r6, #0]
    4b6e:	e05e      	b.n	4c2e <_printf_i+0x1f2>
    4b70:	0648      	lsls	r0, r1, #25
    4b72:	d5da      	bpl.n	4b2a <_printf_i+0xee>
    4b74:	b2ad      	uxth	r5, r5
    4b76:	e7d8      	b.n	4b2a <_printf_i+0xee>
    4b78:	6809      	ldr	r1, [r1, #0]
    4b7a:	681a      	ldr	r2, [r3, #0]
    4b7c:	0608      	lsls	r0, r1, #24
    4b7e:	d505      	bpl.n	4b8c <_printf_i+0x150>
    4b80:	1d11      	adds	r1, r2, #4
    4b82:	6019      	str	r1, [r3, #0]
    4b84:	6813      	ldr	r3, [r2, #0]
    4b86:	6962      	ldr	r2, [r4, #20]
    4b88:	601a      	str	r2, [r3, #0]
    4b8a:	e006      	b.n	4b9a <_printf_i+0x15e>
    4b8c:	0649      	lsls	r1, r1, #25
    4b8e:	d5f7      	bpl.n	4b80 <_printf_i+0x144>
    4b90:	1d11      	adds	r1, r2, #4
    4b92:	6019      	str	r1, [r3, #0]
    4b94:	6813      	ldr	r3, [r2, #0]
    4b96:	8aa2      	ldrh	r2, [r4, #20]
    4b98:	801a      	strh	r2, [r3, #0]
    4b9a:	2300      	movs	r3, #0
    4b9c:	9e04      	ldr	r6, [sp, #16]
    4b9e:	6123      	str	r3, [r4, #16]
    4ba0:	e054      	b.n	4c4c <_printf_i+0x210>
    4ba2:	681a      	ldr	r2, [r3, #0]
    4ba4:	1d11      	adds	r1, r2, #4
    4ba6:	6019      	str	r1, [r3, #0]
    4ba8:	6816      	ldr	r6, [r2, #0]
    4baa:	2100      	movs	r1, #0
    4bac:	6862      	ldr	r2, [r4, #4]
    4bae:	0030      	movs	r0, r6
    4bb0:	f000 fa0a 	bl	4fc8 <memchr>
    4bb4:	2800      	cmp	r0, #0
    4bb6:	d001      	beq.n	4bbc <_printf_i+0x180>
    4bb8:	1b80      	subs	r0, r0, r6
    4bba:	6060      	str	r0, [r4, #4]
    4bbc:	6863      	ldr	r3, [r4, #4]
    4bbe:	6123      	str	r3, [r4, #16]
    4bc0:	2300      	movs	r3, #0
    4bc2:	9a04      	ldr	r2, [sp, #16]
    4bc4:	7013      	strb	r3, [r2, #0]
    4bc6:	e041      	b.n	4c4c <_printf_i+0x210>
    4bc8:	6923      	ldr	r3, [r4, #16]
    4bca:	0032      	movs	r2, r6
    4bcc:	9906      	ldr	r1, [sp, #24]
    4bce:	9805      	ldr	r0, [sp, #20]
    4bd0:	9d07      	ldr	r5, [sp, #28]
    4bd2:	47a8      	blx	r5
    4bd4:	1c43      	adds	r3, r0, #1
    4bd6:	d043      	beq.n	4c60 <_printf_i+0x224>
    4bd8:	6823      	ldr	r3, [r4, #0]
    4bda:	2500      	movs	r5, #0
    4bdc:	079b      	lsls	r3, r3, #30
    4bde:	d40f      	bmi.n	4c00 <_printf_i+0x1c4>
    4be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4be2:	68e0      	ldr	r0, [r4, #12]
    4be4:	4298      	cmp	r0, r3
    4be6:	da3d      	bge.n	4c64 <_printf_i+0x228>
    4be8:	0018      	movs	r0, r3
    4bea:	e03b      	b.n	4c64 <_printf_i+0x228>
    4bec:	0022      	movs	r2, r4
    4bee:	2301      	movs	r3, #1
    4bf0:	3219      	adds	r2, #25
    4bf2:	9906      	ldr	r1, [sp, #24]
    4bf4:	9805      	ldr	r0, [sp, #20]
    4bf6:	9e07      	ldr	r6, [sp, #28]
    4bf8:	47b0      	blx	r6
    4bfa:	1c43      	adds	r3, r0, #1
    4bfc:	d030      	beq.n	4c60 <_printf_i+0x224>
    4bfe:	3501      	adds	r5, #1
    4c00:	68e3      	ldr	r3, [r4, #12]
    4c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4c04:	1a9b      	subs	r3, r3, r2
    4c06:	429d      	cmp	r5, r3
    4c08:	dbf0      	blt.n	4bec <_printf_i+0x1b0>
    4c0a:	e7e9      	b.n	4be0 <_printf_i+0x1a4>
    4c0c:	2d00      	cmp	r5, #0
    4c0e:	d0a9      	beq.n	4b64 <_printf_i+0x128>
    4c10:	9e04      	ldr	r6, [sp, #16]
    4c12:	0028      	movs	r0, r5
    4c14:	0039      	movs	r1, r7
    4c16:	f7fe fff9 	bl	3c0c <__aeabi_uidivmod>
    4c1a:	9b03      	ldr	r3, [sp, #12]
    4c1c:	3e01      	subs	r6, #1
    4c1e:	5c5b      	ldrb	r3, [r3, r1]
    4c20:	0028      	movs	r0, r5
    4c22:	7033      	strb	r3, [r6, #0]
    4c24:	0039      	movs	r1, r7
    4c26:	f7fe ff6b 	bl	3b00 <__udivsi3>
    4c2a:	1e05      	subs	r5, r0, #0
    4c2c:	d1f1      	bne.n	4c12 <_printf_i+0x1d6>
    4c2e:	2f08      	cmp	r7, #8
    4c30:	d109      	bne.n	4c46 <_printf_i+0x20a>
    4c32:	6823      	ldr	r3, [r4, #0]
    4c34:	07db      	lsls	r3, r3, #31
    4c36:	d506      	bpl.n	4c46 <_printf_i+0x20a>
    4c38:	6863      	ldr	r3, [r4, #4]
    4c3a:	6922      	ldr	r2, [r4, #16]
    4c3c:	4293      	cmp	r3, r2
    4c3e:	dc02      	bgt.n	4c46 <_printf_i+0x20a>
    4c40:	2330      	movs	r3, #48	; 0x30
    4c42:	3e01      	subs	r6, #1
    4c44:	7033      	strb	r3, [r6, #0]
    4c46:	9b04      	ldr	r3, [sp, #16]
    4c48:	1b9b      	subs	r3, r3, r6
    4c4a:	6123      	str	r3, [r4, #16]
    4c4c:	9b07      	ldr	r3, [sp, #28]
    4c4e:	aa09      	add	r2, sp, #36	; 0x24
    4c50:	9300      	str	r3, [sp, #0]
    4c52:	0021      	movs	r1, r4
    4c54:	9b06      	ldr	r3, [sp, #24]
    4c56:	9805      	ldr	r0, [sp, #20]
    4c58:	f7ff fe82 	bl	4960 <_printf_common>
    4c5c:	1c43      	adds	r3, r0, #1
    4c5e:	d1b3      	bne.n	4bc8 <_printf_i+0x18c>
    4c60:	2001      	movs	r0, #1
    4c62:	4240      	negs	r0, r0
    4c64:	b00b      	add	sp, #44	; 0x2c
    4c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c68:	00007426 	.word	0x00007426
    4c6c:	00007415 	.word	0x00007415

00004c70 <_putc_r>:
    4c70:	b570      	push	{r4, r5, r6, lr}
    4c72:	0006      	movs	r6, r0
    4c74:	000d      	movs	r5, r1
    4c76:	0014      	movs	r4, r2
    4c78:	2800      	cmp	r0, #0
    4c7a:	d004      	beq.n	4c86 <_putc_r+0x16>
    4c7c:	6983      	ldr	r3, [r0, #24]
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d101      	bne.n	4c86 <_putc_r+0x16>
    4c82:	f7ff fc25 	bl	44d0 <__sinit>
    4c86:	4b12      	ldr	r3, [pc, #72]	; (4cd0 <_putc_r+0x60>)
    4c88:	429c      	cmp	r4, r3
    4c8a:	d111      	bne.n	4cb0 <_putc_r+0x40>
    4c8c:	6874      	ldr	r4, [r6, #4]
    4c8e:	68a3      	ldr	r3, [r4, #8]
    4c90:	3b01      	subs	r3, #1
    4c92:	60a3      	str	r3, [r4, #8]
    4c94:	2b00      	cmp	r3, #0
    4c96:	da05      	bge.n	4ca4 <_putc_r+0x34>
    4c98:	69a2      	ldr	r2, [r4, #24]
    4c9a:	4293      	cmp	r3, r2
    4c9c:	db12      	blt.n	4cc4 <_putc_r+0x54>
    4c9e:	b2eb      	uxtb	r3, r5
    4ca0:	2b0a      	cmp	r3, #10
    4ca2:	d00f      	beq.n	4cc4 <_putc_r+0x54>
    4ca4:	6823      	ldr	r3, [r4, #0]
    4ca6:	b2e8      	uxtb	r0, r5
    4ca8:	1c5a      	adds	r2, r3, #1
    4caa:	6022      	str	r2, [r4, #0]
    4cac:	701d      	strb	r5, [r3, #0]
    4cae:	bd70      	pop	{r4, r5, r6, pc}
    4cb0:	4b08      	ldr	r3, [pc, #32]	; (4cd4 <_putc_r+0x64>)
    4cb2:	429c      	cmp	r4, r3
    4cb4:	d101      	bne.n	4cba <_putc_r+0x4a>
    4cb6:	68b4      	ldr	r4, [r6, #8]
    4cb8:	e7e9      	b.n	4c8e <_putc_r+0x1e>
    4cba:	4b07      	ldr	r3, [pc, #28]	; (4cd8 <_putc_r+0x68>)
    4cbc:	429c      	cmp	r4, r3
    4cbe:	d1e6      	bne.n	4c8e <_putc_r+0x1e>
    4cc0:	68f4      	ldr	r4, [r6, #12]
    4cc2:	e7e4      	b.n	4c8e <_putc_r+0x1e>
    4cc4:	0022      	movs	r2, r4
    4cc6:	0029      	movs	r1, r5
    4cc8:	0030      	movs	r0, r6
    4cca:	f000 f853 	bl	4d74 <__swbuf_r>
    4cce:	e7ee      	b.n	4cae <_putc_r+0x3e>
    4cd0:	000073c4 	.word	0x000073c4
    4cd4:	000073e4 	.word	0x000073e4
    4cd8:	000073a4 	.word	0x000073a4

00004cdc <__sread>:
    4cdc:	b570      	push	{r4, r5, r6, lr}
    4cde:	000c      	movs	r4, r1
    4ce0:	250e      	movs	r5, #14
    4ce2:	5f49      	ldrsh	r1, [r1, r5]
    4ce4:	f000 f97c 	bl	4fe0 <_read_r>
    4ce8:	2800      	cmp	r0, #0
    4cea:	db03      	blt.n	4cf4 <__sread+0x18>
    4cec:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4cee:	181b      	adds	r3, r3, r0
    4cf0:	6563      	str	r3, [r4, #84]	; 0x54
    4cf2:	bd70      	pop	{r4, r5, r6, pc}
    4cf4:	89a3      	ldrh	r3, [r4, #12]
    4cf6:	4a02      	ldr	r2, [pc, #8]	; (4d00 <__sread+0x24>)
    4cf8:	4013      	ands	r3, r2
    4cfa:	81a3      	strh	r3, [r4, #12]
    4cfc:	e7f9      	b.n	4cf2 <__sread+0x16>
    4cfe:	46c0      	nop			; (mov r8, r8)
    4d00:	ffffefff 	.word	0xffffefff

00004d04 <__swrite>:
    4d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d06:	001f      	movs	r7, r3
    4d08:	898b      	ldrh	r3, [r1, #12]
    4d0a:	0005      	movs	r5, r0
    4d0c:	000c      	movs	r4, r1
    4d0e:	0016      	movs	r6, r2
    4d10:	05db      	lsls	r3, r3, #23
    4d12:	d505      	bpl.n	4d20 <__swrite+0x1c>
    4d14:	230e      	movs	r3, #14
    4d16:	5ec9      	ldrsh	r1, [r1, r3]
    4d18:	2200      	movs	r2, #0
    4d1a:	2302      	movs	r3, #2
    4d1c:	f000 f940 	bl	4fa0 <_lseek_r>
    4d20:	89a3      	ldrh	r3, [r4, #12]
    4d22:	4a05      	ldr	r2, [pc, #20]	; (4d38 <__swrite+0x34>)
    4d24:	0028      	movs	r0, r5
    4d26:	4013      	ands	r3, r2
    4d28:	81a3      	strh	r3, [r4, #12]
    4d2a:	0032      	movs	r2, r6
    4d2c:	230e      	movs	r3, #14
    4d2e:	5ee1      	ldrsh	r1, [r4, r3]
    4d30:	003b      	movs	r3, r7
    4d32:	f000 f875 	bl	4e20 <_write_r>
    4d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d38:	ffffefff 	.word	0xffffefff

00004d3c <__sseek>:
    4d3c:	b570      	push	{r4, r5, r6, lr}
    4d3e:	000c      	movs	r4, r1
    4d40:	250e      	movs	r5, #14
    4d42:	5f49      	ldrsh	r1, [r1, r5]
    4d44:	f000 f92c 	bl	4fa0 <_lseek_r>
    4d48:	89a3      	ldrh	r3, [r4, #12]
    4d4a:	1c42      	adds	r2, r0, #1
    4d4c:	d103      	bne.n	4d56 <__sseek+0x1a>
    4d4e:	4a05      	ldr	r2, [pc, #20]	; (4d64 <__sseek+0x28>)
    4d50:	4013      	ands	r3, r2
    4d52:	81a3      	strh	r3, [r4, #12]
    4d54:	bd70      	pop	{r4, r5, r6, pc}
    4d56:	2280      	movs	r2, #128	; 0x80
    4d58:	0152      	lsls	r2, r2, #5
    4d5a:	4313      	orrs	r3, r2
    4d5c:	81a3      	strh	r3, [r4, #12]
    4d5e:	6560      	str	r0, [r4, #84]	; 0x54
    4d60:	e7f8      	b.n	4d54 <__sseek+0x18>
    4d62:	46c0      	nop			; (mov r8, r8)
    4d64:	ffffefff 	.word	0xffffefff

00004d68 <__sclose>:
    4d68:	b510      	push	{r4, lr}
    4d6a:	230e      	movs	r3, #14
    4d6c:	5ec9      	ldrsh	r1, [r1, r3]
    4d6e:	f000 f8e1 	bl	4f34 <_close_r>
    4d72:	bd10      	pop	{r4, pc}

00004d74 <__swbuf_r>:
    4d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d76:	0005      	movs	r5, r0
    4d78:	000e      	movs	r6, r1
    4d7a:	0014      	movs	r4, r2
    4d7c:	2800      	cmp	r0, #0
    4d7e:	d004      	beq.n	4d8a <__swbuf_r+0x16>
    4d80:	6983      	ldr	r3, [r0, #24]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d101      	bne.n	4d8a <__swbuf_r+0x16>
    4d86:	f7ff fba3 	bl	44d0 <__sinit>
    4d8a:	4b22      	ldr	r3, [pc, #136]	; (4e14 <__swbuf_r+0xa0>)
    4d8c:	429c      	cmp	r4, r3
    4d8e:	d12d      	bne.n	4dec <__swbuf_r+0x78>
    4d90:	686c      	ldr	r4, [r5, #4]
    4d92:	69a3      	ldr	r3, [r4, #24]
    4d94:	60a3      	str	r3, [r4, #8]
    4d96:	89a3      	ldrh	r3, [r4, #12]
    4d98:	071b      	lsls	r3, r3, #28
    4d9a:	d531      	bpl.n	4e00 <__swbuf_r+0x8c>
    4d9c:	6923      	ldr	r3, [r4, #16]
    4d9e:	2b00      	cmp	r3, #0
    4da0:	d02e      	beq.n	4e00 <__swbuf_r+0x8c>
    4da2:	6823      	ldr	r3, [r4, #0]
    4da4:	6922      	ldr	r2, [r4, #16]
    4da6:	b2f7      	uxtb	r7, r6
    4da8:	1a98      	subs	r0, r3, r2
    4daa:	6963      	ldr	r3, [r4, #20]
    4dac:	b2f6      	uxtb	r6, r6
    4dae:	4298      	cmp	r0, r3
    4db0:	db05      	blt.n	4dbe <__swbuf_r+0x4a>
    4db2:	0021      	movs	r1, r4
    4db4:	0028      	movs	r0, r5
    4db6:	f7ff fb1d 	bl	43f4 <_fflush_r>
    4dba:	2800      	cmp	r0, #0
    4dbc:	d126      	bne.n	4e0c <__swbuf_r+0x98>
    4dbe:	68a3      	ldr	r3, [r4, #8]
    4dc0:	3001      	adds	r0, #1
    4dc2:	3b01      	subs	r3, #1
    4dc4:	60a3      	str	r3, [r4, #8]
    4dc6:	6823      	ldr	r3, [r4, #0]
    4dc8:	1c5a      	adds	r2, r3, #1
    4dca:	6022      	str	r2, [r4, #0]
    4dcc:	701f      	strb	r7, [r3, #0]
    4dce:	6963      	ldr	r3, [r4, #20]
    4dd0:	4298      	cmp	r0, r3
    4dd2:	d004      	beq.n	4dde <__swbuf_r+0x6a>
    4dd4:	89a3      	ldrh	r3, [r4, #12]
    4dd6:	07db      	lsls	r3, r3, #31
    4dd8:	d51a      	bpl.n	4e10 <__swbuf_r+0x9c>
    4dda:	2e0a      	cmp	r6, #10
    4ddc:	d118      	bne.n	4e10 <__swbuf_r+0x9c>
    4dde:	0021      	movs	r1, r4
    4de0:	0028      	movs	r0, r5
    4de2:	f7ff fb07 	bl	43f4 <_fflush_r>
    4de6:	2800      	cmp	r0, #0
    4de8:	d012      	beq.n	4e10 <__swbuf_r+0x9c>
    4dea:	e00f      	b.n	4e0c <__swbuf_r+0x98>
    4dec:	4b0a      	ldr	r3, [pc, #40]	; (4e18 <__swbuf_r+0xa4>)
    4dee:	429c      	cmp	r4, r3
    4df0:	d101      	bne.n	4df6 <__swbuf_r+0x82>
    4df2:	68ac      	ldr	r4, [r5, #8]
    4df4:	e7cd      	b.n	4d92 <__swbuf_r+0x1e>
    4df6:	4b09      	ldr	r3, [pc, #36]	; (4e1c <__swbuf_r+0xa8>)
    4df8:	429c      	cmp	r4, r3
    4dfa:	d1ca      	bne.n	4d92 <__swbuf_r+0x1e>
    4dfc:	68ec      	ldr	r4, [r5, #12]
    4dfe:	e7c8      	b.n	4d92 <__swbuf_r+0x1e>
    4e00:	0021      	movs	r1, r4
    4e02:	0028      	movs	r0, r5
    4e04:	f000 f820 	bl	4e48 <__swsetup_r>
    4e08:	2800      	cmp	r0, #0
    4e0a:	d0ca      	beq.n	4da2 <__swbuf_r+0x2e>
    4e0c:	2601      	movs	r6, #1
    4e0e:	4276      	negs	r6, r6
    4e10:	0030      	movs	r0, r6
    4e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e14:	000073c4 	.word	0x000073c4
    4e18:	000073e4 	.word	0x000073e4
    4e1c:	000073a4 	.word	0x000073a4

00004e20 <_write_r>:
    4e20:	b570      	push	{r4, r5, r6, lr}
    4e22:	0005      	movs	r5, r0
    4e24:	0008      	movs	r0, r1
    4e26:	0011      	movs	r1, r2
    4e28:	2200      	movs	r2, #0
    4e2a:	4c06      	ldr	r4, [pc, #24]	; (4e44 <_write_r+0x24>)
    4e2c:	6022      	str	r2, [r4, #0]
    4e2e:	001a      	movs	r2, r3
    4e30:	f7fd fcca 	bl	27c8 <_write>
    4e34:	1c43      	adds	r3, r0, #1
    4e36:	d103      	bne.n	4e40 <_write_r+0x20>
    4e38:	6823      	ldr	r3, [r4, #0]
    4e3a:	2b00      	cmp	r3, #0
    4e3c:	d000      	beq.n	4e40 <_write_r+0x20>
    4e3e:	602b      	str	r3, [r5, #0]
    4e40:	bd70      	pop	{r4, r5, r6, pc}
    4e42:	46c0      	nop			; (mov r8, r8)
    4e44:	20000b30 	.word	0x20000b30

00004e48 <__swsetup_r>:
    4e48:	4b36      	ldr	r3, [pc, #216]	; (4f24 <__swsetup_r+0xdc>)
    4e4a:	b570      	push	{r4, r5, r6, lr}
    4e4c:	681d      	ldr	r5, [r3, #0]
    4e4e:	0006      	movs	r6, r0
    4e50:	000c      	movs	r4, r1
    4e52:	2d00      	cmp	r5, #0
    4e54:	d005      	beq.n	4e62 <__swsetup_r+0x1a>
    4e56:	69ab      	ldr	r3, [r5, #24]
    4e58:	2b00      	cmp	r3, #0
    4e5a:	d102      	bne.n	4e62 <__swsetup_r+0x1a>
    4e5c:	0028      	movs	r0, r5
    4e5e:	f7ff fb37 	bl	44d0 <__sinit>
    4e62:	4b31      	ldr	r3, [pc, #196]	; (4f28 <__swsetup_r+0xe0>)
    4e64:	429c      	cmp	r4, r3
    4e66:	d10f      	bne.n	4e88 <__swsetup_r+0x40>
    4e68:	686c      	ldr	r4, [r5, #4]
    4e6a:	230c      	movs	r3, #12
    4e6c:	5ee2      	ldrsh	r2, [r4, r3]
    4e6e:	b293      	uxth	r3, r2
    4e70:	0719      	lsls	r1, r3, #28
    4e72:	d42d      	bmi.n	4ed0 <__swsetup_r+0x88>
    4e74:	06d9      	lsls	r1, r3, #27
    4e76:	d411      	bmi.n	4e9c <__swsetup_r+0x54>
    4e78:	2309      	movs	r3, #9
    4e7a:	2001      	movs	r0, #1
    4e7c:	6033      	str	r3, [r6, #0]
    4e7e:	3337      	adds	r3, #55	; 0x37
    4e80:	4313      	orrs	r3, r2
    4e82:	81a3      	strh	r3, [r4, #12]
    4e84:	4240      	negs	r0, r0
    4e86:	bd70      	pop	{r4, r5, r6, pc}
    4e88:	4b28      	ldr	r3, [pc, #160]	; (4f2c <__swsetup_r+0xe4>)
    4e8a:	429c      	cmp	r4, r3
    4e8c:	d101      	bne.n	4e92 <__swsetup_r+0x4a>
    4e8e:	68ac      	ldr	r4, [r5, #8]
    4e90:	e7eb      	b.n	4e6a <__swsetup_r+0x22>
    4e92:	4b27      	ldr	r3, [pc, #156]	; (4f30 <__swsetup_r+0xe8>)
    4e94:	429c      	cmp	r4, r3
    4e96:	d1e8      	bne.n	4e6a <__swsetup_r+0x22>
    4e98:	68ec      	ldr	r4, [r5, #12]
    4e9a:	e7e6      	b.n	4e6a <__swsetup_r+0x22>
    4e9c:	075b      	lsls	r3, r3, #29
    4e9e:	d513      	bpl.n	4ec8 <__swsetup_r+0x80>
    4ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4ea2:	2900      	cmp	r1, #0
    4ea4:	d008      	beq.n	4eb8 <__swsetup_r+0x70>
    4ea6:	0023      	movs	r3, r4
    4ea8:	3344      	adds	r3, #68	; 0x44
    4eaa:	4299      	cmp	r1, r3
    4eac:	d002      	beq.n	4eb4 <__swsetup_r+0x6c>
    4eae:	0030      	movs	r0, r6
    4eb0:	f7ff f806 	bl	3ec0 <_free_r>
    4eb4:	2300      	movs	r3, #0
    4eb6:	6363      	str	r3, [r4, #52]	; 0x34
    4eb8:	2224      	movs	r2, #36	; 0x24
    4eba:	89a3      	ldrh	r3, [r4, #12]
    4ebc:	4393      	bics	r3, r2
    4ebe:	81a3      	strh	r3, [r4, #12]
    4ec0:	2300      	movs	r3, #0
    4ec2:	6063      	str	r3, [r4, #4]
    4ec4:	6923      	ldr	r3, [r4, #16]
    4ec6:	6023      	str	r3, [r4, #0]
    4ec8:	2308      	movs	r3, #8
    4eca:	89a2      	ldrh	r2, [r4, #12]
    4ecc:	4313      	orrs	r3, r2
    4ece:	81a3      	strh	r3, [r4, #12]
    4ed0:	6923      	ldr	r3, [r4, #16]
    4ed2:	2b00      	cmp	r3, #0
    4ed4:	d10b      	bne.n	4eee <__swsetup_r+0xa6>
    4ed6:	21a0      	movs	r1, #160	; 0xa0
    4ed8:	2280      	movs	r2, #128	; 0x80
    4eda:	89a3      	ldrh	r3, [r4, #12]
    4edc:	0089      	lsls	r1, r1, #2
    4ede:	0092      	lsls	r2, r2, #2
    4ee0:	400b      	ands	r3, r1
    4ee2:	4293      	cmp	r3, r2
    4ee4:	d003      	beq.n	4eee <__swsetup_r+0xa6>
    4ee6:	0021      	movs	r1, r4
    4ee8:	0030      	movs	r0, r6
    4eea:	f7ff fbaf 	bl	464c <__smakebuf_r>
    4eee:	2301      	movs	r3, #1
    4ef0:	89a2      	ldrh	r2, [r4, #12]
    4ef2:	4013      	ands	r3, r2
    4ef4:	d011      	beq.n	4f1a <__swsetup_r+0xd2>
    4ef6:	2300      	movs	r3, #0
    4ef8:	60a3      	str	r3, [r4, #8]
    4efa:	6963      	ldr	r3, [r4, #20]
    4efc:	425b      	negs	r3, r3
    4efe:	61a3      	str	r3, [r4, #24]
    4f00:	2000      	movs	r0, #0
    4f02:	6923      	ldr	r3, [r4, #16]
    4f04:	4283      	cmp	r3, r0
    4f06:	d1be      	bne.n	4e86 <__swsetup_r+0x3e>
    4f08:	230c      	movs	r3, #12
    4f0a:	5ee2      	ldrsh	r2, [r4, r3]
    4f0c:	0613      	lsls	r3, r2, #24
    4f0e:	d5ba      	bpl.n	4e86 <__swsetup_r+0x3e>
    4f10:	2340      	movs	r3, #64	; 0x40
    4f12:	4313      	orrs	r3, r2
    4f14:	81a3      	strh	r3, [r4, #12]
    4f16:	3801      	subs	r0, #1
    4f18:	e7b5      	b.n	4e86 <__swsetup_r+0x3e>
    4f1a:	0792      	lsls	r2, r2, #30
    4f1c:	d400      	bmi.n	4f20 <__swsetup_r+0xd8>
    4f1e:	6963      	ldr	r3, [r4, #20]
    4f20:	60a3      	str	r3, [r4, #8]
    4f22:	e7ed      	b.n	4f00 <__swsetup_r+0xb8>
    4f24:	20000178 	.word	0x20000178
    4f28:	000073c4 	.word	0x000073c4
    4f2c:	000073e4 	.word	0x000073e4
    4f30:	000073a4 	.word	0x000073a4

00004f34 <_close_r>:
    4f34:	2300      	movs	r3, #0
    4f36:	b570      	push	{r4, r5, r6, lr}
    4f38:	4c06      	ldr	r4, [pc, #24]	; (4f54 <_close_r+0x20>)
    4f3a:	0005      	movs	r5, r0
    4f3c:	0008      	movs	r0, r1
    4f3e:	6023      	str	r3, [r4, #0]
    4f40:	f7fd fc7c 	bl	283c <_close>
    4f44:	1c43      	adds	r3, r0, #1
    4f46:	d103      	bne.n	4f50 <_close_r+0x1c>
    4f48:	6823      	ldr	r3, [r4, #0]
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	d000      	beq.n	4f50 <_close_r+0x1c>
    4f4e:	602b      	str	r3, [r5, #0]
    4f50:	bd70      	pop	{r4, r5, r6, pc}
    4f52:	46c0      	nop			; (mov r8, r8)
    4f54:	20000b30 	.word	0x20000b30

00004f58 <_fstat_r>:
    4f58:	2300      	movs	r3, #0
    4f5a:	b570      	push	{r4, r5, r6, lr}
    4f5c:	4c06      	ldr	r4, [pc, #24]	; (4f78 <_fstat_r+0x20>)
    4f5e:	0005      	movs	r5, r0
    4f60:	0008      	movs	r0, r1
    4f62:	0011      	movs	r1, r2
    4f64:	6023      	str	r3, [r4, #0]
    4f66:	f7fd fc6c 	bl	2842 <_fstat>
    4f6a:	1c43      	adds	r3, r0, #1
    4f6c:	d103      	bne.n	4f76 <_fstat_r+0x1e>
    4f6e:	6823      	ldr	r3, [r4, #0]
    4f70:	2b00      	cmp	r3, #0
    4f72:	d000      	beq.n	4f76 <_fstat_r+0x1e>
    4f74:	602b      	str	r3, [r5, #0]
    4f76:	bd70      	pop	{r4, r5, r6, pc}
    4f78:	20000b30 	.word	0x20000b30

00004f7c <_isatty_r>:
    4f7c:	2300      	movs	r3, #0
    4f7e:	b570      	push	{r4, r5, r6, lr}
    4f80:	4c06      	ldr	r4, [pc, #24]	; (4f9c <_isatty_r+0x20>)
    4f82:	0005      	movs	r5, r0
    4f84:	0008      	movs	r0, r1
    4f86:	6023      	str	r3, [r4, #0]
    4f88:	f7fd fc60 	bl	284c <_isatty>
    4f8c:	1c43      	adds	r3, r0, #1
    4f8e:	d103      	bne.n	4f98 <_isatty_r+0x1c>
    4f90:	6823      	ldr	r3, [r4, #0]
    4f92:	2b00      	cmp	r3, #0
    4f94:	d000      	beq.n	4f98 <_isatty_r+0x1c>
    4f96:	602b      	str	r3, [r5, #0]
    4f98:	bd70      	pop	{r4, r5, r6, pc}
    4f9a:	46c0      	nop			; (mov r8, r8)
    4f9c:	20000b30 	.word	0x20000b30

00004fa0 <_lseek_r>:
    4fa0:	b570      	push	{r4, r5, r6, lr}
    4fa2:	0005      	movs	r5, r0
    4fa4:	0008      	movs	r0, r1
    4fa6:	0011      	movs	r1, r2
    4fa8:	2200      	movs	r2, #0
    4faa:	4c06      	ldr	r4, [pc, #24]	; (4fc4 <_lseek_r+0x24>)
    4fac:	6022      	str	r2, [r4, #0]
    4fae:	001a      	movs	r2, r3
    4fb0:	f7fd fc4e 	bl	2850 <_lseek>
    4fb4:	1c43      	adds	r3, r0, #1
    4fb6:	d103      	bne.n	4fc0 <_lseek_r+0x20>
    4fb8:	6823      	ldr	r3, [r4, #0]
    4fba:	2b00      	cmp	r3, #0
    4fbc:	d000      	beq.n	4fc0 <_lseek_r+0x20>
    4fbe:	602b      	str	r3, [r5, #0]
    4fc0:	bd70      	pop	{r4, r5, r6, pc}
    4fc2:	46c0      	nop			; (mov r8, r8)
    4fc4:	20000b30 	.word	0x20000b30

00004fc8 <memchr>:
    4fc8:	b2c9      	uxtb	r1, r1
    4fca:	1882      	adds	r2, r0, r2
    4fcc:	4290      	cmp	r0, r2
    4fce:	d101      	bne.n	4fd4 <memchr+0xc>
    4fd0:	2000      	movs	r0, #0
    4fd2:	4770      	bx	lr
    4fd4:	7803      	ldrb	r3, [r0, #0]
    4fd6:	428b      	cmp	r3, r1
    4fd8:	d0fb      	beq.n	4fd2 <memchr+0xa>
    4fda:	3001      	adds	r0, #1
    4fdc:	e7f6      	b.n	4fcc <memchr+0x4>
	...

00004fe0 <_read_r>:
    4fe0:	b570      	push	{r4, r5, r6, lr}
    4fe2:	0005      	movs	r5, r0
    4fe4:	0008      	movs	r0, r1
    4fe6:	0011      	movs	r1, r2
    4fe8:	2200      	movs	r2, #0
    4fea:	4c06      	ldr	r4, [pc, #24]	; (5004 <_read_r+0x24>)
    4fec:	6022      	str	r2, [r4, #0]
    4fee:	001a      	movs	r2, r3
    4ff0:	f7fd fbc8 	bl	2784 <_read>
    4ff4:	1c43      	adds	r3, r0, #1
    4ff6:	d103      	bne.n	5000 <_read_r+0x20>
    4ff8:	6823      	ldr	r3, [r4, #0]
    4ffa:	2b00      	cmp	r3, #0
    4ffc:	d000      	beq.n	5000 <_read_r+0x20>
    4ffe:	602b      	str	r3, [r5, #0]
    5000:	bd70      	pop	{r4, r5, r6, pc}
    5002:	46c0      	nop			; (mov r8, r8)
    5004:	20000b30 	.word	0x20000b30
    5008:	00000b1a 	.word	0x00000b1a
    500c:	00000b20 	.word	0x00000b20
    5010:	00000b26 	.word	0x00000b26
    5014:	00000b32 	.word	0x00000b32
    5018:	00000b38 	.word	0x00000b38
    501c:	00000b1e 	.word	0x00000b1e
    5020:	00000b3e 	.word	0x00000b3e
    5024:	00000008 	.word	0x00000008
    5028:	00000008 	.word	0x00000008
    502c:	00000008 	.word	0x00000008
    5030:	00000008 	.word	0x00000008
    5034:	00000008 	.word	0x00000008
    5038:	00000008 	.word	0x00000008
    503c:	00000008 	.word	0x00000008
    5040:	00000008 	.word	0x00000008
    5044:	00000010 	.word	0x00000010
    5048:	00000010 	.word	0x00000010
    504c:	00000010 	.word	0x00000010
    5050:	00000010 	.word	0x00000010
    5054:	00000010 	.word	0x00000010
    5058:	00000010 	.word	0x00000010
    505c:	00000010 	.word	0x00000010
    5060:	00000010 	.word	0x00000010
    5064:	00000018 	.word	0x00000018
    5068:	00000018 	.word	0x00000018
    506c:	00000018 	.word	0x00000018
    5070:	00000018 	.word	0x00000018
    5074:	00000018 	.word	0x00000018
    5078:	00000018 	.word	0x00000018
    507c:	00000018 	.word	0x00000018
    5080:	00000018 	.word	0x00000018
    5084:	00000020 	.word	0x00000020
    5088:	00000020 	.word	0x00000020
    508c:	00000020 	.word	0x00000020
    5090:	00000020 	.word	0x00000020
    5094:	00000020 	.word	0x00000020
    5098:	00000020 	.word	0x00000020
    509c:	00000020 	.word	0x00000020
    50a0:	00000020 	.word	0x00000020
    50a4:	00000028 	.word	0x00000028
    50a8:	00000028 	.word	0x00000028
    50ac:	00000028 	.word	0x00000028
    50b0:	00000028 	.word	0x00000028
    50b4:	00000028 	.word	0x00000028
    50b8:	00000028 	.word	0x00000028
    50bc:	00000028 	.word	0x00000028
    50c0:	00000028 	.word	0x00000028
    50c4:	00000030 	.word	0x00000030
    50c8:	00000030 	.word	0x00000030
    50cc:	00000030 	.word	0x00000030
    50d0:	00000030 	.word	0x00000030
    50d4:	00000030 	.word	0x00000030
    50d8:	00000030 	.word	0x00000030
    50dc:	00000030 	.word	0x00000030
    50e0:	00000030 	.word	0x00000030
    50e4:	00000038 	.word	0x00000038
    50e8:	00000038 	.word	0x00000038
    50ec:	00000038 	.word	0x00000038
    50f0:	00000038 	.word	0x00000038
    50f4:	00000038 	.word	0x00000038
    50f8:	00000038 	.word	0x00000038
    50fc:	00000038 	.word	0x00000038
    5100:	00000038 	.word	0x00000038
    5104:	00000040 	.word	0x00000040
    5108:	00000040 	.word	0x00000040
    510c:	00000040 	.word	0x00000040
    5110:	00000040 	.word	0x00000040
    5114:	00000040 	.word	0x00000040
    5118:	00000040 	.word	0x00000040
    511c:	00000040 	.word	0x00000040
    5120:	00000040 	.word	0x00000040
    5124:	00000048 	.word	0x00000048
    5128:	00000048 	.word	0x00000048
    512c:	00000048 	.word	0x00000048
    5130:	00000048 	.word	0x00000048
    5134:	00000048 	.word	0x00000048
    5138:	00000048 	.word	0x00000048
    513c:	00000048 	.word	0x00000048
    5140:	00000048 	.word	0x00000048
    5144:	0000004f 	.word	0x0000004f
    5148:	0000004f 	.word	0x0000004f
    514c:	0000004f 	.word	0x0000004f
    5150:	0000004f 	.word	0x0000004f
    5154:	0000004f 	.word	0x0000004f
    5158:	0000004f 	.word	0x0000004f
    515c:	0000004f 	.word	0x0000004f
    5160:	0000004f 	.word	0x0000004f
    5164:	000a6325 	.word	0x000a6325

00005168 <csiEscCodes>:
    5168:	44434241 48474645 6d4b4a49 58575150     ABCDEFGHIJKmPQWX
    5178:	0000005a 000a000a 00140014 00000014     Z...............
    5188:	000a017c 000a017c 00140186 00140000     |...|...........
    5198:	0122000a 00140186 01220190 0122000a     .."......."...".
    51a8:	012c0014 0122017c 012c0186 012c0014     ..,.|."...,...,.
    51b8:	0136017c 001e0000 00280032 00320000     |.6.....2.(...2.
    51c8:	003c0032 001e0050 00280118 00280046     2.<.P.....(.F.(.
    51d8:	00be0050 00be0050 00c80118 00280118     P...P.........(.
    51e8:	00be0122 00460000 00500032 005a0000     ".....F.2.P...Z.
    51f8:	00640032 006e0000 00780032 00820000     2.d...n.2.x.....
    5208:	008c0032 00960000 00a00032 00aa0000     2.......2.......
    5218:	00b40032 00be0000 00c80032 00c8012c     2.......2...,...
    5228:	00d20172 00dc001e 00e60172 00f0001e     r.......r.......
    5238:	00fa0172 0104001e 010e0172 0118005a     r.......r...Z...
    5248:	0122012c 82be50b4 8cbe82aa 64963c8c     ,."..P.......<.d
    5258:	64dc3cd2 a08c9682 aadca08c a0e696dc     .<.d............
    5268:	50f03c78 5a78466e aaaa3c96 a0dc3cc8     x<.PnFxZ.<...<..
    5278:	aae6a0d2 6e617254 69722073 73746867     ....Trans rights
    5288:	65726120 6d756820 72206e61 74686769      are human right
    5298:	00000073 355e3331 31202b20 20355e36     s...13^5 + 16^5 
    52a8:	3731203d 0000355e 69746552 616c7563     = 17^5..Reticula
    52b8:	676e6974 6c705320 73656e69 00000000     ting Splines....
    52c8:	6c6f6976 65636e65 726f772e 0000736b     violence.works..
    52d8:	2b206953 00425020 6c6c694b 6c694220     Si + PB.Kill Bil
    52e8:	6e6f696c 65726961 61282073 5420646e     lionaires (and T
    52f8:	6c6c6972 616e6f69 29657269 00000000     rillionaire)....
    5308:	65746e49 74736572 206e6920 68636574     Interest in tech
    5318:	6f6c6f6e 69207967 6f6e2073 20612074     nology is not a 
    5328:	73726570 6c616e6f 00797469 50203031     personality.10 P
    5338:	544e4952 52484320 30322824 2b352e35     RINT CHR$(205.5+
    5348:	28444e52 3b292931 47203a20 204f544f     RND(1)); : GOTO 
    5358:	00003031 67206f4e 2e73646f 206f4e20     10..No gods. No 
    5368:	7473616d 2e737265 206f4e20 65747865     masters. No exte
    5378:	6c616e72 62696c20 69726172 002e7365     rnal libraries..
    5388:	6c6c694b 7a614e20 00007369 6e616954     Kill Nazis..Tian
    5398:	656d6e61 7153206e 65726175 38393120     anmen Square 198
    53a8:	00000039 72656d41 20616369 20736177     9...America was 
    53b8:	6e756f66 20646564 73206e6f 6576616c     founded on slave
    53c8:	00007972 72656854 73692065 6c6e6f20     ry..There is onl
    53d8:	61632079 61746970 6e61206c 616c2064     y capital and la
    53e8:	00726f62 6f636e45 67617275 59532065     bor.Encourage SY
    53f8:	54454d4d 20434952 73616c63 61772073     MMETRIC class wa
    5408:	72616672 00000065 52554324 544e4552     rfare...$CURRENT
    5418:	4d454d5f 00000045 694e2041 54206563     _MEME...A Nice T
    5428:	00005954 78696e55 6f706520 6d206863     TY..Unix epoch m
    5438:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    5448:	3d202069 35783020 35373366 20666439     i  = 0x5f3759df 
    5458:	2028202d 3e3e2069 29203120 0000003b     - ( i >> 1 );...
    5468:	61657053 7274206b 20687475 70206f74     Speak truth to p
    5478:	7265776f 2749203b 7573206d 74206572     ower; I'm sure t
    5488:	27796568 6c206c6c 65747369 6874206e     hey'll listen th
    5498:	74207369 2e656d69 00000000 63666544     is time.....Defc
    54a8:	73276e6f 6e616320 656c6563 32282064     on's canceled (2
    54b8:	29303230 30322820 00293132 73746152     020) (2021).Rats
    54c8:	7473656e 6f4e203a 6e696874 6f542067     nest: Nothing To
    54d8:	216f4420 00000000 68207449 36207361      Do!....It has 6
    54e8:	656b2039 002e7379 61636542 20657375     9 keys..Because 
    54f8:	342d5456 77203032 61207361 6165726c     VT-420 was alrea
    5508:	74207964 6e656b61 00000000 706d6f43     dy taken....Comp
    5518:	73736572 206e6f69 6f676c61 68746972     ression algorith
    5528:	6162206d 20646573 42206e6f 28205042     m based on BBP (
    5538:	37393931 00000029 63616554 65682068     1997)...Teach he
    5548:	68746c61 736e6920 6e617275 70206563     alth insurance p
    5558:	69766f72 73726564 206f7420 65646f63     roviders to code
    5568:	0000002e 6e617247 65432064 6172746e     ....Grand Centra
    5578:	6148206c 54206b63 50206568 656e616c     l Hack The Plane
    5588:	00000074 69466957 20736920 20746f6e     t...WiFi is not 
    5598:	65726977 7373656c 68744520 656e7265     wireless Etherne
    55a8:	00002174 6d6d7544 68742079 20636369     t!..Dummy thicc 
    55b8:	65696c63 0000746e 694e2041 54206563     client..A Nice T
    55c8:	202e5954 4f206e41 6f43204b 7475706d     TY. An OK Comput
    55d8:	002e7265 65545355 6964656c 6e6f646c     er..USTeledildon
    55e8:	00736369 696c6f53 69726164 69207974     ics.Solidarity i
    55f8:	6f6e2073 20612074 2077656e 6d617266     s not a new fram
    5608:	726f7765 0000006b 61657242 616f6264     ework...Breadboa
    5618:	6e696472 73492067 746f4e20 43204120     rding Is Not A C
    5628:	656d6972 00000000 2066664f 6f207962     rime....Off by o
    5638:	6520656e 726f7272 72612073 6f632065     ne errors are co
    5648:	6e6f6d6d 00000000 0000118e 000013da     mmon............
    5658:	000013da 000013da 000013da 000013da     ................
    5668:	000013da 000013da 000013da 000013da     ................
    5678:	000013da 000013da 000013da 000013da     ................
    5688:	000013da 000013da 00001176 000013da     ........v.......
    5698:	000013da 000013da 000013da 000013da     ................
    56a8:	000013da 000013da 000013da 000013da     ................
    56b8:	000013da 000013da 000013da 000013da     ................
    56c8:	000013da 000013da 00001186 000013da     ................
    56d8:	000013da 000013da 000013da 000013da     ................
    56e8:	000013da 000013da 000013da 000013da     ................
    56f8:	000013da 000013da 000013da 000013da     ................
    5708:	000013da 000013da 0000117e 00001196     ........~.......
    5718:	0000115e 0000116e 00001166 00000002     ^...n...f.......
    5728:	00000003 00000028 00000029 00000004     ....(...).......
    5738:	00000005 00000006 00000007 00000020     ............ ...
    5748:	00000021 00000022 00000023 00000024     !..."...#...$...
    5758:	00000025 00000026 00000027 00000008     %...&...'.......
    5768:	00000009 0000000a 0000000b 42000800     ...............B
    5778:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    5788:	42001c00 00001f12 00001f0e 00001f0e     ...B............
    5798:	00001f74 00001f74 00001f26 00001f18     t...t...&.......
    57a8:	00001f2c 00001f62 00002134 00002114     ,...b...4!...!..
    57b8:	00002114 000021a0 00002126 00002142     .!...!..&!..B!..
    57c8:	00002118 00002150 00002190              .!..P!...!..

000057d4 <CodePage437>:
	...
    5b0c:	01000000 06186080 18608001 60800106     .....`....`....`
    5b1c:	80010000 00000060 00000000 66986106     ....`........a.f
    5b2c:	98618619 00000000 00000000 00000000     ..a.............
    5b3c:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    5b4c:	1966fefb 00986186 00000000 80010000     ..f..a..........
    5b5c:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    5b6c:	00000000 04000000 29a60823 1820c106     ........#..).. .
    5b7c:	98200304 324c1165 00000008 00000000     .. .e.L2........
    5b8c:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    5b9c:	0000f6d9 00000000 30c00000 00030618     ...........0....
    5bac:	000000c0 00000000 00000000 00000000     ................
    5bbc:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    5bcc:	10400002 00000000 01000000 02084000     ..@..........@..
    5bdc:	06186000 18608001 00010208 00000040     .`....`.....@...
    5bec:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    5bfc:	80104290 00000000 00000000 00000000     .B..............
    5c0c:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    5c2c:	18000000 c0000306 00001040 00000000     ........@.......
    5c3c:	00000000 ff000000 0000e0bf 00000000     ................
	...
    5c60:	030e3800 0000e080 00000000 08200000     .8............ .
    5c70:	80000104 02041020 10408000 00000208     .... .....@.....
    5c80:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    5c90:	63061b6c f8e0c318 00000000 00000000     l..c............
    5ca0:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    5cb0:	000000f8 00000000 c1f8e107 061860b0     .............`..
    5cc0:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    5cd0:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    5ce0:	00f8e167 00000000 40000000 03070c30     g..........@0...
    5cf0:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    5d00:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    5d10:	e167a081 000000f8 00000000 60f8e003     ..g............`
    5d20:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    5d30:	00000000 fefb0f00 20608001 00010408     ..........` ....
    5d40:	0c302080 00c00003 00000000 e0030000     . 0.............
    5d50:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    5d60:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    5d70:	0618609f e1c70003 000000f0 00000000     .`..............
    5d80:	38000000 e080030e 00000000 030e3800     ...8.........8..
    5d90:	0000e080 00000000 00000000 80030e38     ............8...
    5da0:	000000e0 0e380000 40c00003 00000010     ......8....@....
    5db0:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    5dc0:	0c300003 00000000 00000000 00000000     ..0.............
    5dd0:	00fefb0f fefb0f00 00000000 00000000     ................
    5de0:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    5df0:	0c0c3030 00000003 00000000 f8e10700     00..............
    5e00:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    5e10:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    5e20:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    5e30:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    5e40:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    5e50:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    5e60:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    5e70:	00f8e063 00000000 c30f0000 861966f0     c............f..
    5e80:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    5e90:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    5ea0:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    5eb0:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    5ec0:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    5ed0:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    5ee0:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    5ef0:	00000000 07000000 0618f8e1 18608001     ..............`.
    5f00:	60800106 e1070618 000000f8 00000000     ...`............
    5f10:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    5f20:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    5f30:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    5f40:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    5f50:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    5f60:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    5f70:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    5f80:	ecb0c31e 0000061b 00000000 f8e00300     ................
    5f90:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    5fa0:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    5fb0:	c000038c 00030c30 00000000 07000000     ....0...........
    5fc0:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    5fd0:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    5fe0:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    5ff0:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    6000:	00f8e167 00000000 fb0f0000 000208fe     g...............
    6010:	02082080 08208000 20800002 00000000     . .... .... ....
    6020:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    6030:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    6040:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    6050:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    6060:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    6070:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    6080:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    6090:	20c00107 80000208 00000020 00000000     ... .... .......
    60a0:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    60b0:	0000fefb 00000000 f8e00300 00030c30     ............0...
    60c0:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    60d0:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    60e0:	0618c000 00000000 07000000 030cf0c1     ................
    60f0:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    6100:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    612c:	00fefb0f 00000000 80030000 00030ce0     ................
    613c:	00001860 00000000 00000000 00000000     `...............
	...
    6154:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    6164:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    6174:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    6184:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    6194:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    61a4:	c3061bec f6d9e7b0 00000000 00000000     ................
    61b4:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    61c4:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    61d4:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    61e4:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    61f4:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    6204:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    6214:	01000000 00006080 18e08003 60800106     .....`.........`
    6224:	e1070618 000000f8 00000000 00186000     .............`..
    6234:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    6244:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    6254:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    6264:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    6280:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    6298:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    62b0:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    62c8:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    62d8:	02082080 00000000 00000000 c1fae803     . ..............
    62e8:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    62f8:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    6308:	00000003 00000000 00000000 e1070000     ................
    6318:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    6328:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    6338:	30c0c00c 00000000 00000000 00000000     ...0............
    6348:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    6360:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    6378:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    6390:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    63ac:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    63bc:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    63cc:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    63dc:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    63ec:	00000000 80010000 01061860 06186080     ........`....`..
    63fc:	18608001 60800106 00000000 0f000000     ..`....`........
    640c:	0208c003 0cc00003 c0000303 030f0208     ................
    641c:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    6454:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    6464:	f8e06398 00000608 00000000 00669801     .c............f.
    6474:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    6484:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    6494:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    64a4:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    64bc:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    64d4:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    64e4:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    64f4:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    6504:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    6514:	04fef907 00000003 00000000 07001420     ............ ...
    6524:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    6534:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    6544:	f10730c0 000000fc 00000000 18c00000     .0..............
    6554:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    6564:	00000000 98610600 80030000 010618e0     ......a.........
    6574:	06186080 00f8e107 00000000 00000000     .`..............
    6584:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    659c:	0018c000 18e08003 60800106 e1070618     ...........`....
    65ac:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    65bc:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    65cc:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    65dc:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    65ec:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    6604:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    6614:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    6624:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    6634:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    6644:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    6654:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    6664:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    6674:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    6684:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    6694:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    66a4:	00f6d9c7 00000000 01000000 0c006698     .............f..
    66b4:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    66c4:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    66d4:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    66e4:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    66f4:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    6704:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    6714:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    6724:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    6734:	20e00302 80800f08 00000020 00000000     ... .... .......
    6744:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    6754:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    6764:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    6774:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    6784:	fef823b0 00000000 00000000 000060c0     .#...........`..
    6794:	18e08003 60800106 e1070618 000000f8     .......`........
    67a4:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    67b4:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    67c4:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    67dc:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    67ec:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    67fc:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    680c:	1e08c003 00e08308 000080ff 00000000     ................
	...
    6824:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    6840:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    6850:	00c00f3f 00000000 00000000 ff000000     ?...............
    6860:	0003ecbf 00000000 00000000 00000000     ................
	...
    6878:	18e0bfff 00000006 00000000 00000000     ................
    6888:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    6898:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    68a8:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    68b8:	00000000 06180000 18000000 60800106     ...............`
    68c8:	80010618 00061860 00000000 00000000     ....`...........
    68d8:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    68f0:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    6900:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    6910:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    6920:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    6930:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    6940:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    6950:	20800002 80000208 00020820 02082080     ... .... .... ..
    6960:	08208000 20800002 80000208 00020820     .. .... .... ...
    6970:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    6980:	00020820 02082080 f8208000 20800f02      .... .... .... 
    6990:	80000208 00020820 05142080 14504001     .... .... ...@P.
    69a0:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    69b0:	00504001 00000000 00000000 013f0000     .@P...........?.
    69c0:	05145040 14504001 50400105 00000000     @P...@P...@P....
    69d0:	00000000 02f80000 0820800f 20800002     .......... .... 
    69e0:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    69f0:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    6a00:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    6a10:	05145040 00504001 00000000 00000000     @P...@P.........
    6a20:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    6a30:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    6a48:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    6a60:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    6a84:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    6a94:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    6aac:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    6ad0:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    6ae0:	20800002 80000208 f0030820 02082080     ... .... .... ..
    6af0:	08208000 20800002 00000000 00000000     .. .... ........
    6b00:	3f000000 000000f0 00000000 00000000     ...?............
    6b10:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    6b20:	80000208 00020820 02082080 08208000     .... .... .... .
    6b30:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    6b40:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    6b50:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    6b60:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    6b7c:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    6b8c:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    6bb0:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    6bc0:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    6bd0:	50400105 40010514 00000050 00000000     ..@P...@P.......
    6be0:	ff000000 00fc0fc0 00000000 00000000     ................
    6bf0:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    6c00:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    6c10:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    6c20:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    6c30:	000000f0 00000000 00000000 00000000     ................
    6c40:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    6c50:	00020820 00002080 00000000 00000000      .... ..........
    6c60:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    6c70:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    6c88:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    6ca8:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    6cb8:	00002080 00000000 00000000 40f10700     . .............@
    6cc8:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    6cd8:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    6ce8:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    6cf8:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    6d08:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    6d28:	80f00300 00020820 02082080 ff208000     .... .... .... .
    6d38:	ffffffff ffffffff ffffffff ffffffff     ................
    6d48:	ffffffff ffffffff 00000000 00000000     ................
    6d58:	3f000000 ffffffff ffffffff ffffffff     ...?............
    6d68:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    6d78:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    6d88:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    6d98:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    6dbc:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    6dcc:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    6ddc:	63c61861 000000f8 00000000 ff000000     a..c............
    6dec:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    6e08:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    6e18:	fb0f0000 06b080fe 0618c000 c0800103     ................
    6e28:	fefb2f20 00000000 00000000 00000000      /..............
    6e38:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    6e50:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    6e60:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    6e70:	06186080 00608001 00000000 00000000     .`....`.........
    6e80:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    6e90:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    6ea0:	061becbf e0c31863 000000f8 00000000     ....c...........
    6eb0:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    6ec0:	00008e33 00000000 fef80300 e1070318     3...............
    6ed0:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    6ee0:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    6ef0:	00204295 00000000 00000000 07000000     .B .............
    6f00:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    6f10:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    6f20:	03186000 0000f8e0 00000000 00000000     .`..............
    6f30:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    6f40:	000060b0 00000000 0f000000 0000fefb     .`..............
    6f50:	00fefb0f fefb0f00 00000000 00000000     ................
    6f60:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    6f70:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    6f80:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    6f90:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    6fa0:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    6fb0:	02082080 08208000 20800002 80000208     . .... .... ....
    6fc0:	00020820 02082080 08208000 20800002      .... .... .... 
    6fd0:	80000208 09240820 00008001 18000000     .... .$.........
    6fe0:	00000006 00e0bfff 00061800 00000000     ................
	...
    6ff8:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    7010:	01092460 00000080 00000000 00000000     `$..............
	...
    7034:	80030e38 00000000 00000000 00000000     8...............
	...
    704c:	01000000 00006080 00000000 0f000000     .....`..........
    705c:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    706c:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    7088:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    70ac:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    70d4:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    70e4:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    70f4:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    7104:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    7114:	0008006d 00000a7f 0009001b 47552600     m............&UG
    7124:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    7134:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    7144:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    7154:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    7164:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    7174:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    7184:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    7194:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    71a4:	0008004d 00000a7f 0009001b 07150000     M...............
    71b4:	1100000a 00000000 000b0809 1a001700     ................
    71c4:	0f000000 0500000a 00001801 1f001000     ................
    71d4:	03131200 1b000000 14000000 000e1604     ................
    71e4:	1c001d1e 02061900 0008000d 00000a00     ................

000071f4 <kb_col>:
    71f4:	00010000 00020000 00040000 00080000     ................
    7204:	00100000 00200000 08000000              ...... .....

00007210 <kb_col_index>:
    7210:	00000010 00000011 00000012 00000013     ................
    7220:	00000014 00000015 0000001b              ............

0000722c <kb_row>:
    722c:	00000004 00000008 00000010 00000020     ............ ...
    723c:	00000040 00000080 00000400 00000800     @...............
    724c:	00001000 00002000                       ..... ..

00007254 <kb_row_index>:
    7254:	00000002 00000003 00000004 00000005     ................
    7264:	00000006 00000007 0000000a 0000000b     ................
    7274:	0000000c 0000000d                       ........

0000727c <beelzebub.12957>:
    727c:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    728c:	64012201 d4019201 08020702 5f023402     .".d.........4._
    729c:	94027802 bb02a602 db02ca02 f902e802     .x..............
    72ac:	7f031f03                                ....

000072b0 <belial.12954>:
    72b0:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    72c0:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    72d0:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    72e0:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    72f0:	35c9c9c9 0000363a                       ...5:6..

000072f8 <lucifer.12956>:
    72f8:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    7308:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    7318:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    7328:	00cc0008 01707005 02030303 02d00000     .....pp.........
    7338:	00505050 00000055                       PPP.U...

00007340 <mulciber.12955>:
    7340:	03020100 02010004 00020100 01000201     ................
    7350:	02010002 00020100 01000201 01000002     ................
    7360:	02010000 00020100 01000201 03020100     ................
    7370:	00000004 01000100 01000302 02010002     ................
    7380:	00000403 00000000 65530d0a 6c616972     ..........Serial
    7390:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

000073a0 <_global_impure_ptr>:
    73a0:	2000017c                                |.. 

000073a4 <__sf_fake_stderr>:
	...

000073c4 <__sf_fake_stdin>:
	...

000073e4 <__sf_fake_stdout>:
	...
    7404:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7414:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7424:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7434:	00006665                                ef..

00007438 <_init>:
    7438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    743a:	46c0      	nop			; (mov r8, r8)
    743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    743e:	bc08      	pop	{r3}
    7440:	469e      	mov	lr, r3
    7442:	4770      	bx	lr

00007444 <__init_array_start>:
    7444:	000000dd 	.word	0x000000dd

00007448 <_fini>:
    7448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    744a:	46c0      	nop			; (mov r8, r8)
    744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    744e:	bc08      	pop	{r3}
    7450:	469e      	mov	lr, r3
    7452:	4770      	bx	lr

00007454 <__fini_array_start>:
    7454:	000000b5 	.word	0x000000b5
