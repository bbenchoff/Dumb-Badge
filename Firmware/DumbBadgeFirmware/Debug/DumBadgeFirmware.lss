
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003314  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00003314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000100  20000074  00003388  00020074  2**2
                  ALLOC
  3 .stack        00002004  20000174  00003488  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000259d7  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003842  00000000  00000000  00045acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004a05  00000000  00000000  0004930e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000518  00000000  00000000  0004dd13  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005e0  00000000  00000000  0004e22b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b6c7  00000000  00000000  0004e80b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000be04  00000000  00000000  00069ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008ea57  00000000  00000000  00075cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001444  00000000  00000000  00104730  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 21 00 20 4d 14 00 00 49 14 00 00 49 14 00 00     x!. M...I...I...
	...
      2c:	49 14 00 00 00 00 00 00 00 00 00 00 49 14 00 00     I...........I...
      3c:	49 14 00 00 49 14 00 00 49 14 00 00 49 14 00 00     I...I...I...I...
      4c:	49 14 00 00 49 14 00 00 49 14 00 00 49 14 00 00     I...I...I...I...
      5c:	49 14 00 00 49 14 00 00 31 06 00 00 41 06 00 00     I...I...1...A...
      6c:	51 06 00 00 61 06 00 00 71 06 00 00 81 06 00 00     Q...a...q.......
      7c:	49 14 00 00 49 14 00 00 49 14 00 00 49 14 00 00     I...I...I...I...
      8c:	49 14 00 00 49 14 00 00 49 14 00 00 49 14 00 00     I...I...I...I...
      9c:	49 14 00 00 49 14 00 00 49 14 00 00 49 14 00 00     I...I...I...I...
      ac:	49 14 00 00 00 00 00 00                             I.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00003314 	.word	0x00003314

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00003314 	.word	0x00003314
     10c:	00003314 	.word	0x00003314
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	000011d9 	.word	0x000011d9
     140:	00001dad 	.word	0x00001dad
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	20000090 	.word	0x20000090
     1b8:	20000094 	.word	0x20000094
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	20000090 	.word	0x20000090
     1e8:	20000094 	.word	0x20000094
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	203e      	movs	r0, #62	; 0x3e
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	05d2      	lsls	r2, r2, #23
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	200f      	movs	r0, #15
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	00000229 	.word	0x00000229
     224:	41004480 	.word	0x41004480

00000228 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     228:	b500      	push	{lr}
     22a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     22c:	ab01      	add	r3, sp, #4
     22e:	2280      	movs	r2, #128	; 0x80
     230:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     232:	780a      	ldrb	r2, [r1, #0]
     234:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     236:	784a      	ldrb	r2, [r1, #1]
     238:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     23a:	788a      	ldrb	r2, [r1, #2]
     23c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     23e:	0019      	movs	r1, r3
     240:	4b01      	ldr	r3, [pc, #4]	; (248 <port_pin_set_config+0x20>)
     242:	4798      	blx	r3
}
     244:	b003      	add	sp, #12
     246:	bd00      	pop	{pc}
     248:	000013e9 	.word	0x000013e9

0000024c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     24c:	b5f0      	push	{r4, r5, r6, r7, lr}
     24e:	46de      	mov	lr, fp
     250:	4657      	mov	r7, sl
     252:	464e      	mov	r6, r9
     254:	4645      	mov	r5, r8
     256:	b5e0      	push	{r5, r6, r7, lr}
     258:	b087      	sub	sp, #28
     25a:	4680      	mov	r8, r0
     25c:	9104      	str	r1, [sp, #16]
     25e:	0016      	movs	r6, r2
     260:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     262:	2200      	movs	r2, #0
     264:	2300      	movs	r3, #0
     266:	2100      	movs	r1, #0
     268:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     26a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     26c:	2001      	movs	r0, #1
     26e:	0021      	movs	r1, r4
     270:	9600      	str	r6, [sp, #0]
     272:	9701      	str	r7, [sp, #4]
     274:	465c      	mov	r4, fp
     276:	9403      	str	r4, [sp, #12]
     278:	4644      	mov	r4, r8
     27a:	9405      	str	r4, [sp, #20]
     27c:	e013      	b.n	2a6 <long_division+0x5a>
     27e:	2420      	movs	r4, #32
     280:	1a64      	subs	r4, r4, r1
     282:	0005      	movs	r5, r0
     284:	40e5      	lsrs	r5, r4
     286:	46a8      	mov	r8, r5
     288:	e014      	b.n	2b4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     28a:	9c00      	ldr	r4, [sp, #0]
     28c:	9d01      	ldr	r5, [sp, #4]
     28e:	1b12      	subs	r2, r2, r4
     290:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     292:	465c      	mov	r4, fp
     294:	464d      	mov	r5, r9
     296:	432c      	orrs	r4, r5
     298:	46a3      	mov	fp, r4
     29a:	9c03      	ldr	r4, [sp, #12]
     29c:	4645      	mov	r5, r8
     29e:	432c      	orrs	r4, r5
     2a0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     2a2:	3901      	subs	r1, #1
     2a4:	d325      	bcc.n	2f2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     2a6:	2420      	movs	r4, #32
     2a8:	4264      	negs	r4, r4
     2aa:	190c      	adds	r4, r1, r4
     2ac:	d4e7      	bmi.n	27e <long_division+0x32>
     2ae:	0005      	movs	r5, r0
     2b0:	40a5      	lsls	r5, r4
     2b2:	46a8      	mov	r8, r5
     2b4:	0004      	movs	r4, r0
     2b6:	408c      	lsls	r4, r1
     2b8:	46a1      	mov	r9, r4
		r = r << 1;
     2ba:	1892      	adds	r2, r2, r2
     2bc:	415b      	adcs	r3, r3
     2be:	0014      	movs	r4, r2
     2c0:	001d      	movs	r5, r3
		if (n & bit_shift) {
     2c2:	9e05      	ldr	r6, [sp, #20]
     2c4:	464f      	mov	r7, r9
     2c6:	403e      	ands	r6, r7
     2c8:	46b4      	mov	ip, r6
     2ca:	9e04      	ldr	r6, [sp, #16]
     2cc:	4647      	mov	r7, r8
     2ce:	403e      	ands	r6, r7
     2d0:	46b2      	mov	sl, r6
     2d2:	4666      	mov	r6, ip
     2d4:	4657      	mov	r7, sl
     2d6:	433e      	orrs	r6, r7
     2d8:	d003      	beq.n	2e2 <long_division+0x96>
			r |= 0x01;
     2da:	0006      	movs	r6, r0
     2dc:	4326      	orrs	r6, r4
     2de:	0032      	movs	r2, r6
     2e0:	002b      	movs	r3, r5
		if (r >= d) {
     2e2:	9c00      	ldr	r4, [sp, #0]
     2e4:	9d01      	ldr	r5, [sp, #4]
     2e6:	429d      	cmp	r5, r3
     2e8:	d8db      	bhi.n	2a2 <long_division+0x56>
     2ea:	d1ce      	bne.n	28a <long_division+0x3e>
     2ec:	4294      	cmp	r4, r2
     2ee:	d8d8      	bhi.n	2a2 <long_division+0x56>
     2f0:	e7cb      	b.n	28a <long_division+0x3e>
     2f2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     2f4:	4658      	mov	r0, fp
     2f6:	0019      	movs	r1, r3
     2f8:	b007      	add	sp, #28
     2fa:	bc3c      	pop	{r2, r3, r4, r5}
     2fc:	4690      	mov	r8, r2
     2fe:	4699      	mov	r9, r3
     300:	46a2      	mov	sl, r4
     302:	46ab      	mov	fp, r5
     304:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000306 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     306:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     308:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     30a:	2340      	movs	r3, #64	; 0x40
     30c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     30e:	4281      	cmp	r1, r0
     310:	d202      	bcs.n	318 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     312:	0018      	movs	r0, r3
     314:	bd10      	pop	{r4, pc}
		baud_calculated++;
     316:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     318:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     31a:	1c63      	adds	r3, r4, #1
     31c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     31e:	4288      	cmp	r0, r1
     320:	d9f9      	bls.n	316 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     322:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     324:	2cff      	cmp	r4, #255	; 0xff
     326:	d8f4      	bhi.n	312 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     328:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     32a:	2300      	movs	r3, #0
     32c:	e7f1      	b.n	312 <_sercom_get_sync_baud_val+0xc>
	...

00000330 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	b083      	sub	sp, #12
     334:	000f      	movs	r7, r1
     336:	0016      	movs	r6, r2
     338:	aa08      	add	r2, sp, #32
     33a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     33c:	0004      	movs	r4, r0
     33e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     340:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     342:	42bc      	cmp	r4, r7
     344:	d902      	bls.n	34c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     346:	0010      	movs	r0, r2
     348:	b003      	add	sp, #12
     34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     34c:	2b00      	cmp	r3, #0
     34e:	d114      	bne.n	37a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     350:	0002      	movs	r2, r0
     352:	0008      	movs	r0, r1
     354:	2100      	movs	r1, #0
     356:	4c19      	ldr	r4, [pc, #100]	; (3bc <_sercom_get_async_baud_val+0x8c>)
     358:	47a0      	blx	r4
     35a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     35c:	003a      	movs	r2, r7
     35e:	2300      	movs	r3, #0
     360:	2000      	movs	r0, #0
     362:	4c17      	ldr	r4, [pc, #92]	; (3c0 <_sercom_get_async_baud_val+0x90>)
     364:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     366:	2200      	movs	r2, #0
     368:	2301      	movs	r3, #1
     36a:	1a12      	subs	r2, r2, r0
     36c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     36e:	0c12      	lsrs	r2, r2, #16
     370:	041b      	lsls	r3, r3, #16
     372:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     374:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     376:	2200      	movs	r2, #0
     378:	e7e5      	b.n	346 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     37a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     37c:	2b01      	cmp	r3, #1
     37e:	d1f9      	bne.n	374 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     380:	000a      	movs	r2, r1
     382:	2300      	movs	r3, #0
     384:	2100      	movs	r1, #0
     386:	4c0d      	ldr	r4, [pc, #52]	; (3bc <_sercom_get_async_baud_val+0x8c>)
     388:	47a0      	blx	r4
     38a:	0002      	movs	r2, r0
     38c:	000b      	movs	r3, r1
     38e:	9200      	str	r2, [sp, #0]
     390:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     392:	0038      	movs	r0, r7
     394:	2100      	movs	r1, #0
     396:	4c0a      	ldr	r4, [pc, #40]	; (3c0 <_sercom_get_async_baud_val+0x90>)
     398:	47a0      	blx	r4
     39a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     39c:	2380      	movs	r3, #128	; 0x80
     39e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3a0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     3a2:	4298      	cmp	r0, r3
     3a4:	d8cf      	bhi.n	346 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     3a6:	0f79      	lsrs	r1, r7, #29
     3a8:	00f8      	lsls	r0, r7, #3
     3aa:	9a00      	ldr	r2, [sp, #0]
     3ac:	9b01      	ldr	r3, [sp, #4]
     3ae:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     3b0:	00ea      	lsls	r2, r5, #3
     3b2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     3b4:	b2d2      	uxtb	r2, r2
     3b6:	0352      	lsls	r2, r2, #13
     3b8:	432a      	orrs	r2, r5
     3ba:	e7db      	b.n	374 <_sercom_get_async_baud_val+0x44>
     3bc:	00001ec5 	.word	0x00001ec5
     3c0:	0000024d 	.word	0x0000024d

000003c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     3c4:	b510      	push	{r4, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     3ca:	4b0e      	ldr	r3, [pc, #56]	; (404 <sercom_set_gclk_generator+0x40>)
     3cc:	781b      	ldrb	r3, [r3, #0]
     3ce:	2b00      	cmp	r3, #0
     3d0:	d007      	beq.n	3e2 <sercom_set_gclk_generator+0x1e>
     3d2:	2900      	cmp	r1, #0
     3d4:	d105      	bne.n	3e2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     3d6:	4b0b      	ldr	r3, [pc, #44]	; (404 <sercom_set_gclk_generator+0x40>)
     3d8:	785b      	ldrb	r3, [r3, #1]
     3da:	4283      	cmp	r3, r0
     3dc:	d010      	beq.n	400 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     3de:	201d      	movs	r0, #29
     3e0:	e00c      	b.n	3fc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     3e2:	a901      	add	r1, sp, #4
     3e4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     3e6:	2013      	movs	r0, #19
     3e8:	4b07      	ldr	r3, [pc, #28]	; (408 <sercom_set_gclk_generator+0x44>)
     3ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     3ec:	2013      	movs	r0, #19
     3ee:	4b07      	ldr	r3, [pc, #28]	; (40c <sercom_set_gclk_generator+0x48>)
     3f0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     3f2:	4b04      	ldr	r3, [pc, #16]	; (404 <sercom_set_gclk_generator+0x40>)
     3f4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     3f6:	2201      	movs	r2, #1
     3f8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     3fa:	2000      	movs	r0, #0
}
     3fc:	b002      	add	sp, #8
     3fe:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     400:	2000      	movs	r0, #0
     402:	e7fb      	b.n	3fc <sercom_set_gclk_generator+0x38>
     404:	20000098 	.word	0x20000098
     408:	000012f1 	.word	0x000012f1
     40c:	00001265 	.word	0x00001265

00000410 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     410:	4b40      	ldr	r3, [pc, #256]	; (514 <_sercom_get_default_pad+0x104>)
     412:	4298      	cmp	r0, r3
     414:	d031      	beq.n	47a <_sercom_get_default_pad+0x6a>
     416:	d90a      	bls.n	42e <_sercom_get_default_pad+0x1e>
     418:	4b3f      	ldr	r3, [pc, #252]	; (518 <_sercom_get_default_pad+0x108>)
     41a:	4298      	cmp	r0, r3
     41c:	d04d      	beq.n	4ba <_sercom_get_default_pad+0xaa>
     41e:	4b3f      	ldr	r3, [pc, #252]	; (51c <_sercom_get_default_pad+0x10c>)
     420:	4298      	cmp	r0, r3
     422:	d05a      	beq.n	4da <_sercom_get_default_pad+0xca>
     424:	4b3e      	ldr	r3, [pc, #248]	; (520 <_sercom_get_default_pad+0x110>)
     426:	4298      	cmp	r0, r3
     428:	d037      	beq.n	49a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     42a:	2000      	movs	r0, #0
}
     42c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     42e:	4b3d      	ldr	r3, [pc, #244]	; (524 <_sercom_get_default_pad+0x114>)
     430:	4298      	cmp	r0, r3
     432:	d00c      	beq.n	44e <_sercom_get_default_pad+0x3e>
     434:	4b3c      	ldr	r3, [pc, #240]	; (528 <_sercom_get_default_pad+0x118>)
     436:	4298      	cmp	r0, r3
     438:	d1f7      	bne.n	42a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     43a:	2901      	cmp	r1, #1
     43c:	d017      	beq.n	46e <_sercom_get_default_pad+0x5e>
     43e:	2900      	cmp	r1, #0
     440:	d05d      	beq.n	4fe <_sercom_get_default_pad+0xee>
     442:	2902      	cmp	r1, #2
     444:	d015      	beq.n	472 <_sercom_get_default_pad+0x62>
     446:	2903      	cmp	r1, #3
     448:	d015      	beq.n	476 <_sercom_get_default_pad+0x66>
	return 0;
     44a:	2000      	movs	r0, #0
     44c:	e7ee      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     44e:	2901      	cmp	r1, #1
     450:	d007      	beq.n	462 <_sercom_get_default_pad+0x52>
     452:	2900      	cmp	r1, #0
     454:	d051      	beq.n	4fa <_sercom_get_default_pad+0xea>
     456:	2902      	cmp	r1, #2
     458:	d005      	beq.n	466 <_sercom_get_default_pad+0x56>
     45a:	2903      	cmp	r1, #3
     45c:	d005      	beq.n	46a <_sercom_get_default_pad+0x5a>
	return 0;
     45e:	2000      	movs	r0, #0
     460:	e7e4      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     462:	4832      	ldr	r0, [pc, #200]	; (52c <_sercom_get_default_pad+0x11c>)
     464:	e7e2      	b.n	42c <_sercom_get_default_pad+0x1c>
     466:	4832      	ldr	r0, [pc, #200]	; (530 <_sercom_get_default_pad+0x120>)
     468:	e7e0      	b.n	42c <_sercom_get_default_pad+0x1c>
     46a:	4832      	ldr	r0, [pc, #200]	; (534 <_sercom_get_default_pad+0x124>)
     46c:	e7de      	b.n	42c <_sercom_get_default_pad+0x1c>
     46e:	4832      	ldr	r0, [pc, #200]	; (538 <_sercom_get_default_pad+0x128>)
     470:	e7dc      	b.n	42c <_sercom_get_default_pad+0x1c>
     472:	4832      	ldr	r0, [pc, #200]	; (53c <_sercom_get_default_pad+0x12c>)
     474:	e7da      	b.n	42c <_sercom_get_default_pad+0x1c>
     476:	4832      	ldr	r0, [pc, #200]	; (540 <_sercom_get_default_pad+0x130>)
     478:	e7d8      	b.n	42c <_sercom_get_default_pad+0x1c>
     47a:	2901      	cmp	r1, #1
     47c:	d007      	beq.n	48e <_sercom_get_default_pad+0x7e>
     47e:	2900      	cmp	r1, #0
     480:	d03f      	beq.n	502 <_sercom_get_default_pad+0xf2>
     482:	2902      	cmp	r1, #2
     484:	d005      	beq.n	492 <_sercom_get_default_pad+0x82>
     486:	2903      	cmp	r1, #3
     488:	d005      	beq.n	496 <_sercom_get_default_pad+0x86>
	return 0;
     48a:	2000      	movs	r0, #0
     48c:	e7ce      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     48e:	482d      	ldr	r0, [pc, #180]	; (544 <_sercom_get_default_pad+0x134>)
     490:	e7cc      	b.n	42c <_sercom_get_default_pad+0x1c>
     492:	482d      	ldr	r0, [pc, #180]	; (548 <_sercom_get_default_pad+0x138>)
     494:	e7ca      	b.n	42c <_sercom_get_default_pad+0x1c>
     496:	482d      	ldr	r0, [pc, #180]	; (54c <_sercom_get_default_pad+0x13c>)
     498:	e7c8      	b.n	42c <_sercom_get_default_pad+0x1c>
     49a:	2901      	cmp	r1, #1
     49c:	d007      	beq.n	4ae <_sercom_get_default_pad+0x9e>
     49e:	2900      	cmp	r1, #0
     4a0:	d031      	beq.n	506 <_sercom_get_default_pad+0xf6>
     4a2:	2902      	cmp	r1, #2
     4a4:	d005      	beq.n	4b2 <_sercom_get_default_pad+0xa2>
     4a6:	2903      	cmp	r1, #3
     4a8:	d005      	beq.n	4b6 <_sercom_get_default_pad+0xa6>
	return 0;
     4aa:	2000      	movs	r0, #0
     4ac:	e7be      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ae:	4828      	ldr	r0, [pc, #160]	; (550 <_sercom_get_default_pad+0x140>)
     4b0:	e7bc      	b.n	42c <_sercom_get_default_pad+0x1c>
     4b2:	4828      	ldr	r0, [pc, #160]	; (554 <_sercom_get_default_pad+0x144>)
     4b4:	e7ba      	b.n	42c <_sercom_get_default_pad+0x1c>
     4b6:	4828      	ldr	r0, [pc, #160]	; (558 <_sercom_get_default_pad+0x148>)
     4b8:	e7b8      	b.n	42c <_sercom_get_default_pad+0x1c>
     4ba:	2901      	cmp	r1, #1
     4bc:	d007      	beq.n	4ce <_sercom_get_default_pad+0xbe>
     4be:	2900      	cmp	r1, #0
     4c0:	d023      	beq.n	50a <_sercom_get_default_pad+0xfa>
     4c2:	2902      	cmp	r1, #2
     4c4:	d005      	beq.n	4d2 <_sercom_get_default_pad+0xc2>
     4c6:	2903      	cmp	r1, #3
     4c8:	d005      	beq.n	4d6 <_sercom_get_default_pad+0xc6>
	return 0;
     4ca:	2000      	movs	r0, #0
     4cc:	e7ae      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ce:	4823      	ldr	r0, [pc, #140]	; (55c <_sercom_get_default_pad+0x14c>)
     4d0:	e7ac      	b.n	42c <_sercom_get_default_pad+0x1c>
     4d2:	4823      	ldr	r0, [pc, #140]	; (560 <_sercom_get_default_pad+0x150>)
     4d4:	e7aa      	b.n	42c <_sercom_get_default_pad+0x1c>
     4d6:	4823      	ldr	r0, [pc, #140]	; (564 <_sercom_get_default_pad+0x154>)
     4d8:	e7a8      	b.n	42c <_sercom_get_default_pad+0x1c>
     4da:	2901      	cmp	r1, #1
     4dc:	d007      	beq.n	4ee <_sercom_get_default_pad+0xde>
     4de:	2900      	cmp	r1, #0
     4e0:	d015      	beq.n	50e <_sercom_get_default_pad+0xfe>
     4e2:	2902      	cmp	r1, #2
     4e4:	d005      	beq.n	4f2 <_sercom_get_default_pad+0xe2>
     4e6:	2903      	cmp	r1, #3
     4e8:	d005      	beq.n	4f6 <_sercom_get_default_pad+0xe6>
	return 0;
     4ea:	2000      	movs	r0, #0
     4ec:	e79e      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ee:	481e      	ldr	r0, [pc, #120]	; (568 <_sercom_get_default_pad+0x158>)
     4f0:	e79c      	b.n	42c <_sercom_get_default_pad+0x1c>
     4f2:	481e      	ldr	r0, [pc, #120]	; (56c <_sercom_get_default_pad+0x15c>)
     4f4:	e79a      	b.n	42c <_sercom_get_default_pad+0x1c>
     4f6:	481e      	ldr	r0, [pc, #120]	; (570 <_sercom_get_default_pad+0x160>)
     4f8:	e798      	b.n	42c <_sercom_get_default_pad+0x1c>
     4fa:	481e      	ldr	r0, [pc, #120]	; (574 <_sercom_get_default_pad+0x164>)
     4fc:	e796      	b.n	42c <_sercom_get_default_pad+0x1c>
     4fe:	2003      	movs	r0, #3
     500:	e794      	b.n	42c <_sercom_get_default_pad+0x1c>
     502:	481d      	ldr	r0, [pc, #116]	; (578 <_sercom_get_default_pad+0x168>)
     504:	e792      	b.n	42c <_sercom_get_default_pad+0x1c>
     506:	481d      	ldr	r0, [pc, #116]	; (57c <_sercom_get_default_pad+0x16c>)
     508:	e790      	b.n	42c <_sercom_get_default_pad+0x1c>
     50a:	481d      	ldr	r0, [pc, #116]	; (580 <_sercom_get_default_pad+0x170>)
     50c:	e78e      	b.n	42c <_sercom_get_default_pad+0x1c>
     50e:	481d      	ldr	r0, [pc, #116]	; (584 <_sercom_get_default_pad+0x174>)
     510:	e78c      	b.n	42c <_sercom_get_default_pad+0x1c>
     512:	46c0      	nop			; (mov r8, r8)
     514:	42001000 	.word	0x42001000
     518:	42001800 	.word	0x42001800
     51c:	42001c00 	.word	0x42001c00
     520:	42001400 	.word	0x42001400
     524:	42000800 	.word	0x42000800
     528:	42000c00 	.word	0x42000c00
     52c:	00050003 	.word	0x00050003
     530:	00060003 	.word	0x00060003
     534:	00070003 	.word	0x00070003
     538:	00010003 	.word	0x00010003
     53c:	001e0003 	.word	0x001e0003
     540:	001f0003 	.word	0x001f0003
     544:	00090003 	.word	0x00090003
     548:	000a0003 	.word	0x000a0003
     54c:	000b0003 	.word	0x000b0003
     550:	00110003 	.word	0x00110003
     554:	00120003 	.word	0x00120003
     558:	00130003 	.word	0x00130003
     55c:	000d0003 	.word	0x000d0003
     560:	000e0003 	.word	0x000e0003
     564:	000f0003 	.word	0x000f0003
     568:	00170003 	.word	0x00170003
     56c:	00180003 	.word	0x00180003
     570:	00190003 	.word	0x00190003
     574:	00040003 	.word	0x00040003
     578:	00080003 	.word	0x00080003
     57c:	00100003 	.word	0x00100003
     580:	000c0003 	.word	0x000c0003
     584:	00160003 	.word	0x00160003

00000588 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     588:	b530      	push	{r4, r5, lr}
     58a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     58c:	4b0b      	ldr	r3, [pc, #44]	; (5bc <_sercom_get_sercom_inst_index+0x34>)
     58e:	466a      	mov	r2, sp
     590:	cb32      	ldmia	r3!, {r1, r4, r5}
     592:	c232      	stmia	r2!, {r1, r4, r5}
     594:	cb32      	ldmia	r3!, {r1, r4, r5}
     596:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     598:	9b00      	ldr	r3, [sp, #0]
     59a:	4283      	cmp	r3, r0
     59c:	d00b      	beq.n	5b6 <_sercom_get_sercom_inst_index+0x2e>
     59e:	2301      	movs	r3, #1
     5a0:	009a      	lsls	r2, r3, #2
     5a2:	4669      	mov	r1, sp
     5a4:	5852      	ldr	r2, [r2, r1]
     5a6:	4282      	cmp	r2, r0
     5a8:	d006      	beq.n	5b8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5aa:	3301      	adds	r3, #1
     5ac:	2b06      	cmp	r3, #6
     5ae:	d1f7      	bne.n	5a0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     5b0:	2000      	movs	r0, #0
}
     5b2:	b007      	add	sp, #28
     5b4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5b6:	2300      	movs	r3, #0
			return i;
     5b8:	b2d8      	uxtb	r0, r3
     5ba:	e7fa      	b.n	5b2 <_sercom_get_sercom_inst_index+0x2a>
     5bc:	00002fc4 	.word	0x00002fc4

000005c0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     5c0:	4770      	bx	lr
	...

000005c4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     5c6:	4b0a      	ldr	r3, [pc, #40]	; (5f0 <_sercom_set_handler+0x2c>)
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b00      	cmp	r3, #0
     5cc:	d10c      	bne.n	5e8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     5ce:	4f09      	ldr	r7, [pc, #36]	; (5f4 <_sercom_set_handler+0x30>)
     5d0:	4e09      	ldr	r6, [pc, #36]	; (5f8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     5d2:	4d0a      	ldr	r5, [pc, #40]	; (5fc <_sercom_set_handler+0x38>)
     5d4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     5d6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     5d8:	195a      	adds	r2, r3, r5
     5da:	6014      	str	r4, [r2, #0]
     5dc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5de:	2b18      	cmp	r3, #24
     5e0:	d1f9      	bne.n	5d6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     5e2:	2201      	movs	r2, #1
     5e4:	4b02      	ldr	r3, [pc, #8]	; (5f0 <_sercom_set_handler+0x2c>)
     5e6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     5e8:	0080      	lsls	r0, r0, #2
     5ea:	4b02      	ldr	r3, [pc, #8]	; (5f4 <_sercom_set_handler+0x30>)
     5ec:	50c1      	str	r1, [r0, r3]
}
     5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5f0:	2000009a 	.word	0x2000009a
     5f4:	2000009c 	.word	0x2000009c
     5f8:	000005c1 	.word	0x000005c1
     5fc:	200000d8 	.word	0x200000d8

00000600 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     600:	b500      	push	{lr}
     602:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     604:	2309      	movs	r3, #9
     606:	466a      	mov	r2, sp
     608:	7013      	strb	r3, [r2, #0]
     60a:	3301      	adds	r3, #1
     60c:	7053      	strb	r3, [r2, #1]
     60e:	3301      	adds	r3, #1
     610:	7093      	strb	r3, [r2, #2]
     612:	3301      	adds	r3, #1
     614:	70d3      	strb	r3, [r2, #3]
     616:	3301      	adds	r3, #1
     618:	7113      	strb	r3, [r2, #4]
     61a:	3301      	adds	r3, #1
     61c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     61e:	4b03      	ldr	r3, [pc, #12]	; (62c <_sercom_get_interrupt_vector+0x2c>)
     620:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     622:	466b      	mov	r3, sp
     624:	5618      	ldrsb	r0, [r3, r0]
}
     626:	b003      	add	sp, #12
     628:	bd00      	pop	{pc}
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	00000589 	.word	0x00000589

00000630 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     630:	b510      	push	{r4, lr}
     632:	4b02      	ldr	r3, [pc, #8]	; (63c <SERCOM0_Handler+0xc>)
     634:	681b      	ldr	r3, [r3, #0]
     636:	2000      	movs	r0, #0
     638:	4798      	blx	r3
     63a:	bd10      	pop	{r4, pc}
     63c:	2000009c 	.word	0x2000009c

00000640 <SERCOM1_Handler>:
     640:	b510      	push	{r4, lr}
     642:	4b02      	ldr	r3, [pc, #8]	; (64c <SERCOM1_Handler+0xc>)
     644:	685b      	ldr	r3, [r3, #4]
     646:	2001      	movs	r0, #1
     648:	4798      	blx	r3
     64a:	bd10      	pop	{r4, pc}
     64c:	2000009c 	.word	0x2000009c

00000650 <SERCOM2_Handler>:
     650:	b510      	push	{r4, lr}
     652:	4b02      	ldr	r3, [pc, #8]	; (65c <SERCOM2_Handler+0xc>)
     654:	689b      	ldr	r3, [r3, #8]
     656:	2002      	movs	r0, #2
     658:	4798      	blx	r3
     65a:	bd10      	pop	{r4, pc}
     65c:	2000009c 	.word	0x2000009c

00000660 <SERCOM3_Handler>:
     660:	b510      	push	{r4, lr}
     662:	4b02      	ldr	r3, [pc, #8]	; (66c <SERCOM3_Handler+0xc>)
     664:	68db      	ldr	r3, [r3, #12]
     666:	2003      	movs	r0, #3
     668:	4798      	blx	r3
     66a:	bd10      	pop	{r4, pc}
     66c:	2000009c 	.word	0x2000009c

00000670 <SERCOM4_Handler>:
     670:	b510      	push	{r4, lr}
     672:	4b02      	ldr	r3, [pc, #8]	; (67c <SERCOM4_Handler+0xc>)
     674:	691b      	ldr	r3, [r3, #16]
     676:	2004      	movs	r0, #4
     678:	4798      	blx	r3
     67a:	bd10      	pop	{r4, pc}
     67c:	2000009c 	.word	0x2000009c

00000680 <SERCOM5_Handler>:
     680:	b510      	push	{r4, lr}
     682:	4b02      	ldr	r3, [pc, #8]	; (68c <SERCOM5_Handler+0xc>)
     684:	695b      	ldr	r3, [r3, #20]
     686:	2005      	movs	r0, #5
     688:	4798      	blx	r3
     68a:	bd10      	pop	{r4, pc}
     68c:	2000009c 	.word	0x2000009c

00000690 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     690:	b5f0      	push	{r4, r5, r6, r7, lr}
     692:	46de      	mov	lr, fp
     694:	4657      	mov	r7, sl
     696:	464e      	mov	r6, r9
     698:	4645      	mov	r5, r8
     69a:	b5e0      	push	{r5, r6, r7, lr}
     69c:	b091      	sub	sp, #68	; 0x44
     69e:	0005      	movs	r5, r0
     6a0:	000c      	movs	r4, r1
     6a2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     6a4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6a6:	0008      	movs	r0, r1
     6a8:	4bba      	ldr	r3, [pc, #744]	; (994 <usart_init+0x304>)
     6aa:	4798      	blx	r3
     6ac:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     6ae:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     6b0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     6b2:	07db      	lsls	r3, r3, #31
     6b4:	d506      	bpl.n	6c4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     6b6:	b011      	add	sp, #68	; 0x44
     6b8:	bc3c      	pop	{r2, r3, r4, r5}
     6ba:	4690      	mov	r8, r2
     6bc:	4699      	mov	r9, r3
     6be:	46a2      	mov	sl, r4
     6c0:	46ab      	mov	fp, r5
     6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     6c4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     6c6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     6c8:	079b      	lsls	r3, r3, #30
     6ca:	d4f4      	bmi.n	6b6 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     6cc:	49b2      	ldr	r1, [pc, #712]	; (998 <usart_init+0x308>)
     6ce:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     6d0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     6d2:	2301      	movs	r3, #1
     6d4:	40bb      	lsls	r3, r7
     6d6:	4303      	orrs	r3, r0
     6d8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     6da:	a90f      	add	r1, sp, #60	; 0x3c
     6dc:	272d      	movs	r7, #45	; 0x2d
     6de:	5df3      	ldrb	r3, [r6, r7]
     6e0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6e2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     6e4:	b2d3      	uxtb	r3, r2
     6e6:	9302      	str	r3, [sp, #8]
     6e8:	0018      	movs	r0, r3
     6ea:	4bac      	ldr	r3, [pc, #688]	; (99c <usart_init+0x30c>)
     6ec:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     6ee:	9802      	ldr	r0, [sp, #8]
     6f0:	4bab      	ldr	r3, [pc, #684]	; (9a0 <usart_init+0x310>)
     6f2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     6f4:	5df0      	ldrb	r0, [r6, r7]
     6f6:	2100      	movs	r1, #0
     6f8:	4baa      	ldr	r3, [pc, #680]	; (9a4 <usart_init+0x314>)
     6fa:	4798      	blx	r3
	module->character_size = config->character_size;
     6fc:	7af3      	ldrb	r3, [r6, #11]
     6fe:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     700:	2324      	movs	r3, #36	; 0x24
     702:	5cf3      	ldrb	r3, [r6, r3]
     704:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     706:	2325      	movs	r3, #37	; 0x25
     708:	5cf3      	ldrb	r3, [r6, r3]
     70a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     70c:	7ef3      	ldrb	r3, [r6, #27]
     70e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     710:	7f33      	ldrb	r3, [r6, #28]
     712:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     714:	682b      	ldr	r3, [r5, #0]
     716:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     718:	0018      	movs	r0, r3
     71a:	4b9e      	ldr	r3, [pc, #632]	; (994 <usart_init+0x304>)
     71c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     71e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     720:	2200      	movs	r2, #0
     722:	230e      	movs	r3, #14
     724:	a906      	add	r1, sp, #24
     726:	468c      	mov	ip, r1
     728:	4463      	add	r3, ip
     72a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     72c:	8a32      	ldrh	r2, [r6, #16]
     72e:	9202      	str	r2, [sp, #8]
     730:	2380      	movs	r3, #128	; 0x80
     732:	01db      	lsls	r3, r3, #7
     734:	429a      	cmp	r2, r3
     736:	d100      	bne.n	73a <usart_init+0xaa>
     738:	e09a      	b.n	870 <usart_init+0x1e0>
     73a:	d90f      	bls.n	75c <usart_init+0xcc>
     73c:	23c0      	movs	r3, #192	; 0xc0
     73e:	01db      	lsls	r3, r3, #7
     740:	9a02      	ldr	r2, [sp, #8]
     742:	429a      	cmp	r2, r3
     744:	d100      	bne.n	748 <usart_init+0xb8>
     746:	e08e      	b.n	866 <usart_init+0x1d6>
     748:	2380      	movs	r3, #128	; 0x80
     74a:	021b      	lsls	r3, r3, #8
     74c:	429a      	cmp	r2, r3
     74e:	d000      	beq.n	752 <usart_init+0xc2>
     750:	e11b      	b.n	98a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     752:	2303      	movs	r3, #3
     754:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     756:	2300      	movs	r3, #0
     758:	9307      	str	r3, [sp, #28]
     75a:	e008      	b.n	76e <usart_init+0xde>
	switch (config->sample_rate) {
     75c:	2380      	movs	r3, #128	; 0x80
     75e:	019b      	lsls	r3, r3, #6
     760:	429a      	cmp	r2, r3
     762:	d000      	beq.n	766 <usart_init+0xd6>
     764:	e111      	b.n	98a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     766:	2310      	movs	r3, #16
     768:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     76a:	3b0f      	subs	r3, #15
     76c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     76e:	6833      	ldr	r3, [r6, #0]
     770:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     772:	68f3      	ldr	r3, [r6, #12]
     774:	469b      	mov	fp, r3
		config->sample_adjustment |
     776:	6973      	ldr	r3, [r6, #20]
     778:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     77a:	7e33      	ldrb	r3, [r6, #24]
     77c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     77e:	2326      	movs	r3, #38	; 0x26
     780:	5cf3      	ldrb	r3, [r6, r3]
     782:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     784:	6873      	ldr	r3, [r6, #4]
     786:	4699      	mov	r9, r3
	switch (transfer_mode)
     788:	2b00      	cmp	r3, #0
     78a:	d100      	bne.n	78e <usart_init+0xfe>
     78c:	e09c      	b.n	8c8 <usart_init+0x238>
     78e:	2380      	movs	r3, #128	; 0x80
     790:	055b      	lsls	r3, r3, #21
     792:	4599      	cmp	r9, r3
     794:	d100      	bne.n	798 <usart_init+0x108>
     796:	e080      	b.n	89a <usart_init+0x20a>
	if(config->encoding_format_enable) {
     798:	7e73      	ldrb	r3, [r6, #25]
     79a:	2b00      	cmp	r3, #0
     79c:	d002      	beq.n	7a4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     79e:	7eb3      	ldrb	r3, [r6, #26]
     7a0:	4642      	mov	r2, r8
     7a2:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     7a4:	230e      	movs	r3, #14
     7a6:	aa06      	add	r2, sp, #24
     7a8:	4694      	mov	ip, r2
     7aa:	4463      	add	r3, ip
     7ac:	881b      	ldrh	r3, [r3, #0]
     7ae:	4642      	mov	r2, r8
     7b0:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     7b2:	9b05      	ldr	r3, [sp, #20]
     7b4:	465a      	mov	r2, fp
     7b6:	4313      	orrs	r3, r2
     7b8:	9a03      	ldr	r2, [sp, #12]
     7ba:	4313      	orrs	r3, r2
     7bc:	464a      	mov	r2, r9
     7be:	4313      	orrs	r3, r2
     7c0:	9f02      	ldr	r7, [sp, #8]
     7c2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     7c4:	9b04      	ldr	r3, [sp, #16]
     7c6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     7c8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7ca:	4653      	mov	r3, sl
     7cc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     7ce:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     7d0:	2327      	movs	r3, #39	; 0x27
     7d2:	5cf3      	ldrb	r3, [r6, r3]
     7d4:	2b00      	cmp	r3, #0
     7d6:	d101      	bne.n	7dc <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     7d8:	3304      	adds	r3, #4
     7da:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     7dc:	7e73      	ldrb	r3, [r6, #25]
     7de:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     7e0:	7f32      	ldrb	r2, [r6, #28]
     7e2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     7e4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     7e6:	7f72      	ldrb	r2, [r6, #29]
     7e8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     7ea:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7ec:	2224      	movs	r2, #36	; 0x24
     7ee:	5cb2      	ldrb	r2, [r6, r2]
     7f0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     7f2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     7f4:	2225      	movs	r2, #37	; 0x25
     7f6:	5cb2      	ldrb	r2, [r6, r2]
     7f8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7fa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     7fc:	7ab1      	ldrb	r1, [r6, #10]
     7fe:	7af2      	ldrb	r2, [r6, #11]
     800:	4311      	orrs	r1, r2
     802:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     804:	8933      	ldrh	r3, [r6, #8]
     806:	2bff      	cmp	r3, #255	; 0xff
     808:	d100      	bne.n	80c <usart_init+0x17c>
     80a:	e081      	b.n	910 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     80c:	2280      	movs	r2, #128	; 0x80
     80e:	0452      	lsls	r2, r2, #17
     810:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     812:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     814:	232c      	movs	r3, #44	; 0x2c
     816:	5cf3      	ldrb	r3, [r6, r3]
     818:	2b00      	cmp	r3, #0
     81a:	d103      	bne.n	824 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     81c:	4b62      	ldr	r3, [pc, #392]	; (9a8 <usart_init+0x318>)
     81e:	789b      	ldrb	r3, [r3, #2]
     820:	079b      	lsls	r3, r3, #30
     822:	d501      	bpl.n	828 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     824:	2380      	movs	r3, #128	; 0x80
     826:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     828:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     82a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     82c:	2b00      	cmp	r3, #0
     82e:	d1fc      	bne.n	82a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     830:	4643      	mov	r3, r8
     832:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     834:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     836:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     838:	2b00      	cmp	r3, #0
     83a:	d1fc      	bne.n	836 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     83c:	4643      	mov	r3, r8
     83e:	601f      	str	r7, [r3, #0]
     840:	ab0e      	add	r3, sp, #56	; 0x38
     842:	2280      	movs	r2, #128	; 0x80
     844:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     846:	2200      	movs	r2, #0
     848:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     84a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     84c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     84e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     850:	930a      	str	r3, [sp, #40]	; 0x28
     852:	6b73      	ldr	r3, [r6, #52]	; 0x34
     854:	930b      	str	r3, [sp, #44]	; 0x2c
     856:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     858:	930c      	str	r3, [sp, #48]	; 0x30
     85a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     85c:	9302      	str	r3, [sp, #8]
     85e:	930d      	str	r3, [sp, #52]	; 0x34
     860:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     862:	ae0a      	add	r6, sp, #40	; 0x28
     864:	e063      	b.n	92e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     866:	2308      	movs	r3, #8
     868:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     86a:	3b07      	subs	r3, #7
     86c:	9307      	str	r3, [sp, #28]
     86e:	e77e      	b.n	76e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     870:	6833      	ldr	r3, [r6, #0]
     872:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     874:	68f3      	ldr	r3, [r6, #12]
     876:	469b      	mov	fp, r3
		config->sample_adjustment |
     878:	6973      	ldr	r3, [r6, #20]
     87a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     87c:	7e33      	ldrb	r3, [r6, #24]
     87e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     880:	2326      	movs	r3, #38	; 0x26
     882:	5cf3      	ldrb	r3, [r6, r3]
     884:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     886:	6873      	ldr	r3, [r6, #4]
     888:	4699      	mov	r9, r3
	switch (transfer_mode)
     88a:	2b00      	cmp	r3, #0
     88c:	d018      	beq.n	8c0 <usart_init+0x230>
     88e:	2380      	movs	r3, #128	; 0x80
     890:	055b      	lsls	r3, r3, #21
     892:	4599      	cmp	r9, r3
     894:	d001      	beq.n	89a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     896:	2000      	movs	r0, #0
     898:	e025      	b.n	8e6 <usart_init+0x256>
			if (!config->use_external_clock) {
     89a:	2327      	movs	r3, #39	; 0x27
     89c:	5cf3      	ldrb	r3, [r6, r3]
     89e:	2b00      	cmp	r3, #0
     8a0:	d000      	beq.n	8a4 <usart_init+0x214>
     8a2:	e779      	b.n	798 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     8a4:	6a33      	ldr	r3, [r6, #32]
     8a6:	001f      	movs	r7, r3
     8a8:	b2c0      	uxtb	r0, r0
     8aa:	4b40      	ldr	r3, [pc, #256]	; (9ac <usart_init+0x31c>)
     8ac:	4798      	blx	r3
     8ae:	0001      	movs	r1, r0
     8b0:	220e      	movs	r2, #14
     8b2:	ab06      	add	r3, sp, #24
     8b4:	469c      	mov	ip, r3
     8b6:	4462      	add	r2, ip
     8b8:	0038      	movs	r0, r7
     8ba:	4b3d      	ldr	r3, [pc, #244]	; (9b0 <usart_init+0x320>)
     8bc:	4798      	blx	r3
     8be:	e012      	b.n	8e6 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8c0:	2308      	movs	r3, #8
     8c2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8c4:	2300      	movs	r3, #0
     8c6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     8c8:	2327      	movs	r3, #39	; 0x27
     8ca:	5cf3      	ldrb	r3, [r6, r3]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d00e      	beq.n	8ee <usart_init+0x25e>
				status_code =
     8d0:	9b06      	ldr	r3, [sp, #24]
     8d2:	9300      	str	r3, [sp, #0]
     8d4:	9b07      	ldr	r3, [sp, #28]
     8d6:	220e      	movs	r2, #14
     8d8:	a906      	add	r1, sp, #24
     8da:	468c      	mov	ip, r1
     8dc:	4462      	add	r2, ip
     8de:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     8e0:	6a30      	ldr	r0, [r6, #32]
     8e2:	4f34      	ldr	r7, [pc, #208]	; (9b4 <usart_init+0x324>)
     8e4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     8e6:	2800      	cmp	r0, #0
     8e8:	d000      	beq.n	8ec <usart_init+0x25c>
     8ea:	e6e4      	b.n	6b6 <usart_init+0x26>
     8ec:	e754      	b.n	798 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     8ee:	6a33      	ldr	r3, [r6, #32]
     8f0:	001f      	movs	r7, r3
     8f2:	b2c0      	uxtb	r0, r0
     8f4:	4b2d      	ldr	r3, [pc, #180]	; (9ac <usart_init+0x31c>)
     8f6:	4798      	blx	r3
     8f8:	0001      	movs	r1, r0
				status_code =
     8fa:	9b06      	ldr	r3, [sp, #24]
     8fc:	9300      	str	r3, [sp, #0]
     8fe:	9b07      	ldr	r3, [sp, #28]
     900:	220e      	movs	r2, #14
     902:	a806      	add	r0, sp, #24
     904:	4684      	mov	ip, r0
     906:	4462      	add	r2, ip
     908:	0038      	movs	r0, r7
     90a:	4f2a      	ldr	r7, [pc, #168]	; (9b4 <usart_init+0x324>)
     90c:	47b8      	blx	r7
     90e:	e7ea      	b.n	8e6 <usart_init+0x256>
		if(config->lin_slave_enable) {
     910:	7ef3      	ldrb	r3, [r6, #27]
     912:	2b00      	cmp	r3, #0
     914:	d100      	bne.n	918 <usart_init+0x288>
     916:	e77d      	b.n	814 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     918:	2380      	movs	r3, #128	; 0x80
     91a:	04db      	lsls	r3, r3, #19
     91c:	431f      	orrs	r7, r3
     91e:	e779      	b.n	814 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     920:	0020      	movs	r0, r4
     922:	4b25      	ldr	r3, [pc, #148]	; (9b8 <usart_init+0x328>)
     924:	4798      	blx	r3
     926:	e007      	b.n	938 <usart_init+0x2a8>
     928:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     92a:	2f04      	cmp	r7, #4
     92c:	d00d      	beq.n	94a <usart_init+0x2ba>
     92e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     930:	00bb      	lsls	r3, r7, #2
     932:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     934:	2800      	cmp	r0, #0
     936:	d0f3      	beq.n	920 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     938:	1c43      	adds	r3, r0, #1
     93a:	d0f5      	beq.n	928 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     93c:	a90e      	add	r1, sp, #56	; 0x38
     93e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     940:	0c00      	lsrs	r0, r0, #16
     942:	b2c0      	uxtb	r0, r0
     944:	4b1d      	ldr	r3, [pc, #116]	; (9bc <usart_init+0x32c>)
     946:	4798      	blx	r3
     948:	e7ee      	b.n	928 <usart_init+0x298>
		module->callback[i]            = NULL;
     94a:	2300      	movs	r3, #0
     94c:	60eb      	str	r3, [r5, #12]
     94e:	612b      	str	r3, [r5, #16]
     950:	616b      	str	r3, [r5, #20]
     952:	61ab      	str	r3, [r5, #24]
     954:	61eb      	str	r3, [r5, #28]
     956:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     958:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     95a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     95c:	2200      	movs	r2, #0
     95e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     960:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     962:	3330      	adds	r3, #48	; 0x30
     964:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     966:	3301      	adds	r3, #1
     968:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     96a:	3301      	adds	r3, #1
     96c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     96e:	3301      	adds	r3, #1
     970:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     972:	6828      	ldr	r0, [r5, #0]
     974:	4b07      	ldr	r3, [pc, #28]	; (994 <usart_init+0x304>)
     976:	4798      	blx	r3
     978:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     97a:	4911      	ldr	r1, [pc, #68]	; (9c0 <usart_init+0x330>)
     97c:	4b11      	ldr	r3, [pc, #68]	; (9c4 <usart_init+0x334>)
     97e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     980:	00a4      	lsls	r4, r4, #2
     982:	4b11      	ldr	r3, [pc, #68]	; (9c8 <usart_init+0x338>)
     984:	50e5      	str	r5, [r4, r3]
	return status_code;
     986:	2000      	movs	r0, #0
     988:	e695      	b.n	6b6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     98a:	2310      	movs	r3, #16
     98c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     98e:	2300      	movs	r3, #0
     990:	9307      	str	r3, [sp, #28]
     992:	e6ec      	b.n	76e <usart_init+0xde>
     994:	00000589 	.word	0x00000589
     998:	40000400 	.word	0x40000400
     99c:	000012f1 	.word	0x000012f1
     9a0:	00001265 	.word	0x00001265
     9a4:	000003c5 	.word	0x000003c5
     9a8:	41002000 	.word	0x41002000
     9ac:	0000130d 	.word	0x0000130d
     9b0:	00000307 	.word	0x00000307
     9b4:	00000331 	.word	0x00000331
     9b8:	00000411 	.word	0x00000411
     9bc:	000013e9 	.word	0x000013e9
     9c0:	00000b19 	.word	0x00000b19
     9c4:	000005c5 	.word	0x000005c5
     9c8:	200000d8 	.word	0x200000d8

000009cc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     9cc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     9ce:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     9d0:	2a00      	cmp	r2, #0
     9d2:	d101      	bne.n	9d8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     9d4:	0018      	movs	r0, r3
     9d6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     9d8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     9da:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     9dc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     9de:	2a00      	cmp	r2, #0
     9e0:	d1f8      	bne.n	9d4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     9e2:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     9e4:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     9e6:	2102      	movs	r1, #2
     9e8:	7e13      	ldrb	r3, [r2, #24]
     9ea:	420b      	tst	r3, r1
     9ec:	d0fc      	beq.n	9e8 <usart_write_wait+0x1c>
	return STATUS_OK;
     9ee:	2300      	movs	r3, #0
     9f0:	e7f0      	b.n	9d4 <usart_write_wait+0x8>

000009f2 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     9f2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     9f4:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     9f6:	2a00      	cmp	r2, #0
     9f8:	d101      	bne.n	9fe <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     9fa:	0018      	movs	r0, r3
     9fc:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     9fe:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     a00:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     a02:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     a04:	2a00      	cmp	r2, #0
     a06:	d1f8      	bne.n	9fa <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     a08:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     a0a:	7e10      	ldrb	r0, [r2, #24]
     a0c:	0740      	lsls	r0, r0, #29
     a0e:	d5f4      	bpl.n	9fa <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a10:	8b53      	ldrh	r3, [r2, #26]
     a12:	b2db      	uxtb	r3, r3
	if (error_code) {
     a14:	0698      	lsls	r0, r3, #26
     a16:	d01d      	beq.n	a54 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     a18:	0798      	lsls	r0, r3, #30
     a1a:	d503      	bpl.n	a24 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a1c:	2302      	movs	r3, #2
     a1e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     a20:	3318      	adds	r3, #24
     a22:	e7ea      	b.n	9fa <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a24:	0758      	lsls	r0, r3, #29
     a26:	d503      	bpl.n	a30 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a28:	2304      	movs	r3, #4
     a2a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     a2c:	331a      	adds	r3, #26
     a2e:	e7e4      	b.n	9fa <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a30:	07d8      	lsls	r0, r3, #31
     a32:	d503      	bpl.n	a3c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a34:	2301      	movs	r3, #1
     a36:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     a38:	3312      	adds	r3, #18
     a3a:	e7de      	b.n	9fa <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     a3c:	06d8      	lsls	r0, r3, #27
     a3e:	d503      	bpl.n	a48 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     a40:	2310      	movs	r3, #16
     a42:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     a44:	3332      	adds	r3, #50	; 0x32
     a46:	e7d8      	b.n	9fa <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     a48:	069b      	lsls	r3, r3, #26
     a4a:	d503      	bpl.n	a54 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     a4c:	2320      	movs	r3, #32
     a4e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     a50:	3321      	adds	r3, #33	; 0x21
     a52:	e7d2      	b.n	9fa <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     a54:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     a56:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     a58:	2300      	movs	r3, #0
     a5a:	e7ce      	b.n	9fa <usart_read_wait+0x8>

00000a5c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a5e:	46ce      	mov	lr, r9
     a60:	4647      	mov	r7, r8
     a62:	b580      	push	{r7, lr}
     a64:	b083      	sub	sp, #12
     a66:	0005      	movs	r5, r0
     a68:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     a6a:	2017      	movs	r0, #23
	if (length == 0) {
     a6c:	2a00      	cmp	r2, #0
     a6e:	d104      	bne.n	a7a <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     a70:	b003      	add	sp, #12
     a72:	bc0c      	pop	{r2, r3}
     a74:	4690      	mov	r8, r2
     a76:	4699      	mov	r9, r3
     a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     a7a:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     a7c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     a7e:	2b00      	cmp	r3, #0
     a80:	d0f6      	beq.n	a70 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     a82:	682c      	ldr	r4, [r5, #0]
	while (length--) {
     a84:	3a01      	subs	r2, #1
     a86:	b293      	uxth	r3, r2
     a88:	4699      	mov	r9, r3
     a8a:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     a8c:	2701      	movs	r7, #1
	while (length--) {
     a8e:	4b20      	ldr	r3, [pc, #128]	; (b10 <usart_write_buffer_wait+0xb4>)
     a90:	4698      	mov	r8, r3
     a92:	e011      	b.n	ab8 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
     a94:	1c73      	adds	r3, r6, #1
     a96:	b29b      	uxth	r3, r3
     a98:	9a01      	ldr	r2, [sp, #4]
     a9a:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a9c:	796a      	ldrb	r2, [r5, #5]
     a9e:	2a01      	cmp	r2, #1
     aa0:	d017      	beq.n	ad2 <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
     aa2:	b289      	uxth	r1, r1
     aa4:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     aa6:	0028      	movs	r0, r5
     aa8:	4b1a      	ldr	r3, [pc, #104]	; (b14 <usart_write_buffer_wait+0xb8>)
     aaa:	4798      	blx	r3
	while (length--) {
     aac:	464b      	mov	r3, r9
     aae:	3b01      	subs	r3, #1
     ab0:	b29b      	uxth	r3, r3
     ab2:	4699      	mov	r9, r3
     ab4:	4543      	cmp	r3, r8
     ab6:	d013      	beq.n	ae0 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     ab8:	7e23      	ldrb	r3, [r4, #24]
     aba:	423b      	tst	r3, r7
     abc:	d1ea      	bne.n	a94 <usart_write_buffer_wait+0x38>
     abe:	4b14      	ldr	r3, [pc, #80]	; (b10 <usart_write_buffer_wait+0xb4>)
     ac0:	7e22      	ldrb	r2, [r4, #24]
     ac2:	423a      	tst	r2, r7
     ac4:	d1e6      	bne.n	a94 <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
     ac6:	2b01      	cmp	r3, #1
     ac8:	d019      	beq.n	afe <usart_write_buffer_wait+0xa2>
     aca:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     acc:	2b00      	cmp	r3, #0
     ace:	d1f7      	bne.n	ac0 <usart_write_buffer_wait+0x64>
     ad0:	e7e0      	b.n	a94 <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
     ad2:	3602      	adds	r6, #2
     ad4:	b2b6      	uxth	r6, r6
     ad6:	9a01      	ldr	r2, [sp, #4]
     ad8:	5cd3      	ldrb	r3, [r2, r3]
     ada:	021b      	lsls	r3, r3, #8
     adc:	4319      	orrs	r1, r3
     ade:	e7e2      	b.n	aa6 <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     ae0:	7e23      	ldrb	r3, [r4, #24]
     ae2:	079b      	lsls	r3, r3, #30
     ae4:	d40d      	bmi.n	b02 <usart_write_buffer_wait+0xa6>
     ae6:	4b0a      	ldr	r3, [pc, #40]	; (b10 <usart_write_buffer_wait+0xb4>)
     ae8:	2102      	movs	r1, #2
     aea:	7e22      	ldrb	r2, [r4, #24]
     aec:	420a      	tst	r2, r1
     aee:	d10a      	bne.n	b06 <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
     af0:	2b01      	cmp	r3, #1
     af2:	d00a      	beq.n	b0a <usart_write_buffer_wait+0xae>
     af4:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     af6:	2b00      	cmp	r3, #0
     af8:	d1f7      	bne.n	aea <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
     afa:	2000      	movs	r0, #0
     afc:	e7b8      	b.n	a70 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     afe:	2012      	movs	r0, #18
     b00:	e7b6      	b.n	a70 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     b02:	2000      	movs	r0, #0
     b04:	e7b4      	b.n	a70 <usart_write_buffer_wait+0x14>
     b06:	2000      	movs	r0, #0
     b08:	e7b2      	b.n	a70 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     b0a:	2012      	movs	r0, #18
     b0c:	e7b0      	b.n	a70 <usart_write_buffer_wait+0x14>
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	0000ffff 	.word	0x0000ffff
     b14:	000009cd 	.word	0x000009cd

00000b18 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     b1a:	0080      	lsls	r0, r0, #2
     b1c:	4b62      	ldr	r3, [pc, #392]	; (ca8 <_usart_interrupt_handler+0x190>)
     b1e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     b20:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     b22:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     b24:	2b00      	cmp	r3, #0
     b26:	d1fc      	bne.n	b22 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     b28:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     b2a:	7da6      	ldrb	r6, [r4, #22]
     b2c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     b2e:	2330      	movs	r3, #48	; 0x30
     b30:	5ceb      	ldrb	r3, [r5, r3]
     b32:	2231      	movs	r2, #49	; 0x31
     b34:	5caf      	ldrb	r7, [r5, r2]
     b36:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     b38:	07f3      	lsls	r3, r6, #31
     b3a:	d522      	bpl.n	b82 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     b3c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     b3e:	b29b      	uxth	r3, r3
     b40:	2b00      	cmp	r3, #0
     b42:	d01c      	beq.n	b7e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     b46:	7813      	ldrb	r3, [r2, #0]
     b48:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     b4a:	1c51      	adds	r1, r2, #1
     b4c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b4e:	7969      	ldrb	r1, [r5, #5]
     b50:	2901      	cmp	r1, #1
     b52:	d00e      	beq.n	b72 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b54:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     b56:	05db      	lsls	r3, r3, #23
     b58:	0ddb      	lsrs	r3, r3, #23
     b5a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     b5c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     b5e:	3b01      	subs	r3, #1
     b60:	b29b      	uxth	r3, r3
     b62:	85eb      	strh	r3, [r5, #46]	; 0x2e
     b64:	2b00      	cmp	r3, #0
     b66:	d10c      	bne.n	b82 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b68:	3301      	adds	r3, #1
     b6a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     b6c:	3301      	adds	r3, #1
     b6e:	75a3      	strb	r3, [r4, #22]
     b70:	e007      	b.n	b82 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     b72:	7851      	ldrb	r1, [r2, #1]
     b74:	0209      	lsls	r1, r1, #8
     b76:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     b78:	3202      	adds	r2, #2
     b7a:	62aa      	str	r2, [r5, #40]	; 0x28
     b7c:	e7eb      	b.n	b56 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b7e:	2301      	movs	r3, #1
     b80:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     b82:	07b3      	lsls	r3, r6, #30
     b84:	d506      	bpl.n	b94 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     b86:	2302      	movs	r3, #2
     b88:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     b8a:	2200      	movs	r2, #0
     b8c:	3331      	adds	r3, #49	; 0x31
     b8e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     b90:	07fb      	lsls	r3, r7, #31
     b92:	d41a      	bmi.n	bca <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     b94:	0773      	lsls	r3, r6, #29
     b96:	d565      	bpl.n	c64 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     b98:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b9a:	b29b      	uxth	r3, r3
     b9c:	2b00      	cmp	r3, #0
     b9e:	d05f      	beq.n	c60 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ba0:	8b63      	ldrh	r3, [r4, #26]
     ba2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     ba4:	071a      	lsls	r2, r3, #28
     ba6:	d414      	bmi.n	bd2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ba8:	223f      	movs	r2, #63	; 0x3f
     baa:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     bac:	2b00      	cmp	r3, #0
     bae:	d034      	beq.n	c1a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     bb0:	079a      	lsls	r2, r3, #30
     bb2:	d511      	bpl.n	bd8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     bb4:	221a      	movs	r2, #26
     bb6:	2332      	movs	r3, #50	; 0x32
     bb8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     bba:	3b30      	subs	r3, #48	; 0x30
     bbc:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     bbe:	077b      	lsls	r3, r7, #29
     bc0:	d550      	bpl.n	c64 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     bc2:	0028      	movs	r0, r5
     bc4:	696b      	ldr	r3, [r5, #20]
     bc6:	4798      	blx	r3
     bc8:	e04c      	b.n	c64 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     bca:	0028      	movs	r0, r5
     bcc:	68eb      	ldr	r3, [r5, #12]
     bce:	4798      	blx	r3
     bd0:	e7e0      	b.n	b94 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     bd2:	2237      	movs	r2, #55	; 0x37
     bd4:	4013      	ands	r3, r2
     bd6:	e7e9      	b.n	bac <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     bd8:	075a      	lsls	r2, r3, #29
     bda:	d505      	bpl.n	be8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     bdc:	221e      	movs	r2, #30
     bde:	2332      	movs	r3, #50	; 0x32
     be0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     be2:	3b2e      	subs	r3, #46	; 0x2e
     be4:	8363      	strh	r3, [r4, #26]
     be6:	e7ea      	b.n	bbe <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     be8:	07da      	lsls	r2, r3, #31
     bea:	d505      	bpl.n	bf8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     bec:	2213      	movs	r2, #19
     bee:	2332      	movs	r3, #50	; 0x32
     bf0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     bf2:	3b31      	subs	r3, #49	; 0x31
     bf4:	8363      	strh	r3, [r4, #26]
     bf6:	e7e2      	b.n	bbe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     bf8:	06da      	lsls	r2, r3, #27
     bfa:	d505      	bpl.n	c08 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     bfc:	2242      	movs	r2, #66	; 0x42
     bfe:	2332      	movs	r3, #50	; 0x32
     c00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     c02:	3b22      	subs	r3, #34	; 0x22
     c04:	8363      	strh	r3, [r4, #26]
     c06:	e7da      	b.n	bbe <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     c08:	2220      	movs	r2, #32
     c0a:	421a      	tst	r2, r3
     c0c:	d0d7      	beq.n	bbe <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     c0e:	3221      	adds	r2, #33	; 0x21
     c10:	2332      	movs	r3, #50	; 0x32
     c12:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     c14:	3b12      	subs	r3, #18
     c16:	8363      	strh	r3, [r4, #26]
     c18:	e7d1      	b.n	bbe <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     c1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     c1c:	05db      	lsls	r3, r3, #23
     c1e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     c20:	b2da      	uxtb	r2, r3
     c22:	6a69      	ldr	r1, [r5, #36]	; 0x24
     c24:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     c26:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     c28:	1c51      	adds	r1, r2, #1
     c2a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c2c:	7969      	ldrb	r1, [r5, #5]
     c2e:	2901      	cmp	r1, #1
     c30:	d010      	beq.n	c54 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     c32:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     c34:	3b01      	subs	r3, #1
     c36:	b29b      	uxth	r3, r3
     c38:	85ab      	strh	r3, [r5, #44]	; 0x2c
     c3a:	2b00      	cmp	r3, #0
     c3c:	d112      	bne.n	c64 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c3e:	3304      	adds	r3, #4
     c40:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     c42:	2200      	movs	r2, #0
     c44:	332e      	adds	r3, #46	; 0x2e
     c46:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     c48:	07bb      	lsls	r3, r7, #30
     c4a:	d50b      	bpl.n	c64 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     c4c:	0028      	movs	r0, r5
     c4e:	692b      	ldr	r3, [r5, #16]
     c50:	4798      	blx	r3
     c52:	e007      	b.n	c64 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     c54:	0a1b      	lsrs	r3, r3, #8
     c56:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     c58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     c5a:	3301      	adds	r3, #1
     c5c:	626b      	str	r3, [r5, #36]	; 0x24
     c5e:	e7e8      	b.n	c32 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c60:	2304      	movs	r3, #4
     c62:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     c64:	06f3      	lsls	r3, r6, #27
     c66:	d504      	bpl.n	c72 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     c68:	2310      	movs	r3, #16
     c6a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     c6c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     c6e:	06fb      	lsls	r3, r7, #27
     c70:	d40e      	bmi.n	c90 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     c72:	06b3      	lsls	r3, r6, #26
     c74:	d504      	bpl.n	c80 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     c76:	2320      	movs	r3, #32
     c78:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     c7a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     c7c:	073b      	lsls	r3, r7, #28
     c7e:	d40b      	bmi.n	c98 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     c80:	0733      	lsls	r3, r6, #28
     c82:	d504      	bpl.n	c8e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     c84:	2308      	movs	r3, #8
     c86:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     c88:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     c8a:	06bb      	lsls	r3, r7, #26
     c8c:	d408      	bmi.n	ca0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     c90:	0028      	movs	r0, r5
     c92:	69eb      	ldr	r3, [r5, #28]
     c94:	4798      	blx	r3
     c96:	e7ec      	b.n	c72 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     c98:	0028      	movs	r0, r5
     c9a:	69ab      	ldr	r3, [r5, #24]
     c9c:	4798      	blx	r3
     c9e:	e7ef      	b.n	c80 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     ca0:	6a2b      	ldr	r3, [r5, #32]
     ca2:	0028      	movs	r0, r5
     ca4:	4798      	blx	r3
}
     ca6:	e7f2      	b.n	c8e <_usart_interrupt_handler+0x176>
     ca8:	200000d8 	.word	0x200000d8

00000cac <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     cac:	b510      	push	{r4, lr}
	switch (clock_source) {
     cae:	2808      	cmp	r0, #8
     cb0:	d803      	bhi.n	cba <system_clock_source_get_hz+0xe>
     cb2:	0080      	lsls	r0, r0, #2
     cb4:	4b1c      	ldr	r3, [pc, #112]	; (d28 <system_clock_source_get_hz+0x7c>)
     cb6:	581b      	ldr	r3, [r3, r0]
     cb8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     cba:	2000      	movs	r0, #0
     cbc:	e032      	b.n	d24 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     cbe:	4b1b      	ldr	r3, [pc, #108]	; (d2c <system_clock_source_get_hz+0x80>)
     cc0:	6918      	ldr	r0, [r3, #16]
     cc2:	e02f      	b.n	d24 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     cc4:	4b1a      	ldr	r3, [pc, #104]	; (d30 <system_clock_source_get_hz+0x84>)
     cc6:	6a1b      	ldr	r3, [r3, #32]
     cc8:	059b      	lsls	r3, r3, #22
     cca:	0f9b      	lsrs	r3, r3, #30
     ccc:	4819      	ldr	r0, [pc, #100]	; (d34 <system_clock_source_get_hz+0x88>)
     cce:	40d8      	lsrs	r0, r3
     cd0:	e028      	b.n	d24 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     cd2:	4b16      	ldr	r3, [pc, #88]	; (d2c <system_clock_source_get_hz+0x80>)
     cd4:	6958      	ldr	r0, [r3, #20]
     cd6:	e025      	b.n	d24 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cd8:	4b14      	ldr	r3, [pc, #80]	; (d2c <system_clock_source_get_hz+0x80>)
     cda:	681b      	ldr	r3, [r3, #0]
			return 0;
     cdc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cde:	079b      	lsls	r3, r3, #30
     ce0:	d520      	bpl.n	d24 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ce2:	4913      	ldr	r1, [pc, #76]	; (d30 <system_clock_source_get_hz+0x84>)
     ce4:	2210      	movs	r2, #16
     ce6:	68cb      	ldr	r3, [r1, #12]
     ce8:	421a      	tst	r2, r3
     cea:	d0fc      	beq.n	ce6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     cec:	4b0f      	ldr	r3, [pc, #60]	; (d2c <system_clock_source_get_hz+0x80>)
     cee:	681a      	ldr	r2, [r3, #0]
     cf0:	2324      	movs	r3, #36	; 0x24
     cf2:	4013      	ands	r3, r2
     cf4:	2b04      	cmp	r3, #4
     cf6:	d001      	beq.n	cfc <system_clock_source_get_hz+0x50>
			return 48000000UL;
     cf8:	480f      	ldr	r0, [pc, #60]	; (d38 <system_clock_source_get_hz+0x8c>)
     cfa:	e013      	b.n	d24 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cfc:	2000      	movs	r0, #0
     cfe:	4b0f      	ldr	r3, [pc, #60]	; (d3c <system_clock_source_get_hz+0x90>)
     d00:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     d02:	4b0a      	ldr	r3, [pc, #40]	; (d2c <system_clock_source_get_hz+0x80>)
     d04:	689b      	ldr	r3, [r3, #8]
     d06:	041b      	lsls	r3, r3, #16
     d08:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d0a:	4358      	muls	r0, r3
     d0c:	e00a      	b.n	d24 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d0e:	2350      	movs	r3, #80	; 0x50
     d10:	4a07      	ldr	r2, [pc, #28]	; (d30 <system_clock_source_get_hz+0x84>)
     d12:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     d14:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d16:	075b      	lsls	r3, r3, #29
     d18:	d504      	bpl.n	d24 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     d1a:	4b04      	ldr	r3, [pc, #16]	; (d2c <system_clock_source_get_hz+0x80>)
     d1c:	68d8      	ldr	r0, [r3, #12]
     d1e:	e001      	b.n	d24 <system_clock_source_get_hz+0x78>
		return 32768UL;
     d20:	2080      	movs	r0, #128	; 0x80
     d22:	0200      	lsls	r0, r0, #8
	}
}
     d24:	bd10      	pop	{r4, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	00002fdc 	.word	0x00002fdc
     d2c:	200000b4 	.word	0x200000b4
     d30:	40000800 	.word	0x40000800
     d34:	007a1200 	.word	0x007a1200
     d38:	02dc6c00 	.word	0x02dc6c00
     d3c:	0000130d 	.word	0x0000130d

00000d40 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     d40:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d42:	490c      	ldr	r1, [pc, #48]	; (d74 <system_clock_source_osc8m_set_config+0x34>)
     d44:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     d46:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d48:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d4a:	7840      	ldrb	r0, [r0, #1]
     d4c:	2201      	movs	r2, #1
     d4e:	4010      	ands	r0, r2
     d50:	0180      	lsls	r0, r0, #6
     d52:	2640      	movs	r6, #64	; 0x40
     d54:	43b3      	bics	r3, r6
     d56:	4303      	orrs	r3, r0
     d58:	402a      	ands	r2, r5
     d5a:	01d2      	lsls	r2, r2, #7
     d5c:	2080      	movs	r0, #128	; 0x80
     d5e:	4383      	bics	r3, r0
     d60:	4313      	orrs	r3, r2
     d62:	2203      	movs	r2, #3
     d64:	4022      	ands	r2, r4
     d66:	0212      	lsls	r2, r2, #8
     d68:	4803      	ldr	r0, [pc, #12]	; (d78 <system_clock_source_osc8m_set_config+0x38>)
     d6a:	4003      	ands	r3, r0
     d6c:	4313      	orrs	r3, r2
     d6e:	620b      	str	r3, [r1, #32]
}
     d70:	bd70      	pop	{r4, r5, r6, pc}
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	40000800 	.word	0x40000800
     d78:	fffffcff 	.word	0xfffffcff

00000d7c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7e:	46de      	mov	lr, fp
     d80:	4657      	mov	r7, sl
     d82:	464e      	mov	r6, r9
     d84:	4645      	mov	r5, r8
     d86:	b5e0      	push	{r5, r6, r7, lr}
     d88:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     d8a:	4b26      	ldr	r3, [pc, #152]	; (e24 <system_clock_source_xosc32k_set_config+0xa8>)
     d8c:	469b      	mov	fp, r3
     d8e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     d90:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     d92:	7800      	ldrb	r0, [r0, #0]
     d94:	4242      	negs	r2, r0
     d96:	4142      	adcs	r2, r0
     d98:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     d9a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     d9c:	78ca      	ldrb	r2, [r1, #3]
     d9e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     da0:	790a      	ldrb	r2, [r1, #4]
     da2:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     da4:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     da6:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     da8:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     daa:	688a      	ldr	r2, [r1, #8]
     dac:	491e      	ldr	r1, [pc, #120]	; (e28 <system_clock_source_xosc32k_set_config+0xac>)
     dae:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
     db0:	2101      	movs	r1, #1
     db2:	464a      	mov	r2, r9
     db4:	0092      	lsls	r2, r2, #2
     db6:	4691      	mov	r9, r2
     db8:	2204      	movs	r2, #4
     dba:	4393      	bics	r3, r2
     dbc:	464a      	mov	r2, r9
     dbe:	4313      	orrs	r3, r2
     dc0:	4642      	mov	r2, r8
     dc2:	400a      	ands	r2, r1
     dc4:	00d2      	lsls	r2, r2, #3
     dc6:	4690      	mov	r8, r2
     dc8:	2208      	movs	r2, #8
     dca:	4393      	bics	r3, r2
     dcc:	4642      	mov	r2, r8
     dce:	4313      	orrs	r3, r2
     dd0:	4662      	mov	r2, ip
     dd2:	400a      	ands	r2, r1
     dd4:	0112      	lsls	r2, r2, #4
     dd6:	4694      	mov	ip, r2
     dd8:	2210      	movs	r2, #16
     dda:	4393      	bics	r3, r2
     ddc:	4662      	mov	r2, ip
     dde:	4313      	orrs	r3, r2
     de0:	4008      	ands	r0, r1
     de2:	0140      	lsls	r0, r0, #5
     de4:	2220      	movs	r2, #32
     de6:	4393      	bics	r3, r2
     de8:	4303      	orrs	r3, r0
     dea:	400f      	ands	r7, r1
     dec:	01bf      	lsls	r7, r7, #6
     dee:	2040      	movs	r0, #64	; 0x40
     df0:	4383      	bics	r3, r0
     df2:	433b      	orrs	r3, r7
     df4:	400e      	ands	r6, r1
     df6:	01f6      	lsls	r6, r6, #7
     df8:	3040      	adds	r0, #64	; 0x40
     dfa:	4383      	bics	r3, r0
     dfc:	4333      	orrs	r3, r6
     dfe:	3879      	subs	r0, #121	; 0x79
     e00:	4005      	ands	r5, r0
     e02:	022d      	lsls	r5, r5, #8
     e04:	4809      	ldr	r0, [pc, #36]	; (e2c <system_clock_source_xosc32k_set_config+0xb0>)
     e06:	4003      	ands	r3, r0
     e08:	432b      	orrs	r3, r5
     e0a:	4021      	ands	r1, r4
     e0c:	0309      	lsls	r1, r1, #12
     e0e:	4808      	ldr	r0, [pc, #32]	; (e30 <system_clock_source_xosc32k_set_config+0xb4>)
     e10:	4003      	ands	r3, r0
     e12:	430b      	orrs	r3, r1
     e14:	465a      	mov	r2, fp
     e16:	8293      	strh	r3, [r2, #20]
}
     e18:	bc3c      	pop	{r2, r3, r4, r5}
     e1a:	4690      	mov	r8, r2
     e1c:	4699      	mov	r9, r3
     e1e:	46a2      	mov	sl, r4
     e20:	46ab      	mov	fp, r5
     e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e24:	40000800 	.word	0x40000800
     e28:	200000b4 	.word	0x200000b4
     e2c:	fffff8ff 	.word	0xfffff8ff
     e30:	ffffefff 	.word	0xffffefff

00000e34 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     e34:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     e36:	7a03      	ldrb	r3, [r0, #8]
     e38:	069b      	lsls	r3, r3, #26
     e3a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     e3c:	8942      	ldrh	r2, [r0, #10]
     e3e:	0592      	lsls	r2, r2, #22
     e40:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     e42:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     e44:	4918      	ldr	r1, [pc, #96]	; (ea8 <system_clock_source_dfll_set_config+0x74>)
     e46:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     e48:	7983      	ldrb	r3, [r0, #6]
     e4a:	79c2      	ldrb	r2, [r0, #7]
     e4c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     e4e:	8842      	ldrh	r2, [r0, #2]
     e50:	8884      	ldrh	r4, [r0, #4]
     e52:	4322      	orrs	r2, r4
     e54:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     e56:	7842      	ldrb	r2, [r0, #1]
     e58:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     e5a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     e5c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     e5e:	7803      	ldrb	r3, [r0, #0]
     e60:	2b04      	cmp	r3, #4
     e62:	d011      	beq.n	e88 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     e64:	2b20      	cmp	r3, #32
     e66:	d10e      	bne.n	e86 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     e68:	7b03      	ldrb	r3, [r0, #12]
     e6a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     e6c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     e6e:	4313      	orrs	r3, r2
     e70:	89c2      	ldrh	r2, [r0, #14]
     e72:	0412      	lsls	r2, r2, #16
     e74:	490d      	ldr	r1, [pc, #52]	; (eac <system_clock_source_dfll_set_config+0x78>)
     e76:	400a      	ands	r2, r1
     e78:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     e7a:	4a0b      	ldr	r2, [pc, #44]	; (ea8 <system_clock_source_dfll_set_config+0x74>)
     e7c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
     e7e:	6811      	ldr	r1, [r2, #0]
     e80:	4b0b      	ldr	r3, [pc, #44]	; (eb0 <system_clock_source_dfll_set_config+0x7c>)
     e82:	430b      	orrs	r3, r1
     e84:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
     e86:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
     e88:	7b03      	ldrb	r3, [r0, #12]
     e8a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     e8c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
     e8e:	4313      	orrs	r3, r2
     e90:	89c2      	ldrh	r2, [r0, #14]
     e92:	0412      	lsls	r2, r2, #16
     e94:	4905      	ldr	r1, [pc, #20]	; (eac <system_clock_source_dfll_set_config+0x78>)
     e96:	400a      	ands	r2, r1
     e98:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
     e9a:	4a03      	ldr	r2, [pc, #12]	; (ea8 <system_clock_source_dfll_set_config+0x74>)
     e9c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
     e9e:	6813      	ldr	r3, [r2, #0]
     ea0:	2104      	movs	r1, #4
     ea2:	430b      	orrs	r3, r1
     ea4:	6013      	str	r3, [r2, #0]
     ea6:	e7ee      	b.n	e86 <system_clock_source_dfll_set_config+0x52>
     ea8:	200000b4 	.word	0x200000b4
     eac:	03ff0000 	.word	0x03ff0000
     eb0:	00000424 	.word	0x00000424

00000eb4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     eb4:	2808      	cmp	r0, #8
     eb6:	d803      	bhi.n	ec0 <system_clock_source_enable+0xc>
     eb8:	0080      	lsls	r0, r0, #2
     eba:	4b25      	ldr	r3, [pc, #148]	; (f50 <system_clock_source_enable+0x9c>)
     ebc:	581b      	ldr	r3, [r3, r0]
     ebe:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ec0:	2017      	movs	r0, #23
     ec2:	e044      	b.n	f4e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     ec4:	4a23      	ldr	r2, [pc, #140]	; (f54 <system_clock_source_enable+0xa0>)
     ec6:	6a13      	ldr	r3, [r2, #32]
     ec8:	2102      	movs	r1, #2
     eca:	430b      	orrs	r3, r1
     ecc:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     ece:	2000      	movs	r0, #0
     ed0:	e03d      	b.n	f4e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     ed2:	4a20      	ldr	r2, [pc, #128]	; (f54 <system_clock_source_enable+0xa0>)
     ed4:	6993      	ldr	r3, [r2, #24]
     ed6:	2102      	movs	r1, #2
     ed8:	430b      	orrs	r3, r1
     eda:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     edc:	2000      	movs	r0, #0
		break;
     ede:	e036      	b.n	f4e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     ee0:	4a1c      	ldr	r2, [pc, #112]	; (f54 <system_clock_source_enable+0xa0>)
     ee2:	8a13      	ldrh	r3, [r2, #16]
     ee4:	2102      	movs	r1, #2
     ee6:	430b      	orrs	r3, r1
     ee8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     eea:	2000      	movs	r0, #0
		break;
     eec:	e02f      	b.n	f4e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     eee:	4a19      	ldr	r2, [pc, #100]	; (f54 <system_clock_source_enable+0xa0>)
     ef0:	8a93      	ldrh	r3, [r2, #20]
     ef2:	2102      	movs	r1, #2
     ef4:	430b      	orrs	r3, r1
     ef6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     ef8:	2000      	movs	r0, #0
		break;
     efa:	e028      	b.n	f4e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     efc:	4916      	ldr	r1, [pc, #88]	; (f58 <system_clock_source_enable+0xa4>)
     efe:	680b      	ldr	r3, [r1, #0]
     f00:	2202      	movs	r2, #2
     f02:	4313      	orrs	r3, r2
     f04:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     f06:	4b13      	ldr	r3, [pc, #76]	; (f54 <system_clock_source_enable+0xa0>)
     f08:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f0a:	0019      	movs	r1, r3
     f0c:	320e      	adds	r2, #14
     f0e:	68cb      	ldr	r3, [r1, #12]
     f10:	421a      	tst	r2, r3
     f12:	d0fc      	beq.n	f0e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     f14:	4a10      	ldr	r2, [pc, #64]	; (f58 <system_clock_source_enable+0xa4>)
     f16:	6891      	ldr	r1, [r2, #8]
     f18:	4b0e      	ldr	r3, [pc, #56]	; (f54 <system_clock_source_enable+0xa0>)
     f1a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     f1c:	6852      	ldr	r2, [r2, #4]
     f1e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     f20:	2200      	movs	r2, #0
     f22:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f24:	0019      	movs	r1, r3
     f26:	3210      	adds	r2, #16
     f28:	68cb      	ldr	r3, [r1, #12]
     f2a:	421a      	tst	r2, r3
     f2c:	d0fc      	beq.n	f28 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     f2e:	4b0a      	ldr	r3, [pc, #40]	; (f58 <system_clock_source_enable+0xa4>)
     f30:	681b      	ldr	r3, [r3, #0]
     f32:	b29b      	uxth	r3, r3
     f34:	4a07      	ldr	r2, [pc, #28]	; (f54 <system_clock_source_enable+0xa0>)
     f36:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     f38:	2000      	movs	r0, #0
     f3a:	e008      	b.n	f4e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     f3c:	4905      	ldr	r1, [pc, #20]	; (f54 <system_clock_source_enable+0xa0>)
     f3e:	2244      	movs	r2, #68	; 0x44
     f40:	5c8b      	ldrb	r3, [r1, r2]
     f42:	2002      	movs	r0, #2
     f44:	4303      	orrs	r3, r0
     f46:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     f48:	2000      	movs	r0, #0
		break;
     f4a:	e000      	b.n	f4e <system_clock_source_enable+0x9a>
		return STATUS_OK;
     f4c:	2000      	movs	r0, #0
}
     f4e:	4770      	bx	lr
     f50:	00003000 	.word	0x00003000
     f54:	40000800 	.word	0x40000800
     f58:	200000b4 	.word	0x200000b4

00000f5c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     f5e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     f60:	22c2      	movs	r2, #194	; 0xc2
     f62:	00d2      	lsls	r2, r2, #3
     f64:	4b47      	ldr	r3, [pc, #284]	; (1084 <system_clock_init+0x128>)
     f66:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     f68:	4947      	ldr	r1, [pc, #284]	; (1088 <system_clock_init+0x12c>)
     f6a:	684b      	ldr	r3, [r1, #4]
     f6c:	221e      	movs	r2, #30
     f6e:	4393      	bics	r3, r2
     f70:	3a1c      	subs	r2, #28
     f72:	4313      	orrs	r3, r2
     f74:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     f76:	ab01      	add	r3, sp, #4
     f78:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     f7a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     f7c:	4d43      	ldr	r5, [pc, #268]	; (108c <system_clock_init+0x130>)
     f7e:	b2e0      	uxtb	r0, r4
     f80:	a901      	add	r1, sp, #4
     f82:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     f84:	3401      	adds	r4, #1
     f86:	2c25      	cmp	r4, #37	; 0x25
     f88:	d1f9      	bne.n	f7e <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
     f8a:	a80a      	add	r0, sp, #40	; 0x28
     f8c:	2300      	movs	r3, #0
     f8e:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
     f90:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
     f92:	2280      	movs	r2, #128	; 0x80
     f94:	0212      	lsls	r2, r2, #8
     f96:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
     f98:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
     f9a:	2201      	movs	r2, #1
     f9c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
     f9e:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
     fa0:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
     fa2:	3205      	adds	r2, #5
     fa4:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
     fa6:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
     fa8:	4b39      	ldr	r3, [pc, #228]	; (1090 <system_clock_init+0x134>)
     faa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
     fac:	2005      	movs	r0, #5
     fae:	4b39      	ldr	r3, [pc, #228]	; (1094 <system_clock_init+0x138>)
     fb0:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     fb2:	4934      	ldr	r1, [pc, #208]	; (1084 <system_clock_init+0x128>)
     fb4:	2202      	movs	r2, #2
     fb6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
     fb8:	421a      	tst	r2, r3
     fba:	d0fc      	beq.n	fb6 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
     fbc:	4a31      	ldr	r2, [pc, #196]	; (1084 <system_clock_init+0x128>)
     fbe:	8a93      	ldrh	r3, [r2, #20]
     fc0:	2180      	movs	r1, #128	; 0x80
     fc2:	430b      	orrs	r3, r1
     fc4:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     fc6:	ab05      	add	r3, sp, #20
     fc8:	2100      	movs	r1, #0
     fca:	2200      	movs	r2, #0
     fcc:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     fce:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     fd0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     fd2:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
     fd4:	313f      	adds	r1, #63	; 0x3f
     fd6:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     fd8:	393b      	subs	r1, #59	; 0x3b
     fda:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     fdc:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     fde:	4b2e      	ldr	r3, [pc, #184]	; (1098 <system_clock_init+0x13c>)
     fe0:	681b      	ldr	r3, [r3, #0]
     fe2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
     fe4:	2b3f      	cmp	r3, #63	; 0x3f
     fe6:	d04b      	beq.n	1080 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
     fe8:	a805      	add	r0, sp, #20
     fea:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
     fec:	23b7      	movs	r3, #183	; 0xb7
     fee:	00db      	lsls	r3, r3, #3
     ff0:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     ff2:	2307      	movs	r3, #7
     ff4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     ff6:	3338      	adds	r3, #56	; 0x38
     ff8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
     ffa:	4b28      	ldr	r3, [pc, #160]	; (109c <system_clock_init+0x140>)
     ffc:	4798      	blx	r3
	config->run_in_standby  = false;
     ffe:	a804      	add	r0, sp, #16
    1000:	2500      	movs	r5, #0
    1002:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1004:	2601      	movs	r6, #1
    1006:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1008:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    100a:	4b25      	ldr	r3, [pc, #148]	; (10a0 <system_clock_init+0x144>)
    100c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    100e:	2006      	movs	r0, #6
    1010:	4f20      	ldr	r7, [pc, #128]	; (1094 <system_clock_init+0x138>)
    1012:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1014:	4b23      	ldr	r3, [pc, #140]	; (10a4 <system_clock_init+0x148>)
    1016:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1018:	ac01      	add	r4, sp, #4
    101a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    101c:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    101e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1020:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1022:	2305      	movs	r3, #5
    1024:	7023      	strb	r3, [r4, #0]
    1026:	0021      	movs	r1, r4
    1028:	2001      	movs	r0, #1
    102a:	4b1f      	ldr	r3, [pc, #124]	; (10a8 <system_clock_init+0x14c>)
    102c:	4798      	blx	r3
    102e:	2001      	movs	r0, #1
    1030:	4b1e      	ldr	r3, [pc, #120]	; (10ac <system_clock_init+0x150>)
    1032:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1034:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1036:	0021      	movs	r1, r4
    1038:	2000      	movs	r0, #0
    103a:	4b14      	ldr	r3, [pc, #80]	; (108c <system_clock_init+0x130>)
    103c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    103e:	2000      	movs	r0, #0
    1040:	4b1b      	ldr	r3, [pc, #108]	; (10b0 <system_clock_init+0x154>)
    1042:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1044:	2007      	movs	r0, #7
    1046:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1048:	490e      	ldr	r1, [pc, #56]	; (1084 <system_clock_init+0x128>)
    104a:	22d0      	movs	r2, #208	; 0xd0
    104c:	68cb      	ldr	r3, [r1, #12]
    104e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1050:	2bd0      	cmp	r3, #208	; 0xd0
    1052:	d1fb      	bne.n	104c <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1054:	4a17      	ldr	r2, [pc, #92]	; (10b4 <system_clock_init+0x158>)
    1056:	2300      	movs	r3, #0
    1058:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    105a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    105c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    105e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1060:	a901      	add	r1, sp, #4
    1062:	2201      	movs	r2, #1
    1064:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1066:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1068:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    106a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    106c:	3307      	adds	r3, #7
    106e:	700b      	strb	r3, [r1, #0]
    1070:	2000      	movs	r0, #0
    1072:	4b0d      	ldr	r3, [pc, #52]	; (10a8 <system_clock_init+0x14c>)
    1074:	4798      	blx	r3
    1076:	2000      	movs	r0, #0
    1078:	4b0c      	ldr	r3, [pc, #48]	; (10ac <system_clock_init+0x150>)
    107a:	4798      	blx	r3
#endif
}
    107c:	b00f      	add	sp, #60	; 0x3c
    107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1080:	3b20      	subs	r3, #32
    1082:	e7b1      	b.n	fe8 <system_clock_init+0x8c>
    1084:	40000800 	.word	0x40000800
    1088:	41004000 	.word	0x41004000
    108c:	000012f1 	.word	0x000012f1
    1090:	00000d7d 	.word	0x00000d7d
    1094:	00000eb5 	.word	0x00000eb5
    1098:	00806024 	.word	0x00806024
    109c:	00000e35 	.word	0x00000e35
    10a0:	00000d41 	.word	0x00000d41
    10a4:	000010b9 	.word	0x000010b9
    10a8:	000010dd 	.word	0x000010dd
    10ac:	00001195 	.word	0x00001195
    10b0:	00001265 	.word	0x00001265
    10b4:	40000400 	.word	0x40000400

000010b8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    10b8:	4a06      	ldr	r2, [pc, #24]	; (10d4 <system_gclk_init+0x1c>)
    10ba:	6993      	ldr	r3, [r2, #24]
    10bc:	2108      	movs	r1, #8
    10be:	430b      	orrs	r3, r1
    10c0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    10c2:	2201      	movs	r2, #1
    10c4:	4b04      	ldr	r3, [pc, #16]	; (10d8 <system_gclk_init+0x20>)
    10c6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    10c8:	0019      	movs	r1, r3
    10ca:	780b      	ldrb	r3, [r1, #0]
    10cc:	4213      	tst	r3, r2
    10ce:	d1fc      	bne.n	10ca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    10d0:	4770      	bx	lr
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	40000400 	.word	0x40000400
    10d8:	40000c00 	.word	0x40000c00

000010dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    10dc:	b570      	push	{r4, r5, r6, lr}
    10de:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    10e0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    10e2:	780d      	ldrb	r5, [r1, #0]
    10e4:	022d      	lsls	r5, r5, #8
    10e6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    10e8:	784b      	ldrb	r3, [r1, #1]
    10ea:	2b00      	cmp	r3, #0
    10ec:	d002      	beq.n	10f4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    10ee:	2380      	movs	r3, #128	; 0x80
    10f0:	02db      	lsls	r3, r3, #11
    10f2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    10f4:	7a4b      	ldrb	r3, [r1, #9]
    10f6:	2b00      	cmp	r3, #0
    10f8:	d002      	beq.n	1100 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    10fa:	2380      	movs	r3, #128	; 0x80
    10fc:	031b      	lsls	r3, r3, #12
    10fe:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1100:	6848      	ldr	r0, [r1, #4]
    1102:	2801      	cmp	r0, #1
    1104:	d910      	bls.n	1128 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1106:	1e43      	subs	r3, r0, #1
    1108:	4218      	tst	r0, r3
    110a:	d134      	bne.n	1176 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    110c:	2802      	cmp	r0, #2
    110e:	d930      	bls.n	1172 <system_gclk_gen_set_config+0x96>
    1110:	2302      	movs	r3, #2
    1112:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1114:	3201      	adds	r2, #1
						mask <<= 1) {
    1116:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1118:	4298      	cmp	r0, r3
    111a:	d8fb      	bhi.n	1114 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    111c:	0212      	lsls	r2, r2, #8
    111e:	4332      	orrs	r2, r6
    1120:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1122:	2380      	movs	r3, #128	; 0x80
    1124:	035b      	lsls	r3, r3, #13
    1126:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1128:	7a0b      	ldrb	r3, [r1, #8]
    112a:	2b00      	cmp	r3, #0
    112c:	d002      	beq.n	1134 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    112e:	2380      	movs	r3, #128	; 0x80
    1130:	039b      	lsls	r3, r3, #14
    1132:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1134:	4a13      	ldr	r2, [pc, #76]	; (1184 <system_gclk_gen_set_config+0xa8>)
    1136:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1138:	b25b      	sxtb	r3, r3
    113a:	2b00      	cmp	r3, #0
    113c:	dbfb      	blt.n	1136 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    113e:	4b12      	ldr	r3, [pc, #72]	; (1188 <system_gclk_gen_set_config+0xac>)
    1140:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1142:	4b12      	ldr	r3, [pc, #72]	; (118c <system_gclk_gen_set_config+0xb0>)
    1144:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1146:	4a0f      	ldr	r2, [pc, #60]	; (1184 <system_gclk_gen_set_config+0xa8>)
    1148:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    114a:	b25b      	sxtb	r3, r3
    114c:	2b00      	cmp	r3, #0
    114e:	dbfb      	blt.n	1148 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1150:	4b0c      	ldr	r3, [pc, #48]	; (1184 <system_gclk_gen_set_config+0xa8>)
    1152:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1154:	001a      	movs	r2, r3
    1156:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1158:	b25b      	sxtb	r3, r3
    115a:	2b00      	cmp	r3, #0
    115c:	dbfb      	blt.n	1156 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    115e:	4a09      	ldr	r2, [pc, #36]	; (1184 <system_gclk_gen_set_config+0xa8>)
    1160:	6853      	ldr	r3, [r2, #4]
    1162:	2180      	movs	r1, #128	; 0x80
    1164:	0249      	lsls	r1, r1, #9
    1166:	400b      	ands	r3, r1
    1168:	431d      	orrs	r5, r3
    116a:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    116c:	4b08      	ldr	r3, [pc, #32]	; (1190 <system_gclk_gen_set_config+0xb4>)
    116e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1170:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1172:	2200      	movs	r2, #0
    1174:	e7d2      	b.n	111c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1176:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1178:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    117a:	2380      	movs	r3, #128	; 0x80
    117c:	029b      	lsls	r3, r3, #10
    117e:	431d      	orrs	r5, r3
    1180:	e7d2      	b.n	1128 <system_gclk_gen_set_config+0x4c>
    1182:	46c0      	nop			; (mov r8, r8)
    1184:	40000c00 	.word	0x40000c00
    1188:	00000181 	.word	0x00000181
    118c:	40000c08 	.word	0x40000c08
    1190:	000001c1 	.word	0x000001c1

00001194 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1194:	b510      	push	{r4, lr}
    1196:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1198:	4a0b      	ldr	r2, [pc, #44]	; (11c8 <system_gclk_gen_enable+0x34>)
    119a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    119c:	b25b      	sxtb	r3, r3
    119e:	2b00      	cmp	r3, #0
    11a0:	dbfb      	blt.n	119a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    11a2:	4b0a      	ldr	r3, [pc, #40]	; (11cc <system_gclk_gen_enable+0x38>)
    11a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11a6:	4b0a      	ldr	r3, [pc, #40]	; (11d0 <system_gclk_gen_enable+0x3c>)
    11a8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11aa:	4a07      	ldr	r2, [pc, #28]	; (11c8 <system_gclk_gen_enable+0x34>)
    11ac:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11ae:	b25b      	sxtb	r3, r3
    11b0:	2b00      	cmp	r3, #0
    11b2:	dbfb      	blt.n	11ac <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    11b4:	4a04      	ldr	r2, [pc, #16]	; (11c8 <system_gclk_gen_enable+0x34>)
    11b6:	6851      	ldr	r1, [r2, #4]
    11b8:	2380      	movs	r3, #128	; 0x80
    11ba:	025b      	lsls	r3, r3, #9
    11bc:	430b      	orrs	r3, r1
    11be:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    11c0:	4b04      	ldr	r3, [pc, #16]	; (11d4 <system_gclk_gen_enable+0x40>)
    11c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11c4:	bd10      	pop	{r4, pc}
    11c6:	46c0      	nop			; (mov r8, r8)
    11c8:	40000c00 	.word	0x40000c00
    11cc:	00000181 	.word	0x00000181
    11d0:	40000c04 	.word	0x40000c04
    11d4:	000001c1 	.word	0x000001c1

000011d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    11d8:	b570      	push	{r4, r5, r6, lr}
    11da:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11dc:	4a1a      	ldr	r2, [pc, #104]	; (1248 <system_gclk_gen_get_hz+0x70>)
    11de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11e0:	b25b      	sxtb	r3, r3
    11e2:	2b00      	cmp	r3, #0
    11e4:	dbfb      	blt.n	11de <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    11e6:	4b19      	ldr	r3, [pc, #100]	; (124c <system_gclk_gen_get_hz+0x74>)
    11e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11ea:	4b19      	ldr	r3, [pc, #100]	; (1250 <system_gclk_gen_get_hz+0x78>)
    11ec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11ee:	4a16      	ldr	r2, [pc, #88]	; (1248 <system_gclk_gen_get_hz+0x70>)
    11f0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11f2:	b25b      	sxtb	r3, r3
    11f4:	2b00      	cmp	r3, #0
    11f6:	dbfb      	blt.n	11f0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    11f8:	4e13      	ldr	r6, [pc, #76]	; (1248 <system_gclk_gen_get_hz+0x70>)
    11fa:	6870      	ldr	r0, [r6, #4]
    11fc:	04c0      	lsls	r0, r0, #19
    11fe:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1200:	4b14      	ldr	r3, [pc, #80]	; (1254 <system_gclk_gen_get_hz+0x7c>)
    1202:	4798      	blx	r3
    1204:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1206:	4b12      	ldr	r3, [pc, #72]	; (1250 <system_gclk_gen_get_hz+0x78>)
    1208:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    120a:	6876      	ldr	r6, [r6, #4]
    120c:	02f6      	lsls	r6, r6, #11
    120e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1210:	4b11      	ldr	r3, [pc, #68]	; (1258 <system_gclk_gen_get_hz+0x80>)
    1212:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1214:	4a0c      	ldr	r2, [pc, #48]	; (1248 <system_gclk_gen_get_hz+0x70>)
    1216:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1218:	b25b      	sxtb	r3, r3
    121a:	2b00      	cmp	r3, #0
    121c:	dbfb      	blt.n	1216 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    121e:	4b0a      	ldr	r3, [pc, #40]	; (1248 <system_gclk_gen_get_hz+0x70>)
    1220:	689c      	ldr	r4, [r3, #8]
    1222:	0224      	lsls	r4, r4, #8
    1224:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1226:	4b0d      	ldr	r3, [pc, #52]	; (125c <system_gclk_gen_get_hz+0x84>)
    1228:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    122a:	2e00      	cmp	r6, #0
    122c:	d107      	bne.n	123e <system_gclk_gen_get_hz+0x66>
    122e:	2c01      	cmp	r4, #1
    1230:	d907      	bls.n	1242 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1232:	0021      	movs	r1, r4
    1234:	0028      	movs	r0, r5
    1236:	4b0a      	ldr	r3, [pc, #40]	; (1260 <system_gclk_gen_get_hz+0x88>)
    1238:	4798      	blx	r3
    123a:	0005      	movs	r5, r0
    123c:	e001      	b.n	1242 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    123e:	3401      	adds	r4, #1
    1240:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1242:	0028      	movs	r0, r5
    1244:	bd70      	pop	{r4, r5, r6, pc}
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	40000c00 	.word	0x40000c00
    124c:	00000181 	.word	0x00000181
    1250:	40000c04 	.word	0x40000c04
    1254:	00000cad 	.word	0x00000cad
    1258:	40000c08 	.word	0x40000c08
    125c:	000001c1 	.word	0x000001c1
    1260:	00001dad 	.word	0x00001dad

00001264 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1264:	b510      	push	{r4, lr}
    1266:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1268:	4b06      	ldr	r3, [pc, #24]	; (1284 <system_gclk_chan_enable+0x20>)
    126a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    126c:	4b06      	ldr	r3, [pc, #24]	; (1288 <system_gclk_chan_enable+0x24>)
    126e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1270:	4a06      	ldr	r2, [pc, #24]	; (128c <system_gclk_chan_enable+0x28>)
    1272:	8853      	ldrh	r3, [r2, #2]
    1274:	2180      	movs	r1, #128	; 0x80
    1276:	01c9      	lsls	r1, r1, #7
    1278:	430b      	orrs	r3, r1
    127a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    127c:	4b04      	ldr	r3, [pc, #16]	; (1290 <system_gclk_chan_enable+0x2c>)
    127e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1280:	bd10      	pop	{r4, pc}
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	00000181 	.word	0x00000181
    1288:	40000c02 	.word	0x40000c02
    128c:	40000c00 	.word	0x40000c00
    1290:	000001c1 	.word	0x000001c1

00001294 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1294:	b510      	push	{r4, lr}
    1296:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1298:	4b0f      	ldr	r3, [pc, #60]	; (12d8 <system_gclk_chan_disable+0x44>)
    129a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    129c:	4b0f      	ldr	r3, [pc, #60]	; (12dc <system_gclk_chan_disable+0x48>)
    129e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    12a0:	4a0f      	ldr	r2, [pc, #60]	; (12e0 <system_gclk_chan_disable+0x4c>)
    12a2:	8853      	ldrh	r3, [r2, #2]
    12a4:	051b      	lsls	r3, r3, #20
    12a6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    12a8:	8853      	ldrh	r3, [r2, #2]
    12aa:	490e      	ldr	r1, [pc, #56]	; (12e4 <system_gclk_chan_disable+0x50>)
    12ac:	400b      	ands	r3, r1
    12ae:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    12b0:	8853      	ldrh	r3, [r2, #2]
    12b2:	490d      	ldr	r1, [pc, #52]	; (12e8 <system_gclk_chan_disable+0x54>)
    12b4:	400b      	ands	r3, r1
    12b6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    12b8:	0011      	movs	r1, r2
    12ba:	2280      	movs	r2, #128	; 0x80
    12bc:	01d2      	lsls	r2, r2, #7
    12be:	884b      	ldrh	r3, [r1, #2]
    12c0:	4213      	tst	r3, r2
    12c2:	d1fc      	bne.n	12be <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    12c4:	4906      	ldr	r1, [pc, #24]	; (12e0 <system_gclk_chan_disable+0x4c>)
    12c6:	884a      	ldrh	r2, [r1, #2]
    12c8:	0203      	lsls	r3, r0, #8
    12ca:	4806      	ldr	r0, [pc, #24]	; (12e4 <system_gclk_chan_disable+0x50>)
    12cc:	4002      	ands	r2, r0
    12ce:	4313      	orrs	r3, r2
    12d0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    12d2:	4b06      	ldr	r3, [pc, #24]	; (12ec <system_gclk_chan_disable+0x58>)
    12d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12d6:	bd10      	pop	{r4, pc}
    12d8:	00000181 	.word	0x00000181
    12dc:	40000c02 	.word	0x40000c02
    12e0:	40000c00 	.word	0x40000c00
    12e4:	fffff0ff 	.word	0xfffff0ff
    12e8:	ffffbfff 	.word	0xffffbfff
    12ec:	000001c1 	.word	0x000001c1

000012f0 <system_gclk_chan_set_config>:
{
    12f0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    12f2:	780c      	ldrb	r4, [r1, #0]
    12f4:	0224      	lsls	r4, r4, #8
    12f6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    12f8:	4b02      	ldr	r3, [pc, #8]	; (1304 <system_gclk_chan_set_config+0x14>)
    12fa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    12fc:	b2a4      	uxth	r4, r4
    12fe:	4b02      	ldr	r3, [pc, #8]	; (1308 <system_gclk_chan_set_config+0x18>)
    1300:	805c      	strh	r4, [r3, #2]
}
    1302:	bd10      	pop	{r4, pc}
    1304:	00001295 	.word	0x00001295
    1308:	40000c00 	.word	0x40000c00

0000130c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    130c:	b510      	push	{r4, lr}
    130e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1310:	4b06      	ldr	r3, [pc, #24]	; (132c <system_gclk_chan_get_hz+0x20>)
    1312:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <system_gclk_chan_get_hz+0x24>)
    1316:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1318:	4b06      	ldr	r3, [pc, #24]	; (1334 <system_gclk_chan_get_hz+0x28>)
    131a:	885c      	ldrh	r4, [r3, #2]
    131c:	0524      	lsls	r4, r4, #20
    131e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1320:	4b05      	ldr	r3, [pc, #20]	; (1338 <system_gclk_chan_get_hz+0x2c>)
    1322:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1324:	0020      	movs	r0, r4
    1326:	4b05      	ldr	r3, [pc, #20]	; (133c <system_gclk_chan_get_hz+0x30>)
    1328:	4798      	blx	r3
}
    132a:	bd10      	pop	{r4, pc}
    132c:	00000181 	.word	0x00000181
    1330:	40000c02 	.word	0x40000c02
    1334:	40000c00 	.word	0x40000c00
    1338:	000001c1 	.word	0x000001c1
    133c:	000011d9 	.word	0x000011d9

00001340 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1340:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1342:	78d3      	ldrb	r3, [r2, #3]
    1344:	2b00      	cmp	r3, #0
    1346:	d135      	bne.n	13b4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1348:	7813      	ldrb	r3, [r2, #0]
    134a:	2b80      	cmp	r3, #128	; 0x80
    134c:	d029      	beq.n	13a2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    134e:	061b      	lsls	r3, r3, #24
    1350:	2480      	movs	r4, #128	; 0x80
    1352:	0264      	lsls	r4, r4, #9
    1354:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1356:	7854      	ldrb	r4, [r2, #1]
    1358:	2502      	movs	r5, #2
    135a:	43ac      	bics	r4, r5
    135c:	d106      	bne.n	136c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    135e:	7894      	ldrb	r4, [r2, #2]
    1360:	2c00      	cmp	r4, #0
    1362:	d120      	bne.n	13a6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1364:	2480      	movs	r4, #128	; 0x80
    1366:	02a4      	lsls	r4, r4, #10
    1368:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    136a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    136c:	7854      	ldrb	r4, [r2, #1]
    136e:	3c01      	subs	r4, #1
    1370:	2c01      	cmp	r4, #1
    1372:	d91c      	bls.n	13ae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1374:	040d      	lsls	r5, r1, #16
    1376:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1378:	24a0      	movs	r4, #160	; 0xa0
    137a:	05e4      	lsls	r4, r4, #23
    137c:	432c      	orrs	r4, r5
    137e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1380:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1382:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1384:	24d0      	movs	r4, #208	; 0xd0
    1386:	0624      	lsls	r4, r4, #24
    1388:	432c      	orrs	r4, r5
    138a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    138c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    138e:	78d4      	ldrb	r4, [r2, #3]
    1390:	2c00      	cmp	r4, #0
    1392:	d122      	bne.n	13da <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1394:	035b      	lsls	r3, r3, #13
    1396:	d51c      	bpl.n	13d2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1398:	7893      	ldrb	r3, [r2, #2]
    139a:	2b01      	cmp	r3, #1
    139c:	d01e      	beq.n	13dc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    139e:	6141      	str	r1, [r0, #20]
    13a0:	e017      	b.n	13d2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    13a2:	2300      	movs	r3, #0
    13a4:	e7d7      	b.n	1356 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    13a6:	24c0      	movs	r4, #192	; 0xc0
    13a8:	02e4      	lsls	r4, r4, #11
    13aa:	4323      	orrs	r3, r4
    13ac:	e7dd      	b.n	136a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    13ae:	4c0d      	ldr	r4, [pc, #52]	; (13e4 <_system_pinmux_config+0xa4>)
    13b0:	4023      	ands	r3, r4
    13b2:	e7df      	b.n	1374 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    13b4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    13b6:	040c      	lsls	r4, r1, #16
    13b8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    13ba:	23a0      	movs	r3, #160	; 0xa0
    13bc:	05db      	lsls	r3, r3, #23
    13be:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13c0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    13c2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    13c4:	23d0      	movs	r3, #208	; 0xd0
    13c6:	061b      	lsls	r3, r3, #24
    13c8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13ca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    13cc:	78d3      	ldrb	r3, [r2, #3]
    13ce:	2b00      	cmp	r3, #0
    13d0:	d103      	bne.n	13da <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    13d2:	7853      	ldrb	r3, [r2, #1]
    13d4:	3b01      	subs	r3, #1
    13d6:	2b01      	cmp	r3, #1
    13d8:	d902      	bls.n	13e0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    13da:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    13dc:	6181      	str	r1, [r0, #24]
    13de:	e7f8      	b.n	13d2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    13e0:	6081      	str	r1, [r0, #8]
}
    13e2:	e7fa      	b.n	13da <_system_pinmux_config+0x9a>
    13e4:	fffbffff 	.word	0xfffbffff

000013e8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    13e8:	b510      	push	{r4, lr}
    13ea:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13ec:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    13f0:	2900      	cmp	r1, #0
    13f2:	d104      	bne.n	13fe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    13f4:	0943      	lsrs	r3, r0, #5
    13f6:	01db      	lsls	r3, r3, #7
    13f8:	4905      	ldr	r1, [pc, #20]	; (1410 <system_pinmux_pin_set_config+0x28>)
    13fa:	468c      	mov	ip, r1
    13fc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    13fe:	241f      	movs	r4, #31
    1400:	4020      	ands	r0, r4
    1402:	2101      	movs	r1, #1
    1404:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1406:	0018      	movs	r0, r3
    1408:	4b02      	ldr	r3, [pc, #8]	; (1414 <system_pinmux_pin_set_config+0x2c>)
    140a:	4798      	blx	r3
}
    140c:	bd10      	pop	{r4, pc}
    140e:	46c0      	nop			; (mov r8, r8)
    1410:	41004400 	.word	0x41004400
    1414:	00001341 	.word	0x00001341

00001418 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1418:	4770      	bx	lr
	...

0000141c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    141c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    141e:	4b05      	ldr	r3, [pc, #20]	; (1434 <system_init+0x18>)
    1420:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1422:	4b05      	ldr	r3, [pc, #20]	; (1438 <system_init+0x1c>)
    1424:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1426:	4b05      	ldr	r3, [pc, #20]	; (143c <system_init+0x20>)
    1428:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    142a:	4b05      	ldr	r3, [pc, #20]	; (1440 <system_init+0x24>)
    142c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    142e:	4b05      	ldr	r3, [pc, #20]	; (1444 <system_init+0x28>)
    1430:	4798      	blx	r3
}
    1432:	bd10      	pop	{r4, pc}
    1434:	00000f5d 	.word	0x00000f5d
    1438:	000001f1 	.word	0x000001f1
    143c:	00001419 	.word	0x00001419
    1440:	00001419 	.word	0x00001419
    1444:	00001419 	.word	0x00001419

00001448 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1448:	e7fe      	b.n	1448 <Dummy_Handler>
	...

0000144c <Reset_Handler>:
{
    144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    144e:	4a2a      	ldr	r2, [pc, #168]	; (14f8 <Reset_Handler+0xac>)
    1450:	4b2a      	ldr	r3, [pc, #168]	; (14fc <Reset_Handler+0xb0>)
    1452:	429a      	cmp	r2, r3
    1454:	d011      	beq.n	147a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1456:	001a      	movs	r2, r3
    1458:	4b29      	ldr	r3, [pc, #164]	; (1500 <Reset_Handler+0xb4>)
    145a:	429a      	cmp	r2, r3
    145c:	d20d      	bcs.n	147a <Reset_Handler+0x2e>
    145e:	4a29      	ldr	r2, [pc, #164]	; (1504 <Reset_Handler+0xb8>)
    1460:	3303      	adds	r3, #3
    1462:	1a9b      	subs	r3, r3, r2
    1464:	089b      	lsrs	r3, r3, #2
    1466:	3301      	adds	r3, #1
    1468:	009b      	lsls	r3, r3, #2
    146a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    146c:	4823      	ldr	r0, [pc, #140]	; (14fc <Reset_Handler+0xb0>)
    146e:	4922      	ldr	r1, [pc, #136]	; (14f8 <Reset_Handler+0xac>)
    1470:	588c      	ldr	r4, [r1, r2]
    1472:	5084      	str	r4, [r0, r2]
    1474:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1476:	429a      	cmp	r2, r3
    1478:	d1fa      	bne.n	1470 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    147a:	4a23      	ldr	r2, [pc, #140]	; (1508 <Reset_Handler+0xbc>)
    147c:	4b23      	ldr	r3, [pc, #140]	; (150c <Reset_Handler+0xc0>)
    147e:	429a      	cmp	r2, r3
    1480:	d20a      	bcs.n	1498 <Reset_Handler+0x4c>
    1482:	43d3      	mvns	r3, r2
    1484:	4921      	ldr	r1, [pc, #132]	; (150c <Reset_Handler+0xc0>)
    1486:	185b      	adds	r3, r3, r1
    1488:	2103      	movs	r1, #3
    148a:	438b      	bics	r3, r1
    148c:	3304      	adds	r3, #4
    148e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1490:	2100      	movs	r1, #0
    1492:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1494:	4293      	cmp	r3, r2
    1496:	d1fc      	bne.n	1492 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1498:	4a1d      	ldr	r2, [pc, #116]	; (1510 <Reset_Handler+0xc4>)
    149a:	21ff      	movs	r1, #255	; 0xff
    149c:	4b1d      	ldr	r3, [pc, #116]	; (1514 <Reset_Handler+0xc8>)
    149e:	438b      	bics	r3, r1
    14a0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    14a2:	39fd      	subs	r1, #253	; 0xfd
    14a4:	2390      	movs	r3, #144	; 0x90
    14a6:	005b      	lsls	r3, r3, #1
    14a8:	4a1b      	ldr	r2, [pc, #108]	; (1518 <Reset_Handler+0xcc>)
    14aa:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    14ac:	4a1b      	ldr	r2, [pc, #108]	; (151c <Reset_Handler+0xd0>)
    14ae:	78d3      	ldrb	r3, [r2, #3]
    14b0:	2503      	movs	r5, #3
    14b2:	43ab      	bics	r3, r5
    14b4:	2402      	movs	r4, #2
    14b6:	4323      	orrs	r3, r4
    14b8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    14ba:	78d3      	ldrb	r3, [r2, #3]
    14bc:	270c      	movs	r7, #12
    14be:	43bb      	bics	r3, r7
    14c0:	2608      	movs	r6, #8
    14c2:	4333      	orrs	r3, r6
    14c4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    14c6:	4b16      	ldr	r3, [pc, #88]	; (1520 <Reset_Handler+0xd4>)
    14c8:	7b98      	ldrb	r0, [r3, #14]
    14ca:	2230      	movs	r2, #48	; 0x30
    14cc:	4390      	bics	r0, r2
    14ce:	2220      	movs	r2, #32
    14d0:	4310      	orrs	r0, r2
    14d2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    14d4:	7b99      	ldrb	r1, [r3, #14]
    14d6:	43b9      	bics	r1, r7
    14d8:	4331      	orrs	r1, r6
    14da:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    14dc:	7b9a      	ldrb	r2, [r3, #14]
    14de:	43aa      	bics	r2, r5
    14e0:	4322      	orrs	r2, r4
    14e2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    14e4:	4a0f      	ldr	r2, [pc, #60]	; (1524 <Reset_Handler+0xd8>)
    14e6:	6853      	ldr	r3, [r2, #4]
    14e8:	2180      	movs	r1, #128	; 0x80
    14ea:	430b      	orrs	r3, r1
    14ec:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    14ee:	4b0e      	ldr	r3, [pc, #56]	; (1528 <Reset_Handler+0xdc>)
    14f0:	4798      	blx	r3
        main();
    14f2:	4b0e      	ldr	r3, [pc, #56]	; (152c <Reset_Handler+0xe0>)
    14f4:	4798      	blx	r3
    14f6:	e7fe      	b.n	14f6 <Reset_Handler+0xaa>
    14f8:	00003314 	.word	0x00003314
    14fc:	20000000 	.word	0x20000000
    1500:	20000074 	.word	0x20000074
    1504:	20000004 	.word	0x20000004
    1508:	20000074 	.word	0x20000074
    150c:	20000174 	.word	0x20000174
    1510:	e000ed00 	.word	0xe000ed00
    1514:	00000000 	.word	0x00000000
    1518:	41007000 	.word	0x41007000
    151c:	41005000 	.word	0x41005000
    1520:	41004800 	.word	0x41004800
    1524:	41004000 	.word	0x41004000
    1528:	00001f19 	.word	0x00001f19
    152c:	00001c41 	.word	0x00001c41

00001530 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1530:	b5f0      	push	{r4, r5, r6, r7, lr}
    1532:	46c6      	mov	lr, r8
    1534:	b500      	push	{lr}
    1536:	000c      	movs	r4, r1
    1538:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    153a:	2800      	cmp	r0, #0
    153c:	d10f      	bne.n	155e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    153e:	2a00      	cmp	r2, #0
    1540:	dd11      	ble.n	1566 <_read+0x36>
    1542:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1544:	4e09      	ldr	r6, [pc, #36]	; (156c <_read+0x3c>)
    1546:	4d0a      	ldr	r5, [pc, #40]	; (1570 <_read+0x40>)
    1548:	6830      	ldr	r0, [r6, #0]
    154a:	0021      	movs	r1, r4
    154c:	682b      	ldr	r3, [r5, #0]
    154e:	4798      	blx	r3
		ptr++;
    1550:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1552:	42bc      	cmp	r4, r7
    1554:	d1f8      	bne.n	1548 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1556:	4640      	mov	r0, r8
    1558:	bc04      	pop	{r2}
    155a:	4690      	mov	r8, r2
    155c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    155e:	2301      	movs	r3, #1
    1560:	425b      	negs	r3, r3
    1562:	4698      	mov	r8, r3
    1564:	e7f7      	b.n	1556 <_read+0x26>
	for (; len > 0; --len) {
    1566:	4680      	mov	r8, r0
    1568:	e7f5      	b.n	1556 <_read+0x26>
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	200000f8 	.word	0x200000f8
    1570:	200000f0 	.word	0x200000f0

00001574 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1574:	b5f0      	push	{r4, r5, r6, r7, lr}
    1576:	46c6      	mov	lr, r8
    1578:	b500      	push	{lr}
    157a:	000e      	movs	r6, r1
    157c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    157e:	3801      	subs	r0, #1
    1580:	2802      	cmp	r0, #2
    1582:	d810      	bhi.n	15a6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1584:	2a00      	cmp	r2, #0
    1586:	d011      	beq.n	15ac <_write+0x38>
    1588:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    158a:	4b0c      	ldr	r3, [pc, #48]	; (15bc <_write+0x48>)
    158c:	4698      	mov	r8, r3
    158e:	4f0c      	ldr	r7, [pc, #48]	; (15c0 <_write+0x4c>)
    1590:	4643      	mov	r3, r8
    1592:	6818      	ldr	r0, [r3, #0]
    1594:	5d31      	ldrb	r1, [r6, r4]
    1596:	683b      	ldr	r3, [r7, #0]
    1598:	4798      	blx	r3
    159a:	2800      	cmp	r0, #0
    159c:	db08      	blt.n	15b0 <_write+0x3c>
			return -1;
		}
		++nChars;
    159e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    15a0:	42a5      	cmp	r5, r4
    15a2:	d1f5      	bne.n	1590 <_write+0x1c>
    15a4:	e006      	b.n	15b4 <_write+0x40>
		return -1;
    15a6:	2401      	movs	r4, #1
    15a8:	4264      	negs	r4, r4
    15aa:	e003      	b.n	15b4 <_write+0x40>
	for (; len != 0; --len) {
    15ac:	0014      	movs	r4, r2
    15ae:	e001      	b.n	15b4 <_write+0x40>
			return -1;
    15b0:	2401      	movs	r4, #1
    15b2:	4264      	negs	r4, r4
	}
	return nChars;
}
    15b4:	0020      	movs	r0, r4
    15b6:	bc04      	pop	{r2}
    15b8:	4690      	mov	r8, r2
    15ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15bc:	200000f8 	.word	0x200000f8
    15c0:	200000f4 	.word	0x200000f4

000015c4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    15c4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    15c6:	4a06      	ldr	r2, [pc, #24]	; (15e0 <_sbrk+0x1c>)
    15c8:	6812      	ldr	r2, [r2, #0]
    15ca:	2a00      	cmp	r2, #0
    15cc:	d004      	beq.n	15d8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    15ce:	4a04      	ldr	r2, [pc, #16]	; (15e0 <_sbrk+0x1c>)
    15d0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    15d2:	18c3      	adds	r3, r0, r3
    15d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    15d6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    15d8:	4902      	ldr	r1, [pc, #8]	; (15e4 <_sbrk+0x20>)
    15da:	4a01      	ldr	r2, [pc, #4]	; (15e0 <_sbrk+0x1c>)
    15dc:	6011      	str	r1, [r2, #0]
    15de:	e7f6      	b.n	15ce <_sbrk+0xa>
    15e0:	200000cc 	.word	0x200000cc
    15e4:	20002178 	.word	0x20002178

000015e8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    15e8:	2001      	movs	r0, #1
    15ea:	4240      	negs	r0, r0
    15ec:	4770      	bx	lr

000015ee <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    15ee:	2380      	movs	r3, #128	; 0x80
    15f0:	019b      	lsls	r3, r3, #6
    15f2:	604b      	str	r3, [r1, #4]

	return 0;
}
    15f4:	2000      	movs	r0, #0
    15f6:	4770      	bx	lr

000015f8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    15f8:	2001      	movs	r0, #1
    15fa:	4770      	bx	lr

000015fc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    15fc:	2000      	movs	r0, #0
    15fe:	4770      	bx	lr

00001600 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1600:	b570      	push	{r4, r5, r6, lr}
    1602:	b082      	sub	sp, #8
    1604:	0005      	movs	r5, r0
    1606:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1608:	2200      	movs	r2, #0
    160a:	466b      	mov	r3, sp
    160c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    160e:	4c06      	ldr	r4, [pc, #24]	; (1628 <usart_serial_getchar+0x28>)
    1610:	466b      	mov	r3, sp
    1612:	1d99      	adds	r1, r3, #6
    1614:	0028      	movs	r0, r5
    1616:	47a0      	blx	r4
    1618:	2800      	cmp	r0, #0
    161a:	d1f9      	bne.n	1610 <usart_serial_getchar+0x10>

	*c = temp;
    161c:	466b      	mov	r3, sp
    161e:	3306      	adds	r3, #6
    1620:	881b      	ldrh	r3, [r3, #0]
    1622:	7033      	strb	r3, [r6, #0]
}
    1624:	b002      	add	sp, #8
    1626:	bd70      	pop	{r4, r5, r6, pc}
    1628:	000009f3 	.word	0x000009f3

0000162c <usart_serial_putchar>:
{
    162c:	b570      	push	{r4, r5, r6, lr}
    162e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1630:	b28c      	uxth	r4, r1
    1632:	4e03      	ldr	r6, [pc, #12]	; (1640 <usart_serial_putchar+0x14>)
    1634:	0021      	movs	r1, r4
    1636:	0028      	movs	r0, r5
    1638:	47b0      	blx	r6
    163a:	2800      	cmp	r0, #0
    163c:	d1fa      	bne.n	1634 <usart_serial_putchar+0x8>
}
    163e:	bd70      	pop	{r4, r5, r6, pc}
    1640:	000009cd 	.word	0x000009cd

00001644 <configure_console>:
#include "config_usart.h"

void configure_console(void)
{
    1644:	b570      	push	{r4, r5, r6, lr}
    1646:	b090      	sub	sp, #64	; 0x40
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1648:	2380      	movs	r3, #128	; 0x80
    164a:	05db      	lsls	r3, r3, #23
    164c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    164e:	2300      	movs	r3, #0
    1650:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1652:	22ff      	movs	r2, #255	; 0xff
    1654:	4669      	mov	r1, sp
    1656:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1658:	2200      	movs	r2, #0
    165a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    165c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    165e:	2196      	movs	r1, #150	; 0x96
    1660:	0189      	lsls	r1, r1, #6
    1662:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    1664:	2101      	movs	r1, #1
    1666:	2024      	movs	r0, #36	; 0x24
    1668:	466c      	mov	r4, sp
    166a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    166c:	3001      	adds	r0, #1
    166e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1670:	3125      	adds	r1, #37	; 0x25
    1672:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1674:	3101      	adds	r1, #1
    1676:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1678:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    167a:	3105      	adds	r1, #5
    167c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    167e:	3101      	adds	r1, #1
    1680:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1682:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1684:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1686:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1688:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    168a:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    168c:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    168e:	2313      	movs	r3, #19
    1690:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1692:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
    1694:	2380      	movs	r3, #128	; 0x80
    1696:	035b      	lsls	r3, r3, #13
    1698:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = SERCOMPAD0;
    169a:	4b1e      	ldr	r3, [pc, #120]	; (1714 <configure_console+0xd0>)
    169c:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = SERCOMPAD1;
    169e:	4b1e      	ldr	r3, [pc, #120]	; (1718 <configure_console+0xd4>)
    16a0:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = SERCOMPAD2;
    16a2:	2301      	movs	r3, #1
    16a4:	425b      	negs	r3, r3
    16a6:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = SERCOMPAD3;
    16a8:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
    16aa:	4d1c      	ldr	r5, [pc, #112]	; (171c <configure_console+0xd8>)
    16ac:	4c1c      	ldr	r4, [pc, #112]	; (1720 <configure_console+0xdc>)
    16ae:	466a      	mov	r2, sp
    16b0:	491c      	ldr	r1, [pc, #112]	; (1724 <configure_console+0xe0>)
    16b2:	0028      	movs	r0, r5
    16b4:	47a0      	blx	r4
    16b6:	2800      	cmp	r0, #0
    16b8:	d1f9      	bne.n	16ae <configure_console+0x6a>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    16ba:	4c18      	ldr	r4, [pc, #96]	; (171c <configure_console+0xd8>)
    16bc:	4b1a      	ldr	r3, [pc, #104]	; (1728 <configure_console+0xe4>)
    16be:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    16c0:	4a1a      	ldr	r2, [pc, #104]	; (172c <configure_console+0xe8>)
    16c2:	4b1b      	ldr	r3, [pc, #108]	; (1730 <configure_console+0xec>)
    16c4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    16c6:	4a1b      	ldr	r2, [pc, #108]	; (1734 <configure_console+0xf0>)
    16c8:	4b1b      	ldr	r3, [pc, #108]	; (1738 <configure_console+0xf4>)
    16ca:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    16cc:	466a      	mov	r2, sp
    16ce:	4915      	ldr	r1, [pc, #84]	; (1724 <configure_console+0xe0>)
    16d0:	0020      	movs	r0, r4
    16d2:	4b13      	ldr	r3, [pc, #76]	; (1720 <configure_console+0xdc>)
    16d4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    16d6:	4e19      	ldr	r6, [pc, #100]	; (173c <configure_console+0xf8>)
    16d8:	6833      	ldr	r3, [r6, #0]
    16da:	6898      	ldr	r0, [r3, #8]
    16dc:	2100      	movs	r1, #0
    16de:	4d18      	ldr	r5, [pc, #96]	; (1740 <configure_console+0xfc>)
    16e0:	47a8      	blx	r5
	setbuf(stdin, NULL);
    16e2:	6833      	ldr	r3, [r6, #0]
    16e4:	6858      	ldr	r0, [r3, #4]
    16e6:	2100      	movs	r1, #0
    16e8:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    16ea:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    16ec:	0028      	movs	r0, r5
    16ee:	4b15      	ldr	r3, [pc, #84]	; (1744 <configure_console+0x100>)
    16f0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    16f2:	231f      	movs	r3, #31
    16f4:	4018      	ands	r0, r3
    16f6:	3b1e      	subs	r3, #30
    16f8:	4083      	lsls	r3, r0
    16fa:	4a13      	ldr	r2, [pc, #76]	; (1748 <configure_console+0x104>)
    16fc:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    16fe:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    1700:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1702:	2b00      	cmp	r3, #0
    1704:	d1fc      	bne.n	1700 <configure_console+0xbc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1706:	682b      	ldr	r3, [r5, #0]
    1708:	2202      	movs	r2, #2
    170a:	4313      	orrs	r3, r2
    170c:	602b      	str	r3, [r5, #0]

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
    170e:	b010      	add	sp, #64	; 0x40
    1710:	bd70      	pop	{r4, r5, r6, pc}
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	00080003 	.word	0x00080003
    1718:	00090003 	.word	0x00090003
    171c:	200000fc 	.word	0x200000fc
    1720:	00000691 	.word	0x00000691
    1724:	42001000 	.word	0x42001000
    1728:	200000f8 	.word	0x200000f8
    172c:	0000162d 	.word	0x0000162d
    1730:	200000f4 	.word	0x200000f4
    1734:	00001601 	.word	0x00001601
    1738:	200000f0 	.word	0x200000f0
    173c:	20000010 	.word	0x20000010
    1740:	00002015 	.word	0x00002015
    1744:	00000601 	.word	0x00000601
    1748:	e000e100 	.word	0xe000e100

0000174c <configure_usart_USB>:
}


/**************************SERCOM STUFF*******************************/
void configure_usart_USB(void)
{
    174c:	b530      	push	{r4, r5, lr}
    174e:	b091      	sub	sp, #68	; 0x44
	config->data_order       = USART_DATAORDER_LSB;
    1750:	2380      	movs	r3, #128	; 0x80
    1752:	05db      	lsls	r3, r3, #23
    1754:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1756:	2300      	movs	r3, #0
    1758:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    175a:	22ff      	movs	r2, #255	; 0xff
    175c:	4669      	mov	r1, sp
    175e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1760:	2200      	movs	r2, #0
    1762:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1764:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1766:	2196      	movs	r1, #150	; 0x96
    1768:	0189      	lsls	r1, r1, #6
    176a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    176c:	2101      	movs	r1, #1
    176e:	2024      	movs	r0, #36	; 0x24
    1770:	466c      	mov	r4, sp
    1772:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1774:	3001      	adds	r0, #1
    1776:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1778:	3125      	adds	r1, #37	; 0x25
    177a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    177c:	3101      	adds	r1, #1
    177e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1780:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    1782:	3105      	adds	r1, #5
    1784:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1786:	3101      	adds	r1, #1
    1788:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    178a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    178c:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    178e:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    1790:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    1792:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    1794:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1796:	2313      	movs	r3, #19
    1798:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    179a:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart_USB;
	usart_get_config_defaults(&config_usart_USB);

		config_usart_USB.baudrate    = 9600;
		config_usart_USB.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    179c:	2380      	movs	r3, #128	; 0x80
    179e:	035b      	lsls	r3, r3, #13
    17a0:	9303      	str	r3, [sp, #12]
		config_usart_USB.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    17a2:	4b12      	ldr	r3, [pc, #72]	; (17ec <configure_usart_USB+0xa0>)
    17a4:	930c      	str	r3, [sp, #48]	; 0x30
		config_usart_USB.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    17a6:	4b12      	ldr	r3, [pc, #72]	; (17f0 <configure_usart_USB+0xa4>)
    17a8:	930d      	str	r3, [sp, #52]	; 0x34
		config_usart_USB.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    17aa:	2301      	movs	r3, #1
    17ac:	425b      	negs	r3, r3
    17ae:	930e      	str	r3, [sp, #56]	; 0x38
		config_usart_USB.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    17b0:	930f      	str	r3, [sp, #60]	; 0x3c
		while (usart_init(&usart_USB,
    17b2:	4d10      	ldr	r5, [pc, #64]	; (17f4 <configure_usart_USB+0xa8>)
    17b4:	4c10      	ldr	r4, [pc, #64]	; (17f8 <configure_usart_USB+0xac>)
    17b6:	466a      	mov	r2, sp
    17b8:	4910      	ldr	r1, [pc, #64]	; (17fc <configure_usart_USB+0xb0>)
    17ba:	0028      	movs	r0, r5
    17bc:	47a0      	blx	r4
    17be:	2800      	cmp	r0, #0
    17c0:	d1f9      	bne.n	17b6 <configure_usart_USB+0x6a>
	SercomUsart *const usart_hw = &(module->hw->USART);
    17c2:	4d0c      	ldr	r5, [pc, #48]	; (17f4 <configure_usart_USB+0xa8>)
    17c4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    17c6:	0020      	movs	r0, r4
    17c8:	4b0d      	ldr	r3, [pc, #52]	; (1800 <configure_usart_USB+0xb4>)
    17ca:	4798      	blx	r3
    17cc:	231f      	movs	r3, #31
    17ce:	4018      	ands	r0, r3
    17d0:	3b1e      	subs	r3, #30
    17d2:	4083      	lsls	r3, r0
    17d4:	4a0b      	ldr	r2, [pc, #44]	; (1804 <configure_usart_USB+0xb8>)
    17d6:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    17d8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    17da:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    17dc:	2b00      	cmp	r3, #0
    17de:	d1fc      	bne.n	17da <configure_usart_USB+0x8e>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    17e0:	6823      	ldr	r3, [r4, #0]
    17e2:	2202      	movs	r2, #2
    17e4:	4313      	orrs	r3, r2
    17e6:	6023      	str	r3, [r4, #0]
		EDBG_CDC_MODULE, &config_usart_USB) != STATUS_OK) {
		}

	usart_enable(&usart_USB);
}
    17e8:	b011      	add	sp, #68	; 0x44
    17ea:	bd30      	pop	{r4, r5, pc}
    17ec:	00160002 	.word	0x00160002
    17f0:	00170002 	.word	0x00170002
    17f4:	20000134 	.word	0x20000134
    17f8:	00000691 	.word	0x00000691
    17fc:	42001400 	.word	0x42001400
    1800:	00000601 	.word	0x00000601
    1804:	e000e100 	.word	0xe000e100

00001808 <LCD_Fast_Fill>:
		(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    1808:	b570      	push	{r4, r5, r6, lr}
	int blocks;

	REG_PORT_OUTCLR1 = 0x0000ffff;
    180a:	4c19      	ldr	r4, [pc, #100]	; (1870 <LCD_Fast_Fill+0x68>)
    180c:	4b19      	ldr	r3, [pc, #100]	; (1874 <LCD_Fast_Fill+0x6c>)
    180e:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    1810:	0200      	lsls	r0, r0, #8
    1812:	4301      	orrs	r1, r0
    1814:	4b18      	ldr	r3, [pc, #96]	; (1878 <LCD_Fast_Fill+0x70>)
    1816:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    1818:	17d3      	asrs	r3, r2, #31
    181a:	260f      	movs	r6, #15
    181c:	401e      	ands	r6, r3
    181e:	18b6      	adds	r6, r6, r2
    1820:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    1822:	2500      	movs	r5, #0
    1824:	2e00      	cmp	r6, #0
    1826:	dd0c      	ble.n	1842 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    1828:	4c12      	ldr	r4, [pc, #72]	; (1874 <LCD_Fast_Fill+0x6c>)
    182a:	2180      	movs	r1, #128	; 0x80
    182c:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    182e:	4812      	ldr	r0, [pc, #72]	; (1878 <LCD_Fast_Fill+0x70>)
{
    1830:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    1832:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    1834:	6001      	str	r1, [r0, #0]
    1836:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    1838:	2b00      	cmp	r3, #0
    183a:	d1fa      	bne.n	1832 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    183c:	3501      	adds	r5, #1
    183e:	42ae      	cmp	r6, r5
    1840:	d1f6      	bne.n	1830 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    1842:	0713      	lsls	r3, r2, #28
    1844:	d013      	beq.n	186e <LCD_Fast_Fill+0x66>
		for (int i=0; i<(pix % 16)+1; i++)
    1846:	17d3      	asrs	r3, r2, #31
    1848:	0f1b      	lsrs	r3, r3, #28
    184a:	18d2      	adds	r2, r2, r3
    184c:	210f      	movs	r1, #15
    184e:	4011      	ands	r1, r2
    1850:	1ac9      	subs	r1, r1, r3
    1852:	1c4b      	adds	r3, r1, #1
    1854:	2b00      	cmp	r3, #0
    1856:	dd0a      	ble.n	186e <LCD_Fast_Fill+0x66>
    1858:	0019      	movs	r1, r3
    185a:	2300      	movs	r3, #0
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    185c:	4c05      	ldr	r4, [pc, #20]	; (1874 <LCD_Fast_Fill+0x6c>)
    185e:	2280      	movs	r2, #128	; 0x80
    1860:	0292      	lsls	r2, r2, #10
			REG_PORT_OUTSET1 = LCD_WR;
    1862:	4805      	ldr	r0, [pc, #20]	; (1878 <LCD_Fast_Fill+0x70>)
			REG_PORT_OUTCLR1 = LCD_WR;
    1864:	6022      	str	r2, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    1866:	6002      	str	r2, [r0, #0]
		for (int i=0; i<(pix % 16)+1; i++)
    1868:	3301      	adds	r3, #1
    186a:	4299      	cmp	r1, r3
    186c:	d1fa      	bne.n	1864 <LCD_Fast_Fill+0x5c>
		}
}
    186e:	bd70      	pop	{r4, r5, r6, pc}
    1870:	0000ffff 	.word	0x0000ffff
    1874:	41004494 	.word	0x41004494
    1878:	41004498 	.word	0x41004498

0000187c <setColorRGB>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setColorRGB(unsigned char r, unsigned char g, unsigned char b)
{
    187c:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    187e:	094b      	lsrs	r3, r1, #5
    1880:	2407      	movs	r4, #7
    1882:	43a0      	bics	r0, r4
    1884:	4318      	orrs	r0, r3
    1886:	4b05      	ldr	r3, [pc, #20]	; (189c <setColorRGB+0x20>)
    1888:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    188a:	00c9      	lsls	r1, r1, #3
    188c:	23e0      	movs	r3, #224	; 0xe0
    188e:	4019      	ands	r1, r3
    1890:	08d2      	lsrs	r2, r2, #3
    1892:	430a      	orrs	r2, r1
    1894:	4b02      	ldr	r3, [pc, #8]	; (18a0 <setColorRGB+0x24>)
    1896:	801a      	strh	r2, [r3, #0]
}
    1898:	bd10      	pop	{r4, pc}
    189a:	46c0      	nop			; (mov r8, r8)
    189c:	2000016a 	.word	0x2000016a
    18a0:	2000016c 	.word	0x2000016c

000018a4 <LCD_Write_Bus>:
	LCD_Write_COM16(0x2c,0x00);
}


void LCD_Write_Bus(char VH, char VL)
{
    18a4:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    18a6:	4c06      	ldr	r4, [pc, #24]	; (18c0 <LCD_Write_Bus+0x1c>)
    18a8:	4b06      	ldr	r3, [pc, #24]	; (18c4 <LCD_Write_Bus+0x20>)
    18aa:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    18ac:	0200      	lsls	r0, r0, #8
    18ae:	4301      	orrs	r1, r0
    18b0:	4b05      	ldr	r3, [pc, #20]	; (18c8 <LCD_Write_Bus+0x24>)
    18b2:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    18b4:	2280      	movs	r2, #128	; 0x80
    18b6:	0292      	lsls	r2, r2, #10
    18b8:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    18ba:	601a      	str	r2, [r3, #0]

}
    18bc:	bd10      	pop	{r4, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	41004494 	.word	0x41004494
    18c4:	0000ffff 	.word	0x0000ffff
    18c8:	41004498 	.word	0x41004498

000018cc <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    18cc:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    18ce:	2280      	movs	r2, #128	; 0x80
    18d0:	0412      	lsls	r2, r2, #16
    18d2:	4b02      	ldr	r3, [pc, #8]	; (18dc <LCD_Write_COM16+0x10>)
    18d4:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    18d6:	4b02      	ldr	r3, [pc, #8]	; (18e0 <LCD_Write_COM16+0x14>)
    18d8:	4798      	blx	r3
}
    18da:	bd10      	pop	{r4, pc}
    18dc:	41004494 	.word	0x41004494
    18e0:	000018a5 	.word	0x000018a5

000018e4 <LCD_Write_DATA8>:
	REG_PORT_OUTSET1 = LCD_DC;
	LCD_Write_Bus(VH,VL);
}

void LCD_Write_DATA8(char VL)
{
    18e4:	b510      	push	{r4, lr}
    18e6:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    18e8:	2280      	movs	r2, #128	; 0x80
    18ea:	0412      	lsls	r2, r2, #16
    18ec:	4b02      	ldr	r3, [pc, #8]	; (18f8 <LCD_Write_DATA8+0x14>)
    18ee:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    18f0:	2000      	movs	r0, #0
    18f2:	4b02      	ldr	r3, [pc, #8]	; (18fc <LCD_Write_DATA8+0x18>)
    18f4:	4798      	blx	r3
}
    18f6:	bd10      	pop	{r4, pc}
    18f8:	41004498 	.word	0x41004498
    18fc:	000018a5 	.word	0x000018a5

00001900 <setXY>:
{
    1900:	b5f0      	push	{r4, r5, r6, r7, lr}
    1902:	b083      	sub	sp, #12
    1904:	000e      	movs	r6, r1
    1906:	9300      	str	r3, [sp, #0]
	y1=display_Y_size-y1;
    1908:	4b1c      	ldr	r3, [pc, #112]	; (197c <setXY+0x7c>)
    190a:	881d      	ldrh	r5, [r3, #0]
    190c:	1a28      	subs	r0, r5, r0
    190e:	b287      	uxth	r7, r0
	y2=display_Y_size-y2;
    1910:	1aad      	subs	r5, r5, r2
    1912:	b2ad      	uxth	r5, r5
	LCD_Write_COM16(0x2a,0x00);
    1914:	2100      	movs	r1, #0
    1916:	202a      	movs	r0, #42	; 0x2a
    1918:	4c19      	ldr	r4, [pc, #100]	; (1980 <setXY+0x80>)
    191a:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    191c:	9601      	str	r6, [sp, #4]
    191e:	0a30      	lsrs	r0, r6, #8
    1920:	4e18      	ldr	r6, [pc, #96]	; (1984 <setXY+0x84>)
    1922:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x01);
    1924:	2101      	movs	r1, #1
    1926:	202a      	movs	r0, #42	; 0x2a
    1928:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    192a:	466b      	mov	r3, sp
    192c:	7918      	ldrb	r0, [r3, #4]
    192e:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x02);
    1930:	2102      	movs	r1, #2
    1932:	202a      	movs	r0, #42	; 0x2a
    1934:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    1936:	9b00      	ldr	r3, [sp, #0]
    1938:	0a18      	lsrs	r0, r3, #8
    193a:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x03);
    193c:	2103      	movs	r1, #3
    193e:	202a      	movs	r0, #42	; 0x2a
    1940:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    1942:	466b      	mov	r3, sp
    1944:	7818      	ldrb	r0, [r3, #0]
    1946:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x00);
    1948:	2100      	movs	r1, #0
    194a:	202b      	movs	r0, #43	; 0x2b
    194c:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    194e:	0a28      	lsrs	r0, r5, #8
    1950:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x01);
    1952:	2101      	movs	r1, #1
    1954:	202b      	movs	r0, #43	; 0x2b
    1956:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    1958:	b2e8      	uxtb	r0, r5
    195a:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x02);
    195c:	2102      	movs	r1, #2
    195e:	202b      	movs	r0, #43	; 0x2b
    1960:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    1962:	0a38      	lsrs	r0, r7, #8
    1964:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x03);
    1966:	2103      	movs	r1, #3
    1968:	202b      	movs	r0, #43	; 0x2b
    196a:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    196c:	b2f8      	uxtb	r0, r7
    196e:	47b0      	blx	r6
	LCD_Write_COM16(0x2c,0x00);
    1970:	2100      	movs	r1, #0
    1972:	202c      	movs	r0, #44	; 0x2c
    1974:	47a0      	blx	r4
}
    1976:	b003      	add	sp, #12
    1978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    197a:	46c0      	nop			; (mov r8, r8)
    197c:	2000000c 	.word	0x2000000c
    1980:	000018cd 	.word	0x000018cd
    1984:	000018e5 	.word	0x000018e5

00001988 <fillRect>:
{
    1988:	b5f0      	push	{r4, r5, r6, r7, lr}
    198a:	46ce      	mov	lr, r9
    198c:	4647      	mov	r7, r8
    198e:	b580      	push	{r7, lr}
    1990:	b083      	sub	sp, #12
    1992:	4681      	mov	r9, r0
    1994:	4688      	mov	r8, r1
    1996:	0015      	movs	r5, r2
    1998:	001c      	movs	r4, r3
	if (x1>x2)
    199a:	4290      	cmp	r0, r2
    199c:	dd02      	ble.n	19a4 <fillRect+0x1c>
    199e:	0403      	lsls	r3, r0, #16
		SwapUint16(x1, x2);
    19a0:	4691      	mov	r9, r2
    19a2:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    19a4:	45a0      	cmp	r8, r4
    19a6:	dd03      	ble.n	19b0 <fillRect+0x28>
    19a8:	4643      	mov	r3, r8
    19aa:	041b      	lsls	r3, r3, #16
		SwapUint16(y1, y2);
    19ac:	46a0      	mov	r8, r4
    19ae:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    19b0:	2780      	movs	r7, #128	; 0x80
    19b2:	03ff      	lsls	r7, r7, #15
    19b4:	4b12      	ldr	r3, [pc, #72]	; (1a00 <fillRect+0x78>)
    19b6:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    19b8:	b2a3      	uxth	r3, r4
    19ba:	b2aa      	uxth	r2, r5
    19bc:	4641      	mov	r1, r8
    19be:	4668      	mov	r0, sp
    19c0:	80c1      	strh	r1, [r0, #6]
    19c2:	88c1      	ldrh	r1, [r0, #6]
    19c4:	4648      	mov	r0, r9
    19c6:	466e      	mov	r6, sp
    19c8:	80f0      	strh	r0, [r6, #6]
    19ca:	88f0      	ldrh	r0, [r6, #6]
    19cc:	4e0d      	ldr	r6, [pc, #52]	; (1a04 <fillRect+0x7c>)
    19ce:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    19d0:	4e0d      	ldr	r6, [pc, #52]	; (1a08 <fillRect+0x80>)
    19d2:	2380      	movs	r3, #128	; 0x80
    19d4:	041b      	lsls	r3, r3, #16
    19d6:	6033      	str	r3, [r6, #0]
		(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    19d8:	464b      	mov	r3, r9
    19da:	1aed      	subs	r5, r5, r3
    19dc:	3501      	adds	r5, #1
    19de:	4643      	mov	r3, r8
    19e0:	1ae2      	subs	r2, r4, r3
    19e2:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low, 
    19e4:	436a      	muls	r2, r5
    19e6:	4b09      	ldr	r3, [pc, #36]	; (1a0c <fillRect+0x84>)
    19e8:	8819      	ldrh	r1, [r3, #0]
    19ea:	4b09      	ldr	r3, [pc, #36]	; (1a10 <fillRect+0x88>)
    19ec:	8818      	ldrh	r0, [r3, #0]
    19ee:	4b09      	ldr	r3, [pc, #36]	; (1a14 <fillRect+0x8c>)
    19f0:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    19f2:	6037      	str	r7, [r6, #0]
}
    19f4:	b003      	add	sp, #12
    19f6:	bc0c      	pop	{r2, r3}
    19f8:	4690      	mov	r8, r2
    19fa:	4699      	mov	r9, r3
    19fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19fe:	46c0      	nop			; (mov r8, r8)
    1a00:	41004494 	.word	0x41004494
    1a04:	00001901 	.word	0x00001901
    1a08:	41004498 	.word	0x41004498
    1a0c:	2000016c 	.word	0x2000016c
    1a10:	2000016a 	.word	0x2000016a
    1a14:	00001809 	.word	0x00001809

00001a18 <clrXY>:
{
    1a18:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    1a1a:	4b04      	ldr	r3, [pc, #16]	; (1a2c <clrXY+0x14>)
    1a1c:	881b      	ldrh	r3, [r3, #0]
    1a1e:	4a04      	ldr	r2, [pc, #16]	; (1a30 <clrXY+0x18>)
    1a20:	8812      	ldrh	r2, [r2, #0]
    1a22:	2100      	movs	r1, #0
    1a24:	2000      	movs	r0, #0
    1a26:	4c03      	ldr	r4, [pc, #12]	; (1a34 <clrXY+0x1c>)
    1a28:	47a0      	blx	r4
}
    1a2a:	bd10      	pop	{r4, pc}
    1a2c:	2000000c 	.word	0x2000000c
    1a30:	2000000a 	.word	0x2000000a
    1a34:	00001901 	.word	0x00001901

00001a38 <clrScr>:
{
    1a38:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    1a3a:	2280      	movs	r2, #128	; 0x80
    1a3c:	03d2      	lsls	r2, r2, #15
    1a3e:	4b02      	ldr	r3, [pc, #8]	; (1a48 <clrScr+0x10>)
    1a40:	601a      	str	r2, [r3, #0]
	clrXY();
    1a42:	4b02      	ldr	r3, [pc, #8]	; (1a4c <clrScr+0x14>)
    1a44:	4798      	blx	r3
}
    1a46:	bd10      	pop	{r4, pc}
    1a48:	41004494 	.word	0x41004494
    1a4c:	00001a19 	.word	0x00001a19

00001a50 <SetBrightness>:



void SetBrightness(char brightness)
{
    1a50:	b570      	push	{r4, r5, r6, lr}
    1a52:	0005      	movs	r5, r0
	REG_PORT_OUTCLR1 = LCD_CS;
    1a54:	2480      	movs	r4, #128	; 0x80
    1a56:	03e4      	lsls	r4, r4, #15
    1a58:	4b05      	ldr	r3, [pc, #20]	; (1a70 <SetBrightness+0x20>)
    1a5a:	601c      	str	r4, [r3, #0]
	LCD_Write_COM16(0x00,0x51);
    1a5c:	2151      	movs	r1, #81	; 0x51
    1a5e:	2000      	movs	r0, #0
    1a60:	4b04      	ldr	r3, [pc, #16]	; (1a74 <SetBrightness+0x24>)
    1a62:	4798      	blx	r3
	LCD_Write_DATA8(brightness);
    1a64:	0028      	movs	r0, r5
    1a66:	4b04      	ldr	r3, [pc, #16]	; (1a78 <SetBrightness+0x28>)
    1a68:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    1a6a:	4b04      	ldr	r3, [pc, #16]	; (1a7c <SetBrightness+0x2c>)
    1a6c:	601c      	str	r4, [r3, #0]
}
    1a6e:	bd70      	pop	{r4, r5, r6, pc}
    1a70:	41004494 	.word	0x41004494
    1a74:	000018cd 	.word	0x000018cd
    1a78:	000018e5 	.word	0x000018e5
    1a7c:	41004498 	.word	0x41004498

00001a80 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes, 
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    1a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a82:	b0c1      	sub	sp, #260	; 0x104
    1a84:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    1a86:	22d0      	movs	r2, #208	; 0xd0
    1a88:	4930      	ldr	r1, [pc, #192]	; (1b4c <drawKare+0xcc>)
    1a8a:	a80c      	add	r0, sp, #48	; 0x30
    1a8c:	4b30      	ldr	r3, [pc, #192]	; (1b50 <drawKare+0xd0>)
    1a8e:	4798      	blx	r3
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
		
	//Yeah, these are uint8 arrays.		
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    1a90:	a805      	add	r0, sp, #20
    1a92:	4b30      	ldr	r3, [pc, #192]	; (1b54 <drawKare+0xd4>)
    1a94:	001a      	movs	r2, r3
    1a96:	3250      	adds	r2, #80	; 0x50
    1a98:	0001      	movs	r1, r0
    1a9a:	ca31      	ldmia	r2!, {r0, r4, r5}
    1a9c:	c131      	stmia	r1!, {r0, r4, r5}
    1a9e:	ca31      	ldmia	r2!, {r0, r4, r5}
    1aa0:	c131      	stmia	r1!, {r0, r4, r5}
    1aa2:	6812      	ldr	r2, [r2, #0]
    1aa4:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
		220,150,230,160};
		
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    1aa6:	336c      	adds	r3, #108	; 0x6c
    1aa8:	466a      	mov	r2, sp
    1aaa:	cb13      	ldmia	r3!, {r0, r1, r4}
    1aac:	c213      	stmia	r2!, {r0, r1, r4}
    1aae:	cb03      	ldmia	r3!, {r0, r1}
    1ab0:	c203      	stmia	r2!, {r0, r1}
	back_Color_High = ((r&248)|g>>5);
    1ab2:	2300      	movs	r3, #0
    1ab4:	4a28      	ldr	r2, [pc, #160]	; (1b58 <drawKare+0xd8>)
    1ab6:	8013      	strh	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    1ab8:	4a28      	ldr	r2, [pc, #160]	; (1b5c <drawKare+0xdc>)
    1aba:	8013      	strh	r3, [r2, #0]
    1abc:	ac0c      	add	r4, sp, #48	; 0x30
    1abe:	ae40      	add	r6, sp, #256	; 0x100

	setBackColorRGB(0,0,0);
		
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1ac0:	4d27      	ldr	r5, [pc, #156]	; (1b60 <drawKare+0xe0>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    1ac2:	88e3      	ldrh	r3, [r4, #6]
    1ac4:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1ac6:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
    1ac8:	88a2      	ldrh	r2, [r4, #4]
    1aca:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1acc:	322d      	adds	r2, #45	; 0x2d
    1ace:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
    1ad0:	8861      	ldrh	r1, [r4, #2]
    1ad2:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1ad4:	3196      	adds	r1, #150	; 0x96
    1ad6:	8820      	ldrh	r0, [r4, #0]
    1ad8:	1040      	asrs	r0, r0, #1
    1ada:	302d      	adds	r0, #45	; 0x2d
    1adc:	30ff      	adds	r0, #255	; 0xff
    1ade:	47a8      	blx	r5
    1ae0:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
    1ae2:	42b4      	cmp	r4, r6
    1ae4:	d1ed      	bne.n	1ac2 <drawKare+0x42>
	}
	switch(emotion)
    1ae6:	2f00      	cmp	r7, #0
    1ae8:	d003      	beq.n	1af2 <drawKare+0x72>
    1aea:	2f01      	cmp	r7, #1
    1aec:	d017      	beq.n	1b1e <drawKare+0x9e>
				break;
			case 2:
				//make a sad terminal thing go here
				break;
	}
}
    1aee:	b041      	add	sp, #260	; 0x104
    1af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1af2:	ac05      	add	r4, sp, #20
    1af4:	ae0c      	add	r6, sp, #48	; 0x30
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1af6:	4d1a      	ldr	r5, [pc, #104]	; (1b60 <drawKare+0xe0>)
					((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    1af8:	78e3      	ldrb	r3, [r4, #3]
    1afa:	105b      	asrs	r3, r3, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1afc:	3396      	adds	r3, #150	; 0x96
					((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    1afe:	78a2      	ldrb	r2, [r4, #2]
    1b00:	1052      	asrs	r2, r2, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1b02:	322d      	adds	r2, #45	; 0x2d
    1b04:	32ff      	adds	r2, #255	; 0xff
					((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    1b06:	7861      	ldrb	r1, [r4, #1]
    1b08:	1049      	asrs	r1, r1, #1
					fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1b0a:	3196      	adds	r1, #150	; 0x96
    1b0c:	7820      	ldrb	r0, [r4, #0]
    1b0e:	1040      	asrs	r0, r0, #1
    1b10:	302d      	adds	r0, #45	; 0x2d
    1b12:	30ff      	adds	r0, #255	; 0xff
    1b14:	47a8      	blx	r5
    1b16:	3404      	adds	r4, #4
				for(int i = 0; i < 28; i = i+4)
    1b18:	42a6      	cmp	r6, r4
    1b1a:	d1ed      	bne.n	1af8 <drawKare+0x78>
    1b1c:	e7e7      	b.n	1aee <drawKare+0x6e>
    1b1e:	466c      	mov	r4, sp
    1b20:	ae05      	add	r6, sp, #20
					fillRect((
    1b22:	4d0f      	ldr	r5, [pc, #60]	; (1b60 <drawKare+0xe0>)
					((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    1b24:	78e3      	ldrb	r3, [r4, #3]
    1b26:	105b      	asrs	r3, r3, #1
					fillRect((
    1b28:	3396      	adds	r3, #150	; 0x96
					((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    1b2a:	78a2      	ldrb	r2, [r4, #2]
    1b2c:	1052      	asrs	r2, r2, #1
					fillRect((
    1b2e:	322d      	adds	r2, #45	; 0x2d
    1b30:	32ff      	adds	r2, #255	; 0xff
					((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    1b32:	7861      	ldrb	r1, [r4, #1]
    1b34:	1049      	asrs	r1, r1, #1
					fillRect((
    1b36:	3196      	adds	r1, #150	; 0x96
					(rPiBeret[i]/iSv)+(offsetGraphicX)),
    1b38:	7820      	ldrb	r0, [r4, #0]
    1b3a:	1040      	asrs	r0, r0, #1
					fillRect((
    1b3c:	302d      	adds	r0, #45	; 0x2d
    1b3e:	30ff      	adds	r0, #255	; 0xff
    1b40:	47a8      	blx	r5
    1b42:	3404      	adds	r4, #4
				for(int i = 0; i < 20; i = i+4)
    1b44:	42b4      	cmp	r4, r6
    1b46:	d1ed      	bne.n	1b24 <drawKare+0xa4>
    1b48:	e7d1      	b.n	1aee <drawKare+0x6e>
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	00003024 	.word	0x00003024
    1b50:	00001f61 	.word	0x00001f61
    1b54:	000030a4 	.word	0x000030a4
    1b58:	2000016e 	.word	0x2000016e
    1b5c:	20000168 	.word	0x20000168
    1b60:	00001989 	.word	0x00001989

00001b64 <InitLCD>:



/**************************InitLCD()**********************************/
void InitLCD(void)
{
    1b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b66:	b083      	sub	sp, #12
		0x00,0x53,0x00,0x88,0x00,0xB6,0x00,0xF3,0x01,0x22,0x01,0x64,
		0x01,0x92,0x01,0xD4,0x02,0x07,0x02,0x08,0x02,0x34,0x02,0x5F,
		0x02,0x78,0x02,0x94,0x02,0xA6,0x02,0xBB,0x02,0xDB,0x02,0xF9,
		0x03,0x1F,0x03,0x7F};
		
		REG_PORT_DIRSET1 = 0x00010000;
    1b68:	2380      	movs	r3, #128	; 0x80
    1b6a:	025b      	lsls	r3, r3, #9
    1b6c:	4a27      	ldr	r2, [pc, #156]	; (1c0c <InitLCD+0xa8>)
    1b6e:	6013      	str	r3, [r2, #0]
		REG_PORT_OUTSET1 = PORT_PB16;
    1b70:	4c27      	ldr	r4, [pc, #156]	; (1c10 <InitLCD+0xac>)
    1b72:	6023      	str	r3, [r4, #0]
		
		REG_PORT_OUTSET1 = LCD_Reset;
    1b74:	2580      	movs	r5, #128	; 0x80
    1b76:	05ed      	lsls	r5, r5, #23
    1b78:	6025      	str	r5, [r4, #0]
		delay_ms(5);
    1b7a:	2005      	movs	r0, #5
    1b7c:	4f25      	ldr	r7, [pc, #148]	; (1c14 <InitLCD+0xb0>)
    1b7e:	47b8      	blx	r7
		REG_PORT_OUTCLR1 = LCD_Reset;
    1b80:	4e25      	ldr	r6, [pc, #148]	; (1c18 <InitLCD+0xb4>)
    1b82:	6035      	str	r5, [r6, #0]
		delay_ms(15);
    1b84:	200f      	movs	r0, #15
    1b86:	47b8      	blx	r7
		REG_PORT_OUTSET1 = LCD_Reset;
    1b88:	6025      	str	r5, [r4, #0]
		REG_PORT_OUTCLR1 = LCD_CS;
    1b8a:	2380      	movs	r3, #128	; 0x80
    1b8c:	03db      	lsls	r3, r3, #15
    1b8e:	6033      	str	r3, [r6, #0]

	for(int i = 0; i < 70; i++)
    1b90:	2400      	movs	r4, #0
	{
		LCD_Write_COM16(belial[i],mulciber[i]);
    1b92:	4f22      	ldr	r7, [pc, #136]	; (1c1c <InitLCD+0xb8>)
    1b94:	4e22      	ldr	r6, [pc, #136]	; (1c20 <InitLCD+0xbc>)
    1b96:	4d23      	ldr	r5, [pc, #140]	; (1c24 <InitLCD+0xc0>)
    1b98:	5de1      	ldrb	r1, [r4, r7]
    1b9a:	5da0      	ldrb	r0, [r4, r6]
    1b9c:	47a8      	blx	r5
		LCD_Write_DATA8(lucifer[i]);
    1b9e:	4b22      	ldr	r3, [pc, #136]	; (1c28 <InitLCD+0xc4>)
    1ba0:	5ce0      	ldrb	r0, [r4, r3]
    1ba2:	4b22      	ldr	r3, [pc, #136]	; (1c2c <InitLCD+0xc8>)
    1ba4:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    1ba6:	3401      	adds	r4, #1
    1ba8:	2c46      	cmp	r4, #70	; 0x46
    1baa:	d1f5      	bne.n	1b98 <InitLCD+0x34>
    1bac:	23d1      	movs	r3, #209	; 0xd1
    1bae:	9301      	str	r3, [sp, #4]
	}
	
	for(char k = 0xD1; k < 0xD6; k++)
		for(int l = 0; l < 48; l++)
		{
			LCD_Write_COM16(k,l);
    1bb0:	4d1c      	ldr	r5, [pc, #112]	; (1c24 <InitLCD+0xc0>)
			LCD_Write_DATA8(beelzebub[l]);
    1bb2:	4f1f      	ldr	r7, [pc, #124]	; (1c30 <InitLCD+0xcc>)
    1bb4:	4e1d      	ldr	r6, [pc, #116]	; (1c2c <InitLCD+0xc8>)
	for(int i = 0; i < 70; i++)
    1bb6:	2400      	movs	r4, #0
			LCD_Write_COM16(k,l);
    1bb8:	b2e1      	uxtb	r1, r4
    1bba:	9801      	ldr	r0, [sp, #4]
    1bbc:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    1bbe:	5de0      	ldrb	r0, [r4, r7]
    1bc0:	47b0      	blx	r6
		for(int l = 0; l < 48; l++)
    1bc2:	3401      	adds	r4, #1
    1bc4:	2c30      	cmp	r4, #48	; 0x30
    1bc6:	d1f7      	bne.n	1bb8 <InitLCD+0x54>
	for(char k = 0xD1; k < 0xD6; k++)
    1bc8:	9b01      	ldr	r3, [sp, #4]
    1bca:	3301      	adds	r3, #1
    1bcc:	b2db      	uxtb	r3, r3
    1bce:	9301      	str	r3, [sp, #4]
    1bd0:	2bd6      	cmp	r3, #214	; 0xd6
    1bd2:	d1f0      	bne.n	1bb6 <InitLCD+0x52>
		}
		

	
  	LCD_Write_COM16(0x11,0x00);   //StartUp  
    1bd4:	2100      	movs	r1, #0
    1bd6:	2011      	movs	r0, #17
    1bd8:	4d12      	ldr	r5, [pc, #72]	; (1c24 <InitLCD+0xc0>)
    1bda:	47a8      	blx	r5
  
  	delay_ms(5);
    1bdc:	2005      	movs	r0, #5
    1bde:	4c0d      	ldr	r4, [pc, #52]	; (1c14 <InitLCD+0xb0>)
    1be0:	47a0      	blx	r4

  	LCD_Write_COM16(0x29,0x00);   //Display On  
    1be2:	2100      	movs	r1, #0
    1be4:	2029      	movs	r0, #41	; 0x29
    1be6:	47a8      	blx	r5
	  
   	delay_ms(5);
    1be8:	2005      	movs	r0, #5
    1bea:	47a0      	blx	r4
	
	REG_PORT_OUTSET1 = LCD_CS;
    1bec:	2280      	movs	r2, #128	; 0x80
    1bee:	03d2      	lsls	r2, r2, #15
    1bf0:	4b07      	ldr	r3, [pc, #28]	; (1c10 <InitLCD+0xac>)
    1bf2:	601a      	str	r2, [r3, #0]
	
	setColorRGB(255, 255, 255);
    1bf4:	22ff      	movs	r2, #255	; 0xff
    1bf6:	21ff      	movs	r1, #255	; 0xff
    1bf8:	20ff      	movs	r0, #255	; 0xff
    1bfa:	4b0e      	ldr	r3, [pc, #56]	; (1c34 <InitLCD+0xd0>)
    1bfc:	4798      	blx	r3
	back_Color_High = ((r&248)|g>>5);
    1bfe:	2300      	movs	r3, #0
    1c00:	4a0d      	ldr	r2, [pc, #52]	; (1c38 <InitLCD+0xd4>)
    1c02:	8013      	strh	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    1c04:	4a0d      	ldr	r2, [pc, #52]	; (1c3c <InitLCD+0xd8>)
    1c06:	8013      	strh	r3, [r2, #0]
	setBackColorRGB(0, 0, 0);
	
}
    1c08:	b003      	add	sp, #12
    1c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c0c:	41004488 	.word	0x41004488
    1c10:	41004498 	.word	0x41004498
    1c14:	00000155 	.word	0x00000155
    1c18:	41004494 	.word	0x41004494
    1c1c:	00003214 	.word	0x00003214
    1c20:	00003154 	.word	0x00003154
    1c24:	000018cd 	.word	0x000018cd
    1c28:	0000319c 	.word	0x0000319c
    1c2c:	000018e5 	.word	0x000018e5
    1c30:	00003124 	.word	0x00003124
    1c34:	0000187d 	.word	0x0000187d
    1c38:	2000016e 	.word	0x2000016e
    1c3c:	20000168 	.word	0x20000168

00001c40 <main>:
{
    1c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c42:	46d6      	mov	lr, sl
    1c44:	464f      	mov	r7, r9
    1c46:	4646      	mov	r6, r8
    1c48:	b5c0      	push	{r6, r7, lr}
    1c4a:	b082      	sub	sp, #8
	system_init();
    1c4c:	4b3c      	ldr	r3, [pc, #240]	; (1d40 <main+0x100>)
    1c4e:	4798      	blx	r3
	delay_init();
    1c50:	4b3c      	ldr	r3, [pc, #240]	; (1d44 <main+0x104>)
    1c52:	4798      	blx	r3
	srand(chip_Serial_Number);
    1c54:	2040      	movs	r0, #64	; 0x40
    1c56:	4b3c      	ldr	r3, [pc, #240]	; (1d48 <main+0x108>)
    1c58:	4798      	blx	r3
	configure_usart_USB();
    1c5a:	4b3c      	ldr	r3, [pc, #240]	; (1d4c <main+0x10c>)
    1c5c:	4798      	blx	r3
	configure_console();
    1c5e:	4b3c      	ldr	r3, [pc, #240]	; (1d50 <main+0x110>)
    1c60:	4798      	blx	r3
	printf("Hello World\n\r");
    1c62:	483c      	ldr	r0, [pc, #240]	; (1d54 <main+0x114>)
    1c64:	4b3c      	ldr	r3, [pc, #240]	; (1d58 <main+0x118>)
    1c66:	4798      	blx	r3
	REG_PORT_DIRSET1 = 0x0000ffff;		//this is the LCD data bus, PB00 - PB15
    1c68:	4b3c      	ldr	r3, [pc, #240]	; (1d5c <main+0x11c>)
    1c6a:	4e3d      	ldr	r6, [pc, #244]	; (1d60 <main+0x120>)
    1c6c:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    1c6e:	2580      	movs	r5, #128	; 0x80
    1c70:	05ed      	lsls	r5, r5, #23
    1c72:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    1c74:	2480      	movs	r4, #128	; 0x80
    1c76:	03e4      	lsls	r4, r4, #15
    1c78:	601c      	str	r4, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    1c7a:	2080      	movs	r0, #128	; 0x80
    1c7c:	0280      	lsls	r0, r0, #10
    1c7e:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    1c80:	2180      	movs	r1, #128	; 0x80
    1c82:	0409      	lsls	r1, r1, #16
    1c84:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    1c86:	2280      	movs	r2, #128	; 0x80
    1c88:	0252      	lsls	r2, r2, #9
    1c8a:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    1c8c:	4b35      	ldr	r3, [pc, #212]	; (1d64 <main+0x124>)
    1c8e:	601e      	str	r6, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    1c90:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    1c92:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    1c94:	6018      	str	r0, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    1c96:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    1c98:	601a      	str	r2, [r3, #0]
	InitLCD();
    1c9a:	4b33      	ldr	r3, [pc, #204]	; (1d68 <main+0x128>)
    1c9c:	4798      	blx	r3
	back_Color_High = ((r&248)|g>>5);
    1c9e:	2300      	movs	r3, #0
    1ca0:	4a32      	ldr	r2, [pc, #200]	; (1d6c <main+0x12c>)
    1ca2:	8013      	strh	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    1ca4:	4a32      	ldr	r2, [pc, #200]	; (1d70 <main+0x130>)
    1ca6:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
    1ca8:	2200      	movs	r2, #0
    1caa:	2100      	movs	r1, #0
    1cac:	2000      	movs	r0, #0
    1cae:	4b31      	ldr	r3, [pc, #196]	; (1d74 <main+0x134>)
    1cb0:	4798      	blx	r3
	fillRect(0,0,799,489);
    1cb2:	23ea      	movs	r3, #234	; 0xea
    1cb4:	33ff      	adds	r3, #255	; 0xff
    1cb6:	4a30      	ldr	r2, [pc, #192]	; (1d78 <main+0x138>)
    1cb8:	2100      	movs	r1, #0
    1cba:	2000      	movs	r0, #0
    1cbc:	4c2f      	ldr	r4, [pc, #188]	; (1d7c <main+0x13c>)
    1cbe:	47a0      	blx	r4
		clrScr();
    1cc0:	4b2f      	ldr	r3, [pc, #188]	; (1d80 <main+0x140>)
    1cc2:	4798      	blx	r3
		blue = 64;
    1cc4:	2740      	movs	r7, #64	; 0x40
		green = 128;
    1cc6:	2580      	movs	r5, #128	; 0x80
		red = 0;
    1cc8:	2400      	movs	r4, #0
			setColorRGB(red, green, blue);
    1cca:	4b2a      	ldr	r3, [pc, #168]	; (1d74 <main+0x134>)
    1ccc:	469a      	mov	sl, r3
			SetBrightness(red);
    1cce:	4b2d      	ldr	r3, [pc, #180]	; (1d84 <main+0x144>)
    1cd0:	4699      	mov	r9, r3
			drawKare(0);
    1cd2:	4b2d      	ldr	r3, [pc, #180]	; (1d88 <main+0x148>)
    1cd4:	4698      	mov	r8, r3
    1cd6:	e026      	b.n	1d26 <main+0xe6>
			if(green > 0 && red == 0)
    1cd8:	2d00      	cmp	r5, #0
    1cda:	dd03      	ble.n	1ce4 <main+0xa4>
    1cdc:	2c00      	cmp	r4, #0
    1cde:	d107      	bne.n	1cf0 <main+0xb0>
				green--;
    1ce0:	3d01      	subs	r5, #1
				blue++;
    1ce2:	3701      	adds	r7, #1
			if(blue > 0 && green == 0)
    1ce4:	2f00      	cmp	r7, #0
    1ce6:	dd03      	ble.n	1cf0 <main+0xb0>
    1ce8:	2d00      	cmp	r5, #0
    1cea:	d101      	bne.n	1cf0 <main+0xb0>
				red++;
    1cec:	3401      	adds	r4, #1
				blue--;
    1cee:	3f01      	subs	r7, #1
			setColorRGB(red, green, blue);
    1cf0:	b2e6      	uxtb	r6, r4
    1cf2:	b2fa      	uxtb	r2, r7
    1cf4:	b2e9      	uxtb	r1, r5
    1cf6:	0030      	movs	r0, r6
    1cf8:	47d0      	blx	sl
			SetBrightness(red);
    1cfa:	0030      	movs	r0, r6
    1cfc:	47c8      	blx	r9
			drawKare(0);
    1cfe:	2000      	movs	r0, #0
    1d00:	47c0      	blx	r8
			printf("%x, %x, %x,", red, green, blue);
    1d02:	003b      	movs	r3, r7
    1d04:	002a      	movs	r2, r5
    1d06:	0021      	movs	r1, r4
    1d08:	4820      	ldr	r0, [pc, #128]	; (1d8c <main+0x14c>)
    1d0a:	4e13      	ldr	r6, [pc, #76]	; (1d58 <main+0x118>)
    1d0c:	47b0      	blx	r6
			printf("%x, %x, %x, %x \r", 0x0080A00C, 0x0080A040,
    1d0e:	4b20      	ldr	r3, [pc, #128]	; (1d90 <main+0x150>)
    1d10:	9300      	str	r3, [sp, #0]
    1d12:	4b20      	ldr	r3, [pc, #128]	; (1d94 <main+0x154>)
    1d14:	4a20      	ldr	r2, [pc, #128]	; (1d98 <main+0x158>)
    1d16:	4921      	ldr	r1, [pc, #132]	; (1d9c <main+0x15c>)
    1d18:	4821      	ldr	r0, [pc, #132]	; (1da0 <main+0x160>)
    1d1a:	47b0      	blx	r6
			usart_write_buffer_wait(&usart_USB, ("%s /n",red), 3);
    1d1c:	2203      	movs	r2, #3
    1d1e:	0021      	movs	r1, r4
    1d20:	4820      	ldr	r0, [pc, #128]	; (1da4 <main+0x164>)
    1d22:	4b21      	ldr	r3, [pc, #132]	; (1da8 <main+0x168>)
    1d24:	4798      	blx	r3
			if(red > 0 && blue == 0)
    1d26:	2c00      	cmp	r4, #0
    1d28:	ddd6      	ble.n	1cd8 <main+0x98>
    1d2a:	2f00      	cmp	r7, #0
    1d2c:	d104      	bne.n	1d38 <main+0xf8>
				red--;
    1d2e:	3c01      	subs	r4, #1
				green++;
    1d30:	3501      	adds	r5, #1
			if(green > 0 && red == 0)
    1d32:	2d00      	cmp	r5, #0
    1d34:	dcd2      	bgt.n	1cdc <main+0x9c>
    1d36:	e7db      	b.n	1cf0 <main+0xb0>
    1d38:	2d00      	cmp	r5, #0
    1d3a:	dcd9      	bgt.n	1cf0 <main+0xb0>
    1d3c:	e7d2      	b.n	1ce4 <main+0xa4>
    1d3e:	46c0      	nop			; (mov r8, r8)
    1d40:	0000141d 	.word	0x0000141d
    1d44:	00000115 	.word	0x00000115
    1d48:	00001fb9 	.word	0x00001fb9
    1d4c:	0000174d 	.word	0x0000174d
    1d50:	00001645 	.word	0x00001645
    1d54:	000031e4 	.word	0x000031e4
    1d58:	00001f85 	.word	0x00001f85
    1d5c:	41004488 	.word	0x41004488
    1d60:	0000ffff 	.word	0x0000ffff
    1d64:	41004494 	.word	0x41004494
    1d68:	00001b65 	.word	0x00001b65
    1d6c:	2000016e 	.word	0x2000016e
    1d70:	20000168 	.word	0x20000168
    1d74:	0000187d 	.word	0x0000187d
    1d78:	0000031f 	.word	0x0000031f
    1d7c:	00001989 	.word	0x00001989
    1d80:	00001a39 	.word	0x00001a39
    1d84:	00001a51 	.word	0x00001a51
    1d88:	00001a81 	.word	0x00001a81
    1d8c:	000031f4 	.word	0x000031f4
    1d90:	0080a048 	.word	0x0080a048
    1d94:	0080a044 	.word	0x0080a044
    1d98:	0080a040 	.word	0x0080a040
    1d9c:	0080a00c 	.word	0x0080a00c
    1da0:	00003200 	.word	0x00003200
    1da4:	20000134 	.word	0x20000134
    1da8:	00000a5d 	.word	0x00000a5d

00001dac <__udivsi3>:
    1dac:	2200      	movs	r2, #0
    1dae:	0843      	lsrs	r3, r0, #1
    1db0:	428b      	cmp	r3, r1
    1db2:	d374      	bcc.n	1e9e <__udivsi3+0xf2>
    1db4:	0903      	lsrs	r3, r0, #4
    1db6:	428b      	cmp	r3, r1
    1db8:	d35f      	bcc.n	1e7a <__udivsi3+0xce>
    1dba:	0a03      	lsrs	r3, r0, #8
    1dbc:	428b      	cmp	r3, r1
    1dbe:	d344      	bcc.n	1e4a <__udivsi3+0x9e>
    1dc0:	0b03      	lsrs	r3, r0, #12
    1dc2:	428b      	cmp	r3, r1
    1dc4:	d328      	bcc.n	1e18 <__udivsi3+0x6c>
    1dc6:	0c03      	lsrs	r3, r0, #16
    1dc8:	428b      	cmp	r3, r1
    1dca:	d30d      	bcc.n	1de8 <__udivsi3+0x3c>
    1dcc:	22ff      	movs	r2, #255	; 0xff
    1dce:	0209      	lsls	r1, r1, #8
    1dd0:	ba12      	rev	r2, r2
    1dd2:	0c03      	lsrs	r3, r0, #16
    1dd4:	428b      	cmp	r3, r1
    1dd6:	d302      	bcc.n	1dde <__udivsi3+0x32>
    1dd8:	1212      	asrs	r2, r2, #8
    1dda:	0209      	lsls	r1, r1, #8
    1ddc:	d065      	beq.n	1eaa <__udivsi3+0xfe>
    1dde:	0b03      	lsrs	r3, r0, #12
    1de0:	428b      	cmp	r3, r1
    1de2:	d319      	bcc.n	1e18 <__udivsi3+0x6c>
    1de4:	e000      	b.n	1de8 <__udivsi3+0x3c>
    1de6:	0a09      	lsrs	r1, r1, #8
    1de8:	0bc3      	lsrs	r3, r0, #15
    1dea:	428b      	cmp	r3, r1
    1dec:	d301      	bcc.n	1df2 <__udivsi3+0x46>
    1dee:	03cb      	lsls	r3, r1, #15
    1df0:	1ac0      	subs	r0, r0, r3
    1df2:	4152      	adcs	r2, r2
    1df4:	0b83      	lsrs	r3, r0, #14
    1df6:	428b      	cmp	r3, r1
    1df8:	d301      	bcc.n	1dfe <__udivsi3+0x52>
    1dfa:	038b      	lsls	r3, r1, #14
    1dfc:	1ac0      	subs	r0, r0, r3
    1dfe:	4152      	adcs	r2, r2
    1e00:	0b43      	lsrs	r3, r0, #13
    1e02:	428b      	cmp	r3, r1
    1e04:	d301      	bcc.n	1e0a <__udivsi3+0x5e>
    1e06:	034b      	lsls	r3, r1, #13
    1e08:	1ac0      	subs	r0, r0, r3
    1e0a:	4152      	adcs	r2, r2
    1e0c:	0b03      	lsrs	r3, r0, #12
    1e0e:	428b      	cmp	r3, r1
    1e10:	d301      	bcc.n	1e16 <__udivsi3+0x6a>
    1e12:	030b      	lsls	r3, r1, #12
    1e14:	1ac0      	subs	r0, r0, r3
    1e16:	4152      	adcs	r2, r2
    1e18:	0ac3      	lsrs	r3, r0, #11
    1e1a:	428b      	cmp	r3, r1
    1e1c:	d301      	bcc.n	1e22 <__udivsi3+0x76>
    1e1e:	02cb      	lsls	r3, r1, #11
    1e20:	1ac0      	subs	r0, r0, r3
    1e22:	4152      	adcs	r2, r2
    1e24:	0a83      	lsrs	r3, r0, #10
    1e26:	428b      	cmp	r3, r1
    1e28:	d301      	bcc.n	1e2e <__udivsi3+0x82>
    1e2a:	028b      	lsls	r3, r1, #10
    1e2c:	1ac0      	subs	r0, r0, r3
    1e2e:	4152      	adcs	r2, r2
    1e30:	0a43      	lsrs	r3, r0, #9
    1e32:	428b      	cmp	r3, r1
    1e34:	d301      	bcc.n	1e3a <__udivsi3+0x8e>
    1e36:	024b      	lsls	r3, r1, #9
    1e38:	1ac0      	subs	r0, r0, r3
    1e3a:	4152      	adcs	r2, r2
    1e3c:	0a03      	lsrs	r3, r0, #8
    1e3e:	428b      	cmp	r3, r1
    1e40:	d301      	bcc.n	1e46 <__udivsi3+0x9a>
    1e42:	020b      	lsls	r3, r1, #8
    1e44:	1ac0      	subs	r0, r0, r3
    1e46:	4152      	adcs	r2, r2
    1e48:	d2cd      	bcs.n	1de6 <__udivsi3+0x3a>
    1e4a:	09c3      	lsrs	r3, r0, #7
    1e4c:	428b      	cmp	r3, r1
    1e4e:	d301      	bcc.n	1e54 <__udivsi3+0xa8>
    1e50:	01cb      	lsls	r3, r1, #7
    1e52:	1ac0      	subs	r0, r0, r3
    1e54:	4152      	adcs	r2, r2
    1e56:	0983      	lsrs	r3, r0, #6
    1e58:	428b      	cmp	r3, r1
    1e5a:	d301      	bcc.n	1e60 <__udivsi3+0xb4>
    1e5c:	018b      	lsls	r3, r1, #6
    1e5e:	1ac0      	subs	r0, r0, r3
    1e60:	4152      	adcs	r2, r2
    1e62:	0943      	lsrs	r3, r0, #5
    1e64:	428b      	cmp	r3, r1
    1e66:	d301      	bcc.n	1e6c <__udivsi3+0xc0>
    1e68:	014b      	lsls	r3, r1, #5
    1e6a:	1ac0      	subs	r0, r0, r3
    1e6c:	4152      	adcs	r2, r2
    1e6e:	0903      	lsrs	r3, r0, #4
    1e70:	428b      	cmp	r3, r1
    1e72:	d301      	bcc.n	1e78 <__udivsi3+0xcc>
    1e74:	010b      	lsls	r3, r1, #4
    1e76:	1ac0      	subs	r0, r0, r3
    1e78:	4152      	adcs	r2, r2
    1e7a:	08c3      	lsrs	r3, r0, #3
    1e7c:	428b      	cmp	r3, r1
    1e7e:	d301      	bcc.n	1e84 <__udivsi3+0xd8>
    1e80:	00cb      	lsls	r3, r1, #3
    1e82:	1ac0      	subs	r0, r0, r3
    1e84:	4152      	adcs	r2, r2
    1e86:	0883      	lsrs	r3, r0, #2
    1e88:	428b      	cmp	r3, r1
    1e8a:	d301      	bcc.n	1e90 <__udivsi3+0xe4>
    1e8c:	008b      	lsls	r3, r1, #2
    1e8e:	1ac0      	subs	r0, r0, r3
    1e90:	4152      	adcs	r2, r2
    1e92:	0843      	lsrs	r3, r0, #1
    1e94:	428b      	cmp	r3, r1
    1e96:	d301      	bcc.n	1e9c <__udivsi3+0xf0>
    1e98:	004b      	lsls	r3, r1, #1
    1e9a:	1ac0      	subs	r0, r0, r3
    1e9c:	4152      	adcs	r2, r2
    1e9e:	1a41      	subs	r1, r0, r1
    1ea0:	d200      	bcs.n	1ea4 <__udivsi3+0xf8>
    1ea2:	4601      	mov	r1, r0
    1ea4:	4152      	adcs	r2, r2
    1ea6:	4610      	mov	r0, r2
    1ea8:	4770      	bx	lr
    1eaa:	e7ff      	b.n	1eac <__udivsi3+0x100>
    1eac:	b501      	push	{r0, lr}
    1eae:	2000      	movs	r0, #0
    1eb0:	f000 f806 	bl	1ec0 <__aeabi_idiv0>
    1eb4:	bd02      	pop	{r1, pc}
    1eb6:	46c0      	nop			; (mov r8, r8)

00001eb8 <__aeabi_uidivmod>:
    1eb8:	2900      	cmp	r1, #0
    1eba:	d0f7      	beq.n	1eac <__udivsi3+0x100>
    1ebc:	e776      	b.n	1dac <__udivsi3>
    1ebe:	4770      	bx	lr

00001ec0 <__aeabi_idiv0>:
    1ec0:	4770      	bx	lr
    1ec2:	46c0      	nop			; (mov r8, r8)

00001ec4 <__aeabi_lmul>:
    1ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ec6:	46ce      	mov	lr, r9
    1ec8:	4647      	mov	r7, r8
    1eca:	0415      	lsls	r5, r2, #16
    1ecc:	0c2d      	lsrs	r5, r5, #16
    1ece:	002e      	movs	r6, r5
    1ed0:	b580      	push	{r7, lr}
    1ed2:	0407      	lsls	r7, r0, #16
    1ed4:	0c14      	lsrs	r4, r2, #16
    1ed6:	0c3f      	lsrs	r7, r7, #16
    1ed8:	4699      	mov	r9, r3
    1eda:	0c03      	lsrs	r3, r0, #16
    1edc:	437e      	muls	r6, r7
    1ede:	435d      	muls	r5, r3
    1ee0:	4367      	muls	r7, r4
    1ee2:	4363      	muls	r3, r4
    1ee4:	197f      	adds	r7, r7, r5
    1ee6:	0c34      	lsrs	r4, r6, #16
    1ee8:	19e4      	adds	r4, r4, r7
    1eea:	469c      	mov	ip, r3
    1eec:	42a5      	cmp	r5, r4
    1eee:	d903      	bls.n	1ef8 <__aeabi_lmul+0x34>
    1ef0:	2380      	movs	r3, #128	; 0x80
    1ef2:	025b      	lsls	r3, r3, #9
    1ef4:	4698      	mov	r8, r3
    1ef6:	44c4      	add	ip, r8
    1ef8:	464b      	mov	r3, r9
    1efa:	4351      	muls	r1, r2
    1efc:	4343      	muls	r3, r0
    1efe:	0436      	lsls	r6, r6, #16
    1f00:	0c36      	lsrs	r6, r6, #16
    1f02:	0c25      	lsrs	r5, r4, #16
    1f04:	0424      	lsls	r4, r4, #16
    1f06:	4465      	add	r5, ip
    1f08:	19a4      	adds	r4, r4, r6
    1f0a:	1859      	adds	r1, r3, r1
    1f0c:	1949      	adds	r1, r1, r5
    1f0e:	0020      	movs	r0, r4
    1f10:	bc0c      	pop	{r2, r3}
    1f12:	4690      	mov	r8, r2
    1f14:	4699      	mov	r9, r3
    1f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001f18 <__libc_init_array>:
    1f18:	b570      	push	{r4, r5, r6, lr}
    1f1a:	2600      	movs	r6, #0
    1f1c:	4d0c      	ldr	r5, [pc, #48]	; (1f50 <__libc_init_array+0x38>)
    1f1e:	4c0d      	ldr	r4, [pc, #52]	; (1f54 <__libc_init_array+0x3c>)
    1f20:	1b64      	subs	r4, r4, r5
    1f22:	10a4      	asrs	r4, r4, #2
    1f24:	42a6      	cmp	r6, r4
    1f26:	d109      	bne.n	1f3c <__libc_init_array+0x24>
    1f28:	2600      	movs	r6, #0
    1f2a:	f001 f9e3 	bl	32f4 <_init>
    1f2e:	4d0a      	ldr	r5, [pc, #40]	; (1f58 <__libc_init_array+0x40>)
    1f30:	4c0a      	ldr	r4, [pc, #40]	; (1f5c <__libc_init_array+0x44>)
    1f32:	1b64      	subs	r4, r4, r5
    1f34:	10a4      	asrs	r4, r4, #2
    1f36:	42a6      	cmp	r6, r4
    1f38:	d105      	bne.n	1f46 <__libc_init_array+0x2e>
    1f3a:	bd70      	pop	{r4, r5, r6, pc}
    1f3c:	00b3      	lsls	r3, r6, #2
    1f3e:	58eb      	ldr	r3, [r5, r3]
    1f40:	4798      	blx	r3
    1f42:	3601      	adds	r6, #1
    1f44:	e7ee      	b.n	1f24 <__libc_init_array+0xc>
    1f46:	00b3      	lsls	r3, r6, #2
    1f48:	58eb      	ldr	r3, [r5, r3]
    1f4a:	4798      	blx	r3
    1f4c:	3601      	adds	r6, #1
    1f4e:	e7f2      	b.n	1f36 <__libc_init_array+0x1e>
    1f50:	00003300 	.word	0x00003300
    1f54:	00003300 	.word	0x00003300
    1f58:	00003300 	.word	0x00003300
    1f5c:	00003304 	.word	0x00003304

00001f60 <memcpy>:
    1f60:	2300      	movs	r3, #0
    1f62:	b510      	push	{r4, lr}
    1f64:	429a      	cmp	r2, r3
    1f66:	d100      	bne.n	1f6a <memcpy+0xa>
    1f68:	bd10      	pop	{r4, pc}
    1f6a:	5ccc      	ldrb	r4, [r1, r3]
    1f6c:	54c4      	strb	r4, [r0, r3]
    1f6e:	3301      	adds	r3, #1
    1f70:	e7f8      	b.n	1f64 <memcpy+0x4>

00001f72 <memset>:
    1f72:	0003      	movs	r3, r0
    1f74:	1882      	adds	r2, r0, r2
    1f76:	4293      	cmp	r3, r2
    1f78:	d100      	bne.n	1f7c <memset+0xa>
    1f7a:	4770      	bx	lr
    1f7c:	7019      	strb	r1, [r3, #0]
    1f7e:	3301      	adds	r3, #1
    1f80:	e7f9      	b.n	1f76 <memset+0x4>
	...

00001f84 <iprintf>:
    1f84:	b40f      	push	{r0, r1, r2, r3}
    1f86:	4b0b      	ldr	r3, [pc, #44]	; (1fb4 <iprintf+0x30>)
    1f88:	b513      	push	{r0, r1, r4, lr}
    1f8a:	681c      	ldr	r4, [r3, #0]
    1f8c:	2c00      	cmp	r4, #0
    1f8e:	d005      	beq.n	1f9c <iprintf+0x18>
    1f90:	69a3      	ldr	r3, [r4, #24]
    1f92:	2b00      	cmp	r3, #0
    1f94:	d102      	bne.n	1f9c <iprintf+0x18>
    1f96:	0020      	movs	r0, r4
    1f98:	f000 f9ea 	bl	2370 <__sinit>
    1f9c:	ab05      	add	r3, sp, #20
    1f9e:	9a04      	ldr	r2, [sp, #16]
    1fa0:	68a1      	ldr	r1, [r4, #8]
    1fa2:	0020      	movs	r0, r4
    1fa4:	9301      	str	r3, [sp, #4]
    1fa6:	f000 fbbf 	bl	2728 <_vfiprintf_r>
    1faa:	bc16      	pop	{r1, r2, r4}
    1fac:	bc08      	pop	{r3}
    1fae:	b004      	add	sp, #16
    1fb0:	4718      	bx	r3
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	20000010 	.word	0x20000010

00001fb8 <srand>:
    1fb8:	4b10      	ldr	r3, [pc, #64]	; (1ffc <srand+0x44>)
    1fba:	b570      	push	{r4, r5, r6, lr}
    1fbc:	681c      	ldr	r4, [r3, #0]
    1fbe:	0005      	movs	r5, r0
    1fc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d115      	bne.n	1ff2 <srand+0x3a>
    1fc6:	2018      	movs	r0, #24
    1fc8:	f000 fad4 	bl	2574 <malloc>
    1fcc:	4b0c      	ldr	r3, [pc, #48]	; (2000 <STACK_SIZE>)
    1fce:	63a0      	str	r0, [r4, #56]	; 0x38
    1fd0:	8003      	strh	r3, [r0, #0]
    1fd2:	4b0c      	ldr	r3, [pc, #48]	; (2004 <STACK_SIZE+0x4>)
    1fd4:	2201      	movs	r2, #1
    1fd6:	8043      	strh	r3, [r0, #2]
    1fd8:	4b0b      	ldr	r3, [pc, #44]	; (2008 <STACK_SIZE+0x8>)
    1fda:	8083      	strh	r3, [r0, #4]
    1fdc:	4b0b      	ldr	r3, [pc, #44]	; (200c <STACK_SIZE+0xc>)
    1fde:	80c3      	strh	r3, [r0, #6]
    1fe0:	4b0b      	ldr	r3, [pc, #44]	; (2010 <STACK_SIZE+0x10>)
    1fe2:	8103      	strh	r3, [r0, #8]
    1fe4:	2305      	movs	r3, #5
    1fe6:	8143      	strh	r3, [r0, #10]
    1fe8:	3306      	adds	r3, #6
    1fea:	8183      	strh	r3, [r0, #12]
    1fec:	2300      	movs	r3, #0
    1fee:	6102      	str	r2, [r0, #16]
    1ff0:	6143      	str	r3, [r0, #20]
    1ff2:	2200      	movs	r2, #0
    1ff4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1ff6:	611d      	str	r5, [r3, #16]
    1ff8:	615a      	str	r2, [r3, #20]
    1ffa:	bd70      	pop	{r4, r5, r6, pc}
    1ffc:	20000010 	.word	0x20000010
    2000:	0000330e 	.word	0x0000330e
    2004:	ffffabcd 	.word	0xffffabcd
    2008:	00001234 	.word	0x00001234
    200c:	ffffe66d 	.word	0xffffe66d
    2010:	ffffdeec 	.word	0xffffdeec

00002014 <setbuf>:
    2014:	424a      	negs	r2, r1
    2016:	414a      	adcs	r2, r1
    2018:	2380      	movs	r3, #128	; 0x80
    201a:	b510      	push	{r4, lr}
    201c:	0052      	lsls	r2, r2, #1
    201e:	00db      	lsls	r3, r3, #3
    2020:	f000 f802 	bl	2028 <setvbuf>
    2024:	bd10      	pop	{r4, pc}
	...

00002028 <setvbuf>:
    2028:	b5f0      	push	{r4, r5, r6, r7, lr}
    202a:	001d      	movs	r5, r3
    202c:	4b4f      	ldr	r3, [pc, #316]	; (216c <setvbuf+0x144>)
    202e:	b085      	sub	sp, #20
    2030:	681e      	ldr	r6, [r3, #0]
    2032:	0004      	movs	r4, r0
    2034:	000f      	movs	r7, r1
    2036:	9200      	str	r2, [sp, #0]
    2038:	2e00      	cmp	r6, #0
    203a:	d005      	beq.n	2048 <setvbuf+0x20>
    203c:	69b3      	ldr	r3, [r6, #24]
    203e:	2b00      	cmp	r3, #0
    2040:	d102      	bne.n	2048 <setvbuf+0x20>
    2042:	0030      	movs	r0, r6
    2044:	f000 f994 	bl	2370 <__sinit>
    2048:	4b49      	ldr	r3, [pc, #292]	; (2170 <setvbuf+0x148>)
    204a:	429c      	cmp	r4, r3
    204c:	d150      	bne.n	20f0 <setvbuf+0xc8>
    204e:	6874      	ldr	r4, [r6, #4]
    2050:	9b00      	ldr	r3, [sp, #0]
    2052:	2b02      	cmp	r3, #2
    2054:	d005      	beq.n	2062 <setvbuf+0x3a>
    2056:	2b01      	cmp	r3, #1
    2058:	d900      	bls.n	205c <setvbuf+0x34>
    205a:	e084      	b.n	2166 <setvbuf+0x13e>
    205c:	2d00      	cmp	r5, #0
    205e:	da00      	bge.n	2062 <setvbuf+0x3a>
    2060:	e081      	b.n	2166 <setvbuf+0x13e>
    2062:	0021      	movs	r1, r4
    2064:	0030      	movs	r0, r6
    2066:	f000 f915 	bl	2294 <_fflush_r>
    206a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    206c:	2900      	cmp	r1, #0
    206e:	d008      	beq.n	2082 <setvbuf+0x5a>
    2070:	0023      	movs	r3, r4
    2072:	3344      	adds	r3, #68	; 0x44
    2074:	4299      	cmp	r1, r3
    2076:	d002      	beq.n	207e <setvbuf+0x56>
    2078:	0030      	movs	r0, r6
    207a:	f000 fa85 	bl	2588 <_free_r>
    207e:	2300      	movs	r3, #0
    2080:	6363      	str	r3, [r4, #52]	; 0x34
    2082:	2300      	movs	r3, #0
    2084:	61a3      	str	r3, [r4, #24]
    2086:	6063      	str	r3, [r4, #4]
    2088:	89a3      	ldrh	r3, [r4, #12]
    208a:	061b      	lsls	r3, r3, #24
    208c:	d503      	bpl.n	2096 <setvbuf+0x6e>
    208e:	6921      	ldr	r1, [r4, #16]
    2090:	0030      	movs	r0, r6
    2092:	f000 fa79 	bl	2588 <_free_r>
    2096:	89a3      	ldrh	r3, [r4, #12]
    2098:	4a36      	ldr	r2, [pc, #216]	; (2174 <setvbuf+0x14c>)
    209a:	4013      	ands	r3, r2
    209c:	81a3      	strh	r3, [r4, #12]
    209e:	9b00      	ldr	r3, [sp, #0]
    20a0:	2b02      	cmp	r3, #2
    20a2:	d05a      	beq.n	215a <setvbuf+0x132>
    20a4:	ab03      	add	r3, sp, #12
    20a6:	aa02      	add	r2, sp, #8
    20a8:	0021      	movs	r1, r4
    20aa:	0030      	movs	r0, r6
    20ac:	f000 f9f6 	bl	249c <__swhatbuf_r>
    20b0:	89a3      	ldrh	r3, [r4, #12]
    20b2:	4318      	orrs	r0, r3
    20b4:	81a0      	strh	r0, [r4, #12]
    20b6:	2d00      	cmp	r5, #0
    20b8:	d124      	bne.n	2104 <setvbuf+0xdc>
    20ba:	9d02      	ldr	r5, [sp, #8]
    20bc:	0028      	movs	r0, r5
    20be:	f000 fa59 	bl	2574 <malloc>
    20c2:	9501      	str	r5, [sp, #4]
    20c4:	1e07      	subs	r7, r0, #0
    20c6:	d142      	bne.n	214e <setvbuf+0x126>
    20c8:	9b02      	ldr	r3, [sp, #8]
    20ca:	9301      	str	r3, [sp, #4]
    20cc:	42ab      	cmp	r3, r5
    20ce:	d139      	bne.n	2144 <setvbuf+0x11c>
    20d0:	2001      	movs	r0, #1
    20d2:	4240      	negs	r0, r0
    20d4:	2302      	movs	r3, #2
    20d6:	89a2      	ldrh	r2, [r4, #12]
    20d8:	4313      	orrs	r3, r2
    20da:	81a3      	strh	r3, [r4, #12]
    20dc:	2300      	movs	r3, #0
    20de:	60a3      	str	r3, [r4, #8]
    20e0:	0023      	movs	r3, r4
    20e2:	3347      	adds	r3, #71	; 0x47
    20e4:	6023      	str	r3, [r4, #0]
    20e6:	6123      	str	r3, [r4, #16]
    20e8:	2301      	movs	r3, #1
    20ea:	6163      	str	r3, [r4, #20]
    20ec:	b005      	add	sp, #20
    20ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20f0:	4b21      	ldr	r3, [pc, #132]	; (2178 <setvbuf+0x150>)
    20f2:	429c      	cmp	r4, r3
    20f4:	d101      	bne.n	20fa <setvbuf+0xd2>
    20f6:	68b4      	ldr	r4, [r6, #8]
    20f8:	e7aa      	b.n	2050 <setvbuf+0x28>
    20fa:	4b20      	ldr	r3, [pc, #128]	; (217c <setvbuf+0x154>)
    20fc:	429c      	cmp	r4, r3
    20fe:	d1a7      	bne.n	2050 <setvbuf+0x28>
    2100:	68f4      	ldr	r4, [r6, #12]
    2102:	e7a5      	b.n	2050 <setvbuf+0x28>
    2104:	2f00      	cmp	r7, #0
    2106:	d0d9      	beq.n	20bc <setvbuf+0x94>
    2108:	69b3      	ldr	r3, [r6, #24]
    210a:	2b00      	cmp	r3, #0
    210c:	d102      	bne.n	2114 <setvbuf+0xec>
    210e:	0030      	movs	r0, r6
    2110:	f000 f92e 	bl	2370 <__sinit>
    2114:	9b00      	ldr	r3, [sp, #0]
    2116:	2b01      	cmp	r3, #1
    2118:	d103      	bne.n	2122 <setvbuf+0xfa>
    211a:	89a3      	ldrh	r3, [r4, #12]
    211c:	9a00      	ldr	r2, [sp, #0]
    211e:	431a      	orrs	r2, r3
    2120:	81a2      	strh	r2, [r4, #12]
    2122:	2008      	movs	r0, #8
    2124:	89a3      	ldrh	r3, [r4, #12]
    2126:	6027      	str	r7, [r4, #0]
    2128:	6127      	str	r7, [r4, #16]
    212a:	6165      	str	r5, [r4, #20]
    212c:	4018      	ands	r0, r3
    212e:	d018      	beq.n	2162 <setvbuf+0x13a>
    2130:	2001      	movs	r0, #1
    2132:	4018      	ands	r0, r3
    2134:	2300      	movs	r3, #0
    2136:	4298      	cmp	r0, r3
    2138:	d011      	beq.n	215e <setvbuf+0x136>
    213a:	426d      	negs	r5, r5
    213c:	60a3      	str	r3, [r4, #8]
    213e:	61a5      	str	r5, [r4, #24]
    2140:	0018      	movs	r0, r3
    2142:	e7d3      	b.n	20ec <setvbuf+0xc4>
    2144:	9801      	ldr	r0, [sp, #4]
    2146:	f000 fa15 	bl	2574 <malloc>
    214a:	1e07      	subs	r7, r0, #0
    214c:	d0c0      	beq.n	20d0 <setvbuf+0xa8>
    214e:	2380      	movs	r3, #128	; 0x80
    2150:	89a2      	ldrh	r2, [r4, #12]
    2152:	9d01      	ldr	r5, [sp, #4]
    2154:	4313      	orrs	r3, r2
    2156:	81a3      	strh	r3, [r4, #12]
    2158:	e7d6      	b.n	2108 <setvbuf+0xe0>
    215a:	2000      	movs	r0, #0
    215c:	e7ba      	b.n	20d4 <setvbuf+0xac>
    215e:	60a5      	str	r5, [r4, #8]
    2160:	e7c4      	b.n	20ec <setvbuf+0xc4>
    2162:	60a0      	str	r0, [r4, #8]
    2164:	e7c2      	b.n	20ec <setvbuf+0xc4>
    2166:	2001      	movs	r0, #1
    2168:	4240      	negs	r0, r0
    216a:	e7bf      	b.n	20ec <setvbuf+0xc4>
    216c:	20000010 	.word	0x20000010
    2170:	00003280 	.word	0x00003280
    2174:	fffff35c 	.word	0xfffff35c
    2178:	000032a0 	.word	0x000032a0
    217c:	00003260 	.word	0x00003260

00002180 <__sflush_r>:
    2180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2182:	898a      	ldrh	r2, [r1, #12]
    2184:	0005      	movs	r5, r0
    2186:	000c      	movs	r4, r1
    2188:	0713      	lsls	r3, r2, #28
    218a:	d460      	bmi.n	224e <__sflush_r+0xce>
    218c:	684b      	ldr	r3, [r1, #4]
    218e:	2b00      	cmp	r3, #0
    2190:	dc04      	bgt.n	219c <__sflush_r+0x1c>
    2192:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2194:	2b00      	cmp	r3, #0
    2196:	dc01      	bgt.n	219c <__sflush_r+0x1c>
    2198:	2000      	movs	r0, #0
    219a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    219c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    219e:	2f00      	cmp	r7, #0
    21a0:	d0fa      	beq.n	2198 <__sflush_r+0x18>
    21a2:	2300      	movs	r3, #0
    21a4:	682e      	ldr	r6, [r5, #0]
    21a6:	602b      	str	r3, [r5, #0]
    21a8:	2380      	movs	r3, #128	; 0x80
    21aa:	015b      	lsls	r3, r3, #5
    21ac:	401a      	ands	r2, r3
    21ae:	d034      	beq.n	221a <__sflush_r+0x9a>
    21b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    21b2:	89a3      	ldrh	r3, [r4, #12]
    21b4:	075b      	lsls	r3, r3, #29
    21b6:	d506      	bpl.n	21c6 <__sflush_r+0x46>
    21b8:	6863      	ldr	r3, [r4, #4]
    21ba:	1ac0      	subs	r0, r0, r3
    21bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    21be:	2b00      	cmp	r3, #0
    21c0:	d001      	beq.n	21c6 <__sflush_r+0x46>
    21c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    21c4:	1ac0      	subs	r0, r0, r3
    21c6:	0002      	movs	r2, r0
    21c8:	6a21      	ldr	r1, [r4, #32]
    21ca:	2300      	movs	r3, #0
    21cc:	0028      	movs	r0, r5
    21ce:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    21d0:	47b8      	blx	r7
    21d2:	89a1      	ldrh	r1, [r4, #12]
    21d4:	1c43      	adds	r3, r0, #1
    21d6:	d106      	bne.n	21e6 <__sflush_r+0x66>
    21d8:	682b      	ldr	r3, [r5, #0]
    21da:	2b1d      	cmp	r3, #29
    21dc:	d831      	bhi.n	2242 <__sflush_r+0xc2>
    21de:	4a2c      	ldr	r2, [pc, #176]	; (2290 <__sflush_r+0x110>)
    21e0:	40da      	lsrs	r2, r3
    21e2:	07d3      	lsls	r3, r2, #31
    21e4:	d52d      	bpl.n	2242 <__sflush_r+0xc2>
    21e6:	2300      	movs	r3, #0
    21e8:	6063      	str	r3, [r4, #4]
    21ea:	6923      	ldr	r3, [r4, #16]
    21ec:	6023      	str	r3, [r4, #0]
    21ee:	04cb      	lsls	r3, r1, #19
    21f0:	d505      	bpl.n	21fe <__sflush_r+0x7e>
    21f2:	1c43      	adds	r3, r0, #1
    21f4:	d102      	bne.n	21fc <__sflush_r+0x7c>
    21f6:	682b      	ldr	r3, [r5, #0]
    21f8:	2b00      	cmp	r3, #0
    21fa:	d100      	bne.n	21fe <__sflush_r+0x7e>
    21fc:	6560      	str	r0, [r4, #84]	; 0x54
    21fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2200:	602e      	str	r6, [r5, #0]
    2202:	2900      	cmp	r1, #0
    2204:	d0c8      	beq.n	2198 <__sflush_r+0x18>
    2206:	0023      	movs	r3, r4
    2208:	3344      	adds	r3, #68	; 0x44
    220a:	4299      	cmp	r1, r3
    220c:	d002      	beq.n	2214 <__sflush_r+0x94>
    220e:	0028      	movs	r0, r5
    2210:	f000 f9ba 	bl	2588 <_free_r>
    2214:	2000      	movs	r0, #0
    2216:	6360      	str	r0, [r4, #52]	; 0x34
    2218:	e7bf      	b.n	219a <__sflush_r+0x1a>
    221a:	2301      	movs	r3, #1
    221c:	6a21      	ldr	r1, [r4, #32]
    221e:	0028      	movs	r0, r5
    2220:	47b8      	blx	r7
    2222:	1c43      	adds	r3, r0, #1
    2224:	d1c5      	bne.n	21b2 <__sflush_r+0x32>
    2226:	682b      	ldr	r3, [r5, #0]
    2228:	2b00      	cmp	r3, #0
    222a:	d0c2      	beq.n	21b2 <__sflush_r+0x32>
    222c:	2b1d      	cmp	r3, #29
    222e:	d001      	beq.n	2234 <__sflush_r+0xb4>
    2230:	2b16      	cmp	r3, #22
    2232:	d101      	bne.n	2238 <__sflush_r+0xb8>
    2234:	602e      	str	r6, [r5, #0]
    2236:	e7af      	b.n	2198 <__sflush_r+0x18>
    2238:	2340      	movs	r3, #64	; 0x40
    223a:	89a2      	ldrh	r2, [r4, #12]
    223c:	4313      	orrs	r3, r2
    223e:	81a3      	strh	r3, [r4, #12]
    2240:	e7ab      	b.n	219a <__sflush_r+0x1a>
    2242:	2340      	movs	r3, #64	; 0x40
    2244:	430b      	orrs	r3, r1
    2246:	2001      	movs	r0, #1
    2248:	81a3      	strh	r3, [r4, #12]
    224a:	4240      	negs	r0, r0
    224c:	e7a5      	b.n	219a <__sflush_r+0x1a>
    224e:	690f      	ldr	r7, [r1, #16]
    2250:	2f00      	cmp	r7, #0
    2252:	d0a1      	beq.n	2198 <__sflush_r+0x18>
    2254:	680b      	ldr	r3, [r1, #0]
    2256:	600f      	str	r7, [r1, #0]
    2258:	1bdb      	subs	r3, r3, r7
    225a:	9301      	str	r3, [sp, #4]
    225c:	2300      	movs	r3, #0
    225e:	0792      	lsls	r2, r2, #30
    2260:	d100      	bne.n	2264 <__sflush_r+0xe4>
    2262:	694b      	ldr	r3, [r1, #20]
    2264:	60a3      	str	r3, [r4, #8]
    2266:	9b01      	ldr	r3, [sp, #4]
    2268:	2b00      	cmp	r3, #0
    226a:	dc00      	bgt.n	226e <__sflush_r+0xee>
    226c:	e794      	b.n	2198 <__sflush_r+0x18>
    226e:	9b01      	ldr	r3, [sp, #4]
    2270:	003a      	movs	r2, r7
    2272:	6a21      	ldr	r1, [r4, #32]
    2274:	0028      	movs	r0, r5
    2276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2278:	47b0      	blx	r6
    227a:	2800      	cmp	r0, #0
    227c:	dc03      	bgt.n	2286 <__sflush_r+0x106>
    227e:	2340      	movs	r3, #64	; 0x40
    2280:	89a2      	ldrh	r2, [r4, #12]
    2282:	4313      	orrs	r3, r2
    2284:	e7df      	b.n	2246 <__sflush_r+0xc6>
    2286:	9b01      	ldr	r3, [sp, #4]
    2288:	183f      	adds	r7, r7, r0
    228a:	1a1b      	subs	r3, r3, r0
    228c:	9301      	str	r3, [sp, #4]
    228e:	e7ea      	b.n	2266 <__sflush_r+0xe6>
    2290:	20400001 	.word	0x20400001

00002294 <_fflush_r>:
    2294:	690b      	ldr	r3, [r1, #16]
    2296:	b570      	push	{r4, r5, r6, lr}
    2298:	0005      	movs	r5, r0
    229a:	000c      	movs	r4, r1
    229c:	2b00      	cmp	r3, #0
    229e:	d101      	bne.n	22a4 <_fflush_r+0x10>
    22a0:	2000      	movs	r0, #0
    22a2:	bd70      	pop	{r4, r5, r6, pc}
    22a4:	2800      	cmp	r0, #0
    22a6:	d004      	beq.n	22b2 <_fflush_r+0x1e>
    22a8:	6983      	ldr	r3, [r0, #24]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d101      	bne.n	22b2 <_fflush_r+0x1e>
    22ae:	f000 f85f 	bl	2370 <__sinit>
    22b2:	4b0b      	ldr	r3, [pc, #44]	; (22e0 <_fflush_r+0x4c>)
    22b4:	429c      	cmp	r4, r3
    22b6:	d109      	bne.n	22cc <_fflush_r+0x38>
    22b8:	686c      	ldr	r4, [r5, #4]
    22ba:	220c      	movs	r2, #12
    22bc:	5ea3      	ldrsh	r3, [r4, r2]
    22be:	2b00      	cmp	r3, #0
    22c0:	d0ee      	beq.n	22a0 <_fflush_r+0xc>
    22c2:	0021      	movs	r1, r4
    22c4:	0028      	movs	r0, r5
    22c6:	f7ff ff5b 	bl	2180 <__sflush_r>
    22ca:	e7ea      	b.n	22a2 <_fflush_r+0xe>
    22cc:	4b05      	ldr	r3, [pc, #20]	; (22e4 <_fflush_r+0x50>)
    22ce:	429c      	cmp	r4, r3
    22d0:	d101      	bne.n	22d6 <_fflush_r+0x42>
    22d2:	68ac      	ldr	r4, [r5, #8]
    22d4:	e7f1      	b.n	22ba <_fflush_r+0x26>
    22d6:	4b04      	ldr	r3, [pc, #16]	; (22e8 <_fflush_r+0x54>)
    22d8:	429c      	cmp	r4, r3
    22da:	d1ee      	bne.n	22ba <_fflush_r+0x26>
    22dc:	68ec      	ldr	r4, [r5, #12]
    22de:	e7ec      	b.n	22ba <_fflush_r+0x26>
    22e0:	00003280 	.word	0x00003280
    22e4:	000032a0 	.word	0x000032a0
    22e8:	00003260 	.word	0x00003260

000022ec <_cleanup_r>:
    22ec:	b510      	push	{r4, lr}
    22ee:	4902      	ldr	r1, [pc, #8]	; (22f8 <_cleanup_r+0xc>)
    22f0:	f000 f8b2 	bl	2458 <_fwalk_reent>
    22f4:	bd10      	pop	{r4, pc}
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	00002295 	.word	0x00002295

000022fc <std.isra.0>:
    22fc:	2300      	movs	r3, #0
    22fe:	b510      	push	{r4, lr}
    2300:	0004      	movs	r4, r0
    2302:	6003      	str	r3, [r0, #0]
    2304:	6043      	str	r3, [r0, #4]
    2306:	6083      	str	r3, [r0, #8]
    2308:	8181      	strh	r1, [r0, #12]
    230a:	6643      	str	r3, [r0, #100]	; 0x64
    230c:	81c2      	strh	r2, [r0, #14]
    230e:	6103      	str	r3, [r0, #16]
    2310:	6143      	str	r3, [r0, #20]
    2312:	6183      	str	r3, [r0, #24]
    2314:	0019      	movs	r1, r3
    2316:	2208      	movs	r2, #8
    2318:	305c      	adds	r0, #92	; 0x5c
    231a:	f7ff fe2a 	bl	1f72 <memset>
    231e:	4b05      	ldr	r3, [pc, #20]	; (2334 <std.isra.0+0x38>)
    2320:	6224      	str	r4, [r4, #32]
    2322:	6263      	str	r3, [r4, #36]	; 0x24
    2324:	4b04      	ldr	r3, [pc, #16]	; (2338 <std.isra.0+0x3c>)
    2326:	62a3      	str	r3, [r4, #40]	; 0x28
    2328:	4b04      	ldr	r3, [pc, #16]	; (233c <std.isra.0+0x40>)
    232a:	62e3      	str	r3, [r4, #44]	; 0x2c
    232c:	4b04      	ldr	r3, [pc, #16]	; (2340 <std.isra.0+0x44>)
    232e:	6323      	str	r3, [r4, #48]	; 0x30
    2330:	bd10      	pop	{r4, pc}
    2332:	46c0      	nop			; (mov r8, r8)
    2334:	00002c95 	.word	0x00002c95
    2338:	00002cbd 	.word	0x00002cbd
    233c:	00002cf5 	.word	0x00002cf5
    2340:	00002d21 	.word	0x00002d21

00002344 <__sfmoreglue>:
    2344:	b570      	push	{r4, r5, r6, lr}
    2346:	2568      	movs	r5, #104	; 0x68
    2348:	1e4a      	subs	r2, r1, #1
    234a:	4355      	muls	r5, r2
    234c:	000e      	movs	r6, r1
    234e:	0029      	movs	r1, r5
    2350:	3174      	adds	r1, #116	; 0x74
    2352:	f000 f963 	bl	261c <_malloc_r>
    2356:	1e04      	subs	r4, r0, #0
    2358:	d008      	beq.n	236c <__sfmoreglue+0x28>
    235a:	2100      	movs	r1, #0
    235c:	002a      	movs	r2, r5
    235e:	6001      	str	r1, [r0, #0]
    2360:	6046      	str	r6, [r0, #4]
    2362:	300c      	adds	r0, #12
    2364:	60a0      	str	r0, [r4, #8]
    2366:	3268      	adds	r2, #104	; 0x68
    2368:	f7ff fe03 	bl	1f72 <memset>
    236c:	0020      	movs	r0, r4
    236e:	bd70      	pop	{r4, r5, r6, pc}

00002370 <__sinit>:
    2370:	6983      	ldr	r3, [r0, #24]
    2372:	b513      	push	{r0, r1, r4, lr}
    2374:	0004      	movs	r4, r0
    2376:	2b00      	cmp	r3, #0
    2378:	d128      	bne.n	23cc <__sinit+0x5c>
    237a:	6483      	str	r3, [r0, #72]	; 0x48
    237c:	64c3      	str	r3, [r0, #76]	; 0x4c
    237e:	6503      	str	r3, [r0, #80]	; 0x50
    2380:	4b13      	ldr	r3, [pc, #76]	; (23d0 <__sinit+0x60>)
    2382:	4a14      	ldr	r2, [pc, #80]	; (23d4 <__sinit+0x64>)
    2384:	681b      	ldr	r3, [r3, #0]
    2386:	6282      	str	r2, [r0, #40]	; 0x28
    2388:	9301      	str	r3, [sp, #4]
    238a:	4298      	cmp	r0, r3
    238c:	d101      	bne.n	2392 <__sinit+0x22>
    238e:	2301      	movs	r3, #1
    2390:	6183      	str	r3, [r0, #24]
    2392:	0020      	movs	r0, r4
    2394:	f000 f820 	bl	23d8 <__sfp>
    2398:	6060      	str	r0, [r4, #4]
    239a:	0020      	movs	r0, r4
    239c:	f000 f81c 	bl	23d8 <__sfp>
    23a0:	60a0      	str	r0, [r4, #8]
    23a2:	0020      	movs	r0, r4
    23a4:	f000 f818 	bl	23d8 <__sfp>
    23a8:	2200      	movs	r2, #0
    23aa:	60e0      	str	r0, [r4, #12]
    23ac:	2104      	movs	r1, #4
    23ae:	6860      	ldr	r0, [r4, #4]
    23b0:	f7ff ffa4 	bl	22fc <std.isra.0>
    23b4:	2201      	movs	r2, #1
    23b6:	2109      	movs	r1, #9
    23b8:	68a0      	ldr	r0, [r4, #8]
    23ba:	f7ff ff9f 	bl	22fc <std.isra.0>
    23be:	2202      	movs	r2, #2
    23c0:	2112      	movs	r1, #18
    23c2:	68e0      	ldr	r0, [r4, #12]
    23c4:	f7ff ff9a 	bl	22fc <std.isra.0>
    23c8:	2301      	movs	r3, #1
    23ca:	61a3      	str	r3, [r4, #24]
    23cc:	bd13      	pop	{r0, r1, r4, pc}
    23ce:	46c0      	nop			; (mov r8, r8)
    23d0:	0000325c 	.word	0x0000325c
    23d4:	000022ed 	.word	0x000022ed

000023d8 <__sfp>:
    23d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23da:	4b1e      	ldr	r3, [pc, #120]	; (2454 <__sfp+0x7c>)
    23dc:	0007      	movs	r7, r0
    23de:	681e      	ldr	r6, [r3, #0]
    23e0:	69b3      	ldr	r3, [r6, #24]
    23e2:	2b00      	cmp	r3, #0
    23e4:	d102      	bne.n	23ec <__sfp+0x14>
    23e6:	0030      	movs	r0, r6
    23e8:	f7ff ffc2 	bl	2370 <__sinit>
    23ec:	3648      	adds	r6, #72	; 0x48
    23ee:	68b4      	ldr	r4, [r6, #8]
    23f0:	6873      	ldr	r3, [r6, #4]
    23f2:	3b01      	subs	r3, #1
    23f4:	d504      	bpl.n	2400 <__sfp+0x28>
    23f6:	6833      	ldr	r3, [r6, #0]
    23f8:	2b00      	cmp	r3, #0
    23fa:	d007      	beq.n	240c <__sfp+0x34>
    23fc:	6836      	ldr	r6, [r6, #0]
    23fe:	e7f6      	b.n	23ee <__sfp+0x16>
    2400:	220c      	movs	r2, #12
    2402:	5ea5      	ldrsh	r5, [r4, r2]
    2404:	2d00      	cmp	r5, #0
    2406:	d00d      	beq.n	2424 <__sfp+0x4c>
    2408:	3468      	adds	r4, #104	; 0x68
    240a:	e7f2      	b.n	23f2 <__sfp+0x1a>
    240c:	2104      	movs	r1, #4
    240e:	0038      	movs	r0, r7
    2410:	f7ff ff98 	bl	2344 <__sfmoreglue>
    2414:	6030      	str	r0, [r6, #0]
    2416:	2800      	cmp	r0, #0
    2418:	d1f0      	bne.n	23fc <__sfp+0x24>
    241a:	230c      	movs	r3, #12
    241c:	0004      	movs	r4, r0
    241e:	603b      	str	r3, [r7, #0]
    2420:	0020      	movs	r0, r4
    2422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2424:	2301      	movs	r3, #1
    2426:	0020      	movs	r0, r4
    2428:	425b      	negs	r3, r3
    242a:	81e3      	strh	r3, [r4, #14]
    242c:	3302      	adds	r3, #2
    242e:	81a3      	strh	r3, [r4, #12]
    2430:	6665      	str	r5, [r4, #100]	; 0x64
    2432:	6025      	str	r5, [r4, #0]
    2434:	60a5      	str	r5, [r4, #8]
    2436:	6065      	str	r5, [r4, #4]
    2438:	6125      	str	r5, [r4, #16]
    243a:	6165      	str	r5, [r4, #20]
    243c:	61a5      	str	r5, [r4, #24]
    243e:	2208      	movs	r2, #8
    2440:	0029      	movs	r1, r5
    2442:	305c      	adds	r0, #92	; 0x5c
    2444:	f7ff fd95 	bl	1f72 <memset>
    2448:	6365      	str	r5, [r4, #52]	; 0x34
    244a:	63a5      	str	r5, [r4, #56]	; 0x38
    244c:	64a5      	str	r5, [r4, #72]	; 0x48
    244e:	64e5      	str	r5, [r4, #76]	; 0x4c
    2450:	e7e6      	b.n	2420 <__sfp+0x48>
    2452:	46c0      	nop			; (mov r8, r8)
    2454:	0000325c 	.word	0x0000325c

00002458 <_fwalk_reent>:
    2458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    245a:	0004      	movs	r4, r0
    245c:	0007      	movs	r7, r0
    245e:	2600      	movs	r6, #0
    2460:	9101      	str	r1, [sp, #4]
    2462:	3448      	adds	r4, #72	; 0x48
    2464:	2c00      	cmp	r4, #0
    2466:	d101      	bne.n	246c <_fwalk_reent+0x14>
    2468:	0030      	movs	r0, r6
    246a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    246c:	6863      	ldr	r3, [r4, #4]
    246e:	68a5      	ldr	r5, [r4, #8]
    2470:	9300      	str	r3, [sp, #0]
    2472:	9b00      	ldr	r3, [sp, #0]
    2474:	3b01      	subs	r3, #1
    2476:	9300      	str	r3, [sp, #0]
    2478:	d501      	bpl.n	247e <_fwalk_reent+0x26>
    247a:	6824      	ldr	r4, [r4, #0]
    247c:	e7f2      	b.n	2464 <_fwalk_reent+0xc>
    247e:	89ab      	ldrh	r3, [r5, #12]
    2480:	2b01      	cmp	r3, #1
    2482:	d908      	bls.n	2496 <_fwalk_reent+0x3e>
    2484:	220e      	movs	r2, #14
    2486:	5eab      	ldrsh	r3, [r5, r2]
    2488:	3301      	adds	r3, #1
    248a:	d004      	beq.n	2496 <_fwalk_reent+0x3e>
    248c:	0029      	movs	r1, r5
    248e:	0038      	movs	r0, r7
    2490:	9b01      	ldr	r3, [sp, #4]
    2492:	4798      	blx	r3
    2494:	4306      	orrs	r6, r0
    2496:	3568      	adds	r5, #104	; 0x68
    2498:	e7eb      	b.n	2472 <_fwalk_reent+0x1a>
	...

0000249c <__swhatbuf_r>:
    249c:	b570      	push	{r4, r5, r6, lr}
    249e:	000e      	movs	r6, r1
    24a0:	001d      	movs	r5, r3
    24a2:	230e      	movs	r3, #14
    24a4:	5ec9      	ldrsh	r1, [r1, r3]
    24a6:	b090      	sub	sp, #64	; 0x40
    24a8:	0014      	movs	r4, r2
    24aa:	2900      	cmp	r1, #0
    24ac:	da07      	bge.n	24be <__swhatbuf_r+0x22>
    24ae:	2300      	movs	r3, #0
    24b0:	602b      	str	r3, [r5, #0]
    24b2:	89b3      	ldrh	r3, [r6, #12]
    24b4:	061b      	lsls	r3, r3, #24
    24b6:	d411      	bmi.n	24dc <__swhatbuf_r+0x40>
    24b8:	2380      	movs	r3, #128	; 0x80
    24ba:	00db      	lsls	r3, r3, #3
    24bc:	e00f      	b.n	24de <__swhatbuf_r+0x42>
    24be:	aa01      	add	r2, sp, #4
    24c0:	f000 fd26 	bl	2f10 <_fstat_r>
    24c4:	2800      	cmp	r0, #0
    24c6:	dbf2      	blt.n	24ae <__swhatbuf_r+0x12>
    24c8:	22f0      	movs	r2, #240	; 0xf0
    24ca:	9b02      	ldr	r3, [sp, #8]
    24cc:	0212      	lsls	r2, r2, #8
    24ce:	4013      	ands	r3, r2
    24d0:	4a05      	ldr	r2, [pc, #20]	; (24e8 <__swhatbuf_r+0x4c>)
    24d2:	189b      	adds	r3, r3, r2
    24d4:	425a      	negs	r2, r3
    24d6:	4153      	adcs	r3, r2
    24d8:	602b      	str	r3, [r5, #0]
    24da:	e7ed      	b.n	24b8 <__swhatbuf_r+0x1c>
    24dc:	2340      	movs	r3, #64	; 0x40
    24de:	2000      	movs	r0, #0
    24e0:	6023      	str	r3, [r4, #0]
    24e2:	b010      	add	sp, #64	; 0x40
    24e4:	bd70      	pop	{r4, r5, r6, pc}
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	ffffe000 	.word	0xffffe000

000024ec <__smakebuf_r>:
    24ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    24ee:	2602      	movs	r6, #2
    24f0:	898b      	ldrh	r3, [r1, #12]
    24f2:	0005      	movs	r5, r0
    24f4:	000c      	movs	r4, r1
    24f6:	4233      	tst	r3, r6
    24f8:	d006      	beq.n	2508 <__smakebuf_r+0x1c>
    24fa:	0023      	movs	r3, r4
    24fc:	3347      	adds	r3, #71	; 0x47
    24fe:	6023      	str	r3, [r4, #0]
    2500:	6123      	str	r3, [r4, #16]
    2502:	2301      	movs	r3, #1
    2504:	6163      	str	r3, [r4, #20]
    2506:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2508:	ab01      	add	r3, sp, #4
    250a:	466a      	mov	r2, sp
    250c:	f7ff ffc6 	bl	249c <__swhatbuf_r>
    2510:	9900      	ldr	r1, [sp, #0]
    2512:	0007      	movs	r7, r0
    2514:	0028      	movs	r0, r5
    2516:	f000 f881 	bl	261c <_malloc_r>
    251a:	2800      	cmp	r0, #0
    251c:	d108      	bne.n	2530 <__smakebuf_r+0x44>
    251e:	220c      	movs	r2, #12
    2520:	5ea3      	ldrsh	r3, [r4, r2]
    2522:	059a      	lsls	r2, r3, #22
    2524:	d4ef      	bmi.n	2506 <__smakebuf_r+0x1a>
    2526:	2203      	movs	r2, #3
    2528:	4393      	bics	r3, r2
    252a:	431e      	orrs	r6, r3
    252c:	81a6      	strh	r6, [r4, #12]
    252e:	e7e4      	b.n	24fa <__smakebuf_r+0xe>
    2530:	4b0f      	ldr	r3, [pc, #60]	; (2570 <__smakebuf_r+0x84>)
    2532:	62ab      	str	r3, [r5, #40]	; 0x28
    2534:	2380      	movs	r3, #128	; 0x80
    2536:	89a2      	ldrh	r2, [r4, #12]
    2538:	6020      	str	r0, [r4, #0]
    253a:	4313      	orrs	r3, r2
    253c:	81a3      	strh	r3, [r4, #12]
    253e:	9b00      	ldr	r3, [sp, #0]
    2540:	6120      	str	r0, [r4, #16]
    2542:	6163      	str	r3, [r4, #20]
    2544:	9b01      	ldr	r3, [sp, #4]
    2546:	2b00      	cmp	r3, #0
    2548:	d00d      	beq.n	2566 <__smakebuf_r+0x7a>
    254a:	230e      	movs	r3, #14
    254c:	5ee1      	ldrsh	r1, [r4, r3]
    254e:	0028      	movs	r0, r5
    2550:	f000 fcf0 	bl	2f34 <_isatty_r>
    2554:	2800      	cmp	r0, #0
    2556:	d006      	beq.n	2566 <__smakebuf_r+0x7a>
    2558:	2203      	movs	r2, #3
    255a:	89a3      	ldrh	r3, [r4, #12]
    255c:	4393      	bics	r3, r2
    255e:	001a      	movs	r2, r3
    2560:	2301      	movs	r3, #1
    2562:	4313      	orrs	r3, r2
    2564:	81a3      	strh	r3, [r4, #12]
    2566:	89a0      	ldrh	r0, [r4, #12]
    2568:	4338      	orrs	r0, r7
    256a:	81a0      	strh	r0, [r4, #12]
    256c:	e7cb      	b.n	2506 <__smakebuf_r+0x1a>
    256e:	46c0      	nop			; (mov r8, r8)
    2570:	000022ed 	.word	0x000022ed

00002574 <malloc>:
    2574:	b510      	push	{r4, lr}
    2576:	4b03      	ldr	r3, [pc, #12]	; (2584 <malloc+0x10>)
    2578:	0001      	movs	r1, r0
    257a:	6818      	ldr	r0, [r3, #0]
    257c:	f000 f84e 	bl	261c <_malloc_r>
    2580:	bd10      	pop	{r4, pc}
    2582:	46c0      	nop			; (mov r8, r8)
    2584:	20000010 	.word	0x20000010

00002588 <_free_r>:
    2588:	b570      	push	{r4, r5, r6, lr}
    258a:	0005      	movs	r5, r0
    258c:	2900      	cmp	r1, #0
    258e:	d010      	beq.n	25b2 <_free_r+0x2a>
    2590:	1f0c      	subs	r4, r1, #4
    2592:	6823      	ldr	r3, [r4, #0]
    2594:	2b00      	cmp	r3, #0
    2596:	da00      	bge.n	259a <_free_r+0x12>
    2598:	18e4      	adds	r4, r4, r3
    259a:	0028      	movs	r0, r5
    259c:	f000 fcfb 	bl	2f96 <__malloc_lock>
    25a0:	4a1d      	ldr	r2, [pc, #116]	; (2618 <_free_r+0x90>)
    25a2:	6813      	ldr	r3, [r2, #0]
    25a4:	2b00      	cmp	r3, #0
    25a6:	d105      	bne.n	25b4 <_free_r+0x2c>
    25a8:	6063      	str	r3, [r4, #4]
    25aa:	6014      	str	r4, [r2, #0]
    25ac:	0028      	movs	r0, r5
    25ae:	f000 fcf3 	bl	2f98 <__malloc_unlock>
    25b2:	bd70      	pop	{r4, r5, r6, pc}
    25b4:	42a3      	cmp	r3, r4
    25b6:	d909      	bls.n	25cc <_free_r+0x44>
    25b8:	6821      	ldr	r1, [r4, #0]
    25ba:	1860      	adds	r0, r4, r1
    25bc:	4283      	cmp	r3, r0
    25be:	d1f3      	bne.n	25a8 <_free_r+0x20>
    25c0:	6818      	ldr	r0, [r3, #0]
    25c2:	685b      	ldr	r3, [r3, #4]
    25c4:	1841      	adds	r1, r0, r1
    25c6:	6021      	str	r1, [r4, #0]
    25c8:	e7ee      	b.n	25a8 <_free_r+0x20>
    25ca:	0013      	movs	r3, r2
    25cc:	685a      	ldr	r2, [r3, #4]
    25ce:	2a00      	cmp	r2, #0
    25d0:	d001      	beq.n	25d6 <_free_r+0x4e>
    25d2:	42a2      	cmp	r2, r4
    25d4:	d9f9      	bls.n	25ca <_free_r+0x42>
    25d6:	6819      	ldr	r1, [r3, #0]
    25d8:	1858      	adds	r0, r3, r1
    25da:	42a0      	cmp	r0, r4
    25dc:	d10b      	bne.n	25f6 <_free_r+0x6e>
    25de:	6820      	ldr	r0, [r4, #0]
    25e0:	1809      	adds	r1, r1, r0
    25e2:	1858      	adds	r0, r3, r1
    25e4:	6019      	str	r1, [r3, #0]
    25e6:	4282      	cmp	r2, r0
    25e8:	d1e0      	bne.n	25ac <_free_r+0x24>
    25ea:	6810      	ldr	r0, [r2, #0]
    25ec:	6852      	ldr	r2, [r2, #4]
    25ee:	1841      	adds	r1, r0, r1
    25f0:	6019      	str	r1, [r3, #0]
    25f2:	605a      	str	r2, [r3, #4]
    25f4:	e7da      	b.n	25ac <_free_r+0x24>
    25f6:	42a0      	cmp	r0, r4
    25f8:	d902      	bls.n	2600 <_free_r+0x78>
    25fa:	230c      	movs	r3, #12
    25fc:	602b      	str	r3, [r5, #0]
    25fe:	e7d5      	b.n	25ac <_free_r+0x24>
    2600:	6821      	ldr	r1, [r4, #0]
    2602:	1860      	adds	r0, r4, r1
    2604:	4282      	cmp	r2, r0
    2606:	d103      	bne.n	2610 <_free_r+0x88>
    2608:	6810      	ldr	r0, [r2, #0]
    260a:	6852      	ldr	r2, [r2, #4]
    260c:	1841      	adds	r1, r0, r1
    260e:	6021      	str	r1, [r4, #0]
    2610:	6062      	str	r2, [r4, #4]
    2612:	605c      	str	r4, [r3, #4]
    2614:	e7ca      	b.n	25ac <_free_r+0x24>
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	200000d0 	.word	0x200000d0

0000261c <_malloc_r>:
    261c:	2303      	movs	r3, #3
    261e:	b570      	push	{r4, r5, r6, lr}
    2620:	1ccd      	adds	r5, r1, #3
    2622:	439d      	bics	r5, r3
    2624:	3508      	adds	r5, #8
    2626:	0006      	movs	r6, r0
    2628:	2d0c      	cmp	r5, #12
    262a:	d21e      	bcs.n	266a <_malloc_r+0x4e>
    262c:	250c      	movs	r5, #12
    262e:	42a9      	cmp	r1, r5
    2630:	d81d      	bhi.n	266e <_malloc_r+0x52>
    2632:	0030      	movs	r0, r6
    2634:	f000 fcaf 	bl	2f96 <__malloc_lock>
    2638:	4a25      	ldr	r2, [pc, #148]	; (26d0 <_malloc_r+0xb4>)
    263a:	6814      	ldr	r4, [r2, #0]
    263c:	0021      	movs	r1, r4
    263e:	2900      	cmp	r1, #0
    2640:	d119      	bne.n	2676 <_malloc_r+0x5a>
    2642:	4c24      	ldr	r4, [pc, #144]	; (26d4 <_malloc_r+0xb8>)
    2644:	6823      	ldr	r3, [r4, #0]
    2646:	2b00      	cmp	r3, #0
    2648:	d103      	bne.n	2652 <_malloc_r+0x36>
    264a:	0030      	movs	r0, r6
    264c:	f000 fb10 	bl	2c70 <_sbrk_r>
    2650:	6020      	str	r0, [r4, #0]
    2652:	0029      	movs	r1, r5
    2654:	0030      	movs	r0, r6
    2656:	f000 fb0b 	bl	2c70 <_sbrk_r>
    265a:	1c43      	adds	r3, r0, #1
    265c:	d12c      	bne.n	26b8 <_malloc_r+0x9c>
    265e:	230c      	movs	r3, #12
    2660:	0030      	movs	r0, r6
    2662:	6033      	str	r3, [r6, #0]
    2664:	f000 fc98 	bl	2f98 <__malloc_unlock>
    2668:	e003      	b.n	2672 <_malloc_r+0x56>
    266a:	2d00      	cmp	r5, #0
    266c:	dadf      	bge.n	262e <_malloc_r+0x12>
    266e:	230c      	movs	r3, #12
    2670:	6033      	str	r3, [r6, #0]
    2672:	2000      	movs	r0, #0
    2674:	bd70      	pop	{r4, r5, r6, pc}
    2676:	680b      	ldr	r3, [r1, #0]
    2678:	1b5b      	subs	r3, r3, r5
    267a:	d41a      	bmi.n	26b2 <_malloc_r+0x96>
    267c:	2b0b      	cmp	r3, #11
    267e:	d903      	bls.n	2688 <_malloc_r+0x6c>
    2680:	600b      	str	r3, [r1, #0]
    2682:	18cc      	adds	r4, r1, r3
    2684:	6025      	str	r5, [r4, #0]
    2686:	e003      	b.n	2690 <_malloc_r+0x74>
    2688:	428c      	cmp	r4, r1
    268a:	d10e      	bne.n	26aa <_malloc_r+0x8e>
    268c:	6863      	ldr	r3, [r4, #4]
    268e:	6013      	str	r3, [r2, #0]
    2690:	0030      	movs	r0, r6
    2692:	f000 fc81 	bl	2f98 <__malloc_unlock>
    2696:	0020      	movs	r0, r4
    2698:	2207      	movs	r2, #7
    269a:	300b      	adds	r0, #11
    269c:	1d23      	adds	r3, r4, #4
    269e:	4390      	bics	r0, r2
    26a0:	1ac3      	subs	r3, r0, r3
    26a2:	d0e7      	beq.n	2674 <_malloc_r+0x58>
    26a4:	425a      	negs	r2, r3
    26a6:	50e2      	str	r2, [r4, r3]
    26a8:	e7e4      	b.n	2674 <_malloc_r+0x58>
    26aa:	684b      	ldr	r3, [r1, #4]
    26ac:	6063      	str	r3, [r4, #4]
    26ae:	000c      	movs	r4, r1
    26b0:	e7ee      	b.n	2690 <_malloc_r+0x74>
    26b2:	000c      	movs	r4, r1
    26b4:	6849      	ldr	r1, [r1, #4]
    26b6:	e7c2      	b.n	263e <_malloc_r+0x22>
    26b8:	2303      	movs	r3, #3
    26ba:	1cc4      	adds	r4, r0, #3
    26bc:	439c      	bics	r4, r3
    26be:	42a0      	cmp	r0, r4
    26c0:	d0e0      	beq.n	2684 <_malloc_r+0x68>
    26c2:	1a21      	subs	r1, r4, r0
    26c4:	0030      	movs	r0, r6
    26c6:	f000 fad3 	bl	2c70 <_sbrk_r>
    26ca:	1c43      	adds	r3, r0, #1
    26cc:	d1da      	bne.n	2684 <_malloc_r+0x68>
    26ce:	e7c6      	b.n	265e <_malloc_r+0x42>
    26d0:	200000d0 	.word	0x200000d0
    26d4:	200000d4 	.word	0x200000d4

000026d8 <__sfputc_r>:
    26d8:	6893      	ldr	r3, [r2, #8]
    26da:	b510      	push	{r4, lr}
    26dc:	3b01      	subs	r3, #1
    26de:	6093      	str	r3, [r2, #8]
    26e0:	2b00      	cmp	r3, #0
    26e2:	da05      	bge.n	26f0 <__sfputc_r+0x18>
    26e4:	6994      	ldr	r4, [r2, #24]
    26e6:	42a3      	cmp	r3, r4
    26e8:	db08      	blt.n	26fc <__sfputc_r+0x24>
    26ea:	b2cb      	uxtb	r3, r1
    26ec:	2b0a      	cmp	r3, #10
    26ee:	d005      	beq.n	26fc <__sfputc_r+0x24>
    26f0:	6813      	ldr	r3, [r2, #0]
    26f2:	1c58      	adds	r0, r3, #1
    26f4:	6010      	str	r0, [r2, #0]
    26f6:	7019      	strb	r1, [r3, #0]
    26f8:	b2c8      	uxtb	r0, r1
    26fa:	bd10      	pop	{r4, pc}
    26fc:	f000 fb16 	bl	2d2c <__swbuf_r>
    2700:	e7fb      	b.n	26fa <__sfputc_r+0x22>

00002702 <__sfputs_r>:
    2702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2704:	0006      	movs	r6, r0
    2706:	000f      	movs	r7, r1
    2708:	0014      	movs	r4, r2
    270a:	18d5      	adds	r5, r2, r3
    270c:	42ac      	cmp	r4, r5
    270e:	d101      	bne.n	2714 <__sfputs_r+0x12>
    2710:	2000      	movs	r0, #0
    2712:	e007      	b.n	2724 <__sfputs_r+0x22>
    2714:	7821      	ldrb	r1, [r4, #0]
    2716:	003a      	movs	r2, r7
    2718:	0030      	movs	r0, r6
    271a:	f7ff ffdd 	bl	26d8 <__sfputc_r>
    271e:	3401      	adds	r4, #1
    2720:	1c43      	adds	r3, r0, #1
    2722:	d1f3      	bne.n	270c <__sfputs_r+0xa>
    2724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002728 <_vfiprintf_r>:
    2728:	b5f0      	push	{r4, r5, r6, r7, lr}
    272a:	b09f      	sub	sp, #124	; 0x7c
    272c:	0006      	movs	r6, r0
    272e:	000f      	movs	r7, r1
    2730:	0014      	movs	r4, r2
    2732:	9305      	str	r3, [sp, #20]
    2734:	2800      	cmp	r0, #0
    2736:	d004      	beq.n	2742 <_vfiprintf_r+0x1a>
    2738:	6983      	ldr	r3, [r0, #24]
    273a:	2b00      	cmp	r3, #0
    273c:	d101      	bne.n	2742 <_vfiprintf_r+0x1a>
    273e:	f7ff fe17 	bl	2370 <__sinit>
    2742:	4b7f      	ldr	r3, [pc, #508]	; (2940 <_vfiprintf_r+0x218>)
    2744:	429f      	cmp	r7, r3
    2746:	d15c      	bne.n	2802 <_vfiprintf_r+0xda>
    2748:	6877      	ldr	r7, [r6, #4]
    274a:	89bb      	ldrh	r3, [r7, #12]
    274c:	071b      	lsls	r3, r3, #28
    274e:	d562      	bpl.n	2816 <_vfiprintf_r+0xee>
    2750:	693b      	ldr	r3, [r7, #16]
    2752:	2b00      	cmp	r3, #0
    2754:	d05f      	beq.n	2816 <_vfiprintf_r+0xee>
    2756:	2300      	movs	r3, #0
    2758:	ad06      	add	r5, sp, #24
    275a:	616b      	str	r3, [r5, #20]
    275c:	3320      	adds	r3, #32
    275e:	766b      	strb	r3, [r5, #25]
    2760:	3310      	adds	r3, #16
    2762:	76ab      	strb	r3, [r5, #26]
    2764:	9402      	str	r4, [sp, #8]
    2766:	9c02      	ldr	r4, [sp, #8]
    2768:	7823      	ldrb	r3, [r4, #0]
    276a:	2b00      	cmp	r3, #0
    276c:	d15d      	bne.n	282a <_vfiprintf_r+0x102>
    276e:	9b02      	ldr	r3, [sp, #8]
    2770:	1ae3      	subs	r3, r4, r3
    2772:	9304      	str	r3, [sp, #16]
    2774:	d00d      	beq.n	2792 <_vfiprintf_r+0x6a>
    2776:	9b04      	ldr	r3, [sp, #16]
    2778:	9a02      	ldr	r2, [sp, #8]
    277a:	0039      	movs	r1, r7
    277c:	0030      	movs	r0, r6
    277e:	f7ff ffc0 	bl	2702 <__sfputs_r>
    2782:	1c43      	adds	r3, r0, #1
    2784:	d100      	bne.n	2788 <_vfiprintf_r+0x60>
    2786:	e0cc      	b.n	2922 <_vfiprintf_r+0x1fa>
    2788:	696a      	ldr	r2, [r5, #20]
    278a:	9b04      	ldr	r3, [sp, #16]
    278c:	4694      	mov	ip, r2
    278e:	4463      	add	r3, ip
    2790:	616b      	str	r3, [r5, #20]
    2792:	7823      	ldrb	r3, [r4, #0]
    2794:	2b00      	cmp	r3, #0
    2796:	d100      	bne.n	279a <_vfiprintf_r+0x72>
    2798:	e0c3      	b.n	2922 <_vfiprintf_r+0x1fa>
    279a:	2201      	movs	r2, #1
    279c:	2300      	movs	r3, #0
    279e:	4252      	negs	r2, r2
    27a0:	606a      	str	r2, [r5, #4]
    27a2:	a902      	add	r1, sp, #8
    27a4:	3254      	adds	r2, #84	; 0x54
    27a6:	1852      	adds	r2, r2, r1
    27a8:	3401      	adds	r4, #1
    27aa:	602b      	str	r3, [r5, #0]
    27ac:	60eb      	str	r3, [r5, #12]
    27ae:	60ab      	str	r3, [r5, #8]
    27b0:	7013      	strb	r3, [r2, #0]
    27b2:	65ab      	str	r3, [r5, #88]	; 0x58
    27b4:	7821      	ldrb	r1, [r4, #0]
    27b6:	2205      	movs	r2, #5
    27b8:	4862      	ldr	r0, [pc, #392]	; (2944 <_vfiprintf_r+0x21c>)
    27ba:	f000 fbe1 	bl	2f80 <memchr>
    27be:	1c63      	adds	r3, r4, #1
    27c0:	469c      	mov	ip, r3
    27c2:	2800      	cmp	r0, #0
    27c4:	d135      	bne.n	2832 <_vfiprintf_r+0x10a>
    27c6:	6829      	ldr	r1, [r5, #0]
    27c8:	06cb      	lsls	r3, r1, #27
    27ca:	d504      	bpl.n	27d6 <_vfiprintf_r+0xae>
    27cc:	2353      	movs	r3, #83	; 0x53
    27ce:	aa02      	add	r2, sp, #8
    27d0:	3020      	adds	r0, #32
    27d2:	189b      	adds	r3, r3, r2
    27d4:	7018      	strb	r0, [r3, #0]
    27d6:	070b      	lsls	r3, r1, #28
    27d8:	d504      	bpl.n	27e4 <_vfiprintf_r+0xbc>
    27da:	2353      	movs	r3, #83	; 0x53
    27dc:	202b      	movs	r0, #43	; 0x2b
    27de:	aa02      	add	r2, sp, #8
    27e0:	189b      	adds	r3, r3, r2
    27e2:	7018      	strb	r0, [r3, #0]
    27e4:	7823      	ldrb	r3, [r4, #0]
    27e6:	2b2a      	cmp	r3, #42	; 0x2a
    27e8:	d02c      	beq.n	2844 <_vfiprintf_r+0x11c>
    27ea:	2000      	movs	r0, #0
    27ec:	210a      	movs	r1, #10
    27ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27f0:	7822      	ldrb	r2, [r4, #0]
    27f2:	3a30      	subs	r2, #48	; 0x30
    27f4:	2a09      	cmp	r2, #9
    27f6:	d800      	bhi.n	27fa <_vfiprintf_r+0xd2>
    27f8:	e06b      	b.n	28d2 <_vfiprintf_r+0x1aa>
    27fa:	2800      	cmp	r0, #0
    27fc:	d02a      	beq.n	2854 <_vfiprintf_r+0x12c>
    27fe:	9309      	str	r3, [sp, #36]	; 0x24
    2800:	e028      	b.n	2854 <_vfiprintf_r+0x12c>
    2802:	4b51      	ldr	r3, [pc, #324]	; (2948 <_vfiprintf_r+0x220>)
    2804:	429f      	cmp	r7, r3
    2806:	d101      	bne.n	280c <_vfiprintf_r+0xe4>
    2808:	68b7      	ldr	r7, [r6, #8]
    280a:	e79e      	b.n	274a <_vfiprintf_r+0x22>
    280c:	4b4f      	ldr	r3, [pc, #316]	; (294c <_vfiprintf_r+0x224>)
    280e:	429f      	cmp	r7, r3
    2810:	d19b      	bne.n	274a <_vfiprintf_r+0x22>
    2812:	68f7      	ldr	r7, [r6, #12]
    2814:	e799      	b.n	274a <_vfiprintf_r+0x22>
    2816:	0039      	movs	r1, r7
    2818:	0030      	movs	r0, r6
    281a:	f000 faf1 	bl	2e00 <__swsetup_r>
    281e:	2800      	cmp	r0, #0
    2820:	d099      	beq.n	2756 <_vfiprintf_r+0x2e>
    2822:	2001      	movs	r0, #1
    2824:	4240      	negs	r0, r0
    2826:	b01f      	add	sp, #124	; 0x7c
    2828:	bdf0      	pop	{r4, r5, r6, r7, pc}
    282a:	2b25      	cmp	r3, #37	; 0x25
    282c:	d09f      	beq.n	276e <_vfiprintf_r+0x46>
    282e:	3401      	adds	r4, #1
    2830:	e79a      	b.n	2768 <_vfiprintf_r+0x40>
    2832:	4b44      	ldr	r3, [pc, #272]	; (2944 <_vfiprintf_r+0x21c>)
    2834:	6829      	ldr	r1, [r5, #0]
    2836:	1ac0      	subs	r0, r0, r3
    2838:	2301      	movs	r3, #1
    283a:	4083      	lsls	r3, r0
    283c:	430b      	orrs	r3, r1
    283e:	602b      	str	r3, [r5, #0]
    2840:	4664      	mov	r4, ip
    2842:	e7b7      	b.n	27b4 <_vfiprintf_r+0x8c>
    2844:	9b05      	ldr	r3, [sp, #20]
    2846:	1d18      	adds	r0, r3, #4
    2848:	681b      	ldr	r3, [r3, #0]
    284a:	9005      	str	r0, [sp, #20]
    284c:	2b00      	cmp	r3, #0
    284e:	db3a      	blt.n	28c6 <_vfiprintf_r+0x19e>
    2850:	9309      	str	r3, [sp, #36]	; 0x24
    2852:	4664      	mov	r4, ip
    2854:	7823      	ldrb	r3, [r4, #0]
    2856:	2b2e      	cmp	r3, #46	; 0x2e
    2858:	d10b      	bne.n	2872 <_vfiprintf_r+0x14a>
    285a:	7863      	ldrb	r3, [r4, #1]
    285c:	1c62      	adds	r2, r4, #1
    285e:	2b2a      	cmp	r3, #42	; 0x2a
    2860:	d13f      	bne.n	28e2 <_vfiprintf_r+0x1ba>
    2862:	9b05      	ldr	r3, [sp, #20]
    2864:	3402      	adds	r4, #2
    2866:	1d1a      	adds	r2, r3, #4
    2868:	681b      	ldr	r3, [r3, #0]
    286a:	9205      	str	r2, [sp, #20]
    286c:	2b00      	cmp	r3, #0
    286e:	db35      	blt.n	28dc <_vfiprintf_r+0x1b4>
    2870:	9307      	str	r3, [sp, #28]
    2872:	7821      	ldrb	r1, [r4, #0]
    2874:	2203      	movs	r2, #3
    2876:	4836      	ldr	r0, [pc, #216]	; (2950 <_vfiprintf_r+0x228>)
    2878:	f000 fb82 	bl	2f80 <memchr>
    287c:	2800      	cmp	r0, #0
    287e:	d007      	beq.n	2890 <_vfiprintf_r+0x168>
    2880:	4b33      	ldr	r3, [pc, #204]	; (2950 <_vfiprintf_r+0x228>)
    2882:	682a      	ldr	r2, [r5, #0]
    2884:	1ac0      	subs	r0, r0, r3
    2886:	2340      	movs	r3, #64	; 0x40
    2888:	4083      	lsls	r3, r0
    288a:	4313      	orrs	r3, r2
    288c:	602b      	str	r3, [r5, #0]
    288e:	3401      	adds	r4, #1
    2890:	7821      	ldrb	r1, [r4, #0]
    2892:	1c63      	adds	r3, r4, #1
    2894:	2206      	movs	r2, #6
    2896:	482f      	ldr	r0, [pc, #188]	; (2954 <_vfiprintf_r+0x22c>)
    2898:	9302      	str	r3, [sp, #8]
    289a:	7629      	strb	r1, [r5, #24]
    289c:	f000 fb70 	bl	2f80 <memchr>
    28a0:	2800      	cmp	r0, #0
    28a2:	d044      	beq.n	292e <_vfiprintf_r+0x206>
    28a4:	4b2c      	ldr	r3, [pc, #176]	; (2958 <_vfiprintf_r+0x230>)
    28a6:	2b00      	cmp	r3, #0
    28a8:	d12f      	bne.n	290a <_vfiprintf_r+0x1e2>
    28aa:	6829      	ldr	r1, [r5, #0]
    28ac:	9b05      	ldr	r3, [sp, #20]
    28ae:	2207      	movs	r2, #7
    28b0:	05c9      	lsls	r1, r1, #23
    28b2:	d528      	bpl.n	2906 <_vfiprintf_r+0x1de>
    28b4:	189b      	adds	r3, r3, r2
    28b6:	4393      	bics	r3, r2
    28b8:	3308      	adds	r3, #8
    28ba:	9305      	str	r3, [sp, #20]
    28bc:	696b      	ldr	r3, [r5, #20]
    28be:	9a03      	ldr	r2, [sp, #12]
    28c0:	189b      	adds	r3, r3, r2
    28c2:	616b      	str	r3, [r5, #20]
    28c4:	e74f      	b.n	2766 <_vfiprintf_r+0x3e>
    28c6:	425b      	negs	r3, r3
    28c8:	60eb      	str	r3, [r5, #12]
    28ca:	2302      	movs	r3, #2
    28cc:	430b      	orrs	r3, r1
    28ce:	602b      	str	r3, [r5, #0]
    28d0:	e7bf      	b.n	2852 <_vfiprintf_r+0x12a>
    28d2:	434b      	muls	r3, r1
    28d4:	3401      	adds	r4, #1
    28d6:	189b      	adds	r3, r3, r2
    28d8:	2001      	movs	r0, #1
    28da:	e789      	b.n	27f0 <_vfiprintf_r+0xc8>
    28dc:	2301      	movs	r3, #1
    28de:	425b      	negs	r3, r3
    28e0:	e7c6      	b.n	2870 <_vfiprintf_r+0x148>
    28e2:	2300      	movs	r3, #0
    28e4:	0014      	movs	r4, r2
    28e6:	200a      	movs	r0, #10
    28e8:	001a      	movs	r2, r3
    28ea:	606b      	str	r3, [r5, #4]
    28ec:	7821      	ldrb	r1, [r4, #0]
    28ee:	3930      	subs	r1, #48	; 0x30
    28f0:	2909      	cmp	r1, #9
    28f2:	d903      	bls.n	28fc <_vfiprintf_r+0x1d4>
    28f4:	2b00      	cmp	r3, #0
    28f6:	d0bc      	beq.n	2872 <_vfiprintf_r+0x14a>
    28f8:	9207      	str	r2, [sp, #28]
    28fa:	e7ba      	b.n	2872 <_vfiprintf_r+0x14a>
    28fc:	4342      	muls	r2, r0
    28fe:	3401      	adds	r4, #1
    2900:	1852      	adds	r2, r2, r1
    2902:	2301      	movs	r3, #1
    2904:	e7f2      	b.n	28ec <_vfiprintf_r+0x1c4>
    2906:	3307      	adds	r3, #7
    2908:	e7d5      	b.n	28b6 <_vfiprintf_r+0x18e>
    290a:	ab05      	add	r3, sp, #20
    290c:	9300      	str	r3, [sp, #0]
    290e:	003a      	movs	r2, r7
    2910:	4b12      	ldr	r3, [pc, #72]	; (295c <_vfiprintf_r+0x234>)
    2912:	0029      	movs	r1, r5
    2914:	0030      	movs	r0, r6
    2916:	e000      	b.n	291a <_vfiprintf_r+0x1f2>
    2918:	bf00      	nop
    291a:	9003      	str	r0, [sp, #12]
    291c:	9b03      	ldr	r3, [sp, #12]
    291e:	3301      	adds	r3, #1
    2920:	d1cc      	bne.n	28bc <_vfiprintf_r+0x194>
    2922:	89bb      	ldrh	r3, [r7, #12]
    2924:	065b      	lsls	r3, r3, #25
    2926:	d500      	bpl.n	292a <_vfiprintf_r+0x202>
    2928:	e77b      	b.n	2822 <_vfiprintf_r+0xfa>
    292a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    292c:	e77b      	b.n	2826 <_vfiprintf_r+0xfe>
    292e:	ab05      	add	r3, sp, #20
    2930:	9300      	str	r3, [sp, #0]
    2932:	003a      	movs	r2, r7
    2934:	4b09      	ldr	r3, [pc, #36]	; (295c <_vfiprintf_r+0x234>)
    2936:	0029      	movs	r1, r5
    2938:	0030      	movs	r0, r6
    293a:	f000 f87f 	bl	2a3c <_printf_i>
    293e:	e7ec      	b.n	291a <_vfiprintf_r+0x1f2>
    2940:	00003280 	.word	0x00003280
    2944:	000032c0 	.word	0x000032c0
    2948:	000032a0 	.word	0x000032a0
    294c:	00003260 	.word	0x00003260
    2950:	000032c6 	.word	0x000032c6
    2954:	000032ca 	.word	0x000032ca
    2958:	00000000 	.word	0x00000000
    295c:	00002703 	.word	0x00002703

00002960 <_printf_common>:
    2960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2962:	0015      	movs	r5, r2
    2964:	9301      	str	r3, [sp, #4]
    2966:	688a      	ldr	r2, [r1, #8]
    2968:	690b      	ldr	r3, [r1, #16]
    296a:	9000      	str	r0, [sp, #0]
    296c:	000c      	movs	r4, r1
    296e:	4293      	cmp	r3, r2
    2970:	da00      	bge.n	2974 <_printf_common+0x14>
    2972:	0013      	movs	r3, r2
    2974:	0022      	movs	r2, r4
    2976:	602b      	str	r3, [r5, #0]
    2978:	3243      	adds	r2, #67	; 0x43
    297a:	7812      	ldrb	r2, [r2, #0]
    297c:	2a00      	cmp	r2, #0
    297e:	d001      	beq.n	2984 <_printf_common+0x24>
    2980:	3301      	adds	r3, #1
    2982:	602b      	str	r3, [r5, #0]
    2984:	6823      	ldr	r3, [r4, #0]
    2986:	069b      	lsls	r3, r3, #26
    2988:	d502      	bpl.n	2990 <_printf_common+0x30>
    298a:	682b      	ldr	r3, [r5, #0]
    298c:	3302      	adds	r3, #2
    298e:	602b      	str	r3, [r5, #0]
    2990:	2706      	movs	r7, #6
    2992:	6823      	ldr	r3, [r4, #0]
    2994:	401f      	ands	r7, r3
    2996:	d027      	beq.n	29e8 <_printf_common+0x88>
    2998:	0023      	movs	r3, r4
    299a:	3343      	adds	r3, #67	; 0x43
    299c:	781b      	ldrb	r3, [r3, #0]
    299e:	1e5a      	subs	r2, r3, #1
    29a0:	4193      	sbcs	r3, r2
    29a2:	6822      	ldr	r2, [r4, #0]
    29a4:	0692      	lsls	r2, r2, #26
    29a6:	d430      	bmi.n	2a0a <_printf_common+0xaa>
    29a8:	0022      	movs	r2, r4
    29aa:	9901      	ldr	r1, [sp, #4]
    29ac:	3243      	adds	r2, #67	; 0x43
    29ae:	9800      	ldr	r0, [sp, #0]
    29b0:	9e08      	ldr	r6, [sp, #32]
    29b2:	47b0      	blx	r6
    29b4:	1c43      	adds	r3, r0, #1
    29b6:	d025      	beq.n	2a04 <_printf_common+0xa4>
    29b8:	2306      	movs	r3, #6
    29ba:	6820      	ldr	r0, [r4, #0]
    29bc:	682a      	ldr	r2, [r5, #0]
    29be:	68e1      	ldr	r1, [r4, #12]
    29c0:	4003      	ands	r3, r0
    29c2:	2500      	movs	r5, #0
    29c4:	2b04      	cmp	r3, #4
    29c6:	d103      	bne.n	29d0 <_printf_common+0x70>
    29c8:	1a8d      	subs	r5, r1, r2
    29ca:	43eb      	mvns	r3, r5
    29cc:	17db      	asrs	r3, r3, #31
    29ce:	401d      	ands	r5, r3
    29d0:	68a3      	ldr	r3, [r4, #8]
    29d2:	6922      	ldr	r2, [r4, #16]
    29d4:	4293      	cmp	r3, r2
    29d6:	dd01      	ble.n	29dc <_printf_common+0x7c>
    29d8:	1a9b      	subs	r3, r3, r2
    29da:	18ed      	adds	r5, r5, r3
    29dc:	2700      	movs	r7, #0
    29de:	42bd      	cmp	r5, r7
    29e0:	d120      	bne.n	2a24 <_printf_common+0xc4>
    29e2:	2000      	movs	r0, #0
    29e4:	e010      	b.n	2a08 <_printf_common+0xa8>
    29e6:	3701      	adds	r7, #1
    29e8:	68e3      	ldr	r3, [r4, #12]
    29ea:	682a      	ldr	r2, [r5, #0]
    29ec:	1a9b      	subs	r3, r3, r2
    29ee:	429f      	cmp	r7, r3
    29f0:	dad2      	bge.n	2998 <_printf_common+0x38>
    29f2:	0022      	movs	r2, r4
    29f4:	2301      	movs	r3, #1
    29f6:	3219      	adds	r2, #25
    29f8:	9901      	ldr	r1, [sp, #4]
    29fa:	9800      	ldr	r0, [sp, #0]
    29fc:	9e08      	ldr	r6, [sp, #32]
    29fe:	47b0      	blx	r6
    2a00:	1c43      	adds	r3, r0, #1
    2a02:	d1f0      	bne.n	29e6 <_printf_common+0x86>
    2a04:	2001      	movs	r0, #1
    2a06:	4240      	negs	r0, r0
    2a08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2a0a:	2030      	movs	r0, #48	; 0x30
    2a0c:	18e1      	adds	r1, r4, r3
    2a0e:	3143      	adds	r1, #67	; 0x43
    2a10:	7008      	strb	r0, [r1, #0]
    2a12:	0021      	movs	r1, r4
    2a14:	1c5a      	adds	r2, r3, #1
    2a16:	3145      	adds	r1, #69	; 0x45
    2a18:	7809      	ldrb	r1, [r1, #0]
    2a1a:	18a2      	adds	r2, r4, r2
    2a1c:	3243      	adds	r2, #67	; 0x43
    2a1e:	3302      	adds	r3, #2
    2a20:	7011      	strb	r1, [r2, #0]
    2a22:	e7c1      	b.n	29a8 <_printf_common+0x48>
    2a24:	0022      	movs	r2, r4
    2a26:	2301      	movs	r3, #1
    2a28:	321a      	adds	r2, #26
    2a2a:	9901      	ldr	r1, [sp, #4]
    2a2c:	9800      	ldr	r0, [sp, #0]
    2a2e:	9e08      	ldr	r6, [sp, #32]
    2a30:	47b0      	blx	r6
    2a32:	1c43      	adds	r3, r0, #1
    2a34:	d0e6      	beq.n	2a04 <_printf_common+0xa4>
    2a36:	3701      	adds	r7, #1
    2a38:	e7d1      	b.n	29de <_printf_common+0x7e>
	...

00002a3c <_printf_i>:
    2a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a3e:	b08b      	sub	sp, #44	; 0x2c
    2a40:	9206      	str	r2, [sp, #24]
    2a42:	000a      	movs	r2, r1
    2a44:	3243      	adds	r2, #67	; 0x43
    2a46:	9307      	str	r3, [sp, #28]
    2a48:	9005      	str	r0, [sp, #20]
    2a4a:	9204      	str	r2, [sp, #16]
    2a4c:	7e0a      	ldrb	r2, [r1, #24]
    2a4e:	000c      	movs	r4, r1
    2a50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2a52:	2a6e      	cmp	r2, #110	; 0x6e
    2a54:	d100      	bne.n	2a58 <_printf_i+0x1c>
    2a56:	e08f      	b.n	2b78 <_printf_i+0x13c>
    2a58:	d817      	bhi.n	2a8a <_printf_i+0x4e>
    2a5a:	2a63      	cmp	r2, #99	; 0x63
    2a5c:	d02c      	beq.n	2ab8 <_printf_i+0x7c>
    2a5e:	d808      	bhi.n	2a72 <_printf_i+0x36>
    2a60:	2a00      	cmp	r2, #0
    2a62:	d100      	bne.n	2a66 <_printf_i+0x2a>
    2a64:	e099      	b.n	2b9a <_printf_i+0x15e>
    2a66:	2a58      	cmp	r2, #88	; 0x58
    2a68:	d054      	beq.n	2b14 <_printf_i+0xd8>
    2a6a:	0026      	movs	r6, r4
    2a6c:	3642      	adds	r6, #66	; 0x42
    2a6e:	7032      	strb	r2, [r6, #0]
    2a70:	e029      	b.n	2ac6 <_printf_i+0x8a>
    2a72:	2a64      	cmp	r2, #100	; 0x64
    2a74:	d001      	beq.n	2a7a <_printf_i+0x3e>
    2a76:	2a69      	cmp	r2, #105	; 0x69
    2a78:	d1f7      	bne.n	2a6a <_printf_i+0x2e>
    2a7a:	6821      	ldr	r1, [r4, #0]
    2a7c:	681a      	ldr	r2, [r3, #0]
    2a7e:	0608      	lsls	r0, r1, #24
    2a80:	d523      	bpl.n	2aca <_printf_i+0x8e>
    2a82:	1d11      	adds	r1, r2, #4
    2a84:	6019      	str	r1, [r3, #0]
    2a86:	6815      	ldr	r5, [r2, #0]
    2a88:	e025      	b.n	2ad6 <_printf_i+0x9a>
    2a8a:	2a73      	cmp	r2, #115	; 0x73
    2a8c:	d100      	bne.n	2a90 <_printf_i+0x54>
    2a8e:	e088      	b.n	2ba2 <_printf_i+0x166>
    2a90:	d808      	bhi.n	2aa4 <_printf_i+0x68>
    2a92:	2a6f      	cmp	r2, #111	; 0x6f
    2a94:	d029      	beq.n	2aea <_printf_i+0xae>
    2a96:	2a70      	cmp	r2, #112	; 0x70
    2a98:	d1e7      	bne.n	2a6a <_printf_i+0x2e>
    2a9a:	2220      	movs	r2, #32
    2a9c:	6809      	ldr	r1, [r1, #0]
    2a9e:	430a      	orrs	r2, r1
    2aa0:	6022      	str	r2, [r4, #0]
    2aa2:	e003      	b.n	2aac <_printf_i+0x70>
    2aa4:	2a75      	cmp	r2, #117	; 0x75
    2aa6:	d020      	beq.n	2aea <_printf_i+0xae>
    2aa8:	2a78      	cmp	r2, #120	; 0x78
    2aaa:	d1de      	bne.n	2a6a <_printf_i+0x2e>
    2aac:	0022      	movs	r2, r4
    2aae:	2178      	movs	r1, #120	; 0x78
    2ab0:	3245      	adds	r2, #69	; 0x45
    2ab2:	7011      	strb	r1, [r2, #0]
    2ab4:	4a6c      	ldr	r2, [pc, #432]	; (2c68 <_printf_i+0x22c>)
    2ab6:	e030      	b.n	2b1a <_printf_i+0xde>
    2ab8:	000e      	movs	r6, r1
    2aba:	681a      	ldr	r2, [r3, #0]
    2abc:	3642      	adds	r6, #66	; 0x42
    2abe:	1d11      	adds	r1, r2, #4
    2ac0:	6019      	str	r1, [r3, #0]
    2ac2:	6813      	ldr	r3, [r2, #0]
    2ac4:	7033      	strb	r3, [r6, #0]
    2ac6:	2301      	movs	r3, #1
    2ac8:	e079      	b.n	2bbe <_printf_i+0x182>
    2aca:	0649      	lsls	r1, r1, #25
    2acc:	d5d9      	bpl.n	2a82 <_printf_i+0x46>
    2ace:	1d11      	adds	r1, r2, #4
    2ad0:	6019      	str	r1, [r3, #0]
    2ad2:	2300      	movs	r3, #0
    2ad4:	5ed5      	ldrsh	r5, [r2, r3]
    2ad6:	2d00      	cmp	r5, #0
    2ad8:	da03      	bge.n	2ae2 <_printf_i+0xa6>
    2ada:	232d      	movs	r3, #45	; 0x2d
    2adc:	9a04      	ldr	r2, [sp, #16]
    2ade:	426d      	negs	r5, r5
    2ae0:	7013      	strb	r3, [r2, #0]
    2ae2:	4b62      	ldr	r3, [pc, #392]	; (2c6c <_printf_i+0x230>)
    2ae4:	270a      	movs	r7, #10
    2ae6:	9303      	str	r3, [sp, #12]
    2ae8:	e02f      	b.n	2b4a <_printf_i+0x10e>
    2aea:	6820      	ldr	r0, [r4, #0]
    2aec:	6819      	ldr	r1, [r3, #0]
    2aee:	0605      	lsls	r5, r0, #24
    2af0:	d503      	bpl.n	2afa <_printf_i+0xbe>
    2af2:	1d08      	adds	r0, r1, #4
    2af4:	6018      	str	r0, [r3, #0]
    2af6:	680d      	ldr	r5, [r1, #0]
    2af8:	e005      	b.n	2b06 <_printf_i+0xca>
    2afa:	0640      	lsls	r0, r0, #25
    2afc:	d5f9      	bpl.n	2af2 <_printf_i+0xb6>
    2afe:	680d      	ldr	r5, [r1, #0]
    2b00:	1d08      	adds	r0, r1, #4
    2b02:	6018      	str	r0, [r3, #0]
    2b04:	b2ad      	uxth	r5, r5
    2b06:	4b59      	ldr	r3, [pc, #356]	; (2c6c <_printf_i+0x230>)
    2b08:	2708      	movs	r7, #8
    2b0a:	9303      	str	r3, [sp, #12]
    2b0c:	2a6f      	cmp	r2, #111	; 0x6f
    2b0e:	d018      	beq.n	2b42 <_printf_i+0x106>
    2b10:	270a      	movs	r7, #10
    2b12:	e016      	b.n	2b42 <_printf_i+0x106>
    2b14:	3145      	adds	r1, #69	; 0x45
    2b16:	700a      	strb	r2, [r1, #0]
    2b18:	4a54      	ldr	r2, [pc, #336]	; (2c6c <_printf_i+0x230>)
    2b1a:	9203      	str	r2, [sp, #12]
    2b1c:	681a      	ldr	r2, [r3, #0]
    2b1e:	6821      	ldr	r1, [r4, #0]
    2b20:	1d10      	adds	r0, r2, #4
    2b22:	6018      	str	r0, [r3, #0]
    2b24:	6815      	ldr	r5, [r2, #0]
    2b26:	0608      	lsls	r0, r1, #24
    2b28:	d522      	bpl.n	2b70 <_printf_i+0x134>
    2b2a:	07cb      	lsls	r3, r1, #31
    2b2c:	d502      	bpl.n	2b34 <_printf_i+0xf8>
    2b2e:	2320      	movs	r3, #32
    2b30:	4319      	orrs	r1, r3
    2b32:	6021      	str	r1, [r4, #0]
    2b34:	2710      	movs	r7, #16
    2b36:	2d00      	cmp	r5, #0
    2b38:	d103      	bne.n	2b42 <_printf_i+0x106>
    2b3a:	2320      	movs	r3, #32
    2b3c:	6822      	ldr	r2, [r4, #0]
    2b3e:	439a      	bics	r2, r3
    2b40:	6022      	str	r2, [r4, #0]
    2b42:	0023      	movs	r3, r4
    2b44:	2200      	movs	r2, #0
    2b46:	3343      	adds	r3, #67	; 0x43
    2b48:	701a      	strb	r2, [r3, #0]
    2b4a:	6863      	ldr	r3, [r4, #4]
    2b4c:	60a3      	str	r3, [r4, #8]
    2b4e:	2b00      	cmp	r3, #0
    2b50:	db5c      	blt.n	2c0c <_printf_i+0x1d0>
    2b52:	2204      	movs	r2, #4
    2b54:	6821      	ldr	r1, [r4, #0]
    2b56:	4391      	bics	r1, r2
    2b58:	6021      	str	r1, [r4, #0]
    2b5a:	2d00      	cmp	r5, #0
    2b5c:	d158      	bne.n	2c10 <_printf_i+0x1d4>
    2b5e:	9e04      	ldr	r6, [sp, #16]
    2b60:	2b00      	cmp	r3, #0
    2b62:	d064      	beq.n	2c2e <_printf_i+0x1f2>
    2b64:	0026      	movs	r6, r4
    2b66:	9b03      	ldr	r3, [sp, #12]
    2b68:	3642      	adds	r6, #66	; 0x42
    2b6a:	781b      	ldrb	r3, [r3, #0]
    2b6c:	7033      	strb	r3, [r6, #0]
    2b6e:	e05e      	b.n	2c2e <_printf_i+0x1f2>
    2b70:	0648      	lsls	r0, r1, #25
    2b72:	d5da      	bpl.n	2b2a <_printf_i+0xee>
    2b74:	b2ad      	uxth	r5, r5
    2b76:	e7d8      	b.n	2b2a <_printf_i+0xee>
    2b78:	6809      	ldr	r1, [r1, #0]
    2b7a:	681a      	ldr	r2, [r3, #0]
    2b7c:	0608      	lsls	r0, r1, #24
    2b7e:	d505      	bpl.n	2b8c <_printf_i+0x150>
    2b80:	1d11      	adds	r1, r2, #4
    2b82:	6019      	str	r1, [r3, #0]
    2b84:	6813      	ldr	r3, [r2, #0]
    2b86:	6962      	ldr	r2, [r4, #20]
    2b88:	601a      	str	r2, [r3, #0]
    2b8a:	e006      	b.n	2b9a <_printf_i+0x15e>
    2b8c:	0649      	lsls	r1, r1, #25
    2b8e:	d5f7      	bpl.n	2b80 <_printf_i+0x144>
    2b90:	1d11      	adds	r1, r2, #4
    2b92:	6019      	str	r1, [r3, #0]
    2b94:	6813      	ldr	r3, [r2, #0]
    2b96:	8aa2      	ldrh	r2, [r4, #20]
    2b98:	801a      	strh	r2, [r3, #0]
    2b9a:	2300      	movs	r3, #0
    2b9c:	9e04      	ldr	r6, [sp, #16]
    2b9e:	6123      	str	r3, [r4, #16]
    2ba0:	e054      	b.n	2c4c <_printf_i+0x210>
    2ba2:	681a      	ldr	r2, [r3, #0]
    2ba4:	1d11      	adds	r1, r2, #4
    2ba6:	6019      	str	r1, [r3, #0]
    2ba8:	6816      	ldr	r6, [r2, #0]
    2baa:	2100      	movs	r1, #0
    2bac:	6862      	ldr	r2, [r4, #4]
    2bae:	0030      	movs	r0, r6
    2bb0:	f000 f9e6 	bl	2f80 <memchr>
    2bb4:	2800      	cmp	r0, #0
    2bb6:	d001      	beq.n	2bbc <_printf_i+0x180>
    2bb8:	1b80      	subs	r0, r0, r6
    2bba:	6060      	str	r0, [r4, #4]
    2bbc:	6863      	ldr	r3, [r4, #4]
    2bbe:	6123      	str	r3, [r4, #16]
    2bc0:	2300      	movs	r3, #0
    2bc2:	9a04      	ldr	r2, [sp, #16]
    2bc4:	7013      	strb	r3, [r2, #0]
    2bc6:	e041      	b.n	2c4c <_printf_i+0x210>
    2bc8:	6923      	ldr	r3, [r4, #16]
    2bca:	0032      	movs	r2, r6
    2bcc:	9906      	ldr	r1, [sp, #24]
    2bce:	9805      	ldr	r0, [sp, #20]
    2bd0:	9d07      	ldr	r5, [sp, #28]
    2bd2:	47a8      	blx	r5
    2bd4:	1c43      	adds	r3, r0, #1
    2bd6:	d043      	beq.n	2c60 <_printf_i+0x224>
    2bd8:	6823      	ldr	r3, [r4, #0]
    2bda:	2500      	movs	r5, #0
    2bdc:	079b      	lsls	r3, r3, #30
    2bde:	d40f      	bmi.n	2c00 <_printf_i+0x1c4>
    2be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2be2:	68e0      	ldr	r0, [r4, #12]
    2be4:	4298      	cmp	r0, r3
    2be6:	da3d      	bge.n	2c64 <_printf_i+0x228>
    2be8:	0018      	movs	r0, r3
    2bea:	e03b      	b.n	2c64 <_printf_i+0x228>
    2bec:	0022      	movs	r2, r4
    2bee:	2301      	movs	r3, #1
    2bf0:	3219      	adds	r2, #25
    2bf2:	9906      	ldr	r1, [sp, #24]
    2bf4:	9805      	ldr	r0, [sp, #20]
    2bf6:	9e07      	ldr	r6, [sp, #28]
    2bf8:	47b0      	blx	r6
    2bfa:	1c43      	adds	r3, r0, #1
    2bfc:	d030      	beq.n	2c60 <_printf_i+0x224>
    2bfe:	3501      	adds	r5, #1
    2c00:	68e3      	ldr	r3, [r4, #12]
    2c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2c04:	1a9b      	subs	r3, r3, r2
    2c06:	429d      	cmp	r5, r3
    2c08:	dbf0      	blt.n	2bec <_printf_i+0x1b0>
    2c0a:	e7e9      	b.n	2be0 <_printf_i+0x1a4>
    2c0c:	2d00      	cmp	r5, #0
    2c0e:	d0a9      	beq.n	2b64 <_printf_i+0x128>
    2c10:	9e04      	ldr	r6, [sp, #16]
    2c12:	0028      	movs	r0, r5
    2c14:	0039      	movs	r1, r7
    2c16:	f7ff f94f 	bl	1eb8 <__aeabi_uidivmod>
    2c1a:	9b03      	ldr	r3, [sp, #12]
    2c1c:	3e01      	subs	r6, #1
    2c1e:	5c5b      	ldrb	r3, [r3, r1]
    2c20:	0028      	movs	r0, r5
    2c22:	7033      	strb	r3, [r6, #0]
    2c24:	0039      	movs	r1, r7
    2c26:	f7ff f8c1 	bl	1dac <__udivsi3>
    2c2a:	1e05      	subs	r5, r0, #0
    2c2c:	d1f1      	bne.n	2c12 <_printf_i+0x1d6>
    2c2e:	2f08      	cmp	r7, #8
    2c30:	d109      	bne.n	2c46 <_printf_i+0x20a>
    2c32:	6823      	ldr	r3, [r4, #0]
    2c34:	07db      	lsls	r3, r3, #31
    2c36:	d506      	bpl.n	2c46 <_printf_i+0x20a>
    2c38:	6863      	ldr	r3, [r4, #4]
    2c3a:	6922      	ldr	r2, [r4, #16]
    2c3c:	4293      	cmp	r3, r2
    2c3e:	dc02      	bgt.n	2c46 <_printf_i+0x20a>
    2c40:	2330      	movs	r3, #48	; 0x30
    2c42:	3e01      	subs	r6, #1
    2c44:	7033      	strb	r3, [r6, #0]
    2c46:	9b04      	ldr	r3, [sp, #16]
    2c48:	1b9b      	subs	r3, r3, r6
    2c4a:	6123      	str	r3, [r4, #16]
    2c4c:	9b07      	ldr	r3, [sp, #28]
    2c4e:	aa09      	add	r2, sp, #36	; 0x24
    2c50:	9300      	str	r3, [sp, #0]
    2c52:	0021      	movs	r1, r4
    2c54:	9b06      	ldr	r3, [sp, #24]
    2c56:	9805      	ldr	r0, [sp, #20]
    2c58:	f7ff fe82 	bl	2960 <_printf_common>
    2c5c:	1c43      	adds	r3, r0, #1
    2c5e:	d1b3      	bne.n	2bc8 <_printf_i+0x18c>
    2c60:	2001      	movs	r0, #1
    2c62:	4240      	negs	r0, r0
    2c64:	b00b      	add	sp, #44	; 0x2c
    2c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c68:	000032e2 	.word	0x000032e2
    2c6c:	000032d1 	.word	0x000032d1

00002c70 <_sbrk_r>:
    2c70:	2300      	movs	r3, #0
    2c72:	b570      	push	{r4, r5, r6, lr}
    2c74:	4c06      	ldr	r4, [pc, #24]	; (2c90 <_sbrk_r+0x20>)
    2c76:	0005      	movs	r5, r0
    2c78:	0008      	movs	r0, r1
    2c7a:	6023      	str	r3, [r4, #0]
    2c7c:	f7fe fca2 	bl	15c4 <_sbrk>
    2c80:	1c43      	adds	r3, r0, #1
    2c82:	d103      	bne.n	2c8c <_sbrk_r+0x1c>
    2c84:	6823      	ldr	r3, [r4, #0]
    2c86:	2b00      	cmp	r3, #0
    2c88:	d000      	beq.n	2c8c <_sbrk_r+0x1c>
    2c8a:	602b      	str	r3, [r5, #0]
    2c8c:	bd70      	pop	{r4, r5, r6, pc}
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	20000170 	.word	0x20000170

00002c94 <__sread>:
    2c94:	b570      	push	{r4, r5, r6, lr}
    2c96:	000c      	movs	r4, r1
    2c98:	250e      	movs	r5, #14
    2c9a:	5f49      	ldrsh	r1, [r1, r5]
    2c9c:	f000 f97e 	bl	2f9c <_read_r>
    2ca0:	2800      	cmp	r0, #0
    2ca2:	db03      	blt.n	2cac <__sread+0x18>
    2ca4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2ca6:	181b      	adds	r3, r3, r0
    2ca8:	6563      	str	r3, [r4, #84]	; 0x54
    2caa:	bd70      	pop	{r4, r5, r6, pc}
    2cac:	89a3      	ldrh	r3, [r4, #12]
    2cae:	4a02      	ldr	r2, [pc, #8]	; (2cb8 <__sread+0x24>)
    2cb0:	4013      	ands	r3, r2
    2cb2:	81a3      	strh	r3, [r4, #12]
    2cb4:	e7f9      	b.n	2caa <__sread+0x16>
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	ffffefff 	.word	0xffffefff

00002cbc <__swrite>:
    2cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cbe:	001f      	movs	r7, r3
    2cc0:	898b      	ldrh	r3, [r1, #12]
    2cc2:	0005      	movs	r5, r0
    2cc4:	000c      	movs	r4, r1
    2cc6:	0016      	movs	r6, r2
    2cc8:	05db      	lsls	r3, r3, #23
    2cca:	d505      	bpl.n	2cd8 <__swrite+0x1c>
    2ccc:	230e      	movs	r3, #14
    2cce:	5ec9      	ldrsh	r1, [r1, r3]
    2cd0:	2200      	movs	r2, #0
    2cd2:	2302      	movs	r3, #2
    2cd4:	f000 f940 	bl	2f58 <_lseek_r>
    2cd8:	89a3      	ldrh	r3, [r4, #12]
    2cda:	4a05      	ldr	r2, [pc, #20]	; (2cf0 <__swrite+0x34>)
    2cdc:	0028      	movs	r0, r5
    2cde:	4013      	ands	r3, r2
    2ce0:	81a3      	strh	r3, [r4, #12]
    2ce2:	0032      	movs	r2, r6
    2ce4:	230e      	movs	r3, #14
    2ce6:	5ee1      	ldrsh	r1, [r4, r3]
    2ce8:	003b      	movs	r3, r7
    2cea:	f000 f875 	bl	2dd8 <_write_r>
    2cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cf0:	ffffefff 	.word	0xffffefff

00002cf4 <__sseek>:
    2cf4:	b570      	push	{r4, r5, r6, lr}
    2cf6:	000c      	movs	r4, r1
    2cf8:	250e      	movs	r5, #14
    2cfa:	5f49      	ldrsh	r1, [r1, r5]
    2cfc:	f000 f92c 	bl	2f58 <_lseek_r>
    2d00:	89a3      	ldrh	r3, [r4, #12]
    2d02:	1c42      	adds	r2, r0, #1
    2d04:	d103      	bne.n	2d0e <__sseek+0x1a>
    2d06:	4a05      	ldr	r2, [pc, #20]	; (2d1c <__sseek+0x28>)
    2d08:	4013      	ands	r3, r2
    2d0a:	81a3      	strh	r3, [r4, #12]
    2d0c:	bd70      	pop	{r4, r5, r6, pc}
    2d0e:	2280      	movs	r2, #128	; 0x80
    2d10:	0152      	lsls	r2, r2, #5
    2d12:	4313      	orrs	r3, r2
    2d14:	81a3      	strh	r3, [r4, #12]
    2d16:	6560      	str	r0, [r4, #84]	; 0x54
    2d18:	e7f8      	b.n	2d0c <__sseek+0x18>
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	ffffefff 	.word	0xffffefff

00002d20 <__sclose>:
    2d20:	b510      	push	{r4, lr}
    2d22:	230e      	movs	r3, #14
    2d24:	5ec9      	ldrsh	r1, [r1, r3]
    2d26:	f000 f8e1 	bl	2eec <_close_r>
    2d2a:	bd10      	pop	{r4, pc}

00002d2c <__swbuf_r>:
    2d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d2e:	0005      	movs	r5, r0
    2d30:	000e      	movs	r6, r1
    2d32:	0014      	movs	r4, r2
    2d34:	2800      	cmp	r0, #0
    2d36:	d004      	beq.n	2d42 <__swbuf_r+0x16>
    2d38:	6983      	ldr	r3, [r0, #24]
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	d101      	bne.n	2d42 <__swbuf_r+0x16>
    2d3e:	f7ff fb17 	bl	2370 <__sinit>
    2d42:	4b22      	ldr	r3, [pc, #136]	; (2dcc <__swbuf_r+0xa0>)
    2d44:	429c      	cmp	r4, r3
    2d46:	d12d      	bne.n	2da4 <__swbuf_r+0x78>
    2d48:	686c      	ldr	r4, [r5, #4]
    2d4a:	69a3      	ldr	r3, [r4, #24]
    2d4c:	60a3      	str	r3, [r4, #8]
    2d4e:	89a3      	ldrh	r3, [r4, #12]
    2d50:	071b      	lsls	r3, r3, #28
    2d52:	d531      	bpl.n	2db8 <__swbuf_r+0x8c>
    2d54:	6923      	ldr	r3, [r4, #16]
    2d56:	2b00      	cmp	r3, #0
    2d58:	d02e      	beq.n	2db8 <__swbuf_r+0x8c>
    2d5a:	6823      	ldr	r3, [r4, #0]
    2d5c:	6922      	ldr	r2, [r4, #16]
    2d5e:	b2f7      	uxtb	r7, r6
    2d60:	1a98      	subs	r0, r3, r2
    2d62:	6963      	ldr	r3, [r4, #20]
    2d64:	b2f6      	uxtb	r6, r6
    2d66:	4298      	cmp	r0, r3
    2d68:	db05      	blt.n	2d76 <__swbuf_r+0x4a>
    2d6a:	0021      	movs	r1, r4
    2d6c:	0028      	movs	r0, r5
    2d6e:	f7ff fa91 	bl	2294 <_fflush_r>
    2d72:	2800      	cmp	r0, #0
    2d74:	d126      	bne.n	2dc4 <__swbuf_r+0x98>
    2d76:	68a3      	ldr	r3, [r4, #8]
    2d78:	3001      	adds	r0, #1
    2d7a:	3b01      	subs	r3, #1
    2d7c:	60a3      	str	r3, [r4, #8]
    2d7e:	6823      	ldr	r3, [r4, #0]
    2d80:	1c5a      	adds	r2, r3, #1
    2d82:	6022      	str	r2, [r4, #0]
    2d84:	701f      	strb	r7, [r3, #0]
    2d86:	6963      	ldr	r3, [r4, #20]
    2d88:	4298      	cmp	r0, r3
    2d8a:	d004      	beq.n	2d96 <__swbuf_r+0x6a>
    2d8c:	89a3      	ldrh	r3, [r4, #12]
    2d8e:	07db      	lsls	r3, r3, #31
    2d90:	d51a      	bpl.n	2dc8 <__swbuf_r+0x9c>
    2d92:	2e0a      	cmp	r6, #10
    2d94:	d118      	bne.n	2dc8 <__swbuf_r+0x9c>
    2d96:	0021      	movs	r1, r4
    2d98:	0028      	movs	r0, r5
    2d9a:	f7ff fa7b 	bl	2294 <_fflush_r>
    2d9e:	2800      	cmp	r0, #0
    2da0:	d012      	beq.n	2dc8 <__swbuf_r+0x9c>
    2da2:	e00f      	b.n	2dc4 <__swbuf_r+0x98>
    2da4:	4b0a      	ldr	r3, [pc, #40]	; (2dd0 <__swbuf_r+0xa4>)
    2da6:	429c      	cmp	r4, r3
    2da8:	d101      	bne.n	2dae <__swbuf_r+0x82>
    2daa:	68ac      	ldr	r4, [r5, #8]
    2dac:	e7cd      	b.n	2d4a <__swbuf_r+0x1e>
    2dae:	4b09      	ldr	r3, [pc, #36]	; (2dd4 <__swbuf_r+0xa8>)
    2db0:	429c      	cmp	r4, r3
    2db2:	d1ca      	bne.n	2d4a <__swbuf_r+0x1e>
    2db4:	68ec      	ldr	r4, [r5, #12]
    2db6:	e7c8      	b.n	2d4a <__swbuf_r+0x1e>
    2db8:	0021      	movs	r1, r4
    2dba:	0028      	movs	r0, r5
    2dbc:	f000 f820 	bl	2e00 <__swsetup_r>
    2dc0:	2800      	cmp	r0, #0
    2dc2:	d0ca      	beq.n	2d5a <__swbuf_r+0x2e>
    2dc4:	2601      	movs	r6, #1
    2dc6:	4276      	negs	r6, r6
    2dc8:	0030      	movs	r0, r6
    2dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dcc:	00003280 	.word	0x00003280
    2dd0:	000032a0 	.word	0x000032a0
    2dd4:	00003260 	.word	0x00003260

00002dd8 <_write_r>:
    2dd8:	b570      	push	{r4, r5, r6, lr}
    2dda:	0005      	movs	r5, r0
    2ddc:	0008      	movs	r0, r1
    2dde:	0011      	movs	r1, r2
    2de0:	2200      	movs	r2, #0
    2de2:	4c06      	ldr	r4, [pc, #24]	; (2dfc <_write_r+0x24>)
    2de4:	6022      	str	r2, [r4, #0]
    2de6:	001a      	movs	r2, r3
    2de8:	f7fe fbc4 	bl	1574 <_write>
    2dec:	1c43      	adds	r3, r0, #1
    2dee:	d103      	bne.n	2df8 <_write_r+0x20>
    2df0:	6823      	ldr	r3, [r4, #0]
    2df2:	2b00      	cmp	r3, #0
    2df4:	d000      	beq.n	2df8 <_write_r+0x20>
    2df6:	602b      	str	r3, [r5, #0]
    2df8:	bd70      	pop	{r4, r5, r6, pc}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	20000170 	.word	0x20000170

00002e00 <__swsetup_r>:
    2e00:	4b36      	ldr	r3, [pc, #216]	; (2edc <__swsetup_r+0xdc>)
    2e02:	b570      	push	{r4, r5, r6, lr}
    2e04:	681d      	ldr	r5, [r3, #0]
    2e06:	0006      	movs	r6, r0
    2e08:	000c      	movs	r4, r1
    2e0a:	2d00      	cmp	r5, #0
    2e0c:	d005      	beq.n	2e1a <__swsetup_r+0x1a>
    2e0e:	69ab      	ldr	r3, [r5, #24]
    2e10:	2b00      	cmp	r3, #0
    2e12:	d102      	bne.n	2e1a <__swsetup_r+0x1a>
    2e14:	0028      	movs	r0, r5
    2e16:	f7ff faab 	bl	2370 <__sinit>
    2e1a:	4b31      	ldr	r3, [pc, #196]	; (2ee0 <__swsetup_r+0xe0>)
    2e1c:	429c      	cmp	r4, r3
    2e1e:	d10f      	bne.n	2e40 <__swsetup_r+0x40>
    2e20:	686c      	ldr	r4, [r5, #4]
    2e22:	230c      	movs	r3, #12
    2e24:	5ee2      	ldrsh	r2, [r4, r3]
    2e26:	b293      	uxth	r3, r2
    2e28:	0719      	lsls	r1, r3, #28
    2e2a:	d42d      	bmi.n	2e88 <__swsetup_r+0x88>
    2e2c:	06d9      	lsls	r1, r3, #27
    2e2e:	d411      	bmi.n	2e54 <__swsetup_r+0x54>
    2e30:	2309      	movs	r3, #9
    2e32:	2001      	movs	r0, #1
    2e34:	6033      	str	r3, [r6, #0]
    2e36:	3337      	adds	r3, #55	; 0x37
    2e38:	4313      	orrs	r3, r2
    2e3a:	81a3      	strh	r3, [r4, #12]
    2e3c:	4240      	negs	r0, r0
    2e3e:	bd70      	pop	{r4, r5, r6, pc}
    2e40:	4b28      	ldr	r3, [pc, #160]	; (2ee4 <__swsetup_r+0xe4>)
    2e42:	429c      	cmp	r4, r3
    2e44:	d101      	bne.n	2e4a <__swsetup_r+0x4a>
    2e46:	68ac      	ldr	r4, [r5, #8]
    2e48:	e7eb      	b.n	2e22 <__swsetup_r+0x22>
    2e4a:	4b27      	ldr	r3, [pc, #156]	; (2ee8 <__swsetup_r+0xe8>)
    2e4c:	429c      	cmp	r4, r3
    2e4e:	d1e8      	bne.n	2e22 <__swsetup_r+0x22>
    2e50:	68ec      	ldr	r4, [r5, #12]
    2e52:	e7e6      	b.n	2e22 <__swsetup_r+0x22>
    2e54:	075b      	lsls	r3, r3, #29
    2e56:	d513      	bpl.n	2e80 <__swsetup_r+0x80>
    2e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2e5a:	2900      	cmp	r1, #0
    2e5c:	d008      	beq.n	2e70 <__swsetup_r+0x70>
    2e5e:	0023      	movs	r3, r4
    2e60:	3344      	adds	r3, #68	; 0x44
    2e62:	4299      	cmp	r1, r3
    2e64:	d002      	beq.n	2e6c <__swsetup_r+0x6c>
    2e66:	0030      	movs	r0, r6
    2e68:	f7ff fb8e 	bl	2588 <_free_r>
    2e6c:	2300      	movs	r3, #0
    2e6e:	6363      	str	r3, [r4, #52]	; 0x34
    2e70:	2224      	movs	r2, #36	; 0x24
    2e72:	89a3      	ldrh	r3, [r4, #12]
    2e74:	4393      	bics	r3, r2
    2e76:	81a3      	strh	r3, [r4, #12]
    2e78:	2300      	movs	r3, #0
    2e7a:	6063      	str	r3, [r4, #4]
    2e7c:	6923      	ldr	r3, [r4, #16]
    2e7e:	6023      	str	r3, [r4, #0]
    2e80:	2308      	movs	r3, #8
    2e82:	89a2      	ldrh	r2, [r4, #12]
    2e84:	4313      	orrs	r3, r2
    2e86:	81a3      	strh	r3, [r4, #12]
    2e88:	6923      	ldr	r3, [r4, #16]
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d10b      	bne.n	2ea6 <__swsetup_r+0xa6>
    2e8e:	21a0      	movs	r1, #160	; 0xa0
    2e90:	2280      	movs	r2, #128	; 0x80
    2e92:	89a3      	ldrh	r3, [r4, #12]
    2e94:	0089      	lsls	r1, r1, #2
    2e96:	0092      	lsls	r2, r2, #2
    2e98:	400b      	ands	r3, r1
    2e9a:	4293      	cmp	r3, r2
    2e9c:	d003      	beq.n	2ea6 <__swsetup_r+0xa6>
    2e9e:	0021      	movs	r1, r4
    2ea0:	0030      	movs	r0, r6
    2ea2:	f7ff fb23 	bl	24ec <__smakebuf_r>
    2ea6:	2301      	movs	r3, #1
    2ea8:	89a2      	ldrh	r2, [r4, #12]
    2eaa:	4013      	ands	r3, r2
    2eac:	d011      	beq.n	2ed2 <__swsetup_r+0xd2>
    2eae:	2300      	movs	r3, #0
    2eb0:	60a3      	str	r3, [r4, #8]
    2eb2:	6963      	ldr	r3, [r4, #20]
    2eb4:	425b      	negs	r3, r3
    2eb6:	61a3      	str	r3, [r4, #24]
    2eb8:	2000      	movs	r0, #0
    2eba:	6923      	ldr	r3, [r4, #16]
    2ebc:	4283      	cmp	r3, r0
    2ebe:	d1be      	bne.n	2e3e <__swsetup_r+0x3e>
    2ec0:	230c      	movs	r3, #12
    2ec2:	5ee2      	ldrsh	r2, [r4, r3]
    2ec4:	0613      	lsls	r3, r2, #24
    2ec6:	d5ba      	bpl.n	2e3e <__swsetup_r+0x3e>
    2ec8:	2340      	movs	r3, #64	; 0x40
    2eca:	4313      	orrs	r3, r2
    2ecc:	81a3      	strh	r3, [r4, #12]
    2ece:	3801      	subs	r0, #1
    2ed0:	e7b5      	b.n	2e3e <__swsetup_r+0x3e>
    2ed2:	0792      	lsls	r2, r2, #30
    2ed4:	d400      	bmi.n	2ed8 <__swsetup_r+0xd8>
    2ed6:	6963      	ldr	r3, [r4, #20]
    2ed8:	60a3      	str	r3, [r4, #8]
    2eda:	e7ed      	b.n	2eb8 <__swsetup_r+0xb8>
    2edc:	20000010 	.word	0x20000010
    2ee0:	00003280 	.word	0x00003280
    2ee4:	000032a0 	.word	0x000032a0
    2ee8:	00003260 	.word	0x00003260

00002eec <_close_r>:
    2eec:	2300      	movs	r3, #0
    2eee:	b570      	push	{r4, r5, r6, lr}
    2ef0:	4c06      	ldr	r4, [pc, #24]	; (2f0c <_close_r+0x20>)
    2ef2:	0005      	movs	r5, r0
    2ef4:	0008      	movs	r0, r1
    2ef6:	6023      	str	r3, [r4, #0]
    2ef8:	f7fe fb76 	bl	15e8 <_close>
    2efc:	1c43      	adds	r3, r0, #1
    2efe:	d103      	bne.n	2f08 <_close_r+0x1c>
    2f00:	6823      	ldr	r3, [r4, #0]
    2f02:	2b00      	cmp	r3, #0
    2f04:	d000      	beq.n	2f08 <_close_r+0x1c>
    2f06:	602b      	str	r3, [r5, #0]
    2f08:	bd70      	pop	{r4, r5, r6, pc}
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	20000170 	.word	0x20000170

00002f10 <_fstat_r>:
    2f10:	2300      	movs	r3, #0
    2f12:	b570      	push	{r4, r5, r6, lr}
    2f14:	4c06      	ldr	r4, [pc, #24]	; (2f30 <_fstat_r+0x20>)
    2f16:	0005      	movs	r5, r0
    2f18:	0008      	movs	r0, r1
    2f1a:	0011      	movs	r1, r2
    2f1c:	6023      	str	r3, [r4, #0]
    2f1e:	f7fe fb66 	bl	15ee <_fstat>
    2f22:	1c43      	adds	r3, r0, #1
    2f24:	d103      	bne.n	2f2e <_fstat_r+0x1e>
    2f26:	6823      	ldr	r3, [r4, #0]
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d000      	beq.n	2f2e <_fstat_r+0x1e>
    2f2c:	602b      	str	r3, [r5, #0]
    2f2e:	bd70      	pop	{r4, r5, r6, pc}
    2f30:	20000170 	.word	0x20000170

00002f34 <_isatty_r>:
    2f34:	2300      	movs	r3, #0
    2f36:	b570      	push	{r4, r5, r6, lr}
    2f38:	4c06      	ldr	r4, [pc, #24]	; (2f54 <_isatty_r+0x20>)
    2f3a:	0005      	movs	r5, r0
    2f3c:	0008      	movs	r0, r1
    2f3e:	6023      	str	r3, [r4, #0]
    2f40:	f7fe fb5a 	bl	15f8 <_isatty>
    2f44:	1c43      	adds	r3, r0, #1
    2f46:	d103      	bne.n	2f50 <_isatty_r+0x1c>
    2f48:	6823      	ldr	r3, [r4, #0]
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	d000      	beq.n	2f50 <_isatty_r+0x1c>
    2f4e:	602b      	str	r3, [r5, #0]
    2f50:	bd70      	pop	{r4, r5, r6, pc}
    2f52:	46c0      	nop			; (mov r8, r8)
    2f54:	20000170 	.word	0x20000170

00002f58 <_lseek_r>:
    2f58:	b570      	push	{r4, r5, r6, lr}
    2f5a:	0005      	movs	r5, r0
    2f5c:	0008      	movs	r0, r1
    2f5e:	0011      	movs	r1, r2
    2f60:	2200      	movs	r2, #0
    2f62:	4c06      	ldr	r4, [pc, #24]	; (2f7c <_lseek_r+0x24>)
    2f64:	6022      	str	r2, [r4, #0]
    2f66:	001a      	movs	r2, r3
    2f68:	f7fe fb48 	bl	15fc <_lseek>
    2f6c:	1c43      	adds	r3, r0, #1
    2f6e:	d103      	bne.n	2f78 <_lseek_r+0x20>
    2f70:	6823      	ldr	r3, [r4, #0]
    2f72:	2b00      	cmp	r3, #0
    2f74:	d000      	beq.n	2f78 <_lseek_r+0x20>
    2f76:	602b      	str	r3, [r5, #0]
    2f78:	bd70      	pop	{r4, r5, r6, pc}
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	20000170 	.word	0x20000170

00002f80 <memchr>:
    2f80:	b2c9      	uxtb	r1, r1
    2f82:	1882      	adds	r2, r0, r2
    2f84:	4290      	cmp	r0, r2
    2f86:	d101      	bne.n	2f8c <memchr+0xc>
    2f88:	2000      	movs	r0, #0
    2f8a:	4770      	bx	lr
    2f8c:	7803      	ldrb	r3, [r0, #0]
    2f8e:	428b      	cmp	r3, r1
    2f90:	d0fb      	beq.n	2f8a <memchr+0xa>
    2f92:	3001      	adds	r0, #1
    2f94:	e7f6      	b.n	2f84 <memchr+0x4>

00002f96 <__malloc_lock>:
    2f96:	4770      	bx	lr

00002f98 <__malloc_unlock>:
    2f98:	4770      	bx	lr
	...

00002f9c <_read_r>:
    2f9c:	b570      	push	{r4, r5, r6, lr}
    2f9e:	0005      	movs	r5, r0
    2fa0:	0008      	movs	r0, r1
    2fa2:	0011      	movs	r1, r2
    2fa4:	2200      	movs	r2, #0
    2fa6:	4c06      	ldr	r4, [pc, #24]	; (2fc0 <_read_r+0x24>)
    2fa8:	6022      	str	r2, [r4, #0]
    2faa:	001a      	movs	r2, r3
    2fac:	f7fe fac0 	bl	1530 <_read>
    2fb0:	1c43      	adds	r3, r0, #1
    2fb2:	d103      	bne.n	2fbc <_read_r+0x20>
    2fb4:	6823      	ldr	r3, [r4, #0]
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d000      	beq.n	2fbc <_read_r+0x20>
    2fba:	602b      	str	r3, [r5, #0]
    2fbc:	bd70      	pop	{r4, r5, r6, pc}
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	20000170 	.word	0x20000170
    2fc4:	42000800 	.word	0x42000800
    2fc8:	42000c00 	.word	0x42000c00
    2fcc:	42001000 	.word	0x42001000
    2fd0:	42001400 	.word	0x42001400
    2fd4:	42001800 	.word	0x42001800
    2fd8:	42001c00 	.word	0x42001c00
    2fdc:	00000cbe 	.word	0x00000cbe
    2fe0:	00000cba 	.word	0x00000cba
    2fe4:	00000cba 	.word	0x00000cba
    2fe8:	00000d20 	.word	0x00000d20
    2fec:	00000d20 	.word	0x00000d20
    2ff0:	00000cd2 	.word	0x00000cd2
    2ff4:	00000cc4 	.word	0x00000cc4
    2ff8:	00000cd8 	.word	0x00000cd8
    2ffc:	00000d0e 	.word	0x00000d0e
    3000:	00000ee0 	.word	0x00000ee0
    3004:	00000ec0 	.word	0x00000ec0
    3008:	00000ec0 	.word	0x00000ec0
    300c:	00000f4c 	.word	0x00000f4c
    3010:	00000ed2 	.word	0x00000ed2
    3014:	00000eee 	.word	0x00000eee
    3018:	00000ec4 	.word	0x00000ec4
    301c:	00000efc 	.word	0x00000efc
    3020:	00000f3c 	.word	0x00000f3c
    3024:	000a000a 	.word	0x000a000a
    3028:	00140014 	.word	0x00140014
    302c:	00000014 	.word	0x00000014
    3030:	000a017c 	.word	0x000a017c
    3034:	000a017c 	.word	0x000a017c
    3038:	00140186 	.word	0x00140186
    303c:	00140000 	.word	0x00140000
    3040:	0122000a 	.word	0x0122000a
    3044:	00140186 	.word	0x00140186
    3048:	01220190 	.word	0x01220190
    304c:	0122000a 	.word	0x0122000a
    3050:	012c0014 	.word	0x012c0014
    3054:	0122017c 	.word	0x0122017c
    3058:	012c0186 	.word	0x012c0186
    305c:	012c0014 	.word	0x012c0014
    3060:	0136017c 	.word	0x0136017c
    3064:	001e0000 	.word	0x001e0000
    3068:	00280032 	.word	0x00280032
    306c:	00320000 	.word	0x00320000
    3070:	003c0032 	.word	0x003c0032
    3074:	001e0050 	.word	0x001e0050
    3078:	00280118 	.word	0x00280118
    307c:	00280046 	.word	0x00280046
    3080:	00be0050 	.word	0x00be0050
    3084:	00be0050 	.word	0x00be0050
    3088:	00c80118 	.word	0x00c80118
    308c:	00280118 	.word	0x00280118
    3090:	00be0122 	.word	0x00be0122
    3094:	00460000 	.word	0x00460000
    3098:	00500032 	.word	0x00500032
    309c:	005a0000 	.word	0x005a0000
    30a0:	00640032 	.word	0x00640032
    30a4:	006e0000 	.word	0x006e0000
    30a8:	00780032 	.word	0x00780032
    30ac:	00820000 	.word	0x00820000
    30b0:	008c0032 	.word	0x008c0032
    30b4:	00960000 	.word	0x00960000
    30b8:	00a00032 	.word	0x00a00032
    30bc:	00aa0000 	.word	0x00aa0000
    30c0:	00b40032 	.word	0x00b40032
    30c4:	00be0000 	.word	0x00be0000
    30c8:	00c80032 	.word	0x00c80032
    30cc:	00c8012c 	.word	0x00c8012c
    30d0:	00d20172 	.word	0x00d20172
    30d4:	00dc001e 	.word	0x00dc001e
    30d8:	00e60172 	.word	0x00e60172
    30dc:	00f0001e 	.word	0x00f0001e
    30e0:	00fa0172 	.word	0x00fa0172
    30e4:	0104001e 	.word	0x0104001e
    30e8:	010e0172 	.word	0x010e0172
    30ec:	0118005a 	.word	0x0118005a
    30f0:	0122012c 	.word	0x0122012c
    30f4:	82be50b4 	.word	0x82be50b4
    30f8:	8cbe82aa 	.word	0x8cbe82aa
    30fc:	64963c8c 	.word	0x64963c8c
    3100:	64dc3cd2 	.word	0x64dc3cd2
    3104:	a08c9682 	.word	0xa08c9682
    3108:	aadca08c 	.word	0xaadca08c
    310c:	a0e696dc 	.word	0xa0e696dc
    3110:	50f03c78 	.word	0x50f03c78
    3114:	5a78466e 	.word	0x5a78466e
    3118:	aaaa3c96 	.word	0xaaaa3c96
    311c:	a0dc3cc8 	.word	0xa0dc3cc8
    3120:	aae6a0d2 	.word	0xaae6a0d2

00003124 <beelzebub.12739>:
    3124:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    3134:	64012201 d4019201 08020702 5f023402     .".d.........4._
    3144:	94027802 bb02a602 f902db02 7f031f03     .x..............

00003154 <belial.12736>:
    3154:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    3164:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    3174:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    3184:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    3194:	35c9c9c9 0000363a                       ...5:6..

0000319c <lucifer.12738>:
    319c:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    31ac:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    31bc:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    31cc:	00cc0008 01707005 02030303 02d00000     .....pp.........
    31dc:	00505050 00000055 6c6c6548 6f57206f     PPP.U...Hello Wo
    31ec:	0a646c72 0000000d 202c7825 202c7825     rld.....%x, %x, 
    31fc:	002c7825 202c7825 202c7825 202c7825     %x,.%x, %x, %x, 
    320c:	0d207825 00000000                       %x .....

00003214 <mulciber.12737>:
    3214:	03020100 02010004 00020100 01000201     ................
    3224:	02010002 00020100 01000201 01000002     ................
    3234:	02010000 00020100 01000201 03020100     ................
    3244:	00000004 01000100 01000302 02010002     ................
    3254:	00000403 00000000                       ........

0000325c <_global_impure_ptr>:
    325c:	20000014                                ... 

00003260 <__sf_fake_stderr>:
	...

00003280 <__sf_fake_stdin>:
	...

000032a0 <__sf_fake_stdout>:
	...
    32c0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    32d0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    32e0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    32f0:	00006665                                ef..

000032f4 <_init>:
    32f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    32fa:	bc08      	pop	{r3}
    32fc:	469e      	mov	lr, r3
    32fe:	4770      	bx	lr

00003300 <__init_array_start>:
    3300:	000000dd 	.word	0x000000dd

00003304 <_fini>:
    3304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	bcf8      	pop	{r3, r4, r5, r6, r7}
    330a:	bc08      	pop	{r3}
    330c:	469e      	mov	lr, r3
    330e:	4770      	bx	lr

00003310 <__fini_array_start>:
    3310:	000000b5 	.word	0x000000b5
