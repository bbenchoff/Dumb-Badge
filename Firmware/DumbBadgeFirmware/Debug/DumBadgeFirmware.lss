
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006fac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001c8  20000000  00006fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000914  200001c8  00007174  000201c8  2**2
                  ALLOC
  3 .stack        00002004  20000adc  00007a88  000201c8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003ad55  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005915  00000000  00000000  0005af9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006aa0  00000000  00000000  000608b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000798  00000000  00000000  00067353  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008e8  00000000  00000000  00067aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f468  00000000  00000000  000683d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013fc1  00000000  00000000  0008783b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000903fa  00000000  00000000  0009b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001a78  00000000  00000000  0012bbf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	e0 2a 00 20 b9 21 00 00 b5 21 00 00 b5 21 00 00     .*. .!...!...!..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	b5 21 00 00 00 00 00 00 00 00 00 00 b5 21 00 00     .!...........!..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	fd 32 00 00 b5 21 00 00 b5 21 00 00 b5 21 00 00     .2...!...!...!..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	b5 21 00 00 b5 21 00 00 b5 21 00 00 b5 21 00 00     .!...!...!...!..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	b5 21 00 00 b5 21 00 00 d1 13 00 00 e1 13 00 00     .!...!..........
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	f1 13 00 00 01 14 00 00 11 14 00 00 21 14 00 00     ............!...
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	b5 21 00 00 b5 21 00 00 b5 21 00 00 b5 21 00 00     .!...!...!...!..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	b5 21 00 00 b5 21 00 00 b5 21 00 00 b5 21 00 00     .!...!...!...!..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	05 0f 00 00 b5 21 00 00 b5 21 00 00 b5 21 00 00     .....!...!...!..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	b5 21 00 00 00 00 00 00                             .!......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001c8 	.word	0x200001c8
      d4:	00000000 	.word	0x00000000
      d8:	00006fac 	.word	0x00006fac

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001cc 	.word	0x200001cc
     108:	00006fac 	.word	0x00006fac
     10c:	00006fac 	.word	0x00006fac
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	00003a5d 	.word	0x00003a5d

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	000039b5 	.word	0x000039b5

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	000039b5 	.word	0x000039b5

000001d0 <escState>:
	}
	
}

void escState(uint8_t character)
{
     1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char tempCharacter;
	int xTemp = 0;
	
	if(character == 0x44)		//ESC + D - (IND) - 
     1d2:	2844      	cmp	r0, #68	; 0x44
     1d4:	d011      	beq.n	1fa <escState+0x2a>
		}
		
		currentState = stateGround;	
			
	}
	else if(character == 0x45)		//ESC + E - (NEL) -
     1d6:	2845      	cmp	r0, #69	; 0x45
     1d8:	d041      	beq.n	25e <escState+0x8e>
		}	
		
		currentState = stateGround;	
		
	}
	else if(character == 0x37)		//ESC + 7 - (DECSC) -
     1da:	2837      	cmp	r0, #55	; 0x37
     1dc:	d100      	bne.n	1e0 <escState+0x10>
     1de:	e06e      	b.n	2be <escState+0xee>
		//Save cursor position
		DECSCX = xCharPos;
		DECSCY = yCharPos;
		currentState = stateGround;
	} 
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     1e0:	2838      	cmp	r0, #56	; 0x38
     1e2:	d100      	bne.n	1e6 <escState+0x16>
     1e4:	e077      	b.n	2d6 <escState+0x106>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
		currentState = stateGround;
	}
	else if(character == 0x23 || character == 0x28)
     1e6:	2823      	cmp	r0, #35	; 0x23
     1e8:	d100      	bne.n	1ec <escState+0x1c>
     1ea:	e092      	b.n	312 <escState+0x142>
     1ec:	2828      	cmp	r0, #40	; 0x28
     1ee:	d100      	bne.n	1f2 <escState+0x22>
     1f0:	e08f      	b.n	312 <escState+0x142>
		stateEnterBuffer = character;
		currentState = stateESCinter;
	}
	else
	{
		currentState = stateGround;
     1f2:	2200      	movs	r2, #0
     1f4:	4b4a      	ldr	r3, [pc, #296]	; (320 <escState+0x150>)
     1f6:	701a      	strb	r2, [r3, #0]
	}
}
     1f8:	e01e      	b.n	238 <escState+0x68>
		if(yCharPos < 23)
     1fa:	4b4a      	ldr	r3, [pc, #296]	; (324 <escState+0x154>)
     1fc:	881a      	ldrh	r2, [r3, #0]
     1fe:	2a16      	cmp	r2, #22
     200:	d81b      	bhi.n	23a <escState+0x6a>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     202:	4c49      	ldr	r4, [pc, #292]	; (328 <escState+0x158>)
     204:	4d49      	ldr	r5, [pc, #292]	; (32c <escState+0x15c>)
     206:	8829      	ldrh	r1, [r5, #0]
     208:	004b      	lsls	r3, r1, #1
     20a:	185b      	adds	r3, r3, r1
     20c:	00db      	lsls	r3, r3, #3
     20e:	18e3      	adds	r3, r4, r3
     210:	5c98      	ldrb	r0, [r3, r2]
     212:	4e47      	ldr	r6, [pc, #284]	; (330 <escState+0x160>)
     214:	47b0      	blx	r6
			yCharPos++;
     216:	4a43      	ldr	r2, [pc, #268]	; (324 <escState+0x154>)
     218:	8813      	ldrh	r3, [r2, #0]
     21a:	3301      	adds	r3, #1
     21c:	b29b      	uxth	r3, r3
     21e:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     220:	8829      	ldrh	r1, [r5, #0]
     222:	004a      	lsls	r2, r1, #1
     224:	1852      	adds	r2, r2, r1
     226:	00d2      	lsls	r2, r2, #3
     228:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
     22a:	5ce0      	ldrb	r0, [r4, r3]
     22c:	47b0      	blx	r6
			blinkCursor();
     22e:	4b41      	ldr	r3, [pc, #260]	; (334 <escState+0x164>)
     230:	4798      	blx	r3
		currentState = stateGround;	
     232:	2200      	movs	r2, #0
     234:	4b3a      	ldr	r3, [pc, #232]	; (320 <escState+0x150>)
     236:	701a      	strb	r2, [r3, #0]
}
     238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xTemp = xCharPos;
     23a:	4d3c      	ldr	r5, [pc, #240]	; (32c <escState+0x15c>)
     23c:	882c      	ldrh	r4, [r5, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     23e:	0063      	lsls	r3, r4, #1
     240:	191b      	adds	r3, r3, r4
     242:	00db      	lsls	r3, r3, #3
     244:	4938      	ldr	r1, [pc, #224]	; (328 <escState+0x158>)
     246:	18cb      	adds	r3, r1, r3
     248:	5c98      	ldrb	r0, [r3, r2]
     24a:	4e39      	ldr	r6, [pc, #228]	; (330 <escState+0x160>)
     24c:	47b0      	blx	r6
			newLine();
     24e:	4b3a      	ldr	r3, [pc, #232]	; (338 <escState+0x168>)
     250:	4798      	blx	r3
			drawChar(0x00);
     252:	2000      	movs	r0, #0
     254:	47b0      	blx	r6
			xCharPos = xTemp;
     256:	802c      	strh	r4, [r5, #0]
			blinkCursor();
     258:	4b36      	ldr	r3, [pc, #216]	; (334 <escState+0x164>)
     25a:	4798      	blx	r3
     25c:	e7e9      	b.n	232 <escState+0x62>
		if(yCharPos < 23)
     25e:	4b31      	ldr	r3, [pc, #196]	; (324 <escState+0x154>)
     260:	881a      	ldrh	r2, [r3, #0]
     262:	2a16      	cmp	r2, #22
     264:	d818      	bhi.n	298 <escState+0xc8>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     266:	4c30      	ldr	r4, [pc, #192]	; (328 <escState+0x158>)
     268:	4d30      	ldr	r5, [pc, #192]	; (32c <escState+0x15c>)
     26a:	8829      	ldrh	r1, [r5, #0]
     26c:	004b      	lsls	r3, r1, #1
     26e:	185b      	adds	r3, r3, r1
     270:	00db      	lsls	r3, r3, #3
     272:	18e3      	adds	r3, r4, r3
     274:	5c98      	ldrb	r0, [r3, r2]
     276:	4e2e      	ldr	r6, [pc, #184]	; (330 <escState+0x160>)
     278:	47b0      	blx	r6
			yCharPos++;
     27a:	4a2a      	ldr	r2, [pc, #168]	; (324 <escState+0x154>)
     27c:	8813      	ldrh	r3, [r2, #0]
     27e:	3301      	adds	r3, #1
     280:	b29b      	uxth	r3, r3
     282:	8013      	strh	r3, [r2, #0]
			xCharPos = 0;
     284:	2200      	movs	r2, #0
     286:	802a      	strh	r2, [r5, #0]
			drawChar(tempCharacter);
     288:	5ce0      	ldrb	r0, [r4, r3]
     28a:	47b0      	blx	r6
			blinkCursor();
     28c:	4b29      	ldr	r3, [pc, #164]	; (334 <escState+0x164>)
     28e:	4798      	blx	r3
		currentState = stateGround;	
     290:	2200      	movs	r2, #0
     292:	4b23      	ldr	r3, [pc, #140]	; (320 <escState+0x150>)
     294:	701a      	strb	r2, [r3, #0]
     296:	e7cf      	b.n	238 <escState+0x68>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     298:	4c24      	ldr	r4, [pc, #144]	; (32c <escState+0x15c>)
     29a:	8821      	ldrh	r1, [r4, #0]
     29c:	004b      	lsls	r3, r1, #1
     29e:	185b      	adds	r3, r3, r1
     2a0:	00db      	lsls	r3, r3, #3
     2a2:	4921      	ldr	r1, [pc, #132]	; (328 <escState+0x158>)
     2a4:	18cb      	adds	r3, r1, r3
     2a6:	5c98      	ldrb	r0, [r3, r2]
     2a8:	4d21      	ldr	r5, [pc, #132]	; (330 <escState+0x160>)
     2aa:	47a8      	blx	r5
			newLine();
     2ac:	4b22      	ldr	r3, [pc, #136]	; (338 <escState+0x168>)
     2ae:	4798      	blx	r3
			drawChar(0x00);
     2b0:	2000      	movs	r0, #0
     2b2:	47a8      	blx	r5
			xCharPos = 0;
     2b4:	2300      	movs	r3, #0
     2b6:	8023      	strh	r3, [r4, #0]
			blinkCursor();
     2b8:	4b1e      	ldr	r3, [pc, #120]	; (334 <escState+0x164>)
     2ba:	4798      	blx	r3
     2bc:	e7e8      	b.n	290 <escState+0xc0>
		DECSCX = xCharPos;
     2be:	4b1b      	ldr	r3, [pc, #108]	; (32c <escState+0x15c>)
     2c0:	881a      	ldrh	r2, [r3, #0]
     2c2:	4b1e      	ldr	r3, [pc, #120]	; (33c <escState+0x16c>)
     2c4:	701a      	strb	r2, [r3, #0]
		DECSCY = yCharPos;
     2c6:	4b17      	ldr	r3, [pc, #92]	; (324 <escState+0x154>)
     2c8:	881a      	ldrh	r2, [r3, #0]
     2ca:	4b1d      	ldr	r3, [pc, #116]	; (340 <escState+0x170>)
     2cc:	701a      	strb	r2, [r3, #0]
		currentState = stateGround;
     2ce:	2200      	movs	r2, #0
     2d0:	4b13      	ldr	r3, [pc, #76]	; (320 <escState+0x150>)
     2d2:	701a      	strb	r2, [r3, #0]
     2d4:	e7b0      	b.n	238 <escState+0x68>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     2d6:	4c14      	ldr	r4, [pc, #80]	; (328 <escState+0x158>)
     2d8:	4f14      	ldr	r7, [pc, #80]	; (32c <escState+0x15c>)
     2da:	883a      	ldrh	r2, [r7, #0]
     2dc:	4e11      	ldr	r6, [pc, #68]	; (324 <escState+0x154>)
     2de:	8831      	ldrh	r1, [r6, #0]
     2e0:	0053      	lsls	r3, r2, #1
     2e2:	189b      	adds	r3, r3, r2
     2e4:	00db      	lsls	r3, r3, #3
     2e6:	18e3      	adds	r3, r4, r3
     2e8:	5c58      	ldrb	r0, [r3, r1]
     2ea:	4d11      	ldr	r5, [pc, #68]	; (330 <escState+0x160>)
     2ec:	47a8      	blx	r5
		xCharPos = DECSCX;
     2ee:	4b13      	ldr	r3, [pc, #76]	; (33c <escState+0x16c>)
     2f0:	781a      	ldrb	r2, [r3, #0]
     2f2:	803a      	strh	r2, [r7, #0]
		yCharPos = DECSCY;
     2f4:	4b12      	ldr	r3, [pc, #72]	; (340 <escState+0x170>)
     2f6:	7819      	ldrb	r1, [r3, #0]
     2f8:	8031      	strh	r1, [r6, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     2fa:	0053      	lsls	r3, r2, #1
     2fc:	189b      	adds	r3, r3, r2
     2fe:	00db      	lsls	r3, r3, #3
     300:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     302:	5c58      	ldrb	r0, [r3, r1]
     304:	47a8      	blx	r5
		blinkCursor();
     306:	4b0b      	ldr	r3, [pc, #44]	; (334 <escState+0x164>)
     308:	4798      	blx	r3
		currentState = stateGround;
     30a:	2200      	movs	r2, #0
     30c:	4b04      	ldr	r3, [pc, #16]	; (320 <escState+0x150>)
     30e:	701a      	strb	r2, [r3, #0]
     310:	e792      	b.n	238 <escState+0x68>
		stateEnterBuffer = character;
     312:	4b0c      	ldr	r3, [pc, #48]	; (344 <escState+0x174>)
     314:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     316:	2202      	movs	r2, #2
     318:	4b01      	ldr	r3, [pc, #4]	; (320 <escState+0x150>)
     31a:	701a      	strb	r2, [r3, #0]
     31c:	e78c      	b.n	238 <escState+0x68>
     31e:	46c0      	nop			; (mov r8, r8)
     320:	200002ad 	.word	0x200002ad
     324:	200002aa 	.word	0x200002aa
     328:	2000032c 	.word	0x2000032c
     32c:	200002a8 	.word	0x200002a8
     330:	0000236d 	.word	0x0000236d
     334:	00002455 	.word	0x00002455
     338:	000025b1 	.word	0x000025b1
     33c:	200001e4 	.word	0x200001e4
     340:	200001e5 	.word	0x200001e5
     344:	200002bd 	.word	0x200002bd

00000348 <nextTab>:
		}
	}
}

int nextTab(int a) 
{
     348:	b510      	push	{r4, lr}
     34a:	b0d0      	sub	sp, #320	; 0x140
     34c:	0004      	movs	r4, r0
	int tabArray[] =
     34e:	22a0      	movs	r2, #160	; 0xa0
     350:	0052      	lsls	r2, r2, #1
     352:	4904      	ldr	r1, [pc, #16]	; (364 <nextTab+0x1c>)
     354:	4668      	mov	r0, sp
     356:	4b04      	ldr	r3, [pc, #16]	; (368 <nextTab+0x20>)
     358:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
     35a:	00a4      	lsls	r4, r4, #2
     35c:	466b      	mov	r3, sp
     35e:	58e0      	ldr	r0, [r4, r3]
}
     360:	b050      	add	sp, #320	; 0x140
     362:	bd10      	pop	{r4, pc}
     364:	00004bdc 	.word	0x00004bdc
     368:	00003a71 	.word	0x00003a71

0000036c <groundState>:
{
     36c:	b5f0      	push	{r4, r5, r6, r7, lr}
     36e:	46c6      	mov	lr, r8
     370:	b500      	push	{lr}
	if(character == 0x00)							//NUL 0x00 DO NOTHING
     372:	2807      	cmp	r0, #7
     374:	d93b      	bls.n	3ee <groundState+0x82>
	else if(character == 0x08)						//BS 0x08 Backspace
     376:	2808      	cmp	r0, #8
     378:	d035      	beq.n	3e6 <groundState+0x7a>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
     37a:	2809      	cmp	r0, #9
     37c:	d053      	beq.n	426 <groundState+0xba>
	else if(character == 0x0A)						//LF 0x0A Line Feed
     37e:	280a      	cmp	r0, #10
     380:	d100      	bne.n	384 <groundState+0x18>
     382:	e072      	b.n	46a <groundState+0xfe>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
     384:	280b      	cmp	r0, #11
     386:	d100      	bne.n	38a <groundState+0x1e>
     388:	e0c6      	b.n	518 <groundState+0x1ac>
	else if(character == 0x0C)						//FF 0x0C Form Feed
     38a:	280c      	cmp	r0, #12
     38c:	d02f      	beq.n	3ee <groundState+0x82>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
     38e:	280d      	cmp	r0, #13
     390:	d100      	bne.n	394 <groundState+0x28>
     392:	e119      	b.n	5c8 <groundState+0x25c>
	else if(character == 0x0E)						//SO 0x0E Shift Out
     394:	0003      	movs	r3, r0
     396:	3b0e      	subs	r3, #14
     398:	2b0c      	cmp	r3, #12
     39a:	d928      	bls.n	3ee <groundState+0x82>
	else if(character == 0x1B)						//ESC 0x1B Escape
     39c:	281b      	cmp	r0, #27
     39e:	d100      	bne.n	3a2 <groundState+0x36>
     3a0:	e138      	b.n	614 <groundState+0x2a8>
	else if(character == 0x1C)						//FS 0x1C File Separator
     3a2:	0003      	movs	r3, r0
     3a4:	3b1c      	subs	r3, #28
     3a6:	2b03      	cmp	r3, #3
     3a8:	d921      	bls.n	3ee <groundState+0x82>
	else if(character == 0x7F)						//DEL 0x7F Delete
     3aa:	287f      	cmp	r0, #127	; 0x7f
     3ac:	d01f      	beq.n	3ee <groundState+0x82>
		consoleDisplay[xCharPos][yCharPos] = character;
     3ae:	4d9b      	ldr	r5, [pc, #620]	; (61c <groundState+0x2b0>)
     3b0:	4c9b      	ldr	r4, [pc, #620]	; (620 <groundState+0x2b4>)
     3b2:	8823      	ldrh	r3, [r4, #0]
     3b4:	4f9b      	ldr	r7, [pc, #620]	; (624 <groundState+0x2b8>)
     3b6:	883a      	ldrh	r2, [r7, #0]
     3b8:	2618      	movs	r6, #24
     3ba:	4373      	muls	r3, r6
     3bc:	18eb      	adds	r3, r5, r3
     3be:	5498      	strb	r0, [r3, r2]
		drawChar(character);
     3c0:	4b99      	ldr	r3, [pc, #612]	; (628 <groundState+0x2bc>)
     3c2:	4698      	mov	r8, r3
     3c4:	4798      	blx	r3
		xCharPos++;
     3c6:	8823      	ldrh	r3, [r4, #0]
     3c8:	3301      	adds	r3, #1
     3ca:	b29b      	uxth	r3, r3
     3cc:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     3ce:	883a      	ldrh	r2, [r7, #0]
     3d0:	4373      	muls	r3, r6
     3d2:	18ed      	adds	r5, r5, r3
     3d4:	5ca8      	ldrb	r0, [r5, r2]
     3d6:	47c0      	blx	r8
		if(xCharPos > 79)		//END OF LINE
     3d8:	8823      	ldrh	r3, [r4, #0]
     3da:	2b4f      	cmp	r3, #79	; 0x4f
     3dc:	d907      	bls.n	3ee <groundState+0x82>
			xCharPos--;
     3de:	3b01      	subs	r3, #1
     3e0:	4a8f      	ldr	r2, [pc, #572]	; (620 <groundState+0x2b4>)
     3e2:	8013      	strh	r3, [r2, #0]
}
     3e4:	e003      	b.n	3ee <groundState+0x82>
		if(xCharPos > 0)
     3e6:	4b8e      	ldr	r3, [pc, #568]	; (620 <groundState+0x2b4>)
     3e8:	881b      	ldrh	r3, [r3, #0]
     3ea:	2b00      	cmp	r3, #0
     3ec:	d102      	bne.n	3f4 <groundState+0x88>
}
     3ee:	bc04      	pop	{r2}
     3f0:	4690      	mov	r8, r2
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     3f4:	4c89      	ldr	r4, [pc, #548]	; (61c <groundState+0x2b0>)
     3f6:	4d8b      	ldr	r5, [pc, #556]	; (624 <groundState+0x2b8>)
     3f8:	8829      	ldrh	r1, [r5, #0]
     3fa:	005a      	lsls	r2, r3, #1
     3fc:	18d3      	adds	r3, r2, r3
     3fe:	00db      	lsls	r3, r3, #3
     400:	18e3      	adds	r3, r4, r3
     402:	5c58      	ldrb	r0, [r3, r1]
     404:	4e88      	ldr	r6, [pc, #544]	; (628 <groundState+0x2bc>)
     406:	47b0      	blx	r6
			xCharPos--;
     408:	4a85      	ldr	r2, [pc, #532]	; (620 <groundState+0x2b4>)
     40a:	8813      	ldrh	r3, [r2, #0]
     40c:	3b01      	subs	r3, #1
     40e:	b29b      	uxth	r3, r3
     410:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     412:	8829      	ldrh	r1, [r5, #0]
     414:	005a      	lsls	r2, r3, #1
     416:	18d3      	adds	r3, r2, r3
     418:	00db      	lsls	r3, r3, #3
     41a:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
     41c:	5c58      	ldrb	r0, [r3, r1]
     41e:	47b0      	blx	r6
			blinkCursor();
     420:	4b82      	ldr	r3, [pc, #520]	; (62c <groundState+0x2c0>)
     422:	4798      	blx	r3
     424:	e7e3      	b.n	3ee <groundState+0x82>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     426:	4c7e      	ldr	r4, [pc, #504]	; (620 <groundState+0x2b4>)
     428:	8822      	ldrh	r2, [r4, #0]
     42a:	4b7e      	ldr	r3, [pc, #504]	; (624 <groundState+0x2b8>)
     42c:	8819      	ldrh	r1, [r3, #0]
     42e:	0053      	lsls	r3, r2, #1
     430:	189b      	adds	r3, r3, r2
     432:	00db      	lsls	r3, r3, #3
     434:	4a79      	ldr	r2, [pc, #484]	; (61c <groundState+0x2b0>)
     436:	18d3      	adds	r3, r2, r3
     438:	5c58      	ldrb	r0, [r3, r1]
     43a:	4b7b      	ldr	r3, [pc, #492]	; (628 <groundState+0x2bc>)
     43c:	4798      	blx	r3
		if(xCharPos <= 79)
     43e:	8820      	ldrh	r0, [r4, #0]
     440:	284f      	cmp	r0, #79	; 0x4f
     442:	d803      	bhi.n	44c <groundState+0xe0>
			xCharPos = nextTab(xCharPos);
     444:	4b7a      	ldr	r3, [pc, #488]	; (630 <groundState+0x2c4>)
     446:	4798      	blx	r3
     448:	4b75      	ldr	r3, [pc, #468]	; (620 <groundState+0x2b4>)
     44a:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     44c:	4b74      	ldr	r3, [pc, #464]	; (620 <groundState+0x2b4>)
     44e:	881a      	ldrh	r2, [r3, #0]
     450:	4b74      	ldr	r3, [pc, #464]	; (624 <groundState+0x2b8>)
     452:	8819      	ldrh	r1, [r3, #0]
     454:	0053      	lsls	r3, r2, #1
     456:	189b      	adds	r3, r3, r2
     458:	00db      	lsls	r3, r3, #3
     45a:	4a70      	ldr	r2, [pc, #448]	; (61c <groundState+0x2b0>)
     45c:	18d3      	adds	r3, r2, r3
     45e:	5c58      	ldrb	r0, [r3, r1]
     460:	4b71      	ldr	r3, [pc, #452]	; (628 <groundState+0x2bc>)
     462:	4798      	blx	r3
		blinkCursor();
     464:	4b71      	ldr	r3, [pc, #452]	; (62c <groundState+0x2c0>)
     466:	4798      	blx	r3
     468:	e7c1      	b.n	3ee <groundState+0x82>
		if(yCharPos == 23)
     46a:	4b6e      	ldr	r3, [pc, #440]	; (624 <groundState+0x2b8>)
     46c:	881a      	ldrh	r2, [r3, #0]
     46e:	2a17      	cmp	r2, #23
     470:	d032      	beq.n	4d8 <groundState+0x16c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     472:	4c6a      	ldr	r4, [pc, #424]	; (61c <groundState+0x2b0>)
     474:	4d6a      	ldr	r5, [pc, #424]	; (620 <groundState+0x2b4>)
     476:	8829      	ldrh	r1, [r5, #0]
     478:	004b      	lsls	r3, r1, #1
     47a:	185b      	adds	r3, r3, r1
     47c:	00db      	lsls	r3, r3, #3
     47e:	18e3      	adds	r3, r4, r3
     480:	5c98      	ldrb	r0, [r3, r2]
     482:	4e69      	ldr	r6, [pc, #420]	; (628 <groundState+0x2bc>)
     484:	47b0      	blx	r6
			yCharPos++;
     486:	4a67      	ldr	r2, [pc, #412]	; (624 <groundState+0x2b8>)
     488:	8813      	ldrh	r3, [r2, #0]
     48a:	3301      	adds	r3, #1
     48c:	b29b      	uxth	r3, r3
     48e:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     490:	8829      	ldrh	r1, [r5, #0]
     492:	004a      	lsls	r2, r1, #1
     494:	1852      	adds	r2, r2, r1
     496:	00d2      	lsls	r2, r2, #3
     498:	18a4      	adds	r4, r4, r2
     49a:	5ce0      	ldrb	r0, [r4, r3]
     49c:	47b0      	blx	r6
			blinkCursor();
     49e:	4b63      	ldr	r3, [pc, #396]	; (62c <groundState+0x2c0>)
     4a0:	4798      	blx	r3
		if(lineFeed)
     4a2:	4b64      	ldr	r3, [pc, #400]	; (634 <groundState+0x2c8>)
     4a4:	781b      	ldrb	r3, [r3, #0]
     4a6:	2b00      	cmp	r3, #0
     4a8:	d0a1      	beq.n	3ee <groundState+0x82>
			if(yCharPos == 23)
     4aa:	4b5e      	ldr	r3, [pc, #376]	; (624 <groundState+0x2b8>)
     4ac:	881a      	ldrh	r2, [r3, #0]
     4ae:	2a17      	cmp	r2, #23
     4b0:	d021      	beq.n	4f6 <groundState+0x18a>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     4b2:	4d5a      	ldr	r5, [pc, #360]	; (61c <groundState+0x2b0>)
     4b4:	4e5a      	ldr	r6, [pc, #360]	; (620 <groundState+0x2b4>)
     4b6:	8831      	ldrh	r1, [r6, #0]
     4b8:	004b      	lsls	r3, r1, #1
     4ba:	185b      	adds	r3, r3, r1
     4bc:	00db      	lsls	r3, r3, #3
     4be:	18eb      	adds	r3, r5, r3
     4c0:	5c98      	ldrb	r0, [r3, r2]
     4c2:	4c59      	ldr	r4, [pc, #356]	; (628 <groundState+0x2bc>)
     4c4:	47a0      	blx	r4
				xCharPos = 0;
     4c6:	2300      	movs	r3, #0
     4c8:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     4ca:	4b56      	ldr	r3, [pc, #344]	; (624 <groundState+0x2b8>)
     4cc:	881b      	ldrh	r3, [r3, #0]
     4ce:	5ce8      	ldrb	r0, [r5, r3]
     4d0:	47a0      	blx	r4
				blinkCursor();
     4d2:	4b56      	ldr	r3, [pc, #344]	; (62c <groundState+0x2c0>)
     4d4:	4798      	blx	r3
     4d6:	e78a      	b.n	3ee <groundState+0x82>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     4d8:	4b51      	ldr	r3, [pc, #324]	; (620 <groundState+0x2b4>)
     4da:	881a      	ldrh	r2, [r3, #0]
     4dc:	0053      	lsls	r3, r2, #1
     4de:	189b      	adds	r3, r3, r2
     4e0:	00db      	lsls	r3, r3, #3
     4e2:	4a4e      	ldr	r2, [pc, #312]	; (61c <groundState+0x2b0>)
     4e4:	18d3      	adds	r3, r2, r3
     4e6:	7dd8      	ldrb	r0, [r3, #23]
     4e8:	4b4f      	ldr	r3, [pc, #316]	; (628 <groundState+0x2bc>)
     4ea:	4798      	blx	r3
			newLine();
     4ec:	4b52      	ldr	r3, [pc, #328]	; (638 <groundState+0x2cc>)
     4ee:	4798      	blx	r3
			blinkCursor();
     4f0:	4b4e      	ldr	r3, [pc, #312]	; (62c <groundState+0x2c0>)
     4f2:	4798      	blx	r3
     4f4:	e7d5      	b.n	4a2 <groundState+0x136>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     4f6:	4d4a      	ldr	r5, [pc, #296]	; (620 <groundState+0x2b4>)
     4f8:	882a      	ldrh	r2, [r5, #0]
     4fa:	0053      	lsls	r3, r2, #1
     4fc:	189b      	adds	r3, r3, r2
     4fe:	00db      	lsls	r3, r3, #3
     500:	4a46      	ldr	r2, [pc, #280]	; (61c <groundState+0x2b0>)
     502:	18d3      	adds	r3, r2, r3
     504:	7dd8      	ldrb	r0, [r3, #23]
     506:	4c48      	ldr	r4, [pc, #288]	; (628 <groundState+0x2bc>)
     508:	47a0      	blx	r4
				xCharPos = 0;
     50a:	2300      	movs	r3, #0
     50c:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     50e:	2000      	movs	r0, #0
     510:	47a0      	blx	r4
				blinkCursor();
     512:	4b46      	ldr	r3, [pc, #280]	; (62c <groundState+0x2c0>)
     514:	4798      	blx	r3
     516:	e76a      	b.n	3ee <groundState+0x82>
		if(yCharPos == 23)
     518:	4b42      	ldr	r3, [pc, #264]	; (624 <groundState+0x2b8>)
     51a:	881a      	ldrh	r2, [r3, #0]
     51c:	2a17      	cmp	r2, #23
     51e:	d033      	beq.n	588 <groundState+0x21c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     520:	4c3e      	ldr	r4, [pc, #248]	; (61c <groundState+0x2b0>)
     522:	4d3f      	ldr	r5, [pc, #252]	; (620 <groundState+0x2b4>)
     524:	8829      	ldrh	r1, [r5, #0]
     526:	004b      	lsls	r3, r1, #1
     528:	185b      	adds	r3, r3, r1
     52a:	00db      	lsls	r3, r3, #3
     52c:	18e3      	adds	r3, r4, r3
     52e:	5c98      	ldrb	r0, [r3, r2]
     530:	4e3d      	ldr	r6, [pc, #244]	; (628 <groundState+0x2bc>)
     532:	47b0      	blx	r6
			yCharPos++;
     534:	4a3b      	ldr	r2, [pc, #236]	; (624 <groundState+0x2b8>)
     536:	8813      	ldrh	r3, [r2, #0]
     538:	3301      	adds	r3, #1
     53a:	b29b      	uxth	r3, r3
     53c:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     53e:	8829      	ldrh	r1, [r5, #0]
     540:	004a      	lsls	r2, r1, #1
     542:	1852      	adds	r2, r2, r1
     544:	00d2      	lsls	r2, r2, #3
     546:	18a4      	adds	r4, r4, r2
     548:	5ce0      	ldrb	r0, [r4, r3]
     54a:	47b0      	blx	r6
			blinkCursor();
     54c:	4b37      	ldr	r3, [pc, #220]	; (62c <groundState+0x2c0>)
     54e:	4798      	blx	r3
		if(lineFeed)
     550:	4b38      	ldr	r3, [pc, #224]	; (634 <groundState+0x2c8>)
     552:	781b      	ldrb	r3, [r3, #0]
     554:	2b00      	cmp	r3, #0
     556:	d100      	bne.n	55a <groundState+0x1ee>
     558:	e749      	b.n	3ee <groundState+0x82>
			if(yCharPos == 23)
     55a:	4b32      	ldr	r3, [pc, #200]	; (624 <groundState+0x2b8>)
     55c:	881a      	ldrh	r2, [r3, #0]
     55e:	2a17      	cmp	r2, #23
     560:	d021      	beq.n	5a6 <groundState+0x23a>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     562:	4d2e      	ldr	r5, [pc, #184]	; (61c <groundState+0x2b0>)
     564:	4e2e      	ldr	r6, [pc, #184]	; (620 <groundState+0x2b4>)
     566:	8831      	ldrh	r1, [r6, #0]
     568:	004b      	lsls	r3, r1, #1
     56a:	185b      	adds	r3, r3, r1
     56c:	00db      	lsls	r3, r3, #3
     56e:	18eb      	adds	r3, r5, r3
     570:	5c98      	ldrb	r0, [r3, r2]
     572:	4c2d      	ldr	r4, [pc, #180]	; (628 <groundState+0x2bc>)
     574:	47a0      	blx	r4
				xCharPos = 0;
     576:	2300      	movs	r3, #0
     578:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     57a:	4b2a      	ldr	r3, [pc, #168]	; (624 <groundState+0x2b8>)
     57c:	881b      	ldrh	r3, [r3, #0]
     57e:	5ce8      	ldrb	r0, [r5, r3]
     580:	47a0      	blx	r4
				blinkCursor();
     582:	4b2a      	ldr	r3, [pc, #168]	; (62c <groundState+0x2c0>)
     584:	4798      	blx	r3
     586:	e732      	b.n	3ee <groundState+0x82>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     588:	4b25      	ldr	r3, [pc, #148]	; (620 <groundState+0x2b4>)
     58a:	881a      	ldrh	r2, [r3, #0]
     58c:	0053      	lsls	r3, r2, #1
     58e:	189b      	adds	r3, r3, r2
     590:	00db      	lsls	r3, r3, #3
     592:	4a22      	ldr	r2, [pc, #136]	; (61c <groundState+0x2b0>)
     594:	18d3      	adds	r3, r2, r3
     596:	7dd8      	ldrb	r0, [r3, #23]
     598:	4b23      	ldr	r3, [pc, #140]	; (628 <groundState+0x2bc>)
     59a:	4798      	blx	r3
			newLine();
     59c:	4b26      	ldr	r3, [pc, #152]	; (638 <groundState+0x2cc>)
     59e:	4798      	blx	r3
			blinkCursor();
     5a0:	4b22      	ldr	r3, [pc, #136]	; (62c <groundState+0x2c0>)
     5a2:	4798      	blx	r3
     5a4:	e7d4      	b.n	550 <groundState+0x1e4>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     5a6:	4d1e      	ldr	r5, [pc, #120]	; (620 <groundState+0x2b4>)
     5a8:	882a      	ldrh	r2, [r5, #0]
     5aa:	0053      	lsls	r3, r2, #1
     5ac:	189b      	adds	r3, r3, r2
     5ae:	00db      	lsls	r3, r3, #3
     5b0:	4a1a      	ldr	r2, [pc, #104]	; (61c <groundState+0x2b0>)
     5b2:	18d3      	adds	r3, r2, r3
     5b4:	7dd8      	ldrb	r0, [r3, #23]
     5b6:	4c1c      	ldr	r4, [pc, #112]	; (628 <groundState+0x2bc>)
     5b8:	47a0      	blx	r4
				xCharPos = 0;
     5ba:	2300      	movs	r3, #0
     5bc:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     5be:	2000      	movs	r0, #0
     5c0:	47a0      	blx	r4
				blinkCursor();
     5c2:	4b1a      	ldr	r3, [pc, #104]	; (62c <groundState+0x2c0>)
     5c4:	4798      	blx	r3
     5c6:	e712      	b.n	3ee <groundState+0x82>
		if(yCharPos == 23)
     5c8:	4b16      	ldr	r3, [pc, #88]	; (624 <groundState+0x2b8>)
     5ca:	881a      	ldrh	r2, [r3, #0]
     5cc:	2a17      	cmp	r2, #23
     5ce:	d012      	beq.n	5f6 <groundState+0x28a>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     5d0:	4d12      	ldr	r5, [pc, #72]	; (61c <groundState+0x2b0>)
     5d2:	4e13      	ldr	r6, [pc, #76]	; (620 <groundState+0x2b4>)
     5d4:	8831      	ldrh	r1, [r6, #0]
     5d6:	004b      	lsls	r3, r1, #1
     5d8:	185b      	adds	r3, r3, r1
     5da:	00db      	lsls	r3, r3, #3
     5dc:	18eb      	adds	r3, r5, r3
     5de:	5c98      	ldrb	r0, [r3, r2]
     5e0:	4c11      	ldr	r4, [pc, #68]	; (628 <groundState+0x2bc>)
     5e2:	47a0      	blx	r4
			xCharPos = 0;
     5e4:	2300      	movs	r3, #0
     5e6:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     5e8:	4b0e      	ldr	r3, [pc, #56]	; (624 <groundState+0x2b8>)
     5ea:	881b      	ldrh	r3, [r3, #0]
     5ec:	5ce8      	ldrb	r0, [r5, r3]
     5ee:	47a0      	blx	r4
			blinkCursor();
     5f0:	4b0e      	ldr	r3, [pc, #56]	; (62c <groundState+0x2c0>)
     5f2:	4798      	blx	r3
     5f4:	e6fb      	b.n	3ee <groundState+0x82>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     5f6:	4c0a      	ldr	r4, [pc, #40]	; (620 <groundState+0x2b4>)
     5f8:	8822      	ldrh	r2, [r4, #0]
     5fa:	0053      	lsls	r3, r2, #1
     5fc:	189b      	adds	r3, r3, r2
     5fe:	00db      	lsls	r3, r3, #3
     600:	4a06      	ldr	r2, [pc, #24]	; (61c <groundState+0x2b0>)
     602:	18d3      	adds	r3, r2, r3
     604:	7dd8      	ldrb	r0, [r3, #23]
     606:	4b08      	ldr	r3, [pc, #32]	; (628 <groundState+0x2bc>)
     608:	4798      	blx	r3
			xCharPos = 0;
     60a:	2300      	movs	r3, #0
     60c:	8023      	strh	r3, [r4, #0]
			blinkCursor();
     60e:	4b07      	ldr	r3, [pc, #28]	; (62c <groundState+0x2c0>)
     610:	4798      	blx	r3
     612:	e6ec      	b.n	3ee <groundState+0x82>
		currentState = stateESC;
     614:	2201      	movs	r2, #1
     616:	4b09      	ldr	r3, [pc, #36]	; (63c <groundState+0x2d0>)
     618:	701a      	strb	r2, [r3, #0]
     61a:	e6e8      	b.n	3ee <groundState+0x82>
     61c:	2000032c 	.word	0x2000032c
     620:	200002a8 	.word	0x200002a8
     624:	200002aa 	.word	0x200002aa
     628:	0000236d 	.word	0x0000236d
     62c:	00002455 	.word	0x00002455
     630:	00000349 	.word	0x00000349
     634:	20000158 	.word	0x20000158
     638:	000025b1 	.word	0x000025b1
     63c:	200002ad 	.word	0x200002ad

00000640 <parseChar>:
{
     640:	b510      	push	{r4, lr}
	parserState state = currentState;
     642:	4b0a      	ldr	r3, [pc, #40]	; (66c <parseChar+0x2c>)
	switch(state)
     644:	781b      	ldrb	r3, [r3, #0]
     646:	2b01      	cmp	r3, #1
     648:	d007      	beq.n	65a <parseChar+0x1a>
     64a:	2b00      	cmp	r3, #0
     64c:	d002      	beq.n	654 <parseChar+0x14>
     64e:	2b02      	cmp	r3, #2
     650:	d006      	beq.n	660 <parseChar+0x20>
}
     652:	bd10      	pop	{r4, pc}
			groundState(character);
     654:	4b06      	ldr	r3, [pc, #24]	; (670 <parseChar+0x30>)
     656:	4798      	blx	r3
		break;
     658:	e7fb      	b.n	652 <parseChar+0x12>
			escState(character);
     65a:	4b06      	ldr	r3, [pc, #24]	; (674 <parseChar+0x34>)
     65c:	4798      	blx	r3
		break;
     65e:	e7f8      	b.n	652 <parseChar+0x12>
	stateEnterBuffer = 0x00;
     660:	2300      	movs	r3, #0
     662:	4a05      	ldr	r2, [pc, #20]	; (678 <parseChar+0x38>)
     664:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
     666:	4a01      	ldr	r2, [pc, #4]	; (66c <parseChar+0x2c>)
     668:	7013      	strb	r3, [r2, #0]
}
     66a:	e7f2      	b.n	652 <parseChar+0x12>
     66c:	200002ad 	.word	0x200002ad
     670:	0000036d 	.word	0x0000036d
     674:	000001d1 	.word	0x000001d1
     678:	200002bd 	.word	0x200002bd

0000067c <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     67c:	b5f0      	push	{r4, r5, r6, r7, lr}
     67e:	b0c1      	sub	sp, #260	; 0x104
     680:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     682:	22d0      	movs	r2, #208	; 0xd0
     684:	492d      	ldr	r1, [pc, #180]	; (73c <drawKare+0xc0>)
     686:	a80c      	add	r0, sp, #48	; 0x30
     688:	4b2d      	ldr	r3, [pc, #180]	; (740 <drawKare+0xc4>)
     68a:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     68c:	a805      	add	r0, sp, #20
     68e:	4b2d      	ldr	r3, [pc, #180]	; (744 <drawKare+0xc8>)
     690:	001a      	movs	r2, r3
     692:	3250      	adds	r2, #80	; 0x50
     694:	0001      	movs	r1, r0
     696:	ca31      	ldmia	r2!, {r0, r4, r5}
     698:	c131      	stmia	r1!, {r0, r4, r5}
     69a:	ca31      	ldmia	r2!, {r0, r4, r5}
     69c:	c131      	stmia	r1!, {r0, r4, r5}
     69e:	6812      	ldr	r2, [r2, #0]
     6a0:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     6a2:	336c      	adds	r3, #108	; 0x6c
     6a4:	466a      	mov	r2, sp
     6a6:	cb13      	ldmia	r3!, {r0, r1, r4}
     6a8:	c213      	stmia	r2!, {r0, r1, r4}
     6aa:	cb03      	ldmia	r3!, {r0, r1}
     6ac:	c203      	stmia	r2!, {r0, r1}
     6ae:	ac0c      	add	r4, sp, #48	; 0x30
     6b0:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     6b2:	4d25      	ldr	r5, [pc, #148]	; (748 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     6b4:	88e3      	ldrh	r3, [r4, #6]
     6b6:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     6b8:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     6ba:	88a2      	ldrh	r2, [r4, #4]
     6bc:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     6be:	322d      	adds	r2, #45	; 0x2d
     6c0:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     6c2:	8861      	ldrh	r1, [r4, #2]
     6c4:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     6c6:	3196      	adds	r1, #150	; 0x96
     6c8:	8820      	ldrh	r0, [r4, #0]
     6ca:	1040      	asrs	r0, r0, #1
     6cc:	302d      	adds	r0, #45	; 0x2d
     6ce:	30ff      	adds	r0, #255	; 0xff
     6d0:	47a8      	blx	r5
     6d2:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     6d4:	42b4      	cmp	r4, r6
     6d6:	d1ed      	bne.n	6b4 <drawKare+0x38>
	}
	switch(emotion)
     6d8:	2f00      	cmp	r7, #0
     6da:	d003      	beq.n	6e4 <drawKare+0x68>
     6dc:	2f01      	cmp	r7, #1
     6de:	d017      	beq.n	710 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     6e0:	b041      	add	sp, #260	; 0x104
     6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6e4:	ac05      	add	r4, sp, #20
     6e6:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     6e8:	4d17      	ldr	r5, [pc, #92]	; (748 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     6ea:	78e3      	ldrb	r3, [r4, #3]
     6ec:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     6ee:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     6f0:	78a2      	ldrb	r2, [r4, #2]
     6f2:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     6f4:	322d      	adds	r2, #45	; 0x2d
     6f6:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     6f8:	7861      	ldrb	r1, [r4, #1]
     6fa:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     6fc:	3196      	adds	r1, #150	; 0x96
     6fe:	7820      	ldrb	r0, [r4, #0]
     700:	1040      	asrs	r0, r0, #1
     702:	302d      	adds	r0, #45	; 0x2d
     704:	30ff      	adds	r0, #255	; 0xff
     706:	47a8      	blx	r5
     708:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     70a:	42a6      	cmp	r6, r4
     70c:	d1ed      	bne.n	6ea <drawKare+0x6e>
     70e:	e7e7      	b.n	6e0 <drawKare+0x64>
     710:	466c      	mov	r4, sp
     712:	ae05      	add	r6, sp, #20
			fillRect((
     714:	4d0c      	ldr	r5, [pc, #48]	; (748 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     716:	78e3      	ldrb	r3, [r4, #3]
     718:	105b      	asrs	r3, r3, #1
			fillRect((
     71a:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     71c:	78a2      	ldrb	r2, [r4, #2]
     71e:	1052      	asrs	r2, r2, #1
			fillRect((
     720:	322d      	adds	r2, #45	; 0x2d
     722:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     724:	7861      	ldrb	r1, [r4, #1]
     726:	1049      	asrs	r1, r1, #1
			fillRect((
     728:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     72a:	7820      	ldrb	r0, [r4, #0]
     72c:	1040      	asrs	r0, r0, #1
			fillRect((
     72e:	302d      	adds	r0, #45	; 0x2d
     730:	30ff      	adds	r0, #255	; 0xff
     732:	47a8      	blx	r5
     734:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     736:	42b4      	cmp	r4, r6
     738:	d1ed      	bne.n	716 <drawKare+0x9a>
     73a:	e7d1      	b.n	6e0 <drawKare+0x64>
     73c:	00004d1c 	.word	0x00004d1c
     740:	00003a71 	.word	0x00003a71
     744:	00004d9c 	.word	0x00004d9c
     748:	00002ec5 	.word	0x00002ec5

0000074c <splashScreen>:

void splashScreen(void)
{
     74c:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
     74e:	4c49      	ldr	r4, [pc, #292]	; (874 <splashScreen+0x128>)
     750:	4b49      	ldr	r3, [pc, #292]	; (878 <splashScreen+0x12c>)
     752:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
     754:	4b49      	ldr	r3, [pc, #292]	; (87c <splashScreen+0x130>)
     756:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
     758:	4b49      	ldr	r3, [pc, #292]	; (880 <splashScreen+0x134>)
     75a:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
     75c:	4b49      	ldr	r3, [pc, #292]	; (884 <splashScreen+0x138>)
     75e:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Tabs!";//
     760:	4b49      	ldr	r3, [pc, #292]	; (888 <splashScreen+0x13c>)
     762:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
     764:	4b49      	ldr	r3, [pc, #292]	; (88c <splashScreen+0x140>)
     766:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
     768:	4b49      	ldr	r3, [pc, #292]	; (890 <splashScreen+0x144>)
     76a:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     76c:	4b49      	ldr	r3, [pc, #292]	; (894 <splashScreen+0x148>)
     76e:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
     770:	4b49      	ldr	r3, [pc, #292]	; (898 <splashScreen+0x14c>)
     772:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
     774:	4b49      	ldr	r3, [pc, #292]	; (89c <splashScreen+0x150>)
     776:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     778:	4b49      	ldr	r3, [pc, #292]	; (8a0 <splashScreen+0x154>)
     77a:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     77c:	4b49      	ldr	r3, [pc, #292]	; (8a4 <splashScreen+0x158>)
     77e:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     780:	4b49      	ldr	r3, [pc, #292]	; (8a8 <splashScreen+0x15c>)
     782:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
     784:	4b49      	ldr	r3, [pc, #292]	; (8ac <splashScreen+0x160>)
     786:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     788:	4b49      	ldr	r3, [pc, #292]	; (8b0 <splashScreen+0x164>)
     78a:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     78c:	4b49      	ldr	r3, [pc, #292]	; (8b4 <splashScreen+0x168>)
     78e:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     790:	4b49      	ldr	r3, [pc, #292]	; (8b8 <splashScreen+0x16c>)
     792:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     794:	4b49      	ldr	r3, [pc, #292]	; (8bc <splashScreen+0x170>)
     796:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     798:	4b49      	ldr	r3, [pc, #292]	; (8c0 <splashScreen+0x174>)
     79a:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     79c:	4b49      	ldr	r3, [pc, #292]	; (8c4 <splashScreen+0x178>)
     79e:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     7a0:	4b49      	ldr	r3, [pc, #292]	; (8c8 <splashScreen+0x17c>)
     7a2:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     7a4:	4b49      	ldr	r3, [pc, #292]	; (8cc <splashScreen+0x180>)
     7a6:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     7a8:	4b49      	ldr	r3, [pc, #292]	; (8d0 <splashScreen+0x184>)
     7aa:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     7ac:	4b49      	ldr	r3, [pc, #292]	; (8d4 <splashScreen+0x188>)
     7ae:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
     7b0:	4b49      	ldr	r3, [pc, #292]	; (8d8 <splashScreen+0x18c>)
     7b2:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     7b4:	4b49      	ldr	r3, [pc, #292]	; (8dc <splashScreen+0x190>)
     7b6:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
     7b8:	4b49      	ldr	r3, [pc, #292]	; (8e0 <splashScreen+0x194>)
     7ba:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     7bc:	4b49      	ldr	r3, [pc, #292]	; (8e4 <splashScreen+0x198>)
     7be:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     7c0:	4b49      	ldr	r3, [pc, #292]	; (8e8 <splashScreen+0x19c>)
     7c2:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
     7c4:	4b49      	ldr	r3, [pc, #292]	; (8ec <splashScreen+0x1a0>)
     7c6:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     7c8:	4b49      	ldr	r3, [pc, #292]	; (8f0 <splashScreen+0x1a4>)
     7ca:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     7cc:	4b49      	ldr	r3, [pc, #292]	; (8f4 <splashScreen+0x1a8>)
     7ce:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     7d0:	4a49      	ldr	r2, [pc, #292]	; (8f8 <splashScreen+0x1ac>)
     7d2:	2380      	movs	r3, #128	; 0x80
     7d4:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
     7d6:	4b49      	ldr	r3, [pc, #292]	; (8fc <splashScreen+0x1b0>)
     7d8:	4798      	blx	r3
     7da:	17c3      	asrs	r3, r0, #31
     7dc:	0edb      	lsrs	r3, r3, #27
     7de:	18c2      	adds	r2, r0, r3
     7e0:	201f      	movs	r0, #31
     7e2:	4010      	ands	r0, r2
     7e4:	1ac0      	subs	r0, r0, r3
     7e6:	0080      	lsls	r0, r0, #2
     7e8:	5904      	ldr	r4, [r0, r4]


	
	clearScreen();
     7ea:	4b45      	ldr	r3, [pc, #276]	; (900 <splashScreen+0x1b4>)
     7ec:	4798      	blx	r3
	setColorRGB(255,255,255);
     7ee:	22ff      	movs	r2, #255	; 0xff
     7f0:	21ff      	movs	r1, #255	; 0xff
     7f2:	20ff      	movs	r0, #255	; 0xff
     7f4:	4b43      	ldr	r3, [pc, #268]	; (904 <splashScreen+0x1b8>)
     7f6:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     7f8:	2280      	movs	r2, #128	; 0x80
     7fa:	0612      	lsls	r2, r2, #24
     7fc:	4b42      	ldr	r3, [pc, #264]	; (908 <splashScreen+0x1bc>)
     7fe:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     800:	4b42      	ldr	r3, [pc, #264]	; (90c <splashScreen+0x1c0>)
     802:	22df      	movs	r2, #223	; 0xdf
     804:	5c99      	ldrb	r1, [r3, r2]
     806:	2004      	movs	r0, #4
     808:	4301      	orrs	r1, r0
     80a:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     80c:	5c99      	ldrb	r1, [r3, r2]
     80e:	2002      	movs	r0, #2
     810:	4301      	orrs	r1, r0
     812:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     814:	3a3f      	subs	r2, #63	; 0x3f
     816:	589b      	ldr	r3, [r3, r2]
     818:	2b00      	cmp	r3, #0
     81a:	db26      	blt.n	86a <splashScreen+0x11e>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     81c:	2000      	movs	r0, #0
     81e:	4b3c      	ldr	r3, [pc, #240]	; (910 <splashScreen+0x1c4>)
     820:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     822:	0020      	movs	r0, r4
     824:	4b3b      	ldr	r3, [pc, #236]	; (914 <splashScreen+0x1c8>)
     826:	4798      	blx	r3
     828:	4e3b      	ldr	r6, [pc, #236]	; (918 <splashScreen+0x1cc>)
     82a:	0840      	lsrs	r0, r0, #1
     82c:	2328      	movs	r3, #40	; 0x28
     82e:	1a18      	subs	r0, r3, r0
     830:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
     832:	4d3a      	ldr	r5, [pc, #232]	; (91c <splashScreen+0x1d0>)
     834:	2310      	movs	r3, #16
     836:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
     838:	0020      	movs	r0, r4
     83a:	4b39      	ldr	r3, [pc, #228]	; (920 <splashScreen+0x1d4>)
     83c:	4798      	blx	r3
	xCharPos = 40 - (strlen(versionLabel)/2);
	yCharPos = 18;
	
	writeString(versionLabel);
	*/
	delay_ms(2000);
     83e:	20fa      	movs	r0, #250	; 0xfa
     840:	00c0      	lsls	r0, r0, #3
     842:	4b38      	ldr	r3, [pc, #224]	; (924 <splashScreen+0x1d8>)
     844:	4798      	blx	r3
		
	clearScreen();
     846:	4b2e      	ldr	r3, [pc, #184]	; (900 <splashScreen+0x1b4>)
     848:	4798      	blx	r3
	nullifyConsole();
     84a:	4b37      	ldr	r3, [pc, #220]	; (928 <splashScreen+0x1dc>)
     84c:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     84e:	2200      	movs	r2, #0
     850:	21ff      	movs	r1, #255	; 0xff
     852:	2000      	movs	r0, #0
     854:	4b2b      	ldr	r3, [pc, #172]	; (904 <splashScreen+0x1b8>)
     856:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     858:	2200      	movs	r2, #0
     85a:	2100      	movs	r1, #0
     85c:	2000      	movs	r0, #0
     85e:	4b33      	ldr	r3, [pc, #204]	; (92c <splashScreen+0x1e0>)
     860:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     862:	2300      	movs	r3, #0
     864:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
     866:	802b      	strh	r3, [r5, #0]
	

     868:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     86a:	2001      	movs	r0, #1
     86c:	4b28      	ldr	r3, [pc, #160]	; (910 <splashScreen+0x1c4>)
     86e:	4798      	blx	r3
     870:	e7d7      	b.n	822 <splashScreen+0xd6>
     872:	46c0      	nop			; (mov r8, r8)
     874:	200001e8 	.word	0x200001e8
     878:	00004e1c 	.word	0x00004e1c
     87c:	00004e3c 	.word	0x00004e3c
     880:	00004e50 	.word	0x00004e50
     884:	00004e68 	.word	0x00004e68
     888:	00004e78 	.word	0x00004e78
     88c:	00004e80 	.word	0x00004e80
     890:	00004ea8 	.word	0x00004ea8
     894:	00004ed4 	.word	0x00004ed4
     898:	00004efc 	.word	0x00004efc
     89c:	00004f28 	.word	0x00004f28
     8a0:	00004f34 	.word	0x00004f34
     8a4:	00004f4c 	.word	0x00004f4c
     8a8:	00004f6c 	.word	0x00004f6c
     8ac:	00004f8c 	.word	0x00004f8c
     8b0:	00004fb0 	.word	0x00004fb0
     8b4:	00004fc0 	.word	0x00004fc0
     8b8:	00004fcc 	.word	0x00004fcc
     8bc:	00004fe8 	.word	0x00004fe8
     8c0:	00005008 	.word	0x00005008
     8c4:	00005010 	.word	0x00005010
     8c8:	00005024 	.word	0x00005024
     8cc:	00005040 	.word	0x00005040
     8d0:	00005050 	.word	0x00005050
     8d4:	00005074 	.word	0x00005074
     8d8:	000050a0 	.word	0x000050a0
     8dc:	000050cc 	.word	0x000050cc
     8e0:	000050e0 	.word	0x000050e0
     8e4:	00005100 	.word	0x00005100
     8e8:	00005114 	.word	0x00005114
     8ec:	00005130 	.word	0x00005130
     8f0:	00005140 	.word	0x00005140
     8f4:	00005164 	.word	0x00005164
     8f8:	00005184 	.word	0x00005184
     8fc:	00003c9d 	.word	0x00003c9d
     900:	00002f95 	.word	0x00002f95
     904:	00002d89 	.word	0x00002d89
     908:	4100448c 	.word	0x4100448c
     90c:	41004400 	.word	0x41004400
     910:	0000067d 	.word	0x0000067d
     914:	00003ea5 	.word	0x00003ea5
     918:	200002a8 	.word	0x200002a8
     91c:	200002aa 	.word	0x200002aa
     920:	0000266d 	.word	0x0000266d
     924:	000009c5 	.word	0x000009c5
     928:	000026b5 	.word	0x000026b5
     92c:	00002db1 	.word	0x00002db1

00000930 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
     930:	b5f0      	push	{r4, r5, r6, r7, lr}
     932:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
     934:	4e0b      	ldr	r6, [pc, #44]	; (964 <parseRXBuffer+0x34>)
     936:	4d0c      	ldr	r5, [pc, #48]	; (968 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
     938:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
     93a:	e008      	b.n	94e <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
     93c:	466b      	mov	r3, sp
     93e:	1ddc      	adds	r4, r3, #7
     940:	0021      	movs	r1, r4
     942:	6838      	ldr	r0, [r7, #0]
     944:	4b09      	ldr	r3, [pc, #36]	; (96c <parseRXBuffer+0x3c>)
     946:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
     948:	7820      	ldrb	r0, [r4, #0]
     94a:	4b09      	ldr	r3, [pc, #36]	; (970 <parseRXBuffer+0x40>)
     94c:	4798      	blx	r3
		while(!ring_empty(ouroboros))
     94e:	6830      	ldr	r0, [r6, #0]
     950:	47a8      	blx	r5
     952:	2800      	cmp	r0, #0
     954:	d0f2      	beq.n	93c <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
     956:	4b03      	ldr	r3, [pc, #12]	; (964 <parseRXBuffer+0x34>)
     958:	6818      	ldr	r0, [r3, #0]
     95a:	4b06      	ldr	r3, [pc, #24]	; (974 <parseRXBuffer+0x44>)
     95c:	4798      	blx	r3
}
     95e:	b003      	add	sp, #12
     960:	bdf0      	pop	{r4, r5, r6, r7, pc}
     962:	46c0      	nop			; (mov r8, r8)
     964:	200002c8 	.word	0x200002c8
     968:	0000017d 	.word	0x0000017d
     96c:	00000195 	.word	0x00000195
     970:	00000641 	.word	0x00000641
     974:	00000135 	.word	0x00000135

00000978 <sendChar>:

void sendChar(char character)
{
     978:	b510      	push	{r4, lr}
	printf("%c", character);
     97a:	4b01      	ldr	r3, [pc, #4]	; (980 <sendChar+0x8>)
     97c:	4798      	blx	r3
     97e:	bd10      	pop	{r4, pc}
     980:	00003c19 	.word	0x00003c19

00000984 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     984:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     986:	2000      	movs	r0, #0
     988:	4b08      	ldr	r3, [pc, #32]	; (9ac <delay_init+0x28>)
     98a:	4798      	blx	r3
     98c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     98e:	4c08      	ldr	r4, [pc, #32]	; (9b0 <delay_init+0x2c>)
     990:	21fa      	movs	r1, #250	; 0xfa
     992:	0089      	lsls	r1, r1, #2
     994:	47a0      	blx	r4
     996:	4b07      	ldr	r3, [pc, #28]	; (9b4 <delay_init+0x30>)
     998:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     99a:	4907      	ldr	r1, [pc, #28]	; (9b8 <delay_init+0x34>)
     99c:	0028      	movs	r0, r5
     99e:	47a0      	blx	r4
     9a0:	4b06      	ldr	r3, [pc, #24]	; (9bc <delay_init+0x38>)
     9a2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     9a4:	2205      	movs	r2, #5
     9a6:	4b06      	ldr	r3, [pc, #24]	; (9c0 <delay_init+0x3c>)
     9a8:	601a      	str	r2, [r3, #0]
}
     9aa:	bd70      	pop	{r4, r5, r6, pc}
     9ac:	00001f45 	.word	0x00001f45
     9b0:	000036d5 	.word	0x000036d5
     9b4:	20000000 	.word	0x20000000
     9b8:	000f4240 	.word	0x000f4240
     9bc:	20000004 	.word	0x20000004
     9c0:	e000e010 	.word	0xe000e010

000009c4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     9c4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     9c6:	4b08      	ldr	r3, [pc, #32]	; (9e8 <delay_cycles_ms+0x24>)
     9c8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     9ca:	4a08      	ldr	r2, [pc, #32]	; (9ec <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     9cc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9ce:	2180      	movs	r1, #128	; 0x80
     9d0:	0249      	lsls	r1, r1, #9
	while (n--) {
     9d2:	3801      	subs	r0, #1
     9d4:	d307      	bcc.n	9e6 <delay_cycles_ms+0x22>
	if (n > 0) {
     9d6:	2c00      	cmp	r4, #0
     9d8:	d0fb      	beq.n	9d2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     9da:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     9dc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     9de:	6813      	ldr	r3, [r2, #0]
     9e0:	420b      	tst	r3, r1
     9e2:	d0fc      	beq.n	9de <delay_cycles_ms+0x1a>
     9e4:	e7f5      	b.n	9d2 <delay_cycles_ms+0xe>
	}
}
     9e6:	bd30      	pop	{r4, r5, pc}
     9e8:	20000000 	.word	0x20000000
     9ec:	e000e010 	.word	0xe000e010

000009f0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     9f0:	4b0c      	ldr	r3, [pc, #48]	; (a24 <cpu_irq_enter_critical+0x34>)
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	2b00      	cmp	r3, #0
     9f6:	d106      	bne.n	a06 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9f8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     9fc:	2b00      	cmp	r3, #0
     9fe:	d007      	beq.n	a10 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     a00:	2200      	movs	r2, #0
     a02:	4b09      	ldr	r3, [pc, #36]	; (a28 <cpu_irq_enter_critical+0x38>)
     a04:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     a06:	4a07      	ldr	r2, [pc, #28]	; (a24 <cpu_irq_enter_critical+0x34>)
     a08:	6813      	ldr	r3, [r2, #0]
     a0a:	3301      	adds	r3, #1
     a0c:	6013      	str	r3, [r2, #0]
}
     a0e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     a10:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     a12:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     a16:	2200      	movs	r2, #0
     a18:	4b04      	ldr	r3, [pc, #16]	; (a2c <cpu_irq_enter_critical+0x3c>)
     a1a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     a1c:	3201      	adds	r2, #1
     a1e:	4b02      	ldr	r3, [pc, #8]	; (a28 <cpu_irq_enter_critical+0x38>)
     a20:	701a      	strb	r2, [r3, #0]
     a22:	e7f0      	b.n	a06 <cpu_irq_enter_critical+0x16>
     a24:	20000268 	.word	0x20000268
     a28:	2000026c 	.word	0x2000026c
     a2c:	20000008 	.word	0x20000008

00000a30 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     a30:	4b08      	ldr	r3, [pc, #32]	; (a54 <cpu_irq_leave_critical+0x24>)
     a32:	681a      	ldr	r2, [r3, #0]
     a34:	3a01      	subs	r2, #1
     a36:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     a38:	681b      	ldr	r3, [r3, #0]
     a3a:	2b00      	cmp	r3, #0
     a3c:	d109      	bne.n	a52 <cpu_irq_leave_critical+0x22>
     a3e:	4b06      	ldr	r3, [pc, #24]	; (a58 <cpu_irq_leave_critical+0x28>)
     a40:	781b      	ldrb	r3, [r3, #0]
     a42:	2b00      	cmp	r3, #0
     a44:	d005      	beq.n	a52 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     a46:	2201      	movs	r2, #1
     a48:	4b04      	ldr	r3, [pc, #16]	; (a5c <cpu_irq_leave_critical+0x2c>)
     a4a:	701a      	strb	r2, [r3, #0]
     a4c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     a50:	b662      	cpsie	i
	}
}
     a52:	4770      	bx	lr
     a54:	20000268 	.word	0x20000268
     a58:	2000026c 	.word	0x2000026c
     a5c:	20000008 	.word	0x20000008

00000a60 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     a60:	b5f0      	push	{r4, r5, r6, r7, lr}
     a62:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     a64:	ac01      	add	r4, sp, #4
     a66:	2501      	movs	r5, #1
     a68:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     a6a:	2700      	movs	r7, #0
     a6c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     a6e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     a70:	0021      	movs	r1, r4
     a72:	203e      	movs	r0, #62	; 0x3e
     a74:	4e06      	ldr	r6, [pc, #24]	; (a90 <system_board_init+0x30>)
     a76:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a78:	2280      	movs	r2, #128	; 0x80
     a7a:	05d2      	lsls	r2, r2, #23
     a7c:	4b05      	ldr	r3, [pc, #20]	; (a94 <system_board_init+0x34>)
     a7e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     a80:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     a82:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     a84:	0021      	movs	r1, r4
     a86:	200f      	movs	r0, #15
     a88:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     a8a:	b003      	add	sp, #12
     a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	00000fc9 	.word	0x00000fc9
     a94:	41004480 	.word	0x41004480

00000a98 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     a98:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     a9a:	2200      	movs	r2, #0
     a9c:	2300      	movs	r3, #0
     a9e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     aa0:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     aa2:	2100      	movs	r1, #0
     aa4:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     aa6:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     aa8:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     aaa:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     aac:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     aae:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     ab0:	24c0      	movs	r4, #192	; 0xc0
     ab2:	0164      	lsls	r4, r4, #5
     ab4:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     ab6:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     ab8:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     aba:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     abc:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     abe:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     ac0:	242a      	movs	r4, #42	; 0x2a
     ac2:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     ac4:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     ac6:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     ac8:	3c06      	subs	r4, #6
     aca:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     acc:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     ace:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     ad0:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     ad2:	232b      	movs	r3, #43	; 0x2b
     ad4:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     ad6:	3301      	adds	r3, #1
     ad8:	54c1      	strb	r1, [r0, r3]
}
     ada:	bd10      	pop	{r4, pc}

00000adc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     adc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ade:	46d6      	mov	lr, sl
     ae0:	464f      	mov	r7, r9
     ae2:	4646      	mov	r6, r8
     ae4:	b5c0      	push	{r6, r7, lr}
     ae6:	b096      	sub	sp, #88	; 0x58
     ae8:	0007      	movs	r7, r0
     aea:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     aec:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     aee:	4ac6      	ldr	r2, [pc, #792]	; (e08 <adc_init+0x32c>)
     af0:	6a10      	ldr	r0, [r2, #32]
     af2:	2380      	movs	r3, #128	; 0x80
     af4:	025b      	lsls	r3, r3, #9
     af6:	4303      	orrs	r3, r0
     af8:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     afa:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     afc:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     afe:	07db      	lsls	r3, r3, #31
     b00:	d505      	bpl.n	b0e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     b02:	b016      	add	sp, #88	; 0x58
     b04:	bc1c      	pop	{r2, r3, r4}
     b06:	4690      	mov	r8, r2
     b08:	4699      	mov	r9, r3
     b0a:	46a2      	mov	sl, r4
     b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     b0e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     b10:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     b12:	079b      	lsls	r3, r3, #30
     b14:	d4f5      	bmi.n	b02 <adc_init+0x26>
	module_inst->reference = config->reference;
     b16:	7873      	ldrb	r3, [r6, #1]
     b18:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     b1a:	2b00      	cmp	r3, #0
     b1c:	d104      	bne.n	b28 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     b1e:	4abb      	ldr	r2, [pc, #748]	; (e0c <adc_init+0x330>)
     b20:	6c13      	ldr	r3, [r2, #64]	; 0x40
     b22:	2104      	movs	r1, #4
     b24:	430b      	orrs	r3, r1
     b26:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     b28:	2300      	movs	r3, #0
     b2a:	60bb      	str	r3, [r7, #8]
     b2c:	60fb      	str	r3, [r7, #12]
     b2e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     b30:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     b32:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     b34:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     b36:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     b38:	4bb5      	ldr	r3, [pc, #724]	; (e10 <adc_init+0x334>)
     b3a:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     b3c:	232a      	movs	r3, #42	; 0x2a
     b3e:	5cf3      	ldrb	r3, [r6, r3]
     b40:	2b00      	cmp	r3, #0
     b42:	d105      	bne.n	b50 <adc_init+0x74>
     b44:	7d33      	ldrb	r3, [r6, #20]
     b46:	2b00      	cmp	r3, #0
     b48:	d102      	bne.n	b50 <adc_init+0x74>
		module_inst->software_trigger = true;
     b4a:	3301      	adds	r3, #1
     b4c:	777b      	strb	r3, [r7, #29]
     b4e:	e001      	b.n	b54 <adc_init+0x78>
		module_inst->software_trigger = false;
     b50:	2300      	movs	r3, #0
     b52:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     b54:	683b      	ldr	r3, [r7, #0]
     b56:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     b58:	7833      	ldrb	r3, [r6, #0]
     b5a:	466a      	mov	r2, sp
     b5c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     b5e:	4669      	mov	r1, sp
     b60:	201e      	movs	r0, #30
     b62:	4bac      	ldr	r3, [pc, #688]	; (e14 <adc_init+0x338>)
     b64:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     b66:	201e      	movs	r0, #30
     b68:	4bab      	ldr	r3, [pc, #684]	; (e18 <adc_init+0x33c>)
     b6a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     b6c:	232c      	movs	r3, #44	; 0x2c
     b6e:	5cf2      	ldrb	r2, [r6, r3]
     b70:	2a00      	cmp	r2, #0
     b72:	d054      	beq.n	c1e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     b74:	3b01      	subs	r3, #1
     b76:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     b78:	7b33      	ldrb	r3, [r6, #12]
     b7a:	18eb      	adds	r3, r5, r3
     b7c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     b7e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     b80:	b2c9      	uxtb	r1, r1
     b82:	428b      	cmp	r3, r1
     b84:	d221      	bcs.n	bca <adc_init+0xee>
     b86:	1952      	adds	r2, r2, r5
     b88:	b2d3      	uxtb	r3, r2
     b8a:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     b8c:	4ba3      	ldr	r3, [pc, #652]	; (e1c <adc_init+0x340>)
     b8e:	469a      	mov	sl, r3
     b90:	e003      	b.n	b9a <adc_init+0xbe>
			offset++;
     b92:	3501      	adds	r5, #1
     b94:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     b96:	454d      	cmp	r5, r9
     b98:	d017      	beq.n	bca <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     b9a:	240f      	movs	r4, #15
     b9c:	402c      	ands	r4, r5
     b9e:	7b33      	ldrb	r3, [r6, #12]
     ba0:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     ba2:	2250      	movs	r2, #80	; 0x50
     ba4:	499e      	ldr	r1, [pc, #632]	; (e20 <adc_init+0x344>)
     ba6:	a802      	add	r0, sp, #8
     ba8:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     baa:	2c13      	cmp	r4, #19
     bac:	d8f1      	bhi.n	b92 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     bae:	00a4      	lsls	r4, r4, #2
     bb0:	ab02      	add	r3, sp, #8
     bb2:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     bb4:	a901      	add	r1, sp, #4
     bb6:	2300      	movs	r3, #0
     bb8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     bba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     bbc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     bbe:	3301      	adds	r3, #1
     bc0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     bc2:	b2c0      	uxtb	r0, r0
     bc4:	4b97      	ldr	r3, [pc, #604]	; (e24 <adc_init+0x348>)
     bc6:	4798      	blx	r3
     bc8:	e7e3      	b.n	b92 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     bca:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     bcc:	2250      	movs	r2, #80	; 0x50
     bce:	4994      	ldr	r1, [pc, #592]	; (e20 <adc_init+0x344>)
     bd0:	a802      	add	r0, sp, #8
     bd2:	4b92      	ldr	r3, [pc, #584]	; (e1c <adc_init+0x340>)
     bd4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     bd6:	2c13      	cmp	r4, #19
     bd8:	d913      	bls.n	c02 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     bda:	7d73      	ldrb	r3, [r6, #21]
     bdc:	009b      	lsls	r3, r3, #2
     bde:	b2db      	uxtb	r3, r3
     be0:	4642      	mov	r2, r8
     be2:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     be4:	7db3      	ldrb	r3, [r6, #22]
     be6:	01db      	lsls	r3, r3, #7
     be8:	7872      	ldrb	r2, [r6, #1]
     bea:	4313      	orrs	r3, r2
     bec:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     bee:	4642      	mov	r2, r8
     bf0:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     bf2:	7933      	ldrb	r3, [r6, #4]
     bf4:	2b34      	cmp	r3, #52	; 0x34
     bf6:	d900      	bls.n	bfa <adc_init+0x11e>
     bf8:	e17b      	b.n	ef2 <adc_init+0x416>
     bfa:	009b      	lsls	r3, r3, #2
     bfc:	4a8a      	ldr	r2, [pc, #552]	; (e28 <adc_init+0x34c>)
     bfe:	58d3      	ldr	r3, [r2, r3]
     c00:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     c02:	00a4      	lsls	r4, r4, #2
     c04:	ab02      	add	r3, sp, #8
     c06:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c08:	a901      	add	r1, sp, #4
     c0a:	2300      	movs	r3, #0
     c0c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     c0e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     c10:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     c12:	3301      	adds	r3, #1
     c14:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     c16:	b2c0      	uxtb	r0, r0
     c18:	4b82      	ldr	r3, [pc, #520]	; (e24 <adc_init+0x348>)
     c1a:	4798      	blx	r3
     c1c:	e7dd      	b.n	bda <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     c1e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     c20:	2250      	movs	r2, #80	; 0x50
     c22:	497f      	ldr	r1, [pc, #508]	; (e20 <adc_init+0x344>)
     c24:	a802      	add	r0, sp, #8
     c26:	4b7d      	ldr	r3, [pc, #500]	; (e1c <adc_init+0x340>)
     c28:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     c2a:	2c13      	cmp	r4, #19
     c2c:	d915      	bls.n	c5a <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     c2e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     c30:	2250      	movs	r2, #80	; 0x50
     c32:	497b      	ldr	r1, [pc, #492]	; (e20 <adc_init+0x344>)
     c34:	a802      	add	r0, sp, #8
     c36:	4b79      	ldr	r3, [pc, #484]	; (e1c <adc_init+0x340>)
     c38:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     c3a:	2c13      	cmp	r4, #19
     c3c:	d8cd      	bhi.n	bda <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     c3e:	00a4      	lsls	r4, r4, #2
     c40:	ab02      	add	r3, sp, #8
     c42:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c44:	a901      	add	r1, sp, #4
     c46:	2300      	movs	r3, #0
     c48:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     c4a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     c4c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     c4e:	3301      	adds	r3, #1
     c50:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     c52:	b2c0      	uxtb	r0, r0
     c54:	4b73      	ldr	r3, [pc, #460]	; (e24 <adc_init+0x348>)
     c56:	4798      	blx	r3
     c58:	e7bf      	b.n	bda <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     c5a:	00a4      	lsls	r4, r4, #2
     c5c:	ab02      	add	r3, sp, #8
     c5e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c60:	a901      	add	r1, sp, #4
     c62:	2300      	movs	r3, #0
     c64:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     c66:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     c68:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     c6a:	3301      	adds	r3, #1
     c6c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     c6e:	b2c0      	uxtb	r0, r0
     c70:	4b6c      	ldr	r3, [pc, #432]	; (e24 <adc_init+0x348>)
     c72:	4798      	blx	r3
     c74:	e7db      	b.n	c2e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     c76:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     c78:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     c7a:	2102      	movs	r1, #2
     c7c:	e01a      	b.n	cb4 <adc_init+0x1d8>
		adjres = config->divide_result;
     c7e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     c80:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     c82:	2410      	movs	r4, #16
     c84:	e016      	b.n	cb4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     c86:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     c88:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     c8a:	2101      	movs	r1, #1
     c8c:	e012      	b.n	cb4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     c8e:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     c90:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     c92:	2100      	movs	r1, #0
     c94:	e00e      	b.n	cb4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     c96:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     c98:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     c9a:	2100      	movs	r1, #0
     c9c:	e00a      	b.n	cb4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     c9e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     ca0:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     ca2:	2100      	movs	r1, #0
     ca4:	e006      	b.n	cb4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     ca6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     ca8:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     caa:	2100      	movs	r1, #0
     cac:	e002      	b.n	cb4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     cae:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     cb0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     cb2:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     cb4:	0109      	lsls	r1, r1, #4
     cb6:	2270      	movs	r2, #112	; 0x70
     cb8:	400a      	ands	r2, r1
     cba:	4313      	orrs	r3, r2
     cbc:	4642      	mov	r2, r8
     cbe:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     cc0:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     cc2:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     cc4:	2b3f      	cmp	r3, #63	; 0x3f
     cc6:	d900      	bls.n	cca <adc_init+0x1ee>
     cc8:	e71b      	b.n	b02 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     cca:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     ccc:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     cce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     cd0:	b25b      	sxtb	r3, r3
     cd2:	2b00      	cmp	r3, #0
     cd4:	dbfb      	blt.n	cce <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     cd6:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     cd8:	8872      	ldrh	r2, [r6, #2]
     cda:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     cdc:	2224      	movs	r2, #36	; 0x24
     cde:	5cb2      	ldrb	r2, [r6, r2]
     ce0:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     ce2:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     ce4:	7d32      	ldrb	r2, [r6, #20]
     ce6:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     ce8:	4313      	orrs	r3, r2
     cea:	7cb2      	ldrb	r2, [r6, #18]
     cec:	0052      	lsls	r2, r2, #1
     cee:	4313      	orrs	r3, r2
     cf0:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     cf2:	4642      	mov	r2, r8
     cf4:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     cf6:	7e33      	ldrb	r3, [r6, #24]
     cf8:	2b00      	cmp	r3, #0
     cfa:	d020      	beq.n	d3e <adc_init+0x262>
		switch (resolution) {
     cfc:	2c10      	cmp	r4, #16
     cfe:	d100      	bne.n	d02 <adc_init+0x226>
     d00:	e0d9      	b.n	eb6 <adc_init+0x3da>
     d02:	d800      	bhi.n	d06 <adc_init+0x22a>
     d04:	e098      	b.n	e38 <adc_init+0x35c>
     d06:	2c20      	cmp	r4, #32
     d08:	d100      	bne.n	d0c <adc_init+0x230>
     d0a:	e0b6      	b.n	e7a <adc_init+0x39e>
     d0c:	2c30      	cmp	r4, #48	; 0x30
     d0e:	d116      	bne.n	d3e <adc_init+0x262>
			if (config->differential_mode &&
     d10:	7cf2      	ldrb	r2, [r6, #19]
     d12:	2a00      	cmp	r2, #0
     d14:	d00a      	beq.n	d2c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     d16:	69f2      	ldr	r2, [r6, #28]
     d18:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     d1a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     d1c:	2aff      	cmp	r2, #255	; 0xff
     d1e:	d900      	bls.n	d22 <adc_init+0x246>
     d20:	e6ef      	b.n	b02 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     d22:	6a32      	ldr	r2, [r6, #32]
     d24:	3280      	adds	r2, #128	; 0x80
     d26:	2aff      	cmp	r2, #255	; 0xff
     d28:	d900      	bls.n	d2c <adc_init+0x250>
     d2a:	e6ea      	b.n	b02 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     d2c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     d2e:	69f2      	ldr	r2, [r6, #28]
     d30:	2aff      	cmp	r2, #255	; 0xff
     d32:	dd00      	ble.n	d36 <adc_init+0x25a>
     d34:	e6e5      	b.n	b02 <adc_init+0x26>
     d36:	6a32      	ldr	r2, [r6, #32]
     d38:	2aff      	cmp	r2, #255	; 0xff
     d3a:	dd00      	ble.n	d3e <adc_init+0x262>
     d3c:	e6e1      	b.n	b02 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     d3e:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d40:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     d42:	b252      	sxtb	r2, r2
     d44:	2a00      	cmp	r2, #0
     d46:	dbfb      	blt.n	d40 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     d48:	4642      	mov	r2, r8
     d4a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     d4c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d4e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     d50:	b25b      	sxtb	r3, r3
     d52:	2b00      	cmp	r3, #0
     d54:	dbfb      	blt.n	d4e <adc_init+0x272>
	adc_module->WINLT.reg =
     d56:	8bb3      	ldrh	r3, [r6, #28]
     d58:	4642      	mov	r2, r8
     d5a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     d5c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d5e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     d60:	b25b      	sxtb	r3, r3
     d62:	2b00      	cmp	r3, #0
     d64:	dbfb      	blt.n	d5e <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     d66:	8c33      	ldrh	r3, [r6, #32]
     d68:	4642      	mov	r2, r8
     d6a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     d6c:	232c      	movs	r3, #44	; 0x2c
     d6e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     d70:	2b00      	cmp	r3, #0
     d72:	d005      	beq.n	d80 <adc_init+0x2a4>
		inputs_to_scan--;
     d74:	3b01      	subs	r3, #1
     d76:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     d78:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     d7a:	2b0f      	cmp	r3, #15
     d7c:	d900      	bls.n	d80 <adc_init+0x2a4>
     d7e:	e6c0      	b.n	b02 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     d80:	222b      	movs	r2, #43	; 0x2b
     d82:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     d84:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     d86:	290f      	cmp	r1, #15
     d88:	d900      	bls.n	d8c <adc_init+0x2b0>
     d8a:	e6ba      	b.n	b02 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     d8c:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d8e:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     d90:	b252      	sxtb	r2, r2
     d92:	2a00      	cmp	r2, #0
     d94:	dbfb      	blt.n	d8e <adc_init+0x2b2>
			config->negative_input |
     d96:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     d98:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     d9a:	4302      	orrs	r2, r0
     d9c:	68b0      	ldr	r0, [r6, #8]
     d9e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     da0:	0509      	lsls	r1, r1, #20
			config->negative_input |
     da2:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     da4:	041b      	lsls	r3, r3, #16
			config->negative_input |
     da6:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     da8:	4642      	mov	r2, r8
     daa:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     dac:	232a      	movs	r3, #42	; 0x2a
     dae:	5cf3      	ldrb	r3, [r6, r3]
     db0:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     db2:	230f      	movs	r3, #15
     db4:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     db6:	3315      	adds	r3, #21
     db8:	5cf3      	ldrb	r3, [r6, r3]
     dba:	2b00      	cmp	r3, #0
     dbc:	d012      	beq.n	de4 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     dbe:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     dc0:	4a1a      	ldr	r2, [pc, #104]	; (e2c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     dc2:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     dc4:	4293      	cmp	r3, r2
     dc6:	d900      	bls.n	dca <adc_init+0x2ee>
     dc8:	e69b      	b.n	b02 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     dca:	4642      	mov	r2, r8
     dcc:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     dce:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     dd0:	2380      	movs	r3, #128	; 0x80
     dd2:	011b      	lsls	r3, r3, #4
     dd4:	18d3      	adds	r3, r2, r3
     dd6:	4915      	ldr	r1, [pc, #84]	; (e2c <adc_init+0x350>)
     dd8:	b29b      	uxth	r3, r3
     dda:	428b      	cmp	r3, r1
     ddc:	d900      	bls.n	de0 <adc_init+0x304>
     dde:	e690      	b.n	b02 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     de0:	4643      	mov	r3, r8
     de2:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     de4:	4b12      	ldr	r3, [pc, #72]	; (e30 <adc_init+0x354>)
     de6:	681b      	ldr	r3, [r3, #0]
     de8:	015b      	lsls	r3, r3, #5
     dea:	22e0      	movs	r2, #224	; 0xe0
     dec:	00d2      	lsls	r2, r2, #3
     dee:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     df0:	4a10      	ldr	r2, [pc, #64]	; (e34 <adc_init+0x358>)
     df2:	6851      	ldr	r1, [r2, #4]
     df4:	0149      	lsls	r1, r1, #5
     df6:	6812      	ldr	r2, [r2, #0]
     df8:	0ed2      	lsrs	r2, r2, #27
     dfa:	430a      	orrs	r2, r1
     dfc:	b2d2      	uxtb	r2, r2
			) |
     dfe:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     e00:	4642      	mov	r2, r8
     e02:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     e04:	2000      	movs	r0, #0
     e06:	e67c      	b.n	b02 <adc_init+0x26>
     e08:	40000400 	.word	0x40000400
     e0c:	40000800 	.word	0x40000800
     e10:	200002cc 	.word	0x200002cc
     e14:	0000205d 	.word	0x0000205d
     e18:	00001fd1 	.word	0x00001fd1
     e1c:	00003a71 	.word	0x00003a71
     e20:	00005278 	.word	0x00005278
     e24:	00002155 	.word	0x00002155
     e28:	000051a4 	.word	0x000051a4
     e2c:	00000fff 	.word	0x00000fff
     e30:	00806024 	.word	0x00806024
     e34:	00806020 	.word	0x00806020
		switch (resolution) {
     e38:	2c00      	cmp	r4, #0
     e3a:	d000      	beq.n	e3e <adc_init+0x362>
     e3c:	e77f      	b.n	d3e <adc_init+0x262>
			if (config->differential_mode &&
     e3e:	7cf2      	ldrb	r2, [r6, #19]
     e40:	2a00      	cmp	r2, #0
     e42:	d00f      	beq.n	e64 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     e44:	69f2      	ldr	r2, [r6, #28]
     e46:	2180      	movs	r1, #128	; 0x80
     e48:	0109      	lsls	r1, r1, #4
     e4a:	468c      	mov	ip, r1
     e4c:	4462      	add	r2, ip
			if (config->differential_mode &&
     e4e:	492a      	ldr	r1, [pc, #168]	; (ef8 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     e50:	2017      	movs	r0, #23
			if (config->differential_mode &&
     e52:	428a      	cmp	r2, r1
     e54:	d900      	bls.n	e58 <adc_init+0x37c>
     e56:	e654      	b.n	b02 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     e58:	6a32      	ldr	r2, [r6, #32]
     e5a:	4462      	add	r2, ip
     e5c:	4926      	ldr	r1, [pc, #152]	; (ef8 <adc_init+0x41c>)
     e5e:	428a      	cmp	r2, r1
     e60:	d900      	bls.n	e64 <adc_init+0x388>
     e62:	e64e      	b.n	b02 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     e64:	4a24      	ldr	r2, [pc, #144]	; (ef8 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     e66:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     e68:	69f1      	ldr	r1, [r6, #28]
     e6a:	4291      	cmp	r1, r2
     e6c:	dd00      	ble.n	e70 <adc_init+0x394>
     e6e:	e648      	b.n	b02 <adc_init+0x26>
     e70:	6a31      	ldr	r1, [r6, #32]
     e72:	4291      	cmp	r1, r2
     e74:	dd00      	ble.n	e78 <adc_init+0x39c>
     e76:	e644      	b.n	b02 <adc_init+0x26>
     e78:	e761      	b.n	d3e <adc_init+0x262>
			if (config->differential_mode &&
     e7a:	7cf2      	ldrb	r2, [r6, #19]
     e7c:	2a00      	cmp	r2, #0
     e7e:	d00f      	beq.n	ea0 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     e80:	69f2      	ldr	r2, [r6, #28]
     e82:	2180      	movs	r1, #128	; 0x80
     e84:	0089      	lsls	r1, r1, #2
     e86:	468c      	mov	ip, r1
     e88:	4462      	add	r2, ip
			if (config->differential_mode &&
     e8a:	491c      	ldr	r1, [pc, #112]	; (efc <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     e8c:	2017      	movs	r0, #23
			if (config->differential_mode &&
     e8e:	428a      	cmp	r2, r1
     e90:	d900      	bls.n	e94 <adc_init+0x3b8>
     e92:	e636      	b.n	b02 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     e94:	6a32      	ldr	r2, [r6, #32]
     e96:	4462      	add	r2, ip
     e98:	4918      	ldr	r1, [pc, #96]	; (efc <adc_init+0x420>)
     e9a:	428a      	cmp	r2, r1
     e9c:	d900      	bls.n	ea0 <adc_init+0x3c4>
     e9e:	e630      	b.n	b02 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     ea0:	4a16      	ldr	r2, [pc, #88]	; (efc <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     ea2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     ea4:	69f1      	ldr	r1, [r6, #28]
     ea6:	4291      	cmp	r1, r2
     ea8:	dd00      	ble.n	eac <adc_init+0x3d0>
     eaa:	e62a      	b.n	b02 <adc_init+0x26>
     eac:	6a31      	ldr	r1, [r6, #32]
     eae:	4291      	cmp	r1, r2
     eb0:	dd00      	ble.n	eb4 <adc_init+0x3d8>
     eb2:	e626      	b.n	b02 <adc_init+0x26>
     eb4:	e743      	b.n	d3e <adc_init+0x262>
			if (config->differential_mode &&
     eb6:	7cf2      	ldrb	r2, [r6, #19]
     eb8:	2a00      	cmp	r2, #0
     eba:	d00f      	beq.n	edc <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     ebc:	69f2      	ldr	r2, [r6, #28]
     ebe:	2180      	movs	r1, #128	; 0x80
     ec0:	0209      	lsls	r1, r1, #8
     ec2:	468c      	mov	ip, r1
     ec4:	4462      	add	r2, ip
			if (config->differential_mode &&
     ec6:	490e      	ldr	r1, [pc, #56]	; (f00 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     ec8:	2017      	movs	r0, #23
			if (config->differential_mode &&
     eca:	428a      	cmp	r2, r1
     ecc:	d900      	bls.n	ed0 <adc_init+0x3f4>
     ece:	e618      	b.n	b02 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     ed0:	6a32      	ldr	r2, [r6, #32]
     ed2:	4462      	add	r2, ip
     ed4:	490a      	ldr	r1, [pc, #40]	; (f00 <adc_init+0x424>)
     ed6:	428a      	cmp	r2, r1
     ed8:	d900      	bls.n	edc <adc_init+0x400>
     eda:	e612      	b.n	b02 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     edc:	4a08      	ldr	r2, [pc, #32]	; (f00 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     ede:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     ee0:	69f1      	ldr	r1, [r6, #28]
     ee2:	4291      	cmp	r1, r2
     ee4:	dd00      	ble.n	ee8 <adc_init+0x40c>
     ee6:	e60c      	b.n	b02 <adc_init+0x26>
     ee8:	6a31      	ldr	r1, [r6, #32]
     eea:	4291      	cmp	r1, r2
     eec:	dd00      	ble.n	ef0 <adc_init+0x414>
     eee:	e608      	b.n	b02 <adc_init+0x26>
     ef0:	e725      	b.n	d3e <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     ef2:	2017      	movs	r0, #23
     ef4:	e605      	b.n	b02 <adc_init+0x26>
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00000fff 	.word	0x00000fff
     efc:	000003ff 	.word	0x000003ff
     f00:	0000ffff 	.word	0x0000ffff

00000f04 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     f04:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     f06:	4b2f      	ldr	r3, [pc, #188]	; (fc4 <ADC_Handler+0xc0>)
     f08:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     f0a:	682b      	ldr	r3, [r5, #0]
     f0c:	7e1a      	ldrb	r2, [r3, #24]
     f0e:	7ddc      	ldrb	r4, [r3, #23]
     f10:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     f12:	07e2      	lsls	r2, r4, #31
     f14:	d416      	bmi.n	f44 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     f16:	0763      	lsls	r3, r4, #29
     f18:	d508      	bpl.n	f2c <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     f1a:	2304      	movs	r3, #4
     f1c:	682a      	ldr	r2, [r5, #0]
     f1e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     f20:	7eeb      	ldrb	r3, [r5, #27]
     f22:	079b      	lsls	r3, r3, #30
     f24:	d502      	bpl.n	f2c <ADC_Handler+0x28>
     f26:	7eab      	ldrb	r3, [r5, #26]
     f28:	079b      	lsls	r3, r3, #30
     f2a:	d442      	bmi.n	fb2 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     f2c:	07a3      	lsls	r3, r4, #30
     f2e:	d508      	bpl.n	f42 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     f30:	2302      	movs	r3, #2
     f32:	682a      	ldr	r2, [r5, #0]
     f34:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     f36:	7eeb      	ldrb	r3, [r5, #27]
     f38:	075b      	lsls	r3, r3, #29
     f3a:	d502      	bpl.n	f42 <ADC_Handler+0x3e>
     f3c:	7eab      	ldrb	r3, [r5, #26]
     f3e:	075b      	lsls	r3, r3, #29
     f40:	d43b      	bmi.n	fba <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     f42:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     f44:	2201      	movs	r2, #1
     f46:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     f48:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     f4a:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     f4c:	b25b      	sxtb	r3, r3
     f4e:	2b00      	cmp	r3, #0
     f50:	dbfb      	blt.n	f4a <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     f52:	6969      	ldr	r1, [r5, #20]
     f54:	1c8b      	adds	r3, r1, #2
     f56:	616b      	str	r3, [r5, #20]
     f58:	8b53      	ldrh	r3, [r2, #26]
     f5a:	b29b      	uxth	r3, r3
     f5c:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     f5e:	8b2b      	ldrh	r3, [r5, #24]
     f60:	3b01      	subs	r3, #1
     f62:	b29b      	uxth	r3, r3
     f64:	832b      	strh	r3, [r5, #24]
     f66:	2b00      	cmp	r3, #0
     f68:	d011      	beq.n	f8e <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     f6a:	7f6b      	ldrb	r3, [r5, #29]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d0d2      	beq.n	f16 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     f70:	682a      	ldr	r2, [r5, #0]
     f72:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     f74:	b25b      	sxtb	r3, r3
     f76:	2b00      	cmp	r3, #0
     f78:	dbfb      	blt.n	f72 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     f7a:	7b13      	ldrb	r3, [r2, #12]
     f7c:	2102      	movs	r1, #2
     f7e:	430b      	orrs	r3, r1
     f80:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     f82:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     f84:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     f86:	b25b      	sxtb	r3, r3
     f88:	2b00      	cmp	r3, #0
     f8a:	dbfb      	blt.n	f84 <ADC_Handler+0x80>
     f8c:	e7c3      	b.n	f16 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     f8e:	2301      	movs	r3, #1
     f90:	682a      	ldr	r2, [r5, #0]
     f92:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
     f94:	7f2b      	ldrb	r3, [r5, #28]
     f96:	2b05      	cmp	r3, #5
     f98:	d1bd      	bne.n	f16 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
     f9a:	2300      	movs	r3, #0
     f9c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
     f9e:	7eeb      	ldrb	r3, [r5, #27]
     fa0:	07db      	lsls	r3, r3, #31
     fa2:	d5b8      	bpl.n	f16 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     fa4:	7eab      	ldrb	r3, [r5, #26]
     fa6:	07db      	lsls	r3, r3, #31
     fa8:	d5b5      	bpl.n	f16 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     faa:	0028      	movs	r0, r5
     fac:	68ab      	ldr	r3, [r5, #8]
     fae:	4798      	blx	r3
     fb0:	e7b1      	b.n	f16 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     fb2:	0028      	movs	r0, r5
     fb4:	68eb      	ldr	r3, [r5, #12]
     fb6:	4798      	blx	r3
     fb8:	e7b8      	b.n	f2c <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     fba:	692b      	ldr	r3, [r5, #16]
     fbc:	0028      	movs	r0, r5
     fbe:	4798      	blx	r3
}
     fc0:	e7bf      	b.n	f42 <ADC_Handler+0x3e>
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	200002cc 	.word	0x200002cc

00000fc8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     fc8:	b500      	push	{lr}
     fca:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     fcc:	ab01      	add	r3, sp, #4
     fce:	2280      	movs	r2, #128	; 0x80
     fd0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     fd2:	780a      	ldrb	r2, [r1, #0]
     fd4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     fd6:	784a      	ldrb	r2, [r1, #1]
     fd8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     fda:	788a      	ldrb	r2, [r1, #2]
     fdc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     fde:	0019      	movs	r1, r3
     fe0:	4b01      	ldr	r3, [pc, #4]	; (fe8 <port_pin_set_config+0x20>)
     fe2:	4798      	blx	r3
}
     fe4:	b003      	add	sp, #12
     fe6:	bd00      	pop	{pc}
     fe8:	00002155 	.word	0x00002155

00000fec <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     fec:	b5f0      	push	{r4, r5, r6, r7, lr}
     fee:	46de      	mov	lr, fp
     ff0:	4657      	mov	r7, sl
     ff2:	464e      	mov	r6, r9
     ff4:	4645      	mov	r5, r8
     ff6:	b5e0      	push	{r5, r6, r7, lr}
     ff8:	b087      	sub	sp, #28
     ffa:	4680      	mov	r8, r0
     ffc:	9104      	str	r1, [sp, #16]
     ffe:	0016      	movs	r6, r2
    1000:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1002:	2200      	movs	r2, #0
    1004:	2300      	movs	r3, #0
    1006:	2100      	movs	r1, #0
    1008:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    100a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    100c:	2001      	movs	r0, #1
    100e:	0021      	movs	r1, r4
    1010:	9600      	str	r6, [sp, #0]
    1012:	9701      	str	r7, [sp, #4]
    1014:	465c      	mov	r4, fp
    1016:	9403      	str	r4, [sp, #12]
    1018:	4644      	mov	r4, r8
    101a:	9405      	str	r4, [sp, #20]
    101c:	e013      	b.n	1046 <long_division+0x5a>
    101e:	2420      	movs	r4, #32
    1020:	1a64      	subs	r4, r4, r1
    1022:	0005      	movs	r5, r0
    1024:	40e5      	lsrs	r5, r4
    1026:	46a8      	mov	r8, r5
    1028:	e014      	b.n	1054 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    102a:	9c00      	ldr	r4, [sp, #0]
    102c:	9d01      	ldr	r5, [sp, #4]
    102e:	1b12      	subs	r2, r2, r4
    1030:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1032:	465c      	mov	r4, fp
    1034:	464d      	mov	r5, r9
    1036:	432c      	orrs	r4, r5
    1038:	46a3      	mov	fp, r4
    103a:	9c03      	ldr	r4, [sp, #12]
    103c:	4645      	mov	r5, r8
    103e:	432c      	orrs	r4, r5
    1040:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1042:	3901      	subs	r1, #1
    1044:	d325      	bcc.n	1092 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1046:	2420      	movs	r4, #32
    1048:	4264      	negs	r4, r4
    104a:	190c      	adds	r4, r1, r4
    104c:	d4e7      	bmi.n	101e <long_division+0x32>
    104e:	0005      	movs	r5, r0
    1050:	40a5      	lsls	r5, r4
    1052:	46a8      	mov	r8, r5
    1054:	0004      	movs	r4, r0
    1056:	408c      	lsls	r4, r1
    1058:	46a1      	mov	r9, r4
		r = r << 1;
    105a:	1892      	adds	r2, r2, r2
    105c:	415b      	adcs	r3, r3
    105e:	0014      	movs	r4, r2
    1060:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1062:	9e05      	ldr	r6, [sp, #20]
    1064:	464f      	mov	r7, r9
    1066:	403e      	ands	r6, r7
    1068:	46b4      	mov	ip, r6
    106a:	9e04      	ldr	r6, [sp, #16]
    106c:	4647      	mov	r7, r8
    106e:	403e      	ands	r6, r7
    1070:	46b2      	mov	sl, r6
    1072:	4666      	mov	r6, ip
    1074:	4657      	mov	r7, sl
    1076:	433e      	orrs	r6, r7
    1078:	d003      	beq.n	1082 <long_division+0x96>
			r |= 0x01;
    107a:	0006      	movs	r6, r0
    107c:	4326      	orrs	r6, r4
    107e:	0032      	movs	r2, r6
    1080:	002b      	movs	r3, r5
		if (r >= d) {
    1082:	9c00      	ldr	r4, [sp, #0]
    1084:	9d01      	ldr	r5, [sp, #4]
    1086:	429d      	cmp	r5, r3
    1088:	d8db      	bhi.n	1042 <long_division+0x56>
    108a:	d1ce      	bne.n	102a <long_division+0x3e>
    108c:	4294      	cmp	r4, r2
    108e:	d8d8      	bhi.n	1042 <long_division+0x56>
    1090:	e7cb      	b.n	102a <long_division+0x3e>
    1092:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1094:	4658      	mov	r0, fp
    1096:	0019      	movs	r1, r3
    1098:	b007      	add	sp, #28
    109a:	bc3c      	pop	{r2, r3, r4, r5}
    109c:	4690      	mov	r8, r2
    109e:	4699      	mov	r9, r3
    10a0:	46a2      	mov	sl, r4
    10a2:	46ab      	mov	fp, r5
    10a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000010a6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    10a6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    10a8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    10aa:	2340      	movs	r3, #64	; 0x40
    10ac:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    10ae:	4281      	cmp	r1, r0
    10b0:	d202      	bcs.n	10b8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    10b2:	0018      	movs	r0, r3
    10b4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    10b6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    10b8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    10ba:	1c63      	adds	r3, r4, #1
    10bc:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    10be:	4288      	cmp	r0, r1
    10c0:	d9f9      	bls.n	10b6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    10c2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    10c4:	2cff      	cmp	r4, #255	; 0xff
    10c6:	d8f4      	bhi.n	10b2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    10c8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    10ca:	2300      	movs	r3, #0
    10cc:	e7f1      	b.n	10b2 <_sercom_get_sync_baud_val+0xc>
	...

000010d0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    10d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10d2:	b083      	sub	sp, #12
    10d4:	000f      	movs	r7, r1
    10d6:	0016      	movs	r6, r2
    10d8:	aa08      	add	r2, sp, #32
    10da:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    10dc:	0004      	movs	r4, r0
    10de:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    10e0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    10e2:	42bc      	cmp	r4, r7
    10e4:	d902      	bls.n	10ec <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    10e6:	0010      	movs	r0, r2
    10e8:	b003      	add	sp, #12
    10ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    10ec:	2b00      	cmp	r3, #0
    10ee:	d114      	bne.n	111a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    10f0:	0002      	movs	r2, r0
    10f2:	0008      	movs	r0, r1
    10f4:	2100      	movs	r1, #0
    10f6:	4c19      	ldr	r4, [pc, #100]	; (115c <_sercom_get_async_baud_val+0x8c>)
    10f8:	47a0      	blx	r4
    10fa:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    10fc:	003a      	movs	r2, r7
    10fe:	2300      	movs	r3, #0
    1100:	2000      	movs	r0, #0
    1102:	4c17      	ldr	r4, [pc, #92]	; (1160 <_sercom_get_async_baud_val+0x90>)
    1104:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1106:	2200      	movs	r2, #0
    1108:	2301      	movs	r3, #1
    110a:	1a12      	subs	r2, r2, r0
    110c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    110e:	0c12      	lsrs	r2, r2, #16
    1110:	041b      	lsls	r3, r3, #16
    1112:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1114:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1116:	2200      	movs	r2, #0
    1118:	e7e5      	b.n	10e6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    111a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    111c:	2b01      	cmp	r3, #1
    111e:	d1f9      	bne.n	1114 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1120:	000a      	movs	r2, r1
    1122:	2300      	movs	r3, #0
    1124:	2100      	movs	r1, #0
    1126:	4c0d      	ldr	r4, [pc, #52]	; (115c <_sercom_get_async_baud_val+0x8c>)
    1128:	47a0      	blx	r4
    112a:	0002      	movs	r2, r0
    112c:	000b      	movs	r3, r1
    112e:	9200      	str	r2, [sp, #0]
    1130:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1132:	0038      	movs	r0, r7
    1134:	2100      	movs	r1, #0
    1136:	4c0a      	ldr	r4, [pc, #40]	; (1160 <_sercom_get_async_baud_val+0x90>)
    1138:	47a0      	blx	r4
    113a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    113c:	2380      	movs	r3, #128	; 0x80
    113e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1140:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1142:	4298      	cmp	r0, r3
    1144:	d8cf      	bhi.n	10e6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1146:	0f79      	lsrs	r1, r7, #29
    1148:	00f8      	lsls	r0, r7, #3
    114a:	9a00      	ldr	r2, [sp, #0]
    114c:	9b01      	ldr	r3, [sp, #4]
    114e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1150:	00ea      	lsls	r2, r5, #3
    1152:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1154:	b2d2      	uxtb	r2, r2
    1156:	0352      	lsls	r2, r2, #13
    1158:	432a      	orrs	r2, r5
    115a:	e7db      	b.n	1114 <_sercom_get_async_baud_val+0x44>
    115c:	000039c1 	.word	0x000039c1
    1160:	00000fed 	.word	0x00000fed

00001164 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1164:	b510      	push	{r4, lr}
    1166:	b082      	sub	sp, #8
    1168:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    116a:	4b0e      	ldr	r3, [pc, #56]	; (11a4 <sercom_set_gclk_generator+0x40>)
    116c:	781b      	ldrb	r3, [r3, #0]
    116e:	2b00      	cmp	r3, #0
    1170:	d007      	beq.n	1182 <sercom_set_gclk_generator+0x1e>
    1172:	2900      	cmp	r1, #0
    1174:	d105      	bne.n	1182 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1176:	4b0b      	ldr	r3, [pc, #44]	; (11a4 <sercom_set_gclk_generator+0x40>)
    1178:	785b      	ldrb	r3, [r3, #1]
    117a:	4283      	cmp	r3, r0
    117c:	d010      	beq.n	11a0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    117e:	201d      	movs	r0, #29
    1180:	e00c      	b.n	119c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1182:	a901      	add	r1, sp, #4
    1184:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1186:	2013      	movs	r0, #19
    1188:	4b07      	ldr	r3, [pc, #28]	; (11a8 <sercom_set_gclk_generator+0x44>)
    118a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    118c:	2013      	movs	r0, #19
    118e:	4b07      	ldr	r3, [pc, #28]	; (11ac <sercom_set_gclk_generator+0x48>)
    1190:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1192:	4b04      	ldr	r3, [pc, #16]	; (11a4 <sercom_set_gclk_generator+0x40>)
    1194:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1196:	2201      	movs	r2, #1
    1198:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    119a:	2000      	movs	r0, #0
}
    119c:	b002      	add	sp, #8
    119e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    11a0:	2000      	movs	r0, #0
    11a2:	e7fb      	b.n	119c <sercom_set_gclk_generator+0x38>
    11a4:	20000270 	.word	0x20000270
    11a8:	0000205d 	.word	0x0000205d
    11ac:	00001fd1 	.word	0x00001fd1

000011b0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    11b0:	4b40      	ldr	r3, [pc, #256]	; (12b4 <_sercom_get_default_pad+0x104>)
    11b2:	4298      	cmp	r0, r3
    11b4:	d031      	beq.n	121a <_sercom_get_default_pad+0x6a>
    11b6:	d90a      	bls.n	11ce <_sercom_get_default_pad+0x1e>
    11b8:	4b3f      	ldr	r3, [pc, #252]	; (12b8 <_sercom_get_default_pad+0x108>)
    11ba:	4298      	cmp	r0, r3
    11bc:	d04d      	beq.n	125a <_sercom_get_default_pad+0xaa>
    11be:	4b3f      	ldr	r3, [pc, #252]	; (12bc <_sercom_get_default_pad+0x10c>)
    11c0:	4298      	cmp	r0, r3
    11c2:	d05a      	beq.n	127a <_sercom_get_default_pad+0xca>
    11c4:	4b3e      	ldr	r3, [pc, #248]	; (12c0 <_sercom_get_default_pad+0x110>)
    11c6:	4298      	cmp	r0, r3
    11c8:	d037      	beq.n	123a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    11ca:	2000      	movs	r0, #0
}
    11cc:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    11ce:	4b3d      	ldr	r3, [pc, #244]	; (12c4 <_sercom_get_default_pad+0x114>)
    11d0:	4298      	cmp	r0, r3
    11d2:	d00c      	beq.n	11ee <_sercom_get_default_pad+0x3e>
    11d4:	4b3c      	ldr	r3, [pc, #240]	; (12c8 <_sercom_get_default_pad+0x118>)
    11d6:	4298      	cmp	r0, r3
    11d8:	d1f7      	bne.n	11ca <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11da:	2901      	cmp	r1, #1
    11dc:	d017      	beq.n	120e <_sercom_get_default_pad+0x5e>
    11de:	2900      	cmp	r1, #0
    11e0:	d05d      	beq.n	129e <_sercom_get_default_pad+0xee>
    11e2:	2902      	cmp	r1, #2
    11e4:	d015      	beq.n	1212 <_sercom_get_default_pad+0x62>
    11e6:	2903      	cmp	r1, #3
    11e8:	d015      	beq.n	1216 <_sercom_get_default_pad+0x66>
	return 0;
    11ea:	2000      	movs	r0, #0
    11ec:	e7ee      	b.n	11cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11ee:	2901      	cmp	r1, #1
    11f0:	d007      	beq.n	1202 <_sercom_get_default_pad+0x52>
    11f2:	2900      	cmp	r1, #0
    11f4:	d051      	beq.n	129a <_sercom_get_default_pad+0xea>
    11f6:	2902      	cmp	r1, #2
    11f8:	d005      	beq.n	1206 <_sercom_get_default_pad+0x56>
    11fa:	2903      	cmp	r1, #3
    11fc:	d005      	beq.n	120a <_sercom_get_default_pad+0x5a>
	return 0;
    11fe:	2000      	movs	r0, #0
    1200:	e7e4      	b.n	11cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1202:	4832      	ldr	r0, [pc, #200]	; (12cc <_sercom_get_default_pad+0x11c>)
    1204:	e7e2      	b.n	11cc <_sercom_get_default_pad+0x1c>
    1206:	4832      	ldr	r0, [pc, #200]	; (12d0 <_sercom_get_default_pad+0x120>)
    1208:	e7e0      	b.n	11cc <_sercom_get_default_pad+0x1c>
    120a:	4832      	ldr	r0, [pc, #200]	; (12d4 <_sercom_get_default_pad+0x124>)
    120c:	e7de      	b.n	11cc <_sercom_get_default_pad+0x1c>
    120e:	4832      	ldr	r0, [pc, #200]	; (12d8 <_sercom_get_default_pad+0x128>)
    1210:	e7dc      	b.n	11cc <_sercom_get_default_pad+0x1c>
    1212:	4832      	ldr	r0, [pc, #200]	; (12dc <_sercom_get_default_pad+0x12c>)
    1214:	e7da      	b.n	11cc <_sercom_get_default_pad+0x1c>
    1216:	4832      	ldr	r0, [pc, #200]	; (12e0 <_sercom_get_default_pad+0x130>)
    1218:	e7d8      	b.n	11cc <_sercom_get_default_pad+0x1c>
    121a:	2901      	cmp	r1, #1
    121c:	d007      	beq.n	122e <_sercom_get_default_pad+0x7e>
    121e:	2900      	cmp	r1, #0
    1220:	d03f      	beq.n	12a2 <_sercom_get_default_pad+0xf2>
    1222:	2902      	cmp	r1, #2
    1224:	d005      	beq.n	1232 <_sercom_get_default_pad+0x82>
    1226:	2903      	cmp	r1, #3
    1228:	d005      	beq.n	1236 <_sercom_get_default_pad+0x86>
	return 0;
    122a:	2000      	movs	r0, #0
    122c:	e7ce      	b.n	11cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    122e:	482d      	ldr	r0, [pc, #180]	; (12e4 <_sercom_get_default_pad+0x134>)
    1230:	e7cc      	b.n	11cc <_sercom_get_default_pad+0x1c>
    1232:	482d      	ldr	r0, [pc, #180]	; (12e8 <_sercom_get_default_pad+0x138>)
    1234:	e7ca      	b.n	11cc <_sercom_get_default_pad+0x1c>
    1236:	482d      	ldr	r0, [pc, #180]	; (12ec <_sercom_get_default_pad+0x13c>)
    1238:	e7c8      	b.n	11cc <_sercom_get_default_pad+0x1c>
    123a:	2901      	cmp	r1, #1
    123c:	d007      	beq.n	124e <_sercom_get_default_pad+0x9e>
    123e:	2900      	cmp	r1, #0
    1240:	d031      	beq.n	12a6 <_sercom_get_default_pad+0xf6>
    1242:	2902      	cmp	r1, #2
    1244:	d005      	beq.n	1252 <_sercom_get_default_pad+0xa2>
    1246:	2903      	cmp	r1, #3
    1248:	d005      	beq.n	1256 <_sercom_get_default_pad+0xa6>
	return 0;
    124a:	2000      	movs	r0, #0
    124c:	e7be      	b.n	11cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    124e:	4828      	ldr	r0, [pc, #160]	; (12f0 <_sercom_get_default_pad+0x140>)
    1250:	e7bc      	b.n	11cc <_sercom_get_default_pad+0x1c>
    1252:	4828      	ldr	r0, [pc, #160]	; (12f4 <_sercom_get_default_pad+0x144>)
    1254:	e7ba      	b.n	11cc <_sercom_get_default_pad+0x1c>
    1256:	4828      	ldr	r0, [pc, #160]	; (12f8 <_sercom_get_default_pad+0x148>)
    1258:	e7b8      	b.n	11cc <_sercom_get_default_pad+0x1c>
    125a:	2901      	cmp	r1, #1
    125c:	d007      	beq.n	126e <_sercom_get_default_pad+0xbe>
    125e:	2900      	cmp	r1, #0
    1260:	d023      	beq.n	12aa <_sercom_get_default_pad+0xfa>
    1262:	2902      	cmp	r1, #2
    1264:	d005      	beq.n	1272 <_sercom_get_default_pad+0xc2>
    1266:	2903      	cmp	r1, #3
    1268:	d005      	beq.n	1276 <_sercom_get_default_pad+0xc6>
	return 0;
    126a:	2000      	movs	r0, #0
    126c:	e7ae      	b.n	11cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    126e:	4823      	ldr	r0, [pc, #140]	; (12fc <_sercom_get_default_pad+0x14c>)
    1270:	e7ac      	b.n	11cc <_sercom_get_default_pad+0x1c>
    1272:	4823      	ldr	r0, [pc, #140]	; (1300 <_sercom_get_default_pad+0x150>)
    1274:	e7aa      	b.n	11cc <_sercom_get_default_pad+0x1c>
    1276:	4823      	ldr	r0, [pc, #140]	; (1304 <_sercom_get_default_pad+0x154>)
    1278:	e7a8      	b.n	11cc <_sercom_get_default_pad+0x1c>
    127a:	2901      	cmp	r1, #1
    127c:	d007      	beq.n	128e <_sercom_get_default_pad+0xde>
    127e:	2900      	cmp	r1, #0
    1280:	d015      	beq.n	12ae <_sercom_get_default_pad+0xfe>
    1282:	2902      	cmp	r1, #2
    1284:	d005      	beq.n	1292 <_sercom_get_default_pad+0xe2>
    1286:	2903      	cmp	r1, #3
    1288:	d005      	beq.n	1296 <_sercom_get_default_pad+0xe6>
	return 0;
    128a:	2000      	movs	r0, #0
    128c:	e79e      	b.n	11cc <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    128e:	481e      	ldr	r0, [pc, #120]	; (1308 <_sercom_get_default_pad+0x158>)
    1290:	e79c      	b.n	11cc <_sercom_get_default_pad+0x1c>
    1292:	481e      	ldr	r0, [pc, #120]	; (130c <_sercom_get_default_pad+0x15c>)
    1294:	e79a      	b.n	11cc <_sercom_get_default_pad+0x1c>
    1296:	481e      	ldr	r0, [pc, #120]	; (1310 <_sercom_get_default_pad+0x160>)
    1298:	e798      	b.n	11cc <_sercom_get_default_pad+0x1c>
    129a:	481e      	ldr	r0, [pc, #120]	; (1314 <_sercom_get_default_pad+0x164>)
    129c:	e796      	b.n	11cc <_sercom_get_default_pad+0x1c>
    129e:	2003      	movs	r0, #3
    12a0:	e794      	b.n	11cc <_sercom_get_default_pad+0x1c>
    12a2:	481d      	ldr	r0, [pc, #116]	; (1318 <_sercom_get_default_pad+0x168>)
    12a4:	e792      	b.n	11cc <_sercom_get_default_pad+0x1c>
    12a6:	481d      	ldr	r0, [pc, #116]	; (131c <_sercom_get_default_pad+0x16c>)
    12a8:	e790      	b.n	11cc <_sercom_get_default_pad+0x1c>
    12aa:	481d      	ldr	r0, [pc, #116]	; (1320 <_sercom_get_default_pad+0x170>)
    12ac:	e78e      	b.n	11cc <_sercom_get_default_pad+0x1c>
    12ae:	481d      	ldr	r0, [pc, #116]	; (1324 <_sercom_get_default_pad+0x174>)
    12b0:	e78c      	b.n	11cc <_sercom_get_default_pad+0x1c>
    12b2:	46c0      	nop			; (mov r8, r8)
    12b4:	42001000 	.word	0x42001000
    12b8:	42001800 	.word	0x42001800
    12bc:	42001c00 	.word	0x42001c00
    12c0:	42001400 	.word	0x42001400
    12c4:	42000800 	.word	0x42000800
    12c8:	42000c00 	.word	0x42000c00
    12cc:	00050003 	.word	0x00050003
    12d0:	00060003 	.word	0x00060003
    12d4:	00070003 	.word	0x00070003
    12d8:	00010003 	.word	0x00010003
    12dc:	001e0003 	.word	0x001e0003
    12e0:	001f0003 	.word	0x001f0003
    12e4:	00090003 	.word	0x00090003
    12e8:	000a0003 	.word	0x000a0003
    12ec:	000b0003 	.word	0x000b0003
    12f0:	00110003 	.word	0x00110003
    12f4:	00120003 	.word	0x00120003
    12f8:	00130003 	.word	0x00130003
    12fc:	000d0003 	.word	0x000d0003
    1300:	000e0003 	.word	0x000e0003
    1304:	000f0003 	.word	0x000f0003
    1308:	00170003 	.word	0x00170003
    130c:	00180003 	.word	0x00180003
    1310:	00190003 	.word	0x00190003
    1314:	00040003 	.word	0x00040003
    1318:	00080003 	.word	0x00080003
    131c:	00100003 	.word	0x00100003
    1320:	000c0003 	.word	0x000c0003
    1324:	00160003 	.word	0x00160003

00001328 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1328:	b530      	push	{r4, r5, lr}
    132a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    132c:	4b0b      	ldr	r3, [pc, #44]	; (135c <_sercom_get_sercom_inst_index+0x34>)
    132e:	466a      	mov	r2, sp
    1330:	cb32      	ldmia	r3!, {r1, r4, r5}
    1332:	c232      	stmia	r2!, {r1, r4, r5}
    1334:	cb32      	ldmia	r3!, {r1, r4, r5}
    1336:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1338:	9b00      	ldr	r3, [sp, #0]
    133a:	4283      	cmp	r3, r0
    133c:	d00b      	beq.n	1356 <_sercom_get_sercom_inst_index+0x2e>
    133e:	2301      	movs	r3, #1
    1340:	009a      	lsls	r2, r3, #2
    1342:	4669      	mov	r1, sp
    1344:	5852      	ldr	r2, [r2, r1]
    1346:	4282      	cmp	r2, r0
    1348:	d006      	beq.n	1358 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    134a:	3301      	adds	r3, #1
    134c:	2b06      	cmp	r3, #6
    134e:	d1f7      	bne.n	1340 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1350:	2000      	movs	r0, #0
}
    1352:	b007      	add	sp, #28
    1354:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1356:	2300      	movs	r3, #0
			return i;
    1358:	b2d8      	uxtb	r0, r3
    135a:	e7fa      	b.n	1352 <_sercom_get_sercom_inst_index+0x2a>
    135c:	000052c8 	.word	0x000052c8

00001360 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1360:	4770      	bx	lr
	...

00001364 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1364:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    1366:	4b0a      	ldr	r3, [pc, #40]	; (1390 <_sercom_set_handler+0x2c>)
    1368:	781b      	ldrb	r3, [r3, #0]
    136a:	2b00      	cmp	r3, #0
    136c:	d10c      	bne.n	1388 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    136e:	4f09      	ldr	r7, [pc, #36]	; (1394 <_sercom_set_handler+0x30>)
    1370:	4e09      	ldr	r6, [pc, #36]	; (1398 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1372:	4d0a      	ldr	r5, [pc, #40]	; (139c <_sercom_set_handler+0x38>)
    1374:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1376:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1378:	195a      	adds	r2, r3, r5
    137a:	6014      	str	r4, [r2, #0]
    137c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    137e:	2b18      	cmp	r3, #24
    1380:	d1f9      	bne.n	1376 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1382:	2201      	movs	r2, #1
    1384:	4b02      	ldr	r3, [pc, #8]	; (1390 <_sercom_set_handler+0x2c>)
    1386:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1388:	0080      	lsls	r0, r0, #2
    138a:	4b02      	ldr	r3, [pc, #8]	; (1394 <_sercom_set_handler+0x30>)
    138c:	50c1      	str	r1, [r0, r3]
}
    138e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1390:	20000272 	.word	0x20000272
    1394:	20000274 	.word	0x20000274
    1398:	00001361 	.word	0x00001361
    139c:	200002d0 	.word	0x200002d0

000013a0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    13a0:	b500      	push	{lr}
    13a2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    13a4:	2309      	movs	r3, #9
    13a6:	466a      	mov	r2, sp
    13a8:	7013      	strb	r3, [r2, #0]
    13aa:	3301      	adds	r3, #1
    13ac:	7053      	strb	r3, [r2, #1]
    13ae:	3301      	adds	r3, #1
    13b0:	7093      	strb	r3, [r2, #2]
    13b2:	3301      	adds	r3, #1
    13b4:	70d3      	strb	r3, [r2, #3]
    13b6:	3301      	adds	r3, #1
    13b8:	7113      	strb	r3, [r2, #4]
    13ba:	3301      	adds	r3, #1
    13bc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    13be:	4b03      	ldr	r3, [pc, #12]	; (13cc <_sercom_get_interrupt_vector+0x2c>)
    13c0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    13c2:	466b      	mov	r3, sp
    13c4:	5618      	ldrsb	r0, [r3, r0]
}
    13c6:	b003      	add	sp, #12
    13c8:	bd00      	pop	{pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	00001329 	.word	0x00001329

000013d0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    13d0:	b510      	push	{r4, lr}
    13d2:	4b02      	ldr	r3, [pc, #8]	; (13dc <SERCOM0_Handler+0xc>)
    13d4:	681b      	ldr	r3, [r3, #0]
    13d6:	2000      	movs	r0, #0
    13d8:	4798      	blx	r3
    13da:	bd10      	pop	{r4, pc}
    13dc:	20000274 	.word	0x20000274

000013e0 <SERCOM1_Handler>:
    13e0:	b510      	push	{r4, lr}
    13e2:	4b02      	ldr	r3, [pc, #8]	; (13ec <SERCOM1_Handler+0xc>)
    13e4:	685b      	ldr	r3, [r3, #4]
    13e6:	2001      	movs	r0, #1
    13e8:	4798      	blx	r3
    13ea:	bd10      	pop	{r4, pc}
    13ec:	20000274 	.word	0x20000274

000013f0 <SERCOM2_Handler>:
    13f0:	b510      	push	{r4, lr}
    13f2:	4b02      	ldr	r3, [pc, #8]	; (13fc <SERCOM2_Handler+0xc>)
    13f4:	689b      	ldr	r3, [r3, #8]
    13f6:	2002      	movs	r0, #2
    13f8:	4798      	blx	r3
    13fa:	bd10      	pop	{r4, pc}
    13fc:	20000274 	.word	0x20000274

00001400 <SERCOM3_Handler>:
    1400:	b510      	push	{r4, lr}
    1402:	4b02      	ldr	r3, [pc, #8]	; (140c <SERCOM3_Handler+0xc>)
    1404:	68db      	ldr	r3, [r3, #12]
    1406:	2003      	movs	r0, #3
    1408:	4798      	blx	r3
    140a:	bd10      	pop	{r4, pc}
    140c:	20000274 	.word	0x20000274

00001410 <SERCOM4_Handler>:
    1410:	b510      	push	{r4, lr}
    1412:	4b02      	ldr	r3, [pc, #8]	; (141c <SERCOM4_Handler+0xc>)
    1414:	691b      	ldr	r3, [r3, #16]
    1416:	2004      	movs	r0, #4
    1418:	4798      	blx	r3
    141a:	bd10      	pop	{r4, pc}
    141c:	20000274 	.word	0x20000274

00001420 <SERCOM5_Handler>:
    1420:	b510      	push	{r4, lr}
    1422:	4b02      	ldr	r3, [pc, #8]	; (142c <SERCOM5_Handler+0xc>)
    1424:	695b      	ldr	r3, [r3, #20]
    1426:	2005      	movs	r0, #5
    1428:	4798      	blx	r3
    142a:	bd10      	pop	{r4, pc}
    142c:	20000274 	.word	0x20000274

00001430 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1430:	b5f0      	push	{r4, r5, r6, r7, lr}
    1432:	46de      	mov	lr, fp
    1434:	4657      	mov	r7, sl
    1436:	464e      	mov	r6, r9
    1438:	4645      	mov	r5, r8
    143a:	b5e0      	push	{r5, r6, r7, lr}
    143c:	b091      	sub	sp, #68	; 0x44
    143e:	0005      	movs	r5, r0
    1440:	000c      	movs	r4, r1
    1442:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1444:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1446:	0008      	movs	r0, r1
    1448:	4bba      	ldr	r3, [pc, #744]	; (1734 <usart_init+0x304>)
    144a:	4798      	blx	r3
    144c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    144e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1450:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1452:	07db      	lsls	r3, r3, #31
    1454:	d506      	bpl.n	1464 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1456:	b011      	add	sp, #68	; 0x44
    1458:	bc3c      	pop	{r2, r3, r4, r5}
    145a:	4690      	mov	r8, r2
    145c:	4699      	mov	r9, r3
    145e:	46a2      	mov	sl, r4
    1460:	46ab      	mov	fp, r5
    1462:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1464:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1466:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1468:	079b      	lsls	r3, r3, #30
    146a:	d4f4      	bmi.n	1456 <usart_init+0x26>
    146c:	49b2      	ldr	r1, [pc, #712]	; (1738 <usart_init+0x308>)
    146e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1470:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1472:	2301      	movs	r3, #1
    1474:	40bb      	lsls	r3, r7
    1476:	4303      	orrs	r3, r0
    1478:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    147a:	a90f      	add	r1, sp, #60	; 0x3c
    147c:	272d      	movs	r7, #45	; 0x2d
    147e:	5df3      	ldrb	r3, [r6, r7]
    1480:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1482:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1484:	b2d3      	uxtb	r3, r2
    1486:	9302      	str	r3, [sp, #8]
    1488:	0018      	movs	r0, r3
    148a:	4bac      	ldr	r3, [pc, #688]	; (173c <usart_init+0x30c>)
    148c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    148e:	9802      	ldr	r0, [sp, #8]
    1490:	4bab      	ldr	r3, [pc, #684]	; (1740 <usart_init+0x310>)
    1492:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1494:	5df0      	ldrb	r0, [r6, r7]
    1496:	2100      	movs	r1, #0
    1498:	4baa      	ldr	r3, [pc, #680]	; (1744 <usart_init+0x314>)
    149a:	4798      	blx	r3
	module->character_size = config->character_size;
    149c:	7af3      	ldrb	r3, [r6, #11]
    149e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    14a0:	2324      	movs	r3, #36	; 0x24
    14a2:	5cf3      	ldrb	r3, [r6, r3]
    14a4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    14a6:	2325      	movs	r3, #37	; 0x25
    14a8:	5cf3      	ldrb	r3, [r6, r3]
    14aa:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    14ac:	7ef3      	ldrb	r3, [r6, #27]
    14ae:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    14b0:	7f33      	ldrb	r3, [r6, #28]
    14b2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    14b4:	682b      	ldr	r3, [r5, #0]
    14b6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14b8:	0018      	movs	r0, r3
    14ba:	4b9e      	ldr	r3, [pc, #632]	; (1734 <usart_init+0x304>)
    14bc:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14be:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    14c0:	2200      	movs	r2, #0
    14c2:	230e      	movs	r3, #14
    14c4:	a906      	add	r1, sp, #24
    14c6:	468c      	mov	ip, r1
    14c8:	4463      	add	r3, ip
    14ca:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    14cc:	8a32      	ldrh	r2, [r6, #16]
    14ce:	9202      	str	r2, [sp, #8]
    14d0:	2380      	movs	r3, #128	; 0x80
    14d2:	01db      	lsls	r3, r3, #7
    14d4:	429a      	cmp	r2, r3
    14d6:	d100      	bne.n	14da <usart_init+0xaa>
    14d8:	e09a      	b.n	1610 <usart_init+0x1e0>
    14da:	d90f      	bls.n	14fc <usart_init+0xcc>
    14dc:	23c0      	movs	r3, #192	; 0xc0
    14de:	01db      	lsls	r3, r3, #7
    14e0:	9a02      	ldr	r2, [sp, #8]
    14e2:	429a      	cmp	r2, r3
    14e4:	d100      	bne.n	14e8 <usart_init+0xb8>
    14e6:	e08e      	b.n	1606 <usart_init+0x1d6>
    14e8:	2380      	movs	r3, #128	; 0x80
    14ea:	021b      	lsls	r3, r3, #8
    14ec:	429a      	cmp	r2, r3
    14ee:	d000      	beq.n	14f2 <usart_init+0xc2>
    14f0:	e11b      	b.n	172a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    14f2:	2303      	movs	r3, #3
    14f4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    14f6:	2300      	movs	r3, #0
    14f8:	9307      	str	r3, [sp, #28]
    14fa:	e008      	b.n	150e <usart_init+0xde>
	switch (config->sample_rate) {
    14fc:	2380      	movs	r3, #128	; 0x80
    14fe:	019b      	lsls	r3, r3, #6
    1500:	429a      	cmp	r2, r3
    1502:	d000      	beq.n	1506 <usart_init+0xd6>
    1504:	e111      	b.n	172a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1506:	2310      	movs	r3, #16
    1508:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    150a:	3b0f      	subs	r3, #15
    150c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    150e:	6833      	ldr	r3, [r6, #0]
    1510:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1512:	68f3      	ldr	r3, [r6, #12]
    1514:	469b      	mov	fp, r3
		config->sample_adjustment |
    1516:	6973      	ldr	r3, [r6, #20]
    1518:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    151a:	7e33      	ldrb	r3, [r6, #24]
    151c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    151e:	2326      	movs	r3, #38	; 0x26
    1520:	5cf3      	ldrb	r3, [r6, r3]
    1522:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1524:	6873      	ldr	r3, [r6, #4]
    1526:	4699      	mov	r9, r3
	switch (transfer_mode)
    1528:	2b00      	cmp	r3, #0
    152a:	d100      	bne.n	152e <usart_init+0xfe>
    152c:	e09c      	b.n	1668 <usart_init+0x238>
    152e:	2380      	movs	r3, #128	; 0x80
    1530:	055b      	lsls	r3, r3, #21
    1532:	4599      	cmp	r9, r3
    1534:	d100      	bne.n	1538 <usart_init+0x108>
    1536:	e080      	b.n	163a <usart_init+0x20a>
	if(config->encoding_format_enable) {
    1538:	7e73      	ldrb	r3, [r6, #25]
    153a:	2b00      	cmp	r3, #0
    153c:	d002      	beq.n	1544 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    153e:	7eb3      	ldrb	r3, [r6, #26]
    1540:	4642      	mov	r2, r8
    1542:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    1544:	230e      	movs	r3, #14
    1546:	aa06      	add	r2, sp, #24
    1548:	4694      	mov	ip, r2
    154a:	4463      	add	r3, ip
    154c:	881b      	ldrh	r3, [r3, #0]
    154e:	4642      	mov	r2, r8
    1550:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1552:	9b05      	ldr	r3, [sp, #20]
    1554:	465a      	mov	r2, fp
    1556:	4313      	orrs	r3, r2
    1558:	9a03      	ldr	r2, [sp, #12]
    155a:	4313      	orrs	r3, r2
    155c:	464a      	mov	r2, r9
    155e:	4313      	orrs	r3, r2
    1560:	9f02      	ldr	r7, [sp, #8]
    1562:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1564:	9b04      	ldr	r3, [sp, #16]
    1566:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1568:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    156a:	4653      	mov	r3, sl
    156c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    156e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1570:	2327      	movs	r3, #39	; 0x27
    1572:	5cf3      	ldrb	r3, [r6, r3]
    1574:	2b00      	cmp	r3, #0
    1576:	d101      	bne.n	157c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1578:	3304      	adds	r3, #4
    157a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    157c:	7e73      	ldrb	r3, [r6, #25]
    157e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1580:	7f32      	ldrb	r2, [r6, #28]
    1582:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1584:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1586:	7f72      	ldrb	r2, [r6, #29]
    1588:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    158a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    158c:	2224      	movs	r2, #36	; 0x24
    158e:	5cb2      	ldrb	r2, [r6, r2]
    1590:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1592:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1594:	2225      	movs	r2, #37	; 0x25
    1596:	5cb2      	ldrb	r2, [r6, r2]
    1598:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    159a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    159c:	7ab1      	ldrb	r1, [r6, #10]
    159e:	7af2      	ldrb	r2, [r6, #11]
    15a0:	4311      	orrs	r1, r2
    15a2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    15a4:	8933      	ldrh	r3, [r6, #8]
    15a6:	2bff      	cmp	r3, #255	; 0xff
    15a8:	d100      	bne.n	15ac <usart_init+0x17c>
    15aa:	e081      	b.n	16b0 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    15ac:	2280      	movs	r2, #128	; 0x80
    15ae:	0452      	lsls	r2, r2, #17
    15b0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    15b2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    15b4:	232c      	movs	r3, #44	; 0x2c
    15b6:	5cf3      	ldrb	r3, [r6, r3]
    15b8:	2b00      	cmp	r3, #0
    15ba:	d103      	bne.n	15c4 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    15bc:	4b62      	ldr	r3, [pc, #392]	; (1748 <usart_init+0x318>)
    15be:	789b      	ldrb	r3, [r3, #2]
    15c0:	079b      	lsls	r3, r3, #30
    15c2:	d501      	bpl.n	15c8 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    15c4:	2380      	movs	r3, #128	; 0x80
    15c6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    15c8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    15ca:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    15cc:	2b00      	cmp	r3, #0
    15ce:	d1fc      	bne.n	15ca <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    15d0:	4643      	mov	r3, r8
    15d2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    15d4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    15d6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    15d8:	2b00      	cmp	r3, #0
    15da:	d1fc      	bne.n	15d6 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    15dc:	4643      	mov	r3, r8
    15de:	601f      	str	r7, [r3, #0]
    15e0:	ab0e      	add	r3, sp, #56	; 0x38
    15e2:	2280      	movs	r2, #128	; 0x80
    15e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    15e6:	2200      	movs	r2, #0
    15e8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    15ea:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    15ec:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    15ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
    15f0:	930a      	str	r3, [sp, #40]	; 0x28
    15f2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    15f4:	930b      	str	r3, [sp, #44]	; 0x2c
    15f6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    15f8:	930c      	str	r3, [sp, #48]	; 0x30
    15fa:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    15fc:	9302      	str	r3, [sp, #8]
    15fe:	930d      	str	r3, [sp, #52]	; 0x34
    1600:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1602:	ae0a      	add	r6, sp, #40	; 0x28
    1604:	e063      	b.n	16ce <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1606:	2308      	movs	r3, #8
    1608:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    160a:	3b07      	subs	r3, #7
    160c:	9307      	str	r3, [sp, #28]
    160e:	e77e      	b.n	150e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1610:	6833      	ldr	r3, [r6, #0]
    1612:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1614:	68f3      	ldr	r3, [r6, #12]
    1616:	469b      	mov	fp, r3
		config->sample_adjustment |
    1618:	6973      	ldr	r3, [r6, #20]
    161a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    161c:	7e33      	ldrb	r3, [r6, #24]
    161e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1620:	2326      	movs	r3, #38	; 0x26
    1622:	5cf3      	ldrb	r3, [r6, r3]
    1624:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1626:	6873      	ldr	r3, [r6, #4]
    1628:	4699      	mov	r9, r3
	switch (transfer_mode)
    162a:	2b00      	cmp	r3, #0
    162c:	d018      	beq.n	1660 <usart_init+0x230>
    162e:	2380      	movs	r3, #128	; 0x80
    1630:	055b      	lsls	r3, r3, #21
    1632:	4599      	cmp	r9, r3
    1634:	d001      	beq.n	163a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    1636:	2000      	movs	r0, #0
    1638:	e025      	b.n	1686 <usart_init+0x256>
			if (!config->use_external_clock) {
    163a:	2327      	movs	r3, #39	; 0x27
    163c:	5cf3      	ldrb	r3, [r6, r3]
    163e:	2b00      	cmp	r3, #0
    1640:	d000      	beq.n	1644 <usart_init+0x214>
    1642:	e779      	b.n	1538 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1644:	6a33      	ldr	r3, [r6, #32]
    1646:	001f      	movs	r7, r3
    1648:	b2c0      	uxtb	r0, r0
    164a:	4b40      	ldr	r3, [pc, #256]	; (174c <usart_init+0x31c>)
    164c:	4798      	blx	r3
    164e:	0001      	movs	r1, r0
    1650:	220e      	movs	r2, #14
    1652:	ab06      	add	r3, sp, #24
    1654:	469c      	mov	ip, r3
    1656:	4462      	add	r2, ip
    1658:	0038      	movs	r0, r7
    165a:	4b3d      	ldr	r3, [pc, #244]	; (1750 <usart_init+0x320>)
    165c:	4798      	blx	r3
    165e:	e012      	b.n	1686 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1660:	2308      	movs	r3, #8
    1662:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1664:	2300      	movs	r3, #0
    1666:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1668:	2327      	movs	r3, #39	; 0x27
    166a:	5cf3      	ldrb	r3, [r6, r3]
    166c:	2b00      	cmp	r3, #0
    166e:	d00e      	beq.n	168e <usart_init+0x25e>
				status_code =
    1670:	9b06      	ldr	r3, [sp, #24]
    1672:	9300      	str	r3, [sp, #0]
    1674:	9b07      	ldr	r3, [sp, #28]
    1676:	220e      	movs	r2, #14
    1678:	a906      	add	r1, sp, #24
    167a:	468c      	mov	ip, r1
    167c:	4462      	add	r2, ip
    167e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1680:	6a30      	ldr	r0, [r6, #32]
    1682:	4f34      	ldr	r7, [pc, #208]	; (1754 <usart_init+0x324>)
    1684:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1686:	2800      	cmp	r0, #0
    1688:	d000      	beq.n	168c <usart_init+0x25c>
    168a:	e6e4      	b.n	1456 <usart_init+0x26>
    168c:	e754      	b.n	1538 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    168e:	6a33      	ldr	r3, [r6, #32]
    1690:	001f      	movs	r7, r3
    1692:	b2c0      	uxtb	r0, r0
    1694:	4b2d      	ldr	r3, [pc, #180]	; (174c <usart_init+0x31c>)
    1696:	4798      	blx	r3
    1698:	0001      	movs	r1, r0
				status_code =
    169a:	9b06      	ldr	r3, [sp, #24]
    169c:	9300      	str	r3, [sp, #0]
    169e:	9b07      	ldr	r3, [sp, #28]
    16a0:	220e      	movs	r2, #14
    16a2:	a806      	add	r0, sp, #24
    16a4:	4684      	mov	ip, r0
    16a6:	4462      	add	r2, ip
    16a8:	0038      	movs	r0, r7
    16aa:	4f2a      	ldr	r7, [pc, #168]	; (1754 <usart_init+0x324>)
    16ac:	47b8      	blx	r7
    16ae:	e7ea      	b.n	1686 <usart_init+0x256>
		if(config->lin_slave_enable) {
    16b0:	7ef3      	ldrb	r3, [r6, #27]
    16b2:	2b00      	cmp	r3, #0
    16b4:	d100      	bne.n	16b8 <usart_init+0x288>
    16b6:	e77d      	b.n	15b4 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    16b8:	2380      	movs	r3, #128	; 0x80
    16ba:	04db      	lsls	r3, r3, #19
    16bc:	431f      	orrs	r7, r3
    16be:	e779      	b.n	15b4 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    16c0:	0020      	movs	r0, r4
    16c2:	4b25      	ldr	r3, [pc, #148]	; (1758 <usart_init+0x328>)
    16c4:	4798      	blx	r3
    16c6:	e007      	b.n	16d8 <usart_init+0x2a8>
    16c8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    16ca:	2f04      	cmp	r7, #4
    16cc:	d00d      	beq.n	16ea <usart_init+0x2ba>
    16ce:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    16d0:	00bb      	lsls	r3, r7, #2
    16d2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    16d4:	2800      	cmp	r0, #0
    16d6:	d0f3      	beq.n	16c0 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    16d8:	1c43      	adds	r3, r0, #1
    16da:	d0f5      	beq.n	16c8 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    16dc:	a90e      	add	r1, sp, #56	; 0x38
    16de:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    16e0:	0c00      	lsrs	r0, r0, #16
    16e2:	b2c0      	uxtb	r0, r0
    16e4:	4b1d      	ldr	r3, [pc, #116]	; (175c <usart_init+0x32c>)
    16e6:	4798      	blx	r3
    16e8:	e7ee      	b.n	16c8 <usart_init+0x298>
		module->callback[i]            = NULL;
    16ea:	2300      	movs	r3, #0
    16ec:	60eb      	str	r3, [r5, #12]
    16ee:	612b      	str	r3, [r5, #16]
    16f0:	616b      	str	r3, [r5, #20]
    16f2:	61ab      	str	r3, [r5, #24]
    16f4:	61eb      	str	r3, [r5, #28]
    16f6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    16f8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    16fa:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    16fc:	2200      	movs	r2, #0
    16fe:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1700:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1702:	3330      	adds	r3, #48	; 0x30
    1704:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1706:	3301      	adds	r3, #1
    1708:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    170a:	3301      	adds	r3, #1
    170c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    170e:	3301      	adds	r3, #1
    1710:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1712:	6828      	ldr	r0, [r5, #0]
    1714:	4b07      	ldr	r3, [pc, #28]	; (1734 <usart_init+0x304>)
    1716:	4798      	blx	r3
    1718:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    171a:	4911      	ldr	r1, [pc, #68]	; (1760 <usart_init+0x330>)
    171c:	4b11      	ldr	r3, [pc, #68]	; (1764 <usart_init+0x334>)
    171e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1720:	00a4      	lsls	r4, r4, #2
    1722:	4b11      	ldr	r3, [pc, #68]	; (1768 <usart_init+0x338>)
    1724:	50e5      	str	r5, [r4, r3]
	return status_code;
    1726:	2000      	movs	r0, #0
    1728:	e695      	b.n	1456 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    172a:	2310      	movs	r3, #16
    172c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    172e:	2300      	movs	r3, #0
    1730:	9307      	str	r3, [sp, #28]
    1732:	e6ec      	b.n	150e <usart_init+0xde>
    1734:	00001329 	.word	0x00001329
    1738:	40000400 	.word	0x40000400
    173c:	0000205d 	.word	0x0000205d
    1740:	00001fd1 	.word	0x00001fd1
    1744:	00001165 	.word	0x00001165
    1748:	41002000 	.word	0x41002000
    174c:	00002079 	.word	0x00002079
    1750:	000010a7 	.word	0x000010a7
    1754:	000010d1 	.word	0x000010d1
    1758:	000011b1 	.word	0x000011b1
    175c:	00002155 	.word	0x00002155
    1760:	00001885 	.word	0x00001885
    1764:	00001365 	.word	0x00001365
    1768:	200002d0 	.word	0x200002d0

0000176c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    176c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    176e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1770:	2a00      	cmp	r2, #0
    1772:	d101      	bne.n	1778 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1774:	0018      	movs	r0, r3
    1776:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1778:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    177a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    177c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    177e:	2a00      	cmp	r2, #0
    1780:	d1f8      	bne.n	1774 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1782:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    1784:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1786:	2102      	movs	r1, #2
    1788:	7e13      	ldrb	r3, [r2, #24]
    178a:	420b      	tst	r3, r1
    178c:	d0fc      	beq.n	1788 <usart_write_wait+0x1c>
	return STATUS_OK;
    178e:	2300      	movs	r3, #0
    1790:	e7f0      	b.n	1774 <usart_write_wait+0x8>

00001792 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1792:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1794:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1796:	2a00      	cmp	r2, #0
    1798:	d101      	bne.n	179e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    179a:	0018      	movs	r0, r3
    179c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    179e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    17a0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    17a2:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    17a4:	2a00      	cmp	r2, #0
    17a6:	d1f8      	bne.n	179a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    17a8:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    17aa:	7e10      	ldrb	r0, [r2, #24]
    17ac:	0740      	lsls	r0, r0, #29
    17ae:	d5f4      	bpl.n	179a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    17b0:	8b53      	ldrh	r3, [r2, #26]
    17b2:	b2db      	uxtb	r3, r3
	if (error_code) {
    17b4:	0698      	lsls	r0, r3, #26
    17b6:	d01d      	beq.n	17f4 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    17b8:	0798      	lsls	r0, r3, #30
    17ba:	d503      	bpl.n	17c4 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    17bc:	2302      	movs	r3, #2
    17be:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    17c0:	3318      	adds	r3, #24
    17c2:	e7ea      	b.n	179a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    17c4:	0758      	lsls	r0, r3, #29
    17c6:	d503      	bpl.n	17d0 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    17c8:	2304      	movs	r3, #4
    17ca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    17cc:	331a      	adds	r3, #26
    17ce:	e7e4      	b.n	179a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    17d0:	07d8      	lsls	r0, r3, #31
    17d2:	d503      	bpl.n	17dc <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    17d4:	2301      	movs	r3, #1
    17d6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    17d8:	3312      	adds	r3, #18
    17da:	e7de      	b.n	179a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    17dc:	06d8      	lsls	r0, r3, #27
    17de:	d503      	bpl.n	17e8 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    17e0:	2310      	movs	r3, #16
    17e2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    17e4:	3332      	adds	r3, #50	; 0x32
    17e6:	e7d8      	b.n	179a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    17e8:	069b      	lsls	r3, r3, #26
    17ea:	d503      	bpl.n	17f4 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    17ec:	2320      	movs	r3, #32
    17ee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    17f0:	3321      	adds	r3, #33	; 0x21
    17f2:	e7d2      	b.n	179a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    17f4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    17f6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    17f8:	2300      	movs	r3, #0
    17fa:	e7ce      	b.n	179a <usart_read_wait+0x8>

000017fc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    17fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17fe:	0004      	movs	r4, r0
    1800:	000d      	movs	r5, r1
    1802:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1804:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1806:	4b0f      	ldr	r3, [pc, #60]	; (1844 <_usart_read_buffer+0x48>)
    1808:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    180a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    180c:	b29b      	uxth	r3, r3
    180e:	2b00      	cmp	r3, #0
    1810:	d003      	beq.n	181a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    1812:	4b0d      	ldr	r3, [pc, #52]	; (1848 <_usart_read_buffer+0x4c>)
    1814:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1816:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    181a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    181c:	4b0a      	ldr	r3, [pc, #40]	; (1848 <_usart_read_buffer+0x4c>)
    181e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1820:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1822:	2205      	movs	r2, #5
    1824:	2332      	movs	r3, #50	; 0x32
    1826:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1828:	3b2e      	subs	r3, #46	; 0x2e
    182a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    182c:	7a23      	ldrb	r3, [r4, #8]
    182e:	2b00      	cmp	r3, #0
    1830:	d001      	beq.n	1836 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1832:	2320      	movs	r3, #32
    1834:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    1836:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    1838:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    183a:	2b00      	cmp	r3, #0
    183c:	d0ec      	beq.n	1818 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    183e:	2308      	movs	r3, #8
    1840:	75bb      	strb	r3, [r7, #22]
    1842:	e7e9      	b.n	1818 <_usart_read_buffer+0x1c>
    1844:	000009f1 	.word	0x000009f1
    1848:	00000a31 	.word	0x00000a31

0000184c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    184c:	1c93      	adds	r3, r2, #2
    184e:	009b      	lsls	r3, r3, #2
    1850:	18c3      	adds	r3, r0, r3
    1852:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1854:	2130      	movs	r1, #48	; 0x30
    1856:	2301      	movs	r3, #1
    1858:	4093      	lsls	r3, r2
    185a:	001a      	movs	r2, r3
    185c:	5c43      	ldrb	r3, [r0, r1]
    185e:	4313      	orrs	r3, r2
    1860:	5443      	strb	r3, [r0, r1]
}
    1862:	4770      	bx	lr

00001864 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1864:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1866:	2317      	movs	r3, #23
	if (length == 0) {
    1868:	2a00      	cmp	r2, #0
    186a:	d101      	bne.n	1870 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    186c:	0018      	movs	r0, r3
    186e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1870:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1872:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1874:	2c00      	cmp	r4, #0
    1876:	d0f9      	beq.n	186c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1878:	4b01      	ldr	r3, [pc, #4]	; (1880 <usart_read_buffer_job+0x1c>)
    187a:	4798      	blx	r3
    187c:	0003      	movs	r3, r0
    187e:	e7f5      	b.n	186c <usart_read_buffer_job+0x8>
    1880:	000017fd 	.word	0x000017fd

00001884 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1886:	0080      	lsls	r0, r0, #2
    1888:	4b62      	ldr	r3, [pc, #392]	; (1a14 <_usart_interrupt_handler+0x190>)
    188a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    188c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    188e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1890:	2b00      	cmp	r3, #0
    1892:	d1fc      	bne.n	188e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1894:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1896:	7da6      	ldrb	r6, [r4, #22]
    1898:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    189a:	2330      	movs	r3, #48	; 0x30
    189c:	5ceb      	ldrb	r3, [r5, r3]
    189e:	2231      	movs	r2, #49	; 0x31
    18a0:	5caf      	ldrb	r7, [r5, r2]
    18a2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    18a4:	07f3      	lsls	r3, r6, #31
    18a6:	d522      	bpl.n	18ee <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    18a8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    18aa:	b29b      	uxth	r3, r3
    18ac:	2b00      	cmp	r3, #0
    18ae:	d01c      	beq.n	18ea <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    18b2:	7813      	ldrb	r3, [r2, #0]
    18b4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    18b6:	1c51      	adds	r1, r2, #1
    18b8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    18ba:	7969      	ldrb	r1, [r5, #5]
    18bc:	2901      	cmp	r1, #1
    18be:	d00e      	beq.n	18de <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    18c0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    18c2:	05db      	lsls	r3, r3, #23
    18c4:	0ddb      	lsrs	r3, r3, #23
    18c6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    18c8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    18ca:	3b01      	subs	r3, #1
    18cc:	b29b      	uxth	r3, r3
    18ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
    18d0:	2b00      	cmp	r3, #0
    18d2:	d10c      	bne.n	18ee <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18d4:	3301      	adds	r3, #1
    18d6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    18d8:	3301      	adds	r3, #1
    18da:	75a3      	strb	r3, [r4, #22]
    18dc:	e007      	b.n	18ee <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    18de:	7851      	ldrb	r1, [r2, #1]
    18e0:	0209      	lsls	r1, r1, #8
    18e2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    18e4:	3202      	adds	r2, #2
    18e6:	62aa      	str	r2, [r5, #40]	; 0x28
    18e8:	e7eb      	b.n	18c2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    18ea:	2301      	movs	r3, #1
    18ec:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    18ee:	07b3      	lsls	r3, r6, #30
    18f0:	d506      	bpl.n	1900 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    18f2:	2302      	movs	r3, #2
    18f4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    18f6:	2200      	movs	r2, #0
    18f8:	3331      	adds	r3, #49	; 0x31
    18fa:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    18fc:	07fb      	lsls	r3, r7, #31
    18fe:	d41a      	bmi.n	1936 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1900:	0773      	lsls	r3, r6, #29
    1902:	d565      	bpl.n	19d0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1904:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1906:	b29b      	uxth	r3, r3
    1908:	2b00      	cmp	r3, #0
    190a:	d05f      	beq.n	19cc <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    190c:	8b63      	ldrh	r3, [r4, #26]
    190e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1910:	071a      	lsls	r2, r3, #28
    1912:	d414      	bmi.n	193e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1914:	223f      	movs	r2, #63	; 0x3f
    1916:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1918:	2b00      	cmp	r3, #0
    191a:	d034      	beq.n	1986 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    191c:	079a      	lsls	r2, r3, #30
    191e:	d511      	bpl.n	1944 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1920:	221a      	movs	r2, #26
    1922:	2332      	movs	r3, #50	; 0x32
    1924:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1926:	3b30      	subs	r3, #48	; 0x30
    1928:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    192a:	077b      	lsls	r3, r7, #29
    192c:	d550      	bpl.n	19d0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    192e:	0028      	movs	r0, r5
    1930:	696b      	ldr	r3, [r5, #20]
    1932:	4798      	blx	r3
    1934:	e04c      	b.n	19d0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1936:	0028      	movs	r0, r5
    1938:	68eb      	ldr	r3, [r5, #12]
    193a:	4798      	blx	r3
    193c:	e7e0      	b.n	1900 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    193e:	2237      	movs	r2, #55	; 0x37
    1940:	4013      	ands	r3, r2
    1942:	e7e9      	b.n	1918 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1944:	075a      	lsls	r2, r3, #29
    1946:	d505      	bpl.n	1954 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1948:	221e      	movs	r2, #30
    194a:	2332      	movs	r3, #50	; 0x32
    194c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    194e:	3b2e      	subs	r3, #46	; 0x2e
    1950:	8363      	strh	r3, [r4, #26]
    1952:	e7ea      	b.n	192a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1954:	07da      	lsls	r2, r3, #31
    1956:	d505      	bpl.n	1964 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1958:	2213      	movs	r2, #19
    195a:	2332      	movs	r3, #50	; 0x32
    195c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    195e:	3b31      	subs	r3, #49	; 0x31
    1960:	8363      	strh	r3, [r4, #26]
    1962:	e7e2      	b.n	192a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1964:	06da      	lsls	r2, r3, #27
    1966:	d505      	bpl.n	1974 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1968:	2242      	movs	r2, #66	; 0x42
    196a:	2332      	movs	r3, #50	; 0x32
    196c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    196e:	3b22      	subs	r3, #34	; 0x22
    1970:	8363      	strh	r3, [r4, #26]
    1972:	e7da      	b.n	192a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1974:	2220      	movs	r2, #32
    1976:	421a      	tst	r2, r3
    1978:	d0d7      	beq.n	192a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    197a:	3221      	adds	r2, #33	; 0x21
    197c:	2332      	movs	r3, #50	; 0x32
    197e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1980:	3b12      	subs	r3, #18
    1982:	8363      	strh	r3, [r4, #26]
    1984:	e7d1      	b.n	192a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1986:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1988:	05db      	lsls	r3, r3, #23
    198a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    198c:	b2da      	uxtb	r2, r3
    198e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1990:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1992:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1994:	1c51      	adds	r1, r2, #1
    1996:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1998:	7969      	ldrb	r1, [r5, #5]
    199a:	2901      	cmp	r1, #1
    199c:	d010      	beq.n	19c0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    199e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    19a0:	3b01      	subs	r3, #1
    19a2:	b29b      	uxth	r3, r3
    19a4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    19a6:	2b00      	cmp	r3, #0
    19a8:	d112      	bne.n	19d0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19aa:	3304      	adds	r3, #4
    19ac:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    19ae:	2200      	movs	r2, #0
    19b0:	332e      	adds	r3, #46	; 0x2e
    19b2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    19b4:	07bb      	lsls	r3, r7, #30
    19b6:	d50b      	bpl.n	19d0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    19b8:	0028      	movs	r0, r5
    19ba:	692b      	ldr	r3, [r5, #16]
    19bc:	4798      	blx	r3
    19be:	e007      	b.n	19d0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    19c0:	0a1b      	lsrs	r3, r3, #8
    19c2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    19c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    19c6:	3301      	adds	r3, #1
    19c8:	626b      	str	r3, [r5, #36]	; 0x24
    19ca:	e7e8      	b.n	199e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    19cc:	2304      	movs	r3, #4
    19ce:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    19d0:	06f3      	lsls	r3, r6, #27
    19d2:	d504      	bpl.n	19de <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    19d4:	2310      	movs	r3, #16
    19d6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    19d8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    19da:	06fb      	lsls	r3, r7, #27
    19dc:	d40e      	bmi.n	19fc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    19de:	06b3      	lsls	r3, r6, #26
    19e0:	d504      	bpl.n	19ec <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    19e2:	2320      	movs	r3, #32
    19e4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    19e6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    19e8:	073b      	lsls	r3, r7, #28
    19ea:	d40b      	bmi.n	1a04 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    19ec:	0733      	lsls	r3, r6, #28
    19ee:	d504      	bpl.n	19fa <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    19f0:	2308      	movs	r3, #8
    19f2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    19f4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    19f6:	06bb      	lsls	r3, r7, #26
    19f8:	d408      	bmi.n	1a0c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    19fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    19fc:	0028      	movs	r0, r5
    19fe:	69eb      	ldr	r3, [r5, #28]
    1a00:	4798      	blx	r3
    1a02:	e7ec      	b.n	19de <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1a04:	0028      	movs	r0, r5
    1a06:	69ab      	ldr	r3, [r5, #24]
    1a08:	4798      	blx	r3
    1a0a:	e7ef      	b.n	19ec <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1a0c:	6a2b      	ldr	r3, [r5, #32]
    1a0e:	0028      	movs	r0, r5
    1a10:	4798      	blx	r3
}
    1a12:	e7f2      	b.n	19fa <_usart_interrupt_handler+0x176>
    1a14:	200002d0 	.word	0x200002d0

00001a18 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1a18:	b510      	push	{r4, lr}
	switch (clock_source) {
    1a1a:	2808      	cmp	r0, #8
    1a1c:	d803      	bhi.n	1a26 <system_clock_source_get_hz+0xe>
    1a1e:	0080      	lsls	r0, r0, #2
    1a20:	4b1c      	ldr	r3, [pc, #112]	; (1a94 <system_clock_source_get_hz+0x7c>)
    1a22:	581b      	ldr	r3, [r3, r0]
    1a24:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1a26:	2000      	movs	r0, #0
    1a28:	e032      	b.n	1a90 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1a2a:	4b1b      	ldr	r3, [pc, #108]	; (1a98 <system_clock_source_get_hz+0x80>)
    1a2c:	6918      	ldr	r0, [r3, #16]
    1a2e:	e02f      	b.n	1a90 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1a30:	4b1a      	ldr	r3, [pc, #104]	; (1a9c <system_clock_source_get_hz+0x84>)
    1a32:	6a1b      	ldr	r3, [r3, #32]
    1a34:	059b      	lsls	r3, r3, #22
    1a36:	0f9b      	lsrs	r3, r3, #30
    1a38:	4819      	ldr	r0, [pc, #100]	; (1aa0 <system_clock_source_get_hz+0x88>)
    1a3a:	40d8      	lsrs	r0, r3
    1a3c:	e028      	b.n	1a90 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1a3e:	4b16      	ldr	r3, [pc, #88]	; (1a98 <system_clock_source_get_hz+0x80>)
    1a40:	6958      	ldr	r0, [r3, #20]
    1a42:	e025      	b.n	1a90 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1a44:	4b14      	ldr	r3, [pc, #80]	; (1a98 <system_clock_source_get_hz+0x80>)
    1a46:	681b      	ldr	r3, [r3, #0]
			return 0;
    1a48:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1a4a:	079b      	lsls	r3, r3, #30
    1a4c:	d520      	bpl.n	1a90 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a4e:	4913      	ldr	r1, [pc, #76]	; (1a9c <system_clock_source_get_hz+0x84>)
    1a50:	2210      	movs	r2, #16
    1a52:	68cb      	ldr	r3, [r1, #12]
    1a54:	421a      	tst	r2, r3
    1a56:	d0fc      	beq.n	1a52 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1a58:	4b0f      	ldr	r3, [pc, #60]	; (1a98 <system_clock_source_get_hz+0x80>)
    1a5a:	681a      	ldr	r2, [r3, #0]
    1a5c:	2324      	movs	r3, #36	; 0x24
    1a5e:	4013      	ands	r3, r2
    1a60:	2b04      	cmp	r3, #4
    1a62:	d001      	beq.n	1a68 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1a64:	480f      	ldr	r0, [pc, #60]	; (1aa4 <system_clock_source_get_hz+0x8c>)
    1a66:	e013      	b.n	1a90 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a68:	2000      	movs	r0, #0
    1a6a:	4b0f      	ldr	r3, [pc, #60]	; (1aa8 <system_clock_source_get_hz+0x90>)
    1a6c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1a6e:	4b0a      	ldr	r3, [pc, #40]	; (1a98 <system_clock_source_get_hz+0x80>)
    1a70:	689b      	ldr	r3, [r3, #8]
    1a72:	041b      	lsls	r3, r3, #16
    1a74:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a76:	4358      	muls	r0, r3
    1a78:	e00a      	b.n	1a90 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a7a:	2350      	movs	r3, #80	; 0x50
    1a7c:	4a07      	ldr	r2, [pc, #28]	; (1a9c <system_clock_source_get_hz+0x84>)
    1a7e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1a80:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a82:	075b      	lsls	r3, r3, #29
    1a84:	d504      	bpl.n	1a90 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1a86:	4b04      	ldr	r3, [pc, #16]	; (1a98 <system_clock_source_get_hz+0x80>)
    1a88:	68d8      	ldr	r0, [r3, #12]
    1a8a:	e001      	b.n	1a90 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1a8c:	2080      	movs	r0, #128	; 0x80
    1a8e:	0200      	lsls	r0, r0, #8
	}
}
    1a90:	bd10      	pop	{r4, pc}
    1a92:	46c0      	nop			; (mov r8, r8)
    1a94:	000052e0 	.word	0x000052e0
    1a98:	2000028c 	.word	0x2000028c
    1a9c:	40000800 	.word	0x40000800
    1aa0:	007a1200 	.word	0x007a1200
    1aa4:	02dc6c00 	.word	0x02dc6c00
    1aa8:	00002079 	.word	0x00002079

00001aac <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1aac:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1aae:	490c      	ldr	r1, [pc, #48]	; (1ae0 <system_clock_source_osc8m_set_config+0x34>)
    1ab0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1ab2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1ab4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1ab6:	7840      	ldrb	r0, [r0, #1]
    1ab8:	2201      	movs	r2, #1
    1aba:	4010      	ands	r0, r2
    1abc:	0180      	lsls	r0, r0, #6
    1abe:	2640      	movs	r6, #64	; 0x40
    1ac0:	43b3      	bics	r3, r6
    1ac2:	4303      	orrs	r3, r0
    1ac4:	402a      	ands	r2, r5
    1ac6:	01d2      	lsls	r2, r2, #7
    1ac8:	2080      	movs	r0, #128	; 0x80
    1aca:	4383      	bics	r3, r0
    1acc:	4313      	orrs	r3, r2
    1ace:	2203      	movs	r2, #3
    1ad0:	4022      	ands	r2, r4
    1ad2:	0212      	lsls	r2, r2, #8
    1ad4:	4803      	ldr	r0, [pc, #12]	; (1ae4 <system_clock_source_osc8m_set_config+0x38>)
    1ad6:	4003      	ands	r3, r0
    1ad8:	4313      	orrs	r3, r2
    1ada:	620b      	str	r3, [r1, #32]
}
    1adc:	bd70      	pop	{r4, r5, r6, pc}
    1ade:	46c0      	nop			; (mov r8, r8)
    1ae0:	40000800 	.word	0x40000800
    1ae4:	fffffcff 	.word	0xfffffcff

00001ae8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aea:	46de      	mov	lr, fp
    1aec:	4657      	mov	r7, sl
    1aee:	464e      	mov	r6, r9
    1af0:	4645      	mov	r5, r8
    1af2:	b5e0      	push	{r5, r6, r7, lr}
    1af4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1af6:	4b26      	ldr	r3, [pc, #152]	; (1b90 <system_clock_source_xosc32k_set_config+0xa8>)
    1af8:	469b      	mov	fp, r3
    1afa:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1afc:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1afe:	7800      	ldrb	r0, [r0, #0]
    1b00:	4242      	negs	r2, r0
    1b02:	4142      	adcs	r2, r0
    1b04:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1b06:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1b08:	78ca      	ldrb	r2, [r1, #3]
    1b0a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1b0c:	790a      	ldrb	r2, [r1, #4]
    1b0e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1b10:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b12:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1b14:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1b16:	688a      	ldr	r2, [r1, #8]
    1b18:	491e      	ldr	r1, [pc, #120]	; (1b94 <system_clock_source_xosc32k_set_config+0xac>)
    1b1a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1b1c:	2101      	movs	r1, #1
    1b1e:	464a      	mov	r2, r9
    1b20:	0092      	lsls	r2, r2, #2
    1b22:	4691      	mov	r9, r2
    1b24:	2204      	movs	r2, #4
    1b26:	4393      	bics	r3, r2
    1b28:	464a      	mov	r2, r9
    1b2a:	4313      	orrs	r3, r2
    1b2c:	4642      	mov	r2, r8
    1b2e:	400a      	ands	r2, r1
    1b30:	00d2      	lsls	r2, r2, #3
    1b32:	4690      	mov	r8, r2
    1b34:	2208      	movs	r2, #8
    1b36:	4393      	bics	r3, r2
    1b38:	4642      	mov	r2, r8
    1b3a:	4313      	orrs	r3, r2
    1b3c:	4662      	mov	r2, ip
    1b3e:	400a      	ands	r2, r1
    1b40:	0112      	lsls	r2, r2, #4
    1b42:	4694      	mov	ip, r2
    1b44:	2210      	movs	r2, #16
    1b46:	4393      	bics	r3, r2
    1b48:	4662      	mov	r2, ip
    1b4a:	4313      	orrs	r3, r2
    1b4c:	4008      	ands	r0, r1
    1b4e:	0140      	lsls	r0, r0, #5
    1b50:	2220      	movs	r2, #32
    1b52:	4393      	bics	r3, r2
    1b54:	4303      	orrs	r3, r0
    1b56:	400f      	ands	r7, r1
    1b58:	01bf      	lsls	r7, r7, #6
    1b5a:	2040      	movs	r0, #64	; 0x40
    1b5c:	4383      	bics	r3, r0
    1b5e:	433b      	orrs	r3, r7
    1b60:	400e      	ands	r6, r1
    1b62:	01f6      	lsls	r6, r6, #7
    1b64:	3040      	adds	r0, #64	; 0x40
    1b66:	4383      	bics	r3, r0
    1b68:	4333      	orrs	r3, r6
    1b6a:	3879      	subs	r0, #121	; 0x79
    1b6c:	4005      	ands	r5, r0
    1b6e:	022d      	lsls	r5, r5, #8
    1b70:	4809      	ldr	r0, [pc, #36]	; (1b98 <system_clock_source_xosc32k_set_config+0xb0>)
    1b72:	4003      	ands	r3, r0
    1b74:	432b      	orrs	r3, r5
    1b76:	4021      	ands	r1, r4
    1b78:	0309      	lsls	r1, r1, #12
    1b7a:	4808      	ldr	r0, [pc, #32]	; (1b9c <system_clock_source_xosc32k_set_config+0xb4>)
    1b7c:	4003      	ands	r3, r0
    1b7e:	430b      	orrs	r3, r1
    1b80:	465a      	mov	r2, fp
    1b82:	8293      	strh	r3, [r2, #20]
}
    1b84:	bc3c      	pop	{r2, r3, r4, r5}
    1b86:	4690      	mov	r8, r2
    1b88:	4699      	mov	r9, r3
    1b8a:	46a2      	mov	sl, r4
    1b8c:	46ab      	mov	fp, r5
    1b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b90:	40000800 	.word	0x40000800
    1b94:	2000028c 	.word	0x2000028c
    1b98:	fffff8ff 	.word	0xfffff8ff
    1b9c:	ffffefff 	.word	0xffffefff

00001ba0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1ba0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1ba2:	7a03      	ldrb	r3, [r0, #8]
    1ba4:	069b      	lsls	r3, r3, #26
    1ba6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1ba8:	8942      	ldrh	r2, [r0, #10]
    1baa:	0592      	lsls	r2, r2, #22
    1bac:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1bae:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1bb0:	4918      	ldr	r1, [pc, #96]	; (1c14 <system_clock_source_dfll_set_config+0x74>)
    1bb2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1bb4:	7983      	ldrb	r3, [r0, #6]
    1bb6:	79c2      	ldrb	r2, [r0, #7]
    1bb8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1bba:	8842      	ldrh	r2, [r0, #2]
    1bbc:	8884      	ldrh	r4, [r0, #4]
    1bbe:	4322      	orrs	r2, r4
    1bc0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1bc2:	7842      	ldrb	r2, [r0, #1]
    1bc4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1bc6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1bc8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1bca:	7803      	ldrb	r3, [r0, #0]
    1bcc:	2b04      	cmp	r3, #4
    1bce:	d011      	beq.n	1bf4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1bd0:	2b20      	cmp	r3, #32
    1bd2:	d10e      	bne.n	1bf2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1bd4:	7b03      	ldrb	r3, [r0, #12]
    1bd6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1bd8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1bda:	4313      	orrs	r3, r2
    1bdc:	89c2      	ldrh	r2, [r0, #14]
    1bde:	0412      	lsls	r2, r2, #16
    1be0:	490d      	ldr	r1, [pc, #52]	; (1c18 <system_clock_source_dfll_set_config+0x78>)
    1be2:	400a      	ands	r2, r1
    1be4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1be6:	4a0b      	ldr	r2, [pc, #44]	; (1c14 <system_clock_source_dfll_set_config+0x74>)
    1be8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1bea:	6811      	ldr	r1, [r2, #0]
    1bec:	4b0b      	ldr	r3, [pc, #44]	; (1c1c <system_clock_source_dfll_set_config+0x7c>)
    1bee:	430b      	orrs	r3, r1
    1bf0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1bf2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1bf4:	7b03      	ldrb	r3, [r0, #12]
    1bf6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1bf8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1bfa:	4313      	orrs	r3, r2
    1bfc:	89c2      	ldrh	r2, [r0, #14]
    1bfe:	0412      	lsls	r2, r2, #16
    1c00:	4905      	ldr	r1, [pc, #20]	; (1c18 <system_clock_source_dfll_set_config+0x78>)
    1c02:	400a      	ands	r2, r1
    1c04:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1c06:	4a03      	ldr	r2, [pc, #12]	; (1c14 <system_clock_source_dfll_set_config+0x74>)
    1c08:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1c0a:	6813      	ldr	r3, [r2, #0]
    1c0c:	2104      	movs	r1, #4
    1c0e:	430b      	orrs	r3, r1
    1c10:	6013      	str	r3, [r2, #0]
    1c12:	e7ee      	b.n	1bf2 <system_clock_source_dfll_set_config+0x52>
    1c14:	2000028c 	.word	0x2000028c
    1c18:	03ff0000 	.word	0x03ff0000
    1c1c:	00000424 	.word	0x00000424

00001c20 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1c20:	2808      	cmp	r0, #8
    1c22:	d803      	bhi.n	1c2c <system_clock_source_enable+0xc>
    1c24:	0080      	lsls	r0, r0, #2
    1c26:	4b25      	ldr	r3, [pc, #148]	; (1cbc <system_clock_source_enable+0x9c>)
    1c28:	581b      	ldr	r3, [r3, r0]
    1c2a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1c2c:	2017      	movs	r0, #23
    1c2e:	e044      	b.n	1cba <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1c30:	4a23      	ldr	r2, [pc, #140]	; (1cc0 <system_clock_source_enable+0xa0>)
    1c32:	6a13      	ldr	r3, [r2, #32]
    1c34:	2102      	movs	r1, #2
    1c36:	430b      	orrs	r3, r1
    1c38:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1c3a:	2000      	movs	r0, #0
    1c3c:	e03d      	b.n	1cba <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1c3e:	4a20      	ldr	r2, [pc, #128]	; (1cc0 <system_clock_source_enable+0xa0>)
    1c40:	6993      	ldr	r3, [r2, #24]
    1c42:	2102      	movs	r1, #2
    1c44:	430b      	orrs	r3, r1
    1c46:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1c48:	2000      	movs	r0, #0
		break;
    1c4a:	e036      	b.n	1cba <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1c4c:	4a1c      	ldr	r2, [pc, #112]	; (1cc0 <system_clock_source_enable+0xa0>)
    1c4e:	8a13      	ldrh	r3, [r2, #16]
    1c50:	2102      	movs	r1, #2
    1c52:	430b      	orrs	r3, r1
    1c54:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1c56:	2000      	movs	r0, #0
		break;
    1c58:	e02f      	b.n	1cba <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1c5a:	4a19      	ldr	r2, [pc, #100]	; (1cc0 <system_clock_source_enable+0xa0>)
    1c5c:	8a93      	ldrh	r3, [r2, #20]
    1c5e:	2102      	movs	r1, #2
    1c60:	430b      	orrs	r3, r1
    1c62:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1c64:	2000      	movs	r0, #0
		break;
    1c66:	e028      	b.n	1cba <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1c68:	4916      	ldr	r1, [pc, #88]	; (1cc4 <system_clock_source_enable+0xa4>)
    1c6a:	680b      	ldr	r3, [r1, #0]
    1c6c:	2202      	movs	r2, #2
    1c6e:	4313      	orrs	r3, r2
    1c70:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1c72:	4b13      	ldr	r3, [pc, #76]	; (1cc0 <system_clock_source_enable+0xa0>)
    1c74:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c76:	0019      	movs	r1, r3
    1c78:	320e      	adds	r2, #14
    1c7a:	68cb      	ldr	r3, [r1, #12]
    1c7c:	421a      	tst	r2, r3
    1c7e:	d0fc      	beq.n	1c7a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1c80:	4a10      	ldr	r2, [pc, #64]	; (1cc4 <system_clock_source_enable+0xa4>)
    1c82:	6891      	ldr	r1, [r2, #8]
    1c84:	4b0e      	ldr	r3, [pc, #56]	; (1cc0 <system_clock_source_enable+0xa0>)
    1c86:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1c88:	6852      	ldr	r2, [r2, #4]
    1c8a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1c8c:	2200      	movs	r2, #0
    1c8e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c90:	0019      	movs	r1, r3
    1c92:	3210      	adds	r2, #16
    1c94:	68cb      	ldr	r3, [r1, #12]
    1c96:	421a      	tst	r2, r3
    1c98:	d0fc      	beq.n	1c94 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1c9a:	4b0a      	ldr	r3, [pc, #40]	; (1cc4 <system_clock_source_enable+0xa4>)
    1c9c:	681b      	ldr	r3, [r3, #0]
    1c9e:	b29b      	uxth	r3, r3
    1ca0:	4a07      	ldr	r2, [pc, #28]	; (1cc0 <system_clock_source_enable+0xa0>)
    1ca2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1ca4:	2000      	movs	r0, #0
    1ca6:	e008      	b.n	1cba <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1ca8:	4905      	ldr	r1, [pc, #20]	; (1cc0 <system_clock_source_enable+0xa0>)
    1caa:	2244      	movs	r2, #68	; 0x44
    1cac:	5c8b      	ldrb	r3, [r1, r2]
    1cae:	2002      	movs	r0, #2
    1cb0:	4303      	orrs	r3, r0
    1cb2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1cb4:	2000      	movs	r0, #0
		break;
    1cb6:	e000      	b.n	1cba <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1cb8:	2000      	movs	r0, #0
}
    1cba:	4770      	bx	lr
    1cbc:	00005304 	.word	0x00005304
    1cc0:	40000800 	.word	0x40000800
    1cc4:	2000028c 	.word	0x2000028c

00001cc8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cca:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1ccc:	22c2      	movs	r2, #194	; 0xc2
    1cce:	00d2      	lsls	r2, r2, #3
    1cd0:	4b47      	ldr	r3, [pc, #284]	; (1df0 <system_clock_init+0x128>)
    1cd2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1cd4:	4947      	ldr	r1, [pc, #284]	; (1df4 <system_clock_init+0x12c>)
    1cd6:	684b      	ldr	r3, [r1, #4]
    1cd8:	221e      	movs	r2, #30
    1cda:	4393      	bics	r3, r2
    1cdc:	3a1c      	subs	r2, #28
    1cde:	4313      	orrs	r3, r2
    1ce0:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1ce2:	ab01      	add	r3, sp, #4
    1ce4:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ce6:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1ce8:	4d43      	ldr	r5, [pc, #268]	; (1df8 <system_clock_init+0x130>)
    1cea:	b2e0      	uxtb	r0, r4
    1cec:	a901      	add	r1, sp, #4
    1cee:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1cf0:	3401      	adds	r4, #1
    1cf2:	2c25      	cmp	r4, #37	; 0x25
    1cf4:	d1f9      	bne.n	1cea <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1cf6:	a80a      	add	r0, sp, #40	; 0x28
    1cf8:	2300      	movs	r3, #0
    1cfa:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1cfc:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1cfe:	2280      	movs	r2, #128	; 0x80
    1d00:	0212      	lsls	r2, r2, #8
    1d02:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1d04:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1d06:	2201      	movs	r2, #1
    1d08:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1d0a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1d0c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1d0e:	3205      	adds	r2, #5
    1d10:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1d12:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1d14:	4b39      	ldr	r3, [pc, #228]	; (1dfc <system_clock_init+0x134>)
    1d16:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1d18:	2005      	movs	r0, #5
    1d1a:	4b39      	ldr	r3, [pc, #228]	; (1e00 <system_clock_init+0x138>)
    1d1c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1d1e:	4934      	ldr	r1, [pc, #208]	; (1df0 <system_clock_init+0x128>)
    1d20:	2202      	movs	r2, #2
    1d22:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1d24:	421a      	tst	r2, r3
    1d26:	d0fc      	beq.n	1d22 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1d28:	4a31      	ldr	r2, [pc, #196]	; (1df0 <system_clock_init+0x128>)
    1d2a:	8a93      	ldrh	r3, [r2, #20]
    1d2c:	2180      	movs	r1, #128	; 0x80
    1d2e:	430b      	orrs	r3, r1
    1d30:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1d32:	ab05      	add	r3, sp, #20
    1d34:	2100      	movs	r1, #0
    1d36:	2200      	movs	r2, #0
    1d38:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1d3a:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1d3c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1d3e:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1d40:	313f      	adds	r1, #63	; 0x3f
    1d42:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1d44:	393b      	subs	r1, #59	; 0x3b
    1d46:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1d48:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1d4a:	4b2e      	ldr	r3, [pc, #184]	; (1e04 <system_clock_init+0x13c>)
    1d4c:	681b      	ldr	r3, [r3, #0]
    1d4e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1d50:	2b3f      	cmp	r3, #63	; 0x3f
    1d52:	d04b      	beq.n	1dec <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1d54:	a805      	add	r0, sp, #20
    1d56:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1d58:	23b7      	movs	r3, #183	; 0xb7
    1d5a:	00db      	lsls	r3, r3, #3
    1d5c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1d5e:	2307      	movs	r3, #7
    1d60:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1d62:	3338      	adds	r3, #56	; 0x38
    1d64:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1d66:	4b28      	ldr	r3, [pc, #160]	; (1e08 <system_clock_init+0x140>)
    1d68:	4798      	blx	r3
	config->run_in_standby  = false;
    1d6a:	a804      	add	r0, sp, #16
    1d6c:	2500      	movs	r5, #0
    1d6e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1d70:	2601      	movs	r6, #1
    1d72:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1d74:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1d76:	4b25      	ldr	r3, [pc, #148]	; (1e0c <system_clock_init+0x144>)
    1d78:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1d7a:	2006      	movs	r0, #6
    1d7c:	4f20      	ldr	r7, [pc, #128]	; (1e00 <system_clock_init+0x138>)
    1d7e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1d80:	4b23      	ldr	r3, [pc, #140]	; (1e10 <system_clock_init+0x148>)
    1d82:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1d84:	ac01      	add	r4, sp, #4
    1d86:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1d88:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1d8a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1d8c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1d8e:	2305      	movs	r3, #5
    1d90:	7023      	strb	r3, [r4, #0]
    1d92:	0021      	movs	r1, r4
    1d94:	2001      	movs	r0, #1
    1d96:	4b1f      	ldr	r3, [pc, #124]	; (1e14 <system_clock_init+0x14c>)
    1d98:	4798      	blx	r3
    1d9a:	2001      	movs	r0, #1
    1d9c:	4b1e      	ldr	r3, [pc, #120]	; (1e18 <system_clock_init+0x150>)
    1d9e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1da0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1da2:	0021      	movs	r1, r4
    1da4:	2000      	movs	r0, #0
    1da6:	4b14      	ldr	r3, [pc, #80]	; (1df8 <system_clock_init+0x130>)
    1da8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1daa:	2000      	movs	r0, #0
    1dac:	4b1b      	ldr	r3, [pc, #108]	; (1e1c <system_clock_init+0x154>)
    1dae:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1db0:	2007      	movs	r0, #7
    1db2:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1db4:	490e      	ldr	r1, [pc, #56]	; (1df0 <system_clock_init+0x128>)
    1db6:	22d0      	movs	r2, #208	; 0xd0
    1db8:	68cb      	ldr	r3, [r1, #12]
    1dba:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1dbc:	2bd0      	cmp	r3, #208	; 0xd0
    1dbe:	d1fb      	bne.n	1db8 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1dc0:	4a17      	ldr	r2, [pc, #92]	; (1e20 <system_clock_init+0x158>)
    1dc2:	2300      	movs	r3, #0
    1dc4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1dc6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1dc8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1dca:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1dcc:	a901      	add	r1, sp, #4
    1dce:	2201      	movs	r2, #1
    1dd0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1dd2:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1dd4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1dd6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1dd8:	3307      	adds	r3, #7
    1dda:	700b      	strb	r3, [r1, #0]
    1ddc:	2000      	movs	r0, #0
    1dde:	4b0d      	ldr	r3, [pc, #52]	; (1e14 <system_clock_init+0x14c>)
    1de0:	4798      	blx	r3
    1de2:	2000      	movs	r0, #0
    1de4:	4b0c      	ldr	r3, [pc, #48]	; (1e18 <system_clock_init+0x150>)
    1de6:	4798      	blx	r3
#endif
}
    1de8:	b00f      	add	sp, #60	; 0x3c
    1dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1dec:	3b20      	subs	r3, #32
    1dee:	e7b1      	b.n	1d54 <system_clock_init+0x8c>
    1df0:	40000800 	.word	0x40000800
    1df4:	41004000 	.word	0x41004000
    1df8:	0000205d 	.word	0x0000205d
    1dfc:	00001ae9 	.word	0x00001ae9
    1e00:	00001c21 	.word	0x00001c21
    1e04:	00806024 	.word	0x00806024
    1e08:	00001ba1 	.word	0x00001ba1
    1e0c:	00001aad 	.word	0x00001aad
    1e10:	00001e25 	.word	0x00001e25
    1e14:	00001e49 	.word	0x00001e49
    1e18:	00001f01 	.word	0x00001f01
    1e1c:	00001fd1 	.word	0x00001fd1
    1e20:	40000400 	.word	0x40000400

00001e24 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1e24:	4a06      	ldr	r2, [pc, #24]	; (1e40 <system_gclk_init+0x1c>)
    1e26:	6993      	ldr	r3, [r2, #24]
    1e28:	2108      	movs	r1, #8
    1e2a:	430b      	orrs	r3, r1
    1e2c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1e2e:	2201      	movs	r2, #1
    1e30:	4b04      	ldr	r3, [pc, #16]	; (1e44 <system_gclk_init+0x20>)
    1e32:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1e34:	0019      	movs	r1, r3
    1e36:	780b      	ldrb	r3, [r1, #0]
    1e38:	4213      	tst	r3, r2
    1e3a:	d1fc      	bne.n	1e36 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1e3c:	4770      	bx	lr
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	40000400 	.word	0x40000400
    1e44:	40000c00 	.word	0x40000c00

00001e48 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1e48:	b570      	push	{r4, r5, r6, lr}
    1e4a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1e4c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1e4e:	780d      	ldrb	r5, [r1, #0]
    1e50:	022d      	lsls	r5, r5, #8
    1e52:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1e54:	784b      	ldrb	r3, [r1, #1]
    1e56:	2b00      	cmp	r3, #0
    1e58:	d002      	beq.n	1e60 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1e5a:	2380      	movs	r3, #128	; 0x80
    1e5c:	02db      	lsls	r3, r3, #11
    1e5e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1e60:	7a4b      	ldrb	r3, [r1, #9]
    1e62:	2b00      	cmp	r3, #0
    1e64:	d002      	beq.n	1e6c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1e66:	2380      	movs	r3, #128	; 0x80
    1e68:	031b      	lsls	r3, r3, #12
    1e6a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1e6c:	6848      	ldr	r0, [r1, #4]
    1e6e:	2801      	cmp	r0, #1
    1e70:	d910      	bls.n	1e94 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1e72:	1e43      	subs	r3, r0, #1
    1e74:	4218      	tst	r0, r3
    1e76:	d134      	bne.n	1ee2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1e78:	2802      	cmp	r0, #2
    1e7a:	d930      	bls.n	1ede <system_gclk_gen_set_config+0x96>
    1e7c:	2302      	movs	r3, #2
    1e7e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1e80:	3201      	adds	r2, #1
						mask <<= 1) {
    1e82:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1e84:	4298      	cmp	r0, r3
    1e86:	d8fb      	bhi.n	1e80 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1e88:	0212      	lsls	r2, r2, #8
    1e8a:	4332      	orrs	r2, r6
    1e8c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1e8e:	2380      	movs	r3, #128	; 0x80
    1e90:	035b      	lsls	r3, r3, #13
    1e92:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1e94:	7a0b      	ldrb	r3, [r1, #8]
    1e96:	2b00      	cmp	r3, #0
    1e98:	d002      	beq.n	1ea0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1e9a:	2380      	movs	r3, #128	; 0x80
    1e9c:	039b      	lsls	r3, r3, #14
    1e9e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ea0:	4a13      	ldr	r2, [pc, #76]	; (1ef0 <system_gclk_gen_set_config+0xa8>)
    1ea2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1ea4:	b25b      	sxtb	r3, r3
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	dbfb      	blt.n	1ea2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1eaa:	4b12      	ldr	r3, [pc, #72]	; (1ef4 <system_gclk_gen_set_config+0xac>)
    1eac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1eae:	4b12      	ldr	r3, [pc, #72]	; (1ef8 <system_gclk_gen_set_config+0xb0>)
    1eb0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1eb2:	4a0f      	ldr	r2, [pc, #60]	; (1ef0 <system_gclk_gen_set_config+0xa8>)
    1eb4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1eb6:	b25b      	sxtb	r3, r3
    1eb8:	2b00      	cmp	r3, #0
    1eba:	dbfb      	blt.n	1eb4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1ebc:	4b0c      	ldr	r3, [pc, #48]	; (1ef0 <system_gclk_gen_set_config+0xa8>)
    1ebe:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ec0:	001a      	movs	r2, r3
    1ec2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1ec4:	b25b      	sxtb	r3, r3
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	dbfb      	blt.n	1ec2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1eca:	4a09      	ldr	r2, [pc, #36]	; (1ef0 <system_gclk_gen_set_config+0xa8>)
    1ecc:	6853      	ldr	r3, [r2, #4]
    1ece:	2180      	movs	r1, #128	; 0x80
    1ed0:	0249      	lsls	r1, r1, #9
    1ed2:	400b      	ands	r3, r1
    1ed4:	431d      	orrs	r5, r3
    1ed6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1ed8:	4b08      	ldr	r3, [pc, #32]	; (1efc <system_gclk_gen_set_config+0xb4>)
    1eda:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1edc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1ede:	2200      	movs	r2, #0
    1ee0:	e7d2      	b.n	1e88 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1ee2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1ee4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1ee6:	2380      	movs	r3, #128	; 0x80
    1ee8:	029b      	lsls	r3, r3, #10
    1eea:	431d      	orrs	r5, r3
    1eec:	e7d2      	b.n	1e94 <system_gclk_gen_set_config+0x4c>
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	40000c00 	.word	0x40000c00
    1ef4:	000009f1 	.word	0x000009f1
    1ef8:	40000c08 	.word	0x40000c08
    1efc:	00000a31 	.word	0x00000a31

00001f00 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1f00:	b510      	push	{r4, lr}
    1f02:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f04:	4a0b      	ldr	r2, [pc, #44]	; (1f34 <system_gclk_gen_enable+0x34>)
    1f06:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f08:	b25b      	sxtb	r3, r3
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	dbfb      	blt.n	1f06 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1f0e:	4b0a      	ldr	r3, [pc, #40]	; (1f38 <system_gclk_gen_enable+0x38>)
    1f10:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f12:	4b0a      	ldr	r3, [pc, #40]	; (1f3c <system_gclk_gen_enable+0x3c>)
    1f14:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f16:	4a07      	ldr	r2, [pc, #28]	; (1f34 <system_gclk_gen_enable+0x34>)
    1f18:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f1a:	b25b      	sxtb	r3, r3
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	dbfb      	blt.n	1f18 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1f20:	4a04      	ldr	r2, [pc, #16]	; (1f34 <system_gclk_gen_enable+0x34>)
    1f22:	6851      	ldr	r1, [r2, #4]
    1f24:	2380      	movs	r3, #128	; 0x80
    1f26:	025b      	lsls	r3, r3, #9
    1f28:	430b      	orrs	r3, r1
    1f2a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1f2c:	4b04      	ldr	r3, [pc, #16]	; (1f40 <system_gclk_gen_enable+0x40>)
    1f2e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f30:	bd10      	pop	{r4, pc}
    1f32:	46c0      	nop			; (mov r8, r8)
    1f34:	40000c00 	.word	0x40000c00
    1f38:	000009f1 	.word	0x000009f1
    1f3c:	40000c04 	.word	0x40000c04
    1f40:	00000a31 	.word	0x00000a31

00001f44 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1f44:	b570      	push	{r4, r5, r6, lr}
    1f46:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f48:	4a1a      	ldr	r2, [pc, #104]	; (1fb4 <system_gclk_gen_get_hz+0x70>)
    1f4a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f4c:	b25b      	sxtb	r3, r3
    1f4e:	2b00      	cmp	r3, #0
    1f50:	dbfb      	blt.n	1f4a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1f52:	4b19      	ldr	r3, [pc, #100]	; (1fb8 <system_gclk_gen_get_hz+0x74>)
    1f54:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f56:	4b19      	ldr	r3, [pc, #100]	; (1fbc <system_gclk_gen_get_hz+0x78>)
    1f58:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f5a:	4a16      	ldr	r2, [pc, #88]	; (1fb4 <system_gclk_gen_get_hz+0x70>)
    1f5c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f5e:	b25b      	sxtb	r3, r3
    1f60:	2b00      	cmp	r3, #0
    1f62:	dbfb      	blt.n	1f5c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1f64:	4e13      	ldr	r6, [pc, #76]	; (1fb4 <system_gclk_gen_get_hz+0x70>)
    1f66:	6870      	ldr	r0, [r6, #4]
    1f68:	04c0      	lsls	r0, r0, #19
    1f6a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1f6c:	4b14      	ldr	r3, [pc, #80]	; (1fc0 <system_gclk_gen_get_hz+0x7c>)
    1f6e:	4798      	blx	r3
    1f70:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f72:	4b12      	ldr	r3, [pc, #72]	; (1fbc <system_gclk_gen_get_hz+0x78>)
    1f74:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1f76:	6876      	ldr	r6, [r6, #4]
    1f78:	02f6      	lsls	r6, r6, #11
    1f7a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1f7c:	4b11      	ldr	r3, [pc, #68]	; (1fc4 <system_gclk_gen_get_hz+0x80>)
    1f7e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f80:	4a0c      	ldr	r2, [pc, #48]	; (1fb4 <system_gclk_gen_get_hz+0x70>)
    1f82:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f84:	b25b      	sxtb	r3, r3
    1f86:	2b00      	cmp	r3, #0
    1f88:	dbfb      	blt.n	1f82 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1f8a:	4b0a      	ldr	r3, [pc, #40]	; (1fb4 <system_gclk_gen_get_hz+0x70>)
    1f8c:	689c      	ldr	r4, [r3, #8]
    1f8e:	0224      	lsls	r4, r4, #8
    1f90:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1f92:	4b0d      	ldr	r3, [pc, #52]	; (1fc8 <system_gclk_gen_get_hz+0x84>)
    1f94:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1f96:	2e00      	cmp	r6, #0
    1f98:	d107      	bne.n	1faa <system_gclk_gen_get_hz+0x66>
    1f9a:	2c01      	cmp	r4, #1
    1f9c:	d907      	bls.n	1fae <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1f9e:	0021      	movs	r1, r4
    1fa0:	0028      	movs	r0, r5
    1fa2:	4b0a      	ldr	r3, [pc, #40]	; (1fcc <system_gclk_gen_get_hz+0x88>)
    1fa4:	4798      	blx	r3
    1fa6:	0005      	movs	r5, r0
    1fa8:	e001      	b.n	1fae <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1faa:	3401      	adds	r4, #1
    1fac:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1fae:	0028      	movs	r0, r5
    1fb0:	bd70      	pop	{r4, r5, r6, pc}
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	40000c00 	.word	0x40000c00
    1fb8:	000009f1 	.word	0x000009f1
    1fbc:	40000c04 	.word	0x40000c04
    1fc0:	00001a19 	.word	0x00001a19
    1fc4:	40000c08 	.word	0x40000c08
    1fc8:	00000a31 	.word	0x00000a31
    1fcc:	000036d5 	.word	0x000036d5

00001fd0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1fd0:	b510      	push	{r4, lr}
    1fd2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1fd4:	4b06      	ldr	r3, [pc, #24]	; (1ff0 <system_gclk_chan_enable+0x20>)
    1fd6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1fd8:	4b06      	ldr	r3, [pc, #24]	; (1ff4 <system_gclk_chan_enable+0x24>)
    1fda:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1fdc:	4a06      	ldr	r2, [pc, #24]	; (1ff8 <system_gclk_chan_enable+0x28>)
    1fde:	8853      	ldrh	r3, [r2, #2]
    1fe0:	2180      	movs	r1, #128	; 0x80
    1fe2:	01c9      	lsls	r1, r1, #7
    1fe4:	430b      	orrs	r3, r1
    1fe6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1fe8:	4b04      	ldr	r3, [pc, #16]	; (1ffc <system_gclk_chan_enable+0x2c>)
    1fea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1fec:	bd10      	pop	{r4, pc}
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	000009f1 	.word	0x000009f1
    1ff4:	40000c02 	.word	0x40000c02
    1ff8:	40000c00 	.word	0x40000c00
    1ffc:	00000a31 	.word	0x00000a31

00002000 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2000:	b510      	push	{r4, lr}
    2002:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2004:	4b0f      	ldr	r3, [pc, #60]	; (2044 <STACK_SIZE+0x44>)
    2006:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2008:	4b0f      	ldr	r3, [pc, #60]	; (2048 <STACK_SIZE+0x48>)
    200a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    200c:	4a0f      	ldr	r2, [pc, #60]	; (204c <STACK_SIZE+0x4c>)
    200e:	8853      	ldrh	r3, [r2, #2]
    2010:	051b      	lsls	r3, r3, #20
    2012:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2014:	8853      	ldrh	r3, [r2, #2]
    2016:	490e      	ldr	r1, [pc, #56]	; (2050 <STACK_SIZE+0x50>)
    2018:	400b      	ands	r3, r1
    201a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    201c:	8853      	ldrh	r3, [r2, #2]
    201e:	490d      	ldr	r1, [pc, #52]	; (2054 <STACK_SIZE+0x54>)
    2020:	400b      	ands	r3, r1
    2022:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2024:	0011      	movs	r1, r2
    2026:	2280      	movs	r2, #128	; 0x80
    2028:	01d2      	lsls	r2, r2, #7
    202a:	884b      	ldrh	r3, [r1, #2]
    202c:	4213      	tst	r3, r2
    202e:	d1fc      	bne.n	202a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2030:	4906      	ldr	r1, [pc, #24]	; (204c <STACK_SIZE+0x4c>)
    2032:	884a      	ldrh	r2, [r1, #2]
    2034:	0203      	lsls	r3, r0, #8
    2036:	4806      	ldr	r0, [pc, #24]	; (2050 <STACK_SIZE+0x50>)
    2038:	4002      	ands	r2, r0
    203a:	4313      	orrs	r3, r2
    203c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    203e:	4b06      	ldr	r3, [pc, #24]	; (2058 <STACK_SIZE+0x58>)
    2040:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2042:	bd10      	pop	{r4, pc}
    2044:	000009f1 	.word	0x000009f1
    2048:	40000c02 	.word	0x40000c02
    204c:	40000c00 	.word	0x40000c00
    2050:	fffff0ff 	.word	0xfffff0ff
    2054:	ffffbfff 	.word	0xffffbfff
    2058:	00000a31 	.word	0x00000a31

0000205c <system_gclk_chan_set_config>:
{
    205c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    205e:	780c      	ldrb	r4, [r1, #0]
    2060:	0224      	lsls	r4, r4, #8
    2062:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2064:	4b02      	ldr	r3, [pc, #8]	; (2070 <system_gclk_chan_set_config+0x14>)
    2066:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2068:	b2a4      	uxth	r4, r4
    206a:	4b02      	ldr	r3, [pc, #8]	; (2074 <system_gclk_chan_set_config+0x18>)
    206c:	805c      	strh	r4, [r3, #2]
}
    206e:	bd10      	pop	{r4, pc}
    2070:	00002001 	.word	0x00002001
    2074:	40000c00 	.word	0x40000c00

00002078 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2078:	b510      	push	{r4, lr}
    207a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    207c:	4b06      	ldr	r3, [pc, #24]	; (2098 <system_gclk_chan_get_hz+0x20>)
    207e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2080:	4b06      	ldr	r3, [pc, #24]	; (209c <system_gclk_chan_get_hz+0x24>)
    2082:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2084:	4b06      	ldr	r3, [pc, #24]	; (20a0 <system_gclk_chan_get_hz+0x28>)
    2086:	885c      	ldrh	r4, [r3, #2]
    2088:	0524      	lsls	r4, r4, #20
    208a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    208c:	4b05      	ldr	r3, [pc, #20]	; (20a4 <system_gclk_chan_get_hz+0x2c>)
    208e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2090:	0020      	movs	r0, r4
    2092:	4b05      	ldr	r3, [pc, #20]	; (20a8 <system_gclk_chan_get_hz+0x30>)
    2094:	4798      	blx	r3
}
    2096:	bd10      	pop	{r4, pc}
    2098:	000009f1 	.word	0x000009f1
    209c:	40000c02 	.word	0x40000c02
    20a0:	40000c00 	.word	0x40000c00
    20a4:	00000a31 	.word	0x00000a31
    20a8:	00001f45 	.word	0x00001f45

000020ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    20ac:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    20ae:	78d3      	ldrb	r3, [r2, #3]
    20b0:	2b00      	cmp	r3, #0
    20b2:	d135      	bne.n	2120 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    20b4:	7813      	ldrb	r3, [r2, #0]
    20b6:	2b80      	cmp	r3, #128	; 0x80
    20b8:	d029      	beq.n	210e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    20ba:	061b      	lsls	r3, r3, #24
    20bc:	2480      	movs	r4, #128	; 0x80
    20be:	0264      	lsls	r4, r4, #9
    20c0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    20c2:	7854      	ldrb	r4, [r2, #1]
    20c4:	2502      	movs	r5, #2
    20c6:	43ac      	bics	r4, r5
    20c8:	d106      	bne.n	20d8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    20ca:	7894      	ldrb	r4, [r2, #2]
    20cc:	2c00      	cmp	r4, #0
    20ce:	d120      	bne.n	2112 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    20d0:	2480      	movs	r4, #128	; 0x80
    20d2:	02a4      	lsls	r4, r4, #10
    20d4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    20d6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    20d8:	7854      	ldrb	r4, [r2, #1]
    20da:	3c01      	subs	r4, #1
    20dc:	2c01      	cmp	r4, #1
    20de:	d91c      	bls.n	211a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    20e0:	040d      	lsls	r5, r1, #16
    20e2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    20e4:	24a0      	movs	r4, #160	; 0xa0
    20e6:	05e4      	lsls	r4, r4, #23
    20e8:	432c      	orrs	r4, r5
    20ea:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    20ec:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    20ee:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    20f0:	24d0      	movs	r4, #208	; 0xd0
    20f2:	0624      	lsls	r4, r4, #24
    20f4:	432c      	orrs	r4, r5
    20f6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    20f8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    20fa:	78d4      	ldrb	r4, [r2, #3]
    20fc:	2c00      	cmp	r4, #0
    20fe:	d122      	bne.n	2146 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2100:	035b      	lsls	r3, r3, #13
    2102:	d51c      	bpl.n	213e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2104:	7893      	ldrb	r3, [r2, #2]
    2106:	2b01      	cmp	r3, #1
    2108:	d01e      	beq.n	2148 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    210a:	6141      	str	r1, [r0, #20]
    210c:	e017      	b.n	213e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    210e:	2300      	movs	r3, #0
    2110:	e7d7      	b.n	20c2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2112:	24c0      	movs	r4, #192	; 0xc0
    2114:	02e4      	lsls	r4, r4, #11
    2116:	4323      	orrs	r3, r4
    2118:	e7dd      	b.n	20d6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    211a:	4c0d      	ldr	r4, [pc, #52]	; (2150 <_system_pinmux_config+0xa4>)
    211c:	4023      	ands	r3, r4
    211e:	e7df      	b.n	20e0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2120:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2122:	040c      	lsls	r4, r1, #16
    2124:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2126:	23a0      	movs	r3, #160	; 0xa0
    2128:	05db      	lsls	r3, r3, #23
    212a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    212c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    212e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2130:	23d0      	movs	r3, #208	; 0xd0
    2132:	061b      	lsls	r3, r3, #24
    2134:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2136:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2138:	78d3      	ldrb	r3, [r2, #3]
    213a:	2b00      	cmp	r3, #0
    213c:	d103      	bne.n	2146 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    213e:	7853      	ldrb	r3, [r2, #1]
    2140:	3b01      	subs	r3, #1
    2142:	2b01      	cmp	r3, #1
    2144:	d902      	bls.n	214c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2146:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2148:	6181      	str	r1, [r0, #24]
    214a:	e7f8      	b.n	213e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    214c:	6081      	str	r1, [r0, #8]
}
    214e:	e7fa      	b.n	2146 <_system_pinmux_config+0x9a>
    2150:	fffbffff 	.word	0xfffbffff

00002154 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2154:	b510      	push	{r4, lr}
    2156:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    2158:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    215a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    215c:	2900      	cmp	r1, #0
    215e:	d104      	bne.n	216a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2160:	0943      	lsrs	r3, r0, #5
    2162:	01db      	lsls	r3, r3, #7
    2164:	4905      	ldr	r1, [pc, #20]	; (217c <system_pinmux_pin_set_config+0x28>)
    2166:	468c      	mov	ip, r1
    2168:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    216a:	241f      	movs	r4, #31
    216c:	4020      	ands	r0, r4
    216e:	2101      	movs	r1, #1
    2170:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2172:	0018      	movs	r0, r3
    2174:	4b02      	ldr	r3, [pc, #8]	; (2180 <system_pinmux_pin_set_config+0x2c>)
    2176:	4798      	blx	r3
}
    2178:	bd10      	pop	{r4, pc}
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	41004400 	.word	0x41004400
    2180:	000020ad 	.word	0x000020ad

00002184 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2184:	4770      	bx	lr
	...

00002188 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2188:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    218a:	4b05      	ldr	r3, [pc, #20]	; (21a0 <system_init+0x18>)
    218c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    218e:	4b05      	ldr	r3, [pc, #20]	; (21a4 <system_init+0x1c>)
    2190:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2192:	4b05      	ldr	r3, [pc, #20]	; (21a8 <system_init+0x20>)
    2194:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2196:	4b05      	ldr	r3, [pc, #20]	; (21ac <system_init+0x24>)
    2198:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    219a:	4b05      	ldr	r3, [pc, #20]	; (21b0 <system_init+0x28>)
    219c:	4798      	blx	r3
}
    219e:	bd10      	pop	{r4, pc}
    21a0:	00001cc9 	.word	0x00001cc9
    21a4:	00000a61 	.word	0x00000a61
    21a8:	00002185 	.word	0x00002185
    21ac:	00002185 	.word	0x00002185
    21b0:	00002185 	.word	0x00002185

000021b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    21b4:	e7fe      	b.n	21b4 <Dummy_Handler>
	...

000021b8 <Reset_Handler>:
{
    21b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    21ba:	4a2a      	ldr	r2, [pc, #168]	; (2264 <Reset_Handler+0xac>)
    21bc:	4b2a      	ldr	r3, [pc, #168]	; (2268 <Reset_Handler+0xb0>)
    21be:	429a      	cmp	r2, r3
    21c0:	d011      	beq.n	21e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    21c2:	001a      	movs	r2, r3
    21c4:	4b29      	ldr	r3, [pc, #164]	; (226c <Reset_Handler+0xb4>)
    21c6:	429a      	cmp	r2, r3
    21c8:	d20d      	bcs.n	21e6 <Reset_Handler+0x2e>
    21ca:	4a29      	ldr	r2, [pc, #164]	; (2270 <Reset_Handler+0xb8>)
    21cc:	3303      	adds	r3, #3
    21ce:	1a9b      	subs	r3, r3, r2
    21d0:	089b      	lsrs	r3, r3, #2
    21d2:	3301      	adds	r3, #1
    21d4:	009b      	lsls	r3, r3, #2
    21d6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    21d8:	4823      	ldr	r0, [pc, #140]	; (2268 <Reset_Handler+0xb0>)
    21da:	4922      	ldr	r1, [pc, #136]	; (2264 <Reset_Handler+0xac>)
    21dc:	588c      	ldr	r4, [r1, r2]
    21de:	5084      	str	r4, [r0, r2]
    21e0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    21e2:	429a      	cmp	r2, r3
    21e4:	d1fa      	bne.n	21dc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    21e6:	4a23      	ldr	r2, [pc, #140]	; (2274 <Reset_Handler+0xbc>)
    21e8:	4b23      	ldr	r3, [pc, #140]	; (2278 <Reset_Handler+0xc0>)
    21ea:	429a      	cmp	r2, r3
    21ec:	d20a      	bcs.n	2204 <Reset_Handler+0x4c>
    21ee:	43d3      	mvns	r3, r2
    21f0:	4921      	ldr	r1, [pc, #132]	; (2278 <Reset_Handler+0xc0>)
    21f2:	185b      	adds	r3, r3, r1
    21f4:	2103      	movs	r1, #3
    21f6:	438b      	bics	r3, r1
    21f8:	3304      	adds	r3, #4
    21fa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    21fc:	2100      	movs	r1, #0
    21fe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2200:	4293      	cmp	r3, r2
    2202:	d1fc      	bne.n	21fe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2204:	4a1d      	ldr	r2, [pc, #116]	; (227c <Reset_Handler+0xc4>)
    2206:	21ff      	movs	r1, #255	; 0xff
    2208:	4b1d      	ldr	r3, [pc, #116]	; (2280 <Reset_Handler+0xc8>)
    220a:	438b      	bics	r3, r1
    220c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    220e:	39fd      	subs	r1, #253	; 0xfd
    2210:	2390      	movs	r3, #144	; 0x90
    2212:	005b      	lsls	r3, r3, #1
    2214:	4a1b      	ldr	r2, [pc, #108]	; (2284 <Reset_Handler+0xcc>)
    2216:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2218:	4a1b      	ldr	r2, [pc, #108]	; (2288 <Reset_Handler+0xd0>)
    221a:	78d3      	ldrb	r3, [r2, #3]
    221c:	2503      	movs	r5, #3
    221e:	43ab      	bics	r3, r5
    2220:	2402      	movs	r4, #2
    2222:	4323      	orrs	r3, r4
    2224:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2226:	78d3      	ldrb	r3, [r2, #3]
    2228:	270c      	movs	r7, #12
    222a:	43bb      	bics	r3, r7
    222c:	2608      	movs	r6, #8
    222e:	4333      	orrs	r3, r6
    2230:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2232:	4b16      	ldr	r3, [pc, #88]	; (228c <Reset_Handler+0xd4>)
    2234:	7b98      	ldrb	r0, [r3, #14]
    2236:	2230      	movs	r2, #48	; 0x30
    2238:	4390      	bics	r0, r2
    223a:	2220      	movs	r2, #32
    223c:	4310      	orrs	r0, r2
    223e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2240:	7b99      	ldrb	r1, [r3, #14]
    2242:	43b9      	bics	r1, r7
    2244:	4331      	orrs	r1, r6
    2246:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2248:	7b9a      	ldrb	r2, [r3, #14]
    224a:	43aa      	bics	r2, r5
    224c:	4322      	orrs	r2, r4
    224e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2250:	4a0f      	ldr	r2, [pc, #60]	; (2290 <Reset_Handler+0xd8>)
    2252:	6853      	ldr	r3, [r2, #4]
    2254:	2180      	movs	r1, #128	; 0x80
    2256:	430b      	orrs	r3, r1
    2258:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    225a:	4b0e      	ldr	r3, [pc, #56]	; (2294 <Reset_Handler+0xdc>)
    225c:	4798      	blx	r3
        main();
    225e:	4b0e      	ldr	r3, [pc, #56]	; (2298 <Reset_Handler+0xe0>)
    2260:	4798      	blx	r3
    2262:	e7fe      	b.n	2262 <Reset_Handler+0xaa>
    2264:	00006fac 	.word	0x00006fac
    2268:	20000000 	.word	0x20000000
    226c:	200001c8 	.word	0x200001c8
    2270:	20000004 	.word	0x20000004
    2274:	200001c8 	.word	0x200001c8
    2278:	20000adc 	.word	0x20000adc
    227c:	e000ed00 	.word	0xe000ed00
    2280:	00000000 	.word	0x00000000
    2284:	41007000 	.word	0x41007000
    2288:	41005000 	.word	0x41005000
    228c:	41004800 	.word	0x41004800
    2290:	41004000 	.word	0x41004000
    2294:	00003a15 	.word	0x00003a15
    2298:	00003621 	.word	0x00003621

0000229c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    229c:	b5f0      	push	{r4, r5, r6, r7, lr}
    229e:	46c6      	mov	lr, r8
    22a0:	b500      	push	{lr}
    22a2:	000c      	movs	r4, r1
    22a4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    22a6:	2800      	cmp	r0, #0
    22a8:	d10f      	bne.n	22ca <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    22aa:	2a00      	cmp	r2, #0
    22ac:	dd11      	ble.n	22d2 <_read+0x36>
    22ae:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    22b0:	4e09      	ldr	r6, [pc, #36]	; (22d8 <_read+0x3c>)
    22b2:	4d0a      	ldr	r5, [pc, #40]	; (22dc <_read+0x40>)
    22b4:	6830      	ldr	r0, [r6, #0]
    22b6:	0021      	movs	r1, r4
    22b8:	682b      	ldr	r3, [r5, #0]
    22ba:	4798      	blx	r3
		ptr++;
    22bc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    22be:	42bc      	cmp	r4, r7
    22c0:	d1f8      	bne.n	22b4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    22c2:	4640      	mov	r0, r8
    22c4:	bc04      	pop	{r2}
    22c6:	4690      	mov	r8, r2
    22c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    22ca:	2301      	movs	r3, #1
    22cc:	425b      	negs	r3, r3
    22ce:	4698      	mov	r8, r3
    22d0:	e7f7      	b.n	22c2 <_read+0x26>
	for (; len > 0; --len) {
    22d2:	4680      	mov	r8, r0
    22d4:	e7f5      	b.n	22c2 <_read+0x26>
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	200002f0 	.word	0x200002f0
    22dc:	200002e8 	.word	0x200002e8

000022e0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    22e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22e2:	46c6      	mov	lr, r8
    22e4:	b500      	push	{lr}
    22e6:	000e      	movs	r6, r1
    22e8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    22ea:	3801      	subs	r0, #1
    22ec:	2802      	cmp	r0, #2
    22ee:	d810      	bhi.n	2312 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    22f0:	2a00      	cmp	r2, #0
    22f2:	d011      	beq.n	2318 <_write+0x38>
    22f4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    22f6:	4b0c      	ldr	r3, [pc, #48]	; (2328 <_write+0x48>)
    22f8:	4698      	mov	r8, r3
    22fa:	4f0c      	ldr	r7, [pc, #48]	; (232c <_write+0x4c>)
    22fc:	4643      	mov	r3, r8
    22fe:	6818      	ldr	r0, [r3, #0]
    2300:	5d31      	ldrb	r1, [r6, r4]
    2302:	683b      	ldr	r3, [r7, #0]
    2304:	4798      	blx	r3
    2306:	2800      	cmp	r0, #0
    2308:	db08      	blt.n	231c <_write+0x3c>
			return -1;
		}
		++nChars;
    230a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    230c:	42a5      	cmp	r5, r4
    230e:	d1f5      	bne.n	22fc <_write+0x1c>
    2310:	e006      	b.n	2320 <_write+0x40>
		return -1;
    2312:	2401      	movs	r4, #1
    2314:	4264      	negs	r4, r4
    2316:	e003      	b.n	2320 <_write+0x40>
	for (; len != 0; --len) {
    2318:	0014      	movs	r4, r2
    231a:	e001      	b.n	2320 <_write+0x40>
			return -1;
    231c:	2401      	movs	r4, #1
    231e:	4264      	negs	r4, r4
	}
	return nChars;
}
    2320:	0020      	movs	r0, r4
    2322:	bc04      	pop	{r2}
    2324:	4690      	mov	r8, r2
    2326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2328:	200002f0 	.word	0x200002f0
    232c:	200002ec 	.word	0x200002ec

00002330 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2330:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2332:	4a06      	ldr	r2, [pc, #24]	; (234c <_sbrk+0x1c>)
    2334:	6812      	ldr	r2, [r2, #0]
    2336:	2a00      	cmp	r2, #0
    2338:	d004      	beq.n	2344 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    233a:	4a04      	ldr	r2, [pc, #16]	; (234c <_sbrk+0x1c>)
    233c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    233e:	18c3      	adds	r3, r0, r3
    2340:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2342:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2344:	4902      	ldr	r1, [pc, #8]	; (2350 <_sbrk+0x20>)
    2346:	4a01      	ldr	r2, [pc, #4]	; (234c <_sbrk+0x1c>)
    2348:	6011      	str	r1, [r2, #0]
    234a:	e7f6      	b.n	233a <_sbrk+0xa>
    234c:	200002a4 	.word	0x200002a4
    2350:	20002ae0 	.word	0x20002ae0

00002354 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    2354:	2001      	movs	r0, #1
    2356:	4240      	negs	r0, r0
    2358:	4770      	bx	lr

0000235a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    235a:	2380      	movs	r3, #128	; 0x80
    235c:	019b      	lsls	r3, r3, #6
    235e:	604b      	str	r3, [r1, #4]

	return 0;
}
    2360:	2000      	movs	r0, #0
    2362:	4770      	bx	lr

00002364 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2364:	2001      	movs	r0, #1
    2366:	4770      	bx	lr

00002368 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2368:	2000      	movs	r0, #0
    236a:	4770      	bx	lr

0000236c <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    236c:	b5f0      	push	{r4, r5, r6, r7, lr}
    236e:	46d6      	mov	lr, sl
    2370:	464f      	mov	r7, r9
    2372:	4646      	mov	r6, r8
    2374:	b5c0      	push	{r6, r7, lr}
    2376:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    2378:	4b2a      	ldr	r3, [pc, #168]	; (2424 <drawChar+0xb8>)
    237a:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    237c:	4a2a      	ldr	r2, [pc, #168]	; (2428 <drawChar+0xbc>)
    237e:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    2380:	005a      	lsls	r2, r3, #1
    2382:	18d2      	adds	r2, r2, r3
    2384:	00d2      	lsls	r2, r2, #3
    2386:	4829      	ldr	r0, [pc, #164]	; (242c <drawChar+0xc0>)
    2388:	1882      	adds	r2, r0, r2
    238a:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    238c:	2180      	movs	r1, #128	; 0x80
    238e:	03c9      	lsls	r1, r1, #15
    2390:	4a27      	ldr	r2, [pc, #156]	; (2430 <drawChar+0xc4>)
    2392:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2394:	0098      	lsls	r0, r3, #2
    2396:	181b      	adds	r3, r3, r0
    2398:	005b      	lsls	r3, r3, #1
    239a:	b298      	uxth	r0, r3
    239c:	2114      	movs	r1, #20
    239e:	4369      	muls	r1, r5
    23a0:	b289      	uxth	r1, r1
    23a2:	000b      	movs	r3, r1
    23a4:	3313      	adds	r3, #19
    23a6:	b29b      	uxth	r3, r3
    23a8:	0002      	movs	r2, r0
    23aa:	3209      	adds	r2, #9
    23ac:	b292      	uxth	r2, r2
    23ae:	4d21      	ldr	r5, [pc, #132]	; (2434 <drawChar+0xc8>)
    23b0:	47a8      	blx	r5
    23b2:	4a21      	ldr	r2, [pc, #132]	; (2438 <drawChar+0xcc>)
    23b4:	00a5      	lsls	r5, r4, #2
    23b6:	192d      	adds	r5, r5, r4
    23b8:	00ab      	lsls	r3, r5, #2
    23ba:	18ed      	adds	r5, r5, r3
    23bc:	1955      	adds	r5, r2, r5
    23be:	3401      	adds	r4, #1
    23c0:	00a3      	lsls	r3, r4, #2
    23c2:	191c      	adds	r4, r3, r4
    23c4:	00a3      	lsls	r3, r4, #2
    23c6:	18e4      	adds	r4, r4, r3
    23c8:	4692      	mov	sl, r2
    23ca:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    23cc:	4b1b      	ldr	r3, [pc, #108]	; (243c <drawChar+0xd0>)
    23ce:	4699      	mov	r9, r3
    23d0:	4b1b      	ldr	r3, [pc, #108]	; (2440 <drawChar+0xd4>)
    23d2:	4698      	mov	r8, r3
    23d4:	4f1b      	ldr	r7, [pc, #108]	; (2444 <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    23d6:	4e1c      	ldr	r6, [pc, #112]	; (2448 <drawChar+0xdc>)
    23d8:	e019      	b.n	240e <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    23da:	464b      	mov	r3, r9
    23dc:	8818      	ldrh	r0, [r3, #0]
    23de:	0200      	lsls	r0, r0, #8
    23e0:	4643      	mov	r3, r8
    23e2:	881b      	ldrh	r3, [r3, #0]
    23e4:	4318      	orrs	r0, r3
    23e6:	b280      	uxth	r0, r0
    23e8:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    23ea:	3c01      	subs	r4, #1
    23ec:	d30c      	bcc.n	2408 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    23ee:	782b      	ldrb	r3, [r5, #0]
    23f0:	4123      	asrs	r3, r4
    23f2:	07db      	lsls	r3, r3, #31
    23f4:	d5f1      	bpl.n	23da <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    23f6:	8830      	ldrh	r0, [r6, #0]
    23f8:	0200      	lsls	r0, r0, #8
    23fa:	4b14      	ldr	r3, [pc, #80]	; (244c <drawChar+0xe0>)
    23fc:	881b      	ldrh	r3, [r3, #0]
    23fe:	4318      	orrs	r0, r3
    2400:	b280      	uxth	r0, r0
    2402:	4b10      	ldr	r3, [pc, #64]	; (2444 <drawChar+0xd8>)
    2404:	4798      	blx	r3
    2406:	e7f0      	b.n	23ea <drawChar+0x7e>
    2408:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    240a:	4555      	cmp	r5, sl
    240c:	d001      	beq.n	2412 <drawChar+0xa6>
{
    240e:	2407      	movs	r4, #7
    2410:	e7ed      	b.n	23ee <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    2412:	2280      	movs	r2, #128	; 0x80
    2414:	03d2      	lsls	r2, r2, #15
    2416:	4b0e      	ldr	r3, [pc, #56]	; (2450 <drawChar+0xe4>)
    2418:	601a      	str	r2, [r3, #0]
	

}
    241a:	bc1c      	pop	{r2, r3, r4}
    241c:	4690      	mov	r8, r2
    241e:	4699      	mov	r9, r3
    2420:	46a2      	mov	sl, r4
    2422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2424:	200002a8 	.word	0x200002a8
    2428:	200002aa 	.word	0x200002aa
    242c:	2000032c 	.word	0x2000032c
    2430:	41004494 	.word	0x41004494
    2434:	00002e4d 	.word	0x00002e4d
    2438:	00005328 	.word	0x00005328
    243c:	20000ab2 	.word	0x20000ab2
    2440:	20000aac 	.word	0x20000aac
    2444:	00002f85 	.word	0x00002f85
    2448:	20000aae 	.word	0x20000aae
    244c:	20000ab0 	.word	0x20000ab0
    2450:	41004498 	.word	0x41004498

00002454 <blinkCursor>:
	*/
	
}

void blinkCursor(void)
{
    2454:	b5f0      	push	{r4, r5, r6, r7, lr}
    2456:	46d6      	mov	lr, sl
    2458:	464f      	mov	r7, r9
    245a:	4646      	mov	r6, r8
    245c:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    245e:	4b47      	ldr	r3, [pc, #284]	; (257c <blinkCursor+0x128>)
    2460:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    2462:	4a47      	ldr	r2, [pc, #284]	; (2580 <blinkCursor+0x12c>)
    2464:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    2466:	005a      	lsls	r2, r3, #1
    2468:	18d2      	adds	r2, r2, r3
    246a:	00d2      	lsls	r2, r2, #3
    246c:	4845      	ldr	r0, [pc, #276]	; (2584 <blinkCursor+0x130>)
    246e:	1882      	adds	r2, r0, r2
    2470:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2472:	0098      	lsls	r0, r3, #2
    2474:	181b      	adds	r3, r3, r0
    2476:	005b      	lsls	r3, r3, #1
    2478:	b298      	uxth	r0, r3
    247a:	2114      	movs	r1, #20
    247c:	4369      	muls	r1, r5
    247e:	b289      	uxth	r1, r1
    2480:	000b      	movs	r3, r1
    2482:	3313      	adds	r3, #19
    2484:	b29b      	uxth	r3, r3
    2486:	0002      	movs	r2, r0
    2488:	3209      	adds	r2, #9
    248a:	b292      	uxth	r2, r2
    248c:	4d3e      	ldr	r5, [pc, #248]	; (2588 <blinkCursor+0x134>)
    248e:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    2490:	2280      	movs	r2, #128	; 0x80
    2492:	03d2      	lsls	r2, r2, #15
    2494:	4b3d      	ldr	r3, [pc, #244]	; (258c <blinkCursor+0x138>)
    2496:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    2498:	4b3d      	ldr	r3, [pc, #244]	; (2590 <blinkCursor+0x13c>)
    249a:	781b      	ldrb	r3, [r3, #0]
    249c:	2b00      	cmp	r3, #0
    249e:	d113      	bne.n	24c8 <blinkCursor+0x74>
    24a0:	4a3c      	ldr	r2, [pc, #240]	; (2594 <blinkCursor+0x140>)
    24a2:	00a5      	lsls	r5, r4, #2
    24a4:	192d      	adds	r5, r5, r4
    24a6:	00ab      	lsls	r3, r5, #2
    24a8:	18ed      	adds	r5, r5, r3
    24aa:	1955      	adds	r5, r2, r5
    24ac:	3401      	adds	r4, #1
    24ae:	00a3      	lsls	r3, r4, #2
    24b0:	191c      	adds	r4, r3, r4
    24b2:	00a3      	lsls	r3, r4, #2
    24b4:	18e4      	adds	r4, r4, r3
    24b6:	4692      	mov	sl, r2
    24b8:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    24ba:	4b37      	ldr	r3, [pc, #220]	; (2598 <blinkCursor+0x144>)
    24bc:	4699      	mov	r9, r3
    24be:	4b37      	ldr	r3, [pc, #220]	; (259c <blinkCursor+0x148>)
    24c0:	4698      	mov	r8, r3
    24c2:	4f37      	ldr	r7, [pc, #220]	; (25a0 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    24c4:	4e37      	ldr	r6, [pc, #220]	; (25a4 <blinkCursor+0x150>)
    24c6:	e049      	b.n	255c <blinkCursor+0x108>
    24c8:	4a32      	ldr	r2, [pc, #200]	; (2594 <blinkCursor+0x140>)
    24ca:	00a5      	lsls	r5, r4, #2
    24cc:	192d      	adds	r5, r5, r4
    24ce:	00ab      	lsls	r3, r5, #2
    24d0:	18ed      	adds	r5, r5, r3
    24d2:	1955      	adds	r5, r2, r5
    24d4:	3401      	adds	r4, #1
    24d6:	00a3      	lsls	r3, r4, #2
    24d8:	191c      	adds	r4, r3, r4
    24da:	00a3      	lsls	r3, r4, #2
    24dc:	18e4      	adds	r4, r4, r3
    24de:	4692      	mov	sl, r2
    24e0:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    24e2:	4b30      	ldr	r3, [pc, #192]	; (25a4 <blinkCursor+0x150>)
    24e4:	4699      	mov	r9, r3
    24e6:	4b30      	ldr	r3, [pc, #192]	; (25a8 <blinkCursor+0x154>)
    24e8:	4698      	mov	r8, r3
    24ea:	4f2d      	ldr	r7, [pc, #180]	; (25a0 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    24ec:	4e2a      	ldr	r6, [pc, #168]	; (2598 <blinkCursor+0x144>)
    24ee:	e019      	b.n	2524 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    24f0:	464b      	mov	r3, r9
    24f2:	8818      	ldrh	r0, [r3, #0]
    24f4:	0200      	lsls	r0, r0, #8
    24f6:	4643      	mov	r3, r8
    24f8:	881b      	ldrh	r3, [r3, #0]
    24fa:	4318      	orrs	r0, r3
    24fc:	b280      	uxth	r0, r0
    24fe:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2500:	3c01      	subs	r4, #1
    2502:	d30c      	bcc.n	251e <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2504:	782b      	ldrb	r3, [r5, #0]
    2506:	4123      	asrs	r3, r4
    2508:	07db      	lsls	r3, r3, #31
    250a:	d5f1      	bpl.n	24f0 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    250c:	8830      	ldrh	r0, [r6, #0]
    250e:	0200      	lsls	r0, r0, #8
    2510:	4b22      	ldr	r3, [pc, #136]	; (259c <blinkCursor+0x148>)
    2512:	881b      	ldrh	r3, [r3, #0]
    2514:	4318      	orrs	r0, r3
    2516:	b280      	uxth	r0, r0
    2518:	4b21      	ldr	r3, [pc, #132]	; (25a0 <blinkCursor+0x14c>)
    251a:	4798      	blx	r3
    251c:	e7f0      	b.n	2500 <blinkCursor+0xac>
    251e:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2520:	4555      	cmp	r5, sl
    2522:	d01d      	beq.n	2560 <blinkCursor+0x10c>
{
    2524:	2407      	movs	r4, #7
    2526:	e7ed      	b.n	2504 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2528:	464b      	mov	r3, r9
    252a:	8818      	ldrh	r0, [r3, #0]
    252c:	0200      	lsls	r0, r0, #8
    252e:	4643      	mov	r3, r8
    2530:	881b      	ldrh	r3, [r3, #0]
    2532:	4318      	orrs	r0, r3
    2534:	b280      	uxth	r0, r0
    2536:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2538:	3c01      	subs	r4, #1
    253a:	d30c      	bcc.n	2556 <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    253c:	782b      	ldrb	r3, [r5, #0]
    253e:	4123      	asrs	r3, r4
    2540:	07db      	lsls	r3, r3, #31
    2542:	d5f1      	bpl.n	2528 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2544:	8830      	ldrh	r0, [r6, #0]
    2546:	0200      	lsls	r0, r0, #8
    2548:	4b17      	ldr	r3, [pc, #92]	; (25a8 <blinkCursor+0x154>)
    254a:	881b      	ldrh	r3, [r3, #0]
    254c:	4318      	orrs	r0, r3
    254e:	b280      	uxth	r0, r0
    2550:	4b13      	ldr	r3, [pc, #76]	; (25a0 <blinkCursor+0x14c>)
    2552:	4798      	blx	r3
    2554:	e7f0      	b.n	2538 <blinkCursor+0xe4>
    2556:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2558:	4555      	cmp	r5, sl
    255a:	d001      	beq.n	2560 <blinkCursor+0x10c>
{
    255c:	2407      	movs	r4, #7
    255e:	e7ed      	b.n	253c <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    2560:	2280      	movs	r2, #128	; 0x80
    2562:	03d2      	lsls	r2, r2, #15
    2564:	4b11      	ldr	r3, [pc, #68]	; (25ac <blinkCursor+0x158>)
    2566:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    2568:	4a09      	ldr	r2, [pc, #36]	; (2590 <blinkCursor+0x13c>)
    256a:	7813      	ldrb	r3, [r2, #0]
    256c:	2101      	movs	r1, #1
    256e:	404b      	eors	r3, r1
    2570:	7013      	strb	r3, [r2, #0]
	
}
    2572:	bc1c      	pop	{r2, r3, r4}
    2574:	4690      	mov	r8, r2
    2576:	4699      	mov	r9, r3
    2578:	46a2      	mov	sl, r4
    257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    257c:	200002a8 	.word	0x200002a8
    2580:	200002aa 	.word	0x200002aa
    2584:	2000032c 	.word	0x2000032c
    2588:	00002e4d 	.word	0x00002e4d
    258c:	41004494 	.word	0x41004494
    2590:	20000010 	.word	0x20000010
    2594:	00005328 	.word	0x00005328
    2598:	20000ab2 	.word	0x20000ab2
    259c:	20000aac 	.word	0x20000aac
    25a0:	00002f85 	.word	0x00002f85
    25a4:	20000aae 	.word	0x20000aae
    25a8:	20000ab0 	.word	0x20000ab0
    25ac:	41004498 	.word	0x41004498

000025b0 <newLine>:
{
    25b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25b2:	46de      	mov	lr, fp
    25b4:	4657      	mov	r7, sl
    25b6:	464e      	mov	r6, r9
    25b8:	4645      	mov	r5, r8
    25ba:	b5e0      	push	{r5, r6, r7, lr}
    25bc:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    25be:	4b24      	ldr	r3, [pc, #144]	; (2650 <newLine+0xa0>)
    25c0:	881b      	ldrh	r3, [r3, #0]
    25c2:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    25c4:	4b23      	ldr	r3, [pc, #140]	; (2654 <newLine+0xa4>)
    25c6:	881b      	ldrh	r3, [r3, #0]
    25c8:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    25ca:	2201      	movs	r2, #1
    25cc:	4b22      	ldr	r3, [pc, #136]	; (2658 <newLine+0xa8>)
    25ce:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    25d0:	4b22      	ldr	r3, [pc, #136]	; (265c <newLine+0xac>)
    25d2:	4798      	blx	r3
    25d4:	4822      	ldr	r0, [pc, #136]	; (2660 <newLine+0xb0>)
    25d6:	0004      	movs	r4, r0
    25d8:	3418      	adds	r4, #24
    25da:	23f0      	movs	r3, #240	; 0xf0
    25dc:	00db      	lsls	r3, r3, #3
    25de:	18c1      	adds	r1, r0, r3
{
    25e0:	0003      	movs	r3, r0
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    25e2:	785a      	ldrb	r2, [r3, #1]
    25e4:	701a      	strb	r2, [r3, #0]
    25e6:	3318      	adds	r3, #24
		for(int i = 0 ; i < 80 ; i++)
    25e8:	428b      	cmp	r3, r1
    25ea:	d1fa      	bne.n	25e2 <newLine+0x32>
    25ec:	3001      	adds	r0, #1
	for(int j = 1 ; j <= 24 ; j++)
    25ee:	42a0      	cmp	r0, r4
    25f0:	d1f3      	bne.n	25da <newLine+0x2a>
    25f2:	4b1c      	ldr	r3, [pc, #112]	; (2664 <newLine+0xb4>)
    25f4:	22f0      	movs	r2, #240	; 0xf0
    25f6:	00d2      	lsls	r2, r2, #3
    25f8:	1899      	adds	r1, r3, r2
		consoleDisplay[k][23] = 0x20;
    25fa:	2220      	movs	r2, #32
    25fc:	701a      	strb	r2, [r3, #0]
    25fe:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    2600:	428b      	cmp	r3, r1
    2602:	d1fb      	bne.n	25fc <newLine+0x4c>
    2604:	2600      	movs	r6, #0
    2606:	4b16      	ldr	r3, [pc, #88]	; (2660 <newLine+0xb0>)
    2608:	469a      	mov	sl, r3
			xCharPos = i;
    260a:	4b11      	ldr	r3, [pc, #68]	; (2650 <newLine+0xa0>)
    260c:	4699      	mov	r9, r3
			yCharPos = j;
    260e:	4b11      	ldr	r3, [pc, #68]	; (2654 <newLine+0xa4>)
    2610:	4698      	mov	r8, r3
    2612:	4653      	mov	r3, sl
    2614:	18f5      	adds	r5, r6, r3
{
    2616:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    2618:	4f13      	ldr	r7, [pc, #76]	; (2668 <newLine+0xb8>)
			xCharPos = i;
    261a:	464b      	mov	r3, r9
    261c:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    261e:	4643      	mov	r3, r8
    2620:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    2622:	7828      	ldrb	r0, [r5, #0]
    2624:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    2626:	3401      	adds	r4, #1
    2628:	3518      	adds	r5, #24
    262a:	2c50      	cmp	r4, #80	; 0x50
    262c:	d1f5      	bne.n	261a <newLine+0x6a>
	for(int j = 0 ; j < 24 ; j++)
    262e:	3601      	adds	r6, #1
    2630:	2e18      	cmp	r6, #24
    2632:	d1ee      	bne.n	2612 <newLine+0x62>
	xCharPos = tempCursorx;
    2634:	4b06      	ldr	r3, [pc, #24]	; (2650 <newLine+0xa0>)
    2636:	465a      	mov	r2, fp
    2638:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    263a:	4b06      	ldr	r3, [pc, #24]	; (2654 <newLine+0xa4>)
    263c:	466a      	mov	r2, sp
    263e:	8892      	ldrh	r2, [r2, #4]
    2640:	801a      	strh	r2, [r3, #0]
}
    2642:	b003      	add	sp, #12
    2644:	bc3c      	pop	{r2, r3, r4, r5}
    2646:	4690      	mov	r8, r2
    2648:	4699      	mov	r9, r3
    264a:	46a2      	mov	sl, r4
    264c:	46ab      	mov	fp, r5
    264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2650:	200002a8 	.word	0x200002a8
    2654:	200002aa 	.word	0x200002aa
    2658:	20000010 	.word	0x20000010
    265c:	00002455 	.word	0x00002455
    2660:	2000032c 	.word	0x2000032c
    2664:	20000343 	.word	0x20000343
    2668:	0000236d 	.word	0x0000236d

0000266c <writeString>:

void writeString(const char str[])
{
    266c:	b5f0      	push	{r4, r5, r6, r7, lr}
    266e:	46c6      	mov	lr, r8
    2670:	b500      	push	{lr}
    2672:	0005      	movs	r5, r0
	int length = strlen(str);
    2674:	4b0c      	ldr	r3, [pc, #48]	; (26a8 <writeString+0x3c>)
    2676:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    2678:	2800      	cmp	r0, #0
    267a:	dd11      	ble.n	26a0 <writeString+0x34>
    267c:	002c      	movs	r4, r5
    267e:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    2680:	4f0a      	ldr	r7, [pc, #40]	; (26ac <writeString+0x40>)
		if(xCharPos <= 80)
    2682:	4e0b      	ldr	r6, [pc, #44]	; (26b0 <writeString+0x44>)
		xCharPos++;
    2684:	46b0      	mov	r8, r6
    2686:	e002      	b.n	268e <writeString+0x22>
    2688:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    268a:	42ac      	cmp	r4, r5
    268c:	d008      	beq.n	26a0 <writeString+0x34>
		drawChar(str[i]);
    268e:	7820      	ldrb	r0, [r4, #0]
    2690:	47b8      	blx	r7
		if(xCharPos <= 80)
    2692:	8833      	ldrh	r3, [r6, #0]
    2694:	2b50      	cmp	r3, #80	; 0x50
    2696:	d8f7      	bhi.n	2688 <writeString+0x1c>
		xCharPos++;
    2698:	3301      	adds	r3, #1
    269a:	4642      	mov	r2, r8
    269c:	8013      	strh	r3, [r2, #0]
    269e:	e7f3      	b.n	2688 <writeString+0x1c>
	}
}
    26a0:	bc04      	pop	{r2}
    26a2:	4690      	mov	r8, r2
    26a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	00003ea5 	.word	0x00003ea5
    26ac:	0000236d 	.word	0x0000236d
    26b0:	200002a8 	.word	0x200002a8

000026b4 <nullifyConsole>:

void nullifyConsole(void)
{
    26b4:	4b08      	ldr	r3, [pc, #32]	; (26d8 <nullifyConsole+0x24>)
    26b6:	22f0      	movs	r2, #240	; 0xf0
    26b8:	00d2      	lsls	r2, r2, #3
    26ba:	1898      	adds	r0, r3, r2
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    26bc:	2100      	movs	r1, #0
    26be:	e002      	b.n	26c6 <nullifyConsole+0x12>
    26c0:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    26c2:	4290      	cmp	r0, r2
    26c4:	d006      	beq.n	26d4 <nullifyConsole+0x20>
    26c6:	001a      	movs	r2, r3
    26c8:	3218      	adds	r2, #24
			consoleDisplay[i][j] = 0x00;
    26ca:	7019      	strb	r1, [r3, #0]
    26cc:	3301      	adds	r3, #1
		for(int j = 0 ; j < 24 ; j++)
    26ce:	4293      	cmp	r3, r2
    26d0:	d1fb      	bne.n	26ca <nullifyConsole+0x16>
    26d2:	e7f5      	b.n	26c0 <nullifyConsole+0xc>
		}
	}
}
    26d4:	4770      	bx	lr
    26d6:	46c0      	nop			; (mov r8, r8)
    26d8:	2000032c 	.word	0x2000032c

000026dc <arrowKey>:

void arrowKey(int scancode)
{
    26dc:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	//Arrow key handling
	if(scancode == 35) //left
    26de:	2823      	cmp	r0, #35	; 0x23
    26e0:	d006      	beq.n	26f0 <arrowKey+0x14>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 45)	//down
    26e2:	282d      	cmp	r0, #45	; 0x2d
    26e4:	d021      	beq.n	272a <arrowKey+0x4e>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 55)	//up
    26e6:	2837      	cmp	r0, #55	; 0x37
    26e8:	d03c      	beq.n	2764 <arrowKey+0x88>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 65)	//right
    26ea:	2841      	cmp	r0, #65	; 0x41
    26ec:	d057      	beq.n	279e <arrowKey+0xc2>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
    26ee:	bd70      	pop	{r4, r5, r6, pc}
		if(xCharPos > 0)
    26f0:	4b39      	ldr	r3, [pc, #228]	; (27d8 <arrowKey+0xfc>)
    26f2:	881b      	ldrh	r3, [r3, #0]
    26f4:	2b00      	cmp	r3, #0
    26f6:	d0fa      	beq.n	26ee <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    26f8:	4c38      	ldr	r4, [pc, #224]	; (27dc <arrowKey+0x100>)
    26fa:	4d39      	ldr	r5, [pc, #228]	; (27e0 <arrowKey+0x104>)
    26fc:	8829      	ldrh	r1, [r5, #0]
    26fe:	005a      	lsls	r2, r3, #1
    2700:	18d3      	adds	r3, r2, r3
    2702:	00db      	lsls	r3, r3, #3
    2704:	18e3      	adds	r3, r4, r3
    2706:	5c58      	ldrb	r0, [r3, r1]
    2708:	4e36      	ldr	r6, [pc, #216]	; (27e4 <arrowKey+0x108>)
    270a:	47b0      	blx	r6
			xCharPos--;
    270c:	4a32      	ldr	r2, [pc, #200]	; (27d8 <arrowKey+0xfc>)
    270e:	8813      	ldrh	r3, [r2, #0]
    2710:	3b01      	subs	r3, #1
    2712:	b29b      	uxth	r3, r3
    2714:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2716:	8829      	ldrh	r1, [r5, #0]
    2718:	005a      	lsls	r2, r3, #1
    271a:	18d3      	adds	r3, r2, r3
    271c:	00db      	lsls	r3, r3, #3
    271e:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    2720:	5c58      	ldrb	r0, [r3, r1]
    2722:	47b0      	blx	r6
			blinkCursor();
    2724:	4b30      	ldr	r3, [pc, #192]	; (27e8 <arrowKey+0x10c>)
    2726:	4798      	blx	r3
    2728:	e7e1      	b.n	26ee <arrowKey+0x12>
		if(yCharPos < 23)
    272a:	4b2d      	ldr	r3, [pc, #180]	; (27e0 <arrowKey+0x104>)
    272c:	881a      	ldrh	r2, [r3, #0]
    272e:	2a16      	cmp	r2, #22
    2730:	d8dd      	bhi.n	26ee <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    2732:	4c2a      	ldr	r4, [pc, #168]	; (27dc <arrowKey+0x100>)
    2734:	4d28      	ldr	r5, [pc, #160]	; (27d8 <arrowKey+0xfc>)
    2736:	8829      	ldrh	r1, [r5, #0]
    2738:	004b      	lsls	r3, r1, #1
    273a:	185b      	adds	r3, r3, r1
    273c:	00db      	lsls	r3, r3, #3
    273e:	18e3      	adds	r3, r4, r3
    2740:	5c98      	ldrb	r0, [r3, r2]
    2742:	4e28      	ldr	r6, [pc, #160]	; (27e4 <arrowKey+0x108>)
    2744:	47b0      	blx	r6
			yCharPos++;
    2746:	4a26      	ldr	r2, [pc, #152]	; (27e0 <arrowKey+0x104>)
    2748:	8813      	ldrh	r3, [r2, #0]
    274a:	3301      	adds	r3, #1
    274c:	b29b      	uxth	r3, r3
    274e:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2750:	8829      	ldrh	r1, [r5, #0]
    2752:	004a      	lsls	r2, r1, #1
    2754:	1852      	adds	r2, r2, r1
    2756:	00d2      	lsls	r2, r2, #3
    2758:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    275a:	5ce0      	ldrb	r0, [r4, r3]
    275c:	47b0      	blx	r6
			blinkCursor();
    275e:	4b22      	ldr	r3, [pc, #136]	; (27e8 <arrowKey+0x10c>)
    2760:	4798      	blx	r3
    2762:	e7c4      	b.n	26ee <arrowKey+0x12>
		if(yCharPos > 0)
    2764:	4b1e      	ldr	r3, [pc, #120]	; (27e0 <arrowKey+0x104>)
    2766:	881a      	ldrh	r2, [r3, #0]
    2768:	2a00      	cmp	r2, #0
    276a:	d0c0      	beq.n	26ee <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    276c:	4c1b      	ldr	r4, [pc, #108]	; (27dc <arrowKey+0x100>)
    276e:	4d1a      	ldr	r5, [pc, #104]	; (27d8 <arrowKey+0xfc>)
    2770:	8829      	ldrh	r1, [r5, #0]
    2772:	004b      	lsls	r3, r1, #1
    2774:	185b      	adds	r3, r3, r1
    2776:	00db      	lsls	r3, r3, #3
    2778:	18e3      	adds	r3, r4, r3
    277a:	5c98      	ldrb	r0, [r3, r2]
    277c:	4e19      	ldr	r6, [pc, #100]	; (27e4 <arrowKey+0x108>)
    277e:	47b0      	blx	r6
			yCharPos--;
    2780:	4a17      	ldr	r2, [pc, #92]	; (27e0 <arrowKey+0x104>)
    2782:	8813      	ldrh	r3, [r2, #0]
    2784:	3b01      	subs	r3, #1
    2786:	b29b      	uxth	r3, r3
    2788:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    278a:	8829      	ldrh	r1, [r5, #0]
    278c:	004a      	lsls	r2, r1, #1
    278e:	1852      	adds	r2, r2, r1
    2790:	00d2      	lsls	r2, r2, #3
    2792:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    2794:	5ce0      	ldrb	r0, [r4, r3]
    2796:	47b0      	blx	r6
			blinkCursor();
    2798:	4b13      	ldr	r3, [pc, #76]	; (27e8 <arrowKey+0x10c>)
    279a:	4798      	blx	r3
    279c:	e7a7      	b.n	26ee <arrowKey+0x12>
		if(xCharPos < 79)
    279e:	4b0e      	ldr	r3, [pc, #56]	; (27d8 <arrowKey+0xfc>)
    27a0:	881a      	ldrh	r2, [r3, #0]
    27a2:	2a4e      	cmp	r2, #78	; 0x4e
    27a4:	d8a3      	bhi.n	26ee <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    27a6:	4c0d      	ldr	r4, [pc, #52]	; (27dc <arrowKey+0x100>)
    27a8:	4d0d      	ldr	r5, [pc, #52]	; (27e0 <arrowKey+0x104>)
    27aa:	8829      	ldrh	r1, [r5, #0]
    27ac:	0053      	lsls	r3, r2, #1
    27ae:	189b      	adds	r3, r3, r2
    27b0:	00db      	lsls	r3, r3, #3
    27b2:	18e3      	adds	r3, r4, r3
    27b4:	5c58      	ldrb	r0, [r3, r1]
    27b6:	4e0b      	ldr	r6, [pc, #44]	; (27e4 <arrowKey+0x108>)
    27b8:	47b0      	blx	r6
			xCharPos++;
    27ba:	4a07      	ldr	r2, [pc, #28]	; (27d8 <arrowKey+0xfc>)
    27bc:	8813      	ldrh	r3, [r2, #0]
    27be:	3301      	adds	r3, #1
    27c0:	b29b      	uxth	r3, r3
    27c2:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    27c4:	8829      	ldrh	r1, [r5, #0]
    27c6:	005a      	lsls	r2, r3, #1
    27c8:	18d3      	adds	r3, r2, r3
    27ca:	00db      	lsls	r3, r3, #3
    27cc:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    27ce:	5c58      	ldrb	r0, [r3, r1]
    27d0:	47b0      	blx	r6
			blinkCursor();
    27d2:	4b05      	ldr	r3, [pc, #20]	; (27e8 <arrowKey+0x10c>)
    27d4:	4798      	blx	r3
    27d6:	e78a      	b.n	26ee <arrowKey+0x12>
    27d8:	200002a8 	.word	0x200002a8
    27dc:	2000032c 	.word	0x2000032c
    27e0:	200002aa 	.word	0x200002aa
    27e4:	0000236d 	.word	0x0000236d
    27e8:	00002455 	.word	0x00002455

000027ec <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    27ec:	4b09      	ldr	r3, [pc, #36]	; (2814 <scanCodesContains+0x28>)
    27ee:	681b      	ldr	r3, [r3, #0]
    27f0:	4298      	cmp	r0, r3
    27f2:	d00b      	beq.n	280c <scanCodesContains+0x20>
    27f4:	4a07      	ldr	r2, [pc, #28]	; (2814 <scanCodesContains+0x28>)
    27f6:	1d13      	adds	r3, r2, #4
    27f8:	3219      	adds	r2, #25
    27fa:	32ff      	adds	r2, #255	; 0xff
    27fc:	6819      	ldr	r1, [r3, #0]
    27fe:	4281      	cmp	r1, r0
    2800:	d006      	beq.n	2810 <scanCodesContains+0x24>
    2802:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2804:	4293      	cmp	r3, r2
    2806:	d1f9      	bne.n	27fc <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2808:	2000      	movs	r0, #0
    280a:	e002      	b.n	2812 <scanCodesContains+0x26>
			return true;
    280c:	2001      	movs	r0, #1
    280e:	e000      	b.n	2812 <scanCodesContains+0x26>
    2810:	2001      	movs	r0, #1
}
    2812:	4770      	bx	lr
    2814:	2000003c 	.word	0x2000003c

00002818 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    2818:	4b09      	ldr	r3, [pc, #36]	; (2840 <keyDown+0x28>)
    281a:	781b      	ldrb	r3, [r3, #0]
    281c:	4298      	cmp	r0, r3
    281e:	d00a      	beq.n	2836 <keyDown+0x1e>
    2820:	4907      	ldr	r1, [pc, #28]	; (2840 <keyDown+0x28>)
    2822:	1c4b      	adds	r3, r1, #1
    2824:	3114      	adds	r1, #20
    2826:	781a      	ldrb	r2, [r3, #0]
    2828:	4282      	cmp	r2, r0
    282a:	d006      	beq.n	283a <keyDown+0x22>
    282c:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    282e:	428b      	cmp	r3, r1
    2830:	d1f9      	bne.n	2826 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    2832:	2000      	movs	r0, #0
}
    2834:	4770      	bx	lr
			return true;
    2836:	2001      	movs	r0, #1
    2838:	e7fc      	b.n	2834 <keyDown+0x1c>
    283a:	2001      	movs	r0, #1
    283c:	e7fa      	b.n	2834 <keyDown+0x1c>
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	20000014 	.word	0x20000014

00002844 <printKeyboardBuffer>:
{
    2844:	b5f0      	push	{r4, r5, r6, r7, lr}
    2846:	46d6      	mov	lr, sl
    2848:	464f      	mov	r7, r9
    284a:	4646      	mov	r6, r8
    284c:	b5c0      	push	{r6, r7, lr}
    284e:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    2850:	4db4      	ldr	r5, [pc, #720]	; (2b24 <printKeyboardBuffer+0x2e0>)
    2852:	2246      	movs	r2, #70	; 0x46
    2854:	0029      	movs	r1, r5
    2856:	a83a      	add	r0, sp, #232	; 0xe8
    2858:	4cb3      	ldr	r4, [pc, #716]	; (2b28 <printKeyboardBuffer+0x2e4>)
    285a:	47a0      	blx	r4
	unsigned char shiftCase[] =
    285c:	0029      	movs	r1, r5
    285e:	3148      	adds	r1, #72	; 0x48
    2860:	2246      	movs	r2, #70	; 0x46
    2862:	a828      	add	r0, sp, #160	; 0xa0
    2864:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    2866:	4db1      	ldr	r5, [pc, #708]	; (2b2c <printKeyboardBuffer+0x2e8>)
    2868:	0029      	movs	r1, r5
    286a:	3110      	adds	r1, #16
    286c:	2246      	movs	r2, #70	; 0x46
    286e:	a816      	add	r0, sp, #88	; 0x58
    2870:	47a0      	blx	r4
	unsigned char controlCase[] =
    2872:	0029      	movs	r1, r5
    2874:	3158      	adds	r1, #88	; 0x58
    2876:	2246      	movs	r2, #70	; 0x46
    2878:	a804      	add	r0, sp, #16
    287a:	47a0      	blx	r4
    287c:	4fac      	ldr	r7, [pc, #688]	; (2b30 <printKeyboardBuffer+0x2ec>)
    287e:	003c      	movs	r4, r7
    2880:	3414      	adds	r4, #20
    2882:	003d      	movs	r5, r7
	bool controled = false;
    2884:	2300      	movs	r3, #0
    2886:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    2888:	9302      	str	r3, [sp, #8]
			controled = true;
    288a:	2201      	movs	r2, #1
    288c:	e004      	b.n	2898 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    288e:	2916      	cmp	r1, #22
    2890:	d011      	beq.n	28b6 <printKeyboardBuffer+0x72>
    2892:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    2894:	42a5      	cmp	r5, r4
    2896:	d010      	beq.n	28ba <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    2898:	7829      	ldrb	r1, [r5, #0]
    289a:	000b      	movs	r3, r1
    289c:	3b0d      	subs	r3, #13
    289e:	425e      	negs	r6, r3
    28a0:	415e      	adcs	r6, r3
    28a2:	46b4      	mov	ip, r6
    28a4:	0008      	movs	r0, r1
    28a6:	3831      	subs	r0, #49	; 0x31
    28a8:	4243      	negs	r3, r0
    28aa:	4143      	adcs	r3, r0
    28ac:	4660      	mov	r0, ip
    28ae:	4318      	orrs	r0, r3
    28b0:	d0ed      	beq.n	288e <printKeyboardBuffer+0x4a>
			shifted = true;
    28b2:	9002      	str	r0, [sp, #8]
    28b4:	e7eb      	b.n	288e <printKeyboardBuffer+0x4a>
			controled = true;
    28b6:	9203      	str	r2, [sp, #12]
    28b8:	e7eb      	b.n	2892 <printKeyboardBuffer+0x4e>
    28ba:	4e9e      	ldr	r6, [pc, #632]	; (2b34 <printKeyboardBuffer+0x2f0>)
	for(int i=0; i<20; i++)
    28bc:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    28be:	4b9e      	ldr	r3, [pc, #632]	; (2b38 <printKeyboardBuffer+0x2f4>)
    28c0:	469a      	mov	sl, r3
    28c2:	e00b      	b.n	28dc <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    28c4:	301b      	adds	r0, #27
    28c6:	4b9d      	ldr	r3, [pc, #628]	; (2b3c <printKeyboardBuffer+0x2f8>)
    28c8:	4798      	blx	r3
				if(localEcho)
    28ca:	4b9d      	ldr	r3, [pc, #628]	; (2b40 <printKeyboardBuffer+0x2fc>)
    28cc:	781b      	ldrb	r3, [r3, #0]
    28ce:	2b00      	cmp	r3, #0
    28d0:	d14a      	bne.n	2968 <printKeyboardBuffer+0x124>
    28d2:	3401      	adds	r4, #1
    28d4:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    28d6:	42ac      	cmp	r4, r5
    28d8:	d100      	bne.n	28dc <printKeyboardBuffer+0x98>
    28da:	e118      	b.n	2b0e <printKeyboardBuffer+0x2ca>
    28dc:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    28de:	7823      	ldrb	r3, [r4, #0]
    28e0:	4698      	mov	r8, r3
    28e2:	0018      	movs	r0, r3
    28e4:	47d0      	blx	sl
    28e6:	2800      	cmp	r0, #0
    28e8:	d1f3      	bne.n	28d2 <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    28ea:	4643      	mov	r3, r8
    28ec:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    28ee:	4643      	mov	r3, r8
    28f0:	2b00      	cmp	r3, #0
    28f2:	d0e7      	beq.n	28c4 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    28f4:	4643      	mov	r3, r8
    28f6:	2b01      	cmp	r3, #1
    28f8:	d0eb      	beq.n	28d2 <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    28fa:	2b43      	cmp	r3, #67	; 0x43
    28fc:	d03a      	beq.n	2974 <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    28fe:	4643      	mov	r3, r8
    2900:	2b3a      	cmp	r3, #58	; 0x3a
    2902:	d03f      	beq.n	2984 <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    2904:	4643      	mov	r3, r8
    2906:	2b0c      	cmp	r3, #12
    2908:	d078      	beq.n	29fc <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    290a:	4643      	mov	r3, r8
    290c:	2b03      	cmp	r3, #3
    290e:	d07b      	beq.n	2a08 <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    2910:	4643      	mov	r3, r8
    2912:	2b23      	cmp	r3, #35	; 0x23
    2914:	d07e      	beq.n	2a14 <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    2916:	4643      	mov	r3, r8
    2918:	2b2d      	cmp	r3, #45	; 0x2d
    291a:	d100      	bne.n	291e <printKeyboardBuffer+0xda>
    291c:	e08c      	b.n	2a38 <printKeyboardBuffer+0x1f4>
			else if(scanCodeBuffer[i]  == 55)	//up
    291e:	4643      	mov	r3, r8
    2920:	2b37      	cmp	r3, #55	; 0x37
    2922:	d100      	bne.n	2926 <printKeyboardBuffer+0xe2>
    2924:	e09a      	b.n	2a5c <printKeyboardBuffer+0x218>
			else if(scanCodeBuffer[i]  == 65)	//right
    2926:	4643      	mov	r3, r8
    2928:	2b41      	cmp	r3, #65	; 0x41
    292a:	d100      	bne.n	292e <printKeyboardBuffer+0xea>
    292c:	e0a8      	b.n	2a80 <printKeyboardBuffer+0x23c>
				if(controled)
    292e:	9b03      	ldr	r3, [sp, #12]
    2930:	2b00      	cmp	r3, #0
    2932:	d000      	beq.n	2936 <printKeyboardBuffer+0xf2>
    2934:	e0b6      	b.n	2aa4 <printKeyboardBuffer+0x260>
				else if(capsLock)
    2936:	4b83      	ldr	r3, [pc, #524]	; (2b44 <printKeyboardBuffer+0x300>)
    2938:	781b      	ldrb	r3, [r3, #0]
    293a:	2b00      	cmp	r3, #0
    293c:	d000      	beq.n	2940 <printKeyboardBuffer+0xfc>
    293e:	e0c4      	b.n	2aca <printKeyboardBuffer+0x286>
				else if(shifted)
    2940:	9b02      	ldr	r3, [sp, #8]
    2942:	2b00      	cmp	r3, #0
    2944:	d100      	bne.n	2948 <printKeyboardBuffer+0x104>
    2946:	e0d1      	b.n	2aec <printKeyboardBuffer+0x2a8>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    2948:	ab28      	add	r3, sp, #160	; 0xa0
    294a:	4642      	mov	r2, r8
    294c:	5c98      	ldrb	r0, [r3, r2]
    294e:	4b7b      	ldr	r3, [pc, #492]	; (2b3c <printKeyboardBuffer+0x2f8>)
    2950:	4798      	blx	r3
					if(localEcho)
    2952:	4b7b      	ldr	r3, [pc, #492]	; (2b40 <printKeyboardBuffer+0x2fc>)
    2954:	781b      	ldrb	r3, [r3, #0]
    2956:	2b00      	cmp	r3, #0
    2958:	d0bb      	beq.n	28d2 <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    295a:	9b01      	ldr	r3, [sp, #4]
    295c:	781b      	ldrb	r3, [r3, #0]
    295e:	aa28      	add	r2, sp, #160	; 0xa0
    2960:	5cd0      	ldrb	r0, [r2, r3]
    2962:	4b79      	ldr	r3, [pc, #484]	; (2b48 <printKeyboardBuffer+0x304>)
    2964:	4798      	blx	r3
    2966:	e7b4      	b.n	28d2 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    2968:	4b78      	ldr	r3, [pc, #480]	; (2b4c <printKeyboardBuffer+0x308>)
    296a:	6818      	ldr	r0, [r3, #0]
    296c:	211b      	movs	r1, #27
    296e:	4b78      	ldr	r3, [pc, #480]	; (2b50 <printKeyboardBuffer+0x30c>)
    2970:	4798      	blx	r3
    2972:	e7ae      	b.n	28d2 <printKeyboardBuffer+0x8e>
				if(breakEnable)
    2974:	4b77      	ldr	r3, [pc, #476]	; (2b54 <printKeyboardBuffer+0x310>)
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	2b00      	cmp	r3, #0
    297a:	d0aa      	beq.n	28d2 <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    297c:	2000      	movs	r0, #0
    297e:	4b6f      	ldr	r3, [pc, #444]	; (2b3c <printKeyboardBuffer+0x2f8>)
    2980:	4798      	blx	r3
    2982:	e7a6      	b.n	28d2 <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    2984:	4b74      	ldr	r3, [pc, #464]	; (2b58 <printKeyboardBuffer+0x314>)
    2986:	681b      	ldr	r3, [r3, #0]
    2988:	2b01      	cmp	r3, #1
    298a:	d014      	beq.n	29b6 <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    298c:	4b72      	ldr	r3, [pc, #456]	; (2b58 <printKeyboardBuffer+0x314>)
    298e:	681b      	ldr	r3, [r3, #0]
    2990:	2b02      	cmp	r3, #2
    2992:	d026      	beq.n	29e2 <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    2994:	4b70      	ldr	r3, [pc, #448]	; (2b58 <printKeyboardBuffer+0x314>)
    2996:	681b      	ldr	r3, [r3, #0]
    2998:	2b03      	cmp	r3, #3
    299a:	d19a      	bne.n	28d2 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    299c:	200d      	movs	r0, #13
    299e:	4b67      	ldr	r3, [pc, #412]	; (2b3c <printKeyboardBuffer+0x2f8>)
    29a0:	4798      	blx	r3
					if(localEcho)
    29a2:	4b67      	ldr	r3, [pc, #412]	; (2b40 <printKeyboardBuffer+0x2fc>)
    29a4:	781b      	ldrb	r3, [r3, #0]
    29a6:	2b00      	cmp	r3, #0
    29a8:	d093      	beq.n	28d2 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    29aa:	4b68      	ldr	r3, [pc, #416]	; (2b4c <printKeyboardBuffer+0x308>)
    29ac:	6818      	ldr	r0, [r3, #0]
    29ae:	210d      	movs	r1, #13
    29b0:	4b67      	ldr	r3, [pc, #412]	; (2b50 <printKeyboardBuffer+0x30c>)
    29b2:	4798      	blx	r3
    29b4:	e78d      	b.n	28d2 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    29b6:	200d      	movs	r0, #13
    29b8:	4b60      	ldr	r3, [pc, #384]	; (2b3c <printKeyboardBuffer+0x2f8>)
    29ba:	4698      	mov	r8, r3
    29bc:	4798      	blx	r3
					sendChar(0x0A);
    29be:	200a      	movs	r0, #10
    29c0:	47c0      	blx	r8
					if(localEcho)
    29c2:	4b5f      	ldr	r3, [pc, #380]	; (2b40 <printKeyboardBuffer+0x2fc>)
    29c4:	781b      	ldrb	r3, [r3, #0]
    29c6:	2b00      	cmp	r3, #0
    29c8:	d0e0      	beq.n	298c <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    29ca:	4b60      	ldr	r3, [pc, #384]	; (2b4c <printKeyboardBuffer+0x308>)
    29cc:	4699      	mov	r9, r3
    29ce:	210d      	movs	r1, #13
    29d0:	6818      	ldr	r0, [r3, #0]
    29d2:	4b5f      	ldr	r3, [pc, #380]	; (2b50 <printKeyboardBuffer+0x30c>)
    29d4:	4698      	mov	r8, r3
    29d6:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    29d8:	464b      	mov	r3, r9
    29da:	6818      	ldr	r0, [r3, #0]
    29dc:	210a      	movs	r1, #10
    29de:	47c0      	blx	r8
    29e0:	e7d4      	b.n	298c <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    29e2:	200a      	movs	r0, #10
    29e4:	4b55      	ldr	r3, [pc, #340]	; (2b3c <printKeyboardBuffer+0x2f8>)
    29e6:	4798      	blx	r3
					if(localEcho)
    29e8:	4b55      	ldr	r3, [pc, #340]	; (2b40 <printKeyboardBuffer+0x2fc>)
    29ea:	781b      	ldrb	r3, [r3, #0]
    29ec:	2b00      	cmp	r3, #0
    29ee:	d0d1      	beq.n	2994 <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    29f0:	4b56      	ldr	r3, [pc, #344]	; (2b4c <printKeyboardBuffer+0x308>)
    29f2:	6818      	ldr	r0, [r3, #0]
    29f4:	210a      	movs	r1, #10
    29f6:	4b56      	ldr	r3, [pc, #344]	; (2b50 <printKeyboardBuffer+0x30c>)
    29f8:	4798      	blx	r3
    29fa:	e7cb      	b.n	2994 <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    29fc:	4a51      	ldr	r2, [pc, #324]	; (2b44 <printKeyboardBuffer+0x300>)
    29fe:	7813      	ldrb	r3, [r2, #0]
    2a00:	2101      	movs	r1, #1
    2a02:	404b      	eors	r3, r1
    2a04:	7013      	strb	r3, [r2, #0]
    2a06:	e764      	b.n	28d2 <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    2a08:	4a54      	ldr	r2, [pc, #336]	; (2b5c <printKeyboardBuffer+0x318>)
    2a0a:	7813      	ldrb	r3, [r2, #0]
    2a0c:	2101      	movs	r1, #1
    2a0e:	404b      	eors	r3, r1
    2a10:	7013      	strb	r3, [r2, #0]
    2a12:	e75e      	b.n	28d2 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2a14:	201b      	movs	r0, #27
    2a16:	4b49      	ldr	r3, [pc, #292]	; (2b3c <printKeyboardBuffer+0x2f8>)
    2a18:	4698      	mov	r8, r3
    2a1a:	4798      	blx	r3
				sendChar(0x5B);
    2a1c:	205b      	movs	r0, #91	; 0x5b
    2a1e:	47c0      	blx	r8
				sendChar(0x44);
    2a20:	2044      	movs	r0, #68	; 0x44
    2a22:	47c0      	blx	r8
				if(localEcho)
    2a24:	4b46      	ldr	r3, [pc, #280]	; (2b40 <printKeyboardBuffer+0x2fc>)
    2a26:	781b      	ldrb	r3, [r3, #0]
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d100      	bne.n	2a2e <printKeyboardBuffer+0x1ea>
    2a2c:	e751      	b.n	28d2 <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    2a2e:	9b01      	ldr	r3, [sp, #4]
    2a30:	7818      	ldrb	r0, [r3, #0]
    2a32:	4b4b      	ldr	r3, [pc, #300]	; (2b60 <printKeyboardBuffer+0x31c>)
    2a34:	4798      	blx	r3
    2a36:	e74c      	b.n	28d2 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2a38:	201b      	movs	r0, #27
    2a3a:	4b40      	ldr	r3, [pc, #256]	; (2b3c <printKeyboardBuffer+0x2f8>)
    2a3c:	4698      	mov	r8, r3
    2a3e:	4798      	blx	r3
				sendChar(0x5B);
    2a40:	205b      	movs	r0, #91	; 0x5b
    2a42:	47c0      	blx	r8
				sendChar(0x42);
    2a44:	2042      	movs	r0, #66	; 0x42
    2a46:	47c0      	blx	r8
				if(localEcho)
    2a48:	4b3d      	ldr	r3, [pc, #244]	; (2b40 <printKeyboardBuffer+0x2fc>)
    2a4a:	781b      	ldrb	r3, [r3, #0]
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d100      	bne.n	2a52 <printKeyboardBuffer+0x20e>
    2a50:	e73f      	b.n	28d2 <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    2a52:	9b01      	ldr	r3, [sp, #4]
    2a54:	7818      	ldrb	r0, [r3, #0]
    2a56:	4b42      	ldr	r3, [pc, #264]	; (2b60 <printKeyboardBuffer+0x31c>)
    2a58:	4798      	blx	r3
    2a5a:	e73a      	b.n	28d2 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2a5c:	201b      	movs	r0, #27
    2a5e:	4b37      	ldr	r3, [pc, #220]	; (2b3c <printKeyboardBuffer+0x2f8>)
    2a60:	4698      	mov	r8, r3
    2a62:	4798      	blx	r3
				sendChar(0x5B);
    2a64:	205b      	movs	r0, #91	; 0x5b
    2a66:	47c0      	blx	r8
				sendChar(0x41);
    2a68:	2041      	movs	r0, #65	; 0x41
    2a6a:	47c0      	blx	r8
				if(localEcho)
    2a6c:	4b34      	ldr	r3, [pc, #208]	; (2b40 <printKeyboardBuffer+0x2fc>)
    2a6e:	781b      	ldrb	r3, [r3, #0]
    2a70:	2b00      	cmp	r3, #0
    2a72:	d100      	bne.n	2a76 <printKeyboardBuffer+0x232>
    2a74:	e72d      	b.n	28d2 <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    2a76:	9b01      	ldr	r3, [sp, #4]
    2a78:	7818      	ldrb	r0, [r3, #0]
    2a7a:	4b39      	ldr	r3, [pc, #228]	; (2b60 <printKeyboardBuffer+0x31c>)
    2a7c:	4798      	blx	r3
    2a7e:	e728      	b.n	28d2 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2a80:	201b      	movs	r0, #27
    2a82:	4b2e      	ldr	r3, [pc, #184]	; (2b3c <printKeyboardBuffer+0x2f8>)
    2a84:	4698      	mov	r8, r3
    2a86:	4798      	blx	r3
				sendChar(0x5B);
    2a88:	205b      	movs	r0, #91	; 0x5b
    2a8a:	47c0      	blx	r8
				sendChar(0x43);
    2a8c:	2043      	movs	r0, #67	; 0x43
    2a8e:	47c0      	blx	r8
				if(localEcho)
    2a90:	4b2b      	ldr	r3, [pc, #172]	; (2b40 <printKeyboardBuffer+0x2fc>)
    2a92:	781b      	ldrb	r3, [r3, #0]
    2a94:	2b00      	cmp	r3, #0
    2a96:	d100      	bne.n	2a9a <printKeyboardBuffer+0x256>
    2a98:	e71b      	b.n	28d2 <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    2a9a:	9b01      	ldr	r3, [sp, #4]
    2a9c:	7818      	ldrb	r0, [r3, #0]
    2a9e:	4b30      	ldr	r3, [pc, #192]	; (2b60 <printKeyboardBuffer+0x31c>)
    2aa0:	4798      	blx	r3
    2aa2:	e716      	b.n	28d2 <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    2aa4:	ab04      	add	r3, sp, #16
    2aa6:	4642      	mov	r2, r8
    2aa8:	5c98      	ldrb	r0, [r3, r2]
    2aaa:	4b24      	ldr	r3, [pc, #144]	; (2b3c <printKeyboardBuffer+0x2f8>)
    2aac:	4798      	blx	r3
					if(localEcho)
    2aae:	4b24      	ldr	r3, [pc, #144]	; (2b40 <printKeyboardBuffer+0x2fc>)
    2ab0:	781b      	ldrb	r3, [r3, #0]
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d100      	bne.n	2ab8 <printKeyboardBuffer+0x274>
    2ab6:	e70c      	b.n	28d2 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    2ab8:	9b01      	ldr	r3, [sp, #4]
    2aba:	781b      	ldrb	r3, [r3, #0]
    2abc:	aa04      	add	r2, sp, #16
    2abe:	5cd1      	ldrb	r1, [r2, r3]
    2ac0:	4b22      	ldr	r3, [pc, #136]	; (2b4c <printKeyboardBuffer+0x308>)
    2ac2:	6818      	ldr	r0, [r3, #0]
    2ac4:	4b22      	ldr	r3, [pc, #136]	; (2b50 <printKeyboardBuffer+0x30c>)
    2ac6:	4798      	blx	r3
    2ac8:	e703      	b.n	28d2 <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    2aca:	ab16      	add	r3, sp, #88	; 0x58
    2acc:	4642      	mov	r2, r8
    2ace:	5c98      	ldrb	r0, [r3, r2]
    2ad0:	4b1a      	ldr	r3, [pc, #104]	; (2b3c <printKeyboardBuffer+0x2f8>)
    2ad2:	4798      	blx	r3
					if(localEcho)
    2ad4:	4b1a      	ldr	r3, [pc, #104]	; (2b40 <printKeyboardBuffer+0x2fc>)
    2ad6:	781b      	ldrb	r3, [r3, #0]
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d100      	bne.n	2ade <printKeyboardBuffer+0x29a>
    2adc:	e6f9      	b.n	28d2 <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    2ade:	9b01      	ldr	r3, [sp, #4]
    2ae0:	781b      	ldrb	r3, [r3, #0]
    2ae2:	aa16      	add	r2, sp, #88	; 0x58
    2ae4:	5cd0      	ldrb	r0, [r2, r3]
    2ae6:	4b18      	ldr	r3, [pc, #96]	; (2b48 <printKeyboardBuffer+0x304>)
    2ae8:	4798      	blx	r3
    2aea:	e6f2      	b.n	28d2 <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    2aec:	ab3a      	add	r3, sp, #232	; 0xe8
    2aee:	4642      	mov	r2, r8
    2af0:	5c98      	ldrb	r0, [r3, r2]
    2af2:	4b12      	ldr	r3, [pc, #72]	; (2b3c <printKeyboardBuffer+0x2f8>)
    2af4:	4798      	blx	r3
					if(localEcho)
    2af6:	4b12      	ldr	r3, [pc, #72]	; (2b40 <printKeyboardBuffer+0x2fc>)
    2af8:	781b      	ldrb	r3, [r3, #0]
    2afa:	2b00      	cmp	r3, #0
    2afc:	d100      	bne.n	2b00 <printKeyboardBuffer+0x2bc>
    2afe:	e6e8      	b.n	28d2 <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    2b00:	9b01      	ldr	r3, [sp, #4]
    2b02:	781b      	ldrb	r3, [r3, #0]
    2b04:	aa3a      	add	r2, sp, #232	; 0xe8
    2b06:	5cd0      	ldrb	r0, [r2, r3]
    2b08:	4b0f      	ldr	r3, [pc, #60]	; (2b48 <printKeyboardBuffer+0x304>)
    2b0a:	4798      	blx	r3
    2b0c:	e6e1      	b.n	28d2 <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    2b0e:	23ff      	movs	r3, #255	; 0xff
    2b10:	703b      	strb	r3, [r7, #0]
    2b12:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    2b14:	42bc      	cmp	r4, r7
    2b16:	d1fb      	bne.n	2b10 <printKeyboardBuffer+0x2cc>
}
    2b18:	b04c      	add	sp, #304	; 0x130
    2b1a:	bc1c      	pop	{r2, r3, r4}
    2b1c:	4690      	mov	r8, r2
    2b1e:	4699      	mov	r9, r3
    2b20:	46a2      	mov	sl, r4
    2b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b24:	00006c28 	.word	0x00006c28
    2b28:	00003a71 	.word	0x00003a71
    2b2c:	00006ca8 	.word	0x00006ca8
    2b30:	20000028 	.word	0x20000028
    2b34:	20000014 	.word	0x20000014
    2b38:	00002819 	.word	0x00002819
    2b3c:	00000979 	.word	0x00000979
    2b40:	20000160 	.word	0x20000160
    2b44:	200002bc 	.word	0x200002bc
    2b48:	00000641 	.word	0x00000641
    2b4c:	200002c8 	.word	0x200002c8
    2b50:	00000141 	.word	0x00000141
    2b54:	200002ac 	.word	0x200002ac
    2b58:	2000015c 	.word	0x2000015c
    2b5c:	200002bf 	.word	0x200002bf
    2b60:	000026dd 	.word	0x000026dd

00002b64 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    2b64:	b510      	push	{r4, lr}
    2b66:	4b07      	ldr	r3, [pc, #28]	; (2b84 <removeFromKeyDown+0x20>)
    2b68:	0019      	movs	r1, r3
    2b6a:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    2b6c:	24ff      	movs	r4, #255	; 0xff
    2b6e:	e002      	b.n	2b76 <removeFromKeyDown+0x12>
    2b70:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    2b72:	428b      	cmp	r3, r1
    2b74:	d004      	beq.n	2b80 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    2b76:	781a      	ldrb	r2, [r3, #0]
    2b78:	4282      	cmp	r2, r0
    2b7a:	d1f9      	bne.n	2b70 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    2b7c:	701c      	strb	r4, [r3, #0]
    2b7e:	e7f7      	b.n	2b70 <removeFromKeyDown+0xc>
		}
	}
}
    2b80:	bd10      	pop	{r4, pc}
    2b82:	46c0      	nop			; (mov r8, r8)
    2b84:	20000014 	.word	0x20000014

00002b88 <readKeyboard>:
{
    2b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b8a:	46de      	mov	lr, fp
    2b8c:	4657      	mov	r7, sl
    2b8e:	464e      	mov	r6, r9
    2b90:	4645      	mov	r5, r8
    2b92:	b5e0      	push	{r5, r6, r7, lr}
    2b94:	b083      	sub	sp, #12
    2b96:	4e6d      	ldr	r6, [pc, #436]	; (2d4c <readKeyboard+0x1c4>)
    2b98:	0031      	movs	r1, r6
    2b9a:	3119      	adds	r1, #25
    2b9c:	31ff      	adds	r1, #255	; 0xff
    2b9e:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    2ba0:	22ff      	movs	r2, #255	; 0xff
    2ba2:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    2ba4:	428b      	cmp	r3, r1
    2ba6:	d1fc      	bne.n	2ba2 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    2ba8:	4a69      	ldr	r2, [pc, #420]	; (2d50 <readKeyboard+0x1c8>)
    2baa:	6a91      	ldr	r1, [r2, #40]	; 0x28
    2bac:	2380      	movs	r3, #128	; 0x80
    2bae:	03db      	lsls	r3, r3, #15
    2bb0:	430b      	orrs	r3, r1
    2bb2:	6293      	str	r3, [r2, #40]	; 0x28
    2bb4:	4c67      	ldr	r4, [pc, #412]	; (2d54 <readKeyboard+0x1cc>)
    2bb6:	341c      	adds	r4, #28
    2bb8:	4b66      	ldr	r3, [pc, #408]	; (2d54 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    2bba:	4867      	ldr	r0, [pc, #412]	; (2d58 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    2bbc:	4967      	ldr	r1, [pc, #412]	; (2d5c <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    2bbe:	681a      	ldr	r2, [r3, #0]
    2bc0:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2bc2:	cb04      	ldmia	r3!, {r2}
    2bc4:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    2bc6:	42a3      	cmp	r3, r4
    2bc8:	d1f9      	bne.n	2bbe <readKeyboard+0x36>
    2bca:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    2bcc:	4b64      	ldr	r3, [pc, #400]	; (2d60 <readKeyboard+0x1d8>)
    2bce:	469c      	mov	ip, r3
    2bd0:	4f64      	ldr	r7, [pc, #400]	; (2d64 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2bd2:	4d65      	ldr	r5, [pc, #404]	; (2d68 <readKeyboard+0x1e0>)
    2bd4:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2bd6:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    2bd8:	4663      	mov	r3, ip
    2bda:	58d3      	ldr	r3, [r2, r3]
    2bdc:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2bde:	5953      	ldr	r3, [r2, r5]
    2be0:	4962      	ldr	r1, [pc, #392]	; (2d6c <readKeyboard+0x1e4>)
    2be2:	4688      	mov	r8, r1
    2be4:	4443      	add	r3, r8
    2be6:	7819      	ldrb	r1, [r3, #0]
    2be8:	4321      	orrs	r1, r4
    2bea:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2bec:	7819      	ldrb	r1, [r3, #0]
    2bee:	4301      	orrs	r1, r0
    2bf0:	7019      	strb	r1, [r3, #0]
    2bf2:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    2bf4:	2a28      	cmp	r2, #40	; 0x28
    2bf6:	d1ef      	bne.n	2bd8 <readKeyboard+0x50>
    2bf8:	4b56      	ldr	r3, [pc, #344]	; (2d54 <readKeyboard+0x1cc>)
    2bfa:	4699      	mov	r9, r3
    2bfc:	2300      	movs	r3, #0
    2bfe:	4698      	mov	r8, r3
    2c00:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    2c02:	4b5b      	ldr	r3, [pc, #364]	; (2d70 <readKeyboard+0x1e8>)
    2c04:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2c06:	4d52      	ldr	r5, [pc, #328]	; (2d50 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2c08:	4b50      	ldr	r3, [pc, #320]	; (2d4c <readKeyboard+0x1c4>)
    2c0a:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    2c0c:	4b53      	ldr	r3, [pc, #332]	; (2d5c <readKeyboard+0x1d4>)
    2c0e:	469a      	mov	sl, r3
    2c10:	9601      	str	r6, [sp, #4]
    2c12:	464e      	mov	r6, r9
    2c14:	4647      	mov	r7, r8
    2c16:	e015      	b.n	2c44 <readKeyboard+0xbc>
    2c18:	3304      	adds	r3, #4
    2c1a:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    2c1c:	42a3      	cmp	r3, r4
    2c1e:	d008      	beq.n	2c32 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2c20:	6a28      	ldr	r0, [r5, #32]
    2c22:	681e      	ldr	r6, [r3, #0]
    2c24:	4206      	tst	r6, r0
    2c26:	d0f7      	beq.n	2c18 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2c28:	0090      	lsls	r0, r2, #2
    2c2a:	4666      	mov	r6, ip
    2c2c:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    2c2e:	3201      	adds	r2, #1
    2c30:	e7f2      	b.n	2c18 <readKeyboard+0x90>
    2c32:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2c34:	4649      	mov	r1, r9
    2c36:	6809      	ldr	r1, [r1, #0]
    2c38:	4650      	mov	r0, sl
    2c3a:	6001      	str	r1, [r0, #0]
    2c3c:	3604      	adds	r6, #4
    2c3e:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    2c40:	2f46      	cmp	r7, #70	; 0x46
    2c42:	d00a      	beq.n	2c5a <readKeyboard+0xd2>
    2c44:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    2c46:	465b      	mov	r3, fp
    2c48:	6831      	ldr	r1, [r6, #0]
    2c4a:	6019      	str	r1, [r3, #0]
    2c4c:	4b44      	ldr	r3, [pc, #272]	; (2d60 <readKeyboard+0x1d8>)
    2c4e:	4698      	mov	r8, r3
    2c50:	001c      	movs	r4, r3
    2c52:	3428      	adds	r4, #40	; 0x28
    2c54:	0039      	movs	r1, r7
    2c56:	9600      	str	r6, [sp, #0]
    2c58:	e7e2      	b.n	2c20 <readKeyboard+0x98>
    2c5a:	4647      	mov	r7, r8
    2c5c:	9e01      	ldr	r6, [sp, #4]
    2c5e:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    2c60:	4d3d      	ldr	r5, [pc, #244]	; (2d58 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    2c62:	4c3e      	ldr	r4, [pc, #248]	; (2d5c <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    2c64:	6808      	ldr	r0, [r1, #0]
    2c66:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2c68:	c901      	ldmia	r1!, {r0}
    2c6a:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2c6c:	4299      	cmp	r1, r3
    2c6e:	d1f9      	bne.n	2c64 <readKeyboard+0xdc>
    2c70:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    2c72:	4b38      	ldr	r3, [pc, #224]	; (2d54 <readKeyboard+0x1cc>)
    2c74:	4699      	mov	r9, r3
    2c76:	4b3b      	ldr	r3, [pc, #236]	; (2d64 <readKeyboard+0x1dc>)
    2c78:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    2c7a:	4b3e      	ldr	r3, [pc, #248]	; (2d74 <readKeyboard+0x1ec>)
    2c7c:	469c      	mov	ip, r3
    2c7e:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2c80:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    2c82:	4643      	mov	r3, r8
    2c84:	4648      	mov	r0, r9
    2c86:	5808      	ldr	r0, [r1, r0]
    2c88:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    2c8a:	4663      	mov	r3, ip
    2c8c:	58cb      	ldr	r3, [r1, r3]
    2c8e:	4837      	ldr	r0, [pc, #220]	; (2d6c <readKeyboard+0x1e4>)
    2c90:	4682      	mov	sl, r0
    2c92:	4453      	add	r3, sl
    2c94:	7818      	ldrb	r0, [r3, #0]
    2c96:	4328      	orrs	r0, r5
    2c98:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2c9a:	7818      	ldrb	r0, [r3, #0]
    2c9c:	4320      	orrs	r0, r4
    2c9e:	7018      	strb	r0, [r3, #0]
    2ca0:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    2ca2:	291c      	cmp	r1, #28
    2ca4:	d1ed      	bne.n	2c82 <readKeyboard+0xfa>
    2ca6:	2300      	movs	r3, #0
    2ca8:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    2caa:	4b31      	ldr	r3, [pc, #196]	; (2d70 <readKeyboard+0x1e8>)
    2cac:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2cae:	4d28      	ldr	r5, [pc, #160]	; (2d50 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2cb0:	4b26      	ldr	r3, [pc, #152]	; (2d4c <readKeyboard+0x1c4>)
    2cb2:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    2cb4:	4b29      	ldr	r3, [pc, #164]	; (2d5c <readKeyboard+0x1d4>)
    2cb6:	469a      	mov	sl, r3
    2cb8:	46b1      	mov	r9, r6
    2cba:	003e      	movs	r6, r7
    2cbc:	4667      	mov	r7, ip
    2cbe:	e015      	b.n	2cec <readKeyboard+0x164>
    2cc0:	3104      	adds	r1, #4
    2cc2:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    2cc4:	42a3      	cmp	r3, r4
    2cc6:	d008      	beq.n	2cda <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2cc8:	6a28      	ldr	r0, [r5, #32]
    2cca:	680e      	ldr	r6, [r1, #0]
    2ccc:	4206      	tst	r6, r0
    2cce:	d0f7      	beq.n	2cc0 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2cd0:	0090      	lsls	r0, r2, #2
    2cd2:	4646      	mov	r6, r8
    2cd4:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    2cd6:	3201      	adds	r2, #1
    2cd8:	e7f2      	b.n	2cc0 <readKeyboard+0x138>
    2cda:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2cdc:	4663      	mov	r3, ip
    2cde:	681b      	ldr	r3, [r3, #0]
    2ce0:	4651      	mov	r1, sl
    2ce2:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2ce4:	3701      	adds	r7, #1
    2ce6:	3604      	adds	r6, #4
    2ce8:	2f0a      	cmp	r7, #10
    2cea:	d009      	beq.n	2d00 <readKeyboard+0x178>
    2cec:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    2cee:	465b      	mov	r3, fp
    2cf0:	6831      	ldr	r1, [r6, #0]
    2cf2:	6019      	str	r1, [r3, #0]
    2cf4:	003b      	movs	r3, r7
    2cf6:	003c      	movs	r4, r7
    2cf8:	3446      	adds	r4, #70	; 0x46
    2cfa:	4916      	ldr	r1, [pc, #88]	; (2d54 <readKeyboard+0x1cc>)
    2cfc:	9600      	str	r6, [sp, #0]
    2cfe:	e7e3      	b.n	2cc8 <readKeyboard+0x140>
    2d00:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    2d02:	2a00      	cmp	r2, #0
    2d04:	dd08      	ble.n	2d18 <readKeyboard+0x190>
    2d06:	4b1c      	ldr	r3, [pc, #112]	; (2d78 <readKeyboard+0x1f0>)
    2d08:	0092      	lsls	r2, r2, #2
    2d0a:	4910      	ldr	r1, [pc, #64]	; (2d4c <readKeyboard+0x1c4>)
    2d0c:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    2d0e:	ce02      	ldmia	r6!, {r1}
    2d10:	7019      	strb	r1, [r3, #0]
    2d12:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2d14:	42b2      	cmp	r2, r6
    2d16:	d1fa      	bne.n	2d0e <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    2d18:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    2d1a:	4d18      	ldr	r5, [pc, #96]	; (2d7c <readKeyboard+0x1f4>)
    2d1c:	4e18      	ldr	r6, [pc, #96]	; (2d80 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    2d1e:	4f19      	ldr	r7, [pc, #100]	; (2d84 <readKeyboard+0x1fc>)
    2d20:	e002      	b.n	2d28 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    2d22:	3401      	adds	r4, #1
    2d24:	2c46      	cmp	r4, #70	; 0x46
    2d26:	d00a      	beq.n	2d3e <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    2d28:	0020      	movs	r0, r4
    2d2a:	47a8      	blx	r5
    2d2c:	2800      	cmp	r0, #0
    2d2e:	d0f8      	beq.n	2d22 <readKeyboard+0x19a>
    2d30:	0020      	movs	r0, r4
    2d32:	47b0      	blx	r6
    2d34:	2800      	cmp	r0, #0
    2d36:	d1f4      	bne.n	2d22 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    2d38:	0020      	movs	r0, r4
    2d3a:	47b8      	blx	r7
    2d3c:	e7f1      	b.n	2d22 <readKeyboard+0x19a>
}
    2d3e:	b003      	add	sp, #12
    2d40:	bc3c      	pop	{r2, r3, r4, r5}
    2d42:	4690      	mov	r8, r2
    2d44:	4699      	mov	r9, r3
    2d46:	46a2      	mov	sl, r4
    2d48:	46ab      	mov	fp, r5
    2d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d4c:	2000003c 	.word	0x2000003c
    2d50:	41004400 	.word	0x41004400
    2d54:	00006d48 	.word	0x00006d48
    2d58:	41004408 	.word	0x41004408
    2d5c:	41004414 	.word	0x41004414
    2d60:	00006d80 	.word	0x00006d80
    2d64:	41004404 	.word	0x41004404
    2d68:	00006da8 	.word	0x00006da8
    2d6c:	41004440 	.word	0x41004440
    2d70:	41004418 	.word	0x41004418
    2d74:	00006d64 	.word	0x00006d64
    2d78:	20000028 	.word	0x20000028
    2d7c:	00002819 	.word	0x00002819
    2d80:	000027ed 	.word	0x000027ed
    2d84:	00002b65 	.word	0x00002b65

00002d88 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    2d88:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2d8a:	094b      	lsrs	r3, r1, #5
    2d8c:	2407      	movs	r4, #7
    2d8e:	43a0      	bics	r0, r4
    2d90:	4318      	orrs	r0, r3
    2d92:	4b05      	ldr	r3, [pc, #20]	; (2da8 <setColorRGB+0x20>)
    2d94:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2d96:	00c9      	lsls	r1, r1, #3
    2d98:	23e0      	movs	r3, #224	; 0xe0
    2d9a:	4019      	ands	r1, r3
    2d9c:	08d2      	lsrs	r2, r2, #3
    2d9e:	430a      	orrs	r2, r1
    2da0:	4b02      	ldr	r3, [pc, #8]	; (2dac <setColorRGB+0x24>)
    2da2:	801a      	strh	r2, [r3, #0]
}
    2da4:	bd10      	pop	{r4, pc}
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	20000aae 	.word	0x20000aae
    2dac:	20000ab0 	.word	0x20000ab0

00002db0 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    2db0:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    2db2:	094b      	lsrs	r3, r1, #5
    2db4:	2407      	movs	r4, #7
    2db6:	43a0      	bics	r0, r4
    2db8:	4318      	orrs	r0, r3
    2dba:	4b05      	ldr	r3, [pc, #20]	; (2dd0 <setBackColorRGB+0x20>)
    2dbc:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    2dbe:	00c9      	lsls	r1, r1, #3
    2dc0:	23e0      	movs	r3, #224	; 0xe0
    2dc2:	4019      	ands	r1, r3
    2dc4:	08d2      	lsrs	r2, r2, #3
    2dc6:	430a      	orrs	r2, r1
    2dc8:	4b02      	ldr	r3, [pc, #8]	; (2dd4 <setBackColorRGB+0x24>)
    2dca:	801a      	strh	r2, [r3, #0]
}
    2dcc:	bd10      	pop	{r4, pc}
    2dce:	46c0      	nop			; (mov r8, r8)
    2dd0:	20000ab2 	.word	0x20000ab2
    2dd4:	20000aac 	.word	0x20000aac

00002dd8 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2dd8:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2dda:	4c19      	ldr	r4, [pc, #100]	; (2e40 <LCD_Fast_Fill+0x68>)
    2ddc:	4b19      	ldr	r3, [pc, #100]	; (2e44 <LCD_Fast_Fill+0x6c>)
    2dde:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    2de0:	0200      	lsls	r0, r0, #8
    2de2:	4301      	orrs	r1, r0
    2de4:	4b18      	ldr	r3, [pc, #96]	; (2e48 <LCD_Fast_Fill+0x70>)
    2de6:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2de8:	17d3      	asrs	r3, r2, #31
    2dea:	260f      	movs	r6, #15
    2dec:	401e      	ands	r6, r3
    2dee:	18b6      	adds	r6, r6, r2
    2df0:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    2df2:	2500      	movs	r5, #0
    2df4:	2e00      	cmp	r6, #0
    2df6:	dd0c      	ble.n	2e12 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2df8:	4c12      	ldr	r4, [pc, #72]	; (2e44 <LCD_Fast_Fill+0x6c>)
    2dfa:	2180      	movs	r1, #128	; 0x80
    2dfc:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2dfe:	4812      	ldr	r0, [pc, #72]	; (2e48 <LCD_Fast_Fill+0x70>)
{
    2e00:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    2e02:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2e04:	6001      	str	r1, [r0, #0]
    2e06:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2e08:	2b00      	cmp	r3, #0
    2e0a:	d1fa      	bne.n	2e02 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2e0c:	3501      	adds	r5, #1
    2e0e:	42ae      	cmp	r6, r5
    2e10:	d1f6      	bne.n	2e00 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    2e12:	0713      	lsls	r3, r2, #28
    2e14:	d013      	beq.n	2e3e <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2e16:	17d3      	asrs	r3, r2, #31
    2e18:	0f1b      	lsrs	r3, r3, #28
    2e1a:	18d2      	adds	r2, r2, r3
    2e1c:	210f      	movs	r1, #15
    2e1e:	4011      	ands	r1, r2
    2e20:	1ac9      	subs	r1, r1, r3
    2e22:	1c4b      	adds	r3, r1, #1
    2e24:	2b00      	cmp	r3, #0
    2e26:	dd0a      	ble.n	2e3e <LCD_Fast_Fill+0x66>
    2e28:	0019      	movs	r1, r3
    2e2a:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2e2c:	4c05      	ldr	r4, [pc, #20]	; (2e44 <LCD_Fast_Fill+0x6c>)
    2e2e:	2280      	movs	r2, #128	; 0x80
    2e30:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    2e32:	4805      	ldr	r0, [pc, #20]	; (2e48 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2e34:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    2e36:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2e38:	3301      	adds	r3, #1
    2e3a:	4299      	cmp	r1, r3
    2e3c:	d1fa      	bne.n	2e34 <LCD_Fast_Fill+0x5c>
	}
}
    2e3e:	bd70      	pop	{r4, r5, r6, pc}
    2e40:	0000ffff 	.word	0x0000ffff
    2e44:	41004494 	.word	0x41004494
    2e48:	41004498 	.word	0x41004498

00002e4c <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e4e:	b083      	sub	sp, #12
    2e50:	0007      	movs	r7, r0
    2e52:	9100      	str	r1, [sp, #0]
    2e54:	0016      	movs	r6, r2
    2e56:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    2e58:	2100      	movs	r1, #0
    2e5a:	202a      	movs	r0, #42	; 0x2a
    2e5c:	4c17      	ldr	r4, [pc, #92]	; (2ebc <setXY+0x70>)
    2e5e:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2e60:	0a38      	lsrs	r0, r7, #8
    2e62:	4d17      	ldr	r5, [pc, #92]	; (2ec0 <setXY+0x74>)
    2e64:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    2e66:	2101      	movs	r1, #1
    2e68:	202a      	movs	r0, #42	; 0x2a
    2e6a:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2e6c:	b2f8      	uxtb	r0, r7
    2e6e:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2e70:	2102      	movs	r1, #2
    2e72:	202a      	movs	r0, #42	; 0x2a
    2e74:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    2e76:	0a30      	lsrs	r0, r6, #8
    2e78:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    2e7a:	2103      	movs	r1, #3
    2e7c:	202a      	movs	r0, #42	; 0x2a
    2e7e:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2e80:	b2f0      	uxtb	r0, r6
    2e82:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    2e84:	2100      	movs	r1, #0
    2e86:	202b      	movs	r0, #43	; 0x2b
    2e88:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2e8a:	9e00      	ldr	r6, [sp, #0]
    2e8c:	0a30      	lsrs	r0, r6, #8
    2e8e:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    2e90:	2101      	movs	r1, #1
    2e92:	202b      	movs	r0, #43	; 0x2b
    2e94:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2e96:	b2f0      	uxtb	r0, r6
    2e98:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    2e9a:	2102      	movs	r1, #2
    2e9c:	202b      	movs	r0, #43	; 0x2b
    2e9e:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2ea0:	9e01      	ldr	r6, [sp, #4]
    2ea2:	0a30      	lsrs	r0, r6, #8
    2ea4:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    2ea6:	2103      	movs	r1, #3
    2ea8:	202b      	movs	r0, #43	; 0x2b
    2eaa:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2eac:	b2f0      	uxtb	r0, r6
    2eae:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    2eb0:	2100      	movs	r1, #0
    2eb2:	202c      	movs	r0, #44	; 0x2c
    2eb4:	47a0      	blx	r4
}
    2eb6:	b003      	add	sp, #12
    2eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eba:	46c0      	nop			; (mov r8, r8)
    2ebc:	00002ff1 	.word	0x00002ff1
    2ec0:	00003021 	.word	0x00003021

00002ec4 <fillRect>:
{
    2ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ec6:	46ce      	mov	lr, r9
    2ec8:	4647      	mov	r7, r8
    2eca:	b580      	push	{r7, lr}
    2ecc:	b083      	sub	sp, #12
    2ece:	0006      	movs	r6, r0
    2ed0:	4689      	mov	r9, r1
    2ed2:	0014      	movs	r4, r2
    2ed4:	001d      	movs	r5, r3
	if (x1>x2)
    2ed6:	4290      	cmp	r0, r2
    2ed8:	dd01      	ble.n	2ede <fillRect+0x1a>
		x1 = x2;
    2eda:	0016      	movs	r6, r2
		x2 = temp;
    2edc:	0004      	movs	r4, r0
	if (y1>y2)
    2ede:	45a9      	cmp	r9, r5
    2ee0:	dd02      	ble.n	2ee8 <fillRect+0x24>
    2ee2:	0033      	movs	r3, r6
		x1 = x2;
    2ee4:	0026      	movs	r6, r4
		x2 = temp;
    2ee6:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2ee8:	2380      	movs	r3, #128	; 0x80
    2eea:	03db      	lsls	r3, r3, #15
    2eec:	4698      	mov	r8, r3
    2eee:	4b11      	ldr	r3, [pc, #68]	; (2f34 <fillRect+0x70>)
    2ef0:	4642      	mov	r2, r8
    2ef2:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2ef4:	b2ab      	uxth	r3, r5
    2ef6:	b2a2      	uxth	r2, r4
    2ef8:	4649      	mov	r1, r9
    2efa:	4668      	mov	r0, sp
    2efc:	80c1      	strh	r1, [r0, #6]
    2efe:	88c1      	ldrh	r1, [r0, #6]
    2f00:	b2b0      	uxth	r0, r6
    2f02:	4f0d      	ldr	r7, [pc, #52]	; (2f38 <fillRect+0x74>)
    2f04:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2f06:	4f0d      	ldr	r7, [pc, #52]	; (2f3c <fillRect+0x78>)
    2f08:	2380      	movs	r3, #128	; 0x80
    2f0a:	041b      	lsls	r3, r3, #16
    2f0c:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2f0e:	1ba4      	subs	r4, r4, r6
    2f10:	3401      	adds	r4, #1
    2f12:	464b      	mov	r3, r9
    2f14:	1aea      	subs	r2, r5, r3
    2f16:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2f18:	4362      	muls	r2, r4
    2f1a:	4b09      	ldr	r3, [pc, #36]	; (2f40 <fillRect+0x7c>)
    2f1c:	8819      	ldrh	r1, [r3, #0]
    2f1e:	4b09      	ldr	r3, [pc, #36]	; (2f44 <fillRect+0x80>)
    2f20:	8818      	ldrh	r0, [r3, #0]
    2f22:	4b09      	ldr	r3, [pc, #36]	; (2f48 <fillRect+0x84>)
    2f24:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2f26:	4643      	mov	r3, r8
    2f28:	603b      	str	r3, [r7, #0]
}
    2f2a:	b003      	add	sp, #12
    2f2c:	bc0c      	pop	{r2, r3}
    2f2e:	4690      	mov	r8, r2
    2f30:	4699      	mov	r9, r3
    2f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f34:	41004494 	.word	0x41004494
    2f38:	00002e4d 	.word	0x00002e4d
    2f3c:	41004498 	.word	0x41004498
    2f40:	20000ab0 	.word	0x20000ab0
    2f44:	20000aae 	.word	0x20000aae
    2f48:	00002dd9 	.word	0x00002dd9

00002f4c <clrXY>:
{
    2f4c:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2f4e:	4b04      	ldr	r3, [pc, #16]	; (2f60 <clrXY+0x14>)
    2f50:	881b      	ldrh	r3, [r3, #0]
    2f52:	4a04      	ldr	r2, [pc, #16]	; (2f64 <clrXY+0x18>)
    2f54:	8812      	ldrh	r2, [r2, #0]
    2f56:	2100      	movs	r1, #0
    2f58:	2000      	movs	r0, #0
    2f5a:	4c03      	ldr	r4, [pc, #12]	; (2f68 <clrXY+0x1c>)
    2f5c:	47a0      	blx	r4
}
    2f5e:	bd10      	pop	{r4, pc}
    2f60:	20000156 	.word	0x20000156
    2f64:	20000154 	.word	0x20000154
    2f68:	00002e4d 	.word	0x00002e4d

00002f6c <clrScr>:
{
    2f6c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2f6e:	2280      	movs	r2, #128	; 0x80
    2f70:	03d2      	lsls	r2, r2, #15
    2f72:	4b02      	ldr	r3, [pc, #8]	; (2f7c <clrScr+0x10>)
    2f74:	601a      	str	r2, [r3, #0]
	clrXY();
    2f76:	4b02      	ldr	r3, [pc, #8]	; (2f80 <clrScr+0x14>)
    2f78:	4798      	blx	r3
}
    2f7a:	bd10      	pop	{r4, pc}
    2f7c:	41004494 	.word	0x41004494
    2f80:	00002f4d 	.word	0x00002f4d

00002f84 <setPixel>:

void setPixel(uint16_t color)
{
    2f84:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2f86:	b2c1      	uxtb	r1, r0
    2f88:	0a00      	lsrs	r0, r0, #8
    2f8a:	4b01      	ldr	r3, [pc, #4]	; (2f90 <setPixel+0xc>)
    2f8c:	4798      	blx	r3
}
    2f8e:	bd10      	pop	{r4, pc}
    2f90:	00003009 	.word	0x00003009

00002f94 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2f94:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2f96:	2300      	movs	r3, #0
    2f98:	4a06      	ldr	r2, [pc, #24]	; (2fb4 <clearScreen+0x20>)
    2f9a:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2f9c:	4a06      	ldr	r2, [pc, #24]	; (2fb8 <clearScreen+0x24>)
    2f9e:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2fa0:	4b06      	ldr	r3, [pc, #24]	; (2fbc <clearScreen+0x28>)
    2fa2:	881b      	ldrh	r3, [r3, #0]
    2fa4:	4a06      	ldr	r2, [pc, #24]	; (2fc0 <clearScreen+0x2c>)
    2fa6:	8812      	ldrh	r2, [r2, #0]
    2fa8:	2100      	movs	r1, #0
    2faa:	2000      	movs	r0, #0
    2fac:	4c05      	ldr	r4, [pc, #20]	; (2fc4 <clearScreen+0x30>)
    2fae:	47a0      	blx	r4
}
    2fb0:	bd10      	pop	{r4, pc}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	20000aae 	.word	0x20000aae
    2fb8:	20000ab0 	.word	0x20000ab0
    2fbc:	20000154 	.word	0x20000154
    2fc0:	20000156 	.word	0x20000156
    2fc4:	00002ec5 	.word	0x00002ec5

00002fc8 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2fc8:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2fca:	4c06      	ldr	r4, [pc, #24]	; (2fe4 <LCD_Write_Bus+0x1c>)
    2fcc:	4b06      	ldr	r3, [pc, #24]	; (2fe8 <LCD_Write_Bus+0x20>)
    2fce:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    2fd0:	0200      	lsls	r0, r0, #8
    2fd2:	4301      	orrs	r1, r0
    2fd4:	4b05      	ldr	r3, [pc, #20]	; (2fec <LCD_Write_Bus+0x24>)
    2fd6:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2fd8:	2280      	movs	r2, #128	; 0x80
    2fda:	0292      	lsls	r2, r2, #10
    2fdc:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    2fde:	601a      	str	r2, [r3, #0]
}
    2fe0:	bd10      	pop	{r4, pc}
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	41004494 	.word	0x41004494
    2fe8:	0000ffff 	.word	0x0000ffff
    2fec:	41004498 	.word	0x41004498

00002ff0 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    2ff0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    2ff2:	2280      	movs	r2, #128	; 0x80
    2ff4:	0412      	lsls	r2, r2, #16
    2ff6:	4b02      	ldr	r3, [pc, #8]	; (3000 <LCD_Write_COM16+0x10>)
    2ff8:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    2ffa:	4b02      	ldr	r3, [pc, #8]	; (3004 <LCD_Write_COM16+0x14>)
    2ffc:	4798      	blx	r3
}
    2ffe:	bd10      	pop	{r4, pc}
    3000:	41004494 	.word	0x41004494
    3004:	00002fc9 	.word	0x00002fc9

00003008 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    3008:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    300a:	2280      	movs	r2, #128	; 0x80
    300c:	0412      	lsls	r2, r2, #16
    300e:	4b02      	ldr	r3, [pc, #8]	; (3018 <LCD_Write_DATA16+0x10>)
    3010:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    3012:	4b02      	ldr	r3, [pc, #8]	; (301c <LCD_Write_DATA16+0x14>)
    3014:	4798      	blx	r3
}
    3016:	bd10      	pop	{r4, pc}
    3018:	41004498 	.word	0x41004498
    301c:	00002fc9 	.word	0x00002fc9

00003020 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    3020:	b510      	push	{r4, lr}
    3022:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    3024:	2280      	movs	r2, #128	; 0x80
    3026:	0412      	lsls	r2, r2, #16
    3028:	4b02      	ldr	r3, [pc, #8]	; (3034 <LCD_Write_DATA8+0x14>)
    302a:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    302c:	2000      	movs	r0, #0
    302e:	4b02      	ldr	r3, [pc, #8]	; (3038 <LCD_Write_DATA8+0x18>)
    3030:	4798      	blx	r3
}
    3032:	bd10      	pop	{r4, pc}
    3034:	41004498 	.word	0x41004498
    3038:	00002fc9 	.word	0x00002fc9

0000303c <InitLCD>:
{
    303c:	b5f0      	push	{r4, r5, r6, r7, lr}
    303e:	46c6      	mov	lr, r8
    3040:	b500      	push	{lr}
    3042:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    3044:	4b80      	ldr	r3, [pc, #512]	; (3248 <InitLCD+0x20c>)
    3046:	4f81      	ldr	r7, [pc, #516]	; (324c <InitLCD+0x210>)
    3048:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    304a:	2580      	movs	r5, #128	; 0x80
    304c:	05ed      	lsls	r5, r5, #23
    304e:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    3050:	2680      	movs	r6, #128	; 0x80
    3052:	03f6      	lsls	r6, r6, #15
    3054:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    3056:	2080      	movs	r0, #128	; 0x80
    3058:	0280      	lsls	r0, r0, #10
    305a:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    305c:	2180      	movs	r1, #128	; 0x80
    305e:	0409      	lsls	r1, r1, #16
    3060:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    3062:	2280      	movs	r2, #128	; 0x80
    3064:	0252      	lsls	r2, r2, #9
    3066:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3068:	4c79      	ldr	r4, [pc, #484]	; (3250 <InitLCD+0x214>)
    306a:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    306c:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    306e:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    3070:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    3072:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    3074:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    3076:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    3078:	4f76      	ldr	r7, [pc, #472]	; (3254 <InitLCD+0x218>)
    307a:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    307c:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    307e:	2005      	movs	r0, #5
    3080:	4b75      	ldr	r3, [pc, #468]	; (3258 <InitLCD+0x21c>)
    3082:	4698      	mov	r8, r3
    3084:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    3086:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    3088:	2005      	movs	r0, #5
    308a:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    308c:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    308e:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    3090:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    3092:	4b6f      	ldr	r3, [pc, #444]	; (3250 <InitLCD+0x214>)
    3094:	4698      	mov	r8, r3
    3096:	2580      	movs	r5, #128	; 0x80
    3098:	042d      	lsls	r5, r5, #16
    309a:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    309c:	4e6f      	ldr	r6, [pc, #444]	; (325c <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    309e:	4643      	mov	r3, r8
    30a0:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    30a2:	5da1      	ldrb	r1, [r4, r6]
    30a4:	4b6e      	ldr	r3, [pc, #440]	; (3260 <InitLCD+0x224>)
    30a6:	5ce0      	ldrb	r0, [r4, r3]
    30a8:	4b6e      	ldr	r3, [pc, #440]	; (3264 <InitLCD+0x228>)
    30aa:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    30ac:	4b69      	ldr	r3, [pc, #420]	; (3254 <InitLCD+0x218>)
    30ae:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    30b0:	4b6d      	ldr	r3, [pc, #436]	; (3268 <InitLCD+0x22c>)
    30b2:	5ce0      	ldrb	r0, [r4, r3]
    30b4:	4b6d      	ldr	r3, [pc, #436]	; (326c <InitLCD+0x230>)
    30b6:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    30b8:	3401      	adds	r4, #1
    30ba:	2c46      	cmp	r4, #70	; 0x46
    30bc:	d1ef      	bne.n	309e <InitLCD+0x62>
    30be:	23d1      	movs	r3, #209	; 0xd1
    30c0:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    30c2:	4d68      	ldr	r5, [pc, #416]	; (3264 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    30c4:	4f69      	ldr	r7, [pc, #420]	; (326c <InitLCD+0x230>)
    30c6:	4c6a      	ldr	r4, [pc, #424]	; (3270 <InitLCD+0x234>)
    30c8:	0026      	movs	r6, r4
    30ca:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    30cc:	2100      	movs	r1, #0
    30ce:	9801      	ldr	r0, [sp, #4]
    30d0:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    30d2:	7820      	ldrb	r0, [r4, #0]
    30d4:	47b8      	blx	r7
    30d6:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    30d8:	42a6      	cmp	r6, r4
    30da:	d1f7      	bne.n	30cc <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    30dc:	9b01      	ldr	r3, [sp, #4]
    30de:	3301      	adds	r3, #1
    30e0:	b2db      	uxtb	r3, r3
    30e2:	9301      	str	r3, [sp, #4]
    30e4:	2bd6      	cmp	r3, #214	; 0xd6
    30e6:	d1ee      	bne.n	30c6 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    30e8:	2100      	movs	r1, #0
    30ea:	20f0      	movs	r0, #240	; 0xf0
    30ec:	4c5d      	ldr	r4, [pc, #372]	; (3264 <InitLCD+0x228>)
    30ee:	47a0      	blx	r4
    30f0:	2055      	movs	r0, #85	; 0x55
    30f2:	4d5e      	ldr	r5, [pc, #376]	; (326c <InitLCD+0x230>)
    30f4:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    30f6:	2101      	movs	r1, #1
    30f8:	20f0      	movs	r0, #240	; 0xf0
    30fa:	47a0      	blx	r4
    30fc:	20aa      	movs	r0, #170	; 0xaa
    30fe:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    3100:	2102      	movs	r1, #2
    3102:	20f0      	movs	r0, #240	; 0xf0
    3104:	47a0      	blx	r4
    3106:	2052      	movs	r0, #82	; 0x52
    3108:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    310a:	2103      	movs	r1, #3
    310c:	20f0      	movs	r0, #240	; 0xf0
    310e:	47a0      	blx	r4
    3110:	2008      	movs	r0, #8
    3112:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    3114:	2104      	movs	r1, #4
    3116:	20f0      	movs	r0, #240	; 0xf0
    3118:	47a0      	blx	r4
    311a:	2000      	movs	r0, #0
    311c:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    311e:	2100      	movs	r1, #0
    3120:	20b1      	movs	r0, #177	; 0xb1
    3122:	47a0      	blx	r4
    3124:	20cc      	movs	r0, #204	; 0xcc
    3126:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    3128:	2101      	movs	r1, #1
    312a:	20b1      	movs	r0, #177	; 0xb1
    312c:	47a0      	blx	r4
    312e:	2000      	movs	r0, #0
    3130:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    3132:	2100      	movs	r1, #0
    3134:	20b5      	movs	r0, #181	; 0xb5
    3136:	47a0      	blx	r4
    3138:	2050      	movs	r0, #80	; 0x50
    313a:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    313c:	2100      	movs	r1, #0
    313e:	20b6      	movs	r0, #182	; 0xb6
    3140:	47a0      	blx	r4
    3142:	2005      	movs	r0, #5
    3144:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    3146:	2100      	movs	r1, #0
    3148:	20b7      	movs	r0, #183	; 0xb7
    314a:	47a0      	blx	r4
    314c:	2070      	movs	r0, #112	; 0x70
    314e:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    3150:	2101      	movs	r1, #1
    3152:	20b7      	movs	r0, #183	; 0xb7
    3154:	47a0      	blx	r4
    3156:	2070      	movs	r0, #112	; 0x70
    3158:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    315a:	2100      	movs	r1, #0
    315c:	20b8      	movs	r0, #184	; 0xb8
    315e:	47a0      	blx	r4
    3160:	2001      	movs	r0, #1
    3162:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    3164:	2101      	movs	r1, #1
    3166:	20b8      	movs	r0, #184	; 0xb8
    3168:	47a0      	blx	r4
    316a:	2003      	movs	r0, #3
    316c:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    316e:	2102      	movs	r1, #2
    3170:	20b8      	movs	r0, #184	; 0xb8
    3172:	47a0      	blx	r4
    3174:	2003      	movs	r0, #3
    3176:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    3178:	2103      	movs	r1, #3
    317a:	20b8      	movs	r0, #184	; 0xb8
    317c:	47a0      	blx	r4
    317e:	2003      	movs	r0, #3
    3180:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    3182:	2100      	movs	r1, #0
    3184:	20bc      	movs	r0, #188	; 0xbc
    3186:	47a0      	blx	r4
    3188:	2002      	movs	r0, #2
    318a:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    318c:	2101      	movs	r1, #1
    318e:	20bc      	movs	r0, #188	; 0xbc
    3190:	47a0      	blx	r4
    3192:	2000      	movs	r0, #0
    3194:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    3196:	2102      	movs	r1, #2
    3198:	20bc      	movs	r0, #188	; 0xbc
    319a:	47a0      	blx	r4
    319c:	2000      	movs	r0, #0
    319e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    31a0:	2100      	movs	r1, #0
    31a2:	20c9      	movs	r0, #201	; 0xc9
    31a4:	47a0      	blx	r4
    31a6:	20d0      	movs	r0, #208	; 0xd0
    31a8:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    31aa:	2101      	movs	r1, #1
    31ac:	20c9      	movs	r0, #201	; 0xc9
    31ae:	47a0      	blx	r4
    31b0:	2002      	movs	r0, #2
    31b2:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    31b4:	2102      	movs	r1, #2
    31b6:	20c9      	movs	r0, #201	; 0xc9
    31b8:	47a0      	blx	r4
    31ba:	2050      	movs	r0, #80	; 0x50
    31bc:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    31be:	2103      	movs	r1, #3
    31c0:	20c9      	movs	r0, #201	; 0xc9
    31c2:	47a0      	blx	r4
    31c4:	2050      	movs	r0, #80	; 0x50
    31c6:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    31c8:	2104      	movs	r1, #4
    31ca:	20c9      	movs	r0, #201	; 0xc9
    31cc:	47a0      	blx	r4
    31ce:	2050      	movs	r0, #80	; 0x50
    31d0:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    31d2:	2100      	movs	r1, #0
    31d4:	2035      	movs	r0, #53	; 0x35
    31d6:	47a0      	blx	r4
    31d8:	2000      	movs	r0, #0
    31da:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    31dc:	2100      	movs	r1, #0
    31de:	203a      	movs	r0, #58	; 0x3a
    31e0:	47a0      	blx	r4
    31e2:	2055      	movs	r0, #85	; 0x55
    31e4:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    31e6:	2100      	movs	r1, #0
    31e8:	2036      	movs	r0, #54	; 0x36
    31ea:	47a0      	blx	r4
    31ec:	20e2      	movs	r0, #226	; 0xe2
    31ee:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    31f0:	2100      	movs	r1, #0
    31f2:	2011      	movs	r0, #17
    31f4:	47a0      	blx	r4
  	delay_ms(100);
    31f6:	2064      	movs	r0, #100	; 0x64
    31f8:	4e17      	ldr	r6, [pc, #92]	; (3258 <InitLCD+0x21c>)
    31fa:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    31fc:	2100      	movs	r1, #0
    31fe:	2029      	movs	r0, #41	; 0x29
    3200:	47a0      	blx	r4
   	delay_ms(100);
    3202:	2064      	movs	r0, #100	; 0x64
    3204:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    3206:	2100      	movs	r1, #0
    3208:	2051      	movs	r0, #81	; 0x51
    320a:	47a0      	blx	r4
    320c:	20ff      	movs	r0, #255	; 0xff
    320e:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    3210:	2280      	movs	r2, #128	; 0x80
    3212:	03d2      	lsls	r2, r2, #15
    3214:	4b0f      	ldr	r3, [pc, #60]	; (3254 <InitLCD+0x218>)
    3216:	601a      	str	r2, [r3, #0]
	clrScr();
    3218:	4b16      	ldr	r3, [pc, #88]	; (3274 <InitLCD+0x238>)
    321a:	4798      	blx	r3
	setColorRGB(0,0,0);
    321c:	2200      	movs	r2, #0
    321e:	2100      	movs	r1, #0
    3220:	2000      	movs	r0, #0
    3222:	4b15      	ldr	r3, [pc, #84]	; (3278 <InitLCD+0x23c>)
    3224:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    3226:	2200      	movs	r2, #0
    3228:	2100      	movs	r1, #0
    322a:	2000      	movs	r0, #0
    322c:	4b13      	ldr	r3, [pc, #76]	; (327c <InitLCD+0x240>)
    322e:	4798      	blx	r3
	fillRect(0,0,799,489);
    3230:	23ea      	movs	r3, #234	; 0xea
    3232:	33ff      	adds	r3, #255	; 0xff
    3234:	4a12      	ldr	r2, [pc, #72]	; (3280 <InitLCD+0x244>)
    3236:	2100      	movs	r1, #0
    3238:	2000      	movs	r0, #0
    323a:	4c12      	ldr	r4, [pc, #72]	; (3284 <InitLCD+0x248>)
    323c:	47a0      	blx	r4
}
    323e:	b002      	add	sp, #8
    3240:	bc04      	pop	{r2}
    3242:	4690      	mov	r8, r2
    3244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3246:	46c0      	nop			; (mov r8, r8)
    3248:	41004488 	.word	0x41004488
    324c:	0000ffff 	.word	0x0000ffff
    3250:	41004494 	.word	0x41004494
    3254:	41004498 	.word	0x41004498
    3258:	000009c5 	.word	0x000009c5
    325c:	00006e94 	.word	0x00006e94
    3260:	00006e04 	.word	0x00006e04
    3264:	00002ff1 	.word	0x00002ff1
    3268:	00006e4c 	.word	0x00006e4c
    326c:	00003021 	.word	0x00003021
    3270:	00006dd0 	.word	0x00006dd0
    3274:	00002f6d 	.word	0x00002f6d
    3278:	00002d89 	.word	0x00002d89
    327c:	00002db1 	.word	0x00002db1
    3280:	0000031f 	.word	0x0000031f
    3284:	00002ec5 	.word	0x00002ec5

00003288 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    3288:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    328a:	4c06      	ldr	r4, [pc, #24]	; (32a4 <usart_read_callback+0x1c>)
    328c:	2201      	movs	r2, #1
    328e:	0021      	movs	r1, r4
    3290:	4805      	ldr	r0, [pc, #20]	; (32a8 <usart_read_callback+0x20>)
    3292:	4b06      	ldr	r3, [pc, #24]	; (32ac <usart_read_callback+0x24>)
    3294:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    3296:	7821      	ldrb	r1, [r4, #0]
    3298:	4b05      	ldr	r3, [pc, #20]	; (32b0 <usart_read_callback+0x28>)
    329a:	6818      	ldr	r0, [r3, #0]
    329c:	4b05      	ldr	r3, [pc, #20]	; (32b4 <usart_read_callback+0x2c>)
    329e:	4798      	blx	r3
}
    32a0:	bd10      	pop	{r4, pc}
    32a2:	46c0      	nop			; (mov r8, r8)
    32a4:	20000ab4 	.word	0x20000ab4
    32a8:	200002f4 	.word	0x200002f4
    32ac:	00001865 	.word	0x00001865
    32b0:	200002c8 	.word	0x200002c8
    32b4:	00000141 	.word	0x00000141

000032b8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    32b8:	b570      	push	{r4, r5, r6, lr}
    32ba:	b082      	sub	sp, #8
    32bc:	0005      	movs	r5, r0
    32be:	000e      	movs	r6, r1
	uint16_t temp = 0;
    32c0:	2200      	movs	r2, #0
    32c2:	466b      	mov	r3, sp
    32c4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    32c6:	4c06      	ldr	r4, [pc, #24]	; (32e0 <usart_serial_getchar+0x28>)
    32c8:	466b      	mov	r3, sp
    32ca:	1d99      	adds	r1, r3, #6
    32cc:	0028      	movs	r0, r5
    32ce:	47a0      	blx	r4
    32d0:	2800      	cmp	r0, #0
    32d2:	d1f9      	bne.n	32c8 <usart_serial_getchar+0x10>

	*c = temp;
    32d4:	466b      	mov	r3, sp
    32d6:	3306      	adds	r3, #6
    32d8:	881b      	ldrh	r3, [r3, #0]
    32da:	7033      	strb	r3, [r6, #0]
}
    32dc:	b002      	add	sp, #8
    32de:	bd70      	pop	{r4, r5, r6, pc}
    32e0:	00001793 	.word	0x00001793

000032e4 <usart_serial_putchar>:
{
    32e4:	b570      	push	{r4, r5, r6, lr}
    32e6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    32e8:	b28c      	uxth	r4, r1
    32ea:	4e03      	ldr	r6, [pc, #12]	; (32f8 <usart_serial_putchar+0x14>)
    32ec:	0021      	movs	r1, r4
    32ee:	0028      	movs	r0, r5
    32f0:	47b0      	blx	r6
    32f2:	2800      	cmp	r0, #0
    32f4:	d1fa      	bne.n	32ec <usart_serial_putchar+0x8>
}
    32f6:	bd70      	pop	{r4, r5, r6, pc}
    32f8:	0000176d 	.word	0x0000176d

000032fc <SysTick_Handler>:
	ul_tickcount++;
    32fc:	4a02      	ldr	r2, [pc, #8]	; (3308 <SysTick_Handler+0xc>)
    32fe:	8813      	ldrh	r3, [r2, #0]
    3300:	3301      	adds	r3, #1
    3302:	8013      	strh	r3, [r2, #0]
}
    3304:	4770      	bx	lr
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	200002b0 	.word	0x200002b0

0000330c <conf_systick>:
{
    330c:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    330e:	4b0e      	ldr	r3, [pc, #56]	; (3348 <conf_systick+0x3c>)
    3310:	6818      	ldr	r0, [r3, #0]
    3312:	21fa      	movs	r1, #250	; 0xfa
    3314:	0089      	lsls	r1, r1, #2
    3316:	4b0d      	ldr	r3, [pc, #52]	; (334c <conf_systick+0x40>)
    3318:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    331a:	3801      	subs	r0, #1
    331c:	4b0c      	ldr	r3, [pc, #48]	; (3350 <conf_systick+0x44>)
    331e:	4298      	cmp	r0, r3
    3320:	d80d      	bhi.n	333e <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3322:	4a0c      	ldr	r2, [pc, #48]	; (3354 <conf_systick+0x48>)
    3324:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3326:	480c      	ldr	r0, [pc, #48]	; (3358 <conf_systick+0x4c>)
    3328:	6a03      	ldr	r3, [r0, #32]
    332a:	021b      	lsls	r3, r3, #8
    332c:	0a1b      	lsrs	r3, r3, #8
    332e:	21c0      	movs	r1, #192	; 0xc0
    3330:	0609      	lsls	r1, r1, #24
    3332:	430b      	orrs	r3, r1
    3334:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    3336:	2300      	movs	r3, #0
    3338:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    333a:	3307      	adds	r3, #7
    333c:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    333e:	2280      	movs	r2, #128	; 0x80
    3340:	0612      	lsls	r2, r2, #24
    3342:	4b06      	ldr	r3, [pc, #24]	; (335c <conf_systick+0x50>)
    3344:	601a      	str	r2, [r3, #0]
}
    3346:	bd10      	pop	{r4, pc}
    3348:	2000000c 	.word	0x2000000c
    334c:	000036d5 	.word	0x000036d5
    3350:	00ffffff 	.word	0x00ffffff
    3354:	e000e010 	.word	0xe000e010
    3358:	e000ed00 	.word	0xe000ed00
    335c:	e000e100 	.word	0xe000e100

00003360 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    3360:	b570      	push	{r4, r5, r6, lr}
    3362:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    3364:	2380      	movs	r3, #128	; 0x80
    3366:	05db      	lsls	r3, r3, #23
    3368:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    336a:	2300      	movs	r3, #0
    336c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    336e:	22ff      	movs	r2, #255	; 0xff
    3370:	4669      	mov	r1, sp
    3372:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3374:	2200      	movs	r2, #0
    3376:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3378:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    337a:	2196      	movs	r1, #150	; 0x96
    337c:	0189      	lsls	r1, r1, #6
    337e:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    3380:	2101      	movs	r1, #1
    3382:	2024      	movs	r0, #36	; 0x24
    3384:	466c      	mov	r4, sp
    3386:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    3388:	3001      	adds	r0, #1
    338a:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    338c:	3125      	adds	r1, #37	; 0x25
    338e:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    3390:	3101      	adds	r1, #1
    3392:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3394:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    3396:	3105      	adds	r1, #5
    3398:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    339a:	3101      	adds	r1, #1
    339c:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    339e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    33a0:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    33a2:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    33a4:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    33a6:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    33a8:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    33aa:	2313      	movs	r3, #19
    33ac:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    33ae:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    33b0:	2380      	movs	r3, #128	; 0x80
    33b2:	035b      	lsls	r3, r3, #13
    33b4:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    33b6:	4b1e      	ldr	r3, [pc, #120]	; (3430 <configure_usart+0xd0>)
    33b8:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    33ba:	4b1e      	ldr	r3, [pc, #120]	; (3434 <configure_usart+0xd4>)
    33bc:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    33be:	2301      	movs	r3, #1
    33c0:	425b      	negs	r3, r3
    33c2:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    33c4:	930f      	str	r3, [sp, #60]	; 0x3c
	
	
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    33c6:	4d1c      	ldr	r5, [pc, #112]	; (3438 <configure_usart+0xd8>)
    33c8:	4c1c      	ldr	r4, [pc, #112]	; (343c <configure_usart+0xdc>)
    33ca:	466a      	mov	r2, sp
    33cc:	491c      	ldr	r1, [pc, #112]	; (3440 <configure_usart+0xe0>)
    33ce:	0028      	movs	r0, r5
    33d0:	47a0      	blx	r4
    33d2:	2800      	cmp	r0, #0
    33d4:	d1f9      	bne.n	33ca <configure_usart+0x6a>
	stdio_base = (void *)module;
    33d6:	4c18      	ldr	r4, [pc, #96]	; (3438 <configure_usart+0xd8>)
    33d8:	4b1a      	ldr	r3, [pc, #104]	; (3444 <configure_usart+0xe4>)
    33da:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    33dc:	4a1a      	ldr	r2, [pc, #104]	; (3448 <configure_usart+0xe8>)
    33de:	4b1b      	ldr	r3, [pc, #108]	; (344c <configure_usart+0xec>)
    33e0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    33e2:	4a1b      	ldr	r2, [pc, #108]	; (3450 <configure_usart+0xf0>)
    33e4:	4b1b      	ldr	r3, [pc, #108]	; (3454 <configure_usart+0xf4>)
    33e6:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    33e8:	466a      	mov	r2, sp
    33ea:	4915      	ldr	r1, [pc, #84]	; (3440 <configure_usart+0xe0>)
    33ec:	0020      	movs	r0, r4
    33ee:	4b13      	ldr	r3, [pc, #76]	; (343c <configure_usart+0xdc>)
    33f0:	4798      	blx	r3
	setbuf(stdout, NULL);
    33f2:	4e19      	ldr	r6, [pc, #100]	; (3458 <configure_usart+0xf8>)
    33f4:	6833      	ldr	r3, [r6, #0]
    33f6:	6898      	ldr	r0, [r3, #8]
    33f8:	2100      	movs	r1, #0
    33fa:	4d18      	ldr	r5, [pc, #96]	; (345c <configure_usart+0xfc>)
    33fc:	47a8      	blx	r5
	setbuf(stdin, NULL);
    33fe:	6833      	ldr	r3, [r6, #0]
    3400:	6858      	ldr	r0, [r3, #4]
    3402:	2100      	movs	r1, #0
    3404:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    3406:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3408:	0028      	movs	r0, r5
    340a:	4b15      	ldr	r3, [pc, #84]	; (3460 <configure_usart+0x100>)
    340c:	4798      	blx	r3
    340e:	231f      	movs	r3, #31
    3410:	4018      	ands	r0, r3
    3412:	3b1e      	subs	r3, #30
    3414:	4083      	lsls	r3, r0
    3416:	4a13      	ldr	r2, [pc, #76]	; (3464 <configure_usart+0x104>)
    3418:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    341a:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    341c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    341e:	2b00      	cmp	r3, #0
    3420:	d1fc      	bne.n	341c <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3422:	682b      	ldr	r3, [r5, #0]
    3424:	2202      	movs	r2, #2
    3426:	4313      	orrs	r3, r2
    3428:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    342a:	b010      	add	sp, #64	; 0x40
    342c:	bd70      	pop	{r4, r5, r6, pc}
    342e:	46c0      	nop			; (mov r8, r8)
    3430:	00080003 	.word	0x00080003
    3434:	00090003 	.word	0x00090003
    3438:	200002f4 	.word	0x200002f4
    343c:	00001431 	.word	0x00001431
    3440:	42001000 	.word	0x42001000
    3444:	200002f0 	.word	0x200002f0
    3448:	000032e5 	.word	0x000032e5
    344c:	200002ec 	.word	0x200002ec
    3450:	000032b9 	.word	0x000032b9
    3454:	200002e8 	.word	0x200002e8
    3458:	20000164 	.word	0x20000164
    345c:	00003d39 	.word	0x00003d39
    3460:	000013a1 	.word	0x000013a1
    3464:	e000e100 	.word	0xe000e100

00003468 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    3468:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    346a:	4c06      	ldr	r4, [pc, #24]	; (3484 <configure_usart_callbacks+0x1c>)
    346c:	2201      	movs	r2, #1
    346e:	4906      	ldr	r1, [pc, #24]	; (3488 <configure_usart_callbacks+0x20>)
    3470:	0020      	movs	r0, r4
    3472:	4b06      	ldr	r3, [pc, #24]	; (348c <configure_usart_callbacks+0x24>)
    3474:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    3476:	2231      	movs	r2, #49	; 0x31
    3478:	5ca3      	ldrb	r3, [r4, r2]
    347a:	2102      	movs	r1, #2
    347c:	430b      	orrs	r3, r1
    347e:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    3480:	bd10      	pop	{r4, pc}
    3482:	46c0      	nop			; (mov r8, r8)
    3484:	200002f4 	.word	0x200002f4
    3488:	00003289 	.word	0x00003289
    348c:	0000184d 	.word	0x0000184d

00003490 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    3490:	b510      	push	{r4, lr}
    3492:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    3494:	4668      	mov	r0, sp
    3496:	4b16      	ldr	r3, [pc, #88]	; (34f0 <configure_adc+0x60>)
    3498:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    349a:	2301      	movs	r3, #1
    349c:	466a      	mov	r2, sp
    349e:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    34a0:	2380      	movs	r3, #128	; 0x80
    34a2:	009b      	lsls	r3, r3, #2
    34a4:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    34a6:	2300      	movs	r3, #0
    34a8:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    34aa:	3318      	adds	r3, #24
    34ac:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    34ae:	23c0      	movs	r3, #192	; 0xc0
    34b0:	015b      	lsls	r3, r3, #5
    34b2:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    34b4:	4c0f      	ldr	r4, [pc, #60]	; (34f4 <configure_adc+0x64>)
    34b6:	4910      	ldr	r1, [pc, #64]	; (34f8 <configure_adc+0x68>)
    34b8:	0020      	movs	r0, r4
    34ba:	4b10      	ldr	r3, [pc, #64]	; (34fc <configure_adc+0x6c>)
    34bc:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    34be:	6822      	ldr	r2, [r4, #0]
    34c0:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    34c2:	b25b      	sxtb	r3, r3
    34c4:	2b00      	cmp	r3, #0
    34c6:	dbfb      	blt.n	34c0 <configure_adc+0x30>
    34c8:	2180      	movs	r1, #128	; 0x80
    34ca:	0409      	lsls	r1, r1, #16
    34cc:	4b0c      	ldr	r3, [pc, #48]	; (3500 <configure_adc+0x70>)
    34ce:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    34d0:	230f      	movs	r3, #15
    34d2:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    34d4:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    34d6:	7813      	ldrb	r3, [r2, #0]
    34d8:	2102      	movs	r1, #2
    34da:	430b      	orrs	r3, r1
    34dc:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    34de:	4b05      	ldr	r3, [pc, #20]	; (34f4 <configure_adc+0x64>)
    34e0:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    34e2:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    34e4:	b25b      	sxtb	r3, r3
    34e6:	2b00      	cmp	r3, #0
    34e8:	dbfb      	blt.n	34e2 <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    34ea:	b00c      	add	sp, #48	; 0x30
    34ec:	bd10      	pop	{r4, pc}
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	00000a99 	.word	0x00000a99
    34f4:	20000ab8 	.word	0x20000ab8
    34f8:	42004000 	.word	0x42004000
    34fc:	00000add 	.word	0x00000add
    3500:	e000e100 	.word	0xe000e100

00003504 <setupBoard>:


void setupBoard(void)
{
    3504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    3506:	2000      	movs	r0, #0
    3508:	4b31      	ldr	r3, [pc, #196]	; (35d0 <setupBoard+0xcc>)
    350a:	4798      	blx	r3
    350c:	b287      	uxth	r7, r0
	

	system_init();
    350e:	4b31      	ldr	r3, [pc, #196]	; (35d4 <setupBoard+0xd0>)
    3510:	4798      	blx	r3
	
	configure_adc();
    3512:	4b31      	ldr	r3, [pc, #196]	; (35d8 <setupBoard+0xd4>)
    3514:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3516:	4b31      	ldr	r3, [pc, #196]	; (35dc <setupBoard+0xd8>)
    3518:	6819      	ldr	r1, [r3, #0]
    351a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    351c:	b25b      	sxtb	r3, r3
    351e:	2b00      	cmp	r3, #0
    3520:	dbfb      	blt.n	351a <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3522:	7b0b      	ldrb	r3, [r1, #12]
    3524:	2202      	movs	r2, #2
    3526:	4313      	orrs	r3, r2
    3528:	730b      	strb	r3, [r1, #12]
    352a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    352c:	b25b      	sxtb	r3, r3
    352e:	2b00      	cmp	r3, #0
    3530:	dbfb      	blt.n	352a <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3532:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3534:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    3536:	2502      	movs	r5, #2
    3538:	e001      	b.n	353e <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    353a:	4214      	tst	r4, r2
    353c:	d10a      	bne.n	3554 <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    353e:	7e0b      	ldrb	r3, [r1, #24]
    3540:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3542:	0022      	movs	r2, r4
    3544:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    3546:	421e      	tst	r6, r3
    3548:	d000      	beq.n	354c <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    354a:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    354c:	421d      	tst	r5, r3
    354e:	d0f4      	beq.n	353a <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    3550:	4332      	orrs	r2, r6
    3552:	e7f2      	b.n	353a <setupBoard+0x36>
    3554:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    3556:	b25b      	sxtb	r3, r3
    3558:	2b00      	cmp	r3, #0
    355a:	dbfb      	blt.n	3554 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    355c:	8b48      	ldrh	r0, [r1, #26]
    355e:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    3560:	2301      	movs	r3, #1
    3562:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3564:	7e0a      	ldrb	r2, [r1, #24]
    3566:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3568:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    356a:	0754      	lsls	r4, r2, #29
    356c:	d501      	bpl.n	3572 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    356e:	2402      	movs	r4, #2
    3570:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    3572:	0792      	lsls	r2, r2, #30
    3574:	d501      	bpl.n	357a <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    3576:	2204      	movs	r2, #4
    3578:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    357a:	075b      	lsls	r3, r3, #29
    357c:	d501      	bpl.n	3582 <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    357e:	2302      	movs	r3, #2
    3580:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    3582:	4078      	eors	r0, r7
    3584:	4b16      	ldr	r3, [pc, #88]	; (35e0 <setupBoard+0xdc>)
    3586:	4798      	blx	r3
	
	delay_init();
    3588:	4b16      	ldr	r3, [pc, #88]	; (35e4 <setupBoard+0xe0>)
    358a:	4798      	blx	r3
	
	conf_systick();
    358c:	4c16      	ldr	r4, [pc, #88]	; (35e8 <setupBoard+0xe4>)
    358e:	47a0      	blx	r4

	//configure_usart_USB();
	
	configure_usart();
    3590:	4b16      	ldr	r3, [pc, #88]	; (35ec <setupBoard+0xe8>)
    3592:	4798      	blx	r3
	configure_usart_callbacks();
    3594:	4b16      	ldr	r3, [pc, #88]	; (35f0 <setupBoard+0xec>)
    3596:	4798      	blx	r3
	cpu_irq_enable();
    3598:	2201      	movs	r2, #1
    359a:	4b16      	ldr	r3, [pc, #88]	; (35f4 <setupBoard+0xf0>)
    359c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    359e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    35a2:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    35a4:	4914      	ldr	r1, [pc, #80]	; (35f8 <setupBoard+0xf4>)
    35a6:	4815      	ldr	r0, [pc, #84]	; (35fc <setupBoard+0xf8>)
    35a8:	4b15      	ldr	r3, [pc, #84]	; (3600 <setupBoard+0xfc>)
    35aa:	4798      	blx	r3

	printf("\n\rSerial OK 9600 8N1\n\r");
    35ac:	4815      	ldr	r0, [pc, #84]	; (3604 <setupBoard+0x100>)
    35ae:	4b16      	ldr	r3, [pc, #88]	; (3608 <setupBoard+0x104>)
    35b0:	4798      	blx	r3

	
	InitLCD();
    35b2:	4b16      	ldr	r3, [pc, #88]	; (360c <setupBoard+0x108>)
    35b4:	4798      	blx	r3
	splashScreen();
    35b6:	4b16      	ldr	r3, [pc, #88]	; (3610 <setupBoard+0x10c>)
    35b8:	4798      	blx	r3
			
	conf_systick();
    35ba:	47a0      	blx	r4

	xCharPos=0;
    35bc:	2300      	movs	r3, #0
    35be:	4a15      	ldr	r2, [pc, #84]	; (3614 <setupBoard+0x110>)
    35c0:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    35c2:	4a15      	ldr	r2, [pc, #84]	; (3618 <setupBoard+0x114>)
    35c4:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    35c6:	20ff      	movs	r0, #255	; 0xff
    35c8:	4b14      	ldr	r3, [pc, #80]	; (361c <setupBoard+0x118>)
    35ca:	4798      	blx	r3
}
    35cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35ce:	46c0      	nop			; (mov r8, r8)
    35d0:	00001f45 	.word	0x00001f45
    35d4:	00002189 	.word	0x00002189
    35d8:	00003491 	.word	0x00003491
    35dc:	20000ab8 	.word	0x20000ab8
    35e0:	00003c41 	.word	0x00003c41
    35e4:	00000985 	.word	0x00000985
    35e8:	0000330d 	.word	0x0000330d
    35ec:	00003361 	.word	0x00003361
    35f0:	00003469 	.word	0x00003469
    35f4:	20000008 	.word	0x20000008
    35f8:	20000ab4 	.word	0x20000ab4
    35fc:	200002f4 	.word	0x200002f4
    3600:	00001865 	.word	0x00001865
    3604:	00006edc 	.word	0x00006edc
    3608:	00003be5 	.word	0x00003be5
    360c:	0000303d 	.word	0x0000303d
    3610:	0000074d 	.word	0x0000074d
    3614:	200002a8 	.word	0x200002a8
    3618:	200002aa 	.word	0x200002aa
    361c:	0000236d 	.word	0x0000236d

00003620 <main>:
{
    3620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    3622:	4b20      	ldr	r3, [pc, #128]	; (36a4 <main+0x84>)
    3624:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    3626:	200a      	movs	r0, #10
    3628:	4b1f      	ldr	r3, [pc, #124]	; (36a8 <main+0x88>)
    362a:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    362c:	210a      	movs	r1, #10
    362e:	4b1f      	ldr	r3, [pc, #124]	; (36ac <main+0x8c>)
    3630:	4798      	blx	r3
    3632:	4b1f      	ldr	r3, [pc, #124]	; (36b0 <main+0x90>)
    3634:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    3636:	4f1f      	ldr	r7, [pc, #124]	; (36b4 <main+0x94>)
    3638:	4e1f      	ldr	r6, [pc, #124]	; (36b8 <main+0x98>)
    363a:	4d20      	ldr	r5, [pc, #128]	; (36bc <main+0x9c>)
    363c:	e015      	b.n	366a <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    363e:	21c8      	movs	r1, #200	; 0xc8
    3640:	0020      	movs	r0, r4
    3642:	4b1d      	ldr	r3, [pc, #116]	; (36b8 <main+0x98>)
    3644:	4798      	blx	r3
    3646:	b289      	uxth	r1, r1
    3648:	2900      	cmp	r1, #0
    364a:	d10e      	bne.n	366a <main+0x4a>
    364c:	4b1c      	ldr	r3, [pc, #112]	; (36c0 <main+0xa0>)
    364e:	781b      	ldrb	r3, [r3, #0]
    3650:	2b00      	cmp	r3, #0
    3652:	d10a      	bne.n	366a <main+0x4a>
			funcLock = true;
    3654:	4c1a      	ldr	r4, [pc, #104]	; (36c0 <main+0xa0>)
    3656:	2301      	movs	r3, #1
    3658:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    365a:	4b1a      	ldr	r3, [pc, #104]	; (36c4 <main+0xa4>)
    365c:	4798      	blx	r3
			printKeyboardBuffer();
    365e:	4b1a      	ldr	r3, [pc, #104]	; (36c8 <main+0xa8>)
    3660:	4798      	blx	r3
			parseRXBuffer();
    3662:	4b1a      	ldr	r3, [pc, #104]	; (36cc <main+0xac>)
    3664:	4798      	blx	r3
			funcLock = false;
    3666:	2300      	movs	r3, #0
    3668:	7023      	strb	r3, [r4, #0]
		__WFI();
    366a:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    366c:	883c      	ldrh	r4, [r7, #0]
    366e:	0029      	movs	r1, r5
    3670:	0020      	movs	r0, r4
    3672:	47b0      	blx	r6
    3674:	b289      	uxth	r1, r1
    3676:	2900      	cmp	r1, #0
    3678:	d1e1      	bne.n	363e <main+0x1e>
    367a:	4b11      	ldr	r3, [pc, #68]	; (36c0 <main+0xa0>)
    367c:	781b      	ldrb	r3, [r3, #0]
    367e:	2b00      	cmp	r3, #0
    3680:	d1f3      	bne.n	366a <main+0x4a>
			funcLock = true;
    3682:	4c0f      	ldr	r4, [pc, #60]	; (36c0 <main+0xa0>)
    3684:	3301      	adds	r3, #1
    3686:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    3688:	4b11      	ldr	r3, [pc, #68]	; (36d0 <main+0xb0>)
    368a:	4798      	blx	r3
			funcLock = false;
    368c:	2300      	movs	r3, #0
    368e:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3690:	4b08      	ldr	r3, [pc, #32]	; (36b4 <main+0x94>)
    3692:	8818      	ldrh	r0, [r3, #0]
    3694:	21c8      	movs	r1, #200	; 0xc8
    3696:	4b08      	ldr	r3, [pc, #32]	; (36b8 <main+0x98>)
    3698:	4798      	blx	r3
    369a:	b289      	uxth	r1, r1
    369c:	2900      	cmp	r1, #0
    369e:	d0d9      	beq.n	3654 <main+0x34>
    36a0:	e7e3      	b.n	366a <main+0x4a>
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	00003505 	.word	0x00003505
    36a8:	00003a5d 	.word	0x00003a5d
    36ac:	00000115 	.word	0x00000115
    36b0:	200002c8 	.word	0x200002c8
    36b4:	200002b0 	.word	0x200002b0
    36b8:	000037e1 	.word	0x000037e1
    36bc:	00003fff 	.word	0x00003fff
    36c0:	200002ae 	.word	0x200002ae
    36c4:	00002b89 	.word	0x00002b89
    36c8:	00002845 	.word	0x00002845
    36cc:	00000931 	.word	0x00000931
    36d0:	00002455 	.word	0x00002455

000036d4 <__udivsi3>:
    36d4:	2200      	movs	r2, #0
    36d6:	0843      	lsrs	r3, r0, #1
    36d8:	428b      	cmp	r3, r1
    36da:	d374      	bcc.n	37c6 <__udivsi3+0xf2>
    36dc:	0903      	lsrs	r3, r0, #4
    36de:	428b      	cmp	r3, r1
    36e0:	d35f      	bcc.n	37a2 <__udivsi3+0xce>
    36e2:	0a03      	lsrs	r3, r0, #8
    36e4:	428b      	cmp	r3, r1
    36e6:	d344      	bcc.n	3772 <__udivsi3+0x9e>
    36e8:	0b03      	lsrs	r3, r0, #12
    36ea:	428b      	cmp	r3, r1
    36ec:	d328      	bcc.n	3740 <__udivsi3+0x6c>
    36ee:	0c03      	lsrs	r3, r0, #16
    36f0:	428b      	cmp	r3, r1
    36f2:	d30d      	bcc.n	3710 <__udivsi3+0x3c>
    36f4:	22ff      	movs	r2, #255	; 0xff
    36f6:	0209      	lsls	r1, r1, #8
    36f8:	ba12      	rev	r2, r2
    36fa:	0c03      	lsrs	r3, r0, #16
    36fc:	428b      	cmp	r3, r1
    36fe:	d302      	bcc.n	3706 <__udivsi3+0x32>
    3700:	1212      	asrs	r2, r2, #8
    3702:	0209      	lsls	r1, r1, #8
    3704:	d065      	beq.n	37d2 <__udivsi3+0xfe>
    3706:	0b03      	lsrs	r3, r0, #12
    3708:	428b      	cmp	r3, r1
    370a:	d319      	bcc.n	3740 <__udivsi3+0x6c>
    370c:	e000      	b.n	3710 <__udivsi3+0x3c>
    370e:	0a09      	lsrs	r1, r1, #8
    3710:	0bc3      	lsrs	r3, r0, #15
    3712:	428b      	cmp	r3, r1
    3714:	d301      	bcc.n	371a <__udivsi3+0x46>
    3716:	03cb      	lsls	r3, r1, #15
    3718:	1ac0      	subs	r0, r0, r3
    371a:	4152      	adcs	r2, r2
    371c:	0b83      	lsrs	r3, r0, #14
    371e:	428b      	cmp	r3, r1
    3720:	d301      	bcc.n	3726 <__udivsi3+0x52>
    3722:	038b      	lsls	r3, r1, #14
    3724:	1ac0      	subs	r0, r0, r3
    3726:	4152      	adcs	r2, r2
    3728:	0b43      	lsrs	r3, r0, #13
    372a:	428b      	cmp	r3, r1
    372c:	d301      	bcc.n	3732 <__udivsi3+0x5e>
    372e:	034b      	lsls	r3, r1, #13
    3730:	1ac0      	subs	r0, r0, r3
    3732:	4152      	adcs	r2, r2
    3734:	0b03      	lsrs	r3, r0, #12
    3736:	428b      	cmp	r3, r1
    3738:	d301      	bcc.n	373e <__udivsi3+0x6a>
    373a:	030b      	lsls	r3, r1, #12
    373c:	1ac0      	subs	r0, r0, r3
    373e:	4152      	adcs	r2, r2
    3740:	0ac3      	lsrs	r3, r0, #11
    3742:	428b      	cmp	r3, r1
    3744:	d301      	bcc.n	374a <__udivsi3+0x76>
    3746:	02cb      	lsls	r3, r1, #11
    3748:	1ac0      	subs	r0, r0, r3
    374a:	4152      	adcs	r2, r2
    374c:	0a83      	lsrs	r3, r0, #10
    374e:	428b      	cmp	r3, r1
    3750:	d301      	bcc.n	3756 <__udivsi3+0x82>
    3752:	028b      	lsls	r3, r1, #10
    3754:	1ac0      	subs	r0, r0, r3
    3756:	4152      	adcs	r2, r2
    3758:	0a43      	lsrs	r3, r0, #9
    375a:	428b      	cmp	r3, r1
    375c:	d301      	bcc.n	3762 <__udivsi3+0x8e>
    375e:	024b      	lsls	r3, r1, #9
    3760:	1ac0      	subs	r0, r0, r3
    3762:	4152      	adcs	r2, r2
    3764:	0a03      	lsrs	r3, r0, #8
    3766:	428b      	cmp	r3, r1
    3768:	d301      	bcc.n	376e <__udivsi3+0x9a>
    376a:	020b      	lsls	r3, r1, #8
    376c:	1ac0      	subs	r0, r0, r3
    376e:	4152      	adcs	r2, r2
    3770:	d2cd      	bcs.n	370e <__udivsi3+0x3a>
    3772:	09c3      	lsrs	r3, r0, #7
    3774:	428b      	cmp	r3, r1
    3776:	d301      	bcc.n	377c <__udivsi3+0xa8>
    3778:	01cb      	lsls	r3, r1, #7
    377a:	1ac0      	subs	r0, r0, r3
    377c:	4152      	adcs	r2, r2
    377e:	0983      	lsrs	r3, r0, #6
    3780:	428b      	cmp	r3, r1
    3782:	d301      	bcc.n	3788 <__udivsi3+0xb4>
    3784:	018b      	lsls	r3, r1, #6
    3786:	1ac0      	subs	r0, r0, r3
    3788:	4152      	adcs	r2, r2
    378a:	0943      	lsrs	r3, r0, #5
    378c:	428b      	cmp	r3, r1
    378e:	d301      	bcc.n	3794 <__udivsi3+0xc0>
    3790:	014b      	lsls	r3, r1, #5
    3792:	1ac0      	subs	r0, r0, r3
    3794:	4152      	adcs	r2, r2
    3796:	0903      	lsrs	r3, r0, #4
    3798:	428b      	cmp	r3, r1
    379a:	d301      	bcc.n	37a0 <__udivsi3+0xcc>
    379c:	010b      	lsls	r3, r1, #4
    379e:	1ac0      	subs	r0, r0, r3
    37a0:	4152      	adcs	r2, r2
    37a2:	08c3      	lsrs	r3, r0, #3
    37a4:	428b      	cmp	r3, r1
    37a6:	d301      	bcc.n	37ac <__udivsi3+0xd8>
    37a8:	00cb      	lsls	r3, r1, #3
    37aa:	1ac0      	subs	r0, r0, r3
    37ac:	4152      	adcs	r2, r2
    37ae:	0883      	lsrs	r3, r0, #2
    37b0:	428b      	cmp	r3, r1
    37b2:	d301      	bcc.n	37b8 <__udivsi3+0xe4>
    37b4:	008b      	lsls	r3, r1, #2
    37b6:	1ac0      	subs	r0, r0, r3
    37b8:	4152      	adcs	r2, r2
    37ba:	0843      	lsrs	r3, r0, #1
    37bc:	428b      	cmp	r3, r1
    37be:	d301      	bcc.n	37c4 <__udivsi3+0xf0>
    37c0:	004b      	lsls	r3, r1, #1
    37c2:	1ac0      	subs	r0, r0, r3
    37c4:	4152      	adcs	r2, r2
    37c6:	1a41      	subs	r1, r0, r1
    37c8:	d200      	bcs.n	37cc <__udivsi3+0xf8>
    37ca:	4601      	mov	r1, r0
    37cc:	4152      	adcs	r2, r2
    37ce:	4610      	mov	r0, r2
    37d0:	4770      	bx	lr
    37d2:	e7ff      	b.n	37d4 <__udivsi3+0x100>
    37d4:	b501      	push	{r0, lr}
    37d6:	2000      	movs	r0, #0
    37d8:	f000 f8f0 	bl	39bc <__aeabi_idiv0>
    37dc:	bd02      	pop	{r1, pc}
    37de:	46c0      	nop			; (mov r8, r8)

000037e0 <__aeabi_uidivmod>:
    37e0:	2900      	cmp	r1, #0
    37e2:	d0f7      	beq.n	37d4 <__udivsi3+0x100>
    37e4:	e776      	b.n	36d4 <__udivsi3>
    37e6:	4770      	bx	lr

000037e8 <__divsi3>:
    37e8:	4603      	mov	r3, r0
    37ea:	430b      	orrs	r3, r1
    37ec:	d47f      	bmi.n	38ee <__divsi3+0x106>
    37ee:	2200      	movs	r2, #0
    37f0:	0843      	lsrs	r3, r0, #1
    37f2:	428b      	cmp	r3, r1
    37f4:	d374      	bcc.n	38e0 <__divsi3+0xf8>
    37f6:	0903      	lsrs	r3, r0, #4
    37f8:	428b      	cmp	r3, r1
    37fa:	d35f      	bcc.n	38bc <__divsi3+0xd4>
    37fc:	0a03      	lsrs	r3, r0, #8
    37fe:	428b      	cmp	r3, r1
    3800:	d344      	bcc.n	388c <__divsi3+0xa4>
    3802:	0b03      	lsrs	r3, r0, #12
    3804:	428b      	cmp	r3, r1
    3806:	d328      	bcc.n	385a <__divsi3+0x72>
    3808:	0c03      	lsrs	r3, r0, #16
    380a:	428b      	cmp	r3, r1
    380c:	d30d      	bcc.n	382a <__divsi3+0x42>
    380e:	22ff      	movs	r2, #255	; 0xff
    3810:	0209      	lsls	r1, r1, #8
    3812:	ba12      	rev	r2, r2
    3814:	0c03      	lsrs	r3, r0, #16
    3816:	428b      	cmp	r3, r1
    3818:	d302      	bcc.n	3820 <__divsi3+0x38>
    381a:	1212      	asrs	r2, r2, #8
    381c:	0209      	lsls	r1, r1, #8
    381e:	d065      	beq.n	38ec <__divsi3+0x104>
    3820:	0b03      	lsrs	r3, r0, #12
    3822:	428b      	cmp	r3, r1
    3824:	d319      	bcc.n	385a <__divsi3+0x72>
    3826:	e000      	b.n	382a <__divsi3+0x42>
    3828:	0a09      	lsrs	r1, r1, #8
    382a:	0bc3      	lsrs	r3, r0, #15
    382c:	428b      	cmp	r3, r1
    382e:	d301      	bcc.n	3834 <__divsi3+0x4c>
    3830:	03cb      	lsls	r3, r1, #15
    3832:	1ac0      	subs	r0, r0, r3
    3834:	4152      	adcs	r2, r2
    3836:	0b83      	lsrs	r3, r0, #14
    3838:	428b      	cmp	r3, r1
    383a:	d301      	bcc.n	3840 <__divsi3+0x58>
    383c:	038b      	lsls	r3, r1, #14
    383e:	1ac0      	subs	r0, r0, r3
    3840:	4152      	adcs	r2, r2
    3842:	0b43      	lsrs	r3, r0, #13
    3844:	428b      	cmp	r3, r1
    3846:	d301      	bcc.n	384c <__divsi3+0x64>
    3848:	034b      	lsls	r3, r1, #13
    384a:	1ac0      	subs	r0, r0, r3
    384c:	4152      	adcs	r2, r2
    384e:	0b03      	lsrs	r3, r0, #12
    3850:	428b      	cmp	r3, r1
    3852:	d301      	bcc.n	3858 <__divsi3+0x70>
    3854:	030b      	lsls	r3, r1, #12
    3856:	1ac0      	subs	r0, r0, r3
    3858:	4152      	adcs	r2, r2
    385a:	0ac3      	lsrs	r3, r0, #11
    385c:	428b      	cmp	r3, r1
    385e:	d301      	bcc.n	3864 <__divsi3+0x7c>
    3860:	02cb      	lsls	r3, r1, #11
    3862:	1ac0      	subs	r0, r0, r3
    3864:	4152      	adcs	r2, r2
    3866:	0a83      	lsrs	r3, r0, #10
    3868:	428b      	cmp	r3, r1
    386a:	d301      	bcc.n	3870 <__divsi3+0x88>
    386c:	028b      	lsls	r3, r1, #10
    386e:	1ac0      	subs	r0, r0, r3
    3870:	4152      	adcs	r2, r2
    3872:	0a43      	lsrs	r3, r0, #9
    3874:	428b      	cmp	r3, r1
    3876:	d301      	bcc.n	387c <__divsi3+0x94>
    3878:	024b      	lsls	r3, r1, #9
    387a:	1ac0      	subs	r0, r0, r3
    387c:	4152      	adcs	r2, r2
    387e:	0a03      	lsrs	r3, r0, #8
    3880:	428b      	cmp	r3, r1
    3882:	d301      	bcc.n	3888 <__divsi3+0xa0>
    3884:	020b      	lsls	r3, r1, #8
    3886:	1ac0      	subs	r0, r0, r3
    3888:	4152      	adcs	r2, r2
    388a:	d2cd      	bcs.n	3828 <__divsi3+0x40>
    388c:	09c3      	lsrs	r3, r0, #7
    388e:	428b      	cmp	r3, r1
    3890:	d301      	bcc.n	3896 <__divsi3+0xae>
    3892:	01cb      	lsls	r3, r1, #7
    3894:	1ac0      	subs	r0, r0, r3
    3896:	4152      	adcs	r2, r2
    3898:	0983      	lsrs	r3, r0, #6
    389a:	428b      	cmp	r3, r1
    389c:	d301      	bcc.n	38a2 <__divsi3+0xba>
    389e:	018b      	lsls	r3, r1, #6
    38a0:	1ac0      	subs	r0, r0, r3
    38a2:	4152      	adcs	r2, r2
    38a4:	0943      	lsrs	r3, r0, #5
    38a6:	428b      	cmp	r3, r1
    38a8:	d301      	bcc.n	38ae <__divsi3+0xc6>
    38aa:	014b      	lsls	r3, r1, #5
    38ac:	1ac0      	subs	r0, r0, r3
    38ae:	4152      	adcs	r2, r2
    38b0:	0903      	lsrs	r3, r0, #4
    38b2:	428b      	cmp	r3, r1
    38b4:	d301      	bcc.n	38ba <__divsi3+0xd2>
    38b6:	010b      	lsls	r3, r1, #4
    38b8:	1ac0      	subs	r0, r0, r3
    38ba:	4152      	adcs	r2, r2
    38bc:	08c3      	lsrs	r3, r0, #3
    38be:	428b      	cmp	r3, r1
    38c0:	d301      	bcc.n	38c6 <__divsi3+0xde>
    38c2:	00cb      	lsls	r3, r1, #3
    38c4:	1ac0      	subs	r0, r0, r3
    38c6:	4152      	adcs	r2, r2
    38c8:	0883      	lsrs	r3, r0, #2
    38ca:	428b      	cmp	r3, r1
    38cc:	d301      	bcc.n	38d2 <__divsi3+0xea>
    38ce:	008b      	lsls	r3, r1, #2
    38d0:	1ac0      	subs	r0, r0, r3
    38d2:	4152      	adcs	r2, r2
    38d4:	0843      	lsrs	r3, r0, #1
    38d6:	428b      	cmp	r3, r1
    38d8:	d301      	bcc.n	38de <__divsi3+0xf6>
    38da:	004b      	lsls	r3, r1, #1
    38dc:	1ac0      	subs	r0, r0, r3
    38de:	4152      	adcs	r2, r2
    38e0:	1a41      	subs	r1, r0, r1
    38e2:	d200      	bcs.n	38e6 <__divsi3+0xfe>
    38e4:	4601      	mov	r1, r0
    38e6:	4152      	adcs	r2, r2
    38e8:	4610      	mov	r0, r2
    38ea:	4770      	bx	lr
    38ec:	e05d      	b.n	39aa <__divsi3+0x1c2>
    38ee:	0fca      	lsrs	r2, r1, #31
    38f0:	d000      	beq.n	38f4 <__divsi3+0x10c>
    38f2:	4249      	negs	r1, r1
    38f4:	1003      	asrs	r3, r0, #32
    38f6:	d300      	bcc.n	38fa <__divsi3+0x112>
    38f8:	4240      	negs	r0, r0
    38fa:	4053      	eors	r3, r2
    38fc:	2200      	movs	r2, #0
    38fe:	469c      	mov	ip, r3
    3900:	0903      	lsrs	r3, r0, #4
    3902:	428b      	cmp	r3, r1
    3904:	d32d      	bcc.n	3962 <__divsi3+0x17a>
    3906:	0a03      	lsrs	r3, r0, #8
    3908:	428b      	cmp	r3, r1
    390a:	d312      	bcc.n	3932 <__divsi3+0x14a>
    390c:	22fc      	movs	r2, #252	; 0xfc
    390e:	0189      	lsls	r1, r1, #6
    3910:	ba12      	rev	r2, r2
    3912:	0a03      	lsrs	r3, r0, #8
    3914:	428b      	cmp	r3, r1
    3916:	d30c      	bcc.n	3932 <__divsi3+0x14a>
    3918:	0189      	lsls	r1, r1, #6
    391a:	1192      	asrs	r2, r2, #6
    391c:	428b      	cmp	r3, r1
    391e:	d308      	bcc.n	3932 <__divsi3+0x14a>
    3920:	0189      	lsls	r1, r1, #6
    3922:	1192      	asrs	r2, r2, #6
    3924:	428b      	cmp	r3, r1
    3926:	d304      	bcc.n	3932 <__divsi3+0x14a>
    3928:	0189      	lsls	r1, r1, #6
    392a:	d03a      	beq.n	39a2 <__divsi3+0x1ba>
    392c:	1192      	asrs	r2, r2, #6
    392e:	e000      	b.n	3932 <__divsi3+0x14a>
    3930:	0989      	lsrs	r1, r1, #6
    3932:	09c3      	lsrs	r3, r0, #7
    3934:	428b      	cmp	r3, r1
    3936:	d301      	bcc.n	393c <__divsi3+0x154>
    3938:	01cb      	lsls	r3, r1, #7
    393a:	1ac0      	subs	r0, r0, r3
    393c:	4152      	adcs	r2, r2
    393e:	0983      	lsrs	r3, r0, #6
    3940:	428b      	cmp	r3, r1
    3942:	d301      	bcc.n	3948 <__divsi3+0x160>
    3944:	018b      	lsls	r3, r1, #6
    3946:	1ac0      	subs	r0, r0, r3
    3948:	4152      	adcs	r2, r2
    394a:	0943      	lsrs	r3, r0, #5
    394c:	428b      	cmp	r3, r1
    394e:	d301      	bcc.n	3954 <__divsi3+0x16c>
    3950:	014b      	lsls	r3, r1, #5
    3952:	1ac0      	subs	r0, r0, r3
    3954:	4152      	adcs	r2, r2
    3956:	0903      	lsrs	r3, r0, #4
    3958:	428b      	cmp	r3, r1
    395a:	d301      	bcc.n	3960 <__divsi3+0x178>
    395c:	010b      	lsls	r3, r1, #4
    395e:	1ac0      	subs	r0, r0, r3
    3960:	4152      	adcs	r2, r2
    3962:	08c3      	lsrs	r3, r0, #3
    3964:	428b      	cmp	r3, r1
    3966:	d301      	bcc.n	396c <__divsi3+0x184>
    3968:	00cb      	lsls	r3, r1, #3
    396a:	1ac0      	subs	r0, r0, r3
    396c:	4152      	adcs	r2, r2
    396e:	0883      	lsrs	r3, r0, #2
    3970:	428b      	cmp	r3, r1
    3972:	d301      	bcc.n	3978 <__divsi3+0x190>
    3974:	008b      	lsls	r3, r1, #2
    3976:	1ac0      	subs	r0, r0, r3
    3978:	4152      	adcs	r2, r2
    397a:	d2d9      	bcs.n	3930 <__divsi3+0x148>
    397c:	0843      	lsrs	r3, r0, #1
    397e:	428b      	cmp	r3, r1
    3980:	d301      	bcc.n	3986 <__divsi3+0x19e>
    3982:	004b      	lsls	r3, r1, #1
    3984:	1ac0      	subs	r0, r0, r3
    3986:	4152      	adcs	r2, r2
    3988:	1a41      	subs	r1, r0, r1
    398a:	d200      	bcs.n	398e <__divsi3+0x1a6>
    398c:	4601      	mov	r1, r0
    398e:	4663      	mov	r3, ip
    3990:	4152      	adcs	r2, r2
    3992:	105b      	asrs	r3, r3, #1
    3994:	4610      	mov	r0, r2
    3996:	d301      	bcc.n	399c <__divsi3+0x1b4>
    3998:	4240      	negs	r0, r0
    399a:	2b00      	cmp	r3, #0
    399c:	d500      	bpl.n	39a0 <__divsi3+0x1b8>
    399e:	4249      	negs	r1, r1
    39a0:	4770      	bx	lr
    39a2:	4663      	mov	r3, ip
    39a4:	105b      	asrs	r3, r3, #1
    39a6:	d300      	bcc.n	39aa <__divsi3+0x1c2>
    39a8:	4240      	negs	r0, r0
    39aa:	b501      	push	{r0, lr}
    39ac:	2000      	movs	r0, #0
    39ae:	f000 f805 	bl	39bc <__aeabi_idiv0>
    39b2:	bd02      	pop	{r1, pc}

000039b4 <__aeabi_idivmod>:
    39b4:	2900      	cmp	r1, #0
    39b6:	d0f8      	beq.n	39aa <__divsi3+0x1c2>
    39b8:	e716      	b.n	37e8 <__divsi3>
    39ba:	4770      	bx	lr

000039bc <__aeabi_idiv0>:
    39bc:	4770      	bx	lr
    39be:	46c0      	nop			; (mov r8, r8)

000039c0 <__aeabi_lmul>:
    39c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39c2:	46ce      	mov	lr, r9
    39c4:	4647      	mov	r7, r8
    39c6:	0415      	lsls	r5, r2, #16
    39c8:	0c2d      	lsrs	r5, r5, #16
    39ca:	002e      	movs	r6, r5
    39cc:	b580      	push	{r7, lr}
    39ce:	0407      	lsls	r7, r0, #16
    39d0:	0c14      	lsrs	r4, r2, #16
    39d2:	0c3f      	lsrs	r7, r7, #16
    39d4:	4699      	mov	r9, r3
    39d6:	0c03      	lsrs	r3, r0, #16
    39d8:	437e      	muls	r6, r7
    39da:	435d      	muls	r5, r3
    39dc:	4367      	muls	r7, r4
    39de:	4363      	muls	r3, r4
    39e0:	197f      	adds	r7, r7, r5
    39e2:	0c34      	lsrs	r4, r6, #16
    39e4:	19e4      	adds	r4, r4, r7
    39e6:	469c      	mov	ip, r3
    39e8:	42a5      	cmp	r5, r4
    39ea:	d903      	bls.n	39f4 <__aeabi_lmul+0x34>
    39ec:	2380      	movs	r3, #128	; 0x80
    39ee:	025b      	lsls	r3, r3, #9
    39f0:	4698      	mov	r8, r3
    39f2:	44c4      	add	ip, r8
    39f4:	464b      	mov	r3, r9
    39f6:	4351      	muls	r1, r2
    39f8:	4343      	muls	r3, r0
    39fa:	0436      	lsls	r6, r6, #16
    39fc:	0c36      	lsrs	r6, r6, #16
    39fe:	0c25      	lsrs	r5, r4, #16
    3a00:	0424      	lsls	r4, r4, #16
    3a02:	4465      	add	r5, ip
    3a04:	19a4      	adds	r4, r4, r6
    3a06:	1859      	adds	r1, r3, r1
    3a08:	1949      	adds	r1, r1, r5
    3a0a:	0020      	movs	r0, r4
    3a0c:	bc0c      	pop	{r2, r3}
    3a0e:	4690      	mov	r8, r2
    3a10:	4699      	mov	r9, r3
    3a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003a14 <__libc_init_array>:
    3a14:	b570      	push	{r4, r5, r6, lr}
    3a16:	2600      	movs	r6, #0
    3a18:	4d0c      	ldr	r5, [pc, #48]	; (3a4c <__libc_init_array+0x38>)
    3a1a:	4c0d      	ldr	r4, [pc, #52]	; (3a50 <__libc_init_array+0x3c>)
    3a1c:	1b64      	subs	r4, r4, r5
    3a1e:	10a4      	asrs	r4, r4, #2
    3a20:	42a6      	cmp	r6, r4
    3a22:	d109      	bne.n	3a38 <__libc_init_array+0x24>
    3a24:	2600      	movs	r6, #0
    3a26:	f003 fab1 	bl	6f8c <_init>
    3a2a:	4d0a      	ldr	r5, [pc, #40]	; (3a54 <__libc_init_array+0x40>)
    3a2c:	4c0a      	ldr	r4, [pc, #40]	; (3a58 <__libc_init_array+0x44>)
    3a2e:	1b64      	subs	r4, r4, r5
    3a30:	10a4      	asrs	r4, r4, #2
    3a32:	42a6      	cmp	r6, r4
    3a34:	d105      	bne.n	3a42 <__libc_init_array+0x2e>
    3a36:	bd70      	pop	{r4, r5, r6, pc}
    3a38:	00b3      	lsls	r3, r6, #2
    3a3a:	58eb      	ldr	r3, [r5, r3]
    3a3c:	4798      	blx	r3
    3a3e:	3601      	adds	r6, #1
    3a40:	e7ee      	b.n	3a20 <__libc_init_array+0xc>
    3a42:	00b3      	lsls	r3, r6, #2
    3a44:	58eb      	ldr	r3, [r5, r3]
    3a46:	4798      	blx	r3
    3a48:	3601      	adds	r6, #1
    3a4a:	e7f2      	b.n	3a32 <__libc_init_array+0x1e>
    3a4c:	00006f98 	.word	0x00006f98
    3a50:	00006f98 	.word	0x00006f98
    3a54:	00006f98 	.word	0x00006f98
    3a58:	00006f9c 	.word	0x00006f9c

00003a5c <malloc>:
    3a5c:	b510      	push	{r4, lr}
    3a5e:	4b03      	ldr	r3, [pc, #12]	; (3a6c <malloc+0x10>)
    3a60:	0001      	movs	r1, r0
    3a62:	6818      	ldr	r0, [r3, #0]
    3a64:	f000 f860 	bl	3b28 <_malloc_r>
    3a68:	bd10      	pop	{r4, pc}
    3a6a:	46c0      	nop			; (mov r8, r8)
    3a6c:	20000164 	.word	0x20000164

00003a70 <memcpy>:
    3a70:	2300      	movs	r3, #0
    3a72:	b510      	push	{r4, lr}
    3a74:	429a      	cmp	r2, r3
    3a76:	d100      	bne.n	3a7a <memcpy+0xa>
    3a78:	bd10      	pop	{r4, pc}
    3a7a:	5ccc      	ldrb	r4, [r1, r3]
    3a7c:	54c4      	strb	r4, [r0, r3]
    3a7e:	3301      	adds	r3, #1
    3a80:	e7f8      	b.n	3a74 <memcpy+0x4>

00003a82 <memset>:
    3a82:	0003      	movs	r3, r0
    3a84:	1882      	adds	r2, r0, r2
    3a86:	4293      	cmp	r3, r2
    3a88:	d100      	bne.n	3a8c <memset+0xa>
    3a8a:	4770      	bx	lr
    3a8c:	7019      	strb	r1, [r3, #0]
    3a8e:	3301      	adds	r3, #1
    3a90:	e7f9      	b.n	3a86 <memset+0x4>
	...

00003a94 <_free_r>:
    3a94:	b570      	push	{r4, r5, r6, lr}
    3a96:	0005      	movs	r5, r0
    3a98:	2900      	cmp	r1, #0
    3a9a:	d010      	beq.n	3abe <_free_r+0x2a>
    3a9c:	1f0c      	subs	r4, r1, #4
    3a9e:	6823      	ldr	r3, [r4, #0]
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	da00      	bge.n	3aa6 <_free_r+0x12>
    3aa4:	18e4      	adds	r4, r4, r3
    3aa6:	0028      	movs	r0, r5
    3aa8:	f000 fbfe 	bl	42a8 <__malloc_lock>
    3aac:	4a1d      	ldr	r2, [pc, #116]	; (3b24 <_free_r+0x90>)
    3aae:	6813      	ldr	r3, [r2, #0]
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d105      	bne.n	3ac0 <_free_r+0x2c>
    3ab4:	6063      	str	r3, [r4, #4]
    3ab6:	6014      	str	r4, [r2, #0]
    3ab8:	0028      	movs	r0, r5
    3aba:	f000 fbf6 	bl	42aa <__malloc_unlock>
    3abe:	bd70      	pop	{r4, r5, r6, pc}
    3ac0:	42a3      	cmp	r3, r4
    3ac2:	d909      	bls.n	3ad8 <_free_r+0x44>
    3ac4:	6821      	ldr	r1, [r4, #0]
    3ac6:	1860      	adds	r0, r4, r1
    3ac8:	4283      	cmp	r3, r0
    3aca:	d1f3      	bne.n	3ab4 <_free_r+0x20>
    3acc:	6818      	ldr	r0, [r3, #0]
    3ace:	685b      	ldr	r3, [r3, #4]
    3ad0:	1841      	adds	r1, r0, r1
    3ad2:	6021      	str	r1, [r4, #0]
    3ad4:	e7ee      	b.n	3ab4 <_free_r+0x20>
    3ad6:	0013      	movs	r3, r2
    3ad8:	685a      	ldr	r2, [r3, #4]
    3ada:	2a00      	cmp	r2, #0
    3adc:	d001      	beq.n	3ae2 <_free_r+0x4e>
    3ade:	42a2      	cmp	r2, r4
    3ae0:	d9f9      	bls.n	3ad6 <_free_r+0x42>
    3ae2:	6819      	ldr	r1, [r3, #0]
    3ae4:	1858      	adds	r0, r3, r1
    3ae6:	42a0      	cmp	r0, r4
    3ae8:	d10b      	bne.n	3b02 <_free_r+0x6e>
    3aea:	6820      	ldr	r0, [r4, #0]
    3aec:	1809      	adds	r1, r1, r0
    3aee:	1858      	adds	r0, r3, r1
    3af0:	6019      	str	r1, [r3, #0]
    3af2:	4282      	cmp	r2, r0
    3af4:	d1e0      	bne.n	3ab8 <_free_r+0x24>
    3af6:	6810      	ldr	r0, [r2, #0]
    3af8:	6852      	ldr	r2, [r2, #4]
    3afa:	1841      	adds	r1, r0, r1
    3afc:	6019      	str	r1, [r3, #0]
    3afe:	605a      	str	r2, [r3, #4]
    3b00:	e7da      	b.n	3ab8 <_free_r+0x24>
    3b02:	42a0      	cmp	r0, r4
    3b04:	d902      	bls.n	3b0c <_free_r+0x78>
    3b06:	230c      	movs	r3, #12
    3b08:	602b      	str	r3, [r5, #0]
    3b0a:	e7d5      	b.n	3ab8 <_free_r+0x24>
    3b0c:	6821      	ldr	r1, [r4, #0]
    3b0e:	1860      	adds	r0, r4, r1
    3b10:	4282      	cmp	r2, r0
    3b12:	d103      	bne.n	3b1c <_free_r+0x88>
    3b14:	6810      	ldr	r0, [r2, #0]
    3b16:	6852      	ldr	r2, [r2, #4]
    3b18:	1841      	adds	r1, r0, r1
    3b1a:	6021      	str	r1, [r4, #0]
    3b1c:	6062      	str	r2, [r4, #4]
    3b1e:	605c      	str	r4, [r3, #4]
    3b20:	e7ca      	b.n	3ab8 <_free_r+0x24>
    3b22:	46c0      	nop			; (mov r8, r8)
    3b24:	200002b4 	.word	0x200002b4

00003b28 <_malloc_r>:
    3b28:	2303      	movs	r3, #3
    3b2a:	b570      	push	{r4, r5, r6, lr}
    3b2c:	1ccd      	adds	r5, r1, #3
    3b2e:	439d      	bics	r5, r3
    3b30:	3508      	adds	r5, #8
    3b32:	0006      	movs	r6, r0
    3b34:	2d0c      	cmp	r5, #12
    3b36:	d21e      	bcs.n	3b76 <_malloc_r+0x4e>
    3b38:	250c      	movs	r5, #12
    3b3a:	42a9      	cmp	r1, r5
    3b3c:	d81d      	bhi.n	3b7a <_malloc_r+0x52>
    3b3e:	0030      	movs	r0, r6
    3b40:	f000 fbb2 	bl	42a8 <__malloc_lock>
    3b44:	4a25      	ldr	r2, [pc, #148]	; (3bdc <_malloc_r+0xb4>)
    3b46:	6814      	ldr	r4, [r2, #0]
    3b48:	0021      	movs	r1, r4
    3b4a:	2900      	cmp	r1, #0
    3b4c:	d119      	bne.n	3b82 <_malloc_r+0x5a>
    3b4e:	4c24      	ldr	r4, [pc, #144]	; (3be0 <_malloc_r+0xb8>)
    3b50:	6823      	ldr	r3, [r4, #0]
    3b52:	2b00      	cmp	r3, #0
    3b54:	d103      	bne.n	3b5e <_malloc_r+0x36>
    3b56:	0030      	movs	r0, r6
    3b58:	f000 f8dc 	bl	3d14 <_sbrk_r>
    3b5c:	6020      	str	r0, [r4, #0]
    3b5e:	0029      	movs	r1, r5
    3b60:	0030      	movs	r0, r6
    3b62:	f000 f8d7 	bl	3d14 <_sbrk_r>
    3b66:	1c43      	adds	r3, r0, #1
    3b68:	d12c      	bne.n	3bc4 <_malloc_r+0x9c>
    3b6a:	230c      	movs	r3, #12
    3b6c:	0030      	movs	r0, r6
    3b6e:	6033      	str	r3, [r6, #0]
    3b70:	f000 fb9b 	bl	42aa <__malloc_unlock>
    3b74:	e003      	b.n	3b7e <_malloc_r+0x56>
    3b76:	2d00      	cmp	r5, #0
    3b78:	dadf      	bge.n	3b3a <_malloc_r+0x12>
    3b7a:	230c      	movs	r3, #12
    3b7c:	6033      	str	r3, [r6, #0]
    3b7e:	2000      	movs	r0, #0
    3b80:	bd70      	pop	{r4, r5, r6, pc}
    3b82:	680b      	ldr	r3, [r1, #0]
    3b84:	1b5b      	subs	r3, r3, r5
    3b86:	d41a      	bmi.n	3bbe <_malloc_r+0x96>
    3b88:	2b0b      	cmp	r3, #11
    3b8a:	d903      	bls.n	3b94 <_malloc_r+0x6c>
    3b8c:	600b      	str	r3, [r1, #0]
    3b8e:	18cc      	adds	r4, r1, r3
    3b90:	6025      	str	r5, [r4, #0]
    3b92:	e003      	b.n	3b9c <_malloc_r+0x74>
    3b94:	428c      	cmp	r4, r1
    3b96:	d10e      	bne.n	3bb6 <_malloc_r+0x8e>
    3b98:	6863      	ldr	r3, [r4, #4]
    3b9a:	6013      	str	r3, [r2, #0]
    3b9c:	0030      	movs	r0, r6
    3b9e:	f000 fb84 	bl	42aa <__malloc_unlock>
    3ba2:	0020      	movs	r0, r4
    3ba4:	2207      	movs	r2, #7
    3ba6:	300b      	adds	r0, #11
    3ba8:	1d23      	adds	r3, r4, #4
    3baa:	4390      	bics	r0, r2
    3bac:	1ac3      	subs	r3, r0, r3
    3bae:	d0e7      	beq.n	3b80 <_malloc_r+0x58>
    3bb0:	425a      	negs	r2, r3
    3bb2:	50e2      	str	r2, [r4, r3]
    3bb4:	e7e4      	b.n	3b80 <_malloc_r+0x58>
    3bb6:	684b      	ldr	r3, [r1, #4]
    3bb8:	6063      	str	r3, [r4, #4]
    3bba:	000c      	movs	r4, r1
    3bbc:	e7ee      	b.n	3b9c <_malloc_r+0x74>
    3bbe:	000c      	movs	r4, r1
    3bc0:	6849      	ldr	r1, [r1, #4]
    3bc2:	e7c2      	b.n	3b4a <_malloc_r+0x22>
    3bc4:	2303      	movs	r3, #3
    3bc6:	1cc4      	adds	r4, r0, #3
    3bc8:	439c      	bics	r4, r3
    3bca:	42a0      	cmp	r0, r4
    3bcc:	d0e0      	beq.n	3b90 <_malloc_r+0x68>
    3bce:	1a21      	subs	r1, r4, r0
    3bd0:	0030      	movs	r0, r6
    3bd2:	f000 f89f 	bl	3d14 <_sbrk_r>
    3bd6:	1c43      	adds	r3, r0, #1
    3bd8:	d1da      	bne.n	3b90 <_malloc_r+0x68>
    3bda:	e7c6      	b.n	3b6a <_malloc_r+0x42>
    3bdc:	200002b4 	.word	0x200002b4
    3be0:	200002b8 	.word	0x200002b8

00003be4 <iprintf>:
    3be4:	b40f      	push	{r0, r1, r2, r3}
    3be6:	4b0b      	ldr	r3, [pc, #44]	; (3c14 <iprintf+0x30>)
    3be8:	b513      	push	{r0, r1, r4, lr}
    3bea:	681c      	ldr	r4, [r3, #0]
    3bec:	2c00      	cmp	r4, #0
    3bee:	d005      	beq.n	3bfc <iprintf+0x18>
    3bf0:	69a3      	ldr	r3, [r4, #24]
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d102      	bne.n	3bfc <iprintf+0x18>
    3bf6:	0020      	movs	r0, r4
    3bf8:	f000 fa54 	bl	40a4 <__sinit>
    3bfc:	ab05      	add	r3, sp, #20
    3bfe:	9a04      	ldr	r2, [sp, #16]
    3c00:	68a1      	ldr	r1, [r4, #8]
    3c02:	0020      	movs	r0, r4
    3c04:	9301      	str	r3, [sp, #4]
    3c06:	f000 fb79 	bl	42fc <_vfiprintf_r>
    3c0a:	bc16      	pop	{r1, r2, r4}
    3c0c:	bc08      	pop	{r3}
    3c0e:	b004      	add	sp, #16
    3c10:	4718      	bx	r3
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	20000164 	.word	0x20000164

00003c18 <putchar>:
    3c18:	4b08      	ldr	r3, [pc, #32]	; (3c3c <putchar+0x24>)
    3c1a:	b570      	push	{r4, r5, r6, lr}
    3c1c:	681c      	ldr	r4, [r3, #0]
    3c1e:	0005      	movs	r5, r0
    3c20:	2c00      	cmp	r4, #0
    3c22:	d005      	beq.n	3c30 <putchar+0x18>
    3c24:	69a3      	ldr	r3, [r4, #24]
    3c26:	2b00      	cmp	r3, #0
    3c28:	d102      	bne.n	3c30 <putchar+0x18>
    3c2a:	0020      	movs	r0, r4
    3c2c:	f000 fa3a 	bl	40a4 <__sinit>
    3c30:	0029      	movs	r1, r5
    3c32:	68a2      	ldr	r2, [r4, #8]
    3c34:	0020      	movs	r0, r4
    3c36:	f000 fe05 	bl	4844 <_putc_r>
    3c3a:	bd70      	pop	{r4, r5, r6, pc}
    3c3c:	20000164 	.word	0x20000164

00003c40 <srand>:
    3c40:	4b10      	ldr	r3, [pc, #64]	; (3c84 <srand+0x44>)
    3c42:	b570      	push	{r4, r5, r6, lr}
    3c44:	681c      	ldr	r4, [r3, #0]
    3c46:	0005      	movs	r5, r0
    3c48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3c4a:	2b00      	cmp	r3, #0
    3c4c:	d115      	bne.n	3c7a <srand+0x3a>
    3c4e:	2018      	movs	r0, #24
    3c50:	f7ff ff04 	bl	3a5c <malloc>
    3c54:	4b0c      	ldr	r3, [pc, #48]	; (3c88 <srand+0x48>)
    3c56:	63a0      	str	r0, [r4, #56]	; 0x38
    3c58:	8003      	strh	r3, [r0, #0]
    3c5a:	4b0c      	ldr	r3, [pc, #48]	; (3c8c <srand+0x4c>)
    3c5c:	2201      	movs	r2, #1
    3c5e:	8043      	strh	r3, [r0, #2]
    3c60:	4b0b      	ldr	r3, [pc, #44]	; (3c90 <srand+0x50>)
    3c62:	8083      	strh	r3, [r0, #4]
    3c64:	4b0b      	ldr	r3, [pc, #44]	; (3c94 <srand+0x54>)
    3c66:	80c3      	strh	r3, [r0, #6]
    3c68:	4b0b      	ldr	r3, [pc, #44]	; (3c98 <srand+0x58>)
    3c6a:	8103      	strh	r3, [r0, #8]
    3c6c:	2305      	movs	r3, #5
    3c6e:	8143      	strh	r3, [r0, #10]
    3c70:	3306      	adds	r3, #6
    3c72:	8183      	strh	r3, [r0, #12]
    3c74:	2300      	movs	r3, #0
    3c76:	6102      	str	r2, [r0, #16]
    3c78:	6143      	str	r3, [r0, #20]
    3c7a:	2200      	movs	r2, #0
    3c7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3c7e:	611d      	str	r5, [r3, #16]
    3c80:	615a      	str	r2, [r3, #20]
    3c82:	bd70      	pop	{r4, r5, r6, pc}
    3c84:	20000164 	.word	0x20000164
    3c88:	0000330e 	.word	0x0000330e
    3c8c:	ffffabcd 	.word	0xffffabcd
    3c90:	00001234 	.word	0x00001234
    3c94:	ffffe66d 	.word	0xffffe66d
    3c98:	ffffdeec 	.word	0xffffdeec

00003c9c <rand>:
    3c9c:	4b15      	ldr	r3, [pc, #84]	; (3cf4 <rand+0x58>)
    3c9e:	b510      	push	{r4, lr}
    3ca0:	681c      	ldr	r4, [r3, #0]
    3ca2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3ca4:	2b00      	cmp	r3, #0
    3ca6:	d115      	bne.n	3cd4 <rand+0x38>
    3ca8:	2018      	movs	r0, #24
    3caa:	f7ff fed7 	bl	3a5c <malloc>
    3cae:	4b12      	ldr	r3, [pc, #72]	; (3cf8 <rand+0x5c>)
    3cb0:	63a0      	str	r0, [r4, #56]	; 0x38
    3cb2:	8003      	strh	r3, [r0, #0]
    3cb4:	4b11      	ldr	r3, [pc, #68]	; (3cfc <rand+0x60>)
    3cb6:	2201      	movs	r2, #1
    3cb8:	8043      	strh	r3, [r0, #2]
    3cba:	4b11      	ldr	r3, [pc, #68]	; (3d00 <rand+0x64>)
    3cbc:	8083      	strh	r3, [r0, #4]
    3cbe:	4b11      	ldr	r3, [pc, #68]	; (3d04 <rand+0x68>)
    3cc0:	80c3      	strh	r3, [r0, #6]
    3cc2:	4b11      	ldr	r3, [pc, #68]	; (3d08 <rand+0x6c>)
    3cc4:	8103      	strh	r3, [r0, #8]
    3cc6:	2305      	movs	r3, #5
    3cc8:	8143      	strh	r3, [r0, #10]
    3cca:	3306      	adds	r3, #6
    3ccc:	8183      	strh	r3, [r0, #12]
    3cce:	2300      	movs	r3, #0
    3cd0:	6102      	str	r2, [r0, #16]
    3cd2:	6143      	str	r3, [r0, #20]
    3cd4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    3cd6:	4a0d      	ldr	r2, [pc, #52]	; (3d0c <rand+0x70>)
    3cd8:	6920      	ldr	r0, [r4, #16]
    3cda:	6961      	ldr	r1, [r4, #20]
    3cdc:	4b0c      	ldr	r3, [pc, #48]	; (3d10 <rand+0x74>)
    3cde:	f7ff fe6f 	bl	39c0 <__aeabi_lmul>
    3ce2:	2201      	movs	r2, #1
    3ce4:	2300      	movs	r3, #0
    3ce6:	1880      	adds	r0, r0, r2
    3ce8:	4159      	adcs	r1, r3
    3cea:	6120      	str	r0, [r4, #16]
    3cec:	6161      	str	r1, [r4, #20]
    3cee:	0048      	lsls	r0, r1, #1
    3cf0:	0840      	lsrs	r0, r0, #1
    3cf2:	bd10      	pop	{r4, pc}
    3cf4:	20000164 	.word	0x20000164
    3cf8:	0000330e 	.word	0x0000330e
    3cfc:	ffffabcd 	.word	0xffffabcd
    3d00:	00001234 	.word	0x00001234
    3d04:	ffffe66d 	.word	0xffffe66d
    3d08:	ffffdeec 	.word	0xffffdeec
    3d0c:	4c957f2d 	.word	0x4c957f2d
    3d10:	5851f42d 	.word	0x5851f42d

00003d14 <_sbrk_r>:
    3d14:	2300      	movs	r3, #0
    3d16:	b570      	push	{r4, r5, r6, lr}
    3d18:	4c06      	ldr	r4, [pc, #24]	; (3d34 <_sbrk_r+0x20>)
    3d1a:	0005      	movs	r5, r0
    3d1c:	0008      	movs	r0, r1
    3d1e:	6023      	str	r3, [r4, #0]
    3d20:	f7fe fb06 	bl	2330 <_sbrk>
    3d24:	1c43      	adds	r3, r0, #1
    3d26:	d103      	bne.n	3d30 <_sbrk_r+0x1c>
    3d28:	6823      	ldr	r3, [r4, #0]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d000      	beq.n	3d30 <_sbrk_r+0x1c>
    3d2e:	602b      	str	r3, [r5, #0]
    3d30:	bd70      	pop	{r4, r5, r6, pc}
    3d32:	46c0      	nop			; (mov r8, r8)
    3d34:	20000ad8 	.word	0x20000ad8

00003d38 <setbuf>:
    3d38:	424a      	negs	r2, r1
    3d3a:	414a      	adcs	r2, r1
    3d3c:	2380      	movs	r3, #128	; 0x80
    3d3e:	b510      	push	{r4, lr}
    3d40:	0052      	lsls	r2, r2, #1
    3d42:	00db      	lsls	r3, r3, #3
    3d44:	f000 f802 	bl	3d4c <setvbuf>
    3d48:	bd10      	pop	{r4, pc}
	...

00003d4c <setvbuf>:
    3d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d4e:	001d      	movs	r5, r3
    3d50:	4b4f      	ldr	r3, [pc, #316]	; (3e90 <setvbuf+0x144>)
    3d52:	b085      	sub	sp, #20
    3d54:	681e      	ldr	r6, [r3, #0]
    3d56:	0004      	movs	r4, r0
    3d58:	000f      	movs	r7, r1
    3d5a:	9200      	str	r2, [sp, #0]
    3d5c:	2e00      	cmp	r6, #0
    3d5e:	d005      	beq.n	3d6c <setvbuf+0x20>
    3d60:	69b3      	ldr	r3, [r6, #24]
    3d62:	2b00      	cmp	r3, #0
    3d64:	d102      	bne.n	3d6c <setvbuf+0x20>
    3d66:	0030      	movs	r0, r6
    3d68:	f000 f99c 	bl	40a4 <__sinit>
    3d6c:	4b49      	ldr	r3, [pc, #292]	; (3e94 <setvbuf+0x148>)
    3d6e:	429c      	cmp	r4, r3
    3d70:	d150      	bne.n	3e14 <setvbuf+0xc8>
    3d72:	6874      	ldr	r4, [r6, #4]
    3d74:	9b00      	ldr	r3, [sp, #0]
    3d76:	2b02      	cmp	r3, #2
    3d78:	d005      	beq.n	3d86 <setvbuf+0x3a>
    3d7a:	2b01      	cmp	r3, #1
    3d7c:	d900      	bls.n	3d80 <setvbuf+0x34>
    3d7e:	e084      	b.n	3e8a <setvbuf+0x13e>
    3d80:	2d00      	cmp	r5, #0
    3d82:	da00      	bge.n	3d86 <setvbuf+0x3a>
    3d84:	e081      	b.n	3e8a <setvbuf+0x13e>
    3d86:	0021      	movs	r1, r4
    3d88:	0030      	movs	r0, r6
    3d8a:	f000 f91d 	bl	3fc8 <_fflush_r>
    3d8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3d90:	2900      	cmp	r1, #0
    3d92:	d008      	beq.n	3da6 <setvbuf+0x5a>
    3d94:	0023      	movs	r3, r4
    3d96:	3344      	adds	r3, #68	; 0x44
    3d98:	4299      	cmp	r1, r3
    3d9a:	d002      	beq.n	3da2 <setvbuf+0x56>
    3d9c:	0030      	movs	r0, r6
    3d9e:	f7ff fe79 	bl	3a94 <_free_r>
    3da2:	2300      	movs	r3, #0
    3da4:	6363      	str	r3, [r4, #52]	; 0x34
    3da6:	2300      	movs	r3, #0
    3da8:	61a3      	str	r3, [r4, #24]
    3daa:	6063      	str	r3, [r4, #4]
    3dac:	89a3      	ldrh	r3, [r4, #12]
    3dae:	061b      	lsls	r3, r3, #24
    3db0:	d503      	bpl.n	3dba <setvbuf+0x6e>
    3db2:	6921      	ldr	r1, [r4, #16]
    3db4:	0030      	movs	r0, r6
    3db6:	f7ff fe6d 	bl	3a94 <_free_r>
    3dba:	89a3      	ldrh	r3, [r4, #12]
    3dbc:	4a36      	ldr	r2, [pc, #216]	; (3e98 <setvbuf+0x14c>)
    3dbe:	4013      	ands	r3, r2
    3dc0:	81a3      	strh	r3, [r4, #12]
    3dc2:	9b00      	ldr	r3, [sp, #0]
    3dc4:	2b02      	cmp	r3, #2
    3dc6:	d05a      	beq.n	3e7e <setvbuf+0x132>
    3dc8:	ab03      	add	r3, sp, #12
    3dca:	aa02      	add	r2, sp, #8
    3dcc:	0021      	movs	r1, r4
    3dce:	0030      	movs	r0, r6
    3dd0:	f000 f9fe 	bl	41d0 <__swhatbuf_r>
    3dd4:	89a3      	ldrh	r3, [r4, #12]
    3dd6:	4318      	orrs	r0, r3
    3dd8:	81a0      	strh	r0, [r4, #12]
    3dda:	2d00      	cmp	r5, #0
    3ddc:	d124      	bne.n	3e28 <setvbuf+0xdc>
    3dde:	9d02      	ldr	r5, [sp, #8]
    3de0:	0028      	movs	r0, r5
    3de2:	f7ff fe3b 	bl	3a5c <malloc>
    3de6:	9501      	str	r5, [sp, #4]
    3de8:	1e07      	subs	r7, r0, #0
    3dea:	d142      	bne.n	3e72 <setvbuf+0x126>
    3dec:	9b02      	ldr	r3, [sp, #8]
    3dee:	9301      	str	r3, [sp, #4]
    3df0:	42ab      	cmp	r3, r5
    3df2:	d139      	bne.n	3e68 <setvbuf+0x11c>
    3df4:	2001      	movs	r0, #1
    3df6:	4240      	negs	r0, r0
    3df8:	2302      	movs	r3, #2
    3dfa:	89a2      	ldrh	r2, [r4, #12]
    3dfc:	4313      	orrs	r3, r2
    3dfe:	81a3      	strh	r3, [r4, #12]
    3e00:	2300      	movs	r3, #0
    3e02:	60a3      	str	r3, [r4, #8]
    3e04:	0023      	movs	r3, r4
    3e06:	3347      	adds	r3, #71	; 0x47
    3e08:	6023      	str	r3, [r4, #0]
    3e0a:	6123      	str	r3, [r4, #16]
    3e0c:	2301      	movs	r3, #1
    3e0e:	6163      	str	r3, [r4, #20]
    3e10:	b005      	add	sp, #20
    3e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e14:	4b21      	ldr	r3, [pc, #132]	; (3e9c <setvbuf+0x150>)
    3e16:	429c      	cmp	r4, r3
    3e18:	d101      	bne.n	3e1e <setvbuf+0xd2>
    3e1a:	68b4      	ldr	r4, [r6, #8]
    3e1c:	e7aa      	b.n	3d74 <setvbuf+0x28>
    3e1e:	4b20      	ldr	r3, [pc, #128]	; (3ea0 <setvbuf+0x154>)
    3e20:	429c      	cmp	r4, r3
    3e22:	d1a7      	bne.n	3d74 <setvbuf+0x28>
    3e24:	68f4      	ldr	r4, [r6, #12]
    3e26:	e7a5      	b.n	3d74 <setvbuf+0x28>
    3e28:	2f00      	cmp	r7, #0
    3e2a:	d0d9      	beq.n	3de0 <setvbuf+0x94>
    3e2c:	69b3      	ldr	r3, [r6, #24]
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d102      	bne.n	3e38 <setvbuf+0xec>
    3e32:	0030      	movs	r0, r6
    3e34:	f000 f936 	bl	40a4 <__sinit>
    3e38:	9b00      	ldr	r3, [sp, #0]
    3e3a:	2b01      	cmp	r3, #1
    3e3c:	d103      	bne.n	3e46 <setvbuf+0xfa>
    3e3e:	89a3      	ldrh	r3, [r4, #12]
    3e40:	9a00      	ldr	r2, [sp, #0]
    3e42:	431a      	orrs	r2, r3
    3e44:	81a2      	strh	r2, [r4, #12]
    3e46:	2008      	movs	r0, #8
    3e48:	89a3      	ldrh	r3, [r4, #12]
    3e4a:	6027      	str	r7, [r4, #0]
    3e4c:	6127      	str	r7, [r4, #16]
    3e4e:	6165      	str	r5, [r4, #20]
    3e50:	4018      	ands	r0, r3
    3e52:	d018      	beq.n	3e86 <setvbuf+0x13a>
    3e54:	2001      	movs	r0, #1
    3e56:	4018      	ands	r0, r3
    3e58:	2300      	movs	r3, #0
    3e5a:	4298      	cmp	r0, r3
    3e5c:	d011      	beq.n	3e82 <setvbuf+0x136>
    3e5e:	426d      	negs	r5, r5
    3e60:	60a3      	str	r3, [r4, #8]
    3e62:	61a5      	str	r5, [r4, #24]
    3e64:	0018      	movs	r0, r3
    3e66:	e7d3      	b.n	3e10 <setvbuf+0xc4>
    3e68:	9801      	ldr	r0, [sp, #4]
    3e6a:	f7ff fdf7 	bl	3a5c <malloc>
    3e6e:	1e07      	subs	r7, r0, #0
    3e70:	d0c0      	beq.n	3df4 <setvbuf+0xa8>
    3e72:	2380      	movs	r3, #128	; 0x80
    3e74:	89a2      	ldrh	r2, [r4, #12]
    3e76:	9d01      	ldr	r5, [sp, #4]
    3e78:	4313      	orrs	r3, r2
    3e7a:	81a3      	strh	r3, [r4, #12]
    3e7c:	e7d6      	b.n	3e2c <setvbuf+0xe0>
    3e7e:	2000      	movs	r0, #0
    3e80:	e7ba      	b.n	3df8 <setvbuf+0xac>
    3e82:	60a5      	str	r5, [r4, #8]
    3e84:	e7c4      	b.n	3e10 <setvbuf+0xc4>
    3e86:	60a0      	str	r0, [r4, #8]
    3e88:	e7c2      	b.n	3e10 <setvbuf+0xc4>
    3e8a:	2001      	movs	r0, #1
    3e8c:	4240      	negs	r0, r0
    3e8e:	e7bf      	b.n	3e10 <setvbuf+0xc4>
    3e90:	20000164 	.word	0x20000164
    3e94:	00006f18 	.word	0x00006f18
    3e98:	fffff35c 	.word	0xfffff35c
    3e9c:	00006f38 	.word	0x00006f38
    3ea0:	00006ef8 	.word	0x00006ef8

00003ea4 <strlen>:
    3ea4:	2300      	movs	r3, #0
    3ea6:	5cc2      	ldrb	r2, [r0, r3]
    3ea8:	3301      	adds	r3, #1
    3eaa:	2a00      	cmp	r2, #0
    3eac:	d1fb      	bne.n	3ea6 <strlen+0x2>
    3eae:	1e58      	subs	r0, r3, #1
    3eb0:	4770      	bx	lr
	...

00003eb4 <__sflush_r>:
    3eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3eb6:	898a      	ldrh	r2, [r1, #12]
    3eb8:	0005      	movs	r5, r0
    3eba:	000c      	movs	r4, r1
    3ebc:	0713      	lsls	r3, r2, #28
    3ebe:	d460      	bmi.n	3f82 <__sflush_r+0xce>
    3ec0:	684b      	ldr	r3, [r1, #4]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	dc04      	bgt.n	3ed0 <__sflush_r+0x1c>
    3ec6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3ec8:	2b00      	cmp	r3, #0
    3eca:	dc01      	bgt.n	3ed0 <__sflush_r+0x1c>
    3ecc:	2000      	movs	r0, #0
    3ece:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3ed0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3ed2:	2f00      	cmp	r7, #0
    3ed4:	d0fa      	beq.n	3ecc <__sflush_r+0x18>
    3ed6:	2300      	movs	r3, #0
    3ed8:	682e      	ldr	r6, [r5, #0]
    3eda:	602b      	str	r3, [r5, #0]
    3edc:	2380      	movs	r3, #128	; 0x80
    3ede:	015b      	lsls	r3, r3, #5
    3ee0:	401a      	ands	r2, r3
    3ee2:	d034      	beq.n	3f4e <__sflush_r+0x9a>
    3ee4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3ee6:	89a3      	ldrh	r3, [r4, #12]
    3ee8:	075b      	lsls	r3, r3, #29
    3eea:	d506      	bpl.n	3efa <__sflush_r+0x46>
    3eec:	6863      	ldr	r3, [r4, #4]
    3eee:	1ac0      	subs	r0, r0, r3
    3ef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3ef2:	2b00      	cmp	r3, #0
    3ef4:	d001      	beq.n	3efa <__sflush_r+0x46>
    3ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3ef8:	1ac0      	subs	r0, r0, r3
    3efa:	0002      	movs	r2, r0
    3efc:	6a21      	ldr	r1, [r4, #32]
    3efe:	2300      	movs	r3, #0
    3f00:	0028      	movs	r0, r5
    3f02:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3f04:	47b8      	blx	r7
    3f06:	89a1      	ldrh	r1, [r4, #12]
    3f08:	1c43      	adds	r3, r0, #1
    3f0a:	d106      	bne.n	3f1a <__sflush_r+0x66>
    3f0c:	682b      	ldr	r3, [r5, #0]
    3f0e:	2b1d      	cmp	r3, #29
    3f10:	d831      	bhi.n	3f76 <__sflush_r+0xc2>
    3f12:	4a2c      	ldr	r2, [pc, #176]	; (3fc4 <__sflush_r+0x110>)
    3f14:	40da      	lsrs	r2, r3
    3f16:	07d3      	lsls	r3, r2, #31
    3f18:	d52d      	bpl.n	3f76 <__sflush_r+0xc2>
    3f1a:	2300      	movs	r3, #0
    3f1c:	6063      	str	r3, [r4, #4]
    3f1e:	6923      	ldr	r3, [r4, #16]
    3f20:	6023      	str	r3, [r4, #0]
    3f22:	04cb      	lsls	r3, r1, #19
    3f24:	d505      	bpl.n	3f32 <__sflush_r+0x7e>
    3f26:	1c43      	adds	r3, r0, #1
    3f28:	d102      	bne.n	3f30 <__sflush_r+0x7c>
    3f2a:	682b      	ldr	r3, [r5, #0]
    3f2c:	2b00      	cmp	r3, #0
    3f2e:	d100      	bne.n	3f32 <__sflush_r+0x7e>
    3f30:	6560      	str	r0, [r4, #84]	; 0x54
    3f32:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3f34:	602e      	str	r6, [r5, #0]
    3f36:	2900      	cmp	r1, #0
    3f38:	d0c8      	beq.n	3ecc <__sflush_r+0x18>
    3f3a:	0023      	movs	r3, r4
    3f3c:	3344      	adds	r3, #68	; 0x44
    3f3e:	4299      	cmp	r1, r3
    3f40:	d002      	beq.n	3f48 <__sflush_r+0x94>
    3f42:	0028      	movs	r0, r5
    3f44:	f7ff fda6 	bl	3a94 <_free_r>
    3f48:	2000      	movs	r0, #0
    3f4a:	6360      	str	r0, [r4, #52]	; 0x34
    3f4c:	e7bf      	b.n	3ece <__sflush_r+0x1a>
    3f4e:	2301      	movs	r3, #1
    3f50:	6a21      	ldr	r1, [r4, #32]
    3f52:	0028      	movs	r0, r5
    3f54:	47b8      	blx	r7
    3f56:	1c43      	adds	r3, r0, #1
    3f58:	d1c5      	bne.n	3ee6 <__sflush_r+0x32>
    3f5a:	682b      	ldr	r3, [r5, #0]
    3f5c:	2b00      	cmp	r3, #0
    3f5e:	d0c2      	beq.n	3ee6 <__sflush_r+0x32>
    3f60:	2b1d      	cmp	r3, #29
    3f62:	d001      	beq.n	3f68 <__sflush_r+0xb4>
    3f64:	2b16      	cmp	r3, #22
    3f66:	d101      	bne.n	3f6c <__sflush_r+0xb8>
    3f68:	602e      	str	r6, [r5, #0]
    3f6a:	e7af      	b.n	3ecc <__sflush_r+0x18>
    3f6c:	2340      	movs	r3, #64	; 0x40
    3f6e:	89a2      	ldrh	r2, [r4, #12]
    3f70:	4313      	orrs	r3, r2
    3f72:	81a3      	strh	r3, [r4, #12]
    3f74:	e7ab      	b.n	3ece <__sflush_r+0x1a>
    3f76:	2340      	movs	r3, #64	; 0x40
    3f78:	430b      	orrs	r3, r1
    3f7a:	2001      	movs	r0, #1
    3f7c:	81a3      	strh	r3, [r4, #12]
    3f7e:	4240      	negs	r0, r0
    3f80:	e7a5      	b.n	3ece <__sflush_r+0x1a>
    3f82:	690f      	ldr	r7, [r1, #16]
    3f84:	2f00      	cmp	r7, #0
    3f86:	d0a1      	beq.n	3ecc <__sflush_r+0x18>
    3f88:	680b      	ldr	r3, [r1, #0]
    3f8a:	600f      	str	r7, [r1, #0]
    3f8c:	1bdb      	subs	r3, r3, r7
    3f8e:	9301      	str	r3, [sp, #4]
    3f90:	2300      	movs	r3, #0
    3f92:	0792      	lsls	r2, r2, #30
    3f94:	d100      	bne.n	3f98 <__sflush_r+0xe4>
    3f96:	694b      	ldr	r3, [r1, #20]
    3f98:	60a3      	str	r3, [r4, #8]
    3f9a:	9b01      	ldr	r3, [sp, #4]
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	dc00      	bgt.n	3fa2 <__sflush_r+0xee>
    3fa0:	e794      	b.n	3ecc <__sflush_r+0x18>
    3fa2:	9b01      	ldr	r3, [sp, #4]
    3fa4:	003a      	movs	r2, r7
    3fa6:	6a21      	ldr	r1, [r4, #32]
    3fa8:	0028      	movs	r0, r5
    3faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3fac:	47b0      	blx	r6
    3fae:	2800      	cmp	r0, #0
    3fb0:	dc03      	bgt.n	3fba <__sflush_r+0x106>
    3fb2:	2340      	movs	r3, #64	; 0x40
    3fb4:	89a2      	ldrh	r2, [r4, #12]
    3fb6:	4313      	orrs	r3, r2
    3fb8:	e7df      	b.n	3f7a <__sflush_r+0xc6>
    3fba:	9b01      	ldr	r3, [sp, #4]
    3fbc:	183f      	adds	r7, r7, r0
    3fbe:	1a1b      	subs	r3, r3, r0
    3fc0:	9301      	str	r3, [sp, #4]
    3fc2:	e7ea      	b.n	3f9a <__sflush_r+0xe6>
    3fc4:	20400001 	.word	0x20400001

00003fc8 <_fflush_r>:
    3fc8:	690b      	ldr	r3, [r1, #16]
    3fca:	b570      	push	{r4, r5, r6, lr}
    3fcc:	0005      	movs	r5, r0
    3fce:	000c      	movs	r4, r1
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	d101      	bne.n	3fd8 <_fflush_r+0x10>
    3fd4:	2000      	movs	r0, #0
    3fd6:	bd70      	pop	{r4, r5, r6, pc}
    3fd8:	2800      	cmp	r0, #0
    3fda:	d004      	beq.n	3fe6 <_fflush_r+0x1e>
    3fdc:	6983      	ldr	r3, [r0, #24]
    3fde:	2b00      	cmp	r3, #0
    3fe0:	d101      	bne.n	3fe6 <_fflush_r+0x1e>
    3fe2:	f000 f85f 	bl	40a4 <__sinit>
    3fe6:	4b0b      	ldr	r3, [pc, #44]	; (4014 <_fflush_r+0x4c>)
    3fe8:	429c      	cmp	r4, r3
    3fea:	d109      	bne.n	4000 <_fflush_r+0x38>
    3fec:	686c      	ldr	r4, [r5, #4]
    3fee:	220c      	movs	r2, #12
    3ff0:	5ea3      	ldrsh	r3, [r4, r2]
    3ff2:	2b00      	cmp	r3, #0
    3ff4:	d0ee      	beq.n	3fd4 <_fflush_r+0xc>
    3ff6:	0021      	movs	r1, r4
    3ff8:	0028      	movs	r0, r5
    3ffa:	f7ff ff5b 	bl	3eb4 <__sflush_r>
    3ffe:	e7ea      	b.n	3fd6 <_fflush_r+0xe>
    4000:	4b05      	ldr	r3, [pc, #20]	; (4018 <_fflush_r+0x50>)
    4002:	429c      	cmp	r4, r3
    4004:	d101      	bne.n	400a <_fflush_r+0x42>
    4006:	68ac      	ldr	r4, [r5, #8]
    4008:	e7f1      	b.n	3fee <_fflush_r+0x26>
    400a:	4b04      	ldr	r3, [pc, #16]	; (401c <_fflush_r+0x54>)
    400c:	429c      	cmp	r4, r3
    400e:	d1ee      	bne.n	3fee <_fflush_r+0x26>
    4010:	68ec      	ldr	r4, [r5, #12]
    4012:	e7ec      	b.n	3fee <_fflush_r+0x26>
    4014:	00006f18 	.word	0x00006f18
    4018:	00006f38 	.word	0x00006f38
    401c:	00006ef8 	.word	0x00006ef8

00004020 <_cleanup_r>:
    4020:	b510      	push	{r4, lr}
    4022:	4902      	ldr	r1, [pc, #8]	; (402c <_cleanup_r+0xc>)
    4024:	f000 f8b2 	bl	418c <_fwalk_reent>
    4028:	bd10      	pop	{r4, pc}
    402a:	46c0      	nop			; (mov r8, r8)
    402c:	00003fc9 	.word	0x00003fc9

00004030 <std.isra.0>:
    4030:	2300      	movs	r3, #0
    4032:	b510      	push	{r4, lr}
    4034:	0004      	movs	r4, r0
    4036:	6003      	str	r3, [r0, #0]
    4038:	6043      	str	r3, [r0, #4]
    403a:	6083      	str	r3, [r0, #8]
    403c:	8181      	strh	r1, [r0, #12]
    403e:	6643      	str	r3, [r0, #100]	; 0x64
    4040:	81c2      	strh	r2, [r0, #14]
    4042:	6103      	str	r3, [r0, #16]
    4044:	6143      	str	r3, [r0, #20]
    4046:	6183      	str	r3, [r0, #24]
    4048:	0019      	movs	r1, r3
    404a:	2208      	movs	r2, #8
    404c:	305c      	adds	r0, #92	; 0x5c
    404e:	f7ff fd18 	bl	3a82 <memset>
    4052:	4b05      	ldr	r3, [pc, #20]	; (4068 <std.isra.0+0x38>)
    4054:	6224      	str	r4, [r4, #32]
    4056:	6263      	str	r3, [r4, #36]	; 0x24
    4058:	4b04      	ldr	r3, [pc, #16]	; (406c <std.isra.0+0x3c>)
    405a:	62a3      	str	r3, [r4, #40]	; 0x28
    405c:	4b04      	ldr	r3, [pc, #16]	; (4070 <std.isra.0+0x40>)
    405e:	62e3      	str	r3, [r4, #44]	; 0x2c
    4060:	4b04      	ldr	r3, [pc, #16]	; (4074 <std.isra.0+0x44>)
    4062:	6323      	str	r3, [r4, #48]	; 0x30
    4064:	bd10      	pop	{r4, pc}
    4066:	46c0      	nop			; (mov r8, r8)
    4068:	000048b1 	.word	0x000048b1
    406c:	000048d9 	.word	0x000048d9
    4070:	00004911 	.word	0x00004911
    4074:	0000493d 	.word	0x0000493d

00004078 <__sfmoreglue>:
    4078:	b570      	push	{r4, r5, r6, lr}
    407a:	2568      	movs	r5, #104	; 0x68
    407c:	1e4a      	subs	r2, r1, #1
    407e:	4355      	muls	r5, r2
    4080:	000e      	movs	r6, r1
    4082:	0029      	movs	r1, r5
    4084:	3174      	adds	r1, #116	; 0x74
    4086:	f7ff fd4f 	bl	3b28 <_malloc_r>
    408a:	1e04      	subs	r4, r0, #0
    408c:	d008      	beq.n	40a0 <__sfmoreglue+0x28>
    408e:	2100      	movs	r1, #0
    4090:	002a      	movs	r2, r5
    4092:	6001      	str	r1, [r0, #0]
    4094:	6046      	str	r6, [r0, #4]
    4096:	300c      	adds	r0, #12
    4098:	60a0      	str	r0, [r4, #8]
    409a:	3268      	adds	r2, #104	; 0x68
    409c:	f7ff fcf1 	bl	3a82 <memset>
    40a0:	0020      	movs	r0, r4
    40a2:	bd70      	pop	{r4, r5, r6, pc}

000040a4 <__sinit>:
    40a4:	6983      	ldr	r3, [r0, #24]
    40a6:	b513      	push	{r0, r1, r4, lr}
    40a8:	0004      	movs	r4, r0
    40aa:	2b00      	cmp	r3, #0
    40ac:	d128      	bne.n	4100 <__sinit+0x5c>
    40ae:	6483      	str	r3, [r0, #72]	; 0x48
    40b0:	64c3      	str	r3, [r0, #76]	; 0x4c
    40b2:	6503      	str	r3, [r0, #80]	; 0x50
    40b4:	4b13      	ldr	r3, [pc, #76]	; (4104 <__sinit+0x60>)
    40b6:	4a14      	ldr	r2, [pc, #80]	; (4108 <__sinit+0x64>)
    40b8:	681b      	ldr	r3, [r3, #0]
    40ba:	6282      	str	r2, [r0, #40]	; 0x28
    40bc:	9301      	str	r3, [sp, #4]
    40be:	4298      	cmp	r0, r3
    40c0:	d101      	bne.n	40c6 <__sinit+0x22>
    40c2:	2301      	movs	r3, #1
    40c4:	6183      	str	r3, [r0, #24]
    40c6:	0020      	movs	r0, r4
    40c8:	f000 f820 	bl	410c <__sfp>
    40cc:	6060      	str	r0, [r4, #4]
    40ce:	0020      	movs	r0, r4
    40d0:	f000 f81c 	bl	410c <__sfp>
    40d4:	60a0      	str	r0, [r4, #8]
    40d6:	0020      	movs	r0, r4
    40d8:	f000 f818 	bl	410c <__sfp>
    40dc:	2200      	movs	r2, #0
    40de:	60e0      	str	r0, [r4, #12]
    40e0:	2104      	movs	r1, #4
    40e2:	6860      	ldr	r0, [r4, #4]
    40e4:	f7ff ffa4 	bl	4030 <std.isra.0>
    40e8:	2201      	movs	r2, #1
    40ea:	2109      	movs	r1, #9
    40ec:	68a0      	ldr	r0, [r4, #8]
    40ee:	f7ff ff9f 	bl	4030 <std.isra.0>
    40f2:	2202      	movs	r2, #2
    40f4:	2112      	movs	r1, #18
    40f6:	68e0      	ldr	r0, [r4, #12]
    40f8:	f7ff ff9a 	bl	4030 <std.isra.0>
    40fc:	2301      	movs	r3, #1
    40fe:	61a3      	str	r3, [r4, #24]
    4100:	bd13      	pop	{r0, r1, r4, pc}
    4102:	46c0      	nop			; (mov r8, r8)
    4104:	00006ef4 	.word	0x00006ef4
    4108:	00004021 	.word	0x00004021

0000410c <__sfp>:
    410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    410e:	4b1e      	ldr	r3, [pc, #120]	; (4188 <__sfp+0x7c>)
    4110:	0007      	movs	r7, r0
    4112:	681e      	ldr	r6, [r3, #0]
    4114:	69b3      	ldr	r3, [r6, #24]
    4116:	2b00      	cmp	r3, #0
    4118:	d102      	bne.n	4120 <__sfp+0x14>
    411a:	0030      	movs	r0, r6
    411c:	f7ff ffc2 	bl	40a4 <__sinit>
    4120:	3648      	adds	r6, #72	; 0x48
    4122:	68b4      	ldr	r4, [r6, #8]
    4124:	6873      	ldr	r3, [r6, #4]
    4126:	3b01      	subs	r3, #1
    4128:	d504      	bpl.n	4134 <__sfp+0x28>
    412a:	6833      	ldr	r3, [r6, #0]
    412c:	2b00      	cmp	r3, #0
    412e:	d007      	beq.n	4140 <__sfp+0x34>
    4130:	6836      	ldr	r6, [r6, #0]
    4132:	e7f6      	b.n	4122 <__sfp+0x16>
    4134:	220c      	movs	r2, #12
    4136:	5ea5      	ldrsh	r5, [r4, r2]
    4138:	2d00      	cmp	r5, #0
    413a:	d00d      	beq.n	4158 <__sfp+0x4c>
    413c:	3468      	adds	r4, #104	; 0x68
    413e:	e7f2      	b.n	4126 <__sfp+0x1a>
    4140:	2104      	movs	r1, #4
    4142:	0038      	movs	r0, r7
    4144:	f7ff ff98 	bl	4078 <__sfmoreglue>
    4148:	6030      	str	r0, [r6, #0]
    414a:	2800      	cmp	r0, #0
    414c:	d1f0      	bne.n	4130 <__sfp+0x24>
    414e:	230c      	movs	r3, #12
    4150:	0004      	movs	r4, r0
    4152:	603b      	str	r3, [r7, #0]
    4154:	0020      	movs	r0, r4
    4156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4158:	2301      	movs	r3, #1
    415a:	0020      	movs	r0, r4
    415c:	425b      	negs	r3, r3
    415e:	81e3      	strh	r3, [r4, #14]
    4160:	3302      	adds	r3, #2
    4162:	81a3      	strh	r3, [r4, #12]
    4164:	6665      	str	r5, [r4, #100]	; 0x64
    4166:	6025      	str	r5, [r4, #0]
    4168:	60a5      	str	r5, [r4, #8]
    416a:	6065      	str	r5, [r4, #4]
    416c:	6125      	str	r5, [r4, #16]
    416e:	6165      	str	r5, [r4, #20]
    4170:	61a5      	str	r5, [r4, #24]
    4172:	2208      	movs	r2, #8
    4174:	0029      	movs	r1, r5
    4176:	305c      	adds	r0, #92	; 0x5c
    4178:	f7ff fc83 	bl	3a82 <memset>
    417c:	6365      	str	r5, [r4, #52]	; 0x34
    417e:	63a5      	str	r5, [r4, #56]	; 0x38
    4180:	64a5      	str	r5, [r4, #72]	; 0x48
    4182:	64e5      	str	r5, [r4, #76]	; 0x4c
    4184:	e7e6      	b.n	4154 <__sfp+0x48>
    4186:	46c0      	nop			; (mov r8, r8)
    4188:	00006ef4 	.word	0x00006ef4

0000418c <_fwalk_reent>:
    418c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    418e:	0004      	movs	r4, r0
    4190:	0007      	movs	r7, r0
    4192:	2600      	movs	r6, #0
    4194:	9101      	str	r1, [sp, #4]
    4196:	3448      	adds	r4, #72	; 0x48
    4198:	2c00      	cmp	r4, #0
    419a:	d101      	bne.n	41a0 <_fwalk_reent+0x14>
    419c:	0030      	movs	r0, r6
    419e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    41a0:	6863      	ldr	r3, [r4, #4]
    41a2:	68a5      	ldr	r5, [r4, #8]
    41a4:	9300      	str	r3, [sp, #0]
    41a6:	9b00      	ldr	r3, [sp, #0]
    41a8:	3b01      	subs	r3, #1
    41aa:	9300      	str	r3, [sp, #0]
    41ac:	d501      	bpl.n	41b2 <_fwalk_reent+0x26>
    41ae:	6824      	ldr	r4, [r4, #0]
    41b0:	e7f2      	b.n	4198 <_fwalk_reent+0xc>
    41b2:	89ab      	ldrh	r3, [r5, #12]
    41b4:	2b01      	cmp	r3, #1
    41b6:	d908      	bls.n	41ca <_fwalk_reent+0x3e>
    41b8:	220e      	movs	r2, #14
    41ba:	5eab      	ldrsh	r3, [r5, r2]
    41bc:	3301      	adds	r3, #1
    41be:	d004      	beq.n	41ca <_fwalk_reent+0x3e>
    41c0:	0029      	movs	r1, r5
    41c2:	0038      	movs	r0, r7
    41c4:	9b01      	ldr	r3, [sp, #4]
    41c6:	4798      	blx	r3
    41c8:	4306      	orrs	r6, r0
    41ca:	3568      	adds	r5, #104	; 0x68
    41cc:	e7eb      	b.n	41a6 <_fwalk_reent+0x1a>
	...

000041d0 <__swhatbuf_r>:
    41d0:	b570      	push	{r4, r5, r6, lr}
    41d2:	000e      	movs	r6, r1
    41d4:	001d      	movs	r5, r3
    41d6:	230e      	movs	r3, #14
    41d8:	5ec9      	ldrsh	r1, [r1, r3]
    41da:	b090      	sub	sp, #64	; 0x40
    41dc:	0014      	movs	r4, r2
    41de:	2900      	cmp	r1, #0
    41e0:	da07      	bge.n	41f2 <__swhatbuf_r+0x22>
    41e2:	2300      	movs	r3, #0
    41e4:	602b      	str	r3, [r5, #0]
    41e6:	89b3      	ldrh	r3, [r6, #12]
    41e8:	061b      	lsls	r3, r3, #24
    41ea:	d411      	bmi.n	4210 <__swhatbuf_r+0x40>
    41ec:	2380      	movs	r3, #128	; 0x80
    41ee:	00db      	lsls	r3, r3, #3
    41f0:	e00f      	b.n	4212 <__swhatbuf_r+0x42>
    41f2:	aa01      	add	r2, sp, #4
    41f4:	f000 fc9a 	bl	4b2c <_fstat_r>
    41f8:	2800      	cmp	r0, #0
    41fa:	dbf2      	blt.n	41e2 <__swhatbuf_r+0x12>
    41fc:	22f0      	movs	r2, #240	; 0xf0
    41fe:	9b02      	ldr	r3, [sp, #8]
    4200:	0212      	lsls	r2, r2, #8
    4202:	4013      	ands	r3, r2
    4204:	4a05      	ldr	r2, [pc, #20]	; (421c <__swhatbuf_r+0x4c>)
    4206:	189b      	adds	r3, r3, r2
    4208:	425a      	negs	r2, r3
    420a:	4153      	adcs	r3, r2
    420c:	602b      	str	r3, [r5, #0]
    420e:	e7ed      	b.n	41ec <__swhatbuf_r+0x1c>
    4210:	2340      	movs	r3, #64	; 0x40
    4212:	2000      	movs	r0, #0
    4214:	6023      	str	r3, [r4, #0]
    4216:	b010      	add	sp, #64	; 0x40
    4218:	bd70      	pop	{r4, r5, r6, pc}
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	ffffe000 	.word	0xffffe000

00004220 <__smakebuf_r>:
    4220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4222:	2602      	movs	r6, #2
    4224:	898b      	ldrh	r3, [r1, #12]
    4226:	0005      	movs	r5, r0
    4228:	000c      	movs	r4, r1
    422a:	4233      	tst	r3, r6
    422c:	d006      	beq.n	423c <__smakebuf_r+0x1c>
    422e:	0023      	movs	r3, r4
    4230:	3347      	adds	r3, #71	; 0x47
    4232:	6023      	str	r3, [r4, #0]
    4234:	6123      	str	r3, [r4, #16]
    4236:	2301      	movs	r3, #1
    4238:	6163      	str	r3, [r4, #20]
    423a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    423c:	ab01      	add	r3, sp, #4
    423e:	466a      	mov	r2, sp
    4240:	f7ff ffc6 	bl	41d0 <__swhatbuf_r>
    4244:	9900      	ldr	r1, [sp, #0]
    4246:	0007      	movs	r7, r0
    4248:	0028      	movs	r0, r5
    424a:	f7ff fc6d 	bl	3b28 <_malloc_r>
    424e:	2800      	cmp	r0, #0
    4250:	d108      	bne.n	4264 <__smakebuf_r+0x44>
    4252:	220c      	movs	r2, #12
    4254:	5ea3      	ldrsh	r3, [r4, r2]
    4256:	059a      	lsls	r2, r3, #22
    4258:	d4ef      	bmi.n	423a <__smakebuf_r+0x1a>
    425a:	2203      	movs	r2, #3
    425c:	4393      	bics	r3, r2
    425e:	431e      	orrs	r6, r3
    4260:	81a6      	strh	r6, [r4, #12]
    4262:	e7e4      	b.n	422e <__smakebuf_r+0xe>
    4264:	4b0f      	ldr	r3, [pc, #60]	; (42a4 <__smakebuf_r+0x84>)
    4266:	62ab      	str	r3, [r5, #40]	; 0x28
    4268:	2380      	movs	r3, #128	; 0x80
    426a:	89a2      	ldrh	r2, [r4, #12]
    426c:	6020      	str	r0, [r4, #0]
    426e:	4313      	orrs	r3, r2
    4270:	81a3      	strh	r3, [r4, #12]
    4272:	9b00      	ldr	r3, [sp, #0]
    4274:	6120      	str	r0, [r4, #16]
    4276:	6163      	str	r3, [r4, #20]
    4278:	9b01      	ldr	r3, [sp, #4]
    427a:	2b00      	cmp	r3, #0
    427c:	d00d      	beq.n	429a <__smakebuf_r+0x7a>
    427e:	230e      	movs	r3, #14
    4280:	5ee1      	ldrsh	r1, [r4, r3]
    4282:	0028      	movs	r0, r5
    4284:	f000 fc64 	bl	4b50 <_isatty_r>
    4288:	2800      	cmp	r0, #0
    428a:	d006      	beq.n	429a <__smakebuf_r+0x7a>
    428c:	2203      	movs	r2, #3
    428e:	89a3      	ldrh	r3, [r4, #12]
    4290:	4393      	bics	r3, r2
    4292:	001a      	movs	r2, r3
    4294:	2301      	movs	r3, #1
    4296:	4313      	orrs	r3, r2
    4298:	81a3      	strh	r3, [r4, #12]
    429a:	89a0      	ldrh	r0, [r4, #12]
    429c:	4338      	orrs	r0, r7
    429e:	81a0      	strh	r0, [r4, #12]
    42a0:	e7cb      	b.n	423a <__smakebuf_r+0x1a>
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	00004021 	.word	0x00004021

000042a8 <__malloc_lock>:
    42a8:	4770      	bx	lr

000042aa <__malloc_unlock>:
    42aa:	4770      	bx	lr

000042ac <__sfputc_r>:
    42ac:	6893      	ldr	r3, [r2, #8]
    42ae:	b510      	push	{r4, lr}
    42b0:	3b01      	subs	r3, #1
    42b2:	6093      	str	r3, [r2, #8]
    42b4:	2b00      	cmp	r3, #0
    42b6:	da05      	bge.n	42c4 <__sfputc_r+0x18>
    42b8:	6994      	ldr	r4, [r2, #24]
    42ba:	42a3      	cmp	r3, r4
    42bc:	db08      	blt.n	42d0 <__sfputc_r+0x24>
    42be:	b2cb      	uxtb	r3, r1
    42c0:	2b0a      	cmp	r3, #10
    42c2:	d005      	beq.n	42d0 <__sfputc_r+0x24>
    42c4:	6813      	ldr	r3, [r2, #0]
    42c6:	1c58      	adds	r0, r3, #1
    42c8:	6010      	str	r0, [r2, #0]
    42ca:	7019      	strb	r1, [r3, #0]
    42cc:	b2c8      	uxtb	r0, r1
    42ce:	bd10      	pop	{r4, pc}
    42d0:	f000 fb3a 	bl	4948 <__swbuf_r>
    42d4:	e7fb      	b.n	42ce <__sfputc_r+0x22>

000042d6 <__sfputs_r>:
    42d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42d8:	0006      	movs	r6, r0
    42da:	000f      	movs	r7, r1
    42dc:	0014      	movs	r4, r2
    42de:	18d5      	adds	r5, r2, r3
    42e0:	42ac      	cmp	r4, r5
    42e2:	d101      	bne.n	42e8 <__sfputs_r+0x12>
    42e4:	2000      	movs	r0, #0
    42e6:	e007      	b.n	42f8 <__sfputs_r+0x22>
    42e8:	7821      	ldrb	r1, [r4, #0]
    42ea:	003a      	movs	r2, r7
    42ec:	0030      	movs	r0, r6
    42ee:	f7ff ffdd 	bl	42ac <__sfputc_r>
    42f2:	3401      	adds	r4, #1
    42f4:	1c43      	adds	r3, r0, #1
    42f6:	d1f3      	bne.n	42e0 <__sfputs_r+0xa>
    42f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000042fc <_vfiprintf_r>:
    42fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    42fe:	b09f      	sub	sp, #124	; 0x7c
    4300:	0006      	movs	r6, r0
    4302:	000f      	movs	r7, r1
    4304:	0014      	movs	r4, r2
    4306:	9305      	str	r3, [sp, #20]
    4308:	2800      	cmp	r0, #0
    430a:	d004      	beq.n	4316 <_vfiprintf_r+0x1a>
    430c:	6983      	ldr	r3, [r0, #24]
    430e:	2b00      	cmp	r3, #0
    4310:	d101      	bne.n	4316 <_vfiprintf_r+0x1a>
    4312:	f7ff fec7 	bl	40a4 <__sinit>
    4316:	4b7f      	ldr	r3, [pc, #508]	; (4514 <_vfiprintf_r+0x218>)
    4318:	429f      	cmp	r7, r3
    431a:	d15c      	bne.n	43d6 <_vfiprintf_r+0xda>
    431c:	6877      	ldr	r7, [r6, #4]
    431e:	89bb      	ldrh	r3, [r7, #12]
    4320:	071b      	lsls	r3, r3, #28
    4322:	d562      	bpl.n	43ea <_vfiprintf_r+0xee>
    4324:	693b      	ldr	r3, [r7, #16]
    4326:	2b00      	cmp	r3, #0
    4328:	d05f      	beq.n	43ea <_vfiprintf_r+0xee>
    432a:	2300      	movs	r3, #0
    432c:	ad06      	add	r5, sp, #24
    432e:	616b      	str	r3, [r5, #20]
    4330:	3320      	adds	r3, #32
    4332:	766b      	strb	r3, [r5, #25]
    4334:	3310      	adds	r3, #16
    4336:	76ab      	strb	r3, [r5, #26]
    4338:	9402      	str	r4, [sp, #8]
    433a:	9c02      	ldr	r4, [sp, #8]
    433c:	7823      	ldrb	r3, [r4, #0]
    433e:	2b00      	cmp	r3, #0
    4340:	d15d      	bne.n	43fe <_vfiprintf_r+0x102>
    4342:	9b02      	ldr	r3, [sp, #8]
    4344:	1ae3      	subs	r3, r4, r3
    4346:	9304      	str	r3, [sp, #16]
    4348:	d00d      	beq.n	4366 <_vfiprintf_r+0x6a>
    434a:	9b04      	ldr	r3, [sp, #16]
    434c:	9a02      	ldr	r2, [sp, #8]
    434e:	0039      	movs	r1, r7
    4350:	0030      	movs	r0, r6
    4352:	f7ff ffc0 	bl	42d6 <__sfputs_r>
    4356:	1c43      	adds	r3, r0, #1
    4358:	d100      	bne.n	435c <_vfiprintf_r+0x60>
    435a:	e0cc      	b.n	44f6 <_vfiprintf_r+0x1fa>
    435c:	696a      	ldr	r2, [r5, #20]
    435e:	9b04      	ldr	r3, [sp, #16]
    4360:	4694      	mov	ip, r2
    4362:	4463      	add	r3, ip
    4364:	616b      	str	r3, [r5, #20]
    4366:	7823      	ldrb	r3, [r4, #0]
    4368:	2b00      	cmp	r3, #0
    436a:	d100      	bne.n	436e <_vfiprintf_r+0x72>
    436c:	e0c3      	b.n	44f6 <_vfiprintf_r+0x1fa>
    436e:	2201      	movs	r2, #1
    4370:	2300      	movs	r3, #0
    4372:	4252      	negs	r2, r2
    4374:	606a      	str	r2, [r5, #4]
    4376:	a902      	add	r1, sp, #8
    4378:	3254      	adds	r2, #84	; 0x54
    437a:	1852      	adds	r2, r2, r1
    437c:	3401      	adds	r4, #1
    437e:	602b      	str	r3, [r5, #0]
    4380:	60eb      	str	r3, [r5, #12]
    4382:	60ab      	str	r3, [r5, #8]
    4384:	7013      	strb	r3, [r2, #0]
    4386:	65ab      	str	r3, [r5, #88]	; 0x58
    4388:	7821      	ldrb	r1, [r4, #0]
    438a:	2205      	movs	r2, #5
    438c:	4862      	ldr	r0, [pc, #392]	; (4518 <_vfiprintf_r+0x21c>)
    438e:	f000 fc05 	bl	4b9c <memchr>
    4392:	1c63      	adds	r3, r4, #1
    4394:	469c      	mov	ip, r3
    4396:	2800      	cmp	r0, #0
    4398:	d135      	bne.n	4406 <_vfiprintf_r+0x10a>
    439a:	6829      	ldr	r1, [r5, #0]
    439c:	06cb      	lsls	r3, r1, #27
    439e:	d504      	bpl.n	43aa <_vfiprintf_r+0xae>
    43a0:	2353      	movs	r3, #83	; 0x53
    43a2:	aa02      	add	r2, sp, #8
    43a4:	3020      	adds	r0, #32
    43a6:	189b      	adds	r3, r3, r2
    43a8:	7018      	strb	r0, [r3, #0]
    43aa:	070b      	lsls	r3, r1, #28
    43ac:	d504      	bpl.n	43b8 <_vfiprintf_r+0xbc>
    43ae:	2353      	movs	r3, #83	; 0x53
    43b0:	202b      	movs	r0, #43	; 0x2b
    43b2:	aa02      	add	r2, sp, #8
    43b4:	189b      	adds	r3, r3, r2
    43b6:	7018      	strb	r0, [r3, #0]
    43b8:	7823      	ldrb	r3, [r4, #0]
    43ba:	2b2a      	cmp	r3, #42	; 0x2a
    43bc:	d02c      	beq.n	4418 <_vfiprintf_r+0x11c>
    43be:	2000      	movs	r0, #0
    43c0:	210a      	movs	r1, #10
    43c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    43c4:	7822      	ldrb	r2, [r4, #0]
    43c6:	3a30      	subs	r2, #48	; 0x30
    43c8:	2a09      	cmp	r2, #9
    43ca:	d800      	bhi.n	43ce <_vfiprintf_r+0xd2>
    43cc:	e06b      	b.n	44a6 <_vfiprintf_r+0x1aa>
    43ce:	2800      	cmp	r0, #0
    43d0:	d02a      	beq.n	4428 <_vfiprintf_r+0x12c>
    43d2:	9309      	str	r3, [sp, #36]	; 0x24
    43d4:	e028      	b.n	4428 <_vfiprintf_r+0x12c>
    43d6:	4b51      	ldr	r3, [pc, #324]	; (451c <_vfiprintf_r+0x220>)
    43d8:	429f      	cmp	r7, r3
    43da:	d101      	bne.n	43e0 <_vfiprintf_r+0xe4>
    43dc:	68b7      	ldr	r7, [r6, #8]
    43de:	e79e      	b.n	431e <_vfiprintf_r+0x22>
    43e0:	4b4f      	ldr	r3, [pc, #316]	; (4520 <_vfiprintf_r+0x224>)
    43e2:	429f      	cmp	r7, r3
    43e4:	d19b      	bne.n	431e <_vfiprintf_r+0x22>
    43e6:	68f7      	ldr	r7, [r6, #12]
    43e8:	e799      	b.n	431e <_vfiprintf_r+0x22>
    43ea:	0039      	movs	r1, r7
    43ec:	0030      	movs	r0, r6
    43ee:	f000 fb15 	bl	4a1c <__swsetup_r>
    43f2:	2800      	cmp	r0, #0
    43f4:	d099      	beq.n	432a <_vfiprintf_r+0x2e>
    43f6:	2001      	movs	r0, #1
    43f8:	4240      	negs	r0, r0
    43fa:	b01f      	add	sp, #124	; 0x7c
    43fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43fe:	2b25      	cmp	r3, #37	; 0x25
    4400:	d09f      	beq.n	4342 <_vfiprintf_r+0x46>
    4402:	3401      	adds	r4, #1
    4404:	e79a      	b.n	433c <_vfiprintf_r+0x40>
    4406:	4b44      	ldr	r3, [pc, #272]	; (4518 <_vfiprintf_r+0x21c>)
    4408:	6829      	ldr	r1, [r5, #0]
    440a:	1ac0      	subs	r0, r0, r3
    440c:	2301      	movs	r3, #1
    440e:	4083      	lsls	r3, r0
    4410:	430b      	orrs	r3, r1
    4412:	602b      	str	r3, [r5, #0]
    4414:	4664      	mov	r4, ip
    4416:	e7b7      	b.n	4388 <_vfiprintf_r+0x8c>
    4418:	9b05      	ldr	r3, [sp, #20]
    441a:	1d18      	adds	r0, r3, #4
    441c:	681b      	ldr	r3, [r3, #0]
    441e:	9005      	str	r0, [sp, #20]
    4420:	2b00      	cmp	r3, #0
    4422:	db3a      	blt.n	449a <_vfiprintf_r+0x19e>
    4424:	9309      	str	r3, [sp, #36]	; 0x24
    4426:	4664      	mov	r4, ip
    4428:	7823      	ldrb	r3, [r4, #0]
    442a:	2b2e      	cmp	r3, #46	; 0x2e
    442c:	d10b      	bne.n	4446 <_vfiprintf_r+0x14a>
    442e:	7863      	ldrb	r3, [r4, #1]
    4430:	1c62      	adds	r2, r4, #1
    4432:	2b2a      	cmp	r3, #42	; 0x2a
    4434:	d13f      	bne.n	44b6 <_vfiprintf_r+0x1ba>
    4436:	9b05      	ldr	r3, [sp, #20]
    4438:	3402      	adds	r4, #2
    443a:	1d1a      	adds	r2, r3, #4
    443c:	681b      	ldr	r3, [r3, #0]
    443e:	9205      	str	r2, [sp, #20]
    4440:	2b00      	cmp	r3, #0
    4442:	db35      	blt.n	44b0 <_vfiprintf_r+0x1b4>
    4444:	9307      	str	r3, [sp, #28]
    4446:	7821      	ldrb	r1, [r4, #0]
    4448:	2203      	movs	r2, #3
    444a:	4836      	ldr	r0, [pc, #216]	; (4524 <_vfiprintf_r+0x228>)
    444c:	f000 fba6 	bl	4b9c <memchr>
    4450:	2800      	cmp	r0, #0
    4452:	d007      	beq.n	4464 <_vfiprintf_r+0x168>
    4454:	4b33      	ldr	r3, [pc, #204]	; (4524 <_vfiprintf_r+0x228>)
    4456:	682a      	ldr	r2, [r5, #0]
    4458:	1ac0      	subs	r0, r0, r3
    445a:	2340      	movs	r3, #64	; 0x40
    445c:	4083      	lsls	r3, r0
    445e:	4313      	orrs	r3, r2
    4460:	602b      	str	r3, [r5, #0]
    4462:	3401      	adds	r4, #1
    4464:	7821      	ldrb	r1, [r4, #0]
    4466:	1c63      	adds	r3, r4, #1
    4468:	2206      	movs	r2, #6
    446a:	482f      	ldr	r0, [pc, #188]	; (4528 <_vfiprintf_r+0x22c>)
    446c:	9302      	str	r3, [sp, #8]
    446e:	7629      	strb	r1, [r5, #24]
    4470:	f000 fb94 	bl	4b9c <memchr>
    4474:	2800      	cmp	r0, #0
    4476:	d044      	beq.n	4502 <_vfiprintf_r+0x206>
    4478:	4b2c      	ldr	r3, [pc, #176]	; (452c <_vfiprintf_r+0x230>)
    447a:	2b00      	cmp	r3, #0
    447c:	d12f      	bne.n	44de <_vfiprintf_r+0x1e2>
    447e:	6829      	ldr	r1, [r5, #0]
    4480:	9b05      	ldr	r3, [sp, #20]
    4482:	2207      	movs	r2, #7
    4484:	05c9      	lsls	r1, r1, #23
    4486:	d528      	bpl.n	44da <_vfiprintf_r+0x1de>
    4488:	189b      	adds	r3, r3, r2
    448a:	4393      	bics	r3, r2
    448c:	3308      	adds	r3, #8
    448e:	9305      	str	r3, [sp, #20]
    4490:	696b      	ldr	r3, [r5, #20]
    4492:	9a03      	ldr	r2, [sp, #12]
    4494:	189b      	adds	r3, r3, r2
    4496:	616b      	str	r3, [r5, #20]
    4498:	e74f      	b.n	433a <_vfiprintf_r+0x3e>
    449a:	425b      	negs	r3, r3
    449c:	60eb      	str	r3, [r5, #12]
    449e:	2302      	movs	r3, #2
    44a0:	430b      	orrs	r3, r1
    44a2:	602b      	str	r3, [r5, #0]
    44a4:	e7bf      	b.n	4426 <_vfiprintf_r+0x12a>
    44a6:	434b      	muls	r3, r1
    44a8:	3401      	adds	r4, #1
    44aa:	189b      	adds	r3, r3, r2
    44ac:	2001      	movs	r0, #1
    44ae:	e789      	b.n	43c4 <_vfiprintf_r+0xc8>
    44b0:	2301      	movs	r3, #1
    44b2:	425b      	negs	r3, r3
    44b4:	e7c6      	b.n	4444 <_vfiprintf_r+0x148>
    44b6:	2300      	movs	r3, #0
    44b8:	0014      	movs	r4, r2
    44ba:	200a      	movs	r0, #10
    44bc:	001a      	movs	r2, r3
    44be:	606b      	str	r3, [r5, #4]
    44c0:	7821      	ldrb	r1, [r4, #0]
    44c2:	3930      	subs	r1, #48	; 0x30
    44c4:	2909      	cmp	r1, #9
    44c6:	d903      	bls.n	44d0 <_vfiprintf_r+0x1d4>
    44c8:	2b00      	cmp	r3, #0
    44ca:	d0bc      	beq.n	4446 <_vfiprintf_r+0x14a>
    44cc:	9207      	str	r2, [sp, #28]
    44ce:	e7ba      	b.n	4446 <_vfiprintf_r+0x14a>
    44d0:	4342      	muls	r2, r0
    44d2:	3401      	adds	r4, #1
    44d4:	1852      	adds	r2, r2, r1
    44d6:	2301      	movs	r3, #1
    44d8:	e7f2      	b.n	44c0 <_vfiprintf_r+0x1c4>
    44da:	3307      	adds	r3, #7
    44dc:	e7d5      	b.n	448a <_vfiprintf_r+0x18e>
    44de:	ab05      	add	r3, sp, #20
    44e0:	9300      	str	r3, [sp, #0]
    44e2:	003a      	movs	r2, r7
    44e4:	4b12      	ldr	r3, [pc, #72]	; (4530 <_vfiprintf_r+0x234>)
    44e6:	0029      	movs	r1, r5
    44e8:	0030      	movs	r0, r6
    44ea:	e000      	b.n	44ee <_vfiprintf_r+0x1f2>
    44ec:	bf00      	nop
    44ee:	9003      	str	r0, [sp, #12]
    44f0:	9b03      	ldr	r3, [sp, #12]
    44f2:	3301      	adds	r3, #1
    44f4:	d1cc      	bne.n	4490 <_vfiprintf_r+0x194>
    44f6:	89bb      	ldrh	r3, [r7, #12]
    44f8:	065b      	lsls	r3, r3, #25
    44fa:	d500      	bpl.n	44fe <_vfiprintf_r+0x202>
    44fc:	e77b      	b.n	43f6 <_vfiprintf_r+0xfa>
    44fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4500:	e77b      	b.n	43fa <_vfiprintf_r+0xfe>
    4502:	ab05      	add	r3, sp, #20
    4504:	9300      	str	r3, [sp, #0]
    4506:	003a      	movs	r2, r7
    4508:	4b09      	ldr	r3, [pc, #36]	; (4530 <_vfiprintf_r+0x234>)
    450a:	0029      	movs	r1, r5
    450c:	0030      	movs	r0, r6
    450e:	f000 f87f 	bl	4610 <_printf_i>
    4512:	e7ec      	b.n	44ee <_vfiprintf_r+0x1f2>
    4514:	00006f18 	.word	0x00006f18
    4518:	00006f58 	.word	0x00006f58
    451c:	00006f38 	.word	0x00006f38
    4520:	00006ef8 	.word	0x00006ef8
    4524:	00006f5e 	.word	0x00006f5e
    4528:	00006f62 	.word	0x00006f62
    452c:	00000000 	.word	0x00000000
    4530:	000042d7 	.word	0x000042d7

00004534 <_printf_common>:
    4534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4536:	0015      	movs	r5, r2
    4538:	9301      	str	r3, [sp, #4]
    453a:	688a      	ldr	r2, [r1, #8]
    453c:	690b      	ldr	r3, [r1, #16]
    453e:	9000      	str	r0, [sp, #0]
    4540:	000c      	movs	r4, r1
    4542:	4293      	cmp	r3, r2
    4544:	da00      	bge.n	4548 <_printf_common+0x14>
    4546:	0013      	movs	r3, r2
    4548:	0022      	movs	r2, r4
    454a:	602b      	str	r3, [r5, #0]
    454c:	3243      	adds	r2, #67	; 0x43
    454e:	7812      	ldrb	r2, [r2, #0]
    4550:	2a00      	cmp	r2, #0
    4552:	d001      	beq.n	4558 <_printf_common+0x24>
    4554:	3301      	adds	r3, #1
    4556:	602b      	str	r3, [r5, #0]
    4558:	6823      	ldr	r3, [r4, #0]
    455a:	069b      	lsls	r3, r3, #26
    455c:	d502      	bpl.n	4564 <_printf_common+0x30>
    455e:	682b      	ldr	r3, [r5, #0]
    4560:	3302      	adds	r3, #2
    4562:	602b      	str	r3, [r5, #0]
    4564:	2706      	movs	r7, #6
    4566:	6823      	ldr	r3, [r4, #0]
    4568:	401f      	ands	r7, r3
    456a:	d027      	beq.n	45bc <_printf_common+0x88>
    456c:	0023      	movs	r3, r4
    456e:	3343      	adds	r3, #67	; 0x43
    4570:	781b      	ldrb	r3, [r3, #0]
    4572:	1e5a      	subs	r2, r3, #1
    4574:	4193      	sbcs	r3, r2
    4576:	6822      	ldr	r2, [r4, #0]
    4578:	0692      	lsls	r2, r2, #26
    457a:	d430      	bmi.n	45de <_printf_common+0xaa>
    457c:	0022      	movs	r2, r4
    457e:	9901      	ldr	r1, [sp, #4]
    4580:	3243      	adds	r2, #67	; 0x43
    4582:	9800      	ldr	r0, [sp, #0]
    4584:	9e08      	ldr	r6, [sp, #32]
    4586:	47b0      	blx	r6
    4588:	1c43      	adds	r3, r0, #1
    458a:	d025      	beq.n	45d8 <_printf_common+0xa4>
    458c:	2306      	movs	r3, #6
    458e:	6820      	ldr	r0, [r4, #0]
    4590:	682a      	ldr	r2, [r5, #0]
    4592:	68e1      	ldr	r1, [r4, #12]
    4594:	4003      	ands	r3, r0
    4596:	2500      	movs	r5, #0
    4598:	2b04      	cmp	r3, #4
    459a:	d103      	bne.n	45a4 <_printf_common+0x70>
    459c:	1a8d      	subs	r5, r1, r2
    459e:	43eb      	mvns	r3, r5
    45a0:	17db      	asrs	r3, r3, #31
    45a2:	401d      	ands	r5, r3
    45a4:	68a3      	ldr	r3, [r4, #8]
    45a6:	6922      	ldr	r2, [r4, #16]
    45a8:	4293      	cmp	r3, r2
    45aa:	dd01      	ble.n	45b0 <_printf_common+0x7c>
    45ac:	1a9b      	subs	r3, r3, r2
    45ae:	18ed      	adds	r5, r5, r3
    45b0:	2700      	movs	r7, #0
    45b2:	42bd      	cmp	r5, r7
    45b4:	d120      	bne.n	45f8 <_printf_common+0xc4>
    45b6:	2000      	movs	r0, #0
    45b8:	e010      	b.n	45dc <_printf_common+0xa8>
    45ba:	3701      	adds	r7, #1
    45bc:	68e3      	ldr	r3, [r4, #12]
    45be:	682a      	ldr	r2, [r5, #0]
    45c0:	1a9b      	subs	r3, r3, r2
    45c2:	429f      	cmp	r7, r3
    45c4:	dad2      	bge.n	456c <_printf_common+0x38>
    45c6:	0022      	movs	r2, r4
    45c8:	2301      	movs	r3, #1
    45ca:	3219      	adds	r2, #25
    45cc:	9901      	ldr	r1, [sp, #4]
    45ce:	9800      	ldr	r0, [sp, #0]
    45d0:	9e08      	ldr	r6, [sp, #32]
    45d2:	47b0      	blx	r6
    45d4:	1c43      	adds	r3, r0, #1
    45d6:	d1f0      	bne.n	45ba <_printf_common+0x86>
    45d8:	2001      	movs	r0, #1
    45da:	4240      	negs	r0, r0
    45dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    45de:	2030      	movs	r0, #48	; 0x30
    45e0:	18e1      	adds	r1, r4, r3
    45e2:	3143      	adds	r1, #67	; 0x43
    45e4:	7008      	strb	r0, [r1, #0]
    45e6:	0021      	movs	r1, r4
    45e8:	1c5a      	adds	r2, r3, #1
    45ea:	3145      	adds	r1, #69	; 0x45
    45ec:	7809      	ldrb	r1, [r1, #0]
    45ee:	18a2      	adds	r2, r4, r2
    45f0:	3243      	adds	r2, #67	; 0x43
    45f2:	3302      	adds	r3, #2
    45f4:	7011      	strb	r1, [r2, #0]
    45f6:	e7c1      	b.n	457c <_printf_common+0x48>
    45f8:	0022      	movs	r2, r4
    45fa:	2301      	movs	r3, #1
    45fc:	321a      	adds	r2, #26
    45fe:	9901      	ldr	r1, [sp, #4]
    4600:	9800      	ldr	r0, [sp, #0]
    4602:	9e08      	ldr	r6, [sp, #32]
    4604:	47b0      	blx	r6
    4606:	1c43      	adds	r3, r0, #1
    4608:	d0e6      	beq.n	45d8 <_printf_common+0xa4>
    460a:	3701      	adds	r7, #1
    460c:	e7d1      	b.n	45b2 <_printf_common+0x7e>
	...

00004610 <_printf_i>:
    4610:	b5f0      	push	{r4, r5, r6, r7, lr}
    4612:	b08b      	sub	sp, #44	; 0x2c
    4614:	9206      	str	r2, [sp, #24]
    4616:	000a      	movs	r2, r1
    4618:	3243      	adds	r2, #67	; 0x43
    461a:	9307      	str	r3, [sp, #28]
    461c:	9005      	str	r0, [sp, #20]
    461e:	9204      	str	r2, [sp, #16]
    4620:	7e0a      	ldrb	r2, [r1, #24]
    4622:	000c      	movs	r4, r1
    4624:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4626:	2a6e      	cmp	r2, #110	; 0x6e
    4628:	d100      	bne.n	462c <_printf_i+0x1c>
    462a:	e08f      	b.n	474c <_printf_i+0x13c>
    462c:	d817      	bhi.n	465e <_printf_i+0x4e>
    462e:	2a63      	cmp	r2, #99	; 0x63
    4630:	d02c      	beq.n	468c <_printf_i+0x7c>
    4632:	d808      	bhi.n	4646 <_printf_i+0x36>
    4634:	2a00      	cmp	r2, #0
    4636:	d100      	bne.n	463a <_printf_i+0x2a>
    4638:	e099      	b.n	476e <_printf_i+0x15e>
    463a:	2a58      	cmp	r2, #88	; 0x58
    463c:	d054      	beq.n	46e8 <_printf_i+0xd8>
    463e:	0026      	movs	r6, r4
    4640:	3642      	adds	r6, #66	; 0x42
    4642:	7032      	strb	r2, [r6, #0]
    4644:	e029      	b.n	469a <_printf_i+0x8a>
    4646:	2a64      	cmp	r2, #100	; 0x64
    4648:	d001      	beq.n	464e <_printf_i+0x3e>
    464a:	2a69      	cmp	r2, #105	; 0x69
    464c:	d1f7      	bne.n	463e <_printf_i+0x2e>
    464e:	6821      	ldr	r1, [r4, #0]
    4650:	681a      	ldr	r2, [r3, #0]
    4652:	0608      	lsls	r0, r1, #24
    4654:	d523      	bpl.n	469e <_printf_i+0x8e>
    4656:	1d11      	adds	r1, r2, #4
    4658:	6019      	str	r1, [r3, #0]
    465a:	6815      	ldr	r5, [r2, #0]
    465c:	e025      	b.n	46aa <_printf_i+0x9a>
    465e:	2a73      	cmp	r2, #115	; 0x73
    4660:	d100      	bne.n	4664 <_printf_i+0x54>
    4662:	e088      	b.n	4776 <_printf_i+0x166>
    4664:	d808      	bhi.n	4678 <_printf_i+0x68>
    4666:	2a6f      	cmp	r2, #111	; 0x6f
    4668:	d029      	beq.n	46be <_printf_i+0xae>
    466a:	2a70      	cmp	r2, #112	; 0x70
    466c:	d1e7      	bne.n	463e <_printf_i+0x2e>
    466e:	2220      	movs	r2, #32
    4670:	6809      	ldr	r1, [r1, #0]
    4672:	430a      	orrs	r2, r1
    4674:	6022      	str	r2, [r4, #0]
    4676:	e003      	b.n	4680 <_printf_i+0x70>
    4678:	2a75      	cmp	r2, #117	; 0x75
    467a:	d020      	beq.n	46be <_printf_i+0xae>
    467c:	2a78      	cmp	r2, #120	; 0x78
    467e:	d1de      	bne.n	463e <_printf_i+0x2e>
    4680:	0022      	movs	r2, r4
    4682:	2178      	movs	r1, #120	; 0x78
    4684:	3245      	adds	r2, #69	; 0x45
    4686:	7011      	strb	r1, [r2, #0]
    4688:	4a6c      	ldr	r2, [pc, #432]	; (483c <_printf_i+0x22c>)
    468a:	e030      	b.n	46ee <_printf_i+0xde>
    468c:	000e      	movs	r6, r1
    468e:	681a      	ldr	r2, [r3, #0]
    4690:	3642      	adds	r6, #66	; 0x42
    4692:	1d11      	adds	r1, r2, #4
    4694:	6019      	str	r1, [r3, #0]
    4696:	6813      	ldr	r3, [r2, #0]
    4698:	7033      	strb	r3, [r6, #0]
    469a:	2301      	movs	r3, #1
    469c:	e079      	b.n	4792 <_printf_i+0x182>
    469e:	0649      	lsls	r1, r1, #25
    46a0:	d5d9      	bpl.n	4656 <_printf_i+0x46>
    46a2:	1d11      	adds	r1, r2, #4
    46a4:	6019      	str	r1, [r3, #0]
    46a6:	2300      	movs	r3, #0
    46a8:	5ed5      	ldrsh	r5, [r2, r3]
    46aa:	2d00      	cmp	r5, #0
    46ac:	da03      	bge.n	46b6 <_printf_i+0xa6>
    46ae:	232d      	movs	r3, #45	; 0x2d
    46b0:	9a04      	ldr	r2, [sp, #16]
    46b2:	426d      	negs	r5, r5
    46b4:	7013      	strb	r3, [r2, #0]
    46b6:	4b62      	ldr	r3, [pc, #392]	; (4840 <_printf_i+0x230>)
    46b8:	270a      	movs	r7, #10
    46ba:	9303      	str	r3, [sp, #12]
    46bc:	e02f      	b.n	471e <_printf_i+0x10e>
    46be:	6820      	ldr	r0, [r4, #0]
    46c0:	6819      	ldr	r1, [r3, #0]
    46c2:	0605      	lsls	r5, r0, #24
    46c4:	d503      	bpl.n	46ce <_printf_i+0xbe>
    46c6:	1d08      	adds	r0, r1, #4
    46c8:	6018      	str	r0, [r3, #0]
    46ca:	680d      	ldr	r5, [r1, #0]
    46cc:	e005      	b.n	46da <_printf_i+0xca>
    46ce:	0640      	lsls	r0, r0, #25
    46d0:	d5f9      	bpl.n	46c6 <_printf_i+0xb6>
    46d2:	680d      	ldr	r5, [r1, #0]
    46d4:	1d08      	adds	r0, r1, #4
    46d6:	6018      	str	r0, [r3, #0]
    46d8:	b2ad      	uxth	r5, r5
    46da:	4b59      	ldr	r3, [pc, #356]	; (4840 <_printf_i+0x230>)
    46dc:	2708      	movs	r7, #8
    46de:	9303      	str	r3, [sp, #12]
    46e0:	2a6f      	cmp	r2, #111	; 0x6f
    46e2:	d018      	beq.n	4716 <_printf_i+0x106>
    46e4:	270a      	movs	r7, #10
    46e6:	e016      	b.n	4716 <_printf_i+0x106>
    46e8:	3145      	adds	r1, #69	; 0x45
    46ea:	700a      	strb	r2, [r1, #0]
    46ec:	4a54      	ldr	r2, [pc, #336]	; (4840 <_printf_i+0x230>)
    46ee:	9203      	str	r2, [sp, #12]
    46f0:	681a      	ldr	r2, [r3, #0]
    46f2:	6821      	ldr	r1, [r4, #0]
    46f4:	1d10      	adds	r0, r2, #4
    46f6:	6018      	str	r0, [r3, #0]
    46f8:	6815      	ldr	r5, [r2, #0]
    46fa:	0608      	lsls	r0, r1, #24
    46fc:	d522      	bpl.n	4744 <_printf_i+0x134>
    46fe:	07cb      	lsls	r3, r1, #31
    4700:	d502      	bpl.n	4708 <_printf_i+0xf8>
    4702:	2320      	movs	r3, #32
    4704:	4319      	orrs	r1, r3
    4706:	6021      	str	r1, [r4, #0]
    4708:	2710      	movs	r7, #16
    470a:	2d00      	cmp	r5, #0
    470c:	d103      	bne.n	4716 <_printf_i+0x106>
    470e:	2320      	movs	r3, #32
    4710:	6822      	ldr	r2, [r4, #0]
    4712:	439a      	bics	r2, r3
    4714:	6022      	str	r2, [r4, #0]
    4716:	0023      	movs	r3, r4
    4718:	2200      	movs	r2, #0
    471a:	3343      	adds	r3, #67	; 0x43
    471c:	701a      	strb	r2, [r3, #0]
    471e:	6863      	ldr	r3, [r4, #4]
    4720:	60a3      	str	r3, [r4, #8]
    4722:	2b00      	cmp	r3, #0
    4724:	db5c      	blt.n	47e0 <_printf_i+0x1d0>
    4726:	2204      	movs	r2, #4
    4728:	6821      	ldr	r1, [r4, #0]
    472a:	4391      	bics	r1, r2
    472c:	6021      	str	r1, [r4, #0]
    472e:	2d00      	cmp	r5, #0
    4730:	d158      	bne.n	47e4 <_printf_i+0x1d4>
    4732:	9e04      	ldr	r6, [sp, #16]
    4734:	2b00      	cmp	r3, #0
    4736:	d064      	beq.n	4802 <_printf_i+0x1f2>
    4738:	0026      	movs	r6, r4
    473a:	9b03      	ldr	r3, [sp, #12]
    473c:	3642      	adds	r6, #66	; 0x42
    473e:	781b      	ldrb	r3, [r3, #0]
    4740:	7033      	strb	r3, [r6, #0]
    4742:	e05e      	b.n	4802 <_printf_i+0x1f2>
    4744:	0648      	lsls	r0, r1, #25
    4746:	d5da      	bpl.n	46fe <_printf_i+0xee>
    4748:	b2ad      	uxth	r5, r5
    474a:	e7d8      	b.n	46fe <_printf_i+0xee>
    474c:	6809      	ldr	r1, [r1, #0]
    474e:	681a      	ldr	r2, [r3, #0]
    4750:	0608      	lsls	r0, r1, #24
    4752:	d505      	bpl.n	4760 <_printf_i+0x150>
    4754:	1d11      	adds	r1, r2, #4
    4756:	6019      	str	r1, [r3, #0]
    4758:	6813      	ldr	r3, [r2, #0]
    475a:	6962      	ldr	r2, [r4, #20]
    475c:	601a      	str	r2, [r3, #0]
    475e:	e006      	b.n	476e <_printf_i+0x15e>
    4760:	0649      	lsls	r1, r1, #25
    4762:	d5f7      	bpl.n	4754 <_printf_i+0x144>
    4764:	1d11      	adds	r1, r2, #4
    4766:	6019      	str	r1, [r3, #0]
    4768:	6813      	ldr	r3, [r2, #0]
    476a:	8aa2      	ldrh	r2, [r4, #20]
    476c:	801a      	strh	r2, [r3, #0]
    476e:	2300      	movs	r3, #0
    4770:	9e04      	ldr	r6, [sp, #16]
    4772:	6123      	str	r3, [r4, #16]
    4774:	e054      	b.n	4820 <_printf_i+0x210>
    4776:	681a      	ldr	r2, [r3, #0]
    4778:	1d11      	adds	r1, r2, #4
    477a:	6019      	str	r1, [r3, #0]
    477c:	6816      	ldr	r6, [r2, #0]
    477e:	2100      	movs	r1, #0
    4780:	6862      	ldr	r2, [r4, #4]
    4782:	0030      	movs	r0, r6
    4784:	f000 fa0a 	bl	4b9c <memchr>
    4788:	2800      	cmp	r0, #0
    478a:	d001      	beq.n	4790 <_printf_i+0x180>
    478c:	1b80      	subs	r0, r0, r6
    478e:	6060      	str	r0, [r4, #4]
    4790:	6863      	ldr	r3, [r4, #4]
    4792:	6123      	str	r3, [r4, #16]
    4794:	2300      	movs	r3, #0
    4796:	9a04      	ldr	r2, [sp, #16]
    4798:	7013      	strb	r3, [r2, #0]
    479a:	e041      	b.n	4820 <_printf_i+0x210>
    479c:	6923      	ldr	r3, [r4, #16]
    479e:	0032      	movs	r2, r6
    47a0:	9906      	ldr	r1, [sp, #24]
    47a2:	9805      	ldr	r0, [sp, #20]
    47a4:	9d07      	ldr	r5, [sp, #28]
    47a6:	47a8      	blx	r5
    47a8:	1c43      	adds	r3, r0, #1
    47aa:	d043      	beq.n	4834 <_printf_i+0x224>
    47ac:	6823      	ldr	r3, [r4, #0]
    47ae:	2500      	movs	r5, #0
    47b0:	079b      	lsls	r3, r3, #30
    47b2:	d40f      	bmi.n	47d4 <_printf_i+0x1c4>
    47b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    47b6:	68e0      	ldr	r0, [r4, #12]
    47b8:	4298      	cmp	r0, r3
    47ba:	da3d      	bge.n	4838 <_printf_i+0x228>
    47bc:	0018      	movs	r0, r3
    47be:	e03b      	b.n	4838 <_printf_i+0x228>
    47c0:	0022      	movs	r2, r4
    47c2:	2301      	movs	r3, #1
    47c4:	3219      	adds	r2, #25
    47c6:	9906      	ldr	r1, [sp, #24]
    47c8:	9805      	ldr	r0, [sp, #20]
    47ca:	9e07      	ldr	r6, [sp, #28]
    47cc:	47b0      	blx	r6
    47ce:	1c43      	adds	r3, r0, #1
    47d0:	d030      	beq.n	4834 <_printf_i+0x224>
    47d2:	3501      	adds	r5, #1
    47d4:	68e3      	ldr	r3, [r4, #12]
    47d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    47d8:	1a9b      	subs	r3, r3, r2
    47da:	429d      	cmp	r5, r3
    47dc:	dbf0      	blt.n	47c0 <_printf_i+0x1b0>
    47de:	e7e9      	b.n	47b4 <_printf_i+0x1a4>
    47e0:	2d00      	cmp	r5, #0
    47e2:	d0a9      	beq.n	4738 <_printf_i+0x128>
    47e4:	9e04      	ldr	r6, [sp, #16]
    47e6:	0028      	movs	r0, r5
    47e8:	0039      	movs	r1, r7
    47ea:	f7fe fff9 	bl	37e0 <__aeabi_uidivmod>
    47ee:	9b03      	ldr	r3, [sp, #12]
    47f0:	3e01      	subs	r6, #1
    47f2:	5c5b      	ldrb	r3, [r3, r1]
    47f4:	0028      	movs	r0, r5
    47f6:	7033      	strb	r3, [r6, #0]
    47f8:	0039      	movs	r1, r7
    47fa:	f7fe ff6b 	bl	36d4 <__udivsi3>
    47fe:	1e05      	subs	r5, r0, #0
    4800:	d1f1      	bne.n	47e6 <_printf_i+0x1d6>
    4802:	2f08      	cmp	r7, #8
    4804:	d109      	bne.n	481a <_printf_i+0x20a>
    4806:	6823      	ldr	r3, [r4, #0]
    4808:	07db      	lsls	r3, r3, #31
    480a:	d506      	bpl.n	481a <_printf_i+0x20a>
    480c:	6863      	ldr	r3, [r4, #4]
    480e:	6922      	ldr	r2, [r4, #16]
    4810:	4293      	cmp	r3, r2
    4812:	dc02      	bgt.n	481a <_printf_i+0x20a>
    4814:	2330      	movs	r3, #48	; 0x30
    4816:	3e01      	subs	r6, #1
    4818:	7033      	strb	r3, [r6, #0]
    481a:	9b04      	ldr	r3, [sp, #16]
    481c:	1b9b      	subs	r3, r3, r6
    481e:	6123      	str	r3, [r4, #16]
    4820:	9b07      	ldr	r3, [sp, #28]
    4822:	aa09      	add	r2, sp, #36	; 0x24
    4824:	9300      	str	r3, [sp, #0]
    4826:	0021      	movs	r1, r4
    4828:	9b06      	ldr	r3, [sp, #24]
    482a:	9805      	ldr	r0, [sp, #20]
    482c:	f7ff fe82 	bl	4534 <_printf_common>
    4830:	1c43      	adds	r3, r0, #1
    4832:	d1b3      	bne.n	479c <_printf_i+0x18c>
    4834:	2001      	movs	r0, #1
    4836:	4240      	negs	r0, r0
    4838:	b00b      	add	sp, #44	; 0x2c
    483a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    483c:	00006f7a 	.word	0x00006f7a
    4840:	00006f69 	.word	0x00006f69

00004844 <_putc_r>:
    4844:	b570      	push	{r4, r5, r6, lr}
    4846:	0006      	movs	r6, r0
    4848:	000d      	movs	r5, r1
    484a:	0014      	movs	r4, r2
    484c:	2800      	cmp	r0, #0
    484e:	d004      	beq.n	485a <_putc_r+0x16>
    4850:	6983      	ldr	r3, [r0, #24]
    4852:	2b00      	cmp	r3, #0
    4854:	d101      	bne.n	485a <_putc_r+0x16>
    4856:	f7ff fc25 	bl	40a4 <__sinit>
    485a:	4b12      	ldr	r3, [pc, #72]	; (48a4 <_putc_r+0x60>)
    485c:	429c      	cmp	r4, r3
    485e:	d111      	bne.n	4884 <_putc_r+0x40>
    4860:	6874      	ldr	r4, [r6, #4]
    4862:	68a3      	ldr	r3, [r4, #8]
    4864:	3b01      	subs	r3, #1
    4866:	60a3      	str	r3, [r4, #8]
    4868:	2b00      	cmp	r3, #0
    486a:	da05      	bge.n	4878 <_putc_r+0x34>
    486c:	69a2      	ldr	r2, [r4, #24]
    486e:	4293      	cmp	r3, r2
    4870:	db12      	blt.n	4898 <_putc_r+0x54>
    4872:	b2eb      	uxtb	r3, r5
    4874:	2b0a      	cmp	r3, #10
    4876:	d00f      	beq.n	4898 <_putc_r+0x54>
    4878:	6823      	ldr	r3, [r4, #0]
    487a:	b2e8      	uxtb	r0, r5
    487c:	1c5a      	adds	r2, r3, #1
    487e:	6022      	str	r2, [r4, #0]
    4880:	701d      	strb	r5, [r3, #0]
    4882:	bd70      	pop	{r4, r5, r6, pc}
    4884:	4b08      	ldr	r3, [pc, #32]	; (48a8 <_putc_r+0x64>)
    4886:	429c      	cmp	r4, r3
    4888:	d101      	bne.n	488e <_putc_r+0x4a>
    488a:	68b4      	ldr	r4, [r6, #8]
    488c:	e7e9      	b.n	4862 <_putc_r+0x1e>
    488e:	4b07      	ldr	r3, [pc, #28]	; (48ac <_putc_r+0x68>)
    4890:	429c      	cmp	r4, r3
    4892:	d1e6      	bne.n	4862 <_putc_r+0x1e>
    4894:	68f4      	ldr	r4, [r6, #12]
    4896:	e7e4      	b.n	4862 <_putc_r+0x1e>
    4898:	0022      	movs	r2, r4
    489a:	0029      	movs	r1, r5
    489c:	0030      	movs	r0, r6
    489e:	f000 f853 	bl	4948 <__swbuf_r>
    48a2:	e7ee      	b.n	4882 <_putc_r+0x3e>
    48a4:	00006f18 	.word	0x00006f18
    48a8:	00006f38 	.word	0x00006f38
    48ac:	00006ef8 	.word	0x00006ef8

000048b0 <__sread>:
    48b0:	b570      	push	{r4, r5, r6, lr}
    48b2:	000c      	movs	r4, r1
    48b4:	250e      	movs	r5, #14
    48b6:	5f49      	ldrsh	r1, [r1, r5]
    48b8:	f000 f97c 	bl	4bb4 <_read_r>
    48bc:	2800      	cmp	r0, #0
    48be:	db03      	blt.n	48c8 <__sread+0x18>
    48c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    48c2:	181b      	adds	r3, r3, r0
    48c4:	6563      	str	r3, [r4, #84]	; 0x54
    48c6:	bd70      	pop	{r4, r5, r6, pc}
    48c8:	89a3      	ldrh	r3, [r4, #12]
    48ca:	4a02      	ldr	r2, [pc, #8]	; (48d4 <__sread+0x24>)
    48cc:	4013      	ands	r3, r2
    48ce:	81a3      	strh	r3, [r4, #12]
    48d0:	e7f9      	b.n	48c6 <__sread+0x16>
    48d2:	46c0      	nop			; (mov r8, r8)
    48d4:	ffffefff 	.word	0xffffefff

000048d8 <__swrite>:
    48d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48da:	001f      	movs	r7, r3
    48dc:	898b      	ldrh	r3, [r1, #12]
    48de:	0005      	movs	r5, r0
    48e0:	000c      	movs	r4, r1
    48e2:	0016      	movs	r6, r2
    48e4:	05db      	lsls	r3, r3, #23
    48e6:	d505      	bpl.n	48f4 <__swrite+0x1c>
    48e8:	230e      	movs	r3, #14
    48ea:	5ec9      	ldrsh	r1, [r1, r3]
    48ec:	2200      	movs	r2, #0
    48ee:	2302      	movs	r3, #2
    48f0:	f000 f940 	bl	4b74 <_lseek_r>
    48f4:	89a3      	ldrh	r3, [r4, #12]
    48f6:	4a05      	ldr	r2, [pc, #20]	; (490c <__swrite+0x34>)
    48f8:	0028      	movs	r0, r5
    48fa:	4013      	ands	r3, r2
    48fc:	81a3      	strh	r3, [r4, #12]
    48fe:	0032      	movs	r2, r6
    4900:	230e      	movs	r3, #14
    4902:	5ee1      	ldrsh	r1, [r4, r3]
    4904:	003b      	movs	r3, r7
    4906:	f000 f875 	bl	49f4 <_write_r>
    490a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    490c:	ffffefff 	.word	0xffffefff

00004910 <__sseek>:
    4910:	b570      	push	{r4, r5, r6, lr}
    4912:	000c      	movs	r4, r1
    4914:	250e      	movs	r5, #14
    4916:	5f49      	ldrsh	r1, [r1, r5]
    4918:	f000 f92c 	bl	4b74 <_lseek_r>
    491c:	89a3      	ldrh	r3, [r4, #12]
    491e:	1c42      	adds	r2, r0, #1
    4920:	d103      	bne.n	492a <__sseek+0x1a>
    4922:	4a05      	ldr	r2, [pc, #20]	; (4938 <__sseek+0x28>)
    4924:	4013      	ands	r3, r2
    4926:	81a3      	strh	r3, [r4, #12]
    4928:	bd70      	pop	{r4, r5, r6, pc}
    492a:	2280      	movs	r2, #128	; 0x80
    492c:	0152      	lsls	r2, r2, #5
    492e:	4313      	orrs	r3, r2
    4930:	81a3      	strh	r3, [r4, #12]
    4932:	6560      	str	r0, [r4, #84]	; 0x54
    4934:	e7f8      	b.n	4928 <__sseek+0x18>
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	ffffefff 	.word	0xffffefff

0000493c <__sclose>:
    493c:	b510      	push	{r4, lr}
    493e:	230e      	movs	r3, #14
    4940:	5ec9      	ldrsh	r1, [r1, r3]
    4942:	f000 f8e1 	bl	4b08 <_close_r>
    4946:	bd10      	pop	{r4, pc}

00004948 <__swbuf_r>:
    4948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    494a:	0005      	movs	r5, r0
    494c:	000e      	movs	r6, r1
    494e:	0014      	movs	r4, r2
    4950:	2800      	cmp	r0, #0
    4952:	d004      	beq.n	495e <__swbuf_r+0x16>
    4954:	6983      	ldr	r3, [r0, #24]
    4956:	2b00      	cmp	r3, #0
    4958:	d101      	bne.n	495e <__swbuf_r+0x16>
    495a:	f7ff fba3 	bl	40a4 <__sinit>
    495e:	4b22      	ldr	r3, [pc, #136]	; (49e8 <__swbuf_r+0xa0>)
    4960:	429c      	cmp	r4, r3
    4962:	d12d      	bne.n	49c0 <__swbuf_r+0x78>
    4964:	686c      	ldr	r4, [r5, #4]
    4966:	69a3      	ldr	r3, [r4, #24]
    4968:	60a3      	str	r3, [r4, #8]
    496a:	89a3      	ldrh	r3, [r4, #12]
    496c:	071b      	lsls	r3, r3, #28
    496e:	d531      	bpl.n	49d4 <__swbuf_r+0x8c>
    4970:	6923      	ldr	r3, [r4, #16]
    4972:	2b00      	cmp	r3, #0
    4974:	d02e      	beq.n	49d4 <__swbuf_r+0x8c>
    4976:	6823      	ldr	r3, [r4, #0]
    4978:	6922      	ldr	r2, [r4, #16]
    497a:	b2f7      	uxtb	r7, r6
    497c:	1a98      	subs	r0, r3, r2
    497e:	6963      	ldr	r3, [r4, #20]
    4980:	b2f6      	uxtb	r6, r6
    4982:	4298      	cmp	r0, r3
    4984:	db05      	blt.n	4992 <__swbuf_r+0x4a>
    4986:	0021      	movs	r1, r4
    4988:	0028      	movs	r0, r5
    498a:	f7ff fb1d 	bl	3fc8 <_fflush_r>
    498e:	2800      	cmp	r0, #0
    4990:	d126      	bne.n	49e0 <__swbuf_r+0x98>
    4992:	68a3      	ldr	r3, [r4, #8]
    4994:	3001      	adds	r0, #1
    4996:	3b01      	subs	r3, #1
    4998:	60a3      	str	r3, [r4, #8]
    499a:	6823      	ldr	r3, [r4, #0]
    499c:	1c5a      	adds	r2, r3, #1
    499e:	6022      	str	r2, [r4, #0]
    49a0:	701f      	strb	r7, [r3, #0]
    49a2:	6963      	ldr	r3, [r4, #20]
    49a4:	4298      	cmp	r0, r3
    49a6:	d004      	beq.n	49b2 <__swbuf_r+0x6a>
    49a8:	89a3      	ldrh	r3, [r4, #12]
    49aa:	07db      	lsls	r3, r3, #31
    49ac:	d51a      	bpl.n	49e4 <__swbuf_r+0x9c>
    49ae:	2e0a      	cmp	r6, #10
    49b0:	d118      	bne.n	49e4 <__swbuf_r+0x9c>
    49b2:	0021      	movs	r1, r4
    49b4:	0028      	movs	r0, r5
    49b6:	f7ff fb07 	bl	3fc8 <_fflush_r>
    49ba:	2800      	cmp	r0, #0
    49bc:	d012      	beq.n	49e4 <__swbuf_r+0x9c>
    49be:	e00f      	b.n	49e0 <__swbuf_r+0x98>
    49c0:	4b0a      	ldr	r3, [pc, #40]	; (49ec <__swbuf_r+0xa4>)
    49c2:	429c      	cmp	r4, r3
    49c4:	d101      	bne.n	49ca <__swbuf_r+0x82>
    49c6:	68ac      	ldr	r4, [r5, #8]
    49c8:	e7cd      	b.n	4966 <__swbuf_r+0x1e>
    49ca:	4b09      	ldr	r3, [pc, #36]	; (49f0 <__swbuf_r+0xa8>)
    49cc:	429c      	cmp	r4, r3
    49ce:	d1ca      	bne.n	4966 <__swbuf_r+0x1e>
    49d0:	68ec      	ldr	r4, [r5, #12]
    49d2:	e7c8      	b.n	4966 <__swbuf_r+0x1e>
    49d4:	0021      	movs	r1, r4
    49d6:	0028      	movs	r0, r5
    49d8:	f000 f820 	bl	4a1c <__swsetup_r>
    49dc:	2800      	cmp	r0, #0
    49de:	d0ca      	beq.n	4976 <__swbuf_r+0x2e>
    49e0:	2601      	movs	r6, #1
    49e2:	4276      	negs	r6, r6
    49e4:	0030      	movs	r0, r6
    49e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49e8:	00006f18 	.word	0x00006f18
    49ec:	00006f38 	.word	0x00006f38
    49f0:	00006ef8 	.word	0x00006ef8

000049f4 <_write_r>:
    49f4:	b570      	push	{r4, r5, r6, lr}
    49f6:	0005      	movs	r5, r0
    49f8:	0008      	movs	r0, r1
    49fa:	0011      	movs	r1, r2
    49fc:	2200      	movs	r2, #0
    49fe:	4c06      	ldr	r4, [pc, #24]	; (4a18 <_write_r+0x24>)
    4a00:	6022      	str	r2, [r4, #0]
    4a02:	001a      	movs	r2, r3
    4a04:	f7fd fc6c 	bl	22e0 <_write>
    4a08:	1c43      	adds	r3, r0, #1
    4a0a:	d103      	bne.n	4a14 <_write_r+0x20>
    4a0c:	6823      	ldr	r3, [r4, #0]
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d000      	beq.n	4a14 <_write_r+0x20>
    4a12:	602b      	str	r3, [r5, #0]
    4a14:	bd70      	pop	{r4, r5, r6, pc}
    4a16:	46c0      	nop			; (mov r8, r8)
    4a18:	20000ad8 	.word	0x20000ad8

00004a1c <__swsetup_r>:
    4a1c:	4b36      	ldr	r3, [pc, #216]	; (4af8 <__swsetup_r+0xdc>)
    4a1e:	b570      	push	{r4, r5, r6, lr}
    4a20:	681d      	ldr	r5, [r3, #0]
    4a22:	0006      	movs	r6, r0
    4a24:	000c      	movs	r4, r1
    4a26:	2d00      	cmp	r5, #0
    4a28:	d005      	beq.n	4a36 <__swsetup_r+0x1a>
    4a2a:	69ab      	ldr	r3, [r5, #24]
    4a2c:	2b00      	cmp	r3, #0
    4a2e:	d102      	bne.n	4a36 <__swsetup_r+0x1a>
    4a30:	0028      	movs	r0, r5
    4a32:	f7ff fb37 	bl	40a4 <__sinit>
    4a36:	4b31      	ldr	r3, [pc, #196]	; (4afc <__swsetup_r+0xe0>)
    4a38:	429c      	cmp	r4, r3
    4a3a:	d10f      	bne.n	4a5c <__swsetup_r+0x40>
    4a3c:	686c      	ldr	r4, [r5, #4]
    4a3e:	230c      	movs	r3, #12
    4a40:	5ee2      	ldrsh	r2, [r4, r3]
    4a42:	b293      	uxth	r3, r2
    4a44:	0719      	lsls	r1, r3, #28
    4a46:	d42d      	bmi.n	4aa4 <__swsetup_r+0x88>
    4a48:	06d9      	lsls	r1, r3, #27
    4a4a:	d411      	bmi.n	4a70 <__swsetup_r+0x54>
    4a4c:	2309      	movs	r3, #9
    4a4e:	2001      	movs	r0, #1
    4a50:	6033      	str	r3, [r6, #0]
    4a52:	3337      	adds	r3, #55	; 0x37
    4a54:	4313      	orrs	r3, r2
    4a56:	81a3      	strh	r3, [r4, #12]
    4a58:	4240      	negs	r0, r0
    4a5a:	bd70      	pop	{r4, r5, r6, pc}
    4a5c:	4b28      	ldr	r3, [pc, #160]	; (4b00 <__swsetup_r+0xe4>)
    4a5e:	429c      	cmp	r4, r3
    4a60:	d101      	bne.n	4a66 <__swsetup_r+0x4a>
    4a62:	68ac      	ldr	r4, [r5, #8]
    4a64:	e7eb      	b.n	4a3e <__swsetup_r+0x22>
    4a66:	4b27      	ldr	r3, [pc, #156]	; (4b04 <__swsetup_r+0xe8>)
    4a68:	429c      	cmp	r4, r3
    4a6a:	d1e8      	bne.n	4a3e <__swsetup_r+0x22>
    4a6c:	68ec      	ldr	r4, [r5, #12]
    4a6e:	e7e6      	b.n	4a3e <__swsetup_r+0x22>
    4a70:	075b      	lsls	r3, r3, #29
    4a72:	d513      	bpl.n	4a9c <__swsetup_r+0x80>
    4a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4a76:	2900      	cmp	r1, #0
    4a78:	d008      	beq.n	4a8c <__swsetup_r+0x70>
    4a7a:	0023      	movs	r3, r4
    4a7c:	3344      	adds	r3, #68	; 0x44
    4a7e:	4299      	cmp	r1, r3
    4a80:	d002      	beq.n	4a88 <__swsetup_r+0x6c>
    4a82:	0030      	movs	r0, r6
    4a84:	f7ff f806 	bl	3a94 <_free_r>
    4a88:	2300      	movs	r3, #0
    4a8a:	6363      	str	r3, [r4, #52]	; 0x34
    4a8c:	2224      	movs	r2, #36	; 0x24
    4a8e:	89a3      	ldrh	r3, [r4, #12]
    4a90:	4393      	bics	r3, r2
    4a92:	81a3      	strh	r3, [r4, #12]
    4a94:	2300      	movs	r3, #0
    4a96:	6063      	str	r3, [r4, #4]
    4a98:	6923      	ldr	r3, [r4, #16]
    4a9a:	6023      	str	r3, [r4, #0]
    4a9c:	2308      	movs	r3, #8
    4a9e:	89a2      	ldrh	r2, [r4, #12]
    4aa0:	4313      	orrs	r3, r2
    4aa2:	81a3      	strh	r3, [r4, #12]
    4aa4:	6923      	ldr	r3, [r4, #16]
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d10b      	bne.n	4ac2 <__swsetup_r+0xa6>
    4aaa:	21a0      	movs	r1, #160	; 0xa0
    4aac:	2280      	movs	r2, #128	; 0x80
    4aae:	89a3      	ldrh	r3, [r4, #12]
    4ab0:	0089      	lsls	r1, r1, #2
    4ab2:	0092      	lsls	r2, r2, #2
    4ab4:	400b      	ands	r3, r1
    4ab6:	4293      	cmp	r3, r2
    4ab8:	d003      	beq.n	4ac2 <__swsetup_r+0xa6>
    4aba:	0021      	movs	r1, r4
    4abc:	0030      	movs	r0, r6
    4abe:	f7ff fbaf 	bl	4220 <__smakebuf_r>
    4ac2:	2301      	movs	r3, #1
    4ac4:	89a2      	ldrh	r2, [r4, #12]
    4ac6:	4013      	ands	r3, r2
    4ac8:	d011      	beq.n	4aee <__swsetup_r+0xd2>
    4aca:	2300      	movs	r3, #0
    4acc:	60a3      	str	r3, [r4, #8]
    4ace:	6963      	ldr	r3, [r4, #20]
    4ad0:	425b      	negs	r3, r3
    4ad2:	61a3      	str	r3, [r4, #24]
    4ad4:	2000      	movs	r0, #0
    4ad6:	6923      	ldr	r3, [r4, #16]
    4ad8:	4283      	cmp	r3, r0
    4ada:	d1be      	bne.n	4a5a <__swsetup_r+0x3e>
    4adc:	230c      	movs	r3, #12
    4ade:	5ee2      	ldrsh	r2, [r4, r3]
    4ae0:	0613      	lsls	r3, r2, #24
    4ae2:	d5ba      	bpl.n	4a5a <__swsetup_r+0x3e>
    4ae4:	2340      	movs	r3, #64	; 0x40
    4ae6:	4313      	orrs	r3, r2
    4ae8:	81a3      	strh	r3, [r4, #12]
    4aea:	3801      	subs	r0, #1
    4aec:	e7b5      	b.n	4a5a <__swsetup_r+0x3e>
    4aee:	0792      	lsls	r2, r2, #30
    4af0:	d400      	bmi.n	4af4 <__swsetup_r+0xd8>
    4af2:	6963      	ldr	r3, [r4, #20]
    4af4:	60a3      	str	r3, [r4, #8]
    4af6:	e7ed      	b.n	4ad4 <__swsetup_r+0xb8>
    4af8:	20000164 	.word	0x20000164
    4afc:	00006f18 	.word	0x00006f18
    4b00:	00006f38 	.word	0x00006f38
    4b04:	00006ef8 	.word	0x00006ef8

00004b08 <_close_r>:
    4b08:	2300      	movs	r3, #0
    4b0a:	b570      	push	{r4, r5, r6, lr}
    4b0c:	4c06      	ldr	r4, [pc, #24]	; (4b28 <_close_r+0x20>)
    4b0e:	0005      	movs	r5, r0
    4b10:	0008      	movs	r0, r1
    4b12:	6023      	str	r3, [r4, #0]
    4b14:	f7fd fc1e 	bl	2354 <_close>
    4b18:	1c43      	adds	r3, r0, #1
    4b1a:	d103      	bne.n	4b24 <_close_r+0x1c>
    4b1c:	6823      	ldr	r3, [r4, #0]
    4b1e:	2b00      	cmp	r3, #0
    4b20:	d000      	beq.n	4b24 <_close_r+0x1c>
    4b22:	602b      	str	r3, [r5, #0]
    4b24:	bd70      	pop	{r4, r5, r6, pc}
    4b26:	46c0      	nop			; (mov r8, r8)
    4b28:	20000ad8 	.word	0x20000ad8

00004b2c <_fstat_r>:
    4b2c:	2300      	movs	r3, #0
    4b2e:	b570      	push	{r4, r5, r6, lr}
    4b30:	4c06      	ldr	r4, [pc, #24]	; (4b4c <_fstat_r+0x20>)
    4b32:	0005      	movs	r5, r0
    4b34:	0008      	movs	r0, r1
    4b36:	0011      	movs	r1, r2
    4b38:	6023      	str	r3, [r4, #0]
    4b3a:	f7fd fc0e 	bl	235a <_fstat>
    4b3e:	1c43      	adds	r3, r0, #1
    4b40:	d103      	bne.n	4b4a <_fstat_r+0x1e>
    4b42:	6823      	ldr	r3, [r4, #0]
    4b44:	2b00      	cmp	r3, #0
    4b46:	d000      	beq.n	4b4a <_fstat_r+0x1e>
    4b48:	602b      	str	r3, [r5, #0]
    4b4a:	bd70      	pop	{r4, r5, r6, pc}
    4b4c:	20000ad8 	.word	0x20000ad8

00004b50 <_isatty_r>:
    4b50:	2300      	movs	r3, #0
    4b52:	b570      	push	{r4, r5, r6, lr}
    4b54:	4c06      	ldr	r4, [pc, #24]	; (4b70 <_isatty_r+0x20>)
    4b56:	0005      	movs	r5, r0
    4b58:	0008      	movs	r0, r1
    4b5a:	6023      	str	r3, [r4, #0]
    4b5c:	f7fd fc02 	bl	2364 <_isatty>
    4b60:	1c43      	adds	r3, r0, #1
    4b62:	d103      	bne.n	4b6c <_isatty_r+0x1c>
    4b64:	6823      	ldr	r3, [r4, #0]
    4b66:	2b00      	cmp	r3, #0
    4b68:	d000      	beq.n	4b6c <_isatty_r+0x1c>
    4b6a:	602b      	str	r3, [r5, #0]
    4b6c:	bd70      	pop	{r4, r5, r6, pc}
    4b6e:	46c0      	nop			; (mov r8, r8)
    4b70:	20000ad8 	.word	0x20000ad8

00004b74 <_lseek_r>:
    4b74:	b570      	push	{r4, r5, r6, lr}
    4b76:	0005      	movs	r5, r0
    4b78:	0008      	movs	r0, r1
    4b7a:	0011      	movs	r1, r2
    4b7c:	2200      	movs	r2, #0
    4b7e:	4c06      	ldr	r4, [pc, #24]	; (4b98 <_lseek_r+0x24>)
    4b80:	6022      	str	r2, [r4, #0]
    4b82:	001a      	movs	r2, r3
    4b84:	f7fd fbf0 	bl	2368 <_lseek>
    4b88:	1c43      	adds	r3, r0, #1
    4b8a:	d103      	bne.n	4b94 <_lseek_r+0x20>
    4b8c:	6823      	ldr	r3, [r4, #0]
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d000      	beq.n	4b94 <_lseek_r+0x20>
    4b92:	602b      	str	r3, [r5, #0]
    4b94:	bd70      	pop	{r4, r5, r6, pc}
    4b96:	46c0      	nop			; (mov r8, r8)
    4b98:	20000ad8 	.word	0x20000ad8

00004b9c <memchr>:
    4b9c:	b2c9      	uxtb	r1, r1
    4b9e:	1882      	adds	r2, r0, r2
    4ba0:	4290      	cmp	r0, r2
    4ba2:	d101      	bne.n	4ba8 <memchr+0xc>
    4ba4:	2000      	movs	r0, #0
    4ba6:	4770      	bx	lr
    4ba8:	7803      	ldrb	r3, [r0, #0]
    4baa:	428b      	cmp	r3, r1
    4bac:	d0fb      	beq.n	4ba6 <memchr+0xa>
    4bae:	3001      	adds	r0, #1
    4bb0:	e7f6      	b.n	4ba0 <memchr+0x4>
	...

00004bb4 <_read_r>:
    4bb4:	b570      	push	{r4, r5, r6, lr}
    4bb6:	0005      	movs	r5, r0
    4bb8:	0008      	movs	r0, r1
    4bba:	0011      	movs	r1, r2
    4bbc:	2200      	movs	r2, #0
    4bbe:	4c06      	ldr	r4, [pc, #24]	; (4bd8 <_read_r+0x24>)
    4bc0:	6022      	str	r2, [r4, #0]
    4bc2:	001a      	movs	r2, r3
    4bc4:	f7fd fb6a 	bl	229c <_read>
    4bc8:	1c43      	adds	r3, r0, #1
    4bca:	d103      	bne.n	4bd4 <_read_r+0x20>
    4bcc:	6823      	ldr	r3, [r4, #0]
    4bce:	2b00      	cmp	r3, #0
    4bd0:	d000      	beq.n	4bd4 <_read_r+0x20>
    4bd2:	602b      	str	r3, [r5, #0]
    4bd4:	bd70      	pop	{r4, r5, r6, pc}
    4bd6:	46c0      	nop			; (mov r8, r8)
    4bd8:	20000ad8 	.word	0x20000ad8
    4bdc:	00000008 	.word	0x00000008
    4be0:	00000008 	.word	0x00000008
    4be4:	00000008 	.word	0x00000008
    4be8:	00000008 	.word	0x00000008
    4bec:	00000008 	.word	0x00000008
    4bf0:	00000008 	.word	0x00000008
    4bf4:	00000008 	.word	0x00000008
    4bf8:	00000008 	.word	0x00000008
    4bfc:	00000010 	.word	0x00000010
    4c00:	00000010 	.word	0x00000010
    4c04:	00000010 	.word	0x00000010
    4c08:	00000010 	.word	0x00000010
    4c0c:	00000010 	.word	0x00000010
    4c10:	00000010 	.word	0x00000010
    4c14:	00000010 	.word	0x00000010
    4c18:	00000010 	.word	0x00000010
    4c1c:	00000018 	.word	0x00000018
    4c20:	00000018 	.word	0x00000018
    4c24:	00000018 	.word	0x00000018
    4c28:	00000018 	.word	0x00000018
    4c2c:	00000018 	.word	0x00000018
    4c30:	00000018 	.word	0x00000018
    4c34:	00000018 	.word	0x00000018
    4c38:	00000018 	.word	0x00000018
    4c3c:	00000020 	.word	0x00000020
    4c40:	00000020 	.word	0x00000020
    4c44:	00000020 	.word	0x00000020
    4c48:	00000020 	.word	0x00000020
    4c4c:	00000020 	.word	0x00000020
    4c50:	00000020 	.word	0x00000020
    4c54:	00000020 	.word	0x00000020
    4c58:	00000020 	.word	0x00000020
    4c5c:	00000028 	.word	0x00000028
    4c60:	00000028 	.word	0x00000028
    4c64:	00000028 	.word	0x00000028
    4c68:	00000028 	.word	0x00000028
    4c6c:	00000028 	.word	0x00000028
    4c70:	00000028 	.word	0x00000028
    4c74:	00000028 	.word	0x00000028
    4c78:	00000028 	.word	0x00000028
    4c7c:	00000030 	.word	0x00000030
    4c80:	00000030 	.word	0x00000030
    4c84:	00000030 	.word	0x00000030
    4c88:	00000030 	.word	0x00000030
    4c8c:	00000030 	.word	0x00000030
    4c90:	00000030 	.word	0x00000030
    4c94:	00000030 	.word	0x00000030
    4c98:	00000030 	.word	0x00000030
    4c9c:	00000038 	.word	0x00000038
    4ca0:	00000038 	.word	0x00000038
    4ca4:	00000038 	.word	0x00000038
    4ca8:	00000038 	.word	0x00000038
    4cac:	00000038 	.word	0x00000038
    4cb0:	00000038 	.word	0x00000038
    4cb4:	00000038 	.word	0x00000038
    4cb8:	00000038 	.word	0x00000038
    4cbc:	00000040 	.word	0x00000040
    4cc0:	00000040 	.word	0x00000040
    4cc4:	00000040 	.word	0x00000040
    4cc8:	00000040 	.word	0x00000040
    4ccc:	00000040 	.word	0x00000040
    4cd0:	00000040 	.word	0x00000040
    4cd4:	00000040 	.word	0x00000040
    4cd8:	00000040 	.word	0x00000040
    4cdc:	00000048 	.word	0x00000048
    4ce0:	00000048 	.word	0x00000048
    4ce4:	00000048 	.word	0x00000048
    4ce8:	00000048 	.word	0x00000048
    4cec:	00000048 	.word	0x00000048
    4cf0:	00000048 	.word	0x00000048
    4cf4:	00000048 	.word	0x00000048
    4cf8:	00000048 	.word	0x00000048
    4cfc:	0000004f 	.word	0x0000004f
    4d00:	0000004f 	.word	0x0000004f
    4d04:	0000004f 	.word	0x0000004f
    4d08:	0000004f 	.word	0x0000004f
    4d0c:	0000004f 	.word	0x0000004f
    4d10:	0000004f 	.word	0x0000004f
    4d14:	0000004f 	.word	0x0000004f
    4d18:	0000004f 	.word	0x0000004f
    4d1c:	000a000a 	.word	0x000a000a
    4d20:	00140014 	.word	0x00140014
    4d24:	00000014 	.word	0x00000014
    4d28:	000a017c 	.word	0x000a017c
    4d2c:	000a017c 	.word	0x000a017c
    4d30:	00140186 	.word	0x00140186
    4d34:	00140000 	.word	0x00140000
    4d38:	0122000a 	.word	0x0122000a
    4d3c:	00140186 	.word	0x00140186
    4d40:	01220190 	.word	0x01220190
    4d44:	0122000a 	.word	0x0122000a
    4d48:	012c0014 	.word	0x012c0014
    4d4c:	0122017c 	.word	0x0122017c
    4d50:	012c0186 	.word	0x012c0186
    4d54:	012c0014 	.word	0x012c0014
    4d58:	0136017c 	.word	0x0136017c
    4d5c:	001e0000 	.word	0x001e0000
    4d60:	00280032 	.word	0x00280032
    4d64:	00320000 	.word	0x00320000
    4d68:	003c0032 	.word	0x003c0032
    4d6c:	001e0050 	.word	0x001e0050
    4d70:	00280118 	.word	0x00280118
    4d74:	00280046 	.word	0x00280046
    4d78:	00be0050 	.word	0x00be0050
    4d7c:	00be0050 	.word	0x00be0050
    4d80:	00c80118 	.word	0x00c80118
    4d84:	00280118 	.word	0x00280118
    4d88:	00be0122 	.word	0x00be0122
    4d8c:	00460000 	.word	0x00460000
    4d90:	00500032 	.word	0x00500032
    4d94:	005a0000 	.word	0x005a0000
    4d98:	00640032 	.word	0x00640032
    4d9c:	006e0000 	.word	0x006e0000
    4da0:	00780032 	.word	0x00780032
    4da4:	00820000 	.word	0x00820000
    4da8:	008c0032 	.word	0x008c0032
    4dac:	00960000 	.word	0x00960000
    4db0:	00a00032 	.word	0x00a00032
    4db4:	00aa0000 	.word	0x00aa0000
    4db8:	00b40032 	.word	0x00b40032
    4dbc:	00be0000 	.word	0x00be0000
    4dc0:	00c80032 	.word	0x00c80032
    4dc4:	00c8012c 	.word	0x00c8012c
    4dc8:	00d20172 	.word	0x00d20172
    4dcc:	00dc001e 	.word	0x00dc001e
    4dd0:	00e60172 	.word	0x00e60172
    4dd4:	00f0001e 	.word	0x00f0001e
    4dd8:	00fa0172 	.word	0x00fa0172
    4ddc:	0104001e 	.word	0x0104001e
    4de0:	010e0172 	.word	0x010e0172
    4de4:	0118005a 	.word	0x0118005a
    4de8:	0122012c 	.word	0x0122012c
    4dec:	82be50b4 	.word	0x82be50b4
    4df0:	8cbe82aa 	.word	0x8cbe82aa
    4df4:	64963c8c 	.word	0x64963c8c
    4df8:	64dc3cd2 	.word	0x64dc3cd2
    4dfc:	a08c9682 	.word	0xa08c9682
    4e00:	aadca08c 	.word	0xaadca08c
    4e04:	a0e696dc 	.word	0xa0e696dc
    4e08:	50f03c78 	.word	0x50f03c78
    4e0c:	5a78466e 	.word	0x5a78466e
    4e10:	aaaa3c96 	.word	0xaaaa3c96
    4e14:	a0dc3cc8 	.word	0xa0dc3cc8
    4e18:	aae6a0d2 	.word	0xaae6a0d2
    4e1c:	6e617254 	.word	0x6e617254
    4e20:	69722073 	.word	0x69722073
    4e24:	73746867 	.word	0x73746867
    4e28:	65726120 	.word	0x65726120
    4e2c:	6d756820 	.word	0x6d756820
    4e30:	72206e61 	.word	0x72206e61
    4e34:	74686769 	.word	0x74686769
    4e38:	00000073 	.word	0x00000073
    4e3c:	355e3331 	.word	0x355e3331
    4e40:	31202b20 	.word	0x31202b20
    4e44:	20355e36 	.word	0x20355e36
    4e48:	3731203d 	.word	0x3731203d
    4e4c:	0000355e 	.word	0x0000355e
    4e50:	69746552 	.word	0x69746552
    4e54:	616c7563 	.word	0x616c7563
    4e58:	676e6974 	.word	0x676e6974
    4e5c:	6c705320 	.word	0x6c705320
    4e60:	73656e69 	.word	0x73656e69
    4e64:	00000000 	.word	0x00000000
    4e68:	6c6f6976 	.word	0x6c6f6976
    4e6c:	65636e65 	.word	0x65636e65
    4e70:	726f772e 	.word	0x726f772e
    4e74:	0000736b 	.word	0x0000736b
    4e78:	73626154 	.word	0x73626154
    4e7c:	00000021 	.word	0x00000021
    4e80:	6c6c694b 	.word	0x6c6c694b
    4e84:	6c694220 	.word	0x6c694220
    4e88:	6e6f696c 	.word	0x6e6f696c
    4e8c:	65726961 	.word	0x65726961
    4e90:	61282073 	.word	0x61282073
    4e94:	5420646e 	.word	0x5420646e
    4e98:	6c6c6972 	.word	0x6c6c6972
    4e9c:	616e6f69 	.word	0x616e6f69
    4ea0:	29657269 	.word	0x29657269
    4ea4:	00000000 	.word	0x00000000
    4ea8:	65746e49 	.word	0x65746e49
    4eac:	74736572 	.word	0x74736572
    4eb0:	206e6920 	.word	0x206e6920
    4eb4:	68636574 	.word	0x68636574
    4eb8:	6f6c6f6e 	.word	0x6f6c6f6e
    4ebc:	69207967 	.word	0x69207967
    4ec0:	6f6e2073 	.word	0x6f6e2073
    4ec4:	20612074 	.word	0x20612074
    4ec8:	73726570 	.word	0x73726570
    4ecc:	6c616e6f 	.word	0x6c616e6f
    4ed0:	00797469 	.word	0x00797469
    4ed4:	50203031 	.word	0x50203031
    4ed8:	544e4952 	.word	0x544e4952
    4edc:	52484320 	.word	0x52484320
    4ee0:	30322824 	.word	0x30322824
    4ee4:	2b352e35 	.word	0x2b352e35
    4ee8:	28444e52 	.word	0x28444e52
    4eec:	3b292931 	.word	0x3b292931
    4ef0:	47203a20 	.word	0x47203a20
    4ef4:	204f544f 	.word	0x204f544f
    4ef8:	00003031 	.word	0x00003031
    4efc:	67206f4e 	.word	0x67206f4e
    4f00:	2e73646f 	.word	0x2e73646f
    4f04:	206f4e20 	.word	0x206f4e20
    4f08:	7473616d 	.word	0x7473616d
    4f0c:	2e737265 	.word	0x2e737265
    4f10:	206f4e20 	.word	0x206f4e20
    4f14:	65747865 	.word	0x65747865
    4f18:	6c616e72 	.word	0x6c616e72
    4f1c:	62696c20 	.word	0x62696c20
    4f20:	69726172 	.word	0x69726172
    4f24:	002e7365 	.word	0x002e7365
    4f28:	6c6c694b 	.word	0x6c6c694b
    4f2c:	7a614e20 	.word	0x7a614e20
    4f30:	00007369 	.word	0x00007369
    4f34:	6e616954 	.word	0x6e616954
    4f38:	656d6e61 	.word	0x656d6e61
    4f3c:	7153206e 	.word	0x7153206e
    4f40:	65726175 	.word	0x65726175
    4f44:	38393120 	.word	0x38393120
    4f48:	00000039 	.word	0x00000039
    4f4c:	72656d41 	.word	0x72656d41
    4f50:	20616369 	.word	0x20616369
    4f54:	20736177 	.word	0x20736177
    4f58:	6e756f66 	.word	0x6e756f66
    4f5c:	20646564 	.word	0x20646564
    4f60:	73206e6f 	.word	0x73206e6f
    4f64:	6576616c 	.word	0x6576616c
    4f68:	00007972 	.word	0x00007972
    4f6c:	72656854 	.word	0x72656854
    4f70:	73692065 	.word	0x73692065
    4f74:	6c6e6f20 	.word	0x6c6e6f20
    4f78:	61632079 	.word	0x61632079
    4f7c:	61746970 	.word	0x61746970
    4f80:	6e61206c 	.word	0x6e61206c
    4f84:	616c2064 	.word	0x616c2064
    4f88:	00726f62 	.word	0x00726f62
    4f8c:	6f636e45 	.word	0x6f636e45
    4f90:	67617275 	.word	0x67617275
    4f94:	59532065 	.word	0x59532065
    4f98:	54454d4d 	.word	0x54454d4d
    4f9c:	20434952 	.word	0x20434952
    4fa0:	73616c63 	.word	0x73616c63
    4fa4:	61772073 	.word	0x61772073
    4fa8:	72616672 	.word	0x72616672
    4fac:	00000065 	.word	0x00000065
    4fb0:	52554324 	.word	0x52554324
    4fb4:	544e4552 	.word	0x544e4552
    4fb8:	4d454d5f 	.word	0x4d454d5f
    4fbc:	00000045 	.word	0x00000045
    4fc0:	694e2041 	.word	0x694e2041
    4fc4:	54206563 	.word	0x54206563
    4fc8:	00005954 	.word	0x00005954
    4fcc:	78696e55 	.word	0x78696e55
    4fd0:	6f706520 	.word	0x6f706520
    4fd4:	6d206863 	.word	0x6d206863
    4fd8:	73756e69 	.word	0x73756e69
    4fdc:	46783020 	.word	0x46783020
    4fe0:	61642046 	.word	0x61642046
    4fe4:	00007379 	.word	0x00007379
    4fe8:	3d202069 	.word	0x3d202069
    4fec:	35783020 	.word	0x35783020
    4ff0:	35373366 	.word	0x35373366
    4ff4:	20666439 	.word	0x20666439
    4ff8:	2028202d 	.word	0x2028202d
    4ffc:	3e3e2069 	.word	0x3e3e2069
    5000:	29203120 	.word	0x29203120
    5004:	0000003b 	.word	0x0000003b
    5008:	42414341 	.word	0x42414341
    500c:	00000000 	.word	0x00000000
    5010:	63666544 	.word	0x63666544
    5014:	73276e6f 	.word	0x73276e6f
    5018:	6e616320 	.word	0x6e616320
    501c:	656c6563 	.word	0x656c6563
    5020:	00002e64 	.word	0x00002e64
    5024:	73746152 	.word	0x73746152
    5028:	7473656e 	.word	0x7473656e
    502c:	6f4e203a 	.word	0x6f4e203a
    5030:	6e696874 	.word	0x6e696874
    5034:	6f542067 	.word	0x6f542067
    5038:	216f4420 	.word	0x216f4420
    503c:	00000000 	.word	0x00000000
    5040:	68207449 	.word	0x68207449
    5044:	36207361 	.word	0x36207361
    5048:	656b2039 	.word	0x656b2039
    504c:	002e7379 	.word	0x002e7379
    5050:	61636542 	.word	0x61636542
    5054:	20657375 	.word	0x20657375
    5058:	342d5456 	.word	0x342d5456
    505c:	77203032 	.word	0x77203032
    5060:	61207361 	.word	0x61207361
    5064:	6165726c 	.word	0x6165726c
    5068:	74207964 	.word	0x74207964
    506c:	6e656b61 	.word	0x6e656b61
    5070:	00000000 	.word	0x00000000
    5074:	706d6f43 	.word	0x706d6f43
    5078:	73736572 	.word	0x73736572
    507c:	206e6f69 	.word	0x206e6f69
    5080:	6f676c61 	.word	0x6f676c61
    5084:	68746972 	.word	0x68746972
    5088:	6162206d 	.word	0x6162206d
    508c:	20646573 	.word	0x20646573
    5090:	42206e6f 	.word	0x42206e6f
    5094:	28205042 	.word	0x28205042
    5098:	37393931 	.word	0x37393931
    509c:	00000029 	.word	0x00000029
    50a0:	63616554 	.word	0x63616554
    50a4:	65682068 	.word	0x65682068
    50a8:	68746c61 	.word	0x68746c61
    50ac:	736e6920 	.word	0x736e6920
    50b0:	6e617275 	.word	0x6e617275
    50b4:	70206563 	.word	0x70206563
    50b8:	69766f72 	.word	0x69766f72
    50bc:	73726564 	.word	0x73726564
    50c0:	206f7420 	.word	0x206f7420
    50c4:	65646f63 	.word	0x65646f63
    50c8:	0000002e 	.word	0x0000002e
    50cc:	6566664f 	.word	0x6566664f
    50d0:	7669736e 	.word	0x7669736e
    50d4:	61682065 	.word	0x61682065
    50d8:	61776472 	.word	0x61776472
    50dc:	00006572 	.word	0x00006572
    50e0:	69466957 	.word	0x69466957
    50e4:	20736920 	.word	0x20736920
    50e8:	20746f6e 	.word	0x20746f6e
    50ec:	65726977 	.word	0x65726977
    50f0:	7373656c 	.word	0x7373656c
    50f4:	68744520 	.word	0x68744520
    50f8:	656e7265 	.word	0x656e7265
    50fc:	00002174 	.word	0x00002174
    5100:	6d6d7544 	.word	0x6d6d7544
    5104:	68742079 	.word	0x68742079
    5108:	20636369 	.word	0x20636369
    510c:	65696c63 	.word	0x65696c63
    5110:	0000746e 	.word	0x0000746e
    5114:	694e2041 	.word	0x694e2041
    5118:	54206563 	.word	0x54206563
    511c:	202e5954 	.word	0x202e5954
    5120:	4f206e41 	.word	0x4f206e41
    5124:	6f43204b 	.word	0x6f43204b
    5128:	7475706d 	.word	0x7475706d
    512c:	002e7265 	.word	0x002e7265
    5130:	65545355 	.word	0x65545355
    5134:	6964656c 	.word	0x6964656c
    5138:	6e6f646c 	.word	0x6e6f646c
    513c:	00736369 	.word	0x00736369
    5140:	696c6f53 	.word	0x696c6f53
    5144:	69726164 	.word	0x69726164
    5148:	69207974 	.word	0x69207974
    514c:	6f6e2073 	.word	0x6f6e2073
    5150:	20612074 	.word	0x20612074
    5154:	2077656e 	.word	0x2077656e
    5158:	6d617266 	.word	0x6d617266
    515c:	726f7765 	.word	0x726f7765
    5160:	0000006b 	.word	0x0000006b
    5164:	61657242 	.word	0x61657242
    5168:	616f6264 	.word	0x616f6264
    516c:	6e696472 	.word	0x6e696472
    5170:	73492067 	.word	0x73492067
    5174:	746f4e20 	.word	0x746f4e20
    5178:	43204120 	.word	0x43204120
    517c:	656d6972 	.word	0x656d6972
    5180:	00000000 	.word	0x00000000
    5184:	2066664f 	.word	0x2066664f
    5188:	6f207962 	.word	0x6f207962
    518c:	6520656e 	.word	0x6520656e
    5190:	726f7272 	.word	0x726f7272
    5194:	72612073 	.word	0x72612073
    5198:	6f632065 	.word	0x6f632065
    519c:	6e6f6d6d 	.word	0x6e6f6d6d
    51a0:	00000000 	.word	0x00000000
    51a4:	00000ca6 	.word	0x00000ca6
    51a8:	00000ef2 	.word	0x00000ef2
    51ac:	00000ef2 	.word	0x00000ef2
    51b0:	00000ef2 	.word	0x00000ef2
    51b4:	00000ef2 	.word	0x00000ef2
    51b8:	00000ef2 	.word	0x00000ef2
    51bc:	00000ef2 	.word	0x00000ef2
    51c0:	00000ef2 	.word	0x00000ef2
    51c4:	00000ef2 	.word	0x00000ef2
    51c8:	00000ef2 	.word	0x00000ef2
    51cc:	00000ef2 	.word	0x00000ef2
    51d0:	00000ef2 	.word	0x00000ef2
    51d4:	00000ef2 	.word	0x00000ef2
    51d8:	00000ef2 	.word	0x00000ef2
    51dc:	00000ef2 	.word	0x00000ef2
    51e0:	00000ef2 	.word	0x00000ef2
    51e4:	00000c8e 	.word	0x00000c8e
    51e8:	00000ef2 	.word	0x00000ef2
    51ec:	00000ef2 	.word	0x00000ef2
    51f0:	00000ef2 	.word	0x00000ef2
    51f4:	00000ef2 	.word	0x00000ef2
    51f8:	00000ef2 	.word	0x00000ef2
    51fc:	00000ef2 	.word	0x00000ef2
    5200:	00000ef2 	.word	0x00000ef2
    5204:	00000ef2 	.word	0x00000ef2
    5208:	00000ef2 	.word	0x00000ef2
    520c:	00000ef2 	.word	0x00000ef2
    5210:	00000ef2 	.word	0x00000ef2
    5214:	00000ef2 	.word	0x00000ef2
    5218:	00000ef2 	.word	0x00000ef2
    521c:	00000ef2 	.word	0x00000ef2
    5220:	00000ef2 	.word	0x00000ef2
    5224:	00000c9e 	.word	0x00000c9e
    5228:	00000ef2 	.word	0x00000ef2
    522c:	00000ef2 	.word	0x00000ef2
    5230:	00000ef2 	.word	0x00000ef2
    5234:	00000ef2 	.word	0x00000ef2
    5238:	00000ef2 	.word	0x00000ef2
    523c:	00000ef2 	.word	0x00000ef2
    5240:	00000ef2 	.word	0x00000ef2
    5244:	00000ef2 	.word	0x00000ef2
    5248:	00000ef2 	.word	0x00000ef2
    524c:	00000ef2 	.word	0x00000ef2
    5250:	00000ef2 	.word	0x00000ef2
    5254:	00000ef2 	.word	0x00000ef2
    5258:	00000ef2 	.word	0x00000ef2
    525c:	00000ef2 	.word	0x00000ef2
    5260:	00000ef2 	.word	0x00000ef2
    5264:	00000c96 	.word	0x00000c96
    5268:	00000cae 	.word	0x00000cae
    526c:	00000c76 	.word	0x00000c76
    5270:	00000c86 	.word	0x00000c86
    5274:	00000c7e 	.word	0x00000c7e
    5278:	00000002 	.word	0x00000002
    527c:	00000003 	.word	0x00000003
    5280:	00000028 	.word	0x00000028
    5284:	00000029 	.word	0x00000029
    5288:	00000004 	.word	0x00000004
    528c:	00000005 	.word	0x00000005
    5290:	00000006 	.word	0x00000006
    5294:	00000007 	.word	0x00000007
    5298:	00000020 	.word	0x00000020
    529c:	00000021 	.word	0x00000021
    52a0:	00000022 	.word	0x00000022
    52a4:	00000023 	.word	0x00000023
    52a8:	00000024 	.word	0x00000024
    52ac:	00000025 	.word	0x00000025
    52b0:	00000026 	.word	0x00000026
    52b4:	00000027 	.word	0x00000027
    52b8:	00000008 	.word	0x00000008
    52bc:	00000009 	.word	0x00000009
    52c0:	0000000a 	.word	0x0000000a
    52c4:	0000000b 	.word	0x0000000b
    52c8:	42000800 	.word	0x42000800
    52cc:	42000c00 	.word	0x42000c00
    52d0:	42001000 	.word	0x42001000
    52d4:	42001400 	.word	0x42001400
    52d8:	42001800 	.word	0x42001800
    52dc:	42001c00 	.word	0x42001c00
    52e0:	00001a2a 	.word	0x00001a2a
    52e4:	00001a26 	.word	0x00001a26
    52e8:	00001a26 	.word	0x00001a26
    52ec:	00001a8c 	.word	0x00001a8c
    52f0:	00001a8c 	.word	0x00001a8c
    52f4:	00001a3e 	.word	0x00001a3e
    52f8:	00001a30 	.word	0x00001a30
    52fc:	00001a44 	.word	0x00001a44
    5300:	00001a7a 	.word	0x00001a7a
    5304:	00001c4c 	.word	0x00001c4c
    5308:	00001c2c 	.word	0x00001c2c
    530c:	00001c2c 	.word	0x00001c2c
    5310:	00001cb8 	.word	0x00001cb8
    5314:	00001c3e 	.word	0x00001c3e
    5318:	00001c5a 	.word	0x00001c5a
    531c:	00001c30 	.word	0x00001c30
    5320:	00001c68 	.word	0x00001c68
    5324:	00001ca8 	.word	0x00001ca8

00005328 <CodePage437>:
	...
    5660:	01000000 06186080 18608001 60800106     .....`....`....`
    5670:	80010000 00000060 00000000 66986106     ....`........a.f
    5680:	98618619 00000000 00000000 00000000     ..a.............
    5690:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    56a0:	1966fefb 00986186 00000000 80010000     ..f..a..........
    56b0:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    56c0:	00000000 04000000 29a60823 1820c106     ........#..).. .
    56d0:	98200304 324c1165 00000008 00000000     .. .e.L2........
    56e0:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    56f0:	0000f6d9 00000000 30c00000 00030618     ...........0....
    5700:	000000c0 00000000 00000000 00000000     ................
    5710:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    5720:	10400002 00000000 01000000 02084000     ..@..........@..
    5730:	06186000 18608001 00010208 00000040     .`....`.....@...
    5740:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    5750:	80104290 00000000 00000000 00000000     .B..............
    5760:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    5780:	18000000 c0000306 00001040 00000000     ........@.......
    5790:	00000000 ff000000 0000e0bf 00000000     ................
	...
    57b4:	030e3800 0000e080 00000000 08200000     .8............ .
    57c4:	80000104 02041020 10408000 00000208     .... .....@.....
    57d4:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    57e4:	63061b6c f8e0c318 00000000 00000000     l..c............
    57f4:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    5804:	000000f8 00000000 c1f8e107 061860b0     .............`..
    5814:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    5824:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    5834:	00f8e167 00000000 40000000 03070c30     g..........@0...
    5844:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    5854:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    5864:	e167a081 000000f8 00000000 60f8e003     ..g............`
    5874:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    5884:	00000000 fefb0f00 20608001 00010408     ..........` ....
    5894:	0c302080 00c00003 00000000 e0030000     . 0.............
    58a4:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    58b4:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    58c4:	0618609f e1c70003 000000f0 00000000     .`..............
    58d4:	38000000 e080030e 00000000 030e3800     ...8.........8..
    58e4:	0000e080 00000000 00000000 80030e38     ............8...
    58f4:	000000e0 0e380000 40c00003 00000010     ......8....@....
    5904:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    5914:	0c300003 00000000 00000000 00000000     ..0.............
    5924:	00fefb0f fefb0f00 00000000 00000000     ................
    5934:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    5944:	0c0c3030 00000003 00000000 f8e10700     00..............
    5954:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    5964:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    5974:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    5984:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    5994:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    59a4:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    59b4:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    59c4:	00f8e063 00000000 c30f0000 861966f0     c............f..
    59d4:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    59e4:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    59f4:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    5a04:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    5a14:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    5a24:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    5a34:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    5a44:	00000000 07000000 0618f8e1 18608001     ..............`.
    5a54:	60800106 e1070618 000000f8 00000000     ...`............
    5a64:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    5a74:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    5a84:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    5a94:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    5aa4:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    5ab4:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    5ac4:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    5ad4:	ecb0c31e 0000061b 00000000 f8e00300     ................
    5ae4:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    5af4:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    5b04:	c000038c 00030c30 00000000 07000000     ....0...........
    5b14:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    5b24:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    5b34:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    5b44:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    5b54:	00f8e167 00000000 fb0f0000 000208fe     g...............
    5b64:	02082080 08208000 20800002 00000000     . .... .... ....
    5b74:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    5b84:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    5b94:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    5ba4:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    5bb4:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    5bc4:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    5bd4:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    5be4:	20c00107 80000208 00000020 00000000     ... .... .......
    5bf4:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    5c04:	0000fefb 00000000 f8e00300 00030c30     ............0...
    5c14:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    5c24:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    5c34:	0618c000 00000000 07000000 030cf0c1     ................
    5c44:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    5c54:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    5c80:	00fefb0f 00000000 80030000 00030ce0     ................
    5c90:	00001860 00000000 00000000 00000000     `...............
	...
    5ca8:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    5cb8:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    5cc8:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    5cd8:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    5ce8:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    5cf8:	c3061bec f6d9e7b0 00000000 00000000     ................
    5d08:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    5d18:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    5d28:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    5d38:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    5d48:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    5d58:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    5d68:	01000000 00006080 18e08003 60800106     .....`.........`
    5d78:	e1070618 000000f8 00000000 00186000     .............`..
    5d88:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    5d98:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    5da8:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    5db8:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    5dd4:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    5dec:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    5e04:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    5e1c:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    5e2c:	02082080 00000000 00000000 c1fae803     . ..............
    5e3c:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    5e4c:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    5e5c:	00000003 00000000 00000000 e1070000     ................
    5e6c:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    5e7c:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    5e8c:	30c0c00c 00000000 00000000 00000000     ...0............
    5e9c:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    5eb4:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    5ecc:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    5ee4:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    5f00:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    5f10:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    5f20:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    5f30:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    5f40:	00000000 80010000 01061860 06186080     ........`....`..
    5f50:	18608001 60800106 00000000 0f000000     ..`....`........
    5f60:	0208c003 0cc00003 c0000303 030f0208     ................
    5f70:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    5fa8:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    5fb8:	f8e06398 00000608 00000000 00669801     .c............f.
    5fc8:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    5fd8:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    5fe8:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    5ff8:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    6010:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    6028:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    6038:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    6048:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    6058:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    6068:	04fef907 00000003 00000000 07001420     ............ ...
    6078:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    6088:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    6098:	f10730c0 000000fc 00000000 18c00000     .0..............
    60a8:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    60b8:	00000000 98610600 80030000 010618e0     ......a.........
    60c8:	06186080 00f8e107 00000000 00000000     .`..............
    60d8:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    60f0:	0018c000 18e08003 60800106 e1070618     ...........`....
    6100:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    6110:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    6120:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    6130:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    6140:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    6158:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    6168:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    6178:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    6188:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    6198:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    61a8:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    61b8:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    61c8:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    61d8:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    61e8:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    61f8:	00f6d9c7 00000000 01000000 0c006698     .............f..
    6208:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    6218:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    6228:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    6238:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    6248:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    6258:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    6268:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    6278:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    6288:	20e00302 80800f08 00000020 00000000     ... .... .......
    6298:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    62a8:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    62b8:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    62c8:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    62d8:	fef823b0 00000000 00000000 000060c0     .#...........`..
    62e8:	18e08003 60800106 e1070618 000000f8     .......`........
    62f8:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    6308:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    6318:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    6330:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    6340:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    6350:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    6360:	1e08c003 00e08308 000080ff 00000000     ................
	...
    6378:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    6394:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    63a4:	00c00f3f 00000000 00000000 ff000000     ?...............
    63b4:	0003ecbf 00000000 00000000 00000000     ................
	...
    63cc:	18e0bfff 00000006 00000000 00000000     ................
    63dc:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    63ec:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    63fc:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    640c:	00000000 06180000 18000000 60800106     ...............`
    641c:	80010618 00061860 00000000 00000000     ....`...........
    642c:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    6444:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    6454:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    6464:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    6474:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    6484:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    6494:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    64a4:	20800002 80000208 00020820 02082080     ... .... .... ..
    64b4:	08208000 20800002 80000208 00020820     .. .... .... ...
    64c4:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    64d4:	00020820 02082080 f8208000 20800f02      .... .... .... 
    64e4:	80000208 00020820 05142080 14504001     .... .... ...@P.
    64f4:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    6504:	00504001 00000000 00000000 013f0000     .@P...........?.
    6514:	05145040 14504001 50400105 00000000     @P...@P...@P....
    6524:	00000000 02f80000 0820800f 20800002     .......... .... 
    6534:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    6544:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    6554:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    6564:	05145040 00504001 00000000 00000000     @P...@P.........
    6574:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    6584:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    659c:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    65b4:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    65d8:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    65e8:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    6600:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    6624:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    6634:	20800002 80000208 f0030820 02082080     ... .... .... ..
    6644:	08208000 20800002 00000000 00000000     .. .... ........
    6654:	3f000000 000000f0 00000000 00000000     ...?............
    6664:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    6674:	80000208 00020820 02082080 08208000     .... .... .... .
    6684:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    6694:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    66a4:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    66b4:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    66d0:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    66e0:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    6704:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    6714:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    6724:	50400105 40010514 00000050 00000000     ..@P...@P.......
    6734:	ff000000 00fc0fc0 00000000 00000000     ................
    6744:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    6754:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    6764:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    6774:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    6784:	000000f0 00000000 00000000 00000000     ................
    6794:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    67a4:	00020820 00002080 00000000 00000000      .... ..........
    67b4:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    67c4:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    67dc:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    67fc:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    680c:	00002080 00000000 00000000 40f10700     . .............@
    681c:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    682c:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    683c:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    684c:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    685c:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    687c:	80f00300 00020820 02082080 ff208000     .... .... .... .
    688c:	ffffffff ffffffff ffffffff ffffffff     ................
    689c:	ffffffff ffffffff 00000000 00000000     ................
    68ac:	3f000000 ffffffff ffffffff ffffffff     ...?............
    68bc:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    68cc:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    68dc:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    68ec:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    6910:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    6920:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    6930:	63c61861 000000f8 00000000 ff000000     a..c............
    6940:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    695c:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    696c:	fb0f0000 06b080fe 0618c000 c0800103     ................
    697c:	fefb2f20 00000000 00000000 00000000      /..............
    698c:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    69a4:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    69b4:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    69c4:	06186080 00608001 00000000 00000000     .`....`.........
    69d4:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    69e4:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    69f4:	061becbf e0c31863 000000f8 00000000     ....c...........
    6a04:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    6a14:	00008e33 00000000 fef80300 e1070318     3...............
    6a24:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    6a34:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    6a44:	00204295 00000000 00000000 07000000     .B .............
    6a54:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    6a64:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    6a74:	03186000 0000f8e0 00000000 00000000     .`..............
    6a84:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    6a94:	000060b0 00000000 0f000000 0000fefb     .`..............
    6aa4:	00fefb0f fefb0f00 00000000 00000000     ................
    6ab4:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    6ac4:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    6ad4:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    6ae4:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    6af4:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    6b04:	02082080 08208000 20800002 80000208     . .... .... ....
    6b14:	00020820 02082080 08208000 20800002      .... .... .... 
    6b24:	80000208 09240820 00008001 18000000     .... .$.........
    6b34:	00000006 00e0bfff 00061800 00000000     ................
	...
    6b4c:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    6b64:	01092460 00000080 00000000 00000000     `$..............
	...
    6b88:	80030e38 00000000 00000000 00000000     8...............
	...
    6ba0:	01000000 00006080 00000000 0f000000     .....`..........
    6bb0:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    6bc0:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    6bdc:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    6c00:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    6c28:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    6c38:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    6c48:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    6c58:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    6c68:	0008006d 00000a7f 0009001b 47552600     m............&UG
    6c78:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    6c88:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    6c98:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    6ca8:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    6cb8:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    6cc8:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    6cd8:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    6ce8:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    6cf8:	0008004d 00000a7f 0009001b 07150000     M...............
    6d08:	1100000a 00000000 000b0809 1a001700     ................
    6d18:	0f000000 0500000a 00001801 1f001000     ................
    6d28:	03131200 1b000000 14000000 000e1604     ................
    6d38:	1c001d1e 02061900 0008000d 00000a00     ................

00006d48 <kb_col>:
    6d48:	00010000 00020000 00040000 00080000     ................
    6d58:	00100000 00200000 08000000              ...... .....

00006d64 <kb_col_index>:
    6d64:	00000010 00000011 00000012 00000013     ................
    6d74:	00000014 00000015 0000001b              ............

00006d80 <kb_row>:
    6d80:	00000004 00000008 00000010 00000020     ............ ...
    6d90:	00000040 00000080 00000400 00000800     @...............
    6da0:	00001000 00002000                       ..... ..

00006da8 <kb_row_index>:
    6da8:	00000002 00000003 00000004 00000005     ................
    6db8:	00000006 00000007 0000000a 0000000b     ................
    6dc8:	0000000c 0000000d                       ........

00006dd0 <beelzebub.12957>:
    6dd0:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    6de0:	64012201 d4019201 08020702 5f023402     .".d.........4._
    6df0:	94027802 bb02a602 db02ca02 f902e802     .x..............
    6e00:	7f031f03                                ....

00006e04 <belial.12954>:
    6e04:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    6e14:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    6e24:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    6e34:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    6e44:	35c9c9c9 0000363a                       ...5:6..

00006e4c <lucifer.12956>:
    6e4c:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    6e5c:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    6e6c:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6e7c:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6e8c:	00505050 00000055                       PPP.U...

00006e94 <mulciber.12955>:
    6e94:	03020100 02010004 00020100 01000201     ................
    6ea4:	02010002 00020100 01000201 01000002     ................
    6eb4:	02010000 00020100 01000201 03020100     ................
    6ec4:	00000004 01000100 01000302 02010002     ................
    6ed4:	00000403 00000000 65530d0a 6c616972     ..........Serial
    6ee4:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00006ef4 <_global_impure_ptr>:
    6ef4:	20000168                                h.. 

00006ef8 <__sf_fake_stderr>:
	...

00006f18 <__sf_fake_stdin>:
	...

00006f38 <__sf_fake_stdout>:
	...
    6f58:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6f68:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    6f78:	31300046 35343332 39383736 64636261     F.0123456789abcd
    6f88:	00006665                                ef..

00006f8c <_init>:
    6f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6f92:	bc08      	pop	{r3}
    6f94:	469e      	mov	lr, r3
    6f96:	4770      	bx	lr

00006f98 <__init_array_start>:
    6f98:	000000dd 	.word	0x000000dd

00006f9c <_fini>:
    6f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f9e:	46c0      	nop			; (mov r8, r8)
    6fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6fa2:	bc08      	pop	{r3}
    6fa4:	469e      	mov	lr, r3
    6fa6:	4770      	bx	lr

00006fa8 <__fini_array_start>:
    6fa8:	000000b5 	.word	0x000000b5
