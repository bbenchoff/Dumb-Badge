
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007040  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001c8  20000000  00007040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000918  200001c8  00007208  000201c8  2**2
                  ALLOC
  3 .stack        00002000  20000ae0  00007b20  000201c8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003ae80  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000595c  00000000  00000000  0005b0c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006b15  00000000  00000000  00060a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000007b0  00000000  00000000  0006753a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000900  00000000  00000000  00067cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f41b  00000000  00000000  000685ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014042  00000000  00000000  00087a05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090445  00000000  00000000  0009ba47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ab0  00000000  00000000  0012be8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	e0 2a 00 20 29 22 00 00 25 22 00 00 25 22 00 00     .*. )"..%"..%"..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	25 22 00 00 00 00 00 00 00 00 00 00 25 22 00 00     %"..........%"..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	6d 33 00 00 25 22 00 00 25 22 00 00 25 22 00 00     m3..%"..%"..%"..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	25 22 00 00 25 22 00 00 25 22 00 00 25 22 00 00     %"..%"..%"..%"..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	25 22 00 00 25 22 00 00 41 14 00 00 51 14 00 00     %"..%"..A...Q...
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	61 14 00 00 71 14 00 00 81 14 00 00 91 14 00 00     a...q...........
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	25 22 00 00 25 22 00 00 25 22 00 00 25 22 00 00     %"..%"..%"..%"..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	25 22 00 00 25 22 00 00 25 22 00 00 25 22 00 00     %"..%"..%"..%"..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	75 0f 00 00 25 22 00 00 25 22 00 00 25 22 00 00     u...%"..%"..%"..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	25 22 00 00 00 00 00 00                             %"......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001c8 	.word	0x200001c8
      d4:	00000000 	.word	0x00000000
      d8:	00007040 	.word	0x00007040

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001cc 	.word	0x200001cc
     108:	00007040 	.word	0x00007040
     10c:	00007040 	.word	0x00007040
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	00003ad5 	.word	0x00003ad5

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	00003a2d 	.word	0x00003a2d

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	00003a2d 	.word	0x00003a2d

000001d0 <parserInit>:

uint8_t DECSCX = 0;
uint8_t DECSCY = 0;

void parserInit()
{
     1d0:	b510      	push	{r4, lr}
	uint8_t * buffer  = malloc(PARSER_BUFFER_SIZE * sizeof(uint8_t));
     1d2:	2014      	movs	r0, #20
     1d4:	4b03      	ldr	r3, [pc, #12]	; (1e4 <parserInit+0x14>)
     1d6:	4798      	blx	r3
	parserBuffer = ring_init(buffer, PARSER_BUFFER_SIZE);
     1d8:	2114      	movs	r1, #20
     1da:	4b03      	ldr	r3, [pc, #12]	; (1e8 <parserInit+0x18>)
     1dc:	4798      	blx	r3
     1de:	4b03      	ldr	r3, [pc, #12]	; (1ec <parserInit+0x1c>)
     1e0:	6018      	str	r0, [r3, #0]
}
     1e2:	bd10      	pop	{r4, pc}
     1e4:	00003ad5 	.word	0x00003ad5
     1e8:	00000115 	.word	0x00000115
     1ec:	200002c0 	.word	0x200002c0

000001f0 <escState>:
	}
	
}

void escState(uint8_t character)
{
     1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char tempCharacter;
	int xTemp = 0;
	
	if(character == 0x44)		//ESC + D - (IND) - 
     1f2:	2844      	cmp	r0, #68	; 0x44
     1f4:	d014      	beq.n	220 <escState+0x30>
		}
		
		currentState = stateGround;	
			
	}
	else if(character == 0x45)		//ESC + E - (NEL) -
     1f6:	2845      	cmp	r0, #69	; 0x45
     1f8:	d044      	beq.n	284 <escState+0x94>
		}	
		
		currentState = stateGround;	
		
	}
	else if(character == 0x37)		//ESC + 7 - (DECSC) -
     1fa:	2837      	cmp	r0, #55	; 0x37
     1fc:	d100      	bne.n	200 <escState+0x10>
     1fe:	e071      	b.n	2e4 <escState+0xf4>
		//Save cursor position
		DECSCX = xCharPos;
		DECSCY = yCharPos;
		currentState = stateGround;
	} 
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     200:	2838      	cmp	r0, #56	; 0x38
     202:	d100      	bne.n	206 <escState+0x16>
     204:	e07a      	b.n	2fc <escState+0x10c>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
		currentState = stateGround;
	}
	else if(character == 0x23 || character == 0x28)
     206:	2823      	cmp	r0, #35	; 0x23
     208:	d100      	bne.n	20c <escState+0x1c>
     20a:	e095      	b.n	338 <escState+0x148>
     20c:	2828      	cmp	r0, #40	; 0x28
     20e:	d100      	bne.n	212 <escState+0x22>
     210:	e092      	b.n	338 <escState+0x148>
	{
		stateEnterBuffer = character;
		currentState = stateESCinter;
	}
	else if(character == 0x5B)
     212:	285b      	cmp	r0, #91	; 0x5b
     214:	d100      	bne.n	218 <escState+0x28>
     216:	e095      	b.n	344 <escState+0x154>
	{
		currentState = stateCSIentry;
	}
	else
	{
		currentState = stateGround;
     218:	2200      	movs	r2, #0
     21a:	4b4c      	ldr	r3, [pc, #304]	; (34c <escState+0x15c>)
     21c:	701a      	strb	r2, [r3, #0]
	}
}
     21e:	e01e      	b.n	25e <escState+0x6e>
		if(yCharPos < 23)
     220:	4b4b      	ldr	r3, [pc, #300]	; (350 <escState+0x160>)
     222:	881a      	ldrh	r2, [r3, #0]
     224:	2a16      	cmp	r2, #22
     226:	d81b      	bhi.n	260 <escState+0x70>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     228:	4c4a      	ldr	r4, [pc, #296]	; (354 <escState+0x164>)
     22a:	4d4b      	ldr	r5, [pc, #300]	; (358 <escState+0x168>)
     22c:	8829      	ldrh	r1, [r5, #0]
     22e:	004b      	lsls	r3, r1, #1
     230:	185b      	adds	r3, r3, r1
     232:	00db      	lsls	r3, r3, #3
     234:	18e3      	adds	r3, r4, r3
     236:	5c98      	ldrb	r0, [r3, r2]
     238:	4e48      	ldr	r6, [pc, #288]	; (35c <escState+0x16c>)
     23a:	47b0      	blx	r6
			yCharPos++;
     23c:	4a44      	ldr	r2, [pc, #272]	; (350 <escState+0x160>)
     23e:	8813      	ldrh	r3, [r2, #0]
     240:	3301      	adds	r3, #1
     242:	b29b      	uxth	r3, r3
     244:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     246:	8829      	ldrh	r1, [r5, #0]
     248:	004a      	lsls	r2, r1, #1
     24a:	1852      	adds	r2, r2, r1
     24c:	00d2      	lsls	r2, r2, #3
     24e:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
     250:	5ce0      	ldrb	r0, [r4, r3]
     252:	47b0      	blx	r6
			blinkCursor();
     254:	4b42      	ldr	r3, [pc, #264]	; (360 <escState+0x170>)
     256:	4798      	blx	r3
		currentState = stateGround;	
     258:	2200      	movs	r2, #0
     25a:	4b3c      	ldr	r3, [pc, #240]	; (34c <escState+0x15c>)
     25c:	701a      	strb	r2, [r3, #0]
}
     25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xTemp = xCharPos;
     260:	4d3d      	ldr	r5, [pc, #244]	; (358 <escState+0x168>)
     262:	882c      	ldrh	r4, [r5, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     264:	0063      	lsls	r3, r4, #1
     266:	191b      	adds	r3, r3, r4
     268:	00db      	lsls	r3, r3, #3
     26a:	493a      	ldr	r1, [pc, #232]	; (354 <escState+0x164>)
     26c:	18cb      	adds	r3, r1, r3
     26e:	5c98      	ldrb	r0, [r3, r2]
     270:	4e3a      	ldr	r6, [pc, #232]	; (35c <escState+0x16c>)
     272:	47b0      	blx	r6
			newLine();
     274:	4b3b      	ldr	r3, [pc, #236]	; (364 <escState+0x174>)
     276:	4798      	blx	r3
			drawChar(0x00);
     278:	2000      	movs	r0, #0
     27a:	47b0      	blx	r6
			xCharPos = xTemp;
     27c:	802c      	strh	r4, [r5, #0]
			blinkCursor();
     27e:	4b38      	ldr	r3, [pc, #224]	; (360 <escState+0x170>)
     280:	4798      	blx	r3
     282:	e7e9      	b.n	258 <escState+0x68>
		if(yCharPos < 23)
     284:	4b32      	ldr	r3, [pc, #200]	; (350 <escState+0x160>)
     286:	881a      	ldrh	r2, [r3, #0]
     288:	2a16      	cmp	r2, #22
     28a:	d818      	bhi.n	2be <escState+0xce>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     28c:	4c31      	ldr	r4, [pc, #196]	; (354 <escState+0x164>)
     28e:	4d32      	ldr	r5, [pc, #200]	; (358 <escState+0x168>)
     290:	8829      	ldrh	r1, [r5, #0]
     292:	004b      	lsls	r3, r1, #1
     294:	185b      	adds	r3, r3, r1
     296:	00db      	lsls	r3, r3, #3
     298:	18e3      	adds	r3, r4, r3
     29a:	5c98      	ldrb	r0, [r3, r2]
     29c:	4e2f      	ldr	r6, [pc, #188]	; (35c <escState+0x16c>)
     29e:	47b0      	blx	r6
			yCharPos++;
     2a0:	4a2b      	ldr	r2, [pc, #172]	; (350 <escState+0x160>)
     2a2:	8813      	ldrh	r3, [r2, #0]
     2a4:	3301      	adds	r3, #1
     2a6:	b29b      	uxth	r3, r3
     2a8:	8013      	strh	r3, [r2, #0]
			xCharPos = 0;
     2aa:	2200      	movs	r2, #0
     2ac:	802a      	strh	r2, [r5, #0]
			drawChar(tempCharacter);
     2ae:	5ce0      	ldrb	r0, [r4, r3]
     2b0:	47b0      	blx	r6
			blinkCursor();
     2b2:	4b2b      	ldr	r3, [pc, #172]	; (360 <escState+0x170>)
     2b4:	4798      	blx	r3
		currentState = stateGround;	
     2b6:	2200      	movs	r2, #0
     2b8:	4b24      	ldr	r3, [pc, #144]	; (34c <escState+0x15c>)
     2ba:	701a      	strb	r2, [r3, #0]
     2bc:	e7cf      	b.n	25e <escState+0x6e>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     2be:	4c26      	ldr	r4, [pc, #152]	; (358 <escState+0x168>)
     2c0:	8821      	ldrh	r1, [r4, #0]
     2c2:	004b      	lsls	r3, r1, #1
     2c4:	185b      	adds	r3, r3, r1
     2c6:	00db      	lsls	r3, r3, #3
     2c8:	4922      	ldr	r1, [pc, #136]	; (354 <escState+0x164>)
     2ca:	18cb      	adds	r3, r1, r3
     2cc:	5c98      	ldrb	r0, [r3, r2]
     2ce:	4d23      	ldr	r5, [pc, #140]	; (35c <escState+0x16c>)
     2d0:	47a8      	blx	r5
			newLine();
     2d2:	4b24      	ldr	r3, [pc, #144]	; (364 <escState+0x174>)
     2d4:	4798      	blx	r3
			drawChar(0x00);
     2d6:	2000      	movs	r0, #0
     2d8:	47a8      	blx	r5
			xCharPos = 0;
     2da:	2300      	movs	r3, #0
     2dc:	8023      	strh	r3, [r4, #0]
			blinkCursor();
     2de:	4b20      	ldr	r3, [pc, #128]	; (360 <escState+0x170>)
     2e0:	4798      	blx	r3
     2e2:	e7e8      	b.n	2b6 <escState+0xc6>
		DECSCX = xCharPos;
     2e4:	4b1c      	ldr	r3, [pc, #112]	; (358 <escState+0x168>)
     2e6:	881a      	ldrh	r2, [r3, #0]
     2e8:	4b1f      	ldr	r3, [pc, #124]	; (368 <escState+0x178>)
     2ea:	701a      	strb	r2, [r3, #0]
		DECSCY = yCharPos;
     2ec:	4b18      	ldr	r3, [pc, #96]	; (350 <escState+0x160>)
     2ee:	881a      	ldrh	r2, [r3, #0]
     2f0:	4b1e      	ldr	r3, [pc, #120]	; (36c <escState+0x17c>)
     2f2:	701a      	strb	r2, [r3, #0]
		currentState = stateGround;
     2f4:	2200      	movs	r2, #0
     2f6:	4b15      	ldr	r3, [pc, #84]	; (34c <escState+0x15c>)
     2f8:	701a      	strb	r2, [r3, #0]
     2fa:	e7b0      	b.n	25e <escState+0x6e>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     2fc:	4c15      	ldr	r4, [pc, #84]	; (354 <escState+0x164>)
     2fe:	4f16      	ldr	r7, [pc, #88]	; (358 <escState+0x168>)
     300:	883a      	ldrh	r2, [r7, #0]
     302:	4e13      	ldr	r6, [pc, #76]	; (350 <escState+0x160>)
     304:	8831      	ldrh	r1, [r6, #0]
     306:	0053      	lsls	r3, r2, #1
     308:	189b      	adds	r3, r3, r2
     30a:	00db      	lsls	r3, r3, #3
     30c:	18e3      	adds	r3, r4, r3
     30e:	5c58      	ldrb	r0, [r3, r1]
     310:	4d12      	ldr	r5, [pc, #72]	; (35c <escState+0x16c>)
     312:	47a8      	blx	r5
		xCharPos = DECSCX;
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <escState+0x178>)
     316:	781a      	ldrb	r2, [r3, #0]
     318:	803a      	strh	r2, [r7, #0]
		yCharPos = DECSCY;
     31a:	4b14      	ldr	r3, [pc, #80]	; (36c <escState+0x17c>)
     31c:	7819      	ldrb	r1, [r3, #0]
     31e:	8031      	strh	r1, [r6, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     320:	0053      	lsls	r3, r2, #1
     322:	189b      	adds	r3, r3, r2
     324:	00db      	lsls	r3, r3, #3
     326:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     328:	5c58      	ldrb	r0, [r3, r1]
     32a:	47a8      	blx	r5
		blinkCursor();
     32c:	4b0c      	ldr	r3, [pc, #48]	; (360 <escState+0x170>)
     32e:	4798      	blx	r3
		currentState = stateGround;
     330:	2200      	movs	r2, #0
     332:	4b06      	ldr	r3, [pc, #24]	; (34c <escState+0x15c>)
     334:	701a      	strb	r2, [r3, #0]
     336:	e792      	b.n	25e <escState+0x6e>
		stateEnterBuffer = character;
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <escState+0x180>)
     33a:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     33c:	2202      	movs	r2, #2
     33e:	4b03      	ldr	r3, [pc, #12]	; (34c <escState+0x15c>)
     340:	701a      	strb	r2, [r3, #0]
     342:	e78c      	b.n	25e <escState+0x6e>
		currentState = stateCSIentry;
     344:	2203      	movs	r2, #3
     346:	4b01      	ldr	r3, [pc, #4]	; (34c <escState+0x15c>)
     348:	701a      	strb	r2, [r3, #0]
     34a:	e788      	b.n	25e <escState+0x6e>
     34c:	200002ad 	.word	0x200002ad
     350:	200002aa 	.word	0x200002aa
     354:	20000330 	.word	0x20000330
     358:	200002a8 	.word	0x200002a8
     35c:	000023dd 	.word	0x000023dd
     360:	000024c5 	.word	0x000024c5
     364:	00002621 	.word	0x00002621
     368:	200001e4 	.word	0x200001e4
     36c:	200001e5 	.word	0x200001e5
     370:	200002c4 	.word	0x200002c4

00000374 <CSIentryState>:

void CSIentryState(uint8_t character)
{
	if(character == 0x3A)
     374:	283a      	cmp	r0, #58	; 0x3a
     376:	d003      	beq.n	380 <CSIentryState+0xc>
	{
		currentState = stateCSIignore;
	}
	else
	{
		currentState = stateGround;
     378:	2200      	movs	r2, #0
     37a:	4b03      	ldr	r3, [pc, #12]	; (388 <CSIentryState+0x14>)
     37c:	701a      	strb	r2, [r3, #0]
	}
}
     37e:	4770      	bx	lr
		currentState = stateCSIignore;
     380:	2206      	movs	r2, #6
     382:	4b01      	ldr	r3, [pc, #4]	; (388 <CSIentryState+0x14>)
     384:	701a      	strb	r2, [r3, #0]
     386:	e7fa      	b.n	37e <CSIentryState+0xa>
     388:	200002ad 	.word	0x200002ad

0000038c <CSIignoreState>:

void CSIignoreState(uint8_t character)
{
	if(character >= 0x40 && character <= 0x7E)
     38c:	3840      	subs	r0, #64	; 0x40
     38e:	283e      	cmp	r0, #62	; 0x3e
     390:	d802      	bhi.n	398 <CSIignoreState+0xc>
	{
		currentState = stateGround;
     392:	2200      	movs	r2, #0
     394:	4b01      	ldr	r3, [pc, #4]	; (39c <CSIignoreState+0x10>)
     396:	701a      	strb	r2, [r3, #0]
	}
}
     398:	4770      	bx	lr
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	200002ad 	.word	0x200002ad

000003a0 <nextTab>:
		}
	}
}

int nextTab(int a) 
{
     3a0:	b510      	push	{r4, lr}
     3a2:	b0d0      	sub	sp, #320	; 0x140
     3a4:	0004      	movs	r4, r0
	int tabArray[] =
     3a6:	22a0      	movs	r2, #160	; 0xa0
     3a8:	0052      	lsls	r2, r2, #1
     3aa:	4904      	ldr	r1, [pc, #16]	; (3bc <nextTab+0x1c>)
     3ac:	4668      	mov	r0, sp
     3ae:	4b04      	ldr	r3, [pc, #16]	; (3c0 <nextTab+0x20>)
     3b0:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
     3b2:	00a4      	lsls	r4, r4, #2
     3b4:	466b      	mov	r3, sp
     3b6:	58e0      	ldr	r0, [r4, r3]
}
     3b8:	b050      	add	sp, #320	; 0x140
     3ba:	bd10      	pop	{r4, pc}
     3bc:	00004c70 	.word	0x00004c70
     3c0:	00003ae9 	.word	0x00003ae9

000003c4 <groundState>:
{
     3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3c6:	46c6      	mov	lr, r8
     3c8:	b500      	push	{lr}
	if(character == 0x00)							//NUL 0x00 DO NOTHING
     3ca:	2807      	cmp	r0, #7
     3cc:	d93b      	bls.n	446 <groundState+0x82>
	else if(character == 0x08)						//BS 0x08 Backspace
     3ce:	2808      	cmp	r0, #8
     3d0:	d035      	beq.n	43e <groundState+0x7a>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
     3d2:	2809      	cmp	r0, #9
     3d4:	d053      	beq.n	47e <groundState+0xba>
	else if(character == 0x0A)						//LF 0x0A Line Feed
     3d6:	280a      	cmp	r0, #10
     3d8:	d100      	bne.n	3dc <groundState+0x18>
     3da:	e072      	b.n	4c2 <groundState+0xfe>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
     3dc:	280b      	cmp	r0, #11
     3de:	d100      	bne.n	3e2 <groundState+0x1e>
     3e0:	e0c6      	b.n	570 <groundState+0x1ac>
	else if(character == 0x0C)						//FF 0x0C Form Feed
     3e2:	280c      	cmp	r0, #12
     3e4:	d02f      	beq.n	446 <groundState+0x82>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
     3e6:	280d      	cmp	r0, #13
     3e8:	d100      	bne.n	3ec <groundState+0x28>
     3ea:	e119      	b.n	620 <groundState+0x25c>
	else if(character == 0x0E)						//SO 0x0E Shift Out
     3ec:	0003      	movs	r3, r0
     3ee:	3b0e      	subs	r3, #14
     3f0:	2b0c      	cmp	r3, #12
     3f2:	d928      	bls.n	446 <groundState+0x82>
	else if(character == 0x1B)						//ESC 0x1B Escape
     3f4:	281b      	cmp	r0, #27
     3f6:	d100      	bne.n	3fa <groundState+0x36>
     3f8:	e138      	b.n	66c <groundState+0x2a8>
	else if(character == 0x1C)						//FS 0x1C File Separator
     3fa:	0003      	movs	r3, r0
     3fc:	3b1c      	subs	r3, #28
     3fe:	2b03      	cmp	r3, #3
     400:	d921      	bls.n	446 <groundState+0x82>
	else if(character == 0x7F)						//DEL 0x7F Delete
     402:	287f      	cmp	r0, #127	; 0x7f
     404:	d01f      	beq.n	446 <groundState+0x82>
		consoleDisplay[xCharPos][yCharPos] = character;
     406:	4d9b      	ldr	r5, [pc, #620]	; (674 <groundState+0x2b0>)
     408:	4c9b      	ldr	r4, [pc, #620]	; (678 <groundState+0x2b4>)
     40a:	8823      	ldrh	r3, [r4, #0]
     40c:	4f9b      	ldr	r7, [pc, #620]	; (67c <groundState+0x2b8>)
     40e:	883a      	ldrh	r2, [r7, #0]
     410:	2618      	movs	r6, #24
     412:	4373      	muls	r3, r6
     414:	18eb      	adds	r3, r5, r3
     416:	5498      	strb	r0, [r3, r2]
		drawChar(character);
     418:	4b99      	ldr	r3, [pc, #612]	; (680 <groundState+0x2bc>)
     41a:	4698      	mov	r8, r3
     41c:	4798      	blx	r3
		xCharPos++;
     41e:	8823      	ldrh	r3, [r4, #0]
     420:	3301      	adds	r3, #1
     422:	b29b      	uxth	r3, r3
     424:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     426:	883a      	ldrh	r2, [r7, #0]
     428:	4373      	muls	r3, r6
     42a:	18ed      	adds	r5, r5, r3
     42c:	5ca8      	ldrb	r0, [r5, r2]
     42e:	47c0      	blx	r8
		if(xCharPos > 79)		//END OF LINE
     430:	8823      	ldrh	r3, [r4, #0]
     432:	2b4f      	cmp	r3, #79	; 0x4f
     434:	d907      	bls.n	446 <groundState+0x82>
			xCharPos--;
     436:	3b01      	subs	r3, #1
     438:	4a8f      	ldr	r2, [pc, #572]	; (678 <groundState+0x2b4>)
     43a:	8013      	strh	r3, [r2, #0]
}
     43c:	e003      	b.n	446 <groundState+0x82>
		if(xCharPos > 0)
     43e:	4b8e      	ldr	r3, [pc, #568]	; (678 <groundState+0x2b4>)
     440:	881b      	ldrh	r3, [r3, #0]
     442:	2b00      	cmp	r3, #0
     444:	d102      	bne.n	44c <groundState+0x88>
}
     446:	bc04      	pop	{r2}
     448:	4690      	mov	r8, r2
     44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     44c:	4c89      	ldr	r4, [pc, #548]	; (674 <groundState+0x2b0>)
     44e:	4d8b      	ldr	r5, [pc, #556]	; (67c <groundState+0x2b8>)
     450:	8829      	ldrh	r1, [r5, #0]
     452:	005a      	lsls	r2, r3, #1
     454:	18d3      	adds	r3, r2, r3
     456:	00db      	lsls	r3, r3, #3
     458:	18e3      	adds	r3, r4, r3
     45a:	5c58      	ldrb	r0, [r3, r1]
     45c:	4e88      	ldr	r6, [pc, #544]	; (680 <groundState+0x2bc>)
     45e:	47b0      	blx	r6
			xCharPos--;
     460:	4a85      	ldr	r2, [pc, #532]	; (678 <groundState+0x2b4>)
     462:	8813      	ldrh	r3, [r2, #0]
     464:	3b01      	subs	r3, #1
     466:	b29b      	uxth	r3, r3
     468:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     46a:	8829      	ldrh	r1, [r5, #0]
     46c:	005a      	lsls	r2, r3, #1
     46e:	18d3      	adds	r3, r2, r3
     470:	00db      	lsls	r3, r3, #3
     472:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
     474:	5c58      	ldrb	r0, [r3, r1]
     476:	47b0      	blx	r6
			blinkCursor();
     478:	4b82      	ldr	r3, [pc, #520]	; (684 <groundState+0x2c0>)
     47a:	4798      	blx	r3
     47c:	e7e3      	b.n	446 <groundState+0x82>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     47e:	4c7e      	ldr	r4, [pc, #504]	; (678 <groundState+0x2b4>)
     480:	8822      	ldrh	r2, [r4, #0]
     482:	4b7e      	ldr	r3, [pc, #504]	; (67c <groundState+0x2b8>)
     484:	8819      	ldrh	r1, [r3, #0]
     486:	0053      	lsls	r3, r2, #1
     488:	189b      	adds	r3, r3, r2
     48a:	00db      	lsls	r3, r3, #3
     48c:	4a79      	ldr	r2, [pc, #484]	; (674 <groundState+0x2b0>)
     48e:	18d3      	adds	r3, r2, r3
     490:	5c58      	ldrb	r0, [r3, r1]
     492:	4b7b      	ldr	r3, [pc, #492]	; (680 <groundState+0x2bc>)
     494:	4798      	blx	r3
		if(xCharPos <= 79)
     496:	8820      	ldrh	r0, [r4, #0]
     498:	284f      	cmp	r0, #79	; 0x4f
     49a:	d803      	bhi.n	4a4 <groundState+0xe0>
			xCharPos = nextTab(xCharPos);
     49c:	4b7a      	ldr	r3, [pc, #488]	; (688 <groundState+0x2c4>)
     49e:	4798      	blx	r3
     4a0:	4b75      	ldr	r3, [pc, #468]	; (678 <groundState+0x2b4>)
     4a2:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4a4:	4b74      	ldr	r3, [pc, #464]	; (678 <groundState+0x2b4>)
     4a6:	881a      	ldrh	r2, [r3, #0]
     4a8:	4b74      	ldr	r3, [pc, #464]	; (67c <groundState+0x2b8>)
     4aa:	8819      	ldrh	r1, [r3, #0]
     4ac:	0053      	lsls	r3, r2, #1
     4ae:	189b      	adds	r3, r3, r2
     4b0:	00db      	lsls	r3, r3, #3
     4b2:	4a70      	ldr	r2, [pc, #448]	; (674 <groundState+0x2b0>)
     4b4:	18d3      	adds	r3, r2, r3
     4b6:	5c58      	ldrb	r0, [r3, r1]
     4b8:	4b71      	ldr	r3, [pc, #452]	; (680 <groundState+0x2bc>)
     4ba:	4798      	blx	r3
		blinkCursor();
     4bc:	4b71      	ldr	r3, [pc, #452]	; (684 <groundState+0x2c0>)
     4be:	4798      	blx	r3
     4c0:	e7c1      	b.n	446 <groundState+0x82>
		if(yCharPos == 23)
     4c2:	4b6e      	ldr	r3, [pc, #440]	; (67c <groundState+0x2b8>)
     4c4:	881a      	ldrh	r2, [r3, #0]
     4c6:	2a17      	cmp	r2, #23
     4c8:	d032      	beq.n	530 <groundState+0x16c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     4ca:	4c6a      	ldr	r4, [pc, #424]	; (674 <groundState+0x2b0>)
     4cc:	4d6a      	ldr	r5, [pc, #424]	; (678 <groundState+0x2b4>)
     4ce:	8829      	ldrh	r1, [r5, #0]
     4d0:	004b      	lsls	r3, r1, #1
     4d2:	185b      	adds	r3, r3, r1
     4d4:	00db      	lsls	r3, r3, #3
     4d6:	18e3      	adds	r3, r4, r3
     4d8:	5c98      	ldrb	r0, [r3, r2]
     4da:	4e69      	ldr	r6, [pc, #420]	; (680 <groundState+0x2bc>)
     4dc:	47b0      	blx	r6
			yCharPos++;
     4de:	4a67      	ldr	r2, [pc, #412]	; (67c <groundState+0x2b8>)
     4e0:	8813      	ldrh	r3, [r2, #0]
     4e2:	3301      	adds	r3, #1
     4e4:	b29b      	uxth	r3, r3
     4e6:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     4e8:	8829      	ldrh	r1, [r5, #0]
     4ea:	004a      	lsls	r2, r1, #1
     4ec:	1852      	adds	r2, r2, r1
     4ee:	00d2      	lsls	r2, r2, #3
     4f0:	18a4      	adds	r4, r4, r2
     4f2:	5ce0      	ldrb	r0, [r4, r3]
     4f4:	47b0      	blx	r6
			blinkCursor();
     4f6:	4b63      	ldr	r3, [pc, #396]	; (684 <groundState+0x2c0>)
     4f8:	4798      	blx	r3
		if(lineFeed)
     4fa:	4b64      	ldr	r3, [pc, #400]	; (68c <groundState+0x2c8>)
     4fc:	781b      	ldrb	r3, [r3, #0]
     4fe:	2b00      	cmp	r3, #0
     500:	d0a1      	beq.n	446 <groundState+0x82>
			if(yCharPos == 23)
     502:	4b5e      	ldr	r3, [pc, #376]	; (67c <groundState+0x2b8>)
     504:	881a      	ldrh	r2, [r3, #0]
     506:	2a17      	cmp	r2, #23
     508:	d021      	beq.n	54e <groundState+0x18a>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     50a:	4d5a      	ldr	r5, [pc, #360]	; (674 <groundState+0x2b0>)
     50c:	4e5a      	ldr	r6, [pc, #360]	; (678 <groundState+0x2b4>)
     50e:	8831      	ldrh	r1, [r6, #0]
     510:	004b      	lsls	r3, r1, #1
     512:	185b      	adds	r3, r3, r1
     514:	00db      	lsls	r3, r3, #3
     516:	18eb      	adds	r3, r5, r3
     518:	5c98      	ldrb	r0, [r3, r2]
     51a:	4c59      	ldr	r4, [pc, #356]	; (680 <groundState+0x2bc>)
     51c:	47a0      	blx	r4
				xCharPos = 0;
     51e:	2300      	movs	r3, #0
     520:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     522:	4b56      	ldr	r3, [pc, #344]	; (67c <groundState+0x2b8>)
     524:	881b      	ldrh	r3, [r3, #0]
     526:	5ce8      	ldrb	r0, [r5, r3]
     528:	47a0      	blx	r4
				blinkCursor();
     52a:	4b56      	ldr	r3, [pc, #344]	; (684 <groundState+0x2c0>)
     52c:	4798      	blx	r3
     52e:	e78a      	b.n	446 <groundState+0x82>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     530:	4b51      	ldr	r3, [pc, #324]	; (678 <groundState+0x2b4>)
     532:	881a      	ldrh	r2, [r3, #0]
     534:	0053      	lsls	r3, r2, #1
     536:	189b      	adds	r3, r3, r2
     538:	00db      	lsls	r3, r3, #3
     53a:	4a4e      	ldr	r2, [pc, #312]	; (674 <groundState+0x2b0>)
     53c:	18d3      	adds	r3, r2, r3
     53e:	7dd8      	ldrb	r0, [r3, #23]
     540:	4b4f      	ldr	r3, [pc, #316]	; (680 <groundState+0x2bc>)
     542:	4798      	blx	r3
			newLine();
     544:	4b52      	ldr	r3, [pc, #328]	; (690 <groundState+0x2cc>)
     546:	4798      	blx	r3
			blinkCursor();
     548:	4b4e      	ldr	r3, [pc, #312]	; (684 <groundState+0x2c0>)
     54a:	4798      	blx	r3
     54c:	e7d5      	b.n	4fa <groundState+0x136>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     54e:	4d4a      	ldr	r5, [pc, #296]	; (678 <groundState+0x2b4>)
     550:	882a      	ldrh	r2, [r5, #0]
     552:	0053      	lsls	r3, r2, #1
     554:	189b      	adds	r3, r3, r2
     556:	00db      	lsls	r3, r3, #3
     558:	4a46      	ldr	r2, [pc, #280]	; (674 <groundState+0x2b0>)
     55a:	18d3      	adds	r3, r2, r3
     55c:	7dd8      	ldrb	r0, [r3, #23]
     55e:	4c48      	ldr	r4, [pc, #288]	; (680 <groundState+0x2bc>)
     560:	47a0      	blx	r4
				xCharPos = 0;
     562:	2300      	movs	r3, #0
     564:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     566:	2000      	movs	r0, #0
     568:	47a0      	blx	r4
				blinkCursor();
     56a:	4b46      	ldr	r3, [pc, #280]	; (684 <groundState+0x2c0>)
     56c:	4798      	blx	r3
     56e:	e76a      	b.n	446 <groundState+0x82>
		if(yCharPos == 23)
     570:	4b42      	ldr	r3, [pc, #264]	; (67c <groundState+0x2b8>)
     572:	881a      	ldrh	r2, [r3, #0]
     574:	2a17      	cmp	r2, #23
     576:	d033      	beq.n	5e0 <groundState+0x21c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     578:	4c3e      	ldr	r4, [pc, #248]	; (674 <groundState+0x2b0>)
     57a:	4d3f      	ldr	r5, [pc, #252]	; (678 <groundState+0x2b4>)
     57c:	8829      	ldrh	r1, [r5, #0]
     57e:	004b      	lsls	r3, r1, #1
     580:	185b      	adds	r3, r3, r1
     582:	00db      	lsls	r3, r3, #3
     584:	18e3      	adds	r3, r4, r3
     586:	5c98      	ldrb	r0, [r3, r2]
     588:	4e3d      	ldr	r6, [pc, #244]	; (680 <groundState+0x2bc>)
     58a:	47b0      	blx	r6
			yCharPos++;
     58c:	4a3b      	ldr	r2, [pc, #236]	; (67c <groundState+0x2b8>)
     58e:	8813      	ldrh	r3, [r2, #0]
     590:	3301      	adds	r3, #1
     592:	b29b      	uxth	r3, r3
     594:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     596:	8829      	ldrh	r1, [r5, #0]
     598:	004a      	lsls	r2, r1, #1
     59a:	1852      	adds	r2, r2, r1
     59c:	00d2      	lsls	r2, r2, #3
     59e:	18a4      	adds	r4, r4, r2
     5a0:	5ce0      	ldrb	r0, [r4, r3]
     5a2:	47b0      	blx	r6
			blinkCursor();
     5a4:	4b37      	ldr	r3, [pc, #220]	; (684 <groundState+0x2c0>)
     5a6:	4798      	blx	r3
		if(lineFeed)
     5a8:	4b38      	ldr	r3, [pc, #224]	; (68c <groundState+0x2c8>)
     5aa:	781b      	ldrb	r3, [r3, #0]
     5ac:	2b00      	cmp	r3, #0
     5ae:	d100      	bne.n	5b2 <groundState+0x1ee>
     5b0:	e749      	b.n	446 <groundState+0x82>
			if(yCharPos == 23)
     5b2:	4b32      	ldr	r3, [pc, #200]	; (67c <groundState+0x2b8>)
     5b4:	881a      	ldrh	r2, [r3, #0]
     5b6:	2a17      	cmp	r2, #23
     5b8:	d021      	beq.n	5fe <groundState+0x23a>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     5ba:	4d2e      	ldr	r5, [pc, #184]	; (674 <groundState+0x2b0>)
     5bc:	4e2e      	ldr	r6, [pc, #184]	; (678 <groundState+0x2b4>)
     5be:	8831      	ldrh	r1, [r6, #0]
     5c0:	004b      	lsls	r3, r1, #1
     5c2:	185b      	adds	r3, r3, r1
     5c4:	00db      	lsls	r3, r3, #3
     5c6:	18eb      	adds	r3, r5, r3
     5c8:	5c98      	ldrb	r0, [r3, r2]
     5ca:	4c2d      	ldr	r4, [pc, #180]	; (680 <groundState+0x2bc>)
     5cc:	47a0      	blx	r4
				xCharPos = 0;
     5ce:	2300      	movs	r3, #0
     5d0:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     5d2:	4b2a      	ldr	r3, [pc, #168]	; (67c <groundState+0x2b8>)
     5d4:	881b      	ldrh	r3, [r3, #0]
     5d6:	5ce8      	ldrb	r0, [r5, r3]
     5d8:	47a0      	blx	r4
				blinkCursor();
     5da:	4b2a      	ldr	r3, [pc, #168]	; (684 <groundState+0x2c0>)
     5dc:	4798      	blx	r3
     5de:	e732      	b.n	446 <groundState+0x82>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     5e0:	4b25      	ldr	r3, [pc, #148]	; (678 <groundState+0x2b4>)
     5e2:	881a      	ldrh	r2, [r3, #0]
     5e4:	0053      	lsls	r3, r2, #1
     5e6:	189b      	adds	r3, r3, r2
     5e8:	00db      	lsls	r3, r3, #3
     5ea:	4a22      	ldr	r2, [pc, #136]	; (674 <groundState+0x2b0>)
     5ec:	18d3      	adds	r3, r2, r3
     5ee:	7dd8      	ldrb	r0, [r3, #23]
     5f0:	4b23      	ldr	r3, [pc, #140]	; (680 <groundState+0x2bc>)
     5f2:	4798      	blx	r3
			newLine();
     5f4:	4b26      	ldr	r3, [pc, #152]	; (690 <groundState+0x2cc>)
     5f6:	4798      	blx	r3
			blinkCursor();
     5f8:	4b22      	ldr	r3, [pc, #136]	; (684 <groundState+0x2c0>)
     5fa:	4798      	blx	r3
     5fc:	e7d4      	b.n	5a8 <groundState+0x1e4>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
     5fe:	4d1e      	ldr	r5, [pc, #120]	; (678 <groundState+0x2b4>)
     600:	882a      	ldrh	r2, [r5, #0]
     602:	0053      	lsls	r3, r2, #1
     604:	189b      	adds	r3, r3, r2
     606:	00db      	lsls	r3, r3, #3
     608:	4a1a      	ldr	r2, [pc, #104]	; (674 <groundState+0x2b0>)
     60a:	18d3      	adds	r3, r2, r3
     60c:	7dd8      	ldrb	r0, [r3, #23]
     60e:	4c1c      	ldr	r4, [pc, #112]	; (680 <groundState+0x2bc>)
     610:	47a0      	blx	r4
				xCharPos = 0;
     612:	2300      	movs	r3, #0
     614:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
     616:	2000      	movs	r0, #0
     618:	47a0      	blx	r4
				blinkCursor();
     61a:	4b1a      	ldr	r3, [pc, #104]	; (684 <groundState+0x2c0>)
     61c:	4798      	blx	r3
     61e:	e712      	b.n	446 <groundState+0x82>
		if(yCharPos == 23)
     620:	4b16      	ldr	r3, [pc, #88]	; (67c <groundState+0x2b8>)
     622:	881a      	ldrh	r2, [r3, #0]
     624:	2a17      	cmp	r2, #23
     626:	d012      	beq.n	64e <groundState+0x28a>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     628:	4d12      	ldr	r5, [pc, #72]	; (674 <groundState+0x2b0>)
     62a:	4e13      	ldr	r6, [pc, #76]	; (678 <groundState+0x2b4>)
     62c:	8831      	ldrh	r1, [r6, #0]
     62e:	004b      	lsls	r3, r1, #1
     630:	185b      	adds	r3, r3, r1
     632:	00db      	lsls	r3, r3, #3
     634:	18eb      	adds	r3, r5, r3
     636:	5c98      	ldrb	r0, [r3, r2]
     638:	4c11      	ldr	r4, [pc, #68]	; (680 <groundState+0x2bc>)
     63a:	47a0      	blx	r4
			xCharPos = 0;
     63c:	2300      	movs	r3, #0
     63e:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     640:	4b0e      	ldr	r3, [pc, #56]	; (67c <groundState+0x2b8>)
     642:	881b      	ldrh	r3, [r3, #0]
     644:	5ce8      	ldrb	r0, [r5, r3]
     646:	47a0      	blx	r4
			blinkCursor();
     648:	4b0e      	ldr	r3, [pc, #56]	; (684 <groundState+0x2c0>)
     64a:	4798      	blx	r3
     64c:	e6fb      	b.n	446 <groundState+0x82>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     64e:	4c0a      	ldr	r4, [pc, #40]	; (678 <groundState+0x2b4>)
     650:	8822      	ldrh	r2, [r4, #0]
     652:	0053      	lsls	r3, r2, #1
     654:	189b      	adds	r3, r3, r2
     656:	00db      	lsls	r3, r3, #3
     658:	4a06      	ldr	r2, [pc, #24]	; (674 <groundState+0x2b0>)
     65a:	18d3      	adds	r3, r2, r3
     65c:	7dd8      	ldrb	r0, [r3, #23]
     65e:	4b08      	ldr	r3, [pc, #32]	; (680 <groundState+0x2bc>)
     660:	4798      	blx	r3
			xCharPos = 0;
     662:	2300      	movs	r3, #0
     664:	8023      	strh	r3, [r4, #0]
			blinkCursor();
     666:	4b07      	ldr	r3, [pc, #28]	; (684 <groundState+0x2c0>)
     668:	4798      	blx	r3
     66a:	e6ec      	b.n	446 <groundState+0x82>
		currentState = stateESC;
     66c:	2201      	movs	r2, #1
     66e:	4b09      	ldr	r3, [pc, #36]	; (694 <groundState+0x2d0>)
     670:	701a      	strb	r2, [r3, #0]
     672:	e6e8      	b.n	446 <groundState+0x82>
     674:	20000330 	.word	0x20000330
     678:	200002a8 	.word	0x200002a8
     67c:	200002aa 	.word	0x200002aa
     680:	000023dd 	.word	0x000023dd
     684:	000024c5 	.word	0x000024c5
     688:	000003a1 	.word	0x000003a1
     68c:	20000158 	.word	0x20000158
     690:	00002621 	.word	0x00002621
     694:	200002ad 	.word	0x200002ad

00000698 <parseChar>:
{
     698:	b510      	push	{r4, lr}
	parserState state = currentState;
     69a:	4b0d      	ldr	r3, [pc, #52]	; (6d0 <parseChar+0x38>)
	switch(state)
     69c:	781a      	ldrb	r2, [r3, #0]
     69e:	2a06      	cmp	r2, #6
     6a0:	d805      	bhi.n	6ae <parseChar+0x16>
     6a2:	0093      	lsls	r3, r2, #2
     6a4:	4a0b      	ldr	r2, [pc, #44]	; (6d4 <parseChar+0x3c>)
     6a6:	58d3      	ldr	r3, [r2, r3]
     6a8:	469f      	mov	pc, r3
			groundState(character);
     6aa:	4b0b      	ldr	r3, [pc, #44]	; (6d8 <parseChar+0x40>)
     6ac:	4798      	blx	r3
}
     6ae:	bd10      	pop	{r4, pc}
			escState(character);
     6b0:	4b0a      	ldr	r3, [pc, #40]	; (6dc <parseChar+0x44>)
     6b2:	4798      	blx	r3
		break;
     6b4:	e7fb      	b.n	6ae <parseChar+0x16>
	stateEnterBuffer = 0x00;
     6b6:	2300      	movs	r3, #0
     6b8:	4a09      	ldr	r2, [pc, #36]	; (6e0 <parseChar+0x48>)
     6ba:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
     6bc:	4a04      	ldr	r2, [pc, #16]	; (6d0 <parseChar+0x38>)
     6be:	7013      	strb	r3, [r2, #0]
     6c0:	e7f5      	b.n	6ae <parseChar+0x16>
			CSIentryState(character);
     6c2:	4b08      	ldr	r3, [pc, #32]	; (6e4 <parseChar+0x4c>)
     6c4:	4798      	blx	r3
		break;
     6c6:	e7f2      	b.n	6ae <parseChar+0x16>
			CSIignoreState(character);
     6c8:	4b07      	ldr	r3, [pc, #28]	; (6e8 <parseChar+0x50>)
     6ca:	4798      	blx	r3
}
     6cc:	e7ef      	b.n	6ae <parseChar+0x16>
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	200002ad 	.word	0x200002ad
     6d4:	00004c54 	.word	0x00004c54
     6d8:	000003c5 	.word	0x000003c5
     6dc:	000001f1 	.word	0x000001f1
     6e0:	200002c4 	.word	0x200002c4
     6e4:	00000375 	.word	0x00000375
     6e8:	0000038d 	.word	0x0000038d

000006ec <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
     6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ee:	b0c1      	sub	sp, #260	; 0x104
     6f0:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
     6f2:	22d0      	movs	r2, #208	; 0xd0
     6f4:	492d      	ldr	r1, [pc, #180]	; (7ac <drawKare+0xc0>)
     6f6:	a80c      	add	r0, sp, #48	; 0x30
     6f8:	4b2d      	ldr	r3, [pc, #180]	; (7b0 <drawKare+0xc4>)
     6fa:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
     6fc:	a805      	add	r0, sp, #20
     6fe:	4b2d      	ldr	r3, [pc, #180]	; (7b4 <drawKare+0xc8>)
     700:	001a      	movs	r2, r3
     702:	3250      	adds	r2, #80	; 0x50
     704:	0001      	movs	r1, r0
     706:	ca31      	ldmia	r2!, {r0, r4, r5}
     708:	c131      	stmia	r1!, {r0, r4, r5}
     70a:	ca31      	ldmia	r2!, {r0, r4, r5}
     70c:	c131      	stmia	r1!, {r0, r4, r5}
     70e:	6812      	ldr	r2, [r2, #0]
     710:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
     712:	336c      	adds	r3, #108	; 0x6c
     714:	466a      	mov	r2, sp
     716:	cb13      	ldmia	r3!, {r0, r1, r4}
     718:	c213      	stmia	r2!, {r0, r1, r4}
     71a:	cb03      	ldmia	r3!, {r0, r1}
     71c:	c203      	stmia	r2!, {r0, r1}
     71e:	ac0c      	add	r4, sp, #48	; 0x30
     720:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     722:	4d25      	ldr	r5, [pc, #148]	; (7b8 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
     724:	88e3      	ldrh	r3, [r4, #6]
     726:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     728:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
     72a:	88a2      	ldrh	r2, [r4, #4]
     72c:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     72e:	322d      	adds	r2, #45	; 0x2d
     730:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
     732:	8861      	ldrh	r1, [r4, #2]
     734:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
     736:	3196      	adds	r1, #150	; 0x96
     738:	8820      	ldrh	r0, [r4, #0]
     73a:	1040      	asrs	r0, r0, #1
     73c:	302d      	adds	r0, #45	; 0x2d
     73e:	30ff      	adds	r0, #255	; 0xff
     740:	47a8      	blx	r5
     742:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
     744:	42b4      	cmp	r4, r6
     746:	d1ed      	bne.n	724 <drawKare+0x38>
	}
	switch(emotion)
     748:	2f00      	cmp	r7, #0
     74a:	d003      	beq.n	754 <drawKare+0x68>
     74c:	2f01      	cmp	r7, #1
     74e:	d017      	beq.n	780 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
     750:	b041      	add	sp, #260	; 0x104
     752:	bdf0      	pop	{r4, r5, r6, r7, pc}
     754:	ac05      	add	r4, sp, #20
     756:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     758:	4d17      	ldr	r5, [pc, #92]	; (7b8 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
     75a:	78e3      	ldrb	r3, [r4, #3]
     75c:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     75e:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
     760:	78a2      	ldrb	r2, [r4, #2]
     762:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     764:	322d      	adds	r2, #45	; 0x2d
     766:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
     768:	7861      	ldrb	r1, [r4, #1]
     76a:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
     76c:	3196      	adds	r1, #150	; 0x96
     76e:	7820      	ldrb	r0, [r4, #0]
     770:	1040      	asrs	r0, r0, #1
     772:	302d      	adds	r0, #45	; 0x2d
     774:	30ff      	adds	r0, #255	; 0xff
     776:	47a8      	blx	r5
     778:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
     77a:	42a6      	cmp	r6, r4
     77c:	d1ed      	bne.n	75a <drawKare+0x6e>
     77e:	e7e7      	b.n	750 <drawKare+0x64>
     780:	466c      	mov	r4, sp
     782:	ae05      	add	r6, sp, #20
			fillRect((
     784:	4d0c      	ldr	r5, [pc, #48]	; (7b8 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
     786:	78e3      	ldrb	r3, [r4, #3]
     788:	105b      	asrs	r3, r3, #1
			fillRect((
     78a:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
     78c:	78a2      	ldrb	r2, [r4, #2]
     78e:	1052      	asrs	r2, r2, #1
			fillRect((
     790:	322d      	adds	r2, #45	; 0x2d
     792:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
     794:	7861      	ldrb	r1, [r4, #1]
     796:	1049      	asrs	r1, r1, #1
			fillRect((
     798:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
     79a:	7820      	ldrb	r0, [r4, #0]
     79c:	1040      	asrs	r0, r0, #1
			fillRect((
     79e:	302d      	adds	r0, #45	; 0x2d
     7a0:	30ff      	adds	r0, #255	; 0xff
     7a2:	47a8      	blx	r5
     7a4:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
     7a6:	42b4      	cmp	r4, r6
     7a8:	d1ed      	bne.n	786 <drawKare+0x9a>
     7aa:	e7d1      	b.n	750 <drawKare+0x64>
     7ac:	00004db0 	.word	0x00004db0
     7b0:	00003ae9 	.word	0x00003ae9
     7b4:	00004e30 	.word	0x00004e30
     7b8:	00002f35 	.word	0x00002f35

000007bc <splashScreen>:

void splashScreen(void)
{
     7bc:	b570      	push	{r4, r5, r6, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
     7be:	4c49      	ldr	r4, [pc, #292]	; (8e4 <splashScreen+0x128>)
     7c0:	4b49      	ldr	r3, [pc, #292]	; (8e8 <splashScreen+0x12c>)
     7c2:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
     7c4:	4b49      	ldr	r3, [pc, #292]	; (8ec <splashScreen+0x130>)
     7c6:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
     7c8:	4b49      	ldr	r3, [pc, #292]	; (8f0 <splashScreen+0x134>)
     7ca:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
     7cc:	4b49      	ldr	r3, [pc, #292]	; (8f4 <splashScreen+0x138>)
     7ce:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Tabs!";//
     7d0:	4b49      	ldr	r3, [pc, #292]	; (8f8 <splashScreen+0x13c>)
     7d2:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
     7d4:	4b49      	ldr	r3, [pc, #292]	; (8fc <splashScreen+0x140>)
     7d6:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
     7d8:	4b49      	ldr	r3, [pc, #292]	; (900 <splashScreen+0x144>)
     7da:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
     7dc:	4b49      	ldr	r3, [pc, #292]	; (904 <splashScreen+0x148>)
     7de:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
     7e0:	4b49      	ldr	r3, [pc, #292]	; (908 <splashScreen+0x14c>)
     7e2:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
     7e4:	4b49      	ldr	r3, [pc, #292]	; (90c <splashScreen+0x150>)
     7e6:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
     7e8:	4b49      	ldr	r3, [pc, #292]	; (910 <splashScreen+0x154>)
     7ea:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
     7ec:	4b49      	ldr	r3, [pc, #292]	; (914 <splashScreen+0x158>)
     7ee:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
     7f0:	4b49      	ldr	r3, [pc, #292]	; (918 <splashScreen+0x15c>)
     7f2:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
     7f4:	4b49      	ldr	r3, [pc, #292]	; (91c <splashScreen+0x160>)
     7f6:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "$CURRENT_MEME";//
     7f8:	4b49      	ldr	r3, [pc, #292]	; (920 <splashScreen+0x164>)
     7fa:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
     7fc:	4b49      	ldr	r3, [pc, #292]	; (924 <splashScreen+0x168>)
     7fe:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
     800:	4b49      	ldr	r3, [pc, #292]	; (928 <splashScreen+0x16c>)
     802:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
     804:	4b49      	ldr	r3, [pc, #292]	; (92c <splashScreen+0x170>)
     806:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "ACAB";//
     808:	4b49      	ldr	r3, [pc, #292]	; (930 <splashScreen+0x174>)
     80a:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled.";//
     80c:	4b49      	ldr	r3, [pc, #292]	; (934 <splashScreen+0x178>)
     80e:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
     810:	4b49      	ldr	r3, [pc, #292]	; (938 <splashScreen+0x17c>)
     812:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
     814:	4b49      	ldr	r3, [pc, #292]	; (93c <splashScreen+0x180>)
     816:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
     818:	4b49      	ldr	r3, [pc, #292]	; (940 <splashScreen+0x184>)
     81a:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
     81c:	4b49      	ldr	r3, [pc, #292]	; (944 <splashScreen+0x188>)
     81e:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
     820:	4b49      	ldr	r3, [pc, #292]	; (948 <splashScreen+0x18c>)
     822:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Offensive hardware";//
     824:	4b49      	ldr	r3, [pc, #292]	; (94c <splashScreen+0x190>)
     826:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
     828:	4b49      	ldr	r3, [pc, #292]	; (950 <splashScreen+0x194>)
     82a:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
     82c:	4b49      	ldr	r3, [pc, #292]	; (954 <splashScreen+0x198>)
     82e:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
     830:	4b49      	ldr	r3, [pc, #292]	; (958 <splashScreen+0x19c>)
     832:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
     834:	4b49      	ldr	r3, [pc, #292]	; (95c <splashScreen+0x1a0>)
     836:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
     838:	4b49      	ldr	r3, [pc, #292]	; (960 <splashScreen+0x1a4>)
     83a:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
     83c:	4b49      	ldr	r3, [pc, #292]	; (964 <splashScreen+0x1a8>)
     83e:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
     840:	4a49      	ldr	r2, [pc, #292]	; (968 <splashScreen+0x1ac>)
     842:	2380      	movs	r3, #128	; 0x80
     844:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
     846:	4b49      	ldr	r3, [pc, #292]	; (96c <splashScreen+0x1b0>)
     848:	4798      	blx	r3
     84a:	17c3      	asrs	r3, r0, #31
     84c:	0edb      	lsrs	r3, r3, #27
     84e:	18c2      	adds	r2, r0, r3
     850:	201f      	movs	r0, #31
     852:	4010      	ands	r0, r2
     854:	1ac0      	subs	r0, r0, r3
     856:	0080      	lsls	r0, r0, #2
     858:	5904      	ldr	r4, [r0, r4]


	
	clearScreen();
     85a:	4b45      	ldr	r3, [pc, #276]	; (970 <splashScreen+0x1b4>)
     85c:	4798      	blx	r3
	setColorRGB(255,255,255);
     85e:	22ff      	movs	r2, #255	; 0xff
     860:	21ff      	movs	r1, #255	; 0xff
     862:	20ff      	movs	r0, #255	; 0xff
     864:	4b43      	ldr	r3, [pc, #268]	; (974 <splashScreen+0x1b8>)
     866:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
     868:	2280      	movs	r2, #128	; 0x80
     86a:	0612      	lsls	r2, r2, #24
     86c:	4b42      	ldr	r3, [pc, #264]	; (978 <splashScreen+0x1bc>)
     86e:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
     870:	4b42      	ldr	r3, [pc, #264]	; (97c <splashScreen+0x1c0>)
     872:	22df      	movs	r2, #223	; 0xdf
     874:	5c99      	ldrb	r1, [r3, r2]
     876:	2004      	movs	r0, #4
     878:	4301      	orrs	r1, r0
     87a:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
     87c:	5c99      	ldrb	r1, [r3, r2]
     87e:	2002      	movs	r0, #2
     880:	4301      	orrs	r1, r0
     882:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
     884:	3a3f      	subs	r2, #63	; 0x3f
     886:	589b      	ldr	r3, [r3, r2]
     888:	2b00      	cmp	r3, #0
     88a:	db26      	blt.n	8da <splashScreen+0x11e>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
     88c:	2000      	movs	r0, #0
     88e:	4b3c      	ldr	r3, [pc, #240]	; (980 <splashScreen+0x1c4>)
     890:	4798      	blx	r3
	

	
	xCharPos = 40 - (strlen(textPhrase)/2);
     892:	0020      	movs	r0, r4
     894:	4b3b      	ldr	r3, [pc, #236]	; (984 <splashScreen+0x1c8>)
     896:	4798      	blx	r3
     898:	4e3b      	ldr	r6, [pc, #236]	; (988 <splashScreen+0x1cc>)
     89a:	0840      	lsrs	r0, r0, #1
     89c:	2328      	movs	r3, #40	; 0x28
     89e:	1a18      	subs	r0, r3, r0
     8a0:	8030      	strh	r0, [r6, #0]
	yCharPos = 16;
     8a2:	4d3a      	ldr	r5, [pc, #232]	; (98c <splashScreen+0x1d0>)
     8a4:	2310      	movs	r3, #16
     8a6:	802b      	strh	r3, [r5, #0]
	
	writeString(textPhrase);
     8a8:	0020      	movs	r0, r4
     8aa:	4b39      	ldr	r3, [pc, #228]	; (990 <splashScreen+0x1d4>)
     8ac:	4798      	blx	r3
	xCharPos = 40 - (strlen(versionLabel)/2);
	yCharPos = 18;
	
	writeString(versionLabel);
	*/
	delay_ms(2000);
     8ae:	20fa      	movs	r0, #250	; 0xfa
     8b0:	00c0      	lsls	r0, r0, #3
     8b2:	4b38      	ldr	r3, [pc, #224]	; (994 <splashScreen+0x1d8>)
     8b4:	4798      	blx	r3
		
	clearScreen();
     8b6:	4b2e      	ldr	r3, [pc, #184]	; (970 <splashScreen+0x1b4>)
     8b8:	4798      	blx	r3
	nullifyConsole();
     8ba:	4b37      	ldr	r3, [pc, #220]	; (998 <splashScreen+0x1dc>)
     8bc:	4798      	blx	r3
	
	setColorRGB(0,255,0);
     8be:	2200      	movs	r2, #0
     8c0:	21ff      	movs	r1, #255	; 0xff
     8c2:	2000      	movs	r0, #0
     8c4:	4b2b      	ldr	r3, [pc, #172]	; (974 <splashScreen+0x1b8>)
     8c6:	4798      	blx	r3
	setBackColorRGB(0,0,0);
     8c8:	2200      	movs	r2, #0
     8ca:	2100      	movs	r1, #0
     8cc:	2000      	movs	r0, #0
     8ce:	4b33      	ldr	r3, [pc, #204]	; (99c <splashScreen+0x1e0>)
     8d0:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
     8d2:	2300      	movs	r3, #0
     8d4:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
     8d6:	802b      	strh	r3, [r5, #0]
	

     8d8:	bd70      	pop	{r4, r5, r6, pc}
		drawKare(1);
     8da:	2001      	movs	r0, #1
     8dc:	4b28      	ldr	r3, [pc, #160]	; (980 <splashScreen+0x1c4>)
     8de:	4798      	blx	r3
     8e0:	e7d7      	b.n	892 <splashScreen+0xd6>
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	200001e8 	.word	0x200001e8
     8e8:	00004eb0 	.word	0x00004eb0
     8ec:	00004ed0 	.word	0x00004ed0
     8f0:	00004ee4 	.word	0x00004ee4
     8f4:	00004efc 	.word	0x00004efc
     8f8:	00004f0c 	.word	0x00004f0c
     8fc:	00004f14 	.word	0x00004f14
     900:	00004f3c 	.word	0x00004f3c
     904:	00004f68 	.word	0x00004f68
     908:	00004f90 	.word	0x00004f90
     90c:	00004fbc 	.word	0x00004fbc
     910:	00004fc8 	.word	0x00004fc8
     914:	00004fe0 	.word	0x00004fe0
     918:	00005000 	.word	0x00005000
     91c:	00005020 	.word	0x00005020
     920:	00005044 	.word	0x00005044
     924:	00005054 	.word	0x00005054
     928:	00005060 	.word	0x00005060
     92c:	0000507c 	.word	0x0000507c
     930:	0000509c 	.word	0x0000509c
     934:	000050a4 	.word	0x000050a4
     938:	000050b8 	.word	0x000050b8
     93c:	000050d4 	.word	0x000050d4
     940:	000050e4 	.word	0x000050e4
     944:	00005108 	.word	0x00005108
     948:	00005134 	.word	0x00005134
     94c:	00005160 	.word	0x00005160
     950:	00005174 	.word	0x00005174
     954:	00005194 	.word	0x00005194
     958:	000051a8 	.word	0x000051a8
     95c:	000051c4 	.word	0x000051c4
     960:	000051d4 	.word	0x000051d4
     964:	000051f8 	.word	0x000051f8
     968:	00005218 	.word	0x00005218
     96c:	00003d15 	.word	0x00003d15
     970:	00003005 	.word	0x00003005
     974:	00002df9 	.word	0x00002df9
     978:	4100448c 	.word	0x4100448c
     97c:	41004400 	.word	0x41004400
     980:	000006ed 	.word	0x000006ed
     984:	00003f1d 	.word	0x00003f1d
     988:	200002a8 	.word	0x200002a8
     98c:	200002aa 	.word	0x200002aa
     990:	000026dd 	.word	0x000026dd
     994:	00000a35 	.word	0x00000a35
     998:	00002725 	.word	0x00002725
     99c:	00002e21 	.word	0x00002e21

000009a0 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
     9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9a2:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
     9a4:	4e0b      	ldr	r6, [pc, #44]	; (9d4 <parseRXBuffer+0x34>)
     9a6:	4d0c      	ldr	r5, [pc, #48]	; (9d8 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
     9a8:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
     9aa:	e008      	b.n	9be <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
     9ac:	466b      	mov	r3, sp
     9ae:	1ddc      	adds	r4, r3, #7
     9b0:	0021      	movs	r1, r4
     9b2:	6838      	ldr	r0, [r7, #0]
     9b4:	4b09      	ldr	r3, [pc, #36]	; (9dc <parseRXBuffer+0x3c>)
     9b6:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
     9b8:	7820      	ldrb	r0, [r4, #0]
     9ba:	4b09      	ldr	r3, [pc, #36]	; (9e0 <parseRXBuffer+0x40>)
     9bc:	4798      	blx	r3
		while(!ring_empty(ouroboros))
     9be:	6830      	ldr	r0, [r6, #0]
     9c0:	47a8      	blx	r5
     9c2:	2800      	cmp	r0, #0
     9c4:	d0f2      	beq.n	9ac <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
     9c6:	4b03      	ldr	r3, [pc, #12]	; (9d4 <parseRXBuffer+0x34>)
     9c8:	6818      	ldr	r0, [r3, #0]
     9ca:	4b06      	ldr	r3, [pc, #24]	; (9e4 <parseRXBuffer+0x44>)
     9cc:	4798      	blx	r3
}
     9ce:	b003      	add	sp, #12
     9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	200002cc 	.word	0x200002cc
     9d8:	0000017d 	.word	0x0000017d
     9dc:	00000195 	.word	0x00000195
     9e0:	00000699 	.word	0x00000699
     9e4:	00000135 	.word	0x00000135

000009e8 <sendChar>:

void sendChar(char character)
{
     9e8:	b510      	push	{r4, lr}
	printf("%c", character);
     9ea:	4b01      	ldr	r3, [pc, #4]	; (9f0 <sendChar+0x8>)
     9ec:	4798      	blx	r3
     9ee:	bd10      	pop	{r4, pc}
     9f0:	00003c91 	.word	0x00003c91

000009f4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     9f4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     9f6:	2000      	movs	r0, #0
     9f8:	4b08      	ldr	r3, [pc, #32]	; (a1c <delay_init+0x28>)
     9fa:	4798      	blx	r3
     9fc:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     9fe:	4c08      	ldr	r4, [pc, #32]	; (a20 <delay_init+0x2c>)
     a00:	21fa      	movs	r1, #250	; 0xfa
     a02:	0089      	lsls	r1, r1, #2
     a04:	47a0      	blx	r4
     a06:	4b07      	ldr	r3, [pc, #28]	; (a24 <delay_init+0x30>)
     a08:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     a0a:	4907      	ldr	r1, [pc, #28]	; (a28 <delay_init+0x34>)
     a0c:	0028      	movs	r0, r5
     a0e:	47a0      	blx	r4
     a10:	4b06      	ldr	r3, [pc, #24]	; (a2c <delay_init+0x38>)
     a12:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     a14:	2205      	movs	r2, #5
     a16:	4b06      	ldr	r3, [pc, #24]	; (a30 <delay_init+0x3c>)
     a18:	601a      	str	r2, [r3, #0]
}
     a1a:	bd70      	pop	{r4, r5, r6, pc}
     a1c:	00001fb5 	.word	0x00001fb5
     a20:	0000374d 	.word	0x0000374d
     a24:	20000000 	.word	0x20000000
     a28:	000f4240 	.word	0x000f4240
     a2c:	20000004 	.word	0x20000004
     a30:	e000e010 	.word	0xe000e010

00000a34 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     a34:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     a36:	4b08      	ldr	r3, [pc, #32]	; (a58 <delay_cycles_ms+0x24>)
     a38:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     a3a:	4a08      	ldr	r2, [pc, #32]	; (a5c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     a3c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     a3e:	2180      	movs	r1, #128	; 0x80
     a40:	0249      	lsls	r1, r1, #9
	while (n--) {
     a42:	3801      	subs	r0, #1
     a44:	d307      	bcc.n	a56 <delay_cycles_ms+0x22>
	if (n > 0) {
     a46:	2c00      	cmp	r4, #0
     a48:	d0fb      	beq.n	a42 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     a4a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     a4c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     a4e:	6813      	ldr	r3, [r2, #0]
     a50:	420b      	tst	r3, r1
     a52:	d0fc      	beq.n	a4e <delay_cycles_ms+0x1a>
     a54:	e7f5      	b.n	a42 <delay_cycles_ms+0xe>
	}
}
     a56:	bd30      	pop	{r4, r5, pc}
     a58:	20000000 	.word	0x20000000
     a5c:	e000e010 	.word	0xe000e010

00000a60 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     a60:	4b0c      	ldr	r3, [pc, #48]	; (a94 <cpu_irq_enter_critical+0x34>)
     a62:	681b      	ldr	r3, [r3, #0]
     a64:	2b00      	cmp	r3, #0
     a66:	d106      	bne.n	a76 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     a68:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     a6c:	2b00      	cmp	r3, #0
     a6e:	d007      	beq.n	a80 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     a70:	2200      	movs	r2, #0
     a72:	4b09      	ldr	r3, [pc, #36]	; (a98 <cpu_irq_enter_critical+0x38>)
     a74:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     a76:	4a07      	ldr	r2, [pc, #28]	; (a94 <cpu_irq_enter_critical+0x34>)
     a78:	6813      	ldr	r3, [r2, #0]
     a7a:	3301      	adds	r3, #1
     a7c:	6013      	str	r3, [r2, #0]
}
     a7e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     a80:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     a82:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     a86:	2200      	movs	r2, #0
     a88:	4b04      	ldr	r3, [pc, #16]	; (a9c <cpu_irq_enter_critical+0x3c>)
     a8a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     a8c:	3201      	adds	r2, #1
     a8e:	4b02      	ldr	r3, [pc, #8]	; (a98 <cpu_irq_enter_critical+0x38>)
     a90:	701a      	strb	r2, [r3, #0]
     a92:	e7f0      	b.n	a76 <cpu_irq_enter_critical+0x16>
     a94:	20000268 	.word	0x20000268
     a98:	2000026c 	.word	0x2000026c
     a9c:	20000008 	.word	0x20000008

00000aa0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     aa0:	4b08      	ldr	r3, [pc, #32]	; (ac4 <cpu_irq_leave_critical+0x24>)
     aa2:	681a      	ldr	r2, [r3, #0]
     aa4:	3a01      	subs	r2, #1
     aa6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     aa8:	681b      	ldr	r3, [r3, #0]
     aaa:	2b00      	cmp	r3, #0
     aac:	d109      	bne.n	ac2 <cpu_irq_leave_critical+0x22>
     aae:	4b06      	ldr	r3, [pc, #24]	; (ac8 <cpu_irq_leave_critical+0x28>)
     ab0:	781b      	ldrb	r3, [r3, #0]
     ab2:	2b00      	cmp	r3, #0
     ab4:	d005      	beq.n	ac2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     ab6:	2201      	movs	r2, #1
     ab8:	4b04      	ldr	r3, [pc, #16]	; (acc <cpu_irq_leave_critical+0x2c>)
     aba:	701a      	strb	r2, [r3, #0]
     abc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ac0:	b662      	cpsie	i
	}
}
     ac2:	4770      	bx	lr
     ac4:	20000268 	.word	0x20000268
     ac8:	2000026c 	.word	0x2000026c
     acc:	20000008 	.word	0x20000008

00000ad0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ad2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     ad4:	ac01      	add	r4, sp, #4
     ad6:	2501      	movs	r5, #1
     ad8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     ada:	2700      	movs	r7, #0
     adc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     ade:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     ae0:	0021      	movs	r1, r4
     ae2:	203e      	movs	r0, #62	; 0x3e
     ae4:	4e06      	ldr	r6, [pc, #24]	; (b00 <system_board_init+0x30>)
     ae6:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     ae8:	2280      	movs	r2, #128	; 0x80
     aea:	05d2      	lsls	r2, r2, #23
     aec:	4b05      	ldr	r3, [pc, #20]	; (b04 <system_board_init+0x34>)
     aee:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     af0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     af2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     af4:	0021      	movs	r1, r4
     af6:	200f      	movs	r0, #15
     af8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     afa:	b003      	add	sp, #12
     afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	00001039 	.word	0x00001039
     b04:	41004480 	.word	0x41004480

00000b08 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     b08:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     b0a:	2200      	movs	r2, #0
     b0c:	2300      	movs	r3, #0
     b0e:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     b10:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     b12:	2100      	movs	r1, #0
     b14:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     b16:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     b18:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     b1a:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     b1c:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     b1e:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     b20:	24c0      	movs	r4, #192	; 0xc0
     b22:	0164      	lsls	r4, r4, #5
     b24:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     b26:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     b28:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     b2a:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     b2c:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     b2e:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     b30:	242a      	movs	r4, #42	; 0x2a
     b32:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     b34:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     b36:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     b38:	3c06      	subs	r4, #6
     b3a:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     b3c:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     b3e:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     b40:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     b42:	232b      	movs	r3, #43	; 0x2b
     b44:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     b46:	3301      	adds	r3, #1
     b48:	54c1      	strb	r1, [r0, r3]
}
     b4a:	bd10      	pop	{r4, pc}

00000b4c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b4e:	46d6      	mov	lr, sl
     b50:	464f      	mov	r7, r9
     b52:	4646      	mov	r6, r8
     b54:	b5c0      	push	{r6, r7, lr}
     b56:	b096      	sub	sp, #88	; 0x58
     b58:	0007      	movs	r7, r0
     b5a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     b5c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b5e:	4ac6      	ldr	r2, [pc, #792]	; (e78 <adc_init+0x32c>)
     b60:	6a10      	ldr	r0, [r2, #32]
     b62:	2380      	movs	r3, #128	; 0x80
     b64:	025b      	lsls	r3, r3, #9
     b66:	4303      	orrs	r3, r0
     b68:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     b6a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     b6c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     b6e:	07db      	lsls	r3, r3, #31
     b70:	d505      	bpl.n	b7e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     b72:	b016      	add	sp, #88	; 0x58
     b74:	bc1c      	pop	{r2, r3, r4}
     b76:	4690      	mov	r8, r2
     b78:	4699      	mov	r9, r3
     b7a:	46a2      	mov	sl, r4
     b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     b7e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     b80:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     b82:	079b      	lsls	r3, r3, #30
     b84:	d4f5      	bmi.n	b72 <adc_init+0x26>
	module_inst->reference = config->reference;
     b86:	7873      	ldrb	r3, [r6, #1]
     b88:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     b8a:	2b00      	cmp	r3, #0
     b8c:	d104      	bne.n	b98 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     b8e:	4abb      	ldr	r2, [pc, #748]	; (e7c <adc_init+0x330>)
     b90:	6c13      	ldr	r3, [r2, #64]	; 0x40
     b92:	2104      	movs	r1, #4
     b94:	430b      	orrs	r3, r1
     b96:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
     b98:	2300      	movs	r3, #0
     b9a:	60bb      	str	r3, [r7, #8]
     b9c:	60fb      	str	r3, [r7, #12]
     b9e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
     ba0:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
     ba2:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
     ba4:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
     ba6:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
     ba8:	4bb5      	ldr	r3, [pc, #724]	; (e80 <adc_init+0x334>)
     baa:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     bac:	232a      	movs	r3, #42	; 0x2a
     bae:	5cf3      	ldrb	r3, [r6, r3]
     bb0:	2b00      	cmp	r3, #0
     bb2:	d105      	bne.n	bc0 <adc_init+0x74>
     bb4:	7d33      	ldrb	r3, [r6, #20]
     bb6:	2b00      	cmp	r3, #0
     bb8:	d102      	bne.n	bc0 <adc_init+0x74>
		module_inst->software_trigger = true;
     bba:	3301      	adds	r3, #1
     bbc:	777b      	strb	r3, [r7, #29]
     bbe:	e001      	b.n	bc4 <adc_init+0x78>
		module_inst->software_trigger = false;
     bc0:	2300      	movs	r3, #0
     bc2:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
     bc4:	683b      	ldr	r3, [r7, #0]
     bc6:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
     bc8:	7833      	ldrb	r3, [r6, #0]
     bca:	466a      	mov	r2, sp
     bcc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     bce:	4669      	mov	r1, sp
     bd0:	201e      	movs	r0, #30
     bd2:	4bac      	ldr	r3, [pc, #688]	; (e84 <adc_init+0x338>)
     bd4:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     bd6:	201e      	movs	r0, #30
     bd8:	4bab      	ldr	r3, [pc, #684]	; (e88 <adc_init+0x33c>)
     bda:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
     bdc:	232c      	movs	r3, #44	; 0x2c
     bde:	5cf2      	ldrb	r2, [r6, r3]
     be0:	2a00      	cmp	r2, #0
     be2:	d054      	beq.n	c8e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
     be4:	3b01      	subs	r3, #1
     be6:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     be8:	7b33      	ldrb	r3, [r6, #12]
     bea:	18eb      	adds	r3, r5, r3
     bec:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     bee:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     bf0:	b2c9      	uxtb	r1, r1
     bf2:	428b      	cmp	r3, r1
     bf4:	d221      	bcs.n	c3a <adc_init+0xee>
     bf6:	1952      	adds	r2, r2, r5
     bf8:	b2d3      	uxtb	r3, r2
     bfa:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
     bfc:	4ba3      	ldr	r3, [pc, #652]	; (e8c <adc_init+0x340>)
     bfe:	469a      	mov	sl, r3
     c00:	e003      	b.n	c0a <adc_init+0xbe>
			offset++;
     c02:	3501      	adds	r5, #1
     c04:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     c06:	454d      	cmp	r5, r9
     c08:	d017      	beq.n	c3a <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     c0a:	240f      	movs	r4, #15
     c0c:	402c      	ands	r4, r5
     c0e:	7b33      	ldrb	r3, [r6, #12]
     c10:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     c12:	2250      	movs	r2, #80	; 0x50
     c14:	499e      	ldr	r1, [pc, #632]	; (e90 <adc_init+0x344>)
     c16:	a802      	add	r0, sp, #8
     c18:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
     c1a:	2c13      	cmp	r4, #19
     c1c:	d8f1      	bhi.n	c02 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     c1e:	00a4      	lsls	r4, r4, #2
     c20:	ab02      	add	r3, sp, #8
     c22:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c24:	a901      	add	r1, sp, #4
     c26:	2300      	movs	r3, #0
     c28:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     c2a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     c2c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     c2e:	3301      	adds	r3, #1
     c30:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     c32:	b2c0      	uxtb	r0, r0
     c34:	4b97      	ldr	r3, [pc, #604]	; (e94 <adc_init+0x348>)
     c36:	4798      	blx	r3
     c38:	e7e3      	b.n	c02 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     c3a:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     c3c:	2250      	movs	r2, #80	; 0x50
     c3e:	4994      	ldr	r1, [pc, #592]	; (e90 <adc_init+0x344>)
     c40:	a802      	add	r0, sp, #8
     c42:	4b92      	ldr	r3, [pc, #584]	; (e8c <adc_init+0x340>)
     c44:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     c46:	2c13      	cmp	r4, #19
     c48:	d913      	bls.n	c72 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     c4a:	7d73      	ldrb	r3, [r6, #21]
     c4c:	009b      	lsls	r3, r3, #2
     c4e:	b2db      	uxtb	r3, r3
     c50:	4642      	mov	r2, r8
     c52:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     c54:	7db3      	ldrb	r3, [r6, #22]
     c56:	01db      	lsls	r3, r3, #7
     c58:	7872      	ldrb	r2, [r6, #1]
     c5a:	4313      	orrs	r3, r2
     c5c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     c5e:	4642      	mov	r2, r8
     c60:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     c62:	7933      	ldrb	r3, [r6, #4]
     c64:	2b34      	cmp	r3, #52	; 0x34
     c66:	d900      	bls.n	c6a <adc_init+0x11e>
     c68:	e17b      	b.n	f62 <adc_init+0x416>
     c6a:	009b      	lsls	r3, r3, #2
     c6c:	4a8a      	ldr	r2, [pc, #552]	; (e98 <adc_init+0x34c>)
     c6e:	58d3      	ldr	r3, [r2, r3]
     c70:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     c72:	00a4      	lsls	r4, r4, #2
     c74:	ab02      	add	r3, sp, #8
     c76:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c78:	a901      	add	r1, sp, #4
     c7a:	2300      	movs	r3, #0
     c7c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     c7e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     c80:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     c82:	3301      	adds	r3, #1
     c84:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     c86:	b2c0      	uxtb	r0, r0
     c88:	4b82      	ldr	r3, [pc, #520]	; (e94 <adc_init+0x348>)
     c8a:	4798      	blx	r3
     c8c:	e7dd      	b.n	c4a <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
     c8e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     c90:	2250      	movs	r2, #80	; 0x50
     c92:	497f      	ldr	r1, [pc, #508]	; (e90 <adc_init+0x344>)
     c94:	a802      	add	r0, sp, #8
     c96:	4b7d      	ldr	r3, [pc, #500]	; (e8c <adc_init+0x340>)
     c98:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     c9a:	2c13      	cmp	r4, #19
     c9c:	d915      	bls.n	cca <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
     c9e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     ca0:	2250      	movs	r2, #80	; 0x50
     ca2:	497b      	ldr	r1, [pc, #492]	; (e90 <adc_init+0x344>)
     ca4:	a802      	add	r0, sp, #8
     ca6:	4b79      	ldr	r3, [pc, #484]	; (e8c <adc_init+0x340>)
     ca8:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
     caa:	2c13      	cmp	r4, #19
     cac:	d8cd      	bhi.n	c4a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     cae:	00a4      	lsls	r4, r4, #2
     cb0:	ab02      	add	r3, sp, #8
     cb2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cb4:	a901      	add	r1, sp, #4
     cb6:	2300      	movs	r3, #0
     cb8:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     cba:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     cbc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     cbe:	3301      	adds	r3, #1
     cc0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     cc2:	b2c0      	uxtb	r0, r0
     cc4:	4b73      	ldr	r3, [pc, #460]	; (e94 <adc_init+0x348>)
     cc6:	4798      	blx	r3
     cc8:	e7bf      	b.n	c4a <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     cca:	00a4      	lsls	r4, r4, #2
     ccc:	ab02      	add	r3, sp, #8
     cce:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cd0:	a901      	add	r1, sp, #4
     cd2:	2300      	movs	r3, #0
     cd4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     cd6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     cd8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     cda:	3301      	adds	r3, #1
     cdc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     cde:	b2c0      	uxtb	r0, r0
     ce0:	4b6c      	ldr	r3, [pc, #432]	; (e94 <adc_init+0x348>)
     ce2:	4798      	blx	r3
     ce4:	e7db      	b.n	c9e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     ce6:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     ce8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     cea:	2102      	movs	r1, #2
     cec:	e01a      	b.n	d24 <adc_init+0x1d8>
		adjres = config->divide_result;
     cee:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     cf0:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     cf2:	2410      	movs	r4, #16
     cf4:	e016      	b.n	d24 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     cf6:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     cf8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     cfa:	2101      	movs	r1, #1
     cfc:	e012      	b.n	d24 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     cfe:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     d00:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     d02:	2100      	movs	r1, #0
     d04:	e00e      	b.n	d24 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     d06:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     d08:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     d0a:	2100      	movs	r1, #0
     d0c:	e00a      	b.n	d24 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     d0e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     d10:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     d12:	2100      	movs	r1, #0
     d14:	e006      	b.n	d24 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     d16:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     d18:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     d1a:	2100      	movs	r1, #0
     d1c:	e002      	b.n	d24 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     d1e:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     d20:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     d22:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     d24:	0109      	lsls	r1, r1, #4
     d26:	2270      	movs	r2, #112	; 0x70
     d28:	400a      	ands	r2, r1
     d2a:	4313      	orrs	r3, r2
     d2c:	4642      	mov	r2, r8
     d2e:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     d30:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     d32:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     d34:	2b3f      	cmp	r3, #63	; 0x3f
     d36:	d900      	bls.n	d3a <adc_init+0x1ee>
     d38:	e71b      	b.n	b72 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     d3a:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     d3c:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     d3e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     d40:	b25b      	sxtb	r3, r3
     d42:	2b00      	cmp	r3, #0
     d44:	dbfb      	blt.n	d3e <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     d46:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     d48:	8872      	ldrh	r2, [r6, #2]
     d4a:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     d4c:	2224      	movs	r2, #36	; 0x24
     d4e:	5cb2      	ldrb	r2, [r6, r2]
     d50:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     d52:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     d54:	7d32      	ldrb	r2, [r6, #20]
     d56:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     d58:	4313      	orrs	r3, r2
     d5a:	7cb2      	ldrb	r2, [r6, #18]
     d5c:	0052      	lsls	r2, r2, #1
     d5e:	4313      	orrs	r3, r2
     d60:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     d62:	4642      	mov	r2, r8
     d64:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     d66:	7e33      	ldrb	r3, [r6, #24]
     d68:	2b00      	cmp	r3, #0
     d6a:	d020      	beq.n	dae <adc_init+0x262>
		switch (resolution) {
     d6c:	2c10      	cmp	r4, #16
     d6e:	d100      	bne.n	d72 <adc_init+0x226>
     d70:	e0d9      	b.n	f26 <adc_init+0x3da>
     d72:	d800      	bhi.n	d76 <adc_init+0x22a>
     d74:	e098      	b.n	ea8 <adc_init+0x35c>
     d76:	2c20      	cmp	r4, #32
     d78:	d100      	bne.n	d7c <adc_init+0x230>
     d7a:	e0b6      	b.n	eea <adc_init+0x39e>
     d7c:	2c30      	cmp	r4, #48	; 0x30
     d7e:	d116      	bne.n	dae <adc_init+0x262>
			if (config->differential_mode &&
     d80:	7cf2      	ldrb	r2, [r6, #19]
     d82:	2a00      	cmp	r2, #0
     d84:	d00a      	beq.n	d9c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
     d86:	69f2      	ldr	r2, [r6, #28]
     d88:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     d8a:	2017      	movs	r0, #23
			if (config->differential_mode &&
     d8c:	2aff      	cmp	r2, #255	; 0xff
     d8e:	d900      	bls.n	d92 <adc_init+0x246>
     d90:	e6ef      	b.n	b72 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     d92:	6a32      	ldr	r2, [r6, #32]
     d94:	3280      	adds	r2, #128	; 0x80
     d96:	2aff      	cmp	r2, #255	; 0xff
     d98:	d900      	bls.n	d9c <adc_init+0x250>
     d9a:	e6ea      	b.n	b72 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     d9c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     d9e:	69f2      	ldr	r2, [r6, #28]
     da0:	2aff      	cmp	r2, #255	; 0xff
     da2:	dd00      	ble.n	da6 <adc_init+0x25a>
     da4:	e6e5      	b.n	b72 <adc_init+0x26>
     da6:	6a32      	ldr	r2, [r6, #32]
     da8:	2aff      	cmp	r2, #255	; 0xff
     daa:	dd00      	ble.n	dae <adc_init+0x262>
     dac:	e6e1      	b.n	b72 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     dae:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     db0:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     db2:	b252      	sxtb	r2, r2
     db4:	2a00      	cmp	r2, #0
     db6:	dbfb      	blt.n	db0 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
     db8:	4642      	mov	r2, r8
     dba:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     dbc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     dbe:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     dc0:	b25b      	sxtb	r3, r3
     dc2:	2b00      	cmp	r3, #0
     dc4:	dbfb      	blt.n	dbe <adc_init+0x272>
	adc_module->WINLT.reg =
     dc6:	8bb3      	ldrh	r3, [r6, #28]
     dc8:	4642      	mov	r2, r8
     dca:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     dcc:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     dce:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     dd0:	b25b      	sxtb	r3, r3
     dd2:	2b00      	cmp	r3, #0
     dd4:	dbfb      	blt.n	dce <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     dd6:	8c33      	ldrh	r3, [r6, #32]
     dd8:	4642      	mov	r2, r8
     dda:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     ddc:	232c      	movs	r3, #44	; 0x2c
     dde:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     de0:	2b00      	cmp	r3, #0
     de2:	d005      	beq.n	df0 <adc_init+0x2a4>
		inputs_to_scan--;
     de4:	3b01      	subs	r3, #1
     de6:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     de8:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     dea:	2b0f      	cmp	r3, #15
     dec:	d900      	bls.n	df0 <adc_init+0x2a4>
     dee:	e6c0      	b.n	b72 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     df0:	222b      	movs	r2, #43	; 0x2b
     df2:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     df4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     df6:	290f      	cmp	r1, #15
     df8:	d900      	bls.n	dfc <adc_init+0x2b0>
     dfa:	e6ba      	b.n	b72 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     dfc:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     dfe:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     e00:	b252      	sxtb	r2, r2
     e02:	2a00      	cmp	r2, #0
     e04:	dbfb      	blt.n	dfe <adc_init+0x2b2>
			config->negative_input |
     e06:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     e08:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     e0a:	4302      	orrs	r2, r0
     e0c:	68b0      	ldr	r0, [r6, #8]
     e0e:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     e10:	0509      	lsls	r1, r1, #20
			config->negative_input |
     e12:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     e14:	041b      	lsls	r3, r3, #16
			config->negative_input |
     e16:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     e18:	4642      	mov	r2, r8
     e1a:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     e1c:	232a      	movs	r3, #42	; 0x2a
     e1e:	5cf3      	ldrb	r3, [r6, r3]
     e20:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     e22:	230f      	movs	r3, #15
     e24:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     e26:	3315      	adds	r3, #21
     e28:	5cf3      	ldrb	r3, [r6, r3]
     e2a:	2b00      	cmp	r3, #0
     e2c:	d012      	beq.n	e54 <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     e2e:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     e30:	4a1a      	ldr	r2, [pc, #104]	; (e9c <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
     e32:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     e34:	4293      	cmp	r3, r2
     e36:	d900      	bls.n	e3a <adc_init+0x2ee>
     e38:	e69b      	b.n	b72 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     e3a:	4642      	mov	r2, r8
     e3c:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     e3e:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     e40:	2380      	movs	r3, #128	; 0x80
     e42:	011b      	lsls	r3, r3, #4
     e44:	18d3      	adds	r3, r2, r3
     e46:	4915      	ldr	r1, [pc, #84]	; (e9c <adc_init+0x350>)
     e48:	b29b      	uxth	r3, r3
     e4a:	428b      	cmp	r3, r1
     e4c:	d900      	bls.n	e50 <adc_init+0x304>
     e4e:	e690      	b.n	b72 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     e50:	4643      	mov	r3, r8
     e52:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     e54:	4b12      	ldr	r3, [pc, #72]	; (ea0 <adc_init+0x354>)
     e56:	681b      	ldr	r3, [r3, #0]
     e58:	015b      	lsls	r3, r3, #5
     e5a:	22e0      	movs	r2, #224	; 0xe0
     e5c:	00d2      	lsls	r2, r2, #3
     e5e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     e60:	4a10      	ldr	r2, [pc, #64]	; (ea4 <adc_init+0x358>)
     e62:	6851      	ldr	r1, [r2, #4]
     e64:	0149      	lsls	r1, r1, #5
     e66:	6812      	ldr	r2, [r2, #0]
     e68:	0ed2      	lsrs	r2, r2, #27
     e6a:	430a      	orrs	r2, r1
     e6c:	b2d2      	uxtb	r2, r2
			) |
     e6e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     e70:	4642      	mov	r2, r8
     e72:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     e74:	2000      	movs	r0, #0
     e76:	e67c      	b.n	b72 <adc_init+0x26>
     e78:	40000400 	.word	0x40000400
     e7c:	40000800 	.word	0x40000800
     e80:	200002d0 	.word	0x200002d0
     e84:	000020cd 	.word	0x000020cd
     e88:	00002041 	.word	0x00002041
     e8c:	00003ae9 	.word	0x00003ae9
     e90:	0000530c 	.word	0x0000530c
     e94:	000021c5 	.word	0x000021c5
     e98:	00005238 	.word	0x00005238
     e9c:	00000fff 	.word	0x00000fff
     ea0:	00806024 	.word	0x00806024
     ea4:	00806020 	.word	0x00806020
		switch (resolution) {
     ea8:	2c00      	cmp	r4, #0
     eaa:	d000      	beq.n	eae <adc_init+0x362>
     eac:	e77f      	b.n	dae <adc_init+0x262>
			if (config->differential_mode &&
     eae:	7cf2      	ldrb	r2, [r6, #19]
     eb0:	2a00      	cmp	r2, #0
     eb2:	d00f      	beq.n	ed4 <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
     eb4:	69f2      	ldr	r2, [r6, #28]
     eb6:	2180      	movs	r1, #128	; 0x80
     eb8:	0109      	lsls	r1, r1, #4
     eba:	468c      	mov	ip, r1
     ebc:	4462      	add	r2, ip
			if (config->differential_mode &&
     ebe:	492a      	ldr	r1, [pc, #168]	; (f68 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     ec0:	2017      	movs	r0, #23
			if (config->differential_mode &&
     ec2:	428a      	cmp	r2, r1
     ec4:	d900      	bls.n	ec8 <adc_init+0x37c>
     ec6:	e654      	b.n	b72 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     ec8:	6a32      	ldr	r2, [r6, #32]
     eca:	4462      	add	r2, ip
     ecc:	4926      	ldr	r1, [pc, #152]	; (f68 <adc_init+0x41c>)
     ece:	428a      	cmp	r2, r1
     ed0:	d900      	bls.n	ed4 <adc_init+0x388>
     ed2:	e64e      	b.n	b72 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     ed4:	4a24      	ldr	r2, [pc, #144]	; (f68 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
     ed6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     ed8:	69f1      	ldr	r1, [r6, #28]
     eda:	4291      	cmp	r1, r2
     edc:	dd00      	ble.n	ee0 <adc_init+0x394>
     ede:	e648      	b.n	b72 <adc_init+0x26>
     ee0:	6a31      	ldr	r1, [r6, #32]
     ee2:	4291      	cmp	r1, r2
     ee4:	dd00      	ble.n	ee8 <adc_init+0x39c>
     ee6:	e644      	b.n	b72 <adc_init+0x26>
     ee8:	e761      	b.n	dae <adc_init+0x262>
			if (config->differential_mode &&
     eea:	7cf2      	ldrb	r2, [r6, #19]
     eec:	2a00      	cmp	r2, #0
     eee:	d00f      	beq.n	f10 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
     ef0:	69f2      	ldr	r2, [r6, #28]
     ef2:	2180      	movs	r1, #128	; 0x80
     ef4:	0089      	lsls	r1, r1, #2
     ef6:	468c      	mov	ip, r1
     ef8:	4462      	add	r2, ip
			if (config->differential_mode &&
     efa:	491c      	ldr	r1, [pc, #112]	; (f6c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     efc:	2017      	movs	r0, #23
			if (config->differential_mode &&
     efe:	428a      	cmp	r2, r1
     f00:	d900      	bls.n	f04 <adc_init+0x3b8>
     f02:	e636      	b.n	b72 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     f04:	6a32      	ldr	r2, [r6, #32]
     f06:	4462      	add	r2, ip
     f08:	4918      	ldr	r1, [pc, #96]	; (f6c <adc_init+0x420>)
     f0a:	428a      	cmp	r2, r1
     f0c:	d900      	bls.n	f10 <adc_init+0x3c4>
     f0e:	e630      	b.n	b72 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     f10:	4a16      	ldr	r2, [pc, #88]	; (f6c <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
     f12:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     f14:	69f1      	ldr	r1, [r6, #28]
     f16:	4291      	cmp	r1, r2
     f18:	dd00      	ble.n	f1c <adc_init+0x3d0>
     f1a:	e62a      	b.n	b72 <adc_init+0x26>
     f1c:	6a31      	ldr	r1, [r6, #32]
     f1e:	4291      	cmp	r1, r2
     f20:	dd00      	ble.n	f24 <adc_init+0x3d8>
     f22:	e626      	b.n	b72 <adc_init+0x26>
     f24:	e743      	b.n	dae <adc_init+0x262>
			if (config->differential_mode &&
     f26:	7cf2      	ldrb	r2, [r6, #19]
     f28:	2a00      	cmp	r2, #0
     f2a:	d00f      	beq.n	f4c <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
     f2c:	69f2      	ldr	r2, [r6, #28]
     f2e:	2180      	movs	r1, #128	; 0x80
     f30:	0209      	lsls	r1, r1, #8
     f32:	468c      	mov	ip, r1
     f34:	4462      	add	r2, ip
			if (config->differential_mode &&
     f36:	490e      	ldr	r1, [pc, #56]	; (f70 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     f38:	2017      	movs	r0, #23
			if (config->differential_mode &&
     f3a:	428a      	cmp	r2, r1
     f3c:	d900      	bls.n	f40 <adc_init+0x3f4>
     f3e:	e618      	b.n	b72 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     f40:	6a32      	ldr	r2, [r6, #32]
     f42:	4462      	add	r2, ip
     f44:	490a      	ldr	r1, [pc, #40]	; (f70 <adc_init+0x424>)
     f46:	428a      	cmp	r2, r1
     f48:	d900      	bls.n	f4c <adc_init+0x400>
     f4a:	e612      	b.n	b72 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     f4c:	4a08      	ldr	r2, [pc, #32]	; (f70 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
     f4e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     f50:	69f1      	ldr	r1, [r6, #28]
     f52:	4291      	cmp	r1, r2
     f54:	dd00      	ble.n	f58 <adc_init+0x40c>
     f56:	e60c      	b.n	b72 <adc_init+0x26>
     f58:	6a31      	ldr	r1, [r6, #32]
     f5a:	4291      	cmp	r1, r2
     f5c:	dd00      	ble.n	f60 <adc_init+0x414>
     f5e:	e608      	b.n	b72 <adc_init+0x26>
     f60:	e725      	b.n	dae <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
     f62:	2017      	movs	r0, #23
     f64:	e605      	b.n	b72 <adc_init+0x26>
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	00000fff 	.word	0x00000fff
     f6c:	000003ff 	.word	0x000003ff
     f70:	0000ffff 	.word	0x0000ffff

00000f74 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     f74:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     f76:	4b2f      	ldr	r3, [pc, #188]	; (1034 <ADC_Handler+0xc0>)
     f78:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     f7a:	682b      	ldr	r3, [r5, #0]
     f7c:	7e1a      	ldrb	r2, [r3, #24]
     f7e:	7ddc      	ldrb	r4, [r3, #23]
     f80:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     f82:	07e2      	lsls	r2, r4, #31
     f84:	d416      	bmi.n	fb4 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
     f86:	0763      	lsls	r3, r4, #29
     f88:	d508      	bpl.n	f9c <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     f8a:	2304      	movs	r3, #4
     f8c:	682a      	ldr	r2, [r5, #0]
     f8e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     f90:	7eeb      	ldrb	r3, [r5, #27]
     f92:	079b      	lsls	r3, r3, #30
     f94:	d502      	bpl.n	f9c <ADC_Handler+0x28>
     f96:	7eab      	ldrb	r3, [r5, #26]
     f98:	079b      	lsls	r3, r3, #30
     f9a:	d442      	bmi.n	1022 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     f9c:	07a3      	lsls	r3, r4, #30
     f9e:	d508      	bpl.n	fb2 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     fa0:	2302      	movs	r3, #2
     fa2:	682a      	ldr	r2, [r5, #0]
     fa4:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     fa6:	7eeb      	ldrb	r3, [r5, #27]
     fa8:	075b      	lsls	r3, r3, #29
     faa:	d502      	bpl.n	fb2 <ADC_Handler+0x3e>
     fac:	7eab      	ldrb	r3, [r5, #26]
     fae:	075b      	lsls	r3, r3, #29
     fb0:	d43b      	bmi.n	102a <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     fb2:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     fb4:	2201      	movs	r2, #1
     fb6:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
     fb8:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     fba:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
     fbc:	b25b      	sxtb	r3, r3
     fbe:	2b00      	cmp	r3, #0
     fc0:	dbfb      	blt.n	fba <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
     fc2:	6969      	ldr	r1, [r5, #20]
     fc4:	1c8b      	adds	r3, r1, #2
     fc6:	616b      	str	r3, [r5, #20]
     fc8:	8b53      	ldrh	r3, [r2, #26]
     fca:	b29b      	uxth	r3, r3
     fcc:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
     fce:	8b2b      	ldrh	r3, [r5, #24]
     fd0:	3b01      	subs	r3, #1
     fd2:	b29b      	uxth	r3, r3
     fd4:	832b      	strh	r3, [r5, #24]
     fd6:	2b00      	cmp	r3, #0
     fd8:	d011      	beq.n	ffe <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
     fda:	7f6b      	ldrb	r3, [r5, #29]
     fdc:	2b00      	cmp	r3, #0
     fde:	d0d2      	beq.n	f86 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     fe0:	682a      	ldr	r2, [r5, #0]
     fe2:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     fe4:	b25b      	sxtb	r3, r3
     fe6:	2b00      	cmp	r3, #0
     fe8:	dbfb      	blt.n	fe2 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     fea:	7b13      	ldrb	r3, [r2, #12]
     fec:	2102      	movs	r1, #2
     fee:	430b      	orrs	r3, r1
     ff0:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     ff2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ff4:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     ff6:	b25b      	sxtb	r3, r3
     ff8:	2b00      	cmp	r3, #0
     ffa:	dbfb      	blt.n	ff4 <ADC_Handler+0x80>
     ffc:	e7c3      	b.n	f86 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     ffe:	2301      	movs	r3, #1
    1000:	682a      	ldr	r2, [r5, #0]
    1002:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
    1004:	7f2b      	ldrb	r3, [r5, #28]
    1006:	2b05      	cmp	r3, #5
    1008:	d1bd      	bne.n	f86 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
    100a:	2300      	movs	r3, #0
    100c:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    100e:	7eeb      	ldrb	r3, [r5, #27]
    1010:	07db      	lsls	r3, r3, #31
    1012:	d5b8      	bpl.n	f86 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    1014:	7eab      	ldrb	r3, [r5, #26]
    1016:	07db      	lsls	r3, r3, #31
    1018:	d5b5      	bpl.n	f86 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    101a:	0028      	movs	r0, r5
    101c:	68ab      	ldr	r3, [r5, #8]
    101e:	4798      	blx	r3
    1020:	e7b1      	b.n	f86 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    1022:	0028      	movs	r0, r5
    1024:	68eb      	ldr	r3, [r5, #12]
    1026:	4798      	blx	r3
    1028:	e7b8      	b.n	f9c <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    102a:	692b      	ldr	r3, [r5, #16]
    102c:	0028      	movs	r0, r5
    102e:	4798      	blx	r3
}
    1030:	e7bf      	b.n	fb2 <ADC_Handler+0x3e>
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	200002d0 	.word	0x200002d0

00001038 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1038:	b500      	push	{lr}
    103a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    103c:	ab01      	add	r3, sp, #4
    103e:	2280      	movs	r2, #128	; 0x80
    1040:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1042:	780a      	ldrb	r2, [r1, #0]
    1044:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1046:	784a      	ldrb	r2, [r1, #1]
    1048:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    104a:	788a      	ldrb	r2, [r1, #2]
    104c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    104e:	0019      	movs	r1, r3
    1050:	4b01      	ldr	r3, [pc, #4]	; (1058 <port_pin_set_config+0x20>)
    1052:	4798      	blx	r3
}
    1054:	b003      	add	sp, #12
    1056:	bd00      	pop	{pc}
    1058:	000021c5 	.word	0x000021c5

0000105c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    105c:	b5f0      	push	{r4, r5, r6, r7, lr}
    105e:	46de      	mov	lr, fp
    1060:	4657      	mov	r7, sl
    1062:	464e      	mov	r6, r9
    1064:	4645      	mov	r5, r8
    1066:	b5e0      	push	{r5, r6, r7, lr}
    1068:	b087      	sub	sp, #28
    106a:	4680      	mov	r8, r0
    106c:	9104      	str	r1, [sp, #16]
    106e:	0016      	movs	r6, r2
    1070:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1072:	2200      	movs	r2, #0
    1074:	2300      	movs	r3, #0
    1076:	2100      	movs	r1, #0
    1078:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    107a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    107c:	2001      	movs	r0, #1
    107e:	0021      	movs	r1, r4
    1080:	9600      	str	r6, [sp, #0]
    1082:	9701      	str	r7, [sp, #4]
    1084:	465c      	mov	r4, fp
    1086:	9403      	str	r4, [sp, #12]
    1088:	4644      	mov	r4, r8
    108a:	9405      	str	r4, [sp, #20]
    108c:	e013      	b.n	10b6 <long_division+0x5a>
    108e:	2420      	movs	r4, #32
    1090:	1a64      	subs	r4, r4, r1
    1092:	0005      	movs	r5, r0
    1094:	40e5      	lsrs	r5, r4
    1096:	46a8      	mov	r8, r5
    1098:	e014      	b.n	10c4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    109a:	9c00      	ldr	r4, [sp, #0]
    109c:	9d01      	ldr	r5, [sp, #4]
    109e:	1b12      	subs	r2, r2, r4
    10a0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    10a2:	465c      	mov	r4, fp
    10a4:	464d      	mov	r5, r9
    10a6:	432c      	orrs	r4, r5
    10a8:	46a3      	mov	fp, r4
    10aa:	9c03      	ldr	r4, [sp, #12]
    10ac:	4645      	mov	r5, r8
    10ae:	432c      	orrs	r4, r5
    10b0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    10b2:	3901      	subs	r1, #1
    10b4:	d325      	bcc.n	1102 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    10b6:	2420      	movs	r4, #32
    10b8:	4264      	negs	r4, r4
    10ba:	190c      	adds	r4, r1, r4
    10bc:	d4e7      	bmi.n	108e <long_division+0x32>
    10be:	0005      	movs	r5, r0
    10c0:	40a5      	lsls	r5, r4
    10c2:	46a8      	mov	r8, r5
    10c4:	0004      	movs	r4, r0
    10c6:	408c      	lsls	r4, r1
    10c8:	46a1      	mov	r9, r4
		r = r << 1;
    10ca:	1892      	adds	r2, r2, r2
    10cc:	415b      	adcs	r3, r3
    10ce:	0014      	movs	r4, r2
    10d0:	001d      	movs	r5, r3
		if (n & bit_shift) {
    10d2:	9e05      	ldr	r6, [sp, #20]
    10d4:	464f      	mov	r7, r9
    10d6:	403e      	ands	r6, r7
    10d8:	46b4      	mov	ip, r6
    10da:	9e04      	ldr	r6, [sp, #16]
    10dc:	4647      	mov	r7, r8
    10de:	403e      	ands	r6, r7
    10e0:	46b2      	mov	sl, r6
    10e2:	4666      	mov	r6, ip
    10e4:	4657      	mov	r7, sl
    10e6:	433e      	orrs	r6, r7
    10e8:	d003      	beq.n	10f2 <long_division+0x96>
			r |= 0x01;
    10ea:	0006      	movs	r6, r0
    10ec:	4326      	orrs	r6, r4
    10ee:	0032      	movs	r2, r6
    10f0:	002b      	movs	r3, r5
		if (r >= d) {
    10f2:	9c00      	ldr	r4, [sp, #0]
    10f4:	9d01      	ldr	r5, [sp, #4]
    10f6:	429d      	cmp	r5, r3
    10f8:	d8db      	bhi.n	10b2 <long_division+0x56>
    10fa:	d1ce      	bne.n	109a <long_division+0x3e>
    10fc:	4294      	cmp	r4, r2
    10fe:	d8d8      	bhi.n	10b2 <long_division+0x56>
    1100:	e7cb      	b.n	109a <long_division+0x3e>
    1102:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1104:	4658      	mov	r0, fp
    1106:	0019      	movs	r1, r3
    1108:	b007      	add	sp, #28
    110a:	bc3c      	pop	{r2, r3, r4, r5}
    110c:	4690      	mov	r8, r2
    110e:	4699      	mov	r9, r3
    1110:	46a2      	mov	sl, r4
    1112:	46ab      	mov	fp, r5
    1114:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001116 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1116:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1118:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    111a:	2340      	movs	r3, #64	; 0x40
    111c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    111e:	4281      	cmp	r1, r0
    1120:	d202      	bcs.n	1128 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1122:	0018      	movs	r0, r3
    1124:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1126:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1128:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    112a:	1c63      	adds	r3, r4, #1
    112c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    112e:	4288      	cmp	r0, r1
    1130:	d9f9      	bls.n	1126 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1132:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1134:	2cff      	cmp	r4, #255	; 0xff
    1136:	d8f4      	bhi.n	1122 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1138:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    113a:	2300      	movs	r3, #0
    113c:	e7f1      	b.n	1122 <_sercom_get_sync_baud_val+0xc>
	...

00001140 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1140:	b5f0      	push	{r4, r5, r6, r7, lr}
    1142:	b083      	sub	sp, #12
    1144:	000f      	movs	r7, r1
    1146:	0016      	movs	r6, r2
    1148:	aa08      	add	r2, sp, #32
    114a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    114c:	0004      	movs	r4, r0
    114e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1150:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1152:	42bc      	cmp	r4, r7
    1154:	d902      	bls.n	115c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1156:	0010      	movs	r0, r2
    1158:	b003      	add	sp, #12
    115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    115c:	2b00      	cmp	r3, #0
    115e:	d114      	bne.n	118a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1160:	0002      	movs	r2, r0
    1162:	0008      	movs	r0, r1
    1164:	2100      	movs	r1, #0
    1166:	4c19      	ldr	r4, [pc, #100]	; (11cc <_sercom_get_async_baud_val+0x8c>)
    1168:	47a0      	blx	r4
    116a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    116c:	003a      	movs	r2, r7
    116e:	2300      	movs	r3, #0
    1170:	2000      	movs	r0, #0
    1172:	4c17      	ldr	r4, [pc, #92]	; (11d0 <_sercom_get_async_baud_val+0x90>)
    1174:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1176:	2200      	movs	r2, #0
    1178:	2301      	movs	r3, #1
    117a:	1a12      	subs	r2, r2, r0
    117c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    117e:	0c12      	lsrs	r2, r2, #16
    1180:	041b      	lsls	r3, r3, #16
    1182:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1184:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1186:	2200      	movs	r2, #0
    1188:	e7e5      	b.n	1156 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    118a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    118c:	2b01      	cmp	r3, #1
    118e:	d1f9      	bne.n	1184 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1190:	000a      	movs	r2, r1
    1192:	2300      	movs	r3, #0
    1194:	2100      	movs	r1, #0
    1196:	4c0d      	ldr	r4, [pc, #52]	; (11cc <_sercom_get_async_baud_val+0x8c>)
    1198:	47a0      	blx	r4
    119a:	0002      	movs	r2, r0
    119c:	000b      	movs	r3, r1
    119e:	9200      	str	r2, [sp, #0]
    11a0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    11a2:	0038      	movs	r0, r7
    11a4:	2100      	movs	r1, #0
    11a6:	4c0a      	ldr	r4, [pc, #40]	; (11d0 <_sercom_get_async_baud_val+0x90>)
    11a8:	47a0      	blx	r4
    11aa:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    11ac:	2380      	movs	r3, #128	; 0x80
    11ae:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    11b0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    11b2:	4298      	cmp	r0, r3
    11b4:	d8cf      	bhi.n	1156 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    11b6:	0f79      	lsrs	r1, r7, #29
    11b8:	00f8      	lsls	r0, r7, #3
    11ba:	9a00      	ldr	r2, [sp, #0]
    11bc:	9b01      	ldr	r3, [sp, #4]
    11be:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    11c0:	00ea      	lsls	r2, r5, #3
    11c2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    11c4:	b2d2      	uxtb	r2, r2
    11c6:	0352      	lsls	r2, r2, #13
    11c8:	432a      	orrs	r2, r5
    11ca:	e7db      	b.n	1184 <_sercom_get_async_baud_val+0x44>
    11cc:	00003a39 	.word	0x00003a39
    11d0:	0000105d 	.word	0x0000105d

000011d4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    11d4:	b510      	push	{r4, lr}
    11d6:	b082      	sub	sp, #8
    11d8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    11da:	4b0e      	ldr	r3, [pc, #56]	; (1214 <sercom_set_gclk_generator+0x40>)
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	2b00      	cmp	r3, #0
    11e0:	d007      	beq.n	11f2 <sercom_set_gclk_generator+0x1e>
    11e2:	2900      	cmp	r1, #0
    11e4:	d105      	bne.n	11f2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    11e6:	4b0b      	ldr	r3, [pc, #44]	; (1214 <sercom_set_gclk_generator+0x40>)
    11e8:	785b      	ldrb	r3, [r3, #1]
    11ea:	4283      	cmp	r3, r0
    11ec:	d010      	beq.n	1210 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    11ee:	201d      	movs	r0, #29
    11f0:	e00c      	b.n	120c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    11f2:	a901      	add	r1, sp, #4
    11f4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    11f6:	2013      	movs	r0, #19
    11f8:	4b07      	ldr	r3, [pc, #28]	; (1218 <sercom_set_gclk_generator+0x44>)
    11fa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    11fc:	2013      	movs	r0, #19
    11fe:	4b07      	ldr	r3, [pc, #28]	; (121c <sercom_set_gclk_generator+0x48>)
    1200:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1202:	4b04      	ldr	r3, [pc, #16]	; (1214 <sercom_set_gclk_generator+0x40>)
    1204:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1206:	2201      	movs	r2, #1
    1208:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    120a:	2000      	movs	r0, #0
}
    120c:	b002      	add	sp, #8
    120e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1210:	2000      	movs	r0, #0
    1212:	e7fb      	b.n	120c <sercom_set_gclk_generator+0x38>
    1214:	20000270 	.word	0x20000270
    1218:	000020cd 	.word	0x000020cd
    121c:	00002041 	.word	0x00002041

00001220 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1220:	4b40      	ldr	r3, [pc, #256]	; (1324 <_sercom_get_default_pad+0x104>)
    1222:	4298      	cmp	r0, r3
    1224:	d031      	beq.n	128a <_sercom_get_default_pad+0x6a>
    1226:	d90a      	bls.n	123e <_sercom_get_default_pad+0x1e>
    1228:	4b3f      	ldr	r3, [pc, #252]	; (1328 <_sercom_get_default_pad+0x108>)
    122a:	4298      	cmp	r0, r3
    122c:	d04d      	beq.n	12ca <_sercom_get_default_pad+0xaa>
    122e:	4b3f      	ldr	r3, [pc, #252]	; (132c <_sercom_get_default_pad+0x10c>)
    1230:	4298      	cmp	r0, r3
    1232:	d05a      	beq.n	12ea <_sercom_get_default_pad+0xca>
    1234:	4b3e      	ldr	r3, [pc, #248]	; (1330 <_sercom_get_default_pad+0x110>)
    1236:	4298      	cmp	r0, r3
    1238:	d037      	beq.n	12aa <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    123a:	2000      	movs	r0, #0
}
    123c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    123e:	4b3d      	ldr	r3, [pc, #244]	; (1334 <_sercom_get_default_pad+0x114>)
    1240:	4298      	cmp	r0, r3
    1242:	d00c      	beq.n	125e <_sercom_get_default_pad+0x3e>
    1244:	4b3c      	ldr	r3, [pc, #240]	; (1338 <_sercom_get_default_pad+0x118>)
    1246:	4298      	cmp	r0, r3
    1248:	d1f7      	bne.n	123a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    124a:	2901      	cmp	r1, #1
    124c:	d017      	beq.n	127e <_sercom_get_default_pad+0x5e>
    124e:	2900      	cmp	r1, #0
    1250:	d05d      	beq.n	130e <_sercom_get_default_pad+0xee>
    1252:	2902      	cmp	r1, #2
    1254:	d015      	beq.n	1282 <_sercom_get_default_pad+0x62>
    1256:	2903      	cmp	r1, #3
    1258:	d015      	beq.n	1286 <_sercom_get_default_pad+0x66>
	return 0;
    125a:	2000      	movs	r0, #0
    125c:	e7ee      	b.n	123c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    125e:	2901      	cmp	r1, #1
    1260:	d007      	beq.n	1272 <_sercom_get_default_pad+0x52>
    1262:	2900      	cmp	r1, #0
    1264:	d051      	beq.n	130a <_sercom_get_default_pad+0xea>
    1266:	2902      	cmp	r1, #2
    1268:	d005      	beq.n	1276 <_sercom_get_default_pad+0x56>
    126a:	2903      	cmp	r1, #3
    126c:	d005      	beq.n	127a <_sercom_get_default_pad+0x5a>
	return 0;
    126e:	2000      	movs	r0, #0
    1270:	e7e4      	b.n	123c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1272:	4832      	ldr	r0, [pc, #200]	; (133c <_sercom_get_default_pad+0x11c>)
    1274:	e7e2      	b.n	123c <_sercom_get_default_pad+0x1c>
    1276:	4832      	ldr	r0, [pc, #200]	; (1340 <_sercom_get_default_pad+0x120>)
    1278:	e7e0      	b.n	123c <_sercom_get_default_pad+0x1c>
    127a:	4832      	ldr	r0, [pc, #200]	; (1344 <_sercom_get_default_pad+0x124>)
    127c:	e7de      	b.n	123c <_sercom_get_default_pad+0x1c>
    127e:	4832      	ldr	r0, [pc, #200]	; (1348 <_sercom_get_default_pad+0x128>)
    1280:	e7dc      	b.n	123c <_sercom_get_default_pad+0x1c>
    1282:	4832      	ldr	r0, [pc, #200]	; (134c <_sercom_get_default_pad+0x12c>)
    1284:	e7da      	b.n	123c <_sercom_get_default_pad+0x1c>
    1286:	4832      	ldr	r0, [pc, #200]	; (1350 <_sercom_get_default_pad+0x130>)
    1288:	e7d8      	b.n	123c <_sercom_get_default_pad+0x1c>
    128a:	2901      	cmp	r1, #1
    128c:	d007      	beq.n	129e <_sercom_get_default_pad+0x7e>
    128e:	2900      	cmp	r1, #0
    1290:	d03f      	beq.n	1312 <_sercom_get_default_pad+0xf2>
    1292:	2902      	cmp	r1, #2
    1294:	d005      	beq.n	12a2 <_sercom_get_default_pad+0x82>
    1296:	2903      	cmp	r1, #3
    1298:	d005      	beq.n	12a6 <_sercom_get_default_pad+0x86>
	return 0;
    129a:	2000      	movs	r0, #0
    129c:	e7ce      	b.n	123c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    129e:	482d      	ldr	r0, [pc, #180]	; (1354 <_sercom_get_default_pad+0x134>)
    12a0:	e7cc      	b.n	123c <_sercom_get_default_pad+0x1c>
    12a2:	482d      	ldr	r0, [pc, #180]	; (1358 <_sercom_get_default_pad+0x138>)
    12a4:	e7ca      	b.n	123c <_sercom_get_default_pad+0x1c>
    12a6:	482d      	ldr	r0, [pc, #180]	; (135c <_sercom_get_default_pad+0x13c>)
    12a8:	e7c8      	b.n	123c <_sercom_get_default_pad+0x1c>
    12aa:	2901      	cmp	r1, #1
    12ac:	d007      	beq.n	12be <_sercom_get_default_pad+0x9e>
    12ae:	2900      	cmp	r1, #0
    12b0:	d031      	beq.n	1316 <_sercom_get_default_pad+0xf6>
    12b2:	2902      	cmp	r1, #2
    12b4:	d005      	beq.n	12c2 <_sercom_get_default_pad+0xa2>
    12b6:	2903      	cmp	r1, #3
    12b8:	d005      	beq.n	12c6 <_sercom_get_default_pad+0xa6>
	return 0;
    12ba:	2000      	movs	r0, #0
    12bc:	e7be      	b.n	123c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    12be:	4828      	ldr	r0, [pc, #160]	; (1360 <_sercom_get_default_pad+0x140>)
    12c0:	e7bc      	b.n	123c <_sercom_get_default_pad+0x1c>
    12c2:	4828      	ldr	r0, [pc, #160]	; (1364 <_sercom_get_default_pad+0x144>)
    12c4:	e7ba      	b.n	123c <_sercom_get_default_pad+0x1c>
    12c6:	4828      	ldr	r0, [pc, #160]	; (1368 <_sercom_get_default_pad+0x148>)
    12c8:	e7b8      	b.n	123c <_sercom_get_default_pad+0x1c>
    12ca:	2901      	cmp	r1, #1
    12cc:	d007      	beq.n	12de <_sercom_get_default_pad+0xbe>
    12ce:	2900      	cmp	r1, #0
    12d0:	d023      	beq.n	131a <_sercom_get_default_pad+0xfa>
    12d2:	2902      	cmp	r1, #2
    12d4:	d005      	beq.n	12e2 <_sercom_get_default_pad+0xc2>
    12d6:	2903      	cmp	r1, #3
    12d8:	d005      	beq.n	12e6 <_sercom_get_default_pad+0xc6>
	return 0;
    12da:	2000      	movs	r0, #0
    12dc:	e7ae      	b.n	123c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    12de:	4823      	ldr	r0, [pc, #140]	; (136c <_sercom_get_default_pad+0x14c>)
    12e0:	e7ac      	b.n	123c <_sercom_get_default_pad+0x1c>
    12e2:	4823      	ldr	r0, [pc, #140]	; (1370 <_sercom_get_default_pad+0x150>)
    12e4:	e7aa      	b.n	123c <_sercom_get_default_pad+0x1c>
    12e6:	4823      	ldr	r0, [pc, #140]	; (1374 <_sercom_get_default_pad+0x154>)
    12e8:	e7a8      	b.n	123c <_sercom_get_default_pad+0x1c>
    12ea:	2901      	cmp	r1, #1
    12ec:	d007      	beq.n	12fe <_sercom_get_default_pad+0xde>
    12ee:	2900      	cmp	r1, #0
    12f0:	d015      	beq.n	131e <_sercom_get_default_pad+0xfe>
    12f2:	2902      	cmp	r1, #2
    12f4:	d005      	beq.n	1302 <_sercom_get_default_pad+0xe2>
    12f6:	2903      	cmp	r1, #3
    12f8:	d005      	beq.n	1306 <_sercom_get_default_pad+0xe6>
	return 0;
    12fa:	2000      	movs	r0, #0
    12fc:	e79e      	b.n	123c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    12fe:	481e      	ldr	r0, [pc, #120]	; (1378 <_sercom_get_default_pad+0x158>)
    1300:	e79c      	b.n	123c <_sercom_get_default_pad+0x1c>
    1302:	481e      	ldr	r0, [pc, #120]	; (137c <_sercom_get_default_pad+0x15c>)
    1304:	e79a      	b.n	123c <_sercom_get_default_pad+0x1c>
    1306:	481e      	ldr	r0, [pc, #120]	; (1380 <_sercom_get_default_pad+0x160>)
    1308:	e798      	b.n	123c <_sercom_get_default_pad+0x1c>
    130a:	481e      	ldr	r0, [pc, #120]	; (1384 <_sercom_get_default_pad+0x164>)
    130c:	e796      	b.n	123c <_sercom_get_default_pad+0x1c>
    130e:	2003      	movs	r0, #3
    1310:	e794      	b.n	123c <_sercom_get_default_pad+0x1c>
    1312:	481d      	ldr	r0, [pc, #116]	; (1388 <_sercom_get_default_pad+0x168>)
    1314:	e792      	b.n	123c <_sercom_get_default_pad+0x1c>
    1316:	481d      	ldr	r0, [pc, #116]	; (138c <_sercom_get_default_pad+0x16c>)
    1318:	e790      	b.n	123c <_sercom_get_default_pad+0x1c>
    131a:	481d      	ldr	r0, [pc, #116]	; (1390 <_sercom_get_default_pad+0x170>)
    131c:	e78e      	b.n	123c <_sercom_get_default_pad+0x1c>
    131e:	481d      	ldr	r0, [pc, #116]	; (1394 <_sercom_get_default_pad+0x174>)
    1320:	e78c      	b.n	123c <_sercom_get_default_pad+0x1c>
    1322:	46c0      	nop			; (mov r8, r8)
    1324:	42001000 	.word	0x42001000
    1328:	42001800 	.word	0x42001800
    132c:	42001c00 	.word	0x42001c00
    1330:	42001400 	.word	0x42001400
    1334:	42000800 	.word	0x42000800
    1338:	42000c00 	.word	0x42000c00
    133c:	00050003 	.word	0x00050003
    1340:	00060003 	.word	0x00060003
    1344:	00070003 	.word	0x00070003
    1348:	00010003 	.word	0x00010003
    134c:	001e0003 	.word	0x001e0003
    1350:	001f0003 	.word	0x001f0003
    1354:	00090003 	.word	0x00090003
    1358:	000a0003 	.word	0x000a0003
    135c:	000b0003 	.word	0x000b0003
    1360:	00110003 	.word	0x00110003
    1364:	00120003 	.word	0x00120003
    1368:	00130003 	.word	0x00130003
    136c:	000d0003 	.word	0x000d0003
    1370:	000e0003 	.word	0x000e0003
    1374:	000f0003 	.word	0x000f0003
    1378:	00170003 	.word	0x00170003
    137c:	00180003 	.word	0x00180003
    1380:	00190003 	.word	0x00190003
    1384:	00040003 	.word	0x00040003
    1388:	00080003 	.word	0x00080003
    138c:	00100003 	.word	0x00100003
    1390:	000c0003 	.word	0x000c0003
    1394:	00160003 	.word	0x00160003

00001398 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1398:	b530      	push	{r4, r5, lr}
    139a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    139c:	4b0b      	ldr	r3, [pc, #44]	; (13cc <_sercom_get_sercom_inst_index+0x34>)
    139e:	466a      	mov	r2, sp
    13a0:	cb32      	ldmia	r3!, {r1, r4, r5}
    13a2:	c232      	stmia	r2!, {r1, r4, r5}
    13a4:	cb32      	ldmia	r3!, {r1, r4, r5}
    13a6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    13a8:	9b00      	ldr	r3, [sp, #0]
    13aa:	4283      	cmp	r3, r0
    13ac:	d00b      	beq.n	13c6 <_sercom_get_sercom_inst_index+0x2e>
    13ae:	2301      	movs	r3, #1
    13b0:	009a      	lsls	r2, r3, #2
    13b2:	4669      	mov	r1, sp
    13b4:	5852      	ldr	r2, [r2, r1]
    13b6:	4282      	cmp	r2, r0
    13b8:	d006      	beq.n	13c8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13ba:	3301      	adds	r3, #1
    13bc:	2b06      	cmp	r3, #6
    13be:	d1f7      	bne.n	13b0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    13c0:	2000      	movs	r0, #0
}
    13c2:	b007      	add	sp, #28
    13c4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13c6:	2300      	movs	r3, #0
			return i;
    13c8:	b2d8      	uxtb	r0, r3
    13ca:	e7fa      	b.n	13c2 <_sercom_get_sercom_inst_index+0x2a>
    13cc:	0000535c 	.word	0x0000535c

000013d0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    13d0:	4770      	bx	lr
	...

000013d4 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    13d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    13d6:	4b0a      	ldr	r3, [pc, #40]	; (1400 <_sercom_set_handler+0x2c>)
    13d8:	781b      	ldrb	r3, [r3, #0]
    13da:	2b00      	cmp	r3, #0
    13dc:	d10c      	bne.n	13f8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    13de:	4f09      	ldr	r7, [pc, #36]	; (1404 <_sercom_set_handler+0x30>)
    13e0:	4e09      	ldr	r6, [pc, #36]	; (1408 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    13e2:	4d0a      	ldr	r5, [pc, #40]	; (140c <_sercom_set_handler+0x38>)
    13e4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    13e6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    13e8:	195a      	adds	r2, r3, r5
    13ea:	6014      	str	r4, [r2, #0]
    13ec:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13ee:	2b18      	cmp	r3, #24
    13f0:	d1f9      	bne.n	13e6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    13f2:	2201      	movs	r2, #1
    13f4:	4b02      	ldr	r3, [pc, #8]	; (1400 <_sercom_set_handler+0x2c>)
    13f6:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    13f8:	0080      	lsls	r0, r0, #2
    13fa:	4b02      	ldr	r3, [pc, #8]	; (1404 <_sercom_set_handler+0x30>)
    13fc:	50c1      	str	r1, [r0, r3]
}
    13fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1400:	20000272 	.word	0x20000272
    1404:	20000274 	.word	0x20000274
    1408:	000013d1 	.word	0x000013d1
    140c:	200002d4 	.word	0x200002d4

00001410 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1410:	b500      	push	{lr}
    1412:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1414:	2309      	movs	r3, #9
    1416:	466a      	mov	r2, sp
    1418:	7013      	strb	r3, [r2, #0]
    141a:	3301      	adds	r3, #1
    141c:	7053      	strb	r3, [r2, #1]
    141e:	3301      	adds	r3, #1
    1420:	7093      	strb	r3, [r2, #2]
    1422:	3301      	adds	r3, #1
    1424:	70d3      	strb	r3, [r2, #3]
    1426:	3301      	adds	r3, #1
    1428:	7113      	strb	r3, [r2, #4]
    142a:	3301      	adds	r3, #1
    142c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    142e:	4b03      	ldr	r3, [pc, #12]	; (143c <_sercom_get_interrupt_vector+0x2c>)
    1430:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1432:	466b      	mov	r3, sp
    1434:	5618      	ldrsb	r0, [r3, r0]
}
    1436:	b003      	add	sp, #12
    1438:	bd00      	pop	{pc}
    143a:	46c0      	nop			; (mov r8, r8)
    143c:	00001399 	.word	0x00001399

00001440 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1440:	b510      	push	{r4, lr}
    1442:	4b02      	ldr	r3, [pc, #8]	; (144c <SERCOM0_Handler+0xc>)
    1444:	681b      	ldr	r3, [r3, #0]
    1446:	2000      	movs	r0, #0
    1448:	4798      	blx	r3
    144a:	bd10      	pop	{r4, pc}
    144c:	20000274 	.word	0x20000274

00001450 <SERCOM1_Handler>:
    1450:	b510      	push	{r4, lr}
    1452:	4b02      	ldr	r3, [pc, #8]	; (145c <SERCOM1_Handler+0xc>)
    1454:	685b      	ldr	r3, [r3, #4]
    1456:	2001      	movs	r0, #1
    1458:	4798      	blx	r3
    145a:	bd10      	pop	{r4, pc}
    145c:	20000274 	.word	0x20000274

00001460 <SERCOM2_Handler>:
    1460:	b510      	push	{r4, lr}
    1462:	4b02      	ldr	r3, [pc, #8]	; (146c <SERCOM2_Handler+0xc>)
    1464:	689b      	ldr	r3, [r3, #8]
    1466:	2002      	movs	r0, #2
    1468:	4798      	blx	r3
    146a:	bd10      	pop	{r4, pc}
    146c:	20000274 	.word	0x20000274

00001470 <SERCOM3_Handler>:
    1470:	b510      	push	{r4, lr}
    1472:	4b02      	ldr	r3, [pc, #8]	; (147c <SERCOM3_Handler+0xc>)
    1474:	68db      	ldr	r3, [r3, #12]
    1476:	2003      	movs	r0, #3
    1478:	4798      	blx	r3
    147a:	bd10      	pop	{r4, pc}
    147c:	20000274 	.word	0x20000274

00001480 <SERCOM4_Handler>:
    1480:	b510      	push	{r4, lr}
    1482:	4b02      	ldr	r3, [pc, #8]	; (148c <SERCOM4_Handler+0xc>)
    1484:	691b      	ldr	r3, [r3, #16]
    1486:	2004      	movs	r0, #4
    1488:	4798      	blx	r3
    148a:	bd10      	pop	{r4, pc}
    148c:	20000274 	.word	0x20000274

00001490 <SERCOM5_Handler>:
    1490:	b510      	push	{r4, lr}
    1492:	4b02      	ldr	r3, [pc, #8]	; (149c <SERCOM5_Handler+0xc>)
    1494:	695b      	ldr	r3, [r3, #20]
    1496:	2005      	movs	r0, #5
    1498:	4798      	blx	r3
    149a:	bd10      	pop	{r4, pc}
    149c:	20000274 	.word	0x20000274

000014a0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    14a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a2:	46de      	mov	lr, fp
    14a4:	4657      	mov	r7, sl
    14a6:	464e      	mov	r6, r9
    14a8:	4645      	mov	r5, r8
    14aa:	b5e0      	push	{r5, r6, r7, lr}
    14ac:	b091      	sub	sp, #68	; 0x44
    14ae:	0005      	movs	r5, r0
    14b0:	000c      	movs	r4, r1
    14b2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    14b4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    14b6:	0008      	movs	r0, r1
    14b8:	4bba      	ldr	r3, [pc, #744]	; (17a4 <usart_init+0x304>)
    14ba:	4798      	blx	r3
    14bc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    14be:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    14c0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    14c2:	07db      	lsls	r3, r3, #31
    14c4:	d506      	bpl.n	14d4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    14c6:	b011      	add	sp, #68	; 0x44
    14c8:	bc3c      	pop	{r2, r3, r4, r5}
    14ca:	4690      	mov	r8, r2
    14cc:	4699      	mov	r9, r3
    14ce:	46a2      	mov	sl, r4
    14d0:	46ab      	mov	fp, r5
    14d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14d4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    14d6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    14d8:	079b      	lsls	r3, r3, #30
    14da:	d4f4      	bmi.n	14c6 <usart_init+0x26>
    14dc:	49b2      	ldr	r1, [pc, #712]	; (17a8 <usart_init+0x308>)
    14de:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    14e0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    14e2:	2301      	movs	r3, #1
    14e4:	40bb      	lsls	r3, r7
    14e6:	4303      	orrs	r3, r0
    14e8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    14ea:	a90f      	add	r1, sp, #60	; 0x3c
    14ec:	272d      	movs	r7, #45	; 0x2d
    14ee:	5df3      	ldrb	r3, [r6, r7]
    14f0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    14f2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    14f4:	b2d3      	uxtb	r3, r2
    14f6:	9302      	str	r3, [sp, #8]
    14f8:	0018      	movs	r0, r3
    14fa:	4bac      	ldr	r3, [pc, #688]	; (17ac <usart_init+0x30c>)
    14fc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    14fe:	9802      	ldr	r0, [sp, #8]
    1500:	4bab      	ldr	r3, [pc, #684]	; (17b0 <usart_init+0x310>)
    1502:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1504:	5df0      	ldrb	r0, [r6, r7]
    1506:	2100      	movs	r1, #0
    1508:	4baa      	ldr	r3, [pc, #680]	; (17b4 <usart_init+0x314>)
    150a:	4798      	blx	r3
	module->character_size = config->character_size;
    150c:	7af3      	ldrb	r3, [r6, #11]
    150e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1510:	2324      	movs	r3, #36	; 0x24
    1512:	5cf3      	ldrb	r3, [r6, r3]
    1514:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1516:	2325      	movs	r3, #37	; 0x25
    1518:	5cf3      	ldrb	r3, [r6, r3]
    151a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    151c:	7ef3      	ldrb	r3, [r6, #27]
    151e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1520:	7f33      	ldrb	r3, [r6, #28]
    1522:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1524:	682b      	ldr	r3, [r5, #0]
    1526:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1528:	0018      	movs	r0, r3
    152a:	4b9e      	ldr	r3, [pc, #632]	; (17a4 <usart_init+0x304>)
    152c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    152e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1530:	2200      	movs	r2, #0
    1532:	230e      	movs	r3, #14
    1534:	a906      	add	r1, sp, #24
    1536:	468c      	mov	ip, r1
    1538:	4463      	add	r3, ip
    153a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    153c:	8a32      	ldrh	r2, [r6, #16]
    153e:	9202      	str	r2, [sp, #8]
    1540:	2380      	movs	r3, #128	; 0x80
    1542:	01db      	lsls	r3, r3, #7
    1544:	429a      	cmp	r2, r3
    1546:	d100      	bne.n	154a <usart_init+0xaa>
    1548:	e09a      	b.n	1680 <usart_init+0x1e0>
    154a:	d90f      	bls.n	156c <usart_init+0xcc>
    154c:	23c0      	movs	r3, #192	; 0xc0
    154e:	01db      	lsls	r3, r3, #7
    1550:	9a02      	ldr	r2, [sp, #8]
    1552:	429a      	cmp	r2, r3
    1554:	d100      	bne.n	1558 <usart_init+0xb8>
    1556:	e08e      	b.n	1676 <usart_init+0x1d6>
    1558:	2380      	movs	r3, #128	; 0x80
    155a:	021b      	lsls	r3, r3, #8
    155c:	429a      	cmp	r2, r3
    155e:	d000      	beq.n	1562 <usart_init+0xc2>
    1560:	e11b      	b.n	179a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1562:	2303      	movs	r3, #3
    1564:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1566:	2300      	movs	r3, #0
    1568:	9307      	str	r3, [sp, #28]
    156a:	e008      	b.n	157e <usart_init+0xde>
	switch (config->sample_rate) {
    156c:	2380      	movs	r3, #128	; 0x80
    156e:	019b      	lsls	r3, r3, #6
    1570:	429a      	cmp	r2, r3
    1572:	d000      	beq.n	1576 <usart_init+0xd6>
    1574:	e111      	b.n	179a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1576:	2310      	movs	r3, #16
    1578:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    157a:	3b0f      	subs	r3, #15
    157c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    157e:	6833      	ldr	r3, [r6, #0]
    1580:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1582:	68f3      	ldr	r3, [r6, #12]
    1584:	469b      	mov	fp, r3
		config->sample_adjustment |
    1586:	6973      	ldr	r3, [r6, #20]
    1588:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    158a:	7e33      	ldrb	r3, [r6, #24]
    158c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    158e:	2326      	movs	r3, #38	; 0x26
    1590:	5cf3      	ldrb	r3, [r6, r3]
    1592:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1594:	6873      	ldr	r3, [r6, #4]
    1596:	4699      	mov	r9, r3
	switch (transfer_mode)
    1598:	2b00      	cmp	r3, #0
    159a:	d100      	bne.n	159e <usart_init+0xfe>
    159c:	e09c      	b.n	16d8 <usart_init+0x238>
    159e:	2380      	movs	r3, #128	; 0x80
    15a0:	055b      	lsls	r3, r3, #21
    15a2:	4599      	cmp	r9, r3
    15a4:	d100      	bne.n	15a8 <usart_init+0x108>
    15a6:	e080      	b.n	16aa <usart_init+0x20a>
	if(config->encoding_format_enable) {
    15a8:	7e73      	ldrb	r3, [r6, #25]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d002      	beq.n	15b4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    15ae:	7eb3      	ldrb	r3, [r6, #26]
    15b0:	4642      	mov	r2, r8
    15b2:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    15b4:	230e      	movs	r3, #14
    15b6:	aa06      	add	r2, sp, #24
    15b8:	4694      	mov	ip, r2
    15ba:	4463      	add	r3, ip
    15bc:	881b      	ldrh	r3, [r3, #0]
    15be:	4642      	mov	r2, r8
    15c0:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    15c2:	9b05      	ldr	r3, [sp, #20]
    15c4:	465a      	mov	r2, fp
    15c6:	4313      	orrs	r3, r2
    15c8:	9a03      	ldr	r2, [sp, #12]
    15ca:	4313      	orrs	r3, r2
    15cc:	464a      	mov	r2, r9
    15ce:	4313      	orrs	r3, r2
    15d0:	9f02      	ldr	r7, [sp, #8]
    15d2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    15d4:	9b04      	ldr	r3, [sp, #16]
    15d6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    15d8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    15da:	4653      	mov	r3, sl
    15dc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    15de:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    15e0:	2327      	movs	r3, #39	; 0x27
    15e2:	5cf3      	ldrb	r3, [r6, r3]
    15e4:	2b00      	cmp	r3, #0
    15e6:	d101      	bne.n	15ec <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    15e8:	3304      	adds	r3, #4
    15ea:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    15ec:	7e73      	ldrb	r3, [r6, #25]
    15ee:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    15f0:	7f32      	ldrb	r2, [r6, #28]
    15f2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    15f4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    15f6:	7f72      	ldrb	r2, [r6, #29]
    15f8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    15fa:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    15fc:	2224      	movs	r2, #36	; 0x24
    15fe:	5cb2      	ldrb	r2, [r6, r2]
    1600:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1602:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1604:	2225      	movs	r2, #37	; 0x25
    1606:	5cb2      	ldrb	r2, [r6, r2]
    1608:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    160a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    160c:	7ab1      	ldrb	r1, [r6, #10]
    160e:	7af2      	ldrb	r2, [r6, #11]
    1610:	4311      	orrs	r1, r2
    1612:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1614:	8933      	ldrh	r3, [r6, #8]
    1616:	2bff      	cmp	r3, #255	; 0xff
    1618:	d100      	bne.n	161c <usart_init+0x17c>
    161a:	e081      	b.n	1720 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    161c:	2280      	movs	r2, #128	; 0x80
    161e:	0452      	lsls	r2, r2, #17
    1620:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1622:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1624:	232c      	movs	r3, #44	; 0x2c
    1626:	5cf3      	ldrb	r3, [r6, r3]
    1628:	2b00      	cmp	r3, #0
    162a:	d103      	bne.n	1634 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    162c:	4b62      	ldr	r3, [pc, #392]	; (17b8 <usart_init+0x318>)
    162e:	789b      	ldrb	r3, [r3, #2]
    1630:	079b      	lsls	r3, r3, #30
    1632:	d501      	bpl.n	1638 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1634:	2380      	movs	r3, #128	; 0x80
    1636:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1638:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    163a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    163c:	2b00      	cmp	r3, #0
    163e:	d1fc      	bne.n	163a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    1640:	4643      	mov	r3, r8
    1642:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1644:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1646:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1648:	2b00      	cmp	r3, #0
    164a:	d1fc      	bne.n	1646 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    164c:	4643      	mov	r3, r8
    164e:	601f      	str	r7, [r3, #0]
    1650:	ab0e      	add	r3, sp, #56	; 0x38
    1652:	2280      	movs	r2, #128	; 0x80
    1654:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1656:	2200      	movs	r2, #0
    1658:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    165a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    165c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    165e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1660:	930a      	str	r3, [sp, #40]	; 0x28
    1662:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1664:	930b      	str	r3, [sp, #44]	; 0x2c
    1666:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1668:	930c      	str	r3, [sp, #48]	; 0x30
    166a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    166c:	9302      	str	r3, [sp, #8]
    166e:	930d      	str	r3, [sp, #52]	; 0x34
    1670:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1672:	ae0a      	add	r6, sp, #40	; 0x28
    1674:	e063      	b.n	173e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1676:	2308      	movs	r3, #8
    1678:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    167a:	3b07      	subs	r3, #7
    167c:	9307      	str	r3, [sp, #28]
    167e:	e77e      	b.n	157e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1680:	6833      	ldr	r3, [r6, #0]
    1682:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1684:	68f3      	ldr	r3, [r6, #12]
    1686:	469b      	mov	fp, r3
		config->sample_adjustment |
    1688:	6973      	ldr	r3, [r6, #20]
    168a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    168c:	7e33      	ldrb	r3, [r6, #24]
    168e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1690:	2326      	movs	r3, #38	; 0x26
    1692:	5cf3      	ldrb	r3, [r6, r3]
    1694:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1696:	6873      	ldr	r3, [r6, #4]
    1698:	4699      	mov	r9, r3
	switch (transfer_mode)
    169a:	2b00      	cmp	r3, #0
    169c:	d018      	beq.n	16d0 <usart_init+0x230>
    169e:	2380      	movs	r3, #128	; 0x80
    16a0:	055b      	lsls	r3, r3, #21
    16a2:	4599      	cmp	r9, r3
    16a4:	d001      	beq.n	16aa <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    16a6:	2000      	movs	r0, #0
    16a8:	e025      	b.n	16f6 <usart_init+0x256>
			if (!config->use_external_clock) {
    16aa:	2327      	movs	r3, #39	; 0x27
    16ac:	5cf3      	ldrb	r3, [r6, r3]
    16ae:	2b00      	cmp	r3, #0
    16b0:	d000      	beq.n	16b4 <usart_init+0x214>
    16b2:	e779      	b.n	15a8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    16b4:	6a33      	ldr	r3, [r6, #32]
    16b6:	001f      	movs	r7, r3
    16b8:	b2c0      	uxtb	r0, r0
    16ba:	4b40      	ldr	r3, [pc, #256]	; (17bc <usart_init+0x31c>)
    16bc:	4798      	blx	r3
    16be:	0001      	movs	r1, r0
    16c0:	220e      	movs	r2, #14
    16c2:	ab06      	add	r3, sp, #24
    16c4:	469c      	mov	ip, r3
    16c6:	4462      	add	r2, ip
    16c8:	0038      	movs	r0, r7
    16ca:	4b3d      	ldr	r3, [pc, #244]	; (17c0 <usart_init+0x320>)
    16cc:	4798      	blx	r3
    16ce:	e012      	b.n	16f6 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    16d0:	2308      	movs	r3, #8
    16d2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    16d4:	2300      	movs	r3, #0
    16d6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    16d8:	2327      	movs	r3, #39	; 0x27
    16da:	5cf3      	ldrb	r3, [r6, r3]
    16dc:	2b00      	cmp	r3, #0
    16de:	d00e      	beq.n	16fe <usart_init+0x25e>
				status_code =
    16e0:	9b06      	ldr	r3, [sp, #24]
    16e2:	9300      	str	r3, [sp, #0]
    16e4:	9b07      	ldr	r3, [sp, #28]
    16e6:	220e      	movs	r2, #14
    16e8:	a906      	add	r1, sp, #24
    16ea:	468c      	mov	ip, r1
    16ec:	4462      	add	r2, ip
    16ee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    16f0:	6a30      	ldr	r0, [r6, #32]
    16f2:	4f34      	ldr	r7, [pc, #208]	; (17c4 <usart_init+0x324>)
    16f4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    16f6:	2800      	cmp	r0, #0
    16f8:	d000      	beq.n	16fc <usart_init+0x25c>
    16fa:	e6e4      	b.n	14c6 <usart_init+0x26>
    16fc:	e754      	b.n	15a8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    16fe:	6a33      	ldr	r3, [r6, #32]
    1700:	001f      	movs	r7, r3
    1702:	b2c0      	uxtb	r0, r0
    1704:	4b2d      	ldr	r3, [pc, #180]	; (17bc <usart_init+0x31c>)
    1706:	4798      	blx	r3
    1708:	0001      	movs	r1, r0
				status_code =
    170a:	9b06      	ldr	r3, [sp, #24]
    170c:	9300      	str	r3, [sp, #0]
    170e:	9b07      	ldr	r3, [sp, #28]
    1710:	220e      	movs	r2, #14
    1712:	a806      	add	r0, sp, #24
    1714:	4684      	mov	ip, r0
    1716:	4462      	add	r2, ip
    1718:	0038      	movs	r0, r7
    171a:	4f2a      	ldr	r7, [pc, #168]	; (17c4 <usart_init+0x324>)
    171c:	47b8      	blx	r7
    171e:	e7ea      	b.n	16f6 <usart_init+0x256>
		if(config->lin_slave_enable) {
    1720:	7ef3      	ldrb	r3, [r6, #27]
    1722:	2b00      	cmp	r3, #0
    1724:	d100      	bne.n	1728 <usart_init+0x288>
    1726:	e77d      	b.n	1624 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1728:	2380      	movs	r3, #128	; 0x80
    172a:	04db      	lsls	r3, r3, #19
    172c:	431f      	orrs	r7, r3
    172e:	e779      	b.n	1624 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1730:	0020      	movs	r0, r4
    1732:	4b25      	ldr	r3, [pc, #148]	; (17c8 <usart_init+0x328>)
    1734:	4798      	blx	r3
    1736:	e007      	b.n	1748 <usart_init+0x2a8>
    1738:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    173a:	2f04      	cmp	r7, #4
    173c:	d00d      	beq.n	175a <usart_init+0x2ba>
    173e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1740:	00bb      	lsls	r3, r7, #2
    1742:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1744:	2800      	cmp	r0, #0
    1746:	d0f3      	beq.n	1730 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    1748:	1c43      	adds	r3, r0, #1
    174a:	d0f5      	beq.n	1738 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    174c:	a90e      	add	r1, sp, #56	; 0x38
    174e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1750:	0c00      	lsrs	r0, r0, #16
    1752:	b2c0      	uxtb	r0, r0
    1754:	4b1d      	ldr	r3, [pc, #116]	; (17cc <usart_init+0x32c>)
    1756:	4798      	blx	r3
    1758:	e7ee      	b.n	1738 <usart_init+0x298>
		module->callback[i]            = NULL;
    175a:	2300      	movs	r3, #0
    175c:	60eb      	str	r3, [r5, #12]
    175e:	612b      	str	r3, [r5, #16]
    1760:	616b      	str	r3, [r5, #20]
    1762:	61ab      	str	r3, [r5, #24]
    1764:	61eb      	str	r3, [r5, #28]
    1766:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1768:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    176a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    176c:	2200      	movs	r2, #0
    176e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1770:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1772:	3330      	adds	r3, #48	; 0x30
    1774:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1776:	3301      	adds	r3, #1
    1778:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    177a:	3301      	adds	r3, #1
    177c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    177e:	3301      	adds	r3, #1
    1780:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1782:	6828      	ldr	r0, [r5, #0]
    1784:	4b07      	ldr	r3, [pc, #28]	; (17a4 <usart_init+0x304>)
    1786:	4798      	blx	r3
    1788:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    178a:	4911      	ldr	r1, [pc, #68]	; (17d0 <usart_init+0x330>)
    178c:	4b11      	ldr	r3, [pc, #68]	; (17d4 <usart_init+0x334>)
    178e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1790:	00a4      	lsls	r4, r4, #2
    1792:	4b11      	ldr	r3, [pc, #68]	; (17d8 <usart_init+0x338>)
    1794:	50e5      	str	r5, [r4, r3]
	return status_code;
    1796:	2000      	movs	r0, #0
    1798:	e695      	b.n	14c6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    179a:	2310      	movs	r3, #16
    179c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    179e:	2300      	movs	r3, #0
    17a0:	9307      	str	r3, [sp, #28]
    17a2:	e6ec      	b.n	157e <usart_init+0xde>
    17a4:	00001399 	.word	0x00001399
    17a8:	40000400 	.word	0x40000400
    17ac:	000020cd 	.word	0x000020cd
    17b0:	00002041 	.word	0x00002041
    17b4:	000011d5 	.word	0x000011d5
    17b8:	41002000 	.word	0x41002000
    17bc:	000020e9 	.word	0x000020e9
    17c0:	00001117 	.word	0x00001117
    17c4:	00001141 	.word	0x00001141
    17c8:	00001221 	.word	0x00001221
    17cc:	000021c5 	.word	0x000021c5
    17d0:	000018f5 	.word	0x000018f5
    17d4:	000013d5 	.word	0x000013d5
    17d8:	200002d4 	.word	0x200002d4

000017dc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    17dc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    17de:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    17e0:	2a00      	cmp	r2, #0
    17e2:	d101      	bne.n	17e8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    17e4:	0018      	movs	r0, r3
    17e6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    17e8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    17ea:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    17ec:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    17ee:	2a00      	cmp	r2, #0
    17f0:	d1f8      	bne.n	17e4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    17f2:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    17f4:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    17f6:	2102      	movs	r1, #2
    17f8:	7e13      	ldrb	r3, [r2, #24]
    17fa:	420b      	tst	r3, r1
    17fc:	d0fc      	beq.n	17f8 <usart_write_wait+0x1c>
	return STATUS_OK;
    17fe:	2300      	movs	r3, #0
    1800:	e7f0      	b.n	17e4 <usart_write_wait+0x8>

00001802 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1802:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1804:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1806:	2a00      	cmp	r2, #0
    1808:	d101      	bne.n	180e <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    180a:	0018      	movs	r0, r3
    180c:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    180e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1810:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1812:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1814:	2a00      	cmp	r2, #0
    1816:	d1f8      	bne.n	180a <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1818:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    181a:	7e10      	ldrb	r0, [r2, #24]
    181c:	0740      	lsls	r0, r0, #29
    181e:	d5f4      	bpl.n	180a <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1820:	8b53      	ldrh	r3, [r2, #26]
    1822:	b2db      	uxtb	r3, r3
	if (error_code) {
    1824:	0698      	lsls	r0, r3, #26
    1826:	d01d      	beq.n	1864 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1828:	0798      	lsls	r0, r3, #30
    182a:	d503      	bpl.n	1834 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    182c:	2302      	movs	r3, #2
    182e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1830:	3318      	adds	r3, #24
    1832:	e7ea      	b.n	180a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1834:	0758      	lsls	r0, r3, #29
    1836:	d503      	bpl.n	1840 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1838:	2304      	movs	r3, #4
    183a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    183c:	331a      	adds	r3, #26
    183e:	e7e4      	b.n	180a <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1840:	07d8      	lsls	r0, r3, #31
    1842:	d503      	bpl.n	184c <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1844:	2301      	movs	r3, #1
    1846:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1848:	3312      	adds	r3, #18
    184a:	e7de      	b.n	180a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    184c:	06d8      	lsls	r0, r3, #27
    184e:	d503      	bpl.n	1858 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1850:	2310      	movs	r3, #16
    1852:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1854:	3332      	adds	r3, #50	; 0x32
    1856:	e7d8      	b.n	180a <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1858:	069b      	lsls	r3, r3, #26
    185a:	d503      	bpl.n	1864 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    185c:	2320      	movs	r3, #32
    185e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1860:	3321      	adds	r3, #33	; 0x21
    1862:	e7d2      	b.n	180a <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1864:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1866:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1868:	2300      	movs	r3, #0
    186a:	e7ce      	b.n	180a <usart_read_wait+0x8>

0000186c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    186e:	0004      	movs	r4, r0
    1870:	000d      	movs	r5, r1
    1872:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1874:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    1876:	4b0f      	ldr	r3, [pc, #60]	; (18b4 <_usart_read_buffer+0x48>)
    1878:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    187a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    187c:	b29b      	uxth	r3, r3
    187e:	2b00      	cmp	r3, #0
    1880:	d003      	beq.n	188a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    1882:	4b0d      	ldr	r3, [pc, #52]	; (18b8 <_usart_read_buffer+0x4c>)
    1884:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1886:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    188a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    188c:	4b0a      	ldr	r3, [pc, #40]	; (18b8 <_usart_read_buffer+0x4c>)
    188e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1890:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1892:	2205      	movs	r2, #5
    1894:	2332      	movs	r3, #50	; 0x32
    1896:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1898:	3b2e      	subs	r3, #46	; 0x2e
    189a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    189c:	7a23      	ldrb	r3, [r4, #8]
    189e:	2b00      	cmp	r3, #0
    18a0:	d001      	beq.n	18a6 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    18a2:	2320      	movs	r3, #32
    18a4:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    18a6:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    18a8:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    18aa:	2b00      	cmp	r3, #0
    18ac:	d0ec      	beq.n	1888 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    18ae:	2308      	movs	r3, #8
    18b0:	75bb      	strb	r3, [r7, #22]
    18b2:	e7e9      	b.n	1888 <_usart_read_buffer+0x1c>
    18b4:	00000a61 	.word	0x00000a61
    18b8:	00000aa1 	.word	0x00000aa1

000018bc <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    18bc:	1c93      	adds	r3, r2, #2
    18be:	009b      	lsls	r3, r3, #2
    18c0:	18c3      	adds	r3, r0, r3
    18c2:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    18c4:	2130      	movs	r1, #48	; 0x30
    18c6:	2301      	movs	r3, #1
    18c8:	4093      	lsls	r3, r2
    18ca:	001a      	movs	r2, r3
    18cc:	5c43      	ldrb	r3, [r0, r1]
    18ce:	4313      	orrs	r3, r2
    18d0:	5443      	strb	r3, [r0, r1]
}
    18d2:	4770      	bx	lr

000018d4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    18d4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    18d6:	2317      	movs	r3, #23
	if (length == 0) {
    18d8:	2a00      	cmp	r2, #0
    18da:	d101      	bne.n	18e0 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    18dc:	0018      	movs	r0, r3
    18de:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    18e0:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    18e2:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    18e4:	2c00      	cmp	r4, #0
    18e6:	d0f9      	beq.n	18dc <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    18e8:	4b01      	ldr	r3, [pc, #4]	; (18f0 <usart_read_buffer_job+0x1c>)
    18ea:	4798      	blx	r3
    18ec:	0003      	movs	r3, r0
    18ee:	e7f5      	b.n	18dc <usart_read_buffer_job+0x8>
    18f0:	0000186d 	.word	0x0000186d

000018f4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    18f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    18f6:	0080      	lsls	r0, r0, #2
    18f8:	4b62      	ldr	r3, [pc, #392]	; (1a84 <_usart_interrupt_handler+0x190>)
    18fa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    18fc:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    18fe:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1900:	2b00      	cmp	r3, #0
    1902:	d1fc      	bne.n	18fe <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1904:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1906:	7da6      	ldrb	r6, [r4, #22]
    1908:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    190a:	2330      	movs	r3, #48	; 0x30
    190c:	5ceb      	ldrb	r3, [r5, r3]
    190e:	2231      	movs	r2, #49	; 0x31
    1910:	5caf      	ldrb	r7, [r5, r2]
    1912:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1914:	07f3      	lsls	r3, r6, #31
    1916:	d522      	bpl.n	195e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1918:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    191a:	b29b      	uxth	r3, r3
    191c:	2b00      	cmp	r3, #0
    191e:	d01c      	beq.n	195a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1920:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1922:	7813      	ldrb	r3, [r2, #0]
    1924:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1926:	1c51      	adds	r1, r2, #1
    1928:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    192a:	7969      	ldrb	r1, [r5, #5]
    192c:	2901      	cmp	r1, #1
    192e:	d00e      	beq.n	194e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1930:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1932:	05db      	lsls	r3, r3, #23
    1934:	0ddb      	lsrs	r3, r3, #23
    1936:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1938:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    193a:	3b01      	subs	r3, #1
    193c:	b29b      	uxth	r3, r3
    193e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1940:	2b00      	cmp	r3, #0
    1942:	d10c      	bne.n	195e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1944:	3301      	adds	r3, #1
    1946:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1948:	3301      	adds	r3, #1
    194a:	75a3      	strb	r3, [r4, #22]
    194c:	e007      	b.n	195e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    194e:	7851      	ldrb	r1, [r2, #1]
    1950:	0209      	lsls	r1, r1, #8
    1952:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1954:	3202      	adds	r2, #2
    1956:	62aa      	str	r2, [r5, #40]	; 0x28
    1958:	e7eb      	b.n	1932 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    195a:	2301      	movs	r3, #1
    195c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    195e:	07b3      	lsls	r3, r6, #30
    1960:	d506      	bpl.n	1970 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1962:	2302      	movs	r3, #2
    1964:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1966:	2200      	movs	r2, #0
    1968:	3331      	adds	r3, #49	; 0x31
    196a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    196c:	07fb      	lsls	r3, r7, #31
    196e:	d41a      	bmi.n	19a6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1970:	0773      	lsls	r3, r6, #29
    1972:	d565      	bpl.n	1a40 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1974:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1976:	b29b      	uxth	r3, r3
    1978:	2b00      	cmp	r3, #0
    197a:	d05f      	beq.n	1a3c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    197c:	8b63      	ldrh	r3, [r4, #26]
    197e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1980:	071a      	lsls	r2, r3, #28
    1982:	d414      	bmi.n	19ae <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1984:	223f      	movs	r2, #63	; 0x3f
    1986:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1988:	2b00      	cmp	r3, #0
    198a:	d034      	beq.n	19f6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    198c:	079a      	lsls	r2, r3, #30
    198e:	d511      	bpl.n	19b4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1990:	221a      	movs	r2, #26
    1992:	2332      	movs	r3, #50	; 0x32
    1994:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1996:	3b30      	subs	r3, #48	; 0x30
    1998:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    199a:	077b      	lsls	r3, r7, #29
    199c:	d550      	bpl.n	1a40 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    199e:	0028      	movs	r0, r5
    19a0:	696b      	ldr	r3, [r5, #20]
    19a2:	4798      	blx	r3
    19a4:	e04c      	b.n	1a40 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    19a6:	0028      	movs	r0, r5
    19a8:	68eb      	ldr	r3, [r5, #12]
    19aa:	4798      	blx	r3
    19ac:	e7e0      	b.n	1970 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    19ae:	2237      	movs	r2, #55	; 0x37
    19b0:	4013      	ands	r3, r2
    19b2:	e7e9      	b.n	1988 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    19b4:	075a      	lsls	r2, r3, #29
    19b6:	d505      	bpl.n	19c4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    19b8:	221e      	movs	r2, #30
    19ba:	2332      	movs	r3, #50	; 0x32
    19bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    19be:	3b2e      	subs	r3, #46	; 0x2e
    19c0:	8363      	strh	r3, [r4, #26]
    19c2:	e7ea      	b.n	199a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    19c4:	07da      	lsls	r2, r3, #31
    19c6:	d505      	bpl.n	19d4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    19c8:	2213      	movs	r2, #19
    19ca:	2332      	movs	r3, #50	; 0x32
    19cc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    19ce:	3b31      	subs	r3, #49	; 0x31
    19d0:	8363      	strh	r3, [r4, #26]
    19d2:	e7e2      	b.n	199a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    19d4:	06da      	lsls	r2, r3, #27
    19d6:	d505      	bpl.n	19e4 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    19d8:	2242      	movs	r2, #66	; 0x42
    19da:	2332      	movs	r3, #50	; 0x32
    19dc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    19de:	3b22      	subs	r3, #34	; 0x22
    19e0:	8363      	strh	r3, [r4, #26]
    19e2:	e7da      	b.n	199a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    19e4:	2220      	movs	r2, #32
    19e6:	421a      	tst	r2, r3
    19e8:	d0d7      	beq.n	199a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    19ea:	3221      	adds	r2, #33	; 0x21
    19ec:	2332      	movs	r3, #50	; 0x32
    19ee:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    19f0:	3b12      	subs	r3, #18
    19f2:	8363      	strh	r3, [r4, #26]
    19f4:	e7d1      	b.n	199a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    19f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    19f8:	05db      	lsls	r3, r3, #23
    19fa:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    19fc:	b2da      	uxtb	r2, r3
    19fe:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1a00:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1a02:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1a04:	1c51      	adds	r1, r2, #1
    1a06:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1a08:	7969      	ldrb	r1, [r5, #5]
    1a0a:	2901      	cmp	r1, #1
    1a0c:	d010      	beq.n	1a30 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1a0e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1a10:	3b01      	subs	r3, #1
    1a12:	b29b      	uxth	r3, r3
    1a14:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1a16:	2b00      	cmp	r3, #0
    1a18:	d112      	bne.n	1a40 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a1a:	3304      	adds	r3, #4
    1a1c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1a1e:	2200      	movs	r2, #0
    1a20:	332e      	adds	r3, #46	; 0x2e
    1a22:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1a24:	07bb      	lsls	r3, r7, #30
    1a26:	d50b      	bpl.n	1a40 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1a28:	0028      	movs	r0, r5
    1a2a:	692b      	ldr	r3, [r5, #16]
    1a2c:	4798      	blx	r3
    1a2e:	e007      	b.n	1a40 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1a30:	0a1b      	lsrs	r3, r3, #8
    1a32:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1a34:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1a36:	3301      	adds	r3, #1
    1a38:	626b      	str	r3, [r5, #36]	; 0x24
    1a3a:	e7e8      	b.n	1a0e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1a3c:	2304      	movs	r3, #4
    1a3e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1a40:	06f3      	lsls	r3, r6, #27
    1a42:	d504      	bpl.n	1a4e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1a44:	2310      	movs	r3, #16
    1a46:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1a48:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1a4a:	06fb      	lsls	r3, r7, #27
    1a4c:	d40e      	bmi.n	1a6c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1a4e:	06b3      	lsls	r3, r6, #26
    1a50:	d504      	bpl.n	1a5c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1a52:	2320      	movs	r3, #32
    1a54:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1a56:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1a58:	073b      	lsls	r3, r7, #28
    1a5a:	d40b      	bmi.n	1a74 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1a5c:	0733      	lsls	r3, r6, #28
    1a5e:	d504      	bpl.n	1a6a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1a60:	2308      	movs	r3, #8
    1a62:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1a64:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1a66:	06bb      	lsls	r3, r7, #26
    1a68:	d408      	bmi.n	1a7c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    1a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1a6c:	0028      	movs	r0, r5
    1a6e:	69eb      	ldr	r3, [r5, #28]
    1a70:	4798      	blx	r3
    1a72:	e7ec      	b.n	1a4e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1a74:	0028      	movs	r0, r5
    1a76:	69ab      	ldr	r3, [r5, #24]
    1a78:	4798      	blx	r3
    1a7a:	e7ef      	b.n	1a5c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1a7c:	6a2b      	ldr	r3, [r5, #32]
    1a7e:	0028      	movs	r0, r5
    1a80:	4798      	blx	r3
}
    1a82:	e7f2      	b.n	1a6a <_usart_interrupt_handler+0x176>
    1a84:	200002d4 	.word	0x200002d4

00001a88 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1a88:	b510      	push	{r4, lr}
	switch (clock_source) {
    1a8a:	2808      	cmp	r0, #8
    1a8c:	d803      	bhi.n	1a96 <system_clock_source_get_hz+0xe>
    1a8e:	0080      	lsls	r0, r0, #2
    1a90:	4b1c      	ldr	r3, [pc, #112]	; (1b04 <system_clock_source_get_hz+0x7c>)
    1a92:	581b      	ldr	r3, [r3, r0]
    1a94:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1a96:	2000      	movs	r0, #0
    1a98:	e032      	b.n	1b00 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    1a9a:	4b1b      	ldr	r3, [pc, #108]	; (1b08 <system_clock_source_get_hz+0x80>)
    1a9c:	6918      	ldr	r0, [r3, #16]
    1a9e:	e02f      	b.n	1b00 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1aa0:	4b1a      	ldr	r3, [pc, #104]	; (1b0c <system_clock_source_get_hz+0x84>)
    1aa2:	6a1b      	ldr	r3, [r3, #32]
    1aa4:	059b      	lsls	r3, r3, #22
    1aa6:	0f9b      	lsrs	r3, r3, #30
    1aa8:	4819      	ldr	r0, [pc, #100]	; (1b10 <system_clock_source_get_hz+0x88>)
    1aaa:	40d8      	lsrs	r0, r3
    1aac:	e028      	b.n	1b00 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1aae:	4b16      	ldr	r3, [pc, #88]	; (1b08 <system_clock_source_get_hz+0x80>)
    1ab0:	6958      	ldr	r0, [r3, #20]
    1ab2:	e025      	b.n	1b00 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1ab4:	4b14      	ldr	r3, [pc, #80]	; (1b08 <system_clock_source_get_hz+0x80>)
    1ab6:	681b      	ldr	r3, [r3, #0]
			return 0;
    1ab8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1aba:	079b      	lsls	r3, r3, #30
    1abc:	d520      	bpl.n	1b00 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1abe:	4913      	ldr	r1, [pc, #76]	; (1b0c <system_clock_source_get_hz+0x84>)
    1ac0:	2210      	movs	r2, #16
    1ac2:	68cb      	ldr	r3, [r1, #12]
    1ac4:	421a      	tst	r2, r3
    1ac6:	d0fc      	beq.n	1ac2 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1ac8:	4b0f      	ldr	r3, [pc, #60]	; (1b08 <system_clock_source_get_hz+0x80>)
    1aca:	681a      	ldr	r2, [r3, #0]
    1acc:	2324      	movs	r3, #36	; 0x24
    1ace:	4013      	ands	r3, r2
    1ad0:	2b04      	cmp	r3, #4
    1ad2:	d001      	beq.n	1ad8 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1ad4:	480f      	ldr	r0, [pc, #60]	; (1b14 <system_clock_source_get_hz+0x8c>)
    1ad6:	e013      	b.n	1b00 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ad8:	2000      	movs	r0, #0
    1ada:	4b0f      	ldr	r3, [pc, #60]	; (1b18 <system_clock_source_get_hz+0x90>)
    1adc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1ade:	4b0a      	ldr	r3, [pc, #40]	; (1b08 <system_clock_source_get_hz+0x80>)
    1ae0:	689b      	ldr	r3, [r3, #8]
    1ae2:	041b      	lsls	r3, r3, #16
    1ae4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ae6:	4358      	muls	r0, r3
    1ae8:	e00a      	b.n	1b00 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1aea:	2350      	movs	r3, #80	; 0x50
    1aec:	4a07      	ldr	r2, [pc, #28]	; (1b0c <system_clock_source_get_hz+0x84>)
    1aee:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1af0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1af2:	075b      	lsls	r3, r3, #29
    1af4:	d504      	bpl.n	1b00 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1af6:	4b04      	ldr	r3, [pc, #16]	; (1b08 <system_clock_source_get_hz+0x80>)
    1af8:	68d8      	ldr	r0, [r3, #12]
    1afa:	e001      	b.n	1b00 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1afc:	2080      	movs	r0, #128	; 0x80
    1afe:	0200      	lsls	r0, r0, #8
	}
}
    1b00:	bd10      	pop	{r4, pc}
    1b02:	46c0      	nop			; (mov r8, r8)
    1b04:	00005374 	.word	0x00005374
    1b08:	2000028c 	.word	0x2000028c
    1b0c:	40000800 	.word	0x40000800
    1b10:	007a1200 	.word	0x007a1200
    1b14:	02dc6c00 	.word	0x02dc6c00
    1b18:	000020e9 	.word	0x000020e9

00001b1c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1b1c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1b1e:	490c      	ldr	r1, [pc, #48]	; (1b50 <system_clock_source_osc8m_set_config+0x34>)
    1b20:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1b22:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1b24:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1b26:	7840      	ldrb	r0, [r0, #1]
    1b28:	2201      	movs	r2, #1
    1b2a:	4010      	ands	r0, r2
    1b2c:	0180      	lsls	r0, r0, #6
    1b2e:	2640      	movs	r6, #64	; 0x40
    1b30:	43b3      	bics	r3, r6
    1b32:	4303      	orrs	r3, r0
    1b34:	402a      	ands	r2, r5
    1b36:	01d2      	lsls	r2, r2, #7
    1b38:	2080      	movs	r0, #128	; 0x80
    1b3a:	4383      	bics	r3, r0
    1b3c:	4313      	orrs	r3, r2
    1b3e:	2203      	movs	r2, #3
    1b40:	4022      	ands	r2, r4
    1b42:	0212      	lsls	r2, r2, #8
    1b44:	4803      	ldr	r0, [pc, #12]	; (1b54 <system_clock_source_osc8m_set_config+0x38>)
    1b46:	4003      	ands	r3, r0
    1b48:	4313      	orrs	r3, r2
    1b4a:	620b      	str	r3, [r1, #32]
}
    1b4c:	bd70      	pop	{r4, r5, r6, pc}
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	40000800 	.word	0x40000800
    1b54:	fffffcff 	.word	0xfffffcff

00001b58 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5a:	46de      	mov	lr, fp
    1b5c:	4657      	mov	r7, sl
    1b5e:	464e      	mov	r6, r9
    1b60:	4645      	mov	r5, r8
    1b62:	b5e0      	push	{r5, r6, r7, lr}
    1b64:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    1b66:	4b26      	ldr	r3, [pc, #152]	; (1c00 <system_clock_source_xosc32k_set_config+0xa8>)
    1b68:	469b      	mov	fp, r3
    1b6a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1b6c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1b6e:	7800      	ldrb	r0, [r0, #0]
    1b70:	4242      	negs	r2, r0
    1b72:	4142      	adcs	r2, r0
    1b74:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    1b76:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    1b78:	78ca      	ldrb	r2, [r1, #3]
    1b7a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1b7c:	790a      	ldrb	r2, [r1, #4]
    1b7e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1b80:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b82:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1b84:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    1b86:	688a      	ldr	r2, [r1, #8]
    1b88:	491e      	ldr	r1, [pc, #120]	; (1c04 <system_clock_source_xosc32k_set_config+0xac>)
    1b8a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1b8c:	2101      	movs	r1, #1
    1b8e:	464a      	mov	r2, r9
    1b90:	0092      	lsls	r2, r2, #2
    1b92:	4691      	mov	r9, r2
    1b94:	2204      	movs	r2, #4
    1b96:	4393      	bics	r3, r2
    1b98:	464a      	mov	r2, r9
    1b9a:	4313      	orrs	r3, r2
    1b9c:	4642      	mov	r2, r8
    1b9e:	400a      	ands	r2, r1
    1ba0:	00d2      	lsls	r2, r2, #3
    1ba2:	4690      	mov	r8, r2
    1ba4:	2208      	movs	r2, #8
    1ba6:	4393      	bics	r3, r2
    1ba8:	4642      	mov	r2, r8
    1baa:	4313      	orrs	r3, r2
    1bac:	4662      	mov	r2, ip
    1bae:	400a      	ands	r2, r1
    1bb0:	0112      	lsls	r2, r2, #4
    1bb2:	4694      	mov	ip, r2
    1bb4:	2210      	movs	r2, #16
    1bb6:	4393      	bics	r3, r2
    1bb8:	4662      	mov	r2, ip
    1bba:	4313      	orrs	r3, r2
    1bbc:	4008      	ands	r0, r1
    1bbe:	0140      	lsls	r0, r0, #5
    1bc0:	2220      	movs	r2, #32
    1bc2:	4393      	bics	r3, r2
    1bc4:	4303      	orrs	r3, r0
    1bc6:	400f      	ands	r7, r1
    1bc8:	01bf      	lsls	r7, r7, #6
    1bca:	2040      	movs	r0, #64	; 0x40
    1bcc:	4383      	bics	r3, r0
    1bce:	433b      	orrs	r3, r7
    1bd0:	400e      	ands	r6, r1
    1bd2:	01f6      	lsls	r6, r6, #7
    1bd4:	3040      	adds	r0, #64	; 0x40
    1bd6:	4383      	bics	r3, r0
    1bd8:	4333      	orrs	r3, r6
    1bda:	3879      	subs	r0, #121	; 0x79
    1bdc:	4005      	ands	r5, r0
    1bde:	022d      	lsls	r5, r5, #8
    1be0:	4809      	ldr	r0, [pc, #36]	; (1c08 <system_clock_source_xosc32k_set_config+0xb0>)
    1be2:	4003      	ands	r3, r0
    1be4:	432b      	orrs	r3, r5
    1be6:	4021      	ands	r1, r4
    1be8:	0309      	lsls	r1, r1, #12
    1bea:	4808      	ldr	r0, [pc, #32]	; (1c0c <system_clock_source_xosc32k_set_config+0xb4>)
    1bec:	4003      	ands	r3, r0
    1bee:	430b      	orrs	r3, r1
    1bf0:	465a      	mov	r2, fp
    1bf2:	8293      	strh	r3, [r2, #20]
}
    1bf4:	bc3c      	pop	{r2, r3, r4, r5}
    1bf6:	4690      	mov	r8, r2
    1bf8:	4699      	mov	r9, r3
    1bfa:	46a2      	mov	sl, r4
    1bfc:	46ab      	mov	fp, r5
    1bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c00:	40000800 	.word	0x40000800
    1c04:	2000028c 	.word	0x2000028c
    1c08:	fffff8ff 	.word	0xfffff8ff
    1c0c:	ffffefff 	.word	0xffffefff

00001c10 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1c10:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c12:	7a03      	ldrb	r3, [r0, #8]
    1c14:	069b      	lsls	r3, r3, #26
    1c16:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1c18:	8942      	ldrh	r2, [r0, #10]
    1c1a:	0592      	lsls	r2, r2, #22
    1c1c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1c1e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1c20:	4918      	ldr	r1, [pc, #96]	; (1c84 <system_clock_source_dfll_set_config+0x74>)
    1c22:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1c24:	7983      	ldrb	r3, [r0, #6]
    1c26:	79c2      	ldrb	r2, [r0, #7]
    1c28:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    1c2a:	8842      	ldrh	r2, [r0, #2]
    1c2c:	8884      	ldrh	r4, [r0, #4]
    1c2e:	4322      	orrs	r2, r4
    1c30:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1c32:	7842      	ldrb	r2, [r0, #1]
    1c34:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    1c36:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    1c38:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1c3a:	7803      	ldrb	r3, [r0, #0]
    1c3c:	2b04      	cmp	r3, #4
    1c3e:	d011      	beq.n	1c64 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1c40:	2b20      	cmp	r3, #32
    1c42:	d10e      	bne.n	1c62 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1c44:	7b03      	ldrb	r3, [r0, #12]
    1c46:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1c48:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1c4a:	4313      	orrs	r3, r2
    1c4c:	89c2      	ldrh	r2, [r0, #14]
    1c4e:	0412      	lsls	r2, r2, #16
    1c50:	490d      	ldr	r1, [pc, #52]	; (1c88 <system_clock_source_dfll_set_config+0x78>)
    1c52:	400a      	ands	r2, r1
    1c54:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1c56:	4a0b      	ldr	r2, [pc, #44]	; (1c84 <system_clock_source_dfll_set_config+0x74>)
    1c58:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1c5a:	6811      	ldr	r1, [r2, #0]
    1c5c:	4b0b      	ldr	r3, [pc, #44]	; (1c8c <system_clock_source_dfll_set_config+0x7c>)
    1c5e:	430b      	orrs	r3, r1
    1c60:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1c62:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1c64:	7b03      	ldrb	r3, [r0, #12]
    1c66:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1c68:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1c6a:	4313      	orrs	r3, r2
    1c6c:	89c2      	ldrh	r2, [r0, #14]
    1c6e:	0412      	lsls	r2, r2, #16
    1c70:	4905      	ldr	r1, [pc, #20]	; (1c88 <system_clock_source_dfll_set_config+0x78>)
    1c72:	400a      	ands	r2, r1
    1c74:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1c76:	4a03      	ldr	r2, [pc, #12]	; (1c84 <system_clock_source_dfll_set_config+0x74>)
    1c78:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1c7a:	6813      	ldr	r3, [r2, #0]
    1c7c:	2104      	movs	r1, #4
    1c7e:	430b      	orrs	r3, r1
    1c80:	6013      	str	r3, [r2, #0]
    1c82:	e7ee      	b.n	1c62 <system_clock_source_dfll_set_config+0x52>
    1c84:	2000028c 	.word	0x2000028c
    1c88:	03ff0000 	.word	0x03ff0000
    1c8c:	00000424 	.word	0x00000424

00001c90 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1c90:	2808      	cmp	r0, #8
    1c92:	d803      	bhi.n	1c9c <system_clock_source_enable+0xc>
    1c94:	0080      	lsls	r0, r0, #2
    1c96:	4b25      	ldr	r3, [pc, #148]	; (1d2c <system_clock_source_enable+0x9c>)
    1c98:	581b      	ldr	r3, [r3, r0]
    1c9a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1c9c:	2017      	movs	r0, #23
    1c9e:	e044      	b.n	1d2a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1ca0:	4a23      	ldr	r2, [pc, #140]	; (1d30 <system_clock_source_enable+0xa0>)
    1ca2:	6a13      	ldr	r3, [r2, #32]
    1ca4:	2102      	movs	r1, #2
    1ca6:	430b      	orrs	r3, r1
    1ca8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1caa:	2000      	movs	r0, #0
    1cac:	e03d      	b.n	1d2a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1cae:	4a20      	ldr	r2, [pc, #128]	; (1d30 <system_clock_source_enable+0xa0>)
    1cb0:	6993      	ldr	r3, [r2, #24]
    1cb2:	2102      	movs	r1, #2
    1cb4:	430b      	orrs	r3, r1
    1cb6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1cb8:	2000      	movs	r0, #0
		break;
    1cba:	e036      	b.n	1d2a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1cbc:	4a1c      	ldr	r2, [pc, #112]	; (1d30 <system_clock_source_enable+0xa0>)
    1cbe:	8a13      	ldrh	r3, [r2, #16]
    1cc0:	2102      	movs	r1, #2
    1cc2:	430b      	orrs	r3, r1
    1cc4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1cc6:	2000      	movs	r0, #0
		break;
    1cc8:	e02f      	b.n	1d2a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1cca:	4a19      	ldr	r2, [pc, #100]	; (1d30 <system_clock_source_enable+0xa0>)
    1ccc:	8a93      	ldrh	r3, [r2, #20]
    1cce:	2102      	movs	r1, #2
    1cd0:	430b      	orrs	r3, r1
    1cd2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1cd4:	2000      	movs	r0, #0
		break;
    1cd6:	e028      	b.n	1d2a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1cd8:	4916      	ldr	r1, [pc, #88]	; (1d34 <system_clock_source_enable+0xa4>)
    1cda:	680b      	ldr	r3, [r1, #0]
    1cdc:	2202      	movs	r2, #2
    1cde:	4313      	orrs	r3, r2
    1ce0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1ce2:	4b13      	ldr	r3, [pc, #76]	; (1d30 <system_clock_source_enable+0xa0>)
    1ce4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1ce6:	0019      	movs	r1, r3
    1ce8:	320e      	adds	r2, #14
    1cea:	68cb      	ldr	r3, [r1, #12]
    1cec:	421a      	tst	r2, r3
    1cee:	d0fc      	beq.n	1cea <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1cf0:	4a10      	ldr	r2, [pc, #64]	; (1d34 <system_clock_source_enable+0xa4>)
    1cf2:	6891      	ldr	r1, [r2, #8]
    1cf4:	4b0e      	ldr	r3, [pc, #56]	; (1d30 <system_clock_source_enable+0xa0>)
    1cf6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1cf8:	6852      	ldr	r2, [r2, #4]
    1cfa:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1cfc:	2200      	movs	r2, #0
    1cfe:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d00:	0019      	movs	r1, r3
    1d02:	3210      	adds	r2, #16
    1d04:	68cb      	ldr	r3, [r1, #12]
    1d06:	421a      	tst	r2, r3
    1d08:	d0fc      	beq.n	1d04 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d0a:	4b0a      	ldr	r3, [pc, #40]	; (1d34 <system_clock_source_enable+0xa4>)
    1d0c:	681b      	ldr	r3, [r3, #0]
    1d0e:	b29b      	uxth	r3, r3
    1d10:	4a07      	ldr	r2, [pc, #28]	; (1d30 <system_clock_source_enable+0xa0>)
    1d12:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1d14:	2000      	movs	r0, #0
    1d16:	e008      	b.n	1d2a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d18:	4905      	ldr	r1, [pc, #20]	; (1d30 <system_clock_source_enable+0xa0>)
    1d1a:	2244      	movs	r2, #68	; 0x44
    1d1c:	5c8b      	ldrb	r3, [r1, r2]
    1d1e:	2002      	movs	r0, #2
    1d20:	4303      	orrs	r3, r0
    1d22:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1d24:	2000      	movs	r0, #0
		break;
    1d26:	e000      	b.n	1d2a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1d28:	2000      	movs	r0, #0
}
    1d2a:	4770      	bx	lr
    1d2c:	00005398 	.word	0x00005398
    1d30:	40000800 	.word	0x40000800
    1d34:	2000028c 	.word	0x2000028c

00001d38 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1d38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d3a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1d3c:	22c2      	movs	r2, #194	; 0xc2
    1d3e:	00d2      	lsls	r2, r2, #3
    1d40:	4b47      	ldr	r3, [pc, #284]	; (1e60 <system_clock_init+0x128>)
    1d42:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1d44:	4947      	ldr	r1, [pc, #284]	; (1e64 <system_clock_init+0x12c>)
    1d46:	684b      	ldr	r3, [r1, #4]
    1d48:	221e      	movs	r2, #30
    1d4a:	4393      	bics	r3, r2
    1d4c:	3a1c      	subs	r2, #28
    1d4e:	4313      	orrs	r3, r2
    1d50:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1d52:	ab01      	add	r3, sp, #4
    1d54:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1d56:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1d58:	4d43      	ldr	r5, [pc, #268]	; (1e68 <system_clock_init+0x130>)
    1d5a:	b2e0      	uxtb	r0, r4
    1d5c:	a901      	add	r1, sp, #4
    1d5e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1d60:	3401      	adds	r4, #1
    1d62:	2c25      	cmp	r4, #37	; 0x25
    1d64:	d1f9      	bne.n	1d5a <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1d66:	a80a      	add	r0, sp, #40	; 0x28
    1d68:	2300      	movs	r3, #0
    1d6a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1d6c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1d6e:	2280      	movs	r2, #128	; 0x80
    1d70:	0212      	lsls	r2, r2, #8
    1d72:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1d74:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1d76:	2201      	movs	r2, #1
    1d78:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1d7a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1d7c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1d7e:	3205      	adds	r2, #5
    1d80:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1d82:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1d84:	4b39      	ldr	r3, [pc, #228]	; (1e6c <system_clock_init+0x134>)
    1d86:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1d88:	2005      	movs	r0, #5
    1d8a:	4b39      	ldr	r3, [pc, #228]	; (1e70 <system_clock_init+0x138>)
    1d8c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1d8e:	4934      	ldr	r1, [pc, #208]	; (1e60 <system_clock_init+0x128>)
    1d90:	2202      	movs	r2, #2
    1d92:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1d94:	421a      	tst	r2, r3
    1d96:	d0fc      	beq.n	1d92 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1d98:	4a31      	ldr	r2, [pc, #196]	; (1e60 <system_clock_init+0x128>)
    1d9a:	8a93      	ldrh	r3, [r2, #20]
    1d9c:	2180      	movs	r1, #128	; 0x80
    1d9e:	430b      	orrs	r3, r1
    1da0:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1da2:	ab05      	add	r3, sp, #20
    1da4:	2100      	movs	r1, #0
    1da6:	2200      	movs	r2, #0
    1da8:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1daa:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1dac:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1dae:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1db0:	313f      	adds	r1, #63	; 0x3f
    1db2:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1db4:	393b      	subs	r1, #59	; 0x3b
    1db6:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1db8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1dba:	4b2e      	ldr	r3, [pc, #184]	; (1e74 <system_clock_init+0x13c>)
    1dbc:	681b      	ldr	r3, [r3, #0]
    1dbe:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1dc0:	2b3f      	cmp	r3, #63	; 0x3f
    1dc2:	d04b      	beq.n	1e5c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1dc4:	a805      	add	r0, sp, #20
    1dc6:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1dc8:	23b7      	movs	r3, #183	; 0xb7
    1dca:	00db      	lsls	r3, r3, #3
    1dcc:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1dce:	2307      	movs	r3, #7
    1dd0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1dd2:	3338      	adds	r3, #56	; 0x38
    1dd4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1dd6:	4b28      	ldr	r3, [pc, #160]	; (1e78 <system_clock_init+0x140>)
    1dd8:	4798      	blx	r3
	config->run_in_standby  = false;
    1dda:	a804      	add	r0, sp, #16
    1ddc:	2500      	movs	r5, #0
    1dde:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1de0:	2601      	movs	r6, #1
    1de2:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1de4:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1de6:	4b25      	ldr	r3, [pc, #148]	; (1e7c <system_clock_init+0x144>)
    1de8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1dea:	2006      	movs	r0, #6
    1dec:	4f20      	ldr	r7, [pc, #128]	; (1e70 <system_clock_init+0x138>)
    1dee:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1df0:	4b23      	ldr	r3, [pc, #140]	; (1e80 <system_clock_init+0x148>)
    1df2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1df4:	ac01      	add	r4, sp, #4
    1df6:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1df8:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1dfa:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1dfc:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1dfe:	2305      	movs	r3, #5
    1e00:	7023      	strb	r3, [r4, #0]
    1e02:	0021      	movs	r1, r4
    1e04:	2001      	movs	r0, #1
    1e06:	4b1f      	ldr	r3, [pc, #124]	; (1e84 <system_clock_init+0x14c>)
    1e08:	4798      	blx	r3
    1e0a:	2001      	movs	r0, #1
    1e0c:	4b1e      	ldr	r3, [pc, #120]	; (1e88 <system_clock_init+0x150>)
    1e0e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1e10:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1e12:	0021      	movs	r1, r4
    1e14:	2000      	movs	r0, #0
    1e16:	4b14      	ldr	r3, [pc, #80]	; (1e68 <system_clock_init+0x130>)
    1e18:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1e1a:	2000      	movs	r0, #0
    1e1c:	4b1b      	ldr	r3, [pc, #108]	; (1e8c <system_clock_init+0x154>)
    1e1e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1e20:	2007      	movs	r0, #7
    1e22:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1e24:	490e      	ldr	r1, [pc, #56]	; (1e60 <system_clock_init+0x128>)
    1e26:	22d0      	movs	r2, #208	; 0xd0
    1e28:	68cb      	ldr	r3, [r1, #12]
    1e2a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1e2c:	2bd0      	cmp	r3, #208	; 0xd0
    1e2e:	d1fb      	bne.n	1e28 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    1e30:	4a17      	ldr	r2, [pc, #92]	; (1e90 <system_clock_init+0x158>)
    1e32:	2300      	movs	r3, #0
    1e34:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1e36:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1e38:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1e3a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1e3c:	a901      	add	r1, sp, #4
    1e3e:	2201      	movs	r2, #1
    1e40:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    1e42:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1e44:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1e46:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1e48:	3307      	adds	r3, #7
    1e4a:	700b      	strb	r3, [r1, #0]
    1e4c:	2000      	movs	r0, #0
    1e4e:	4b0d      	ldr	r3, [pc, #52]	; (1e84 <system_clock_init+0x14c>)
    1e50:	4798      	blx	r3
    1e52:	2000      	movs	r0, #0
    1e54:	4b0c      	ldr	r3, [pc, #48]	; (1e88 <system_clock_init+0x150>)
    1e56:	4798      	blx	r3
#endif
}
    1e58:	b00f      	add	sp, #60	; 0x3c
    1e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1e5c:	3b20      	subs	r3, #32
    1e5e:	e7b1      	b.n	1dc4 <system_clock_init+0x8c>
    1e60:	40000800 	.word	0x40000800
    1e64:	41004000 	.word	0x41004000
    1e68:	000020cd 	.word	0x000020cd
    1e6c:	00001b59 	.word	0x00001b59
    1e70:	00001c91 	.word	0x00001c91
    1e74:	00806024 	.word	0x00806024
    1e78:	00001c11 	.word	0x00001c11
    1e7c:	00001b1d 	.word	0x00001b1d
    1e80:	00001e95 	.word	0x00001e95
    1e84:	00001eb9 	.word	0x00001eb9
    1e88:	00001f71 	.word	0x00001f71
    1e8c:	00002041 	.word	0x00002041
    1e90:	40000400 	.word	0x40000400

00001e94 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1e94:	4a06      	ldr	r2, [pc, #24]	; (1eb0 <system_gclk_init+0x1c>)
    1e96:	6993      	ldr	r3, [r2, #24]
    1e98:	2108      	movs	r1, #8
    1e9a:	430b      	orrs	r3, r1
    1e9c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1e9e:	2201      	movs	r2, #1
    1ea0:	4b04      	ldr	r3, [pc, #16]	; (1eb4 <system_gclk_init+0x20>)
    1ea2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1ea4:	0019      	movs	r1, r3
    1ea6:	780b      	ldrb	r3, [r1, #0]
    1ea8:	4213      	tst	r3, r2
    1eaa:	d1fc      	bne.n	1ea6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1eac:	4770      	bx	lr
    1eae:	46c0      	nop			; (mov r8, r8)
    1eb0:	40000400 	.word	0x40000400
    1eb4:	40000c00 	.word	0x40000c00

00001eb8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1eb8:	b570      	push	{r4, r5, r6, lr}
    1eba:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1ebc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1ebe:	780d      	ldrb	r5, [r1, #0]
    1ec0:	022d      	lsls	r5, r5, #8
    1ec2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1ec4:	784b      	ldrb	r3, [r1, #1]
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	d002      	beq.n	1ed0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1eca:	2380      	movs	r3, #128	; 0x80
    1ecc:	02db      	lsls	r3, r3, #11
    1ece:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1ed0:	7a4b      	ldrb	r3, [r1, #9]
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	d002      	beq.n	1edc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1ed6:	2380      	movs	r3, #128	; 0x80
    1ed8:	031b      	lsls	r3, r3, #12
    1eda:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1edc:	6848      	ldr	r0, [r1, #4]
    1ede:	2801      	cmp	r0, #1
    1ee0:	d910      	bls.n	1f04 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1ee2:	1e43      	subs	r3, r0, #1
    1ee4:	4218      	tst	r0, r3
    1ee6:	d134      	bne.n	1f52 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1ee8:	2802      	cmp	r0, #2
    1eea:	d930      	bls.n	1f4e <system_gclk_gen_set_config+0x96>
    1eec:	2302      	movs	r3, #2
    1eee:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1ef0:	3201      	adds	r2, #1
						mask <<= 1) {
    1ef2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1ef4:	4298      	cmp	r0, r3
    1ef6:	d8fb      	bhi.n	1ef0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1ef8:	0212      	lsls	r2, r2, #8
    1efa:	4332      	orrs	r2, r6
    1efc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1efe:	2380      	movs	r3, #128	; 0x80
    1f00:	035b      	lsls	r3, r3, #13
    1f02:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1f04:	7a0b      	ldrb	r3, [r1, #8]
    1f06:	2b00      	cmp	r3, #0
    1f08:	d002      	beq.n	1f10 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1f0a:	2380      	movs	r3, #128	; 0x80
    1f0c:	039b      	lsls	r3, r3, #14
    1f0e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f10:	4a13      	ldr	r2, [pc, #76]	; (1f60 <system_gclk_gen_set_config+0xa8>)
    1f12:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1f14:	b25b      	sxtb	r3, r3
    1f16:	2b00      	cmp	r3, #0
    1f18:	dbfb      	blt.n	1f12 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1f1a:	4b12      	ldr	r3, [pc, #72]	; (1f64 <system_gclk_gen_set_config+0xac>)
    1f1c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1f1e:	4b12      	ldr	r3, [pc, #72]	; (1f68 <system_gclk_gen_set_config+0xb0>)
    1f20:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f22:	4a0f      	ldr	r2, [pc, #60]	; (1f60 <system_gclk_gen_set_config+0xa8>)
    1f24:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1f26:	b25b      	sxtb	r3, r3
    1f28:	2b00      	cmp	r3, #0
    1f2a:	dbfb      	blt.n	1f24 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1f2c:	4b0c      	ldr	r3, [pc, #48]	; (1f60 <system_gclk_gen_set_config+0xa8>)
    1f2e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f30:	001a      	movs	r2, r3
    1f32:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1f34:	b25b      	sxtb	r3, r3
    1f36:	2b00      	cmp	r3, #0
    1f38:	dbfb      	blt.n	1f32 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1f3a:	4a09      	ldr	r2, [pc, #36]	; (1f60 <system_gclk_gen_set_config+0xa8>)
    1f3c:	6853      	ldr	r3, [r2, #4]
    1f3e:	2180      	movs	r1, #128	; 0x80
    1f40:	0249      	lsls	r1, r1, #9
    1f42:	400b      	ands	r3, r1
    1f44:	431d      	orrs	r5, r3
    1f46:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1f48:	4b08      	ldr	r3, [pc, #32]	; (1f6c <system_gclk_gen_set_config+0xb4>)
    1f4a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f4c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1f4e:	2200      	movs	r2, #0
    1f50:	e7d2      	b.n	1ef8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1f52:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1f54:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1f56:	2380      	movs	r3, #128	; 0x80
    1f58:	029b      	lsls	r3, r3, #10
    1f5a:	431d      	orrs	r5, r3
    1f5c:	e7d2      	b.n	1f04 <system_gclk_gen_set_config+0x4c>
    1f5e:	46c0      	nop			; (mov r8, r8)
    1f60:	40000c00 	.word	0x40000c00
    1f64:	00000a61 	.word	0x00000a61
    1f68:	40000c08 	.word	0x40000c08
    1f6c:	00000aa1 	.word	0x00000aa1

00001f70 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1f70:	b510      	push	{r4, lr}
    1f72:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f74:	4a0b      	ldr	r2, [pc, #44]	; (1fa4 <system_gclk_gen_enable+0x34>)
    1f76:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f78:	b25b      	sxtb	r3, r3
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	dbfb      	blt.n	1f76 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1f7e:	4b0a      	ldr	r3, [pc, #40]	; (1fa8 <system_gclk_gen_enable+0x38>)
    1f80:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f82:	4b0a      	ldr	r3, [pc, #40]	; (1fac <system_gclk_gen_enable+0x3c>)
    1f84:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f86:	4a07      	ldr	r2, [pc, #28]	; (1fa4 <system_gclk_gen_enable+0x34>)
    1f88:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1f8a:	b25b      	sxtb	r3, r3
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	dbfb      	blt.n	1f88 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1f90:	4a04      	ldr	r2, [pc, #16]	; (1fa4 <system_gclk_gen_enable+0x34>)
    1f92:	6851      	ldr	r1, [r2, #4]
    1f94:	2380      	movs	r3, #128	; 0x80
    1f96:	025b      	lsls	r3, r3, #9
    1f98:	430b      	orrs	r3, r1
    1f9a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1f9c:	4b04      	ldr	r3, [pc, #16]	; (1fb0 <system_gclk_gen_enable+0x40>)
    1f9e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1fa0:	bd10      	pop	{r4, pc}
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	40000c00 	.word	0x40000c00
    1fa8:	00000a61 	.word	0x00000a61
    1fac:	40000c04 	.word	0x40000c04
    1fb0:	00000aa1 	.word	0x00000aa1

00001fb4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1fb4:	b570      	push	{r4, r5, r6, lr}
    1fb6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fb8:	4a1a      	ldr	r2, [pc, #104]	; (2024 <STACK_SIZE+0x24>)
    1fba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1fbc:	b25b      	sxtb	r3, r3
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	dbfb      	blt.n	1fba <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1fc2:	4b19      	ldr	r3, [pc, #100]	; (2028 <STACK_SIZE+0x28>)
    1fc4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fc6:	4b19      	ldr	r3, [pc, #100]	; (202c <STACK_SIZE+0x2c>)
    1fc8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fca:	4a16      	ldr	r2, [pc, #88]	; (2024 <STACK_SIZE+0x24>)
    1fcc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1fce:	b25b      	sxtb	r3, r3
    1fd0:	2b00      	cmp	r3, #0
    1fd2:	dbfb      	blt.n	1fcc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1fd4:	4e13      	ldr	r6, [pc, #76]	; (2024 <STACK_SIZE+0x24>)
    1fd6:	6870      	ldr	r0, [r6, #4]
    1fd8:	04c0      	lsls	r0, r0, #19
    1fda:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1fdc:	4b14      	ldr	r3, [pc, #80]	; (2030 <STACK_SIZE+0x30>)
    1fde:	4798      	blx	r3
    1fe0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fe2:	4b12      	ldr	r3, [pc, #72]	; (202c <STACK_SIZE+0x2c>)
    1fe4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1fe6:	6876      	ldr	r6, [r6, #4]
    1fe8:	02f6      	lsls	r6, r6, #11
    1fea:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fec:	4b11      	ldr	r3, [pc, #68]	; (2034 <STACK_SIZE+0x34>)
    1fee:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ff0:	4a0c      	ldr	r2, [pc, #48]	; (2024 <STACK_SIZE+0x24>)
    1ff2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ff4:	b25b      	sxtb	r3, r3
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	dbfb      	blt.n	1ff2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1ffa:	4b0a      	ldr	r3, [pc, #40]	; (2024 <STACK_SIZE+0x24>)
    1ffc:	689c      	ldr	r4, [r3, #8]
    1ffe:	0224      	lsls	r4, r4, #8
    2000:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2002:	4b0d      	ldr	r3, [pc, #52]	; (2038 <STACK_SIZE+0x38>)
    2004:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2006:	2e00      	cmp	r6, #0
    2008:	d107      	bne.n	201a <STACK_SIZE+0x1a>
    200a:	2c01      	cmp	r4, #1
    200c:	d907      	bls.n	201e <STACK_SIZE+0x1e>
		gen_input_hz /= divider;
    200e:	0021      	movs	r1, r4
    2010:	0028      	movs	r0, r5
    2012:	4b0a      	ldr	r3, [pc, #40]	; (203c <STACK_SIZE+0x3c>)
    2014:	4798      	blx	r3
    2016:	0005      	movs	r5, r0
    2018:	e001      	b.n	201e <STACK_SIZE+0x1e>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    201a:	3401      	adds	r4, #1
    201c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    201e:	0028      	movs	r0, r5
    2020:	bd70      	pop	{r4, r5, r6, pc}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	40000c00 	.word	0x40000c00
    2028:	00000a61 	.word	0x00000a61
    202c:	40000c04 	.word	0x40000c04
    2030:	00001a89 	.word	0x00001a89
    2034:	40000c08 	.word	0x40000c08
    2038:	00000aa1 	.word	0x00000aa1
    203c:	0000374d 	.word	0x0000374d

00002040 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2040:	b510      	push	{r4, lr}
    2042:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2044:	4b06      	ldr	r3, [pc, #24]	; (2060 <system_gclk_chan_enable+0x20>)
    2046:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2048:	4b06      	ldr	r3, [pc, #24]	; (2064 <system_gclk_chan_enable+0x24>)
    204a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    204c:	4a06      	ldr	r2, [pc, #24]	; (2068 <system_gclk_chan_enable+0x28>)
    204e:	8853      	ldrh	r3, [r2, #2]
    2050:	2180      	movs	r1, #128	; 0x80
    2052:	01c9      	lsls	r1, r1, #7
    2054:	430b      	orrs	r3, r1
    2056:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2058:	4b04      	ldr	r3, [pc, #16]	; (206c <system_gclk_chan_enable+0x2c>)
    205a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    205c:	bd10      	pop	{r4, pc}
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	00000a61 	.word	0x00000a61
    2064:	40000c02 	.word	0x40000c02
    2068:	40000c00 	.word	0x40000c00
    206c:	00000aa1 	.word	0x00000aa1

00002070 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2070:	b510      	push	{r4, lr}
    2072:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2074:	4b0f      	ldr	r3, [pc, #60]	; (20b4 <system_gclk_chan_disable+0x44>)
    2076:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2078:	4b0f      	ldr	r3, [pc, #60]	; (20b8 <system_gclk_chan_disable+0x48>)
    207a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    207c:	4a0f      	ldr	r2, [pc, #60]	; (20bc <system_gclk_chan_disable+0x4c>)
    207e:	8853      	ldrh	r3, [r2, #2]
    2080:	051b      	lsls	r3, r3, #20
    2082:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2084:	8853      	ldrh	r3, [r2, #2]
    2086:	490e      	ldr	r1, [pc, #56]	; (20c0 <system_gclk_chan_disable+0x50>)
    2088:	400b      	ands	r3, r1
    208a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    208c:	8853      	ldrh	r3, [r2, #2]
    208e:	490d      	ldr	r1, [pc, #52]	; (20c4 <system_gclk_chan_disable+0x54>)
    2090:	400b      	ands	r3, r1
    2092:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2094:	0011      	movs	r1, r2
    2096:	2280      	movs	r2, #128	; 0x80
    2098:	01d2      	lsls	r2, r2, #7
    209a:	884b      	ldrh	r3, [r1, #2]
    209c:	4213      	tst	r3, r2
    209e:	d1fc      	bne.n	209a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    20a0:	4906      	ldr	r1, [pc, #24]	; (20bc <system_gclk_chan_disable+0x4c>)
    20a2:	884a      	ldrh	r2, [r1, #2]
    20a4:	0203      	lsls	r3, r0, #8
    20a6:	4806      	ldr	r0, [pc, #24]	; (20c0 <system_gclk_chan_disable+0x50>)
    20a8:	4002      	ands	r2, r0
    20aa:	4313      	orrs	r3, r2
    20ac:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    20ae:	4b06      	ldr	r3, [pc, #24]	; (20c8 <system_gclk_chan_disable+0x58>)
    20b0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    20b2:	bd10      	pop	{r4, pc}
    20b4:	00000a61 	.word	0x00000a61
    20b8:	40000c02 	.word	0x40000c02
    20bc:	40000c00 	.word	0x40000c00
    20c0:	fffff0ff 	.word	0xfffff0ff
    20c4:	ffffbfff 	.word	0xffffbfff
    20c8:	00000aa1 	.word	0x00000aa1

000020cc <system_gclk_chan_set_config>:
{
    20cc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    20ce:	780c      	ldrb	r4, [r1, #0]
    20d0:	0224      	lsls	r4, r4, #8
    20d2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    20d4:	4b02      	ldr	r3, [pc, #8]	; (20e0 <system_gclk_chan_set_config+0x14>)
    20d6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    20d8:	b2a4      	uxth	r4, r4
    20da:	4b02      	ldr	r3, [pc, #8]	; (20e4 <system_gclk_chan_set_config+0x18>)
    20dc:	805c      	strh	r4, [r3, #2]
}
    20de:	bd10      	pop	{r4, pc}
    20e0:	00002071 	.word	0x00002071
    20e4:	40000c00 	.word	0x40000c00

000020e8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    20e8:	b510      	push	{r4, lr}
    20ea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    20ec:	4b06      	ldr	r3, [pc, #24]	; (2108 <system_gclk_chan_get_hz+0x20>)
    20ee:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20f0:	4b06      	ldr	r3, [pc, #24]	; (210c <system_gclk_chan_get_hz+0x24>)
    20f2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    20f4:	4b06      	ldr	r3, [pc, #24]	; (2110 <system_gclk_chan_get_hz+0x28>)
    20f6:	885c      	ldrh	r4, [r3, #2]
    20f8:	0524      	lsls	r4, r4, #20
    20fa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    20fc:	4b05      	ldr	r3, [pc, #20]	; (2114 <system_gclk_chan_get_hz+0x2c>)
    20fe:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2100:	0020      	movs	r0, r4
    2102:	4b05      	ldr	r3, [pc, #20]	; (2118 <system_gclk_chan_get_hz+0x30>)
    2104:	4798      	blx	r3
}
    2106:	bd10      	pop	{r4, pc}
    2108:	00000a61 	.word	0x00000a61
    210c:	40000c02 	.word	0x40000c02
    2110:	40000c00 	.word	0x40000c00
    2114:	00000aa1 	.word	0x00000aa1
    2118:	00001fb5 	.word	0x00001fb5

0000211c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    211c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    211e:	78d3      	ldrb	r3, [r2, #3]
    2120:	2b00      	cmp	r3, #0
    2122:	d135      	bne.n	2190 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2124:	7813      	ldrb	r3, [r2, #0]
    2126:	2b80      	cmp	r3, #128	; 0x80
    2128:	d029      	beq.n	217e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    212a:	061b      	lsls	r3, r3, #24
    212c:	2480      	movs	r4, #128	; 0x80
    212e:	0264      	lsls	r4, r4, #9
    2130:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2132:	7854      	ldrb	r4, [r2, #1]
    2134:	2502      	movs	r5, #2
    2136:	43ac      	bics	r4, r5
    2138:	d106      	bne.n	2148 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    213a:	7894      	ldrb	r4, [r2, #2]
    213c:	2c00      	cmp	r4, #0
    213e:	d120      	bne.n	2182 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2140:	2480      	movs	r4, #128	; 0x80
    2142:	02a4      	lsls	r4, r4, #10
    2144:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2146:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2148:	7854      	ldrb	r4, [r2, #1]
    214a:	3c01      	subs	r4, #1
    214c:	2c01      	cmp	r4, #1
    214e:	d91c      	bls.n	218a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2150:	040d      	lsls	r5, r1, #16
    2152:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2154:	24a0      	movs	r4, #160	; 0xa0
    2156:	05e4      	lsls	r4, r4, #23
    2158:	432c      	orrs	r4, r5
    215a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    215c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    215e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2160:	24d0      	movs	r4, #208	; 0xd0
    2162:	0624      	lsls	r4, r4, #24
    2164:	432c      	orrs	r4, r5
    2166:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2168:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    216a:	78d4      	ldrb	r4, [r2, #3]
    216c:	2c00      	cmp	r4, #0
    216e:	d122      	bne.n	21b6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2170:	035b      	lsls	r3, r3, #13
    2172:	d51c      	bpl.n	21ae <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2174:	7893      	ldrb	r3, [r2, #2]
    2176:	2b01      	cmp	r3, #1
    2178:	d01e      	beq.n	21b8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    217a:	6141      	str	r1, [r0, #20]
    217c:	e017      	b.n	21ae <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    217e:	2300      	movs	r3, #0
    2180:	e7d7      	b.n	2132 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2182:	24c0      	movs	r4, #192	; 0xc0
    2184:	02e4      	lsls	r4, r4, #11
    2186:	4323      	orrs	r3, r4
    2188:	e7dd      	b.n	2146 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    218a:	4c0d      	ldr	r4, [pc, #52]	; (21c0 <_system_pinmux_config+0xa4>)
    218c:	4023      	ands	r3, r4
    218e:	e7df      	b.n	2150 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2190:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2192:	040c      	lsls	r4, r1, #16
    2194:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2196:	23a0      	movs	r3, #160	; 0xa0
    2198:	05db      	lsls	r3, r3, #23
    219a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    219c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    219e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    21a0:	23d0      	movs	r3, #208	; 0xd0
    21a2:	061b      	lsls	r3, r3, #24
    21a4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21a6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    21a8:	78d3      	ldrb	r3, [r2, #3]
    21aa:	2b00      	cmp	r3, #0
    21ac:	d103      	bne.n	21b6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21ae:	7853      	ldrb	r3, [r2, #1]
    21b0:	3b01      	subs	r3, #1
    21b2:	2b01      	cmp	r3, #1
    21b4:	d902      	bls.n	21bc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    21b6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    21b8:	6181      	str	r1, [r0, #24]
    21ba:	e7f8      	b.n	21ae <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    21bc:	6081      	str	r1, [r0, #8]
}
    21be:	e7fa      	b.n	21b6 <_system_pinmux_config+0x9a>
    21c0:	fffbffff 	.word	0xfffbffff

000021c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    21c4:	b510      	push	{r4, lr}
    21c6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    21c8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    21ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    21cc:	2900      	cmp	r1, #0
    21ce:	d104      	bne.n	21da <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    21d0:	0943      	lsrs	r3, r0, #5
    21d2:	01db      	lsls	r3, r3, #7
    21d4:	4905      	ldr	r1, [pc, #20]	; (21ec <system_pinmux_pin_set_config+0x28>)
    21d6:	468c      	mov	ip, r1
    21d8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    21da:	241f      	movs	r4, #31
    21dc:	4020      	ands	r0, r4
    21de:	2101      	movs	r1, #1
    21e0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    21e2:	0018      	movs	r0, r3
    21e4:	4b02      	ldr	r3, [pc, #8]	; (21f0 <system_pinmux_pin_set_config+0x2c>)
    21e6:	4798      	blx	r3
}
    21e8:	bd10      	pop	{r4, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	41004400 	.word	0x41004400
    21f0:	0000211d 	.word	0x0000211d

000021f4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    21f4:	4770      	bx	lr
	...

000021f8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    21f8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    21fa:	4b05      	ldr	r3, [pc, #20]	; (2210 <system_init+0x18>)
    21fc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    21fe:	4b05      	ldr	r3, [pc, #20]	; (2214 <system_init+0x1c>)
    2200:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2202:	4b05      	ldr	r3, [pc, #20]	; (2218 <system_init+0x20>)
    2204:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2206:	4b05      	ldr	r3, [pc, #20]	; (221c <system_init+0x24>)
    2208:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    220a:	4b05      	ldr	r3, [pc, #20]	; (2220 <system_init+0x28>)
    220c:	4798      	blx	r3
}
    220e:	bd10      	pop	{r4, pc}
    2210:	00001d39 	.word	0x00001d39
    2214:	00000ad1 	.word	0x00000ad1
    2218:	000021f5 	.word	0x000021f5
    221c:	000021f5 	.word	0x000021f5
    2220:	000021f5 	.word	0x000021f5

00002224 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2224:	e7fe      	b.n	2224 <Dummy_Handler>
	...

00002228 <Reset_Handler>:
{
    2228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    222a:	4a2a      	ldr	r2, [pc, #168]	; (22d4 <Reset_Handler+0xac>)
    222c:	4b2a      	ldr	r3, [pc, #168]	; (22d8 <Reset_Handler+0xb0>)
    222e:	429a      	cmp	r2, r3
    2230:	d011      	beq.n	2256 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2232:	001a      	movs	r2, r3
    2234:	4b29      	ldr	r3, [pc, #164]	; (22dc <Reset_Handler+0xb4>)
    2236:	429a      	cmp	r2, r3
    2238:	d20d      	bcs.n	2256 <Reset_Handler+0x2e>
    223a:	4a29      	ldr	r2, [pc, #164]	; (22e0 <Reset_Handler+0xb8>)
    223c:	3303      	adds	r3, #3
    223e:	1a9b      	subs	r3, r3, r2
    2240:	089b      	lsrs	r3, r3, #2
    2242:	3301      	adds	r3, #1
    2244:	009b      	lsls	r3, r3, #2
    2246:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2248:	4823      	ldr	r0, [pc, #140]	; (22d8 <Reset_Handler+0xb0>)
    224a:	4922      	ldr	r1, [pc, #136]	; (22d4 <Reset_Handler+0xac>)
    224c:	588c      	ldr	r4, [r1, r2]
    224e:	5084      	str	r4, [r0, r2]
    2250:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2252:	429a      	cmp	r2, r3
    2254:	d1fa      	bne.n	224c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2256:	4a23      	ldr	r2, [pc, #140]	; (22e4 <Reset_Handler+0xbc>)
    2258:	4b23      	ldr	r3, [pc, #140]	; (22e8 <Reset_Handler+0xc0>)
    225a:	429a      	cmp	r2, r3
    225c:	d20a      	bcs.n	2274 <Reset_Handler+0x4c>
    225e:	43d3      	mvns	r3, r2
    2260:	4921      	ldr	r1, [pc, #132]	; (22e8 <Reset_Handler+0xc0>)
    2262:	185b      	adds	r3, r3, r1
    2264:	2103      	movs	r1, #3
    2266:	438b      	bics	r3, r1
    2268:	3304      	adds	r3, #4
    226a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    226c:	2100      	movs	r1, #0
    226e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2270:	4293      	cmp	r3, r2
    2272:	d1fc      	bne.n	226e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2274:	4a1d      	ldr	r2, [pc, #116]	; (22ec <Reset_Handler+0xc4>)
    2276:	21ff      	movs	r1, #255	; 0xff
    2278:	4b1d      	ldr	r3, [pc, #116]	; (22f0 <Reset_Handler+0xc8>)
    227a:	438b      	bics	r3, r1
    227c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    227e:	39fd      	subs	r1, #253	; 0xfd
    2280:	2390      	movs	r3, #144	; 0x90
    2282:	005b      	lsls	r3, r3, #1
    2284:	4a1b      	ldr	r2, [pc, #108]	; (22f4 <Reset_Handler+0xcc>)
    2286:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2288:	4a1b      	ldr	r2, [pc, #108]	; (22f8 <Reset_Handler+0xd0>)
    228a:	78d3      	ldrb	r3, [r2, #3]
    228c:	2503      	movs	r5, #3
    228e:	43ab      	bics	r3, r5
    2290:	2402      	movs	r4, #2
    2292:	4323      	orrs	r3, r4
    2294:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2296:	78d3      	ldrb	r3, [r2, #3]
    2298:	270c      	movs	r7, #12
    229a:	43bb      	bics	r3, r7
    229c:	2608      	movs	r6, #8
    229e:	4333      	orrs	r3, r6
    22a0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    22a2:	4b16      	ldr	r3, [pc, #88]	; (22fc <Reset_Handler+0xd4>)
    22a4:	7b98      	ldrb	r0, [r3, #14]
    22a6:	2230      	movs	r2, #48	; 0x30
    22a8:	4390      	bics	r0, r2
    22aa:	2220      	movs	r2, #32
    22ac:	4310      	orrs	r0, r2
    22ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    22b0:	7b99      	ldrb	r1, [r3, #14]
    22b2:	43b9      	bics	r1, r7
    22b4:	4331      	orrs	r1, r6
    22b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    22b8:	7b9a      	ldrb	r2, [r3, #14]
    22ba:	43aa      	bics	r2, r5
    22bc:	4322      	orrs	r2, r4
    22be:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    22c0:	4a0f      	ldr	r2, [pc, #60]	; (2300 <Reset_Handler+0xd8>)
    22c2:	6853      	ldr	r3, [r2, #4]
    22c4:	2180      	movs	r1, #128	; 0x80
    22c6:	430b      	orrs	r3, r1
    22c8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    22ca:	4b0e      	ldr	r3, [pc, #56]	; (2304 <Reset_Handler+0xdc>)
    22cc:	4798      	blx	r3
        main();
    22ce:	4b0e      	ldr	r3, [pc, #56]	; (2308 <Reset_Handler+0xe0>)
    22d0:	4798      	blx	r3
    22d2:	e7fe      	b.n	22d2 <Reset_Handler+0xaa>
    22d4:	00007040 	.word	0x00007040
    22d8:	20000000 	.word	0x20000000
    22dc:	200001c8 	.word	0x200001c8
    22e0:	20000004 	.word	0x20000004
    22e4:	200001c8 	.word	0x200001c8
    22e8:	20000ae0 	.word	0x20000ae0
    22ec:	e000ed00 	.word	0xe000ed00
    22f0:	00000000 	.word	0x00000000
    22f4:	41007000 	.word	0x41007000
    22f8:	41005000 	.word	0x41005000
    22fc:	41004800 	.word	0x41004800
    2300:	41004000 	.word	0x41004000
    2304:	00003a8d 	.word	0x00003a8d
    2308:	00003691 	.word	0x00003691

0000230c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    230c:	b5f0      	push	{r4, r5, r6, r7, lr}
    230e:	46c6      	mov	lr, r8
    2310:	b500      	push	{lr}
    2312:	000c      	movs	r4, r1
    2314:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2316:	2800      	cmp	r0, #0
    2318:	d10f      	bne.n	233a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    231a:	2a00      	cmp	r2, #0
    231c:	dd11      	ble.n	2342 <_read+0x36>
    231e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2320:	4e09      	ldr	r6, [pc, #36]	; (2348 <_read+0x3c>)
    2322:	4d0a      	ldr	r5, [pc, #40]	; (234c <_read+0x40>)
    2324:	6830      	ldr	r0, [r6, #0]
    2326:	0021      	movs	r1, r4
    2328:	682b      	ldr	r3, [r5, #0]
    232a:	4798      	blx	r3
		ptr++;
    232c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    232e:	42bc      	cmp	r4, r7
    2330:	d1f8      	bne.n	2324 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2332:	4640      	mov	r0, r8
    2334:	bc04      	pop	{r2}
    2336:	4690      	mov	r8, r2
    2338:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    233a:	2301      	movs	r3, #1
    233c:	425b      	negs	r3, r3
    233e:	4698      	mov	r8, r3
    2340:	e7f7      	b.n	2332 <_read+0x26>
	for (; len > 0; --len) {
    2342:	4680      	mov	r8, r0
    2344:	e7f5      	b.n	2332 <_read+0x26>
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	200002f4 	.word	0x200002f4
    234c:	200002ec 	.word	0x200002ec

00002350 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2350:	b5f0      	push	{r4, r5, r6, r7, lr}
    2352:	46c6      	mov	lr, r8
    2354:	b500      	push	{lr}
    2356:	000e      	movs	r6, r1
    2358:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    235a:	3801      	subs	r0, #1
    235c:	2802      	cmp	r0, #2
    235e:	d810      	bhi.n	2382 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2360:	2a00      	cmp	r2, #0
    2362:	d011      	beq.n	2388 <_write+0x38>
    2364:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    2366:	4b0c      	ldr	r3, [pc, #48]	; (2398 <_write+0x48>)
    2368:	4698      	mov	r8, r3
    236a:	4f0c      	ldr	r7, [pc, #48]	; (239c <_write+0x4c>)
    236c:	4643      	mov	r3, r8
    236e:	6818      	ldr	r0, [r3, #0]
    2370:	5d31      	ldrb	r1, [r6, r4]
    2372:	683b      	ldr	r3, [r7, #0]
    2374:	4798      	blx	r3
    2376:	2800      	cmp	r0, #0
    2378:	db08      	blt.n	238c <_write+0x3c>
			return -1;
		}
		++nChars;
    237a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    237c:	42a5      	cmp	r5, r4
    237e:	d1f5      	bne.n	236c <_write+0x1c>
    2380:	e006      	b.n	2390 <_write+0x40>
		return -1;
    2382:	2401      	movs	r4, #1
    2384:	4264      	negs	r4, r4
    2386:	e003      	b.n	2390 <_write+0x40>
	for (; len != 0; --len) {
    2388:	0014      	movs	r4, r2
    238a:	e001      	b.n	2390 <_write+0x40>
			return -1;
    238c:	2401      	movs	r4, #1
    238e:	4264      	negs	r4, r4
	}
	return nChars;
}
    2390:	0020      	movs	r0, r4
    2392:	bc04      	pop	{r2}
    2394:	4690      	mov	r8, r2
    2396:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2398:	200002f4 	.word	0x200002f4
    239c:	200002f0 	.word	0x200002f0

000023a0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    23a0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    23a2:	4a06      	ldr	r2, [pc, #24]	; (23bc <_sbrk+0x1c>)
    23a4:	6812      	ldr	r2, [r2, #0]
    23a6:	2a00      	cmp	r2, #0
    23a8:	d004      	beq.n	23b4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    23aa:	4a04      	ldr	r2, [pc, #16]	; (23bc <_sbrk+0x1c>)
    23ac:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    23ae:	18c3      	adds	r3, r0, r3
    23b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    23b2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    23b4:	4902      	ldr	r1, [pc, #8]	; (23c0 <_sbrk+0x20>)
    23b6:	4a01      	ldr	r2, [pc, #4]	; (23bc <_sbrk+0x1c>)
    23b8:	6011      	str	r1, [r2, #0]
    23ba:	e7f6      	b.n	23aa <_sbrk+0xa>
    23bc:	200002a4 	.word	0x200002a4
    23c0:	20002ae0 	.word	0x20002ae0

000023c4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    23c4:	2001      	movs	r0, #1
    23c6:	4240      	negs	r0, r0
    23c8:	4770      	bx	lr

000023ca <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    23ca:	2380      	movs	r3, #128	; 0x80
    23cc:	019b      	lsls	r3, r3, #6
    23ce:	604b      	str	r3, [r1, #4]

	return 0;
}
    23d0:	2000      	movs	r0, #0
    23d2:	4770      	bx	lr

000023d4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    23d4:	2001      	movs	r0, #1
    23d6:	4770      	bx	lr

000023d8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    23d8:	2000      	movs	r0, #0
    23da:	4770      	bx	lr

000023dc <drawChar>:
uint16_t xCharPos = 0;
uint16_t yCharPos = 0;


void drawChar(uint8_t character)
{
    23dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23de:	46d6      	mov	lr, sl
    23e0:	464f      	mov	r7, r9
    23e2:	4646      	mov	r6, r8
    23e4:	b5c0      	push	{r6, r7, lr}
    23e6:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    23e8:	4b2a      	ldr	r3, [pc, #168]	; (2494 <drawChar+0xb8>)
    23ea:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    23ec:	4a2a      	ldr	r2, [pc, #168]	; (2498 <drawChar+0xbc>)
    23ee:	8815      	ldrh	r5, [r2, #0]
	
	consoleDisplay[xCharPos][yCharPos] = character;
    23f0:	005a      	lsls	r2, r3, #1
    23f2:	18d2      	adds	r2, r2, r3
    23f4:	00d2      	lsls	r2, r2, #3
    23f6:	4829      	ldr	r0, [pc, #164]	; (249c <drawChar+0xc0>)
    23f8:	1882      	adds	r2, r0, r2
    23fa:	5554      	strb	r4, [r2, r5]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    23fc:	2180      	movs	r1, #128	; 0x80
    23fe:	03c9      	lsls	r1, r1, #15
    2400:	4a27      	ldr	r2, [pc, #156]	; (24a0 <drawChar+0xc4>)
    2402:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    2404:	0098      	lsls	r0, r3, #2
    2406:	181b      	adds	r3, r3, r0
    2408:	005b      	lsls	r3, r3, #1
    240a:	b298      	uxth	r0, r3
    240c:	2114      	movs	r1, #20
    240e:	4369      	muls	r1, r5
    2410:	b289      	uxth	r1, r1
    2412:	000b      	movs	r3, r1
    2414:	3313      	adds	r3, #19
    2416:	b29b      	uxth	r3, r3
    2418:	0002      	movs	r2, r0
    241a:	3209      	adds	r2, #9
    241c:	b292      	uxth	r2, r2
    241e:	4d21      	ldr	r5, [pc, #132]	; (24a4 <drawChar+0xc8>)
    2420:	47a8      	blx	r5
    2422:	4a21      	ldr	r2, [pc, #132]	; (24a8 <drawChar+0xcc>)
    2424:	00a5      	lsls	r5, r4, #2
    2426:	192d      	adds	r5, r5, r4
    2428:	00ab      	lsls	r3, r5, #2
    242a:	18ed      	adds	r5, r5, r3
    242c:	1955      	adds	r5, r2, r5
    242e:	3401      	adds	r4, #1
    2430:	00a3      	lsls	r3, r4, #2
    2432:	191c      	adds	r4, r3, r4
    2434:	00a3      	lsls	r3, r4, #2
    2436:	18e4      	adds	r4, r4, r3
    2438:	4692      	mov	sl, r2
    243a:	44a2      	add	sl, r4
			{
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
			}
			else
			{
				setPixel((back_Color_High<<8)|back_Color_Low);
    243c:	4b1b      	ldr	r3, [pc, #108]	; (24ac <drawChar+0xd0>)
    243e:	4699      	mov	r9, r3
    2440:	4b1b      	ldr	r3, [pc, #108]	; (24b0 <drawChar+0xd4>)
    2442:	4698      	mov	r8, r3
    2444:	4f1b      	ldr	r7, [pc, #108]	; (24b4 <drawChar+0xd8>)
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    2446:	4e1c      	ldr	r6, [pc, #112]	; (24b8 <drawChar+0xdc>)
    2448:	e019      	b.n	247e <drawChar+0xa2>
				setPixel((back_Color_High<<8)|back_Color_Low);
    244a:	464b      	mov	r3, r9
    244c:	8818      	ldrh	r0, [r3, #0]
    244e:	0200      	lsls	r0, r0, #8
    2450:	4643      	mov	r3, r8
    2452:	881b      	ldrh	r3, [r3, #0]
    2454:	4318      	orrs	r0, r3
    2456:	b280      	uxth	r0, r0
    2458:	47b8      	blx	r7
		for(int j=0;j<8;j++)
    245a:	3c01      	subs	r4, #1
    245c:	d30c      	bcc.n	2478 <drawChar+0x9c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    245e:	782b      	ldrb	r3, [r5, #0]
    2460:	4123      	asrs	r3, r4
    2462:	07db      	lsls	r3, r3, #31
    2464:	d5f1      	bpl.n	244a <drawChar+0x6e>
				setPixel((fore_Color_High<<8)|fore_Color_Low);	
    2466:	8830      	ldrh	r0, [r6, #0]
    2468:	0200      	lsls	r0, r0, #8
    246a:	4b14      	ldr	r3, [pc, #80]	; (24bc <drawChar+0xe0>)
    246c:	881b      	ldrh	r3, [r3, #0]
    246e:	4318      	orrs	r0, r3
    2470:	b280      	uxth	r0, r0
    2472:	4b10      	ldr	r3, [pc, #64]	; (24b4 <drawChar+0xd8>)
    2474:	4798      	blx	r3
    2476:	e7f0      	b.n	245a <drawChar+0x7e>
    2478:	3501      	adds	r5, #1
	for(uint16_t i=0; i <= 24; i++)
    247a:	4555      	cmp	r5, sl
    247c:	d001      	beq.n	2482 <drawChar+0xa6>
{
    247e:	2407      	movs	r4, #7
    2480:	e7ed      	b.n	245e <drawChar+0x82>
			}

		}
	}
	REG_PORT_OUTSET1 = LCD_CS;
    2482:	2280      	movs	r2, #128	; 0x80
    2484:	03d2      	lsls	r2, r2, #15
    2486:	4b0e      	ldr	r3, [pc, #56]	; (24c0 <drawChar+0xe4>)
    2488:	601a      	str	r2, [r3, #0]
	

}
    248a:	bc1c      	pop	{r2, r3, r4}
    248c:	4690      	mov	r8, r2
    248e:	4699      	mov	r9, r3
    2490:	46a2      	mov	sl, r4
    2492:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2494:	200002a8 	.word	0x200002a8
    2498:	200002aa 	.word	0x200002aa
    249c:	20000330 	.word	0x20000330
    24a0:	41004494 	.word	0x41004494
    24a4:	00002ebd 	.word	0x00002ebd
    24a8:	000053bc 	.word	0x000053bc
    24ac:	20000ab6 	.word	0x20000ab6
    24b0:	20000ab0 	.word	0x20000ab0
    24b4:	00002ff5 	.word	0x00002ff5
    24b8:	20000ab2 	.word	0x20000ab2
    24bc:	20000ab4 	.word	0x20000ab4
    24c0:	41004498 	.word	0x41004498

000024c4 <blinkCursor>:
	*/
	
}

void blinkCursor(void)
{
    24c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24c6:	46d6      	mov	lr, sl
    24c8:	464f      	mov	r7, r9
    24ca:	4646      	mov	r6, r8
    24cc:	b5c0      	push	{r6, r7, lr}
	uint16_t x = xCharPos;
    24ce:	4b47      	ldr	r3, [pc, #284]	; (25ec <blinkCursor+0x128>)
    24d0:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    24d2:	4a47      	ldr	r2, [pc, #284]	; (25f0 <blinkCursor+0x12c>)
    24d4:	8815      	ldrh	r5, [r2, #0]
	unsigned char character = consoleDisplay[x][y];
    24d6:	005a      	lsls	r2, r3, #1
    24d8:	18d2      	adds	r2, r2, r3
    24da:	00d2      	lsls	r2, r2, #3
    24dc:	4845      	ldr	r0, [pc, #276]	; (25f4 <blinkCursor+0x130>)
    24de:	1882      	adds	r2, r0, r2
    24e0:	5d54      	ldrb	r4, [r2, r5]
	setXY(x*10,y*20,x*10+9,y*20+19);
    24e2:	0098      	lsls	r0, r3, #2
    24e4:	181b      	adds	r3, r3, r0
    24e6:	005b      	lsls	r3, r3, #1
    24e8:	b298      	uxth	r0, r3
    24ea:	2114      	movs	r1, #20
    24ec:	4369      	muls	r1, r5
    24ee:	b289      	uxth	r1, r1
    24f0:	000b      	movs	r3, r1
    24f2:	3313      	adds	r3, #19
    24f4:	b29b      	uxth	r3, r3
    24f6:	0002      	movs	r2, r0
    24f8:	3209      	adds	r2, #9
    24fa:	b292      	uxth	r2, r2
    24fc:	4d3e      	ldr	r5, [pc, #248]	; (25f8 <blinkCursor+0x134>)
    24fe:	47a8      	blx	r5
	REG_PORT_OUTCLR1 = LCD_CS;
    2500:	2280      	movs	r2, #128	; 0x80
    2502:	03d2      	lsls	r2, r2, #15
    2504:	4b3d      	ldr	r3, [pc, #244]	; (25fc <blinkCursor+0x138>)
    2506:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    2508:	4b3d      	ldr	r3, [pc, #244]	; (2600 <blinkCursor+0x13c>)
    250a:	781b      	ldrb	r3, [r3, #0]
    250c:	2b00      	cmp	r3, #0
    250e:	d113      	bne.n	2538 <blinkCursor+0x74>
    2510:	4a3c      	ldr	r2, [pc, #240]	; (2604 <blinkCursor+0x140>)
    2512:	00a5      	lsls	r5, r4, #2
    2514:	192d      	adds	r5, r5, r4
    2516:	00ab      	lsls	r3, r5, #2
    2518:	18ed      	adds	r5, r5, r3
    251a:	1955      	adds	r5, r2, r5
    251c:	3401      	adds	r4, #1
    251e:	00a3      	lsls	r3, r4, #2
    2520:	191c      	adds	r4, r3, r4
    2522:	00a3      	lsls	r3, r4, #2
    2524:	18e4      	adds	r4, r4, r3
    2526:	4692      	mov	sl, r2
    2528:	44a2      	add	sl, r4
				{
					setPixel((fore_Color_High<<8)|fore_Color_Low);
				}
				else
				{
					setPixel((back_Color_High<<8)|back_Color_Low);
    252a:	4b37      	ldr	r3, [pc, #220]	; (2608 <blinkCursor+0x144>)
    252c:	4699      	mov	r9, r3
    252e:	4b37      	ldr	r3, [pc, #220]	; (260c <blinkCursor+0x148>)
    2530:	4698      	mov	r8, r3
    2532:	4f37      	ldr	r7, [pc, #220]	; (2610 <blinkCursor+0x14c>)
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2534:	4e37      	ldr	r6, [pc, #220]	; (2614 <blinkCursor+0x150>)
    2536:	e049      	b.n	25cc <blinkCursor+0x108>
    2538:	4a32      	ldr	r2, [pc, #200]	; (2604 <blinkCursor+0x140>)
    253a:	00a5      	lsls	r5, r4, #2
    253c:	192d      	adds	r5, r5, r4
    253e:	00ab      	lsls	r3, r5, #2
    2540:	18ed      	adds	r5, r5, r3
    2542:	1955      	adds	r5, r2, r5
    2544:	3401      	adds	r4, #1
    2546:	00a3      	lsls	r3, r4, #2
    2548:	191c      	adds	r4, r3, r4
    254a:	00a3      	lsls	r3, r4, #2
    254c:	18e4      	adds	r4, r4, r3
    254e:	4692      	mov	sl, r2
    2550:	44a2      	add	sl, r4
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2552:	4b30      	ldr	r3, [pc, #192]	; (2614 <blinkCursor+0x150>)
    2554:	4699      	mov	r9, r3
    2556:	4b30      	ldr	r3, [pc, #192]	; (2618 <blinkCursor+0x154>)
    2558:	4698      	mov	r8, r3
    255a:	4f2d      	ldr	r7, [pc, #180]	; (2610 <blinkCursor+0x14c>)
					setPixel((back_Color_High<<8)|back_Color_Low);
    255c:	4e2a      	ldr	r6, [pc, #168]	; (2608 <blinkCursor+0x144>)
    255e:	e019      	b.n	2594 <blinkCursor+0xd0>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    2560:	464b      	mov	r3, r9
    2562:	8818      	ldrh	r0, [r3, #0]
    2564:	0200      	lsls	r0, r0, #8
    2566:	4643      	mov	r3, r8
    2568:	881b      	ldrh	r3, [r3, #0]
    256a:	4318      	orrs	r0, r3
    256c:	b280      	uxth	r0, r0
    256e:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    2570:	3c01      	subs	r4, #1
    2572:	d30c      	bcc.n	258e <blinkCursor+0xca>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    2574:	782b      	ldrb	r3, [r5, #0]
    2576:	4123      	asrs	r3, r4
    2578:	07db      	lsls	r3, r3, #31
    257a:	d5f1      	bpl.n	2560 <blinkCursor+0x9c>
					setPixel((back_Color_High<<8)|back_Color_Low);
    257c:	8830      	ldrh	r0, [r6, #0]
    257e:	0200      	lsls	r0, r0, #8
    2580:	4b22      	ldr	r3, [pc, #136]	; (260c <blinkCursor+0x148>)
    2582:	881b      	ldrh	r3, [r3, #0]
    2584:	4318      	orrs	r0, r3
    2586:	b280      	uxth	r0, r0
    2588:	4b21      	ldr	r3, [pc, #132]	; (2610 <blinkCursor+0x14c>)
    258a:	4798      	blx	r3
    258c:	e7f0      	b.n	2570 <blinkCursor+0xac>
    258e:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    2590:	4555      	cmp	r5, sl
    2592:	d01d      	beq.n	25d0 <blinkCursor+0x10c>
{
    2594:	2407      	movs	r4, #7
    2596:	e7ed      	b.n	2574 <blinkCursor+0xb0>
					setPixel((back_Color_High<<8)|back_Color_Low);
    2598:	464b      	mov	r3, r9
    259a:	8818      	ldrh	r0, [r3, #0]
    259c:	0200      	lsls	r0, r0, #8
    259e:	4643      	mov	r3, r8
    25a0:	881b      	ldrh	r3, [r3, #0]
    25a2:	4318      	orrs	r0, r3
    25a4:	b280      	uxth	r0, r0
    25a6:	47b8      	blx	r7
			for(int j=0;j<8;j++)
    25a8:	3c01      	subs	r4, #1
    25aa:	d30c      	bcc.n	25c6 <blinkCursor+0x102>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    25ac:	782b      	ldrb	r3, [r5, #0]
    25ae:	4123      	asrs	r3, r4
    25b0:	07db      	lsls	r3, r3, #31
    25b2:	d5f1      	bpl.n	2598 <blinkCursor+0xd4>
					setPixel((fore_Color_High<<8)|fore_Color_Low);
    25b4:	8830      	ldrh	r0, [r6, #0]
    25b6:	0200      	lsls	r0, r0, #8
    25b8:	4b17      	ldr	r3, [pc, #92]	; (2618 <blinkCursor+0x154>)
    25ba:	881b      	ldrh	r3, [r3, #0]
    25bc:	4318      	orrs	r0, r3
    25be:	b280      	uxth	r0, r0
    25c0:	4b13      	ldr	r3, [pc, #76]	; (2610 <blinkCursor+0x14c>)
    25c2:	4798      	blx	r3
    25c4:	e7f0      	b.n	25a8 <blinkCursor+0xe4>
    25c6:	3501      	adds	r5, #1
		for(uint16_t i=0; i <= 24; i++)
    25c8:	4555      	cmp	r5, sl
    25ca:	d001      	beq.n	25d0 <blinkCursor+0x10c>
{
    25cc:	2407      	movs	r4, #7
    25ce:	e7ed      	b.n	25ac <blinkCursor+0xe8>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    25d0:	2280      	movs	r2, #128	; 0x80
    25d2:	03d2      	lsls	r2, r2, #15
    25d4:	4b11      	ldr	r3, [pc, #68]	; (261c <blinkCursor+0x158>)
    25d6:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    25d8:	4a09      	ldr	r2, [pc, #36]	; (2600 <blinkCursor+0x13c>)
    25da:	7813      	ldrb	r3, [r2, #0]
    25dc:	2101      	movs	r1, #1
    25de:	404b      	eors	r3, r1
    25e0:	7013      	strb	r3, [r2, #0]
	
}
    25e2:	bc1c      	pop	{r2, r3, r4}
    25e4:	4690      	mov	r8, r2
    25e6:	4699      	mov	r9, r3
    25e8:	46a2      	mov	sl, r4
    25ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25ec:	200002a8 	.word	0x200002a8
    25f0:	200002aa 	.word	0x200002aa
    25f4:	20000330 	.word	0x20000330
    25f8:	00002ebd 	.word	0x00002ebd
    25fc:	41004494 	.word	0x41004494
    2600:	20000010 	.word	0x20000010
    2604:	000053bc 	.word	0x000053bc
    2608:	20000ab6 	.word	0x20000ab6
    260c:	20000ab0 	.word	0x20000ab0
    2610:	00002ff5 	.word	0x00002ff5
    2614:	20000ab2 	.word	0x20000ab2
    2618:	20000ab4 	.word	0x20000ab4
    261c:	41004498 	.word	0x41004498

00002620 <newLine>:
{
    2620:	b5f0      	push	{r4, r5, r6, r7, lr}
    2622:	46de      	mov	lr, fp
    2624:	4657      	mov	r7, sl
    2626:	464e      	mov	r6, r9
    2628:	4645      	mov	r5, r8
    262a:	b5e0      	push	{r5, r6, r7, lr}
    262c:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    262e:	4b24      	ldr	r3, [pc, #144]	; (26c0 <newLine+0xa0>)
    2630:	881b      	ldrh	r3, [r3, #0]
    2632:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    2634:	4b23      	ldr	r3, [pc, #140]	; (26c4 <newLine+0xa4>)
    2636:	881b      	ldrh	r3, [r3, #0]
    2638:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    263a:	2201      	movs	r2, #1
    263c:	4b22      	ldr	r3, [pc, #136]	; (26c8 <newLine+0xa8>)
    263e:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    2640:	4b22      	ldr	r3, [pc, #136]	; (26cc <newLine+0xac>)
    2642:	4798      	blx	r3
    2644:	4822      	ldr	r0, [pc, #136]	; (26d0 <newLine+0xb0>)
    2646:	0004      	movs	r4, r0
    2648:	3418      	adds	r4, #24
    264a:	23f0      	movs	r3, #240	; 0xf0
    264c:	00db      	lsls	r3, r3, #3
    264e:	18c1      	adds	r1, r0, r3
{
    2650:	0003      	movs	r3, r0
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    2652:	785a      	ldrb	r2, [r3, #1]
    2654:	701a      	strb	r2, [r3, #0]
    2656:	3318      	adds	r3, #24
		for(int i = 0 ; i < 80 ; i++)
    2658:	428b      	cmp	r3, r1
    265a:	d1fa      	bne.n	2652 <newLine+0x32>
    265c:	3001      	adds	r0, #1
	for(int j = 1 ; j <= 24 ; j++)
    265e:	42a0      	cmp	r0, r4
    2660:	d1f3      	bne.n	264a <newLine+0x2a>
    2662:	4b1c      	ldr	r3, [pc, #112]	; (26d4 <newLine+0xb4>)
    2664:	22f0      	movs	r2, #240	; 0xf0
    2666:	00d2      	lsls	r2, r2, #3
    2668:	1899      	adds	r1, r3, r2
		consoleDisplay[k][23] = 0x20;
    266a:	2220      	movs	r2, #32
    266c:	701a      	strb	r2, [r3, #0]
    266e:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    2670:	428b      	cmp	r3, r1
    2672:	d1fb      	bne.n	266c <newLine+0x4c>
    2674:	2600      	movs	r6, #0
    2676:	4b16      	ldr	r3, [pc, #88]	; (26d0 <newLine+0xb0>)
    2678:	469a      	mov	sl, r3
			xCharPos = i;
    267a:	4b11      	ldr	r3, [pc, #68]	; (26c0 <newLine+0xa0>)
    267c:	4699      	mov	r9, r3
			yCharPos = j;
    267e:	4b11      	ldr	r3, [pc, #68]	; (26c4 <newLine+0xa4>)
    2680:	4698      	mov	r8, r3
    2682:	4653      	mov	r3, sl
    2684:	18f5      	adds	r5, r6, r3
{
    2686:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    2688:	4f13      	ldr	r7, [pc, #76]	; (26d8 <newLine+0xb8>)
			xCharPos = i;
    268a:	464b      	mov	r3, r9
    268c:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    268e:	4643      	mov	r3, r8
    2690:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    2692:	7828      	ldrb	r0, [r5, #0]
    2694:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    2696:	3401      	adds	r4, #1
    2698:	3518      	adds	r5, #24
    269a:	2c50      	cmp	r4, #80	; 0x50
    269c:	d1f5      	bne.n	268a <newLine+0x6a>
	for(int j = 0 ; j < 24 ; j++)
    269e:	3601      	adds	r6, #1
    26a0:	2e18      	cmp	r6, #24
    26a2:	d1ee      	bne.n	2682 <newLine+0x62>
	xCharPos = tempCursorx;
    26a4:	4b06      	ldr	r3, [pc, #24]	; (26c0 <newLine+0xa0>)
    26a6:	465a      	mov	r2, fp
    26a8:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    26aa:	4b06      	ldr	r3, [pc, #24]	; (26c4 <newLine+0xa4>)
    26ac:	466a      	mov	r2, sp
    26ae:	8892      	ldrh	r2, [r2, #4]
    26b0:	801a      	strh	r2, [r3, #0]
}
    26b2:	b003      	add	sp, #12
    26b4:	bc3c      	pop	{r2, r3, r4, r5}
    26b6:	4690      	mov	r8, r2
    26b8:	4699      	mov	r9, r3
    26ba:	46a2      	mov	sl, r4
    26bc:	46ab      	mov	fp, r5
    26be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26c0:	200002a8 	.word	0x200002a8
    26c4:	200002aa 	.word	0x200002aa
    26c8:	20000010 	.word	0x20000010
    26cc:	000024c5 	.word	0x000024c5
    26d0:	20000330 	.word	0x20000330
    26d4:	20000347 	.word	0x20000347
    26d8:	000023dd 	.word	0x000023dd

000026dc <writeString>:

void writeString(const char str[])
{
    26dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    26de:	46c6      	mov	lr, r8
    26e0:	b500      	push	{lr}
    26e2:	0005      	movs	r5, r0
	int length = strlen(str);
    26e4:	4b0c      	ldr	r3, [pc, #48]	; (2718 <writeString+0x3c>)
    26e6:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    26e8:	2800      	cmp	r0, #0
    26ea:	dd11      	ble.n	2710 <writeString+0x34>
    26ec:	002c      	movs	r4, r5
    26ee:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    26f0:	4f0a      	ldr	r7, [pc, #40]	; (271c <writeString+0x40>)
		if(xCharPos <= 80)
    26f2:	4e0b      	ldr	r6, [pc, #44]	; (2720 <writeString+0x44>)
		xCharPos++;
    26f4:	46b0      	mov	r8, r6
    26f6:	e002      	b.n	26fe <writeString+0x22>
    26f8:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    26fa:	42ac      	cmp	r4, r5
    26fc:	d008      	beq.n	2710 <writeString+0x34>
		drawChar(str[i]);
    26fe:	7820      	ldrb	r0, [r4, #0]
    2700:	47b8      	blx	r7
		if(xCharPos <= 80)
    2702:	8833      	ldrh	r3, [r6, #0]
    2704:	2b50      	cmp	r3, #80	; 0x50
    2706:	d8f7      	bhi.n	26f8 <writeString+0x1c>
		xCharPos++;
    2708:	3301      	adds	r3, #1
    270a:	4642      	mov	r2, r8
    270c:	8013      	strh	r3, [r2, #0]
    270e:	e7f3      	b.n	26f8 <writeString+0x1c>
	}
}
    2710:	bc04      	pop	{r2}
    2712:	4690      	mov	r8, r2
    2714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	00003f1d 	.word	0x00003f1d
    271c:	000023dd 	.word	0x000023dd
    2720:	200002a8 	.word	0x200002a8

00002724 <nullifyConsole>:

void nullifyConsole(void)
{
    2724:	4b08      	ldr	r3, [pc, #32]	; (2748 <nullifyConsole+0x24>)
    2726:	22f0      	movs	r2, #240	; 0xf0
    2728:	00d2      	lsls	r2, r2, #3
    272a:	1898      	adds	r0, r3, r2
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    272c:	2100      	movs	r1, #0
    272e:	e002      	b.n	2736 <nullifyConsole+0x12>
    2730:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    2732:	4290      	cmp	r0, r2
    2734:	d006      	beq.n	2744 <nullifyConsole+0x20>
    2736:	001a      	movs	r2, r3
    2738:	3218      	adds	r2, #24
			consoleDisplay[i][j] = 0x00;
    273a:	7019      	strb	r1, [r3, #0]
    273c:	3301      	adds	r3, #1
		for(int j = 0 ; j < 24 ; j++)
    273e:	4293      	cmp	r3, r2
    2740:	d1fb      	bne.n	273a <nullifyConsole+0x16>
    2742:	e7f5      	b.n	2730 <nullifyConsole+0xc>
		}
	}
}
    2744:	4770      	bx	lr
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	20000330 	.word	0x20000330

0000274c <arrowKey>:

void arrowKey(int scancode)
{
    274c:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	//Arrow key handling
	if(scancode == 35) //left
    274e:	2823      	cmp	r0, #35	; 0x23
    2750:	d006      	beq.n	2760 <arrowKey+0x14>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 45)	//down
    2752:	282d      	cmp	r0, #45	; 0x2d
    2754:	d021      	beq.n	279a <arrowKey+0x4e>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 55)	//up
    2756:	2837      	cmp	r0, #55	; 0x37
    2758:	d03c      	beq.n	27d4 <arrowKey+0x88>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	else if(scancode  == 65)	//right
    275a:	2841      	cmp	r0, #65	; 0x41
    275c:	d057      	beq.n	280e <arrowKey+0xc2>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
    275e:	bd70      	pop	{r4, r5, r6, pc}
		if(xCharPos > 0)
    2760:	4b39      	ldr	r3, [pc, #228]	; (2848 <arrowKey+0xfc>)
    2762:	881b      	ldrh	r3, [r3, #0]
    2764:	2b00      	cmp	r3, #0
    2766:	d0fa      	beq.n	275e <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    2768:	4c38      	ldr	r4, [pc, #224]	; (284c <arrowKey+0x100>)
    276a:	4d39      	ldr	r5, [pc, #228]	; (2850 <arrowKey+0x104>)
    276c:	8829      	ldrh	r1, [r5, #0]
    276e:	005a      	lsls	r2, r3, #1
    2770:	18d3      	adds	r3, r2, r3
    2772:	00db      	lsls	r3, r3, #3
    2774:	18e3      	adds	r3, r4, r3
    2776:	5c58      	ldrb	r0, [r3, r1]
    2778:	4e36      	ldr	r6, [pc, #216]	; (2854 <arrowKey+0x108>)
    277a:	47b0      	blx	r6
			xCharPos--;
    277c:	4a32      	ldr	r2, [pc, #200]	; (2848 <arrowKey+0xfc>)
    277e:	8813      	ldrh	r3, [r2, #0]
    2780:	3b01      	subs	r3, #1
    2782:	b29b      	uxth	r3, r3
    2784:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2786:	8829      	ldrh	r1, [r5, #0]
    2788:	005a      	lsls	r2, r3, #1
    278a:	18d3      	adds	r3, r2, r3
    278c:	00db      	lsls	r3, r3, #3
    278e:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    2790:	5c58      	ldrb	r0, [r3, r1]
    2792:	47b0      	blx	r6
			blinkCursor();
    2794:	4b30      	ldr	r3, [pc, #192]	; (2858 <arrowKey+0x10c>)
    2796:	4798      	blx	r3
    2798:	e7e1      	b.n	275e <arrowKey+0x12>
		if(yCharPos < 23)
    279a:	4b2d      	ldr	r3, [pc, #180]	; (2850 <arrowKey+0x104>)
    279c:	881a      	ldrh	r2, [r3, #0]
    279e:	2a16      	cmp	r2, #22
    27a0:	d8dd      	bhi.n	275e <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    27a2:	4c2a      	ldr	r4, [pc, #168]	; (284c <arrowKey+0x100>)
    27a4:	4d28      	ldr	r5, [pc, #160]	; (2848 <arrowKey+0xfc>)
    27a6:	8829      	ldrh	r1, [r5, #0]
    27a8:	004b      	lsls	r3, r1, #1
    27aa:	185b      	adds	r3, r3, r1
    27ac:	00db      	lsls	r3, r3, #3
    27ae:	18e3      	adds	r3, r4, r3
    27b0:	5c98      	ldrb	r0, [r3, r2]
    27b2:	4e28      	ldr	r6, [pc, #160]	; (2854 <arrowKey+0x108>)
    27b4:	47b0      	blx	r6
			yCharPos++;
    27b6:	4a26      	ldr	r2, [pc, #152]	; (2850 <arrowKey+0x104>)
    27b8:	8813      	ldrh	r3, [r2, #0]
    27ba:	3301      	adds	r3, #1
    27bc:	b29b      	uxth	r3, r3
    27be:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    27c0:	8829      	ldrh	r1, [r5, #0]
    27c2:	004a      	lsls	r2, r1, #1
    27c4:	1852      	adds	r2, r2, r1
    27c6:	00d2      	lsls	r2, r2, #3
    27c8:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    27ca:	5ce0      	ldrb	r0, [r4, r3]
    27cc:	47b0      	blx	r6
			blinkCursor();
    27ce:	4b22      	ldr	r3, [pc, #136]	; (2858 <arrowKey+0x10c>)
    27d0:	4798      	blx	r3
    27d2:	e7c4      	b.n	275e <arrowKey+0x12>
		if(yCharPos > 0)
    27d4:	4b1e      	ldr	r3, [pc, #120]	; (2850 <arrowKey+0x104>)
    27d6:	881a      	ldrh	r2, [r3, #0]
    27d8:	2a00      	cmp	r2, #0
    27da:	d0c0      	beq.n	275e <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    27dc:	4c1b      	ldr	r4, [pc, #108]	; (284c <arrowKey+0x100>)
    27de:	4d1a      	ldr	r5, [pc, #104]	; (2848 <arrowKey+0xfc>)
    27e0:	8829      	ldrh	r1, [r5, #0]
    27e2:	004b      	lsls	r3, r1, #1
    27e4:	185b      	adds	r3, r3, r1
    27e6:	00db      	lsls	r3, r3, #3
    27e8:	18e3      	adds	r3, r4, r3
    27ea:	5c98      	ldrb	r0, [r3, r2]
    27ec:	4e19      	ldr	r6, [pc, #100]	; (2854 <arrowKey+0x108>)
    27ee:	47b0      	blx	r6
			yCharPos--;
    27f0:	4a17      	ldr	r2, [pc, #92]	; (2850 <arrowKey+0x104>)
    27f2:	8813      	ldrh	r3, [r2, #0]
    27f4:	3b01      	subs	r3, #1
    27f6:	b29b      	uxth	r3, r3
    27f8:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    27fa:	8829      	ldrh	r1, [r5, #0]
    27fc:	004a      	lsls	r2, r1, #1
    27fe:	1852      	adds	r2, r2, r1
    2800:	00d2      	lsls	r2, r2, #3
    2802:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    2804:	5ce0      	ldrb	r0, [r4, r3]
    2806:	47b0      	blx	r6
			blinkCursor();
    2808:	4b13      	ldr	r3, [pc, #76]	; (2858 <arrowKey+0x10c>)
    280a:	4798      	blx	r3
    280c:	e7a7      	b.n	275e <arrowKey+0x12>
		if(xCharPos < 79)
    280e:	4b0e      	ldr	r3, [pc, #56]	; (2848 <arrowKey+0xfc>)
    2810:	881a      	ldrh	r2, [r3, #0]
    2812:	2a4e      	cmp	r2, #78	; 0x4e
    2814:	d8a3      	bhi.n	275e <arrowKey+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    2816:	4c0d      	ldr	r4, [pc, #52]	; (284c <arrowKey+0x100>)
    2818:	4d0d      	ldr	r5, [pc, #52]	; (2850 <arrowKey+0x104>)
    281a:	8829      	ldrh	r1, [r5, #0]
    281c:	0053      	lsls	r3, r2, #1
    281e:	189b      	adds	r3, r3, r2
    2820:	00db      	lsls	r3, r3, #3
    2822:	18e3      	adds	r3, r4, r3
    2824:	5c58      	ldrb	r0, [r3, r1]
    2826:	4e0b      	ldr	r6, [pc, #44]	; (2854 <arrowKey+0x108>)
    2828:	47b0      	blx	r6
			xCharPos++;
    282a:	4a07      	ldr	r2, [pc, #28]	; (2848 <arrowKey+0xfc>)
    282c:	8813      	ldrh	r3, [r2, #0]
    282e:	3301      	adds	r3, #1
    2830:	b29b      	uxth	r3, r3
    2832:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    2834:	8829      	ldrh	r1, [r5, #0]
    2836:	005a      	lsls	r2, r3, #1
    2838:	18d3      	adds	r3, r2, r3
    283a:	00db      	lsls	r3, r3, #3
    283c:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    283e:	5c58      	ldrb	r0, [r3, r1]
    2840:	47b0      	blx	r6
			blinkCursor();
    2842:	4b05      	ldr	r3, [pc, #20]	; (2858 <arrowKey+0x10c>)
    2844:	4798      	blx	r3
    2846:	e78a      	b.n	275e <arrowKey+0x12>
    2848:	200002a8 	.word	0x200002a8
    284c:	20000330 	.word	0x20000330
    2850:	200002aa 	.word	0x200002aa
    2854:	000023dd 	.word	0x000023dd
    2858:	000024c5 	.word	0x000024c5

0000285c <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    285c:	4b09      	ldr	r3, [pc, #36]	; (2884 <scanCodesContains+0x28>)
    285e:	681b      	ldr	r3, [r3, #0]
    2860:	4298      	cmp	r0, r3
    2862:	d00b      	beq.n	287c <scanCodesContains+0x20>
    2864:	4a07      	ldr	r2, [pc, #28]	; (2884 <scanCodesContains+0x28>)
    2866:	1d13      	adds	r3, r2, #4
    2868:	3219      	adds	r2, #25
    286a:	32ff      	adds	r2, #255	; 0xff
    286c:	6819      	ldr	r1, [r3, #0]
    286e:	4281      	cmp	r1, r0
    2870:	d006      	beq.n	2880 <scanCodesContains+0x24>
    2872:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    2874:	4293      	cmp	r3, r2
    2876:	d1f9      	bne.n	286c <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    2878:	2000      	movs	r0, #0
    287a:	e002      	b.n	2882 <scanCodesContains+0x26>
			return true;
    287c:	2001      	movs	r0, #1
    287e:	e000      	b.n	2882 <scanCodesContains+0x26>
    2880:	2001      	movs	r0, #1
}
    2882:	4770      	bx	lr
    2884:	2000003c 	.word	0x2000003c

00002888 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    2888:	4b09      	ldr	r3, [pc, #36]	; (28b0 <keyDown+0x28>)
    288a:	781b      	ldrb	r3, [r3, #0]
    288c:	4298      	cmp	r0, r3
    288e:	d00a      	beq.n	28a6 <keyDown+0x1e>
    2890:	4907      	ldr	r1, [pc, #28]	; (28b0 <keyDown+0x28>)
    2892:	1c4b      	adds	r3, r1, #1
    2894:	3114      	adds	r1, #20
    2896:	781a      	ldrb	r2, [r3, #0]
    2898:	4282      	cmp	r2, r0
    289a:	d006      	beq.n	28aa <keyDown+0x22>
    289c:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    289e:	428b      	cmp	r3, r1
    28a0:	d1f9      	bne.n	2896 <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    28a2:	2000      	movs	r0, #0
}
    28a4:	4770      	bx	lr
			return true;
    28a6:	2001      	movs	r0, #1
    28a8:	e7fc      	b.n	28a4 <keyDown+0x1c>
    28aa:	2001      	movs	r0, #1
    28ac:	e7fa      	b.n	28a4 <keyDown+0x1c>
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	20000014 	.word	0x20000014

000028b4 <printKeyboardBuffer>:
{
    28b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b6:	46d6      	mov	lr, sl
    28b8:	464f      	mov	r7, r9
    28ba:	4646      	mov	r6, r8
    28bc:	b5c0      	push	{r6, r7, lr}
    28be:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    28c0:	4db4      	ldr	r5, [pc, #720]	; (2b94 <printKeyboardBuffer+0x2e0>)
    28c2:	2246      	movs	r2, #70	; 0x46
    28c4:	0029      	movs	r1, r5
    28c6:	a83a      	add	r0, sp, #232	; 0xe8
    28c8:	4cb3      	ldr	r4, [pc, #716]	; (2b98 <printKeyboardBuffer+0x2e4>)
    28ca:	47a0      	blx	r4
	unsigned char shiftCase[] =
    28cc:	0029      	movs	r1, r5
    28ce:	3148      	adds	r1, #72	; 0x48
    28d0:	2246      	movs	r2, #70	; 0x46
    28d2:	a828      	add	r0, sp, #160	; 0xa0
    28d4:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    28d6:	4db1      	ldr	r5, [pc, #708]	; (2b9c <printKeyboardBuffer+0x2e8>)
    28d8:	0029      	movs	r1, r5
    28da:	3110      	adds	r1, #16
    28dc:	2246      	movs	r2, #70	; 0x46
    28de:	a816      	add	r0, sp, #88	; 0x58
    28e0:	47a0      	blx	r4
	unsigned char controlCase[] =
    28e2:	0029      	movs	r1, r5
    28e4:	3158      	adds	r1, #88	; 0x58
    28e6:	2246      	movs	r2, #70	; 0x46
    28e8:	a804      	add	r0, sp, #16
    28ea:	47a0      	blx	r4
    28ec:	4fac      	ldr	r7, [pc, #688]	; (2ba0 <printKeyboardBuffer+0x2ec>)
    28ee:	003c      	movs	r4, r7
    28f0:	3414      	adds	r4, #20
    28f2:	003d      	movs	r5, r7
	bool controled = false;
    28f4:	2300      	movs	r3, #0
    28f6:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    28f8:	9302      	str	r3, [sp, #8]
			controled = true;
    28fa:	2201      	movs	r2, #1
    28fc:	e004      	b.n	2908 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    28fe:	2916      	cmp	r1, #22
    2900:	d011      	beq.n	2926 <printKeyboardBuffer+0x72>
    2902:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    2904:	42a5      	cmp	r5, r4
    2906:	d010      	beq.n	292a <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    2908:	7829      	ldrb	r1, [r5, #0]
    290a:	000b      	movs	r3, r1
    290c:	3b0d      	subs	r3, #13
    290e:	425e      	negs	r6, r3
    2910:	415e      	adcs	r6, r3
    2912:	46b4      	mov	ip, r6
    2914:	0008      	movs	r0, r1
    2916:	3831      	subs	r0, #49	; 0x31
    2918:	4243      	negs	r3, r0
    291a:	4143      	adcs	r3, r0
    291c:	4660      	mov	r0, ip
    291e:	4318      	orrs	r0, r3
    2920:	d0ed      	beq.n	28fe <printKeyboardBuffer+0x4a>
			shifted = true;
    2922:	9002      	str	r0, [sp, #8]
    2924:	e7eb      	b.n	28fe <printKeyboardBuffer+0x4a>
			controled = true;
    2926:	9203      	str	r2, [sp, #12]
    2928:	e7eb      	b.n	2902 <printKeyboardBuffer+0x4e>
    292a:	4e9e      	ldr	r6, [pc, #632]	; (2ba4 <printKeyboardBuffer+0x2f0>)
	for(int i=0; i<20; i++)
    292c:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    292e:	4b9e      	ldr	r3, [pc, #632]	; (2ba8 <printKeyboardBuffer+0x2f4>)
    2930:	469a      	mov	sl, r3
    2932:	e00b      	b.n	294c <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    2934:	301b      	adds	r0, #27
    2936:	4b9d      	ldr	r3, [pc, #628]	; (2bac <printKeyboardBuffer+0x2f8>)
    2938:	4798      	blx	r3
				if(localEcho)
    293a:	4b9d      	ldr	r3, [pc, #628]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    293c:	781b      	ldrb	r3, [r3, #0]
    293e:	2b00      	cmp	r3, #0
    2940:	d14a      	bne.n	29d8 <printKeyboardBuffer+0x124>
    2942:	3401      	adds	r4, #1
    2944:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    2946:	42ac      	cmp	r4, r5
    2948:	d100      	bne.n	294c <printKeyboardBuffer+0x98>
    294a:	e118      	b.n	2b7e <printKeyboardBuffer+0x2ca>
    294c:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    294e:	7823      	ldrb	r3, [r4, #0]
    2950:	4698      	mov	r8, r3
    2952:	0018      	movs	r0, r3
    2954:	47d0      	blx	sl
    2956:	2800      	cmp	r0, #0
    2958:	d1f3      	bne.n	2942 <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    295a:	4643      	mov	r3, r8
    295c:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    295e:	4643      	mov	r3, r8
    2960:	2b00      	cmp	r3, #0
    2962:	d0e7      	beq.n	2934 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    2964:	4643      	mov	r3, r8
    2966:	2b01      	cmp	r3, #1
    2968:	d0eb      	beq.n	2942 <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    296a:	2b43      	cmp	r3, #67	; 0x43
    296c:	d03a      	beq.n	29e4 <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    296e:	4643      	mov	r3, r8
    2970:	2b3a      	cmp	r3, #58	; 0x3a
    2972:	d03f      	beq.n	29f4 <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    2974:	4643      	mov	r3, r8
    2976:	2b0c      	cmp	r3, #12
    2978:	d078      	beq.n	2a6c <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    297a:	4643      	mov	r3, r8
    297c:	2b03      	cmp	r3, #3
    297e:	d07b      	beq.n	2a78 <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    2980:	4643      	mov	r3, r8
    2982:	2b23      	cmp	r3, #35	; 0x23
    2984:	d07e      	beq.n	2a84 <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    2986:	4643      	mov	r3, r8
    2988:	2b2d      	cmp	r3, #45	; 0x2d
    298a:	d100      	bne.n	298e <printKeyboardBuffer+0xda>
    298c:	e08c      	b.n	2aa8 <printKeyboardBuffer+0x1f4>
			else if(scanCodeBuffer[i]  == 55)	//up
    298e:	4643      	mov	r3, r8
    2990:	2b37      	cmp	r3, #55	; 0x37
    2992:	d100      	bne.n	2996 <printKeyboardBuffer+0xe2>
    2994:	e09a      	b.n	2acc <printKeyboardBuffer+0x218>
			else if(scanCodeBuffer[i]  == 65)	//right
    2996:	4643      	mov	r3, r8
    2998:	2b41      	cmp	r3, #65	; 0x41
    299a:	d100      	bne.n	299e <printKeyboardBuffer+0xea>
    299c:	e0a8      	b.n	2af0 <printKeyboardBuffer+0x23c>
				if(controled)
    299e:	9b03      	ldr	r3, [sp, #12]
    29a0:	2b00      	cmp	r3, #0
    29a2:	d000      	beq.n	29a6 <printKeyboardBuffer+0xf2>
    29a4:	e0b6      	b.n	2b14 <printKeyboardBuffer+0x260>
				else if(capsLock)
    29a6:	4b83      	ldr	r3, [pc, #524]	; (2bb4 <printKeyboardBuffer+0x300>)
    29a8:	781b      	ldrb	r3, [r3, #0]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d000      	beq.n	29b0 <printKeyboardBuffer+0xfc>
    29ae:	e0c4      	b.n	2b3a <printKeyboardBuffer+0x286>
				else if(shifted)
    29b0:	9b02      	ldr	r3, [sp, #8]
    29b2:	2b00      	cmp	r3, #0
    29b4:	d100      	bne.n	29b8 <printKeyboardBuffer+0x104>
    29b6:	e0d1      	b.n	2b5c <printKeyboardBuffer+0x2a8>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    29b8:	ab28      	add	r3, sp, #160	; 0xa0
    29ba:	4642      	mov	r2, r8
    29bc:	5c98      	ldrb	r0, [r3, r2]
    29be:	4b7b      	ldr	r3, [pc, #492]	; (2bac <printKeyboardBuffer+0x2f8>)
    29c0:	4798      	blx	r3
					if(localEcho)
    29c2:	4b7b      	ldr	r3, [pc, #492]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    29c4:	781b      	ldrb	r3, [r3, #0]
    29c6:	2b00      	cmp	r3, #0
    29c8:	d0bb      	beq.n	2942 <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    29ca:	9b01      	ldr	r3, [sp, #4]
    29cc:	781b      	ldrb	r3, [r3, #0]
    29ce:	aa28      	add	r2, sp, #160	; 0xa0
    29d0:	5cd0      	ldrb	r0, [r2, r3]
    29d2:	4b79      	ldr	r3, [pc, #484]	; (2bb8 <printKeyboardBuffer+0x304>)
    29d4:	4798      	blx	r3
    29d6:	e7b4      	b.n	2942 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    29d8:	4b78      	ldr	r3, [pc, #480]	; (2bbc <printKeyboardBuffer+0x308>)
    29da:	6818      	ldr	r0, [r3, #0]
    29dc:	211b      	movs	r1, #27
    29de:	4b78      	ldr	r3, [pc, #480]	; (2bc0 <printKeyboardBuffer+0x30c>)
    29e0:	4798      	blx	r3
    29e2:	e7ae      	b.n	2942 <printKeyboardBuffer+0x8e>
				if(breakEnable)
    29e4:	4b77      	ldr	r3, [pc, #476]	; (2bc4 <printKeyboardBuffer+0x310>)
    29e6:	781b      	ldrb	r3, [r3, #0]
    29e8:	2b00      	cmp	r3, #0
    29ea:	d0aa      	beq.n	2942 <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    29ec:	2000      	movs	r0, #0
    29ee:	4b6f      	ldr	r3, [pc, #444]	; (2bac <printKeyboardBuffer+0x2f8>)
    29f0:	4798      	blx	r3
    29f2:	e7a6      	b.n	2942 <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    29f4:	4b74      	ldr	r3, [pc, #464]	; (2bc8 <printKeyboardBuffer+0x314>)
    29f6:	681b      	ldr	r3, [r3, #0]
    29f8:	2b01      	cmp	r3, #1
    29fa:	d014      	beq.n	2a26 <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    29fc:	4b72      	ldr	r3, [pc, #456]	; (2bc8 <printKeyboardBuffer+0x314>)
    29fe:	681b      	ldr	r3, [r3, #0]
    2a00:	2b02      	cmp	r3, #2
    2a02:	d026      	beq.n	2a52 <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    2a04:	4b70      	ldr	r3, [pc, #448]	; (2bc8 <printKeyboardBuffer+0x314>)
    2a06:	681b      	ldr	r3, [r3, #0]
    2a08:	2b03      	cmp	r3, #3
    2a0a:	d19a      	bne.n	2942 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    2a0c:	200d      	movs	r0, #13
    2a0e:	4b67      	ldr	r3, [pc, #412]	; (2bac <printKeyboardBuffer+0x2f8>)
    2a10:	4798      	blx	r3
					if(localEcho)
    2a12:	4b67      	ldr	r3, [pc, #412]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    2a14:	781b      	ldrb	r3, [r3, #0]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d093      	beq.n	2942 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    2a1a:	4b68      	ldr	r3, [pc, #416]	; (2bbc <printKeyboardBuffer+0x308>)
    2a1c:	6818      	ldr	r0, [r3, #0]
    2a1e:	210d      	movs	r1, #13
    2a20:	4b67      	ldr	r3, [pc, #412]	; (2bc0 <printKeyboardBuffer+0x30c>)
    2a22:	4798      	blx	r3
    2a24:	e78d      	b.n	2942 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    2a26:	200d      	movs	r0, #13
    2a28:	4b60      	ldr	r3, [pc, #384]	; (2bac <printKeyboardBuffer+0x2f8>)
    2a2a:	4698      	mov	r8, r3
    2a2c:	4798      	blx	r3
					sendChar(0x0A);
    2a2e:	200a      	movs	r0, #10
    2a30:	47c0      	blx	r8
					if(localEcho)
    2a32:	4b5f      	ldr	r3, [pc, #380]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    2a34:	781b      	ldrb	r3, [r3, #0]
    2a36:	2b00      	cmp	r3, #0
    2a38:	d0e0      	beq.n	29fc <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    2a3a:	4b60      	ldr	r3, [pc, #384]	; (2bbc <printKeyboardBuffer+0x308>)
    2a3c:	4699      	mov	r9, r3
    2a3e:	210d      	movs	r1, #13
    2a40:	6818      	ldr	r0, [r3, #0]
    2a42:	4b5f      	ldr	r3, [pc, #380]	; (2bc0 <printKeyboardBuffer+0x30c>)
    2a44:	4698      	mov	r8, r3
    2a46:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    2a48:	464b      	mov	r3, r9
    2a4a:	6818      	ldr	r0, [r3, #0]
    2a4c:	210a      	movs	r1, #10
    2a4e:	47c0      	blx	r8
    2a50:	e7d4      	b.n	29fc <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    2a52:	200a      	movs	r0, #10
    2a54:	4b55      	ldr	r3, [pc, #340]	; (2bac <printKeyboardBuffer+0x2f8>)
    2a56:	4798      	blx	r3
					if(localEcho)
    2a58:	4b55      	ldr	r3, [pc, #340]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    2a5a:	781b      	ldrb	r3, [r3, #0]
    2a5c:	2b00      	cmp	r3, #0
    2a5e:	d0d1      	beq.n	2a04 <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    2a60:	4b56      	ldr	r3, [pc, #344]	; (2bbc <printKeyboardBuffer+0x308>)
    2a62:	6818      	ldr	r0, [r3, #0]
    2a64:	210a      	movs	r1, #10
    2a66:	4b56      	ldr	r3, [pc, #344]	; (2bc0 <printKeyboardBuffer+0x30c>)
    2a68:	4798      	blx	r3
    2a6a:	e7cb      	b.n	2a04 <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    2a6c:	4a51      	ldr	r2, [pc, #324]	; (2bb4 <printKeyboardBuffer+0x300>)
    2a6e:	7813      	ldrb	r3, [r2, #0]
    2a70:	2101      	movs	r1, #1
    2a72:	404b      	eors	r3, r1
    2a74:	7013      	strb	r3, [r2, #0]
    2a76:	e764      	b.n	2942 <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    2a78:	4a54      	ldr	r2, [pc, #336]	; (2bcc <printKeyboardBuffer+0x318>)
    2a7a:	7813      	ldrb	r3, [r2, #0]
    2a7c:	2101      	movs	r1, #1
    2a7e:	404b      	eors	r3, r1
    2a80:	7013      	strb	r3, [r2, #0]
    2a82:	e75e      	b.n	2942 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2a84:	201b      	movs	r0, #27
    2a86:	4b49      	ldr	r3, [pc, #292]	; (2bac <printKeyboardBuffer+0x2f8>)
    2a88:	4698      	mov	r8, r3
    2a8a:	4798      	blx	r3
				sendChar(0x5B);
    2a8c:	205b      	movs	r0, #91	; 0x5b
    2a8e:	47c0      	blx	r8
				sendChar(0x44);
    2a90:	2044      	movs	r0, #68	; 0x44
    2a92:	47c0      	blx	r8
				if(localEcho)
    2a94:	4b46      	ldr	r3, [pc, #280]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    2a96:	781b      	ldrb	r3, [r3, #0]
    2a98:	2b00      	cmp	r3, #0
    2a9a:	d100      	bne.n	2a9e <printKeyboardBuffer+0x1ea>
    2a9c:	e751      	b.n	2942 <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    2a9e:	9b01      	ldr	r3, [sp, #4]
    2aa0:	7818      	ldrb	r0, [r3, #0]
    2aa2:	4b4b      	ldr	r3, [pc, #300]	; (2bd0 <printKeyboardBuffer+0x31c>)
    2aa4:	4798      	blx	r3
    2aa6:	e74c      	b.n	2942 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2aa8:	201b      	movs	r0, #27
    2aaa:	4b40      	ldr	r3, [pc, #256]	; (2bac <printKeyboardBuffer+0x2f8>)
    2aac:	4698      	mov	r8, r3
    2aae:	4798      	blx	r3
				sendChar(0x5B);
    2ab0:	205b      	movs	r0, #91	; 0x5b
    2ab2:	47c0      	blx	r8
				sendChar(0x42);
    2ab4:	2042      	movs	r0, #66	; 0x42
    2ab6:	47c0      	blx	r8
				if(localEcho)
    2ab8:	4b3d      	ldr	r3, [pc, #244]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    2aba:	781b      	ldrb	r3, [r3, #0]
    2abc:	2b00      	cmp	r3, #0
    2abe:	d100      	bne.n	2ac2 <printKeyboardBuffer+0x20e>
    2ac0:	e73f      	b.n	2942 <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    2ac2:	9b01      	ldr	r3, [sp, #4]
    2ac4:	7818      	ldrb	r0, [r3, #0]
    2ac6:	4b42      	ldr	r3, [pc, #264]	; (2bd0 <printKeyboardBuffer+0x31c>)
    2ac8:	4798      	blx	r3
    2aca:	e73a      	b.n	2942 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2acc:	201b      	movs	r0, #27
    2ace:	4b37      	ldr	r3, [pc, #220]	; (2bac <printKeyboardBuffer+0x2f8>)
    2ad0:	4698      	mov	r8, r3
    2ad2:	4798      	blx	r3
				sendChar(0x5B);
    2ad4:	205b      	movs	r0, #91	; 0x5b
    2ad6:	47c0      	blx	r8
				sendChar(0x41);
    2ad8:	2041      	movs	r0, #65	; 0x41
    2ada:	47c0      	blx	r8
				if(localEcho)
    2adc:	4b34      	ldr	r3, [pc, #208]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    2ade:	781b      	ldrb	r3, [r3, #0]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d100      	bne.n	2ae6 <printKeyboardBuffer+0x232>
    2ae4:	e72d      	b.n	2942 <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    2ae6:	9b01      	ldr	r3, [sp, #4]
    2ae8:	7818      	ldrb	r0, [r3, #0]
    2aea:	4b39      	ldr	r3, [pc, #228]	; (2bd0 <printKeyboardBuffer+0x31c>)
    2aec:	4798      	blx	r3
    2aee:	e728      	b.n	2942 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    2af0:	201b      	movs	r0, #27
    2af2:	4b2e      	ldr	r3, [pc, #184]	; (2bac <printKeyboardBuffer+0x2f8>)
    2af4:	4698      	mov	r8, r3
    2af6:	4798      	blx	r3
				sendChar(0x5B);
    2af8:	205b      	movs	r0, #91	; 0x5b
    2afa:	47c0      	blx	r8
				sendChar(0x43);
    2afc:	2043      	movs	r0, #67	; 0x43
    2afe:	47c0      	blx	r8
				if(localEcho)
    2b00:	4b2b      	ldr	r3, [pc, #172]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    2b02:	781b      	ldrb	r3, [r3, #0]
    2b04:	2b00      	cmp	r3, #0
    2b06:	d100      	bne.n	2b0a <printKeyboardBuffer+0x256>
    2b08:	e71b      	b.n	2942 <printKeyboardBuffer+0x8e>
					arrowKey(scanCodeBuffer[i]);
    2b0a:	9b01      	ldr	r3, [sp, #4]
    2b0c:	7818      	ldrb	r0, [r3, #0]
    2b0e:	4b30      	ldr	r3, [pc, #192]	; (2bd0 <printKeyboardBuffer+0x31c>)
    2b10:	4798      	blx	r3
    2b12:	e716      	b.n	2942 <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    2b14:	ab04      	add	r3, sp, #16
    2b16:	4642      	mov	r2, r8
    2b18:	5c98      	ldrb	r0, [r3, r2]
    2b1a:	4b24      	ldr	r3, [pc, #144]	; (2bac <printKeyboardBuffer+0x2f8>)
    2b1c:	4798      	blx	r3
					if(localEcho)
    2b1e:	4b24      	ldr	r3, [pc, #144]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	2b00      	cmp	r3, #0
    2b24:	d100      	bne.n	2b28 <printKeyboardBuffer+0x274>
    2b26:	e70c      	b.n	2942 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    2b28:	9b01      	ldr	r3, [sp, #4]
    2b2a:	781b      	ldrb	r3, [r3, #0]
    2b2c:	aa04      	add	r2, sp, #16
    2b2e:	5cd1      	ldrb	r1, [r2, r3]
    2b30:	4b22      	ldr	r3, [pc, #136]	; (2bbc <printKeyboardBuffer+0x308>)
    2b32:	6818      	ldr	r0, [r3, #0]
    2b34:	4b22      	ldr	r3, [pc, #136]	; (2bc0 <printKeyboardBuffer+0x30c>)
    2b36:	4798      	blx	r3
    2b38:	e703      	b.n	2942 <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    2b3a:	ab16      	add	r3, sp, #88	; 0x58
    2b3c:	4642      	mov	r2, r8
    2b3e:	5c98      	ldrb	r0, [r3, r2]
    2b40:	4b1a      	ldr	r3, [pc, #104]	; (2bac <printKeyboardBuffer+0x2f8>)
    2b42:	4798      	blx	r3
					if(localEcho)
    2b44:	4b1a      	ldr	r3, [pc, #104]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    2b46:	781b      	ldrb	r3, [r3, #0]
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d100      	bne.n	2b4e <printKeyboardBuffer+0x29a>
    2b4c:	e6f9      	b.n	2942 <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    2b4e:	9b01      	ldr	r3, [sp, #4]
    2b50:	781b      	ldrb	r3, [r3, #0]
    2b52:	aa16      	add	r2, sp, #88	; 0x58
    2b54:	5cd0      	ldrb	r0, [r2, r3]
    2b56:	4b18      	ldr	r3, [pc, #96]	; (2bb8 <printKeyboardBuffer+0x304>)
    2b58:	4798      	blx	r3
    2b5a:	e6f2      	b.n	2942 <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    2b5c:	ab3a      	add	r3, sp, #232	; 0xe8
    2b5e:	4642      	mov	r2, r8
    2b60:	5c98      	ldrb	r0, [r3, r2]
    2b62:	4b12      	ldr	r3, [pc, #72]	; (2bac <printKeyboardBuffer+0x2f8>)
    2b64:	4798      	blx	r3
					if(localEcho)
    2b66:	4b12      	ldr	r3, [pc, #72]	; (2bb0 <printKeyboardBuffer+0x2fc>)
    2b68:	781b      	ldrb	r3, [r3, #0]
    2b6a:	2b00      	cmp	r3, #0
    2b6c:	d100      	bne.n	2b70 <printKeyboardBuffer+0x2bc>
    2b6e:	e6e8      	b.n	2942 <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    2b70:	9b01      	ldr	r3, [sp, #4]
    2b72:	781b      	ldrb	r3, [r3, #0]
    2b74:	aa3a      	add	r2, sp, #232	; 0xe8
    2b76:	5cd0      	ldrb	r0, [r2, r3]
    2b78:	4b0f      	ldr	r3, [pc, #60]	; (2bb8 <printKeyboardBuffer+0x304>)
    2b7a:	4798      	blx	r3
    2b7c:	e6e1      	b.n	2942 <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    2b7e:	23ff      	movs	r3, #255	; 0xff
    2b80:	703b      	strb	r3, [r7, #0]
    2b82:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    2b84:	42bc      	cmp	r4, r7
    2b86:	d1fb      	bne.n	2b80 <printKeyboardBuffer+0x2cc>
}
    2b88:	b04c      	add	sp, #304	; 0x130
    2b8a:	bc1c      	pop	{r2, r3, r4}
    2b8c:	4690      	mov	r8, r2
    2b8e:	4699      	mov	r9, r3
    2b90:	46a2      	mov	sl, r4
    2b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b94:	00006cbc 	.word	0x00006cbc
    2b98:	00003ae9 	.word	0x00003ae9
    2b9c:	00006d3c 	.word	0x00006d3c
    2ba0:	20000028 	.word	0x20000028
    2ba4:	20000014 	.word	0x20000014
    2ba8:	00002889 	.word	0x00002889
    2bac:	000009e9 	.word	0x000009e9
    2bb0:	20000160 	.word	0x20000160
    2bb4:	200002bc 	.word	0x200002bc
    2bb8:	00000699 	.word	0x00000699
    2bbc:	200002cc 	.word	0x200002cc
    2bc0:	00000141 	.word	0x00000141
    2bc4:	200002ac 	.word	0x200002ac
    2bc8:	2000015c 	.word	0x2000015c
    2bcc:	200002c6 	.word	0x200002c6
    2bd0:	0000274d 	.word	0x0000274d

00002bd4 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    2bd4:	b510      	push	{r4, lr}
    2bd6:	4b07      	ldr	r3, [pc, #28]	; (2bf4 <removeFromKeyDown+0x20>)
    2bd8:	0019      	movs	r1, r3
    2bda:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    2bdc:	24ff      	movs	r4, #255	; 0xff
    2bde:	e002      	b.n	2be6 <removeFromKeyDown+0x12>
    2be0:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    2be2:	428b      	cmp	r3, r1
    2be4:	d004      	beq.n	2bf0 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    2be6:	781a      	ldrb	r2, [r3, #0]
    2be8:	4282      	cmp	r2, r0
    2bea:	d1f9      	bne.n	2be0 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    2bec:	701c      	strb	r4, [r3, #0]
    2bee:	e7f7      	b.n	2be0 <removeFromKeyDown+0xc>
		}
	}
}
    2bf0:	bd10      	pop	{r4, pc}
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	20000014 	.word	0x20000014

00002bf8 <readKeyboard>:
{
    2bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bfa:	46de      	mov	lr, fp
    2bfc:	4657      	mov	r7, sl
    2bfe:	464e      	mov	r6, r9
    2c00:	4645      	mov	r5, r8
    2c02:	b5e0      	push	{r5, r6, r7, lr}
    2c04:	b083      	sub	sp, #12
    2c06:	4e6d      	ldr	r6, [pc, #436]	; (2dbc <readKeyboard+0x1c4>)
    2c08:	0031      	movs	r1, r6
    2c0a:	3119      	adds	r1, #25
    2c0c:	31ff      	adds	r1, #255	; 0xff
    2c0e:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    2c10:	22ff      	movs	r2, #255	; 0xff
    2c12:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    2c14:	428b      	cmp	r3, r1
    2c16:	d1fc      	bne.n	2c12 <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    2c18:	4a69      	ldr	r2, [pc, #420]	; (2dc0 <readKeyboard+0x1c8>)
    2c1a:	6a91      	ldr	r1, [r2, #40]	; 0x28
    2c1c:	2380      	movs	r3, #128	; 0x80
    2c1e:	03db      	lsls	r3, r3, #15
    2c20:	430b      	orrs	r3, r1
    2c22:	6293      	str	r3, [r2, #40]	; 0x28
    2c24:	4c67      	ldr	r4, [pc, #412]	; (2dc4 <readKeyboard+0x1cc>)
    2c26:	341c      	adds	r4, #28
    2c28:	4b66      	ldr	r3, [pc, #408]	; (2dc4 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    2c2a:	4867      	ldr	r0, [pc, #412]	; (2dc8 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    2c2c:	4967      	ldr	r1, [pc, #412]	; (2dcc <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    2c2e:	681a      	ldr	r2, [r3, #0]
    2c30:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2c32:	cb04      	ldmia	r3!, {r2}
    2c34:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    2c36:	42a3      	cmp	r3, r4
    2c38:	d1f9      	bne.n	2c2e <readKeyboard+0x36>
    2c3a:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    2c3c:	4b64      	ldr	r3, [pc, #400]	; (2dd0 <readKeyboard+0x1d8>)
    2c3e:	469c      	mov	ip, r3
    2c40:	4f64      	ldr	r7, [pc, #400]	; (2dd4 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2c42:	4d65      	ldr	r5, [pc, #404]	; (2dd8 <readKeyboard+0x1e0>)
    2c44:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2c46:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    2c48:	4663      	mov	r3, ip
    2c4a:	58d3      	ldr	r3, [r2, r3]
    2c4c:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    2c4e:	5953      	ldr	r3, [r2, r5]
    2c50:	4962      	ldr	r1, [pc, #392]	; (2ddc <readKeyboard+0x1e4>)
    2c52:	4688      	mov	r8, r1
    2c54:	4443      	add	r3, r8
    2c56:	7819      	ldrb	r1, [r3, #0]
    2c58:	4321      	orrs	r1, r4
    2c5a:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    2c5c:	7819      	ldrb	r1, [r3, #0]
    2c5e:	4301      	orrs	r1, r0
    2c60:	7019      	strb	r1, [r3, #0]
    2c62:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    2c64:	2a28      	cmp	r2, #40	; 0x28
    2c66:	d1ef      	bne.n	2c48 <readKeyboard+0x50>
    2c68:	4b56      	ldr	r3, [pc, #344]	; (2dc4 <readKeyboard+0x1cc>)
    2c6a:	4699      	mov	r9, r3
    2c6c:	2300      	movs	r3, #0
    2c6e:	4698      	mov	r8, r3
    2c70:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    2c72:	4b5b      	ldr	r3, [pc, #364]	; (2de0 <readKeyboard+0x1e8>)
    2c74:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2c76:	4d52      	ldr	r5, [pc, #328]	; (2dc0 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2c78:	4b50      	ldr	r3, [pc, #320]	; (2dbc <readKeyboard+0x1c4>)
    2c7a:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    2c7c:	4b53      	ldr	r3, [pc, #332]	; (2dcc <readKeyboard+0x1d4>)
    2c7e:	469a      	mov	sl, r3
    2c80:	9601      	str	r6, [sp, #4]
    2c82:	464e      	mov	r6, r9
    2c84:	4647      	mov	r7, r8
    2c86:	e015      	b.n	2cb4 <readKeyboard+0xbc>
    2c88:	3304      	adds	r3, #4
    2c8a:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    2c8c:	42a3      	cmp	r3, r4
    2c8e:	d008      	beq.n	2ca2 <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    2c90:	6a28      	ldr	r0, [r5, #32]
    2c92:	681e      	ldr	r6, [r3, #0]
    2c94:	4206      	tst	r6, r0
    2c96:	d0f7      	beq.n	2c88 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    2c98:	0090      	lsls	r0, r2, #2
    2c9a:	4666      	mov	r6, ip
    2c9c:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    2c9e:	3201      	adds	r2, #1
    2ca0:	e7f2      	b.n	2c88 <readKeyboard+0x90>
    2ca2:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    2ca4:	4649      	mov	r1, r9
    2ca6:	6809      	ldr	r1, [r1, #0]
    2ca8:	4650      	mov	r0, sl
    2caa:	6001      	str	r1, [r0, #0]
    2cac:	3604      	adds	r6, #4
    2cae:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    2cb0:	2f46      	cmp	r7, #70	; 0x46
    2cb2:	d00a      	beq.n	2cca <readKeyboard+0xd2>
    2cb4:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    2cb6:	465b      	mov	r3, fp
    2cb8:	6831      	ldr	r1, [r6, #0]
    2cba:	6019      	str	r1, [r3, #0]
    2cbc:	4b44      	ldr	r3, [pc, #272]	; (2dd0 <readKeyboard+0x1d8>)
    2cbe:	4698      	mov	r8, r3
    2cc0:	001c      	movs	r4, r3
    2cc2:	3428      	adds	r4, #40	; 0x28
    2cc4:	0039      	movs	r1, r7
    2cc6:	9600      	str	r6, [sp, #0]
    2cc8:	e7e2      	b.n	2c90 <readKeyboard+0x98>
    2cca:	4647      	mov	r7, r8
    2ccc:	9e01      	ldr	r6, [sp, #4]
    2cce:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    2cd0:	4d3d      	ldr	r5, [pc, #244]	; (2dc8 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    2cd2:	4c3e      	ldr	r4, [pc, #248]	; (2dcc <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    2cd4:	6808      	ldr	r0, [r1, #0]
    2cd6:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2cd8:	c901      	ldmia	r1!, {r0}
    2cda:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2cdc:	4299      	cmp	r1, r3
    2cde:	d1f9      	bne.n	2cd4 <readKeyboard+0xdc>
    2ce0:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    2ce2:	4b38      	ldr	r3, [pc, #224]	; (2dc4 <readKeyboard+0x1cc>)
    2ce4:	4699      	mov	r9, r3
    2ce6:	4b3b      	ldr	r3, [pc, #236]	; (2dd4 <readKeyboard+0x1dc>)
    2ce8:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    2cea:	4b3e      	ldr	r3, [pc, #248]	; (2de4 <readKeyboard+0x1ec>)
    2cec:	469c      	mov	ip, r3
    2cee:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2cf0:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    2cf2:	4643      	mov	r3, r8
    2cf4:	4648      	mov	r0, r9
    2cf6:	5808      	ldr	r0, [r1, r0]
    2cf8:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    2cfa:	4663      	mov	r3, ip
    2cfc:	58cb      	ldr	r3, [r1, r3]
    2cfe:	4837      	ldr	r0, [pc, #220]	; (2ddc <readKeyboard+0x1e4>)
    2d00:	4682      	mov	sl, r0
    2d02:	4453      	add	r3, sl
    2d04:	7818      	ldrb	r0, [r3, #0]
    2d06:	4328      	orrs	r0, r5
    2d08:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    2d0a:	7818      	ldrb	r0, [r3, #0]
    2d0c:	4320      	orrs	r0, r4
    2d0e:	7018      	strb	r0, [r3, #0]
    2d10:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    2d12:	291c      	cmp	r1, #28
    2d14:	d1ed      	bne.n	2cf2 <readKeyboard+0xfa>
    2d16:	2300      	movs	r3, #0
    2d18:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    2d1a:	4b31      	ldr	r3, [pc, #196]	; (2de0 <readKeyboard+0x1e8>)
    2d1c:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2d1e:	4d28      	ldr	r5, [pc, #160]	; (2dc0 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2d20:	4b26      	ldr	r3, [pc, #152]	; (2dbc <readKeyboard+0x1c4>)
    2d22:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    2d24:	4b29      	ldr	r3, [pc, #164]	; (2dcc <readKeyboard+0x1d4>)
    2d26:	469a      	mov	sl, r3
    2d28:	46b1      	mov	r9, r6
    2d2a:	003e      	movs	r6, r7
    2d2c:	4667      	mov	r7, ip
    2d2e:	e015      	b.n	2d5c <readKeyboard+0x164>
    2d30:	3104      	adds	r1, #4
    2d32:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    2d34:	42a3      	cmp	r3, r4
    2d36:	d008      	beq.n	2d4a <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    2d38:	6a28      	ldr	r0, [r5, #32]
    2d3a:	680e      	ldr	r6, [r1, #0]
    2d3c:	4206      	tst	r6, r0
    2d3e:	d0f7      	beq.n	2d30 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    2d40:	0090      	lsls	r0, r2, #2
    2d42:	4646      	mov	r6, r8
    2d44:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    2d46:	3201      	adds	r2, #1
    2d48:	e7f2      	b.n	2d30 <readKeyboard+0x138>
    2d4a:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    2d4c:	4663      	mov	r3, ip
    2d4e:	681b      	ldr	r3, [r3, #0]
    2d50:	4651      	mov	r1, sl
    2d52:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    2d54:	3701      	adds	r7, #1
    2d56:	3604      	adds	r6, #4
    2d58:	2f0a      	cmp	r7, #10
    2d5a:	d009      	beq.n	2d70 <readKeyboard+0x178>
    2d5c:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    2d5e:	465b      	mov	r3, fp
    2d60:	6831      	ldr	r1, [r6, #0]
    2d62:	6019      	str	r1, [r3, #0]
    2d64:	003b      	movs	r3, r7
    2d66:	003c      	movs	r4, r7
    2d68:	3446      	adds	r4, #70	; 0x46
    2d6a:	4916      	ldr	r1, [pc, #88]	; (2dc4 <readKeyboard+0x1cc>)
    2d6c:	9600      	str	r6, [sp, #0]
    2d6e:	e7e3      	b.n	2d38 <readKeyboard+0x140>
    2d70:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    2d72:	2a00      	cmp	r2, #0
    2d74:	dd08      	ble.n	2d88 <readKeyboard+0x190>
    2d76:	4b1c      	ldr	r3, [pc, #112]	; (2de8 <readKeyboard+0x1f0>)
    2d78:	0092      	lsls	r2, r2, #2
    2d7a:	4910      	ldr	r1, [pc, #64]	; (2dbc <readKeyboard+0x1c4>)
    2d7c:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    2d7e:	ce02      	ldmia	r6!, {r1}
    2d80:	7019      	strb	r1, [r3, #0]
    2d82:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    2d84:	42b2      	cmp	r2, r6
    2d86:	d1fa      	bne.n	2d7e <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    2d88:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    2d8a:	4d18      	ldr	r5, [pc, #96]	; (2dec <readKeyboard+0x1f4>)
    2d8c:	4e18      	ldr	r6, [pc, #96]	; (2df0 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    2d8e:	4f19      	ldr	r7, [pc, #100]	; (2df4 <readKeyboard+0x1fc>)
    2d90:	e002      	b.n	2d98 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    2d92:	3401      	adds	r4, #1
    2d94:	2c46      	cmp	r4, #70	; 0x46
    2d96:	d00a      	beq.n	2dae <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    2d98:	0020      	movs	r0, r4
    2d9a:	47a8      	blx	r5
    2d9c:	2800      	cmp	r0, #0
    2d9e:	d0f8      	beq.n	2d92 <readKeyboard+0x19a>
    2da0:	0020      	movs	r0, r4
    2da2:	47b0      	blx	r6
    2da4:	2800      	cmp	r0, #0
    2da6:	d1f4      	bne.n	2d92 <readKeyboard+0x19a>
			removeFromKeyDown(i);
    2da8:	0020      	movs	r0, r4
    2daa:	47b8      	blx	r7
    2dac:	e7f1      	b.n	2d92 <readKeyboard+0x19a>
}
    2dae:	b003      	add	sp, #12
    2db0:	bc3c      	pop	{r2, r3, r4, r5}
    2db2:	4690      	mov	r8, r2
    2db4:	4699      	mov	r9, r3
    2db6:	46a2      	mov	sl, r4
    2db8:	46ab      	mov	fp, r5
    2dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2dbc:	2000003c 	.word	0x2000003c
    2dc0:	41004400 	.word	0x41004400
    2dc4:	00006ddc 	.word	0x00006ddc
    2dc8:	41004408 	.word	0x41004408
    2dcc:	41004414 	.word	0x41004414
    2dd0:	00006e14 	.word	0x00006e14
    2dd4:	41004404 	.word	0x41004404
    2dd8:	00006e3c 	.word	0x00006e3c
    2ddc:	41004440 	.word	0x41004440
    2de0:	41004418 	.word	0x41004418
    2de4:	00006df8 	.word	0x00006df8
    2de8:	20000028 	.word	0x20000028
    2dec:	00002889 	.word	0x00002889
    2df0:	0000285d 	.word	0x0000285d
    2df4:	00002bd5 	.word	0x00002bd5

00002df8 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    2df8:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    2dfa:	094b      	lsrs	r3, r1, #5
    2dfc:	2407      	movs	r4, #7
    2dfe:	43a0      	bics	r0, r4
    2e00:	4318      	orrs	r0, r3
    2e02:	4b05      	ldr	r3, [pc, #20]	; (2e18 <setColorRGB+0x20>)
    2e04:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2e06:	00c9      	lsls	r1, r1, #3
    2e08:	23e0      	movs	r3, #224	; 0xe0
    2e0a:	4019      	ands	r1, r3
    2e0c:	08d2      	lsrs	r2, r2, #3
    2e0e:	430a      	orrs	r2, r1
    2e10:	4b02      	ldr	r3, [pc, #8]	; (2e1c <setColorRGB+0x24>)
    2e12:	801a      	strh	r2, [r3, #0]
}
    2e14:	bd10      	pop	{r4, pc}
    2e16:	46c0      	nop			; (mov r8, r8)
    2e18:	20000ab2 	.word	0x20000ab2
    2e1c:	20000ab4 	.word	0x20000ab4

00002e20 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    2e20:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    2e22:	094b      	lsrs	r3, r1, #5
    2e24:	2407      	movs	r4, #7
    2e26:	43a0      	bics	r0, r4
    2e28:	4318      	orrs	r0, r3
    2e2a:	4b05      	ldr	r3, [pc, #20]	; (2e40 <setBackColorRGB+0x20>)
    2e2c:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    2e2e:	00c9      	lsls	r1, r1, #3
    2e30:	23e0      	movs	r3, #224	; 0xe0
    2e32:	4019      	ands	r1, r3
    2e34:	08d2      	lsrs	r2, r2, #3
    2e36:	430a      	orrs	r2, r1
    2e38:	4b02      	ldr	r3, [pc, #8]	; (2e44 <setBackColorRGB+0x24>)
    2e3a:	801a      	strh	r2, [r3, #0]
}
    2e3c:	bd10      	pop	{r4, pc}
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	20000ab6 	.word	0x20000ab6
    2e44:	20000ab0 	.word	0x20000ab0

00002e48 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    2e48:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2e4a:	4c19      	ldr	r4, [pc, #100]	; (2eb0 <LCD_Fast_Fill+0x68>)
    2e4c:	4b19      	ldr	r3, [pc, #100]	; (2eb4 <LCD_Fast_Fill+0x6c>)
    2e4e:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    2e50:	0200      	lsls	r0, r0, #8
    2e52:	4301      	orrs	r1, r0
    2e54:	4b18      	ldr	r3, [pc, #96]	; (2eb8 <LCD_Fast_Fill+0x70>)
    2e56:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    2e58:	17d3      	asrs	r3, r2, #31
    2e5a:	260f      	movs	r6, #15
    2e5c:	401e      	ands	r6, r3
    2e5e:	18b6      	adds	r6, r6, r2
    2e60:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    2e62:	2500      	movs	r5, #0
    2e64:	2e00      	cmp	r6, #0
    2e66:	dd0c      	ble.n	2e82 <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    2e68:	4c12      	ldr	r4, [pc, #72]	; (2eb4 <LCD_Fast_Fill+0x6c>)
    2e6a:	2180      	movs	r1, #128	; 0x80
    2e6c:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    2e6e:	4812      	ldr	r0, [pc, #72]	; (2eb8 <LCD_Fast_Fill+0x70>)
{
    2e70:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    2e72:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    2e74:	6001      	str	r1, [r0, #0]
    2e76:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d1fa      	bne.n	2e72 <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    2e7c:	3501      	adds	r5, #1
    2e7e:	42ae      	cmp	r6, r5
    2e80:	d1f6      	bne.n	2e70 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    2e82:	0713      	lsls	r3, r2, #28
    2e84:	d013      	beq.n	2eae <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    2e86:	17d3      	asrs	r3, r2, #31
    2e88:	0f1b      	lsrs	r3, r3, #28
    2e8a:	18d2      	adds	r2, r2, r3
    2e8c:	210f      	movs	r1, #15
    2e8e:	4011      	ands	r1, r2
    2e90:	1ac9      	subs	r1, r1, r3
    2e92:	1c4b      	adds	r3, r1, #1
    2e94:	2b00      	cmp	r3, #0
    2e96:	dd0a      	ble.n	2eae <LCD_Fast_Fill+0x66>
    2e98:	0019      	movs	r1, r3
    2e9a:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2e9c:	4c05      	ldr	r4, [pc, #20]	; (2eb4 <LCD_Fast_Fill+0x6c>)
    2e9e:	2280      	movs	r2, #128	; 0x80
    2ea0:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    2ea2:	4805      	ldr	r0, [pc, #20]	; (2eb8 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    2ea4:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    2ea6:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    2ea8:	3301      	adds	r3, #1
    2eaa:	4299      	cmp	r1, r3
    2eac:	d1fa      	bne.n	2ea4 <LCD_Fast_Fill+0x5c>
	}
}
    2eae:	bd70      	pop	{r4, r5, r6, pc}
    2eb0:	0000ffff 	.word	0x0000ffff
    2eb4:	41004494 	.word	0x41004494
    2eb8:	41004498 	.word	0x41004498

00002ebc <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ebe:	b083      	sub	sp, #12
    2ec0:	0007      	movs	r7, r0
    2ec2:	9100      	str	r1, [sp, #0]
    2ec4:	0016      	movs	r6, r2
    2ec6:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    2ec8:	2100      	movs	r1, #0
    2eca:	202a      	movs	r0, #42	; 0x2a
    2ecc:	4c17      	ldr	r4, [pc, #92]	; (2f2c <setXY+0x70>)
    2ece:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2ed0:	0a38      	lsrs	r0, r7, #8
    2ed2:	4d17      	ldr	r5, [pc, #92]	; (2f30 <setXY+0x74>)
    2ed4:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    2ed6:	2101      	movs	r1, #1
    2ed8:	202a      	movs	r0, #42	; 0x2a
    2eda:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2edc:	b2f8      	uxtb	r0, r7
    2ede:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2ee0:	2102      	movs	r1, #2
    2ee2:	202a      	movs	r0, #42	; 0x2a
    2ee4:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    2ee6:	0a30      	lsrs	r0, r6, #8
    2ee8:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    2eea:	2103      	movs	r1, #3
    2eec:	202a      	movs	r0, #42	; 0x2a
    2eee:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    2ef0:	b2f0      	uxtb	r0, r6
    2ef2:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    2ef4:	2100      	movs	r1, #0
    2ef6:	202b      	movs	r0, #43	; 0x2b
    2ef8:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2efa:	9e00      	ldr	r6, [sp, #0]
    2efc:	0a30      	lsrs	r0, r6, #8
    2efe:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    2f00:	2101      	movs	r1, #1
    2f02:	202b      	movs	r0, #43	; 0x2b
    2f04:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2f06:	b2f0      	uxtb	r0, r6
    2f08:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    2f0a:	2102      	movs	r1, #2
    2f0c:	202b      	movs	r0, #43	; 0x2b
    2f0e:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    2f10:	9e01      	ldr	r6, [sp, #4]
    2f12:	0a30      	lsrs	r0, r6, #8
    2f14:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    2f16:	2103      	movs	r1, #3
    2f18:	202b      	movs	r0, #43	; 0x2b
    2f1a:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2f1c:	b2f0      	uxtb	r0, r6
    2f1e:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    2f20:	2100      	movs	r1, #0
    2f22:	202c      	movs	r0, #44	; 0x2c
    2f24:	47a0      	blx	r4
}
    2f26:	b003      	add	sp, #12
    2f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f2a:	46c0      	nop			; (mov r8, r8)
    2f2c:	00003061 	.word	0x00003061
    2f30:	00003091 	.word	0x00003091

00002f34 <fillRect>:
{
    2f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f36:	46ce      	mov	lr, r9
    2f38:	4647      	mov	r7, r8
    2f3a:	b580      	push	{r7, lr}
    2f3c:	b083      	sub	sp, #12
    2f3e:	0006      	movs	r6, r0
    2f40:	4689      	mov	r9, r1
    2f42:	0014      	movs	r4, r2
    2f44:	001d      	movs	r5, r3
	if (x1>x2)
    2f46:	4290      	cmp	r0, r2
    2f48:	dd01      	ble.n	2f4e <fillRect+0x1a>
		x1 = x2;
    2f4a:	0016      	movs	r6, r2
		x2 = temp;
    2f4c:	0004      	movs	r4, r0
	if (y1>y2)
    2f4e:	45a9      	cmp	r9, r5
    2f50:	dd02      	ble.n	2f58 <fillRect+0x24>
    2f52:	0033      	movs	r3, r6
		x1 = x2;
    2f54:	0026      	movs	r6, r4
		x2 = temp;
    2f56:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    2f58:	2380      	movs	r3, #128	; 0x80
    2f5a:	03db      	lsls	r3, r3, #15
    2f5c:	4698      	mov	r8, r3
    2f5e:	4b11      	ldr	r3, [pc, #68]	; (2fa4 <fillRect+0x70>)
    2f60:	4642      	mov	r2, r8
    2f62:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    2f64:	b2ab      	uxth	r3, r5
    2f66:	b2a2      	uxth	r2, r4
    2f68:	4649      	mov	r1, r9
    2f6a:	4668      	mov	r0, sp
    2f6c:	80c1      	strh	r1, [r0, #6]
    2f6e:	88c1      	ldrh	r1, [r0, #6]
    2f70:	b2b0      	uxth	r0, r6
    2f72:	4f0d      	ldr	r7, [pc, #52]	; (2fa8 <fillRect+0x74>)
    2f74:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    2f76:	4f0d      	ldr	r7, [pc, #52]	; (2fac <fillRect+0x78>)
    2f78:	2380      	movs	r3, #128	; 0x80
    2f7a:	041b      	lsls	r3, r3, #16
    2f7c:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    2f7e:	1ba4      	subs	r4, r4, r6
    2f80:	3401      	adds	r4, #1
    2f82:	464b      	mov	r3, r9
    2f84:	1aea      	subs	r2, r5, r3
    2f86:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    2f88:	4362      	muls	r2, r4
    2f8a:	4b09      	ldr	r3, [pc, #36]	; (2fb0 <fillRect+0x7c>)
    2f8c:	8819      	ldrh	r1, [r3, #0]
    2f8e:	4b09      	ldr	r3, [pc, #36]	; (2fb4 <fillRect+0x80>)
    2f90:	8818      	ldrh	r0, [r3, #0]
    2f92:	4b09      	ldr	r3, [pc, #36]	; (2fb8 <fillRect+0x84>)
    2f94:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2f96:	4643      	mov	r3, r8
    2f98:	603b      	str	r3, [r7, #0]
}
    2f9a:	b003      	add	sp, #12
    2f9c:	bc0c      	pop	{r2, r3}
    2f9e:	4690      	mov	r8, r2
    2fa0:	4699      	mov	r9, r3
    2fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fa4:	41004494 	.word	0x41004494
    2fa8:	00002ebd 	.word	0x00002ebd
    2fac:	41004498 	.word	0x41004498
    2fb0:	20000ab4 	.word	0x20000ab4
    2fb4:	20000ab2 	.word	0x20000ab2
    2fb8:	00002e49 	.word	0x00002e49

00002fbc <clrXY>:
{
    2fbc:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2fbe:	4b04      	ldr	r3, [pc, #16]	; (2fd0 <clrXY+0x14>)
    2fc0:	881b      	ldrh	r3, [r3, #0]
    2fc2:	4a04      	ldr	r2, [pc, #16]	; (2fd4 <clrXY+0x18>)
    2fc4:	8812      	ldrh	r2, [r2, #0]
    2fc6:	2100      	movs	r1, #0
    2fc8:	2000      	movs	r0, #0
    2fca:	4c03      	ldr	r4, [pc, #12]	; (2fd8 <clrXY+0x1c>)
    2fcc:	47a0      	blx	r4
}
    2fce:	bd10      	pop	{r4, pc}
    2fd0:	20000156 	.word	0x20000156
    2fd4:	20000154 	.word	0x20000154
    2fd8:	00002ebd 	.word	0x00002ebd

00002fdc <clrScr>:
{
    2fdc:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2fde:	2280      	movs	r2, #128	; 0x80
    2fe0:	03d2      	lsls	r2, r2, #15
    2fe2:	4b02      	ldr	r3, [pc, #8]	; (2fec <clrScr+0x10>)
    2fe4:	601a      	str	r2, [r3, #0]
	clrXY();
    2fe6:	4b02      	ldr	r3, [pc, #8]	; (2ff0 <clrScr+0x14>)
    2fe8:	4798      	blx	r3
}
    2fea:	bd10      	pop	{r4, pc}
    2fec:	41004494 	.word	0x41004494
    2ff0:	00002fbd 	.word	0x00002fbd

00002ff4 <setPixel>:

void setPixel(uint16_t color)
{
    2ff4:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	LCD_Write_DATA16((color>>8),(color&0xFF));
    2ff6:	b2c1      	uxtb	r1, r0
    2ff8:	0a00      	lsrs	r0, r0, #8
    2ffa:	4b01      	ldr	r3, [pc, #4]	; (3000 <setPixel+0xc>)
    2ffc:	4798      	blx	r3
}
    2ffe:	bd10      	pop	{r4, pc}
    3000:	00003079 	.word	0x00003079

00003004 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    3004:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    3006:	2300      	movs	r3, #0
    3008:	4a06      	ldr	r2, [pc, #24]	; (3024 <clearScreen+0x20>)
    300a:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    300c:	4a06      	ldr	r2, [pc, #24]	; (3028 <clearScreen+0x24>)
    300e:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    3010:	4b06      	ldr	r3, [pc, #24]	; (302c <clearScreen+0x28>)
    3012:	881b      	ldrh	r3, [r3, #0]
    3014:	4a06      	ldr	r2, [pc, #24]	; (3030 <clearScreen+0x2c>)
    3016:	8812      	ldrh	r2, [r2, #0]
    3018:	2100      	movs	r1, #0
    301a:	2000      	movs	r0, #0
    301c:	4c05      	ldr	r4, [pc, #20]	; (3034 <clearScreen+0x30>)
    301e:	47a0      	blx	r4
}
    3020:	bd10      	pop	{r4, pc}
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	20000ab2 	.word	0x20000ab2
    3028:	20000ab4 	.word	0x20000ab4
    302c:	20000154 	.word	0x20000154
    3030:	20000156 	.word	0x20000156
    3034:	00002f35 	.word	0x00002f35

00003038 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    3038:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    303a:	4c06      	ldr	r4, [pc, #24]	; (3054 <LCD_Write_Bus+0x1c>)
    303c:	4b06      	ldr	r3, [pc, #24]	; (3058 <LCD_Write_Bus+0x20>)
    303e:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    3040:	0200      	lsls	r0, r0, #8
    3042:	4301      	orrs	r1, r0
    3044:	4b05      	ldr	r3, [pc, #20]	; (305c <LCD_Write_Bus+0x24>)
    3046:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    3048:	2280      	movs	r2, #128	; 0x80
    304a:	0292      	lsls	r2, r2, #10
    304c:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    304e:	601a      	str	r2, [r3, #0]
}
    3050:	bd10      	pop	{r4, pc}
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	41004494 	.word	0x41004494
    3058:	0000ffff 	.word	0x0000ffff
    305c:	41004498 	.word	0x41004498

00003060 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    3060:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    3062:	2280      	movs	r2, #128	; 0x80
    3064:	0412      	lsls	r2, r2, #16
    3066:	4b02      	ldr	r3, [pc, #8]	; (3070 <LCD_Write_COM16+0x10>)
    3068:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    306a:	4b02      	ldr	r3, [pc, #8]	; (3074 <LCD_Write_COM16+0x14>)
    306c:	4798      	blx	r3
}
    306e:	bd10      	pop	{r4, pc}
    3070:	41004494 	.word	0x41004494
    3074:	00003039 	.word	0x00003039

00003078 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    3078:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    307a:	2280      	movs	r2, #128	; 0x80
    307c:	0412      	lsls	r2, r2, #16
    307e:	4b02      	ldr	r3, [pc, #8]	; (3088 <LCD_Write_DATA16+0x10>)
    3080:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    3082:	4b02      	ldr	r3, [pc, #8]	; (308c <LCD_Write_DATA16+0x14>)
    3084:	4798      	blx	r3
}
    3086:	bd10      	pop	{r4, pc}
    3088:	41004498 	.word	0x41004498
    308c:	00003039 	.word	0x00003039

00003090 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    3090:	b510      	push	{r4, lr}
    3092:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    3094:	2280      	movs	r2, #128	; 0x80
    3096:	0412      	lsls	r2, r2, #16
    3098:	4b02      	ldr	r3, [pc, #8]	; (30a4 <LCD_Write_DATA8+0x14>)
    309a:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    309c:	2000      	movs	r0, #0
    309e:	4b02      	ldr	r3, [pc, #8]	; (30a8 <LCD_Write_DATA8+0x18>)
    30a0:	4798      	blx	r3
}
    30a2:	bd10      	pop	{r4, pc}
    30a4:	41004498 	.word	0x41004498
    30a8:	00003039 	.word	0x00003039

000030ac <InitLCD>:
{
    30ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ae:	46c6      	mov	lr, r8
    30b0:	b500      	push	{lr}
    30b2:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    30b4:	4b80      	ldr	r3, [pc, #512]	; (32b8 <InitLCD+0x20c>)
    30b6:	4f81      	ldr	r7, [pc, #516]	; (32bc <InitLCD+0x210>)
    30b8:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    30ba:	2580      	movs	r5, #128	; 0x80
    30bc:	05ed      	lsls	r5, r5, #23
    30be:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    30c0:	2680      	movs	r6, #128	; 0x80
    30c2:	03f6      	lsls	r6, r6, #15
    30c4:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    30c6:	2080      	movs	r0, #128	; 0x80
    30c8:	0280      	lsls	r0, r0, #10
    30ca:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    30cc:	2180      	movs	r1, #128	; 0x80
    30ce:	0409      	lsls	r1, r1, #16
    30d0:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    30d2:	2280      	movs	r2, #128	; 0x80
    30d4:	0252      	lsls	r2, r2, #9
    30d6:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    30d8:	4c79      	ldr	r4, [pc, #484]	; (32c0 <InitLCD+0x214>)
    30da:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    30dc:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    30de:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    30e0:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    30e2:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    30e4:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    30e6:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    30e8:	4f76      	ldr	r7, [pc, #472]	; (32c4 <InitLCD+0x218>)
    30ea:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    30ec:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    30ee:	2005      	movs	r0, #5
    30f0:	4b75      	ldr	r3, [pc, #468]	; (32c8 <InitLCD+0x21c>)
    30f2:	4698      	mov	r8, r3
    30f4:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    30f6:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    30f8:	2005      	movs	r0, #5
    30fa:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    30fc:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    30fe:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    3100:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    3102:	4b6f      	ldr	r3, [pc, #444]	; (32c0 <InitLCD+0x214>)
    3104:	4698      	mov	r8, r3
    3106:	2580      	movs	r5, #128	; 0x80
    3108:	042d      	lsls	r5, r5, #16
    310a:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    310c:	4e6f      	ldr	r6, [pc, #444]	; (32cc <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    310e:	4643      	mov	r3, r8
    3110:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    3112:	5da1      	ldrb	r1, [r4, r6]
    3114:	4b6e      	ldr	r3, [pc, #440]	; (32d0 <InitLCD+0x224>)
    3116:	5ce0      	ldrb	r0, [r4, r3]
    3118:	4b6e      	ldr	r3, [pc, #440]	; (32d4 <InitLCD+0x228>)
    311a:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    311c:	4b69      	ldr	r3, [pc, #420]	; (32c4 <InitLCD+0x218>)
    311e:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    3120:	4b6d      	ldr	r3, [pc, #436]	; (32d8 <InitLCD+0x22c>)
    3122:	5ce0      	ldrb	r0, [r4, r3]
    3124:	4b6d      	ldr	r3, [pc, #436]	; (32dc <InitLCD+0x230>)
    3126:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    3128:	3401      	adds	r4, #1
    312a:	2c46      	cmp	r4, #70	; 0x46
    312c:	d1ef      	bne.n	310e <InitLCD+0x62>
    312e:	23d1      	movs	r3, #209	; 0xd1
    3130:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    3132:	4d68      	ldr	r5, [pc, #416]	; (32d4 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    3134:	4f69      	ldr	r7, [pc, #420]	; (32dc <InitLCD+0x230>)
    3136:	4c6a      	ldr	r4, [pc, #424]	; (32e0 <InitLCD+0x234>)
    3138:	0026      	movs	r6, r4
    313a:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    313c:	2100      	movs	r1, #0
    313e:	9801      	ldr	r0, [sp, #4]
    3140:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    3142:	7820      	ldrb	r0, [r4, #0]
    3144:	47b8      	blx	r7
    3146:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    3148:	42a6      	cmp	r6, r4
    314a:	d1f7      	bne.n	313c <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    314c:	9b01      	ldr	r3, [sp, #4]
    314e:	3301      	adds	r3, #1
    3150:	b2db      	uxtb	r3, r3
    3152:	9301      	str	r3, [sp, #4]
    3154:	2bd6      	cmp	r3, #214	; 0xd6
    3156:	d1ee      	bne.n	3136 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    3158:	2100      	movs	r1, #0
    315a:	20f0      	movs	r0, #240	; 0xf0
    315c:	4c5d      	ldr	r4, [pc, #372]	; (32d4 <InitLCD+0x228>)
    315e:	47a0      	blx	r4
    3160:	2055      	movs	r0, #85	; 0x55
    3162:	4d5e      	ldr	r5, [pc, #376]	; (32dc <InitLCD+0x230>)
    3164:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    3166:	2101      	movs	r1, #1
    3168:	20f0      	movs	r0, #240	; 0xf0
    316a:	47a0      	blx	r4
    316c:	20aa      	movs	r0, #170	; 0xaa
    316e:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    3170:	2102      	movs	r1, #2
    3172:	20f0      	movs	r0, #240	; 0xf0
    3174:	47a0      	blx	r4
    3176:	2052      	movs	r0, #82	; 0x52
    3178:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    317a:	2103      	movs	r1, #3
    317c:	20f0      	movs	r0, #240	; 0xf0
    317e:	47a0      	blx	r4
    3180:	2008      	movs	r0, #8
    3182:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    3184:	2104      	movs	r1, #4
    3186:	20f0      	movs	r0, #240	; 0xf0
    3188:	47a0      	blx	r4
    318a:	2000      	movs	r0, #0
    318c:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    318e:	2100      	movs	r1, #0
    3190:	20b1      	movs	r0, #177	; 0xb1
    3192:	47a0      	blx	r4
    3194:	20cc      	movs	r0, #204	; 0xcc
    3196:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    3198:	2101      	movs	r1, #1
    319a:	20b1      	movs	r0, #177	; 0xb1
    319c:	47a0      	blx	r4
    319e:	2000      	movs	r0, #0
    31a0:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    31a2:	2100      	movs	r1, #0
    31a4:	20b5      	movs	r0, #181	; 0xb5
    31a6:	47a0      	blx	r4
    31a8:	2050      	movs	r0, #80	; 0x50
    31aa:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    31ac:	2100      	movs	r1, #0
    31ae:	20b6      	movs	r0, #182	; 0xb6
    31b0:	47a0      	blx	r4
    31b2:	2005      	movs	r0, #5
    31b4:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    31b6:	2100      	movs	r1, #0
    31b8:	20b7      	movs	r0, #183	; 0xb7
    31ba:	47a0      	blx	r4
    31bc:	2070      	movs	r0, #112	; 0x70
    31be:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    31c0:	2101      	movs	r1, #1
    31c2:	20b7      	movs	r0, #183	; 0xb7
    31c4:	47a0      	blx	r4
    31c6:	2070      	movs	r0, #112	; 0x70
    31c8:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    31ca:	2100      	movs	r1, #0
    31cc:	20b8      	movs	r0, #184	; 0xb8
    31ce:	47a0      	blx	r4
    31d0:	2001      	movs	r0, #1
    31d2:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    31d4:	2101      	movs	r1, #1
    31d6:	20b8      	movs	r0, #184	; 0xb8
    31d8:	47a0      	blx	r4
    31da:	2003      	movs	r0, #3
    31dc:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    31de:	2102      	movs	r1, #2
    31e0:	20b8      	movs	r0, #184	; 0xb8
    31e2:	47a0      	blx	r4
    31e4:	2003      	movs	r0, #3
    31e6:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    31e8:	2103      	movs	r1, #3
    31ea:	20b8      	movs	r0, #184	; 0xb8
    31ec:	47a0      	blx	r4
    31ee:	2003      	movs	r0, #3
    31f0:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    31f2:	2100      	movs	r1, #0
    31f4:	20bc      	movs	r0, #188	; 0xbc
    31f6:	47a0      	blx	r4
    31f8:	2002      	movs	r0, #2
    31fa:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    31fc:	2101      	movs	r1, #1
    31fe:	20bc      	movs	r0, #188	; 0xbc
    3200:	47a0      	blx	r4
    3202:	2000      	movs	r0, #0
    3204:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    3206:	2102      	movs	r1, #2
    3208:	20bc      	movs	r0, #188	; 0xbc
    320a:	47a0      	blx	r4
    320c:	2000      	movs	r0, #0
    320e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    3210:	2100      	movs	r1, #0
    3212:	20c9      	movs	r0, #201	; 0xc9
    3214:	47a0      	blx	r4
    3216:	20d0      	movs	r0, #208	; 0xd0
    3218:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    321a:	2101      	movs	r1, #1
    321c:	20c9      	movs	r0, #201	; 0xc9
    321e:	47a0      	blx	r4
    3220:	2002      	movs	r0, #2
    3222:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    3224:	2102      	movs	r1, #2
    3226:	20c9      	movs	r0, #201	; 0xc9
    3228:	47a0      	blx	r4
    322a:	2050      	movs	r0, #80	; 0x50
    322c:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    322e:	2103      	movs	r1, #3
    3230:	20c9      	movs	r0, #201	; 0xc9
    3232:	47a0      	blx	r4
    3234:	2050      	movs	r0, #80	; 0x50
    3236:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    3238:	2104      	movs	r1, #4
    323a:	20c9      	movs	r0, #201	; 0xc9
    323c:	47a0      	blx	r4
    323e:	2050      	movs	r0, #80	; 0x50
    3240:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    3242:	2100      	movs	r1, #0
    3244:	2035      	movs	r0, #53	; 0x35
    3246:	47a0      	blx	r4
    3248:	2000      	movs	r0, #0
    324a:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    324c:	2100      	movs	r1, #0
    324e:	203a      	movs	r0, #58	; 0x3a
    3250:	47a0      	blx	r4
    3252:	2055      	movs	r0, #85	; 0x55
    3254:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    3256:	2100      	movs	r1, #0
    3258:	2036      	movs	r0, #54	; 0x36
    325a:	47a0      	blx	r4
    325c:	20e2      	movs	r0, #226	; 0xe2
    325e:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    3260:	2100      	movs	r1, #0
    3262:	2011      	movs	r0, #17
    3264:	47a0      	blx	r4
  	delay_ms(100);
    3266:	2064      	movs	r0, #100	; 0x64
    3268:	4e17      	ldr	r6, [pc, #92]	; (32c8 <InitLCD+0x21c>)
    326a:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    326c:	2100      	movs	r1, #0
    326e:	2029      	movs	r0, #41	; 0x29
    3270:	47a0      	blx	r4
   	delay_ms(100);
    3272:	2064      	movs	r0, #100	; 0x64
    3274:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    3276:	2100      	movs	r1, #0
    3278:	2051      	movs	r0, #81	; 0x51
    327a:	47a0      	blx	r4
    327c:	20ff      	movs	r0, #255	; 0xff
    327e:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    3280:	2280      	movs	r2, #128	; 0x80
    3282:	03d2      	lsls	r2, r2, #15
    3284:	4b0f      	ldr	r3, [pc, #60]	; (32c4 <InitLCD+0x218>)
    3286:	601a      	str	r2, [r3, #0]
	clrScr();
    3288:	4b16      	ldr	r3, [pc, #88]	; (32e4 <InitLCD+0x238>)
    328a:	4798      	blx	r3
	setColorRGB(0,0,0);
    328c:	2200      	movs	r2, #0
    328e:	2100      	movs	r1, #0
    3290:	2000      	movs	r0, #0
    3292:	4b15      	ldr	r3, [pc, #84]	; (32e8 <InitLCD+0x23c>)
    3294:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    3296:	2200      	movs	r2, #0
    3298:	2100      	movs	r1, #0
    329a:	2000      	movs	r0, #0
    329c:	4b13      	ldr	r3, [pc, #76]	; (32ec <InitLCD+0x240>)
    329e:	4798      	blx	r3
	fillRect(0,0,799,489);
    32a0:	23ea      	movs	r3, #234	; 0xea
    32a2:	33ff      	adds	r3, #255	; 0xff
    32a4:	4a12      	ldr	r2, [pc, #72]	; (32f0 <InitLCD+0x244>)
    32a6:	2100      	movs	r1, #0
    32a8:	2000      	movs	r0, #0
    32aa:	4c12      	ldr	r4, [pc, #72]	; (32f4 <InitLCD+0x248>)
    32ac:	47a0      	blx	r4
}
    32ae:	b002      	add	sp, #8
    32b0:	bc04      	pop	{r2}
    32b2:	4690      	mov	r8, r2
    32b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	41004488 	.word	0x41004488
    32bc:	0000ffff 	.word	0x0000ffff
    32c0:	41004494 	.word	0x41004494
    32c4:	41004498 	.word	0x41004498
    32c8:	00000a35 	.word	0x00000a35
    32cc:	00006f28 	.word	0x00006f28
    32d0:	00006e98 	.word	0x00006e98
    32d4:	00003061 	.word	0x00003061
    32d8:	00006ee0 	.word	0x00006ee0
    32dc:	00003091 	.word	0x00003091
    32e0:	00006e64 	.word	0x00006e64
    32e4:	00002fdd 	.word	0x00002fdd
    32e8:	00002df9 	.word	0x00002df9
    32ec:	00002e21 	.word	0x00002e21
    32f0:	0000031f 	.word	0x0000031f
    32f4:	00002f35 	.word	0x00002f35

000032f8 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    32f8:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    32fa:	4c06      	ldr	r4, [pc, #24]	; (3314 <usart_read_callback+0x1c>)
    32fc:	2201      	movs	r2, #1
    32fe:	0021      	movs	r1, r4
    3300:	4805      	ldr	r0, [pc, #20]	; (3318 <usart_read_callback+0x20>)
    3302:	4b06      	ldr	r3, [pc, #24]	; (331c <usart_read_callback+0x24>)
    3304:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    3306:	7821      	ldrb	r1, [r4, #0]
    3308:	4b05      	ldr	r3, [pc, #20]	; (3320 <usart_read_callback+0x28>)
    330a:	6818      	ldr	r0, [r3, #0]
    330c:	4b05      	ldr	r3, [pc, #20]	; (3324 <usart_read_callback+0x2c>)
    330e:	4798      	blx	r3
}
    3310:	bd10      	pop	{r4, pc}
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	20000ab8 	.word	0x20000ab8
    3318:	200002f8 	.word	0x200002f8
    331c:	000018d5 	.word	0x000018d5
    3320:	200002cc 	.word	0x200002cc
    3324:	00000141 	.word	0x00000141

00003328 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	b082      	sub	sp, #8
    332c:	0005      	movs	r5, r0
    332e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3330:	2200      	movs	r2, #0
    3332:	466b      	mov	r3, sp
    3334:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3336:	4c06      	ldr	r4, [pc, #24]	; (3350 <usart_serial_getchar+0x28>)
    3338:	466b      	mov	r3, sp
    333a:	1d99      	adds	r1, r3, #6
    333c:	0028      	movs	r0, r5
    333e:	47a0      	blx	r4
    3340:	2800      	cmp	r0, #0
    3342:	d1f9      	bne.n	3338 <usart_serial_getchar+0x10>

	*c = temp;
    3344:	466b      	mov	r3, sp
    3346:	3306      	adds	r3, #6
    3348:	881b      	ldrh	r3, [r3, #0]
    334a:	7033      	strb	r3, [r6, #0]
}
    334c:	b002      	add	sp, #8
    334e:	bd70      	pop	{r4, r5, r6, pc}
    3350:	00001803 	.word	0x00001803

00003354 <usart_serial_putchar>:
{
    3354:	b570      	push	{r4, r5, r6, lr}
    3356:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3358:	b28c      	uxth	r4, r1
    335a:	4e03      	ldr	r6, [pc, #12]	; (3368 <usart_serial_putchar+0x14>)
    335c:	0021      	movs	r1, r4
    335e:	0028      	movs	r0, r5
    3360:	47b0      	blx	r6
    3362:	2800      	cmp	r0, #0
    3364:	d1fa      	bne.n	335c <usart_serial_putchar+0x8>
}
    3366:	bd70      	pop	{r4, r5, r6, pc}
    3368:	000017dd 	.word	0x000017dd

0000336c <SysTick_Handler>:
	ul_tickcount++;
    336c:	4a02      	ldr	r2, [pc, #8]	; (3378 <SysTick_Handler+0xc>)
    336e:	8813      	ldrh	r3, [r2, #0]
    3370:	3301      	adds	r3, #1
    3372:	8013      	strh	r3, [r2, #0]
}
    3374:	4770      	bx	lr
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	200002b0 	.word	0x200002b0

0000337c <conf_systick>:
{
    337c:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    337e:	4b0e      	ldr	r3, [pc, #56]	; (33b8 <conf_systick+0x3c>)
    3380:	6818      	ldr	r0, [r3, #0]
    3382:	21fa      	movs	r1, #250	; 0xfa
    3384:	0089      	lsls	r1, r1, #2
    3386:	4b0d      	ldr	r3, [pc, #52]	; (33bc <conf_systick+0x40>)
    3388:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    338a:	3801      	subs	r0, #1
    338c:	4b0c      	ldr	r3, [pc, #48]	; (33c0 <conf_systick+0x44>)
    338e:	4298      	cmp	r0, r3
    3390:	d80d      	bhi.n	33ae <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    3392:	4a0c      	ldr	r2, [pc, #48]	; (33c4 <conf_systick+0x48>)
    3394:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3396:	480c      	ldr	r0, [pc, #48]	; (33c8 <conf_systick+0x4c>)
    3398:	6a03      	ldr	r3, [r0, #32]
    339a:	021b      	lsls	r3, r3, #8
    339c:	0a1b      	lsrs	r3, r3, #8
    339e:	21c0      	movs	r1, #192	; 0xc0
    33a0:	0609      	lsls	r1, r1, #24
    33a2:	430b      	orrs	r3, r1
    33a4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    33a6:	2300      	movs	r3, #0
    33a8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    33aa:	3307      	adds	r3, #7
    33ac:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    33ae:	2280      	movs	r2, #128	; 0x80
    33b0:	0612      	lsls	r2, r2, #24
    33b2:	4b06      	ldr	r3, [pc, #24]	; (33cc <conf_systick+0x50>)
    33b4:	601a      	str	r2, [r3, #0]
}
    33b6:	bd10      	pop	{r4, pc}
    33b8:	2000000c 	.word	0x2000000c
    33bc:	0000374d 	.word	0x0000374d
    33c0:	00ffffff 	.word	0x00ffffff
    33c4:	e000e010 	.word	0xe000e010
    33c8:	e000ed00 	.word	0xe000ed00
    33cc:	e000e100 	.word	0xe000e100

000033d0 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    33d0:	b570      	push	{r4, r5, r6, lr}
    33d2:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    33d4:	2380      	movs	r3, #128	; 0x80
    33d6:	05db      	lsls	r3, r3, #23
    33d8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    33da:	2300      	movs	r3, #0
    33dc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    33de:	22ff      	movs	r2, #255	; 0xff
    33e0:	4669      	mov	r1, sp
    33e2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    33e4:	2200      	movs	r2, #0
    33e6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    33e8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    33ea:	2196      	movs	r1, #150	; 0x96
    33ec:	0189      	lsls	r1, r1, #6
    33ee:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    33f0:	2101      	movs	r1, #1
    33f2:	2024      	movs	r0, #36	; 0x24
    33f4:	466c      	mov	r4, sp
    33f6:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    33f8:	3001      	adds	r0, #1
    33fa:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    33fc:	3125      	adds	r1, #37	; 0x25
    33fe:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    3400:	3101      	adds	r1, #1
    3402:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    3404:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    3406:	3105      	adds	r1, #5
    3408:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    340a:	3101      	adds	r1, #1
    340c:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    340e:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3410:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    3412:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    3414:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    3416:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    3418:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    341a:	2313      	movs	r3, #19
    341c:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    341e:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    3420:	2380      	movs	r3, #128	; 0x80
    3422:	035b      	lsls	r3, r3, #13
    3424:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    3426:	4b1e      	ldr	r3, [pc, #120]	; (34a0 <configure_usart+0xd0>)
    3428:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    342a:	4b1e      	ldr	r3, [pc, #120]	; (34a4 <configure_usart+0xd4>)
    342c:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    342e:	2301      	movs	r3, #1
    3430:	425b      	negs	r3, r3
    3432:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    3434:	930f      	str	r3, [sp, #60]	; 0x3c
	
	
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    3436:	4d1c      	ldr	r5, [pc, #112]	; (34a8 <configure_usart+0xd8>)
    3438:	4c1c      	ldr	r4, [pc, #112]	; (34ac <configure_usart+0xdc>)
    343a:	466a      	mov	r2, sp
    343c:	491c      	ldr	r1, [pc, #112]	; (34b0 <configure_usart+0xe0>)
    343e:	0028      	movs	r0, r5
    3440:	47a0      	blx	r4
    3442:	2800      	cmp	r0, #0
    3444:	d1f9      	bne.n	343a <configure_usart+0x6a>
	stdio_base = (void *)module;
    3446:	4c18      	ldr	r4, [pc, #96]	; (34a8 <configure_usart+0xd8>)
    3448:	4b1a      	ldr	r3, [pc, #104]	; (34b4 <configure_usart+0xe4>)
    344a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    344c:	4a1a      	ldr	r2, [pc, #104]	; (34b8 <configure_usart+0xe8>)
    344e:	4b1b      	ldr	r3, [pc, #108]	; (34bc <configure_usart+0xec>)
    3450:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3452:	4a1b      	ldr	r2, [pc, #108]	; (34c0 <configure_usart+0xf0>)
    3454:	4b1b      	ldr	r3, [pc, #108]	; (34c4 <configure_usart+0xf4>)
    3456:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3458:	466a      	mov	r2, sp
    345a:	4915      	ldr	r1, [pc, #84]	; (34b0 <configure_usart+0xe0>)
    345c:	0020      	movs	r0, r4
    345e:	4b13      	ldr	r3, [pc, #76]	; (34ac <configure_usart+0xdc>)
    3460:	4798      	blx	r3
	setbuf(stdout, NULL);
    3462:	4e19      	ldr	r6, [pc, #100]	; (34c8 <configure_usart+0xf8>)
    3464:	6833      	ldr	r3, [r6, #0]
    3466:	6898      	ldr	r0, [r3, #8]
    3468:	2100      	movs	r1, #0
    346a:	4d18      	ldr	r5, [pc, #96]	; (34cc <configure_usart+0xfc>)
    346c:	47a8      	blx	r5
	setbuf(stdin, NULL);
    346e:	6833      	ldr	r3, [r6, #0]
    3470:	6858      	ldr	r0, [r3, #4]
    3472:	2100      	movs	r1, #0
    3474:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    3476:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3478:	0028      	movs	r0, r5
    347a:	4b15      	ldr	r3, [pc, #84]	; (34d0 <configure_usart+0x100>)
    347c:	4798      	blx	r3
    347e:	231f      	movs	r3, #31
    3480:	4018      	ands	r0, r3
    3482:	3b1e      	subs	r3, #30
    3484:	4083      	lsls	r3, r0
    3486:	4a13      	ldr	r2, [pc, #76]	; (34d4 <configure_usart+0x104>)
    3488:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    348a:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    348c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    348e:	2b00      	cmp	r3, #0
    3490:	d1fc      	bne.n	348c <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3492:	682b      	ldr	r3, [r5, #0]
    3494:	2202      	movs	r2, #2
    3496:	4313      	orrs	r3, r2
    3498:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    349a:	b010      	add	sp, #64	; 0x40
    349c:	bd70      	pop	{r4, r5, r6, pc}
    349e:	46c0      	nop			; (mov r8, r8)
    34a0:	00080003 	.word	0x00080003
    34a4:	00090003 	.word	0x00090003
    34a8:	200002f8 	.word	0x200002f8
    34ac:	000014a1 	.word	0x000014a1
    34b0:	42001000 	.word	0x42001000
    34b4:	200002f4 	.word	0x200002f4
    34b8:	00003355 	.word	0x00003355
    34bc:	200002f0 	.word	0x200002f0
    34c0:	00003329 	.word	0x00003329
    34c4:	200002ec 	.word	0x200002ec
    34c8:	20000164 	.word	0x20000164
    34cc:	00003db1 	.word	0x00003db1
    34d0:	00001411 	.word	0x00001411
    34d4:	e000e100 	.word	0xe000e100

000034d8 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    34d8:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    34da:	4c06      	ldr	r4, [pc, #24]	; (34f4 <configure_usart_callbacks+0x1c>)
    34dc:	2201      	movs	r2, #1
    34de:	4906      	ldr	r1, [pc, #24]	; (34f8 <configure_usart_callbacks+0x20>)
    34e0:	0020      	movs	r0, r4
    34e2:	4b06      	ldr	r3, [pc, #24]	; (34fc <configure_usart_callbacks+0x24>)
    34e4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    34e6:	2231      	movs	r2, #49	; 0x31
    34e8:	5ca3      	ldrb	r3, [r4, r2]
    34ea:	2102      	movs	r1, #2
    34ec:	430b      	orrs	r3, r1
    34ee:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    34f0:	bd10      	pop	{r4, pc}
    34f2:	46c0      	nop			; (mov r8, r8)
    34f4:	200002f8 	.word	0x200002f8
    34f8:	000032f9 	.word	0x000032f9
    34fc:	000018bd 	.word	0x000018bd

00003500 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    3500:	b510      	push	{r4, lr}
    3502:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    3504:	4668      	mov	r0, sp
    3506:	4b16      	ldr	r3, [pc, #88]	; (3560 <configure_adc+0x60>)
    3508:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    350a:	2301      	movs	r3, #1
    350c:	466a      	mov	r2, sp
    350e:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    3510:	2380      	movs	r3, #128	; 0x80
    3512:	009b      	lsls	r3, r3, #2
    3514:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    3516:	2300      	movs	r3, #0
    3518:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    351a:	3318      	adds	r3, #24
    351c:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    351e:	23c0      	movs	r3, #192	; 0xc0
    3520:	015b      	lsls	r3, r3, #5
    3522:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    3524:	4c0f      	ldr	r4, [pc, #60]	; (3564 <configure_adc+0x64>)
    3526:	4910      	ldr	r1, [pc, #64]	; (3568 <configure_adc+0x68>)
    3528:	0020      	movs	r0, r4
    352a:	4b10      	ldr	r3, [pc, #64]	; (356c <configure_adc+0x6c>)
    352c:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    352e:	6822      	ldr	r2, [r4, #0]
    3530:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3532:	b25b      	sxtb	r3, r3
    3534:	2b00      	cmp	r3, #0
    3536:	dbfb      	blt.n	3530 <configure_adc+0x30>
    3538:	2180      	movs	r1, #128	; 0x80
    353a:	0409      	lsls	r1, r1, #16
    353c:	4b0c      	ldr	r3, [pc, #48]	; (3570 <configure_adc+0x70>)
    353e:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    3540:	230f      	movs	r3, #15
    3542:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    3544:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3546:	7813      	ldrb	r3, [r2, #0]
    3548:	2102      	movs	r1, #2
    354a:	430b      	orrs	r3, r1
    354c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    354e:	4b05      	ldr	r3, [pc, #20]	; (3564 <configure_adc+0x64>)
    3550:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3552:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3554:	b25b      	sxtb	r3, r3
    3556:	2b00      	cmp	r3, #0
    3558:	dbfb      	blt.n	3552 <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    355a:	b00c      	add	sp, #48	; 0x30
    355c:	bd10      	pop	{r4, pc}
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	00000b09 	.word	0x00000b09
    3564:	20000abc 	.word	0x20000abc
    3568:	42004000 	.word	0x42004000
    356c:	00000b4d 	.word	0x00000b4d
    3570:	e000e100 	.word	0xe000e100

00003574 <setupBoard>:


void setupBoard(void)
{
    3574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    3576:	2000      	movs	r0, #0
    3578:	4b31      	ldr	r3, [pc, #196]	; (3640 <setupBoard+0xcc>)
    357a:	4798      	blx	r3
    357c:	b287      	uxth	r7, r0
	

	system_init();
    357e:	4b31      	ldr	r3, [pc, #196]	; (3644 <setupBoard+0xd0>)
    3580:	4798      	blx	r3
	
	configure_adc();
    3582:	4b31      	ldr	r3, [pc, #196]	; (3648 <setupBoard+0xd4>)
    3584:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    3586:	4b31      	ldr	r3, [pc, #196]	; (364c <setupBoard+0xd8>)
    3588:	6819      	ldr	r1, [r3, #0]
    358a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    358c:	b25b      	sxtb	r3, r3
    358e:	2b00      	cmp	r3, #0
    3590:	dbfb      	blt.n	358a <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3592:	7b0b      	ldrb	r3, [r1, #12]
    3594:	2202      	movs	r2, #2
    3596:	4313      	orrs	r3, r2
    3598:	730b      	strb	r3, [r1, #12]
    359a:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    359c:	b25b      	sxtb	r3, r3
    359e:	2b00      	cmp	r3, #0
    35a0:	dbfb      	blt.n	359a <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    35a2:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    35a4:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    35a6:	2502      	movs	r5, #2
    35a8:	e001      	b.n	35ae <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    35aa:	4214      	tst	r4, r2
    35ac:	d10a      	bne.n	35c4 <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    35ae:	7e0b      	ldrb	r3, [r1, #24]
    35b0:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    35b2:	0022      	movs	r2, r4
    35b4:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    35b6:	421e      	tst	r6, r3
    35b8:	d000      	beq.n	35bc <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    35ba:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    35bc:	421d      	tst	r5, r3
    35be:	d0f4      	beq.n	35aa <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    35c0:	4332      	orrs	r2, r6
    35c2:	e7f2      	b.n	35aa <setupBoard+0x36>
    35c4:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    35c6:	b25b      	sxtb	r3, r3
    35c8:	2b00      	cmp	r3, #0
    35ca:	dbfb      	blt.n	35c4 <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    35cc:	8b48      	ldrh	r0, [r1, #26]
    35ce:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    35d0:	2301      	movs	r3, #1
    35d2:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    35d4:	7e0a      	ldrb	r2, [r1, #24]
    35d6:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    35d8:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    35da:	0754      	lsls	r4, r2, #29
    35dc:	d501      	bpl.n	35e2 <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    35de:	2402      	movs	r4, #2
    35e0:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    35e2:	0792      	lsls	r2, r2, #30
    35e4:	d501      	bpl.n	35ea <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    35e6:	2204      	movs	r2, #4
    35e8:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    35ea:	075b      	lsls	r3, r3, #29
    35ec:	d501      	bpl.n	35f2 <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    35ee:	2302      	movs	r3, #2
    35f0:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    35f2:	4078      	eors	r0, r7
    35f4:	4b16      	ldr	r3, [pc, #88]	; (3650 <setupBoard+0xdc>)
    35f6:	4798      	blx	r3
	
	delay_init();
    35f8:	4b16      	ldr	r3, [pc, #88]	; (3654 <setupBoard+0xe0>)
    35fa:	4798      	blx	r3
	
	conf_systick();
    35fc:	4c16      	ldr	r4, [pc, #88]	; (3658 <setupBoard+0xe4>)
    35fe:	47a0      	blx	r4

	//configure_usart_USB();
	
	configure_usart();
    3600:	4b16      	ldr	r3, [pc, #88]	; (365c <setupBoard+0xe8>)
    3602:	4798      	blx	r3
	configure_usart_callbacks();
    3604:	4b16      	ldr	r3, [pc, #88]	; (3660 <setupBoard+0xec>)
    3606:	4798      	blx	r3
	cpu_irq_enable();
    3608:	2201      	movs	r2, #1
    360a:	4b16      	ldr	r3, [pc, #88]	; (3664 <setupBoard+0xf0>)
    360c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    360e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3612:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    3614:	4914      	ldr	r1, [pc, #80]	; (3668 <setupBoard+0xf4>)
    3616:	4815      	ldr	r0, [pc, #84]	; (366c <setupBoard+0xf8>)
    3618:	4b15      	ldr	r3, [pc, #84]	; (3670 <setupBoard+0xfc>)
    361a:	4798      	blx	r3

	printf("\n\rSerial OK 9600 8N1\n\r");
    361c:	4815      	ldr	r0, [pc, #84]	; (3674 <setupBoard+0x100>)
    361e:	4b16      	ldr	r3, [pc, #88]	; (3678 <setupBoard+0x104>)
    3620:	4798      	blx	r3

	
	InitLCD();
    3622:	4b16      	ldr	r3, [pc, #88]	; (367c <setupBoard+0x108>)
    3624:	4798      	blx	r3
	splashScreen();
    3626:	4b16      	ldr	r3, [pc, #88]	; (3680 <setupBoard+0x10c>)
    3628:	4798      	blx	r3
			
	conf_systick();
    362a:	47a0      	blx	r4

	xCharPos=0;
    362c:	2300      	movs	r3, #0
    362e:	4a15      	ldr	r2, [pc, #84]	; (3684 <setupBoard+0x110>)
    3630:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    3632:	4a15      	ldr	r2, [pc, #84]	; (3688 <setupBoard+0x114>)
    3634:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    3636:	20ff      	movs	r0, #255	; 0xff
    3638:	4b14      	ldr	r3, [pc, #80]	; (368c <setupBoard+0x118>)
    363a:	4798      	blx	r3
}
    363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    363e:	46c0      	nop			; (mov r8, r8)
    3640:	00001fb5 	.word	0x00001fb5
    3644:	000021f9 	.word	0x000021f9
    3648:	00003501 	.word	0x00003501
    364c:	20000abc 	.word	0x20000abc
    3650:	00003cb9 	.word	0x00003cb9
    3654:	000009f5 	.word	0x000009f5
    3658:	0000337d 	.word	0x0000337d
    365c:	000033d1 	.word	0x000033d1
    3660:	000034d9 	.word	0x000034d9
    3664:	20000008 	.word	0x20000008
    3668:	20000ab8 	.word	0x20000ab8
    366c:	200002f8 	.word	0x200002f8
    3670:	000018d5 	.word	0x000018d5
    3674:	00006f70 	.word	0x00006f70
    3678:	00003c5d 	.word	0x00003c5d
    367c:	000030ad 	.word	0x000030ad
    3680:	000007bd 	.word	0x000007bd
    3684:	200002a8 	.word	0x200002a8
    3688:	200002aa 	.word	0x200002aa
    368c:	000023dd 	.word	0x000023dd

00003690 <main>:
{
    3690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    3692:	4b21      	ldr	r3, [pc, #132]	; (3718 <main+0x88>)
    3694:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    3696:	200a      	movs	r0, #10
    3698:	4b20      	ldr	r3, [pc, #128]	; (371c <main+0x8c>)
    369a:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    369c:	210a      	movs	r1, #10
    369e:	4b20      	ldr	r3, [pc, #128]	; (3720 <main+0x90>)
    36a0:	4798      	blx	r3
    36a2:	4b20      	ldr	r3, [pc, #128]	; (3724 <main+0x94>)
    36a4:	6018      	str	r0, [r3, #0]
	parserInit();
    36a6:	4b20      	ldr	r3, [pc, #128]	; (3728 <main+0x98>)
    36a8:	4798      	blx	r3
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    36aa:	4f20      	ldr	r7, [pc, #128]	; (372c <main+0x9c>)
    36ac:	4e20      	ldr	r6, [pc, #128]	; (3730 <main+0xa0>)
    36ae:	4d21      	ldr	r5, [pc, #132]	; (3734 <main+0xa4>)
    36b0:	e015      	b.n	36de <main+0x4e>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    36b2:	21c8      	movs	r1, #200	; 0xc8
    36b4:	0020      	movs	r0, r4
    36b6:	4b1e      	ldr	r3, [pc, #120]	; (3730 <main+0xa0>)
    36b8:	4798      	blx	r3
    36ba:	b289      	uxth	r1, r1
    36bc:	2900      	cmp	r1, #0
    36be:	d10e      	bne.n	36de <main+0x4e>
    36c0:	4b1d      	ldr	r3, [pc, #116]	; (3738 <main+0xa8>)
    36c2:	781b      	ldrb	r3, [r3, #0]
    36c4:	2b00      	cmp	r3, #0
    36c6:	d10a      	bne.n	36de <main+0x4e>
			funcLock = true;
    36c8:	4c1b      	ldr	r4, [pc, #108]	; (3738 <main+0xa8>)
    36ca:	2301      	movs	r3, #1
    36cc:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    36ce:	4b1b      	ldr	r3, [pc, #108]	; (373c <main+0xac>)
    36d0:	4798      	blx	r3
			printKeyboardBuffer();
    36d2:	4b1b      	ldr	r3, [pc, #108]	; (3740 <main+0xb0>)
    36d4:	4798      	blx	r3
			parseRXBuffer();
    36d6:	4b1b      	ldr	r3, [pc, #108]	; (3744 <main+0xb4>)
    36d8:	4798      	blx	r3
			funcLock = false;
    36da:	2300      	movs	r3, #0
    36dc:	7023      	strb	r3, [r4, #0]
		__WFI();
    36de:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    36e0:	883c      	ldrh	r4, [r7, #0]
    36e2:	0029      	movs	r1, r5
    36e4:	0020      	movs	r0, r4
    36e6:	47b0      	blx	r6
    36e8:	b289      	uxth	r1, r1
    36ea:	2900      	cmp	r1, #0
    36ec:	d1e1      	bne.n	36b2 <main+0x22>
    36ee:	4b12      	ldr	r3, [pc, #72]	; (3738 <main+0xa8>)
    36f0:	781b      	ldrb	r3, [r3, #0]
    36f2:	2b00      	cmp	r3, #0
    36f4:	d1f3      	bne.n	36de <main+0x4e>
			funcLock = true;
    36f6:	4c10      	ldr	r4, [pc, #64]	; (3738 <main+0xa8>)
    36f8:	3301      	adds	r3, #1
    36fa:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    36fc:	4b12      	ldr	r3, [pc, #72]	; (3748 <main+0xb8>)
    36fe:	4798      	blx	r3
			funcLock = false;
    3700:	2300      	movs	r3, #0
    3702:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    3704:	4b09      	ldr	r3, [pc, #36]	; (372c <main+0x9c>)
    3706:	8818      	ldrh	r0, [r3, #0]
    3708:	21c8      	movs	r1, #200	; 0xc8
    370a:	4b09      	ldr	r3, [pc, #36]	; (3730 <main+0xa0>)
    370c:	4798      	blx	r3
    370e:	b289      	uxth	r1, r1
    3710:	2900      	cmp	r1, #0
    3712:	d0d9      	beq.n	36c8 <main+0x38>
    3714:	e7e3      	b.n	36de <main+0x4e>
    3716:	46c0      	nop			; (mov r8, r8)
    3718:	00003575 	.word	0x00003575
    371c:	00003ad5 	.word	0x00003ad5
    3720:	00000115 	.word	0x00000115
    3724:	200002cc 	.word	0x200002cc
    3728:	000001d1 	.word	0x000001d1
    372c:	200002b0 	.word	0x200002b0
    3730:	00003859 	.word	0x00003859
    3734:	00003fff 	.word	0x00003fff
    3738:	200002ae 	.word	0x200002ae
    373c:	00002bf9 	.word	0x00002bf9
    3740:	000028b5 	.word	0x000028b5
    3744:	000009a1 	.word	0x000009a1
    3748:	000024c5 	.word	0x000024c5

0000374c <__udivsi3>:
    374c:	2200      	movs	r2, #0
    374e:	0843      	lsrs	r3, r0, #1
    3750:	428b      	cmp	r3, r1
    3752:	d374      	bcc.n	383e <__udivsi3+0xf2>
    3754:	0903      	lsrs	r3, r0, #4
    3756:	428b      	cmp	r3, r1
    3758:	d35f      	bcc.n	381a <__udivsi3+0xce>
    375a:	0a03      	lsrs	r3, r0, #8
    375c:	428b      	cmp	r3, r1
    375e:	d344      	bcc.n	37ea <__udivsi3+0x9e>
    3760:	0b03      	lsrs	r3, r0, #12
    3762:	428b      	cmp	r3, r1
    3764:	d328      	bcc.n	37b8 <__udivsi3+0x6c>
    3766:	0c03      	lsrs	r3, r0, #16
    3768:	428b      	cmp	r3, r1
    376a:	d30d      	bcc.n	3788 <__udivsi3+0x3c>
    376c:	22ff      	movs	r2, #255	; 0xff
    376e:	0209      	lsls	r1, r1, #8
    3770:	ba12      	rev	r2, r2
    3772:	0c03      	lsrs	r3, r0, #16
    3774:	428b      	cmp	r3, r1
    3776:	d302      	bcc.n	377e <__udivsi3+0x32>
    3778:	1212      	asrs	r2, r2, #8
    377a:	0209      	lsls	r1, r1, #8
    377c:	d065      	beq.n	384a <__udivsi3+0xfe>
    377e:	0b03      	lsrs	r3, r0, #12
    3780:	428b      	cmp	r3, r1
    3782:	d319      	bcc.n	37b8 <__udivsi3+0x6c>
    3784:	e000      	b.n	3788 <__udivsi3+0x3c>
    3786:	0a09      	lsrs	r1, r1, #8
    3788:	0bc3      	lsrs	r3, r0, #15
    378a:	428b      	cmp	r3, r1
    378c:	d301      	bcc.n	3792 <__udivsi3+0x46>
    378e:	03cb      	lsls	r3, r1, #15
    3790:	1ac0      	subs	r0, r0, r3
    3792:	4152      	adcs	r2, r2
    3794:	0b83      	lsrs	r3, r0, #14
    3796:	428b      	cmp	r3, r1
    3798:	d301      	bcc.n	379e <__udivsi3+0x52>
    379a:	038b      	lsls	r3, r1, #14
    379c:	1ac0      	subs	r0, r0, r3
    379e:	4152      	adcs	r2, r2
    37a0:	0b43      	lsrs	r3, r0, #13
    37a2:	428b      	cmp	r3, r1
    37a4:	d301      	bcc.n	37aa <__udivsi3+0x5e>
    37a6:	034b      	lsls	r3, r1, #13
    37a8:	1ac0      	subs	r0, r0, r3
    37aa:	4152      	adcs	r2, r2
    37ac:	0b03      	lsrs	r3, r0, #12
    37ae:	428b      	cmp	r3, r1
    37b0:	d301      	bcc.n	37b6 <__udivsi3+0x6a>
    37b2:	030b      	lsls	r3, r1, #12
    37b4:	1ac0      	subs	r0, r0, r3
    37b6:	4152      	adcs	r2, r2
    37b8:	0ac3      	lsrs	r3, r0, #11
    37ba:	428b      	cmp	r3, r1
    37bc:	d301      	bcc.n	37c2 <__udivsi3+0x76>
    37be:	02cb      	lsls	r3, r1, #11
    37c0:	1ac0      	subs	r0, r0, r3
    37c2:	4152      	adcs	r2, r2
    37c4:	0a83      	lsrs	r3, r0, #10
    37c6:	428b      	cmp	r3, r1
    37c8:	d301      	bcc.n	37ce <__udivsi3+0x82>
    37ca:	028b      	lsls	r3, r1, #10
    37cc:	1ac0      	subs	r0, r0, r3
    37ce:	4152      	adcs	r2, r2
    37d0:	0a43      	lsrs	r3, r0, #9
    37d2:	428b      	cmp	r3, r1
    37d4:	d301      	bcc.n	37da <__udivsi3+0x8e>
    37d6:	024b      	lsls	r3, r1, #9
    37d8:	1ac0      	subs	r0, r0, r3
    37da:	4152      	adcs	r2, r2
    37dc:	0a03      	lsrs	r3, r0, #8
    37de:	428b      	cmp	r3, r1
    37e0:	d301      	bcc.n	37e6 <__udivsi3+0x9a>
    37e2:	020b      	lsls	r3, r1, #8
    37e4:	1ac0      	subs	r0, r0, r3
    37e6:	4152      	adcs	r2, r2
    37e8:	d2cd      	bcs.n	3786 <__udivsi3+0x3a>
    37ea:	09c3      	lsrs	r3, r0, #7
    37ec:	428b      	cmp	r3, r1
    37ee:	d301      	bcc.n	37f4 <__udivsi3+0xa8>
    37f0:	01cb      	lsls	r3, r1, #7
    37f2:	1ac0      	subs	r0, r0, r3
    37f4:	4152      	adcs	r2, r2
    37f6:	0983      	lsrs	r3, r0, #6
    37f8:	428b      	cmp	r3, r1
    37fa:	d301      	bcc.n	3800 <__udivsi3+0xb4>
    37fc:	018b      	lsls	r3, r1, #6
    37fe:	1ac0      	subs	r0, r0, r3
    3800:	4152      	adcs	r2, r2
    3802:	0943      	lsrs	r3, r0, #5
    3804:	428b      	cmp	r3, r1
    3806:	d301      	bcc.n	380c <__udivsi3+0xc0>
    3808:	014b      	lsls	r3, r1, #5
    380a:	1ac0      	subs	r0, r0, r3
    380c:	4152      	adcs	r2, r2
    380e:	0903      	lsrs	r3, r0, #4
    3810:	428b      	cmp	r3, r1
    3812:	d301      	bcc.n	3818 <__udivsi3+0xcc>
    3814:	010b      	lsls	r3, r1, #4
    3816:	1ac0      	subs	r0, r0, r3
    3818:	4152      	adcs	r2, r2
    381a:	08c3      	lsrs	r3, r0, #3
    381c:	428b      	cmp	r3, r1
    381e:	d301      	bcc.n	3824 <__udivsi3+0xd8>
    3820:	00cb      	lsls	r3, r1, #3
    3822:	1ac0      	subs	r0, r0, r3
    3824:	4152      	adcs	r2, r2
    3826:	0883      	lsrs	r3, r0, #2
    3828:	428b      	cmp	r3, r1
    382a:	d301      	bcc.n	3830 <__udivsi3+0xe4>
    382c:	008b      	lsls	r3, r1, #2
    382e:	1ac0      	subs	r0, r0, r3
    3830:	4152      	adcs	r2, r2
    3832:	0843      	lsrs	r3, r0, #1
    3834:	428b      	cmp	r3, r1
    3836:	d301      	bcc.n	383c <__udivsi3+0xf0>
    3838:	004b      	lsls	r3, r1, #1
    383a:	1ac0      	subs	r0, r0, r3
    383c:	4152      	adcs	r2, r2
    383e:	1a41      	subs	r1, r0, r1
    3840:	d200      	bcs.n	3844 <__udivsi3+0xf8>
    3842:	4601      	mov	r1, r0
    3844:	4152      	adcs	r2, r2
    3846:	4610      	mov	r0, r2
    3848:	4770      	bx	lr
    384a:	e7ff      	b.n	384c <__udivsi3+0x100>
    384c:	b501      	push	{r0, lr}
    384e:	2000      	movs	r0, #0
    3850:	f000 f8f0 	bl	3a34 <__aeabi_idiv0>
    3854:	bd02      	pop	{r1, pc}
    3856:	46c0      	nop			; (mov r8, r8)

00003858 <__aeabi_uidivmod>:
    3858:	2900      	cmp	r1, #0
    385a:	d0f7      	beq.n	384c <__udivsi3+0x100>
    385c:	e776      	b.n	374c <__udivsi3>
    385e:	4770      	bx	lr

00003860 <__divsi3>:
    3860:	4603      	mov	r3, r0
    3862:	430b      	orrs	r3, r1
    3864:	d47f      	bmi.n	3966 <__divsi3+0x106>
    3866:	2200      	movs	r2, #0
    3868:	0843      	lsrs	r3, r0, #1
    386a:	428b      	cmp	r3, r1
    386c:	d374      	bcc.n	3958 <__divsi3+0xf8>
    386e:	0903      	lsrs	r3, r0, #4
    3870:	428b      	cmp	r3, r1
    3872:	d35f      	bcc.n	3934 <__divsi3+0xd4>
    3874:	0a03      	lsrs	r3, r0, #8
    3876:	428b      	cmp	r3, r1
    3878:	d344      	bcc.n	3904 <__divsi3+0xa4>
    387a:	0b03      	lsrs	r3, r0, #12
    387c:	428b      	cmp	r3, r1
    387e:	d328      	bcc.n	38d2 <__divsi3+0x72>
    3880:	0c03      	lsrs	r3, r0, #16
    3882:	428b      	cmp	r3, r1
    3884:	d30d      	bcc.n	38a2 <__divsi3+0x42>
    3886:	22ff      	movs	r2, #255	; 0xff
    3888:	0209      	lsls	r1, r1, #8
    388a:	ba12      	rev	r2, r2
    388c:	0c03      	lsrs	r3, r0, #16
    388e:	428b      	cmp	r3, r1
    3890:	d302      	bcc.n	3898 <__divsi3+0x38>
    3892:	1212      	asrs	r2, r2, #8
    3894:	0209      	lsls	r1, r1, #8
    3896:	d065      	beq.n	3964 <__divsi3+0x104>
    3898:	0b03      	lsrs	r3, r0, #12
    389a:	428b      	cmp	r3, r1
    389c:	d319      	bcc.n	38d2 <__divsi3+0x72>
    389e:	e000      	b.n	38a2 <__divsi3+0x42>
    38a0:	0a09      	lsrs	r1, r1, #8
    38a2:	0bc3      	lsrs	r3, r0, #15
    38a4:	428b      	cmp	r3, r1
    38a6:	d301      	bcc.n	38ac <__divsi3+0x4c>
    38a8:	03cb      	lsls	r3, r1, #15
    38aa:	1ac0      	subs	r0, r0, r3
    38ac:	4152      	adcs	r2, r2
    38ae:	0b83      	lsrs	r3, r0, #14
    38b0:	428b      	cmp	r3, r1
    38b2:	d301      	bcc.n	38b8 <__divsi3+0x58>
    38b4:	038b      	lsls	r3, r1, #14
    38b6:	1ac0      	subs	r0, r0, r3
    38b8:	4152      	adcs	r2, r2
    38ba:	0b43      	lsrs	r3, r0, #13
    38bc:	428b      	cmp	r3, r1
    38be:	d301      	bcc.n	38c4 <__divsi3+0x64>
    38c0:	034b      	lsls	r3, r1, #13
    38c2:	1ac0      	subs	r0, r0, r3
    38c4:	4152      	adcs	r2, r2
    38c6:	0b03      	lsrs	r3, r0, #12
    38c8:	428b      	cmp	r3, r1
    38ca:	d301      	bcc.n	38d0 <__divsi3+0x70>
    38cc:	030b      	lsls	r3, r1, #12
    38ce:	1ac0      	subs	r0, r0, r3
    38d0:	4152      	adcs	r2, r2
    38d2:	0ac3      	lsrs	r3, r0, #11
    38d4:	428b      	cmp	r3, r1
    38d6:	d301      	bcc.n	38dc <__divsi3+0x7c>
    38d8:	02cb      	lsls	r3, r1, #11
    38da:	1ac0      	subs	r0, r0, r3
    38dc:	4152      	adcs	r2, r2
    38de:	0a83      	lsrs	r3, r0, #10
    38e0:	428b      	cmp	r3, r1
    38e2:	d301      	bcc.n	38e8 <__divsi3+0x88>
    38e4:	028b      	lsls	r3, r1, #10
    38e6:	1ac0      	subs	r0, r0, r3
    38e8:	4152      	adcs	r2, r2
    38ea:	0a43      	lsrs	r3, r0, #9
    38ec:	428b      	cmp	r3, r1
    38ee:	d301      	bcc.n	38f4 <__divsi3+0x94>
    38f0:	024b      	lsls	r3, r1, #9
    38f2:	1ac0      	subs	r0, r0, r3
    38f4:	4152      	adcs	r2, r2
    38f6:	0a03      	lsrs	r3, r0, #8
    38f8:	428b      	cmp	r3, r1
    38fa:	d301      	bcc.n	3900 <__divsi3+0xa0>
    38fc:	020b      	lsls	r3, r1, #8
    38fe:	1ac0      	subs	r0, r0, r3
    3900:	4152      	adcs	r2, r2
    3902:	d2cd      	bcs.n	38a0 <__divsi3+0x40>
    3904:	09c3      	lsrs	r3, r0, #7
    3906:	428b      	cmp	r3, r1
    3908:	d301      	bcc.n	390e <__divsi3+0xae>
    390a:	01cb      	lsls	r3, r1, #7
    390c:	1ac0      	subs	r0, r0, r3
    390e:	4152      	adcs	r2, r2
    3910:	0983      	lsrs	r3, r0, #6
    3912:	428b      	cmp	r3, r1
    3914:	d301      	bcc.n	391a <__divsi3+0xba>
    3916:	018b      	lsls	r3, r1, #6
    3918:	1ac0      	subs	r0, r0, r3
    391a:	4152      	adcs	r2, r2
    391c:	0943      	lsrs	r3, r0, #5
    391e:	428b      	cmp	r3, r1
    3920:	d301      	bcc.n	3926 <__divsi3+0xc6>
    3922:	014b      	lsls	r3, r1, #5
    3924:	1ac0      	subs	r0, r0, r3
    3926:	4152      	adcs	r2, r2
    3928:	0903      	lsrs	r3, r0, #4
    392a:	428b      	cmp	r3, r1
    392c:	d301      	bcc.n	3932 <__divsi3+0xd2>
    392e:	010b      	lsls	r3, r1, #4
    3930:	1ac0      	subs	r0, r0, r3
    3932:	4152      	adcs	r2, r2
    3934:	08c3      	lsrs	r3, r0, #3
    3936:	428b      	cmp	r3, r1
    3938:	d301      	bcc.n	393e <__divsi3+0xde>
    393a:	00cb      	lsls	r3, r1, #3
    393c:	1ac0      	subs	r0, r0, r3
    393e:	4152      	adcs	r2, r2
    3940:	0883      	lsrs	r3, r0, #2
    3942:	428b      	cmp	r3, r1
    3944:	d301      	bcc.n	394a <__divsi3+0xea>
    3946:	008b      	lsls	r3, r1, #2
    3948:	1ac0      	subs	r0, r0, r3
    394a:	4152      	adcs	r2, r2
    394c:	0843      	lsrs	r3, r0, #1
    394e:	428b      	cmp	r3, r1
    3950:	d301      	bcc.n	3956 <__divsi3+0xf6>
    3952:	004b      	lsls	r3, r1, #1
    3954:	1ac0      	subs	r0, r0, r3
    3956:	4152      	adcs	r2, r2
    3958:	1a41      	subs	r1, r0, r1
    395a:	d200      	bcs.n	395e <__divsi3+0xfe>
    395c:	4601      	mov	r1, r0
    395e:	4152      	adcs	r2, r2
    3960:	4610      	mov	r0, r2
    3962:	4770      	bx	lr
    3964:	e05d      	b.n	3a22 <__divsi3+0x1c2>
    3966:	0fca      	lsrs	r2, r1, #31
    3968:	d000      	beq.n	396c <__divsi3+0x10c>
    396a:	4249      	negs	r1, r1
    396c:	1003      	asrs	r3, r0, #32
    396e:	d300      	bcc.n	3972 <__divsi3+0x112>
    3970:	4240      	negs	r0, r0
    3972:	4053      	eors	r3, r2
    3974:	2200      	movs	r2, #0
    3976:	469c      	mov	ip, r3
    3978:	0903      	lsrs	r3, r0, #4
    397a:	428b      	cmp	r3, r1
    397c:	d32d      	bcc.n	39da <__divsi3+0x17a>
    397e:	0a03      	lsrs	r3, r0, #8
    3980:	428b      	cmp	r3, r1
    3982:	d312      	bcc.n	39aa <__divsi3+0x14a>
    3984:	22fc      	movs	r2, #252	; 0xfc
    3986:	0189      	lsls	r1, r1, #6
    3988:	ba12      	rev	r2, r2
    398a:	0a03      	lsrs	r3, r0, #8
    398c:	428b      	cmp	r3, r1
    398e:	d30c      	bcc.n	39aa <__divsi3+0x14a>
    3990:	0189      	lsls	r1, r1, #6
    3992:	1192      	asrs	r2, r2, #6
    3994:	428b      	cmp	r3, r1
    3996:	d308      	bcc.n	39aa <__divsi3+0x14a>
    3998:	0189      	lsls	r1, r1, #6
    399a:	1192      	asrs	r2, r2, #6
    399c:	428b      	cmp	r3, r1
    399e:	d304      	bcc.n	39aa <__divsi3+0x14a>
    39a0:	0189      	lsls	r1, r1, #6
    39a2:	d03a      	beq.n	3a1a <__divsi3+0x1ba>
    39a4:	1192      	asrs	r2, r2, #6
    39a6:	e000      	b.n	39aa <__divsi3+0x14a>
    39a8:	0989      	lsrs	r1, r1, #6
    39aa:	09c3      	lsrs	r3, r0, #7
    39ac:	428b      	cmp	r3, r1
    39ae:	d301      	bcc.n	39b4 <__divsi3+0x154>
    39b0:	01cb      	lsls	r3, r1, #7
    39b2:	1ac0      	subs	r0, r0, r3
    39b4:	4152      	adcs	r2, r2
    39b6:	0983      	lsrs	r3, r0, #6
    39b8:	428b      	cmp	r3, r1
    39ba:	d301      	bcc.n	39c0 <__divsi3+0x160>
    39bc:	018b      	lsls	r3, r1, #6
    39be:	1ac0      	subs	r0, r0, r3
    39c0:	4152      	adcs	r2, r2
    39c2:	0943      	lsrs	r3, r0, #5
    39c4:	428b      	cmp	r3, r1
    39c6:	d301      	bcc.n	39cc <__divsi3+0x16c>
    39c8:	014b      	lsls	r3, r1, #5
    39ca:	1ac0      	subs	r0, r0, r3
    39cc:	4152      	adcs	r2, r2
    39ce:	0903      	lsrs	r3, r0, #4
    39d0:	428b      	cmp	r3, r1
    39d2:	d301      	bcc.n	39d8 <__divsi3+0x178>
    39d4:	010b      	lsls	r3, r1, #4
    39d6:	1ac0      	subs	r0, r0, r3
    39d8:	4152      	adcs	r2, r2
    39da:	08c3      	lsrs	r3, r0, #3
    39dc:	428b      	cmp	r3, r1
    39de:	d301      	bcc.n	39e4 <__divsi3+0x184>
    39e0:	00cb      	lsls	r3, r1, #3
    39e2:	1ac0      	subs	r0, r0, r3
    39e4:	4152      	adcs	r2, r2
    39e6:	0883      	lsrs	r3, r0, #2
    39e8:	428b      	cmp	r3, r1
    39ea:	d301      	bcc.n	39f0 <__divsi3+0x190>
    39ec:	008b      	lsls	r3, r1, #2
    39ee:	1ac0      	subs	r0, r0, r3
    39f0:	4152      	adcs	r2, r2
    39f2:	d2d9      	bcs.n	39a8 <__divsi3+0x148>
    39f4:	0843      	lsrs	r3, r0, #1
    39f6:	428b      	cmp	r3, r1
    39f8:	d301      	bcc.n	39fe <__divsi3+0x19e>
    39fa:	004b      	lsls	r3, r1, #1
    39fc:	1ac0      	subs	r0, r0, r3
    39fe:	4152      	adcs	r2, r2
    3a00:	1a41      	subs	r1, r0, r1
    3a02:	d200      	bcs.n	3a06 <__divsi3+0x1a6>
    3a04:	4601      	mov	r1, r0
    3a06:	4663      	mov	r3, ip
    3a08:	4152      	adcs	r2, r2
    3a0a:	105b      	asrs	r3, r3, #1
    3a0c:	4610      	mov	r0, r2
    3a0e:	d301      	bcc.n	3a14 <__divsi3+0x1b4>
    3a10:	4240      	negs	r0, r0
    3a12:	2b00      	cmp	r3, #0
    3a14:	d500      	bpl.n	3a18 <__divsi3+0x1b8>
    3a16:	4249      	negs	r1, r1
    3a18:	4770      	bx	lr
    3a1a:	4663      	mov	r3, ip
    3a1c:	105b      	asrs	r3, r3, #1
    3a1e:	d300      	bcc.n	3a22 <__divsi3+0x1c2>
    3a20:	4240      	negs	r0, r0
    3a22:	b501      	push	{r0, lr}
    3a24:	2000      	movs	r0, #0
    3a26:	f000 f805 	bl	3a34 <__aeabi_idiv0>
    3a2a:	bd02      	pop	{r1, pc}

00003a2c <__aeabi_idivmod>:
    3a2c:	2900      	cmp	r1, #0
    3a2e:	d0f8      	beq.n	3a22 <__divsi3+0x1c2>
    3a30:	e716      	b.n	3860 <__divsi3>
    3a32:	4770      	bx	lr

00003a34 <__aeabi_idiv0>:
    3a34:	4770      	bx	lr
    3a36:	46c0      	nop			; (mov r8, r8)

00003a38 <__aeabi_lmul>:
    3a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a3a:	46ce      	mov	lr, r9
    3a3c:	4647      	mov	r7, r8
    3a3e:	0415      	lsls	r5, r2, #16
    3a40:	0c2d      	lsrs	r5, r5, #16
    3a42:	002e      	movs	r6, r5
    3a44:	b580      	push	{r7, lr}
    3a46:	0407      	lsls	r7, r0, #16
    3a48:	0c14      	lsrs	r4, r2, #16
    3a4a:	0c3f      	lsrs	r7, r7, #16
    3a4c:	4699      	mov	r9, r3
    3a4e:	0c03      	lsrs	r3, r0, #16
    3a50:	437e      	muls	r6, r7
    3a52:	435d      	muls	r5, r3
    3a54:	4367      	muls	r7, r4
    3a56:	4363      	muls	r3, r4
    3a58:	197f      	adds	r7, r7, r5
    3a5a:	0c34      	lsrs	r4, r6, #16
    3a5c:	19e4      	adds	r4, r4, r7
    3a5e:	469c      	mov	ip, r3
    3a60:	42a5      	cmp	r5, r4
    3a62:	d903      	bls.n	3a6c <__aeabi_lmul+0x34>
    3a64:	2380      	movs	r3, #128	; 0x80
    3a66:	025b      	lsls	r3, r3, #9
    3a68:	4698      	mov	r8, r3
    3a6a:	44c4      	add	ip, r8
    3a6c:	464b      	mov	r3, r9
    3a6e:	4351      	muls	r1, r2
    3a70:	4343      	muls	r3, r0
    3a72:	0436      	lsls	r6, r6, #16
    3a74:	0c36      	lsrs	r6, r6, #16
    3a76:	0c25      	lsrs	r5, r4, #16
    3a78:	0424      	lsls	r4, r4, #16
    3a7a:	4465      	add	r5, ip
    3a7c:	19a4      	adds	r4, r4, r6
    3a7e:	1859      	adds	r1, r3, r1
    3a80:	1949      	adds	r1, r1, r5
    3a82:	0020      	movs	r0, r4
    3a84:	bc0c      	pop	{r2, r3}
    3a86:	4690      	mov	r8, r2
    3a88:	4699      	mov	r9, r3
    3a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003a8c <__libc_init_array>:
    3a8c:	b570      	push	{r4, r5, r6, lr}
    3a8e:	2600      	movs	r6, #0
    3a90:	4d0c      	ldr	r5, [pc, #48]	; (3ac4 <__libc_init_array+0x38>)
    3a92:	4c0d      	ldr	r4, [pc, #52]	; (3ac8 <__libc_init_array+0x3c>)
    3a94:	1b64      	subs	r4, r4, r5
    3a96:	10a4      	asrs	r4, r4, #2
    3a98:	42a6      	cmp	r6, r4
    3a9a:	d109      	bne.n	3ab0 <__libc_init_array+0x24>
    3a9c:	2600      	movs	r6, #0
    3a9e:	f003 fabf 	bl	7020 <_init>
    3aa2:	4d0a      	ldr	r5, [pc, #40]	; (3acc <__libc_init_array+0x40>)
    3aa4:	4c0a      	ldr	r4, [pc, #40]	; (3ad0 <__libc_init_array+0x44>)
    3aa6:	1b64      	subs	r4, r4, r5
    3aa8:	10a4      	asrs	r4, r4, #2
    3aaa:	42a6      	cmp	r6, r4
    3aac:	d105      	bne.n	3aba <__libc_init_array+0x2e>
    3aae:	bd70      	pop	{r4, r5, r6, pc}
    3ab0:	00b3      	lsls	r3, r6, #2
    3ab2:	58eb      	ldr	r3, [r5, r3]
    3ab4:	4798      	blx	r3
    3ab6:	3601      	adds	r6, #1
    3ab8:	e7ee      	b.n	3a98 <__libc_init_array+0xc>
    3aba:	00b3      	lsls	r3, r6, #2
    3abc:	58eb      	ldr	r3, [r5, r3]
    3abe:	4798      	blx	r3
    3ac0:	3601      	adds	r6, #1
    3ac2:	e7f2      	b.n	3aaa <__libc_init_array+0x1e>
    3ac4:	0000702c 	.word	0x0000702c
    3ac8:	0000702c 	.word	0x0000702c
    3acc:	0000702c 	.word	0x0000702c
    3ad0:	00007030 	.word	0x00007030

00003ad4 <malloc>:
    3ad4:	b510      	push	{r4, lr}
    3ad6:	4b03      	ldr	r3, [pc, #12]	; (3ae4 <malloc+0x10>)
    3ad8:	0001      	movs	r1, r0
    3ada:	6818      	ldr	r0, [r3, #0]
    3adc:	f000 f860 	bl	3ba0 <_malloc_r>
    3ae0:	bd10      	pop	{r4, pc}
    3ae2:	46c0      	nop			; (mov r8, r8)
    3ae4:	20000164 	.word	0x20000164

00003ae8 <memcpy>:
    3ae8:	2300      	movs	r3, #0
    3aea:	b510      	push	{r4, lr}
    3aec:	429a      	cmp	r2, r3
    3aee:	d100      	bne.n	3af2 <memcpy+0xa>
    3af0:	bd10      	pop	{r4, pc}
    3af2:	5ccc      	ldrb	r4, [r1, r3]
    3af4:	54c4      	strb	r4, [r0, r3]
    3af6:	3301      	adds	r3, #1
    3af8:	e7f8      	b.n	3aec <memcpy+0x4>

00003afa <memset>:
    3afa:	0003      	movs	r3, r0
    3afc:	1882      	adds	r2, r0, r2
    3afe:	4293      	cmp	r3, r2
    3b00:	d100      	bne.n	3b04 <memset+0xa>
    3b02:	4770      	bx	lr
    3b04:	7019      	strb	r1, [r3, #0]
    3b06:	3301      	adds	r3, #1
    3b08:	e7f9      	b.n	3afe <memset+0x4>
	...

00003b0c <_free_r>:
    3b0c:	b570      	push	{r4, r5, r6, lr}
    3b0e:	0005      	movs	r5, r0
    3b10:	2900      	cmp	r1, #0
    3b12:	d010      	beq.n	3b36 <_free_r+0x2a>
    3b14:	1f0c      	subs	r4, r1, #4
    3b16:	6823      	ldr	r3, [r4, #0]
    3b18:	2b00      	cmp	r3, #0
    3b1a:	da00      	bge.n	3b1e <_free_r+0x12>
    3b1c:	18e4      	adds	r4, r4, r3
    3b1e:	0028      	movs	r0, r5
    3b20:	f000 fbfe 	bl	4320 <__malloc_lock>
    3b24:	4a1d      	ldr	r2, [pc, #116]	; (3b9c <_free_r+0x90>)
    3b26:	6813      	ldr	r3, [r2, #0]
    3b28:	2b00      	cmp	r3, #0
    3b2a:	d105      	bne.n	3b38 <_free_r+0x2c>
    3b2c:	6063      	str	r3, [r4, #4]
    3b2e:	6014      	str	r4, [r2, #0]
    3b30:	0028      	movs	r0, r5
    3b32:	f000 fbf6 	bl	4322 <__malloc_unlock>
    3b36:	bd70      	pop	{r4, r5, r6, pc}
    3b38:	42a3      	cmp	r3, r4
    3b3a:	d909      	bls.n	3b50 <_free_r+0x44>
    3b3c:	6821      	ldr	r1, [r4, #0]
    3b3e:	1860      	adds	r0, r4, r1
    3b40:	4283      	cmp	r3, r0
    3b42:	d1f3      	bne.n	3b2c <_free_r+0x20>
    3b44:	6818      	ldr	r0, [r3, #0]
    3b46:	685b      	ldr	r3, [r3, #4]
    3b48:	1841      	adds	r1, r0, r1
    3b4a:	6021      	str	r1, [r4, #0]
    3b4c:	e7ee      	b.n	3b2c <_free_r+0x20>
    3b4e:	0013      	movs	r3, r2
    3b50:	685a      	ldr	r2, [r3, #4]
    3b52:	2a00      	cmp	r2, #0
    3b54:	d001      	beq.n	3b5a <_free_r+0x4e>
    3b56:	42a2      	cmp	r2, r4
    3b58:	d9f9      	bls.n	3b4e <_free_r+0x42>
    3b5a:	6819      	ldr	r1, [r3, #0]
    3b5c:	1858      	adds	r0, r3, r1
    3b5e:	42a0      	cmp	r0, r4
    3b60:	d10b      	bne.n	3b7a <_free_r+0x6e>
    3b62:	6820      	ldr	r0, [r4, #0]
    3b64:	1809      	adds	r1, r1, r0
    3b66:	1858      	adds	r0, r3, r1
    3b68:	6019      	str	r1, [r3, #0]
    3b6a:	4282      	cmp	r2, r0
    3b6c:	d1e0      	bne.n	3b30 <_free_r+0x24>
    3b6e:	6810      	ldr	r0, [r2, #0]
    3b70:	6852      	ldr	r2, [r2, #4]
    3b72:	1841      	adds	r1, r0, r1
    3b74:	6019      	str	r1, [r3, #0]
    3b76:	605a      	str	r2, [r3, #4]
    3b78:	e7da      	b.n	3b30 <_free_r+0x24>
    3b7a:	42a0      	cmp	r0, r4
    3b7c:	d902      	bls.n	3b84 <_free_r+0x78>
    3b7e:	230c      	movs	r3, #12
    3b80:	602b      	str	r3, [r5, #0]
    3b82:	e7d5      	b.n	3b30 <_free_r+0x24>
    3b84:	6821      	ldr	r1, [r4, #0]
    3b86:	1860      	adds	r0, r4, r1
    3b88:	4282      	cmp	r2, r0
    3b8a:	d103      	bne.n	3b94 <_free_r+0x88>
    3b8c:	6810      	ldr	r0, [r2, #0]
    3b8e:	6852      	ldr	r2, [r2, #4]
    3b90:	1841      	adds	r1, r0, r1
    3b92:	6021      	str	r1, [r4, #0]
    3b94:	6062      	str	r2, [r4, #4]
    3b96:	605c      	str	r4, [r3, #4]
    3b98:	e7ca      	b.n	3b30 <_free_r+0x24>
    3b9a:	46c0      	nop			; (mov r8, r8)
    3b9c:	200002b4 	.word	0x200002b4

00003ba0 <_malloc_r>:
    3ba0:	2303      	movs	r3, #3
    3ba2:	b570      	push	{r4, r5, r6, lr}
    3ba4:	1ccd      	adds	r5, r1, #3
    3ba6:	439d      	bics	r5, r3
    3ba8:	3508      	adds	r5, #8
    3baa:	0006      	movs	r6, r0
    3bac:	2d0c      	cmp	r5, #12
    3bae:	d21e      	bcs.n	3bee <_malloc_r+0x4e>
    3bb0:	250c      	movs	r5, #12
    3bb2:	42a9      	cmp	r1, r5
    3bb4:	d81d      	bhi.n	3bf2 <_malloc_r+0x52>
    3bb6:	0030      	movs	r0, r6
    3bb8:	f000 fbb2 	bl	4320 <__malloc_lock>
    3bbc:	4a25      	ldr	r2, [pc, #148]	; (3c54 <_malloc_r+0xb4>)
    3bbe:	6814      	ldr	r4, [r2, #0]
    3bc0:	0021      	movs	r1, r4
    3bc2:	2900      	cmp	r1, #0
    3bc4:	d119      	bne.n	3bfa <_malloc_r+0x5a>
    3bc6:	4c24      	ldr	r4, [pc, #144]	; (3c58 <_malloc_r+0xb8>)
    3bc8:	6823      	ldr	r3, [r4, #0]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d103      	bne.n	3bd6 <_malloc_r+0x36>
    3bce:	0030      	movs	r0, r6
    3bd0:	f000 f8dc 	bl	3d8c <_sbrk_r>
    3bd4:	6020      	str	r0, [r4, #0]
    3bd6:	0029      	movs	r1, r5
    3bd8:	0030      	movs	r0, r6
    3bda:	f000 f8d7 	bl	3d8c <_sbrk_r>
    3bde:	1c43      	adds	r3, r0, #1
    3be0:	d12c      	bne.n	3c3c <_malloc_r+0x9c>
    3be2:	230c      	movs	r3, #12
    3be4:	0030      	movs	r0, r6
    3be6:	6033      	str	r3, [r6, #0]
    3be8:	f000 fb9b 	bl	4322 <__malloc_unlock>
    3bec:	e003      	b.n	3bf6 <_malloc_r+0x56>
    3bee:	2d00      	cmp	r5, #0
    3bf0:	dadf      	bge.n	3bb2 <_malloc_r+0x12>
    3bf2:	230c      	movs	r3, #12
    3bf4:	6033      	str	r3, [r6, #0]
    3bf6:	2000      	movs	r0, #0
    3bf8:	bd70      	pop	{r4, r5, r6, pc}
    3bfa:	680b      	ldr	r3, [r1, #0]
    3bfc:	1b5b      	subs	r3, r3, r5
    3bfe:	d41a      	bmi.n	3c36 <_malloc_r+0x96>
    3c00:	2b0b      	cmp	r3, #11
    3c02:	d903      	bls.n	3c0c <_malloc_r+0x6c>
    3c04:	600b      	str	r3, [r1, #0]
    3c06:	18cc      	adds	r4, r1, r3
    3c08:	6025      	str	r5, [r4, #0]
    3c0a:	e003      	b.n	3c14 <_malloc_r+0x74>
    3c0c:	428c      	cmp	r4, r1
    3c0e:	d10e      	bne.n	3c2e <_malloc_r+0x8e>
    3c10:	6863      	ldr	r3, [r4, #4]
    3c12:	6013      	str	r3, [r2, #0]
    3c14:	0030      	movs	r0, r6
    3c16:	f000 fb84 	bl	4322 <__malloc_unlock>
    3c1a:	0020      	movs	r0, r4
    3c1c:	2207      	movs	r2, #7
    3c1e:	300b      	adds	r0, #11
    3c20:	1d23      	adds	r3, r4, #4
    3c22:	4390      	bics	r0, r2
    3c24:	1ac3      	subs	r3, r0, r3
    3c26:	d0e7      	beq.n	3bf8 <_malloc_r+0x58>
    3c28:	425a      	negs	r2, r3
    3c2a:	50e2      	str	r2, [r4, r3]
    3c2c:	e7e4      	b.n	3bf8 <_malloc_r+0x58>
    3c2e:	684b      	ldr	r3, [r1, #4]
    3c30:	6063      	str	r3, [r4, #4]
    3c32:	000c      	movs	r4, r1
    3c34:	e7ee      	b.n	3c14 <_malloc_r+0x74>
    3c36:	000c      	movs	r4, r1
    3c38:	6849      	ldr	r1, [r1, #4]
    3c3a:	e7c2      	b.n	3bc2 <_malloc_r+0x22>
    3c3c:	2303      	movs	r3, #3
    3c3e:	1cc4      	adds	r4, r0, #3
    3c40:	439c      	bics	r4, r3
    3c42:	42a0      	cmp	r0, r4
    3c44:	d0e0      	beq.n	3c08 <_malloc_r+0x68>
    3c46:	1a21      	subs	r1, r4, r0
    3c48:	0030      	movs	r0, r6
    3c4a:	f000 f89f 	bl	3d8c <_sbrk_r>
    3c4e:	1c43      	adds	r3, r0, #1
    3c50:	d1da      	bne.n	3c08 <_malloc_r+0x68>
    3c52:	e7c6      	b.n	3be2 <_malloc_r+0x42>
    3c54:	200002b4 	.word	0x200002b4
    3c58:	200002b8 	.word	0x200002b8

00003c5c <iprintf>:
    3c5c:	b40f      	push	{r0, r1, r2, r3}
    3c5e:	4b0b      	ldr	r3, [pc, #44]	; (3c8c <iprintf+0x30>)
    3c60:	b513      	push	{r0, r1, r4, lr}
    3c62:	681c      	ldr	r4, [r3, #0]
    3c64:	2c00      	cmp	r4, #0
    3c66:	d005      	beq.n	3c74 <iprintf+0x18>
    3c68:	69a3      	ldr	r3, [r4, #24]
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d102      	bne.n	3c74 <iprintf+0x18>
    3c6e:	0020      	movs	r0, r4
    3c70:	f000 fa54 	bl	411c <__sinit>
    3c74:	ab05      	add	r3, sp, #20
    3c76:	9a04      	ldr	r2, [sp, #16]
    3c78:	68a1      	ldr	r1, [r4, #8]
    3c7a:	0020      	movs	r0, r4
    3c7c:	9301      	str	r3, [sp, #4]
    3c7e:	f000 fb79 	bl	4374 <_vfiprintf_r>
    3c82:	bc16      	pop	{r1, r2, r4}
    3c84:	bc08      	pop	{r3}
    3c86:	b004      	add	sp, #16
    3c88:	4718      	bx	r3
    3c8a:	46c0      	nop			; (mov r8, r8)
    3c8c:	20000164 	.word	0x20000164

00003c90 <putchar>:
    3c90:	4b08      	ldr	r3, [pc, #32]	; (3cb4 <putchar+0x24>)
    3c92:	b570      	push	{r4, r5, r6, lr}
    3c94:	681c      	ldr	r4, [r3, #0]
    3c96:	0005      	movs	r5, r0
    3c98:	2c00      	cmp	r4, #0
    3c9a:	d005      	beq.n	3ca8 <putchar+0x18>
    3c9c:	69a3      	ldr	r3, [r4, #24]
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	d102      	bne.n	3ca8 <putchar+0x18>
    3ca2:	0020      	movs	r0, r4
    3ca4:	f000 fa3a 	bl	411c <__sinit>
    3ca8:	0029      	movs	r1, r5
    3caa:	68a2      	ldr	r2, [r4, #8]
    3cac:	0020      	movs	r0, r4
    3cae:	f000 fe05 	bl	48bc <_putc_r>
    3cb2:	bd70      	pop	{r4, r5, r6, pc}
    3cb4:	20000164 	.word	0x20000164

00003cb8 <srand>:
    3cb8:	4b10      	ldr	r3, [pc, #64]	; (3cfc <srand+0x44>)
    3cba:	b570      	push	{r4, r5, r6, lr}
    3cbc:	681c      	ldr	r4, [r3, #0]
    3cbe:	0005      	movs	r5, r0
    3cc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d115      	bne.n	3cf2 <srand+0x3a>
    3cc6:	2018      	movs	r0, #24
    3cc8:	f7ff ff04 	bl	3ad4 <malloc>
    3ccc:	4b0c      	ldr	r3, [pc, #48]	; (3d00 <srand+0x48>)
    3cce:	63a0      	str	r0, [r4, #56]	; 0x38
    3cd0:	8003      	strh	r3, [r0, #0]
    3cd2:	4b0c      	ldr	r3, [pc, #48]	; (3d04 <srand+0x4c>)
    3cd4:	2201      	movs	r2, #1
    3cd6:	8043      	strh	r3, [r0, #2]
    3cd8:	4b0b      	ldr	r3, [pc, #44]	; (3d08 <srand+0x50>)
    3cda:	8083      	strh	r3, [r0, #4]
    3cdc:	4b0b      	ldr	r3, [pc, #44]	; (3d0c <srand+0x54>)
    3cde:	80c3      	strh	r3, [r0, #6]
    3ce0:	4b0b      	ldr	r3, [pc, #44]	; (3d10 <srand+0x58>)
    3ce2:	8103      	strh	r3, [r0, #8]
    3ce4:	2305      	movs	r3, #5
    3ce6:	8143      	strh	r3, [r0, #10]
    3ce8:	3306      	adds	r3, #6
    3cea:	8183      	strh	r3, [r0, #12]
    3cec:	2300      	movs	r3, #0
    3cee:	6102      	str	r2, [r0, #16]
    3cf0:	6143      	str	r3, [r0, #20]
    3cf2:	2200      	movs	r2, #0
    3cf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3cf6:	611d      	str	r5, [r3, #16]
    3cf8:	615a      	str	r2, [r3, #20]
    3cfa:	bd70      	pop	{r4, r5, r6, pc}
    3cfc:	20000164 	.word	0x20000164
    3d00:	0000330e 	.word	0x0000330e
    3d04:	ffffabcd 	.word	0xffffabcd
    3d08:	00001234 	.word	0x00001234
    3d0c:	ffffe66d 	.word	0xffffe66d
    3d10:	ffffdeec 	.word	0xffffdeec

00003d14 <rand>:
    3d14:	4b15      	ldr	r3, [pc, #84]	; (3d6c <rand+0x58>)
    3d16:	b510      	push	{r4, lr}
    3d18:	681c      	ldr	r4, [r3, #0]
    3d1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3d1c:	2b00      	cmp	r3, #0
    3d1e:	d115      	bne.n	3d4c <rand+0x38>
    3d20:	2018      	movs	r0, #24
    3d22:	f7ff fed7 	bl	3ad4 <malloc>
    3d26:	4b12      	ldr	r3, [pc, #72]	; (3d70 <rand+0x5c>)
    3d28:	63a0      	str	r0, [r4, #56]	; 0x38
    3d2a:	8003      	strh	r3, [r0, #0]
    3d2c:	4b11      	ldr	r3, [pc, #68]	; (3d74 <rand+0x60>)
    3d2e:	2201      	movs	r2, #1
    3d30:	8043      	strh	r3, [r0, #2]
    3d32:	4b11      	ldr	r3, [pc, #68]	; (3d78 <rand+0x64>)
    3d34:	8083      	strh	r3, [r0, #4]
    3d36:	4b11      	ldr	r3, [pc, #68]	; (3d7c <rand+0x68>)
    3d38:	80c3      	strh	r3, [r0, #6]
    3d3a:	4b11      	ldr	r3, [pc, #68]	; (3d80 <rand+0x6c>)
    3d3c:	8103      	strh	r3, [r0, #8]
    3d3e:	2305      	movs	r3, #5
    3d40:	8143      	strh	r3, [r0, #10]
    3d42:	3306      	adds	r3, #6
    3d44:	8183      	strh	r3, [r0, #12]
    3d46:	2300      	movs	r3, #0
    3d48:	6102      	str	r2, [r0, #16]
    3d4a:	6143      	str	r3, [r0, #20]
    3d4c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    3d4e:	4a0d      	ldr	r2, [pc, #52]	; (3d84 <rand+0x70>)
    3d50:	6920      	ldr	r0, [r4, #16]
    3d52:	6961      	ldr	r1, [r4, #20]
    3d54:	4b0c      	ldr	r3, [pc, #48]	; (3d88 <rand+0x74>)
    3d56:	f7ff fe6f 	bl	3a38 <__aeabi_lmul>
    3d5a:	2201      	movs	r2, #1
    3d5c:	2300      	movs	r3, #0
    3d5e:	1880      	adds	r0, r0, r2
    3d60:	4159      	adcs	r1, r3
    3d62:	6120      	str	r0, [r4, #16]
    3d64:	6161      	str	r1, [r4, #20]
    3d66:	0048      	lsls	r0, r1, #1
    3d68:	0840      	lsrs	r0, r0, #1
    3d6a:	bd10      	pop	{r4, pc}
    3d6c:	20000164 	.word	0x20000164
    3d70:	0000330e 	.word	0x0000330e
    3d74:	ffffabcd 	.word	0xffffabcd
    3d78:	00001234 	.word	0x00001234
    3d7c:	ffffe66d 	.word	0xffffe66d
    3d80:	ffffdeec 	.word	0xffffdeec
    3d84:	4c957f2d 	.word	0x4c957f2d
    3d88:	5851f42d 	.word	0x5851f42d

00003d8c <_sbrk_r>:
    3d8c:	2300      	movs	r3, #0
    3d8e:	b570      	push	{r4, r5, r6, lr}
    3d90:	4c06      	ldr	r4, [pc, #24]	; (3dac <_sbrk_r+0x20>)
    3d92:	0005      	movs	r5, r0
    3d94:	0008      	movs	r0, r1
    3d96:	6023      	str	r3, [r4, #0]
    3d98:	f7fe fb02 	bl	23a0 <_sbrk>
    3d9c:	1c43      	adds	r3, r0, #1
    3d9e:	d103      	bne.n	3da8 <_sbrk_r+0x1c>
    3da0:	6823      	ldr	r3, [r4, #0]
    3da2:	2b00      	cmp	r3, #0
    3da4:	d000      	beq.n	3da8 <_sbrk_r+0x1c>
    3da6:	602b      	str	r3, [r5, #0]
    3da8:	bd70      	pop	{r4, r5, r6, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	20000adc 	.word	0x20000adc

00003db0 <setbuf>:
    3db0:	424a      	negs	r2, r1
    3db2:	414a      	adcs	r2, r1
    3db4:	2380      	movs	r3, #128	; 0x80
    3db6:	b510      	push	{r4, lr}
    3db8:	0052      	lsls	r2, r2, #1
    3dba:	00db      	lsls	r3, r3, #3
    3dbc:	f000 f802 	bl	3dc4 <setvbuf>
    3dc0:	bd10      	pop	{r4, pc}
	...

00003dc4 <setvbuf>:
    3dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dc6:	001d      	movs	r5, r3
    3dc8:	4b4f      	ldr	r3, [pc, #316]	; (3f08 <setvbuf+0x144>)
    3dca:	b085      	sub	sp, #20
    3dcc:	681e      	ldr	r6, [r3, #0]
    3dce:	0004      	movs	r4, r0
    3dd0:	000f      	movs	r7, r1
    3dd2:	9200      	str	r2, [sp, #0]
    3dd4:	2e00      	cmp	r6, #0
    3dd6:	d005      	beq.n	3de4 <setvbuf+0x20>
    3dd8:	69b3      	ldr	r3, [r6, #24]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d102      	bne.n	3de4 <setvbuf+0x20>
    3dde:	0030      	movs	r0, r6
    3de0:	f000 f99c 	bl	411c <__sinit>
    3de4:	4b49      	ldr	r3, [pc, #292]	; (3f0c <setvbuf+0x148>)
    3de6:	429c      	cmp	r4, r3
    3de8:	d150      	bne.n	3e8c <setvbuf+0xc8>
    3dea:	6874      	ldr	r4, [r6, #4]
    3dec:	9b00      	ldr	r3, [sp, #0]
    3dee:	2b02      	cmp	r3, #2
    3df0:	d005      	beq.n	3dfe <setvbuf+0x3a>
    3df2:	2b01      	cmp	r3, #1
    3df4:	d900      	bls.n	3df8 <setvbuf+0x34>
    3df6:	e084      	b.n	3f02 <setvbuf+0x13e>
    3df8:	2d00      	cmp	r5, #0
    3dfa:	da00      	bge.n	3dfe <setvbuf+0x3a>
    3dfc:	e081      	b.n	3f02 <setvbuf+0x13e>
    3dfe:	0021      	movs	r1, r4
    3e00:	0030      	movs	r0, r6
    3e02:	f000 f91d 	bl	4040 <_fflush_r>
    3e06:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3e08:	2900      	cmp	r1, #0
    3e0a:	d008      	beq.n	3e1e <setvbuf+0x5a>
    3e0c:	0023      	movs	r3, r4
    3e0e:	3344      	adds	r3, #68	; 0x44
    3e10:	4299      	cmp	r1, r3
    3e12:	d002      	beq.n	3e1a <setvbuf+0x56>
    3e14:	0030      	movs	r0, r6
    3e16:	f7ff fe79 	bl	3b0c <_free_r>
    3e1a:	2300      	movs	r3, #0
    3e1c:	6363      	str	r3, [r4, #52]	; 0x34
    3e1e:	2300      	movs	r3, #0
    3e20:	61a3      	str	r3, [r4, #24]
    3e22:	6063      	str	r3, [r4, #4]
    3e24:	89a3      	ldrh	r3, [r4, #12]
    3e26:	061b      	lsls	r3, r3, #24
    3e28:	d503      	bpl.n	3e32 <setvbuf+0x6e>
    3e2a:	6921      	ldr	r1, [r4, #16]
    3e2c:	0030      	movs	r0, r6
    3e2e:	f7ff fe6d 	bl	3b0c <_free_r>
    3e32:	89a3      	ldrh	r3, [r4, #12]
    3e34:	4a36      	ldr	r2, [pc, #216]	; (3f10 <setvbuf+0x14c>)
    3e36:	4013      	ands	r3, r2
    3e38:	81a3      	strh	r3, [r4, #12]
    3e3a:	9b00      	ldr	r3, [sp, #0]
    3e3c:	2b02      	cmp	r3, #2
    3e3e:	d05a      	beq.n	3ef6 <setvbuf+0x132>
    3e40:	ab03      	add	r3, sp, #12
    3e42:	aa02      	add	r2, sp, #8
    3e44:	0021      	movs	r1, r4
    3e46:	0030      	movs	r0, r6
    3e48:	f000 f9fe 	bl	4248 <__swhatbuf_r>
    3e4c:	89a3      	ldrh	r3, [r4, #12]
    3e4e:	4318      	orrs	r0, r3
    3e50:	81a0      	strh	r0, [r4, #12]
    3e52:	2d00      	cmp	r5, #0
    3e54:	d124      	bne.n	3ea0 <setvbuf+0xdc>
    3e56:	9d02      	ldr	r5, [sp, #8]
    3e58:	0028      	movs	r0, r5
    3e5a:	f7ff fe3b 	bl	3ad4 <malloc>
    3e5e:	9501      	str	r5, [sp, #4]
    3e60:	1e07      	subs	r7, r0, #0
    3e62:	d142      	bne.n	3eea <setvbuf+0x126>
    3e64:	9b02      	ldr	r3, [sp, #8]
    3e66:	9301      	str	r3, [sp, #4]
    3e68:	42ab      	cmp	r3, r5
    3e6a:	d139      	bne.n	3ee0 <setvbuf+0x11c>
    3e6c:	2001      	movs	r0, #1
    3e6e:	4240      	negs	r0, r0
    3e70:	2302      	movs	r3, #2
    3e72:	89a2      	ldrh	r2, [r4, #12]
    3e74:	4313      	orrs	r3, r2
    3e76:	81a3      	strh	r3, [r4, #12]
    3e78:	2300      	movs	r3, #0
    3e7a:	60a3      	str	r3, [r4, #8]
    3e7c:	0023      	movs	r3, r4
    3e7e:	3347      	adds	r3, #71	; 0x47
    3e80:	6023      	str	r3, [r4, #0]
    3e82:	6123      	str	r3, [r4, #16]
    3e84:	2301      	movs	r3, #1
    3e86:	6163      	str	r3, [r4, #20]
    3e88:	b005      	add	sp, #20
    3e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e8c:	4b21      	ldr	r3, [pc, #132]	; (3f14 <setvbuf+0x150>)
    3e8e:	429c      	cmp	r4, r3
    3e90:	d101      	bne.n	3e96 <setvbuf+0xd2>
    3e92:	68b4      	ldr	r4, [r6, #8]
    3e94:	e7aa      	b.n	3dec <setvbuf+0x28>
    3e96:	4b20      	ldr	r3, [pc, #128]	; (3f18 <setvbuf+0x154>)
    3e98:	429c      	cmp	r4, r3
    3e9a:	d1a7      	bne.n	3dec <setvbuf+0x28>
    3e9c:	68f4      	ldr	r4, [r6, #12]
    3e9e:	e7a5      	b.n	3dec <setvbuf+0x28>
    3ea0:	2f00      	cmp	r7, #0
    3ea2:	d0d9      	beq.n	3e58 <setvbuf+0x94>
    3ea4:	69b3      	ldr	r3, [r6, #24]
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d102      	bne.n	3eb0 <setvbuf+0xec>
    3eaa:	0030      	movs	r0, r6
    3eac:	f000 f936 	bl	411c <__sinit>
    3eb0:	9b00      	ldr	r3, [sp, #0]
    3eb2:	2b01      	cmp	r3, #1
    3eb4:	d103      	bne.n	3ebe <setvbuf+0xfa>
    3eb6:	89a3      	ldrh	r3, [r4, #12]
    3eb8:	9a00      	ldr	r2, [sp, #0]
    3eba:	431a      	orrs	r2, r3
    3ebc:	81a2      	strh	r2, [r4, #12]
    3ebe:	2008      	movs	r0, #8
    3ec0:	89a3      	ldrh	r3, [r4, #12]
    3ec2:	6027      	str	r7, [r4, #0]
    3ec4:	6127      	str	r7, [r4, #16]
    3ec6:	6165      	str	r5, [r4, #20]
    3ec8:	4018      	ands	r0, r3
    3eca:	d018      	beq.n	3efe <setvbuf+0x13a>
    3ecc:	2001      	movs	r0, #1
    3ece:	4018      	ands	r0, r3
    3ed0:	2300      	movs	r3, #0
    3ed2:	4298      	cmp	r0, r3
    3ed4:	d011      	beq.n	3efa <setvbuf+0x136>
    3ed6:	426d      	negs	r5, r5
    3ed8:	60a3      	str	r3, [r4, #8]
    3eda:	61a5      	str	r5, [r4, #24]
    3edc:	0018      	movs	r0, r3
    3ede:	e7d3      	b.n	3e88 <setvbuf+0xc4>
    3ee0:	9801      	ldr	r0, [sp, #4]
    3ee2:	f7ff fdf7 	bl	3ad4 <malloc>
    3ee6:	1e07      	subs	r7, r0, #0
    3ee8:	d0c0      	beq.n	3e6c <setvbuf+0xa8>
    3eea:	2380      	movs	r3, #128	; 0x80
    3eec:	89a2      	ldrh	r2, [r4, #12]
    3eee:	9d01      	ldr	r5, [sp, #4]
    3ef0:	4313      	orrs	r3, r2
    3ef2:	81a3      	strh	r3, [r4, #12]
    3ef4:	e7d6      	b.n	3ea4 <setvbuf+0xe0>
    3ef6:	2000      	movs	r0, #0
    3ef8:	e7ba      	b.n	3e70 <setvbuf+0xac>
    3efa:	60a5      	str	r5, [r4, #8]
    3efc:	e7c4      	b.n	3e88 <setvbuf+0xc4>
    3efe:	60a0      	str	r0, [r4, #8]
    3f00:	e7c2      	b.n	3e88 <setvbuf+0xc4>
    3f02:	2001      	movs	r0, #1
    3f04:	4240      	negs	r0, r0
    3f06:	e7bf      	b.n	3e88 <setvbuf+0xc4>
    3f08:	20000164 	.word	0x20000164
    3f0c:	00006fac 	.word	0x00006fac
    3f10:	fffff35c 	.word	0xfffff35c
    3f14:	00006fcc 	.word	0x00006fcc
    3f18:	00006f8c 	.word	0x00006f8c

00003f1c <strlen>:
    3f1c:	2300      	movs	r3, #0
    3f1e:	5cc2      	ldrb	r2, [r0, r3]
    3f20:	3301      	adds	r3, #1
    3f22:	2a00      	cmp	r2, #0
    3f24:	d1fb      	bne.n	3f1e <strlen+0x2>
    3f26:	1e58      	subs	r0, r3, #1
    3f28:	4770      	bx	lr
	...

00003f2c <__sflush_r>:
    3f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f2e:	898a      	ldrh	r2, [r1, #12]
    3f30:	0005      	movs	r5, r0
    3f32:	000c      	movs	r4, r1
    3f34:	0713      	lsls	r3, r2, #28
    3f36:	d460      	bmi.n	3ffa <__sflush_r+0xce>
    3f38:	684b      	ldr	r3, [r1, #4]
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	dc04      	bgt.n	3f48 <__sflush_r+0x1c>
    3f3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3f40:	2b00      	cmp	r3, #0
    3f42:	dc01      	bgt.n	3f48 <__sflush_r+0x1c>
    3f44:	2000      	movs	r0, #0
    3f46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3f48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3f4a:	2f00      	cmp	r7, #0
    3f4c:	d0fa      	beq.n	3f44 <__sflush_r+0x18>
    3f4e:	2300      	movs	r3, #0
    3f50:	682e      	ldr	r6, [r5, #0]
    3f52:	602b      	str	r3, [r5, #0]
    3f54:	2380      	movs	r3, #128	; 0x80
    3f56:	015b      	lsls	r3, r3, #5
    3f58:	401a      	ands	r2, r3
    3f5a:	d034      	beq.n	3fc6 <__sflush_r+0x9a>
    3f5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3f5e:	89a3      	ldrh	r3, [r4, #12]
    3f60:	075b      	lsls	r3, r3, #29
    3f62:	d506      	bpl.n	3f72 <__sflush_r+0x46>
    3f64:	6863      	ldr	r3, [r4, #4]
    3f66:	1ac0      	subs	r0, r0, r3
    3f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3f6a:	2b00      	cmp	r3, #0
    3f6c:	d001      	beq.n	3f72 <__sflush_r+0x46>
    3f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3f70:	1ac0      	subs	r0, r0, r3
    3f72:	0002      	movs	r2, r0
    3f74:	6a21      	ldr	r1, [r4, #32]
    3f76:	2300      	movs	r3, #0
    3f78:	0028      	movs	r0, r5
    3f7a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3f7c:	47b8      	blx	r7
    3f7e:	89a1      	ldrh	r1, [r4, #12]
    3f80:	1c43      	adds	r3, r0, #1
    3f82:	d106      	bne.n	3f92 <__sflush_r+0x66>
    3f84:	682b      	ldr	r3, [r5, #0]
    3f86:	2b1d      	cmp	r3, #29
    3f88:	d831      	bhi.n	3fee <__sflush_r+0xc2>
    3f8a:	4a2c      	ldr	r2, [pc, #176]	; (403c <__sflush_r+0x110>)
    3f8c:	40da      	lsrs	r2, r3
    3f8e:	07d3      	lsls	r3, r2, #31
    3f90:	d52d      	bpl.n	3fee <__sflush_r+0xc2>
    3f92:	2300      	movs	r3, #0
    3f94:	6063      	str	r3, [r4, #4]
    3f96:	6923      	ldr	r3, [r4, #16]
    3f98:	6023      	str	r3, [r4, #0]
    3f9a:	04cb      	lsls	r3, r1, #19
    3f9c:	d505      	bpl.n	3faa <__sflush_r+0x7e>
    3f9e:	1c43      	adds	r3, r0, #1
    3fa0:	d102      	bne.n	3fa8 <__sflush_r+0x7c>
    3fa2:	682b      	ldr	r3, [r5, #0]
    3fa4:	2b00      	cmp	r3, #0
    3fa6:	d100      	bne.n	3faa <__sflush_r+0x7e>
    3fa8:	6560      	str	r0, [r4, #84]	; 0x54
    3faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3fac:	602e      	str	r6, [r5, #0]
    3fae:	2900      	cmp	r1, #0
    3fb0:	d0c8      	beq.n	3f44 <__sflush_r+0x18>
    3fb2:	0023      	movs	r3, r4
    3fb4:	3344      	adds	r3, #68	; 0x44
    3fb6:	4299      	cmp	r1, r3
    3fb8:	d002      	beq.n	3fc0 <__sflush_r+0x94>
    3fba:	0028      	movs	r0, r5
    3fbc:	f7ff fda6 	bl	3b0c <_free_r>
    3fc0:	2000      	movs	r0, #0
    3fc2:	6360      	str	r0, [r4, #52]	; 0x34
    3fc4:	e7bf      	b.n	3f46 <__sflush_r+0x1a>
    3fc6:	2301      	movs	r3, #1
    3fc8:	6a21      	ldr	r1, [r4, #32]
    3fca:	0028      	movs	r0, r5
    3fcc:	47b8      	blx	r7
    3fce:	1c43      	adds	r3, r0, #1
    3fd0:	d1c5      	bne.n	3f5e <__sflush_r+0x32>
    3fd2:	682b      	ldr	r3, [r5, #0]
    3fd4:	2b00      	cmp	r3, #0
    3fd6:	d0c2      	beq.n	3f5e <__sflush_r+0x32>
    3fd8:	2b1d      	cmp	r3, #29
    3fda:	d001      	beq.n	3fe0 <__sflush_r+0xb4>
    3fdc:	2b16      	cmp	r3, #22
    3fde:	d101      	bne.n	3fe4 <__sflush_r+0xb8>
    3fe0:	602e      	str	r6, [r5, #0]
    3fe2:	e7af      	b.n	3f44 <__sflush_r+0x18>
    3fe4:	2340      	movs	r3, #64	; 0x40
    3fe6:	89a2      	ldrh	r2, [r4, #12]
    3fe8:	4313      	orrs	r3, r2
    3fea:	81a3      	strh	r3, [r4, #12]
    3fec:	e7ab      	b.n	3f46 <__sflush_r+0x1a>
    3fee:	2340      	movs	r3, #64	; 0x40
    3ff0:	430b      	orrs	r3, r1
    3ff2:	2001      	movs	r0, #1
    3ff4:	81a3      	strh	r3, [r4, #12]
    3ff6:	4240      	negs	r0, r0
    3ff8:	e7a5      	b.n	3f46 <__sflush_r+0x1a>
    3ffa:	690f      	ldr	r7, [r1, #16]
    3ffc:	2f00      	cmp	r7, #0
    3ffe:	d0a1      	beq.n	3f44 <__sflush_r+0x18>
    4000:	680b      	ldr	r3, [r1, #0]
    4002:	600f      	str	r7, [r1, #0]
    4004:	1bdb      	subs	r3, r3, r7
    4006:	9301      	str	r3, [sp, #4]
    4008:	2300      	movs	r3, #0
    400a:	0792      	lsls	r2, r2, #30
    400c:	d100      	bne.n	4010 <__sflush_r+0xe4>
    400e:	694b      	ldr	r3, [r1, #20]
    4010:	60a3      	str	r3, [r4, #8]
    4012:	9b01      	ldr	r3, [sp, #4]
    4014:	2b00      	cmp	r3, #0
    4016:	dc00      	bgt.n	401a <__sflush_r+0xee>
    4018:	e794      	b.n	3f44 <__sflush_r+0x18>
    401a:	9b01      	ldr	r3, [sp, #4]
    401c:	003a      	movs	r2, r7
    401e:	6a21      	ldr	r1, [r4, #32]
    4020:	0028      	movs	r0, r5
    4022:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4024:	47b0      	blx	r6
    4026:	2800      	cmp	r0, #0
    4028:	dc03      	bgt.n	4032 <__sflush_r+0x106>
    402a:	2340      	movs	r3, #64	; 0x40
    402c:	89a2      	ldrh	r2, [r4, #12]
    402e:	4313      	orrs	r3, r2
    4030:	e7df      	b.n	3ff2 <__sflush_r+0xc6>
    4032:	9b01      	ldr	r3, [sp, #4]
    4034:	183f      	adds	r7, r7, r0
    4036:	1a1b      	subs	r3, r3, r0
    4038:	9301      	str	r3, [sp, #4]
    403a:	e7ea      	b.n	4012 <__sflush_r+0xe6>
    403c:	20400001 	.word	0x20400001

00004040 <_fflush_r>:
    4040:	690b      	ldr	r3, [r1, #16]
    4042:	b570      	push	{r4, r5, r6, lr}
    4044:	0005      	movs	r5, r0
    4046:	000c      	movs	r4, r1
    4048:	2b00      	cmp	r3, #0
    404a:	d101      	bne.n	4050 <_fflush_r+0x10>
    404c:	2000      	movs	r0, #0
    404e:	bd70      	pop	{r4, r5, r6, pc}
    4050:	2800      	cmp	r0, #0
    4052:	d004      	beq.n	405e <_fflush_r+0x1e>
    4054:	6983      	ldr	r3, [r0, #24]
    4056:	2b00      	cmp	r3, #0
    4058:	d101      	bne.n	405e <_fflush_r+0x1e>
    405a:	f000 f85f 	bl	411c <__sinit>
    405e:	4b0b      	ldr	r3, [pc, #44]	; (408c <_fflush_r+0x4c>)
    4060:	429c      	cmp	r4, r3
    4062:	d109      	bne.n	4078 <_fflush_r+0x38>
    4064:	686c      	ldr	r4, [r5, #4]
    4066:	220c      	movs	r2, #12
    4068:	5ea3      	ldrsh	r3, [r4, r2]
    406a:	2b00      	cmp	r3, #0
    406c:	d0ee      	beq.n	404c <_fflush_r+0xc>
    406e:	0021      	movs	r1, r4
    4070:	0028      	movs	r0, r5
    4072:	f7ff ff5b 	bl	3f2c <__sflush_r>
    4076:	e7ea      	b.n	404e <_fflush_r+0xe>
    4078:	4b05      	ldr	r3, [pc, #20]	; (4090 <_fflush_r+0x50>)
    407a:	429c      	cmp	r4, r3
    407c:	d101      	bne.n	4082 <_fflush_r+0x42>
    407e:	68ac      	ldr	r4, [r5, #8]
    4080:	e7f1      	b.n	4066 <_fflush_r+0x26>
    4082:	4b04      	ldr	r3, [pc, #16]	; (4094 <_fflush_r+0x54>)
    4084:	429c      	cmp	r4, r3
    4086:	d1ee      	bne.n	4066 <_fflush_r+0x26>
    4088:	68ec      	ldr	r4, [r5, #12]
    408a:	e7ec      	b.n	4066 <_fflush_r+0x26>
    408c:	00006fac 	.word	0x00006fac
    4090:	00006fcc 	.word	0x00006fcc
    4094:	00006f8c 	.word	0x00006f8c

00004098 <_cleanup_r>:
    4098:	b510      	push	{r4, lr}
    409a:	4902      	ldr	r1, [pc, #8]	; (40a4 <_cleanup_r+0xc>)
    409c:	f000 f8b2 	bl	4204 <_fwalk_reent>
    40a0:	bd10      	pop	{r4, pc}
    40a2:	46c0      	nop			; (mov r8, r8)
    40a4:	00004041 	.word	0x00004041

000040a8 <std.isra.0>:
    40a8:	2300      	movs	r3, #0
    40aa:	b510      	push	{r4, lr}
    40ac:	0004      	movs	r4, r0
    40ae:	6003      	str	r3, [r0, #0]
    40b0:	6043      	str	r3, [r0, #4]
    40b2:	6083      	str	r3, [r0, #8]
    40b4:	8181      	strh	r1, [r0, #12]
    40b6:	6643      	str	r3, [r0, #100]	; 0x64
    40b8:	81c2      	strh	r2, [r0, #14]
    40ba:	6103      	str	r3, [r0, #16]
    40bc:	6143      	str	r3, [r0, #20]
    40be:	6183      	str	r3, [r0, #24]
    40c0:	0019      	movs	r1, r3
    40c2:	2208      	movs	r2, #8
    40c4:	305c      	adds	r0, #92	; 0x5c
    40c6:	f7ff fd18 	bl	3afa <memset>
    40ca:	4b05      	ldr	r3, [pc, #20]	; (40e0 <std.isra.0+0x38>)
    40cc:	6224      	str	r4, [r4, #32]
    40ce:	6263      	str	r3, [r4, #36]	; 0x24
    40d0:	4b04      	ldr	r3, [pc, #16]	; (40e4 <std.isra.0+0x3c>)
    40d2:	62a3      	str	r3, [r4, #40]	; 0x28
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <std.isra.0+0x40>)
    40d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    40d8:	4b04      	ldr	r3, [pc, #16]	; (40ec <std.isra.0+0x44>)
    40da:	6323      	str	r3, [r4, #48]	; 0x30
    40dc:	bd10      	pop	{r4, pc}
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	00004929 	.word	0x00004929
    40e4:	00004951 	.word	0x00004951
    40e8:	00004989 	.word	0x00004989
    40ec:	000049b5 	.word	0x000049b5

000040f0 <__sfmoreglue>:
    40f0:	b570      	push	{r4, r5, r6, lr}
    40f2:	2568      	movs	r5, #104	; 0x68
    40f4:	1e4a      	subs	r2, r1, #1
    40f6:	4355      	muls	r5, r2
    40f8:	000e      	movs	r6, r1
    40fa:	0029      	movs	r1, r5
    40fc:	3174      	adds	r1, #116	; 0x74
    40fe:	f7ff fd4f 	bl	3ba0 <_malloc_r>
    4102:	1e04      	subs	r4, r0, #0
    4104:	d008      	beq.n	4118 <__sfmoreglue+0x28>
    4106:	2100      	movs	r1, #0
    4108:	002a      	movs	r2, r5
    410a:	6001      	str	r1, [r0, #0]
    410c:	6046      	str	r6, [r0, #4]
    410e:	300c      	adds	r0, #12
    4110:	60a0      	str	r0, [r4, #8]
    4112:	3268      	adds	r2, #104	; 0x68
    4114:	f7ff fcf1 	bl	3afa <memset>
    4118:	0020      	movs	r0, r4
    411a:	bd70      	pop	{r4, r5, r6, pc}

0000411c <__sinit>:
    411c:	6983      	ldr	r3, [r0, #24]
    411e:	b513      	push	{r0, r1, r4, lr}
    4120:	0004      	movs	r4, r0
    4122:	2b00      	cmp	r3, #0
    4124:	d128      	bne.n	4178 <__sinit+0x5c>
    4126:	6483      	str	r3, [r0, #72]	; 0x48
    4128:	64c3      	str	r3, [r0, #76]	; 0x4c
    412a:	6503      	str	r3, [r0, #80]	; 0x50
    412c:	4b13      	ldr	r3, [pc, #76]	; (417c <__sinit+0x60>)
    412e:	4a14      	ldr	r2, [pc, #80]	; (4180 <__sinit+0x64>)
    4130:	681b      	ldr	r3, [r3, #0]
    4132:	6282      	str	r2, [r0, #40]	; 0x28
    4134:	9301      	str	r3, [sp, #4]
    4136:	4298      	cmp	r0, r3
    4138:	d101      	bne.n	413e <__sinit+0x22>
    413a:	2301      	movs	r3, #1
    413c:	6183      	str	r3, [r0, #24]
    413e:	0020      	movs	r0, r4
    4140:	f000 f820 	bl	4184 <__sfp>
    4144:	6060      	str	r0, [r4, #4]
    4146:	0020      	movs	r0, r4
    4148:	f000 f81c 	bl	4184 <__sfp>
    414c:	60a0      	str	r0, [r4, #8]
    414e:	0020      	movs	r0, r4
    4150:	f000 f818 	bl	4184 <__sfp>
    4154:	2200      	movs	r2, #0
    4156:	60e0      	str	r0, [r4, #12]
    4158:	2104      	movs	r1, #4
    415a:	6860      	ldr	r0, [r4, #4]
    415c:	f7ff ffa4 	bl	40a8 <std.isra.0>
    4160:	2201      	movs	r2, #1
    4162:	2109      	movs	r1, #9
    4164:	68a0      	ldr	r0, [r4, #8]
    4166:	f7ff ff9f 	bl	40a8 <std.isra.0>
    416a:	2202      	movs	r2, #2
    416c:	2112      	movs	r1, #18
    416e:	68e0      	ldr	r0, [r4, #12]
    4170:	f7ff ff9a 	bl	40a8 <std.isra.0>
    4174:	2301      	movs	r3, #1
    4176:	61a3      	str	r3, [r4, #24]
    4178:	bd13      	pop	{r0, r1, r4, pc}
    417a:	46c0      	nop			; (mov r8, r8)
    417c:	00006f88 	.word	0x00006f88
    4180:	00004099 	.word	0x00004099

00004184 <__sfp>:
    4184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4186:	4b1e      	ldr	r3, [pc, #120]	; (4200 <__sfp+0x7c>)
    4188:	0007      	movs	r7, r0
    418a:	681e      	ldr	r6, [r3, #0]
    418c:	69b3      	ldr	r3, [r6, #24]
    418e:	2b00      	cmp	r3, #0
    4190:	d102      	bne.n	4198 <__sfp+0x14>
    4192:	0030      	movs	r0, r6
    4194:	f7ff ffc2 	bl	411c <__sinit>
    4198:	3648      	adds	r6, #72	; 0x48
    419a:	68b4      	ldr	r4, [r6, #8]
    419c:	6873      	ldr	r3, [r6, #4]
    419e:	3b01      	subs	r3, #1
    41a0:	d504      	bpl.n	41ac <__sfp+0x28>
    41a2:	6833      	ldr	r3, [r6, #0]
    41a4:	2b00      	cmp	r3, #0
    41a6:	d007      	beq.n	41b8 <__sfp+0x34>
    41a8:	6836      	ldr	r6, [r6, #0]
    41aa:	e7f6      	b.n	419a <__sfp+0x16>
    41ac:	220c      	movs	r2, #12
    41ae:	5ea5      	ldrsh	r5, [r4, r2]
    41b0:	2d00      	cmp	r5, #0
    41b2:	d00d      	beq.n	41d0 <__sfp+0x4c>
    41b4:	3468      	adds	r4, #104	; 0x68
    41b6:	e7f2      	b.n	419e <__sfp+0x1a>
    41b8:	2104      	movs	r1, #4
    41ba:	0038      	movs	r0, r7
    41bc:	f7ff ff98 	bl	40f0 <__sfmoreglue>
    41c0:	6030      	str	r0, [r6, #0]
    41c2:	2800      	cmp	r0, #0
    41c4:	d1f0      	bne.n	41a8 <__sfp+0x24>
    41c6:	230c      	movs	r3, #12
    41c8:	0004      	movs	r4, r0
    41ca:	603b      	str	r3, [r7, #0]
    41cc:	0020      	movs	r0, r4
    41ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41d0:	2301      	movs	r3, #1
    41d2:	0020      	movs	r0, r4
    41d4:	425b      	negs	r3, r3
    41d6:	81e3      	strh	r3, [r4, #14]
    41d8:	3302      	adds	r3, #2
    41da:	81a3      	strh	r3, [r4, #12]
    41dc:	6665      	str	r5, [r4, #100]	; 0x64
    41de:	6025      	str	r5, [r4, #0]
    41e0:	60a5      	str	r5, [r4, #8]
    41e2:	6065      	str	r5, [r4, #4]
    41e4:	6125      	str	r5, [r4, #16]
    41e6:	6165      	str	r5, [r4, #20]
    41e8:	61a5      	str	r5, [r4, #24]
    41ea:	2208      	movs	r2, #8
    41ec:	0029      	movs	r1, r5
    41ee:	305c      	adds	r0, #92	; 0x5c
    41f0:	f7ff fc83 	bl	3afa <memset>
    41f4:	6365      	str	r5, [r4, #52]	; 0x34
    41f6:	63a5      	str	r5, [r4, #56]	; 0x38
    41f8:	64a5      	str	r5, [r4, #72]	; 0x48
    41fa:	64e5      	str	r5, [r4, #76]	; 0x4c
    41fc:	e7e6      	b.n	41cc <__sfp+0x48>
    41fe:	46c0      	nop			; (mov r8, r8)
    4200:	00006f88 	.word	0x00006f88

00004204 <_fwalk_reent>:
    4204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4206:	0004      	movs	r4, r0
    4208:	0007      	movs	r7, r0
    420a:	2600      	movs	r6, #0
    420c:	9101      	str	r1, [sp, #4]
    420e:	3448      	adds	r4, #72	; 0x48
    4210:	2c00      	cmp	r4, #0
    4212:	d101      	bne.n	4218 <_fwalk_reent+0x14>
    4214:	0030      	movs	r0, r6
    4216:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4218:	6863      	ldr	r3, [r4, #4]
    421a:	68a5      	ldr	r5, [r4, #8]
    421c:	9300      	str	r3, [sp, #0]
    421e:	9b00      	ldr	r3, [sp, #0]
    4220:	3b01      	subs	r3, #1
    4222:	9300      	str	r3, [sp, #0]
    4224:	d501      	bpl.n	422a <_fwalk_reent+0x26>
    4226:	6824      	ldr	r4, [r4, #0]
    4228:	e7f2      	b.n	4210 <_fwalk_reent+0xc>
    422a:	89ab      	ldrh	r3, [r5, #12]
    422c:	2b01      	cmp	r3, #1
    422e:	d908      	bls.n	4242 <_fwalk_reent+0x3e>
    4230:	220e      	movs	r2, #14
    4232:	5eab      	ldrsh	r3, [r5, r2]
    4234:	3301      	adds	r3, #1
    4236:	d004      	beq.n	4242 <_fwalk_reent+0x3e>
    4238:	0029      	movs	r1, r5
    423a:	0038      	movs	r0, r7
    423c:	9b01      	ldr	r3, [sp, #4]
    423e:	4798      	blx	r3
    4240:	4306      	orrs	r6, r0
    4242:	3568      	adds	r5, #104	; 0x68
    4244:	e7eb      	b.n	421e <_fwalk_reent+0x1a>
	...

00004248 <__swhatbuf_r>:
    4248:	b570      	push	{r4, r5, r6, lr}
    424a:	000e      	movs	r6, r1
    424c:	001d      	movs	r5, r3
    424e:	230e      	movs	r3, #14
    4250:	5ec9      	ldrsh	r1, [r1, r3]
    4252:	b090      	sub	sp, #64	; 0x40
    4254:	0014      	movs	r4, r2
    4256:	2900      	cmp	r1, #0
    4258:	da07      	bge.n	426a <__swhatbuf_r+0x22>
    425a:	2300      	movs	r3, #0
    425c:	602b      	str	r3, [r5, #0]
    425e:	89b3      	ldrh	r3, [r6, #12]
    4260:	061b      	lsls	r3, r3, #24
    4262:	d411      	bmi.n	4288 <__swhatbuf_r+0x40>
    4264:	2380      	movs	r3, #128	; 0x80
    4266:	00db      	lsls	r3, r3, #3
    4268:	e00f      	b.n	428a <__swhatbuf_r+0x42>
    426a:	aa01      	add	r2, sp, #4
    426c:	f000 fc9a 	bl	4ba4 <_fstat_r>
    4270:	2800      	cmp	r0, #0
    4272:	dbf2      	blt.n	425a <__swhatbuf_r+0x12>
    4274:	22f0      	movs	r2, #240	; 0xf0
    4276:	9b02      	ldr	r3, [sp, #8]
    4278:	0212      	lsls	r2, r2, #8
    427a:	4013      	ands	r3, r2
    427c:	4a05      	ldr	r2, [pc, #20]	; (4294 <__swhatbuf_r+0x4c>)
    427e:	189b      	adds	r3, r3, r2
    4280:	425a      	negs	r2, r3
    4282:	4153      	adcs	r3, r2
    4284:	602b      	str	r3, [r5, #0]
    4286:	e7ed      	b.n	4264 <__swhatbuf_r+0x1c>
    4288:	2340      	movs	r3, #64	; 0x40
    428a:	2000      	movs	r0, #0
    428c:	6023      	str	r3, [r4, #0]
    428e:	b010      	add	sp, #64	; 0x40
    4290:	bd70      	pop	{r4, r5, r6, pc}
    4292:	46c0      	nop			; (mov r8, r8)
    4294:	ffffe000 	.word	0xffffe000

00004298 <__smakebuf_r>:
    4298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    429a:	2602      	movs	r6, #2
    429c:	898b      	ldrh	r3, [r1, #12]
    429e:	0005      	movs	r5, r0
    42a0:	000c      	movs	r4, r1
    42a2:	4233      	tst	r3, r6
    42a4:	d006      	beq.n	42b4 <__smakebuf_r+0x1c>
    42a6:	0023      	movs	r3, r4
    42a8:	3347      	adds	r3, #71	; 0x47
    42aa:	6023      	str	r3, [r4, #0]
    42ac:	6123      	str	r3, [r4, #16]
    42ae:	2301      	movs	r3, #1
    42b0:	6163      	str	r3, [r4, #20]
    42b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    42b4:	ab01      	add	r3, sp, #4
    42b6:	466a      	mov	r2, sp
    42b8:	f7ff ffc6 	bl	4248 <__swhatbuf_r>
    42bc:	9900      	ldr	r1, [sp, #0]
    42be:	0007      	movs	r7, r0
    42c0:	0028      	movs	r0, r5
    42c2:	f7ff fc6d 	bl	3ba0 <_malloc_r>
    42c6:	2800      	cmp	r0, #0
    42c8:	d108      	bne.n	42dc <__smakebuf_r+0x44>
    42ca:	220c      	movs	r2, #12
    42cc:	5ea3      	ldrsh	r3, [r4, r2]
    42ce:	059a      	lsls	r2, r3, #22
    42d0:	d4ef      	bmi.n	42b2 <__smakebuf_r+0x1a>
    42d2:	2203      	movs	r2, #3
    42d4:	4393      	bics	r3, r2
    42d6:	431e      	orrs	r6, r3
    42d8:	81a6      	strh	r6, [r4, #12]
    42da:	e7e4      	b.n	42a6 <__smakebuf_r+0xe>
    42dc:	4b0f      	ldr	r3, [pc, #60]	; (431c <__smakebuf_r+0x84>)
    42de:	62ab      	str	r3, [r5, #40]	; 0x28
    42e0:	2380      	movs	r3, #128	; 0x80
    42e2:	89a2      	ldrh	r2, [r4, #12]
    42e4:	6020      	str	r0, [r4, #0]
    42e6:	4313      	orrs	r3, r2
    42e8:	81a3      	strh	r3, [r4, #12]
    42ea:	9b00      	ldr	r3, [sp, #0]
    42ec:	6120      	str	r0, [r4, #16]
    42ee:	6163      	str	r3, [r4, #20]
    42f0:	9b01      	ldr	r3, [sp, #4]
    42f2:	2b00      	cmp	r3, #0
    42f4:	d00d      	beq.n	4312 <__smakebuf_r+0x7a>
    42f6:	230e      	movs	r3, #14
    42f8:	5ee1      	ldrsh	r1, [r4, r3]
    42fa:	0028      	movs	r0, r5
    42fc:	f000 fc64 	bl	4bc8 <_isatty_r>
    4300:	2800      	cmp	r0, #0
    4302:	d006      	beq.n	4312 <__smakebuf_r+0x7a>
    4304:	2203      	movs	r2, #3
    4306:	89a3      	ldrh	r3, [r4, #12]
    4308:	4393      	bics	r3, r2
    430a:	001a      	movs	r2, r3
    430c:	2301      	movs	r3, #1
    430e:	4313      	orrs	r3, r2
    4310:	81a3      	strh	r3, [r4, #12]
    4312:	89a0      	ldrh	r0, [r4, #12]
    4314:	4338      	orrs	r0, r7
    4316:	81a0      	strh	r0, [r4, #12]
    4318:	e7cb      	b.n	42b2 <__smakebuf_r+0x1a>
    431a:	46c0      	nop			; (mov r8, r8)
    431c:	00004099 	.word	0x00004099

00004320 <__malloc_lock>:
    4320:	4770      	bx	lr

00004322 <__malloc_unlock>:
    4322:	4770      	bx	lr

00004324 <__sfputc_r>:
    4324:	6893      	ldr	r3, [r2, #8]
    4326:	b510      	push	{r4, lr}
    4328:	3b01      	subs	r3, #1
    432a:	6093      	str	r3, [r2, #8]
    432c:	2b00      	cmp	r3, #0
    432e:	da05      	bge.n	433c <__sfputc_r+0x18>
    4330:	6994      	ldr	r4, [r2, #24]
    4332:	42a3      	cmp	r3, r4
    4334:	db08      	blt.n	4348 <__sfputc_r+0x24>
    4336:	b2cb      	uxtb	r3, r1
    4338:	2b0a      	cmp	r3, #10
    433a:	d005      	beq.n	4348 <__sfputc_r+0x24>
    433c:	6813      	ldr	r3, [r2, #0]
    433e:	1c58      	adds	r0, r3, #1
    4340:	6010      	str	r0, [r2, #0]
    4342:	7019      	strb	r1, [r3, #0]
    4344:	b2c8      	uxtb	r0, r1
    4346:	bd10      	pop	{r4, pc}
    4348:	f000 fb3a 	bl	49c0 <__swbuf_r>
    434c:	e7fb      	b.n	4346 <__sfputc_r+0x22>

0000434e <__sfputs_r>:
    434e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4350:	0006      	movs	r6, r0
    4352:	000f      	movs	r7, r1
    4354:	0014      	movs	r4, r2
    4356:	18d5      	adds	r5, r2, r3
    4358:	42ac      	cmp	r4, r5
    435a:	d101      	bne.n	4360 <__sfputs_r+0x12>
    435c:	2000      	movs	r0, #0
    435e:	e007      	b.n	4370 <__sfputs_r+0x22>
    4360:	7821      	ldrb	r1, [r4, #0]
    4362:	003a      	movs	r2, r7
    4364:	0030      	movs	r0, r6
    4366:	f7ff ffdd 	bl	4324 <__sfputc_r>
    436a:	3401      	adds	r4, #1
    436c:	1c43      	adds	r3, r0, #1
    436e:	d1f3      	bne.n	4358 <__sfputs_r+0xa>
    4370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004374 <_vfiprintf_r>:
    4374:	b5f0      	push	{r4, r5, r6, r7, lr}
    4376:	b09f      	sub	sp, #124	; 0x7c
    4378:	0006      	movs	r6, r0
    437a:	000f      	movs	r7, r1
    437c:	0014      	movs	r4, r2
    437e:	9305      	str	r3, [sp, #20]
    4380:	2800      	cmp	r0, #0
    4382:	d004      	beq.n	438e <_vfiprintf_r+0x1a>
    4384:	6983      	ldr	r3, [r0, #24]
    4386:	2b00      	cmp	r3, #0
    4388:	d101      	bne.n	438e <_vfiprintf_r+0x1a>
    438a:	f7ff fec7 	bl	411c <__sinit>
    438e:	4b7f      	ldr	r3, [pc, #508]	; (458c <_vfiprintf_r+0x218>)
    4390:	429f      	cmp	r7, r3
    4392:	d15c      	bne.n	444e <_vfiprintf_r+0xda>
    4394:	6877      	ldr	r7, [r6, #4]
    4396:	89bb      	ldrh	r3, [r7, #12]
    4398:	071b      	lsls	r3, r3, #28
    439a:	d562      	bpl.n	4462 <_vfiprintf_r+0xee>
    439c:	693b      	ldr	r3, [r7, #16]
    439e:	2b00      	cmp	r3, #0
    43a0:	d05f      	beq.n	4462 <_vfiprintf_r+0xee>
    43a2:	2300      	movs	r3, #0
    43a4:	ad06      	add	r5, sp, #24
    43a6:	616b      	str	r3, [r5, #20]
    43a8:	3320      	adds	r3, #32
    43aa:	766b      	strb	r3, [r5, #25]
    43ac:	3310      	adds	r3, #16
    43ae:	76ab      	strb	r3, [r5, #26]
    43b0:	9402      	str	r4, [sp, #8]
    43b2:	9c02      	ldr	r4, [sp, #8]
    43b4:	7823      	ldrb	r3, [r4, #0]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d15d      	bne.n	4476 <_vfiprintf_r+0x102>
    43ba:	9b02      	ldr	r3, [sp, #8]
    43bc:	1ae3      	subs	r3, r4, r3
    43be:	9304      	str	r3, [sp, #16]
    43c0:	d00d      	beq.n	43de <_vfiprintf_r+0x6a>
    43c2:	9b04      	ldr	r3, [sp, #16]
    43c4:	9a02      	ldr	r2, [sp, #8]
    43c6:	0039      	movs	r1, r7
    43c8:	0030      	movs	r0, r6
    43ca:	f7ff ffc0 	bl	434e <__sfputs_r>
    43ce:	1c43      	adds	r3, r0, #1
    43d0:	d100      	bne.n	43d4 <_vfiprintf_r+0x60>
    43d2:	e0cc      	b.n	456e <_vfiprintf_r+0x1fa>
    43d4:	696a      	ldr	r2, [r5, #20]
    43d6:	9b04      	ldr	r3, [sp, #16]
    43d8:	4694      	mov	ip, r2
    43da:	4463      	add	r3, ip
    43dc:	616b      	str	r3, [r5, #20]
    43de:	7823      	ldrb	r3, [r4, #0]
    43e0:	2b00      	cmp	r3, #0
    43e2:	d100      	bne.n	43e6 <_vfiprintf_r+0x72>
    43e4:	e0c3      	b.n	456e <_vfiprintf_r+0x1fa>
    43e6:	2201      	movs	r2, #1
    43e8:	2300      	movs	r3, #0
    43ea:	4252      	negs	r2, r2
    43ec:	606a      	str	r2, [r5, #4]
    43ee:	a902      	add	r1, sp, #8
    43f0:	3254      	adds	r2, #84	; 0x54
    43f2:	1852      	adds	r2, r2, r1
    43f4:	3401      	adds	r4, #1
    43f6:	602b      	str	r3, [r5, #0]
    43f8:	60eb      	str	r3, [r5, #12]
    43fa:	60ab      	str	r3, [r5, #8]
    43fc:	7013      	strb	r3, [r2, #0]
    43fe:	65ab      	str	r3, [r5, #88]	; 0x58
    4400:	7821      	ldrb	r1, [r4, #0]
    4402:	2205      	movs	r2, #5
    4404:	4862      	ldr	r0, [pc, #392]	; (4590 <_vfiprintf_r+0x21c>)
    4406:	f000 fc05 	bl	4c14 <memchr>
    440a:	1c63      	adds	r3, r4, #1
    440c:	469c      	mov	ip, r3
    440e:	2800      	cmp	r0, #0
    4410:	d135      	bne.n	447e <_vfiprintf_r+0x10a>
    4412:	6829      	ldr	r1, [r5, #0]
    4414:	06cb      	lsls	r3, r1, #27
    4416:	d504      	bpl.n	4422 <_vfiprintf_r+0xae>
    4418:	2353      	movs	r3, #83	; 0x53
    441a:	aa02      	add	r2, sp, #8
    441c:	3020      	adds	r0, #32
    441e:	189b      	adds	r3, r3, r2
    4420:	7018      	strb	r0, [r3, #0]
    4422:	070b      	lsls	r3, r1, #28
    4424:	d504      	bpl.n	4430 <_vfiprintf_r+0xbc>
    4426:	2353      	movs	r3, #83	; 0x53
    4428:	202b      	movs	r0, #43	; 0x2b
    442a:	aa02      	add	r2, sp, #8
    442c:	189b      	adds	r3, r3, r2
    442e:	7018      	strb	r0, [r3, #0]
    4430:	7823      	ldrb	r3, [r4, #0]
    4432:	2b2a      	cmp	r3, #42	; 0x2a
    4434:	d02c      	beq.n	4490 <_vfiprintf_r+0x11c>
    4436:	2000      	movs	r0, #0
    4438:	210a      	movs	r1, #10
    443a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    443c:	7822      	ldrb	r2, [r4, #0]
    443e:	3a30      	subs	r2, #48	; 0x30
    4440:	2a09      	cmp	r2, #9
    4442:	d800      	bhi.n	4446 <_vfiprintf_r+0xd2>
    4444:	e06b      	b.n	451e <_vfiprintf_r+0x1aa>
    4446:	2800      	cmp	r0, #0
    4448:	d02a      	beq.n	44a0 <_vfiprintf_r+0x12c>
    444a:	9309      	str	r3, [sp, #36]	; 0x24
    444c:	e028      	b.n	44a0 <_vfiprintf_r+0x12c>
    444e:	4b51      	ldr	r3, [pc, #324]	; (4594 <_vfiprintf_r+0x220>)
    4450:	429f      	cmp	r7, r3
    4452:	d101      	bne.n	4458 <_vfiprintf_r+0xe4>
    4454:	68b7      	ldr	r7, [r6, #8]
    4456:	e79e      	b.n	4396 <_vfiprintf_r+0x22>
    4458:	4b4f      	ldr	r3, [pc, #316]	; (4598 <_vfiprintf_r+0x224>)
    445a:	429f      	cmp	r7, r3
    445c:	d19b      	bne.n	4396 <_vfiprintf_r+0x22>
    445e:	68f7      	ldr	r7, [r6, #12]
    4460:	e799      	b.n	4396 <_vfiprintf_r+0x22>
    4462:	0039      	movs	r1, r7
    4464:	0030      	movs	r0, r6
    4466:	f000 fb15 	bl	4a94 <__swsetup_r>
    446a:	2800      	cmp	r0, #0
    446c:	d099      	beq.n	43a2 <_vfiprintf_r+0x2e>
    446e:	2001      	movs	r0, #1
    4470:	4240      	negs	r0, r0
    4472:	b01f      	add	sp, #124	; 0x7c
    4474:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4476:	2b25      	cmp	r3, #37	; 0x25
    4478:	d09f      	beq.n	43ba <_vfiprintf_r+0x46>
    447a:	3401      	adds	r4, #1
    447c:	e79a      	b.n	43b4 <_vfiprintf_r+0x40>
    447e:	4b44      	ldr	r3, [pc, #272]	; (4590 <_vfiprintf_r+0x21c>)
    4480:	6829      	ldr	r1, [r5, #0]
    4482:	1ac0      	subs	r0, r0, r3
    4484:	2301      	movs	r3, #1
    4486:	4083      	lsls	r3, r0
    4488:	430b      	orrs	r3, r1
    448a:	602b      	str	r3, [r5, #0]
    448c:	4664      	mov	r4, ip
    448e:	e7b7      	b.n	4400 <_vfiprintf_r+0x8c>
    4490:	9b05      	ldr	r3, [sp, #20]
    4492:	1d18      	adds	r0, r3, #4
    4494:	681b      	ldr	r3, [r3, #0]
    4496:	9005      	str	r0, [sp, #20]
    4498:	2b00      	cmp	r3, #0
    449a:	db3a      	blt.n	4512 <_vfiprintf_r+0x19e>
    449c:	9309      	str	r3, [sp, #36]	; 0x24
    449e:	4664      	mov	r4, ip
    44a0:	7823      	ldrb	r3, [r4, #0]
    44a2:	2b2e      	cmp	r3, #46	; 0x2e
    44a4:	d10b      	bne.n	44be <_vfiprintf_r+0x14a>
    44a6:	7863      	ldrb	r3, [r4, #1]
    44a8:	1c62      	adds	r2, r4, #1
    44aa:	2b2a      	cmp	r3, #42	; 0x2a
    44ac:	d13f      	bne.n	452e <_vfiprintf_r+0x1ba>
    44ae:	9b05      	ldr	r3, [sp, #20]
    44b0:	3402      	adds	r4, #2
    44b2:	1d1a      	adds	r2, r3, #4
    44b4:	681b      	ldr	r3, [r3, #0]
    44b6:	9205      	str	r2, [sp, #20]
    44b8:	2b00      	cmp	r3, #0
    44ba:	db35      	blt.n	4528 <_vfiprintf_r+0x1b4>
    44bc:	9307      	str	r3, [sp, #28]
    44be:	7821      	ldrb	r1, [r4, #0]
    44c0:	2203      	movs	r2, #3
    44c2:	4836      	ldr	r0, [pc, #216]	; (459c <_vfiprintf_r+0x228>)
    44c4:	f000 fba6 	bl	4c14 <memchr>
    44c8:	2800      	cmp	r0, #0
    44ca:	d007      	beq.n	44dc <_vfiprintf_r+0x168>
    44cc:	4b33      	ldr	r3, [pc, #204]	; (459c <_vfiprintf_r+0x228>)
    44ce:	682a      	ldr	r2, [r5, #0]
    44d0:	1ac0      	subs	r0, r0, r3
    44d2:	2340      	movs	r3, #64	; 0x40
    44d4:	4083      	lsls	r3, r0
    44d6:	4313      	orrs	r3, r2
    44d8:	602b      	str	r3, [r5, #0]
    44da:	3401      	adds	r4, #1
    44dc:	7821      	ldrb	r1, [r4, #0]
    44de:	1c63      	adds	r3, r4, #1
    44e0:	2206      	movs	r2, #6
    44e2:	482f      	ldr	r0, [pc, #188]	; (45a0 <_vfiprintf_r+0x22c>)
    44e4:	9302      	str	r3, [sp, #8]
    44e6:	7629      	strb	r1, [r5, #24]
    44e8:	f000 fb94 	bl	4c14 <memchr>
    44ec:	2800      	cmp	r0, #0
    44ee:	d044      	beq.n	457a <_vfiprintf_r+0x206>
    44f0:	4b2c      	ldr	r3, [pc, #176]	; (45a4 <_vfiprintf_r+0x230>)
    44f2:	2b00      	cmp	r3, #0
    44f4:	d12f      	bne.n	4556 <_vfiprintf_r+0x1e2>
    44f6:	6829      	ldr	r1, [r5, #0]
    44f8:	9b05      	ldr	r3, [sp, #20]
    44fa:	2207      	movs	r2, #7
    44fc:	05c9      	lsls	r1, r1, #23
    44fe:	d528      	bpl.n	4552 <_vfiprintf_r+0x1de>
    4500:	189b      	adds	r3, r3, r2
    4502:	4393      	bics	r3, r2
    4504:	3308      	adds	r3, #8
    4506:	9305      	str	r3, [sp, #20]
    4508:	696b      	ldr	r3, [r5, #20]
    450a:	9a03      	ldr	r2, [sp, #12]
    450c:	189b      	adds	r3, r3, r2
    450e:	616b      	str	r3, [r5, #20]
    4510:	e74f      	b.n	43b2 <_vfiprintf_r+0x3e>
    4512:	425b      	negs	r3, r3
    4514:	60eb      	str	r3, [r5, #12]
    4516:	2302      	movs	r3, #2
    4518:	430b      	orrs	r3, r1
    451a:	602b      	str	r3, [r5, #0]
    451c:	e7bf      	b.n	449e <_vfiprintf_r+0x12a>
    451e:	434b      	muls	r3, r1
    4520:	3401      	adds	r4, #1
    4522:	189b      	adds	r3, r3, r2
    4524:	2001      	movs	r0, #1
    4526:	e789      	b.n	443c <_vfiprintf_r+0xc8>
    4528:	2301      	movs	r3, #1
    452a:	425b      	negs	r3, r3
    452c:	e7c6      	b.n	44bc <_vfiprintf_r+0x148>
    452e:	2300      	movs	r3, #0
    4530:	0014      	movs	r4, r2
    4532:	200a      	movs	r0, #10
    4534:	001a      	movs	r2, r3
    4536:	606b      	str	r3, [r5, #4]
    4538:	7821      	ldrb	r1, [r4, #0]
    453a:	3930      	subs	r1, #48	; 0x30
    453c:	2909      	cmp	r1, #9
    453e:	d903      	bls.n	4548 <_vfiprintf_r+0x1d4>
    4540:	2b00      	cmp	r3, #0
    4542:	d0bc      	beq.n	44be <_vfiprintf_r+0x14a>
    4544:	9207      	str	r2, [sp, #28]
    4546:	e7ba      	b.n	44be <_vfiprintf_r+0x14a>
    4548:	4342      	muls	r2, r0
    454a:	3401      	adds	r4, #1
    454c:	1852      	adds	r2, r2, r1
    454e:	2301      	movs	r3, #1
    4550:	e7f2      	b.n	4538 <_vfiprintf_r+0x1c4>
    4552:	3307      	adds	r3, #7
    4554:	e7d5      	b.n	4502 <_vfiprintf_r+0x18e>
    4556:	ab05      	add	r3, sp, #20
    4558:	9300      	str	r3, [sp, #0]
    455a:	003a      	movs	r2, r7
    455c:	4b12      	ldr	r3, [pc, #72]	; (45a8 <_vfiprintf_r+0x234>)
    455e:	0029      	movs	r1, r5
    4560:	0030      	movs	r0, r6
    4562:	e000      	b.n	4566 <_vfiprintf_r+0x1f2>
    4564:	bf00      	nop
    4566:	9003      	str	r0, [sp, #12]
    4568:	9b03      	ldr	r3, [sp, #12]
    456a:	3301      	adds	r3, #1
    456c:	d1cc      	bne.n	4508 <_vfiprintf_r+0x194>
    456e:	89bb      	ldrh	r3, [r7, #12]
    4570:	065b      	lsls	r3, r3, #25
    4572:	d500      	bpl.n	4576 <_vfiprintf_r+0x202>
    4574:	e77b      	b.n	446e <_vfiprintf_r+0xfa>
    4576:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4578:	e77b      	b.n	4472 <_vfiprintf_r+0xfe>
    457a:	ab05      	add	r3, sp, #20
    457c:	9300      	str	r3, [sp, #0]
    457e:	003a      	movs	r2, r7
    4580:	4b09      	ldr	r3, [pc, #36]	; (45a8 <_vfiprintf_r+0x234>)
    4582:	0029      	movs	r1, r5
    4584:	0030      	movs	r0, r6
    4586:	f000 f87f 	bl	4688 <_printf_i>
    458a:	e7ec      	b.n	4566 <_vfiprintf_r+0x1f2>
    458c:	00006fac 	.word	0x00006fac
    4590:	00006fec 	.word	0x00006fec
    4594:	00006fcc 	.word	0x00006fcc
    4598:	00006f8c 	.word	0x00006f8c
    459c:	00006ff2 	.word	0x00006ff2
    45a0:	00006ff6 	.word	0x00006ff6
    45a4:	00000000 	.word	0x00000000
    45a8:	0000434f 	.word	0x0000434f

000045ac <_printf_common>:
    45ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45ae:	0015      	movs	r5, r2
    45b0:	9301      	str	r3, [sp, #4]
    45b2:	688a      	ldr	r2, [r1, #8]
    45b4:	690b      	ldr	r3, [r1, #16]
    45b6:	9000      	str	r0, [sp, #0]
    45b8:	000c      	movs	r4, r1
    45ba:	4293      	cmp	r3, r2
    45bc:	da00      	bge.n	45c0 <_printf_common+0x14>
    45be:	0013      	movs	r3, r2
    45c0:	0022      	movs	r2, r4
    45c2:	602b      	str	r3, [r5, #0]
    45c4:	3243      	adds	r2, #67	; 0x43
    45c6:	7812      	ldrb	r2, [r2, #0]
    45c8:	2a00      	cmp	r2, #0
    45ca:	d001      	beq.n	45d0 <_printf_common+0x24>
    45cc:	3301      	adds	r3, #1
    45ce:	602b      	str	r3, [r5, #0]
    45d0:	6823      	ldr	r3, [r4, #0]
    45d2:	069b      	lsls	r3, r3, #26
    45d4:	d502      	bpl.n	45dc <_printf_common+0x30>
    45d6:	682b      	ldr	r3, [r5, #0]
    45d8:	3302      	adds	r3, #2
    45da:	602b      	str	r3, [r5, #0]
    45dc:	2706      	movs	r7, #6
    45de:	6823      	ldr	r3, [r4, #0]
    45e0:	401f      	ands	r7, r3
    45e2:	d027      	beq.n	4634 <_printf_common+0x88>
    45e4:	0023      	movs	r3, r4
    45e6:	3343      	adds	r3, #67	; 0x43
    45e8:	781b      	ldrb	r3, [r3, #0]
    45ea:	1e5a      	subs	r2, r3, #1
    45ec:	4193      	sbcs	r3, r2
    45ee:	6822      	ldr	r2, [r4, #0]
    45f0:	0692      	lsls	r2, r2, #26
    45f2:	d430      	bmi.n	4656 <_printf_common+0xaa>
    45f4:	0022      	movs	r2, r4
    45f6:	9901      	ldr	r1, [sp, #4]
    45f8:	3243      	adds	r2, #67	; 0x43
    45fa:	9800      	ldr	r0, [sp, #0]
    45fc:	9e08      	ldr	r6, [sp, #32]
    45fe:	47b0      	blx	r6
    4600:	1c43      	adds	r3, r0, #1
    4602:	d025      	beq.n	4650 <_printf_common+0xa4>
    4604:	2306      	movs	r3, #6
    4606:	6820      	ldr	r0, [r4, #0]
    4608:	682a      	ldr	r2, [r5, #0]
    460a:	68e1      	ldr	r1, [r4, #12]
    460c:	4003      	ands	r3, r0
    460e:	2500      	movs	r5, #0
    4610:	2b04      	cmp	r3, #4
    4612:	d103      	bne.n	461c <_printf_common+0x70>
    4614:	1a8d      	subs	r5, r1, r2
    4616:	43eb      	mvns	r3, r5
    4618:	17db      	asrs	r3, r3, #31
    461a:	401d      	ands	r5, r3
    461c:	68a3      	ldr	r3, [r4, #8]
    461e:	6922      	ldr	r2, [r4, #16]
    4620:	4293      	cmp	r3, r2
    4622:	dd01      	ble.n	4628 <_printf_common+0x7c>
    4624:	1a9b      	subs	r3, r3, r2
    4626:	18ed      	adds	r5, r5, r3
    4628:	2700      	movs	r7, #0
    462a:	42bd      	cmp	r5, r7
    462c:	d120      	bne.n	4670 <_printf_common+0xc4>
    462e:	2000      	movs	r0, #0
    4630:	e010      	b.n	4654 <_printf_common+0xa8>
    4632:	3701      	adds	r7, #1
    4634:	68e3      	ldr	r3, [r4, #12]
    4636:	682a      	ldr	r2, [r5, #0]
    4638:	1a9b      	subs	r3, r3, r2
    463a:	429f      	cmp	r7, r3
    463c:	dad2      	bge.n	45e4 <_printf_common+0x38>
    463e:	0022      	movs	r2, r4
    4640:	2301      	movs	r3, #1
    4642:	3219      	adds	r2, #25
    4644:	9901      	ldr	r1, [sp, #4]
    4646:	9800      	ldr	r0, [sp, #0]
    4648:	9e08      	ldr	r6, [sp, #32]
    464a:	47b0      	blx	r6
    464c:	1c43      	adds	r3, r0, #1
    464e:	d1f0      	bne.n	4632 <_printf_common+0x86>
    4650:	2001      	movs	r0, #1
    4652:	4240      	negs	r0, r0
    4654:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4656:	2030      	movs	r0, #48	; 0x30
    4658:	18e1      	adds	r1, r4, r3
    465a:	3143      	adds	r1, #67	; 0x43
    465c:	7008      	strb	r0, [r1, #0]
    465e:	0021      	movs	r1, r4
    4660:	1c5a      	adds	r2, r3, #1
    4662:	3145      	adds	r1, #69	; 0x45
    4664:	7809      	ldrb	r1, [r1, #0]
    4666:	18a2      	adds	r2, r4, r2
    4668:	3243      	adds	r2, #67	; 0x43
    466a:	3302      	adds	r3, #2
    466c:	7011      	strb	r1, [r2, #0]
    466e:	e7c1      	b.n	45f4 <_printf_common+0x48>
    4670:	0022      	movs	r2, r4
    4672:	2301      	movs	r3, #1
    4674:	321a      	adds	r2, #26
    4676:	9901      	ldr	r1, [sp, #4]
    4678:	9800      	ldr	r0, [sp, #0]
    467a:	9e08      	ldr	r6, [sp, #32]
    467c:	47b0      	blx	r6
    467e:	1c43      	adds	r3, r0, #1
    4680:	d0e6      	beq.n	4650 <_printf_common+0xa4>
    4682:	3701      	adds	r7, #1
    4684:	e7d1      	b.n	462a <_printf_common+0x7e>
	...

00004688 <_printf_i>:
    4688:	b5f0      	push	{r4, r5, r6, r7, lr}
    468a:	b08b      	sub	sp, #44	; 0x2c
    468c:	9206      	str	r2, [sp, #24]
    468e:	000a      	movs	r2, r1
    4690:	3243      	adds	r2, #67	; 0x43
    4692:	9307      	str	r3, [sp, #28]
    4694:	9005      	str	r0, [sp, #20]
    4696:	9204      	str	r2, [sp, #16]
    4698:	7e0a      	ldrb	r2, [r1, #24]
    469a:	000c      	movs	r4, r1
    469c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    469e:	2a6e      	cmp	r2, #110	; 0x6e
    46a0:	d100      	bne.n	46a4 <_printf_i+0x1c>
    46a2:	e08f      	b.n	47c4 <_printf_i+0x13c>
    46a4:	d817      	bhi.n	46d6 <_printf_i+0x4e>
    46a6:	2a63      	cmp	r2, #99	; 0x63
    46a8:	d02c      	beq.n	4704 <_printf_i+0x7c>
    46aa:	d808      	bhi.n	46be <_printf_i+0x36>
    46ac:	2a00      	cmp	r2, #0
    46ae:	d100      	bne.n	46b2 <_printf_i+0x2a>
    46b0:	e099      	b.n	47e6 <_printf_i+0x15e>
    46b2:	2a58      	cmp	r2, #88	; 0x58
    46b4:	d054      	beq.n	4760 <_printf_i+0xd8>
    46b6:	0026      	movs	r6, r4
    46b8:	3642      	adds	r6, #66	; 0x42
    46ba:	7032      	strb	r2, [r6, #0]
    46bc:	e029      	b.n	4712 <_printf_i+0x8a>
    46be:	2a64      	cmp	r2, #100	; 0x64
    46c0:	d001      	beq.n	46c6 <_printf_i+0x3e>
    46c2:	2a69      	cmp	r2, #105	; 0x69
    46c4:	d1f7      	bne.n	46b6 <_printf_i+0x2e>
    46c6:	6821      	ldr	r1, [r4, #0]
    46c8:	681a      	ldr	r2, [r3, #0]
    46ca:	0608      	lsls	r0, r1, #24
    46cc:	d523      	bpl.n	4716 <_printf_i+0x8e>
    46ce:	1d11      	adds	r1, r2, #4
    46d0:	6019      	str	r1, [r3, #0]
    46d2:	6815      	ldr	r5, [r2, #0]
    46d4:	e025      	b.n	4722 <_printf_i+0x9a>
    46d6:	2a73      	cmp	r2, #115	; 0x73
    46d8:	d100      	bne.n	46dc <_printf_i+0x54>
    46da:	e088      	b.n	47ee <_printf_i+0x166>
    46dc:	d808      	bhi.n	46f0 <_printf_i+0x68>
    46de:	2a6f      	cmp	r2, #111	; 0x6f
    46e0:	d029      	beq.n	4736 <_printf_i+0xae>
    46e2:	2a70      	cmp	r2, #112	; 0x70
    46e4:	d1e7      	bne.n	46b6 <_printf_i+0x2e>
    46e6:	2220      	movs	r2, #32
    46e8:	6809      	ldr	r1, [r1, #0]
    46ea:	430a      	orrs	r2, r1
    46ec:	6022      	str	r2, [r4, #0]
    46ee:	e003      	b.n	46f8 <_printf_i+0x70>
    46f0:	2a75      	cmp	r2, #117	; 0x75
    46f2:	d020      	beq.n	4736 <_printf_i+0xae>
    46f4:	2a78      	cmp	r2, #120	; 0x78
    46f6:	d1de      	bne.n	46b6 <_printf_i+0x2e>
    46f8:	0022      	movs	r2, r4
    46fa:	2178      	movs	r1, #120	; 0x78
    46fc:	3245      	adds	r2, #69	; 0x45
    46fe:	7011      	strb	r1, [r2, #0]
    4700:	4a6c      	ldr	r2, [pc, #432]	; (48b4 <_printf_i+0x22c>)
    4702:	e030      	b.n	4766 <_printf_i+0xde>
    4704:	000e      	movs	r6, r1
    4706:	681a      	ldr	r2, [r3, #0]
    4708:	3642      	adds	r6, #66	; 0x42
    470a:	1d11      	adds	r1, r2, #4
    470c:	6019      	str	r1, [r3, #0]
    470e:	6813      	ldr	r3, [r2, #0]
    4710:	7033      	strb	r3, [r6, #0]
    4712:	2301      	movs	r3, #1
    4714:	e079      	b.n	480a <_printf_i+0x182>
    4716:	0649      	lsls	r1, r1, #25
    4718:	d5d9      	bpl.n	46ce <_printf_i+0x46>
    471a:	1d11      	adds	r1, r2, #4
    471c:	6019      	str	r1, [r3, #0]
    471e:	2300      	movs	r3, #0
    4720:	5ed5      	ldrsh	r5, [r2, r3]
    4722:	2d00      	cmp	r5, #0
    4724:	da03      	bge.n	472e <_printf_i+0xa6>
    4726:	232d      	movs	r3, #45	; 0x2d
    4728:	9a04      	ldr	r2, [sp, #16]
    472a:	426d      	negs	r5, r5
    472c:	7013      	strb	r3, [r2, #0]
    472e:	4b62      	ldr	r3, [pc, #392]	; (48b8 <_printf_i+0x230>)
    4730:	270a      	movs	r7, #10
    4732:	9303      	str	r3, [sp, #12]
    4734:	e02f      	b.n	4796 <_printf_i+0x10e>
    4736:	6820      	ldr	r0, [r4, #0]
    4738:	6819      	ldr	r1, [r3, #0]
    473a:	0605      	lsls	r5, r0, #24
    473c:	d503      	bpl.n	4746 <_printf_i+0xbe>
    473e:	1d08      	adds	r0, r1, #4
    4740:	6018      	str	r0, [r3, #0]
    4742:	680d      	ldr	r5, [r1, #0]
    4744:	e005      	b.n	4752 <_printf_i+0xca>
    4746:	0640      	lsls	r0, r0, #25
    4748:	d5f9      	bpl.n	473e <_printf_i+0xb6>
    474a:	680d      	ldr	r5, [r1, #0]
    474c:	1d08      	adds	r0, r1, #4
    474e:	6018      	str	r0, [r3, #0]
    4750:	b2ad      	uxth	r5, r5
    4752:	4b59      	ldr	r3, [pc, #356]	; (48b8 <_printf_i+0x230>)
    4754:	2708      	movs	r7, #8
    4756:	9303      	str	r3, [sp, #12]
    4758:	2a6f      	cmp	r2, #111	; 0x6f
    475a:	d018      	beq.n	478e <_printf_i+0x106>
    475c:	270a      	movs	r7, #10
    475e:	e016      	b.n	478e <_printf_i+0x106>
    4760:	3145      	adds	r1, #69	; 0x45
    4762:	700a      	strb	r2, [r1, #0]
    4764:	4a54      	ldr	r2, [pc, #336]	; (48b8 <_printf_i+0x230>)
    4766:	9203      	str	r2, [sp, #12]
    4768:	681a      	ldr	r2, [r3, #0]
    476a:	6821      	ldr	r1, [r4, #0]
    476c:	1d10      	adds	r0, r2, #4
    476e:	6018      	str	r0, [r3, #0]
    4770:	6815      	ldr	r5, [r2, #0]
    4772:	0608      	lsls	r0, r1, #24
    4774:	d522      	bpl.n	47bc <_printf_i+0x134>
    4776:	07cb      	lsls	r3, r1, #31
    4778:	d502      	bpl.n	4780 <_printf_i+0xf8>
    477a:	2320      	movs	r3, #32
    477c:	4319      	orrs	r1, r3
    477e:	6021      	str	r1, [r4, #0]
    4780:	2710      	movs	r7, #16
    4782:	2d00      	cmp	r5, #0
    4784:	d103      	bne.n	478e <_printf_i+0x106>
    4786:	2320      	movs	r3, #32
    4788:	6822      	ldr	r2, [r4, #0]
    478a:	439a      	bics	r2, r3
    478c:	6022      	str	r2, [r4, #0]
    478e:	0023      	movs	r3, r4
    4790:	2200      	movs	r2, #0
    4792:	3343      	adds	r3, #67	; 0x43
    4794:	701a      	strb	r2, [r3, #0]
    4796:	6863      	ldr	r3, [r4, #4]
    4798:	60a3      	str	r3, [r4, #8]
    479a:	2b00      	cmp	r3, #0
    479c:	db5c      	blt.n	4858 <_printf_i+0x1d0>
    479e:	2204      	movs	r2, #4
    47a0:	6821      	ldr	r1, [r4, #0]
    47a2:	4391      	bics	r1, r2
    47a4:	6021      	str	r1, [r4, #0]
    47a6:	2d00      	cmp	r5, #0
    47a8:	d158      	bne.n	485c <_printf_i+0x1d4>
    47aa:	9e04      	ldr	r6, [sp, #16]
    47ac:	2b00      	cmp	r3, #0
    47ae:	d064      	beq.n	487a <_printf_i+0x1f2>
    47b0:	0026      	movs	r6, r4
    47b2:	9b03      	ldr	r3, [sp, #12]
    47b4:	3642      	adds	r6, #66	; 0x42
    47b6:	781b      	ldrb	r3, [r3, #0]
    47b8:	7033      	strb	r3, [r6, #0]
    47ba:	e05e      	b.n	487a <_printf_i+0x1f2>
    47bc:	0648      	lsls	r0, r1, #25
    47be:	d5da      	bpl.n	4776 <_printf_i+0xee>
    47c0:	b2ad      	uxth	r5, r5
    47c2:	e7d8      	b.n	4776 <_printf_i+0xee>
    47c4:	6809      	ldr	r1, [r1, #0]
    47c6:	681a      	ldr	r2, [r3, #0]
    47c8:	0608      	lsls	r0, r1, #24
    47ca:	d505      	bpl.n	47d8 <_printf_i+0x150>
    47cc:	1d11      	adds	r1, r2, #4
    47ce:	6019      	str	r1, [r3, #0]
    47d0:	6813      	ldr	r3, [r2, #0]
    47d2:	6962      	ldr	r2, [r4, #20]
    47d4:	601a      	str	r2, [r3, #0]
    47d6:	e006      	b.n	47e6 <_printf_i+0x15e>
    47d8:	0649      	lsls	r1, r1, #25
    47da:	d5f7      	bpl.n	47cc <_printf_i+0x144>
    47dc:	1d11      	adds	r1, r2, #4
    47de:	6019      	str	r1, [r3, #0]
    47e0:	6813      	ldr	r3, [r2, #0]
    47e2:	8aa2      	ldrh	r2, [r4, #20]
    47e4:	801a      	strh	r2, [r3, #0]
    47e6:	2300      	movs	r3, #0
    47e8:	9e04      	ldr	r6, [sp, #16]
    47ea:	6123      	str	r3, [r4, #16]
    47ec:	e054      	b.n	4898 <_printf_i+0x210>
    47ee:	681a      	ldr	r2, [r3, #0]
    47f0:	1d11      	adds	r1, r2, #4
    47f2:	6019      	str	r1, [r3, #0]
    47f4:	6816      	ldr	r6, [r2, #0]
    47f6:	2100      	movs	r1, #0
    47f8:	6862      	ldr	r2, [r4, #4]
    47fa:	0030      	movs	r0, r6
    47fc:	f000 fa0a 	bl	4c14 <memchr>
    4800:	2800      	cmp	r0, #0
    4802:	d001      	beq.n	4808 <_printf_i+0x180>
    4804:	1b80      	subs	r0, r0, r6
    4806:	6060      	str	r0, [r4, #4]
    4808:	6863      	ldr	r3, [r4, #4]
    480a:	6123      	str	r3, [r4, #16]
    480c:	2300      	movs	r3, #0
    480e:	9a04      	ldr	r2, [sp, #16]
    4810:	7013      	strb	r3, [r2, #0]
    4812:	e041      	b.n	4898 <_printf_i+0x210>
    4814:	6923      	ldr	r3, [r4, #16]
    4816:	0032      	movs	r2, r6
    4818:	9906      	ldr	r1, [sp, #24]
    481a:	9805      	ldr	r0, [sp, #20]
    481c:	9d07      	ldr	r5, [sp, #28]
    481e:	47a8      	blx	r5
    4820:	1c43      	adds	r3, r0, #1
    4822:	d043      	beq.n	48ac <_printf_i+0x224>
    4824:	6823      	ldr	r3, [r4, #0]
    4826:	2500      	movs	r5, #0
    4828:	079b      	lsls	r3, r3, #30
    482a:	d40f      	bmi.n	484c <_printf_i+0x1c4>
    482c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    482e:	68e0      	ldr	r0, [r4, #12]
    4830:	4298      	cmp	r0, r3
    4832:	da3d      	bge.n	48b0 <_printf_i+0x228>
    4834:	0018      	movs	r0, r3
    4836:	e03b      	b.n	48b0 <_printf_i+0x228>
    4838:	0022      	movs	r2, r4
    483a:	2301      	movs	r3, #1
    483c:	3219      	adds	r2, #25
    483e:	9906      	ldr	r1, [sp, #24]
    4840:	9805      	ldr	r0, [sp, #20]
    4842:	9e07      	ldr	r6, [sp, #28]
    4844:	47b0      	blx	r6
    4846:	1c43      	adds	r3, r0, #1
    4848:	d030      	beq.n	48ac <_printf_i+0x224>
    484a:	3501      	adds	r5, #1
    484c:	68e3      	ldr	r3, [r4, #12]
    484e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4850:	1a9b      	subs	r3, r3, r2
    4852:	429d      	cmp	r5, r3
    4854:	dbf0      	blt.n	4838 <_printf_i+0x1b0>
    4856:	e7e9      	b.n	482c <_printf_i+0x1a4>
    4858:	2d00      	cmp	r5, #0
    485a:	d0a9      	beq.n	47b0 <_printf_i+0x128>
    485c:	9e04      	ldr	r6, [sp, #16]
    485e:	0028      	movs	r0, r5
    4860:	0039      	movs	r1, r7
    4862:	f7fe fff9 	bl	3858 <__aeabi_uidivmod>
    4866:	9b03      	ldr	r3, [sp, #12]
    4868:	3e01      	subs	r6, #1
    486a:	5c5b      	ldrb	r3, [r3, r1]
    486c:	0028      	movs	r0, r5
    486e:	7033      	strb	r3, [r6, #0]
    4870:	0039      	movs	r1, r7
    4872:	f7fe ff6b 	bl	374c <__udivsi3>
    4876:	1e05      	subs	r5, r0, #0
    4878:	d1f1      	bne.n	485e <_printf_i+0x1d6>
    487a:	2f08      	cmp	r7, #8
    487c:	d109      	bne.n	4892 <_printf_i+0x20a>
    487e:	6823      	ldr	r3, [r4, #0]
    4880:	07db      	lsls	r3, r3, #31
    4882:	d506      	bpl.n	4892 <_printf_i+0x20a>
    4884:	6863      	ldr	r3, [r4, #4]
    4886:	6922      	ldr	r2, [r4, #16]
    4888:	4293      	cmp	r3, r2
    488a:	dc02      	bgt.n	4892 <_printf_i+0x20a>
    488c:	2330      	movs	r3, #48	; 0x30
    488e:	3e01      	subs	r6, #1
    4890:	7033      	strb	r3, [r6, #0]
    4892:	9b04      	ldr	r3, [sp, #16]
    4894:	1b9b      	subs	r3, r3, r6
    4896:	6123      	str	r3, [r4, #16]
    4898:	9b07      	ldr	r3, [sp, #28]
    489a:	aa09      	add	r2, sp, #36	; 0x24
    489c:	9300      	str	r3, [sp, #0]
    489e:	0021      	movs	r1, r4
    48a0:	9b06      	ldr	r3, [sp, #24]
    48a2:	9805      	ldr	r0, [sp, #20]
    48a4:	f7ff fe82 	bl	45ac <_printf_common>
    48a8:	1c43      	adds	r3, r0, #1
    48aa:	d1b3      	bne.n	4814 <_printf_i+0x18c>
    48ac:	2001      	movs	r0, #1
    48ae:	4240      	negs	r0, r0
    48b0:	b00b      	add	sp, #44	; 0x2c
    48b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48b4:	0000700e 	.word	0x0000700e
    48b8:	00006ffd 	.word	0x00006ffd

000048bc <_putc_r>:
    48bc:	b570      	push	{r4, r5, r6, lr}
    48be:	0006      	movs	r6, r0
    48c0:	000d      	movs	r5, r1
    48c2:	0014      	movs	r4, r2
    48c4:	2800      	cmp	r0, #0
    48c6:	d004      	beq.n	48d2 <_putc_r+0x16>
    48c8:	6983      	ldr	r3, [r0, #24]
    48ca:	2b00      	cmp	r3, #0
    48cc:	d101      	bne.n	48d2 <_putc_r+0x16>
    48ce:	f7ff fc25 	bl	411c <__sinit>
    48d2:	4b12      	ldr	r3, [pc, #72]	; (491c <_putc_r+0x60>)
    48d4:	429c      	cmp	r4, r3
    48d6:	d111      	bne.n	48fc <_putc_r+0x40>
    48d8:	6874      	ldr	r4, [r6, #4]
    48da:	68a3      	ldr	r3, [r4, #8]
    48dc:	3b01      	subs	r3, #1
    48de:	60a3      	str	r3, [r4, #8]
    48e0:	2b00      	cmp	r3, #0
    48e2:	da05      	bge.n	48f0 <_putc_r+0x34>
    48e4:	69a2      	ldr	r2, [r4, #24]
    48e6:	4293      	cmp	r3, r2
    48e8:	db12      	blt.n	4910 <_putc_r+0x54>
    48ea:	b2eb      	uxtb	r3, r5
    48ec:	2b0a      	cmp	r3, #10
    48ee:	d00f      	beq.n	4910 <_putc_r+0x54>
    48f0:	6823      	ldr	r3, [r4, #0]
    48f2:	b2e8      	uxtb	r0, r5
    48f4:	1c5a      	adds	r2, r3, #1
    48f6:	6022      	str	r2, [r4, #0]
    48f8:	701d      	strb	r5, [r3, #0]
    48fa:	bd70      	pop	{r4, r5, r6, pc}
    48fc:	4b08      	ldr	r3, [pc, #32]	; (4920 <_putc_r+0x64>)
    48fe:	429c      	cmp	r4, r3
    4900:	d101      	bne.n	4906 <_putc_r+0x4a>
    4902:	68b4      	ldr	r4, [r6, #8]
    4904:	e7e9      	b.n	48da <_putc_r+0x1e>
    4906:	4b07      	ldr	r3, [pc, #28]	; (4924 <_putc_r+0x68>)
    4908:	429c      	cmp	r4, r3
    490a:	d1e6      	bne.n	48da <_putc_r+0x1e>
    490c:	68f4      	ldr	r4, [r6, #12]
    490e:	e7e4      	b.n	48da <_putc_r+0x1e>
    4910:	0022      	movs	r2, r4
    4912:	0029      	movs	r1, r5
    4914:	0030      	movs	r0, r6
    4916:	f000 f853 	bl	49c0 <__swbuf_r>
    491a:	e7ee      	b.n	48fa <_putc_r+0x3e>
    491c:	00006fac 	.word	0x00006fac
    4920:	00006fcc 	.word	0x00006fcc
    4924:	00006f8c 	.word	0x00006f8c

00004928 <__sread>:
    4928:	b570      	push	{r4, r5, r6, lr}
    492a:	000c      	movs	r4, r1
    492c:	250e      	movs	r5, #14
    492e:	5f49      	ldrsh	r1, [r1, r5]
    4930:	f000 f97c 	bl	4c2c <_read_r>
    4934:	2800      	cmp	r0, #0
    4936:	db03      	blt.n	4940 <__sread+0x18>
    4938:	6d63      	ldr	r3, [r4, #84]	; 0x54
    493a:	181b      	adds	r3, r3, r0
    493c:	6563      	str	r3, [r4, #84]	; 0x54
    493e:	bd70      	pop	{r4, r5, r6, pc}
    4940:	89a3      	ldrh	r3, [r4, #12]
    4942:	4a02      	ldr	r2, [pc, #8]	; (494c <__sread+0x24>)
    4944:	4013      	ands	r3, r2
    4946:	81a3      	strh	r3, [r4, #12]
    4948:	e7f9      	b.n	493e <__sread+0x16>
    494a:	46c0      	nop			; (mov r8, r8)
    494c:	ffffefff 	.word	0xffffefff

00004950 <__swrite>:
    4950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4952:	001f      	movs	r7, r3
    4954:	898b      	ldrh	r3, [r1, #12]
    4956:	0005      	movs	r5, r0
    4958:	000c      	movs	r4, r1
    495a:	0016      	movs	r6, r2
    495c:	05db      	lsls	r3, r3, #23
    495e:	d505      	bpl.n	496c <__swrite+0x1c>
    4960:	230e      	movs	r3, #14
    4962:	5ec9      	ldrsh	r1, [r1, r3]
    4964:	2200      	movs	r2, #0
    4966:	2302      	movs	r3, #2
    4968:	f000 f940 	bl	4bec <_lseek_r>
    496c:	89a3      	ldrh	r3, [r4, #12]
    496e:	4a05      	ldr	r2, [pc, #20]	; (4984 <__swrite+0x34>)
    4970:	0028      	movs	r0, r5
    4972:	4013      	ands	r3, r2
    4974:	81a3      	strh	r3, [r4, #12]
    4976:	0032      	movs	r2, r6
    4978:	230e      	movs	r3, #14
    497a:	5ee1      	ldrsh	r1, [r4, r3]
    497c:	003b      	movs	r3, r7
    497e:	f000 f875 	bl	4a6c <_write_r>
    4982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4984:	ffffefff 	.word	0xffffefff

00004988 <__sseek>:
    4988:	b570      	push	{r4, r5, r6, lr}
    498a:	000c      	movs	r4, r1
    498c:	250e      	movs	r5, #14
    498e:	5f49      	ldrsh	r1, [r1, r5]
    4990:	f000 f92c 	bl	4bec <_lseek_r>
    4994:	89a3      	ldrh	r3, [r4, #12]
    4996:	1c42      	adds	r2, r0, #1
    4998:	d103      	bne.n	49a2 <__sseek+0x1a>
    499a:	4a05      	ldr	r2, [pc, #20]	; (49b0 <__sseek+0x28>)
    499c:	4013      	ands	r3, r2
    499e:	81a3      	strh	r3, [r4, #12]
    49a0:	bd70      	pop	{r4, r5, r6, pc}
    49a2:	2280      	movs	r2, #128	; 0x80
    49a4:	0152      	lsls	r2, r2, #5
    49a6:	4313      	orrs	r3, r2
    49a8:	81a3      	strh	r3, [r4, #12]
    49aa:	6560      	str	r0, [r4, #84]	; 0x54
    49ac:	e7f8      	b.n	49a0 <__sseek+0x18>
    49ae:	46c0      	nop			; (mov r8, r8)
    49b0:	ffffefff 	.word	0xffffefff

000049b4 <__sclose>:
    49b4:	b510      	push	{r4, lr}
    49b6:	230e      	movs	r3, #14
    49b8:	5ec9      	ldrsh	r1, [r1, r3]
    49ba:	f000 f8e1 	bl	4b80 <_close_r>
    49be:	bd10      	pop	{r4, pc}

000049c0 <__swbuf_r>:
    49c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49c2:	0005      	movs	r5, r0
    49c4:	000e      	movs	r6, r1
    49c6:	0014      	movs	r4, r2
    49c8:	2800      	cmp	r0, #0
    49ca:	d004      	beq.n	49d6 <__swbuf_r+0x16>
    49cc:	6983      	ldr	r3, [r0, #24]
    49ce:	2b00      	cmp	r3, #0
    49d0:	d101      	bne.n	49d6 <__swbuf_r+0x16>
    49d2:	f7ff fba3 	bl	411c <__sinit>
    49d6:	4b22      	ldr	r3, [pc, #136]	; (4a60 <__swbuf_r+0xa0>)
    49d8:	429c      	cmp	r4, r3
    49da:	d12d      	bne.n	4a38 <__swbuf_r+0x78>
    49dc:	686c      	ldr	r4, [r5, #4]
    49de:	69a3      	ldr	r3, [r4, #24]
    49e0:	60a3      	str	r3, [r4, #8]
    49e2:	89a3      	ldrh	r3, [r4, #12]
    49e4:	071b      	lsls	r3, r3, #28
    49e6:	d531      	bpl.n	4a4c <__swbuf_r+0x8c>
    49e8:	6923      	ldr	r3, [r4, #16]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d02e      	beq.n	4a4c <__swbuf_r+0x8c>
    49ee:	6823      	ldr	r3, [r4, #0]
    49f0:	6922      	ldr	r2, [r4, #16]
    49f2:	b2f7      	uxtb	r7, r6
    49f4:	1a98      	subs	r0, r3, r2
    49f6:	6963      	ldr	r3, [r4, #20]
    49f8:	b2f6      	uxtb	r6, r6
    49fa:	4298      	cmp	r0, r3
    49fc:	db05      	blt.n	4a0a <__swbuf_r+0x4a>
    49fe:	0021      	movs	r1, r4
    4a00:	0028      	movs	r0, r5
    4a02:	f7ff fb1d 	bl	4040 <_fflush_r>
    4a06:	2800      	cmp	r0, #0
    4a08:	d126      	bne.n	4a58 <__swbuf_r+0x98>
    4a0a:	68a3      	ldr	r3, [r4, #8]
    4a0c:	3001      	adds	r0, #1
    4a0e:	3b01      	subs	r3, #1
    4a10:	60a3      	str	r3, [r4, #8]
    4a12:	6823      	ldr	r3, [r4, #0]
    4a14:	1c5a      	adds	r2, r3, #1
    4a16:	6022      	str	r2, [r4, #0]
    4a18:	701f      	strb	r7, [r3, #0]
    4a1a:	6963      	ldr	r3, [r4, #20]
    4a1c:	4298      	cmp	r0, r3
    4a1e:	d004      	beq.n	4a2a <__swbuf_r+0x6a>
    4a20:	89a3      	ldrh	r3, [r4, #12]
    4a22:	07db      	lsls	r3, r3, #31
    4a24:	d51a      	bpl.n	4a5c <__swbuf_r+0x9c>
    4a26:	2e0a      	cmp	r6, #10
    4a28:	d118      	bne.n	4a5c <__swbuf_r+0x9c>
    4a2a:	0021      	movs	r1, r4
    4a2c:	0028      	movs	r0, r5
    4a2e:	f7ff fb07 	bl	4040 <_fflush_r>
    4a32:	2800      	cmp	r0, #0
    4a34:	d012      	beq.n	4a5c <__swbuf_r+0x9c>
    4a36:	e00f      	b.n	4a58 <__swbuf_r+0x98>
    4a38:	4b0a      	ldr	r3, [pc, #40]	; (4a64 <__swbuf_r+0xa4>)
    4a3a:	429c      	cmp	r4, r3
    4a3c:	d101      	bne.n	4a42 <__swbuf_r+0x82>
    4a3e:	68ac      	ldr	r4, [r5, #8]
    4a40:	e7cd      	b.n	49de <__swbuf_r+0x1e>
    4a42:	4b09      	ldr	r3, [pc, #36]	; (4a68 <__swbuf_r+0xa8>)
    4a44:	429c      	cmp	r4, r3
    4a46:	d1ca      	bne.n	49de <__swbuf_r+0x1e>
    4a48:	68ec      	ldr	r4, [r5, #12]
    4a4a:	e7c8      	b.n	49de <__swbuf_r+0x1e>
    4a4c:	0021      	movs	r1, r4
    4a4e:	0028      	movs	r0, r5
    4a50:	f000 f820 	bl	4a94 <__swsetup_r>
    4a54:	2800      	cmp	r0, #0
    4a56:	d0ca      	beq.n	49ee <__swbuf_r+0x2e>
    4a58:	2601      	movs	r6, #1
    4a5a:	4276      	negs	r6, r6
    4a5c:	0030      	movs	r0, r6
    4a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a60:	00006fac 	.word	0x00006fac
    4a64:	00006fcc 	.word	0x00006fcc
    4a68:	00006f8c 	.word	0x00006f8c

00004a6c <_write_r>:
    4a6c:	b570      	push	{r4, r5, r6, lr}
    4a6e:	0005      	movs	r5, r0
    4a70:	0008      	movs	r0, r1
    4a72:	0011      	movs	r1, r2
    4a74:	2200      	movs	r2, #0
    4a76:	4c06      	ldr	r4, [pc, #24]	; (4a90 <_write_r+0x24>)
    4a78:	6022      	str	r2, [r4, #0]
    4a7a:	001a      	movs	r2, r3
    4a7c:	f7fd fc68 	bl	2350 <_write>
    4a80:	1c43      	adds	r3, r0, #1
    4a82:	d103      	bne.n	4a8c <_write_r+0x20>
    4a84:	6823      	ldr	r3, [r4, #0]
    4a86:	2b00      	cmp	r3, #0
    4a88:	d000      	beq.n	4a8c <_write_r+0x20>
    4a8a:	602b      	str	r3, [r5, #0]
    4a8c:	bd70      	pop	{r4, r5, r6, pc}
    4a8e:	46c0      	nop			; (mov r8, r8)
    4a90:	20000adc 	.word	0x20000adc

00004a94 <__swsetup_r>:
    4a94:	4b36      	ldr	r3, [pc, #216]	; (4b70 <__swsetup_r+0xdc>)
    4a96:	b570      	push	{r4, r5, r6, lr}
    4a98:	681d      	ldr	r5, [r3, #0]
    4a9a:	0006      	movs	r6, r0
    4a9c:	000c      	movs	r4, r1
    4a9e:	2d00      	cmp	r5, #0
    4aa0:	d005      	beq.n	4aae <__swsetup_r+0x1a>
    4aa2:	69ab      	ldr	r3, [r5, #24]
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	d102      	bne.n	4aae <__swsetup_r+0x1a>
    4aa8:	0028      	movs	r0, r5
    4aaa:	f7ff fb37 	bl	411c <__sinit>
    4aae:	4b31      	ldr	r3, [pc, #196]	; (4b74 <__swsetup_r+0xe0>)
    4ab0:	429c      	cmp	r4, r3
    4ab2:	d10f      	bne.n	4ad4 <__swsetup_r+0x40>
    4ab4:	686c      	ldr	r4, [r5, #4]
    4ab6:	230c      	movs	r3, #12
    4ab8:	5ee2      	ldrsh	r2, [r4, r3]
    4aba:	b293      	uxth	r3, r2
    4abc:	0719      	lsls	r1, r3, #28
    4abe:	d42d      	bmi.n	4b1c <__swsetup_r+0x88>
    4ac0:	06d9      	lsls	r1, r3, #27
    4ac2:	d411      	bmi.n	4ae8 <__swsetup_r+0x54>
    4ac4:	2309      	movs	r3, #9
    4ac6:	2001      	movs	r0, #1
    4ac8:	6033      	str	r3, [r6, #0]
    4aca:	3337      	adds	r3, #55	; 0x37
    4acc:	4313      	orrs	r3, r2
    4ace:	81a3      	strh	r3, [r4, #12]
    4ad0:	4240      	negs	r0, r0
    4ad2:	bd70      	pop	{r4, r5, r6, pc}
    4ad4:	4b28      	ldr	r3, [pc, #160]	; (4b78 <__swsetup_r+0xe4>)
    4ad6:	429c      	cmp	r4, r3
    4ad8:	d101      	bne.n	4ade <__swsetup_r+0x4a>
    4ada:	68ac      	ldr	r4, [r5, #8]
    4adc:	e7eb      	b.n	4ab6 <__swsetup_r+0x22>
    4ade:	4b27      	ldr	r3, [pc, #156]	; (4b7c <__swsetup_r+0xe8>)
    4ae0:	429c      	cmp	r4, r3
    4ae2:	d1e8      	bne.n	4ab6 <__swsetup_r+0x22>
    4ae4:	68ec      	ldr	r4, [r5, #12]
    4ae6:	e7e6      	b.n	4ab6 <__swsetup_r+0x22>
    4ae8:	075b      	lsls	r3, r3, #29
    4aea:	d513      	bpl.n	4b14 <__swsetup_r+0x80>
    4aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4aee:	2900      	cmp	r1, #0
    4af0:	d008      	beq.n	4b04 <__swsetup_r+0x70>
    4af2:	0023      	movs	r3, r4
    4af4:	3344      	adds	r3, #68	; 0x44
    4af6:	4299      	cmp	r1, r3
    4af8:	d002      	beq.n	4b00 <__swsetup_r+0x6c>
    4afa:	0030      	movs	r0, r6
    4afc:	f7ff f806 	bl	3b0c <_free_r>
    4b00:	2300      	movs	r3, #0
    4b02:	6363      	str	r3, [r4, #52]	; 0x34
    4b04:	2224      	movs	r2, #36	; 0x24
    4b06:	89a3      	ldrh	r3, [r4, #12]
    4b08:	4393      	bics	r3, r2
    4b0a:	81a3      	strh	r3, [r4, #12]
    4b0c:	2300      	movs	r3, #0
    4b0e:	6063      	str	r3, [r4, #4]
    4b10:	6923      	ldr	r3, [r4, #16]
    4b12:	6023      	str	r3, [r4, #0]
    4b14:	2308      	movs	r3, #8
    4b16:	89a2      	ldrh	r2, [r4, #12]
    4b18:	4313      	orrs	r3, r2
    4b1a:	81a3      	strh	r3, [r4, #12]
    4b1c:	6923      	ldr	r3, [r4, #16]
    4b1e:	2b00      	cmp	r3, #0
    4b20:	d10b      	bne.n	4b3a <__swsetup_r+0xa6>
    4b22:	21a0      	movs	r1, #160	; 0xa0
    4b24:	2280      	movs	r2, #128	; 0x80
    4b26:	89a3      	ldrh	r3, [r4, #12]
    4b28:	0089      	lsls	r1, r1, #2
    4b2a:	0092      	lsls	r2, r2, #2
    4b2c:	400b      	ands	r3, r1
    4b2e:	4293      	cmp	r3, r2
    4b30:	d003      	beq.n	4b3a <__swsetup_r+0xa6>
    4b32:	0021      	movs	r1, r4
    4b34:	0030      	movs	r0, r6
    4b36:	f7ff fbaf 	bl	4298 <__smakebuf_r>
    4b3a:	2301      	movs	r3, #1
    4b3c:	89a2      	ldrh	r2, [r4, #12]
    4b3e:	4013      	ands	r3, r2
    4b40:	d011      	beq.n	4b66 <__swsetup_r+0xd2>
    4b42:	2300      	movs	r3, #0
    4b44:	60a3      	str	r3, [r4, #8]
    4b46:	6963      	ldr	r3, [r4, #20]
    4b48:	425b      	negs	r3, r3
    4b4a:	61a3      	str	r3, [r4, #24]
    4b4c:	2000      	movs	r0, #0
    4b4e:	6923      	ldr	r3, [r4, #16]
    4b50:	4283      	cmp	r3, r0
    4b52:	d1be      	bne.n	4ad2 <__swsetup_r+0x3e>
    4b54:	230c      	movs	r3, #12
    4b56:	5ee2      	ldrsh	r2, [r4, r3]
    4b58:	0613      	lsls	r3, r2, #24
    4b5a:	d5ba      	bpl.n	4ad2 <__swsetup_r+0x3e>
    4b5c:	2340      	movs	r3, #64	; 0x40
    4b5e:	4313      	orrs	r3, r2
    4b60:	81a3      	strh	r3, [r4, #12]
    4b62:	3801      	subs	r0, #1
    4b64:	e7b5      	b.n	4ad2 <__swsetup_r+0x3e>
    4b66:	0792      	lsls	r2, r2, #30
    4b68:	d400      	bmi.n	4b6c <__swsetup_r+0xd8>
    4b6a:	6963      	ldr	r3, [r4, #20]
    4b6c:	60a3      	str	r3, [r4, #8]
    4b6e:	e7ed      	b.n	4b4c <__swsetup_r+0xb8>
    4b70:	20000164 	.word	0x20000164
    4b74:	00006fac 	.word	0x00006fac
    4b78:	00006fcc 	.word	0x00006fcc
    4b7c:	00006f8c 	.word	0x00006f8c

00004b80 <_close_r>:
    4b80:	2300      	movs	r3, #0
    4b82:	b570      	push	{r4, r5, r6, lr}
    4b84:	4c06      	ldr	r4, [pc, #24]	; (4ba0 <_close_r+0x20>)
    4b86:	0005      	movs	r5, r0
    4b88:	0008      	movs	r0, r1
    4b8a:	6023      	str	r3, [r4, #0]
    4b8c:	f7fd fc1a 	bl	23c4 <_close>
    4b90:	1c43      	adds	r3, r0, #1
    4b92:	d103      	bne.n	4b9c <_close_r+0x1c>
    4b94:	6823      	ldr	r3, [r4, #0]
    4b96:	2b00      	cmp	r3, #0
    4b98:	d000      	beq.n	4b9c <_close_r+0x1c>
    4b9a:	602b      	str	r3, [r5, #0]
    4b9c:	bd70      	pop	{r4, r5, r6, pc}
    4b9e:	46c0      	nop			; (mov r8, r8)
    4ba0:	20000adc 	.word	0x20000adc

00004ba4 <_fstat_r>:
    4ba4:	2300      	movs	r3, #0
    4ba6:	b570      	push	{r4, r5, r6, lr}
    4ba8:	4c06      	ldr	r4, [pc, #24]	; (4bc4 <_fstat_r+0x20>)
    4baa:	0005      	movs	r5, r0
    4bac:	0008      	movs	r0, r1
    4bae:	0011      	movs	r1, r2
    4bb0:	6023      	str	r3, [r4, #0]
    4bb2:	f7fd fc0a 	bl	23ca <_fstat>
    4bb6:	1c43      	adds	r3, r0, #1
    4bb8:	d103      	bne.n	4bc2 <_fstat_r+0x1e>
    4bba:	6823      	ldr	r3, [r4, #0]
    4bbc:	2b00      	cmp	r3, #0
    4bbe:	d000      	beq.n	4bc2 <_fstat_r+0x1e>
    4bc0:	602b      	str	r3, [r5, #0]
    4bc2:	bd70      	pop	{r4, r5, r6, pc}
    4bc4:	20000adc 	.word	0x20000adc

00004bc8 <_isatty_r>:
    4bc8:	2300      	movs	r3, #0
    4bca:	b570      	push	{r4, r5, r6, lr}
    4bcc:	4c06      	ldr	r4, [pc, #24]	; (4be8 <_isatty_r+0x20>)
    4bce:	0005      	movs	r5, r0
    4bd0:	0008      	movs	r0, r1
    4bd2:	6023      	str	r3, [r4, #0]
    4bd4:	f7fd fbfe 	bl	23d4 <_isatty>
    4bd8:	1c43      	adds	r3, r0, #1
    4bda:	d103      	bne.n	4be4 <_isatty_r+0x1c>
    4bdc:	6823      	ldr	r3, [r4, #0]
    4bde:	2b00      	cmp	r3, #0
    4be0:	d000      	beq.n	4be4 <_isatty_r+0x1c>
    4be2:	602b      	str	r3, [r5, #0]
    4be4:	bd70      	pop	{r4, r5, r6, pc}
    4be6:	46c0      	nop			; (mov r8, r8)
    4be8:	20000adc 	.word	0x20000adc

00004bec <_lseek_r>:
    4bec:	b570      	push	{r4, r5, r6, lr}
    4bee:	0005      	movs	r5, r0
    4bf0:	0008      	movs	r0, r1
    4bf2:	0011      	movs	r1, r2
    4bf4:	2200      	movs	r2, #0
    4bf6:	4c06      	ldr	r4, [pc, #24]	; (4c10 <_lseek_r+0x24>)
    4bf8:	6022      	str	r2, [r4, #0]
    4bfa:	001a      	movs	r2, r3
    4bfc:	f7fd fbec 	bl	23d8 <_lseek>
    4c00:	1c43      	adds	r3, r0, #1
    4c02:	d103      	bne.n	4c0c <_lseek_r+0x20>
    4c04:	6823      	ldr	r3, [r4, #0]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d000      	beq.n	4c0c <_lseek_r+0x20>
    4c0a:	602b      	str	r3, [r5, #0]
    4c0c:	bd70      	pop	{r4, r5, r6, pc}
    4c0e:	46c0      	nop			; (mov r8, r8)
    4c10:	20000adc 	.word	0x20000adc

00004c14 <memchr>:
    4c14:	b2c9      	uxtb	r1, r1
    4c16:	1882      	adds	r2, r0, r2
    4c18:	4290      	cmp	r0, r2
    4c1a:	d101      	bne.n	4c20 <memchr+0xc>
    4c1c:	2000      	movs	r0, #0
    4c1e:	4770      	bx	lr
    4c20:	7803      	ldrb	r3, [r0, #0]
    4c22:	428b      	cmp	r3, r1
    4c24:	d0fb      	beq.n	4c1e <memchr+0xa>
    4c26:	3001      	adds	r0, #1
    4c28:	e7f6      	b.n	4c18 <memchr+0x4>
	...

00004c2c <_read_r>:
    4c2c:	b570      	push	{r4, r5, r6, lr}
    4c2e:	0005      	movs	r5, r0
    4c30:	0008      	movs	r0, r1
    4c32:	0011      	movs	r1, r2
    4c34:	2200      	movs	r2, #0
    4c36:	4c06      	ldr	r4, [pc, #24]	; (4c50 <_read_r+0x24>)
    4c38:	6022      	str	r2, [r4, #0]
    4c3a:	001a      	movs	r2, r3
    4c3c:	f7fd fb66 	bl	230c <_read>
    4c40:	1c43      	adds	r3, r0, #1
    4c42:	d103      	bne.n	4c4c <_read_r+0x20>
    4c44:	6823      	ldr	r3, [r4, #0]
    4c46:	2b00      	cmp	r3, #0
    4c48:	d000      	beq.n	4c4c <_read_r+0x20>
    4c4a:	602b      	str	r3, [r5, #0]
    4c4c:	bd70      	pop	{r4, r5, r6, pc}
    4c4e:	46c0      	nop			; (mov r8, r8)
    4c50:	20000adc 	.word	0x20000adc
    4c54:	000006aa 	.word	0x000006aa
    4c58:	000006b0 	.word	0x000006b0
    4c5c:	000006b6 	.word	0x000006b6
    4c60:	000006c2 	.word	0x000006c2
    4c64:	000006ae 	.word	0x000006ae
    4c68:	000006ae 	.word	0x000006ae
    4c6c:	000006c8 	.word	0x000006c8
    4c70:	00000008 	.word	0x00000008
    4c74:	00000008 	.word	0x00000008
    4c78:	00000008 	.word	0x00000008
    4c7c:	00000008 	.word	0x00000008
    4c80:	00000008 	.word	0x00000008
    4c84:	00000008 	.word	0x00000008
    4c88:	00000008 	.word	0x00000008
    4c8c:	00000008 	.word	0x00000008
    4c90:	00000010 	.word	0x00000010
    4c94:	00000010 	.word	0x00000010
    4c98:	00000010 	.word	0x00000010
    4c9c:	00000010 	.word	0x00000010
    4ca0:	00000010 	.word	0x00000010
    4ca4:	00000010 	.word	0x00000010
    4ca8:	00000010 	.word	0x00000010
    4cac:	00000010 	.word	0x00000010
    4cb0:	00000018 	.word	0x00000018
    4cb4:	00000018 	.word	0x00000018
    4cb8:	00000018 	.word	0x00000018
    4cbc:	00000018 	.word	0x00000018
    4cc0:	00000018 	.word	0x00000018
    4cc4:	00000018 	.word	0x00000018
    4cc8:	00000018 	.word	0x00000018
    4ccc:	00000018 	.word	0x00000018
    4cd0:	00000020 	.word	0x00000020
    4cd4:	00000020 	.word	0x00000020
    4cd8:	00000020 	.word	0x00000020
    4cdc:	00000020 	.word	0x00000020
    4ce0:	00000020 	.word	0x00000020
    4ce4:	00000020 	.word	0x00000020
    4ce8:	00000020 	.word	0x00000020
    4cec:	00000020 	.word	0x00000020
    4cf0:	00000028 	.word	0x00000028
    4cf4:	00000028 	.word	0x00000028
    4cf8:	00000028 	.word	0x00000028
    4cfc:	00000028 	.word	0x00000028
    4d00:	00000028 	.word	0x00000028
    4d04:	00000028 	.word	0x00000028
    4d08:	00000028 	.word	0x00000028
    4d0c:	00000028 	.word	0x00000028
    4d10:	00000030 	.word	0x00000030
    4d14:	00000030 	.word	0x00000030
    4d18:	00000030 	.word	0x00000030
    4d1c:	00000030 	.word	0x00000030
    4d20:	00000030 	.word	0x00000030
    4d24:	00000030 	.word	0x00000030
    4d28:	00000030 	.word	0x00000030
    4d2c:	00000030 	.word	0x00000030
    4d30:	00000038 	.word	0x00000038
    4d34:	00000038 	.word	0x00000038
    4d38:	00000038 	.word	0x00000038
    4d3c:	00000038 	.word	0x00000038
    4d40:	00000038 	.word	0x00000038
    4d44:	00000038 	.word	0x00000038
    4d48:	00000038 	.word	0x00000038
    4d4c:	00000038 	.word	0x00000038
    4d50:	00000040 	.word	0x00000040
    4d54:	00000040 	.word	0x00000040
    4d58:	00000040 	.word	0x00000040
    4d5c:	00000040 	.word	0x00000040
    4d60:	00000040 	.word	0x00000040
    4d64:	00000040 	.word	0x00000040
    4d68:	00000040 	.word	0x00000040
    4d6c:	00000040 	.word	0x00000040
    4d70:	00000048 	.word	0x00000048
    4d74:	00000048 	.word	0x00000048
    4d78:	00000048 	.word	0x00000048
    4d7c:	00000048 	.word	0x00000048
    4d80:	00000048 	.word	0x00000048
    4d84:	00000048 	.word	0x00000048
    4d88:	00000048 	.word	0x00000048
    4d8c:	00000048 	.word	0x00000048
    4d90:	0000004f 	.word	0x0000004f
    4d94:	0000004f 	.word	0x0000004f
    4d98:	0000004f 	.word	0x0000004f
    4d9c:	0000004f 	.word	0x0000004f
    4da0:	0000004f 	.word	0x0000004f
    4da4:	0000004f 	.word	0x0000004f
    4da8:	0000004f 	.word	0x0000004f
    4dac:	0000004f 	.word	0x0000004f
    4db0:	000a000a 	.word	0x000a000a
    4db4:	00140014 	.word	0x00140014
    4db8:	00000014 	.word	0x00000014
    4dbc:	000a017c 	.word	0x000a017c
    4dc0:	000a017c 	.word	0x000a017c
    4dc4:	00140186 	.word	0x00140186
    4dc8:	00140000 	.word	0x00140000
    4dcc:	0122000a 	.word	0x0122000a
    4dd0:	00140186 	.word	0x00140186
    4dd4:	01220190 	.word	0x01220190
    4dd8:	0122000a 	.word	0x0122000a
    4ddc:	012c0014 	.word	0x012c0014
    4de0:	0122017c 	.word	0x0122017c
    4de4:	012c0186 	.word	0x012c0186
    4de8:	012c0014 	.word	0x012c0014
    4dec:	0136017c 	.word	0x0136017c
    4df0:	001e0000 	.word	0x001e0000
    4df4:	00280032 	.word	0x00280032
    4df8:	00320000 	.word	0x00320000
    4dfc:	003c0032 	.word	0x003c0032
    4e00:	001e0050 	.word	0x001e0050
    4e04:	00280118 	.word	0x00280118
    4e08:	00280046 	.word	0x00280046
    4e0c:	00be0050 	.word	0x00be0050
    4e10:	00be0050 	.word	0x00be0050
    4e14:	00c80118 	.word	0x00c80118
    4e18:	00280118 	.word	0x00280118
    4e1c:	00be0122 	.word	0x00be0122
    4e20:	00460000 	.word	0x00460000
    4e24:	00500032 	.word	0x00500032
    4e28:	005a0000 	.word	0x005a0000
    4e2c:	00640032 	.word	0x00640032
    4e30:	006e0000 	.word	0x006e0000
    4e34:	00780032 	.word	0x00780032
    4e38:	00820000 	.word	0x00820000
    4e3c:	008c0032 	.word	0x008c0032
    4e40:	00960000 	.word	0x00960000
    4e44:	00a00032 	.word	0x00a00032
    4e48:	00aa0000 	.word	0x00aa0000
    4e4c:	00b40032 	.word	0x00b40032
    4e50:	00be0000 	.word	0x00be0000
    4e54:	00c80032 	.word	0x00c80032
    4e58:	00c8012c 	.word	0x00c8012c
    4e5c:	00d20172 	.word	0x00d20172
    4e60:	00dc001e 	.word	0x00dc001e
    4e64:	00e60172 	.word	0x00e60172
    4e68:	00f0001e 	.word	0x00f0001e
    4e6c:	00fa0172 	.word	0x00fa0172
    4e70:	0104001e 	.word	0x0104001e
    4e74:	010e0172 	.word	0x010e0172
    4e78:	0118005a 	.word	0x0118005a
    4e7c:	0122012c 	.word	0x0122012c
    4e80:	82be50b4 	.word	0x82be50b4
    4e84:	8cbe82aa 	.word	0x8cbe82aa
    4e88:	64963c8c 	.word	0x64963c8c
    4e8c:	64dc3cd2 	.word	0x64dc3cd2
    4e90:	a08c9682 	.word	0xa08c9682
    4e94:	aadca08c 	.word	0xaadca08c
    4e98:	a0e696dc 	.word	0xa0e696dc
    4e9c:	50f03c78 	.word	0x50f03c78
    4ea0:	5a78466e 	.word	0x5a78466e
    4ea4:	aaaa3c96 	.word	0xaaaa3c96
    4ea8:	a0dc3cc8 	.word	0xa0dc3cc8
    4eac:	aae6a0d2 	.word	0xaae6a0d2
    4eb0:	6e617254 	.word	0x6e617254
    4eb4:	69722073 	.word	0x69722073
    4eb8:	73746867 	.word	0x73746867
    4ebc:	65726120 	.word	0x65726120
    4ec0:	6d756820 	.word	0x6d756820
    4ec4:	72206e61 	.word	0x72206e61
    4ec8:	74686769 	.word	0x74686769
    4ecc:	00000073 	.word	0x00000073
    4ed0:	355e3331 	.word	0x355e3331
    4ed4:	31202b20 	.word	0x31202b20
    4ed8:	20355e36 	.word	0x20355e36
    4edc:	3731203d 	.word	0x3731203d
    4ee0:	0000355e 	.word	0x0000355e
    4ee4:	69746552 	.word	0x69746552
    4ee8:	616c7563 	.word	0x616c7563
    4eec:	676e6974 	.word	0x676e6974
    4ef0:	6c705320 	.word	0x6c705320
    4ef4:	73656e69 	.word	0x73656e69
    4ef8:	00000000 	.word	0x00000000
    4efc:	6c6f6976 	.word	0x6c6f6976
    4f00:	65636e65 	.word	0x65636e65
    4f04:	726f772e 	.word	0x726f772e
    4f08:	0000736b 	.word	0x0000736b
    4f0c:	73626154 	.word	0x73626154
    4f10:	00000021 	.word	0x00000021
    4f14:	6c6c694b 	.word	0x6c6c694b
    4f18:	6c694220 	.word	0x6c694220
    4f1c:	6e6f696c 	.word	0x6e6f696c
    4f20:	65726961 	.word	0x65726961
    4f24:	61282073 	.word	0x61282073
    4f28:	5420646e 	.word	0x5420646e
    4f2c:	6c6c6972 	.word	0x6c6c6972
    4f30:	616e6f69 	.word	0x616e6f69
    4f34:	29657269 	.word	0x29657269
    4f38:	00000000 	.word	0x00000000
    4f3c:	65746e49 	.word	0x65746e49
    4f40:	74736572 	.word	0x74736572
    4f44:	206e6920 	.word	0x206e6920
    4f48:	68636574 	.word	0x68636574
    4f4c:	6f6c6f6e 	.word	0x6f6c6f6e
    4f50:	69207967 	.word	0x69207967
    4f54:	6f6e2073 	.word	0x6f6e2073
    4f58:	20612074 	.word	0x20612074
    4f5c:	73726570 	.word	0x73726570
    4f60:	6c616e6f 	.word	0x6c616e6f
    4f64:	00797469 	.word	0x00797469
    4f68:	50203031 	.word	0x50203031
    4f6c:	544e4952 	.word	0x544e4952
    4f70:	52484320 	.word	0x52484320
    4f74:	30322824 	.word	0x30322824
    4f78:	2b352e35 	.word	0x2b352e35
    4f7c:	28444e52 	.word	0x28444e52
    4f80:	3b292931 	.word	0x3b292931
    4f84:	47203a20 	.word	0x47203a20
    4f88:	204f544f 	.word	0x204f544f
    4f8c:	00003031 	.word	0x00003031
    4f90:	67206f4e 	.word	0x67206f4e
    4f94:	2e73646f 	.word	0x2e73646f
    4f98:	206f4e20 	.word	0x206f4e20
    4f9c:	7473616d 	.word	0x7473616d
    4fa0:	2e737265 	.word	0x2e737265
    4fa4:	206f4e20 	.word	0x206f4e20
    4fa8:	65747865 	.word	0x65747865
    4fac:	6c616e72 	.word	0x6c616e72
    4fb0:	62696c20 	.word	0x62696c20
    4fb4:	69726172 	.word	0x69726172
    4fb8:	002e7365 	.word	0x002e7365
    4fbc:	6c6c694b 	.word	0x6c6c694b
    4fc0:	7a614e20 	.word	0x7a614e20
    4fc4:	00007369 	.word	0x00007369
    4fc8:	6e616954 	.word	0x6e616954
    4fcc:	656d6e61 	.word	0x656d6e61
    4fd0:	7153206e 	.word	0x7153206e
    4fd4:	65726175 	.word	0x65726175
    4fd8:	38393120 	.word	0x38393120
    4fdc:	00000039 	.word	0x00000039
    4fe0:	72656d41 	.word	0x72656d41
    4fe4:	20616369 	.word	0x20616369
    4fe8:	20736177 	.word	0x20736177
    4fec:	6e756f66 	.word	0x6e756f66
    4ff0:	20646564 	.word	0x20646564
    4ff4:	73206e6f 	.word	0x73206e6f
    4ff8:	6576616c 	.word	0x6576616c
    4ffc:	00007972 	.word	0x00007972
    5000:	72656854 	.word	0x72656854
    5004:	73692065 	.word	0x73692065
    5008:	6c6e6f20 	.word	0x6c6e6f20
    500c:	61632079 	.word	0x61632079
    5010:	61746970 	.word	0x61746970
    5014:	6e61206c 	.word	0x6e61206c
    5018:	616c2064 	.word	0x616c2064
    501c:	00726f62 	.word	0x00726f62
    5020:	6f636e45 	.word	0x6f636e45
    5024:	67617275 	.word	0x67617275
    5028:	59532065 	.word	0x59532065
    502c:	54454d4d 	.word	0x54454d4d
    5030:	20434952 	.word	0x20434952
    5034:	73616c63 	.word	0x73616c63
    5038:	61772073 	.word	0x61772073
    503c:	72616672 	.word	0x72616672
    5040:	00000065 	.word	0x00000065
    5044:	52554324 	.word	0x52554324
    5048:	544e4552 	.word	0x544e4552
    504c:	4d454d5f 	.word	0x4d454d5f
    5050:	00000045 	.word	0x00000045
    5054:	694e2041 	.word	0x694e2041
    5058:	54206563 	.word	0x54206563
    505c:	00005954 	.word	0x00005954
    5060:	78696e55 	.word	0x78696e55
    5064:	6f706520 	.word	0x6f706520
    5068:	6d206863 	.word	0x6d206863
    506c:	73756e69 	.word	0x73756e69
    5070:	46783020 	.word	0x46783020
    5074:	61642046 	.word	0x61642046
    5078:	00007379 	.word	0x00007379
    507c:	3d202069 	.word	0x3d202069
    5080:	35783020 	.word	0x35783020
    5084:	35373366 	.word	0x35373366
    5088:	20666439 	.word	0x20666439
    508c:	2028202d 	.word	0x2028202d
    5090:	3e3e2069 	.word	0x3e3e2069
    5094:	29203120 	.word	0x29203120
    5098:	0000003b 	.word	0x0000003b
    509c:	42414341 	.word	0x42414341
    50a0:	00000000 	.word	0x00000000
    50a4:	63666544 	.word	0x63666544
    50a8:	73276e6f 	.word	0x73276e6f
    50ac:	6e616320 	.word	0x6e616320
    50b0:	656c6563 	.word	0x656c6563
    50b4:	00002e64 	.word	0x00002e64
    50b8:	73746152 	.word	0x73746152
    50bc:	7473656e 	.word	0x7473656e
    50c0:	6f4e203a 	.word	0x6f4e203a
    50c4:	6e696874 	.word	0x6e696874
    50c8:	6f542067 	.word	0x6f542067
    50cc:	216f4420 	.word	0x216f4420
    50d0:	00000000 	.word	0x00000000
    50d4:	68207449 	.word	0x68207449
    50d8:	36207361 	.word	0x36207361
    50dc:	656b2039 	.word	0x656b2039
    50e0:	002e7379 	.word	0x002e7379
    50e4:	61636542 	.word	0x61636542
    50e8:	20657375 	.word	0x20657375
    50ec:	342d5456 	.word	0x342d5456
    50f0:	77203032 	.word	0x77203032
    50f4:	61207361 	.word	0x61207361
    50f8:	6165726c 	.word	0x6165726c
    50fc:	74207964 	.word	0x74207964
    5100:	6e656b61 	.word	0x6e656b61
    5104:	00000000 	.word	0x00000000
    5108:	706d6f43 	.word	0x706d6f43
    510c:	73736572 	.word	0x73736572
    5110:	206e6f69 	.word	0x206e6f69
    5114:	6f676c61 	.word	0x6f676c61
    5118:	68746972 	.word	0x68746972
    511c:	6162206d 	.word	0x6162206d
    5120:	20646573 	.word	0x20646573
    5124:	42206e6f 	.word	0x42206e6f
    5128:	28205042 	.word	0x28205042
    512c:	37393931 	.word	0x37393931
    5130:	00000029 	.word	0x00000029
    5134:	63616554 	.word	0x63616554
    5138:	65682068 	.word	0x65682068
    513c:	68746c61 	.word	0x68746c61
    5140:	736e6920 	.word	0x736e6920
    5144:	6e617275 	.word	0x6e617275
    5148:	70206563 	.word	0x70206563
    514c:	69766f72 	.word	0x69766f72
    5150:	73726564 	.word	0x73726564
    5154:	206f7420 	.word	0x206f7420
    5158:	65646f63 	.word	0x65646f63
    515c:	0000002e 	.word	0x0000002e
    5160:	6566664f 	.word	0x6566664f
    5164:	7669736e 	.word	0x7669736e
    5168:	61682065 	.word	0x61682065
    516c:	61776472 	.word	0x61776472
    5170:	00006572 	.word	0x00006572
    5174:	69466957 	.word	0x69466957
    5178:	20736920 	.word	0x20736920
    517c:	20746f6e 	.word	0x20746f6e
    5180:	65726977 	.word	0x65726977
    5184:	7373656c 	.word	0x7373656c
    5188:	68744520 	.word	0x68744520
    518c:	656e7265 	.word	0x656e7265
    5190:	00002174 	.word	0x00002174
    5194:	6d6d7544 	.word	0x6d6d7544
    5198:	68742079 	.word	0x68742079
    519c:	20636369 	.word	0x20636369
    51a0:	65696c63 	.word	0x65696c63
    51a4:	0000746e 	.word	0x0000746e
    51a8:	694e2041 	.word	0x694e2041
    51ac:	54206563 	.word	0x54206563
    51b0:	202e5954 	.word	0x202e5954
    51b4:	4f206e41 	.word	0x4f206e41
    51b8:	6f43204b 	.word	0x6f43204b
    51bc:	7475706d 	.word	0x7475706d
    51c0:	002e7265 	.word	0x002e7265
    51c4:	65545355 	.word	0x65545355
    51c8:	6964656c 	.word	0x6964656c
    51cc:	6e6f646c 	.word	0x6e6f646c
    51d0:	00736369 	.word	0x00736369
    51d4:	696c6f53 	.word	0x696c6f53
    51d8:	69726164 	.word	0x69726164
    51dc:	69207974 	.word	0x69207974
    51e0:	6f6e2073 	.word	0x6f6e2073
    51e4:	20612074 	.word	0x20612074
    51e8:	2077656e 	.word	0x2077656e
    51ec:	6d617266 	.word	0x6d617266
    51f0:	726f7765 	.word	0x726f7765
    51f4:	0000006b 	.word	0x0000006b
    51f8:	61657242 	.word	0x61657242
    51fc:	616f6264 	.word	0x616f6264
    5200:	6e696472 	.word	0x6e696472
    5204:	73492067 	.word	0x73492067
    5208:	746f4e20 	.word	0x746f4e20
    520c:	43204120 	.word	0x43204120
    5210:	656d6972 	.word	0x656d6972
    5214:	00000000 	.word	0x00000000
    5218:	2066664f 	.word	0x2066664f
    521c:	6f207962 	.word	0x6f207962
    5220:	6520656e 	.word	0x6520656e
    5224:	726f7272 	.word	0x726f7272
    5228:	72612073 	.word	0x72612073
    522c:	6f632065 	.word	0x6f632065
    5230:	6e6f6d6d 	.word	0x6e6f6d6d
    5234:	00000000 	.word	0x00000000
    5238:	00000d16 	.word	0x00000d16
    523c:	00000f62 	.word	0x00000f62
    5240:	00000f62 	.word	0x00000f62
    5244:	00000f62 	.word	0x00000f62
    5248:	00000f62 	.word	0x00000f62
    524c:	00000f62 	.word	0x00000f62
    5250:	00000f62 	.word	0x00000f62
    5254:	00000f62 	.word	0x00000f62
    5258:	00000f62 	.word	0x00000f62
    525c:	00000f62 	.word	0x00000f62
    5260:	00000f62 	.word	0x00000f62
    5264:	00000f62 	.word	0x00000f62
    5268:	00000f62 	.word	0x00000f62
    526c:	00000f62 	.word	0x00000f62
    5270:	00000f62 	.word	0x00000f62
    5274:	00000f62 	.word	0x00000f62
    5278:	00000cfe 	.word	0x00000cfe
    527c:	00000f62 	.word	0x00000f62
    5280:	00000f62 	.word	0x00000f62
    5284:	00000f62 	.word	0x00000f62
    5288:	00000f62 	.word	0x00000f62
    528c:	00000f62 	.word	0x00000f62
    5290:	00000f62 	.word	0x00000f62
    5294:	00000f62 	.word	0x00000f62
    5298:	00000f62 	.word	0x00000f62
    529c:	00000f62 	.word	0x00000f62
    52a0:	00000f62 	.word	0x00000f62
    52a4:	00000f62 	.word	0x00000f62
    52a8:	00000f62 	.word	0x00000f62
    52ac:	00000f62 	.word	0x00000f62
    52b0:	00000f62 	.word	0x00000f62
    52b4:	00000f62 	.word	0x00000f62
    52b8:	00000d0e 	.word	0x00000d0e
    52bc:	00000f62 	.word	0x00000f62
    52c0:	00000f62 	.word	0x00000f62
    52c4:	00000f62 	.word	0x00000f62
    52c8:	00000f62 	.word	0x00000f62
    52cc:	00000f62 	.word	0x00000f62
    52d0:	00000f62 	.word	0x00000f62
    52d4:	00000f62 	.word	0x00000f62
    52d8:	00000f62 	.word	0x00000f62
    52dc:	00000f62 	.word	0x00000f62
    52e0:	00000f62 	.word	0x00000f62
    52e4:	00000f62 	.word	0x00000f62
    52e8:	00000f62 	.word	0x00000f62
    52ec:	00000f62 	.word	0x00000f62
    52f0:	00000f62 	.word	0x00000f62
    52f4:	00000f62 	.word	0x00000f62
    52f8:	00000d06 	.word	0x00000d06
    52fc:	00000d1e 	.word	0x00000d1e
    5300:	00000ce6 	.word	0x00000ce6
    5304:	00000cf6 	.word	0x00000cf6
    5308:	00000cee 	.word	0x00000cee
    530c:	00000002 	.word	0x00000002
    5310:	00000003 	.word	0x00000003
    5314:	00000028 	.word	0x00000028
    5318:	00000029 	.word	0x00000029
    531c:	00000004 	.word	0x00000004
    5320:	00000005 	.word	0x00000005
    5324:	00000006 	.word	0x00000006
    5328:	00000007 	.word	0x00000007
    532c:	00000020 	.word	0x00000020
    5330:	00000021 	.word	0x00000021
    5334:	00000022 	.word	0x00000022
    5338:	00000023 	.word	0x00000023
    533c:	00000024 	.word	0x00000024
    5340:	00000025 	.word	0x00000025
    5344:	00000026 	.word	0x00000026
    5348:	00000027 	.word	0x00000027
    534c:	00000008 	.word	0x00000008
    5350:	00000009 	.word	0x00000009
    5354:	0000000a 	.word	0x0000000a
    5358:	0000000b 	.word	0x0000000b
    535c:	42000800 	.word	0x42000800
    5360:	42000c00 	.word	0x42000c00
    5364:	42001000 	.word	0x42001000
    5368:	42001400 	.word	0x42001400
    536c:	42001800 	.word	0x42001800
    5370:	42001c00 	.word	0x42001c00
    5374:	00001a9a 	.word	0x00001a9a
    5378:	00001a96 	.word	0x00001a96
    537c:	00001a96 	.word	0x00001a96
    5380:	00001afc 	.word	0x00001afc
    5384:	00001afc 	.word	0x00001afc
    5388:	00001aae 	.word	0x00001aae
    538c:	00001aa0 	.word	0x00001aa0
    5390:	00001ab4 	.word	0x00001ab4
    5394:	00001aea 	.word	0x00001aea
    5398:	00001cbc 	.word	0x00001cbc
    539c:	00001c9c 	.word	0x00001c9c
    53a0:	00001c9c 	.word	0x00001c9c
    53a4:	00001d28 	.word	0x00001d28
    53a8:	00001cae 	.word	0x00001cae
    53ac:	00001cca 	.word	0x00001cca
    53b0:	00001ca0 	.word	0x00001ca0
    53b4:	00001cd8 	.word	0x00001cd8
    53b8:	00001d18 	.word	0x00001d18

000053bc <CodePage437>:
	...
    56f4:	01000000 06186080 18608001 60800106     .....`....`....`
    5704:	80010000 00000060 00000000 66986106     ....`........a.f
    5714:	98618619 00000000 00000000 00000000     ..a.............
    5724:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    5734:	1966fefb 00986186 00000000 80010000     ..f..a..........
    5744:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    5754:	00000000 04000000 29a60823 1820c106     ........#..).. .
    5764:	98200304 324c1165 00000008 00000000     .. .e.L2........
    5774:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    5784:	0000f6d9 00000000 30c00000 00030618     ...........0....
    5794:	000000c0 00000000 00000000 00000000     ................
    57a4:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    57b4:	10400002 00000000 01000000 02084000     ..@..........@..
    57c4:	06186000 18608001 00010208 00000040     .`....`.....@...
    57d4:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    57e4:	80104290 00000000 00000000 00000000     .B..............
    57f4:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    5814:	18000000 c0000306 00001040 00000000     ........@.......
    5824:	00000000 ff000000 0000e0bf 00000000     ................
	...
    5848:	030e3800 0000e080 00000000 08200000     .8............ .
    5858:	80000104 02041020 10408000 00000208     .... .....@.....
    5868:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    5878:	63061b6c f8e0c318 00000000 00000000     l..c............
    5888:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    5898:	000000f8 00000000 c1f8e107 061860b0     .............`..
    58a8:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    58b8:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    58c8:	00f8e167 00000000 40000000 03070c30     g..........@0...
    58d8:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    58e8:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    58f8:	e167a081 000000f8 00000000 60f8e003     ..g............`
    5908:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    5918:	00000000 fefb0f00 20608001 00010408     ..........` ....
    5928:	0c302080 00c00003 00000000 e0030000     . 0.............
    5938:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    5948:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    5958:	0618609f e1c70003 000000f0 00000000     .`..............
    5968:	38000000 e080030e 00000000 030e3800     ...8.........8..
    5978:	0000e080 00000000 00000000 80030e38     ............8...
    5988:	000000e0 0e380000 40c00003 00000010     ......8....@....
    5998:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    59a8:	0c300003 00000000 00000000 00000000     ..0.............
    59b8:	00fefb0f fefb0f00 00000000 00000000     ................
    59c8:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    59d8:	0c0c3030 00000003 00000000 f8e10700     00..............
    59e8:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    59f8:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    5a08:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    5a18:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    5a28:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    5a38:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    5a48:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    5a58:	00f8e063 00000000 c30f0000 861966f0     c............f..
    5a68:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    5a78:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    5a88:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    5a98:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    5aa8:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    5ab8:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    5ac8:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    5ad8:	00000000 07000000 0618f8e1 18608001     ..............`.
    5ae8:	60800106 e1070618 000000f8 00000000     ...`............
    5af8:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    5b08:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    5b18:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    5b28:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    5b38:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    5b48:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    5b58:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    5b68:	ecb0c31e 0000061b 00000000 f8e00300     ................
    5b78:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    5b88:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    5b98:	c000038c 00030c30 00000000 07000000     ....0...........
    5ba8:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    5bb8:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    5bc8:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    5bd8:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    5be8:	00f8e167 00000000 fb0f0000 000208fe     g...............
    5bf8:	02082080 08208000 20800002 00000000     . .... .... ....
    5c08:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    5c18:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    5c28:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    5c38:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    5c48:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    5c58:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    5c68:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    5c78:	20c00107 80000208 00000020 00000000     ... .... .......
    5c88:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    5c98:	0000fefb 00000000 f8e00300 00030c30     ............0...
    5ca8:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    5cb8:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    5cc8:	0618c000 00000000 07000000 030cf0c1     ................
    5cd8:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    5ce8:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    5d14:	00fefb0f 00000000 80030000 00030ce0     ................
    5d24:	00001860 00000000 00000000 00000000     `...............
	...
    5d3c:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    5d4c:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    5d5c:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    5d6c:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    5d7c:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    5d8c:	c3061bec f6d9e7b0 00000000 00000000     ................
    5d9c:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    5dac:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    5dbc:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    5dcc:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    5ddc:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    5dec:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    5dfc:	01000000 00006080 18e08003 60800106     .....`.........`
    5e0c:	e1070618 000000f8 00000000 00186000     .............`..
    5e1c:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    5e2c:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    5e3c:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    5e4c:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    5e68:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    5e80:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    5e98:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    5eb0:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    5ec0:	02082080 00000000 00000000 c1fae803     . ..............
    5ed0:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    5ee0:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    5ef0:	00000003 00000000 00000000 e1070000     ................
    5f00:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    5f10:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    5f20:	30c0c00c 00000000 00000000 00000000     ...0............
    5f30:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    5f48:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    5f60:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    5f78:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    5f94:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    5fa4:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    5fb4:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    5fc4:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    5fd4:	00000000 80010000 01061860 06186080     ........`....`..
    5fe4:	18608001 60800106 00000000 0f000000     ..`....`........
    5ff4:	0208c003 0cc00003 c0000303 030f0208     ................
    6004:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    603c:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    604c:	f8e06398 00000608 00000000 00669801     .c............f.
    605c:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    606c:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    607c:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    608c:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    60a4:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    60bc:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    60cc:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    60dc:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    60ec:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    60fc:	04fef907 00000003 00000000 07001420     ............ ...
    610c:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    611c:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    612c:	f10730c0 000000fc 00000000 18c00000     .0..............
    613c:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    614c:	00000000 98610600 80030000 010618e0     ......a.........
    615c:	06186080 00f8e107 00000000 00000000     .`..............
    616c:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    6184:	0018c000 18e08003 60800106 e1070618     ...........`....
    6194:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    61a4:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    61b4:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    61c4:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    61d4:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    61ec:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    61fc:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    620c:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    621c:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    622c:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    623c:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    624c:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    625c:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    626c:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    627c:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    628c:	00f6d9c7 00000000 01000000 0c006698     .............f..
    629c:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    62ac:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    62bc:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    62cc:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    62dc:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    62ec:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    62fc:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    630c:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    631c:	20e00302 80800f08 00000020 00000000     ... .... .......
    632c:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    633c:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    634c:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    635c:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    636c:	fef823b0 00000000 00000000 000060c0     .#...........`..
    637c:	18e08003 60800106 e1070618 000000f8     .......`........
    638c:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    639c:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    63ac:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    63c4:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    63d4:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    63e4:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    63f4:	1e08c003 00e08308 000080ff 00000000     ................
	...
    640c:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    6428:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    6438:	00c00f3f 00000000 00000000 ff000000     ?...............
    6448:	0003ecbf 00000000 00000000 00000000     ................
	...
    6460:	18e0bfff 00000006 00000000 00000000     ................
    6470:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    6480:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    6490:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    64a0:	00000000 06180000 18000000 60800106     ...............`
    64b0:	80010618 00061860 00000000 00000000     ....`...........
    64c0:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    64d8:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    64e8:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    64f8:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    6508:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    6518:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    6528:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    6538:	20800002 80000208 00020820 02082080     ... .... .... ..
    6548:	08208000 20800002 80000208 00020820     .. .... .... ...
    6558:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    6568:	00020820 02082080 f8208000 20800f02      .... .... .... 
    6578:	80000208 00020820 05142080 14504001     .... .... ...@P.
    6588:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    6598:	00504001 00000000 00000000 013f0000     .@P...........?.
    65a8:	05145040 14504001 50400105 00000000     @P...@P...@P....
    65b8:	00000000 02f80000 0820800f 20800002     .......... .... 
    65c8:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    65d8:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    65e8:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    65f8:	05145040 00504001 00000000 00000000     @P...@P.........
    6608:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    6618:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    6630:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    6648:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    666c:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    667c:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    6694:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    66b8:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    66c8:	20800002 80000208 f0030820 02082080     ... .... .... ..
    66d8:	08208000 20800002 00000000 00000000     .. .... ........
    66e8:	3f000000 000000f0 00000000 00000000     ...?............
    66f8:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    6708:	80000208 00020820 02082080 08208000     .... .... .... .
    6718:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    6728:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    6738:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    6748:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    6764:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    6774:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    6798:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    67a8:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    67b8:	50400105 40010514 00000050 00000000     ..@P...@P.......
    67c8:	ff000000 00fc0fc0 00000000 00000000     ................
    67d8:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    67e8:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    67f8:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    6808:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    6818:	000000f0 00000000 00000000 00000000     ................
    6828:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    6838:	00020820 00002080 00000000 00000000      .... ..........
    6848:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    6858:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    6870:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    6890:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    68a0:	00002080 00000000 00000000 40f10700     . .............@
    68b0:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    68c0:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    68d0:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    68e0:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    68f0:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    6910:	80f00300 00020820 02082080 ff208000     .... .... .... .
    6920:	ffffffff ffffffff ffffffff ffffffff     ................
    6930:	ffffffff ffffffff 00000000 00000000     ................
    6940:	3f000000 ffffffff ffffffff ffffffff     ...?............
    6950:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    6960:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    6970:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    6980:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    69a4:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    69b4:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    69c4:	63c61861 000000f8 00000000 ff000000     a..c............
    69d4:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    69f0:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    6a00:	fb0f0000 06b080fe 0618c000 c0800103     ................
    6a10:	fefb2f20 00000000 00000000 00000000      /..............
    6a20:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    6a38:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    6a48:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    6a58:	06186080 00608001 00000000 00000000     .`....`.........
    6a68:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    6a78:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    6a88:	061becbf e0c31863 000000f8 00000000     ....c...........
    6a98:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    6aa8:	00008e33 00000000 fef80300 e1070318     3...............
    6ab8:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    6ac8:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    6ad8:	00204295 00000000 00000000 07000000     .B .............
    6ae8:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    6af8:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    6b08:	03186000 0000f8e0 00000000 00000000     .`..............
    6b18:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    6b28:	000060b0 00000000 0f000000 0000fefb     .`..............
    6b38:	00fefb0f fefb0f00 00000000 00000000     ................
    6b48:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    6b58:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    6b68:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    6b78:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    6b88:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    6b98:	02082080 08208000 20800002 80000208     . .... .... ....
    6ba8:	00020820 02082080 08208000 20800002      .... .... .... 
    6bb8:	80000208 09240820 00008001 18000000     .... .$.........
    6bc8:	00000006 00e0bfff 00061800 00000000     ................
	...
    6be0:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    6bf8:	01092460 00000080 00000000 00000000     `$..............
	...
    6c1c:	80030e38 00000000 00000000 00000000     8...............
	...
    6c34:	01000000 00006080 00000000 0f000000     .....`..........
    6c44:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    6c54:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    6c70:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    6c94:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    6cbc:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    6ccc:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    6cdc:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    6cec:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    6cfc:	0008006d 00000a7f 0009001b 47552600     m............&UG
    6d0c:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    6d1c:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    6d2c:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    6d3c:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    6d4c:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    6d5c:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    6d6c:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    6d7c:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    6d8c:	0008004d 00000a7f 0009001b 07150000     M...............
    6d9c:	1100000a 00000000 000b0809 1a001700     ................
    6dac:	0f000000 0500000a 00001801 1f001000     ................
    6dbc:	03131200 1b000000 14000000 000e1604     ................
    6dcc:	1c001d1e 02061900 0008000d 00000a00     ................

00006ddc <kb_col>:
    6ddc:	00010000 00020000 00040000 00080000     ................
    6dec:	00100000 00200000 08000000              ...... .....

00006df8 <kb_col_index>:
    6df8:	00000010 00000011 00000012 00000013     ................
    6e08:	00000014 00000015 0000001b              ............

00006e14 <kb_row>:
    6e14:	00000004 00000008 00000010 00000020     ............ ...
    6e24:	00000040 00000080 00000400 00000800     @...............
    6e34:	00001000 00002000                       ..... ..

00006e3c <kb_row_index>:
    6e3c:	00000002 00000003 00000004 00000005     ................
    6e4c:	00000006 00000007 0000000a 0000000b     ................
    6e5c:	0000000c 0000000d                       ........

00006e64 <beelzebub.12957>:
    6e64:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    6e74:	64012201 d4019201 08020702 5f023402     .".d.........4._
    6e84:	94027802 bb02a602 db02ca02 f902e802     .x..............
    6e94:	7f031f03                                ....

00006e98 <belial.12954>:
    6e98:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    6ea8:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    6eb8:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    6ec8:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    6ed8:	35c9c9c9 0000363a                       ...5:6..

00006ee0 <lucifer.12956>:
    6ee0:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    6ef0:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    6f00:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    6f10:	00cc0008 01707005 02030303 02d00000     .....pp.........
    6f20:	00505050 00000055                       PPP.U...

00006f28 <mulciber.12955>:
    6f28:	03020100 02010004 00020100 01000201     ................
    6f38:	02010002 00020100 01000201 01000002     ................
    6f48:	02010000 00020100 01000201 03020100     ................
    6f58:	00000004 01000100 01000302 02010002     ................
    6f68:	00000403 00000000 65530d0a 6c616972     ..........Serial
    6f78:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00006f88 <_global_impure_ptr>:
    6f88:	20000168                                h.. 

00006f8c <__sf_fake_stderr>:
	...

00006fac <__sf_fake_stdin>:
	...

00006fcc <__sf_fake_stdout>:
	...
    6fec:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    6ffc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    700c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    701c:	00006665                                ef..

00007020 <_init>:
    7020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7022:	46c0      	nop			; (mov r8, r8)
    7024:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7026:	bc08      	pop	{r3}
    7028:	469e      	mov	lr, r3
    702a:	4770      	bx	lr

0000702c <__init_array_start>:
    702c:	000000dd 	.word	0x000000dd

00007030 <_fini>:
    7030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7032:	46c0      	nop			; (mov r8, r8)
    7034:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7036:	bc08      	pop	{r3}
    7038:	469e      	mov	lr, r3
    703a:	4770      	bx	lr

0000703c <__fini_array_start>:
    703c:	000000b5 	.word	0x000000b5
