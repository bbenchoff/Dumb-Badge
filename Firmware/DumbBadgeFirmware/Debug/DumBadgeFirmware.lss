
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000083d4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000020c  20000000  000083d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f18  2000020c  000085e0  0002020c  2**2
                  ALLOC
  3 .stack        00002004  20003124  0000b4f8  0002020c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003e00a  00000000  00000000  0002028d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d7c  00000000  00000000  0005e297  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000789c  00000000  00000000  00064013  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008f0  00000000  00000000  0006b8af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bd0  00000000  00000000  0006c19f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fb99  00000000  00000000  0006cd6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001545e  00000000  00000000  0008c908  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00090712  00000000  00000000  000a1d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f00  00000000  00000000  00132478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	28 51 00 20 d9 33 00 00 d5 33 00 00 d5 33 00 00     (Q. .3...3...3..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	d5 33 00 00 00 00 00 00 00 00 00 00 d5 33 00 00     .3...........3..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	d5 44 00 00 d5 33 00 00 d5 33 00 00 d5 33 00 00     .D...3...3...3..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	d5 33 00 00 d5 33 00 00 d5 33 00 00 d5 33 00 00     .3...3...3...3..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	d5 33 00 00 d5 33 00 00 f1 25 00 00 01 26 00 00     .3...3...%...&..
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	11 26 00 00 21 26 00 00 31 26 00 00 41 26 00 00     .&..!&..1&..A&..
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	d5 33 00 00 d5 33 00 00 d5 33 00 00 d5 33 00 00     .3...3...3...3..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	d5 33 00 00 d5 33 00 00 d5 33 00 00 d5 33 00 00     .3...3...3...3..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	25 21 00 00 d5 33 00 00 d5 33 00 00 d5 33 00 00     %!...3...3...3..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	d5 33 00 00 00 00 00 00                             .3......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000020c 	.word	0x2000020c
      d4:	00000000 	.word	0x00000000
      d8:	000083d4 	.word	0x000083d4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000210 	.word	0x20000210
     108:	000083d4 	.word	0x000083d4
     10c:	000083d4 	.word	0x000083d4
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	00004c6d 	.word	0x00004c6d

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	00004b8d 	.word	0x00004b8d

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	00004b8d 	.word	0x00004b8d

000001d0 <isEmptyParser>:
int rearParam = -1;
int rearParser = -1;

bool isEmptyParser(void)
{
	if(frontParser == -1)
     1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <isEmptyParser+0x10>)
     1d2:	6818      	ldr	r0, [r3, #0]
     1d4:	3001      	adds	r0, #1
     1d6:	4243      	negs	r3, r0
     1d8:	4158      	adcs	r0, r3
     1da:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     1dc:	4770      	bx	lr
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	20000008 	.word	0x20000008

000001e4 <dequeueParser>:
}
char dequeueParser(void)
{
	char temp;
	
	temp = queueParser[frontParser];
     1e4:	4a08      	ldr	r2, [pc, #32]	; (208 <dequeueParser+0x24>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	4908      	ldr	r1, [pc, #32]	; (20c <dequeueParser+0x28>)
     1ea:	5cc8      	ldrb	r0, [r1, r3]
	frontParser++;
     1ec:	3301      	adds	r3, #1
     1ee:	6013      	str	r3, [r2, #0]
	if(frontParser > rearParser)
     1f0:	4a07      	ldr	r2, [pc, #28]	; (210 <dequeueParser+0x2c>)
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	4293      	cmp	r3, r2
     1f6:	dd05      	ble.n	204 <dequeueParser+0x20>
	{
		frontParser = rearParser = -1;
     1f8:	2301      	movs	r3, #1
     1fa:	425b      	negs	r3, r3
     1fc:	4a04      	ldr	r2, [pc, #16]	; (210 <dequeueParser+0x2c>)
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <dequeueParser+0x24>)
     202:	6013      	str	r3, [r2, #0]
	}
	return temp;
}
     204:	4770      	bx	lr
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000008 	.word	0x20000008
     20c:	20000300 	.word	0x20000300
     210:	20000010 	.word	0x20000010

00000214 <enqueueParser>:
void enqueueParser(char data)
{
	if(frontParser == -1)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <enqueueParser+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	3301      	adds	r3, #1
     21a:	d006      	beq.n	22a <enqueueParser+0x16>
	{
		frontParser = 0;
	}
	rearParser++;
     21c:	4a06      	ldr	r2, [pc, #24]	; (238 <enqueueParser+0x24>)
     21e:	6813      	ldr	r3, [r2, #0]
     220:	3301      	adds	r3, #1
     222:	6013      	str	r3, [r2, #0]
	queueParser[rearParser] = data;
     224:	4a05      	ldr	r2, [pc, #20]	; (23c <enqueueParser+0x28>)
     226:	54d0      	strb	r0, [r2, r3]
}
     228:	4770      	bx	lr
		frontParser = 0;
     22a:	2200      	movs	r2, #0
     22c:	4b01      	ldr	r3, [pc, #4]	; (234 <enqueueParser+0x20>)
     22e:	601a      	str	r2, [r3, #0]
     230:	e7f4      	b.n	21c <enqueueParser+0x8>
     232:	46c0      	nop			; (mov r8, r8)
     234:	20000008 	.word	0x20000008
     238:	20000010 	.word	0x20000010
     23c:	20000300 	.word	0x20000300

00000240 <isEmptyParam>:
bool isEmptyParam(void)
{
	if(frontParam == -1)
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <isEmptyParam+0x10>)
     242:	6818      	ldr	r0, [r3, #0]
     244:	3001      	adds	r0, #1
     246:	4243      	negs	r3, r0
     248:	4158      	adcs	r0, r3
     24a:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     24c:	4770      	bx	lr
     24e:	46c0      	nop			; (mov r8, r8)
     250:	20000004 	.word	0x20000004

00000254 <dequeueParam>:
}
uint8_t dequeueParam(void)
{
	uint8_t temp;
	
	temp = queueParam[frontParam];
     254:	4a08      	ldr	r2, [pc, #32]	; (278 <dequeueParam+0x24>)
     256:	6813      	ldr	r3, [r2, #0]
     258:	4908      	ldr	r1, [pc, #32]	; (27c <dequeueParam+0x28>)
     25a:	5cc8      	ldrb	r0, [r1, r3]
	frontParam++;
     25c:	3301      	adds	r3, #1
     25e:	6013      	str	r3, [r2, #0]
	if(frontParam > rearParam)
     260:	4a07      	ldr	r2, [pc, #28]	; (280 <dequeueParam+0x2c>)
     262:	6812      	ldr	r2, [r2, #0]
     264:	4293      	cmp	r3, r2
     266:	dd05      	ble.n	274 <dequeueParam+0x20>
	{
		frontParam = rearParam = -1;
     268:	2301      	movs	r3, #1
     26a:	425b      	negs	r3, r3
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <dequeueParam+0x2c>)
     26e:	6013      	str	r3, [r2, #0]
     270:	4a01      	ldr	r2, [pc, #4]	; (278 <dequeueParam+0x24>)
     272:	6013      	str	r3, [r2, #0]
	}

	return temp;
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	20000004 	.word	0x20000004
     27c:	20000334 	.word	0x20000334
     280:	2000000c 	.word	0x2000000c

00000284 <enqueueParam>:
void enqueueParam(uint8_t data)
{

	if(frontParam == -1)
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <enqueueParam+0x20>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	3301      	adds	r3, #1
     28a:	d006      	beq.n	29a <enqueueParam+0x16>
	{
		frontParam = 0;
	}
	rearParam++;
     28c:	4a06      	ldr	r2, [pc, #24]	; (2a8 <enqueueParam+0x24>)
     28e:	6813      	ldr	r3, [r2, #0]
     290:	3301      	adds	r3, #1
     292:	6013      	str	r3, [r2, #0]
	queueParam[rearParam] = data;
     294:	4a05      	ldr	r2, [pc, #20]	; (2ac <enqueueParam+0x28>)
     296:	54d0      	strb	r0, [r2, r3]
}
     298:	4770      	bx	lr
		frontParam = 0;
     29a:	2200      	movs	r2, #0
     29c:	4b01      	ldr	r3, [pc, #4]	; (2a4 <enqueueParam+0x20>)
     29e:	601a      	str	r2, [r3, #0]
     2a0:	e7f4      	b.n	28c <enqueueParam+0x8>
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	20000004 	.word	0x20000004
     2a8:	2000000c 	.word	0x2000000c
     2ac:	20000334 	.word	0x20000334

000002b0 <clearQueues>:
void clearQueues(void)
{
     2b0:	b530      	push	{r4, r5, lr}

	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <clearQueues+0x3c>)
     2b4:	6818      	ldr	r0, [r3, #0]
     2b6:	1e43      	subs	r3, r0, #1
     2b8:	2b00      	cmp	r3, #0
     2ba:	dd0b      	ble.n	2d4 <clearQueues+0x24>
     2bc:	0018      	movs	r0, r3
     2be:	2300      	movs	r3, #0
	{
		queueParam[i] = 0;
     2c0:	4d0b      	ldr	r5, [pc, #44]	; (2f0 <clearQueues+0x40>)
     2c2:	2200      	movs	r2, #0
		queueParser[i] = 0;
     2c4:	4c0b      	ldr	r4, [pc, #44]	; (2f4 <clearQueues+0x44>)
		queueParam[i] = 0;
     2c6:	1959      	adds	r1, r3, r5
     2c8:	700a      	strb	r2, [r1, #0]
		queueParser[i] = 0;
     2ca:	1919      	adds	r1, r3, r4
     2cc:	700a      	strb	r2, [r1, #0]
	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2ce:	3301      	adds	r3, #1
     2d0:	4283      	cmp	r3, r0
     2d2:	d1f8      	bne.n	2c6 <clearQueues+0x16>
	}
	
	frontParser = -1;
     2d4:	2301      	movs	r3, #1
     2d6:	425b      	negs	r3, r3
     2d8:	4a07      	ldr	r2, [pc, #28]	; (2f8 <clearQueues+0x48>)
     2da:	6013      	str	r3, [r2, #0]
	frontParam = -1;
     2dc:	4a07      	ldr	r2, [pc, #28]	; (2fc <clearQueues+0x4c>)
     2de:	6013      	str	r3, [r2, #0]
	rearParam = -1;
     2e0:	4a07      	ldr	r2, [pc, #28]	; (300 <clearQueues+0x50>)
     2e2:	6013      	str	r3, [r2, #0]
	rearParser = -1;
     2e4:	4a07      	ldr	r2, [pc, #28]	; (304 <clearQueues+0x54>)
     2e6:	6013      	str	r3, [r2, #0]
}
     2e8:	bd30      	pop	{r4, r5, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	20000000 	.word	0x20000000
     2f0:	20000334 	.word	0x20000334
     2f4:	20000300 	.word	0x20000300
     2f8:	20000008 	.word	0x20000008
     2fc:	20000004 	.word	0x20000004
     300:	2000000c 	.word	0x2000000c
     304:	20000010 	.word	0x20000010

00000308 <queueTransmogrifier>:
void queueTransmogrifier(void)
{
     308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	[24],[80]
	
	It's like reimplementing atoi() but it's not an interview question.
	*/
	
	int param = 0;
     30a:	2500      	movs	r5, #0
	char currentByte;
	
	while(!isEmptyParser())
     30c:	4e0c      	ldr	r6, [pc, #48]	; (340 <queueTransmogrifier+0x38>)
	{
		
		currentByte = dequeueParser();		//deque from parser
     30e:	4f0d      	ldr	r7, [pc, #52]	; (344 <queueTransmogrifier+0x3c>)

		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
		{
			enqueueParam(param);
     310:	4c0d      	ldr	r4, [pc, #52]	; (348 <queueTransmogrifier+0x40>)
	while(!isEmptyParser())
     312:	e002      	b.n	31a <queueTransmogrifier+0x12>
			enqueueParam(param);
     314:	b2e8      	uxtb	r0, r5
     316:	47a0      	blx	r4
			param = 0;
     318:	2500      	movs	r5, #0
	while(!isEmptyParser())
     31a:	47b0      	blx	r6
     31c:	2800      	cmp	r0, #0
     31e:	d10a      	bne.n	336 <queueTransmogrifier+0x2e>
		currentByte = dequeueParser();		//deque from parser
     320:	47b8      	blx	r7
		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
     322:	23fb      	movs	r3, #251	; 0xfb
     324:	4003      	ands	r3, r0
     326:	2b3b      	cmp	r3, #59	; 0x3b
     328:	d0f4      	beq.n	314 <queueTransmogrifier+0xc>
		}
		else
		{
			param = (10 * param) + (int)(currentByte-48);
     32a:	00ab      	lsls	r3, r5, #2
     32c:	195d      	adds	r5, r3, r5
     32e:	006d      	lsls	r5, r5, #1
     330:	3830      	subs	r0, #48	; 0x30
     332:	1945      	adds	r5, r0, r5
     334:	e7f1      	b.n	31a <queueTransmogrifier+0x12>
		}
	}
	enqueueParam(param);
     336:	b2e8      	uxtb	r0, r5
     338:	4b03      	ldr	r3, [pc, #12]	; (348 <queueTransmogrifier+0x40>)
     33a:	4798      	blx	r3
}
     33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	000001d1 	.word	0x000001d1
     344:	000001e5 	.word	0x000001e5
     348:	00000285 	.word	0x00000285

0000034c <CSIignoreState>:
	}
}

void CSIignoreState(uint8_t character)
{
	if(character == 0x1B)
     34c:	281b      	cmp	r0, #27
     34e:	d006      	beq.n	35e <CSIignoreState+0x12>
	{
		currentState = stateESC;
	}
	else if(character >= 0x40 && character <= 0x7E)
     350:	3840      	subs	r0, #64	; 0x40
     352:	283e      	cmp	r0, #62	; 0x3e
     354:	d802      	bhi.n	35c <CSIignoreState+0x10>
	{
		currentState = stateGround;
     356:	2200      	movs	r2, #0
     358:	4b03      	ldr	r3, [pc, #12]	; (368 <CSIignoreState+0x1c>)
     35a:	701a      	strb	r2, [r3, #0]
	}
}
     35c:	4770      	bx	lr
		currentState = stateESC;
     35e:	2201      	movs	r2, #1
     360:	4b01      	ldr	r3, [pc, #4]	; (368 <CSIignoreState+0x1c>)
     362:	701a      	strb	r2, [r3, #0]
     364:	e7fa      	b.n	35c <CSIignoreState+0x10>
     366:	46c0      	nop			; (mov r8, r8)
     368:	200002f1 	.word	0x200002f1

0000036c <SC>:
/************************************************************************/

void SC()
{
	//Save cursor position
	DECSCX = xCharPos;
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <SC+0x18>)
     36e:	881a      	ldrh	r2, [r3, #0]
     370:	4b05      	ldr	r3, [pc, #20]	; (388 <SC+0x1c>)
     372:	701a      	strb	r2, [r3, #0]
	DECSCY = yCharPos;
     374:	4b05      	ldr	r3, [pc, #20]	; (38c <SC+0x20>)
     376:	881a      	ldrh	r2, [r3, #0]
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <SC+0x24>)
     37a:	701a      	strb	r2, [r3, #0]
	currentState = stateGround;
     37c:	2200      	movs	r2, #0
     37e:	4b05      	ldr	r3, [pc, #20]	; (394 <SC+0x28>)
     380:	701a      	strb	r2, [r3, #0]
}
     382:	4770      	bx	lr
     384:	200002ec 	.word	0x200002ec
     388:	20000228 	.word	0x20000228
     38c:	200002ee 	.word	0x200002ee
     390:	20000229 	.word	0x20000229
     394:	200002f1 	.word	0x200002f1

00000398 <RC>:

void RC()
{
     398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Restore cursor to saved position
	
	char tempCharacter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     39a:	4c0f      	ldr	r4, [pc, #60]	; (3d8 <RC+0x40>)
     39c:	4f0f      	ldr	r7, [pc, #60]	; (3dc <RC+0x44>)
     39e:	883a      	ldrh	r2, [r7, #0]
     3a0:	4e0f      	ldr	r6, [pc, #60]	; (3e0 <RC+0x48>)
     3a2:	8831      	ldrh	r1, [r6, #0]
     3a4:	0053      	lsls	r3, r2, #1
     3a6:	189b      	adds	r3, r3, r2
     3a8:	00db      	lsls	r3, r3, #3
     3aa:	18e3      	adds	r3, r4, r3
     3ac:	5c58      	ldrb	r0, [r3, r1]
     3ae:	4d0d      	ldr	r5, [pc, #52]	; (3e4 <RC+0x4c>)
     3b0:	47a8      	blx	r5
	xCharPos = DECSCX;
     3b2:	4b0d      	ldr	r3, [pc, #52]	; (3e8 <RC+0x50>)
     3b4:	781a      	ldrb	r2, [r3, #0]
     3b6:	803a      	strh	r2, [r7, #0]
	yCharPos = DECSCY;
     3b8:	4b0c      	ldr	r3, [pc, #48]	; (3ec <RC+0x54>)
     3ba:	7819      	ldrb	r1, [r3, #0]
     3bc:	8031      	strh	r1, [r6, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     3be:	0053      	lsls	r3, r2, #1
     3c0:	189b      	adds	r3, r3, r2
     3c2:	00db      	lsls	r3, r3, #3
     3c4:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     3c6:	5c58      	ldrb	r0, [r3, r1]
     3c8:	47a8      	blx	r5
	blinkCursor();
     3ca:	4b09      	ldr	r3, [pc, #36]	; (3f0 <RC+0x58>)
     3cc:	4798      	blx	r3
	currentState = stateGround;
     3ce:	2200      	movs	r2, #0
     3d0:	4b08      	ldr	r3, [pc, #32]	; (3f4 <RC+0x5c>)
     3d2:	701a      	strb	r2, [r3, #0]
}
     3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	200003f4 	.word	0x200003f4
     3dc:	200002ec 	.word	0x200002ec
     3e0:	200002ee 	.word	0x200002ee
     3e4:	0000358d 	.word	0x0000358d
     3e8:	20000228 	.word	0x20000228
     3ec:	20000229 	.word	0x20000229
     3f0:	000036d9 	.word	0x000036d9
     3f4:	200002f1 	.word	0x200002f1

000003f8 <IND>:

void IND()
{
     3f8:	b570      	push	{r4, r5, r6, lr}
	//performs newline() if row = 24
	
	char tempCharacter;
	int xTemp = 0;
	
	if(yCharPos < 23)
     3fa:	4b19      	ldr	r3, [pc, #100]	; (460 <IND+0x68>)
     3fc:	881a      	ldrh	r2, [r3, #0]
     3fe:	2a16      	cmp	r2, #22
     400:	d914      	bls.n	42c <IND+0x34>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		xTemp = xCharPos;
     402:	4d18      	ldr	r5, [pc, #96]	; (464 <IND+0x6c>)
     404:	882c      	ldrh	r4, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     406:	0063      	lsls	r3, r4, #1
     408:	191b      	adds	r3, r3, r4
     40a:	00db      	lsls	r3, r3, #3
     40c:	4916      	ldr	r1, [pc, #88]	; (468 <IND+0x70>)
     40e:	18cb      	adds	r3, r1, r3
     410:	5c98      	ldrb	r0, [r3, r2]
     412:	4e16      	ldr	r6, [pc, #88]	; (46c <IND+0x74>)
     414:	47b0      	blx	r6
		newLine();
     416:	4b16      	ldr	r3, [pc, #88]	; (470 <IND+0x78>)
     418:	4798      	blx	r3
		drawChar(0x00);
     41a:	2000      	movs	r0, #0
     41c:	47b0      	blx	r6
		xCharPos = xTemp;
     41e:	802c      	strh	r4, [r5, #0]
		blinkCursor();
     420:	4b14      	ldr	r3, [pc, #80]	; (474 <IND+0x7c>)
     422:	4798      	blx	r3
	}
		
		currentState = stateGround;	
     424:	2200      	movs	r2, #0
     426:	4b14      	ldr	r3, [pc, #80]	; (478 <IND+0x80>)
     428:	701a      	strb	r2, [r3, #0]
}
     42a:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     42c:	4c0e      	ldr	r4, [pc, #56]	; (468 <IND+0x70>)
     42e:	4d0d      	ldr	r5, [pc, #52]	; (464 <IND+0x6c>)
     430:	8829      	ldrh	r1, [r5, #0]
     432:	004b      	lsls	r3, r1, #1
     434:	185b      	adds	r3, r3, r1
     436:	00db      	lsls	r3, r3, #3
     438:	18e3      	adds	r3, r4, r3
     43a:	5c98      	ldrb	r0, [r3, r2]
     43c:	4e0b      	ldr	r6, [pc, #44]	; (46c <IND+0x74>)
     43e:	47b0      	blx	r6
		yCharPos++;
     440:	4a07      	ldr	r2, [pc, #28]	; (460 <IND+0x68>)
     442:	8813      	ldrh	r3, [r2, #0]
     444:	3301      	adds	r3, #1
     446:	b29b      	uxth	r3, r3
     448:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     44a:	8829      	ldrh	r1, [r5, #0]
     44c:	004a      	lsls	r2, r1, #1
     44e:	1852      	adds	r2, r2, r1
     450:	00d2      	lsls	r2, r2, #3
     452:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     454:	5ce0      	ldrb	r0, [r4, r3]
     456:	47b0      	blx	r6
		blinkCursor();
     458:	4b06      	ldr	r3, [pc, #24]	; (474 <IND+0x7c>)
     45a:	4798      	blx	r3
     45c:	e7e2      	b.n	424 <IND+0x2c>
     45e:	46c0      	nop			; (mov r8, r8)
     460:	200002ee 	.word	0x200002ee
     464:	200002ec 	.word	0x200002ec
     468:	200003f4 	.word	0x200003f4
     46c:	0000358d 	.word	0x0000358d
     470:	00003805 	.word	0x00003805
     474:	000036d9 	.word	0x000036d9
     478:	200002f1 	.word	0x200002f1

0000047c <NEL>:

void NEL()
{
     47c:	b570      	push	{r4, r5, r6, lr}
	//new line, moves down one line and to the
	//first column (CR,LF) scrolls if row = 24
	
	char tempCharacter;
	
	if(yCharPos < 23)
     47e:	4b18      	ldr	r3, [pc, #96]	; (4e0 <NEL+0x64>)
     480:	881a      	ldrh	r2, [r3, #0]
     482:	2a16      	cmp	r2, #22
     484:	d915      	bls.n	4b2 <NEL+0x36>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     486:	4c17      	ldr	r4, [pc, #92]	; (4e4 <NEL+0x68>)
     488:	8821      	ldrh	r1, [r4, #0]
     48a:	004b      	lsls	r3, r1, #1
     48c:	185b      	adds	r3, r3, r1
     48e:	00db      	lsls	r3, r3, #3
     490:	4915      	ldr	r1, [pc, #84]	; (4e8 <NEL+0x6c>)
     492:	18cb      	adds	r3, r1, r3
     494:	5c98      	ldrb	r0, [r3, r2]
     496:	4d15      	ldr	r5, [pc, #84]	; (4ec <NEL+0x70>)
     498:	47a8      	blx	r5
		newLine();
     49a:	4b15      	ldr	r3, [pc, #84]	; (4f0 <NEL+0x74>)
     49c:	4798      	blx	r3
		drawChar(0x00);
     49e:	2000      	movs	r0, #0
     4a0:	47a8      	blx	r5
		xCharPos = 0;
     4a2:	2300      	movs	r3, #0
     4a4:	8023      	strh	r3, [r4, #0]
		blinkCursor();
     4a6:	4b13      	ldr	r3, [pc, #76]	; (4f4 <NEL+0x78>)
     4a8:	4798      	blx	r3
	}
		
	currentState = stateGround;
     4aa:	2200      	movs	r2, #0
     4ac:	4b12      	ldr	r3, [pc, #72]	; (4f8 <NEL+0x7c>)
     4ae:	701a      	strb	r2, [r3, #0]
}
     4b0:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4b2:	4c0d      	ldr	r4, [pc, #52]	; (4e8 <NEL+0x6c>)
     4b4:	4d0b      	ldr	r5, [pc, #44]	; (4e4 <NEL+0x68>)
     4b6:	8829      	ldrh	r1, [r5, #0]
     4b8:	004b      	lsls	r3, r1, #1
     4ba:	185b      	adds	r3, r3, r1
     4bc:	00db      	lsls	r3, r3, #3
     4be:	18e3      	adds	r3, r4, r3
     4c0:	5c98      	ldrb	r0, [r3, r2]
     4c2:	4e0a      	ldr	r6, [pc, #40]	; (4ec <NEL+0x70>)
     4c4:	47b0      	blx	r6
		yCharPos++;
     4c6:	4a06      	ldr	r2, [pc, #24]	; (4e0 <NEL+0x64>)
     4c8:	8813      	ldrh	r3, [r2, #0]
     4ca:	3301      	adds	r3, #1
     4cc:	b29b      	uxth	r3, r3
     4ce:	8013      	strh	r3, [r2, #0]
		xCharPos = 0;
     4d0:	2200      	movs	r2, #0
     4d2:	802a      	strh	r2, [r5, #0]
		drawChar(tempCharacter);
     4d4:	5ce0      	ldrb	r0, [r4, r3]
     4d6:	47b0      	blx	r6
		blinkCursor();
     4d8:	4b06      	ldr	r3, [pc, #24]	; (4f4 <NEL+0x78>)
     4da:	4798      	blx	r3
     4dc:	e7e5      	b.n	4aa <NEL+0x2e>
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	200002ee 	.word	0x200002ee
     4e4:	200002ec 	.word	0x200002ec
     4e8:	200003f4 	.word	0x200003f4
     4ec:	0000358d 	.word	0x0000358d
     4f0:	00003805 	.word	0x00003805
     4f4:	000036d9 	.word	0x000036d9
     4f8:	200002f1 	.word	0x200002f1

000004fc <RI>:

void RI()
{
     4fc:	b570      	push	{r4, r5, r6, lr}
	//Reverse Index
	//Moves the cursor to the same horizontal position on the preceding line
	
	char tempCharacter;
	
	if(yCharPos == 0)
     4fe:	4b10      	ldr	r3, [pc, #64]	; (540 <RI+0x44>)
     500:	881a      	ldrh	r2, [r3, #0]
     502:	2a00      	cmp	r2, #0
     504:	d103      	bne.n	50e <RI+0x12>
		yCharPos--;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
		blinkCursor();
	}
	currentState = stateGround;
     506:	2200      	movs	r2, #0
     508:	4b0e      	ldr	r3, [pc, #56]	; (544 <RI+0x48>)
     50a:	701a      	strb	r2, [r3, #0]
}
     50c:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     50e:	4c0e      	ldr	r4, [pc, #56]	; (548 <RI+0x4c>)
     510:	4d0e      	ldr	r5, [pc, #56]	; (54c <RI+0x50>)
     512:	8829      	ldrh	r1, [r5, #0]
     514:	004b      	lsls	r3, r1, #1
     516:	185b      	adds	r3, r3, r1
     518:	00db      	lsls	r3, r3, #3
     51a:	18e3      	adds	r3, r4, r3
     51c:	5c98      	ldrb	r0, [r3, r2]
     51e:	4e0c      	ldr	r6, [pc, #48]	; (550 <RI+0x54>)
     520:	47b0      	blx	r6
		yCharPos--;
     522:	4a07      	ldr	r2, [pc, #28]	; (540 <RI+0x44>)
     524:	8813      	ldrh	r3, [r2, #0]
     526:	3b01      	subs	r3, #1
     528:	b29b      	uxth	r3, r3
     52a:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     52c:	8829      	ldrh	r1, [r5, #0]
     52e:	004a      	lsls	r2, r1, #1
     530:	1852      	adds	r2, r2, r1
     532:	00d2      	lsls	r2, r2, #3
     534:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     536:	5ce0      	ldrb	r0, [r4, r3]
     538:	47b0      	blx	r6
		blinkCursor();
     53a:	4b06      	ldr	r3, [pc, #24]	; (554 <RI+0x58>)
     53c:	4798      	blx	r3
     53e:	e7e2      	b.n	506 <RI+0xa>
     540:	200002ee 	.word	0x200002ee
     544:	200002f1 	.word	0x200002f1
     548:	200003f4 	.word	0x200003f4
     54c:	200002ec 	.word	0x200002ec
     550:	0000358d 	.word	0x0000358d
     554:	000036d9 	.word	0x000036d9

00000558 <RIS>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     558:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     55c:	4a03      	ldr	r2, [pc, #12]	; (56c <RIS+0x14>)
     55e:	4b04      	ldr	r3, [pc, #16]	; (570 <RIS+0x18>)
     560:	60da      	str	r2, [r3, #12]
     562:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     566:	46c0      	nop			; (mov r8, r8)
     568:	e7fd      	b.n	566 <RIS+0xe>
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	05fa0004 	.word	0x05fa0004
     570:	e000ed00 	.word	0xe000ed00

00000574 <escState>:
{
     574:	b510      	push	{r4, lr}
	if(character == 0x37)		//ESC + 7 - (DECSC) -
     576:	2837      	cmp	r0, #55	; 0x37
     578:	d021      	beq.n	5be <escState+0x4a>
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     57a:	2838      	cmp	r0, #56	; 0x38
     57c:	d022      	beq.n	5c4 <escState+0x50>
	else if(character == 0x44)		//ESC + D - (IND) - 
     57e:	2844      	cmp	r0, #68	; 0x44
     580:	d023      	beq.n	5ca <escState+0x56>
	else if(character == 0x45)		//ESC + E - (NEL) -
     582:	2845      	cmp	r0, #69	; 0x45
     584:	d024      	beq.n	5d0 <escState+0x5c>
	else if(character == 0x48)		//ESC + H - (HTS) - 
     586:	2848      	cmp	r0, #72	; 0x48
     588:	d025      	beq.n	5d6 <escState+0x62>
	else if(character == 0x4D)		//ESC + M - (RI)
     58a:	284d      	cmp	r0, #77	; 0x4d
     58c:	d027      	beq.n	5de <escState+0x6a>
	else if(character == 0x59)		//ESC + Z (DECID)
     58e:	2859      	cmp	r0, #89	; 0x59
     590:	d028      	beq.n	5e4 <escState+0x70>
	else if(character == 0x63)		//ESC + c - (RIS)
     592:	2863      	cmp	r0, #99	; 0x63
     594:	d02e      	beq.n	5f4 <escState+0x80>
	else if(character == 0x3E)		//ESC >
     596:	283e      	cmp	r0, #62	; 0x3e
     598:	d02e      	beq.n	5f8 <escState+0x84>
	else if(character == 0x3D)		//ESC =
     59a:	283d      	cmp	r0, #61	; 0x3d
     59c:	d030      	beq.n	600 <escState+0x8c>
	else if(character == 0x5D)		//ESC ]
     59e:	285d      	cmp	r0, #93	; 0x5d
     5a0:	d032      	beq.n	608 <escState+0x94>
	else if(character == 0x23 || character == 0x25 || character == 0x28 ||
     5a2:	22fd      	movs	r2, #253	; 0xfd
     5a4:	0003      	movs	r3, r0
     5a6:	3b23      	subs	r3, #35	; 0x23
     5a8:	4213      	tst	r3, r2
     5aa:	d031      	beq.n	610 <escState+0x9c>
     5ac:	3b05      	subs	r3, #5
     5ae:	2b01      	cmp	r3, #1
     5b0:	d92e      	bls.n	610 <escState+0x9c>
	else if(character == 0x5B)
     5b2:	285b      	cmp	r0, #91	; 0x5b
     5b4:	d032      	beq.n	61c <escState+0xa8>
		currentState = stateGround;
     5b6:	2200      	movs	r2, #0
     5b8:	4b1a      	ldr	r3, [pc, #104]	; (624 <escState+0xb0>)
     5ba:	701a      	strb	r2, [r3, #0]
}
     5bc:	e02d      	b.n	61a <escState+0xa6>
		SC();
     5be:	4b1a      	ldr	r3, [pc, #104]	; (628 <escState+0xb4>)
     5c0:	4798      	blx	r3
     5c2:	e02a      	b.n	61a <escState+0xa6>
		RC();
     5c4:	4b19      	ldr	r3, [pc, #100]	; (62c <escState+0xb8>)
     5c6:	4798      	blx	r3
     5c8:	e027      	b.n	61a <escState+0xa6>
		IND();			
     5ca:	4b19      	ldr	r3, [pc, #100]	; (630 <escState+0xbc>)
     5cc:	4798      	blx	r3
     5ce:	e024      	b.n	61a <escState+0xa6>
		NEL();
     5d0:	4b18      	ldr	r3, [pc, #96]	; (634 <escState+0xc0>)
     5d2:	4798      	blx	r3
     5d4:	e021      	b.n	61a <escState+0xa6>
}

void HTS()
{
	//set tab stop at current column, unsupported now
	currentState = stateGround;
     5d6:	2200      	movs	r2, #0
     5d8:	4b12      	ldr	r3, [pc, #72]	; (624 <escState+0xb0>)
     5da:	701a      	strb	r2, [r3, #0]
     5dc:	e01d      	b.n	61a <escState+0xa6>
		RI();
     5de:	4b16      	ldr	r3, [pc, #88]	; (638 <escState+0xc4>)
     5e0:	4798      	blx	r3
     5e2:	e01a      	b.n	61a <escState+0xa6>
		printf("%s",DECIDreturn);
     5e4:	4915      	ldr	r1, [pc, #84]	; (63c <escState+0xc8>)
     5e6:	4816      	ldr	r0, [pc, #88]	; (640 <escState+0xcc>)
     5e8:	4b16      	ldr	r3, [pc, #88]	; (644 <escState+0xd0>)
     5ea:	4798      	blx	r3
		currentState = stateGround;
     5ec:	2200      	movs	r2, #0
     5ee:	4b0d      	ldr	r3, [pc, #52]	; (624 <escState+0xb0>)
     5f0:	701a      	strb	r2, [r3, #0]
     5f2:	e012      	b.n	61a <escState+0xa6>
		RIS();
     5f4:	4b14      	ldr	r3, [pc, #80]	; (648 <escState+0xd4>)
     5f6:	4798      	blx	r3
		currentState = stateGround;
     5f8:	2200      	movs	r2, #0
     5fa:	4b0a      	ldr	r3, [pc, #40]	; (624 <escState+0xb0>)
     5fc:	701a      	strb	r2, [r3, #0]
     5fe:	e00c      	b.n	61a <escState+0xa6>
		currentState = stateGround;
     600:	2200      	movs	r2, #0
     602:	4b08      	ldr	r3, [pc, #32]	; (624 <escState+0xb0>)
     604:	701a      	strb	r2, [r3, #0]
     606:	e008      	b.n	61a <escState+0xa6>
		currentState = stateGround;
     608:	2200      	movs	r2, #0
     60a:	4b06      	ldr	r3, [pc, #24]	; (624 <escState+0xb0>)
     60c:	701a      	strb	r2, [r3, #0]
     60e:	e004      	b.n	61a <escState+0xa6>
		stateEnterBuffer = character;
     610:	4b0e      	ldr	r3, [pc, #56]	; (64c <escState+0xd8>)
     612:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     614:	2202      	movs	r2, #2
     616:	4b03      	ldr	r3, [pc, #12]	; (624 <escState+0xb0>)
     618:	701a      	strb	r2, [r3, #0]
}
     61a:	bd10      	pop	{r4, pc}
		currentState = stateCSIentry;
     61c:	2203      	movs	r2, #3
     61e:	4b01      	ldr	r3, [pc, #4]	; (624 <escState+0xb0>)
     620:	701a      	strb	r2, [r3, #0]
     622:	e7fa      	b.n	61a <escState+0xa6>
     624:	200002f1 	.word	0x200002f1
     628:	0000036d 	.word	0x0000036d
     62c:	00000399 	.word	0x00000399
     630:	000003f9 	.word	0x000003f9
     634:	0000047d 	.word	0x0000047d
     638:	000004fd 	.word	0x000004fd
     63c:	0000609c 	.word	0x0000609c
     640:	000060d0 	.word	0x000060d0
     644:	00004df5 	.word	0x00004df5
     648:	00000559 	.word	0x00000559
     64c:	20000376 	.word	0x20000376

00000650 <CUU>:

/************************************************************************/
/*    CSI mnemonic functions                                            */
/************************************************************************/
void CUU() // Cursor Up
{
     650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     652:	4b20      	ldr	r3, [pc, #128]	; (6d4 <CUU+0x84>)
     654:	4798      	blx	r3
	{
		parameter = 1;
     656:	2401      	movs	r4, #1
	if(isEmptyParam())
     658:	2800      	cmp	r0, #0
     65a:	d01d      	beq.n	698 <CUU+0x48>
		{
			parameter = 1;
		}
	}
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     65c:	4b1e      	ldr	r3, [pc, #120]	; (6d8 <CUU+0x88>)
     65e:	881a      	ldrh	r2, [r3, #0]
     660:	1b13      	subs	r3, r2, r4
     662:	2b18      	cmp	r3, #24
     664:	d91e      	bls.n	6a4 <CUU+0x54>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     666:	4c1d      	ldr	r4, [pc, #116]	; (6dc <CUU+0x8c>)
     668:	4e1d      	ldr	r6, [pc, #116]	; (6e0 <CUU+0x90>)
     66a:	8831      	ldrh	r1, [r6, #0]
     66c:	004b      	lsls	r3, r1, #1
     66e:	185b      	adds	r3, r3, r1
     670:	00db      	lsls	r3, r3, #3
     672:	18e3      	adds	r3, r4, r3
     674:	5c98      	ldrb	r0, [r3, r2]
     676:	4d1b      	ldr	r5, [pc, #108]	; (6e4 <CUU+0x94>)
     678:	47a8      	blx	r5
		yCharPos = 0;
     67a:	2200      	movs	r2, #0
     67c:	4b16      	ldr	r3, [pc, #88]	; (6d8 <CUU+0x88>)
     67e:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     680:	8832      	ldrh	r2, [r6, #0]
     682:	0053      	lsls	r3, r2, #1
     684:	189b      	adds	r3, r3, r2
     686:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     688:	5d18      	ldrb	r0, [r3, r4]
     68a:	47a8      	blx	r5
	}
	
	blinkCursor();
     68c:	4b16      	ldr	r3, [pc, #88]	; (6e8 <CUU+0x98>)
     68e:	4798      	blx	r3
	currentState = stateGround;
     690:	2200      	movs	r2, #0
     692:	4b16      	ldr	r3, [pc, #88]	; (6ec <CUU+0x9c>)
     694:	701a      	strb	r2, [r3, #0]
}
     696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     698:	4b15      	ldr	r3, [pc, #84]	; (6f0 <CUU+0xa0>)
     69a:	4798      	blx	r3
     69c:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     69e:	d1dd      	bne.n	65c <CUU+0xc>
			parameter = 1;
     6a0:	3401      	adds	r4, #1
     6a2:	e7db      	b.n	65c <CUU+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     6a4:	4d0d      	ldr	r5, [pc, #52]	; (6dc <CUU+0x8c>)
     6a6:	4e0e      	ldr	r6, [pc, #56]	; (6e0 <CUU+0x90>)
     6a8:	8831      	ldrh	r1, [r6, #0]
     6aa:	004b      	lsls	r3, r1, #1
     6ac:	185b      	adds	r3, r3, r1
     6ae:	00db      	lsls	r3, r3, #3
     6b0:	18eb      	adds	r3, r5, r3
     6b2:	5c98      	ldrb	r0, [r3, r2]
     6b4:	4f0b      	ldr	r7, [pc, #44]	; (6e4 <CUU+0x94>)
     6b6:	47b8      	blx	r7
		yCharPos = yCharPos - parameter;
     6b8:	4b07      	ldr	r3, [pc, #28]	; (6d8 <CUU+0x88>)
     6ba:	8818      	ldrh	r0, [r3, #0]
     6bc:	1b04      	subs	r4, r0, r4
     6be:	b2a4      	uxth	r4, r4
     6c0:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     6c2:	8832      	ldrh	r2, [r6, #0]
     6c4:	0053      	lsls	r3, r2, #1
     6c6:	189b      	adds	r3, r3, r2
     6c8:	00db      	lsls	r3, r3, #3
     6ca:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     6cc:	5d28      	ldrb	r0, [r5, r4]
     6ce:	47b8      	blx	r7
     6d0:	e7dc      	b.n	68c <CUU+0x3c>
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	00000241 	.word	0x00000241
     6d8:	200002ee 	.word	0x200002ee
     6dc:	200003f4 	.word	0x200003f4
     6e0:	200002ec 	.word	0x200002ec
     6e4:	0000358d 	.word	0x0000358d
     6e8:	000036d9 	.word	0x000036d9
     6ec:	200002f1 	.word	0x200002f1
     6f0:	00000255 	.word	0x00000255

000006f4 <CUD>:

void CUD() //Cursor Down
{
     6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     6f6:	4b20      	ldr	r3, [pc, #128]	; (778 <CUD+0x84>)
     6f8:	4798      	blx	r3
	{
		parameter = 1;
     6fa:	2401      	movs	r4, #1
	if(isEmptyParam())
     6fc:	2800      	cmp	r0, #0
     6fe:	d01e      	beq.n	73e <CUD+0x4a>
		if(parameter == 0)
		{
			parameter = 1;
		}
	}
	if((yCharPos + parameter) <= 23)
     700:	4b1e      	ldr	r3, [pc, #120]	; (77c <CUD+0x88>)
     702:	881a      	ldrh	r2, [r3, #0]
     704:	18a3      	adds	r3, r4, r2
     706:	2b17      	cmp	r3, #23
     708:	dd1f      	ble.n	74a <CUD+0x56>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     70a:	4c1d      	ldr	r4, [pc, #116]	; (780 <CUD+0x8c>)
     70c:	4e1d      	ldr	r6, [pc, #116]	; (784 <CUD+0x90>)
     70e:	8831      	ldrh	r1, [r6, #0]
     710:	004b      	lsls	r3, r1, #1
     712:	185b      	adds	r3, r3, r1
     714:	00db      	lsls	r3, r3, #3
     716:	18e3      	adds	r3, r4, r3
     718:	5c98      	ldrb	r0, [r3, r2]
     71a:	4d1b      	ldr	r5, [pc, #108]	; (788 <CUD+0x94>)
     71c:	47a8      	blx	r5
		yCharPos = 23;
     71e:	2217      	movs	r2, #23
     720:	4b16      	ldr	r3, [pc, #88]	; (77c <CUD+0x88>)
     722:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     724:	8832      	ldrh	r2, [r6, #0]
     726:	0053      	lsls	r3, r2, #1
     728:	189b      	adds	r3, r3, r2
     72a:	00db      	lsls	r3, r3, #3
     72c:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     72e:	7dd8      	ldrb	r0, [r3, #23]
     730:	47a8      	blx	r5
	}

	blinkCursor();
     732:	4b16      	ldr	r3, [pc, #88]	; (78c <CUD+0x98>)
     734:	4798      	blx	r3
	currentState = stateGround;
     736:	2200      	movs	r2, #0
     738:	4b15      	ldr	r3, [pc, #84]	; (790 <CUD+0x9c>)
     73a:	701a      	strb	r2, [r3, #0]
}
     73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     73e:	4b15      	ldr	r3, [pc, #84]	; (794 <CUD+0xa0>)
     740:	4798      	blx	r3
     742:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     744:	d1dc      	bne.n	700 <CUD+0xc>
			parameter = 1;
     746:	3401      	adds	r4, #1
     748:	e7da      	b.n	700 <CUD+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     74a:	4d0d      	ldr	r5, [pc, #52]	; (780 <CUD+0x8c>)
     74c:	4e0d      	ldr	r6, [pc, #52]	; (784 <CUD+0x90>)
     74e:	8831      	ldrh	r1, [r6, #0]
     750:	004b      	lsls	r3, r1, #1
     752:	185b      	adds	r3, r3, r1
     754:	00db      	lsls	r3, r3, #3
     756:	18eb      	adds	r3, r5, r3
     758:	5c98      	ldrb	r0, [r3, r2]
     75a:	4f0b      	ldr	r7, [pc, #44]	; (788 <CUD+0x94>)
     75c:	47b8      	blx	r7
		yCharPos = yCharPos + parameter;
     75e:	4b07      	ldr	r3, [pc, #28]	; (77c <CUD+0x88>)
     760:	8818      	ldrh	r0, [r3, #0]
     762:	1904      	adds	r4, r0, r4
     764:	b2a4      	uxth	r4, r4
     766:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     768:	8832      	ldrh	r2, [r6, #0]
     76a:	0053      	lsls	r3, r2, #1
     76c:	189b      	adds	r3, r3, r2
     76e:	00db      	lsls	r3, r3, #3
     770:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     772:	5d28      	ldrb	r0, [r5, r4]
     774:	47b8      	blx	r7
     776:	e7dc      	b.n	732 <CUD+0x3e>
     778:	00000241 	.word	0x00000241
     77c:	200002ee 	.word	0x200002ee
     780:	200003f4 	.word	0x200003f4
     784:	200002ec 	.word	0x200002ec
     788:	0000358d 	.word	0x0000358d
     78c:	000036d9 	.word	0x000036d9
     790:	200002f1 	.word	0x200002f1
     794:	00000255 	.word	0x00000255

00000798 <CUF>:

void CUF() //Cursor Forward
{
     798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     79a:	4b21      	ldr	r3, [pc, #132]	; (820 <CUF+0x88>)
     79c:	4798      	blx	r3
	{
		parameter = 1;
     79e:	2401      	movs	r4, #1
	if(isEmptyParam())
     7a0:	2800      	cmp	r0, #0
     7a2:	d01f      	beq.n	7e4 <CUF+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos + parameter <= 79)
     7a4:	4b1f      	ldr	r3, [pc, #124]	; (824 <CUF+0x8c>)
     7a6:	881a      	ldrh	r2, [r3, #0]
     7a8:	18a3      	adds	r3, r4, r2
     7aa:	2b4f      	cmp	r3, #79	; 0x4f
     7ac:	dd20      	ble.n	7f0 <CUF+0x58>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7ae:	4c1e      	ldr	r4, [pc, #120]	; (828 <CUF+0x90>)
     7b0:	4e1e      	ldr	r6, [pc, #120]	; (82c <CUF+0x94>)
     7b2:	8831      	ldrh	r1, [r6, #0]
     7b4:	0053      	lsls	r3, r2, #1
     7b6:	189b      	adds	r3, r3, r2
     7b8:	00db      	lsls	r3, r3, #3
     7ba:	18e3      	adds	r3, r4, r3
     7bc:	5c58      	ldrb	r0, [r3, r1]
     7be:	4d1c      	ldr	r5, [pc, #112]	; (830 <CUF+0x98>)
     7c0:	47a8      	blx	r5
		xCharPos = 79;
     7c2:	224f      	movs	r2, #79	; 0x4f
     7c4:	4b17      	ldr	r3, [pc, #92]	; (824 <CUF+0x8c>)
     7c6:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     7c8:	8833      	ldrh	r3, [r6, #0]
     7ca:	18e4      	adds	r4, r4, r3
     7cc:	23ed      	movs	r3, #237	; 0xed
     7ce:	00db      	lsls	r3, r3, #3
     7d0:	469c      	mov	ip, r3
     7d2:	4464      	add	r4, ip
		drawChar(tempCharacter);	
     7d4:	7820      	ldrb	r0, [r4, #0]
     7d6:	47a8      	blx	r5
	}
	blinkCursor();
     7d8:	4b16      	ldr	r3, [pc, #88]	; (834 <CUF+0x9c>)
     7da:	4798      	blx	r3
	currentState = stateGround;
     7dc:	2200      	movs	r2, #0
     7de:	4b16      	ldr	r3, [pc, #88]	; (838 <CUF+0xa0>)
     7e0:	701a      	strb	r2, [r3, #0]
}
     7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     7e4:	4b15      	ldr	r3, [pc, #84]	; (83c <CUF+0xa4>)
     7e6:	4798      	blx	r3
     7e8:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     7ea:	d1db      	bne.n	7a4 <CUF+0xc>
			parameter = 1;
     7ec:	3401      	adds	r4, #1
     7ee:	e7d9      	b.n	7a4 <CUF+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7f0:	4d0d      	ldr	r5, [pc, #52]	; (828 <CUF+0x90>)
     7f2:	4e0e      	ldr	r6, [pc, #56]	; (82c <CUF+0x94>)
     7f4:	8831      	ldrh	r1, [r6, #0]
     7f6:	0053      	lsls	r3, r2, #1
     7f8:	189b      	adds	r3, r3, r2
     7fa:	00db      	lsls	r3, r3, #3
     7fc:	18eb      	adds	r3, r5, r3
     7fe:	5c58      	ldrb	r0, [r3, r1]
     800:	4f0b      	ldr	r7, [pc, #44]	; (830 <CUF+0x98>)
     802:	47b8      	blx	r7
		xCharPos = xCharPos + parameter;
     804:	4b07      	ldr	r3, [pc, #28]	; (824 <CUF+0x8c>)
     806:	8818      	ldrh	r0, [r3, #0]
     808:	1904      	adds	r4, r0, r4
     80a:	b2a4      	uxth	r4, r4
     80c:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     80e:	8833      	ldrh	r3, [r6, #0]
     810:	0060      	lsls	r0, r4, #1
     812:	1904      	adds	r4, r0, r4
     814:	00e4      	lsls	r4, r4, #3
     816:	192c      	adds	r4, r5, r4
		drawChar(tempCharacter);
     818:	5ce0      	ldrb	r0, [r4, r3]
     81a:	47b8      	blx	r7
     81c:	e7dc      	b.n	7d8 <CUF+0x40>
     81e:	46c0      	nop			; (mov r8, r8)
     820:	00000241 	.word	0x00000241
     824:	200002ec 	.word	0x200002ec
     828:	200003f4 	.word	0x200003f4
     82c:	200002ee 	.word	0x200002ee
     830:	0000358d 	.word	0x0000358d
     834:	000036d9 	.word	0x000036d9
     838:	200002f1 	.word	0x200002f1
     83c:	00000255 	.word	0x00000255

00000840 <CUB>:

void CUB() //Cursor Backward
{
     840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     842:	4b1e      	ldr	r3, [pc, #120]	; (8bc <CUB+0x7c>)
     844:	4798      	blx	r3
	{
		parameter = 1;
     846:	2601      	movs	r6, #1
	if(isEmptyParam())
     848:	2800      	cmp	r0, #0
     84a:	d01f      	beq.n	88c <CUB+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos - parameter >= 0)
     84c:	4b1c      	ldr	r3, [pc, #112]	; (8c0 <CUB+0x80>)
     84e:	881a      	ldrh	r2, [r3, #0]
     850:	1b93      	subs	r3, r2, r6
     852:	d421      	bmi.n	898 <CUB+0x58>
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     854:	4c1b      	ldr	r4, [pc, #108]	; (8c4 <CUB+0x84>)
     856:	4d1c      	ldr	r5, [pc, #112]	; (8c8 <CUB+0x88>)
     858:	8829      	ldrh	r1, [r5, #0]
     85a:	0053      	lsls	r3, r2, #1
     85c:	189b      	adds	r3, r3, r2
     85e:	00db      	lsls	r3, r3, #3
     860:	18e3      	adds	r3, r4, r3
     862:	5c58      	ldrb	r0, [r3, r1]
     864:	4f19      	ldr	r7, [pc, #100]	; (8cc <CUB+0x8c>)
     866:	47b8      	blx	r7
		xCharPos = xCharPos - parameter;
     868:	4b15      	ldr	r3, [pc, #84]	; (8c0 <CUB+0x80>)
     86a:	8818      	ldrh	r0, [r3, #0]
     86c:	1b80      	subs	r0, r0, r6
     86e:	b280      	uxth	r0, r0
     870:	8018      	strh	r0, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     872:	882a      	ldrh	r2, [r5, #0]
     874:	0043      	lsls	r3, r0, #1
     876:	1818      	adds	r0, r3, r0
     878:	00c0      	lsls	r0, r0, #3
     87a:	1820      	adds	r0, r4, r0
		drawChar(tempCharacter);
     87c:	5c80      	ldrb	r0, [r0, r2]
     87e:	47b8      	blx	r7
		drawChar(consoleDisplay[xCharPos][yCharPos]);
		xCharPos = 0;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	blinkCursor();
     880:	4b13      	ldr	r3, [pc, #76]	; (8d0 <CUB+0x90>)
     882:	4798      	blx	r3
	currentState = stateGround;
     884:	2200      	movs	r2, #0
     886:	4b13      	ldr	r3, [pc, #76]	; (8d4 <CUB+0x94>)
     888:	701a      	strb	r2, [r3, #0]
}
     88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     88c:	4b12      	ldr	r3, [pc, #72]	; (8d8 <CUB+0x98>)
     88e:	4798      	blx	r3
     890:	1e06      	subs	r6, r0, #0
		if(parameter == 0)
     892:	d1db      	bne.n	84c <CUB+0xc>
			parameter = 1;
     894:	3601      	adds	r6, #1
     896:	e7d9      	b.n	84c <CUB+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     898:	4d0a      	ldr	r5, [pc, #40]	; (8c4 <CUB+0x84>)
     89a:	4e0b      	ldr	r6, [pc, #44]	; (8c8 <CUB+0x88>)
     89c:	8831      	ldrh	r1, [r6, #0]
     89e:	0053      	lsls	r3, r2, #1
     8a0:	189b      	adds	r3, r3, r2
     8a2:	00db      	lsls	r3, r3, #3
     8a4:	18eb      	adds	r3, r5, r3
     8a6:	5c58      	ldrb	r0, [r3, r1]
     8a8:	4c08      	ldr	r4, [pc, #32]	; (8cc <CUB+0x8c>)
     8aa:	47a0      	blx	r4
		xCharPos = 0;
     8ac:	2200      	movs	r2, #0
     8ae:	4b04      	ldr	r3, [pc, #16]	; (8c0 <CUB+0x80>)
     8b0:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8b2:	8833      	ldrh	r3, [r6, #0]
		drawChar(tempCharacter);
     8b4:	5ce8      	ldrb	r0, [r5, r3]
     8b6:	47a0      	blx	r4
     8b8:	e7e2      	b.n	880 <CUB+0x40>
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	00000241 	.word	0x00000241
     8c0:	200002ec 	.word	0x200002ec
     8c4:	200003f4 	.word	0x200003f4
     8c8:	200002ee 	.word	0x200002ee
     8cc:	0000358d 	.word	0x0000358d
     8d0:	000036d9 	.word	0x000036d9
     8d4:	200002f1 	.word	0x200002f1
     8d8:	00000255 	.word	0x00000255

000008dc <CNL>:

void CNL() //Cursor Next Line
{
     8dc:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     8de:	4b1d      	ldr	r3, [pc, #116]	; (954 <CNL+0x78>)
     8e0:	4798      	blx	r3
	{
		parameter = 1;
     8e2:	2401      	movs	r4, #1
	if(isEmptyParam())
     8e4:	2800      	cmp	r0, #0
     8e6:	d01c      	beq.n	922 <CNL+0x46>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     8e8:	2200      	movs	r2, #0
     8ea:	4b1b      	ldr	r3, [pc, #108]	; (958 <CNL+0x7c>)
     8ec:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos + parameter) <= 23)
     8ee:	4b1b      	ldr	r3, [pc, #108]	; (95c <CNL+0x80>)
     8f0:	881b      	ldrh	r3, [r3, #0]
     8f2:	18e2      	adds	r2, r4, r3
     8f4:	2a17      	cmp	r2, #23
     8f6:	dd1a      	ble.n	92e <CNL+0x52>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     8f8:	4c19      	ldr	r4, [pc, #100]	; (960 <CNL+0x84>)
     8fa:	5ce0      	ldrb	r0, [r4, r3]
     8fc:	4d19      	ldr	r5, [pc, #100]	; (964 <CNL+0x88>)
     8fe:	47a8      	blx	r5
		yCharPos = 23;
     900:	2217      	movs	r2, #23
     902:	4b16      	ldr	r3, [pc, #88]	; (95c <CNL+0x80>)
     904:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     906:	4b14      	ldr	r3, [pc, #80]	; (958 <CNL+0x7c>)
     908:	881a      	ldrh	r2, [r3, #0]
     90a:	0053      	lsls	r3, r2, #1
     90c:	189b      	adds	r3, r3, r2
     90e:	00db      	lsls	r3, r3, #3
     910:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     912:	7dd8      	ldrb	r0, [r3, #23]
     914:	47a8      	blx	r5
	}

	blinkCursor();
     916:	4b14      	ldr	r3, [pc, #80]	; (968 <CNL+0x8c>)
     918:	4798      	blx	r3
	currentState = stateGround;	
     91a:	2200      	movs	r2, #0
     91c:	4b13      	ldr	r3, [pc, #76]	; (96c <CNL+0x90>)
     91e:	701a      	strb	r2, [r3, #0]
}
     920:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     922:	4b13      	ldr	r3, [pc, #76]	; (970 <CNL+0x94>)
     924:	4798      	blx	r3
     926:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     928:	d1de      	bne.n	8e8 <CNL+0xc>
			parameter = 1;
     92a:	3401      	adds	r4, #1
     92c:	e7dc      	b.n	8e8 <CNL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     92e:	4d0c      	ldr	r5, [pc, #48]	; (960 <CNL+0x84>)
     930:	5ce8      	ldrb	r0, [r5, r3]
     932:	4e0c      	ldr	r6, [pc, #48]	; (964 <CNL+0x88>)
     934:	47b0      	blx	r6
		yCharPos = yCharPos + parameter;
     936:	4b09      	ldr	r3, [pc, #36]	; (95c <CNL+0x80>)
     938:	8818      	ldrh	r0, [r3, #0]
     93a:	1904      	adds	r4, r0, r4
     93c:	b2a4      	uxth	r4, r4
     93e:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <CNL+0x7c>)
     942:	881a      	ldrh	r2, [r3, #0]
     944:	0053      	lsls	r3, r2, #1
     946:	189b      	adds	r3, r3, r2
     948:	00db      	lsls	r3, r3, #3
     94a:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     94c:	5d18      	ldrb	r0, [r3, r4]
     94e:	47b0      	blx	r6
     950:	e7e1      	b.n	916 <CNL+0x3a>
     952:	46c0      	nop			; (mov r8, r8)
     954:	00000241 	.word	0x00000241
     958:	200002ec 	.word	0x200002ec
     95c:	200002ee 	.word	0x200002ee
     960:	200003f4 	.word	0x200003f4
     964:	0000358d 	.word	0x0000358d
     968:	000036d9 	.word	0x000036d9
     96c:	200002f1 	.word	0x200002f1
     970:	00000255 	.word	0x00000255

00000974 <CPL>:

void CPL() //Cursor Preceding Line
{
     974:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     976:	4b1c      	ldr	r3, [pc, #112]	; (9e8 <CPL+0x74>)
     978:	4798      	blx	r3
	{
		parameter = 1;
     97a:	2401      	movs	r4, #1
	if(isEmptyParam())
     97c:	2800      	cmp	r0, #0
     97e:	d01b      	beq.n	9b8 <CPL+0x44>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     980:	2200      	movs	r2, #0
     982:	4b1a      	ldr	r3, [pc, #104]	; (9ec <CPL+0x78>)
     984:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     986:	4b1a      	ldr	r3, [pc, #104]	; (9f0 <CPL+0x7c>)
     988:	881b      	ldrh	r3, [r3, #0]
     98a:	1b1a      	subs	r2, r3, r4
     98c:	2a18      	cmp	r2, #24
     98e:	d919      	bls.n	9c4 <CPL+0x50>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     990:	4d18      	ldr	r5, [pc, #96]	; (9f4 <CPL+0x80>)
     992:	5ce8      	ldrb	r0, [r5, r3]
     994:	4c18      	ldr	r4, [pc, #96]	; (9f8 <CPL+0x84>)
     996:	47a0      	blx	r4
		yCharPos = 0;
     998:	2200      	movs	r2, #0
     99a:	4b15      	ldr	r3, [pc, #84]	; (9f0 <CPL+0x7c>)
     99c:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     99e:	4b13      	ldr	r3, [pc, #76]	; (9ec <CPL+0x78>)
     9a0:	881a      	ldrh	r2, [r3, #0]
     9a2:	0053      	lsls	r3, r2, #1
     9a4:	189b      	adds	r3, r3, r2
     9a6:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     9a8:	5d58      	ldrb	r0, [r3, r5]
     9aa:	47a0      	blx	r4
	}
	
	blinkCursor();
     9ac:	4b13      	ldr	r3, [pc, #76]	; (9fc <CPL+0x88>)
     9ae:	4798      	blx	r3
	currentState = stateGround;
     9b0:	2200      	movs	r2, #0
     9b2:	4b13      	ldr	r3, [pc, #76]	; (a00 <CPL+0x8c>)
     9b4:	701a      	strb	r2, [r3, #0]
	
}
     9b6:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     9b8:	4b12      	ldr	r3, [pc, #72]	; (a04 <CPL+0x90>)
     9ba:	4798      	blx	r3
     9bc:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     9be:	d1df      	bne.n	980 <CPL+0xc>
			parameter = 1;
     9c0:	3401      	adds	r4, #1
     9c2:	e7dd      	b.n	980 <CPL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     9c4:	4d0b      	ldr	r5, [pc, #44]	; (9f4 <CPL+0x80>)
     9c6:	5ce8      	ldrb	r0, [r5, r3]
     9c8:	4e0b      	ldr	r6, [pc, #44]	; (9f8 <CPL+0x84>)
     9ca:	47b0      	blx	r6
		yCharPos = yCharPos - parameter;
     9cc:	4b08      	ldr	r3, [pc, #32]	; (9f0 <CPL+0x7c>)
     9ce:	8818      	ldrh	r0, [r3, #0]
     9d0:	1b04      	subs	r4, r0, r4
     9d2:	b2a4      	uxth	r4, r4
     9d4:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     9d6:	4b05      	ldr	r3, [pc, #20]	; (9ec <CPL+0x78>)
     9d8:	881a      	ldrh	r2, [r3, #0]
     9da:	0053      	lsls	r3, r2, #1
     9dc:	189b      	adds	r3, r3, r2
     9de:	00db      	lsls	r3, r3, #3
     9e0:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     9e2:	5d18      	ldrb	r0, [r3, r4]
     9e4:	47b0      	blx	r6
     9e6:	e7e1      	b.n	9ac <CPL+0x38>
     9e8:	00000241 	.word	0x00000241
     9ec:	200002ec 	.word	0x200002ec
     9f0:	200002ee 	.word	0x200002ee
     9f4:	200003f4 	.word	0x200003f4
     9f8:	0000358d 	.word	0x0000358d
     9fc:	000036d9 	.word	0x000036d9
     a00:	200002f1 	.word	0x200002f1
     a04:	00000255 	.word	0x00000255

00000a08 <CHA>:

void CHA() //Cursor Horizontal Absolute
{
     a08:	b5f0      	push	{r4, r5, r6, r7, lr}
     a0a:	46c6      	mov	lr, r8
     a0c:	b500      	push	{lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     a0e:	4b17      	ldr	r3, [pc, #92]	; (a6c <CHA+0x64>)
     a10:	4798      	blx	r3
	{
		parameter = 1;
     a12:	2501      	movs	r5, #1
	if(isEmptyParam())
     a14:	2800      	cmp	r0, #0
     a16:	d01c      	beq.n	a52 <CHA+0x4a>
		{
			parameter = 79;
		}
	}
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a18:	4c15      	ldr	r4, [pc, #84]	; (a70 <CHA+0x68>)
     a1a:	4f16      	ldr	r7, [pc, #88]	; (a74 <CHA+0x6c>)
     a1c:	883a      	ldrh	r2, [r7, #0]
     a1e:	4e16      	ldr	r6, [pc, #88]	; (a78 <CHA+0x70>)
     a20:	8831      	ldrh	r1, [r6, #0]
     a22:	0053      	lsls	r3, r2, #1
     a24:	189b      	adds	r3, r3, r2
     a26:	00db      	lsls	r3, r3, #3
     a28:	18e3      	adds	r3, r4, r3
     a2a:	5c58      	ldrb	r0, [r3, r1]
     a2c:	4b13      	ldr	r3, [pc, #76]	; (a7c <CHA+0x74>)
     a2e:	4698      	mov	r8, r3
     a30:	4798      	blx	r3
	xCharPos = parameter;
     a32:	803d      	strh	r5, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     a34:	8832      	ldrh	r2, [r6, #0]
     a36:	006b      	lsls	r3, r5, #1
     a38:	195b      	adds	r3, r3, r5
     a3a:	00db      	lsls	r3, r3, #3
     a3c:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     a3e:	5c98      	ldrb	r0, [r3, r2]
     a40:	47c0      	blx	r8
	
	blinkCursor();
     a42:	4b0f      	ldr	r3, [pc, #60]	; (a80 <CHA+0x78>)
     a44:	4798      	blx	r3
	currentState = stateGround;
     a46:	2200      	movs	r2, #0
     a48:	4b0e      	ldr	r3, [pc, #56]	; (a84 <CHA+0x7c>)
     a4a:	701a      	strb	r2, [r3, #0]
}
     a4c:	bc04      	pop	{r2}
     a4e:	4690      	mov	r8, r2
     a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     a52:	4b0d      	ldr	r3, [pc, #52]	; (a88 <CHA+0x80>)
     a54:	4798      	blx	r3
     a56:	1e02      	subs	r2, r0, #0
		if(parameter > 0)
     a58:	d001      	beq.n	a5e <CHA+0x56>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     a5a:	3801      	subs	r0, #1
     a5c:	b2c2      	uxtb	r2, r0
     a5e:	1c13      	adds	r3, r2, #0
     a60:	2a4f      	cmp	r2, #79	; 0x4f
     a62:	d900      	bls.n	a66 <CHA+0x5e>
     a64:	234f      	movs	r3, #79	; 0x4f
     a66:	b2dd      	uxtb	r5, r3
     a68:	e7d6      	b.n	a18 <CHA+0x10>
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	00000241 	.word	0x00000241
     a70:	200003f4 	.word	0x200003f4
     a74:	200002ec 	.word	0x200002ec
     a78:	200002ee 	.word	0x200002ee
     a7c:	0000358d 	.word	0x0000358d
     a80:	000036d9 	.word	0x000036d9
     a84:	200002f1 	.word	0x200002f1
     a88:	00000255 	.word	0x00000255

00000a8c <CUP>:

void CUP() //Cursor Position
{
     a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a8e:	46ce      	mov	lr, r9
     a90:	4647      	mov	r7, r8
     a92:	b580      	push	{r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	uint8_t xTemp = 0;
	uint8_t yTemp = 0;
	
	if(isEmptyParam())
     a94:	4b20      	ldr	r3, [pc, #128]	; (b18 <CUP+0x8c>)
     a96:	4798      	blx	r3
	{
		parameter = 0;
     a98:	2400      	movs	r4, #0
	if(isEmptyParam())
     a9a:	2800      	cmp	r0, #0
     a9c:	d024      	beq.n	ae8 <CUP+0x5c>
		}
	}
	
	xTemp = parameter;

	if(isEmptyParam())
     a9e:	4b1e      	ldr	r3, [pc, #120]	; (b18 <CUP+0x8c>)
     aa0:	4798      	blx	r3
	{
		parameter = 0;
     aa2:	2600      	movs	r6, #0
	if(isEmptyParam())
     aa4:	2800      	cmp	r0, #0
     aa6:	d02b      	beq.n	b00 <CUP+0x74>
		}
	}
	
	yTemp = parameter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     aa8:	4d1c      	ldr	r5, [pc, #112]	; (b1c <CUP+0x90>)
     aaa:	4b1d      	ldr	r3, [pc, #116]	; (b20 <CUP+0x94>)
     aac:	4698      	mov	r8, r3
     aae:	881a      	ldrh	r2, [r3, #0]
     ab0:	4f1c      	ldr	r7, [pc, #112]	; (b24 <CUP+0x98>)
     ab2:	8839      	ldrh	r1, [r7, #0]
     ab4:	0053      	lsls	r3, r2, #1
     ab6:	189b      	adds	r3, r3, r2
     ab8:	00db      	lsls	r3, r3, #3
     aba:	18eb      	adds	r3, r5, r3
     abc:	5c58      	ldrb	r0, [r3, r1]
     abe:	4b1a      	ldr	r3, [pc, #104]	; (b28 <CUP+0x9c>)
     ac0:	4699      	mov	r9, r3
     ac2:	4798      	blx	r3
	xCharPos = xTemp;
     ac4:	4643      	mov	r3, r8
     ac6:	801c      	strh	r4, [r3, #0]
	yCharPos = yTemp;
     ac8:	803e      	strh	r6, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     aca:	0063      	lsls	r3, r4, #1
     acc:	191c      	adds	r4, r3, r4
     ace:	00e4      	lsls	r4, r4, #3
     ad0:	192c      	adds	r4, r5, r4
	drawChar(tempCharacter);
     ad2:	5da0      	ldrb	r0, [r4, r6]
     ad4:	47c8      	blx	r9
	
	blinkCursor();
     ad6:	4b15      	ldr	r3, [pc, #84]	; (b2c <CUP+0xa0>)
     ad8:	4798      	blx	r3
	currentState = stateGround;
     ada:	2200      	movs	r2, #0
     adc:	4b14      	ldr	r3, [pc, #80]	; (b30 <CUP+0xa4>)
     ade:	701a      	strb	r2, [r3, #0]
}
     ae0:	bc0c      	pop	{r2, r3}
     ae2:	4690      	mov	r8, r2
     ae4:	4699      	mov	r9, r3
     ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     ae8:	4b12      	ldr	r3, [pc, #72]	; (b34 <CUP+0xa8>)
     aea:	4798      	blx	r3
     aec:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     aee:	d001      	beq.n	af4 <CUP+0x68>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     af0:	3801      	subs	r0, #1
     af2:	b2c3      	uxtb	r3, r0
     af4:	1c1c      	adds	r4, r3, #0
     af6:	2b4f      	cmp	r3, #79	; 0x4f
     af8:	d900      	bls.n	afc <CUP+0x70>
     afa:	244f      	movs	r4, #79	; 0x4f
     afc:	b2e4      	uxtb	r4, r4
     afe:	e7ce      	b.n	a9e <CUP+0x12>
		parameter = dequeueParam();
     b00:	4b0c      	ldr	r3, [pc, #48]	; (b34 <CUP+0xa8>)
     b02:	4798      	blx	r3
     b04:	1e03      	subs	r3, r0, #0
		if(parameter > 0)
     b06:	d001      	beq.n	b0c <CUP+0x80>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     b08:	3801      	subs	r0, #1
     b0a:	b2c3      	uxtb	r3, r0
     b0c:	1c1e      	adds	r6, r3, #0
     b0e:	2b17      	cmp	r3, #23
     b10:	d900      	bls.n	b14 <CUP+0x88>
     b12:	2617      	movs	r6, #23
     b14:	b2f6      	uxtb	r6, r6
     b16:	e7c7      	b.n	aa8 <CUP+0x1c>
     b18:	00000241 	.word	0x00000241
     b1c:	200003f4 	.word	0x200003f4
     b20:	200002ec 	.word	0x200002ec
     b24:	200002ee 	.word	0x200002ee
     b28:	0000358d 	.word	0x0000358d
     b2c:	000036d9 	.word	0x000036d9
     b30:	200002f1 	.word	0x200002f1
     b34:	00000255 	.word	0x00000255

00000b38 <ED>:
	//do this later
	currentState = stateGround;
}

void ED() //Edit In Display
{
     b38:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3a:	46de      	mov	lr, fp
     b3c:	4657      	mov	r7, sl
     b3e:	464e      	mov	r6, r9
     b40:	4645      	mov	r5, r8
     b42:	b5e0      	push	{r5, r6, r7, lr}
     b44:	b083      	sub	sp, #12
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     b46:	4b43      	ldr	r3, [pc, #268]	; (c54 <ED+0x11c>)
     b48:	881b      	ldrh	r3, [r3, #0]
     b4a:	4698      	mov	r8, r3
	uint8_t yTemp = yCharPos;
     b4c:	4b42      	ldr	r3, [pc, #264]	; (c58 <ED+0x120>)
     b4e:	881b      	ldrh	r3, [r3, #0]
     b50:	4699      	mov	r9, r3
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     b52:	2200      	movs	r2, #0
     b54:	4b41      	ldr	r3, [pc, #260]	; (c5c <ED+0x124>)
     b56:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     b58:	4b41      	ldr	r3, [pc, #260]	; (c60 <ED+0x128>)
     b5a:	4798      	blx	r3
     b5c:	2800      	cmp	r0, #0
     b5e:	d011      	beq.n	b84 <ED+0x4c>
			{
				xCharPos = i;
				drawChar(0x00);
			}
			//second step, erase previous lines
			for(int j = 0 ; j < yTemp ; j++)
     b60:	2500      	movs	r5, #0
		case 2:			//Erases entire display
			for(int j = 0 ; j < 24 ; j++)
			{
				for(int i = 0 ; i < 80 ; i++)
				{
					xCharPos = i;
     b62:	4b3c      	ldr	r3, [pc, #240]	; (c54 <ED+0x11c>)
     b64:	469a      	mov	sl, r3
					yCharPos = j;
     b66:	4f3c      	ldr	r7, [pc, #240]	; (c58 <ED+0x120>)
					drawChar(0x00);
     b68:	4e3e      	ldr	r6, [pc, #248]	; (c64 <ED+0x12c>)
			for(int j = 0 ; j < yTemp ; j++)
     b6a:	2400      	movs	r4, #0
					xCharPos = i;
     b6c:	4653      	mov	r3, sl
     b6e:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     b70:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     b72:	2000      	movs	r0, #0
     b74:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     b76:	3401      	adds	r4, #1
     b78:	2c50      	cmp	r4, #80	; 0x50
     b7a:	d1f7      	bne.n	b6c <ED+0x34>
			for(int j = 0 ; j < 24 ; j++)
     b7c:	3501      	adds	r5, #1
     b7e:	2d18      	cmp	r5, #24
     b80:	d1f3      	bne.n	b6a <ED+0x32>
     b82:	e04e      	b.n	c22 <ED+0xea>
	uint8_t xTemp = xCharPos;
     b84:	4643      	mov	r3, r8
     b86:	466a      	mov	r2, sp
     b88:	71d3      	strb	r3, [r2, #7]
     b8a:	79d4      	ldrb	r4, [r2, #7]
	uint8_t yTemp = yCharPos;
     b8c:	464b      	mov	r3, r9
     b8e:	71d3      	strb	r3, [r2, #7]
     b90:	79d3      	ldrb	r3, [r2, #7]
     b92:	469a      	mov	sl, r3
		parameter = dequeueParam();
     b94:	4b34      	ldr	r3, [pc, #208]	; (c68 <ED+0x130>)
     b96:	4798      	blx	r3
	switch(parameter)
     b98:	2801      	cmp	r0, #1
     b9a:	d004      	beq.n	ba6 <ED+0x6e>
     b9c:	2800      	cmp	r0, #0
     b9e:	d022      	beq.n	be6 <ED+0xae>
     ba0:	2802      	cmp	r0, #2
     ba2:	d13e      	bne.n	c22 <ED+0xea>
     ba4:	e7dc      	b.n	b60 <ED+0x28>
			for(int i = 0 ;  i <= xTemp ;  i++)
     ba6:	0025      	movs	r5, r4
     ba8:	2600      	movs	r6, #0
				xCharPos = i;
     baa:	4c2a      	ldr	r4, [pc, #168]	; (c54 <ED+0x11c>)
				drawChar(0x00);
     bac:	4f2d      	ldr	r7, [pc, #180]	; (c64 <ED+0x12c>)
				xCharPos = i;
     bae:	8026      	strh	r6, [r4, #0]
				drawChar(0x00);
     bb0:	2000      	movs	r0, #0
     bb2:	47b8      	blx	r7
			for(int i = 0 ;  i <= xTemp ;  i++)
     bb4:	3601      	adds	r6, #1
     bb6:	42ae      	cmp	r6, r5
     bb8:	ddf9      	ble.n	bae <ED+0x76>
			for(int j = 0 ; j < yTemp ; j++)
     bba:	46d3      	mov	fp, sl
     bbc:	2600      	movs	r6, #0
     bbe:	4653      	mov	r3, sl
     bc0:	2b00      	cmp	r3, #0
     bc2:	dd2e      	ble.n	c22 <ED+0xea>
					xCharPos = i;
     bc4:	4b23      	ldr	r3, [pc, #140]	; (c54 <ED+0x11c>)
     bc6:	469a      	mov	sl, r3
					yCharPos = j;
     bc8:	4d23      	ldr	r5, [pc, #140]	; (c58 <ED+0x120>)
					drawChar(0x00);
     bca:	4f26      	ldr	r7, [pc, #152]	; (c64 <ED+0x12c>)
			for(int i = 0 ;  i <= xTemp ;  i++)
     bcc:	2400      	movs	r4, #0
					xCharPos = i;
     bce:	4653      	mov	r3, sl
     bd0:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     bd2:	802e      	strh	r6, [r5, #0]
					drawChar(0x00);
     bd4:	2000      	movs	r0, #0
     bd6:	47b8      	blx	r7
				for(int i = 0 ; i < 80 ; i++)
     bd8:	3401      	adds	r4, #1
     bda:	2c50      	cmp	r4, #80	; 0x50
     bdc:	d1f7      	bne.n	bce <ED+0x96>
			for(int j = 0 ; j < yTemp ; j++)
     bde:	3601      	adds	r6, #1
     be0:	455e      	cmp	r6, fp
     be2:	dbf3      	blt.n	bcc <ED+0x94>
     be4:	e01d      	b.n	c22 <ED+0xea>
			for(int i = xTemp ;  i <= 78 ;  i++)
     be6:	2c4e      	cmp	r4, #78	; 0x4e
     be8:	dc07      	bgt.n	bfa <ED+0xc2>
				xCharPos = i;
     bea:	4f1a      	ldr	r7, [pc, #104]	; (c54 <ED+0x11c>)
				drawChar(0x00);
     bec:	4e1d      	ldr	r6, [pc, #116]	; (c64 <ED+0x12c>)
				xCharPos = i;
     bee:	803c      	strh	r4, [r7, #0]
				drawChar(0x00);
     bf0:	2000      	movs	r0, #0
     bf2:	47b0      	blx	r6
			for(int i = xTemp ;  i <= 78 ;  i++)
     bf4:	3401      	adds	r4, #1
     bf6:	2c4f      	cmp	r4, #79	; 0x4f
     bf8:	d1f9      	bne.n	bee <ED+0xb6>
			for(int j = yTemp+1 ; j < 24 ; j++)
     bfa:	4655      	mov	r5, sl
     bfc:	3501      	adds	r5, #1
     bfe:	2d17      	cmp	r5, #23
     c00:	dc0f      	bgt.n	c22 <ED+0xea>
					xCharPos = i;
     c02:	4b14      	ldr	r3, [pc, #80]	; (c54 <ED+0x11c>)
     c04:	469a      	mov	sl, r3
					yCharPos = j;
     c06:	4f14      	ldr	r7, [pc, #80]	; (c58 <ED+0x120>)
					drawChar(0x00);
     c08:	4e16      	ldr	r6, [pc, #88]	; (c64 <ED+0x12c>)
{
     c0a:	2400      	movs	r4, #0
					xCharPos = i;
     c0c:	4653      	mov	r3, sl
     c0e:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     c10:	803d      	strh	r5, [r7, #0]
					drawChar(0x00);
     c12:	2000      	movs	r0, #0
     c14:	47b0      	blx	r6
				for(int i = 0 ; i < 80 ; i++)
     c16:	3401      	adds	r4, #1
     c18:	2c50      	cmp	r4, #80	; 0x50
     c1a:	d1f7      	bne.n	c0c <ED+0xd4>
			for(int j = yTemp+1 ; j < 24 ; j++)
     c1c:	3501      	adds	r5, #1
     c1e:	2d18      	cmp	r5, #24
     c20:	d1f3      	bne.n	c0a <ED+0xd2>
				}
			}
		break;
	}
	
	blinkCursor();
     c22:	4b12      	ldr	r3, [pc, #72]	; (c6c <ED+0x134>)
     c24:	4798      	blx	r3
	xCharPos = xTemp;
     c26:	23ff      	movs	r3, #255	; 0xff
     c28:	4642      	mov	r2, r8
     c2a:	401a      	ands	r2, r3
     c2c:	4909      	ldr	r1, [pc, #36]	; (c54 <ED+0x11c>)
     c2e:	800a      	strh	r2, [r1, #0]
	yCharPos = yTemp;
     c30:	464a      	mov	r2, r9
     c32:	4013      	ands	r3, r2
     c34:	4a08      	ldr	r2, [pc, #32]	; (c58 <ED+0x120>)
     c36:	8013      	strh	r3, [r2, #0]
	drawChar(0x00);
     c38:	2000      	movs	r0, #0
     c3a:	4b0a      	ldr	r3, [pc, #40]	; (c64 <ED+0x12c>)
     c3c:	4798      	blx	r3
	
	currentState = stateGround;	
     c3e:	2200      	movs	r2, #0
     c40:	4b0b      	ldr	r3, [pc, #44]	; (c70 <ED+0x138>)
     c42:	701a      	strb	r2, [r3, #0]


}
     c44:	b003      	add	sp, #12
     c46:	bc3c      	pop	{r2, r3, r4, r5}
     c48:	4690      	mov	r8, r2
     c4a:	4699      	mov	r9, r3
     c4c:	46a2      	mov	sl, r4
     c4e:	46ab      	mov	fp, r5
     c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	200002ec 	.word	0x200002ec
     c58:	200002ee 	.word	0x200002ee
     c5c:	20000028 	.word	0x20000028
     c60:	00000241 	.word	0x00000241
     c64:	0000358d 	.word	0x0000358d
     c68:	00000255 	.word	0x00000255
     c6c:	000036d9 	.word	0x000036d9
     c70:	200002f1 	.word	0x200002f1

00000c74 <EL>:

void EL() //Edit In Line
{
     c74:	b5f0      	push	{r4, r5, r6, r7, lr}
     c76:	46d6      	mov	lr, sl
     c78:	464f      	mov	r7, r9
     c7a:	4646      	mov	r6, r8
     c7c:	b5c0      	push	{r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     c7e:	4b31      	ldr	r3, [pc, #196]	; (d44 <EL+0xd0>)
     c80:	881f      	ldrh	r7, [r3, #0]
     c82:	b2fc      	uxtb	r4, r7
	uint8_t yTemp = yCharPos;
     c84:	4b30      	ldr	r3, [pc, #192]	; (d48 <EL+0xd4>)
     c86:	881b      	ldrh	r3, [r3, #0]
     c88:	4698      	mov	r8, r3
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     c8a:	2200      	movs	r2, #0
     c8c:	4b2f      	ldr	r3, [pc, #188]	; (d4c <EL+0xd8>)
     c8e:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     c90:	4b2f      	ldr	r3, [pc, #188]	; (d50 <EL+0xdc>)
     c92:	4798      	blx	r3
     c94:	2800      	cmp	r0, #0
     c96:	d015      	beq.n	cc4 <EL+0x50>
	else
	{
		parameter = dequeueParam();
	}
	
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     c98:	4b2a      	ldr	r3, [pc, #168]	; (d44 <EL+0xd0>)
     c9a:	881a      	ldrh	r2, [r3, #0]
     c9c:	4b2a      	ldr	r3, [pc, #168]	; (d48 <EL+0xd4>)
     c9e:	8819      	ldrh	r1, [r3, #0]
     ca0:	0053      	lsls	r3, r2, #1
     ca2:	189b      	adds	r3, r3, r2
     ca4:	00db      	lsls	r3, r3, #3
     ca6:	4a2b      	ldr	r2, [pc, #172]	; (d54 <EL+0xe0>)
     ca8:	18d3      	adds	r3, r2, r3
     caa:	5c5b      	ldrb	r3, [r3, r1]
     cac:	4699      	mov	r9, r3
	
	switch(parameter)
	{
		case 0:			//Erases from cursor to end of line
			for(int i = xTemp ;  i <= 79 ;  i++)
     cae:	2c4f      	cmp	r4, #79	; 0x4f
     cb0:	dc24      	bgt.n	cfc <EL+0x88>
			{
				xCharPos = i;
     cb2:	4e24      	ldr	r6, [pc, #144]	; (d44 <EL+0xd0>)
				drawChar(0x00);
     cb4:	4d28      	ldr	r5, [pc, #160]	; (d58 <EL+0xe4>)
				xCharPos = i;
     cb6:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     cb8:	2000      	movs	r0, #0
     cba:	47a8      	blx	r5
			for(int i = xTemp ;  i <= 79 ;  i++)
     cbc:	3401      	adds	r4, #1
     cbe:	2c50      	cmp	r4, #80	; 0x50
     cc0:	d1f9      	bne.n	cb6 <EL+0x42>
     cc2:	e01b      	b.n	cfc <EL+0x88>
		parameter = dequeueParam();
     cc4:	4b25      	ldr	r3, [pc, #148]	; (d5c <EL+0xe8>)
     cc6:	4798      	blx	r3
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     cc8:	4b1e      	ldr	r3, [pc, #120]	; (d44 <EL+0xd0>)
     cca:	881a      	ldrh	r2, [r3, #0]
     ccc:	4b1e      	ldr	r3, [pc, #120]	; (d48 <EL+0xd4>)
     cce:	8819      	ldrh	r1, [r3, #0]
     cd0:	0053      	lsls	r3, r2, #1
     cd2:	189b      	adds	r3, r3, r2
     cd4:	00db      	lsls	r3, r3, #3
     cd6:	4a1f      	ldr	r2, [pc, #124]	; (d54 <EL+0xe0>)
     cd8:	18d3      	adds	r3, r2, r3
     cda:	5c5b      	ldrb	r3, [r3, r1]
     cdc:	4699      	mov	r9, r3
	switch(parameter)
     cde:	2801      	cmp	r0, #1
     ce0:	d021      	beq.n	d26 <EL+0xb2>
     ce2:	2800      	cmp	r0, #0
     ce4:	d0e3      	beq.n	cae <EL+0x3a>
     ce6:	2802      	cmp	r0, #2
     ce8:	d108      	bne.n	cfc <EL+0x88>
     cea:	2400      	movs	r4, #0
			break;
		
		case 2:			//Erases entire line containing cursor
			for(int i = 0 ;  i <= 78 ;  i++)
			{
				xCharPos = i;
     cec:	4e15      	ldr	r6, [pc, #84]	; (d44 <EL+0xd0>)
				drawChar(0x00);
     cee:	4d1a      	ldr	r5, [pc, #104]	; (d58 <EL+0xe4>)
				xCharPos = i;
     cf0:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     cf2:	2000      	movs	r0, #0
     cf4:	47a8      	blx	r5
			for(int i = 0 ;  i <= 78 ;  i++)
     cf6:	3401      	adds	r4, #1
     cf8:	2c4f      	cmp	r4, #79	; 0x4f
     cfa:	d1f9      	bne.n	cf0 <EL+0x7c>
			}
			break;
	}
	
	blinkCursor();
     cfc:	4b18      	ldr	r3, [pc, #96]	; (d60 <EL+0xec>)
     cfe:	4798      	blx	r3
	xCharPos = xTemp;
     d00:	23ff      	movs	r3, #255	; 0xff
     d02:	401f      	ands	r7, r3
     d04:	4a0f      	ldr	r2, [pc, #60]	; (d44 <EL+0xd0>)
     d06:	8017      	strh	r7, [r2, #0]
	yCharPos = yTemp;
     d08:	4642      	mov	r2, r8
     d0a:	4013      	ands	r3, r2
     d0c:	4a0e      	ldr	r2, [pc, #56]	; (d48 <EL+0xd4>)
     d0e:	8013      	strh	r3, [r2, #0]
	drawChar(tempCharacter);
     d10:	4648      	mov	r0, r9
     d12:	4b11      	ldr	r3, [pc, #68]	; (d58 <EL+0xe4>)
     d14:	4798      	blx	r3
	
	currentState = stateGround;	
     d16:	2200      	movs	r2, #0
     d18:	4b12      	ldr	r3, [pc, #72]	; (d64 <EL+0xf0>)
     d1a:	701a      	strb	r2, [r3, #0]
}
     d1c:	bc1c      	pop	{r2, r3, r4}
     d1e:	4690      	mov	r8, r2
     d20:	4699      	mov	r9, r3
     d22:	46a2      	mov	sl, r4
     d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     d26:	3401      	adds	r4, #1
     d28:	2500      	movs	r5, #0
     d2a:	2c00      	cmp	r4, #0
     d2c:	dbe6      	blt.n	cfc <EL+0x88>
				xCharPos = i;
     d2e:	4b05      	ldr	r3, [pc, #20]	; (d44 <EL+0xd0>)
     d30:	469a      	mov	sl, r3
				drawChar(0x00);
     d32:	4e09      	ldr	r6, [pc, #36]	; (d58 <EL+0xe4>)
				xCharPos = i;
     d34:	4653      	mov	r3, sl
     d36:	801d      	strh	r5, [r3, #0]
				drawChar(0x00);
     d38:	2000      	movs	r0, #0
     d3a:	47b0      	blx	r6
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     d3c:	3501      	adds	r5, #1
     d3e:	42a5      	cmp	r5, r4
     d40:	ddf8      	ble.n	d34 <EL+0xc0>
     d42:	e7db      	b.n	cfc <EL+0x88>
     d44:	200002ec 	.word	0x200002ec
     d48:	200002ee 	.word	0x200002ee
     d4c:	20000028 	.word	0x20000028
     d50:	00000241 	.word	0x00000241
     d54:	200003f4 	.word	0x200003f4
     d58:	0000358d 	.word	0x0000358d
     d5c:	00000255 	.word	0x00000255
     d60:	000036d9 	.word	0x000036d9
     d64:	200002f1 	.word	0x200002f1

00000d68 <SGR>:

void SGR() //Select Graphic Rendition
{
     d68:	b570      	push	{r4, r5, r6, lr}
	//Oh boy here we go
	uint8_t parameter;
		
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     d6a:	2200      	movs	r2, #0
     d6c:	4b55      	ldr	r3, [pc, #340]	; (ec4 <SGR+0x15c>)
     d6e:	701a      	strb	r2, [r3, #0]
		
	if(isEmptyParam())
     d70:	4b55      	ldr	r3, [pc, #340]	; (ec8 <SGR+0x160>)
     d72:	4798      	blx	r3
     d74:	2800      	cmp	r0, #0
     d76:	d103      	bne.n	d80 <SGR+0x18>
		textBackground = defaultBackgroundColor;
							
	}
	else
	{
		while(!isEmptyParam())
     d78:	4c53      	ldr	r4, [pc, #332]	; (ec8 <SGR+0x160>)
		{
			parameter = dequeueParam();
     d7a:	4d54      	ldr	r5, [pc, #336]	; (ecc <SGR+0x164>)
			switch(parameter)
     d7c:	4e54      	ldr	r6, [pc, #336]	; (ed0 <SGR+0x168>)
     d7e:	e027      	b.n	dd0 <SGR+0x68>
		textBold = false;
     d80:	2300      	movs	r3, #0
     d82:	4a54      	ldr	r2, [pc, #336]	; (ed4 <SGR+0x16c>)
     d84:	7013      	strb	r3, [r2, #0]
		textUnderscore = false;
     d86:	4a54      	ldr	r2, [pc, #336]	; (ed8 <SGR+0x170>)
     d88:	7013      	strb	r3, [r2, #0]
		textBlink = false;
     d8a:	4a54      	ldr	r2, [pc, #336]	; (edc <SGR+0x174>)
     d8c:	7013      	strb	r3, [r2, #0]
		textReverseVideo = false;
     d8e:	4a54      	ldr	r2, [pc, #336]	; (ee0 <SGR+0x178>)
     d90:	7013      	strb	r3, [r2, #0]
		textForeground = defaultForegroundColor;
     d92:	4b54      	ldr	r3, [pc, #336]	; (ee4 <SGR+0x17c>)
     d94:	881a      	ldrh	r2, [r3, #0]
     d96:	4b54      	ldr	r3, [pc, #336]	; (ee8 <SGR+0x180>)
     d98:	801a      	strh	r2, [r3, #0]
		textBackground = defaultBackgroundColor;
     d9a:	4b54      	ldr	r3, [pc, #336]	; (eec <SGR+0x184>)
     d9c:	881a      	ldrh	r2, [r3, #0]
     d9e:	4b54      	ldr	r3, [pc, #336]	; (ef0 <SGR+0x188>)
     da0:	801a      	strh	r2, [r3, #0]
				
			}
		}	
	}
	
	blinkCursor();
     da2:	4b54      	ldr	r3, [pc, #336]	; (ef4 <SGR+0x18c>)
     da4:	4798      	blx	r3
	currentState = stateGround;
     da6:	2200      	movs	r2, #0
     da8:	4b53      	ldr	r3, [pc, #332]	; (ef8 <SGR+0x190>)
     daa:	701a      	strb	r2, [r3, #0]
}
     dac:	bd70      	pop	{r4, r5, r6, pc}
					textBold = false;
     dae:	2300      	movs	r3, #0
     db0:	4a48      	ldr	r2, [pc, #288]	; (ed4 <SGR+0x16c>)
     db2:	7013      	strb	r3, [r2, #0]
					textUnderscore = false;
     db4:	4a48      	ldr	r2, [pc, #288]	; (ed8 <SGR+0x170>)
     db6:	7013      	strb	r3, [r2, #0]
					textBlink = false;
     db8:	4a48      	ldr	r2, [pc, #288]	; (edc <SGR+0x174>)
     dba:	7013      	strb	r3, [r2, #0]
					textReverseVideo = false;
     dbc:	4a48      	ldr	r2, [pc, #288]	; (ee0 <SGR+0x178>)
     dbe:	7013      	strb	r3, [r2, #0]
					textForeground = defaultForegroundColor;
     dc0:	4b48      	ldr	r3, [pc, #288]	; (ee4 <SGR+0x17c>)
     dc2:	881a      	ldrh	r2, [r3, #0]
     dc4:	4b48      	ldr	r3, [pc, #288]	; (ee8 <SGR+0x180>)
     dc6:	801a      	strh	r2, [r3, #0]
					textBackground = defaultBackgroundColor;
     dc8:	4b48      	ldr	r3, [pc, #288]	; (eec <SGR+0x184>)
     dca:	881a      	ldrh	r2, [r3, #0]
     dcc:	4b48      	ldr	r3, [pc, #288]	; (ef0 <SGR+0x188>)
     dce:	801a      	strh	r2, [r3, #0]
		while(!isEmptyParam())
     dd0:	47a0      	blx	r4
     dd2:	2800      	cmp	r0, #0
     dd4:	d1e5      	bne.n	da2 <SGR+0x3a>
			parameter = dequeueParam();
     dd6:	47a8      	blx	r5
			switch(parameter)
     dd8:	2831      	cmp	r0, #49	; 0x31
     dda:	d8f9      	bhi.n	dd0 <SGR+0x68>
     ddc:	0080      	lsls	r0, r0, #2
     dde:	5833      	ldr	r3, [r6, r0]
     de0:	469f      	mov	pc, r3
					textBold = true;
     de2:	2201      	movs	r2, #1
     de4:	4b3b      	ldr	r3, [pc, #236]	; (ed4 <SGR+0x16c>)
     de6:	701a      	strb	r2, [r3, #0]
					break;
     de8:	e7f2      	b.n	dd0 <SGR+0x68>
					textUnderscore = true;
     dea:	2201      	movs	r2, #1
     dec:	4b3a      	ldr	r3, [pc, #232]	; (ed8 <SGR+0x170>)
     dee:	701a      	strb	r2, [r3, #0]
					break;
     df0:	e7ee      	b.n	dd0 <SGR+0x68>
					textBlink = true;
     df2:	2201      	movs	r2, #1
     df4:	4b39      	ldr	r3, [pc, #228]	; (edc <SGR+0x174>)
     df6:	701a      	strb	r2, [r3, #0]
					break;
     df8:	e7ea      	b.n	dd0 <SGR+0x68>
					textReverseVideo = true;
     dfa:	2201      	movs	r2, #1
     dfc:	4b38      	ldr	r3, [pc, #224]	; (ee0 <SGR+0x178>)
     dfe:	701a      	strb	r2, [r3, #0]
					break;
     e00:	e7e6      	b.n	dd0 <SGR+0x68>
					textUnderscore = true;
     e02:	2201      	movs	r2, #1
     e04:	4b34      	ldr	r3, [pc, #208]	; (ed8 <SGR+0x170>)
     e06:	701a      	strb	r2, [r3, #0]
					break;
     e08:	e7e2      	b.n	dd0 <SGR+0x68>
					textBold = false;
     e0a:	2200      	movs	r2, #0
     e0c:	4b31      	ldr	r3, [pc, #196]	; (ed4 <SGR+0x16c>)
     e0e:	701a      	strb	r2, [r3, #0]
					break;
     e10:	e7de      	b.n	dd0 <SGR+0x68>
					textUnderscore = false;
     e12:	2200      	movs	r2, #0
     e14:	4b30      	ldr	r3, [pc, #192]	; (ed8 <SGR+0x170>)
     e16:	701a      	strb	r2, [r3, #0]
					break;
     e18:	e7da      	b.n	dd0 <SGR+0x68>
					textBlink = false;
     e1a:	2200      	movs	r2, #0
     e1c:	4b2f      	ldr	r3, [pc, #188]	; (edc <SGR+0x174>)
     e1e:	701a      	strb	r2, [r3, #0]
					break;
     e20:	e7d6      	b.n	dd0 <SGR+0x68>
					textReverseVideo = false;
     e22:	2200      	movs	r2, #0
     e24:	4b2e      	ldr	r3, [pc, #184]	; (ee0 <SGR+0x178>)
     e26:	701a      	strb	r2, [r3, #0]
					break;
     e28:	e7d2      	b.n	dd0 <SGR+0x68>
					textForeground = BLACK;
     e2a:	2200      	movs	r2, #0
     e2c:	4b2e      	ldr	r3, [pc, #184]	; (ee8 <SGR+0x180>)
     e2e:	801a      	strh	r2, [r3, #0]
					break;
     e30:	e7ce      	b.n	dd0 <SGR+0x68>
					textForeground = RED;
     e32:	4a32      	ldr	r2, [pc, #200]	; (efc <SGR+0x194>)
     e34:	4b2c      	ldr	r3, [pc, #176]	; (ee8 <SGR+0x180>)
     e36:	801a      	strh	r2, [r3, #0]
					break;
     e38:	e7ca      	b.n	dd0 <SGR+0x68>
					textForeground = GREEN;
     e3a:	4a31      	ldr	r2, [pc, #196]	; (f00 <SGR+0x198>)
     e3c:	4b2a      	ldr	r3, [pc, #168]	; (ee8 <SGR+0x180>)
     e3e:	801a      	strh	r2, [r3, #0]
					break;
     e40:	e7c6      	b.n	dd0 <SGR+0x68>
					textForeground = BROWN;
     e42:	4a30      	ldr	r2, [pc, #192]	; (f04 <SGR+0x19c>)
     e44:	4b28      	ldr	r3, [pc, #160]	; (ee8 <SGR+0x180>)
     e46:	801a      	strh	r2, [r3, #0]
					break;
     e48:	e7c2      	b.n	dd0 <SGR+0x68>
					textForeground = BLUE;
     e4a:	4a2f      	ldr	r2, [pc, #188]	; (f08 <SGR+0x1a0>)
     e4c:	4b26      	ldr	r3, [pc, #152]	; (ee8 <SGR+0x180>)
     e4e:	801a      	strh	r2, [r3, #0]
					break;
     e50:	e7be      	b.n	dd0 <SGR+0x68>
					textForeground = MAGENTA;
     e52:	4a2e      	ldr	r2, [pc, #184]	; (f0c <SGR+0x1a4>)
     e54:	4b24      	ldr	r3, [pc, #144]	; (ee8 <SGR+0x180>)
     e56:	801a      	strh	r2, [r3, #0]
					break;
     e58:	e7ba      	b.n	dd0 <SGR+0x68>
					textForeground = CYAN;
     e5a:	4a2d      	ldr	r2, [pc, #180]	; (f10 <SGR+0x1a8>)
     e5c:	4b22      	ldr	r3, [pc, #136]	; (ee8 <SGR+0x180>)
     e5e:	801a      	strh	r2, [r3, #0]
					break;
     e60:	e7b6      	b.n	dd0 <SGR+0x68>
					textForeground = WHITE;
     e62:	2201      	movs	r2, #1
     e64:	4252      	negs	r2, r2
     e66:	4b20      	ldr	r3, [pc, #128]	; (ee8 <SGR+0x180>)
     e68:	801a      	strh	r2, [r3, #0]
					break;
     e6a:	e7b1      	b.n	dd0 <SGR+0x68>
					textForeground = defaultForegroundColor;
     e6c:	4b1d      	ldr	r3, [pc, #116]	; (ee4 <SGR+0x17c>)
     e6e:	881a      	ldrh	r2, [r3, #0]
     e70:	4b1d      	ldr	r3, [pc, #116]	; (ee8 <SGR+0x180>)
     e72:	801a      	strh	r2, [r3, #0]
					break;
     e74:	e7ac      	b.n	dd0 <SGR+0x68>
					textBackground = BLACK;
     e76:	2200      	movs	r2, #0
     e78:	4b1d      	ldr	r3, [pc, #116]	; (ef0 <SGR+0x188>)
     e7a:	801a      	strh	r2, [r3, #0]
					break;
     e7c:	e7a8      	b.n	dd0 <SGR+0x68>
					textBackground = RED;
     e7e:	4a1f      	ldr	r2, [pc, #124]	; (efc <SGR+0x194>)
     e80:	4b1b      	ldr	r3, [pc, #108]	; (ef0 <SGR+0x188>)
     e82:	801a      	strh	r2, [r3, #0]
					break;
     e84:	e7a4      	b.n	dd0 <SGR+0x68>
					textBackground = GREEN;
     e86:	4a1e      	ldr	r2, [pc, #120]	; (f00 <SGR+0x198>)
     e88:	4b19      	ldr	r3, [pc, #100]	; (ef0 <SGR+0x188>)
     e8a:	801a      	strh	r2, [r3, #0]
					break;
     e8c:	e7a0      	b.n	dd0 <SGR+0x68>
					textBackground = BROWN;
     e8e:	4a1d      	ldr	r2, [pc, #116]	; (f04 <SGR+0x19c>)
     e90:	4b17      	ldr	r3, [pc, #92]	; (ef0 <SGR+0x188>)
     e92:	801a      	strh	r2, [r3, #0]
					break;
     e94:	e79c      	b.n	dd0 <SGR+0x68>
					textBackground = BLUE;
     e96:	4a1c      	ldr	r2, [pc, #112]	; (f08 <SGR+0x1a0>)
     e98:	4b15      	ldr	r3, [pc, #84]	; (ef0 <SGR+0x188>)
     e9a:	801a      	strh	r2, [r3, #0]
					break;
     e9c:	e798      	b.n	dd0 <SGR+0x68>
					textBackground = MAGENTA;
     e9e:	4a1b      	ldr	r2, [pc, #108]	; (f0c <SGR+0x1a4>)
     ea0:	4b13      	ldr	r3, [pc, #76]	; (ef0 <SGR+0x188>)
     ea2:	801a      	strh	r2, [r3, #0]
					break;
     ea4:	e794      	b.n	dd0 <SGR+0x68>
					textBackground = CYAN;
     ea6:	4a1a      	ldr	r2, [pc, #104]	; (f10 <SGR+0x1a8>)
     ea8:	4b11      	ldr	r3, [pc, #68]	; (ef0 <SGR+0x188>)
     eaa:	801a      	strh	r2, [r3, #0]
					break;
     eac:	e790      	b.n	dd0 <SGR+0x68>
					textBackground = WHITE;
     eae:	2201      	movs	r2, #1
     eb0:	4252      	negs	r2, r2
     eb2:	4b0f      	ldr	r3, [pc, #60]	; (ef0 <SGR+0x188>)
     eb4:	801a      	strh	r2, [r3, #0]
					break;
     eb6:	e78b      	b.n	dd0 <SGR+0x68>
					textBackground = defaultBackgroundColor;
     eb8:	4b0c      	ldr	r3, [pc, #48]	; (eec <SGR+0x184>)
     eba:	881b      	ldrh	r3, [r3, #0]
     ebc:	4a0c      	ldr	r2, [pc, #48]	; (ef0 <SGR+0x188>)
     ebe:	8013      	strh	r3, [r2, #0]
					break;
     ec0:	e786      	b.n	dd0 <SGR+0x68>
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	20000028 	.word	0x20000028
     ec8:	00000241 	.word	0x00000241
     ecc:	00000255 	.word	0x00000255
     ed0:	00005e78 	.word	0x00005e78
     ed4:	20000388 	.word	0x20000388
     ed8:	20000368 	.word	0x20000368
     edc:	2000036a 	.word	0x2000036a
     ee0:	2000038a 	.word	0x2000038a
     ee4:	2000018a 	.word	0x2000018a
     ee8:	20000014 	.word	0x20000014
     eec:	200002f2 	.word	0x200002f2
     ef0:	2000022a 	.word	0x2000022a
     ef4:	000036d9 	.word	0x000036d9
     ef8:	200002f1 	.word	0x200002f1
     efc:	ffffc28a 	.word	0xffffc28a
     f00:	000074a6 	.word	0x000074a6
     f04:	ffffbc46 	.word	0xffffbc46
     f08:	00004c77 	.word	0x00004c77
     f0c:	fffff81f 	.word	0xfffff81f
     f10:	00004cd2 	.word	0x00004cd2

00000f14 <DSR>:
void ICH(void) //Insert indicated # of blank chars
{
	currentState = stateGround;
}
void DSR(void)
{
     f14:	b5f0      	push	{r4, r5, r6, r7, lr}
     f16:	46ce      	mov	lr, r9
     f18:	4647      	mov	r7, r8
     f1a:	b580      	push	{r7, lr}
     f1c:	b087      	sub	sp, #28
	
	This function will support both ANSI and DEC formats
	*/
	unsigned char tempCharacter;
		
	uint8_t xTemp = xCharPos;
     f1e:	4b36      	ldr	r3, [pc, #216]	; (ff8 <DSR+0xe4>)
     f20:	881d      	ldrh	r5, [r3, #0]
	uint8_t yTemp = yCharPos;
     f22:	4b36      	ldr	r3, [pc, #216]	; (ffc <DSR+0xe8>)
     f24:	881e      	ldrh	r6, [r3, #0]
	
	char DSROSResponse[] = {0x1b, 0x5b, 0x30, 0x6e};
     f26:	4b36      	ldr	r3, [pc, #216]	; (1000 <DSR+0xec>)
     f28:	681b      	ldr	r3, [r3, #0]
     f2a:	9305      	str	r3, [sp, #20]
	
	char stringResponse[10];
	char tempbuffer[5];
		
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     f2c:	2200      	movs	r2, #0
     f2e:	4b35      	ldr	r3, [pc, #212]	; (1004 <DSR+0xf0>)
     f30:	701a      	strb	r2, [r3, #0]
		
	tempCharacter = dequeueParser();
     f32:	4b35      	ldr	r3, [pc, #212]	; (1008 <DSR+0xf4>)
     f34:	4798      	blx	r3
     f36:	0004      	movs	r4, r0
	
	if(!isEmptyParam()) //We are in DEC format
     f38:	4b34      	ldr	r3, [pc, #208]	; (100c <DSR+0xf8>)
     f3a:	4798      	blx	r3
     f3c:	2800      	cmp	r0, #0
     f3e:	d018      	beq.n	f72 <DSR+0x5e>
	{
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
	}
	
	switch(tempCharacter){
     f40:	2c05      	cmp	r4, #5
     f42:	d01a      	beq.n	f7a <DSR+0x66>
     f44:	2c06      	cmp	r4, #6
     f46:	d01d      	beq.n	f84 <DSR+0x70>
		
			printf("%s",stringResponse);
		break;
	}
	
	stringResponse[0] = '\0';
     f48:	2400      	movs	r4, #0
     f4a:	ab02      	add	r3, sp, #8
     f4c:	701c      	strb	r4, [r3, #0]
	tempbuffer[0] = '\0';
     f4e:	466b      	mov	r3, sp
     f50:	701c      	strb	r4, [r3, #0]
		
	blinkCursor();
     f52:	4b2f      	ldr	r3, [pc, #188]	; (1010 <DSR+0xfc>)
     f54:	4798      	blx	r3
	xCharPos = xTemp;
     f56:	23ff      	movs	r3, #255	; 0xff
     f58:	401d      	ands	r5, r3
     f5a:	4a27      	ldr	r2, [pc, #156]	; (ff8 <DSR+0xe4>)
     f5c:	8015      	strh	r5, [r2, #0]
	yCharPos = yTemp;
     f5e:	4033      	ands	r3, r6
     f60:	4a26      	ldr	r2, [pc, #152]	; (ffc <DSR+0xe8>)
     f62:	8013      	strh	r3, [r2, #0]
	currentState = stateGround;
     f64:	4b2b      	ldr	r3, [pc, #172]	; (1014 <DSR+0x100>)
     f66:	701c      	strb	r4, [r3, #0]
}
     f68:	b007      	add	sp, #28
     f6a:	bc0c      	pop	{r2, r3}
     f6c:	4690      	mov	r8, r2
     f6e:	4699      	mov	r9, r3
     f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
     f72:	4b29      	ldr	r3, [pc, #164]	; (1018 <DSR+0x104>)
     f74:	4798      	blx	r3
     f76:	0004      	movs	r4, r0
     f78:	e7e2      	b.n	f40 <DSR+0x2c>
			printf("%s",DSROSResponse);
     f7a:	a905      	add	r1, sp, #20
     f7c:	4827      	ldr	r0, [pc, #156]	; (101c <DSR+0x108>)
     f7e:	4b28      	ldr	r3, [pc, #160]	; (1020 <DSR+0x10c>)
     f80:	4798      	blx	r3
		break;
     f82:	e7e1      	b.n	f48 <DSR+0x34>
			strcat(stringResponse,"\x1B");
     f84:	a802      	add	r0, sp, #8
     f86:	4f27      	ldr	r7, [pc, #156]	; (1024 <DSR+0x110>)
     f88:	47b8      	blx	r7
     f8a:	ab02      	add	r3, sp, #8
     f8c:	469c      	mov	ip, r3
     f8e:	4460      	add	r0, ip
     f90:	2202      	movs	r2, #2
     f92:	4925      	ldr	r1, [pc, #148]	; (1028 <DSR+0x114>)
     f94:	4c25      	ldr	r4, [pc, #148]	; (102c <DSR+0x118>)
     f96:	47a0      	blx	r4
			strcat(stringResponse,"\x5B");
     f98:	a802      	add	r0, sp, #8
     f9a:	47b8      	blx	r7
     f9c:	ab02      	add	r3, sp, #8
     f9e:	469c      	mov	ip, r3
     fa0:	4460      	add	r0, ip
     fa2:	2202      	movs	r2, #2
     fa4:	4922      	ldr	r1, [pc, #136]	; (1030 <DSR+0x11c>)
     fa6:	47a0      	blx	r4
			strcat(stringResponse,itoa(yTemp,tempbuffer,10));
     fa8:	b2f0      	uxtb	r0, r6
     faa:	220a      	movs	r2, #10
     fac:	4669      	mov	r1, sp
     fae:	4b21      	ldr	r3, [pc, #132]	; (1034 <DSR+0x120>)
     fb0:	4699      	mov	r9, r3
     fb2:	4798      	blx	r3
     fb4:	0001      	movs	r1, r0
     fb6:	a802      	add	r0, sp, #8
     fb8:	4b1f      	ldr	r3, [pc, #124]	; (1038 <DSR+0x124>)
     fba:	4698      	mov	r8, r3
     fbc:	4798      	blx	r3
			strcat(stringResponse,";");
     fbe:	a802      	add	r0, sp, #8
     fc0:	47b8      	blx	r7
     fc2:	ab02      	add	r3, sp, #8
     fc4:	469c      	mov	ip, r3
     fc6:	4460      	add	r0, ip
     fc8:	2202      	movs	r2, #2
     fca:	491c      	ldr	r1, [pc, #112]	; (103c <DSR+0x128>)
     fcc:	47a0      	blx	r4
			strcat(stringResponse,itoa(xTemp,tempbuffer,10));
     fce:	b2e8      	uxtb	r0, r5
     fd0:	220a      	movs	r2, #10
     fd2:	4669      	mov	r1, sp
     fd4:	47c8      	blx	r9
     fd6:	0001      	movs	r1, r0
     fd8:	a802      	add	r0, sp, #8
     fda:	47c0      	blx	r8
			strcat(stringResponse,"R");
     fdc:	a802      	add	r0, sp, #8
     fde:	47b8      	blx	r7
     fe0:	ab02      	add	r3, sp, #8
     fe2:	469c      	mov	ip, r3
     fe4:	4460      	add	r0, ip
     fe6:	2202      	movs	r2, #2
     fe8:	4915      	ldr	r1, [pc, #84]	; (1040 <DSR+0x12c>)
     fea:	47a0      	blx	r4
			printf("%s",stringResponse);
     fec:	a902      	add	r1, sp, #8
     fee:	480b      	ldr	r0, [pc, #44]	; (101c <DSR+0x108>)
     ff0:	4b0b      	ldr	r3, [pc, #44]	; (1020 <DSR+0x10c>)
     ff2:	4798      	blx	r3
		break;
     ff4:	e7a8      	b.n	f48 <DSR+0x34>
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	200002ec 	.word	0x200002ec
     ffc:	200002ee 	.word	0x200002ee
    1000:	00005f58 	.word	0x00005f58
    1004:	20000028 	.word	0x20000028
    1008:	000001e5 	.word	0x000001e5
    100c:	00000241 	.word	0x00000241
    1010:	000036d9 	.word	0x000036d9
    1014:	200002f1 	.word	0x200002f1
    1018:	00000255 	.word	0x00000255
    101c:	000060d0 	.word	0x000060d0
    1020:	00004df5 	.word	0x00004df5
    1024:	000050cf 	.word	0x000050cf
    1028:	000060a4 	.word	0x000060a4
    102c:	00004c81 	.word	0x00004c81
    1030:	000060a8 	.word	0x000060a8
    1034:	00004c65 	.word	0x00004c65
    1038:	000050b5 	.word	0x000050b5
    103c:	000063bc 	.word	0x000063bc
    1040:	000060ac 	.word	0x000060ac

00001044 <isValidCSIEscapeCode>:
bool isValidCSIEscapeCode(uint8_t character)
{
	
	for(uint8_t i = 0; i <= sizeof(csiEscCodes)/sizeof(csiEscCodes[0]) ; i++)
	{
		if(character == csiEscCodes[i])
    1044:	2840      	cmp	r0, #64	; 0x40
    1046:	d006      	beq.n	1056 <isValidCSIEscapeCode+0x12>
    1048:	4b04      	ldr	r3, [pc, #16]	; (105c <isValidCSIEscapeCode+0x18>)
    104a:	3301      	adds	r3, #1
    104c:	3301      	adds	r3, #1
    104e:	1e5a      	subs	r2, r3, #1
    1050:	7812      	ldrb	r2, [r2, #0]
    1052:	4282      	cmp	r2, r0
    1054:	d1fa      	bne.n	104c <isValidCSIEscapeCode+0x8>
		{
			return true;	
		}
	}
	return false;
}
    1056:	2001      	movs	r0, #1
    1058:	4770      	bx	lr
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	000060b0 	.word	0x000060b0

00001060 <CSIparamState>:
{
    1060:	b510      	push	{r4, lr}
    1062:	0004      	movs	r4, r0
	if(character >= 0x30 && character <= 0x39)		//character is a digit, put it in the buffer
    1064:	0003      	movs	r3, r0
    1066:	3b30      	subs	r3, #48	; 0x30
    1068:	2b09      	cmp	r3, #9
    106a:	d90b      	bls.n	1084 <CSIparamState+0x24>
	else if(character == 0x3B)					//character is ';', now we take items out of 
    106c:	283b      	cmp	r0, #59	; 0x3b
    106e:	d00c      	beq.n	108a <CSIparamState+0x2a>
	else if(character == 0x3F)					//character is '?', this is used for DECCKM
    1070:	283f      	cmp	r0, #63	; 0x3f
    1072:	d00e      	beq.n	1092 <CSIparamState+0x32>
	else if(isValidCSIEscapeCode(character))		//character matches a supported escape code
    1074:	4b0d      	ldr	r3, [pc, #52]	; (10ac <CSIparamState+0x4c>)
    1076:	4798      	blx	r3
    1078:	2800      	cmp	r0, #0
    107a:	d10e      	bne.n	109a <CSIparamState+0x3a>
		currentState = stateCSIignore;
    107c:	2205      	movs	r2, #5
    107e:	4b0c      	ldr	r3, [pc, #48]	; (10b0 <CSIparamState+0x50>)
    1080:	701a      	strb	r2, [r3, #0]
}
    1082:	bd10      	pop	{r4, pc}
		enqueueParser(character);
    1084:	4b0b      	ldr	r3, [pc, #44]	; (10b4 <CSIparamState+0x54>)
    1086:	4798      	blx	r3
    1088:	e7fb      	b.n	1082 <CSIparamState+0x22>
		enqueueParser(';');						//parambuffer 			
    108a:	203b      	movs	r0, #59	; 0x3b
    108c:	4b09      	ldr	r3, [pc, #36]	; (10b4 <CSIparamState+0x54>)
    108e:	4798      	blx	r3
    1090:	e7f7      	b.n	1082 <CSIparamState+0x22>
		enqueueParser('?');						//the terminating character
    1092:	203f      	movs	r0, #63	; 0x3f
    1094:	4b07      	ldr	r3, [pc, #28]	; (10b4 <CSIparamState+0x54>)
    1096:	4798      	blx	r3
    1098:	e7f3      	b.n	1082 <CSIparamState+0x22>
		queueTransmogrifier();											
    109a:	4b07      	ldr	r3, [pc, #28]	; (10b8 <CSIparamState+0x58>)
    109c:	4798      	blx	r3
		currentState = stateCSIentry;
    109e:	2203      	movs	r2, #3
    10a0:	4b03      	ldr	r3, [pc, #12]	; (10b0 <CSIparamState+0x50>)
    10a2:	701a      	strb	r2, [r3, #0]
		CSIentryState(character);
    10a4:	0020      	movs	r0, r4
    10a6:	4b05      	ldr	r3, [pc, #20]	; (10bc <CSIparamState+0x5c>)
    10a8:	4798      	blx	r3
    10aa:	e7ea      	b.n	1082 <CSIparamState+0x22>
    10ac:	00001045 	.word	0x00001045
    10b0:	200002f1 	.word	0x200002f1
    10b4:	00000215 	.word	0x00000215
    10b8:	00000309 	.word	0x00000309
    10bc:	000010c1 	.word	0x000010c1

000010c0 <CSIentryState>:
{
    10c0:	b510      	push	{r4, lr}
	if(character == 0x40)		//ESC [ @ ICH insert indicated # of blank chars
    10c2:	2840      	cmp	r0, #64	; 0x40
    10c4:	d076      	beq.n	11b4 <CSIentryState+0xf4>
	else if(character == 0x41)	//ESC [ A	Cursor Up
    10c6:	2841      	cmp	r0, #65	; 0x41
    10c8:	d100      	bne.n	10cc <CSIentryState+0xc>
    10ca:	e077      	b.n	11bc <CSIentryState+0xfc>
	else if(character == 0x61)	//ESC [ a HPR
    10cc:	2861      	cmp	r0, #97	; 0x61
    10ce:	d100      	bne.n	10d2 <CSIentryState+0x12>
    10d0:	e077      	b.n	11c2 <CSIentryState+0x102>
	else if(character == 0x42)	//ESC [ B	Cursor Down
    10d2:	2842      	cmp	r0, #66	; 0x42
    10d4:	d100      	bne.n	10d8 <CSIentryState+0x18>
    10d6:	e077      	b.n	11c8 <CSIentryState+0x108>
	else if(character == 0x43)	//ESC [ C	Cursor Forward
    10d8:	2843      	cmp	r0, #67	; 0x43
    10da:	d100      	bne.n	10de <CSIentryState+0x1e>
    10dc:	e077      	b.n	11ce <CSIentryState+0x10e>
	else if(character == 0x63)	//ESC [ c DA
    10de:	2863      	cmp	r0, #99	; 0x63
    10e0:	d100      	bne.n	10e4 <CSIentryState+0x24>
    10e2:	e077      	b.n	11d4 <CSIentryState+0x114>
	else if(character == 0x44)	//ESC [ D	Cursor Backward
    10e4:	2844      	cmp	r0, #68	; 0x44
    10e6:	d100      	bne.n	10ea <CSIentryState+0x2a>
    10e8:	e07c      	b.n	11e4 <CSIentryState+0x124>
	else if(character == 0x64)	//ESC [ d	VPA
    10ea:	2864      	cmp	r0, #100	; 0x64
    10ec:	d065      	beq.n	11ba <CSIentryState+0xfa>
	else if(character == 0x45)	//ESC [ E	Cursor Next Line
    10ee:	2845      	cmp	r0, #69	; 0x45
    10f0:	d100      	bne.n	10f4 <CSIentryState+0x34>
    10f2:	e07a      	b.n	11ea <CSIentryState+0x12a>
	else if(character == 0x65)	//ESC [ e VPR
    10f4:	2865      	cmp	r0, #101	; 0x65
    10f6:	d100      	bne.n	10fa <CSIentryState+0x3a>
    10f8:	e07a      	b.n	11f0 <CSIentryState+0x130>
	else if(character == 0x46)	//ESC [ F	Cursor Preceding Line
    10fa:	2846      	cmp	r0, #70	; 0x46
    10fc:	d100      	bne.n	1100 <CSIentryState+0x40>
    10fe:	e07a      	b.n	11f6 <CSIentryState+0x136>
	else if(character == 0x66)	//ESC [ f HVP
    1100:	2866      	cmp	r0, #102	; 0x66
    1102:	d100      	bne.n	1106 <CSIentryState+0x46>
    1104:	e07a      	b.n	11fc <CSIentryState+0x13c>
	else if(character == 0x47)	//ESC [ G	Cursor Horizontal Absolute
    1106:	2847      	cmp	r0, #71	; 0x47
    1108:	d100      	bne.n	110c <CSIentryState+0x4c>
    110a:	e07a      	b.n	1202 <CSIentryState+0x142>
	else if(character == 0x67)	//ESC [ g TBC
    110c:	2867      	cmp	r0, #103	; 0x67
    110e:	d100      	bne.n	1112 <CSIentryState+0x52>
    1110:	e07a      	b.n	1208 <CSIentryState+0x148>
	else if(character == 0x48)	//ESC [ H	Cursor Position
    1112:	2848      	cmp	r0, #72	; 0x48
    1114:	d100      	bne.n	1118 <CSIentryState+0x58>
    1116:	e07b      	b.n	1210 <CSIentryState+0x150>
	else if(character == 0x68)	//ESC [ h Set Mode
    1118:	2868      	cmp	r0, #104	; 0x68
    111a:	d100      	bne.n	111e <CSIentryState+0x5e>
    111c:	e07b      	b.n	1216 <CSIentryState+0x156>
	else if(character == 0x49)	//ESC [ I	Cursor Horizontal Tab
    111e:	2849      	cmp	r0, #73	; 0x49
    1120:	d100      	bne.n	1124 <CSIentryState+0x64>
    1122:	e07c      	b.n	121e <CSIentryState+0x15e>
	else if(character == 0x4A)	//ESC [ J	Erase In Display
    1124:	284a      	cmp	r0, #74	; 0x4a
    1126:	d100      	bne.n	112a <CSIentryState+0x6a>
    1128:	e07d      	b.n	1226 <CSIentryState+0x166>
	else if(character == 0x4B)	//ESC [ K	Erase In Line
    112a:	284b      	cmp	r0, #75	; 0x4b
    112c:	d100      	bne.n	1130 <CSIentryState+0x70>
    112e:	e07d      	b.n	122c <CSIentryState+0x16c>
	else if(character == 0x4C)	//ESC [ L 
    1130:	284c      	cmp	r0, #76	; 0x4c
    1132:	d100      	bne.n	1136 <CSIentryState+0x76>
    1134:	e07d      	b.n	1232 <CSIentryState+0x172>
	else if(character == 0x6C)	//ESC [ l	Reset mode
    1136:	286c      	cmp	r0, #108	; 0x6c
    1138:	d100      	bne.n	113c <CSIentryState+0x7c>
    113a:	e07e      	b.n	123a <CSIentryState+0x17a>
	else if(character == 0x4D)	//ESC [ M
    113c:	284d      	cmp	r0, #77	; 0x4d
    113e:	d100      	bne.n	1142 <CSIentryState+0x82>
    1140:	e07f      	b.n	1242 <CSIentryState+0x182>
	else if(character == 0x6D)	//ESC [ m	Select Graphic Rendition
    1142:	286d      	cmp	r0, #109	; 0x6d
    1144:	d100      	bne.n	1148 <CSIentryState+0x88>
    1146:	e080      	b.n	124a <CSIentryState+0x18a>
	else if(character == 0x6E)	//ESC [ n Device Status Report
    1148:	286e      	cmp	r0, #110	; 0x6e
    114a:	d100      	bne.n	114e <CSIentryState+0x8e>
    114c:	e080      	b.n	1250 <CSIentryState+0x190>
	else if(character == 0x50)	//ESC [ P	Delete Character
    114e:	2850      	cmp	r0, #80	; 0x50
    1150:	d100      	bne.n	1154 <CSIentryState+0x94>
    1152:	e080      	b.n	1256 <CSIentryState+0x196>
	else if(character == 0x51)	//ESC [ Q	Select Edit Extent Mode
    1154:	2851      	cmp	r0, #81	; 0x51
    1156:	d100      	bne.n	115a <CSIentryState+0x9a>
    1158:	e081      	b.n	125e <CSIentryState+0x19e>
	else if(character == 0x71)	//ESC [ q	Set Keyboard LEDs
    115a:	2871      	cmp	r0, #113	; 0x71
    115c:	d100      	bne.n	1160 <CSIentryState+0xa0>
    115e:	e082      	b.n	1266 <CSIentryState+0x1a6>
	else if(character == 0x72)	//ESC [ r	DECSTBM
    1160:	2872      	cmp	r0, #114	; 0x72
    1162:	d100      	bne.n	1166 <CSIentryState+0xa6>
    1164:	e083      	b.n	126e <CSIentryState+0x1ae>
	else if(character == 0x73)	//ESC [ s	Save Cursor Position
    1166:	2873      	cmp	r0, #115	; 0x73
    1168:	d100      	bne.n	116c <CSIentryState+0xac>
    116a:	e084      	b.n	1276 <CSIentryState+0x1b6>
	else if(character == 0x75)	//ESC [ u	Restore Cursor Position
    116c:	2875      	cmp	r0, #117	; 0x75
    116e:	d100      	bne.n	1172 <CSIentryState+0xb2>
    1170:	e084      	b.n	127c <CSIentryState+0x1bc>
	else if(character == 0x58)	//ESC [ X
    1172:	2858      	cmp	r0, #88	; 0x58
    1174:	d100      	bne.n	1178 <CSIentryState+0xb8>
    1176:	e084      	b.n	1282 <CSIentryState+0x1c2>
	else if(character == 0x57)	//ESC [ W	Cursor Tabulation Control
    1178:	2857      	cmp	r0, #87	; 0x57
    117a:	d100      	bne.n	117e <CSIentryState+0xbe>
    117c:	e085      	b.n	128a <CSIentryState+0x1ca>
	else if(character == 0x5A)	//ESC [ Z	Cursor Backwards Tab
    117e:	285a      	cmp	r0, #90	; 0x5a
    1180:	d100      	bne.n	1184 <CSIentryState+0xc4>
    1182:	e086      	b.n	1292 <CSIentryState+0x1d2>
	else if(character == 0x60)	//ESC [ ` HPA
    1184:	2860      	cmp	r0, #96	; 0x60
    1186:	d100      	bne.n	118a <CSIentryState+0xca>
    1188:	e087      	b.n	129a <CSIentryState+0x1da>
	else if(character >= 0x30 && character <= 0x39) // if the character is a digit 0-9
    118a:	0003      	movs	r3, r0
    118c:	3b30      	subs	r3, #48	; 0x30
    118e:	2b09      	cmp	r3, #9
    1190:	d800      	bhi.n	1194 <CSIentryState+0xd4>
    1192:	e086      	b.n	12a2 <CSIentryState+0x1e2>
	else if(character == 0x3B)	//Semicolon ; parameter deliminator
    1194:	283b      	cmp	r0, #59	; 0x3b
    1196:	d100      	bne.n	119a <CSIentryState+0xda>
    1198:	e089      	b.n	12ae <CSIentryState+0x1ee>
	else if(character == 0x3F)	//Question '?'; this is a param
    119a:	283f      	cmp	r0, #63	; 0x3f
    119c:	d100      	bne.n	11a0 <CSIentryState+0xe0>
    119e:	e08c      	b.n	12ba <CSIentryState+0x1fa>
	else if(character == 0x1B)		//ESC, send back to stateESC
    11a0:	281b      	cmp	r0, #27
    11a2:	d100      	bne.n	11a6 <CSIentryState+0xe6>
    11a4:	e08f      	b.n	12c6 <CSIentryState+0x206>
	else if(character == 0x3A)
    11a6:	283a      	cmp	r0, #58	; 0x3a
    11a8:	d100      	bne.n	11ac <CSIentryState+0xec>
    11aa:	e090      	b.n	12ce <CSIentryState+0x20e>
		currentState = stateGround;
    11ac:	2200      	movs	r2, #0
    11ae:	4b4a      	ldr	r3, [pc, #296]	; (12d8 <CSIentryState+0x218>)
    11b0:	701a      	strb	r2, [r3, #0]
}
    11b2:	e002      	b.n	11ba <CSIentryState+0xfa>
	currentState = stateGround;
    11b4:	2200      	movs	r2, #0
    11b6:	4b48      	ldr	r3, [pc, #288]	; (12d8 <CSIentryState+0x218>)
    11b8:	701a      	strb	r2, [r3, #0]
}
    11ba:	bd10      	pop	{r4, pc}
		CUU();
    11bc:	4b47      	ldr	r3, [pc, #284]	; (12dc <CSIentryState+0x21c>)
    11be:	4798      	blx	r3
    11c0:	e7fb      	b.n	11ba <CSIentryState+0xfa>
		CUF();
    11c2:	4b47      	ldr	r3, [pc, #284]	; (12e0 <CSIentryState+0x220>)
    11c4:	4798      	blx	r3
    11c6:	e7f8      	b.n	11ba <CSIentryState+0xfa>
		CUD();
    11c8:	4b46      	ldr	r3, [pc, #280]	; (12e4 <CSIentryState+0x224>)
    11ca:	4798      	blx	r3
    11cc:	e7f5      	b.n	11ba <CSIentryState+0xfa>
		CUF();
    11ce:	4b44      	ldr	r3, [pc, #272]	; (12e0 <CSIentryState+0x220>)
    11d0:	4798      	blx	r3
    11d2:	e7f2      	b.n	11ba <CSIentryState+0xfa>
		printf("%s",DECIDreturn);
    11d4:	4944      	ldr	r1, [pc, #272]	; (12e8 <CSIentryState+0x228>)
    11d6:	4845      	ldr	r0, [pc, #276]	; (12ec <CSIentryState+0x22c>)
    11d8:	4b45      	ldr	r3, [pc, #276]	; (12f0 <CSIentryState+0x230>)
    11da:	4798      	blx	r3
		currentState = stateGround;
    11dc:	2200      	movs	r2, #0
    11de:	4b3e      	ldr	r3, [pc, #248]	; (12d8 <CSIentryState+0x218>)
    11e0:	701a      	strb	r2, [r3, #0]
    11e2:	e7ea      	b.n	11ba <CSIentryState+0xfa>
		CUB();
    11e4:	4b43      	ldr	r3, [pc, #268]	; (12f4 <CSIentryState+0x234>)
    11e6:	4798      	blx	r3
    11e8:	e7e7      	b.n	11ba <CSIentryState+0xfa>
		CNL();
    11ea:	4b43      	ldr	r3, [pc, #268]	; (12f8 <CSIentryState+0x238>)
    11ec:	4798      	blx	r3
    11ee:	e7e4      	b.n	11ba <CSIentryState+0xfa>
		CUD();
    11f0:	4b3c      	ldr	r3, [pc, #240]	; (12e4 <CSIentryState+0x224>)
    11f2:	4798      	blx	r3
    11f4:	e7e1      	b.n	11ba <CSIentryState+0xfa>
		CPL();
    11f6:	4b41      	ldr	r3, [pc, #260]	; (12fc <CSIentryState+0x23c>)
    11f8:	4798      	blx	r3
    11fa:	e7de      	b.n	11ba <CSIentryState+0xfa>
		CUP();
    11fc:	4b40      	ldr	r3, [pc, #256]	; (1300 <CSIentryState+0x240>)
    11fe:	4798      	blx	r3
    1200:	e7db      	b.n	11ba <CSIentryState+0xfa>
		CHA();
    1202:	4b40      	ldr	r3, [pc, #256]	; (1304 <CSIentryState+0x244>)
    1204:	4798      	blx	r3
    1206:	e7d8      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateGround;
    1208:	2200      	movs	r2, #0
    120a:	4b33      	ldr	r3, [pc, #204]	; (12d8 <CSIentryState+0x218>)
    120c:	701a      	strb	r2, [r3, #0]
    120e:	e7d4      	b.n	11ba <CSIentryState+0xfa>
		CUP();
    1210:	4b3b      	ldr	r3, [pc, #236]	; (1300 <CSIentryState+0x240>)
    1212:	4798      	blx	r3
    1214:	e7d1      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateGround;
    1216:	2200      	movs	r2, #0
    1218:	4b2f      	ldr	r3, [pc, #188]	; (12d8 <CSIentryState+0x218>)
    121a:	701a      	strb	r2, [r3, #0]
    121c:	e7cd      	b.n	11ba <CSIentryState+0xfa>
	currentState = stateGround;
    121e:	2200      	movs	r2, #0
    1220:	4b2d      	ldr	r3, [pc, #180]	; (12d8 <CSIentryState+0x218>)
    1222:	701a      	strb	r2, [r3, #0]
    1224:	e7c9      	b.n	11ba <CSIentryState+0xfa>
		ED();
    1226:	4b38      	ldr	r3, [pc, #224]	; (1308 <CSIentryState+0x248>)
    1228:	4798      	blx	r3
    122a:	e7c6      	b.n	11ba <CSIentryState+0xfa>
		EL();
    122c:	4b37      	ldr	r3, [pc, #220]	; (130c <CSIentryState+0x24c>)
    122e:	4798      	blx	r3
    1230:	e7c3      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateGround;
    1232:	2200      	movs	r2, #0
    1234:	4b28      	ldr	r3, [pc, #160]	; (12d8 <CSIentryState+0x218>)
    1236:	701a      	strb	r2, [r3, #0]
    1238:	e7bf      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateGround;
    123a:	2200      	movs	r2, #0
    123c:	4b26      	ldr	r3, [pc, #152]	; (12d8 <CSIentryState+0x218>)
    123e:	701a      	strb	r2, [r3, #0]
    1240:	e7bb      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateGround;
    1242:	2200      	movs	r2, #0
    1244:	4b24      	ldr	r3, [pc, #144]	; (12d8 <CSIentryState+0x218>)
    1246:	701a      	strb	r2, [r3, #0]
    1248:	e7b7      	b.n	11ba <CSIentryState+0xfa>
		SGR();
    124a:	4b31      	ldr	r3, [pc, #196]	; (1310 <CSIentryState+0x250>)
    124c:	4798      	blx	r3
    124e:	e7b4      	b.n	11ba <CSIentryState+0xfa>
		DSR();
    1250:	4b30      	ldr	r3, [pc, #192]	; (1314 <CSIentryState+0x254>)
    1252:	4798      	blx	r3
    1254:	e7b1      	b.n	11ba <CSIentryState+0xfa>
	currentState = stateGround;
    1256:	2200      	movs	r2, #0
    1258:	4b1f      	ldr	r3, [pc, #124]	; (12d8 <CSIentryState+0x218>)
    125a:	701a      	strb	r2, [r3, #0]
    125c:	e7ad      	b.n	11ba <CSIentryState+0xfa>
	currentState = stateGround;
    125e:	2200      	movs	r2, #0
    1260:	4b1d      	ldr	r3, [pc, #116]	; (12d8 <CSIentryState+0x218>)
    1262:	701a      	strb	r2, [r3, #0]
    1264:	e7a9      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateGround;
    1266:	2200      	movs	r2, #0
    1268:	4b1b      	ldr	r3, [pc, #108]	; (12d8 <CSIentryState+0x218>)
    126a:	701a      	strb	r2, [r3, #0]
    126c:	e7a5      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateGround;
    126e:	2200      	movs	r2, #0
    1270:	4b19      	ldr	r3, [pc, #100]	; (12d8 <CSIentryState+0x218>)
    1272:	701a      	strb	r2, [r3, #0]
    1274:	e7a1      	b.n	11ba <CSIentryState+0xfa>
		SC();
    1276:	4b28      	ldr	r3, [pc, #160]	; (1318 <CSIentryState+0x258>)
    1278:	4798      	blx	r3
    127a:	e79e      	b.n	11ba <CSIentryState+0xfa>
		RC();
    127c:	4b27      	ldr	r3, [pc, #156]	; (131c <CSIentryState+0x25c>)
    127e:	4798      	blx	r3
    1280:	e79b      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateGround;
    1282:	2200      	movs	r2, #0
    1284:	4b14      	ldr	r3, [pc, #80]	; (12d8 <CSIentryState+0x218>)
    1286:	701a      	strb	r2, [r3, #0]
    1288:	e797      	b.n	11ba <CSIentryState+0xfa>
	currentState = stateGround;
    128a:	2200      	movs	r2, #0
    128c:	4b12      	ldr	r3, [pc, #72]	; (12d8 <CSIentryState+0x218>)
    128e:	701a      	strb	r2, [r3, #0]
    1290:	e793      	b.n	11ba <CSIentryState+0xfa>
	currentState = stateGround;
    1292:	2200      	movs	r2, #0
    1294:	4b10      	ldr	r3, [pc, #64]	; (12d8 <CSIentryState+0x218>)
    1296:	701a      	strb	r2, [r3, #0]
    1298:	e78f      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateGround;
    129a:	2200      	movs	r2, #0
    129c:	4b0e      	ldr	r3, [pc, #56]	; (12d8 <CSIentryState+0x218>)
    129e:	701a      	strb	r2, [r3, #0]
    12a0:	e78b      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateCSIparam;
    12a2:	2204      	movs	r2, #4
    12a4:	4b0c      	ldr	r3, [pc, #48]	; (12d8 <CSIentryState+0x218>)
    12a6:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    12a8:	4b1d      	ldr	r3, [pc, #116]	; (1320 <CSIentryState+0x260>)
    12aa:	4798      	blx	r3
    12ac:	e785      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateCSIparam;
    12ae:	2204      	movs	r2, #4
    12b0:	4b09      	ldr	r3, [pc, #36]	; (12d8 <CSIentryState+0x218>)
    12b2:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    12b4:	4b1a      	ldr	r3, [pc, #104]	; (1320 <CSIentryState+0x260>)
    12b6:	4798      	blx	r3
    12b8:	e77f      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateCSIparam;
    12ba:	2204      	movs	r2, #4
    12bc:	4b06      	ldr	r3, [pc, #24]	; (12d8 <CSIentryState+0x218>)
    12be:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    12c0:	4b17      	ldr	r3, [pc, #92]	; (1320 <CSIentryState+0x260>)
    12c2:	4798      	blx	r3
    12c4:	e779      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateESC;
    12c6:	2201      	movs	r2, #1
    12c8:	4b03      	ldr	r3, [pc, #12]	; (12d8 <CSIentryState+0x218>)
    12ca:	701a      	strb	r2, [r3, #0]
    12cc:	e775      	b.n	11ba <CSIentryState+0xfa>
		currentState = stateCSIignore;
    12ce:	2205      	movs	r2, #5
    12d0:	4b01      	ldr	r3, [pc, #4]	; (12d8 <CSIentryState+0x218>)
    12d2:	701a      	strb	r2, [r3, #0]
    12d4:	e771      	b.n	11ba <CSIentryState+0xfa>
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	200002f1 	.word	0x200002f1
    12dc:	00000651 	.word	0x00000651
    12e0:	00000799 	.word	0x00000799
    12e4:	000006f5 	.word	0x000006f5
    12e8:	0000609c 	.word	0x0000609c
    12ec:	000060d0 	.word	0x000060d0
    12f0:	00004df5 	.word	0x00004df5
    12f4:	00000841 	.word	0x00000841
    12f8:	000008dd 	.word	0x000008dd
    12fc:	00000975 	.word	0x00000975
    1300:	00000a8d 	.word	0x00000a8d
    1304:	00000a09 	.word	0x00000a09
    1308:	00000b39 	.word	0x00000b39
    130c:	00000c75 	.word	0x00000c75
    1310:	00000d69 	.word	0x00000d69
    1314:	00000f15 	.word	0x00000f15
    1318:	0000036d 	.word	0x0000036d
    131c:	00000399 	.word	0x00000399
    1320:	00001061 	.word	0x00001061

00001324 <nextTab>:


int nextTab(int a) 
{
    1324:	b510      	push	{r4, lr}
    1326:	b0d0      	sub	sp, #320	; 0x140
    1328:	0004      	movs	r4, r0
	int tabArray[] =
    132a:	22a0      	movs	r2, #160	; 0xa0
    132c:	0052      	lsls	r2, r2, #1
    132e:	4905      	ldr	r1, [pc, #20]	; (1344 <nextTab+0x20>)
    1330:	3104      	adds	r1, #4
    1332:	4668      	mov	r0, sp
    1334:	4b04      	ldr	r3, [pc, #16]	; (1348 <nextTab+0x24>)
    1336:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
    1338:	00a4      	lsls	r4, r4, #2
    133a:	466b      	mov	r3, sp
    133c:	58e0      	ldr	r0, [r4, r3]
}
    133e:	b050      	add	sp, #320	; 0x140
    1340:	bd10      	pop	{r4, pc}
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	00005f58 	.word	0x00005f58
    1348:	00004c81 	.word	0x00004c81

0000134c <groundState>:
{
    134c:	b570      	push	{r4, r5, r6, lr}
    134e:	0004      	movs	r4, r0
	clearQueues();									//parser and paramQueues cleared
    1350:	4bba      	ldr	r3, [pc, #744]	; (163c <groundState+0x2f0>)
    1352:	4798      	blx	r3
	if(character == 0x00)							//NUL 0x00 DO NOTHING
    1354:	2c07      	cmp	r4, #7
    1356:	d800      	bhi.n	135a <groundState+0xe>
    1358:	e084      	b.n	1464 <groundState+0x118>
	else if(character == 0x08)						//BS 0x08 Backspace
    135a:	2c08      	cmp	r4, #8
    135c:	d100      	bne.n	1360 <groundState+0x14>
    135e:	e07d      	b.n	145c <groundState+0x110>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
    1360:	2c09      	cmp	r4, #9
    1362:	d100      	bne.n	1366 <groundState+0x1a>
    1364:	e098      	b.n	1498 <groundState+0x14c>
	else if(character == 0x0A)						//LF 0x0A Line Feed
    1366:	2c0a      	cmp	r4, #10
    1368:	d100      	bne.n	136c <groundState+0x20>
    136a:	e0b7      	b.n	14dc <groundState+0x190>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
    136c:	2c0b      	cmp	r4, #11
    136e:	d100      	bne.n	1372 <groundState+0x26>
    1370:	e10b      	b.n	158a <groundState+0x23e>
	else if(character == 0x0C)						//FF 0x0C Form Feed
    1372:	2c0c      	cmp	r4, #12
    1374:	d100      	bne.n	1378 <groundState+0x2c>
    1376:	e183      	b.n	1680 <groundState+0x334>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
    1378:	2c0d      	cmp	r4, #13
    137a:	d100      	bne.n	137e <groundState+0x32>
    137c:	e1d8      	b.n	1730 <groundState+0x3e4>
	else if(character == 0x0E)						//SO 0x0E Shift Out
    137e:	0023      	movs	r3, r4
    1380:	3b0e      	subs	r3, #14
    1382:	2b0c      	cmp	r3, #12
    1384:	d96e      	bls.n	1464 <groundState+0x118>
	else if(character == 0x1B)						//ESC 0x1B Escape
    1386:	2c1b      	cmp	r4, #27
    1388:	d100      	bne.n	138c <groundState+0x40>
    138a:	e1f7      	b.n	177c <groundState+0x430>
	else if(character == 0x1C)						//FS 0x1C File Separator
    138c:	0023      	movs	r3, r4
    138e:	3b1c      	subs	r3, #28
    1390:	2b03      	cmp	r3, #3
    1392:	d967      	bls.n	1464 <groundState+0x118>
	else if(character == 0x7F)						//DEL 0x7F Delete
    1394:	2c7f      	cmp	r4, #127	; 0x7f
    1396:	d065      	beq.n	1464 <groundState+0x118>
		consoleDisplay[xCharPos][yCharPos] = character;
    1398:	4ba9      	ldr	r3, [pc, #676]	; (1640 <groundState+0x2f4>)
    139a:	881a      	ldrh	r2, [r3, #0]
    139c:	4ba9      	ldr	r3, [pc, #676]	; (1644 <groundState+0x2f8>)
    139e:	881b      	ldrh	r3, [r3, #0]
    13a0:	2018      	movs	r0, #24
    13a2:	4350      	muls	r0, r2
    13a4:	49a8      	ldr	r1, [pc, #672]	; (1648 <groundState+0x2fc>)
    13a6:	1809      	adds	r1, r1, r0
    13a8:	54cc      	strb	r4, [r1, r3]
		if(textReverseVideo == true)  //If this is reverse Text
    13aa:	49a8      	ldr	r1, [pc, #672]	; (164c <groundState+0x300>)
    13ac:	7809      	ldrb	r1, [r1, #0]
    13ae:	2900      	cmp	r1, #0
    13b0:	d100      	bne.n	13b4 <groundState+0x68>
    13b2:	e1e7      	b.n	1784 <groundState+0x438>
			SetBit(consoleSGR[xCharPos][yCharPos],7);
    13b4:	2018      	movs	r0, #24
    13b6:	4350      	muls	r0, r2
    13b8:	49a5      	ldr	r1, [pc, #660]	; (1650 <groundState+0x304>)
    13ba:	1809      	adds	r1, r1, r0
    13bc:	5ccd      	ldrb	r5, [r1, r3]
    13be:	2080      	movs	r0, #128	; 0x80
    13c0:	4240      	negs	r0, r0
    13c2:	4328      	orrs	r0, r5
    13c4:	54c8      	strb	r0, [r1, r3]
		if(textBold == true)
    13c6:	49a3      	ldr	r1, [pc, #652]	; (1654 <groundState+0x308>)
    13c8:	7809      	ldrb	r1, [r1, #0]
    13ca:	2900      	cmp	r1, #0
    13cc:	d100      	bne.n	13d0 <groundState+0x84>
    13ce:	e1e2      	b.n	1796 <groundState+0x44a>
			SetBit(consoleSGR[xCharPos][yCharPos],1);
    13d0:	2018      	movs	r0, #24
    13d2:	4350      	muls	r0, r2
    13d4:	499e      	ldr	r1, [pc, #632]	; (1650 <groundState+0x304>)
    13d6:	1809      	adds	r1, r1, r0
    13d8:	5ccd      	ldrb	r5, [r1, r3]
    13da:	2002      	movs	r0, #2
    13dc:	4328      	orrs	r0, r5
    13de:	54c8      	strb	r0, [r1, r3]
		if(textUnderscore == true)
    13e0:	499d      	ldr	r1, [pc, #628]	; (1658 <groundState+0x30c>)
    13e2:	7809      	ldrb	r1, [r1, #0]
    13e4:	2900      	cmp	r1, #0
    13e6:	d100      	bne.n	13ea <groundState+0x9e>
    13e8:	e1de      	b.n	17a8 <groundState+0x45c>
			SetBit(consoleSGR[xCharPos][yCharPos],4);
    13ea:	2018      	movs	r0, #24
    13ec:	4350      	muls	r0, r2
    13ee:	4998      	ldr	r1, [pc, #608]	; (1650 <groundState+0x304>)
    13f0:	1809      	adds	r1, r1, r0
    13f2:	5ccd      	ldrb	r5, [r1, r3]
    13f4:	2010      	movs	r0, #16
    13f6:	4328      	orrs	r0, r5
    13f8:	54c8      	strb	r0, [r1, r3]
		if(textBlink == true)
    13fa:	4998      	ldr	r1, [pc, #608]	; (165c <groundState+0x310>)
    13fc:	7809      	ldrb	r1, [r1, #0]
    13fe:	2900      	cmp	r1, #0
    1400:	d100      	bne.n	1404 <groundState+0xb8>
    1402:	e1da      	b.n	17ba <groundState+0x46e>
			SetBit(consoleSGR[xCharPos][yCharPos],5);
    1404:	2018      	movs	r0, #24
    1406:	4350      	muls	r0, r2
    1408:	4991      	ldr	r1, [pc, #580]	; (1650 <groundState+0x304>)
    140a:	1809      	adds	r1, r1, r0
    140c:	5ccd      	ldrb	r5, [r1, r3]
    140e:	2020      	movs	r0, #32
    1410:	4328      	orrs	r0, r5
    1412:	54c8      	strb	r0, [r1, r3]
		consoleColors[xCharPos][yCharPos] |= (textForeground << 16) | textBackground;
    1414:	4992      	ldr	r1, [pc, #584]	; (1660 <groundState+0x314>)
    1416:	2518      	movs	r5, #24
    1418:	436a      	muls	r2, r5
    141a:	18d3      	adds	r3, r2, r3
    141c:	009b      	lsls	r3, r3, #2
    141e:	4a91      	ldr	r2, [pc, #580]	; (1664 <groundState+0x318>)
    1420:	8812      	ldrh	r2, [r2, #0]
    1422:	0412      	lsls	r2, r2, #16
    1424:	4890      	ldr	r0, [pc, #576]	; (1668 <groundState+0x31c>)
    1426:	8800      	ldrh	r0, [r0, #0]
    1428:	4302      	orrs	r2, r0
    142a:	5858      	ldr	r0, [r3, r1]
    142c:	4302      	orrs	r2, r0
    142e:	505a      	str	r2, [r3, r1]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1430:	0020      	movs	r0, r4
    1432:	4e8e      	ldr	r6, [pc, #568]	; (166c <groundState+0x320>)
    1434:	47b0      	blx	r6
		xCharPos++;
    1436:	4c82      	ldr	r4, [pc, #520]	; (1640 <groundState+0x2f4>)
    1438:	8823      	ldrh	r3, [r4, #0]
    143a:	3301      	adds	r3, #1
    143c:	b29b      	uxth	r3, r3
    143e:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1440:	4a80      	ldr	r2, [pc, #512]	; (1644 <groundState+0x2f8>)
    1442:	8812      	ldrh	r2, [r2, #0]
    1444:	435d      	muls	r5, r3
    1446:	4b80      	ldr	r3, [pc, #512]	; (1648 <groundState+0x2fc>)
    1448:	195d      	adds	r5, r3, r5
    144a:	5ca8      	ldrb	r0, [r5, r2]
    144c:	47b0      	blx	r6
		if(xCharPos > 79)		//END OF LINE
    144e:	8823      	ldrh	r3, [r4, #0]
    1450:	2b4f      	cmp	r3, #79	; 0x4f
    1452:	d907      	bls.n	1464 <groundState+0x118>
			xCharPos--;
    1454:	3b01      	subs	r3, #1
    1456:	4a7a      	ldr	r2, [pc, #488]	; (1640 <groundState+0x2f4>)
    1458:	8013      	strh	r3, [r2, #0]
}
    145a:	e003      	b.n	1464 <groundState+0x118>
		if(xCharPos > 0)
    145c:	4b78      	ldr	r3, [pc, #480]	; (1640 <groundState+0x2f4>)
    145e:	881b      	ldrh	r3, [r3, #0]
    1460:	2b00      	cmp	r3, #0
    1462:	d100      	bne.n	1466 <groundState+0x11a>
}
    1464:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1466:	4c78      	ldr	r4, [pc, #480]	; (1648 <groundState+0x2fc>)
    1468:	4d76      	ldr	r5, [pc, #472]	; (1644 <groundState+0x2f8>)
    146a:	8829      	ldrh	r1, [r5, #0]
    146c:	005a      	lsls	r2, r3, #1
    146e:	18d3      	adds	r3, r2, r3
    1470:	00db      	lsls	r3, r3, #3
    1472:	18e3      	adds	r3, r4, r3
    1474:	5c58      	ldrb	r0, [r3, r1]
    1476:	4e7d      	ldr	r6, [pc, #500]	; (166c <groundState+0x320>)
    1478:	47b0      	blx	r6
			xCharPos--;
    147a:	4a71      	ldr	r2, [pc, #452]	; (1640 <groundState+0x2f4>)
    147c:	8813      	ldrh	r3, [r2, #0]
    147e:	3b01      	subs	r3, #1
    1480:	b29b      	uxth	r3, r3
    1482:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    1484:	8829      	ldrh	r1, [r5, #0]
    1486:	005a      	lsls	r2, r3, #1
    1488:	18d3      	adds	r3, r2, r3
    148a:	00db      	lsls	r3, r3, #3
    148c:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    148e:	5c58      	ldrb	r0, [r3, r1]
    1490:	47b0      	blx	r6
			blinkCursor();
    1492:	4b77      	ldr	r3, [pc, #476]	; (1670 <groundState+0x324>)
    1494:	4798      	blx	r3
    1496:	e7e5      	b.n	1464 <groundState+0x118>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1498:	4c69      	ldr	r4, [pc, #420]	; (1640 <groundState+0x2f4>)
    149a:	8822      	ldrh	r2, [r4, #0]
    149c:	4b69      	ldr	r3, [pc, #420]	; (1644 <groundState+0x2f8>)
    149e:	8819      	ldrh	r1, [r3, #0]
    14a0:	0053      	lsls	r3, r2, #1
    14a2:	189b      	adds	r3, r3, r2
    14a4:	00db      	lsls	r3, r3, #3
    14a6:	4a68      	ldr	r2, [pc, #416]	; (1648 <groundState+0x2fc>)
    14a8:	18d3      	adds	r3, r2, r3
    14aa:	5c58      	ldrb	r0, [r3, r1]
    14ac:	4b6f      	ldr	r3, [pc, #444]	; (166c <groundState+0x320>)
    14ae:	4798      	blx	r3
		if(xCharPos <= 79)
    14b0:	8820      	ldrh	r0, [r4, #0]
    14b2:	284f      	cmp	r0, #79	; 0x4f
    14b4:	d803      	bhi.n	14be <groundState+0x172>
			xCharPos = nextTab(xCharPos);
    14b6:	4b6f      	ldr	r3, [pc, #444]	; (1674 <groundState+0x328>)
    14b8:	4798      	blx	r3
    14ba:	4b61      	ldr	r3, [pc, #388]	; (1640 <groundState+0x2f4>)
    14bc:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    14be:	4b60      	ldr	r3, [pc, #384]	; (1640 <groundState+0x2f4>)
    14c0:	881a      	ldrh	r2, [r3, #0]
    14c2:	4b60      	ldr	r3, [pc, #384]	; (1644 <groundState+0x2f8>)
    14c4:	8819      	ldrh	r1, [r3, #0]
    14c6:	0053      	lsls	r3, r2, #1
    14c8:	189b      	adds	r3, r3, r2
    14ca:	00db      	lsls	r3, r3, #3
    14cc:	4a5e      	ldr	r2, [pc, #376]	; (1648 <groundState+0x2fc>)
    14ce:	18d3      	adds	r3, r2, r3
    14d0:	5c58      	ldrb	r0, [r3, r1]
    14d2:	4b66      	ldr	r3, [pc, #408]	; (166c <groundState+0x320>)
    14d4:	4798      	blx	r3
		blinkCursor();
    14d6:	4b66      	ldr	r3, [pc, #408]	; (1670 <groundState+0x324>)
    14d8:	4798      	blx	r3
    14da:	e7c3      	b.n	1464 <groundState+0x118>
		if(yCharPos == 23)
    14dc:	4b59      	ldr	r3, [pc, #356]	; (1644 <groundState+0x2f8>)
    14de:	881a      	ldrh	r2, [r3, #0]
    14e0:	2a17      	cmp	r2, #23
    14e2:	d032      	beq.n	154a <groundState+0x1fe>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    14e4:	4c58      	ldr	r4, [pc, #352]	; (1648 <groundState+0x2fc>)
    14e6:	4d56      	ldr	r5, [pc, #344]	; (1640 <groundState+0x2f4>)
    14e8:	8829      	ldrh	r1, [r5, #0]
    14ea:	004b      	lsls	r3, r1, #1
    14ec:	185b      	adds	r3, r3, r1
    14ee:	00db      	lsls	r3, r3, #3
    14f0:	18e3      	adds	r3, r4, r3
    14f2:	5c98      	ldrb	r0, [r3, r2]
    14f4:	4e5d      	ldr	r6, [pc, #372]	; (166c <groundState+0x320>)
    14f6:	47b0      	blx	r6
			yCharPos++;
    14f8:	4a52      	ldr	r2, [pc, #328]	; (1644 <groundState+0x2f8>)
    14fa:	8813      	ldrh	r3, [r2, #0]
    14fc:	3301      	adds	r3, #1
    14fe:	b29b      	uxth	r3, r3
    1500:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1502:	8829      	ldrh	r1, [r5, #0]
    1504:	004a      	lsls	r2, r1, #1
    1506:	1852      	adds	r2, r2, r1
    1508:	00d2      	lsls	r2, r2, #3
    150a:	18a4      	adds	r4, r4, r2
    150c:	5ce0      	ldrb	r0, [r4, r3]
    150e:	47b0      	blx	r6
			blinkCursor();
    1510:	4b57      	ldr	r3, [pc, #348]	; (1670 <groundState+0x324>)
    1512:	4798      	blx	r3
		if(lineFeed)
    1514:	4b58      	ldr	r3, [pc, #352]	; (1678 <groundState+0x32c>)
    1516:	781b      	ldrb	r3, [r3, #0]
    1518:	2b00      	cmp	r3, #0
    151a:	d0a3      	beq.n	1464 <groundState+0x118>
			if(yCharPos == 23)
    151c:	4b49      	ldr	r3, [pc, #292]	; (1644 <groundState+0x2f8>)
    151e:	881a      	ldrh	r2, [r3, #0]
    1520:	2a17      	cmp	r2, #23
    1522:	d021      	beq.n	1568 <groundState+0x21c>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1524:	4d48      	ldr	r5, [pc, #288]	; (1648 <groundState+0x2fc>)
    1526:	4e46      	ldr	r6, [pc, #280]	; (1640 <groundState+0x2f4>)
    1528:	8831      	ldrh	r1, [r6, #0]
    152a:	004b      	lsls	r3, r1, #1
    152c:	185b      	adds	r3, r3, r1
    152e:	00db      	lsls	r3, r3, #3
    1530:	18eb      	adds	r3, r5, r3
    1532:	5c98      	ldrb	r0, [r3, r2]
    1534:	4c4d      	ldr	r4, [pc, #308]	; (166c <groundState+0x320>)
    1536:	47a0      	blx	r4
				xCharPos = 0;
    1538:	2300      	movs	r3, #0
    153a:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    153c:	4b41      	ldr	r3, [pc, #260]	; (1644 <groundState+0x2f8>)
    153e:	881b      	ldrh	r3, [r3, #0]
    1540:	5ce8      	ldrb	r0, [r5, r3]
    1542:	47a0      	blx	r4
				blinkCursor();
    1544:	4b4a      	ldr	r3, [pc, #296]	; (1670 <groundState+0x324>)
    1546:	4798      	blx	r3
    1548:	e78c      	b.n	1464 <groundState+0x118>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    154a:	4b3d      	ldr	r3, [pc, #244]	; (1640 <groundState+0x2f4>)
    154c:	881a      	ldrh	r2, [r3, #0]
    154e:	0053      	lsls	r3, r2, #1
    1550:	189b      	adds	r3, r3, r2
    1552:	00db      	lsls	r3, r3, #3
    1554:	4a3c      	ldr	r2, [pc, #240]	; (1648 <groundState+0x2fc>)
    1556:	18d3      	adds	r3, r2, r3
    1558:	7dd8      	ldrb	r0, [r3, #23]
    155a:	4b44      	ldr	r3, [pc, #272]	; (166c <groundState+0x320>)
    155c:	4798      	blx	r3
			newLine();
    155e:	4b47      	ldr	r3, [pc, #284]	; (167c <groundState+0x330>)
    1560:	4798      	blx	r3
			blinkCursor();
    1562:	4b43      	ldr	r3, [pc, #268]	; (1670 <groundState+0x324>)
    1564:	4798      	blx	r3
    1566:	e7d5      	b.n	1514 <groundState+0x1c8>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1568:	4d35      	ldr	r5, [pc, #212]	; (1640 <groundState+0x2f4>)
    156a:	882a      	ldrh	r2, [r5, #0]
    156c:	0053      	lsls	r3, r2, #1
    156e:	189b      	adds	r3, r3, r2
    1570:	00db      	lsls	r3, r3, #3
    1572:	4a35      	ldr	r2, [pc, #212]	; (1648 <groundState+0x2fc>)
    1574:	18d3      	adds	r3, r2, r3
    1576:	7dd8      	ldrb	r0, [r3, #23]
    1578:	4c3c      	ldr	r4, [pc, #240]	; (166c <groundState+0x320>)
    157a:	47a0      	blx	r4
				xCharPos = 0;
    157c:	2300      	movs	r3, #0
    157e:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    1580:	2000      	movs	r0, #0
    1582:	47a0      	blx	r4
				blinkCursor();
    1584:	4b3a      	ldr	r3, [pc, #232]	; (1670 <groundState+0x324>)
    1586:	4798      	blx	r3
    1588:	e76c      	b.n	1464 <groundState+0x118>
		if(yCharPos == 23)
    158a:	4b2e      	ldr	r3, [pc, #184]	; (1644 <groundState+0x2f8>)
    158c:	881a      	ldrh	r2, [r3, #0]
    158e:	2a17      	cmp	r2, #23
    1590:	d033      	beq.n	15fa <groundState+0x2ae>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1592:	4c2d      	ldr	r4, [pc, #180]	; (1648 <groundState+0x2fc>)
    1594:	4d2a      	ldr	r5, [pc, #168]	; (1640 <groundState+0x2f4>)
    1596:	8829      	ldrh	r1, [r5, #0]
    1598:	004b      	lsls	r3, r1, #1
    159a:	185b      	adds	r3, r3, r1
    159c:	00db      	lsls	r3, r3, #3
    159e:	18e3      	adds	r3, r4, r3
    15a0:	5c98      	ldrb	r0, [r3, r2]
    15a2:	4e32      	ldr	r6, [pc, #200]	; (166c <groundState+0x320>)
    15a4:	47b0      	blx	r6
			yCharPos++;
    15a6:	4a27      	ldr	r2, [pc, #156]	; (1644 <groundState+0x2f8>)
    15a8:	8813      	ldrh	r3, [r2, #0]
    15aa:	3301      	adds	r3, #1
    15ac:	b29b      	uxth	r3, r3
    15ae:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    15b0:	8829      	ldrh	r1, [r5, #0]
    15b2:	004a      	lsls	r2, r1, #1
    15b4:	1852      	adds	r2, r2, r1
    15b6:	00d2      	lsls	r2, r2, #3
    15b8:	18a4      	adds	r4, r4, r2
    15ba:	5ce0      	ldrb	r0, [r4, r3]
    15bc:	47b0      	blx	r6
			blinkCursor();
    15be:	4b2c      	ldr	r3, [pc, #176]	; (1670 <groundState+0x324>)
    15c0:	4798      	blx	r3
		if(lineFeed)
    15c2:	4b2d      	ldr	r3, [pc, #180]	; (1678 <groundState+0x32c>)
    15c4:	781b      	ldrb	r3, [r3, #0]
    15c6:	2b00      	cmp	r3, #0
    15c8:	d100      	bne.n	15cc <groundState+0x280>
    15ca:	e74b      	b.n	1464 <groundState+0x118>
			if(yCharPos == 23)
    15cc:	4b1d      	ldr	r3, [pc, #116]	; (1644 <groundState+0x2f8>)
    15ce:	881a      	ldrh	r2, [r3, #0]
    15d0:	2a17      	cmp	r2, #23
    15d2:	d021      	beq.n	1618 <groundState+0x2cc>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    15d4:	4d1c      	ldr	r5, [pc, #112]	; (1648 <groundState+0x2fc>)
    15d6:	4e1a      	ldr	r6, [pc, #104]	; (1640 <groundState+0x2f4>)
    15d8:	8831      	ldrh	r1, [r6, #0]
    15da:	004b      	lsls	r3, r1, #1
    15dc:	185b      	adds	r3, r3, r1
    15de:	00db      	lsls	r3, r3, #3
    15e0:	18eb      	adds	r3, r5, r3
    15e2:	5c98      	ldrb	r0, [r3, r2]
    15e4:	4c21      	ldr	r4, [pc, #132]	; (166c <groundState+0x320>)
    15e6:	47a0      	blx	r4
				xCharPos = 0;
    15e8:	2300      	movs	r3, #0
    15ea:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    15ec:	4b15      	ldr	r3, [pc, #84]	; (1644 <groundState+0x2f8>)
    15ee:	881b      	ldrh	r3, [r3, #0]
    15f0:	5ce8      	ldrb	r0, [r5, r3]
    15f2:	47a0      	blx	r4
				blinkCursor();
    15f4:	4b1e      	ldr	r3, [pc, #120]	; (1670 <groundState+0x324>)
    15f6:	4798      	blx	r3
    15f8:	e734      	b.n	1464 <groundState+0x118>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    15fa:	4b11      	ldr	r3, [pc, #68]	; (1640 <groundState+0x2f4>)
    15fc:	881a      	ldrh	r2, [r3, #0]
    15fe:	0053      	lsls	r3, r2, #1
    1600:	189b      	adds	r3, r3, r2
    1602:	00db      	lsls	r3, r3, #3
    1604:	4a10      	ldr	r2, [pc, #64]	; (1648 <groundState+0x2fc>)
    1606:	18d3      	adds	r3, r2, r3
    1608:	7dd8      	ldrb	r0, [r3, #23]
    160a:	4b18      	ldr	r3, [pc, #96]	; (166c <groundState+0x320>)
    160c:	4798      	blx	r3
			newLine();
    160e:	4b1b      	ldr	r3, [pc, #108]	; (167c <groundState+0x330>)
    1610:	4798      	blx	r3
			blinkCursor();
    1612:	4b17      	ldr	r3, [pc, #92]	; (1670 <groundState+0x324>)
    1614:	4798      	blx	r3
    1616:	e7d4      	b.n	15c2 <groundState+0x276>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1618:	4d09      	ldr	r5, [pc, #36]	; (1640 <groundState+0x2f4>)
    161a:	882a      	ldrh	r2, [r5, #0]
    161c:	0053      	lsls	r3, r2, #1
    161e:	189b      	adds	r3, r3, r2
    1620:	00db      	lsls	r3, r3, #3
    1622:	4a09      	ldr	r2, [pc, #36]	; (1648 <groundState+0x2fc>)
    1624:	18d3      	adds	r3, r2, r3
    1626:	7dd8      	ldrb	r0, [r3, #23]
    1628:	4c10      	ldr	r4, [pc, #64]	; (166c <groundState+0x320>)
    162a:	47a0      	blx	r4
				xCharPos = 0;
    162c:	2300      	movs	r3, #0
    162e:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    1630:	2000      	movs	r0, #0
    1632:	47a0      	blx	r4
				blinkCursor();
    1634:	4b0e      	ldr	r3, [pc, #56]	; (1670 <groundState+0x324>)
    1636:	4798      	blx	r3
    1638:	e714      	b.n	1464 <groundState+0x118>
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	000002b1 	.word	0x000002b1
    1640:	200002ec 	.word	0x200002ec
    1644:	200002ee 	.word	0x200002ee
    1648:	200003f4 	.word	0x200003f4
    164c:	2000038a 	.word	0x2000038a
    1650:	20000b74 	.word	0x20000b74
    1654:	20000388 	.word	0x20000388
    1658:	20000368 	.word	0x20000368
    165c:	2000036a 	.word	0x2000036a
    1660:	200012f4 	.word	0x200012f4
    1664:	20000014 	.word	0x20000014
    1668:	2000022a 	.word	0x2000022a
    166c:	0000358d 	.word	0x0000358d
    1670:	000036d9 	.word	0x000036d9
    1674:	00001325 	.word	0x00001325
    1678:	2000018c 	.word	0x2000018c
    167c:	00003805 	.word	0x00003805
		if(yCharPos == 23)
    1680:	4b52      	ldr	r3, [pc, #328]	; (17cc <groundState+0x480>)
    1682:	881a      	ldrh	r2, [r3, #0]
    1684:	2a17      	cmp	r2, #23
    1686:	d033      	beq.n	16f0 <groundState+0x3a4>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1688:	4c51      	ldr	r4, [pc, #324]	; (17d0 <groundState+0x484>)
    168a:	4d52      	ldr	r5, [pc, #328]	; (17d4 <groundState+0x488>)
    168c:	8829      	ldrh	r1, [r5, #0]
    168e:	004b      	lsls	r3, r1, #1
    1690:	185b      	adds	r3, r3, r1
    1692:	00db      	lsls	r3, r3, #3
    1694:	18e3      	adds	r3, r4, r3
    1696:	5c98      	ldrb	r0, [r3, r2]
    1698:	4e4f      	ldr	r6, [pc, #316]	; (17d8 <groundState+0x48c>)
    169a:	47b0      	blx	r6
			yCharPos++;
    169c:	4a4b      	ldr	r2, [pc, #300]	; (17cc <groundState+0x480>)
    169e:	8813      	ldrh	r3, [r2, #0]
    16a0:	3301      	adds	r3, #1
    16a2:	b29b      	uxth	r3, r3
    16a4:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    16a6:	8829      	ldrh	r1, [r5, #0]
    16a8:	004a      	lsls	r2, r1, #1
    16aa:	1852      	adds	r2, r2, r1
    16ac:	00d2      	lsls	r2, r2, #3
    16ae:	18a4      	adds	r4, r4, r2
    16b0:	5ce0      	ldrb	r0, [r4, r3]
    16b2:	47b0      	blx	r6
			blinkCursor();
    16b4:	4b49      	ldr	r3, [pc, #292]	; (17dc <groundState+0x490>)
    16b6:	4798      	blx	r3
		if(lineFeed)
    16b8:	4b49      	ldr	r3, [pc, #292]	; (17e0 <groundState+0x494>)
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	2b00      	cmp	r3, #0
    16be:	d100      	bne.n	16c2 <groundState+0x376>
    16c0:	e6d0      	b.n	1464 <groundState+0x118>
			if(yCharPos == 23)
    16c2:	4b42      	ldr	r3, [pc, #264]	; (17cc <groundState+0x480>)
    16c4:	881a      	ldrh	r2, [r3, #0]
    16c6:	2a17      	cmp	r2, #23
    16c8:	d021      	beq.n	170e <groundState+0x3c2>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    16ca:	4d41      	ldr	r5, [pc, #260]	; (17d0 <groundState+0x484>)
    16cc:	4e41      	ldr	r6, [pc, #260]	; (17d4 <groundState+0x488>)
    16ce:	8831      	ldrh	r1, [r6, #0]
    16d0:	004b      	lsls	r3, r1, #1
    16d2:	185b      	adds	r3, r3, r1
    16d4:	00db      	lsls	r3, r3, #3
    16d6:	18eb      	adds	r3, r5, r3
    16d8:	5c98      	ldrb	r0, [r3, r2]
    16da:	4c3f      	ldr	r4, [pc, #252]	; (17d8 <groundState+0x48c>)
    16dc:	47a0      	blx	r4
				xCharPos = 0;
    16de:	2300      	movs	r3, #0
    16e0:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    16e2:	4b3a      	ldr	r3, [pc, #232]	; (17cc <groundState+0x480>)
    16e4:	881b      	ldrh	r3, [r3, #0]
    16e6:	5ce8      	ldrb	r0, [r5, r3]
    16e8:	47a0      	blx	r4
				blinkCursor();
    16ea:	4b3c      	ldr	r3, [pc, #240]	; (17dc <groundState+0x490>)
    16ec:	4798      	blx	r3
    16ee:	e6b9      	b.n	1464 <groundState+0x118>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    16f0:	4b38      	ldr	r3, [pc, #224]	; (17d4 <groundState+0x488>)
    16f2:	881a      	ldrh	r2, [r3, #0]
    16f4:	0053      	lsls	r3, r2, #1
    16f6:	189b      	adds	r3, r3, r2
    16f8:	00db      	lsls	r3, r3, #3
    16fa:	4a35      	ldr	r2, [pc, #212]	; (17d0 <groundState+0x484>)
    16fc:	18d3      	adds	r3, r2, r3
    16fe:	7dd8      	ldrb	r0, [r3, #23]
    1700:	4b35      	ldr	r3, [pc, #212]	; (17d8 <groundState+0x48c>)
    1702:	4798      	blx	r3
			newLine();
    1704:	4b37      	ldr	r3, [pc, #220]	; (17e4 <groundState+0x498>)
    1706:	4798      	blx	r3
			blinkCursor();
    1708:	4b34      	ldr	r3, [pc, #208]	; (17dc <groundState+0x490>)
    170a:	4798      	blx	r3
    170c:	e7d4      	b.n	16b8 <groundState+0x36c>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    170e:	4d31      	ldr	r5, [pc, #196]	; (17d4 <groundState+0x488>)
    1710:	882a      	ldrh	r2, [r5, #0]
    1712:	0053      	lsls	r3, r2, #1
    1714:	189b      	adds	r3, r3, r2
    1716:	00db      	lsls	r3, r3, #3
    1718:	4a2d      	ldr	r2, [pc, #180]	; (17d0 <groundState+0x484>)
    171a:	18d3      	adds	r3, r2, r3
    171c:	7dd8      	ldrb	r0, [r3, #23]
    171e:	4c2e      	ldr	r4, [pc, #184]	; (17d8 <groundState+0x48c>)
    1720:	47a0      	blx	r4
				xCharPos = 0;
    1722:	2300      	movs	r3, #0
    1724:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    1726:	2000      	movs	r0, #0
    1728:	47a0      	blx	r4
				blinkCursor();
    172a:	4b2c      	ldr	r3, [pc, #176]	; (17dc <groundState+0x490>)
    172c:	4798      	blx	r3
    172e:	e699      	b.n	1464 <groundState+0x118>
		if(yCharPos == 23)
    1730:	4b26      	ldr	r3, [pc, #152]	; (17cc <groundState+0x480>)
    1732:	881a      	ldrh	r2, [r3, #0]
    1734:	2a17      	cmp	r2, #23
    1736:	d012      	beq.n	175e <groundState+0x412>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1738:	4d25      	ldr	r5, [pc, #148]	; (17d0 <groundState+0x484>)
    173a:	4e26      	ldr	r6, [pc, #152]	; (17d4 <groundState+0x488>)
    173c:	8831      	ldrh	r1, [r6, #0]
    173e:	004b      	lsls	r3, r1, #1
    1740:	185b      	adds	r3, r3, r1
    1742:	00db      	lsls	r3, r3, #3
    1744:	18eb      	adds	r3, r5, r3
    1746:	5c98      	ldrb	r0, [r3, r2]
    1748:	4c23      	ldr	r4, [pc, #140]	; (17d8 <groundState+0x48c>)
    174a:	47a0      	blx	r4
			xCharPos = 0;
    174c:	2300      	movs	r3, #0
    174e:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1750:	4b1e      	ldr	r3, [pc, #120]	; (17cc <groundState+0x480>)
    1752:	881b      	ldrh	r3, [r3, #0]
    1754:	5ce8      	ldrb	r0, [r5, r3]
    1756:	47a0      	blx	r4
			blinkCursor();
    1758:	4b20      	ldr	r3, [pc, #128]	; (17dc <groundState+0x490>)
    175a:	4798      	blx	r3
    175c:	e682      	b.n	1464 <groundState+0x118>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    175e:	4c1d      	ldr	r4, [pc, #116]	; (17d4 <groundState+0x488>)
    1760:	8822      	ldrh	r2, [r4, #0]
    1762:	0053      	lsls	r3, r2, #1
    1764:	189b      	adds	r3, r3, r2
    1766:	00db      	lsls	r3, r3, #3
    1768:	4a19      	ldr	r2, [pc, #100]	; (17d0 <groundState+0x484>)
    176a:	18d3      	adds	r3, r2, r3
    176c:	7dd8      	ldrb	r0, [r3, #23]
    176e:	4b1a      	ldr	r3, [pc, #104]	; (17d8 <groundState+0x48c>)
    1770:	4798      	blx	r3
			xCharPos = 0;
    1772:	2300      	movs	r3, #0
    1774:	8023      	strh	r3, [r4, #0]
			blinkCursor();
    1776:	4b19      	ldr	r3, [pc, #100]	; (17dc <groundState+0x490>)
    1778:	4798      	blx	r3
    177a:	e673      	b.n	1464 <groundState+0x118>
		currentState = stateESC;
    177c:	2201      	movs	r2, #1
    177e:	4b1a      	ldr	r3, [pc, #104]	; (17e8 <groundState+0x49c>)
    1780:	701a      	strb	r2, [r3, #0]
    1782:	e66f      	b.n	1464 <groundState+0x118>
			ClearBit(consoleSGR[xCharPos][yCharPos],7);
    1784:	2018      	movs	r0, #24
    1786:	4350      	muls	r0, r2
    1788:	4918      	ldr	r1, [pc, #96]	; (17ec <groundState+0x4a0>)
    178a:	1809      	adds	r1, r1, r0
    178c:	5cc8      	ldrb	r0, [r1, r3]
    178e:	257f      	movs	r5, #127	; 0x7f
    1790:	4028      	ands	r0, r5
    1792:	54c8      	strb	r0, [r1, r3]
    1794:	e617      	b.n	13c6 <groundState+0x7a>
			ClearBit(consoleSGR[xCharPos][yCharPos],1);
    1796:	2018      	movs	r0, #24
    1798:	4350      	muls	r0, r2
    179a:	4914      	ldr	r1, [pc, #80]	; (17ec <groundState+0x4a0>)
    179c:	1809      	adds	r1, r1, r0
    179e:	5cc8      	ldrb	r0, [r1, r3]
    17a0:	2502      	movs	r5, #2
    17a2:	43a8      	bics	r0, r5
    17a4:	54c8      	strb	r0, [r1, r3]
    17a6:	e61b      	b.n	13e0 <groundState+0x94>
			ClearBit(consoleSGR[xCharPos][yCharPos],4);
    17a8:	2018      	movs	r0, #24
    17aa:	4350      	muls	r0, r2
    17ac:	490f      	ldr	r1, [pc, #60]	; (17ec <groundState+0x4a0>)
    17ae:	1809      	adds	r1, r1, r0
    17b0:	5cc8      	ldrb	r0, [r1, r3]
    17b2:	2510      	movs	r5, #16
    17b4:	43a8      	bics	r0, r5
    17b6:	54c8      	strb	r0, [r1, r3]
    17b8:	e61f      	b.n	13fa <groundState+0xae>
			ClearBit(consoleSGR[xCharPos][yCharPos],5);
    17ba:	2018      	movs	r0, #24
    17bc:	4350      	muls	r0, r2
    17be:	490b      	ldr	r1, [pc, #44]	; (17ec <groundState+0x4a0>)
    17c0:	1809      	adds	r1, r1, r0
    17c2:	5cc8      	ldrb	r0, [r1, r3]
    17c4:	2520      	movs	r5, #32
    17c6:	43a8      	bics	r0, r5
    17c8:	54c8      	strb	r0, [r1, r3]
    17ca:	e623      	b.n	1414 <groundState+0xc8>
    17cc:	200002ee 	.word	0x200002ee
    17d0:	200003f4 	.word	0x200003f4
    17d4:	200002ec 	.word	0x200002ec
    17d8:	0000358d 	.word	0x0000358d
    17dc:	000036d9 	.word	0x000036d9
    17e0:	2000018c 	.word	0x2000018c
    17e4:	00003805 	.word	0x00003805
    17e8:	200002f1 	.word	0x200002f1
    17ec:	20000b74 	.word	0x20000b74

000017f0 <parseChar>:
{
    17f0:	b510      	push	{r4, lr}
	parserState state = currentState;
    17f2:	4b0e      	ldr	r3, [pc, #56]	; (182c <parseChar+0x3c>)
	switch(state)
    17f4:	781a      	ldrb	r2, [r3, #0]
    17f6:	2a05      	cmp	r2, #5
    17f8:	d805      	bhi.n	1806 <parseChar+0x16>
    17fa:	0093      	lsls	r3, r2, #2
    17fc:	4a0c      	ldr	r2, [pc, #48]	; (1830 <parseChar+0x40>)
    17fe:	58d3      	ldr	r3, [r2, r3]
    1800:	469f      	mov	pc, r3
			groundState(character);
    1802:	4b0c      	ldr	r3, [pc, #48]	; (1834 <parseChar+0x44>)
    1804:	4798      	blx	r3
}
    1806:	bd10      	pop	{r4, pc}
			escState(character);
    1808:	4b0b      	ldr	r3, [pc, #44]	; (1838 <parseChar+0x48>)
    180a:	4798      	blx	r3
			break;
    180c:	e7fb      	b.n	1806 <parseChar+0x16>
	stateEnterBuffer = 0x00;
    180e:	2300      	movs	r3, #0
    1810:	4a0a      	ldr	r2, [pc, #40]	; (183c <parseChar+0x4c>)
    1812:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
    1814:	4a05      	ldr	r2, [pc, #20]	; (182c <parseChar+0x3c>)
    1816:	7013      	strb	r3, [r2, #0]
    1818:	e7f5      	b.n	1806 <parseChar+0x16>
			CSIentryState(character);
    181a:	4b09      	ldr	r3, [pc, #36]	; (1840 <parseChar+0x50>)
    181c:	4798      	blx	r3
			break;
    181e:	e7f2      	b.n	1806 <parseChar+0x16>
			CSIparamState(character);
    1820:	4b08      	ldr	r3, [pc, #32]	; (1844 <parseChar+0x54>)
    1822:	4798      	blx	r3
			break;
    1824:	e7ef      	b.n	1806 <parseChar+0x16>
			CSIignoreState(character);
    1826:	4b08      	ldr	r3, [pc, #32]	; (1848 <parseChar+0x58>)
    1828:	4798      	blx	r3
}
    182a:	e7ec      	b.n	1806 <parseChar+0x16>
    182c:	200002f1 	.word	0x200002f1
    1830:	00005f40 	.word	0x00005f40
    1834:	0000134d 	.word	0x0000134d
    1838:	00000575 	.word	0x00000575
    183c:	20000376 	.word	0x20000376
    1840:	000010c1 	.word	0x000010c1
    1844:	00001061 	.word	0x00001061
    1848:	0000034d 	.word	0x0000034d

0000184c <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    184c:	b5f0      	push	{r4, r5, r6, r7, lr}
    184e:	b0c1      	sub	sp, #260	; 0x104
    1850:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    1852:	22d0      	movs	r2, #208	; 0xd0
    1854:	492d      	ldr	r1, [pc, #180]	; (190c <drawKare+0xc0>)
    1856:	a80c      	add	r0, sp, #48	; 0x30
    1858:	4b2d      	ldr	r3, [pc, #180]	; (1910 <drawKare+0xc4>)
    185a:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    185c:	a805      	add	r0, sp, #20
    185e:	4b2d      	ldr	r3, [pc, #180]	; (1914 <drawKare+0xc8>)
    1860:	001a      	movs	r2, r3
    1862:	3250      	adds	r2, #80	; 0x50
    1864:	0001      	movs	r1, r0
    1866:	ca31      	ldmia	r2!, {r0, r4, r5}
    1868:	c131      	stmia	r1!, {r0, r4, r5}
    186a:	ca31      	ldmia	r2!, {r0, r4, r5}
    186c:	c131      	stmia	r1!, {r0, r4, r5}
    186e:	6812      	ldr	r2, [r2, #0]
    1870:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    1872:	336c      	adds	r3, #108	; 0x6c
    1874:	466a      	mov	r2, sp
    1876:	cb13      	ldmia	r3!, {r0, r1, r4}
    1878:	c213      	stmia	r2!, {r0, r1, r4}
    187a:	cb03      	ldmia	r3!, {r0, r1}
    187c:	c203      	stmia	r2!, {r0, r1}
    187e:	ac0c      	add	r4, sp, #48	; 0x30
    1880:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1882:	4d25      	ldr	r5, [pc, #148]	; (1918 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    1884:	88e3      	ldrh	r3, [r4, #6]
    1886:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1888:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
    188a:	88a2      	ldrh	r2, [r4, #4]
    188c:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    188e:	322d      	adds	r2, #45	; 0x2d
    1890:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
    1892:	8861      	ldrh	r1, [r4, #2]
    1894:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1896:	3196      	adds	r1, #150	; 0x96
    1898:	8820      	ldrh	r0, [r4, #0]
    189a:	1040      	asrs	r0, r0, #1
    189c:	302d      	adds	r0, #45	; 0x2d
    189e:	30ff      	adds	r0, #255	; 0xff
    18a0:	47a8      	blx	r5
    18a2:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
    18a4:	42b4      	cmp	r4, r6
    18a6:	d1ed      	bne.n	1884 <drawKare+0x38>
	}
	switch(emotion)
    18a8:	2f00      	cmp	r7, #0
    18aa:	d003      	beq.n	18b4 <drawKare+0x68>
    18ac:	2f01      	cmp	r7, #1
    18ae:	d017      	beq.n	18e0 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    18b0:	b041      	add	sp, #260	; 0x104
    18b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18b4:	ac05      	add	r4, sp, #20
    18b6:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    18b8:	4d17      	ldr	r5, [pc, #92]	; (1918 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    18ba:	78e3      	ldrb	r3, [r4, #3]
    18bc:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    18be:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    18c0:	78a2      	ldrb	r2, [r4, #2]
    18c2:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    18c4:	322d      	adds	r2, #45	; 0x2d
    18c6:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    18c8:	7861      	ldrb	r1, [r4, #1]
    18ca:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    18cc:	3196      	adds	r1, #150	; 0x96
    18ce:	7820      	ldrb	r0, [r4, #0]
    18d0:	1040      	asrs	r0, r0, #1
    18d2:	302d      	adds	r0, #45	; 0x2d
    18d4:	30ff      	adds	r0, #255	; 0xff
    18d6:	47a8      	blx	r5
    18d8:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
    18da:	42a6      	cmp	r6, r4
    18dc:	d1ed      	bne.n	18ba <drawKare+0x6e>
    18de:	e7e7      	b.n	18b0 <drawKare+0x64>
    18e0:	466c      	mov	r4, sp
    18e2:	ae05      	add	r6, sp, #20
			fillRect((
    18e4:	4d0c      	ldr	r5, [pc, #48]	; (1918 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    18e6:	78e3      	ldrb	r3, [r4, #3]
    18e8:	105b      	asrs	r3, r3, #1
			fillRect((
    18ea:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    18ec:	78a2      	ldrb	r2, [r4, #2]
    18ee:	1052      	asrs	r2, r2, #1
			fillRect((
    18f0:	322d      	adds	r2, #45	; 0x2d
    18f2:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    18f4:	7861      	ldrb	r1, [r4, #1]
    18f6:	1049      	asrs	r1, r1, #1
			fillRect((
    18f8:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    18fa:	7820      	ldrb	r0, [r4, #0]
    18fc:	1040      	asrs	r0, r0, #1
			fillRect((
    18fe:	302d      	adds	r0, #45	; 0x2d
    1900:	30ff      	adds	r0, #255	; 0xff
    1902:	47a8      	blx	r5
    1904:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
    1906:	42b4      	cmp	r4, r6
    1908:	d1ed      	bne.n	18e6 <drawKare+0x9a>
    190a:	e7d1      	b.n	18b0 <drawKare+0x64>
    190c:	000060d4 	.word	0x000060d4
    1910:	00004c81 	.word	0x00004c81
    1914:	00006154 	.word	0x00006154
    1918:	0000409d 	.word	0x0000409d

0000191c <splashScreen>:

void splashScreen(void)
{
    191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    191e:	46ce      	mov	lr, r9
    1920:	4647      	mov	r7, r8
    1922:	b580      	push	{r7, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
    1924:	4c57      	ldr	r4, [pc, #348]	; (1a84 <splashScreen+0x168>)
    1926:	4b58      	ldr	r3, [pc, #352]	; (1a88 <splashScreen+0x16c>)
    1928:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
    192a:	4b58      	ldr	r3, [pc, #352]	; (1a8c <splashScreen+0x170>)
    192c:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
    192e:	4b58      	ldr	r3, [pc, #352]	; (1a90 <splashScreen+0x174>)
    1930:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
    1932:	4b58      	ldr	r3, [pc, #352]	; (1a94 <splashScreen+0x178>)
    1934:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
    1936:	4b58      	ldr	r3, [pc, #352]	; (1a98 <splashScreen+0x17c>)
    1938:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
    193a:	4b58      	ldr	r3, [pc, #352]	; (1a9c <splashScreen+0x180>)
    193c:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
    193e:	4b58      	ldr	r3, [pc, #352]	; (1aa0 <splashScreen+0x184>)
    1940:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    1942:	4b58      	ldr	r3, [pc, #352]	; (1aa4 <splashScreen+0x188>)
    1944:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
    1946:	4b58      	ldr	r3, [pc, #352]	; (1aa8 <splashScreen+0x18c>)
    1948:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
    194a:	4b58      	ldr	r3, [pc, #352]	; (1aac <splashScreen+0x190>)
    194c:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
    194e:	4b58      	ldr	r3, [pc, #352]	; (1ab0 <splashScreen+0x194>)
    1950:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
    1952:	4b58      	ldr	r3, [pc, #352]	; (1ab4 <splashScreen+0x198>)
    1954:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
    1956:	4b58      	ldr	r3, [pc, #352]	; (1ab8 <splashScreen+0x19c>)
    1958:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
    195a:	4b58      	ldr	r3, [pc, #352]	; (1abc <splashScreen+0x1a0>)
    195c:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "Vogon Poetry";//
    195e:	4b58      	ldr	r3, [pc, #352]	; (1ac0 <splashScreen+0x1a4>)
    1960:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
    1962:	4b58      	ldr	r3, [pc, #352]	; (1ac4 <splashScreen+0x1a8>)
    1964:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
    1966:	4b58      	ldr	r3, [pc, #352]	; (1ac8 <splashScreen+0x1ac>)
    1968:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    196a:	4b58      	ldr	r3, [pc, #352]	; (1acc <splashScreen+0x1b0>)
    196c:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
    196e:	4b58      	ldr	r3, [pc, #352]	; (1ad0 <splashScreen+0x1b4>)
    1970:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020)";//
    1972:	4b58      	ldr	r3, [pc, #352]	; (1ad4 <splashScreen+0x1b8>)
    1974:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
    1976:	4b58      	ldr	r3, [pc, #352]	; (1ad8 <splashScreen+0x1bc>)
    1978:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
    197a:	4b58      	ldr	r3, [pc, #352]	; (1adc <splashScreen+0x1c0>)
    197c:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
    197e:	4b58      	ldr	r3, [pc, #352]	; (1ae0 <splashScreen+0x1c4>)
    1980:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
    1982:	4b58      	ldr	r3, [pc, #352]	; (1ae4 <splashScreen+0x1c8>)
    1984:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
    1986:	4b58      	ldr	r3, [pc, #352]	; (1ae8 <splashScreen+0x1cc>)
    1988:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
    198a:	4b58      	ldr	r3, [pc, #352]	; (1aec <splashScreen+0x1d0>)
    198c:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
    198e:	4b58      	ldr	r3, [pc, #352]	; (1af0 <splashScreen+0x1d4>)
    1990:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
    1992:	4b58      	ldr	r3, [pc, #352]	; (1af4 <splashScreen+0x1d8>)
    1994:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
    1996:	4b58      	ldr	r3, [pc, #352]	; (1af8 <splashScreen+0x1dc>)
    1998:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
    199a:	4b58      	ldr	r3, [pc, #352]	; (1afc <splashScreen+0x1e0>)
    199c:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
    199e:	4b58      	ldr	r3, [pc, #352]	; (1b00 <splashScreen+0x1e4>)
    19a0:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
    19a2:	4b58      	ldr	r3, [pc, #352]	; (1b04 <splashScreen+0x1e8>)
    19a4:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
    19a6:	4a58      	ldr	r2, [pc, #352]	; (1b08 <splashScreen+0x1ec>)
    19a8:	2380      	movs	r3, #128	; 0x80
    19aa:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
    19ac:	4b57      	ldr	r3, [pc, #348]	; (1b0c <splashScreen+0x1f0>)
    19ae:	4798      	blx	r3
    19b0:	17c2      	asrs	r2, r0, #31
    19b2:	0ed2      	lsrs	r2, r2, #27
    19b4:	1880      	adds	r0, r0, r2
    19b6:	231f      	movs	r3, #31
    19b8:	4003      	ands	r3, r0
    19ba:	1a9b      	subs	r3, r3, r2
    19bc:	009b      	lsls	r3, r3, #2
    19be:	591c      	ldr	r4, [r3, r4]
	
	clearScreen();
    19c0:	4b53      	ldr	r3, [pc, #332]	; (1b10 <splashScreen+0x1f4>)
    19c2:	4798      	blx	r3
	setColorRGB(255,255,255);
    19c4:	22ff      	movs	r2, #255	; 0xff
    19c6:	21ff      	movs	r1, #255	; 0xff
    19c8:	20ff      	movs	r0, #255	; 0xff
    19ca:	4b52      	ldr	r3, [pc, #328]	; (1b14 <splashScreen+0x1f8>)
    19cc:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    19ce:	2280      	movs	r2, #128	; 0x80
    19d0:	0612      	lsls	r2, r2, #24
    19d2:	4b51      	ldr	r3, [pc, #324]	; (1b18 <splashScreen+0x1fc>)
    19d4:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    19d6:	4b51      	ldr	r3, [pc, #324]	; (1b1c <splashScreen+0x200>)
    19d8:	22df      	movs	r2, #223	; 0xdf
    19da:	5c99      	ldrb	r1, [r3, r2]
    19dc:	2004      	movs	r0, #4
    19de:	4301      	orrs	r1, r0
    19e0:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    19e2:	5c99      	ldrb	r1, [r3, r2]
    19e4:	2002      	movs	r0, #2
    19e6:	4301      	orrs	r1, r0
    19e8:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    19ea:	3a3f      	subs	r2, #63	; 0x3f
    19ec:	589b      	ldr	r3, [r3, r2]
    19ee:	2b00      	cmp	r3, #0
    19f0:	db08      	blt.n	1a04 <splashScreen+0xe8>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
    19f2:	2000      	movs	r0, #0
    19f4:	4b4a      	ldr	r3, [pc, #296]	; (1b20 <splashScreen+0x204>)
    19f6:	4798      	blx	r3
    19f8:	4b4a      	ldr	r3, [pc, #296]	; (1b24 <splashScreen+0x208>)
    19fa:	22f0      	movs	r2, #240	; 0xf0
    19fc:	0152      	lsls	r2, r2, #5
    19fe:	1898      	adds	r0, r3, r2
	
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleColors[i][j] = 0xFFFF0000;
    1a00:	4949      	ldr	r1, [pc, #292]	; (1b28 <splashScreen+0x20c>)
    1a02:	e006      	b.n	1a12 <splashScreen+0xf6>
		drawKare(1);
    1a04:	2001      	movs	r0, #1
    1a06:	4b46      	ldr	r3, [pc, #280]	; (1b20 <splashScreen+0x204>)
    1a08:	4798      	blx	r3
    1a0a:	e7f5      	b.n	19f8 <splashScreen+0xdc>
    1a0c:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    1a0e:	4290      	cmp	r0, r2
    1a10:	d005      	beq.n	1a1e <splashScreen+0x102>
    1a12:	001a      	movs	r2, r3
    1a14:	3260      	adds	r2, #96	; 0x60
			consoleColors[i][j] = 0xFFFF0000;
    1a16:	c302      	stmia	r3!, {r1}
		for(int j = 0 ; j < 24 ; j++)
    1a18:	4293      	cmp	r3, r2
    1a1a:	d1fc      	bne.n	1a16 <splashScreen+0xfa>
    1a1c:	e7f6      	b.n	1a0c <splashScreen+0xf0>
	}
	
	//setColorHex(defaultForegroundColor);
	//setBackColorHex(defaultBackgroundColor);
	
	xCharPos = 40 - (strlen(textPhrase)/2);
    1a1e:	0020      	movs	r0, r4
    1a20:	4b42      	ldr	r3, [pc, #264]	; (1b2c <splashScreen+0x210>)
    1a22:	4699      	mov	r9, r3
    1a24:	4798      	blx	r3
    1a26:	4f42      	ldr	r7, [pc, #264]	; (1b30 <splashScreen+0x214>)
    1a28:	0843      	lsrs	r3, r0, #1
    1a2a:	2528      	movs	r5, #40	; 0x28
    1a2c:	1aeb      	subs	r3, r5, r3
    1a2e:	803b      	strh	r3, [r7, #0]
	yCharPos = 16;
    1a30:	4e40      	ldr	r6, [pc, #256]	; (1b34 <splashScreen+0x218>)
    1a32:	2310      	movs	r3, #16
    1a34:	8033      	strh	r3, [r6, #0]
	writeString(textPhrase);
    1a36:	0020      	movs	r0, r4
    1a38:	4b3f      	ldr	r3, [pc, #252]	; (1b38 <splashScreen+0x21c>)
    1a3a:	4698      	mov	r8, r3
    1a3c:	4798      	blx	r3
	
	
	xCharPos = 40 - (strlen(versionLabel)/2);
    1a3e:	4c3f      	ldr	r4, [pc, #252]	; (1b3c <splashScreen+0x220>)
    1a40:	0020      	movs	r0, r4
    1a42:	47c8      	blx	r9
    1a44:	0843      	lsrs	r3, r0, #1
    1a46:	1aeb      	subs	r3, r5, r3
    1a48:	803b      	strh	r3, [r7, #0]
	yCharPos = 18;
    1a4a:	2312      	movs	r3, #18
    1a4c:	8033      	strh	r3, [r6, #0]
	writeString(versionLabel);
    1a4e:	0020      	movs	r0, r4
    1a50:	47c0      	blx	r8
	
	xCharPos = 40 - (strlen(compileTime)/2);
    1a52:	4c3b      	ldr	r4, [pc, #236]	; (1b40 <splashScreen+0x224>)
    1a54:	0020      	movs	r0, r4
    1a56:	47c8      	blx	r9
    1a58:	0840      	lsrs	r0, r0, #1
    1a5a:	1a2d      	subs	r5, r5, r0
    1a5c:	803d      	strh	r5, [r7, #0]
	yCharPos = 19;
    1a5e:	2313      	movs	r3, #19
    1a60:	8033      	strh	r3, [r6, #0]
	writeString(compileTime);
    1a62:	0020      	movs	r0, r4
    1a64:	47c0      	blx	r8
	
	
	delay_ms(1500);
    1a66:	4837      	ldr	r0, [pc, #220]	; (1b44 <splashScreen+0x228>)
    1a68:	4b37      	ldr	r3, [pc, #220]	; (1b48 <splashScreen+0x22c>)
    1a6a:	4798      	blx	r3
		
	clearScreen();
    1a6c:	4b28      	ldr	r3, [pc, #160]	; (1b10 <splashScreen+0x1f4>)
    1a6e:	4798      	blx	r3
	nullifyConsole();
    1a70:	4b36      	ldr	r3, [pc, #216]	; (1b4c <splashScreen+0x230>)
    1a72:	4798      	blx	r3
	//setColorRGB(0,255,0);
	//setBackColorRGB(0,0,0);
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
    1a74:	2300      	movs	r3, #0
    1a76:	803b      	strh	r3, [r7, #0]
	yCharPos = 0;
    1a78:	8033      	strh	r3, [r6, #0]
	

    1a7a:	bc0c      	pop	{r2, r3}
    1a7c:	4690      	mov	r8, r2
    1a7e:	4699      	mov	r9, r3
    1a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	2000022c 	.word	0x2000022c
    1a88:	000061d4 	.word	0x000061d4
    1a8c:	000061f4 	.word	0x000061f4
    1a90:	00006208 	.word	0x00006208
    1a94:	00006220 	.word	0x00006220
    1a98:	00006230 	.word	0x00006230
    1a9c:	00006238 	.word	0x00006238
    1aa0:	00006260 	.word	0x00006260
    1aa4:	0000628c 	.word	0x0000628c
    1aa8:	000062b4 	.word	0x000062b4
    1aac:	000062e0 	.word	0x000062e0
    1ab0:	000062ec 	.word	0x000062ec
    1ab4:	00006304 	.word	0x00006304
    1ab8:	00006324 	.word	0x00006324
    1abc:	00006344 	.word	0x00006344
    1ac0:	00006368 	.word	0x00006368
    1ac4:	00006378 	.word	0x00006378
    1ac8:	00006384 	.word	0x00006384
    1acc:	000063a0 	.word	0x000063a0
    1ad0:	000063c0 	.word	0x000063c0
    1ad4:	000063fc 	.word	0x000063fc
    1ad8:	00006418 	.word	0x00006418
    1adc:	00006434 	.word	0x00006434
    1ae0:	00006444 	.word	0x00006444
    1ae4:	00006468 	.word	0x00006468
    1ae8:	00006494 	.word	0x00006494
    1aec:	000064c0 	.word	0x000064c0
    1af0:	000064e0 	.word	0x000064e0
    1af4:	00006500 	.word	0x00006500
    1af8:	00006514 	.word	0x00006514
    1afc:	00006530 	.word	0x00006530
    1b00:	00006540 	.word	0x00006540
    1b04:	00006564 	.word	0x00006564
    1b08:	00006584 	.word	0x00006584
    1b0c:	00004ead 	.word	0x00004ead
    1b10:	0000416d 	.word	0x0000416d
    1b14:	00003f61 	.word	0x00003f61
    1b18:	4100448c 	.word	0x4100448c
    1b1c:	41004400 	.word	0x41004400
    1b20:	0000184d 	.word	0x0000184d
    1b24:	200012f4 	.word	0x200012f4
    1b28:	ffff0000 	.word	0xffff0000
    1b2c:	000050cf 	.word	0x000050cf
    1b30:	200002ec 	.word	0x200002ec
    1b34:	200002ee 	.word	0x200002ee
    1b38:	000038e5 	.word	0x000038e5
    1b3c:	20000198 	.word	0x20000198
    1b40:	20000170 	.word	0x20000170
    1b44:	000005dc 	.word	0x000005dc
    1b48:	00001be5 	.word	0x00001be5
    1b4c:	0000392d 	.word	0x0000392d

00001b50 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
    1b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b52:	b083      	sub	sp, #12
		while(!ring_empty(ouroboros))
    1b54:	4e0b      	ldr	r6, [pc, #44]	; (1b84 <parseRXBuffer+0x34>)
    1b56:	4d0c      	ldr	r5, [pc, #48]	; (1b88 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
    1b58:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
    1b5a:	e008      	b.n	1b6e <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
    1b5c:	466b      	mov	r3, sp
    1b5e:	1ddc      	adds	r4, r3, #7
    1b60:	0021      	movs	r1, r4
    1b62:	6838      	ldr	r0, [r7, #0]
    1b64:	4b09      	ldr	r3, [pc, #36]	; (1b8c <parseRXBuffer+0x3c>)
    1b66:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
    1b68:	7820      	ldrb	r0, [r4, #0]
    1b6a:	4b09      	ldr	r3, [pc, #36]	; (1b90 <parseRXBuffer+0x40>)
    1b6c:	4798      	blx	r3
		while(!ring_empty(ouroboros))
    1b6e:	6830      	ldr	r0, [r6, #0]
    1b70:	47a8      	blx	r5
    1b72:	2800      	cmp	r0, #0
    1b74:	d0f2      	beq.n	1b5c <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
    1b76:	4b03      	ldr	r3, [pc, #12]	; (1b84 <parseRXBuffer+0x34>)
    1b78:	6818      	ldr	r0, [r3, #0]
    1b7a:	4b06      	ldr	r3, [pc, #24]	; (1b94 <parseRXBuffer+0x44>)
    1b7c:	4798      	blx	r3
}
    1b7e:	b003      	add	sp, #12
    1b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b82:	46c0      	nop			; (mov r8, r8)
    1b84:	20000390 	.word	0x20000390
    1b88:	0000017d 	.word	0x0000017d
    1b8c:	00000195 	.word	0x00000195
    1b90:	000017f1 	.word	0x000017f1
    1b94:	00000135 	.word	0x00000135

00001b98 <sendChar>:

void sendChar(char character)
{
    1b98:	b510      	push	{r4, lr}
	printf("%c", character);
    1b9a:	4b01      	ldr	r3, [pc, #4]	; (1ba0 <sendChar+0x8>)
    1b9c:	4798      	blx	r3
    1b9e:	bd10      	pop	{r4, pc}
    1ba0:	00004e29 	.word	0x00004e29

00001ba4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1ba4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1ba6:	2000      	movs	r0, #0
    1ba8:	4b08      	ldr	r3, [pc, #32]	; (1bcc <delay_init+0x28>)
    1baa:	4798      	blx	r3
    1bac:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1bae:	4c08      	ldr	r4, [pc, #32]	; (1bd0 <delay_init+0x2c>)
    1bb0:	21fa      	movs	r1, #250	; 0xfa
    1bb2:	0089      	lsls	r1, r1, #2
    1bb4:	47a0      	blx	r4
    1bb6:	4b07      	ldr	r3, [pc, #28]	; (1bd4 <delay_init+0x30>)
    1bb8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1bba:	4907      	ldr	r1, [pc, #28]	; (1bd8 <delay_init+0x34>)
    1bbc:	0028      	movs	r0, r5
    1bbe:	47a0      	blx	r4
    1bc0:	4b06      	ldr	r3, [pc, #24]	; (1bdc <delay_init+0x38>)
    1bc2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1bc4:	2205      	movs	r2, #5
    1bc6:	4b06      	ldr	r3, [pc, #24]	; (1be0 <delay_init+0x3c>)
    1bc8:	601a      	str	r2, [r3, #0]
}
    1bca:	bd70      	pop	{r4, r5, r6, pc}
    1bcc:	00003165 	.word	0x00003165
    1bd0:	000048ad 	.word	0x000048ad
    1bd4:	20000018 	.word	0x20000018
    1bd8:	000f4240 	.word	0x000f4240
    1bdc:	2000001c 	.word	0x2000001c
    1be0:	e000e010 	.word	0xe000e010

00001be4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1be4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1be6:	4b08      	ldr	r3, [pc, #32]	; (1c08 <delay_cycles_ms+0x24>)
    1be8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1bea:	4a08      	ldr	r2, [pc, #32]	; (1c0c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1bec:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1bee:	2180      	movs	r1, #128	; 0x80
    1bf0:	0249      	lsls	r1, r1, #9
	while (n--) {
    1bf2:	3801      	subs	r0, #1
    1bf4:	d307      	bcc.n	1c06 <delay_cycles_ms+0x22>
	if (n > 0) {
    1bf6:	2c00      	cmp	r4, #0
    1bf8:	d0fb      	beq.n	1bf2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1bfa:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1bfc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1bfe:	6813      	ldr	r3, [r2, #0]
    1c00:	420b      	tst	r3, r1
    1c02:	d0fc      	beq.n	1bfe <delay_cycles_ms+0x1a>
    1c04:	e7f5      	b.n	1bf2 <delay_cycles_ms+0xe>
	}
}
    1c06:	bd30      	pop	{r4, r5, pc}
    1c08:	20000018 	.word	0x20000018
    1c0c:	e000e010 	.word	0xe000e010

00001c10 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1c10:	4b0c      	ldr	r3, [pc, #48]	; (1c44 <cpu_irq_enter_critical+0x34>)
    1c12:	681b      	ldr	r3, [r3, #0]
    1c14:	2b00      	cmp	r3, #0
    1c16:	d106      	bne.n	1c26 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1c18:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d007      	beq.n	1c30 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1c20:	2200      	movs	r2, #0
    1c22:	4b09      	ldr	r3, [pc, #36]	; (1c48 <cpu_irq_enter_critical+0x38>)
    1c24:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1c26:	4a07      	ldr	r2, [pc, #28]	; (1c44 <cpu_irq_enter_critical+0x34>)
    1c28:	6813      	ldr	r3, [r2, #0]
    1c2a:	3301      	adds	r3, #1
    1c2c:	6013      	str	r3, [r2, #0]
}
    1c2e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1c30:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1c32:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1c36:	2200      	movs	r2, #0
    1c38:	4b04      	ldr	r3, [pc, #16]	; (1c4c <cpu_irq_enter_critical+0x3c>)
    1c3a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1c3c:	3201      	adds	r2, #1
    1c3e:	4b02      	ldr	r3, [pc, #8]	; (1c48 <cpu_irq_enter_critical+0x38>)
    1c40:	701a      	strb	r2, [r3, #0]
    1c42:	e7f0      	b.n	1c26 <cpu_irq_enter_critical+0x16>
    1c44:	200002ac 	.word	0x200002ac
    1c48:	200002b0 	.word	0x200002b0
    1c4c:	20000020 	.word	0x20000020

00001c50 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1c50:	4b08      	ldr	r3, [pc, #32]	; (1c74 <cpu_irq_leave_critical+0x24>)
    1c52:	681a      	ldr	r2, [r3, #0]
    1c54:	3a01      	subs	r2, #1
    1c56:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1c58:	681b      	ldr	r3, [r3, #0]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d109      	bne.n	1c72 <cpu_irq_leave_critical+0x22>
    1c5e:	4b06      	ldr	r3, [pc, #24]	; (1c78 <cpu_irq_leave_critical+0x28>)
    1c60:	781b      	ldrb	r3, [r3, #0]
    1c62:	2b00      	cmp	r3, #0
    1c64:	d005      	beq.n	1c72 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1c66:	2201      	movs	r2, #1
    1c68:	4b04      	ldr	r3, [pc, #16]	; (1c7c <cpu_irq_leave_critical+0x2c>)
    1c6a:	701a      	strb	r2, [r3, #0]
    1c6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1c70:	b662      	cpsie	i
	}
}
    1c72:	4770      	bx	lr
    1c74:	200002ac 	.word	0x200002ac
    1c78:	200002b0 	.word	0x200002b0
    1c7c:	20000020 	.word	0x20000020

00001c80 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1c80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c82:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1c84:	ac01      	add	r4, sp, #4
    1c86:	2501      	movs	r5, #1
    1c88:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1c8a:	2700      	movs	r7, #0
    1c8c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1c8e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1c90:	0021      	movs	r1, r4
    1c92:	203e      	movs	r0, #62	; 0x3e
    1c94:	4e06      	ldr	r6, [pc, #24]	; (1cb0 <system_board_init+0x30>)
    1c96:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1c98:	2280      	movs	r2, #128	; 0x80
    1c9a:	05d2      	lsls	r2, r2, #23
    1c9c:	4b05      	ldr	r3, [pc, #20]	; (1cb4 <system_board_init+0x34>)
    1c9e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1ca0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1ca2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1ca4:	0021      	movs	r1, r4
    1ca6:	200f      	movs	r0, #15
    1ca8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1caa:	b003      	add	sp, #12
    1cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cae:	46c0      	nop			; (mov r8, r8)
    1cb0:	000021e9 	.word	0x000021e9
    1cb4:	41004480 	.word	0x41004480

00001cb8 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    1cb8:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    1cba:	2200      	movs	r2, #0
    1cbc:	2300      	movs	r3, #0
    1cbe:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    1cc0:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    1cc2:	2100      	movs	r1, #0
    1cc4:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    1cc6:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    1cc8:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    1cca:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    1ccc:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    1cce:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    1cd0:	24c0      	movs	r4, #192	; 0xc0
    1cd2:	0164      	lsls	r4, r4, #5
    1cd4:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    1cd6:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    1cd8:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    1cda:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    1cdc:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    1cde:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    1ce0:	242a      	movs	r4, #42	; 0x2a
    1ce2:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    1ce4:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    1ce6:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    1ce8:	3c06      	subs	r4, #6
    1cea:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    1cec:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    1cee:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    1cf0:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    1cf2:	232b      	movs	r3, #43	; 0x2b
    1cf4:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    1cf6:	3301      	adds	r3, #1
    1cf8:	54c1      	strb	r1, [r0, r3]
}
    1cfa:	bd10      	pop	{r4, pc}

00001cfc <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    1cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cfe:	46d6      	mov	lr, sl
    1d00:	464f      	mov	r7, r9
    1d02:	4646      	mov	r6, r8
    1d04:	b5c0      	push	{r6, r7, lr}
    1d06:	b096      	sub	sp, #88	; 0x58
    1d08:	0007      	movs	r7, r0
    1d0a:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1d0c:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1d0e:	4ac6      	ldr	r2, [pc, #792]	; (2028 <STACK_SIZE+0x28>)
    1d10:	6a10      	ldr	r0, [r2, #32]
    1d12:	2380      	movs	r3, #128	; 0x80
    1d14:	025b      	lsls	r3, r3, #9
    1d16:	4303      	orrs	r3, r0
    1d18:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1d1a:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1d1c:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    1d1e:	07db      	lsls	r3, r3, #31
    1d20:	d505      	bpl.n	1d2e <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    1d22:	b016      	add	sp, #88	; 0x58
    1d24:	bc1c      	pop	{r2, r3, r4}
    1d26:	4690      	mov	r8, r2
    1d28:	4699      	mov	r9, r3
    1d2a:	46a2      	mov	sl, r4
    1d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1d2e:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    1d30:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    1d32:	079b      	lsls	r3, r3, #30
    1d34:	d4f5      	bmi.n	1d22 <adc_init+0x26>
	module_inst->reference = config->reference;
    1d36:	7873      	ldrb	r3, [r6, #1]
    1d38:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1d3a:	2b00      	cmp	r3, #0
    1d3c:	d104      	bne.n	1d48 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    1d3e:	4abb      	ldr	r2, [pc, #748]	; (202c <STACK_SIZE+0x2c>)
    1d40:	6c13      	ldr	r3, [r2, #64]	; 0x40
    1d42:	2104      	movs	r1, #4
    1d44:	430b      	orrs	r3, r1
    1d46:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    1d48:	2300      	movs	r3, #0
    1d4a:	60bb      	str	r3, [r7, #8]
    1d4c:	60fb      	str	r3, [r7, #12]
    1d4e:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    1d50:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    1d52:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    1d54:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    1d56:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    1d58:	4bb5      	ldr	r3, [pc, #724]	; (2030 <STACK_SIZE+0x30>)
    1d5a:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    1d5c:	232a      	movs	r3, #42	; 0x2a
    1d5e:	5cf3      	ldrb	r3, [r6, r3]
    1d60:	2b00      	cmp	r3, #0
    1d62:	d105      	bne.n	1d70 <adc_init+0x74>
    1d64:	7d33      	ldrb	r3, [r6, #20]
    1d66:	2b00      	cmp	r3, #0
    1d68:	d102      	bne.n	1d70 <adc_init+0x74>
		module_inst->software_trigger = true;
    1d6a:	3301      	adds	r3, #1
    1d6c:	777b      	strb	r3, [r7, #29]
    1d6e:	e001      	b.n	1d74 <adc_init+0x78>
		module_inst->software_trigger = false;
    1d70:	2300      	movs	r3, #0
    1d72:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    1d74:	683b      	ldr	r3, [r7, #0]
    1d76:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    1d78:	7833      	ldrb	r3, [r6, #0]
    1d7a:	466a      	mov	r2, sp
    1d7c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    1d7e:	4669      	mov	r1, sp
    1d80:	201e      	movs	r0, #30
    1d82:	4bac      	ldr	r3, [pc, #688]	; (2034 <STACK_SIZE+0x34>)
    1d84:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    1d86:	201e      	movs	r0, #30
    1d88:	4bab      	ldr	r3, [pc, #684]	; (2038 <STACK_SIZE+0x38>)
    1d8a:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    1d8c:	232c      	movs	r3, #44	; 0x2c
    1d8e:	5cf2      	ldrb	r2, [r6, r3]
    1d90:	2a00      	cmp	r2, #0
    1d92:	d054      	beq.n	1e3e <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    1d94:	3b01      	subs	r3, #1
    1d96:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    1d98:	7b33      	ldrb	r3, [r6, #12]
    1d9a:	18eb      	adds	r3, r5, r3
    1d9c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    1d9e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    1da0:	b2c9      	uxtb	r1, r1
    1da2:	428b      	cmp	r3, r1
    1da4:	d221      	bcs.n	1dea <adc_init+0xee>
    1da6:	1952      	adds	r2, r2, r5
    1da8:	b2d3      	uxtb	r3, r2
    1daa:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    1dac:	4ba3      	ldr	r3, [pc, #652]	; (203c <STACK_SIZE+0x3c>)
    1dae:	469a      	mov	sl, r3
    1db0:	e003      	b.n	1dba <adc_init+0xbe>
			offset++;
    1db2:	3501      	adds	r5, #1
    1db4:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    1db6:	454d      	cmp	r5, r9
    1db8:	d017      	beq.n	1dea <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    1dba:	240f      	movs	r4, #15
    1dbc:	402c      	ands	r4, r5
    1dbe:	7b33      	ldrb	r3, [r6, #12]
    1dc0:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    1dc2:	2250      	movs	r2, #80	; 0x50
    1dc4:	499e      	ldr	r1, [pc, #632]	; (2040 <STACK_SIZE+0x40>)
    1dc6:	a802      	add	r0, sp, #8
    1dc8:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1dca:	2c13      	cmp	r4, #19
    1dcc:	d8f1      	bhi.n	1db2 <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1dce:	00a4      	lsls	r4, r4, #2
    1dd0:	ab02      	add	r3, sp, #8
    1dd2:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1dd4:	a901      	add	r1, sp, #4
    1dd6:	2300      	movs	r3, #0
    1dd8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1dda:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1ddc:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1dde:	3301      	adds	r3, #1
    1de0:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1de2:	b2c0      	uxtb	r0, r0
    1de4:	4b97      	ldr	r3, [pc, #604]	; (2044 <STACK_SIZE+0x44>)
    1de6:	4798      	blx	r3
    1de8:	e7e3      	b.n	1db2 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    1dea:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1dec:	2250      	movs	r2, #80	; 0x50
    1dee:	4994      	ldr	r1, [pc, #592]	; (2040 <STACK_SIZE+0x40>)
    1df0:	a802      	add	r0, sp, #8
    1df2:	4b92      	ldr	r3, [pc, #584]	; (203c <STACK_SIZE+0x3c>)
    1df4:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1df6:	2c13      	cmp	r4, #19
    1df8:	d913      	bls.n	1e22 <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    1dfa:	7d73      	ldrb	r3, [r6, #21]
    1dfc:	009b      	lsls	r3, r3, #2
    1dfe:	b2db      	uxtb	r3, r3
    1e00:	4642      	mov	r2, r8
    1e02:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    1e04:	7db3      	ldrb	r3, [r6, #22]
    1e06:	01db      	lsls	r3, r3, #7
    1e08:	7872      	ldrb	r2, [r6, #1]
    1e0a:	4313      	orrs	r3, r2
    1e0c:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    1e0e:	4642      	mov	r2, r8
    1e10:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    1e12:	7933      	ldrb	r3, [r6, #4]
    1e14:	2b34      	cmp	r3, #52	; 0x34
    1e16:	d900      	bls.n	1e1a <adc_init+0x11e>
    1e18:	e17b      	b.n	2112 <STACK_SIZE+0x112>
    1e1a:	009b      	lsls	r3, r3, #2
    1e1c:	4a8a      	ldr	r2, [pc, #552]	; (2048 <STACK_SIZE+0x48>)
    1e1e:	58d3      	ldr	r3, [r2, r3]
    1e20:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1e22:	00a4      	lsls	r4, r4, #2
    1e24:	ab02      	add	r3, sp, #8
    1e26:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1e28:	a901      	add	r1, sp, #4
    1e2a:	2300      	movs	r3, #0
    1e2c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1e2e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1e30:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1e32:	3301      	adds	r3, #1
    1e34:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1e36:	b2c0      	uxtb	r0, r0
    1e38:	4b82      	ldr	r3, [pc, #520]	; (2044 <STACK_SIZE+0x44>)
    1e3a:	4798      	blx	r3
    1e3c:	e7dd      	b.n	1dfa <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    1e3e:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    1e40:	2250      	movs	r2, #80	; 0x50
    1e42:	497f      	ldr	r1, [pc, #508]	; (2040 <STACK_SIZE+0x40>)
    1e44:	a802      	add	r0, sp, #8
    1e46:	4b7d      	ldr	r3, [pc, #500]	; (203c <STACK_SIZE+0x3c>)
    1e48:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1e4a:	2c13      	cmp	r4, #19
    1e4c:	d915      	bls.n	1e7a <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    1e4e:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    1e50:	2250      	movs	r2, #80	; 0x50
    1e52:	497b      	ldr	r1, [pc, #492]	; (2040 <STACK_SIZE+0x40>)
    1e54:	a802      	add	r0, sp, #8
    1e56:	4b79      	ldr	r3, [pc, #484]	; (203c <STACK_SIZE+0x3c>)
    1e58:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    1e5a:	2c13      	cmp	r4, #19
    1e5c:	d8cd      	bhi.n	1dfa <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1e5e:	00a4      	lsls	r4, r4, #2
    1e60:	ab02      	add	r3, sp, #8
    1e62:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1e64:	a901      	add	r1, sp, #4
    1e66:	2300      	movs	r3, #0
    1e68:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1e6a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1e6c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1e6e:	3301      	adds	r3, #1
    1e70:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1e72:	b2c0      	uxtb	r0, r0
    1e74:	4b73      	ldr	r3, [pc, #460]	; (2044 <STACK_SIZE+0x44>)
    1e76:	4798      	blx	r3
    1e78:	e7bf      	b.n	1dfa <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    1e7a:	00a4      	lsls	r4, r4, #2
    1e7c:	ab02      	add	r3, sp, #8
    1e7e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1e80:	a901      	add	r1, sp, #4
    1e82:	2300      	movs	r3, #0
    1e84:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    1e86:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    1e88:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    1e8a:	3301      	adds	r3, #1
    1e8c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    1e8e:	b2c0      	uxtb	r0, r0
    1e90:	4b6c      	ldr	r3, [pc, #432]	; (2044 <STACK_SIZE+0x44>)
    1e92:	4798      	blx	r3
    1e94:	e7db      	b.n	1e4e <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    1e96:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    1e98:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    1e9a:	2102      	movs	r1, #2
    1e9c:	e01a      	b.n	1ed4 <adc_init+0x1d8>
		adjres = config->divide_result;
    1e9e:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    1ea0:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    1ea2:	2410      	movs	r4, #16
    1ea4:	e016      	b.n	1ed4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    1ea6:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    1ea8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1eaa:	2101      	movs	r1, #1
    1eac:	e012      	b.n	1ed4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    1eae:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    1eb0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    1eb2:	2100      	movs	r1, #0
    1eb4:	e00e      	b.n	1ed4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1eb6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    1eb8:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    1eba:	2100      	movs	r1, #0
    1ebc:	e00a      	b.n	1ed4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1ebe:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    1ec0:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    1ec2:	2100      	movs	r1, #0
    1ec4:	e006      	b.n	1ed4 <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    1ec6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    1ec8:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    1eca:	2100      	movs	r1, #0
    1ecc:	e002      	b.n	1ed4 <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    1ece:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    1ed0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    1ed2:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    1ed4:	0109      	lsls	r1, r1, #4
    1ed6:	2270      	movs	r2, #112	; 0x70
    1ed8:	400a      	ands	r2, r1
    1eda:	4313      	orrs	r3, r2
    1edc:	4642      	mov	r2, r8
    1ede:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    1ee0:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    1ee2:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    1ee4:	2b3f      	cmp	r3, #63	; 0x3f
    1ee6:	d900      	bls.n	1eea <adc_init+0x1ee>
    1ee8:	e71b      	b.n	1d22 <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    1eea:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1eec:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1eee:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1ef0:	b25b      	sxtb	r3, r3
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	dbfb      	blt.n	1eee <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    1ef6:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1ef8:	8872      	ldrh	r2, [r6, #2]
    1efa:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    1efc:	2224      	movs	r2, #36	; 0x24
    1efe:	5cb2      	ldrb	r2, [r6, r2]
    1f00:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1f02:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    1f04:	7d32      	ldrb	r2, [r6, #20]
    1f06:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    1f08:	4313      	orrs	r3, r2
    1f0a:	7cb2      	ldrb	r2, [r6, #18]
    1f0c:	0052      	lsls	r2, r2, #1
    1f0e:	4313      	orrs	r3, r2
    1f10:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    1f12:	4642      	mov	r2, r8
    1f14:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    1f16:	7e33      	ldrb	r3, [r6, #24]
    1f18:	2b00      	cmp	r3, #0
    1f1a:	d020      	beq.n	1f5e <adc_init+0x262>
		switch (resolution) {
    1f1c:	2c10      	cmp	r4, #16
    1f1e:	d100      	bne.n	1f22 <adc_init+0x226>
    1f20:	e0d9      	b.n	20d6 <STACK_SIZE+0xd6>
    1f22:	d800      	bhi.n	1f26 <adc_init+0x22a>
    1f24:	e098      	b.n	2058 <STACK_SIZE+0x58>
    1f26:	2c20      	cmp	r4, #32
    1f28:	d100      	bne.n	1f2c <adc_init+0x230>
    1f2a:	e0b6      	b.n	209a <STACK_SIZE+0x9a>
    1f2c:	2c30      	cmp	r4, #48	; 0x30
    1f2e:	d116      	bne.n	1f5e <adc_init+0x262>
			if (config->differential_mode &&
    1f30:	7cf2      	ldrb	r2, [r6, #19]
    1f32:	2a00      	cmp	r2, #0
    1f34:	d00a      	beq.n	1f4c <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    1f36:	69f2      	ldr	r2, [r6, #28]
    1f38:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    1f3a:	2017      	movs	r0, #23
			if (config->differential_mode &&
    1f3c:	2aff      	cmp	r2, #255	; 0xff
    1f3e:	d900      	bls.n	1f42 <adc_init+0x246>
    1f40:	e6ef      	b.n	1d22 <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    1f42:	6a32      	ldr	r2, [r6, #32]
    1f44:	3280      	adds	r2, #128	; 0x80
    1f46:	2aff      	cmp	r2, #255	; 0xff
    1f48:	d900      	bls.n	1f4c <adc_init+0x250>
    1f4a:	e6ea      	b.n	1d22 <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    1f4c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    1f4e:	69f2      	ldr	r2, [r6, #28]
    1f50:	2aff      	cmp	r2, #255	; 0xff
    1f52:	dd00      	ble.n	1f56 <adc_init+0x25a>
    1f54:	e6e5      	b.n	1d22 <adc_init+0x26>
    1f56:	6a32      	ldr	r2, [r6, #32]
    1f58:	2aff      	cmp	r2, #255	; 0xff
    1f5a:	dd00      	ble.n	1f5e <adc_init+0x262>
    1f5c:	e6e1      	b.n	1d22 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1f5e:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1f60:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    1f62:	b252      	sxtb	r2, r2
    1f64:	2a00      	cmp	r2, #0
    1f66:	dbfb      	blt.n	1f60 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    1f68:	4642      	mov	r2, r8
    1f6a:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    1f6c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1f6e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1f70:	b25b      	sxtb	r3, r3
    1f72:	2b00      	cmp	r3, #0
    1f74:	dbfb      	blt.n	1f6e <adc_init+0x272>
	adc_module->WINLT.reg =
    1f76:	8bb3      	ldrh	r3, [r6, #28]
    1f78:	4642      	mov	r2, r8
    1f7a:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    1f7c:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1f7e:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    1f80:	b25b      	sxtb	r3, r3
    1f82:	2b00      	cmp	r3, #0
    1f84:	dbfb      	blt.n	1f7e <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    1f86:	8c33      	ldrh	r3, [r6, #32]
    1f88:	4642      	mov	r2, r8
    1f8a:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    1f8c:	232c      	movs	r3, #44	; 0x2c
    1f8e:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    1f90:	2b00      	cmp	r3, #0
    1f92:	d005      	beq.n	1fa0 <adc_init+0x2a4>
		inputs_to_scan--;
    1f94:	3b01      	subs	r3, #1
    1f96:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    1f98:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1f9a:	2b0f      	cmp	r3, #15
    1f9c:	d900      	bls.n	1fa0 <adc_init+0x2a4>
    1f9e:	e6c0      	b.n	1d22 <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    1fa0:	222b      	movs	r2, #43	; 0x2b
    1fa2:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    1fa4:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    1fa6:	290f      	cmp	r1, #15
    1fa8:	d900      	bls.n	1fac <adc_init+0x2b0>
    1faa:	e6ba      	b.n	1d22 <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    1fac:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1fae:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    1fb0:	b252      	sxtb	r2, r2
    1fb2:	2a00      	cmp	r2, #0
    1fb4:	dbfb      	blt.n	1fae <adc_init+0x2b2>
			config->negative_input |
    1fb6:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    1fb8:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    1fba:	4302      	orrs	r2, r0
    1fbc:	68b0      	ldr	r0, [r6, #8]
    1fbe:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    1fc0:	0509      	lsls	r1, r1, #20
			config->negative_input |
    1fc2:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    1fc4:	041b      	lsls	r3, r3, #16
			config->negative_input |
    1fc6:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    1fc8:	4642      	mov	r2, r8
    1fca:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    1fcc:	232a      	movs	r3, #42	; 0x2a
    1fce:	5cf3      	ldrb	r3, [r6, r3]
    1fd0:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    1fd2:	230f      	movs	r3, #15
    1fd4:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    1fd6:	3315      	adds	r3, #21
    1fd8:	5cf3      	ldrb	r3, [r6, r3]
    1fda:	2b00      	cmp	r3, #0
    1fdc:	d012      	beq.n	2004 <STACK_SIZE+0x4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1fde:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    1fe0:	4a1a      	ldr	r2, [pc, #104]	; (204c <STACK_SIZE+0x4c>)
			return STATUS_ERR_INVALID_ARG;
    1fe2:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    1fe4:	4293      	cmp	r3, r2
    1fe6:	d900      	bls.n	1fea <adc_init+0x2ee>
    1fe8:	e69b      	b.n	1d22 <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    1fea:	4642      	mov	r2, r8
    1fec:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    1fee:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    1ff0:	2380      	movs	r3, #128	; 0x80
    1ff2:	011b      	lsls	r3, r3, #4
    1ff4:	18d3      	adds	r3, r2, r3
    1ff6:	4915      	ldr	r1, [pc, #84]	; (204c <STACK_SIZE+0x4c>)
    1ff8:	b29b      	uxth	r3, r3
    1ffa:	428b      	cmp	r3, r1
    1ffc:	d900      	bls.n	2000 <STACK_SIZE>
    1ffe:	e690      	b.n	1d22 <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2000:	4643      	mov	r3, r8
    2002:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    2004:	4b12      	ldr	r3, [pc, #72]	; (2050 <STACK_SIZE+0x50>)
    2006:	681b      	ldr	r3, [r3, #0]
    2008:	015b      	lsls	r3, r3, #5
    200a:	22e0      	movs	r2, #224	; 0xe0
    200c:	00d2      	lsls	r2, r2, #3
    200e:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    2010:	4a10      	ldr	r2, [pc, #64]	; (2054 <STACK_SIZE+0x54>)
    2012:	6851      	ldr	r1, [r2, #4]
    2014:	0149      	lsls	r1, r1, #5
    2016:	6812      	ldr	r2, [r2, #0]
    2018:	0ed2      	lsrs	r2, r2, #27
    201a:	430a      	orrs	r2, r1
    201c:	b2d2      	uxtb	r2, r2
			) |
    201e:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    2020:	4642      	mov	r2, r8
    2022:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    2024:	2000      	movs	r0, #0
    2026:	e67c      	b.n	1d22 <adc_init+0x26>
    2028:	40000400 	.word	0x40000400
    202c:	40000800 	.word	0x40000800
    2030:	20000394 	.word	0x20000394
    2034:	0000327d 	.word	0x0000327d
    2038:	000031f1 	.word	0x000031f1
    203c:	00004c81 	.word	0x00004c81
    2040:	00006678 	.word	0x00006678
    2044:	00003375 	.word	0x00003375
    2048:	000065a4 	.word	0x000065a4
    204c:	00000fff 	.word	0x00000fff
    2050:	00806024 	.word	0x00806024
    2054:	00806020 	.word	0x00806020
		switch (resolution) {
    2058:	2c00      	cmp	r4, #0
    205a:	d000      	beq.n	205e <STACK_SIZE+0x5e>
    205c:	e77f      	b.n	1f5e <adc_init+0x262>
			if (config->differential_mode &&
    205e:	7cf2      	ldrb	r2, [r6, #19]
    2060:	2a00      	cmp	r2, #0
    2062:	d00f      	beq.n	2084 <STACK_SIZE+0x84>
					(config->window.window_lower_value > 2047 ||
    2064:	69f2      	ldr	r2, [r6, #28]
    2066:	2180      	movs	r1, #128	; 0x80
    2068:	0109      	lsls	r1, r1, #4
    206a:	468c      	mov	ip, r1
    206c:	4462      	add	r2, ip
			if (config->differential_mode &&
    206e:	492a      	ldr	r1, [pc, #168]	; (2118 <STACK_SIZE+0x118>)
				return STATUS_ERR_INVALID_ARG;
    2070:	2017      	movs	r0, #23
			if (config->differential_mode &&
    2072:	428a      	cmp	r2, r1
    2074:	d900      	bls.n	2078 <STACK_SIZE+0x78>
    2076:	e654      	b.n	1d22 <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    2078:	6a32      	ldr	r2, [r6, #32]
    207a:	4462      	add	r2, ip
    207c:	4926      	ldr	r1, [pc, #152]	; (2118 <STACK_SIZE+0x118>)
    207e:	428a      	cmp	r2, r1
    2080:	d900      	bls.n	2084 <STACK_SIZE+0x84>
    2082:	e64e      	b.n	1d22 <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    2084:	4a24      	ldr	r2, [pc, #144]	; (2118 <STACK_SIZE+0x118>)
				return STATUS_ERR_INVALID_ARG;
    2086:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    2088:	69f1      	ldr	r1, [r6, #28]
    208a:	4291      	cmp	r1, r2
    208c:	dd00      	ble.n	2090 <STACK_SIZE+0x90>
    208e:	e648      	b.n	1d22 <adc_init+0x26>
    2090:	6a31      	ldr	r1, [r6, #32]
    2092:	4291      	cmp	r1, r2
    2094:	dd00      	ble.n	2098 <STACK_SIZE+0x98>
    2096:	e644      	b.n	1d22 <adc_init+0x26>
    2098:	e761      	b.n	1f5e <adc_init+0x262>
			if (config->differential_mode &&
    209a:	7cf2      	ldrb	r2, [r6, #19]
    209c:	2a00      	cmp	r2, #0
    209e:	d00f      	beq.n	20c0 <STACK_SIZE+0xc0>
					(config->window.window_lower_value > 511 ||
    20a0:	69f2      	ldr	r2, [r6, #28]
    20a2:	2180      	movs	r1, #128	; 0x80
    20a4:	0089      	lsls	r1, r1, #2
    20a6:	468c      	mov	ip, r1
    20a8:	4462      	add	r2, ip
			if (config->differential_mode &&
    20aa:	491c      	ldr	r1, [pc, #112]	; (211c <STACK_SIZE+0x11c>)
				return STATUS_ERR_INVALID_ARG;
    20ac:	2017      	movs	r0, #23
			if (config->differential_mode &&
    20ae:	428a      	cmp	r2, r1
    20b0:	d900      	bls.n	20b4 <STACK_SIZE+0xb4>
    20b2:	e636      	b.n	1d22 <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    20b4:	6a32      	ldr	r2, [r6, #32]
    20b6:	4462      	add	r2, ip
    20b8:	4918      	ldr	r1, [pc, #96]	; (211c <STACK_SIZE+0x11c>)
    20ba:	428a      	cmp	r2, r1
    20bc:	d900      	bls.n	20c0 <STACK_SIZE+0xc0>
    20be:	e630      	b.n	1d22 <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    20c0:	4a16      	ldr	r2, [pc, #88]	; (211c <STACK_SIZE+0x11c>)
				return STATUS_ERR_INVALID_ARG;
    20c2:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    20c4:	69f1      	ldr	r1, [r6, #28]
    20c6:	4291      	cmp	r1, r2
    20c8:	dd00      	ble.n	20cc <STACK_SIZE+0xcc>
    20ca:	e62a      	b.n	1d22 <adc_init+0x26>
    20cc:	6a31      	ldr	r1, [r6, #32]
    20ce:	4291      	cmp	r1, r2
    20d0:	dd00      	ble.n	20d4 <STACK_SIZE+0xd4>
    20d2:	e626      	b.n	1d22 <adc_init+0x26>
    20d4:	e743      	b.n	1f5e <adc_init+0x262>
			if (config->differential_mode &&
    20d6:	7cf2      	ldrb	r2, [r6, #19]
    20d8:	2a00      	cmp	r2, #0
    20da:	d00f      	beq.n	20fc <STACK_SIZE+0xfc>
					(config->window.window_lower_value > 32767 ||
    20dc:	69f2      	ldr	r2, [r6, #28]
    20de:	2180      	movs	r1, #128	; 0x80
    20e0:	0209      	lsls	r1, r1, #8
    20e2:	468c      	mov	ip, r1
    20e4:	4462      	add	r2, ip
			if (config->differential_mode &&
    20e6:	490e      	ldr	r1, [pc, #56]	; (2120 <STACK_SIZE+0x120>)
				return STATUS_ERR_INVALID_ARG;
    20e8:	2017      	movs	r0, #23
			if (config->differential_mode &&
    20ea:	428a      	cmp	r2, r1
    20ec:	d900      	bls.n	20f0 <STACK_SIZE+0xf0>
    20ee:	e618      	b.n	1d22 <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    20f0:	6a32      	ldr	r2, [r6, #32]
    20f2:	4462      	add	r2, ip
    20f4:	490a      	ldr	r1, [pc, #40]	; (2120 <STACK_SIZE+0x120>)
    20f6:	428a      	cmp	r2, r1
    20f8:	d900      	bls.n	20fc <STACK_SIZE+0xfc>
    20fa:	e612      	b.n	1d22 <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    20fc:	4a08      	ldr	r2, [pc, #32]	; (2120 <STACK_SIZE+0x120>)
				return STATUS_ERR_INVALID_ARG;
    20fe:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    2100:	69f1      	ldr	r1, [r6, #28]
    2102:	4291      	cmp	r1, r2
    2104:	dd00      	ble.n	2108 <STACK_SIZE+0x108>
    2106:	e60c      	b.n	1d22 <adc_init+0x26>
    2108:	6a31      	ldr	r1, [r6, #32]
    210a:	4291      	cmp	r1, r2
    210c:	dd00      	ble.n	2110 <STACK_SIZE+0x110>
    210e:	e608      	b.n	1d22 <adc_init+0x26>
    2110:	e725      	b.n	1f5e <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    2112:	2017      	movs	r0, #23
    2114:	e605      	b.n	1d22 <adc_init+0x26>
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	00000fff 	.word	0x00000fff
    211c:	000003ff 	.word	0x000003ff
    2120:	0000ffff 	.word	0x0000ffff

00002124 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    2124:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    2126:	4b2f      	ldr	r3, [pc, #188]	; (21e4 <ADC_Handler+0xc0>)
    2128:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    212a:	682b      	ldr	r3, [r5, #0]
    212c:	7e1a      	ldrb	r2, [r3, #24]
    212e:	7ddc      	ldrb	r4, [r3, #23]
    2130:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    2132:	07e2      	lsls	r2, r4, #31
    2134:	d416      	bmi.n	2164 <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
    2136:	0763      	lsls	r3, r4, #29
    2138:	d508      	bpl.n	214c <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    213a:	2304      	movs	r3, #4
    213c:	682a      	ldr	r2, [r5, #0]
    213e:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    2140:	7eeb      	ldrb	r3, [r5, #27]
    2142:	079b      	lsls	r3, r3, #30
    2144:	d502      	bpl.n	214c <ADC_Handler+0x28>
    2146:	7eab      	ldrb	r3, [r5, #26]
    2148:	079b      	lsls	r3, r3, #30
    214a:	d442      	bmi.n	21d2 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    214c:	07a3      	lsls	r3, r4, #30
    214e:	d508      	bpl.n	2162 <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2150:	2302      	movs	r3, #2
    2152:	682a      	ldr	r2, [r5, #0]
    2154:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2156:	7eeb      	ldrb	r3, [r5, #27]
    2158:	075b      	lsls	r3, r3, #29
    215a:	d502      	bpl.n	2162 <ADC_Handler+0x3e>
    215c:	7eab      	ldrb	r3, [r5, #26]
    215e:	075b      	lsls	r3, r3, #29
    2160:	d43b      	bmi.n	21da <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    2162:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2164:	2201      	movs	r2, #1
    2166:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    2168:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    216a:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
    216c:	b25b      	sxtb	r3, r3
    216e:	2b00      	cmp	r3, #0
    2170:	dbfb      	blt.n	216a <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    2172:	6969      	ldr	r1, [r5, #20]
    2174:	1c8b      	adds	r3, r1, #2
    2176:	616b      	str	r3, [r5, #20]
    2178:	8b53      	ldrh	r3, [r2, #26]
    217a:	b29b      	uxth	r3, r3
    217c:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
    217e:	8b2b      	ldrh	r3, [r5, #24]
    2180:	3b01      	subs	r3, #1
    2182:	b29b      	uxth	r3, r3
    2184:	832b      	strh	r3, [r5, #24]
    2186:	2b00      	cmp	r3, #0
    2188:	d011      	beq.n	21ae <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
    218a:	7f6b      	ldrb	r3, [r5, #29]
    218c:	2b00      	cmp	r3, #0
    218e:	d0d2      	beq.n	2136 <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2190:	682a      	ldr	r2, [r5, #0]
    2192:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    2194:	b25b      	sxtb	r3, r3
    2196:	2b00      	cmp	r3, #0
    2198:	dbfb      	blt.n	2192 <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    219a:	7b13      	ldrb	r3, [r2, #12]
    219c:	2102      	movs	r1, #2
    219e:	430b      	orrs	r3, r1
    21a0:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    21a2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    21a4:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    21a6:	b25b      	sxtb	r3, r3
    21a8:	2b00      	cmp	r3, #0
    21aa:	dbfb      	blt.n	21a4 <ADC_Handler+0x80>
    21ac:	e7c3      	b.n	2136 <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    21ae:	2301      	movs	r3, #1
    21b0:	682a      	ldr	r2, [r5, #0]
    21b2:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
    21b4:	7f2b      	ldrb	r3, [r5, #28]
    21b6:	2b05      	cmp	r3, #5
    21b8:	d1bd      	bne.n	2136 <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
    21ba:	2300      	movs	r3, #0
    21bc:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    21be:	7eeb      	ldrb	r3, [r5, #27]
    21c0:	07db      	lsls	r3, r3, #31
    21c2:	d5b8      	bpl.n	2136 <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    21c4:	7eab      	ldrb	r3, [r5, #26]
    21c6:	07db      	lsls	r3, r3, #31
    21c8:	d5b5      	bpl.n	2136 <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    21ca:	0028      	movs	r0, r5
    21cc:	68ab      	ldr	r3, [r5, #8]
    21ce:	4798      	blx	r3
    21d0:	e7b1      	b.n	2136 <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    21d2:	0028      	movs	r0, r5
    21d4:	68eb      	ldr	r3, [r5, #12]
    21d6:	4798      	blx	r3
    21d8:	e7b8      	b.n	214c <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    21da:	692b      	ldr	r3, [r5, #16]
    21dc:	0028      	movs	r0, r5
    21de:	4798      	blx	r3
}
    21e0:	e7bf      	b.n	2162 <ADC_Handler+0x3e>
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	20000394 	.word	0x20000394

000021e8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    21e8:	b500      	push	{lr}
    21ea:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    21ec:	ab01      	add	r3, sp, #4
    21ee:	2280      	movs	r2, #128	; 0x80
    21f0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    21f2:	780a      	ldrb	r2, [r1, #0]
    21f4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    21f6:	784a      	ldrb	r2, [r1, #1]
    21f8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    21fa:	788a      	ldrb	r2, [r1, #2]
    21fc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    21fe:	0019      	movs	r1, r3
    2200:	4b01      	ldr	r3, [pc, #4]	; (2208 <port_pin_set_config+0x20>)
    2202:	4798      	blx	r3
}
    2204:	b003      	add	sp, #12
    2206:	bd00      	pop	{pc}
    2208:	00003375 	.word	0x00003375

0000220c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    220c:	b5f0      	push	{r4, r5, r6, r7, lr}
    220e:	46de      	mov	lr, fp
    2210:	4657      	mov	r7, sl
    2212:	464e      	mov	r6, r9
    2214:	4645      	mov	r5, r8
    2216:	b5e0      	push	{r5, r6, r7, lr}
    2218:	b087      	sub	sp, #28
    221a:	4680      	mov	r8, r0
    221c:	9104      	str	r1, [sp, #16]
    221e:	0016      	movs	r6, r2
    2220:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    2222:	2200      	movs	r2, #0
    2224:	2300      	movs	r3, #0
    2226:	2100      	movs	r1, #0
    2228:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    222a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    222c:	2001      	movs	r0, #1
    222e:	0021      	movs	r1, r4
    2230:	9600      	str	r6, [sp, #0]
    2232:	9701      	str	r7, [sp, #4]
    2234:	465c      	mov	r4, fp
    2236:	9403      	str	r4, [sp, #12]
    2238:	4644      	mov	r4, r8
    223a:	9405      	str	r4, [sp, #20]
    223c:	e013      	b.n	2266 <long_division+0x5a>
    223e:	2420      	movs	r4, #32
    2240:	1a64      	subs	r4, r4, r1
    2242:	0005      	movs	r5, r0
    2244:	40e5      	lsrs	r5, r4
    2246:	46a8      	mov	r8, r5
    2248:	e014      	b.n	2274 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    224a:	9c00      	ldr	r4, [sp, #0]
    224c:	9d01      	ldr	r5, [sp, #4]
    224e:	1b12      	subs	r2, r2, r4
    2250:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    2252:	465c      	mov	r4, fp
    2254:	464d      	mov	r5, r9
    2256:	432c      	orrs	r4, r5
    2258:	46a3      	mov	fp, r4
    225a:	9c03      	ldr	r4, [sp, #12]
    225c:	4645      	mov	r5, r8
    225e:	432c      	orrs	r4, r5
    2260:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    2262:	3901      	subs	r1, #1
    2264:	d325      	bcc.n	22b2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    2266:	2420      	movs	r4, #32
    2268:	4264      	negs	r4, r4
    226a:	190c      	adds	r4, r1, r4
    226c:	d4e7      	bmi.n	223e <long_division+0x32>
    226e:	0005      	movs	r5, r0
    2270:	40a5      	lsls	r5, r4
    2272:	46a8      	mov	r8, r5
    2274:	0004      	movs	r4, r0
    2276:	408c      	lsls	r4, r1
    2278:	46a1      	mov	r9, r4
		r = r << 1;
    227a:	1892      	adds	r2, r2, r2
    227c:	415b      	adcs	r3, r3
    227e:	0014      	movs	r4, r2
    2280:	001d      	movs	r5, r3
		if (n & bit_shift) {
    2282:	9e05      	ldr	r6, [sp, #20]
    2284:	464f      	mov	r7, r9
    2286:	403e      	ands	r6, r7
    2288:	46b4      	mov	ip, r6
    228a:	9e04      	ldr	r6, [sp, #16]
    228c:	4647      	mov	r7, r8
    228e:	403e      	ands	r6, r7
    2290:	46b2      	mov	sl, r6
    2292:	4666      	mov	r6, ip
    2294:	4657      	mov	r7, sl
    2296:	433e      	orrs	r6, r7
    2298:	d003      	beq.n	22a2 <long_division+0x96>
			r |= 0x01;
    229a:	0006      	movs	r6, r0
    229c:	4326      	orrs	r6, r4
    229e:	0032      	movs	r2, r6
    22a0:	002b      	movs	r3, r5
		if (r >= d) {
    22a2:	9c00      	ldr	r4, [sp, #0]
    22a4:	9d01      	ldr	r5, [sp, #4]
    22a6:	429d      	cmp	r5, r3
    22a8:	d8db      	bhi.n	2262 <long_division+0x56>
    22aa:	d1ce      	bne.n	224a <long_division+0x3e>
    22ac:	4294      	cmp	r4, r2
    22ae:	d8d8      	bhi.n	2262 <long_division+0x56>
    22b0:	e7cb      	b.n	224a <long_division+0x3e>
    22b2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    22b4:	4658      	mov	r0, fp
    22b6:	0019      	movs	r1, r3
    22b8:	b007      	add	sp, #28
    22ba:	bc3c      	pop	{r2, r3, r4, r5}
    22bc:	4690      	mov	r8, r2
    22be:	4699      	mov	r9, r3
    22c0:	46a2      	mov	sl, r4
    22c2:	46ab      	mov	fp, r5
    22c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000022c6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    22c6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    22c8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    22ca:	2340      	movs	r3, #64	; 0x40
    22cc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    22ce:	4281      	cmp	r1, r0
    22d0:	d202      	bcs.n	22d8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    22d2:	0018      	movs	r0, r3
    22d4:	bd10      	pop	{r4, pc}
		baud_calculated++;
    22d6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    22d8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    22da:	1c63      	adds	r3, r4, #1
    22dc:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    22de:	4288      	cmp	r0, r1
    22e0:	d9f9      	bls.n	22d6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    22e2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    22e4:	2cff      	cmp	r4, #255	; 0xff
    22e6:	d8f4      	bhi.n	22d2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    22e8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    22ea:	2300      	movs	r3, #0
    22ec:	e7f1      	b.n	22d2 <_sercom_get_sync_baud_val+0xc>
	...

000022f0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    22f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22f2:	b083      	sub	sp, #12
    22f4:	000f      	movs	r7, r1
    22f6:	0016      	movs	r6, r2
    22f8:	aa08      	add	r2, sp, #32
    22fa:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    22fc:	0004      	movs	r4, r0
    22fe:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2300:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    2302:	42bc      	cmp	r4, r7
    2304:	d902      	bls.n	230c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    2306:	0010      	movs	r0, r2
    2308:	b003      	add	sp, #12
    230a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    230c:	2b00      	cmp	r3, #0
    230e:	d114      	bne.n	233a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    2310:	0002      	movs	r2, r0
    2312:	0008      	movs	r0, r1
    2314:	2100      	movs	r1, #0
    2316:	4c19      	ldr	r4, [pc, #100]	; (237c <_sercom_get_async_baud_val+0x8c>)
    2318:	47a0      	blx	r4
    231a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    231c:	003a      	movs	r2, r7
    231e:	2300      	movs	r3, #0
    2320:	2000      	movs	r0, #0
    2322:	4c17      	ldr	r4, [pc, #92]	; (2380 <_sercom_get_async_baud_val+0x90>)
    2324:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    2326:	2200      	movs	r2, #0
    2328:	2301      	movs	r3, #1
    232a:	1a12      	subs	r2, r2, r0
    232c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    232e:	0c12      	lsrs	r2, r2, #16
    2330:	041b      	lsls	r3, r3, #16
    2332:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    2334:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    2336:	2200      	movs	r2, #0
    2338:	e7e5      	b.n	2306 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    233a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    233c:	2b01      	cmp	r3, #1
    233e:	d1f9      	bne.n	2334 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    2340:	000a      	movs	r2, r1
    2342:	2300      	movs	r3, #0
    2344:	2100      	movs	r1, #0
    2346:	4c0d      	ldr	r4, [pc, #52]	; (237c <_sercom_get_async_baud_val+0x8c>)
    2348:	47a0      	blx	r4
    234a:	0002      	movs	r2, r0
    234c:	000b      	movs	r3, r1
    234e:	9200      	str	r2, [sp, #0]
    2350:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    2352:	0038      	movs	r0, r7
    2354:	2100      	movs	r1, #0
    2356:	4c0a      	ldr	r4, [pc, #40]	; (2380 <_sercom_get_async_baud_val+0x90>)
    2358:	47a0      	blx	r4
    235a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    235c:	2380      	movs	r3, #128	; 0x80
    235e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2360:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    2362:	4298      	cmp	r0, r3
    2364:	d8cf      	bhi.n	2306 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    2366:	0f79      	lsrs	r1, r7, #29
    2368:	00f8      	lsls	r0, r7, #3
    236a:	9a00      	ldr	r2, [sp, #0]
    236c:	9b01      	ldr	r3, [sp, #4]
    236e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    2370:	00ea      	lsls	r2, r5, #3
    2372:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    2374:	b2d2      	uxtb	r2, r2
    2376:	0352      	lsls	r2, r2, #13
    2378:	432a      	orrs	r2, r5
    237a:	e7db      	b.n	2334 <_sercom_get_async_baud_val+0x44>
    237c:	00004b99 	.word	0x00004b99
    2380:	0000220d 	.word	0x0000220d

00002384 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    2384:	b510      	push	{r4, lr}
    2386:	b082      	sub	sp, #8
    2388:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    238a:	4b0e      	ldr	r3, [pc, #56]	; (23c4 <sercom_set_gclk_generator+0x40>)
    238c:	781b      	ldrb	r3, [r3, #0]
    238e:	2b00      	cmp	r3, #0
    2390:	d007      	beq.n	23a2 <sercom_set_gclk_generator+0x1e>
    2392:	2900      	cmp	r1, #0
    2394:	d105      	bne.n	23a2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    2396:	4b0b      	ldr	r3, [pc, #44]	; (23c4 <sercom_set_gclk_generator+0x40>)
    2398:	785b      	ldrb	r3, [r3, #1]
    239a:	4283      	cmp	r3, r0
    239c:	d010      	beq.n	23c0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    239e:	201d      	movs	r0, #29
    23a0:	e00c      	b.n	23bc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    23a2:	a901      	add	r1, sp, #4
    23a4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    23a6:	2013      	movs	r0, #19
    23a8:	4b07      	ldr	r3, [pc, #28]	; (23c8 <sercom_set_gclk_generator+0x44>)
    23aa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    23ac:	2013      	movs	r0, #19
    23ae:	4b07      	ldr	r3, [pc, #28]	; (23cc <sercom_set_gclk_generator+0x48>)
    23b0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    23b2:	4b04      	ldr	r3, [pc, #16]	; (23c4 <sercom_set_gclk_generator+0x40>)
    23b4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    23b6:	2201      	movs	r2, #1
    23b8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    23ba:	2000      	movs	r0, #0
}
    23bc:	b002      	add	sp, #8
    23be:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    23c0:	2000      	movs	r0, #0
    23c2:	e7fb      	b.n	23bc <sercom_set_gclk_generator+0x38>
    23c4:	200002b4 	.word	0x200002b4
    23c8:	0000327d 	.word	0x0000327d
    23cc:	000031f1 	.word	0x000031f1

000023d0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    23d0:	4b40      	ldr	r3, [pc, #256]	; (24d4 <_sercom_get_default_pad+0x104>)
    23d2:	4298      	cmp	r0, r3
    23d4:	d031      	beq.n	243a <_sercom_get_default_pad+0x6a>
    23d6:	d90a      	bls.n	23ee <_sercom_get_default_pad+0x1e>
    23d8:	4b3f      	ldr	r3, [pc, #252]	; (24d8 <_sercom_get_default_pad+0x108>)
    23da:	4298      	cmp	r0, r3
    23dc:	d04d      	beq.n	247a <_sercom_get_default_pad+0xaa>
    23de:	4b3f      	ldr	r3, [pc, #252]	; (24dc <_sercom_get_default_pad+0x10c>)
    23e0:	4298      	cmp	r0, r3
    23e2:	d05a      	beq.n	249a <_sercom_get_default_pad+0xca>
    23e4:	4b3e      	ldr	r3, [pc, #248]	; (24e0 <_sercom_get_default_pad+0x110>)
    23e6:	4298      	cmp	r0, r3
    23e8:	d037      	beq.n	245a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    23ea:	2000      	movs	r0, #0
}
    23ec:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    23ee:	4b3d      	ldr	r3, [pc, #244]	; (24e4 <_sercom_get_default_pad+0x114>)
    23f0:	4298      	cmp	r0, r3
    23f2:	d00c      	beq.n	240e <_sercom_get_default_pad+0x3e>
    23f4:	4b3c      	ldr	r3, [pc, #240]	; (24e8 <_sercom_get_default_pad+0x118>)
    23f6:	4298      	cmp	r0, r3
    23f8:	d1f7      	bne.n	23ea <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    23fa:	2901      	cmp	r1, #1
    23fc:	d017      	beq.n	242e <_sercom_get_default_pad+0x5e>
    23fe:	2900      	cmp	r1, #0
    2400:	d05d      	beq.n	24be <_sercom_get_default_pad+0xee>
    2402:	2902      	cmp	r1, #2
    2404:	d015      	beq.n	2432 <_sercom_get_default_pad+0x62>
    2406:	2903      	cmp	r1, #3
    2408:	d015      	beq.n	2436 <_sercom_get_default_pad+0x66>
	return 0;
    240a:	2000      	movs	r0, #0
    240c:	e7ee      	b.n	23ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    240e:	2901      	cmp	r1, #1
    2410:	d007      	beq.n	2422 <_sercom_get_default_pad+0x52>
    2412:	2900      	cmp	r1, #0
    2414:	d051      	beq.n	24ba <_sercom_get_default_pad+0xea>
    2416:	2902      	cmp	r1, #2
    2418:	d005      	beq.n	2426 <_sercom_get_default_pad+0x56>
    241a:	2903      	cmp	r1, #3
    241c:	d005      	beq.n	242a <_sercom_get_default_pad+0x5a>
	return 0;
    241e:	2000      	movs	r0, #0
    2420:	e7e4      	b.n	23ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2422:	4832      	ldr	r0, [pc, #200]	; (24ec <_sercom_get_default_pad+0x11c>)
    2424:	e7e2      	b.n	23ec <_sercom_get_default_pad+0x1c>
    2426:	4832      	ldr	r0, [pc, #200]	; (24f0 <_sercom_get_default_pad+0x120>)
    2428:	e7e0      	b.n	23ec <_sercom_get_default_pad+0x1c>
    242a:	4832      	ldr	r0, [pc, #200]	; (24f4 <_sercom_get_default_pad+0x124>)
    242c:	e7de      	b.n	23ec <_sercom_get_default_pad+0x1c>
    242e:	4832      	ldr	r0, [pc, #200]	; (24f8 <_sercom_get_default_pad+0x128>)
    2430:	e7dc      	b.n	23ec <_sercom_get_default_pad+0x1c>
    2432:	4832      	ldr	r0, [pc, #200]	; (24fc <_sercom_get_default_pad+0x12c>)
    2434:	e7da      	b.n	23ec <_sercom_get_default_pad+0x1c>
    2436:	4832      	ldr	r0, [pc, #200]	; (2500 <_sercom_get_default_pad+0x130>)
    2438:	e7d8      	b.n	23ec <_sercom_get_default_pad+0x1c>
    243a:	2901      	cmp	r1, #1
    243c:	d007      	beq.n	244e <_sercom_get_default_pad+0x7e>
    243e:	2900      	cmp	r1, #0
    2440:	d03f      	beq.n	24c2 <_sercom_get_default_pad+0xf2>
    2442:	2902      	cmp	r1, #2
    2444:	d005      	beq.n	2452 <_sercom_get_default_pad+0x82>
    2446:	2903      	cmp	r1, #3
    2448:	d005      	beq.n	2456 <_sercom_get_default_pad+0x86>
	return 0;
    244a:	2000      	movs	r0, #0
    244c:	e7ce      	b.n	23ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    244e:	482d      	ldr	r0, [pc, #180]	; (2504 <_sercom_get_default_pad+0x134>)
    2450:	e7cc      	b.n	23ec <_sercom_get_default_pad+0x1c>
    2452:	482d      	ldr	r0, [pc, #180]	; (2508 <_sercom_get_default_pad+0x138>)
    2454:	e7ca      	b.n	23ec <_sercom_get_default_pad+0x1c>
    2456:	482d      	ldr	r0, [pc, #180]	; (250c <_sercom_get_default_pad+0x13c>)
    2458:	e7c8      	b.n	23ec <_sercom_get_default_pad+0x1c>
    245a:	2901      	cmp	r1, #1
    245c:	d007      	beq.n	246e <_sercom_get_default_pad+0x9e>
    245e:	2900      	cmp	r1, #0
    2460:	d031      	beq.n	24c6 <_sercom_get_default_pad+0xf6>
    2462:	2902      	cmp	r1, #2
    2464:	d005      	beq.n	2472 <_sercom_get_default_pad+0xa2>
    2466:	2903      	cmp	r1, #3
    2468:	d005      	beq.n	2476 <_sercom_get_default_pad+0xa6>
	return 0;
    246a:	2000      	movs	r0, #0
    246c:	e7be      	b.n	23ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    246e:	4828      	ldr	r0, [pc, #160]	; (2510 <_sercom_get_default_pad+0x140>)
    2470:	e7bc      	b.n	23ec <_sercom_get_default_pad+0x1c>
    2472:	4828      	ldr	r0, [pc, #160]	; (2514 <_sercom_get_default_pad+0x144>)
    2474:	e7ba      	b.n	23ec <_sercom_get_default_pad+0x1c>
    2476:	4828      	ldr	r0, [pc, #160]	; (2518 <_sercom_get_default_pad+0x148>)
    2478:	e7b8      	b.n	23ec <_sercom_get_default_pad+0x1c>
    247a:	2901      	cmp	r1, #1
    247c:	d007      	beq.n	248e <_sercom_get_default_pad+0xbe>
    247e:	2900      	cmp	r1, #0
    2480:	d023      	beq.n	24ca <_sercom_get_default_pad+0xfa>
    2482:	2902      	cmp	r1, #2
    2484:	d005      	beq.n	2492 <_sercom_get_default_pad+0xc2>
    2486:	2903      	cmp	r1, #3
    2488:	d005      	beq.n	2496 <_sercom_get_default_pad+0xc6>
	return 0;
    248a:	2000      	movs	r0, #0
    248c:	e7ae      	b.n	23ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    248e:	4823      	ldr	r0, [pc, #140]	; (251c <_sercom_get_default_pad+0x14c>)
    2490:	e7ac      	b.n	23ec <_sercom_get_default_pad+0x1c>
    2492:	4823      	ldr	r0, [pc, #140]	; (2520 <_sercom_get_default_pad+0x150>)
    2494:	e7aa      	b.n	23ec <_sercom_get_default_pad+0x1c>
    2496:	4823      	ldr	r0, [pc, #140]	; (2524 <_sercom_get_default_pad+0x154>)
    2498:	e7a8      	b.n	23ec <_sercom_get_default_pad+0x1c>
    249a:	2901      	cmp	r1, #1
    249c:	d007      	beq.n	24ae <_sercom_get_default_pad+0xde>
    249e:	2900      	cmp	r1, #0
    24a0:	d015      	beq.n	24ce <_sercom_get_default_pad+0xfe>
    24a2:	2902      	cmp	r1, #2
    24a4:	d005      	beq.n	24b2 <_sercom_get_default_pad+0xe2>
    24a6:	2903      	cmp	r1, #3
    24a8:	d005      	beq.n	24b6 <_sercom_get_default_pad+0xe6>
	return 0;
    24aa:	2000      	movs	r0, #0
    24ac:	e79e      	b.n	23ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    24ae:	481e      	ldr	r0, [pc, #120]	; (2528 <_sercom_get_default_pad+0x158>)
    24b0:	e79c      	b.n	23ec <_sercom_get_default_pad+0x1c>
    24b2:	481e      	ldr	r0, [pc, #120]	; (252c <_sercom_get_default_pad+0x15c>)
    24b4:	e79a      	b.n	23ec <_sercom_get_default_pad+0x1c>
    24b6:	481e      	ldr	r0, [pc, #120]	; (2530 <_sercom_get_default_pad+0x160>)
    24b8:	e798      	b.n	23ec <_sercom_get_default_pad+0x1c>
    24ba:	481e      	ldr	r0, [pc, #120]	; (2534 <_sercom_get_default_pad+0x164>)
    24bc:	e796      	b.n	23ec <_sercom_get_default_pad+0x1c>
    24be:	2003      	movs	r0, #3
    24c0:	e794      	b.n	23ec <_sercom_get_default_pad+0x1c>
    24c2:	481d      	ldr	r0, [pc, #116]	; (2538 <_sercom_get_default_pad+0x168>)
    24c4:	e792      	b.n	23ec <_sercom_get_default_pad+0x1c>
    24c6:	481d      	ldr	r0, [pc, #116]	; (253c <_sercom_get_default_pad+0x16c>)
    24c8:	e790      	b.n	23ec <_sercom_get_default_pad+0x1c>
    24ca:	481d      	ldr	r0, [pc, #116]	; (2540 <_sercom_get_default_pad+0x170>)
    24cc:	e78e      	b.n	23ec <_sercom_get_default_pad+0x1c>
    24ce:	481d      	ldr	r0, [pc, #116]	; (2544 <_sercom_get_default_pad+0x174>)
    24d0:	e78c      	b.n	23ec <_sercom_get_default_pad+0x1c>
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	42001000 	.word	0x42001000
    24d8:	42001800 	.word	0x42001800
    24dc:	42001c00 	.word	0x42001c00
    24e0:	42001400 	.word	0x42001400
    24e4:	42000800 	.word	0x42000800
    24e8:	42000c00 	.word	0x42000c00
    24ec:	00050003 	.word	0x00050003
    24f0:	00060003 	.word	0x00060003
    24f4:	00070003 	.word	0x00070003
    24f8:	00010003 	.word	0x00010003
    24fc:	001e0003 	.word	0x001e0003
    2500:	001f0003 	.word	0x001f0003
    2504:	00090003 	.word	0x00090003
    2508:	000a0003 	.word	0x000a0003
    250c:	000b0003 	.word	0x000b0003
    2510:	00110003 	.word	0x00110003
    2514:	00120003 	.word	0x00120003
    2518:	00130003 	.word	0x00130003
    251c:	000d0003 	.word	0x000d0003
    2520:	000e0003 	.word	0x000e0003
    2524:	000f0003 	.word	0x000f0003
    2528:	00170003 	.word	0x00170003
    252c:	00180003 	.word	0x00180003
    2530:	00190003 	.word	0x00190003
    2534:	00040003 	.word	0x00040003
    2538:	00080003 	.word	0x00080003
    253c:	00100003 	.word	0x00100003
    2540:	000c0003 	.word	0x000c0003
    2544:	00160003 	.word	0x00160003

00002548 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2548:	b530      	push	{r4, r5, lr}
    254a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    254c:	4b0b      	ldr	r3, [pc, #44]	; (257c <_sercom_get_sercom_inst_index+0x34>)
    254e:	466a      	mov	r2, sp
    2550:	cb32      	ldmia	r3!, {r1, r4, r5}
    2552:	c232      	stmia	r2!, {r1, r4, r5}
    2554:	cb32      	ldmia	r3!, {r1, r4, r5}
    2556:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2558:	9b00      	ldr	r3, [sp, #0]
    255a:	4283      	cmp	r3, r0
    255c:	d00b      	beq.n	2576 <_sercom_get_sercom_inst_index+0x2e>
    255e:	2301      	movs	r3, #1
    2560:	009a      	lsls	r2, r3, #2
    2562:	4669      	mov	r1, sp
    2564:	5852      	ldr	r2, [r2, r1]
    2566:	4282      	cmp	r2, r0
    2568:	d006      	beq.n	2578 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    256a:	3301      	adds	r3, #1
    256c:	2b06      	cmp	r3, #6
    256e:	d1f7      	bne.n	2560 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2570:	2000      	movs	r0, #0
}
    2572:	b007      	add	sp, #28
    2574:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2576:	2300      	movs	r3, #0
			return i;
    2578:	b2d8      	uxtb	r0, r3
    257a:	e7fa      	b.n	2572 <_sercom_get_sercom_inst_index+0x2a>
    257c:	000066c8 	.word	0x000066c8

00002580 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2580:	4770      	bx	lr
	...

00002584 <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2584:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    2586:	4b0a      	ldr	r3, [pc, #40]	; (25b0 <_sercom_set_handler+0x2c>)
    2588:	781b      	ldrb	r3, [r3, #0]
    258a:	2b00      	cmp	r3, #0
    258c:	d10c      	bne.n	25a8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    258e:	4f09      	ldr	r7, [pc, #36]	; (25b4 <_sercom_set_handler+0x30>)
    2590:	4e09      	ldr	r6, [pc, #36]	; (25b8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    2592:	4d0a      	ldr	r5, [pc, #40]	; (25bc <_sercom_set_handler+0x38>)
    2594:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2596:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2598:	195a      	adds	r2, r3, r5
    259a:	6014      	str	r4, [r2, #0]
    259c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    259e:	2b18      	cmp	r3, #24
    25a0:	d1f9      	bne.n	2596 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    25a2:	2201      	movs	r2, #1
    25a4:	4b02      	ldr	r3, [pc, #8]	; (25b0 <_sercom_set_handler+0x2c>)
    25a6:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    25a8:	0080      	lsls	r0, r0, #2
    25aa:	4b02      	ldr	r3, [pc, #8]	; (25b4 <_sercom_set_handler+0x30>)
    25ac:	50c1      	str	r1, [r0, r3]
}
    25ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25b0:	200002b6 	.word	0x200002b6
    25b4:	200002b8 	.word	0x200002b8
    25b8:	00002581 	.word	0x00002581
    25bc:	20000398 	.word	0x20000398

000025c0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    25c0:	b500      	push	{lr}
    25c2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    25c4:	2309      	movs	r3, #9
    25c6:	466a      	mov	r2, sp
    25c8:	7013      	strb	r3, [r2, #0]
    25ca:	3301      	adds	r3, #1
    25cc:	7053      	strb	r3, [r2, #1]
    25ce:	3301      	adds	r3, #1
    25d0:	7093      	strb	r3, [r2, #2]
    25d2:	3301      	adds	r3, #1
    25d4:	70d3      	strb	r3, [r2, #3]
    25d6:	3301      	adds	r3, #1
    25d8:	7113      	strb	r3, [r2, #4]
    25da:	3301      	adds	r3, #1
    25dc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    25de:	4b03      	ldr	r3, [pc, #12]	; (25ec <_sercom_get_interrupt_vector+0x2c>)
    25e0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    25e2:	466b      	mov	r3, sp
    25e4:	5618      	ldrsb	r0, [r3, r0]
}
    25e6:	b003      	add	sp, #12
    25e8:	bd00      	pop	{pc}
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	00002549 	.word	0x00002549

000025f0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    25f0:	b510      	push	{r4, lr}
    25f2:	4b02      	ldr	r3, [pc, #8]	; (25fc <SERCOM0_Handler+0xc>)
    25f4:	681b      	ldr	r3, [r3, #0]
    25f6:	2000      	movs	r0, #0
    25f8:	4798      	blx	r3
    25fa:	bd10      	pop	{r4, pc}
    25fc:	200002b8 	.word	0x200002b8

00002600 <SERCOM1_Handler>:
    2600:	b510      	push	{r4, lr}
    2602:	4b02      	ldr	r3, [pc, #8]	; (260c <SERCOM1_Handler+0xc>)
    2604:	685b      	ldr	r3, [r3, #4]
    2606:	2001      	movs	r0, #1
    2608:	4798      	blx	r3
    260a:	bd10      	pop	{r4, pc}
    260c:	200002b8 	.word	0x200002b8

00002610 <SERCOM2_Handler>:
    2610:	b510      	push	{r4, lr}
    2612:	4b02      	ldr	r3, [pc, #8]	; (261c <SERCOM2_Handler+0xc>)
    2614:	689b      	ldr	r3, [r3, #8]
    2616:	2002      	movs	r0, #2
    2618:	4798      	blx	r3
    261a:	bd10      	pop	{r4, pc}
    261c:	200002b8 	.word	0x200002b8

00002620 <SERCOM3_Handler>:
    2620:	b510      	push	{r4, lr}
    2622:	4b02      	ldr	r3, [pc, #8]	; (262c <SERCOM3_Handler+0xc>)
    2624:	68db      	ldr	r3, [r3, #12]
    2626:	2003      	movs	r0, #3
    2628:	4798      	blx	r3
    262a:	bd10      	pop	{r4, pc}
    262c:	200002b8 	.word	0x200002b8

00002630 <SERCOM4_Handler>:
    2630:	b510      	push	{r4, lr}
    2632:	4b02      	ldr	r3, [pc, #8]	; (263c <SERCOM4_Handler+0xc>)
    2634:	691b      	ldr	r3, [r3, #16]
    2636:	2004      	movs	r0, #4
    2638:	4798      	blx	r3
    263a:	bd10      	pop	{r4, pc}
    263c:	200002b8 	.word	0x200002b8

00002640 <SERCOM5_Handler>:
    2640:	b510      	push	{r4, lr}
    2642:	4b02      	ldr	r3, [pc, #8]	; (264c <SERCOM5_Handler+0xc>)
    2644:	695b      	ldr	r3, [r3, #20]
    2646:	2005      	movs	r0, #5
    2648:	4798      	blx	r3
    264a:	bd10      	pop	{r4, pc}
    264c:	200002b8 	.word	0x200002b8

00002650 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2650:	b5f0      	push	{r4, r5, r6, r7, lr}
    2652:	46de      	mov	lr, fp
    2654:	4657      	mov	r7, sl
    2656:	464e      	mov	r6, r9
    2658:	4645      	mov	r5, r8
    265a:	b5e0      	push	{r5, r6, r7, lr}
    265c:	b091      	sub	sp, #68	; 0x44
    265e:	0005      	movs	r5, r0
    2660:	000c      	movs	r4, r1
    2662:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2664:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2666:	0008      	movs	r0, r1
    2668:	4bba      	ldr	r3, [pc, #744]	; (2954 <usart_init+0x304>)
    266a:	4798      	blx	r3
    266c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    266e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2670:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2672:	07db      	lsls	r3, r3, #31
    2674:	d506      	bpl.n	2684 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2676:	b011      	add	sp, #68	; 0x44
    2678:	bc3c      	pop	{r2, r3, r4, r5}
    267a:	4690      	mov	r8, r2
    267c:	4699      	mov	r9, r3
    267e:	46a2      	mov	sl, r4
    2680:	46ab      	mov	fp, r5
    2682:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2684:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2686:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2688:	079b      	lsls	r3, r3, #30
    268a:	d4f4      	bmi.n	2676 <usart_init+0x26>
    268c:	49b2      	ldr	r1, [pc, #712]	; (2958 <usart_init+0x308>)
    268e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2690:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2692:	2301      	movs	r3, #1
    2694:	40bb      	lsls	r3, r7
    2696:	4303      	orrs	r3, r0
    2698:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    269a:	a90f      	add	r1, sp, #60	; 0x3c
    269c:	272d      	movs	r7, #45	; 0x2d
    269e:	5df3      	ldrb	r3, [r6, r7]
    26a0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    26a2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    26a4:	b2d3      	uxtb	r3, r2
    26a6:	9302      	str	r3, [sp, #8]
    26a8:	0018      	movs	r0, r3
    26aa:	4bac      	ldr	r3, [pc, #688]	; (295c <usart_init+0x30c>)
    26ac:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    26ae:	9802      	ldr	r0, [sp, #8]
    26b0:	4bab      	ldr	r3, [pc, #684]	; (2960 <usart_init+0x310>)
    26b2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    26b4:	5df0      	ldrb	r0, [r6, r7]
    26b6:	2100      	movs	r1, #0
    26b8:	4baa      	ldr	r3, [pc, #680]	; (2964 <usart_init+0x314>)
    26ba:	4798      	blx	r3
	module->character_size = config->character_size;
    26bc:	7af3      	ldrb	r3, [r6, #11]
    26be:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    26c0:	2324      	movs	r3, #36	; 0x24
    26c2:	5cf3      	ldrb	r3, [r6, r3]
    26c4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    26c6:	2325      	movs	r3, #37	; 0x25
    26c8:	5cf3      	ldrb	r3, [r6, r3]
    26ca:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    26cc:	7ef3      	ldrb	r3, [r6, #27]
    26ce:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    26d0:	7f33      	ldrb	r3, [r6, #28]
    26d2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    26d4:	682b      	ldr	r3, [r5, #0]
    26d6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    26d8:	0018      	movs	r0, r3
    26da:	4b9e      	ldr	r3, [pc, #632]	; (2954 <usart_init+0x304>)
    26dc:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    26de:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    26e0:	2200      	movs	r2, #0
    26e2:	230e      	movs	r3, #14
    26e4:	a906      	add	r1, sp, #24
    26e6:	468c      	mov	ip, r1
    26e8:	4463      	add	r3, ip
    26ea:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    26ec:	8a32      	ldrh	r2, [r6, #16]
    26ee:	9202      	str	r2, [sp, #8]
    26f0:	2380      	movs	r3, #128	; 0x80
    26f2:	01db      	lsls	r3, r3, #7
    26f4:	429a      	cmp	r2, r3
    26f6:	d100      	bne.n	26fa <usart_init+0xaa>
    26f8:	e09a      	b.n	2830 <usart_init+0x1e0>
    26fa:	d90f      	bls.n	271c <usart_init+0xcc>
    26fc:	23c0      	movs	r3, #192	; 0xc0
    26fe:	01db      	lsls	r3, r3, #7
    2700:	9a02      	ldr	r2, [sp, #8]
    2702:	429a      	cmp	r2, r3
    2704:	d100      	bne.n	2708 <usart_init+0xb8>
    2706:	e08e      	b.n	2826 <usart_init+0x1d6>
    2708:	2380      	movs	r3, #128	; 0x80
    270a:	021b      	lsls	r3, r3, #8
    270c:	429a      	cmp	r2, r3
    270e:	d000      	beq.n	2712 <usart_init+0xc2>
    2710:	e11b      	b.n	294a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2712:	2303      	movs	r3, #3
    2714:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2716:	2300      	movs	r3, #0
    2718:	9307      	str	r3, [sp, #28]
    271a:	e008      	b.n	272e <usart_init+0xde>
	switch (config->sample_rate) {
    271c:	2380      	movs	r3, #128	; 0x80
    271e:	019b      	lsls	r3, r3, #6
    2720:	429a      	cmp	r2, r3
    2722:	d000      	beq.n	2726 <usart_init+0xd6>
    2724:	e111      	b.n	294a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2726:	2310      	movs	r3, #16
    2728:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    272a:	3b0f      	subs	r3, #15
    272c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    272e:	6833      	ldr	r3, [r6, #0]
    2730:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2732:	68f3      	ldr	r3, [r6, #12]
    2734:	469b      	mov	fp, r3
		config->sample_adjustment |
    2736:	6973      	ldr	r3, [r6, #20]
    2738:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    273a:	7e33      	ldrb	r3, [r6, #24]
    273c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    273e:	2326      	movs	r3, #38	; 0x26
    2740:	5cf3      	ldrb	r3, [r6, r3]
    2742:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2744:	6873      	ldr	r3, [r6, #4]
    2746:	4699      	mov	r9, r3
	switch (transfer_mode)
    2748:	2b00      	cmp	r3, #0
    274a:	d100      	bne.n	274e <usart_init+0xfe>
    274c:	e09c      	b.n	2888 <usart_init+0x238>
    274e:	2380      	movs	r3, #128	; 0x80
    2750:	055b      	lsls	r3, r3, #21
    2752:	4599      	cmp	r9, r3
    2754:	d100      	bne.n	2758 <usart_init+0x108>
    2756:	e080      	b.n	285a <usart_init+0x20a>
	if(config->encoding_format_enable) {
    2758:	7e73      	ldrb	r3, [r6, #25]
    275a:	2b00      	cmp	r3, #0
    275c:	d002      	beq.n	2764 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    275e:	7eb3      	ldrb	r3, [r6, #26]
    2760:	4642      	mov	r2, r8
    2762:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    2764:	230e      	movs	r3, #14
    2766:	aa06      	add	r2, sp, #24
    2768:	4694      	mov	ip, r2
    276a:	4463      	add	r3, ip
    276c:	881b      	ldrh	r3, [r3, #0]
    276e:	4642      	mov	r2, r8
    2770:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2772:	9b05      	ldr	r3, [sp, #20]
    2774:	465a      	mov	r2, fp
    2776:	4313      	orrs	r3, r2
    2778:	9a03      	ldr	r2, [sp, #12]
    277a:	4313      	orrs	r3, r2
    277c:	464a      	mov	r2, r9
    277e:	4313      	orrs	r3, r2
    2780:	9f02      	ldr	r7, [sp, #8]
    2782:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2784:	9b04      	ldr	r3, [sp, #16]
    2786:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2788:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    278a:	4653      	mov	r3, sl
    278c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    278e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2790:	2327      	movs	r3, #39	; 0x27
    2792:	5cf3      	ldrb	r3, [r6, r3]
    2794:	2b00      	cmp	r3, #0
    2796:	d101      	bne.n	279c <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2798:	3304      	adds	r3, #4
    279a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    279c:	7e73      	ldrb	r3, [r6, #25]
    279e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    27a0:	7f32      	ldrb	r2, [r6, #28]
    27a2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    27a4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    27a6:	7f72      	ldrb	r2, [r6, #29]
    27a8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    27aa:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    27ac:	2224      	movs	r2, #36	; 0x24
    27ae:	5cb2      	ldrb	r2, [r6, r2]
    27b0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    27b2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    27b4:	2225      	movs	r2, #37	; 0x25
    27b6:	5cb2      	ldrb	r2, [r6, r2]
    27b8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    27ba:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    27bc:	7ab1      	ldrb	r1, [r6, #10]
    27be:	7af2      	ldrb	r2, [r6, #11]
    27c0:	4311      	orrs	r1, r2
    27c2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    27c4:	8933      	ldrh	r3, [r6, #8]
    27c6:	2bff      	cmp	r3, #255	; 0xff
    27c8:	d100      	bne.n	27cc <usart_init+0x17c>
    27ca:	e081      	b.n	28d0 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    27cc:	2280      	movs	r2, #128	; 0x80
    27ce:	0452      	lsls	r2, r2, #17
    27d0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    27d2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    27d4:	232c      	movs	r3, #44	; 0x2c
    27d6:	5cf3      	ldrb	r3, [r6, r3]
    27d8:	2b00      	cmp	r3, #0
    27da:	d103      	bne.n	27e4 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    27dc:	4b62      	ldr	r3, [pc, #392]	; (2968 <usart_init+0x318>)
    27de:	789b      	ldrb	r3, [r3, #2]
    27e0:	079b      	lsls	r3, r3, #30
    27e2:	d501      	bpl.n	27e8 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    27e4:	2380      	movs	r3, #128	; 0x80
    27e6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    27e8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    27ea:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    27ec:	2b00      	cmp	r3, #0
    27ee:	d1fc      	bne.n	27ea <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    27f0:	4643      	mov	r3, r8
    27f2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    27f4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    27f6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    27f8:	2b00      	cmp	r3, #0
    27fa:	d1fc      	bne.n	27f6 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    27fc:	4643      	mov	r3, r8
    27fe:	601f      	str	r7, [r3, #0]
    2800:	ab0e      	add	r3, sp, #56	; 0x38
    2802:	2280      	movs	r2, #128	; 0x80
    2804:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2806:	2200      	movs	r2, #0
    2808:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    280a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    280c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    280e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2810:	930a      	str	r3, [sp, #40]	; 0x28
    2812:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2814:	930b      	str	r3, [sp, #44]	; 0x2c
    2816:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2818:	930c      	str	r3, [sp, #48]	; 0x30
    281a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    281c:	9302      	str	r3, [sp, #8]
    281e:	930d      	str	r3, [sp, #52]	; 0x34
    2820:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2822:	ae0a      	add	r6, sp, #40	; 0x28
    2824:	e063      	b.n	28ee <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2826:	2308      	movs	r3, #8
    2828:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    282a:	3b07      	subs	r3, #7
    282c:	9307      	str	r3, [sp, #28]
    282e:	e77e      	b.n	272e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2830:	6833      	ldr	r3, [r6, #0]
    2832:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2834:	68f3      	ldr	r3, [r6, #12]
    2836:	469b      	mov	fp, r3
		config->sample_adjustment |
    2838:	6973      	ldr	r3, [r6, #20]
    283a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    283c:	7e33      	ldrb	r3, [r6, #24]
    283e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2840:	2326      	movs	r3, #38	; 0x26
    2842:	5cf3      	ldrb	r3, [r6, r3]
    2844:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2846:	6873      	ldr	r3, [r6, #4]
    2848:	4699      	mov	r9, r3
	switch (transfer_mode)
    284a:	2b00      	cmp	r3, #0
    284c:	d018      	beq.n	2880 <usart_init+0x230>
    284e:	2380      	movs	r3, #128	; 0x80
    2850:	055b      	lsls	r3, r3, #21
    2852:	4599      	cmp	r9, r3
    2854:	d001      	beq.n	285a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    2856:	2000      	movs	r0, #0
    2858:	e025      	b.n	28a6 <usart_init+0x256>
			if (!config->use_external_clock) {
    285a:	2327      	movs	r3, #39	; 0x27
    285c:	5cf3      	ldrb	r3, [r6, r3]
    285e:	2b00      	cmp	r3, #0
    2860:	d000      	beq.n	2864 <usart_init+0x214>
    2862:	e779      	b.n	2758 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2864:	6a33      	ldr	r3, [r6, #32]
    2866:	001f      	movs	r7, r3
    2868:	b2c0      	uxtb	r0, r0
    286a:	4b40      	ldr	r3, [pc, #256]	; (296c <usart_init+0x31c>)
    286c:	4798      	blx	r3
    286e:	0001      	movs	r1, r0
    2870:	220e      	movs	r2, #14
    2872:	ab06      	add	r3, sp, #24
    2874:	469c      	mov	ip, r3
    2876:	4462      	add	r2, ip
    2878:	0038      	movs	r0, r7
    287a:	4b3d      	ldr	r3, [pc, #244]	; (2970 <usart_init+0x320>)
    287c:	4798      	blx	r3
    287e:	e012      	b.n	28a6 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2880:	2308      	movs	r3, #8
    2882:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2884:	2300      	movs	r3, #0
    2886:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2888:	2327      	movs	r3, #39	; 0x27
    288a:	5cf3      	ldrb	r3, [r6, r3]
    288c:	2b00      	cmp	r3, #0
    288e:	d00e      	beq.n	28ae <usart_init+0x25e>
				status_code =
    2890:	9b06      	ldr	r3, [sp, #24]
    2892:	9300      	str	r3, [sp, #0]
    2894:	9b07      	ldr	r3, [sp, #28]
    2896:	220e      	movs	r2, #14
    2898:	a906      	add	r1, sp, #24
    289a:	468c      	mov	ip, r1
    289c:	4462      	add	r2, ip
    289e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    28a0:	6a30      	ldr	r0, [r6, #32]
    28a2:	4f34      	ldr	r7, [pc, #208]	; (2974 <usart_init+0x324>)
    28a4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    28a6:	2800      	cmp	r0, #0
    28a8:	d000      	beq.n	28ac <usart_init+0x25c>
    28aa:	e6e4      	b.n	2676 <usart_init+0x26>
    28ac:	e754      	b.n	2758 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    28ae:	6a33      	ldr	r3, [r6, #32]
    28b0:	001f      	movs	r7, r3
    28b2:	b2c0      	uxtb	r0, r0
    28b4:	4b2d      	ldr	r3, [pc, #180]	; (296c <usart_init+0x31c>)
    28b6:	4798      	blx	r3
    28b8:	0001      	movs	r1, r0
				status_code =
    28ba:	9b06      	ldr	r3, [sp, #24]
    28bc:	9300      	str	r3, [sp, #0]
    28be:	9b07      	ldr	r3, [sp, #28]
    28c0:	220e      	movs	r2, #14
    28c2:	a806      	add	r0, sp, #24
    28c4:	4684      	mov	ip, r0
    28c6:	4462      	add	r2, ip
    28c8:	0038      	movs	r0, r7
    28ca:	4f2a      	ldr	r7, [pc, #168]	; (2974 <usart_init+0x324>)
    28cc:	47b8      	blx	r7
    28ce:	e7ea      	b.n	28a6 <usart_init+0x256>
		if(config->lin_slave_enable) {
    28d0:	7ef3      	ldrb	r3, [r6, #27]
    28d2:	2b00      	cmp	r3, #0
    28d4:	d100      	bne.n	28d8 <usart_init+0x288>
    28d6:	e77d      	b.n	27d4 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    28d8:	2380      	movs	r3, #128	; 0x80
    28da:	04db      	lsls	r3, r3, #19
    28dc:	431f      	orrs	r7, r3
    28de:	e779      	b.n	27d4 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    28e0:	0020      	movs	r0, r4
    28e2:	4b25      	ldr	r3, [pc, #148]	; (2978 <usart_init+0x328>)
    28e4:	4798      	blx	r3
    28e6:	e007      	b.n	28f8 <usart_init+0x2a8>
    28e8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    28ea:	2f04      	cmp	r7, #4
    28ec:	d00d      	beq.n	290a <usart_init+0x2ba>
    28ee:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    28f0:	00bb      	lsls	r3, r7, #2
    28f2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    28f4:	2800      	cmp	r0, #0
    28f6:	d0f3      	beq.n	28e0 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    28f8:	1c43      	adds	r3, r0, #1
    28fa:	d0f5      	beq.n	28e8 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    28fc:	a90e      	add	r1, sp, #56	; 0x38
    28fe:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2900:	0c00      	lsrs	r0, r0, #16
    2902:	b2c0      	uxtb	r0, r0
    2904:	4b1d      	ldr	r3, [pc, #116]	; (297c <usart_init+0x32c>)
    2906:	4798      	blx	r3
    2908:	e7ee      	b.n	28e8 <usart_init+0x298>
		module->callback[i]            = NULL;
    290a:	2300      	movs	r3, #0
    290c:	60eb      	str	r3, [r5, #12]
    290e:	612b      	str	r3, [r5, #16]
    2910:	616b      	str	r3, [r5, #20]
    2912:	61ab      	str	r3, [r5, #24]
    2914:	61eb      	str	r3, [r5, #28]
    2916:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2918:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    291a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    291c:	2200      	movs	r2, #0
    291e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2920:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2922:	3330      	adds	r3, #48	; 0x30
    2924:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2926:	3301      	adds	r3, #1
    2928:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    292a:	3301      	adds	r3, #1
    292c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    292e:	3301      	adds	r3, #1
    2930:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2932:	6828      	ldr	r0, [r5, #0]
    2934:	4b07      	ldr	r3, [pc, #28]	; (2954 <usart_init+0x304>)
    2936:	4798      	blx	r3
    2938:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    293a:	4911      	ldr	r1, [pc, #68]	; (2980 <usart_init+0x330>)
    293c:	4b11      	ldr	r3, [pc, #68]	; (2984 <usart_init+0x334>)
    293e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2940:	00a4      	lsls	r4, r4, #2
    2942:	4b11      	ldr	r3, [pc, #68]	; (2988 <usart_init+0x338>)
    2944:	50e5      	str	r5, [r4, r3]
	return status_code;
    2946:	2000      	movs	r0, #0
    2948:	e695      	b.n	2676 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    294a:	2310      	movs	r3, #16
    294c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    294e:	2300      	movs	r3, #0
    2950:	9307      	str	r3, [sp, #28]
    2952:	e6ec      	b.n	272e <usart_init+0xde>
    2954:	00002549 	.word	0x00002549
    2958:	40000400 	.word	0x40000400
    295c:	0000327d 	.word	0x0000327d
    2960:	000031f1 	.word	0x000031f1
    2964:	00002385 	.word	0x00002385
    2968:	41002000 	.word	0x41002000
    296c:	00003299 	.word	0x00003299
    2970:	000022c7 	.word	0x000022c7
    2974:	000022f1 	.word	0x000022f1
    2978:	000023d1 	.word	0x000023d1
    297c:	00003375 	.word	0x00003375
    2980:	00002aa5 	.word	0x00002aa5
    2984:	00002585 	.word	0x00002585
    2988:	20000398 	.word	0x20000398

0000298c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    298c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    298e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2990:	2a00      	cmp	r2, #0
    2992:	d101      	bne.n	2998 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2994:	0018      	movs	r0, r3
    2996:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2998:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    299a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    299c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    299e:	2a00      	cmp	r2, #0
    29a0:	d1f8      	bne.n	2994 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    29a2:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    29a4:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    29a6:	2102      	movs	r1, #2
    29a8:	7e13      	ldrb	r3, [r2, #24]
    29aa:	420b      	tst	r3, r1
    29ac:	d0fc      	beq.n	29a8 <usart_write_wait+0x1c>
	return STATUS_OK;
    29ae:	2300      	movs	r3, #0
    29b0:	e7f0      	b.n	2994 <usart_write_wait+0x8>

000029b2 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    29b2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    29b4:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    29b6:	2a00      	cmp	r2, #0
    29b8:	d101      	bne.n	29be <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    29ba:	0018      	movs	r0, r3
    29bc:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    29be:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    29c0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    29c2:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    29c4:	2a00      	cmp	r2, #0
    29c6:	d1f8      	bne.n	29ba <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    29c8:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    29ca:	7e10      	ldrb	r0, [r2, #24]
    29cc:	0740      	lsls	r0, r0, #29
    29ce:	d5f4      	bpl.n	29ba <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    29d0:	8b53      	ldrh	r3, [r2, #26]
    29d2:	b2db      	uxtb	r3, r3
	if (error_code) {
    29d4:	0698      	lsls	r0, r3, #26
    29d6:	d01d      	beq.n	2a14 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    29d8:	0798      	lsls	r0, r3, #30
    29da:	d503      	bpl.n	29e4 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    29dc:	2302      	movs	r3, #2
    29de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    29e0:	3318      	adds	r3, #24
    29e2:	e7ea      	b.n	29ba <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    29e4:	0758      	lsls	r0, r3, #29
    29e6:	d503      	bpl.n	29f0 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    29e8:	2304      	movs	r3, #4
    29ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    29ec:	331a      	adds	r3, #26
    29ee:	e7e4      	b.n	29ba <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    29f0:	07d8      	lsls	r0, r3, #31
    29f2:	d503      	bpl.n	29fc <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    29f4:	2301      	movs	r3, #1
    29f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    29f8:	3312      	adds	r3, #18
    29fa:	e7de      	b.n	29ba <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    29fc:	06d8      	lsls	r0, r3, #27
    29fe:	d503      	bpl.n	2a08 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2a00:	2310      	movs	r3, #16
    2a02:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2a04:	3332      	adds	r3, #50	; 0x32
    2a06:	e7d8      	b.n	29ba <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2a08:	069b      	lsls	r3, r3, #26
    2a0a:	d503      	bpl.n	2a14 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2a0c:	2320      	movs	r3, #32
    2a0e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2a10:	3321      	adds	r3, #33	; 0x21
    2a12:	e7d2      	b.n	29ba <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2a14:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2a16:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2a18:	2300      	movs	r3, #0
    2a1a:	e7ce      	b.n	29ba <usart_read_wait+0x8>

00002a1c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a1e:	0004      	movs	r4, r0
    2a20:	000d      	movs	r5, r1
    2a22:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a24:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2a26:	4b0f      	ldr	r3, [pc, #60]	; (2a64 <_usart_read_buffer+0x48>)
    2a28:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2a2a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2a2c:	b29b      	uxth	r3, r3
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d003      	beq.n	2a3a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2a32:	4b0d      	ldr	r3, [pc, #52]	; (2a68 <_usart_read_buffer+0x4c>)
    2a34:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2a36:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2a3a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2a3c:	4b0a      	ldr	r3, [pc, #40]	; (2a68 <_usart_read_buffer+0x4c>)
    2a3e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2a40:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2a42:	2205      	movs	r2, #5
    2a44:	2332      	movs	r3, #50	; 0x32
    2a46:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2a48:	3b2e      	subs	r3, #46	; 0x2e
    2a4a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2a4c:	7a23      	ldrb	r3, [r4, #8]
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d001      	beq.n	2a56 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2a52:	2320      	movs	r3, #32
    2a54:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2a56:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2a58:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d0ec      	beq.n	2a38 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2a5e:	2308      	movs	r3, #8
    2a60:	75bb      	strb	r3, [r7, #22]
    2a62:	e7e9      	b.n	2a38 <_usart_read_buffer+0x1c>
    2a64:	00001c11 	.word	0x00001c11
    2a68:	00001c51 	.word	0x00001c51

00002a6c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2a6c:	1c93      	adds	r3, r2, #2
    2a6e:	009b      	lsls	r3, r3, #2
    2a70:	18c3      	adds	r3, r0, r3
    2a72:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2a74:	2130      	movs	r1, #48	; 0x30
    2a76:	2301      	movs	r3, #1
    2a78:	4093      	lsls	r3, r2
    2a7a:	001a      	movs	r2, r3
    2a7c:	5c43      	ldrb	r3, [r0, r1]
    2a7e:	4313      	orrs	r3, r2
    2a80:	5443      	strb	r3, [r0, r1]
}
    2a82:	4770      	bx	lr

00002a84 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2a84:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2a86:	2317      	movs	r3, #23
	if (length == 0) {
    2a88:	2a00      	cmp	r2, #0
    2a8a:	d101      	bne.n	2a90 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2a8c:	0018      	movs	r0, r3
    2a8e:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2a90:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2a92:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2a94:	2c00      	cmp	r4, #0
    2a96:	d0f9      	beq.n	2a8c <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2a98:	4b01      	ldr	r3, [pc, #4]	; (2aa0 <usart_read_buffer_job+0x1c>)
    2a9a:	4798      	blx	r3
    2a9c:	0003      	movs	r3, r0
    2a9e:	e7f5      	b.n	2a8c <usart_read_buffer_job+0x8>
    2aa0:	00002a1d 	.word	0x00002a1d

00002aa4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2aa6:	0080      	lsls	r0, r0, #2
    2aa8:	4b62      	ldr	r3, [pc, #392]	; (2c34 <_usart_interrupt_handler+0x190>)
    2aaa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2aac:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2aae:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d1fc      	bne.n	2aae <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2ab4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2ab6:	7da6      	ldrb	r6, [r4, #22]
    2ab8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2aba:	2330      	movs	r3, #48	; 0x30
    2abc:	5ceb      	ldrb	r3, [r5, r3]
    2abe:	2231      	movs	r2, #49	; 0x31
    2ac0:	5caf      	ldrb	r7, [r5, r2]
    2ac2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2ac4:	07f3      	lsls	r3, r6, #31
    2ac6:	d522      	bpl.n	2b0e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2ac8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2aca:	b29b      	uxth	r3, r3
    2acc:	2b00      	cmp	r3, #0
    2ace:	d01c      	beq.n	2b0a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ad0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2ad2:	7813      	ldrb	r3, [r2, #0]
    2ad4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2ad6:	1c51      	adds	r1, r2, #1
    2ad8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2ada:	7969      	ldrb	r1, [r5, #5]
    2adc:	2901      	cmp	r1, #1
    2ade:	d00e      	beq.n	2afe <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ae0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2ae2:	05db      	lsls	r3, r3, #23
    2ae4:	0ddb      	lsrs	r3, r3, #23
    2ae6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2ae8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2aea:	3b01      	subs	r3, #1
    2aec:	b29b      	uxth	r3, r3
    2aee:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2af0:	2b00      	cmp	r3, #0
    2af2:	d10c      	bne.n	2b0e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2af4:	3301      	adds	r3, #1
    2af6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2af8:	3301      	adds	r3, #1
    2afa:	75a3      	strb	r3, [r4, #22]
    2afc:	e007      	b.n	2b0e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2afe:	7851      	ldrb	r1, [r2, #1]
    2b00:	0209      	lsls	r1, r1, #8
    2b02:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2b04:	3202      	adds	r2, #2
    2b06:	62aa      	str	r2, [r5, #40]	; 0x28
    2b08:	e7eb      	b.n	2ae2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2b0a:	2301      	movs	r3, #1
    2b0c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2b0e:	07b3      	lsls	r3, r6, #30
    2b10:	d506      	bpl.n	2b20 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2b12:	2302      	movs	r3, #2
    2b14:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2b16:	2200      	movs	r2, #0
    2b18:	3331      	adds	r3, #49	; 0x31
    2b1a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2b1c:	07fb      	lsls	r3, r7, #31
    2b1e:	d41a      	bmi.n	2b56 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2b20:	0773      	lsls	r3, r6, #29
    2b22:	d565      	bpl.n	2bf0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2b24:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2b26:	b29b      	uxth	r3, r3
    2b28:	2b00      	cmp	r3, #0
    2b2a:	d05f      	beq.n	2bec <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b2c:	8b63      	ldrh	r3, [r4, #26]
    2b2e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2b30:	071a      	lsls	r2, r3, #28
    2b32:	d414      	bmi.n	2b5e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2b34:	223f      	movs	r2, #63	; 0x3f
    2b36:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2b38:	2b00      	cmp	r3, #0
    2b3a:	d034      	beq.n	2ba6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2b3c:	079a      	lsls	r2, r3, #30
    2b3e:	d511      	bpl.n	2b64 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2b40:	221a      	movs	r2, #26
    2b42:	2332      	movs	r3, #50	; 0x32
    2b44:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2b46:	3b30      	subs	r3, #48	; 0x30
    2b48:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2b4a:	077b      	lsls	r3, r7, #29
    2b4c:	d550      	bpl.n	2bf0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2b4e:	0028      	movs	r0, r5
    2b50:	696b      	ldr	r3, [r5, #20]
    2b52:	4798      	blx	r3
    2b54:	e04c      	b.n	2bf0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2b56:	0028      	movs	r0, r5
    2b58:	68eb      	ldr	r3, [r5, #12]
    2b5a:	4798      	blx	r3
    2b5c:	e7e0      	b.n	2b20 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2b5e:	2237      	movs	r2, #55	; 0x37
    2b60:	4013      	ands	r3, r2
    2b62:	e7e9      	b.n	2b38 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2b64:	075a      	lsls	r2, r3, #29
    2b66:	d505      	bpl.n	2b74 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2b68:	221e      	movs	r2, #30
    2b6a:	2332      	movs	r3, #50	; 0x32
    2b6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2b6e:	3b2e      	subs	r3, #46	; 0x2e
    2b70:	8363      	strh	r3, [r4, #26]
    2b72:	e7ea      	b.n	2b4a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2b74:	07da      	lsls	r2, r3, #31
    2b76:	d505      	bpl.n	2b84 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2b78:	2213      	movs	r2, #19
    2b7a:	2332      	movs	r3, #50	; 0x32
    2b7c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2b7e:	3b31      	subs	r3, #49	; 0x31
    2b80:	8363      	strh	r3, [r4, #26]
    2b82:	e7e2      	b.n	2b4a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b84:	06da      	lsls	r2, r3, #27
    2b86:	d505      	bpl.n	2b94 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2b88:	2242      	movs	r2, #66	; 0x42
    2b8a:	2332      	movs	r3, #50	; 0x32
    2b8c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b8e:	3b22      	subs	r3, #34	; 0x22
    2b90:	8363      	strh	r3, [r4, #26]
    2b92:	e7da      	b.n	2b4a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2b94:	2220      	movs	r2, #32
    2b96:	421a      	tst	r2, r3
    2b98:	d0d7      	beq.n	2b4a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2b9a:	3221      	adds	r2, #33	; 0x21
    2b9c:	2332      	movs	r3, #50	; 0x32
    2b9e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2ba0:	3b12      	subs	r3, #18
    2ba2:	8363      	strh	r3, [r4, #26]
    2ba4:	e7d1      	b.n	2b4a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2ba6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2ba8:	05db      	lsls	r3, r3, #23
    2baa:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2bac:	b2da      	uxtb	r2, r3
    2bae:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2bb0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2bb2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2bb4:	1c51      	adds	r1, r2, #1
    2bb6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2bb8:	7969      	ldrb	r1, [r5, #5]
    2bba:	2901      	cmp	r1, #1
    2bbc:	d010      	beq.n	2be0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2bbe:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2bc0:	3b01      	subs	r3, #1
    2bc2:	b29b      	uxth	r3, r3
    2bc4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d112      	bne.n	2bf0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2bca:	3304      	adds	r3, #4
    2bcc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2bce:	2200      	movs	r2, #0
    2bd0:	332e      	adds	r3, #46	; 0x2e
    2bd2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2bd4:	07bb      	lsls	r3, r7, #30
    2bd6:	d50b      	bpl.n	2bf0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2bd8:	0028      	movs	r0, r5
    2bda:	692b      	ldr	r3, [r5, #16]
    2bdc:	4798      	blx	r3
    2bde:	e007      	b.n	2bf0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2be0:	0a1b      	lsrs	r3, r3, #8
    2be2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2be4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2be6:	3301      	adds	r3, #1
    2be8:	626b      	str	r3, [r5, #36]	; 0x24
    2bea:	e7e8      	b.n	2bbe <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2bec:	2304      	movs	r3, #4
    2bee:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2bf0:	06f3      	lsls	r3, r6, #27
    2bf2:	d504      	bpl.n	2bfe <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2bf4:	2310      	movs	r3, #16
    2bf6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2bf8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2bfa:	06fb      	lsls	r3, r7, #27
    2bfc:	d40e      	bmi.n	2c1c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2bfe:	06b3      	lsls	r3, r6, #26
    2c00:	d504      	bpl.n	2c0c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2c02:	2320      	movs	r3, #32
    2c04:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2c06:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2c08:	073b      	lsls	r3, r7, #28
    2c0a:	d40b      	bmi.n	2c24 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2c0c:	0733      	lsls	r3, r6, #28
    2c0e:	d504      	bpl.n	2c1a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2c10:	2308      	movs	r3, #8
    2c12:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2c14:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2c16:	06bb      	lsls	r3, r7, #26
    2c18:	d408      	bmi.n	2c2c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2c1c:	0028      	movs	r0, r5
    2c1e:	69eb      	ldr	r3, [r5, #28]
    2c20:	4798      	blx	r3
    2c22:	e7ec      	b.n	2bfe <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2c24:	0028      	movs	r0, r5
    2c26:	69ab      	ldr	r3, [r5, #24]
    2c28:	4798      	blx	r3
    2c2a:	e7ef      	b.n	2c0c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2c2c:	6a2b      	ldr	r3, [r5, #32]
    2c2e:	0028      	movs	r0, r5
    2c30:	4798      	blx	r3
}
    2c32:	e7f2      	b.n	2c1a <_usart_interrupt_handler+0x176>
    2c34:	20000398 	.word	0x20000398

00002c38 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2c38:	b510      	push	{r4, lr}
	switch (clock_source) {
    2c3a:	2808      	cmp	r0, #8
    2c3c:	d803      	bhi.n	2c46 <system_clock_source_get_hz+0xe>
    2c3e:	0080      	lsls	r0, r0, #2
    2c40:	4b1c      	ldr	r3, [pc, #112]	; (2cb4 <system_clock_source_get_hz+0x7c>)
    2c42:	581b      	ldr	r3, [r3, r0]
    2c44:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2c46:	2000      	movs	r0, #0
    2c48:	e032      	b.n	2cb0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2c4a:	4b1b      	ldr	r3, [pc, #108]	; (2cb8 <system_clock_source_get_hz+0x80>)
    2c4c:	6918      	ldr	r0, [r3, #16]
    2c4e:	e02f      	b.n	2cb0 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2c50:	4b1a      	ldr	r3, [pc, #104]	; (2cbc <system_clock_source_get_hz+0x84>)
    2c52:	6a1b      	ldr	r3, [r3, #32]
    2c54:	059b      	lsls	r3, r3, #22
    2c56:	0f9b      	lsrs	r3, r3, #30
    2c58:	4819      	ldr	r0, [pc, #100]	; (2cc0 <system_clock_source_get_hz+0x88>)
    2c5a:	40d8      	lsrs	r0, r3
    2c5c:	e028      	b.n	2cb0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2c5e:	4b16      	ldr	r3, [pc, #88]	; (2cb8 <system_clock_source_get_hz+0x80>)
    2c60:	6958      	ldr	r0, [r3, #20]
    2c62:	e025      	b.n	2cb0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2c64:	4b14      	ldr	r3, [pc, #80]	; (2cb8 <system_clock_source_get_hz+0x80>)
    2c66:	681b      	ldr	r3, [r3, #0]
			return 0;
    2c68:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2c6a:	079b      	lsls	r3, r3, #30
    2c6c:	d520      	bpl.n	2cb0 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2c6e:	4913      	ldr	r1, [pc, #76]	; (2cbc <system_clock_source_get_hz+0x84>)
    2c70:	2210      	movs	r2, #16
    2c72:	68cb      	ldr	r3, [r1, #12]
    2c74:	421a      	tst	r2, r3
    2c76:	d0fc      	beq.n	2c72 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2c78:	4b0f      	ldr	r3, [pc, #60]	; (2cb8 <system_clock_source_get_hz+0x80>)
    2c7a:	681a      	ldr	r2, [r3, #0]
    2c7c:	2324      	movs	r3, #36	; 0x24
    2c7e:	4013      	ands	r3, r2
    2c80:	2b04      	cmp	r3, #4
    2c82:	d001      	beq.n	2c88 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2c84:	480f      	ldr	r0, [pc, #60]	; (2cc4 <system_clock_source_get_hz+0x8c>)
    2c86:	e013      	b.n	2cb0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2c88:	2000      	movs	r0, #0
    2c8a:	4b0f      	ldr	r3, [pc, #60]	; (2cc8 <system_clock_source_get_hz+0x90>)
    2c8c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2c8e:	4b0a      	ldr	r3, [pc, #40]	; (2cb8 <system_clock_source_get_hz+0x80>)
    2c90:	689b      	ldr	r3, [r3, #8]
    2c92:	041b      	lsls	r3, r3, #16
    2c94:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2c96:	4358      	muls	r0, r3
    2c98:	e00a      	b.n	2cb0 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2c9a:	2350      	movs	r3, #80	; 0x50
    2c9c:	4a07      	ldr	r2, [pc, #28]	; (2cbc <system_clock_source_get_hz+0x84>)
    2c9e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2ca0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2ca2:	075b      	lsls	r3, r3, #29
    2ca4:	d504      	bpl.n	2cb0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2ca6:	4b04      	ldr	r3, [pc, #16]	; (2cb8 <system_clock_source_get_hz+0x80>)
    2ca8:	68d8      	ldr	r0, [r3, #12]
    2caa:	e001      	b.n	2cb0 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2cac:	2080      	movs	r0, #128	; 0x80
    2cae:	0200      	lsls	r0, r0, #8
	}
}
    2cb0:	bd10      	pop	{r4, pc}
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	000066e0 	.word	0x000066e0
    2cb8:	200002d0 	.word	0x200002d0
    2cbc:	40000800 	.word	0x40000800
    2cc0:	007a1200 	.word	0x007a1200
    2cc4:	02dc6c00 	.word	0x02dc6c00
    2cc8:	00003299 	.word	0x00003299

00002ccc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2ccc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2cce:	490c      	ldr	r1, [pc, #48]	; (2d00 <system_clock_source_osc8m_set_config+0x34>)
    2cd0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2cd2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2cd4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2cd6:	7840      	ldrb	r0, [r0, #1]
    2cd8:	2201      	movs	r2, #1
    2cda:	4010      	ands	r0, r2
    2cdc:	0180      	lsls	r0, r0, #6
    2cde:	2640      	movs	r6, #64	; 0x40
    2ce0:	43b3      	bics	r3, r6
    2ce2:	4303      	orrs	r3, r0
    2ce4:	402a      	ands	r2, r5
    2ce6:	01d2      	lsls	r2, r2, #7
    2ce8:	2080      	movs	r0, #128	; 0x80
    2cea:	4383      	bics	r3, r0
    2cec:	4313      	orrs	r3, r2
    2cee:	2203      	movs	r2, #3
    2cf0:	4022      	ands	r2, r4
    2cf2:	0212      	lsls	r2, r2, #8
    2cf4:	4803      	ldr	r0, [pc, #12]	; (2d04 <system_clock_source_osc8m_set_config+0x38>)
    2cf6:	4003      	ands	r3, r0
    2cf8:	4313      	orrs	r3, r2
    2cfa:	620b      	str	r3, [r1, #32]
}
    2cfc:	bd70      	pop	{r4, r5, r6, pc}
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	40000800 	.word	0x40000800
    2d04:	fffffcff 	.word	0xfffffcff

00002d08 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2d08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d0a:	46de      	mov	lr, fp
    2d0c:	4657      	mov	r7, sl
    2d0e:	464e      	mov	r6, r9
    2d10:	4645      	mov	r5, r8
    2d12:	b5e0      	push	{r5, r6, r7, lr}
    2d14:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2d16:	4b26      	ldr	r3, [pc, #152]	; (2db0 <system_clock_source_xosc32k_set_config+0xa8>)
    2d18:	469b      	mov	fp, r3
    2d1a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2d1c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2d1e:	7800      	ldrb	r0, [r0, #0]
    2d20:	4242      	negs	r2, r0
    2d22:	4142      	adcs	r2, r0
    2d24:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2d26:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2d28:	78ca      	ldrb	r2, [r1, #3]
    2d2a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2d2c:	790a      	ldrb	r2, [r1, #4]
    2d2e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2d30:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2d32:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2d34:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2d36:	688a      	ldr	r2, [r1, #8]
    2d38:	491e      	ldr	r1, [pc, #120]	; (2db4 <system_clock_source_xosc32k_set_config+0xac>)
    2d3a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2d3c:	2101      	movs	r1, #1
    2d3e:	464a      	mov	r2, r9
    2d40:	0092      	lsls	r2, r2, #2
    2d42:	4691      	mov	r9, r2
    2d44:	2204      	movs	r2, #4
    2d46:	4393      	bics	r3, r2
    2d48:	464a      	mov	r2, r9
    2d4a:	4313      	orrs	r3, r2
    2d4c:	4642      	mov	r2, r8
    2d4e:	400a      	ands	r2, r1
    2d50:	00d2      	lsls	r2, r2, #3
    2d52:	4690      	mov	r8, r2
    2d54:	2208      	movs	r2, #8
    2d56:	4393      	bics	r3, r2
    2d58:	4642      	mov	r2, r8
    2d5a:	4313      	orrs	r3, r2
    2d5c:	4662      	mov	r2, ip
    2d5e:	400a      	ands	r2, r1
    2d60:	0112      	lsls	r2, r2, #4
    2d62:	4694      	mov	ip, r2
    2d64:	2210      	movs	r2, #16
    2d66:	4393      	bics	r3, r2
    2d68:	4662      	mov	r2, ip
    2d6a:	4313      	orrs	r3, r2
    2d6c:	4008      	ands	r0, r1
    2d6e:	0140      	lsls	r0, r0, #5
    2d70:	2220      	movs	r2, #32
    2d72:	4393      	bics	r3, r2
    2d74:	4303      	orrs	r3, r0
    2d76:	400f      	ands	r7, r1
    2d78:	01bf      	lsls	r7, r7, #6
    2d7a:	2040      	movs	r0, #64	; 0x40
    2d7c:	4383      	bics	r3, r0
    2d7e:	433b      	orrs	r3, r7
    2d80:	400e      	ands	r6, r1
    2d82:	01f6      	lsls	r6, r6, #7
    2d84:	3040      	adds	r0, #64	; 0x40
    2d86:	4383      	bics	r3, r0
    2d88:	4333      	orrs	r3, r6
    2d8a:	3879      	subs	r0, #121	; 0x79
    2d8c:	4005      	ands	r5, r0
    2d8e:	022d      	lsls	r5, r5, #8
    2d90:	4809      	ldr	r0, [pc, #36]	; (2db8 <system_clock_source_xosc32k_set_config+0xb0>)
    2d92:	4003      	ands	r3, r0
    2d94:	432b      	orrs	r3, r5
    2d96:	4021      	ands	r1, r4
    2d98:	0309      	lsls	r1, r1, #12
    2d9a:	4808      	ldr	r0, [pc, #32]	; (2dbc <system_clock_source_xosc32k_set_config+0xb4>)
    2d9c:	4003      	ands	r3, r0
    2d9e:	430b      	orrs	r3, r1
    2da0:	465a      	mov	r2, fp
    2da2:	8293      	strh	r3, [r2, #20]
}
    2da4:	bc3c      	pop	{r2, r3, r4, r5}
    2da6:	4690      	mov	r8, r2
    2da8:	4699      	mov	r9, r3
    2daa:	46a2      	mov	sl, r4
    2dac:	46ab      	mov	fp, r5
    2dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2db0:	40000800 	.word	0x40000800
    2db4:	200002d0 	.word	0x200002d0
    2db8:	fffff8ff 	.word	0xfffff8ff
    2dbc:	ffffefff 	.word	0xffffefff

00002dc0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2dc0:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2dc2:	7a03      	ldrb	r3, [r0, #8]
    2dc4:	069b      	lsls	r3, r3, #26
    2dc6:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2dc8:	8942      	ldrh	r2, [r0, #10]
    2dca:	0592      	lsls	r2, r2, #22
    2dcc:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2dce:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2dd0:	4918      	ldr	r1, [pc, #96]	; (2e34 <system_clock_source_dfll_set_config+0x74>)
    2dd2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2dd4:	7983      	ldrb	r3, [r0, #6]
    2dd6:	79c2      	ldrb	r2, [r0, #7]
    2dd8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2dda:	8842      	ldrh	r2, [r0, #2]
    2ddc:	8884      	ldrh	r4, [r0, #4]
    2dde:	4322      	orrs	r2, r4
    2de0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2de2:	7842      	ldrb	r2, [r0, #1]
    2de4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2de6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2de8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2dea:	7803      	ldrb	r3, [r0, #0]
    2dec:	2b04      	cmp	r3, #4
    2dee:	d011      	beq.n	2e14 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2df0:	2b20      	cmp	r3, #32
    2df2:	d10e      	bne.n	2e12 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2df4:	7b03      	ldrb	r3, [r0, #12]
    2df6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2df8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2dfa:	4313      	orrs	r3, r2
    2dfc:	89c2      	ldrh	r2, [r0, #14]
    2dfe:	0412      	lsls	r2, r2, #16
    2e00:	490d      	ldr	r1, [pc, #52]	; (2e38 <system_clock_source_dfll_set_config+0x78>)
    2e02:	400a      	ands	r2, r1
    2e04:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2e06:	4a0b      	ldr	r2, [pc, #44]	; (2e34 <system_clock_source_dfll_set_config+0x74>)
    2e08:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2e0a:	6811      	ldr	r1, [r2, #0]
    2e0c:	4b0b      	ldr	r3, [pc, #44]	; (2e3c <system_clock_source_dfll_set_config+0x7c>)
    2e0e:	430b      	orrs	r3, r1
    2e10:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2e12:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2e14:	7b03      	ldrb	r3, [r0, #12]
    2e16:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2e18:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2e1a:	4313      	orrs	r3, r2
    2e1c:	89c2      	ldrh	r2, [r0, #14]
    2e1e:	0412      	lsls	r2, r2, #16
    2e20:	4905      	ldr	r1, [pc, #20]	; (2e38 <system_clock_source_dfll_set_config+0x78>)
    2e22:	400a      	ands	r2, r1
    2e24:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2e26:	4a03      	ldr	r2, [pc, #12]	; (2e34 <system_clock_source_dfll_set_config+0x74>)
    2e28:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2e2a:	6813      	ldr	r3, [r2, #0]
    2e2c:	2104      	movs	r1, #4
    2e2e:	430b      	orrs	r3, r1
    2e30:	6013      	str	r3, [r2, #0]
    2e32:	e7ee      	b.n	2e12 <system_clock_source_dfll_set_config+0x52>
    2e34:	200002d0 	.word	0x200002d0
    2e38:	03ff0000 	.word	0x03ff0000
    2e3c:	00000424 	.word	0x00000424

00002e40 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2e40:	2808      	cmp	r0, #8
    2e42:	d803      	bhi.n	2e4c <system_clock_source_enable+0xc>
    2e44:	0080      	lsls	r0, r0, #2
    2e46:	4b25      	ldr	r3, [pc, #148]	; (2edc <system_clock_source_enable+0x9c>)
    2e48:	581b      	ldr	r3, [r3, r0]
    2e4a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2e4c:	2017      	movs	r0, #23
    2e4e:	e044      	b.n	2eda <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2e50:	4a23      	ldr	r2, [pc, #140]	; (2ee0 <system_clock_source_enable+0xa0>)
    2e52:	6a13      	ldr	r3, [r2, #32]
    2e54:	2102      	movs	r1, #2
    2e56:	430b      	orrs	r3, r1
    2e58:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2e5a:	2000      	movs	r0, #0
    2e5c:	e03d      	b.n	2eda <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2e5e:	4a20      	ldr	r2, [pc, #128]	; (2ee0 <system_clock_source_enable+0xa0>)
    2e60:	6993      	ldr	r3, [r2, #24]
    2e62:	2102      	movs	r1, #2
    2e64:	430b      	orrs	r3, r1
    2e66:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2e68:	2000      	movs	r0, #0
		break;
    2e6a:	e036      	b.n	2eda <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2e6c:	4a1c      	ldr	r2, [pc, #112]	; (2ee0 <system_clock_source_enable+0xa0>)
    2e6e:	8a13      	ldrh	r3, [r2, #16]
    2e70:	2102      	movs	r1, #2
    2e72:	430b      	orrs	r3, r1
    2e74:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2e76:	2000      	movs	r0, #0
		break;
    2e78:	e02f      	b.n	2eda <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2e7a:	4a19      	ldr	r2, [pc, #100]	; (2ee0 <system_clock_source_enable+0xa0>)
    2e7c:	8a93      	ldrh	r3, [r2, #20]
    2e7e:	2102      	movs	r1, #2
    2e80:	430b      	orrs	r3, r1
    2e82:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2e84:	2000      	movs	r0, #0
		break;
    2e86:	e028      	b.n	2eda <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2e88:	4916      	ldr	r1, [pc, #88]	; (2ee4 <system_clock_source_enable+0xa4>)
    2e8a:	680b      	ldr	r3, [r1, #0]
    2e8c:	2202      	movs	r2, #2
    2e8e:	4313      	orrs	r3, r2
    2e90:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2e92:	4b13      	ldr	r3, [pc, #76]	; (2ee0 <system_clock_source_enable+0xa0>)
    2e94:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2e96:	0019      	movs	r1, r3
    2e98:	320e      	adds	r2, #14
    2e9a:	68cb      	ldr	r3, [r1, #12]
    2e9c:	421a      	tst	r2, r3
    2e9e:	d0fc      	beq.n	2e9a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2ea0:	4a10      	ldr	r2, [pc, #64]	; (2ee4 <system_clock_source_enable+0xa4>)
    2ea2:	6891      	ldr	r1, [r2, #8]
    2ea4:	4b0e      	ldr	r3, [pc, #56]	; (2ee0 <system_clock_source_enable+0xa0>)
    2ea6:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2ea8:	6852      	ldr	r2, [r2, #4]
    2eaa:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2eac:	2200      	movs	r2, #0
    2eae:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2eb0:	0019      	movs	r1, r3
    2eb2:	3210      	adds	r2, #16
    2eb4:	68cb      	ldr	r3, [r1, #12]
    2eb6:	421a      	tst	r2, r3
    2eb8:	d0fc      	beq.n	2eb4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2eba:	4b0a      	ldr	r3, [pc, #40]	; (2ee4 <system_clock_source_enable+0xa4>)
    2ebc:	681b      	ldr	r3, [r3, #0]
    2ebe:	b29b      	uxth	r3, r3
    2ec0:	4a07      	ldr	r2, [pc, #28]	; (2ee0 <system_clock_source_enable+0xa0>)
    2ec2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2ec4:	2000      	movs	r0, #0
    2ec6:	e008      	b.n	2eda <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2ec8:	4905      	ldr	r1, [pc, #20]	; (2ee0 <system_clock_source_enable+0xa0>)
    2eca:	2244      	movs	r2, #68	; 0x44
    2ecc:	5c8b      	ldrb	r3, [r1, r2]
    2ece:	2002      	movs	r0, #2
    2ed0:	4303      	orrs	r3, r0
    2ed2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2ed4:	2000      	movs	r0, #0
		break;
    2ed6:	e000      	b.n	2eda <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2ed8:	2000      	movs	r0, #0
}
    2eda:	4770      	bx	lr
    2edc:	00006704 	.word	0x00006704
    2ee0:	40000800 	.word	0x40000800
    2ee4:	200002d0 	.word	0x200002d0

00002ee8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eea:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2eec:	22c2      	movs	r2, #194	; 0xc2
    2eee:	00d2      	lsls	r2, r2, #3
    2ef0:	4b47      	ldr	r3, [pc, #284]	; (3010 <system_clock_init+0x128>)
    2ef2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2ef4:	4947      	ldr	r1, [pc, #284]	; (3014 <system_clock_init+0x12c>)
    2ef6:	684b      	ldr	r3, [r1, #4]
    2ef8:	221e      	movs	r2, #30
    2efa:	4393      	bics	r3, r2
    2efc:	3a1c      	subs	r2, #28
    2efe:	4313      	orrs	r3, r2
    2f00:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2f02:	ab01      	add	r3, sp, #4
    2f04:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2f06:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2f08:	4d43      	ldr	r5, [pc, #268]	; (3018 <system_clock_init+0x130>)
    2f0a:	b2e0      	uxtb	r0, r4
    2f0c:	a901      	add	r1, sp, #4
    2f0e:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2f10:	3401      	adds	r4, #1
    2f12:	2c25      	cmp	r4, #37	; 0x25
    2f14:	d1f9      	bne.n	2f0a <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2f16:	a80a      	add	r0, sp, #40	; 0x28
    2f18:	2300      	movs	r3, #0
    2f1a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    2f1c:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2f1e:	2280      	movs	r2, #128	; 0x80
    2f20:	0212      	lsls	r2, r2, #8
    2f22:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2f24:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2f26:	2201      	movs	r2, #1
    2f28:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    2f2a:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    2f2c:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2f2e:	3205      	adds	r2, #5
    2f30:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2f32:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2f34:	4b39      	ldr	r3, [pc, #228]	; (301c <system_clock_init+0x134>)
    2f36:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2f38:	2005      	movs	r0, #5
    2f3a:	4b39      	ldr	r3, [pc, #228]	; (3020 <system_clock_init+0x138>)
    2f3c:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2f3e:	4934      	ldr	r1, [pc, #208]	; (3010 <system_clock_init+0x128>)
    2f40:	2202      	movs	r2, #2
    2f42:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2f44:	421a      	tst	r2, r3
    2f46:	d0fc      	beq.n	2f42 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    2f48:	4a31      	ldr	r2, [pc, #196]	; (3010 <system_clock_init+0x128>)
    2f4a:	8a93      	ldrh	r3, [r2, #20]
    2f4c:	2180      	movs	r1, #128	; 0x80
    2f4e:	430b      	orrs	r3, r1
    2f50:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2f52:	ab05      	add	r3, sp, #20
    2f54:	2100      	movs	r1, #0
    2f56:	2200      	movs	r2, #0
    2f58:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2f5a:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2f5c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2f5e:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2f60:	313f      	adds	r1, #63	; 0x3f
    2f62:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2f64:	393b      	subs	r1, #59	; 0x3b
    2f66:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2f68:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    2f6a:	4b2e      	ldr	r3, [pc, #184]	; (3024 <system_clock_init+0x13c>)
    2f6c:	681b      	ldr	r3, [r3, #0]
    2f6e:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    2f70:	2b3f      	cmp	r3, #63	; 0x3f
    2f72:	d04b      	beq.n	300c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    2f74:	a805      	add	r0, sp, #20
    2f76:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2f78:	23b7      	movs	r3, #183	; 0xb7
    2f7a:	00db      	lsls	r3, r3, #3
    2f7c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2f7e:	2307      	movs	r3, #7
    2f80:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2f82:	3338      	adds	r3, #56	; 0x38
    2f84:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2f86:	4b28      	ldr	r3, [pc, #160]	; (3028 <system_clock_init+0x140>)
    2f88:	4798      	blx	r3
	config->run_in_standby  = false;
    2f8a:	a804      	add	r0, sp, #16
    2f8c:	2500      	movs	r5, #0
    2f8e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2f90:	2601      	movs	r6, #1
    2f92:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2f94:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2f96:	4b25      	ldr	r3, [pc, #148]	; (302c <system_clock_init+0x144>)
    2f98:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2f9a:	2006      	movs	r0, #6
    2f9c:	4f20      	ldr	r7, [pc, #128]	; (3020 <system_clock_init+0x138>)
    2f9e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2fa0:	4b23      	ldr	r3, [pc, #140]	; (3030 <system_clock_init+0x148>)
    2fa2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2fa4:	ac01      	add	r4, sp, #4
    2fa6:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2fa8:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2faa:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    2fac:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2fae:	2305      	movs	r3, #5
    2fb0:	7023      	strb	r3, [r4, #0]
    2fb2:	0021      	movs	r1, r4
    2fb4:	2001      	movs	r0, #1
    2fb6:	4b1f      	ldr	r3, [pc, #124]	; (3034 <system_clock_init+0x14c>)
    2fb8:	4798      	blx	r3
    2fba:	2001      	movs	r0, #1
    2fbc:	4b1e      	ldr	r3, [pc, #120]	; (3038 <system_clock_init+0x150>)
    2fbe:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2fc0:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2fc2:	0021      	movs	r1, r4
    2fc4:	2000      	movs	r0, #0
    2fc6:	4b14      	ldr	r3, [pc, #80]	; (3018 <system_clock_init+0x130>)
    2fc8:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    2fca:	2000      	movs	r0, #0
    2fcc:	4b1b      	ldr	r3, [pc, #108]	; (303c <system_clock_init+0x154>)
    2fce:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2fd0:	2007      	movs	r0, #7
    2fd2:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2fd4:	490e      	ldr	r1, [pc, #56]	; (3010 <system_clock_init+0x128>)
    2fd6:	22d0      	movs	r2, #208	; 0xd0
    2fd8:	68cb      	ldr	r3, [r1, #12]
    2fda:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    2fdc:	2bd0      	cmp	r3, #208	; 0xd0
    2fde:	d1fb      	bne.n	2fd8 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    2fe0:	4a17      	ldr	r2, [pc, #92]	; (3040 <system_clock_init+0x158>)
    2fe2:	2300      	movs	r3, #0
    2fe4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2fe6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2fe8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2fea:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    2fec:	a901      	add	r1, sp, #4
    2fee:	2201      	movs	r2, #1
    2ff0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2ff2:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2ff4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2ff6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2ff8:	3307      	adds	r3, #7
    2ffa:	700b      	strb	r3, [r1, #0]
    2ffc:	2000      	movs	r0, #0
    2ffe:	4b0d      	ldr	r3, [pc, #52]	; (3034 <system_clock_init+0x14c>)
    3000:	4798      	blx	r3
    3002:	2000      	movs	r0, #0
    3004:	4b0c      	ldr	r3, [pc, #48]	; (3038 <system_clock_init+0x150>)
    3006:	4798      	blx	r3
#endif
}
    3008:	b00f      	add	sp, #60	; 0x3c
    300a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    300c:	3b20      	subs	r3, #32
    300e:	e7b1      	b.n	2f74 <system_clock_init+0x8c>
    3010:	40000800 	.word	0x40000800
    3014:	41004000 	.word	0x41004000
    3018:	0000327d 	.word	0x0000327d
    301c:	00002d09 	.word	0x00002d09
    3020:	00002e41 	.word	0x00002e41
    3024:	00806024 	.word	0x00806024
    3028:	00002dc1 	.word	0x00002dc1
    302c:	00002ccd 	.word	0x00002ccd
    3030:	00003045 	.word	0x00003045
    3034:	00003069 	.word	0x00003069
    3038:	00003121 	.word	0x00003121
    303c:	000031f1 	.word	0x000031f1
    3040:	40000400 	.word	0x40000400

00003044 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3044:	4a06      	ldr	r2, [pc, #24]	; (3060 <system_gclk_init+0x1c>)
    3046:	6993      	ldr	r3, [r2, #24]
    3048:	2108      	movs	r1, #8
    304a:	430b      	orrs	r3, r1
    304c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    304e:	2201      	movs	r2, #1
    3050:	4b04      	ldr	r3, [pc, #16]	; (3064 <system_gclk_init+0x20>)
    3052:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3054:	0019      	movs	r1, r3
    3056:	780b      	ldrb	r3, [r1, #0]
    3058:	4213      	tst	r3, r2
    305a:	d1fc      	bne.n	3056 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    305c:	4770      	bx	lr
    305e:	46c0      	nop			; (mov r8, r8)
    3060:	40000400 	.word	0x40000400
    3064:	40000c00 	.word	0x40000c00

00003068 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3068:	b570      	push	{r4, r5, r6, lr}
    306a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    306c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    306e:	780d      	ldrb	r5, [r1, #0]
    3070:	022d      	lsls	r5, r5, #8
    3072:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3074:	784b      	ldrb	r3, [r1, #1]
    3076:	2b00      	cmp	r3, #0
    3078:	d002      	beq.n	3080 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    307a:	2380      	movs	r3, #128	; 0x80
    307c:	02db      	lsls	r3, r3, #11
    307e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3080:	7a4b      	ldrb	r3, [r1, #9]
    3082:	2b00      	cmp	r3, #0
    3084:	d002      	beq.n	308c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    3086:	2380      	movs	r3, #128	; 0x80
    3088:	031b      	lsls	r3, r3, #12
    308a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    308c:	6848      	ldr	r0, [r1, #4]
    308e:	2801      	cmp	r0, #1
    3090:	d910      	bls.n	30b4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3092:	1e43      	subs	r3, r0, #1
    3094:	4218      	tst	r0, r3
    3096:	d134      	bne.n	3102 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3098:	2802      	cmp	r0, #2
    309a:	d930      	bls.n	30fe <system_gclk_gen_set_config+0x96>
    309c:	2302      	movs	r3, #2
    309e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    30a0:	3201      	adds	r2, #1
						mask <<= 1) {
    30a2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    30a4:	4298      	cmp	r0, r3
    30a6:	d8fb      	bhi.n	30a0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    30a8:	0212      	lsls	r2, r2, #8
    30aa:	4332      	orrs	r2, r6
    30ac:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    30ae:	2380      	movs	r3, #128	; 0x80
    30b0:	035b      	lsls	r3, r3, #13
    30b2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    30b4:	7a0b      	ldrb	r3, [r1, #8]
    30b6:	2b00      	cmp	r3, #0
    30b8:	d002      	beq.n	30c0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    30ba:	2380      	movs	r3, #128	; 0x80
    30bc:	039b      	lsls	r3, r3, #14
    30be:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30c0:	4a13      	ldr	r2, [pc, #76]	; (3110 <system_gclk_gen_set_config+0xa8>)
    30c2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    30c4:	b25b      	sxtb	r3, r3
    30c6:	2b00      	cmp	r3, #0
    30c8:	dbfb      	blt.n	30c2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    30ca:	4b12      	ldr	r3, [pc, #72]	; (3114 <system_gclk_gen_set_config+0xac>)
    30cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    30ce:	4b12      	ldr	r3, [pc, #72]	; (3118 <system_gclk_gen_set_config+0xb0>)
    30d0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30d2:	4a0f      	ldr	r2, [pc, #60]	; (3110 <system_gclk_gen_set_config+0xa8>)
    30d4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    30d6:	b25b      	sxtb	r3, r3
    30d8:	2b00      	cmp	r3, #0
    30da:	dbfb      	blt.n	30d4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    30dc:	4b0c      	ldr	r3, [pc, #48]	; (3110 <system_gclk_gen_set_config+0xa8>)
    30de:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    30e0:	001a      	movs	r2, r3
    30e2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    30e4:	b25b      	sxtb	r3, r3
    30e6:	2b00      	cmp	r3, #0
    30e8:	dbfb      	blt.n	30e2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    30ea:	4a09      	ldr	r2, [pc, #36]	; (3110 <system_gclk_gen_set_config+0xa8>)
    30ec:	6853      	ldr	r3, [r2, #4]
    30ee:	2180      	movs	r1, #128	; 0x80
    30f0:	0249      	lsls	r1, r1, #9
    30f2:	400b      	ands	r3, r1
    30f4:	431d      	orrs	r5, r3
    30f6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    30f8:	4b08      	ldr	r3, [pc, #32]	; (311c <system_gclk_gen_set_config+0xb4>)
    30fa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    30fc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    30fe:	2200      	movs	r2, #0
    3100:	e7d2      	b.n	30a8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3102:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3104:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    3106:	2380      	movs	r3, #128	; 0x80
    3108:	029b      	lsls	r3, r3, #10
    310a:	431d      	orrs	r5, r3
    310c:	e7d2      	b.n	30b4 <system_gclk_gen_set_config+0x4c>
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	40000c00 	.word	0x40000c00
    3114:	00001c11 	.word	0x00001c11
    3118:	40000c08 	.word	0x40000c08
    311c:	00001c51 	.word	0x00001c51

00003120 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3120:	b510      	push	{r4, lr}
    3122:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3124:	4a0b      	ldr	r2, [pc, #44]	; (3154 <system_gclk_gen_enable+0x34>)
    3126:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3128:	b25b      	sxtb	r3, r3
    312a:	2b00      	cmp	r3, #0
    312c:	dbfb      	blt.n	3126 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    312e:	4b0a      	ldr	r3, [pc, #40]	; (3158 <system_gclk_gen_enable+0x38>)
    3130:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3132:	4b0a      	ldr	r3, [pc, #40]	; (315c <system_gclk_gen_enable+0x3c>)
    3134:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3136:	4a07      	ldr	r2, [pc, #28]	; (3154 <system_gclk_gen_enable+0x34>)
    3138:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    313a:	b25b      	sxtb	r3, r3
    313c:	2b00      	cmp	r3, #0
    313e:	dbfb      	blt.n	3138 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3140:	4a04      	ldr	r2, [pc, #16]	; (3154 <system_gclk_gen_enable+0x34>)
    3142:	6851      	ldr	r1, [r2, #4]
    3144:	2380      	movs	r3, #128	; 0x80
    3146:	025b      	lsls	r3, r3, #9
    3148:	430b      	orrs	r3, r1
    314a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    314c:	4b04      	ldr	r3, [pc, #16]	; (3160 <system_gclk_gen_enable+0x40>)
    314e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3150:	bd10      	pop	{r4, pc}
    3152:	46c0      	nop			; (mov r8, r8)
    3154:	40000c00 	.word	0x40000c00
    3158:	00001c11 	.word	0x00001c11
    315c:	40000c04 	.word	0x40000c04
    3160:	00001c51 	.word	0x00001c51

00003164 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3164:	b570      	push	{r4, r5, r6, lr}
    3166:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3168:	4a1a      	ldr	r2, [pc, #104]	; (31d4 <system_gclk_gen_get_hz+0x70>)
    316a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    316c:	b25b      	sxtb	r3, r3
    316e:	2b00      	cmp	r3, #0
    3170:	dbfb      	blt.n	316a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    3172:	4b19      	ldr	r3, [pc, #100]	; (31d8 <system_gclk_gen_get_hz+0x74>)
    3174:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3176:	4b19      	ldr	r3, [pc, #100]	; (31dc <system_gclk_gen_get_hz+0x78>)
    3178:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    317a:	4a16      	ldr	r2, [pc, #88]	; (31d4 <system_gclk_gen_get_hz+0x70>)
    317c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    317e:	b25b      	sxtb	r3, r3
    3180:	2b00      	cmp	r3, #0
    3182:	dbfb      	blt.n	317c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3184:	4e13      	ldr	r6, [pc, #76]	; (31d4 <system_gclk_gen_get_hz+0x70>)
    3186:	6870      	ldr	r0, [r6, #4]
    3188:	04c0      	lsls	r0, r0, #19
    318a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    318c:	4b14      	ldr	r3, [pc, #80]	; (31e0 <system_gclk_gen_get_hz+0x7c>)
    318e:	4798      	blx	r3
    3190:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3192:	4b12      	ldr	r3, [pc, #72]	; (31dc <system_gclk_gen_get_hz+0x78>)
    3194:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3196:	6876      	ldr	r6, [r6, #4]
    3198:	02f6      	lsls	r6, r6, #11
    319a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    319c:	4b11      	ldr	r3, [pc, #68]	; (31e4 <system_gclk_gen_get_hz+0x80>)
    319e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    31a0:	4a0c      	ldr	r2, [pc, #48]	; (31d4 <system_gclk_gen_get_hz+0x70>)
    31a2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    31a4:	b25b      	sxtb	r3, r3
    31a6:	2b00      	cmp	r3, #0
    31a8:	dbfb      	blt.n	31a2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    31aa:	4b0a      	ldr	r3, [pc, #40]	; (31d4 <system_gclk_gen_get_hz+0x70>)
    31ac:	689c      	ldr	r4, [r3, #8]
    31ae:	0224      	lsls	r4, r4, #8
    31b0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    31b2:	4b0d      	ldr	r3, [pc, #52]	; (31e8 <system_gclk_gen_get_hz+0x84>)
    31b4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    31b6:	2e00      	cmp	r6, #0
    31b8:	d107      	bne.n	31ca <system_gclk_gen_get_hz+0x66>
    31ba:	2c01      	cmp	r4, #1
    31bc:	d907      	bls.n	31ce <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    31be:	0021      	movs	r1, r4
    31c0:	0028      	movs	r0, r5
    31c2:	4b0a      	ldr	r3, [pc, #40]	; (31ec <system_gclk_gen_get_hz+0x88>)
    31c4:	4798      	blx	r3
    31c6:	0005      	movs	r5, r0
    31c8:	e001      	b.n	31ce <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    31ca:	3401      	adds	r4, #1
    31cc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    31ce:	0028      	movs	r0, r5
    31d0:	bd70      	pop	{r4, r5, r6, pc}
    31d2:	46c0      	nop			; (mov r8, r8)
    31d4:	40000c00 	.word	0x40000c00
    31d8:	00001c11 	.word	0x00001c11
    31dc:	40000c04 	.word	0x40000c04
    31e0:	00002c39 	.word	0x00002c39
    31e4:	40000c08 	.word	0x40000c08
    31e8:	00001c51 	.word	0x00001c51
    31ec:	000048ad 	.word	0x000048ad

000031f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    31f0:	b510      	push	{r4, lr}
    31f2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    31f4:	4b06      	ldr	r3, [pc, #24]	; (3210 <system_gclk_chan_enable+0x20>)
    31f6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    31f8:	4b06      	ldr	r3, [pc, #24]	; (3214 <system_gclk_chan_enable+0x24>)
    31fa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    31fc:	4a06      	ldr	r2, [pc, #24]	; (3218 <system_gclk_chan_enable+0x28>)
    31fe:	8853      	ldrh	r3, [r2, #2]
    3200:	2180      	movs	r1, #128	; 0x80
    3202:	01c9      	lsls	r1, r1, #7
    3204:	430b      	orrs	r3, r1
    3206:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    3208:	4b04      	ldr	r3, [pc, #16]	; (321c <system_gclk_chan_enable+0x2c>)
    320a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    320c:	bd10      	pop	{r4, pc}
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	00001c11 	.word	0x00001c11
    3214:	40000c02 	.word	0x40000c02
    3218:	40000c00 	.word	0x40000c00
    321c:	00001c51 	.word	0x00001c51

00003220 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3220:	b510      	push	{r4, lr}
    3222:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3224:	4b0f      	ldr	r3, [pc, #60]	; (3264 <system_gclk_chan_disable+0x44>)
    3226:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3228:	4b0f      	ldr	r3, [pc, #60]	; (3268 <system_gclk_chan_disable+0x48>)
    322a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    322c:	4a0f      	ldr	r2, [pc, #60]	; (326c <system_gclk_chan_disable+0x4c>)
    322e:	8853      	ldrh	r3, [r2, #2]
    3230:	051b      	lsls	r3, r3, #20
    3232:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3234:	8853      	ldrh	r3, [r2, #2]
    3236:	490e      	ldr	r1, [pc, #56]	; (3270 <system_gclk_chan_disable+0x50>)
    3238:	400b      	ands	r3, r1
    323a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    323c:	8853      	ldrh	r3, [r2, #2]
    323e:	490d      	ldr	r1, [pc, #52]	; (3274 <system_gclk_chan_disable+0x54>)
    3240:	400b      	ands	r3, r1
    3242:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3244:	0011      	movs	r1, r2
    3246:	2280      	movs	r2, #128	; 0x80
    3248:	01d2      	lsls	r2, r2, #7
    324a:	884b      	ldrh	r3, [r1, #2]
    324c:	4213      	tst	r3, r2
    324e:	d1fc      	bne.n	324a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3250:	4906      	ldr	r1, [pc, #24]	; (326c <system_gclk_chan_disable+0x4c>)
    3252:	884a      	ldrh	r2, [r1, #2]
    3254:	0203      	lsls	r3, r0, #8
    3256:	4806      	ldr	r0, [pc, #24]	; (3270 <system_gclk_chan_disable+0x50>)
    3258:	4002      	ands	r2, r0
    325a:	4313      	orrs	r3, r2
    325c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    325e:	4b06      	ldr	r3, [pc, #24]	; (3278 <system_gclk_chan_disable+0x58>)
    3260:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3262:	bd10      	pop	{r4, pc}
    3264:	00001c11 	.word	0x00001c11
    3268:	40000c02 	.word	0x40000c02
    326c:	40000c00 	.word	0x40000c00
    3270:	fffff0ff 	.word	0xfffff0ff
    3274:	ffffbfff 	.word	0xffffbfff
    3278:	00001c51 	.word	0x00001c51

0000327c <system_gclk_chan_set_config>:
{
    327c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    327e:	780c      	ldrb	r4, [r1, #0]
    3280:	0224      	lsls	r4, r4, #8
    3282:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    3284:	4b02      	ldr	r3, [pc, #8]	; (3290 <system_gclk_chan_set_config+0x14>)
    3286:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3288:	b2a4      	uxth	r4, r4
    328a:	4b02      	ldr	r3, [pc, #8]	; (3294 <system_gclk_chan_set_config+0x18>)
    328c:	805c      	strh	r4, [r3, #2]
}
    328e:	bd10      	pop	{r4, pc}
    3290:	00003221 	.word	0x00003221
    3294:	40000c00 	.word	0x40000c00

00003298 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3298:	b510      	push	{r4, lr}
    329a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    329c:	4b06      	ldr	r3, [pc, #24]	; (32b8 <system_gclk_chan_get_hz+0x20>)
    329e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    32a0:	4b06      	ldr	r3, [pc, #24]	; (32bc <system_gclk_chan_get_hz+0x24>)
    32a2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    32a4:	4b06      	ldr	r3, [pc, #24]	; (32c0 <system_gclk_chan_get_hz+0x28>)
    32a6:	885c      	ldrh	r4, [r3, #2]
    32a8:	0524      	lsls	r4, r4, #20
    32aa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    32ac:	4b05      	ldr	r3, [pc, #20]	; (32c4 <system_gclk_chan_get_hz+0x2c>)
    32ae:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    32b0:	0020      	movs	r0, r4
    32b2:	4b05      	ldr	r3, [pc, #20]	; (32c8 <system_gclk_chan_get_hz+0x30>)
    32b4:	4798      	blx	r3
}
    32b6:	bd10      	pop	{r4, pc}
    32b8:	00001c11 	.word	0x00001c11
    32bc:	40000c02 	.word	0x40000c02
    32c0:	40000c00 	.word	0x40000c00
    32c4:	00001c51 	.word	0x00001c51
    32c8:	00003165 	.word	0x00003165

000032cc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    32cc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    32ce:	78d3      	ldrb	r3, [r2, #3]
    32d0:	2b00      	cmp	r3, #0
    32d2:	d135      	bne.n	3340 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    32d4:	7813      	ldrb	r3, [r2, #0]
    32d6:	2b80      	cmp	r3, #128	; 0x80
    32d8:	d029      	beq.n	332e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    32da:	061b      	lsls	r3, r3, #24
    32dc:	2480      	movs	r4, #128	; 0x80
    32de:	0264      	lsls	r4, r4, #9
    32e0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    32e2:	7854      	ldrb	r4, [r2, #1]
    32e4:	2502      	movs	r5, #2
    32e6:	43ac      	bics	r4, r5
    32e8:	d106      	bne.n	32f8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    32ea:	7894      	ldrb	r4, [r2, #2]
    32ec:	2c00      	cmp	r4, #0
    32ee:	d120      	bne.n	3332 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    32f0:	2480      	movs	r4, #128	; 0x80
    32f2:	02a4      	lsls	r4, r4, #10
    32f4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    32f6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    32f8:	7854      	ldrb	r4, [r2, #1]
    32fa:	3c01      	subs	r4, #1
    32fc:	2c01      	cmp	r4, #1
    32fe:	d91c      	bls.n	333a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3300:	040d      	lsls	r5, r1, #16
    3302:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3304:	24a0      	movs	r4, #160	; 0xa0
    3306:	05e4      	lsls	r4, r4, #23
    3308:	432c      	orrs	r4, r5
    330a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    330c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    330e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3310:	24d0      	movs	r4, #208	; 0xd0
    3312:	0624      	lsls	r4, r4, #24
    3314:	432c      	orrs	r4, r5
    3316:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3318:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    331a:	78d4      	ldrb	r4, [r2, #3]
    331c:	2c00      	cmp	r4, #0
    331e:	d122      	bne.n	3366 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3320:	035b      	lsls	r3, r3, #13
    3322:	d51c      	bpl.n	335e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3324:	7893      	ldrb	r3, [r2, #2]
    3326:	2b01      	cmp	r3, #1
    3328:	d01e      	beq.n	3368 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    332a:	6141      	str	r1, [r0, #20]
    332c:	e017      	b.n	335e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    332e:	2300      	movs	r3, #0
    3330:	e7d7      	b.n	32e2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3332:	24c0      	movs	r4, #192	; 0xc0
    3334:	02e4      	lsls	r4, r4, #11
    3336:	4323      	orrs	r3, r4
    3338:	e7dd      	b.n	32f6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    333a:	4c0d      	ldr	r4, [pc, #52]	; (3370 <_system_pinmux_config+0xa4>)
    333c:	4023      	ands	r3, r4
    333e:	e7df      	b.n	3300 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3340:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3342:	040c      	lsls	r4, r1, #16
    3344:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3346:	23a0      	movs	r3, #160	; 0xa0
    3348:	05db      	lsls	r3, r3, #23
    334a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    334c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    334e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3350:	23d0      	movs	r3, #208	; 0xd0
    3352:	061b      	lsls	r3, r3, #24
    3354:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3356:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    3358:	78d3      	ldrb	r3, [r2, #3]
    335a:	2b00      	cmp	r3, #0
    335c:	d103      	bne.n	3366 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    335e:	7853      	ldrb	r3, [r2, #1]
    3360:	3b01      	subs	r3, #1
    3362:	2b01      	cmp	r3, #1
    3364:	d902      	bls.n	336c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    3366:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3368:	6181      	str	r1, [r0, #24]
    336a:	e7f8      	b.n	335e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    336c:	6081      	str	r1, [r0, #8]
}
    336e:	e7fa      	b.n	3366 <_system_pinmux_config+0x9a>
    3370:	fffbffff 	.word	0xfffbffff

00003374 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3374:	b510      	push	{r4, lr}
    3376:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3378:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    337a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    337c:	2900      	cmp	r1, #0
    337e:	d104      	bne.n	338a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3380:	0943      	lsrs	r3, r0, #5
    3382:	01db      	lsls	r3, r3, #7
    3384:	4905      	ldr	r1, [pc, #20]	; (339c <system_pinmux_pin_set_config+0x28>)
    3386:	468c      	mov	ip, r1
    3388:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    338a:	241f      	movs	r4, #31
    338c:	4020      	ands	r0, r4
    338e:	2101      	movs	r1, #1
    3390:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3392:	0018      	movs	r0, r3
    3394:	4b02      	ldr	r3, [pc, #8]	; (33a0 <system_pinmux_pin_set_config+0x2c>)
    3396:	4798      	blx	r3
}
    3398:	bd10      	pop	{r4, pc}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	41004400 	.word	0x41004400
    33a0:	000032cd 	.word	0x000032cd

000033a4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    33a4:	4770      	bx	lr
	...

000033a8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    33a8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    33aa:	4b05      	ldr	r3, [pc, #20]	; (33c0 <system_init+0x18>)
    33ac:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    33ae:	4b05      	ldr	r3, [pc, #20]	; (33c4 <system_init+0x1c>)
    33b0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    33b2:	4b05      	ldr	r3, [pc, #20]	; (33c8 <system_init+0x20>)
    33b4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    33b6:	4b05      	ldr	r3, [pc, #20]	; (33cc <system_init+0x24>)
    33b8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    33ba:	4b05      	ldr	r3, [pc, #20]	; (33d0 <system_init+0x28>)
    33bc:	4798      	blx	r3
}
    33be:	bd10      	pop	{r4, pc}
    33c0:	00002ee9 	.word	0x00002ee9
    33c4:	00001c81 	.word	0x00001c81
    33c8:	000033a5 	.word	0x000033a5
    33cc:	000033a5 	.word	0x000033a5
    33d0:	000033a5 	.word	0x000033a5

000033d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    33d4:	e7fe      	b.n	33d4 <Dummy_Handler>
	...

000033d8 <Reset_Handler>:
{
    33d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    33da:	4a2a      	ldr	r2, [pc, #168]	; (3484 <Reset_Handler+0xac>)
    33dc:	4b2a      	ldr	r3, [pc, #168]	; (3488 <Reset_Handler+0xb0>)
    33de:	429a      	cmp	r2, r3
    33e0:	d011      	beq.n	3406 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    33e2:	001a      	movs	r2, r3
    33e4:	4b29      	ldr	r3, [pc, #164]	; (348c <Reset_Handler+0xb4>)
    33e6:	429a      	cmp	r2, r3
    33e8:	d20d      	bcs.n	3406 <Reset_Handler+0x2e>
    33ea:	4a29      	ldr	r2, [pc, #164]	; (3490 <Reset_Handler+0xb8>)
    33ec:	3303      	adds	r3, #3
    33ee:	1a9b      	subs	r3, r3, r2
    33f0:	089b      	lsrs	r3, r3, #2
    33f2:	3301      	adds	r3, #1
    33f4:	009b      	lsls	r3, r3, #2
    33f6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    33f8:	4823      	ldr	r0, [pc, #140]	; (3488 <Reset_Handler+0xb0>)
    33fa:	4922      	ldr	r1, [pc, #136]	; (3484 <Reset_Handler+0xac>)
    33fc:	588c      	ldr	r4, [r1, r2]
    33fe:	5084      	str	r4, [r0, r2]
    3400:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3402:	429a      	cmp	r2, r3
    3404:	d1fa      	bne.n	33fc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3406:	4a23      	ldr	r2, [pc, #140]	; (3494 <Reset_Handler+0xbc>)
    3408:	4b23      	ldr	r3, [pc, #140]	; (3498 <Reset_Handler+0xc0>)
    340a:	429a      	cmp	r2, r3
    340c:	d20a      	bcs.n	3424 <Reset_Handler+0x4c>
    340e:	43d3      	mvns	r3, r2
    3410:	4921      	ldr	r1, [pc, #132]	; (3498 <Reset_Handler+0xc0>)
    3412:	185b      	adds	r3, r3, r1
    3414:	2103      	movs	r1, #3
    3416:	438b      	bics	r3, r1
    3418:	3304      	adds	r3, #4
    341a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    341c:	2100      	movs	r1, #0
    341e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3420:	4293      	cmp	r3, r2
    3422:	d1fc      	bne.n	341e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3424:	4a1d      	ldr	r2, [pc, #116]	; (349c <Reset_Handler+0xc4>)
    3426:	21ff      	movs	r1, #255	; 0xff
    3428:	4b1d      	ldr	r3, [pc, #116]	; (34a0 <Reset_Handler+0xc8>)
    342a:	438b      	bics	r3, r1
    342c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    342e:	39fd      	subs	r1, #253	; 0xfd
    3430:	2390      	movs	r3, #144	; 0x90
    3432:	005b      	lsls	r3, r3, #1
    3434:	4a1b      	ldr	r2, [pc, #108]	; (34a4 <Reset_Handler+0xcc>)
    3436:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3438:	4a1b      	ldr	r2, [pc, #108]	; (34a8 <Reset_Handler+0xd0>)
    343a:	78d3      	ldrb	r3, [r2, #3]
    343c:	2503      	movs	r5, #3
    343e:	43ab      	bics	r3, r5
    3440:	2402      	movs	r4, #2
    3442:	4323      	orrs	r3, r4
    3444:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3446:	78d3      	ldrb	r3, [r2, #3]
    3448:	270c      	movs	r7, #12
    344a:	43bb      	bics	r3, r7
    344c:	2608      	movs	r6, #8
    344e:	4333      	orrs	r3, r6
    3450:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3452:	4b16      	ldr	r3, [pc, #88]	; (34ac <Reset_Handler+0xd4>)
    3454:	7b98      	ldrb	r0, [r3, #14]
    3456:	2230      	movs	r2, #48	; 0x30
    3458:	4390      	bics	r0, r2
    345a:	2220      	movs	r2, #32
    345c:	4310      	orrs	r0, r2
    345e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3460:	7b99      	ldrb	r1, [r3, #14]
    3462:	43b9      	bics	r1, r7
    3464:	4331      	orrs	r1, r6
    3466:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3468:	7b9a      	ldrb	r2, [r3, #14]
    346a:	43aa      	bics	r2, r5
    346c:	4322      	orrs	r2, r4
    346e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3470:	4a0f      	ldr	r2, [pc, #60]	; (34b0 <Reset_Handler+0xd8>)
    3472:	6853      	ldr	r3, [r2, #4]
    3474:	2180      	movs	r1, #128	; 0x80
    3476:	430b      	orrs	r3, r1
    3478:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    347a:	4b0e      	ldr	r3, [pc, #56]	; (34b4 <Reset_Handler+0xdc>)
    347c:	4798      	blx	r3
        main();
    347e:	4b0e      	ldr	r3, [pc, #56]	; (34b8 <Reset_Handler+0xe0>)
    3480:	4798      	blx	r3
    3482:	e7fe      	b.n	3482 <Reset_Handler+0xaa>
    3484:	000083d4 	.word	0x000083d4
    3488:	20000000 	.word	0x20000000
    348c:	2000020c 	.word	0x2000020c
    3490:	20000004 	.word	0x20000004
    3494:	2000020c 	.word	0x2000020c
    3498:	20003124 	.word	0x20003124
    349c:	e000ed00 	.word	0xe000ed00
    34a0:	00000000 	.word	0x00000000
    34a4:	41007000 	.word	0x41007000
    34a8:	41005000 	.word	0x41005000
    34ac:	41004800 	.word	0x41004800
    34b0:	41004000 	.word	0x41004000
    34b4:	00004bed 	.word	0x00004bed
    34b8:	000047f9 	.word	0x000047f9

000034bc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    34bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    34be:	46c6      	mov	lr, r8
    34c0:	b500      	push	{lr}
    34c2:	000c      	movs	r4, r1
    34c4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    34c6:	2800      	cmp	r0, #0
    34c8:	d10f      	bne.n	34ea <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    34ca:	2a00      	cmp	r2, #0
    34cc:	dd11      	ble.n	34f2 <_read+0x36>
    34ce:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    34d0:	4e09      	ldr	r6, [pc, #36]	; (34f8 <_read+0x3c>)
    34d2:	4d0a      	ldr	r5, [pc, #40]	; (34fc <_read+0x40>)
    34d4:	6830      	ldr	r0, [r6, #0]
    34d6:	0021      	movs	r1, r4
    34d8:	682b      	ldr	r3, [r5, #0]
    34da:	4798      	blx	r3
		ptr++;
    34dc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    34de:	42bc      	cmp	r4, r7
    34e0:	d1f8      	bne.n	34d4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    34e2:	4640      	mov	r0, r8
    34e4:	bc04      	pop	{r2}
    34e6:	4690      	mov	r8, r2
    34e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    34ea:	2301      	movs	r3, #1
    34ec:	425b      	negs	r3, r3
    34ee:	4698      	mov	r8, r3
    34f0:	e7f7      	b.n	34e2 <_read+0x26>
	for (; len > 0; --len) {
    34f2:	4680      	mov	r8, r0
    34f4:	e7f5      	b.n	34e2 <_read+0x26>
    34f6:	46c0      	nop			; (mov r8, r8)
    34f8:	200003b8 	.word	0x200003b8
    34fc:	200003b0 	.word	0x200003b0

00003500 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3500:	b5f0      	push	{r4, r5, r6, r7, lr}
    3502:	46c6      	mov	lr, r8
    3504:	b500      	push	{lr}
    3506:	000e      	movs	r6, r1
    3508:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    350a:	3801      	subs	r0, #1
    350c:	2802      	cmp	r0, #2
    350e:	d810      	bhi.n	3532 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3510:	2a00      	cmp	r2, #0
    3512:	d011      	beq.n	3538 <_write+0x38>
    3514:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3516:	4b0c      	ldr	r3, [pc, #48]	; (3548 <_write+0x48>)
    3518:	4698      	mov	r8, r3
    351a:	4f0c      	ldr	r7, [pc, #48]	; (354c <_write+0x4c>)
    351c:	4643      	mov	r3, r8
    351e:	6818      	ldr	r0, [r3, #0]
    3520:	5d31      	ldrb	r1, [r6, r4]
    3522:	683b      	ldr	r3, [r7, #0]
    3524:	4798      	blx	r3
    3526:	2800      	cmp	r0, #0
    3528:	db08      	blt.n	353c <_write+0x3c>
			return -1;
		}
		++nChars;
    352a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    352c:	42a5      	cmp	r5, r4
    352e:	d1f5      	bne.n	351c <_write+0x1c>
    3530:	e006      	b.n	3540 <_write+0x40>
		return -1;
    3532:	2401      	movs	r4, #1
    3534:	4264      	negs	r4, r4
    3536:	e003      	b.n	3540 <_write+0x40>
	for (; len != 0; --len) {
    3538:	0014      	movs	r4, r2
    353a:	e001      	b.n	3540 <_write+0x40>
			return -1;
    353c:	2401      	movs	r4, #1
    353e:	4264      	negs	r4, r4
	}
	return nChars;
}
    3540:	0020      	movs	r0, r4
    3542:	bc04      	pop	{r2}
    3544:	4690      	mov	r8, r2
    3546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3548:	200003b8 	.word	0x200003b8
    354c:	200003b4 	.word	0x200003b4

00003550 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3550:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3552:	4a06      	ldr	r2, [pc, #24]	; (356c <_sbrk+0x1c>)
    3554:	6812      	ldr	r2, [r2, #0]
    3556:	2a00      	cmp	r2, #0
    3558:	d004      	beq.n	3564 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    355a:	4a04      	ldr	r2, [pc, #16]	; (356c <_sbrk+0x1c>)
    355c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    355e:	18c3      	adds	r3, r0, r3
    3560:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3562:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3564:	4902      	ldr	r1, [pc, #8]	; (3570 <_sbrk+0x20>)
    3566:	4a01      	ldr	r2, [pc, #4]	; (356c <_sbrk+0x1c>)
    3568:	6011      	str	r1, [r2, #0]
    356a:	e7f6      	b.n	355a <_sbrk+0xa>
    356c:	200002e8 	.word	0x200002e8
    3570:	20005128 	.word	0x20005128

00003574 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3574:	2001      	movs	r0, #1
    3576:	4240      	negs	r0, r0
    3578:	4770      	bx	lr

0000357a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    357a:	2380      	movs	r3, #128	; 0x80
    357c:	019b      	lsls	r3, r3, #6
    357e:	604b      	str	r3, [r1, #4]

	return 0;
}
    3580:	2000      	movs	r0, #0
    3582:	4770      	bx	lr

00003584 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3584:	2001      	movs	r0, #1
    3586:	4770      	bx	lr

00003588 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3588:	2000      	movs	r0, #0
    358a:	4770      	bx	lr

0000358c <drawChar>:
uint8_t consoleSGR[80][24];



void drawChar(uint8_t character)
{
    358c:	b5f0      	push	{r4, r5, r6, r7, lr}
    358e:	46de      	mov	lr, fp
    3590:	4647      	mov	r7, r8
    3592:	b580      	push	{r7, lr}
    3594:	b083      	sub	sp, #12
    3596:	0004      	movs	r4, r0
	uint16_t x = xCharPos;
    3598:	4e45      	ldr	r6, [pc, #276]	; (36b0 <drawChar+0x124>)
    359a:	8833      	ldrh	r3, [r6, #0]
	uint16_t y = yCharPos;
    359c:	4845      	ldr	r0, [pc, #276]	; (36b4 <drawChar+0x128>)
    359e:	8807      	ldrh	r7, [r0, #0]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
	
	uint32_t tempColor = consoleColors[x][y];
    35a0:	0059      	lsls	r1, r3, #1
    35a2:	18ca      	adds	r2, r1, r3
    35a4:	00d2      	lsls	r2, r2, #3
    35a6:	19d2      	adds	r2, r2, r7
    35a8:	0092      	lsls	r2, r2, #2
    35aa:	4d43      	ldr	r5, [pc, #268]	; (36b8 <drawChar+0x12c>)
    35ac:	5955      	ldr	r5, [r2, r5]
	
	tempForeground = tempColor >> 16;
    35ae:	0c2a      	lsrs	r2, r5, #16
    35b0:	9200      	str	r2, [sp, #0]
	tempBackground = consoleColors[x][y] & 0xFFFF;
    35b2:	b2aa      	uxth	r2, r5
    35b4:	9201      	str	r2, [sp, #4]
	
	consoleDisplay[x][y] = character;
    35b6:	18c9      	adds	r1, r1, r3
    35b8:	00c9      	lsls	r1, r1, #3
    35ba:	4a40      	ldr	r2, [pc, #256]	; (36bc <drawChar+0x130>)
    35bc:	1851      	adds	r1, r2, r1
    35be:	55cc      	strb	r4, [r1, r7]
	
	REG_PORT_OUTCLR1 = LCD_CS;
    35c0:	2180      	movs	r1, #128	; 0x80
    35c2:	03c9      	lsls	r1, r1, #15
    35c4:	4a3e      	ldr	r2, [pc, #248]	; (36c0 <drawChar+0x134>)
    35c6:	6011      	str	r1, [r2, #0]
	if(BitVal(consoleSGR[xCharPos][yCharPos],7) == 0)
    35c8:	8831      	ldrh	r1, [r6, #0]
    35ca:	8800      	ldrh	r0, [r0, #0]
    35cc:	004a      	lsls	r2, r1, #1
    35ce:	1852      	adds	r2, r2, r1
    35d0:	00d2      	lsls	r2, r2, #3
    35d2:	493c      	ldr	r1, [pc, #240]	; (36c4 <drawChar+0x138>)
    35d4:	188a      	adds	r2, r1, r2
    35d6:	5c12      	ldrb	r2, [r2, r0]
    35d8:	09d2      	lsrs	r2, r2, #7
    35da:	d12f      	bne.n	363c <drawChar+0xb0>
	{
		setXY(x*10,y*20,x*10+9,y*20+19);
    35dc:	0098      	lsls	r0, r3, #2
    35de:	1818      	adds	r0, r3, r0
    35e0:	0040      	lsls	r0, r0, #1
    35e2:	b280      	uxth	r0, r0
    35e4:	2114      	movs	r1, #20
    35e6:	4379      	muls	r1, r7
    35e8:	b289      	uxth	r1, r1
    35ea:	000b      	movs	r3, r1
    35ec:	3313      	adds	r3, #19
    35ee:	b29b      	uxth	r3, r3
    35f0:	0002      	movs	r2, r0
    35f2:	3209      	adds	r2, #9
    35f4:	b292      	uxth	r2, r2
    35f6:	4f34      	ldr	r7, [pc, #208]	; (36c8 <drawChar+0x13c>)
    35f8:	47b8      	blx	r7
    35fa:	4a34      	ldr	r2, [pc, #208]	; (36cc <drawChar+0x140>)
    35fc:	00a7      	lsls	r7, r4, #2
    35fe:	193f      	adds	r7, r7, r4
    3600:	00bb      	lsls	r3, r7, #2
    3602:	18ff      	adds	r7, r7, r3
    3604:	19d7      	adds	r7, r2, r7
    3606:	3401      	adds	r4, #1
    3608:	00a3      	lsls	r3, r4, #2
    360a:	191c      	adds	r4, r3, r4
    360c:	00a3      	lsls	r3, r4, #2
    360e:	18e4      	adds	r4, r4, r3
    3610:	4693      	mov	fp, r2
    3612:	44a3      	add	fp, r4
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
    3614:	4e2e      	ldr	r6, [pc, #184]	; (36d0 <drawChar+0x144>)
					setPixel(tempForeground);
    3616:	46b0      	mov	r8, r6
    3618:	e00d      	b.n	3636 <drawChar+0xaa>
					setPixel(tempBackground);
    361a:	9801      	ldr	r0, [sp, #4]
    361c:	47b0      	blx	r6
			for(int j=0;j<8;j++)
    361e:	3c01      	subs	r4, #1
    3620:	d306      	bcc.n	3630 <drawChar+0xa4>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3622:	783b      	ldrb	r3, [r7, #0]
    3624:	4123      	asrs	r3, r4
    3626:	421d      	tst	r5, r3
    3628:	d0f7      	beq.n	361a <drawChar+0x8e>
					setPixel(tempForeground);
    362a:	9800      	ldr	r0, [sp, #0]
    362c:	47c0      	blx	r8
    362e:	e7f6      	b.n	361e <drawChar+0x92>
    3630:	3701      	adds	r7, #1
		for(uint16_t i=0; i <= 24; i++)
    3632:	455f      	cmp	r7, fp
    3634:	d033      	beq.n	369e <drawChar+0x112>
{
    3636:	2407      	movs	r4, #7
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3638:	2501      	movs	r5, #1
    363a:	e7f2      	b.n	3622 <drawChar+0x96>
			}
		}
	}
	else
	{
		setXY(x*10,y*20,x*10+9,y*20+19);
    363c:	0098      	lsls	r0, r3, #2
    363e:	181b      	adds	r3, r3, r0
    3640:	005b      	lsls	r3, r3, #1
    3642:	b298      	uxth	r0, r3
    3644:	2114      	movs	r1, #20
    3646:	4379      	muls	r1, r7
    3648:	b289      	uxth	r1, r1
    364a:	000b      	movs	r3, r1
    364c:	3313      	adds	r3, #19
    364e:	b29b      	uxth	r3, r3
    3650:	0002      	movs	r2, r0
    3652:	3209      	adds	r2, #9
    3654:	b292      	uxth	r2, r2
    3656:	4f1c      	ldr	r7, [pc, #112]	; (36c8 <drawChar+0x13c>)
    3658:	47b8      	blx	r7
    365a:	4a1c      	ldr	r2, [pc, #112]	; (36cc <drawChar+0x140>)
    365c:	00a7      	lsls	r7, r4, #2
    365e:	193f      	adds	r7, r7, r4
    3660:	00bb      	lsls	r3, r7, #2
    3662:	18ff      	adds	r7, r7, r3
    3664:	19d7      	adds	r7, r2, r7
    3666:	3401      	adds	r4, #1
    3668:	00a3      	lsls	r3, r4, #2
    366a:	191c      	adds	r4, r3, r4
    366c:	00a3      	lsls	r3, r4, #2
    366e:	18e4      	adds	r4, r4, r3
    3670:	4693      	mov	fp, r2
    3672:	44a3      	add	fp, r4
				{
					setPixel(tempBackground);
				}
				else
				{	
					setPixel(tempForeground);
    3674:	4b16      	ldr	r3, [pc, #88]	; (36d0 <drawChar+0x144>)
    3676:	4698      	mov	r8, r3
					setPixel(tempBackground);
    3678:	001e      	movs	r6, r3
    367a:	e00d      	b.n	3698 <drawChar+0x10c>
					setPixel(tempForeground);
    367c:	9800      	ldr	r0, [sp, #0]
    367e:	47c0      	blx	r8
			for(int j=0;j<8;j++)
    3680:	3c01      	subs	r4, #1
    3682:	d306      	bcc.n	3692 <drawChar+0x106>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3684:	783b      	ldrb	r3, [r7, #0]
    3686:	4123      	asrs	r3, r4
    3688:	421d      	tst	r5, r3
    368a:	d0f7      	beq.n	367c <drawChar+0xf0>
					setPixel(tempBackground);
    368c:	9801      	ldr	r0, [sp, #4]
    368e:	47b0      	blx	r6
    3690:	e7f6      	b.n	3680 <drawChar+0xf4>
    3692:	3701      	adds	r7, #1
		for(uint16_t i=0; i <= 24; i++)
    3694:	455f      	cmp	r7, fp
    3696:	d002      	beq.n	369e <drawChar+0x112>
{
    3698:	2407      	movs	r4, #7
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    369a:	2501      	movs	r5, #1
    369c:	e7f2      	b.n	3684 <drawChar+0xf8>
				}

			}
		}		
	}
	REG_PORT_OUTSET1 = LCD_CS;
    369e:	2280      	movs	r2, #128	; 0x80
    36a0:	03d2      	lsls	r2, r2, #15
    36a2:	4b0c      	ldr	r3, [pc, #48]	; (36d4 <drawChar+0x148>)
    36a4:	601a      	str	r2, [r3, #0]
}
    36a6:	b003      	add	sp, #12
    36a8:	bc0c      	pop	{r2, r3}
    36aa:	4690      	mov	r8, r2
    36ac:	469b      	mov	fp, r3
    36ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36b0:	200002ec 	.word	0x200002ec
    36b4:	200002ee 	.word	0x200002ee
    36b8:	200012f4 	.word	0x200012f4
    36bc:	200003f4 	.word	0x200003f4
    36c0:	41004494 	.word	0x41004494
    36c4:	20000b74 	.word	0x20000b74
    36c8:	00004025 	.word	0x00004025
    36cc:	00006728 	.word	0x00006728
    36d0:	0000415d 	.word	0x0000415d
    36d4:	41004498 	.word	0x41004498

000036d8 <blinkCursor>:
*/
	
}

void blinkCursor(void)
{
    36d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36da:	46de      	mov	lr, fp
    36dc:	4647      	mov	r7, r8
    36de:	b580      	push	{r7, lr}
    36e0:	b083      	sub	sp, #12
	uint16_t x = xCharPos;
    36e2:	4b3e      	ldr	r3, [pc, #248]	; (37dc <blinkCursor+0x104>)
    36e4:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    36e6:	4a3e      	ldr	r2, [pc, #248]	; (37e0 <blinkCursor+0x108>)
    36e8:	8817      	ldrh	r7, [r2, #0]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
		
	uint32_t tempColor = consoleColors[x][y];
    36ea:	0059      	lsls	r1, r3, #1
    36ec:	18ca      	adds	r2, r1, r3
    36ee:	00d2      	lsls	r2, r2, #3
    36f0:	19d2      	adds	r2, r2, r7
    36f2:	0092      	lsls	r2, r2, #2
    36f4:	483b      	ldr	r0, [pc, #236]	; (37e4 <blinkCursor+0x10c>)
    36f6:	5815      	ldr	r5, [r2, r0]
		
	tempForeground = tempColor >> 16;
    36f8:	0c2a      	lsrs	r2, r5, #16
    36fa:	9200      	str	r2, [sp, #0]
	tempBackground = consoleColors[x][y] & 0xFFFF;
    36fc:	b2aa      	uxth	r2, r5
    36fe:	9201      	str	r2, [sp, #4]
	
	unsigned char character = consoleDisplay[x][y];
    3700:	18c9      	adds	r1, r1, r3
    3702:	00c9      	lsls	r1, r1, #3
    3704:	4a38      	ldr	r2, [pc, #224]	; (37e8 <blinkCursor+0x110>)
    3706:	1851      	adds	r1, r2, r1
    3708:	5dcc      	ldrb	r4, [r1, r7]
	setXY(x*10,y*20,x*10+9,y*20+19);
    370a:	0098      	lsls	r0, r3, #2
    370c:	181b      	adds	r3, r3, r0
    370e:	005b      	lsls	r3, r3, #1
    3710:	b298      	uxth	r0, r3
    3712:	2114      	movs	r1, #20
    3714:	4379      	muls	r1, r7
    3716:	b289      	uxth	r1, r1
    3718:	000b      	movs	r3, r1
    371a:	3313      	adds	r3, #19
    371c:	b29b      	uxth	r3, r3
    371e:	0002      	movs	r2, r0
    3720:	3209      	adds	r2, #9
    3722:	b292      	uxth	r2, r2
    3724:	4f31      	ldr	r7, [pc, #196]	; (37ec <blinkCursor+0x114>)
    3726:	47b8      	blx	r7
	REG_PORT_OUTCLR1 = LCD_CS;
    3728:	2280      	movs	r2, #128	; 0x80
    372a:	03d2      	lsls	r2, r2, #15
    372c:	4b30      	ldr	r3, [pc, #192]	; (37f0 <blinkCursor+0x118>)
    372e:	601a      	str	r2, [r3, #0]
	if(cursorBlinkState)
    3730:	4b30      	ldr	r3, [pc, #192]	; (37f4 <blinkCursor+0x11c>)
    3732:	781b      	ldrb	r3, [r3, #0]
    3734:	2b00      	cmp	r3, #0
    3736:	d10f      	bne.n	3758 <blinkCursor+0x80>
    3738:	4a2f      	ldr	r2, [pc, #188]	; (37f8 <blinkCursor+0x120>)
    373a:	00a7      	lsls	r7, r4, #2
    373c:	193f      	adds	r7, r7, r4
    373e:	00bb      	lsls	r3, r7, #2
    3740:	18ff      	adds	r7, r7, r3
    3742:	19d7      	adds	r7, r2, r7
    3744:	3401      	adds	r4, #1
    3746:	00a3      	lsls	r3, r4, #2
    3748:	191c      	adds	r4, r3, r4
    374a:	00a3      	lsls	r3, r4, #2
    374c:	18e4      	adds	r4, r4, r3
    374e:	4693      	mov	fp, r2
    3750:	44a3      	add	fp, r4
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
    3752:	4e2a      	ldr	r6, [pc, #168]	; (37fc <blinkCursor+0x124>)
					setPixel(tempForeground);
    3754:	46b0      	mov	r8, r6
    3756:	e02f      	b.n	37b8 <blinkCursor+0xe0>
    3758:	4a27      	ldr	r2, [pc, #156]	; (37f8 <blinkCursor+0x120>)
    375a:	00a7      	lsls	r7, r4, #2
    375c:	193f      	adds	r7, r7, r4
    375e:	00bb      	lsls	r3, r7, #2
    3760:	18ff      	adds	r7, r7, r3
    3762:	19d7      	adds	r7, r2, r7
    3764:	3401      	adds	r4, #1
    3766:	00a3      	lsls	r3, r4, #2
    3768:	191c      	adds	r4, r3, r4
    376a:	00a3      	lsls	r3, r4, #2
    376c:	18e4      	adds	r4, r4, r3
    376e:	4693      	mov	fp, r2
    3770:	44a3      	add	fp, r4
					setPixel(tempForeground);
    3772:	4b22      	ldr	r3, [pc, #136]	; (37fc <blinkCursor+0x124>)
    3774:	4698      	mov	r8, r3
					setPixel(tempBackground);
    3776:	001e      	movs	r6, r3
    3778:	e00d      	b.n	3796 <blinkCursor+0xbe>
					setPixel(tempForeground);
    377a:	9800      	ldr	r0, [sp, #0]
    377c:	47c0      	blx	r8
			for(int j=0;j<8;j++)
    377e:	3c01      	subs	r4, #1
    3780:	d306      	bcc.n	3790 <blinkCursor+0xb8>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3782:	783b      	ldrb	r3, [r7, #0]
    3784:	4123      	asrs	r3, r4
    3786:	421d      	tst	r5, r3
    3788:	d0f7      	beq.n	377a <blinkCursor+0xa2>
					setPixel(tempBackground);
    378a:	9801      	ldr	r0, [sp, #4]
    378c:	47b0      	blx	r6
    378e:	e7f6      	b.n	377e <blinkCursor+0xa6>
    3790:	3701      	adds	r7, #1
		for(uint16_t i=0; i <= 24; i++)
    3792:	455f      	cmp	r7, fp
    3794:	d013      	beq.n	37be <blinkCursor+0xe6>
{
    3796:	2407      	movs	r4, #7
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3798:	2501      	movs	r5, #1
    379a:	e7f2      	b.n	3782 <blinkCursor+0xaa>
					setPixel(tempBackground);
    379c:	9801      	ldr	r0, [sp, #4]
    379e:	47b0      	blx	r6
			for(int j=0;j<8;j++)
    37a0:	3c01      	subs	r4, #1
    37a2:	d306      	bcc.n	37b2 <blinkCursor+0xda>
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    37a4:	783b      	ldrb	r3, [r7, #0]
    37a6:	4123      	asrs	r3, r4
    37a8:	421d      	tst	r5, r3
    37aa:	d0f7      	beq.n	379c <blinkCursor+0xc4>
					setPixel(tempForeground);
    37ac:	9800      	ldr	r0, [sp, #0]
    37ae:	47c0      	blx	r8
    37b0:	e7f6      	b.n	37a0 <blinkCursor+0xc8>
    37b2:	3701      	adds	r7, #1
		for(uint16_t i=0; i <= 24; i++)
    37b4:	455f      	cmp	r7, fp
    37b6:	d002      	beq.n	37be <blinkCursor+0xe6>
{
    37b8:	2407      	movs	r4, #7
				if((CodePage437[character][i]&(1<<(7-j)))!=0)
    37ba:	2501      	movs	r5, #1
    37bc:	e7f2      	b.n	37a4 <blinkCursor+0xcc>
				}
			}
		}
	}

	REG_PORT_OUTSET1 = LCD_CS;
    37be:	2280      	movs	r2, #128	; 0x80
    37c0:	03d2      	lsls	r2, r2, #15
    37c2:	4b0f      	ldr	r3, [pc, #60]	; (3800 <blinkCursor+0x128>)
    37c4:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    37c6:	4a0b      	ldr	r2, [pc, #44]	; (37f4 <blinkCursor+0x11c>)
    37c8:	7813      	ldrb	r3, [r2, #0]
    37ca:	2101      	movs	r1, #1
    37cc:	404b      	eors	r3, r1
    37ce:	7013      	strb	r3, [r2, #0]
	
}
    37d0:	b003      	add	sp, #12
    37d2:	bc0c      	pop	{r2, r3}
    37d4:	4690      	mov	r8, r2
    37d6:	469b      	mov	fp, r3
    37d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	200002ec 	.word	0x200002ec
    37e0:	200002ee 	.word	0x200002ee
    37e4:	200012f4 	.word	0x200012f4
    37e8:	200003f4 	.word	0x200003f4
    37ec:	00004025 	.word	0x00004025
    37f0:	41004494 	.word	0x41004494
    37f4:	20000028 	.word	0x20000028
    37f8:	00006728 	.word	0x00006728
    37fc:	0000415d 	.word	0x0000415d
    3800:	41004498 	.word	0x41004498

00003804 <newLine>:
{
    3804:	b5f0      	push	{r4, r5, r6, r7, lr}
    3806:	46de      	mov	lr, fp
    3808:	4657      	mov	r7, sl
    380a:	464e      	mov	r6, r9
    380c:	4645      	mov	r5, r8
    380e:	b5e0      	push	{r5, r6, r7, lr}
    3810:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    3812:	4b2b      	ldr	r3, [pc, #172]	; (38c0 <newLine+0xbc>)
    3814:	881b      	ldrh	r3, [r3, #0]
    3816:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    3818:	4b2a      	ldr	r3, [pc, #168]	; (38c4 <newLine+0xc0>)
    381a:	881b      	ldrh	r3, [r3, #0]
    381c:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    381e:	2201      	movs	r2, #1
    3820:	4b29      	ldr	r3, [pc, #164]	; (38c8 <newLine+0xc4>)
    3822:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    3824:	4b29      	ldr	r3, [pc, #164]	; (38cc <newLine+0xc8>)
    3826:	4798      	blx	r3
    3828:	4d29      	ldr	r5, [pc, #164]	; (38d0 <newLine+0xcc>)
    382a:	4f2a      	ldr	r7, [pc, #168]	; (38d4 <newLine+0xd0>)
    382c:	4e2a      	ldr	r6, [pc, #168]	; (38d8 <newLine+0xd4>)
    382e:	2318      	movs	r3, #24
    3830:	469c      	mov	ip, r3
    3832:	44ac      	add	ip, r5
    3834:	23f0      	movs	r3, #240	; 0xf0
    3836:	00db      	lsls	r3, r3, #3
    3838:	18ec      	adds	r4, r5, r3
{
    383a:	0031      	movs	r1, r6
    383c:	003a      	movs	r2, r7
    383e:	002b      	movs	r3, r5
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    3840:	7858      	ldrb	r0, [r3, #1]
    3842:	7018      	strb	r0, [r3, #0]
			consoleColors[i][j-1] = consoleColors[i][j];
    3844:	6850      	ldr	r0, [r2, #4]
    3846:	6010      	str	r0, [r2, #0]
			consoleSGR[i][j-1] = consoleSGR[i][j];
    3848:	7848      	ldrb	r0, [r1, #1]
    384a:	7008      	strb	r0, [r1, #0]
    384c:	3318      	adds	r3, #24
    384e:	3260      	adds	r2, #96	; 0x60
    3850:	3118      	adds	r1, #24
		for(int i = 0 ; i < 80 ; i++)
    3852:	42a3      	cmp	r3, r4
    3854:	d1f4      	bne.n	3840 <newLine+0x3c>
    3856:	3501      	adds	r5, #1
    3858:	3704      	adds	r7, #4
    385a:	3601      	adds	r6, #1
	for(int j = 1 ; j <= 24 ; j++)
    385c:	4565      	cmp	r5, ip
    385e:	d1e9      	bne.n	3834 <newLine+0x30>
    3860:	4b1e      	ldr	r3, [pc, #120]	; (38dc <newLine+0xd8>)
    3862:	22f0      	movs	r2, #240	; 0xf0
    3864:	00d2      	lsls	r2, r2, #3
    3866:	1899      	adds	r1, r3, r2
		consoleDisplay[k][23] = 0x20;
    3868:	2220      	movs	r2, #32
    386a:	701a      	strb	r2, [r3, #0]
    386c:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    386e:	428b      	cmp	r3, r1
    3870:	d1fb      	bne.n	386a <newLine+0x66>
    3872:	2600      	movs	r6, #0
    3874:	4b16      	ldr	r3, [pc, #88]	; (38d0 <newLine+0xcc>)
    3876:	469a      	mov	sl, r3
			xCharPos = i;
    3878:	4b11      	ldr	r3, [pc, #68]	; (38c0 <newLine+0xbc>)
    387a:	4699      	mov	r9, r3
			yCharPos = j;
    387c:	4b11      	ldr	r3, [pc, #68]	; (38c4 <newLine+0xc0>)
    387e:	4698      	mov	r8, r3
    3880:	4653      	mov	r3, sl
    3882:	18f5      	adds	r5, r6, r3
{
    3884:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    3886:	4f16      	ldr	r7, [pc, #88]	; (38e0 <newLine+0xdc>)
			xCharPos = i;
    3888:	464b      	mov	r3, r9
    388a:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    388c:	4643      	mov	r3, r8
    388e:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    3890:	7828      	ldrb	r0, [r5, #0]
    3892:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    3894:	3401      	adds	r4, #1
    3896:	3518      	adds	r5, #24
    3898:	2c50      	cmp	r4, #80	; 0x50
    389a:	d1f5      	bne.n	3888 <newLine+0x84>
	for(int j = 0 ; j < 24 ; j++)
    389c:	3601      	adds	r6, #1
    389e:	2e18      	cmp	r6, #24
    38a0:	d1ee      	bne.n	3880 <newLine+0x7c>
	xCharPos = tempCursorx;
    38a2:	4b07      	ldr	r3, [pc, #28]	; (38c0 <newLine+0xbc>)
    38a4:	465a      	mov	r2, fp
    38a6:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;
    38a8:	4b06      	ldr	r3, [pc, #24]	; (38c4 <newLine+0xc0>)
    38aa:	466a      	mov	r2, sp
    38ac:	8892      	ldrh	r2, [r2, #4]
    38ae:	801a      	strh	r2, [r3, #0]
}
    38b0:	b003      	add	sp, #12
    38b2:	bc3c      	pop	{r2, r3, r4, r5}
    38b4:	4690      	mov	r8, r2
    38b6:	4699      	mov	r9, r3
    38b8:	46a2      	mov	sl, r4
    38ba:	46ab      	mov	fp, r5
    38bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	200002ec 	.word	0x200002ec
    38c4:	200002ee 	.word	0x200002ee
    38c8:	20000028 	.word	0x20000028
    38cc:	000036d9 	.word	0x000036d9
    38d0:	200003f4 	.word	0x200003f4
    38d4:	200012f4 	.word	0x200012f4
    38d8:	20000b74 	.word	0x20000b74
    38dc:	2000040b 	.word	0x2000040b
    38e0:	0000358d 	.word	0x0000358d

000038e4 <writeString>:

void writeString(const char str[])
{
    38e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38e6:	46c6      	mov	lr, r8
    38e8:	b500      	push	{lr}
    38ea:	0005      	movs	r5, r0
	int length = strlen(str);
    38ec:	4b0c      	ldr	r3, [pc, #48]	; (3920 <writeString+0x3c>)
    38ee:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    38f0:	2800      	cmp	r0, #0
    38f2:	dd11      	ble.n	3918 <writeString+0x34>
    38f4:	002c      	movs	r4, r5
    38f6:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    38f8:	4f0a      	ldr	r7, [pc, #40]	; (3924 <writeString+0x40>)
		if(xCharPos <= 80)
    38fa:	4e0b      	ldr	r6, [pc, #44]	; (3928 <writeString+0x44>)
		xCharPos++;
    38fc:	46b0      	mov	r8, r6
    38fe:	e002      	b.n	3906 <writeString+0x22>
    3900:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    3902:	42ac      	cmp	r4, r5
    3904:	d008      	beq.n	3918 <writeString+0x34>
		drawChar(str[i]);
    3906:	7820      	ldrb	r0, [r4, #0]
    3908:	47b8      	blx	r7
		if(xCharPos <= 80)
    390a:	8833      	ldrh	r3, [r6, #0]
    390c:	2b50      	cmp	r3, #80	; 0x50
    390e:	d8f7      	bhi.n	3900 <writeString+0x1c>
		xCharPos++;
    3910:	3301      	adds	r3, #1
    3912:	4642      	mov	r2, r8
    3914:	8013      	strh	r3, [r2, #0]
    3916:	e7f3      	b.n	3900 <writeString+0x1c>
	}
}
    3918:	bc04      	pop	{r2}
    391a:	4690      	mov	r8, r2
    391c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    391e:	46c0      	nop			; (mov r8, r8)
    3920:	000050cf 	.word	0x000050cf
    3924:	0000358d 	.word	0x0000358d
    3928:	200002ec 	.word	0x200002ec

0000392c <nullifyConsole>:

void nullifyConsole(void)
{
    392c:	b5f0      	push	{r4, r5, r6, r7, lr}
    392e:	4e0c      	ldr	r6, [pc, #48]	; (3960 <nullifyConsole+0x34>)
    3930:	4c0c      	ldr	r4, [pc, #48]	; (3964 <nullifyConsole+0x38>)
    3932:	480d      	ldr	r0, [pc, #52]	; (3968 <nullifyConsole+0x3c>)
    3934:	23f0      	movs	r3, #240	; 0xf0
    3936:	015b      	lsls	r3, r3, #5
    3938:	18f7      	adds	r7, r6, r3
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    393a:	2100      	movs	r1, #0
			consoleSGR[i][j] = 0x00;
			consoleColors[i][j] = 0xFFFF0000;
    393c:	4d0b      	ldr	r5, [pc, #44]	; (396c <nullifyConsole+0x40>)
    393e:	e004      	b.n	394a <nullifyConsole+0x1e>
    3940:	3660      	adds	r6, #96	; 0x60
    3942:	3418      	adds	r4, #24
    3944:	3018      	adds	r0, #24
	for(int i = 0 ; i < 80 ; i++)
    3946:	42be      	cmp	r6, r7
    3948:	d008      	beq.n	395c <nullifyConsole+0x30>
{
    394a:	0032      	movs	r2, r6
    394c:	2300      	movs	r3, #0
			consoleDisplay[i][j] = 0x00;
    394e:	54e1      	strb	r1, [r4, r3]
			consoleSGR[i][j] = 0x00;
    3950:	54c1      	strb	r1, [r0, r3]
			consoleColors[i][j] = 0xFFFF0000;
    3952:	c220      	stmia	r2!, {r5}
		for(int j = 0 ; j < 24 ; j++)
    3954:	3301      	adds	r3, #1
    3956:	2b18      	cmp	r3, #24
    3958:	d1f9      	bne.n	394e <nullifyConsole+0x22>
    395a:	e7f1      	b.n	3940 <nullifyConsole+0x14>
		}
	}	
}
    395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    395e:	46c0      	nop			; (mov r8, r8)
    3960:	200012f4 	.word	0x200012f4
    3964:	200003f4 	.word	0x200003f4
    3968:	20000b74 	.word	0x20000b74
    396c:	ffff0000 	.word	0xffff0000

00003970 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    3970:	4b09      	ldr	r3, [pc, #36]	; (3998 <scanCodesContains+0x28>)
    3972:	681b      	ldr	r3, [r3, #0]
    3974:	4298      	cmp	r0, r3
    3976:	d00b      	beq.n	3990 <scanCodesContains+0x20>
    3978:	4a07      	ldr	r2, [pc, #28]	; (3998 <scanCodesContains+0x28>)
    397a:	1d13      	adds	r3, r2, #4
    397c:	3219      	adds	r2, #25
    397e:	32ff      	adds	r2, #255	; 0xff
    3980:	6819      	ldr	r1, [r3, #0]
    3982:	4281      	cmp	r1, r0
    3984:	d006      	beq.n	3994 <scanCodesContains+0x24>
    3986:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    3988:	4293      	cmp	r3, r2
    398a:	d1f9      	bne.n	3980 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    398c:	2000      	movs	r0, #0
    398e:	e002      	b.n	3996 <scanCodesContains+0x26>
			return true;
    3990:	2001      	movs	r0, #1
    3992:	e000      	b.n	3996 <scanCodesContains+0x26>
    3994:	2001      	movs	r0, #1
}
    3996:	4770      	bx	lr
    3998:	20000054 	.word	0x20000054

0000399c <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    399c:	4b09      	ldr	r3, [pc, #36]	; (39c4 <keyDown+0x28>)
    399e:	781b      	ldrb	r3, [r3, #0]
    39a0:	4298      	cmp	r0, r3
    39a2:	d00a      	beq.n	39ba <keyDown+0x1e>
    39a4:	4907      	ldr	r1, [pc, #28]	; (39c4 <keyDown+0x28>)
    39a6:	1c4b      	adds	r3, r1, #1
    39a8:	3114      	adds	r1, #20
    39aa:	781a      	ldrb	r2, [r3, #0]
    39ac:	4282      	cmp	r2, r0
    39ae:	d006      	beq.n	39be <keyDown+0x22>
    39b0:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    39b2:	428b      	cmp	r3, r1
    39b4:	d1f9      	bne.n	39aa <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    39b6:	2000      	movs	r0, #0
}
    39b8:	4770      	bx	lr
			return true;
    39ba:	2001      	movs	r0, #1
    39bc:	e7fc      	b.n	39b8 <keyDown+0x1c>
    39be:	2001      	movs	r0, #1
    39c0:	e7fa      	b.n	39b8 <keyDown+0x1c>
    39c2:	46c0      	nop			; (mov r8, r8)
    39c4:	2000002c 	.word	0x2000002c

000039c8 <printKeyboardBuffer>:
{
    39c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ca:	46d6      	mov	lr, sl
    39cc:	464f      	mov	r7, r9
    39ce:	4646      	mov	r6, r8
    39d0:	b5c0      	push	{r6, r7, lr}
    39d2:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    39d4:	4dca      	ldr	r5, [pc, #808]	; (3d00 <printKeyboardBuffer+0x338>)
    39d6:	2246      	movs	r2, #70	; 0x46
    39d8:	0029      	movs	r1, r5
    39da:	a83a      	add	r0, sp, #232	; 0xe8
    39dc:	4cc9      	ldr	r4, [pc, #804]	; (3d04 <printKeyboardBuffer+0x33c>)
    39de:	47a0      	blx	r4
	unsigned char shiftCase[] =
    39e0:	0029      	movs	r1, r5
    39e2:	3148      	adds	r1, #72	; 0x48
    39e4:	2246      	movs	r2, #70	; 0x46
    39e6:	a828      	add	r0, sp, #160	; 0xa0
    39e8:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    39ea:	4dc7      	ldr	r5, [pc, #796]	; (3d08 <printKeyboardBuffer+0x340>)
    39ec:	0029      	movs	r1, r5
    39ee:	3110      	adds	r1, #16
    39f0:	2246      	movs	r2, #70	; 0x46
    39f2:	a816      	add	r0, sp, #88	; 0x58
    39f4:	47a0      	blx	r4
	unsigned char controlCase[] =
    39f6:	0029      	movs	r1, r5
    39f8:	3158      	adds	r1, #88	; 0x58
    39fa:	2246      	movs	r2, #70	; 0x46
    39fc:	a804      	add	r0, sp, #16
    39fe:	47a0      	blx	r4
    3a00:	4fc2      	ldr	r7, [pc, #776]	; (3d0c <printKeyboardBuffer+0x344>)
    3a02:	003c      	movs	r4, r7
    3a04:	3414      	adds	r4, #20
    3a06:	003d      	movs	r5, r7
	bool controled = false;
    3a08:	2300      	movs	r3, #0
    3a0a:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    3a0c:	9302      	str	r3, [sp, #8]
			controled = true;
    3a0e:	2201      	movs	r2, #1
    3a10:	e004      	b.n	3a1c <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    3a12:	2916      	cmp	r1, #22
    3a14:	d011      	beq.n	3a3a <printKeyboardBuffer+0x72>
    3a16:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    3a18:	42a5      	cmp	r5, r4
    3a1a:	d010      	beq.n	3a3e <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    3a1c:	7829      	ldrb	r1, [r5, #0]
    3a1e:	000b      	movs	r3, r1
    3a20:	3b0d      	subs	r3, #13
    3a22:	425e      	negs	r6, r3
    3a24:	415e      	adcs	r6, r3
    3a26:	46b4      	mov	ip, r6
    3a28:	0008      	movs	r0, r1
    3a2a:	3831      	subs	r0, #49	; 0x31
    3a2c:	4243      	negs	r3, r0
    3a2e:	4143      	adcs	r3, r0
    3a30:	4660      	mov	r0, ip
    3a32:	4318      	orrs	r0, r3
    3a34:	d0ed      	beq.n	3a12 <printKeyboardBuffer+0x4a>
			shifted = true;
    3a36:	9002      	str	r0, [sp, #8]
    3a38:	e7eb      	b.n	3a12 <printKeyboardBuffer+0x4a>
			controled = true;
    3a3a:	9203      	str	r2, [sp, #12]
    3a3c:	e7eb      	b.n	3a16 <printKeyboardBuffer+0x4e>
    3a3e:	4eb4      	ldr	r6, [pc, #720]	; (3d10 <printKeyboardBuffer+0x348>)
	for(int i=0; i<20; i++)
    3a40:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    3a42:	4bb4      	ldr	r3, [pc, #720]	; (3d14 <printKeyboardBuffer+0x34c>)
    3a44:	469a      	mov	sl, r3
    3a46:	e00b      	b.n	3a60 <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    3a48:	301b      	adds	r0, #27
    3a4a:	4bb3      	ldr	r3, [pc, #716]	; (3d18 <printKeyboardBuffer+0x350>)
    3a4c:	4798      	blx	r3
				if(localEcho)
    3a4e:	4bb3      	ldr	r3, [pc, #716]	; (3d1c <printKeyboardBuffer+0x354>)
    3a50:	781b      	ldrb	r3, [r3, #0]
    3a52:	2b00      	cmp	r3, #0
    3a54:	d14a      	bne.n	3aec <printKeyboardBuffer+0x124>
    3a56:	3401      	adds	r4, #1
    3a58:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    3a5a:	42ac      	cmp	r4, r5
    3a5c:	d100      	bne.n	3a60 <printKeyboardBuffer+0x98>
    3a5e:	e144      	b.n	3cea <printKeyboardBuffer+0x322>
    3a60:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    3a62:	7823      	ldrb	r3, [r4, #0]
    3a64:	4698      	mov	r8, r3
    3a66:	0018      	movs	r0, r3
    3a68:	47d0      	blx	sl
    3a6a:	2800      	cmp	r0, #0
    3a6c:	d1f3      	bne.n	3a56 <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    3a6e:	4643      	mov	r3, r8
    3a70:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    3a72:	4643      	mov	r3, r8
    3a74:	2b00      	cmp	r3, #0
    3a76:	d0e7      	beq.n	3a48 <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    3a78:	4643      	mov	r3, r8
    3a7a:	2b01      	cmp	r3, #1
    3a7c:	d0eb      	beq.n	3a56 <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    3a7e:	2b43      	cmp	r3, #67	; 0x43
    3a80:	d03a      	beq.n	3af8 <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    3a82:	4643      	mov	r3, r8
    3a84:	2b3a      	cmp	r3, #58	; 0x3a
    3a86:	d03f      	beq.n	3b08 <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    3a88:	4643      	mov	r3, r8
    3a8a:	2b0c      	cmp	r3, #12
    3a8c:	d078      	beq.n	3b80 <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    3a8e:	4643      	mov	r3, r8
    3a90:	2b03      	cmp	r3, #3
    3a92:	d07b      	beq.n	3b8c <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    3a94:	4643      	mov	r3, r8
    3a96:	2b23      	cmp	r3, #35	; 0x23
    3a98:	d07e      	beq.n	3b98 <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    3a9a:	4643      	mov	r3, r8
    3a9c:	2b2d      	cmp	r3, #45	; 0x2d
    3a9e:	d100      	bne.n	3aa2 <printKeyboardBuffer+0xda>
    3aa0:	e097      	b.n	3bd2 <printKeyboardBuffer+0x20a>
			else if(scanCodeBuffer[i]  == 55)	//up
    3aa2:	4643      	mov	r3, r8
    3aa4:	2b37      	cmp	r3, #55	; 0x37
    3aa6:	d100      	bne.n	3aaa <printKeyboardBuffer+0xe2>
    3aa8:	e0b0      	b.n	3c0c <printKeyboardBuffer+0x244>
			else if(scanCodeBuffer[i]  == 65)	//right
    3aaa:	4643      	mov	r3, r8
    3aac:	2b41      	cmp	r3, #65	; 0x41
    3aae:	d100      	bne.n	3ab2 <printKeyboardBuffer+0xea>
    3ab0:	e0c9      	b.n	3c46 <printKeyboardBuffer+0x27e>
				if(controled)
    3ab2:	9b03      	ldr	r3, [sp, #12]
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d000      	beq.n	3aba <printKeyboardBuffer+0xf2>
    3ab8:	e0e2      	b.n	3c80 <printKeyboardBuffer+0x2b8>
				else if(capsLock)
    3aba:	4b99      	ldr	r3, [pc, #612]	; (3d20 <printKeyboardBuffer+0x358>)
    3abc:	781b      	ldrb	r3, [r3, #0]
    3abe:	2b00      	cmp	r3, #0
    3ac0:	d000      	beq.n	3ac4 <printKeyboardBuffer+0xfc>
    3ac2:	e0f0      	b.n	3ca6 <printKeyboardBuffer+0x2de>
				else if(shifted)
    3ac4:	9b02      	ldr	r3, [sp, #8]
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d100      	bne.n	3acc <printKeyboardBuffer+0x104>
    3aca:	e0fd      	b.n	3cc8 <printKeyboardBuffer+0x300>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    3acc:	ab28      	add	r3, sp, #160	; 0xa0
    3ace:	4642      	mov	r2, r8
    3ad0:	5c98      	ldrb	r0, [r3, r2]
    3ad2:	4b91      	ldr	r3, [pc, #580]	; (3d18 <printKeyboardBuffer+0x350>)
    3ad4:	4798      	blx	r3
					if(localEcho)
    3ad6:	4b91      	ldr	r3, [pc, #580]	; (3d1c <printKeyboardBuffer+0x354>)
    3ad8:	781b      	ldrb	r3, [r3, #0]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d0bb      	beq.n	3a56 <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    3ade:	9b01      	ldr	r3, [sp, #4]
    3ae0:	781b      	ldrb	r3, [r3, #0]
    3ae2:	aa28      	add	r2, sp, #160	; 0xa0
    3ae4:	5cd0      	ldrb	r0, [r2, r3]
    3ae6:	4b8f      	ldr	r3, [pc, #572]	; (3d24 <printKeyboardBuffer+0x35c>)
    3ae8:	4798      	blx	r3
    3aea:	e7b4      	b.n	3a56 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    3aec:	4b8e      	ldr	r3, [pc, #568]	; (3d28 <printKeyboardBuffer+0x360>)
    3aee:	6818      	ldr	r0, [r3, #0]
    3af0:	211b      	movs	r1, #27
    3af2:	4b8e      	ldr	r3, [pc, #568]	; (3d2c <printKeyboardBuffer+0x364>)
    3af4:	4798      	blx	r3
    3af6:	e7ae      	b.n	3a56 <printKeyboardBuffer+0x8e>
				if(breakEnable)
    3af8:	4b8d      	ldr	r3, [pc, #564]	; (3d30 <printKeyboardBuffer+0x368>)
    3afa:	781b      	ldrb	r3, [r3, #0]
    3afc:	2b00      	cmp	r3, #0
    3afe:	d0aa      	beq.n	3a56 <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    3b00:	2000      	movs	r0, #0
    3b02:	4b85      	ldr	r3, [pc, #532]	; (3d18 <printKeyboardBuffer+0x350>)
    3b04:	4798      	blx	r3
    3b06:	e7a6      	b.n	3a56 <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    3b08:	4b8a      	ldr	r3, [pc, #552]	; (3d34 <printKeyboardBuffer+0x36c>)
    3b0a:	681b      	ldr	r3, [r3, #0]
    3b0c:	2b01      	cmp	r3, #1
    3b0e:	d014      	beq.n	3b3a <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    3b10:	4b88      	ldr	r3, [pc, #544]	; (3d34 <printKeyboardBuffer+0x36c>)
    3b12:	681b      	ldr	r3, [r3, #0]
    3b14:	2b02      	cmp	r3, #2
    3b16:	d026      	beq.n	3b66 <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    3b18:	4b86      	ldr	r3, [pc, #536]	; (3d34 <printKeyboardBuffer+0x36c>)
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	2b03      	cmp	r3, #3
    3b1e:	d19a      	bne.n	3a56 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    3b20:	200d      	movs	r0, #13
    3b22:	4b7d      	ldr	r3, [pc, #500]	; (3d18 <printKeyboardBuffer+0x350>)
    3b24:	4798      	blx	r3
					if(localEcho)
    3b26:	4b7d      	ldr	r3, [pc, #500]	; (3d1c <printKeyboardBuffer+0x354>)
    3b28:	781b      	ldrb	r3, [r3, #0]
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d093      	beq.n	3a56 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    3b2e:	4b7e      	ldr	r3, [pc, #504]	; (3d28 <printKeyboardBuffer+0x360>)
    3b30:	6818      	ldr	r0, [r3, #0]
    3b32:	210d      	movs	r1, #13
    3b34:	4b7d      	ldr	r3, [pc, #500]	; (3d2c <printKeyboardBuffer+0x364>)
    3b36:	4798      	blx	r3
    3b38:	e78d      	b.n	3a56 <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    3b3a:	200d      	movs	r0, #13
    3b3c:	4b76      	ldr	r3, [pc, #472]	; (3d18 <printKeyboardBuffer+0x350>)
    3b3e:	4698      	mov	r8, r3
    3b40:	4798      	blx	r3
					sendChar(0x0A);
    3b42:	200a      	movs	r0, #10
    3b44:	47c0      	blx	r8
					if(localEcho)
    3b46:	4b75      	ldr	r3, [pc, #468]	; (3d1c <printKeyboardBuffer+0x354>)
    3b48:	781b      	ldrb	r3, [r3, #0]
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d0e0      	beq.n	3b10 <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    3b4e:	4b76      	ldr	r3, [pc, #472]	; (3d28 <printKeyboardBuffer+0x360>)
    3b50:	4699      	mov	r9, r3
    3b52:	210d      	movs	r1, #13
    3b54:	6818      	ldr	r0, [r3, #0]
    3b56:	4b75      	ldr	r3, [pc, #468]	; (3d2c <printKeyboardBuffer+0x364>)
    3b58:	4698      	mov	r8, r3
    3b5a:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    3b5c:	464b      	mov	r3, r9
    3b5e:	6818      	ldr	r0, [r3, #0]
    3b60:	210a      	movs	r1, #10
    3b62:	47c0      	blx	r8
    3b64:	e7d4      	b.n	3b10 <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    3b66:	200a      	movs	r0, #10
    3b68:	4b6b      	ldr	r3, [pc, #428]	; (3d18 <printKeyboardBuffer+0x350>)
    3b6a:	4798      	blx	r3
					if(localEcho)
    3b6c:	4b6b      	ldr	r3, [pc, #428]	; (3d1c <printKeyboardBuffer+0x354>)
    3b6e:	781b      	ldrb	r3, [r3, #0]
    3b70:	2b00      	cmp	r3, #0
    3b72:	d0d1      	beq.n	3b18 <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    3b74:	4b6c      	ldr	r3, [pc, #432]	; (3d28 <printKeyboardBuffer+0x360>)
    3b76:	6818      	ldr	r0, [r3, #0]
    3b78:	210a      	movs	r1, #10
    3b7a:	4b6c      	ldr	r3, [pc, #432]	; (3d2c <printKeyboardBuffer+0x364>)
    3b7c:	4798      	blx	r3
    3b7e:	e7cb      	b.n	3b18 <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    3b80:	4a67      	ldr	r2, [pc, #412]	; (3d20 <printKeyboardBuffer+0x358>)
    3b82:	7813      	ldrb	r3, [r2, #0]
    3b84:	2101      	movs	r1, #1
    3b86:	404b      	eors	r3, r1
    3b88:	7013      	strb	r3, [r2, #0]
    3b8a:	e764      	b.n	3a56 <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    3b8c:	4a6a      	ldr	r2, [pc, #424]	; (3d38 <printKeyboardBuffer+0x370>)
    3b8e:	7813      	ldrb	r3, [r2, #0]
    3b90:	2101      	movs	r1, #1
    3b92:	404b      	eors	r3, r1
    3b94:	7013      	strb	r3, [r2, #0]
    3b96:	e75e      	b.n	3a56 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3b98:	201b      	movs	r0, #27
    3b9a:	4b5f      	ldr	r3, [pc, #380]	; (3d18 <printKeyboardBuffer+0x350>)
    3b9c:	4698      	mov	r8, r3
    3b9e:	4798      	blx	r3
				sendChar(0x5B);
    3ba0:	205b      	movs	r0, #91	; 0x5b
    3ba2:	47c0      	blx	r8
				sendChar(0x44);
    3ba4:	2044      	movs	r0, #68	; 0x44
    3ba6:	47c0      	blx	r8
				if(localEcho)
    3ba8:	4b5c      	ldr	r3, [pc, #368]	; (3d1c <printKeyboardBuffer+0x354>)
    3baa:	781b      	ldrb	r3, [r3, #0]
    3bac:	2b00      	cmp	r3, #0
    3bae:	d100      	bne.n	3bb2 <printKeyboardBuffer+0x1ea>
    3bb0:	e751      	b.n	3a56 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3bb2:	4b5d      	ldr	r3, [pc, #372]	; (3d28 <printKeyboardBuffer+0x360>)
    3bb4:	4699      	mov	r9, r3
    3bb6:	211b      	movs	r1, #27
    3bb8:	6818      	ldr	r0, [r3, #0]
    3bba:	4b5c      	ldr	r3, [pc, #368]	; (3d2c <printKeyboardBuffer+0x364>)
    3bbc:	4698      	mov	r8, r3
    3bbe:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3bc0:	215b      	movs	r1, #91	; 0x5b
    3bc2:	464b      	mov	r3, r9
    3bc4:	6818      	ldr	r0, [r3, #0]
    3bc6:	47c0      	blx	r8
					ring_put(ouroboros, 0x44);
    3bc8:	464b      	mov	r3, r9
    3bca:	6818      	ldr	r0, [r3, #0]
    3bcc:	2144      	movs	r1, #68	; 0x44
    3bce:	47c0      	blx	r8
    3bd0:	e741      	b.n	3a56 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3bd2:	201b      	movs	r0, #27
    3bd4:	4b50      	ldr	r3, [pc, #320]	; (3d18 <printKeyboardBuffer+0x350>)
    3bd6:	4698      	mov	r8, r3
    3bd8:	4798      	blx	r3
				sendChar(0x5B);
    3bda:	205b      	movs	r0, #91	; 0x5b
    3bdc:	47c0      	blx	r8
				sendChar(0x42);
    3bde:	2042      	movs	r0, #66	; 0x42
    3be0:	47c0      	blx	r8
				if(localEcho)
    3be2:	4b4e      	ldr	r3, [pc, #312]	; (3d1c <printKeyboardBuffer+0x354>)
    3be4:	781b      	ldrb	r3, [r3, #0]
    3be6:	2b00      	cmp	r3, #0
    3be8:	d100      	bne.n	3bec <printKeyboardBuffer+0x224>
    3bea:	e734      	b.n	3a56 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3bec:	4b4e      	ldr	r3, [pc, #312]	; (3d28 <printKeyboardBuffer+0x360>)
    3bee:	4699      	mov	r9, r3
    3bf0:	211b      	movs	r1, #27
    3bf2:	6818      	ldr	r0, [r3, #0]
    3bf4:	4b4d      	ldr	r3, [pc, #308]	; (3d2c <printKeyboardBuffer+0x364>)
    3bf6:	4698      	mov	r8, r3
    3bf8:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3bfa:	215b      	movs	r1, #91	; 0x5b
    3bfc:	464b      	mov	r3, r9
    3bfe:	6818      	ldr	r0, [r3, #0]
    3c00:	47c0      	blx	r8
					ring_put(ouroboros, 0x42);
    3c02:	464b      	mov	r3, r9
    3c04:	6818      	ldr	r0, [r3, #0]
    3c06:	2142      	movs	r1, #66	; 0x42
    3c08:	47c0      	blx	r8
    3c0a:	e724      	b.n	3a56 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3c0c:	201b      	movs	r0, #27
    3c0e:	4b42      	ldr	r3, [pc, #264]	; (3d18 <printKeyboardBuffer+0x350>)
    3c10:	4698      	mov	r8, r3
    3c12:	4798      	blx	r3
				sendChar(0x5B);
    3c14:	205b      	movs	r0, #91	; 0x5b
    3c16:	47c0      	blx	r8
				sendChar(0x41);
    3c18:	2041      	movs	r0, #65	; 0x41
    3c1a:	47c0      	blx	r8
				if(localEcho)
    3c1c:	4b3f      	ldr	r3, [pc, #252]	; (3d1c <printKeyboardBuffer+0x354>)
    3c1e:	781b      	ldrb	r3, [r3, #0]
    3c20:	2b00      	cmp	r3, #0
    3c22:	d100      	bne.n	3c26 <printKeyboardBuffer+0x25e>
    3c24:	e717      	b.n	3a56 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3c26:	4b40      	ldr	r3, [pc, #256]	; (3d28 <printKeyboardBuffer+0x360>)
    3c28:	4699      	mov	r9, r3
    3c2a:	211b      	movs	r1, #27
    3c2c:	6818      	ldr	r0, [r3, #0]
    3c2e:	4b3f      	ldr	r3, [pc, #252]	; (3d2c <printKeyboardBuffer+0x364>)
    3c30:	4698      	mov	r8, r3
    3c32:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3c34:	215b      	movs	r1, #91	; 0x5b
    3c36:	464b      	mov	r3, r9
    3c38:	6818      	ldr	r0, [r3, #0]
    3c3a:	47c0      	blx	r8
					ring_put(ouroboros, 0x41);
    3c3c:	464b      	mov	r3, r9
    3c3e:	6818      	ldr	r0, [r3, #0]
    3c40:	2141      	movs	r1, #65	; 0x41
    3c42:	47c0      	blx	r8
    3c44:	e707      	b.n	3a56 <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    3c46:	201b      	movs	r0, #27
    3c48:	4b33      	ldr	r3, [pc, #204]	; (3d18 <printKeyboardBuffer+0x350>)
    3c4a:	4698      	mov	r8, r3
    3c4c:	4798      	blx	r3
				sendChar(0x5B);
    3c4e:	205b      	movs	r0, #91	; 0x5b
    3c50:	47c0      	blx	r8
				sendChar(0x43);
    3c52:	2043      	movs	r0, #67	; 0x43
    3c54:	47c0      	blx	r8
				if(localEcho)
    3c56:	4b31      	ldr	r3, [pc, #196]	; (3d1c <printKeyboardBuffer+0x354>)
    3c58:	781b      	ldrb	r3, [r3, #0]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d100      	bne.n	3c60 <printKeyboardBuffer+0x298>
    3c5e:	e6fa      	b.n	3a56 <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    3c60:	4b31      	ldr	r3, [pc, #196]	; (3d28 <printKeyboardBuffer+0x360>)
    3c62:	4699      	mov	r9, r3
    3c64:	211b      	movs	r1, #27
    3c66:	6818      	ldr	r0, [r3, #0]
    3c68:	4b30      	ldr	r3, [pc, #192]	; (3d2c <printKeyboardBuffer+0x364>)
    3c6a:	4698      	mov	r8, r3
    3c6c:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    3c6e:	215b      	movs	r1, #91	; 0x5b
    3c70:	464b      	mov	r3, r9
    3c72:	6818      	ldr	r0, [r3, #0]
    3c74:	47c0      	blx	r8
					ring_put(ouroboros, 0x43);
    3c76:	464b      	mov	r3, r9
    3c78:	6818      	ldr	r0, [r3, #0]
    3c7a:	2143      	movs	r1, #67	; 0x43
    3c7c:	47c0      	blx	r8
    3c7e:	e6ea      	b.n	3a56 <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    3c80:	ab04      	add	r3, sp, #16
    3c82:	4642      	mov	r2, r8
    3c84:	5c98      	ldrb	r0, [r3, r2]
    3c86:	4b24      	ldr	r3, [pc, #144]	; (3d18 <printKeyboardBuffer+0x350>)
    3c88:	4798      	blx	r3
					if(localEcho)
    3c8a:	4b24      	ldr	r3, [pc, #144]	; (3d1c <printKeyboardBuffer+0x354>)
    3c8c:	781b      	ldrb	r3, [r3, #0]
    3c8e:	2b00      	cmp	r3, #0
    3c90:	d100      	bne.n	3c94 <printKeyboardBuffer+0x2cc>
    3c92:	e6e0      	b.n	3a56 <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    3c94:	9b01      	ldr	r3, [sp, #4]
    3c96:	781b      	ldrb	r3, [r3, #0]
    3c98:	aa04      	add	r2, sp, #16
    3c9a:	5cd1      	ldrb	r1, [r2, r3]
    3c9c:	4b22      	ldr	r3, [pc, #136]	; (3d28 <printKeyboardBuffer+0x360>)
    3c9e:	6818      	ldr	r0, [r3, #0]
    3ca0:	4b22      	ldr	r3, [pc, #136]	; (3d2c <printKeyboardBuffer+0x364>)
    3ca2:	4798      	blx	r3
    3ca4:	e6d7      	b.n	3a56 <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    3ca6:	ab16      	add	r3, sp, #88	; 0x58
    3ca8:	4642      	mov	r2, r8
    3caa:	5c98      	ldrb	r0, [r3, r2]
    3cac:	4b1a      	ldr	r3, [pc, #104]	; (3d18 <printKeyboardBuffer+0x350>)
    3cae:	4798      	blx	r3
					if(localEcho)
    3cb0:	4b1a      	ldr	r3, [pc, #104]	; (3d1c <printKeyboardBuffer+0x354>)
    3cb2:	781b      	ldrb	r3, [r3, #0]
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d100      	bne.n	3cba <printKeyboardBuffer+0x2f2>
    3cb8:	e6cd      	b.n	3a56 <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    3cba:	9b01      	ldr	r3, [sp, #4]
    3cbc:	781b      	ldrb	r3, [r3, #0]
    3cbe:	aa16      	add	r2, sp, #88	; 0x58
    3cc0:	5cd0      	ldrb	r0, [r2, r3]
    3cc2:	4b18      	ldr	r3, [pc, #96]	; (3d24 <printKeyboardBuffer+0x35c>)
    3cc4:	4798      	blx	r3
    3cc6:	e6c6      	b.n	3a56 <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    3cc8:	ab3a      	add	r3, sp, #232	; 0xe8
    3cca:	4642      	mov	r2, r8
    3ccc:	5c98      	ldrb	r0, [r3, r2]
    3cce:	4b12      	ldr	r3, [pc, #72]	; (3d18 <printKeyboardBuffer+0x350>)
    3cd0:	4798      	blx	r3
					if(localEcho)
    3cd2:	4b12      	ldr	r3, [pc, #72]	; (3d1c <printKeyboardBuffer+0x354>)
    3cd4:	781b      	ldrb	r3, [r3, #0]
    3cd6:	2b00      	cmp	r3, #0
    3cd8:	d100      	bne.n	3cdc <printKeyboardBuffer+0x314>
    3cda:	e6bc      	b.n	3a56 <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    3cdc:	9b01      	ldr	r3, [sp, #4]
    3cde:	781b      	ldrb	r3, [r3, #0]
    3ce0:	aa3a      	add	r2, sp, #232	; 0xe8
    3ce2:	5cd0      	ldrb	r0, [r2, r3]
    3ce4:	4b0f      	ldr	r3, [pc, #60]	; (3d24 <printKeyboardBuffer+0x35c>)
    3ce6:	4798      	blx	r3
    3ce8:	e6b5      	b.n	3a56 <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    3cea:	23ff      	movs	r3, #255	; 0xff
    3cec:	703b      	strb	r3, [r7, #0]
    3cee:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    3cf0:	42bc      	cmp	r4, r7
    3cf2:	d1fb      	bne.n	3cec <printKeyboardBuffer+0x324>
}
    3cf4:	b04c      	add	sp, #304	; 0x130
    3cf6:	bc1c      	pop	{r2, r3, r4}
    3cf8:	4690      	mov	r8, r2
    3cfa:	4699      	mov	r9, r3
    3cfc:	46a2      	mov	sl, r4
    3cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d00:	00008028 	.word	0x00008028
    3d04:	00004c81 	.word	0x00004c81
    3d08:	000080a8 	.word	0x000080a8
    3d0c:	20000040 	.word	0x20000040
    3d10:	2000002c 	.word	0x2000002c
    3d14:	0000399d 	.word	0x0000399d
    3d18:	00001b99 	.word	0x00001b99
    3d1c:	20000194 	.word	0x20000194
    3d20:	20000369 	.word	0x20000369
    3d24:	000017f1 	.word	0x000017f1
    3d28:	20000390 	.word	0x20000390
    3d2c:	00000141 	.word	0x00000141
    3d30:	200002f0 	.word	0x200002f0
    3d34:	20000190 	.word	0x20000190
    3d38:	20000389 	.word	0x20000389

00003d3c <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    3d3c:	b510      	push	{r4, lr}
    3d3e:	4b07      	ldr	r3, [pc, #28]	; (3d5c <removeFromKeyDown+0x20>)
    3d40:	0019      	movs	r1, r3
    3d42:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    3d44:	24ff      	movs	r4, #255	; 0xff
    3d46:	e002      	b.n	3d4e <removeFromKeyDown+0x12>
    3d48:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    3d4a:	428b      	cmp	r3, r1
    3d4c:	d004      	beq.n	3d58 <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    3d4e:	781a      	ldrb	r2, [r3, #0]
    3d50:	4282      	cmp	r2, r0
    3d52:	d1f9      	bne.n	3d48 <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    3d54:	701c      	strb	r4, [r3, #0]
    3d56:	e7f7      	b.n	3d48 <removeFromKeyDown+0xc>
		}
	}
}
    3d58:	bd10      	pop	{r4, pc}
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	2000002c 	.word	0x2000002c

00003d60 <readKeyboard>:
{
    3d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d62:	46de      	mov	lr, fp
    3d64:	4657      	mov	r7, sl
    3d66:	464e      	mov	r6, r9
    3d68:	4645      	mov	r5, r8
    3d6a:	b5e0      	push	{r5, r6, r7, lr}
    3d6c:	b083      	sub	sp, #12
    3d6e:	4e6d      	ldr	r6, [pc, #436]	; (3f24 <readKeyboard+0x1c4>)
    3d70:	0031      	movs	r1, r6
    3d72:	3119      	adds	r1, #25
    3d74:	31ff      	adds	r1, #255	; 0xff
    3d76:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    3d78:	22ff      	movs	r2, #255	; 0xff
    3d7a:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    3d7c:	428b      	cmp	r3, r1
    3d7e:	d1fc      	bne.n	3d7a <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    3d80:	4a69      	ldr	r2, [pc, #420]	; (3f28 <readKeyboard+0x1c8>)
    3d82:	6a91      	ldr	r1, [r2, #40]	; 0x28
    3d84:	2380      	movs	r3, #128	; 0x80
    3d86:	03db      	lsls	r3, r3, #15
    3d88:	430b      	orrs	r3, r1
    3d8a:	6293      	str	r3, [r2, #40]	; 0x28
    3d8c:	4c67      	ldr	r4, [pc, #412]	; (3f2c <readKeyboard+0x1cc>)
    3d8e:	341c      	adds	r4, #28
    3d90:	4b66      	ldr	r3, [pc, #408]	; (3f2c <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    3d92:	4867      	ldr	r0, [pc, #412]	; (3f30 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    3d94:	4967      	ldr	r1, [pc, #412]	; (3f34 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    3d96:	681a      	ldr	r2, [r3, #0]
    3d98:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3d9a:	cb04      	ldmia	r3!, {r2}
    3d9c:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    3d9e:	42a3      	cmp	r3, r4
    3da0:	d1f9      	bne.n	3d96 <readKeyboard+0x36>
    3da2:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    3da4:	4b64      	ldr	r3, [pc, #400]	; (3f38 <readKeyboard+0x1d8>)
    3da6:	469c      	mov	ip, r3
    3da8:	4f64      	ldr	r7, [pc, #400]	; (3f3c <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3daa:	4d65      	ldr	r5, [pc, #404]	; (3f40 <readKeyboard+0x1e0>)
    3dac:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3dae:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    3db0:	4663      	mov	r3, ip
    3db2:	58d3      	ldr	r3, [r2, r3]
    3db4:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    3db6:	5953      	ldr	r3, [r2, r5]
    3db8:	4962      	ldr	r1, [pc, #392]	; (3f44 <readKeyboard+0x1e4>)
    3dba:	4688      	mov	r8, r1
    3dbc:	4443      	add	r3, r8
    3dbe:	7819      	ldrb	r1, [r3, #0]
    3dc0:	4321      	orrs	r1, r4
    3dc2:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    3dc4:	7819      	ldrb	r1, [r3, #0]
    3dc6:	4301      	orrs	r1, r0
    3dc8:	7019      	strb	r1, [r3, #0]
    3dca:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    3dcc:	2a28      	cmp	r2, #40	; 0x28
    3dce:	d1ef      	bne.n	3db0 <readKeyboard+0x50>
    3dd0:	4b56      	ldr	r3, [pc, #344]	; (3f2c <readKeyboard+0x1cc>)
    3dd2:	4699      	mov	r9, r3
    3dd4:	2300      	movs	r3, #0
    3dd6:	4698      	mov	r8, r3
    3dd8:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    3dda:	4b5b      	ldr	r3, [pc, #364]	; (3f48 <readKeyboard+0x1e8>)
    3ddc:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3dde:	4d52      	ldr	r5, [pc, #328]	; (3f28 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    3de0:	4b50      	ldr	r3, [pc, #320]	; (3f24 <readKeyboard+0x1c4>)
    3de2:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    3de4:	4b53      	ldr	r3, [pc, #332]	; (3f34 <readKeyboard+0x1d4>)
    3de6:	469a      	mov	sl, r3
    3de8:	9601      	str	r6, [sp, #4]
    3dea:	464e      	mov	r6, r9
    3dec:	4647      	mov	r7, r8
    3dee:	e015      	b.n	3e1c <readKeyboard+0xbc>
    3df0:	3304      	adds	r3, #4
    3df2:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    3df4:	42a3      	cmp	r3, r4
    3df6:	d008      	beq.n	3e0a <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    3df8:	6a28      	ldr	r0, [r5, #32]
    3dfa:	681e      	ldr	r6, [r3, #0]
    3dfc:	4206      	tst	r6, r0
    3dfe:	d0f7      	beq.n	3df0 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    3e00:	0090      	lsls	r0, r2, #2
    3e02:	4666      	mov	r6, ip
    3e04:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    3e06:	3201      	adds	r2, #1
    3e08:	e7f2      	b.n	3df0 <readKeyboard+0x90>
    3e0a:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    3e0c:	4649      	mov	r1, r9
    3e0e:	6809      	ldr	r1, [r1, #0]
    3e10:	4650      	mov	r0, sl
    3e12:	6001      	str	r1, [r0, #0]
    3e14:	3604      	adds	r6, #4
    3e16:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    3e18:	2f46      	cmp	r7, #70	; 0x46
    3e1a:	d00a      	beq.n	3e32 <readKeyboard+0xd2>
    3e1c:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    3e1e:	465b      	mov	r3, fp
    3e20:	6831      	ldr	r1, [r6, #0]
    3e22:	6019      	str	r1, [r3, #0]
    3e24:	4b44      	ldr	r3, [pc, #272]	; (3f38 <readKeyboard+0x1d8>)
    3e26:	4698      	mov	r8, r3
    3e28:	001c      	movs	r4, r3
    3e2a:	3428      	adds	r4, #40	; 0x28
    3e2c:	0039      	movs	r1, r7
    3e2e:	9600      	str	r6, [sp, #0]
    3e30:	e7e2      	b.n	3df8 <readKeyboard+0x98>
    3e32:	4647      	mov	r7, r8
    3e34:	9e01      	ldr	r6, [sp, #4]
    3e36:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    3e38:	4d3d      	ldr	r5, [pc, #244]	; (3f30 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    3e3a:	4c3e      	ldr	r4, [pc, #248]	; (3f34 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    3e3c:	6808      	ldr	r0, [r1, #0]
    3e3e:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    3e40:	c901      	ldmia	r1!, {r0}
    3e42:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3e44:	4299      	cmp	r1, r3
    3e46:	d1f9      	bne.n	3e3c <readKeyboard+0xdc>
    3e48:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    3e4a:	4b38      	ldr	r3, [pc, #224]	; (3f2c <readKeyboard+0x1cc>)
    3e4c:	4699      	mov	r9, r3
    3e4e:	4b3b      	ldr	r3, [pc, #236]	; (3f3c <readKeyboard+0x1dc>)
    3e50:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    3e52:	4b3e      	ldr	r3, [pc, #248]	; (3f4c <readKeyboard+0x1ec>)
    3e54:	469c      	mov	ip, r3
    3e56:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    3e58:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    3e5a:	4643      	mov	r3, r8
    3e5c:	4648      	mov	r0, r9
    3e5e:	5808      	ldr	r0, [r1, r0]
    3e60:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    3e62:	4663      	mov	r3, ip
    3e64:	58cb      	ldr	r3, [r1, r3]
    3e66:	4837      	ldr	r0, [pc, #220]	; (3f44 <readKeyboard+0x1e4>)
    3e68:	4682      	mov	sl, r0
    3e6a:	4453      	add	r3, sl
    3e6c:	7818      	ldrb	r0, [r3, #0]
    3e6e:	4328      	orrs	r0, r5
    3e70:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    3e72:	7818      	ldrb	r0, [r3, #0]
    3e74:	4320      	orrs	r0, r4
    3e76:	7018      	strb	r0, [r3, #0]
    3e78:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    3e7a:	291c      	cmp	r1, #28
    3e7c:	d1ed      	bne.n	3e5a <readKeyboard+0xfa>
    3e7e:	2300      	movs	r3, #0
    3e80:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    3e82:	4b31      	ldr	r3, [pc, #196]	; (3f48 <readKeyboard+0x1e8>)
    3e84:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    3e86:	4d28      	ldr	r5, [pc, #160]	; (3f28 <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    3e88:	4b26      	ldr	r3, [pc, #152]	; (3f24 <readKeyboard+0x1c4>)
    3e8a:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    3e8c:	4b29      	ldr	r3, [pc, #164]	; (3f34 <readKeyboard+0x1d4>)
    3e8e:	469a      	mov	sl, r3
    3e90:	46b1      	mov	r9, r6
    3e92:	003e      	movs	r6, r7
    3e94:	4667      	mov	r7, ip
    3e96:	e015      	b.n	3ec4 <readKeyboard+0x164>
    3e98:	3104      	adds	r1, #4
    3e9a:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    3e9c:	42a3      	cmp	r3, r4
    3e9e:	d008      	beq.n	3eb2 <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    3ea0:	6a28      	ldr	r0, [r5, #32]
    3ea2:	680e      	ldr	r6, [r1, #0]
    3ea4:	4206      	tst	r6, r0
    3ea6:	d0f7      	beq.n	3e98 <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    3ea8:	0090      	lsls	r0, r2, #2
    3eaa:	4646      	mov	r6, r8
    3eac:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    3eae:	3201      	adds	r2, #1
    3eb0:	e7f2      	b.n	3e98 <readKeyboard+0x138>
    3eb2:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    3eb4:	4663      	mov	r3, ip
    3eb6:	681b      	ldr	r3, [r3, #0]
    3eb8:	4651      	mov	r1, sl
    3eba:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    3ebc:	3701      	adds	r7, #1
    3ebe:	3604      	adds	r6, #4
    3ec0:	2f0a      	cmp	r7, #10
    3ec2:	d009      	beq.n	3ed8 <readKeyboard+0x178>
    3ec4:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    3ec6:	465b      	mov	r3, fp
    3ec8:	6831      	ldr	r1, [r6, #0]
    3eca:	6019      	str	r1, [r3, #0]
    3ecc:	003b      	movs	r3, r7
    3ece:	003c      	movs	r4, r7
    3ed0:	3446      	adds	r4, #70	; 0x46
    3ed2:	4916      	ldr	r1, [pc, #88]	; (3f2c <readKeyboard+0x1cc>)
    3ed4:	9600      	str	r6, [sp, #0]
    3ed6:	e7e3      	b.n	3ea0 <readKeyboard+0x140>
    3ed8:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    3eda:	2a00      	cmp	r2, #0
    3edc:	dd08      	ble.n	3ef0 <readKeyboard+0x190>
    3ede:	4b1c      	ldr	r3, [pc, #112]	; (3f50 <readKeyboard+0x1f0>)
    3ee0:	0092      	lsls	r2, r2, #2
    3ee2:	4910      	ldr	r1, [pc, #64]	; (3f24 <readKeyboard+0x1c4>)
    3ee4:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    3ee6:	ce02      	ldmia	r6!, {r1}
    3ee8:	7019      	strb	r1, [r3, #0]
    3eea:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    3eec:	42b2      	cmp	r2, r6
    3eee:	d1fa      	bne.n	3ee6 <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    3ef0:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    3ef2:	4d18      	ldr	r5, [pc, #96]	; (3f54 <readKeyboard+0x1f4>)
    3ef4:	4e18      	ldr	r6, [pc, #96]	; (3f58 <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    3ef6:	4f19      	ldr	r7, [pc, #100]	; (3f5c <readKeyboard+0x1fc>)
    3ef8:	e002      	b.n	3f00 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    3efa:	3401      	adds	r4, #1
    3efc:	2c46      	cmp	r4, #70	; 0x46
    3efe:	d00a      	beq.n	3f16 <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    3f00:	0020      	movs	r0, r4
    3f02:	47a8      	blx	r5
    3f04:	2800      	cmp	r0, #0
    3f06:	d0f8      	beq.n	3efa <readKeyboard+0x19a>
    3f08:	0020      	movs	r0, r4
    3f0a:	47b0      	blx	r6
    3f0c:	2800      	cmp	r0, #0
    3f0e:	d1f4      	bne.n	3efa <readKeyboard+0x19a>
			removeFromKeyDown(i);
    3f10:	0020      	movs	r0, r4
    3f12:	47b8      	blx	r7
    3f14:	e7f1      	b.n	3efa <readKeyboard+0x19a>
}
    3f16:	b003      	add	sp, #12
    3f18:	bc3c      	pop	{r2, r3, r4, r5}
    3f1a:	4690      	mov	r8, r2
    3f1c:	4699      	mov	r9, r3
    3f1e:	46a2      	mov	sl, r4
    3f20:	46ab      	mov	fp, r5
    3f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f24:	20000054 	.word	0x20000054
    3f28:	41004400 	.word	0x41004400
    3f2c:	00008148 	.word	0x00008148
    3f30:	41004408 	.word	0x41004408
    3f34:	41004414 	.word	0x41004414
    3f38:	00008180 	.word	0x00008180
    3f3c:	41004404 	.word	0x41004404
    3f40:	000081a8 	.word	0x000081a8
    3f44:	41004440 	.word	0x41004440
    3f48:	41004418 	.word	0x41004418
    3f4c:	00008164 	.word	0x00008164
    3f50:	20000040 	.word	0x20000040
    3f54:	0000399d 	.word	0x0000399d
    3f58:	00003971 	.word	0x00003971
    3f5c:	00003d3d 	.word	0x00003d3d

00003f60 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    3f60:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    3f62:	094b      	lsrs	r3, r1, #5
    3f64:	2407      	movs	r4, #7
    3f66:	43a0      	bics	r0, r4
    3f68:	4318      	orrs	r0, r3
    3f6a:	4b05      	ldr	r3, [pc, #20]	; (3f80 <setColorRGB+0x20>)
    3f6c:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    3f6e:	00c9      	lsls	r1, r1, #3
    3f70:	23e0      	movs	r3, #224	; 0xe0
    3f72:	4019      	ands	r1, r3
    3f74:	08d2      	lsrs	r2, r2, #3
    3f76:	430a      	orrs	r2, r1
    3f78:	4b02      	ldr	r3, [pc, #8]	; (3f84 <setColorRGB+0x24>)
    3f7a:	801a      	strh	r2, [r3, #0]
}
    3f7c:	bd10      	pop	{r4, pc}
    3f7e:	46c0      	nop			; (mov r8, r8)
    3f80:	200030f6 	.word	0x200030f6
    3f84:	200030f8 	.word	0x200030f8

00003f88 <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    3f88:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    3f8a:	094b      	lsrs	r3, r1, #5
    3f8c:	2407      	movs	r4, #7
    3f8e:	43a0      	bics	r0, r4
    3f90:	4318      	orrs	r0, r3
    3f92:	4b05      	ldr	r3, [pc, #20]	; (3fa8 <setBackColorRGB+0x20>)
    3f94:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    3f96:	00c9      	lsls	r1, r1, #3
    3f98:	23e0      	movs	r3, #224	; 0xe0
    3f9a:	4019      	ands	r1, r3
    3f9c:	08d2      	lsrs	r2, r2, #3
    3f9e:	430a      	orrs	r2, r1
    3fa0:	4b02      	ldr	r3, [pc, #8]	; (3fac <setBackColorRGB+0x24>)
    3fa2:	801a      	strh	r2, [r3, #0]
}
    3fa4:	bd10      	pop	{r4, pc}
    3fa6:	46c0      	nop			; (mov r8, r8)
    3fa8:	200030fa 	.word	0x200030fa
    3fac:	200030f4 	.word	0x200030f4

00003fb0 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    3fb0:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    3fb2:	4c19      	ldr	r4, [pc, #100]	; (4018 <LCD_Fast_Fill+0x68>)
    3fb4:	4b19      	ldr	r3, [pc, #100]	; (401c <LCD_Fast_Fill+0x6c>)
    3fb6:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    3fb8:	0200      	lsls	r0, r0, #8
    3fba:	4301      	orrs	r1, r0
    3fbc:	4b18      	ldr	r3, [pc, #96]	; (4020 <LCD_Fast_Fill+0x70>)
    3fbe:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    3fc0:	17d3      	asrs	r3, r2, #31
    3fc2:	260f      	movs	r6, #15
    3fc4:	401e      	ands	r6, r3
    3fc6:	18b6      	adds	r6, r6, r2
    3fc8:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    3fca:	2500      	movs	r5, #0
    3fcc:	2e00      	cmp	r6, #0
    3fce:	dd0c      	ble.n	3fea <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    3fd0:	4c12      	ldr	r4, [pc, #72]	; (401c <LCD_Fast_Fill+0x6c>)
    3fd2:	2180      	movs	r1, #128	; 0x80
    3fd4:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    3fd6:	4812      	ldr	r0, [pc, #72]	; (4020 <LCD_Fast_Fill+0x70>)
{
    3fd8:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    3fda:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    3fdc:	6001      	str	r1, [r0, #0]
    3fde:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d1fa      	bne.n	3fda <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    3fe4:	3501      	adds	r5, #1
    3fe6:	42ae      	cmp	r6, r5
    3fe8:	d1f6      	bne.n	3fd8 <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    3fea:	0713      	lsls	r3, r2, #28
    3fec:	d013      	beq.n	4016 <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    3fee:	17d3      	asrs	r3, r2, #31
    3ff0:	0f1b      	lsrs	r3, r3, #28
    3ff2:	18d2      	adds	r2, r2, r3
    3ff4:	210f      	movs	r1, #15
    3ff6:	4011      	ands	r1, r2
    3ff8:	1ac9      	subs	r1, r1, r3
    3ffa:	1c4b      	adds	r3, r1, #1
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	dd0a      	ble.n	4016 <LCD_Fast_Fill+0x66>
    4000:	0019      	movs	r1, r3
    4002:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    4004:	4c05      	ldr	r4, [pc, #20]	; (401c <LCD_Fast_Fill+0x6c>)
    4006:	2280      	movs	r2, #128	; 0x80
    4008:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    400a:	4805      	ldr	r0, [pc, #20]	; (4020 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    400c:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    400e:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    4010:	3301      	adds	r3, #1
    4012:	4299      	cmp	r1, r3
    4014:	d1fa      	bne.n	400c <LCD_Fast_Fill+0x5c>
	}
}
    4016:	bd70      	pop	{r4, r5, r6, pc}
    4018:	0000ffff 	.word	0x0000ffff
    401c:	41004494 	.word	0x41004494
    4020:	41004498 	.word	0x41004498

00004024 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    4024:	b5f0      	push	{r4, r5, r6, r7, lr}
    4026:	b083      	sub	sp, #12
    4028:	0007      	movs	r7, r0
    402a:	9100      	str	r1, [sp, #0]
    402c:	0016      	movs	r6, r2
    402e:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    4030:	2100      	movs	r1, #0
    4032:	202a      	movs	r0, #42	; 0x2a
    4034:	4c17      	ldr	r4, [pc, #92]	; (4094 <setXY+0x70>)
    4036:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    4038:	0a38      	lsrs	r0, r7, #8
    403a:	4d17      	ldr	r5, [pc, #92]	; (4098 <setXY+0x74>)
    403c:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    403e:	2101      	movs	r1, #1
    4040:	202a      	movs	r0, #42	; 0x2a
    4042:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    4044:	b2f8      	uxtb	r0, r7
    4046:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    4048:	2102      	movs	r1, #2
    404a:	202a      	movs	r0, #42	; 0x2a
    404c:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    404e:	0a30      	lsrs	r0, r6, #8
    4050:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    4052:	2103      	movs	r1, #3
    4054:	202a      	movs	r0, #42	; 0x2a
    4056:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    4058:	b2f0      	uxtb	r0, r6
    405a:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    405c:	2100      	movs	r1, #0
    405e:	202b      	movs	r0, #43	; 0x2b
    4060:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    4062:	9e00      	ldr	r6, [sp, #0]
    4064:	0a30      	lsrs	r0, r6, #8
    4066:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    4068:	2101      	movs	r1, #1
    406a:	202b      	movs	r0, #43	; 0x2b
    406c:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    406e:	b2f0      	uxtb	r0, r6
    4070:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    4072:	2102      	movs	r1, #2
    4074:	202b      	movs	r0, #43	; 0x2b
    4076:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    4078:	9e01      	ldr	r6, [sp, #4]
    407a:	0a30      	lsrs	r0, r6, #8
    407c:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    407e:	2103      	movs	r1, #3
    4080:	202b      	movs	r0, #43	; 0x2b
    4082:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    4084:	b2f0      	uxtb	r0, r6
    4086:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    4088:	2100      	movs	r1, #0
    408a:	202c      	movs	r0, #44	; 0x2c
    408c:	47a0      	blx	r4
}
    408e:	b003      	add	sp, #12
    4090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4092:	46c0      	nop			; (mov r8, r8)
    4094:	000041c9 	.word	0x000041c9
    4098:	000041f9 	.word	0x000041f9

0000409c <fillRect>:
{
    409c:	b5f0      	push	{r4, r5, r6, r7, lr}
    409e:	46ce      	mov	lr, r9
    40a0:	4647      	mov	r7, r8
    40a2:	b580      	push	{r7, lr}
    40a4:	b083      	sub	sp, #12
    40a6:	0006      	movs	r6, r0
    40a8:	4689      	mov	r9, r1
    40aa:	0014      	movs	r4, r2
    40ac:	001d      	movs	r5, r3
	if (x1>x2)
    40ae:	4290      	cmp	r0, r2
    40b0:	dd01      	ble.n	40b6 <fillRect+0x1a>
		x1 = x2;
    40b2:	0016      	movs	r6, r2
		x2 = temp;
    40b4:	0004      	movs	r4, r0
	if (y1>y2)
    40b6:	45a9      	cmp	r9, r5
    40b8:	dd02      	ble.n	40c0 <fillRect+0x24>
    40ba:	0033      	movs	r3, r6
		x1 = x2;
    40bc:	0026      	movs	r6, r4
		x2 = temp;
    40be:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    40c0:	2380      	movs	r3, #128	; 0x80
    40c2:	03db      	lsls	r3, r3, #15
    40c4:	4698      	mov	r8, r3
    40c6:	4b11      	ldr	r3, [pc, #68]	; (410c <fillRect+0x70>)
    40c8:	4642      	mov	r2, r8
    40ca:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    40cc:	b2ab      	uxth	r3, r5
    40ce:	b2a2      	uxth	r2, r4
    40d0:	4649      	mov	r1, r9
    40d2:	4668      	mov	r0, sp
    40d4:	80c1      	strh	r1, [r0, #6]
    40d6:	88c1      	ldrh	r1, [r0, #6]
    40d8:	b2b0      	uxth	r0, r6
    40da:	4f0d      	ldr	r7, [pc, #52]	; (4110 <fillRect+0x74>)
    40dc:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    40de:	4f0d      	ldr	r7, [pc, #52]	; (4114 <fillRect+0x78>)
    40e0:	2380      	movs	r3, #128	; 0x80
    40e2:	041b      	lsls	r3, r3, #16
    40e4:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    40e6:	1ba4      	subs	r4, r4, r6
    40e8:	3401      	adds	r4, #1
    40ea:	464b      	mov	r3, r9
    40ec:	1aea      	subs	r2, r5, r3
    40ee:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    40f0:	4362      	muls	r2, r4
    40f2:	4b09      	ldr	r3, [pc, #36]	; (4118 <fillRect+0x7c>)
    40f4:	8819      	ldrh	r1, [r3, #0]
    40f6:	4b09      	ldr	r3, [pc, #36]	; (411c <fillRect+0x80>)
    40f8:	8818      	ldrh	r0, [r3, #0]
    40fa:	4b09      	ldr	r3, [pc, #36]	; (4120 <fillRect+0x84>)
    40fc:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    40fe:	4643      	mov	r3, r8
    4100:	603b      	str	r3, [r7, #0]
}
    4102:	b003      	add	sp, #12
    4104:	bc0c      	pop	{r2, r3}
    4106:	4690      	mov	r8, r2
    4108:	4699      	mov	r9, r3
    410a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    410c:	41004494 	.word	0x41004494
    4110:	00004025 	.word	0x00004025
    4114:	41004498 	.word	0x41004498
    4118:	200030f8 	.word	0x200030f8
    411c:	200030f6 	.word	0x200030f6
    4120:	00003fb1 	.word	0x00003fb1

00004124 <clrXY>:
{
    4124:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    4126:	4b04      	ldr	r3, [pc, #16]	; (4138 <clrXY+0x14>)
    4128:	881b      	ldrh	r3, [r3, #0]
    412a:	4a04      	ldr	r2, [pc, #16]	; (413c <clrXY+0x18>)
    412c:	8812      	ldrh	r2, [r2, #0]
    412e:	2100      	movs	r1, #0
    4130:	2000      	movs	r0, #0
    4132:	4c03      	ldr	r4, [pc, #12]	; (4140 <clrXY+0x1c>)
    4134:	47a0      	blx	r4
}
    4136:	bd10      	pop	{r4, pc}
    4138:	2000016e 	.word	0x2000016e
    413c:	2000016c 	.word	0x2000016c
    4140:	00004025 	.word	0x00004025

00004144 <clrScr>:
{
    4144:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    4146:	2280      	movs	r2, #128	; 0x80
    4148:	03d2      	lsls	r2, r2, #15
    414a:	4b02      	ldr	r3, [pc, #8]	; (4154 <clrScr+0x10>)
    414c:	601a      	str	r2, [r3, #0]
	clrXY();
    414e:	4b02      	ldr	r3, [pc, #8]	; (4158 <clrScr+0x14>)
    4150:	4798      	blx	r3
}
    4152:	bd10      	pop	{r4, pc}
    4154:	41004494 	.word	0x41004494
    4158:	00004125 	.word	0x00004125

0000415c <setPixel>:

void setPixel(uint16_t color)
{
    415c:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	//LCD_Write_DATA16((color<<8),(color&0xFF)); 
	LCD_Write_DATA16((color>>8),(color&0xFF));
    415e:	b2c1      	uxtb	r1, r0
    4160:	0a00      	lsrs	r0, r0, #8
    4162:	4b01      	ldr	r3, [pc, #4]	; (4168 <setPixel+0xc>)
    4164:	4798      	blx	r3
}
    4166:	bd10      	pop	{r4, pc}
    4168:	000041e1 	.word	0x000041e1

0000416c <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    416c:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    416e:	2300      	movs	r3, #0
    4170:	4a06      	ldr	r2, [pc, #24]	; (418c <clearScreen+0x20>)
    4172:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    4174:	4a06      	ldr	r2, [pc, #24]	; (4190 <clearScreen+0x24>)
    4176:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    4178:	4b06      	ldr	r3, [pc, #24]	; (4194 <clearScreen+0x28>)
    417a:	881b      	ldrh	r3, [r3, #0]
    417c:	4a06      	ldr	r2, [pc, #24]	; (4198 <clearScreen+0x2c>)
    417e:	8812      	ldrh	r2, [r2, #0]
    4180:	2100      	movs	r1, #0
    4182:	2000      	movs	r0, #0
    4184:	4c05      	ldr	r4, [pc, #20]	; (419c <clearScreen+0x30>)
    4186:	47a0      	blx	r4
}
    4188:	bd10      	pop	{r4, pc}
    418a:	46c0      	nop			; (mov r8, r8)
    418c:	200030f6 	.word	0x200030f6
    4190:	200030f8 	.word	0x200030f8
    4194:	2000016c 	.word	0x2000016c
    4198:	2000016e 	.word	0x2000016e
    419c:	0000409d 	.word	0x0000409d

000041a0 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    41a0:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    41a2:	4c06      	ldr	r4, [pc, #24]	; (41bc <LCD_Write_Bus+0x1c>)
    41a4:	4b06      	ldr	r3, [pc, #24]	; (41c0 <LCD_Write_Bus+0x20>)
    41a6:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    41a8:	0200      	lsls	r0, r0, #8
    41aa:	4301      	orrs	r1, r0
    41ac:	4b05      	ldr	r3, [pc, #20]	; (41c4 <LCD_Write_Bus+0x24>)
    41ae:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    41b0:	2280      	movs	r2, #128	; 0x80
    41b2:	0292      	lsls	r2, r2, #10
    41b4:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    41b6:	601a      	str	r2, [r3, #0]
}
    41b8:	bd10      	pop	{r4, pc}
    41ba:	46c0      	nop			; (mov r8, r8)
    41bc:	41004494 	.word	0x41004494
    41c0:	0000ffff 	.word	0x0000ffff
    41c4:	41004498 	.word	0x41004498

000041c8 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    41c8:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    41ca:	2280      	movs	r2, #128	; 0x80
    41cc:	0412      	lsls	r2, r2, #16
    41ce:	4b02      	ldr	r3, [pc, #8]	; (41d8 <LCD_Write_COM16+0x10>)
    41d0:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    41d2:	4b02      	ldr	r3, [pc, #8]	; (41dc <LCD_Write_COM16+0x14>)
    41d4:	4798      	blx	r3
}
    41d6:	bd10      	pop	{r4, pc}
    41d8:	41004494 	.word	0x41004494
    41dc:	000041a1 	.word	0x000041a1

000041e0 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    41e0:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    41e2:	2280      	movs	r2, #128	; 0x80
    41e4:	0412      	lsls	r2, r2, #16
    41e6:	4b02      	ldr	r3, [pc, #8]	; (41f0 <LCD_Write_DATA16+0x10>)
    41e8:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    41ea:	4b02      	ldr	r3, [pc, #8]	; (41f4 <LCD_Write_DATA16+0x14>)
    41ec:	4798      	blx	r3
}
    41ee:	bd10      	pop	{r4, pc}
    41f0:	41004498 	.word	0x41004498
    41f4:	000041a1 	.word	0x000041a1

000041f8 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    41f8:	b510      	push	{r4, lr}
    41fa:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    41fc:	2280      	movs	r2, #128	; 0x80
    41fe:	0412      	lsls	r2, r2, #16
    4200:	4b02      	ldr	r3, [pc, #8]	; (420c <LCD_Write_DATA8+0x14>)
    4202:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    4204:	2000      	movs	r0, #0
    4206:	4b02      	ldr	r3, [pc, #8]	; (4210 <LCD_Write_DATA8+0x18>)
    4208:	4798      	blx	r3
}
    420a:	bd10      	pop	{r4, pc}
    420c:	41004498 	.word	0x41004498
    4210:	000041a1 	.word	0x000041a1

00004214 <InitLCD>:
{
    4214:	b5f0      	push	{r4, r5, r6, r7, lr}
    4216:	46c6      	mov	lr, r8
    4218:	b500      	push	{lr}
    421a:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    421c:	4b80      	ldr	r3, [pc, #512]	; (4420 <InitLCD+0x20c>)
    421e:	4f81      	ldr	r7, [pc, #516]	; (4424 <InitLCD+0x210>)
    4220:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    4222:	2580      	movs	r5, #128	; 0x80
    4224:	05ed      	lsls	r5, r5, #23
    4226:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    4228:	2680      	movs	r6, #128	; 0x80
    422a:	03f6      	lsls	r6, r6, #15
    422c:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    422e:	2080      	movs	r0, #128	; 0x80
    4230:	0280      	lsls	r0, r0, #10
    4232:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    4234:	2180      	movs	r1, #128	; 0x80
    4236:	0409      	lsls	r1, r1, #16
    4238:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    423a:	2280      	movs	r2, #128	; 0x80
    423c:	0252      	lsls	r2, r2, #9
    423e:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    4240:	4c79      	ldr	r4, [pc, #484]	; (4428 <InitLCD+0x214>)
    4242:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    4244:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    4246:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    4248:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    424a:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    424c:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    424e:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    4250:	4f76      	ldr	r7, [pc, #472]	; (442c <InitLCD+0x218>)
    4252:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    4254:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    4256:	2005      	movs	r0, #5
    4258:	4b75      	ldr	r3, [pc, #468]	; (4430 <InitLCD+0x21c>)
    425a:	4698      	mov	r8, r3
    425c:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    425e:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    4260:	2005      	movs	r0, #5
    4262:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    4264:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    4266:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    4268:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    426a:	4b6f      	ldr	r3, [pc, #444]	; (4428 <InitLCD+0x214>)
    426c:	4698      	mov	r8, r3
    426e:	2580      	movs	r5, #128	; 0x80
    4270:	042d      	lsls	r5, r5, #16
    4272:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    4274:	4e6f      	ldr	r6, [pc, #444]	; (4434 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    4276:	4643      	mov	r3, r8
    4278:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    427a:	5da1      	ldrb	r1, [r4, r6]
    427c:	4b6e      	ldr	r3, [pc, #440]	; (4438 <InitLCD+0x224>)
    427e:	5ce0      	ldrb	r0, [r4, r3]
    4280:	4b6e      	ldr	r3, [pc, #440]	; (443c <InitLCD+0x228>)
    4282:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    4284:	4b69      	ldr	r3, [pc, #420]	; (442c <InitLCD+0x218>)
    4286:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    4288:	4b6d      	ldr	r3, [pc, #436]	; (4440 <InitLCD+0x22c>)
    428a:	5ce0      	ldrb	r0, [r4, r3]
    428c:	4b6d      	ldr	r3, [pc, #436]	; (4444 <InitLCD+0x230>)
    428e:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    4290:	3401      	adds	r4, #1
    4292:	2c46      	cmp	r4, #70	; 0x46
    4294:	d1ef      	bne.n	4276 <InitLCD+0x62>
    4296:	23d1      	movs	r3, #209	; 0xd1
    4298:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    429a:	4d68      	ldr	r5, [pc, #416]	; (443c <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    429c:	4f69      	ldr	r7, [pc, #420]	; (4444 <InitLCD+0x230>)
    429e:	4c6a      	ldr	r4, [pc, #424]	; (4448 <InitLCD+0x234>)
    42a0:	0026      	movs	r6, r4
    42a2:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    42a4:	2100      	movs	r1, #0
    42a6:	9801      	ldr	r0, [sp, #4]
    42a8:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    42aa:	7820      	ldrb	r0, [r4, #0]
    42ac:	47b8      	blx	r7
    42ae:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    42b0:	42a6      	cmp	r6, r4
    42b2:	d1f7      	bne.n	42a4 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    42b4:	9b01      	ldr	r3, [sp, #4]
    42b6:	3301      	adds	r3, #1
    42b8:	b2db      	uxtb	r3, r3
    42ba:	9301      	str	r3, [sp, #4]
    42bc:	2bd6      	cmp	r3, #214	; 0xd6
    42be:	d1ee      	bne.n	429e <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    42c0:	2100      	movs	r1, #0
    42c2:	20f0      	movs	r0, #240	; 0xf0
    42c4:	4c5d      	ldr	r4, [pc, #372]	; (443c <InitLCD+0x228>)
    42c6:	47a0      	blx	r4
    42c8:	2055      	movs	r0, #85	; 0x55
    42ca:	4d5e      	ldr	r5, [pc, #376]	; (4444 <InitLCD+0x230>)
    42cc:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    42ce:	2101      	movs	r1, #1
    42d0:	20f0      	movs	r0, #240	; 0xf0
    42d2:	47a0      	blx	r4
    42d4:	20aa      	movs	r0, #170	; 0xaa
    42d6:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    42d8:	2102      	movs	r1, #2
    42da:	20f0      	movs	r0, #240	; 0xf0
    42dc:	47a0      	blx	r4
    42de:	2052      	movs	r0, #82	; 0x52
    42e0:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    42e2:	2103      	movs	r1, #3
    42e4:	20f0      	movs	r0, #240	; 0xf0
    42e6:	47a0      	blx	r4
    42e8:	2008      	movs	r0, #8
    42ea:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    42ec:	2104      	movs	r1, #4
    42ee:	20f0      	movs	r0, #240	; 0xf0
    42f0:	47a0      	blx	r4
    42f2:	2000      	movs	r0, #0
    42f4:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    42f6:	2100      	movs	r1, #0
    42f8:	20b1      	movs	r0, #177	; 0xb1
    42fa:	47a0      	blx	r4
    42fc:	20cc      	movs	r0, #204	; 0xcc
    42fe:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    4300:	2101      	movs	r1, #1
    4302:	20b1      	movs	r0, #177	; 0xb1
    4304:	47a0      	blx	r4
    4306:	2000      	movs	r0, #0
    4308:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    430a:	2100      	movs	r1, #0
    430c:	20b5      	movs	r0, #181	; 0xb5
    430e:	47a0      	blx	r4
    4310:	2050      	movs	r0, #80	; 0x50
    4312:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    4314:	2100      	movs	r1, #0
    4316:	20b6      	movs	r0, #182	; 0xb6
    4318:	47a0      	blx	r4
    431a:	2005      	movs	r0, #5
    431c:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    431e:	2100      	movs	r1, #0
    4320:	20b7      	movs	r0, #183	; 0xb7
    4322:	47a0      	blx	r4
    4324:	2070      	movs	r0, #112	; 0x70
    4326:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    4328:	2101      	movs	r1, #1
    432a:	20b7      	movs	r0, #183	; 0xb7
    432c:	47a0      	blx	r4
    432e:	2070      	movs	r0, #112	; 0x70
    4330:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    4332:	2100      	movs	r1, #0
    4334:	20b8      	movs	r0, #184	; 0xb8
    4336:	47a0      	blx	r4
    4338:	2001      	movs	r0, #1
    433a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    433c:	2101      	movs	r1, #1
    433e:	20b8      	movs	r0, #184	; 0xb8
    4340:	47a0      	blx	r4
    4342:	2003      	movs	r0, #3
    4344:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    4346:	2102      	movs	r1, #2
    4348:	20b8      	movs	r0, #184	; 0xb8
    434a:	47a0      	blx	r4
    434c:	2003      	movs	r0, #3
    434e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    4350:	2103      	movs	r1, #3
    4352:	20b8      	movs	r0, #184	; 0xb8
    4354:	47a0      	blx	r4
    4356:	2003      	movs	r0, #3
    4358:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    435a:	2100      	movs	r1, #0
    435c:	20bc      	movs	r0, #188	; 0xbc
    435e:	47a0      	blx	r4
    4360:	2002      	movs	r0, #2
    4362:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    4364:	2101      	movs	r1, #1
    4366:	20bc      	movs	r0, #188	; 0xbc
    4368:	47a0      	blx	r4
    436a:	2000      	movs	r0, #0
    436c:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    436e:	2102      	movs	r1, #2
    4370:	20bc      	movs	r0, #188	; 0xbc
    4372:	47a0      	blx	r4
    4374:	2000      	movs	r0, #0
    4376:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    4378:	2100      	movs	r1, #0
    437a:	20c9      	movs	r0, #201	; 0xc9
    437c:	47a0      	blx	r4
    437e:	20d0      	movs	r0, #208	; 0xd0
    4380:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    4382:	2101      	movs	r1, #1
    4384:	20c9      	movs	r0, #201	; 0xc9
    4386:	47a0      	blx	r4
    4388:	2002      	movs	r0, #2
    438a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    438c:	2102      	movs	r1, #2
    438e:	20c9      	movs	r0, #201	; 0xc9
    4390:	47a0      	blx	r4
    4392:	2050      	movs	r0, #80	; 0x50
    4394:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    4396:	2103      	movs	r1, #3
    4398:	20c9      	movs	r0, #201	; 0xc9
    439a:	47a0      	blx	r4
    439c:	2050      	movs	r0, #80	; 0x50
    439e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    43a0:	2104      	movs	r1, #4
    43a2:	20c9      	movs	r0, #201	; 0xc9
    43a4:	47a0      	blx	r4
    43a6:	2050      	movs	r0, #80	; 0x50
    43a8:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    43aa:	2100      	movs	r1, #0
    43ac:	2035      	movs	r0, #53	; 0x35
    43ae:	47a0      	blx	r4
    43b0:	2000      	movs	r0, #0
    43b2:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    43b4:	2100      	movs	r1, #0
    43b6:	203a      	movs	r0, #58	; 0x3a
    43b8:	47a0      	blx	r4
    43ba:	2055      	movs	r0, #85	; 0x55
    43bc:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    43be:	2100      	movs	r1, #0
    43c0:	2036      	movs	r0, #54	; 0x36
    43c2:	47a0      	blx	r4
    43c4:	20e2      	movs	r0, #226	; 0xe2
    43c6:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    43c8:	2100      	movs	r1, #0
    43ca:	2011      	movs	r0, #17
    43cc:	47a0      	blx	r4
  	delay_ms(100);
    43ce:	2064      	movs	r0, #100	; 0x64
    43d0:	4e17      	ldr	r6, [pc, #92]	; (4430 <InitLCD+0x21c>)
    43d2:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    43d4:	2100      	movs	r1, #0
    43d6:	2029      	movs	r0, #41	; 0x29
    43d8:	47a0      	blx	r4
   	delay_ms(100);
    43da:	2064      	movs	r0, #100	; 0x64
    43dc:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    43de:	2100      	movs	r1, #0
    43e0:	2051      	movs	r0, #81	; 0x51
    43e2:	47a0      	blx	r4
    43e4:	20ff      	movs	r0, #255	; 0xff
    43e6:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    43e8:	2280      	movs	r2, #128	; 0x80
    43ea:	03d2      	lsls	r2, r2, #15
    43ec:	4b0f      	ldr	r3, [pc, #60]	; (442c <InitLCD+0x218>)
    43ee:	601a      	str	r2, [r3, #0]
	clrScr();
    43f0:	4b16      	ldr	r3, [pc, #88]	; (444c <InitLCD+0x238>)
    43f2:	4798      	blx	r3
	setColorRGB(0,0,0);
    43f4:	2200      	movs	r2, #0
    43f6:	2100      	movs	r1, #0
    43f8:	2000      	movs	r0, #0
    43fa:	4b15      	ldr	r3, [pc, #84]	; (4450 <InitLCD+0x23c>)
    43fc:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    43fe:	2200      	movs	r2, #0
    4400:	2100      	movs	r1, #0
    4402:	2000      	movs	r0, #0
    4404:	4b13      	ldr	r3, [pc, #76]	; (4454 <InitLCD+0x240>)
    4406:	4798      	blx	r3
	fillRect(0,0,799,489);
    4408:	23ea      	movs	r3, #234	; 0xea
    440a:	33ff      	adds	r3, #255	; 0xff
    440c:	4a12      	ldr	r2, [pc, #72]	; (4458 <InitLCD+0x244>)
    440e:	2100      	movs	r1, #0
    4410:	2000      	movs	r0, #0
    4412:	4c12      	ldr	r4, [pc, #72]	; (445c <InitLCD+0x248>)
    4414:	47a0      	blx	r4
}
    4416:	b002      	add	sp, #8
    4418:	bc04      	pop	{r2}
    441a:	4690      	mov	r8, r2
    441c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    441e:	46c0      	nop			; (mov r8, r8)
    4420:	41004488 	.word	0x41004488
    4424:	0000ffff 	.word	0x0000ffff
    4428:	41004494 	.word	0x41004494
    442c:	41004498 	.word	0x41004498
    4430:	00001be5 	.word	0x00001be5
    4434:	00008294 	.word	0x00008294
    4438:	00008204 	.word	0x00008204
    443c:	000041c9 	.word	0x000041c9
    4440:	0000824c 	.word	0x0000824c
    4444:	000041f9 	.word	0x000041f9
    4448:	000081d0 	.word	0x000081d0
    444c:	00004145 	.word	0x00004145
    4450:	00003f61 	.word	0x00003f61
    4454:	00003f89 	.word	0x00003f89
    4458:	0000031f 	.word	0x0000031f
    445c:	0000409d 	.word	0x0000409d

00004460 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    4460:	b510      	push	{r4, lr}
	// Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    4462:	4c06      	ldr	r4, [pc, #24]	; (447c <usart_read_callback+0x1c>)
    4464:	2201      	movs	r2, #1
    4466:	0021      	movs	r1, r4
    4468:	4805      	ldr	r0, [pc, #20]	; (4480 <usart_read_callback+0x20>)
    446a:	4b06      	ldr	r3, [pc, #24]	; (4484 <usart_read_callback+0x24>)
    446c:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    446e:	7821      	ldrb	r1, [r4, #0]
    4470:	4b05      	ldr	r3, [pc, #20]	; (4488 <usart_read_callback+0x28>)
    4472:	6818      	ldr	r0, [r3, #0]
    4474:	4b05      	ldr	r3, [pc, #20]	; (448c <usart_read_callback+0x2c>)
    4476:	4798      	blx	r3
}
    4478:	bd10      	pop	{r4, pc}
    447a:	46c0      	nop			; (mov r8, r8)
    447c:	200030fc 	.word	0x200030fc
    4480:	200003bc 	.word	0x200003bc
    4484:	00002a85 	.word	0x00002a85
    4488:	20000390 	.word	0x20000390
    448c:	00000141 	.word	0x00000141

00004490 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4490:	b570      	push	{r4, r5, r6, lr}
    4492:	b082      	sub	sp, #8
    4494:	0005      	movs	r5, r0
    4496:	000e      	movs	r6, r1
	uint16_t temp = 0;
    4498:	2200      	movs	r2, #0
    449a:	466b      	mov	r3, sp
    449c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    449e:	4c06      	ldr	r4, [pc, #24]	; (44b8 <usart_serial_getchar+0x28>)
    44a0:	466b      	mov	r3, sp
    44a2:	1d99      	adds	r1, r3, #6
    44a4:	0028      	movs	r0, r5
    44a6:	47a0      	blx	r4
    44a8:	2800      	cmp	r0, #0
    44aa:	d1f9      	bne.n	44a0 <usart_serial_getchar+0x10>

	*c = temp;
    44ac:	466b      	mov	r3, sp
    44ae:	3306      	adds	r3, #6
    44b0:	881b      	ldrh	r3, [r3, #0]
    44b2:	7033      	strb	r3, [r6, #0]
}
    44b4:	b002      	add	sp, #8
    44b6:	bd70      	pop	{r4, r5, r6, pc}
    44b8:	000029b3 	.word	0x000029b3

000044bc <usart_serial_putchar>:
{
    44bc:	b570      	push	{r4, r5, r6, lr}
    44be:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    44c0:	b28c      	uxth	r4, r1
    44c2:	4e03      	ldr	r6, [pc, #12]	; (44d0 <usart_serial_putchar+0x14>)
    44c4:	0021      	movs	r1, r4
    44c6:	0028      	movs	r0, r5
    44c8:	47b0      	blx	r6
    44ca:	2800      	cmp	r0, #0
    44cc:	d1fa      	bne.n	44c4 <usart_serial_putchar+0x8>
}
    44ce:	bd70      	pop	{r4, r5, r6, pc}
    44d0:	0000298d 	.word	0x0000298d

000044d4 <SysTick_Handler>:
	ul_tickcount++;
    44d4:	4a02      	ldr	r2, [pc, #8]	; (44e0 <SysTick_Handler+0xc>)
    44d6:	8813      	ldrh	r3, [r2, #0]
    44d8:	3301      	adds	r3, #1
    44da:	8013      	strh	r3, [r2, #0]
}
    44dc:	4770      	bx	lr
    44de:	46c0      	nop			; (mov r8, r8)
    44e0:	200002f6 	.word	0x200002f6

000044e4 <conf_systick>:
{
    44e4:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    44e6:	4b0e      	ldr	r3, [pc, #56]	; (4520 <conf_systick+0x3c>)
    44e8:	6818      	ldr	r0, [r3, #0]
    44ea:	21fa      	movs	r1, #250	; 0xfa
    44ec:	0089      	lsls	r1, r1, #2
    44ee:	4b0d      	ldr	r3, [pc, #52]	; (4524 <conf_systick+0x40>)
    44f0:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    44f2:	3801      	subs	r0, #1
    44f4:	4b0c      	ldr	r3, [pc, #48]	; (4528 <conf_systick+0x44>)
    44f6:	4298      	cmp	r0, r3
    44f8:	d80d      	bhi.n	4516 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    44fa:	4a0c      	ldr	r2, [pc, #48]	; (452c <conf_systick+0x48>)
    44fc:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    44fe:	480c      	ldr	r0, [pc, #48]	; (4530 <conf_systick+0x4c>)
    4500:	6a03      	ldr	r3, [r0, #32]
    4502:	021b      	lsls	r3, r3, #8
    4504:	0a1b      	lsrs	r3, r3, #8
    4506:	21c0      	movs	r1, #192	; 0xc0
    4508:	0609      	lsls	r1, r1, #24
    450a:	430b      	orrs	r3, r1
    450c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    450e:	2300      	movs	r3, #0
    4510:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    4512:	3307      	adds	r3, #7
    4514:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4516:	2280      	movs	r2, #128	; 0x80
    4518:	0612      	lsls	r2, r2, #24
    451a:	4b06      	ldr	r3, [pc, #24]	; (4534 <conf_systick+0x50>)
    451c:	601a      	str	r2, [r3, #0]
}
    451e:	bd10      	pop	{r4, pc}
    4520:	20000024 	.word	0x20000024
    4524:	000048ad 	.word	0x000048ad
    4528:	00ffffff 	.word	0x00ffffff
    452c:	e000e010 	.word	0xe000e010
    4530:	e000ed00 	.word	0xe000ed00
    4534:	e000e100 	.word	0xe000e100

00004538 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    4538:	b570      	push	{r4, r5, r6, lr}
    453a:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    453c:	2380      	movs	r3, #128	; 0x80
    453e:	05db      	lsls	r3, r3, #23
    4540:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4542:	2300      	movs	r3, #0
    4544:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4546:	22ff      	movs	r2, #255	; 0xff
    4548:	4669      	mov	r1, sp
    454a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    454c:	2200      	movs	r2, #0
    454e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4550:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    4552:	2196      	movs	r1, #150	; 0x96
    4554:	0189      	lsls	r1, r1, #6
    4556:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    4558:	2101      	movs	r1, #1
    455a:	2024      	movs	r0, #36	; 0x24
    455c:	466c      	mov	r4, sp
    455e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    4560:	3001      	adds	r0, #1
    4562:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    4564:	3125      	adds	r1, #37	; 0x25
    4566:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    4568:	3101      	adds	r1, #1
    456a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    456c:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    456e:	3105      	adds	r1, #5
    4570:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    4572:	3101      	adds	r1, #1
    4574:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4576:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4578:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    457a:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    457c:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    457e:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    4580:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    4582:	2313      	movs	r3, #19
    4584:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    4586:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    4588:	2380      	movs	r3, #128	; 0x80
    458a:	035b      	lsls	r3, r3, #13
    458c:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    458e:	4b1e      	ldr	r3, [pc, #120]	; (4608 <configure_usart+0xd0>)
    4590:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    4592:	4b1e      	ldr	r3, [pc, #120]	; (460c <configure_usart+0xd4>)
    4594:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    4596:	2301      	movs	r3, #1
    4598:	425b      	negs	r3, r3
    459a:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    459c:	930f      	str	r3, [sp, #60]	; 0x3c
	
	RTS on PAD2 and CTS on PAD3
	
	*/
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    459e:	4d1c      	ldr	r5, [pc, #112]	; (4610 <configure_usart+0xd8>)
    45a0:	4c1c      	ldr	r4, [pc, #112]	; (4614 <configure_usart+0xdc>)
    45a2:	466a      	mov	r2, sp
    45a4:	491c      	ldr	r1, [pc, #112]	; (4618 <configure_usart+0xe0>)
    45a6:	0028      	movs	r0, r5
    45a8:	47a0      	blx	r4
    45aa:	2800      	cmp	r0, #0
    45ac:	d1f9      	bne.n	45a2 <configure_usart+0x6a>
	stdio_base = (void *)module;
    45ae:	4c18      	ldr	r4, [pc, #96]	; (4610 <configure_usart+0xd8>)
    45b0:	4b1a      	ldr	r3, [pc, #104]	; (461c <configure_usart+0xe4>)
    45b2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    45b4:	4a1a      	ldr	r2, [pc, #104]	; (4620 <configure_usart+0xe8>)
    45b6:	4b1b      	ldr	r3, [pc, #108]	; (4624 <configure_usart+0xec>)
    45b8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    45ba:	4a1b      	ldr	r2, [pc, #108]	; (4628 <configure_usart+0xf0>)
    45bc:	4b1b      	ldr	r3, [pc, #108]	; (462c <configure_usart+0xf4>)
    45be:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    45c0:	466a      	mov	r2, sp
    45c2:	4915      	ldr	r1, [pc, #84]	; (4618 <configure_usart+0xe0>)
    45c4:	0020      	movs	r0, r4
    45c6:	4b13      	ldr	r3, [pc, #76]	; (4614 <configure_usart+0xdc>)
    45c8:	4798      	blx	r3
	setbuf(stdout, NULL);
    45ca:	4e19      	ldr	r6, [pc, #100]	; (4630 <configure_usart+0xf8>)
    45cc:	6833      	ldr	r3, [r6, #0]
    45ce:	6898      	ldr	r0, [r3, #8]
    45d0:	2100      	movs	r1, #0
    45d2:	4d18      	ldr	r5, [pc, #96]	; (4634 <configure_usart+0xfc>)
    45d4:	47a8      	blx	r5
	setbuf(stdin, NULL);
    45d6:	6833      	ldr	r3, [r6, #0]
    45d8:	6858      	ldr	r0, [r3, #4]
    45da:	2100      	movs	r1, #0
    45dc:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    45de:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    45e0:	0028      	movs	r0, r5
    45e2:	4b15      	ldr	r3, [pc, #84]	; (4638 <configure_usart+0x100>)
    45e4:	4798      	blx	r3
    45e6:	231f      	movs	r3, #31
    45e8:	4018      	ands	r0, r3
    45ea:	3b1e      	subs	r3, #30
    45ec:	4083      	lsls	r3, r0
    45ee:	4a13      	ldr	r2, [pc, #76]	; (463c <configure_usart+0x104>)
    45f0:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    45f2:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    45f4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    45f6:	2b00      	cmp	r3, #0
    45f8:	d1fc      	bne.n	45f4 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    45fa:	682b      	ldr	r3, [r5, #0]
    45fc:	2202      	movs	r2, #2
    45fe:	4313      	orrs	r3, r2
    4600:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    4602:	b010      	add	sp, #64	; 0x40
    4604:	bd70      	pop	{r4, r5, r6, pc}
    4606:	46c0      	nop			; (mov r8, r8)
    4608:	00080003 	.word	0x00080003
    460c:	00090003 	.word	0x00090003
    4610:	200003bc 	.word	0x200003bc
    4614:	00002651 	.word	0x00002651
    4618:	42001000 	.word	0x42001000
    461c:	200003b8 	.word	0x200003b8
    4620:	000044bd 	.word	0x000044bd
    4624:	200003b4 	.word	0x200003b4
    4628:	00004491 	.word	0x00004491
    462c:	200003b0 	.word	0x200003b0
    4630:	200001a8 	.word	0x200001a8
    4634:	00004f49 	.word	0x00004f49
    4638:	000025c1 	.word	0x000025c1
    463c:	e000e100 	.word	0xe000e100

00004640 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    4640:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    4642:	4c06      	ldr	r4, [pc, #24]	; (465c <configure_usart_callbacks+0x1c>)
    4644:	2201      	movs	r2, #1
    4646:	4906      	ldr	r1, [pc, #24]	; (4660 <configure_usart_callbacks+0x20>)
    4648:	0020      	movs	r0, r4
    464a:	4b06      	ldr	r3, [pc, #24]	; (4664 <configure_usart_callbacks+0x24>)
    464c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    464e:	2231      	movs	r2, #49	; 0x31
    4650:	5ca3      	ldrb	r3, [r4, r2]
    4652:	2102      	movs	r1, #2
    4654:	430b      	orrs	r3, r1
    4656:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    4658:	bd10      	pop	{r4, pc}
    465a:	46c0      	nop			; (mov r8, r8)
    465c:	200003bc 	.word	0x200003bc
    4660:	00004461 	.word	0x00004461
    4664:	00002a6d 	.word	0x00002a6d

00004668 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    4668:	b510      	push	{r4, lr}
    466a:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    466c:	4668      	mov	r0, sp
    466e:	4b16      	ldr	r3, [pc, #88]	; (46c8 <configure_adc+0x60>)
    4670:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    4672:	2301      	movs	r3, #1
    4674:	466a      	mov	r2, sp
    4676:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    4678:	2380      	movs	r3, #128	; 0x80
    467a:	009b      	lsls	r3, r3, #2
    467c:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    467e:	2300      	movs	r3, #0
    4680:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    4682:	3318      	adds	r3, #24
    4684:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    4686:	23c0      	movs	r3, #192	; 0xc0
    4688:	015b      	lsls	r3, r3, #5
    468a:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    468c:	4c0f      	ldr	r4, [pc, #60]	; (46cc <configure_adc+0x64>)
    468e:	4910      	ldr	r1, [pc, #64]	; (46d0 <configure_adc+0x68>)
    4690:	0020      	movs	r0, r4
    4692:	4b10      	ldr	r3, [pc, #64]	; (46d4 <configure_adc+0x6c>)
    4694:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4696:	6822      	ldr	r2, [r4, #0]
    4698:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    469a:	b25b      	sxtb	r3, r3
    469c:	2b00      	cmp	r3, #0
    469e:	dbfb      	blt.n	4698 <configure_adc+0x30>
    46a0:	2180      	movs	r1, #128	; 0x80
    46a2:	0409      	lsls	r1, r1, #16
    46a4:	4b0c      	ldr	r3, [pc, #48]	; (46d8 <configure_adc+0x70>)
    46a6:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    46a8:	230f      	movs	r3, #15
    46aa:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    46ac:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    46ae:	7813      	ldrb	r3, [r2, #0]
    46b0:	2102      	movs	r1, #2
    46b2:	430b      	orrs	r3, r1
    46b4:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    46b6:	4b05      	ldr	r3, [pc, #20]	; (46cc <configure_adc+0x64>)
    46b8:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    46ba:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    46bc:	b25b      	sxtb	r3, r3
    46be:	2b00      	cmp	r3, #0
    46c0:	dbfb      	blt.n	46ba <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    46c2:	b00c      	add	sp, #48	; 0x30
    46c4:	bd10      	pop	{r4, pc}
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	00001cb9 	.word	0x00001cb9
    46cc:	20003100 	.word	0x20003100
    46d0:	42004000 	.word	0x42004000
    46d4:	00001cfd 	.word	0x00001cfd
    46d8:	e000e100 	.word	0xe000e100

000046dc <setupBoard>:


void setupBoard(void)
{
    46dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    46de:	2000      	movs	r0, #0
    46e0:	4b31      	ldr	r3, [pc, #196]	; (47a8 <setupBoard+0xcc>)
    46e2:	4798      	blx	r3
    46e4:	b287      	uxth	r7, r0
	

	system_init();
    46e6:	4b31      	ldr	r3, [pc, #196]	; (47ac <setupBoard+0xd0>)
    46e8:	4798      	blx	r3
	
	configure_adc();
    46ea:	4b31      	ldr	r3, [pc, #196]	; (47b0 <setupBoard+0xd4>)
    46ec:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    46ee:	4b31      	ldr	r3, [pc, #196]	; (47b4 <setupBoard+0xd8>)
    46f0:	6819      	ldr	r1, [r3, #0]
    46f2:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    46f4:	b25b      	sxtb	r3, r3
    46f6:	2b00      	cmp	r3, #0
    46f8:	dbfb      	blt.n	46f2 <setupBoard+0x16>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    46fa:	7b0b      	ldrb	r3, [r1, #12]
    46fc:	2202      	movs	r2, #2
    46fe:	4313      	orrs	r3, r2
    4700:	730b      	strb	r3, [r1, #12]
    4702:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4704:	b25b      	sxtb	r3, r3
    4706:	2b00      	cmp	r3, #0
    4708:	dbfb      	blt.n	4702 <setupBoard+0x26>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    470a:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    470c:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    470e:	2502      	movs	r5, #2
    4710:	e001      	b.n	4716 <setupBoard+0x3a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4712:	4214      	tst	r4, r2
    4714:	d10a      	bne.n	472c <setupBoard+0x50>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    4716:	7e0b      	ldrb	r3, [r1, #24]
    4718:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    471a:	0022      	movs	r2, r4
    471c:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    471e:	421e      	tst	r6, r3
    4720:	d000      	beq.n	4724 <setupBoard+0x48>
		status_flags |= ADC_STATUS_WINDOW;
    4722:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4724:	421d      	tst	r5, r3
    4726:	d0f4      	beq.n	4712 <setupBoard+0x36>
		status_flags |= ADC_STATUS_OVERRUN;
    4728:	4332      	orrs	r2, r6
    472a:	e7f2      	b.n	4712 <setupBoard+0x36>
    472c:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    472e:	b25b      	sxtb	r3, r3
    4730:	2b00      	cmp	r3, #0
    4732:	dbfb      	blt.n	472c <setupBoard+0x50>
	*result = adc_module->RESULT.reg;
    4734:	8b48      	ldrh	r0, [r1, #26]
    4736:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    4738:	2301      	movs	r3, #1
    473a:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    473c:	7e0a      	ldrb	r2, [r1, #24]
    473e:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4740:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    4742:	0754      	lsls	r4, r2, #29
    4744:	d501      	bpl.n	474a <setupBoard+0x6e>
		status_flags |= ADC_STATUS_WINDOW;
    4746:	2402      	movs	r4, #2
    4748:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    474a:	0792      	lsls	r2, r2, #30
    474c:	d501      	bpl.n	4752 <setupBoard+0x76>
		status_flags |= ADC_STATUS_OVERRUN;
    474e:	2204      	movs	r2, #4
    4750:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    4752:	075b      	lsls	r3, r3, #29
    4754:	d501      	bpl.n	475a <setupBoard+0x7e>
	adc_module->INTFLAG.reg = int_flags;
    4756:	2302      	movs	r3, #2
    4758:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    475a:	4078      	eors	r0, r7
    475c:	4b16      	ldr	r3, [pc, #88]	; (47b8 <setupBoard+0xdc>)
    475e:	4798      	blx	r3
	
	delay_init();
    4760:	4b16      	ldr	r3, [pc, #88]	; (47bc <setupBoard+0xe0>)
    4762:	4798      	blx	r3
	
	conf_systick();
    4764:	4c16      	ldr	r4, [pc, #88]	; (47c0 <setupBoard+0xe4>)
    4766:	47a0      	blx	r4
	and PAD1 (PI_RX) on pin 47.
	
	Also, this gives us the ability to bridge UARTs. THIS IS COOL
	
	*/
	configure_usart();
    4768:	4b16      	ldr	r3, [pc, #88]	; (47c4 <setupBoard+0xe8>)
    476a:	4798      	blx	r3
	configure_usart_callbacks();
    476c:	4b16      	ldr	r3, [pc, #88]	; (47c8 <setupBoard+0xec>)
    476e:	4798      	blx	r3
	cpu_irq_enable();
    4770:	2201      	movs	r2, #1
    4772:	4b16      	ldr	r3, [pc, #88]	; (47cc <setupBoard+0xf0>)
    4774:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4776:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    477a:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    477c:	4914      	ldr	r1, [pc, #80]	; (47d0 <setupBoard+0xf4>)
    477e:	4815      	ldr	r0, [pc, #84]	; (47d4 <setupBoard+0xf8>)
    4780:	4b15      	ldr	r3, [pc, #84]	; (47d8 <setupBoard+0xfc>)
    4782:	4798      	blx	r3
	


	printf("\n\rSerial OK 9600 8N1\n\r");
    4784:	4815      	ldr	r0, [pc, #84]	; (47dc <setupBoard+0x100>)
    4786:	4b16      	ldr	r3, [pc, #88]	; (47e0 <setupBoard+0x104>)
    4788:	4798      	blx	r3

	
	InitLCD();
    478a:	4b16      	ldr	r3, [pc, #88]	; (47e4 <setupBoard+0x108>)
    478c:	4798      	blx	r3
	splashScreen();
    478e:	4b16      	ldr	r3, [pc, #88]	; (47e8 <setupBoard+0x10c>)
    4790:	4798      	blx	r3
			
	conf_systick();
    4792:	47a0      	blx	r4

	xCharPos=0;
    4794:	2300      	movs	r3, #0
    4796:	4a15      	ldr	r2, [pc, #84]	; (47ec <setupBoard+0x110>)
    4798:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    479a:	4a15      	ldr	r2, [pc, #84]	; (47f0 <setupBoard+0x114>)
    479c:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    479e:	20ff      	movs	r0, #255	; 0xff
    47a0:	4b14      	ldr	r3, [pc, #80]	; (47f4 <setupBoard+0x118>)
    47a2:	4798      	blx	r3
}
    47a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47a6:	46c0      	nop			; (mov r8, r8)
    47a8:	00003165 	.word	0x00003165
    47ac:	000033a9 	.word	0x000033a9
    47b0:	00004669 	.word	0x00004669
    47b4:	20003100 	.word	0x20003100
    47b8:	00004e51 	.word	0x00004e51
    47bc:	00001ba5 	.word	0x00001ba5
    47c0:	000044e5 	.word	0x000044e5
    47c4:	00004539 	.word	0x00004539
    47c8:	00004641 	.word	0x00004641
    47cc:	20000020 	.word	0x20000020
    47d0:	200030fc 	.word	0x200030fc
    47d4:	200003bc 	.word	0x200003bc
    47d8:	00002a85 	.word	0x00002a85
    47dc:	000082dc 	.word	0x000082dc
    47e0:	00004df5 	.word	0x00004df5
    47e4:	00004215 	.word	0x00004215
    47e8:	0000191d 	.word	0x0000191d
    47ec:	200002ec 	.word	0x200002ec
    47f0:	200002ee 	.word	0x200002ee
    47f4:	0000358d 	.word	0x0000358d

000047f8 <main>:
{
    47f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	setupBoard();
    47fa:	4b20      	ldr	r3, [pc, #128]	; (487c <main+0x84>)
    47fc:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    47fe:	200a      	movs	r0, #10
    4800:	4b1f      	ldr	r3, [pc, #124]	; (4880 <main+0x88>)
    4802:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    4804:	210a      	movs	r1, #10
    4806:	4b1f      	ldr	r3, [pc, #124]	; (4884 <main+0x8c>)
    4808:	4798      	blx	r3
    480a:	4b1f      	ldr	r3, [pc, #124]	; (4888 <main+0x90>)
    480c:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    480e:	4f1f      	ldr	r7, [pc, #124]	; (488c <main+0x94>)
    4810:	4e1f      	ldr	r6, [pc, #124]	; (4890 <main+0x98>)
    4812:	4d20      	ldr	r5, [pc, #128]	; (4894 <main+0x9c>)
    4814:	e015      	b.n	4842 <main+0x4a>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4816:	21c8      	movs	r1, #200	; 0xc8
    4818:	0020      	movs	r0, r4
    481a:	4b1d      	ldr	r3, [pc, #116]	; (4890 <main+0x98>)
    481c:	4798      	blx	r3
    481e:	b289      	uxth	r1, r1
    4820:	2900      	cmp	r1, #0
    4822:	d10e      	bne.n	4842 <main+0x4a>
    4824:	4b1c      	ldr	r3, [pc, #112]	; (4898 <main+0xa0>)
    4826:	781b      	ldrb	r3, [r3, #0]
    4828:	2b00      	cmp	r3, #0
    482a:	d10a      	bne.n	4842 <main+0x4a>
			funcLock = true;
    482c:	4c1a      	ldr	r4, [pc, #104]	; (4898 <main+0xa0>)
    482e:	2301      	movs	r3, #1
    4830:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    4832:	4b1a      	ldr	r3, [pc, #104]	; (489c <main+0xa4>)
    4834:	4798      	blx	r3
			printKeyboardBuffer();
    4836:	4b1a      	ldr	r3, [pc, #104]	; (48a0 <main+0xa8>)
    4838:	4798      	blx	r3
			parseRXBuffer();
    483a:	4b1a      	ldr	r3, [pc, #104]	; (48a4 <main+0xac>)
    483c:	4798      	blx	r3
			funcLock = false;
    483e:	2300      	movs	r3, #0
    4840:	7023      	strb	r3, [r4, #0]
		__WFI();
    4842:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/4) == 0) && (funcLock == false))
    4844:	883c      	ldrh	r4, [r7, #0]
    4846:	0029      	movs	r1, r5
    4848:	0020      	movs	r0, r4
    484a:	47b0      	blx	r6
    484c:	b289      	uxth	r1, r1
    484e:	2900      	cmp	r1, #0
    4850:	d1e1      	bne.n	4816 <main+0x1e>
    4852:	4b11      	ldr	r3, [pc, #68]	; (4898 <main+0xa0>)
    4854:	781b      	ldrb	r3, [r3, #0]
    4856:	2b00      	cmp	r3, #0
    4858:	d1f3      	bne.n	4842 <main+0x4a>
			funcLock = true;
    485a:	4c0f      	ldr	r4, [pc, #60]	; (4898 <main+0xa0>)
    485c:	3301      	adds	r3, #1
    485e:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    4860:	4b11      	ldr	r3, [pc, #68]	; (48a8 <main+0xb0>)
    4862:	4798      	blx	r3
			funcLock = false;
    4864:	2300      	movs	r3, #0
    4866:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4868:	4b08      	ldr	r3, [pc, #32]	; (488c <main+0x94>)
    486a:	8818      	ldrh	r0, [r3, #0]
    486c:	21c8      	movs	r1, #200	; 0xc8
    486e:	4b08      	ldr	r3, [pc, #32]	; (4890 <main+0x98>)
    4870:	4798      	blx	r3
    4872:	b289      	uxth	r1, r1
    4874:	2900      	cmp	r1, #0
    4876:	d0d9      	beq.n	482c <main+0x34>
    4878:	e7e3      	b.n	4842 <main+0x4a>
    487a:	46c0      	nop			; (mov r8, r8)
    487c:	000046dd 	.word	0x000046dd
    4880:	00004c6d 	.word	0x00004c6d
    4884:	00000115 	.word	0x00000115
    4888:	20000390 	.word	0x20000390
    488c:	200002f6 	.word	0x200002f6
    4890:	000049b9 	.word	0x000049b9
    4894:	00003fff 	.word	0x00003fff
    4898:	200002f4 	.word	0x200002f4
    489c:	00003d61 	.word	0x00003d61
    48a0:	000039c9 	.word	0x000039c9
    48a4:	00001b51 	.word	0x00001b51
    48a8:	000036d9 	.word	0x000036d9

000048ac <__udivsi3>:
    48ac:	2200      	movs	r2, #0
    48ae:	0843      	lsrs	r3, r0, #1
    48b0:	428b      	cmp	r3, r1
    48b2:	d374      	bcc.n	499e <__udivsi3+0xf2>
    48b4:	0903      	lsrs	r3, r0, #4
    48b6:	428b      	cmp	r3, r1
    48b8:	d35f      	bcc.n	497a <__udivsi3+0xce>
    48ba:	0a03      	lsrs	r3, r0, #8
    48bc:	428b      	cmp	r3, r1
    48be:	d344      	bcc.n	494a <__udivsi3+0x9e>
    48c0:	0b03      	lsrs	r3, r0, #12
    48c2:	428b      	cmp	r3, r1
    48c4:	d328      	bcc.n	4918 <__udivsi3+0x6c>
    48c6:	0c03      	lsrs	r3, r0, #16
    48c8:	428b      	cmp	r3, r1
    48ca:	d30d      	bcc.n	48e8 <__udivsi3+0x3c>
    48cc:	22ff      	movs	r2, #255	; 0xff
    48ce:	0209      	lsls	r1, r1, #8
    48d0:	ba12      	rev	r2, r2
    48d2:	0c03      	lsrs	r3, r0, #16
    48d4:	428b      	cmp	r3, r1
    48d6:	d302      	bcc.n	48de <__udivsi3+0x32>
    48d8:	1212      	asrs	r2, r2, #8
    48da:	0209      	lsls	r1, r1, #8
    48dc:	d065      	beq.n	49aa <__udivsi3+0xfe>
    48de:	0b03      	lsrs	r3, r0, #12
    48e0:	428b      	cmp	r3, r1
    48e2:	d319      	bcc.n	4918 <__udivsi3+0x6c>
    48e4:	e000      	b.n	48e8 <__udivsi3+0x3c>
    48e6:	0a09      	lsrs	r1, r1, #8
    48e8:	0bc3      	lsrs	r3, r0, #15
    48ea:	428b      	cmp	r3, r1
    48ec:	d301      	bcc.n	48f2 <__udivsi3+0x46>
    48ee:	03cb      	lsls	r3, r1, #15
    48f0:	1ac0      	subs	r0, r0, r3
    48f2:	4152      	adcs	r2, r2
    48f4:	0b83      	lsrs	r3, r0, #14
    48f6:	428b      	cmp	r3, r1
    48f8:	d301      	bcc.n	48fe <__udivsi3+0x52>
    48fa:	038b      	lsls	r3, r1, #14
    48fc:	1ac0      	subs	r0, r0, r3
    48fe:	4152      	adcs	r2, r2
    4900:	0b43      	lsrs	r3, r0, #13
    4902:	428b      	cmp	r3, r1
    4904:	d301      	bcc.n	490a <__udivsi3+0x5e>
    4906:	034b      	lsls	r3, r1, #13
    4908:	1ac0      	subs	r0, r0, r3
    490a:	4152      	adcs	r2, r2
    490c:	0b03      	lsrs	r3, r0, #12
    490e:	428b      	cmp	r3, r1
    4910:	d301      	bcc.n	4916 <__udivsi3+0x6a>
    4912:	030b      	lsls	r3, r1, #12
    4914:	1ac0      	subs	r0, r0, r3
    4916:	4152      	adcs	r2, r2
    4918:	0ac3      	lsrs	r3, r0, #11
    491a:	428b      	cmp	r3, r1
    491c:	d301      	bcc.n	4922 <__udivsi3+0x76>
    491e:	02cb      	lsls	r3, r1, #11
    4920:	1ac0      	subs	r0, r0, r3
    4922:	4152      	adcs	r2, r2
    4924:	0a83      	lsrs	r3, r0, #10
    4926:	428b      	cmp	r3, r1
    4928:	d301      	bcc.n	492e <__udivsi3+0x82>
    492a:	028b      	lsls	r3, r1, #10
    492c:	1ac0      	subs	r0, r0, r3
    492e:	4152      	adcs	r2, r2
    4930:	0a43      	lsrs	r3, r0, #9
    4932:	428b      	cmp	r3, r1
    4934:	d301      	bcc.n	493a <__udivsi3+0x8e>
    4936:	024b      	lsls	r3, r1, #9
    4938:	1ac0      	subs	r0, r0, r3
    493a:	4152      	adcs	r2, r2
    493c:	0a03      	lsrs	r3, r0, #8
    493e:	428b      	cmp	r3, r1
    4940:	d301      	bcc.n	4946 <__udivsi3+0x9a>
    4942:	020b      	lsls	r3, r1, #8
    4944:	1ac0      	subs	r0, r0, r3
    4946:	4152      	adcs	r2, r2
    4948:	d2cd      	bcs.n	48e6 <__udivsi3+0x3a>
    494a:	09c3      	lsrs	r3, r0, #7
    494c:	428b      	cmp	r3, r1
    494e:	d301      	bcc.n	4954 <__udivsi3+0xa8>
    4950:	01cb      	lsls	r3, r1, #7
    4952:	1ac0      	subs	r0, r0, r3
    4954:	4152      	adcs	r2, r2
    4956:	0983      	lsrs	r3, r0, #6
    4958:	428b      	cmp	r3, r1
    495a:	d301      	bcc.n	4960 <__udivsi3+0xb4>
    495c:	018b      	lsls	r3, r1, #6
    495e:	1ac0      	subs	r0, r0, r3
    4960:	4152      	adcs	r2, r2
    4962:	0943      	lsrs	r3, r0, #5
    4964:	428b      	cmp	r3, r1
    4966:	d301      	bcc.n	496c <__udivsi3+0xc0>
    4968:	014b      	lsls	r3, r1, #5
    496a:	1ac0      	subs	r0, r0, r3
    496c:	4152      	adcs	r2, r2
    496e:	0903      	lsrs	r3, r0, #4
    4970:	428b      	cmp	r3, r1
    4972:	d301      	bcc.n	4978 <__udivsi3+0xcc>
    4974:	010b      	lsls	r3, r1, #4
    4976:	1ac0      	subs	r0, r0, r3
    4978:	4152      	adcs	r2, r2
    497a:	08c3      	lsrs	r3, r0, #3
    497c:	428b      	cmp	r3, r1
    497e:	d301      	bcc.n	4984 <__udivsi3+0xd8>
    4980:	00cb      	lsls	r3, r1, #3
    4982:	1ac0      	subs	r0, r0, r3
    4984:	4152      	adcs	r2, r2
    4986:	0883      	lsrs	r3, r0, #2
    4988:	428b      	cmp	r3, r1
    498a:	d301      	bcc.n	4990 <__udivsi3+0xe4>
    498c:	008b      	lsls	r3, r1, #2
    498e:	1ac0      	subs	r0, r0, r3
    4990:	4152      	adcs	r2, r2
    4992:	0843      	lsrs	r3, r0, #1
    4994:	428b      	cmp	r3, r1
    4996:	d301      	bcc.n	499c <__udivsi3+0xf0>
    4998:	004b      	lsls	r3, r1, #1
    499a:	1ac0      	subs	r0, r0, r3
    499c:	4152      	adcs	r2, r2
    499e:	1a41      	subs	r1, r0, r1
    49a0:	d200      	bcs.n	49a4 <__udivsi3+0xf8>
    49a2:	4601      	mov	r1, r0
    49a4:	4152      	adcs	r2, r2
    49a6:	4610      	mov	r0, r2
    49a8:	4770      	bx	lr
    49aa:	e7ff      	b.n	49ac <__udivsi3+0x100>
    49ac:	b501      	push	{r0, lr}
    49ae:	2000      	movs	r0, #0
    49b0:	f000 f8f0 	bl	4b94 <__aeabi_idiv0>
    49b4:	bd02      	pop	{r1, pc}
    49b6:	46c0      	nop			; (mov r8, r8)

000049b8 <__aeabi_uidivmod>:
    49b8:	2900      	cmp	r1, #0
    49ba:	d0f7      	beq.n	49ac <__udivsi3+0x100>
    49bc:	e776      	b.n	48ac <__udivsi3>
    49be:	4770      	bx	lr

000049c0 <__divsi3>:
    49c0:	4603      	mov	r3, r0
    49c2:	430b      	orrs	r3, r1
    49c4:	d47f      	bmi.n	4ac6 <__divsi3+0x106>
    49c6:	2200      	movs	r2, #0
    49c8:	0843      	lsrs	r3, r0, #1
    49ca:	428b      	cmp	r3, r1
    49cc:	d374      	bcc.n	4ab8 <__divsi3+0xf8>
    49ce:	0903      	lsrs	r3, r0, #4
    49d0:	428b      	cmp	r3, r1
    49d2:	d35f      	bcc.n	4a94 <__divsi3+0xd4>
    49d4:	0a03      	lsrs	r3, r0, #8
    49d6:	428b      	cmp	r3, r1
    49d8:	d344      	bcc.n	4a64 <__divsi3+0xa4>
    49da:	0b03      	lsrs	r3, r0, #12
    49dc:	428b      	cmp	r3, r1
    49de:	d328      	bcc.n	4a32 <__divsi3+0x72>
    49e0:	0c03      	lsrs	r3, r0, #16
    49e2:	428b      	cmp	r3, r1
    49e4:	d30d      	bcc.n	4a02 <__divsi3+0x42>
    49e6:	22ff      	movs	r2, #255	; 0xff
    49e8:	0209      	lsls	r1, r1, #8
    49ea:	ba12      	rev	r2, r2
    49ec:	0c03      	lsrs	r3, r0, #16
    49ee:	428b      	cmp	r3, r1
    49f0:	d302      	bcc.n	49f8 <__divsi3+0x38>
    49f2:	1212      	asrs	r2, r2, #8
    49f4:	0209      	lsls	r1, r1, #8
    49f6:	d065      	beq.n	4ac4 <__divsi3+0x104>
    49f8:	0b03      	lsrs	r3, r0, #12
    49fa:	428b      	cmp	r3, r1
    49fc:	d319      	bcc.n	4a32 <__divsi3+0x72>
    49fe:	e000      	b.n	4a02 <__divsi3+0x42>
    4a00:	0a09      	lsrs	r1, r1, #8
    4a02:	0bc3      	lsrs	r3, r0, #15
    4a04:	428b      	cmp	r3, r1
    4a06:	d301      	bcc.n	4a0c <__divsi3+0x4c>
    4a08:	03cb      	lsls	r3, r1, #15
    4a0a:	1ac0      	subs	r0, r0, r3
    4a0c:	4152      	adcs	r2, r2
    4a0e:	0b83      	lsrs	r3, r0, #14
    4a10:	428b      	cmp	r3, r1
    4a12:	d301      	bcc.n	4a18 <__divsi3+0x58>
    4a14:	038b      	lsls	r3, r1, #14
    4a16:	1ac0      	subs	r0, r0, r3
    4a18:	4152      	adcs	r2, r2
    4a1a:	0b43      	lsrs	r3, r0, #13
    4a1c:	428b      	cmp	r3, r1
    4a1e:	d301      	bcc.n	4a24 <__divsi3+0x64>
    4a20:	034b      	lsls	r3, r1, #13
    4a22:	1ac0      	subs	r0, r0, r3
    4a24:	4152      	adcs	r2, r2
    4a26:	0b03      	lsrs	r3, r0, #12
    4a28:	428b      	cmp	r3, r1
    4a2a:	d301      	bcc.n	4a30 <__divsi3+0x70>
    4a2c:	030b      	lsls	r3, r1, #12
    4a2e:	1ac0      	subs	r0, r0, r3
    4a30:	4152      	adcs	r2, r2
    4a32:	0ac3      	lsrs	r3, r0, #11
    4a34:	428b      	cmp	r3, r1
    4a36:	d301      	bcc.n	4a3c <__divsi3+0x7c>
    4a38:	02cb      	lsls	r3, r1, #11
    4a3a:	1ac0      	subs	r0, r0, r3
    4a3c:	4152      	adcs	r2, r2
    4a3e:	0a83      	lsrs	r3, r0, #10
    4a40:	428b      	cmp	r3, r1
    4a42:	d301      	bcc.n	4a48 <__divsi3+0x88>
    4a44:	028b      	lsls	r3, r1, #10
    4a46:	1ac0      	subs	r0, r0, r3
    4a48:	4152      	adcs	r2, r2
    4a4a:	0a43      	lsrs	r3, r0, #9
    4a4c:	428b      	cmp	r3, r1
    4a4e:	d301      	bcc.n	4a54 <__divsi3+0x94>
    4a50:	024b      	lsls	r3, r1, #9
    4a52:	1ac0      	subs	r0, r0, r3
    4a54:	4152      	adcs	r2, r2
    4a56:	0a03      	lsrs	r3, r0, #8
    4a58:	428b      	cmp	r3, r1
    4a5a:	d301      	bcc.n	4a60 <__divsi3+0xa0>
    4a5c:	020b      	lsls	r3, r1, #8
    4a5e:	1ac0      	subs	r0, r0, r3
    4a60:	4152      	adcs	r2, r2
    4a62:	d2cd      	bcs.n	4a00 <__divsi3+0x40>
    4a64:	09c3      	lsrs	r3, r0, #7
    4a66:	428b      	cmp	r3, r1
    4a68:	d301      	bcc.n	4a6e <__divsi3+0xae>
    4a6a:	01cb      	lsls	r3, r1, #7
    4a6c:	1ac0      	subs	r0, r0, r3
    4a6e:	4152      	adcs	r2, r2
    4a70:	0983      	lsrs	r3, r0, #6
    4a72:	428b      	cmp	r3, r1
    4a74:	d301      	bcc.n	4a7a <__divsi3+0xba>
    4a76:	018b      	lsls	r3, r1, #6
    4a78:	1ac0      	subs	r0, r0, r3
    4a7a:	4152      	adcs	r2, r2
    4a7c:	0943      	lsrs	r3, r0, #5
    4a7e:	428b      	cmp	r3, r1
    4a80:	d301      	bcc.n	4a86 <__divsi3+0xc6>
    4a82:	014b      	lsls	r3, r1, #5
    4a84:	1ac0      	subs	r0, r0, r3
    4a86:	4152      	adcs	r2, r2
    4a88:	0903      	lsrs	r3, r0, #4
    4a8a:	428b      	cmp	r3, r1
    4a8c:	d301      	bcc.n	4a92 <__divsi3+0xd2>
    4a8e:	010b      	lsls	r3, r1, #4
    4a90:	1ac0      	subs	r0, r0, r3
    4a92:	4152      	adcs	r2, r2
    4a94:	08c3      	lsrs	r3, r0, #3
    4a96:	428b      	cmp	r3, r1
    4a98:	d301      	bcc.n	4a9e <__divsi3+0xde>
    4a9a:	00cb      	lsls	r3, r1, #3
    4a9c:	1ac0      	subs	r0, r0, r3
    4a9e:	4152      	adcs	r2, r2
    4aa0:	0883      	lsrs	r3, r0, #2
    4aa2:	428b      	cmp	r3, r1
    4aa4:	d301      	bcc.n	4aaa <__divsi3+0xea>
    4aa6:	008b      	lsls	r3, r1, #2
    4aa8:	1ac0      	subs	r0, r0, r3
    4aaa:	4152      	adcs	r2, r2
    4aac:	0843      	lsrs	r3, r0, #1
    4aae:	428b      	cmp	r3, r1
    4ab0:	d301      	bcc.n	4ab6 <__divsi3+0xf6>
    4ab2:	004b      	lsls	r3, r1, #1
    4ab4:	1ac0      	subs	r0, r0, r3
    4ab6:	4152      	adcs	r2, r2
    4ab8:	1a41      	subs	r1, r0, r1
    4aba:	d200      	bcs.n	4abe <__divsi3+0xfe>
    4abc:	4601      	mov	r1, r0
    4abe:	4152      	adcs	r2, r2
    4ac0:	4610      	mov	r0, r2
    4ac2:	4770      	bx	lr
    4ac4:	e05d      	b.n	4b82 <__divsi3+0x1c2>
    4ac6:	0fca      	lsrs	r2, r1, #31
    4ac8:	d000      	beq.n	4acc <__divsi3+0x10c>
    4aca:	4249      	negs	r1, r1
    4acc:	1003      	asrs	r3, r0, #32
    4ace:	d300      	bcc.n	4ad2 <__divsi3+0x112>
    4ad0:	4240      	negs	r0, r0
    4ad2:	4053      	eors	r3, r2
    4ad4:	2200      	movs	r2, #0
    4ad6:	469c      	mov	ip, r3
    4ad8:	0903      	lsrs	r3, r0, #4
    4ada:	428b      	cmp	r3, r1
    4adc:	d32d      	bcc.n	4b3a <__divsi3+0x17a>
    4ade:	0a03      	lsrs	r3, r0, #8
    4ae0:	428b      	cmp	r3, r1
    4ae2:	d312      	bcc.n	4b0a <__divsi3+0x14a>
    4ae4:	22fc      	movs	r2, #252	; 0xfc
    4ae6:	0189      	lsls	r1, r1, #6
    4ae8:	ba12      	rev	r2, r2
    4aea:	0a03      	lsrs	r3, r0, #8
    4aec:	428b      	cmp	r3, r1
    4aee:	d30c      	bcc.n	4b0a <__divsi3+0x14a>
    4af0:	0189      	lsls	r1, r1, #6
    4af2:	1192      	asrs	r2, r2, #6
    4af4:	428b      	cmp	r3, r1
    4af6:	d308      	bcc.n	4b0a <__divsi3+0x14a>
    4af8:	0189      	lsls	r1, r1, #6
    4afa:	1192      	asrs	r2, r2, #6
    4afc:	428b      	cmp	r3, r1
    4afe:	d304      	bcc.n	4b0a <__divsi3+0x14a>
    4b00:	0189      	lsls	r1, r1, #6
    4b02:	d03a      	beq.n	4b7a <__divsi3+0x1ba>
    4b04:	1192      	asrs	r2, r2, #6
    4b06:	e000      	b.n	4b0a <__divsi3+0x14a>
    4b08:	0989      	lsrs	r1, r1, #6
    4b0a:	09c3      	lsrs	r3, r0, #7
    4b0c:	428b      	cmp	r3, r1
    4b0e:	d301      	bcc.n	4b14 <__divsi3+0x154>
    4b10:	01cb      	lsls	r3, r1, #7
    4b12:	1ac0      	subs	r0, r0, r3
    4b14:	4152      	adcs	r2, r2
    4b16:	0983      	lsrs	r3, r0, #6
    4b18:	428b      	cmp	r3, r1
    4b1a:	d301      	bcc.n	4b20 <__divsi3+0x160>
    4b1c:	018b      	lsls	r3, r1, #6
    4b1e:	1ac0      	subs	r0, r0, r3
    4b20:	4152      	adcs	r2, r2
    4b22:	0943      	lsrs	r3, r0, #5
    4b24:	428b      	cmp	r3, r1
    4b26:	d301      	bcc.n	4b2c <__divsi3+0x16c>
    4b28:	014b      	lsls	r3, r1, #5
    4b2a:	1ac0      	subs	r0, r0, r3
    4b2c:	4152      	adcs	r2, r2
    4b2e:	0903      	lsrs	r3, r0, #4
    4b30:	428b      	cmp	r3, r1
    4b32:	d301      	bcc.n	4b38 <__divsi3+0x178>
    4b34:	010b      	lsls	r3, r1, #4
    4b36:	1ac0      	subs	r0, r0, r3
    4b38:	4152      	adcs	r2, r2
    4b3a:	08c3      	lsrs	r3, r0, #3
    4b3c:	428b      	cmp	r3, r1
    4b3e:	d301      	bcc.n	4b44 <__divsi3+0x184>
    4b40:	00cb      	lsls	r3, r1, #3
    4b42:	1ac0      	subs	r0, r0, r3
    4b44:	4152      	adcs	r2, r2
    4b46:	0883      	lsrs	r3, r0, #2
    4b48:	428b      	cmp	r3, r1
    4b4a:	d301      	bcc.n	4b50 <__divsi3+0x190>
    4b4c:	008b      	lsls	r3, r1, #2
    4b4e:	1ac0      	subs	r0, r0, r3
    4b50:	4152      	adcs	r2, r2
    4b52:	d2d9      	bcs.n	4b08 <__divsi3+0x148>
    4b54:	0843      	lsrs	r3, r0, #1
    4b56:	428b      	cmp	r3, r1
    4b58:	d301      	bcc.n	4b5e <__divsi3+0x19e>
    4b5a:	004b      	lsls	r3, r1, #1
    4b5c:	1ac0      	subs	r0, r0, r3
    4b5e:	4152      	adcs	r2, r2
    4b60:	1a41      	subs	r1, r0, r1
    4b62:	d200      	bcs.n	4b66 <__divsi3+0x1a6>
    4b64:	4601      	mov	r1, r0
    4b66:	4663      	mov	r3, ip
    4b68:	4152      	adcs	r2, r2
    4b6a:	105b      	asrs	r3, r3, #1
    4b6c:	4610      	mov	r0, r2
    4b6e:	d301      	bcc.n	4b74 <__divsi3+0x1b4>
    4b70:	4240      	negs	r0, r0
    4b72:	2b00      	cmp	r3, #0
    4b74:	d500      	bpl.n	4b78 <__divsi3+0x1b8>
    4b76:	4249      	negs	r1, r1
    4b78:	4770      	bx	lr
    4b7a:	4663      	mov	r3, ip
    4b7c:	105b      	asrs	r3, r3, #1
    4b7e:	d300      	bcc.n	4b82 <__divsi3+0x1c2>
    4b80:	4240      	negs	r0, r0
    4b82:	b501      	push	{r0, lr}
    4b84:	2000      	movs	r0, #0
    4b86:	f000 f805 	bl	4b94 <__aeabi_idiv0>
    4b8a:	bd02      	pop	{r1, pc}

00004b8c <__aeabi_idivmod>:
    4b8c:	2900      	cmp	r1, #0
    4b8e:	d0f8      	beq.n	4b82 <__divsi3+0x1c2>
    4b90:	e716      	b.n	49c0 <__divsi3>
    4b92:	4770      	bx	lr

00004b94 <__aeabi_idiv0>:
    4b94:	4770      	bx	lr
    4b96:	46c0      	nop			; (mov r8, r8)

00004b98 <__aeabi_lmul>:
    4b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b9a:	46ce      	mov	lr, r9
    4b9c:	4647      	mov	r7, r8
    4b9e:	0415      	lsls	r5, r2, #16
    4ba0:	0c2d      	lsrs	r5, r5, #16
    4ba2:	002e      	movs	r6, r5
    4ba4:	b580      	push	{r7, lr}
    4ba6:	0407      	lsls	r7, r0, #16
    4ba8:	0c14      	lsrs	r4, r2, #16
    4baa:	0c3f      	lsrs	r7, r7, #16
    4bac:	4699      	mov	r9, r3
    4bae:	0c03      	lsrs	r3, r0, #16
    4bb0:	437e      	muls	r6, r7
    4bb2:	435d      	muls	r5, r3
    4bb4:	4367      	muls	r7, r4
    4bb6:	4363      	muls	r3, r4
    4bb8:	197f      	adds	r7, r7, r5
    4bba:	0c34      	lsrs	r4, r6, #16
    4bbc:	19e4      	adds	r4, r4, r7
    4bbe:	469c      	mov	ip, r3
    4bc0:	42a5      	cmp	r5, r4
    4bc2:	d903      	bls.n	4bcc <__aeabi_lmul+0x34>
    4bc4:	2380      	movs	r3, #128	; 0x80
    4bc6:	025b      	lsls	r3, r3, #9
    4bc8:	4698      	mov	r8, r3
    4bca:	44c4      	add	ip, r8
    4bcc:	464b      	mov	r3, r9
    4bce:	4351      	muls	r1, r2
    4bd0:	4343      	muls	r3, r0
    4bd2:	0436      	lsls	r6, r6, #16
    4bd4:	0c36      	lsrs	r6, r6, #16
    4bd6:	0c25      	lsrs	r5, r4, #16
    4bd8:	0424      	lsls	r4, r4, #16
    4bda:	4465      	add	r5, ip
    4bdc:	19a4      	adds	r4, r4, r6
    4bde:	1859      	adds	r1, r3, r1
    4be0:	1949      	adds	r1, r1, r5
    4be2:	0020      	movs	r0, r4
    4be4:	bc0c      	pop	{r2, r3}
    4be6:	4690      	mov	r8, r2
    4be8:	4699      	mov	r9, r3
    4bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004bec <__libc_init_array>:
    4bec:	b570      	push	{r4, r5, r6, lr}
    4bee:	2600      	movs	r6, #0
    4bf0:	4d0c      	ldr	r5, [pc, #48]	; (4c24 <__libc_init_array+0x38>)
    4bf2:	4c0d      	ldr	r4, [pc, #52]	; (4c28 <__libc_init_array+0x3c>)
    4bf4:	1b64      	subs	r4, r4, r5
    4bf6:	10a4      	asrs	r4, r4, #2
    4bf8:	42a6      	cmp	r6, r4
    4bfa:	d109      	bne.n	4c10 <__libc_init_array+0x24>
    4bfc:	2600      	movs	r6, #0
    4bfe:	f003 fbd9 	bl	83b4 <_init>
    4c02:	4d0a      	ldr	r5, [pc, #40]	; (4c2c <__libc_init_array+0x40>)
    4c04:	4c0a      	ldr	r4, [pc, #40]	; (4c30 <__libc_init_array+0x44>)
    4c06:	1b64      	subs	r4, r4, r5
    4c08:	10a4      	asrs	r4, r4, #2
    4c0a:	42a6      	cmp	r6, r4
    4c0c:	d105      	bne.n	4c1a <__libc_init_array+0x2e>
    4c0e:	bd70      	pop	{r4, r5, r6, pc}
    4c10:	00b3      	lsls	r3, r6, #2
    4c12:	58eb      	ldr	r3, [r5, r3]
    4c14:	4798      	blx	r3
    4c16:	3601      	adds	r6, #1
    4c18:	e7ee      	b.n	4bf8 <__libc_init_array+0xc>
    4c1a:	00b3      	lsls	r3, r6, #2
    4c1c:	58eb      	ldr	r3, [r5, r3]
    4c1e:	4798      	blx	r3
    4c20:	3601      	adds	r6, #1
    4c22:	e7f2      	b.n	4c0a <__libc_init_array+0x1e>
    4c24:	000083c0 	.word	0x000083c0
    4c28:	000083c0 	.word	0x000083c0
    4c2c:	000083c0 	.word	0x000083c0
    4c30:	000083c4 	.word	0x000083c4

00004c34 <__itoa>:
    4c34:	1e93      	subs	r3, r2, #2
    4c36:	b510      	push	{r4, lr}
    4c38:	000c      	movs	r4, r1
    4c3a:	2b22      	cmp	r3, #34	; 0x22
    4c3c:	d904      	bls.n	4c48 <__itoa+0x14>
    4c3e:	2300      	movs	r3, #0
    4c40:	001c      	movs	r4, r3
    4c42:	700b      	strb	r3, [r1, #0]
    4c44:	0020      	movs	r0, r4
    4c46:	bd10      	pop	{r4, pc}
    4c48:	2a0a      	cmp	r2, #10
    4c4a:	d109      	bne.n	4c60 <__itoa+0x2c>
    4c4c:	2800      	cmp	r0, #0
    4c4e:	da07      	bge.n	4c60 <__itoa+0x2c>
    4c50:	232d      	movs	r3, #45	; 0x2d
    4c52:	700b      	strb	r3, [r1, #0]
    4c54:	2101      	movs	r1, #1
    4c56:	4240      	negs	r0, r0
    4c58:	1861      	adds	r1, r4, r1
    4c5a:	f000 fa3f 	bl	50dc <__utoa>
    4c5e:	e7f1      	b.n	4c44 <__itoa+0x10>
    4c60:	2100      	movs	r1, #0
    4c62:	e7f9      	b.n	4c58 <__itoa+0x24>

00004c64 <itoa>:
    4c64:	b510      	push	{r4, lr}
    4c66:	f7ff ffe5 	bl	4c34 <__itoa>
    4c6a:	bd10      	pop	{r4, pc}

00004c6c <malloc>:
    4c6c:	b510      	push	{r4, lr}
    4c6e:	4b03      	ldr	r3, [pc, #12]	; (4c7c <malloc+0x10>)
    4c70:	0001      	movs	r1, r0
    4c72:	6818      	ldr	r0, [r3, #0]
    4c74:	f000 f860 	bl	4d38 <_malloc_r>
    4c78:	bd10      	pop	{r4, pc}
    4c7a:	46c0      	nop			; (mov r8, r8)
    4c7c:	200001a8 	.word	0x200001a8

00004c80 <memcpy>:
    4c80:	2300      	movs	r3, #0
    4c82:	b510      	push	{r4, lr}
    4c84:	429a      	cmp	r2, r3
    4c86:	d100      	bne.n	4c8a <memcpy+0xa>
    4c88:	bd10      	pop	{r4, pc}
    4c8a:	5ccc      	ldrb	r4, [r1, r3]
    4c8c:	54c4      	strb	r4, [r0, r3]
    4c8e:	3301      	adds	r3, #1
    4c90:	e7f8      	b.n	4c84 <memcpy+0x4>

00004c92 <memset>:
    4c92:	0003      	movs	r3, r0
    4c94:	1882      	adds	r2, r0, r2
    4c96:	4293      	cmp	r3, r2
    4c98:	d100      	bne.n	4c9c <memset+0xa>
    4c9a:	4770      	bx	lr
    4c9c:	7019      	strb	r1, [r3, #0]
    4c9e:	3301      	adds	r3, #1
    4ca0:	e7f9      	b.n	4c96 <memset+0x4>
	...

00004ca4 <_free_r>:
    4ca4:	b570      	push	{r4, r5, r6, lr}
    4ca6:	0005      	movs	r5, r0
    4ca8:	2900      	cmp	r1, #0
    4caa:	d010      	beq.n	4cce <_free_r+0x2a>
    4cac:	1f0c      	subs	r4, r1, #4
    4cae:	6823      	ldr	r3, [r4, #0]
    4cb0:	2b00      	cmp	r3, #0
    4cb2:	da00      	bge.n	4cb6 <_free_r+0x12>
    4cb4:	18e4      	adds	r4, r4, r3
    4cb6:	0028      	movs	r0, r5
    4cb8:	f000 fc44 	bl	5544 <__malloc_lock>
    4cbc:	4a1d      	ldr	r2, [pc, #116]	; (4d34 <_free_r+0x90>)
    4cbe:	6813      	ldr	r3, [r2, #0]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d105      	bne.n	4cd0 <_free_r+0x2c>
    4cc4:	6063      	str	r3, [r4, #4]
    4cc6:	6014      	str	r4, [r2, #0]
    4cc8:	0028      	movs	r0, r5
    4cca:	f000 fc3c 	bl	5546 <__malloc_unlock>
    4cce:	bd70      	pop	{r4, r5, r6, pc}
    4cd0:	42a3      	cmp	r3, r4
    4cd2:	d909      	bls.n	4ce8 <_free_r+0x44>
    4cd4:	6821      	ldr	r1, [r4, #0]
    4cd6:	1860      	adds	r0, r4, r1
    4cd8:	4283      	cmp	r3, r0
    4cda:	d1f3      	bne.n	4cc4 <_free_r+0x20>
    4cdc:	6818      	ldr	r0, [r3, #0]
    4cde:	685b      	ldr	r3, [r3, #4]
    4ce0:	1841      	adds	r1, r0, r1
    4ce2:	6021      	str	r1, [r4, #0]
    4ce4:	e7ee      	b.n	4cc4 <_free_r+0x20>
    4ce6:	0013      	movs	r3, r2
    4ce8:	685a      	ldr	r2, [r3, #4]
    4cea:	2a00      	cmp	r2, #0
    4cec:	d001      	beq.n	4cf2 <_free_r+0x4e>
    4cee:	42a2      	cmp	r2, r4
    4cf0:	d9f9      	bls.n	4ce6 <_free_r+0x42>
    4cf2:	6819      	ldr	r1, [r3, #0]
    4cf4:	1858      	adds	r0, r3, r1
    4cf6:	42a0      	cmp	r0, r4
    4cf8:	d10b      	bne.n	4d12 <_free_r+0x6e>
    4cfa:	6820      	ldr	r0, [r4, #0]
    4cfc:	1809      	adds	r1, r1, r0
    4cfe:	1858      	adds	r0, r3, r1
    4d00:	6019      	str	r1, [r3, #0]
    4d02:	4282      	cmp	r2, r0
    4d04:	d1e0      	bne.n	4cc8 <_free_r+0x24>
    4d06:	6810      	ldr	r0, [r2, #0]
    4d08:	6852      	ldr	r2, [r2, #4]
    4d0a:	1841      	adds	r1, r0, r1
    4d0c:	6019      	str	r1, [r3, #0]
    4d0e:	605a      	str	r2, [r3, #4]
    4d10:	e7da      	b.n	4cc8 <_free_r+0x24>
    4d12:	42a0      	cmp	r0, r4
    4d14:	d902      	bls.n	4d1c <_free_r+0x78>
    4d16:	230c      	movs	r3, #12
    4d18:	602b      	str	r3, [r5, #0]
    4d1a:	e7d5      	b.n	4cc8 <_free_r+0x24>
    4d1c:	6821      	ldr	r1, [r4, #0]
    4d1e:	1860      	adds	r0, r4, r1
    4d20:	4282      	cmp	r2, r0
    4d22:	d103      	bne.n	4d2c <_free_r+0x88>
    4d24:	6810      	ldr	r0, [r2, #0]
    4d26:	6852      	ldr	r2, [r2, #4]
    4d28:	1841      	adds	r1, r0, r1
    4d2a:	6021      	str	r1, [r4, #0]
    4d2c:	6062      	str	r2, [r4, #4]
    4d2e:	605c      	str	r4, [r3, #4]
    4d30:	e7ca      	b.n	4cc8 <_free_r+0x24>
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	200002f8 	.word	0x200002f8

00004d38 <_malloc_r>:
    4d38:	2303      	movs	r3, #3
    4d3a:	b570      	push	{r4, r5, r6, lr}
    4d3c:	1ccd      	adds	r5, r1, #3
    4d3e:	439d      	bics	r5, r3
    4d40:	3508      	adds	r5, #8
    4d42:	0006      	movs	r6, r0
    4d44:	2d0c      	cmp	r5, #12
    4d46:	d21e      	bcs.n	4d86 <_malloc_r+0x4e>
    4d48:	250c      	movs	r5, #12
    4d4a:	42a9      	cmp	r1, r5
    4d4c:	d81d      	bhi.n	4d8a <_malloc_r+0x52>
    4d4e:	0030      	movs	r0, r6
    4d50:	f000 fbf8 	bl	5544 <__malloc_lock>
    4d54:	4a25      	ldr	r2, [pc, #148]	; (4dec <_malloc_r+0xb4>)
    4d56:	6814      	ldr	r4, [r2, #0]
    4d58:	0021      	movs	r1, r4
    4d5a:	2900      	cmp	r1, #0
    4d5c:	d119      	bne.n	4d92 <_malloc_r+0x5a>
    4d5e:	4c24      	ldr	r4, [pc, #144]	; (4df0 <_malloc_r+0xb8>)
    4d60:	6823      	ldr	r3, [r4, #0]
    4d62:	2b00      	cmp	r3, #0
    4d64:	d103      	bne.n	4d6e <_malloc_r+0x36>
    4d66:	0030      	movs	r0, r6
    4d68:	f000 f8dc 	bl	4f24 <_sbrk_r>
    4d6c:	6020      	str	r0, [r4, #0]
    4d6e:	0029      	movs	r1, r5
    4d70:	0030      	movs	r0, r6
    4d72:	f000 f8d7 	bl	4f24 <_sbrk_r>
    4d76:	1c43      	adds	r3, r0, #1
    4d78:	d12c      	bne.n	4dd4 <_malloc_r+0x9c>
    4d7a:	230c      	movs	r3, #12
    4d7c:	0030      	movs	r0, r6
    4d7e:	6033      	str	r3, [r6, #0]
    4d80:	f000 fbe1 	bl	5546 <__malloc_unlock>
    4d84:	e003      	b.n	4d8e <_malloc_r+0x56>
    4d86:	2d00      	cmp	r5, #0
    4d88:	dadf      	bge.n	4d4a <_malloc_r+0x12>
    4d8a:	230c      	movs	r3, #12
    4d8c:	6033      	str	r3, [r6, #0]
    4d8e:	2000      	movs	r0, #0
    4d90:	bd70      	pop	{r4, r5, r6, pc}
    4d92:	680b      	ldr	r3, [r1, #0]
    4d94:	1b5b      	subs	r3, r3, r5
    4d96:	d41a      	bmi.n	4dce <_malloc_r+0x96>
    4d98:	2b0b      	cmp	r3, #11
    4d9a:	d903      	bls.n	4da4 <_malloc_r+0x6c>
    4d9c:	600b      	str	r3, [r1, #0]
    4d9e:	18cc      	adds	r4, r1, r3
    4da0:	6025      	str	r5, [r4, #0]
    4da2:	e003      	b.n	4dac <_malloc_r+0x74>
    4da4:	428c      	cmp	r4, r1
    4da6:	d10e      	bne.n	4dc6 <_malloc_r+0x8e>
    4da8:	6863      	ldr	r3, [r4, #4]
    4daa:	6013      	str	r3, [r2, #0]
    4dac:	0030      	movs	r0, r6
    4dae:	f000 fbca 	bl	5546 <__malloc_unlock>
    4db2:	0020      	movs	r0, r4
    4db4:	2207      	movs	r2, #7
    4db6:	300b      	adds	r0, #11
    4db8:	1d23      	adds	r3, r4, #4
    4dba:	4390      	bics	r0, r2
    4dbc:	1ac3      	subs	r3, r0, r3
    4dbe:	d0e7      	beq.n	4d90 <_malloc_r+0x58>
    4dc0:	425a      	negs	r2, r3
    4dc2:	50e2      	str	r2, [r4, r3]
    4dc4:	e7e4      	b.n	4d90 <_malloc_r+0x58>
    4dc6:	684b      	ldr	r3, [r1, #4]
    4dc8:	6063      	str	r3, [r4, #4]
    4dca:	000c      	movs	r4, r1
    4dcc:	e7ee      	b.n	4dac <_malloc_r+0x74>
    4dce:	000c      	movs	r4, r1
    4dd0:	6849      	ldr	r1, [r1, #4]
    4dd2:	e7c2      	b.n	4d5a <_malloc_r+0x22>
    4dd4:	2303      	movs	r3, #3
    4dd6:	1cc4      	adds	r4, r0, #3
    4dd8:	439c      	bics	r4, r3
    4dda:	42a0      	cmp	r0, r4
    4ddc:	d0e0      	beq.n	4da0 <_malloc_r+0x68>
    4dde:	1a21      	subs	r1, r4, r0
    4de0:	0030      	movs	r0, r6
    4de2:	f000 f89f 	bl	4f24 <_sbrk_r>
    4de6:	1c43      	adds	r3, r0, #1
    4de8:	d1da      	bne.n	4da0 <_malloc_r+0x68>
    4dea:	e7c6      	b.n	4d7a <_malloc_r+0x42>
    4dec:	200002f8 	.word	0x200002f8
    4df0:	200002fc 	.word	0x200002fc

00004df4 <iprintf>:
    4df4:	b40f      	push	{r0, r1, r2, r3}
    4df6:	4b0b      	ldr	r3, [pc, #44]	; (4e24 <iprintf+0x30>)
    4df8:	b513      	push	{r0, r1, r4, lr}
    4dfa:	681c      	ldr	r4, [r3, #0]
    4dfc:	2c00      	cmp	r4, #0
    4dfe:	d005      	beq.n	4e0c <iprintf+0x18>
    4e00:	69a3      	ldr	r3, [r4, #24]
    4e02:	2b00      	cmp	r3, #0
    4e04:	d102      	bne.n	4e0c <iprintf+0x18>
    4e06:	0020      	movs	r0, r4
    4e08:	f000 fa9a 	bl	5340 <__sinit>
    4e0c:	ab05      	add	r3, sp, #20
    4e0e:	9a04      	ldr	r2, [sp, #16]
    4e10:	68a1      	ldr	r1, [r4, #8]
    4e12:	0020      	movs	r0, r4
    4e14:	9301      	str	r3, [sp, #4]
    4e16:	f000 fbbf 	bl	5598 <_vfiprintf_r>
    4e1a:	bc16      	pop	{r1, r2, r4}
    4e1c:	bc08      	pop	{r3}
    4e1e:	b004      	add	sp, #16
    4e20:	4718      	bx	r3
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	200001a8 	.word	0x200001a8

00004e28 <putchar>:
    4e28:	4b08      	ldr	r3, [pc, #32]	; (4e4c <putchar+0x24>)
    4e2a:	b570      	push	{r4, r5, r6, lr}
    4e2c:	681c      	ldr	r4, [r3, #0]
    4e2e:	0005      	movs	r5, r0
    4e30:	2c00      	cmp	r4, #0
    4e32:	d005      	beq.n	4e40 <putchar+0x18>
    4e34:	69a3      	ldr	r3, [r4, #24]
    4e36:	2b00      	cmp	r3, #0
    4e38:	d102      	bne.n	4e40 <putchar+0x18>
    4e3a:	0020      	movs	r0, r4
    4e3c:	f000 fa80 	bl	5340 <__sinit>
    4e40:	0029      	movs	r1, r5
    4e42:	68a2      	ldr	r2, [r4, #8]
    4e44:	0020      	movs	r0, r4
    4e46:	f000 fe4b 	bl	5ae0 <_putc_r>
    4e4a:	bd70      	pop	{r4, r5, r6, pc}
    4e4c:	200001a8 	.word	0x200001a8

00004e50 <srand>:
    4e50:	4b10      	ldr	r3, [pc, #64]	; (4e94 <srand+0x44>)
    4e52:	b570      	push	{r4, r5, r6, lr}
    4e54:	681c      	ldr	r4, [r3, #0]
    4e56:	0005      	movs	r5, r0
    4e58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	d115      	bne.n	4e8a <srand+0x3a>
    4e5e:	2018      	movs	r0, #24
    4e60:	f7ff ff04 	bl	4c6c <malloc>
    4e64:	4b0c      	ldr	r3, [pc, #48]	; (4e98 <srand+0x48>)
    4e66:	63a0      	str	r0, [r4, #56]	; 0x38
    4e68:	8003      	strh	r3, [r0, #0]
    4e6a:	4b0c      	ldr	r3, [pc, #48]	; (4e9c <srand+0x4c>)
    4e6c:	2201      	movs	r2, #1
    4e6e:	8043      	strh	r3, [r0, #2]
    4e70:	4b0b      	ldr	r3, [pc, #44]	; (4ea0 <srand+0x50>)
    4e72:	8083      	strh	r3, [r0, #4]
    4e74:	4b0b      	ldr	r3, [pc, #44]	; (4ea4 <srand+0x54>)
    4e76:	80c3      	strh	r3, [r0, #6]
    4e78:	4b0b      	ldr	r3, [pc, #44]	; (4ea8 <srand+0x58>)
    4e7a:	8103      	strh	r3, [r0, #8]
    4e7c:	2305      	movs	r3, #5
    4e7e:	8143      	strh	r3, [r0, #10]
    4e80:	3306      	adds	r3, #6
    4e82:	8183      	strh	r3, [r0, #12]
    4e84:	2300      	movs	r3, #0
    4e86:	6102      	str	r2, [r0, #16]
    4e88:	6143      	str	r3, [r0, #20]
    4e8a:	2200      	movs	r2, #0
    4e8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4e8e:	611d      	str	r5, [r3, #16]
    4e90:	615a      	str	r2, [r3, #20]
    4e92:	bd70      	pop	{r4, r5, r6, pc}
    4e94:	200001a8 	.word	0x200001a8
    4e98:	0000330e 	.word	0x0000330e
    4e9c:	ffffabcd 	.word	0xffffabcd
    4ea0:	00001234 	.word	0x00001234
    4ea4:	ffffe66d 	.word	0xffffe66d
    4ea8:	ffffdeec 	.word	0xffffdeec

00004eac <rand>:
    4eac:	4b15      	ldr	r3, [pc, #84]	; (4f04 <rand+0x58>)
    4eae:	b510      	push	{r4, lr}
    4eb0:	681c      	ldr	r4, [r3, #0]
    4eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d115      	bne.n	4ee4 <rand+0x38>
    4eb8:	2018      	movs	r0, #24
    4eba:	f7ff fed7 	bl	4c6c <malloc>
    4ebe:	4b12      	ldr	r3, [pc, #72]	; (4f08 <rand+0x5c>)
    4ec0:	63a0      	str	r0, [r4, #56]	; 0x38
    4ec2:	8003      	strh	r3, [r0, #0]
    4ec4:	4b11      	ldr	r3, [pc, #68]	; (4f0c <rand+0x60>)
    4ec6:	2201      	movs	r2, #1
    4ec8:	8043      	strh	r3, [r0, #2]
    4eca:	4b11      	ldr	r3, [pc, #68]	; (4f10 <rand+0x64>)
    4ecc:	8083      	strh	r3, [r0, #4]
    4ece:	4b11      	ldr	r3, [pc, #68]	; (4f14 <rand+0x68>)
    4ed0:	80c3      	strh	r3, [r0, #6]
    4ed2:	4b11      	ldr	r3, [pc, #68]	; (4f18 <rand+0x6c>)
    4ed4:	8103      	strh	r3, [r0, #8]
    4ed6:	2305      	movs	r3, #5
    4ed8:	8143      	strh	r3, [r0, #10]
    4eda:	3306      	adds	r3, #6
    4edc:	8183      	strh	r3, [r0, #12]
    4ede:	2300      	movs	r3, #0
    4ee0:	6102      	str	r2, [r0, #16]
    4ee2:	6143      	str	r3, [r0, #20]
    4ee4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    4ee6:	4a0d      	ldr	r2, [pc, #52]	; (4f1c <rand+0x70>)
    4ee8:	6920      	ldr	r0, [r4, #16]
    4eea:	6961      	ldr	r1, [r4, #20]
    4eec:	4b0c      	ldr	r3, [pc, #48]	; (4f20 <rand+0x74>)
    4eee:	f7ff fe53 	bl	4b98 <__aeabi_lmul>
    4ef2:	2201      	movs	r2, #1
    4ef4:	2300      	movs	r3, #0
    4ef6:	1880      	adds	r0, r0, r2
    4ef8:	4159      	adcs	r1, r3
    4efa:	6120      	str	r0, [r4, #16]
    4efc:	6161      	str	r1, [r4, #20]
    4efe:	0048      	lsls	r0, r1, #1
    4f00:	0840      	lsrs	r0, r0, #1
    4f02:	bd10      	pop	{r4, pc}
    4f04:	200001a8 	.word	0x200001a8
    4f08:	0000330e 	.word	0x0000330e
    4f0c:	ffffabcd 	.word	0xffffabcd
    4f10:	00001234 	.word	0x00001234
    4f14:	ffffe66d 	.word	0xffffe66d
    4f18:	ffffdeec 	.word	0xffffdeec
    4f1c:	4c957f2d 	.word	0x4c957f2d
    4f20:	5851f42d 	.word	0x5851f42d

00004f24 <_sbrk_r>:
    4f24:	2300      	movs	r3, #0
    4f26:	b570      	push	{r4, r5, r6, lr}
    4f28:	4c06      	ldr	r4, [pc, #24]	; (4f44 <_sbrk_r+0x20>)
    4f2a:	0005      	movs	r5, r0
    4f2c:	0008      	movs	r0, r1
    4f2e:	6023      	str	r3, [r4, #0]
    4f30:	f7fe fb0e 	bl	3550 <_sbrk>
    4f34:	1c43      	adds	r3, r0, #1
    4f36:	d103      	bne.n	4f40 <_sbrk_r+0x1c>
    4f38:	6823      	ldr	r3, [r4, #0]
    4f3a:	2b00      	cmp	r3, #0
    4f3c:	d000      	beq.n	4f40 <_sbrk_r+0x1c>
    4f3e:	602b      	str	r3, [r5, #0]
    4f40:	bd70      	pop	{r4, r5, r6, pc}
    4f42:	46c0      	nop			; (mov r8, r8)
    4f44:	20003120 	.word	0x20003120

00004f48 <setbuf>:
    4f48:	424a      	negs	r2, r1
    4f4a:	414a      	adcs	r2, r1
    4f4c:	2380      	movs	r3, #128	; 0x80
    4f4e:	b510      	push	{r4, lr}
    4f50:	0052      	lsls	r2, r2, #1
    4f52:	00db      	lsls	r3, r3, #3
    4f54:	f000 f802 	bl	4f5c <setvbuf>
    4f58:	bd10      	pop	{r4, pc}
	...

00004f5c <setvbuf>:
    4f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f5e:	001d      	movs	r5, r3
    4f60:	4b4f      	ldr	r3, [pc, #316]	; (50a0 <setvbuf+0x144>)
    4f62:	b085      	sub	sp, #20
    4f64:	681e      	ldr	r6, [r3, #0]
    4f66:	0004      	movs	r4, r0
    4f68:	000f      	movs	r7, r1
    4f6a:	9200      	str	r2, [sp, #0]
    4f6c:	2e00      	cmp	r6, #0
    4f6e:	d005      	beq.n	4f7c <setvbuf+0x20>
    4f70:	69b3      	ldr	r3, [r6, #24]
    4f72:	2b00      	cmp	r3, #0
    4f74:	d102      	bne.n	4f7c <setvbuf+0x20>
    4f76:	0030      	movs	r0, r6
    4f78:	f000 f9e2 	bl	5340 <__sinit>
    4f7c:	4b49      	ldr	r3, [pc, #292]	; (50a4 <setvbuf+0x148>)
    4f7e:	429c      	cmp	r4, r3
    4f80:	d150      	bne.n	5024 <setvbuf+0xc8>
    4f82:	6874      	ldr	r4, [r6, #4]
    4f84:	9b00      	ldr	r3, [sp, #0]
    4f86:	2b02      	cmp	r3, #2
    4f88:	d005      	beq.n	4f96 <setvbuf+0x3a>
    4f8a:	2b01      	cmp	r3, #1
    4f8c:	d900      	bls.n	4f90 <setvbuf+0x34>
    4f8e:	e084      	b.n	509a <setvbuf+0x13e>
    4f90:	2d00      	cmp	r5, #0
    4f92:	da00      	bge.n	4f96 <setvbuf+0x3a>
    4f94:	e081      	b.n	509a <setvbuf+0x13e>
    4f96:	0021      	movs	r1, r4
    4f98:	0030      	movs	r0, r6
    4f9a:	f000 f963 	bl	5264 <_fflush_r>
    4f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4fa0:	2900      	cmp	r1, #0
    4fa2:	d008      	beq.n	4fb6 <setvbuf+0x5a>
    4fa4:	0023      	movs	r3, r4
    4fa6:	3344      	adds	r3, #68	; 0x44
    4fa8:	4299      	cmp	r1, r3
    4faa:	d002      	beq.n	4fb2 <setvbuf+0x56>
    4fac:	0030      	movs	r0, r6
    4fae:	f7ff fe79 	bl	4ca4 <_free_r>
    4fb2:	2300      	movs	r3, #0
    4fb4:	6363      	str	r3, [r4, #52]	; 0x34
    4fb6:	2300      	movs	r3, #0
    4fb8:	61a3      	str	r3, [r4, #24]
    4fba:	6063      	str	r3, [r4, #4]
    4fbc:	89a3      	ldrh	r3, [r4, #12]
    4fbe:	061b      	lsls	r3, r3, #24
    4fc0:	d503      	bpl.n	4fca <setvbuf+0x6e>
    4fc2:	6921      	ldr	r1, [r4, #16]
    4fc4:	0030      	movs	r0, r6
    4fc6:	f7ff fe6d 	bl	4ca4 <_free_r>
    4fca:	89a3      	ldrh	r3, [r4, #12]
    4fcc:	4a36      	ldr	r2, [pc, #216]	; (50a8 <setvbuf+0x14c>)
    4fce:	4013      	ands	r3, r2
    4fd0:	81a3      	strh	r3, [r4, #12]
    4fd2:	9b00      	ldr	r3, [sp, #0]
    4fd4:	2b02      	cmp	r3, #2
    4fd6:	d05a      	beq.n	508e <setvbuf+0x132>
    4fd8:	ab03      	add	r3, sp, #12
    4fda:	aa02      	add	r2, sp, #8
    4fdc:	0021      	movs	r1, r4
    4fde:	0030      	movs	r0, r6
    4fe0:	f000 fa44 	bl	546c <__swhatbuf_r>
    4fe4:	89a3      	ldrh	r3, [r4, #12]
    4fe6:	4318      	orrs	r0, r3
    4fe8:	81a0      	strh	r0, [r4, #12]
    4fea:	2d00      	cmp	r5, #0
    4fec:	d124      	bne.n	5038 <setvbuf+0xdc>
    4fee:	9d02      	ldr	r5, [sp, #8]
    4ff0:	0028      	movs	r0, r5
    4ff2:	f7ff fe3b 	bl	4c6c <malloc>
    4ff6:	9501      	str	r5, [sp, #4]
    4ff8:	1e07      	subs	r7, r0, #0
    4ffa:	d142      	bne.n	5082 <setvbuf+0x126>
    4ffc:	9b02      	ldr	r3, [sp, #8]
    4ffe:	9301      	str	r3, [sp, #4]
    5000:	42ab      	cmp	r3, r5
    5002:	d139      	bne.n	5078 <setvbuf+0x11c>
    5004:	2001      	movs	r0, #1
    5006:	4240      	negs	r0, r0
    5008:	2302      	movs	r3, #2
    500a:	89a2      	ldrh	r2, [r4, #12]
    500c:	4313      	orrs	r3, r2
    500e:	81a3      	strh	r3, [r4, #12]
    5010:	2300      	movs	r3, #0
    5012:	60a3      	str	r3, [r4, #8]
    5014:	0023      	movs	r3, r4
    5016:	3347      	adds	r3, #71	; 0x47
    5018:	6023      	str	r3, [r4, #0]
    501a:	6123      	str	r3, [r4, #16]
    501c:	2301      	movs	r3, #1
    501e:	6163      	str	r3, [r4, #20]
    5020:	b005      	add	sp, #20
    5022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5024:	4b21      	ldr	r3, [pc, #132]	; (50ac <setvbuf+0x150>)
    5026:	429c      	cmp	r4, r3
    5028:	d101      	bne.n	502e <setvbuf+0xd2>
    502a:	68b4      	ldr	r4, [r6, #8]
    502c:	e7aa      	b.n	4f84 <setvbuf+0x28>
    502e:	4b20      	ldr	r3, [pc, #128]	; (50b0 <setvbuf+0x154>)
    5030:	429c      	cmp	r4, r3
    5032:	d1a7      	bne.n	4f84 <setvbuf+0x28>
    5034:	68f4      	ldr	r4, [r6, #12]
    5036:	e7a5      	b.n	4f84 <setvbuf+0x28>
    5038:	2f00      	cmp	r7, #0
    503a:	d0d9      	beq.n	4ff0 <setvbuf+0x94>
    503c:	69b3      	ldr	r3, [r6, #24]
    503e:	2b00      	cmp	r3, #0
    5040:	d102      	bne.n	5048 <setvbuf+0xec>
    5042:	0030      	movs	r0, r6
    5044:	f000 f97c 	bl	5340 <__sinit>
    5048:	9b00      	ldr	r3, [sp, #0]
    504a:	2b01      	cmp	r3, #1
    504c:	d103      	bne.n	5056 <setvbuf+0xfa>
    504e:	89a3      	ldrh	r3, [r4, #12]
    5050:	9a00      	ldr	r2, [sp, #0]
    5052:	431a      	orrs	r2, r3
    5054:	81a2      	strh	r2, [r4, #12]
    5056:	2008      	movs	r0, #8
    5058:	89a3      	ldrh	r3, [r4, #12]
    505a:	6027      	str	r7, [r4, #0]
    505c:	6127      	str	r7, [r4, #16]
    505e:	6165      	str	r5, [r4, #20]
    5060:	4018      	ands	r0, r3
    5062:	d018      	beq.n	5096 <setvbuf+0x13a>
    5064:	2001      	movs	r0, #1
    5066:	4018      	ands	r0, r3
    5068:	2300      	movs	r3, #0
    506a:	4298      	cmp	r0, r3
    506c:	d011      	beq.n	5092 <setvbuf+0x136>
    506e:	426d      	negs	r5, r5
    5070:	60a3      	str	r3, [r4, #8]
    5072:	61a5      	str	r5, [r4, #24]
    5074:	0018      	movs	r0, r3
    5076:	e7d3      	b.n	5020 <setvbuf+0xc4>
    5078:	9801      	ldr	r0, [sp, #4]
    507a:	f7ff fdf7 	bl	4c6c <malloc>
    507e:	1e07      	subs	r7, r0, #0
    5080:	d0c0      	beq.n	5004 <setvbuf+0xa8>
    5082:	2380      	movs	r3, #128	; 0x80
    5084:	89a2      	ldrh	r2, [r4, #12]
    5086:	9d01      	ldr	r5, [sp, #4]
    5088:	4313      	orrs	r3, r2
    508a:	81a3      	strh	r3, [r4, #12]
    508c:	e7d6      	b.n	503c <setvbuf+0xe0>
    508e:	2000      	movs	r0, #0
    5090:	e7ba      	b.n	5008 <setvbuf+0xac>
    5092:	60a5      	str	r5, [r4, #8]
    5094:	e7c4      	b.n	5020 <setvbuf+0xc4>
    5096:	60a0      	str	r0, [r4, #8]
    5098:	e7c2      	b.n	5020 <setvbuf+0xc4>
    509a:	2001      	movs	r0, #1
    509c:	4240      	negs	r0, r0
    509e:	e7bf      	b.n	5020 <setvbuf+0xc4>
    50a0:	200001a8 	.word	0x200001a8
    50a4:	00008340 	.word	0x00008340
    50a8:	fffff35c 	.word	0xfffff35c
    50ac:	00008360 	.word	0x00008360
    50b0:	00008320 	.word	0x00008320

000050b4 <strcat>:
    50b4:	0002      	movs	r2, r0
    50b6:	b510      	push	{r4, lr}
    50b8:	7813      	ldrb	r3, [r2, #0]
    50ba:	2b00      	cmp	r3, #0
    50bc:	d105      	bne.n	50ca <strcat+0x16>
    50be:	5ccc      	ldrb	r4, [r1, r3]
    50c0:	54d4      	strb	r4, [r2, r3]
    50c2:	3301      	adds	r3, #1
    50c4:	2c00      	cmp	r4, #0
    50c6:	d1fa      	bne.n	50be <strcat+0xa>
    50c8:	bd10      	pop	{r4, pc}
    50ca:	3201      	adds	r2, #1
    50cc:	e7f4      	b.n	50b8 <strcat+0x4>

000050ce <strlen>:
    50ce:	2300      	movs	r3, #0
    50d0:	5cc2      	ldrb	r2, [r0, r3]
    50d2:	3301      	adds	r3, #1
    50d4:	2a00      	cmp	r2, #0
    50d6:	d1fb      	bne.n	50d0 <strlen+0x2>
    50d8:	1e58      	subs	r0, r3, #1
    50da:	4770      	bx	lr

000050dc <__utoa>:
    50dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    50de:	0017      	movs	r7, r2
    50e0:	b08f      	sub	sp, #60	; 0x3c
    50e2:	2225      	movs	r2, #37	; 0x25
    50e4:	0006      	movs	r6, r0
    50e6:	000d      	movs	r5, r1
    50e8:	a804      	add	r0, sp, #16
    50ea:	4918      	ldr	r1, [pc, #96]	; (514c <__utoa+0x70>)
    50ec:	f7ff fdc8 	bl	4c80 <memcpy>
    50f0:	aa04      	add	r2, sp, #16
    50f2:	1ebb      	subs	r3, r7, #2
    50f4:	2400      	movs	r4, #0
    50f6:	9203      	str	r2, [sp, #12]
    50f8:	2b22      	cmp	r3, #34	; 0x22
    50fa:	d905      	bls.n	5108 <__utoa+0x2c>
    50fc:	702c      	strb	r4, [r5, #0]
    50fe:	0025      	movs	r5, r4
    5100:	0028      	movs	r0, r5
    5102:	b00f      	add	sp, #60	; 0x3c
    5104:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5106:	9c01      	ldr	r4, [sp, #4]
    5108:	1c63      	adds	r3, r4, #1
    510a:	9301      	str	r3, [sp, #4]
    510c:	18eb      	adds	r3, r5, r3
    510e:	9300      	str	r3, [sp, #0]
    5110:	0030      	movs	r0, r6
    5112:	3b01      	subs	r3, #1
    5114:	0039      	movs	r1, r7
    5116:	9302      	str	r3, [sp, #8]
    5118:	f7ff fc4e 	bl	49b8 <__aeabi_uidivmod>
    511c:	9b03      	ldr	r3, [sp, #12]
    511e:	9a02      	ldr	r2, [sp, #8]
    5120:	5c5b      	ldrb	r3, [r3, r1]
    5122:	0030      	movs	r0, r6
    5124:	7013      	strb	r3, [r2, #0]
    5126:	0039      	movs	r1, r7
    5128:	f7ff fbc0 	bl	48ac <__udivsi3>
    512c:	1e06      	subs	r6, r0, #0
    512e:	d1ea      	bne.n	5106 <__utoa+0x2a>
    5130:	9b00      	ldr	r3, [sp, #0]
    5132:	7018      	strb	r0, [r3, #0]
    5134:	002b      	movs	r3, r5
    5136:	1b5a      	subs	r2, r3, r5
    5138:	4294      	cmp	r4, r2
    513a:	dde1      	ble.n	5100 <__utoa+0x24>
    513c:	781a      	ldrb	r2, [r3, #0]
    513e:	5d29      	ldrb	r1, [r5, r4]
    5140:	7019      	strb	r1, [r3, #0]
    5142:	552a      	strb	r2, [r5, r4]
    5144:	3301      	adds	r3, #1
    5146:	3c01      	subs	r4, #1
    5148:	e7f5      	b.n	5136 <__utoa+0x5a>
    514a:	46c0      	nop			; (mov r8, r8)
    514c:	000082f8 	.word	0x000082f8

00005150 <__sflush_r>:
    5150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5152:	898a      	ldrh	r2, [r1, #12]
    5154:	0005      	movs	r5, r0
    5156:	000c      	movs	r4, r1
    5158:	0713      	lsls	r3, r2, #28
    515a:	d460      	bmi.n	521e <__sflush_r+0xce>
    515c:	684b      	ldr	r3, [r1, #4]
    515e:	2b00      	cmp	r3, #0
    5160:	dc04      	bgt.n	516c <__sflush_r+0x1c>
    5162:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5164:	2b00      	cmp	r3, #0
    5166:	dc01      	bgt.n	516c <__sflush_r+0x1c>
    5168:	2000      	movs	r0, #0
    516a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    516c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    516e:	2f00      	cmp	r7, #0
    5170:	d0fa      	beq.n	5168 <__sflush_r+0x18>
    5172:	2300      	movs	r3, #0
    5174:	682e      	ldr	r6, [r5, #0]
    5176:	602b      	str	r3, [r5, #0]
    5178:	2380      	movs	r3, #128	; 0x80
    517a:	015b      	lsls	r3, r3, #5
    517c:	401a      	ands	r2, r3
    517e:	d034      	beq.n	51ea <__sflush_r+0x9a>
    5180:	6d60      	ldr	r0, [r4, #84]	; 0x54
    5182:	89a3      	ldrh	r3, [r4, #12]
    5184:	075b      	lsls	r3, r3, #29
    5186:	d506      	bpl.n	5196 <__sflush_r+0x46>
    5188:	6863      	ldr	r3, [r4, #4]
    518a:	1ac0      	subs	r0, r0, r3
    518c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    518e:	2b00      	cmp	r3, #0
    5190:	d001      	beq.n	5196 <__sflush_r+0x46>
    5192:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5194:	1ac0      	subs	r0, r0, r3
    5196:	0002      	movs	r2, r0
    5198:	6a21      	ldr	r1, [r4, #32]
    519a:	2300      	movs	r3, #0
    519c:	0028      	movs	r0, r5
    519e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    51a0:	47b8      	blx	r7
    51a2:	89a1      	ldrh	r1, [r4, #12]
    51a4:	1c43      	adds	r3, r0, #1
    51a6:	d106      	bne.n	51b6 <__sflush_r+0x66>
    51a8:	682b      	ldr	r3, [r5, #0]
    51aa:	2b1d      	cmp	r3, #29
    51ac:	d831      	bhi.n	5212 <__sflush_r+0xc2>
    51ae:	4a2c      	ldr	r2, [pc, #176]	; (5260 <__sflush_r+0x110>)
    51b0:	40da      	lsrs	r2, r3
    51b2:	07d3      	lsls	r3, r2, #31
    51b4:	d52d      	bpl.n	5212 <__sflush_r+0xc2>
    51b6:	2300      	movs	r3, #0
    51b8:	6063      	str	r3, [r4, #4]
    51ba:	6923      	ldr	r3, [r4, #16]
    51bc:	6023      	str	r3, [r4, #0]
    51be:	04cb      	lsls	r3, r1, #19
    51c0:	d505      	bpl.n	51ce <__sflush_r+0x7e>
    51c2:	1c43      	adds	r3, r0, #1
    51c4:	d102      	bne.n	51cc <__sflush_r+0x7c>
    51c6:	682b      	ldr	r3, [r5, #0]
    51c8:	2b00      	cmp	r3, #0
    51ca:	d100      	bne.n	51ce <__sflush_r+0x7e>
    51cc:	6560      	str	r0, [r4, #84]	; 0x54
    51ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    51d0:	602e      	str	r6, [r5, #0]
    51d2:	2900      	cmp	r1, #0
    51d4:	d0c8      	beq.n	5168 <__sflush_r+0x18>
    51d6:	0023      	movs	r3, r4
    51d8:	3344      	adds	r3, #68	; 0x44
    51da:	4299      	cmp	r1, r3
    51dc:	d002      	beq.n	51e4 <__sflush_r+0x94>
    51de:	0028      	movs	r0, r5
    51e0:	f7ff fd60 	bl	4ca4 <_free_r>
    51e4:	2000      	movs	r0, #0
    51e6:	6360      	str	r0, [r4, #52]	; 0x34
    51e8:	e7bf      	b.n	516a <__sflush_r+0x1a>
    51ea:	2301      	movs	r3, #1
    51ec:	6a21      	ldr	r1, [r4, #32]
    51ee:	0028      	movs	r0, r5
    51f0:	47b8      	blx	r7
    51f2:	1c43      	adds	r3, r0, #1
    51f4:	d1c5      	bne.n	5182 <__sflush_r+0x32>
    51f6:	682b      	ldr	r3, [r5, #0]
    51f8:	2b00      	cmp	r3, #0
    51fa:	d0c2      	beq.n	5182 <__sflush_r+0x32>
    51fc:	2b1d      	cmp	r3, #29
    51fe:	d001      	beq.n	5204 <__sflush_r+0xb4>
    5200:	2b16      	cmp	r3, #22
    5202:	d101      	bne.n	5208 <__sflush_r+0xb8>
    5204:	602e      	str	r6, [r5, #0]
    5206:	e7af      	b.n	5168 <__sflush_r+0x18>
    5208:	2340      	movs	r3, #64	; 0x40
    520a:	89a2      	ldrh	r2, [r4, #12]
    520c:	4313      	orrs	r3, r2
    520e:	81a3      	strh	r3, [r4, #12]
    5210:	e7ab      	b.n	516a <__sflush_r+0x1a>
    5212:	2340      	movs	r3, #64	; 0x40
    5214:	430b      	orrs	r3, r1
    5216:	2001      	movs	r0, #1
    5218:	81a3      	strh	r3, [r4, #12]
    521a:	4240      	negs	r0, r0
    521c:	e7a5      	b.n	516a <__sflush_r+0x1a>
    521e:	690f      	ldr	r7, [r1, #16]
    5220:	2f00      	cmp	r7, #0
    5222:	d0a1      	beq.n	5168 <__sflush_r+0x18>
    5224:	680b      	ldr	r3, [r1, #0]
    5226:	600f      	str	r7, [r1, #0]
    5228:	1bdb      	subs	r3, r3, r7
    522a:	9301      	str	r3, [sp, #4]
    522c:	2300      	movs	r3, #0
    522e:	0792      	lsls	r2, r2, #30
    5230:	d100      	bne.n	5234 <__sflush_r+0xe4>
    5232:	694b      	ldr	r3, [r1, #20]
    5234:	60a3      	str	r3, [r4, #8]
    5236:	9b01      	ldr	r3, [sp, #4]
    5238:	2b00      	cmp	r3, #0
    523a:	dc00      	bgt.n	523e <__sflush_r+0xee>
    523c:	e794      	b.n	5168 <__sflush_r+0x18>
    523e:	9b01      	ldr	r3, [sp, #4]
    5240:	003a      	movs	r2, r7
    5242:	6a21      	ldr	r1, [r4, #32]
    5244:	0028      	movs	r0, r5
    5246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5248:	47b0      	blx	r6
    524a:	2800      	cmp	r0, #0
    524c:	dc03      	bgt.n	5256 <__sflush_r+0x106>
    524e:	2340      	movs	r3, #64	; 0x40
    5250:	89a2      	ldrh	r2, [r4, #12]
    5252:	4313      	orrs	r3, r2
    5254:	e7df      	b.n	5216 <__sflush_r+0xc6>
    5256:	9b01      	ldr	r3, [sp, #4]
    5258:	183f      	adds	r7, r7, r0
    525a:	1a1b      	subs	r3, r3, r0
    525c:	9301      	str	r3, [sp, #4]
    525e:	e7ea      	b.n	5236 <__sflush_r+0xe6>
    5260:	20400001 	.word	0x20400001

00005264 <_fflush_r>:
    5264:	690b      	ldr	r3, [r1, #16]
    5266:	b570      	push	{r4, r5, r6, lr}
    5268:	0005      	movs	r5, r0
    526a:	000c      	movs	r4, r1
    526c:	2b00      	cmp	r3, #0
    526e:	d101      	bne.n	5274 <_fflush_r+0x10>
    5270:	2000      	movs	r0, #0
    5272:	bd70      	pop	{r4, r5, r6, pc}
    5274:	2800      	cmp	r0, #0
    5276:	d004      	beq.n	5282 <_fflush_r+0x1e>
    5278:	6983      	ldr	r3, [r0, #24]
    527a:	2b00      	cmp	r3, #0
    527c:	d101      	bne.n	5282 <_fflush_r+0x1e>
    527e:	f000 f85f 	bl	5340 <__sinit>
    5282:	4b0b      	ldr	r3, [pc, #44]	; (52b0 <_fflush_r+0x4c>)
    5284:	429c      	cmp	r4, r3
    5286:	d109      	bne.n	529c <_fflush_r+0x38>
    5288:	686c      	ldr	r4, [r5, #4]
    528a:	220c      	movs	r2, #12
    528c:	5ea3      	ldrsh	r3, [r4, r2]
    528e:	2b00      	cmp	r3, #0
    5290:	d0ee      	beq.n	5270 <_fflush_r+0xc>
    5292:	0021      	movs	r1, r4
    5294:	0028      	movs	r0, r5
    5296:	f7ff ff5b 	bl	5150 <__sflush_r>
    529a:	e7ea      	b.n	5272 <_fflush_r+0xe>
    529c:	4b05      	ldr	r3, [pc, #20]	; (52b4 <_fflush_r+0x50>)
    529e:	429c      	cmp	r4, r3
    52a0:	d101      	bne.n	52a6 <_fflush_r+0x42>
    52a2:	68ac      	ldr	r4, [r5, #8]
    52a4:	e7f1      	b.n	528a <_fflush_r+0x26>
    52a6:	4b04      	ldr	r3, [pc, #16]	; (52b8 <_fflush_r+0x54>)
    52a8:	429c      	cmp	r4, r3
    52aa:	d1ee      	bne.n	528a <_fflush_r+0x26>
    52ac:	68ec      	ldr	r4, [r5, #12]
    52ae:	e7ec      	b.n	528a <_fflush_r+0x26>
    52b0:	00008340 	.word	0x00008340
    52b4:	00008360 	.word	0x00008360
    52b8:	00008320 	.word	0x00008320

000052bc <_cleanup_r>:
    52bc:	b510      	push	{r4, lr}
    52be:	4902      	ldr	r1, [pc, #8]	; (52c8 <_cleanup_r+0xc>)
    52c0:	f000 f8b2 	bl	5428 <_fwalk_reent>
    52c4:	bd10      	pop	{r4, pc}
    52c6:	46c0      	nop			; (mov r8, r8)
    52c8:	00005265 	.word	0x00005265

000052cc <std.isra.0>:
    52cc:	2300      	movs	r3, #0
    52ce:	b510      	push	{r4, lr}
    52d0:	0004      	movs	r4, r0
    52d2:	6003      	str	r3, [r0, #0]
    52d4:	6043      	str	r3, [r0, #4]
    52d6:	6083      	str	r3, [r0, #8]
    52d8:	8181      	strh	r1, [r0, #12]
    52da:	6643      	str	r3, [r0, #100]	; 0x64
    52dc:	81c2      	strh	r2, [r0, #14]
    52de:	6103      	str	r3, [r0, #16]
    52e0:	6143      	str	r3, [r0, #20]
    52e2:	6183      	str	r3, [r0, #24]
    52e4:	0019      	movs	r1, r3
    52e6:	2208      	movs	r2, #8
    52e8:	305c      	adds	r0, #92	; 0x5c
    52ea:	f7ff fcd2 	bl	4c92 <memset>
    52ee:	4b05      	ldr	r3, [pc, #20]	; (5304 <std.isra.0+0x38>)
    52f0:	6224      	str	r4, [r4, #32]
    52f2:	6263      	str	r3, [r4, #36]	; 0x24
    52f4:	4b04      	ldr	r3, [pc, #16]	; (5308 <std.isra.0+0x3c>)
    52f6:	62a3      	str	r3, [r4, #40]	; 0x28
    52f8:	4b04      	ldr	r3, [pc, #16]	; (530c <std.isra.0+0x40>)
    52fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    52fc:	4b04      	ldr	r3, [pc, #16]	; (5310 <std.isra.0+0x44>)
    52fe:	6323      	str	r3, [r4, #48]	; 0x30
    5300:	bd10      	pop	{r4, pc}
    5302:	46c0      	nop			; (mov r8, r8)
    5304:	00005b4d 	.word	0x00005b4d
    5308:	00005b75 	.word	0x00005b75
    530c:	00005bad 	.word	0x00005bad
    5310:	00005bd9 	.word	0x00005bd9

00005314 <__sfmoreglue>:
    5314:	b570      	push	{r4, r5, r6, lr}
    5316:	2568      	movs	r5, #104	; 0x68
    5318:	1e4a      	subs	r2, r1, #1
    531a:	4355      	muls	r5, r2
    531c:	000e      	movs	r6, r1
    531e:	0029      	movs	r1, r5
    5320:	3174      	adds	r1, #116	; 0x74
    5322:	f7ff fd09 	bl	4d38 <_malloc_r>
    5326:	1e04      	subs	r4, r0, #0
    5328:	d008      	beq.n	533c <__sfmoreglue+0x28>
    532a:	2100      	movs	r1, #0
    532c:	002a      	movs	r2, r5
    532e:	6001      	str	r1, [r0, #0]
    5330:	6046      	str	r6, [r0, #4]
    5332:	300c      	adds	r0, #12
    5334:	60a0      	str	r0, [r4, #8]
    5336:	3268      	adds	r2, #104	; 0x68
    5338:	f7ff fcab 	bl	4c92 <memset>
    533c:	0020      	movs	r0, r4
    533e:	bd70      	pop	{r4, r5, r6, pc}

00005340 <__sinit>:
    5340:	6983      	ldr	r3, [r0, #24]
    5342:	b513      	push	{r0, r1, r4, lr}
    5344:	0004      	movs	r4, r0
    5346:	2b00      	cmp	r3, #0
    5348:	d128      	bne.n	539c <__sinit+0x5c>
    534a:	6483      	str	r3, [r0, #72]	; 0x48
    534c:	64c3      	str	r3, [r0, #76]	; 0x4c
    534e:	6503      	str	r3, [r0, #80]	; 0x50
    5350:	4b13      	ldr	r3, [pc, #76]	; (53a0 <__sinit+0x60>)
    5352:	4a14      	ldr	r2, [pc, #80]	; (53a4 <__sinit+0x64>)
    5354:	681b      	ldr	r3, [r3, #0]
    5356:	6282      	str	r2, [r0, #40]	; 0x28
    5358:	9301      	str	r3, [sp, #4]
    535a:	4298      	cmp	r0, r3
    535c:	d101      	bne.n	5362 <__sinit+0x22>
    535e:	2301      	movs	r3, #1
    5360:	6183      	str	r3, [r0, #24]
    5362:	0020      	movs	r0, r4
    5364:	f000 f820 	bl	53a8 <__sfp>
    5368:	6060      	str	r0, [r4, #4]
    536a:	0020      	movs	r0, r4
    536c:	f000 f81c 	bl	53a8 <__sfp>
    5370:	60a0      	str	r0, [r4, #8]
    5372:	0020      	movs	r0, r4
    5374:	f000 f818 	bl	53a8 <__sfp>
    5378:	2200      	movs	r2, #0
    537a:	60e0      	str	r0, [r4, #12]
    537c:	2104      	movs	r1, #4
    537e:	6860      	ldr	r0, [r4, #4]
    5380:	f7ff ffa4 	bl	52cc <std.isra.0>
    5384:	2201      	movs	r2, #1
    5386:	2109      	movs	r1, #9
    5388:	68a0      	ldr	r0, [r4, #8]
    538a:	f7ff ff9f 	bl	52cc <std.isra.0>
    538e:	2202      	movs	r2, #2
    5390:	2112      	movs	r1, #18
    5392:	68e0      	ldr	r0, [r4, #12]
    5394:	f7ff ff9a 	bl	52cc <std.isra.0>
    5398:	2301      	movs	r3, #1
    539a:	61a3      	str	r3, [r4, #24]
    539c:	bd13      	pop	{r0, r1, r4, pc}
    539e:	46c0      	nop			; (mov r8, r8)
    53a0:	000082f4 	.word	0x000082f4
    53a4:	000052bd 	.word	0x000052bd

000053a8 <__sfp>:
    53a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53aa:	4b1e      	ldr	r3, [pc, #120]	; (5424 <__sfp+0x7c>)
    53ac:	0007      	movs	r7, r0
    53ae:	681e      	ldr	r6, [r3, #0]
    53b0:	69b3      	ldr	r3, [r6, #24]
    53b2:	2b00      	cmp	r3, #0
    53b4:	d102      	bne.n	53bc <__sfp+0x14>
    53b6:	0030      	movs	r0, r6
    53b8:	f7ff ffc2 	bl	5340 <__sinit>
    53bc:	3648      	adds	r6, #72	; 0x48
    53be:	68b4      	ldr	r4, [r6, #8]
    53c0:	6873      	ldr	r3, [r6, #4]
    53c2:	3b01      	subs	r3, #1
    53c4:	d504      	bpl.n	53d0 <__sfp+0x28>
    53c6:	6833      	ldr	r3, [r6, #0]
    53c8:	2b00      	cmp	r3, #0
    53ca:	d007      	beq.n	53dc <__sfp+0x34>
    53cc:	6836      	ldr	r6, [r6, #0]
    53ce:	e7f6      	b.n	53be <__sfp+0x16>
    53d0:	220c      	movs	r2, #12
    53d2:	5ea5      	ldrsh	r5, [r4, r2]
    53d4:	2d00      	cmp	r5, #0
    53d6:	d00d      	beq.n	53f4 <__sfp+0x4c>
    53d8:	3468      	adds	r4, #104	; 0x68
    53da:	e7f2      	b.n	53c2 <__sfp+0x1a>
    53dc:	2104      	movs	r1, #4
    53de:	0038      	movs	r0, r7
    53e0:	f7ff ff98 	bl	5314 <__sfmoreglue>
    53e4:	6030      	str	r0, [r6, #0]
    53e6:	2800      	cmp	r0, #0
    53e8:	d1f0      	bne.n	53cc <__sfp+0x24>
    53ea:	230c      	movs	r3, #12
    53ec:	0004      	movs	r4, r0
    53ee:	603b      	str	r3, [r7, #0]
    53f0:	0020      	movs	r0, r4
    53f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53f4:	2301      	movs	r3, #1
    53f6:	0020      	movs	r0, r4
    53f8:	425b      	negs	r3, r3
    53fa:	81e3      	strh	r3, [r4, #14]
    53fc:	3302      	adds	r3, #2
    53fe:	81a3      	strh	r3, [r4, #12]
    5400:	6665      	str	r5, [r4, #100]	; 0x64
    5402:	6025      	str	r5, [r4, #0]
    5404:	60a5      	str	r5, [r4, #8]
    5406:	6065      	str	r5, [r4, #4]
    5408:	6125      	str	r5, [r4, #16]
    540a:	6165      	str	r5, [r4, #20]
    540c:	61a5      	str	r5, [r4, #24]
    540e:	2208      	movs	r2, #8
    5410:	0029      	movs	r1, r5
    5412:	305c      	adds	r0, #92	; 0x5c
    5414:	f7ff fc3d 	bl	4c92 <memset>
    5418:	6365      	str	r5, [r4, #52]	; 0x34
    541a:	63a5      	str	r5, [r4, #56]	; 0x38
    541c:	64a5      	str	r5, [r4, #72]	; 0x48
    541e:	64e5      	str	r5, [r4, #76]	; 0x4c
    5420:	e7e6      	b.n	53f0 <__sfp+0x48>
    5422:	46c0      	nop			; (mov r8, r8)
    5424:	000082f4 	.word	0x000082f4

00005428 <_fwalk_reent>:
    5428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    542a:	0004      	movs	r4, r0
    542c:	0007      	movs	r7, r0
    542e:	2600      	movs	r6, #0
    5430:	9101      	str	r1, [sp, #4]
    5432:	3448      	adds	r4, #72	; 0x48
    5434:	2c00      	cmp	r4, #0
    5436:	d101      	bne.n	543c <_fwalk_reent+0x14>
    5438:	0030      	movs	r0, r6
    543a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    543c:	6863      	ldr	r3, [r4, #4]
    543e:	68a5      	ldr	r5, [r4, #8]
    5440:	9300      	str	r3, [sp, #0]
    5442:	9b00      	ldr	r3, [sp, #0]
    5444:	3b01      	subs	r3, #1
    5446:	9300      	str	r3, [sp, #0]
    5448:	d501      	bpl.n	544e <_fwalk_reent+0x26>
    544a:	6824      	ldr	r4, [r4, #0]
    544c:	e7f2      	b.n	5434 <_fwalk_reent+0xc>
    544e:	89ab      	ldrh	r3, [r5, #12]
    5450:	2b01      	cmp	r3, #1
    5452:	d908      	bls.n	5466 <_fwalk_reent+0x3e>
    5454:	220e      	movs	r2, #14
    5456:	5eab      	ldrsh	r3, [r5, r2]
    5458:	3301      	adds	r3, #1
    545a:	d004      	beq.n	5466 <_fwalk_reent+0x3e>
    545c:	0029      	movs	r1, r5
    545e:	0038      	movs	r0, r7
    5460:	9b01      	ldr	r3, [sp, #4]
    5462:	4798      	blx	r3
    5464:	4306      	orrs	r6, r0
    5466:	3568      	adds	r5, #104	; 0x68
    5468:	e7eb      	b.n	5442 <_fwalk_reent+0x1a>
	...

0000546c <__swhatbuf_r>:
    546c:	b570      	push	{r4, r5, r6, lr}
    546e:	000e      	movs	r6, r1
    5470:	001d      	movs	r5, r3
    5472:	230e      	movs	r3, #14
    5474:	5ec9      	ldrsh	r1, [r1, r3]
    5476:	b090      	sub	sp, #64	; 0x40
    5478:	0014      	movs	r4, r2
    547a:	2900      	cmp	r1, #0
    547c:	da07      	bge.n	548e <__swhatbuf_r+0x22>
    547e:	2300      	movs	r3, #0
    5480:	602b      	str	r3, [r5, #0]
    5482:	89b3      	ldrh	r3, [r6, #12]
    5484:	061b      	lsls	r3, r3, #24
    5486:	d411      	bmi.n	54ac <__swhatbuf_r+0x40>
    5488:	2380      	movs	r3, #128	; 0x80
    548a:	00db      	lsls	r3, r3, #3
    548c:	e00f      	b.n	54ae <__swhatbuf_r+0x42>
    548e:	aa01      	add	r2, sp, #4
    5490:	f000 fc9a 	bl	5dc8 <_fstat_r>
    5494:	2800      	cmp	r0, #0
    5496:	dbf2      	blt.n	547e <__swhatbuf_r+0x12>
    5498:	22f0      	movs	r2, #240	; 0xf0
    549a:	9b02      	ldr	r3, [sp, #8]
    549c:	0212      	lsls	r2, r2, #8
    549e:	4013      	ands	r3, r2
    54a0:	4a05      	ldr	r2, [pc, #20]	; (54b8 <__swhatbuf_r+0x4c>)
    54a2:	189b      	adds	r3, r3, r2
    54a4:	425a      	negs	r2, r3
    54a6:	4153      	adcs	r3, r2
    54a8:	602b      	str	r3, [r5, #0]
    54aa:	e7ed      	b.n	5488 <__swhatbuf_r+0x1c>
    54ac:	2340      	movs	r3, #64	; 0x40
    54ae:	2000      	movs	r0, #0
    54b0:	6023      	str	r3, [r4, #0]
    54b2:	b010      	add	sp, #64	; 0x40
    54b4:	bd70      	pop	{r4, r5, r6, pc}
    54b6:	46c0      	nop			; (mov r8, r8)
    54b8:	ffffe000 	.word	0xffffe000

000054bc <__smakebuf_r>:
    54bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    54be:	2602      	movs	r6, #2
    54c0:	898b      	ldrh	r3, [r1, #12]
    54c2:	0005      	movs	r5, r0
    54c4:	000c      	movs	r4, r1
    54c6:	4233      	tst	r3, r6
    54c8:	d006      	beq.n	54d8 <__smakebuf_r+0x1c>
    54ca:	0023      	movs	r3, r4
    54cc:	3347      	adds	r3, #71	; 0x47
    54ce:	6023      	str	r3, [r4, #0]
    54d0:	6123      	str	r3, [r4, #16]
    54d2:	2301      	movs	r3, #1
    54d4:	6163      	str	r3, [r4, #20]
    54d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    54d8:	ab01      	add	r3, sp, #4
    54da:	466a      	mov	r2, sp
    54dc:	f7ff ffc6 	bl	546c <__swhatbuf_r>
    54e0:	9900      	ldr	r1, [sp, #0]
    54e2:	0007      	movs	r7, r0
    54e4:	0028      	movs	r0, r5
    54e6:	f7ff fc27 	bl	4d38 <_malloc_r>
    54ea:	2800      	cmp	r0, #0
    54ec:	d108      	bne.n	5500 <__smakebuf_r+0x44>
    54ee:	220c      	movs	r2, #12
    54f0:	5ea3      	ldrsh	r3, [r4, r2]
    54f2:	059a      	lsls	r2, r3, #22
    54f4:	d4ef      	bmi.n	54d6 <__smakebuf_r+0x1a>
    54f6:	2203      	movs	r2, #3
    54f8:	4393      	bics	r3, r2
    54fa:	431e      	orrs	r6, r3
    54fc:	81a6      	strh	r6, [r4, #12]
    54fe:	e7e4      	b.n	54ca <__smakebuf_r+0xe>
    5500:	4b0f      	ldr	r3, [pc, #60]	; (5540 <__smakebuf_r+0x84>)
    5502:	62ab      	str	r3, [r5, #40]	; 0x28
    5504:	2380      	movs	r3, #128	; 0x80
    5506:	89a2      	ldrh	r2, [r4, #12]
    5508:	6020      	str	r0, [r4, #0]
    550a:	4313      	orrs	r3, r2
    550c:	81a3      	strh	r3, [r4, #12]
    550e:	9b00      	ldr	r3, [sp, #0]
    5510:	6120      	str	r0, [r4, #16]
    5512:	6163      	str	r3, [r4, #20]
    5514:	9b01      	ldr	r3, [sp, #4]
    5516:	2b00      	cmp	r3, #0
    5518:	d00d      	beq.n	5536 <__smakebuf_r+0x7a>
    551a:	230e      	movs	r3, #14
    551c:	5ee1      	ldrsh	r1, [r4, r3]
    551e:	0028      	movs	r0, r5
    5520:	f000 fc64 	bl	5dec <_isatty_r>
    5524:	2800      	cmp	r0, #0
    5526:	d006      	beq.n	5536 <__smakebuf_r+0x7a>
    5528:	2203      	movs	r2, #3
    552a:	89a3      	ldrh	r3, [r4, #12]
    552c:	4393      	bics	r3, r2
    552e:	001a      	movs	r2, r3
    5530:	2301      	movs	r3, #1
    5532:	4313      	orrs	r3, r2
    5534:	81a3      	strh	r3, [r4, #12]
    5536:	89a0      	ldrh	r0, [r4, #12]
    5538:	4338      	orrs	r0, r7
    553a:	81a0      	strh	r0, [r4, #12]
    553c:	e7cb      	b.n	54d6 <__smakebuf_r+0x1a>
    553e:	46c0      	nop			; (mov r8, r8)
    5540:	000052bd 	.word	0x000052bd

00005544 <__malloc_lock>:
    5544:	4770      	bx	lr

00005546 <__malloc_unlock>:
    5546:	4770      	bx	lr

00005548 <__sfputc_r>:
    5548:	6893      	ldr	r3, [r2, #8]
    554a:	b510      	push	{r4, lr}
    554c:	3b01      	subs	r3, #1
    554e:	6093      	str	r3, [r2, #8]
    5550:	2b00      	cmp	r3, #0
    5552:	da05      	bge.n	5560 <__sfputc_r+0x18>
    5554:	6994      	ldr	r4, [r2, #24]
    5556:	42a3      	cmp	r3, r4
    5558:	db08      	blt.n	556c <__sfputc_r+0x24>
    555a:	b2cb      	uxtb	r3, r1
    555c:	2b0a      	cmp	r3, #10
    555e:	d005      	beq.n	556c <__sfputc_r+0x24>
    5560:	6813      	ldr	r3, [r2, #0]
    5562:	1c58      	adds	r0, r3, #1
    5564:	6010      	str	r0, [r2, #0]
    5566:	7019      	strb	r1, [r3, #0]
    5568:	b2c8      	uxtb	r0, r1
    556a:	bd10      	pop	{r4, pc}
    556c:	f000 fb3a 	bl	5be4 <__swbuf_r>
    5570:	e7fb      	b.n	556a <__sfputc_r+0x22>

00005572 <__sfputs_r>:
    5572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5574:	0006      	movs	r6, r0
    5576:	000f      	movs	r7, r1
    5578:	0014      	movs	r4, r2
    557a:	18d5      	adds	r5, r2, r3
    557c:	42ac      	cmp	r4, r5
    557e:	d101      	bne.n	5584 <__sfputs_r+0x12>
    5580:	2000      	movs	r0, #0
    5582:	e007      	b.n	5594 <__sfputs_r+0x22>
    5584:	7821      	ldrb	r1, [r4, #0]
    5586:	003a      	movs	r2, r7
    5588:	0030      	movs	r0, r6
    558a:	f7ff ffdd 	bl	5548 <__sfputc_r>
    558e:	3401      	adds	r4, #1
    5590:	1c43      	adds	r3, r0, #1
    5592:	d1f3      	bne.n	557c <__sfputs_r+0xa>
    5594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005598 <_vfiprintf_r>:
    5598:	b5f0      	push	{r4, r5, r6, r7, lr}
    559a:	b09f      	sub	sp, #124	; 0x7c
    559c:	0006      	movs	r6, r0
    559e:	000f      	movs	r7, r1
    55a0:	0014      	movs	r4, r2
    55a2:	9305      	str	r3, [sp, #20]
    55a4:	2800      	cmp	r0, #0
    55a6:	d004      	beq.n	55b2 <_vfiprintf_r+0x1a>
    55a8:	6983      	ldr	r3, [r0, #24]
    55aa:	2b00      	cmp	r3, #0
    55ac:	d101      	bne.n	55b2 <_vfiprintf_r+0x1a>
    55ae:	f7ff fec7 	bl	5340 <__sinit>
    55b2:	4b7f      	ldr	r3, [pc, #508]	; (57b0 <_vfiprintf_r+0x218>)
    55b4:	429f      	cmp	r7, r3
    55b6:	d15c      	bne.n	5672 <_vfiprintf_r+0xda>
    55b8:	6877      	ldr	r7, [r6, #4]
    55ba:	89bb      	ldrh	r3, [r7, #12]
    55bc:	071b      	lsls	r3, r3, #28
    55be:	d562      	bpl.n	5686 <_vfiprintf_r+0xee>
    55c0:	693b      	ldr	r3, [r7, #16]
    55c2:	2b00      	cmp	r3, #0
    55c4:	d05f      	beq.n	5686 <_vfiprintf_r+0xee>
    55c6:	2300      	movs	r3, #0
    55c8:	ad06      	add	r5, sp, #24
    55ca:	616b      	str	r3, [r5, #20]
    55cc:	3320      	adds	r3, #32
    55ce:	766b      	strb	r3, [r5, #25]
    55d0:	3310      	adds	r3, #16
    55d2:	76ab      	strb	r3, [r5, #26]
    55d4:	9402      	str	r4, [sp, #8]
    55d6:	9c02      	ldr	r4, [sp, #8]
    55d8:	7823      	ldrb	r3, [r4, #0]
    55da:	2b00      	cmp	r3, #0
    55dc:	d15d      	bne.n	569a <_vfiprintf_r+0x102>
    55de:	9b02      	ldr	r3, [sp, #8]
    55e0:	1ae3      	subs	r3, r4, r3
    55e2:	9304      	str	r3, [sp, #16]
    55e4:	d00d      	beq.n	5602 <_vfiprintf_r+0x6a>
    55e6:	9b04      	ldr	r3, [sp, #16]
    55e8:	9a02      	ldr	r2, [sp, #8]
    55ea:	0039      	movs	r1, r7
    55ec:	0030      	movs	r0, r6
    55ee:	f7ff ffc0 	bl	5572 <__sfputs_r>
    55f2:	1c43      	adds	r3, r0, #1
    55f4:	d100      	bne.n	55f8 <_vfiprintf_r+0x60>
    55f6:	e0cc      	b.n	5792 <_vfiprintf_r+0x1fa>
    55f8:	696a      	ldr	r2, [r5, #20]
    55fa:	9b04      	ldr	r3, [sp, #16]
    55fc:	4694      	mov	ip, r2
    55fe:	4463      	add	r3, ip
    5600:	616b      	str	r3, [r5, #20]
    5602:	7823      	ldrb	r3, [r4, #0]
    5604:	2b00      	cmp	r3, #0
    5606:	d100      	bne.n	560a <_vfiprintf_r+0x72>
    5608:	e0c3      	b.n	5792 <_vfiprintf_r+0x1fa>
    560a:	2201      	movs	r2, #1
    560c:	2300      	movs	r3, #0
    560e:	4252      	negs	r2, r2
    5610:	606a      	str	r2, [r5, #4]
    5612:	a902      	add	r1, sp, #8
    5614:	3254      	adds	r2, #84	; 0x54
    5616:	1852      	adds	r2, r2, r1
    5618:	3401      	adds	r4, #1
    561a:	602b      	str	r3, [r5, #0]
    561c:	60eb      	str	r3, [r5, #12]
    561e:	60ab      	str	r3, [r5, #8]
    5620:	7013      	strb	r3, [r2, #0]
    5622:	65ab      	str	r3, [r5, #88]	; 0x58
    5624:	7821      	ldrb	r1, [r4, #0]
    5626:	2205      	movs	r2, #5
    5628:	4862      	ldr	r0, [pc, #392]	; (57b4 <_vfiprintf_r+0x21c>)
    562a:	f000 fc05 	bl	5e38 <memchr>
    562e:	1c63      	adds	r3, r4, #1
    5630:	469c      	mov	ip, r3
    5632:	2800      	cmp	r0, #0
    5634:	d135      	bne.n	56a2 <_vfiprintf_r+0x10a>
    5636:	6829      	ldr	r1, [r5, #0]
    5638:	06cb      	lsls	r3, r1, #27
    563a:	d504      	bpl.n	5646 <_vfiprintf_r+0xae>
    563c:	2353      	movs	r3, #83	; 0x53
    563e:	aa02      	add	r2, sp, #8
    5640:	3020      	adds	r0, #32
    5642:	189b      	adds	r3, r3, r2
    5644:	7018      	strb	r0, [r3, #0]
    5646:	070b      	lsls	r3, r1, #28
    5648:	d504      	bpl.n	5654 <_vfiprintf_r+0xbc>
    564a:	2353      	movs	r3, #83	; 0x53
    564c:	202b      	movs	r0, #43	; 0x2b
    564e:	aa02      	add	r2, sp, #8
    5650:	189b      	adds	r3, r3, r2
    5652:	7018      	strb	r0, [r3, #0]
    5654:	7823      	ldrb	r3, [r4, #0]
    5656:	2b2a      	cmp	r3, #42	; 0x2a
    5658:	d02c      	beq.n	56b4 <_vfiprintf_r+0x11c>
    565a:	2000      	movs	r0, #0
    565c:	210a      	movs	r1, #10
    565e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5660:	7822      	ldrb	r2, [r4, #0]
    5662:	3a30      	subs	r2, #48	; 0x30
    5664:	2a09      	cmp	r2, #9
    5666:	d800      	bhi.n	566a <_vfiprintf_r+0xd2>
    5668:	e06b      	b.n	5742 <_vfiprintf_r+0x1aa>
    566a:	2800      	cmp	r0, #0
    566c:	d02a      	beq.n	56c4 <_vfiprintf_r+0x12c>
    566e:	9309      	str	r3, [sp, #36]	; 0x24
    5670:	e028      	b.n	56c4 <_vfiprintf_r+0x12c>
    5672:	4b51      	ldr	r3, [pc, #324]	; (57b8 <_vfiprintf_r+0x220>)
    5674:	429f      	cmp	r7, r3
    5676:	d101      	bne.n	567c <_vfiprintf_r+0xe4>
    5678:	68b7      	ldr	r7, [r6, #8]
    567a:	e79e      	b.n	55ba <_vfiprintf_r+0x22>
    567c:	4b4f      	ldr	r3, [pc, #316]	; (57bc <_vfiprintf_r+0x224>)
    567e:	429f      	cmp	r7, r3
    5680:	d19b      	bne.n	55ba <_vfiprintf_r+0x22>
    5682:	68f7      	ldr	r7, [r6, #12]
    5684:	e799      	b.n	55ba <_vfiprintf_r+0x22>
    5686:	0039      	movs	r1, r7
    5688:	0030      	movs	r0, r6
    568a:	f000 fb15 	bl	5cb8 <__swsetup_r>
    568e:	2800      	cmp	r0, #0
    5690:	d099      	beq.n	55c6 <_vfiprintf_r+0x2e>
    5692:	2001      	movs	r0, #1
    5694:	4240      	negs	r0, r0
    5696:	b01f      	add	sp, #124	; 0x7c
    5698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    569a:	2b25      	cmp	r3, #37	; 0x25
    569c:	d09f      	beq.n	55de <_vfiprintf_r+0x46>
    569e:	3401      	adds	r4, #1
    56a0:	e79a      	b.n	55d8 <_vfiprintf_r+0x40>
    56a2:	4b44      	ldr	r3, [pc, #272]	; (57b4 <_vfiprintf_r+0x21c>)
    56a4:	6829      	ldr	r1, [r5, #0]
    56a6:	1ac0      	subs	r0, r0, r3
    56a8:	2301      	movs	r3, #1
    56aa:	4083      	lsls	r3, r0
    56ac:	430b      	orrs	r3, r1
    56ae:	602b      	str	r3, [r5, #0]
    56b0:	4664      	mov	r4, ip
    56b2:	e7b7      	b.n	5624 <_vfiprintf_r+0x8c>
    56b4:	9b05      	ldr	r3, [sp, #20]
    56b6:	1d18      	adds	r0, r3, #4
    56b8:	681b      	ldr	r3, [r3, #0]
    56ba:	9005      	str	r0, [sp, #20]
    56bc:	2b00      	cmp	r3, #0
    56be:	db3a      	blt.n	5736 <_vfiprintf_r+0x19e>
    56c0:	9309      	str	r3, [sp, #36]	; 0x24
    56c2:	4664      	mov	r4, ip
    56c4:	7823      	ldrb	r3, [r4, #0]
    56c6:	2b2e      	cmp	r3, #46	; 0x2e
    56c8:	d10b      	bne.n	56e2 <_vfiprintf_r+0x14a>
    56ca:	7863      	ldrb	r3, [r4, #1]
    56cc:	1c62      	adds	r2, r4, #1
    56ce:	2b2a      	cmp	r3, #42	; 0x2a
    56d0:	d13f      	bne.n	5752 <_vfiprintf_r+0x1ba>
    56d2:	9b05      	ldr	r3, [sp, #20]
    56d4:	3402      	adds	r4, #2
    56d6:	1d1a      	adds	r2, r3, #4
    56d8:	681b      	ldr	r3, [r3, #0]
    56da:	9205      	str	r2, [sp, #20]
    56dc:	2b00      	cmp	r3, #0
    56de:	db35      	blt.n	574c <_vfiprintf_r+0x1b4>
    56e0:	9307      	str	r3, [sp, #28]
    56e2:	7821      	ldrb	r1, [r4, #0]
    56e4:	2203      	movs	r2, #3
    56e6:	4836      	ldr	r0, [pc, #216]	; (57c0 <_vfiprintf_r+0x228>)
    56e8:	f000 fba6 	bl	5e38 <memchr>
    56ec:	2800      	cmp	r0, #0
    56ee:	d007      	beq.n	5700 <_vfiprintf_r+0x168>
    56f0:	4b33      	ldr	r3, [pc, #204]	; (57c0 <_vfiprintf_r+0x228>)
    56f2:	682a      	ldr	r2, [r5, #0]
    56f4:	1ac0      	subs	r0, r0, r3
    56f6:	2340      	movs	r3, #64	; 0x40
    56f8:	4083      	lsls	r3, r0
    56fa:	4313      	orrs	r3, r2
    56fc:	602b      	str	r3, [r5, #0]
    56fe:	3401      	adds	r4, #1
    5700:	7821      	ldrb	r1, [r4, #0]
    5702:	1c63      	adds	r3, r4, #1
    5704:	2206      	movs	r2, #6
    5706:	482f      	ldr	r0, [pc, #188]	; (57c4 <_vfiprintf_r+0x22c>)
    5708:	9302      	str	r3, [sp, #8]
    570a:	7629      	strb	r1, [r5, #24]
    570c:	f000 fb94 	bl	5e38 <memchr>
    5710:	2800      	cmp	r0, #0
    5712:	d044      	beq.n	579e <_vfiprintf_r+0x206>
    5714:	4b2c      	ldr	r3, [pc, #176]	; (57c8 <_vfiprintf_r+0x230>)
    5716:	2b00      	cmp	r3, #0
    5718:	d12f      	bne.n	577a <_vfiprintf_r+0x1e2>
    571a:	6829      	ldr	r1, [r5, #0]
    571c:	9b05      	ldr	r3, [sp, #20]
    571e:	2207      	movs	r2, #7
    5720:	05c9      	lsls	r1, r1, #23
    5722:	d528      	bpl.n	5776 <_vfiprintf_r+0x1de>
    5724:	189b      	adds	r3, r3, r2
    5726:	4393      	bics	r3, r2
    5728:	3308      	adds	r3, #8
    572a:	9305      	str	r3, [sp, #20]
    572c:	696b      	ldr	r3, [r5, #20]
    572e:	9a03      	ldr	r2, [sp, #12]
    5730:	189b      	adds	r3, r3, r2
    5732:	616b      	str	r3, [r5, #20]
    5734:	e74f      	b.n	55d6 <_vfiprintf_r+0x3e>
    5736:	425b      	negs	r3, r3
    5738:	60eb      	str	r3, [r5, #12]
    573a:	2302      	movs	r3, #2
    573c:	430b      	orrs	r3, r1
    573e:	602b      	str	r3, [r5, #0]
    5740:	e7bf      	b.n	56c2 <_vfiprintf_r+0x12a>
    5742:	434b      	muls	r3, r1
    5744:	3401      	adds	r4, #1
    5746:	189b      	adds	r3, r3, r2
    5748:	2001      	movs	r0, #1
    574a:	e789      	b.n	5660 <_vfiprintf_r+0xc8>
    574c:	2301      	movs	r3, #1
    574e:	425b      	negs	r3, r3
    5750:	e7c6      	b.n	56e0 <_vfiprintf_r+0x148>
    5752:	2300      	movs	r3, #0
    5754:	0014      	movs	r4, r2
    5756:	200a      	movs	r0, #10
    5758:	001a      	movs	r2, r3
    575a:	606b      	str	r3, [r5, #4]
    575c:	7821      	ldrb	r1, [r4, #0]
    575e:	3930      	subs	r1, #48	; 0x30
    5760:	2909      	cmp	r1, #9
    5762:	d903      	bls.n	576c <_vfiprintf_r+0x1d4>
    5764:	2b00      	cmp	r3, #0
    5766:	d0bc      	beq.n	56e2 <_vfiprintf_r+0x14a>
    5768:	9207      	str	r2, [sp, #28]
    576a:	e7ba      	b.n	56e2 <_vfiprintf_r+0x14a>
    576c:	4342      	muls	r2, r0
    576e:	3401      	adds	r4, #1
    5770:	1852      	adds	r2, r2, r1
    5772:	2301      	movs	r3, #1
    5774:	e7f2      	b.n	575c <_vfiprintf_r+0x1c4>
    5776:	3307      	adds	r3, #7
    5778:	e7d5      	b.n	5726 <_vfiprintf_r+0x18e>
    577a:	ab05      	add	r3, sp, #20
    577c:	9300      	str	r3, [sp, #0]
    577e:	003a      	movs	r2, r7
    5780:	4b12      	ldr	r3, [pc, #72]	; (57cc <_vfiprintf_r+0x234>)
    5782:	0029      	movs	r1, r5
    5784:	0030      	movs	r0, r6
    5786:	e000      	b.n	578a <_vfiprintf_r+0x1f2>
    5788:	bf00      	nop
    578a:	9003      	str	r0, [sp, #12]
    578c:	9b03      	ldr	r3, [sp, #12]
    578e:	3301      	adds	r3, #1
    5790:	d1cc      	bne.n	572c <_vfiprintf_r+0x194>
    5792:	89bb      	ldrh	r3, [r7, #12]
    5794:	065b      	lsls	r3, r3, #25
    5796:	d500      	bpl.n	579a <_vfiprintf_r+0x202>
    5798:	e77b      	b.n	5692 <_vfiprintf_r+0xfa>
    579a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    579c:	e77b      	b.n	5696 <_vfiprintf_r+0xfe>
    579e:	ab05      	add	r3, sp, #20
    57a0:	9300      	str	r3, [sp, #0]
    57a2:	003a      	movs	r2, r7
    57a4:	4b09      	ldr	r3, [pc, #36]	; (57cc <_vfiprintf_r+0x234>)
    57a6:	0029      	movs	r1, r5
    57a8:	0030      	movs	r0, r6
    57aa:	f000 f87f 	bl	58ac <_printf_i>
    57ae:	e7ec      	b.n	578a <_vfiprintf_r+0x1f2>
    57b0:	00008340 	.word	0x00008340
    57b4:	00008380 	.word	0x00008380
    57b8:	00008360 	.word	0x00008360
    57bc:	00008320 	.word	0x00008320
    57c0:	00008386 	.word	0x00008386
    57c4:	0000838a 	.word	0x0000838a
    57c8:	00000000 	.word	0x00000000
    57cc:	00005573 	.word	0x00005573

000057d0 <_printf_common>:
    57d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    57d2:	0015      	movs	r5, r2
    57d4:	9301      	str	r3, [sp, #4]
    57d6:	688a      	ldr	r2, [r1, #8]
    57d8:	690b      	ldr	r3, [r1, #16]
    57da:	9000      	str	r0, [sp, #0]
    57dc:	000c      	movs	r4, r1
    57de:	4293      	cmp	r3, r2
    57e0:	da00      	bge.n	57e4 <_printf_common+0x14>
    57e2:	0013      	movs	r3, r2
    57e4:	0022      	movs	r2, r4
    57e6:	602b      	str	r3, [r5, #0]
    57e8:	3243      	adds	r2, #67	; 0x43
    57ea:	7812      	ldrb	r2, [r2, #0]
    57ec:	2a00      	cmp	r2, #0
    57ee:	d001      	beq.n	57f4 <_printf_common+0x24>
    57f0:	3301      	adds	r3, #1
    57f2:	602b      	str	r3, [r5, #0]
    57f4:	6823      	ldr	r3, [r4, #0]
    57f6:	069b      	lsls	r3, r3, #26
    57f8:	d502      	bpl.n	5800 <_printf_common+0x30>
    57fa:	682b      	ldr	r3, [r5, #0]
    57fc:	3302      	adds	r3, #2
    57fe:	602b      	str	r3, [r5, #0]
    5800:	2706      	movs	r7, #6
    5802:	6823      	ldr	r3, [r4, #0]
    5804:	401f      	ands	r7, r3
    5806:	d027      	beq.n	5858 <_printf_common+0x88>
    5808:	0023      	movs	r3, r4
    580a:	3343      	adds	r3, #67	; 0x43
    580c:	781b      	ldrb	r3, [r3, #0]
    580e:	1e5a      	subs	r2, r3, #1
    5810:	4193      	sbcs	r3, r2
    5812:	6822      	ldr	r2, [r4, #0]
    5814:	0692      	lsls	r2, r2, #26
    5816:	d430      	bmi.n	587a <_printf_common+0xaa>
    5818:	0022      	movs	r2, r4
    581a:	9901      	ldr	r1, [sp, #4]
    581c:	3243      	adds	r2, #67	; 0x43
    581e:	9800      	ldr	r0, [sp, #0]
    5820:	9e08      	ldr	r6, [sp, #32]
    5822:	47b0      	blx	r6
    5824:	1c43      	adds	r3, r0, #1
    5826:	d025      	beq.n	5874 <_printf_common+0xa4>
    5828:	2306      	movs	r3, #6
    582a:	6820      	ldr	r0, [r4, #0]
    582c:	682a      	ldr	r2, [r5, #0]
    582e:	68e1      	ldr	r1, [r4, #12]
    5830:	4003      	ands	r3, r0
    5832:	2500      	movs	r5, #0
    5834:	2b04      	cmp	r3, #4
    5836:	d103      	bne.n	5840 <_printf_common+0x70>
    5838:	1a8d      	subs	r5, r1, r2
    583a:	43eb      	mvns	r3, r5
    583c:	17db      	asrs	r3, r3, #31
    583e:	401d      	ands	r5, r3
    5840:	68a3      	ldr	r3, [r4, #8]
    5842:	6922      	ldr	r2, [r4, #16]
    5844:	4293      	cmp	r3, r2
    5846:	dd01      	ble.n	584c <_printf_common+0x7c>
    5848:	1a9b      	subs	r3, r3, r2
    584a:	18ed      	adds	r5, r5, r3
    584c:	2700      	movs	r7, #0
    584e:	42bd      	cmp	r5, r7
    5850:	d120      	bne.n	5894 <_printf_common+0xc4>
    5852:	2000      	movs	r0, #0
    5854:	e010      	b.n	5878 <_printf_common+0xa8>
    5856:	3701      	adds	r7, #1
    5858:	68e3      	ldr	r3, [r4, #12]
    585a:	682a      	ldr	r2, [r5, #0]
    585c:	1a9b      	subs	r3, r3, r2
    585e:	429f      	cmp	r7, r3
    5860:	dad2      	bge.n	5808 <_printf_common+0x38>
    5862:	0022      	movs	r2, r4
    5864:	2301      	movs	r3, #1
    5866:	3219      	adds	r2, #25
    5868:	9901      	ldr	r1, [sp, #4]
    586a:	9800      	ldr	r0, [sp, #0]
    586c:	9e08      	ldr	r6, [sp, #32]
    586e:	47b0      	blx	r6
    5870:	1c43      	adds	r3, r0, #1
    5872:	d1f0      	bne.n	5856 <_printf_common+0x86>
    5874:	2001      	movs	r0, #1
    5876:	4240      	negs	r0, r0
    5878:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    587a:	2030      	movs	r0, #48	; 0x30
    587c:	18e1      	adds	r1, r4, r3
    587e:	3143      	adds	r1, #67	; 0x43
    5880:	7008      	strb	r0, [r1, #0]
    5882:	0021      	movs	r1, r4
    5884:	1c5a      	adds	r2, r3, #1
    5886:	3145      	adds	r1, #69	; 0x45
    5888:	7809      	ldrb	r1, [r1, #0]
    588a:	18a2      	adds	r2, r4, r2
    588c:	3243      	adds	r2, #67	; 0x43
    588e:	3302      	adds	r3, #2
    5890:	7011      	strb	r1, [r2, #0]
    5892:	e7c1      	b.n	5818 <_printf_common+0x48>
    5894:	0022      	movs	r2, r4
    5896:	2301      	movs	r3, #1
    5898:	321a      	adds	r2, #26
    589a:	9901      	ldr	r1, [sp, #4]
    589c:	9800      	ldr	r0, [sp, #0]
    589e:	9e08      	ldr	r6, [sp, #32]
    58a0:	47b0      	blx	r6
    58a2:	1c43      	adds	r3, r0, #1
    58a4:	d0e6      	beq.n	5874 <_printf_common+0xa4>
    58a6:	3701      	adds	r7, #1
    58a8:	e7d1      	b.n	584e <_printf_common+0x7e>
	...

000058ac <_printf_i>:
    58ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    58ae:	b08b      	sub	sp, #44	; 0x2c
    58b0:	9206      	str	r2, [sp, #24]
    58b2:	000a      	movs	r2, r1
    58b4:	3243      	adds	r2, #67	; 0x43
    58b6:	9307      	str	r3, [sp, #28]
    58b8:	9005      	str	r0, [sp, #20]
    58ba:	9204      	str	r2, [sp, #16]
    58bc:	7e0a      	ldrb	r2, [r1, #24]
    58be:	000c      	movs	r4, r1
    58c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    58c2:	2a6e      	cmp	r2, #110	; 0x6e
    58c4:	d100      	bne.n	58c8 <_printf_i+0x1c>
    58c6:	e08f      	b.n	59e8 <_printf_i+0x13c>
    58c8:	d817      	bhi.n	58fa <_printf_i+0x4e>
    58ca:	2a63      	cmp	r2, #99	; 0x63
    58cc:	d02c      	beq.n	5928 <_printf_i+0x7c>
    58ce:	d808      	bhi.n	58e2 <_printf_i+0x36>
    58d0:	2a00      	cmp	r2, #0
    58d2:	d100      	bne.n	58d6 <_printf_i+0x2a>
    58d4:	e099      	b.n	5a0a <_printf_i+0x15e>
    58d6:	2a58      	cmp	r2, #88	; 0x58
    58d8:	d054      	beq.n	5984 <_printf_i+0xd8>
    58da:	0026      	movs	r6, r4
    58dc:	3642      	adds	r6, #66	; 0x42
    58de:	7032      	strb	r2, [r6, #0]
    58e0:	e029      	b.n	5936 <_printf_i+0x8a>
    58e2:	2a64      	cmp	r2, #100	; 0x64
    58e4:	d001      	beq.n	58ea <_printf_i+0x3e>
    58e6:	2a69      	cmp	r2, #105	; 0x69
    58e8:	d1f7      	bne.n	58da <_printf_i+0x2e>
    58ea:	6821      	ldr	r1, [r4, #0]
    58ec:	681a      	ldr	r2, [r3, #0]
    58ee:	0608      	lsls	r0, r1, #24
    58f0:	d523      	bpl.n	593a <_printf_i+0x8e>
    58f2:	1d11      	adds	r1, r2, #4
    58f4:	6019      	str	r1, [r3, #0]
    58f6:	6815      	ldr	r5, [r2, #0]
    58f8:	e025      	b.n	5946 <_printf_i+0x9a>
    58fa:	2a73      	cmp	r2, #115	; 0x73
    58fc:	d100      	bne.n	5900 <_printf_i+0x54>
    58fe:	e088      	b.n	5a12 <_printf_i+0x166>
    5900:	d808      	bhi.n	5914 <_printf_i+0x68>
    5902:	2a6f      	cmp	r2, #111	; 0x6f
    5904:	d029      	beq.n	595a <_printf_i+0xae>
    5906:	2a70      	cmp	r2, #112	; 0x70
    5908:	d1e7      	bne.n	58da <_printf_i+0x2e>
    590a:	2220      	movs	r2, #32
    590c:	6809      	ldr	r1, [r1, #0]
    590e:	430a      	orrs	r2, r1
    5910:	6022      	str	r2, [r4, #0]
    5912:	e003      	b.n	591c <_printf_i+0x70>
    5914:	2a75      	cmp	r2, #117	; 0x75
    5916:	d020      	beq.n	595a <_printf_i+0xae>
    5918:	2a78      	cmp	r2, #120	; 0x78
    591a:	d1de      	bne.n	58da <_printf_i+0x2e>
    591c:	0022      	movs	r2, r4
    591e:	2178      	movs	r1, #120	; 0x78
    5920:	3245      	adds	r2, #69	; 0x45
    5922:	7011      	strb	r1, [r2, #0]
    5924:	4a6c      	ldr	r2, [pc, #432]	; (5ad8 <_printf_i+0x22c>)
    5926:	e030      	b.n	598a <_printf_i+0xde>
    5928:	000e      	movs	r6, r1
    592a:	681a      	ldr	r2, [r3, #0]
    592c:	3642      	adds	r6, #66	; 0x42
    592e:	1d11      	adds	r1, r2, #4
    5930:	6019      	str	r1, [r3, #0]
    5932:	6813      	ldr	r3, [r2, #0]
    5934:	7033      	strb	r3, [r6, #0]
    5936:	2301      	movs	r3, #1
    5938:	e079      	b.n	5a2e <_printf_i+0x182>
    593a:	0649      	lsls	r1, r1, #25
    593c:	d5d9      	bpl.n	58f2 <_printf_i+0x46>
    593e:	1d11      	adds	r1, r2, #4
    5940:	6019      	str	r1, [r3, #0]
    5942:	2300      	movs	r3, #0
    5944:	5ed5      	ldrsh	r5, [r2, r3]
    5946:	2d00      	cmp	r5, #0
    5948:	da03      	bge.n	5952 <_printf_i+0xa6>
    594a:	232d      	movs	r3, #45	; 0x2d
    594c:	9a04      	ldr	r2, [sp, #16]
    594e:	426d      	negs	r5, r5
    5950:	7013      	strb	r3, [r2, #0]
    5952:	4b62      	ldr	r3, [pc, #392]	; (5adc <_printf_i+0x230>)
    5954:	270a      	movs	r7, #10
    5956:	9303      	str	r3, [sp, #12]
    5958:	e02f      	b.n	59ba <_printf_i+0x10e>
    595a:	6820      	ldr	r0, [r4, #0]
    595c:	6819      	ldr	r1, [r3, #0]
    595e:	0605      	lsls	r5, r0, #24
    5960:	d503      	bpl.n	596a <_printf_i+0xbe>
    5962:	1d08      	adds	r0, r1, #4
    5964:	6018      	str	r0, [r3, #0]
    5966:	680d      	ldr	r5, [r1, #0]
    5968:	e005      	b.n	5976 <_printf_i+0xca>
    596a:	0640      	lsls	r0, r0, #25
    596c:	d5f9      	bpl.n	5962 <_printf_i+0xb6>
    596e:	680d      	ldr	r5, [r1, #0]
    5970:	1d08      	adds	r0, r1, #4
    5972:	6018      	str	r0, [r3, #0]
    5974:	b2ad      	uxth	r5, r5
    5976:	4b59      	ldr	r3, [pc, #356]	; (5adc <_printf_i+0x230>)
    5978:	2708      	movs	r7, #8
    597a:	9303      	str	r3, [sp, #12]
    597c:	2a6f      	cmp	r2, #111	; 0x6f
    597e:	d018      	beq.n	59b2 <_printf_i+0x106>
    5980:	270a      	movs	r7, #10
    5982:	e016      	b.n	59b2 <_printf_i+0x106>
    5984:	3145      	adds	r1, #69	; 0x45
    5986:	700a      	strb	r2, [r1, #0]
    5988:	4a54      	ldr	r2, [pc, #336]	; (5adc <_printf_i+0x230>)
    598a:	9203      	str	r2, [sp, #12]
    598c:	681a      	ldr	r2, [r3, #0]
    598e:	6821      	ldr	r1, [r4, #0]
    5990:	1d10      	adds	r0, r2, #4
    5992:	6018      	str	r0, [r3, #0]
    5994:	6815      	ldr	r5, [r2, #0]
    5996:	0608      	lsls	r0, r1, #24
    5998:	d522      	bpl.n	59e0 <_printf_i+0x134>
    599a:	07cb      	lsls	r3, r1, #31
    599c:	d502      	bpl.n	59a4 <_printf_i+0xf8>
    599e:	2320      	movs	r3, #32
    59a0:	4319      	orrs	r1, r3
    59a2:	6021      	str	r1, [r4, #0]
    59a4:	2710      	movs	r7, #16
    59a6:	2d00      	cmp	r5, #0
    59a8:	d103      	bne.n	59b2 <_printf_i+0x106>
    59aa:	2320      	movs	r3, #32
    59ac:	6822      	ldr	r2, [r4, #0]
    59ae:	439a      	bics	r2, r3
    59b0:	6022      	str	r2, [r4, #0]
    59b2:	0023      	movs	r3, r4
    59b4:	2200      	movs	r2, #0
    59b6:	3343      	adds	r3, #67	; 0x43
    59b8:	701a      	strb	r2, [r3, #0]
    59ba:	6863      	ldr	r3, [r4, #4]
    59bc:	60a3      	str	r3, [r4, #8]
    59be:	2b00      	cmp	r3, #0
    59c0:	db5c      	blt.n	5a7c <_printf_i+0x1d0>
    59c2:	2204      	movs	r2, #4
    59c4:	6821      	ldr	r1, [r4, #0]
    59c6:	4391      	bics	r1, r2
    59c8:	6021      	str	r1, [r4, #0]
    59ca:	2d00      	cmp	r5, #0
    59cc:	d158      	bne.n	5a80 <_printf_i+0x1d4>
    59ce:	9e04      	ldr	r6, [sp, #16]
    59d0:	2b00      	cmp	r3, #0
    59d2:	d064      	beq.n	5a9e <_printf_i+0x1f2>
    59d4:	0026      	movs	r6, r4
    59d6:	9b03      	ldr	r3, [sp, #12]
    59d8:	3642      	adds	r6, #66	; 0x42
    59da:	781b      	ldrb	r3, [r3, #0]
    59dc:	7033      	strb	r3, [r6, #0]
    59de:	e05e      	b.n	5a9e <_printf_i+0x1f2>
    59e0:	0648      	lsls	r0, r1, #25
    59e2:	d5da      	bpl.n	599a <_printf_i+0xee>
    59e4:	b2ad      	uxth	r5, r5
    59e6:	e7d8      	b.n	599a <_printf_i+0xee>
    59e8:	6809      	ldr	r1, [r1, #0]
    59ea:	681a      	ldr	r2, [r3, #0]
    59ec:	0608      	lsls	r0, r1, #24
    59ee:	d505      	bpl.n	59fc <_printf_i+0x150>
    59f0:	1d11      	adds	r1, r2, #4
    59f2:	6019      	str	r1, [r3, #0]
    59f4:	6813      	ldr	r3, [r2, #0]
    59f6:	6962      	ldr	r2, [r4, #20]
    59f8:	601a      	str	r2, [r3, #0]
    59fa:	e006      	b.n	5a0a <_printf_i+0x15e>
    59fc:	0649      	lsls	r1, r1, #25
    59fe:	d5f7      	bpl.n	59f0 <_printf_i+0x144>
    5a00:	1d11      	adds	r1, r2, #4
    5a02:	6019      	str	r1, [r3, #0]
    5a04:	6813      	ldr	r3, [r2, #0]
    5a06:	8aa2      	ldrh	r2, [r4, #20]
    5a08:	801a      	strh	r2, [r3, #0]
    5a0a:	2300      	movs	r3, #0
    5a0c:	9e04      	ldr	r6, [sp, #16]
    5a0e:	6123      	str	r3, [r4, #16]
    5a10:	e054      	b.n	5abc <_printf_i+0x210>
    5a12:	681a      	ldr	r2, [r3, #0]
    5a14:	1d11      	adds	r1, r2, #4
    5a16:	6019      	str	r1, [r3, #0]
    5a18:	6816      	ldr	r6, [r2, #0]
    5a1a:	2100      	movs	r1, #0
    5a1c:	6862      	ldr	r2, [r4, #4]
    5a1e:	0030      	movs	r0, r6
    5a20:	f000 fa0a 	bl	5e38 <memchr>
    5a24:	2800      	cmp	r0, #0
    5a26:	d001      	beq.n	5a2c <_printf_i+0x180>
    5a28:	1b80      	subs	r0, r0, r6
    5a2a:	6060      	str	r0, [r4, #4]
    5a2c:	6863      	ldr	r3, [r4, #4]
    5a2e:	6123      	str	r3, [r4, #16]
    5a30:	2300      	movs	r3, #0
    5a32:	9a04      	ldr	r2, [sp, #16]
    5a34:	7013      	strb	r3, [r2, #0]
    5a36:	e041      	b.n	5abc <_printf_i+0x210>
    5a38:	6923      	ldr	r3, [r4, #16]
    5a3a:	0032      	movs	r2, r6
    5a3c:	9906      	ldr	r1, [sp, #24]
    5a3e:	9805      	ldr	r0, [sp, #20]
    5a40:	9d07      	ldr	r5, [sp, #28]
    5a42:	47a8      	blx	r5
    5a44:	1c43      	adds	r3, r0, #1
    5a46:	d043      	beq.n	5ad0 <_printf_i+0x224>
    5a48:	6823      	ldr	r3, [r4, #0]
    5a4a:	2500      	movs	r5, #0
    5a4c:	079b      	lsls	r3, r3, #30
    5a4e:	d40f      	bmi.n	5a70 <_printf_i+0x1c4>
    5a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a52:	68e0      	ldr	r0, [r4, #12]
    5a54:	4298      	cmp	r0, r3
    5a56:	da3d      	bge.n	5ad4 <_printf_i+0x228>
    5a58:	0018      	movs	r0, r3
    5a5a:	e03b      	b.n	5ad4 <_printf_i+0x228>
    5a5c:	0022      	movs	r2, r4
    5a5e:	2301      	movs	r3, #1
    5a60:	3219      	adds	r2, #25
    5a62:	9906      	ldr	r1, [sp, #24]
    5a64:	9805      	ldr	r0, [sp, #20]
    5a66:	9e07      	ldr	r6, [sp, #28]
    5a68:	47b0      	blx	r6
    5a6a:	1c43      	adds	r3, r0, #1
    5a6c:	d030      	beq.n	5ad0 <_printf_i+0x224>
    5a6e:	3501      	adds	r5, #1
    5a70:	68e3      	ldr	r3, [r4, #12]
    5a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5a74:	1a9b      	subs	r3, r3, r2
    5a76:	429d      	cmp	r5, r3
    5a78:	dbf0      	blt.n	5a5c <_printf_i+0x1b0>
    5a7a:	e7e9      	b.n	5a50 <_printf_i+0x1a4>
    5a7c:	2d00      	cmp	r5, #0
    5a7e:	d0a9      	beq.n	59d4 <_printf_i+0x128>
    5a80:	9e04      	ldr	r6, [sp, #16]
    5a82:	0028      	movs	r0, r5
    5a84:	0039      	movs	r1, r7
    5a86:	f7fe ff97 	bl	49b8 <__aeabi_uidivmod>
    5a8a:	9b03      	ldr	r3, [sp, #12]
    5a8c:	3e01      	subs	r6, #1
    5a8e:	5c5b      	ldrb	r3, [r3, r1]
    5a90:	0028      	movs	r0, r5
    5a92:	7033      	strb	r3, [r6, #0]
    5a94:	0039      	movs	r1, r7
    5a96:	f7fe ff09 	bl	48ac <__udivsi3>
    5a9a:	1e05      	subs	r5, r0, #0
    5a9c:	d1f1      	bne.n	5a82 <_printf_i+0x1d6>
    5a9e:	2f08      	cmp	r7, #8
    5aa0:	d109      	bne.n	5ab6 <_printf_i+0x20a>
    5aa2:	6823      	ldr	r3, [r4, #0]
    5aa4:	07db      	lsls	r3, r3, #31
    5aa6:	d506      	bpl.n	5ab6 <_printf_i+0x20a>
    5aa8:	6863      	ldr	r3, [r4, #4]
    5aaa:	6922      	ldr	r2, [r4, #16]
    5aac:	4293      	cmp	r3, r2
    5aae:	dc02      	bgt.n	5ab6 <_printf_i+0x20a>
    5ab0:	2330      	movs	r3, #48	; 0x30
    5ab2:	3e01      	subs	r6, #1
    5ab4:	7033      	strb	r3, [r6, #0]
    5ab6:	9b04      	ldr	r3, [sp, #16]
    5ab8:	1b9b      	subs	r3, r3, r6
    5aba:	6123      	str	r3, [r4, #16]
    5abc:	9b07      	ldr	r3, [sp, #28]
    5abe:	aa09      	add	r2, sp, #36	; 0x24
    5ac0:	9300      	str	r3, [sp, #0]
    5ac2:	0021      	movs	r1, r4
    5ac4:	9b06      	ldr	r3, [sp, #24]
    5ac6:	9805      	ldr	r0, [sp, #20]
    5ac8:	f7ff fe82 	bl	57d0 <_printf_common>
    5acc:	1c43      	adds	r3, r0, #1
    5ace:	d1b3      	bne.n	5a38 <_printf_i+0x18c>
    5ad0:	2001      	movs	r0, #1
    5ad2:	4240      	negs	r0, r0
    5ad4:	b00b      	add	sp, #44	; 0x2c
    5ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ad8:	000083a2 	.word	0x000083a2
    5adc:	00008391 	.word	0x00008391

00005ae0 <_putc_r>:
    5ae0:	b570      	push	{r4, r5, r6, lr}
    5ae2:	0006      	movs	r6, r0
    5ae4:	000d      	movs	r5, r1
    5ae6:	0014      	movs	r4, r2
    5ae8:	2800      	cmp	r0, #0
    5aea:	d004      	beq.n	5af6 <_putc_r+0x16>
    5aec:	6983      	ldr	r3, [r0, #24]
    5aee:	2b00      	cmp	r3, #0
    5af0:	d101      	bne.n	5af6 <_putc_r+0x16>
    5af2:	f7ff fc25 	bl	5340 <__sinit>
    5af6:	4b12      	ldr	r3, [pc, #72]	; (5b40 <_putc_r+0x60>)
    5af8:	429c      	cmp	r4, r3
    5afa:	d111      	bne.n	5b20 <_putc_r+0x40>
    5afc:	6874      	ldr	r4, [r6, #4]
    5afe:	68a3      	ldr	r3, [r4, #8]
    5b00:	3b01      	subs	r3, #1
    5b02:	60a3      	str	r3, [r4, #8]
    5b04:	2b00      	cmp	r3, #0
    5b06:	da05      	bge.n	5b14 <_putc_r+0x34>
    5b08:	69a2      	ldr	r2, [r4, #24]
    5b0a:	4293      	cmp	r3, r2
    5b0c:	db12      	blt.n	5b34 <_putc_r+0x54>
    5b0e:	b2eb      	uxtb	r3, r5
    5b10:	2b0a      	cmp	r3, #10
    5b12:	d00f      	beq.n	5b34 <_putc_r+0x54>
    5b14:	6823      	ldr	r3, [r4, #0]
    5b16:	b2e8      	uxtb	r0, r5
    5b18:	1c5a      	adds	r2, r3, #1
    5b1a:	6022      	str	r2, [r4, #0]
    5b1c:	701d      	strb	r5, [r3, #0]
    5b1e:	bd70      	pop	{r4, r5, r6, pc}
    5b20:	4b08      	ldr	r3, [pc, #32]	; (5b44 <_putc_r+0x64>)
    5b22:	429c      	cmp	r4, r3
    5b24:	d101      	bne.n	5b2a <_putc_r+0x4a>
    5b26:	68b4      	ldr	r4, [r6, #8]
    5b28:	e7e9      	b.n	5afe <_putc_r+0x1e>
    5b2a:	4b07      	ldr	r3, [pc, #28]	; (5b48 <_putc_r+0x68>)
    5b2c:	429c      	cmp	r4, r3
    5b2e:	d1e6      	bne.n	5afe <_putc_r+0x1e>
    5b30:	68f4      	ldr	r4, [r6, #12]
    5b32:	e7e4      	b.n	5afe <_putc_r+0x1e>
    5b34:	0022      	movs	r2, r4
    5b36:	0029      	movs	r1, r5
    5b38:	0030      	movs	r0, r6
    5b3a:	f000 f853 	bl	5be4 <__swbuf_r>
    5b3e:	e7ee      	b.n	5b1e <_putc_r+0x3e>
    5b40:	00008340 	.word	0x00008340
    5b44:	00008360 	.word	0x00008360
    5b48:	00008320 	.word	0x00008320

00005b4c <__sread>:
    5b4c:	b570      	push	{r4, r5, r6, lr}
    5b4e:	000c      	movs	r4, r1
    5b50:	250e      	movs	r5, #14
    5b52:	5f49      	ldrsh	r1, [r1, r5]
    5b54:	f000 f97c 	bl	5e50 <_read_r>
    5b58:	2800      	cmp	r0, #0
    5b5a:	db03      	blt.n	5b64 <__sread+0x18>
    5b5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5b5e:	181b      	adds	r3, r3, r0
    5b60:	6563      	str	r3, [r4, #84]	; 0x54
    5b62:	bd70      	pop	{r4, r5, r6, pc}
    5b64:	89a3      	ldrh	r3, [r4, #12]
    5b66:	4a02      	ldr	r2, [pc, #8]	; (5b70 <__sread+0x24>)
    5b68:	4013      	ands	r3, r2
    5b6a:	81a3      	strh	r3, [r4, #12]
    5b6c:	e7f9      	b.n	5b62 <__sread+0x16>
    5b6e:	46c0      	nop			; (mov r8, r8)
    5b70:	ffffefff 	.word	0xffffefff

00005b74 <__swrite>:
    5b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b76:	001f      	movs	r7, r3
    5b78:	898b      	ldrh	r3, [r1, #12]
    5b7a:	0005      	movs	r5, r0
    5b7c:	000c      	movs	r4, r1
    5b7e:	0016      	movs	r6, r2
    5b80:	05db      	lsls	r3, r3, #23
    5b82:	d505      	bpl.n	5b90 <__swrite+0x1c>
    5b84:	230e      	movs	r3, #14
    5b86:	5ec9      	ldrsh	r1, [r1, r3]
    5b88:	2200      	movs	r2, #0
    5b8a:	2302      	movs	r3, #2
    5b8c:	f000 f940 	bl	5e10 <_lseek_r>
    5b90:	89a3      	ldrh	r3, [r4, #12]
    5b92:	4a05      	ldr	r2, [pc, #20]	; (5ba8 <__swrite+0x34>)
    5b94:	0028      	movs	r0, r5
    5b96:	4013      	ands	r3, r2
    5b98:	81a3      	strh	r3, [r4, #12]
    5b9a:	0032      	movs	r2, r6
    5b9c:	230e      	movs	r3, #14
    5b9e:	5ee1      	ldrsh	r1, [r4, r3]
    5ba0:	003b      	movs	r3, r7
    5ba2:	f000 f875 	bl	5c90 <_write_r>
    5ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ba8:	ffffefff 	.word	0xffffefff

00005bac <__sseek>:
    5bac:	b570      	push	{r4, r5, r6, lr}
    5bae:	000c      	movs	r4, r1
    5bb0:	250e      	movs	r5, #14
    5bb2:	5f49      	ldrsh	r1, [r1, r5]
    5bb4:	f000 f92c 	bl	5e10 <_lseek_r>
    5bb8:	89a3      	ldrh	r3, [r4, #12]
    5bba:	1c42      	adds	r2, r0, #1
    5bbc:	d103      	bne.n	5bc6 <__sseek+0x1a>
    5bbe:	4a05      	ldr	r2, [pc, #20]	; (5bd4 <__sseek+0x28>)
    5bc0:	4013      	ands	r3, r2
    5bc2:	81a3      	strh	r3, [r4, #12]
    5bc4:	bd70      	pop	{r4, r5, r6, pc}
    5bc6:	2280      	movs	r2, #128	; 0x80
    5bc8:	0152      	lsls	r2, r2, #5
    5bca:	4313      	orrs	r3, r2
    5bcc:	81a3      	strh	r3, [r4, #12]
    5bce:	6560      	str	r0, [r4, #84]	; 0x54
    5bd0:	e7f8      	b.n	5bc4 <__sseek+0x18>
    5bd2:	46c0      	nop			; (mov r8, r8)
    5bd4:	ffffefff 	.word	0xffffefff

00005bd8 <__sclose>:
    5bd8:	b510      	push	{r4, lr}
    5bda:	230e      	movs	r3, #14
    5bdc:	5ec9      	ldrsh	r1, [r1, r3]
    5bde:	f000 f8e1 	bl	5da4 <_close_r>
    5be2:	bd10      	pop	{r4, pc}

00005be4 <__swbuf_r>:
    5be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5be6:	0005      	movs	r5, r0
    5be8:	000e      	movs	r6, r1
    5bea:	0014      	movs	r4, r2
    5bec:	2800      	cmp	r0, #0
    5bee:	d004      	beq.n	5bfa <__swbuf_r+0x16>
    5bf0:	6983      	ldr	r3, [r0, #24]
    5bf2:	2b00      	cmp	r3, #0
    5bf4:	d101      	bne.n	5bfa <__swbuf_r+0x16>
    5bf6:	f7ff fba3 	bl	5340 <__sinit>
    5bfa:	4b22      	ldr	r3, [pc, #136]	; (5c84 <__swbuf_r+0xa0>)
    5bfc:	429c      	cmp	r4, r3
    5bfe:	d12d      	bne.n	5c5c <__swbuf_r+0x78>
    5c00:	686c      	ldr	r4, [r5, #4]
    5c02:	69a3      	ldr	r3, [r4, #24]
    5c04:	60a3      	str	r3, [r4, #8]
    5c06:	89a3      	ldrh	r3, [r4, #12]
    5c08:	071b      	lsls	r3, r3, #28
    5c0a:	d531      	bpl.n	5c70 <__swbuf_r+0x8c>
    5c0c:	6923      	ldr	r3, [r4, #16]
    5c0e:	2b00      	cmp	r3, #0
    5c10:	d02e      	beq.n	5c70 <__swbuf_r+0x8c>
    5c12:	6823      	ldr	r3, [r4, #0]
    5c14:	6922      	ldr	r2, [r4, #16]
    5c16:	b2f7      	uxtb	r7, r6
    5c18:	1a98      	subs	r0, r3, r2
    5c1a:	6963      	ldr	r3, [r4, #20]
    5c1c:	b2f6      	uxtb	r6, r6
    5c1e:	4298      	cmp	r0, r3
    5c20:	db05      	blt.n	5c2e <__swbuf_r+0x4a>
    5c22:	0021      	movs	r1, r4
    5c24:	0028      	movs	r0, r5
    5c26:	f7ff fb1d 	bl	5264 <_fflush_r>
    5c2a:	2800      	cmp	r0, #0
    5c2c:	d126      	bne.n	5c7c <__swbuf_r+0x98>
    5c2e:	68a3      	ldr	r3, [r4, #8]
    5c30:	3001      	adds	r0, #1
    5c32:	3b01      	subs	r3, #1
    5c34:	60a3      	str	r3, [r4, #8]
    5c36:	6823      	ldr	r3, [r4, #0]
    5c38:	1c5a      	adds	r2, r3, #1
    5c3a:	6022      	str	r2, [r4, #0]
    5c3c:	701f      	strb	r7, [r3, #0]
    5c3e:	6963      	ldr	r3, [r4, #20]
    5c40:	4298      	cmp	r0, r3
    5c42:	d004      	beq.n	5c4e <__swbuf_r+0x6a>
    5c44:	89a3      	ldrh	r3, [r4, #12]
    5c46:	07db      	lsls	r3, r3, #31
    5c48:	d51a      	bpl.n	5c80 <__swbuf_r+0x9c>
    5c4a:	2e0a      	cmp	r6, #10
    5c4c:	d118      	bne.n	5c80 <__swbuf_r+0x9c>
    5c4e:	0021      	movs	r1, r4
    5c50:	0028      	movs	r0, r5
    5c52:	f7ff fb07 	bl	5264 <_fflush_r>
    5c56:	2800      	cmp	r0, #0
    5c58:	d012      	beq.n	5c80 <__swbuf_r+0x9c>
    5c5a:	e00f      	b.n	5c7c <__swbuf_r+0x98>
    5c5c:	4b0a      	ldr	r3, [pc, #40]	; (5c88 <__swbuf_r+0xa4>)
    5c5e:	429c      	cmp	r4, r3
    5c60:	d101      	bne.n	5c66 <__swbuf_r+0x82>
    5c62:	68ac      	ldr	r4, [r5, #8]
    5c64:	e7cd      	b.n	5c02 <__swbuf_r+0x1e>
    5c66:	4b09      	ldr	r3, [pc, #36]	; (5c8c <__swbuf_r+0xa8>)
    5c68:	429c      	cmp	r4, r3
    5c6a:	d1ca      	bne.n	5c02 <__swbuf_r+0x1e>
    5c6c:	68ec      	ldr	r4, [r5, #12]
    5c6e:	e7c8      	b.n	5c02 <__swbuf_r+0x1e>
    5c70:	0021      	movs	r1, r4
    5c72:	0028      	movs	r0, r5
    5c74:	f000 f820 	bl	5cb8 <__swsetup_r>
    5c78:	2800      	cmp	r0, #0
    5c7a:	d0ca      	beq.n	5c12 <__swbuf_r+0x2e>
    5c7c:	2601      	movs	r6, #1
    5c7e:	4276      	negs	r6, r6
    5c80:	0030      	movs	r0, r6
    5c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c84:	00008340 	.word	0x00008340
    5c88:	00008360 	.word	0x00008360
    5c8c:	00008320 	.word	0x00008320

00005c90 <_write_r>:
    5c90:	b570      	push	{r4, r5, r6, lr}
    5c92:	0005      	movs	r5, r0
    5c94:	0008      	movs	r0, r1
    5c96:	0011      	movs	r1, r2
    5c98:	2200      	movs	r2, #0
    5c9a:	4c06      	ldr	r4, [pc, #24]	; (5cb4 <_write_r+0x24>)
    5c9c:	6022      	str	r2, [r4, #0]
    5c9e:	001a      	movs	r2, r3
    5ca0:	f7fd fc2e 	bl	3500 <_write>
    5ca4:	1c43      	adds	r3, r0, #1
    5ca6:	d103      	bne.n	5cb0 <_write_r+0x20>
    5ca8:	6823      	ldr	r3, [r4, #0]
    5caa:	2b00      	cmp	r3, #0
    5cac:	d000      	beq.n	5cb0 <_write_r+0x20>
    5cae:	602b      	str	r3, [r5, #0]
    5cb0:	bd70      	pop	{r4, r5, r6, pc}
    5cb2:	46c0      	nop			; (mov r8, r8)
    5cb4:	20003120 	.word	0x20003120

00005cb8 <__swsetup_r>:
    5cb8:	4b36      	ldr	r3, [pc, #216]	; (5d94 <__swsetup_r+0xdc>)
    5cba:	b570      	push	{r4, r5, r6, lr}
    5cbc:	681d      	ldr	r5, [r3, #0]
    5cbe:	0006      	movs	r6, r0
    5cc0:	000c      	movs	r4, r1
    5cc2:	2d00      	cmp	r5, #0
    5cc4:	d005      	beq.n	5cd2 <__swsetup_r+0x1a>
    5cc6:	69ab      	ldr	r3, [r5, #24]
    5cc8:	2b00      	cmp	r3, #0
    5cca:	d102      	bne.n	5cd2 <__swsetup_r+0x1a>
    5ccc:	0028      	movs	r0, r5
    5cce:	f7ff fb37 	bl	5340 <__sinit>
    5cd2:	4b31      	ldr	r3, [pc, #196]	; (5d98 <__swsetup_r+0xe0>)
    5cd4:	429c      	cmp	r4, r3
    5cd6:	d10f      	bne.n	5cf8 <__swsetup_r+0x40>
    5cd8:	686c      	ldr	r4, [r5, #4]
    5cda:	230c      	movs	r3, #12
    5cdc:	5ee2      	ldrsh	r2, [r4, r3]
    5cde:	b293      	uxth	r3, r2
    5ce0:	0719      	lsls	r1, r3, #28
    5ce2:	d42d      	bmi.n	5d40 <__swsetup_r+0x88>
    5ce4:	06d9      	lsls	r1, r3, #27
    5ce6:	d411      	bmi.n	5d0c <__swsetup_r+0x54>
    5ce8:	2309      	movs	r3, #9
    5cea:	2001      	movs	r0, #1
    5cec:	6033      	str	r3, [r6, #0]
    5cee:	3337      	adds	r3, #55	; 0x37
    5cf0:	4313      	orrs	r3, r2
    5cf2:	81a3      	strh	r3, [r4, #12]
    5cf4:	4240      	negs	r0, r0
    5cf6:	bd70      	pop	{r4, r5, r6, pc}
    5cf8:	4b28      	ldr	r3, [pc, #160]	; (5d9c <__swsetup_r+0xe4>)
    5cfa:	429c      	cmp	r4, r3
    5cfc:	d101      	bne.n	5d02 <__swsetup_r+0x4a>
    5cfe:	68ac      	ldr	r4, [r5, #8]
    5d00:	e7eb      	b.n	5cda <__swsetup_r+0x22>
    5d02:	4b27      	ldr	r3, [pc, #156]	; (5da0 <__swsetup_r+0xe8>)
    5d04:	429c      	cmp	r4, r3
    5d06:	d1e8      	bne.n	5cda <__swsetup_r+0x22>
    5d08:	68ec      	ldr	r4, [r5, #12]
    5d0a:	e7e6      	b.n	5cda <__swsetup_r+0x22>
    5d0c:	075b      	lsls	r3, r3, #29
    5d0e:	d513      	bpl.n	5d38 <__swsetup_r+0x80>
    5d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5d12:	2900      	cmp	r1, #0
    5d14:	d008      	beq.n	5d28 <__swsetup_r+0x70>
    5d16:	0023      	movs	r3, r4
    5d18:	3344      	adds	r3, #68	; 0x44
    5d1a:	4299      	cmp	r1, r3
    5d1c:	d002      	beq.n	5d24 <__swsetup_r+0x6c>
    5d1e:	0030      	movs	r0, r6
    5d20:	f7fe ffc0 	bl	4ca4 <_free_r>
    5d24:	2300      	movs	r3, #0
    5d26:	6363      	str	r3, [r4, #52]	; 0x34
    5d28:	2224      	movs	r2, #36	; 0x24
    5d2a:	89a3      	ldrh	r3, [r4, #12]
    5d2c:	4393      	bics	r3, r2
    5d2e:	81a3      	strh	r3, [r4, #12]
    5d30:	2300      	movs	r3, #0
    5d32:	6063      	str	r3, [r4, #4]
    5d34:	6923      	ldr	r3, [r4, #16]
    5d36:	6023      	str	r3, [r4, #0]
    5d38:	2308      	movs	r3, #8
    5d3a:	89a2      	ldrh	r2, [r4, #12]
    5d3c:	4313      	orrs	r3, r2
    5d3e:	81a3      	strh	r3, [r4, #12]
    5d40:	6923      	ldr	r3, [r4, #16]
    5d42:	2b00      	cmp	r3, #0
    5d44:	d10b      	bne.n	5d5e <__swsetup_r+0xa6>
    5d46:	21a0      	movs	r1, #160	; 0xa0
    5d48:	2280      	movs	r2, #128	; 0x80
    5d4a:	89a3      	ldrh	r3, [r4, #12]
    5d4c:	0089      	lsls	r1, r1, #2
    5d4e:	0092      	lsls	r2, r2, #2
    5d50:	400b      	ands	r3, r1
    5d52:	4293      	cmp	r3, r2
    5d54:	d003      	beq.n	5d5e <__swsetup_r+0xa6>
    5d56:	0021      	movs	r1, r4
    5d58:	0030      	movs	r0, r6
    5d5a:	f7ff fbaf 	bl	54bc <__smakebuf_r>
    5d5e:	2301      	movs	r3, #1
    5d60:	89a2      	ldrh	r2, [r4, #12]
    5d62:	4013      	ands	r3, r2
    5d64:	d011      	beq.n	5d8a <__swsetup_r+0xd2>
    5d66:	2300      	movs	r3, #0
    5d68:	60a3      	str	r3, [r4, #8]
    5d6a:	6963      	ldr	r3, [r4, #20]
    5d6c:	425b      	negs	r3, r3
    5d6e:	61a3      	str	r3, [r4, #24]
    5d70:	2000      	movs	r0, #0
    5d72:	6923      	ldr	r3, [r4, #16]
    5d74:	4283      	cmp	r3, r0
    5d76:	d1be      	bne.n	5cf6 <__swsetup_r+0x3e>
    5d78:	230c      	movs	r3, #12
    5d7a:	5ee2      	ldrsh	r2, [r4, r3]
    5d7c:	0613      	lsls	r3, r2, #24
    5d7e:	d5ba      	bpl.n	5cf6 <__swsetup_r+0x3e>
    5d80:	2340      	movs	r3, #64	; 0x40
    5d82:	4313      	orrs	r3, r2
    5d84:	81a3      	strh	r3, [r4, #12]
    5d86:	3801      	subs	r0, #1
    5d88:	e7b5      	b.n	5cf6 <__swsetup_r+0x3e>
    5d8a:	0792      	lsls	r2, r2, #30
    5d8c:	d400      	bmi.n	5d90 <__swsetup_r+0xd8>
    5d8e:	6963      	ldr	r3, [r4, #20]
    5d90:	60a3      	str	r3, [r4, #8]
    5d92:	e7ed      	b.n	5d70 <__swsetup_r+0xb8>
    5d94:	200001a8 	.word	0x200001a8
    5d98:	00008340 	.word	0x00008340
    5d9c:	00008360 	.word	0x00008360
    5da0:	00008320 	.word	0x00008320

00005da4 <_close_r>:
    5da4:	2300      	movs	r3, #0
    5da6:	b570      	push	{r4, r5, r6, lr}
    5da8:	4c06      	ldr	r4, [pc, #24]	; (5dc4 <_close_r+0x20>)
    5daa:	0005      	movs	r5, r0
    5dac:	0008      	movs	r0, r1
    5dae:	6023      	str	r3, [r4, #0]
    5db0:	f7fd fbe0 	bl	3574 <_close>
    5db4:	1c43      	adds	r3, r0, #1
    5db6:	d103      	bne.n	5dc0 <_close_r+0x1c>
    5db8:	6823      	ldr	r3, [r4, #0]
    5dba:	2b00      	cmp	r3, #0
    5dbc:	d000      	beq.n	5dc0 <_close_r+0x1c>
    5dbe:	602b      	str	r3, [r5, #0]
    5dc0:	bd70      	pop	{r4, r5, r6, pc}
    5dc2:	46c0      	nop			; (mov r8, r8)
    5dc4:	20003120 	.word	0x20003120

00005dc8 <_fstat_r>:
    5dc8:	2300      	movs	r3, #0
    5dca:	b570      	push	{r4, r5, r6, lr}
    5dcc:	4c06      	ldr	r4, [pc, #24]	; (5de8 <_fstat_r+0x20>)
    5dce:	0005      	movs	r5, r0
    5dd0:	0008      	movs	r0, r1
    5dd2:	0011      	movs	r1, r2
    5dd4:	6023      	str	r3, [r4, #0]
    5dd6:	f7fd fbd0 	bl	357a <_fstat>
    5dda:	1c43      	adds	r3, r0, #1
    5ddc:	d103      	bne.n	5de6 <_fstat_r+0x1e>
    5dde:	6823      	ldr	r3, [r4, #0]
    5de0:	2b00      	cmp	r3, #0
    5de2:	d000      	beq.n	5de6 <_fstat_r+0x1e>
    5de4:	602b      	str	r3, [r5, #0]
    5de6:	bd70      	pop	{r4, r5, r6, pc}
    5de8:	20003120 	.word	0x20003120

00005dec <_isatty_r>:
    5dec:	2300      	movs	r3, #0
    5dee:	b570      	push	{r4, r5, r6, lr}
    5df0:	4c06      	ldr	r4, [pc, #24]	; (5e0c <_isatty_r+0x20>)
    5df2:	0005      	movs	r5, r0
    5df4:	0008      	movs	r0, r1
    5df6:	6023      	str	r3, [r4, #0]
    5df8:	f7fd fbc4 	bl	3584 <_isatty>
    5dfc:	1c43      	adds	r3, r0, #1
    5dfe:	d103      	bne.n	5e08 <_isatty_r+0x1c>
    5e00:	6823      	ldr	r3, [r4, #0]
    5e02:	2b00      	cmp	r3, #0
    5e04:	d000      	beq.n	5e08 <_isatty_r+0x1c>
    5e06:	602b      	str	r3, [r5, #0]
    5e08:	bd70      	pop	{r4, r5, r6, pc}
    5e0a:	46c0      	nop			; (mov r8, r8)
    5e0c:	20003120 	.word	0x20003120

00005e10 <_lseek_r>:
    5e10:	b570      	push	{r4, r5, r6, lr}
    5e12:	0005      	movs	r5, r0
    5e14:	0008      	movs	r0, r1
    5e16:	0011      	movs	r1, r2
    5e18:	2200      	movs	r2, #0
    5e1a:	4c06      	ldr	r4, [pc, #24]	; (5e34 <_lseek_r+0x24>)
    5e1c:	6022      	str	r2, [r4, #0]
    5e1e:	001a      	movs	r2, r3
    5e20:	f7fd fbb2 	bl	3588 <_lseek>
    5e24:	1c43      	adds	r3, r0, #1
    5e26:	d103      	bne.n	5e30 <_lseek_r+0x20>
    5e28:	6823      	ldr	r3, [r4, #0]
    5e2a:	2b00      	cmp	r3, #0
    5e2c:	d000      	beq.n	5e30 <_lseek_r+0x20>
    5e2e:	602b      	str	r3, [r5, #0]
    5e30:	bd70      	pop	{r4, r5, r6, pc}
    5e32:	46c0      	nop			; (mov r8, r8)
    5e34:	20003120 	.word	0x20003120

00005e38 <memchr>:
    5e38:	b2c9      	uxtb	r1, r1
    5e3a:	1882      	adds	r2, r0, r2
    5e3c:	4290      	cmp	r0, r2
    5e3e:	d101      	bne.n	5e44 <memchr+0xc>
    5e40:	2000      	movs	r0, #0
    5e42:	4770      	bx	lr
    5e44:	7803      	ldrb	r3, [r0, #0]
    5e46:	428b      	cmp	r3, r1
    5e48:	d0fb      	beq.n	5e42 <memchr+0xa>
    5e4a:	3001      	adds	r0, #1
    5e4c:	e7f6      	b.n	5e3c <memchr+0x4>
	...

00005e50 <_read_r>:
    5e50:	b570      	push	{r4, r5, r6, lr}
    5e52:	0005      	movs	r5, r0
    5e54:	0008      	movs	r0, r1
    5e56:	0011      	movs	r1, r2
    5e58:	2200      	movs	r2, #0
    5e5a:	4c06      	ldr	r4, [pc, #24]	; (5e74 <_read_r+0x24>)
    5e5c:	6022      	str	r2, [r4, #0]
    5e5e:	001a      	movs	r2, r3
    5e60:	f7fd fb2c 	bl	34bc <_read>
    5e64:	1c43      	adds	r3, r0, #1
    5e66:	d103      	bne.n	5e70 <_read_r+0x20>
    5e68:	6823      	ldr	r3, [r4, #0]
    5e6a:	2b00      	cmp	r3, #0
    5e6c:	d000      	beq.n	5e70 <_read_r+0x20>
    5e6e:	602b      	str	r3, [r5, #0]
    5e70:	bd70      	pop	{r4, r5, r6, pc}
    5e72:	46c0      	nop			; (mov r8, r8)
    5e74:	20003120 	.word	0x20003120
    5e78:	00000dae 	.word	0x00000dae
    5e7c:	00000de2 	.word	0x00000de2
    5e80:	00000dd0 	.word	0x00000dd0
    5e84:	00000dd0 	.word	0x00000dd0
    5e88:	00000dea 	.word	0x00000dea
    5e8c:	00000df2 	.word	0x00000df2
    5e90:	00000dd0 	.word	0x00000dd0
    5e94:	00000dfa 	.word	0x00000dfa
    5e98:	00000dd0 	.word	0x00000dd0
    5e9c:	00000dd0 	.word	0x00000dd0
    5ea0:	00000dd0 	.word	0x00000dd0
    5ea4:	00000dd0 	.word	0x00000dd0
    5ea8:	00000dd0 	.word	0x00000dd0
    5eac:	00000dd0 	.word	0x00000dd0
    5eb0:	00000dd0 	.word	0x00000dd0
    5eb4:	00000dd0 	.word	0x00000dd0
    5eb8:	00000dd0 	.word	0x00000dd0
    5ebc:	00000dd0 	.word	0x00000dd0
    5ec0:	00000dd0 	.word	0x00000dd0
    5ec4:	00000dd0 	.word	0x00000dd0
    5ec8:	00000dd0 	.word	0x00000dd0
    5ecc:	00000e02 	.word	0x00000e02
    5ed0:	00000e0a 	.word	0x00000e0a
    5ed4:	00000dd0 	.word	0x00000dd0
    5ed8:	00000e12 	.word	0x00000e12
    5edc:	00000e1a 	.word	0x00000e1a
    5ee0:	00000dd0 	.word	0x00000dd0
    5ee4:	00000e22 	.word	0x00000e22
    5ee8:	00000dd0 	.word	0x00000dd0
    5eec:	00000dd0 	.word	0x00000dd0
    5ef0:	00000e2a 	.word	0x00000e2a
    5ef4:	00000e32 	.word	0x00000e32
    5ef8:	00000e3a 	.word	0x00000e3a
    5efc:	00000e42 	.word	0x00000e42
    5f00:	00000e4a 	.word	0x00000e4a
    5f04:	00000e52 	.word	0x00000e52
    5f08:	00000e5a 	.word	0x00000e5a
    5f0c:	00000e62 	.word	0x00000e62
    5f10:	00000dd0 	.word	0x00000dd0
    5f14:	00000e6c 	.word	0x00000e6c
    5f18:	00000e76 	.word	0x00000e76
    5f1c:	00000e7e 	.word	0x00000e7e
    5f20:	00000e86 	.word	0x00000e86
    5f24:	00000e8e 	.word	0x00000e8e
    5f28:	00000e96 	.word	0x00000e96
    5f2c:	00000e9e 	.word	0x00000e9e
    5f30:	00000ea6 	.word	0x00000ea6
    5f34:	00000eae 	.word	0x00000eae
    5f38:	00000dd0 	.word	0x00000dd0
    5f3c:	00000eb8 	.word	0x00000eb8
    5f40:	00001802 	.word	0x00001802
    5f44:	00001808 	.word	0x00001808
    5f48:	0000180e 	.word	0x0000180e
    5f4c:	0000181a 	.word	0x0000181a
    5f50:	00001820 	.word	0x00001820
    5f54:	00001826 	.word	0x00001826
    5f58:	6e305b1b 	.word	0x6e305b1b
    5f5c:	00000008 	.word	0x00000008
    5f60:	00000008 	.word	0x00000008
    5f64:	00000008 	.word	0x00000008
    5f68:	00000008 	.word	0x00000008
    5f6c:	00000008 	.word	0x00000008
    5f70:	00000008 	.word	0x00000008
    5f74:	00000008 	.word	0x00000008
    5f78:	00000008 	.word	0x00000008
    5f7c:	00000010 	.word	0x00000010
    5f80:	00000010 	.word	0x00000010
    5f84:	00000010 	.word	0x00000010
    5f88:	00000010 	.word	0x00000010
    5f8c:	00000010 	.word	0x00000010
    5f90:	00000010 	.word	0x00000010
    5f94:	00000010 	.word	0x00000010
    5f98:	00000010 	.word	0x00000010
    5f9c:	00000018 	.word	0x00000018
    5fa0:	00000018 	.word	0x00000018
    5fa4:	00000018 	.word	0x00000018
    5fa8:	00000018 	.word	0x00000018
    5fac:	00000018 	.word	0x00000018
    5fb0:	00000018 	.word	0x00000018
    5fb4:	00000018 	.word	0x00000018
    5fb8:	00000018 	.word	0x00000018
    5fbc:	00000020 	.word	0x00000020
    5fc0:	00000020 	.word	0x00000020
    5fc4:	00000020 	.word	0x00000020
    5fc8:	00000020 	.word	0x00000020
    5fcc:	00000020 	.word	0x00000020
    5fd0:	00000020 	.word	0x00000020
    5fd4:	00000020 	.word	0x00000020
    5fd8:	00000020 	.word	0x00000020
    5fdc:	00000028 	.word	0x00000028
    5fe0:	00000028 	.word	0x00000028
    5fe4:	00000028 	.word	0x00000028
    5fe8:	00000028 	.word	0x00000028
    5fec:	00000028 	.word	0x00000028
    5ff0:	00000028 	.word	0x00000028
    5ff4:	00000028 	.word	0x00000028
    5ff8:	00000028 	.word	0x00000028
    5ffc:	00000030 	.word	0x00000030
    6000:	00000030 	.word	0x00000030
    6004:	00000030 	.word	0x00000030
    6008:	00000030 	.word	0x00000030
    600c:	00000030 	.word	0x00000030
    6010:	00000030 	.word	0x00000030
    6014:	00000030 	.word	0x00000030
    6018:	00000030 	.word	0x00000030
    601c:	00000038 	.word	0x00000038
    6020:	00000038 	.word	0x00000038
    6024:	00000038 	.word	0x00000038
    6028:	00000038 	.word	0x00000038
    602c:	00000038 	.word	0x00000038
    6030:	00000038 	.word	0x00000038
    6034:	00000038 	.word	0x00000038
    6038:	00000038 	.word	0x00000038
    603c:	00000040 	.word	0x00000040
    6040:	00000040 	.word	0x00000040
    6044:	00000040 	.word	0x00000040
    6048:	00000040 	.word	0x00000040
    604c:	00000040 	.word	0x00000040
    6050:	00000040 	.word	0x00000040
    6054:	00000040 	.word	0x00000040
    6058:	00000040 	.word	0x00000040
    605c:	00000048 	.word	0x00000048
    6060:	00000048 	.word	0x00000048
    6064:	00000048 	.word	0x00000048
    6068:	00000048 	.word	0x00000048
    606c:	00000048 	.word	0x00000048
    6070:	00000048 	.word	0x00000048
    6074:	00000048 	.word	0x00000048
    6078:	00000048 	.word	0x00000048
    607c:	0000004f 	.word	0x0000004f
    6080:	0000004f 	.word	0x0000004f
    6084:	0000004f 	.word	0x0000004f
    6088:	0000004f 	.word	0x0000004f
    608c:	0000004f 	.word	0x0000004f
    6090:	0000004f 	.word	0x0000004f
    6094:	0000004f 	.word	0x0000004f
    6098:	0000004f 	.word	0x0000004f

0000609c <DECIDreturn>:
    609c:	363f5b1b 00000063 0000001b 0000005b     .[?6c.......[...
    60ac:	00000052                                R...

000060b0 <csiEscCodes>:
    60b0:	43424140 47464544 4c4b4a48 6158504d     @ABCDEFGHJKLMPXa
    60c0:	66656463 6d6c6867 7372716e 00006075     cdefghlmnqrsu`..
    60d0:	00007325 000a000a 00140014 00000014     %s..............
    60e0:	000a017c 000a017c 00140186 00140000     |...|...........
    60f0:	0122000a 00140186 01220190 0122000a     .."......."...".
    6100:	012c0014 0122017c 012c0186 012c0014     ..,.|."...,...,.
    6110:	0136017c 001e0000 00280032 00320000     |.6.....2.(...2.
    6120:	003c0032 001e0050 00280118 00280046     2.<.P.....(.F.(.
    6130:	00be0050 00be0050 00c80118 00280118     P...P.........(.
    6140:	00be0122 00460000 00500032 005a0000     ".....F.2.P...Z.
    6150:	00640032 006e0000 00780032 00820000     2.d...n.2.x.....
    6160:	008c0032 00960000 00a00032 00aa0000     2.......2.......
    6170:	00b40032 00be0000 00c80032 00c8012c     2.......2...,...
    6180:	00d20172 00dc001e 00e60172 00f0001e     r.......r.......
    6190:	00fa0172 0104001e 010e0172 0118005a     r.......r...Z...
    61a0:	0122012c 82be50b4 8cbe82aa 64963c8c     ,."..P.......<.d
    61b0:	64dc3cd2 a08c9682 aadca08c a0e696dc     .<.d............
    61c0:	50f03c78 5a78466e aaaa3c96 a0dc3cc8     x<.PnFxZ.<...<..
    61d0:	aae6a0d2 6e617254 69722073 73746867     ....Trans rights
    61e0:	65726120 6d756820 72206e61 74686769      are human right
    61f0:	00000073 355e3331 31202b20 20355e36     s...13^5 + 16^5 
    6200:	3731203d 0000355e 69746552 616c7563     = 17^5..Reticula
    6210:	676e6974 6c705320 73656e69 00000000     ting Splines....
    6220:	6c6f6976 65636e65 726f772e 0000736b     violence.works..
    6230:	2b206953 00425020 6c6c694b 6c694220     Si + PB.Kill Bil
    6240:	6e6f696c 65726961 61282073 5420646e     lionaires (and T
    6250:	6c6c6972 616e6f69 29657269 00000000     rillionaire)....
    6260:	65746e49 74736572 206e6920 68636574     Interest in tech
    6270:	6f6c6f6e 69207967 6f6e2073 20612074     nology is not a 
    6280:	73726570 6c616e6f 00797469 50203031     personality.10 P
    6290:	544e4952 52484320 30322824 2b352e35     RINT CHR$(205.5+
    62a0:	28444e52 3b292931 47203a20 204f544f     RND(1)); : GOTO 
    62b0:	00003031 67206f4e 2e73646f 206f4e20     10..No gods. No 
    62c0:	7473616d 2e737265 206f4e20 65747865     masters. No exte
    62d0:	6c616e72 62696c20 69726172 002e7365     rnal libraries..
    62e0:	6c6c694b 7a614e20 00007369 6e616954     Kill Nazis..Tian
    62f0:	656d6e61 7153206e 65726175 38393120     anmen Square 198
    6300:	00000039 72656d41 20616369 20736177     9...America was 
    6310:	6e756f66 20646564 73206e6f 6576616c     founded on slave
    6320:	00007972 72656854 73692065 6c6e6f20     ry..There is onl
    6330:	61632079 61746970 6e61206c 616c2064     y capital and la
    6340:	00726f62 6f636e45 67617275 59532065     bor.Encourage SY
    6350:	54454d4d 20434952 73616c63 61772073     MMETRIC class wa
    6360:	72616672 00000065 6f676f56 6f50206e     rfare...Vogon Po
    6370:	79727465 00000000 694e2041 54206563     etry....A Nice T
    6380:	00005954 78696e55 6f706520 6d206863     TY..Unix epoch m
    6390:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    63a0:	3d202069 35783020 35373366 20666439     i  = 0x5f3759df 
    63b0:	2028202d 3e3e2069 29203120 0000003b     - ( i >> 1 );...
    63c0:	61657053 7274206b 20687475 70206f74     Speak truth to p
    63d0:	7265776f 2749203b 7573206d 74206572     ower; I'm sure t
    63e0:	27796568 6c206c6c 65747369 6874206e     hey'll listen th
    63f0:	74207369 2e656d69 00000000 63666544     is time.....Defc
    6400:	73276e6f 6e616320 656c6563 32282064     on's canceled (2
    6410:	29303230 00000000 73746152 7473656e     020)....Ratsnest
    6420:	6f4e203a 6e696874 6f542067 216f4420     : Nothing To Do!
    6430:	00000000 68207449 36207361 656b2039     ....It has 69 ke
    6440:	002e7379 61636542 20657375 342d5456     ys..Because VT-4
    6450:	77203032 61207361 6165726c 74207964     20 was already t
    6460:	6e656b61 00000000 706d6f43 73736572     aken....Compress
    6470:	206e6f69 6f676c61 68746972 6162206d     ion algorithm ba
    6480:	20646573 42206e6f 28205042 37393931     sed on BBP (1997
    6490:	00000029 63616554 65682068 68746c61     )...Teach health
    64a0:	736e6920 6e617275 70206563 69766f72      insurance provi
    64b0:	73726564 206f7420 65646f63 0000002e     ders to code....
    64c0:	6e617247 65432064 6172746e 6148206c     Grand Central Ha
    64d0:	54206b63 50206568 656e616c 00000074     ck The Planet...
    64e0:	69466957 20736920 20746f6e 65726977     WiFi is not wire
    64f0:	7373656c 68744520 656e7265 00002174     less Ethernet!..
    6500:	6d6d7544 68742079 20636369 65696c63     Dummy thicc clie
    6510:	0000746e 694e2041 54206563 202e5954     nt..A Nice TTY. 
    6520:	4f206e41 6f43204b 7475706d 002e7265     An OK Computer..
    6530:	65545355 6964656c 6e6f646c 00736369     USTeledildonics.
    6540:	696c6f53 69726164 69207974 6f6e2073     Solidarity is no
    6550:	20612074 2077656e 6d617266 726f7765     t a new framewor
    6560:	0000006b 61657242 616f6264 6e696472     k...Breadboardin
    6570:	73492067 746f4e20 43204120 656d6972     g Is Not A Crime
    6580:	00000000 2066664f 6f207962 6520656e     ....Off by one e
    6590:	726f7272 72612073 6f632065 6e6f6d6d     rrors are common
    65a0:	00000000 00001ec6 00002112 00002112     .........!...!..
    65b0:	00002112 00002112 00002112 00002112     .!...!...!...!..
    65c0:	00002112 00002112 00002112 00002112     .!...!...!...!..
    65d0:	00002112 00002112 00002112 00002112     .!...!...!...!..
    65e0:	00002112 00001eae 00002112 00002112     .!.......!...!..
    65f0:	00002112 00002112 00002112 00002112     .!...!...!...!..
    6600:	00002112 00002112 00002112 00002112     .!...!...!...!..
    6610:	00002112 00002112 00002112 00002112     .!...!...!...!..
    6620:	00002112 00001ebe 00002112 00002112     .!.......!...!..
    6630:	00002112 00002112 00002112 00002112     .!...!...!...!..
    6640:	00002112 00002112 00002112 00002112     .!...!...!...!..
    6650:	00002112 00002112 00002112 00002112     .!...!...!...!..
    6660:	00002112 00001eb6 00001ece 00001e96     .!..............
    6670:	00001ea6 00001e9e 00000002 00000003     ................
    6680:	00000028 00000029 00000004 00000005     (...)...........
    6690:	00000006 00000007 00000020 00000021     ........ ...!...
    66a0:	00000022 00000023 00000024 00000025     "...#...$...%...
    66b0:	00000026 00000027 00000008 00000009     &...'...........
    66c0:	0000000a 0000000b 42000800 42000c00     ...........B...B
    66d0:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    66e0:	00002c4a 00002c46 00002c46 00002cac     J,..F,..F,...,..
    66f0:	00002cac 00002c5e 00002c50 00002c64     .,..^,..P,..d,..
    6700:	00002c9a 00002e6c 00002e4c 00002e4c     .,..l...L...L...
    6710:	00002ed8 00002e5e 00002e7a 00002e50     ....^...z...P...
    6720:	00002e88 00002ec8                       ........

00006728 <CodePage437>:
	...
    6a60:	01000000 06186080 18608001 60800106     .....`....`....`
    6a70:	80010000 00000060 00000000 66986106     ....`........a.f
    6a80:	98618619 00000000 00000000 00000000     ..a.............
    6a90:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    6aa0:	1966fefb 00986186 00000000 80010000     ..f..a..........
    6ab0:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    6ac0:	00000000 04000000 29a60823 1820c106     ........#..).. .
    6ad0:	98200304 324c1165 00000008 00000000     .. .e.L2........
    6ae0:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    6af0:	0000f6d9 00000000 30c00000 00030618     ...........0....
    6b00:	000000c0 00000000 00000000 00000000     ................
    6b10:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    6b20:	10400002 00000000 01000000 02084000     ..@..........@..
    6b30:	06186000 18608001 00010208 00000040     .`....`.....@...
    6b40:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    6b50:	80104290 00000000 00000000 00000000     .B..............
    6b60:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    6b80:	18000000 c0000306 00001040 00000000     ........@.......
    6b90:	00000000 ff000000 0000e0bf 00000000     ................
	...
    6bb4:	030e3800 0000e080 00000000 08200000     .8............ .
    6bc4:	80000104 02041020 10408000 00000208     .... .....@.....
    6bd4:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    6be4:	63061b6c f8e0c318 00000000 00000000     l..c............
    6bf4:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    6c04:	000000f8 00000000 c1f8e107 061860b0     .............`..
    6c14:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    6c24:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    6c34:	00f8e167 00000000 40000000 03070c30     g..........@0...
    6c44:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    6c54:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    6c64:	e167a081 000000f8 00000000 60f8e003     ..g............`
    6c74:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    6c84:	00000000 fefb0f00 20608001 00010408     ..........` ....
    6c94:	0c302080 00c00003 00000000 e0030000     . 0.............
    6ca4:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    6cb4:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    6cc4:	0618609f e1c70003 000000f0 00000000     .`..............
    6cd4:	38000000 e080030e 00000000 030e3800     ...8.........8..
    6ce4:	0000e080 00000000 00000000 80030e38     ............8...
    6cf4:	000000e0 0e380000 40c00003 00000010     ......8....@....
    6d04:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    6d14:	0c300003 00000000 00000000 00000000     ..0.............
    6d24:	00fefb0f fefb0f00 00000000 00000000     ................
    6d34:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    6d44:	0c0c3030 00000003 00000000 f8e10700     00..............
    6d54:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    6d64:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    6d74:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    6d84:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    6d94:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    6da4:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    6db4:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    6dc4:	00f8e063 00000000 c30f0000 861966f0     c............f..
    6dd4:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    6de4:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    6df4:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    6e04:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    6e14:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    6e24:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    6e34:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    6e44:	00000000 07000000 0618f8e1 18608001     ..............`.
    6e54:	60800106 e1070618 000000f8 00000000     ...`............
    6e64:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    6e74:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    6e84:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    6e94:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    6ea4:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    6eb4:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    6ec4:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    6ed4:	ecb0c31e 0000061b 00000000 f8e00300     ................
    6ee4:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    6ef4:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    6f04:	c000038c 00030c30 00000000 07000000     ....0...........
    6f14:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    6f24:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    6f34:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    6f44:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    6f54:	00f8e167 00000000 fb0f0000 000208fe     g...............
    6f64:	02082080 08208000 20800002 00000000     . .... .... ....
    6f74:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    6f84:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    6f94:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    6fa4:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    6fb4:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    6fc4:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    6fd4:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    6fe4:	20c00107 80000208 00000020 00000000     ... .... .......
    6ff4:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    7004:	0000fefb 00000000 f8e00300 00030c30     ............0...
    7014:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    7024:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    7034:	0618c000 00000000 07000000 030cf0c1     ................
    7044:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    7054:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    7080:	00fefb0f 00000000 80030000 00030ce0     ................
    7090:	00001860 00000000 00000000 00000000     `...............
	...
    70a8:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    70b8:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    70c8:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    70d8:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    70e8:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    70f8:	c3061bec f6d9e7b0 00000000 00000000     ................
    7108:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    7118:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    7128:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    7138:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    7148:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    7158:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    7168:	01000000 00006080 18e08003 60800106     .....`.........`
    7178:	e1070618 000000f8 00000000 00186000     .............`..
    7188:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    7198:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    71a8:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    71b8:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    71d4:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    71ec:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    7204:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    721c:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    722c:	02082080 00000000 00000000 c1fae803     . ..............
    723c:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    724c:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    725c:	00000003 00000000 00000000 e1070000     ................
    726c:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    727c:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    728c:	30c0c00c 00000000 00000000 00000000     ...0............
    729c:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    72b4:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    72cc:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    72e4:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    7300:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    7310:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    7320:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    7330:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    7340:	00000000 80010000 01061860 06186080     ........`....`..
    7350:	18608001 60800106 00000000 0f000000     ..`....`........
    7360:	0208c003 0cc00003 c0000303 030f0208     ................
    7370:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    73a8:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    73b8:	f8e06398 00000608 00000000 00669801     .c............f.
    73c8:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    73d8:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    73e8:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    73f8:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    7410:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    7428:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    7438:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    7448:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    7458:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    7468:	04fef907 00000003 00000000 07001420     ............ ...
    7478:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    7488:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    7498:	f10730c0 000000fc 00000000 18c00000     .0..............
    74a8:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    74b8:	00000000 98610600 80030000 010618e0     ......a.........
    74c8:	06186080 00f8e107 00000000 00000000     .`..............
    74d8:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    74f0:	0018c000 18e08003 60800106 e1070618     ...........`....
    7500:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    7510:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    7520:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    7530:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    7540:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    7558:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    7568:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    7578:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    7588:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    7598:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    75a8:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    75b8:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    75c8:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    75d8:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    75e8:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    75f8:	00f6d9c7 00000000 01000000 0c006698     .............f..
    7608:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    7618:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    7628:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    7638:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    7648:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    7658:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    7668:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    7678:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    7688:	20e00302 80800f08 00000020 00000000     ... .... .......
    7698:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    76a8:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    76b8:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    76c8:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    76d8:	fef823b0 00000000 00000000 000060c0     .#...........`..
    76e8:	18e08003 60800106 e1070618 000000f8     .......`........
    76f8:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    7708:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    7718:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    7730:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    7740:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    7750:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    7760:	1e08c003 00e08308 000080ff 00000000     ................
	...
    7778:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    7794:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    77a4:	00c00f3f 00000000 00000000 ff000000     ?...............
    77b4:	0003ecbf 00000000 00000000 00000000     ................
	...
    77cc:	18e0bfff 00000006 00000000 00000000     ................
    77dc:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    77ec:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    77fc:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    780c:	00000000 06180000 18000000 60800106     ...............`
    781c:	80010618 00061860 00000000 00000000     ....`...........
    782c:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    7844:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    7854:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    7864:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    7874:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    7884:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    7894:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    78a4:	20800002 80000208 00020820 02082080     ... .... .... ..
    78b4:	08208000 20800002 80000208 00020820     .. .... .... ...
    78c4:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    78d4:	00020820 02082080 f8208000 20800f02      .... .... .... 
    78e4:	80000208 00020820 05142080 14504001     .... .... ...@P.
    78f4:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    7904:	00504001 00000000 00000000 013f0000     .@P...........?.
    7914:	05145040 14504001 50400105 00000000     @P...@P...@P....
    7924:	00000000 02f80000 0820800f 20800002     .......... .... 
    7934:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    7944:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    7954:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    7964:	05145040 00504001 00000000 00000000     @P...@P.........
    7974:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    7984:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    799c:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    79b4:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    79d8:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    79e8:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    7a00:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    7a24:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    7a34:	20800002 80000208 f0030820 02082080     ... .... .... ..
    7a44:	08208000 20800002 00000000 00000000     .. .... ........
    7a54:	3f000000 000000f0 00000000 00000000     ...?............
    7a64:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    7a74:	80000208 00020820 02082080 08208000     .... .... .... .
    7a84:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    7a94:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    7aa4:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    7ab4:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    7ad0:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    7ae0:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    7b04:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    7b14:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    7b24:	50400105 40010514 00000050 00000000     ..@P...@P.......
    7b34:	ff000000 00fc0fc0 00000000 00000000     ................
    7b44:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    7b54:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    7b64:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    7b74:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    7b84:	000000f0 00000000 00000000 00000000     ................
    7b94:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    7ba4:	00020820 00002080 00000000 00000000      .... ..........
    7bb4:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    7bc4:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    7bdc:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    7bfc:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    7c0c:	00002080 00000000 00000000 40f10700     . .............@
    7c1c:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    7c2c:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    7c3c:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    7c4c:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    7c5c:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    7c7c:	80f00300 00020820 02082080 ff208000     .... .... .... .
    7c8c:	ffffffff ffffffff ffffffff ffffffff     ................
    7c9c:	ffffffff ffffffff 00000000 00000000     ................
    7cac:	3f000000 ffffffff ffffffff ffffffff     ...?............
    7cbc:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    7ccc:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    7cdc:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    7cec:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    7d10:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    7d20:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    7d30:	63c61861 000000f8 00000000 ff000000     a..c............
    7d40:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    7d5c:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    7d6c:	fb0f0000 06b080fe 0618c000 c0800103     ................
    7d7c:	fefb2f20 00000000 00000000 00000000      /..............
    7d8c:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    7da4:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    7db4:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    7dc4:	06186080 00608001 00000000 00000000     .`....`.........
    7dd4:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    7de4:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    7df4:	061becbf e0c31863 000000f8 00000000     ....c...........
    7e04:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    7e14:	00008e33 00000000 fef80300 e1070318     3...............
    7e24:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    7e34:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    7e44:	00204295 00000000 00000000 07000000     .B .............
    7e54:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    7e64:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    7e74:	03186000 0000f8e0 00000000 00000000     .`..............
    7e84:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    7e94:	000060b0 00000000 0f000000 0000fefb     .`..............
    7ea4:	00fefb0f fefb0f00 00000000 00000000     ................
    7eb4:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    7ec4:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    7ed4:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    7ee4:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    7ef4:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    7f04:	02082080 08208000 20800002 80000208     . .... .... ....
    7f14:	00020820 02082080 08208000 20800002      .... .... .... 
    7f24:	80000208 09240820 00008001 18000000     .... .$.........
    7f34:	00000006 00e0bfff 00061800 00000000     ................
	...
    7f4c:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    7f64:	01092460 00000080 00000000 00000000     `$..............
	...
    7f88:	80030e38 00000000 00000000 00000000     8...............
	...
    7fa0:	01000000 00006080 00000000 0f000000     .....`..........
    7fb0:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    7fc0:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    7fdc:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    8000:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    8028:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    8038:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    8048:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    8058:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    8068:	0008006d 00000a7f 0009001b 47552600     m............&UG
    8078:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    8088:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    8098:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    80a8:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    80b8:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    80c8:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    80d8:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    80e8:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    80f8:	0008004d 00000a7f 0009001b 07150000     M...............
    8108:	1100000a 00000000 000b0809 1a001700     ................
    8118:	0f000000 0500000a 00001801 1f001000     ................
    8128:	03131200 1b000000 14000000 000e1604     ................
    8138:	1c001d1e 02061900 0008000d 00000a00     ................

00008148 <kb_col>:
    8148:	00010000 00020000 00040000 00080000     ................
    8158:	00100000 00200000 08000000              ...... .....

00008164 <kb_col_index>:
    8164:	00000010 00000011 00000012 00000013     ................
    8174:	00000014 00000015 0000001b              ............

00008180 <kb_row>:
    8180:	00000004 00000008 00000010 00000020     ............ ...
    8190:	00000040 00000080 00000400 00000800     @...............
    81a0:	00001000 00002000                       ..... ..

000081a8 <kb_row_index>:
    81a8:	00000002 00000003 00000004 00000005     ................
    81b8:	00000006 00000007 0000000a 0000000b     ................
    81c8:	0000000c 0000000d                       ........

000081d0 <beelzebub.12965>:
    81d0:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    81e0:	64012201 d4019201 08020702 5f023402     .".d.........4._
    81f0:	94027802 bb02a602 db02ca02 f902e802     .x..............
    8200:	7f031f03                                ....

00008204 <belial.12962>:
    8204:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    8214:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    8224:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    8234:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    8244:	35c9c9c9 0000363a                       ...5:6..

0000824c <lucifer.12964>:
    824c:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    825c:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    826c:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    827c:	00cc0008 01707005 02030303 02d00000     .....pp.........
    828c:	00505050 00000055                       PPP.U...

00008294 <mulciber.12963>:
    8294:	03020100 02010004 00020100 01000201     ................
    82a4:	02010002 00020100 01000201 01000002     ................
    82b4:	02010000 00020100 01000201 03020100     ................
    82c4:	00000004 01000100 01000302 02010002     ................
    82d4:	00000403 00000000 65530d0a 6c616972     ..........Serial
    82e4:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

000082f4 <_global_impure_ptr>:
    82f4:	200001ac 33323130 37363534 62613938     ... 0123456789ab
    8304:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    8314:	76757473 7a797877 00000000              stuvwxyz....

00008320 <__sf_fake_stderr>:
	...

00008340 <__sf_fake_stdin>:
	...

00008360 <__sf_fake_stdout>:
	...
    8380:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8390:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    83a0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    83b0:	00006665                                ef..

000083b4 <_init>:
    83b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83b6:	46c0      	nop			; (mov r8, r8)
    83b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    83ba:	bc08      	pop	{r3}
    83bc:	469e      	mov	lr, r3
    83be:	4770      	bx	lr

000083c0 <__init_array_start>:
    83c0:	000000dd 	.word	0x000000dd

000083c4 <_fini>:
    83c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83c6:	46c0      	nop			; (mov r8, r8)
    83c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    83ca:	bc08      	pop	{r3}
    83cc:	469e      	mov	lr, r3
    83ce:	4770      	bx	lr

000083d0 <__fini_array_start>:
    83d0:	000000b5 	.word	0x000000b5
