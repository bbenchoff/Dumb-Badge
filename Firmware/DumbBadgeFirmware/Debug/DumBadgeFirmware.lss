
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d80  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00002d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  20000074  00002df4  00020074  2**2
                  ALLOC
  3 .stack        00002004  2000012c  00002eac  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00025564  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fc8  00000000  00000000  00045659  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004439  00000000  00000000  00048621  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000490  00000000  00000000  0004ca5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000530  00000000  00000000  0004ceea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a610  00000000  00000000  0004d41a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009fbf  00000000  00000000  00067a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008e76b  00000000  00000000  000719e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c98  00000000  00000000  00100154  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 21 00 20 05 11 00 00 01 11 00 00 01 11 00 00     0!. ............
	...
      2c:	01 11 00 00 00 00 00 00 00 00 00 00 01 11 00 00     ................
      3c:	01 11 00 00 01 11 00 00 01 11 00 00 01 11 00 00     ................
      4c:	01 11 00 00 01 11 00 00 01 11 00 00 01 11 00 00     ................
      5c:	01 11 00 00 01 11 00 00 31 06 00 00 41 06 00 00     ........1...A...
      6c:	51 06 00 00 61 06 00 00 71 06 00 00 81 06 00 00     Q...a...q.......
      7c:	01 11 00 00 01 11 00 00 01 11 00 00 01 11 00 00     ................
      8c:	01 11 00 00 01 11 00 00 01 11 00 00 01 11 00 00     ................
      9c:	01 11 00 00 01 11 00 00 01 11 00 00 01 11 00 00     ................
      ac:	01 11 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
      d8:	00002d80 	.word	0x00002d80

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	00002d80 	.word	0x00002d80
     10c:	00002d80 	.word	0x00002d80
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00000e91 	.word	0x00000e91
     140:	000027ad 	.word	0x000027ad
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	20000090 	.word	0x20000090
     1b8:	20000094 	.word	0x20000094
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	20000090 	.word	0x20000090
     1e8:	20000094 	.word	0x20000094
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	203e      	movs	r0, #62	; 0x3e
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	05d2      	lsls	r2, r2, #23
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	200f      	movs	r0, #15
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	00000229 	.word	0x00000229
     224:	41004480 	.word	0x41004480

00000228 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     228:	b500      	push	{lr}
     22a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     22c:	ab01      	add	r3, sp, #4
     22e:	2280      	movs	r2, #128	; 0x80
     230:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     232:	780a      	ldrb	r2, [r1, #0]
     234:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     236:	784a      	ldrb	r2, [r1, #1]
     238:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     23a:	788a      	ldrb	r2, [r1, #2]
     23c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     23e:	0019      	movs	r1, r3
     240:	4b01      	ldr	r3, [pc, #4]	; (248 <port_pin_set_config+0x20>)
     242:	4798      	blx	r3
}
     244:	b003      	add	sp, #12
     246:	bd00      	pop	{pc}
     248:	000010a1 	.word	0x000010a1

0000024c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     24c:	b5f0      	push	{r4, r5, r6, r7, lr}
     24e:	46de      	mov	lr, fp
     250:	4657      	mov	r7, sl
     252:	464e      	mov	r6, r9
     254:	4645      	mov	r5, r8
     256:	b5e0      	push	{r5, r6, r7, lr}
     258:	b087      	sub	sp, #28
     25a:	4680      	mov	r8, r0
     25c:	9104      	str	r1, [sp, #16]
     25e:	0016      	movs	r6, r2
     260:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     262:	2200      	movs	r2, #0
     264:	2300      	movs	r3, #0
     266:	2100      	movs	r1, #0
     268:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     26a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     26c:	2001      	movs	r0, #1
     26e:	0021      	movs	r1, r4
     270:	9600      	str	r6, [sp, #0]
     272:	9701      	str	r7, [sp, #4]
     274:	465c      	mov	r4, fp
     276:	9403      	str	r4, [sp, #12]
     278:	4644      	mov	r4, r8
     27a:	9405      	str	r4, [sp, #20]
     27c:	e013      	b.n	2a6 <long_division+0x5a>
     27e:	2420      	movs	r4, #32
     280:	1a64      	subs	r4, r4, r1
     282:	0005      	movs	r5, r0
     284:	40e5      	lsrs	r5, r4
     286:	46a8      	mov	r8, r5
     288:	e014      	b.n	2b4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     28a:	9c00      	ldr	r4, [sp, #0]
     28c:	9d01      	ldr	r5, [sp, #4]
     28e:	1b12      	subs	r2, r2, r4
     290:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     292:	465c      	mov	r4, fp
     294:	464d      	mov	r5, r9
     296:	432c      	orrs	r4, r5
     298:	46a3      	mov	fp, r4
     29a:	9c03      	ldr	r4, [sp, #12]
     29c:	4645      	mov	r5, r8
     29e:	432c      	orrs	r4, r5
     2a0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     2a2:	3901      	subs	r1, #1
     2a4:	d325      	bcc.n	2f2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     2a6:	2420      	movs	r4, #32
     2a8:	4264      	negs	r4, r4
     2aa:	190c      	adds	r4, r1, r4
     2ac:	d4e7      	bmi.n	27e <long_division+0x32>
     2ae:	0005      	movs	r5, r0
     2b0:	40a5      	lsls	r5, r4
     2b2:	46a8      	mov	r8, r5
     2b4:	0004      	movs	r4, r0
     2b6:	408c      	lsls	r4, r1
     2b8:	46a1      	mov	r9, r4
		r = r << 1;
     2ba:	1892      	adds	r2, r2, r2
     2bc:	415b      	adcs	r3, r3
     2be:	0014      	movs	r4, r2
     2c0:	001d      	movs	r5, r3
		if (n & bit_shift) {
     2c2:	9e05      	ldr	r6, [sp, #20]
     2c4:	464f      	mov	r7, r9
     2c6:	403e      	ands	r6, r7
     2c8:	46b4      	mov	ip, r6
     2ca:	9e04      	ldr	r6, [sp, #16]
     2cc:	4647      	mov	r7, r8
     2ce:	403e      	ands	r6, r7
     2d0:	46b2      	mov	sl, r6
     2d2:	4666      	mov	r6, ip
     2d4:	4657      	mov	r7, sl
     2d6:	433e      	orrs	r6, r7
     2d8:	d003      	beq.n	2e2 <long_division+0x96>
			r |= 0x01;
     2da:	0006      	movs	r6, r0
     2dc:	4326      	orrs	r6, r4
     2de:	0032      	movs	r2, r6
     2e0:	002b      	movs	r3, r5
		if (r >= d) {
     2e2:	9c00      	ldr	r4, [sp, #0]
     2e4:	9d01      	ldr	r5, [sp, #4]
     2e6:	429d      	cmp	r5, r3
     2e8:	d8db      	bhi.n	2a2 <long_division+0x56>
     2ea:	d1ce      	bne.n	28a <long_division+0x3e>
     2ec:	4294      	cmp	r4, r2
     2ee:	d8d8      	bhi.n	2a2 <long_division+0x56>
     2f0:	e7cb      	b.n	28a <long_division+0x3e>
     2f2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     2f4:	4658      	mov	r0, fp
     2f6:	0019      	movs	r1, r3
     2f8:	b007      	add	sp, #28
     2fa:	bc3c      	pop	{r2, r3, r4, r5}
     2fc:	4690      	mov	r8, r2
     2fe:	4699      	mov	r9, r3
     300:	46a2      	mov	sl, r4
     302:	46ab      	mov	fp, r5
     304:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000306 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     306:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     308:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     30a:	2340      	movs	r3, #64	; 0x40
     30c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     30e:	4281      	cmp	r1, r0
     310:	d202      	bcs.n	318 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     312:	0018      	movs	r0, r3
     314:	bd10      	pop	{r4, pc}
		baud_calculated++;
     316:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     318:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     31a:	1c63      	adds	r3, r4, #1
     31c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     31e:	4288      	cmp	r0, r1
     320:	d9f9      	bls.n	316 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     322:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     324:	2cff      	cmp	r4, #255	; 0xff
     326:	d8f4      	bhi.n	312 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     328:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     32a:	2300      	movs	r3, #0
     32c:	e7f1      	b.n	312 <_sercom_get_sync_baud_val+0xc>
	...

00000330 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     330:	b5f0      	push	{r4, r5, r6, r7, lr}
     332:	b083      	sub	sp, #12
     334:	000f      	movs	r7, r1
     336:	0016      	movs	r6, r2
     338:	aa08      	add	r2, sp, #32
     33a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     33c:	0004      	movs	r4, r0
     33e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     340:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     342:	42bc      	cmp	r4, r7
     344:	d902      	bls.n	34c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     346:	0010      	movs	r0, r2
     348:	b003      	add	sp, #12
     34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     34c:	2b00      	cmp	r3, #0
     34e:	d114      	bne.n	37a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     350:	0002      	movs	r2, r0
     352:	0008      	movs	r0, r1
     354:	2100      	movs	r1, #0
     356:	4c19      	ldr	r4, [pc, #100]	; (3bc <_sercom_get_async_baud_val+0x8c>)
     358:	47a0      	blx	r4
     35a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     35c:	003a      	movs	r2, r7
     35e:	2300      	movs	r3, #0
     360:	2000      	movs	r0, #0
     362:	4c17      	ldr	r4, [pc, #92]	; (3c0 <_sercom_get_async_baud_val+0x90>)
     364:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     366:	2200      	movs	r2, #0
     368:	2301      	movs	r3, #1
     36a:	1a12      	subs	r2, r2, r0
     36c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     36e:	0c12      	lsrs	r2, r2, #16
     370:	041b      	lsls	r3, r3, #16
     372:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     374:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     376:	2200      	movs	r2, #0
     378:	e7e5      	b.n	346 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     37a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     37c:	2b01      	cmp	r3, #1
     37e:	d1f9      	bne.n	374 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     380:	000a      	movs	r2, r1
     382:	2300      	movs	r3, #0
     384:	2100      	movs	r1, #0
     386:	4c0d      	ldr	r4, [pc, #52]	; (3bc <_sercom_get_async_baud_val+0x8c>)
     388:	47a0      	blx	r4
     38a:	0002      	movs	r2, r0
     38c:	000b      	movs	r3, r1
     38e:	9200      	str	r2, [sp, #0]
     390:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     392:	0038      	movs	r0, r7
     394:	2100      	movs	r1, #0
     396:	4c0a      	ldr	r4, [pc, #40]	; (3c0 <_sercom_get_async_baud_val+0x90>)
     398:	47a0      	blx	r4
     39a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     39c:	2380      	movs	r3, #128	; 0x80
     39e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3a0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     3a2:	4298      	cmp	r0, r3
     3a4:	d8cf      	bhi.n	346 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     3a6:	0f79      	lsrs	r1, r7, #29
     3a8:	00f8      	lsls	r0, r7, #3
     3aa:	9a00      	ldr	r2, [sp, #0]
     3ac:	9b01      	ldr	r3, [sp, #4]
     3ae:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     3b0:	00ea      	lsls	r2, r5, #3
     3b2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     3b4:	b2d2      	uxtb	r2, r2
     3b6:	0352      	lsls	r2, r2, #13
     3b8:	432a      	orrs	r2, r5
     3ba:	e7db      	b.n	374 <_sercom_get_async_baud_val+0x44>
     3bc:	00002a99 	.word	0x00002a99
     3c0:	0000024d 	.word	0x0000024d

000003c4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     3c4:	b510      	push	{r4, lr}
     3c6:	b082      	sub	sp, #8
     3c8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     3ca:	4b0e      	ldr	r3, [pc, #56]	; (404 <sercom_set_gclk_generator+0x40>)
     3cc:	781b      	ldrb	r3, [r3, #0]
     3ce:	2b00      	cmp	r3, #0
     3d0:	d007      	beq.n	3e2 <sercom_set_gclk_generator+0x1e>
     3d2:	2900      	cmp	r1, #0
     3d4:	d105      	bne.n	3e2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     3d6:	4b0b      	ldr	r3, [pc, #44]	; (404 <sercom_set_gclk_generator+0x40>)
     3d8:	785b      	ldrb	r3, [r3, #1]
     3da:	4283      	cmp	r3, r0
     3dc:	d010      	beq.n	400 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     3de:	201d      	movs	r0, #29
     3e0:	e00c      	b.n	3fc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     3e2:	a901      	add	r1, sp, #4
     3e4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     3e6:	2013      	movs	r0, #19
     3e8:	4b07      	ldr	r3, [pc, #28]	; (408 <sercom_set_gclk_generator+0x44>)
     3ea:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     3ec:	2013      	movs	r0, #19
     3ee:	4b07      	ldr	r3, [pc, #28]	; (40c <sercom_set_gclk_generator+0x48>)
     3f0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     3f2:	4b04      	ldr	r3, [pc, #16]	; (404 <sercom_set_gclk_generator+0x40>)
     3f4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     3f6:	2201      	movs	r2, #1
     3f8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     3fa:	2000      	movs	r0, #0
}
     3fc:	b002      	add	sp, #8
     3fe:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     400:	2000      	movs	r0, #0
     402:	e7fb      	b.n	3fc <sercom_set_gclk_generator+0x38>
     404:	20000098 	.word	0x20000098
     408:	00000fa9 	.word	0x00000fa9
     40c:	00000f1d 	.word	0x00000f1d

00000410 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     410:	4b40      	ldr	r3, [pc, #256]	; (514 <_sercom_get_default_pad+0x104>)
     412:	4298      	cmp	r0, r3
     414:	d031      	beq.n	47a <_sercom_get_default_pad+0x6a>
     416:	d90a      	bls.n	42e <_sercom_get_default_pad+0x1e>
     418:	4b3f      	ldr	r3, [pc, #252]	; (518 <_sercom_get_default_pad+0x108>)
     41a:	4298      	cmp	r0, r3
     41c:	d04d      	beq.n	4ba <_sercom_get_default_pad+0xaa>
     41e:	4b3f      	ldr	r3, [pc, #252]	; (51c <_sercom_get_default_pad+0x10c>)
     420:	4298      	cmp	r0, r3
     422:	d05a      	beq.n	4da <_sercom_get_default_pad+0xca>
     424:	4b3e      	ldr	r3, [pc, #248]	; (520 <_sercom_get_default_pad+0x110>)
     426:	4298      	cmp	r0, r3
     428:	d037      	beq.n	49a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     42a:	2000      	movs	r0, #0
}
     42c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     42e:	4b3d      	ldr	r3, [pc, #244]	; (524 <_sercom_get_default_pad+0x114>)
     430:	4298      	cmp	r0, r3
     432:	d00c      	beq.n	44e <_sercom_get_default_pad+0x3e>
     434:	4b3c      	ldr	r3, [pc, #240]	; (528 <_sercom_get_default_pad+0x118>)
     436:	4298      	cmp	r0, r3
     438:	d1f7      	bne.n	42a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     43a:	2901      	cmp	r1, #1
     43c:	d017      	beq.n	46e <_sercom_get_default_pad+0x5e>
     43e:	2900      	cmp	r1, #0
     440:	d05d      	beq.n	4fe <_sercom_get_default_pad+0xee>
     442:	2902      	cmp	r1, #2
     444:	d015      	beq.n	472 <_sercom_get_default_pad+0x62>
     446:	2903      	cmp	r1, #3
     448:	d015      	beq.n	476 <_sercom_get_default_pad+0x66>
	return 0;
     44a:	2000      	movs	r0, #0
     44c:	e7ee      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     44e:	2901      	cmp	r1, #1
     450:	d007      	beq.n	462 <_sercom_get_default_pad+0x52>
     452:	2900      	cmp	r1, #0
     454:	d051      	beq.n	4fa <_sercom_get_default_pad+0xea>
     456:	2902      	cmp	r1, #2
     458:	d005      	beq.n	466 <_sercom_get_default_pad+0x56>
     45a:	2903      	cmp	r1, #3
     45c:	d005      	beq.n	46a <_sercom_get_default_pad+0x5a>
	return 0;
     45e:	2000      	movs	r0, #0
     460:	e7e4      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     462:	4832      	ldr	r0, [pc, #200]	; (52c <_sercom_get_default_pad+0x11c>)
     464:	e7e2      	b.n	42c <_sercom_get_default_pad+0x1c>
     466:	4832      	ldr	r0, [pc, #200]	; (530 <_sercom_get_default_pad+0x120>)
     468:	e7e0      	b.n	42c <_sercom_get_default_pad+0x1c>
     46a:	4832      	ldr	r0, [pc, #200]	; (534 <_sercom_get_default_pad+0x124>)
     46c:	e7de      	b.n	42c <_sercom_get_default_pad+0x1c>
     46e:	4832      	ldr	r0, [pc, #200]	; (538 <_sercom_get_default_pad+0x128>)
     470:	e7dc      	b.n	42c <_sercom_get_default_pad+0x1c>
     472:	4832      	ldr	r0, [pc, #200]	; (53c <_sercom_get_default_pad+0x12c>)
     474:	e7da      	b.n	42c <_sercom_get_default_pad+0x1c>
     476:	4832      	ldr	r0, [pc, #200]	; (540 <_sercom_get_default_pad+0x130>)
     478:	e7d8      	b.n	42c <_sercom_get_default_pad+0x1c>
     47a:	2901      	cmp	r1, #1
     47c:	d007      	beq.n	48e <_sercom_get_default_pad+0x7e>
     47e:	2900      	cmp	r1, #0
     480:	d03f      	beq.n	502 <_sercom_get_default_pad+0xf2>
     482:	2902      	cmp	r1, #2
     484:	d005      	beq.n	492 <_sercom_get_default_pad+0x82>
     486:	2903      	cmp	r1, #3
     488:	d005      	beq.n	496 <_sercom_get_default_pad+0x86>
	return 0;
     48a:	2000      	movs	r0, #0
     48c:	e7ce      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     48e:	482d      	ldr	r0, [pc, #180]	; (544 <_sercom_get_default_pad+0x134>)
     490:	e7cc      	b.n	42c <_sercom_get_default_pad+0x1c>
     492:	482d      	ldr	r0, [pc, #180]	; (548 <_sercom_get_default_pad+0x138>)
     494:	e7ca      	b.n	42c <_sercom_get_default_pad+0x1c>
     496:	482d      	ldr	r0, [pc, #180]	; (54c <_sercom_get_default_pad+0x13c>)
     498:	e7c8      	b.n	42c <_sercom_get_default_pad+0x1c>
     49a:	2901      	cmp	r1, #1
     49c:	d007      	beq.n	4ae <_sercom_get_default_pad+0x9e>
     49e:	2900      	cmp	r1, #0
     4a0:	d031      	beq.n	506 <_sercom_get_default_pad+0xf6>
     4a2:	2902      	cmp	r1, #2
     4a4:	d005      	beq.n	4b2 <_sercom_get_default_pad+0xa2>
     4a6:	2903      	cmp	r1, #3
     4a8:	d005      	beq.n	4b6 <_sercom_get_default_pad+0xa6>
	return 0;
     4aa:	2000      	movs	r0, #0
     4ac:	e7be      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ae:	4828      	ldr	r0, [pc, #160]	; (550 <_sercom_get_default_pad+0x140>)
     4b0:	e7bc      	b.n	42c <_sercom_get_default_pad+0x1c>
     4b2:	4828      	ldr	r0, [pc, #160]	; (554 <_sercom_get_default_pad+0x144>)
     4b4:	e7ba      	b.n	42c <_sercom_get_default_pad+0x1c>
     4b6:	4828      	ldr	r0, [pc, #160]	; (558 <_sercom_get_default_pad+0x148>)
     4b8:	e7b8      	b.n	42c <_sercom_get_default_pad+0x1c>
     4ba:	2901      	cmp	r1, #1
     4bc:	d007      	beq.n	4ce <_sercom_get_default_pad+0xbe>
     4be:	2900      	cmp	r1, #0
     4c0:	d023      	beq.n	50a <_sercom_get_default_pad+0xfa>
     4c2:	2902      	cmp	r1, #2
     4c4:	d005      	beq.n	4d2 <_sercom_get_default_pad+0xc2>
     4c6:	2903      	cmp	r1, #3
     4c8:	d005      	beq.n	4d6 <_sercom_get_default_pad+0xc6>
	return 0;
     4ca:	2000      	movs	r0, #0
     4cc:	e7ae      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ce:	4823      	ldr	r0, [pc, #140]	; (55c <_sercom_get_default_pad+0x14c>)
     4d0:	e7ac      	b.n	42c <_sercom_get_default_pad+0x1c>
     4d2:	4823      	ldr	r0, [pc, #140]	; (560 <_sercom_get_default_pad+0x150>)
     4d4:	e7aa      	b.n	42c <_sercom_get_default_pad+0x1c>
     4d6:	4823      	ldr	r0, [pc, #140]	; (564 <_sercom_get_default_pad+0x154>)
     4d8:	e7a8      	b.n	42c <_sercom_get_default_pad+0x1c>
     4da:	2901      	cmp	r1, #1
     4dc:	d007      	beq.n	4ee <_sercom_get_default_pad+0xde>
     4de:	2900      	cmp	r1, #0
     4e0:	d015      	beq.n	50e <_sercom_get_default_pad+0xfe>
     4e2:	2902      	cmp	r1, #2
     4e4:	d005      	beq.n	4f2 <_sercom_get_default_pad+0xe2>
     4e6:	2903      	cmp	r1, #3
     4e8:	d005      	beq.n	4f6 <_sercom_get_default_pad+0xe6>
	return 0;
     4ea:	2000      	movs	r0, #0
     4ec:	e79e      	b.n	42c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ee:	481e      	ldr	r0, [pc, #120]	; (568 <_sercom_get_default_pad+0x158>)
     4f0:	e79c      	b.n	42c <_sercom_get_default_pad+0x1c>
     4f2:	481e      	ldr	r0, [pc, #120]	; (56c <_sercom_get_default_pad+0x15c>)
     4f4:	e79a      	b.n	42c <_sercom_get_default_pad+0x1c>
     4f6:	481e      	ldr	r0, [pc, #120]	; (570 <_sercom_get_default_pad+0x160>)
     4f8:	e798      	b.n	42c <_sercom_get_default_pad+0x1c>
     4fa:	481e      	ldr	r0, [pc, #120]	; (574 <_sercom_get_default_pad+0x164>)
     4fc:	e796      	b.n	42c <_sercom_get_default_pad+0x1c>
     4fe:	2003      	movs	r0, #3
     500:	e794      	b.n	42c <_sercom_get_default_pad+0x1c>
     502:	481d      	ldr	r0, [pc, #116]	; (578 <_sercom_get_default_pad+0x168>)
     504:	e792      	b.n	42c <_sercom_get_default_pad+0x1c>
     506:	481d      	ldr	r0, [pc, #116]	; (57c <_sercom_get_default_pad+0x16c>)
     508:	e790      	b.n	42c <_sercom_get_default_pad+0x1c>
     50a:	481d      	ldr	r0, [pc, #116]	; (580 <_sercom_get_default_pad+0x170>)
     50c:	e78e      	b.n	42c <_sercom_get_default_pad+0x1c>
     50e:	481d      	ldr	r0, [pc, #116]	; (584 <_sercom_get_default_pad+0x174>)
     510:	e78c      	b.n	42c <_sercom_get_default_pad+0x1c>
     512:	46c0      	nop			; (mov r8, r8)
     514:	42001000 	.word	0x42001000
     518:	42001800 	.word	0x42001800
     51c:	42001c00 	.word	0x42001c00
     520:	42001400 	.word	0x42001400
     524:	42000800 	.word	0x42000800
     528:	42000c00 	.word	0x42000c00
     52c:	00050003 	.word	0x00050003
     530:	00060003 	.word	0x00060003
     534:	00070003 	.word	0x00070003
     538:	00010003 	.word	0x00010003
     53c:	001e0003 	.word	0x001e0003
     540:	001f0003 	.word	0x001f0003
     544:	00090003 	.word	0x00090003
     548:	000a0003 	.word	0x000a0003
     54c:	000b0003 	.word	0x000b0003
     550:	00110003 	.word	0x00110003
     554:	00120003 	.word	0x00120003
     558:	00130003 	.word	0x00130003
     55c:	000d0003 	.word	0x000d0003
     560:	000e0003 	.word	0x000e0003
     564:	000f0003 	.word	0x000f0003
     568:	00170003 	.word	0x00170003
     56c:	00180003 	.word	0x00180003
     570:	00190003 	.word	0x00190003
     574:	00040003 	.word	0x00040003
     578:	00080003 	.word	0x00080003
     57c:	00100003 	.word	0x00100003
     580:	000c0003 	.word	0x000c0003
     584:	00160003 	.word	0x00160003

00000588 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     588:	b530      	push	{r4, r5, lr}
     58a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     58c:	4b0b      	ldr	r3, [pc, #44]	; (5bc <_sercom_get_sercom_inst_index+0x34>)
     58e:	466a      	mov	r2, sp
     590:	cb32      	ldmia	r3!, {r1, r4, r5}
     592:	c232      	stmia	r2!, {r1, r4, r5}
     594:	cb32      	ldmia	r3!, {r1, r4, r5}
     596:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     598:	9b00      	ldr	r3, [sp, #0]
     59a:	4283      	cmp	r3, r0
     59c:	d00b      	beq.n	5b6 <_sercom_get_sercom_inst_index+0x2e>
     59e:	2301      	movs	r3, #1
     5a0:	009a      	lsls	r2, r3, #2
     5a2:	4669      	mov	r1, sp
     5a4:	5852      	ldr	r2, [r2, r1]
     5a6:	4282      	cmp	r2, r0
     5a8:	d006      	beq.n	5b8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5aa:	3301      	adds	r3, #1
     5ac:	2b06      	cmp	r3, #6
     5ae:	d1f7      	bne.n	5a0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     5b0:	2000      	movs	r0, #0
}
     5b2:	b007      	add	sp, #28
     5b4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5b6:	2300      	movs	r3, #0
			return i;
     5b8:	b2d8      	uxtb	r0, r3
     5ba:	e7fa      	b.n	5b2 <_sercom_get_sercom_inst_index+0x2a>
     5bc:	00002d00 	.word	0x00002d00

000005c0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     5c0:	4770      	bx	lr
	...

000005c4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     5c6:	4b0a      	ldr	r3, [pc, #40]	; (5f0 <_sercom_set_handler+0x2c>)
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b00      	cmp	r3, #0
     5cc:	d10c      	bne.n	5e8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     5ce:	4f09      	ldr	r7, [pc, #36]	; (5f4 <_sercom_set_handler+0x30>)
     5d0:	4e09      	ldr	r6, [pc, #36]	; (5f8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     5d2:	4d0a      	ldr	r5, [pc, #40]	; (5fc <_sercom_set_handler+0x38>)
     5d4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     5d6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     5d8:	195a      	adds	r2, r3, r5
     5da:	6014      	str	r4, [r2, #0]
     5dc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5de:	2b18      	cmp	r3, #24
     5e0:	d1f9      	bne.n	5d6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     5e2:	2201      	movs	r2, #1
     5e4:	4b02      	ldr	r3, [pc, #8]	; (5f0 <_sercom_set_handler+0x2c>)
     5e6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     5e8:	0080      	lsls	r0, r0, #2
     5ea:	4b02      	ldr	r3, [pc, #8]	; (5f4 <_sercom_set_handler+0x30>)
     5ec:	50c1      	str	r1, [r0, r3]
}
     5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5f0:	2000009a 	.word	0x2000009a
     5f4:	2000009c 	.word	0x2000009c
     5f8:	000005c1 	.word	0x000005c1
     5fc:	200000d8 	.word	0x200000d8

00000600 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     600:	b500      	push	{lr}
     602:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     604:	2309      	movs	r3, #9
     606:	466a      	mov	r2, sp
     608:	7013      	strb	r3, [r2, #0]
     60a:	3301      	adds	r3, #1
     60c:	7053      	strb	r3, [r2, #1]
     60e:	3301      	adds	r3, #1
     610:	7093      	strb	r3, [r2, #2]
     612:	3301      	adds	r3, #1
     614:	70d3      	strb	r3, [r2, #3]
     616:	3301      	adds	r3, #1
     618:	7113      	strb	r3, [r2, #4]
     61a:	3301      	adds	r3, #1
     61c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     61e:	4b03      	ldr	r3, [pc, #12]	; (62c <_sercom_get_interrupt_vector+0x2c>)
     620:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     622:	466b      	mov	r3, sp
     624:	5618      	ldrsb	r0, [r3, r0]
}
     626:	b003      	add	sp, #12
     628:	bd00      	pop	{pc}
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	00000589 	.word	0x00000589

00000630 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     630:	b510      	push	{r4, lr}
     632:	4b02      	ldr	r3, [pc, #8]	; (63c <SERCOM0_Handler+0xc>)
     634:	681b      	ldr	r3, [r3, #0]
     636:	2000      	movs	r0, #0
     638:	4798      	blx	r3
     63a:	bd10      	pop	{r4, pc}
     63c:	2000009c 	.word	0x2000009c

00000640 <SERCOM1_Handler>:
     640:	b510      	push	{r4, lr}
     642:	4b02      	ldr	r3, [pc, #8]	; (64c <SERCOM1_Handler+0xc>)
     644:	685b      	ldr	r3, [r3, #4]
     646:	2001      	movs	r0, #1
     648:	4798      	blx	r3
     64a:	bd10      	pop	{r4, pc}
     64c:	2000009c 	.word	0x2000009c

00000650 <SERCOM2_Handler>:
     650:	b510      	push	{r4, lr}
     652:	4b02      	ldr	r3, [pc, #8]	; (65c <SERCOM2_Handler+0xc>)
     654:	689b      	ldr	r3, [r3, #8]
     656:	2002      	movs	r0, #2
     658:	4798      	blx	r3
     65a:	bd10      	pop	{r4, pc}
     65c:	2000009c 	.word	0x2000009c

00000660 <SERCOM3_Handler>:
     660:	b510      	push	{r4, lr}
     662:	4b02      	ldr	r3, [pc, #8]	; (66c <SERCOM3_Handler+0xc>)
     664:	68db      	ldr	r3, [r3, #12]
     666:	2003      	movs	r0, #3
     668:	4798      	blx	r3
     66a:	bd10      	pop	{r4, pc}
     66c:	2000009c 	.word	0x2000009c

00000670 <SERCOM4_Handler>:
     670:	b510      	push	{r4, lr}
     672:	4b02      	ldr	r3, [pc, #8]	; (67c <SERCOM4_Handler+0xc>)
     674:	691b      	ldr	r3, [r3, #16]
     676:	2004      	movs	r0, #4
     678:	4798      	blx	r3
     67a:	bd10      	pop	{r4, pc}
     67c:	2000009c 	.word	0x2000009c

00000680 <SERCOM5_Handler>:
     680:	b510      	push	{r4, lr}
     682:	4b02      	ldr	r3, [pc, #8]	; (68c <SERCOM5_Handler+0xc>)
     684:	695b      	ldr	r3, [r3, #20]
     686:	2005      	movs	r0, #5
     688:	4798      	blx	r3
     68a:	bd10      	pop	{r4, pc}
     68c:	2000009c 	.word	0x2000009c

00000690 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     690:	b5f0      	push	{r4, r5, r6, r7, lr}
     692:	46de      	mov	lr, fp
     694:	4657      	mov	r7, sl
     696:	464e      	mov	r6, r9
     698:	4645      	mov	r5, r8
     69a:	b5e0      	push	{r5, r6, r7, lr}
     69c:	b091      	sub	sp, #68	; 0x44
     69e:	0005      	movs	r5, r0
     6a0:	000c      	movs	r4, r1
     6a2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     6a4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6a6:	0008      	movs	r0, r1
     6a8:	4bba      	ldr	r3, [pc, #744]	; (994 <usart_init+0x304>)
     6aa:	4798      	blx	r3
     6ac:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     6ae:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     6b0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     6b2:	07db      	lsls	r3, r3, #31
     6b4:	d506      	bpl.n	6c4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     6b6:	b011      	add	sp, #68	; 0x44
     6b8:	bc3c      	pop	{r2, r3, r4, r5}
     6ba:	4690      	mov	r8, r2
     6bc:	4699      	mov	r9, r3
     6be:	46a2      	mov	sl, r4
     6c0:	46ab      	mov	fp, r5
     6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     6c4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     6c6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     6c8:	079b      	lsls	r3, r3, #30
     6ca:	d4f4      	bmi.n	6b6 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     6cc:	49b2      	ldr	r1, [pc, #712]	; (998 <usart_init+0x308>)
     6ce:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     6d0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     6d2:	2301      	movs	r3, #1
     6d4:	40bb      	lsls	r3, r7
     6d6:	4303      	orrs	r3, r0
     6d8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     6da:	a90f      	add	r1, sp, #60	; 0x3c
     6dc:	272d      	movs	r7, #45	; 0x2d
     6de:	5df3      	ldrb	r3, [r6, r7]
     6e0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6e2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     6e4:	b2d3      	uxtb	r3, r2
     6e6:	9302      	str	r3, [sp, #8]
     6e8:	0018      	movs	r0, r3
     6ea:	4bac      	ldr	r3, [pc, #688]	; (99c <usart_init+0x30c>)
     6ec:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     6ee:	9802      	ldr	r0, [sp, #8]
     6f0:	4bab      	ldr	r3, [pc, #684]	; (9a0 <usart_init+0x310>)
     6f2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     6f4:	5df0      	ldrb	r0, [r6, r7]
     6f6:	2100      	movs	r1, #0
     6f8:	4baa      	ldr	r3, [pc, #680]	; (9a4 <usart_init+0x314>)
     6fa:	4798      	blx	r3
	module->character_size = config->character_size;
     6fc:	7af3      	ldrb	r3, [r6, #11]
     6fe:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     700:	2324      	movs	r3, #36	; 0x24
     702:	5cf3      	ldrb	r3, [r6, r3]
     704:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     706:	2325      	movs	r3, #37	; 0x25
     708:	5cf3      	ldrb	r3, [r6, r3]
     70a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     70c:	7ef3      	ldrb	r3, [r6, #27]
     70e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     710:	7f33      	ldrb	r3, [r6, #28]
     712:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     714:	682b      	ldr	r3, [r5, #0]
     716:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     718:	0018      	movs	r0, r3
     71a:	4b9e      	ldr	r3, [pc, #632]	; (994 <usart_init+0x304>)
     71c:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     71e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     720:	2200      	movs	r2, #0
     722:	230e      	movs	r3, #14
     724:	a906      	add	r1, sp, #24
     726:	468c      	mov	ip, r1
     728:	4463      	add	r3, ip
     72a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     72c:	8a32      	ldrh	r2, [r6, #16]
     72e:	9202      	str	r2, [sp, #8]
     730:	2380      	movs	r3, #128	; 0x80
     732:	01db      	lsls	r3, r3, #7
     734:	429a      	cmp	r2, r3
     736:	d100      	bne.n	73a <usart_init+0xaa>
     738:	e09a      	b.n	870 <usart_init+0x1e0>
     73a:	d90f      	bls.n	75c <usart_init+0xcc>
     73c:	23c0      	movs	r3, #192	; 0xc0
     73e:	01db      	lsls	r3, r3, #7
     740:	9a02      	ldr	r2, [sp, #8]
     742:	429a      	cmp	r2, r3
     744:	d100      	bne.n	748 <usart_init+0xb8>
     746:	e08e      	b.n	866 <usart_init+0x1d6>
     748:	2380      	movs	r3, #128	; 0x80
     74a:	021b      	lsls	r3, r3, #8
     74c:	429a      	cmp	r2, r3
     74e:	d000      	beq.n	752 <usart_init+0xc2>
     750:	e11b      	b.n	98a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     752:	2303      	movs	r3, #3
     754:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     756:	2300      	movs	r3, #0
     758:	9307      	str	r3, [sp, #28]
     75a:	e008      	b.n	76e <usart_init+0xde>
	switch (config->sample_rate) {
     75c:	2380      	movs	r3, #128	; 0x80
     75e:	019b      	lsls	r3, r3, #6
     760:	429a      	cmp	r2, r3
     762:	d000      	beq.n	766 <usart_init+0xd6>
     764:	e111      	b.n	98a <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     766:	2310      	movs	r3, #16
     768:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     76a:	3b0f      	subs	r3, #15
     76c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     76e:	6833      	ldr	r3, [r6, #0]
     770:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     772:	68f3      	ldr	r3, [r6, #12]
     774:	469b      	mov	fp, r3
		config->sample_adjustment |
     776:	6973      	ldr	r3, [r6, #20]
     778:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     77a:	7e33      	ldrb	r3, [r6, #24]
     77c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     77e:	2326      	movs	r3, #38	; 0x26
     780:	5cf3      	ldrb	r3, [r6, r3]
     782:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     784:	6873      	ldr	r3, [r6, #4]
     786:	4699      	mov	r9, r3
	switch (transfer_mode)
     788:	2b00      	cmp	r3, #0
     78a:	d100      	bne.n	78e <usart_init+0xfe>
     78c:	e09c      	b.n	8c8 <usart_init+0x238>
     78e:	2380      	movs	r3, #128	; 0x80
     790:	055b      	lsls	r3, r3, #21
     792:	4599      	cmp	r9, r3
     794:	d100      	bne.n	798 <usart_init+0x108>
     796:	e080      	b.n	89a <usart_init+0x20a>
	if(config->encoding_format_enable) {
     798:	7e73      	ldrb	r3, [r6, #25]
     79a:	2b00      	cmp	r3, #0
     79c:	d002      	beq.n	7a4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     79e:	7eb3      	ldrb	r3, [r6, #26]
     7a0:	4642      	mov	r2, r8
     7a2:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     7a4:	230e      	movs	r3, #14
     7a6:	aa06      	add	r2, sp, #24
     7a8:	4694      	mov	ip, r2
     7aa:	4463      	add	r3, ip
     7ac:	881b      	ldrh	r3, [r3, #0]
     7ae:	4642      	mov	r2, r8
     7b0:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     7b2:	9b05      	ldr	r3, [sp, #20]
     7b4:	465a      	mov	r2, fp
     7b6:	4313      	orrs	r3, r2
     7b8:	9a03      	ldr	r2, [sp, #12]
     7ba:	4313      	orrs	r3, r2
     7bc:	464a      	mov	r2, r9
     7be:	4313      	orrs	r3, r2
     7c0:	9f02      	ldr	r7, [sp, #8]
     7c2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     7c4:	9b04      	ldr	r3, [sp, #16]
     7c6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     7c8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7ca:	4653      	mov	r3, sl
     7cc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     7ce:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     7d0:	2327      	movs	r3, #39	; 0x27
     7d2:	5cf3      	ldrb	r3, [r6, r3]
     7d4:	2b00      	cmp	r3, #0
     7d6:	d101      	bne.n	7dc <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     7d8:	3304      	adds	r3, #4
     7da:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     7dc:	7e73      	ldrb	r3, [r6, #25]
     7de:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     7e0:	7f32      	ldrb	r2, [r6, #28]
     7e2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     7e4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     7e6:	7f72      	ldrb	r2, [r6, #29]
     7e8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     7ea:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7ec:	2224      	movs	r2, #36	; 0x24
     7ee:	5cb2      	ldrb	r2, [r6, r2]
     7f0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     7f2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     7f4:	2225      	movs	r2, #37	; 0x25
     7f6:	5cb2      	ldrb	r2, [r6, r2]
     7f8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7fa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     7fc:	7ab1      	ldrb	r1, [r6, #10]
     7fe:	7af2      	ldrb	r2, [r6, #11]
     800:	4311      	orrs	r1, r2
     802:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     804:	8933      	ldrh	r3, [r6, #8]
     806:	2bff      	cmp	r3, #255	; 0xff
     808:	d100      	bne.n	80c <usart_init+0x17c>
     80a:	e081      	b.n	910 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     80c:	2280      	movs	r2, #128	; 0x80
     80e:	0452      	lsls	r2, r2, #17
     810:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     812:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     814:	232c      	movs	r3, #44	; 0x2c
     816:	5cf3      	ldrb	r3, [r6, r3]
     818:	2b00      	cmp	r3, #0
     81a:	d103      	bne.n	824 <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     81c:	4b62      	ldr	r3, [pc, #392]	; (9a8 <usart_init+0x318>)
     81e:	789b      	ldrb	r3, [r3, #2]
     820:	079b      	lsls	r3, r3, #30
     822:	d501      	bpl.n	828 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     824:	2380      	movs	r3, #128	; 0x80
     826:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     828:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     82a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     82c:	2b00      	cmp	r3, #0
     82e:	d1fc      	bne.n	82a <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
     830:	4643      	mov	r3, r8
     832:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     834:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     836:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     838:	2b00      	cmp	r3, #0
     83a:	d1fc      	bne.n	836 <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
     83c:	4643      	mov	r3, r8
     83e:	601f      	str	r7, [r3, #0]
     840:	ab0e      	add	r3, sp, #56	; 0x38
     842:	2280      	movs	r2, #128	; 0x80
     844:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     846:	2200      	movs	r2, #0
     848:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     84a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     84c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     84e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     850:	930a      	str	r3, [sp, #40]	; 0x28
     852:	6b73      	ldr	r3, [r6, #52]	; 0x34
     854:	930b      	str	r3, [sp, #44]	; 0x2c
     856:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     858:	930c      	str	r3, [sp, #48]	; 0x30
     85a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     85c:	9302      	str	r3, [sp, #8]
     85e:	930d      	str	r3, [sp, #52]	; 0x34
     860:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     862:	ae0a      	add	r6, sp, #40	; 0x28
     864:	e063      	b.n	92e <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     866:	2308      	movs	r3, #8
     868:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     86a:	3b07      	subs	r3, #7
     86c:	9307      	str	r3, [sp, #28]
     86e:	e77e      	b.n	76e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     870:	6833      	ldr	r3, [r6, #0]
     872:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     874:	68f3      	ldr	r3, [r6, #12]
     876:	469b      	mov	fp, r3
		config->sample_adjustment |
     878:	6973      	ldr	r3, [r6, #20]
     87a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     87c:	7e33      	ldrb	r3, [r6, #24]
     87e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     880:	2326      	movs	r3, #38	; 0x26
     882:	5cf3      	ldrb	r3, [r6, r3]
     884:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     886:	6873      	ldr	r3, [r6, #4]
     888:	4699      	mov	r9, r3
	switch (transfer_mode)
     88a:	2b00      	cmp	r3, #0
     88c:	d018      	beq.n	8c0 <usart_init+0x230>
     88e:	2380      	movs	r3, #128	; 0x80
     890:	055b      	lsls	r3, r3, #21
     892:	4599      	cmp	r9, r3
     894:	d001      	beq.n	89a <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
     896:	2000      	movs	r0, #0
     898:	e025      	b.n	8e6 <usart_init+0x256>
			if (!config->use_external_clock) {
     89a:	2327      	movs	r3, #39	; 0x27
     89c:	5cf3      	ldrb	r3, [r6, r3]
     89e:	2b00      	cmp	r3, #0
     8a0:	d000      	beq.n	8a4 <usart_init+0x214>
     8a2:	e779      	b.n	798 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     8a4:	6a33      	ldr	r3, [r6, #32]
     8a6:	001f      	movs	r7, r3
     8a8:	b2c0      	uxtb	r0, r0
     8aa:	4b40      	ldr	r3, [pc, #256]	; (9ac <usart_init+0x31c>)
     8ac:	4798      	blx	r3
     8ae:	0001      	movs	r1, r0
     8b0:	220e      	movs	r2, #14
     8b2:	ab06      	add	r3, sp, #24
     8b4:	469c      	mov	ip, r3
     8b6:	4462      	add	r2, ip
     8b8:	0038      	movs	r0, r7
     8ba:	4b3d      	ldr	r3, [pc, #244]	; (9b0 <usart_init+0x320>)
     8bc:	4798      	blx	r3
     8be:	e012      	b.n	8e6 <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     8c0:	2308      	movs	r3, #8
     8c2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8c4:	2300      	movs	r3, #0
     8c6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     8c8:	2327      	movs	r3, #39	; 0x27
     8ca:	5cf3      	ldrb	r3, [r6, r3]
     8cc:	2b00      	cmp	r3, #0
     8ce:	d00e      	beq.n	8ee <usart_init+0x25e>
				status_code =
     8d0:	9b06      	ldr	r3, [sp, #24]
     8d2:	9300      	str	r3, [sp, #0]
     8d4:	9b07      	ldr	r3, [sp, #28]
     8d6:	220e      	movs	r2, #14
     8d8:	a906      	add	r1, sp, #24
     8da:	468c      	mov	ip, r1
     8dc:	4462      	add	r2, ip
     8de:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     8e0:	6a30      	ldr	r0, [r6, #32]
     8e2:	4f34      	ldr	r7, [pc, #208]	; (9b4 <usart_init+0x324>)
     8e4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     8e6:	2800      	cmp	r0, #0
     8e8:	d000      	beq.n	8ec <usart_init+0x25c>
     8ea:	e6e4      	b.n	6b6 <usart_init+0x26>
     8ec:	e754      	b.n	798 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     8ee:	6a33      	ldr	r3, [r6, #32]
     8f0:	001f      	movs	r7, r3
     8f2:	b2c0      	uxtb	r0, r0
     8f4:	4b2d      	ldr	r3, [pc, #180]	; (9ac <usart_init+0x31c>)
     8f6:	4798      	blx	r3
     8f8:	0001      	movs	r1, r0
				status_code =
     8fa:	9b06      	ldr	r3, [sp, #24]
     8fc:	9300      	str	r3, [sp, #0]
     8fe:	9b07      	ldr	r3, [sp, #28]
     900:	220e      	movs	r2, #14
     902:	a806      	add	r0, sp, #24
     904:	4684      	mov	ip, r0
     906:	4462      	add	r2, ip
     908:	0038      	movs	r0, r7
     90a:	4f2a      	ldr	r7, [pc, #168]	; (9b4 <usart_init+0x324>)
     90c:	47b8      	blx	r7
     90e:	e7ea      	b.n	8e6 <usart_init+0x256>
		if(config->lin_slave_enable) {
     910:	7ef3      	ldrb	r3, [r6, #27]
     912:	2b00      	cmp	r3, #0
     914:	d100      	bne.n	918 <usart_init+0x288>
     916:	e77d      	b.n	814 <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     918:	2380      	movs	r3, #128	; 0x80
     91a:	04db      	lsls	r3, r3, #19
     91c:	431f      	orrs	r7, r3
     91e:	e779      	b.n	814 <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     920:	0020      	movs	r0, r4
     922:	4b25      	ldr	r3, [pc, #148]	; (9b8 <usart_init+0x328>)
     924:	4798      	blx	r3
     926:	e007      	b.n	938 <usart_init+0x2a8>
     928:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     92a:	2f04      	cmp	r7, #4
     92c:	d00d      	beq.n	94a <usart_init+0x2ba>
     92e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     930:	00bb      	lsls	r3, r7, #2
     932:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     934:	2800      	cmp	r0, #0
     936:	d0f3      	beq.n	920 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
     938:	1c43      	adds	r3, r0, #1
     93a:	d0f5      	beq.n	928 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     93c:	a90e      	add	r1, sp, #56	; 0x38
     93e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     940:	0c00      	lsrs	r0, r0, #16
     942:	b2c0      	uxtb	r0, r0
     944:	4b1d      	ldr	r3, [pc, #116]	; (9bc <usart_init+0x32c>)
     946:	4798      	blx	r3
     948:	e7ee      	b.n	928 <usart_init+0x298>
		module->callback[i]            = NULL;
     94a:	2300      	movs	r3, #0
     94c:	60eb      	str	r3, [r5, #12]
     94e:	612b      	str	r3, [r5, #16]
     950:	616b      	str	r3, [r5, #20]
     952:	61ab      	str	r3, [r5, #24]
     954:	61eb      	str	r3, [r5, #28]
     956:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     958:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     95a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     95c:	2200      	movs	r2, #0
     95e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     960:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     962:	3330      	adds	r3, #48	; 0x30
     964:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     966:	3301      	adds	r3, #1
     968:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     96a:	3301      	adds	r3, #1
     96c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     96e:	3301      	adds	r3, #1
     970:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     972:	6828      	ldr	r0, [r5, #0]
     974:	4b07      	ldr	r3, [pc, #28]	; (994 <usart_init+0x304>)
     976:	4798      	blx	r3
     978:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     97a:	4911      	ldr	r1, [pc, #68]	; (9c0 <usart_init+0x330>)
     97c:	4b11      	ldr	r3, [pc, #68]	; (9c4 <usart_init+0x334>)
     97e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     980:	00a4      	lsls	r4, r4, #2
     982:	4b11      	ldr	r3, [pc, #68]	; (9c8 <usart_init+0x338>)
     984:	50e5      	str	r5, [r4, r3]
	return status_code;
     986:	2000      	movs	r0, #0
     988:	e695      	b.n	6b6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     98a:	2310      	movs	r3, #16
     98c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     98e:	2300      	movs	r3, #0
     990:	9307      	str	r3, [sp, #28]
     992:	e6ec      	b.n	76e <usart_init+0xde>
     994:	00000589 	.word	0x00000589
     998:	40000400 	.word	0x40000400
     99c:	00000fa9 	.word	0x00000fa9
     9a0:	00000f1d 	.word	0x00000f1d
     9a4:	000003c5 	.word	0x000003c5
     9a8:	41002000 	.word	0x41002000
     9ac:	00000fc5 	.word	0x00000fc5
     9b0:	00000307 	.word	0x00000307
     9b4:	00000331 	.word	0x00000331
     9b8:	00000411 	.word	0x00000411
     9bc:	000010a1 	.word	0x000010a1
     9c0:	000009cd 	.word	0x000009cd
     9c4:	000005c5 	.word	0x000005c5
     9c8:	200000d8 	.word	0x200000d8

000009cc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     9ce:	0080      	lsls	r0, r0, #2
     9d0:	4b62      	ldr	r3, [pc, #392]	; (b5c <_usart_interrupt_handler+0x190>)
     9d2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     9d4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     9d6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     9d8:	2b00      	cmp	r3, #0
     9da:	d1fc      	bne.n	9d6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     9dc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     9de:	7da6      	ldrb	r6, [r4, #22]
     9e0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     9e2:	2330      	movs	r3, #48	; 0x30
     9e4:	5ceb      	ldrb	r3, [r5, r3]
     9e6:	2231      	movs	r2, #49	; 0x31
     9e8:	5caf      	ldrb	r7, [r5, r2]
     9ea:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     9ec:	07f3      	lsls	r3, r6, #31
     9ee:	d522      	bpl.n	a36 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     9f0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     9f2:	b29b      	uxth	r3, r3
     9f4:	2b00      	cmp	r3, #0
     9f6:	d01c      	beq.n	a32 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     9fa:	7813      	ldrb	r3, [r2, #0]
     9fc:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     9fe:	1c51      	adds	r1, r2, #1
     a00:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a02:	7969      	ldrb	r1, [r5, #5]
     a04:	2901      	cmp	r1, #1
     a06:	d00e      	beq.n	a26 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a08:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     a0a:	05db      	lsls	r3, r3, #23
     a0c:	0ddb      	lsrs	r3, r3, #23
     a0e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     a10:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a12:	3b01      	subs	r3, #1
     a14:	b29b      	uxth	r3, r3
     a16:	85eb      	strh	r3, [r5, #46]	; 0x2e
     a18:	2b00      	cmp	r3, #0
     a1a:	d10c      	bne.n	a36 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a1c:	3301      	adds	r3, #1
     a1e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     a20:	3301      	adds	r3, #1
     a22:	75a3      	strb	r3, [r4, #22]
     a24:	e007      	b.n	a36 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     a26:	7851      	ldrb	r1, [r2, #1]
     a28:	0209      	lsls	r1, r1, #8
     a2a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     a2c:	3202      	adds	r2, #2
     a2e:	62aa      	str	r2, [r5, #40]	; 0x28
     a30:	e7eb      	b.n	a0a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a32:	2301      	movs	r3, #1
     a34:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     a36:	07b3      	lsls	r3, r6, #30
     a38:	d506      	bpl.n	a48 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     a3a:	2302      	movs	r3, #2
     a3c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     a3e:	2200      	movs	r2, #0
     a40:	3331      	adds	r3, #49	; 0x31
     a42:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a44:	07fb      	lsls	r3, r7, #31
     a46:	d41a      	bmi.n	a7e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a48:	0773      	lsls	r3, r6, #29
     a4a:	d565      	bpl.n	b18 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     a4c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a4e:	b29b      	uxth	r3, r3
     a50:	2b00      	cmp	r3, #0
     a52:	d05f      	beq.n	b14 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a54:	8b63      	ldrh	r3, [r4, #26]
     a56:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a58:	071a      	lsls	r2, r3, #28
     a5a:	d414      	bmi.n	a86 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a5c:	223f      	movs	r2, #63	; 0x3f
     a5e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a60:	2b00      	cmp	r3, #0
     a62:	d034      	beq.n	ace <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a64:	079a      	lsls	r2, r3, #30
     a66:	d511      	bpl.n	a8c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a68:	221a      	movs	r2, #26
     a6a:	2332      	movs	r3, #50	; 0x32
     a6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a6e:	3b30      	subs	r3, #48	; 0x30
     a70:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a72:	077b      	lsls	r3, r7, #29
     a74:	d550      	bpl.n	b18 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a76:	0028      	movs	r0, r5
     a78:	696b      	ldr	r3, [r5, #20]
     a7a:	4798      	blx	r3
     a7c:	e04c      	b.n	b18 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a7e:	0028      	movs	r0, r5
     a80:	68eb      	ldr	r3, [r5, #12]
     a82:	4798      	blx	r3
     a84:	e7e0      	b.n	a48 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a86:	2237      	movs	r2, #55	; 0x37
     a88:	4013      	ands	r3, r2
     a8a:	e7e9      	b.n	a60 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a8c:	075a      	lsls	r2, r3, #29
     a8e:	d505      	bpl.n	a9c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     a90:	221e      	movs	r2, #30
     a92:	2332      	movs	r3, #50	; 0x32
     a94:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a96:	3b2e      	subs	r3, #46	; 0x2e
     a98:	8363      	strh	r3, [r4, #26]
     a9a:	e7ea      	b.n	a72 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a9c:	07da      	lsls	r2, r3, #31
     a9e:	d505      	bpl.n	aac <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     aa0:	2213      	movs	r2, #19
     aa2:	2332      	movs	r3, #50	; 0x32
     aa4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     aa6:	3b31      	subs	r3, #49	; 0x31
     aa8:	8363      	strh	r3, [r4, #26]
     aaa:	e7e2      	b.n	a72 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     aac:	06da      	lsls	r2, r3, #27
     aae:	d505      	bpl.n	abc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     ab0:	2242      	movs	r2, #66	; 0x42
     ab2:	2332      	movs	r3, #50	; 0x32
     ab4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     ab6:	3b22      	subs	r3, #34	; 0x22
     ab8:	8363      	strh	r3, [r4, #26]
     aba:	e7da      	b.n	a72 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     abc:	2220      	movs	r2, #32
     abe:	421a      	tst	r2, r3
     ac0:	d0d7      	beq.n	a72 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     ac2:	3221      	adds	r2, #33	; 0x21
     ac4:	2332      	movs	r3, #50	; 0x32
     ac6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ac8:	3b12      	subs	r3, #18
     aca:	8363      	strh	r3, [r4, #26]
     acc:	e7d1      	b.n	a72 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     ace:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     ad0:	05db      	lsls	r3, r3, #23
     ad2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     ad4:	b2da      	uxtb	r2, r3
     ad6:	6a69      	ldr	r1, [r5, #36]	; 0x24
     ad8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     ada:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     adc:	1c51      	adds	r1, r2, #1
     ade:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ae0:	7969      	ldrb	r1, [r5, #5]
     ae2:	2901      	cmp	r1, #1
     ae4:	d010      	beq.n	b08 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     ae6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ae8:	3b01      	subs	r3, #1
     aea:	b29b      	uxth	r3, r3
     aec:	85ab      	strh	r3, [r5, #44]	; 0x2c
     aee:	2b00      	cmp	r3, #0
     af0:	d112      	bne.n	b18 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     af2:	3304      	adds	r3, #4
     af4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     af6:	2200      	movs	r2, #0
     af8:	332e      	adds	r3, #46	; 0x2e
     afa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     afc:	07bb      	lsls	r3, r7, #30
     afe:	d50b      	bpl.n	b18 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     b00:	0028      	movs	r0, r5
     b02:	692b      	ldr	r3, [r5, #16]
     b04:	4798      	blx	r3
     b06:	e007      	b.n	b18 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     b08:	0a1b      	lsrs	r3, r3, #8
     b0a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     b0c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     b0e:	3301      	adds	r3, #1
     b10:	626b      	str	r3, [r5, #36]	; 0x24
     b12:	e7e8      	b.n	ae6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b14:	2304      	movs	r3, #4
     b16:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     b18:	06f3      	lsls	r3, r6, #27
     b1a:	d504      	bpl.n	b26 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     b1c:	2310      	movs	r3, #16
     b1e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     b20:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     b22:	06fb      	lsls	r3, r7, #27
     b24:	d40e      	bmi.n	b44 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     b26:	06b3      	lsls	r3, r6, #26
     b28:	d504      	bpl.n	b34 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     b2a:	2320      	movs	r3, #32
     b2c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     b2e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     b30:	073b      	lsls	r3, r7, #28
     b32:	d40b      	bmi.n	b4c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     b34:	0733      	lsls	r3, r6, #28
     b36:	d504      	bpl.n	b42 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     b38:	2308      	movs	r3, #8
     b3a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     b3c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     b3e:	06bb      	lsls	r3, r7, #26
     b40:	d408      	bmi.n	b54 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     b44:	0028      	movs	r0, r5
     b46:	69eb      	ldr	r3, [r5, #28]
     b48:	4798      	blx	r3
     b4a:	e7ec      	b.n	b26 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     b4c:	0028      	movs	r0, r5
     b4e:	69ab      	ldr	r3, [r5, #24]
     b50:	4798      	blx	r3
     b52:	e7ef      	b.n	b34 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b54:	6a2b      	ldr	r3, [r5, #32]
     b56:	0028      	movs	r0, r5
     b58:	4798      	blx	r3
}
     b5a:	e7f2      	b.n	b42 <_usart_interrupt_handler+0x176>
     b5c:	200000d8 	.word	0x200000d8

00000b60 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b60:	b510      	push	{r4, lr}
	switch (clock_source) {
     b62:	2808      	cmp	r0, #8
     b64:	d803      	bhi.n	b6e <system_clock_source_get_hz+0xe>
     b66:	0080      	lsls	r0, r0, #2
     b68:	4b1c      	ldr	r3, [pc, #112]	; (bdc <system_clock_source_get_hz+0x7c>)
     b6a:	581b      	ldr	r3, [r3, r0]
     b6c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     b6e:	2000      	movs	r0, #0
     b70:	e032      	b.n	bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     b72:	4b1b      	ldr	r3, [pc, #108]	; (be0 <system_clock_source_get_hz+0x80>)
     b74:	6918      	ldr	r0, [r3, #16]
     b76:	e02f      	b.n	bd8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     b78:	4b1a      	ldr	r3, [pc, #104]	; (be4 <system_clock_source_get_hz+0x84>)
     b7a:	6a1b      	ldr	r3, [r3, #32]
     b7c:	059b      	lsls	r3, r3, #22
     b7e:	0f9b      	lsrs	r3, r3, #30
     b80:	4819      	ldr	r0, [pc, #100]	; (be8 <system_clock_source_get_hz+0x88>)
     b82:	40d8      	lsrs	r0, r3
     b84:	e028      	b.n	bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     b86:	4b16      	ldr	r3, [pc, #88]	; (be0 <system_clock_source_get_hz+0x80>)
     b88:	6958      	ldr	r0, [r3, #20]
     b8a:	e025      	b.n	bd8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b8c:	4b14      	ldr	r3, [pc, #80]	; (be0 <system_clock_source_get_hz+0x80>)
     b8e:	681b      	ldr	r3, [r3, #0]
			return 0;
     b90:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b92:	079b      	lsls	r3, r3, #30
     b94:	d520      	bpl.n	bd8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b96:	4913      	ldr	r1, [pc, #76]	; (be4 <system_clock_source_get_hz+0x84>)
     b98:	2210      	movs	r2, #16
     b9a:	68cb      	ldr	r3, [r1, #12]
     b9c:	421a      	tst	r2, r3
     b9e:	d0fc      	beq.n	b9a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     ba0:	4b0f      	ldr	r3, [pc, #60]	; (be0 <system_clock_source_get_hz+0x80>)
     ba2:	681a      	ldr	r2, [r3, #0]
     ba4:	2324      	movs	r3, #36	; 0x24
     ba6:	4013      	ands	r3, r2
     ba8:	2b04      	cmp	r3, #4
     baa:	d001      	beq.n	bb0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     bac:	480f      	ldr	r0, [pc, #60]	; (bec <system_clock_source_get_hz+0x8c>)
     bae:	e013      	b.n	bd8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     bb0:	2000      	movs	r0, #0
     bb2:	4b0f      	ldr	r3, [pc, #60]	; (bf0 <system_clock_source_get_hz+0x90>)
     bb4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     bb6:	4b0a      	ldr	r3, [pc, #40]	; (be0 <system_clock_source_get_hz+0x80>)
     bb8:	689b      	ldr	r3, [r3, #8]
     bba:	041b      	lsls	r3, r3, #16
     bbc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     bbe:	4358      	muls	r0, r3
     bc0:	e00a      	b.n	bd8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bc2:	2350      	movs	r3, #80	; 0x50
     bc4:	4a07      	ldr	r2, [pc, #28]	; (be4 <system_clock_source_get_hz+0x84>)
     bc6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     bc8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bca:	075b      	lsls	r3, r3, #29
     bcc:	d504      	bpl.n	bd8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     bce:	4b04      	ldr	r3, [pc, #16]	; (be0 <system_clock_source_get_hz+0x80>)
     bd0:	68d8      	ldr	r0, [r3, #12]
     bd2:	e001      	b.n	bd8 <system_clock_source_get_hz+0x78>
		return 32768UL;
     bd4:	2080      	movs	r0, #128	; 0x80
     bd6:	0200      	lsls	r0, r0, #8
	}
}
     bd8:	bd10      	pop	{r4, pc}
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	00002d18 	.word	0x00002d18
     be0:	200000b4 	.word	0x200000b4
     be4:	40000800 	.word	0x40000800
     be8:	007a1200 	.word	0x007a1200
     bec:	02dc6c00 	.word	0x02dc6c00
     bf0:	00000fc5 	.word	0x00000fc5

00000bf4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     bf4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     bf6:	490c      	ldr	r1, [pc, #48]	; (c28 <system_clock_source_osc8m_set_config+0x34>)
     bf8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     bfa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     bfc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     bfe:	7840      	ldrb	r0, [r0, #1]
     c00:	2201      	movs	r2, #1
     c02:	4010      	ands	r0, r2
     c04:	0180      	lsls	r0, r0, #6
     c06:	2640      	movs	r6, #64	; 0x40
     c08:	43b3      	bics	r3, r6
     c0a:	4303      	orrs	r3, r0
     c0c:	402a      	ands	r2, r5
     c0e:	01d2      	lsls	r2, r2, #7
     c10:	2080      	movs	r0, #128	; 0x80
     c12:	4383      	bics	r3, r0
     c14:	4313      	orrs	r3, r2
     c16:	2203      	movs	r2, #3
     c18:	4022      	ands	r2, r4
     c1a:	0212      	lsls	r2, r2, #8
     c1c:	4803      	ldr	r0, [pc, #12]	; (c2c <system_clock_source_osc8m_set_config+0x38>)
     c1e:	4003      	ands	r3, r0
     c20:	4313      	orrs	r3, r2
     c22:	620b      	str	r3, [r1, #32]
}
     c24:	bd70      	pop	{r4, r5, r6, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	40000800 	.word	0x40000800
     c2c:	fffffcff 	.word	0xfffffcff

00000c30 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     c30:	2808      	cmp	r0, #8
     c32:	d803      	bhi.n	c3c <system_clock_source_enable+0xc>
     c34:	0080      	lsls	r0, r0, #2
     c36:	4b25      	ldr	r3, [pc, #148]	; (ccc <system_clock_source_enable+0x9c>)
     c38:	581b      	ldr	r3, [r3, r0]
     c3a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c3c:	2017      	movs	r0, #23
     c3e:	e044      	b.n	cca <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c40:	4a23      	ldr	r2, [pc, #140]	; (cd0 <system_clock_source_enable+0xa0>)
     c42:	6a13      	ldr	r3, [r2, #32]
     c44:	2102      	movs	r1, #2
     c46:	430b      	orrs	r3, r1
     c48:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     c4a:	2000      	movs	r0, #0
     c4c:	e03d      	b.n	cca <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c4e:	4a20      	ldr	r2, [pc, #128]	; (cd0 <system_clock_source_enable+0xa0>)
     c50:	6993      	ldr	r3, [r2, #24]
     c52:	2102      	movs	r1, #2
     c54:	430b      	orrs	r3, r1
     c56:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     c58:	2000      	movs	r0, #0
		break;
     c5a:	e036      	b.n	cca <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c5c:	4a1c      	ldr	r2, [pc, #112]	; (cd0 <system_clock_source_enable+0xa0>)
     c5e:	8a13      	ldrh	r3, [r2, #16]
     c60:	2102      	movs	r1, #2
     c62:	430b      	orrs	r3, r1
     c64:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     c66:	2000      	movs	r0, #0
		break;
     c68:	e02f      	b.n	cca <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c6a:	4a19      	ldr	r2, [pc, #100]	; (cd0 <system_clock_source_enable+0xa0>)
     c6c:	8a93      	ldrh	r3, [r2, #20]
     c6e:	2102      	movs	r1, #2
     c70:	430b      	orrs	r3, r1
     c72:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     c74:	2000      	movs	r0, #0
		break;
     c76:	e028      	b.n	cca <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     c78:	4916      	ldr	r1, [pc, #88]	; (cd4 <system_clock_source_enable+0xa4>)
     c7a:	680b      	ldr	r3, [r1, #0]
     c7c:	2202      	movs	r2, #2
     c7e:	4313      	orrs	r3, r2
     c80:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     c82:	4b13      	ldr	r3, [pc, #76]	; (cd0 <system_clock_source_enable+0xa0>)
     c84:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c86:	0019      	movs	r1, r3
     c88:	320e      	adds	r2, #14
     c8a:	68cb      	ldr	r3, [r1, #12]
     c8c:	421a      	tst	r2, r3
     c8e:	d0fc      	beq.n	c8a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     c90:	4a10      	ldr	r2, [pc, #64]	; (cd4 <system_clock_source_enable+0xa4>)
     c92:	6891      	ldr	r1, [r2, #8]
     c94:	4b0e      	ldr	r3, [pc, #56]	; (cd0 <system_clock_source_enable+0xa0>)
     c96:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     c98:	6852      	ldr	r2, [r2, #4]
     c9a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     c9c:	2200      	movs	r2, #0
     c9e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ca0:	0019      	movs	r1, r3
     ca2:	3210      	adds	r2, #16
     ca4:	68cb      	ldr	r3, [r1, #12]
     ca6:	421a      	tst	r2, r3
     ca8:	d0fc      	beq.n	ca4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     caa:	4b0a      	ldr	r3, [pc, #40]	; (cd4 <system_clock_source_enable+0xa4>)
     cac:	681b      	ldr	r3, [r3, #0]
     cae:	b29b      	uxth	r3, r3
     cb0:	4a07      	ldr	r2, [pc, #28]	; (cd0 <system_clock_source_enable+0xa0>)
     cb2:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     cb4:	2000      	movs	r0, #0
     cb6:	e008      	b.n	cca <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     cb8:	4905      	ldr	r1, [pc, #20]	; (cd0 <system_clock_source_enable+0xa0>)
     cba:	2244      	movs	r2, #68	; 0x44
     cbc:	5c8b      	ldrb	r3, [r1, r2]
     cbe:	2002      	movs	r0, #2
     cc0:	4303      	orrs	r3, r0
     cc2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     cc4:	2000      	movs	r0, #0
		break;
     cc6:	e000      	b.n	cca <system_clock_source_enable+0x9a>
		return STATUS_OK;
     cc8:	2000      	movs	r0, #0
}
     cca:	4770      	bx	lr
     ccc:	00002d3c 	.word	0x00002d3c
     cd0:	40000800 	.word	0x40000800
     cd4:	200000b4 	.word	0x200000b4

00000cd8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     cd8:	b530      	push	{r4, r5, lr}
     cda:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cdc:	22c2      	movs	r2, #194	; 0xc2
     cde:	00d2      	lsls	r2, r2, #3
     ce0:	4b1a      	ldr	r3, [pc, #104]	; (d4c <system_clock_init+0x74>)
     ce2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ce4:	4a1a      	ldr	r2, [pc, #104]	; (d50 <system_clock_init+0x78>)
     ce6:	6853      	ldr	r3, [r2, #4]
     ce8:	211e      	movs	r1, #30
     cea:	438b      	bics	r3, r1
     cec:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     cee:	2301      	movs	r3, #1
     cf0:	466a      	mov	r2, sp
     cf2:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cf4:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     cf6:	4d17      	ldr	r5, [pc, #92]	; (d54 <system_clock_init+0x7c>)
     cf8:	b2e0      	uxtb	r0, r4
     cfa:	4669      	mov	r1, sp
     cfc:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cfe:	3401      	adds	r4, #1
     d00:	2c25      	cmp	r4, #37	; 0x25
     d02:	d1f9      	bne.n	cf8 <system_clock_init+0x20>
	config->run_in_standby  = false;
     d04:	a803      	add	r0, sp, #12
     d06:	2400      	movs	r4, #0
     d08:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     d0a:	2501      	movs	r5, #1
     d0c:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     d0e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     d10:	4b11      	ldr	r3, [pc, #68]	; (d58 <system_clock_init+0x80>)
     d12:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     d14:	2006      	movs	r0, #6
     d16:	4b11      	ldr	r3, [pc, #68]	; (d5c <system_clock_init+0x84>)
     d18:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     d1a:	4b11      	ldr	r3, [pc, #68]	; (d60 <system_clock_init+0x88>)
     d1c:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     d1e:	4b11      	ldr	r3, [pc, #68]	; (d64 <system_clock_init+0x8c>)
     d20:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     d22:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     d24:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     d26:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     d28:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     d2a:	466b      	mov	r3, sp
     d2c:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d2e:	2306      	movs	r3, #6
     d30:	466a      	mov	r2, sp
     d32:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     d34:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     d36:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d38:	4669      	mov	r1, sp
     d3a:	2000      	movs	r0, #0
     d3c:	4b0a      	ldr	r3, [pc, #40]	; (d68 <system_clock_init+0x90>)
     d3e:	4798      	blx	r3
     d40:	2000      	movs	r0, #0
     d42:	4b0a      	ldr	r3, [pc, #40]	; (d6c <system_clock_init+0x94>)
     d44:	4798      	blx	r3
#endif
}
     d46:	b005      	add	sp, #20
     d48:	bd30      	pop	{r4, r5, pc}
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	40000800 	.word	0x40000800
     d50:	41004000 	.word	0x41004000
     d54:	00000fa9 	.word	0x00000fa9
     d58:	00000bf5 	.word	0x00000bf5
     d5c:	00000c31 	.word	0x00000c31
     d60:	00000d71 	.word	0x00000d71
     d64:	40000400 	.word	0x40000400
     d68:	00000d95 	.word	0x00000d95
     d6c:	00000e4d 	.word	0x00000e4d

00000d70 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     d70:	4a06      	ldr	r2, [pc, #24]	; (d8c <system_gclk_init+0x1c>)
     d72:	6993      	ldr	r3, [r2, #24]
     d74:	2108      	movs	r1, #8
     d76:	430b      	orrs	r3, r1
     d78:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     d7a:	2201      	movs	r2, #1
     d7c:	4b04      	ldr	r3, [pc, #16]	; (d90 <system_gclk_init+0x20>)
     d7e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     d80:	0019      	movs	r1, r3
     d82:	780b      	ldrb	r3, [r1, #0]
     d84:	4213      	tst	r3, r2
     d86:	d1fc      	bne.n	d82 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     d88:	4770      	bx	lr
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	40000400 	.word	0x40000400
     d90:	40000c00 	.word	0x40000c00

00000d94 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     d94:	b570      	push	{r4, r5, r6, lr}
     d96:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     d98:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     d9a:	780d      	ldrb	r5, [r1, #0]
     d9c:	022d      	lsls	r5, r5, #8
     d9e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     da0:	784b      	ldrb	r3, [r1, #1]
     da2:	2b00      	cmp	r3, #0
     da4:	d002      	beq.n	dac <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     da6:	2380      	movs	r3, #128	; 0x80
     da8:	02db      	lsls	r3, r3, #11
     daa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     dac:	7a4b      	ldrb	r3, [r1, #9]
     dae:	2b00      	cmp	r3, #0
     db0:	d002      	beq.n	db8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     db2:	2380      	movs	r3, #128	; 0x80
     db4:	031b      	lsls	r3, r3, #12
     db6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     db8:	6848      	ldr	r0, [r1, #4]
     dba:	2801      	cmp	r0, #1
     dbc:	d910      	bls.n	de0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     dbe:	1e43      	subs	r3, r0, #1
     dc0:	4218      	tst	r0, r3
     dc2:	d134      	bne.n	e2e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     dc4:	2802      	cmp	r0, #2
     dc6:	d930      	bls.n	e2a <system_gclk_gen_set_config+0x96>
     dc8:	2302      	movs	r3, #2
     dca:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     dcc:	3201      	adds	r2, #1
						mask <<= 1) {
     dce:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     dd0:	4298      	cmp	r0, r3
     dd2:	d8fb      	bhi.n	dcc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     dd4:	0212      	lsls	r2, r2, #8
     dd6:	4332      	orrs	r2, r6
     dd8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     dda:	2380      	movs	r3, #128	; 0x80
     ddc:	035b      	lsls	r3, r3, #13
     dde:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     de0:	7a0b      	ldrb	r3, [r1, #8]
     de2:	2b00      	cmp	r3, #0
     de4:	d002      	beq.n	dec <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     de6:	2380      	movs	r3, #128	; 0x80
     de8:	039b      	lsls	r3, r3, #14
     dea:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dec:	4a13      	ldr	r2, [pc, #76]	; (e3c <system_gclk_gen_set_config+0xa8>)
     dee:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     df0:	b25b      	sxtb	r3, r3
     df2:	2b00      	cmp	r3, #0
     df4:	dbfb      	blt.n	dee <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     df6:	4b12      	ldr	r3, [pc, #72]	; (e40 <system_gclk_gen_set_config+0xac>)
     df8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     dfa:	4b12      	ldr	r3, [pc, #72]	; (e44 <system_gclk_gen_set_config+0xb0>)
     dfc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     dfe:	4a0f      	ldr	r2, [pc, #60]	; (e3c <system_gclk_gen_set_config+0xa8>)
     e00:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     e02:	b25b      	sxtb	r3, r3
     e04:	2b00      	cmp	r3, #0
     e06:	dbfb      	blt.n	e00 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     e08:	4b0c      	ldr	r3, [pc, #48]	; (e3c <system_gclk_gen_set_config+0xa8>)
     e0a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e0c:	001a      	movs	r2, r3
     e0e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     e10:	b25b      	sxtb	r3, r3
     e12:	2b00      	cmp	r3, #0
     e14:	dbfb      	blt.n	e0e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     e16:	4a09      	ldr	r2, [pc, #36]	; (e3c <system_gclk_gen_set_config+0xa8>)
     e18:	6853      	ldr	r3, [r2, #4]
     e1a:	2180      	movs	r1, #128	; 0x80
     e1c:	0249      	lsls	r1, r1, #9
     e1e:	400b      	ands	r3, r1
     e20:	431d      	orrs	r5, r3
     e22:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e24:	4b08      	ldr	r3, [pc, #32]	; (e48 <system_gclk_gen_set_config+0xb4>)
     e26:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e28:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     e2a:	2200      	movs	r2, #0
     e2c:	e7d2      	b.n	dd4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     e2e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     e30:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e32:	2380      	movs	r3, #128	; 0x80
     e34:	029b      	lsls	r3, r3, #10
     e36:	431d      	orrs	r5, r3
     e38:	e7d2      	b.n	de0 <system_gclk_gen_set_config+0x4c>
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	40000c00 	.word	0x40000c00
     e40:	00000181 	.word	0x00000181
     e44:	40000c08 	.word	0x40000c08
     e48:	000001c1 	.word	0x000001c1

00000e4c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e4c:	b510      	push	{r4, lr}
     e4e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e50:	4a0b      	ldr	r2, [pc, #44]	; (e80 <system_gclk_gen_enable+0x34>)
     e52:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e54:	b25b      	sxtb	r3, r3
     e56:	2b00      	cmp	r3, #0
     e58:	dbfb      	blt.n	e52 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     e5a:	4b0a      	ldr	r3, [pc, #40]	; (e84 <system_gclk_gen_enable+0x38>)
     e5c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e5e:	4b0a      	ldr	r3, [pc, #40]	; (e88 <system_gclk_gen_enable+0x3c>)
     e60:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e62:	4a07      	ldr	r2, [pc, #28]	; (e80 <system_gclk_gen_enable+0x34>)
     e64:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e66:	b25b      	sxtb	r3, r3
     e68:	2b00      	cmp	r3, #0
     e6a:	dbfb      	blt.n	e64 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     e6c:	4a04      	ldr	r2, [pc, #16]	; (e80 <system_gclk_gen_enable+0x34>)
     e6e:	6851      	ldr	r1, [r2, #4]
     e70:	2380      	movs	r3, #128	; 0x80
     e72:	025b      	lsls	r3, r3, #9
     e74:	430b      	orrs	r3, r1
     e76:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     e78:	4b04      	ldr	r3, [pc, #16]	; (e8c <system_gclk_gen_enable+0x40>)
     e7a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e7c:	bd10      	pop	{r4, pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	40000c00 	.word	0x40000c00
     e84:	00000181 	.word	0x00000181
     e88:	40000c04 	.word	0x40000c04
     e8c:	000001c1 	.word	0x000001c1

00000e90 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     e90:	b570      	push	{r4, r5, r6, lr}
     e92:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e94:	4a1a      	ldr	r2, [pc, #104]	; (f00 <system_gclk_gen_get_hz+0x70>)
     e96:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     e98:	b25b      	sxtb	r3, r3
     e9a:	2b00      	cmp	r3, #0
     e9c:	dbfb      	blt.n	e96 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     e9e:	4b19      	ldr	r3, [pc, #100]	; (f04 <system_gclk_gen_get_hz+0x74>)
     ea0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ea2:	4b19      	ldr	r3, [pc, #100]	; (f08 <system_gclk_gen_get_hz+0x78>)
     ea4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ea6:	4a16      	ldr	r2, [pc, #88]	; (f00 <system_gclk_gen_get_hz+0x70>)
     ea8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     eaa:	b25b      	sxtb	r3, r3
     eac:	2b00      	cmp	r3, #0
     eae:	dbfb      	blt.n	ea8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     eb0:	4e13      	ldr	r6, [pc, #76]	; (f00 <system_gclk_gen_get_hz+0x70>)
     eb2:	6870      	ldr	r0, [r6, #4]
     eb4:	04c0      	lsls	r0, r0, #19
     eb6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     eb8:	4b14      	ldr	r3, [pc, #80]	; (f0c <system_gclk_gen_get_hz+0x7c>)
     eba:	4798      	blx	r3
     ebc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ebe:	4b12      	ldr	r3, [pc, #72]	; (f08 <system_gclk_gen_get_hz+0x78>)
     ec0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     ec2:	6876      	ldr	r6, [r6, #4]
     ec4:	02f6      	lsls	r6, r6, #11
     ec6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ec8:	4b11      	ldr	r3, [pc, #68]	; (f10 <system_gclk_gen_get_hz+0x80>)
     eca:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ecc:	4a0c      	ldr	r2, [pc, #48]	; (f00 <system_gclk_gen_get_hz+0x70>)
     ece:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ed0:	b25b      	sxtb	r3, r3
     ed2:	2b00      	cmp	r3, #0
     ed4:	dbfb      	blt.n	ece <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     ed6:	4b0a      	ldr	r3, [pc, #40]	; (f00 <system_gclk_gen_get_hz+0x70>)
     ed8:	689c      	ldr	r4, [r3, #8]
     eda:	0224      	lsls	r4, r4, #8
     edc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     ede:	4b0d      	ldr	r3, [pc, #52]	; (f14 <system_gclk_gen_get_hz+0x84>)
     ee0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     ee2:	2e00      	cmp	r6, #0
     ee4:	d107      	bne.n	ef6 <system_gclk_gen_get_hz+0x66>
     ee6:	2c01      	cmp	r4, #1
     ee8:	d907      	bls.n	efa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     eea:	0021      	movs	r1, r4
     eec:	0028      	movs	r0, r5
     eee:	4b0a      	ldr	r3, [pc, #40]	; (f18 <system_gclk_gen_get_hz+0x88>)
     ef0:	4798      	blx	r3
     ef2:	0005      	movs	r5, r0
     ef4:	e001      	b.n	efa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     ef6:	3401      	adds	r4, #1
     ef8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     efa:	0028      	movs	r0, r5
     efc:	bd70      	pop	{r4, r5, r6, pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	40000c00 	.word	0x40000c00
     f04:	00000181 	.word	0x00000181
     f08:	40000c04 	.word	0x40000c04
     f0c:	00000b61 	.word	0x00000b61
     f10:	40000c08 	.word	0x40000c08
     f14:	000001c1 	.word	0x000001c1
     f18:	000027ad 	.word	0x000027ad

00000f1c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     f1c:	b510      	push	{r4, lr}
     f1e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f20:	4b06      	ldr	r3, [pc, #24]	; (f3c <system_gclk_chan_enable+0x20>)
     f22:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f24:	4b06      	ldr	r3, [pc, #24]	; (f40 <system_gclk_chan_enable+0x24>)
     f26:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f28:	4a06      	ldr	r2, [pc, #24]	; (f44 <system_gclk_chan_enable+0x28>)
     f2a:	8853      	ldrh	r3, [r2, #2]
     f2c:	2180      	movs	r1, #128	; 0x80
     f2e:	01c9      	lsls	r1, r1, #7
     f30:	430b      	orrs	r3, r1
     f32:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     f34:	4b04      	ldr	r3, [pc, #16]	; (f48 <system_gclk_chan_enable+0x2c>)
     f36:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f38:	bd10      	pop	{r4, pc}
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	00000181 	.word	0x00000181
     f40:	40000c02 	.word	0x40000c02
     f44:	40000c00 	.word	0x40000c00
     f48:	000001c1 	.word	0x000001c1

00000f4c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f4c:	b510      	push	{r4, lr}
     f4e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     f50:	4b0f      	ldr	r3, [pc, #60]	; (f90 <system_gclk_chan_disable+0x44>)
     f52:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f54:	4b0f      	ldr	r3, [pc, #60]	; (f94 <system_gclk_chan_disable+0x48>)
     f56:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f58:	4a0f      	ldr	r2, [pc, #60]	; (f98 <system_gclk_chan_disable+0x4c>)
     f5a:	8853      	ldrh	r3, [r2, #2]
     f5c:	051b      	lsls	r3, r3, #20
     f5e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     f60:	8853      	ldrh	r3, [r2, #2]
     f62:	490e      	ldr	r1, [pc, #56]	; (f9c <system_gclk_chan_disable+0x50>)
     f64:	400b      	ands	r3, r1
     f66:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f68:	8853      	ldrh	r3, [r2, #2]
     f6a:	490d      	ldr	r1, [pc, #52]	; (fa0 <system_gclk_chan_disable+0x54>)
     f6c:	400b      	ands	r3, r1
     f6e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f70:	0011      	movs	r1, r2
     f72:	2280      	movs	r2, #128	; 0x80
     f74:	01d2      	lsls	r2, r2, #7
     f76:	884b      	ldrh	r3, [r1, #2]
     f78:	4213      	tst	r3, r2
     f7a:	d1fc      	bne.n	f76 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     f7c:	4906      	ldr	r1, [pc, #24]	; (f98 <system_gclk_chan_disable+0x4c>)
     f7e:	884a      	ldrh	r2, [r1, #2]
     f80:	0203      	lsls	r3, r0, #8
     f82:	4806      	ldr	r0, [pc, #24]	; (f9c <system_gclk_chan_disable+0x50>)
     f84:	4002      	ands	r2, r0
     f86:	4313      	orrs	r3, r2
     f88:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     f8a:	4b06      	ldr	r3, [pc, #24]	; (fa4 <system_gclk_chan_disable+0x58>)
     f8c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f8e:	bd10      	pop	{r4, pc}
     f90:	00000181 	.word	0x00000181
     f94:	40000c02 	.word	0x40000c02
     f98:	40000c00 	.word	0x40000c00
     f9c:	fffff0ff 	.word	0xfffff0ff
     fa0:	ffffbfff 	.word	0xffffbfff
     fa4:	000001c1 	.word	0x000001c1

00000fa8 <system_gclk_chan_set_config>:
{
     fa8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     faa:	780c      	ldrb	r4, [r1, #0]
     fac:	0224      	lsls	r4, r4, #8
     fae:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     fb0:	4b02      	ldr	r3, [pc, #8]	; (fbc <system_gclk_chan_set_config+0x14>)
     fb2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     fb4:	b2a4      	uxth	r4, r4
     fb6:	4b02      	ldr	r3, [pc, #8]	; (fc0 <system_gclk_chan_set_config+0x18>)
     fb8:	805c      	strh	r4, [r3, #2]
}
     fba:	bd10      	pop	{r4, pc}
     fbc:	00000f4d 	.word	0x00000f4d
     fc0:	40000c00 	.word	0x40000c00

00000fc4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     fc4:	b510      	push	{r4, lr}
     fc6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     fc8:	4b06      	ldr	r3, [pc, #24]	; (fe4 <system_gclk_chan_get_hz+0x20>)
     fca:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <system_gclk_chan_get_hz+0x24>)
     fce:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     fd0:	4b06      	ldr	r3, [pc, #24]	; (fec <system_gclk_chan_get_hz+0x28>)
     fd2:	885c      	ldrh	r4, [r3, #2]
     fd4:	0524      	lsls	r4, r4, #20
     fd6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     fd8:	4b05      	ldr	r3, [pc, #20]	; (ff0 <system_gclk_chan_get_hz+0x2c>)
     fda:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     fdc:	0020      	movs	r0, r4
     fde:	4b05      	ldr	r3, [pc, #20]	; (ff4 <system_gclk_chan_get_hz+0x30>)
     fe0:	4798      	blx	r3
}
     fe2:	bd10      	pop	{r4, pc}
     fe4:	00000181 	.word	0x00000181
     fe8:	40000c02 	.word	0x40000c02
     fec:	40000c00 	.word	0x40000c00
     ff0:	000001c1 	.word	0x000001c1
     ff4:	00000e91 	.word	0x00000e91

00000ff8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     ff8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     ffa:	78d3      	ldrb	r3, [r2, #3]
     ffc:	2b00      	cmp	r3, #0
     ffe:	d135      	bne.n	106c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1000:	7813      	ldrb	r3, [r2, #0]
    1002:	2b80      	cmp	r3, #128	; 0x80
    1004:	d029      	beq.n	105a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1006:	061b      	lsls	r3, r3, #24
    1008:	2480      	movs	r4, #128	; 0x80
    100a:	0264      	lsls	r4, r4, #9
    100c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    100e:	7854      	ldrb	r4, [r2, #1]
    1010:	2502      	movs	r5, #2
    1012:	43ac      	bics	r4, r5
    1014:	d106      	bne.n	1024 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1016:	7894      	ldrb	r4, [r2, #2]
    1018:	2c00      	cmp	r4, #0
    101a:	d120      	bne.n	105e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    101c:	2480      	movs	r4, #128	; 0x80
    101e:	02a4      	lsls	r4, r4, #10
    1020:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1022:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1024:	7854      	ldrb	r4, [r2, #1]
    1026:	3c01      	subs	r4, #1
    1028:	2c01      	cmp	r4, #1
    102a:	d91c      	bls.n	1066 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    102c:	040d      	lsls	r5, r1, #16
    102e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1030:	24a0      	movs	r4, #160	; 0xa0
    1032:	05e4      	lsls	r4, r4, #23
    1034:	432c      	orrs	r4, r5
    1036:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1038:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    103a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    103c:	24d0      	movs	r4, #208	; 0xd0
    103e:	0624      	lsls	r4, r4, #24
    1040:	432c      	orrs	r4, r5
    1042:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1044:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1046:	78d4      	ldrb	r4, [r2, #3]
    1048:	2c00      	cmp	r4, #0
    104a:	d122      	bne.n	1092 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    104c:	035b      	lsls	r3, r3, #13
    104e:	d51c      	bpl.n	108a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1050:	7893      	ldrb	r3, [r2, #2]
    1052:	2b01      	cmp	r3, #1
    1054:	d01e      	beq.n	1094 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1056:	6141      	str	r1, [r0, #20]
    1058:	e017      	b.n	108a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    105a:	2300      	movs	r3, #0
    105c:	e7d7      	b.n	100e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    105e:	24c0      	movs	r4, #192	; 0xc0
    1060:	02e4      	lsls	r4, r4, #11
    1062:	4323      	orrs	r3, r4
    1064:	e7dd      	b.n	1022 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1066:	4c0d      	ldr	r4, [pc, #52]	; (109c <_system_pinmux_config+0xa4>)
    1068:	4023      	ands	r3, r4
    106a:	e7df      	b.n	102c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    106c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    106e:	040c      	lsls	r4, r1, #16
    1070:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1072:	23a0      	movs	r3, #160	; 0xa0
    1074:	05db      	lsls	r3, r3, #23
    1076:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1078:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    107a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    107c:	23d0      	movs	r3, #208	; 0xd0
    107e:	061b      	lsls	r3, r3, #24
    1080:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1082:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1084:	78d3      	ldrb	r3, [r2, #3]
    1086:	2b00      	cmp	r3, #0
    1088:	d103      	bne.n	1092 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    108a:	7853      	ldrb	r3, [r2, #1]
    108c:	3b01      	subs	r3, #1
    108e:	2b01      	cmp	r3, #1
    1090:	d902      	bls.n	1098 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1092:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1094:	6181      	str	r1, [r0, #24]
    1096:	e7f8      	b.n	108a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1098:	6081      	str	r1, [r0, #8]
}
    109a:	e7fa      	b.n	1092 <_system_pinmux_config+0x9a>
    109c:	fffbffff 	.word	0xfffbffff

000010a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    10a0:	b510      	push	{r4, lr}
    10a2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10a4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    10a6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    10a8:	2900      	cmp	r1, #0
    10aa:	d104      	bne.n	10b6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    10ac:	0943      	lsrs	r3, r0, #5
    10ae:	01db      	lsls	r3, r3, #7
    10b0:	4905      	ldr	r1, [pc, #20]	; (10c8 <system_pinmux_pin_set_config+0x28>)
    10b2:	468c      	mov	ip, r1
    10b4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    10b6:	241f      	movs	r4, #31
    10b8:	4020      	ands	r0, r4
    10ba:	2101      	movs	r1, #1
    10bc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    10be:	0018      	movs	r0, r3
    10c0:	4b02      	ldr	r3, [pc, #8]	; (10cc <system_pinmux_pin_set_config+0x2c>)
    10c2:	4798      	blx	r3
}
    10c4:	bd10      	pop	{r4, pc}
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	41004400 	.word	0x41004400
    10cc:	00000ff9 	.word	0x00000ff9

000010d0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    10d0:	4770      	bx	lr
	...

000010d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    10d4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    10d6:	4b05      	ldr	r3, [pc, #20]	; (10ec <system_init+0x18>)
    10d8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    10da:	4b05      	ldr	r3, [pc, #20]	; (10f0 <system_init+0x1c>)
    10dc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    10de:	4b05      	ldr	r3, [pc, #20]	; (10f4 <system_init+0x20>)
    10e0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    10e2:	4b05      	ldr	r3, [pc, #20]	; (10f8 <system_init+0x24>)
    10e4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    10e6:	4b05      	ldr	r3, [pc, #20]	; (10fc <system_init+0x28>)
    10e8:	4798      	blx	r3
}
    10ea:	bd10      	pop	{r4, pc}
    10ec:	00000cd9 	.word	0x00000cd9
    10f0:	000001f1 	.word	0x000001f1
    10f4:	000010d1 	.word	0x000010d1
    10f8:	000010d1 	.word	0x000010d1
    10fc:	000010d1 	.word	0x000010d1

00001100 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1100:	e7fe      	b.n	1100 <Dummy_Handler>
	...

00001104 <Reset_Handler>:
{
    1104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1106:	4a2a      	ldr	r2, [pc, #168]	; (11b0 <Reset_Handler+0xac>)
    1108:	4b2a      	ldr	r3, [pc, #168]	; (11b4 <Reset_Handler+0xb0>)
    110a:	429a      	cmp	r2, r3
    110c:	d011      	beq.n	1132 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    110e:	001a      	movs	r2, r3
    1110:	4b29      	ldr	r3, [pc, #164]	; (11b8 <Reset_Handler+0xb4>)
    1112:	429a      	cmp	r2, r3
    1114:	d20d      	bcs.n	1132 <Reset_Handler+0x2e>
    1116:	4a29      	ldr	r2, [pc, #164]	; (11bc <Reset_Handler+0xb8>)
    1118:	3303      	adds	r3, #3
    111a:	1a9b      	subs	r3, r3, r2
    111c:	089b      	lsrs	r3, r3, #2
    111e:	3301      	adds	r3, #1
    1120:	009b      	lsls	r3, r3, #2
    1122:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1124:	4823      	ldr	r0, [pc, #140]	; (11b4 <Reset_Handler+0xb0>)
    1126:	4922      	ldr	r1, [pc, #136]	; (11b0 <Reset_Handler+0xac>)
    1128:	588c      	ldr	r4, [r1, r2]
    112a:	5084      	str	r4, [r0, r2]
    112c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    112e:	429a      	cmp	r2, r3
    1130:	d1fa      	bne.n	1128 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1132:	4a23      	ldr	r2, [pc, #140]	; (11c0 <Reset_Handler+0xbc>)
    1134:	4b23      	ldr	r3, [pc, #140]	; (11c4 <Reset_Handler+0xc0>)
    1136:	429a      	cmp	r2, r3
    1138:	d20a      	bcs.n	1150 <Reset_Handler+0x4c>
    113a:	43d3      	mvns	r3, r2
    113c:	4921      	ldr	r1, [pc, #132]	; (11c4 <Reset_Handler+0xc0>)
    113e:	185b      	adds	r3, r3, r1
    1140:	2103      	movs	r1, #3
    1142:	438b      	bics	r3, r1
    1144:	3304      	adds	r3, #4
    1146:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1148:	2100      	movs	r1, #0
    114a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    114c:	4293      	cmp	r3, r2
    114e:	d1fc      	bne.n	114a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1150:	4a1d      	ldr	r2, [pc, #116]	; (11c8 <Reset_Handler+0xc4>)
    1152:	21ff      	movs	r1, #255	; 0xff
    1154:	4b1d      	ldr	r3, [pc, #116]	; (11cc <Reset_Handler+0xc8>)
    1156:	438b      	bics	r3, r1
    1158:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    115a:	39fd      	subs	r1, #253	; 0xfd
    115c:	2390      	movs	r3, #144	; 0x90
    115e:	005b      	lsls	r3, r3, #1
    1160:	4a1b      	ldr	r2, [pc, #108]	; (11d0 <Reset_Handler+0xcc>)
    1162:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1164:	4a1b      	ldr	r2, [pc, #108]	; (11d4 <Reset_Handler+0xd0>)
    1166:	78d3      	ldrb	r3, [r2, #3]
    1168:	2503      	movs	r5, #3
    116a:	43ab      	bics	r3, r5
    116c:	2402      	movs	r4, #2
    116e:	4323      	orrs	r3, r4
    1170:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1172:	78d3      	ldrb	r3, [r2, #3]
    1174:	270c      	movs	r7, #12
    1176:	43bb      	bics	r3, r7
    1178:	2608      	movs	r6, #8
    117a:	4333      	orrs	r3, r6
    117c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    117e:	4b16      	ldr	r3, [pc, #88]	; (11d8 <Reset_Handler+0xd4>)
    1180:	7b98      	ldrb	r0, [r3, #14]
    1182:	2230      	movs	r2, #48	; 0x30
    1184:	4390      	bics	r0, r2
    1186:	2220      	movs	r2, #32
    1188:	4310      	orrs	r0, r2
    118a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    118c:	7b99      	ldrb	r1, [r3, #14]
    118e:	43b9      	bics	r1, r7
    1190:	4331      	orrs	r1, r6
    1192:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1194:	7b9a      	ldrb	r2, [r3, #14]
    1196:	43aa      	bics	r2, r5
    1198:	4322      	orrs	r2, r4
    119a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    119c:	4a0f      	ldr	r2, [pc, #60]	; (11dc <Reset_Handler+0xd8>)
    119e:	6853      	ldr	r3, [r2, #4]
    11a0:	2180      	movs	r1, #128	; 0x80
    11a2:	430b      	orrs	r3, r1
    11a4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    11a6:	4b0e      	ldr	r3, [pc, #56]	; (11e0 <Reset_Handler+0xdc>)
    11a8:	4798      	blx	r3
        main();
    11aa:	4b0e      	ldr	r3, [pc, #56]	; (11e4 <Reset_Handler+0xe0>)
    11ac:	4798      	blx	r3
    11ae:	e7fe      	b.n	11ae <Reset_Handler+0xaa>
    11b0:	00002d80 	.word	0x00002d80
    11b4:	20000000 	.word	0x20000000
    11b8:	20000074 	.word	0x20000074
    11bc:	20000004 	.word	0x20000004
    11c0:	20000074 	.word	0x20000074
    11c4:	2000012c 	.word	0x2000012c
    11c8:	e000ed00 	.word	0xe000ed00
    11cc:	00000000 	.word	0x00000000
    11d0:	41007000 	.word	0x41007000
    11d4:	41005000 	.word	0x41005000
    11d8:	41004800 	.word	0x41004800
    11dc:	41004000 	.word	0x41004000
    11e0:	00002aed 	.word	0x00002aed
    11e4:	0000252d 	.word	0x0000252d

000011e8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    11e8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    11ea:	4a06      	ldr	r2, [pc, #24]	; (1204 <_sbrk+0x1c>)
    11ec:	6812      	ldr	r2, [r2, #0]
    11ee:	2a00      	cmp	r2, #0
    11f0:	d004      	beq.n	11fc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    11f2:	4a04      	ldr	r2, [pc, #16]	; (1204 <_sbrk+0x1c>)
    11f4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    11f6:	18c3      	adds	r3, r0, r3
    11f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    11fa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    11fc:	4902      	ldr	r1, [pc, #8]	; (1208 <_sbrk+0x20>)
    11fe:	4a01      	ldr	r2, [pc, #4]	; (1204 <_sbrk+0x1c>)
    1200:	6011      	str	r1, [r2, #0]
    1202:	e7f6      	b.n	11f2 <_sbrk+0xa>
    1204:	200000cc 	.word	0x200000cc
    1208:	20002130 	.word	0x20002130

0000120c <configure_usart>:
	}
}

/**************************SERCOM STUFF*******************************/
void configure_usart(void)
{
    120c:	b530      	push	{r4, r5, lr}
    120e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1210:	2380      	movs	r3, #128	; 0x80
    1212:	05db      	lsls	r3, r3, #23
    1214:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1216:	2300      	movs	r3, #0
    1218:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    121a:	22ff      	movs	r2, #255	; 0xff
    121c:	4669      	mov	r1, sp
    121e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1220:	2200      	movs	r2, #0
    1222:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1224:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1226:	2196      	movs	r1, #150	; 0x96
    1228:	0189      	lsls	r1, r1, #6
    122a:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    122c:	2101      	movs	r1, #1
    122e:	2024      	movs	r0, #36	; 0x24
    1230:	466c      	mov	r4, sp
    1232:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    1234:	3001      	adds	r0, #1
    1236:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1238:	3125      	adds	r1, #37	; 0x25
    123a:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    123c:	3101      	adds	r1, #1
    123e:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    1240:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1242:	3105      	adds	r1, #5
    1244:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1246:	3101      	adds	r1, #1
    1248:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    124a:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    124c:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    124e:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1250:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1252:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1254:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1256:	2313      	movs	r3, #19
    1258:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    125a:	7762      	strb	r2, [r4, #29]
		}
	}
	#else
	{
		config_usart.baudrate    = 9600;
		config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    125c:	2380      	movs	r3, #128	; 0x80
    125e:	035b      	lsls	r3, r3, #13
    1260:	9303      	str	r3, [sp, #12]
		config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1262:	4b12      	ldr	r3, [pc, #72]	; (12ac <configure_usart+0xa0>)
    1264:	930c      	str	r3, [sp, #48]	; 0x30
		config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1266:	4b12      	ldr	r3, [pc, #72]	; (12b0 <configure_usart+0xa4>)
    1268:	930d      	str	r3, [sp, #52]	; 0x34
		config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    126a:	2301      	movs	r3, #1
    126c:	425b      	negs	r3, r3
    126e:	930e      	str	r3, [sp, #56]	; 0x38
		config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1270:	930f      	str	r3, [sp, #60]	; 0x3c
		while (usart_init(&usart_instance,
    1272:	4d10      	ldr	r5, [pc, #64]	; (12b4 <configure_usart+0xa8>)
    1274:	4c10      	ldr	r4, [pc, #64]	; (12b8 <configure_usart+0xac>)
    1276:	466a      	mov	r2, sp
    1278:	4910      	ldr	r1, [pc, #64]	; (12bc <configure_usart+0xb0>)
    127a:	0028      	movs	r0, r5
    127c:	47a0      	blx	r4
    127e:	2800      	cmp	r0, #0
    1280:	d1f9      	bne.n	1276 <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1282:	4d0c      	ldr	r5, [pc, #48]	; (12b4 <configure_usart+0xa8>)
    1284:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1286:	0020      	movs	r0, r4
    1288:	4b0d      	ldr	r3, [pc, #52]	; (12c0 <configure_usart+0xb4>)
    128a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    128c:	231f      	movs	r3, #31
    128e:	4018      	ands	r0, r3
    1290:	3b1e      	subs	r3, #30
    1292:	4083      	lsls	r3, r0
    1294:	4a0b      	ldr	r2, [pc, #44]	; (12c4 <configure_usart+0xb8>)
    1296:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1298:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    129a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    129c:	2b00      	cmp	r3, #0
    129e:	d1fc      	bne.n	129a <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    12a0:	6823      	ldr	r3, [r4, #0]
    12a2:	2202      	movs	r2, #2
    12a4:	4313      	orrs	r3, r2
    12a6:	6023      	str	r3, [r4, #0]
		EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
		}
	}
	#endif
	usart_enable(&usart_instance);
}
    12a8:	b011      	add	sp, #68	; 0x44
    12aa:	bd30      	pop	{r4, r5, pc}
    12ac:	00160002 	.word	0x00160002
    12b0:	00170002 	.word	0x00170002
    12b4:	200000f0 	.word	0x200000f0
    12b8:	00000691 	.word	0x00000691
    12bc:	42001400 	.word	0x42001400
    12c0:	00000601 	.word	0x00000601
    12c4:	e000e100 	.word	0xe000e100

000012c8 <LCD_Fast_Fill>:
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low, (((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    12c8:	b530      	push	{r4, r5, lr}
	int blocks;

	REG_PORT_OUTCLR1 = 0x0000ffff;
    12ca:	4c26      	ldr	r4, [pc, #152]	; (1364 <LCD_Fast_Fill+0x9c>)
    12cc:	4b26      	ldr	r3, [pc, #152]	; (1368 <LCD_Fast_Fill+0xa0>)
    12ce:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    12d0:	0200      	lsls	r0, r0, #8
    12d2:	4301      	orrs	r1, r0
    12d4:	4b25      	ldr	r3, [pc, #148]	; (136c <LCD_Fast_Fill+0xa4>)
    12d6:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    12d8:	17d3      	asrs	r3, r2, #31
    12da:	250f      	movs	r5, #15
    12dc:	401d      	ands	r5, r3
    12de:	18ad      	adds	r5, r5, r2
    12e0:	112d      	asrs	r5, r5, #4
	for (int i=0; i<blocks; i++)
    12e2:	2d00      	cmp	r5, #0
    12e4:	dd27      	ble.n	1336 <LCD_Fast_Fill+0x6e>
    12e6:	2400      	movs	r4, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    12e8:	481f      	ldr	r0, [pc, #124]	; (1368 <LCD_Fast_Fill+0xa0>)
    12ea:	2380      	movs	r3, #128	; 0x80
    12ec:	029b      	lsls	r3, r3, #10
		REG_PORT_OUTSET1 = LCD_WR;
    12ee:	491f      	ldr	r1, [pc, #124]	; (136c <LCD_Fast_Fill+0xa4>)
		REG_PORT_OUTCLR1 = LCD_WR;
    12f0:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    12f2:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    12f4:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    12f6:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    12f8:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    12fa:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    12fc:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    12fe:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    1300:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    1302:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    1304:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    1306:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    1308:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    130a:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    130c:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    130e:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    1310:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    1312:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    1314:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    1316:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    1318:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    131a:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    131c:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    131e:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    1320:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    1322:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    1324:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    1326:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    1328:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    132a:	600b      	str	r3, [r1, #0]
		
		REG_PORT_OUTCLR1 = LCD_WR;
    132c:	6003      	str	r3, [r0, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    132e:	600b      	str	r3, [r1, #0]
	for (int i=0; i<blocks; i++)
    1330:	3401      	adds	r4, #1
    1332:	42a5      	cmp	r5, r4
    1334:	d1dc      	bne.n	12f0 <LCD_Fast_Fill+0x28>
	}
	
	if ((pix % 16) != 0)
    1336:	0713      	lsls	r3, r2, #28
    1338:	d013      	beq.n	1362 <LCD_Fast_Fill+0x9a>
		for (int i=0; i<(pix % 16)+1; i++)
    133a:	17d3      	asrs	r3, r2, #31
    133c:	0f1b      	lsrs	r3, r3, #28
    133e:	18d2      	adds	r2, r2, r3
    1340:	210f      	movs	r1, #15
    1342:	4011      	ands	r1, r2
    1344:	1ac9      	subs	r1, r1, r3
    1346:	1c4b      	adds	r3, r1, #1
    1348:	2b00      	cmp	r3, #0
    134a:	dd0a      	ble.n	1362 <LCD_Fast_Fill+0x9a>
    134c:	0019      	movs	r1, r3
    134e:	2300      	movs	r3, #0
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    1350:	4c05      	ldr	r4, [pc, #20]	; (1368 <LCD_Fast_Fill+0xa0>)
    1352:	2280      	movs	r2, #128	; 0x80
    1354:	0292      	lsls	r2, r2, #10
			REG_PORT_OUTSET1 = LCD_WR;
    1356:	4805      	ldr	r0, [pc, #20]	; (136c <LCD_Fast_Fill+0xa4>)
			REG_PORT_OUTCLR1 = LCD_WR;
    1358:	6022      	str	r2, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    135a:	6002      	str	r2, [r0, #0]
		for (int i=0; i<(pix % 16)+1; i++)
    135c:	3301      	adds	r3, #1
    135e:	428b      	cmp	r3, r1
    1360:	d1fa      	bne.n	1358 <LCD_Fast_Fill+0x90>
		}
}
    1362:	bd30      	pop	{r4, r5, pc}
    1364:	0000ffff 	.word	0x0000ffff
    1368:	41004494 	.word	0x41004494
    136c:	41004498 	.word	0x41004498

00001370 <LCD_Write_Bus>:
	LCD_Write_COM16(0x2c,0x00);
}


void LCD_Write_Bus(char VH, char VL)
{
    1370:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    1372:	4c06      	ldr	r4, [pc, #24]	; (138c <LCD_Write_Bus+0x1c>)
    1374:	4b06      	ldr	r3, [pc, #24]	; (1390 <LCD_Write_Bus+0x20>)
    1376:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    1378:	0200      	lsls	r0, r0, #8
    137a:	4301      	orrs	r1, r0
    137c:	4b05      	ldr	r3, [pc, #20]	; (1394 <LCD_Write_Bus+0x24>)
    137e:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    1380:	2280      	movs	r2, #128	; 0x80
    1382:	0292      	lsls	r2, r2, #10
    1384:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    1386:	601a      	str	r2, [r3, #0]
}
    1388:	bd10      	pop	{r4, pc}
    138a:	46c0      	nop			; (mov r8, r8)
    138c:	41004494 	.word	0x41004494
    1390:	0000ffff 	.word	0x0000ffff
    1394:	41004498 	.word	0x41004498

00001398 <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    1398:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    139a:	2280      	movs	r2, #128	; 0x80
    139c:	0412      	lsls	r2, r2, #16
    139e:	4b02      	ldr	r3, [pc, #8]	; (13a8 <LCD_Write_COM16+0x10>)
    13a0:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    13a2:	4b02      	ldr	r3, [pc, #8]	; (13ac <LCD_Write_COM16+0x14>)
    13a4:	4798      	blx	r3
}
    13a6:	bd10      	pop	{r4, pc}
    13a8:	41004494 	.word	0x41004494
    13ac:	00001371 	.word	0x00001371

000013b0 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    13b0:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    13b2:	2280      	movs	r2, #128	; 0x80
    13b4:	0412      	lsls	r2, r2, #16
    13b6:	4b02      	ldr	r3, [pc, #8]	; (13c0 <LCD_Write_DATA16+0x10>)
    13b8:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    13ba:	4b02      	ldr	r3, [pc, #8]	; (13c4 <LCD_Write_DATA16+0x14>)
    13bc:	4798      	blx	r3
}
    13be:	bd10      	pop	{r4, pc}
    13c0:	41004498 	.word	0x41004498
    13c4:	00001371 	.word	0x00001371

000013c8 <setPixel>:
{
    13c8:	b510      	push	{r4, lr}
	LCD_Write_DATA16((color>>8),(color&0xFF)); 
    13ca:	b2c1      	uxtb	r1, r0
    13cc:	0a00      	lsrs	r0, r0, #8
    13ce:	4b01      	ldr	r3, [pc, #4]	; (13d4 <setPixel+0xc>)
    13d0:	4798      	blx	r3
}
    13d2:	bd10      	pop	{r4, pc}
    13d4:	000013b1 	.word	0x000013b1

000013d8 <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    13d8:	b510      	push	{r4, lr}
    13da:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    13dc:	2280      	movs	r2, #128	; 0x80
    13de:	0412      	lsls	r2, r2, #16
    13e0:	4b02      	ldr	r3, [pc, #8]	; (13ec <LCD_Write_DATA8+0x14>)
    13e2:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    13e4:	2000      	movs	r0, #0
    13e6:	4b02      	ldr	r3, [pc, #8]	; (13f0 <LCD_Write_DATA8+0x18>)
    13e8:	4798      	blx	r3
}
    13ea:	bd10      	pop	{r4, pc}
    13ec:	41004498 	.word	0x41004498
    13f0:	00001371 	.word	0x00001371

000013f4 <setXY>:
{
    13f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13f6:	b083      	sub	sp, #12
    13f8:	000e      	movs	r6, r1
    13fa:	9300      	str	r3, [sp, #0]
	y1=display_Y_size-y1;
    13fc:	4b1c      	ldr	r3, [pc, #112]	; (1470 <setXY+0x7c>)
    13fe:	881d      	ldrh	r5, [r3, #0]
    1400:	1a28      	subs	r0, r5, r0
    1402:	b287      	uxth	r7, r0
	y2=display_Y_size-y2;
    1404:	1aad      	subs	r5, r5, r2
    1406:	b2ad      	uxth	r5, r5
	LCD_Write_COM16(0x2a,0x00);
    1408:	2100      	movs	r1, #0
    140a:	202a      	movs	r0, #42	; 0x2a
    140c:	4c19      	ldr	r4, [pc, #100]	; (1474 <setXY+0x80>)
    140e:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    1410:	9601      	str	r6, [sp, #4]
    1412:	0a30      	lsrs	r0, r6, #8
    1414:	4e18      	ldr	r6, [pc, #96]	; (1478 <setXY+0x84>)
    1416:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x01);
    1418:	2101      	movs	r1, #1
    141a:	202a      	movs	r0, #42	; 0x2a
    141c:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    141e:	466b      	mov	r3, sp
    1420:	7918      	ldrb	r0, [r3, #4]
    1422:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x02);
    1424:	2102      	movs	r1, #2
    1426:	202a      	movs	r0, #42	; 0x2a
    1428:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    142a:	9b00      	ldr	r3, [sp, #0]
    142c:	0a18      	lsrs	r0, r3, #8
    142e:	47b0      	blx	r6
	LCD_Write_COM16(0x2a,0x03);
    1430:	2103      	movs	r1, #3
    1432:	202a      	movs	r0, #42	; 0x2a
    1434:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    1436:	466b      	mov	r3, sp
    1438:	7818      	ldrb	r0, [r3, #0]
    143a:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x00);
    143c:	2100      	movs	r1, #0
    143e:	202b      	movs	r0, #43	; 0x2b
    1440:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    1442:	0a28      	lsrs	r0, r5, #8
    1444:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x01);
    1446:	2101      	movs	r1, #1
    1448:	202b      	movs	r0, #43	; 0x2b
    144a:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    144c:	b2e8      	uxtb	r0, r5
    144e:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x02);
    1450:	2102      	movs	r1, #2
    1452:	202b      	movs	r0, #43	; 0x2b
    1454:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    1456:	0a38      	lsrs	r0, r7, #8
    1458:	47b0      	blx	r6
	LCD_Write_COM16(0x2b,0x03);
    145a:	2103      	movs	r1, #3
    145c:	202b      	movs	r0, #43	; 0x2b
    145e:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    1460:	b2f8      	uxtb	r0, r7
    1462:	47b0      	blx	r6
	LCD_Write_COM16(0x2c,0x00);
    1464:	2100      	movs	r1, #0
    1466:	202c      	movs	r0, #44	; 0x2c
    1468:	47a0      	blx	r4
}
    146a:	b003      	add	sp, #12
    146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    146e:	46c0      	nop			; (mov r8, r8)
    1470:	2000000c 	.word	0x2000000c
    1474:	00001399 	.word	0x00001399
    1478:	000013d9 	.word	0x000013d9

0000147c <fillRect>:
{
    147c:	b5f0      	push	{r4, r5, r6, r7, lr}
    147e:	46ce      	mov	lr, r9
    1480:	4647      	mov	r7, r8
    1482:	b580      	push	{r7, lr}
    1484:	b083      	sub	sp, #12
    1486:	4681      	mov	r9, r0
    1488:	4688      	mov	r8, r1
    148a:	0015      	movs	r5, r2
    148c:	001c      	movs	r4, r3
	if (x1>x2)
    148e:	4290      	cmp	r0, r2
    1490:	dd02      	ble.n	1498 <fillRect+0x1c>
    1492:	0403      	lsls	r3, r0, #16
		SwapUint16(x1, x2);
    1494:	4691      	mov	r9, r2
    1496:	0c1d      	lsrs	r5, r3, #16
	if (y1>y2)
    1498:	45a0      	cmp	r8, r4
    149a:	dd03      	ble.n	14a4 <fillRect+0x28>
    149c:	4643      	mov	r3, r8
    149e:	041b      	lsls	r3, r3, #16
		SwapUint16(y1, y2);
    14a0:	46a0      	mov	r8, r4
    14a2:	0c1c      	lsrs	r4, r3, #16
	REG_PORT_OUTCLR1 = LCD_CS;
    14a4:	2780      	movs	r7, #128	; 0x80
    14a6:	03ff      	lsls	r7, r7, #15
    14a8:	4b12      	ldr	r3, [pc, #72]	; (14f4 <fillRect+0x78>)
    14aa:	601f      	str	r7, [r3, #0]
	setXY(x1, y1, x2, y2);
    14ac:	b2a3      	uxth	r3, r4
    14ae:	b2aa      	uxth	r2, r5
    14b0:	4641      	mov	r1, r8
    14b2:	4668      	mov	r0, sp
    14b4:	80c1      	strh	r1, [r0, #6]
    14b6:	88c1      	ldrh	r1, [r0, #6]
    14b8:	4648      	mov	r0, r9
    14ba:	466e      	mov	r6, sp
    14bc:	80f0      	strh	r0, [r6, #6]
    14be:	88f0      	ldrh	r0, [r6, #6]
    14c0:	4e0d      	ldr	r6, [pc, #52]	; (14f8 <fillRect+0x7c>)
    14c2:	47b0      	blx	r6
	REG_PORT_OUTSET1 = LCD_DC;
    14c4:	4e0d      	ldr	r6, [pc, #52]	; (14fc <fillRect+0x80>)
    14c6:	2380      	movs	r3, #128	; 0x80
    14c8:	041b      	lsls	r3, r3, #16
    14ca:	6033      	str	r3, [r6, #0]
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low, (((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    14cc:	464b      	mov	r3, r9
    14ce:	1aed      	subs	r5, r5, r3
    14d0:	3501      	adds	r5, #1
    14d2:	4643      	mov	r3, r8
    14d4:	1ae2      	subs	r2, r4, r3
    14d6:	3201      	adds	r2, #1
    14d8:	436a      	muls	r2, r5
    14da:	4b09      	ldr	r3, [pc, #36]	; (1500 <fillRect+0x84>)
    14dc:	7819      	ldrb	r1, [r3, #0]
    14de:	4b09      	ldr	r3, [pc, #36]	; (1504 <fillRect+0x88>)
    14e0:	7818      	ldrb	r0, [r3, #0]
    14e2:	4b09      	ldr	r3, [pc, #36]	; (1508 <fillRect+0x8c>)
    14e4:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    14e6:	6037      	str	r7, [r6, #0]
}
    14e8:	b003      	add	sp, #12
    14ea:	bc0c      	pop	{r2, r3}
    14ec:	4690      	mov	r8, r2
    14ee:	4699      	mov	r9, r3
    14f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	41004494 	.word	0x41004494
    14f8:	000013f5 	.word	0x000013f5
    14fc:	41004498 	.word	0x41004498
    1500:	20000126 	.word	0x20000126
    1504:	20000125 	.word	0x20000125
    1508:	000012c9 	.word	0x000012c9

0000150c <clrXY>:
{
    150c:	b510      	push	{r4, lr}
	setXY(0,0,display_Y_size,display_X_size);
    150e:	4b04      	ldr	r3, [pc, #16]	; (1520 <clrXY+0x14>)
    1510:	881b      	ldrh	r3, [r3, #0]
    1512:	4a04      	ldr	r2, [pc, #16]	; (1524 <clrXY+0x18>)
    1514:	8812      	ldrh	r2, [r2, #0]
    1516:	2100      	movs	r1, #0
    1518:	2000      	movs	r0, #0
    151a:	4c03      	ldr	r4, [pc, #12]	; (1528 <clrXY+0x1c>)
    151c:	47a0      	blx	r4
}
    151e:	bd10      	pop	{r4, pc}
    1520:	2000000a 	.word	0x2000000a
    1524:	2000000c 	.word	0x2000000c
    1528:	000013f5 	.word	0x000013f5

0000152c <clrScr>:
{
    152c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    152e:	2280      	movs	r2, #128	; 0x80
    1530:	03d2      	lsls	r2, r2, #15
    1532:	4b02      	ldr	r3, [pc, #8]	; (153c <clrScr+0x10>)
    1534:	601a      	str	r2, [r3, #0]
	clrXY();
    1536:	4b02      	ldr	r3, [pc, #8]	; (1540 <clrScr+0x14>)
    1538:	4798      	blx	r3
}
    153a:	bd10      	pop	{r4, pc}
    153c:	41004494 	.word	0x41004494
    1540:	0000150d 	.word	0x0000150d

00001544 <drawPixel>:
{
    1544:	b570      	push	{r4, r5, r6, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    1546:	2480      	movs	r4, #128	; 0x80
    1548:	03e4      	lsls	r4, r4, #15
    154a:	4b0a      	ldr	r3, [pc, #40]	; (1574 <drawPixel+0x30>)
    154c:	601c      	str	r4, [r3, #0]
	setXY(x,y,x,y);
    154e:	b280      	uxth	r0, r0
    1550:	b289      	uxth	r1, r1
    1552:	000b      	movs	r3, r1
    1554:	0002      	movs	r2, r0
    1556:	4d08      	ldr	r5, [pc, #32]	; (1578 <drawPixel+0x34>)
    1558:	47a8      	blx	r5
	setPixel((fore_Color_High<<8)|fore_Color_Low);
    155a:	4b08      	ldr	r3, [pc, #32]	; (157c <drawPixel+0x38>)
    155c:	781b      	ldrb	r3, [r3, #0]
    155e:	021b      	lsls	r3, r3, #8
    1560:	4a07      	ldr	r2, [pc, #28]	; (1580 <drawPixel+0x3c>)
    1562:	7810      	ldrb	r0, [r2, #0]
    1564:	4318      	orrs	r0, r3
    1566:	4b07      	ldr	r3, [pc, #28]	; (1584 <drawPixel+0x40>)
    1568:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    156a:	4b07      	ldr	r3, [pc, #28]	; (1588 <drawPixel+0x44>)
    156c:	601c      	str	r4, [r3, #0]
	clrXY();
    156e:	4b07      	ldr	r3, [pc, #28]	; (158c <drawPixel+0x48>)
    1570:	4798      	blx	r3
}
    1572:	bd70      	pop	{r4, r5, r6, pc}
    1574:	41004494 	.word	0x41004494
    1578:	000013f5 	.word	0x000013f5
    157c:	20000125 	.word	0x20000125
    1580:	20000126 	.word	0x20000126
    1584:	000013c9 	.word	0x000013c9
    1588:	41004498 	.word	0x41004498
    158c:	0000150d 	.word	0x0000150d

00001590 <InitLCD>:



void InitLCD(void)
{
    1590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			(120+100+15+15+5). This does not include writing all black
			to the display.
	6) pull Chip Select high.
	*/
	
	REG_PORT_DIRSET1 = 0x00010000;
    1592:	2380      	movs	r3, #128	; 0x80
    1594:	025b      	lsls	r3, r3, #9
    1596:	4afe      	ldr	r2, [pc, #1016]	; (1990 <InitLCD+0x400>)
    1598:	6013      	str	r3, [r2, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    159a:	4cfe      	ldr	r4, [pc, #1016]	; (1994 <InitLCD+0x404>)
    159c:	6023      	str	r3, [r4, #0]
	
	REG_PORT_OUTSET1 = LCD_Reset;
    159e:	2580      	movs	r5, #128	; 0x80
    15a0:	05ed      	lsls	r5, r5, #23
    15a2:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    15a4:	2005      	movs	r0, #5
    15a6:	4ffc      	ldr	r7, [pc, #1008]	; (1998 <InitLCD+0x408>)
    15a8:	47b8      	blx	r7
	REG_PORT_OUTCLR1 = LCD_Reset;
    15aa:	4efc      	ldr	r6, [pc, #1008]	; (199c <InitLCD+0x40c>)
    15ac:	6035      	str	r5, [r6, #0]
	delay_ms(15);
    15ae:	200f      	movs	r0, #15
    15b0:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_Reset;
    15b2:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;		
    15b4:	2380      	movs	r3, #128	; 0x80
    15b6:	03db      	lsls	r3, r3, #15
    15b8:	6033      	str	r3, [r6, #0]
	That said, this section of code does correctly initialize the LCD. If you
	have any desire to change or edit this code, may whatever god you believe
	in have mercy on your soul.
	*/
									
	LCD_Write_COM16(0xF0,0x00);	LCD_Write_DATA8(0x55);
    15ba:	2100      	movs	r1, #0
    15bc:	20f0      	movs	r0, #240	; 0xf0
    15be:	4cf8      	ldr	r4, [pc, #992]	; (19a0 <InitLCD+0x410>)
    15c0:	47a0      	blx	r4
    15c2:	2055      	movs	r0, #85	; 0x55
    15c4:	4df7      	ldr	r5, [pc, #988]	; (19a4 <InitLCD+0x414>)
    15c6:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x01);	LCD_Write_DATA8(0xAA);
    15c8:	2101      	movs	r1, #1
    15ca:	20f0      	movs	r0, #240	; 0xf0
    15cc:	47a0      	blx	r4
    15ce:	20aa      	movs	r0, #170	; 0xaa
    15d0:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x02);	LCD_Write_DATA8(0x52);
    15d2:	2102      	movs	r1, #2
    15d4:	20f0      	movs	r0, #240	; 0xf0
    15d6:	47a0      	blx	r4
    15d8:	2052      	movs	r0, #82	; 0x52
    15da:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x03);	LCD_Write_DATA8(0x08);
    15dc:	2103      	movs	r1, #3
    15de:	20f0      	movs	r0, #240	; 0xf0
    15e0:	47a0      	blx	r4
    15e2:	2008      	movs	r0, #8
    15e4:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x04);	LCD_Write_DATA8(0x01);
    15e6:	2104      	movs	r1, #4
    15e8:	20f0      	movs	r0, #240	; 0xf0
    15ea:	47a0      	blx	r4
    15ec:	2001      	movs	r0, #1
    15ee:	47a8      	blx	r5
	
	//#AVDD Set AVDD 5.2V
	LCD_Write_COM16(0xB0,0x00);	LCD_Write_DATA8(0x0D);
    15f0:	2100      	movs	r1, #0
    15f2:	20b0      	movs	r0, #176	; 0xb0
    15f4:	47a0      	blx	r4
    15f6:	200d      	movs	r0, #13
    15f8:	47a8      	blx	r5
	LCD_Write_COM16(0xB0,0x01);	LCD_Write_DATA8(0x0D);
    15fa:	2101      	movs	r1, #1
    15fc:	20b0      	movs	r0, #176	; 0xb0
    15fe:	47a0      	blx	r4
    1600:	200d      	movs	r0, #13
    1602:	47a8      	blx	r5
	LCD_Write_COM16(0xB0,0x02);	LCD_Write_DATA8(0x0D);
    1604:	2102      	movs	r1, #2
    1606:	20b0      	movs	r0, #176	; 0xb0
    1608:	47a0      	blx	r4
    160a:	200d      	movs	r0, #13
    160c:	47a8      	blx	r5
	
	//#AVDD ratio
	LCD_Write_COM16(0xB6,0x00);	LCD_Write_DATA8(0x34);
    160e:	2100      	movs	r1, #0
    1610:	20b6      	movs	r0, #182	; 0xb6
    1612:	47a0      	blx	r4
    1614:	2034      	movs	r0, #52	; 0x34
    1616:	47a8      	blx	r5
	LCD_Write_COM16(0xB6,0x01);	LCD_Write_DATA8(0x34);
    1618:	2101      	movs	r1, #1
    161a:	20b6      	movs	r0, #182	; 0xb6
    161c:	47a0      	blx	r4
    161e:	2034      	movs	r0, #52	; 0x34
    1620:	47a8      	blx	r5
	LCD_Write_COM16(0xB6,0x02);	LCD_Write_DATA8(0x34);
    1622:	2102      	movs	r1, #2
    1624:	20b6      	movs	r0, #182	; 0xb6
    1626:	47a0      	blx	r4
    1628:	2034      	movs	r0, #52	; 0x34
    162a:	47a8      	blx	r5
	 
	//#AVEE  -5.2V
	LCD_Write_COM16(0xB1,0x00);	LCD_Write_DATA8(0x0D);
    162c:	2100      	movs	r1, #0
    162e:	20b1      	movs	r0, #177	; 0xb1
    1630:	47a0      	blx	r4
    1632:	200d      	movs	r0, #13
    1634:	47a8      	blx	r5
	LCD_Write_COM16(0xB1,0x01);	LCD_Write_DATA8(0x0D);
    1636:	2101      	movs	r1, #1
    1638:	20b1      	movs	r0, #177	; 0xb1
    163a:	47a0      	blx	r4
    163c:	200d      	movs	r0, #13
    163e:	47a8      	blx	r5
	LCD_Write_COM16(0xB1,0x02);	LCD_Write_DATA8(0x0D);
    1640:	2102      	movs	r1, #2
    1642:	20b1      	movs	r0, #177	; 0xb1
    1644:	47a0      	blx	r4
    1646:	200d      	movs	r0, #13
    1648:	47a8      	blx	r5
	
	//#AVEE ratio
	LCD_Write_COM16(0xB7,0x00);	LCD_Write_DATA8(0x34);
    164a:	2100      	movs	r1, #0
    164c:	20b7      	movs	r0, #183	; 0xb7
    164e:	47a0      	blx	r4
    1650:	2034      	movs	r0, #52	; 0x34
    1652:	47a8      	blx	r5
	LCD_Write_COM16(0xB7,0x01);	LCD_Write_DATA8(0x34);
    1654:	2101      	movs	r1, #1
    1656:	20b7      	movs	r0, #183	; 0xb7
    1658:	47a0      	blx	r4
    165a:	2034      	movs	r0, #52	; 0x34
    165c:	47a8      	blx	r5
	LCD_Write_COM16(0xB7,0x02);	LCD_Write_DATA8(0x34);
    165e:	2102      	movs	r1, #2
    1660:	20b7      	movs	r0, #183	; 0xb7
    1662:	47a0      	blx	r4
    1664:	2034      	movs	r0, #52	; 0x34
    1666:	47a8      	blx	r5
	
	//#VCL  -2.5V
	LCD_Write_COM16(0xB2,0x00);	LCD_Write_DATA8(0x00);
    1668:	2100      	movs	r1, #0
    166a:	20b2      	movs	r0, #178	; 0xb2
    166c:	47a0      	blx	r4
    166e:	2000      	movs	r0, #0
    1670:	47a8      	blx	r5
	LCD_Write_COM16(0xB2,0x01);	LCD_Write_DATA8(0x00);
    1672:	2101      	movs	r1, #1
    1674:	20b2      	movs	r0, #178	; 0xb2
    1676:	47a0      	blx	r4
    1678:	2000      	movs	r0, #0
    167a:	47a8      	blx	r5
	LCD_Write_COM16(0xB2,0x02);	LCD_Write_DATA8(0x00);
    167c:	2102      	movs	r1, #2
    167e:	20b2      	movs	r0, #178	; 0xb2
    1680:	47a0      	blx	r4
    1682:	2000      	movs	r0, #0
    1684:	47a8      	blx	r5
	
	//#VCL ratio
	LCD_Write_COM16(0xB8,0x00);	LCD_Write_DATA8(0x24);
    1686:	2100      	movs	r1, #0
    1688:	20b8      	movs	r0, #184	; 0xb8
    168a:	47a0      	blx	r4
    168c:	2024      	movs	r0, #36	; 0x24
    168e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8,0x01);	LCD_Write_DATA8(0x24);
    1690:	2101      	movs	r1, #1
    1692:	20b8      	movs	r0, #184	; 0xb8
    1694:	47a0      	blx	r4
    1696:	2024      	movs	r0, #36	; 0x24
    1698:	47a8      	blx	r5
	LCD_Write_COM16(0xB8,0x02);	LCD_Write_DATA8(0x24); 
    169a:	2102      	movs	r1, #2
    169c:	20b8      	movs	r0, #184	; 0xb8
    169e:	47a0      	blx	r4
    16a0:	2024      	movs	r0, #36	; 0x24
    16a2:	47a8      	blx	r5
	
	//#VGH  15V
	LCD_Write_COM16(0xBF,0x00);	LCD_Write_DATA8(0x01);
    16a4:	2100      	movs	r1, #0
    16a6:	20bf      	movs	r0, #191	; 0xbf
    16a8:	47a0      	blx	r4
    16aa:	2001      	movs	r0, #1
    16ac:	47a8      	blx	r5
	LCD_Write_COM16(0xB3,0x00);	LCD_Write_DATA8(0x0F);
    16ae:	2100      	movs	r1, #0
    16b0:	20b3      	movs	r0, #179	; 0xb3
    16b2:	47a0      	blx	r4
    16b4:	200f      	movs	r0, #15
    16b6:	47a8      	blx	r5
	LCD_Write_COM16(0xB3,0x01);	LCD_Write_DATA8(0x0F);
    16b8:	2101      	movs	r1, #1
    16ba:	20b3      	movs	r0, #179	; 0xb3
    16bc:	47a0      	blx	r4
    16be:	200f      	movs	r0, #15
    16c0:	47a8      	blx	r5
	LCD_Write_COM16(0xB3,0x02);	LCD_Write_DATA8(0x0F);
    16c2:	2102      	movs	r1, #2
    16c4:	20b3      	movs	r0, #179	; 0xb3
    16c6:	47a0      	blx	r4
    16c8:	200f      	movs	r0, #15
    16ca:	47a8      	blx	r5
	
	//#VGH  ratio
	LCD_Write_COM16(0xB9,0x00);	LCD_Write_DATA8(0x34);
    16cc:	2100      	movs	r1, #0
    16ce:	20b9      	movs	r0, #185	; 0xb9
    16d0:	47a0      	blx	r4
    16d2:	2034      	movs	r0, #52	; 0x34
    16d4:	47a8      	blx	r5
	LCD_Write_COM16(0xB9,0x01);	LCD_Write_DATA8(0x34);
    16d6:	2101      	movs	r1, #1
    16d8:	20b9      	movs	r0, #185	; 0xb9
    16da:	47a0      	blx	r4
    16dc:	2034      	movs	r0, #52	; 0x34
    16de:	47a8      	blx	r5
	LCD_Write_COM16(0xB9,0x02);	LCD_Write_DATA8(0x34); 
    16e0:	2102      	movs	r1, #2
    16e2:	20b9      	movs	r0, #185	; 0xb9
    16e4:	47a0      	blx	r4
    16e6:	2034      	movs	r0, #52	; 0x34
    16e8:	47a8      	blx	r5
	
	//#VGL_REG  -10V
	LCD_Write_COM16(0xB5,0x00);	LCD_Write_DATA8(0x08);
    16ea:	2100      	movs	r1, #0
    16ec:	20b5      	movs	r0, #181	; 0xb5
    16ee:	47a0      	blx	r4
    16f0:	2008      	movs	r0, #8
    16f2:	47a8      	blx	r5
	LCD_Write_COM16(0xB5,0x00);	LCD_Write_DATA8(0x08);
    16f4:	2100      	movs	r1, #0
    16f6:	20b5      	movs	r0, #181	; 0xb5
    16f8:	47a0      	blx	r4
    16fa:	2008      	movs	r0, #8
    16fc:	47a8      	blx	r5
	LCD_Write_COM16(0xB5,0x01);	LCD_Write_DATA8(0x08);
    16fe:	2101      	movs	r1, #1
    1700:	20b5      	movs	r0, #181	; 0xb5
    1702:	47a0      	blx	r4
    1704:	2008      	movs	r0, #8
    1706:	47a8      	blx	r5
	LCD_Write_COM16(0xC2,0x00);	LCD_Write_DATA8(0x03);
    1708:	2100      	movs	r1, #0
    170a:	20c2      	movs	r0, #194	; 0xc2
    170c:	47a0      	blx	r4
    170e:	2003      	movs	r0, #3
    1710:	47a8      	blx	r5
	
	//#VGLX  ratio
	LCD_Write_COM16(0xBA,0x00);	LCD_Write_DATA8(0x24);
    1712:	2100      	movs	r1, #0
    1714:	20ba      	movs	r0, #186	; 0xba
    1716:	47a0      	blx	r4
    1718:	2024      	movs	r0, #36	; 0x24
    171a:	47a8      	blx	r5
	LCD_Write_COM16(0xBA,0x01);	LCD_Write_DATA8(0x24);
    171c:	2101      	movs	r1, #1
    171e:	20ba      	movs	r0, #186	; 0xba
    1720:	47a0      	blx	r4
    1722:	2024      	movs	r0, #36	; 0x24
    1724:	47a8      	blx	r5
	LCD_Write_COM16(0xBA,0x02);	LCD_Write_DATA8(0x24);
    1726:	2102      	movs	r1, #2
    1728:	20ba      	movs	r0, #186	; 0xba
    172a:	47a0      	blx	r4
    172c:	2024      	movs	r0, #36	; 0x24
    172e:	47a8      	blx	r5
	
	//#VGMP/VGSP 4.5V/0V
	LCD_Write_COM16(0xBC,0x00);	LCD_Write_DATA8(0x00);
    1730:	2100      	movs	r1, #0
    1732:	20bc      	movs	r0, #188	; 0xbc
    1734:	47a0      	blx	r4
    1736:	2000      	movs	r0, #0
    1738:	47a8      	blx	r5
	LCD_Write_COM16(0xBC,0x01);	LCD_Write_DATA8(0x78);
    173a:	2101      	movs	r1, #1
    173c:	20bc      	movs	r0, #188	; 0xbc
    173e:	47a0      	blx	r4
    1740:	2078      	movs	r0, #120	; 0x78
    1742:	47a8      	blx	r5
	LCD_Write_COM16(0xBC,0x02);	LCD_Write_DATA8(0x00);
    1744:	2102      	movs	r1, #2
    1746:	20bc      	movs	r0, #188	; 0xbc
    1748:	47a0      	blx	r4
    174a:	2000      	movs	r0, #0
    174c:	47a8      	blx	r5
	
	//#VGMN/VGSN -4.5V/0V
	LCD_Write_COM16(0xBD,0x00);	LCD_Write_DATA8(0x00);
    174e:	2100      	movs	r1, #0
    1750:	20bd      	movs	r0, #189	; 0xbd
    1752:	47a0      	blx	r4
    1754:	2000      	movs	r0, #0
    1756:	47a8      	blx	r5
	LCD_Write_COM16(0xBD,0x01);	LCD_Write_DATA8(0x78);
    1758:	2101      	movs	r1, #1
    175a:	20bd      	movs	r0, #189	; 0xbd
    175c:	47a0      	blx	r4
    175e:	2078      	movs	r0, #120	; 0x78
    1760:	47a8      	blx	r5
	LCD_Write_COM16(0xBD,0x02);	LCD_Write_DATA8(0x00);
    1762:	2102      	movs	r1, #2
    1764:	20bd      	movs	r0, #189	; 0xbd
    1766:	47a0      	blx	r4
    1768:	2000      	movs	r0, #0
    176a:	47a8      	blx	r5
	
	//#VCOM  -1.325V
	LCD_Write_COM16(0xBE,0x00);	LCD_Write_DATA8(0x00);
    176c:	2100      	movs	r1, #0
    176e:	20be      	movs	r0, #190	; 0xbe
    1770:	47a0      	blx	r4
    1772:	2000      	movs	r0, #0
    1774:	47a8      	blx	r5
	LCD_Write_COM16(0xBE,0x01);	LCD_Write_DATA8(0x89);
    1776:	2101      	movs	r1, #1
    1778:	20be      	movs	r0, #190	; 0xbe
    177a:	47a0      	blx	r4
    177c:	2089      	movs	r0, #137	; 0x89
    177e:	47a8      	blx	r5
	
	 //Gamma Setting	 
	LCD_Write_COM16(0xD1,0x00);	LCD_Write_DATA8(0x00);
    1780:	2100      	movs	r1, #0
    1782:	20d1      	movs	r0, #209	; 0xd1
    1784:	47a0      	blx	r4
    1786:	2000      	movs	r0, #0
    1788:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x01);	LCD_Write_DATA8(0x2D);
    178a:	2101      	movs	r1, #1
    178c:	20d1      	movs	r0, #209	; 0xd1
    178e:	47a0      	blx	r4
    1790:	202d      	movs	r0, #45	; 0x2d
    1792:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x02);	LCD_Write_DATA8(0x00);
    1794:	2102      	movs	r1, #2
    1796:	20d1      	movs	r0, #209	; 0xd1
    1798:	47a0      	blx	r4
    179a:	2000      	movs	r0, #0
    179c:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x03);	LCD_Write_DATA8(0x2E);
    179e:	2103      	movs	r1, #3
    17a0:	20d1      	movs	r0, #209	; 0xd1
    17a2:	47a0      	blx	r4
    17a4:	202e      	movs	r0, #46	; 0x2e
    17a6:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x04);	LCD_Write_DATA8(0x00); 
    17a8:	2104      	movs	r1, #4
    17aa:	20d1      	movs	r0, #209	; 0xd1
    17ac:	47a0      	blx	r4
    17ae:	2000      	movs	r0, #0
    17b0:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x05);	LCD_Write_DATA8(0x32);
    17b2:	2105      	movs	r1, #5
    17b4:	20d1      	movs	r0, #209	; 0xd1
    17b6:	47a0      	blx	r4
    17b8:	2032      	movs	r0, #50	; 0x32
    17ba:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x06);	LCD_Write_DATA8(0x00);
    17bc:	2106      	movs	r1, #6
    17be:	20d1      	movs	r0, #209	; 0xd1
    17c0:	47a0      	blx	r4
    17c2:	2000      	movs	r0, #0
    17c4:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x07);	LCD_Write_DATA8(0x44);
    17c6:	2107      	movs	r1, #7
    17c8:	20d1      	movs	r0, #209	; 0xd1
    17ca:	47a0      	blx	r4
    17cc:	2044      	movs	r0, #68	; 0x44
    17ce:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x08);	LCD_Write_DATA8(0x00);
    17d0:	2108      	movs	r1, #8
    17d2:	20d1      	movs	r0, #209	; 0xd1
    17d4:	47a0      	blx	r4
    17d6:	2000      	movs	r0, #0
    17d8:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x09);	LCD_Write_DATA8(0x53);
    17da:	2109      	movs	r1, #9
    17dc:	20d1      	movs	r0, #209	; 0xd1
    17de:	47a0      	blx	r4
    17e0:	2053      	movs	r0, #83	; 0x53
    17e2:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0A);	LCD_Write_DATA8(0x00);
    17e4:	210a      	movs	r1, #10
    17e6:	20d1      	movs	r0, #209	; 0xd1
    17e8:	47a0      	blx	r4
    17ea:	2000      	movs	r0, #0
    17ec:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0B);	LCD_Write_DATA8(0x88);
    17ee:	210b      	movs	r1, #11
    17f0:	20d1      	movs	r0, #209	; 0xd1
    17f2:	47a0      	blx	r4
    17f4:	2088      	movs	r0, #136	; 0x88
    17f6:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0C);	LCD_Write_DATA8(0x00);
    17f8:	210c      	movs	r1, #12
    17fa:	20d1      	movs	r0, #209	; 0xd1
    17fc:	47a0      	blx	r4
    17fe:	2000      	movs	r0, #0
    1800:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0D);	LCD_Write_DATA8(0xB6);
    1802:	210d      	movs	r1, #13
    1804:	20d1      	movs	r0, #209	; 0xd1
    1806:	47a0      	blx	r4
    1808:	20b6      	movs	r0, #182	; 0xb6
    180a:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0E);	LCD_Write_DATA8(0x00);
    180c:	210e      	movs	r1, #14
    180e:	20d1      	movs	r0, #209	; 0xd1
    1810:	47a0      	blx	r4
    1812:	2000      	movs	r0, #0
    1814:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x0F);	LCD_Write_DATA8(0xF3);
    1816:	210f      	movs	r1, #15
    1818:	20d1      	movs	r0, #209	; 0xd1
    181a:	47a0      	blx	r4
    181c:	20f3      	movs	r0, #243	; 0xf3
    181e:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x10);	LCD_Write_DATA8(0x01);
    1820:	2110      	movs	r1, #16
    1822:	20d1      	movs	r0, #209	; 0xd1
    1824:	47a0      	blx	r4
    1826:	2001      	movs	r0, #1
    1828:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x11);	LCD_Write_DATA8(0x22);
    182a:	2111      	movs	r1, #17
    182c:	20d1      	movs	r0, #209	; 0xd1
    182e:	47a0      	blx	r4
    1830:	2022      	movs	r0, #34	; 0x22
    1832:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x12);	LCD_Write_DATA8(0x01);
    1834:	2112      	movs	r1, #18
    1836:	20d1      	movs	r0, #209	; 0xd1
    1838:	47a0      	blx	r4
    183a:	2001      	movs	r0, #1
    183c:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x13);	LCD_Write_DATA8(0x64);
    183e:	2113      	movs	r1, #19
    1840:	20d1      	movs	r0, #209	; 0xd1
    1842:	47a0      	blx	r4
    1844:	2064      	movs	r0, #100	; 0x64
    1846:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x14);	LCD_Write_DATA8(0x01);
    1848:	2114      	movs	r1, #20
    184a:	20d1      	movs	r0, #209	; 0xd1
    184c:	47a0      	blx	r4
    184e:	2001      	movs	r0, #1
    1850:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x15);	LCD_Write_DATA8(0x92);
    1852:	2115      	movs	r1, #21
    1854:	20d1      	movs	r0, #209	; 0xd1
    1856:	47a0      	blx	r4
    1858:	2092      	movs	r0, #146	; 0x92
    185a:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x16);	LCD_Write_DATA8(0x01);
    185c:	2116      	movs	r1, #22
    185e:	20d1      	movs	r0, #209	; 0xd1
    1860:	47a0      	blx	r4
    1862:	2001      	movs	r0, #1
    1864:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x17);	LCD_Write_DATA8(0xD4);
    1866:	2117      	movs	r1, #23
    1868:	20d1      	movs	r0, #209	; 0xd1
    186a:	47a0      	blx	r4
    186c:	20d4      	movs	r0, #212	; 0xd4
    186e:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x18);	LCD_Write_DATA8(0x02);	
    1870:	2118      	movs	r1, #24
    1872:	20d1      	movs	r0, #209	; 0xd1
    1874:	47a0      	blx	r4
    1876:	2002      	movs	r0, #2
    1878:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x19);	LCD_Write_DATA8(0x07);
    187a:	2119      	movs	r1, #25
    187c:	20d1      	movs	r0, #209	; 0xd1
    187e:	47a0      	blx	r4
    1880:	2007      	movs	r0, #7
    1882:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1A);	LCD_Write_DATA8(0x02);
    1884:	211a      	movs	r1, #26
    1886:	20d1      	movs	r0, #209	; 0xd1
    1888:	47a0      	blx	r4
    188a:	2002      	movs	r0, #2
    188c:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1B);	LCD_Write_DATA8(0x08);
    188e:	211b      	movs	r1, #27
    1890:	20d1      	movs	r0, #209	; 0xd1
    1892:	47a0      	blx	r4
    1894:	2008      	movs	r0, #8
    1896:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1C);	LCD_Write_DATA8(0x02);
    1898:	211c      	movs	r1, #28
    189a:	20d1      	movs	r0, #209	; 0xd1
    189c:	47a0      	blx	r4
    189e:	2002      	movs	r0, #2
    18a0:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1D);	LCD_Write_DATA8(0x34);
    18a2:	211d      	movs	r1, #29
    18a4:	20d1      	movs	r0, #209	; 0xd1
    18a6:	47a0      	blx	r4
    18a8:	2034      	movs	r0, #52	; 0x34
    18aa:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1E);	LCD_Write_DATA8(0x02);
    18ac:	211e      	movs	r1, #30
    18ae:	20d1      	movs	r0, #209	; 0xd1
    18b0:	47a0      	blx	r4
    18b2:	2002      	movs	r0, #2
    18b4:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x1F);	LCD_Write_DATA8(0x5F);
    18b6:	211f      	movs	r1, #31
    18b8:	20d1      	movs	r0, #209	; 0xd1
    18ba:	47a0      	blx	r4
    18bc:	205f      	movs	r0, #95	; 0x5f
    18be:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x20);	LCD_Write_DATA8(0x02);
    18c0:	2120      	movs	r1, #32
    18c2:	20d1      	movs	r0, #209	; 0xd1
    18c4:	47a0      	blx	r4
    18c6:	2002      	movs	r0, #2
    18c8:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x21);	LCD_Write_DATA8(0x78);
    18ca:	2121      	movs	r1, #33	; 0x21
    18cc:	20d1      	movs	r0, #209	; 0xd1
    18ce:	47a0      	blx	r4
    18d0:	2078      	movs	r0, #120	; 0x78
    18d2:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x22);	LCD_Write_DATA8(0x02);
    18d4:	2122      	movs	r1, #34	; 0x22
    18d6:	20d1      	movs	r0, #209	; 0xd1
    18d8:	47a0      	blx	r4
    18da:	2002      	movs	r0, #2
    18dc:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x23);	LCD_Write_DATA8(0x94);
    18de:	2123      	movs	r1, #35	; 0x23
    18e0:	20d1      	movs	r0, #209	; 0xd1
    18e2:	47a0      	blx	r4
    18e4:	2094      	movs	r0, #148	; 0x94
    18e6:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x24);	LCD_Write_DATA8(0x02);
    18e8:	2124      	movs	r1, #36	; 0x24
    18ea:	20d1      	movs	r0, #209	; 0xd1
    18ec:	47a0      	blx	r4
    18ee:	2002      	movs	r0, #2
    18f0:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x25);	LCD_Write_DATA8(0xA6);
    18f2:	2125      	movs	r1, #37	; 0x25
    18f4:	20d1      	movs	r0, #209	; 0xd1
    18f6:	47a0      	blx	r4
    18f8:	20a6      	movs	r0, #166	; 0xa6
    18fa:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x26);	LCD_Write_DATA8(0x02);
    18fc:	2126      	movs	r1, #38	; 0x26
    18fe:	20d1      	movs	r0, #209	; 0xd1
    1900:	47a0      	blx	r4
    1902:	2002      	movs	r0, #2
    1904:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x27);	LCD_Write_DATA8(0xBB);
    1906:	2127      	movs	r1, #39	; 0x27
    1908:	20d1      	movs	r0, #209	; 0xd1
    190a:	47a0      	blx	r4
    190c:	20bb      	movs	r0, #187	; 0xbb
    190e:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x28);	LCD_Write_DATA8(0x02); 
    1910:	2128      	movs	r1, #40	; 0x28
    1912:	20d1      	movs	r0, #209	; 0xd1
    1914:	47a0      	blx	r4
    1916:	2002      	movs	r0, #2
    1918:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x29);	LCD_Write_DATA8(0xCA);
    191a:	2129      	movs	r1, #41	; 0x29
    191c:	20d1      	movs	r0, #209	; 0xd1
    191e:	47a0      	blx	r4
    1920:	20ca      	movs	r0, #202	; 0xca
    1922:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2A);	LCD_Write_DATA8(0x02);
    1924:	212a      	movs	r1, #42	; 0x2a
    1926:	20d1      	movs	r0, #209	; 0xd1
    1928:	47a0      	blx	r4
    192a:	2002      	movs	r0, #2
    192c:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2B);	LCD_Write_DATA8(0xDB);
    192e:	212b      	movs	r1, #43	; 0x2b
    1930:	20d1      	movs	r0, #209	; 0xd1
    1932:	47a0      	blx	r4
    1934:	20db      	movs	r0, #219	; 0xdb
    1936:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2C);	LCD_Write_DATA8(0x02);
    1938:	212c      	movs	r1, #44	; 0x2c
    193a:	20d1      	movs	r0, #209	; 0xd1
    193c:	47a0      	blx	r4
    193e:	2002      	movs	r0, #2
    1940:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2D);	LCD_Write_DATA8(0xE8);
    1942:	212d      	movs	r1, #45	; 0x2d
    1944:	20d1      	movs	r0, #209	; 0xd1
    1946:	47a0      	blx	r4
    1948:	20e8      	movs	r0, #232	; 0xe8
    194a:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2E);	LCD_Write_DATA8(0x02);
    194c:	212e      	movs	r1, #46	; 0x2e
    194e:	20d1      	movs	r0, #209	; 0xd1
    1950:	47a0      	blx	r4
    1952:	2002      	movs	r0, #2
    1954:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x2F);	LCD_Write_DATA8(0xF9);
    1956:	212f      	movs	r1, #47	; 0x2f
    1958:	20d1      	movs	r0, #209	; 0xd1
    195a:	47a0      	blx	r4
    195c:	20f9      	movs	r0, #249	; 0xf9
    195e:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x30);	LCD_Write_DATA8(0x03); 
    1960:	2130      	movs	r1, #48	; 0x30
    1962:	20d1      	movs	r0, #209	; 0xd1
    1964:	47a0      	blx	r4
    1966:	2003      	movs	r0, #3
    1968:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x31);	LCD_Write_DATA8(0x1F);
    196a:	2131      	movs	r1, #49	; 0x31
    196c:	20d1      	movs	r0, #209	; 0xd1
    196e:	47a0      	blx	r4
    1970:	201f      	movs	r0, #31
    1972:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x32);	LCD_Write_DATA8(0x03);
    1974:	2132      	movs	r1, #50	; 0x32
    1976:	20d1      	movs	r0, #209	; 0xd1
    1978:	47a0      	blx	r4
    197a:	2003      	movs	r0, #3
    197c:	47a8      	blx	r5
	LCD_Write_COM16(0xD1,0x33);	LCD_Write_DATA8(0x7F);
    197e:	2133      	movs	r1, #51	; 0x33
    1980:	20d1      	movs	r0, #209	; 0xd1
    1982:	47a0      	blx	r4
    1984:	207f      	movs	r0, #127	; 0x7f
    1986:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x00);	LCD_Write_DATA8(0x00);
    1988:	2100      	movs	r1, #0
    198a:	20d2      	movs	r0, #210	; 0xd2
    198c:	47a0      	blx	r4
    198e:	e00b      	b.n	19a8 <InitLCD+0x418>
    1990:	41004488 	.word	0x41004488
    1994:	41004498 	.word	0x41004498
    1998:	00000155 	.word	0x00000155
    199c:	41004494 	.word	0x41004494
    19a0:	00001399 	.word	0x00001399
    19a4:	000013d9 	.word	0x000013d9
    19a8:	2000      	movs	r0, #0
    19aa:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x01);	LCD_Write_DATA8(0x2D);
    19ac:	2101      	movs	r1, #1
    19ae:	20d2      	movs	r0, #210	; 0xd2
    19b0:	47a0      	blx	r4
    19b2:	202d      	movs	r0, #45	; 0x2d
    19b4:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x02);	LCD_Write_DATA8(0x00);
    19b6:	2102      	movs	r1, #2
    19b8:	20d2      	movs	r0, #210	; 0xd2
    19ba:	47a0      	blx	r4
    19bc:	2000      	movs	r0, #0
    19be:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x03);	LCD_Write_DATA8(0x2E);
    19c0:	2103      	movs	r1, #3
    19c2:	20d2      	movs	r0, #210	; 0xd2
    19c4:	47a0      	blx	r4
    19c6:	202e      	movs	r0, #46	; 0x2e
    19c8:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x04);	LCD_Write_DATA8(0x00); 
    19ca:	2104      	movs	r1, #4
    19cc:	20d2      	movs	r0, #210	; 0xd2
    19ce:	47a0      	blx	r4
    19d0:	2000      	movs	r0, #0
    19d2:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x05);	LCD_Write_DATA8(0x32);
    19d4:	2105      	movs	r1, #5
    19d6:	20d2      	movs	r0, #210	; 0xd2
    19d8:	47a0      	blx	r4
    19da:	2032      	movs	r0, #50	; 0x32
    19dc:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x06);	LCD_Write_DATA8(0x00);
    19de:	2106      	movs	r1, #6
    19e0:	20d2      	movs	r0, #210	; 0xd2
    19e2:	47a0      	blx	r4
    19e4:	2000      	movs	r0, #0
    19e6:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x07);	LCD_Write_DATA8(0x44);
    19e8:	2107      	movs	r1, #7
    19ea:	20d2      	movs	r0, #210	; 0xd2
    19ec:	47a0      	blx	r4
    19ee:	2044      	movs	r0, #68	; 0x44
    19f0:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x08);	LCD_Write_DATA8(0x00);
    19f2:	2108      	movs	r1, #8
    19f4:	20d2      	movs	r0, #210	; 0xd2
    19f6:	47a0      	blx	r4
    19f8:	2000      	movs	r0, #0
    19fa:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x09);	LCD_Write_DATA8(0x53);
    19fc:	2109      	movs	r1, #9
    19fe:	20d2      	movs	r0, #210	; 0xd2
    1a00:	47a0      	blx	r4
    1a02:	2053      	movs	r0, #83	; 0x53
    1a04:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0A);	LCD_Write_DATA8(0x00);
    1a06:	210a      	movs	r1, #10
    1a08:	20d2      	movs	r0, #210	; 0xd2
    1a0a:	47a0      	blx	r4
    1a0c:	2000      	movs	r0, #0
    1a0e:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0B);	LCD_Write_DATA8(0x88);
    1a10:	210b      	movs	r1, #11
    1a12:	20d2      	movs	r0, #210	; 0xd2
    1a14:	47a0      	blx	r4
    1a16:	2088      	movs	r0, #136	; 0x88
    1a18:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0C);	LCD_Write_DATA8(0x00);
    1a1a:	210c      	movs	r1, #12
    1a1c:	20d2      	movs	r0, #210	; 0xd2
    1a1e:	47a0      	blx	r4
    1a20:	2000      	movs	r0, #0
    1a22:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0D);	LCD_Write_DATA8(0xB6);
    1a24:	210d      	movs	r1, #13
    1a26:	20d2      	movs	r0, #210	; 0xd2
    1a28:	47a0      	blx	r4
    1a2a:	20b6      	movs	r0, #182	; 0xb6
    1a2c:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0E);	LCD_Write_DATA8(0x00);
    1a2e:	210e      	movs	r1, #14
    1a30:	20d2      	movs	r0, #210	; 0xd2
    1a32:	47a0      	blx	r4
    1a34:	2000      	movs	r0, #0
    1a36:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x0F);	LCD_Write_DATA8(0xF3);
    1a38:	210f      	movs	r1, #15
    1a3a:	20d2      	movs	r0, #210	; 0xd2
    1a3c:	47a0      	blx	r4
    1a3e:	20f3      	movs	r0, #243	; 0xf3
    1a40:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x10);	LCD_Write_DATA8(0x01);
    1a42:	2110      	movs	r1, #16
    1a44:	20d2      	movs	r0, #210	; 0xd2
    1a46:	47a0      	blx	r4
    1a48:	2001      	movs	r0, #1
    1a4a:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x11);	LCD_Write_DATA8(0x22);
    1a4c:	2111      	movs	r1, #17
    1a4e:	20d2      	movs	r0, #210	; 0xd2
    1a50:	47a0      	blx	r4
    1a52:	2022      	movs	r0, #34	; 0x22
    1a54:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x12);	LCD_Write_DATA8(0x01);
    1a56:	2112      	movs	r1, #18
    1a58:	20d2      	movs	r0, #210	; 0xd2
    1a5a:	47a0      	blx	r4
    1a5c:	2001      	movs	r0, #1
    1a5e:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x13);	LCD_Write_DATA8(0x64);
    1a60:	2113      	movs	r1, #19
    1a62:	20d2      	movs	r0, #210	; 0xd2
    1a64:	47a0      	blx	r4
    1a66:	2064      	movs	r0, #100	; 0x64
    1a68:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x14);	LCD_Write_DATA8(0x01);
    1a6a:	2114      	movs	r1, #20
    1a6c:	20d2      	movs	r0, #210	; 0xd2
    1a6e:	47a0      	blx	r4
    1a70:	2001      	movs	r0, #1
    1a72:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x15);	LCD_Write_DATA8(0x92);
    1a74:	2115      	movs	r1, #21
    1a76:	20d2      	movs	r0, #210	; 0xd2
    1a78:	47a0      	blx	r4
    1a7a:	2092      	movs	r0, #146	; 0x92
    1a7c:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x16);	LCD_Write_DATA8(0x01);
    1a7e:	2116      	movs	r1, #22
    1a80:	20d2      	movs	r0, #210	; 0xd2
    1a82:	47a0      	blx	r4
    1a84:	2001      	movs	r0, #1
    1a86:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x17);	LCD_Write_DATA8(0xD4);
    1a88:	2117      	movs	r1, #23
    1a8a:	20d2      	movs	r0, #210	; 0xd2
    1a8c:	47a0      	blx	r4
    1a8e:	20d4      	movs	r0, #212	; 0xd4
    1a90:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x18);	LCD_Write_DATA8(0x02);	
    1a92:	2118      	movs	r1, #24
    1a94:	20d2      	movs	r0, #210	; 0xd2
    1a96:	47a0      	blx	r4
    1a98:	2002      	movs	r0, #2
    1a9a:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x19);	LCD_Write_DATA8(0x07);
    1a9c:	2119      	movs	r1, #25
    1a9e:	20d2      	movs	r0, #210	; 0xd2
    1aa0:	47a0      	blx	r4
    1aa2:	2007      	movs	r0, #7
    1aa4:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1A);	LCD_Write_DATA8(0x02);
    1aa6:	211a      	movs	r1, #26
    1aa8:	20d2      	movs	r0, #210	; 0xd2
    1aaa:	47a0      	blx	r4
    1aac:	2002      	movs	r0, #2
    1aae:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1B);	LCD_Write_DATA8(0x08);
    1ab0:	211b      	movs	r1, #27
    1ab2:	20d2      	movs	r0, #210	; 0xd2
    1ab4:	47a0      	blx	r4
    1ab6:	2008      	movs	r0, #8
    1ab8:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1C);	LCD_Write_DATA8(0x02);
    1aba:	211c      	movs	r1, #28
    1abc:	20d2      	movs	r0, #210	; 0xd2
    1abe:	47a0      	blx	r4
    1ac0:	2002      	movs	r0, #2
    1ac2:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1D);	LCD_Write_DATA8(0x34);
    1ac4:	211d      	movs	r1, #29
    1ac6:	20d2      	movs	r0, #210	; 0xd2
    1ac8:	47a0      	blx	r4
    1aca:	2034      	movs	r0, #52	; 0x34
    1acc:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1E);	LCD_Write_DATA8(0x02);
    1ace:	211e      	movs	r1, #30
    1ad0:	20d2      	movs	r0, #210	; 0xd2
    1ad2:	47a0      	blx	r4
    1ad4:	2002      	movs	r0, #2
    1ad6:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x1F);	LCD_Write_DATA8(0x5F);
    1ad8:	211f      	movs	r1, #31
    1ada:	20d2      	movs	r0, #210	; 0xd2
    1adc:	47a0      	blx	r4
    1ade:	205f      	movs	r0, #95	; 0x5f
    1ae0:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x20);	LCD_Write_DATA8(0x02);
    1ae2:	2120      	movs	r1, #32
    1ae4:	20d2      	movs	r0, #210	; 0xd2
    1ae6:	47a0      	blx	r4
    1ae8:	2002      	movs	r0, #2
    1aea:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x21);	LCD_Write_DATA8(0x78);
    1aec:	2121      	movs	r1, #33	; 0x21
    1aee:	20d2      	movs	r0, #210	; 0xd2
    1af0:	47a0      	blx	r4
    1af2:	2078      	movs	r0, #120	; 0x78
    1af4:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x22);	LCD_Write_DATA8(0x02);
    1af6:	2122      	movs	r1, #34	; 0x22
    1af8:	20d2      	movs	r0, #210	; 0xd2
    1afa:	47a0      	blx	r4
    1afc:	2002      	movs	r0, #2
    1afe:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x23);	LCD_Write_DATA8(0x94);
    1b00:	2123      	movs	r1, #35	; 0x23
    1b02:	20d2      	movs	r0, #210	; 0xd2
    1b04:	47a0      	blx	r4
    1b06:	2094      	movs	r0, #148	; 0x94
    1b08:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x24);	LCD_Write_DATA8(0x02);
    1b0a:	2124      	movs	r1, #36	; 0x24
    1b0c:	20d2      	movs	r0, #210	; 0xd2
    1b0e:	47a0      	blx	r4
    1b10:	2002      	movs	r0, #2
    1b12:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x25);	LCD_Write_DATA8(0xA6);
    1b14:	2125      	movs	r1, #37	; 0x25
    1b16:	20d2      	movs	r0, #210	; 0xd2
    1b18:	47a0      	blx	r4
    1b1a:	20a6      	movs	r0, #166	; 0xa6
    1b1c:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x26);	LCD_Write_DATA8(0x02);
    1b1e:	2126      	movs	r1, #38	; 0x26
    1b20:	20d2      	movs	r0, #210	; 0xd2
    1b22:	47a0      	blx	r4
    1b24:	2002      	movs	r0, #2
    1b26:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x27);	LCD_Write_DATA8(0xBB);
    1b28:	2127      	movs	r1, #39	; 0x27
    1b2a:	20d2      	movs	r0, #210	; 0xd2
    1b2c:	47a0      	blx	r4
    1b2e:	20bb      	movs	r0, #187	; 0xbb
    1b30:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x28);	LCD_Write_DATA8(0x02); 
    1b32:	2128      	movs	r1, #40	; 0x28
    1b34:	20d2      	movs	r0, #210	; 0xd2
    1b36:	47a0      	blx	r4
    1b38:	2002      	movs	r0, #2
    1b3a:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x29);	LCD_Write_DATA8(0xCA);
    1b3c:	2129      	movs	r1, #41	; 0x29
    1b3e:	20d2      	movs	r0, #210	; 0xd2
    1b40:	47a0      	blx	r4
    1b42:	20ca      	movs	r0, #202	; 0xca
    1b44:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2A);	LCD_Write_DATA8(0x02);
    1b46:	212a      	movs	r1, #42	; 0x2a
    1b48:	20d2      	movs	r0, #210	; 0xd2
    1b4a:	47a0      	blx	r4
    1b4c:	2002      	movs	r0, #2
    1b4e:	4dfe      	ldr	r5, [pc, #1016]	; (1f48 <InitLCD+0x9b8>)
    1b50:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2B);	LCD_Write_DATA8(0xDB);
    1b52:	212b      	movs	r1, #43	; 0x2b
    1b54:	20d2      	movs	r0, #210	; 0xd2
    1b56:	4cfd      	ldr	r4, [pc, #1012]	; (1f4c <InitLCD+0x9bc>)
    1b58:	47a0      	blx	r4
    1b5a:	20db      	movs	r0, #219	; 0xdb
    1b5c:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2C);	LCD_Write_DATA8(0x02);
    1b5e:	212c      	movs	r1, #44	; 0x2c
    1b60:	20d2      	movs	r0, #210	; 0xd2
    1b62:	47a0      	blx	r4
    1b64:	2002      	movs	r0, #2
    1b66:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2D);	LCD_Write_DATA8(0xE8);
    1b68:	212d      	movs	r1, #45	; 0x2d
    1b6a:	20d2      	movs	r0, #210	; 0xd2
    1b6c:	47a0      	blx	r4
    1b6e:	20e8      	movs	r0, #232	; 0xe8
    1b70:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2E);	LCD_Write_DATA8(0x02);
    1b72:	212e      	movs	r1, #46	; 0x2e
    1b74:	20d2      	movs	r0, #210	; 0xd2
    1b76:	47a0      	blx	r4
    1b78:	2002      	movs	r0, #2
    1b7a:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x2F);	LCD_Write_DATA8(0xF9);
    1b7c:	212f      	movs	r1, #47	; 0x2f
    1b7e:	20d2      	movs	r0, #210	; 0xd2
    1b80:	47a0      	blx	r4
    1b82:	20f9      	movs	r0, #249	; 0xf9
    1b84:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x30);	LCD_Write_DATA8(0x03); 
    1b86:	2130      	movs	r1, #48	; 0x30
    1b88:	20d2      	movs	r0, #210	; 0xd2
    1b8a:	47a0      	blx	r4
    1b8c:	2003      	movs	r0, #3
    1b8e:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x31);	LCD_Write_DATA8(0x1F);
    1b90:	2131      	movs	r1, #49	; 0x31
    1b92:	20d2      	movs	r0, #210	; 0xd2
    1b94:	47a0      	blx	r4
    1b96:	201f      	movs	r0, #31
    1b98:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x32);	LCD_Write_DATA8(0x03);
    1b9a:	2132      	movs	r1, #50	; 0x32
    1b9c:	20d2      	movs	r0, #210	; 0xd2
    1b9e:	47a0      	blx	r4
    1ba0:	2003      	movs	r0, #3
    1ba2:	47a8      	blx	r5
	LCD_Write_COM16(0xD2,0x33);	LCD_Write_DATA8(0x7F); 
    1ba4:	2133      	movs	r1, #51	; 0x33
    1ba6:	20d2      	movs	r0, #210	; 0xd2
    1ba8:	47a0      	blx	r4
    1baa:	207f      	movs	r0, #127	; 0x7f
    1bac:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x00);	LCD_Write_DATA8(0x00);
    1bae:	2100      	movs	r1, #0
    1bb0:	20d3      	movs	r0, #211	; 0xd3
    1bb2:	47a0      	blx	r4
    1bb4:	2000      	movs	r0, #0
    1bb6:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x01);	LCD_Write_DATA8(0x2D);
    1bb8:	2101      	movs	r1, #1
    1bba:	20d3      	movs	r0, #211	; 0xd3
    1bbc:	47a0      	blx	r4
    1bbe:	202d      	movs	r0, #45	; 0x2d
    1bc0:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x02);	LCD_Write_DATA8(0x00);
    1bc2:	2102      	movs	r1, #2
    1bc4:	20d3      	movs	r0, #211	; 0xd3
    1bc6:	47a0      	blx	r4
    1bc8:	2000      	movs	r0, #0
    1bca:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x03);	LCD_Write_DATA8(0x2E);
    1bcc:	2103      	movs	r1, #3
    1bce:	20d3      	movs	r0, #211	; 0xd3
    1bd0:	47a0      	blx	r4
    1bd2:	202e      	movs	r0, #46	; 0x2e
    1bd4:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x04);	LCD_Write_DATA8(0x00); 
    1bd6:	2104      	movs	r1, #4
    1bd8:	20d3      	movs	r0, #211	; 0xd3
    1bda:	47a0      	blx	r4
    1bdc:	2000      	movs	r0, #0
    1bde:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x05);	LCD_Write_DATA8(0x32);
    1be0:	2105      	movs	r1, #5
    1be2:	20d3      	movs	r0, #211	; 0xd3
    1be4:	47a0      	blx	r4
    1be6:	2032      	movs	r0, #50	; 0x32
    1be8:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x06);	LCD_Write_DATA8(0x00);
    1bea:	2106      	movs	r1, #6
    1bec:	20d3      	movs	r0, #211	; 0xd3
    1bee:	47a0      	blx	r4
    1bf0:	2000      	movs	r0, #0
    1bf2:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x07);	LCD_Write_DATA8(0x44);
    1bf4:	2107      	movs	r1, #7
    1bf6:	20d3      	movs	r0, #211	; 0xd3
    1bf8:	47a0      	blx	r4
    1bfa:	2044      	movs	r0, #68	; 0x44
    1bfc:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x08);	LCD_Write_DATA8(0x00);
    1bfe:	2108      	movs	r1, #8
    1c00:	20d3      	movs	r0, #211	; 0xd3
    1c02:	47a0      	blx	r4
    1c04:	2000      	movs	r0, #0
    1c06:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x09);	LCD_Write_DATA8(0x53);
    1c08:	2109      	movs	r1, #9
    1c0a:	20d3      	movs	r0, #211	; 0xd3
    1c0c:	47a0      	blx	r4
    1c0e:	2053      	movs	r0, #83	; 0x53
    1c10:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0A);	LCD_Write_DATA8(0x00);
    1c12:	210a      	movs	r1, #10
    1c14:	20d3      	movs	r0, #211	; 0xd3
    1c16:	47a0      	blx	r4
    1c18:	2000      	movs	r0, #0
    1c1a:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0B);	LCD_Write_DATA8(0x88);
    1c1c:	210b      	movs	r1, #11
    1c1e:	20d3      	movs	r0, #211	; 0xd3
    1c20:	47a0      	blx	r4
    1c22:	2088      	movs	r0, #136	; 0x88
    1c24:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0C);	LCD_Write_DATA8(0x00);
    1c26:	210c      	movs	r1, #12
    1c28:	20d3      	movs	r0, #211	; 0xd3
    1c2a:	47a0      	blx	r4
    1c2c:	2000      	movs	r0, #0
    1c2e:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0D);	LCD_Write_DATA8(0xB6);
    1c30:	210d      	movs	r1, #13
    1c32:	20d3      	movs	r0, #211	; 0xd3
    1c34:	47a0      	blx	r4
    1c36:	20b6      	movs	r0, #182	; 0xb6
    1c38:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0E);	LCD_Write_DATA8(0x00);
    1c3a:	210e      	movs	r1, #14
    1c3c:	20d3      	movs	r0, #211	; 0xd3
    1c3e:	47a0      	blx	r4
    1c40:	2000      	movs	r0, #0
    1c42:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x0F);	LCD_Write_DATA8(0xF3);
    1c44:	210f      	movs	r1, #15
    1c46:	20d3      	movs	r0, #211	; 0xd3
    1c48:	47a0      	blx	r4
    1c4a:	20f3      	movs	r0, #243	; 0xf3
    1c4c:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x10);	LCD_Write_DATA8(0x01);
    1c4e:	2110      	movs	r1, #16
    1c50:	20d3      	movs	r0, #211	; 0xd3
    1c52:	47a0      	blx	r4
    1c54:	2001      	movs	r0, #1
    1c56:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x11);	LCD_Write_DATA8(0x22);
    1c58:	2111      	movs	r1, #17
    1c5a:	20d3      	movs	r0, #211	; 0xd3
    1c5c:	47a0      	blx	r4
    1c5e:	2022      	movs	r0, #34	; 0x22
    1c60:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x12);	LCD_Write_DATA8(0x01);
    1c62:	2112      	movs	r1, #18
    1c64:	20d3      	movs	r0, #211	; 0xd3
    1c66:	47a0      	blx	r4
    1c68:	2001      	movs	r0, #1
    1c6a:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x13);	LCD_Write_DATA8(0x64);
    1c6c:	2113      	movs	r1, #19
    1c6e:	20d3      	movs	r0, #211	; 0xd3
    1c70:	47a0      	blx	r4
    1c72:	2064      	movs	r0, #100	; 0x64
    1c74:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x14);	LCD_Write_DATA8(0x01);
    1c76:	2114      	movs	r1, #20
    1c78:	20d3      	movs	r0, #211	; 0xd3
    1c7a:	47a0      	blx	r4
    1c7c:	2001      	movs	r0, #1
    1c7e:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x15);	LCD_Write_DATA8(0x92);
    1c80:	2115      	movs	r1, #21
    1c82:	20d3      	movs	r0, #211	; 0xd3
    1c84:	47a0      	blx	r4
    1c86:	2092      	movs	r0, #146	; 0x92
    1c88:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x16);	LCD_Write_DATA8(0x01);
    1c8a:	2116      	movs	r1, #22
    1c8c:	20d3      	movs	r0, #211	; 0xd3
    1c8e:	47a0      	blx	r4
    1c90:	2001      	movs	r0, #1
    1c92:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x17);	LCD_Write_DATA8(0xD4);
    1c94:	2117      	movs	r1, #23
    1c96:	20d3      	movs	r0, #211	; 0xd3
    1c98:	47a0      	blx	r4
    1c9a:	20d4      	movs	r0, #212	; 0xd4
    1c9c:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x18);	LCD_Write_DATA8(0x02);	
    1c9e:	2118      	movs	r1, #24
    1ca0:	20d3      	movs	r0, #211	; 0xd3
    1ca2:	47a0      	blx	r4
    1ca4:	2002      	movs	r0, #2
    1ca6:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x19);	LCD_Write_DATA8(0x07);
    1ca8:	2119      	movs	r1, #25
    1caa:	20d3      	movs	r0, #211	; 0xd3
    1cac:	47a0      	blx	r4
    1cae:	2007      	movs	r0, #7
    1cb0:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1A);	LCD_Write_DATA8(0x02);
    1cb2:	211a      	movs	r1, #26
    1cb4:	20d3      	movs	r0, #211	; 0xd3
    1cb6:	47a0      	blx	r4
    1cb8:	2002      	movs	r0, #2
    1cba:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1B);	LCD_Write_DATA8(0x08);
    1cbc:	211b      	movs	r1, #27
    1cbe:	20d3      	movs	r0, #211	; 0xd3
    1cc0:	47a0      	blx	r4
    1cc2:	2008      	movs	r0, #8
    1cc4:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1C);	LCD_Write_DATA8(0x02);
    1cc6:	211c      	movs	r1, #28
    1cc8:	20d3      	movs	r0, #211	; 0xd3
    1cca:	47a0      	blx	r4
    1ccc:	2002      	movs	r0, #2
    1cce:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1D);	LCD_Write_DATA8(0x34);
    1cd0:	211d      	movs	r1, #29
    1cd2:	20d3      	movs	r0, #211	; 0xd3
    1cd4:	47a0      	blx	r4
    1cd6:	2034      	movs	r0, #52	; 0x34
    1cd8:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1E);	LCD_Write_DATA8(0x02);
    1cda:	211e      	movs	r1, #30
    1cdc:	20d3      	movs	r0, #211	; 0xd3
    1cde:	47a0      	blx	r4
    1ce0:	2002      	movs	r0, #2
    1ce2:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x1F);	LCD_Write_DATA8(0x5F);
    1ce4:	211f      	movs	r1, #31
    1ce6:	20d3      	movs	r0, #211	; 0xd3
    1ce8:	47a0      	blx	r4
    1cea:	205f      	movs	r0, #95	; 0x5f
    1cec:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x20);	LCD_Write_DATA8(0x02);
    1cee:	2120      	movs	r1, #32
    1cf0:	20d3      	movs	r0, #211	; 0xd3
    1cf2:	47a0      	blx	r4
    1cf4:	2002      	movs	r0, #2
    1cf6:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x21);	LCD_Write_DATA8(0x78);
    1cf8:	2121      	movs	r1, #33	; 0x21
    1cfa:	20d3      	movs	r0, #211	; 0xd3
    1cfc:	47a0      	blx	r4
    1cfe:	2078      	movs	r0, #120	; 0x78
    1d00:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x22);	LCD_Write_DATA8(0x02);
    1d02:	2122      	movs	r1, #34	; 0x22
    1d04:	20d3      	movs	r0, #211	; 0xd3
    1d06:	47a0      	blx	r4
    1d08:	2002      	movs	r0, #2
    1d0a:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x23);	LCD_Write_DATA8(0x94);
    1d0c:	2123      	movs	r1, #35	; 0x23
    1d0e:	20d3      	movs	r0, #211	; 0xd3
    1d10:	47a0      	blx	r4
    1d12:	2094      	movs	r0, #148	; 0x94
    1d14:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x24);	LCD_Write_DATA8(0x02);
    1d16:	2124      	movs	r1, #36	; 0x24
    1d18:	20d3      	movs	r0, #211	; 0xd3
    1d1a:	47a0      	blx	r4
    1d1c:	2002      	movs	r0, #2
    1d1e:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x25);	LCD_Write_DATA8(0xA6);
    1d20:	2125      	movs	r1, #37	; 0x25
    1d22:	20d3      	movs	r0, #211	; 0xd3
    1d24:	47a0      	blx	r4
    1d26:	20a6      	movs	r0, #166	; 0xa6
    1d28:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x26);	LCD_Write_DATA8(0x02);
    1d2a:	2126      	movs	r1, #38	; 0x26
    1d2c:	20d3      	movs	r0, #211	; 0xd3
    1d2e:	47a0      	blx	r4
    1d30:	2002      	movs	r0, #2
    1d32:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x27);	LCD_Write_DATA8(0xBB);
    1d34:	2127      	movs	r1, #39	; 0x27
    1d36:	20d3      	movs	r0, #211	; 0xd3
    1d38:	47a0      	blx	r4
    1d3a:	20bb      	movs	r0, #187	; 0xbb
    1d3c:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x28);	LCD_Write_DATA8(0x02); 
    1d3e:	2128      	movs	r1, #40	; 0x28
    1d40:	20d3      	movs	r0, #211	; 0xd3
    1d42:	47a0      	blx	r4
    1d44:	2002      	movs	r0, #2
    1d46:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x29);	LCD_Write_DATA8(0xCA);
    1d48:	2129      	movs	r1, #41	; 0x29
    1d4a:	20d3      	movs	r0, #211	; 0xd3
    1d4c:	47a0      	blx	r4
    1d4e:	20ca      	movs	r0, #202	; 0xca
    1d50:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2A);	LCD_Write_DATA8(0x02);
    1d52:	212a      	movs	r1, #42	; 0x2a
    1d54:	20d3      	movs	r0, #211	; 0xd3
    1d56:	47a0      	blx	r4
    1d58:	2002      	movs	r0, #2
    1d5a:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2B);	LCD_Write_DATA8(0xDB);
    1d5c:	212b      	movs	r1, #43	; 0x2b
    1d5e:	20d3      	movs	r0, #211	; 0xd3
    1d60:	47a0      	blx	r4
    1d62:	20db      	movs	r0, #219	; 0xdb
    1d64:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2C);	LCD_Write_DATA8(0x02);
    1d66:	212c      	movs	r1, #44	; 0x2c
    1d68:	20d3      	movs	r0, #211	; 0xd3
    1d6a:	47a0      	blx	r4
    1d6c:	2002      	movs	r0, #2
    1d6e:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2D);	LCD_Write_DATA8(0xE8);
    1d70:	212d      	movs	r1, #45	; 0x2d
    1d72:	20d3      	movs	r0, #211	; 0xd3
    1d74:	47a0      	blx	r4
    1d76:	20e8      	movs	r0, #232	; 0xe8
    1d78:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2E);	LCD_Write_DATA8(0x02);
    1d7a:	212e      	movs	r1, #46	; 0x2e
    1d7c:	20d3      	movs	r0, #211	; 0xd3
    1d7e:	47a0      	blx	r4
    1d80:	2002      	movs	r0, #2
    1d82:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x2F);	LCD_Write_DATA8(0xF9);
    1d84:	212f      	movs	r1, #47	; 0x2f
    1d86:	20d3      	movs	r0, #211	; 0xd3
    1d88:	47a0      	blx	r4
    1d8a:	20f9      	movs	r0, #249	; 0xf9
    1d8c:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x30);	LCD_Write_DATA8(0x03); 
    1d8e:	2130      	movs	r1, #48	; 0x30
    1d90:	20d3      	movs	r0, #211	; 0xd3
    1d92:	47a0      	blx	r4
    1d94:	2003      	movs	r0, #3
    1d96:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x31);	LCD_Write_DATA8(0x1F);
    1d98:	2131      	movs	r1, #49	; 0x31
    1d9a:	20d3      	movs	r0, #211	; 0xd3
    1d9c:	47a0      	blx	r4
    1d9e:	201f      	movs	r0, #31
    1da0:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x32);	LCD_Write_DATA8(0x03);
    1da2:	2132      	movs	r1, #50	; 0x32
    1da4:	20d3      	movs	r0, #211	; 0xd3
    1da6:	47a0      	blx	r4
    1da8:	2003      	movs	r0, #3
    1daa:	47a8      	blx	r5
	LCD_Write_COM16(0xD3,0x33);	LCD_Write_DATA8(0x7F);
    1dac:	2133      	movs	r1, #51	; 0x33
    1dae:	20d3      	movs	r0, #211	; 0xd3
    1db0:	47a0      	blx	r4
    1db2:	207f      	movs	r0, #127	; 0x7f
    1db4:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x00);	LCD_Write_DATA8(0x00);
    1db6:	2100      	movs	r1, #0
    1db8:	20d4      	movs	r0, #212	; 0xd4
    1dba:	47a0      	blx	r4
    1dbc:	2000      	movs	r0, #0
    1dbe:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x01);	LCD_Write_DATA8(0x2D);
    1dc0:	2101      	movs	r1, #1
    1dc2:	20d4      	movs	r0, #212	; 0xd4
    1dc4:	47a0      	blx	r4
    1dc6:	202d      	movs	r0, #45	; 0x2d
    1dc8:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x02);	LCD_Write_DATA8(0x00);
    1dca:	2102      	movs	r1, #2
    1dcc:	20d4      	movs	r0, #212	; 0xd4
    1dce:	47a0      	blx	r4
    1dd0:	2000      	movs	r0, #0
    1dd2:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x03);	LCD_Write_DATA8(0x2E);
    1dd4:	2103      	movs	r1, #3
    1dd6:	20d4      	movs	r0, #212	; 0xd4
    1dd8:	47a0      	blx	r4
    1dda:	202e      	movs	r0, #46	; 0x2e
    1ddc:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x04);	LCD_Write_DATA8(0x00); 
    1dde:	2104      	movs	r1, #4
    1de0:	20d4      	movs	r0, #212	; 0xd4
    1de2:	47a0      	blx	r4
    1de4:	2000      	movs	r0, #0
    1de6:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x05);	LCD_Write_DATA8(0x32);
    1de8:	2105      	movs	r1, #5
    1dea:	20d4      	movs	r0, #212	; 0xd4
    1dec:	47a0      	blx	r4
    1dee:	2032      	movs	r0, #50	; 0x32
    1df0:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x06);	LCD_Write_DATA8(0x00);
    1df2:	2106      	movs	r1, #6
    1df4:	20d4      	movs	r0, #212	; 0xd4
    1df6:	47a0      	blx	r4
    1df8:	2000      	movs	r0, #0
    1dfa:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x07);	LCD_Write_DATA8(0x44);
    1dfc:	2107      	movs	r1, #7
    1dfe:	20d4      	movs	r0, #212	; 0xd4
    1e00:	47a0      	blx	r4
    1e02:	2044      	movs	r0, #68	; 0x44
    1e04:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x08);	LCD_Write_DATA8(0x00);
    1e06:	2108      	movs	r1, #8
    1e08:	20d4      	movs	r0, #212	; 0xd4
    1e0a:	47a0      	blx	r4
    1e0c:	2000      	movs	r0, #0
    1e0e:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x09);	LCD_Write_DATA8(0x53);
    1e10:	2109      	movs	r1, #9
    1e12:	20d4      	movs	r0, #212	; 0xd4
    1e14:	47a0      	blx	r4
    1e16:	2053      	movs	r0, #83	; 0x53
    1e18:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0A);	LCD_Write_DATA8(0x00);
    1e1a:	210a      	movs	r1, #10
    1e1c:	20d4      	movs	r0, #212	; 0xd4
    1e1e:	47a0      	blx	r4
    1e20:	2000      	movs	r0, #0
    1e22:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0B);	LCD_Write_DATA8(0x88);
    1e24:	210b      	movs	r1, #11
    1e26:	20d4      	movs	r0, #212	; 0xd4
    1e28:	47a0      	blx	r4
    1e2a:	2088      	movs	r0, #136	; 0x88
    1e2c:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0C);	LCD_Write_DATA8(0x00);
    1e2e:	210c      	movs	r1, #12
    1e30:	20d4      	movs	r0, #212	; 0xd4
    1e32:	47a0      	blx	r4
    1e34:	2000      	movs	r0, #0
    1e36:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0D);	LCD_Write_DATA8(0xB6);
    1e38:	210d      	movs	r1, #13
    1e3a:	20d4      	movs	r0, #212	; 0xd4
    1e3c:	47a0      	blx	r4
    1e3e:	20b6      	movs	r0, #182	; 0xb6
    1e40:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0E);	LCD_Write_DATA8(0x00);
    1e42:	210e      	movs	r1, #14
    1e44:	20d4      	movs	r0, #212	; 0xd4
    1e46:	47a0      	blx	r4
    1e48:	2000      	movs	r0, #0
    1e4a:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x0F);	LCD_Write_DATA8(0xF3);
    1e4c:	210f      	movs	r1, #15
    1e4e:	20d4      	movs	r0, #212	; 0xd4
    1e50:	47a0      	blx	r4
    1e52:	20f3      	movs	r0, #243	; 0xf3
    1e54:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x10);	LCD_Write_DATA8(0x01);
    1e56:	2110      	movs	r1, #16
    1e58:	20d4      	movs	r0, #212	; 0xd4
    1e5a:	47a0      	blx	r4
    1e5c:	2001      	movs	r0, #1
    1e5e:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x11);	LCD_Write_DATA8(0x22);
    1e60:	2111      	movs	r1, #17
    1e62:	20d4      	movs	r0, #212	; 0xd4
    1e64:	47a0      	blx	r4
    1e66:	2022      	movs	r0, #34	; 0x22
    1e68:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x12);	LCD_Write_DATA8(0x01);
    1e6a:	2112      	movs	r1, #18
    1e6c:	20d4      	movs	r0, #212	; 0xd4
    1e6e:	47a0      	blx	r4
    1e70:	2001      	movs	r0, #1
    1e72:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x13);	LCD_Write_DATA8(0x64);
    1e74:	2113      	movs	r1, #19
    1e76:	20d4      	movs	r0, #212	; 0xd4
    1e78:	47a0      	blx	r4
    1e7a:	2064      	movs	r0, #100	; 0x64
    1e7c:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x14);	LCD_Write_DATA8(0x01);
    1e7e:	2114      	movs	r1, #20
    1e80:	20d4      	movs	r0, #212	; 0xd4
    1e82:	47a0      	blx	r4
    1e84:	2001      	movs	r0, #1
    1e86:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x15);	LCD_Write_DATA8(0x92);
    1e88:	2115      	movs	r1, #21
    1e8a:	20d4      	movs	r0, #212	; 0xd4
    1e8c:	47a0      	blx	r4
    1e8e:	2092      	movs	r0, #146	; 0x92
    1e90:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x16);	LCD_Write_DATA8(0x01);
    1e92:	2116      	movs	r1, #22
    1e94:	20d4      	movs	r0, #212	; 0xd4
    1e96:	47a0      	blx	r4
    1e98:	2001      	movs	r0, #1
    1e9a:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x17);	LCD_Write_DATA8(0xD4);
    1e9c:	2117      	movs	r1, #23
    1e9e:	20d4      	movs	r0, #212	; 0xd4
    1ea0:	47a0      	blx	r4
    1ea2:	20d4      	movs	r0, #212	; 0xd4
    1ea4:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x18);	LCD_Write_DATA8(0x02);	
    1ea6:	2118      	movs	r1, #24
    1ea8:	20d4      	movs	r0, #212	; 0xd4
    1eaa:	47a0      	blx	r4
    1eac:	2002      	movs	r0, #2
    1eae:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x19);	LCD_Write_DATA8(0x07);
    1eb0:	2119      	movs	r1, #25
    1eb2:	20d4      	movs	r0, #212	; 0xd4
    1eb4:	47a0      	blx	r4
    1eb6:	2007      	movs	r0, #7
    1eb8:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1A);	LCD_Write_DATA8(0x02);
    1eba:	211a      	movs	r1, #26
    1ebc:	20d4      	movs	r0, #212	; 0xd4
    1ebe:	47a0      	blx	r4
    1ec0:	2002      	movs	r0, #2
    1ec2:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1B);	LCD_Write_DATA8(0x08);
    1ec4:	211b      	movs	r1, #27
    1ec6:	20d4      	movs	r0, #212	; 0xd4
    1ec8:	47a0      	blx	r4
    1eca:	2008      	movs	r0, #8
    1ecc:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1C);	LCD_Write_DATA8(0x02);
    1ece:	211c      	movs	r1, #28
    1ed0:	20d4      	movs	r0, #212	; 0xd4
    1ed2:	47a0      	blx	r4
    1ed4:	2002      	movs	r0, #2
    1ed6:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1D);	LCD_Write_DATA8(0x34);
    1ed8:	211d      	movs	r1, #29
    1eda:	20d4      	movs	r0, #212	; 0xd4
    1edc:	47a0      	blx	r4
    1ede:	2034      	movs	r0, #52	; 0x34
    1ee0:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1E);	LCD_Write_DATA8(0x02);
    1ee2:	211e      	movs	r1, #30
    1ee4:	20d4      	movs	r0, #212	; 0xd4
    1ee6:	47a0      	blx	r4
    1ee8:	2002      	movs	r0, #2
    1eea:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x1F);	LCD_Write_DATA8(0x5F);
    1eec:	211f      	movs	r1, #31
    1eee:	20d4      	movs	r0, #212	; 0xd4
    1ef0:	47a0      	blx	r4
    1ef2:	205f      	movs	r0, #95	; 0x5f
    1ef4:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x20);	LCD_Write_DATA8(0x02);
    1ef6:	2120      	movs	r1, #32
    1ef8:	20d4      	movs	r0, #212	; 0xd4
    1efa:	47a0      	blx	r4
    1efc:	2002      	movs	r0, #2
    1efe:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x21);	LCD_Write_DATA8(0x78);
    1f00:	2121      	movs	r1, #33	; 0x21
    1f02:	20d4      	movs	r0, #212	; 0xd4
    1f04:	47a0      	blx	r4
    1f06:	2078      	movs	r0, #120	; 0x78
    1f08:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x22);	LCD_Write_DATA8(0x02);
    1f0a:	2122      	movs	r1, #34	; 0x22
    1f0c:	20d4      	movs	r0, #212	; 0xd4
    1f0e:	47a0      	blx	r4
    1f10:	2002      	movs	r0, #2
    1f12:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x23);	LCD_Write_DATA8(0x94);
    1f14:	2123      	movs	r1, #35	; 0x23
    1f16:	20d4      	movs	r0, #212	; 0xd4
    1f18:	47a0      	blx	r4
    1f1a:	2094      	movs	r0, #148	; 0x94
    1f1c:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x24);	LCD_Write_DATA8(0x02);
    1f1e:	2124      	movs	r1, #36	; 0x24
    1f20:	20d4      	movs	r0, #212	; 0xd4
    1f22:	47a0      	blx	r4
    1f24:	2002      	movs	r0, #2
    1f26:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x25);	LCD_Write_DATA8(0xA6);
    1f28:	2125      	movs	r1, #37	; 0x25
    1f2a:	20d4      	movs	r0, #212	; 0xd4
    1f2c:	47a0      	blx	r4
    1f2e:	20a6      	movs	r0, #166	; 0xa6
    1f30:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x26);	LCD_Write_DATA8(0x02);
    1f32:	2126      	movs	r1, #38	; 0x26
    1f34:	20d4      	movs	r0, #212	; 0xd4
    1f36:	47a0      	blx	r4
    1f38:	2002      	movs	r0, #2
    1f3a:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x27);	LCD_Write_DATA8(0xBB);
    1f3c:	2127      	movs	r1, #39	; 0x27
    1f3e:	20d4      	movs	r0, #212	; 0xd4
    1f40:	47a0      	blx	r4
    1f42:	20bb      	movs	r0, #187	; 0xbb
    1f44:	47a8      	blx	r5
    1f46:	e003      	b.n	1f50 <InitLCD+0x9c0>
    1f48:	000013d9 	.word	0x000013d9
    1f4c:	00001399 	.word	0x00001399
	LCD_Write_COM16(0xD4,0x28);	LCD_Write_DATA8(0x02); 
    1f50:	2128      	movs	r1, #40	; 0x28
    1f52:	20d4      	movs	r0, #212	; 0xd4
    1f54:	47a0      	blx	r4
    1f56:	2002      	movs	r0, #2
    1f58:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x29);	LCD_Write_DATA8(0xCA);
    1f5a:	2129      	movs	r1, #41	; 0x29
    1f5c:	20d4      	movs	r0, #212	; 0xd4
    1f5e:	47a0      	blx	r4
    1f60:	20ca      	movs	r0, #202	; 0xca
    1f62:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2A);	LCD_Write_DATA8(0x02);
    1f64:	212a      	movs	r1, #42	; 0x2a
    1f66:	20d4      	movs	r0, #212	; 0xd4
    1f68:	47a0      	blx	r4
    1f6a:	2002      	movs	r0, #2
    1f6c:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2B);	LCD_Write_DATA8(0xDB);
    1f6e:	212b      	movs	r1, #43	; 0x2b
    1f70:	20d4      	movs	r0, #212	; 0xd4
    1f72:	47a0      	blx	r4
    1f74:	20db      	movs	r0, #219	; 0xdb
    1f76:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2C);	LCD_Write_DATA8(0x02);
    1f78:	212c      	movs	r1, #44	; 0x2c
    1f7a:	20d4      	movs	r0, #212	; 0xd4
    1f7c:	47a0      	blx	r4
    1f7e:	2002      	movs	r0, #2
    1f80:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2D);	LCD_Write_DATA8(0xE8);
    1f82:	212d      	movs	r1, #45	; 0x2d
    1f84:	20d4      	movs	r0, #212	; 0xd4
    1f86:	47a0      	blx	r4
    1f88:	20e8      	movs	r0, #232	; 0xe8
    1f8a:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2E);	LCD_Write_DATA8(0x02);
    1f8c:	212e      	movs	r1, #46	; 0x2e
    1f8e:	20d4      	movs	r0, #212	; 0xd4
    1f90:	47a0      	blx	r4
    1f92:	2002      	movs	r0, #2
    1f94:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x2F);	LCD_Write_DATA8(0xF9);
    1f96:	212f      	movs	r1, #47	; 0x2f
    1f98:	20d4      	movs	r0, #212	; 0xd4
    1f9a:	47a0      	blx	r4
    1f9c:	20f9      	movs	r0, #249	; 0xf9
    1f9e:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x30);	LCD_Write_DATA8(0x03); 
    1fa0:	2130      	movs	r1, #48	; 0x30
    1fa2:	20d4      	movs	r0, #212	; 0xd4
    1fa4:	47a0      	blx	r4
    1fa6:	2003      	movs	r0, #3
    1fa8:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x31);	LCD_Write_DATA8(0x1F);
    1faa:	2131      	movs	r1, #49	; 0x31
    1fac:	20d4      	movs	r0, #212	; 0xd4
    1fae:	47a0      	blx	r4
    1fb0:	201f      	movs	r0, #31
    1fb2:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x32);	LCD_Write_DATA8(0x03);
    1fb4:	2132      	movs	r1, #50	; 0x32
    1fb6:	20d4      	movs	r0, #212	; 0xd4
    1fb8:	47a0      	blx	r4
    1fba:	2003      	movs	r0, #3
    1fbc:	47a8      	blx	r5
	LCD_Write_COM16(0xD4,0x33);	LCD_Write_DATA8(0x7F); 
    1fbe:	2133      	movs	r1, #51	; 0x33
    1fc0:	20d4      	movs	r0, #212	; 0xd4
    1fc2:	47a0      	blx	r4
    1fc4:	207f      	movs	r0, #127	; 0x7f
    1fc6:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x00);	LCD_Write_DATA8(0x00);
    1fc8:	2100      	movs	r1, #0
    1fca:	20d5      	movs	r0, #213	; 0xd5
    1fcc:	47a0      	blx	r4
    1fce:	2000      	movs	r0, #0
    1fd0:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x01);	LCD_Write_DATA8(0x2D);
    1fd2:	2101      	movs	r1, #1
    1fd4:	20d5      	movs	r0, #213	; 0xd5
    1fd6:	47a0      	blx	r4
    1fd8:	202d      	movs	r0, #45	; 0x2d
    1fda:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x02);	LCD_Write_DATA8(0x00);
    1fdc:	2102      	movs	r1, #2
    1fde:	20d5      	movs	r0, #213	; 0xd5
    1fe0:	47a0      	blx	r4
    1fe2:	2000      	movs	r0, #0
    1fe4:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x03);	LCD_Write_DATA8(0x2E);
    1fe6:	2103      	movs	r1, #3
    1fe8:	20d5      	movs	r0, #213	; 0xd5
    1fea:	47a0      	blx	r4
    1fec:	202e      	movs	r0, #46	; 0x2e
    1fee:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x04);	LCD_Write_DATA8(0x00); 
    1ff0:	2104      	movs	r1, #4
    1ff2:	20d5      	movs	r0, #213	; 0xd5
    1ff4:	47a0      	blx	r4
    1ff6:	2000      	movs	r0, #0
    1ff8:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x05);	LCD_Write_DATA8(0x32);
    1ffa:	2105      	movs	r1, #5
    1ffc:	20d5      	movs	r0, #213	; 0xd5
    1ffe:	47a0      	blx	r4
    2000:	2032      	movs	r0, #50	; 0x32
    2002:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x06);	LCD_Write_DATA8(0x00);
    2004:	2106      	movs	r1, #6
    2006:	20d5      	movs	r0, #213	; 0xd5
    2008:	47a0      	blx	r4
    200a:	2000      	movs	r0, #0
    200c:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x07);	LCD_Write_DATA8(0x44);
    200e:	2107      	movs	r1, #7
    2010:	20d5      	movs	r0, #213	; 0xd5
    2012:	47a0      	blx	r4
    2014:	2044      	movs	r0, #68	; 0x44
    2016:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x08);	LCD_Write_DATA8(0x00);
    2018:	2108      	movs	r1, #8
    201a:	20d5      	movs	r0, #213	; 0xd5
    201c:	47a0      	blx	r4
    201e:	2000      	movs	r0, #0
    2020:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x09);	LCD_Write_DATA8(0x53);
    2022:	2109      	movs	r1, #9
    2024:	20d5      	movs	r0, #213	; 0xd5
    2026:	47a0      	blx	r4
    2028:	2053      	movs	r0, #83	; 0x53
    202a:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0A);	LCD_Write_DATA8(0x00);
    202c:	210a      	movs	r1, #10
    202e:	20d5      	movs	r0, #213	; 0xd5
    2030:	47a0      	blx	r4
    2032:	2000      	movs	r0, #0
    2034:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0B);	LCD_Write_DATA8(0x88);
    2036:	210b      	movs	r1, #11
    2038:	20d5      	movs	r0, #213	; 0xd5
    203a:	47a0      	blx	r4
    203c:	2088      	movs	r0, #136	; 0x88
    203e:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0C);	LCD_Write_DATA8(0x00);
    2040:	210c      	movs	r1, #12
    2042:	20d5      	movs	r0, #213	; 0xd5
    2044:	47a0      	blx	r4
    2046:	2000      	movs	r0, #0
    2048:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0D);	LCD_Write_DATA8(0xB6);
    204a:	210d      	movs	r1, #13
    204c:	20d5      	movs	r0, #213	; 0xd5
    204e:	47a0      	blx	r4
    2050:	20b6      	movs	r0, #182	; 0xb6
    2052:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0E);	LCD_Write_DATA8(0x00);
    2054:	210e      	movs	r1, #14
    2056:	20d5      	movs	r0, #213	; 0xd5
    2058:	47a0      	blx	r4
    205a:	2000      	movs	r0, #0
    205c:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x0F);	LCD_Write_DATA8(0xF3);
    205e:	210f      	movs	r1, #15
    2060:	20d5      	movs	r0, #213	; 0xd5
    2062:	47a0      	blx	r4
    2064:	20f3      	movs	r0, #243	; 0xf3
    2066:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x10);	LCD_Write_DATA8(0x01);
    2068:	2110      	movs	r1, #16
    206a:	20d5      	movs	r0, #213	; 0xd5
    206c:	47a0      	blx	r4
    206e:	2001      	movs	r0, #1
    2070:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x11);	LCD_Write_DATA8(0x22);
    2072:	2111      	movs	r1, #17
    2074:	20d5      	movs	r0, #213	; 0xd5
    2076:	47a0      	blx	r4
    2078:	2022      	movs	r0, #34	; 0x22
    207a:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x12);	LCD_Write_DATA8(0x01);
    207c:	2112      	movs	r1, #18
    207e:	20d5      	movs	r0, #213	; 0xd5
    2080:	47a0      	blx	r4
    2082:	2001      	movs	r0, #1
    2084:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x13);	LCD_Write_DATA8(0x64);
    2086:	2113      	movs	r1, #19
    2088:	20d5      	movs	r0, #213	; 0xd5
    208a:	47a0      	blx	r4
    208c:	2064      	movs	r0, #100	; 0x64
    208e:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x14);	LCD_Write_DATA8(0x01);
    2090:	2114      	movs	r1, #20
    2092:	20d5      	movs	r0, #213	; 0xd5
    2094:	47a0      	blx	r4
    2096:	2001      	movs	r0, #1
    2098:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x15);	LCD_Write_DATA8(0x92);
    209a:	2115      	movs	r1, #21
    209c:	20d5      	movs	r0, #213	; 0xd5
    209e:	47a0      	blx	r4
    20a0:	2092      	movs	r0, #146	; 0x92
    20a2:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x16);	LCD_Write_DATA8(0x01);
    20a4:	2116      	movs	r1, #22
    20a6:	20d5      	movs	r0, #213	; 0xd5
    20a8:	47a0      	blx	r4
    20aa:	2001      	movs	r0, #1
    20ac:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x17);	LCD_Write_DATA8(0xD4);
    20ae:	2117      	movs	r1, #23
    20b0:	20d5      	movs	r0, #213	; 0xd5
    20b2:	47a0      	blx	r4
    20b4:	20d4      	movs	r0, #212	; 0xd4
    20b6:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x18);	LCD_Write_DATA8(0x02);	
    20b8:	2118      	movs	r1, #24
    20ba:	20d5      	movs	r0, #213	; 0xd5
    20bc:	47a0      	blx	r4
    20be:	2002      	movs	r0, #2
    20c0:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x19);	LCD_Write_DATA8(0x07);
    20c2:	2119      	movs	r1, #25
    20c4:	20d5      	movs	r0, #213	; 0xd5
    20c6:	47a0      	blx	r4
    20c8:	2007      	movs	r0, #7
    20ca:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1A);	LCD_Write_DATA8(0x02);
    20cc:	211a      	movs	r1, #26
    20ce:	20d5      	movs	r0, #213	; 0xd5
    20d0:	47a0      	blx	r4
    20d2:	2002      	movs	r0, #2
    20d4:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1B);	LCD_Write_DATA8(0x08);
    20d6:	211b      	movs	r1, #27
    20d8:	20d5      	movs	r0, #213	; 0xd5
    20da:	47a0      	blx	r4
    20dc:	2008      	movs	r0, #8
    20de:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1C);	LCD_Write_DATA8(0x02);
    20e0:	211c      	movs	r1, #28
    20e2:	20d5      	movs	r0, #213	; 0xd5
    20e4:	47a0      	blx	r4
    20e6:	2002      	movs	r0, #2
    20e8:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1D);	LCD_Write_DATA8(0x34);
    20ea:	211d      	movs	r1, #29
    20ec:	20d5      	movs	r0, #213	; 0xd5
    20ee:	47a0      	blx	r4
    20f0:	2034      	movs	r0, #52	; 0x34
    20f2:	4dfe      	ldr	r5, [pc, #1016]	; (24ec <STACK_SIZE+0x4ec>)
    20f4:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1E);	LCD_Write_DATA8(0x02);
    20f6:	211e      	movs	r1, #30
    20f8:	20d5      	movs	r0, #213	; 0xd5
    20fa:	4cfd      	ldr	r4, [pc, #1012]	; (24f0 <STACK_SIZE+0x4f0>)
    20fc:	47a0      	blx	r4
    20fe:	2002      	movs	r0, #2
    2100:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x1F);	LCD_Write_DATA8(0x5F);
    2102:	211f      	movs	r1, #31
    2104:	20d5      	movs	r0, #213	; 0xd5
    2106:	47a0      	blx	r4
    2108:	205f      	movs	r0, #95	; 0x5f
    210a:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x20);	LCD_Write_DATA8(0x02);
    210c:	2120      	movs	r1, #32
    210e:	20d5      	movs	r0, #213	; 0xd5
    2110:	47a0      	blx	r4
    2112:	2002      	movs	r0, #2
    2114:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x21);	LCD_Write_DATA8(0x78);
    2116:	2121      	movs	r1, #33	; 0x21
    2118:	20d5      	movs	r0, #213	; 0xd5
    211a:	47a0      	blx	r4
    211c:	2078      	movs	r0, #120	; 0x78
    211e:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x22);	LCD_Write_DATA8(0x02);
    2120:	2122      	movs	r1, #34	; 0x22
    2122:	20d5      	movs	r0, #213	; 0xd5
    2124:	47a0      	blx	r4
    2126:	2002      	movs	r0, #2
    2128:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x23);	LCD_Write_DATA8(0x94);
    212a:	2123      	movs	r1, #35	; 0x23
    212c:	20d5      	movs	r0, #213	; 0xd5
    212e:	47a0      	blx	r4
    2130:	2094      	movs	r0, #148	; 0x94
    2132:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x24);	LCD_Write_DATA8(0x02);
    2134:	2124      	movs	r1, #36	; 0x24
    2136:	20d5      	movs	r0, #213	; 0xd5
    2138:	47a0      	blx	r4
    213a:	2002      	movs	r0, #2
    213c:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x25);	LCD_Write_DATA8(0xA6);
    213e:	2125      	movs	r1, #37	; 0x25
    2140:	20d5      	movs	r0, #213	; 0xd5
    2142:	47a0      	blx	r4
    2144:	20a6      	movs	r0, #166	; 0xa6
    2146:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x26);	LCD_Write_DATA8(0x02);
    2148:	2126      	movs	r1, #38	; 0x26
    214a:	20d5      	movs	r0, #213	; 0xd5
    214c:	47a0      	blx	r4
    214e:	2002      	movs	r0, #2
    2150:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x27);	LCD_Write_DATA8(0xBB);
    2152:	2127      	movs	r1, #39	; 0x27
    2154:	20d5      	movs	r0, #213	; 0xd5
    2156:	47a0      	blx	r4
    2158:	20bb      	movs	r0, #187	; 0xbb
    215a:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x28);	LCD_Write_DATA8(0x02); 
    215c:	2128      	movs	r1, #40	; 0x28
    215e:	20d5      	movs	r0, #213	; 0xd5
    2160:	47a0      	blx	r4
    2162:	2002      	movs	r0, #2
    2164:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x29);	LCD_Write_DATA8(0xCA);
    2166:	2129      	movs	r1, #41	; 0x29
    2168:	20d5      	movs	r0, #213	; 0xd5
    216a:	47a0      	blx	r4
    216c:	20ca      	movs	r0, #202	; 0xca
    216e:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2A);	LCD_Write_DATA8(0x02);
    2170:	212a      	movs	r1, #42	; 0x2a
    2172:	20d5      	movs	r0, #213	; 0xd5
    2174:	47a0      	blx	r4
    2176:	2002      	movs	r0, #2
    2178:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2B);	LCD_Write_DATA8(0xDB);
    217a:	212b      	movs	r1, #43	; 0x2b
    217c:	20d5      	movs	r0, #213	; 0xd5
    217e:	47a0      	blx	r4
    2180:	20db      	movs	r0, #219	; 0xdb
    2182:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2C);	LCD_Write_DATA8(0x02);
    2184:	212c      	movs	r1, #44	; 0x2c
    2186:	20d5      	movs	r0, #213	; 0xd5
    2188:	47a0      	blx	r4
    218a:	2002      	movs	r0, #2
    218c:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2D);	LCD_Write_DATA8(0xE8);
    218e:	212d      	movs	r1, #45	; 0x2d
    2190:	20d5      	movs	r0, #213	; 0xd5
    2192:	47a0      	blx	r4
    2194:	20e8      	movs	r0, #232	; 0xe8
    2196:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2E);	LCD_Write_DATA8(0x02);
    2198:	212e      	movs	r1, #46	; 0x2e
    219a:	20d5      	movs	r0, #213	; 0xd5
    219c:	47a0      	blx	r4
    219e:	2002      	movs	r0, #2
    21a0:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x2F);	LCD_Write_DATA8(0xF9);
    21a2:	212f      	movs	r1, #47	; 0x2f
    21a4:	20d5      	movs	r0, #213	; 0xd5
    21a6:	47a0      	blx	r4
    21a8:	20f9      	movs	r0, #249	; 0xf9
    21aa:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x30);	LCD_Write_DATA8(0x03); 
    21ac:	2130      	movs	r1, #48	; 0x30
    21ae:	20d5      	movs	r0, #213	; 0xd5
    21b0:	47a0      	blx	r4
    21b2:	2003      	movs	r0, #3
    21b4:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x31);	LCD_Write_DATA8(0x1F);
    21b6:	2131      	movs	r1, #49	; 0x31
    21b8:	20d5      	movs	r0, #213	; 0xd5
    21ba:	47a0      	blx	r4
    21bc:	201f      	movs	r0, #31
    21be:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x32);	LCD_Write_DATA8(0x03);
    21c0:	2132      	movs	r1, #50	; 0x32
    21c2:	20d5      	movs	r0, #213	; 0xd5
    21c4:	47a0      	blx	r4
    21c6:	2003      	movs	r0, #3
    21c8:	47a8      	blx	r5
	LCD_Write_COM16(0xD5,0x33);	LCD_Write_DATA8(0x7F); 
    21ca:	2133      	movs	r1, #51	; 0x33
    21cc:	20d5      	movs	r0, #213	; 0xd5
    21ce:	47a0      	blx	r4
    21d0:	207f      	movs	r0, #127	; 0x7f
    21d2:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x00);	LCD_Write_DATA8(0x00);
    21d4:	2100      	movs	r1, #0
    21d6:	20d6      	movs	r0, #214	; 0xd6
    21d8:	47a0      	blx	r4
    21da:	2000      	movs	r0, #0
    21dc:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x01);	LCD_Write_DATA8(0x2D);
    21de:	2101      	movs	r1, #1
    21e0:	20d6      	movs	r0, #214	; 0xd6
    21e2:	47a0      	blx	r4
    21e4:	202d      	movs	r0, #45	; 0x2d
    21e6:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x02);	LCD_Write_DATA8(0x00);
    21e8:	2102      	movs	r1, #2
    21ea:	20d6      	movs	r0, #214	; 0xd6
    21ec:	47a0      	blx	r4
    21ee:	2000      	movs	r0, #0
    21f0:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x03);	LCD_Write_DATA8(0x2E);
    21f2:	2103      	movs	r1, #3
    21f4:	20d6      	movs	r0, #214	; 0xd6
    21f6:	47a0      	blx	r4
    21f8:	202e      	movs	r0, #46	; 0x2e
    21fa:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x04);	LCD_Write_DATA8(0x00); 
    21fc:	2104      	movs	r1, #4
    21fe:	20d6      	movs	r0, #214	; 0xd6
    2200:	47a0      	blx	r4
    2202:	2000      	movs	r0, #0
    2204:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x05);	LCD_Write_DATA8(0x32);
    2206:	2105      	movs	r1, #5
    2208:	20d6      	movs	r0, #214	; 0xd6
    220a:	47a0      	blx	r4
    220c:	2032      	movs	r0, #50	; 0x32
    220e:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x06);	LCD_Write_DATA8(0x00);
    2210:	2106      	movs	r1, #6
    2212:	20d6      	movs	r0, #214	; 0xd6
    2214:	47a0      	blx	r4
    2216:	2000      	movs	r0, #0
    2218:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x07);	LCD_Write_DATA8(0x44);
    221a:	2107      	movs	r1, #7
    221c:	20d6      	movs	r0, #214	; 0xd6
    221e:	47a0      	blx	r4
    2220:	2044      	movs	r0, #68	; 0x44
    2222:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x08);	LCD_Write_DATA8(0x00);
    2224:	2108      	movs	r1, #8
    2226:	20d6      	movs	r0, #214	; 0xd6
    2228:	47a0      	blx	r4
    222a:	2000      	movs	r0, #0
    222c:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x09);	LCD_Write_DATA8(0x53);
    222e:	2109      	movs	r1, #9
    2230:	20d6      	movs	r0, #214	; 0xd6
    2232:	47a0      	blx	r4
    2234:	2053      	movs	r0, #83	; 0x53
    2236:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0A);	LCD_Write_DATA8(0x00);
    2238:	210a      	movs	r1, #10
    223a:	20d6      	movs	r0, #214	; 0xd6
    223c:	47a0      	blx	r4
    223e:	2000      	movs	r0, #0
    2240:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0B);	LCD_Write_DATA8(0x88);
    2242:	210b      	movs	r1, #11
    2244:	20d6      	movs	r0, #214	; 0xd6
    2246:	47a0      	blx	r4
    2248:	2088      	movs	r0, #136	; 0x88
    224a:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0C);	LCD_Write_DATA8(0x00);
    224c:	210c      	movs	r1, #12
    224e:	20d6      	movs	r0, #214	; 0xd6
    2250:	47a0      	blx	r4
    2252:	2000      	movs	r0, #0
    2254:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0D);	LCD_Write_DATA8(0xB6);
    2256:	210d      	movs	r1, #13
    2258:	20d6      	movs	r0, #214	; 0xd6
    225a:	47a0      	blx	r4
    225c:	20b6      	movs	r0, #182	; 0xb6
    225e:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0E);	LCD_Write_DATA8(0x00);
    2260:	210e      	movs	r1, #14
    2262:	20d6      	movs	r0, #214	; 0xd6
    2264:	47a0      	blx	r4
    2266:	2000      	movs	r0, #0
    2268:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x0F);	LCD_Write_DATA8(0xF3);
    226a:	210f      	movs	r1, #15
    226c:	20d6      	movs	r0, #214	; 0xd6
    226e:	47a0      	blx	r4
    2270:	20f3      	movs	r0, #243	; 0xf3
    2272:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x10);	LCD_Write_DATA8(0x01);
    2274:	2110      	movs	r1, #16
    2276:	20d6      	movs	r0, #214	; 0xd6
    2278:	47a0      	blx	r4
    227a:	2001      	movs	r0, #1
    227c:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x11);	LCD_Write_DATA8(0x22);
    227e:	2111      	movs	r1, #17
    2280:	20d6      	movs	r0, #214	; 0xd6
    2282:	47a0      	blx	r4
    2284:	2022      	movs	r0, #34	; 0x22
    2286:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x12);	LCD_Write_DATA8(0x01);
    2288:	2112      	movs	r1, #18
    228a:	20d6      	movs	r0, #214	; 0xd6
    228c:	47a0      	blx	r4
    228e:	2001      	movs	r0, #1
    2290:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x13);	LCD_Write_DATA8(0x64);
    2292:	2113      	movs	r1, #19
    2294:	20d6      	movs	r0, #214	; 0xd6
    2296:	47a0      	blx	r4
    2298:	2064      	movs	r0, #100	; 0x64
    229a:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x14);	LCD_Write_DATA8(0x01);
    229c:	2114      	movs	r1, #20
    229e:	20d6      	movs	r0, #214	; 0xd6
    22a0:	47a0      	blx	r4
    22a2:	2001      	movs	r0, #1
    22a4:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x15);	LCD_Write_DATA8(0x92);
    22a6:	2115      	movs	r1, #21
    22a8:	20d6      	movs	r0, #214	; 0xd6
    22aa:	47a0      	blx	r4
    22ac:	2092      	movs	r0, #146	; 0x92
    22ae:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x16);	LCD_Write_DATA8(0x01);
    22b0:	2116      	movs	r1, #22
    22b2:	20d6      	movs	r0, #214	; 0xd6
    22b4:	47a0      	blx	r4
    22b6:	2001      	movs	r0, #1
    22b8:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x17);	LCD_Write_DATA8(0xD4);
    22ba:	2117      	movs	r1, #23
    22bc:	20d6      	movs	r0, #214	; 0xd6
    22be:	47a0      	blx	r4
    22c0:	20d4      	movs	r0, #212	; 0xd4
    22c2:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x18);	LCD_Write_DATA8(0x02);	
    22c4:	2118      	movs	r1, #24
    22c6:	20d6      	movs	r0, #214	; 0xd6
    22c8:	47a0      	blx	r4
    22ca:	2002      	movs	r0, #2
    22cc:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x19);	LCD_Write_DATA8(0x07);
    22ce:	2119      	movs	r1, #25
    22d0:	20d6      	movs	r0, #214	; 0xd6
    22d2:	47a0      	blx	r4
    22d4:	2007      	movs	r0, #7
    22d6:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1A);	LCD_Write_DATA8(0x02);
    22d8:	211a      	movs	r1, #26
    22da:	20d6      	movs	r0, #214	; 0xd6
    22dc:	47a0      	blx	r4
    22de:	2002      	movs	r0, #2
    22e0:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1B);	LCD_Write_DATA8(0x08);
    22e2:	211b      	movs	r1, #27
    22e4:	20d6      	movs	r0, #214	; 0xd6
    22e6:	47a0      	blx	r4
    22e8:	2008      	movs	r0, #8
    22ea:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1C);	LCD_Write_DATA8(0x02);
    22ec:	211c      	movs	r1, #28
    22ee:	20d6      	movs	r0, #214	; 0xd6
    22f0:	47a0      	blx	r4
    22f2:	2002      	movs	r0, #2
    22f4:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1D);	LCD_Write_DATA8(0x34);
    22f6:	211d      	movs	r1, #29
    22f8:	20d6      	movs	r0, #214	; 0xd6
    22fa:	47a0      	blx	r4
    22fc:	2034      	movs	r0, #52	; 0x34
    22fe:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1E);	LCD_Write_DATA8(0x02);
    2300:	211e      	movs	r1, #30
    2302:	20d6      	movs	r0, #214	; 0xd6
    2304:	47a0      	blx	r4
    2306:	2002      	movs	r0, #2
    2308:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x1F);	LCD_Write_DATA8(0x5F);
    230a:	211f      	movs	r1, #31
    230c:	20d6      	movs	r0, #214	; 0xd6
    230e:	47a0      	blx	r4
    2310:	205f      	movs	r0, #95	; 0x5f
    2312:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x20);	LCD_Write_DATA8(0x02);
    2314:	2120      	movs	r1, #32
    2316:	20d6      	movs	r0, #214	; 0xd6
    2318:	47a0      	blx	r4
    231a:	2002      	movs	r0, #2
    231c:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x21);	LCD_Write_DATA8(0x78);
    231e:	2121      	movs	r1, #33	; 0x21
    2320:	20d6      	movs	r0, #214	; 0xd6
    2322:	47a0      	blx	r4
    2324:	2078      	movs	r0, #120	; 0x78
    2326:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x22);	LCD_Write_DATA8(0x02);
    2328:	2122      	movs	r1, #34	; 0x22
    232a:	20d6      	movs	r0, #214	; 0xd6
    232c:	47a0      	blx	r4
    232e:	2002      	movs	r0, #2
    2330:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x23);	LCD_Write_DATA8(0x94);
    2332:	2123      	movs	r1, #35	; 0x23
    2334:	20d6      	movs	r0, #214	; 0xd6
    2336:	47a0      	blx	r4
    2338:	2094      	movs	r0, #148	; 0x94
    233a:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x24);	LCD_Write_DATA8(0x02);
    233c:	2124      	movs	r1, #36	; 0x24
    233e:	20d6      	movs	r0, #214	; 0xd6
    2340:	47a0      	blx	r4
    2342:	2002      	movs	r0, #2
    2344:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x25);	LCD_Write_DATA8(0xA6);
    2346:	2125      	movs	r1, #37	; 0x25
    2348:	20d6      	movs	r0, #214	; 0xd6
    234a:	47a0      	blx	r4
    234c:	20a6      	movs	r0, #166	; 0xa6
    234e:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x26);	LCD_Write_DATA8(0x02);
    2350:	2126      	movs	r1, #38	; 0x26
    2352:	20d6      	movs	r0, #214	; 0xd6
    2354:	47a0      	blx	r4
    2356:	2002      	movs	r0, #2
    2358:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x27);	LCD_Write_DATA8(0xBB);
    235a:	2127      	movs	r1, #39	; 0x27
    235c:	20d6      	movs	r0, #214	; 0xd6
    235e:	47a0      	blx	r4
    2360:	20bb      	movs	r0, #187	; 0xbb
    2362:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x28);	LCD_Write_DATA8(0x02); 
    2364:	2128      	movs	r1, #40	; 0x28
    2366:	20d6      	movs	r0, #214	; 0xd6
    2368:	47a0      	blx	r4
    236a:	2002      	movs	r0, #2
    236c:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x29);	LCD_Write_DATA8(0xCA);
    236e:	2129      	movs	r1, #41	; 0x29
    2370:	20d6      	movs	r0, #214	; 0xd6
    2372:	47a0      	blx	r4
    2374:	20ca      	movs	r0, #202	; 0xca
    2376:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2A);	LCD_Write_DATA8(0x02);
    2378:	212a      	movs	r1, #42	; 0x2a
    237a:	20d6      	movs	r0, #214	; 0xd6
    237c:	47a0      	blx	r4
    237e:	2002      	movs	r0, #2
    2380:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2B);	LCD_Write_DATA8(0xDB);
    2382:	212b      	movs	r1, #43	; 0x2b
    2384:	20d6      	movs	r0, #214	; 0xd6
    2386:	47a0      	blx	r4
    2388:	20db      	movs	r0, #219	; 0xdb
    238a:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2C);	LCD_Write_DATA8(0x02);
    238c:	212c      	movs	r1, #44	; 0x2c
    238e:	20d6      	movs	r0, #214	; 0xd6
    2390:	47a0      	blx	r4
    2392:	2002      	movs	r0, #2
    2394:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2D);	LCD_Write_DATA8(0xE8);
    2396:	212d      	movs	r1, #45	; 0x2d
    2398:	20d6      	movs	r0, #214	; 0xd6
    239a:	47a0      	blx	r4
    239c:	20e8      	movs	r0, #232	; 0xe8
    239e:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2E);	LCD_Write_DATA8(0x02);
    23a0:	212e      	movs	r1, #46	; 0x2e
    23a2:	20d6      	movs	r0, #214	; 0xd6
    23a4:	47a0      	blx	r4
    23a6:	2002      	movs	r0, #2
    23a8:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x2F);	LCD_Write_DATA8(0xF9);
    23aa:	212f      	movs	r1, #47	; 0x2f
    23ac:	20d6      	movs	r0, #214	; 0xd6
    23ae:	47a0      	blx	r4
    23b0:	20f9      	movs	r0, #249	; 0xf9
    23b2:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x30);	LCD_Write_DATA8(0x03); 
    23b4:	2130      	movs	r1, #48	; 0x30
    23b6:	20d6      	movs	r0, #214	; 0xd6
    23b8:	47a0      	blx	r4
    23ba:	2003      	movs	r0, #3
    23bc:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x31);	LCD_Write_DATA8(0x1F);
    23be:	2131      	movs	r1, #49	; 0x31
    23c0:	20d6      	movs	r0, #214	; 0xd6
    23c2:	47a0      	blx	r4
    23c4:	201f      	movs	r0, #31
    23c6:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x32);	LCD_Write_DATA8(0x03);
    23c8:	2132      	movs	r1, #50	; 0x32
    23ca:	20d6      	movs	r0, #214	; 0xd6
    23cc:	47a0      	blx	r4
    23ce:	2003      	movs	r0, #3
    23d0:	47a8      	blx	r5
	LCD_Write_COM16(0xD6,0x33);	LCD_Write_DATA8(0x7F);
    23d2:	2133      	movs	r1, #51	; 0x33
    23d4:	20d6      	movs	r0, #214	; 0xd6
    23d6:	47a0      	blx	r4
    23d8:	207f      	movs	r0, #127	; 0x7f
    23da:	47a8      	blx	r5
	 
	//#LV2 Page 0 enable
	LCD_Write_COM16(0xF0,0x00);	LCD_Write_DATA8(0x55);
    23dc:	2100      	movs	r1, #0
    23de:	20f0      	movs	r0, #240	; 0xf0
    23e0:	47a0      	blx	r4
    23e2:	2055      	movs	r0, #85	; 0x55
    23e4:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x01);	LCD_Write_DATA8(0xAA);
    23e6:	2101      	movs	r1, #1
    23e8:	20f0      	movs	r0, #240	; 0xf0
    23ea:	47a0      	blx	r4
    23ec:	20aa      	movs	r0, #170	; 0xaa
    23ee:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x02);	LCD_Write_DATA8(0x52);
    23f0:	2102      	movs	r1, #2
    23f2:	20f0      	movs	r0, #240	; 0xf0
    23f4:	47a0      	blx	r4
    23f6:	2052      	movs	r0, #82	; 0x52
    23f8:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x03);	LCD_Write_DATA8(0x08);
    23fa:	2103      	movs	r1, #3
    23fc:	20f0      	movs	r0, #240	; 0xf0
    23fe:	47a0      	blx	r4
    2400:	2008      	movs	r0, #8
    2402:	47a8      	blx	r5
	LCD_Write_COM16(0xF0,0x04);	LCD_Write_DATA8(0x00); 
    2404:	2104      	movs	r1, #4
    2406:	20f0      	movs	r0, #240	; 0xf0
    2408:	47a0      	blx	r4
    240a:	2000      	movs	r0, #0
    240c:	47a8      	blx	r5
	
	//#DISPLAY CONTROL
	LCD_Write_COM16(0xB1,0x00);	LCD_Write_DATA8(0xCC);
    240e:	2100      	movs	r1, #0
    2410:	20b1      	movs	r0, #177	; 0xb1
    2412:	47a0      	blx	r4
    2414:	20cc      	movs	r0, #204	; 0xcc
    2416:	47a8      	blx	r5
	LCD_Write_COM16(0xB1,0x01);	LCD_Write_DATA8(0x00); 
    2418:	2101      	movs	r1, #1
    241a:	20b1      	movs	r0, #177	; 0xb1
    241c:	47a0      	blx	r4
    241e:	2000      	movs	r0, #0
    2420:	47a8      	blx	r5
	
	//#SOURCE HOLD TIME
	LCD_Write_COM16(0xB6,0x00);	LCD_Write_DATA8(0x05);
    2422:	2100      	movs	r1, #0
    2424:	20b6      	movs	r0, #182	; 0xb6
    2426:	47a0      	blx	r4
    2428:	2005      	movs	r0, #5
    242a:	47a8      	blx	r5
	
	//Set Gate EQ     
	LCD_Write_COM16(0xB7,0x00);	LCD_Write_DATA8(0x70); 
    242c:	2100      	movs	r1, #0
    242e:	20b7      	movs	r0, #183	; 0xb7
    2430:	47a0      	blx	r4
    2432:	2070      	movs	r0, #112	; 0x70
    2434:	47a8      	blx	r5
	LCD_Write_COM16(0xB7,0x01);	LCD_Write_DATA8(0x70);
    2436:	2101      	movs	r1, #1
    2438:	20b7      	movs	r0, #183	; 0xb7
    243a:	47a0      	blx	r4
    243c:	2070      	movs	r0, #112	; 0x70
    243e:	47a8      	blx	r5
	
	//#Source EQ control (Mode 2)
	LCD_Write_COM16(0xB8,0x00);	LCD_Write_DATA8(0x01);
    2440:	2100      	movs	r1, #0
    2442:	20b8      	movs	r0, #184	; 0xb8
    2444:	47a0      	blx	r4
    2446:	2001      	movs	r0, #1
    2448:	47a8      	blx	r5
	LCD_Write_COM16(0xB8,0x01);	LCD_Write_DATA8(0x03);
    244a:	2101      	movs	r1, #1
    244c:	20b8      	movs	r0, #184	; 0xb8
    244e:	47a0      	blx	r4
    2450:	2003      	movs	r0, #3
    2452:	47a8      	blx	r5
	LCD_Write_COM16(0xB8,0x02);	LCD_Write_DATA8(0x03);
    2454:	2102      	movs	r1, #2
    2456:	20b8      	movs	r0, #184	; 0xb8
    2458:	47a0      	blx	r4
    245a:	2003      	movs	r0, #3
    245c:	47a8      	blx	r5
	LCD_Write_COM16(0xB8,0x03);	LCD_Write_DATA8(0x03);
    245e:	2103      	movs	r1, #3
    2460:	20b8      	movs	r0, #184	; 0xb8
    2462:	47a0      	blx	r4
    2464:	2003      	movs	r0, #3
    2466:	47a8      	blx	r5
	
	//#INVERSION MODE
	LCD_Write_COM16(0xBC,0x00);	LCD_Write_DATA8(0x02);
    2468:	2100      	movs	r1, #0
    246a:	20bc      	movs	r0, #188	; 0xbc
    246c:	47a0      	blx	r4
    246e:	2002      	movs	r0, #2
    2470:	47a8      	blx	r5
	LCD_Write_COM16(0xBC,0x01);	LCD_Write_DATA8(0x00);	
    2472:	2101      	movs	r1, #1
    2474:	20bc      	movs	r0, #188	; 0xbc
    2476:	47a0      	blx	r4
    2478:	2000      	movs	r0, #0
    247a:	47a8      	blx	r5
	LCD_Write_COM16(0xBC,0x02);	LCD_Write_DATA8(0x00); 
    247c:	2102      	movs	r1, #2
    247e:	20bc      	movs	r0, #188	; 0xbc
    2480:	47a0      	blx	r4
    2482:	2000      	movs	r0, #0
    2484:	47a8      	blx	r5
	
	//#Timing control
	LCD_Write_COM16(0xC9,0x00);	LCD_Write_DATA8(0xD0);   
    2486:	2100      	movs	r1, #0
    2488:	20c9      	movs	r0, #201	; 0xc9
    248a:	47a0      	blx	r4
    248c:	20d0      	movs	r0, #208	; 0xd0
    248e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9,0x01);	LCD_Write_DATA8(0x02);
    2490:	2101      	movs	r1, #1
    2492:	20c9      	movs	r0, #201	; 0xc9
    2494:	47a0      	blx	r4
    2496:	2002      	movs	r0, #2
    2498:	47a8      	blx	r5
	LCD_Write_COM16(0xC9,0x02);	LCD_Write_DATA8(0x50);
    249a:	2102      	movs	r1, #2
    249c:	20c9      	movs	r0, #201	; 0xc9
    249e:	47a0      	blx	r4
    24a0:	2050      	movs	r0, #80	; 0x50
    24a2:	47a8      	blx	r5
	LCD_Write_COM16(0xC9,0x03);	LCD_Write_DATA8(0x50); 
    24a4:	2103      	movs	r1, #3
    24a6:	20c9      	movs	r0, #201	; 0xc9
    24a8:	47a0      	blx	r4
    24aa:	2050      	movs	r0, #80	; 0x50
    24ac:	47a8      	blx	r5
	LCD_Write_COM16(0xC9,0x04);	LCD_Write_DATA8(0x50); 
    24ae:	2104      	movs	r1, #4
    24b0:	20c9      	movs	r0, #201	; 0xc9
    24b2:	47a0      	blx	r4
    24b4:	2050      	movs	r0, #80	; 0x50
    24b6:	47a8      	blx	r5
	

   	LCD_Write_COM16(0x35,0x00);   LCD_Write_DATA8(0x00); 
    24b8:	2100      	movs	r1, #0
    24ba:	2035      	movs	r0, #53	; 0x35
    24bc:	47a0      	blx	r4
    24be:	2000      	movs	r0, #0
    24c0:	47a8      	blx	r5


  	LCD_Write_COM16(0x3A,0x00);   LCD_Write_DATA8(0x55);
    24c2:	2100      	movs	r1, #0
    24c4:	203a      	movs	r0, #58	; 0x3a
    24c6:	47a0      	blx	r4
    24c8:	2055      	movs	r0, #85	; 0x55
    24ca:	47a8      	blx	r5

  	LCD_Write_COM16(0x36,0x00);   LCD_Write_DATA8(0x00);   
    24cc:	2100      	movs	r1, #0
    24ce:	2036      	movs	r0, #54	; 0x36
    24d0:	47a0      	blx	r4
    24d2:	2000      	movs	r0, #0
    24d4:	47a8      	blx	r5


  	LCD_Write_COM16(0x11,0x00);   //StartUp  
    24d6:	2100      	movs	r1, #0
    24d8:	2011      	movs	r0, #17
    24da:	47a0      	blx	r4
  
  	delay_ms(120);
    24dc:	2078      	movs	r0, #120	; 0x78
    24de:	4d05      	ldr	r5, [pc, #20]	; (24f4 <STACK_SIZE+0x4f4>)
    24e0:	47a8      	blx	r5

  	LCD_Write_COM16(0x29,0x00);   //Display On  
    24e2:	2100      	movs	r1, #0
    24e4:	2029      	movs	r0, #41	; 0x29
    24e6:	47a0      	blx	r4
	  
   	delay_ms(100);
    24e8:	2064      	movs	r0, #100	; 0x64
    24ea:	e005      	b.n	24f8 <STACK_SIZE+0x4f8>
    24ec:	000013d9 	.word	0x000013d9
    24f0:	00001399 	.word	0x00001399
    24f4:	00000155 	.word	0x00000155
    24f8:	47a8      	blx	r5
	
	REG_PORT_OUTSET1 = LCD_CS;
    24fa:	2280      	movs	r2, #128	; 0x80
    24fc:	03d2      	lsls	r2, r2, #15
    24fe:	4b06      	ldr	r3, [pc, #24]	; (2518 <STACK_SIZE+0x518>)
    2500:	601a      	str	r2, [r3, #0]
	fore_Color_High = ((r&248)|g>>5);
    2502:	23ff      	movs	r3, #255	; 0xff
    2504:	4a05      	ldr	r2, [pc, #20]	; (251c <STACK_SIZE+0x51c>)
    2506:	7013      	strb	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2508:	4a05      	ldr	r2, [pc, #20]	; (2520 <STACK_SIZE+0x520>)
    250a:	7013      	strb	r3, [r2, #0]
	back_Color_High = ((r&248)|g>>5);
    250c:	2300      	movs	r3, #0
    250e:	4a05      	ldr	r2, [pc, #20]	; (2524 <STACK_SIZE+0x524>)
    2510:	7013      	strb	r3, [r2, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    2512:	4a05      	ldr	r2, [pc, #20]	; (2528 <STACK_SIZE+0x528>)
    2514:	7013      	strb	r3, [r2, #0]
	
	setColorRGB(255, 255, 255);
	setBackColorRGB(0, 0, 0);
	
}
    2516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2518:	41004498 	.word	0x41004498
    251c:	20000125 	.word	0x20000125
    2520:	20000126 	.word	0x20000126
    2524:	20000127 	.word	0x20000127
    2528:	20000124 	.word	0x20000124

0000252c <main>:
{
    252c:	b5f0      	push	{r4, r5, r6, r7, lr}
    252e:	46de      	mov	lr, fp
    2530:	4657      	mov	r7, sl
    2532:	464e      	mov	r6, r9
    2534:	4645      	mov	r5, r8
    2536:	b5e0      	push	{r5, r6, r7, lr}
    2538:	b083      	sub	sp, #12
	system_init();
    253a:	4b86      	ldr	r3, [pc, #536]	; (2754 <main+0x228>)
    253c:	4798      	blx	r3
	delay_init();
    253e:	4b86      	ldr	r3, [pc, #536]	; (2758 <main+0x22c>)
    2540:	4798      	blx	r3
	srand(chip_Serial_Number);
    2542:	2040      	movs	r0, #64	; 0x40
    2544:	4b85      	ldr	r3, [pc, #532]	; (275c <main+0x230>)
    2546:	4798      	blx	r3
	configure_usart();
    2548:	4b85      	ldr	r3, [pc, #532]	; (2760 <main+0x234>)
    254a:	4798      	blx	r3
	REG_PORT_DIRSET1 = 0x0000ffff;		//this is the LCD data bus, PB00 - PB15
    254c:	4b85      	ldr	r3, [pc, #532]	; (2764 <main+0x238>)
    254e:	4a86      	ldr	r2, [pc, #536]	; (2768 <main+0x23c>)
    2550:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB00;
    2552:	2701      	movs	r7, #1
    2554:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB01;
    2556:	2602      	movs	r6, #2
    2558:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB02;
    255a:	2504      	movs	r5, #4
    255c:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB03;
    255e:	2408      	movs	r4, #8
    2560:	601c      	str	r4, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB04;
    2562:	2010      	movs	r0, #16
    2564:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB05;
    2566:	2120      	movs	r1, #32
    2568:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB06;
    256a:	2240      	movs	r2, #64	; 0x40
    256c:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB07;
    256e:	3240      	adds	r2, #64	; 0x40
    2570:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB08;
    2572:	3280      	adds	r2, #128	; 0x80
    2574:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB09;
    2576:	3201      	adds	r2, #1
    2578:	32ff      	adds	r2, #255	; 0xff
    257a:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB10;
    257c:	2280      	movs	r2, #128	; 0x80
    257e:	00d2      	lsls	r2, r2, #3
    2580:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB11;
    2582:	2280      	movs	r2, #128	; 0x80
    2584:	0112      	lsls	r2, r2, #4
    2586:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB12;
    2588:	2280      	movs	r2, #128	; 0x80
    258a:	0152      	lsls	r2, r2, #5
    258c:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB13;
    258e:	2280      	movs	r2, #128	; 0x80
    2590:	0192      	lsls	r2, r2, #6
    2592:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB14;
    2594:	2280      	movs	r2, #128	; 0x80
    2596:	01d2      	lsls	r2, r2, #7
    2598:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = PORT_PB15;
    259a:	2280      	movs	r2, #128	; 0x80
    259c:	0212      	lsls	r2, r2, #8
    259e:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    25a0:	2280      	movs	r2, #128	; 0x80
    25a2:	05d2      	lsls	r2, r2, #23
    25a4:	4693      	mov	fp, r2
    25a6:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    25a8:	2280      	movs	r2, #128	; 0x80
    25aa:	03d2      	lsls	r2, r2, #15
    25ac:	4692      	mov	sl, r2
    25ae:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    25b0:	2280      	movs	r2, #128	; 0x80
    25b2:	0292      	lsls	r2, r2, #10
    25b4:	4691      	mov	r9, r2
    25b6:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    25b8:	2280      	movs	r2, #128	; 0x80
    25ba:	0412      	lsls	r2, r2, #16
    25bc:	4690      	mov	r8, r2
    25be:	601a      	str	r2, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    25c0:	2280      	movs	r2, #128	; 0x80
    25c2:	0252      	lsls	r2, r2, #9
    25c4:	4694      	mov	ip, r2
    25c6:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    25c8:	4b68      	ldr	r3, [pc, #416]	; (276c <main+0x240>)
    25ca:	465a      	mov	r2, fp
    25cc:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    25ce:	4652      	mov	r2, sl
    25d0:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    25d2:	464a      	mov	r2, r9
    25d4:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    25d6:	4642      	mov	r2, r8
    25d8:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    25da:	4662      	mov	r2, ip
    25dc:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB00;
    25de:	601f      	str	r7, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB01;
    25e0:	601e      	str	r6, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB02;
    25e2:	601d      	str	r5, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB03;
    25e4:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB04;
    25e6:	6018      	str	r0, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB05;
    25e8:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB06;
    25ea:	2240      	movs	r2, #64	; 0x40
    25ec:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB07;
    25ee:	3240      	adds	r2, #64	; 0x40
    25f0:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB08;
    25f2:	3280      	adds	r2, #128	; 0x80
    25f4:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB09;
    25f6:	3201      	adds	r2, #1
    25f8:	32ff      	adds	r2, #255	; 0xff
    25fa:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB10;
    25fc:	2280      	movs	r2, #128	; 0x80
    25fe:	00d2      	lsls	r2, r2, #3
    2600:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB11;
    2602:	2280      	movs	r2, #128	; 0x80
    2604:	0112      	lsls	r2, r2, #4
    2606:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB12;
    2608:	2280      	movs	r2, #128	; 0x80
    260a:	0152      	lsls	r2, r2, #5
    260c:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB13;
    260e:	2280      	movs	r2, #128	; 0x80
    2610:	0192      	lsls	r2, r2, #6
    2612:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB14;
    2614:	2280      	movs	r2, #128	; 0x80
    2616:	01d2      	lsls	r2, r2, #7
    2618:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = PORT_PB15;
    261a:	2280      	movs	r2, #128	; 0x80
    261c:	0212      	lsls	r2, r2, #8
    261e:	601a      	str	r2, [r3, #0]
	InitLCD();
    2620:	4b53      	ldr	r3, [pc, #332]	; (2770 <main+0x244>)
    2622:	4798      	blx	r3
    2624:	e007      	b.n	2636 <main+0x10a>
			delay_ms(1000);
    2626:	20fa      	movs	r0, #250	; 0xfa
    2628:	0080      	lsls	r0, r0, #2
    262a:	4b52      	ldr	r3, [pc, #328]	; (2774 <main+0x248>)
    262c:	4798      	blx	r3
	} else {
		port_base->OUTCLR.reg = pin_mask;
    262e:	2280      	movs	r2, #128	; 0x80
    2630:	05d2      	lsls	r2, r2, #23
    2632:	4b51      	ldr	r3, [pc, #324]	; (2778 <main+0x24c>)
    2634:	615a      	str	r2, [r3, #20]
		clrScr();
    2636:	4b51      	ldr	r3, [pc, #324]	; (277c <main+0x250>)
    2638:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
    263a:	4f51      	ldr	r7, [pc, #324]	; (2780 <main+0x254>)
    263c:	25f8      	movs	r5, #248	; 0xf8
    263e:	703d      	strb	r5, [r7, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2640:	4e50      	ldr	r6, [pc, #320]	; (2784 <main+0x258>)
    2642:	2300      	movs	r3, #0
    2644:	7033      	strb	r3, [r6, #0]
		fillRect(0,0,799,479);
    2646:	23e0      	movs	r3, #224	; 0xe0
    2648:	33ff      	adds	r3, #255	; 0xff
    264a:	4a4f      	ldr	r2, [pc, #316]	; (2788 <main+0x25c>)
    264c:	2100      	movs	r1, #0
    264e:	2000      	movs	r0, #0
    2650:	4c4e      	ldr	r4, [pc, #312]	; (278c <main+0x260>)
    2652:	47a0      	blx	r4
		delay_ms(500);
    2654:	20fa      	movs	r0, #250	; 0xfa
    2656:	0040      	lsls	r0, r0, #1
    2658:	4b46      	ldr	r3, [pc, #280]	; (2774 <main+0x248>)
    265a:	469a      	mov	sl, r3
    265c:	4798      	blx	r3
	fore_Color_High = ((r&248)|g>>5);
    265e:	2307      	movs	r3, #7
    2660:	703b      	strb	r3, [r7, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2662:	33d9      	adds	r3, #217	; 0xd9
    2664:	469b      	mov	fp, r3
    2666:	7033      	strb	r3, [r6, #0]
	back_Color_High = ((r&248)|g>>5);
    2668:	4b49      	ldr	r3, [pc, #292]	; (2790 <main+0x264>)
    266a:	4699      	mov	r9, r3
    266c:	701d      	strb	r5, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    266e:	4d49      	ldr	r5, [pc, #292]	; (2794 <main+0x268>)
    2670:	2300      	movs	r3, #0
    2672:	702b      	strb	r3, [r5, #0]
		fillRect(0, 0, 799, 479);
    2674:	23e0      	movs	r3, #224	; 0xe0
    2676:	33ff      	adds	r3, #255	; 0xff
    2678:	4a43      	ldr	r2, [pc, #268]	; (2788 <main+0x25c>)
    267a:	2100      	movs	r1, #0
    267c:	2000      	movs	r0, #0
    267e:	47a0      	blx	r4
		delay_ms(500);
    2680:	20fa      	movs	r0, #250	; 0xfa
    2682:	0040      	lsls	r0, r0, #1
    2684:	47d0      	blx	sl
	fore_Color_High = ((r&248)|g>>5);
    2686:	2300      	movs	r3, #0
    2688:	703b      	strb	r3, [r7, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    268a:	231f      	movs	r3, #31
    268c:	7033      	strb	r3, [r6, #0]
	back_Color_High = ((r&248)|g>>5);
    268e:	464b      	mov	r3, r9
    2690:	22ff      	movs	r2, #255	; 0xff
    2692:	701a      	strb	r2, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    2694:	465b      	mov	r3, fp
    2696:	702b      	strb	r3, [r5, #0]
		fillRect(0, 0, 799, 479);
    2698:	23e0      	movs	r3, #224	; 0xe0
    269a:	33ff      	adds	r3, #255	; 0xff
    269c:	4a3a      	ldr	r2, [pc, #232]	; (2788 <main+0x25c>)
    269e:	2100      	movs	r1, #0
    26a0:	2000      	movs	r0, #0
    26a2:	47a0      	blx	r4
		delay_ms(500);
    26a4:	20fa      	movs	r0, #250	; 0xfa
    26a6:	0040      	lsls	r0, r0, #1
    26a8:	47d0      	blx	sl
	fore_Color_High = ((r&248)|g>>5);
    26aa:	2300      	movs	r3, #0
    26ac:	703b      	strb	r3, [r7, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    26ae:	2300      	movs	r3, #0
    26b0:	7033      	strb	r3, [r6, #0]
	back_Color_High = ((r&248)|g>>5);
    26b2:	464b      	mov	r3, r9
    26b4:	2200      	movs	r2, #0
    26b6:	701a      	strb	r2, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    26b8:	2300      	movs	r3, #0
    26ba:	702b      	strb	r3, [r5, #0]
		fillRect(0, 0, 799, 479);
    26bc:	23e0      	movs	r3, #224	; 0xe0
    26be:	33ff      	adds	r3, #255	; 0xff
    26c0:	4a31      	ldr	r2, [pc, #196]	; (2788 <main+0x25c>)
    26c2:	2100      	movs	r1, #0
    26c4:	2000      	movs	r0, #0
    26c6:	47a0      	blx	r4
    26c8:	4f33      	ldr	r7, [pc, #204]	; (2798 <main+0x26c>)
			setColorRGB((rand() % 255),(rand() % 255),(rand() % 255));
    26ca:	4e34      	ldr	r6, [pc, #208]	; (279c <main+0x270>)
    26cc:	4d34      	ldr	r5, [pc, #208]	; (27a0 <main+0x274>)
	fore_Color_High = ((r&248)|g>>5);
    26ce:	4b2c      	ldr	r3, [pc, #176]	; (2780 <main+0x254>)
    26d0:	4698      	mov	r8, r3
			setColorRGB((rand() % 255),(rand() % 255),(rand() % 255));
    26d2:	47b0      	blx	r6
    26d4:	9000      	str	r0, [sp, #0]
    26d6:	47b0      	blx	r6
    26d8:	21ff      	movs	r1, #255	; 0xff
    26da:	47a8      	blx	r5
    26dc:	000c      	movs	r4, r1
    26de:	47b0      	blx	r6
    26e0:	9001      	str	r0, [sp, #4]
    26e2:	21ff      	movs	r1, #255	; 0xff
    26e4:	9800      	ldr	r0, [sp, #0]
    26e6:	47a8      	blx	r5
	fore_Color_High = ((r&248)|g>>5);
    26e8:	2307      	movs	r3, #7
    26ea:	4399      	bics	r1, r3
    26ec:	b2e3      	uxtb	r3, r4
    26ee:	095b      	lsrs	r3, r3, #5
    26f0:	4319      	orrs	r1, r3
    26f2:	4643      	mov	r3, r8
    26f4:	7019      	strb	r1, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    26f6:	00e4      	lsls	r4, r4, #3
    26f8:	21ff      	movs	r1, #255	; 0xff
    26fa:	00c9      	lsls	r1, r1, #3
    26fc:	400c      	ands	r4, r1
    26fe:	231f      	movs	r3, #31
    2700:	439c      	bics	r4, r3
			setColorRGB((rand() % 255),(rand() % 255),(rand() % 255));
    2702:	21ff      	movs	r1, #255	; 0xff
    2704:	9801      	ldr	r0, [sp, #4]
    2706:	47a8      	blx	r5
	fore_Color_Low = ((g&28)<<3|b>>3);
    2708:	b2c9      	uxtb	r1, r1
    270a:	08c9      	lsrs	r1, r1, #3
    270c:	4321      	orrs	r1, r4
    270e:	4b1d      	ldr	r3, [pc, #116]	; (2784 <main+0x258>)
    2710:	7019      	strb	r1, [r3, #0]
			drawPixel((rand()%800), (rand()%480));
    2712:	47b0      	blx	r6
    2714:	9000      	str	r0, [sp, #0]
    2716:	47b0      	blx	r6
    2718:	21f0      	movs	r1, #240	; 0xf0
    271a:	0049      	lsls	r1, r1, #1
    271c:	47a8      	blx	r5
    271e:	000c      	movs	r4, r1
    2720:	21c8      	movs	r1, #200	; 0xc8
    2722:	0089      	lsls	r1, r1, #2
    2724:	9800      	ldr	r0, [sp, #0]
    2726:	47a8      	blx	r5
    2728:	0008      	movs	r0, r1
    272a:	0021      	movs	r1, r4
    272c:	4b1d      	ldr	r3, [pc, #116]	; (27a4 <main+0x278>)
    272e:	4798      	blx	r3
    2730:	3f01      	subs	r7, #1
		for(int i = 0; i<100000; i++)
    2732:	2f00      	cmp	r7, #0
    2734:	d1cd      	bne.n	26d2 <main+0x1a6>
		delay_ms(1000);
    2736:	20fa      	movs	r0, #250	; 0xfa
    2738:	0080      	lsls	r0, r0, #2
    273a:	4b0e      	ldr	r3, [pc, #56]	; (2774 <main+0x248>)
    273c:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    273e:	4b1a      	ldr	r3, [pc, #104]	; (27a8 <main+0x27c>)
    2740:	6a1b      	ldr	r3, [r3, #32]
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    2742:	041b      	lsls	r3, r3, #16
    2744:	d400      	bmi.n	2748 <main+0x21c>
    2746:	e76e      	b.n	2626 <main+0xfa>
		port_base->OUTSET.reg = pin_mask;
    2748:	2280      	movs	r2, #128	; 0x80
    274a:	05d2      	lsls	r2, r2, #23
    274c:	4b0a      	ldr	r3, [pc, #40]	; (2778 <main+0x24c>)
    274e:	619a      	str	r2, [r3, #24]
    2750:	e771      	b.n	2636 <main+0x10a>
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	000010d5 	.word	0x000010d5
    2758:	00000115 	.word	0x00000115
    275c:	00002b35 	.word	0x00002b35
    2760:	0000120d 	.word	0x0000120d
    2764:	41004488 	.word	0x41004488
    2768:	0000ffff 	.word	0x0000ffff
    276c:	41004494 	.word	0x41004494
    2770:	00001591 	.word	0x00001591
    2774:	00000155 	.word	0x00000155
    2778:	41004480 	.word	0x41004480
    277c:	0000152d 	.word	0x0000152d
    2780:	20000125 	.word	0x20000125
    2784:	20000126 	.word	0x20000126
    2788:	0000031f 	.word	0x0000031f
    278c:	0000147d 	.word	0x0000147d
    2790:	20000127 	.word	0x20000127
    2794:	20000124 	.word	0x20000124
    2798:	000186a0 	.word	0x000186a0
    279c:	00002b91 	.word	0x00002b91
    27a0:	00002a8d 	.word	0x00002a8d
    27a4:	00001545 	.word	0x00001545
    27a8:	41004400 	.word	0x41004400

000027ac <__udivsi3>:
    27ac:	2200      	movs	r2, #0
    27ae:	0843      	lsrs	r3, r0, #1
    27b0:	428b      	cmp	r3, r1
    27b2:	d374      	bcc.n	289e <__udivsi3+0xf2>
    27b4:	0903      	lsrs	r3, r0, #4
    27b6:	428b      	cmp	r3, r1
    27b8:	d35f      	bcc.n	287a <__udivsi3+0xce>
    27ba:	0a03      	lsrs	r3, r0, #8
    27bc:	428b      	cmp	r3, r1
    27be:	d344      	bcc.n	284a <__udivsi3+0x9e>
    27c0:	0b03      	lsrs	r3, r0, #12
    27c2:	428b      	cmp	r3, r1
    27c4:	d328      	bcc.n	2818 <__udivsi3+0x6c>
    27c6:	0c03      	lsrs	r3, r0, #16
    27c8:	428b      	cmp	r3, r1
    27ca:	d30d      	bcc.n	27e8 <__udivsi3+0x3c>
    27cc:	22ff      	movs	r2, #255	; 0xff
    27ce:	0209      	lsls	r1, r1, #8
    27d0:	ba12      	rev	r2, r2
    27d2:	0c03      	lsrs	r3, r0, #16
    27d4:	428b      	cmp	r3, r1
    27d6:	d302      	bcc.n	27de <__udivsi3+0x32>
    27d8:	1212      	asrs	r2, r2, #8
    27da:	0209      	lsls	r1, r1, #8
    27dc:	d065      	beq.n	28aa <__udivsi3+0xfe>
    27de:	0b03      	lsrs	r3, r0, #12
    27e0:	428b      	cmp	r3, r1
    27e2:	d319      	bcc.n	2818 <__udivsi3+0x6c>
    27e4:	e000      	b.n	27e8 <__udivsi3+0x3c>
    27e6:	0a09      	lsrs	r1, r1, #8
    27e8:	0bc3      	lsrs	r3, r0, #15
    27ea:	428b      	cmp	r3, r1
    27ec:	d301      	bcc.n	27f2 <__udivsi3+0x46>
    27ee:	03cb      	lsls	r3, r1, #15
    27f0:	1ac0      	subs	r0, r0, r3
    27f2:	4152      	adcs	r2, r2
    27f4:	0b83      	lsrs	r3, r0, #14
    27f6:	428b      	cmp	r3, r1
    27f8:	d301      	bcc.n	27fe <__udivsi3+0x52>
    27fa:	038b      	lsls	r3, r1, #14
    27fc:	1ac0      	subs	r0, r0, r3
    27fe:	4152      	adcs	r2, r2
    2800:	0b43      	lsrs	r3, r0, #13
    2802:	428b      	cmp	r3, r1
    2804:	d301      	bcc.n	280a <__udivsi3+0x5e>
    2806:	034b      	lsls	r3, r1, #13
    2808:	1ac0      	subs	r0, r0, r3
    280a:	4152      	adcs	r2, r2
    280c:	0b03      	lsrs	r3, r0, #12
    280e:	428b      	cmp	r3, r1
    2810:	d301      	bcc.n	2816 <__udivsi3+0x6a>
    2812:	030b      	lsls	r3, r1, #12
    2814:	1ac0      	subs	r0, r0, r3
    2816:	4152      	adcs	r2, r2
    2818:	0ac3      	lsrs	r3, r0, #11
    281a:	428b      	cmp	r3, r1
    281c:	d301      	bcc.n	2822 <__udivsi3+0x76>
    281e:	02cb      	lsls	r3, r1, #11
    2820:	1ac0      	subs	r0, r0, r3
    2822:	4152      	adcs	r2, r2
    2824:	0a83      	lsrs	r3, r0, #10
    2826:	428b      	cmp	r3, r1
    2828:	d301      	bcc.n	282e <__udivsi3+0x82>
    282a:	028b      	lsls	r3, r1, #10
    282c:	1ac0      	subs	r0, r0, r3
    282e:	4152      	adcs	r2, r2
    2830:	0a43      	lsrs	r3, r0, #9
    2832:	428b      	cmp	r3, r1
    2834:	d301      	bcc.n	283a <__udivsi3+0x8e>
    2836:	024b      	lsls	r3, r1, #9
    2838:	1ac0      	subs	r0, r0, r3
    283a:	4152      	adcs	r2, r2
    283c:	0a03      	lsrs	r3, r0, #8
    283e:	428b      	cmp	r3, r1
    2840:	d301      	bcc.n	2846 <__udivsi3+0x9a>
    2842:	020b      	lsls	r3, r1, #8
    2844:	1ac0      	subs	r0, r0, r3
    2846:	4152      	adcs	r2, r2
    2848:	d2cd      	bcs.n	27e6 <__udivsi3+0x3a>
    284a:	09c3      	lsrs	r3, r0, #7
    284c:	428b      	cmp	r3, r1
    284e:	d301      	bcc.n	2854 <__udivsi3+0xa8>
    2850:	01cb      	lsls	r3, r1, #7
    2852:	1ac0      	subs	r0, r0, r3
    2854:	4152      	adcs	r2, r2
    2856:	0983      	lsrs	r3, r0, #6
    2858:	428b      	cmp	r3, r1
    285a:	d301      	bcc.n	2860 <__udivsi3+0xb4>
    285c:	018b      	lsls	r3, r1, #6
    285e:	1ac0      	subs	r0, r0, r3
    2860:	4152      	adcs	r2, r2
    2862:	0943      	lsrs	r3, r0, #5
    2864:	428b      	cmp	r3, r1
    2866:	d301      	bcc.n	286c <__udivsi3+0xc0>
    2868:	014b      	lsls	r3, r1, #5
    286a:	1ac0      	subs	r0, r0, r3
    286c:	4152      	adcs	r2, r2
    286e:	0903      	lsrs	r3, r0, #4
    2870:	428b      	cmp	r3, r1
    2872:	d301      	bcc.n	2878 <__udivsi3+0xcc>
    2874:	010b      	lsls	r3, r1, #4
    2876:	1ac0      	subs	r0, r0, r3
    2878:	4152      	adcs	r2, r2
    287a:	08c3      	lsrs	r3, r0, #3
    287c:	428b      	cmp	r3, r1
    287e:	d301      	bcc.n	2884 <__udivsi3+0xd8>
    2880:	00cb      	lsls	r3, r1, #3
    2882:	1ac0      	subs	r0, r0, r3
    2884:	4152      	adcs	r2, r2
    2886:	0883      	lsrs	r3, r0, #2
    2888:	428b      	cmp	r3, r1
    288a:	d301      	bcc.n	2890 <__udivsi3+0xe4>
    288c:	008b      	lsls	r3, r1, #2
    288e:	1ac0      	subs	r0, r0, r3
    2890:	4152      	adcs	r2, r2
    2892:	0843      	lsrs	r3, r0, #1
    2894:	428b      	cmp	r3, r1
    2896:	d301      	bcc.n	289c <__udivsi3+0xf0>
    2898:	004b      	lsls	r3, r1, #1
    289a:	1ac0      	subs	r0, r0, r3
    289c:	4152      	adcs	r2, r2
    289e:	1a41      	subs	r1, r0, r1
    28a0:	d200      	bcs.n	28a4 <__udivsi3+0xf8>
    28a2:	4601      	mov	r1, r0
    28a4:	4152      	adcs	r2, r2
    28a6:	4610      	mov	r0, r2
    28a8:	4770      	bx	lr
    28aa:	e7ff      	b.n	28ac <__udivsi3+0x100>
    28ac:	b501      	push	{r0, lr}
    28ae:	2000      	movs	r0, #0
    28b0:	f000 f8f0 	bl	2a94 <__aeabi_idiv0>
    28b4:	bd02      	pop	{r1, pc}
    28b6:	46c0      	nop			; (mov r8, r8)

000028b8 <__aeabi_uidivmod>:
    28b8:	2900      	cmp	r1, #0
    28ba:	d0f7      	beq.n	28ac <__udivsi3+0x100>
    28bc:	e776      	b.n	27ac <__udivsi3>
    28be:	4770      	bx	lr

000028c0 <__divsi3>:
    28c0:	4603      	mov	r3, r0
    28c2:	430b      	orrs	r3, r1
    28c4:	d47f      	bmi.n	29c6 <__divsi3+0x106>
    28c6:	2200      	movs	r2, #0
    28c8:	0843      	lsrs	r3, r0, #1
    28ca:	428b      	cmp	r3, r1
    28cc:	d374      	bcc.n	29b8 <__divsi3+0xf8>
    28ce:	0903      	lsrs	r3, r0, #4
    28d0:	428b      	cmp	r3, r1
    28d2:	d35f      	bcc.n	2994 <__divsi3+0xd4>
    28d4:	0a03      	lsrs	r3, r0, #8
    28d6:	428b      	cmp	r3, r1
    28d8:	d344      	bcc.n	2964 <__divsi3+0xa4>
    28da:	0b03      	lsrs	r3, r0, #12
    28dc:	428b      	cmp	r3, r1
    28de:	d328      	bcc.n	2932 <__divsi3+0x72>
    28e0:	0c03      	lsrs	r3, r0, #16
    28e2:	428b      	cmp	r3, r1
    28e4:	d30d      	bcc.n	2902 <__divsi3+0x42>
    28e6:	22ff      	movs	r2, #255	; 0xff
    28e8:	0209      	lsls	r1, r1, #8
    28ea:	ba12      	rev	r2, r2
    28ec:	0c03      	lsrs	r3, r0, #16
    28ee:	428b      	cmp	r3, r1
    28f0:	d302      	bcc.n	28f8 <__divsi3+0x38>
    28f2:	1212      	asrs	r2, r2, #8
    28f4:	0209      	lsls	r1, r1, #8
    28f6:	d065      	beq.n	29c4 <__divsi3+0x104>
    28f8:	0b03      	lsrs	r3, r0, #12
    28fa:	428b      	cmp	r3, r1
    28fc:	d319      	bcc.n	2932 <__divsi3+0x72>
    28fe:	e000      	b.n	2902 <__divsi3+0x42>
    2900:	0a09      	lsrs	r1, r1, #8
    2902:	0bc3      	lsrs	r3, r0, #15
    2904:	428b      	cmp	r3, r1
    2906:	d301      	bcc.n	290c <__divsi3+0x4c>
    2908:	03cb      	lsls	r3, r1, #15
    290a:	1ac0      	subs	r0, r0, r3
    290c:	4152      	adcs	r2, r2
    290e:	0b83      	lsrs	r3, r0, #14
    2910:	428b      	cmp	r3, r1
    2912:	d301      	bcc.n	2918 <__divsi3+0x58>
    2914:	038b      	lsls	r3, r1, #14
    2916:	1ac0      	subs	r0, r0, r3
    2918:	4152      	adcs	r2, r2
    291a:	0b43      	lsrs	r3, r0, #13
    291c:	428b      	cmp	r3, r1
    291e:	d301      	bcc.n	2924 <__divsi3+0x64>
    2920:	034b      	lsls	r3, r1, #13
    2922:	1ac0      	subs	r0, r0, r3
    2924:	4152      	adcs	r2, r2
    2926:	0b03      	lsrs	r3, r0, #12
    2928:	428b      	cmp	r3, r1
    292a:	d301      	bcc.n	2930 <__divsi3+0x70>
    292c:	030b      	lsls	r3, r1, #12
    292e:	1ac0      	subs	r0, r0, r3
    2930:	4152      	adcs	r2, r2
    2932:	0ac3      	lsrs	r3, r0, #11
    2934:	428b      	cmp	r3, r1
    2936:	d301      	bcc.n	293c <__divsi3+0x7c>
    2938:	02cb      	lsls	r3, r1, #11
    293a:	1ac0      	subs	r0, r0, r3
    293c:	4152      	adcs	r2, r2
    293e:	0a83      	lsrs	r3, r0, #10
    2940:	428b      	cmp	r3, r1
    2942:	d301      	bcc.n	2948 <__divsi3+0x88>
    2944:	028b      	lsls	r3, r1, #10
    2946:	1ac0      	subs	r0, r0, r3
    2948:	4152      	adcs	r2, r2
    294a:	0a43      	lsrs	r3, r0, #9
    294c:	428b      	cmp	r3, r1
    294e:	d301      	bcc.n	2954 <__divsi3+0x94>
    2950:	024b      	lsls	r3, r1, #9
    2952:	1ac0      	subs	r0, r0, r3
    2954:	4152      	adcs	r2, r2
    2956:	0a03      	lsrs	r3, r0, #8
    2958:	428b      	cmp	r3, r1
    295a:	d301      	bcc.n	2960 <__divsi3+0xa0>
    295c:	020b      	lsls	r3, r1, #8
    295e:	1ac0      	subs	r0, r0, r3
    2960:	4152      	adcs	r2, r2
    2962:	d2cd      	bcs.n	2900 <__divsi3+0x40>
    2964:	09c3      	lsrs	r3, r0, #7
    2966:	428b      	cmp	r3, r1
    2968:	d301      	bcc.n	296e <__divsi3+0xae>
    296a:	01cb      	lsls	r3, r1, #7
    296c:	1ac0      	subs	r0, r0, r3
    296e:	4152      	adcs	r2, r2
    2970:	0983      	lsrs	r3, r0, #6
    2972:	428b      	cmp	r3, r1
    2974:	d301      	bcc.n	297a <__divsi3+0xba>
    2976:	018b      	lsls	r3, r1, #6
    2978:	1ac0      	subs	r0, r0, r3
    297a:	4152      	adcs	r2, r2
    297c:	0943      	lsrs	r3, r0, #5
    297e:	428b      	cmp	r3, r1
    2980:	d301      	bcc.n	2986 <__divsi3+0xc6>
    2982:	014b      	lsls	r3, r1, #5
    2984:	1ac0      	subs	r0, r0, r3
    2986:	4152      	adcs	r2, r2
    2988:	0903      	lsrs	r3, r0, #4
    298a:	428b      	cmp	r3, r1
    298c:	d301      	bcc.n	2992 <__divsi3+0xd2>
    298e:	010b      	lsls	r3, r1, #4
    2990:	1ac0      	subs	r0, r0, r3
    2992:	4152      	adcs	r2, r2
    2994:	08c3      	lsrs	r3, r0, #3
    2996:	428b      	cmp	r3, r1
    2998:	d301      	bcc.n	299e <__divsi3+0xde>
    299a:	00cb      	lsls	r3, r1, #3
    299c:	1ac0      	subs	r0, r0, r3
    299e:	4152      	adcs	r2, r2
    29a0:	0883      	lsrs	r3, r0, #2
    29a2:	428b      	cmp	r3, r1
    29a4:	d301      	bcc.n	29aa <__divsi3+0xea>
    29a6:	008b      	lsls	r3, r1, #2
    29a8:	1ac0      	subs	r0, r0, r3
    29aa:	4152      	adcs	r2, r2
    29ac:	0843      	lsrs	r3, r0, #1
    29ae:	428b      	cmp	r3, r1
    29b0:	d301      	bcc.n	29b6 <__divsi3+0xf6>
    29b2:	004b      	lsls	r3, r1, #1
    29b4:	1ac0      	subs	r0, r0, r3
    29b6:	4152      	adcs	r2, r2
    29b8:	1a41      	subs	r1, r0, r1
    29ba:	d200      	bcs.n	29be <__divsi3+0xfe>
    29bc:	4601      	mov	r1, r0
    29be:	4152      	adcs	r2, r2
    29c0:	4610      	mov	r0, r2
    29c2:	4770      	bx	lr
    29c4:	e05d      	b.n	2a82 <__divsi3+0x1c2>
    29c6:	0fca      	lsrs	r2, r1, #31
    29c8:	d000      	beq.n	29cc <__divsi3+0x10c>
    29ca:	4249      	negs	r1, r1
    29cc:	1003      	asrs	r3, r0, #32
    29ce:	d300      	bcc.n	29d2 <__divsi3+0x112>
    29d0:	4240      	negs	r0, r0
    29d2:	4053      	eors	r3, r2
    29d4:	2200      	movs	r2, #0
    29d6:	469c      	mov	ip, r3
    29d8:	0903      	lsrs	r3, r0, #4
    29da:	428b      	cmp	r3, r1
    29dc:	d32d      	bcc.n	2a3a <__divsi3+0x17a>
    29de:	0a03      	lsrs	r3, r0, #8
    29e0:	428b      	cmp	r3, r1
    29e2:	d312      	bcc.n	2a0a <__divsi3+0x14a>
    29e4:	22fc      	movs	r2, #252	; 0xfc
    29e6:	0189      	lsls	r1, r1, #6
    29e8:	ba12      	rev	r2, r2
    29ea:	0a03      	lsrs	r3, r0, #8
    29ec:	428b      	cmp	r3, r1
    29ee:	d30c      	bcc.n	2a0a <__divsi3+0x14a>
    29f0:	0189      	lsls	r1, r1, #6
    29f2:	1192      	asrs	r2, r2, #6
    29f4:	428b      	cmp	r3, r1
    29f6:	d308      	bcc.n	2a0a <__divsi3+0x14a>
    29f8:	0189      	lsls	r1, r1, #6
    29fa:	1192      	asrs	r2, r2, #6
    29fc:	428b      	cmp	r3, r1
    29fe:	d304      	bcc.n	2a0a <__divsi3+0x14a>
    2a00:	0189      	lsls	r1, r1, #6
    2a02:	d03a      	beq.n	2a7a <__divsi3+0x1ba>
    2a04:	1192      	asrs	r2, r2, #6
    2a06:	e000      	b.n	2a0a <__divsi3+0x14a>
    2a08:	0989      	lsrs	r1, r1, #6
    2a0a:	09c3      	lsrs	r3, r0, #7
    2a0c:	428b      	cmp	r3, r1
    2a0e:	d301      	bcc.n	2a14 <__divsi3+0x154>
    2a10:	01cb      	lsls	r3, r1, #7
    2a12:	1ac0      	subs	r0, r0, r3
    2a14:	4152      	adcs	r2, r2
    2a16:	0983      	lsrs	r3, r0, #6
    2a18:	428b      	cmp	r3, r1
    2a1a:	d301      	bcc.n	2a20 <__divsi3+0x160>
    2a1c:	018b      	lsls	r3, r1, #6
    2a1e:	1ac0      	subs	r0, r0, r3
    2a20:	4152      	adcs	r2, r2
    2a22:	0943      	lsrs	r3, r0, #5
    2a24:	428b      	cmp	r3, r1
    2a26:	d301      	bcc.n	2a2c <__divsi3+0x16c>
    2a28:	014b      	lsls	r3, r1, #5
    2a2a:	1ac0      	subs	r0, r0, r3
    2a2c:	4152      	adcs	r2, r2
    2a2e:	0903      	lsrs	r3, r0, #4
    2a30:	428b      	cmp	r3, r1
    2a32:	d301      	bcc.n	2a38 <__divsi3+0x178>
    2a34:	010b      	lsls	r3, r1, #4
    2a36:	1ac0      	subs	r0, r0, r3
    2a38:	4152      	adcs	r2, r2
    2a3a:	08c3      	lsrs	r3, r0, #3
    2a3c:	428b      	cmp	r3, r1
    2a3e:	d301      	bcc.n	2a44 <__divsi3+0x184>
    2a40:	00cb      	lsls	r3, r1, #3
    2a42:	1ac0      	subs	r0, r0, r3
    2a44:	4152      	adcs	r2, r2
    2a46:	0883      	lsrs	r3, r0, #2
    2a48:	428b      	cmp	r3, r1
    2a4a:	d301      	bcc.n	2a50 <__divsi3+0x190>
    2a4c:	008b      	lsls	r3, r1, #2
    2a4e:	1ac0      	subs	r0, r0, r3
    2a50:	4152      	adcs	r2, r2
    2a52:	d2d9      	bcs.n	2a08 <__divsi3+0x148>
    2a54:	0843      	lsrs	r3, r0, #1
    2a56:	428b      	cmp	r3, r1
    2a58:	d301      	bcc.n	2a5e <__divsi3+0x19e>
    2a5a:	004b      	lsls	r3, r1, #1
    2a5c:	1ac0      	subs	r0, r0, r3
    2a5e:	4152      	adcs	r2, r2
    2a60:	1a41      	subs	r1, r0, r1
    2a62:	d200      	bcs.n	2a66 <__divsi3+0x1a6>
    2a64:	4601      	mov	r1, r0
    2a66:	4663      	mov	r3, ip
    2a68:	4152      	adcs	r2, r2
    2a6a:	105b      	asrs	r3, r3, #1
    2a6c:	4610      	mov	r0, r2
    2a6e:	d301      	bcc.n	2a74 <__divsi3+0x1b4>
    2a70:	4240      	negs	r0, r0
    2a72:	2b00      	cmp	r3, #0
    2a74:	d500      	bpl.n	2a78 <__divsi3+0x1b8>
    2a76:	4249      	negs	r1, r1
    2a78:	4770      	bx	lr
    2a7a:	4663      	mov	r3, ip
    2a7c:	105b      	asrs	r3, r3, #1
    2a7e:	d300      	bcc.n	2a82 <__divsi3+0x1c2>
    2a80:	4240      	negs	r0, r0
    2a82:	b501      	push	{r0, lr}
    2a84:	2000      	movs	r0, #0
    2a86:	f000 f805 	bl	2a94 <__aeabi_idiv0>
    2a8a:	bd02      	pop	{r1, pc}

00002a8c <__aeabi_idivmod>:
    2a8c:	2900      	cmp	r1, #0
    2a8e:	d0f8      	beq.n	2a82 <__divsi3+0x1c2>
    2a90:	e716      	b.n	28c0 <__divsi3>
    2a92:	4770      	bx	lr

00002a94 <__aeabi_idiv0>:
    2a94:	4770      	bx	lr
    2a96:	46c0      	nop			; (mov r8, r8)

00002a98 <__aeabi_lmul>:
    2a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a9a:	46ce      	mov	lr, r9
    2a9c:	4647      	mov	r7, r8
    2a9e:	0415      	lsls	r5, r2, #16
    2aa0:	0c2d      	lsrs	r5, r5, #16
    2aa2:	002e      	movs	r6, r5
    2aa4:	b580      	push	{r7, lr}
    2aa6:	0407      	lsls	r7, r0, #16
    2aa8:	0c14      	lsrs	r4, r2, #16
    2aaa:	0c3f      	lsrs	r7, r7, #16
    2aac:	4699      	mov	r9, r3
    2aae:	0c03      	lsrs	r3, r0, #16
    2ab0:	437e      	muls	r6, r7
    2ab2:	435d      	muls	r5, r3
    2ab4:	4367      	muls	r7, r4
    2ab6:	4363      	muls	r3, r4
    2ab8:	197f      	adds	r7, r7, r5
    2aba:	0c34      	lsrs	r4, r6, #16
    2abc:	19e4      	adds	r4, r4, r7
    2abe:	469c      	mov	ip, r3
    2ac0:	42a5      	cmp	r5, r4
    2ac2:	d903      	bls.n	2acc <__aeabi_lmul+0x34>
    2ac4:	2380      	movs	r3, #128	; 0x80
    2ac6:	025b      	lsls	r3, r3, #9
    2ac8:	4698      	mov	r8, r3
    2aca:	44c4      	add	ip, r8
    2acc:	464b      	mov	r3, r9
    2ace:	4351      	muls	r1, r2
    2ad0:	4343      	muls	r3, r0
    2ad2:	0436      	lsls	r6, r6, #16
    2ad4:	0c36      	lsrs	r6, r6, #16
    2ad6:	0c25      	lsrs	r5, r4, #16
    2ad8:	0424      	lsls	r4, r4, #16
    2ada:	4465      	add	r5, ip
    2adc:	19a4      	adds	r4, r4, r6
    2ade:	1859      	adds	r1, r3, r1
    2ae0:	1949      	adds	r1, r1, r5
    2ae2:	0020      	movs	r0, r4
    2ae4:	bc0c      	pop	{r2, r3}
    2ae6:	4690      	mov	r8, r2
    2ae8:	4699      	mov	r9, r3
    2aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002aec <__libc_init_array>:
    2aec:	b570      	push	{r4, r5, r6, lr}
    2aee:	2600      	movs	r6, #0
    2af0:	4d0c      	ldr	r5, [pc, #48]	; (2b24 <__libc_init_array+0x38>)
    2af2:	4c0d      	ldr	r4, [pc, #52]	; (2b28 <__libc_init_array+0x3c>)
    2af4:	1b64      	subs	r4, r4, r5
    2af6:	10a4      	asrs	r4, r4, #2
    2af8:	42a6      	cmp	r6, r4
    2afa:	d109      	bne.n	2b10 <__libc_init_array+0x24>
    2afc:	2600      	movs	r6, #0
    2afe:	f000 f92f 	bl	2d60 <_init>
    2b02:	4d0a      	ldr	r5, [pc, #40]	; (2b2c <__libc_init_array+0x40>)
    2b04:	4c0a      	ldr	r4, [pc, #40]	; (2b30 <__libc_init_array+0x44>)
    2b06:	1b64      	subs	r4, r4, r5
    2b08:	10a4      	asrs	r4, r4, #2
    2b0a:	42a6      	cmp	r6, r4
    2b0c:	d105      	bne.n	2b1a <__libc_init_array+0x2e>
    2b0e:	bd70      	pop	{r4, r5, r6, pc}
    2b10:	00b3      	lsls	r3, r6, #2
    2b12:	58eb      	ldr	r3, [r5, r3]
    2b14:	4798      	blx	r3
    2b16:	3601      	adds	r6, #1
    2b18:	e7ee      	b.n	2af8 <__libc_init_array+0xc>
    2b1a:	00b3      	lsls	r3, r6, #2
    2b1c:	58eb      	ldr	r3, [r5, r3]
    2b1e:	4798      	blx	r3
    2b20:	3601      	adds	r6, #1
    2b22:	e7f2      	b.n	2b0a <__libc_init_array+0x1e>
    2b24:	00002d6c 	.word	0x00002d6c
    2b28:	00002d6c 	.word	0x00002d6c
    2b2c:	00002d6c 	.word	0x00002d6c
    2b30:	00002d70 	.word	0x00002d70

00002b34 <srand>:
    2b34:	4b10      	ldr	r3, [pc, #64]	; (2b78 <srand+0x44>)
    2b36:	b570      	push	{r4, r5, r6, lr}
    2b38:	681c      	ldr	r4, [r3, #0]
    2b3a:	0005      	movs	r5, r0
    2b3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d115      	bne.n	2b6e <srand+0x3a>
    2b42:	2018      	movs	r0, #24
    2b44:	f000 f860 	bl	2c08 <malloc>
    2b48:	4b0c      	ldr	r3, [pc, #48]	; (2b7c <srand+0x48>)
    2b4a:	63a0      	str	r0, [r4, #56]	; 0x38
    2b4c:	8003      	strh	r3, [r0, #0]
    2b4e:	4b0c      	ldr	r3, [pc, #48]	; (2b80 <srand+0x4c>)
    2b50:	2201      	movs	r2, #1
    2b52:	8043      	strh	r3, [r0, #2]
    2b54:	4b0b      	ldr	r3, [pc, #44]	; (2b84 <srand+0x50>)
    2b56:	8083      	strh	r3, [r0, #4]
    2b58:	4b0b      	ldr	r3, [pc, #44]	; (2b88 <srand+0x54>)
    2b5a:	80c3      	strh	r3, [r0, #6]
    2b5c:	4b0b      	ldr	r3, [pc, #44]	; (2b8c <srand+0x58>)
    2b5e:	8103      	strh	r3, [r0, #8]
    2b60:	2305      	movs	r3, #5
    2b62:	8143      	strh	r3, [r0, #10]
    2b64:	3306      	adds	r3, #6
    2b66:	8183      	strh	r3, [r0, #12]
    2b68:	2300      	movs	r3, #0
    2b6a:	6102      	str	r2, [r0, #16]
    2b6c:	6143      	str	r3, [r0, #20]
    2b6e:	2200      	movs	r2, #0
    2b70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2b72:	611d      	str	r5, [r3, #16]
    2b74:	615a      	str	r2, [r3, #20]
    2b76:	bd70      	pop	{r4, r5, r6, pc}
    2b78:	20000010 	.word	0x20000010
    2b7c:	0000330e 	.word	0x0000330e
    2b80:	ffffabcd 	.word	0xffffabcd
    2b84:	00001234 	.word	0x00001234
    2b88:	ffffe66d 	.word	0xffffe66d
    2b8c:	ffffdeec 	.word	0xffffdeec

00002b90 <rand>:
    2b90:	4b15      	ldr	r3, [pc, #84]	; (2be8 <rand+0x58>)
    2b92:	b510      	push	{r4, lr}
    2b94:	681c      	ldr	r4, [r3, #0]
    2b96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    2b98:	2b00      	cmp	r3, #0
    2b9a:	d115      	bne.n	2bc8 <rand+0x38>
    2b9c:	2018      	movs	r0, #24
    2b9e:	f000 f833 	bl	2c08 <malloc>
    2ba2:	4b12      	ldr	r3, [pc, #72]	; (2bec <rand+0x5c>)
    2ba4:	63a0      	str	r0, [r4, #56]	; 0x38
    2ba6:	8003      	strh	r3, [r0, #0]
    2ba8:	4b11      	ldr	r3, [pc, #68]	; (2bf0 <rand+0x60>)
    2baa:	2201      	movs	r2, #1
    2bac:	8043      	strh	r3, [r0, #2]
    2bae:	4b11      	ldr	r3, [pc, #68]	; (2bf4 <rand+0x64>)
    2bb0:	8083      	strh	r3, [r0, #4]
    2bb2:	4b11      	ldr	r3, [pc, #68]	; (2bf8 <rand+0x68>)
    2bb4:	80c3      	strh	r3, [r0, #6]
    2bb6:	4b11      	ldr	r3, [pc, #68]	; (2bfc <rand+0x6c>)
    2bb8:	8103      	strh	r3, [r0, #8]
    2bba:	2305      	movs	r3, #5
    2bbc:	8143      	strh	r3, [r0, #10]
    2bbe:	3306      	adds	r3, #6
    2bc0:	8183      	strh	r3, [r0, #12]
    2bc2:	2300      	movs	r3, #0
    2bc4:	6102      	str	r2, [r0, #16]
    2bc6:	6143      	str	r3, [r0, #20]
    2bc8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    2bca:	4a0d      	ldr	r2, [pc, #52]	; (2c00 <rand+0x70>)
    2bcc:	6920      	ldr	r0, [r4, #16]
    2bce:	6961      	ldr	r1, [r4, #20]
    2bd0:	4b0c      	ldr	r3, [pc, #48]	; (2c04 <rand+0x74>)
    2bd2:	f7ff ff61 	bl	2a98 <__aeabi_lmul>
    2bd6:	2201      	movs	r2, #1
    2bd8:	2300      	movs	r3, #0
    2bda:	1880      	adds	r0, r0, r2
    2bdc:	4159      	adcs	r1, r3
    2bde:	6120      	str	r0, [r4, #16]
    2be0:	6161      	str	r1, [r4, #20]
    2be2:	0048      	lsls	r0, r1, #1
    2be4:	0840      	lsrs	r0, r0, #1
    2be6:	bd10      	pop	{r4, pc}
    2be8:	20000010 	.word	0x20000010
    2bec:	0000330e 	.word	0x0000330e
    2bf0:	ffffabcd 	.word	0xffffabcd
    2bf4:	00001234 	.word	0x00001234
    2bf8:	ffffe66d 	.word	0xffffe66d
    2bfc:	ffffdeec 	.word	0xffffdeec
    2c00:	4c957f2d 	.word	0x4c957f2d
    2c04:	5851f42d 	.word	0x5851f42d

00002c08 <malloc>:
    2c08:	b510      	push	{r4, lr}
    2c0a:	4b03      	ldr	r3, [pc, #12]	; (2c18 <malloc+0x10>)
    2c0c:	0001      	movs	r1, r0
    2c0e:	6818      	ldr	r0, [r3, #0]
    2c10:	f000 f804 	bl	2c1c <_malloc_r>
    2c14:	bd10      	pop	{r4, pc}
    2c16:	46c0      	nop			; (mov r8, r8)
    2c18:	20000010 	.word	0x20000010

00002c1c <_malloc_r>:
    2c1c:	2303      	movs	r3, #3
    2c1e:	b570      	push	{r4, r5, r6, lr}
    2c20:	1ccd      	adds	r5, r1, #3
    2c22:	439d      	bics	r5, r3
    2c24:	3508      	adds	r5, #8
    2c26:	0006      	movs	r6, r0
    2c28:	2d0c      	cmp	r5, #12
    2c2a:	d21e      	bcs.n	2c6a <_malloc_r+0x4e>
    2c2c:	250c      	movs	r5, #12
    2c2e:	42a9      	cmp	r1, r5
    2c30:	d81d      	bhi.n	2c6e <_malloc_r+0x52>
    2c32:	0030      	movs	r0, r6
    2c34:	f000 f862 	bl	2cfc <__malloc_lock>
    2c38:	4a25      	ldr	r2, [pc, #148]	; (2cd0 <_malloc_r+0xb4>)
    2c3a:	6814      	ldr	r4, [r2, #0]
    2c3c:	0021      	movs	r1, r4
    2c3e:	2900      	cmp	r1, #0
    2c40:	d119      	bne.n	2c76 <_malloc_r+0x5a>
    2c42:	4c24      	ldr	r4, [pc, #144]	; (2cd4 <_malloc_r+0xb8>)
    2c44:	6823      	ldr	r3, [r4, #0]
    2c46:	2b00      	cmp	r3, #0
    2c48:	d103      	bne.n	2c52 <_malloc_r+0x36>
    2c4a:	0030      	movs	r0, r6
    2c4c:	f000 f844 	bl	2cd8 <_sbrk_r>
    2c50:	6020      	str	r0, [r4, #0]
    2c52:	0029      	movs	r1, r5
    2c54:	0030      	movs	r0, r6
    2c56:	f000 f83f 	bl	2cd8 <_sbrk_r>
    2c5a:	1c43      	adds	r3, r0, #1
    2c5c:	d12c      	bne.n	2cb8 <_malloc_r+0x9c>
    2c5e:	230c      	movs	r3, #12
    2c60:	0030      	movs	r0, r6
    2c62:	6033      	str	r3, [r6, #0]
    2c64:	f000 f84b 	bl	2cfe <__malloc_unlock>
    2c68:	e003      	b.n	2c72 <_malloc_r+0x56>
    2c6a:	2d00      	cmp	r5, #0
    2c6c:	dadf      	bge.n	2c2e <_malloc_r+0x12>
    2c6e:	230c      	movs	r3, #12
    2c70:	6033      	str	r3, [r6, #0]
    2c72:	2000      	movs	r0, #0
    2c74:	bd70      	pop	{r4, r5, r6, pc}
    2c76:	680b      	ldr	r3, [r1, #0]
    2c78:	1b5b      	subs	r3, r3, r5
    2c7a:	d41a      	bmi.n	2cb2 <_malloc_r+0x96>
    2c7c:	2b0b      	cmp	r3, #11
    2c7e:	d903      	bls.n	2c88 <_malloc_r+0x6c>
    2c80:	600b      	str	r3, [r1, #0]
    2c82:	18cc      	adds	r4, r1, r3
    2c84:	6025      	str	r5, [r4, #0]
    2c86:	e003      	b.n	2c90 <_malloc_r+0x74>
    2c88:	428c      	cmp	r4, r1
    2c8a:	d10e      	bne.n	2caa <_malloc_r+0x8e>
    2c8c:	6863      	ldr	r3, [r4, #4]
    2c8e:	6013      	str	r3, [r2, #0]
    2c90:	0030      	movs	r0, r6
    2c92:	f000 f834 	bl	2cfe <__malloc_unlock>
    2c96:	0020      	movs	r0, r4
    2c98:	2207      	movs	r2, #7
    2c9a:	300b      	adds	r0, #11
    2c9c:	1d23      	adds	r3, r4, #4
    2c9e:	4390      	bics	r0, r2
    2ca0:	1ac3      	subs	r3, r0, r3
    2ca2:	d0e7      	beq.n	2c74 <_malloc_r+0x58>
    2ca4:	425a      	negs	r2, r3
    2ca6:	50e2      	str	r2, [r4, r3]
    2ca8:	e7e4      	b.n	2c74 <_malloc_r+0x58>
    2caa:	684b      	ldr	r3, [r1, #4]
    2cac:	6063      	str	r3, [r4, #4]
    2cae:	000c      	movs	r4, r1
    2cb0:	e7ee      	b.n	2c90 <_malloc_r+0x74>
    2cb2:	000c      	movs	r4, r1
    2cb4:	6849      	ldr	r1, [r1, #4]
    2cb6:	e7c2      	b.n	2c3e <_malloc_r+0x22>
    2cb8:	2303      	movs	r3, #3
    2cba:	1cc4      	adds	r4, r0, #3
    2cbc:	439c      	bics	r4, r3
    2cbe:	42a0      	cmp	r0, r4
    2cc0:	d0e0      	beq.n	2c84 <_malloc_r+0x68>
    2cc2:	1a21      	subs	r1, r4, r0
    2cc4:	0030      	movs	r0, r6
    2cc6:	f000 f807 	bl	2cd8 <_sbrk_r>
    2cca:	1c43      	adds	r3, r0, #1
    2ccc:	d1da      	bne.n	2c84 <_malloc_r+0x68>
    2cce:	e7c6      	b.n	2c5e <_malloc_r+0x42>
    2cd0:	200000d0 	.word	0x200000d0
    2cd4:	200000d4 	.word	0x200000d4

00002cd8 <_sbrk_r>:
    2cd8:	2300      	movs	r3, #0
    2cda:	b570      	push	{r4, r5, r6, lr}
    2cdc:	4c06      	ldr	r4, [pc, #24]	; (2cf8 <_sbrk_r+0x20>)
    2cde:	0005      	movs	r5, r0
    2ce0:	0008      	movs	r0, r1
    2ce2:	6023      	str	r3, [r4, #0]
    2ce4:	f7fe fa80 	bl	11e8 <_sbrk>
    2ce8:	1c43      	adds	r3, r0, #1
    2cea:	d103      	bne.n	2cf4 <_sbrk_r+0x1c>
    2cec:	6823      	ldr	r3, [r4, #0]
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d000      	beq.n	2cf4 <_sbrk_r+0x1c>
    2cf2:	602b      	str	r3, [r5, #0]
    2cf4:	bd70      	pop	{r4, r5, r6, pc}
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	20000128 	.word	0x20000128

00002cfc <__malloc_lock>:
    2cfc:	4770      	bx	lr

00002cfe <__malloc_unlock>:
    2cfe:	4770      	bx	lr
    2d00:	42000800 	.word	0x42000800
    2d04:	42000c00 	.word	0x42000c00
    2d08:	42001000 	.word	0x42001000
    2d0c:	42001400 	.word	0x42001400
    2d10:	42001800 	.word	0x42001800
    2d14:	42001c00 	.word	0x42001c00
    2d18:	00000b72 	.word	0x00000b72
    2d1c:	00000b6e 	.word	0x00000b6e
    2d20:	00000b6e 	.word	0x00000b6e
    2d24:	00000bd4 	.word	0x00000bd4
    2d28:	00000bd4 	.word	0x00000bd4
    2d2c:	00000b86 	.word	0x00000b86
    2d30:	00000b78 	.word	0x00000b78
    2d34:	00000b8c 	.word	0x00000b8c
    2d38:	00000bc2 	.word	0x00000bc2
    2d3c:	00000c5c 	.word	0x00000c5c
    2d40:	00000c3c 	.word	0x00000c3c
    2d44:	00000c3c 	.word	0x00000c3c
    2d48:	00000cc8 	.word	0x00000cc8
    2d4c:	00000c4e 	.word	0x00000c4e
    2d50:	00000c6a 	.word	0x00000c6a
    2d54:	00000c40 	.word	0x00000c40
    2d58:	00000c78 	.word	0x00000c78
    2d5c:	00000cb8 	.word	0x00000cb8

00002d60 <_init>:
    2d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d66:	bc08      	pop	{r3}
    2d68:	469e      	mov	lr, r3
    2d6a:	4770      	bx	lr

00002d6c <__init_array_start>:
    2d6c:	000000dd 	.word	0x000000dd

00002d70 <_fini>:
    2d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d72:	46c0      	nop			; (mov r8, r8)
    2d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2d76:	bc08      	pop	{r3}
    2d78:	469e      	mov	lr, r3
    2d7a:	4770      	bx	lr

00002d7c <__fini_array_start>:
    2d7c:	000000b5 	.word	0x000000b5
