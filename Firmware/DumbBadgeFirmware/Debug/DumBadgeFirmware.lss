
DumBadgeFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008d1c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000210  20000000  00008d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003428  20000400  00009400  00020400  2**10
                  ALLOC
  3 .stack        00002000  20003828  0000c828  00020400  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003e7c0  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005e02  00000000  00000000  0005ea51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007cf1  00000000  00000000  00064853  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000918  00000000  00000000  0006c544  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bd0  00000000  00000000  0006ce5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fb9d  00000000  00000000  0006da2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000156b2  00000000  00000000  0008d5c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009088c  00000000  00000000  000a2c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001fa4  00000000  00000000  00133508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	28 58 00 20 71 37 00 00 6d 37 00 00 6d 37 00 00     (X. q7..m7..m7..
	...
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
	config->clock_polarity_inverted = false;
      2c:	6d 37 00 00 00 00 00 00 00 00 00 00 6d 37 00 00     m7..........m7..
	config->use_external_clock = false;
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
      3c:	ed 4b 00 00 6d 37 00 00 6d 37 00 00 6d 37 00 00     .K..m7..m7..m7..
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
	config->receive_pulse_length                    = 19;
      4c:	6d 37 00 00 6d 37 00 00 6d 37 00 00 6d 37 00 00     m7..m7..m7..m7..
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = SERCOMBAUD;
	config_usart.mux_setting = SERCOMMUX;
	config_usart.pinmux_pad0 = SERCOMPAD0;
	config_usart.pinmux_pad1 = SERCOMPAD1;
      5c:	6d 37 00 00 6d 37 00 00 89 29 00 00 99 29 00 00     m7..m7...)...)..
	config_usart.pinmux_pad2 = SERCOMPAD2;
	config_usart.pinmux_pad3 = SERCOMPAD3;

	while (usart_init(&usart_instance,	 SERCOMMODULE, &config_usart) != STATUS_OK) { }
      6c:	a9 29 00 00 b9 29 00 00 c9 29 00 00 d9 29 00 00     .)...)...)...)..
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
      7c:	6d 37 00 00 6d 37 00 00 6d 37 00 00 6d 37 00 00     m7..m7..m7..m7..
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
      8c:	6d 37 00 00 6d 37 00 00 6d 37 00 00 6d 37 00 00     m7..m7..m7..m7..
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
      9c:	bd 24 00 00 6d 37 00 00 6d 37 00 00 6d 37 00 00     .$..m7..m7..m7..
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      ac:	6d 37 00 00 00 00 00 00                             m7......

000000b4 <__do_global_dtors_aux>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
      ba:	2b00      	cmp	r3, #0
	return (usart_hw->SYNCBUSY.reg);
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
	while (usart_is_syncing(module)) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop

	stdio_serial_init(&usart_instance, SERCOMMODULE, &config_usart);
	usart_enable(&usart_instance);
}
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000400 	.word	0x20000400
      d4:	00000000 	.word	0x00000000
      d8:	00008d1c 	.word	0x00008d1c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000404 	.word	0x20000404
     108:	00008d1c 	.word	0x00008d1c
     10c:	00008d1c 	.word	0x00008d1c
     110:	00000000 	.word	0x00000000

00000114 <ring_init>:
	cbuf->full = false;
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
}

cbuf_handle_t ring_init(uint8_t* buffer, uint16_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	0005      	movs	r5, r0
     118:	000c      	movs	r4, r1
	cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     11a:	200c      	movs	r0, #12
     11c:	4b04      	ldr	r3, [pc, #16]	; (130 <ring_init+0x1c>)
     11e:	4798      	blx	r3

	cbuf->buffer = buffer;
     120:	6005      	str	r5, [r0, #0]
	cbuf->max = size;
     122:	8104      	strh	r4, [r0, #8]
	return cbuf;
}

void ring_reset(cbuf_handle_t cbuf)
{
	cbuf->head = 0;
     124:	2300      	movs	r3, #0
     126:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     128:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     12a:	7283      	strb	r3, [r0, #10]
}
     12c:	bd70      	pop	{r4, r5, r6, pc}
     12e:	46c0      	nop			; (mov r8, r8)
     130:	000053a1 	.word	0x000053a1

00000134 <ring_reset>:
	cbuf->head = 0;
     134:	2300      	movs	r3, #0
     136:	8083      	strh	r3, [r0, #4]
	cbuf->tail = 0;
     138:	80c3      	strh	r3, [r0, #6]
	cbuf->full = false;
     13a:	7283      	strb	r3, [r0, #10]
}
     13c:	4770      	bx	lr
	...

00000140 <ring_put>:

void ring_put(cbuf_handle_t cbuf, uint8_t data)
{
     140:	b510      	push	{r4, lr}
     142:	0004      	movs	r4, r0
	cbuf->buffer[cbuf->head] = data;
     144:	8883      	ldrh	r3, [r0, #4]
     146:	005b      	lsls	r3, r3, #1
     148:	6802      	ldr	r2, [r0, #0]
     14a:	5299      	strh	r1, [r3, r2]
	if(cbuf->full)
     14c:	7a83      	ldrb	r3, [r0, #10]
     14e:	2b00      	cmp	r3, #0
     150:	d005      	beq.n	15e <ring_put+0x1e>
		cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     152:	88c0      	ldrh	r0, [r0, #6]
     154:	3001      	adds	r0, #1
     156:	8921      	ldrh	r1, [r4, #8]
     158:	4b07      	ldr	r3, [pc, #28]	; (178 <ring_put+0x38>)
     15a:	4798      	blx	r3
     15c:	80e1      	strh	r1, [r4, #6]
	cbuf->head = (cbuf->head + 1) % cbuf->max;
     15e:	88a0      	ldrh	r0, [r4, #4]
     160:	3001      	adds	r0, #1
     162:	8921      	ldrh	r1, [r4, #8]
     164:	4b04      	ldr	r3, [pc, #16]	; (178 <ring_put+0x38>)
     166:	4798      	blx	r3
     168:	b28b      	uxth	r3, r1
     16a:	80a3      	strh	r3, [r4, #4]
	cbuf->full = (cbuf->head == cbuf->tail);
     16c:	88e1      	ldrh	r1, [r4, #6]
     16e:	1ac9      	subs	r1, r1, r3
     170:	424a      	negs	r2, r1
     172:	414a      	adcs	r2, r1
     174:	72a2      	strb	r2, [r4, #10]

	advance_pointer(cbuf);
}
     176:	bd10      	pop	{r4, pc}
     178:	000052c1 	.word	0x000052c1

0000017c <ring_empty>:
	return r;
}

bool ring_empty(cbuf_handle_t cbuf)
{
	return (!cbuf->full && (cbuf->head == cbuf->tail));
     17c:	7a82      	ldrb	r2, [r0, #10]
     17e:	2300      	movs	r3, #0
     180:	2a00      	cmp	r2, #0
     182:	d105      	bne.n	190 <ring_empty+0x14>
     184:	8883      	ldrh	r3, [r0, #4]
     186:	88c0      	ldrh	r0, [r0, #6]
     188:	1a1b      	subs	r3, r3, r0
     18a:	4258      	negs	r0, r3
     18c:	4143      	adcs	r3, r0
     18e:	b2db      	uxtb	r3, r3
     190:	0018      	movs	r0, r3
}
     192:	4770      	bx	lr

00000194 <ring_get>:
{
     194:	b570      	push	{r4, r5, r6, lr}
     196:	0004      	movs	r4, r0
     198:	000d      	movs	r5, r1
	if(!ring_empty(cbuf))
     19a:	4b0b      	ldr	r3, [pc, #44]	; (1c8 <ring_get+0x34>)
     19c:	4798      	blx	r3
     19e:	2800      	cmp	r0, #0
     1a0:	d10e      	bne.n	1c0 <ring_get+0x2c>
		*data = cbuf->buffer[cbuf->tail];
     1a2:	88e3      	ldrh	r3, [r4, #6]
     1a4:	005b      	lsls	r3, r3, #1
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	5a9b      	ldrh	r3, [r3, r2]
     1aa:	702b      	strb	r3, [r5, #0]
	cbuf->full = false;
     1ac:	2300      	movs	r3, #0
     1ae:	72a3      	strb	r3, [r4, #10]
	cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     1b0:	88e0      	ldrh	r0, [r4, #6]
     1b2:	3001      	adds	r0, #1
     1b4:	8921      	ldrh	r1, [r4, #8]
     1b6:	4b05      	ldr	r3, [pc, #20]	; (1cc <ring_get+0x38>)
     1b8:	4798      	blx	r3
     1ba:	80e1      	strh	r1, [r4, #6]
		r = 0;
     1bc:	2000      	movs	r0, #0
}
     1be:	bd70      	pop	{r4, r5, r6, pc}
	int r = -1;
     1c0:	2001      	movs	r0, #1
     1c2:	4240      	negs	r0, r0
	return r;
     1c4:	e7fb      	b.n	1be <ring_get+0x2a>
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	0000017d 	.word	0x0000017d
     1cc:	000052c1 	.word	0x000052c1

000001d0 <isEmptyParser>:
int rearParam = -1;
int rearParser = -1;

bool isEmptyParser(void)
{
	if(frontParser == -1)
     1d0:	4b03      	ldr	r3, [pc, #12]	; (1e0 <isEmptyParser+0x10>)
     1d2:	6818      	ldr	r0, [r3, #0]
     1d4:	3001      	adds	r0, #1
     1d6:	4243      	negs	r3, r0
     1d8:	4158      	adcs	r0, r3
     1da:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     1dc:	4770      	bx	lr
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	20000008 	.word	0x20000008

000001e4 <dequeueParser>:
}
char dequeueParser(void)
{
	char temp;
	
	temp = queueParser[frontParser];
     1e4:	4a08      	ldr	r2, [pc, #32]	; (208 <dequeueParser+0x24>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	4908      	ldr	r1, [pc, #32]	; (20c <dequeueParser+0x28>)
     1ea:	5cc8      	ldrb	r0, [r1, r3]
	frontParser++;
     1ec:	3301      	adds	r3, #1
     1ee:	6013      	str	r3, [r2, #0]
	if(frontParser > rearParser)
     1f0:	4a07      	ldr	r2, [pc, #28]	; (210 <dequeueParser+0x2c>)
     1f2:	6812      	ldr	r2, [r2, #0]
     1f4:	4293      	cmp	r3, r2
     1f6:	dd05      	ble.n	204 <dequeueParser+0x20>
	{
		frontParser = rearParser = -1;
     1f8:	2301      	movs	r3, #1
     1fa:	425b      	negs	r3, r3
     1fc:	4a04      	ldr	r2, [pc, #16]	; (210 <dequeueParser+0x2c>)
     1fe:	6013      	str	r3, [r2, #0]
     200:	4a01      	ldr	r2, [pc, #4]	; (208 <dequeueParser+0x24>)
     202:	6013      	str	r3, [r2, #0]
	}
	return temp;
}
     204:	4770      	bx	lr
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000008 	.word	0x20000008
     20c:	200004f8 	.word	0x200004f8
     210:	20000010 	.word	0x20000010

00000214 <enqueueParser>:
void enqueueParser(char data)
{
	if(frontParser == -1)
     214:	4b07      	ldr	r3, [pc, #28]	; (234 <enqueueParser+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
     218:	3301      	adds	r3, #1
     21a:	d006      	beq.n	22a <enqueueParser+0x16>
	{
		frontParser = 0;
	}
	rearParser++;
     21c:	4a06      	ldr	r2, [pc, #24]	; (238 <enqueueParser+0x24>)
     21e:	6813      	ldr	r3, [r2, #0]
     220:	3301      	adds	r3, #1
     222:	6013      	str	r3, [r2, #0]
	queueParser[rearParser] = data;
     224:	4a05      	ldr	r2, [pc, #20]	; (23c <enqueueParser+0x28>)
     226:	54d0      	strb	r0, [r2, r3]
}
     228:	4770      	bx	lr
		frontParser = 0;
     22a:	2200      	movs	r2, #0
     22c:	4b01      	ldr	r3, [pc, #4]	; (234 <enqueueParser+0x20>)
     22e:	601a      	str	r2, [r3, #0]
     230:	e7f4      	b.n	21c <enqueueParser+0x8>
     232:	46c0      	nop			; (mov r8, r8)
     234:	20000008 	.word	0x20000008
     238:	20000010 	.word	0x20000010
     23c:	200004f8 	.word	0x200004f8

00000240 <isEmptyParam>:
bool isEmptyParam(void)
{
	if(frontParam == -1)
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <isEmptyParam+0x10>)
     242:	6818      	ldr	r0, [r3, #0]
     244:	3001      	adds	r0, #1
     246:	4243      	negs	r3, r0
     248:	4158      	adcs	r0, r3
     24a:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	return false;
}
     24c:	4770      	bx	lr
     24e:	46c0      	nop			; (mov r8, r8)
     250:	20000004 	.word	0x20000004

00000254 <dequeueParam>:
}
uint8_t dequeueParam(void)
{
	uint8_t temp;
	
	temp = queueParam[frontParam];
     254:	4a08      	ldr	r2, [pc, #32]	; (278 <dequeueParam+0x24>)
     256:	6813      	ldr	r3, [r2, #0]
     258:	4908      	ldr	r1, [pc, #32]	; (27c <dequeueParam+0x28>)
     25a:	5cc8      	ldrb	r0, [r1, r3]
	frontParam++;
     25c:	3301      	adds	r3, #1
     25e:	6013      	str	r3, [r2, #0]
	if(frontParam > rearParam)
     260:	4a07      	ldr	r2, [pc, #28]	; (280 <dequeueParam+0x2c>)
     262:	6812      	ldr	r2, [r2, #0]
     264:	4293      	cmp	r3, r2
     266:	dd05      	ble.n	274 <dequeueParam+0x20>
	{
		frontParam = rearParam = -1;
     268:	2301      	movs	r3, #1
     26a:	425b      	negs	r3, r3
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <dequeueParam+0x2c>)
     26e:	6013      	str	r3, [r2, #0]
     270:	4a01      	ldr	r2, [pc, #4]	; (278 <dequeueParam+0x24>)
     272:	6013      	str	r3, [r2, #0]
	}

	return temp;
}
     274:	4770      	bx	lr
     276:	46c0      	nop			; (mov r8, r8)
     278:	20000004 	.word	0x20000004
     27c:	2000052c 	.word	0x2000052c
     280:	2000000c 	.word	0x2000000c

00000284 <enqueueParam>:
void enqueueParam(uint8_t data)
{

	if(frontParam == -1)
     284:	4b07      	ldr	r3, [pc, #28]	; (2a4 <enqueueParam+0x20>)
     286:	681b      	ldr	r3, [r3, #0]
     288:	3301      	adds	r3, #1
     28a:	d006      	beq.n	29a <enqueueParam+0x16>
	{
		frontParam = 0;
	}
	rearParam++;
     28c:	4a06      	ldr	r2, [pc, #24]	; (2a8 <enqueueParam+0x24>)
     28e:	6813      	ldr	r3, [r2, #0]
     290:	3301      	adds	r3, #1
     292:	6013      	str	r3, [r2, #0]
	queueParam[rearParam] = data;
     294:	4a05      	ldr	r2, [pc, #20]	; (2ac <enqueueParam+0x28>)
     296:	54d0      	strb	r0, [r2, r3]
}
     298:	4770      	bx	lr
		frontParam = 0;
     29a:	2200      	movs	r2, #0
     29c:	4b01      	ldr	r3, [pc, #4]	; (2a4 <enqueueParam+0x20>)
     29e:	601a      	str	r2, [r3, #0]
     2a0:	e7f4      	b.n	28c <enqueueParam+0x8>
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	20000004 	.word	0x20000004
     2a8:	2000000c 	.word	0x2000000c
     2ac:	2000052c 	.word	0x2000052c

000002b0 <clearQueues>:
void clearQueues(void)
{
     2b0:	b530      	push	{r4, r5, lr}

	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2b2:	4b0e      	ldr	r3, [pc, #56]	; (2ec <clearQueues+0x3c>)
     2b4:	6818      	ldr	r0, [r3, #0]
     2b6:	1e43      	subs	r3, r0, #1
     2b8:	2b00      	cmp	r3, #0
     2ba:	dd0b      	ble.n	2d4 <clearQueues+0x24>
     2bc:	0018      	movs	r0, r3
     2be:	2300      	movs	r3, #0
	{
		queueParam[i] = 0;
     2c0:	4d0b      	ldr	r5, [pc, #44]	; (2f0 <clearQueues+0x40>)
     2c2:	2200      	movs	r2, #0
		queueParser[i] = 0;
     2c4:	4c0b      	ldr	r4, [pc, #44]	; (2f4 <clearQueues+0x44>)
		queueParam[i] = 0;
     2c6:	1959      	adds	r1, r3, r5
     2c8:	700a      	strb	r2, [r1, #0]
		queueParser[i] = 0;
     2ca:	1919      	adds	r1, r3, r4
     2cc:	700a      	strb	r2, [r1, #0]
	for(int i = 0 ; i < (MAXSIZE - 1) ; i++)
     2ce:	3301      	adds	r3, #1
     2d0:	4283      	cmp	r3, r0
     2d2:	d1f8      	bne.n	2c6 <clearQueues+0x16>
	}
	
	frontParser = -1;
     2d4:	2301      	movs	r3, #1
     2d6:	425b      	negs	r3, r3
     2d8:	4a07      	ldr	r2, [pc, #28]	; (2f8 <clearQueues+0x48>)
     2da:	6013      	str	r3, [r2, #0]
	frontParam = -1;
     2dc:	4a07      	ldr	r2, [pc, #28]	; (2fc <clearQueues+0x4c>)
     2de:	6013      	str	r3, [r2, #0]
	rearParam = -1;
     2e0:	4a07      	ldr	r2, [pc, #28]	; (300 <clearQueues+0x50>)
     2e2:	6013      	str	r3, [r2, #0]
	rearParser = -1;
     2e4:	4a07      	ldr	r2, [pc, #28]	; (304 <clearQueues+0x54>)
     2e6:	6013      	str	r3, [r2, #0]
}
     2e8:	bd30      	pop	{r4, r5, pc}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	20000000 	.word	0x20000000
     2f0:	2000052c 	.word	0x2000052c
     2f4:	200004f8 	.word	0x200004f8
     2f8:	20000008 	.word	0x20000008
     2fc:	20000004 	.word	0x20000004
     300:	2000000c 	.word	0x2000000c
     304:	20000010 	.word	0x20000010

00000308 <queueTransmogrifier>:
void queueTransmogrifier(void)
{
     308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	[24],[80]
	
	It's like reimplementing atoi() but it's not an interview question.
	*/
	
	int param = 0;
     30a:	2500      	movs	r5, #0
	char currentByte;
	
	while(!isEmptyParser())
     30c:	4e0c      	ldr	r6, [pc, #48]	; (340 <queueTransmogrifier+0x38>)
	{
		
		currentByte = dequeueParser();		//deque from parser
     30e:	4f0d      	ldr	r7, [pc, #52]	; (344 <queueTransmogrifier+0x3c>)

		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
		{
			enqueueParam(param);
     310:	4c0d      	ldr	r4, [pc, #52]	; (348 <queueTransmogrifier+0x40>)
	while(!isEmptyParser())
     312:	e002      	b.n	31a <queueTransmogrifier+0x12>
			enqueueParam(param);
     314:	b2e8      	uxtb	r0, r5
     316:	47a0      	blx	r4
			param = 0;
     318:	2500      	movs	r5, #0
	while(!isEmptyParser())
     31a:	47b0      	blx	r6
     31c:	2800      	cmp	r0, #0
     31e:	d10a      	bne.n	336 <queueTransmogrifier+0x2e>
		currentByte = dequeueParser();		//deque from parser
     320:	47b8      	blx	r7
		if(currentByte == 0x3B || currentByte == 0x3F) //if it's ';' or '?'
     322:	23fb      	movs	r3, #251	; 0xfb
     324:	4003      	ands	r3, r0
     326:	2b3b      	cmp	r3, #59	; 0x3b
     328:	d0f4      	beq.n	314 <queueTransmogrifier+0xc>
		}
		else
		{
			param = (10 * param) + (int)(currentByte-48);
     32a:	00ab      	lsls	r3, r5, #2
     32c:	195d      	adds	r5, r3, r5
     32e:	006d      	lsls	r5, r5, #1
     330:	3830      	subs	r0, #48	; 0x30
     332:	1945      	adds	r5, r0, r5
     334:	e7f1      	b.n	31a <queueTransmogrifier+0x12>
		}
	}
	enqueueParam(param);
     336:	b2e8      	uxtb	r0, r5
     338:	4b03      	ldr	r3, [pc, #12]	; (348 <queueTransmogrifier+0x40>)
     33a:	4798      	blx	r3
}
     33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	000001d1 	.word	0x000001d1
     344:	000001e5 	.word	0x000001e5
     348:	00000285 	.word	0x00000285

0000034c <CSIignoreState>:
	}
}

void CSIignoreState(uint8_t character)
{
	if(character == 0x1B)
     34c:	281b      	cmp	r0, #27
     34e:	d006      	beq.n	35e <CSIignoreState+0x12>
	{
		currentState = stateESC;
	}
	else if(character >= 0x40 && character <= 0x7E)
     350:	3840      	subs	r0, #64	; 0x40
     352:	283e      	cmp	r0, #62	; 0x3e
     354:	d802      	bhi.n	35c <CSIignoreState+0x10>
	{
		currentState = stateGround;
     356:	2200      	movs	r2, #0
     358:	4b03      	ldr	r3, [pc, #12]	; (368 <CSIignoreState+0x1c>)
     35a:	701a      	strb	r2, [r3, #0]
	}
}
     35c:	4770      	bx	lr
		currentState = stateESC;
     35e:	2201      	movs	r2, #1
     360:	4b01      	ldr	r3, [pc, #4]	; (368 <CSIignoreState+0x1c>)
     362:	701a      	strb	r2, [r3, #0]
     364:	e7fa      	b.n	35c <CSIignoreState+0x10>
     366:	46c0      	nop			; (mov r8, r8)
     368:	200004e7 	.word	0x200004e7

0000036c <SC>:
/************************************************************************/

void SC()
{
	//Save cursor position
	DECSCX = xCharPos;
     36c:	4b05      	ldr	r3, [pc, #20]	; (384 <SC+0x18>)
     36e:	881a      	ldrh	r2, [r3, #0]
     370:	4b05      	ldr	r3, [pc, #20]	; (388 <SC+0x1c>)
     372:	701a      	strb	r2, [r3, #0]
	DECSCY = yCharPos;
     374:	4b05      	ldr	r3, [pc, #20]	; (38c <SC+0x20>)
     376:	881a      	ldrh	r2, [r3, #0]
     378:	4b05      	ldr	r3, [pc, #20]	; (390 <SC+0x24>)
     37a:	701a      	strb	r2, [r3, #0]
	currentState = stateGround;
     37c:	2200      	movs	r2, #0
     37e:	4b05      	ldr	r3, [pc, #20]	; (394 <SC+0x28>)
     380:	701a      	strb	r2, [r3, #0]
}
     382:	4770      	bx	lr
     384:	200004e2 	.word	0x200004e2
     388:	2000041c 	.word	0x2000041c
     38c:	200004e4 	.word	0x200004e4
     390:	2000041d 	.word	0x2000041d
     394:	200004e7 	.word	0x200004e7

00000398 <RC>:

void RC()
{
     398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Restore cursor to saved position
	
	char tempCharacter;
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     39a:	4c0f      	ldr	r4, [pc, #60]	; (3d8 <RC+0x40>)
     39c:	4f0f      	ldr	r7, [pc, #60]	; (3dc <RC+0x44>)
     39e:	883a      	ldrh	r2, [r7, #0]
     3a0:	4e0f      	ldr	r6, [pc, #60]	; (3e0 <RC+0x48>)
     3a2:	8831      	ldrh	r1, [r6, #0]
     3a4:	0053      	lsls	r3, r2, #1
     3a6:	189b      	adds	r3, r3, r2
     3a8:	00db      	lsls	r3, r3, #3
     3aa:	18e3      	adds	r3, r4, r3
     3ac:	5c58      	ldrb	r0, [r3, r1]
     3ae:	4d0d      	ldr	r5, [pc, #52]	; (3e4 <RC+0x4c>)
     3b0:	47a8      	blx	r5
	xCharPos = DECSCX;
     3b2:	4b0d      	ldr	r3, [pc, #52]	; (3e8 <RC+0x50>)
     3b4:	781a      	ldrb	r2, [r3, #0]
     3b6:	803a      	strh	r2, [r7, #0]
	yCharPos = DECSCY;
     3b8:	4b0c      	ldr	r3, [pc, #48]	; (3ec <RC+0x54>)
     3ba:	7819      	ldrb	r1, [r3, #0]
     3bc:	8031      	strh	r1, [r6, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     3be:	0053      	lsls	r3, r2, #1
     3c0:	189b      	adds	r3, r3, r2
     3c2:	00db      	lsls	r3, r3, #3
     3c4:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     3c6:	5c58      	ldrb	r0, [r3, r1]
     3c8:	47a8      	blx	r5
	blinkCursor();
     3ca:	4b09      	ldr	r3, [pc, #36]	; (3f0 <RC+0x58>)
     3cc:	4798      	blx	r3
	currentState = stateGround;
     3ce:	2200      	movs	r2, #0
     3d0:	4b08      	ldr	r3, [pc, #32]	; (3f4 <RC+0x5c>)
     3d2:	701a      	strb	r2, [r3, #0]
}
     3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	200005ec 	.word	0x200005ec
     3dc:	200004e2 	.word	0x200004e2
     3e0:	200004e4 	.word	0x200004e4
     3e4:	00003925 	.word	0x00003925
     3e8:	2000041c 	.word	0x2000041c
     3ec:	2000041d 	.word	0x2000041d
     3f0:	00003ca9 	.word	0x00003ca9
     3f4:	200004e7 	.word	0x200004e7

000003f8 <IND>:

void IND()
{
     3f8:	b570      	push	{r4, r5, r6, lr}
	//performs newline() if row = 24
	
	char tempCharacter;
	int xTemp = 0;
	
	if(yCharPos < 23)
     3fa:	4b19      	ldr	r3, [pc, #100]	; (460 <IND+0x68>)
     3fc:	881a      	ldrh	r2, [r3, #0]
     3fe:	2a16      	cmp	r2, #22
     400:	d914      	bls.n	42c <IND+0x34>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		xTemp = xCharPos;
     402:	4d18      	ldr	r5, [pc, #96]	; (464 <IND+0x6c>)
     404:	882c      	ldrh	r4, [r5, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     406:	0063      	lsls	r3, r4, #1
     408:	191b      	adds	r3, r3, r4
     40a:	00db      	lsls	r3, r3, #3
     40c:	4916      	ldr	r1, [pc, #88]	; (468 <IND+0x70>)
     40e:	18cb      	adds	r3, r1, r3
     410:	5c98      	ldrb	r0, [r3, r2]
     412:	4e16      	ldr	r6, [pc, #88]	; (46c <IND+0x74>)
     414:	47b0      	blx	r6
		newLine();
     416:	4b16      	ldr	r3, [pc, #88]	; (470 <IND+0x78>)
     418:	4798      	blx	r3
		drawChar(0x00);
     41a:	2000      	movs	r0, #0
     41c:	47b0      	blx	r6
		xCharPos = xTemp;
     41e:	802c      	strh	r4, [r5, #0]
		blinkCursor();
     420:	4b14      	ldr	r3, [pc, #80]	; (474 <IND+0x7c>)
     422:	4798      	blx	r3
	}
		
		currentState = stateGround;	
     424:	2200      	movs	r2, #0
     426:	4b14      	ldr	r3, [pc, #80]	; (478 <IND+0x80>)
     428:	701a      	strb	r2, [r3, #0]
}
     42a:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     42c:	4c0e      	ldr	r4, [pc, #56]	; (468 <IND+0x70>)
     42e:	4d0d      	ldr	r5, [pc, #52]	; (464 <IND+0x6c>)
     430:	8829      	ldrh	r1, [r5, #0]
     432:	004b      	lsls	r3, r1, #1
     434:	185b      	adds	r3, r3, r1
     436:	00db      	lsls	r3, r3, #3
     438:	18e3      	adds	r3, r4, r3
     43a:	5c98      	ldrb	r0, [r3, r2]
     43c:	4e0b      	ldr	r6, [pc, #44]	; (46c <IND+0x74>)
     43e:	47b0      	blx	r6
		yCharPos++;
     440:	4a07      	ldr	r2, [pc, #28]	; (460 <IND+0x68>)
     442:	8813      	ldrh	r3, [r2, #0]
     444:	3301      	adds	r3, #1
     446:	b29b      	uxth	r3, r3
     448:	8013      	strh	r3, [r2, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     44a:	8829      	ldrh	r1, [r5, #0]
     44c:	004a      	lsls	r2, r1, #1
     44e:	1852      	adds	r2, r2, r1
     450:	00d2      	lsls	r2, r2, #3
     452:	18a4      	adds	r4, r4, r2
		drawChar(tempCharacter);
     454:	5ce0      	ldrb	r0, [r4, r3]
     456:	47b0      	blx	r6
		blinkCursor();
     458:	4b06      	ldr	r3, [pc, #24]	; (474 <IND+0x7c>)
     45a:	4798      	blx	r3
     45c:	e7e2      	b.n	424 <IND+0x2c>
     45e:	46c0      	nop			; (mov r8, r8)
     460:	200004e4 	.word	0x200004e4
     464:	200004e2 	.word	0x200004e2
     468:	200005ec 	.word	0x200005ec
     46c:	00003925 	.word	0x00003925
     470:	00003e81 	.word	0x00003e81
     474:	00003ca9 	.word	0x00003ca9
     478:	200004e7 	.word	0x200004e7

0000047c <NEL>:

void NEL()
{
     47c:	b570      	push	{r4, r5, r6, lr}
	//new line, moves down one line and to the
	//first column (CR,LF) scrolls if row = 24
	
	char tempCharacter;
	
	if(yCharPos < 23)
     47e:	4b18      	ldr	r3, [pc, #96]	; (4e0 <NEL+0x64>)
     480:	881a      	ldrh	r2, [r3, #0]
     482:	2a16      	cmp	r2, #22
     484:	d915      	bls.n	4b2 <NEL+0x36>
		drawChar(tempCharacter);
		blinkCursor();
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     486:	4c17      	ldr	r4, [pc, #92]	; (4e4 <NEL+0x68>)
     488:	8821      	ldrh	r1, [r4, #0]
     48a:	004b      	lsls	r3, r1, #1
     48c:	185b      	adds	r3, r3, r1
     48e:	00db      	lsls	r3, r3, #3
     490:	4915      	ldr	r1, [pc, #84]	; (4e8 <NEL+0x6c>)
     492:	18cb      	adds	r3, r1, r3
     494:	5c98      	ldrb	r0, [r3, r2]
     496:	4d15      	ldr	r5, [pc, #84]	; (4ec <NEL+0x70>)
     498:	47a8      	blx	r5
		newLine();
     49a:	4b15      	ldr	r3, [pc, #84]	; (4f0 <NEL+0x74>)
     49c:	4798      	blx	r3
		drawChar(0x00);
     49e:	2000      	movs	r0, #0
     4a0:	47a8      	blx	r5
		xCharPos = 0;
     4a2:	2300      	movs	r3, #0
     4a4:	8023      	strh	r3, [r4, #0]
		blinkCursor();
     4a6:	4b13      	ldr	r3, [pc, #76]	; (4f4 <NEL+0x78>)
     4a8:	4798      	blx	r3
	}
		
	currentState = stateGround;
     4aa:	2200      	movs	r2, #0
     4ac:	4b12      	ldr	r3, [pc, #72]	; (4f8 <NEL+0x7c>)
     4ae:	701a      	strb	r2, [r3, #0]
}
     4b0:	bd70      	pop	{r4, r5, r6, pc}
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     4b2:	4c0d      	ldr	r4, [pc, #52]	; (4e8 <NEL+0x6c>)
     4b4:	4d0b      	ldr	r5, [pc, #44]	; (4e4 <NEL+0x68>)
     4b6:	8829      	ldrh	r1, [r5, #0]
     4b8:	004b      	lsls	r3, r1, #1
     4ba:	185b      	adds	r3, r3, r1
     4bc:	00db      	lsls	r3, r3, #3
     4be:	18e3      	adds	r3, r4, r3
     4c0:	5c98      	ldrb	r0, [r3, r2]
     4c2:	4e0a      	ldr	r6, [pc, #40]	; (4ec <NEL+0x70>)
     4c4:	47b0      	blx	r6
		yCharPos++;
     4c6:	4a06      	ldr	r2, [pc, #24]	; (4e0 <NEL+0x64>)
     4c8:	8813      	ldrh	r3, [r2, #0]
     4ca:	3301      	adds	r3, #1
     4cc:	b29b      	uxth	r3, r3
     4ce:	8013      	strh	r3, [r2, #0]
		xCharPos = 0;
     4d0:	2200      	movs	r2, #0
     4d2:	802a      	strh	r2, [r5, #0]
		drawChar(tempCharacter);
     4d4:	5ce0      	ldrb	r0, [r4, r3]
     4d6:	47b0      	blx	r6
		blinkCursor();
     4d8:	4b06      	ldr	r3, [pc, #24]	; (4f4 <NEL+0x78>)
     4da:	4798      	blx	r3
     4dc:	e7e5      	b.n	4aa <NEL+0x2e>
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	200004e4 	.word	0x200004e4
     4e4:	200004e2 	.word	0x200004e2
     4e8:	200005ec 	.word	0x200005ec
     4ec:	00003925 	.word	0x00003925
     4f0:	00003e81 	.word	0x00003e81
     4f4:	00003ca9 	.word	0x00003ca9
     4f8:	200004e7 	.word	0x200004e7

000004fc <RI>:

void RI()
{
     4fc:	b570      	push	{r4, r5, r6, lr}
	scrolling will occur. in this case the active position will not move 
	beyond the first line of the display.
	*/
	char tempCharacter;

	if(yCharPos == topMargin)
     4fe:	4b15      	ldr	r3, [pc, #84]	; (554 <RI+0x58>)
     500:	781a      	ldrb	r2, [r3, #0]
     502:	4b15      	ldr	r3, [pc, #84]	; (558 <RI+0x5c>)
     504:	881b      	ldrh	r3, [r3, #0]
     506:	429a      	cmp	r2, r3
     508:	d005      	beq.n	516 <RI+0x1a>
		scrollDown(topMargin);
	
	}
	else
	{
		if(yCharPos > 0)
     50a:	2b00      	cmp	r3, #0
     50c:	d109      	bne.n	522 <RI+0x26>
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
			drawChar(tempCharacter);
			blinkCursor();
		}
	}
	currentState = stateGround;
     50e:	2200      	movs	r2, #0
     510:	4b12      	ldr	r3, [pc, #72]	; (55c <RI+0x60>)
     512:	701a      	strb	r2, [r3, #0]
}
     514:	bd70      	pop	{r4, r5, r6, pc}
		scrollDown(topMargin);
     516:	4b0f      	ldr	r3, [pc, #60]	; (554 <RI+0x58>)
     518:	7818      	ldrb	r0, [r3, #0]
     51a:	b2c0      	uxtb	r0, r0
     51c:	4b10      	ldr	r3, [pc, #64]	; (560 <RI+0x64>)
     51e:	4798      	blx	r3
     520:	e7f5      	b.n	50e <RI+0x12>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
     522:	4c10      	ldr	r4, [pc, #64]	; (564 <RI+0x68>)
     524:	4d10      	ldr	r5, [pc, #64]	; (568 <RI+0x6c>)
     526:	8829      	ldrh	r1, [r5, #0]
     528:	004a      	lsls	r2, r1, #1
     52a:	1852      	adds	r2, r2, r1
     52c:	00d2      	lsls	r2, r2, #3
     52e:	18a2      	adds	r2, r4, r2
     530:	5cd0      	ldrb	r0, [r2, r3]
     532:	4e0e      	ldr	r6, [pc, #56]	; (56c <RI+0x70>)
     534:	47b0      	blx	r6
			yCharPos--;
     536:	4a08      	ldr	r2, [pc, #32]	; (558 <RI+0x5c>)
     538:	8813      	ldrh	r3, [r2, #0]
     53a:	3b01      	subs	r3, #1
     53c:	b29b      	uxth	r3, r3
     53e:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
     540:	8829      	ldrh	r1, [r5, #0]
     542:	004a      	lsls	r2, r1, #1
     544:	1852      	adds	r2, r2, r1
     546:	00d2      	lsls	r2, r2, #3
     548:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
     54a:	5ce0      	ldrb	r0, [r4, r3]
     54c:	47b0      	blx	r6
			blinkCursor();
     54e:	4b08      	ldr	r3, [pc, #32]	; (570 <RI+0x74>)
     550:	4798      	blx	r3
     552:	e7dc      	b.n	50e <RI+0x12>
     554:	20000029 	.word	0x20000029
     558:	200004e4 	.word	0x200004e4
     55c:	200004e7 	.word	0x200004e7
     560:	00003aed 	.word	0x00003aed
     564:	200005ec 	.word	0x200005ec
     568:	200004e2 	.word	0x200004e2
     56c:	00003925 	.word	0x00003925
     570:	00003ca9 	.word	0x00003ca9

00000574 <RIS>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     574:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     578:	4a03      	ldr	r2, [pc, #12]	; (588 <RIS+0x14>)
     57a:	4b04      	ldr	r3, [pc, #16]	; (58c <RIS+0x18>)
     57c:	60da      	str	r2, [r3, #12]
     57e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     582:	46c0      	nop			; (mov r8, r8)
     584:	e7fd      	b.n	582 <RIS+0xe>
     586:	46c0      	nop			; (mov r8, r8)
     588:	05fa0004 	.word	0x05fa0004
     58c:	e000ed00 	.word	0xe000ed00

00000590 <escState>:
{
     590:	b510      	push	{r4, lr}
	if(character == 0x37)		//ESC + 7 - (DECSC) -
     592:	2837      	cmp	r0, #55	; 0x37
     594:	d021      	beq.n	5da <escState+0x4a>
	else if(character == 0x38)		//ESC + 8 - (DECRC) -
     596:	2838      	cmp	r0, #56	; 0x38
     598:	d022      	beq.n	5e0 <escState+0x50>
	else if(character == 0x44)		//ESC + D - (IND) - 
     59a:	2844      	cmp	r0, #68	; 0x44
     59c:	d023      	beq.n	5e6 <escState+0x56>
	else if(character == 0x45)		//ESC + E - (NEL) -
     59e:	2845      	cmp	r0, #69	; 0x45
     5a0:	d024      	beq.n	5ec <escState+0x5c>
	else if(character == 0x48)		//ESC + H - (HTS) - 
     5a2:	2848      	cmp	r0, #72	; 0x48
     5a4:	d025      	beq.n	5f2 <escState+0x62>
	else if(character == 0x4D)		//ESC + M - (RI)
     5a6:	284d      	cmp	r0, #77	; 0x4d
     5a8:	d027      	beq.n	5fa <escState+0x6a>
	else if(character == 0x59)		//ESC + Z (DECID)
     5aa:	2859      	cmp	r0, #89	; 0x59
     5ac:	d028      	beq.n	600 <escState+0x70>
	else if(character == 0x63)		//ESC + c - (RIS)
     5ae:	2863      	cmp	r0, #99	; 0x63
     5b0:	d02e      	beq.n	610 <escState+0x80>
	else if(character == 0x3E)		//ESC >
     5b2:	283e      	cmp	r0, #62	; 0x3e
     5b4:	d02e      	beq.n	614 <escState+0x84>
	else if(character == 0x3D)		//ESC =
     5b6:	283d      	cmp	r0, #61	; 0x3d
     5b8:	d030      	beq.n	61c <escState+0x8c>
	else if(character == 0x5D)		//ESC ]
     5ba:	285d      	cmp	r0, #93	; 0x5d
     5bc:	d032      	beq.n	624 <escState+0x94>
	else if(character == 0x23 || character == 0x25 || character == 0x28 ||
     5be:	22fd      	movs	r2, #253	; 0xfd
     5c0:	0003      	movs	r3, r0
     5c2:	3b23      	subs	r3, #35	; 0x23
     5c4:	4213      	tst	r3, r2
     5c6:	d031      	beq.n	62c <escState+0x9c>
     5c8:	3b05      	subs	r3, #5
     5ca:	2b01      	cmp	r3, #1
     5cc:	d92e      	bls.n	62c <escState+0x9c>
	else if(character == 0x5B)
     5ce:	285b      	cmp	r0, #91	; 0x5b
     5d0:	d032      	beq.n	638 <escState+0xa8>
		currentState = stateGround;
     5d2:	2200      	movs	r2, #0
     5d4:	4b1a      	ldr	r3, [pc, #104]	; (640 <escState+0xb0>)
     5d6:	701a      	strb	r2, [r3, #0]
}
     5d8:	e02d      	b.n	636 <escState+0xa6>
		SC();
     5da:	4b1a      	ldr	r3, [pc, #104]	; (644 <escState+0xb4>)
     5dc:	4798      	blx	r3
     5de:	e02a      	b.n	636 <escState+0xa6>
		RC();
     5e0:	4b19      	ldr	r3, [pc, #100]	; (648 <escState+0xb8>)
     5e2:	4798      	blx	r3
     5e4:	e027      	b.n	636 <escState+0xa6>
		IND();			
     5e6:	4b19      	ldr	r3, [pc, #100]	; (64c <escState+0xbc>)
     5e8:	4798      	blx	r3
     5ea:	e024      	b.n	636 <escState+0xa6>
		NEL();
     5ec:	4b18      	ldr	r3, [pc, #96]	; (650 <escState+0xc0>)
     5ee:	4798      	blx	r3
     5f0:	e021      	b.n	636 <escState+0xa6>
}

void HTS()
{
	//set tab stop at current column, unsupported now
	currentState = stateGround;
     5f2:	2200      	movs	r2, #0
     5f4:	4b12      	ldr	r3, [pc, #72]	; (640 <escState+0xb0>)
     5f6:	701a      	strb	r2, [r3, #0]
     5f8:	e01d      	b.n	636 <escState+0xa6>
		RI();
     5fa:	4b16      	ldr	r3, [pc, #88]	; (654 <escState+0xc4>)
     5fc:	4798      	blx	r3
     5fe:	e01a      	b.n	636 <escState+0xa6>
		printf("%s",DECIDreturn);
     600:	4915      	ldr	r1, [pc, #84]	; (658 <escState+0xc8>)
     602:	4816      	ldr	r0, [pc, #88]	; (65c <escState+0xcc>)
     604:	4b16      	ldr	r3, [pc, #88]	; (660 <escState+0xd0>)
     606:	4798      	blx	r3
		currentState = stateGround;
     608:	2200      	movs	r2, #0
     60a:	4b0d      	ldr	r3, [pc, #52]	; (640 <escState+0xb0>)
     60c:	701a      	strb	r2, [r3, #0]
     60e:	e012      	b.n	636 <escState+0xa6>
		RIS();
     610:	4b14      	ldr	r3, [pc, #80]	; (664 <escState+0xd4>)
     612:	4798      	blx	r3
		currentState = stateGround;
     614:	2200      	movs	r2, #0
     616:	4b0a      	ldr	r3, [pc, #40]	; (640 <escState+0xb0>)
     618:	701a      	strb	r2, [r3, #0]
     61a:	e00c      	b.n	636 <escState+0xa6>
		currentState = stateGround;
     61c:	2200      	movs	r2, #0
     61e:	4b08      	ldr	r3, [pc, #32]	; (640 <escState+0xb0>)
     620:	701a      	strb	r2, [r3, #0]
     622:	e008      	b.n	636 <escState+0xa6>
		currentState = stateGround;
     624:	2200      	movs	r2, #0
     626:	4b06      	ldr	r3, [pc, #24]	; (640 <escState+0xb0>)
     628:	701a      	strb	r2, [r3, #0]
     62a:	e004      	b.n	636 <escState+0xa6>
		stateEnterBuffer = character;
     62c:	4b0e      	ldr	r3, [pc, #56]	; (668 <escState+0xd8>)
     62e:	7018      	strb	r0, [r3, #0]
		currentState = stateESCinter;
     630:	2202      	movs	r2, #2
     632:	4b03      	ldr	r3, [pc, #12]	; (640 <escState+0xb0>)
     634:	701a      	strb	r2, [r3, #0]
}
     636:	bd10      	pop	{r4, pc}
		currentState = stateCSIentry;
     638:	2203      	movs	r2, #3
     63a:	4b01      	ldr	r3, [pc, #4]	; (640 <escState+0xb0>)
     63c:	701a      	strb	r2, [r3, #0]
     63e:	e7fa      	b.n	636 <escState+0xa6>
     640:	200004e7 	.word	0x200004e7
     644:	0000036d 	.word	0x0000036d
     648:	00000399 	.word	0x00000399
     64c:	000003f9 	.word	0x000003f9
     650:	0000047d 	.word	0x0000047d
     654:	000004fd 	.word	0x000004fd
     658:	000069d0 	.word	0x000069d0
     65c:	00006a04 	.word	0x00006a04
     660:	00005529 	.word	0x00005529
     664:	00000575 	.word	0x00000575
     668:	2000056e 	.word	0x2000056e

0000066c <CUU>:

/************************************************************************/
/*    CSI mnemonic functions                                            */
/************************************************************************/
void CUU() // Cursor Up*
{
     66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     66e:	4b20      	ldr	r3, [pc, #128]	; (6f0 <CUU+0x84>)
     670:	4798      	blx	r3
	{
		parameter = 1;
     672:	2401      	movs	r4, #1
	if(isEmptyParam())
     674:	2800      	cmp	r0, #0
     676:	d01d      	beq.n	6b4 <CUU+0x48>
		{
			parameter = 1;
		}
	}
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     678:	4b1e      	ldr	r3, [pc, #120]	; (6f4 <CUU+0x88>)
     67a:	881a      	ldrh	r2, [r3, #0]
     67c:	1b13      	subs	r3, r2, r4
     67e:	2b18      	cmp	r3, #24
     680:	d91e      	bls.n	6c0 <CUU+0x54>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     682:	4c1d      	ldr	r4, [pc, #116]	; (6f8 <CUU+0x8c>)
     684:	4e1d      	ldr	r6, [pc, #116]	; (6fc <CUU+0x90>)
     686:	8831      	ldrh	r1, [r6, #0]
     688:	004b      	lsls	r3, r1, #1
     68a:	185b      	adds	r3, r3, r1
     68c:	00db      	lsls	r3, r3, #3
     68e:	18e3      	adds	r3, r4, r3
     690:	5c98      	ldrb	r0, [r3, r2]
     692:	4d1b      	ldr	r5, [pc, #108]	; (700 <CUU+0x94>)
     694:	47a8      	blx	r5
		yCharPos = 0;
     696:	2200      	movs	r2, #0
     698:	4b16      	ldr	r3, [pc, #88]	; (6f4 <CUU+0x88>)
     69a:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     69c:	8832      	ldrh	r2, [r6, #0]
     69e:	0053      	lsls	r3, r2, #1
     6a0:	189b      	adds	r3, r3, r2
     6a2:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     6a4:	5d18      	ldrb	r0, [r3, r4]
     6a6:	47a8      	blx	r5
	}
	
	blinkCursor();
     6a8:	4b16      	ldr	r3, [pc, #88]	; (704 <CUU+0x98>)
     6aa:	4798      	blx	r3
	currentState = stateGround;
     6ac:	2200      	movs	r2, #0
     6ae:	4b16      	ldr	r3, [pc, #88]	; (708 <CUU+0x9c>)
     6b0:	701a      	strb	r2, [r3, #0]
}
     6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     6b4:	4b15      	ldr	r3, [pc, #84]	; (70c <CUU+0xa0>)
     6b6:	4798      	blx	r3
     6b8:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     6ba:	d1dd      	bne.n	678 <CUU+0xc>
			parameter = 1;
     6bc:	3401      	adds	r4, #1
     6be:	e7db      	b.n	678 <CUU+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     6c0:	4d0d      	ldr	r5, [pc, #52]	; (6f8 <CUU+0x8c>)
     6c2:	4e0e      	ldr	r6, [pc, #56]	; (6fc <CUU+0x90>)
     6c4:	8831      	ldrh	r1, [r6, #0]
     6c6:	004b      	lsls	r3, r1, #1
     6c8:	185b      	adds	r3, r3, r1
     6ca:	00db      	lsls	r3, r3, #3
     6cc:	18eb      	adds	r3, r5, r3
     6ce:	5c98      	ldrb	r0, [r3, r2]
     6d0:	4f0b      	ldr	r7, [pc, #44]	; (700 <CUU+0x94>)
     6d2:	47b8      	blx	r7
		yCharPos = yCharPos - parameter;
     6d4:	4b07      	ldr	r3, [pc, #28]	; (6f4 <CUU+0x88>)
     6d6:	8818      	ldrh	r0, [r3, #0]
     6d8:	1b04      	subs	r4, r0, r4
     6da:	b2a4      	uxth	r4, r4
     6dc:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     6de:	8832      	ldrh	r2, [r6, #0]
     6e0:	0053      	lsls	r3, r2, #1
     6e2:	189b      	adds	r3, r3, r2
     6e4:	00db      	lsls	r3, r3, #3
     6e6:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     6e8:	5d28      	ldrb	r0, [r5, r4]
     6ea:	47b8      	blx	r7
     6ec:	e7dc      	b.n	6a8 <CUU+0x3c>
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	00000241 	.word	0x00000241
     6f4:	200004e4 	.word	0x200004e4
     6f8:	200005ec 	.word	0x200005ec
     6fc:	200004e2 	.word	0x200004e2
     700:	00003925 	.word	0x00003925
     704:	00003ca9 	.word	0x00003ca9
     708:	200004e7 	.word	0x200004e7
     70c:	00000255 	.word	0x00000255

00000710 <CUD>:

void CUD() //Cursor Down *
{
     710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     712:	4b20      	ldr	r3, [pc, #128]	; (794 <CUD+0x84>)
     714:	4798      	blx	r3
	{
		parameter = 1;
     716:	2401      	movs	r4, #1
	if(isEmptyParam())
     718:	2800      	cmp	r0, #0
     71a:	d01e      	beq.n	75a <CUD+0x4a>
		if(parameter == 0)
		{
			parameter = 1;
		}
	}
	if((yCharPos + parameter) <= 23)
     71c:	4b1e      	ldr	r3, [pc, #120]	; (798 <CUD+0x88>)
     71e:	881a      	ldrh	r2, [r3, #0]
     720:	18a3      	adds	r3, r4, r2
     722:	2b17      	cmp	r3, #23
     724:	dd1f      	ble.n	766 <CUD+0x56>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     726:	4c1d      	ldr	r4, [pc, #116]	; (79c <CUD+0x8c>)
     728:	4e1d      	ldr	r6, [pc, #116]	; (7a0 <CUD+0x90>)
     72a:	8831      	ldrh	r1, [r6, #0]
     72c:	004b      	lsls	r3, r1, #1
     72e:	185b      	adds	r3, r3, r1
     730:	00db      	lsls	r3, r3, #3
     732:	18e3      	adds	r3, r4, r3
     734:	5c98      	ldrb	r0, [r3, r2]
     736:	4d1b      	ldr	r5, [pc, #108]	; (7a4 <CUD+0x94>)
     738:	47a8      	blx	r5
		yCharPos = 23;
     73a:	2217      	movs	r2, #23
     73c:	4b16      	ldr	r3, [pc, #88]	; (798 <CUD+0x88>)
     73e:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     740:	8832      	ldrh	r2, [r6, #0]
     742:	0053      	lsls	r3, r2, #1
     744:	189b      	adds	r3, r3, r2
     746:	00db      	lsls	r3, r3, #3
     748:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     74a:	7dd8      	ldrb	r0, [r3, #23]
     74c:	47a8      	blx	r5
	}

	blinkCursor();
     74e:	4b16      	ldr	r3, [pc, #88]	; (7a8 <CUD+0x98>)
     750:	4798      	blx	r3
	currentState = stateGround;
     752:	2200      	movs	r2, #0
     754:	4b15      	ldr	r3, [pc, #84]	; (7ac <CUD+0x9c>)
     756:	701a      	strb	r2, [r3, #0]
}
     758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     75a:	4b15      	ldr	r3, [pc, #84]	; (7b0 <CUD+0xa0>)
     75c:	4798      	blx	r3
     75e:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     760:	d1dc      	bne.n	71c <CUD+0xc>
			parameter = 1;
     762:	3401      	adds	r4, #1
     764:	e7da      	b.n	71c <CUD+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     766:	4d0d      	ldr	r5, [pc, #52]	; (79c <CUD+0x8c>)
     768:	4e0d      	ldr	r6, [pc, #52]	; (7a0 <CUD+0x90>)
     76a:	8831      	ldrh	r1, [r6, #0]
     76c:	004b      	lsls	r3, r1, #1
     76e:	185b      	adds	r3, r3, r1
     770:	00db      	lsls	r3, r3, #3
     772:	18eb      	adds	r3, r5, r3
     774:	5c98      	ldrb	r0, [r3, r2]
     776:	4f0b      	ldr	r7, [pc, #44]	; (7a4 <CUD+0x94>)
     778:	47b8      	blx	r7
		yCharPos = yCharPos + parameter;
     77a:	4b07      	ldr	r3, [pc, #28]	; (798 <CUD+0x88>)
     77c:	8818      	ldrh	r0, [r3, #0]
     77e:	1904      	adds	r4, r0, r4
     780:	b2a4      	uxth	r4, r4
     782:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     784:	8832      	ldrh	r2, [r6, #0]
     786:	0053      	lsls	r3, r2, #1
     788:	189b      	adds	r3, r3, r2
     78a:	00db      	lsls	r3, r3, #3
     78c:	18ed      	adds	r5, r5, r3
		drawChar(tempCharacter);
     78e:	5d28      	ldrb	r0, [r5, r4]
     790:	47b8      	blx	r7
     792:	e7dc      	b.n	74e <CUD+0x3e>
     794:	00000241 	.word	0x00000241
     798:	200004e4 	.word	0x200004e4
     79c:	200005ec 	.word	0x200005ec
     7a0:	200004e2 	.word	0x200004e2
     7a4:	00003925 	.word	0x00003925
     7a8:	00003ca9 	.word	0x00003ca9
     7ac:	200004e7 	.word	0x200004e7
     7b0:	00000255 	.word	0x00000255

000007b4 <CUF>:

void CUF() //Cursor Forward *
{
     7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     7b6:	4b21      	ldr	r3, [pc, #132]	; (83c <CUF+0x88>)
     7b8:	4798      	blx	r3
	{
		parameter = 1;
     7ba:	2401      	movs	r4, #1
	if(isEmptyParam())
     7bc:	2800      	cmp	r0, #0
     7be:	d01f      	beq.n	800 <CUF+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos + parameter <= 79)
     7c0:	4b1f      	ldr	r3, [pc, #124]	; (840 <CUF+0x8c>)
     7c2:	881a      	ldrh	r2, [r3, #0]
     7c4:	18a3      	adds	r3, r4, r2
     7c6:	2b4f      	cmp	r3, #79	; 0x4f
     7c8:	dd20      	ble.n	80c <CUF+0x58>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     7ca:	4c1e      	ldr	r4, [pc, #120]	; (844 <CUF+0x90>)
     7cc:	4e1e      	ldr	r6, [pc, #120]	; (848 <CUF+0x94>)
     7ce:	8831      	ldrh	r1, [r6, #0]
     7d0:	0053      	lsls	r3, r2, #1
     7d2:	189b      	adds	r3, r3, r2
     7d4:	00db      	lsls	r3, r3, #3
     7d6:	18e3      	adds	r3, r4, r3
     7d8:	5c58      	ldrb	r0, [r3, r1]
     7da:	4d1c      	ldr	r5, [pc, #112]	; (84c <CUF+0x98>)
     7dc:	47a8      	blx	r5
		xCharPos = 79;
     7de:	224f      	movs	r2, #79	; 0x4f
     7e0:	4b17      	ldr	r3, [pc, #92]	; (840 <CUF+0x8c>)
     7e2:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     7e4:	8833      	ldrh	r3, [r6, #0]
     7e6:	18e4      	adds	r4, r4, r3
     7e8:	23ed      	movs	r3, #237	; 0xed
     7ea:	00db      	lsls	r3, r3, #3
     7ec:	469c      	mov	ip, r3
     7ee:	4464      	add	r4, ip
		drawChar(tempCharacter);	
     7f0:	7820      	ldrb	r0, [r4, #0]
     7f2:	47a8      	blx	r5
	}
	blinkCursor();
     7f4:	4b16      	ldr	r3, [pc, #88]	; (850 <CUF+0x9c>)
     7f6:	4798      	blx	r3
	currentState = stateGround;
     7f8:	2200      	movs	r2, #0
     7fa:	4b16      	ldr	r3, [pc, #88]	; (854 <CUF+0xa0>)
     7fc:	701a      	strb	r2, [r3, #0]
}
     7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     800:	4b15      	ldr	r3, [pc, #84]	; (858 <CUF+0xa4>)
     802:	4798      	blx	r3
     804:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     806:	d1db      	bne.n	7c0 <CUF+0xc>
			parameter = 1;
     808:	3401      	adds	r4, #1
     80a:	e7d9      	b.n	7c0 <CUF+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     80c:	4d0d      	ldr	r5, [pc, #52]	; (844 <CUF+0x90>)
     80e:	4e0e      	ldr	r6, [pc, #56]	; (848 <CUF+0x94>)
     810:	8831      	ldrh	r1, [r6, #0]
     812:	0053      	lsls	r3, r2, #1
     814:	189b      	adds	r3, r3, r2
     816:	00db      	lsls	r3, r3, #3
     818:	18eb      	adds	r3, r5, r3
     81a:	5c58      	ldrb	r0, [r3, r1]
     81c:	4f0b      	ldr	r7, [pc, #44]	; (84c <CUF+0x98>)
     81e:	47b8      	blx	r7
		xCharPos = xCharPos + parameter;
     820:	4b07      	ldr	r3, [pc, #28]	; (840 <CUF+0x8c>)
     822:	8818      	ldrh	r0, [r3, #0]
     824:	1904      	adds	r4, r0, r4
     826:	b2a4      	uxth	r4, r4
     828:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     82a:	8833      	ldrh	r3, [r6, #0]
     82c:	0060      	lsls	r0, r4, #1
     82e:	1904      	adds	r4, r0, r4
     830:	00e4      	lsls	r4, r4, #3
     832:	192c      	adds	r4, r5, r4
		drawChar(tempCharacter);
     834:	5ce0      	ldrb	r0, [r4, r3]
     836:	47b8      	blx	r7
     838:	e7dc      	b.n	7f4 <CUF+0x40>
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	00000241 	.word	0x00000241
     840:	200004e2 	.word	0x200004e2
     844:	200005ec 	.word	0x200005ec
     848:	200004e4 	.word	0x200004e4
     84c:	00003925 	.word	0x00003925
     850:	00003ca9 	.word	0x00003ca9
     854:	200004e7 	.word	0x200004e7
     858:	00000255 	.word	0x00000255

0000085c <CUB>:

void CUB() //Cursor Backward *
{
     85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     85e:	4b1e      	ldr	r3, [pc, #120]	; (8d8 <CUB+0x7c>)
     860:	4798      	blx	r3
	{
		parameter = 1;
     862:	2601      	movs	r6, #1
	if(isEmptyParam())
     864:	2800      	cmp	r0, #0
     866:	d01f      	beq.n	8a8 <CUB+0x4c>
		{
			parameter = 1;
		}
	}
	
	if(xCharPos - parameter >= 0)
     868:	4b1c      	ldr	r3, [pc, #112]	; (8dc <CUB+0x80>)
     86a:	881a      	ldrh	r2, [r3, #0]
     86c:	1b93      	subs	r3, r2, r6
     86e:	d421      	bmi.n	8b4 <CUB+0x58>
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     870:	4c1b      	ldr	r4, [pc, #108]	; (8e0 <CUB+0x84>)
     872:	4d1c      	ldr	r5, [pc, #112]	; (8e4 <CUB+0x88>)
     874:	8829      	ldrh	r1, [r5, #0]
     876:	0053      	lsls	r3, r2, #1
     878:	189b      	adds	r3, r3, r2
     87a:	00db      	lsls	r3, r3, #3
     87c:	18e3      	adds	r3, r4, r3
     87e:	5c58      	ldrb	r0, [r3, r1]
     880:	4f19      	ldr	r7, [pc, #100]	; (8e8 <CUB+0x8c>)
     882:	47b8      	blx	r7
		xCharPos = xCharPos - parameter;
     884:	4b15      	ldr	r3, [pc, #84]	; (8dc <CUB+0x80>)
     886:	8818      	ldrh	r0, [r3, #0]
     888:	1b80      	subs	r0, r0, r6
     88a:	b280      	uxth	r0, r0
     88c:	8018      	strh	r0, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     88e:	882a      	ldrh	r2, [r5, #0]
     890:	0043      	lsls	r3, r0, #1
     892:	1818      	adds	r0, r3, r0
     894:	00c0      	lsls	r0, r0, #3
     896:	1820      	adds	r0, r4, r0
		drawChar(tempCharacter);
     898:	5c80      	ldrb	r0, [r0, r2]
     89a:	47b8      	blx	r7
		drawChar(consoleDisplay[xCharPos][yCharPos]);
		xCharPos = 0;
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	blinkCursor();
     89c:	4b13      	ldr	r3, [pc, #76]	; (8ec <CUB+0x90>)
     89e:	4798      	blx	r3
	currentState = stateGround;
     8a0:	2200      	movs	r2, #0
     8a2:	4b13      	ldr	r3, [pc, #76]	; (8f0 <CUB+0x94>)
     8a4:	701a      	strb	r2, [r3, #0]
}
     8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     8a8:	4b12      	ldr	r3, [pc, #72]	; (8f4 <CUB+0x98>)
     8aa:	4798      	blx	r3
     8ac:	1e06      	subs	r6, r0, #0
		if(parameter == 0)
     8ae:	d1db      	bne.n	868 <CUB+0xc>
			parameter = 1;
     8b0:	3601      	adds	r6, #1
     8b2:	e7d9      	b.n	868 <CUB+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     8b4:	4d0a      	ldr	r5, [pc, #40]	; (8e0 <CUB+0x84>)
     8b6:	4e0b      	ldr	r6, [pc, #44]	; (8e4 <CUB+0x88>)
     8b8:	8831      	ldrh	r1, [r6, #0]
     8ba:	0053      	lsls	r3, r2, #1
     8bc:	189b      	adds	r3, r3, r2
     8be:	00db      	lsls	r3, r3, #3
     8c0:	18eb      	adds	r3, r5, r3
     8c2:	5c58      	ldrb	r0, [r3, r1]
     8c4:	4c08      	ldr	r4, [pc, #32]	; (8e8 <CUB+0x8c>)
     8c6:	47a0      	blx	r4
		xCharPos = 0;
     8c8:	2200      	movs	r2, #0
     8ca:	4b04      	ldr	r3, [pc, #16]	; (8dc <CUB+0x80>)
     8cc:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     8ce:	8833      	ldrh	r3, [r6, #0]
		drawChar(tempCharacter);
     8d0:	5ce8      	ldrb	r0, [r5, r3]
     8d2:	47a0      	blx	r4
     8d4:	e7e2      	b.n	89c <CUB+0x40>
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	00000241 	.word	0x00000241
     8dc:	200004e2 	.word	0x200004e2
     8e0:	200005ec 	.word	0x200005ec
     8e4:	200004e4 	.word	0x200004e4
     8e8:	00003925 	.word	0x00003925
     8ec:	00003ca9 	.word	0x00003ca9
     8f0:	200004e7 	.word	0x200004e7
     8f4:	00000255 	.word	0x00000255

000008f8 <CNL>:

void CNL() //Cursor Next Line *
{
     8f8:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     8fa:	4b1d      	ldr	r3, [pc, #116]	; (970 <CNL+0x78>)
     8fc:	4798      	blx	r3
	{
		parameter = 1;
     8fe:	2401      	movs	r4, #1
	if(isEmptyParam())
     900:	2800      	cmp	r0, #0
     902:	d01c      	beq.n	93e <CNL+0x46>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     904:	2200      	movs	r2, #0
     906:	4b1b      	ldr	r3, [pc, #108]	; (974 <CNL+0x7c>)
     908:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos + parameter) <= 23)
     90a:	4b1b      	ldr	r3, [pc, #108]	; (978 <CNL+0x80>)
     90c:	881b      	ldrh	r3, [r3, #0]
     90e:	18e2      	adds	r2, r4, r3
     910:	2a17      	cmp	r2, #23
     912:	dd1a      	ble.n	94a <CNL+0x52>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     914:	4c19      	ldr	r4, [pc, #100]	; (97c <CNL+0x84>)
     916:	5ce0      	ldrb	r0, [r4, r3]
     918:	4d19      	ldr	r5, [pc, #100]	; (980 <CNL+0x88>)
     91a:	47a8      	blx	r5
		yCharPos = 23;
     91c:	2217      	movs	r2, #23
     91e:	4b16      	ldr	r3, [pc, #88]	; (978 <CNL+0x80>)
     920:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     922:	4b14      	ldr	r3, [pc, #80]	; (974 <CNL+0x7c>)
     924:	881a      	ldrh	r2, [r3, #0]
     926:	0053      	lsls	r3, r2, #1
     928:	189b      	adds	r3, r3, r2
     92a:	00db      	lsls	r3, r3, #3
     92c:	18e3      	adds	r3, r4, r3
		drawChar(tempCharacter);
     92e:	7dd8      	ldrb	r0, [r3, #23]
     930:	47a8      	blx	r5
	}

	blinkCursor();
     932:	4b14      	ldr	r3, [pc, #80]	; (984 <CNL+0x8c>)
     934:	4798      	blx	r3
	currentState = stateGround;	
     936:	2200      	movs	r2, #0
     938:	4b13      	ldr	r3, [pc, #76]	; (988 <CNL+0x90>)
     93a:	701a      	strb	r2, [r3, #0]
}
     93c:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     93e:	4b13      	ldr	r3, [pc, #76]	; (98c <CNL+0x94>)
     940:	4798      	blx	r3
     942:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     944:	d1de      	bne.n	904 <CNL+0xc>
			parameter = 1;
     946:	3401      	adds	r4, #1
     948:	e7dc      	b.n	904 <CNL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     94a:	4d0c      	ldr	r5, [pc, #48]	; (97c <CNL+0x84>)
     94c:	5ce8      	ldrb	r0, [r5, r3]
     94e:	4e0c      	ldr	r6, [pc, #48]	; (980 <CNL+0x88>)
     950:	47b0      	blx	r6
		yCharPos = yCharPos + parameter;
     952:	4b09      	ldr	r3, [pc, #36]	; (978 <CNL+0x80>)
     954:	8818      	ldrh	r0, [r3, #0]
     956:	1904      	adds	r4, r0, r4
     958:	b2a4      	uxth	r4, r4
     95a:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     95c:	4b05      	ldr	r3, [pc, #20]	; (974 <CNL+0x7c>)
     95e:	881a      	ldrh	r2, [r3, #0]
     960:	0053      	lsls	r3, r2, #1
     962:	189b      	adds	r3, r3, r2
     964:	00db      	lsls	r3, r3, #3
     966:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     968:	5d18      	ldrb	r0, [r3, r4]
     96a:	47b0      	blx	r6
     96c:	e7e1      	b.n	932 <CNL+0x3a>
     96e:	46c0      	nop			; (mov r8, r8)
     970:	00000241 	.word	0x00000241
     974:	200004e2 	.word	0x200004e2
     978:	200004e4 	.word	0x200004e4
     97c:	200005ec 	.word	0x200005ec
     980:	00003925 	.word	0x00003925
     984:	00003ca9 	.word	0x00003ca9
     988:	200004e7 	.word	0x200004e7
     98c:	00000255 	.word	0x00000255

00000990 <CPL>:

void CPL() //Cursor Preceding Line *
{
     990:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     992:	4b1c      	ldr	r3, [pc, #112]	; (a04 <CPL+0x74>)
     994:	4798      	blx	r3
	{
		parameter = 1;
     996:	2401      	movs	r4, #1
	if(isEmptyParam())
     998:	2800      	cmp	r0, #0
     99a:	d01b      	beq.n	9d4 <CPL+0x44>
		{
			parameter = 1;
		}
	}
	
	xCharPos = 0;
     99c:	2200      	movs	r2, #0
     99e:	4b1a      	ldr	r3, [pc, #104]	; (a08 <CPL+0x78>)
     9a0:	801a      	strh	r2, [r3, #0]
	
	if((yCharPos - parameter) >= 0 && (yCharPos - parameter) <= 24)
     9a2:	4b1a      	ldr	r3, [pc, #104]	; (a0c <CPL+0x7c>)
     9a4:	881b      	ldrh	r3, [r3, #0]
     9a6:	1b1a      	subs	r2, r3, r4
     9a8:	2a18      	cmp	r2, #24
     9aa:	d919      	bls.n	9e0 <CPL+0x50>
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
		drawChar(tempCharacter);
	}
	else
	{
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     9ac:	4d18      	ldr	r5, [pc, #96]	; (a10 <CPL+0x80>)
     9ae:	5ce8      	ldrb	r0, [r5, r3]
     9b0:	4c18      	ldr	r4, [pc, #96]	; (a14 <CPL+0x84>)
     9b2:	47a0      	blx	r4
		yCharPos = 0;
     9b4:	2200      	movs	r2, #0
     9b6:	4b15      	ldr	r3, [pc, #84]	; (a0c <CPL+0x7c>)
     9b8:	801a      	strh	r2, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     9ba:	4b13      	ldr	r3, [pc, #76]	; (a08 <CPL+0x78>)
     9bc:	881a      	ldrh	r2, [r3, #0]
     9be:	0053      	lsls	r3, r2, #1
     9c0:	189b      	adds	r3, r3, r2
     9c2:	00db      	lsls	r3, r3, #3
		drawChar(tempCharacter);
     9c4:	5d58      	ldrb	r0, [r3, r5]
     9c6:	47a0      	blx	r4
	}
	
	blinkCursor();
     9c8:	4b13      	ldr	r3, [pc, #76]	; (a18 <CPL+0x88>)
     9ca:	4798      	blx	r3
	currentState = stateGround;
     9cc:	2200      	movs	r2, #0
     9ce:	4b13      	ldr	r3, [pc, #76]	; (a1c <CPL+0x8c>)
     9d0:	701a      	strb	r2, [r3, #0]
	
}
     9d2:	bd70      	pop	{r4, r5, r6, pc}
		parameter = dequeueParam();
     9d4:	4b12      	ldr	r3, [pc, #72]	; (a20 <CPL+0x90>)
     9d6:	4798      	blx	r3
     9d8:	1e04      	subs	r4, r0, #0
		if(parameter == 0)
     9da:	d1df      	bne.n	99c <CPL+0xc>
			parameter = 1;
     9dc:	3401      	adds	r4, #1
     9de:	e7dd      	b.n	99c <CPL+0xc>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
     9e0:	4d0b      	ldr	r5, [pc, #44]	; (a10 <CPL+0x80>)
     9e2:	5ce8      	ldrb	r0, [r5, r3]
     9e4:	4e0b      	ldr	r6, [pc, #44]	; (a14 <CPL+0x84>)
     9e6:	47b0      	blx	r6
		yCharPos = yCharPos - parameter;
     9e8:	4b08      	ldr	r3, [pc, #32]	; (a0c <CPL+0x7c>)
     9ea:	8818      	ldrh	r0, [r3, #0]
     9ec:	1b04      	subs	r4, r0, r4
     9ee:	b2a4      	uxth	r4, r4
     9f0:	801c      	strh	r4, [r3, #0]
		tempCharacter = consoleDisplay[xCharPos][yCharPos];
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <CPL+0x78>)
     9f4:	881a      	ldrh	r2, [r3, #0]
     9f6:	0053      	lsls	r3, r2, #1
     9f8:	189b      	adds	r3, r3, r2
     9fa:	00db      	lsls	r3, r3, #3
     9fc:	18eb      	adds	r3, r5, r3
		drawChar(tempCharacter);
     9fe:	5d18      	ldrb	r0, [r3, r4]
     a00:	47b0      	blx	r6
     a02:	e7e1      	b.n	9c8 <CPL+0x38>
     a04:	00000241 	.word	0x00000241
     a08:	200004e2 	.word	0x200004e2
     a0c:	200004e4 	.word	0x200004e4
     a10:	200005ec 	.word	0x200005ec
     a14:	00003925 	.word	0x00003925
     a18:	00003ca9 	.word	0x00003ca9
     a1c:	200004e7 	.word	0x200004e7
     a20:	00000255 	.word	0x00000255

00000a24 <CHA>:

void CHA() //Cursor Horizontal Absolute *
{
     a24:	b5f0      	push	{r4, r5, r6, r7, lr}
     a26:	46c6      	mov	lr, r8
     a28:	b500      	push	{lr}
	unsigned char tempCharacter;
	uint8_t parameter = 0;
	
	if(isEmptyParam())
     a2a:	4b17      	ldr	r3, [pc, #92]	; (a88 <CHA+0x64>)
     a2c:	4798      	blx	r3
	{
		parameter = 1;
     a2e:	2501      	movs	r5, #1
	if(isEmptyParam())
     a30:	2800      	cmp	r0, #0
     a32:	d01c      	beq.n	a6e <CHA+0x4a>
		{
			parameter = 79;
		}
	}
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     a34:	4c15      	ldr	r4, [pc, #84]	; (a8c <CHA+0x68>)
     a36:	4f16      	ldr	r7, [pc, #88]	; (a90 <CHA+0x6c>)
     a38:	883a      	ldrh	r2, [r7, #0]
     a3a:	4e16      	ldr	r6, [pc, #88]	; (a94 <CHA+0x70>)
     a3c:	8831      	ldrh	r1, [r6, #0]
     a3e:	0053      	lsls	r3, r2, #1
     a40:	189b      	adds	r3, r3, r2
     a42:	00db      	lsls	r3, r3, #3
     a44:	18e3      	adds	r3, r4, r3
     a46:	5c58      	ldrb	r0, [r3, r1]
     a48:	4b13      	ldr	r3, [pc, #76]	; (a98 <CHA+0x74>)
     a4a:	4698      	mov	r8, r3
     a4c:	4798      	blx	r3
	xCharPos = parameter;
     a4e:	803d      	strh	r5, [r7, #0]
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     a50:	8832      	ldrh	r2, [r6, #0]
     a52:	006b      	lsls	r3, r5, #1
     a54:	195b      	adds	r3, r3, r5
     a56:	00db      	lsls	r3, r3, #3
     a58:	18e3      	adds	r3, r4, r3
	drawChar(tempCharacter);
     a5a:	5c98      	ldrb	r0, [r3, r2]
     a5c:	47c0      	blx	r8
	
	blinkCursor();
     a5e:	4b0f      	ldr	r3, [pc, #60]	; (a9c <CHA+0x78>)
     a60:	4798      	blx	r3
	currentState = stateGround;
     a62:	2200      	movs	r2, #0
     a64:	4b0e      	ldr	r3, [pc, #56]	; (aa0 <CHA+0x7c>)
     a66:	701a      	strb	r2, [r3, #0]
}
     a68:	bc04      	pop	{r2}
     a6a:	4690      	mov	r8, r2
     a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		parameter = dequeueParam();
     a6e:	4b0d      	ldr	r3, [pc, #52]	; (aa4 <CHA+0x80>)
     a70:	4798      	blx	r3
     a72:	1e02      	subs	r2, r0, #0
		if(parameter > 0)
     a74:	d001      	beq.n	a7a <CHA+0x56>
			parameter--;  //need to decrement, because display is indexed at 0,0.
     a76:	3801      	subs	r0, #1
     a78:	b2c2      	uxtb	r2, r0
     a7a:	1c13      	adds	r3, r2, #0
     a7c:	2a4f      	cmp	r2, #79	; 0x4f
     a7e:	d900      	bls.n	a82 <CHA+0x5e>
     a80:	234f      	movs	r3, #79	; 0x4f
     a82:	b2dd      	uxtb	r5, r3
     a84:	e7d6      	b.n	a34 <CHA+0x10>
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	00000241 	.word	0x00000241
     a8c:	200005ec 	.word	0x200005ec
     a90:	200004e2 	.word	0x200004e2
     a94:	200004e4 	.word	0x200004e4
     a98:	00003925 	.word	0x00003925
     a9c:	00003ca9 	.word	0x00003ca9
     aa0:	200004e7 	.word	0x200004e7
     aa4:	00000255 	.word	0x00000255

00000aa8 <CUP>:

void CUP() //Cursor Position *
{
     aa8:	b570      	push	{r4, r5, r6, lr}
	unsigned char tempCharacter;
	uint8_t xTemp = 0;
	uint8_t yTemp = 0;
	
	yTemp = dequeueParam();
     aaa:	4d2a      	ldr	r5, [pc, #168]	; (b54 <CUP+0xac>)
     aac:	47a8      	blx	r5
     aae:	0006      	movs	r6, r0
     ab0:	0004      	movs	r4, r0
	xTemp = dequeueParam();
     ab2:	47a8      	blx	r5
     ab4:	0005      	movs	r5, r0
	
	//need to decrement, because display is indexed at 0,0.
	if(yTemp > 0)
     ab6:	2e00      	cmp	r6, #0
     ab8:	d001      	beq.n	abe <CUP+0x16>
		yTemp = yTemp - 1;
     aba:	3e01      	subs	r6, #1
     abc:	b2f4      	uxtb	r4, r6
		
	if(xTemp > 0)
     abe:	2d00      	cmp	r5, #0
     ac0:	d001      	beq.n	ac6 <CUP+0x1e>
		xTemp = xTemp - 1;
     ac2:	3801      	subs	r0, #1
     ac4:	b2c5      	uxtb	r5, r0
	
	drawChar(consoleDisplay[xCharPos][yCharPos]);
     ac6:	4b24      	ldr	r3, [pc, #144]	; (b58 <CUP+0xb0>)
     ac8:	881a      	ldrh	r2, [r3, #0]
     aca:	4b24      	ldr	r3, [pc, #144]	; (b5c <CUP+0xb4>)
     acc:	8819      	ldrh	r1, [r3, #0]
     ace:	0053      	lsls	r3, r2, #1
     ad0:	189b      	adds	r3, r3, r2
     ad2:	00db      	lsls	r3, r3, #3
     ad4:	4a22      	ldr	r2, [pc, #136]	; (b60 <CUP+0xb8>)
     ad6:	18d3      	adds	r3, r2, r3
     ad8:	5c58      	ldrb	r0, [r3, r1]
     ada:	4b22      	ldr	r3, [pc, #136]	; (b64 <CUP+0xbc>)
     adc:	4798      	blx	r3
	
	if(originMode == DISPLACED)
     ade:	4b22      	ldr	r3, [pc, #136]	; (b68 <CUP+0xc0>)
     ae0:	781b      	ldrb	r3, [r3, #0]
     ae2:	2b01      	cmp	r3, #1
     ae4:	d01a      	beq.n	b1c <CUP+0x74>
	}
	else
	{
		//This sets the cursor relative to 0,0
		
		if(yTemp <= 24)
     ae6:	2c18      	cmp	r4, #24
     ae8:	d82d      	bhi.n	b46 <CUP+0x9e>
			yCharPos = yTemp;
     aea:	4b1c      	ldr	r3, [pc, #112]	; (b5c <CUP+0xb4>)
     aec:	801c      	strh	r4, [r3, #0]
		else
			yCharPos = 24;
			
		if(xTemp <= 80)
     aee:	2d50      	cmp	r5, #80	; 0x50
     af0:	d92d      	bls.n	b4e <CUP+0xa6>
			xCharPos = xTemp;
		else
			xCharPos = 80; 
     af2:	2250      	movs	r2, #80	; 0x50
     af4:	4b18      	ldr	r3, [pc, #96]	; (b58 <CUP+0xb0>)
     af6:	801a      	strh	r2, [r3, #0]
	}

	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     af8:	4b17      	ldr	r3, [pc, #92]	; (b58 <CUP+0xb0>)
     afa:	881a      	ldrh	r2, [r3, #0]
     afc:	4b17      	ldr	r3, [pc, #92]	; (b5c <CUP+0xb4>)
     afe:	8819      	ldrh	r1, [r3, #0]
     b00:	0053      	lsls	r3, r2, #1
     b02:	189b      	adds	r3, r3, r2
     b04:	00db      	lsls	r3, r3, #3
     b06:	4a16      	ldr	r2, [pc, #88]	; (b60 <CUP+0xb8>)
     b08:	18d3      	adds	r3, r2, r3
	drawChar(tempCharacter);
     b0a:	5c58      	ldrb	r0, [r3, r1]
     b0c:	4b15      	ldr	r3, [pc, #84]	; (b64 <CUP+0xbc>)
     b0e:	4798      	blx	r3

	blinkCursor();
     b10:	4b16      	ldr	r3, [pc, #88]	; (b6c <CUP+0xc4>)
     b12:	4798      	blx	r3
	currentState = stateGround;
     b14:	2200      	movs	r2, #0
     b16:	4b16      	ldr	r3, [pc, #88]	; (b70 <CUP+0xc8>)
     b18:	701a      	strb	r2, [r3, #0]
drawChar(tempCharacter);

blinkCursor();
currentState = stateGround;
*/	
}
     b1a:	bd70      	pop	{r4, r5, r6, pc}
		if((topMargin + yTemp) <= bottomMargin)
     b1c:	4b15      	ldr	r3, [pc, #84]	; (b74 <CUP+0xcc>)
     b1e:	781a      	ldrb	r2, [r3, #0]
     b20:	4b15      	ldr	r3, [pc, #84]	; (b78 <CUP+0xd0>)
     b22:	781b      	ldrb	r3, [r3, #0]
     b24:	b2db      	uxtb	r3, r3
     b26:	1912      	adds	r2, r2, r4
     b28:	429a      	cmp	r2, r3
     b2a:	dc07      	bgt.n	b3c <CUP+0x94>
			yCharPos = topMargin + yTemp;
     b2c:	4b11      	ldr	r3, [pc, #68]	; (b74 <CUP+0xcc>)
     b2e:	781b      	ldrb	r3, [r3, #0]
     b30:	191c      	adds	r4, r3, r4
     b32:	4b0a      	ldr	r3, [pc, #40]	; (b5c <CUP+0xb4>)
     b34:	801c      	strh	r4, [r3, #0]
		xCharPos = xTemp;
     b36:	4b08      	ldr	r3, [pc, #32]	; (b58 <CUP+0xb0>)
     b38:	801d      	strh	r5, [r3, #0]
     b3a:	e7dd      	b.n	af8 <CUP+0x50>
			yCharPos = bottomMargin;
     b3c:	4b0e      	ldr	r3, [pc, #56]	; (b78 <CUP+0xd0>)
     b3e:	781a      	ldrb	r2, [r3, #0]
     b40:	4b06      	ldr	r3, [pc, #24]	; (b5c <CUP+0xb4>)
     b42:	801a      	strh	r2, [r3, #0]
     b44:	e7f7      	b.n	b36 <CUP+0x8e>
			yCharPos = 24;
     b46:	2218      	movs	r2, #24
     b48:	4b04      	ldr	r3, [pc, #16]	; (b5c <CUP+0xb4>)
     b4a:	801a      	strh	r2, [r3, #0]
     b4c:	e7cf      	b.n	aee <CUP+0x46>
			xCharPos = xTemp;
     b4e:	4b02      	ldr	r3, [pc, #8]	; (b58 <CUP+0xb0>)
     b50:	801d      	strh	r5, [r3, #0]
     b52:	e7d1      	b.n	af8 <CUP+0x50>
     b54:	00000255 	.word	0x00000255
     b58:	200004e2 	.word	0x200004e2
     b5c:	200004e4 	.word	0x200004e4
     b60:	200005ec 	.word	0x200005ec
     b64:	00003925 	.word	0x00003925
     b68:	200004e0 	.word	0x200004e0
     b6c:	00003ca9 	.word	0x00003ca9
     b70:	200004e7 	.word	0x200004e7
     b74:	20000029 	.word	0x20000029
     b78:	20000028 	.word	0x20000028

00000b7c <ED>:
	//do this later
	currentState = stateGround;
}

void ED() //Edit In Display *
{
     b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b7e:	46de      	mov	lr, fp
     b80:	4657      	mov	r7, sl
     b82:	464e      	mov	r6, r9
     b84:	4645      	mov	r5, r8
     b86:	b5e0      	push	{r5, r6, r7, lr}
     b88:	b083      	sub	sp, #12
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     b8a:	4b73      	ldr	r3, [pc, #460]	; (d58 <ED+0x1dc>)
     b8c:	881b      	ldrh	r3, [r3, #0]
     b8e:	469b      	mov	fp, r3
	uint8_t yTemp = yCharPos;
     b90:	4b72      	ldr	r3, [pc, #456]	; (d5c <ED+0x1e0>)
     b92:	881b      	ldrh	r3, [r3, #0]
     b94:	9300      	str	r3, [sp, #0]
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     b96:	2200      	movs	r2, #0
     b98:	4b71      	ldr	r3, [pc, #452]	; (d60 <ED+0x1e4>)
     b9a:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     b9c:	4b71      	ldr	r3, [pc, #452]	; (d64 <ED+0x1e8>)
     b9e:	4798      	blx	r3
     ba0:	2800      	cmp	r0, #0
     ba2:	d024      	beq.n	bee <ED+0x72>
				consoleSGR[xCharPos][yCharPos] = 0x00;
				consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
				drawChar(0x00);
			}
			//second step, erase previous lines
			for(int j = 0 ; j < yTemp ; j++)
     ba4:	2600      	movs	r6, #0
		case 2:			//Erases entire display
			for(int j = 0 ; j < 24 ; j++)
			{
				for(int i = 0 ; i < 80 ; i++)
				{
					xCharPos = i;
     ba6:	4b6c      	ldr	r3, [pc, #432]	; (d58 <ED+0x1dc>)
     ba8:	4699      	mov	r9, r3
					yCharPos = j;
     baa:	4b6c      	ldr	r3, [pc, #432]	; (d5c <ED+0x1e0>)
     bac:	4698      	mov	r8, r3
					consoleSGR[xCharPos][yCharPos] = 0x00;
     bae:	4f6e      	ldr	r7, [pc, #440]	; (d68 <ED+0x1ec>)
			for(int j = 0 ; j < yTemp ; j++)
     bb0:	2400      	movs	r4, #0
     bb2:	0435      	lsls	r5, r6, #16
     bb4:	0c2d      	lsrs	r5, r5, #16
					xCharPos = i;
     bb6:	464b      	mov	r3, r9
     bb8:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     bba:	4643      	mov	r3, r8
     bbc:	801e      	strh	r6, [r3, #0]
     bbe:	0422      	lsls	r2, r4, #16
     bc0:	0c12      	lsrs	r2, r2, #16
					consoleSGR[xCharPos][yCharPos] = 0x00;
     bc2:	0053      	lsls	r3, r2, #1
     bc4:	1899      	adds	r1, r3, r2
     bc6:	00c9      	lsls	r1, r1, #3
     bc8:	1879      	adds	r1, r7, r1
     bca:	2000      	movs	r0, #0
     bcc:	5548      	strb	r0, [r1, r5]
					consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
     bce:	189b      	adds	r3, r3, r2
     bd0:	00db      	lsls	r3, r3, #3
     bd2:	195b      	adds	r3, r3, r5
     bd4:	009b      	lsls	r3, r3, #2
     bd6:	4965      	ldr	r1, [pc, #404]	; (d6c <ED+0x1f0>)
     bd8:	4a65      	ldr	r2, [pc, #404]	; (d70 <ED+0x1f4>)
     bda:	5099      	str	r1, [r3, r2]
					drawChar(0x00);
     bdc:	4b65      	ldr	r3, [pc, #404]	; (d74 <ED+0x1f8>)
     bde:	4798      	blx	r3
				for(int i = 0 ; i < 80 ; i++)
     be0:	3401      	adds	r4, #1
     be2:	2c50      	cmp	r4, #80	; 0x50
     be4:	d1e7      	bne.n	bb6 <ED+0x3a>
			for(int j = 0 ; j < 24 ; j++)
     be6:	3601      	adds	r6, #1
     be8:	2e18      	cmp	r6, #24
     bea:	d1e1      	bne.n	bb0 <ED+0x34>
     bec:	e09b      	b.n	d26 <ED+0x1aa>
	uint8_t xTemp = xCharPos;
     bee:	465b      	mov	r3, fp
     bf0:	466a      	mov	r2, sp
     bf2:	71d3      	strb	r3, [r2, #7]
     bf4:	79d4      	ldrb	r4, [r2, #7]
	uint8_t yTemp = yCharPos;
     bf6:	7813      	ldrb	r3, [r2, #0]
     bf8:	4699      	mov	r9, r3
		parameter = dequeueParam();
     bfa:	4b5f      	ldr	r3, [pc, #380]	; (d78 <ED+0x1fc>)
     bfc:	4798      	blx	r3
	switch(parameter)
     bfe:	2801      	cmp	r0, #1
     c00:	d005      	beq.n	c0e <ED+0x92>
     c02:	2800      	cmp	r0, #0
     c04:	d04b      	beq.n	c9e <ED+0x122>
     c06:	2802      	cmp	r0, #2
     c08:	d000      	beq.n	c0c <ED+0x90>
     c0a:	e08c      	b.n	d26 <ED+0x1aa>
     c0c:	e7ca      	b.n	ba4 <ED+0x28>
			for(int i = 0 ;  i <= xTemp ;  i++)
     c0e:	2500      	movs	r5, #0
				xCharPos = i;
     c10:	4b51      	ldr	r3, [pc, #324]	; (d58 <ED+0x1dc>)
     c12:	4698      	mov	r8, r3
				consoleSGR[xCharPos][yCharPos] = 0x00;
     c14:	4b51      	ldr	r3, [pc, #324]	; (d5c <ED+0x1e0>)
     c16:	469a      	mov	sl, r3
     c18:	4f53      	ldr	r7, [pc, #332]	; (d68 <ED+0x1ec>)
				xCharPos = i;
     c1a:	4643      	mov	r3, r8
     c1c:	801d      	strh	r5, [r3, #0]
     c1e:	042a      	lsls	r2, r5, #16
     c20:	0c12      	lsrs	r2, r2, #16
				consoleSGR[xCharPos][yCharPos] = 0x00;
     c22:	4653      	mov	r3, sl
     c24:	8819      	ldrh	r1, [r3, #0]
     c26:	0053      	lsls	r3, r2, #1
     c28:	1898      	adds	r0, r3, r2
     c2a:	00c0      	lsls	r0, r0, #3
     c2c:	1838      	adds	r0, r7, r0
     c2e:	2600      	movs	r6, #0
     c30:	5446      	strb	r6, [r0, r1]
				consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
     c32:	189b      	adds	r3, r3, r2
     c34:	00db      	lsls	r3, r3, #3
     c36:	185b      	adds	r3, r3, r1
     c38:	009b      	lsls	r3, r3, #2
     c3a:	494c      	ldr	r1, [pc, #304]	; (d6c <ED+0x1f0>)
     c3c:	4a4c      	ldr	r2, [pc, #304]	; (d70 <ED+0x1f4>)
     c3e:	5099      	str	r1, [r3, r2]
				drawChar(0x00);
     c40:	2000      	movs	r0, #0
     c42:	4b4c      	ldr	r3, [pc, #304]	; (d74 <ED+0x1f8>)
     c44:	4798      	blx	r3
			for(int i = 0 ;  i <= xTemp ;  i++)
     c46:	3501      	adds	r5, #1
     c48:	42a5      	cmp	r5, r4
     c4a:	dde6      	ble.n	c1a <ED+0x9e>
			for(int j = 0 ; j < yTemp ; j++)
     c4c:	46c8      	mov	r8, r9
     c4e:	2700      	movs	r7, #0
     c50:	464b      	mov	r3, r9
     c52:	2b00      	cmp	r3, #0
     c54:	dd67      	ble.n	d26 <ED+0x1aa>
					xCharPos = i;
     c56:	4b40      	ldr	r3, [pc, #256]	; (d58 <ED+0x1dc>)
     c58:	469a      	mov	sl, r3
					yCharPos = j;
     c5a:	4b40      	ldr	r3, [pc, #256]	; (d5c <ED+0x1e0>)
     c5c:	4699      	mov	r9, r3
					consoleSGR[xCharPos][yCharPos] = 0x00;
     c5e:	4e42      	ldr	r6, [pc, #264]	; (d68 <ED+0x1ec>)
			for(int i = 0 ;  i <= xTemp ;  i++)
     c60:	2400      	movs	r4, #0
     c62:	043d      	lsls	r5, r7, #16
     c64:	0c2d      	lsrs	r5, r5, #16
					xCharPos = i;
     c66:	4653      	mov	r3, sl
     c68:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     c6a:	464b      	mov	r3, r9
     c6c:	801f      	strh	r7, [r3, #0]
     c6e:	0422      	lsls	r2, r4, #16
     c70:	0c12      	lsrs	r2, r2, #16
					consoleSGR[xCharPos][yCharPos] = 0x00;
     c72:	0053      	lsls	r3, r2, #1
     c74:	1899      	adds	r1, r3, r2
     c76:	00c9      	lsls	r1, r1, #3
     c78:	1871      	adds	r1, r6, r1
     c7a:	2000      	movs	r0, #0
     c7c:	5548      	strb	r0, [r1, r5]
					consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
     c7e:	189b      	adds	r3, r3, r2
     c80:	00db      	lsls	r3, r3, #3
     c82:	195b      	adds	r3, r3, r5
     c84:	009b      	lsls	r3, r3, #2
     c86:	4939      	ldr	r1, [pc, #228]	; (d6c <ED+0x1f0>)
     c88:	4a39      	ldr	r2, [pc, #228]	; (d70 <ED+0x1f4>)
     c8a:	5099      	str	r1, [r3, r2]
					drawChar(0x00);
     c8c:	4b39      	ldr	r3, [pc, #228]	; (d74 <ED+0x1f8>)
     c8e:	4798      	blx	r3
				for(int i = 0 ; i < 80 ; i++)
     c90:	3401      	adds	r4, #1
     c92:	2c50      	cmp	r4, #80	; 0x50
     c94:	d1e7      	bne.n	c66 <ED+0xea>
			for(int j = 0 ; j < yTemp ; j++)
     c96:	3701      	adds	r7, #1
     c98:	4547      	cmp	r7, r8
     c9a:	dbe1      	blt.n	c60 <ED+0xe4>
     c9c:	e043      	b.n	d26 <ED+0x1aa>
			for(int i = xTemp ;  i <= 78 ;  i++)
     c9e:	2c4e      	cmp	r4, #78	; 0x4e
     ca0:	dc1a      	bgt.n	cd8 <ED+0x15c>
				xCharPos = i;
     ca2:	4f2d      	ldr	r7, [pc, #180]	; (d58 <ED+0x1dc>)
				consoleSGR[xCharPos][yCharPos] = 0x00;
     ca4:	4e2d      	ldr	r6, [pc, #180]	; (d5c <ED+0x1e0>)
     ca6:	4b30      	ldr	r3, [pc, #192]	; (d68 <ED+0x1ec>)
     ca8:	4698      	mov	r8, r3
				xCharPos = i;
     caa:	803c      	strh	r4, [r7, #0]
     cac:	0422      	lsls	r2, r4, #16
     cae:	0c12      	lsrs	r2, r2, #16
				consoleSGR[xCharPos][yCharPos] = 0x00;
     cb0:	8830      	ldrh	r0, [r6, #0]
     cb2:	0053      	lsls	r3, r2, #1
     cb4:	1899      	adds	r1, r3, r2
     cb6:	00c9      	lsls	r1, r1, #3
     cb8:	4441      	add	r1, r8
     cba:	2500      	movs	r5, #0
     cbc:	540d      	strb	r5, [r1, r0]
				consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
     cbe:	189b      	adds	r3, r3, r2
     cc0:	00db      	lsls	r3, r3, #3
     cc2:	181b      	adds	r3, r3, r0
     cc4:	009b      	lsls	r3, r3, #2
     cc6:	4929      	ldr	r1, [pc, #164]	; (d6c <ED+0x1f0>)
     cc8:	4a29      	ldr	r2, [pc, #164]	; (d70 <ED+0x1f4>)
     cca:	5099      	str	r1, [r3, r2]
				drawChar(0x00);
     ccc:	2000      	movs	r0, #0
     cce:	4b29      	ldr	r3, [pc, #164]	; (d74 <ED+0x1f8>)
     cd0:	4798      	blx	r3
			for(int i = xTemp ;  i <= 78 ;  i++)
     cd2:	3401      	adds	r4, #1
     cd4:	2c4f      	cmp	r4, #79	; 0x4f
     cd6:	d1e8      	bne.n	caa <ED+0x12e>
			for(int j = yTemp+1 ; j < 24 ; j++)
     cd8:	464e      	mov	r6, r9
     cda:	3601      	adds	r6, #1
     cdc:	2e17      	cmp	r6, #23
     cde:	dc22      	bgt.n	d26 <ED+0x1aa>
					xCharPos = i;
     ce0:	4b1d      	ldr	r3, [pc, #116]	; (d58 <ED+0x1dc>)
     ce2:	4699      	mov	r9, r3
					yCharPos = j;
     ce4:	4b1d      	ldr	r3, [pc, #116]	; (d5c <ED+0x1e0>)
     ce6:	4698      	mov	r8, r3
					consoleSGR[xCharPos][yCharPos] = 0x00;
     ce8:	4f1f      	ldr	r7, [pc, #124]	; (d68 <ED+0x1ec>)
{
     cea:	2400      	movs	r4, #0
     cec:	0435      	lsls	r5, r6, #16
     cee:	0c2d      	lsrs	r5, r5, #16
					xCharPos = i;
     cf0:	464b      	mov	r3, r9
     cf2:	801c      	strh	r4, [r3, #0]
					yCharPos = j;
     cf4:	4643      	mov	r3, r8
     cf6:	801e      	strh	r6, [r3, #0]
     cf8:	0422      	lsls	r2, r4, #16
     cfa:	0c12      	lsrs	r2, r2, #16
					consoleSGR[xCharPos][yCharPos] = 0x00;
     cfc:	0053      	lsls	r3, r2, #1
     cfe:	1899      	adds	r1, r3, r2
     d00:	00c9      	lsls	r1, r1, #3
     d02:	1879      	adds	r1, r7, r1
     d04:	2000      	movs	r0, #0
     d06:	5548      	strb	r0, [r1, r5]
					consoleColors[xCharPos][yCharPos] = 0xFFFF0000;
     d08:	189b      	adds	r3, r3, r2
     d0a:	00db      	lsls	r3, r3, #3
     d0c:	195b      	adds	r3, r3, r5
     d0e:	009b      	lsls	r3, r3, #2
     d10:	4916      	ldr	r1, [pc, #88]	; (d6c <ED+0x1f0>)
     d12:	4a17      	ldr	r2, [pc, #92]	; (d70 <ED+0x1f4>)
     d14:	5099      	str	r1, [r3, r2]
					drawChar(0x00);
     d16:	4b17      	ldr	r3, [pc, #92]	; (d74 <ED+0x1f8>)
     d18:	4798      	blx	r3
				for(int i = 0 ; i < 80 ; i++)
     d1a:	3401      	adds	r4, #1
     d1c:	2c50      	cmp	r4, #80	; 0x50
     d1e:	d1e7      	bne.n	cf0 <ED+0x174>
			for(int j = yTemp+1 ; j < 24 ; j++)
     d20:	3601      	adds	r6, #1
     d22:	2e18      	cmp	r6, #24
     d24:	d1e1      	bne.n	cea <ED+0x16e>
				}
			}
		break;
	}
	
	blinkCursor();
     d26:	4b15      	ldr	r3, [pc, #84]	; (d7c <ED+0x200>)
     d28:	4798      	blx	r3
	xCharPos = xTemp;
     d2a:	23ff      	movs	r3, #255	; 0xff
     d2c:	465a      	mov	r2, fp
     d2e:	401a      	ands	r2, r3
     d30:	4909      	ldr	r1, [pc, #36]	; (d58 <ED+0x1dc>)
     d32:	800a      	strh	r2, [r1, #0]
	yCharPos = yTemp;
     d34:	9a00      	ldr	r2, [sp, #0]
     d36:	4013      	ands	r3, r2
     d38:	4a08      	ldr	r2, [pc, #32]	; (d5c <ED+0x1e0>)
     d3a:	8013      	strh	r3, [r2, #0]
	drawChar(0x00);
     d3c:	2000      	movs	r0, #0
     d3e:	4b0d      	ldr	r3, [pc, #52]	; (d74 <ED+0x1f8>)
     d40:	4798      	blx	r3
	
	currentState = stateGround;	
     d42:	2200      	movs	r2, #0
     d44:	4b0e      	ldr	r3, [pc, #56]	; (d80 <ED+0x204>)
     d46:	701a      	strb	r2, [r3, #0]


}
     d48:	b003      	add	sp, #12
     d4a:	bc3c      	pop	{r2, r3, r4, r5}
     d4c:	4690      	mov	r8, r2
     d4e:	4699      	mov	r9, r3
     d50:	46a2      	mov	sl, r4
     d52:	46ab      	mov	fp, r5
     d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	200004e2 	.word	0x200004e2
     d5c:	200004e4 	.word	0x200004e4
     d60:	2000002a 	.word	0x2000002a
     d64:	00000241 	.word	0x00000241
     d68:	20000d6c 	.word	0x20000d6c
     d6c:	ffff0000 	.word	0xffff0000
     d70:	200014ec 	.word	0x200014ec
     d74:	00003925 	.word	0x00003925
     d78:	00000255 	.word	0x00000255
     d7c:	00003ca9 	.word	0x00003ca9
     d80:	200004e7 	.word	0x200004e7

00000d84 <EL>:

void EL() //Edit In Line *
{
     d84:	b5f0      	push	{r4, r5, r6, r7, lr}
     d86:	46d6      	mov	lr, sl
     d88:	464f      	mov	r7, r9
     d8a:	4646      	mov	r6, r8
     d8c:	b5c0      	push	{r6, r7, lr}
	unsigned char tempCharacter;
	uint8_t parameter;
	
	uint8_t xTemp = xCharPos;
     d8e:	4b31      	ldr	r3, [pc, #196]	; (e54 <EL+0xd0>)
     d90:	881f      	ldrh	r7, [r3, #0]
     d92:	b2fc      	uxtb	r4, r7
	uint8_t yTemp = yCharPos;
     d94:	4b30      	ldr	r3, [pc, #192]	; (e58 <EL+0xd4>)
     d96:	881b      	ldrh	r3, [r3, #0]
     d98:	4698      	mov	r8, r3
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     d9a:	2200      	movs	r2, #0
     d9c:	4b2f      	ldr	r3, [pc, #188]	; (e5c <EL+0xd8>)
     d9e:	701a      	strb	r2, [r3, #0]
	
	if(isEmptyParam())
     da0:	4b2f      	ldr	r3, [pc, #188]	; (e60 <EL+0xdc>)
     da2:	4798      	blx	r3
     da4:	2800      	cmp	r0, #0
     da6:	d015      	beq.n	dd4 <EL+0x50>
	else
	{
		parameter = dequeueParam();
	}
	
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     da8:	4b2a      	ldr	r3, [pc, #168]	; (e54 <EL+0xd0>)
     daa:	881a      	ldrh	r2, [r3, #0]
     dac:	4b2a      	ldr	r3, [pc, #168]	; (e58 <EL+0xd4>)
     dae:	8819      	ldrh	r1, [r3, #0]
     db0:	0053      	lsls	r3, r2, #1
     db2:	189b      	adds	r3, r3, r2
     db4:	00db      	lsls	r3, r3, #3
     db6:	4a2b      	ldr	r2, [pc, #172]	; (e64 <EL+0xe0>)
     db8:	18d3      	adds	r3, r2, r3
     dba:	5c5b      	ldrb	r3, [r3, r1]
     dbc:	4699      	mov	r9, r3
	
	switch(parameter)
	{
		case 0:			//Erases from cursor to end of line
			for(int i = xTemp ;  i <= 79 ;  i++)
     dbe:	2c4f      	cmp	r4, #79	; 0x4f
     dc0:	dc24      	bgt.n	e0c <EL+0x88>
			{
				xCharPos = i;
     dc2:	4e24      	ldr	r6, [pc, #144]	; (e54 <EL+0xd0>)
				drawChar(0x00);
     dc4:	4d28      	ldr	r5, [pc, #160]	; (e68 <EL+0xe4>)
				xCharPos = i;
     dc6:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     dc8:	2000      	movs	r0, #0
     dca:	47a8      	blx	r5
			for(int i = xTemp ;  i <= 79 ;  i++)
     dcc:	3401      	adds	r4, #1
     dce:	2c50      	cmp	r4, #80	; 0x50
     dd0:	d1f9      	bne.n	dc6 <EL+0x42>
     dd2:	e01b      	b.n	e0c <EL+0x88>
		parameter = dequeueParam();
     dd4:	4b25      	ldr	r3, [pc, #148]	; (e6c <EL+0xe8>)
     dd6:	4798      	blx	r3
	tempCharacter = consoleDisplay[xCharPos][yCharPos];
     dd8:	4b1e      	ldr	r3, [pc, #120]	; (e54 <EL+0xd0>)
     dda:	881a      	ldrh	r2, [r3, #0]
     ddc:	4b1e      	ldr	r3, [pc, #120]	; (e58 <EL+0xd4>)
     dde:	8819      	ldrh	r1, [r3, #0]
     de0:	0053      	lsls	r3, r2, #1
     de2:	189b      	adds	r3, r3, r2
     de4:	00db      	lsls	r3, r3, #3
     de6:	4a1f      	ldr	r2, [pc, #124]	; (e64 <EL+0xe0>)
     de8:	18d3      	adds	r3, r2, r3
     dea:	5c5b      	ldrb	r3, [r3, r1]
     dec:	4699      	mov	r9, r3
	switch(parameter)
     dee:	2801      	cmp	r0, #1
     df0:	d021      	beq.n	e36 <EL+0xb2>
     df2:	2800      	cmp	r0, #0
     df4:	d0e3      	beq.n	dbe <EL+0x3a>
     df6:	2802      	cmp	r0, #2
     df8:	d108      	bne.n	e0c <EL+0x88>
     dfa:	2400      	movs	r4, #0
			break;
		
		case 2:			//Erases entire line containing cursor
			for(int i = 0 ;  i <= 78 ;  i++)
			{
				xCharPos = i;
     dfc:	4e15      	ldr	r6, [pc, #84]	; (e54 <EL+0xd0>)
				drawChar(0x00);
     dfe:	4d1a      	ldr	r5, [pc, #104]	; (e68 <EL+0xe4>)
				xCharPos = i;
     e00:	8034      	strh	r4, [r6, #0]
				drawChar(0x00);
     e02:	2000      	movs	r0, #0
     e04:	47a8      	blx	r5
			for(int i = 0 ;  i <= 78 ;  i++)
     e06:	3401      	adds	r4, #1
     e08:	2c4f      	cmp	r4, #79	; 0x4f
     e0a:	d1f9      	bne.n	e00 <EL+0x7c>
			}
			break;
	}
	
	blinkCursor();
     e0c:	4b18      	ldr	r3, [pc, #96]	; (e70 <EL+0xec>)
     e0e:	4798      	blx	r3
	xCharPos = xTemp;
     e10:	23ff      	movs	r3, #255	; 0xff
     e12:	401f      	ands	r7, r3
     e14:	4a0f      	ldr	r2, [pc, #60]	; (e54 <EL+0xd0>)
     e16:	8017      	strh	r7, [r2, #0]
	yCharPos = yTemp;
     e18:	4642      	mov	r2, r8
     e1a:	4013      	ands	r3, r2
     e1c:	4a0e      	ldr	r2, [pc, #56]	; (e58 <EL+0xd4>)
     e1e:	8013      	strh	r3, [r2, #0]
	drawChar(tempCharacter);
     e20:	4648      	mov	r0, r9
     e22:	4b11      	ldr	r3, [pc, #68]	; (e68 <EL+0xe4>)
     e24:	4798      	blx	r3
	
	currentState = stateGround;	
     e26:	2200      	movs	r2, #0
     e28:	4b12      	ldr	r3, [pc, #72]	; (e74 <EL+0xf0>)
     e2a:	701a      	strb	r2, [r3, #0]
}
     e2c:	bc1c      	pop	{r2, r3, r4}
     e2e:	4690      	mov	r8, r2
     e30:	4699      	mov	r9, r3
     e32:	46a2      	mov	sl, r4
     e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     e36:	3401      	adds	r4, #1
     e38:	2500      	movs	r5, #0
     e3a:	2c00      	cmp	r4, #0
     e3c:	dbe6      	blt.n	e0c <EL+0x88>
				xCharPos = i;
     e3e:	4b05      	ldr	r3, [pc, #20]	; (e54 <EL+0xd0>)
     e40:	469a      	mov	sl, r3
				drawChar(0x00);
     e42:	4e09      	ldr	r6, [pc, #36]	; (e68 <EL+0xe4>)
				xCharPos = i;
     e44:	4653      	mov	r3, sl
     e46:	801d      	strh	r5, [r3, #0]
				drawChar(0x00);
     e48:	2000      	movs	r0, #0
     e4a:	47b0      	blx	r6
			for(int i = 0 ;  i <= xTemp+1 ;  i++)
     e4c:	3501      	adds	r5, #1
     e4e:	42a5      	cmp	r5, r4
     e50:	ddf8      	ble.n	e44 <EL+0xc0>
     e52:	e7db      	b.n	e0c <EL+0x88>
     e54:	200004e2 	.word	0x200004e2
     e58:	200004e4 	.word	0x200004e4
     e5c:	2000002a 	.word	0x2000002a
     e60:	00000241 	.word	0x00000241
     e64:	200005ec 	.word	0x200005ec
     e68:	00003925 	.word	0x00003925
     e6c:	00000255 	.word	0x00000255
     e70:	00003ca9 	.word	0x00003ca9
     e74:	200004e7 	.word	0x200004e7

00000e78 <SGR>:

void SGR() //Select Graphic Rendition *
{
     e78:	b5f0      	push	{r4, r5, r6, r7, lr}
     e7a:	46d6      	mov	lr, sl
     e7c:	464f      	mov	r7, r9
     e7e:	4646      	mov	r6, r8
     e80:	b5c0      	push	{r6, r7, lr}
     e82:	4c8a      	ldr	r4, [pc, #552]	; (10ac <SGR+0x234>)
     e84:	44a5      	add	sp, r4
	
	uint16_t eightBitColor[256] = 
     e86:	2280      	movs	r2, #128	; 0x80
     e88:	0092      	lsls	r2, r2, #2
     e8a:	4989      	ldr	r1, [pc, #548]	; (10b0 <SGR+0x238>)
     e8c:	4668      	mov	r0, sp
     e8e:	4b89      	ldr	r3, [pc, #548]	; (10b4 <SGR+0x23c>)
     e90:	4798      	blx	r3
		0x5ACB,0x630C,0x632C,0x73AE,0x8410,0x8C51,0x94B2,0x9CF3,0xAD55,0xB596,
		0xBDF7,0xC638,0xD69A,0xDEDB,0xE73C,0xEF7D
	};
	
	uint8_t parameter;	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
     e92:	2200      	movs	r2, #0
     e94:	4b88      	ldr	r3, [pc, #544]	; (10b8 <SGR+0x240>)
     e96:	701a      	strb	r2, [r3, #0]
	uint8_t r = 0;
	uint8_t g = 0;
	uint8_t b = 0;	
	
	if(isEmptyParam())
     e98:	4b88      	ldr	r3, [pc, #544]	; (10bc <SGR+0x244>)
     e9a:	4798      	blx	r3
     e9c:	2800      	cmp	r0, #0
     e9e:	d104      	bne.n	eaa <SGR+0x32>
		textBackground = defaultBackgroundColor;
							
	}
	else
	{
		while(!isEmptyParam())
     ea0:	4d86      	ldr	r5, [pc, #536]	; (10bc <SGR+0x244>)
		{
			parameter = dequeueParam();
     ea2:	4e87      	ldr	r6, [pc, #540]	; (10c0 <SGR+0x248>)
			switch(parameter)
     ea4:	4f87      	ldr	r7, [pc, #540]	; (10c4 <SGR+0x24c>)
				case 49:	//default background color (black)
					textBackground = defaultBackgroundColor;
					break;
					
				case 2:		// set half-bright
					textForeground &= 0x7BEF;	// what the fuck?
     ea6:	4c88      	ldr	r4, [pc, #544]	; (10c8 <SGR+0x250>)
     ea8:	e02e      	b.n	f08 <SGR+0x90>
		textBold = false;
     eaa:	2300      	movs	r3, #0
     eac:	4a87      	ldr	r2, [pc, #540]	; (10cc <SGR+0x254>)
     eae:	7013      	strb	r3, [r2, #0]
		textUnderscore = false;
     eb0:	4a87      	ldr	r2, [pc, #540]	; (10d0 <SGR+0x258>)
     eb2:	7013      	strb	r3, [r2, #0]
		textBlink = false;
     eb4:	4a87      	ldr	r2, [pc, #540]	; (10d4 <SGR+0x25c>)
     eb6:	7013      	strb	r3, [r2, #0]
		textReverseVideo = false;
     eb8:	4a87      	ldr	r2, [pc, #540]	; (10d8 <SGR+0x260>)
     eba:	7013      	strb	r3, [r2, #0]
		textForeground = defaultForegroundColor;
     ebc:	4b87      	ldr	r3, [pc, #540]	; (10dc <SGR+0x264>)
     ebe:	881a      	ldrh	r2, [r3, #0]
     ec0:	4b81      	ldr	r3, [pc, #516]	; (10c8 <SGR+0x250>)
     ec2:	801a      	strh	r2, [r3, #0]
		textBackground = defaultBackgroundColor;
     ec4:	4b86      	ldr	r3, [pc, #536]	; (10e0 <SGR+0x268>)
     ec6:	881a      	ldrh	r2, [r3, #0]
     ec8:	4b86      	ldr	r3, [pc, #536]	; (10e4 <SGR+0x26c>)
     eca:	801a      	strh	r2, [r3, #0]
				
			}
		}	
	}
	
	blinkCursor();
     ecc:	4b86      	ldr	r3, [pc, #536]	; (10e8 <SGR+0x270>)
     ece:	4798      	blx	r3
	currentState = stateGround;
     ed0:	2200      	movs	r2, #0
     ed2:	4b86      	ldr	r3, [pc, #536]	; (10ec <SGR+0x274>)
     ed4:	701a      	strb	r2, [r3, #0]
}
     ed6:	2380      	movs	r3, #128	; 0x80
     ed8:	009b      	lsls	r3, r3, #2
     eda:	449d      	add	sp, r3
     edc:	bc1c      	pop	{r2, r3, r4}
     ede:	4690      	mov	r8, r2
     ee0:	4699      	mov	r9, r3
     ee2:	46a2      	mov	sl, r4
     ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					textBold = false;
     ee6:	2300      	movs	r3, #0
     ee8:	4a78      	ldr	r2, [pc, #480]	; (10cc <SGR+0x254>)
     eea:	7013      	strb	r3, [r2, #0]
					textUnderscore = false;
     eec:	4a78      	ldr	r2, [pc, #480]	; (10d0 <SGR+0x258>)
     eee:	7013      	strb	r3, [r2, #0]
					textBlink = false;
     ef0:	4a78      	ldr	r2, [pc, #480]	; (10d4 <SGR+0x25c>)
     ef2:	7013      	strb	r3, [r2, #0]
					textReverseVideo = false;
     ef4:	4a78      	ldr	r2, [pc, #480]	; (10d8 <SGR+0x260>)
     ef6:	7013      	strb	r3, [r2, #0]
					textForeground = defaultForegroundColor;
     ef8:	4b78      	ldr	r3, [pc, #480]	; (10dc <SGR+0x264>)
     efa:	881a      	ldrh	r2, [r3, #0]
     efc:	4b72      	ldr	r3, [pc, #456]	; (10c8 <SGR+0x250>)
     efe:	801a      	strh	r2, [r3, #0]
					textBackground = defaultBackgroundColor;
     f00:	4b77      	ldr	r3, [pc, #476]	; (10e0 <SGR+0x268>)
     f02:	881a      	ldrh	r2, [r3, #0]
     f04:	4b77      	ldr	r3, [pc, #476]	; (10e4 <SGR+0x26c>)
     f06:	801a      	strh	r2, [r3, #0]
		while(!isEmptyParam())
     f08:	47a8      	blx	r5
     f0a:	2800      	cmp	r0, #0
     f0c:	d1de      	bne.n	ecc <SGR+0x54>
			parameter = dequeueParam();
     f0e:	47b0      	blx	r6
			switch(parameter)
     f10:	2831      	cmp	r0, #49	; 0x31
     f12:	d8f9      	bhi.n	f08 <SGR+0x90>
     f14:	0080      	lsls	r0, r0, #2
     f16:	583b      	ldr	r3, [r7, r0]
     f18:	469f      	mov	pc, r3
					textBold = true;
     f1a:	2201      	movs	r2, #1
     f1c:	4b6b      	ldr	r3, [pc, #428]	; (10cc <SGR+0x254>)
     f1e:	701a      	strb	r2, [r3, #0]
					break;
     f20:	e7f2      	b.n	f08 <SGR+0x90>
					textUnderscore = true;
     f22:	2201      	movs	r2, #1
     f24:	4b6a      	ldr	r3, [pc, #424]	; (10d0 <SGR+0x258>)
     f26:	701a      	strb	r2, [r3, #0]
					break;
     f28:	e7ee      	b.n	f08 <SGR+0x90>
					textBlink = true;
     f2a:	2201      	movs	r2, #1
     f2c:	4b69      	ldr	r3, [pc, #420]	; (10d4 <SGR+0x25c>)
     f2e:	701a      	strb	r2, [r3, #0]
					break;
     f30:	e7ea      	b.n	f08 <SGR+0x90>
					textReverseVideo = true;
     f32:	2201      	movs	r2, #1
     f34:	4b68      	ldr	r3, [pc, #416]	; (10d8 <SGR+0x260>)
     f36:	701a      	strb	r2, [r3, #0]
					break;
     f38:	e7e6      	b.n	f08 <SGR+0x90>
					textUnderscore = true;
     f3a:	2201      	movs	r2, #1
     f3c:	4b64      	ldr	r3, [pc, #400]	; (10d0 <SGR+0x258>)
     f3e:	701a      	strb	r2, [r3, #0]
					break;
     f40:	e7e2      	b.n	f08 <SGR+0x90>
					textBold = false;
     f42:	2200      	movs	r2, #0
     f44:	4b61      	ldr	r3, [pc, #388]	; (10cc <SGR+0x254>)
     f46:	701a      	strb	r2, [r3, #0]
					break;
     f48:	e7de      	b.n	f08 <SGR+0x90>
					textUnderscore = false;
     f4a:	2200      	movs	r2, #0
     f4c:	4b60      	ldr	r3, [pc, #384]	; (10d0 <SGR+0x258>)
     f4e:	701a      	strb	r2, [r3, #0]
					break;
     f50:	e7da      	b.n	f08 <SGR+0x90>
					textBlink = false;
     f52:	2200      	movs	r2, #0
     f54:	4b5f      	ldr	r3, [pc, #380]	; (10d4 <SGR+0x25c>)
     f56:	701a      	strb	r2, [r3, #0]
					break;
     f58:	e7d6      	b.n	f08 <SGR+0x90>
					textReverseVideo = false;
     f5a:	2200      	movs	r2, #0
     f5c:	4b5e      	ldr	r3, [pc, #376]	; (10d8 <SGR+0x260>)
     f5e:	701a      	strb	r2, [r3, #0]
					break;
     f60:	e7d2      	b.n	f08 <SGR+0x90>
					textForeground = BLACK;
     f62:	2200      	movs	r2, #0
     f64:	4b58      	ldr	r3, [pc, #352]	; (10c8 <SGR+0x250>)
     f66:	801a      	strh	r2, [r3, #0]
					break;
     f68:	e7ce      	b.n	f08 <SGR+0x90>
					textForeground = RED;
     f6a:	4a61      	ldr	r2, [pc, #388]	; (10f0 <SGR+0x278>)
     f6c:	4b56      	ldr	r3, [pc, #344]	; (10c8 <SGR+0x250>)
     f6e:	801a      	strh	r2, [r3, #0]
					break;
     f70:	e7ca      	b.n	f08 <SGR+0x90>
					textForeground = GREEN;
     f72:	2280      	movs	r2, #128	; 0x80
     f74:	00d2      	lsls	r2, r2, #3
     f76:	4b54      	ldr	r3, [pc, #336]	; (10c8 <SGR+0x250>)
     f78:	801a      	strh	r2, [r3, #0]
					break;
     f7a:	e7c5      	b.n	f08 <SGR+0x90>
					textForeground = BROWN;
     f7c:	2220      	movs	r2, #32
     f7e:	4252      	negs	r2, r2
     f80:	4b51      	ldr	r3, [pc, #324]	; (10c8 <SGR+0x250>)
     f82:	801a      	strh	r2, [r3, #0]
					break;
     f84:	e7c0      	b.n	f08 <SGR+0x90>
					textForeground = BLUE;
     f86:	221f      	movs	r2, #31
     f88:	4b4f      	ldr	r3, [pc, #316]	; (10c8 <SGR+0x250>)
     f8a:	801a      	strh	r2, [r3, #0]
					break;
     f8c:	e7bc      	b.n	f08 <SGR+0x90>
					textForeground = MAGENTA;
     f8e:	4a59      	ldr	r2, [pc, #356]	; (10f4 <SGR+0x27c>)
     f90:	4b4d      	ldr	r3, [pc, #308]	; (10c8 <SGR+0x250>)
     f92:	801a      	strh	r2, [r3, #0]
					break;
     f94:	e7b8      	b.n	f08 <SGR+0x90>
					textForeground = CYAN;
     f96:	4a58      	ldr	r2, [pc, #352]	; (10f8 <SGR+0x280>)
     f98:	4b4b      	ldr	r3, [pc, #300]	; (10c8 <SGR+0x250>)
     f9a:	801a      	strh	r2, [r3, #0]
					break;
     f9c:	e7b4      	b.n	f08 <SGR+0x90>
					textForeground = WHITE;
     f9e:	2201      	movs	r2, #1
     fa0:	4252      	negs	r2, r2
     fa2:	4b49      	ldr	r3, [pc, #292]	; (10c8 <SGR+0x250>)
     fa4:	801a      	strh	r2, [r3, #0]
					break;
     fa6:	e7af      	b.n	f08 <SGR+0x90>
					parameter = dequeueParam();
     fa8:	4b45      	ldr	r3, [pc, #276]	; (10c0 <SGR+0x248>)
     faa:	4798      	blx	r3
					if(parameter == 5)	//256 color
     fac:	2805      	cmp	r0, #5
     fae:	d018      	beq.n	fe2 <SGR+0x16a>
					if(parameter == 2) //RGB color, 3 parameter r/g/b
     fb0:	2802      	cmp	r0, #2
     fb2:	d1a9      	bne.n	f08 <SGR+0x90>
						r = dequeueParam();
     fb4:	4b42      	ldr	r3, [pc, #264]	; (10c0 <SGR+0x248>)
     fb6:	469a      	mov	sl, r3
     fb8:	4798      	blx	r3
     fba:	4680      	mov	r8, r0
						g = dequeueParam();
     fbc:	47d0      	blx	sl
     fbe:	4681      	mov	r9, r0
						b = dequeueParam();
     fc0:	47d0      	blx	sl
						textForeground = ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);
     fc2:	4643      	mov	r3, r8
     fc4:	021b      	lsls	r3, r3, #8
     fc6:	0adb      	lsrs	r3, r3, #11
     fc8:	02db      	lsls	r3, r3, #11
     fca:	464a      	mov	r2, r9
     fcc:	00d2      	lsls	r2, r2, #3
     fce:	21fc      	movs	r1, #252	; 0xfc
     fd0:	00c9      	lsls	r1, r1, #3
     fd2:	400a      	ands	r2, r1
     fd4:	4313      	orrs	r3, r2
     fd6:	08c0      	lsrs	r0, r0, #3
     fd8:	b2c0      	uxtb	r0, r0
     fda:	4303      	orrs	r3, r0
     fdc:	4a3a      	ldr	r2, [pc, #232]	; (10c8 <SGR+0x250>)
     fde:	8013      	strh	r3, [r2, #0]
     fe0:	e792      	b.n	f08 <SGR+0x90>
						parameter = dequeueParam();
     fe2:	4b37      	ldr	r3, [pc, #220]	; (10c0 <SGR+0x248>)
     fe4:	4798      	blx	r3
						textForeground = eightBitColor[parameter];
     fe6:	0043      	lsls	r3, r0, #1
     fe8:	466a      	mov	r2, sp
     fea:	5a9a      	ldrh	r2, [r3, r2]
     fec:	4b36      	ldr	r3, [pc, #216]	; (10c8 <SGR+0x250>)
     fee:	801a      	strh	r2, [r3, #0]
     ff0:	e7de      	b.n	fb0 <SGR+0x138>
					textForeground = defaultForegroundColor;
     ff2:	4b3a      	ldr	r3, [pc, #232]	; (10dc <SGR+0x264>)
     ff4:	881a      	ldrh	r2, [r3, #0]
     ff6:	4b34      	ldr	r3, [pc, #208]	; (10c8 <SGR+0x250>)
     ff8:	801a      	strh	r2, [r3, #0]
					break;
     ffa:	e785      	b.n	f08 <SGR+0x90>
					textBackground = BLACK;
     ffc:	2200      	movs	r2, #0
     ffe:	4b39      	ldr	r3, [pc, #228]	; (10e4 <SGR+0x26c>)
    1000:	801a      	strh	r2, [r3, #0]
					break;
    1002:	e781      	b.n	f08 <SGR+0x90>
					textBackground = RED;
    1004:	4a3a      	ldr	r2, [pc, #232]	; (10f0 <SGR+0x278>)
    1006:	4b37      	ldr	r3, [pc, #220]	; (10e4 <SGR+0x26c>)
    1008:	801a      	strh	r2, [r3, #0]
					break;
    100a:	e77d      	b.n	f08 <SGR+0x90>
					textBackground = GREEN;
    100c:	2280      	movs	r2, #128	; 0x80
    100e:	00d2      	lsls	r2, r2, #3
    1010:	4b34      	ldr	r3, [pc, #208]	; (10e4 <SGR+0x26c>)
    1012:	801a      	strh	r2, [r3, #0]
					break;
    1014:	e778      	b.n	f08 <SGR+0x90>
					textBackground = BROWN;
    1016:	2220      	movs	r2, #32
    1018:	4252      	negs	r2, r2
    101a:	4b32      	ldr	r3, [pc, #200]	; (10e4 <SGR+0x26c>)
    101c:	801a      	strh	r2, [r3, #0]
					break;
    101e:	e773      	b.n	f08 <SGR+0x90>
					textBackground = BLUE;
    1020:	221f      	movs	r2, #31
    1022:	4b30      	ldr	r3, [pc, #192]	; (10e4 <SGR+0x26c>)
    1024:	801a      	strh	r2, [r3, #0]
					break;
    1026:	e76f      	b.n	f08 <SGR+0x90>
					textBackground = MAGENTA;
    1028:	4a32      	ldr	r2, [pc, #200]	; (10f4 <SGR+0x27c>)
    102a:	4b2e      	ldr	r3, [pc, #184]	; (10e4 <SGR+0x26c>)
    102c:	801a      	strh	r2, [r3, #0]
					break;
    102e:	e76b      	b.n	f08 <SGR+0x90>
					textBackground = CYAN;
    1030:	4a31      	ldr	r2, [pc, #196]	; (10f8 <SGR+0x280>)
    1032:	4b2c      	ldr	r3, [pc, #176]	; (10e4 <SGR+0x26c>)
    1034:	801a      	strh	r2, [r3, #0]
					break;
    1036:	e767      	b.n	f08 <SGR+0x90>
					textBackground = WHITE;
    1038:	2201      	movs	r2, #1
    103a:	4252      	negs	r2, r2
    103c:	4b29      	ldr	r3, [pc, #164]	; (10e4 <SGR+0x26c>)
    103e:	801a      	strh	r2, [r3, #0]
					break;
    1040:	e762      	b.n	f08 <SGR+0x90>
					parameter = dequeueParam();
    1042:	4b1f      	ldr	r3, [pc, #124]	; (10c0 <SGR+0x248>)
    1044:	4798      	blx	r3
					if(parameter == 5)	//256 color
    1046:	2805      	cmp	r0, #5
    1048:	d019      	beq.n	107e <SGR+0x206>
					if(parameter == 2) //RGB color, 3 parameter r/g/b
    104a:	2802      	cmp	r0, #2
    104c:	d000      	beq.n	1050 <SGR+0x1d8>
    104e:	e75b      	b.n	f08 <SGR+0x90>
						r = dequeueParam();
    1050:	4b1b      	ldr	r3, [pc, #108]	; (10c0 <SGR+0x248>)
    1052:	469a      	mov	sl, r3
    1054:	4798      	blx	r3
    1056:	4680      	mov	r8, r0
						g = dequeueParam();
    1058:	47d0      	blx	sl
    105a:	4681      	mov	r9, r0
						b = dequeueParam();
    105c:	47d0      	blx	sl
						textBackground = ((r & 0xf8) << 8) | ((g & 0xfc) << 3) | (b >> 3);				
    105e:	4643      	mov	r3, r8
    1060:	021b      	lsls	r3, r3, #8
    1062:	0adb      	lsrs	r3, r3, #11
    1064:	02db      	lsls	r3, r3, #11
    1066:	464a      	mov	r2, r9
    1068:	00d2      	lsls	r2, r2, #3
    106a:	21fc      	movs	r1, #252	; 0xfc
    106c:	00c9      	lsls	r1, r1, #3
    106e:	400a      	ands	r2, r1
    1070:	4313      	orrs	r3, r2
    1072:	08c0      	lsrs	r0, r0, #3
    1074:	b2c0      	uxtb	r0, r0
    1076:	4303      	orrs	r3, r0
    1078:	4a1a      	ldr	r2, [pc, #104]	; (10e4 <SGR+0x26c>)
    107a:	8013      	strh	r3, [r2, #0]
    107c:	e744      	b.n	f08 <SGR+0x90>
						parameter = dequeueParam();
    107e:	4b10      	ldr	r3, [pc, #64]	; (10c0 <SGR+0x248>)
    1080:	4798      	blx	r3
						textBackground = eightBitColor[parameter];
    1082:	0043      	lsls	r3, r0, #1
    1084:	466a      	mov	r2, sp
    1086:	5a9a      	ldrh	r2, [r3, r2]
    1088:	4b16      	ldr	r3, [pc, #88]	; (10e4 <SGR+0x26c>)
    108a:	801a      	strh	r2, [r3, #0]
    108c:	e7dd      	b.n	104a <SGR+0x1d2>
					textBackground = defaultBackgroundColor;
    108e:	4b14      	ldr	r3, [pc, #80]	; (10e0 <SGR+0x268>)
    1090:	881a      	ldrh	r2, [r3, #0]
    1092:	4b14      	ldr	r3, [pc, #80]	; (10e4 <SGR+0x26c>)
    1094:	801a      	strh	r2, [r3, #0]
					break;
    1096:	e737      	b.n	f08 <SGR+0x90>
					textForeground &= 0x7BEF;	// what the fuck?
    1098:	8822      	ldrh	r2, [r4, #0]
    109a:	4918      	ldr	r1, [pc, #96]	; (10fc <SGR+0x284>)
    109c:	400a      	ands	r2, r1
    109e:	8022      	strh	r2, [r4, #0]
					textBackground &= 0x7BEF;
    10a0:	4a10      	ldr	r2, [pc, #64]	; (10e4 <SGR+0x26c>)
    10a2:	8813      	ldrh	r3, [r2, #0]
    10a4:	400b      	ands	r3, r1
    10a6:	8013      	strh	r3, [r2, #0]
					break;
    10a8:	e72e      	b.n	f08 <SGR+0x90>
    10aa:	46c0      	nop			; (mov r8, r8)
    10ac:	fffffe00 	.word	0xfffffe00
    10b0:	0000668c 	.word	0x0000668c
    10b4:	000053b5 	.word	0x000053b5
    10b8:	2000002a 	.word	0x2000002a
    10bc:	00000241 	.word	0x00000241
    10c0:	00000255 	.word	0x00000255
    10c4:	000065ac 	.word	0x000065ac
    10c8:	20000014 	.word	0x20000014
    10cc:	20000580 	.word	0x20000580
    10d0:	20000560 	.word	0x20000560
    10d4:	20000562 	.word	0x20000562
    10d8:	20000582 	.word	0x20000582
    10dc:	2000018e 	.word	0x2000018e
    10e0:	200004e8 	.word	0x200004e8
    10e4:	2000041e 	.word	0x2000041e
    10e8:	00003ca9 	.word	0x00003ca9
    10ec:	200004e7 	.word	0x200004e7
    10f0:	fffff800 	.word	0xfffff800
    10f4:	fffff81f 	.word	0xfffff81f
    10f8:	000007ff 	.word	0x000007ff
    10fc:	00007bef 	.word	0x00007bef

00001100 <DSR>:
void ICH(void) //Insert indicated # of blank chars
{
	currentState = stateGround;
}
void DSR(void) 
{
    1100:	b5f0      	push	{r4, r5, r6, r7, lr}
    1102:	46ce      	mov	lr, r9
    1104:	4647      	mov	r7, r8
    1106:	b580      	push	{r7, lr}
    1108:	b087      	sub	sp, #28
	
	This function will support both ANSI and DEC formats
	*/
	unsigned char tempCharacter;
		
	uint8_t xTemp = xCharPos;
    110a:	4b36      	ldr	r3, [pc, #216]	; (11e4 <DSR+0xe4>)
    110c:	881d      	ldrh	r5, [r3, #0]
	uint8_t yTemp = yCharPos;
    110e:	4b36      	ldr	r3, [pc, #216]	; (11e8 <DSR+0xe8>)
    1110:	881e      	ldrh	r6, [r3, #0]
	
	char DSROSResponse[] = {0x1b, 0x5b, 0x30, 0x6e};
    1112:	4b36      	ldr	r3, [pc, #216]	; (11ec <DSR+0xec>)
    1114:	681b      	ldr	r3, [r3, #0]
    1116:	9305      	str	r3, [sp, #20]
	
	char stringResponse[10];
	char tempbuffer[5];
		
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
    1118:	2200      	movs	r2, #0
    111a:	4b35      	ldr	r3, [pc, #212]	; (11f0 <DSR+0xf0>)
    111c:	701a      	strb	r2, [r3, #0]
		
	tempCharacter = dequeueParser();
    111e:	4b35      	ldr	r3, [pc, #212]	; (11f4 <DSR+0xf4>)
    1120:	4798      	blx	r3
    1122:	0004      	movs	r4, r0
	
	if(!isEmptyParam()) //We are in DEC format
    1124:	4b34      	ldr	r3, [pc, #208]	; (11f8 <DSR+0xf8>)
    1126:	4798      	blx	r3
    1128:	2800      	cmp	r0, #0
    112a:	d018      	beq.n	115e <DSR+0x5e>
	{
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
	}
	
	switch(tempCharacter){
    112c:	2c05      	cmp	r4, #5
    112e:	d01a      	beq.n	1166 <DSR+0x66>
    1130:	2c06      	cmp	r4, #6
    1132:	d01d      	beq.n	1170 <DSR+0x70>
		
			printf("%s",stringResponse);
		break;
	}
	
	stringResponse[0] = '\0';
    1134:	2400      	movs	r4, #0
    1136:	ab02      	add	r3, sp, #8
    1138:	701c      	strb	r4, [r3, #0]
	tempbuffer[0] = '\0';
    113a:	466b      	mov	r3, sp
    113c:	701c      	strb	r4, [r3, #0]
		
	blinkCursor();
    113e:	4b2f      	ldr	r3, [pc, #188]	; (11fc <DSR+0xfc>)
    1140:	4798      	blx	r3
	xCharPos = xTemp;
    1142:	23ff      	movs	r3, #255	; 0xff
    1144:	401d      	ands	r5, r3
    1146:	4a27      	ldr	r2, [pc, #156]	; (11e4 <DSR+0xe4>)
    1148:	8015      	strh	r5, [r2, #0]
	yCharPos = yTemp;
    114a:	4033      	ands	r3, r6
    114c:	4a26      	ldr	r2, [pc, #152]	; (11e8 <DSR+0xe8>)
    114e:	8013      	strh	r3, [r2, #0]
	currentState = stateGround;
    1150:	4b2b      	ldr	r3, [pc, #172]	; (1200 <DSR+0x100>)
    1152:	701c      	strb	r4, [r3, #0]
}
    1154:	b007      	add	sp, #28
    1156:	bc0c      	pop	{r2, r3}
    1158:	4690      	mov	r8, r2
    115a:	4699      	mov	r9, r3
    115c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tempCharacter = dequeueParam();  //this now contains either a 5 or 6
    115e:	4b29      	ldr	r3, [pc, #164]	; (1204 <DSR+0x104>)
    1160:	4798      	blx	r3
    1162:	0004      	movs	r4, r0
    1164:	e7e2      	b.n	112c <DSR+0x2c>
			printf("%s",DSROSResponse);
    1166:	a905      	add	r1, sp, #20
    1168:	4827      	ldr	r0, [pc, #156]	; (1208 <DSR+0x108>)
    116a:	4b28      	ldr	r3, [pc, #160]	; (120c <DSR+0x10c>)
    116c:	4798      	blx	r3
		break;
    116e:	e7e1      	b.n	1134 <DSR+0x34>
			strcat(stringResponse,"\x1B");
    1170:	a802      	add	r0, sp, #8
    1172:	4f27      	ldr	r7, [pc, #156]	; (1210 <DSR+0x110>)
    1174:	47b8      	blx	r7
    1176:	ab02      	add	r3, sp, #8
    1178:	469c      	mov	ip, r3
    117a:	4460      	add	r0, ip
    117c:	2202      	movs	r2, #2
    117e:	4925      	ldr	r1, [pc, #148]	; (1214 <DSR+0x114>)
    1180:	4c25      	ldr	r4, [pc, #148]	; (1218 <DSR+0x118>)
    1182:	47a0      	blx	r4
			strcat(stringResponse,"\x5B");
    1184:	a802      	add	r0, sp, #8
    1186:	47b8      	blx	r7
    1188:	ab02      	add	r3, sp, #8
    118a:	469c      	mov	ip, r3
    118c:	4460      	add	r0, ip
    118e:	2202      	movs	r2, #2
    1190:	4922      	ldr	r1, [pc, #136]	; (121c <DSR+0x11c>)
    1192:	47a0      	blx	r4
			strcat(stringResponse,itoa(yTemp,tempbuffer,10));
    1194:	b2f0      	uxtb	r0, r6
    1196:	220a      	movs	r2, #10
    1198:	4669      	mov	r1, sp
    119a:	4b21      	ldr	r3, [pc, #132]	; (1220 <DSR+0x120>)
    119c:	4699      	mov	r9, r3
    119e:	4798      	blx	r3
    11a0:	0001      	movs	r1, r0
    11a2:	a802      	add	r0, sp, #8
    11a4:	4b1f      	ldr	r3, [pc, #124]	; (1224 <DSR+0x124>)
    11a6:	4698      	mov	r8, r3
    11a8:	4798      	blx	r3
			strcat(stringResponse,";");
    11aa:	a802      	add	r0, sp, #8
    11ac:	47b8      	blx	r7
    11ae:	ab02      	add	r3, sp, #8
    11b0:	469c      	mov	ip, r3
    11b2:	4460      	add	r0, ip
    11b4:	2202      	movs	r2, #2
    11b6:	491c      	ldr	r1, [pc, #112]	; (1228 <DSR+0x128>)
    11b8:	47a0      	blx	r4
			strcat(stringResponse,itoa(xTemp,tempbuffer,10));
    11ba:	b2e8      	uxtb	r0, r5
    11bc:	220a      	movs	r2, #10
    11be:	4669      	mov	r1, sp
    11c0:	47c8      	blx	r9
    11c2:	0001      	movs	r1, r0
    11c4:	a802      	add	r0, sp, #8
    11c6:	47c0      	blx	r8
			strcat(stringResponse,"R");
    11c8:	a802      	add	r0, sp, #8
    11ca:	47b8      	blx	r7
    11cc:	ab02      	add	r3, sp, #8
    11ce:	469c      	mov	ip, r3
    11d0:	4460      	add	r0, ip
    11d2:	2202      	movs	r2, #2
    11d4:	4915      	ldr	r1, [pc, #84]	; (122c <DSR+0x12c>)
    11d6:	47a0      	blx	r4
			printf("%s",stringResponse);
    11d8:	a902      	add	r1, sp, #8
    11da:	480b      	ldr	r0, [pc, #44]	; (1208 <DSR+0x108>)
    11dc:	4b0b      	ldr	r3, [pc, #44]	; (120c <DSR+0x10c>)
    11de:	4798      	blx	r3
		break;
    11e0:	e7a8      	b.n	1134 <DSR+0x34>
    11e2:	46c0      	nop			; (mov r8, r8)
    11e4:	200004e2 	.word	0x200004e2
    11e8:	200004e4 	.word	0x200004e4
    11ec:	0000688c 	.word	0x0000688c
    11f0:	2000002a 	.word	0x2000002a
    11f4:	000001e5 	.word	0x000001e5
    11f8:	00000241 	.word	0x00000241
    11fc:	00003ca9 	.word	0x00003ca9
    1200:	200004e7 	.word	0x200004e7
    1204:	00000255 	.word	0x00000255
    1208:	00006a04 	.word	0x00006a04
    120c:	00005529 	.word	0x00005529
    1210:	00005803 	.word	0x00005803
    1214:	000069d8 	.word	0x000069d8
    1218:	000053b5 	.word	0x000053b5
    121c:	000069dc 	.word	0x000069dc
    1220:	00005399 	.word	0x00005399
    1224:	000057e9 	.word	0x000057e9
    1228:	00006cf0 	.word	0x00006cf0
    122c:	000069e0 	.word	0x000069e0

00001230 <DECSTBM>:

void DECSTBM(void)
{
    1230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1232:	46ce      	mov	lr, r9
    1234:	4647      	mov	r7, r8
    1236:	b580      	push	{r7, lr}
	If the value specified for the bottom margin is greater than the the
	number of lines in the logical display page, this control will be ignored.
	*/
	
	
	cursorBlinkState = false;  //need to turn the blinking off; ugly kludge
    1238:	2200      	movs	r2, #0
    123a:	4b33      	ldr	r3, [pc, #204]	; (1308 <DECSTBM+0xd8>)
    123c:	701a      	strb	r2, [r3, #0]
	uint8_t topParameter = 0;
	uint8_t bottomParameter = 0;
	uint8_t tempCharacter;
	
	if(isEmptyParam())
    123e:	4b33      	ldr	r3, [pc, #204]	; (130c <DECSTBM+0xdc>)
    1240:	4798      	blx	r3
    1242:	2800      	cmp	r0, #0
    1244:	d120      	bne.n	1288 <DECSTBM+0x58>
	{
		//do nothing, fall through.		
	}
	else
	{
		while(!isEmptyParam())
    1246:	4f31      	ldr	r7, [pc, #196]	; (130c <DECSTBM+0xdc>)
		{
			topParameter = dequeueParam();
    1248:	4e31      	ldr	r6, [pc, #196]	; (1310 <DECSTBM+0xe0>)
    124a:	e028      	b.n	129e <DECSTBM+0x6e>
			
			if(topParameter == 0)
				topParameter = 1;
				
			if(bottomParameter == 0)
				bottomParameter = 24;
    124c:	2018      	movs	r0, #24
    124e:	e03a      	b.n	12c6 <DECSTBM+0x96>
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
					drawChar(tempCharacter);
				}
				else
				{
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    1250:	4c30      	ldr	r4, [pc, #192]	; (1314 <DECSTBM+0xe4>)
    1252:	4b31      	ldr	r3, [pc, #196]	; (1318 <DECSTBM+0xe8>)
    1254:	4699      	mov	r9, r3
    1256:	881a      	ldrh	r2, [r3, #0]
    1258:	4b30      	ldr	r3, [pc, #192]	; (131c <DECSTBM+0xec>)
    125a:	4698      	mov	r8, r3
    125c:	8819      	ldrh	r1, [r3, #0]
    125e:	0053      	lsls	r3, r2, #1
    1260:	189b      	adds	r3, r3, r2
    1262:	00db      	lsls	r3, r3, #3
    1264:	18e3      	adds	r3, r4, r3
    1266:	5c58      	ldrb	r0, [r3, r1]
    1268:	4d2d      	ldr	r5, [pc, #180]	; (1320 <DECSTBM+0xf0>)
    126a:	47a8      	blx	r5
					xCharPos = topMargin;
    126c:	4b2d      	ldr	r3, [pc, #180]	; (1324 <DECSTBM+0xf4>)
    126e:	781a      	ldrb	r2, [r3, #0]
    1270:	b2d2      	uxtb	r2, r2
    1272:	464b      	mov	r3, r9
    1274:	801a      	strh	r2, [r3, #0]
					yCharPos = 0;
    1276:	2300      	movs	r3, #0
    1278:	4641      	mov	r1, r8
    127a:	800b      	strh	r3, [r1, #0]
					tempCharacter = consoleDisplay[xCharPos][yCharPos];
    127c:	0053      	lsls	r3, r2, #1
    127e:	189b      	adds	r3, r3, r2
    1280:	00db      	lsls	r3, r3, #3
					drawChar(tempCharacter);					
    1282:	5d18      	ldrb	r0, [r3, r4]
    1284:	47a8      	blx	r5
    1286:	e00a      	b.n	129e <DECSTBM+0x6e>
				
			}
		}
	}
	
	blinkCursor();
    1288:	4b27      	ldr	r3, [pc, #156]	; (1328 <DECSTBM+0xf8>)
    128a:	4798      	blx	r3
	currentState = stateGround;
    128c:	2200      	movs	r2, #0
    128e:	4b27      	ldr	r3, [pc, #156]	; (132c <DECSTBM+0xfc>)
    1290:	701a      	strb	r2, [r3, #0]
}
    1292:	bc0c      	pop	{r2, r3}
    1294:	4690      	mov	r8, r2
    1296:	4699      	mov	r9, r3
    1298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if((topParameter < bottomParameter) && (bottomParameter <= 24))
    129a:	2c17      	cmp	r4, #23
    129c:	d9d6      	bls.n	124c <DECSTBM+0x1c>
		while(!isEmptyParam())
    129e:	47b8      	blx	r7
    12a0:	2800      	cmp	r0, #0
    12a2:	d1f1      	bne.n	1288 <DECSTBM+0x58>
			topParameter = dequeueParam();
    12a4:	47b0      	blx	r6
    12a6:	0004      	movs	r4, r0
			bottomParameter = dequeueParam();
    12a8:	47b0      	blx	r6
			if(topParameter == 0)
    12aa:	2c00      	cmp	r4, #0
    12ac:	d006      	beq.n	12bc <DECSTBM+0x8c>
			if(bottomParameter == 0)
    12ae:	2800      	cmp	r0, #0
    12b0:	d0f3      	beq.n	129a <DECSTBM+0x6a>
			if((topParameter < bottomParameter) && (bottomParameter <= 24))
    12b2:	42a0      	cmp	r0, r4
    12b4:	d9f3      	bls.n	129e <DECSTBM+0x6e>
    12b6:	2818      	cmp	r0, #24
    12b8:	d8f1      	bhi.n	129e <DECSTBM+0x6e>
    12ba:	e004      	b.n	12c6 <DECSTBM+0x96>
				topParameter = 1;
    12bc:	2401      	movs	r4, #1
			if(bottomParameter == 0)
    12be:	2800      	cmp	r0, #0
    12c0:	d1f7      	bne.n	12b2 <DECSTBM+0x82>
				topParameter = 1;
    12c2:	2401      	movs	r4, #1
				bottomParameter = 24;
    12c4:	2018      	movs	r0, #24
				topMargin = topParameter-1;
    12c6:	3c01      	subs	r4, #1
    12c8:	b2e4      	uxtb	r4, r4
    12ca:	4b16      	ldr	r3, [pc, #88]	; (1324 <DECSTBM+0xf4>)
    12cc:	701c      	strb	r4, [r3, #0]
				bottomMargin = bottomParameter;
    12ce:	4b18      	ldr	r3, [pc, #96]	; (1330 <DECSTBM+0x100>)
    12d0:	7018      	strb	r0, [r3, #0]
				if(originMode == ABSOLUTE)
    12d2:	4b18      	ldr	r3, [pc, #96]	; (1334 <DECSTBM+0x104>)
    12d4:	781b      	ldrb	r3, [r3, #0]
    12d6:	2b00      	cmp	r3, #0
    12d8:	d1ba      	bne.n	1250 <DECSTBM+0x20>
					drawChar(consoleDisplay[xCharPos][yCharPos]);
    12da:	4c0e      	ldr	r4, [pc, #56]	; (1314 <DECSTBM+0xe4>)
    12dc:	4b0e      	ldr	r3, [pc, #56]	; (1318 <DECSTBM+0xe8>)
    12de:	4699      	mov	r9, r3
    12e0:	881a      	ldrh	r2, [r3, #0]
    12e2:	4b0e      	ldr	r3, [pc, #56]	; (131c <DECSTBM+0xec>)
    12e4:	4698      	mov	r8, r3
    12e6:	8819      	ldrh	r1, [r3, #0]
    12e8:	0053      	lsls	r3, r2, #1
    12ea:	189b      	adds	r3, r3, r2
    12ec:	00db      	lsls	r3, r3, #3
    12ee:	18e3      	adds	r3, r4, r3
    12f0:	5c58      	ldrb	r0, [r3, r1]
    12f2:	4d0b      	ldr	r5, [pc, #44]	; (1320 <DECSTBM+0xf0>)
    12f4:	47a8      	blx	r5
					xCharPos = 0;
    12f6:	2300      	movs	r3, #0
    12f8:	464a      	mov	r2, r9
    12fa:	8013      	strh	r3, [r2, #0]
					yCharPos = 0;
    12fc:	4642      	mov	r2, r8
    12fe:	8013      	strh	r3, [r2, #0]
					drawChar(tempCharacter);
    1300:	7820      	ldrb	r0, [r4, #0]
    1302:	47a8      	blx	r5
    1304:	e7cb      	b.n	129e <DECSTBM+0x6e>
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	2000002a 	.word	0x2000002a
    130c:	00000241 	.word	0x00000241
    1310:	00000255 	.word	0x00000255
    1314:	200005ec 	.word	0x200005ec
    1318:	200004e2 	.word	0x200004e2
    131c:	200004e4 	.word	0x200004e4
    1320:	00003925 	.word	0x00003925
    1324:	20000029 	.word	0x20000029
    1328:	00003ca9 	.word	0x00003ca9
    132c:	200004e7 	.word	0x200004e7
    1330:	20000028 	.word	0x20000028
    1334:	200004e0 	.word	0x200004e0

00001338 <SM>:

void SM(void)
{
    1338:	b510      	push	{r4, lr}
	cursorBlinkState = false;
    133a:	2200      	movs	r2, #0
    133c:	4b0b      	ldr	r3, [pc, #44]	; (136c <SM+0x34>)
    133e:	701a      	strb	r2, [r3, #0]

	uint8_t temp;
	
	if(isEmptyParam())
    1340:	4b0b      	ldr	r3, [pc, #44]	; (1370 <SM+0x38>)
    1342:	4798      	blx	r3
    1344:	2800      	cmp	r0, #0
    1346:	d005      	beq.n	1354 <SM+0x1c>
				
					break;
			}
		}
	}
	blinkCursor();
    1348:	4b0a      	ldr	r3, [pc, #40]	; (1374 <SM+0x3c>)
    134a:	4798      	blx	r3
	currentState = stateGround;
    134c:	2200      	movs	r2, #0
    134e:	4b0a      	ldr	r3, [pc, #40]	; (1378 <SM+0x40>)
    1350:	701a      	strb	r2, [r3, #0]
}
    1352:	bd10      	pop	{r4, pc}
		temp = dequeueParam();
    1354:	4b09      	ldr	r3, [pc, #36]	; (137c <SM+0x44>)
    1356:	4798      	blx	r3
		if(temp == (uint8_t)'?')
    1358:	283f      	cmp	r0, #63	; 0x3f
    135a:	d1f5      	bne.n	1348 <SM+0x10>
			temp = dequeueParam();
    135c:	4b07      	ldr	r3, [pc, #28]	; (137c <SM+0x44>)
    135e:	4798      	blx	r3
			switch(temp)
    1360:	2806      	cmp	r0, #6
    1362:	d1f1      	bne.n	1348 <SM+0x10>
					originMode = DISPLACED;
    1364:	2201      	movs	r2, #1
    1366:	4b06      	ldr	r3, [pc, #24]	; (1380 <SM+0x48>)
    1368:	701a      	strb	r2, [r3, #0]
					break;
    136a:	e7ed      	b.n	1348 <SM+0x10>
    136c:	2000002a 	.word	0x2000002a
    1370:	00000241 	.word	0x00000241
    1374:	00003ca9 	.word	0x00003ca9
    1378:	200004e7 	.word	0x200004e7
    137c:	00000255 	.word	0x00000255
    1380:	200004e0 	.word	0x200004e0

00001384 <RM>:

void RM(void)
{
    1384:	b510      	push	{r4, lr}
	cursorBlinkState = false;
    1386:	2200      	movs	r2, #0
    1388:	4b0b      	ldr	r3, [pc, #44]	; (13b8 <RM+0x34>)
    138a:	701a      	strb	r2, [r3, #0]

	uint8_t temp;
	
	if(isEmptyParam())
    138c:	4b0b      	ldr	r3, [pc, #44]	; (13bc <RM+0x38>)
    138e:	4798      	blx	r3
    1390:	2800      	cmp	r0, #0
    1392:	d005      	beq.n	13a0 <RM+0x1c>
				
				break;
			}
		}
	}
	blinkCursor();
    1394:	4b0a      	ldr	r3, [pc, #40]	; (13c0 <RM+0x3c>)
    1396:	4798      	blx	r3
	currentState = stateGround;
    1398:	2200      	movs	r2, #0
    139a:	4b0a      	ldr	r3, [pc, #40]	; (13c4 <RM+0x40>)
    139c:	701a      	strb	r2, [r3, #0]
}
    139e:	bd10      	pop	{r4, pc}
		temp = dequeueParam();
    13a0:	4b09      	ldr	r3, [pc, #36]	; (13c8 <RM+0x44>)
    13a2:	4798      	blx	r3
		if(temp == (uint8_t)'?')
    13a4:	283f      	cmp	r0, #63	; 0x3f
    13a6:	d1f5      	bne.n	1394 <RM+0x10>
			temp = dequeueParam();
    13a8:	4b07      	ldr	r3, [pc, #28]	; (13c8 <RM+0x44>)
    13aa:	4798      	blx	r3
			switch(temp)
    13ac:	2806      	cmp	r0, #6
    13ae:	d1f1      	bne.n	1394 <RM+0x10>
				originMode = ABSOLUTE;
    13b0:	2200      	movs	r2, #0
    13b2:	4b06      	ldr	r3, [pc, #24]	; (13cc <RM+0x48>)
    13b4:	701a      	strb	r2, [r3, #0]
				break;
    13b6:	e7ed      	b.n	1394 <RM+0x10>
    13b8:	2000002a 	.word	0x2000002a
    13bc:	00000241 	.word	0x00000241
    13c0:	00003ca9 	.word	0x00003ca9
    13c4:	200004e7 	.word	0x200004e7
    13c8:	00000255 	.word	0x00000255
    13cc:	200004e0 	.word	0x200004e0

000013d0 <isValidCSIEscapeCode>:
bool isValidCSIEscapeCode(uint8_t character)
{
	
	for(uint8_t i = 0; i <= sizeof(csiEscCodes)/sizeof(csiEscCodes[0]) ; i++)
	{
		if(character == csiEscCodes[i])
    13d0:	2840      	cmp	r0, #64	; 0x40
    13d2:	d006      	beq.n	13e2 <isValidCSIEscapeCode+0x12>
    13d4:	4b04      	ldr	r3, [pc, #16]	; (13e8 <isValidCSIEscapeCode+0x18>)
    13d6:	3301      	adds	r3, #1
    13d8:	3301      	adds	r3, #1
    13da:	1e5a      	subs	r2, r3, #1
    13dc:	7812      	ldrb	r2, [r2, #0]
    13de:	4282      	cmp	r2, r0
    13e0:	d1fa      	bne.n	13d8 <isValidCSIEscapeCode+0x8>
		{
			return true;	
		}
	}
	return false;
}
    13e2:	2001      	movs	r0, #1
    13e4:	4770      	bx	lr
    13e6:	46c0      	nop			; (mov r8, r8)
    13e8:	000069e4 	.word	0x000069e4

000013ec <CSIparamState>:
{
    13ec:	b510      	push	{r4, lr}
    13ee:	0004      	movs	r4, r0
	if(character >= 0x30 && character <= 0x39)		//character is a digit, put it in the buffer
    13f0:	0003      	movs	r3, r0
    13f2:	3b30      	subs	r3, #48	; 0x30
    13f4:	2b09      	cmp	r3, #9
    13f6:	d90b      	bls.n	1410 <CSIparamState+0x24>
	else if(character == 0x3B)					//character is ';', now we take items out of 
    13f8:	283b      	cmp	r0, #59	; 0x3b
    13fa:	d00c      	beq.n	1416 <CSIparamState+0x2a>
	else if(character == 0x3F)					//character is '?', this is used for DECCKM
    13fc:	283f      	cmp	r0, #63	; 0x3f
    13fe:	d00e      	beq.n	141e <CSIparamState+0x32>
	else if(isValidCSIEscapeCode(character))		//character matches a supported escape code
    1400:	4b0d      	ldr	r3, [pc, #52]	; (1438 <CSIparamState+0x4c>)
    1402:	4798      	blx	r3
    1404:	2800      	cmp	r0, #0
    1406:	d10e      	bne.n	1426 <CSIparamState+0x3a>
		currentState = stateCSIignore;
    1408:	2205      	movs	r2, #5
    140a:	4b0c      	ldr	r3, [pc, #48]	; (143c <CSIparamState+0x50>)
    140c:	701a      	strb	r2, [r3, #0]
}
    140e:	bd10      	pop	{r4, pc}
		enqueueParser(character);
    1410:	4b0b      	ldr	r3, [pc, #44]	; (1440 <CSIparamState+0x54>)
    1412:	4798      	blx	r3
    1414:	e7fb      	b.n	140e <CSIparamState+0x22>
		enqueueParser(';');						//parambuffer 			
    1416:	203b      	movs	r0, #59	; 0x3b
    1418:	4b09      	ldr	r3, [pc, #36]	; (1440 <CSIparamState+0x54>)
    141a:	4798      	blx	r3
    141c:	e7f7      	b.n	140e <CSIparamState+0x22>
		enqueueParser('?');						//the terminating character
    141e:	203f      	movs	r0, #63	; 0x3f
    1420:	4b07      	ldr	r3, [pc, #28]	; (1440 <CSIparamState+0x54>)
    1422:	4798      	blx	r3
    1424:	e7f3      	b.n	140e <CSIparamState+0x22>
		queueTransmogrifier();											
    1426:	4b07      	ldr	r3, [pc, #28]	; (1444 <CSIparamState+0x58>)
    1428:	4798      	blx	r3
		currentState = stateCSIentry;
    142a:	2203      	movs	r2, #3
    142c:	4b03      	ldr	r3, [pc, #12]	; (143c <CSIparamState+0x50>)
    142e:	701a      	strb	r2, [r3, #0]
		CSIentryState(character);
    1430:	0020      	movs	r0, r4
    1432:	4b05      	ldr	r3, [pc, #20]	; (1448 <CSIparamState+0x5c>)
    1434:	4798      	blx	r3
    1436:	e7ea      	b.n	140e <CSIparamState+0x22>
    1438:	000013d1 	.word	0x000013d1
    143c:	200004e7 	.word	0x200004e7
    1440:	00000215 	.word	0x00000215
    1444:	00000309 	.word	0x00000309
    1448:	0000144d 	.word	0x0000144d

0000144c <CSIentryState>:
{
    144c:	b510      	push	{r4, lr}
	if(character == 0x40)		//ESC [ @ ICH insert indicated # of blank chars
    144e:	2840      	cmp	r0, #64	; 0x40
    1450:	d076      	beq.n	1540 <CSIentryState+0xf4>
	else if(character == 0x41)	//ESC [ A	Cursor Up
    1452:	2841      	cmp	r0, #65	; 0x41
    1454:	d100      	bne.n	1458 <CSIentryState+0xc>
    1456:	e077      	b.n	1548 <CSIentryState+0xfc>
	else if(character == 0x61)	//ESC [ a HPR
    1458:	2861      	cmp	r0, #97	; 0x61
    145a:	d100      	bne.n	145e <CSIentryState+0x12>
    145c:	e077      	b.n	154e <CSIentryState+0x102>
	else if(character == 0x42)	//ESC [ B	Cursor Down
    145e:	2842      	cmp	r0, #66	; 0x42
    1460:	d100      	bne.n	1464 <CSIentryState+0x18>
    1462:	e077      	b.n	1554 <CSIentryState+0x108>
	else if(character == 0x43)	//ESC [ C	Cursor Forward
    1464:	2843      	cmp	r0, #67	; 0x43
    1466:	d100      	bne.n	146a <CSIentryState+0x1e>
    1468:	e077      	b.n	155a <CSIentryState+0x10e>
	else if(character == 0x63)	//ESC [ c DA
    146a:	2863      	cmp	r0, #99	; 0x63
    146c:	d100      	bne.n	1470 <CSIentryState+0x24>
    146e:	e077      	b.n	1560 <CSIentryState+0x114>
	else if(character == 0x44)	//ESC [ D	Cursor Backward
    1470:	2844      	cmp	r0, #68	; 0x44
    1472:	d100      	bne.n	1476 <CSIentryState+0x2a>
    1474:	e07c      	b.n	1570 <CSIentryState+0x124>
	else if(character == 0x64)	//ESC [ d	VPA
    1476:	2864      	cmp	r0, #100	; 0x64
    1478:	d065      	beq.n	1546 <CSIentryState+0xfa>
	else if(character == 0x45)	//ESC [ E	Cursor Next Line
    147a:	2845      	cmp	r0, #69	; 0x45
    147c:	d100      	bne.n	1480 <CSIentryState+0x34>
    147e:	e07a      	b.n	1576 <CSIentryState+0x12a>
	else if(character == 0x65)	//ESC [ e VPR
    1480:	2865      	cmp	r0, #101	; 0x65
    1482:	d100      	bne.n	1486 <CSIentryState+0x3a>
    1484:	e07a      	b.n	157c <CSIentryState+0x130>
	else if(character == 0x46)	//ESC [ F	Cursor Preceding Line
    1486:	2846      	cmp	r0, #70	; 0x46
    1488:	d100      	bne.n	148c <CSIentryState+0x40>
    148a:	e07a      	b.n	1582 <CSIentryState+0x136>
	else if(character == 0x66)	//ESC [ f HVP
    148c:	2866      	cmp	r0, #102	; 0x66
    148e:	d100      	bne.n	1492 <CSIentryState+0x46>
    1490:	e07a      	b.n	1588 <CSIentryState+0x13c>
	else if(character == 0x47)	//ESC [ G	Cursor Horizontal Absolute
    1492:	2847      	cmp	r0, #71	; 0x47
    1494:	d100      	bne.n	1498 <CSIentryState+0x4c>
    1496:	e07a      	b.n	158e <CSIentryState+0x142>
	else if(character == 0x67)	//ESC [ g TBC
    1498:	2867      	cmp	r0, #103	; 0x67
    149a:	d100      	bne.n	149e <CSIentryState+0x52>
    149c:	e07a      	b.n	1594 <CSIentryState+0x148>
	else if(character == 0x48)	//ESC [ H	Cursor Position
    149e:	2848      	cmp	r0, #72	; 0x48
    14a0:	d100      	bne.n	14a4 <CSIentryState+0x58>
    14a2:	e07b      	b.n	159c <CSIentryState+0x150>
	else if(character == 0x68)	//ESC [ h Set Mode
    14a4:	2868      	cmp	r0, #104	; 0x68
    14a6:	d100      	bne.n	14aa <CSIentryState+0x5e>
    14a8:	e07b      	b.n	15a2 <CSIentryState+0x156>
	else if(character == 0x49)	//ESC [ I	Cursor Horizontal Tab
    14aa:	2849      	cmp	r0, #73	; 0x49
    14ac:	d100      	bne.n	14b0 <CSIentryState+0x64>
    14ae:	e07e      	b.n	15ae <CSIentryState+0x162>
	else if(character == 0x4A)	//ESC [ J	Erase In Display
    14b0:	284a      	cmp	r0, #74	; 0x4a
    14b2:	d100      	bne.n	14b6 <CSIentryState+0x6a>
    14b4:	e07f      	b.n	15b6 <CSIentryState+0x16a>
	else if(character == 0x4B)	//ESC [ K	Erase In Line
    14b6:	284b      	cmp	r0, #75	; 0x4b
    14b8:	d100      	bne.n	14bc <CSIentryState+0x70>
    14ba:	e07f      	b.n	15bc <CSIentryState+0x170>
	else if(character == 0x4C)	//ESC [ L 
    14bc:	284c      	cmp	r0, #76	; 0x4c
    14be:	d100      	bne.n	14c2 <CSIentryState+0x76>
    14c0:	e07f      	b.n	15c2 <CSIentryState+0x176>
	else if(character == 0x6C)	//ESC [ l	Reset mode
    14c2:	286c      	cmp	r0, #108	; 0x6c
    14c4:	d100      	bne.n	14c8 <CSIentryState+0x7c>
    14c6:	e080      	b.n	15ca <CSIentryState+0x17e>
	else if(character == 0x4D)	//ESC [ M
    14c8:	284d      	cmp	r0, #77	; 0x4d
    14ca:	d100      	bne.n	14ce <CSIentryState+0x82>
    14cc:	e083      	b.n	15d6 <CSIentryState+0x18a>
	else if(character == 0x6D)	//ESC [ m	Select Graphic Rendition
    14ce:	286d      	cmp	r0, #109	; 0x6d
    14d0:	d100      	bne.n	14d4 <CSIentryState+0x88>
    14d2:	e084      	b.n	15de <CSIentryState+0x192>
	else if(character == 0x6E)	//ESC [ n Device Status Report
    14d4:	286e      	cmp	r0, #110	; 0x6e
    14d6:	d100      	bne.n	14da <CSIentryState+0x8e>
    14d8:	e084      	b.n	15e4 <CSIentryState+0x198>
	else if(character == 0x50)	//ESC [ P	Delete Character
    14da:	2850      	cmp	r0, #80	; 0x50
    14dc:	d100      	bne.n	14e0 <CSIentryState+0x94>
    14de:	e084      	b.n	15ea <CSIentryState+0x19e>
	else if(character == 0x51)	//ESC [ Q	Select Edit Extent Mode
    14e0:	2851      	cmp	r0, #81	; 0x51
    14e2:	d100      	bne.n	14e6 <CSIentryState+0x9a>
    14e4:	e085      	b.n	15f2 <CSIentryState+0x1a6>
	else if(character == 0x71)	//ESC [ q	Set Keyboard LEDs
    14e6:	2871      	cmp	r0, #113	; 0x71
    14e8:	d100      	bne.n	14ec <CSIentryState+0xa0>
    14ea:	e086      	b.n	15fa <CSIentryState+0x1ae>
	else if(character == 0x72)	//ESC [ r	DECSTBM
    14ec:	2872      	cmp	r0, #114	; 0x72
    14ee:	d100      	bne.n	14f2 <CSIentryState+0xa6>
    14f0:	e087      	b.n	1602 <CSIentryState+0x1b6>
	else if(character == 0x73)	//ESC [ s	Save Cursor Position
    14f2:	2873      	cmp	r0, #115	; 0x73
    14f4:	d100      	bne.n	14f8 <CSIentryState+0xac>
    14f6:	e087      	b.n	1608 <CSIentryState+0x1bc>
	else if(character == 0x75)	//ESC [ u	Restore Cursor Position
    14f8:	2875      	cmp	r0, #117	; 0x75
    14fa:	d100      	bne.n	14fe <CSIentryState+0xb2>
    14fc:	e087      	b.n	160e <CSIentryState+0x1c2>
	else if(character == 0x58)	//ESC [ X
    14fe:	2858      	cmp	r0, #88	; 0x58
    1500:	d100      	bne.n	1504 <CSIentryState+0xb8>
    1502:	e087      	b.n	1614 <CSIentryState+0x1c8>
	else if(character == 0x57)	//ESC [ W	Cursor Tabulation Control
    1504:	2857      	cmp	r0, #87	; 0x57
    1506:	d100      	bne.n	150a <CSIentryState+0xbe>
    1508:	e088      	b.n	161c <CSIentryState+0x1d0>
	else if(character == 0x5A)	//ESC [ Z	Cursor Backwards Tab
    150a:	285a      	cmp	r0, #90	; 0x5a
    150c:	d100      	bne.n	1510 <CSIentryState+0xc4>
    150e:	e089      	b.n	1624 <CSIentryState+0x1d8>
	else if(character == 0x60)	//ESC [ ` HPA
    1510:	2860      	cmp	r0, #96	; 0x60
    1512:	d100      	bne.n	1516 <CSIentryState+0xca>
    1514:	e08a      	b.n	162c <CSIentryState+0x1e0>
	else if(character >= 0x30 && character <= 0x39) // if the character is a digit 0-9
    1516:	0003      	movs	r3, r0
    1518:	3b30      	subs	r3, #48	; 0x30
    151a:	2b09      	cmp	r3, #9
    151c:	d800      	bhi.n	1520 <CSIentryState+0xd4>
    151e:	e089      	b.n	1634 <CSIentryState+0x1e8>
	else if(character == 0x3B)	//Semicolon ; parameter deliminator
    1520:	283b      	cmp	r0, #59	; 0x3b
    1522:	d100      	bne.n	1526 <CSIentryState+0xda>
    1524:	e08c      	b.n	1640 <CSIentryState+0x1f4>
	else if(character == 0x3F)	//Question '?'; this is a param
    1526:	283f      	cmp	r0, #63	; 0x3f
    1528:	d100      	bne.n	152c <CSIentryState+0xe0>
    152a:	e08f      	b.n	164c <CSIentryState+0x200>
	else if(character == 0x1B)		//ESC, send back to stateESC
    152c:	281b      	cmp	r0, #27
    152e:	d100      	bne.n	1532 <CSIentryState+0xe6>
    1530:	e092      	b.n	1658 <CSIentryState+0x20c>
	else if(character == 0x3A)
    1532:	283a      	cmp	r0, #58	; 0x3a
    1534:	d100      	bne.n	1538 <CSIentryState+0xec>
    1536:	e093      	b.n	1660 <CSIentryState+0x214>
		currentState = stateGround;
    1538:	2200      	movs	r2, #0
    153a:	4b4b      	ldr	r3, [pc, #300]	; (1668 <CSIentryState+0x21c>)
    153c:	701a      	strb	r2, [r3, #0]
}
    153e:	e002      	b.n	1546 <CSIentryState+0xfa>
	currentState = stateGround;
    1540:	2200      	movs	r2, #0
    1542:	4b49      	ldr	r3, [pc, #292]	; (1668 <CSIentryState+0x21c>)
    1544:	701a      	strb	r2, [r3, #0]
}
    1546:	bd10      	pop	{r4, pc}
		CUU();
    1548:	4b48      	ldr	r3, [pc, #288]	; (166c <CSIentryState+0x220>)
    154a:	4798      	blx	r3
    154c:	e7fb      	b.n	1546 <CSIentryState+0xfa>
		CUF();
    154e:	4b48      	ldr	r3, [pc, #288]	; (1670 <CSIentryState+0x224>)
    1550:	4798      	blx	r3
    1552:	e7f8      	b.n	1546 <CSIentryState+0xfa>
		CUD();
    1554:	4b47      	ldr	r3, [pc, #284]	; (1674 <CSIentryState+0x228>)
    1556:	4798      	blx	r3
    1558:	e7f5      	b.n	1546 <CSIentryState+0xfa>
		CUF();
    155a:	4b45      	ldr	r3, [pc, #276]	; (1670 <CSIentryState+0x224>)
    155c:	4798      	blx	r3
    155e:	e7f2      	b.n	1546 <CSIentryState+0xfa>
		printf("%s",DECIDreturn);
    1560:	4945      	ldr	r1, [pc, #276]	; (1678 <CSIentryState+0x22c>)
    1562:	4846      	ldr	r0, [pc, #280]	; (167c <CSIentryState+0x230>)
    1564:	4b46      	ldr	r3, [pc, #280]	; (1680 <CSIentryState+0x234>)
    1566:	4798      	blx	r3
		currentState = stateGround;
    1568:	2200      	movs	r2, #0
    156a:	4b3f      	ldr	r3, [pc, #252]	; (1668 <CSIentryState+0x21c>)
    156c:	701a      	strb	r2, [r3, #0]
    156e:	e7ea      	b.n	1546 <CSIentryState+0xfa>
		CUB();
    1570:	4b44      	ldr	r3, [pc, #272]	; (1684 <CSIentryState+0x238>)
    1572:	4798      	blx	r3
    1574:	e7e7      	b.n	1546 <CSIentryState+0xfa>
		CNL();
    1576:	4b44      	ldr	r3, [pc, #272]	; (1688 <CSIentryState+0x23c>)
    1578:	4798      	blx	r3
    157a:	e7e4      	b.n	1546 <CSIentryState+0xfa>
		CUD();
    157c:	4b3d      	ldr	r3, [pc, #244]	; (1674 <CSIentryState+0x228>)
    157e:	4798      	blx	r3
    1580:	e7e1      	b.n	1546 <CSIentryState+0xfa>
		CPL();
    1582:	4b42      	ldr	r3, [pc, #264]	; (168c <CSIentryState+0x240>)
    1584:	4798      	blx	r3
    1586:	e7de      	b.n	1546 <CSIentryState+0xfa>
		CUP();
    1588:	4b41      	ldr	r3, [pc, #260]	; (1690 <CSIentryState+0x244>)
    158a:	4798      	blx	r3
    158c:	e7db      	b.n	1546 <CSIentryState+0xfa>
		CHA();
    158e:	4b41      	ldr	r3, [pc, #260]	; (1694 <CSIentryState+0x248>)
    1590:	4798      	blx	r3
    1592:	e7d8      	b.n	1546 <CSIentryState+0xfa>
		currentState = stateGround;
    1594:	2200      	movs	r2, #0
    1596:	4b34      	ldr	r3, [pc, #208]	; (1668 <CSIentryState+0x21c>)
    1598:	701a      	strb	r2, [r3, #0]
    159a:	e7d4      	b.n	1546 <CSIentryState+0xfa>
		CUP();
    159c:	4b3c      	ldr	r3, [pc, #240]	; (1690 <CSIentryState+0x244>)
    159e:	4798      	blx	r3
    15a0:	e7d1      	b.n	1546 <CSIentryState+0xfa>
		SM();
    15a2:	4b3d      	ldr	r3, [pc, #244]	; (1698 <CSIentryState+0x24c>)
    15a4:	4798      	blx	r3
		currentState = stateGround;
    15a6:	2200      	movs	r2, #0
    15a8:	4b2f      	ldr	r3, [pc, #188]	; (1668 <CSIentryState+0x21c>)
    15aa:	701a      	strb	r2, [r3, #0]
    15ac:	e7cb      	b.n	1546 <CSIentryState+0xfa>
	currentState = stateGround;
    15ae:	2200      	movs	r2, #0
    15b0:	4b2d      	ldr	r3, [pc, #180]	; (1668 <CSIentryState+0x21c>)
    15b2:	701a      	strb	r2, [r3, #0]
    15b4:	e7c7      	b.n	1546 <CSIentryState+0xfa>
		ED();
    15b6:	4b39      	ldr	r3, [pc, #228]	; (169c <CSIentryState+0x250>)
    15b8:	4798      	blx	r3
    15ba:	e7c4      	b.n	1546 <CSIentryState+0xfa>
		EL();
    15bc:	4b38      	ldr	r3, [pc, #224]	; (16a0 <CSIentryState+0x254>)
    15be:	4798      	blx	r3
    15c0:	e7c1      	b.n	1546 <CSIentryState+0xfa>
		currentState = stateGround;
    15c2:	2200      	movs	r2, #0
    15c4:	4b28      	ldr	r3, [pc, #160]	; (1668 <CSIentryState+0x21c>)
    15c6:	701a      	strb	r2, [r3, #0]
    15c8:	e7bd      	b.n	1546 <CSIentryState+0xfa>
		RM();
    15ca:	4b36      	ldr	r3, [pc, #216]	; (16a4 <CSIentryState+0x258>)
    15cc:	4798      	blx	r3
		currentState = stateGround;
    15ce:	2200      	movs	r2, #0
    15d0:	4b25      	ldr	r3, [pc, #148]	; (1668 <CSIentryState+0x21c>)
    15d2:	701a      	strb	r2, [r3, #0]
    15d4:	e7b7      	b.n	1546 <CSIentryState+0xfa>
		currentState = stateGround;
    15d6:	2200      	movs	r2, #0
    15d8:	4b23      	ldr	r3, [pc, #140]	; (1668 <CSIentryState+0x21c>)
    15da:	701a      	strb	r2, [r3, #0]
    15dc:	e7b3      	b.n	1546 <CSIentryState+0xfa>
		SGR();
    15de:	4b32      	ldr	r3, [pc, #200]	; (16a8 <CSIentryState+0x25c>)
    15e0:	4798      	blx	r3
    15e2:	e7b0      	b.n	1546 <CSIentryState+0xfa>
		DSR();
    15e4:	4b31      	ldr	r3, [pc, #196]	; (16ac <CSIentryState+0x260>)
    15e6:	4798      	blx	r3
    15e8:	e7ad      	b.n	1546 <CSIentryState+0xfa>
	currentState = stateGround;
    15ea:	2200      	movs	r2, #0
    15ec:	4b1e      	ldr	r3, [pc, #120]	; (1668 <CSIentryState+0x21c>)
    15ee:	701a      	strb	r2, [r3, #0]
    15f0:	e7a9      	b.n	1546 <CSIentryState+0xfa>
	currentState = stateGround;
    15f2:	2200      	movs	r2, #0
    15f4:	4b1c      	ldr	r3, [pc, #112]	; (1668 <CSIentryState+0x21c>)
    15f6:	701a      	strb	r2, [r3, #0]
    15f8:	e7a5      	b.n	1546 <CSIentryState+0xfa>
		currentState = stateGround;
    15fa:	2200      	movs	r2, #0
    15fc:	4b1a      	ldr	r3, [pc, #104]	; (1668 <CSIentryState+0x21c>)
    15fe:	701a      	strb	r2, [r3, #0]
    1600:	e7a1      	b.n	1546 <CSIentryState+0xfa>
		DECSTBM();
    1602:	4b2b      	ldr	r3, [pc, #172]	; (16b0 <CSIentryState+0x264>)
    1604:	4798      	blx	r3
    1606:	e79e      	b.n	1546 <CSIentryState+0xfa>
		SC();
    1608:	4b2a      	ldr	r3, [pc, #168]	; (16b4 <CSIentryState+0x268>)
    160a:	4798      	blx	r3
    160c:	e79b      	b.n	1546 <CSIentryState+0xfa>
		RC();
    160e:	4b2a      	ldr	r3, [pc, #168]	; (16b8 <CSIentryState+0x26c>)
    1610:	4798      	blx	r3
    1612:	e798      	b.n	1546 <CSIentryState+0xfa>
		currentState = stateGround;
    1614:	2200      	movs	r2, #0
    1616:	4b14      	ldr	r3, [pc, #80]	; (1668 <CSIentryState+0x21c>)
    1618:	701a      	strb	r2, [r3, #0]
    161a:	e794      	b.n	1546 <CSIentryState+0xfa>
	currentState = stateGround;
    161c:	2200      	movs	r2, #0
    161e:	4b12      	ldr	r3, [pc, #72]	; (1668 <CSIentryState+0x21c>)
    1620:	701a      	strb	r2, [r3, #0]
    1622:	e790      	b.n	1546 <CSIentryState+0xfa>
	currentState = stateGround;
    1624:	2200      	movs	r2, #0
    1626:	4b10      	ldr	r3, [pc, #64]	; (1668 <CSIentryState+0x21c>)
    1628:	701a      	strb	r2, [r3, #0]
    162a:	e78c      	b.n	1546 <CSIentryState+0xfa>
		currentState = stateGround;
    162c:	2200      	movs	r2, #0
    162e:	4b0e      	ldr	r3, [pc, #56]	; (1668 <CSIentryState+0x21c>)
    1630:	701a      	strb	r2, [r3, #0]
    1632:	e788      	b.n	1546 <CSIentryState+0xfa>
		currentState = stateCSIparam;
    1634:	2204      	movs	r2, #4
    1636:	4b0c      	ldr	r3, [pc, #48]	; (1668 <CSIentryState+0x21c>)
    1638:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    163a:	4b20      	ldr	r3, [pc, #128]	; (16bc <CSIentryState+0x270>)
    163c:	4798      	blx	r3
    163e:	e782      	b.n	1546 <CSIentryState+0xfa>
		currentState = stateCSIparam;
    1640:	2204      	movs	r2, #4
    1642:	4b09      	ldr	r3, [pc, #36]	; (1668 <CSIentryState+0x21c>)
    1644:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    1646:	4b1d      	ldr	r3, [pc, #116]	; (16bc <CSIentryState+0x270>)
    1648:	4798      	blx	r3
    164a:	e77c      	b.n	1546 <CSIentryState+0xfa>
		currentState = stateCSIparam;
    164c:	2204      	movs	r2, #4
    164e:	4b06      	ldr	r3, [pc, #24]	; (1668 <CSIentryState+0x21c>)
    1650:	701a      	strb	r2, [r3, #0]
		CSIparamState(character);
    1652:	4b1a      	ldr	r3, [pc, #104]	; (16bc <CSIentryState+0x270>)
    1654:	4798      	blx	r3
    1656:	e776      	b.n	1546 <CSIentryState+0xfa>
		currentState = stateESC;
    1658:	2201      	movs	r2, #1
    165a:	4b03      	ldr	r3, [pc, #12]	; (1668 <CSIentryState+0x21c>)
    165c:	701a      	strb	r2, [r3, #0]
    165e:	e772      	b.n	1546 <CSIentryState+0xfa>
		currentState = stateCSIignore;
    1660:	2205      	movs	r2, #5
    1662:	4b01      	ldr	r3, [pc, #4]	; (1668 <CSIentryState+0x21c>)
    1664:	701a      	strb	r2, [r3, #0]
    1666:	e76e      	b.n	1546 <CSIentryState+0xfa>
    1668:	200004e7 	.word	0x200004e7
    166c:	0000066d 	.word	0x0000066d
    1670:	000007b5 	.word	0x000007b5
    1674:	00000711 	.word	0x00000711
    1678:	000069d0 	.word	0x000069d0
    167c:	00006a04 	.word	0x00006a04
    1680:	00005529 	.word	0x00005529
    1684:	0000085d 	.word	0x0000085d
    1688:	000008f9 	.word	0x000008f9
    168c:	00000991 	.word	0x00000991
    1690:	00000aa9 	.word	0x00000aa9
    1694:	00000a25 	.word	0x00000a25
    1698:	00001339 	.word	0x00001339
    169c:	00000b7d 	.word	0x00000b7d
    16a0:	00000d85 	.word	0x00000d85
    16a4:	00001385 	.word	0x00001385
    16a8:	00000e79 	.word	0x00000e79
    16ac:	00001101 	.word	0x00001101
    16b0:	00001231 	.word	0x00001231
    16b4:	0000036d 	.word	0x0000036d
    16b8:	00000399 	.word	0x00000399
    16bc:	000013ed 	.word	0x000013ed

000016c0 <nextTab>:


int nextTab(int a) 
{
    16c0:	b510      	push	{r4, lr}
    16c2:	b0d0      	sub	sp, #320	; 0x140
    16c4:	0004      	movs	r4, r0
	/*
	what data structures for tabs are most performant and is is big-o of 
	number of column or big-o of number of tabs shut the fuck up
	*/
	
	int tabArray[] =
    16c6:	22a0      	movs	r2, #160	; 0xa0
    16c8:	0052      	lsls	r2, r2, #1
    16ca:	4905      	ldr	r1, [pc, #20]	; (16e0 <nextTab+0x20>)
    16cc:	3104      	adds	r1, #4
    16ce:	4668      	mov	r0, sp
    16d0:	4b04      	ldr	r3, [pc, #16]	; (16e4 <nextTab+0x24>)
    16d2:	4798      	blx	r3
		 64,64,64,64,64,64,64,64,
		 72,72,72,72,72,72,72,72,
		 79,79,79,79,79,79,79,79
		};
	
	return tabArray[a];
    16d4:	00a4      	lsls	r4, r4, #2
    16d6:	466b      	mov	r3, sp
    16d8:	58e0      	ldr	r0, [r4, r3]
}
    16da:	b050      	add	sp, #320	; 0x140
    16dc:	bd10      	pop	{r4, pc}
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	0000688c 	.word	0x0000688c
    16e4:	000053b5 	.word	0x000053b5

000016e8 <groundState>:
{
    16e8:	b570      	push	{r4, r5, r6, lr}
    16ea:	0004      	movs	r4, r0
	clearQueues();									//parser and paramQueues cleared
    16ec:	4bb9      	ldr	r3, [pc, #740]	; (19d4 <groundState+0x2ec>)
    16ee:	4798      	blx	r3
	if(character == 0x00)							//NUL 0x00 DO NOTHING
    16f0:	2c07      	cmp	r4, #7
    16f2:	d800      	bhi.n	16f6 <groundState+0xe>
    16f4:	e082      	b.n	17fc <groundState+0x114>
	else if(character == 0x08)						//BS 0x08 Backspace
    16f6:	2c08      	cmp	r4, #8
    16f8:	d100      	bne.n	16fc <groundState+0x14>
    16fa:	e07b      	b.n	17f4 <groundState+0x10c>
	else if(character == 0x09)						//TAB 0x09 Horizontal Tab
    16fc:	2c09      	cmp	r4, #9
    16fe:	d100      	bne.n	1702 <groundState+0x1a>
    1700:	e096      	b.n	1830 <groundState+0x148>
	else if(character == 0x0A)						//LF 0x0A Line Feed
    1702:	2c0a      	cmp	r4, #10
    1704:	d100      	bne.n	1708 <groundState+0x20>
    1706:	e0b5      	b.n	1874 <groundState+0x18c>
	else if(character == 0x0B)						//VT 0x0B Vertical Tab
    1708:	2c0b      	cmp	r4, #11
    170a:	d100      	bne.n	170e <groundState+0x26>
    170c:	e109      	b.n	1922 <groundState+0x23a>
	else if(character == 0x0C)						//FF 0x0C Form Feed
    170e:	2c0c      	cmp	r4, #12
    1710:	d100      	bne.n	1714 <groundState+0x2c>
    1712:	e181      	b.n	1a18 <groundState+0x330>
	else if(character == 0x0D)						//CR 0x0D Carriage Return
    1714:	2c0d      	cmp	r4, #13
    1716:	d100      	bne.n	171a <groundState+0x32>
    1718:	e1d6      	b.n	1ac8 <groundState+0x3e0>
	else if(character == 0x0E)						//SO 0x0E Shift Out
    171a:	0023      	movs	r3, r4
    171c:	3b0e      	subs	r3, #14
    171e:	2b0c      	cmp	r3, #12
    1720:	d96c      	bls.n	17fc <groundState+0x114>
	else if(character == 0x1B)						//ESC 0x1B Escape
    1722:	2c1b      	cmp	r4, #27
    1724:	d100      	bne.n	1728 <groundState+0x40>
    1726:	e1f5      	b.n	1b14 <groundState+0x42c>
	else if(character == 0x1C)						//FS 0x1C File Separator
    1728:	0023      	movs	r3, r4
    172a:	3b1c      	subs	r3, #28
    172c:	2b03      	cmp	r3, #3
    172e:	d965      	bls.n	17fc <groundState+0x114>
	else if(character == 0x7F)						//DEL 0x7F Delete
    1730:	2c7f      	cmp	r4, #127	; 0x7f
    1732:	d063      	beq.n	17fc <groundState+0x114>
		consoleDisplay[xCharPos][yCharPos] = character;
    1734:	4ba8      	ldr	r3, [pc, #672]	; (19d8 <groundState+0x2f0>)
    1736:	881a      	ldrh	r2, [r3, #0]
    1738:	4ba8      	ldr	r3, [pc, #672]	; (19dc <groundState+0x2f4>)
    173a:	881b      	ldrh	r3, [r3, #0]
    173c:	2018      	movs	r0, #24
    173e:	4350      	muls	r0, r2
    1740:	49a7      	ldr	r1, [pc, #668]	; (19e0 <groundState+0x2f8>)
    1742:	1809      	adds	r1, r1, r0
    1744:	54cc      	strb	r4, [r1, r3]
		if(textReverseVideo == true)  //If this is reverse Text
    1746:	49a7      	ldr	r1, [pc, #668]	; (19e4 <groundState+0x2fc>)
    1748:	7809      	ldrb	r1, [r1, #0]
    174a:	2900      	cmp	r1, #0
    174c:	d100      	bne.n	1750 <groundState+0x68>
    174e:	e1e5      	b.n	1b1c <groundState+0x434>
			SetBit(consoleSGR[xCharPos][yCharPos],7);
    1750:	2018      	movs	r0, #24
    1752:	4350      	muls	r0, r2
    1754:	49a4      	ldr	r1, [pc, #656]	; (19e8 <groundState+0x300>)
    1756:	1809      	adds	r1, r1, r0
    1758:	5ccd      	ldrb	r5, [r1, r3]
    175a:	2080      	movs	r0, #128	; 0x80
    175c:	4240      	negs	r0, r0
    175e:	4328      	orrs	r0, r5
    1760:	54c8      	strb	r0, [r1, r3]
		if(textBold == true)
    1762:	49a2      	ldr	r1, [pc, #648]	; (19ec <groundState+0x304>)
    1764:	7809      	ldrb	r1, [r1, #0]
    1766:	2900      	cmp	r1, #0
    1768:	d100      	bne.n	176c <groundState+0x84>
    176a:	e1e0      	b.n	1b2e <groundState+0x446>
			SetBit(consoleSGR[xCharPos][yCharPos],1);
    176c:	2018      	movs	r0, #24
    176e:	4350      	muls	r0, r2
    1770:	499d      	ldr	r1, [pc, #628]	; (19e8 <groundState+0x300>)
    1772:	1809      	adds	r1, r1, r0
    1774:	5ccd      	ldrb	r5, [r1, r3]
    1776:	2002      	movs	r0, #2
    1778:	4328      	orrs	r0, r5
    177a:	54c8      	strb	r0, [r1, r3]
		if(textUnderscore == true)
    177c:	499c      	ldr	r1, [pc, #624]	; (19f0 <groundState+0x308>)
    177e:	7809      	ldrb	r1, [r1, #0]
    1780:	2900      	cmp	r1, #0
    1782:	d100      	bne.n	1786 <groundState+0x9e>
    1784:	e1dc      	b.n	1b40 <groundState+0x458>
			SetBit(consoleSGR[xCharPos][yCharPos],4);
    1786:	2018      	movs	r0, #24
    1788:	4350      	muls	r0, r2
    178a:	4997      	ldr	r1, [pc, #604]	; (19e8 <groundState+0x300>)
    178c:	1809      	adds	r1, r1, r0
    178e:	5ccd      	ldrb	r5, [r1, r3]
    1790:	2010      	movs	r0, #16
    1792:	4328      	orrs	r0, r5
    1794:	54c8      	strb	r0, [r1, r3]
		if(textBlink == true)
    1796:	4997      	ldr	r1, [pc, #604]	; (19f4 <groundState+0x30c>)
    1798:	7809      	ldrb	r1, [r1, #0]
    179a:	2900      	cmp	r1, #0
    179c:	d100      	bne.n	17a0 <groundState+0xb8>
    179e:	e1d8      	b.n	1b52 <groundState+0x46a>
			SetBit(consoleSGR[xCharPos][yCharPos],5);
    17a0:	2018      	movs	r0, #24
    17a2:	4350      	muls	r0, r2
    17a4:	4990      	ldr	r1, [pc, #576]	; (19e8 <groundState+0x300>)
    17a6:	1809      	adds	r1, r1, r0
    17a8:	5ccd      	ldrb	r5, [r1, r3]
    17aa:	2020      	movs	r0, #32
    17ac:	4328      	orrs	r0, r5
    17ae:	54c8      	strb	r0, [r1, r3]
		consoleColors[xCharPos][yCharPos] = (textForeground << 16) | textBackground;
    17b0:	2518      	movs	r5, #24
    17b2:	436a      	muls	r2, r5
    17b4:	18d3      	adds	r3, r2, r3
    17b6:	009b      	lsls	r3, r3, #2
    17b8:	4a8f      	ldr	r2, [pc, #572]	; (19f8 <groundState+0x310>)
    17ba:	8812      	ldrh	r2, [r2, #0]
    17bc:	0412      	lsls	r2, r2, #16
    17be:	498f      	ldr	r1, [pc, #572]	; (19fc <groundState+0x314>)
    17c0:	8809      	ldrh	r1, [r1, #0]
    17c2:	430a      	orrs	r2, r1
    17c4:	498e      	ldr	r1, [pc, #568]	; (1a00 <groundState+0x318>)
    17c6:	505a      	str	r2, [r3, r1]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    17c8:	0020      	movs	r0, r4
    17ca:	4e8e      	ldr	r6, [pc, #568]	; (1a04 <groundState+0x31c>)
    17cc:	47b0      	blx	r6
		xCharPos++;
    17ce:	4c82      	ldr	r4, [pc, #520]	; (19d8 <groundState+0x2f0>)
    17d0:	8823      	ldrh	r3, [r4, #0]
    17d2:	3301      	adds	r3, #1
    17d4:	b29b      	uxth	r3, r3
    17d6:	8023      	strh	r3, [r4, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    17d8:	4a80      	ldr	r2, [pc, #512]	; (19dc <groundState+0x2f4>)
    17da:	8812      	ldrh	r2, [r2, #0]
    17dc:	436b      	muls	r3, r5
    17de:	4d80      	ldr	r5, [pc, #512]	; (19e0 <groundState+0x2f8>)
    17e0:	18eb      	adds	r3, r5, r3
    17e2:	5c98      	ldrb	r0, [r3, r2]
    17e4:	47b0      	blx	r6
		if(xCharPos > 79)		//END OF LINE
    17e6:	8823      	ldrh	r3, [r4, #0]
    17e8:	2b4f      	cmp	r3, #79	; 0x4f
    17ea:	d907      	bls.n	17fc <groundState+0x114>
			xCharPos--;
    17ec:	3b01      	subs	r3, #1
    17ee:	4a7a      	ldr	r2, [pc, #488]	; (19d8 <groundState+0x2f0>)
    17f0:	8013      	strh	r3, [r2, #0]
}
    17f2:	e003      	b.n	17fc <groundState+0x114>
		if(xCharPos > 0)
    17f4:	4b78      	ldr	r3, [pc, #480]	; (19d8 <groundState+0x2f0>)
    17f6:	881b      	ldrh	r3, [r3, #0]
    17f8:	2b00      	cmp	r3, #0
    17fa:	d100      	bne.n	17fe <groundState+0x116>
}
    17fc:	bd70      	pop	{r4, r5, r6, pc}
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    17fe:	4c78      	ldr	r4, [pc, #480]	; (19e0 <groundState+0x2f8>)
    1800:	4d76      	ldr	r5, [pc, #472]	; (19dc <groundState+0x2f4>)
    1802:	8829      	ldrh	r1, [r5, #0]
    1804:	005a      	lsls	r2, r3, #1
    1806:	18d3      	adds	r3, r2, r3
    1808:	00db      	lsls	r3, r3, #3
    180a:	18e3      	adds	r3, r4, r3
    180c:	5c58      	ldrb	r0, [r3, r1]
    180e:	4e7d      	ldr	r6, [pc, #500]	; (1a04 <groundState+0x31c>)
    1810:	47b0      	blx	r6
			xCharPos--;
    1812:	4a71      	ldr	r2, [pc, #452]	; (19d8 <groundState+0x2f0>)
    1814:	8813      	ldrh	r3, [r2, #0]
    1816:	3b01      	subs	r3, #1
    1818:	b29b      	uxth	r3, r3
    181a:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    181c:	8829      	ldrh	r1, [r5, #0]
    181e:	005a      	lsls	r2, r3, #1
    1820:	18d3      	adds	r3, r2, r3
    1822:	00db      	lsls	r3, r3, #3
    1824:	18e3      	adds	r3, r4, r3
			drawChar(tempCharacter);
    1826:	5c58      	ldrb	r0, [r3, r1]
    1828:	47b0      	blx	r6
			blinkCursor();
    182a:	4b77      	ldr	r3, [pc, #476]	; (1a08 <groundState+0x320>)
    182c:	4798      	blx	r3
    182e:	e7e5      	b.n	17fc <groundState+0x114>
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1830:	4c69      	ldr	r4, [pc, #420]	; (19d8 <groundState+0x2f0>)
    1832:	8822      	ldrh	r2, [r4, #0]
    1834:	4b69      	ldr	r3, [pc, #420]	; (19dc <groundState+0x2f4>)
    1836:	8819      	ldrh	r1, [r3, #0]
    1838:	0053      	lsls	r3, r2, #1
    183a:	189b      	adds	r3, r3, r2
    183c:	00db      	lsls	r3, r3, #3
    183e:	4a68      	ldr	r2, [pc, #416]	; (19e0 <groundState+0x2f8>)
    1840:	18d3      	adds	r3, r2, r3
    1842:	5c58      	ldrb	r0, [r3, r1]
    1844:	4b6f      	ldr	r3, [pc, #444]	; (1a04 <groundState+0x31c>)
    1846:	4798      	blx	r3
		if(xCharPos <= 79)
    1848:	8820      	ldrh	r0, [r4, #0]
    184a:	284f      	cmp	r0, #79	; 0x4f
    184c:	d803      	bhi.n	1856 <groundState+0x16e>
			xCharPos = nextTab(xCharPos);
    184e:	4b6f      	ldr	r3, [pc, #444]	; (1a0c <groundState+0x324>)
    1850:	4798      	blx	r3
    1852:	4b61      	ldr	r3, [pc, #388]	; (19d8 <groundState+0x2f0>)
    1854:	8018      	strh	r0, [r3, #0]
		drawChar(consoleDisplay[xCharPos][yCharPos]);
    1856:	4b60      	ldr	r3, [pc, #384]	; (19d8 <groundState+0x2f0>)
    1858:	881a      	ldrh	r2, [r3, #0]
    185a:	4b60      	ldr	r3, [pc, #384]	; (19dc <groundState+0x2f4>)
    185c:	8819      	ldrh	r1, [r3, #0]
    185e:	0053      	lsls	r3, r2, #1
    1860:	189b      	adds	r3, r3, r2
    1862:	00db      	lsls	r3, r3, #3
    1864:	4a5e      	ldr	r2, [pc, #376]	; (19e0 <groundState+0x2f8>)
    1866:	18d3      	adds	r3, r2, r3
    1868:	5c58      	ldrb	r0, [r3, r1]
    186a:	4b66      	ldr	r3, [pc, #408]	; (1a04 <groundState+0x31c>)
    186c:	4798      	blx	r3
		blinkCursor();
    186e:	4b66      	ldr	r3, [pc, #408]	; (1a08 <groundState+0x320>)
    1870:	4798      	blx	r3
    1872:	e7c3      	b.n	17fc <groundState+0x114>
		if(yCharPos == 23)
    1874:	4b59      	ldr	r3, [pc, #356]	; (19dc <groundState+0x2f4>)
    1876:	881a      	ldrh	r2, [r3, #0]
    1878:	2a17      	cmp	r2, #23
    187a:	d032      	beq.n	18e2 <groundState+0x1fa>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    187c:	4c58      	ldr	r4, [pc, #352]	; (19e0 <groundState+0x2f8>)
    187e:	4d56      	ldr	r5, [pc, #344]	; (19d8 <groundState+0x2f0>)
    1880:	8829      	ldrh	r1, [r5, #0]
    1882:	004b      	lsls	r3, r1, #1
    1884:	185b      	adds	r3, r3, r1
    1886:	00db      	lsls	r3, r3, #3
    1888:	18e3      	adds	r3, r4, r3
    188a:	5c98      	ldrb	r0, [r3, r2]
    188c:	4e5d      	ldr	r6, [pc, #372]	; (1a04 <groundState+0x31c>)
    188e:	47b0      	blx	r6
			yCharPos++;
    1890:	4a52      	ldr	r2, [pc, #328]	; (19dc <groundState+0x2f4>)
    1892:	8813      	ldrh	r3, [r2, #0]
    1894:	3301      	adds	r3, #1
    1896:	b29b      	uxth	r3, r3
    1898:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    189a:	8829      	ldrh	r1, [r5, #0]
    189c:	004a      	lsls	r2, r1, #1
    189e:	1852      	adds	r2, r2, r1
    18a0:	00d2      	lsls	r2, r2, #3
    18a2:	18a4      	adds	r4, r4, r2
    18a4:	5ce0      	ldrb	r0, [r4, r3]
    18a6:	47b0      	blx	r6
			blinkCursor();
    18a8:	4b57      	ldr	r3, [pc, #348]	; (1a08 <groundState+0x320>)
    18aa:	4798      	blx	r3
		if(lineFeed)
    18ac:	4b58      	ldr	r3, [pc, #352]	; (1a10 <groundState+0x328>)
    18ae:	781b      	ldrb	r3, [r3, #0]
    18b0:	2b00      	cmp	r3, #0
    18b2:	d0a3      	beq.n	17fc <groundState+0x114>
			if(yCharPos == 23)
    18b4:	4b49      	ldr	r3, [pc, #292]	; (19dc <groundState+0x2f4>)
    18b6:	881a      	ldrh	r2, [r3, #0]
    18b8:	2a17      	cmp	r2, #23
    18ba:	d021      	beq.n	1900 <groundState+0x218>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    18bc:	4d48      	ldr	r5, [pc, #288]	; (19e0 <groundState+0x2f8>)
    18be:	4e46      	ldr	r6, [pc, #280]	; (19d8 <groundState+0x2f0>)
    18c0:	8831      	ldrh	r1, [r6, #0]
    18c2:	004b      	lsls	r3, r1, #1
    18c4:	185b      	adds	r3, r3, r1
    18c6:	00db      	lsls	r3, r3, #3
    18c8:	18eb      	adds	r3, r5, r3
    18ca:	5c98      	ldrb	r0, [r3, r2]
    18cc:	4c4d      	ldr	r4, [pc, #308]	; (1a04 <groundState+0x31c>)
    18ce:	47a0      	blx	r4
				xCharPos = 0;
    18d0:	2300      	movs	r3, #0
    18d2:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    18d4:	4b41      	ldr	r3, [pc, #260]	; (19dc <groundState+0x2f4>)
    18d6:	881b      	ldrh	r3, [r3, #0]
    18d8:	5ce8      	ldrb	r0, [r5, r3]
    18da:	47a0      	blx	r4
				blinkCursor();
    18dc:	4b4a      	ldr	r3, [pc, #296]	; (1a08 <groundState+0x320>)
    18de:	4798      	blx	r3
    18e0:	e78c      	b.n	17fc <groundState+0x114>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    18e2:	4b3d      	ldr	r3, [pc, #244]	; (19d8 <groundState+0x2f0>)
    18e4:	881a      	ldrh	r2, [r3, #0]
    18e6:	0053      	lsls	r3, r2, #1
    18e8:	189b      	adds	r3, r3, r2
    18ea:	00db      	lsls	r3, r3, #3
    18ec:	4a3c      	ldr	r2, [pc, #240]	; (19e0 <groundState+0x2f8>)
    18ee:	18d3      	adds	r3, r2, r3
    18f0:	7dd8      	ldrb	r0, [r3, #23]
    18f2:	4b44      	ldr	r3, [pc, #272]	; (1a04 <groundState+0x31c>)
    18f4:	4798      	blx	r3
			newLine();
    18f6:	4b47      	ldr	r3, [pc, #284]	; (1a14 <groundState+0x32c>)
    18f8:	4798      	blx	r3
			blinkCursor();
    18fa:	4b43      	ldr	r3, [pc, #268]	; (1a08 <groundState+0x320>)
    18fc:	4798      	blx	r3
    18fe:	e7d5      	b.n	18ac <groundState+0x1c4>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1900:	4d35      	ldr	r5, [pc, #212]	; (19d8 <groundState+0x2f0>)
    1902:	882a      	ldrh	r2, [r5, #0]
    1904:	0053      	lsls	r3, r2, #1
    1906:	189b      	adds	r3, r3, r2
    1908:	00db      	lsls	r3, r3, #3
    190a:	4a35      	ldr	r2, [pc, #212]	; (19e0 <groundState+0x2f8>)
    190c:	18d3      	adds	r3, r2, r3
    190e:	7dd8      	ldrb	r0, [r3, #23]
    1910:	4c3c      	ldr	r4, [pc, #240]	; (1a04 <groundState+0x31c>)
    1912:	47a0      	blx	r4
				xCharPos = 0;
    1914:	2300      	movs	r3, #0
    1916:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    1918:	2000      	movs	r0, #0
    191a:	47a0      	blx	r4
				blinkCursor();
    191c:	4b3a      	ldr	r3, [pc, #232]	; (1a08 <groundState+0x320>)
    191e:	4798      	blx	r3
    1920:	e76c      	b.n	17fc <groundState+0x114>
		if(yCharPos == 23)
    1922:	4b2e      	ldr	r3, [pc, #184]	; (19dc <groundState+0x2f4>)
    1924:	881a      	ldrh	r2, [r3, #0]
    1926:	2a17      	cmp	r2, #23
    1928:	d033      	beq.n	1992 <groundState+0x2aa>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    192a:	4c2d      	ldr	r4, [pc, #180]	; (19e0 <groundState+0x2f8>)
    192c:	4d2a      	ldr	r5, [pc, #168]	; (19d8 <groundState+0x2f0>)
    192e:	8829      	ldrh	r1, [r5, #0]
    1930:	004b      	lsls	r3, r1, #1
    1932:	185b      	adds	r3, r3, r1
    1934:	00db      	lsls	r3, r3, #3
    1936:	18e3      	adds	r3, r4, r3
    1938:	5c98      	ldrb	r0, [r3, r2]
    193a:	4e32      	ldr	r6, [pc, #200]	; (1a04 <groundState+0x31c>)
    193c:	47b0      	blx	r6
			yCharPos++;
    193e:	4a27      	ldr	r2, [pc, #156]	; (19dc <groundState+0x2f4>)
    1940:	8813      	ldrh	r3, [r2, #0]
    1942:	3301      	adds	r3, #1
    1944:	b29b      	uxth	r3, r3
    1946:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1948:	8829      	ldrh	r1, [r5, #0]
    194a:	004a      	lsls	r2, r1, #1
    194c:	1852      	adds	r2, r2, r1
    194e:	00d2      	lsls	r2, r2, #3
    1950:	18a4      	adds	r4, r4, r2
    1952:	5ce0      	ldrb	r0, [r4, r3]
    1954:	47b0      	blx	r6
			blinkCursor();
    1956:	4b2c      	ldr	r3, [pc, #176]	; (1a08 <groundState+0x320>)
    1958:	4798      	blx	r3
		if(lineFeed)
    195a:	4b2d      	ldr	r3, [pc, #180]	; (1a10 <groundState+0x328>)
    195c:	781b      	ldrb	r3, [r3, #0]
    195e:	2b00      	cmp	r3, #0
    1960:	d100      	bne.n	1964 <groundState+0x27c>
    1962:	e74b      	b.n	17fc <groundState+0x114>
			if(yCharPos == 23)
    1964:	4b1d      	ldr	r3, [pc, #116]	; (19dc <groundState+0x2f4>)
    1966:	881a      	ldrh	r2, [r3, #0]
    1968:	2a17      	cmp	r2, #23
    196a:	d021      	beq.n	19b0 <groundState+0x2c8>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    196c:	4d1c      	ldr	r5, [pc, #112]	; (19e0 <groundState+0x2f8>)
    196e:	4e1a      	ldr	r6, [pc, #104]	; (19d8 <groundState+0x2f0>)
    1970:	8831      	ldrh	r1, [r6, #0]
    1972:	004b      	lsls	r3, r1, #1
    1974:	185b      	adds	r3, r3, r1
    1976:	00db      	lsls	r3, r3, #3
    1978:	18eb      	adds	r3, r5, r3
    197a:	5c98      	ldrb	r0, [r3, r2]
    197c:	4c21      	ldr	r4, [pc, #132]	; (1a04 <groundState+0x31c>)
    197e:	47a0      	blx	r4
				xCharPos = 0;
    1980:	2300      	movs	r3, #0
    1982:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1984:	4b15      	ldr	r3, [pc, #84]	; (19dc <groundState+0x2f4>)
    1986:	881b      	ldrh	r3, [r3, #0]
    1988:	5ce8      	ldrb	r0, [r5, r3]
    198a:	47a0      	blx	r4
				blinkCursor();
    198c:	4b1e      	ldr	r3, [pc, #120]	; (1a08 <groundState+0x320>)
    198e:	4798      	blx	r3
    1990:	e734      	b.n	17fc <groundState+0x114>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1992:	4b11      	ldr	r3, [pc, #68]	; (19d8 <groundState+0x2f0>)
    1994:	881a      	ldrh	r2, [r3, #0]
    1996:	0053      	lsls	r3, r2, #1
    1998:	189b      	adds	r3, r3, r2
    199a:	00db      	lsls	r3, r3, #3
    199c:	4a10      	ldr	r2, [pc, #64]	; (19e0 <groundState+0x2f8>)
    199e:	18d3      	adds	r3, r2, r3
    19a0:	7dd8      	ldrb	r0, [r3, #23]
    19a2:	4b18      	ldr	r3, [pc, #96]	; (1a04 <groundState+0x31c>)
    19a4:	4798      	blx	r3
			newLine();
    19a6:	4b1b      	ldr	r3, [pc, #108]	; (1a14 <groundState+0x32c>)
    19a8:	4798      	blx	r3
			blinkCursor();
    19aa:	4b17      	ldr	r3, [pc, #92]	; (1a08 <groundState+0x320>)
    19ac:	4798      	blx	r3
    19ae:	e7d4      	b.n	195a <groundState+0x272>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    19b0:	4d09      	ldr	r5, [pc, #36]	; (19d8 <groundState+0x2f0>)
    19b2:	882a      	ldrh	r2, [r5, #0]
    19b4:	0053      	lsls	r3, r2, #1
    19b6:	189b      	adds	r3, r3, r2
    19b8:	00db      	lsls	r3, r3, #3
    19ba:	4a09      	ldr	r2, [pc, #36]	; (19e0 <groundState+0x2f8>)
    19bc:	18d3      	adds	r3, r2, r3
    19be:	7dd8      	ldrb	r0, [r3, #23]
    19c0:	4c10      	ldr	r4, [pc, #64]	; (1a04 <groundState+0x31c>)
    19c2:	47a0      	blx	r4
				xCharPos = 0;
    19c4:	2300      	movs	r3, #0
    19c6:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    19c8:	2000      	movs	r0, #0
    19ca:	47a0      	blx	r4
				blinkCursor();
    19cc:	4b0e      	ldr	r3, [pc, #56]	; (1a08 <groundState+0x320>)
    19ce:	4798      	blx	r3
    19d0:	e714      	b.n	17fc <groundState+0x114>
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	000002b1 	.word	0x000002b1
    19d8:	200004e2 	.word	0x200004e2
    19dc:	200004e4 	.word	0x200004e4
    19e0:	200005ec 	.word	0x200005ec
    19e4:	20000582 	.word	0x20000582
    19e8:	20000d6c 	.word	0x20000d6c
    19ec:	20000580 	.word	0x20000580
    19f0:	20000560 	.word	0x20000560
    19f4:	20000562 	.word	0x20000562
    19f8:	20000014 	.word	0x20000014
    19fc:	2000041e 	.word	0x2000041e
    1a00:	200014ec 	.word	0x200014ec
    1a04:	00003925 	.word	0x00003925
    1a08:	00003ca9 	.word	0x00003ca9
    1a0c:	000016c1 	.word	0x000016c1
    1a10:	20000190 	.word	0x20000190
    1a14:	00003e81 	.word	0x00003e81
		if(yCharPos == 23)
    1a18:	4b52      	ldr	r3, [pc, #328]	; (1b64 <groundState+0x47c>)
    1a1a:	881a      	ldrh	r2, [r3, #0]
    1a1c:	2a17      	cmp	r2, #23
    1a1e:	d033      	beq.n	1a88 <groundState+0x3a0>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1a20:	4c51      	ldr	r4, [pc, #324]	; (1b68 <groundState+0x480>)
    1a22:	4d52      	ldr	r5, [pc, #328]	; (1b6c <groundState+0x484>)
    1a24:	8829      	ldrh	r1, [r5, #0]
    1a26:	004b      	lsls	r3, r1, #1
    1a28:	185b      	adds	r3, r3, r1
    1a2a:	00db      	lsls	r3, r3, #3
    1a2c:	18e3      	adds	r3, r4, r3
    1a2e:	5c98      	ldrb	r0, [r3, r2]
    1a30:	4e4f      	ldr	r6, [pc, #316]	; (1b70 <groundState+0x488>)
    1a32:	47b0      	blx	r6
			yCharPos++;
    1a34:	4a4b      	ldr	r2, [pc, #300]	; (1b64 <groundState+0x47c>)
    1a36:	8813      	ldrh	r3, [r2, #0]
    1a38:	3301      	adds	r3, #1
    1a3a:	b29b      	uxth	r3, r3
    1a3c:	8013      	strh	r3, [r2, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1a3e:	8829      	ldrh	r1, [r5, #0]
    1a40:	004a      	lsls	r2, r1, #1
    1a42:	1852      	adds	r2, r2, r1
    1a44:	00d2      	lsls	r2, r2, #3
    1a46:	18a4      	adds	r4, r4, r2
    1a48:	5ce0      	ldrb	r0, [r4, r3]
    1a4a:	47b0      	blx	r6
			blinkCursor();
    1a4c:	4b49      	ldr	r3, [pc, #292]	; (1b74 <groundState+0x48c>)
    1a4e:	4798      	blx	r3
		if(lineFeed)
    1a50:	4b49      	ldr	r3, [pc, #292]	; (1b78 <groundState+0x490>)
    1a52:	781b      	ldrb	r3, [r3, #0]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d100      	bne.n	1a5a <groundState+0x372>
    1a58:	e6d0      	b.n	17fc <groundState+0x114>
			if(yCharPos == 23)
    1a5a:	4b42      	ldr	r3, [pc, #264]	; (1b64 <groundState+0x47c>)
    1a5c:	881a      	ldrh	r2, [r3, #0]
    1a5e:	2a17      	cmp	r2, #23
    1a60:	d021      	beq.n	1aa6 <groundState+0x3be>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1a62:	4d41      	ldr	r5, [pc, #260]	; (1b68 <groundState+0x480>)
    1a64:	4e41      	ldr	r6, [pc, #260]	; (1b6c <groundState+0x484>)
    1a66:	8831      	ldrh	r1, [r6, #0]
    1a68:	004b      	lsls	r3, r1, #1
    1a6a:	185b      	adds	r3, r3, r1
    1a6c:	00db      	lsls	r3, r3, #3
    1a6e:	18eb      	adds	r3, r5, r3
    1a70:	5c98      	ldrb	r0, [r3, r2]
    1a72:	4c3f      	ldr	r4, [pc, #252]	; (1b70 <groundState+0x488>)
    1a74:	47a0      	blx	r4
				xCharPos = 0;
    1a76:	2300      	movs	r3, #0
    1a78:	8033      	strh	r3, [r6, #0]
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1a7a:	4b3a      	ldr	r3, [pc, #232]	; (1b64 <groundState+0x47c>)
    1a7c:	881b      	ldrh	r3, [r3, #0]
    1a7e:	5ce8      	ldrb	r0, [r5, r3]
    1a80:	47a0      	blx	r4
				blinkCursor();
    1a82:	4b3c      	ldr	r3, [pc, #240]	; (1b74 <groundState+0x48c>)
    1a84:	4798      	blx	r3
    1a86:	e6b9      	b.n	17fc <groundState+0x114>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1a88:	4b38      	ldr	r3, [pc, #224]	; (1b6c <groundState+0x484>)
    1a8a:	881a      	ldrh	r2, [r3, #0]
    1a8c:	0053      	lsls	r3, r2, #1
    1a8e:	189b      	adds	r3, r3, r2
    1a90:	00db      	lsls	r3, r3, #3
    1a92:	4a35      	ldr	r2, [pc, #212]	; (1b68 <groundState+0x480>)
    1a94:	18d3      	adds	r3, r2, r3
    1a96:	7dd8      	ldrb	r0, [r3, #23]
    1a98:	4b35      	ldr	r3, [pc, #212]	; (1b70 <groundState+0x488>)
    1a9a:	4798      	blx	r3
			newLine();
    1a9c:	4b37      	ldr	r3, [pc, #220]	; (1b7c <groundState+0x494>)
    1a9e:	4798      	blx	r3
			blinkCursor();
    1aa0:	4b34      	ldr	r3, [pc, #208]	; (1b74 <groundState+0x48c>)
    1aa2:	4798      	blx	r3
    1aa4:	e7d4      	b.n	1a50 <groundState+0x368>
				drawChar(consoleDisplay[xCharPos][yCharPos]);
    1aa6:	4d31      	ldr	r5, [pc, #196]	; (1b6c <groundState+0x484>)
    1aa8:	882a      	ldrh	r2, [r5, #0]
    1aaa:	0053      	lsls	r3, r2, #1
    1aac:	189b      	adds	r3, r3, r2
    1aae:	00db      	lsls	r3, r3, #3
    1ab0:	4a2d      	ldr	r2, [pc, #180]	; (1b68 <groundState+0x480>)
    1ab2:	18d3      	adds	r3, r2, r3
    1ab4:	7dd8      	ldrb	r0, [r3, #23]
    1ab6:	4c2e      	ldr	r4, [pc, #184]	; (1b70 <groundState+0x488>)
    1ab8:	47a0      	blx	r4
				xCharPos = 0;
    1aba:	2300      	movs	r3, #0
    1abc:	802b      	strh	r3, [r5, #0]
				drawChar(0x00);
    1abe:	2000      	movs	r0, #0
    1ac0:	47a0      	blx	r4
				blinkCursor();
    1ac2:	4b2c      	ldr	r3, [pc, #176]	; (1b74 <groundState+0x48c>)
    1ac4:	4798      	blx	r3
    1ac6:	e699      	b.n	17fc <groundState+0x114>
		if(yCharPos == 23)
    1ac8:	4b26      	ldr	r3, [pc, #152]	; (1b64 <groundState+0x47c>)
    1aca:	881a      	ldrh	r2, [r3, #0]
    1acc:	2a17      	cmp	r2, #23
    1ace:	d012      	beq.n	1af6 <groundState+0x40e>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1ad0:	4d25      	ldr	r5, [pc, #148]	; (1b68 <groundState+0x480>)
    1ad2:	4e26      	ldr	r6, [pc, #152]	; (1b6c <groundState+0x484>)
    1ad4:	8831      	ldrh	r1, [r6, #0]
    1ad6:	004b      	lsls	r3, r1, #1
    1ad8:	185b      	adds	r3, r3, r1
    1ada:	00db      	lsls	r3, r3, #3
    1adc:	18eb      	adds	r3, r5, r3
    1ade:	5c98      	ldrb	r0, [r3, r2]
    1ae0:	4c23      	ldr	r4, [pc, #140]	; (1b70 <groundState+0x488>)
    1ae2:	47a0      	blx	r4
			xCharPos = 0;
    1ae4:	2300      	movs	r3, #0
    1ae6:	8033      	strh	r3, [r6, #0]
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1ae8:	4b1e      	ldr	r3, [pc, #120]	; (1b64 <groundState+0x47c>)
    1aea:	881b      	ldrh	r3, [r3, #0]
    1aec:	5ce8      	ldrb	r0, [r5, r3]
    1aee:	47a0      	blx	r4
			blinkCursor();
    1af0:	4b20      	ldr	r3, [pc, #128]	; (1b74 <groundState+0x48c>)
    1af2:	4798      	blx	r3
    1af4:	e682      	b.n	17fc <groundState+0x114>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    1af6:	4c1d      	ldr	r4, [pc, #116]	; (1b6c <groundState+0x484>)
    1af8:	8822      	ldrh	r2, [r4, #0]
    1afa:	0053      	lsls	r3, r2, #1
    1afc:	189b      	adds	r3, r3, r2
    1afe:	00db      	lsls	r3, r3, #3
    1b00:	4a19      	ldr	r2, [pc, #100]	; (1b68 <groundState+0x480>)
    1b02:	18d3      	adds	r3, r2, r3
    1b04:	7dd8      	ldrb	r0, [r3, #23]
    1b06:	4b1a      	ldr	r3, [pc, #104]	; (1b70 <groundState+0x488>)
    1b08:	4798      	blx	r3
			xCharPos = 0;
    1b0a:	2300      	movs	r3, #0
    1b0c:	8023      	strh	r3, [r4, #0]
			blinkCursor();
    1b0e:	4b19      	ldr	r3, [pc, #100]	; (1b74 <groundState+0x48c>)
    1b10:	4798      	blx	r3
    1b12:	e673      	b.n	17fc <groundState+0x114>
		currentState = stateESC;
    1b14:	2201      	movs	r2, #1
    1b16:	4b1a      	ldr	r3, [pc, #104]	; (1b80 <groundState+0x498>)
    1b18:	701a      	strb	r2, [r3, #0]
    1b1a:	e66f      	b.n	17fc <groundState+0x114>
			ClearBit(consoleSGR[xCharPos][yCharPos],7);
    1b1c:	2018      	movs	r0, #24
    1b1e:	4350      	muls	r0, r2
    1b20:	4918      	ldr	r1, [pc, #96]	; (1b84 <groundState+0x49c>)
    1b22:	1809      	adds	r1, r1, r0
    1b24:	5cc8      	ldrb	r0, [r1, r3]
    1b26:	257f      	movs	r5, #127	; 0x7f
    1b28:	4028      	ands	r0, r5
    1b2a:	54c8      	strb	r0, [r1, r3]
    1b2c:	e619      	b.n	1762 <groundState+0x7a>
			ClearBit(consoleSGR[xCharPos][yCharPos],1);
    1b2e:	2018      	movs	r0, #24
    1b30:	4350      	muls	r0, r2
    1b32:	4914      	ldr	r1, [pc, #80]	; (1b84 <groundState+0x49c>)
    1b34:	1809      	adds	r1, r1, r0
    1b36:	5cc8      	ldrb	r0, [r1, r3]
    1b38:	2502      	movs	r5, #2
    1b3a:	43a8      	bics	r0, r5
    1b3c:	54c8      	strb	r0, [r1, r3]
    1b3e:	e61d      	b.n	177c <groundState+0x94>
			ClearBit(consoleSGR[xCharPos][yCharPos],4);
    1b40:	2018      	movs	r0, #24
    1b42:	4350      	muls	r0, r2
    1b44:	490f      	ldr	r1, [pc, #60]	; (1b84 <groundState+0x49c>)
    1b46:	1809      	adds	r1, r1, r0
    1b48:	5cc8      	ldrb	r0, [r1, r3]
    1b4a:	2510      	movs	r5, #16
    1b4c:	43a8      	bics	r0, r5
    1b4e:	54c8      	strb	r0, [r1, r3]
    1b50:	e621      	b.n	1796 <groundState+0xae>
			ClearBit(consoleSGR[xCharPos][yCharPos],5);
    1b52:	2018      	movs	r0, #24
    1b54:	4350      	muls	r0, r2
    1b56:	490b      	ldr	r1, [pc, #44]	; (1b84 <groundState+0x49c>)
    1b58:	1809      	adds	r1, r1, r0
    1b5a:	5cc8      	ldrb	r0, [r1, r3]
    1b5c:	2520      	movs	r5, #32
    1b5e:	43a8      	bics	r0, r5
    1b60:	54c8      	strb	r0, [r1, r3]
    1b62:	e625      	b.n	17b0 <groundState+0xc8>
    1b64:	200004e4 	.word	0x200004e4
    1b68:	200005ec 	.word	0x200005ec
    1b6c:	200004e2 	.word	0x200004e2
    1b70:	00003925 	.word	0x00003925
    1b74:	00003ca9 	.word	0x00003ca9
    1b78:	20000190 	.word	0x20000190
    1b7c:	00003e81 	.word	0x00003e81
    1b80:	200004e7 	.word	0x200004e7
    1b84:	20000d6c 	.word	0x20000d6c

00001b88 <parseChar>:
{
    1b88:	b510      	push	{r4, lr}
	parserState state = currentState;
    1b8a:	4b0e      	ldr	r3, [pc, #56]	; (1bc4 <parseChar+0x3c>)
	switch(state)
    1b8c:	781a      	ldrb	r2, [r3, #0]
    1b8e:	2a05      	cmp	r2, #5
    1b90:	d805      	bhi.n	1b9e <parseChar+0x16>
    1b92:	0093      	lsls	r3, r2, #2
    1b94:	4a0c      	ldr	r2, [pc, #48]	; (1bc8 <parseChar+0x40>)
    1b96:	58d3      	ldr	r3, [r2, r3]
    1b98:	469f      	mov	pc, r3
			groundState(character);
    1b9a:	4b0c      	ldr	r3, [pc, #48]	; (1bcc <parseChar+0x44>)
    1b9c:	4798      	blx	r3
}
    1b9e:	bd10      	pop	{r4, pc}
			escState(character);
    1ba0:	4b0b      	ldr	r3, [pc, #44]	; (1bd0 <parseChar+0x48>)
    1ba2:	4798      	blx	r3
			break;
    1ba4:	e7fb      	b.n	1b9e <parseChar+0x16>
	stateEnterBuffer = 0x00;
    1ba6:	2300      	movs	r3, #0
    1ba8:	4a0a      	ldr	r2, [pc, #40]	; (1bd4 <parseChar+0x4c>)
    1baa:	7013      	strb	r3, [r2, #0]
	currentState = stateGround;
    1bac:	4a05      	ldr	r2, [pc, #20]	; (1bc4 <parseChar+0x3c>)
    1bae:	7013      	strb	r3, [r2, #0]
    1bb0:	e7f5      	b.n	1b9e <parseChar+0x16>
			CSIentryState(character);
    1bb2:	4b09      	ldr	r3, [pc, #36]	; (1bd8 <parseChar+0x50>)
    1bb4:	4798      	blx	r3
			break;
    1bb6:	e7f2      	b.n	1b9e <parseChar+0x16>
			CSIparamState(character);
    1bb8:	4b08      	ldr	r3, [pc, #32]	; (1bdc <parseChar+0x54>)
    1bba:	4798      	blx	r3
			break;
    1bbc:	e7ef      	b.n	1b9e <parseChar+0x16>
			CSIignoreState(character);
    1bbe:	4b08      	ldr	r3, [pc, #32]	; (1be0 <parseChar+0x58>)
    1bc0:	4798      	blx	r3
}
    1bc2:	e7ec      	b.n	1b9e <parseChar+0x16>
    1bc4:	200004e7 	.word	0x200004e7
    1bc8:	00006674 	.word	0x00006674
    1bcc:	000016e9 	.word	0x000016e9
    1bd0:	00000591 	.word	0x00000591
    1bd4:	2000056e 	.word	0x2000056e
    1bd8:	0000144d 	.word	0x0000144d
    1bdc:	000013ed 	.word	0x000013ed
    1be0:	0000034d 	.word	0x0000034d

00001be4 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    1be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1be6:	b0c1      	sub	sp, #260	; 0x104
    1be8:	0007      	movs	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    1bea:	22d0      	movs	r2, #208	; 0xd0
    1bec:	492d      	ldr	r1, [pc, #180]	; (1ca4 <drawKare+0xc0>)
    1bee:	a80c      	add	r0, sp, #48	; 0x30
    1bf0:	4b2d      	ldr	r3, [pc, #180]	; (1ca8 <drawKare+0xc4>)
    1bf2:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    1bf4:	a805      	add	r0, sp, #20
    1bf6:	4b2d      	ldr	r3, [pc, #180]	; (1cac <drawKare+0xc8>)
    1bf8:	001a      	movs	r2, r3
    1bfa:	3250      	adds	r2, #80	; 0x50
    1bfc:	0001      	movs	r1, r0
    1bfe:	ca31      	ldmia	r2!, {r0, r4, r5}
    1c00:	c131      	stmia	r1!, {r0, r4, r5}
    1c02:	ca31      	ldmia	r2!, {r0, r4, r5}
    1c04:	c131      	stmia	r1!, {r0, r4, r5}
    1c06:	6812      	ldr	r2, [r2, #0]
    1c08:	600a      	str	r2, [r1, #0]
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    1c0a:	336c      	adds	r3, #108	; 0x6c
    1c0c:	466a      	mov	r2, sp
    1c0e:	cb13      	ldmia	r3!, {r0, r1, r4}
    1c10:	c213      	stmia	r2!, {r0, r1, r4}
    1c12:	cb03      	ldmia	r3!, {r0, r1}
    1c14:	c203      	stmia	r2!, {r0, r1}
    1c16:	ac0c      	add	r4, sp, #48	; 0x30
    1c18:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1c1a:	4d25      	ldr	r5, [pc, #148]	; (1cb0 <drawKare+0xcc>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    1c1c:	88e3      	ldrh	r3, [r4, #6]
    1c1e:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1c20:	3396      	adds	r3, #150	; 0x96
		((body[i+2]/iSv)+(offsetGraphicX)),
    1c22:	88a2      	ldrh	r2, [r4, #4]
    1c24:	1052      	asrs	r2, r2, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1c26:	322d      	adds	r2, #45	; 0x2d
    1c28:	32ff      	adds	r2, #255	; 0xff
		((body[i+1]/iSv)+(offsetGraphicY)),
    1c2a:	8861      	ldrh	r1, [r4, #2]
    1c2c:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    1c2e:	3196      	adds	r1, #150	; 0x96
    1c30:	8820      	ldrh	r0, [r4, #0]
    1c32:	1040      	asrs	r0, r0, #1
    1c34:	302d      	adds	r0, #45	; 0x2d
    1c36:	30ff      	adds	r0, #255	; 0xff
    1c38:	47a8      	blx	r5
    1c3a:	3408      	adds	r4, #8
	for(int i = 0; i < 104; i = i+4)
    1c3c:	42b4      	cmp	r4, r6
    1c3e:	d1ed      	bne.n	1c1c <drawKare+0x38>
	}
	switch(emotion)
    1c40:	2f00      	cmp	r7, #0
    1c42:	d003      	beq.n	1c4c <drawKare+0x68>
    1c44:	2f01      	cmp	r7, #1
    1c46:	d017      	beq.n	1c78 <drawKare+0x94>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    1c48:	b041      	add	sp, #260	; 0x104
    1c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c4c:	ac05      	add	r4, sp, #20
    1c4e:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1c50:	4d17      	ldr	r5, [pc, #92]	; (1cb0 <drawKare+0xcc>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    1c52:	78e3      	ldrb	r3, [r4, #3]
    1c54:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1c56:	3396      	adds	r3, #150	; 0x96
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    1c58:	78a2      	ldrb	r2, [r4, #2]
    1c5a:	1052      	asrs	r2, r2, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1c5c:	322d      	adds	r2, #45	; 0x2d
    1c5e:	32ff      	adds	r2, #255	; 0xff
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    1c60:	7861      	ldrb	r1, [r4, #1]
    1c62:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1c64:	3196      	adds	r1, #150	; 0x96
    1c66:	7820      	ldrb	r0, [r4, #0]
    1c68:	1040      	asrs	r0, r0, #1
    1c6a:	302d      	adds	r0, #45	; 0x2d
    1c6c:	30ff      	adds	r0, #255	; 0xff
    1c6e:	47a8      	blx	r5
    1c70:	3404      	adds	r4, #4
		for(int i = 0; i < 28; i = i+4)
    1c72:	42a6      	cmp	r6, r4
    1c74:	d1ed      	bne.n	1c52 <drawKare+0x6e>
    1c76:	e7e7      	b.n	1c48 <drawKare+0x64>
    1c78:	466c      	mov	r4, sp
    1c7a:	ae05      	add	r6, sp, #20
			fillRect((
    1c7c:	4d0c      	ldr	r5, [pc, #48]	; (1cb0 <drawKare+0xcc>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    1c7e:	78e3      	ldrb	r3, [r4, #3]
    1c80:	105b      	asrs	r3, r3, #1
			fillRect((
    1c82:	3396      	adds	r3, #150	; 0x96
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    1c84:	78a2      	ldrb	r2, [r4, #2]
    1c86:	1052      	asrs	r2, r2, #1
			fillRect((
    1c88:	322d      	adds	r2, #45	; 0x2d
    1c8a:	32ff      	adds	r2, #255	; 0xff
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    1c8c:	7861      	ldrb	r1, [r4, #1]
    1c8e:	1049      	asrs	r1, r1, #1
			fillRect((
    1c90:	3196      	adds	r1, #150	; 0x96
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    1c92:	7820      	ldrb	r0, [r4, #0]
    1c94:	1040      	asrs	r0, r0, #1
			fillRect((
    1c96:	302d      	adds	r0, #45	; 0x2d
    1c98:	30ff      	adds	r0, #255	; 0xff
    1c9a:	47a8      	blx	r5
    1c9c:	3404      	adds	r4, #4
		for(int i = 0; i < 20; i = i+4)
    1c9e:	42b4      	cmp	r4, r6
    1ca0:	d1ed      	bne.n	1c7e <drawKare+0x9a>
    1ca2:	e7d1      	b.n	1c48 <drawKare+0x64>
    1ca4:	00006a08 	.word	0x00006a08
    1ca8:	000053b5 	.word	0x000053b5
    1cac:	00006a88 	.word	0x00006a88
    1cb0:	00004771 	.word	0x00004771

00001cb4 <splashScreen>:

void splashScreen(void)
{
    1cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cb6:	46ce      	mov	lr, r9
    1cb8:	4647      	mov	r7, r8
    1cba:	b580      	push	{r7, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
    1cbc:	4c57      	ldr	r4, [pc, #348]	; (1e1c <splashScreen+0x168>)
    1cbe:	4b58      	ldr	r3, [pc, #352]	; (1e20 <splashScreen+0x16c>)
    1cc0:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
    1cc2:	4b58      	ldr	r3, [pc, #352]	; (1e24 <splashScreen+0x170>)
    1cc4:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
    1cc6:	4b58      	ldr	r3, [pc, #352]	; (1e28 <splashScreen+0x174>)
    1cc8:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
    1cca:	4b58      	ldr	r3, [pc, #352]	; (1e2c <splashScreen+0x178>)
    1ccc:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
    1cce:	4b58      	ldr	r3, [pc, #352]	; (1e30 <splashScreen+0x17c>)
    1cd0:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
    1cd2:	4b58      	ldr	r3, [pc, #352]	; (1e34 <splashScreen+0x180>)
    1cd4:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
    1cd6:	4b58      	ldr	r3, [pc, #352]	; (1e38 <splashScreen+0x184>)
    1cd8:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    1cda:	4b58      	ldr	r3, [pc, #352]	; (1e3c <splashScreen+0x188>)
    1cdc:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
    1cde:	4b58      	ldr	r3, [pc, #352]	; (1e40 <splashScreen+0x18c>)
    1ce0:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
    1ce2:	4b58      	ldr	r3, [pc, #352]	; (1e44 <splashScreen+0x190>)
    1ce4:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
    1ce6:	4b58      	ldr	r3, [pc, #352]	; (1e48 <splashScreen+0x194>)
    1ce8:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
    1cea:	4b58      	ldr	r3, [pc, #352]	; (1e4c <splashScreen+0x198>)
    1cec:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
    1cee:	4b58      	ldr	r3, [pc, #352]	; (1e50 <splashScreen+0x19c>)
    1cf0:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
    1cf2:	4b58      	ldr	r3, [pc, #352]	; (1e54 <splashScreen+0x1a0>)
    1cf4:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "Vogon Poetry";//
    1cf6:	4b58      	ldr	r3, [pc, #352]	; (1e58 <splashScreen+0x1a4>)
    1cf8:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
    1cfa:	4b58      	ldr	r3, [pc, #352]	; (1e5c <splashScreen+0x1a8>)
    1cfc:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
    1cfe:	4b58      	ldr	r3, [pc, #352]	; (1e60 <splashScreen+0x1ac>)
    1d00:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    1d02:	4b58      	ldr	r3, [pc, #352]	; (1e64 <splashScreen+0x1b0>)
    1d04:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
    1d06:	4b58      	ldr	r3, [pc, #352]	; (1e68 <splashScreen+0x1b4>)
    1d08:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020)";//
    1d0a:	4b58      	ldr	r3, [pc, #352]	; (1e6c <splashScreen+0x1b8>)
    1d0c:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
    1d0e:	4b58      	ldr	r3, [pc, #352]	; (1e70 <splashScreen+0x1bc>)
    1d10:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
    1d12:	4b58      	ldr	r3, [pc, #352]	; (1e74 <splashScreen+0x1c0>)
    1d14:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
    1d16:	4b58      	ldr	r3, [pc, #352]	; (1e78 <splashScreen+0x1c4>)
    1d18:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
    1d1a:	4b58      	ldr	r3, [pc, #352]	; (1e7c <splashScreen+0x1c8>)
    1d1c:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
    1d1e:	4b58      	ldr	r3, [pc, #352]	; (1e80 <splashScreen+0x1cc>)
    1d20:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
    1d22:	4b58      	ldr	r3, [pc, #352]	; (1e84 <splashScreen+0x1d0>)
    1d24:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
    1d26:	4b58      	ldr	r3, [pc, #352]	; (1e88 <splashScreen+0x1d4>)
    1d28:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Save the planet, torch a gas station";//
    1d2a:	4b58      	ldr	r3, [pc, #352]	; (1e8c <splashScreen+0x1d8>)
    1d2c:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
    1d2e:	4b58      	ldr	r3, [pc, #352]	; (1e90 <splashScreen+0x1dc>)
    1d30:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
    1d32:	4b58      	ldr	r3, [pc, #352]	; (1e94 <splashScreen+0x1e0>)
    1d34:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
    1d36:	4b58      	ldr	r3, [pc, #352]	; (1e98 <splashScreen+0x1e4>)
    1d38:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
    1d3a:	4b58      	ldr	r3, [pc, #352]	; (1e9c <splashScreen+0x1e8>)
    1d3c:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
    1d3e:	4a58      	ldr	r2, [pc, #352]	; (1ea0 <splashScreen+0x1ec>)
    1d40:	2380      	movs	r3, #128	; 0x80
    1d42:	50e2      	str	r2, [r4, r3]
	
	const char *textPhrase = splashText[(((rand())%32))];
    1d44:	4b57      	ldr	r3, [pc, #348]	; (1ea4 <splashScreen+0x1f0>)
    1d46:	4798      	blx	r3
    1d48:	17c2      	asrs	r2, r0, #31
    1d4a:	0ed2      	lsrs	r2, r2, #27
    1d4c:	1880      	adds	r0, r0, r2
    1d4e:	231f      	movs	r3, #31
    1d50:	4003      	ands	r3, r0
    1d52:	1a9b      	subs	r3, r3, r2
    1d54:	009b      	lsls	r3, r3, #2
    1d56:	591c      	ldr	r4, [r3, r4]
	
	clearScreen();
    1d58:	4b53      	ldr	r3, [pc, #332]	; (1ea8 <splashScreen+0x1f4>)
    1d5a:	4798      	blx	r3
	setColorRGB(255,255,255);
    1d5c:	22ff      	movs	r2, #255	; 0xff
    1d5e:	21ff      	movs	r1, #255	; 0xff
    1d60:	20ff      	movs	r0, #255	; 0xff
    1d62:	4b52      	ldr	r3, [pc, #328]	; (1eac <splashScreen+0x1f8>)
    1d64:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    1d66:	2280      	movs	r2, #128	; 0x80
    1d68:	0612      	lsls	r2, r2, #24
    1d6a:	4b51      	ldr	r3, [pc, #324]	; (1eb0 <splashScreen+0x1fc>)
    1d6c:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    1d6e:	4b51      	ldr	r3, [pc, #324]	; (1eb4 <splashScreen+0x200>)
    1d70:	22df      	movs	r2, #223	; 0xdf
    1d72:	5c99      	ldrb	r1, [r3, r2]
    1d74:	2004      	movs	r0, #4
    1d76:	4301      	orrs	r1, r0
    1d78:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    1d7a:	5c99      	ldrb	r1, [r3, r2]
    1d7c:	2002      	movs	r0, #2
    1d7e:	4301      	orrs	r1, r0
    1d80:	5499      	strb	r1, [r3, r2]
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    1d82:	3a3f      	subs	r2, #63	; 0x3f
    1d84:	589b      	ldr	r3, [r3, r2]
    1d86:	2b00      	cmp	r3, #0
    1d88:	db08      	blt.n	1d9c <splashScreen+0xe8>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
    1d8a:	2000      	movs	r0, #0
    1d8c:	4b4a      	ldr	r3, [pc, #296]	; (1eb8 <splashScreen+0x204>)
    1d8e:	4798      	blx	r3
    1d90:	4b4a      	ldr	r3, [pc, #296]	; (1ebc <splashScreen+0x208>)
    1d92:	22f0      	movs	r2, #240	; 0xf0
    1d94:	0152      	lsls	r2, r2, #5
    1d96:	1898      	adds	r0, r3, r2
	
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleColors[i][j] = 0xFFFF0000;
    1d98:	4949      	ldr	r1, [pc, #292]	; (1ec0 <splashScreen+0x20c>)
    1d9a:	e006      	b.n	1daa <splashScreen+0xf6>
		drawKare(1);
    1d9c:	2001      	movs	r0, #1
    1d9e:	4b46      	ldr	r3, [pc, #280]	; (1eb8 <splashScreen+0x204>)
    1da0:	4798      	blx	r3
    1da2:	e7f5      	b.n	1d90 <splashScreen+0xdc>
    1da4:	0013      	movs	r3, r2
	for(int i = 0 ; i < 80 ; i++)
    1da6:	4290      	cmp	r0, r2
    1da8:	d005      	beq.n	1db6 <splashScreen+0x102>
    1daa:	001a      	movs	r2, r3
    1dac:	3260      	adds	r2, #96	; 0x60
			consoleColors[i][j] = 0xFFFF0000;
    1dae:	c302      	stmia	r3!, {r1}
		for(int j = 0 ; j < 24 ; j++)
    1db0:	4293      	cmp	r3, r2
    1db2:	d1fc      	bne.n	1dae <splashScreen+0xfa>
    1db4:	e7f6      	b.n	1da4 <splashScreen+0xf0>
	}
	
	//setColorHex(defaultForegroundColor);
	//setBackColorHex(defaultBackgroundColor);
	
	xCharPos = 40 - (strlen(textPhrase)/2);
    1db6:	0020      	movs	r0, r4
    1db8:	4b42      	ldr	r3, [pc, #264]	; (1ec4 <splashScreen+0x210>)
    1dba:	4699      	mov	r9, r3
    1dbc:	4798      	blx	r3
    1dbe:	4f42      	ldr	r7, [pc, #264]	; (1ec8 <splashScreen+0x214>)
    1dc0:	0843      	lsrs	r3, r0, #1
    1dc2:	2528      	movs	r5, #40	; 0x28
    1dc4:	1aeb      	subs	r3, r5, r3
    1dc6:	803b      	strh	r3, [r7, #0]
	yCharPos = 16;
    1dc8:	4e40      	ldr	r6, [pc, #256]	; (1ecc <splashScreen+0x218>)
    1dca:	2310      	movs	r3, #16
    1dcc:	8033      	strh	r3, [r6, #0]
	writeString(textPhrase);
    1dce:	0020      	movs	r0, r4
    1dd0:	4b3f      	ldr	r3, [pc, #252]	; (1ed0 <splashScreen+0x21c>)
    1dd2:	4698      	mov	r8, r3
    1dd4:	4798      	blx	r3
	
	
	xCharPos = 40 - (strlen(versionLabel)/2);
    1dd6:	4c3f      	ldr	r4, [pc, #252]	; (1ed4 <splashScreen+0x220>)
    1dd8:	0020      	movs	r0, r4
    1dda:	47c8      	blx	r9
    1ddc:	0843      	lsrs	r3, r0, #1
    1dde:	1aeb      	subs	r3, r5, r3
    1de0:	803b      	strh	r3, [r7, #0]
	yCharPos = 18;
    1de2:	2312      	movs	r3, #18
    1de4:	8033      	strh	r3, [r6, #0]
	writeString(versionLabel);
    1de6:	0020      	movs	r0, r4
    1de8:	47c0      	blx	r8
	
	xCharPos = 40 - (strlen(compileTime)/2);
    1dea:	4c3b      	ldr	r4, [pc, #236]	; (1ed8 <splashScreen+0x224>)
    1dec:	0020      	movs	r0, r4
    1dee:	47c8      	blx	r9
    1df0:	0840      	lsrs	r0, r0, #1
    1df2:	1a2d      	subs	r5, r5, r0
    1df4:	803d      	strh	r5, [r7, #0]
	yCharPos = 19;
    1df6:	2313      	movs	r3, #19
    1df8:	8033      	strh	r3, [r6, #0]
	writeString(compileTime);
    1dfa:	0020      	movs	r0, r4
    1dfc:	47c0      	blx	r8
	
	
	delay_ms(3000);
    1dfe:	4837      	ldr	r0, [pc, #220]	; (1edc <splashScreen+0x228>)
    1e00:	4b37      	ldr	r3, [pc, #220]	; (1ee0 <splashScreen+0x22c>)
    1e02:	4798      	blx	r3
		
	clearScreen();
    1e04:	4b28      	ldr	r3, [pc, #160]	; (1ea8 <splashScreen+0x1f4>)
    1e06:	4798      	blx	r3
	nullifyConsole();
    1e08:	4b36      	ldr	r3, [pc, #216]	; (1ee4 <splashScreen+0x230>)
    1e0a:	4798      	blx	r3
	//setColorRGB(0,255,0);
	//setBackColorRGB(0,0,0);
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
    1e0c:	2300      	movs	r3, #0
    1e0e:	803b      	strh	r3, [r7, #0]
	yCharPos = 0;
    1e10:	8033      	strh	r3, [r6, #0]
	

    1e12:	bc0c      	pop	{r2, r3}
    1e14:	4690      	mov	r8, r2
    1e16:	4699      	mov	r9, r3
    1e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	20000420 	.word	0x20000420
    1e20:	00006b08 	.word	0x00006b08
    1e24:	00006b28 	.word	0x00006b28
    1e28:	00006b3c 	.word	0x00006b3c
    1e2c:	00006b54 	.word	0x00006b54
    1e30:	00006b64 	.word	0x00006b64
    1e34:	00006b6c 	.word	0x00006b6c
    1e38:	00006b94 	.word	0x00006b94
    1e3c:	00006bc0 	.word	0x00006bc0
    1e40:	00006be8 	.word	0x00006be8
    1e44:	00006c14 	.word	0x00006c14
    1e48:	00006c20 	.word	0x00006c20
    1e4c:	00006c38 	.word	0x00006c38
    1e50:	00006c58 	.word	0x00006c58
    1e54:	00006c78 	.word	0x00006c78
    1e58:	00006c9c 	.word	0x00006c9c
    1e5c:	00006cac 	.word	0x00006cac
    1e60:	00006cb8 	.word	0x00006cb8
    1e64:	00006cd4 	.word	0x00006cd4
    1e68:	00006cf4 	.word	0x00006cf4
    1e6c:	00006d30 	.word	0x00006d30
    1e70:	00006d4c 	.word	0x00006d4c
    1e74:	00006d68 	.word	0x00006d68
    1e78:	00006d78 	.word	0x00006d78
    1e7c:	00006d9c 	.word	0x00006d9c
    1e80:	00006dc8 	.word	0x00006dc8
    1e84:	00006df4 	.word	0x00006df4
    1e88:	00006e14 	.word	0x00006e14
    1e8c:	00006e34 	.word	0x00006e34
    1e90:	00006e5c 	.word	0x00006e5c
    1e94:	00006e78 	.word	0x00006e78
    1e98:	00006e88 	.word	0x00006e88
    1e9c:	00006eac 	.word	0x00006eac
    1ea0:	00006ecc 	.word	0x00006ecc
    1ea4:	000055e1 	.word	0x000055e1
    1ea8:	00004841 	.word	0x00004841
    1eac:	00004635 	.word	0x00004635
    1eb0:	4100448c 	.word	0x4100448c
    1eb4:	41004400 	.word	0x41004400
    1eb8:	00001be5 	.word	0x00001be5
    1ebc:	200014ec 	.word	0x200014ec
    1ec0:	ffff0000 	.word	0xffff0000
    1ec4:	00005803 	.word	0x00005803
    1ec8:	200004e2 	.word	0x200004e2
    1ecc:	200004e4 	.word	0x200004e4
    1ed0:	00003fb9 	.word	0x00003fb9
    1ed4:	2000019c 	.word	0x2000019c
    1ed8:	20000174 	.word	0x20000174
    1edc:	00000bb8 	.word	0x00000bb8
    1ee0:	00001f7d 	.word	0x00001f7d
    1ee4:	00004001 	.word	0x00004001

00001ee8 <parseRXBuffer>:
char tempCharacter;

cbuf_handle_t ouroboros;	

void parseRXBuffer(void)
{
    1ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eea:	b083      	sub	sp, #12
	
		
		while(!ring_empty(ouroboros))
    1eec:	4e0b      	ldr	r6, [pc, #44]	; (1f1c <parseRXBuffer+0x34>)
    1eee:	4d0c      	ldr	r5, [pc, #48]	; (1f20 <parseRXBuffer+0x38>)
		{
			uint8_t characterFromRingBuffer;
			ring_get(ouroboros, &characterFromRingBuffer);
    1ef0:	0037      	movs	r7, r6
		while(!ring_empty(ouroboros))
    1ef2:	e008      	b.n	1f06 <parseRXBuffer+0x1e>
			ring_get(ouroboros, &characterFromRingBuffer);
    1ef4:	466b      	mov	r3, sp
    1ef6:	1ddc      	adds	r4, r3, #7
    1ef8:	0021      	movs	r1, r4
    1efa:	6838      	ldr	r0, [r7, #0]
    1efc:	4b09      	ldr	r3, [pc, #36]	; (1f24 <parseRXBuffer+0x3c>)
    1efe:	4798      	blx	r3
			parseChar(characterFromRingBuffer);
    1f00:	7820      	ldrb	r0, [r4, #0]
    1f02:	4b09      	ldr	r3, [pc, #36]	; (1f28 <parseRXBuffer+0x40>)
    1f04:	4798      	blx	r3
		while(!ring_empty(ouroboros))
    1f06:	6830      	ldr	r0, [r6, #0]
    1f08:	47a8      	blx	r5
    1f0a:	2800      	cmp	r0, #0
    1f0c:	d0f2      	beq.n	1ef4 <parseRXBuffer+0xc>
		
		}
		ring_reset(ouroboros);
    1f0e:	4b03      	ldr	r3, [pc, #12]	; (1f1c <parseRXBuffer+0x34>)
    1f10:	6818      	ldr	r0, [r3, #0]
    1f12:	4b06      	ldr	r3, [pc, #24]	; (1f2c <parseRXBuffer+0x44>)
    1f14:	4798      	blx	r3
}
    1f16:	b003      	add	sp, #12
    1f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	20000588 	.word	0x20000588
    1f20:	0000017d 	.word	0x0000017d
    1f24:	00000195 	.word	0x00000195
    1f28:	00001b89 	.word	0x00001b89
    1f2c:	00000135 	.word	0x00000135

00001f30 <sendChar>:

void sendChar(char character)
{
    1f30:	b510      	push	{r4, lr}
	printf("%c", character);
    1f32:	4b01      	ldr	r3, [pc, #4]	; (1f38 <sendChar+0x8>)
    1f34:	4798      	blx	r3
    1f36:	bd10      	pop	{r4, pc}
    1f38:	0000555d 	.word	0x0000555d

00001f3c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1f3c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1f3e:	2000      	movs	r0, #0
    1f40:	4b08      	ldr	r3, [pc, #32]	; (1f64 <delay_init+0x28>)
    1f42:	4798      	blx	r3
    1f44:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1f46:	4c08      	ldr	r4, [pc, #32]	; (1f68 <delay_init+0x2c>)
    1f48:	21fa      	movs	r1, #250	; 0xfa
    1f4a:	0089      	lsls	r1, r1, #2
    1f4c:	47a0      	blx	r4
    1f4e:	4b07      	ldr	r3, [pc, #28]	; (1f6c <delay_init+0x30>)
    1f50:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1f52:	4907      	ldr	r1, [pc, #28]	; (1f70 <delay_init+0x34>)
    1f54:	0028      	movs	r0, r5
    1f56:	47a0      	blx	r4
    1f58:	4b06      	ldr	r3, [pc, #24]	; (1f74 <delay_init+0x38>)
    1f5a:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1f5c:	2205      	movs	r2, #5
    1f5e:	4b06      	ldr	r3, [pc, #24]	; (1f78 <delay_init+0x3c>)
    1f60:	601a      	str	r2, [r3, #0]
}
    1f62:	bd70      	pop	{r4, r5, r6, pc}
    1f64:	000034fd 	.word	0x000034fd
    1f68:	00004fe1 	.word	0x00004fe1
    1f6c:	20000018 	.word	0x20000018
    1f70:	000f4240 	.word	0x000f4240
    1f74:	2000001c 	.word	0x2000001c
    1f78:	e000e010 	.word	0xe000e010

00001f7c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1f7c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1f7e:	4b08      	ldr	r3, [pc, #32]	; (1fa0 <delay_cycles_ms+0x24>)
    1f80:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    1f82:	4a08      	ldr	r2, [pc, #32]	; (1fa4 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1f84:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1f86:	2180      	movs	r1, #128	; 0x80
    1f88:	0249      	lsls	r1, r1, #9
	while (n--) {
    1f8a:	3801      	subs	r0, #1
    1f8c:	d307      	bcc.n	1f9e <delay_cycles_ms+0x22>
	if (n > 0) {
    1f8e:	2c00      	cmp	r4, #0
    1f90:	d0fb      	beq.n	1f8a <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    1f92:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1f94:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1f96:	6813      	ldr	r3, [r2, #0]
    1f98:	420b      	tst	r3, r1
    1f9a:	d0fc      	beq.n	1f96 <delay_cycles_ms+0x1a>
    1f9c:	e7f5      	b.n	1f8a <delay_cycles_ms+0xe>
	}
}
    1f9e:	bd30      	pop	{r4, r5, pc}
    1fa0:	20000018 	.word	0x20000018
    1fa4:	e000e010 	.word	0xe000e010

00001fa8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1fa8:	4b0c      	ldr	r3, [pc, #48]	; (1fdc <cpu_irq_enter_critical+0x34>)
    1faa:	681b      	ldr	r3, [r3, #0]
    1fac:	2b00      	cmp	r3, #0
    1fae:	d106      	bne.n	1fbe <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1fb0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d007      	beq.n	1fc8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1fb8:	2200      	movs	r2, #0
    1fba:	4b09      	ldr	r3, [pc, #36]	; (1fe0 <cpu_irq_enter_critical+0x38>)
    1fbc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1fbe:	4a07      	ldr	r2, [pc, #28]	; (1fdc <cpu_irq_enter_critical+0x34>)
    1fc0:	6813      	ldr	r3, [r2, #0]
    1fc2:	3301      	adds	r3, #1
    1fc4:	6013      	str	r3, [r2, #0]
}
    1fc6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1fc8:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1fca:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1fce:	2200      	movs	r2, #0
    1fd0:	4b04      	ldr	r3, [pc, #16]	; (1fe4 <cpu_irq_enter_critical+0x3c>)
    1fd2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1fd4:	3201      	adds	r2, #1
    1fd6:	4b02      	ldr	r3, [pc, #8]	; (1fe0 <cpu_irq_enter_critical+0x38>)
    1fd8:	701a      	strb	r2, [r3, #0]
    1fda:	e7f0      	b.n	1fbe <cpu_irq_enter_critical+0x16>
    1fdc:	200004a0 	.word	0x200004a0
    1fe0:	200004a4 	.word	0x200004a4
    1fe4:	20000020 	.word	0x20000020

00001fe8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1fe8:	4b08      	ldr	r3, [pc, #32]	; (200c <STACK_SIZE+0xc>)
    1fea:	681a      	ldr	r2, [r3, #0]
    1fec:	3a01      	subs	r2, #1
    1fee:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1ff0:	681b      	ldr	r3, [r3, #0]
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d109      	bne.n	200a <STACK_SIZE+0xa>
    1ff6:	4b06      	ldr	r3, [pc, #24]	; (2010 <STACK_SIZE+0x10>)
    1ff8:	781b      	ldrb	r3, [r3, #0]
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d005      	beq.n	200a <STACK_SIZE+0xa>
		cpu_irq_enable();
    1ffe:	2201      	movs	r2, #1
    2000:	4b04      	ldr	r3, [pc, #16]	; (2014 <STACK_SIZE+0x14>)
    2002:	701a      	strb	r2, [r3, #0]
    2004:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2008:	b662      	cpsie	i
	}
}
    200a:	4770      	bx	lr
    200c:	200004a0 	.word	0x200004a0
    2010:	200004a4 	.word	0x200004a4
    2014:	20000020 	.word	0x20000020

00002018 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2018:	b5f0      	push	{r4, r5, r6, r7, lr}
    201a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    201c:	ac01      	add	r4, sp, #4
    201e:	2501      	movs	r5, #1
    2020:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2022:	2700      	movs	r7, #0
    2024:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2026:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2028:	0021      	movs	r1, r4
    202a:	203e      	movs	r0, #62	; 0x3e
    202c:	4e06      	ldr	r6, [pc, #24]	; (2048 <system_board_init+0x30>)
    202e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2030:	2280      	movs	r2, #128	; 0x80
    2032:	05d2      	lsls	r2, r2, #23
    2034:	4b05      	ldr	r3, [pc, #20]	; (204c <system_board_init+0x34>)
    2036:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2038:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    203a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    203c:	0021      	movs	r1, r4
    203e:	200f      	movs	r0, #15
    2040:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    2042:	b003      	add	sp, #12
    2044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	00002581 	.word	0x00002581
    204c:	41004480 	.word	0x41004480

00002050 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2050:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2052:	2200      	movs	r2, #0
    2054:	2300      	movs	r3, #0
    2056:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    2058:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    205a:	2100      	movs	r1, #0
    205c:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    205e:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2060:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    2062:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    2064:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    2066:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	//config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    2068:	24c0      	movs	r4, #192	; 0xc0
    206a:	0164      	lsls	r4, r4, #5
    206c:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    206e:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2070:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    2072:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    2074:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    2076:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    2078:	242a      	movs	r4, #42	; 0x2a
    207a:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    207c:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    207e:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    2080:	3c06      	subs	r4, #6
    2082:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2084:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    2086:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    2088:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    208a:	232b      	movs	r3, #43	; 0x2b
    208c:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    208e:	3301      	adds	r3, #1
    2090:	54c1      	strb	r1, [r0, r3]
}
    2092:	bd10      	pop	{r4, pc}

00002094 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2094:	b5f0      	push	{r4, r5, r6, r7, lr}
    2096:	46d6      	mov	lr, sl
    2098:	464f      	mov	r7, r9
    209a:	4646      	mov	r6, r8
    209c:	b5c0      	push	{r6, r7, lr}
    209e:	b096      	sub	sp, #88	; 0x58
    20a0:	0007      	movs	r7, r0
    20a2:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    20a4:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    20a6:	4ac6      	ldr	r2, [pc, #792]	; (23c0 <adc_init+0x32c>)
    20a8:	6a10      	ldr	r0, [r2, #32]
    20aa:	2380      	movs	r3, #128	; 0x80
    20ac:	025b      	lsls	r3, r3, #9
    20ae:	4303      	orrs	r3, r0
    20b0:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    20b2:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    20b4:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    20b6:	07db      	lsls	r3, r3, #31
    20b8:	d505      	bpl.n	20c6 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    20ba:	b016      	add	sp, #88	; 0x58
    20bc:	bc1c      	pop	{r2, r3, r4}
    20be:	4690      	mov	r8, r2
    20c0:	4699      	mov	r9, r3
    20c2:	46a2      	mov	sl, r4
    20c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    20c6:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    20c8:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    20ca:	079b      	lsls	r3, r3, #30
    20cc:	d4f5      	bmi.n	20ba <adc_init+0x26>
	module_inst->reference = config->reference;
    20ce:	7873      	ldrb	r3, [r6, #1]
    20d0:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    20d2:	2b00      	cmp	r3, #0
    20d4:	d104      	bne.n	20e0 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    20d6:	4abb      	ldr	r2, [pc, #748]	; (23c4 <adc_init+0x330>)
    20d8:	6c13      	ldr	r3, [r2, #64]	; 0x40
    20da:	2104      	movs	r1, #4
    20dc:	430b      	orrs	r3, r1
    20de:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    20e0:	2300      	movs	r3, #0
    20e2:	60bb      	str	r3, [r7, #8]
    20e4:	60fb      	str	r3, [r7, #12]
    20e6:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    20e8:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    20ea:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    20ec:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    20ee:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    20f0:	4bb5      	ldr	r3, [pc, #724]	; (23c8 <adc_init+0x334>)
    20f2:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    20f4:	232a      	movs	r3, #42	; 0x2a
    20f6:	5cf3      	ldrb	r3, [r6, r3]
    20f8:	2b00      	cmp	r3, #0
    20fa:	d105      	bne.n	2108 <adc_init+0x74>
    20fc:	7d33      	ldrb	r3, [r6, #20]
    20fe:	2b00      	cmp	r3, #0
    2100:	d102      	bne.n	2108 <adc_init+0x74>
		module_inst->software_trigger = true;
    2102:	3301      	adds	r3, #1
    2104:	777b      	strb	r3, [r7, #29]
    2106:	e001      	b.n	210c <adc_init+0x78>
		module_inst->software_trigger = false;
    2108:	2300      	movs	r3, #0
    210a:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    210c:	683b      	ldr	r3, [r7, #0]
    210e:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    2110:	7833      	ldrb	r3, [r6, #0]
    2112:	466a      	mov	r2, sp
    2114:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    2116:	4669      	mov	r1, sp
    2118:	201e      	movs	r0, #30
    211a:	4bac      	ldr	r3, [pc, #688]	; (23cc <adc_init+0x338>)
    211c:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    211e:	201e      	movs	r0, #30
    2120:	4bab      	ldr	r3, [pc, #684]	; (23d0 <adc_init+0x33c>)
    2122:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    2124:	232c      	movs	r3, #44	; 0x2c
    2126:	5cf2      	ldrb	r2, [r6, r3]
    2128:	2a00      	cmp	r2, #0
    212a:	d054      	beq.n	21d6 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    212c:	3b01      	subs	r3, #1
    212e:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    2130:	7b33      	ldrb	r3, [r6, #12]
    2132:	18eb      	adds	r3, r5, r3
    2134:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    2136:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    2138:	b2c9      	uxtb	r1, r1
    213a:	428b      	cmp	r3, r1
    213c:	d221      	bcs.n	2182 <adc_init+0xee>
    213e:	1952      	adds	r2, r2, r5
    2140:	b2d3      	uxtb	r3, r2
    2142:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    2144:	4ba3      	ldr	r3, [pc, #652]	; (23d4 <adc_init+0x340>)
    2146:	469a      	mov	sl, r3
    2148:	e003      	b.n	2152 <adc_init+0xbe>
			offset++;
    214a:	3501      	adds	r5, #1
    214c:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    214e:	454d      	cmp	r5, r9
    2150:	d017      	beq.n	2182 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    2152:	240f      	movs	r4, #15
    2154:	402c      	ands	r4, r5
    2156:	7b33      	ldrb	r3, [r6, #12]
    2158:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    215a:	2250      	movs	r2, #80	; 0x50
    215c:	499e      	ldr	r1, [pc, #632]	; (23d8 <adc_init+0x344>)
    215e:	a802      	add	r0, sp, #8
    2160:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    2162:	2c13      	cmp	r4, #19
    2164:	d8f1      	bhi.n	214a <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2166:	00a4      	lsls	r4, r4, #2
    2168:	ab02      	add	r3, sp, #8
    216a:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    216c:	a901      	add	r1, sp, #4
    216e:	2300      	movs	r3, #0
    2170:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    2172:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2174:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2176:	3301      	adds	r3, #1
    2178:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    217a:	b2c0      	uxtb	r0, r0
    217c:	4b97      	ldr	r3, [pc, #604]	; (23dc <adc_init+0x348>)
    217e:	4798      	blx	r3
    2180:	e7e3      	b.n	214a <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    2182:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    2184:	2250      	movs	r2, #80	; 0x50
    2186:	4994      	ldr	r1, [pc, #592]	; (23d8 <adc_init+0x344>)
    2188:	a802      	add	r0, sp, #8
    218a:	4b92      	ldr	r3, [pc, #584]	; (23d4 <adc_init+0x340>)
    218c:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    218e:	2c13      	cmp	r4, #19
    2190:	d913      	bls.n	21ba <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    2192:	7d73      	ldrb	r3, [r6, #21]
    2194:	009b      	lsls	r3, r3, #2
    2196:	b2db      	uxtb	r3, r3
    2198:	4642      	mov	r2, r8
    219a:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    219c:	7db3      	ldrb	r3, [r6, #22]
    219e:	01db      	lsls	r3, r3, #7
    21a0:	7872      	ldrb	r2, [r6, #1]
    21a2:	4313      	orrs	r3, r2
    21a4:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    21a6:	4642      	mov	r2, r8
    21a8:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    21aa:	7933      	ldrb	r3, [r6, #4]
    21ac:	2b34      	cmp	r3, #52	; 0x34
    21ae:	d900      	bls.n	21b2 <adc_init+0x11e>
    21b0:	e17b      	b.n	24aa <adc_init+0x416>
    21b2:	009b      	lsls	r3, r3, #2
    21b4:	4a8a      	ldr	r2, [pc, #552]	; (23e0 <adc_init+0x34c>)
    21b6:	58d3      	ldr	r3, [r2, r3]
    21b8:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    21ba:	00a4      	lsls	r4, r4, #2
    21bc:	ab02      	add	r3, sp, #8
    21be:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    21c0:	a901      	add	r1, sp, #4
    21c2:	2300      	movs	r3, #0
    21c4:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    21c6:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    21c8:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    21ca:	3301      	adds	r3, #1
    21cc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    21ce:	b2c0      	uxtb	r0, r0
    21d0:	4b82      	ldr	r3, [pc, #520]	; (23dc <adc_init+0x348>)
    21d2:	4798      	blx	r3
    21d4:	e7dd      	b.n	2192 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    21d6:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    21d8:	2250      	movs	r2, #80	; 0x50
    21da:	497f      	ldr	r1, [pc, #508]	; (23d8 <adc_init+0x344>)
    21dc:	a802      	add	r0, sp, #8
    21de:	4b7d      	ldr	r3, [pc, #500]	; (23d4 <adc_init+0x340>)
    21e0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    21e2:	2c13      	cmp	r4, #19
    21e4:	d915      	bls.n	2212 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    21e6:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    21e8:	2250      	movs	r2, #80	; 0x50
    21ea:	497b      	ldr	r1, [pc, #492]	; (23d8 <adc_init+0x344>)
    21ec:	a802      	add	r0, sp, #8
    21ee:	4b79      	ldr	r3, [pc, #484]	; (23d4 <adc_init+0x340>)
    21f0:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    21f2:	2c13      	cmp	r4, #19
    21f4:	d8cd      	bhi.n	2192 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    21f6:	00a4      	lsls	r4, r4, #2
    21f8:	ab02      	add	r3, sp, #8
    21fa:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    21fc:	a901      	add	r1, sp, #4
    21fe:	2300      	movs	r3, #0
    2200:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2202:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2204:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2206:	3301      	adds	r3, #1
    2208:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    220a:	b2c0      	uxtb	r0, r0
    220c:	4b73      	ldr	r3, [pc, #460]	; (23dc <adc_init+0x348>)
    220e:	4798      	blx	r3
    2210:	e7bf      	b.n	2192 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2212:	00a4      	lsls	r4, r4, #2
    2214:	ab02      	add	r3, sp, #8
    2216:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2218:	a901      	add	r1, sp, #4
    221a:	2300      	movs	r3, #0
    221c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    221e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2220:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2222:	3301      	adds	r3, #1
    2224:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2226:	b2c0      	uxtb	r0, r0
    2228:	4b6c      	ldr	r3, [pc, #432]	; (23dc <adc_init+0x348>)
    222a:	4798      	blx	r3
    222c:	e7db      	b.n	21e6 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    222e:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    2230:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    2232:	2102      	movs	r1, #2
    2234:	e01a      	b.n	226c <adc_init+0x1d8>
		adjres = config->divide_result;
    2236:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    2238:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    223a:	2410      	movs	r4, #16
    223c:	e016      	b.n	226c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    223e:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    2240:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    2242:	2101      	movs	r1, #1
    2244:	e012      	b.n	226c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2246:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    2248:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    224a:	2100      	movs	r1, #0
    224c:	e00e      	b.n	226c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    224e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    2250:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    2252:	2100      	movs	r1, #0
    2254:	e00a      	b.n	226c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2256:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    2258:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    225a:	2100      	movs	r1, #0
    225c:	e006      	b.n	226c <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    225e:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    2260:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    2262:	2100      	movs	r1, #0
    2264:	e002      	b.n	226c <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    2266:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    2268:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    226a:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    226c:	0109      	lsls	r1, r1, #4
    226e:	2270      	movs	r2, #112	; 0x70
    2270:	400a      	ands	r2, r1
    2272:	4313      	orrs	r3, r2
    2274:	4642      	mov	r2, r8
    2276:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    2278:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    227a:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    227c:	2b3f      	cmp	r3, #63	; 0x3f
    227e:	d900      	bls.n	2282 <adc_init+0x1ee>
    2280:	e71b      	b.n	20ba <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    2282:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2284:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2286:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2288:	b25b      	sxtb	r3, r3
    228a:	2b00      	cmp	r3, #0
    228c:	dbfb      	blt.n	2286 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    228e:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    2290:	8872      	ldrh	r2, [r6, #2]
    2292:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    2294:	2224      	movs	r2, #36	; 0x24
    2296:	5cb2      	ldrb	r2, [r6, r2]
    2298:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    229a:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    229c:	7d32      	ldrb	r2, [r6, #20]
    229e:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    22a0:	4313      	orrs	r3, r2
    22a2:	7cb2      	ldrb	r2, [r6, #18]
    22a4:	0052      	lsls	r2, r2, #1
    22a6:	4313      	orrs	r3, r2
    22a8:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    22aa:	4642      	mov	r2, r8
    22ac:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    22ae:	7e33      	ldrb	r3, [r6, #24]
    22b0:	2b00      	cmp	r3, #0
    22b2:	d020      	beq.n	22f6 <adc_init+0x262>
		switch (resolution) {
    22b4:	2c10      	cmp	r4, #16
    22b6:	d100      	bne.n	22ba <adc_init+0x226>
    22b8:	e0d9      	b.n	246e <adc_init+0x3da>
    22ba:	d800      	bhi.n	22be <adc_init+0x22a>
    22bc:	e098      	b.n	23f0 <adc_init+0x35c>
    22be:	2c20      	cmp	r4, #32
    22c0:	d100      	bne.n	22c4 <adc_init+0x230>
    22c2:	e0b6      	b.n	2432 <adc_init+0x39e>
    22c4:	2c30      	cmp	r4, #48	; 0x30
    22c6:	d116      	bne.n	22f6 <adc_init+0x262>
			if (config->differential_mode &&
    22c8:	7cf2      	ldrb	r2, [r6, #19]
    22ca:	2a00      	cmp	r2, #0
    22cc:	d00a      	beq.n	22e4 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    22ce:	69f2      	ldr	r2, [r6, #28]
    22d0:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    22d2:	2017      	movs	r0, #23
			if (config->differential_mode &&
    22d4:	2aff      	cmp	r2, #255	; 0xff
    22d6:	d900      	bls.n	22da <adc_init+0x246>
    22d8:	e6ef      	b.n	20ba <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    22da:	6a32      	ldr	r2, [r6, #32]
    22dc:	3280      	adds	r2, #128	; 0x80
    22de:	2aff      	cmp	r2, #255	; 0xff
    22e0:	d900      	bls.n	22e4 <adc_init+0x250>
    22e2:	e6ea      	b.n	20ba <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    22e4:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    22e6:	69f2      	ldr	r2, [r6, #28]
    22e8:	2aff      	cmp	r2, #255	; 0xff
    22ea:	dd00      	ble.n	22ee <adc_init+0x25a>
    22ec:	e6e5      	b.n	20ba <adc_init+0x26>
    22ee:	6a32      	ldr	r2, [r6, #32]
    22f0:	2aff      	cmp	r2, #255	; 0xff
    22f2:	dd00      	ble.n	22f6 <adc_init+0x262>
    22f4:	e6e1      	b.n	20ba <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    22f6:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    22f8:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    22fa:	b252      	sxtb	r2, r2
    22fc:	2a00      	cmp	r2, #0
    22fe:	dbfb      	blt.n	22f8 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    2300:	4642      	mov	r2, r8
    2302:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    2304:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2306:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2308:	b25b      	sxtb	r3, r3
    230a:	2b00      	cmp	r3, #0
    230c:	dbfb      	blt.n	2306 <adc_init+0x272>
	adc_module->WINLT.reg =
    230e:	8bb3      	ldrh	r3, [r6, #28]
    2310:	4642      	mov	r2, r8
    2312:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    2314:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2316:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    2318:	b25b      	sxtb	r3, r3
    231a:	2b00      	cmp	r3, #0
    231c:	dbfb      	blt.n	2316 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    231e:	8c33      	ldrh	r3, [r6, #32]
    2320:	4642      	mov	r2, r8
    2322:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    2324:	232c      	movs	r3, #44	; 0x2c
    2326:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    2328:	2b00      	cmp	r3, #0
    232a:	d005      	beq.n	2338 <adc_init+0x2a4>
		inputs_to_scan--;
    232c:	3b01      	subs	r3, #1
    232e:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    2330:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    2332:	2b0f      	cmp	r3, #15
    2334:	d900      	bls.n	2338 <adc_init+0x2a4>
    2336:	e6c0      	b.n	20ba <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    2338:	222b      	movs	r2, #43	; 0x2b
    233a:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    233c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    233e:	290f      	cmp	r1, #15
    2340:	d900      	bls.n	2344 <adc_init+0x2b0>
    2342:	e6ba      	b.n	20ba <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    2344:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2346:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    2348:	b252      	sxtb	r2, r2
    234a:	2a00      	cmp	r2, #0
    234c:	dbfb      	blt.n	2346 <adc_init+0x2b2>
			config->negative_input |
    234e:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    2350:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    2352:	4302      	orrs	r2, r0
    2354:	68b0      	ldr	r0, [r6, #8]
    2356:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    2358:	0509      	lsls	r1, r1, #20
			config->negative_input |
    235a:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    235c:	041b      	lsls	r3, r3, #16
			config->negative_input |
    235e:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    2360:	4642      	mov	r2, r8
    2362:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    2364:	232a      	movs	r3, #42	; 0x2a
    2366:	5cf3      	ldrb	r3, [r6, r3]
    2368:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    236a:	230f      	movs	r3, #15
    236c:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    236e:	3315      	adds	r3, #21
    2370:	5cf3      	ldrb	r3, [r6, r3]
    2372:	2b00      	cmp	r3, #0
    2374:	d012      	beq.n	239c <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2376:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    2378:	4a1a      	ldr	r2, [pc, #104]	; (23e4 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    237a:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    237c:	4293      	cmp	r3, r2
    237e:	d900      	bls.n	2382 <adc_init+0x2ee>
    2380:	e69b      	b.n	20ba <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    2382:	4642      	mov	r2, r8
    2384:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    2386:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    2388:	2380      	movs	r3, #128	; 0x80
    238a:	011b      	lsls	r3, r3, #4
    238c:	18d3      	adds	r3, r2, r3
    238e:	4915      	ldr	r1, [pc, #84]	; (23e4 <adc_init+0x350>)
    2390:	b29b      	uxth	r3, r3
    2392:	428b      	cmp	r3, r1
    2394:	d900      	bls.n	2398 <adc_init+0x304>
    2396:	e690      	b.n	20ba <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2398:	4643      	mov	r3, r8
    239a:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    239c:	4b12      	ldr	r3, [pc, #72]	; (23e8 <adc_init+0x354>)
    239e:	681b      	ldr	r3, [r3, #0]
    23a0:	015b      	lsls	r3, r3, #5
    23a2:	22e0      	movs	r2, #224	; 0xe0
    23a4:	00d2      	lsls	r2, r2, #3
    23a6:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    23a8:	4a10      	ldr	r2, [pc, #64]	; (23ec <adc_init+0x358>)
    23aa:	6851      	ldr	r1, [r2, #4]
    23ac:	0149      	lsls	r1, r1, #5
    23ae:	6812      	ldr	r2, [r2, #0]
    23b0:	0ed2      	lsrs	r2, r2, #27
    23b2:	430a      	orrs	r2, r1
    23b4:	b2d2      	uxtb	r2, r2
			) |
    23b6:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    23b8:	4642      	mov	r2, r8
    23ba:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    23bc:	2000      	movs	r0, #0
    23be:	e67c      	b.n	20ba <adc_init+0x26>
    23c0:	40000400 	.word	0x40000400
    23c4:	40000800 	.word	0x40000800
    23c8:	2000058c 	.word	0x2000058c
    23cc:	00003615 	.word	0x00003615
    23d0:	00003589 	.word	0x00003589
    23d4:	000053b5 	.word	0x000053b5
    23d8:	00006fc0 	.word	0x00006fc0
    23dc:	0000370d 	.word	0x0000370d
    23e0:	00006eec 	.word	0x00006eec
    23e4:	00000fff 	.word	0x00000fff
    23e8:	00806024 	.word	0x00806024
    23ec:	00806020 	.word	0x00806020
		switch (resolution) {
    23f0:	2c00      	cmp	r4, #0
    23f2:	d000      	beq.n	23f6 <adc_init+0x362>
    23f4:	e77f      	b.n	22f6 <adc_init+0x262>
			if (config->differential_mode &&
    23f6:	7cf2      	ldrb	r2, [r6, #19]
    23f8:	2a00      	cmp	r2, #0
    23fa:	d00f      	beq.n	241c <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    23fc:	69f2      	ldr	r2, [r6, #28]
    23fe:	2180      	movs	r1, #128	; 0x80
    2400:	0109      	lsls	r1, r1, #4
    2402:	468c      	mov	ip, r1
    2404:	4462      	add	r2, ip
			if (config->differential_mode &&
    2406:	492a      	ldr	r1, [pc, #168]	; (24b0 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    2408:	2017      	movs	r0, #23
			if (config->differential_mode &&
    240a:	428a      	cmp	r2, r1
    240c:	d900      	bls.n	2410 <adc_init+0x37c>
    240e:	e654      	b.n	20ba <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    2410:	6a32      	ldr	r2, [r6, #32]
    2412:	4462      	add	r2, ip
    2414:	4926      	ldr	r1, [pc, #152]	; (24b0 <adc_init+0x41c>)
    2416:	428a      	cmp	r2, r1
    2418:	d900      	bls.n	241c <adc_init+0x388>
    241a:	e64e      	b.n	20ba <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    241c:	4a24      	ldr	r2, [pc, #144]	; (24b0 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    241e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    2420:	69f1      	ldr	r1, [r6, #28]
    2422:	4291      	cmp	r1, r2
    2424:	dd00      	ble.n	2428 <adc_init+0x394>
    2426:	e648      	b.n	20ba <adc_init+0x26>
    2428:	6a31      	ldr	r1, [r6, #32]
    242a:	4291      	cmp	r1, r2
    242c:	dd00      	ble.n	2430 <adc_init+0x39c>
    242e:	e644      	b.n	20ba <adc_init+0x26>
    2430:	e761      	b.n	22f6 <adc_init+0x262>
			if (config->differential_mode &&
    2432:	7cf2      	ldrb	r2, [r6, #19]
    2434:	2a00      	cmp	r2, #0
    2436:	d00f      	beq.n	2458 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    2438:	69f2      	ldr	r2, [r6, #28]
    243a:	2180      	movs	r1, #128	; 0x80
    243c:	0089      	lsls	r1, r1, #2
    243e:	468c      	mov	ip, r1
    2440:	4462      	add	r2, ip
			if (config->differential_mode &&
    2442:	491c      	ldr	r1, [pc, #112]	; (24b4 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    2444:	2017      	movs	r0, #23
			if (config->differential_mode &&
    2446:	428a      	cmp	r2, r1
    2448:	d900      	bls.n	244c <adc_init+0x3b8>
    244a:	e636      	b.n	20ba <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    244c:	6a32      	ldr	r2, [r6, #32]
    244e:	4462      	add	r2, ip
    2450:	4918      	ldr	r1, [pc, #96]	; (24b4 <adc_init+0x420>)
    2452:	428a      	cmp	r2, r1
    2454:	d900      	bls.n	2458 <adc_init+0x3c4>
    2456:	e630      	b.n	20ba <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    2458:	4a16      	ldr	r2, [pc, #88]	; (24b4 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    245a:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    245c:	69f1      	ldr	r1, [r6, #28]
    245e:	4291      	cmp	r1, r2
    2460:	dd00      	ble.n	2464 <adc_init+0x3d0>
    2462:	e62a      	b.n	20ba <adc_init+0x26>
    2464:	6a31      	ldr	r1, [r6, #32]
    2466:	4291      	cmp	r1, r2
    2468:	dd00      	ble.n	246c <adc_init+0x3d8>
    246a:	e626      	b.n	20ba <adc_init+0x26>
    246c:	e743      	b.n	22f6 <adc_init+0x262>
			if (config->differential_mode &&
    246e:	7cf2      	ldrb	r2, [r6, #19]
    2470:	2a00      	cmp	r2, #0
    2472:	d00f      	beq.n	2494 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    2474:	69f2      	ldr	r2, [r6, #28]
    2476:	2180      	movs	r1, #128	; 0x80
    2478:	0209      	lsls	r1, r1, #8
    247a:	468c      	mov	ip, r1
    247c:	4462      	add	r2, ip
			if (config->differential_mode &&
    247e:	490e      	ldr	r1, [pc, #56]	; (24b8 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    2480:	2017      	movs	r0, #23
			if (config->differential_mode &&
    2482:	428a      	cmp	r2, r1
    2484:	d900      	bls.n	2488 <adc_init+0x3f4>
    2486:	e618      	b.n	20ba <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    2488:	6a32      	ldr	r2, [r6, #32]
    248a:	4462      	add	r2, ip
    248c:	490a      	ldr	r1, [pc, #40]	; (24b8 <adc_init+0x424>)
    248e:	428a      	cmp	r2, r1
    2490:	d900      	bls.n	2494 <adc_init+0x400>
    2492:	e612      	b.n	20ba <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    2494:	4a08      	ldr	r2, [pc, #32]	; (24b8 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    2496:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    2498:	69f1      	ldr	r1, [r6, #28]
    249a:	4291      	cmp	r1, r2
    249c:	dd00      	ble.n	24a0 <adc_init+0x40c>
    249e:	e60c      	b.n	20ba <adc_init+0x26>
    24a0:	6a31      	ldr	r1, [r6, #32]
    24a2:	4291      	cmp	r1, r2
    24a4:	dd00      	ble.n	24a8 <adc_init+0x414>
    24a6:	e608      	b.n	20ba <adc_init+0x26>
    24a8:	e725      	b.n	22f6 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    24aa:	2017      	movs	r0, #23
    24ac:	e605      	b.n	20ba <adc_init+0x26>
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	00000fff 	.word	0x00000fff
    24b4:	000003ff 	.word	0x000003ff
    24b8:	0000ffff 	.word	0x0000ffff

000024bc <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    24bc:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    24be:	4b2f      	ldr	r3, [pc, #188]	; (257c <ADC_Handler+0xc0>)
    24c0:	681d      	ldr	r5, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    24c2:	682b      	ldr	r3, [r5, #0]
    24c4:	7e1a      	ldrb	r2, [r3, #24]
    24c6:	7ddc      	ldrb	r4, [r3, #23]
    24c8:	4014      	ands	r4, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    24ca:	07e2      	lsls	r2, r4, #31
    24cc:	d416      	bmi.n	24fc <ADC_Handler+0x40>
	if (flags & ADC_INTFLAG_WINMON) {
    24ce:	0763      	lsls	r3, r4, #29
    24d0:	d508      	bpl.n	24e4 <ADC_Handler+0x28>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    24d2:	2304      	movs	r3, #4
    24d4:	682a      	ldr	r2, [r5, #0]
    24d6:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    24d8:	7eeb      	ldrb	r3, [r5, #27]
    24da:	079b      	lsls	r3, r3, #30
    24dc:	d502      	bpl.n	24e4 <ADC_Handler+0x28>
    24de:	7eab      	ldrb	r3, [r5, #26]
    24e0:	079b      	lsls	r3, r3, #30
    24e2:	d442      	bmi.n	256a <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    24e4:	07a3      	lsls	r3, r4, #30
    24e6:	d508      	bpl.n	24fa <ADC_Handler+0x3e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    24e8:	2302      	movs	r3, #2
    24ea:	682a      	ldr	r2, [r5, #0]
    24ec:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    24ee:	7eeb      	ldrb	r3, [r5, #27]
    24f0:	075b      	lsls	r3, r3, #29
    24f2:	d502      	bpl.n	24fa <ADC_Handler+0x3e>
    24f4:	7eab      	ldrb	r3, [r5, #26]
    24f6:	075b      	lsls	r3, r3, #29
    24f8:	d43b      	bmi.n	2572 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    24fa:	bd70      	pop	{r4, r5, r6, pc}
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    24fc:	2201      	movs	r2, #1
    24fe:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    2500:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    2502:	7e53      	ldrb	r3, [r2, #25]
		while (adc_is_syncing(module)) {
    2504:	b25b      	sxtb	r3, r3
    2506:	2b00      	cmp	r3, #0
    2508:	dbfb      	blt.n	2502 <ADC_Handler+0x46>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    250a:	6969      	ldr	r1, [r5, #20]
    250c:	1c8b      	adds	r3, r1, #2
    250e:	616b      	str	r3, [r5, #20]
    2510:	8b53      	ldrh	r3, [r2, #26]
    2512:	b29b      	uxth	r3, r3
    2514:	800b      	strh	r3, [r1, #0]
		if (--module->remaining_conversions > 0) {
    2516:	8b2b      	ldrh	r3, [r5, #24]
    2518:	3b01      	subs	r3, #1
    251a:	b29b      	uxth	r3, r3
    251c:	832b      	strh	r3, [r5, #24]
    251e:	2b00      	cmp	r3, #0
    2520:	d011      	beq.n	2546 <ADC_Handler+0x8a>
			if (module->software_trigger == true) {
    2522:	7f6b      	ldrb	r3, [r5, #29]
    2524:	2b00      	cmp	r3, #0
    2526:	d0d2      	beq.n	24ce <ADC_Handler+0x12>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    2528:	682a      	ldr	r2, [r5, #0]
    252a:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    252c:	b25b      	sxtb	r3, r3
    252e:	2b00      	cmp	r3, #0
    2530:	dbfb      	blt.n	252a <ADC_Handler+0x6e>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2532:	7b13      	ldrb	r3, [r2, #12]
    2534:	2102      	movs	r1, #2
    2536:	430b      	orrs	r3, r1
    2538:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    253a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    253c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    253e:	b25b      	sxtb	r3, r3
    2540:	2b00      	cmp	r3, #0
    2542:	dbfb      	blt.n	253c <ADC_Handler+0x80>
    2544:	e7c3      	b.n	24ce <ADC_Handler+0x12>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    2546:	2301      	movs	r3, #1
    2548:	682a      	ldr	r2, [r5, #0]
    254a:	7593      	strb	r3, [r2, #22]
			if (module->job_status == STATUS_BUSY) {
    254c:	7f2b      	ldrb	r3, [r5, #28]
    254e:	2b05      	cmp	r3, #5
    2550:	d1bd      	bne.n	24ce <ADC_Handler+0x12>
				module->job_status = STATUS_OK;
    2552:	2300      	movs	r3, #0
    2554:	772b      	strb	r3, [r5, #28]
				if ((module->enabled_callback_mask &
    2556:	7eeb      	ldrb	r3, [r5, #27]
    2558:	07db      	lsls	r3, r3, #31
    255a:	d5b8      	bpl.n	24ce <ADC_Handler+0x12>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    255c:	7eab      	ldrb	r3, [r5, #26]
    255e:	07db      	lsls	r3, r3, #31
    2560:	d5b5      	bpl.n	24ce <ADC_Handler+0x12>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    2562:	0028      	movs	r0, r5
    2564:	68ab      	ldr	r3, [r5, #8]
    2566:	4798      	blx	r3
    2568:	e7b1      	b.n	24ce <ADC_Handler+0x12>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    256a:	0028      	movs	r0, r5
    256c:	68eb      	ldr	r3, [r5, #12]
    256e:	4798      	blx	r3
    2570:	e7b8      	b.n	24e4 <ADC_Handler+0x28>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    2572:	692b      	ldr	r3, [r5, #16]
    2574:	0028      	movs	r0, r5
    2576:	4798      	blx	r3
}
    2578:	e7bf      	b.n	24fa <ADC_Handler+0x3e>
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	2000058c 	.word	0x2000058c

00002580 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2580:	b500      	push	{lr}
    2582:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2584:	ab01      	add	r3, sp, #4
    2586:	2280      	movs	r2, #128	; 0x80
    2588:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    258a:	780a      	ldrb	r2, [r1, #0]
    258c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    258e:	784a      	ldrb	r2, [r1, #1]
    2590:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2592:	788a      	ldrb	r2, [r1, #2]
    2594:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2596:	0019      	movs	r1, r3
    2598:	4b01      	ldr	r3, [pc, #4]	; (25a0 <port_pin_set_config+0x20>)
    259a:	4798      	blx	r3
}
    259c:	b003      	add	sp, #12
    259e:	bd00      	pop	{pc}
    25a0:	0000370d 	.word	0x0000370d

000025a4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    25a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a6:	46de      	mov	lr, fp
    25a8:	4657      	mov	r7, sl
    25aa:	464e      	mov	r6, r9
    25ac:	4645      	mov	r5, r8
    25ae:	b5e0      	push	{r5, r6, r7, lr}
    25b0:	b087      	sub	sp, #28
    25b2:	4680      	mov	r8, r0
    25b4:	9104      	str	r1, [sp, #16]
    25b6:	0016      	movs	r6, r2
    25b8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    25ba:	2200      	movs	r2, #0
    25bc:	2300      	movs	r3, #0
    25be:	2100      	movs	r1, #0
    25c0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    25c2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    25c4:	2001      	movs	r0, #1
    25c6:	0021      	movs	r1, r4
    25c8:	9600      	str	r6, [sp, #0]
    25ca:	9701      	str	r7, [sp, #4]
    25cc:	465c      	mov	r4, fp
    25ce:	9403      	str	r4, [sp, #12]
    25d0:	4644      	mov	r4, r8
    25d2:	9405      	str	r4, [sp, #20]
    25d4:	e013      	b.n	25fe <long_division+0x5a>
    25d6:	2420      	movs	r4, #32
    25d8:	1a64      	subs	r4, r4, r1
    25da:	0005      	movs	r5, r0
    25dc:	40e5      	lsrs	r5, r4
    25de:	46a8      	mov	r8, r5
    25e0:	e014      	b.n	260c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    25e2:	9c00      	ldr	r4, [sp, #0]
    25e4:	9d01      	ldr	r5, [sp, #4]
    25e6:	1b12      	subs	r2, r2, r4
    25e8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    25ea:	465c      	mov	r4, fp
    25ec:	464d      	mov	r5, r9
    25ee:	432c      	orrs	r4, r5
    25f0:	46a3      	mov	fp, r4
    25f2:	9c03      	ldr	r4, [sp, #12]
    25f4:	4645      	mov	r5, r8
    25f6:	432c      	orrs	r4, r5
    25f8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    25fa:	3901      	subs	r1, #1
    25fc:	d325      	bcc.n	264a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    25fe:	2420      	movs	r4, #32
    2600:	4264      	negs	r4, r4
    2602:	190c      	adds	r4, r1, r4
    2604:	d4e7      	bmi.n	25d6 <long_division+0x32>
    2606:	0005      	movs	r5, r0
    2608:	40a5      	lsls	r5, r4
    260a:	46a8      	mov	r8, r5
    260c:	0004      	movs	r4, r0
    260e:	408c      	lsls	r4, r1
    2610:	46a1      	mov	r9, r4
		r = r << 1;
    2612:	1892      	adds	r2, r2, r2
    2614:	415b      	adcs	r3, r3
    2616:	0014      	movs	r4, r2
    2618:	001d      	movs	r5, r3
		if (n & bit_shift) {
    261a:	9e05      	ldr	r6, [sp, #20]
    261c:	464f      	mov	r7, r9
    261e:	403e      	ands	r6, r7
    2620:	46b4      	mov	ip, r6
    2622:	9e04      	ldr	r6, [sp, #16]
    2624:	4647      	mov	r7, r8
    2626:	403e      	ands	r6, r7
    2628:	46b2      	mov	sl, r6
    262a:	4666      	mov	r6, ip
    262c:	4657      	mov	r7, sl
    262e:	433e      	orrs	r6, r7
    2630:	d003      	beq.n	263a <long_division+0x96>
			r |= 0x01;
    2632:	0006      	movs	r6, r0
    2634:	4326      	orrs	r6, r4
    2636:	0032      	movs	r2, r6
    2638:	002b      	movs	r3, r5
		if (r >= d) {
    263a:	9c00      	ldr	r4, [sp, #0]
    263c:	9d01      	ldr	r5, [sp, #4]
    263e:	429d      	cmp	r5, r3
    2640:	d8db      	bhi.n	25fa <long_division+0x56>
    2642:	d1ce      	bne.n	25e2 <long_division+0x3e>
    2644:	4294      	cmp	r4, r2
    2646:	d8d8      	bhi.n	25fa <long_division+0x56>
    2648:	e7cb      	b.n	25e2 <long_division+0x3e>
    264a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    264c:	4658      	mov	r0, fp
    264e:	0019      	movs	r1, r3
    2650:	b007      	add	sp, #28
    2652:	bc3c      	pop	{r2, r3, r4, r5}
    2654:	4690      	mov	r8, r2
    2656:	4699      	mov	r9, r3
    2658:	46a2      	mov	sl, r4
    265a:	46ab      	mov	fp, r5
    265c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000265e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    265e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    2660:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2662:	2340      	movs	r3, #64	; 0x40
    2664:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    2666:	4281      	cmp	r1, r0
    2668:	d202      	bcs.n	2670 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    266a:	0018      	movs	r0, r3
    266c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    266e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    2670:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    2672:	1c63      	adds	r3, r4, #1
    2674:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    2676:	4288      	cmp	r0, r1
    2678:	d9f9      	bls.n	266e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    267a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    267c:	2cff      	cmp	r4, #255	; 0xff
    267e:	d8f4      	bhi.n	266a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    2680:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    2682:	2300      	movs	r3, #0
    2684:	e7f1      	b.n	266a <_sercom_get_sync_baud_val+0xc>
	...

00002688 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    2688:	b5f0      	push	{r4, r5, r6, r7, lr}
    268a:	b083      	sub	sp, #12
    268c:	000f      	movs	r7, r1
    268e:	0016      	movs	r6, r2
    2690:	aa08      	add	r2, sp, #32
    2692:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    2694:	0004      	movs	r4, r0
    2696:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    2698:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    269a:	42bc      	cmp	r4, r7
    269c:	d902      	bls.n	26a4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    269e:	0010      	movs	r0, r2
    26a0:	b003      	add	sp, #12
    26a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    26a4:	2b00      	cmp	r3, #0
    26a6:	d114      	bne.n	26d2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    26a8:	0002      	movs	r2, r0
    26aa:	0008      	movs	r0, r1
    26ac:	2100      	movs	r1, #0
    26ae:	4c19      	ldr	r4, [pc, #100]	; (2714 <_sercom_get_async_baud_val+0x8c>)
    26b0:	47a0      	blx	r4
    26b2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    26b4:	003a      	movs	r2, r7
    26b6:	2300      	movs	r3, #0
    26b8:	2000      	movs	r0, #0
    26ba:	4c17      	ldr	r4, [pc, #92]	; (2718 <_sercom_get_async_baud_val+0x90>)
    26bc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    26be:	2200      	movs	r2, #0
    26c0:	2301      	movs	r3, #1
    26c2:	1a12      	subs	r2, r2, r0
    26c4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    26c6:	0c12      	lsrs	r2, r2, #16
    26c8:	041b      	lsls	r3, r3, #16
    26ca:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    26cc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    26ce:	2200      	movs	r2, #0
    26d0:	e7e5      	b.n	269e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    26d2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    26d4:	2b01      	cmp	r3, #1
    26d6:	d1f9      	bne.n	26cc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    26d8:	000a      	movs	r2, r1
    26da:	2300      	movs	r3, #0
    26dc:	2100      	movs	r1, #0
    26de:	4c0d      	ldr	r4, [pc, #52]	; (2714 <_sercom_get_async_baud_val+0x8c>)
    26e0:	47a0      	blx	r4
    26e2:	0002      	movs	r2, r0
    26e4:	000b      	movs	r3, r1
    26e6:	9200      	str	r2, [sp, #0]
    26e8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    26ea:	0038      	movs	r0, r7
    26ec:	2100      	movs	r1, #0
    26ee:	4c0a      	ldr	r4, [pc, #40]	; (2718 <_sercom_get_async_baud_val+0x90>)
    26f0:	47a0      	blx	r4
    26f2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    26f4:	2380      	movs	r3, #128	; 0x80
    26f6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    26f8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    26fa:	4298      	cmp	r0, r3
    26fc:	d8cf      	bhi.n	269e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    26fe:	0f79      	lsrs	r1, r7, #29
    2700:	00f8      	lsls	r0, r7, #3
    2702:	9a00      	ldr	r2, [sp, #0]
    2704:	9b01      	ldr	r3, [sp, #4]
    2706:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    2708:	00ea      	lsls	r2, r5, #3
    270a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    270c:	b2d2      	uxtb	r2, r2
    270e:	0352      	lsls	r2, r2, #13
    2710:	432a      	orrs	r2, r5
    2712:	e7db      	b.n	26cc <_sercom_get_async_baud_val+0x44>
    2714:	000052cd 	.word	0x000052cd
    2718:	000025a5 	.word	0x000025a5

0000271c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    271c:	b510      	push	{r4, lr}
    271e:	b082      	sub	sp, #8
    2720:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    2722:	4b0e      	ldr	r3, [pc, #56]	; (275c <sercom_set_gclk_generator+0x40>)
    2724:	781b      	ldrb	r3, [r3, #0]
    2726:	2b00      	cmp	r3, #0
    2728:	d007      	beq.n	273a <sercom_set_gclk_generator+0x1e>
    272a:	2900      	cmp	r1, #0
    272c:	d105      	bne.n	273a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    272e:	4b0b      	ldr	r3, [pc, #44]	; (275c <sercom_set_gclk_generator+0x40>)
    2730:	785b      	ldrb	r3, [r3, #1]
    2732:	4283      	cmp	r3, r0
    2734:	d010      	beq.n	2758 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2736:	201d      	movs	r0, #29
    2738:	e00c      	b.n	2754 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    273a:	a901      	add	r1, sp, #4
    273c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    273e:	2013      	movs	r0, #19
    2740:	4b07      	ldr	r3, [pc, #28]	; (2760 <sercom_set_gclk_generator+0x44>)
    2742:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2744:	2013      	movs	r0, #19
    2746:	4b07      	ldr	r3, [pc, #28]	; (2764 <sercom_set_gclk_generator+0x48>)
    2748:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    274a:	4b04      	ldr	r3, [pc, #16]	; (275c <sercom_set_gclk_generator+0x40>)
    274c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    274e:	2201      	movs	r2, #1
    2750:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    2752:	2000      	movs	r0, #0
}
    2754:	b002      	add	sp, #8
    2756:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    2758:	2000      	movs	r0, #0
    275a:	e7fb      	b.n	2754 <sercom_set_gclk_generator+0x38>
    275c:	200004a8 	.word	0x200004a8
    2760:	00003615 	.word	0x00003615
    2764:	00003589 	.word	0x00003589

00002768 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    2768:	4b40      	ldr	r3, [pc, #256]	; (286c <_sercom_get_default_pad+0x104>)
    276a:	4298      	cmp	r0, r3
    276c:	d031      	beq.n	27d2 <_sercom_get_default_pad+0x6a>
    276e:	d90a      	bls.n	2786 <_sercom_get_default_pad+0x1e>
    2770:	4b3f      	ldr	r3, [pc, #252]	; (2870 <_sercom_get_default_pad+0x108>)
    2772:	4298      	cmp	r0, r3
    2774:	d04d      	beq.n	2812 <_sercom_get_default_pad+0xaa>
    2776:	4b3f      	ldr	r3, [pc, #252]	; (2874 <_sercom_get_default_pad+0x10c>)
    2778:	4298      	cmp	r0, r3
    277a:	d05a      	beq.n	2832 <_sercom_get_default_pad+0xca>
    277c:	4b3e      	ldr	r3, [pc, #248]	; (2878 <_sercom_get_default_pad+0x110>)
    277e:	4298      	cmp	r0, r3
    2780:	d037      	beq.n	27f2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2782:	2000      	movs	r0, #0
}
    2784:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    2786:	4b3d      	ldr	r3, [pc, #244]	; (287c <_sercom_get_default_pad+0x114>)
    2788:	4298      	cmp	r0, r3
    278a:	d00c      	beq.n	27a6 <_sercom_get_default_pad+0x3e>
    278c:	4b3c      	ldr	r3, [pc, #240]	; (2880 <_sercom_get_default_pad+0x118>)
    278e:	4298      	cmp	r0, r3
    2790:	d1f7      	bne.n	2782 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2792:	2901      	cmp	r1, #1
    2794:	d017      	beq.n	27c6 <_sercom_get_default_pad+0x5e>
    2796:	2900      	cmp	r1, #0
    2798:	d05d      	beq.n	2856 <_sercom_get_default_pad+0xee>
    279a:	2902      	cmp	r1, #2
    279c:	d015      	beq.n	27ca <_sercom_get_default_pad+0x62>
    279e:	2903      	cmp	r1, #3
    27a0:	d015      	beq.n	27ce <_sercom_get_default_pad+0x66>
	return 0;
    27a2:	2000      	movs	r0, #0
    27a4:	e7ee      	b.n	2784 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    27a6:	2901      	cmp	r1, #1
    27a8:	d007      	beq.n	27ba <_sercom_get_default_pad+0x52>
    27aa:	2900      	cmp	r1, #0
    27ac:	d051      	beq.n	2852 <_sercom_get_default_pad+0xea>
    27ae:	2902      	cmp	r1, #2
    27b0:	d005      	beq.n	27be <_sercom_get_default_pad+0x56>
    27b2:	2903      	cmp	r1, #3
    27b4:	d005      	beq.n	27c2 <_sercom_get_default_pad+0x5a>
	return 0;
    27b6:	2000      	movs	r0, #0
    27b8:	e7e4      	b.n	2784 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    27ba:	4832      	ldr	r0, [pc, #200]	; (2884 <_sercom_get_default_pad+0x11c>)
    27bc:	e7e2      	b.n	2784 <_sercom_get_default_pad+0x1c>
    27be:	4832      	ldr	r0, [pc, #200]	; (2888 <_sercom_get_default_pad+0x120>)
    27c0:	e7e0      	b.n	2784 <_sercom_get_default_pad+0x1c>
    27c2:	4832      	ldr	r0, [pc, #200]	; (288c <_sercom_get_default_pad+0x124>)
    27c4:	e7de      	b.n	2784 <_sercom_get_default_pad+0x1c>
    27c6:	4832      	ldr	r0, [pc, #200]	; (2890 <_sercom_get_default_pad+0x128>)
    27c8:	e7dc      	b.n	2784 <_sercom_get_default_pad+0x1c>
    27ca:	4832      	ldr	r0, [pc, #200]	; (2894 <_sercom_get_default_pad+0x12c>)
    27cc:	e7da      	b.n	2784 <_sercom_get_default_pad+0x1c>
    27ce:	4832      	ldr	r0, [pc, #200]	; (2898 <_sercom_get_default_pad+0x130>)
    27d0:	e7d8      	b.n	2784 <_sercom_get_default_pad+0x1c>
    27d2:	2901      	cmp	r1, #1
    27d4:	d007      	beq.n	27e6 <_sercom_get_default_pad+0x7e>
    27d6:	2900      	cmp	r1, #0
    27d8:	d03f      	beq.n	285a <_sercom_get_default_pad+0xf2>
    27da:	2902      	cmp	r1, #2
    27dc:	d005      	beq.n	27ea <_sercom_get_default_pad+0x82>
    27de:	2903      	cmp	r1, #3
    27e0:	d005      	beq.n	27ee <_sercom_get_default_pad+0x86>
	return 0;
    27e2:	2000      	movs	r0, #0
    27e4:	e7ce      	b.n	2784 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    27e6:	482d      	ldr	r0, [pc, #180]	; (289c <_sercom_get_default_pad+0x134>)
    27e8:	e7cc      	b.n	2784 <_sercom_get_default_pad+0x1c>
    27ea:	482d      	ldr	r0, [pc, #180]	; (28a0 <_sercom_get_default_pad+0x138>)
    27ec:	e7ca      	b.n	2784 <_sercom_get_default_pad+0x1c>
    27ee:	482d      	ldr	r0, [pc, #180]	; (28a4 <_sercom_get_default_pad+0x13c>)
    27f0:	e7c8      	b.n	2784 <_sercom_get_default_pad+0x1c>
    27f2:	2901      	cmp	r1, #1
    27f4:	d007      	beq.n	2806 <_sercom_get_default_pad+0x9e>
    27f6:	2900      	cmp	r1, #0
    27f8:	d031      	beq.n	285e <_sercom_get_default_pad+0xf6>
    27fa:	2902      	cmp	r1, #2
    27fc:	d005      	beq.n	280a <_sercom_get_default_pad+0xa2>
    27fe:	2903      	cmp	r1, #3
    2800:	d005      	beq.n	280e <_sercom_get_default_pad+0xa6>
	return 0;
    2802:	2000      	movs	r0, #0
    2804:	e7be      	b.n	2784 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2806:	4828      	ldr	r0, [pc, #160]	; (28a8 <_sercom_get_default_pad+0x140>)
    2808:	e7bc      	b.n	2784 <_sercom_get_default_pad+0x1c>
    280a:	4828      	ldr	r0, [pc, #160]	; (28ac <_sercom_get_default_pad+0x144>)
    280c:	e7ba      	b.n	2784 <_sercom_get_default_pad+0x1c>
    280e:	4828      	ldr	r0, [pc, #160]	; (28b0 <_sercom_get_default_pad+0x148>)
    2810:	e7b8      	b.n	2784 <_sercom_get_default_pad+0x1c>
    2812:	2901      	cmp	r1, #1
    2814:	d007      	beq.n	2826 <_sercom_get_default_pad+0xbe>
    2816:	2900      	cmp	r1, #0
    2818:	d023      	beq.n	2862 <_sercom_get_default_pad+0xfa>
    281a:	2902      	cmp	r1, #2
    281c:	d005      	beq.n	282a <_sercom_get_default_pad+0xc2>
    281e:	2903      	cmp	r1, #3
    2820:	d005      	beq.n	282e <_sercom_get_default_pad+0xc6>
	return 0;
    2822:	2000      	movs	r0, #0
    2824:	e7ae      	b.n	2784 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2826:	4823      	ldr	r0, [pc, #140]	; (28b4 <_sercom_get_default_pad+0x14c>)
    2828:	e7ac      	b.n	2784 <_sercom_get_default_pad+0x1c>
    282a:	4823      	ldr	r0, [pc, #140]	; (28b8 <_sercom_get_default_pad+0x150>)
    282c:	e7aa      	b.n	2784 <_sercom_get_default_pad+0x1c>
    282e:	4823      	ldr	r0, [pc, #140]	; (28bc <_sercom_get_default_pad+0x154>)
    2830:	e7a8      	b.n	2784 <_sercom_get_default_pad+0x1c>
    2832:	2901      	cmp	r1, #1
    2834:	d007      	beq.n	2846 <_sercom_get_default_pad+0xde>
    2836:	2900      	cmp	r1, #0
    2838:	d015      	beq.n	2866 <_sercom_get_default_pad+0xfe>
    283a:	2902      	cmp	r1, #2
    283c:	d005      	beq.n	284a <_sercom_get_default_pad+0xe2>
    283e:	2903      	cmp	r1, #3
    2840:	d005      	beq.n	284e <_sercom_get_default_pad+0xe6>
	return 0;
    2842:	2000      	movs	r0, #0
    2844:	e79e      	b.n	2784 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2846:	481e      	ldr	r0, [pc, #120]	; (28c0 <_sercom_get_default_pad+0x158>)
    2848:	e79c      	b.n	2784 <_sercom_get_default_pad+0x1c>
    284a:	481e      	ldr	r0, [pc, #120]	; (28c4 <_sercom_get_default_pad+0x15c>)
    284c:	e79a      	b.n	2784 <_sercom_get_default_pad+0x1c>
    284e:	481e      	ldr	r0, [pc, #120]	; (28c8 <_sercom_get_default_pad+0x160>)
    2850:	e798      	b.n	2784 <_sercom_get_default_pad+0x1c>
    2852:	481e      	ldr	r0, [pc, #120]	; (28cc <_sercom_get_default_pad+0x164>)
    2854:	e796      	b.n	2784 <_sercom_get_default_pad+0x1c>
    2856:	2003      	movs	r0, #3
    2858:	e794      	b.n	2784 <_sercom_get_default_pad+0x1c>
    285a:	481d      	ldr	r0, [pc, #116]	; (28d0 <_sercom_get_default_pad+0x168>)
    285c:	e792      	b.n	2784 <_sercom_get_default_pad+0x1c>
    285e:	481d      	ldr	r0, [pc, #116]	; (28d4 <_sercom_get_default_pad+0x16c>)
    2860:	e790      	b.n	2784 <_sercom_get_default_pad+0x1c>
    2862:	481d      	ldr	r0, [pc, #116]	; (28d8 <_sercom_get_default_pad+0x170>)
    2864:	e78e      	b.n	2784 <_sercom_get_default_pad+0x1c>
    2866:	481d      	ldr	r0, [pc, #116]	; (28dc <_sercom_get_default_pad+0x174>)
    2868:	e78c      	b.n	2784 <_sercom_get_default_pad+0x1c>
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	42001000 	.word	0x42001000
    2870:	42001800 	.word	0x42001800
    2874:	42001c00 	.word	0x42001c00
    2878:	42001400 	.word	0x42001400
    287c:	42000800 	.word	0x42000800
    2880:	42000c00 	.word	0x42000c00
    2884:	00050003 	.word	0x00050003
    2888:	00060003 	.word	0x00060003
    288c:	00070003 	.word	0x00070003
    2890:	00010003 	.word	0x00010003
    2894:	001e0003 	.word	0x001e0003
    2898:	001f0003 	.word	0x001f0003
    289c:	00090003 	.word	0x00090003
    28a0:	000a0003 	.word	0x000a0003
    28a4:	000b0003 	.word	0x000b0003
    28a8:	00110003 	.word	0x00110003
    28ac:	00120003 	.word	0x00120003
    28b0:	00130003 	.word	0x00130003
    28b4:	000d0003 	.word	0x000d0003
    28b8:	000e0003 	.word	0x000e0003
    28bc:	000f0003 	.word	0x000f0003
    28c0:	00170003 	.word	0x00170003
    28c4:	00180003 	.word	0x00180003
    28c8:	00190003 	.word	0x00190003
    28cc:	00040003 	.word	0x00040003
    28d0:	00080003 	.word	0x00080003
    28d4:	00100003 	.word	0x00100003
    28d8:	000c0003 	.word	0x000c0003
    28dc:	00160003 	.word	0x00160003

000028e0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    28e0:	b530      	push	{r4, r5, lr}
    28e2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    28e4:	4b0b      	ldr	r3, [pc, #44]	; (2914 <_sercom_get_sercom_inst_index+0x34>)
    28e6:	466a      	mov	r2, sp
    28e8:	cb32      	ldmia	r3!, {r1, r4, r5}
    28ea:	c232      	stmia	r2!, {r1, r4, r5}
    28ec:	cb32      	ldmia	r3!, {r1, r4, r5}
    28ee:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    28f0:	9b00      	ldr	r3, [sp, #0]
    28f2:	4283      	cmp	r3, r0
    28f4:	d00b      	beq.n	290e <_sercom_get_sercom_inst_index+0x2e>
    28f6:	2301      	movs	r3, #1
    28f8:	009a      	lsls	r2, r3, #2
    28fa:	4669      	mov	r1, sp
    28fc:	5852      	ldr	r2, [r2, r1]
    28fe:	4282      	cmp	r2, r0
    2900:	d006      	beq.n	2910 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2902:	3301      	adds	r3, #1
    2904:	2b06      	cmp	r3, #6
    2906:	d1f7      	bne.n	28f8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2908:	2000      	movs	r0, #0
}
    290a:	b007      	add	sp, #28
    290c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    290e:	2300      	movs	r3, #0
			return i;
    2910:	b2d8      	uxtb	r0, r3
    2912:	e7fa      	b.n	290a <_sercom_get_sercom_inst_index+0x2a>
    2914:	00007010 	.word	0x00007010

00002918 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2918:	4770      	bx	lr
	...

0000291c <_sercom_set_handler>:


void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    291c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize handlers with default handler and device instances with 0 
	if (_handler_table_initialized == false) {
    291e:	4b0a      	ldr	r3, [pc, #40]	; (2948 <_sercom_set_handler+0x2c>)
    2920:	781b      	ldrb	r3, [r3, #0]
    2922:	2b00      	cmp	r3, #0
    2924:	d10c      	bne.n	2940 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2926:	4f09      	ldr	r7, [pc, #36]	; (294c <_sercom_set_handler+0x30>)
    2928:	4e09      	ldr	r6, [pc, #36]	; (2950 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    292a:	4d0a      	ldr	r5, [pc, #40]	; (2954 <_sercom_set_handler+0x38>)
    292c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    292e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    2930:	195a      	adds	r2, r3, r5
    2932:	6014      	str	r4, [r2, #0]
    2934:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2936:	2b18      	cmp	r3, #24
    2938:	d1f9      	bne.n	292e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    293a:	2201      	movs	r2, #1
    293c:	4b02      	ldr	r3, [pc, #8]	; (2948 <_sercom_set_handler+0x2c>)
    293e:	701a      	strb	r2, [r3, #0]
	}

	// Save interrupt handler 
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2940:	0080      	lsls	r0, r0, #2
    2942:	4b02      	ldr	r3, [pc, #8]	; (294c <_sercom_set_handler+0x30>)
    2944:	50c1      	str	r1, [r0, r3]
}
    2946:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2948:	200004aa 	.word	0x200004aa
    294c:	200004ac 	.word	0x200004ac
    2950:	00002919 	.word	0x00002919
    2954:	20000590 	.word	0x20000590

00002958 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2958:	b500      	push	{lr}
    295a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    295c:	2309      	movs	r3, #9
    295e:	466a      	mov	r2, sp
    2960:	7013      	strb	r3, [r2, #0]
    2962:	3301      	adds	r3, #1
    2964:	7053      	strb	r3, [r2, #1]
    2966:	3301      	adds	r3, #1
    2968:	7093      	strb	r3, [r2, #2]
    296a:	3301      	adds	r3, #1
    296c:	70d3      	strb	r3, [r2, #3]
    296e:	3301      	adds	r3, #1
    2970:	7113      	strb	r3, [r2, #4]
    2972:	3301      	adds	r3, #1
    2974:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2976:	4b03      	ldr	r3, [pc, #12]	; (2984 <_sercom_get_interrupt_vector+0x2c>)
    2978:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    297a:	466b      	mov	r3, sp
    297c:	5618      	ldrsb	r0, [r3, r0]
}
    297e:	b003      	add	sp, #12
    2980:	bd00      	pop	{pc}
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	000028e1 	.word	0x000028e1

00002988 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2988:	b510      	push	{r4, lr}
    298a:	4b02      	ldr	r3, [pc, #8]	; (2994 <SERCOM0_Handler+0xc>)
    298c:	681b      	ldr	r3, [r3, #0]
    298e:	2000      	movs	r0, #0
    2990:	4798      	blx	r3
    2992:	bd10      	pop	{r4, pc}
    2994:	200004ac 	.word	0x200004ac

00002998 <SERCOM1_Handler>:
    2998:	b510      	push	{r4, lr}
    299a:	4b02      	ldr	r3, [pc, #8]	; (29a4 <SERCOM1_Handler+0xc>)
    299c:	685b      	ldr	r3, [r3, #4]
    299e:	2001      	movs	r0, #1
    29a0:	4798      	blx	r3
    29a2:	bd10      	pop	{r4, pc}
    29a4:	200004ac 	.word	0x200004ac

000029a8 <SERCOM2_Handler>:
    29a8:	b510      	push	{r4, lr}
    29aa:	4b02      	ldr	r3, [pc, #8]	; (29b4 <SERCOM2_Handler+0xc>)
    29ac:	689b      	ldr	r3, [r3, #8]
    29ae:	2002      	movs	r0, #2
    29b0:	4798      	blx	r3
    29b2:	bd10      	pop	{r4, pc}
    29b4:	200004ac 	.word	0x200004ac

000029b8 <SERCOM3_Handler>:
    29b8:	b510      	push	{r4, lr}
    29ba:	4b02      	ldr	r3, [pc, #8]	; (29c4 <SERCOM3_Handler+0xc>)
    29bc:	68db      	ldr	r3, [r3, #12]
    29be:	2003      	movs	r0, #3
    29c0:	4798      	blx	r3
    29c2:	bd10      	pop	{r4, pc}
    29c4:	200004ac 	.word	0x200004ac

000029c8 <SERCOM4_Handler>:
    29c8:	b510      	push	{r4, lr}
    29ca:	4b02      	ldr	r3, [pc, #8]	; (29d4 <SERCOM4_Handler+0xc>)
    29cc:	691b      	ldr	r3, [r3, #16]
    29ce:	2004      	movs	r0, #4
    29d0:	4798      	blx	r3
    29d2:	bd10      	pop	{r4, pc}
    29d4:	200004ac 	.word	0x200004ac

000029d8 <SERCOM5_Handler>:
    29d8:	b510      	push	{r4, lr}
    29da:	4b02      	ldr	r3, [pc, #8]	; (29e4 <SERCOM5_Handler+0xc>)
    29dc:	695b      	ldr	r3, [r3, #20]
    29de:	2005      	movs	r0, #5
    29e0:	4798      	blx	r3
    29e2:	bd10      	pop	{r4, pc}
    29e4:	200004ac 	.word	0x200004ac

000029e8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    29e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29ea:	46de      	mov	lr, fp
    29ec:	4657      	mov	r7, sl
    29ee:	464e      	mov	r6, r9
    29f0:	4645      	mov	r5, r8
    29f2:	b5e0      	push	{r5, r6, r7, lr}
    29f4:	b091      	sub	sp, #68	; 0x44
    29f6:	0005      	movs	r5, r0
    29f8:	000c      	movs	r4, r1
    29fa:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    29fc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    29fe:	0008      	movs	r0, r1
    2a00:	4bba      	ldr	r3, [pc, #744]	; (2cec <usart_init+0x304>)
    2a02:	4798      	blx	r3
    2a04:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2a06:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2a08:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    2a0a:	07db      	lsls	r3, r3, #31
    2a0c:	d506      	bpl.n	2a1c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    2a0e:	b011      	add	sp, #68	; 0x44
    2a10:	bc3c      	pop	{r2, r3, r4, r5}
    2a12:	4690      	mov	r8, r2
    2a14:	4699      	mov	r9, r3
    2a16:	46a2      	mov	sl, r4
    2a18:	46ab      	mov	fp, r5
    2a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2a1c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    2a1e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2a20:	079b      	lsls	r3, r3, #30
    2a22:	d4f4      	bmi.n	2a0e <usart_init+0x26>
    2a24:	49b2      	ldr	r1, [pc, #712]	; (2cf0 <usart_init+0x308>)
    2a26:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2a28:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2a2a:	2301      	movs	r3, #1
    2a2c:	40bb      	lsls	r3, r7
    2a2e:	4303      	orrs	r3, r0
    2a30:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2a32:	a90f      	add	r1, sp, #60	; 0x3c
    2a34:	272d      	movs	r7, #45	; 0x2d
    2a36:	5df3      	ldrb	r3, [r6, r7]
    2a38:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2a3a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2a3c:	b2d3      	uxtb	r3, r2
    2a3e:	9302      	str	r3, [sp, #8]
    2a40:	0018      	movs	r0, r3
    2a42:	4bac      	ldr	r3, [pc, #688]	; (2cf4 <usart_init+0x30c>)
    2a44:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2a46:	9802      	ldr	r0, [sp, #8]
    2a48:	4bab      	ldr	r3, [pc, #684]	; (2cf8 <usart_init+0x310>)
    2a4a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2a4c:	5df0      	ldrb	r0, [r6, r7]
    2a4e:	2100      	movs	r1, #0
    2a50:	4baa      	ldr	r3, [pc, #680]	; (2cfc <usart_init+0x314>)
    2a52:	4798      	blx	r3
	module->character_size = config->character_size;
    2a54:	7af3      	ldrb	r3, [r6, #11]
    2a56:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2a58:	2324      	movs	r3, #36	; 0x24
    2a5a:	5cf3      	ldrb	r3, [r6, r3]
    2a5c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2a5e:	2325      	movs	r3, #37	; 0x25
    2a60:	5cf3      	ldrb	r3, [r6, r3]
    2a62:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2a64:	7ef3      	ldrb	r3, [r6, #27]
    2a66:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2a68:	7f33      	ldrb	r3, [r6, #28]
    2a6a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2a6c:	682b      	ldr	r3, [r5, #0]
    2a6e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2a70:	0018      	movs	r0, r3
    2a72:	4b9e      	ldr	r3, [pc, #632]	; (2cec <usart_init+0x304>)
    2a74:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2a76:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2a78:	2200      	movs	r2, #0
    2a7a:	230e      	movs	r3, #14
    2a7c:	a906      	add	r1, sp, #24
    2a7e:	468c      	mov	ip, r1
    2a80:	4463      	add	r3, ip
    2a82:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2a84:	8a32      	ldrh	r2, [r6, #16]
    2a86:	9202      	str	r2, [sp, #8]
    2a88:	2380      	movs	r3, #128	; 0x80
    2a8a:	01db      	lsls	r3, r3, #7
    2a8c:	429a      	cmp	r2, r3
    2a8e:	d100      	bne.n	2a92 <usart_init+0xaa>
    2a90:	e09a      	b.n	2bc8 <usart_init+0x1e0>
    2a92:	d90f      	bls.n	2ab4 <usart_init+0xcc>
    2a94:	23c0      	movs	r3, #192	; 0xc0
    2a96:	01db      	lsls	r3, r3, #7
    2a98:	9a02      	ldr	r2, [sp, #8]
    2a9a:	429a      	cmp	r2, r3
    2a9c:	d100      	bne.n	2aa0 <usart_init+0xb8>
    2a9e:	e08e      	b.n	2bbe <usart_init+0x1d6>
    2aa0:	2380      	movs	r3, #128	; 0x80
    2aa2:	021b      	lsls	r3, r3, #8
    2aa4:	429a      	cmp	r2, r3
    2aa6:	d000      	beq.n	2aaa <usart_init+0xc2>
    2aa8:	e11b      	b.n	2ce2 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    2aaa:	2303      	movs	r3, #3
    2aac:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2aae:	2300      	movs	r3, #0
    2ab0:	9307      	str	r3, [sp, #28]
    2ab2:	e008      	b.n	2ac6 <usart_init+0xde>
	switch (config->sample_rate) {
    2ab4:	2380      	movs	r3, #128	; 0x80
    2ab6:	019b      	lsls	r3, r3, #6
    2ab8:	429a      	cmp	r2, r3
    2aba:	d000      	beq.n	2abe <usart_init+0xd6>
    2abc:	e111      	b.n	2ce2 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2abe:	2310      	movs	r3, #16
    2ac0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2ac2:	3b0f      	subs	r3, #15
    2ac4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    2ac6:	6833      	ldr	r3, [r6, #0]
    2ac8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2aca:	68f3      	ldr	r3, [r6, #12]
    2acc:	469b      	mov	fp, r3
		config->sample_adjustment |
    2ace:	6973      	ldr	r3, [r6, #20]
    2ad0:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2ad2:	7e33      	ldrb	r3, [r6, #24]
    2ad4:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2ad6:	2326      	movs	r3, #38	; 0x26
    2ad8:	5cf3      	ldrb	r3, [r6, r3]
    2ada:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2adc:	6873      	ldr	r3, [r6, #4]
    2ade:	4699      	mov	r9, r3
	switch (transfer_mode)
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d100      	bne.n	2ae6 <usart_init+0xfe>
    2ae4:	e09c      	b.n	2c20 <usart_init+0x238>
    2ae6:	2380      	movs	r3, #128	; 0x80
    2ae8:	055b      	lsls	r3, r3, #21
    2aea:	4599      	cmp	r9, r3
    2aec:	d100      	bne.n	2af0 <usart_init+0x108>
    2aee:	e080      	b.n	2bf2 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    2af0:	7e73      	ldrb	r3, [r6, #25]
    2af2:	2b00      	cmp	r3, #0
    2af4:	d002      	beq.n	2afc <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    2af6:	7eb3      	ldrb	r3, [r6, #26]
    2af8:	4642      	mov	r2, r8
    2afa:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    2afc:	230e      	movs	r3, #14
    2afe:	aa06      	add	r2, sp, #24
    2b00:	4694      	mov	ip, r2
    2b02:	4463      	add	r3, ip
    2b04:	881b      	ldrh	r3, [r3, #0]
    2b06:	4642      	mov	r2, r8
    2b08:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    2b0a:	9b05      	ldr	r3, [sp, #20]
    2b0c:	465a      	mov	r2, fp
    2b0e:	4313      	orrs	r3, r2
    2b10:	9a03      	ldr	r2, [sp, #12]
    2b12:	4313      	orrs	r3, r2
    2b14:	464a      	mov	r2, r9
    2b16:	4313      	orrs	r3, r2
    2b18:	9f02      	ldr	r7, [sp, #8]
    2b1a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2b1c:	9b04      	ldr	r3, [sp, #16]
    2b1e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2b20:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2b22:	4653      	mov	r3, sl
    2b24:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2b26:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2b28:	2327      	movs	r3, #39	; 0x27
    2b2a:	5cf3      	ldrb	r3, [r6, r3]
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	d101      	bne.n	2b34 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2b30:	3304      	adds	r3, #4
    2b32:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2b34:	7e73      	ldrb	r3, [r6, #25]
    2b36:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2b38:	7f32      	ldrb	r2, [r6, #28]
    2b3a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2b3c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2b3e:	7f72      	ldrb	r2, [r6, #29]
    2b40:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2b42:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2b44:	2224      	movs	r2, #36	; 0x24
    2b46:	5cb2      	ldrb	r2, [r6, r2]
    2b48:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2b4a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2b4c:	2225      	movs	r2, #37	; 0x25
    2b4e:	5cb2      	ldrb	r2, [r6, r2]
    2b50:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2b52:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2b54:	7ab1      	ldrb	r1, [r6, #10]
    2b56:	7af2      	ldrb	r2, [r6, #11]
    2b58:	4311      	orrs	r1, r2
    2b5a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2b5c:	8933      	ldrh	r3, [r6, #8]
    2b5e:	2bff      	cmp	r3, #255	; 0xff
    2b60:	d100      	bne.n	2b64 <usart_init+0x17c>
    2b62:	e081      	b.n	2c68 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2b64:	2280      	movs	r2, #128	; 0x80
    2b66:	0452      	lsls	r2, r2, #17
    2b68:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2b6a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2b6c:	232c      	movs	r3, #44	; 0x2c
    2b6e:	5cf3      	ldrb	r3, [r6, r3]
    2b70:	2b00      	cmp	r3, #0
    2b72:	d103      	bne.n	2b7c <usart_init+0x194>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2b74:	4b62      	ldr	r3, [pc, #392]	; (2d00 <usart_init+0x318>)
    2b76:	789b      	ldrb	r3, [r3, #2]
    2b78:	079b      	lsls	r3, r3, #30
    2b7a:	d501      	bpl.n	2b80 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2b7c:	2380      	movs	r3, #128	; 0x80
    2b7e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b80:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b82:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2b84:	2b00      	cmp	r3, #0
    2b86:	d1fc      	bne.n	2b82 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    2b88:	4643      	mov	r3, r8
    2b8a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b8c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2b8e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2b90:	2b00      	cmp	r3, #0
    2b92:	d1fc      	bne.n	2b8e <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    2b94:	4643      	mov	r3, r8
    2b96:	601f      	str	r7, [r3, #0]
    2b98:	ab0e      	add	r3, sp, #56	; 0x38
    2b9a:	2280      	movs	r2, #128	; 0x80
    2b9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2b9e:	2200      	movs	r2, #0
    2ba0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2ba2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2ba4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2ba6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2ba8:	930a      	str	r3, [sp, #40]	; 0x28
    2baa:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2bac:	930b      	str	r3, [sp, #44]	; 0x2c
    2bae:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2bb0:	930c      	str	r3, [sp, #48]	; 0x30
    2bb2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2bb4:	9302      	str	r3, [sp, #8]
    2bb6:	930d      	str	r3, [sp, #52]	; 0x34
    2bb8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2bba:	ae0a      	add	r6, sp, #40	; 0x28
    2bbc:	e063      	b.n	2c86 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2bbe:	2308      	movs	r3, #8
    2bc0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2bc2:	3b07      	subs	r3, #7
    2bc4:	9307      	str	r3, [sp, #28]
    2bc6:	e77e      	b.n	2ac6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2bc8:	6833      	ldr	r3, [r6, #0]
    2bca:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2bcc:	68f3      	ldr	r3, [r6, #12]
    2bce:	469b      	mov	fp, r3
		config->sample_adjustment |
    2bd0:	6973      	ldr	r3, [r6, #20]
    2bd2:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2bd4:	7e33      	ldrb	r3, [r6, #24]
    2bd6:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2bd8:	2326      	movs	r3, #38	; 0x26
    2bda:	5cf3      	ldrb	r3, [r6, r3]
    2bdc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    2bde:	6873      	ldr	r3, [r6, #4]
    2be0:	4699      	mov	r9, r3
	switch (transfer_mode)
    2be2:	2b00      	cmp	r3, #0
    2be4:	d018      	beq.n	2c18 <usart_init+0x230>
    2be6:	2380      	movs	r3, #128	; 0x80
    2be8:	055b      	lsls	r3, r3, #21
    2bea:	4599      	cmp	r9, r3
    2bec:	d001      	beq.n	2bf2 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    2bee:	2000      	movs	r0, #0
    2bf0:	e025      	b.n	2c3e <usart_init+0x256>
			if (!config->use_external_clock) {
    2bf2:	2327      	movs	r3, #39	; 0x27
    2bf4:	5cf3      	ldrb	r3, [r6, r3]
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d000      	beq.n	2bfc <usart_init+0x214>
    2bfa:	e779      	b.n	2af0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2bfc:	6a33      	ldr	r3, [r6, #32]
    2bfe:	001f      	movs	r7, r3
    2c00:	b2c0      	uxtb	r0, r0
    2c02:	4b40      	ldr	r3, [pc, #256]	; (2d04 <usart_init+0x31c>)
    2c04:	4798      	blx	r3
    2c06:	0001      	movs	r1, r0
    2c08:	220e      	movs	r2, #14
    2c0a:	ab06      	add	r3, sp, #24
    2c0c:	469c      	mov	ip, r3
    2c0e:	4462      	add	r2, ip
    2c10:	0038      	movs	r0, r7
    2c12:	4b3d      	ldr	r3, [pc, #244]	; (2d08 <usart_init+0x320>)
    2c14:	4798      	blx	r3
    2c16:	e012      	b.n	2c3e <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2c18:	2308      	movs	r3, #8
    2c1a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2c1c:	2300      	movs	r3, #0
    2c1e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2c20:	2327      	movs	r3, #39	; 0x27
    2c22:	5cf3      	ldrb	r3, [r6, r3]
    2c24:	2b00      	cmp	r3, #0
    2c26:	d00e      	beq.n	2c46 <usart_init+0x25e>
				status_code =
    2c28:	9b06      	ldr	r3, [sp, #24]
    2c2a:	9300      	str	r3, [sp, #0]
    2c2c:	9b07      	ldr	r3, [sp, #28]
    2c2e:	220e      	movs	r2, #14
    2c30:	a906      	add	r1, sp, #24
    2c32:	468c      	mov	ip, r1
    2c34:	4462      	add	r2, ip
    2c36:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2c38:	6a30      	ldr	r0, [r6, #32]
    2c3a:	4f34      	ldr	r7, [pc, #208]	; (2d0c <usart_init+0x324>)
    2c3c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2c3e:	2800      	cmp	r0, #0
    2c40:	d000      	beq.n	2c44 <usart_init+0x25c>
    2c42:	e6e4      	b.n	2a0e <usart_init+0x26>
    2c44:	e754      	b.n	2af0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2c46:	6a33      	ldr	r3, [r6, #32]
    2c48:	001f      	movs	r7, r3
    2c4a:	b2c0      	uxtb	r0, r0
    2c4c:	4b2d      	ldr	r3, [pc, #180]	; (2d04 <usart_init+0x31c>)
    2c4e:	4798      	blx	r3
    2c50:	0001      	movs	r1, r0
				status_code =
    2c52:	9b06      	ldr	r3, [sp, #24]
    2c54:	9300      	str	r3, [sp, #0]
    2c56:	9b07      	ldr	r3, [sp, #28]
    2c58:	220e      	movs	r2, #14
    2c5a:	a806      	add	r0, sp, #24
    2c5c:	4684      	mov	ip, r0
    2c5e:	4462      	add	r2, ip
    2c60:	0038      	movs	r0, r7
    2c62:	4f2a      	ldr	r7, [pc, #168]	; (2d0c <usart_init+0x324>)
    2c64:	47b8      	blx	r7
    2c66:	e7ea      	b.n	2c3e <usart_init+0x256>
		if(config->lin_slave_enable) {
    2c68:	7ef3      	ldrb	r3, [r6, #27]
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	d100      	bne.n	2c70 <usart_init+0x288>
    2c6e:	e77d      	b.n	2b6c <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2c70:	2380      	movs	r3, #128	; 0x80
    2c72:	04db      	lsls	r3, r3, #19
    2c74:	431f      	orrs	r7, r3
    2c76:	e779      	b.n	2b6c <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2c78:	0020      	movs	r0, r4
    2c7a:	4b25      	ldr	r3, [pc, #148]	; (2d10 <usart_init+0x328>)
    2c7c:	4798      	blx	r3
    2c7e:	e007      	b.n	2c90 <usart_init+0x2a8>
    2c80:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2c82:	2f04      	cmp	r7, #4
    2c84:	d00d      	beq.n	2ca2 <usart_init+0x2ba>
    2c86:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2c88:	00bb      	lsls	r3, r7, #2
    2c8a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2c8c:	2800      	cmp	r0, #0
    2c8e:	d0f3      	beq.n	2c78 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    2c90:	1c43      	adds	r3, r0, #1
    2c92:	d0f5      	beq.n	2c80 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2c94:	a90e      	add	r1, sp, #56	; 0x38
    2c96:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2c98:	0c00      	lsrs	r0, r0, #16
    2c9a:	b2c0      	uxtb	r0, r0
    2c9c:	4b1d      	ldr	r3, [pc, #116]	; (2d14 <usart_init+0x32c>)
    2c9e:	4798      	blx	r3
    2ca0:	e7ee      	b.n	2c80 <usart_init+0x298>
		module->callback[i]            = NULL;
    2ca2:	2300      	movs	r3, #0
    2ca4:	60eb      	str	r3, [r5, #12]
    2ca6:	612b      	str	r3, [r5, #16]
    2ca8:	616b      	str	r3, [r5, #20]
    2caa:	61ab      	str	r3, [r5, #24]
    2cac:	61eb      	str	r3, [r5, #28]
    2cae:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2cb0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2cb2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2cb4:	2200      	movs	r2, #0
    2cb6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2cb8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2cba:	3330      	adds	r3, #48	; 0x30
    2cbc:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2cbe:	3301      	adds	r3, #1
    2cc0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2cc2:	3301      	adds	r3, #1
    2cc4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2cc6:	3301      	adds	r3, #1
    2cc8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2cca:	6828      	ldr	r0, [r5, #0]
    2ccc:	4b07      	ldr	r3, [pc, #28]	; (2cec <usart_init+0x304>)
    2cce:	4798      	blx	r3
    2cd0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2cd2:	4911      	ldr	r1, [pc, #68]	; (2d18 <usart_init+0x330>)
    2cd4:	4b11      	ldr	r3, [pc, #68]	; (2d1c <usart_init+0x334>)
    2cd6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2cd8:	00a4      	lsls	r4, r4, #2
    2cda:	4b11      	ldr	r3, [pc, #68]	; (2d20 <usart_init+0x338>)
    2cdc:	50e5      	str	r5, [r4, r3]
	return status_code;
    2cde:	2000      	movs	r0, #0
    2ce0:	e695      	b.n	2a0e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2ce2:	2310      	movs	r3, #16
    2ce4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2ce6:	2300      	movs	r3, #0
    2ce8:	9307      	str	r3, [sp, #28]
    2cea:	e6ec      	b.n	2ac6 <usart_init+0xde>
    2cec:	000028e1 	.word	0x000028e1
    2cf0:	40000400 	.word	0x40000400
    2cf4:	00003615 	.word	0x00003615
    2cf8:	00003589 	.word	0x00003589
    2cfc:	0000271d 	.word	0x0000271d
    2d00:	41002000 	.word	0x41002000
    2d04:	00003631 	.word	0x00003631
    2d08:	0000265f 	.word	0x0000265f
    2d0c:	00002689 	.word	0x00002689
    2d10:	00002769 	.word	0x00002769
    2d14:	0000370d 	.word	0x0000370d
    2d18:	00002e3d 	.word	0x00002e3d
    2d1c:	0000291d 	.word	0x0000291d
    2d20:	20000590 	.word	0x20000590

00002d24 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2d24:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2d26:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2d28:	2a00      	cmp	r2, #0
    2d2a:	d101      	bne.n	2d30 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    2d2c:	0018      	movs	r0, r3
    2d2e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2d30:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2d32:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2d34:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2d36:	2a00      	cmp	r2, #0
    2d38:	d1f8      	bne.n	2d2c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d3a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    2d3c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    2d3e:	2102      	movs	r1, #2
    2d40:	7e13      	ldrb	r3, [r2, #24]
    2d42:	420b      	tst	r3, r1
    2d44:	d0fc      	beq.n	2d40 <usart_write_wait+0x1c>
	return STATUS_OK;
    2d46:	2300      	movs	r3, #0
    2d48:	e7f0      	b.n	2d2c <usart_write_wait+0x8>

00002d4a <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2d4a:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    2d4c:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    2d4e:	2a00      	cmp	r2, #0
    2d50:	d101      	bne.n	2d56 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2d52:	0018      	movs	r0, r3
    2d54:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2d56:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2d58:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2d5a:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    2d5c:	2a00      	cmp	r2, #0
    2d5e:	d1f8      	bne.n	2d52 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d60:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2d62:	7e10      	ldrb	r0, [r2, #24]
    2d64:	0740      	lsls	r0, r0, #29
    2d66:	d5f4      	bpl.n	2d52 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2d68:	8b53      	ldrh	r3, [r2, #26]
    2d6a:	b2db      	uxtb	r3, r3
	if (error_code) {
    2d6c:	0698      	lsls	r0, r3, #26
    2d6e:	d01d      	beq.n	2dac <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2d70:	0798      	lsls	r0, r3, #30
    2d72:	d503      	bpl.n	2d7c <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2d74:	2302      	movs	r3, #2
    2d76:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    2d78:	3318      	adds	r3, #24
    2d7a:	e7ea      	b.n	2d52 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2d7c:	0758      	lsls	r0, r3, #29
    2d7e:	d503      	bpl.n	2d88 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2d80:	2304      	movs	r3, #4
    2d82:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2d84:	331a      	adds	r3, #26
    2d86:	e7e4      	b.n	2d52 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2d88:	07d8      	lsls	r0, r3, #31
    2d8a:	d503      	bpl.n	2d94 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2d8c:	2301      	movs	r3, #1
    2d8e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2d90:	3312      	adds	r3, #18
    2d92:	e7de      	b.n	2d52 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2d94:	06d8      	lsls	r0, r3, #27
    2d96:	d503      	bpl.n	2da0 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2d98:	2310      	movs	r3, #16
    2d9a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2d9c:	3332      	adds	r3, #50	; 0x32
    2d9e:	e7d8      	b.n	2d52 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2da0:	069b      	lsls	r3, r3, #26
    2da2:	d503      	bpl.n	2dac <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2da4:	2320      	movs	r3, #32
    2da6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    2da8:	3321      	adds	r3, #33	; 0x21
    2daa:	e7d2      	b.n	2d52 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2dac:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2dae:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2db0:	2300      	movs	r3, #0
    2db2:	e7ce      	b.n	2d52 <usart_read_wait+0x8>

00002db4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2db6:	0004      	movs	r4, r0
    2db8:	000d      	movs	r5, r1
    2dba:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2dbc:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2dbe:	4b0f      	ldr	r3, [pc, #60]	; (2dfc <_usart_read_buffer+0x48>)
    2dc0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2dc2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2dc4:	b29b      	uxth	r3, r3
    2dc6:	2b00      	cmp	r3, #0
    2dc8:	d003      	beq.n	2dd2 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2dca:	4b0d      	ldr	r3, [pc, #52]	; (2e00 <_usart_read_buffer+0x4c>)
    2dcc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2dce:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2dd2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2dd4:	4b0a      	ldr	r3, [pc, #40]	; (2e00 <_usart_read_buffer+0x4c>)
    2dd6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2dd8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2dda:	2205      	movs	r2, #5
    2ddc:	2332      	movs	r3, #50	; 0x32
    2dde:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2de0:	3b2e      	subs	r3, #46	; 0x2e
    2de2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2de4:	7a23      	ldrb	r3, [r4, #8]
    2de6:	2b00      	cmp	r3, #0
    2de8:	d001      	beq.n	2dee <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2dea:	2320      	movs	r3, #32
    2dec:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2dee:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2df0:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2df2:	2b00      	cmp	r3, #0
    2df4:	d0ec      	beq.n	2dd0 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2df6:	2308      	movs	r3, #8
    2df8:	75bb      	strb	r3, [r7, #22]
    2dfa:	e7e9      	b.n	2dd0 <_usart_read_buffer+0x1c>
    2dfc:	00001fa9 	.word	0x00001fa9
    2e00:	00001fe9 	.word	0x00001fe9

00002e04 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2e04:	1c93      	adds	r3, r2, #2
    2e06:	009b      	lsls	r3, r3, #2
    2e08:	18c3      	adds	r3, r0, r3
    2e0a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2e0c:	2130      	movs	r1, #48	; 0x30
    2e0e:	2301      	movs	r3, #1
    2e10:	4093      	lsls	r3, r2
    2e12:	001a      	movs	r2, r3
    2e14:	5c43      	ldrb	r3, [r0, r1]
    2e16:	4313      	orrs	r3, r2
    2e18:	5443      	strb	r3, [r0, r1]
}
    2e1a:	4770      	bx	lr

00002e1c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2e1c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2e1e:	2317      	movs	r3, #23
	if (length == 0) {
    2e20:	2a00      	cmp	r2, #0
    2e22:	d101      	bne.n	2e28 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2e24:	0018      	movs	r0, r3
    2e26:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2e28:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2e2a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2e2c:	2c00      	cmp	r4, #0
    2e2e:	d0f9      	beq.n	2e24 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2e30:	4b01      	ldr	r3, [pc, #4]	; (2e38 <usart_read_buffer_job+0x1c>)
    2e32:	4798      	blx	r3
    2e34:	0003      	movs	r3, r0
    2e36:	e7f5      	b.n	2e24 <usart_read_buffer_job+0x8>
    2e38:	00002db5 	.word	0x00002db5

00002e3c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2e3e:	0080      	lsls	r0, r0, #2
    2e40:	4b62      	ldr	r3, [pc, #392]	; (2fcc <_usart_interrupt_handler+0x190>)
    2e42:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2e44:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2e46:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d1fc      	bne.n	2e46 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2e4c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2e4e:	7da6      	ldrb	r6, [r4, #22]
    2e50:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2e52:	2330      	movs	r3, #48	; 0x30
    2e54:	5ceb      	ldrb	r3, [r5, r3]
    2e56:	2231      	movs	r2, #49	; 0x31
    2e58:	5caf      	ldrb	r7, [r5, r2]
    2e5a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2e5c:	07f3      	lsls	r3, r6, #31
    2e5e:	d522      	bpl.n	2ea6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2e60:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2e62:	b29b      	uxth	r3, r3
    2e64:	2b00      	cmp	r3, #0
    2e66:	d01c      	beq.n	2ea2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2e68:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2e6a:	7813      	ldrb	r3, [r2, #0]
    2e6c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2e6e:	1c51      	adds	r1, r2, #1
    2e70:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2e72:	7969      	ldrb	r1, [r5, #5]
    2e74:	2901      	cmp	r1, #1
    2e76:	d00e      	beq.n	2e96 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2e78:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2e7a:	05db      	lsls	r3, r3, #23
    2e7c:	0ddb      	lsrs	r3, r3, #23
    2e7e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2e80:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2e82:	3b01      	subs	r3, #1
    2e84:	b29b      	uxth	r3, r3
    2e86:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2e88:	2b00      	cmp	r3, #0
    2e8a:	d10c      	bne.n	2ea6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2e8c:	3301      	adds	r3, #1
    2e8e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2e90:	3301      	adds	r3, #1
    2e92:	75a3      	strb	r3, [r4, #22]
    2e94:	e007      	b.n	2ea6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2e96:	7851      	ldrb	r1, [r2, #1]
    2e98:	0209      	lsls	r1, r1, #8
    2e9a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2e9c:	3202      	adds	r2, #2
    2e9e:	62aa      	str	r2, [r5, #40]	; 0x28
    2ea0:	e7eb      	b.n	2e7a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2ea2:	2301      	movs	r3, #1
    2ea4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2ea6:	07b3      	lsls	r3, r6, #30
    2ea8:	d506      	bpl.n	2eb8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2eaa:	2302      	movs	r3, #2
    2eac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2eae:	2200      	movs	r2, #0
    2eb0:	3331      	adds	r3, #49	; 0x31
    2eb2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2eb4:	07fb      	lsls	r3, r7, #31
    2eb6:	d41a      	bmi.n	2eee <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2eb8:	0773      	lsls	r3, r6, #29
    2eba:	d565      	bpl.n	2f88 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2ebc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2ebe:	b29b      	uxth	r3, r3
    2ec0:	2b00      	cmp	r3, #0
    2ec2:	d05f      	beq.n	2f84 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2ec4:	8b63      	ldrh	r3, [r4, #26]
    2ec6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2ec8:	071a      	lsls	r2, r3, #28
    2eca:	d414      	bmi.n	2ef6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2ecc:	223f      	movs	r2, #63	; 0x3f
    2ece:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d034      	beq.n	2f3e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2ed4:	079a      	lsls	r2, r3, #30
    2ed6:	d511      	bpl.n	2efc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2ed8:	221a      	movs	r2, #26
    2eda:	2332      	movs	r3, #50	; 0x32
    2edc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2ede:	3b30      	subs	r3, #48	; 0x30
    2ee0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2ee2:	077b      	lsls	r3, r7, #29
    2ee4:	d550      	bpl.n	2f88 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2ee6:	0028      	movs	r0, r5
    2ee8:	696b      	ldr	r3, [r5, #20]
    2eea:	4798      	blx	r3
    2eec:	e04c      	b.n	2f88 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2eee:	0028      	movs	r0, r5
    2ef0:	68eb      	ldr	r3, [r5, #12]
    2ef2:	4798      	blx	r3
    2ef4:	e7e0      	b.n	2eb8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2ef6:	2237      	movs	r2, #55	; 0x37
    2ef8:	4013      	ands	r3, r2
    2efa:	e7e9      	b.n	2ed0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2efc:	075a      	lsls	r2, r3, #29
    2efe:	d505      	bpl.n	2f0c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2f00:	221e      	movs	r2, #30
    2f02:	2332      	movs	r3, #50	; 0x32
    2f04:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2f06:	3b2e      	subs	r3, #46	; 0x2e
    2f08:	8363      	strh	r3, [r4, #26]
    2f0a:	e7ea      	b.n	2ee2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2f0c:	07da      	lsls	r2, r3, #31
    2f0e:	d505      	bpl.n	2f1c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2f10:	2213      	movs	r2, #19
    2f12:	2332      	movs	r3, #50	; 0x32
    2f14:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2f16:	3b31      	subs	r3, #49	; 0x31
    2f18:	8363      	strh	r3, [r4, #26]
    2f1a:	e7e2      	b.n	2ee2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2f1c:	06da      	lsls	r2, r3, #27
    2f1e:	d505      	bpl.n	2f2c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2f20:	2242      	movs	r2, #66	; 0x42
    2f22:	2332      	movs	r3, #50	; 0x32
    2f24:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2f26:	3b22      	subs	r3, #34	; 0x22
    2f28:	8363      	strh	r3, [r4, #26]
    2f2a:	e7da      	b.n	2ee2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2f2c:	2220      	movs	r2, #32
    2f2e:	421a      	tst	r2, r3
    2f30:	d0d7      	beq.n	2ee2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2f32:	3221      	adds	r2, #33	; 0x21
    2f34:	2332      	movs	r3, #50	; 0x32
    2f36:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2f38:	3b12      	subs	r3, #18
    2f3a:	8363      	strh	r3, [r4, #26]
    2f3c:	e7d1      	b.n	2ee2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2f3e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2f40:	05db      	lsls	r3, r3, #23
    2f42:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2f44:	b2da      	uxtb	r2, r3
    2f46:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2f48:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2f4a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2f4c:	1c51      	adds	r1, r2, #1
    2f4e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2f50:	7969      	ldrb	r1, [r5, #5]
    2f52:	2901      	cmp	r1, #1
    2f54:	d010      	beq.n	2f78 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2f56:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2f58:	3b01      	subs	r3, #1
    2f5a:	b29b      	uxth	r3, r3
    2f5c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d112      	bne.n	2f88 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2f62:	3304      	adds	r3, #4
    2f64:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2f66:	2200      	movs	r2, #0
    2f68:	332e      	adds	r3, #46	; 0x2e
    2f6a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2f6c:	07bb      	lsls	r3, r7, #30
    2f6e:	d50b      	bpl.n	2f88 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2f70:	0028      	movs	r0, r5
    2f72:	692b      	ldr	r3, [r5, #16]
    2f74:	4798      	blx	r3
    2f76:	e007      	b.n	2f88 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2f78:	0a1b      	lsrs	r3, r3, #8
    2f7a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2f7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2f7e:	3301      	adds	r3, #1
    2f80:	626b      	str	r3, [r5, #36]	; 0x24
    2f82:	e7e8      	b.n	2f56 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2f84:	2304      	movs	r3, #4
    2f86:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2f88:	06f3      	lsls	r3, r6, #27
    2f8a:	d504      	bpl.n	2f96 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2f8c:	2310      	movs	r3, #16
    2f8e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2f90:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2f92:	06fb      	lsls	r3, r7, #27
    2f94:	d40e      	bmi.n	2fb4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2f96:	06b3      	lsls	r3, r6, #26
    2f98:	d504      	bpl.n	2fa4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2f9a:	2320      	movs	r3, #32
    2f9c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2f9e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2fa0:	073b      	lsls	r3, r7, #28
    2fa2:	d40b      	bmi.n	2fbc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2fa4:	0733      	lsls	r3, r6, #28
    2fa6:	d504      	bpl.n	2fb2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2fa8:	2308      	movs	r3, #8
    2faa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2fac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2fae:	06bb      	lsls	r3, r7, #26
    2fb0:	d408      	bmi.n	2fc4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2fb4:	0028      	movs	r0, r5
    2fb6:	69eb      	ldr	r3, [r5, #28]
    2fb8:	4798      	blx	r3
    2fba:	e7ec      	b.n	2f96 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2fbc:	0028      	movs	r0, r5
    2fbe:	69ab      	ldr	r3, [r5, #24]
    2fc0:	4798      	blx	r3
    2fc2:	e7ef      	b.n	2fa4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2fc4:	6a2b      	ldr	r3, [r5, #32]
    2fc6:	0028      	movs	r0, r5
    2fc8:	4798      	blx	r3
}
    2fca:	e7f2      	b.n	2fb2 <_usart_interrupt_handler+0x176>
    2fcc:	20000590 	.word	0x20000590

00002fd0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2fd0:	b510      	push	{r4, lr}
	switch (clock_source) {
    2fd2:	2808      	cmp	r0, #8
    2fd4:	d803      	bhi.n	2fde <system_clock_source_get_hz+0xe>
    2fd6:	0080      	lsls	r0, r0, #2
    2fd8:	4b1c      	ldr	r3, [pc, #112]	; (304c <system_clock_source_get_hz+0x7c>)
    2fda:	581b      	ldr	r3, [r3, r0]
    2fdc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2fde:	2000      	movs	r0, #0
    2fe0:	e032      	b.n	3048 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2fe2:	4b1b      	ldr	r3, [pc, #108]	; (3050 <system_clock_source_get_hz+0x80>)
    2fe4:	6918      	ldr	r0, [r3, #16]
    2fe6:	e02f      	b.n	3048 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2fe8:	4b1a      	ldr	r3, [pc, #104]	; (3054 <system_clock_source_get_hz+0x84>)
    2fea:	6a1b      	ldr	r3, [r3, #32]
    2fec:	059b      	lsls	r3, r3, #22
    2fee:	0f9b      	lsrs	r3, r3, #30
    2ff0:	4819      	ldr	r0, [pc, #100]	; (3058 <system_clock_source_get_hz+0x88>)
    2ff2:	40d8      	lsrs	r0, r3
    2ff4:	e028      	b.n	3048 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2ff6:	4b16      	ldr	r3, [pc, #88]	; (3050 <system_clock_source_get_hz+0x80>)
    2ff8:	6958      	ldr	r0, [r3, #20]
    2ffa:	e025      	b.n	3048 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2ffc:	4b14      	ldr	r3, [pc, #80]	; (3050 <system_clock_source_get_hz+0x80>)
    2ffe:	681b      	ldr	r3, [r3, #0]
			return 0;
    3000:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3002:	079b      	lsls	r3, r3, #30
    3004:	d520      	bpl.n	3048 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3006:	4913      	ldr	r1, [pc, #76]	; (3054 <system_clock_source_get_hz+0x84>)
    3008:	2210      	movs	r2, #16
    300a:	68cb      	ldr	r3, [r1, #12]
    300c:	421a      	tst	r2, r3
    300e:	d0fc      	beq.n	300a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    3010:	4b0f      	ldr	r3, [pc, #60]	; (3050 <system_clock_source_get_hz+0x80>)
    3012:	681a      	ldr	r2, [r3, #0]
    3014:	2324      	movs	r3, #36	; 0x24
    3016:	4013      	ands	r3, r2
    3018:	2b04      	cmp	r3, #4
    301a:	d001      	beq.n	3020 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    301c:	480f      	ldr	r0, [pc, #60]	; (305c <system_clock_source_get_hz+0x8c>)
    301e:	e013      	b.n	3048 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    3020:	2000      	movs	r0, #0
    3022:	4b0f      	ldr	r3, [pc, #60]	; (3060 <system_clock_source_get_hz+0x90>)
    3024:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    3026:	4b0a      	ldr	r3, [pc, #40]	; (3050 <system_clock_source_get_hz+0x80>)
    3028:	689b      	ldr	r3, [r3, #8]
    302a:	041b      	lsls	r3, r3, #16
    302c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    302e:	4358      	muls	r0, r3
    3030:	e00a      	b.n	3048 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3032:	2350      	movs	r3, #80	; 0x50
    3034:	4a07      	ldr	r2, [pc, #28]	; (3054 <system_clock_source_get_hz+0x84>)
    3036:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    3038:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    303a:	075b      	lsls	r3, r3, #29
    303c:	d504      	bpl.n	3048 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    303e:	4b04      	ldr	r3, [pc, #16]	; (3050 <system_clock_source_get_hz+0x80>)
    3040:	68d8      	ldr	r0, [r3, #12]
    3042:	e001      	b.n	3048 <system_clock_source_get_hz+0x78>
		return 32768UL;
    3044:	2080      	movs	r0, #128	; 0x80
    3046:	0200      	lsls	r0, r0, #8
	}
}
    3048:	bd10      	pop	{r4, pc}
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	00007028 	.word	0x00007028
    3050:	200004c4 	.word	0x200004c4
    3054:	40000800 	.word	0x40000800
    3058:	007a1200 	.word	0x007a1200
    305c:	02dc6c00 	.word	0x02dc6c00
    3060:	00003631 	.word	0x00003631

00003064 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3064:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3066:	490c      	ldr	r1, [pc, #48]	; (3098 <system_clock_source_osc8m_set_config+0x34>)
    3068:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    306a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    306c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    306e:	7840      	ldrb	r0, [r0, #1]
    3070:	2201      	movs	r2, #1
    3072:	4010      	ands	r0, r2
    3074:	0180      	lsls	r0, r0, #6
    3076:	2640      	movs	r6, #64	; 0x40
    3078:	43b3      	bics	r3, r6
    307a:	4303      	orrs	r3, r0
    307c:	402a      	ands	r2, r5
    307e:	01d2      	lsls	r2, r2, #7
    3080:	2080      	movs	r0, #128	; 0x80
    3082:	4383      	bics	r3, r0
    3084:	4313      	orrs	r3, r2
    3086:	2203      	movs	r2, #3
    3088:	4022      	ands	r2, r4
    308a:	0212      	lsls	r2, r2, #8
    308c:	4803      	ldr	r0, [pc, #12]	; (309c <system_clock_source_osc8m_set_config+0x38>)
    308e:	4003      	ands	r3, r0
    3090:	4313      	orrs	r3, r2
    3092:	620b      	str	r3, [r1, #32]
}
    3094:	bd70      	pop	{r4, r5, r6, pc}
    3096:	46c0      	nop			; (mov r8, r8)
    3098:	40000800 	.word	0x40000800
    309c:	fffffcff 	.word	0xfffffcff

000030a0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    30a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a2:	46de      	mov	lr, fp
    30a4:	4657      	mov	r7, sl
    30a6:	464e      	mov	r6, r9
    30a8:	4645      	mov	r5, r8
    30aa:	b5e0      	push	{r5, r6, r7, lr}
    30ac:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    30ae:	4b26      	ldr	r3, [pc, #152]	; (3148 <system_clock_source_xosc32k_set_config+0xa8>)
    30b0:	469b      	mov	fp, r3
    30b2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    30b4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    30b6:	7800      	ldrb	r0, [r0, #0]
    30b8:	4242      	negs	r2, r0
    30ba:	4142      	adcs	r2, r0
    30bc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    30be:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    30c0:	78ca      	ldrb	r2, [r1, #3]
    30c2:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    30c4:	790a      	ldrb	r2, [r1, #4]
    30c6:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    30c8:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    30ca:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    30cc:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    30ce:	688a      	ldr	r2, [r1, #8]
    30d0:	491e      	ldr	r1, [pc, #120]	; (314c <system_clock_source_xosc32k_set_config+0xac>)
    30d2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    30d4:	2101      	movs	r1, #1
    30d6:	464a      	mov	r2, r9
    30d8:	0092      	lsls	r2, r2, #2
    30da:	4691      	mov	r9, r2
    30dc:	2204      	movs	r2, #4
    30de:	4393      	bics	r3, r2
    30e0:	464a      	mov	r2, r9
    30e2:	4313      	orrs	r3, r2
    30e4:	4642      	mov	r2, r8
    30e6:	400a      	ands	r2, r1
    30e8:	00d2      	lsls	r2, r2, #3
    30ea:	4690      	mov	r8, r2
    30ec:	2208      	movs	r2, #8
    30ee:	4393      	bics	r3, r2
    30f0:	4642      	mov	r2, r8
    30f2:	4313      	orrs	r3, r2
    30f4:	4662      	mov	r2, ip
    30f6:	400a      	ands	r2, r1
    30f8:	0112      	lsls	r2, r2, #4
    30fa:	4694      	mov	ip, r2
    30fc:	2210      	movs	r2, #16
    30fe:	4393      	bics	r3, r2
    3100:	4662      	mov	r2, ip
    3102:	4313      	orrs	r3, r2
    3104:	4008      	ands	r0, r1
    3106:	0140      	lsls	r0, r0, #5
    3108:	2220      	movs	r2, #32
    310a:	4393      	bics	r3, r2
    310c:	4303      	orrs	r3, r0
    310e:	400f      	ands	r7, r1
    3110:	01bf      	lsls	r7, r7, #6
    3112:	2040      	movs	r0, #64	; 0x40
    3114:	4383      	bics	r3, r0
    3116:	433b      	orrs	r3, r7
    3118:	400e      	ands	r6, r1
    311a:	01f6      	lsls	r6, r6, #7
    311c:	3040      	adds	r0, #64	; 0x40
    311e:	4383      	bics	r3, r0
    3120:	4333      	orrs	r3, r6
    3122:	3879      	subs	r0, #121	; 0x79
    3124:	4005      	ands	r5, r0
    3126:	022d      	lsls	r5, r5, #8
    3128:	4809      	ldr	r0, [pc, #36]	; (3150 <system_clock_source_xosc32k_set_config+0xb0>)
    312a:	4003      	ands	r3, r0
    312c:	432b      	orrs	r3, r5
    312e:	4021      	ands	r1, r4
    3130:	0309      	lsls	r1, r1, #12
    3132:	4808      	ldr	r0, [pc, #32]	; (3154 <system_clock_source_xosc32k_set_config+0xb4>)
    3134:	4003      	ands	r3, r0
    3136:	430b      	orrs	r3, r1
    3138:	465a      	mov	r2, fp
    313a:	8293      	strh	r3, [r2, #20]
}
    313c:	bc3c      	pop	{r2, r3, r4, r5}
    313e:	4690      	mov	r8, r2
    3140:	4699      	mov	r9, r3
    3142:	46a2      	mov	sl, r4
    3144:	46ab      	mov	fp, r5
    3146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3148:	40000800 	.word	0x40000800
    314c:	200004c4 	.word	0x200004c4
    3150:	fffff8ff 	.word	0xfffff8ff
    3154:	ffffefff 	.word	0xffffefff

00003158 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    3158:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    315a:	7a03      	ldrb	r3, [r0, #8]
    315c:	069b      	lsls	r3, r3, #26
    315e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    3160:	8942      	ldrh	r2, [r0, #10]
    3162:	0592      	lsls	r2, r2, #22
    3164:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    3166:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    3168:	4918      	ldr	r1, [pc, #96]	; (31cc <system_clock_source_dfll_set_config+0x74>)
    316a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    316c:	7983      	ldrb	r3, [r0, #6]
    316e:	79c2      	ldrb	r2, [r0, #7]
    3170:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    3172:	8842      	ldrh	r2, [r0, #2]
    3174:	8884      	ldrh	r4, [r0, #4]
    3176:	4322      	orrs	r2, r4
    3178:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    317a:	7842      	ldrb	r2, [r0, #1]
    317c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    317e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    3180:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3182:	7803      	ldrb	r3, [r0, #0]
    3184:	2b04      	cmp	r3, #4
    3186:	d011      	beq.n	31ac <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    3188:	2b20      	cmp	r3, #32
    318a:	d10e      	bne.n	31aa <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    318c:	7b03      	ldrb	r3, [r0, #12]
    318e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3190:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3192:	4313      	orrs	r3, r2
    3194:	89c2      	ldrh	r2, [r0, #14]
    3196:	0412      	lsls	r2, r2, #16
    3198:	490d      	ldr	r1, [pc, #52]	; (31d0 <system_clock_source_dfll_set_config+0x78>)
    319a:	400a      	ands	r2, r1
    319c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    319e:	4a0b      	ldr	r2, [pc, #44]	; (31cc <system_clock_source_dfll_set_config+0x74>)
    31a0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    31a2:	6811      	ldr	r1, [r2, #0]
    31a4:	4b0b      	ldr	r3, [pc, #44]	; (31d4 <system_clock_source_dfll_set_config+0x7c>)
    31a6:	430b      	orrs	r3, r1
    31a8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    31aa:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    31ac:	7b03      	ldrb	r3, [r0, #12]
    31ae:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    31b0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    31b2:	4313      	orrs	r3, r2
    31b4:	89c2      	ldrh	r2, [r0, #14]
    31b6:	0412      	lsls	r2, r2, #16
    31b8:	4905      	ldr	r1, [pc, #20]	; (31d0 <system_clock_source_dfll_set_config+0x78>)
    31ba:	400a      	ands	r2, r1
    31bc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    31be:	4a03      	ldr	r2, [pc, #12]	; (31cc <system_clock_source_dfll_set_config+0x74>)
    31c0:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    31c2:	6813      	ldr	r3, [r2, #0]
    31c4:	2104      	movs	r1, #4
    31c6:	430b      	orrs	r3, r1
    31c8:	6013      	str	r3, [r2, #0]
    31ca:	e7ee      	b.n	31aa <system_clock_source_dfll_set_config+0x52>
    31cc:	200004c4 	.word	0x200004c4
    31d0:	03ff0000 	.word	0x03ff0000
    31d4:	00000424 	.word	0x00000424

000031d8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    31d8:	2808      	cmp	r0, #8
    31da:	d803      	bhi.n	31e4 <system_clock_source_enable+0xc>
    31dc:	0080      	lsls	r0, r0, #2
    31de:	4b25      	ldr	r3, [pc, #148]	; (3274 <system_clock_source_enable+0x9c>)
    31e0:	581b      	ldr	r3, [r3, r0]
    31e2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    31e4:	2017      	movs	r0, #23
    31e6:	e044      	b.n	3272 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    31e8:	4a23      	ldr	r2, [pc, #140]	; (3278 <system_clock_source_enable+0xa0>)
    31ea:	6a13      	ldr	r3, [r2, #32]
    31ec:	2102      	movs	r1, #2
    31ee:	430b      	orrs	r3, r1
    31f0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    31f2:	2000      	movs	r0, #0
    31f4:	e03d      	b.n	3272 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    31f6:	4a20      	ldr	r2, [pc, #128]	; (3278 <system_clock_source_enable+0xa0>)
    31f8:	6993      	ldr	r3, [r2, #24]
    31fa:	2102      	movs	r1, #2
    31fc:	430b      	orrs	r3, r1
    31fe:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    3200:	2000      	movs	r0, #0
		break;
    3202:	e036      	b.n	3272 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3204:	4a1c      	ldr	r2, [pc, #112]	; (3278 <system_clock_source_enable+0xa0>)
    3206:	8a13      	ldrh	r3, [r2, #16]
    3208:	2102      	movs	r1, #2
    320a:	430b      	orrs	r3, r1
    320c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    320e:	2000      	movs	r0, #0
		break;
    3210:	e02f      	b.n	3272 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    3212:	4a19      	ldr	r2, [pc, #100]	; (3278 <system_clock_source_enable+0xa0>)
    3214:	8a93      	ldrh	r3, [r2, #20]
    3216:	2102      	movs	r1, #2
    3218:	430b      	orrs	r3, r1
    321a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    321c:	2000      	movs	r0, #0
		break;
    321e:	e028      	b.n	3272 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3220:	4916      	ldr	r1, [pc, #88]	; (327c <system_clock_source_enable+0xa4>)
    3222:	680b      	ldr	r3, [r1, #0]
    3224:	2202      	movs	r2, #2
    3226:	4313      	orrs	r3, r2
    3228:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    322a:	4b13      	ldr	r3, [pc, #76]	; (3278 <system_clock_source_enable+0xa0>)
    322c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    322e:	0019      	movs	r1, r3
    3230:	320e      	adds	r2, #14
    3232:	68cb      	ldr	r3, [r1, #12]
    3234:	421a      	tst	r2, r3
    3236:	d0fc      	beq.n	3232 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3238:	4a10      	ldr	r2, [pc, #64]	; (327c <system_clock_source_enable+0xa4>)
    323a:	6891      	ldr	r1, [r2, #8]
    323c:	4b0e      	ldr	r3, [pc, #56]	; (3278 <system_clock_source_enable+0xa0>)
    323e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3240:	6852      	ldr	r2, [r2, #4]
    3242:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3244:	2200      	movs	r2, #0
    3246:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3248:	0019      	movs	r1, r3
    324a:	3210      	adds	r2, #16
    324c:	68cb      	ldr	r3, [r1, #12]
    324e:	421a      	tst	r2, r3
    3250:	d0fc      	beq.n	324c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3252:	4b0a      	ldr	r3, [pc, #40]	; (327c <system_clock_source_enable+0xa4>)
    3254:	681b      	ldr	r3, [r3, #0]
    3256:	b29b      	uxth	r3, r3
    3258:	4a07      	ldr	r2, [pc, #28]	; (3278 <system_clock_source_enable+0xa0>)
    325a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    325c:	2000      	movs	r0, #0
    325e:	e008      	b.n	3272 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3260:	4905      	ldr	r1, [pc, #20]	; (3278 <system_clock_source_enable+0xa0>)
    3262:	2244      	movs	r2, #68	; 0x44
    3264:	5c8b      	ldrb	r3, [r1, r2]
    3266:	2002      	movs	r0, #2
    3268:	4303      	orrs	r3, r0
    326a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    326c:	2000      	movs	r0, #0
		break;
    326e:	e000      	b.n	3272 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3270:	2000      	movs	r0, #0
}
    3272:	4770      	bx	lr
    3274:	0000704c 	.word	0x0000704c
    3278:	40000800 	.word	0x40000800
    327c:	200004c4 	.word	0x200004c4

00003280 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3280:	b5f0      	push	{r4, r5, r6, r7, lr}
    3282:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3284:	22c2      	movs	r2, #194	; 0xc2
    3286:	00d2      	lsls	r2, r2, #3
    3288:	4b47      	ldr	r3, [pc, #284]	; (33a8 <system_clock_init+0x128>)
    328a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    328c:	4947      	ldr	r1, [pc, #284]	; (33ac <system_clock_init+0x12c>)
    328e:	684b      	ldr	r3, [r1, #4]
    3290:	221e      	movs	r2, #30
    3292:	4393      	bics	r3, r2
    3294:	3a1c      	subs	r2, #28
    3296:	4313      	orrs	r3, r2
    3298:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    329a:	ab01      	add	r3, sp, #4
    329c:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    329e:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    32a0:	4d43      	ldr	r5, [pc, #268]	; (33b0 <system_clock_init+0x130>)
    32a2:	b2e0      	uxtb	r0, r4
    32a4:	a901      	add	r1, sp, #4
    32a6:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    32a8:	3401      	adds	r4, #1
    32aa:	2c25      	cmp	r4, #37	; 0x25
    32ac:	d1f9      	bne.n	32a2 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    32ae:	a80a      	add	r0, sp, #40	; 0x28
    32b0:	2300      	movs	r3, #0
    32b2:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    32b4:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    32b6:	2280      	movs	r2, #128	; 0x80
    32b8:	0212      	lsls	r2, r2, #8
    32ba:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    32bc:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    32be:	2201      	movs	r2, #1
    32c0:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    32c2:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    32c4:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    32c6:	3205      	adds	r2, #5
    32c8:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    32ca:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    32cc:	4b39      	ldr	r3, [pc, #228]	; (33b4 <system_clock_init+0x134>)
    32ce:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    32d0:	2005      	movs	r0, #5
    32d2:	4b39      	ldr	r3, [pc, #228]	; (33b8 <system_clock_init+0x138>)
    32d4:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    32d6:	4934      	ldr	r1, [pc, #208]	; (33a8 <system_clock_init+0x128>)
    32d8:	2202      	movs	r2, #2
    32da:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    32dc:	421a      	tst	r2, r3
    32de:	d0fc      	beq.n	32da <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    32e0:	4a31      	ldr	r2, [pc, #196]	; (33a8 <system_clock_init+0x128>)
    32e2:	8a93      	ldrh	r3, [r2, #20]
    32e4:	2180      	movs	r1, #128	; 0x80
    32e6:	430b      	orrs	r3, r1
    32e8:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    32ea:	ab05      	add	r3, sp, #20
    32ec:	2100      	movs	r1, #0
    32ee:	2200      	movs	r2, #0
    32f0:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    32f2:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    32f4:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    32f6:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    32f8:	313f      	adds	r1, #63	; 0x3f
    32fa:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    32fc:	393b      	subs	r1, #59	; 0x3b
    32fe:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    3300:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    3302:	4b2e      	ldr	r3, [pc, #184]	; (33bc <system_clock_init+0x13c>)
    3304:	681b      	ldr	r3, [r3, #0]
    3306:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    3308:	2b3f      	cmp	r3, #63	; 0x3f
    330a:	d04b      	beq.n	33a4 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    330c:	a805      	add	r0, sp, #20
    330e:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    3310:	23b7      	movs	r3, #183	; 0xb7
    3312:	00db      	lsls	r3, r3, #3
    3314:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    3316:	2307      	movs	r3, #7
    3318:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    331a:	3338      	adds	r3, #56	; 0x38
    331c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    331e:	4b28      	ldr	r3, [pc, #160]	; (33c0 <system_clock_init+0x140>)
    3320:	4798      	blx	r3
	config->run_in_standby  = false;
    3322:	a804      	add	r0, sp, #16
    3324:	2500      	movs	r5, #0
    3326:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    3328:	2601      	movs	r6, #1
    332a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    332c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    332e:	4b25      	ldr	r3, [pc, #148]	; (33c4 <system_clock_init+0x144>)
    3330:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3332:	2006      	movs	r0, #6
    3334:	4f20      	ldr	r7, [pc, #128]	; (33b8 <system_clock_init+0x138>)
    3336:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    3338:	4b23      	ldr	r3, [pc, #140]	; (33c8 <system_clock_init+0x148>)
    333a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    333c:	ac01      	add	r4, sp, #4
    333e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    3340:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3342:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    3344:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3346:	2305      	movs	r3, #5
    3348:	7023      	strb	r3, [r4, #0]
    334a:	0021      	movs	r1, r4
    334c:	2001      	movs	r0, #1
    334e:	4b1f      	ldr	r3, [pc, #124]	; (33cc <system_clock_init+0x14c>)
    3350:	4798      	blx	r3
    3352:	2001      	movs	r0, #1
    3354:	4b1e      	ldr	r3, [pc, #120]	; (33d0 <system_clock_init+0x150>)
    3356:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3358:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    335a:	0021      	movs	r1, r4
    335c:	2000      	movs	r0, #0
    335e:	4b14      	ldr	r3, [pc, #80]	; (33b0 <system_clock_init+0x130>)
    3360:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    3362:	2000      	movs	r0, #0
    3364:	4b1b      	ldr	r3, [pc, #108]	; (33d4 <system_clock_init+0x154>)
    3366:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    3368:	2007      	movs	r0, #7
    336a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    336c:	490e      	ldr	r1, [pc, #56]	; (33a8 <system_clock_init+0x128>)
    336e:	22d0      	movs	r2, #208	; 0xd0
    3370:	68cb      	ldr	r3, [r1, #12]
    3372:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3374:	2bd0      	cmp	r3, #208	; 0xd0
    3376:	d1fb      	bne.n	3370 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    3378:	4a17      	ldr	r2, [pc, #92]	; (33d8 <system_clock_init+0x158>)
    337a:	2300      	movs	r3, #0
    337c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    337e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    3380:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    3382:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    3384:	a901      	add	r1, sp, #4
    3386:	2201      	movs	r2, #1
    3388:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    338a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    338c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    338e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3390:	3307      	adds	r3, #7
    3392:	700b      	strb	r3, [r1, #0]
    3394:	2000      	movs	r0, #0
    3396:	4b0d      	ldr	r3, [pc, #52]	; (33cc <system_clock_init+0x14c>)
    3398:	4798      	blx	r3
    339a:	2000      	movs	r0, #0
    339c:	4b0c      	ldr	r3, [pc, #48]	; (33d0 <system_clock_init+0x150>)
    339e:	4798      	blx	r3
#endif
}
    33a0:	b00f      	add	sp, #60	; 0x3c
    33a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    33a4:	3b20      	subs	r3, #32
    33a6:	e7b1      	b.n	330c <system_clock_init+0x8c>
    33a8:	40000800 	.word	0x40000800
    33ac:	41004000 	.word	0x41004000
    33b0:	00003615 	.word	0x00003615
    33b4:	000030a1 	.word	0x000030a1
    33b8:	000031d9 	.word	0x000031d9
    33bc:	00806024 	.word	0x00806024
    33c0:	00003159 	.word	0x00003159
    33c4:	00003065 	.word	0x00003065
    33c8:	000033dd 	.word	0x000033dd
    33cc:	00003401 	.word	0x00003401
    33d0:	000034b9 	.word	0x000034b9
    33d4:	00003589 	.word	0x00003589
    33d8:	40000400 	.word	0x40000400

000033dc <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    33dc:	4a06      	ldr	r2, [pc, #24]	; (33f8 <system_gclk_init+0x1c>)
    33de:	6993      	ldr	r3, [r2, #24]
    33e0:	2108      	movs	r1, #8
    33e2:	430b      	orrs	r3, r1
    33e4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    33e6:	2201      	movs	r2, #1
    33e8:	4b04      	ldr	r3, [pc, #16]	; (33fc <system_gclk_init+0x20>)
    33ea:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    33ec:	0019      	movs	r1, r3
    33ee:	780b      	ldrb	r3, [r1, #0]
    33f0:	4213      	tst	r3, r2
    33f2:	d1fc      	bne.n	33ee <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    33f4:	4770      	bx	lr
    33f6:	46c0      	nop			; (mov r8, r8)
    33f8:	40000400 	.word	0x40000400
    33fc:	40000c00 	.word	0x40000c00

00003400 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3400:	b570      	push	{r4, r5, r6, lr}
    3402:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    3404:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3406:	780d      	ldrb	r5, [r1, #0]
    3408:	022d      	lsls	r5, r5, #8
    340a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    340c:	784b      	ldrb	r3, [r1, #1]
    340e:	2b00      	cmp	r3, #0
    3410:	d002      	beq.n	3418 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3412:	2380      	movs	r3, #128	; 0x80
    3414:	02db      	lsls	r3, r3, #11
    3416:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3418:	7a4b      	ldrb	r3, [r1, #9]
    341a:	2b00      	cmp	r3, #0
    341c:	d002      	beq.n	3424 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    341e:	2380      	movs	r3, #128	; 0x80
    3420:	031b      	lsls	r3, r3, #12
    3422:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3424:	6848      	ldr	r0, [r1, #4]
    3426:	2801      	cmp	r0, #1
    3428:	d910      	bls.n	344c <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    342a:	1e43      	subs	r3, r0, #1
    342c:	4218      	tst	r0, r3
    342e:	d134      	bne.n	349a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    3430:	2802      	cmp	r0, #2
    3432:	d930      	bls.n	3496 <system_gclk_gen_set_config+0x96>
    3434:	2302      	movs	r3, #2
    3436:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3438:	3201      	adds	r2, #1
						mask <<= 1) {
    343a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    343c:	4298      	cmp	r0, r3
    343e:	d8fb      	bhi.n	3438 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    3440:	0212      	lsls	r2, r2, #8
    3442:	4332      	orrs	r2, r6
    3444:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3446:	2380      	movs	r3, #128	; 0x80
    3448:	035b      	lsls	r3, r3, #13
    344a:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    344c:	7a0b      	ldrb	r3, [r1, #8]
    344e:	2b00      	cmp	r3, #0
    3450:	d002      	beq.n	3458 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    3452:	2380      	movs	r3, #128	; 0x80
    3454:	039b      	lsls	r3, r3, #14
    3456:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3458:	4a13      	ldr	r2, [pc, #76]	; (34a8 <system_gclk_gen_set_config+0xa8>)
    345a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    345c:	b25b      	sxtb	r3, r3
    345e:	2b00      	cmp	r3, #0
    3460:	dbfb      	blt.n	345a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    3462:	4b12      	ldr	r3, [pc, #72]	; (34ac <system_gclk_gen_set_config+0xac>)
    3464:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3466:	4b12      	ldr	r3, [pc, #72]	; (34b0 <system_gclk_gen_set_config+0xb0>)
    3468:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    346a:	4a0f      	ldr	r2, [pc, #60]	; (34a8 <system_gclk_gen_set_config+0xa8>)
    346c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    346e:	b25b      	sxtb	r3, r3
    3470:	2b00      	cmp	r3, #0
    3472:	dbfb      	blt.n	346c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3474:	4b0c      	ldr	r3, [pc, #48]	; (34a8 <system_gclk_gen_set_config+0xa8>)
    3476:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3478:	001a      	movs	r2, r3
    347a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    347c:	b25b      	sxtb	r3, r3
    347e:	2b00      	cmp	r3, #0
    3480:	dbfb      	blt.n	347a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    3482:	4a09      	ldr	r2, [pc, #36]	; (34a8 <system_gclk_gen_set_config+0xa8>)
    3484:	6853      	ldr	r3, [r2, #4]
    3486:	2180      	movs	r1, #128	; 0x80
    3488:	0249      	lsls	r1, r1, #9
    348a:	400b      	ands	r3, r1
    348c:	431d      	orrs	r5, r3
    348e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    3490:	4b08      	ldr	r3, [pc, #32]	; (34b4 <system_gclk_gen_set_config+0xb4>)
    3492:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3494:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3496:	2200      	movs	r2, #0
    3498:	e7d2      	b.n	3440 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    349a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    349c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    349e:	2380      	movs	r3, #128	; 0x80
    34a0:	029b      	lsls	r3, r3, #10
    34a2:	431d      	orrs	r5, r3
    34a4:	e7d2      	b.n	344c <system_gclk_gen_set_config+0x4c>
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	40000c00 	.word	0x40000c00
    34ac:	00001fa9 	.word	0x00001fa9
    34b0:	40000c08 	.word	0x40000c08
    34b4:	00001fe9 	.word	0x00001fe9

000034b8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    34b8:	b510      	push	{r4, lr}
    34ba:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    34bc:	4a0b      	ldr	r2, [pc, #44]	; (34ec <system_gclk_gen_enable+0x34>)
    34be:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    34c0:	b25b      	sxtb	r3, r3
    34c2:	2b00      	cmp	r3, #0
    34c4:	dbfb      	blt.n	34be <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    34c6:	4b0a      	ldr	r3, [pc, #40]	; (34f0 <system_gclk_gen_enable+0x38>)
    34c8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    34ca:	4b0a      	ldr	r3, [pc, #40]	; (34f4 <system_gclk_gen_enable+0x3c>)
    34cc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    34ce:	4a07      	ldr	r2, [pc, #28]	; (34ec <system_gclk_gen_enable+0x34>)
    34d0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    34d2:	b25b      	sxtb	r3, r3
    34d4:	2b00      	cmp	r3, #0
    34d6:	dbfb      	blt.n	34d0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    34d8:	4a04      	ldr	r2, [pc, #16]	; (34ec <system_gclk_gen_enable+0x34>)
    34da:	6851      	ldr	r1, [r2, #4]
    34dc:	2380      	movs	r3, #128	; 0x80
    34de:	025b      	lsls	r3, r3, #9
    34e0:	430b      	orrs	r3, r1
    34e2:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    34e4:	4b04      	ldr	r3, [pc, #16]	; (34f8 <system_gclk_gen_enable+0x40>)
    34e6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    34e8:	bd10      	pop	{r4, pc}
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	40000c00 	.word	0x40000c00
    34f0:	00001fa9 	.word	0x00001fa9
    34f4:	40000c04 	.word	0x40000c04
    34f8:	00001fe9 	.word	0x00001fe9

000034fc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    34fc:	b570      	push	{r4, r5, r6, lr}
    34fe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3500:	4a1a      	ldr	r2, [pc, #104]	; (356c <system_gclk_gen_get_hz+0x70>)
    3502:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3504:	b25b      	sxtb	r3, r3
    3506:	2b00      	cmp	r3, #0
    3508:	dbfb      	blt.n	3502 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    350a:	4b19      	ldr	r3, [pc, #100]	; (3570 <system_gclk_gen_get_hz+0x74>)
    350c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    350e:	4b19      	ldr	r3, [pc, #100]	; (3574 <system_gclk_gen_get_hz+0x78>)
    3510:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3512:	4a16      	ldr	r2, [pc, #88]	; (356c <system_gclk_gen_get_hz+0x70>)
    3514:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    3516:	b25b      	sxtb	r3, r3
    3518:	2b00      	cmp	r3, #0
    351a:	dbfb      	blt.n	3514 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    351c:	4e13      	ldr	r6, [pc, #76]	; (356c <system_gclk_gen_get_hz+0x70>)
    351e:	6870      	ldr	r0, [r6, #4]
    3520:	04c0      	lsls	r0, r0, #19
    3522:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3524:	4b14      	ldr	r3, [pc, #80]	; (3578 <system_gclk_gen_get_hz+0x7c>)
    3526:	4798      	blx	r3
    3528:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    352a:	4b12      	ldr	r3, [pc, #72]	; (3574 <system_gclk_gen_get_hz+0x78>)
    352c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    352e:	6876      	ldr	r6, [r6, #4]
    3530:	02f6      	lsls	r6, r6, #11
    3532:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3534:	4b11      	ldr	r3, [pc, #68]	; (357c <system_gclk_gen_get_hz+0x80>)
    3536:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3538:	4a0c      	ldr	r2, [pc, #48]	; (356c <system_gclk_gen_get_hz+0x70>)
    353a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    353c:	b25b      	sxtb	r3, r3
    353e:	2b00      	cmp	r3, #0
    3540:	dbfb      	blt.n	353a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3542:	4b0a      	ldr	r3, [pc, #40]	; (356c <system_gclk_gen_get_hz+0x70>)
    3544:	689c      	ldr	r4, [r3, #8]
    3546:	0224      	lsls	r4, r4, #8
    3548:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    354a:	4b0d      	ldr	r3, [pc, #52]	; (3580 <system_gclk_gen_get_hz+0x84>)
    354c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    354e:	2e00      	cmp	r6, #0
    3550:	d107      	bne.n	3562 <system_gclk_gen_get_hz+0x66>
    3552:	2c01      	cmp	r4, #1
    3554:	d907      	bls.n	3566 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3556:	0021      	movs	r1, r4
    3558:	0028      	movs	r0, r5
    355a:	4b0a      	ldr	r3, [pc, #40]	; (3584 <system_gclk_gen_get_hz+0x88>)
    355c:	4798      	blx	r3
    355e:	0005      	movs	r5, r0
    3560:	e001      	b.n	3566 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    3562:	3401      	adds	r4, #1
    3564:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3566:	0028      	movs	r0, r5
    3568:	bd70      	pop	{r4, r5, r6, pc}
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	40000c00 	.word	0x40000c00
    3570:	00001fa9 	.word	0x00001fa9
    3574:	40000c04 	.word	0x40000c04
    3578:	00002fd1 	.word	0x00002fd1
    357c:	40000c08 	.word	0x40000c08
    3580:	00001fe9 	.word	0x00001fe9
    3584:	00004fe1 	.word	0x00004fe1

00003588 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3588:	b510      	push	{r4, lr}
    358a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    358c:	4b06      	ldr	r3, [pc, #24]	; (35a8 <system_gclk_chan_enable+0x20>)
    358e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3590:	4b06      	ldr	r3, [pc, #24]	; (35ac <system_gclk_chan_enable+0x24>)
    3592:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3594:	4a06      	ldr	r2, [pc, #24]	; (35b0 <system_gclk_chan_enable+0x28>)
    3596:	8853      	ldrh	r3, [r2, #2]
    3598:	2180      	movs	r1, #128	; 0x80
    359a:	01c9      	lsls	r1, r1, #7
    359c:	430b      	orrs	r3, r1
    359e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    35a0:	4b04      	ldr	r3, [pc, #16]	; (35b4 <system_gclk_chan_enable+0x2c>)
    35a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    35a4:	bd10      	pop	{r4, pc}
    35a6:	46c0      	nop			; (mov r8, r8)
    35a8:	00001fa9 	.word	0x00001fa9
    35ac:	40000c02 	.word	0x40000c02
    35b0:	40000c00 	.word	0x40000c00
    35b4:	00001fe9 	.word	0x00001fe9

000035b8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    35b8:	b510      	push	{r4, lr}
    35ba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    35bc:	4b0f      	ldr	r3, [pc, #60]	; (35fc <system_gclk_chan_disable+0x44>)
    35be:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    35c0:	4b0f      	ldr	r3, [pc, #60]	; (3600 <system_gclk_chan_disable+0x48>)
    35c2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    35c4:	4a0f      	ldr	r2, [pc, #60]	; (3604 <system_gclk_chan_disable+0x4c>)
    35c6:	8853      	ldrh	r3, [r2, #2]
    35c8:	051b      	lsls	r3, r3, #20
    35ca:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    35cc:	8853      	ldrh	r3, [r2, #2]
    35ce:	490e      	ldr	r1, [pc, #56]	; (3608 <system_gclk_chan_disable+0x50>)
    35d0:	400b      	ands	r3, r1
    35d2:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    35d4:	8853      	ldrh	r3, [r2, #2]
    35d6:	490d      	ldr	r1, [pc, #52]	; (360c <system_gclk_chan_disable+0x54>)
    35d8:	400b      	ands	r3, r1
    35da:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    35dc:	0011      	movs	r1, r2
    35de:	2280      	movs	r2, #128	; 0x80
    35e0:	01d2      	lsls	r2, r2, #7
    35e2:	884b      	ldrh	r3, [r1, #2]
    35e4:	4213      	tst	r3, r2
    35e6:	d1fc      	bne.n	35e2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    35e8:	4906      	ldr	r1, [pc, #24]	; (3604 <system_gclk_chan_disable+0x4c>)
    35ea:	884a      	ldrh	r2, [r1, #2]
    35ec:	0203      	lsls	r3, r0, #8
    35ee:	4806      	ldr	r0, [pc, #24]	; (3608 <system_gclk_chan_disable+0x50>)
    35f0:	4002      	ands	r2, r0
    35f2:	4313      	orrs	r3, r2
    35f4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    35f6:	4b06      	ldr	r3, [pc, #24]	; (3610 <system_gclk_chan_disable+0x58>)
    35f8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    35fa:	bd10      	pop	{r4, pc}
    35fc:	00001fa9 	.word	0x00001fa9
    3600:	40000c02 	.word	0x40000c02
    3604:	40000c00 	.word	0x40000c00
    3608:	fffff0ff 	.word	0xfffff0ff
    360c:	ffffbfff 	.word	0xffffbfff
    3610:	00001fe9 	.word	0x00001fe9

00003614 <system_gclk_chan_set_config>:
{
    3614:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3616:	780c      	ldrb	r4, [r1, #0]
    3618:	0224      	lsls	r4, r4, #8
    361a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    361c:	4b02      	ldr	r3, [pc, #8]	; (3628 <system_gclk_chan_set_config+0x14>)
    361e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3620:	b2a4      	uxth	r4, r4
    3622:	4b02      	ldr	r3, [pc, #8]	; (362c <system_gclk_chan_set_config+0x18>)
    3624:	805c      	strh	r4, [r3, #2]
}
    3626:	bd10      	pop	{r4, pc}
    3628:	000035b9 	.word	0x000035b9
    362c:	40000c00 	.word	0x40000c00

00003630 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3630:	b510      	push	{r4, lr}
    3632:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3634:	4b06      	ldr	r3, [pc, #24]	; (3650 <system_gclk_chan_get_hz+0x20>)
    3636:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3638:	4b06      	ldr	r3, [pc, #24]	; (3654 <system_gclk_chan_get_hz+0x24>)
    363a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    363c:	4b06      	ldr	r3, [pc, #24]	; (3658 <system_gclk_chan_get_hz+0x28>)
    363e:	885c      	ldrh	r4, [r3, #2]
    3640:	0524      	lsls	r4, r4, #20
    3642:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3644:	4b05      	ldr	r3, [pc, #20]	; (365c <system_gclk_chan_get_hz+0x2c>)
    3646:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3648:	0020      	movs	r0, r4
    364a:	4b05      	ldr	r3, [pc, #20]	; (3660 <system_gclk_chan_get_hz+0x30>)
    364c:	4798      	blx	r3
}
    364e:	bd10      	pop	{r4, pc}
    3650:	00001fa9 	.word	0x00001fa9
    3654:	40000c02 	.word	0x40000c02
    3658:	40000c00 	.word	0x40000c00
    365c:	00001fe9 	.word	0x00001fe9
    3660:	000034fd 	.word	0x000034fd

00003664 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3664:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3666:	78d3      	ldrb	r3, [r2, #3]
    3668:	2b00      	cmp	r3, #0
    366a:	d135      	bne.n	36d8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    366c:	7813      	ldrb	r3, [r2, #0]
    366e:	2b80      	cmp	r3, #128	; 0x80
    3670:	d029      	beq.n	36c6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3672:	061b      	lsls	r3, r3, #24
    3674:	2480      	movs	r4, #128	; 0x80
    3676:	0264      	lsls	r4, r4, #9
    3678:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    367a:	7854      	ldrb	r4, [r2, #1]
    367c:	2502      	movs	r5, #2
    367e:	43ac      	bics	r4, r5
    3680:	d106      	bne.n	3690 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3682:	7894      	ldrb	r4, [r2, #2]
    3684:	2c00      	cmp	r4, #0
    3686:	d120      	bne.n	36ca <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3688:	2480      	movs	r4, #128	; 0x80
    368a:	02a4      	lsls	r4, r4, #10
    368c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    368e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3690:	7854      	ldrb	r4, [r2, #1]
    3692:	3c01      	subs	r4, #1
    3694:	2c01      	cmp	r4, #1
    3696:	d91c      	bls.n	36d2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3698:	040d      	lsls	r5, r1, #16
    369a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    369c:	24a0      	movs	r4, #160	; 0xa0
    369e:	05e4      	lsls	r4, r4, #23
    36a0:	432c      	orrs	r4, r5
    36a2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    36a4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    36a6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    36a8:	24d0      	movs	r4, #208	; 0xd0
    36aa:	0624      	lsls	r4, r4, #24
    36ac:	432c      	orrs	r4, r5
    36ae:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    36b0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    36b2:	78d4      	ldrb	r4, [r2, #3]
    36b4:	2c00      	cmp	r4, #0
    36b6:	d122      	bne.n	36fe <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    36b8:	035b      	lsls	r3, r3, #13
    36ba:	d51c      	bpl.n	36f6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    36bc:	7893      	ldrb	r3, [r2, #2]
    36be:	2b01      	cmp	r3, #1
    36c0:	d01e      	beq.n	3700 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    36c2:	6141      	str	r1, [r0, #20]
    36c4:	e017      	b.n	36f6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    36c6:	2300      	movs	r3, #0
    36c8:	e7d7      	b.n	367a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    36ca:	24c0      	movs	r4, #192	; 0xc0
    36cc:	02e4      	lsls	r4, r4, #11
    36ce:	4323      	orrs	r3, r4
    36d0:	e7dd      	b.n	368e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    36d2:	4c0d      	ldr	r4, [pc, #52]	; (3708 <_system_pinmux_config+0xa4>)
    36d4:	4023      	ands	r3, r4
    36d6:	e7df      	b.n	3698 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    36d8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    36da:	040c      	lsls	r4, r1, #16
    36dc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    36de:	23a0      	movs	r3, #160	; 0xa0
    36e0:	05db      	lsls	r3, r3, #23
    36e2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    36e4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    36e6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    36e8:	23d0      	movs	r3, #208	; 0xd0
    36ea:	061b      	lsls	r3, r3, #24
    36ec:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    36ee:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    36f0:	78d3      	ldrb	r3, [r2, #3]
    36f2:	2b00      	cmp	r3, #0
    36f4:	d103      	bne.n	36fe <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    36f6:	7853      	ldrb	r3, [r2, #1]
    36f8:	3b01      	subs	r3, #1
    36fa:	2b01      	cmp	r3, #1
    36fc:	d902      	bls.n	3704 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    36fe:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    3700:	6181      	str	r1, [r0, #24]
    3702:	e7f8      	b.n	36f6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    3704:	6081      	str	r1, [r0, #8]
}
    3706:	e7fa      	b.n	36fe <_system_pinmux_config+0x9a>
    3708:	fffbffff 	.word	0xfffbffff

0000370c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    370c:	b510      	push	{r4, lr}
    370e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    3710:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    3712:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3714:	2900      	cmp	r1, #0
    3716:	d104      	bne.n	3722 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3718:	0943      	lsrs	r3, r0, #5
    371a:	01db      	lsls	r3, r3, #7
    371c:	4905      	ldr	r1, [pc, #20]	; (3734 <system_pinmux_pin_set_config+0x28>)
    371e:	468c      	mov	ip, r1
    3720:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3722:	241f      	movs	r4, #31
    3724:	4020      	ands	r0, r4
    3726:	2101      	movs	r1, #1
    3728:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    372a:	0018      	movs	r0, r3
    372c:	4b02      	ldr	r3, [pc, #8]	; (3738 <system_pinmux_pin_set_config+0x2c>)
    372e:	4798      	blx	r3
}
    3730:	bd10      	pop	{r4, pc}
    3732:	46c0      	nop			; (mov r8, r8)
    3734:	41004400 	.word	0x41004400
    3738:	00003665 	.word	0x00003665

0000373c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    373c:	4770      	bx	lr
	...

00003740 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3740:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3742:	4b05      	ldr	r3, [pc, #20]	; (3758 <system_init+0x18>)
    3744:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3746:	4b05      	ldr	r3, [pc, #20]	; (375c <system_init+0x1c>)
    3748:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    374a:	4b05      	ldr	r3, [pc, #20]	; (3760 <system_init+0x20>)
    374c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    374e:	4b05      	ldr	r3, [pc, #20]	; (3764 <system_init+0x24>)
    3750:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3752:	4b05      	ldr	r3, [pc, #20]	; (3768 <system_init+0x28>)
    3754:	4798      	blx	r3
}
    3756:	bd10      	pop	{r4, pc}
    3758:	00003281 	.word	0x00003281
    375c:	00002019 	.word	0x00002019
    3760:	0000373d 	.word	0x0000373d
    3764:	0000373d 	.word	0x0000373d
    3768:	0000373d 	.word	0x0000373d

0000376c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    376c:	e7fe      	b.n	376c <Dummy_Handler>
	...

00003770 <Reset_Handler>:
{
    3770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    3772:	4a2a      	ldr	r2, [pc, #168]	; (381c <Reset_Handler+0xac>)
    3774:	4b2a      	ldr	r3, [pc, #168]	; (3820 <Reset_Handler+0xb0>)
    3776:	429a      	cmp	r2, r3
    3778:	d011      	beq.n	379e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    377a:	001a      	movs	r2, r3
    377c:	4b29      	ldr	r3, [pc, #164]	; (3824 <Reset_Handler+0xb4>)
    377e:	429a      	cmp	r2, r3
    3780:	d20d      	bcs.n	379e <Reset_Handler+0x2e>
    3782:	4a29      	ldr	r2, [pc, #164]	; (3828 <Reset_Handler+0xb8>)
    3784:	3303      	adds	r3, #3
    3786:	1a9b      	subs	r3, r3, r2
    3788:	089b      	lsrs	r3, r3, #2
    378a:	3301      	adds	r3, #1
    378c:	009b      	lsls	r3, r3, #2
    378e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3790:	4823      	ldr	r0, [pc, #140]	; (3820 <Reset_Handler+0xb0>)
    3792:	4922      	ldr	r1, [pc, #136]	; (381c <Reset_Handler+0xac>)
    3794:	588c      	ldr	r4, [r1, r2]
    3796:	5084      	str	r4, [r0, r2]
    3798:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    379a:	429a      	cmp	r2, r3
    379c:	d1fa      	bne.n	3794 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    379e:	4a23      	ldr	r2, [pc, #140]	; (382c <Reset_Handler+0xbc>)
    37a0:	4b23      	ldr	r3, [pc, #140]	; (3830 <Reset_Handler+0xc0>)
    37a2:	429a      	cmp	r2, r3
    37a4:	d20a      	bcs.n	37bc <Reset_Handler+0x4c>
    37a6:	43d3      	mvns	r3, r2
    37a8:	4921      	ldr	r1, [pc, #132]	; (3830 <Reset_Handler+0xc0>)
    37aa:	185b      	adds	r3, r3, r1
    37ac:	2103      	movs	r1, #3
    37ae:	438b      	bics	r3, r1
    37b0:	3304      	adds	r3, #4
    37b2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    37b4:	2100      	movs	r1, #0
    37b6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    37b8:	4293      	cmp	r3, r2
    37ba:	d1fc      	bne.n	37b6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    37bc:	4a1d      	ldr	r2, [pc, #116]	; (3834 <Reset_Handler+0xc4>)
    37be:	21ff      	movs	r1, #255	; 0xff
    37c0:	4b1d      	ldr	r3, [pc, #116]	; (3838 <Reset_Handler+0xc8>)
    37c2:	438b      	bics	r3, r1
    37c4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    37c6:	39fd      	subs	r1, #253	; 0xfd
    37c8:	2390      	movs	r3, #144	; 0x90
    37ca:	005b      	lsls	r3, r3, #1
    37cc:	4a1b      	ldr	r2, [pc, #108]	; (383c <Reset_Handler+0xcc>)
    37ce:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    37d0:	4a1b      	ldr	r2, [pc, #108]	; (3840 <Reset_Handler+0xd0>)
    37d2:	78d3      	ldrb	r3, [r2, #3]
    37d4:	2503      	movs	r5, #3
    37d6:	43ab      	bics	r3, r5
    37d8:	2402      	movs	r4, #2
    37da:	4323      	orrs	r3, r4
    37dc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    37de:	78d3      	ldrb	r3, [r2, #3]
    37e0:	270c      	movs	r7, #12
    37e2:	43bb      	bics	r3, r7
    37e4:	2608      	movs	r6, #8
    37e6:	4333      	orrs	r3, r6
    37e8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    37ea:	4b16      	ldr	r3, [pc, #88]	; (3844 <Reset_Handler+0xd4>)
    37ec:	7b98      	ldrb	r0, [r3, #14]
    37ee:	2230      	movs	r2, #48	; 0x30
    37f0:	4390      	bics	r0, r2
    37f2:	2220      	movs	r2, #32
    37f4:	4310      	orrs	r0, r2
    37f6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    37f8:	7b99      	ldrb	r1, [r3, #14]
    37fa:	43b9      	bics	r1, r7
    37fc:	4331      	orrs	r1, r6
    37fe:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3800:	7b9a      	ldrb	r2, [r3, #14]
    3802:	43aa      	bics	r2, r5
    3804:	4322      	orrs	r2, r4
    3806:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    3808:	4a0f      	ldr	r2, [pc, #60]	; (3848 <Reset_Handler+0xd8>)
    380a:	6853      	ldr	r3, [r2, #4]
    380c:	2180      	movs	r1, #128	; 0x80
    380e:	430b      	orrs	r3, r1
    3810:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3812:	4b0e      	ldr	r3, [pc, #56]	; (384c <Reset_Handler+0xdc>)
    3814:	4798      	blx	r3
        main();
    3816:	4b0e      	ldr	r3, [pc, #56]	; (3850 <Reset_Handler+0xe0>)
    3818:	4798      	blx	r3
    381a:	e7fe      	b.n	381a <Reset_Handler+0xaa>
    381c:	00008d1c 	.word	0x00008d1c
    3820:	20000000 	.word	0x20000000
    3824:	20000210 	.word	0x20000210
    3828:	20000004 	.word	0x20000004
    382c:	20000400 	.word	0x20000400
    3830:	20003828 	.word	0x20003828
    3834:	e000ed00 	.word	0xe000ed00
    3838:	00000000 	.word	0x00000000
    383c:	41007000 	.word	0x41007000
    3840:	41005000 	.word	0x41005000
    3844:	41004800 	.word	0x41004800
    3848:	41004000 	.word	0x41004000
    384c:	00005321 	.word	0x00005321
    3850:	00004f25 	.word	0x00004f25

00003854 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3854:	b5f0      	push	{r4, r5, r6, r7, lr}
    3856:	46c6      	mov	lr, r8
    3858:	b500      	push	{lr}
    385a:	000c      	movs	r4, r1
    385c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    385e:	2800      	cmp	r0, #0
    3860:	d10f      	bne.n	3882 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    3862:	2a00      	cmp	r2, #0
    3864:	dd11      	ble.n	388a <_read+0x36>
    3866:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    3868:	4e09      	ldr	r6, [pc, #36]	; (3890 <_read+0x3c>)
    386a:	4d0a      	ldr	r5, [pc, #40]	; (3894 <_read+0x40>)
    386c:	6830      	ldr	r0, [r6, #0]
    386e:	0021      	movs	r1, r4
    3870:	682b      	ldr	r3, [r5, #0]
    3872:	4798      	blx	r3
		ptr++;
    3874:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    3876:	42bc      	cmp	r4, r7
    3878:	d1f8      	bne.n	386c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    387a:	4640      	mov	r0, r8
    387c:	bc04      	pop	{r2}
    387e:	4690      	mov	r8, r2
    3880:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    3882:	2301      	movs	r3, #1
    3884:	425b      	negs	r3, r3
    3886:	4698      	mov	r8, r3
    3888:	e7f7      	b.n	387a <_read+0x26>
	for (; len > 0; --len) {
    388a:	4680      	mov	r8, r0
    388c:	e7f5      	b.n	387a <_read+0x26>
    388e:	46c0      	nop			; (mov r8, r8)
    3890:	200005b0 	.word	0x200005b0
    3894:	200005a8 	.word	0x200005a8

00003898 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3898:	b5f0      	push	{r4, r5, r6, r7, lr}
    389a:	46c6      	mov	lr, r8
    389c:	b500      	push	{lr}
    389e:	000e      	movs	r6, r1
    38a0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    38a2:	3801      	subs	r0, #1
    38a4:	2802      	cmp	r0, #2
    38a6:	d810      	bhi.n	38ca <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    38a8:	2a00      	cmp	r2, #0
    38aa:	d011      	beq.n	38d0 <_write+0x38>
    38ac:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    38ae:	4b0c      	ldr	r3, [pc, #48]	; (38e0 <_write+0x48>)
    38b0:	4698      	mov	r8, r3
    38b2:	4f0c      	ldr	r7, [pc, #48]	; (38e4 <_write+0x4c>)
    38b4:	4643      	mov	r3, r8
    38b6:	6818      	ldr	r0, [r3, #0]
    38b8:	5d31      	ldrb	r1, [r6, r4]
    38ba:	683b      	ldr	r3, [r7, #0]
    38bc:	4798      	blx	r3
    38be:	2800      	cmp	r0, #0
    38c0:	db08      	blt.n	38d4 <_write+0x3c>
			return -1;
		}
		++nChars;
    38c2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    38c4:	42a5      	cmp	r5, r4
    38c6:	d1f5      	bne.n	38b4 <_write+0x1c>
    38c8:	e006      	b.n	38d8 <_write+0x40>
		return -1;
    38ca:	2401      	movs	r4, #1
    38cc:	4264      	negs	r4, r4
    38ce:	e003      	b.n	38d8 <_write+0x40>
	for (; len != 0; --len) {
    38d0:	0014      	movs	r4, r2
    38d2:	e001      	b.n	38d8 <_write+0x40>
			return -1;
    38d4:	2401      	movs	r4, #1
    38d6:	4264      	negs	r4, r4
	}
	return nChars;
}
    38d8:	0020      	movs	r0, r4
    38da:	bc04      	pop	{r2}
    38dc:	4690      	mov	r8, r2
    38de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38e0:	200005b0 	.word	0x200005b0
    38e4:	200005ac 	.word	0x200005ac

000038e8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    38e8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    38ea:	4a06      	ldr	r2, [pc, #24]	; (3904 <_sbrk+0x1c>)
    38ec:	6812      	ldr	r2, [r2, #0]
    38ee:	2a00      	cmp	r2, #0
    38f0:	d004      	beq.n	38fc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    38f2:	4a04      	ldr	r2, [pc, #16]	; (3904 <_sbrk+0x1c>)
    38f4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    38f6:	18c3      	adds	r3, r0, r3
    38f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    38fa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    38fc:	4902      	ldr	r1, [pc, #8]	; (3908 <_sbrk+0x20>)
    38fe:	4a01      	ldr	r2, [pc, #4]	; (3904 <_sbrk+0x1c>)
    3900:	6011      	str	r1, [r2, #0]
    3902:	e7f6      	b.n	38f2 <_sbrk+0xa>
    3904:	200004dc 	.word	0x200004dc
    3908:	20005828 	.word	0x20005828

0000390c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    390c:	2001      	movs	r0, #1
    390e:	4240      	negs	r0, r0
    3910:	4770      	bx	lr

00003912 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3912:	2380      	movs	r3, #128	; 0x80
    3914:	019b      	lsls	r3, r3, #6
    3916:	604b      	str	r3, [r1, #4]

	return 0;
}
    3918:	2000      	movs	r0, #0
    391a:	4770      	bx	lr

0000391c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    391c:	2001      	movs	r0, #1
    391e:	4770      	bx	lr

00003920 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3920:	2000      	movs	r0, #0
    3922:	4770      	bx	lr

00003924 <drawChar>:
originModeState originMode = ABSOLUTE;



void drawChar(uint8_t character)
{
    3924:	b5f0      	push	{r4, r5, r6, r7, lr}
    3926:	46d6      	mov	lr, sl
    3928:	464f      	mov	r7, r9
    392a:	b580      	push	{r7, lr}
    392c:	b0e7      	sub	sp, #412	; 0x19c
    392e:	0006      	movs	r6, r0

	uint16_t x = xCharPos;
    3930:	4b64      	ldr	r3, [pc, #400]	; (3ac4 <drawChar+0x1a0>)
    3932:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    3934:	4a64      	ldr	r2, [pc, #400]	; (3ac8 <drawChar+0x1a4>)
    3936:	8817      	ldrh	r7, [r2, #0]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
	
	uint32_t tempColor = consoleColors[x][y];
    3938:	0059      	lsls	r1, r3, #1
    393a:	18ca      	adds	r2, r1, r3
    393c:	00d2      	lsls	r2, r2, #3
    393e:	19d2      	adds	r2, r2, r7
    3940:	0092      	lsls	r2, r2, #2
    3942:	4862      	ldr	r0, [pc, #392]	; (3acc <drawChar+0x1a8>)
    3944:	5814      	ldr	r4, [r2, r0]
	
	tempForeground = (tempColor >> 16);
    3946:	0c22      	lsrs	r2, r4, #16
    3948:	9200      	str	r2, [sp, #0]
	tempBackground = consoleColors[x][y] & 0xFFFF;
    394a:	b2a2      	uxth	r2, r4
    394c:	9201      	str	r2, [sp, #4]
	
	
	consoleDisplay[x][y] = character;
    394e:	18c9      	adds	r1, r1, r3
    3950:	00c9      	lsls	r1, r1, #3
    3952:	4a5f      	ldr	r2, [pc, #380]	; (3ad0 <drawChar+0x1ac>)
    3954:	1851      	adds	r1, r2, r1
    3956:	55ce      	strb	r6, [r1, r7]
	
	uint8_t displayFont[10][20];
	uint8_t tempFontStorage[200];
	uint8_t k = 0;
	
	REG_PORT_OUTCLR1 = LCD_CS;
    3958:	2180      	movs	r1, #128	; 0x80
    395a:	03c9      	lsls	r1, r1, #15
    395c:	4a5d      	ldr	r2, [pc, #372]	; (3ad4 <drawChar+0x1b0>)
    395e:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    3960:	0098      	lsls	r0, r3, #2
    3962:	181b      	adds	r3, r3, r0
    3964:	005b      	lsls	r3, r3, #1
    3966:	b298      	uxth	r0, r3
    3968:	2114      	movs	r1, #20
    396a:	4379      	muls	r1, r7
    396c:	b289      	uxth	r1, r1
    396e:	000b      	movs	r3, r1
    3970:	3313      	adds	r3, #19
    3972:	b29b      	uxth	r3, r3
    3974:	0002      	movs	r2, r0
    3976:	3209      	adds	r2, #9
    3978:	b292      	uxth	r2, r2
    397a:	4f57      	ldr	r7, [pc, #348]	; (3ad8 <drawChar+0x1b4>)
    397c:	47b8      	blx	r7
    397e:	00b3      	lsls	r3, r6, #2
    3980:	199e      	adds	r6, r3, r6
    3982:	00b3      	lsls	r3, r6, #2
    3984:	18f6      	adds	r6, r6, r3
    3986:	4b55      	ldr	r3, [pc, #340]	; (3adc <drawChar+0x1b8>)
    3988:	4699      	mov	r9, r3
    398a:	44b1      	add	r9, r6
	uint8_t k = 0;
    398c:	2700      	movs	r7, #0
	//first transmute it into tempFontStorage
	for(uint16_t i=0; i <= 24; i++)
	{
		for(int j=0;j<8;j++)
		{
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    398e:	2601      	movs	r6, #1
			{
				tempFontStorage[k] = 0xFF;
			}
			else
			{
				tempFontStorage[k] = 0x00;
    3990:	2500      	movs	r5, #0
				tempFontStorage[k] = 0xFF;
    3992:	24ff      	movs	r4, #255	; 0xff
    3994:	e013      	b.n	39be <drawChar+0x9a>
				tempFontStorage[k] = 0x00;
    3996:	a902      	add	r1, sp, #8
    3998:	54cd      	strb	r5, [r1, r3]
			}
			k++;
    399a:	3301      	adds	r3, #1
    399c:	b2db      	uxtb	r3, r3
		for(int j=0;j<8;j++)
    399e:	3a01      	subs	r2, #1
    39a0:	d306      	bcc.n	39b0 <drawChar+0x8c>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    39a2:	0001      	movs	r1, r0
    39a4:	4111      	asrs	r1, r2
    39a6:	420e      	tst	r6, r1
    39a8:	d0f5      	beq.n	3996 <drawChar+0x72>
				tempFontStorage[k] = 0xFF;
    39aa:	a902      	add	r1, sp, #8
    39ac:	54cc      	strb	r4, [r1, r3]
    39ae:	e7f4      	b.n	399a <drawChar+0x76>
    39b0:	3708      	adds	r7, #8
    39b2:	b2ff      	uxtb	r7, r7
    39b4:	2301      	movs	r3, #1
    39b6:	469c      	mov	ip, r3
    39b8:	44e1      	add	r9, ip
	for(uint16_t i=0; i <= 24; i++)
    39ba:	2fc8      	cmp	r7, #200	; 0xc8
    39bc:	d004      	beq.n	39c8 <drawChar+0xa4>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    39be:	464b      	mov	r3, r9
    39c0:	7818      	ldrb	r0, [r3, #0]
    39c2:	003b      	movs	r3, r7
    39c4:	2207      	movs	r2, #7
    39c6:	e7ec      	b.n	39a2 <drawChar+0x7e>
    39c8:	af39      	add	r7, sp, #228	; 0xe4
	for(uint16_t i=0; i <= 24; i++)
    39ca:	0038      	movs	r0, r7
    39cc:	2500      	movs	r5, #0
			{
				displayFont[i][j] = 0xFF;	
			}
			else
			{
				displayFont[i][j] = 0x00;
    39ce:	2600      	movs	r6, #0
				displayFont[i][j] = 0xFF;	
    39d0:	24ff      	movs	r4, #255	; 0xff
    39d2:	e010      	b.n	39f6 <drawChar+0xd2>
    39d4:	7014      	strb	r4, [r2, #0]
			}
			k++;
    39d6:	3301      	adds	r3, #1
    39d8:	b2db      	uxtb	r3, r3
    39da:	3201      	adds	r2, #1
		for(uint8_t j = 0; j <= 19 ; j++)
    39dc:	4282      	cmp	r2, r0
    39de:	d005      	beq.n	39ec <drawChar+0xc8>
			if(tempFontStorage[k] == 0xFF)
    39e0:	a902      	add	r1, sp, #8
    39e2:	5cc9      	ldrb	r1, [r1, r3]
    39e4:	29ff      	cmp	r1, #255	; 0xff
    39e6:	d0f5      	beq.n	39d4 <drawChar+0xb0>
				displayFont[i][j] = 0x00;
    39e8:	7016      	strb	r6, [r2, #0]
    39ea:	e7f4      	b.n	39d6 <drawChar+0xb2>
    39ec:	3514      	adds	r5, #20
    39ee:	b2ed      	uxtb	r5, r5
    39f0:	3014      	adds	r0, #20
	for(uint8_t i = 0; i <= 9 ; i++)
    39f2:	2dc8      	cmp	r5, #200	; 0xc8
    39f4:	d003      	beq.n	39fe <drawChar+0xda>
    39f6:	0002      	movs	r2, r0
    39f8:	3a14      	subs	r2, #20
	uint8_t k = 0;
    39fa:	002b      	movs	r3, r5
    39fc:	e7f0      	b.n	39e0 <drawChar+0xbc>
		}
	}
	
	//process displayFont if it is bold, first bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],1) == 1)
    39fe:	4b31      	ldr	r3, [pc, #196]	; (3ac4 <drawChar+0x1a0>)
    3a00:	881a      	ldrh	r2, [r3, #0]
    3a02:	4b31      	ldr	r3, [pc, #196]	; (3ac8 <drawChar+0x1a4>)
    3a04:	8819      	ldrh	r1, [r3, #0]
    3a06:	0053      	lsls	r3, r2, #1
    3a08:	189b      	adds	r3, r3, r2
    3a0a:	00db      	lsls	r3, r3, #3
    3a0c:	4a34      	ldr	r2, [pc, #208]	; (3ae0 <drawChar+0x1bc>)
    3a0e:	18d3      	adds	r3, r2, r3
    3a10:	5c5e      	ldrb	r6, [r3, r1]
    3a12:	07b3      	lsls	r3, r6, #30
    3a14:	d511      	bpl.n	3a3a <drawChar+0x116>
    3a16:	a961      	add	r1, sp, #388	; 0x184
    3a18:	ac34      	add	r4, sp, #208	; 0xd0
		{
			for(uint8_t j = 0; j <= 19 ; j++)
			{
				if(displayFont[i-1][j] == 0xFF)
				{
					displayFont[i][j] = 0xFF;
    3a1a:	20ff      	movs	r0, #255	; 0xff
    3a1c:	e00a      	b.n	3a34 <drawChar+0x110>
    3a1e:	7518      	strb	r0, [r3, #20]
    3a20:	3301      	adds	r3, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    3a22:	428b      	cmp	r3, r1
    3a24:	d003      	beq.n	3a2e <drawChar+0x10a>
				if(displayFont[i-1][j] == 0xFF)
    3a26:	781a      	ldrb	r2, [r3, #0]
    3a28:	2aff      	cmp	r2, #255	; 0xff
    3a2a:	d1f9      	bne.n	3a20 <drawChar+0xfc>
    3a2c:	e7f7      	b.n	3a1e <drawChar+0xfa>
    3a2e:	3914      	subs	r1, #20
		for(uint8_t i = 9; i >= 1 ; i--)
    3a30:	42a1      	cmp	r1, r4
    3a32:	d002      	beq.n	3a3a <drawChar+0x116>
    3a34:	000b      	movs	r3, r1
    3a36:	3b14      	subs	r3, #20
    3a38:	e7f5      	b.n	3a26 <drawChar+0x102>
			}
		}
	}
	
	//process displayfont if underscore, fourth bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],4) == 1)
    3a3a:	06f3      	lsls	r3, r6, #27
    3a3c:	d50a      	bpl.n	3a54 <drawChar+0x130>
    3a3e:	ab61      	add	r3, sp, #388	; 0x184
    3a40:	21c3      	movs	r1, #195	; 0xc3
    3a42:	0049      	lsls	r1, r1, #1
    3a44:	aa02      	add	r2, sp, #8
    3a46:	4694      	mov	ip, r2
    3a48:	4461      	add	r1, ip
	{
		for(int i = 0 ; i <= 9 ; i++)
		{
			displayFont[9][i] = 0xFF;
    3a4a:	22ff      	movs	r2, #255	; 0xff
    3a4c:	701a      	strb	r2, [r3, #0]
    3a4e:	3301      	adds	r3, #1
		for(int i = 0 ; i <= 9 ; i++)
    3a50:	428b      	cmp	r3, r1
    3a52:	d1fb      	bne.n	3a4c <drawChar+0x128>
		}
	}
	
	//Process inverse video, compare 7th bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],7) == 0)
    3a54:	09f6      	lsrs	r6, r6, #7
    3a56:	d004      	beq.n	3a62 <drawChar+0x13e>
    3a58:	ab6b      	add	r3, sp, #428	; 0x1ac
    3a5a:	469a      	mov	sl, r3
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
    3a5c:	4d21      	ldr	r5, [pc, #132]	; (3ae4 <drawChar+0x1c0>)
					setPixel(tempForeground);
    3a5e:	002c      	movs	r4, r5
    3a60:	e023      	b.n	3aaa <drawChar+0x186>
    3a62:	ab6b      	add	r3, sp, #428	; 0x1ac
    3a64:	469a      	mov	sl, r3
					setPixel(tempBackground);
    3a66:	4c1f      	ldr	r4, [pc, #124]	; (3ae4 <drawChar+0x1c0>)
					setPixel(tempForeground);
    3a68:	0025      	movs	r5, r4
    3a6a:	e00d      	b.n	3a88 <drawChar+0x164>
    3a6c:	9800      	ldr	r0, [sp, #0]
    3a6e:	47a8      	blx	r5
    3a70:	3601      	adds	r6, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    3a72:	42b7      	cmp	r7, r6
    3a74:	d005      	beq.n	3a82 <drawChar+0x15e>
				if(displayFont[i][j] == 0xFF)
    3a76:	7833      	ldrb	r3, [r6, #0]
    3a78:	2bff      	cmp	r3, #255	; 0xff
    3a7a:	d0f7      	beq.n	3a6c <drawChar+0x148>
					setPixel(tempBackground);
    3a7c:	9801      	ldr	r0, [sp, #4]
    3a7e:	47a0      	blx	r4
    3a80:	e7f6      	b.n	3a70 <drawChar+0x14c>
    3a82:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    3a84:	45ba      	cmp	sl, r7
    3a86:	d013      	beq.n	3ab0 <drawChar+0x18c>
    3a88:	003e      	movs	r6, r7
    3a8a:	3e14      	subs	r6, #20
    3a8c:	e7f3      	b.n	3a76 <drawChar+0x152>
					setPixel(tempBackground);
    3a8e:	9801      	ldr	r0, [sp, #4]
    3a90:	47a8      	blx	r5
    3a92:	3601      	adds	r6, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    3a94:	42b7      	cmp	r7, r6
    3a96:	d005      	beq.n	3aa4 <drawChar+0x180>
				if(displayFont[i][j] != 0xFF)
    3a98:	7833      	ldrb	r3, [r6, #0]
    3a9a:	2bff      	cmp	r3, #255	; 0xff
    3a9c:	d0f7      	beq.n	3a8e <drawChar+0x16a>
					setPixel(tempForeground);
    3a9e:	9800      	ldr	r0, [sp, #0]
    3aa0:	47a0      	blx	r4
    3aa2:	e7f6      	b.n	3a92 <drawChar+0x16e>
    3aa4:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    3aa6:	4557      	cmp	r7, sl
    3aa8:	d002      	beq.n	3ab0 <drawChar+0x18c>
    3aaa:	003e      	movs	r6, r7
    3aac:	3e14      	subs	r6, #20
    3aae:	e7f3      	b.n	3a98 <drawChar+0x174>
				}
			}
		}		
	}
	
	REG_PORT_OUTSET1 = LCD_CS;
    3ab0:	2280      	movs	r2, #128	; 0x80
    3ab2:	03d2      	lsls	r2, r2, #15
    3ab4:	4b0c      	ldr	r3, [pc, #48]	; (3ae8 <drawChar+0x1c4>)
    3ab6:	601a      	str	r2, [r3, #0]
}
    3ab8:	b067      	add	sp, #412	; 0x19c
    3aba:	bc0c      	pop	{r2, r3}
    3abc:	4691      	mov	r9, r2
    3abe:	469a      	mov	sl, r3
    3ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ac2:	46c0      	nop			; (mov r8, r8)
    3ac4:	200004e2 	.word	0x200004e2
    3ac8:	200004e4 	.word	0x200004e4
    3acc:	200014ec 	.word	0x200014ec
    3ad0:	200005ec 	.word	0x200005ec
    3ad4:	41004494 	.word	0x41004494
    3ad8:	000046f9 	.word	0x000046f9
    3adc:	00007070 	.word	0x00007070
    3ae0:	20000d6c 	.word	0x20000d6c
    3ae4:	00004831 	.word	0x00004831
    3ae8:	41004498 	.word	0x41004498

00003aec <scrollDown>:

void scrollDown(uint8_t topLine)
{
    3aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aee:	46de      	mov	lr, fp
    3af0:	4657      	mov	r7, sl
    3af2:	464e      	mov	r6, r9
    3af4:	4645      	mov	r5, r8
    3af6:	b5e0      	push	{r5, r6, r7, lr}
    3af8:	b085      	sub	sp, #20
    3afa:	4680      	mov	r8, r0
	char tempCharacter;
		
	uint8_t tempCursorx;
	uint8_t tempCursory;
	
	tempCursorx = xCharPos;
    3afc:	4b62      	ldr	r3, [pc, #392]	; (3c88 <scrollDown+0x19c>)
    3afe:	881b      	ldrh	r3, [r3, #0]
    3b00:	469a      	mov	sl, r3
	tempCursory = yCharPos;
    3b02:	4b62      	ldr	r3, [pc, #392]	; (3c8c <scrollDown+0x1a0>)
    3b04:	881b      	ldrh	r3, [r3, #0]
    3b06:	4699      	mov	r9, r3
	
	if(yCharPos == topMargin)
    3b08:	4b61      	ldr	r3, [pc, #388]	; (3c90 <scrollDown+0x1a4>)
    3b0a:	781b      	ldrb	r3, [r3, #0]
    3b0c:	4599      	cmp	r9, r3
    3b0e:	d00a      	beq.n	3b26 <scrollDown+0x3a>
		yCharPos = tempCursory;
		
	}
	else
	{
		if(yCharPos > 0)
    3b10:	464b      	mov	r3, r9
    3b12:	2b00      	cmp	r3, #0
    3b14:	d000      	beq.n	3b18 <scrollDown+0x2c>
    3b16:	e09f      	b.n	3c58 <scrollDown+0x16c>
			
		}
	}

	
}
    3b18:	b005      	add	sp, #20
    3b1a:	bc3c      	pop	{r2, r3, r4, r5}
    3b1c:	4690      	mov	r8, r2
    3b1e:	4699      	mov	r9, r3
    3b20:	46a2      	mov	sl, r4
    3b22:	46ab      	mov	fp, r5
    3b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(volatile int y = bottomMargin-1 ; y > topLine ; y--)
    3b26:	4b5b      	ldr	r3, [pc, #364]	; (3c94 <scrollDown+0x1a8>)
    3b28:	781b      	ldrb	r3, [r3, #0]
    3b2a:	3b01      	subs	r3, #1
    3b2c:	9301      	str	r3, [sp, #4]
    3b2e:	4683      	mov	fp, r0
    3b30:	9b01      	ldr	r3, [sp, #4]
    3b32:	4298      	cmp	r0, r3
    3b34:	da53      	bge.n	3bde <scrollDown+0xf2>
				consoleDisplay[x][y] = consoleDisplay[x][y-1];				
    3b36:	4c58      	ldr	r4, [pc, #352]	; (3c98 <scrollDown+0x1ac>)
				consoleColors[x][y] = consoleColors[x][y-1];
    3b38:	4e58      	ldr	r6, [pc, #352]	; (3c9c <scrollDown+0x1b0>)
				consoleSGR[x][y] = consoleSGR[x][y-1];
    3b3a:	4d59      	ldr	r5, [pc, #356]	; (3ca0 <scrollDown+0x1b4>)
			for(volatile int x = 0 ; x <= 79 ; x++)
    3b3c:	2300      	movs	r3, #0
    3b3e:	9302      	str	r3, [sp, #8]
    3b40:	9b02      	ldr	r3, [sp, #8]
    3b42:	2b4f      	cmp	r3, #79	; 0x4f
    3b44:	dc45      	bgt.n	3bd2 <scrollDown+0xe6>
				consoleDisplay[x][y] = consoleDisplay[x][y-1];				
    3b46:	9a02      	ldr	r2, [sp, #8]
    3b48:	9901      	ldr	r1, [sp, #4]
    3b4a:	9f02      	ldr	r7, [sp, #8]
    3b4c:	9801      	ldr	r0, [sp, #4]
    3b4e:	007b      	lsls	r3, r7, #1
    3b50:	19db      	adds	r3, r3, r7
    3b52:	00db      	lsls	r3, r3, #3
    3b54:	18e3      	adds	r3, r4, r3
    3b56:	181b      	adds	r3, r3, r0
    3b58:	3b01      	subs	r3, #1
    3b5a:	781b      	ldrb	r3, [r3, #0]
    3b5c:	0050      	lsls	r0, r2, #1
    3b5e:	1882      	adds	r2, r0, r2
    3b60:	00d2      	lsls	r2, r2, #3
    3b62:	18a2      	adds	r2, r4, r2
    3b64:	5453      	strb	r3, [r2, r1]
				consoleColors[x][y] = consoleColors[x][y-1];
    3b66:	9802      	ldr	r0, [sp, #8]
    3b68:	9901      	ldr	r1, [sp, #4]
    3b6a:	9f02      	ldr	r7, [sp, #8]
    3b6c:	9b01      	ldr	r3, [sp, #4]
    3b6e:	007a      	lsls	r2, r7, #1
    3b70:	19d2      	adds	r2, r2, r7
    3b72:	00d2      	lsls	r2, r2, #3
    3b74:	3b01      	subs	r3, #1
    3b76:	18d2      	adds	r2, r2, r3
    3b78:	0092      	lsls	r2, r2, #2
    3b7a:	5992      	ldr	r2, [r2, r6]
    3b7c:	0043      	lsls	r3, r0, #1
    3b7e:	181b      	adds	r3, r3, r0
    3b80:	00db      	lsls	r3, r3, #3
    3b82:	185b      	adds	r3, r3, r1
    3b84:	009b      	lsls	r3, r3, #2
    3b86:	519a      	str	r2, [r3, r6]
				consoleSGR[x][y] = consoleSGR[x][y-1];
    3b88:	9a02      	ldr	r2, [sp, #8]
    3b8a:	9901      	ldr	r1, [sp, #4]
    3b8c:	9f02      	ldr	r7, [sp, #8]
    3b8e:	9801      	ldr	r0, [sp, #4]
    3b90:	007b      	lsls	r3, r7, #1
    3b92:	19db      	adds	r3, r3, r7
    3b94:	00db      	lsls	r3, r3, #3
    3b96:	18eb      	adds	r3, r5, r3
    3b98:	181b      	adds	r3, r3, r0
    3b9a:	3b01      	subs	r3, #1
    3b9c:	781b      	ldrb	r3, [r3, #0]
    3b9e:	0050      	lsls	r0, r2, #1
    3ba0:	1882      	adds	r2, r0, r2
    3ba2:	00d2      	lsls	r2, r2, #3
    3ba4:	18aa      	adds	r2, r5, r2
    3ba6:	5453      	strb	r3, [r2, r1]
				xCharPos = x;
    3ba8:	9a02      	ldr	r2, [sp, #8]
    3baa:	4b37      	ldr	r3, [pc, #220]	; (3c88 <scrollDown+0x19c>)
    3bac:	801a      	strh	r2, [r3, #0]
				yCharPos = y;
    3bae:	9a01      	ldr	r2, [sp, #4]
    3bb0:	4b36      	ldr	r3, [pc, #216]	; (3c8c <scrollDown+0x1a0>)
    3bb2:	801a      	strh	r2, [r3, #0]
				drawChar(consoleDisplay[x][y]);	
    3bb4:	9a02      	ldr	r2, [sp, #8]
    3bb6:	9901      	ldr	r1, [sp, #4]
    3bb8:	0053      	lsls	r3, r2, #1
    3bba:	189b      	adds	r3, r3, r2
    3bbc:	00db      	lsls	r3, r3, #3
    3bbe:	18e3      	adds	r3, r4, r3
    3bc0:	5c58      	ldrb	r0, [r3, r1]
    3bc2:	4b38      	ldr	r3, [pc, #224]	; (3ca4 <scrollDown+0x1b8>)
    3bc4:	4798      	blx	r3
			for(volatile int x = 0 ; x <= 79 ; x++)
    3bc6:	9b02      	ldr	r3, [sp, #8]
    3bc8:	3301      	adds	r3, #1
    3bca:	9302      	str	r3, [sp, #8]
    3bcc:	9b02      	ldr	r3, [sp, #8]
    3bce:	2b4f      	cmp	r3, #79	; 0x4f
    3bd0:	ddb9      	ble.n	3b46 <scrollDown+0x5a>
		for(volatile int y = bottomMargin-1 ; y > topLine ; y--)
    3bd2:	9b01      	ldr	r3, [sp, #4]
    3bd4:	3b01      	subs	r3, #1
    3bd6:	9301      	str	r3, [sp, #4]
    3bd8:	9b01      	ldr	r3, [sp, #4]
    3bda:	455b      	cmp	r3, fp
    3bdc:	dcae      	bgt.n	3b3c <scrollDown+0x50>
		for(volatile int x = 0 ; x <= 79 ; x++)
    3bde:	2300      	movs	r3, #0
    3be0:	9303      	str	r3, [sp, #12]
    3be2:	9b03      	ldr	r3, [sp, #12]
    3be4:	2b4f      	cmp	r3, #79	; 0x4f
    3be6:	dc2d      	bgt.n	3c44 <scrollDown+0x158>
			consoleDisplay[x][topLine] = 0x20;
    3be8:	4c2b      	ldr	r4, [pc, #172]	; (3c98 <scrollDown+0x1ac>)
			consoleColors[x][topLine] = 0x0000;
    3bea:	4e2c      	ldr	r6, [pc, #176]	; (3c9c <scrollDown+0x1b0>)
			consoleSGR[x][topLine] = 0x00;
    3bec:	4d2c      	ldr	r5, [pc, #176]	; (3ca0 <scrollDown+0x1b4>)
			consoleDisplay[x][topLine] = 0x20;
    3bee:	9a03      	ldr	r2, [sp, #12]
    3bf0:	0053      	lsls	r3, r2, #1
    3bf2:	189b      	adds	r3, r3, r2
    3bf4:	00db      	lsls	r3, r3, #3
    3bf6:	18e3      	adds	r3, r4, r3
    3bf8:	2220      	movs	r2, #32
    3bfa:	4659      	mov	r1, fp
    3bfc:	545a      	strb	r2, [r3, r1]
			consoleColors[x][topLine] = 0x0000;
    3bfe:	9a03      	ldr	r2, [sp, #12]
    3c00:	0053      	lsls	r3, r2, #1
    3c02:	189b      	adds	r3, r3, r2
    3c04:	00db      	lsls	r3, r3, #3
    3c06:	445b      	add	r3, fp
    3c08:	009b      	lsls	r3, r3, #2
    3c0a:	2200      	movs	r2, #0
    3c0c:	519a      	str	r2, [r3, r6]
			consoleSGR[x][topLine] = 0x00;
    3c0e:	9903      	ldr	r1, [sp, #12]
    3c10:	004b      	lsls	r3, r1, #1
    3c12:	185b      	adds	r3, r3, r1
    3c14:	00db      	lsls	r3, r3, #3
    3c16:	18eb      	adds	r3, r5, r3
    3c18:	4659      	mov	r1, fp
    3c1a:	545a      	strb	r2, [r3, r1]
			xCharPos = x;
    3c1c:	9a03      	ldr	r2, [sp, #12]
    3c1e:	4b1a      	ldr	r3, [pc, #104]	; (3c88 <scrollDown+0x19c>)
    3c20:	801a      	strh	r2, [r3, #0]
			yCharPos = topLine;
    3c22:	4b1a      	ldr	r3, [pc, #104]	; (3c8c <scrollDown+0x1a0>)
    3c24:	4642      	mov	r2, r8
    3c26:	801a      	strh	r2, [r3, #0]
			drawChar(consoleDisplay[x][topLine]);
    3c28:	9a03      	ldr	r2, [sp, #12]
    3c2a:	0053      	lsls	r3, r2, #1
    3c2c:	189b      	adds	r3, r3, r2
    3c2e:	00db      	lsls	r3, r3, #3
    3c30:	18e3      	adds	r3, r4, r3
    3c32:	5c58      	ldrb	r0, [r3, r1]
    3c34:	4b1b      	ldr	r3, [pc, #108]	; (3ca4 <scrollDown+0x1b8>)
    3c36:	4798      	blx	r3
		for(volatile int x = 0 ; x <= 79 ; x++)
    3c38:	9b03      	ldr	r3, [sp, #12]
    3c3a:	3301      	adds	r3, #1
    3c3c:	9303      	str	r3, [sp, #12]
    3c3e:	9b03      	ldr	r3, [sp, #12]
    3c40:	2b4f      	cmp	r3, #79	; 0x4f
    3c42:	ddd4      	ble.n	3bee <scrollDown+0x102>
		xCharPos = tempCursorx;
    3c44:	23ff      	movs	r3, #255	; 0xff
    3c46:	4651      	mov	r1, sl
    3c48:	4019      	ands	r1, r3
    3c4a:	4a0f      	ldr	r2, [pc, #60]	; (3c88 <scrollDown+0x19c>)
    3c4c:	8011      	strh	r1, [r2, #0]
		yCharPos = tempCursory;
    3c4e:	464a      	mov	r2, r9
    3c50:	4013      	ands	r3, r2
    3c52:	4a0e      	ldr	r2, [pc, #56]	; (3c8c <scrollDown+0x1a0>)
    3c54:	8013      	strh	r3, [r2, #0]
    3c56:	e75f      	b.n	3b18 <scrollDown+0x2c>
			drawChar(consoleDisplay[xCharPos][yCharPos]);
    3c58:	4c0f      	ldr	r4, [pc, #60]	; (3c98 <scrollDown+0x1ac>)
    3c5a:	4653      	mov	r3, sl
    3c5c:	005b      	lsls	r3, r3, #1
    3c5e:	4453      	add	r3, sl
    3c60:	00db      	lsls	r3, r3, #3
    3c62:	18e3      	adds	r3, r4, r3
    3c64:	464a      	mov	r2, r9
    3c66:	5c98      	ldrb	r0, [r3, r2]
    3c68:	4d0e      	ldr	r5, [pc, #56]	; (3ca4 <scrollDown+0x1b8>)
    3c6a:	47a8      	blx	r5
			yCharPos--;
    3c6c:	4a07      	ldr	r2, [pc, #28]	; (3c8c <scrollDown+0x1a0>)
    3c6e:	8813      	ldrh	r3, [r2, #0]
    3c70:	3b01      	subs	r3, #1
    3c72:	b29b      	uxth	r3, r3
    3c74:	8013      	strh	r3, [r2, #0]
			tempCharacter = consoleDisplay[xCharPos][yCharPos];
    3c76:	4a04      	ldr	r2, [pc, #16]	; (3c88 <scrollDown+0x19c>)
    3c78:	8811      	ldrh	r1, [r2, #0]
    3c7a:	004a      	lsls	r2, r1, #1
    3c7c:	1852      	adds	r2, r2, r1
    3c7e:	00d2      	lsls	r2, r2, #3
    3c80:	18a4      	adds	r4, r4, r2
			drawChar(tempCharacter);
    3c82:	5ce0      	ldrb	r0, [r4, r3]
    3c84:	47a8      	blx	r5
}
    3c86:	e747      	b.n	3b18 <scrollDown+0x2c>
    3c88:	200004e2 	.word	0x200004e2
    3c8c:	200004e4 	.word	0x200004e4
    3c90:	20000029 	.word	0x20000029
    3c94:	20000028 	.word	0x20000028
    3c98:	200005ec 	.word	0x200005ec
    3c9c:	200014ec 	.word	0x200014ec
    3ca0:	20000d6c 	.word	0x20000d6c
    3ca4:	00003925 	.word	0x00003925

00003ca8 <blinkCursor>:

}
*/

void blinkCursor(void)
{
    3ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3caa:	46d6      	mov	lr, sl
    3cac:	464f      	mov	r7, r9
    3cae:	b580      	push	{r7, lr}
    3cb0:	b0e7      	sub	sp, #412	; 0x19c
	uint16_t x = xCharPos;
    3cb2:	4b68      	ldr	r3, [pc, #416]	; (3e54 <blinkCursor+0x1ac>)
    3cb4:	881b      	ldrh	r3, [r3, #0]
	uint16_t y = yCharPos;
    3cb6:	4a68      	ldr	r2, [pc, #416]	; (3e58 <blinkCursor+0x1b0>)
    3cb8:	8817      	ldrh	r7, [r2, #0]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
	
	uint32_t tempColor = consoleColors[x][y];
    3cba:	0059      	lsls	r1, r3, #1
    3cbc:	18ca      	adds	r2, r1, r3
    3cbe:	00d2      	lsls	r2, r2, #3
    3cc0:	19d2      	adds	r2, r2, r7
    3cc2:	0092      	lsls	r2, r2, #2
    3cc4:	4865      	ldr	r0, [pc, #404]	; (3e5c <blinkCursor+0x1b4>)
    3cc6:	5814      	ldr	r4, [r2, r0]
	
	tempForeground = (tempColor >> 16);
    3cc8:	0c22      	lsrs	r2, r4, #16
    3cca:	9200      	str	r2, [sp, #0]
	tempBackground = consoleColors[x][y] & 0xFFFF;
    3ccc:	b2a2      	uxth	r2, r4
    3cce:	9201      	str	r2, [sp, #4]
	
	uint8_t character = consoleDisplay[xCharPos][yCharPos];
    3cd0:	18c9      	adds	r1, r1, r3
    3cd2:	00c9      	lsls	r1, r1, #3
    3cd4:	4a62      	ldr	r2, [pc, #392]	; (3e60 <blinkCursor+0x1b8>)
    3cd6:	1851      	adds	r1, r2, r1
    3cd8:	5dce      	ldrb	r6, [r1, r7]
	
	uint8_t displayFont[10][20];
	uint8_t tempFontStorage[200];
	uint8_t k = 0;
	
	REG_PORT_OUTCLR1 = LCD_CS;
    3cda:	2180      	movs	r1, #128	; 0x80
    3cdc:	03c9      	lsls	r1, r1, #15
    3cde:	4a61      	ldr	r2, [pc, #388]	; (3e64 <blinkCursor+0x1bc>)
    3ce0:	6011      	str	r1, [r2, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
    3ce2:	0098      	lsls	r0, r3, #2
    3ce4:	181b      	adds	r3, r3, r0
    3ce6:	005b      	lsls	r3, r3, #1
    3ce8:	b298      	uxth	r0, r3
    3cea:	2114      	movs	r1, #20
    3cec:	4379      	muls	r1, r7
    3cee:	b289      	uxth	r1, r1
    3cf0:	000b      	movs	r3, r1
    3cf2:	3313      	adds	r3, #19
    3cf4:	b29b      	uxth	r3, r3
    3cf6:	0002      	movs	r2, r0
    3cf8:	3209      	adds	r2, #9
    3cfa:	b292      	uxth	r2, r2
    3cfc:	4f5a      	ldr	r7, [pc, #360]	; (3e68 <blinkCursor+0x1c0>)
    3cfe:	47b8      	blx	r7
    3d00:	00b3      	lsls	r3, r6, #2
    3d02:	199b      	adds	r3, r3, r6
    3d04:	009a      	lsls	r2, r3, #2
    3d06:	189a      	adds	r2, r3, r2
    3d08:	4b58      	ldr	r3, [pc, #352]	; (3e6c <blinkCursor+0x1c4>)
    3d0a:	4699      	mov	r9, r3
    3d0c:	4491      	add	r9, r2
	uint8_t k = 0;
    3d0e:	2700      	movs	r7, #0
	//first transmute it into tempFontStorage
	for(uint16_t i=0; i <= 24; i++)
	{
		for(int j=0;j<8;j++)
		{
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3d10:	2601      	movs	r6, #1
			{
				tempFontStorage[k] = 0xFF;
			}
			else
			{
				tempFontStorage[k] = 0x00;
    3d12:	2500      	movs	r5, #0
				tempFontStorage[k] = 0xFF;
    3d14:	24ff      	movs	r4, #255	; 0xff
    3d16:	e013      	b.n	3d40 <blinkCursor+0x98>
				tempFontStorage[k] = 0x00;
    3d18:	a902      	add	r1, sp, #8
    3d1a:	54cd      	strb	r5, [r1, r3]
			}
			k++;
    3d1c:	3301      	adds	r3, #1
    3d1e:	b2db      	uxtb	r3, r3
		for(int j=0;j<8;j++)
    3d20:	3a01      	subs	r2, #1
    3d22:	d306      	bcc.n	3d32 <blinkCursor+0x8a>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3d24:	0001      	movs	r1, r0
    3d26:	4111      	asrs	r1, r2
    3d28:	420e      	tst	r6, r1
    3d2a:	d0f5      	beq.n	3d18 <blinkCursor+0x70>
				tempFontStorage[k] = 0xFF;
    3d2c:	a902      	add	r1, sp, #8
    3d2e:	54cc      	strb	r4, [r1, r3]
    3d30:	e7f4      	b.n	3d1c <blinkCursor+0x74>
    3d32:	3708      	adds	r7, #8
    3d34:	b2ff      	uxtb	r7, r7
    3d36:	2301      	movs	r3, #1
    3d38:	469c      	mov	ip, r3
    3d3a:	44e1      	add	r9, ip
	for(uint16_t i=0; i <= 24; i++)
    3d3c:	2fc8      	cmp	r7, #200	; 0xc8
    3d3e:	d004      	beq.n	3d4a <blinkCursor+0xa2>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
    3d40:	464b      	mov	r3, r9
    3d42:	7818      	ldrb	r0, [r3, #0]
    3d44:	003b      	movs	r3, r7
    3d46:	2207      	movs	r2, #7
    3d48:	e7ec      	b.n	3d24 <blinkCursor+0x7c>
    3d4a:	af39      	add	r7, sp, #228	; 0xe4
	for(uint16_t i=0; i <= 24; i++)
    3d4c:	0038      	movs	r0, r7
    3d4e:	2500      	movs	r5, #0
			{
				displayFont[i][j] = 0xFF;
			}
			else
			{
				displayFont[i][j] = 0x00;
    3d50:	2600      	movs	r6, #0
				displayFont[i][j] = 0xFF;
    3d52:	24ff      	movs	r4, #255	; 0xff
    3d54:	e010      	b.n	3d78 <blinkCursor+0xd0>
    3d56:	7014      	strb	r4, [r2, #0]
			}
			k++;
    3d58:	3301      	adds	r3, #1
    3d5a:	b2db      	uxtb	r3, r3
    3d5c:	3201      	adds	r2, #1
		for(uint8_t j = 0; j <= 19 ; j++)
    3d5e:	4282      	cmp	r2, r0
    3d60:	d005      	beq.n	3d6e <blinkCursor+0xc6>
			if(tempFontStorage[k] == 0xFF)
    3d62:	a902      	add	r1, sp, #8
    3d64:	5cc9      	ldrb	r1, [r1, r3]
    3d66:	29ff      	cmp	r1, #255	; 0xff
    3d68:	d0f5      	beq.n	3d56 <blinkCursor+0xae>
				displayFont[i][j] = 0x00;
    3d6a:	7016      	strb	r6, [r2, #0]
    3d6c:	e7f4      	b.n	3d58 <blinkCursor+0xb0>
    3d6e:	3514      	adds	r5, #20
    3d70:	b2ed      	uxtb	r5, r5
    3d72:	3014      	adds	r0, #20
	for(uint8_t i = 0; i <= 9 ; i++)
    3d74:	2dc8      	cmp	r5, #200	; 0xc8
    3d76:	d003      	beq.n	3d80 <blinkCursor+0xd8>
    3d78:	0002      	movs	r2, r0
    3d7a:	3a14      	subs	r2, #20
	uint8_t k = 0;
    3d7c:	002b      	movs	r3, r5
    3d7e:	e7f0      	b.n	3d62 <blinkCursor+0xba>
		}
	}
	
	//process displayFont if it is bold, first bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],1) == 1)
    3d80:	4b34      	ldr	r3, [pc, #208]	; (3e54 <blinkCursor+0x1ac>)
    3d82:	881a      	ldrh	r2, [r3, #0]
    3d84:	4b34      	ldr	r3, [pc, #208]	; (3e58 <blinkCursor+0x1b0>)
    3d86:	8819      	ldrh	r1, [r3, #0]
    3d88:	0053      	lsls	r3, r2, #1
    3d8a:	189b      	adds	r3, r3, r2
    3d8c:	00db      	lsls	r3, r3, #3
    3d8e:	4a38      	ldr	r2, [pc, #224]	; (3e70 <blinkCursor+0x1c8>)
    3d90:	18d3      	adds	r3, r2, r3
    3d92:	5c5c      	ldrb	r4, [r3, r1]
    3d94:	07a3      	lsls	r3, r4, #30
    3d96:	d511      	bpl.n	3dbc <blinkCursor+0x114>
    3d98:	a961      	add	r1, sp, #388	; 0x184
    3d9a:	ae34      	add	r6, sp, #208	; 0xd0
		{
			for(uint8_t j = 0; j <= 19 ; j++)
			{
				if(displayFont[i-1][j] == 0xFF)
				{
					displayFont[i][j] = 0xFF;
    3d9c:	20ff      	movs	r0, #255	; 0xff
    3d9e:	e00a      	b.n	3db6 <blinkCursor+0x10e>
    3da0:	7518      	strb	r0, [r3, #20]
    3da2:	3301      	adds	r3, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    3da4:	428b      	cmp	r3, r1
    3da6:	d003      	beq.n	3db0 <blinkCursor+0x108>
				if(displayFont[i-1][j] == 0xFF)
    3da8:	781a      	ldrb	r2, [r3, #0]
    3daa:	2aff      	cmp	r2, #255	; 0xff
    3dac:	d1f9      	bne.n	3da2 <blinkCursor+0xfa>
    3dae:	e7f7      	b.n	3da0 <blinkCursor+0xf8>
    3db0:	3914      	subs	r1, #20
		for(uint8_t i = 9; i >= 1 ; i--)
    3db2:	42b1      	cmp	r1, r6
    3db4:	d002      	beq.n	3dbc <blinkCursor+0x114>
    3db6:	000b      	movs	r3, r1
    3db8:	3b14      	subs	r3, #20
    3dba:	e7f5      	b.n	3da8 <blinkCursor+0x100>
			}
		}
	}
	
	//process displayfont if underscore, fourth bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],4) == 1)
    3dbc:	06e3      	lsls	r3, r4, #27
    3dbe:	d50a      	bpl.n	3dd6 <blinkCursor+0x12e>
    3dc0:	ab61      	add	r3, sp, #388	; 0x184
    3dc2:	21c3      	movs	r1, #195	; 0xc3
    3dc4:	0049      	lsls	r1, r1, #1
    3dc6:	aa02      	add	r2, sp, #8
    3dc8:	4694      	mov	ip, r2
    3dca:	4461      	add	r1, ip
	{
		for(int i = 0 ; i <= 9 ; i++)
		{
			displayFont[9][i] = 0xFF;
    3dcc:	22ff      	movs	r2, #255	; 0xff
    3dce:	701a      	strb	r2, [r3, #0]
    3dd0:	3301      	adds	r3, #1
		for(int i = 0 ; i <= 9 ; i++)
    3dd2:	428b      	cmp	r3, r1
    3dd4:	d1fb      	bne.n	3dce <blinkCursor+0x126>
		}
	}
	
	if(!cursorBlinkState)
    3dd6:	4b27      	ldr	r3, [pc, #156]	; (3e74 <blinkCursor+0x1cc>)
    3dd8:	781b      	ldrb	r3, [r3, #0]
    3dda:	2b00      	cmp	r3, #0
    3ddc:	d004      	beq.n	3de8 <blinkCursor+0x140>
    3dde:	ab6b      	add	r3, sp, #428	; 0x1ac
    3de0:	469a      	mov	sl, r3
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
    3de2:	4d25      	ldr	r5, [pc, #148]	; (3e78 <blinkCursor+0x1d0>)
					setPixel(tempForeground);
    3de4:	002c      	movs	r4, r5
    3de6:	e023      	b.n	3e30 <blinkCursor+0x188>
    3de8:	ab6b      	add	r3, sp, #428	; 0x1ac
    3dea:	469a      	mov	sl, r3
					setPixel(tempBackground);
    3dec:	4c22      	ldr	r4, [pc, #136]	; (3e78 <blinkCursor+0x1d0>)
					setPixel(tempForeground);
    3dee:	0025      	movs	r5, r4
    3df0:	e00d      	b.n	3e0e <blinkCursor+0x166>
    3df2:	9800      	ldr	r0, [sp, #0]
    3df4:	47a8      	blx	r5
    3df6:	3601      	adds	r6, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    3df8:	42b7      	cmp	r7, r6
    3dfa:	d005      	beq.n	3e08 <blinkCursor+0x160>
				if(displayFont[i][j] == 0xFF)
    3dfc:	7833      	ldrb	r3, [r6, #0]
    3dfe:	2bff      	cmp	r3, #255	; 0xff
    3e00:	d0f7      	beq.n	3df2 <blinkCursor+0x14a>
					setPixel(tempBackground);
    3e02:	9801      	ldr	r0, [sp, #4]
    3e04:	47a0      	blx	r4
    3e06:	e7f6      	b.n	3df6 <blinkCursor+0x14e>
    3e08:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    3e0a:	45ba      	cmp	sl, r7
    3e0c:	d013      	beq.n	3e36 <blinkCursor+0x18e>
    3e0e:	003e      	movs	r6, r7
    3e10:	3e14      	subs	r6, #20
    3e12:	e7f3      	b.n	3dfc <blinkCursor+0x154>
					setPixel(tempBackground);
    3e14:	9801      	ldr	r0, [sp, #4]
    3e16:	47a8      	blx	r5
    3e18:	3601      	adds	r6, #1
			for(uint8_t j = 0; j <= 19 ; j++)
    3e1a:	42b7      	cmp	r7, r6
    3e1c:	d005      	beq.n	3e2a <blinkCursor+0x182>
				if(displayFont[i][j] != 0xFF)
    3e1e:	7833      	ldrb	r3, [r6, #0]
    3e20:	2bff      	cmp	r3, #255	; 0xff
    3e22:	d0f7      	beq.n	3e14 <blinkCursor+0x16c>
					setPixel(tempForeground);
    3e24:	9800      	ldr	r0, [sp, #0]
    3e26:	47a0      	blx	r4
    3e28:	e7f6      	b.n	3e18 <blinkCursor+0x170>
    3e2a:	3714      	adds	r7, #20
		for(uint8_t i = 0; i <= 9 ; i++)
    3e2c:	4557      	cmp	r7, sl
    3e2e:	d002      	beq.n	3e36 <blinkCursor+0x18e>
    3e30:	003e      	movs	r6, r7
    3e32:	3e14      	subs	r6, #20
    3e34:	e7f3      	b.n	3e1e <blinkCursor+0x176>
				}
			}
		}
	}
	
	REG_PORT_OUTSET1 = LCD_CS;
    3e36:	2280      	movs	r2, #128	; 0x80
    3e38:	03d2      	lsls	r2, r2, #15
    3e3a:	4b10      	ldr	r3, [pc, #64]	; (3e7c <blinkCursor+0x1d4>)
    3e3c:	601a      	str	r2, [r3, #0]
	
	//invert cursorBlinkState
	cursorBlinkState = !cursorBlinkState;
    3e3e:	4a0d      	ldr	r2, [pc, #52]	; (3e74 <blinkCursor+0x1cc>)
    3e40:	7813      	ldrb	r3, [r2, #0]
    3e42:	2101      	movs	r1, #1
    3e44:	404b      	eors	r3, r1
    3e46:	7013      	strb	r3, [r2, #0]
	
}
    3e48:	b067      	add	sp, #412	; 0x19c
    3e4a:	bc0c      	pop	{r2, r3}
    3e4c:	4691      	mov	r9, r2
    3e4e:	469a      	mov	sl, r3
    3e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e52:	46c0      	nop			; (mov r8, r8)
    3e54:	200004e2 	.word	0x200004e2
    3e58:	200004e4 	.word	0x200004e4
    3e5c:	200014ec 	.word	0x200014ec
    3e60:	200005ec 	.word	0x200005ec
    3e64:	41004494 	.word	0x41004494
    3e68:	000046f9 	.word	0x000046f9
    3e6c:	00007070 	.word	0x00007070
    3e70:	20000d6c 	.word	0x20000d6c
    3e74:	2000002a 	.word	0x2000002a
    3e78:	00004831 	.word	0x00004831
    3e7c:	41004498 	.word	0x41004498

00003e80 <newLine>:
{
    3e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e82:	46de      	mov	lr, fp
    3e84:	4657      	mov	r7, sl
    3e86:	464e      	mov	r6, r9
    3e88:	4645      	mov	r5, r8
    3e8a:	b5e0      	push	{r5, r6, r7, lr}
    3e8c:	b083      	sub	sp, #12
	int tempCursorx = xCharPos;
    3e8e:	4b3b      	ldr	r3, [pc, #236]	; (3f7c <newLine+0xfc>)
    3e90:	881b      	ldrh	r3, [r3, #0]
    3e92:	469b      	mov	fp, r3
	int tempCursory = yCharPos;
    3e94:	4b3a      	ldr	r3, [pc, #232]	; (3f80 <newLine+0x100>)
    3e96:	881b      	ldrh	r3, [r3, #0]
    3e98:	9301      	str	r3, [sp, #4]
	cursorBlinkState = true;
    3e9a:	2201      	movs	r2, #1
    3e9c:	4b39      	ldr	r3, [pc, #228]	; (3f84 <newLine+0x104>)
    3e9e:	701a      	strb	r2, [r3, #0]
	blinkCursor();
    3ea0:	4b39      	ldr	r3, [pc, #228]	; (3f88 <newLine+0x108>)
    3ea2:	4798      	blx	r3
	for(int j = topMargin ; j <= bottomMargin ; j++)
    3ea4:	4b39      	ldr	r3, [pc, #228]	; (3f8c <newLine+0x10c>)
    3ea6:	781c      	ldrb	r4, [r3, #0]
    3ea8:	b2e4      	uxtb	r4, r4
    3eaa:	0025      	movs	r5, r4
    3eac:	4b38      	ldr	r3, [pc, #224]	; (3f90 <newLine+0x110>)
    3eae:	781b      	ldrb	r3, [r3, #0]
    3eb0:	b2db      	uxtb	r3, r3
    3eb2:	429c      	cmp	r4, r3
    3eb4:	dc23      	bgt.n	3efe <newLine+0x7e>
    3eb6:	4b37      	ldr	r3, [pc, #220]	; (3f94 <newLine+0x114>)
    3eb8:	18e6      	adds	r6, r4, r3
    3eba:	00b6      	lsls	r6, r6, #2
    3ebc:	4b36      	ldr	r3, [pc, #216]	; (3f98 <newLine+0x118>)
    3ebe:	18f6      	adds	r6, r6, r3
    3ec0:	4b36      	ldr	r3, [pc, #216]	; (3f9c <newLine+0x11c>)
    3ec2:	469c      	mov	ip, r3
    3ec4:	4464      	add	r4, ip
    3ec6:	4b36      	ldr	r3, [pc, #216]	; (3fa0 <newLine+0x120>)
    3ec8:	18e4      	adds	r4, r4, r3
    3eca:	4b36      	ldr	r3, [pc, #216]	; (3fa4 <newLine+0x124>)
    3ecc:	469c      	mov	ip, r3
    3ece:	4f30      	ldr	r7, [pc, #192]	; (3f90 <newLine+0x110>)
    3ed0:	4b35      	ldr	r3, [pc, #212]	; (3fa8 <newLine+0x128>)
    3ed2:	18e3      	adds	r3, r4, r3
    3ed4:	1e6a      	subs	r2, r5, #1
    3ed6:	4462      	add	r2, ip
{
    3ed8:	0031      	movs	r1, r6
			consoleDisplay[i][j-1] = consoleDisplay[i][j];
    3eda:	7858      	ldrb	r0, [r3, #1]
    3edc:	7018      	strb	r0, [r3, #0]
			consoleColors[i][j-1] = consoleColors[i][j];
    3ede:	6848      	ldr	r0, [r1, #4]
    3ee0:	6008      	str	r0, [r1, #0]
			consoleSGR[i][j-1] = consoleSGR[i][j];
    3ee2:	7850      	ldrb	r0, [r2, #1]
    3ee4:	7010      	strb	r0, [r2, #0]
    3ee6:	3318      	adds	r3, #24
    3ee8:	3160      	adds	r1, #96	; 0x60
    3eea:	3218      	adds	r2, #24
		for(int i = 0 ; i < 80 ; i++)
    3eec:	42a3      	cmp	r3, r4
    3eee:	d1f4      	bne.n	3eda <newLine+0x5a>
	for(int j = topMargin ; j <= bottomMargin ; j++)
    3ef0:	3501      	adds	r5, #1
    3ef2:	783b      	ldrb	r3, [r7, #0]
    3ef4:	b2db      	uxtb	r3, r3
    3ef6:	3604      	adds	r6, #4
    3ef8:	3401      	adds	r4, #1
    3efa:	42ab      	cmp	r3, r5
    3efc:	dae8      	bge.n	3ed0 <newLine+0x50>
    3efe:	4a2b      	ldr	r2, [pc, #172]	; (3fac <newLine+0x12c>)
{
    3f00:	2317      	movs	r3, #23
		consoleDisplay[k][23] = 0x20;
    3f02:	4f27      	ldr	r7, [pc, #156]	; (3fa0 <newLine+0x120>)
    3f04:	2620      	movs	r6, #32
		consoleColors[k][23] = 0x0000;
    3f06:	2100      	movs	r1, #0
		consoleSGR[k][23] = 0x00;
    3f08:	4d26      	ldr	r5, [pc, #152]	; (3fa4 <newLine+0x124>)
	for(int k = 0 ; k < 80 ; k ++)
    3f0a:	4c29      	ldr	r4, [pc, #164]	; (3fb0 <newLine+0x130>)
		consoleDisplay[k][23] = 0x20;
    3f0c:	54fe      	strb	r6, [r7, r3]
		consoleColors[k][23] = 0x0000;
    3f0e:	6011      	str	r1, [r2, #0]
		consoleSGR[k][23] = 0x00;
    3f10:	1958      	adds	r0, r3, r5
    3f12:	7001      	strb	r1, [r0, #0]
    3f14:	3260      	adds	r2, #96	; 0x60
    3f16:	3318      	adds	r3, #24
	for(int k = 0 ; k < 80 ; k ++)
    3f18:	42a3      	cmp	r3, r4
    3f1a:	d1f7      	bne.n	3f0c <newLine+0x8c>
	for(int j = topMargin-1 ; j < bottomMargin ; j++)
    3f1c:	4b1b      	ldr	r3, [pc, #108]	; (3f8c <newLine+0x10c>)
    3f1e:	781e      	ldrb	r6, [r3, #0]
    3f20:	3e01      	subs	r6, #1
    3f22:	4b1b      	ldr	r3, [pc, #108]	; (3f90 <newLine+0x110>)
    3f24:	781b      	ldrb	r3, [r3, #0]
    3f26:	b2db      	uxtb	r3, r3
    3f28:	429e      	cmp	r6, r3
    3f2a:	da19      	bge.n	3f60 <newLine+0xe0>
    3f2c:	4b1c      	ldr	r3, [pc, #112]	; (3fa0 <newLine+0x120>)
    3f2e:	469a      	mov	sl, r3
			xCharPos = i;
    3f30:	4b12      	ldr	r3, [pc, #72]	; (3f7c <newLine+0xfc>)
    3f32:	4699      	mov	r9, r3
			yCharPos = j;
    3f34:	4b12      	ldr	r3, [pc, #72]	; (3f80 <newLine+0x100>)
    3f36:	4698      	mov	r8, r3
    3f38:	4653      	mov	r3, sl
    3f3a:	18f5      	adds	r5, r6, r3
{
    3f3c:	2400      	movs	r4, #0
			drawChar(consoleDisplay[i][j]);
    3f3e:	4f1d      	ldr	r7, [pc, #116]	; (3fb4 <newLine+0x134>)
			xCharPos = i;
    3f40:	464b      	mov	r3, r9
    3f42:	801c      	strh	r4, [r3, #0]
			yCharPos = j;
    3f44:	4643      	mov	r3, r8
    3f46:	801e      	strh	r6, [r3, #0]
			drawChar(consoleDisplay[i][j]);
    3f48:	7828      	ldrb	r0, [r5, #0]
    3f4a:	47b8      	blx	r7
		for(int i = 0 ; i < 80 ; i++)
    3f4c:	3401      	adds	r4, #1
    3f4e:	3518      	adds	r5, #24
    3f50:	2c50      	cmp	r4, #80	; 0x50
    3f52:	d1f5      	bne.n	3f40 <newLine+0xc0>
	for(int j = topMargin-1 ; j < bottomMargin ; j++)
    3f54:	3601      	adds	r6, #1
    3f56:	4b0e      	ldr	r3, [pc, #56]	; (3f90 <newLine+0x110>)
    3f58:	781b      	ldrb	r3, [r3, #0]
    3f5a:	b2db      	uxtb	r3, r3
    3f5c:	42b3      	cmp	r3, r6
    3f5e:	dceb      	bgt.n	3f38 <newLine+0xb8>
	xCharPos = tempCursorx;
    3f60:	4b06      	ldr	r3, [pc, #24]	; (3f7c <newLine+0xfc>)
    3f62:	465a      	mov	r2, fp
    3f64:	801a      	strh	r2, [r3, #0]
	yCharPos = tempCursory;	
    3f66:	4b06      	ldr	r3, [pc, #24]	; (3f80 <newLine+0x100>)
    3f68:	466a      	mov	r2, sp
    3f6a:	8892      	ldrh	r2, [r2, #4]
    3f6c:	801a      	strh	r2, [r3, #0]
}
    3f6e:	b003      	add	sp, #12
    3f70:	bc3c      	pop	{r2, r3, r4, r5}
    3f72:	4690      	mov	r8, r2
    3f74:	4699      	mov	r9, r3
    3f76:	46a2      	mov	sl, r4
    3f78:	46ab      	mov	fp, r5
    3f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f7c:	200004e2 	.word	0x200004e2
    3f80:	200004e4 	.word	0x200004e4
    3f84:	2000002a 	.word	0x2000002a
    3f88:	00003ca9 	.word	0x00003ca9
    3f8c:	20000029 	.word	0x20000029
    3f90:	20000028 	.word	0x20000028
    3f94:	3fffffff 	.word	0x3fffffff
    3f98:	200014ec 	.word	0x200014ec
    3f9c:	0000077f 	.word	0x0000077f
    3fa0:	200005ec 	.word	0x200005ec
    3fa4:	20000d6c 	.word	0x20000d6c
    3fa8:	fffff880 	.word	0xfffff880
    3fac:	20001548 	.word	0x20001548
    3fb0:	00000797 	.word	0x00000797
    3fb4:	00003925 	.word	0x00003925

00003fb8 <writeString>:

void writeString(const char str[])
{
    3fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fba:	46c6      	mov	lr, r8
    3fbc:	b500      	push	{lr}
    3fbe:	0005      	movs	r5, r0
	int length = strlen(str);
    3fc0:	4b0c      	ldr	r3, [pc, #48]	; (3ff4 <writeString+0x3c>)
    3fc2:	4798      	blx	r3
	for(int i = 0; i < length; i++)
    3fc4:	2800      	cmp	r0, #0
    3fc6:	dd11      	ble.n	3fec <writeString+0x34>
    3fc8:	002c      	movs	r4, r5
    3fca:	182d      	adds	r5, r5, r0
	{
		drawChar(str[i]);
    3fcc:	4f0a      	ldr	r7, [pc, #40]	; (3ff8 <writeString+0x40>)
		if(xCharPos <= 80)
    3fce:	4e0b      	ldr	r6, [pc, #44]	; (3ffc <writeString+0x44>)
		xCharPos++;
    3fd0:	46b0      	mov	r8, r6
    3fd2:	e002      	b.n	3fda <writeString+0x22>
    3fd4:	3401      	adds	r4, #1
	for(int i = 0; i < length; i++)
    3fd6:	42ac      	cmp	r4, r5
    3fd8:	d008      	beq.n	3fec <writeString+0x34>
		drawChar(str[i]);
    3fda:	7820      	ldrb	r0, [r4, #0]
    3fdc:	47b8      	blx	r7
		if(xCharPos <= 80)
    3fde:	8833      	ldrh	r3, [r6, #0]
    3fe0:	2b50      	cmp	r3, #80	; 0x50
    3fe2:	d8f7      	bhi.n	3fd4 <writeString+0x1c>
		xCharPos++;
    3fe4:	3301      	adds	r3, #1
    3fe6:	4642      	mov	r2, r8
    3fe8:	8013      	strh	r3, [r2, #0]
    3fea:	e7f3      	b.n	3fd4 <writeString+0x1c>
	}
}
    3fec:	bc04      	pop	{r2}
    3fee:	4690      	mov	r8, r2
    3ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ff2:	46c0      	nop			; (mov r8, r8)
    3ff4:	00005803 	.word	0x00005803
    3ff8:	00003925 	.word	0x00003925
    3ffc:	200004e2 	.word	0x200004e2

00004000 <nullifyConsole>:

void nullifyConsole(void)
{
    4000:	b5f0      	push	{r4, r5, r6, r7, lr}
    4002:	4e0c      	ldr	r6, [pc, #48]	; (4034 <nullifyConsole+0x34>)
    4004:	4c0c      	ldr	r4, [pc, #48]	; (4038 <nullifyConsole+0x38>)
    4006:	480d      	ldr	r0, [pc, #52]	; (403c <nullifyConsole+0x3c>)
    4008:	23f0      	movs	r3, #240	; 0xf0
    400a:	015b      	lsls	r3, r3, #5
    400c:	18f7      	adds	r7, r6, r3
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleDisplay[i][j] = 0x00;
    400e:	2100      	movs	r1, #0
			consoleSGR[i][j] = 0x00;
			consoleColors[i][j] = 0xFFFF0000;
    4010:	4d0b      	ldr	r5, [pc, #44]	; (4040 <nullifyConsole+0x40>)
    4012:	e004      	b.n	401e <nullifyConsole+0x1e>
    4014:	3660      	adds	r6, #96	; 0x60
    4016:	3418      	adds	r4, #24
    4018:	3018      	adds	r0, #24
	for(int i = 0 ; i < 80 ; i++)
    401a:	42be      	cmp	r6, r7
    401c:	d008      	beq.n	4030 <nullifyConsole+0x30>
{
    401e:	0032      	movs	r2, r6
    4020:	2300      	movs	r3, #0
			consoleDisplay[i][j] = 0x00;
    4022:	54e1      	strb	r1, [r4, r3]
			consoleSGR[i][j] = 0x00;
    4024:	54c1      	strb	r1, [r0, r3]
			consoleColors[i][j] = 0xFFFF0000;
    4026:	c220      	stmia	r2!, {r5}
		for(int j = 0 ; j < 24 ; j++)
    4028:	3301      	adds	r3, #1
    402a:	2b18      	cmp	r3, #24
    402c:	d1f9      	bne.n	4022 <nullifyConsole+0x22>
    402e:	e7f1      	b.n	4014 <nullifyConsole+0x14>
		}
	}	
}
    4030:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	200014ec 	.word	0x200014ec
    4038:	200005ec 	.word	0x200005ec
    403c:	20000d6c 	.word	0x20000d6c
    4040:	ffff0000 	.word	0xffff0000

00004044 <scanCodesContains>:

bool scanCodesContains(int scanCode)
{
	for(int i = 0 ; i < 70 ; i++)
	{
		if(scanCodes[i] == scanCode)
    4044:	4b09      	ldr	r3, [pc, #36]	; (406c <scanCodesContains+0x28>)
    4046:	681b      	ldr	r3, [r3, #0]
    4048:	4298      	cmp	r0, r3
    404a:	d00b      	beq.n	4064 <scanCodesContains+0x20>
    404c:	4a07      	ldr	r2, [pc, #28]	; (406c <scanCodesContains+0x28>)
    404e:	1d13      	adds	r3, r2, #4
    4050:	3219      	adds	r2, #25
    4052:	32ff      	adds	r2, #255	; 0xff
    4054:	6819      	ldr	r1, [r3, #0]
    4056:	4281      	cmp	r1, r0
    4058:	d006      	beq.n	4068 <scanCodesContains+0x24>
    405a:	3304      	adds	r3, #4
	for(int i = 0 ; i < 70 ; i++)
    405c:	4293      	cmp	r3, r2
    405e:	d1f9      	bne.n	4054 <scanCodesContains+0x10>
		{
			return true;
		}
	}
	return false;
    4060:	2000      	movs	r0, #0
    4062:	e002      	b.n	406a <scanCodesContains+0x26>
			return true;
    4064:	2001      	movs	r0, #1
    4066:	e000      	b.n	406a <scanCodesContains+0x26>
    4068:	2001      	movs	r0, #1
}
    406a:	4770      	bx	lr
    406c:	20000054 	.word	0x20000054

00004070 <keyDown>:

bool keyDown(int scancode)
{
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
    4070:	4b09      	ldr	r3, [pc, #36]	; (4098 <keyDown+0x28>)
    4072:	781b      	ldrb	r3, [r3, #0]
    4074:	4298      	cmp	r0, r3
    4076:	d00a      	beq.n	408e <keyDown+0x1e>
    4078:	4907      	ldr	r1, [pc, #28]	; (4098 <keyDown+0x28>)
    407a:	1c4b      	adds	r3, r1, #1
    407c:	3114      	adds	r1, #20
    407e:	781a      	ldrb	r2, [r3, #0]
    4080:	4282      	cmp	r2, r0
    4082:	d006      	beq.n	4092 <keyDown+0x22>
    4084:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    4086:	428b      	cmp	r3, r1
    4088:	d1f9      	bne.n	407e <keyDown+0xe>
		{
			return true;
		}	
	}
	return false;
    408a:	2000      	movs	r0, #0
}
    408c:	4770      	bx	lr
			return true;
    408e:	2001      	movs	r0, #1
    4090:	e7fc      	b.n	408c <keyDown+0x1c>
    4092:	2001      	movs	r0, #1
    4094:	e7fa      	b.n	408c <keyDown+0x1c>
    4096:	46c0      	nop			; (mov r8, r8)
    4098:	2000002c 	.word	0x2000002c

0000409c <printKeyboardBuffer>:
{
    409c:	b5f0      	push	{r4, r5, r6, r7, lr}
    409e:	46d6      	mov	lr, sl
    40a0:	464f      	mov	r7, r9
    40a2:	4646      	mov	r6, r8
    40a4:	b5c0      	push	{r6, r7, lr}
    40a6:	b0cc      	sub	sp, #304	; 0x130
	unsigned char noCase[] =
    40a8:	4dca      	ldr	r5, [pc, #808]	; (43d4 <printKeyboardBuffer+0x338>)
    40aa:	2246      	movs	r2, #70	; 0x46
    40ac:	0029      	movs	r1, r5
    40ae:	a83a      	add	r0, sp, #232	; 0xe8
    40b0:	4cc9      	ldr	r4, [pc, #804]	; (43d8 <printKeyboardBuffer+0x33c>)
    40b2:	47a0      	blx	r4
	unsigned char shiftCase[] =
    40b4:	0029      	movs	r1, r5
    40b6:	3148      	adds	r1, #72	; 0x48
    40b8:	2246      	movs	r2, #70	; 0x46
    40ba:	a828      	add	r0, sp, #160	; 0xa0
    40bc:	47a0      	blx	r4
	unsigned char capsLockCase[] =
    40be:	4dc7      	ldr	r5, [pc, #796]	; (43dc <printKeyboardBuffer+0x340>)
    40c0:	0029      	movs	r1, r5
    40c2:	3110      	adds	r1, #16
    40c4:	2246      	movs	r2, #70	; 0x46
    40c6:	a816      	add	r0, sp, #88	; 0x58
    40c8:	47a0      	blx	r4
	unsigned char controlCase[] =
    40ca:	0029      	movs	r1, r5
    40cc:	3158      	adds	r1, #88	; 0x58
    40ce:	2246      	movs	r2, #70	; 0x46
    40d0:	a804      	add	r0, sp, #16
    40d2:	47a0      	blx	r4
    40d4:	4fc2      	ldr	r7, [pc, #776]	; (43e0 <printKeyboardBuffer+0x344>)
    40d6:	003c      	movs	r4, r7
    40d8:	3414      	adds	r4, #20
    40da:	003d      	movs	r5, r7
	bool controled = false;
    40dc:	2300      	movs	r3, #0
    40de:	9303      	str	r3, [sp, #12]
	bool shifted = false;
    40e0:	9302      	str	r3, [sp, #8]
			controled = true;
    40e2:	2201      	movs	r2, #1
    40e4:	e004      	b.n	40f0 <printKeyboardBuffer+0x54>
		if(scanCodeBuffer[i] == 22)
    40e6:	2916      	cmp	r1, #22
    40e8:	d011      	beq.n	410e <printKeyboardBuffer+0x72>
    40ea:	3501      	adds	r5, #1
	for(int i=0; i<20; i++)
    40ec:	42a5      	cmp	r5, r4
    40ee:	d010      	beq.n	4112 <printKeyboardBuffer+0x76>
		if((scanCodeBuffer[i] == 13) | (scanCodeBuffer[i] == 49))
    40f0:	7829      	ldrb	r1, [r5, #0]
    40f2:	000b      	movs	r3, r1
    40f4:	3b0d      	subs	r3, #13
    40f6:	425e      	negs	r6, r3
    40f8:	415e      	adcs	r6, r3
    40fa:	46b4      	mov	ip, r6
    40fc:	0008      	movs	r0, r1
    40fe:	3831      	subs	r0, #49	; 0x31
    4100:	4243      	negs	r3, r0
    4102:	4143      	adcs	r3, r0
    4104:	4660      	mov	r0, ip
    4106:	4318      	orrs	r0, r3
    4108:	d0ed      	beq.n	40e6 <printKeyboardBuffer+0x4a>
			shifted = true;
    410a:	9002      	str	r0, [sp, #8]
    410c:	e7eb      	b.n	40e6 <printKeyboardBuffer+0x4a>
			controled = true;
    410e:	9203      	str	r2, [sp, #12]
    4110:	e7eb      	b.n	40ea <printKeyboardBuffer+0x4e>
    4112:	4eb4      	ldr	r6, [pc, #720]	; (43e4 <printKeyboardBuffer+0x348>)
	for(int i=0; i<20; i++)
    4114:	003c      	movs	r4, r7
		if(!keyDown(scanCodeBuffer[i]))
    4116:	4bb4      	ldr	r3, [pc, #720]	; (43e8 <printKeyboardBuffer+0x34c>)
    4118:	469a      	mov	sl, r3
    411a:	e00b      	b.n	4134 <printKeyboardBuffer+0x98>
				sendChar(0x1B);
    411c:	301b      	adds	r0, #27
    411e:	4bb3      	ldr	r3, [pc, #716]	; (43ec <printKeyboardBuffer+0x350>)
    4120:	4798      	blx	r3
				if(localEcho)
    4122:	4bb3      	ldr	r3, [pc, #716]	; (43f0 <printKeyboardBuffer+0x354>)
    4124:	781b      	ldrb	r3, [r3, #0]
    4126:	2b00      	cmp	r3, #0
    4128:	d14a      	bne.n	41c0 <printKeyboardBuffer+0x124>
    412a:	3401      	adds	r4, #1
    412c:	3601      	adds	r6, #1
	for(int i = 0 ; i < 20 ; i++)
    412e:	42ac      	cmp	r4, r5
    4130:	d100      	bne.n	4134 <printKeyboardBuffer+0x98>
    4132:	e144      	b.n	43be <printKeyboardBuffer+0x322>
    4134:	9401      	str	r4, [sp, #4]
		if(!keyDown(scanCodeBuffer[i]))
    4136:	7823      	ldrb	r3, [r4, #0]
    4138:	4698      	mov	r8, r3
    413a:	0018      	movs	r0, r3
    413c:	47d0      	blx	sl
    413e:	2800      	cmp	r0, #0
    4140:	d1f3      	bne.n	412a <printKeyboardBuffer+0x8e>
			keyDownBuffer[i] = scanCodeBuffer[i];
    4142:	4643      	mov	r3, r8
    4144:	7033      	strb	r3, [r6, #0]
			if(scanCodeBuffer[i] == 0x00)  //this is escape
    4146:	4643      	mov	r3, r8
    4148:	2b00      	cmp	r3, #0
    414a:	d0e7      	beq.n	411c <printKeyboardBuffer+0x80>
			else if(scanCodeBuffer[i] == 0x01)	//setup button, do something weird here
    414c:	4643      	mov	r3, r8
    414e:	2b01      	cmp	r3, #1
    4150:	d0eb      	beq.n	412a <printKeyboardBuffer+0x8e>
			else if(scanCodeBuffer[i] == 67)		//Break key, set by break enable in settings
    4152:	2b43      	cmp	r3, #67	; 0x43
    4154:	d03a      	beq.n	41cc <printKeyboardBuffer+0x130>
			else if(scanCodeBuffer[i] == 58)   //Return key
    4156:	4643      	mov	r3, r8
    4158:	2b3a      	cmp	r3, #58	; 0x3a
    415a:	d03f      	beq.n	41dc <printKeyboardBuffer+0x140>
			else if(scanCodeBuffer[i] == 12)		//caps lock
    415c:	4643      	mov	r3, r8
    415e:	2b0c      	cmp	r3, #12
    4160:	d078      	beq.n	4254 <printKeyboardBuffer+0x1b8>
			else if(scanCodeBuffer[i] == 3)			//scroll lock
    4162:	4643      	mov	r3, r8
    4164:	2b03      	cmp	r3, #3
    4166:	d07b      	beq.n	4260 <printKeyboardBuffer+0x1c4>
			else if(scanCodeBuffer[i] == 35) //left
    4168:	4643      	mov	r3, r8
    416a:	2b23      	cmp	r3, #35	; 0x23
    416c:	d07e      	beq.n	426c <printKeyboardBuffer+0x1d0>
			else if(scanCodeBuffer[i]  == 45)	//down
    416e:	4643      	mov	r3, r8
    4170:	2b2d      	cmp	r3, #45	; 0x2d
    4172:	d100      	bne.n	4176 <printKeyboardBuffer+0xda>
    4174:	e097      	b.n	42a6 <printKeyboardBuffer+0x20a>
			else if(scanCodeBuffer[i]  == 55)	//up
    4176:	4643      	mov	r3, r8
    4178:	2b37      	cmp	r3, #55	; 0x37
    417a:	d100      	bne.n	417e <printKeyboardBuffer+0xe2>
    417c:	e0b0      	b.n	42e0 <printKeyboardBuffer+0x244>
			else if(scanCodeBuffer[i]  == 65)	//right
    417e:	4643      	mov	r3, r8
    4180:	2b41      	cmp	r3, #65	; 0x41
    4182:	d100      	bne.n	4186 <printKeyboardBuffer+0xea>
    4184:	e0c9      	b.n	431a <printKeyboardBuffer+0x27e>
				if(controled)
    4186:	9b03      	ldr	r3, [sp, #12]
    4188:	2b00      	cmp	r3, #0
    418a:	d000      	beq.n	418e <printKeyboardBuffer+0xf2>
    418c:	e0e2      	b.n	4354 <printKeyboardBuffer+0x2b8>
				else if(capsLock)
    418e:	4b99      	ldr	r3, [pc, #612]	; (43f4 <printKeyboardBuffer+0x358>)
    4190:	781b      	ldrb	r3, [r3, #0]
    4192:	2b00      	cmp	r3, #0
    4194:	d000      	beq.n	4198 <printKeyboardBuffer+0xfc>
    4196:	e0f0      	b.n	437a <printKeyboardBuffer+0x2de>
				else if(shifted)
    4198:	9b02      	ldr	r3, [sp, #8]
    419a:	2b00      	cmp	r3, #0
    419c:	d100      	bne.n	41a0 <printKeyboardBuffer+0x104>
    419e:	e0fd      	b.n	439c <printKeyboardBuffer+0x300>
					sendChar(shiftCase[scanCodeBuffer[i]]);
    41a0:	ab28      	add	r3, sp, #160	; 0xa0
    41a2:	4642      	mov	r2, r8
    41a4:	5c98      	ldrb	r0, [r3, r2]
    41a6:	4b91      	ldr	r3, [pc, #580]	; (43ec <printKeyboardBuffer+0x350>)
    41a8:	4798      	blx	r3
					if(localEcho)
    41aa:	4b91      	ldr	r3, [pc, #580]	; (43f0 <printKeyboardBuffer+0x354>)
    41ac:	781b      	ldrb	r3, [r3, #0]
    41ae:	2b00      	cmp	r3, #0
    41b0:	d0bb      	beq.n	412a <printKeyboardBuffer+0x8e>
						parseChar(shiftCase[scanCodeBuffer[i]]);
    41b2:	9b01      	ldr	r3, [sp, #4]
    41b4:	781b      	ldrb	r3, [r3, #0]
    41b6:	aa28      	add	r2, sp, #160	; 0xa0
    41b8:	5cd0      	ldrb	r0, [r2, r3]
    41ba:	4b8f      	ldr	r3, [pc, #572]	; (43f8 <printKeyboardBuffer+0x35c>)
    41bc:	4798      	blx	r3
    41be:	e7b4      	b.n	412a <printKeyboardBuffer+0x8e>
					ring_put(ouroboros,0x1B);
    41c0:	4b8e      	ldr	r3, [pc, #568]	; (43fc <printKeyboardBuffer+0x360>)
    41c2:	6818      	ldr	r0, [r3, #0]
    41c4:	211b      	movs	r1, #27
    41c6:	4b8e      	ldr	r3, [pc, #568]	; (4400 <printKeyboardBuffer+0x364>)
    41c8:	4798      	blx	r3
    41ca:	e7ae      	b.n	412a <printKeyboardBuffer+0x8e>
				if(breakEnable)
    41cc:	4b8d      	ldr	r3, [pc, #564]	; (4404 <printKeyboardBuffer+0x368>)
    41ce:	781b      	ldrb	r3, [r3, #0]
    41d0:	2b00      	cmp	r3, #0
    41d2:	d0aa      	beq.n	412a <printKeyboardBuffer+0x8e>
					sendChar(0x00);
    41d4:	2000      	movs	r0, #0
    41d6:	4b85      	ldr	r3, [pc, #532]	; (43ec <printKeyboardBuffer+0x350>)
    41d8:	4798      	blx	r3
    41da:	e7a6      	b.n	412a <printKeyboardBuffer+0x8e>
				if(lineFeedNewLine == 1)  //This is Windows; CRLF
    41dc:	4b8a      	ldr	r3, [pc, #552]	; (4408 <printKeyboardBuffer+0x36c>)
    41de:	681b      	ldr	r3, [r3, #0]
    41e0:	2b01      	cmp	r3, #1
    41e2:	d014      	beq.n	420e <printKeyboardBuffer+0x172>
				if(lineFeedNewLine == 2)  //This is Unix, sends LF
    41e4:	4b88      	ldr	r3, [pc, #544]	; (4408 <printKeyboardBuffer+0x36c>)
    41e6:	681b      	ldr	r3, [r3, #0]
    41e8:	2b02      	cmp	r3, #2
    41ea:	d026      	beq.n	423a <printKeyboardBuffer+0x19e>
				if(lineFeedNewLine == 3)  //This is classic mac, sends CR
    41ec:	4b86      	ldr	r3, [pc, #536]	; (4408 <printKeyboardBuffer+0x36c>)
    41ee:	681b      	ldr	r3, [r3, #0]
    41f0:	2b03      	cmp	r3, #3
    41f2:	d19a      	bne.n	412a <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    41f4:	200d      	movs	r0, #13
    41f6:	4b7d      	ldr	r3, [pc, #500]	; (43ec <printKeyboardBuffer+0x350>)
    41f8:	4798      	blx	r3
					if(localEcho)
    41fa:	4b7d      	ldr	r3, [pc, #500]	; (43f0 <printKeyboardBuffer+0x354>)
    41fc:	781b      	ldrb	r3, [r3, #0]
    41fe:	2b00      	cmp	r3, #0
    4200:	d093      	beq.n	412a <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, 0x0D);
    4202:	4b7e      	ldr	r3, [pc, #504]	; (43fc <printKeyboardBuffer+0x360>)
    4204:	6818      	ldr	r0, [r3, #0]
    4206:	210d      	movs	r1, #13
    4208:	4b7d      	ldr	r3, [pc, #500]	; (4400 <printKeyboardBuffer+0x364>)
    420a:	4798      	blx	r3
    420c:	e78d      	b.n	412a <printKeyboardBuffer+0x8e>
					sendChar(0x0D);
    420e:	200d      	movs	r0, #13
    4210:	4b76      	ldr	r3, [pc, #472]	; (43ec <printKeyboardBuffer+0x350>)
    4212:	4698      	mov	r8, r3
    4214:	4798      	blx	r3
					sendChar(0x0A);
    4216:	200a      	movs	r0, #10
    4218:	47c0      	blx	r8
					if(localEcho)
    421a:	4b75      	ldr	r3, [pc, #468]	; (43f0 <printKeyboardBuffer+0x354>)
    421c:	781b      	ldrb	r3, [r3, #0]
    421e:	2b00      	cmp	r3, #0
    4220:	d0e0      	beq.n	41e4 <printKeyboardBuffer+0x148>
						ring_put(ouroboros, 0x0D);
    4222:	4b76      	ldr	r3, [pc, #472]	; (43fc <printKeyboardBuffer+0x360>)
    4224:	4699      	mov	r9, r3
    4226:	210d      	movs	r1, #13
    4228:	6818      	ldr	r0, [r3, #0]
    422a:	4b75      	ldr	r3, [pc, #468]	; (4400 <printKeyboardBuffer+0x364>)
    422c:	4698      	mov	r8, r3
    422e:	4798      	blx	r3
						ring_put(ouroboros, 0x0A);
    4230:	464b      	mov	r3, r9
    4232:	6818      	ldr	r0, [r3, #0]
    4234:	210a      	movs	r1, #10
    4236:	47c0      	blx	r8
    4238:	e7d4      	b.n	41e4 <printKeyboardBuffer+0x148>
					sendChar(0x0A);
    423a:	200a      	movs	r0, #10
    423c:	4b6b      	ldr	r3, [pc, #428]	; (43ec <printKeyboardBuffer+0x350>)
    423e:	4798      	blx	r3
					if(localEcho)
    4240:	4b6b      	ldr	r3, [pc, #428]	; (43f0 <printKeyboardBuffer+0x354>)
    4242:	781b      	ldrb	r3, [r3, #0]
    4244:	2b00      	cmp	r3, #0
    4246:	d0d1      	beq.n	41ec <printKeyboardBuffer+0x150>
						ring_put(ouroboros, 0x0A);
    4248:	4b6c      	ldr	r3, [pc, #432]	; (43fc <printKeyboardBuffer+0x360>)
    424a:	6818      	ldr	r0, [r3, #0]
    424c:	210a      	movs	r1, #10
    424e:	4b6c      	ldr	r3, [pc, #432]	; (4400 <printKeyboardBuffer+0x364>)
    4250:	4798      	blx	r3
    4252:	e7cb      	b.n	41ec <printKeyboardBuffer+0x150>
				capsLock = !capsLock;
    4254:	4a67      	ldr	r2, [pc, #412]	; (43f4 <printKeyboardBuffer+0x358>)
    4256:	7813      	ldrb	r3, [r2, #0]
    4258:	2101      	movs	r1, #1
    425a:	404b      	eors	r3, r1
    425c:	7013      	strb	r3, [r2, #0]
    425e:	e764      	b.n	412a <printKeyboardBuffer+0x8e>
				scrollLock = !scrollLock;
    4260:	4a6a      	ldr	r2, [pc, #424]	; (440c <printKeyboardBuffer+0x370>)
    4262:	7813      	ldrb	r3, [r2, #0]
    4264:	2101      	movs	r1, #1
    4266:	404b      	eors	r3, r1
    4268:	7013      	strb	r3, [r2, #0]
    426a:	e75e      	b.n	412a <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    426c:	201b      	movs	r0, #27
    426e:	4b5f      	ldr	r3, [pc, #380]	; (43ec <printKeyboardBuffer+0x350>)
    4270:	4698      	mov	r8, r3
    4272:	4798      	blx	r3
				sendChar(0x5B);
    4274:	205b      	movs	r0, #91	; 0x5b
    4276:	47c0      	blx	r8
				sendChar(0x44);
    4278:	2044      	movs	r0, #68	; 0x44
    427a:	47c0      	blx	r8
				if(localEcho)
    427c:	4b5c      	ldr	r3, [pc, #368]	; (43f0 <printKeyboardBuffer+0x354>)
    427e:	781b      	ldrb	r3, [r3, #0]
    4280:	2b00      	cmp	r3, #0
    4282:	d100      	bne.n	4286 <printKeyboardBuffer+0x1ea>
    4284:	e751      	b.n	412a <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    4286:	4b5d      	ldr	r3, [pc, #372]	; (43fc <printKeyboardBuffer+0x360>)
    4288:	4699      	mov	r9, r3
    428a:	211b      	movs	r1, #27
    428c:	6818      	ldr	r0, [r3, #0]
    428e:	4b5c      	ldr	r3, [pc, #368]	; (4400 <printKeyboardBuffer+0x364>)
    4290:	4698      	mov	r8, r3
    4292:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    4294:	215b      	movs	r1, #91	; 0x5b
    4296:	464b      	mov	r3, r9
    4298:	6818      	ldr	r0, [r3, #0]
    429a:	47c0      	blx	r8
					ring_put(ouroboros, 0x44);
    429c:	464b      	mov	r3, r9
    429e:	6818      	ldr	r0, [r3, #0]
    42a0:	2144      	movs	r1, #68	; 0x44
    42a2:	47c0      	blx	r8
    42a4:	e741      	b.n	412a <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    42a6:	201b      	movs	r0, #27
    42a8:	4b50      	ldr	r3, [pc, #320]	; (43ec <printKeyboardBuffer+0x350>)
    42aa:	4698      	mov	r8, r3
    42ac:	4798      	blx	r3
				sendChar(0x5B);
    42ae:	205b      	movs	r0, #91	; 0x5b
    42b0:	47c0      	blx	r8
				sendChar(0x42);
    42b2:	2042      	movs	r0, #66	; 0x42
    42b4:	47c0      	blx	r8
				if(localEcho)
    42b6:	4b4e      	ldr	r3, [pc, #312]	; (43f0 <printKeyboardBuffer+0x354>)
    42b8:	781b      	ldrb	r3, [r3, #0]
    42ba:	2b00      	cmp	r3, #0
    42bc:	d100      	bne.n	42c0 <printKeyboardBuffer+0x224>
    42be:	e734      	b.n	412a <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    42c0:	4b4e      	ldr	r3, [pc, #312]	; (43fc <printKeyboardBuffer+0x360>)
    42c2:	4699      	mov	r9, r3
    42c4:	211b      	movs	r1, #27
    42c6:	6818      	ldr	r0, [r3, #0]
    42c8:	4b4d      	ldr	r3, [pc, #308]	; (4400 <printKeyboardBuffer+0x364>)
    42ca:	4698      	mov	r8, r3
    42cc:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    42ce:	215b      	movs	r1, #91	; 0x5b
    42d0:	464b      	mov	r3, r9
    42d2:	6818      	ldr	r0, [r3, #0]
    42d4:	47c0      	blx	r8
					ring_put(ouroboros, 0x42);
    42d6:	464b      	mov	r3, r9
    42d8:	6818      	ldr	r0, [r3, #0]
    42da:	2142      	movs	r1, #66	; 0x42
    42dc:	47c0      	blx	r8
    42de:	e724      	b.n	412a <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    42e0:	201b      	movs	r0, #27
    42e2:	4b42      	ldr	r3, [pc, #264]	; (43ec <printKeyboardBuffer+0x350>)
    42e4:	4698      	mov	r8, r3
    42e6:	4798      	blx	r3
				sendChar(0x5B);
    42e8:	205b      	movs	r0, #91	; 0x5b
    42ea:	47c0      	blx	r8
				sendChar(0x41);
    42ec:	2041      	movs	r0, #65	; 0x41
    42ee:	47c0      	blx	r8
				if(localEcho)
    42f0:	4b3f      	ldr	r3, [pc, #252]	; (43f0 <printKeyboardBuffer+0x354>)
    42f2:	781b      	ldrb	r3, [r3, #0]
    42f4:	2b00      	cmp	r3, #0
    42f6:	d100      	bne.n	42fa <printKeyboardBuffer+0x25e>
    42f8:	e717      	b.n	412a <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    42fa:	4b40      	ldr	r3, [pc, #256]	; (43fc <printKeyboardBuffer+0x360>)
    42fc:	4699      	mov	r9, r3
    42fe:	211b      	movs	r1, #27
    4300:	6818      	ldr	r0, [r3, #0]
    4302:	4b3f      	ldr	r3, [pc, #252]	; (4400 <printKeyboardBuffer+0x364>)
    4304:	4698      	mov	r8, r3
    4306:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    4308:	215b      	movs	r1, #91	; 0x5b
    430a:	464b      	mov	r3, r9
    430c:	6818      	ldr	r0, [r3, #0]
    430e:	47c0      	blx	r8
					ring_put(ouroboros, 0x41);
    4310:	464b      	mov	r3, r9
    4312:	6818      	ldr	r0, [r3, #0]
    4314:	2141      	movs	r1, #65	; 0x41
    4316:	47c0      	blx	r8
    4318:	e707      	b.n	412a <printKeyboardBuffer+0x8e>
				sendChar(0x1B);
    431a:	201b      	movs	r0, #27
    431c:	4b33      	ldr	r3, [pc, #204]	; (43ec <printKeyboardBuffer+0x350>)
    431e:	4698      	mov	r8, r3
    4320:	4798      	blx	r3
				sendChar(0x5B);
    4322:	205b      	movs	r0, #91	; 0x5b
    4324:	47c0      	blx	r8
				sendChar(0x43);
    4326:	2043      	movs	r0, #67	; 0x43
    4328:	47c0      	blx	r8
				if(localEcho)
    432a:	4b31      	ldr	r3, [pc, #196]	; (43f0 <printKeyboardBuffer+0x354>)
    432c:	781b      	ldrb	r3, [r3, #0]
    432e:	2b00      	cmp	r3, #0
    4330:	d100      	bne.n	4334 <printKeyboardBuffer+0x298>
    4332:	e6fa      	b.n	412a <printKeyboardBuffer+0x8e>
					ring_put(ouroboros, 0x1B);
    4334:	4b31      	ldr	r3, [pc, #196]	; (43fc <printKeyboardBuffer+0x360>)
    4336:	4699      	mov	r9, r3
    4338:	211b      	movs	r1, #27
    433a:	6818      	ldr	r0, [r3, #0]
    433c:	4b30      	ldr	r3, [pc, #192]	; (4400 <printKeyboardBuffer+0x364>)
    433e:	4698      	mov	r8, r3
    4340:	4798      	blx	r3
					ring_put(ouroboros, 0x5B);
    4342:	215b      	movs	r1, #91	; 0x5b
    4344:	464b      	mov	r3, r9
    4346:	6818      	ldr	r0, [r3, #0]
    4348:	47c0      	blx	r8
					ring_put(ouroboros, 0x43);
    434a:	464b      	mov	r3, r9
    434c:	6818      	ldr	r0, [r3, #0]
    434e:	2143      	movs	r1, #67	; 0x43
    4350:	47c0      	blx	r8
    4352:	e6ea      	b.n	412a <printKeyboardBuffer+0x8e>
					sendChar(controlCase[scanCodeBuffer[i]]);
    4354:	ab04      	add	r3, sp, #16
    4356:	4642      	mov	r2, r8
    4358:	5c98      	ldrb	r0, [r3, r2]
    435a:	4b24      	ldr	r3, [pc, #144]	; (43ec <printKeyboardBuffer+0x350>)
    435c:	4798      	blx	r3
					if(localEcho)
    435e:	4b24      	ldr	r3, [pc, #144]	; (43f0 <printKeyboardBuffer+0x354>)
    4360:	781b      	ldrb	r3, [r3, #0]
    4362:	2b00      	cmp	r3, #0
    4364:	d100      	bne.n	4368 <printKeyboardBuffer+0x2cc>
    4366:	e6e0      	b.n	412a <printKeyboardBuffer+0x8e>
						ring_put(ouroboros, controlCase[scanCodeBuffer[i]]);
    4368:	9b01      	ldr	r3, [sp, #4]
    436a:	781b      	ldrb	r3, [r3, #0]
    436c:	aa04      	add	r2, sp, #16
    436e:	5cd1      	ldrb	r1, [r2, r3]
    4370:	4b22      	ldr	r3, [pc, #136]	; (43fc <printKeyboardBuffer+0x360>)
    4372:	6818      	ldr	r0, [r3, #0]
    4374:	4b22      	ldr	r3, [pc, #136]	; (4400 <printKeyboardBuffer+0x364>)
    4376:	4798      	blx	r3
    4378:	e6d7      	b.n	412a <printKeyboardBuffer+0x8e>
					sendChar(capsLockCase[scanCodeBuffer[i]]);
    437a:	ab16      	add	r3, sp, #88	; 0x58
    437c:	4642      	mov	r2, r8
    437e:	5c98      	ldrb	r0, [r3, r2]
    4380:	4b1a      	ldr	r3, [pc, #104]	; (43ec <printKeyboardBuffer+0x350>)
    4382:	4798      	blx	r3
					if(localEcho)
    4384:	4b1a      	ldr	r3, [pc, #104]	; (43f0 <printKeyboardBuffer+0x354>)
    4386:	781b      	ldrb	r3, [r3, #0]
    4388:	2b00      	cmp	r3, #0
    438a:	d100      	bne.n	438e <printKeyboardBuffer+0x2f2>
    438c:	e6cd      	b.n	412a <printKeyboardBuffer+0x8e>
						parseChar(capsLockCase[scanCodeBuffer[i]]);
    438e:	9b01      	ldr	r3, [sp, #4]
    4390:	781b      	ldrb	r3, [r3, #0]
    4392:	aa16      	add	r2, sp, #88	; 0x58
    4394:	5cd0      	ldrb	r0, [r2, r3]
    4396:	4b18      	ldr	r3, [pc, #96]	; (43f8 <printKeyboardBuffer+0x35c>)
    4398:	4798      	blx	r3
    439a:	e6c6      	b.n	412a <printKeyboardBuffer+0x8e>
					sendChar(noCase[scanCodeBuffer[i]]);
    439c:	ab3a      	add	r3, sp, #232	; 0xe8
    439e:	4642      	mov	r2, r8
    43a0:	5c98      	ldrb	r0, [r3, r2]
    43a2:	4b12      	ldr	r3, [pc, #72]	; (43ec <printKeyboardBuffer+0x350>)
    43a4:	4798      	blx	r3
					if(localEcho)
    43a6:	4b12      	ldr	r3, [pc, #72]	; (43f0 <printKeyboardBuffer+0x354>)
    43a8:	781b      	ldrb	r3, [r3, #0]
    43aa:	2b00      	cmp	r3, #0
    43ac:	d100      	bne.n	43b0 <printKeyboardBuffer+0x314>
    43ae:	e6bc      	b.n	412a <printKeyboardBuffer+0x8e>
						parseChar(noCase[scanCodeBuffer[i]]);
    43b0:	9b01      	ldr	r3, [sp, #4]
    43b2:	781b      	ldrb	r3, [r3, #0]
    43b4:	aa3a      	add	r2, sp, #232	; 0xe8
    43b6:	5cd0      	ldrb	r0, [r2, r3]
    43b8:	4b0f      	ldr	r3, [pc, #60]	; (43f8 <printKeyboardBuffer+0x35c>)
    43ba:	4798      	blx	r3
    43bc:	e6b5      	b.n	412a <printKeyboardBuffer+0x8e>
		scanCodeBuffer[i] = 0xFF;
    43be:	23ff      	movs	r3, #255	; 0xff
    43c0:	703b      	strb	r3, [r7, #0]
    43c2:	3701      	adds	r7, #1
	for(int i = 0 ; i < 20 ; i++)
    43c4:	42bc      	cmp	r4, r7
    43c6:	d1fb      	bne.n	43c0 <printKeyboardBuffer+0x324>
}
    43c8:	b04c      	add	sp, #304	; 0x130
    43ca:	bc1c      	pop	{r2, r3, r4}
    43cc:	4690      	mov	r8, r2
    43ce:	4699      	mov	r9, r3
    43d0:	46a2      	mov	sl, r4
    43d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43d4:	00008970 	.word	0x00008970
    43d8:	000053b5 	.word	0x000053b5
    43dc:	000089f0 	.word	0x000089f0
    43e0:	20000040 	.word	0x20000040
    43e4:	2000002c 	.word	0x2000002c
    43e8:	00004071 	.word	0x00004071
    43ec:	00001f31 	.word	0x00001f31
    43f0:	20000198 	.word	0x20000198
    43f4:	20000561 	.word	0x20000561
    43f8:	00001b89 	.word	0x00001b89
    43fc:	20000588 	.word	0x20000588
    4400:	00000141 	.word	0x00000141
    4404:	200004e6 	.word	0x200004e6
    4408:	20000194 	.word	0x20000194
    440c:	20000581 	.word	0x20000581

00004410 <removeFromKeyDown>:

void removeFromKeyDown(int scancode)
{
    4410:	b510      	push	{r4, lr}
    4412:	4b07      	ldr	r3, [pc, #28]	; (4430 <removeFromKeyDown+0x20>)
    4414:	0019      	movs	r1, r3
    4416:	3114      	adds	r1, #20
	for(int i = 0 ; i < 20 ; i++)
	{
		if(keyDownBuffer[i] == scancode)
		{
			keyDownBuffer[i] = 0xFF;
    4418:	24ff      	movs	r4, #255	; 0xff
    441a:	e002      	b.n	4422 <removeFromKeyDown+0x12>
    441c:	3301      	adds	r3, #1
	for(int i = 0 ; i < 20 ; i++)
    441e:	428b      	cmp	r3, r1
    4420:	d004      	beq.n	442c <removeFromKeyDown+0x1c>
		if(keyDownBuffer[i] == scancode)
    4422:	781a      	ldrb	r2, [r3, #0]
    4424:	4282      	cmp	r2, r0
    4426:	d1f9      	bne.n	441c <removeFromKeyDown+0xc>
			keyDownBuffer[i] = 0xFF;
    4428:	701c      	strb	r4, [r3, #0]
    442a:	e7f7      	b.n	441c <removeFromKeyDown+0xc>
		}
	}
}
    442c:	bd10      	pop	{r4, pc}
    442e:	46c0      	nop			; (mov r8, r8)
    4430:	2000002c 	.word	0x2000002c

00004434 <readKeyboard>:
{
    4434:	b5f0      	push	{r4, r5, r6, r7, lr}
    4436:	46de      	mov	lr, fp
    4438:	4657      	mov	r7, sl
    443a:	464e      	mov	r6, r9
    443c:	4645      	mov	r5, r8
    443e:	b5e0      	push	{r5, r6, r7, lr}
    4440:	b083      	sub	sp, #12
    4442:	4e6d      	ldr	r6, [pc, #436]	; (45f8 <readKeyboard+0x1c4>)
    4444:	0031      	movs	r1, r6
    4446:	3119      	adds	r1, #25
    4448:	31ff      	adds	r1, #255	; 0xff
    444a:	0033      	movs	r3, r6
		scanCodes[i] = 0xFF;
    444c:	22ff      	movs	r2, #255	; 0xff
    444e:	c304      	stmia	r3!, {r2}
	for(i = 0 ; i < 70 ; i++)
    4450:	428b      	cmp	r3, r1
    4452:	d1fc      	bne.n	444e <readKeyboard+0x1a>
	PORT->Group[0].WRCONFIG.bit.DRVSTR = 1;
    4454:	4a69      	ldr	r2, [pc, #420]	; (45fc <readKeyboard+0x1c8>)
    4456:	6a91      	ldr	r1, [r2, #40]	; 0x28
    4458:	2380      	movs	r3, #128	; 0x80
    445a:	03db      	lsls	r3, r3, #15
    445c:	430b      	orrs	r3, r1
    445e:	6293      	str	r3, [r2, #40]	; 0x28
    4460:	4c67      	ldr	r4, [pc, #412]	; (4600 <readKeyboard+0x1cc>)
    4462:	341c      	adds	r4, #28
    4464:	4b66      	ldr	r3, [pc, #408]	; (4600 <readKeyboard+0x1cc>)
		REG_PORT_DIRSET0 = kb_col[i];
    4466:	4867      	ldr	r0, [pc, #412]	; (4604 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_col[i];
    4468:	4967      	ldr	r1, [pc, #412]	; (4608 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_col[i];
    446a:	681a      	ldr	r2, [r3, #0]
    446c:	6002      	str	r2, [r0, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    446e:	cb04      	ldmia	r3!, {r2}
    4470:	600a      	str	r2, [r1, #0]
	for (i = 0; i < NUM_COL; i++) {
    4472:	42a3      	cmp	r3, r4
    4474:	d1f9      	bne.n	446a <readKeyboard+0x36>
    4476:	2200      	movs	r2, #0
		REG_PORT_DIRCLR0 = kb_row[i];
    4478:	4b64      	ldr	r3, [pc, #400]	; (460c <readKeyboard+0x1d8>)
    447a:	469c      	mov	ip, r3
    447c:	4f64      	ldr	r7, [pc, #400]	; (4610 <readKeyboard+0x1dc>)
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    447e:	4d65      	ldr	r5, [pc, #404]	; (4614 <readKeyboard+0x1e0>)
    4480:	2404      	movs	r4, #4
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    4482:	2002      	movs	r0, #2
		REG_PORT_DIRCLR0 = kb_row[i];
    4484:	4663      	mov	r3, ip
    4486:	58d3      	ldr	r3, [r2, r3]
    4488:	603b      	str	r3, [r7, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.PULLEN = 1;
    448a:	5953      	ldr	r3, [r2, r5]
    448c:	4962      	ldr	r1, [pc, #392]	; (4618 <readKeyboard+0x1e4>)
    448e:	4688      	mov	r8, r1
    4490:	4443      	add	r3, r8
    4492:	7819      	ldrb	r1, [r3, #0]
    4494:	4321      	orrs	r1, r4
    4496:	7019      	strb	r1, [r3, #0]
		PORT->Group[0].PINCFG[kb_row_index[i]].bit.INEN = 1;
    4498:	7819      	ldrb	r1, [r3, #0]
    449a:	4301      	orrs	r1, r0
    449c:	7019      	strb	r1, [r3, #0]
    449e:	3204      	adds	r2, #4
	for (i = 0; i < NUM_ROW; i++) {
    44a0:	2a28      	cmp	r2, #40	; 0x28
    44a2:	d1ef      	bne.n	4484 <readKeyboard+0x50>
    44a4:	4b56      	ldr	r3, [pc, #344]	; (4600 <readKeyboard+0x1cc>)
    44a6:	4699      	mov	r9, r3
    44a8:	2300      	movs	r3, #0
    44aa:	4698      	mov	r8, r3
    44ac:	2200      	movs	r2, #0
		REG_PORT_OUTSET0 = kb_col[i];
    44ae:	4b5b      	ldr	r3, [pc, #364]	; (461c <readKeyboard+0x1e8>)
    44b0:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    44b2:	4d52      	ldr	r5, [pc, #328]	; (45fc <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    44b4:	4b50      	ldr	r3, [pc, #320]	; (45f8 <readKeyboard+0x1c4>)
    44b6:	469c      	mov	ip, r3
		REG_PORT_OUTCLR0 = kb_col[i];
    44b8:	4b53      	ldr	r3, [pc, #332]	; (4608 <readKeyboard+0x1d4>)
    44ba:	469a      	mov	sl, r3
    44bc:	9601      	str	r6, [sp, #4]
    44be:	464e      	mov	r6, r9
    44c0:	4647      	mov	r7, r8
    44c2:	e015      	b.n	44f0 <readKeyboard+0xbc>
    44c4:	3304      	adds	r3, #4
    44c6:	3101      	adds	r1, #1
		for (j = 0; j < NUM_ROW; j++) {	
    44c8:	42a3      	cmp	r3, r4
    44ca:	d008      	beq.n	44de <readKeyboard+0xaa>
			if((PORT->Group[0].IN.reg & kb_row[j]) != 0) {
    44cc:	6a28      	ldr	r0, [r5, #32]
    44ce:	681e      	ldr	r6, [r3, #0]
    44d0:	4206      	tst	r6, r0
    44d2:	d0f7      	beq.n	44c4 <readKeyboard+0x90>
				scanCodes[scanCodeIndex] = (i * NUM_ROW) + j;
    44d4:	0090      	lsls	r0, r2, #2
    44d6:	4666      	mov	r6, ip
    44d8:	5181      	str	r1, [r0, r6]
				scanCodeIndex++;
    44da:	3201      	adds	r2, #1
    44dc:	e7f2      	b.n	44c4 <readKeyboard+0x90>
    44de:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_col[i];
    44e0:	4649      	mov	r1, r9
    44e2:	6809      	ldr	r1, [r1, #0]
    44e4:	4650      	mov	r0, sl
    44e6:	6001      	str	r1, [r0, #0]
    44e8:	3604      	adds	r6, #4
    44ea:	370a      	adds	r7, #10
	for (i = 0; i < NUM_COL; i++) {
    44ec:	2f46      	cmp	r7, #70	; 0x46
    44ee:	d00a      	beq.n	4506 <readKeyboard+0xd2>
    44f0:	46b1      	mov	r9, r6
		REG_PORT_OUTSET0 = kb_col[i];
    44f2:	465b      	mov	r3, fp
    44f4:	6831      	ldr	r1, [r6, #0]
    44f6:	6019      	str	r1, [r3, #0]
    44f8:	4b44      	ldr	r3, [pc, #272]	; (460c <readKeyboard+0x1d8>)
    44fa:	4698      	mov	r8, r3
    44fc:	001c      	movs	r4, r3
    44fe:	3428      	adds	r4, #40	; 0x28
    4500:	0039      	movs	r1, r7
    4502:	9600      	str	r6, [sp, #0]
    4504:	e7e2      	b.n	44cc <readKeyboard+0x98>
    4506:	4647      	mov	r7, r8
    4508:	9e01      	ldr	r6, [sp, #4]
    450a:	4641      	mov	r1, r8
		REG_PORT_DIRSET0 = kb_row[i];
    450c:	4d3d      	ldr	r5, [pc, #244]	; (4604 <readKeyboard+0x1d0>)
		REG_PORT_OUTCLR0 = kb_row[i];
    450e:	4c3e      	ldr	r4, [pc, #248]	; (4608 <readKeyboard+0x1d4>)
		REG_PORT_DIRSET0 = kb_row[i];
    4510:	6808      	ldr	r0, [r1, #0]
    4512:	6028      	str	r0, [r5, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    4514:	c901      	ldmia	r1!, {r0}
    4516:	6020      	str	r0, [r4, #0]
	for (i = 0; i < NUM_ROW; i++) {
    4518:	4299      	cmp	r1, r3
    451a:	d1f9      	bne.n	4510 <readKeyboard+0xdc>
    451c:	2100      	movs	r1, #0
		REG_PORT_DIRCLR0 = kb_col[i];
    451e:	4b38      	ldr	r3, [pc, #224]	; (4600 <readKeyboard+0x1cc>)
    4520:	4699      	mov	r9, r3
    4522:	4b3b      	ldr	r3, [pc, #236]	; (4610 <readKeyboard+0x1dc>)
    4524:	4698      	mov	r8, r3
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    4526:	4b3e      	ldr	r3, [pc, #248]	; (4620 <readKeyboard+0x1ec>)
    4528:	469c      	mov	ip, r3
    452a:	2504      	movs	r5, #4
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    452c:	2402      	movs	r4, #2
		REG_PORT_DIRCLR0 = kb_col[i];
    452e:	4643      	mov	r3, r8
    4530:	4648      	mov	r0, r9
    4532:	5808      	ldr	r0, [r1, r0]
    4534:	6018      	str	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.PULLEN = 1;
    4536:	4663      	mov	r3, ip
    4538:	58cb      	ldr	r3, [r1, r3]
    453a:	4837      	ldr	r0, [pc, #220]	; (4618 <readKeyboard+0x1e4>)
    453c:	4682      	mov	sl, r0
    453e:	4453      	add	r3, sl
    4540:	7818      	ldrb	r0, [r3, #0]
    4542:	4328      	orrs	r0, r5
    4544:	7018      	strb	r0, [r3, #0]
		PORT->Group[0].PINCFG[kb_col_index[i]].bit.INEN = 1;
    4546:	7818      	ldrb	r0, [r3, #0]
    4548:	4320      	orrs	r0, r4
    454a:	7018      	strb	r0, [r3, #0]
    454c:	3104      	adds	r1, #4
	for (i = 0; i < NUM_COL; i++) {
    454e:	291c      	cmp	r1, #28
    4550:	d1ed      	bne.n	452e <readKeyboard+0xfa>
    4552:	2300      	movs	r3, #0
    4554:	469c      	mov	ip, r3
		REG_PORT_OUTSET0 = kb_row[i];
    4556:	4b31      	ldr	r3, [pc, #196]	; (461c <readKeyboard+0x1e8>)
    4558:	469b      	mov	fp, r3
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    455a:	4d28      	ldr	r5, [pc, #160]	; (45fc <readKeyboard+0x1c8>)
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    455c:	4b26      	ldr	r3, [pc, #152]	; (45f8 <readKeyboard+0x1c4>)
    455e:	4698      	mov	r8, r3
		REG_PORT_OUTCLR0 = kb_row[i];
    4560:	4b29      	ldr	r3, [pc, #164]	; (4608 <readKeyboard+0x1d4>)
    4562:	469a      	mov	sl, r3
    4564:	46b1      	mov	r9, r6
    4566:	003e      	movs	r6, r7
    4568:	4667      	mov	r7, ip
    456a:	e015      	b.n	4598 <readKeyboard+0x164>
    456c:	3104      	adds	r1, #4
    456e:	330a      	adds	r3, #10
		for (j = 0; j < NUM_COL; j++) {
    4570:	42a3      	cmp	r3, r4
    4572:	d008      	beq.n	4586 <readKeyboard+0x152>
			if((PORT->Group[0].IN.reg & kb_col[j]) != 0)
    4574:	6a28      	ldr	r0, [r5, #32]
    4576:	680e      	ldr	r6, [r1, #0]
    4578:	4206      	tst	r6, r0
    457a:	d0f7      	beq.n	456c <readKeyboard+0x138>
				scanCodes[scanCodeIndex] = (j * NUM_ROW) + i;
    457c:	0090      	lsls	r0, r2, #2
    457e:	4646      	mov	r6, r8
    4580:	5183      	str	r3, [r0, r6]
				scanCodeIndex++;
    4582:	3201      	adds	r2, #1
    4584:	e7f2      	b.n	456c <readKeyboard+0x138>
    4586:	9e00      	ldr	r6, [sp, #0]
		REG_PORT_OUTCLR0 = kb_row[i];
    4588:	4663      	mov	r3, ip
    458a:	681b      	ldr	r3, [r3, #0]
    458c:	4651      	mov	r1, sl
    458e:	600b      	str	r3, [r1, #0]
	for (i = 0; i < NUM_ROW; i++) {
    4590:	3701      	adds	r7, #1
    4592:	3604      	adds	r6, #4
    4594:	2f0a      	cmp	r7, #10
    4596:	d009      	beq.n	45ac <readKeyboard+0x178>
    4598:	46b4      	mov	ip, r6
		REG_PORT_OUTSET0 = kb_row[i];
    459a:	465b      	mov	r3, fp
    459c:	6831      	ldr	r1, [r6, #0]
    459e:	6019      	str	r1, [r3, #0]
    45a0:	003b      	movs	r3, r7
    45a2:	003c      	movs	r4, r7
    45a4:	3446      	adds	r4, #70	; 0x46
    45a6:	4916      	ldr	r1, [pc, #88]	; (4600 <readKeyboard+0x1cc>)
    45a8:	9600      	str	r6, [sp, #0]
    45aa:	e7e3      	b.n	4574 <readKeyboard+0x140>
    45ac:	464e      	mov	r6, r9
	for(i = 0 ; i < scanCodeIndex ; i++)
    45ae:	2a00      	cmp	r2, #0
    45b0:	dd08      	ble.n	45c4 <readKeyboard+0x190>
    45b2:	4b1c      	ldr	r3, [pc, #112]	; (4624 <readKeyboard+0x1f0>)
    45b4:	0092      	lsls	r2, r2, #2
    45b6:	4910      	ldr	r1, [pc, #64]	; (45f8 <readKeyboard+0x1c4>)
    45b8:	188a      	adds	r2, r1, r2
		scanCodeBuffer[i] = scanCodes[i];	
    45ba:	ce02      	ldmia	r6!, {r1}
    45bc:	7019      	strb	r1, [r3, #0]
    45be:	3301      	adds	r3, #1
	for(i = 0 ; i < scanCodeIndex ; i++)
    45c0:	42b2      	cmp	r2, r6
    45c2:	d1fa      	bne.n	45ba <readKeyboard+0x186>
		REG_PORT_OUTSET0 = kb_row[i];
    45c4:	2400      	movs	r4, #0
		if(keyDown(i) && !scanCodesContains(i))
    45c6:	4d18      	ldr	r5, [pc, #96]	; (4628 <readKeyboard+0x1f4>)
    45c8:	4e18      	ldr	r6, [pc, #96]	; (462c <readKeyboard+0x1f8>)
			removeFromKeyDown(i);
    45ca:	4f19      	ldr	r7, [pc, #100]	; (4630 <readKeyboard+0x1fc>)
    45cc:	e002      	b.n	45d4 <readKeyboard+0x1a0>
	for(i = 0; i < 70; i++)
    45ce:	3401      	adds	r4, #1
    45d0:	2c46      	cmp	r4, #70	; 0x46
    45d2:	d00a      	beq.n	45ea <readKeyboard+0x1b6>
		if(keyDown(i) && !scanCodesContains(i))
    45d4:	0020      	movs	r0, r4
    45d6:	47a8      	blx	r5
    45d8:	2800      	cmp	r0, #0
    45da:	d0f8      	beq.n	45ce <readKeyboard+0x19a>
    45dc:	0020      	movs	r0, r4
    45de:	47b0      	blx	r6
    45e0:	2800      	cmp	r0, #0
    45e2:	d1f4      	bne.n	45ce <readKeyboard+0x19a>
			removeFromKeyDown(i);
    45e4:	0020      	movs	r0, r4
    45e6:	47b8      	blx	r7
    45e8:	e7f1      	b.n	45ce <readKeyboard+0x19a>
}
    45ea:	b003      	add	sp, #12
    45ec:	bc3c      	pop	{r2, r3, r4, r5}
    45ee:	4690      	mov	r8, r2
    45f0:	4699      	mov	r9, r3
    45f2:	46a2      	mov	sl, r4
    45f4:	46ab      	mov	fp, r5
    45f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45f8:	20000054 	.word	0x20000054
    45fc:	41004400 	.word	0x41004400
    4600:	00008a90 	.word	0x00008a90
    4604:	41004408 	.word	0x41004408
    4608:	41004414 	.word	0x41004414
    460c:	00008ac8 	.word	0x00008ac8
    4610:	41004404 	.word	0x41004404
    4614:	00008af0 	.word	0x00008af0
    4618:	41004440 	.word	0x41004440
    461c:	41004418 	.word	0x41004418
    4620:	00008aac 	.word	0x00008aac
    4624:	20000040 	.word	0x20000040
    4628:	00004071 	.word	0x00004071
    462c:	00004045 	.word	0x00004045
    4630:	00004411 	.word	0x00004411

00004634 <setColorRGB>:

uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
    4634:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    4636:	094b      	lsrs	r3, r1, #5
    4638:	2407      	movs	r4, #7
    463a:	43a0      	bics	r0, r4
    463c:	4318      	orrs	r0, r3
    463e:	4b05      	ldr	r3, [pc, #20]	; (4654 <setColorRGB+0x20>)
    4640:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    4642:	00c9      	lsls	r1, r1, #3
    4644:	23e0      	movs	r3, #224	; 0xe0
    4646:	4019      	ands	r1, r3
    4648:	08d2      	lsrs	r2, r2, #3
    464a:	430a      	orrs	r2, r1
    464c:	4b02      	ldr	r3, [pc, #8]	; (4658 <setColorRGB+0x24>)
    464e:	801a      	strh	r2, [r3, #0]
}
    4650:	bd10      	pop	{r4, pc}
    4652:	46c0      	nop			; (mov r8, r8)
    4654:	200032ee 	.word	0x200032ee
    4658:	200032f0 	.word	0x200032f0

0000465c <setBackColorRGB>:
	fore_Color_Low = (color & 0xFF);
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
    465c:	b510      	push	{r4, lr}
	back_Color_High = ((r&248)|g>>5);
    465e:	094b      	lsrs	r3, r1, #5
    4660:	2407      	movs	r4, #7
    4662:	43a0      	bics	r0, r4
    4664:	4318      	orrs	r0, r3
    4666:	4b05      	ldr	r3, [pc, #20]	; (467c <setBackColorRGB+0x20>)
    4668:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    466a:	00c9      	lsls	r1, r1, #3
    466c:	23e0      	movs	r3, #224	; 0xe0
    466e:	4019      	ands	r1, r3
    4670:	08d2      	lsrs	r2, r2, #3
    4672:	430a      	orrs	r2, r1
    4674:	4b02      	ldr	r3, [pc, #8]	; (4680 <setBackColorRGB+0x24>)
    4676:	801a      	strh	r2, [r3, #0]
}
    4678:	bd10      	pop	{r4, pc}
    467a:	46c0      	nop			; (mov r8, r8)
    467c:	200032f2 	.word	0x200032f2
    4680:	200032ec 	.word	0x200032ec

00004684 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    4684:	b570      	push	{r4, r5, r6, lr}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    4686:	4c19      	ldr	r4, [pc, #100]	; (46ec <LCD_Fast_Fill+0x68>)
    4688:	4b19      	ldr	r3, [pc, #100]	; (46f0 <LCD_Fast_Fill+0x6c>)
    468a:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    468c:	0200      	lsls	r0, r0, #8
    468e:	4301      	orrs	r1, r0
    4690:	4b18      	ldr	r3, [pc, #96]	; (46f4 <LCD_Fast_Fill+0x70>)
    4692:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    4694:	17d3      	asrs	r3, r2, #31
    4696:	260f      	movs	r6, #15
    4698:	401e      	ands	r6, r3
    469a:	18b6      	adds	r6, r6, r2
    469c:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    469e:	2500      	movs	r5, #0
    46a0:	2e00      	cmp	r6, #0
    46a2:	dd0c      	ble.n	46be <LCD_Fast_Fill+0x3a>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    46a4:	4c12      	ldr	r4, [pc, #72]	; (46f0 <LCD_Fast_Fill+0x6c>)
    46a6:	2180      	movs	r1, #128	; 0x80
    46a8:	0289      	lsls	r1, r1, #10
			REG_PORT_OUTSET1 = LCD_WR;
    46aa:	4812      	ldr	r0, [pc, #72]	; (46f4 <LCD_Fast_Fill+0x70>)
{
    46ac:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    46ae:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    46b0:	6001      	str	r1, [r0, #0]
    46b2:	3b01      	subs	r3, #1
		for (int j=0; j<16; j++)
    46b4:	2b00      	cmp	r3, #0
    46b6:	d1fa      	bne.n	46ae <LCD_Fast_Fill+0x2a>
	for (int i=0; i<blocks; i++)
    46b8:	3501      	adds	r5, #1
    46ba:	42ae      	cmp	r6, r5
    46bc:	d1f6      	bne.n	46ac <LCD_Fast_Fill+0x28>
		}
	}
	
	if ((pix % 16) != 0)
    46be:	0713      	lsls	r3, r2, #28
    46c0:	d013      	beq.n	46ea <LCD_Fast_Fill+0x66>
	for (int i=0; i<(pix % 16)+1; i++)
    46c2:	17d3      	asrs	r3, r2, #31
    46c4:	0f1b      	lsrs	r3, r3, #28
    46c6:	18d2      	adds	r2, r2, r3
    46c8:	210f      	movs	r1, #15
    46ca:	4011      	ands	r1, r2
    46cc:	1ac9      	subs	r1, r1, r3
    46ce:	1c4b      	adds	r3, r1, #1
    46d0:	2b00      	cmp	r3, #0
    46d2:	dd0a      	ble.n	46ea <LCD_Fast_Fill+0x66>
    46d4:	0019      	movs	r1, r3
    46d6:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    46d8:	4c05      	ldr	r4, [pc, #20]	; (46f0 <LCD_Fast_Fill+0x6c>)
    46da:	2280      	movs	r2, #128	; 0x80
    46dc:	0292      	lsls	r2, r2, #10
		REG_PORT_OUTSET1 = LCD_WR;
    46de:	4805      	ldr	r0, [pc, #20]	; (46f4 <LCD_Fast_Fill+0x70>)
		REG_PORT_OUTCLR1 = LCD_WR;
    46e0:	6022      	str	r2, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    46e2:	6002      	str	r2, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    46e4:	3301      	adds	r3, #1
    46e6:	4299      	cmp	r1, r3
    46e8:	d1fa      	bne.n	46e0 <LCD_Fast_Fill+0x5c>
	}
}
    46ea:	bd70      	pop	{r4, r5, r6, pc}
    46ec:	0000ffff 	.word	0x0000ffff
    46f0:	41004494 	.word	0x41004494
    46f4:	41004498 	.word	0x41004498

000046f8 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    46f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46fa:	b083      	sub	sp, #12
    46fc:	0007      	movs	r7, r0
    46fe:	9100      	str	r1, [sp, #0]
    4700:	0016      	movs	r6, r2
    4702:	9301      	str	r3, [sp, #4]
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    4704:	2100      	movs	r1, #0
    4706:	202a      	movs	r0, #42	; 0x2a
    4708:	4c17      	ldr	r4, [pc, #92]	; (4768 <setXY+0x70>)
    470a:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    470c:	0a38      	lsrs	r0, r7, #8
    470e:	4d17      	ldr	r5, [pc, #92]	; (476c <setXY+0x74>)
    4710:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    4712:	2101      	movs	r1, #1
    4714:	202a      	movs	r0, #42	; 0x2a
    4716:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    4718:	b2f8      	uxtb	r0, r7
    471a:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    471c:	2102      	movs	r1, #2
    471e:	202a      	movs	r0, #42	; 0x2a
    4720:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    4722:	0a30      	lsrs	r0, r6, #8
    4724:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    4726:	2103      	movs	r1, #3
    4728:	202a      	movs	r0, #42	; 0x2a
    472a:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    472c:	b2f0      	uxtb	r0, r6
    472e:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    4730:	2100      	movs	r1, #0
    4732:	202b      	movs	r0, #43	; 0x2b
    4734:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    4736:	9e00      	ldr	r6, [sp, #0]
    4738:	0a30      	lsrs	r0, r6, #8
    473a:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    473c:	2101      	movs	r1, #1
    473e:	202b      	movs	r0, #43	; 0x2b
    4740:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    4742:	b2f0      	uxtb	r0, r6
    4744:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    4746:	2102      	movs	r1, #2
    4748:	202b      	movs	r0, #43	; 0x2b
    474a:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    474c:	9e01      	ldr	r6, [sp, #4]
    474e:	0a30      	lsrs	r0, r6, #8
    4750:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    4752:	2103      	movs	r1, #3
    4754:	202b      	movs	r0, #43	; 0x2b
    4756:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    4758:	b2f0      	uxtb	r0, r6
    475a:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    475c:	2100      	movs	r1, #0
    475e:	202c      	movs	r0, #44	; 0x2c
    4760:	47a0      	blx	r4
}
    4762:	b003      	add	sp, #12
    4764:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4766:	46c0      	nop			; (mov r8, r8)
    4768:	0000489d 	.word	0x0000489d
    476c:	000048cd 	.word	0x000048cd

00004770 <fillRect>:
{
    4770:	b5f0      	push	{r4, r5, r6, r7, lr}
    4772:	46ce      	mov	lr, r9
    4774:	4647      	mov	r7, r8
    4776:	b580      	push	{r7, lr}
    4778:	b083      	sub	sp, #12
    477a:	0006      	movs	r6, r0
    477c:	4689      	mov	r9, r1
    477e:	0014      	movs	r4, r2
    4780:	001d      	movs	r5, r3
	if (x1>x2)
    4782:	4290      	cmp	r0, r2
    4784:	dd01      	ble.n	478a <fillRect+0x1a>
		x1 = x2;
    4786:	0016      	movs	r6, r2
		x2 = temp;
    4788:	0004      	movs	r4, r0
	if (y1>y2)
    478a:	45a9      	cmp	r9, r5
    478c:	dd02      	ble.n	4794 <fillRect+0x24>
    478e:	0033      	movs	r3, r6
		x1 = x2;
    4790:	0026      	movs	r6, r4
		x2 = temp;
    4792:	001c      	movs	r4, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    4794:	2380      	movs	r3, #128	; 0x80
    4796:	03db      	lsls	r3, r3, #15
    4798:	4698      	mov	r8, r3
    479a:	4b11      	ldr	r3, [pc, #68]	; (47e0 <fillRect+0x70>)
    479c:	4642      	mov	r2, r8
    479e:	601a      	str	r2, [r3, #0]
	setXY(x1, y1, x2, y2);
    47a0:	b2ab      	uxth	r3, r5
    47a2:	b2a2      	uxth	r2, r4
    47a4:	4649      	mov	r1, r9
    47a6:	4668      	mov	r0, sp
    47a8:	80c1      	strh	r1, [r0, #6]
    47aa:	88c1      	ldrh	r1, [r0, #6]
    47ac:	b2b0      	uxth	r0, r6
    47ae:	4f0d      	ldr	r7, [pc, #52]	; (47e4 <fillRect+0x74>)
    47b0:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    47b2:	4f0d      	ldr	r7, [pc, #52]	; (47e8 <fillRect+0x78>)
    47b4:	2380      	movs	r3, #128	; 0x80
    47b6:	041b      	lsls	r3, r3, #16
    47b8:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    47ba:	1ba4      	subs	r4, r4, r6
    47bc:	3401      	adds	r4, #1
    47be:	464b      	mov	r3, r9
    47c0:	1aea      	subs	r2, r5, r3
    47c2:	3201      	adds	r2, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    47c4:	4362      	muls	r2, r4
    47c6:	4b09      	ldr	r3, [pc, #36]	; (47ec <fillRect+0x7c>)
    47c8:	8819      	ldrh	r1, [r3, #0]
    47ca:	4b09      	ldr	r3, [pc, #36]	; (47f0 <fillRect+0x80>)
    47cc:	8818      	ldrh	r0, [r3, #0]
    47ce:	4b09      	ldr	r3, [pc, #36]	; (47f4 <fillRect+0x84>)
    47d0:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    47d2:	4643      	mov	r3, r8
    47d4:	603b      	str	r3, [r7, #0]
}
    47d6:	b003      	add	sp, #12
    47d8:	bc0c      	pop	{r2, r3}
    47da:	4690      	mov	r8, r2
    47dc:	4699      	mov	r9, r3
    47de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47e0:	41004494 	.word	0x41004494
    47e4:	000046f9 	.word	0x000046f9
    47e8:	41004498 	.word	0x41004498
    47ec:	200032f0 	.word	0x200032f0
    47f0:	200032ee 	.word	0x200032ee
    47f4:	00004685 	.word	0x00004685

000047f8 <clrXY>:
{
    47f8:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    47fa:	4b04      	ldr	r3, [pc, #16]	; (480c <clrXY+0x14>)
    47fc:	881b      	ldrh	r3, [r3, #0]
    47fe:	4a04      	ldr	r2, [pc, #16]	; (4810 <clrXY+0x18>)
    4800:	8812      	ldrh	r2, [r2, #0]
    4802:	2100      	movs	r1, #0
    4804:	2000      	movs	r0, #0
    4806:	4c03      	ldr	r4, [pc, #12]	; (4814 <clrXY+0x1c>)
    4808:	47a0      	blx	r4
}
    480a:	bd10      	pop	{r4, pc}
    480c:	2000016e 	.word	0x2000016e
    4810:	2000016c 	.word	0x2000016c
    4814:	000046f9 	.word	0x000046f9

00004818 <clrScr>:
{
    4818:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    481a:	2280      	movs	r2, #128	; 0x80
    481c:	03d2      	lsls	r2, r2, #15
    481e:	4b02      	ldr	r3, [pc, #8]	; (4828 <clrScr+0x10>)
    4820:	601a      	str	r2, [r3, #0]
	clrXY();
    4822:	4b02      	ldr	r3, [pc, #8]	; (482c <clrScr+0x14>)
    4824:	4798      	blx	r3
}
    4826:	bd10      	pop	{r4, pc}
    4828:	41004494 	.word	0x41004494
    482c:	000047f9 	.word	0x000047f9

00004830 <setPixel>:

void setPixel(uint16_t color)
{
    4830:	b510      	push	{r4, lr}
	//it sets it to a 16-bit color.
	//LCD_Write_DATA16((color<<8),(color&0xFF)); 
	LCD_Write_DATA16((color>>8),(color&0xFF));
    4832:	b2c1      	uxtb	r1, r0
    4834:	0a00      	lsrs	r0, r0, #8
    4836:	4b01      	ldr	r3, [pc, #4]	; (483c <setPixel+0xc>)
    4838:	4798      	blx	r3
}
    483a:	bd10      	pop	{r4, pc}
    483c:	000048b5 	.word	0x000048b5

00004840 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    4840:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    4842:	2300      	movs	r3, #0
    4844:	4a06      	ldr	r2, [pc, #24]	; (4860 <clearScreen+0x20>)
    4846:	8013      	strh	r3, [r2, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    4848:	4a06      	ldr	r2, [pc, #24]	; (4864 <clearScreen+0x24>)
    484a:	8013      	strh	r3, [r2, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    484c:	4b06      	ldr	r3, [pc, #24]	; (4868 <clearScreen+0x28>)
    484e:	881b      	ldrh	r3, [r3, #0]
    4850:	4a06      	ldr	r2, [pc, #24]	; (486c <clearScreen+0x2c>)
    4852:	8812      	ldrh	r2, [r2, #0]
    4854:	2100      	movs	r1, #0
    4856:	2000      	movs	r0, #0
    4858:	4c05      	ldr	r4, [pc, #20]	; (4870 <clearScreen+0x30>)
    485a:	47a0      	blx	r4
}
    485c:	bd10      	pop	{r4, pc}
    485e:	46c0      	nop			; (mov r8, r8)
    4860:	200032ee 	.word	0x200032ee
    4864:	200032f0 	.word	0x200032f0
    4868:	2000016c 	.word	0x2000016c
    486c:	2000016e 	.word	0x2000016e
    4870:	00004771 	.word	0x00004771

00004874 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    4874:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    4876:	4c06      	ldr	r4, [pc, #24]	; (4890 <LCD_Write_Bus+0x1c>)
    4878:	4b06      	ldr	r3, [pc, #24]	; (4894 <LCD_Write_Bus+0x20>)
    487a:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    487c:	0200      	lsls	r0, r0, #8
    487e:	4301      	orrs	r1, r0
    4880:	4b05      	ldr	r3, [pc, #20]	; (4898 <LCD_Write_Bus+0x24>)
    4882:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    4884:	2280      	movs	r2, #128	; 0x80
    4886:	0292      	lsls	r2, r2, #10
    4888:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    488a:	601a      	str	r2, [r3, #0]
}
    488c:	bd10      	pop	{r4, pc}
    488e:	46c0      	nop			; (mov r8, r8)
    4890:	41004494 	.word	0x41004494
    4894:	0000ffff 	.word	0x0000ffff
    4898:	41004498 	.word	0x41004498

0000489c <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    489c:	b510      	push	{r4, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    489e:	2280      	movs	r2, #128	; 0x80
    48a0:	0412      	lsls	r2, r2, #16
    48a2:	4b02      	ldr	r3, [pc, #8]	; (48ac <LCD_Write_COM16+0x10>)
    48a4:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    48a6:	4b02      	ldr	r3, [pc, #8]	; (48b0 <LCD_Write_COM16+0x14>)
    48a8:	4798      	blx	r3
}
    48aa:	bd10      	pop	{r4, pc}
    48ac:	41004494 	.word	0x41004494
    48b0:	00004875 	.word	0x00004875

000048b4 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
    48b4:	b510      	push	{r4, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    48b6:	2280      	movs	r2, #128	; 0x80
    48b8:	0412      	lsls	r2, r2, #16
    48ba:	4b02      	ldr	r3, [pc, #8]	; (48c4 <LCD_Write_DATA16+0x10>)
    48bc:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
    48be:	4b02      	ldr	r3, [pc, #8]	; (48c8 <LCD_Write_DATA16+0x14>)
    48c0:	4798      	blx	r3
}
    48c2:	bd10      	pop	{r4, pc}
    48c4:	41004498 	.word	0x41004498
    48c8:	00004875 	.word	0x00004875

000048cc <LCD_Write_DATA8>:

void LCD_Write_DATA8(char VL)
{
    48cc:	b510      	push	{r4, lr}
    48ce:	0001      	movs	r1, r0
	REG_PORT_OUTSET1 = LCD_DC;
    48d0:	2280      	movs	r2, #128	; 0x80
    48d2:	0412      	lsls	r2, r2, #16
    48d4:	4b02      	ldr	r3, [pc, #8]	; (48e0 <LCD_Write_DATA8+0x14>)
    48d6:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    48d8:	2000      	movs	r0, #0
    48da:	4b02      	ldr	r3, [pc, #8]	; (48e4 <LCD_Write_DATA8+0x18>)
    48dc:	4798      	blx	r3
}
    48de:	bd10      	pop	{r4, pc}
    48e0:	41004498 	.word	0x41004498
    48e4:	00004875 	.word	0x00004875

000048e8 <InitLCD>:
{
    48e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ea:	46c6      	mov	lr, r8
    48ec:	b500      	push	{lr}
    48ee:	b082      	sub	sp, #8
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    48f0:	4b80      	ldr	r3, [pc, #512]	; (4af4 <InitLCD+0x20c>)
    48f2:	4f81      	ldr	r7, [pc, #516]	; (4af8 <InitLCD+0x210>)
    48f4:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    48f6:	2580      	movs	r5, #128	; 0x80
    48f8:	05ed      	lsls	r5, r5, #23
    48fa:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    48fc:	2680      	movs	r6, #128	; 0x80
    48fe:	03f6      	lsls	r6, r6, #15
    4900:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    4902:	2080      	movs	r0, #128	; 0x80
    4904:	0280      	lsls	r0, r0, #10
    4906:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    4908:	2180      	movs	r1, #128	; 0x80
    490a:	0409      	lsls	r1, r1, #16
    490c:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    490e:	2280      	movs	r2, #128	; 0x80
    4910:	0252      	lsls	r2, r2, #9
    4912:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    4914:	4c79      	ldr	r4, [pc, #484]	; (4afc <InitLCD+0x214>)
    4916:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    4918:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    491a:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    491c:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    491e:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    4920:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    4922:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    4924:	4f76      	ldr	r7, [pc, #472]	; (4b00 <InitLCD+0x218>)
    4926:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
    4928:	603d      	str	r5, [r7, #0]
	delay_ms(5);
    492a:	2005      	movs	r0, #5
    492c:	4b75      	ldr	r3, [pc, #468]	; (4b04 <InitLCD+0x21c>)
    492e:	4698      	mov	r8, r3
    4930:	4798      	blx	r3
	REG_PORT_OUTCLR1 = LCD_Reset;
    4932:	6025      	str	r5, [r4, #0]
	delay_ms(5);
    4934:	2005      	movs	r0, #5
    4936:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
    4938:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    493a:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    493c:	2400      	movs	r4, #0
		REG_PORT_OUTCLR1 = LCD_DC;
    493e:	4b6f      	ldr	r3, [pc, #444]	; (4afc <InitLCD+0x214>)
    4940:	4698      	mov	r8, r3
    4942:	2580      	movs	r5, #128	; 0x80
    4944:	042d      	lsls	r5, r5, #16
    4946:	002f      	movs	r7, r5
		LCD_Write_COM16(belial[i],mulciber[i]);
    4948:	4e6f      	ldr	r6, [pc, #444]	; (4b08 <InitLCD+0x220>)
		REG_PORT_OUTCLR1 = LCD_DC;
    494a:	4643      	mov	r3, r8
    494c:	601f      	str	r7, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    494e:	5da1      	ldrb	r1, [r4, r6]
    4950:	4b6e      	ldr	r3, [pc, #440]	; (4b0c <InitLCD+0x224>)
    4952:	5ce0      	ldrb	r0, [r4, r3]
    4954:	4b6e      	ldr	r3, [pc, #440]	; (4b10 <InitLCD+0x228>)
    4956:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    4958:	4b69      	ldr	r3, [pc, #420]	; (4b00 <InitLCD+0x218>)
    495a:	601d      	str	r5, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    495c:	4b6d      	ldr	r3, [pc, #436]	; (4b14 <InitLCD+0x22c>)
    495e:	5ce0      	ldrb	r0, [r4, r3]
    4960:	4b6d      	ldr	r3, [pc, #436]	; (4b18 <InitLCD+0x230>)
    4962:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    4964:	3401      	adds	r4, #1
    4966:	2c46      	cmp	r4, #70	; 0x46
    4968:	d1ef      	bne.n	494a <InitLCD+0x62>
    496a:	23d1      	movs	r3, #209	; 0xd1
    496c:	9301      	str	r3, [sp, #4]
			LCD_Write_COM16(k,0x00);
    496e:	4d68      	ldr	r5, [pc, #416]	; (4b10 <InitLCD+0x228>)
			LCD_Write_DATA8(beelzebub[l]);
    4970:	4f69      	ldr	r7, [pc, #420]	; (4b18 <InitLCD+0x230>)
    4972:	4c6a      	ldr	r4, [pc, #424]	; (4b1c <InitLCD+0x234>)
    4974:	0026      	movs	r6, r4
    4976:	3634      	adds	r6, #52	; 0x34
			LCD_Write_COM16(k,0x00);
    4978:	2100      	movs	r1, #0
    497a:	9801      	ldr	r0, [sp, #4]
    497c:	47a8      	blx	r5
			LCD_Write_DATA8(beelzebub[l]);
    497e:	7820      	ldrb	r0, [r4, #0]
    4980:	47b8      	blx	r7
    4982:	3401      	adds	r4, #1
		for(int l = 0; l < 52; l++)
    4984:	42a6      	cmp	r6, r4
    4986:	d1f7      	bne.n	4978 <InitLCD+0x90>
	for(char k = 0xD1; k < 0xD6; k++)
    4988:	9b01      	ldr	r3, [sp, #4]
    498a:	3301      	adds	r3, #1
    498c:	b2db      	uxtb	r3, r3
    498e:	9301      	str	r3, [sp, #4]
    4990:	2bd6      	cmp	r3, #214	; 0xd6
    4992:	d1ee      	bne.n	4972 <InitLCD+0x8a>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    4994:	2100      	movs	r1, #0
    4996:	20f0      	movs	r0, #240	; 0xf0
    4998:	4c5d      	ldr	r4, [pc, #372]	; (4b10 <InitLCD+0x228>)
    499a:	47a0      	blx	r4
    499c:	2055      	movs	r0, #85	; 0x55
    499e:	4d5e      	ldr	r5, [pc, #376]	; (4b18 <InitLCD+0x230>)
    49a0:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    49a2:	2101      	movs	r1, #1
    49a4:	20f0      	movs	r0, #240	; 0xf0
    49a6:	47a0      	blx	r4
    49a8:	20aa      	movs	r0, #170	; 0xaa
    49aa:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    49ac:	2102      	movs	r1, #2
    49ae:	20f0      	movs	r0, #240	; 0xf0
    49b0:	47a0      	blx	r4
    49b2:	2052      	movs	r0, #82	; 0x52
    49b4:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    49b6:	2103      	movs	r1, #3
    49b8:	20f0      	movs	r0, #240	; 0xf0
    49ba:	47a0      	blx	r4
    49bc:	2008      	movs	r0, #8
    49be:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    49c0:	2104      	movs	r1, #4
    49c2:	20f0      	movs	r0, #240	; 0xf0
    49c4:	47a0      	blx	r4
    49c6:	2000      	movs	r0, #0
    49c8:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    49ca:	2100      	movs	r1, #0
    49cc:	20b1      	movs	r0, #177	; 0xb1
    49ce:	47a0      	blx	r4
    49d0:	20cc      	movs	r0, #204	; 0xcc
    49d2:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    49d4:	2101      	movs	r1, #1
    49d6:	20b1      	movs	r0, #177	; 0xb1
    49d8:	47a0      	blx	r4
    49da:	2000      	movs	r0, #0
    49dc:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    49de:	2100      	movs	r1, #0
    49e0:	20b5      	movs	r0, #181	; 0xb5
    49e2:	47a0      	blx	r4
    49e4:	2050      	movs	r0, #80	; 0x50
    49e6:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    49e8:	2100      	movs	r1, #0
    49ea:	20b6      	movs	r0, #182	; 0xb6
    49ec:	47a0      	blx	r4
    49ee:	2005      	movs	r0, #5
    49f0:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    49f2:	2100      	movs	r1, #0
    49f4:	20b7      	movs	r0, #183	; 0xb7
    49f6:	47a0      	blx	r4
    49f8:	2070      	movs	r0, #112	; 0x70
    49fa:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    49fc:	2101      	movs	r1, #1
    49fe:	20b7      	movs	r0, #183	; 0xb7
    4a00:	47a0      	blx	r4
    4a02:	2070      	movs	r0, #112	; 0x70
    4a04:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    4a06:	2100      	movs	r1, #0
    4a08:	20b8      	movs	r0, #184	; 0xb8
    4a0a:	47a0      	blx	r4
    4a0c:	2001      	movs	r0, #1
    4a0e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    4a10:	2101      	movs	r1, #1
    4a12:	20b8      	movs	r0, #184	; 0xb8
    4a14:	47a0      	blx	r4
    4a16:	2003      	movs	r0, #3
    4a18:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    4a1a:	2102      	movs	r1, #2
    4a1c:	20b8      	movs	r0, #184	; 0xb8
    4a1e:	47a0      	blx	r4
    4a20:	2003      	movs	r0, #3
    4a22:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    4a24:	2103      	movs	r1, #3
    4a26:	20b8      	movs	r0, #184	; 0xb8
    4a28:	47a0      	blx	r4
    4a2a:	2003      	movs	r0, #3
    4a2c:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    4a2e:	2100      	movs	r1, #0
    4a30:	20bc      	movs	r0, #188	; 0xbc
    4a32:	47a0      	blx	r4
    4a34:	2002      	movs	r0, #2
    4a36:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    4a38:	2101      	movs	r1, #1
    4a3a:	20bc      	movs	r0, #188	; 0xbc
    4a3c:	47a0      	blx	r4
    4a3e:	2000      	movs	r0, #0
    4a40:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    4a42:	2102      	movs	r1, #2
    4a44:	20bc      	movs	r0, #188	; 0xbc
    4a46:	47a0      	blx	r4
    4a48:	2000      	movs	r0, #0
    4a4a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    4a4c:	2100      	movs	r1, #0
    4a4e:	20c9      	movs	r0, #201	; 0xc9
    4a50:	47a0      	blx	r4
    4a52:	20d0      	movs	r0, #208	; 0xd0
    4a54:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    4a56:	2101      	movs	r1, #1
    4a58:	20c9      	movs	r0, #201	; 0xc9
    4a5a:	47a0      	blx	r4
    4a5c:	2002      	movs	r0, #2
    4a5e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    4a60:	2102      	movs	r1, #2
    4a62:	20c9      	movs	r0, #201	; 0xc9
    4a64:	47a0      	blx	r4
    4a66:	2050      	movs	r0, #80	; 0x50
    4a68:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    4a6a:	2103      	movs	r1, #3
    4a6c:	20c9      	movs	r0, #201	; 0xc9
    4a6e:	47a0      	blx	r4
    4a70:	2050      	movs	r0, #80	; 0x50
    4a72:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    4a74:	2104      	movs	r1, #4
    4a76:	20c9      	movs	r0, #201	; 0xc9
    4a78:	47a0      	blx	r4
    4a7a:	2050      	movs	r0, #80	; 0x50
    4a7c:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    4a7e:	2100      	movs	r1, #0
    4a80:	2035      	movs	r0, #53	; 0x35
    4a82:	47a0      	blx	r4
    4a84:	2000      	movs	r0, #0
    4a86:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    4a88:	2100      	movs	r1, #0
    4a8a:	203a      	movs	r0, #58	; 0x3a
    4a8c:	47a0      	blx	r4
    4a8e:	2055      	movs	r0, #85	; 0x55
    4a90:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    4a92:	2100      	movs	r1, #0
    4a94:	2036      	movs	r0, #54	; 0x36
    4a96:	47a0      	blx	r4
    4a98:	20e2      	movs	r0, #226	; 0xe2
    4a9a:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    4a9c:	2100      	movs	r1, #0
    4a9e:	2011      	movs	r0, #17
    4aa0:	47a0      	blx	r4
  	delay_ms(100);
    4aa2:	2064      	movs	r0, #100	; 0x64
    4aa4:	4e17      	ldr	r6, [pc, #92]	; (4b04 <InitLCD+0x21c>)
    4aa6:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    4aa8:	2100      	movs	r1, #0
    4aaa:	2029      	movs	r0, #41	; 0x29
    4aac:	47a0      	blx	r4
   	delay_ms(100);
    4aae:	2064      	movs	r0, #100	; 0x64
    4ab0:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    4ab2:	2100      	movs	r1, #0
    4ab4:	2051      	movs	r0, #81	; 0x51
    4ab6:	47a0      	blx	r4
    4ab8:	20ff      	movs	r0, #255	; 0xff
    4aba:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    4abc:	2280      	movs	r2, #128	; 0x80
    4abe:	03d2      	lsls	r2, r2, #15
    4ac0:	4b0f      	ldr	r3, [pc, #60]	; (4b00 <InitLCD+0x218>)
    4ac2:	601a      	str	r2, [r3, #0]
	clrScr();
    4ac4:	4b16      	ldr	r3, [pc, #88]	; (4b20 <InitLCD+0x238>)
    4ac6:	4798      	blx	r3
	setColorRGB(0,0,0);
    4ac8:	2200      	movs	r2, #0
    4aca:	2100      	movs	r1, #0
    4acc:	2000      	movs	r0, #0
    4ace:	4b15      	ldr	r3, [pc, #84]	; (4b24 <InitLCD+0x23c>)
    4ad0:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    4ad2:	2200      	movs	r2, #0
    4ad4:	2100      	movs	r1, #0
    4ad6:	2000      	movs	r0, #0
    4ad8:	4b13      	ldr	r3, [pc, #76]	; (4b28 <InitLCD+0x240>)
    4ada:	4798      	blx	r3
	fillRect(0,0,799,489);
    4adc:	23ea      	movs	r3, #234	; 0xea
    4ade:	33ff      	adds	r3, #255	; 0xff
    4ae0:	4a12      	ldr	r2, [pc, #72]	; (4b2c <InitLCD+0x244>)
    4ae2:	2100      	movs	r1, #0
    4ae4:	2000      	movs	r0, #0
    4ae6:	4c12      	ldr	r4, [pc, #72]	; (4b30 <InitLCD+0x248>)
    4ae8:	47a0      	blx	r4
}
    4aea:	b002      	add	sp, #8
    4aec:	bc04      	pop	{r2}
    4aee:	4690      	mov	r8, r2
    4af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4af2:	46c0      	nop			; (mov r8, r8)
    4af4:	41004488 	.word	0x41004488
    4af8:	0000ffff 	.word	0x0000ffff
    4afc:	41004494 	.word	0x41004494
    4b00:	41004498 	.word	0x41004498
    4b04:	00001f7d 	.word	0x00001f7d
    4b08:	00008bdc 	.word	0x00008bdc
    4b0c:	00008b4c 	.word	0x00008b4c
    4b10:	0000489d 	.word	0x0000489d
    4b14:	00008b94 	.word	0x00008b94
    4b18:	000048cd 	.word	0x000048cd
    4b1c:	00008b18 	.word	0x00008b18
    4b20:	00004819 	.word	0x00004819
    4b24:	00004635 	.word	0x00004635
    4b28:	0000465d 	.word	0x0000465d
    4b2c:	0000031f 	.word	0x0000031f
    4b30:	00004771 	.word	0x00004771

00004b34 <usart_read_callback>:
	SysTick_Config(SystemCoreClock/1000);
	system_interrupt_enable(SYSTEM_INTERRUPT_SYSTICK);
}

void usart_read_callback(struct usart_module *const usart_module)
{
    4b34:	b510      	push	{r4, lr}
	//Read one character from the UART.
	//We can only use this function because it's non-blocking
	//and we can only read one character because reading > 1 means
	//it doesn't complete until _all_ characters are read.
	
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    4b36:	4c06      	ldr	r4, [pc, #24]	; (4b50 <usart_read_callback+0x1c>)
    4b38:	2201      	movs	r2, #1
    4b3a:	0021      	movs	r1, r4
    4b3c:	4805      	ldr	r0, [pc, #20]	; (4b54 <usart_read_callback+0x20>)
    4b3e:	4b06      	ldr	r3, [pc, #24]	; (4b58 <usart_read_callback+0x24>)
    4b40:	4798      	blx	r3
	
	//stuff that ONE CHARACTER into the circular FIFO buffer
	ring_put(ouroboros, rx_buf);
    4b42:	7821      	ldrb	r1, [r4, #0]
    4b44:	4b05      	ldr	r3, [pc, #20]	; (4b5c <usart_read_callback+0x28>)
    4b46:	6818      	ldr	r0, [r3, #0]
    4b48:	4b05      	ldr	r3, [pc, #20]	; (4b60 <usart_read_callback+0x2c>)
    4b4a:	4798      	blx	r3
}
    4b4c:	bd10      	pop	{r4, pc}
    4b4e:	46c0      	nop			; (mov r8, r8)
    4b50:	20003800 	.word	0x20003800
    4b54:	200005b4 	.word	0x200005b4
    4b58:	00002e1d 	.word	0x00002e1d
    4b5c:	20000588 	.word	0x20000588
    4b60:	00000141 	.word	0x00000141

00004b64 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4b64:	b570      	push	{r4, r5, r6, lr}
    4b66:	b082      	sub	sp, #8
    4b68:	0005      	movs	r5, r0
    4b6a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    4b6c:	2200      	movs	r2, #0
    4b6e:	466b      	mov	r3, sp
    4b70:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4b72:	4c06      	ldr	r4, [pc, #24]	; (4b8c <usart_serial_getchar+0x28>)
    4b74:	466b      	mov	r3, sp
    4b76:	1d99      	adds	r1, r3, #6
    4b78:	0028      	movs	r0, r5
    4b7a:	47a0      	blx	r4
    4b7c:	2800      	cmp	r0, #0
    4b7e:	d1f9      	bne.n	4b74 <usart_serial_getchar+0x10>

	*c = temp;
    4b80:	466b      	mov	r3, sp
    4b82:	3306      	adds	r3, #6
    4b84:	881b      	ldrh	r3, [r3, #0]
    4b86:	7033      	strb	r3, [r6, #0]
}
    4b88:	b002      	add	sp, #8
    4b8a:	bd70      	pop	{r4, r5, r6, pc}
    4b8c:	00002d4b 	.word	0x00002d4b

00004b90 <usart_serial_putchar>:
{
    4b90:	b570      	push	{r4, r5, r6, lr}
    4b92:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    4b94:	b28c      	uxth	r4, r1
    4b96:	4e03      	ldr	r6, [pc, #12]	; (4ba4 <usart_serial_putchar+0x14>)
    4b98:	0021      	movs	r1, r4
    4b9a:	0028      	movs	r0, r5
    4b9c:	47b0      	blx	r6
    4b9e:	2800      	cmp	r0, #0
    4ba0:	d1fa      	bne.n	4b98 <usart_serial_putchar+0x8>
}
    4ba2:	bd70      	pop	{r4, r5, r6, pc}
    4ba4:	00002d25 	.word	0x00002d25

00004ba8 <InitTraceBuffer>:
{
    4ba8:	b530      	push	{r4, r5, lr}
    uint32_t mtbEnabled = IS_MTB_ENABLED;
    4baa:	4a0d      	ldr	r2, [pc, #52]	; (4be0 <InitTraceBuffer+0x38>)
    4bac:	6815      	ldr	r5, [r2, #0]
    DISABLE_MTB;
    4bae:	6813      	ldr	r3, [r2, #0]
    4bb0:	005b      	lsls	r3, r3, #1
    4bb2:	085b      	lsrs	r3, r3, #1
    4bb4:	6013      	str	r3, [r2, #0]
    for(index =0; index<1024; index++)
    4bb6:	2300      	movs	r3, #0
        __tracebuffer__[index];
    4bb8:	480a      	ldr	r0, [pc, #40]	; (4be4 <InitTraceBuffer+0x3c>)
        __tracebuffersize__;
    4bba:	490b      	ldr	r1, [pc, #44]	; (4be8 <InitTraceBuffer+0x40>)
    for(index =0; index<1024; index++)
    4bbc:	2280      	movs	r2, #128	; 0x80
    4bbe:	00d2      	lsls	r2, r2, #3
        __tracebuffer__[index];
    4bc0:	5cc4      	ldrb	r4, [r0, r3]
        __tracebuffersize__;
    4bc2:	680c      	ldr	r4, [r1, #0]
    for(index =0; index<1024; index++)
    4bc4:	3301      	adds	r3, #1
    4bc6:	4293      	cmp	r3, r2
    4bc8:	d1fa      	bne.n	4bc0 <InitTraceBuffer+0x18>
    if(mtbEnabled)
    4bca:	2d00      	cmp	r5, #0
    4bcc:	db00      	blt.n	4bd0 <InitTraceBuffer+0x28>
}
    4bce:	bd30      	pop	{r4, r5, pc}
        ENABLE_MTB;
    4bd0:	4a03      	ldr	r2, [pc, #12]	; (4be0 <InitTraceBuffer+0x38>)
    4bd2:	6811      	ldr	r1, [r2, #0]
    4bd4:	2380      	movs	r3, #128	; 0x80
    4bd6:	061b      	lsls	r3, r3, #24
    4bd8:	430b      	orrs	r3, r1
    4bda:	6013      	str	r3, [r2, #0]
}
    4bdc:	e7f7      	b.n	4bce <InitTraceBuffer+0x26>
    4bde:	46c0      	nop			; (mov r8, r8)
    4be0:	41006004 	.word	0x41006004
    4be4:	20003400 	.word	0x20003400
    4be8:	20000170 	.word	0x20000170

00004bec <SysTick_Handler>:
	ul_tickcount++;
    4bec:	4b06      	ldr	r3, [pc, #24]	; (4c08 <SysTick_Handler+0x1c>)
    4bee:	881b      	ldrh	r3, [r3, #0]
    4bf0:	3301      	adds	r3, #1
    4bf2:	b29b      	uxth	r3, r3
	if(ul_tickcount == UINT16_MAX-1)
    4bf4:	4a05      	ldr	r2, [pc, #20]	; (4c0c <SysTick_Handler+0x20>)
    4bf6:	4293      	cmp	r3, r2
    4bf8:	d002      	beq.n	4c00 <SysTick_Handler+0x14>
	ul_tickcount++;
    4bfa:	4a03      	ldr	r2, [pc, #12]	; (4c08 <SysTick_Handler+0x1c>)
    4bfc:	8013      	strh	r3, [r2, #0]
}
    4bfe:	4770      	bx	lr
		ul_tickcount = 0;
    4c00:	2200      	movs	r2, #0
    4c02:	4b01      	ldr	r3, [pc, #4]	; (4c08 <SysTick_Handler+0x1c>)
    4c04:	801a      	strh	r2, [r3, #0]
}
    4c06:	e7fa      	b.n	4bfe <SysTick_Handler+0x12>
    4c08:	200004ec 	.word	0x200004ec
    4c0c:	0000fffe 	.word	0x0000fffe

00004c10 <conf_systick>:
{
    4c10:	b510      	push	{r4, lr}
	SysTick_Config(SystemCoreClock/1000);
    4c12:	4b0e      	ldr	r3, [pc, #56]	; (4c4c <conf_systick+0x3c>)
    4c14:	6818      	ldr	r0, [r3, #0]
    4c16:	21fa      	movs	r1, #250	; 0xfa
    4c18:	0089      	lsls	r1, r1, #2
    4c1a:	4b0d      	ldr	r3, [pc, #52]	; (4c50 <conf_systick+0x40>)
    4c1c:	4798      	blx	r3
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    4c1e:	3801      	subs	r0, #1
    4c20:	4b0c      	ldr	r3, [pc, #48]	; (4c54 <conf_systick+0x44>)
    4c22:	4298      	cmp	r0, r3
    4c24:	d80d      	bhi.n	4c42 <conf_systick+0x32>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    4c26:	4a0c      	ldr	r2, [pc, #48]	; (4c58 <conf_systick+0x48>)
    4c28:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4c2a:	480c      	ldr	r0, [pc, #48]	; (4c5c <conf_systick+0x4c>)
    4c2c:	6a03      	ldr	r3, [r0, #32]
    4c2e:	021b      	lsls	r3, r3, #8
    4c30:	0a1b      	lsrs	r3, r3, #8
    4c32:	21c0      	movs	r1, #192	; 0xc0
    4c34:	0609      	lsls	r1, r1, #24
    4c36:	430b      	orrs	r3, r1
    4c38:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    4c3a:	2300      	movs	r3, #0
    4c3c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    4c3e:	3307      	adds	r3, #7
    4c40:	6013      	str	r3, [r2, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4c42:	2280      	movs	r2, #128	; 0x80
    4c44:	0612      	lsls	r2, r2, #24
    4c46:	4b06      	ldr	r3, [pc, #24]	; (4c60 <conf_systick+0x50>)
    4c48:	601a      	str	r2, [r3, #0]
}
    4c4a:	bd10      	pop	{r4, pc}
    4c4c:	20000024 	.word	0x20000024
    4c50:	00004fe1 	.word	0x00004fe1
    4c54:	00ffffff 	.word	0x00ffffff
    4c58:	e000e010 	.word	0xe000e010
    4c5c:	e000ed00 	.word	0xe000ed00
    4c60:	e000e100 	.word	0xe000e100

00004c64 <configure_usart>:

/**************************SERCOM STUFF*******************************/


void configure_usart(void)
{
    4c64:	b570      	push	{r4, r5, r6, lr}
    4c66:	b090      	sub	sp, #64	; 0x40
	config->data_order       = USART_DATAORDER_LSB;
    4c68:	2380      	movs	r3, #128	; 0x80
    4c6a:	05db      	lsls	r3, r3, #23
    4c6c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    4c6e:	2300      	movs	r3, #0
    4c70:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    4c72:	22ff      	movs	r2, #255	; 0xff
    4c74:	4669      	mov	r1, sp
    4c76:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    4c78:	2200      	movs	r2, #0
    4c7a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4c7c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    4c7e:	2196      	movs	r1, #150	; 0x96
    4c80:	0189      	lsls	r1, r1, #6
    4c82:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    4c84:	2101      	movs	r1, #1
    4c86:	2024      	movs	r0, #36	; 0x24
    4c88:	466c      	mov	r4, sp
    4c8a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    4c8c:	3001      	adds	r0, #1
    4c8e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    4c90:	3125      	adds	r1, #37	; 0x25
    4c92:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    4c94:	3101      	adds	r1, #1
    4c96:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    4c98:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    4c9a:	3105      	adds	r1, #5
    4c9c:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    4c9e:	3101      	adds	r1, #1
    4ca0:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    4ca2:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4ca4:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    4ca6:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    4ca8:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    4caa:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    4cac:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    4cae:	2313      	movs	r3, #19
    4cb0:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    4cb2:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    4cb4:	2380      	movs	r3, #128	; 0x80
    4cb6:	035b      	lsls	r3, r3, #13
    4cb8:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PA08D_SERCOM2_PAD0;
    4cba:	4b1e      	ldr	r3, [pc, #120]	; (4d34 <configure_usart+0xd0>)
    4cbc:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PA09D_SERCOM2_PAD1;
    4cbe:	4b1e      	ldr	r3, [pc, #120]	; (4d38 <configure_usart+0xd4>)
    4cc0:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    4cc2:	2301      	movs	r3, #1
    4cc4:	425b      	negs	r3, r3
    4cc6:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    4cc8:	930f      	str	r3, [sp, #60]	; 0x3c
	
	RTS on PAD2 and CTS on PAD3
	
	*/
	
	while (usart_init(&usart_instance, SERCOM2, &config_usart) != STATUS_OK) {
    4cca:	4d1c      	ldr	r5, [pc, #112]	; (4d3c <configure_usart+0xd8>)
    4ccc:	4c1c      	ldr	r4, [pc, #112]	; (4d40 <configure_usart+0xdc>)
    4cce:	466a      	mov	r2, sp
    4cd0:	491c      	ldr	r1, [pc, #112]	; (4d44 <configure_usart+0xe0>)
    4cd2:	0028      	movs	r0, r5
    4cd4:	47a0      	blx	r4
    4cd6:	2800      	cmp	r0, #0
    4cd8:	d1f9      	bne.n	4cce <configure_usart+0x6a>
	stdio_base = (void *)module;
    4cda:	4c18      	ldr	r4, [pc, #96]	; (4d3c <configure_usart+0xd8>)
    4cdc:	4b1a      	ldr	r3, [pc, #104]	; (4d48 <configure_usart+0xe4>)
    4cde:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    4ce0:	4a1a      	ldr	r2, [pc, #104]	; (4d4c <configure_usart+0xe8>)
    4ce2:	4b1b      	ldr	r3, [pc, #108]	; (4d50 <configure_usart+0xec>)
    4ce4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    4ce6:	4a1b      	ldr	r2, [pc, #108]	; (4d54 <configure_usart+0xf0>)
    4ce8:	4b1b      	ldr	r3, [pc, #108]	; (4d58 <configure_usart+0xf4>)
    4cea:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    4cec:	466a      	mov	r2, sp
    4cee:	4915      	ldr	r1, [pc, #84]	; (4d44 <configure_usart+0xe0>)
    4cf0:	0020      	movs	r0, r4
    4cf2:	4b13      	ldr	r3, [pc, #76]	; (4d40 <configure_usart+0xdc>)
    4cf4:	4798      	blx	r3
	setbuf(stdout, NULL);
    4cf6:	4e19      	ldr	r6, [pc, #100]	; (4d5c <configure_usart+0xf8>)
    4cf8:	6833      	ldr	r3, [r6, #0]
    4cfa:	6898      	ldr	r0, [r3, #8]
    4cfc:	2100      	movs	r1, #0
    4cfe:	4d18      	ldr	r5, [pc, #96]	; (4d60 <configure_usart+0xfc>)
    4d00:	47a8      	blx	r5
	setbuf(stdin, NULL);
    4d02:	6833      	ldr	r3, [r6, #0]
    4d04:	6858      	ldr	r0, [r3, #4]
    4d06:	2100      	movs	r1, #0
    4d08:	47a8      	blx	r5
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d0a:	6825      	ldr	r5, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4d0c:	0028      	movs	r0, r5
    4d0e:	4b15      	ldr	r3, [pc, #84]	; (4d64 <configure_usart+0x100>)
    4d10:	4798      	blx	r3
    4d12:	231f      	movs	r3, #31
    4d14:	4018      	ands	r0, r3
    4d16:	3b1e      	subs	r3, #30
    4d18:	4083      	lsls	r3, r0
    4d1a:	4a13      	ldr	r2, [pc, #76]	; (4d68 <configure_usart+0x104>)
    4d1c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4d1e:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    4d20:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4d22:	2b00      	cmp	r3, #0
    4d24:	d1fc      	bne.n	4d20 <configure_usart+0xbc>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4d26:	682b      	ldr	r3, [r5, #0]
    4d28:	2202      	movs	r2, #2
    4d2a:	4313      	orrs	r3, r2
    4d2c:	602b      	str	r3, [r5, #0]
	}
	stdio_serial_init(&usart_instance, SERCOM2, &config_usart);
	usart_enable(&usart_instance);
}
    4d2e:	b010      	add	sp, #64	; 0x40
    4d30:	bd70      	pop	{r4, r5, r6, pc}
    4d32:	46c0      	nop			; (mov r8, r8)
    4d34:	00080003 	.word	0x00080003
    4d38:	00090003 	.word	0x00090003
    4d3c:	200005b4 	.word	0x200005b4
    4d40:	000029e9 	.word	0x000029e9
    4d44:	42001000 	.word	0x42001000
    4d48:	200005b0 	.word	0x200005b0
    4d4c:	00004b91 	.word	0x00004b91
    4d50:	200005ac 	.word	0x200005ac
    4d54:	00004b65 	.word	0x00004b65
    4d58:	200005a8 	.word	0x200005a8
    4d5c:	200001ac 	.word	0x200001ac
    4d60:	0000567d 	.word	0x0000567d
    4d64:	00002959 	.word	0x00002959
    4d68:	e000e100 	.word	0xe000e100

00004d6c <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    4d6c:	b510      	push	{r4, lr}
	usart_register_callback(&usart_instance,usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
    4d6e:	4c06      	ldr	r4, [pc, #24]	; (4d88 <configure_usart_callbacks+0x1c>)
    4d70:	2201      	movs	r2, #1
    4d72:	4906      	ldr	r1, [pc, #24]	; (4d8c <configure_usart_callbacks+0x20>)
    4d74:	0020      	movs	r0, r4
    4d76:	4b06      	ldr	r3, [pc, #24]	; (4d90 <configure_usart_callbacks+0x24>)
    4d78:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    4d7a:	2231      	movs	r2, #49	; 0x31
    4d7c:	5ca3      	ldrb	r3, [r4, r2]
    4d7e:	2102      	movs	r1, #2
    4d80:	430b      	orrs	r3, r1
    4d82:	54a3      	strb	r3, [r4, r2]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    4d84:	bd10      	pop	{r4, pc}
    4d86:	46c0      	nop			; (mov r8, r8)
    4d88:	200005b4 	.word	0x200005b4
    4d8c:	00004b35 	.word	0x00004b35
    4d90:	00002e05 	.word	0x00002e05

00004d94 <configure_adc>:
	usart_enable(&usart_USB);
}
*/

void configure_adc(void)
{
    4d94:	b510      	push	{r4, lr}
    4d96:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    4d98:	4668      	mov	r0, sp
    4d9a:	4b16      	ldr	r3, [pc, #88]	; (4df4 <configure_adc+0x60>)
    4d9c:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_1;
    4d9e:	2301      	movs	r3, #1
    4da0:	466a      	mov	r2, sp
    4da2:	7013      	strb	r3, [r2, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    4da4:	2380      	movs	r3, #128	; 0x80
    4da6:	009b      	lsls	r3, r3, #2
    4da8:	8053      	strh	r3, [r2, #2]
	config_adc.reference = ADC_REFERENCE_INT1V;
    4daa:	2300      	movs	r3, #0
    4dac:	7053      	strb	r3, [r2, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    4dae:	3318      	adds	r3, #24
    4db0:	7313      	strb	r3, [r2, #12]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    4db2:	23c0      	movs	r3, #192	; 0xc0
    4db4:	015b      	lsls	r3, r3, #5
    4db6:	81d3      	strh	r3, [r2, #14]
	adc_init(&adc_instance, ADC, &config_adc);
    4db8:	4c0f      	ldr	r4, [pc, #60]	; (4df8 <configure_adc+0x64>)
    4dba:	4910      	ldr	r1, [pc, #64]	; (4dfc <configure_adc+0x68>)
    4dbc:	0020      	movs	r0, r4
    4dbe:	4b10      	ldr	r3, [pc, #64]	; (4e00 <configure_adc+0x6c>)
    4dc0:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4dc2:	6822      	ldr	r2, [r4, #0]
    4dc4:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4dc6:	b25b      	sxtb	r3, r3
    4dc8:	2b00      	cmp	r3, #0
    4dca:	dbfb      	blt.n	4dc4 <configure_adc+0x30>
    4dcc:	2180      	movs	r1, #128	; 0x80
    4dce:	0409      	lsls	r1, r1, #16
    4dd0:	4b0c      	ldr	r3, [pc, #48]	; (4e04 <configure_adc+0x70>)
    4dd2:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4dd4:	230f      	movs	r3, #15
    4dd6:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4dd8:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4dda:	7813      	ldrb	r3, [r2, #0]
    4ddc:	2102      	movs	r1, #2
    4dde:	430b      	orrs	r3, r1
    4de0:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    4de2:	4b05      	ldr	r3, [pc, #20]	; (4df8 <configure_adc+0x64>)
    4de4:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    4de6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    4de8:	b25b      	sxtb	r3, r3
    4dea:	2b00      	cmp	r3, #0
    4dec:	dbfb      	blt.n	4de6 <configure_adc+0x52>
	adc_enable(&adc_instance);
}
    4dee:	b00c      	add	sp, #48	; 0x30
    4df0:	bd10      	pop	{r4, pc}
    4df2:	46c0      	nop			; (mov r8, r8)
    4df4:	00002051 	.word	0x00002051
    4df8:	20003804 	.word	0x20003804
    4dfc:	42004000 	.word	0x42004000
    4e00:	00002095 	.word	0x00002095
    4e04:	e000e100 	.word	0xe000e100

00004e08 <setupBoard>:


void setupBoard(void)
{
    4e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t adcResult;
	uint16_t megaHurtz = (uint16_t)system_gclk_gen_get_hz(0);
    4e0a:	2000      	movs	r0, #0
    4e0c:	4b31      	ldr	r3, [pc, #196]	; (4ed4 <setupBoard+0xcc>)
    4e0e:	4798      	blx	r3
    4e10:	b287      	uxth	r7, r0
	
	
	system_init();
    4e12:	4b31      	ldr	r3, [pc, #196]	; (4ed8 <setupBoard+0xd0>)
    4e14:	4798      	blx	r3
	
	delay_init();
    4e16:	4b31      	ldr	r3, [pc, #196]	; (4edc <setupBoard+0xd4>)
    4e18:	4798      	blx	r3
		
	conf_systick();
    4e1a:	4b31      	ldr	r3, [pc, #196]	; (4ee0 <setupBoard+0xd8>)
    4e1c:	4798      	blx	r3
	
	InitLCD();
    4e1e:	4b31      	ldr	r3, [pc, #196]	; (4ee4 <setupBoard+0xdc>)
    4e20:	4798      	blx	r3
	splashScreen();
    4e22:	4b31      	ldr	r3, [pc, #196]	; (4ee8 <setupBoard+0xe0>)
    4e24:	4798      	blx	r3
	
	configure_adc();
    4e26:	4b31      	ldr	r3, [pc, #196]	; (4eec <setupBoard+0xe4>)
    4e28:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    4e2a:	4b31      	ldr	r3, [pc, #196]	; (4ef0 <setupBoard+0xe8>)
    4e2c:	6819      	ldr	r1, [r3, #0]
    4e2e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4e30:	b25b      	sxtb	r3, r3
    4e32:	2b00      	cmp	r3, #0
    4e34:	dbfb      	blt.n	4e2e <setupBoard+0x26>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4e36:	7b0b      	ldrb	r3, [r1, #12]
    4e38:	2202      	movs	r2, #2
    4e3a:	4313      	orrs	r3, r2
    4e3c:	730b      	strb	r3, [r1, #12]
    4e3e:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4e40:	b25b      	sxtb	r3, r3
    4e42:	2b00      	cmp	r3, #0
    4e44:	dbfb      	blt.n	4e3e <setupBoard+0x36>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4e46:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    4e48:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    4e4a:	2502      	movs	r5, #2
    4e4c:	e001      	b.n	4e52 <setupBoard+0x4a>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    4e4e:	4214      	tst	r4, r2
    4e50:	d10a      	bne.n	4e68 <setupBoard+0x60>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    4e52:	7e0b      	ldrb	r3, [r1, #24]
    4e54:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4e56:	0022      	movs	r2, r4
    4e58:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    4e5a:	421e      	tst	r6, r3
    4e5c:	d000      	beq.n	4e60 <setupBoard+0x58>
		status_flags |= ADC_STATUS_WINDOW;
    4e5e:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4e60:	421d      	tst	r5, r3
    4e62:	d0f4      	beq.n	4e4e <setupBoard+0x46>
		status_flags |= ADC_STATUS_OVERRUN;
    4e64:	4332      	orrs	r2, r6
    4e66:	e7f2      	b.n	4e4e <setupBoard+0x46>
    4e68:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    4e6a:	b25b      	sxtb	r3, r3
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	dbfb      	blt.n	4e68 <setupBoard+0x60>
	*result = adc_module->RESULT.reg;
    4e70:	8b48      	ldrh	r0, [r1, #26]
    4e72:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    4e74:	2301      	movs	r3, #1
    4e76:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    4e78:	7e0a      	ldrb	r2, [r1, #24]
    4e7a:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    4e7c:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    4e7e:	0754      	lsls	r4, r2, #29
    4e80:	d501      	bpl.n	4e86 <setupBoard+0x7e>
		status_flags |= ADC_STATUS_WINDOW;
    4e82:	2402      	movs	r4, #2
    4e84:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4e86:	0792      	lsls	r2, r2, #30
    4e88:	d501      	bpl.n	4e8e <setupBoard+0x86>
		status_flags |= ADC_STATUS_OVERRUN;
    4e8a:	2204      	movs	r2, #4
    4e8c:	4313      	orrs	r3, r2
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    4e8e:	075b      	lsls	r3, r3, #29
    4e90:	d501      	bpl.n	4e96 <setupBoard+0x8e>
	adc_module->INTFLAG.reg = int_flags;
    4e92:	2302      	movs	r3, #2
    4e94:	760b      	strb	r3, [r1, #24]
	do {
	/* Wait for conversion to be done and read out result */
	} while (adc_read(&adc_instance, &adcResult) == STATUS_BUSY);
	
	
	srand((adcResult ^ megaHurtz));
    4e96:	4078      	eors	r0, r7
    4e98:	4b16      	ldr	r3, [pc, #88]	; (4ef4 <setupBoard+0xec>)
    4e9a:	4798      	blx	r3
	and PAD1 (PI_RX) on pin 47.
	
	Also, this gives us the ability to bridge UARTs. THIS IS COOL
	
	*/
	configure_usart();
    4e9c:	4b16      	ldr	r3, [pc, #88]	; (4ef8 <setupBoard+0xf0>)
    4e9e:	4798      	blx	r3
	configure_usart_callbacks();
    4ea0:	4b16      	ldr	r3, [pc, #88]	; (4efc <setupBoard+0xf4>)
    4ea2:	4798      	blx	r3
	cpu_irq_enable();
    4ea4:	2201      	movs	r2, #1
    4ea6:	4b16      	ldr	r3, [pc, #88]	; (4f00 <setupBoard+0xf8>)
    4ea8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4eaa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4eae:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	//I have no idea why I need to call this; it's in the callback and it
	//doesn't work without this line here. Remove this at your own peril.
	usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
    4eb0:	4914      	ldr	r1, [pc, #80]	; (4f04 <setupBoard+0xfc>)
    4eb2:	4815      	ldr	r0, [pc, #84]	; (4f08 <setupBoard+0x100>)
    4eb4:	4b15      	ldr	r3, [pc, #84]	; (4f0c <setupBoard+0x104>)
    4eb6:	4798      	blx	r3
	
	printf("\n\rSerial OK 9600 8N1\n\r");
    4eb8:	4815      	ldr	r0, [pc, #84]	; (4f10 <setupBoard+0x108>)
    4eba:	4b16      	ldr	r3, [pc, #88]	; (4f14 <setupBoard+0x10c>)
    4ebc:	4798      	blx	r3
	
	conf_systick();
    4ebe:	4b08      	ldr	r3, [pc, #32]	; (4ee0 <setupBoard+0xd8>)
    4ec0:	4798      	blx	r3

	xCharPos=0;
    4ec2:	2300      	movs	r3, #0
    4ec4:	4a14      	ldr	r2, [pc, #80]	; (4f18 <setupBoard+0x110>)
    4ec6:	8013      	strh	r3, [r2, #0]
	yCharPos=0;
    4ec8:	4a14      	ldr	r2, [pc, #80]	; (4f1c <setupBoard+0x114>)
    4eca:	8013      	strh	r3, [r2, #0]
	drawChar(0xFF);
    4ecc:	20ff      	movs	r0, #255	; 0xff
    4ece:	4b14      	ldr	r3, [pc, #80]	; (4f20 <setupBoard+0x118>)
    4ed0:	4798      	blx	r3
}
    4ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ed4:	000034fd 	.word	0x000034fd
    4ed8:	00003741 	.word	0x00003741
    4edc:	00001f3d 	.word	0x00001f3d
    4ee0:	00004c11 	.word	0x00004c11
    4ee4:	000048e9 	.word	0x000048e9
    4ee8:	00001cb5 	.word	0x00001cb5
    4eec:	00004d95 	.word	0x00004d95
    4ef0:	20003804 	.word	0x20003804
    4ef4:	00005585 	.word	0x00005585
    4ef8:	00004c65 	.word	0x00004c65
    4efc:	00004d6d 	.word	0x00004d6d
    4f00:	20000020 	.word	0x20000020
    4f04:	20003800 	.word	0x20003800
    4f08:	200005b4 	.word	0x200005b4
    4f0c:	00002e1d 	.word	0x00002e1d
    4f10:	00008c24 	.word	0x00008c24
    4f14:	00005529 	.word	0x00005529
    4f18:	200004e2 	.word	0x200004e2
    4f1c:	200004e4 	.word	0x200004e4
    4f20:	00003925 	.word	0x00003925

00004f24 <main>:
{
    4f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	InitTraceBuffer();
    4f26:	4b21      	ldr	r3, [pc, #132]	; (4fac <main+0x88>)
    4f28:	4798      	blx	r3
	setupBoard();
    4f2a:	4b21      	ldr	r3, [pc, #132]	; (4fb0 <main+0x8c>)
    4f2c:	4798      	blx	r3
	uint8_t * buffer  = malloc(UART_BUFFER_SIZE * sizeof(uint8_t));
    4f2e:	2064      	movs	r0, #100	; 0x64
    4f30:	4b20      	ldr	r3, [pc, #128]	; (4fb4 <main+0x90>)
    4f32:	4798      	blx	r3
	ouroboros = ring_init(buffer, UART_BUFFER_SIZE);
    4f34:	2164      	movs	r1, #100	; 0x64
    4f36:	4b20      	ldr	r3, [pc, #128]	; (4fb8 <main+0x94>)
    4f38:	4798      	blx	r3
    4f3a:	4b20      	ldr	r3, [pc, #128]	; (4fbc <main+0x98>)
    4f3c:	6018      	str	r0, [r3, #0]
		if((ul_tickcount % (UINT16_MAX/2) == 0) && (funcLock == false))
    4f3e:	4f20      	ldr	r7, [pc, #128]	; (4fc0 <main+0x9c>)
    4f40:	4e20      	ldr	r6, [pc, #128]	; (4fc4 <main+0xa0>)
    4f42:	4d21      	ldr	r5, [pc, #132]	; (4fc8 <main+0xa4>)
    4f44:	e015      	b.n	4f72 <main+0x4e>
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4f46:	21c8      	movs	r1, #200	; 0xc8
    4f48:	0020      	movs	r0, r4
    4f4a:	4b1e      	ldr	r3, [pc, #120]	; (4fc4 <main+0xa0>)
    4f4c:	4798      	blx	r3
    4f4e:	b289      	uxth	r1, r1
    4f50:	2900      	cmp	r1, #0
    4f52:	d10e      	bne.n	4f72 <main+0x4e>
    4f54:	4b1d      	ldr	r3, [pc, #116]	; (4fcc <main+0xa8>)
    4f56:	781b      	ldrb	r3, [r3, #0]
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d10a      	bne.n	4f72 <main+0x4e>
			funcLock = true;
    4f5c:	4c1b      	ldr	r4, [pc, #108]	; (4fcc <main+0xa8>)
    4f5e:	2301      	movs	r3, #1
    4f60:	7023      	strb	r3, [r4, #0]
			readKeyboard();
    4f62:	4b1b      	ldr	r3, [pc, #108]	; (4fd0 <main+0xac>)
    4f64:	4798      	blx	r3
			printKeyboardBuffer();
    4f66:	4b1b      	ldr	r3, [pc, #108]	; (4fd4 <main+0xb0>)
    4f68:	4798      	blx	r3
			parseRXBuffer();
    4f6a:	4b1b      	ldr	r3, [pc, #108]	; (4fd8 <main+0xb4>)
    4f6c:	4798      	blx	r3
			funcLock = false;
    4f6e:	2300      	movs	r3, #0
    4f70:	7023      	strb	r3, [r4, #0]
		__WFI();
    4f72:	bf30      	wfi
		if((ul_tickcount % (UINT16_MAX/2) == 0) && (funcLock == false))
    4f74:	883c      	ldrh	r4, [r7, #0]
    4f76:	0029      	movs	r1, r5
    4f78:	0020      	movs	r0, r4
    4f7a:	47b0      	blx	r6
    4f7c:	b289      	uxth	r1, r1
    4f7e:	2900      	cmp	r1, #0
    4f80:	d1e1      	bne.n	4f46 <main+0x22>
    4f82:	4b12      	ldr	r3, [pc, #72]	; (4fcc <main+0xa8>)
    4f84:	781b      	ldrb	r3, [r3, #0]
    4f86:	2b00      	cmp	r3, #0
    4f88:	d1f3      	bne.n	4f72 <main+0x4e>
			funcLock = true;
    4f8a:	4c10      	ldr	r4, [pc, #64]	; (4fcc <main+0xa8>)
    4f8c:	3301      	adds	r3, #1
    4f8e:	7023      	strb	r3, [r4, #0]
			blinkCursor();
    4f90:	4b12      	ldr	r3, [pc, #72]	; (4fdc <main+0xb8>)
    4f92:	4798      	blx	r3
			funcLock = false;
    4f94:	2300      	movs	r3, #0
    4f96:	7023      	strb	r3, [r4, #0]
		if((ul_tickcount % 200 == 0) && (funcLock == false))
    4f98:	4b09      	ldr	r3, [pc, #36]	; (4fc0 <main+0x9c>)
    4f9a:	8818      	ldrh	r0, [r3, #0]
    4f9c:	21c8      	movs	r1, #200	; 0xc8
    4f9e:	4b09      	ldr	r3, [pc, #36]	; (4fc4 <main+0xa0>)
    4fa0:	4798      	blx	r3
    4fa2:	b289      	uxth	r1, r1
    4fa4:	2900      	cmp	r1, #0
    4fa6:	d0d9      	beq.n	4f5c <main+0x38>
    4fa8:	e7e3      	b.n	4f72 <main+0x4e>
    4faa:	46c0      	nop			; (mov r8, r8)
    4fac:	00004ba9 	.word	0x00004ba9
    4fb0:	00004e09 	.word	0x00004e09
    4fb4:	000053a1 	.word	0x000053a1
    4fb8:	00000115 	.word	0x00000115
    4fbc:	20000588 	.word	0x20000588
    4fc0:	200004ec 	.word	0x200004ec
    4fc4:	000050ed 	.word	0x000050ed
    4fc8:	00007fff 	.word	0x00007fff
    4fcc:	200004ea 	.word	0x200004ea
    4fd0:	00004435 	.word	0x00004435
    4fd4:	0000409d 	.word	0x0000409d
    4fd8:	00001ee9 	.word	0x00001ee9
    4fdc:	00003ca9 	.word	0x00003ca9

00004fe0 <__udivsi3>:
    4fe0:	2200      	movs	r2, #0
    4fe2:	0843      	lsrs	r3, r0, #1
    4fe4:	428b      	cmp	r3, r1
    4fe6:	d374      	bcc.n	50d2 <__udivsi3+0xf2>
    4fe8:	0903      	lsrs	r3, r0, #4
    4fea:	428b      	cmp	r3, r1
    4fec:	d35f      	bcc.n	50ae <__udivsi3+0xce>
    4fee:	0a03      	lsrs	r3, r0, #8
    4ff0:	428b      	cmp	r3, r1
    4ff2:	d344      	bcc.n	507e <__udivsi3+0x9e>
    4ff4:	0b03      	lsrs	r3, r0, #12
    4ff6:	428b      	cmp	r3, r1
    4ff8:	d328      	bcc.n	504c <__udivsi3+0x6c>
    4ffa:	0c03      	lsrs	r3, r0, #16
    4ffc:	428b      	cmp	r3, r1
    4ffe:	d30d      	bcc.n	501c <__udivsi3+0x3c>
    5000:	22ff      	movs	r2, #255	; 0xff
    5002:	0209      	lsls	r1, r1, #8
    5004:	ba12      	rev	r2, r2
    5006:	0c03      	lsrs	r3, r0, #16
    5008:	428b      	cmp	r3, r1
    500a:	d302      	bcc.n	5012 <__udivsi3+0x32>
    500c:	1212      	asrs	r2, r2, #8
    500e:	0209      	lsls	r1, r1, #8
    5010:	d065      	beq.n	50de <__udivsi3+0xfe>
    5012:	0b03      	lsrs	r3, r0, #12
    5014:	428b      	cmp	r3, r1
    5016:	d319      	bcc.n	504c <__udivsi3+0x6c>
    5018:	e000      	b.n	501c <__udivsi3+0x3c>
    501a:	0a09      	lsrs	r1, r1, #8
    501c:	0bc3      	lsrs	r3, r0, #15
    501e:	428b      	cmp	r3, r1
    5020:	d301      	bcc.n	5026 <__udivsi3+0x46>
    5022:	03cb      	lsls	r3, r1, #15
    5024:	1ac0      	subs	r0, r0, r3
    5026:	4152      	adcs	r2, r2
    5028:	0b83      	lsrs	r3, r0, #14
    502a:	428b      	cmp	r3, r1
    502c:	d301      	bcc.n	5032 <__udivsi3+0x52>
    502e:	038b      	lsls	r3, r1, #14
    5030:	1ac0      	subs	r0, r0, r3
    5032:	4152      	adcs	r2, r2
    5034:	0b43      	lsrs	r3, r0, #13
    5036:	428b      	cmp	r3, r1
    5038:	d301      	bcc.n	503e <__udivsi3+0x5e>
    503a:	034b      	lsls	r3, r1, #13
    503c:	1ac0      	subs	r0, r0, r3
    503e:	4152      	adcs	r2, r2
    5040:	0b03      	lsrs	r3, r0, #12
    5042:	428b      	cmp	r3, r1
    5044:	d301      	bcc.n	504a <__udivsi3+0x6a>
    5046:	030b      	lsls	r3, r1, #12
    5048:	1ac0      	subs	r0, r0, r3
    504a:	4152      	adcs	r2, r2
    504c:	0ac3      	lsrs	r3, r0, #11
    504e:	428b      	cmp	r3, r1
    5050:	d301      	bcc.n	5056 <__udivsi3+0x76>
    5052:	02cb      	lsls	r3, r1, #11
    5054:	1ac0      	subs	r0, r0, r3
    5056:	4152      	adcs	r2, r2
    5058:	0a83      	lsrs	r3, r0, #10
    505a:	428b      	cmp	r3, r1
    505c:	d301      	bcc.n	5062 <__udivsi3+0x82>
    505e:	028b      	lsls	r3, r1, #10
    5060:	1ac0      	subs	r0, r0, r3
    5062:	4152      	adcs	r2, r2
    5064:	0a43      	lsrs	r3, r0, #9
    5066:	428b      	cmp	r3, r1
    5068:	d301      	bcc.n	506e <__udivsi3+0x8e>
    506a:	024b      	lsls	r3, r1, #9
    506c:	1ac0      	subs	r0, r0, r3
    506e:	4152      	adcs	r2, r2
    5070:	0a03      	lsrs	r3, r0, #8
    5072:	428b      	cmp	r3, r1
    5074:	d301      	bcc.n	507a <__udivsi3+0x9a>
    5076:	020b      	lsls	r3, r1, #8
    5078:	1ac0      	subs	r0, r0, r3
    507a:	4152      	adcs	r2, r2
    507c:	d2cd      	bcs.n	501a <__udivsi3+0x3a>
    507e:	09c3      	lsrs	r3, r0, #7
    5080:	428b      	cmp	r3, r1
    5082:	d301      	bcc.n	5088 <__udivsi3+0xa8>
    5084:	01cb      	lsls	r3, r1, #7
    5086:	1ac0      	subs	r0, r0, r3
    5088:	4152      	adcs	r2, r2
    508a:	0983      	lsrs	r3, r0, #6
    508c:	428b      	cmp	r3, r1
    508e:	d301      	bcc.n	5094 <__udivsi3+0xb4>
    5090:	018b      	lsls	r3, r1, #6
    5092:	1ac0      	subs	r0, r0, r3
    5094:	4152      	adcs	r2, r2
    5096:	0943      	lsrs	r3, r0, #5
    5098:	428b      	cmp	r3, r1
    509a:	d301      	bcc.n	50a0 <__udivsi3+0xc0>
    509c:	014b      	lsls	r3, r1, #5
    509e:	1ac0      	subs	r0, r0, r3
    50a0:	4152      	adcs	r2, r2
    50a2:	0903      	lsrs	r3, r0, #4
    50a4:	428b      	cmp	r3, r1
    50a6:	d301      	bcc.n	50ac <__udivsi3+0xcc>
    50a8:	010b      	lsls	r3, r1, #4
    50aa:	1ac0      	subs	r0, r0, r3
    50ac:	4152      	adcs	r2, r2
    50ae:	08c3      	lsrs	r3, r0, #3
    50b0:	428b      	cmp	r3, r1
    50b2:	d301      	bcc.n	50b8 <__udivsi3+0xd8>
    50b4:	00cb      	lsls	r3, r1, #3
    50b6:	1ac0      	subs	r0, r0, r3
    50b8:	4152      	adcs	r2, r2
    50ba:	0883      	lsrs	r3, r0, #2
    50bc:	428b      	cmp	r3, r1
    50be:	d301      	bcc.n	50c4 <__udivsi3+0xe4>
    50c0:	008b      	lsls	r3, r1, #2
    50c2:	1ac0      	subs	r0, r0, r3
    50c4:	4152      	adcs	r2, r2
    50c6:	0843      	lsrs	r3, r0, #1
    50c8:	428b      	cmp	r3, r1
    50ca:	d301      	bcc.n	50d0 <__udivsi3+0xf0>
    50cc:	004b      	lsls	r3, r1, #1
    50ce:	1ac0      	subs	r0, r0, r3
    50d0:	4152      	adcs	r2, r2
    50d2:	1a41      	subs	r1, r0, r1
    50d4:	d200      	bcs.n	50d8 <__udivsi3+0xf8>
    50d6:	4601      	mov	r1, r0
    50d8:	4152      	adcs	r2, r2
    50da:	4610      	mov	r0, r2
    50dc:	4770      	bx	lr
    50de:	e7ff      	b.n	50e0 <__udivsi3+0x100>
    50e0:	b501      	push	{r0, lr}
    50e2:	2000      	movs	r0, #0
    50e4:	f000 f8f0 	bl	52c8 <__aeabi_idiv0>
    50e8:	bd02      	pop	{r1, pc}
    50ea:	46c0      	nop			; (mov r8, r8)

000050ec <__aeabi_uidivmod>:
    50ec:	2900      	cmp	r1, #0
    50ee:	d0f7      	beq.n	50e0 <__udivsi3+0x100>
    50f0:	e776      	b.n	4fe0 <__udivsi3>
    50f2:	4770      	bx	lr

000050f4 <__divsi3>:
    50f4:	4603      	mov	r3, r0
    50f6:	430b      	orrs	r3, r1
    50f8:	d47f      	bmi.n	51fa <__divsi3+0x106>
    50fa:	2200      	movs	r2, #0
    50fc:	0843      	lsrs	r3, r0, #1
    50fe:	428b      	cmp	r3, r1
    5100:	d374      	bcc.n	51ec <__divsi3+0xf8>
    5102:	0903      	lsrs	r3, r0, #4
    5104:	428b      	cmp	r3, r1
    5106:	d35f      	bcc.n	51c8 <__divsi3+0xd4>
    5108:	0a03      	lsrs	r3, r0, #8
    510a:	428b      	cmp	r3, r1
    510c:	d344      	bcc.n	5198 <__divsi3+0xa4>
    510e:	0b03      	lsrs	r3, r0, #12
    5110:	428b      	cmp	r3, r1
    5112:	d328      	bcc.n	5166 <__divsi3+0x72>
    5114:	0c03      	lsrs	r3, r0, #16
    5116:	428b      	cmp	r3, r1
    5118:	d30d      	bcc.n	5136 <__divsi3+0x42>
    511a:	22ff      	movs	r2, #255	; 0xff
    511c:	0209      	lsls	r1, r1, #8
    511e:	ba12      	rev	r2, r2
    5120:	0c03      	lsrs	r3, r0, #16
    5122:	428b      	cmp	r3, r1
    5124:	d302      	bcc.n	512c <__divsi3+0x38>
    5126:	1212      	asrs	r2, r2, #8
    5128:	0209      	lsls	r1, r1, #8
    512a:	d065      	beq.n	51f8 <__divsi3+0x104>
    512c:	0b03      	lsrs	r3, r0, #12
    512e:	428b      	cmp	r3, r1
    5130:	d319      	bcc.n	5166 <__divsi3+0x72>
    5132:	e000      	b.n	5136 <__divsi3+0x42>
    5134:	0a09      	lsrs	r1, r1, #8
    5136:	0bc3      	lsrs	r3, r0, #15
    5138:	428b      	cmp	r3, r1
    513a:	d301      	bcc.n	5140 <__divsi3+0x4c>
    513c:	03cb      	lsls	r3, r1, #15
    513e:	1ac0      	subs	r0, r0, r3
    5140:	4152      	adcs	r2, r2
    5142:	0b83      	lsrs	r3, r0, #14
    5144:	428b      	cmp	r3, r1
    5146:	d301      	bcc.n	514c <__divsi3+0x58>
    5148:	038b      	lsls	r3, r1, #14
    514a:	1ac0      	subs	r0, r0, r3
    514c:	4152      	adcs	r2, r2
    514e:	0b43      	lsrs	r3, r0, #13
    5150:	428b      	cmp	r3, r1
    5152:	d301      	bcc.n	5158 <__divsi3+0x64>
    5154:	034b      	lsls	r3, r1, #13
    5156:	1ac0      	subs	r0, r0, r3
    5158:	4152      	adcs	r2, r2
    515a:	0b03      	lsrs	r3, r0, #12
    515c:	428b      	cmp	r3, r1
    515e:	d301      	bcc.n	5164 <__divsi3+0x70>
    5160:	030b      	lsls	r3, r1, #12
    5162:	1ac0      	subs	r0, r0, r3
    5164:	4152      	adcs	r2, r2
    5166:	0ac3      	lsrs	r3, r0, #11
    5168:	428b      	cmp	r3, r1
    516a:	d301      	bcc.n	5170 <__divsi3+0x7c>
    516c:	02cb      	lsls	r3, r1, #11
    516e:	1ac0      	subs	r0, r0, r3
    5170:	4152      	adcs	r2, r2
    5172:	0a83      	lsrs	r3, r0, #10
    5174:	428b      	cmp	r3, r1
    5176:	d301      	bcc.n	517c <__divsi3+0x88>
    5178:	028b      	lsls	r3, r1, #10
    517a:	1ac0      	subs	r0, r0, r3
    517c:	4152      	adcs	r2, r2
    517e:	0a43      	lsrs	r3, r0, #9
    5180:	428b      	cmp	r3, r1
    5182:	d301      	bcc.n	5188 <__divsi3+0x94>
    5184:	024b      	lsls	r3, r1, #9
    5186:	1ac0      	subs	r0, r0, r3
    5188:	4152      	adcs	r2, r2
    518a:	0a03      	lsrs	r3, r0, #8
    518c:	428b      	cmp	r3, r1
    518e:	d301      	bcc.n	5194 <__divsi3+0xa0>
    5190:	020b      	lsls	r3, r1, #8
    5192:	1ac0      	subs	r0, r0, r3
    5194:	4152      	adcs	r2, r2
    5196:	d2cd      	bcs.n	5134 <__divsi3+0x40>
    5198:	09c3      	lsrs	r3, r0, #7
    519a:	428b      	cmp	r3, r1
    519c:	d301      	bcc.n	51a2 <__divsi3+0xae>
    519e:	01cb      	lsls	r3, r1, #7
    51a0:	1ac0      	subs	r0, r0, r3
    51a2:	4152      	adcs	r2, r2
    51a4:	0983      	lsrs	r3, r0, #6
    51a6:	428b      	cmp	r3, r1
    51a8:	d301      	bcc.n	51ae <__divsi3+0xba>
    51aa:	018b      	lsls	r3, r1, #6
    51ac:	1ac0      	subs	r0, r0, r3
    51ae:	4152      	adcs	r2, r2
    51b0:	0943      	lsrs	r3, r0, #5
    51b2:	428b      	cmp	r3, r1
    51b4:	d301      	bcc.n	51ba <__divsi3+0xc6>
    51b6:	014b      	lsls	r3, r1, #5
    51b8:	1ac0      	subs	r0, r0, r3
    51ba:	4152      	adcs	r2, r2
    51bc:	0903      	lsrs	r3, r0, #4
    51be:	428b      	cmp	r3, r1
    51c0:	d301      	bcc.n	51c6 <__divsi3+0xd2>
    51c2:	010b      	lsls	r3, r1, #4
    51c4:	1ac0      	subs	r0, r0, r3
    51c6:	4152      	adcs	r2, r2
    51c8:	08c3      	lsrs	r3, r0, #3
    51ca:	428b      	cmp	r3, r1
    51cc:	d301      	bcc.n	51d2 <__divsi3+0xde>
    51ce:	00cb      	lsls	r3, r1, #3
    51d0:	1ac0      	subs	r0, r0, r3
    51d2:	4152      	adcs	r2, r2
    51d4:	0883      	lsrs	r3, r0, #2
    51d6:	428b      	cmp	r3, r1
    51d8:	d301      	bcc.n	51de <__divsi3+0xea>
    51da:	008b      	lsls	r3, r1, #2
    51dc:	1ac0      	subs	r0, r0, r3
    51de:	4152      	adcs	r2, r2
    51e0:	0843      	lsrs	r3, r0, #1
    51e2:	428b      	cmp	r3, r1
    51e4:	d301      	bcc.n	51ea <__divsi3+0xf6>
    51e6:	004b      	lsls	r3, r1, #1
    51e8:	1ac0      	subs	r0, r0, r3
    51ea:	4152      	adcs	r2, r2
    51ec:	1a41      	subs	r1, r0, r1
    51ee:	d200      	bcs.n	51f2 <__divsi3+0xfe>
    51f0:	4601      	mov	r1, r0
    51f2:	4152      	adcs	r2, r2
    51f4:	4610      	mov	r0, r2
    51f6:	4770      	bx	lr
    51f8:	e05d      	b.n	52b6 <__divsi3+0x1c2>
    51fa:	0fca      	lsrs	r2, r1, #31
    51fc:	d000      	beq.n	5200 <__divsi3+0x10c>
    51fe:	4249      	negs	r1, r1
    5200:	1003      	asrs	r3, r0, #32
    5202:	d300      	bcc.n	5206 <__divsi3+0x112>
    5204:	4240      	negs	r0, r0
    5206:	4053      	eors	r3, r2
    5208:	2200      	movs	r2, #0
    520a:	469c      	mov	ip, r3
    520c:	0903      	lsrs	r3, r0, #4
    520e:	428b      	cmp	r3, r1
    5210:	d32d      	bcc.n	526e <__divsi3+0x17a>
    5212:	0a03      	lsrs	r3, r0, #8
    5214:	428b      	cmp	r3, r1
    5216:	d312      	bcc.n	523e <__divsi3+0x14a>
    5218:	22fc      	movs	r2, #252	; 0xfc
    521a:	0189      	lsls	r1, r1, #6
    521c:	ba12      	rev	r2, r2
    521e:	0a03      	lsrs	r3, r0, #8
    5220:	428b      	cmp	r3, r1
    5222:	d30c      	bcc.n	523e <__divsi3+0x14a>
    5224:	0189      	lsls	r1, r1, #6
    5226:	1192      	asrs	r2, r2, #6
    5228:	428b      	cmp	r3, r1
    522a:	d308      	bcc.n	523e <__divsi3+0x14a>
    522c:	0189      	lsls	r1, r1, #6
    522e:	1192      	asrs	r2, r2, #6
    5230:	428b      	cmp	r3, r1
    5232:	d304      	bcc.n	523e <__divsi3+0x14a>
    5234:	0189      	lsls	r1, r1, #6
    5236:	d03a      	beq.n	52ae <__divsi3+0x1ba>
    5238:	1192      	asrs	r2, r2, #6
    523a:	e000      	b.n	523e <__divsi3+0x14a>
    523c:	0989      	lsrs	r1, r1, #6
    523e:	09c3      	lsrs	r3, r0, #7
    5240:	428b      	cmp	r3, r1
    5242:	d301      	bcc.n	5248 <__divsi3+0x154>
    5244:	01cb      	lsls	r3, r1, #7
    5246:	1ac0      	subs	r0, r0, r3
    5248:	4152      	adcs	r2, r2
    524a:	0983      	lsrs	r3, r0, #6
    524c:	428b      	cmp	r3, r1
    524e:	d301      	bcc.n	5254 <__divsi3+0x160>
    5250:	018b      	lsls	r3, r1, #6
    5252:	1ac0      	subs	r0, r0, r3
    5254:	4152      	adcs	r2, r2
    5256:	0943      	lsrs	r3, r0, #5
    5258:	428b      	cmp	r3, r1
    525a:	d301      	bcc.n	5260 <__divsi3+0x16c>
    525c:	014b      	lsls	r3, r1, #5
    525e:	1ac0      	subs	r0, r0, r3
    5260:	4152      	adcs	r2, r2
    5262:	0903      	lsrs	r3, r0, #4
    5264:	428b      	cmp	r3, r1
    5266:	d301      	bcc.n	526c <__divsi3+0x178>
    5268:	010b      	lsls	r3, r1, #4
    526a:	1ac0      	subs	r0, r0, r3
    526c:	4152      	adcs	r2, r2
    526e:	08c3      	lsrs	r3, r0, #3
    5270:	428b      	cmp	r3, r1
    5272:	d301      	bcc.n	5278 <__divsi3+0x184>
    5274:	00cb      	lsls	r3, r1, #3
    5276:	1ac0      	subs	r0, r0, r3
    5278:	4152      	adcs	r2, r2
    527a:	0883      	lsrs	r3, r0, #2
    527c:	428b      	cmp	r3, r1
    527e:	d301      	bcc.n	5284 <__divsi3+0x190>
    5280:	008b      	lsls	r3, r1, #2
    5282:	1ac0      	subs	r0, r0, r3
    5284:	4152      	adcs	r2, r2
    5286:	d2d9      	bcs.n	523c <__divsi3+0x148>
    5288:	0843      	lsrs	r3, r0, #1
    528a:	428b      	cmp	r3, r1
    528c:	d301      	bcc.n	5292 <__divsi3+0x19e>
    528e:	004b      	lsls	r3, r1, #1
    5290:	1ac0      	subs	r0, r0, r3
    5292:	4152      	adcs	r2, r2
    5294:	1a41      	subs	r1, r0, r1
    5296:	d200      	bcs.n	529a <__divsi3+0x1a6>
    5298:	4601      	mov	r1, r0
    529a:	4663      	mov	r3, ip
    529c:	4152      	adcs	r2, r2
    529e:	105b      	asrs	r3, r3, #1
    52a0:	4610      	mov	r0, r2
    52a2:	d301      	bcc.n	52a8 <__divsi3+0x1b4>
    52a4:	4240      	negs	r0, r0
    52a6:	2b00      	cmp	r3, #0
    52a8:	d500      	bpl.n	52ac <__divsi3+0x1b8>
    52aa:	4249      	negs	r1, r1
    52ac:	4770      	bx	lr
    52ae:	4663      	mov	r3, ip
    52b0:	105b      	asrs	r3, r3, #1
    52b2:	d300      	bcc.n	52b6 <__divsi3+0x1c2>
    52b4:	4240      	negs	r0, r0
    52b6:	b501      	push	{r0, lr}
    52b8:	2000      	movs	r0, #0
    52ba:	f000 f805 	bl	52c8 <__aeabi_idiv0>
    52be:	bd02      	pop	{r1, pc}

000052c0 <__aeabi_idivmod>:
    52c0:	2900      	cmp	r1, #0
    52c2:	d0f8      	beq.n	52b6 <__divsi3+0x1c2>
    52c4:	e716      	b.n	50f4 <__divsi3>
    52c6:	4770      	bx	lr

000052c8 <__aeabi_idiv0>:
    52c8:	4770      	bx	lr
    52ca:	46c0      	nop			; (mov r8, r8)

000052cc <__aeabi_lmul>:
    52cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ce:	46ce      	mov	lr, r9
    52d0:	4647      	mov	r7, r8
    52d2:	0415      	lsls	r5, r2, #16
    52d4:	0c2d      	lsrs	r5, r5, #16
    52d6:	002e      	movs	r6, r5
    52d8:	b580      	push	{r7, lr}
    52da:	0407      	lsls	r7, r0, #16
    52dc:	0c14      	lsrs	r4, r2, #16
    52de:	0c3f      	lsrs	r7, r7, #16
    52e0:	4699      	mov	r9, r3
    52e2:	0c03      	lsrs	r3, r0, #16
    52e4:	437e      	muls	r6, r7
    52e6:	435d      	muls	r5, r3
    52e8:	4367      	muls	r7, r4
    52ea:	4363      	muls	r3, r4
    52ec:	197f      	adds	r7, r7, r5
    52ee:	0c34      	lsrs	r4, r6, #16
    52f0:	19e4      	adds	r4, r4, r7
    52f2:	469c      	mov	ip, r3
    52f4:	42a5      	cmp	r5, r4
    52f6:	d903      	bls.n	5300 <__aeabi_lmul+0x34>
    52f8:	2380      	movs	r3, #128	; 0x80
    52fa:	025b      	lsls	r3, r3, #9
    52fc:	4698      	mov	r8, r3
    52fe:	44c4      	add	ip, r8
    5300:	464b      	mov	r3, r9
    5302:	4351      	muls	r1, r2
    5304:	4343      	muls	r3, r0
    5306:	0436      	lsls	r6, r6, #16
    5308:	0c36      	lsrs	r6, r6, #16
    530a:	0c25      	lsrs	r5, r4, #16
    530c:	0424      	lsls	r4, r4, #16
    530e:	4465      	add	r5, ip
    5310:	19a4      	adds	r4, r4, r6
    5312:	1859      	adds	r1, r3, r1
    5314:	1949      	adds	r1, r1, r5
    5316:	0020      	movs	r0, r4
    5318:	bc0c      	pop	{r2, r3}
    531a:	4690      	mov	r8, r2
    531c:	4699      	mov	r9, r3
    531e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005320 <__libc_init_array>:
    5320:	b570      	push	{r4, r5, r6, lr}
    5322:	2600      	movs	r6, #0
    5324:	4d0c      	ldr	r5, [pc, #48]	; (5358 <__libc_init_array+0x38>)
    5326:	4c0d      	ldr	r4, [pc, #52]	; (535c <__libc_init_array+0x3c>)
    5328:	1b64      	subs	r4, r4, r5
    532a:	10a4      	asrs	r4, r4, #2
    532c:	42a6      	cmp	r6, r4
    532e:	d109      	bne.n	5344 <__libc_init_array+0x24>
    5330:	2600      	movs	r6, #0
    5332:	f003 fce3 	bl	8cfc <_init>
    5336:	4d0a      	ldr	r5, [pc, #40]	; (5360 <__libc_init_array+0x40>)
    5338:	4c0a      	ldr	r4, [pc, #40]	; (5364 <__libc_init_array+0x44>)
    533a:	1b64      	subs	r4, r4, r5
    533c:	10a4      	asrs	r4, r4, #2
    533e:	42a6      	cmp	r6, r4
    5340:	d105      	bne.n	534e <__libc_init_array+0x2e>
    5342:	bd70      	pop	{r4, r5, r6, pc}
    5344:	00b3      	lsls	r3, r6, #2
    5346:	58eb      	ldr	r3, [r5, r3]
    5348:	4798      	blx	r3
    534a:	3601      	adds	r6, #1
    534c:	e7ee      	b.n	532c <__libc_init_array+0xc>
    534e:	00b3      	lsls	r3, r6, #2
    5350:	58eb      	ldr	r3, [r5, r3]
    5352:	4798      	blx	r3
    5354:	3601      	adds	r6, #1
    5356:	e7f2      	b.n	533e <__libc_init_array+0x1e>
    5358:	00008d08 	.word	0x00008d08
    535c:	00008d08 	.word	0x00008d08
    5360:	00008d08 	.word	0x00008d08
    5364:	00008d0c 	.word	0x00008d0c

00005368 <__itoa>:
    5368:	1e93      	subs	r3, r2, #2
    536a:	b510      	push	{r4, lr}
    536c:	000c      	movs	r4, r1
    536e:	2b22      	cmp	r3, #34	; 0x22
    5370:	d904      	bls.n	537c <__itoa+0x14>
    5372:	2300      	movs	r3, #0
    5374:	001c      	movs	r4, r3
    5376:	700b      	strb	r3, [r1, #0]
    5378:	0020      	movs	r0, r4
    537a:	bd10      	pop	{r4, pc}
    537c:	2a0a      	cmp	r2, #10
    537e:	d109      	bne.n	5394 <__itoa+0x2c>
    5380:	2800      	cmp	r0, #0
    5382:	da07      	bge.n	5394 <__itoa+0x2c>
    5384:	232d      	movs	r3, #45	; 0x2d
    5386:	700b      	strb	r3, [r1, #0]
    5388:	2101      	movs	r1, #1
    538a:	4240      	negs	r0, r0
    538c:	1861      	adds	r1, r4, r1
    538e:	f000 fa3f 	bl	5810 <__utoa>
    5392:	e7f1      	b.n	5378 <__itoa+0x10>
    5394:	2100      	movs	r1, #0
    5396:	e7f9      	b.n	538c <__itoa+0x24>

00005398 <itoa>:
    5398:	b510      	push	{r4, lr}
    539a:	f7ff ffe5 	bl	5368 <__itoa>
    539e:	bd10      	pop	{r4, pc}

000053a0 <malloc>:
    53a0:	b510      	push	{r4, lr}
    53a2:	4b03      	ldr	r3, [pc, #12]	; (53b0 <malloc+0x10>)
    53a4:	0001      	movs	r1, r0
    53a6:	6818      	ldr	r0, [r3, #0]
    53a8:	f000 f860 	bl	546c <_malloc_r>
    53ac:	bd10      	pop	{r4, pc}
    53ae:	46c0      	nop			; (mov r8, r8)
    53b0:	200001ac 	.word	0x200001ac

000053b4 <memcpy>:
    53b4:	2300      	movs	r3, #0
    53b6:	b510      	push	{r4, lr}
    53b8:	429a      	cmp	r2, r3
    53ba:	d100      	bne.n	53be <memcpy+0xa>
    53bc:	bd10      	pop	{r4, pc}
    53be:	5ccc      	ldrb	r4, [r1, r3]
    53c0:	54c4      	strb	r4, [r0, r3]
    53c2:	3301      	adds	r3, #1
    53c4:	e7f8      	b.n	53b8 <memcpy+0x4>

000053c6 <memset>:
    53c6:	0003      	movs	r3, r0
    53c8:	1882      	adds	r2, r0, r2
    53ca:	4293      	cmp	r3, r2
    53cc:	d100      	bne.n	53d0 <memset+0xa>
    53ce:	4770      	bx	lr
    53d0:	7019      	strb	r1, [r3, #0]
    53d2:	3301      	adds	r3, #1
    53d4:	e7f9      	b.n	53ca <memset+0x4>
	...

000053d8 <_free_r>:
    53d8:	b570      	push	{r4, r5, r6, lr}
    53da:	0005      	movs	r5, r0
    53dc:	2900      	cmp	r1, #0
    53de:	d010      	beq.n	5402 <_free_r+0x2a>
    53e0:	1f0c      	subs	r4, r1, #4
    53e2:	6823      	ldr	r3, [r4, #0]
    53e4:	2b00      	cmp	r3, #0
    53e6:	da00      	bge.n	53ea <_free_r+0x12>
    53e8:	18e4      	adds	r4, r4, r3
    53ea:	0028      	movs	r0, r5
    53ec:	f000 fc44 	bl	5c78 <__malloc_lock>
    53f0:	4a1d      	ldr	r2, [pc, #116]	; (5468 <_free_r+0x90>)
    53f2:	6813      	ldr	r3, [r2, #0]
    53f4:	2b00      	cmp	r3, #0
    53f6:	d105      	bne.n	5404 <_free_r+0x2c>
    53f8:	6063      	str	r3, [r4, #4]
    53fa:	6014      	str	r4, [r2, #0]
    53fc:	0028      	movs	r0, r5
    53fe:	f000 fc3c 	bl	5c7a <__malloc_unlock>
    5402:	bd70      	pop	{r4, r5, r6, pc}
    5404:	42a3      	cmp	r3, r4
    5406:	d909      	bls.n	541c <_free_r+0x44>
    5408:	6821      	ldr	r1, [r4, #0]
    540a:	1860      	adds	r0, r4, r1
    540c:	4283      	cmp	r3, r0
    540e:	d1f3      	bne.n	53f8 <_free_r+0x20>
    5410:	6818      	ldr	r0, [r3, #0]
    5412:	685b      	ldr	r3, [r3, #4]
    5414:	1841      	adds	r1, r0, r1
    5416:	6021      	str	r1, [r4, #0]
    5418:	e7ee      	b.n	53f8 <_free_r+0x20>
    541a:	0013      	movs	r3, r2
    541c:	685a      	ldr	r2, [r3, #4]
    541e:	2a00      	cmp	r2, #0
    5420:	d001      	beq.n	5426 <_free_r+0x4e>
    5422:	42a2      	cmp	r2, r4
    5424:	d9f9      	bls.n	541a <_free_r+0x42>
    5426:	6819      	ldr	r1, [r3, #0]
    5428:	1858      	adds	r0, r3, r1
    542a:	42a0      	cmp	r0, r4
    542c:	d10b      	bne.n	5446 <_free_r+0x6e>
    542e:	6820      	ldr	r0, [r4, #0]
    5430:	1809      	adds	r1, r1, r0
    5432:	1858      	adds	r0, r3, r1
    5434:	6019      	str	r1, [r3, #0]
    5436:	4282      	cmp	r2, r0
    5438:	d1e0      	bne.n	53fc <_free_r+0x24>
    543a:	6810      	ldr	r0, [r2, #0]
    543c:	6852      	ldr	r2, [r2, #4]
    543e:	1841      	adds	r1, r0, r1
    5440:	6019      	str	r1, [r3, #0]
    5442:	605a      	str	r2, [r3, #4]
    5444:	e7da      	b.n	53fc <_free_r+0x24>
    5446:	42a0      	cmp	r0, r4
    5448:	d902      	bls.n	5450 <_free_r+0x78>
    544a:	230c      	movs	r3, #12
    544c:	602b      	str	r3, [r5, #0]
    544e:	e7d5      	b.n	53fc <_free_r+0x24>
    5450:	6821      	ldr	r1, [r4, #0]
    5452:	1860      	adds	r0, r4, r1
    5454:	4282      	cmp	r2, r0
    5456:	d103      	bne.n	5460 <_free_r+0x88>
    5458:	6810      	ldr	r0, [r2, #0]
    545a:	6852      	ldr	r2, [r2, #4]
    545c:	1841      	adds	r1, r0, r1
    545e:	6021      	str	r1, [r4, #0]
    5460:	6062      	str	r2, [r4, #4]
    5462:	605c      	str	r4, [r3, #4]
    5464:	e7ca      	b.n	53fc <_free_r+0x24>
    5466:	46c0      	nop			; (mov r8, r8)
    5468:	200004f0 	.word	0x200004f0

0000546c <_malloc_r>:
    546c:	2303      	movs	r3, #3
    546e:	b570      	push	{r4, r5, r6, lr}
    5470:	1ccd      	adds	r5, r1, #3
    5472:	439d      	bics	r5, r3
    5474:	3508      	adds	r5, #8
    5476:	0006      	movs	r6, r0
    5478:	2d0c      	cmp	r5, #12
    547a:	d21e      	bcs.n	54ba <_malloc_r+0x4e>
    547c:	250c      	movs	r5, #12
    547e:	42a9      	cmp	r1, r5
    5480:	d81d      	bhi.n	54be <_malloc_r+0x52>
    5482:	0030      	movs	r0, r6
    5484:	f000 fbf8 	bl	5c78 <__malloc_lock>
    5488:	4a25      	ldr	r2, [pc, #148]	; (5520 <_malloc_r+0xb4>)
    548a:	6814      	ldr	r4, [r2, #0]
    548c:	0021      	movs	r1, r4
    548e:	2900      	cmp	r1, #0
    5490:	d119      	bne.n	54c6 <_malloc_r+0x5a>
    5492:	4c24      	ldr	r4, [pc, #144]	; (5524 <_malloc_r+0xb8>)
    5494:	6823      	ldr	r3, [r4, #0]
    5496:	2b00      	cmp	r3, #0
    5498:	d103      	bne.n	54a2 <_malloc_r+0x36>
    549a:	0030      	movs	r0, r6
    549c:	f000 f8dc 	bl	5658 <_sbrk_r>
    54a0:	6020      	str	r0, [r4, #0]
    54a2:	0029      	movs	r1, r5
    54a4:	0030      	movs	r0, r6
    54a6:	f000 f8d7 	bl	5658 <_sbrk_r>
    54aa:	1c43      	adds	r3, r0, #1
    54ac:	d12c      	bne.n	5508 <_malloc_r+0x9c>
    54ae:	230c      	movs	r3, #12
    54b0:	0030      	movs	r0, r6
    54b2:	6033      	str	r3, [r6, #0]
    54b4:	f000 fbe1 	bl	5c7a <__malloc_unlock>
    54b8:	e003      	b.n	54c2 <_malloc_r+0x56>
    54ba:	2d00      	cmp	r5, #0
    54bc:	dadf      	bge.n	547e <_malloc_r+0x12>
    54be:	230c      	movs	r3, #12
    54c0:	6033      	str	r3, [r6, #0]
    54c2:	2000      	movs	r0, #0
    54c4:	bd70      	pop	{r4, r5, r6, pc}
    54c6:	680b      	ldr	r3, [r1, #0]
    54c8:	1b5b      	subs	r3, r3, r5
    54ca:	d41a      	bmi.n	5502 <_malloc_r+0x96>
    54cc:	2b0b      	cmp	r3, #11
    54ce:	d903      	bls.n	54d8 <_malloc_r+0x6c>
    54d0:	600b      	str	r3, [r1, #0]
    54d2:	18cc      	adds	r4, r1, r3
    54d4:	6025      	str	r5, [r4, #0]
    54d6:	e003      	b.n	54e0 <_malloc_r+0x74>
    54d8:	428c      	cmp	r4, r1
    54da:	d10e      	bne.n	54fa <_malloc_r+0x8e>
    54dc:	6863      	ldr	r3, [r4, #4]
    54de:	6013      	str	r3, [r2, #0]
    54e0:	0030      	movs	r0, r6
    54e2:	f000 fbca 	bl	5c7a <__malloc_unlock>
    54e6:	0020      	movs	r0, r4
    54e8:	2207      	movs	r2, #7
    54ea:	300b      	adds	r0, #11
    54ec:	1d23      	adds	r3, r4, #4
    54ee:	4390      	bics	r0, r2
    54f0:	1ac3      	subs	r3, r0, r3
    54f2:	d0e7      	beq.n	54c4 <_malloc_r+0x58>
    54f4:	425a      	negs	r2, r3
    54f6:	50e2      	str	r2, [r4, r3]
    54f8:	e7e4      	b.n	54c4 <_malloc_r+0x58>
    54fa:	684b      	ldr	r3, [r1, #4]
    54fc:	6063      	str	r3, [r4, #4]
    54fe:	000c      	movs	r4, r1
    5500:	e7ee      	b.n	54e0 <_malloc_r+0x74>
    5502:	000c      	movs	r4, r1
    5504:	6849      	ldr	r1, [r1, #4]
    5506:	e7c2      	b.n	548e <_malloc_r+0x22>
    5508:	2303      	movs	r3, #3
    550a:	1cc4      	adds	r4, r0, #3
    550c:	439c      	bics	r4, r3
    550e:	42a0      	cmp	r0, r4
    5510:	d0e0      	beq.n	54d4 <_malloc_r+0x68>
    5512:	1a21      	subs	r1, r4, r0
    5514:	0030      	movs	r0, r6
    5516:	f000 f89f 	bl	5658 <_sbrk_r>
    551a:	1c43      	adds	r3, r0, #1
    551c:	d1da      	bne.n	54d4 <_malloc_r+0x68>
    551e:	e7c6      	b.n	54ae <_malloc_r+0x42>
    5520:	200004f0 	.word	0x200004f0
    5524:	200004f4 	.word	0x200004f4

00005528 <iprintf>:
    5528:	b40f      	push	{r0, r1, r2, r3}
    552a:	4b0b      	ldr	r3, [pc, #44]	; (5558 <iprintf+0x30>)
    552c:	b513      	push	{r0, r1, r4, lr}
    552e:	681c      	ldr	r4, [r3, #0]
    5530:	2c00      	cmp	r4, #0
    5532:	d005      	beq.n	5540 <iprintf+0x18>
    5534:	69a3      	ldr	r3, [r4, #24]
    5536:	2b00      	cmp	r3, #0
    5538:	d102      	bne.n	5540 <iprintf+0x18>
    553a:	0020      	movs	r0, r4
    553c:	f000 fa9a 	bl	5a74 <__sinit>
    5540:	ab05      	add	r3, sp, #20
    5542:	9a04      	ldr	r2, [sp, #16]
    5544:	68a1      	ldr	r1, [r4, #8]
    5546:	0020      	movs	r0, r4
    5548:	9301      	str	r3, [sp, #4]
    554a:	f000 fbbf 	bl	5ccc <_vfiprintf_r>
    554e:	bc16      	pop	{r1, r2, r4}
    5550:	bc08      	pop	{r3}
    5552:	b004      	add	sp, #16
    5554:	4718      	bx	r3
    5556:	46c0      	nop			; (mov r8, r8)
    5558:	200001ac 	.word	0x200001ac

0000555c <putchar>:
    555c:	4b08      	ldr	r3, [pc, #32]	; (5580 <putchar+0x24>)
    555e:	b570      	push	{r4, r5, r6, lr}
    5560:	681c      	ldr	r4, [r3, #0]
    5562:	0005      	movs	r5, r0
    5564:	2c00      	cmp	r4, #0
    5566:	d005      	beq.n	5574 <putchar+0x18>
    5568:	69a3      	ldr	r3, [r4, #24]
    556a:	2b00      	cmp	r3, #0
    556c:	d102      	bne.n	5574 <putchar+0x18>
    556e:	0020      	movs	r0, r4
    5570:	f000 fa80 	bl	5a74 <__sinit>
    5574:	0029      	movs	r1, r5
    5576:	68a2      	ldr	r2, [r4, #8]
    5578:	0020      	movs	r0, r4
    557a:	f000 fe4b 	bl	6214 <_putc_r>
    557e:	bd70      	pop	{r4, r5, r6, pc}
    5580:	200001ac 	.word	0x200001ac

00005584 <srand>:
    5584:	4b10      	ldr	r3, [pc, #64]	; (55c8 <srand+0x44>)
    5586:	b570      	push	{r4, r5, r6, lr}
    5588:	681c      	ldr	r4, [r3, #0]
    558a:	0005      	movs	r5, r0
    558c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    558e:	2b00      	cmp	r3, #0
    5590:	d115      	bne.n	55be <srand+0x3a>
    5592:	2018      	movs	r0, #24
    5594:	f7ff ff04 	bl	53a0 <malloc>
    5598:	4b0c      	ldr	r3, [pc, #48]	; (55cc <srand+0x48>)
    559a:	63a0      	str	r0, [r4, #56]	; 0x38
    559c:	8003      	strh	r3, [r0, #0]
    559e:	4b0c      	ldr	r3, [pc, #48]	; (55d0 <srand+0x4c>)
    55a0:	2201      	movs	r2, #1
    55a2:	8043      	strh	r3, [r0, #2]
    55a4:	4b0b      	ldr	r3, [pc, #44]	; (55d4 <srand+0x50>)
    55a6:	8083      	strh	r3, [r0, #4]
    55a8:	4b0b      	ldr	r3, [pc, #44]	; (55d8 <srand+0x54>)
    55aa:	80c3      	strh	r3, [r0, #6]
    55ac:	4b0b      	ldr	r3, [pc, #44]	; (55dc <srand+0x58>)
    55ae:	8103      	strh	r3, [r0, #8]
    55b0:	2305      	movs	r3, #5
    55b2:	8143      	strh	r3, [r0, #10]
    55b4:	3306      	adds	r3, #6
    55b6:	8183      	strh	r3, [r0, #12]
    55b8:	2300      	movs	r3, #0
    55ba:	6102      	str	r2, [r0, #16]
    55bc:	6143      	str	r3, [r0, #20]
    55be:	2200      	movs	r2, #0
    55c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    55c2:	611d      	str	r5, [r3, #16]
    55c4:	615a      	str	r2, [r3, #20]
    55c6:	bd70      	pop	{r4, r5, r6, pc}
    55c8:	200001ac 	.word	0x200001ac
    55cc:	0000330e 	.word	0x0000330e
    55d0:	ffffabcd 	.word	0xffffabcd
    55d4:	00001234 	.word	0x00001234
    55d8:	ffffe66d 	.word	0xffffe66d
    55dc:	ffffdeec 	.word	0xffffdeec

000055e0 <rand>:
    55e0:	4b15      	ldr	r3, [pc, #84]	; (5638 <rand+0x58>)
    55e2:	b510      	push	{r4, lr}
    55e4:	681c      	ldr	r4, [r3, #0]
    55e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    55e8:	2b00      	cmp	r3, #0
    55ea:	d115      	bne.n	5618 <rand+0x38>
    55ec:	2018      	movs	r0, #24
    55ee:	f7ff fed7 	bl	53a0 <malloc>
    55f2:	4b12      	ldr	r3, [pc, #72]	; (563c <rand+0x5c>)
    55f4:	63a0      	str	r0, [r4, #56]	; 0x38
    55f6:	8003      	strh	r3, [r0, #0]
    55f8:	4b11      	ldr	r3, [pc, #68]	; (5640 <rand+0x60>)
    55fa:	2201      	movs	r2, #1
    55fc:	8043      	strh	r3, [r0, #2]
    55fe:	4b11      	ldr	r3, [pc, #68]	; (5644 <rand+0x64>)
    5600:	8083      	strh	r3, [r0, #4]
    5602:	4b11      	ldr	r3, [pc, #68]	; (5648 <rand+0x68>)
    5604:	80c3      	strh	r3, [r0, #6]
    5606:	4b11      	ldr	r3, [pc, #68]	; (564c <rand+0x6c>)
    5608:	8103      	strh	r3, [r0, #8]
    560a:	2305      	movs	r3, #5
    560c:	8143      	strh	r3, [r0, #10]
    560e:	3306      	adds	r3, #6
    5610:	8183      	strh	r3, [r0, #12]
    5612:	2300      	movs	r3, #0
    5614:	6102      	str	r2, [r0, #16]
    5616:	6143      	str	r3, [r0, #20]
    5618:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    561a:	4a0d      	ldr	r2, [pc, #52]	; (5650 <rand+0x70>)
    561c:	6920      	ldr	r0, [r4, #16]
    561e:	6961      	ldr	r1, [r4, #20]
    5620:	4b0c      	ldr	r3, [pc, #48]	; (5654 <rand+0x74>)
    5622:	f7ff fe53 	bl	52cc <__aeabi_lmul>
    5626:	2201      	movs	r2, #1
    5628:	2300      	movs	r3, #0
    562a:	1880      	adds	r0, r0, r2
    562c:	4159      	adcs	r1, r3
    562e:	6120      	str	r0, [r4, #16]
    5630:	6161      	str	r1, [r4, #20]
    5632:	0048      	lsls	r0, r1, #1
    5634:	0840      	lsrs	r0, r0, #1
    5636:	bd10      	pop	{r4, pc}
    5638:	200001ac 	.word	0x200001ac
    563c:	0000330e 	.word	0x0000330e
    5640:	ffffabcd 	.word	0xffffabcd
    5644:	00001234 	.word	0x00001234
    5648:	ffffe66d 	.word	0xffffe66d
    564c:	ffffdeec 	.word	0xffffdeec
    5650:	4c957f2d 	.word	0x4c957f2d
    5654:	5851f42d 	.word	0x5851f42d

00005658 <_sbrk_r>:
    5658:	2300      	movs	r3, #0
    565a:	b570      	push	{r4, r5, r6, lr}
    565c:	4c06      	ldr	r4, [pc, #24]	; (5678 <_sbrk_r+0x20>)
    565e:	0005      	movs	r5, r0
    5660:	0008      	movs	r0, r1
    5662:	6023      	str	r3, [r4, #0]
    5664:	f7fe f940 	bl	38e8 <_sbrk>
    5668:	1c43      	adds	r3, r0, #1
    566a:	d103      	bne.n	5674 <_sbrk_r+0x1c>
    566c:	6823      	ldr	r3, [r4, #0]
    566e:	2b00      	cmp	r3, #0
    5670:	d000      	beq.n	5674 <_sbrk_r+0x1c>
    5672:	602b      	str	r3, [r5, #0]
    5674:	bd70      	pop	{r4, r5, r6, pc}
    5676:	46c0      	nop			; (mov r8, r8)
    5678:	20003824 	.word	0x20003824

0000567c <setbuf>:
    567c:	424a      	negs	r2, r1
    567e:	414a      	adcs	r2, r1
    5680:	2380      	movs	r3, #128	; 0x80
    5682:	b510      	push	{r4, lr}
    5684:	0052      	lsls	r2, r2, #1
    5686:	00db      	lsls	r3, r3, #3
    5688:	f000 f802 	bl	5690 <setvbuf>
    568c:	bd10      	pop	{r4, pc}
	...

00005690 <setvbuf>:
    5690:	b5f0      	push	{r4, r5, r6, r7, lr}
    5692:	001d      	movs	r5, r3
    5694:	4b4f      	ldr	r3, [pc, #316]	; (57d4 <setvbuf+0x144>)
    5696:	b085      	sub	sp, #20
    5698:	681e      	ldr	r6, [r3, #0]
    569a:	0004      	movs	r4, r0
    569c:	000f      	movs	r7, r1
    569e:	9200      	str	r2, [sp, #0]
    56a0:	2e00      	cmp	r6, #0
    56a2:	d005      	beq.n	56b0 <setvbuf+0x20>
    56a4:	69b3      	ldr	r3, [r6, #24]
    56a6:	2b00      	cmp	r3, #0
    56a8:	d102      	bne.n	56b0 <setvbuf+0x20>
    56aa:	0030      	movs	r0, r6
    56ac:	f000 f9e2 	bl	5a74 <__sinit>
    56b0:	4b49      	ldr	r3, [pc, #292]	; (57d8 <setvbuf+0x148>)
    56b2:	429c      	cmp	r4, r3
    56b4:	d150      	bne.n	5758 <setvbuf+0xc8>
    56b6:	6874      	ldr	r4, [r6, #4]
    56b8:	9b00      	ldr	r3, [sp, #0]
    56ba:	2b02      	cmp	r3, #2
    56bc:	d005      	beq.n	56ca <setvbuf+0x3a>
    56be:	2b01      	cmp	r3, #1
    56c0:	d900      	bls.n	56c4 <setvbuf+0x34>
    56c2:	e084      	b.n	57ce <setvbuf+0x13e>
    56c4:	2d00      	cmp	r5, #0
    56c6:	da00      	bge.n	56ca <setvbuf+0x3a>
    56c8:	e081      	b.n	57ce <setvbuf+0x13e>
    56ca:	0021      	movs	r1, r4
    56cc:	0030      	movs	r0, r6
    56ce:	f000 f963 	bl	5998 <_fflush_r>
    56d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    56d4:	2900      	cmp	r1, #0
    56d6:	d008      	beq.n	56ea <setvbuf+0x5a>
    56d8:	0023      	movs	r3, r4
    56da:	3344      	adds	r3, #68	; 0x44
    56dc:	4299      	cmp	r1, r3
    56de:	d002      	beq.n	56e6 <setvbuf+0x56>
    56e0:	0030      	movs	r0, r6
    56e2:	f7ff fe79 	bl	53d8 <_free_r>
    56e6:	2300      	movs	r3, #0
    56e8:	6363      	str	r3, [r4, #52]	; 0x34
    56ea:	2300      	movs	r3, #0
    56ec:	61a3      	str	r3, [r4, #24]
    56ee:	6063      	str	r3, [r4, #4]
    56f0:	89a3      	ldrh	r3, [r4, #12]
    56f2:	061b      	lsls	r3, r3, #24
    56f4:	d503      	bpl.n	56fe <setvbuf+0x6e>
    56f6:	6921      	ldr	r1, [r4, #16]
    56f8:	0030      	movs	r0, r6
    56fa:	f7ff fe6d 	bl	53d8 <_free_r>
    56fe:	89a3      	ldrh	r3, [r4, #12]
    5700:	4a36      	ldr	r2, [pc, #216]	; (57dc <setvbuf+0x14c>)
    5702:	4013      	ands	r3, r2
    5704:	81a3      	strh	r3, [r4, #12]
    5706:	9b00      	ldr	r3, [sp, #0]
    5708:	2b02      	cmp	r3, #2
    570a:	d05a      	beq.n	57c2 <setvbuf+0x132>
    570c:	ab03      	add	r3, sp, #12
    570e:	aa02      	add	r2, sp, #8
    5710:	0021      	movs	r1, r4
    5712:	0030      	movs	r0, r6
    5714:	f000 fa44 	bl	5ba0 <__swhatbuf_r>
    5718:	89a3      	ldrh	r3, [r4, #12]
    571a:	4318      	orrs	r0, r3
    571c:	81a0      	strh	r0, [r4, #12]
    571e:	2d00      	cmp	r5, #0
    5720:	d124      	bne.n	576c <setvbuf+0xdc>
    5722:	9d02      	ldr	r5, [sp, #8]
    5724:	0028      	movs	r0, r5
    5726:	f7ff fe3b 	bl	53a0 <malloc>
    572a:	9501      	str	r5, [sp, #4]
    572c:	1e07      	subs	r7, r0, #0
    572e:	d142      	bne.n	57b6 <setvbuf+0x126>
    5730:	9b02      	ldr	r3, [sp, #8]
    5732:	9301      	str	r3, [sp, #4]
    5734:	42ab      	cmp	r3, r5
    5736:	d139      	bne.n	57ac <setvbuf+0x11c>
    5738:	2001      	movs	r0, #1
    573a:	4240      	negs	r0, r0
    573c:	2302      	movs	r3, #2
    573e:	89a2      	ldrh	r2, [r4, #12]
    5740:	4313      	orrs	r3, r2
    5742:	81a3      	strh	r3, [r4, #12]
    5744:	2300      	movs	r3, #0
    5746:	60a3      	str	r3, [r4, #8]
    5748:	0023      	movs	r3, r4
    574a:	3347      	adds	r3, #71	; 0x47
    574c:	6023      	str	r3, [r4, #0]
    574e:	6123      	str	r3, [r4, #16]
    5750:	2301      	movs	r3, #1
    5752:	6163      	str	r3, [r4, #20]
    5754:	b005      	add	sp, #20
    5756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5758:	4b21      	ldr	r3, [pc, #132]	; (57e0 <setvbuf+0x150>)
    575a:	429c      	cmp	r4, r3
    575c:	d101      	bne.n	5762 <setvbuf+0xd2>
    575e:	68b4      	ldr	r4, [r6, #8]
    5760:	e7aa      	b.n	56b8 <setvbuf+0x28>
    5762:	4b20      	ldr	r3, [pc, #128]	; (57e4 <setvbuf+0x154>)
    5764:	429c      	cmp	r4, r3
    5766:	d1a7      	bne.n	56b8 <setvbuf+0x28>
    5768:	68f4      	ldr	r4, [r6, #12]
    576a:	e7a5      	b.n	56b8 <setvbuf+0x28>
    576c:	2f00      	cmp	r7, #0
    576e:	d0d9      	beq.n	5724 <setvbuf+0x94>
    5770:	69b3      	ldr	r3, [r6, #24]
    5772:	2b00      	cmp	r3, #0
    5774:	d102      	bne.n	577c <setvbuf+0xec>
    5776:	0030      	movs	r0, r6
    5778:	f000 f97c 	bl	5a74 <__sinit>
    577c:	9b00      	ldr	r3, [sp, #0]
    577e:	2b01      	cmp	r3, #1
    5780:	d103      	bne.n	578a <setvbuf+0xfa>
    5782:	89a3      	ldrh	r3, [r4, #12]
    5784:	9a00      	ldr	r2, [sp, #0]
    5786:	431a      	orrs	r2, r3
    5788:	81a2      	strh	r2, [r4, #12]
    578a:	2008      	movs	r0, #8
    578c:	89a3      	ldrh	r3, [r4, #12]
    578e:	6027      	str	r7, [r4, #0]
    5790:	6127      	str	r7, [r4, #16]
    5792:	6165      	str	r5, [r4, #20]
    5794:	4018      	ands	r0, r3
    5796:	d018      	beq.n	57ca <setvbuf+0x13a>
    5798:	2001      	movs	r0, #1
    579a:	4018      	ands	r0, r3
    579c:	2300      	movs	r3, #0
    579e:	4298      	cmp	r0, r3
    57a0:	d011      	beq.n	57c6 <setvbuf+0x136>
    57a2:	426d      	negs	r5, r5
    57a4:	60a3      	str	r3, [r4, #8]
    57a6:	61a5      	str	r5, [r4, #24]
    57a8:	0018      	movs	r0, r3
    57aa:	e7d3      	b.n	5754 <setvbuf+0xc4>
    57ac:	9801      	ldr	r0, [sp, #4]
    57ae:	f7ff fdf7 	bl	53a0 <malloc>
    57b2:	1e07      	subs	r7, r0, #0
    57b4:	d0c0      	beq.n	5738 <setvbuf+0xa8>
    57b6:	2380      	movs	r3, #128	; 0x80
    57b8:	89a2      	ldrh	r2, [r4, #12]
    57ba:	9d01      	ldr	r5, [sp, #4]
    57bc:	4313      	orrs	r3, r2
    57be:	81a3      	strh	r3, [r4, #12]
    57c0:	e7d6      	b.n	5770 <setvbuf+0xe0>
    57c2:	2000      	movs	r0, #0
    57c4:	e7ba      	b.n	573c <setvbuf+0xac>
    57c6:	60a5      	str	r5, [r4, #8]
    57c8:	e7c4      	b.n	5754 <setvbuf+0xc4>
    57ca:	60a0      	str	r0, [r4, #8]
    57cc:	e7c2      	b.n	5754 <setvbuf+0xc4>
    57ce:	2001      	movs	r0, #1
    57d0:	4240      	negs	r0, r0
    57d2:	e7bf      	b.n	5754 <setvbuf+0xc4>
    57d4:	200001ac 	.word	0x200001ac
    57d8:	00008c88 	.word	0x00008c88
    57dc:	fffff35c 	.word	0xfffff35c
    57e0:	00008ca8 	.word	0x00008ca8
    57e4:	00008c68 	.word	0x00008c68

000057e8 <strcat>:
    57e8:	0002      	movs	r2, r0
    57ea:	b510      	push	{r4, lr}
    57ec:	7813      	ldrb	r3, [r2, #0]
    57ee:	2b00      	cmp	r3, #0
    57f0:	d105      	bne.n	57fe <strcat+0x16>
    57f2:	5ccc      	ldrb	r4, [r1, r3]
    57f4:	54d4      	strb	r4, [r2, r3]
    57f6:	3301      	adds	r3, #1
    57f8:	2c00      	cmp	r4, #0
    57fa:	d1fa      	bne.n	57f2 <strcat+0xa>
    57fc:	bd10      	pop	{r4, pc}
    57fe:	3201      	adds	r2, #1
    5800:	e7f4      	b.n	57ec <strcat+0x4>

00005802 <strlen>:
    5802:	2300      	movs	r3, #0
    5804:	5cc2      	ldrb	r2, [r0, r3]
    5806:	3301      	adds	r3, #1
    5808:	2a00      	cmp	r2, #0
    580a:	d1fb      	bne.n	5804 <strlen+0x2>
    580c:	1e58      	subs	r0, r3, #1
    580e:	4770      	bx	lr

00005810 <__utoa>:
    5810:	b5f0      	push	{r4, r5, r6, r7, lr}
    5812:	0017      	movs	r7, r2
    5814:	b08f      	sub	sp, #60	; 0x3c
    5816:	2225      	movs	r2, #37	; 0x25
    5818:	0006      	movs	r6, r0
    581a:	000d      	movs	r5, r1
    581c:	a804      	add	r0, sp, #16
    581e:	4918      	ldr	r1, [pc, #96]	; (5880 <__utoa+0x70>)
    5820:	f7ff fdc8 	bl	53b4 <memcpy>
    5824:	aa04      	add	r2, sp, #16
    5826:	1ebb      	subs	r3, r7, #2
    5828:	2400      	movs	r4, #0
    582a:	9203      	str	r2, [sp, #12]
    582c:	2b22      	cmp	r3, #34	; 0x22
    582e:	d905      	bls.n	583c <__utoa+0x2c>
    5830:	702c      	strb	r4, [r5, #0]
    5832:	0025      	movs	r5, r4
    5834:	0028      	movs	r0, r5
    5836:	b00f      	add	sp, #60	; 0x3c
    5838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    583a:	9c01      	ldr	r4, [sp, #4]
    583c:	1c63      	adds	r3, r4, #1
    583e:	9301      	str	r3, [sp, #4]
    5840:	18eb      	adds	r3, r5, r3
    5842:	9300      	str	r3, [sp, #0]
    5844:	0030      	movs	r0, r6
    5846:	3b01      	subs	r3, #1
    5848:	0039      	movs	r1, r7
    584a:	9302      	str	r3, [sp, #8]
    584c:	f7ff fc4e 	bl	50ec <__aeabi_uidivmod>
    5850:	9b03      	ldr	r3, [sp, #12]
    5852:	9a02      	ldr	r2, [sp, #8]
    5854:	5c5b      	ldrb	r3, [r3, r1]
    5856:	0030      	movs	r0, r6
    5858:	7013      	strb	r3, [r2, #0]
    585a:	0039      	movs	r1, r7
    585c:	f7ff fbc0 	bl	4fe0 <__udivsi3>
    5860:	1e06      	subs	r6, r0, #0
    5862:	d1ea      	bne.n	583a <__utoa+0x2a>
    5864:	9b00      	ldr	r3, [sp, #0]
    5866:	7018      	strb	r0, [r3, #0]
    5868:	002b      	movs	r3, r5
    586a:	1b5a      	subs	r2, r3, r5
    586c:	4294      	cmp	r4, r2
    586e:	dde1      	ble.n	5834 <__utoa+0x24>
    5870:	781a      	ldrb	r2, [r3, #0]
    5872:	5d29      	ldrb	r1, [r5, r4]
    5874:	7019      	strb	r1, [r3, #0]
    5876:	552a      	strb	r2, [r5, r4]
    5878:	3301      	adds	r3, #1
    587a:	3c01      	subs	r4, #1
    587c:	e7f5      	b.n	586a <__utoa+0x5a>
    587e:	46c0      	nop			; (mov r8, r8)
    5880:	00008c40 	.word	0x00008c40

00005884 <__sflush_r>:
    5884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5886:	898a      	ldrh	r2, [r1, #12]
    5888:	0005      	movs	r5, r0
    588a:	000c      	movs	r4, r1
    588c:	0713      	lsls	r3, r2, #28
    588e:	d460      	bmi.n	5952 <__sflush_r+0xce>
    5890:	684b      	ldr	r3, [r1, #4]
    5892:	2b00      	cmp	r3, #0
    5894:	dc04      	bgt.n	58a0 <__sflush_r+0x1c>
    5896:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5898:	2b00      	cmp	r3, #0
    589a:	dc01      	bgt.n	58a0 <__sflush_r+0x1c>
    589c:	2000      	movs	r0, #0
    589e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    58a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    58a2:	2f00      	cmp	r7, #0
    58a4:	d0fa      	beq.n	589c <__sflush_r+0x18>
    58a6:	2300      	movs	r3, #0
    58a8:	682e      	ldr	r6, [r5, #0]
    58aa:	602b      	str	r3, [r5, #0]
    58ac:	2380      	movs	r3, #128	; 0x80
    58ae:	015b      	lsls	r3, r3, #5
    58b0:	401a      	ands	r2, r3
    58b2:	d034      	beq.n	591e <__sflush_r+0x9a>
    58b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    58b6:	89a3      	ldrh	r3, [r4, #12]
    58b8:	075b      	lsls	r3, r3, #29
    58ba:	d506      	bpl.n	58ca <__sflush_r+0x46>
    58bc:	6863      	ldr	r3, [r4, #4]
    58be:	1ac0      	subs	r0, r0, r3
    58c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58c2:	2b00      	cmp	r3, #0
    58c4:	d001      	beq.n	58ca <__sflush_r+0x46>
    58c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    58c8:	1ac0      	subs	r0, r0, r3
    58ca:	0002      	movs	r2, r0
    58cc:	6a21      	ldr	r1, [r4, #32]
    58ce:	2300      	movs	r3, #0
    58d0:	0028      	movs	r0, r5
    58d2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    58d4:	47b8      	blx	r7
    58d6:	89a1      	ldrh	r1, [r4, #12]
    58d8:	1c43      	adds	r3, r0, #1
    58da:	d106      	bne.n	58ea <__sflush_r+0x66>
    58dc:	682b      	ldr	r3, [r5, #0]
    58de:	2b1d      	cmp	r3, #29
    58e0:	d831      	bhi.n	5946 <__sflush_r+0xc2>
    58e2:	4a2c      	ldr	r2, [pc, #176]	; (5994 <__sflush_r+0x110>)
    58e4:	40da      	lsrs	r2, r3
    58e6:	07d3      	lsls	r3, r2, #31
    58e8:	d52d      	bpl.n	5946 <__sflush_r+0xc2>
    58ea:	2300      	movs	r3, #0
    58ec:	6063      	str	r3, [r4, #4]
    58ee:	6923      	ldr	r3, [r4, #16]
    58f0:	6023      	str	r3, [r4, #0]
    58f2:	04cb      	lsls	r3, r1, #19
    58f4:	d505      	bpl.n	5902 <__sflush_r+0x7e>
    58f6:	1c43      	adds	r3, r0, #1
    58f8:	d102      	bne.n	5900 <__sflush_r+0x7c>
    58fa:	682b      	ldr	r3, [r5, #0]
    58fc:	2b00      	cmp	r3, #0
    58fe:	d100      	bne.n	5902 <__sflush_r+0x7e>
    5900:	6560      	str	r0, [r4, #84]	; 0x54
    5902:	6b61      	ldr	r1, [r4, #52]	; 0x34
    5904:	602e      	str	r6, [r5, #0]
    5906:	2900      	cmp	r1, #0
    5908:	d0c8      	beq.n	589c <__sflush_r+0x18>
    590a:	0023      	movs	r3, r4
    590c:	3344      	adds	r3, #68	; 0x44
    590e:	4299      	cmp	r1, r3
    5910:	d002      	beq.n	5918 <__sflush_r+0x94>
    5912:	0028      	movs	r0, r5
    5914:	f7ff fd60 	bl	53d8 <_free_r>
    5918:	2000      	movs	r0, #0
    591a:	6360      	str	r0, [r4, #52]	; 0x34
    591c:	e7bf      	b.n	589e <__sflush_r+0x1a>
    591e:	2301      	movs	r3, #1
    5920:	6a21      	ldr	r1, [r4, #32]
    5922:	0028      	movs	r0, r5
    5924:	47b8      	blx	r7
    5926:	1c43      	adds	r3, r0, #1
    5928:	d1c5      	bne.n	58b6 <__sflush_r+0x32>
    592a:	682b      	ldr	r3, [r5, #0]
    592c:	2b00      	cmp	r3, #0
    592e:	d0c2      	beq.n	58b6 <__sflush_r+0x32>
    5930:	2b1d      	cmp	r3, #29
    5932:	d001      	beq.n	5938 <__sflush_r+0xb4>
    5934:	2b16      	cmp	r3, #22
    5936:	d101      	bne.n	593c <__sflush_r+0xb8>
    5938:	602e      	str	r6, [r5, #0]
    593a:	e7af      	b.n	589c <__sflush_r+0x18>
    593c:	2340      	movs	r3, #64	; 0x40
    593e:	89a2      	ldrh	r2, [r4, #12]
    5940:	4313      	orrs	r3, r2
    5942:	81a3      	strh	r3, [r4, #12]
    5944:	e7ab      	b.n	589e <__sflush_r+0x1a>
    5946:	2340      	movs	r3, #64	; 0x40
    5948:	430b      	orrs	r3, r1
    594a:	2001      	movs	r0, #1
    594c:	81a3      	strh	r3, [r4, #12]
    594e:	4240      	negs	r0, r0
    5950:	e7a5      	b.n	589e <__sflush_r+0x1a>
    5952:	690f      	ldr	r7, [r1, #16]
    5954:	2f00      	cmp	r7, #0
    5956:	d0a1      	beq.n	589c <__sflush_r+0x18>
    5958:	680b      	ldr	r3, [r1, #0]
    595a:	600f      	str	r7, [r1, #0]
    595c:	1bdb      	subs	r3, r3, r7
    595e:	9301      	str	r3, [sp, #4]
    5960:	2300      	movs	r3, #0
    5962:	0792      	lsls	r2, r2, #30
    5964:	d100      	bne.n	5968 <__sflush_r+0xe4>
    5966:	694b      	ldr	r3, [r1, #20]
    5968:	60a3      	str	r3, [r4, #8]
    596a:	9b01      	ldr	r3, [sp, #4]
    596c:	2b00      	cmp	r3, #0
    596e:	dc00      	bgt.n	5972 <__sflush_r+0xee>
    5970:	e794      	b.n	589c <__sflush_r+0x18>
    5972:	9b01      	ldr	r3, [sp, #4]
    5974:	003a      	movs	r2, r7
    5976:	6a21      	ldr	r1, [r4, #32]
    5978:	0028      	movs	r0, r5
    597a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    597c:	47b0      	blx	r6
    597e:	2800      	cmp	r0, #0
    5980:	dc03      	bgt.n	598a <__sflush_r+0x106>
    5982:	2340      	movs	r3, #64	; 0x40
    5984:	89a2      	ldrh	r2, [r4, #12]
    5986:	4313      	orrs	r3, r2
    5988:	e7df      	b.n	594a <__sflush_r+0xc6>
    598a:	9b01      	ldr	r3, [sp, #4]
    598c:	183f      	adds	r7, r7, r0
    598e:	1a1b      	subs	r3, r3, r0
    5990:	9301      	str	r3, [sp, #4]
    5992:	e7ea      	b.n	596a <__sflush_r+0xe6>
    5994:	20400001 	.word	0x20400001

00005998 <_fflush_r>:
    5998:	690b      	ldr	r3, [r1, #16]
    599a:	b570      	push	{r4, r5, r6, lr}
    599c:	0005      	movs	r5, r0
    599e:	000c      	movs	r4, r1
    59a0:	2b00      	cmp	r3, #0
    59a2:	d101      	bne.n	59a8 <_fflush_r+0x10>
    59a4:	2000      	movs	r0, #0
    59a6:	bd70      	pop	{r4, r5, r6, pc}
    59a8:	2800      	cmp	r0, #0
    59aa:	d004      	beq.n	59b6 <_fflush_r+0x1e>
    59ac:	6983      	ldr	r3, [r0, #24]
    59ae:	2b00      	cmp	r3, #0
    59b0:	d101      	bne.n	59b6 <_fflush_r+0x1e>
    59b2:	f000 f85f 	bl	5a74 <__sinit>
    59b6:	4b0b      	ldr	r3, [pc, #44]	; (59e4 <_fflush_r+0x4c>)
    59b8:	429c      	cmp	r4, r3
    59ba:	d109      	bne.n	59d0 <_fflush_r+0x38>
    59bc:	686c      	ldr	r4, [r5, #4]
    59be:	220c      	movs	r2, #12
    59c0:	5ea3      	ldrsh	r3, [r4, r2]
    59c2:	2b00      	cmp	r3, #0
    59c4:	d0ee      	beq.n	59a4 <_fflush_r+0xc>
    59c6:	0021      	movs	r1, r4
    59c8:	0028      	movs	r0, r5
    59ca:	f7ff ff5b 	bl	5884 <__sflush_r>
    59ce:	e7ea      	b.n	59a6 <_fflush_r+0xe>
    59d0:	4b05      	ldr	r3, [pc, #20]	; (59e8 <_fflush_r+0x50>)
    59d2:	429c      	cmp	r4, r3
    59d4:	d101      	bne.n	59da <_fflush_r+0x42>
    59d6:	68ac      	ldr	r4, [r5, #8]
    59d8:	e7f1      	b.n	59be <_fflush_r+0x26>
    59da:	4b04      	ldr	r3, [pc, #16]	; (59ec <_fflush_r+0x54>)
    59dc:	429c      	cmp	r4, r3
    59de:	d1ee      	bne.n	59be <_fflush_r+0x26>
    59e0:	68ec      	ldr	r4, [r5, #12]
    59e2:	e7ec      	b.n	59be <_fflush_r+0x26>
    59e4:	00008c88 	.word	0x00008c88
    59e8:	00008ca8 	.word	0x00008ca8
    59ec:	00008c68 	.word	0x00008c68

000059f0 <_cleanup_r>:
    59f0:	b510      	push	{r4, lr}
    59f2:	4902      	ldr	r1, [pc, #8]	; (59fc <_cleanup_r+0xc>)
    59f4:	f000 f8b2 	bl	5b5c <_fwalk_reent>
    59f8:	bd10      	pop	{r4, pc}
    59fa:	46c0      	nop			; (mov r8, r8)
    59fc:	00005999 	.word	0x00005999

00005a00 <std.isra.0>:
    5a00:	2300      	movs	r3, #0
    5a02:	b510      	push	{r4, lr}
    5a04:	0004      	movs	r4, r0
    5a06:	6003      	str	r3, [r0, #0]
    5a08:	6043      	str	r3, [r0, #4]
    5a0a:	6083      	str	r3, [r0, #8]
    5a0c:	8181      	strh	r1, [r0, #12]
    5a0e:	6643      	str	r3, [r0, #100]	; 0x64
    5a10:	81c2      	strh	r2, [r0, #14]
    5a12:	6103      	str	r3, [r0, #16]
    5a14:	6143      	str	r3, [r0, #20]
    5a16:	6183      	str	r3, [r0, #24]
    5a18:	0019      	movs	r1, r3
    5a1a:	2208      	movs	r2, #8
    5a1c:	305c      	adds	r0, #92	; 0x5c
    5a1e:	f7ff fcd2 	bl	53c6 <memset>
    5a22:	4b05      	ldr	r3, [pc, #20]	; (5a38 <std.isra.0+0x38>)
    5a24:	6224      	str	r4, [r4, #32]
    5a26:	6263      	str	r3, [r4, #36]	; 0x24
    5a28:	4b04      	ldr	r3, [pc, #16]	; (5a3c <std.isra.0+0x3c>)
    5a2a:	62a3      	str	r3, [r4, #40]	; 0x28
    5a2c:	4b04      	ldr	r3, [pc, #16]	; (5a40 <std.isra.0+0x40>)
    5a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
    5a30:	4b04      	ldr	r3, [pc, #16]	; (5a44 <std.isra.0+0x44>)
    5a32:	6323      	str	r3, [r4, #48]	; 0x30
    5a34:	bd10      	pop	{r4, pc}
    5a36:	46c0      	nop			; (mov r8, r8)
    5a38:	00006281 	.word	0x00006281
    5a3c:	000062a9 	.word	0x000062a9
    5a40:	000062e1 	.word	0x000062e1
    5a44:	0000630d 	.word	0x0000630d

00005a48 <__sfmoreglue>:
    5a48:	b570      	push	{r4, r5, r6, lr}
    5a4a:	2568      	movs	r5, #104	; 0x68
    5a4c:	1e4a      	subs	r2, r1, #1
    5a4e:	4355      	muls	r5, r2
    5a50:	000e      	movs	r6, r1
    5a52:	0029      	movs	r1, r5
    5a54:	3174      	adds	r1, #116	; 0x74
    5a56:	f7ff fd09 	bl	546c <_malloc_r>
    5a5a:	1e04      	subs	r4, r0, #0
    5a5c:	d008      	beq.n	5a70 <__sfmoreglue+0x28>
    5a5e:	2100      	movs	r1, #0
    5a60:	002a      	movs	r2, r5
    5a62:	6001      	str	r1, [r0, #0]
    5a64:	6046      	str	r6, [r0, #4]
    5a66:	300c      	adds	r0, #12
    5a68:	60a0      	str	r0, [r4, #8]
    5a6a:	3268      	adds	r2, #104	; 0x68
    5a6c:	f7ff fcab 	bl	53c6 <memset>
    5a70:	0020      	movs	r0, r4
    5a72:	bd70      	pop	{r4, r5, r6, pc}

00005a74 <__sinit>:
    5a74:	6983      	ldr	r3, [r0, #24]
    5a76:	b513      	push	{r0, r1, r4, lr}
    5a78:	0004      	movs	r4, r0
    5a7a:	2b00      	cmp	r3, #0
    5a7c:	d128      	bne.n	5ad0 <__sinit+0x5c>
    5a7e:	6483      	str	r3, [r0, #72]	; 0x48
    5a80:	64c3      	str	r3, [r0, #76]	; 0x4c
    5a82:	6503      	str	r3, [r0, #80]	; 0x50
    5a84:	4b13      	ldr	r3, [pc, #76]	; (5ad4 <__sinit+0x60>)
    5a86:	4a14      	ldr	r2, [pc, #80]	; (5ad8 <__sinit+0x64>)
    5a88:	681b      	ldr	r3, [r3, #0]
    5a8a:	6282      	str	r2, [r0, #40]	; 0x28
    5a8c:	9301      	str	r3, [sp, #4]
    5a8e:	4298      	cmp	r0, r3
    5a90:	d101      	bne.n	5a96 <__sinit+0x22>
    5a92:	2301      	movs	r3, #1
    5a94:	6183      	str	r3, [r0, #24]
    5a96:	0020      	movs	r0, r4
    5a98:	f000 f820 	bl	5adc <__sfp>
    5a9c:	6060      	str	r0, [r4, #4]
    5a9e:	0020      	movs	r0, r4
    5aa0:	f000 f81c 	bl	5adc <__sfp>
    5aa4:	60a0      	str	r0, [r4, #8]
    5aa6:	0020      	movs	r0, r4
    5aa8:	f000 f818 	bl	5adc <__sfp>
    5aac:	2200      	movs	r2, #0
    5aae:	60e0      	str	r0, [r4, #12]
    5ab0:	2104      	movs	r1, #4
    5ab2:	6860      	ldr	r0, [r4, #4]
    5ab4:	f7ff ffa4 	bl	5a00 <std.isra.0>
    5ab8:	2201      	movs	r2, #1
    5aba:	2109      	movs	r1, #9
    5abc:	68a0      	ldr	r0, [r4, #8]
    5abe:	f7ff ff9f 	bl	5a00 <std.isra.0>
    5ac2:	2202      	movs	r2, #2
    5ac4:	2112      	movs	r1, #18
    5ac6:	68e0      	ldr	r0, [r4, #12]
    5ac8:	f7ff ff9a 	bl	5a00 <std.isra.0>
    5acc:	2301      	movs	r3, #1
    5ace:	61a3      	str	r3, [r4, #24]
    5ad0:	bd13      	pop	{r0, r1, r4, pc}
    5ad2:	46c0      	nop			; (mov r8, r8)
    5ad4:	00008c3c 	.word	0x00008c3c
    5ad8:	000059f1 	.word	0x000059f1

00005adc <__sfp>:
    5adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ade:	4b1e      	ldr	r3, [pc, #120]	; (5b58 <__sfp+0x7c>)
    5ae0:	0007      	movs	r7, r0
    5ae2:	681e      	ldr	r6, [r3, #0]
    5ae4:	69b3      	ldr	r3, [r6, #24]
    5ae6:	2b00      	cmp	r3, #0
    5ae8:	d102      	bne.n	5af0 <__sfp+0x14>
    5aea:	0030      	movs	r0, r6
    5aec:	f7ff ffc2 	bl	5a74 <__sinit>
    5af0:	3648      	adds	r6, #72	; 0x48
    5af2:	68b4      	ldr	r4, [r6, #8]
    5af4:	6873      	ldr	r3, [r6, #4]
    5af6:	3b01      	subs	r3, #1
    5af8:	d504      	bpl.n	5b04 <__sfp+0x28>
    5afa:	6833      	ldr	r3, [r6, #0]
    5afc:	2b00      	cmp	r3, #0
    5afe:	d007      	beq.n	5b10 <__sfp+0x34>
    5b00:	6836      	ldr	r6, [r6, #0]
    5b02:	e7f6      	b.n	5af2 <__sfp+0x16>
    5b04:	220c      	movs	r2, #12
    5b06:	5ea5      	ldrsh	r5, [r4, r2]
    5b08:	2d00      	cmp	r5, #0
    5b0a:	d00d      	beq.n	5b28 <__sfp+0x4c>
    5b0c:	3468      	adds	r4, #104	; 0x68
    5b0e:	e7f2      	b.n	5af6 <__sfp+0x1a>
    5b10:	2104      	movs	r1, #4
    5b12:	0038      	movs	r0, r7
    5b14:	f7ff ff98 	bl	5a48 <__sfmoreglue>
    5b18:	6030      	str	r0, [r6, #0]
    5b1a:	2800      	cmp	r0, #0
    5b1c:	d1f0      	bne.n	5b00 <__sfp+0x24>
    5b1e:	230c      	movs	r3, #12
    5b20:	0004      	movs	r4, r0
    5b22:	603b      	str	r3, [r7, #0]
    5b24:	0020      	movs	r0, r4
    5b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5b28:	2301      	movs	r3, #1
    5b2a:	0020      	movs	r0, r4
    5b2c:	425b      	negs	r3, r3
    5b2e:	81e3      	strh	r3, [r4, #14]
    5b30:	3302      	adds	r3, #2
    5b32:	81a3      	strh	r3, [r4, #12]
    5b34:	6665      	str	r5, [r4, #100]	; 0x64
    5b36:	6025      	str	r5, [r4, #0]
    5b38:	60a5      	str	r5, [r4, #8]
    5b3a:	6065      	str	r5, [r4, #4]
    5b3c:	6125      	str	r5, [r4, #16]
    5b3e:	6165      	str	r5, [r4, #20]
    5b40:	61a5      	str	r5, [r4, #24]
    5b42:	2208      	movs	r2, #8
    5b44:	0029      	movs	r1, r5
    5b46:	305c      	adds	r0, #92	; 0x5c
    5b48:	f7ff fc3d 	bl	53c6 <memset>
    5b4c:	6365      	str	r5, [r4, #52]	; 0x34
    5b4e:	63a5      	str	r5, [r4, #56]	; 0x38
    5b50:	64a5      	str	r5, [r4, #72]	; 0x48
    5b52:	64e5      	str	r5, [r4, #76]	; 0x4c
    5b54:	e7e6      	b.n	5b24 <__sfp+0x48>
    5b56:	46c0      	nop			; (mov r8, r8)
    5b58:	00008c3c 	.word	0x00008c3c

00005b5c <_fwalk_reent>:
    5b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5b5e:	0004      	movs	r4, r0
    5b60:	0007      	movs	r7, r0
    5b62:	2600      	movs	r6, #0
    5b64:	9101      	str	r1, [sp, #4]
    5b66:	3448      	adds	r4, #72	; 0x48
    5b68:	2c00      	cmp	r4, #0
    5b6a:	d101      	bne.n	5b70 <_fwalk_reent+0x14>
    5b6c:	0030      	movs	r0, r6
    5b6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5b70:	6863      	ldr	r3, [r4, #4]
    5b72:	68a5      	ldr	r5, [r4, #8]
    5b74:	9300      	str	r3, [sp, #0]
    5b76:	9b00      	ldr	r3, [sp, #0]
    5b78:	3b01      	subs	r3, #1
    5b7a:	9300      	str	r3, [sp, #0]
    5b7c:	d501      	bpl.n	5b82 <_fwalk_reent+0x26>
    5b7e:	6824      	ldr	r4, [r4, #0]
    5b80:	e7f2      	b.n	5b68 <_fwalk_reent+0xc>
    5b82:	89ab      	ldrh	r3, [r5, #12]
    5b84:	2b01      	cmp	r3, #1
    5b86:	d908      	bls.n	5b9a <_fwalk_reent+0x3e>
    5b88:	220e      	movs	r2, #14
    5b8a:	5eab      	ldrsh	r3, [r5, r2]
    5b8c:	3301      	adds	r3, #1
    5b8e:	d004      	beq.n	5b9a <_fwalk_reent+0x3e>
    5b90:	0029      	movs	r1, r5
    5b92:	0038      	movs	r0, r7
    5b94:	9b01      	ldr	r3, [sp, #4]
    5b96:	4798      	blx	r3
    5b98:	4306      	orrs	r6, r0
    5b9a:	3568      	adds	r5, #104	; 0x68
    5b9c:	e7eb      	b.n	5b76 <_fwalk_reent+0x1a>
	...

00005ba0 <__swhatbuf_r>:
    5ba0:	b570      	push	{r4, r5, r6, lr}
    5ba2:	000e      	movs	r6, r1
    5ba4:	001d      	movs	r5, r3
    5ba6:	230e      	movs	r3, #14
    5ba8:	5ec9      	ldrsh	r1, [r1, r3]
    5baa:	b090      	sub	sp, #64	; 0x40
    5bac:	0014      	movs	r4, r2
    5bae:	2900      	cmp	r1, #0
    5bb0:	da07      	bge.n	5bc2 <__swhatbuf_r+0x22>
    5bb2:	2300      	movs	r3, #0
    5bb4:	602b      	str	r3, [r5, #0]
    5bb6:	89b3      	ldrh	r3, [r6, #12]
    5bb8:	061b      	lsls	r3, r3, #24
    5bba:	d411      	bmi.n	5be0 <__swhatbuf_r+0x40>
    5bbc:	2380      	movs	r3, #128	; 0x80
    5bbe:	00db      	lsls	r3, r3, #3
    5bc0:	e00f      	b.n	5be2 <__swhatbuf_r+0x42>
    5bc2:	aa01      	add	r2, sp, #4
    5bc4:	f000 fc9a 	bl	64fc <_fstat_r>
    5bc8:	2800      	cmp	r0, #0
    5bca:	dbf2      	blt.n	5bb2 <__swhatbuf_r+0x12>
    5bcc:	22f0      	movs	r2, #240	; 0xf0
    5bce:	9b02      	ldr	r3, [sp, #8]
    5bd0:	0212      	lsls	r2, r2, #8
    5bd2:	4013      	ands	r3, r2
    5bd4:	4a05      	ldr	r2, [pc, #20]	; (5bec <__swhatbuf_r+0x4c>)
    5bd6:	189b      	adds	r3, r3, r2
    5bd8:	425a      	negs	r2, r3
    5bda:	4153      	adcs	r3, r2
    5bdc:	602b      	str	r3, [r5, #0]
    5bde:	e7ed      	b.n	5bbc <__swhatbuf_r+0x1c>
    5be0:	2340      	movs	r3, #64	; 0x40
    5be2:	2000      	movs	r0, #0
    5be4:	6023      	str	r3, [r4, #0]
    5be6:	b010      	add	sp, #64	; 0x40
    5be8:	bd70      	pop	{r4, r5, r6, pc}
    5bea:	46c0      	nop			; (mov r8, r8)
    5bec:	ffffe000 	.word	0xffffe000

00005bf0 <__smakebuf_r>:
    5bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5bf2:	2602      	movs	r6, #2
    5bf4:	898b      	ldrh	r3, [r1, #12]
    5bf6:	0005      	movs	r5, r0
    5bf8:	000c      	movs	r4, r1
    5bfa:	4233      	tst	r3, r6
    5bfc:	d006      	beq.n	5c0c <__smakebuf_r+0x1c>
    5bfe:	0023      	movs	r3, r4
    5c00:	3347      	adds	r3, #71	; 0x47
    5c02:	6023      	str	r3, [r4, #0]
    5c04:	6123      	str	r3, [r4, #16]
    5c06:	2301      	movs	r3, #1
    5c08:	6163      	str	r3, [r4, #20]
    5c0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    5c0c:	ab01      	add	r3, sp, #4
    5c0e:	466a      	mov	r2, sp
    5c10:	f7ff ffc6 	bl	5ba0 <__swhatbuf_r>
    5c14:	9900      	ldr	r1, [sp, #0]
    5c16:	0007      	movs	r7, r0
    5c18:	0028      	movs	r0, r5
    5c1a:	f7ff fc27 	bl	546c <_malloc_r>
    5c1e:	2800      	cmp	r0, #0
    5c20:	d108      	bne.n	5c34 <__smakebuf_r+0x44>
    5c22:	220c      	movs	r2, #12
    5c24:	5ea3      	ldrsh	r3, [r4, r2]
    5c26:	059a      	lsls	r2, r3, #22
    5c28:	d4ef      	bmi.n	5c0a <__smakebuf_r+0x1a>
    5c2a:	2203      	movs	r2, #3
    5c2c:	4393      	bics	r3, r2
    5c2e:	431e      	orrs	r6, r3
    5c30:	81a6      	strh	r6, [r4, #12]
    5c32:	e7e4      	b.n	5bfe <__smakebuf_r+0xe>
    5c34:	4b0f      	ldr	r3, [pc, #60]	; (5c74 <__smakebuf_r+0x84>)
    5c36:	62ab      	str	r3, [r5, #40]	; 0x28
    5c38:	2380      	movs	r3, #128	; 0x80
    5c3a:	89a2      	ldrh	r2, [r4, #12]
    5c3c:	6020      	str	r0, [r4, #0]
    5c3e:	4313      	orrs	r3, r2
    5c40:	81a3      	strh	r3, [r4, #12]
    5c42:	9b00      	ldr	r3, [sp, #0]
    5c44:	6120      	str	r0, [r4, #16]
    5c46:	6163      	str	r3, [r4, #20]
    5c48:	9b01      	ldr	r3, [sp, #4]
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	d00d      	beq.n	5c6a <__smakebuf_r+0x7a>
    5c4e:	230e      	movs	r3, #14
    5c50:	5ee1      	ldrsh	r1, [r4, r3]
    5c52:	0028      	movs	r0, r5
    5c54:	f000 fc64 	bl	6520 <_isatty_r>
    5c58:	2800      	cmp	r0, #0
    5c5a:	d006      	beq.n	5c6a <__smakebuf_r+0x7a>
    5c5c:	2203      	movs	r2, #3
    5c5e:	89a3      	ldrh	r3, [r4, #12]
    5c60:	4393      	bics	r3, r2
    5c62:	001a      	movs	r2, r3
    5c64:	2301      	movs	r3, #1
    5c66:	4313      	orrs	r3, r2
    5c68:	81a3      	strh	r3, [r4, #12]
    5c6a:	89a0      	ldrh	r0, [r4, #12]
    5c6c:	4338      	orrs	r0, r7
    5c6e:	81a0      	strh	r0, [r4, #12]
    5c70:	e7cb      	b.n	5c0a <__smakebuf_r+0x1a>
    5c72:	46c0      	nop			; (mov r8, r8)
    5c74:	000059f1 	.word	0x000059f1

00005c78 <__malloc_lock>:
    5c78:	4770      	bx	lr

00005c7a <__malloc_unlock>:
    5c7a:	4770      	bx	lr

00005c7c <__sfputc_r>:
    5c7c:	6893      	ldr	r3, [r2, #8]
    5c7e:	b510      	push	{r4, lr}
    5c80:	3b01      	subs	r3, #1
    5c82:	6093      	str	r3, [r2, #8]
    5c84:	2b00      	cmp	r3, #0
    5c86:	da05      	bge.n	5c94 <__sfputc_r+0x18>
    5c88:	6994      	ldr	r4, [r2, #24]
    5c8a:	42a3      	cmp	r3, r4
    5c8c:	db08      	blt.n	5ca0 <__sfputc_r+0x24>
    5c8e:	b2cb      	uxtb	r3, r1
    5c90:	2b0a      	cmp	r3, #10
    5c92:	d005      	beq.n	5ca0 <__sfputc_r+0x24>
    5c94:	6813      	ldr	r3, [r2, #0]
    5c96:	1c58      	adds	r0, r3, #1
    5c98:	6010      	str	r0, [r2, #0]
    5c9a:	7019      	strb	r1, [r3, #0]
    5c9c:	b2c8      	uxtb	r0, r1
    5c9e:	bd10      	pop	{r4, pc}
    5ca0:	f000 fb3a 	bl	6318 <__swbuf_r>
    5ca4:	e7fb      	b.n	5c9e <__sfputc_r+0x22>

00005ca6 <__sfputs_r>:
    5ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ca8:	0006      	movs	r6, r0
    5caa:	000f      	movs	r7, r1
    5cac:	0014      	movs	r4, r2
    5cae:	18d5      	adds	r5, r2, r3
    5cb0:	42ac      	cmp	r4, r5
    5cb2:	d101      	bne.n	5cb8 <__sfputs_r+0x12>
    5cb4:	2000      	movs	r0, #0
    5cb6:	e007      	b.n	5cc8 <__sfputs_r+0x22>
    5cb8:	7821      	ldrb	r1, [r4, #0]
    5cba:	003a      	movs	r2, r7
    5cbc:	0030      	movs	r0, r6
    5cbe:	f7ff ffdd 	bl	5c7c <__sfputc_r>
    5cc2:	3401      	adds	r4, #1
    5cc4:	1c43      	adds	r3, r0, #1
    5cc6:	d1f3      	bne.n	5cb0 <__sfputs_r+0xa>
    5cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00005ccc <_vfiprintf_r>:
    5ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cce:	b09f      	sub	sp, #124	; 0x7c
    5cd0:	0006      	movs	r6, r0
    5cd2:	000f      	movs	r7, r1
    5cd4:	0014      	movs	r4, r2
    5cd6:	9305      	str	r3, [sp, #20]
    5cd8:	2800      	cmp	r0, #0
    5cda:	d004      	beq.n	5ce6 <_vfiprintf_r+0x1a>
    5cdc:	6983      	ldr	r3, [r0, #24]
    5cde:	2b00      	cmp	r3, #0
    5ce0:	d101      	bne.n	5ce6 <_vfiprintf_r+0x1a>
    5ce2:	f7ff fec7 	bl	5a74 <__sinit>
    5ce6:	4b7f      	ldr	r3, [pc, #508]	; (5ee4 <_vfiprintf_r+0x218>)
    5ce8:	429f      	cmp	r7, r3
    5cea:	d15c      	bne.n	5da6 <_vfiprintf_r+0xda>
    5cec:	6877      	ldr	r7, [r6, #4]
    5cee:	89bb      	ldrh	r3, [r7, #12]
    5cf0:	071b      	lsls	r3, r3, #28
    5cf2:	d562      	bpl.n	5dba <_vfiprintf_r+0xee>
    5cf4:	693b      	ldr	r3, [r7, #16]
    5cf6:	2b00      	cmp	r3, #0
    5cf8:	d05f      	beq.n	5dba <_vfiprintf_r+0xee>
    5cfa:	2300      	movs	r3, #0
    5cfc:	ad06      	add	r5, sp, #24
    5cfe:	616b      	str	r3, [r5, #20]
    5d00:	3320      	adds	r3, #32
    5d02:	766b      	strb	r3, [r5, #25]
    5d04:	3310      	adds	r3, #16
    5d06:	76ab      	strb	r3, [r5, #26]
    5d08:	9402      	str	r4, [sp, #8]
    5d0a:	9c02      	ldr	r4, [sp, #8]
    5d0c:	7823      	ldrb	r3, [r4, #0]
    5d0e:	2b00      	cmp	r3, #0
    5d10:	d15d      	bne.n	5dce <_vfiprintf_r+0x102>
    5d12:	9b02      	ldr	r3, [sp, #8]
    5d14:	1ae3      	subs	r3, r4, r3
    5d16:	9304      	str	r3, [sp, #16]
    5d18:	d00d      	beq.n	5d36 <_vfiprintf_r+0x6a>
    5d1a:	9b04      	ldr	r3, [sp, #16]
    5d1c:	9a02      	ldr	r2, [sp, #8]
    5d1e:	0039      	movs	r1, r7
    5d20:	0030      	movs	r0, r6
    5d22:	f7ff ffc0 	bl	5ca6 <__sfputs_r>
    5d26:	1c43      	adds	r3, r0, #1
    5d28:	d100      	bne.n	5d2c <_vfiprintf_r+0x60>
    5d2a:	e0cc      	b.n	5ec6 <_vfiprintf_r+0x1fa>
    5d2c:	696a      	ldr	r2, [r5, #20]
    5d2e:	9b04      	ldr	r3, [sp, #16]
    5d30:	4694      	mov	ip, r2
    5d32:	4463      	add	r3, ip
    5d34:	616b      	str	r3, [r5, #20]
    5d36:	7823      	ldrb	r3, [r4, #0]
    5d38:	2b00      	cmp	r3, #0
    5d3a:	d100      	bne.n	5d3e <_vfiprintf_r+0x72>
    5d3c:	e0c3      	b.n	5ec6 <_vfiprintf_r+0x1fa>
    5d3e:	2201      	movs	r2, #1
    5d40:	2300      	movs	r3, #0
    5d42:	4252      	negs	r2, r2
    5d44:	606a      	str	r2, [r5, #4]
    5d46:	a902      	add	r1, sp, #8
    5d48:	3254      	adds	r2, #84	; 0x54
    5d4a:	1852      	adds	r2, r2, r1
    5d4c:	3401      	adds	r4, #1
    5d4e:	602b      	str	r3, [r5, #0]
    5d50:	60eb      	str	r3, [r5, #12]
    5d52:	60ab      	str	r3, [r5, #8]
    5d54:	7013      	strb	r3, [r2, #0]
    5d56:	65ab      	str	r3, [r5, #88]	; 0x58
    5d58:	7821      	ldrb	r1, [r4, #0]
    5d5a:	2205      	movs	r2, #5
    5d5c:	4862      	ldr	r0, [pc, #392]	; (5ee8 <_vfiprintf_r+0x21c>)
    5d5e:	f000 fc05 	bl	656c <memchr>
    5d62:	1c63      	adds	r3, r4, #1
    5d64:	469c      	mov	ip, r3
    5d66:	2800      	cmp	r0, #0
    5d68:	d135      	bne.n	5dd6 <_vfiprintf_r+0x10a>
    5d6a:	6829      	ldr	r1, [r5, #0]
    5d6c:	06cb      	lsls	r3, r1, #27
    5d6e:	d504      	bpl.n	5d7a <_vfiprintf_r+0xae>
    5d70:	2353      	movs	r3, #83	; 0x53
    5d72:	aa02      	add	r2, sp, #8
    5d74:	3020      	adds	r0, #32
    5d76:	189b      	adds	r3, r3, r2
    5d78:	7018      	strb	r0, [r3, #0]
    5d7a:	070b      	lsls	r3, r1, #28
    5d7c:	d504      	bpl.n	5d88 <_vfiprintf_r+0xbc>
    5d7e:	2353      	movs	r3, #83	; 0x53
    5d80:	202b      	movs	r0, #43	; 0x2b
    5d82:	aa02      	add	r2, sp, #8
    5d84:	189b      	adds	r3, r3, r2
    5d86:	7018      	strb	r0, [r3, #0]
    5d88:	7823      	ldrb	r3, [r4, #0]
    5d8a:	2b2a      	cmp	r3, #42	; 0x2a
    5d8c:	d02c      	beq.n	5de8 <_vfiprintf_r+0x11c>
    5d8e:	2000      	movs	r0, #0
    5d90:	210a      	movs	r1, #10
    5d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d94:	7822      	ldrb	r2, [r4, #0]
    5d96:	3a30      	subs	r2, #48	; 0x30
    5d98:	2a09      	cmp	r2, #9
    5d9a:	d800      	bhi.n	5d9e <_vfiprintf_r+0xd2>
    5d9c:	e06b      	b.n	5e76 <_vfiprintf_r+0x1aa>
    5d9e:	2800      	cmp	r0, #0
    5da0:	d02a      	beq.n	5df8 <_vfiprintf_r+0x12c>
    5da2:	9309      	str	r3, [sp, #36]	; 0x24
    5da4:	e028      	b.n	5df8 <_vfiprintf_r+0x12c>
    5da6:	4b51      	ldr	r3, [pc, #324]	; (5eec <_vfiprintf_r+0x220>)
    5da8:	429f      	cmp	r7, r3
    5daa:	d101      	bne.n	5db0 <_vfiprintf_r+0xe4>
    5dac:	68b7      	ldr	r7, [r6, #8]
    5dae:	e79e      	b.n	5cee <_vfiprintf_r+0x22>
    5db0:	4b4f      	ldr	r3, [pc, #316]	; (5ef0 <_vfiprintf_r+0x224>)
    5db2:	429f      	cmp	r7, r3
    5db4:	d19b      	bne.n	5cee <_vfiprintf_r+0x22>
    5db6:	68f7      	ldr	r7, [r6, #12]
    5db8:	e799      	b.n	5cee <_vfiprintf_r+0x22>
    5dba:	0039      	movs	r1, r7
    5dbc:	0030      	movs	r0, r6
    5dbe:	f000 fb15 	bl	63ec <__swsetup_r>
    5dc2:	2800      	cmp	r0, #0
    5dc4:	d099      	beq.n	5cfa <_vfiprintf_r+0x2e>
    5dc6:	2001      	movs	r0, #1
    5dc8:	4240      	negs	r0, r0
    5dca:	b01f      	add	sp, #124	; 0x7c
    5dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5dce:	2b25      	cmp	r3, #37	; 0x25
    5dd0:	d09f      	beq.n	5d12 <_vfiprintf_r+0x46>
    5dd2:	3401      	adds	r4, #1
    5dd4:	e79a      	b.n	5d0c <_vfiprintf_r+0x40>
    5dd6:	4b44      	ldr	r3, [pc, #272]	; (5ee8 <_vfiprintf_r+0x21c>)
    5dd8:	6829      	ldr	r1, [r5, #0]
    5dda:	1ac0      	subs	r0, r0, r3
    5ddc:	2301      	movs	r3, #1
    5dde:	4083      	lsls	r3, r0
    5de0:	430b      	orrs	r3, r1
    5de2:	602b      	str	r3, [r5, #0]
    5de4:	4664      	mov	r4, ip
    5de6:	e7b7      	b.n	5d58 <_vfiprintf_r+0x8c>
    5de8:	9b05      	ldr	r3, [sp, #20]
    5dea:	1d18      	adds	r0, r3, #4
    5dec:	681b      	ldr	r3, [r3, #0]
    5dee:	9005      	str	r0, [sp, #20]
    5df0:	2b00      	cmp	r3, #0
    5df2:	db3a      	blt.n	5e6a <_vfiprintf_r+0x19e>
    5df4:	9309      	str	r3, [sp, #36]	; 0x24
    5df6:	4664      	mov	r4, ip
    5df8:	7823      	ldrb	r3, [r4, #0]
    5dfa:	2b2e      	cmp	r3, #46	; 0x2e
    5dfc:	d10b      	bne.n	5e16 <_vfiprintf_r+0x14a>
    5dfe:	7863      	ldrb	r3, [r4, #1]
    5e00:	1c62      	adds	r2, r4, #1
    5e02:	2b2a      	cmp	r3, #42	; 0x2a
    5e04:	d13f      	bne.n	5e86 <_vfiprintf_r+0x1ba>
    5e06:	9b05      	ldr	r3, [sp, #20]
    5e08:	3402      	adds	r4, #2
    5e0a:	1d1a      	adds	r2, r3, #4
    5e0c:	681b      	ldr	r3, [r3, #0]
    5e0e:	9205      	str	r2, [sp, #20]
    5e10:	2b00      	cmp	r3, #0
    5e12:	db35      	blt.n	5e80 <_vfiprintf_r+0x1b4>
    5e14:	9307      	str	r3, [sp, #28]
    5e16:	7821      	ldrb	r1, [r4, #0]
    5e18:	2203      	movs	r2, #3
    5e1a:	4836      	ldr	r0, [pc, #216]	; (5ef4 <_vfiprintf_r+0x228>)
    5e1c:	f000 fba6 	bl	656c <memchr>
    5e20:	2800      	cmp	r0, #0
    5e22:	d007      	beq.n	5e34 <_vfiprintf_r+0x168>
    5e24:	4b33      	ldr	r3, [pc, #204]	; (5ef4 <_vfiprintf_r+0x228>)
    5e26:	682a      	ldr	r2, [r5, #0]
    5e28:	1ac0      	subs	r0, r0, r3
    5e2a:	2340      	movs	r3, #64	; 0x40
    5e2c:	4083      	lsls	r3, r0
    5e2e:	4313      	orrs	r3, r2
    5e30:	602b      	str	r3, [r5, #0]
    5e32:	3401      	adds	r4, #1
    5e34:	7821      	ldrb	r1, [r4, #0]
    5e36:	1c63      	adds	r3, r4, #1
    5e38:	2206      	movs	r2, #6
    5e3a:	482f      	ldr	r0, [pc, #188]	; (5ef8 <_vfiprintf_r+0x22c>)
    5e3c:	9302      	str	r3, [sp, #8]
    5e3e:	7629      	strb	r1, [r5, #24]
    5e40:	f000 fb94 	bl	656c <memchr>
    5e44:	2800      	cmp	r0, #0
    5e46:	d044      	beq.n	5ed2 <_vfiprintf_r+0x206>
    5e48:	4b2c      	ldr	r3, [pc, #176]	; (5efc <_vfiprintf_r+0x230>)
    5e4a:	2b00      	cmp	r3, #0
    5e4c:	d12f      	bne.n	5eae <_vfiprintf_r+0x1e2>
    5e4e:	6829      	ldr	r1, [r5, #0]
    5e50:	9b05      	ldr	r3, [sp, #20]
    5e52:	2207      	movs	r2, #7
    5e54:	05c9      	lsls	r1, r1, #23
    5e56:	d528      	bpl.n	5eaa <_vfiprintf_r+0x1de>
    5e58:	189b      	adds	r3, r3, r2
    5e5a:	4393      	bics	r3, r2
    5e5c:	3308      	adds	r3, #8
    5e5e:	9305      	str	r3, [sp, #20]
    5e60:	696b      	ldr	r3, [r5, #20]
    5e62:	9a03      	ldr	r2, [sp, #12]
    5e64:	189b      	adds	r3, r3, r2
    5e66:	616b      	str	r3, [r5, #20]
    5e68:	e74f      	b.n	5d0a <_vfiprintf_r+0x3e>
    5e6a:	425b      	negs	r3, r3
    5e6c:	60eb      	str	r3, [r5, #12]
    5e6e:	2302      	movs	r3, #2
    5e70:	430b      	orrs	r3, r1
    5e72:	602b      	str	r3, [r5, #0]
    5e74:	e7bf      	b.n	5df6 <_vfiprintf_r+0x12a>
    5e76:	434b      	muls	r3, r1
    5e78:	3401      	adds	r4, #1
    5e7a:	189b      	adds	r3, r3, r2
    5e7c:	2001      	movs	r0, #1
    5e7e:	e789      	b.n	5d94 <_vfiprintf_r+0xc8>
    5e80:	2301      	movs	r3, #1
    5e82:	425b      	negs	r3, r3
    5e84:	e7c6      	b.n	5e14 <_vfiprintf_r+0x148>
    5e86:	2300      	movs	r3, #0
    5e88:	0014      	movs	r4, r2
    5e8a:	200a      	movs	r0, #10
    5e8c:	001a      	movs	r2, r3
    5e8e:	606b      	str	r3, [r5, #4]
    5e90:	7821      	ldrb	r1, [r4, #0]
    5e92:	3930      	subs	r1, #48	; 0x30
    5e94:	2909      	cmp	r1, #9
    5e96:	d903      	bls.n	5ea0 <_vfiprintf_r+0x1d4>
    5e98:	2b00      	cmp	r3, #0
    5e9a:	d0bc      	beq.n	5e16 <_vfiprintf_r+0x14a>
    5e9c:	9207      	str	r2, [sp, #28]
    5e9e:	e7ba      	b.n	5e16 <_vfiprintf_r+0x14a>
    5ea0:	4342      	muls	r2, r0
    5ea2:	3401      	adds	r4, #1
    5ea4:	1852      	adds	r2, r2, r1
    5ea6:	2301      	movs	r3, #1
    5ea8:	e7f2      	b.n	5e90 <_vfiprintf_r+0x1c4>
    5eaa:	3307      	adds	r3, #7
    5eac:	e7d5      	b.n	5e5a <_vfiprintf_r+0x18e>
    5eae:	ab05      	add	r3, sp, #20
    5eb0:	9300      	str	r3, [sp, #0]
    5eb2:	003a      	movs	r2, r7
    5eb4:	4b12      	ldr	r3, [pc, #72]	; (5f00 <_vfiprintf_r+0x234>)
    5eb6:	0029      	movs	r1, r5
    5eb8:	0030      	movs	r0, r6
    5eba:	e000      	b.n	5ebe <_vfiprintf_r+0x1f2>
    5ebc:	bf00      	nop
    5ebe:	9003      	str	r0, [sp, #12]
    5ec0:	9b03      	ldr	r3, [sp, #12]
    5ec2:	3301      	adds	r3, #1
    5ec4:	d1cc      	bne.n	5e60 <_vfiprintf_r+0x194>
    5ec6:	89bb      	ldrh	r3, [r7, #12]
    5ec8:	065b      	lsls	r3, r3, #25
    5eca:	d500      	bpl.n	5ece <_vfiprintf_r+0x202>
    5ecc:	e77b      	b.n	5dc6 <_vfiprintf_r+0xfa>
    5ece:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5ed0:	e77b      	b.n	5dca <_vfiprintf_r+0xfe>
    5ed2:	ab05      	add	r3, sp, #20
    5ed4:	9300      	str	r3, [sp, #0]
    5ed6:	003a      	movs	r2, r7
    5ed8:	4b09      	ldr	r3, [pc, #36]	; (5f00 <_vfiprintf_r+0x234>)
    5eda:	0029      	movs	r1, r5
    5edc:	0030      	movs	r0, r6
    5ede:	f000 f87f 	bl	5fe0 <_printf_i>
    5ee2:	e7ec      	b.n	5ebe <_vfiprintf_r+0x1f2>
    5ee4:	00008c88 	.word	0x00008c88
    5ee8:	00008cc8 	.word	0x00008cc8
    5eec:	00008ca8 	.word	0x00008ca8
    5ef0:	00008c68 	.word	0x00008c68
    5ef4:	00008cce 	.word	0x00008cce
    5ef8:	00008cd2 	.word	0x00008cd2
    5efc:	00000000 	.word	0x00000000
    5f00:	00005ca7 	.word	0x00005ca7

00005f04 <_printf_common>:
    5f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5f06:	0015      	movs	r5, r2
    5f08:	9301      	str	r3, [sp, #4]
    5f0a:	688a      	ldr	r2, [r1, #8]
    5f0c:	690b      	ldr	r3, [r1, #16]
    5f0e:	9000      	str	r0, [sp, #0]
    5f10:	000c      	movs	r4, r1
    5f12:	4293      	cmp	r3, r2
    5f14:	da00      	bge.n	5f18 <_printf_common+0x14>
    5f16:	0013      	movs	r3, r2
    5f18:	0022      	movs	r2, r4
    5f1a:	602b      	str	r3, [r5, #0]
    5f1c:	3243      	adds	r2, #67	; 0x43
    5f1e:	7812      	ldrb	r2, [r2, #0]
    5f20:	2a00      	cmp	r2, #0
    5f22:	d001      	beq.n	5f28 <_printf_common+0x24>
    5f24:	3301      	adds	r3, #1
    5f26:	602b      	str	r3, [r5, #0]
    5f28:	6823      	ldr	r3, [r4, #0]
    5f2a:	069b      	lsls	r3, r3, #26
    5f2c:	d502      	bpl.n	5f34 <_printf_common+0x30>
    5f2e:	682b      	ldr	r3, [r5, #0]
    5f30:	3302      	adds	r3, #2
    5f32:	602b      	str	r3, [r5, #0]
    5f34:	2706      	movs	r7, #6
    5f36:	6823      	ldr	r3, [r4, #0]
    5f38:	401f      	ands	r7, r3
    5f3a:	d027      	beq.n	5f8c <_printf_common+0x88>
    5f3c:	0023      	movs	r3, r4
    5f3e:	3343      	adds	r3, #67	; 0x43
    5f40:	781b      	ldrb	r3, [r3, #0]
    5f42:	1e5a      	subs	r2, r3, #1
    5f44:	4193      	sbcs	r3, r2
    5f46:	6822      	ldr	r2, [r4, #0]
    5f48:	0692      	lsls	r2, r2, #26
    5f4a:	d430      	bmi.n	5fae <_printf_common+0xaa>
    5f4c:	0022      	movs	r2, r4
    5f4e:	9901      	ldr	r1, [sp, #4]
    5f50:	3243      	adds	r2, #67	; 0x43
    5f52:	9800      	ldr	r0, [sp, #0]
    5f54:	9e08      	ldr	r6, [sp, #32]
    5f56:	47b0      	blx	r6
    5f58:	1c43      	adds	r3, r0, #1
    5f5a:	d025      	beq.n	5fa8 <_printf_common+0xa4>
    5f5c:	2306      	movs	r3, #6
    5f5e:	6820      	ldr	r0, [r4, #0]
    5f60:	682a      	ldr	r2, [r5, #0]
    5f62:	68e1      	ldr	r1, [r4, #12]
    5f64:	4003      	ands	r3, r0
    5f66:	2500      	movs	r5, #0
    5f68:	2b04      	cmp	r3, #4
    5f6a:	d103      	bne.n	5f74 <_printf_common+0x70>
    5f6c:	1a8d      	subs	r5, r1, r2
    5f6e:	43eb      	mvns	r3, r5
    5f70:	17db      	asrs	r3, r3, #31
    5f72:	401d      	ands	r5, r3
    5f74:	68a3      	ldr	r3, [r4, #8]
    5f76:	6922      	ldr	r2, [r4, #16]
    5f78:	4293      	cmp	r3, r2
    5f7a:	dd01      	ble.n	5f80 <_printf_common+0x7c>
    5f7c:	1a9b      	subs	r3, r3, r2
    5f7e:	18ed      	adds	r5, r5, r3
    5f80:	2700      	movs	r7, #0
    5f82:	42bd      	cmp	r5, r7
    5f84:	d120      	bne.n	5fc8 <_printf_common+0xc4>
    5f86:	2000      	movs	r0, #0
    5f88:	e010      	b.n	5fac <_printf_common+0xa8>
    5f8a:	3701      	adds	r7, #1
    5f8c:	68e3      	ldr	r3, [r4, #12]
    5f8e:	682a      	ldr	r2, [r5, #0]
    5f90:	1a9b      	subs	r3, r3, r2
    5f92:	429f      	cmp	r7, r3
    5f94:	dad2      	bge.n	5f3c <_printf_common+0x38>
    5f96:	0022      	movs	r2, r4
    5f98:	2301      	movs	r3, #1
    5f9a:	3219      	adds	r2, #25
    5f9c:	9901      	ldr	r1, [sp, #4]
    5f9e:	9800      	ldr	r0, [sp, #0]
    5fa0:	9e08      	ldr	r6, [sp, #32]
    5fa2:	47b0      	blx	r6
    5fa4:	1c43      	adds	r3, r0, #1
    5fa6:	d1f0      	bne.n	5f8a <_printf_common+0x86>
    5fa8:	2001      	movs	r0, #1
    5faa:	4240      	negs	r0, r0
    5fac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5fae:	2030      	movs	r0, #48	; 0x30
    5fb0:	18e1      	adds	r1, r4, r3
    5fb2:	3143      	adds	r1, #67	; 0x43
    5fb4:	7008      	strb	r0, [r1, #0]
    5fb6:	0021      	movs	r1, r4
    5fb8:	1c5a      	adds	r2, r3, #1
    5fba:	3145      	adds	r1, #69	; 0x45
    5fbc:	7809      	ldrb	r1, [r1, #0]
    5fbe:	18a2      	adds	r2, r4, r2
    5fc0:	3243      	adds	r2, #67	; 0x43
    5fc2:	3302      	adds	r3, #2
    5fc4:	7011      	strb	r1, [r2, #0]
    5fc6:	e7c1      	b.n	5f4c <_printf_common+0x48>
    5fc8:	0022      	movs	r2, r4
    5fca:	2301      	movs	r3, #1
    5fcc:	321a      	adds	r2, #26
    5fce:	9901      	ldr	r1, [sp, #4]
    5fd0:	9800      	ldr	r0, [sp, #0]
    5fd2:	9e08      	ldr	r6, [sp, #32]
    5fd4:	47b0      	blx	r6
    5fd6:	1c43      	adds	r3, r0, #1
    5fd8:	d0e6      	beq.n	5fa8 <_printf_common+0xa4>
    5fda:	3701      	adds	r7, #1
    5fdc:	e7d1      	b.n	5f82 <_printf_common+0x7e>
	...

00005fe0 <_printf_i>:
    5fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fe2:	b08b      	sub	sp, #44	; 0x2c
    5fe4:	9206      	str	r2, [sp, #24]
    5fe6:	000a      	movs	r2, r1
    5fe8:	3243      	adds	r2, #67	; 0x43
    5fea:	9307      	str	r3, [sp, #28]
    5fec:	9005      	str	r0, [sp, #20]
    5fee:	9204      	str	r2, [sp, #16]
    5ff0:	7e0a      	ldrb	r2, [r1, #24]
    5ff2:	000c      	movs	r4, r1
    5ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5ff6:	2a6e      	cmp	r2, #110	; 0x6e
    5ff8:	d100      	bne.n	5ffc <_printf_i+0x1c>
    5ffa:	e08f      	b.n	611c <_printf_i+0x13c>
    5ffc:	d817      	bhi.n	602e <_printf_i+0x4e>
    5ffe:	2a63      	cmp	r2, #99	; 0x63
    6000:	d02c      	beq.n	605c <_printf_i+0x7c>
    6002:	d808      	bhi.n	6016 <_printf_i+0x36>
    6004:	2a00      	cmp	r2, #0
    6006:	d100      	bne.n	600a <_printf_i+0x2a>
    6008:	e099      	b.n	613e <_printf_i+0x15e>
    600a:	2a58      	cmp	r2, #88	; 0x58
    600c:	d054      	beq.n	60b8 <_printf_i+0xd8>
    600e:	0026      	movs	r6, r4
    6010:	3642      	adds	r6, #66	; 0x42
    6012:	7032      	strb	r2, [r6, #0]
    6014:	e029      	b.n	606a <_printf_i+0x8a>
    6016:	2a64      	cmp	r2, #100	; 0x64
    6018:	d001      	beq.n	601e <_printf_i+0x3e>
    601a:	2a69      	cmp	r2, #105	; 0x69
    601c:	d1f7      	bne.n	600e <_printf_i+0x2e>
    601e:	6821      	ldr	r1, [r4, #0]
    6020:	681a      	ldr	r2, [r3, #0]
    6022:	0608      	lsls	r0, r1, #24
    6024:	d523      	bpl.n	606e <_printf_i+0x8e>
    6026:	1d11      	adds	r1, r2, #4
    6028:	6019      	str	r1, [r3, #0]
    602a:	6815      	ldr	r5, [r2, #0]
    602c:	e025      	b.n	607a <_printf_i+0x9a>
    602e:	2a73      	cmp	r2, #115	; 0x73
    6030:	d100      	bne.n	6034 <_printf_i+0x54>
    6032:	e088      	b.n	6146 <_printf_i+0x166>
    6034:	d808      	bhi.n	6048 <_printf_i+0x68>
    6036:	2a6f      	cmp	r2, #111	; 0x6f
    6038:	d029      	beq.n	608e <_printf_i+0xae>
    603a:	2a70      	cmp	r2, #112	; 0x70
    603c:	d1e7      	bne.n	600e <_printf_i+0x2e>
    603e:	2220      	movs	r2, #32
    6040:	6809      	ldr	r1, [r1, #0]
    6042:	430a      	orrs	r2, r1
    6044:	6022      	str	r2, [r4, #0]
    6046:	e003      	b.n	6050 <_printf_i+0x70>
    6048:	2a75      	cmp	r2, #117	; 0x75
    604a:	d020      	beq.n	608e <_printf_i+0xae>
    604c:	2a78      	cmp	r2, #120	; 0x78
    604e:	d1de      	bne.n	600e <_printf_i+0x2e>
    6050:	0022      	movs	r2, r4
    6052:	2178      	movs	r1, #120	; 0x78
    6054:	3245      	adds	r2, #69	; 0x45
    6056:	7011      	strb	r1, [r2, #0]
    6058:	4a6c      	ldr	r2, [pc, #432]	; (620c <_printf_i+0x22c>)
    605a:	e030      	b.n	60be <_printf_i+0xde>
    605c:	000e      	movs	r6, r1
    605e:	681a      	ldr	r2, [r3, #0]
    6060:	3642      	adds	r6, #66	; 0x42
    6062:	1d11      	adds	r1, r2, #4
    6064:	6019      	str	r1, [r3, #0]
    6066:	6813      	ldr	r3, [r2, #0]
    6068:	7033      	strb	r3, [r6, #0]
    606a:	2301      	movs	r3, #1
    606c:	e079      	b.n	6162 <_printf_i+0x182>
    606e:	0649      	lsls	r1, r1, #25
    6070:	d5d9      	bpl.n	6026 <_printf_i+0x46>
    6072:	1d11      	adds	r1, r2, #4
    6074:	6019      	str	r1, [r3, #0]
    6076:	2300      	movs	r3, #0
    6078:	5ed5      	ldrsh	r5, [r2, r3]
    607a:	2d00      	cmp	r5, #0
    607c:	da03      	bge.n	6086 <_printf_i+0xa6>
    607e:	232d      	movs	r3, #45	; 0x2d
    6080:	9a04      	ldr	r2, [sp, #16]
    6082:	426d      	negs	r5, r5
    6084:	7013      	strb	r3, [r2, #0]
    6086:	4b62      	ldr	r3, [pc, #392]	; (6210 <_printf_i+0x230>)
    6088:	270a      	movs	r7, #10
    608a:	9303      	str	r3, [sp, #12]
    608c:	e02f      	b.n	60ee <_printf_i+0x10e>
    608e:	6820      	ldr	r0, [r4, #0]
    6090:	6819      	ldr	r1, [r3, #0]
    6092:	0605      	lsls	r5, r0, #24
    6094:	d503      	bpl.n	609e <_printf_i+0xbe>
    6096:	1d08      	adds	r0, r1, #4
    6098:	6018      	str	r0, [r3, #0]
    609a:	680d      	ldr	r5, [r1, #0]
    609c:	e005      	b.n	60aa <_printf_i+0xca>
    609e:	0640      	lsls	r0, r0, #25
    60a0:	d5f9      	bpl.n	6096 <_printf_i+0xb6>
    60a2:	680d      	ldr	r5, [r1, #0]
    60a4:	1d08      	adds	r0, r1, #4
    60a6:	6018      	str	r0, [r3, #0]
    60a8:	b2ad      	uxth	r5, r5
    60aa:	4b59      	ldr	r3, [pc, #356]	; (6210 <_printf_i+0x230>)
    60ac:	2708      	movs	r7, #8
    60ae:	9303      	str	r3, [sp, #12]
    60b0:	2a6f      	cmp	r2, #111	; 0x6f
    60b2:	d018      	beq.n	60e6 <_printf_i+0x106>
    60b4:	270a      	movs	r7, #10
    60b6:	e016      	b.n	60e6 <_printf_i+0x106>
    60b8:	3145      	adds	r1, #69	; 0x45
    60ba:	700a      	strb	r2, [r1, #0]
    60bc:	4a54      	ldr	r2, [pc, #336]	; (6210 <_printf_i+0x230>)
    60be:	9203      	str	r2, [sp, #12]
    60c0:	681a      	ldr	r2, [r3, #0]
    60c2:	6821      	ldr	r1, [r4, #0]
    60c4:	1d10      	adds	r0, r2, #4
    60c6:	6018      	str	r0, [r3, #0]
    60c8:	6815      	ldr	r5, [r2, #0]
    60ca:	0608      	lsls	r0, r1, #24
    60cc:	d522      	bpl.n	6114 <_printf_i+0x134>
    60ce:	07cb      	lsls	r3, r1, #31
    60d0:	d502      	bpl.n	60d8 <_printf_i+0xf8>
    60d2:	2320      	movs	r3, #32
    60d4:	4319      	orrs	r1, r3
    60d6:	6021      	str	r1, [r4, #0]
    60d8:	2710      	movs	r7, #16
    60da:	2d00      	cmp	r5, #0
    60dc:	d103      	bne.n	60e6 <_printf_i+0x106>
    60de:	2320      	movs	r3, #32
    60e0:	6822      	ldr	r2, [r4, #0]
    60e2:	439a      	bics	r2, r3
    60e4:	6022      	str	r2, [r4, #0]
    60e6:	0023      	movs	r3, r4
    60e8:	2200      	movs	r2, #0
    60ea:	3343      	adds	r3, #67	; 0x43
    60ec:	701a      	strb	r2, [r3, #0]
    60ee:	6863      	ldr	r3, [r4, #4]
    60f0:	60a3      	str	r3, [r4, #8]
    60f2:	2b00      	cmp	r3, #0
    60f4:	db5c      	blt.n	61b0 <_printf_i+0x1d0>
    60f6:	2204      	movs	r2, #4
    60f8:	6821      	ldr	r1, [r4, #0]
    60fa:	4391      	bics	r1, r2
    60fc:	6021      	str	r1, [r4, #0]
    60fe:	2d00      	cmp	r5, #0
    6100:	d158      	bne.n	61b4 <_printf_i+0x1d4>
    6102:	9e04      	ldr	r6, [sp, #16]
    6104:	2b00      	cmp	r3, #0
    6106:	d064      	beq.n	61d2 <_printf_i+0x1f2>
    6108:	0026      	movs	r6, r4
    610a:	9b03      	ldr	r3, [sp, #12]
    610c:	3642      	adds	r6, #66	; 0x42
    610e:	781b      	ldrb	r3, [r3, #0]
    6110:	7033      	strb	r3, [r6, #0]
    6112:	e05e      	b.n	61d2 <_printf_i+0x1f2>
    6114:	0648      	lsls	r0, r1, #25
    6116:	d5da      	bpl.n	60ce <_printf_i+0xee>
    6118:	b2ad      	uxth	r5, r5
    611a:	e7d8      	b.n	60ce <_printf_i+0xee>
    611c:	6809      	ldr	r1, [r1, #0]
    611e:	681a      	ldr	r2, [r3, #0]
    6120:	0608      	lsls	r0, r1, #24
    6122:	d505      	bpl.n	6130 <_printf_i+0x150>
    6124:	1d11      	adds	r1, r2, #4
    6126:	6019      	str	r1, [r3, #0]
    6128:	6813      	ldr	r3, [r2, #0]
    612a:	6962      	ldr	r2, [r4, #20]
    612c:	601a      	str	r2, [r3, #0]
    612e:	e006      	b.n	613e <_printf_i+0x15e>
    6130:	0649      	lsls	r1, r1, #25
    6132:	d5f7      	bpl.n	6124 <_printf_i+0x144>
    6134:	1d11      	adds	r1, r2, #4
    6136:	6019      	str	r1, [r3, #0]
    6138:	6813      	ldr	r3, [r2, #0]
    613a:	8aa2      	ldrh	r2, [r4, #20]
    613c:	801a      	strh	r2, [r3, #0]
    613e:	2300      	movs	r3, #0
    6140:	9e04      	ldr	r6, [sp, #16]
    6142:	6123      	str	r3, [r4, #16]
    6144:	e054      	b.n	61f0 <_printf_i+0x210>
    6146:	681a      	ldr	r2, [r3, #0]
    6148:	1d11      	adds	r1, r2, #4
    614a:	6019      	str	r1, [r3, #0]
    614c:	6816      	ldr	r6, [r2, #0]
    614e:	2100      	movs	r1, #0
    6150:	6862      	ldr	r2, [r4, #4]
    6152:	0030      	movs	r0, r6
    6154:	f000 fa0a 	bl	656c <memchr>
    6158:	2800      	cmp	r0, #0
    615a:	d001      	beq.n	6160 <_printf_i+0x180>
    615c:	1b80      	subs	r0, r0, r6
    615e:	6060      	str	r0, [r4, #4]
    6160:	6863      	ldr	r3, [r4, #4]
    6162:	6123      	str	r3, [r4, #16]
    6164:	2300      	movs	r3, #0
    6166:	9a04      	ldr	r2, [sp, #16]
    6168:	7013      	strb	r3, [r2, #0]
    616a:	e041      	b.n	61f0 <_printf_i+0x210>
    616c:	6923      	ldr	r3, [r4, #16]
    616e:	0032      	movs	r2, r6
    6170:	9906      	ldr	r1, [sp, #24]
    6172:	9805      	ldr	r0, [sp, #20]
    6174:	9d07      	ldr	r5, [sp, #28]
    6176:	47a8      	blx	r5
    6178:	1c43      	adds	r3, r0, #1
    617a:	d043      	beq.n	6204 <_printf_i+0x224>
    617c:	6823      	ldr	r3, [r4, #0]
    617e:	2500      	movs	r5, #0
    6180:	079b      	lsls	r3, r3, #30
    6182:	d40f      	bmi.n	61a4 <_printf_i+0x1c4>
    6184:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6186:	68e0      	ldr	r0, [r4, #12]
    6188:	4298      	cmp	r0, r3
    618a:	da3d      	bge.n	6208 <_printf_i+0x228>
    618c:	0018      	movs	r0, r3
    618e:	e03b      	b.n	6208 <_printf_i+0x228>
    6190:	0022      	movs	r2, r4
    6192:	2301      	movs	r3, #1
    6194:	3219      	adds	r2, #25
    6196:	9906      	ldr	r1, [sp, #24]
    6198:	9805      	ldr	r0, [sp, #20]
    619a:	9e07      	ldr	r6, [sp, #28]
    619c:	47b0      	blx	r6
    619e:	1c43      	adds	r3, r0, #1
    61a0:	d030      	beq.n	6204 <_printf_i+0x224>
    61a2:	3501      	adds	r5, #1
    61a4:	68e3      	ldr	r3, [r4, #12]
    61a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    61a8:	1a9b      	subs	r3, r3, r2
    61aa:	429d      	cmp	r5, r3
    61ac:	dbf0      	blt.n	6190 <_printf_i+0x1b0>
    61ae:	e7e9      	b.n	6184 <_printf_i+0x1a4>
    61b0:	2d00      	cmp	r5, #0
    61b2:	d0a9      	beq.n	6108 <_printf_i+0x128>
    61b4:	9e04      	ldr	r6, [sp, #16]
    61b6:	0028      	movs	r0, r5
    61b8:	0039      	movs	r1, r7
    61ba:	f7fe ff97 	bl	50ec <__aeabi_uidivmod>
    61be:	9b03      	ldr	r3, [sp, #12]
    61c0:	3e01      	subs	r6, #1
    61c2:	5c5b      	ldrb	r3, [r3, r1]
    61c4:	0028      	movs	r0, r5
    61c6:	7033      	strb	r3, [r6, #0]
    61c8:	0039      	movs	r1, r7
    61ca:	f7fe ff09 	bl	4fe0 <__udivsi3>
    61ce:	1e05      	subs	r5, r0, #0
    61d0:	d1f1      	bne.n	61b6 <_printf_i+0x1d6>
    61d2:	2f08      	cmp	r7, #8
    61d4:	d109      	bne.n	61ea <_printf_i+0x20a>
    61d6:	6823      	ldr	r3, [r4, #0]
    61d8:	07db      	lsls	r3, r3, #31
    61da:	d506      	bpl.n	61ea <_printf_i+0x20a>
    61dc:	6863      	ldr	r3, [r4, #4]
    61de:	6922      	ldr	r2, [r4, #16]
    61e0:	4293      	cmp	r3, r2
    61e2:	dc02      	bgt.n	61ea <_printf_i+0x20a>
    61e4:	2330      	movs	r3, #48	; 0x30
    61e6:	3e01      	subs	r6, #1
    61e8:	7033      	strb	r3, [r6, #0]
    61ea:	9b04      	ldr	r3, [sp, #16]
    61ec:	1b9b      	subs	r3, r3, r6
    61ee:	6123      	str	r3, [r4, #16]
    61f0:	9b07      	ldr	r3, [sp, #28]
    61f2:	aa09      	add	r2, sp, #36	; 0x24
    61f4:	9300      	str	r3, [sp, #0]
    61f6:	0021      	movs	r1, r4
    61f8:	9b06      	ldr	r3, [sp, #24]
    61fa:	9805      	ldr	r0, [sp, #20]
    61fc:	f7ff fe82 	bl	5f04 <_printf_common>
    6200:	1c43      	adds	r3, r0, #1
    6202:	d1b3      	bne.n	616c <_printf_i+0x18c>
    6204:	2001      	movs	r0, #1
    6206:	4240      	negs	r0, r0
    6208:	b00b      	add	sp, #44	; 0x2c
    620a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    620c:	00008cea 	.word	0x00008cea
    6210:	00008cd9 	.word	0x00008cd9

00006214 <_putc_r>:
    6214:	b570      	push	{r4, r5, r6, lr}
    6216:	0006      	movs	r6, r0
    6218:	000d      	movs	r5, r1
    621a:	0014      	movs	r4, r2
    621c:	2800      	cmp	r0, #0
    621e:	d004      	beq.n	622a <_putc_r+0x16>
    6220:	6983      	ldr	r3, [r0, #24]
    6222:	2b00      	cmp	r3, #0
    6224:	d101      	bne.n	622a <_putc_r+0x16>
    6226:	f7ff fc25 	bl	5a74 <__sinit>
    622a:	4b12      	ldr	r3, [pc, #72]	; (6274 <_putc_r+0x60>)
    622c:	429c      	cmp	r4, r3
    622e:	d111      	bne.n	6254 <_putc_r+0x40>
    6230:	6874      	ldr	r4, [r6, #4]
    6232:	68a3      	ldr	r3, [r4, #8]
    6234:	3b01      	subs	r3, #1
    6236:	60a3      	str	r3, [r4, #8]
    6238:	2b00      	cmp	r3, #0
    623a:	da05      	bge.n	6248 <_putc_r+0x34>
    623c:	69a2      	ldr	r2, [r4, #24]
    623e:	4293      	cmp	r3, r2
    6240:	db12      	blt.n	6268 <_putc_r+0x54>
    6242:	b2eb      	uxtb	r3, r5
    6244:	2b0a      	cmp	r3, #10
    6246:	d00f      	beq.n	6268 <_putc_r+0x54>
    6248:	6823      	ldr	r3, [r4, #0]
    624a:	b2e8      	uxtb	r0, r5
    624c:	1c5a      	adds	r2, r3, #1
    624e:	6022      	str	r2, [r4, #0]
    6250:	701d      	strb	r5, [r3, #0]
    6252:	bd70      	pop	{r4, r5, r6, pc}
    6254:	4b08      	ldr	r3, [pc, #32]	; (6278 <_putc_r+0x64>)
    6256:	429c      	cmp	r4, r3
    6258:	d101      	bne.n	625e <_putc_r+0x4a>
    625a:	68b4      	ldr	r4, [r6, #8]
    625c:	e7e9      	b.n	6232 <_putc_r+0x1e>
    625e:	4b07      	ldr	r3, [pc, #28]	; (627c <_putc_r+0x68>)
    6260:	429c      	cmp	r4, r3
    6262:	d1e6      	bne.n	6232 <_putc_r+0x1e>
    6264:	68f4      	ldr	r4, [r6, #12]
    6266:	e7e4      	b.n	6232 <_putc_r+0x1e>
    6268:	0022      	movs	r2, r4
    626a:	0029      	movs	r1, r5
    626c:	0030      	movs	r0, r6
    626e:	f000 f853 	bl	6318 <__swbuf_r>
    6272:	e7ee      	b.n	6252 <_putc_r+0x3e>
    6274:	00008c88 	.word	0x00008c88
    6278:	00008ca8 	.word	0x00008ca8
    627c:	00008c68 	.word	0x00008c68

00006280 <__sread>:
    6280:	b570      	push	{r4, r5, r6, lr}
    6282:	000c      	movs	r4, r1
    6284:	250e      	movs	r5, #14
    6286:	5f49      	ldrsh	r1, [r1, r5]
    6288:	f000 f97c 	bl	6584 <_read_r>
    628c:	2800      	cmp	r0, #0
    628e:	db03      	blt.n	6298 <__sread+0x18>
    6290:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6292:	181b      	adds	r3, r3, r0
    6294:	6563      	str	r3, [r4, #84]	; 0x54
    6296:	bd70      	pop	{r4, r5, r6, pc}
    6298:	89a3      	ldrh	r3, [r4, #12]
    629a:	4a02      	ldr	r2, [pc, #8]	; (62a4 <__sread+0x24>)
    629c:	4013      	ands	r3, r2
    629e:	81a3      	strh	r3, [r4, #12]
    62a0:	e7f9      	b.n	6296 <__sread+0x16>
    62a2:	46c0      	nop			; (mov r8, r8)
    62a4:	ffffefff 	.word	0xffffefff

000062a8 <__swrite>:
    62a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62aa:	001f      	movs	r7, r3
    62ac:	898b      	ldrh	r3, [r1, #12]
    62ae:	0005      	movs	r5, r0
    62b0:	000c      	movs	r4, r1
    62b2:	0016      	movs	r6, r2
    62b4:	05db      	lsls	r3, r3, #23
    62b6:	d505      	bpl.n	62c4 <__swrite+0x1c>
    62b8:	230e      	movs	r3, #14
    62ba:	5ec9      	ldrsh	r1, [r1, r3]
    62bc:	2200      	movs	r2, #0
    62be:	2302      	movs	r3, #2
    62c0:	f000 f940 	bl	6544 <_lseek_r>
    62c4:	89a3      	ldrh	r3, [r4, #12]
    62c6:	4a05      	ldr	r2, [pc, #20]	; (62dc <__swrite+0x34>)
    62c8:	0028      	movs	r0, r5
    62ca:	4013      	ands	r3, r2
    62cc:	81a3      	strh	r3, [r4, #12]
    62ce:	0032      	movs	r2, r6
    62d0:	230e      	movs	r3, #14
    62d2:	5ee1      	ldrsh	r1, [r4, r3]
    62d4:	003b      	movs	r3, r7
    62d6:	f000 f875 	bl	63c4 <_write_r>
    62da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62dc:	ffffefff 	.word	0xffffefff

000062e0 <__sseek>:
    62e0:	b570      	push	{r4, r5, r6, lr}
    62e2:	000c      	movs	r4, r1
    62e4:	250e      	movs	r5, #14
    62e6:	5f49      	ldrsh	r1, [r1, r5]
    62e8:	f000 f92c 	bl	6544 <_lseek_r>
    62ec:	89a3      	ldrh	r3, [r4, #12]
    62ee:	1c42      	adds	r2, r0, #1
    62f0:	d103      	bne.n	62fa <__sseek+0x1a>
    62f2:	4a05      	ldr	r2, [pc, #20]	; (6308 <__sseek+0x28>)
    62f4:	4013      	ands	r3, r2
    62f6:	81a3      	strh	r3, [r4, #12]
    62f8:	bd70      	pop	{r4, r5, r6, pc}
    62fa:	2280      	movs	r2, #128	; 0x80
    62fc:	0152      	lsls	r2, r2, #5
    62fe:	4313      	orrs	r3, r2
    6300:	81a3      	strh	r3, [r4, #12]
    6302:	6560      	str	r0, [r4, #84]	; 0x54
    6304:	e7f8      	b.n	62f8 <__sseek+0x18>
    6306:	46c0      	nop			; (mov r8, r8)
    6308:	ffffefff 	.word	0xffffefff

0000630c <__sclose>:
    630c:	b510      	push	{r4, lr}
    630e:	230e      	movs	r3, #14
    6310:	5ec9      	ldrsh	r1, [r1, r3]
    6312:	f000 f8e1 	bl	64d8 <_close_r>
    6316:	bd10      	pop	{r4, pc}

00006318 <__swbuf_r>:
    6318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    631a:	0005      	movs	r5, r0
    631c:	000e      	movs	r6, r1
    631e:	0014      	movs	r4, r2
    6320:	2800      	cmp	r0, #0
    6322:	d004      	beq.n	632e <__swbuf_r+0x16>
    6324:	6983      	ldr	r3, [r0, #24]
    6326:	2b00      	cmp	r3, #0
    6328:	d101      	bne.n	632e <__swbuf_r+0x16>
    632a:	f7ff fba3 	bl	5a74 <__sinit>
    632e:	4b22      	ldr	r3, [pc, #136]	; (63b8 <__swbuf_r+0xa0>)
    6330:	429c      	cmp	r4, r3
    6332:	d12d      	bne.n	6390 <__swbuf_r+0x78>
    6334:	686c      	ldr	r4, [r5, #4]
    6336:	69a3      	ldr	r3, [r4, #24]
    6338:	60a3      	str	r3, [r4, #8]
    633a:	89a3      	ldrh	r3, [r4, #12]
    633c:	071b      	lsls	r3, r3, #28
    633e:	d531      	bpl.n	63a4 <__swbuf_r+0x8c>
    6340:	6923      	ldr	r3, [r4, #16]
    6342:	2b00      	cmp	r3, #0
    6344:	d02e      	beq.n	63a4 <__swbuf_r+0x8c>
    6346:	6823      	ldr	r3, [r4, #0]
    6348:	6922      	ldr	r2, [r4, #16]
    634a:	b2f7      	uxtb	r7, r6
    634c:	1a98      	subs	r0, r3, r2
    634e:	6963      	ldr	r3, [r4, #20]
    6350:	b2f6      	uxtb	r6, r6
    6352:	4298      	cmp	r0, r3
    6354:	db05      	blt.n	6362 <__swbuf_r+0x4a>
    6356:	0021      	movs	r1, r4
    6358:	0028      	movs	r0, r5
    635a:	f7ff fb1d 	bl	5998 <_fflush_r>
    635e:	2800      	cmp	r0, #0
    6360:	d126      	bne.n	63b0 <__swbuf_r+0x98>
    6362:	68a3      	ldr	r3, [r4, #8]
    6364:	3001      	adds	r0, #1
    6366:	3b01      	subs	r3, #1
    6368:	60a3      	str	r3, [r4, #8]
    636a:	6823      	ldr	r3, [r4, #0]
    636c:	1c5a      	adds	r2, r3, #1
    636e:	6022      	str	r2, [r4, #0]
    6370:	701f      	strb	r7, [r3, #0]
    6372:	6963      	ldr	r3, [r4, #20]
    6374:	4298      	cmp	r0, r3
    6376:	d004      	beq.n	6382 <__swbuf_r+0x6a>
    6378:	89a3      	ldrh	r3, [r4, #12]
    637a:	07db      	lsls	r3, r3, #31
    637c:	d51a      	bpl.n	63b4 <__swbuf_r+0x9c>
    637e:	2e0a      	cmp	r6, #10
    6380:	d118      	bne.n	63b4 <__swbuf_r+0x9c>
    6382:	0021      	movs	r1, r4
    6384:	0028      	movs	r0, r5
    6386:	f7ff fb07 	bl	5998 <_fflush_r>
    638a:	2800      	cmp	r0, #0
    638c:	d012      	beq.n	63b4 <__swbuf_r+0x9c>
    638e:	e00f      	b.n	63b0 <__swbuf_r+0x98>
    6390:	4b0a      	ldr	r3, [pc, #40]	; (63bc <__swbuf_r+0xa4>)
    6392:	429c      	cmp	r4, r3
    6394:	d101      	bne.n	639a <__swbuf_r+0x82>
    6396:	68ac      	ldr	r4, [r5, #8]
    6398:	e7cd      	b.n	6336 <__swbuf_r+0x1e>
    639a:	4b09      	ldr	r3, [pc, #36]	; (63c0 <__swbuf_r+0xa8>)
    639c:	429c      	cmp	r4, r3
    639e:	d1ca      	bne.n	6336 <__swbuf_r+0x1e>
    63a0:	68ec      	ldr	r4, [r5, #12]
    63a2:	e7c8      	b.n	6336 <__swbuf_r+0x1e>
    63a4:	0021      	movs	r1, r4
    63a6:	0028      	movs	r0, r5
    63a8:	f000 f820 	bl	63ec <__swsetup_r>
    63ac:	2800      	cmp	r0, #0
    63ae:	d0ca      	beq.n	6346 <__swbuf_r+0x2e>
    63b0:	2601      	movs	r6, #1
    63b2:	4276      	negs	r6, r6
    63b4:	0030      	movs	r0, r6
    63b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63b8:	00008c88 	.word	0x00008c88
    63bc:	00008ca8 	.word	0x00008ca8
    63c0:	00008c68 	.word	0x00008c68

000063c4 <_write_r>:
    63c4:	b570      	push	{r4, r5, r6, lr}
    63c6:	0005      	movs	r5, r0
    63c8:	0008      	movs	r0, r1
    63ca:	0011      	movs	r1, r2
    63cc:	2200      	movs	r2, #0
    63ce:	4c06      	ldr	r4, [pc, #24]	; (63e8 <_write_r+0x24>)
    63d0:	6022      	str	r2, [r4, #0]
    63d2:	001a      	movs	r2, r3
    63d4:	f7fd fa60 	bl	3898 <_write>
    63d8:	1c43      	adds	r3, r0, #1
    63da:	d103      	bne.n	63e4 <_write_r+0x20>
    63dc:	6823      	ldr	r3, [r4, #0]
    63de:	2b00      	cmp	r3, #0
    63e0:	d000      	beq.n	63e4 <_write_r+0x20>
    63e2:	602b      	str	r3, [r5, #0]
    63e4:	bd70      	pop	{r4, r5, r6, pc}
    63e6:	46c0      	nop			; (mov r8, r8)
    63e8:	20003824 	.word	0x20003824

000063ec <__swsetup_r>:
    63ec:	4b36      	ldr	r3, [pc, #216]	; (64c8 <__swsetup_r+0xdc>)
    63ee:	b570      	push	{r4, r5, r6, lr}
    63f0:	681d      	ldr	r5, [r3, #0]
    63f2:	0006      	movs	r6, r0
    63f4:	000c      	movs	r4, r1
    63f6:	2d00      	cmp	r5, #0
    63f8:	d005      	beq.n	6406 <__swsetup_r+0x1a>
    63fa:	69ab      	ldr	r3, [r5, #24]
    63fc:	2b00      	cmp	r3, #0
    63fe:	d102      	bne.n	6406 <__swsetup_r+0x1a>
    6400:	0028      	movs	r0, r5
    6402:	f7ff fb37 	bl	5a74 <__sinit>
    6406:	4b31      	ldr	r3, [pc, #196]	; (64cc <__swsetup_r+0xe0>)
    6408:	429c      	cmp	r4, r3
    640a:	d10f      	bne.n	642c <__swsetup_r+0x40>
    640c:	686c      	ldr	r4, [r5, #4]
    640e:	230c      	movs	r3, #12
    6410:	5ee2      	ldrsh	r2, [r4, r3]
    6412:	b293      	uxth	r3, r2
    6414:	0719      	lsls	r1, r3, #28
    6416:	d42d      	bmi.n	6474 <__swsetup_r+0x88>
    6418:	06d9      	lsls	r1, r3, #27
    641a:	d411      	bmi.n	6440 <__swsetup_r+0x54>
    641c:	2309      	movs	r3, #9
    641e:	2001      	movs	r0, #1
    6420:	6033      	str	r3, [r6, #0]
    6422:	3337      	adds	r3, #55	; 0x37
    6424:	4313      	orrs	r3, r2
    6426:	81a3      	strh	r3, [r4, #12]
    6428:	4240      	negs	r0, r0
    642a:	bd70      	pop	{r4, r5, r6, pc}
    642c:	4b28      	ldr	r3, [pc, #160]	; (64d0 <__swsetup_r+0xe4>)
    642e:	429c      	cmp	r4, r3
    6430:	d101      	bne.n	6436 <__swsetup_r+0x4a>
    6432:	68ac      	ldr	r4, [r5, #8]
    6434:	e7eb      	b.n	640e <__swsetup_r+0x22>
    6436:	4b27      	ldr	r3, [pc, #156]	; (64d4 <__swsetup_r+0xe8>)
    6438:	429c      	cmp	r4, r3
    643a:	d1e8      	bne.n	640e <__swsetup_r+0x22>
    643c:	68ec      	ldr	r4, [r5, #12]
    643e:	e7e6      	b.n	640e <__swsetup_r+0x22>
    6440:	075b      	lsls	r3, r3, #29
    6442:	d513      	bpl.n	646c <__swsetup_r+0x80>
    6444:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6446:	2900      	cmp	r1, #0
    6448:	d008      	beq.n	645c <__swsetup_r+0x70>
    644a:	0023      	movs	r3, r4
    644c:	3344      	adds	r3, #68	; 0x44
    644e:	4299      	cmp	r1, r3
    6450:	d002      	beq.n	6458 <__swsetup_r+0x6c>
    6452:	0030      	movs	r0, r6
    6454:	f7fe ffc0 	bl	53d8 <_free_r>
    6458:	2300      	movs	r3, #0
    645a:	6363      	str	r3, [r4, #52]	; 0x34
    645c:	2224      	movs	r2, #36	; 0x24
    645e:	89a3      	ldrh	r3, [r4, #12]
    6460:	4393      	bics	r3, r2
    6462:	81a3      	strh	r3, [r4, #12]
    6464:	2300      	movs	r3, #0
    6466:	6063      	str	r3, [r4, #4]
    6468:	6923      	ldr	r3, [r4, #16]
    646a:	6023      	str	r3, [r4, #0]
    646c:	2308      	movs	r3, #8
    646e:	89a2      	ldrh	r2, [r4, #12]
    6470:	4313      	orrs	r3, r2
    6472:	81a3      	strh	r3, [r4, #12]
    6474:	6923      	ldr	r3, [r4, #16]
    6476:	2b00      	cmp	r3, #0
    6478:	d10b      	bne.n	6492 <__swsetup_r+0xa6>
    647a:	21a0      	movs	r1, #160	; 0xa0
    647c:	2280      	movs	r2, #128	; 0x80
    647e:	89a3      	ldrh	r3, [r4, #12]
    6480:	0089      	lsls	r1, r1, #2
    6482:	0092      	lsls	r2, r2, #2
    6484:	400b      	ands	r3, r1
    6486:	4293      	cmp	r3, r2
    6488:	d003      	beq.n	6492 <__swsetup_r+0xa6>
    648a:	0021      	movs	r1, r4
    648c:	0030      	movs	r0, r6
    648e:	f7ff fbaf 	bl	5bf0 <__smakebuf_r>
    6492:	2301      	movs	r3, #1
    6494:	89a2      	ldrh	r2, [r4, #12]
    6496:	4013      	ands	r3, r2
    6498:	d011      	beq.n	64be <__swsetup_r+0xd2>
    649a:	2300      	movs	r3, #0
    649c:	60a3      	str	r3, [r4, #8]
    649e:	6963      	ldr	r3, [r4, #20]
    64a0:	425b      	negs	r3, r3
    64a2:	61a3      	str	r3, [r4, #24]
    64a4:	2000      	movs	r0, #0
    64a6:	6923      	ldr	r3, [r4, #16]
    64a8:	4283      	cmp	r3, r0
    64aa:	d1be      	bne.n	642a <__swsetup_r+0x3e>
    64ac:	230c      	movs	r3, #12
    64ae:	5ee2      	ldrsh	r2, [r4, r3]
    64b0:	0613      	lsls	r3, r2, #24
    64b2:	d5ba      	bpl.n	642a <__swsetup_r+0x3e>
    64b4:	2340      	movs	r3, #64	; 0x40
    64b6:	4313      	orrs	r3, r2
    64b8:	81a3      	strh	r3, [r4, #12]
    64ba:	3801      	subs	r0, #1
    64bc:	e7b5      	b.n	642a <__swsetup_r+0x3e>
    64be:	0792      	lsls	r2, r2, #30
    64c0:	d400      	bmi.n	64c4 <__swsetup_r+0xd8>
    64c2:	6963      	ldr	r3, [r4, #20]
    64c4:	60a3      	str	r3, [r4, #8]
    64c6:	e7ed      	b.n	64a4 <__swsetup_r+0xb8>
    64c8:	200001ac 	.word	0x200001ac
    64cc:	00008c88 	.word	0x00008c88
    64d0:	00008ca8 	.word	0x00008ca8
    64d4:	00008c68 	.word	0x00008c68

000064d8 <_close_r>:
    64d8:	2300      	movs	r3, #0
    64da:	b570      	push	{r4, r5, r6, lr}
    64dc:	4c06      	ldr	r4, [pc, #24]	; (64f8 <_close_r+0x20>)
    64de:	0005      	movs	r5, r0
    64e0:	0008      	movs	r0, r1
    64e2:	6023      	str	r3, [r4, #0]
    64e4:	f7fd fa12 	bl	390c <_close>
    64e8:	1c43      	adds	r3, r0, #1
    64ea:	d103      	bne.n	64f4 <_close_r+0x1c>
    64ec:	6823      	ldr	r3, [r4, #0]
    64ee:	2b00      	cmp	r3, #0
    64f0:	d000      	beq.n	64f4 <_close_r+0x1c>
    64f2:	602b      	str	r3, [r5, #0]
    64f4:	bd70      	pop	{r4, r5, r6, pc}
    64f6:	46c0      	nop			; (mov r8, r8)
    64f8:	20003824 	.word	0x20003824

000064fc <_fstat_r>:
    64fc:	2300      	movs	r3, #0
    64fe:	b570      	push	{r4, r5, r6, lr}
    6500:	4c06      	ldr	r4, [pc, #24]	; (651c <_fstat_r+0x20>)
    6502:	0005      	movs	r5, r0
    6504:	0008      	movs	r0, r1
    6506:	0011      	movs	r1, r2
    6508:	6023      	str	r3, [r4, #0]
    650a:	f7fd fa02 	bl	3912 <_fstat>
    650e:	1c43      	adds	r3, r0, #1
    6510:	d103      	bne.n	651a <_fstat_r+0x1e>
    6512:	6823      	ldr	r3, [r4, #0]
    6514:	2b00      	cmp	r3, #0
    6516:	d000      	beq.n	651a <_fstat_r+0x1e>
    6518:	602b      	str	r3, [r5, #0]
    651a:	bd70      	pop	{r4, r5, r6, pc}
    651c:	20003824 	.word	0x20003824

00006520 <_isatty_r>:
    6520:	2300      	movs	r3, #0
    6522:	b570      	push	{r4, r5, r6, lr}
    6524:	4c06      	ldr	r4, [pc, #24]	; (6540 <_isatty_r+0x20>)
    6526:	0005      	movs	r5, r0
    6528:	0008      	movs	r0, r1
    652a:	6023      	str	r3, [r4, #0]
    652c:	f7fd f9f6 	bl	391c <_isatty>
    6530:	1c43      	adds	r3, r0, #1
    6532:	d103      	bne.n	653c <_isatty_r+0x1c>
    6534:	6823      	ldr	r3, [r4, #0]
    6536:	2b00      	cmp	r3, #0
    6538:	d000      	beq.n	653c <_isatty_r+0x1c>
    653a:	602b      	str	r3, [r5, #0]
    653c:	bd70      	pop	{r4, r5, r6, pc}
    653e:	46c0      	nop			; (mov r8, r8)
    6540:	20003824 	.word	0x20003824

00006544 <_lseek_r>:
    6544:	b570      	push	{r4, r5, r6, lr}
    6546:	0005      	movs	r5, r0
    6548:	0008      	movs	r0, r1
    654a:	0011      	movs	r1, r2
    654c:	2200      	movs	r2, #0
    654e:	4c06      	ldr	r4, [pc, #24]	; (6568 <_lseek_r+0x24>)
    6550:	6022      	str	r2, [r4, #0]
    6552:	001a      	movs	r2, r3
    6554:	f7fd f9e4 	bl	3920 <_lseek>
    6558:	1c43      	adds	r3, r0, #1
    655a:	d103      	bne.n	6564 <_lseek_r+0x20>
    655c:	6823      	ldr	r3, [r4, #0]
    655e:	2b00      	cmp	r3, #0
    6560:	d000      	beq.n	6564 <_lseek_r+0x20>
    6562:	602b      	str	r3, [r5, #0]
    6564:	bd70      	pop	{r4, r5, r6, pc}
    6566:	46c0      	nop			; (mov r8, r8)
    6568:	20003824 	.word	0x20003824

0000656c <memchr>:
    656c:	b2c9      	uxtb	r1, r1
    656e:	1882      	adds	r2, r0, r2
    6570:	4290      	cmp	r0, r2
    6572:	d101      	bne.n	6578 <memchr+0xc>
    6574:	2000      	movs	r0, #0
    6576:	4770      	bx	lr
    6578:	7803      	ldrb	r3, [r0, #0]
    657a:	428b      	cmp	r3, r1
    657c:	d0fb      	beq.n	6576 <memchr+0xa>
    657e:	3001      	adds	r0, #1
    6580:	e7f6      	b.n	6570 <memchr+0x4>
	...

00006584 <_read_r>:
    6584:	b570      	push	{r4, r5, r6, lr}
    6586:	0005      	movs	r5, r0
    6588:	0008      	movs	r0, r1
    658a:	0011      	movs	r1, r2
    658c:	2200      	movs	r2, #0
    658e:	4c06      	ldr	r4, [pc, #24]	; (65a8 <_read_r+0x24>)
    6590:	6022      	str	r2, [r4, #0]
    6592:	001a      	movs	r2, r3
    6594:	f7fd f95e 	bl	3854 <_read>
    6598:	1c43      	adds	r3, r0, #1
    659a:	d103      	bne.n	65a4 <_read_r+0x20>
    659c:	6823      	ldr	r3, [r4, #0]
    659e:	2b00      	cmp	r3, #0
    65a0:	d000      	beq.n	65a4 <_read_r+0x20>
    65a2:	602b      	str	r3, [r5, #0]
    65a4:	bd70      	pop	{r4, r5, r6, pc}
    65a6:	46c0      	nop			; (mov r8, r8)
    65a8:	20003824 	.word	0x20003824
    65ac:	00000ee6 	.word	0x00000ee6
    65b0:	00000f1a 	.word	0x00000f1a
    65b4:	00001098 	.word	0x00001098
    65b8:	00000f08 	.word	0x00000f08
    65bc:	00000f22 	.word	0x00000f22
    65c0:	00000f2a 	.word	0x00000f2a
    65c4:	00000f08 	.word	0x00000f08
    65c8:	00000f32 	.word	0x00000f32
    65cc:	00000f08 	.word	0x00000f08
    65d0:	00000f08 	.word	0x00000f08
    65d4:	00000f08 	.word	0x00000f08
    65d8:	00000f08 	.word	0x00000f08
    65dc:	00000f08 	.word	0x00000f08
    65e0:	00000f08 	.word	0x00000f08
    65e4:	00000f08 	.word	0x00000f08
    65e8:	00000f08 	.word	0x00000f08
    65ec:	00000f08 	.word	0x00000f08
    65f0:	00000f08 	.word	0x00000f08
    65f4:	00000f08 	.word	0x00000f08
    65f8:	00000f08 	.word	0x00000f08
    65fc:	00000f08 	.word	0x00000f08
    6600:	00000f3a 	.word	0x00000f3a
    6604:	00000f42 	.word	0x00000f42
    6608:	00000f08 	.word	0x00000f08
    660c:	00000f4a 	.word	0x00000f4a
    6610:	00000f52 	.word	0x00000f52
    6614:	00000f08 	.word	0x00000f08
    6618:	00000f5a 	.word	0x00000f5a
    661c:	00000f08 	.word	0x00000f08
    6620:	00000f08 	.word	0x00000f08
    6624:	00000f62 	.word	0x00000f62
    6628:	00000f6a 	.word	0x00000f6a
    662c:	00000f72 	.word	0x00000f72
    6630:	00000f7c 	.word	0x00000f7c
    6634:	00000f86 	.word	0x00000f86
    6638:	00000f8e 	.word	0x00000f8e
    663c:	00000f96 	.word	0x00000f96
    6640:	00000f9e 	.word	0x00000f9e
    6644:	00000fa8 	.word	0x00000fa8
    6648:	00000ff2 	.word	0x00000ff2
    664c:	00000ffc 	.word	0x00000ffc
    6650:	00001004 	.word	0x00001004
    6654:	0000100c 	.word	0x0000100c
    6658:	00001016 	.word	0x00001016
    665c:	00001020 	.word	0x00001020
    6660:	00001028 	.word	0x00001028
    6664:	00001030 	.word	0x00001030
    6668:	00001038 	.word	0x00001038
    666c:	00001042 	.word	0x00001042
    6670:	0000108e 	.word	0x0000108e
    6674:	00001b9a 	.word	0x00001b9a
    6678:	00001ba0 	.word	0x00001ba0
    667c:	00001ba6 	.word	0x00001ba6
    6680:	00001bb2 	.word	0x00001bb2
    6684:	00001bb8 	.word	0x00001bb8
    6688:	00001bbe 	.word	0x00001bbe
    668c:	80000000 	.word	0x80000000
    6690:	84000400 	.word	0x84000400
    6694:	80100010 	.word	0x80100010
    6698:	c6180410 	.word	0xc6180410
    669c:	f8008410 	.word	0xf8008410
    66a0:	ffe007e0 	.word	0xffe007e0
    66a4:	f81f001f 	.word	0xf81f001f
    66a8:	ffff07ff 	.word	0xffff07ff
    66ac:	000b0000 	.word	0x000b0000
    66b0:	00150010 	.word	0x00150010
    66b4:	001f001a 	.word	0x001f001a
    66b8:	02eb02e0 	.word	0x02eb02e0
    66bc:	02f5001d 	.word	0x02f5001d
    66c0:	02ff02fa 	.word	0x02ff02fa
    66c4:	042b0420 	.word	0x042b0420
    66c8:	04350430 	.word	0x04350430
    66cc:	043f043a 	.word	0x043f043a
    66d0:	056b0560 	.word	0x056b0560
    66d4:	05750570 	.word	0x05750570
    66d8:	057f057a 	.word	0x057f057a
    66dc:	06ab06a0 	.word	0x06ab06a0
    66e0:	06b506b0 	.word	0x06b506b0
    66e4:	06bf06ba 	.word	0x06bf06ba
    66e8:	07eb07e0 	.word	0x07eb07e0
    66ec:	07f507f0 	.word	0x07f507f0
    66f0:	07ff07fa 	.word	0x07ff07fa
    66f4:	580b5800 	.word	0x580b5800
    66f8:	58155810 	.word	0x58155810
    66fc:	581f581a 	.word	0x581f581a
    6700:	5aeb5ae0 	.word	0x5aeb5ae0
    6704:	5af55af0 	.word	0x5af55af0
    6708:	5aff5afa 	.word	0x5aff5afa
    670c:	5c2b5c20 	.word	0x5c2b5c20
    6710:	5c355c30 	.word	0x5c355c30
    6714:	5c3f5c3a 	.word	0x5c3f5c3a
    6718:	5d6b5d60 	.word	0x5d6b5d60
    671c:	5d755d70 	.word	0x5d755d70
    6720:	5d7f5d7a 	.word	0x5d7f5d7a
    6724:	5eab5ea0 	.word	0x5eab5ea0
    6728:	5eb55eb0 	.word	0x5eb55eb0
    672c:	5ebf5eba 	.word	0x5ebf5eba
    6730:	5feb5fe0 	.word	0x5feb5fe0
    6734:	5ff55ff0 	.word	0x5ff55ff0
    6738:	5fff5ffa 	.word	0x5fff5ffa
    673c:	800b8000 	.word	0x800b8000
    6740:	80158010 	.word	0x80158010
    6744:	801f801a 	.word	0x801f801a
    6748:	82eb82e0 	.word	0x82eb82e0
    674c:	82f582f0 	.word	0x82f582f0
    6750:	82ff82fa 	.word	0x82ff82fa
    6754:	842b8420 	.word	0x842b8420
    6758:	84358430 	.word	0x84358430
    675c:	843f843a 	.word	0x843f843a
    6760:	856b8560 	.word	0x856b8560
    6764:	85758570 	.word	0x85758570
    6768:	857f857a 	.word	0x857f857a
    676c:	86ab86a0 	.word	0x86ab86a0
    6770:	86b586b0 	.word	0x86b586b0
    6774:	86bf86ba 	.word	0x86bf86ba
    6778:	87eb87e0 	.word	0x87eb87e0
    677c:	87f587f0 	.word	0x87f587f0
    6780:	87ff87fa 	.word	0x87ff87fa
    6784:	a80ba800 	.word	0xa80ba800
    6788:	a815a810 	.word	0xa815a810
    678c:	a81fa81a 	.word	0xa81fa81a
    6790:	aaebaae0 	.word	0xaaebaae0
    6794:	aaf5aaf0 	.word	0xaaf5aaf0
    6798:	aaffaafa 	.word	0xaaffaafa
    679c:	ac2bac20 	.word	0xac2bac20
    67a0:	0566ac30 	.word	0x0566ac30
    67a4:	ac3fac3a 	.word	0xac3fac3a
    67a8:	ad6bad60 	.word	0xad6bad60
    67ac:	ad75ad70 	.word	0xad75ad70
    67b0:	ad7fad7a 	.word	0xad7fad7a
    67b4:	aeabaea0 	.word	0xaeabaea0
    67b8:	aeb5aeb0 	.word	0xaeb5aeb0
    67bc:	aebfaeba 	.word	0xaebfaeba
    67c0:	afebafe0 	.word	0xafebafe0
    67c4:	aff5aff0 	.word	0xaff5aff0
    67c8:	afffaffa 	.word	0xafffaffa
    67cc:	d00bd000 	.word	0xd00bd000
    67d0:	d015d010 	.word	0xd015d010
    67d4:	d01fd01a 	.word	0xd01fd01a
    67d8:	d2ebd2e0 	.word	0xd2ebd2e0
    67dc:	d2f5d2f0 	.word	0xd2f5d2f0
    67e0:	d2ffd2fa 	.word	0xd2ffd2fa
    67e4:	d42bd420 	.word	0xd42bd420
    67e8:	d435d430 	.word	0xd435d430
    67ec:	d43fd43a 	.word	0xd43fd43a
    67f0:	d56bd560 	.word	0xd56bd560
    67f4:	d575d570 	.word	0xd575d570
    67f8:	d57fd57a 	.word	0xd57fd57a
    67fc:	d6abd6a0 	.word	0xd6abd6a0
    6800:	d6b5d6b0 	.word	0xd6b5d6b0
    6804:	d6bfd6ba 	.word	0xd6bfd6ba
    6808:	d7ebd7e0 	.word	0xd7ebd7e0
    680c:	d7f5d7f0 	.word	0xd7f5d7f0
    6810:	d7ffd7fa 	.word	0xd7ffd7fa
    6814:	f80bf800 	.word	0xf80bf800
    6818:	f815f810 	.word	0xf815f810
    681c:	f81ff81a 	.word	0xf81ff81a
    6820:	faebfae0 	.word	0xfaebfae0
    6824:	faf5faf0 	.word	0xfaf5faf0
    6828:	fafffafa 	.word	0xfafffafa
    682c:	fc2bfc20 	.word	0xfc2bfc20
    6830:	fc35fc30 	.word	0xfc35fc30
    6834:	fc3ffc3a 	.word	0xfc3ffc3a
    6838:	fd6bfd60 	.word	0xfd6bfd60
    683c:	fd75fd70 	.word	0xfd75fd70
    6840:	fd7ffd7a 	.word	0xfd7ffd7a
    6844:	feabfea0 	.word	0xfeabfea0
    6848:	feb5feb0 	.word	0xfeb5feb0
    684c:	febffeba 	.word	0xfebffeba
    6850:	ffebffe0 	.word	0xffebffe0
    6854:	fff5fff0 	.word	0xfff5fff0
    6858:	fffffffa 	.word	0xfffffffa
    685c:	10820841 	.word	0x10820841
    6860:	212418e3 	.word	0x212418e3
    6864:	39c73186 	.word	0x39c73186
    6868:	4a694228 	.word	0x4a694228
    686c:	630c5acb 	.word	0x630c5acb
    6870:	73ae632c 	.word	0x73ae632c
    6874:	8c518410 	.word	0x8c518410
    6878:	9cf394b2 	.word	0x9cf394b2
    687c:	b596ad55 	.word	0xb596ad55
    6880:	c638bdf7 	.word	0xc638bdf7
    6884:	dedbd69a 	.word	0xdedbd69a
    6888:	ef7de73c 	.word	0xef7de73c
    688c:	6e305b1b 	.word	0x6e305b1b
    6890:	00000008 	.word	0x00000008
    6894:	00000008 	.word	0x00000008
    6898:	00000008 	.word	0x00000008
    689c:	00000008 	.word	0x00000008
    68a0:	00000008 	.word	0x00000008
    68a4:	00000008 	.word	0x00000008
    68a8:	00000008 	.word	0x00000008
    68ac:	00000008 	.word	0x00000008
    68b0:	00000010 	.word	0x00000010
    68b4:	00000010 	.word	0x00000010
    68b8:	00000010 	.word	0x00000010
    68bc:	00000010 	.word	0x00000010
    68c0:	00000010 	.word	0x00000010
    68c4:	00000010 	.word	0x00000010
    68c8:	00000010 	.word	0x00000010
    68cc:	00000010 	.word	0x00000010
    68d0:	00000018 	.word	0x00000018
    68d4:	00000018 	.word	0x00000018
    68d8:	00000018 	.word	0x00000018
    68dc:	00000018 	.word	0x00000018
    68e0:	00000018 	.word	0x00000018
    68e4:	00000018 	.word	0x00000018
    68e8:	00000018 	.word	0x00000018
    68ec:	00000018 	.word	0x00000018
    68f0:	00000020 	.word	0x00000020
    68f4:	00000020 	.word	0x00000020
    68f8:	00000020 	.word	0x00000020
    68fc:	00000020 	.word	0x00000020
    6900:	00000020 	.word	0x00000020
    6904:	00000020 	.word	0x00000020
    6908:	00000020 	.word	0x00000020
    690c:	00000020 	.word	0x00000020
    6910:	00000028 	.word	0x00000028
    6914:	00000028 	.word	0x00000028
    6918:	00000028 	.word	0x00000028
    691c:	00000028 	.word	0x00000028
    6920:	00000028 	.word	0x00000028
    6924:	00000028 	.word	0x00000028
    6928:	00000028 	.word	0x00000028
    692c:	00000028 	.word	0x00000028
    6930:	00000030 	.word	0x00000030
    6934:	00000030 	.word	0x00000030
    6938:	00000030 	.word	0x00000030
    693c:	00000030 	.word	0x00000030
    6940:	00000030 	.word	0x00000030
    6944:	00000030 	.word	0x00000030
    6948:	00000030 	.word	0x00000030
    694c:	00000030 	.word	0x00000030
    6950:	00000038 	.word	0x00000038
    6954:	00000038 	.word	0x00000038
    6958:	00000038 	.word	0x00000038
    695c:	00000038 	.word	0x00000038
    6960:	00000038 	.word	0x00000038
    6964:	00000038 	.word	0x00000038
    6968:	00000038 	.word	0x00000038
    696c:	00000038 	.word	0x00000038
    6970:	00000040 	.word	0x00000040
    6974:	00000040 	.word	0x00000040
    6978:	00000040 	.word	0x00000040
    697c:	00000040 	.word	0x00000040
    6980:	00000040 	.word	0x00000040
    6984:	00000040 	.word	0x00000040
    6988:	00000040 	.word	0x00000040
    698c:	00000040 	.word	0x00000040
    6990:	00000048 	.word	0x00000048
    6994:	00000048 	.word	0x00000048
    6998:	00000048 	.word	0x00000048
    699c:	00000048 	.word	0x00000048
    69a0:	00000048 	.word	0x00000048
    69a4:	00000048 	.word	0x00000048
    69a8:	00000048 	.word	0x00000048
    69ac:	00000048 	.word	0x00000048
    69b0:	0000004f 	.word	0x0000004f
    69b4:	0000004f 	.word	0x0000004f
    69b8:	0000004f 	.word	0x0000004f
    69bc:	0000004f 	.word	0x0000004f
    69c0:	0000004f 	.word	0x0000004f
    69c4:	0000004f 	.word	0x0000004f
    69c8:	0000004f 	.word	0x0000004f
    69cc:	0000004f 	.word	0x0000004f

000069d0 <DECIDreturn>:
    69d0:	363f5b1b 00000063 0000001b 0000005b     .[?6c.......[...
    69e0:	00000052                                R...

000069e4 <csiEscCodes>:
    69e4:	43424140 47464544 4c4b4a48 6158504d     @ABCDEFGHJKLMPXa
    69f4:	66656463 6d6c6867 7372716e 00006075     cdefghlmnqrsu`..
    6a04:	00007325 000a000a 00140014 00000014     %s..............
    6a14:	000a017c 000a017c 00140186 00140000     |...|...........
    6a24:	0122000a 00140186 01220190 0122000a     .."......."...".
    6a34:	012c0014 0122017c 012c0186 012c0014     ..,.|."...,...,.
    6a44:	0136017c 001e0000 00280032 00320000     |.6.....2.(...2.
    6a54:	003c0032 001e0050 00280118 00280046     2.<.P.....(.F.(.
    6a64:	00be0050 00be0050 00c80118 00280118     P...P.........(.
    6a74:	00be0122 00460000 00500032 005a0000     ".....F.2.P...Z.
    6a84:	00640032 006e0000 00780032 00820000     2.d...n.2.x.....
    6a94:	008c0032 00960000 00a00032 00aa0000     2.......2.......
    6aa4:	00b40032 00be0000 00c80032 00c8012c     2.......2...,...
    6ab4:	00d20172 00dc001e 00e60172 00f0001e     r.......r.......
    6ac4:	00fa0172 0104001e 010e0172 0118005a     r.......r...Z...
    6ad4:	0122012c 82be50b4 8cbe82aa 64963c8c     ,."..P.......<.d
    6ae4:	64dc3cd2 a08c9682 aadca08c a0e696dc     .<.d............
    6af4:	50f03c78 5a78466e aaaa3c96 a0dc3cc8     x<.PnFxZ.<...<..
    6b04:	aae6a0d2 6e617254 69722073 73746867     ....Trans rights
    6b14:	65726120 6d756820 72206e61 74686769      are human right
    6b24:	00000073 355e3331 31202b20 20355e36     s...13^5 + 16^5 
    6b34:	3731203d 0000355e 69746552 616c7563     = 17^5..Reticula
    6b44:	676e6974 6c705320 73656e69 00000000     ting Splines....
    6b54:	6c6f6976 65636e65 726f772e 0000736b     violence.works..
    6b64:	2b206953 00425020 6c6c694b 6c694220     Si + PB.Kill Bil
    6b74:	6e6f696c 65726961 61282073 5420646e     lionaires (and T
    6b84:	6c6c6972 616e6f69 29657269 00000000     rillionaire)....
    6b94:	65746e49 74736572 206e6920 68636574     Interest in tech
    6ba4:	6f6c6f6e 69207967 6f6e2073 20612074     nology is not a 
    6bb4:	73726570 6c616e6f 00797469 50203031     personality.10 P
    6bc4:	544e4952 52484320 30322824 2b352e35     RINT CHR$(205.5+
    6bd4:	28444e52 3b292931 47203a20 204f544f     RND(1)); : GOTO 
    6be4:	00003031 67206f4e 2e73646f 206f4e20     10..No gods. No 
    6bf4:	7473616d 2e737265 206f4e20 65747865     masters. No exte
    6c04:	6c616e72 62696c20 69726172 002e7365     rnal libraries..
    6c14:	6c6c694b 7a614e20 00007369 6e616954     Kill Nazis..Tian
    6c24:	656d6e61 7153206e 65726175 38393120     anmen Square 198
    6c34:	00000039 72656d41 20616369 20736177     9...America was 
    6c44:	6e756f66 20646564 73206e6f 6576616c     founded on slave
    6c54:	00007972 72656854 73692065 6c6e6f20     ry..There is onl
    6c64:	61632079 61746970 6e61206c 616c2064     y capital and la
    6c74:	00726f62 6f636e45 67617275 59532065     bor.Encourage SY
    6c84:	54454d4d 20434952 73616c63 61772073     MMETRIC class wa
    6c94:	72616672 00000065 6f676f56 6f50206e     rfare...Vogon Po
    6ca4:	79727465 00000000 694e2041 54206563     etry....A Nice T
    6cb4:	00005954 78696e55 6f706520 6d206863     TY..Unix epoch m
    6cc4:	73756e69 46783020 61642046 00007379     inus 0xFF days..
    6cd4:	3d202069 35783020 35373366 20666439     i  = 0x5f3759df 
    6ce4:	2028202d 3e3e2069 29203120 0000003b     - ( i >> 1 );...
    6cf4:	61657053 7274206b 20687475 70206f74     Speak truth to p
    6d04:	7265776f 2749203b 7573206d 74206572     ower; I'm sure t
    6d14:	27796568 6c206c6c 65747369 6874206e     hey'll listen th
    6d24:	74207369 2e656d69 00000000 63666544     is time.....Defc
    6d34:	73276e6f 6e616320 656c6563 32282064     on's canceled (2
    6d44:	29303230 00000000 73746152 7473656e     020)....Ratsnest
    6d54:	6f4e203a 6e696874 6f542067 216f4420     : Nothing To Do!
    6d64:	00000000 68207449 36207361 656b2039     ....It has 69 ke
    6d74:	002e7379 61636542 20657375 342d5456     ys..Because VT-4
    6d84:	77203032 61207361 6165726c 74207964     20 was already t
    6d94:	6e656b61 00000000 706d6f43 73736572     aken....Compress
    6da4:	206e6f69 6f676c61 68746972 6162206d     ion algorithm ba
    6db4:	20646573 42206e6f 28205042 37393931     sed on BBP (1997
    6dc4:	00000029 63616554 65682068 68746c61     )...Teach health
    6dd4:	736e6920 6e617275 70206563 69766f72      insurance provi
    6de4:	73726564 206f7420 65646f63 0000002e     ders to code....
    6df4:	6e617247 65432064 6172746e 6148206c     Grand Central Ha
    6e04:	54206b63 50206568 656e616c 00000074     ck The Planet...
    6e14:	69466957 20736920 20746f6e 65726977     WiFi is not wire
    6e24:	7373656c 68744520 656e7265 00002174     less Ethernet!..
    6e34:	65766153 65687420 616c7020 2c74656e     Save the planet,
    6e44:	726f7420 61206863 73616720 61747320      torch a gas sta
    6e54:	6e6f6974 00000000 694e2041 54206563     tion....A Nice T
    6e64:	202e5954 4f206e41 6f43204b 7475706d     TY. An OK Comput
    6e74:	002e7265 65545355 6964656c 6e6f646c     er..USTeledildon
    6e84:	00736369 696c6f53 69726164 69207974     ics.Solidarity i
    6e94:	6f6e2073 20612074 2077656e 6d617266     s not a new fram
    6ea4:	726f7765 0000006b 61657242 616f6264     ework...Breadboa
    6eb4:	6e696472 73492067 746f4e20 43204120     rding Is Not A C
    6ec4:	656d6972 00000000 2066664f 6f207962     rime....Off by o
    6ed4:	6520656e 726f7272 72612073 6f632065     ne errors are co
    6ee4:	6e6f6d6d 00000000 0000225e 000024aa     mmon....^"...$..
    6ef4:	000024aa 000024aa 000024aa 000024aa     .$...$...$...$..
    6f04:	000024aa 000024aa 000024aa 000024aa     .$...$...$...$..
    6f14:	000024aa 000024aa 000024aa 000024aa     .$...$...$...$..
    6f24:	000024aa 000024aa 00002246 000024aa     .$...$..F"...$..
    6f34:	000024aa 000024aa 000024aa 000024aa     .$...$...$...$..
    6f44:	000024aa 000024aa 000024aa 000024aa     .$...$...$...$..
    6f54:	000024aa 000024aa 000024aa 000024aa     .$...$...$...$..
    6f64:	000024aa 000024aa 00002256 000024aa     .$...$..V"...$..
    6f74:	000024aa 000024aa 000024aa 000024aa     .$...$...$...$..
    6f84:	000024aa 000024aa 000024aa 000024aa     .$...$...$...$..
    6f94:	000024aa 000024aa 000024aa 000024aa     .$...$...$...$..
    6fa4:	000024aa 000024aa 0000224e 00002266     .$...$..N"..f"..
    6fb4:	0000222e 0000223e 00002236 00000002     ."..>"..6"......
    6fc4:	00000003 00000028 00000029 00000004     ....(...).......
    6fd4:	00000005 00000006 00000007 00000020     ............ ...
    6fe4:	00000021 00000022 00000023 00000024     !..."...#...$...
    6ff4:	00000025 00000026 00000027 00000008     %...&...'.......
    7004:	00000009 0000000a 0000000b 42000800     ...............B
    7014:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    7024:	42001c00 00002fe2 00002fde 00002fde     ...B./.../.../..
    7034:	00003044 00003044 00002ff6 00002fe8     D0..D0.../.../..
    7044:	00002ffc 00003032 00003204 000031e4     ./..20...2...1..
    7054:	000031e4 00003270 000031f6 00003212     .1..p2...1...2..
    7064:	000031e8 00003220 00003260              .1.. 2..`2..

00007070 <CodePage437>:
	...
    73a8:	01000000 06186080 18608001 60800106     .....`....`....`
    73b8:	80010000 00000060 00000000 66986106     ....`........a.f
    73c8:	98618619 00000000 00000000 00000000     ..a.............
    73d8:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    73e8:	1966fefb 00986186 00000000 80010000     ..f..a..........
    73f8:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    7408:	00000000 04000000 29a60823 1820c106     ........#..).. .
    7418:	98200304 324c1165 00000008 00000000     .. .e.L2........
    7428:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    7438:	0000f6d9 00000000 30c00000 00030618     ...........0....
    7448:	000000c0 00000000 00000000 00000000     ................
    7458:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    7468:	10400002 00000000 01000000 02084000     ..@..........@..
    7478:	06186000 18608001 00010208 00000040     .`....`.....@...
    7488:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    7498:	80104290 00000000 00000000 00000000     .B..............
    74a8:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    74c8:	18000000 c0000306 00001040 00000000     ........@.......
    74d8:	00000000 ff000000 0000e0bf 00000000     ................
	...
    74fc:	030e3800 0000e080 00000000 08200000     .8............ .
    750c:	80000104 02041020 10408000 00000208     .... .....@.....
    751c:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    752c:	63061b6c f8e0c318 00000000 00000000     l..c............
    753c:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    754c:	000000f8 00000000 c1f8e107 061860b0     .............`..
    755c:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    756c:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    757c:	00f8e167 00000000 40000000 03070c30     g..........@0...
    758c:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    759c:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    75ac:	e167a081 000000f8 00000000 60f8e003     ..g............`
    75bc:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    75cc:	00000000 fefb0f00 20608001 00010408     ..........` ....
    75dc:	0c302080 00c00003 00000000 e0030000     . 0.............
    75ec:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    75fc:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    760c:	0618609f e1c70003 000000f0 00000000     .`..............
    761c:	38000000 e080030e 00000000 030e3800     ...8.........8..
    762c:	0000e080 00000000 00000000 80030e38     ............8...
    763c:	000000e0 0e380000 40c00003 00000010     ......8....@....
    764c:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    765c:	0c300003 00000000 00000000 00000000     ..0.............
    766c:	00fefb0f fefb0f00 00000000 00000000     ................
    767c:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    768c:	0c0c3030 00000003 00000000 f8e10700     00..............
    769c:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    76ac:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    76bc:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    76cc:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    76dc:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    76ec:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    76fc:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    770c:	00f8e063 00000000 c30f0000 861966f0     c............f..
    771c:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    772c:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    773c:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    774c:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    775c:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    776c:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    777c:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    778c:	00000000 07000000 0618f8e1 18608001     ..............`.
    779c:	60800106 e1070618 000000f8 00000000     ...`............
    77ac:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    77bc:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    77cc:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    77dc:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    77ec:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    77fc:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    780c:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    781c:	ecb0c31e 0000061b 00000000 f8e00300     ................
    782c:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    783c:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    784c:	c000038c 00030c30 00000000 07000000     ....0...........
    785c:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    786c:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    787c:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    788c:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    789c:	00f8e167 00000000 fb0f0000 000208fe     g...............
    78ac:	02082080 08208000 20800002 00000000     . .... .... ....
    78bc:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    78cc:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    78dc:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    78ec:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    78fc:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    790c:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    791c:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    792c:	20c00107 80000208 00000020 00000000     ... .... .......
    793c:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    794c:	0000fefb 00000000 f8e00300 00030c30     ............0...
    795c:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    796c:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    797c:	0618c000 00000000 07000000 030cf0c1     ................
    798c:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    799c:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    79c8:	00fefb0f 00000000 80030000 00030ce0     ................
    79d8:	00001860 00000000 00000000 00000000     `...............
	...
    79f0:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    7a00:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    7a10:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    7a20:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    7a30:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    7a40:	c3061bec f6d9e7b0 00000000 00000000     ................
    7a50:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    7a60:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    7a70:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    7a80:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    7a90:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    7aa0:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    7ab0:	01000000 00006080 18e08003 60800106     .....`.........`
    7ac0:	e1070618 000000f8 00000000 00186000     .............`..
    7ad0:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    7ae0:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    7af0:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    7b00:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    7b1c:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    7b34:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    7b4c:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    7b64:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    7b74:	02082080 00000000 00000000 c1fae803     . ..............
    7b84:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    7b94:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    7ba4:	00000003 00000000 00000000 e1070000     ................
    7bb4:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    7bc4:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    7bd4:	30c0c00c 00000000 00000000 00000000     ...0............
    7be4:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    7bfc:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    7c14:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    7c2c:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    7c48:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    7c58:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    7c68:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    7c78:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    7c88:	00000000 80010000 01061860 06186080     ........`....`..
    7c98:	18608001 60800106 00000000 0f000000     ..`....`........
    7ca8:	0208c003 0cc00003 c0000303 030f0208     ................
    7cb8:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    7cf0:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    7d00:	f8e06398 00000608 00000000 00669801     .c............f.
    7d10:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    7d20:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    7d30:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    7d40:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    7d58:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    7d70:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    7d80:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    7d90:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    7da0:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    7db0:	04fef907 00000003 00000000 07001420     ............ ...
    7dc0:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    7dd0:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    7de0:	f10730c0 000000fc 00000000 18c00000     .0..............
    7df0:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    7e00:	00000000 98610600 80030000 010618e0     ......a.........
    7e10:	06186080 00f8e107 00000000 00000000     .`..............
    7e20:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    7e38:	0018c000 18e08003 60800106 e1070618     ...........`....
    7e48:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    7e58:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    7e68:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    7e78:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    7e88:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    7ea0:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    7eb0:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    7ec0:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    7ed0:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    7ee0:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    7ef0:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    7f00:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    7f10:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    7f20:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    7f30:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    7f40:	00f6d9c7 00000000 01000000 0c006698     .............f..
    7f50:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    7f60:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    7f70:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    7f80:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    7f90:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    7fa0:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    7fb0:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    7fc0:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    7fd0:	20e00302 80800f08 00000020 00000000     ... .... .......
    7fe0:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    7ff0:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    8000:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    8010:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    8020:	fef823b0 00000000 00000000 000060c0     .#...........`..
    8030:	18e08003 60800106 e1070618 000000f8     .......`........
    8040:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    8050:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    8060:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    8078:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    8088:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    8098:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    80a8:	1e08c003 00e08308 000080ff 00000000     ................
	...
    80c0:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    80dc:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    80ec:	00c00f3f 00000000 00000000 ff000000     ?...............
    80fc:	0003ecbf 00000000 00000000 00000000     ................
	...
    8114:	18e0bfff 00000006 00000000 00000000     ................
    8124:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    8134:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    8144:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    8154:	00000000 06180000 18000000 60800106     ...............`
    8164:	80010618 00061860 00000000 00000000     ....`...........
    8174:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    818c:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    819c:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    81ac:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    81bc:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    81cc:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    81dc:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    81ec:	20800002 80000208 00020820 02082080     ... .... .... ..
    81fc:	08208000 20800002 80000208 00020820     .. .... .... ...
    820c:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    821c:	00020820 02082080 f8208000 20800f02      .... .... .... 
    822c:	80000208 00020820 05142080 14504001     .... .... ...@P.
    823c:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    824c:	00504001 00000000 00000000 013f0000     .@P...........?.
    825c:	05145040 14504001 50400105 00000000     @P...@P...@P....
    826c:	00000000 02f80000 0820800f 20800002     .......... .... 
    827c:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    828c:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    829c:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    82ac:	05145040 00504001 00000000 00000000     @P...@P.........
    82bc:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    82cc:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    82e4:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    82fc:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    8320:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    8330:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    8348:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    836c:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    837c:	20800002 80000208 f0030820 02082080     ... .... .... ..
    838c:	08208000 20800002 00000000 00000000     .. .... ........
    839c:	3f000000 000000f0 00000000 00000000     ...?............
    83ac:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    83bc:	80000208 00020820 02082080 08208000     .... .... .... .
    83cc:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    83dc:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    83ec:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    83fc:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    8418:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    8428:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    844c:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    845c:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    846c:	50400105 40010514 00000050 00000000     ..@P...@P.......
    847c:	ff000000 00fc0fc0 00000000 00000000     ................
    848c:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    849c:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    84ac:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    84bc:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    84cc:	000000f0 00000000 00000000 00000000     ................
    84dc:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    84ec:	00020820 00002080 00000000 00000000      .... ..........
    84fc:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    850c:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    8524:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    8544:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    8554:	00002080 00000000 00000000 40f10700     . .............@
    8564:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    8574:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    8584:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    8594:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    85a4:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    85c4:	80f00300 00020820 02082080 ff208000     .... .... .... .
    85d4:	ffffffff ffffffff ffffffff ffffffff     ................
    85e4:	ffffffff ffffffff 00000000 00000000     ................
    85f4:	3f000000 ffffffff ffffffff ffffffff     ...?............
    8604:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    8614:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    8624:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    8634:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    8658:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    8668:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    8678:	63c61861 000000f8 00000000 ff000000     a..c............
    8688:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    86a4:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    86b4:	fb0f0000 06b080fe 0618c000 c0800103     ................
    86c4:	fefb2f20 00000000 00000000 00000000      /..............
    86d4:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    86ec:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    86fc:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    870c:	06186080 00608001 00000000 00000000     .`....`.........
    871c:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    872c:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    873c:	061becbf e0c31863 000000f8 00000000     ....c...........
    874c:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    875c:	00008e33 00000000 fef80300 e1070318     3...............
    876c:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    877c:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    878c:	00204295 00000000 00000000 07000000     .B .............
    879c:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    87ac:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    87bc:	03186000 0000f8e0 00000000 00000000     .`..............
    87cc:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    87dc:	000060b0 00000000 0f000000 0000fefb     .`..............
    87ec:	00fefb0f fefb0f00 00000000 00000000     ................
    87fc:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    880c:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    881c:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    882c:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    883c:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    884c:	02082080 08208000 20800002 80000208     . .... .... ....
    885c:	00020820 02082080 08208000 20800002      .... .... .... 
    886c:	80000208 09240820 00008001 18000000     .... .$.........
    887c:	00000006 00e0bfff 00061800 00000000     ................
	...
    8894:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    88ac:	01092460 00000080 00000000 00000000     `$..............
	...
    88d0:	80030e38 00000000 00000000 00000000     8...............
	...
    88e8:	01000000 00006080 00000000 0f000000     .....`..........
    88f8:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    8908:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    8924:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    8948:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    8970:	0009001b 67753700 71312c6a 38000000     .....7ugj,1q...8
    8980:	006b6869 7a007732 6f303900 65332e6c     ihk.2w.z.90ol.3e
    8990:	00007861 2f3b702d 63737234 5b3d0020     ax..-p;/4rsc .=[
    89a0:	74350027 006e7664 5c0d5d27 62667936     '.5tdvn.'].\6yfb
    89b0:	0008006d 00000a7f 0009001b 47552600     m............&UG
    89c0:	51213c4a 2a000000 004b4849 5a005740     J<!Q...*IHK.@W.Z
    89d0:	4f292800 45233e4c 00005841 3f3a505f     .()OL>#EAX.._P:?
    89e0:	43535224 7b2b0020 54250022 004e5644     $RSC .+{".%TDVN.
    89f0:	7c0d7d7e 4246595e 0008004d 00000a7f     ~}.|^YFBM.......
    8a00:	0009001b 47553700 51312c4a 38000000     .....7UGJ,1Q...8
    8a10:	004b4849 5a005732 4f303900 45332e4c     IHK.2W.Z.90OL.3E
    8a20:	00005841 2f3b502d 43535234 5b3d0020     AX..-P;/4RSC .=[
    8a30:	54350027 004e5644 5c0d5d27 42465936     '.5TDVN.'].\6YFB
    8a40:	0008004d 00000a7f 0009001b 07150000     M...............
    8a50:	1100000a 00000000 000b0809 1a001700     ................
    8a60:	0f000000 0500000a 00001801 1f001000     ................
    8a70:	03131200 1b000000 14000000 000e1604     ................
    8a80:	1c001d1e 02061900 0008000d 00000a00     ................

00008a90 <kb_col>:
    8a90:	00010000 00020000 00040000 00080000     ................
    8aa0:	00100000 00200000 08000000              ...... .....

00008aac <kb_col_index>:
    8aac:	00000010 00000011 00000012 00000013     ................
    8abc:	00000014 00000015 0000001b              ............

00008ac8 <kb_row>:
    8ac8:	00000004 00000008 00000010 00000020     ............ ...
    8ad8:	00000040 00000080 00000400 00000800     @...............
    8ae8:	00001000 00002000                       ..... ..

00008af0 <kb_row_index>:
    8af0:	00000002 00000003 00000004 00000005     ................
    8b00:	00000006 00000007 0000000a 0000000b     ................
    8b10:	0000000c 0000000d                       ........

00008b18 <beelzebub.12968>:
    8b18:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    8b28:	64012201 d4019201 08020702 5f023402     .".d.........4._
    8b38:	94027802 bb02a602 db02ca02 f902e802     .x..............
    8b48:	7f031f03                                ....

00008b4c <belial.12965>:
    8b4c:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    8b5c:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    8b6c:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    8b7c:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    8b8c:	35c9c9c9 0000363a                       ...5:6..

00008b94 <lucifer.12967>:
    8b94:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    8ba4:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    8bb4:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    8bc4:	00cc0008 01707005 02030303 02d00000     .....pp.........
    8bd4:	00505050 00000055                       PPP.U...

00008bdc <mulciber.12966>:
    8bdc:	03020100 02010004 00020100 01000201     ................
    8bec:	02010002 00020100 01000201 01000002     ................
    8bfc:	02010000 00020100 01000201 03020100     ................
    8c0c:	00000004 01000100 01000302 02010002     ................
    8c1c:	00000403 00000000 65530d0a 6c616972     ..........Serial
    8c2c:	204b4f20 30303639 314e3820 00000d0a      OK 9600 8N1....

00008c3c <_global_impure_ptr>:
    8c3c:	200001b0 33323130 37363534 62613938     ... 0123456789ab
    8c4c:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
    8c5c:	76757473 7a797877 00000000              stuvwxyz....

00008c68 <__sf_fake_stderr>:
	...

00008c88 <__sf_fake_stdin>:
	...

00008ca8 <__sf_fake_stdout>:
	...
    8cc8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8cd8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8ce8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8cf8:	00006665                                ef..

00008cfc <_init>:
    8cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cfe:	46c0      	nop			; (mov r8, r8)
    8d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8d02:	bc08      	pop	{r3}
    8d04:	469e      	mov	lr, r3
    8d06:	4770      	bx	lr

00008d08 <__init_array_start>:
    8d08:	000000dd 	.word	0x000000dd

00008d0c <_fini>:
    8d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d0e:	46c0      	nop			; (mov r8, r8)
    8d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8d12:	bc08      	pop	{r3}
    8d14:	469e      	mov	lr, r3
    8d16:	4770      	bx	lr

00008d18 <__fini_array_start>:
    8d18:	000000b5 	.word	0x000000b5
