
GccBoardProject4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00000aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  2000000c  00000ab8  0002000c  2**2
                  ALLOC
  3 .stack        00002000  20000048  00000af4  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fdad  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d12  00000000  00000000  0002fe3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001acd  00000000  00000000  00031b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000250  00000000  00000000  00033619  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000210  00000000  00000000  00033869  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018384  00000000  00000000  00033a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000643a  00000000  00000000  0004bdfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b9b0  00000000  00000000  00052237  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000534  00000000  00000000  000ddbe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	48 20 00 20 c1 07 00 00 bd 07 00 00 bd 07 00 00     H . ............
	...
  2c:	bd 07 00 00 00 00 00 00 00 00 00 00 bd 07 00 00     ................
  3c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
  4c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
  5c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
  6c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
  7c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
  8c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
  9c:	bd 07 00 00 bd 07 00 00 bd 07 00 00 bd 07 00 00     ................
  ac:	bd 07 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	2000000c 	.word	0x2000000c
  d4:	00000000 	.word	0x00000000
  d8:	00000aac 	.word	0x00000aac

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000010 	.word	0x20000010
 108:	00000aac 	.word	0x00000aac
 10c:	00000aac 	.word	0x00000aac
 110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
 114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
 116:	2000      	movs	r0, #0
 118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
 11a:	4798      	blx	r3
 11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
 11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
 120:	21fa      	movs	r1, #250	; 0xfa
 122:	0089      	lsls	r1, r1, #2
 124:	47a0      	blx	r4
 126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
 128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
 12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
 12c:	0028      	movs	r0, r5
 12e:	47a0      	blx	r4
 130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
 132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 134:	2205      	movs	r2, #5
 136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
 138:	601a      	str	r2, [r3, #0]
}
 13a:	bd70      	pop	{r4, r5, r6, pc}
 13c:	0000057d 	.word	0x0000057d
 140:	000008e5 	.word	0x000008e5
 144:	20000000 	.word	0x20000000
 148:	000f4240 	.word	0x000f4240
 14c:	20000004 	.word	0x20000004
 150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
 154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
 156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
 158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
 15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
 15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 15e:	2180      	movs	r1, #128	; 0x80
 160:	0249      	lsls	r1, r1, #9
	while (n--) {
 162:	3801      	subs	r0, #1
 164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
 166:	2c00      	cmp	r4, #0
 168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
 16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
 16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 16e:	6813      	ldr	r3, [r2, #0]
 170:	420b      	tst	r3, r1
 172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
 174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
 176:	bd30      	pop	{r4, r5, pc}
 178:	20000000 	.word	0x20000000
 17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
 180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
 182:	681b      	ldr	r3, [r3, #0]
 184:	2b00      	cmp	r3, #0
 186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
 18c:	2b00      	cmp	r3, #0
 18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 190:	2200      	movs	r2, #0
 192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
 194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
 198:	6813      	ldr	r3, [r2, #0]
 19a:	3301      	adds	r3, #1
 19c:	6013      	str	r3, [r2, #0]
}
 19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 1a0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 1a6:	2200      	movs	r2, #0
 1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
 1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 1ac:	3201      	adds	r2, #1
 1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
 1b0:	701a      	strb	r2, [r3, #0]
 1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
 1b4:	20000028 	.word	0x20000028
 1b8:	2000002c 	.word	0x2000002c
 1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
 1c2:	681a      	ldr	r2, [r3, #0]
 1c4:	3a01      	subs	r2, #1
 1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 1c8:	681b      	ldr	r3, [r3, #0]
 1ca:	2b00      	cmp	r3, #0
 1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
 1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
 1d0:	781b      	ldrb	r3, [r3, #0]
 1d2:	2b00      	cmp	r3, #0
 1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
 1d6:	2201      	movs	r2, #1
 1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
 1da:	701a      	strb	r2, [r3, #0]
 1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 1e0:	b662      	cpsie	i
	}
}
 1e2:	4770      	bx	lr
 1e4:	20000028 	.word	0x20000028
 1e8:	2000002c 	.word	0x2000002c
 1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
 1f4:	ac01      	add	r4, sp, #4
 1f6:	2501      	movs	r5, #1
 1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
 1fa:	2700      	movs	r7, #0
 1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 200:	0021      	movs	r1, r4
 202:	203e      	movs	r0, #62	; 0x3e
 204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
 206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
 208:	2280      	movs	r2, #128	; 0x80
 20a:	05d2      	lsls	r2, r2, #23
 20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
 20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 214:	0021      	movs	r1, r4
 216:	200f      	movs	r0, #15
 218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
 21a:	b003      	add	sp, #12
 21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 21e:	46c0      	nop			; (mov r8, r8)
 220:	00000229 	.word	0x00000229
 224:	41004480 	.word	0x41004480

00000228 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 228:	b500      	push	{lr}
 22a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
 22c:	ab01      	add	r3, sp, #4
 22e:	2280      	movs	r2, #128	; 0x80
 230:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 232:	780a      	ldrb	r2, [r1, #0]
 234:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 236:	784a      	ldrb	r2, [r1, #1]
 238:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 23a:	788a      	ldrb	r2, [r1, #2]
 23c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 23e:	0019      	movs	r1, r3
 240:	4b01      	ldr	r3, [pc, #4]	; (248 <port_pin_set_config+0x20>)
 242:	4798      	blx	r3
}
 244:	b003      	add	sp, #12
 246:	bd00      	pop	{pc}
 248:	0000075d 	.word	0x0000075d

0000024c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
 24c:	b510      	push	{r4, lr}
	switch (clock_source) {
 24e:	2808      	cmp	r0, #8
 250:	d803      	bhi.n	25a <system_clock_source_get_hz+0xe>
 252:	0080      	lsls	r0, r0, #2
 254:	4b1c      	ldr	r3, [pc, #112]	; (2c8 <system_clock_source_get_hz+0x7c>)
 256:	581b      	ldr	r3, [r3, r0]
 258:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
 25a:	2000      	movs	r0, #0
 25c:	e032      	b.n	2c4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
 25e:	4b1b      	ldr	r3, [pc, #108]	; (2cc <system_clock_source_get_hz+0x80>)
 260:	6918      	ldr	r0, [r3, #16]
 262:	e02f      	b.n	2c4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
 264:	4b1a      	ldr	r3, [pc, #104]	; (2d0 <system_clock_source_get_hz+0x84>)
 266:	6a1b      	ldr	r3, [r3, #32]
 268:	059b      	lsls	r3, r3, #22
 26a:	0f9b      	lsrs	r3, r3, #30
 26c:	4819      	ldr	r0, [pc, #100]	; (2d4 <system_clock_source_get_hz+0x88>)
 26e:	40d8      	lsrs	r0, r3
 270:	e028      	b.n	2c4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
 272:	4b16      	ldr	r3, [pc, #88]	; (2cc <system_clock_source_get_hz+0x80>)
 274:	6958      	ldr	r0, [r3, #20]
 276:	e025      	b.n	2c4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 278:	4b14      	ldr	r3, [pc, #80]	; (2cc <system_clock_source_get_hz+0x80>)
 27a:	681b      	ldr	r3, [r3, #0]
			return 0;
 27c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
 27e:	079b      	lsls	r3, r3, #30
 280:	d520      	bpl.n	2c4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 282:	4913      	ldr	r1, [pc, #76]	; (2d0 <system_clock_source_get_hz+0x84>)
 284:	2210      	movs	r2, #16
 286:	68cb      	ldr	r3, [r1, #12]
 288:	421a      	tst	r2, r3
 28a:	d0fc      	beq.n	286 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
 28c:	4b0f      	ldr	r3, [pc, #60]	; (2cc <system_clock_source_get_hz+0x80>)
 28e:	681a      	ldr	r2, [r3, #0]
 290:	2324      	movs	r3, #36	; 0x24
 292:	4013      	ands	r3, r2
 294:	2b04      	cmp	r3, #4
 296:	d001      	beq.n	29c <system_clock_source_get_hz+0x50>
			return 48000000UL;
 298:	480f      	ldr	r0, [pc, #60]	; (2d8 <system_clock_source_get_hz+0x8c>)
 29a:	e013      	b.n	2c4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 29c:	2000      	movs	r0, #0
 29e:	4b0f      	ldr	r3, [pc, #60]	; (2dc <system_clock_source_get_hz+0x90>)
 2a0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
 2a2:	4b0a      	ldr	r3, [pc, #40]	; (2cc <system_clock_source_get_hz+0x80>)
 2a4:	689b      	ldr	r3, [r3, #8]
 2a6:	041b      	lsls	r3, r3, #16
 2a8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
 2aa:	4358      	muls	r0, r3
 2ac:	e00a      	b.n	2c4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
 2ae:	2350      	movs	r3, #80	; 0x50
 2b0:	4a07      	ldr	r2, [pc, #28]	; (2d0 <system_clock_source_get_hz+0x84>)
 2b2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
 2b4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
 2b6:	075b      	lsls	r3, r3, #29
 2b8:	d504      	bpl.n	2c4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
 2ba:	4b04      	ldr	r3, [pc, #16]	; (2cc <system_clock_source_get_hz+0x80>)
 2bc:	68d8      	ldr	r0, [r3, #12]
 2be:	e001      	b.n	2c4 <system_clock_source_get_hz+0x78>
		return 32768UL;
 2c0:	2080      	movs	r0, #128	; 0x80
 2c2:	0200      	lsls	r0, r0, #8
	}
}
 2c4:	bd10      	pop	{r4, pc}
 2c6:	46c0      	nop			; (mov r8, r8)
 2c8:	00000a44 	.word	0x00000a44
 2cc:	20000030 	.word	0x20000030
 2d0:	40000800 	.word	0x40000800
 2d4:	007a1200 	.word	0x007a1200
 2d8:	02dc6c00 	.word	0x02dc6c00
 2dc:	00000681 	.word	0x00000681

000002e0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 2e0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 2e2:	490c      	ldr	r1, [pc, #48]	; (314 <system_clock_source_osc8m_set_config+0x34>)
 2e4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 2e6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
 2e8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
 2ea:	7840      	ldrb	r0, [r0, #1]
 2ec:	2201      	movs	r2, #1
 2ee:	4010      	ands	r0, r2
 2f0:	0180      	lsls	r0, r0, #6
 2f2:	2640      	movs	r6, #64	; 0x40
 2f4:	43b3      	bics	r3, r6
 2f6:	4303      	orrs	r3, r0
 2f8:	402a      	ands	r2, r5
 2fa:	01d2      	lsls	r2, r2, #7
 2fc:	2080      	movs	r0, #128	; 0x80
 2fe:	4383      	bics	r3, r0
 300:	4313      	orrs	r3, r2
 302:	2203      	movs	r2, #3
 304:	4022      	ands	r2, r4
 306:	0212      	lsls	r2, r2, #8
 308:	4803      	ldr	r0, [pc, #12]	; (318 <system_clock_source_osc8m_set_config+0x38>)
 30a:	4003      	ands	r3, r0
 30c:	4313      	orrs	r3, r2
 30e:	620b      	str	r3, [r1, #32]
}
 310:	bd70      	pop	{r4, r5, r6, pc}
 312:	46c0      	nop			; (mov r8, r8)
 314:	40000800 	.word	0x40000800
 318:	fffffcff 	.word	0xfffffcff

0000031c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
 31c:	2808      	cmp	r0, #8
 31e:	d803      	bhi.n	328 <system_clock_source_enable+0xc>
 320:	0080      	lsls	r0, r0, #2
 322:	4b25      	ldr	r3, [pc, #148]	; (3b8 <system_clock_source_enable+0x9c>)
 324:	581b      	ldr	r3, [r3, r0]
 326:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 328:	2017      	movs	r0, #23
 32a:	e044      	b.n	3b6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 32c:	4a23      	ldr	r2, [pc, #140]	; (3bc <system_clock_source_enable+0xa0>)
 32e:	6a13      	ldr	r3, [r2, #32]
 330:	2102      	movs	r1, #2
 332:	430b      	orrs	r3, r1
 334:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
 336:	2000      	movs	r0, #0
 338:	e03d      	b.n	3b6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 33a:	4a20      	ldr	r2, [pc, #128]	; (3bc <system_clock_source_enable+0xa0>)
 33c:	6993      	ldr	r3, [r2, #24]
 33e:	2102      	movs	r1, #2
 340:	430b      	orrs	r3, r1
 342:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
 344:	2000      	movs	r0, #0
		break;
 346:	e036      	b.n	3b6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 348:	4a1c      	ldr	r2, [pc, #112]	; (3bc <system_clock_source_enable+0xa0>)
 34a:	8a13      	ldrh	r3, [r2, #16]
 34c:	2102      	movs	r1, #2
 34e:	430b      	orrs	r3, r1
 350:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
 352:	2000      	movs	r0, #0
		break;
 354:	e02f      	b.n	3b6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 356:	4a19      	ldr	r2, [pc, #100]	; (3bc <system_clock_source_enable+0xa0>)
 358:	8a93      	ldrh	r3, [r2, #20]
 35a:	2102      	movs	r1, #2
 35c:	430b      	orrs	r3, r1
 35e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
 360:	2000      	movs	r0, #0
		break;
 362:	e028      	b.n	3b6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 364:	4916      	ldr	r1, [pc, #88]	; (3c0 <system_clock_source_enable+0xa4>)
 366:	680b      	ldr	r3, [r1, #0]
 368:	2202      	movs	r2, #2
 36a:	4313      	orrs	r3, r2
 36c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 36e:	4b13      	ldr	r3, [pc, #76]	; (3bc <system_clock_source_enable+0xa0>)
 370:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 372:	0019      	movs	r1, r3
 374:	320e      	adds	r2, #14
 376:	68cb      	ldr	r3, [r1, #12]
 378:	421a      	tst	r2, r3
 37a:	d0fc      	beq.n	376 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 37c:	4a10      	ldr	r2, [pc, #64]	; (3c0 <system_clock_source_enable+0xa4>)
 37e:	6891      	ldr	r1, [r2, #8]
 380:	4b0e      	ldr	r3, [pc, #56]	; (3bc <system_clock_source_enable+0xa0>)
 382:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 384:	6852      	ldr	r2, [r2, #4]
 386:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
 388:	2200      	movs	r2, #0
 38a:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 38c:	0019      	movs	r1, r3
 38e:	3210      	adds	r2, #16
 390:	68cb      	ldr	r3, [r1, #12]
 392:	421a      	tst	r2, r3
 394:	d0fc      	beq.n	390 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 396:	4b0a      	ldr	r3, [pc, #40]	; (3c0 <system_clock_source_enable+0xa4>)
 398:	681b      	ldr	r3, [r3, #0]
 39a:	b29b      	uxth	r3, r3
 39c:	4a07      	ldr	r2, [pc, #28]	; (3bc <system_clock_source_enable+0xa0>)
 39e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
 3a0:	2000      	movs	r0, #0
 3a2:	e008      	b.n	3b6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 3a4:	4905      	ldr	r1, [pc, #20]	; (3bc <system_clock_source_enable+0xa0>)
 3a6:	2244      	movs	r2, #68	; 0x44
 3a8:	5c8b      	ldrb	r3, [r1, r2]
 3aa:	2002      	movs	r0, #2
 3ac:	4303      	orrs	r3, r0
 3ae:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
 3b0:	2000      	movs	r0, #0
		break;
 3b2:	e000      	b.n	3b6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
 3b4:	2000      	movs	r0, #0
}
 3b6:	4770      	bx	lr
 3b8:	00000a68 	.word	0x00000a68
 3bc:	40000800 	.word	0x40000800
 3c0:	20000030 	.word	0x20000030

000003c4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 3c4:	b530      	push	{r4, r5, lr}
 3c6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 3c8:	22c2      	movs	r2, #194	; 0xc2
 3ca:	00d2      	lsls	r2, r2, #3
 3cc:	4b1a      	ldr	r3, [pc, #104]	; (438 <system_clock_init+0x74>)
 3ce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 3d0:	4a1a      	ldr	r2, [pc, #104]	; (43c <system_clock_init+0x78>)
 3d2:	6853      	ldr	r3, [r2, #4]
 3d4:	211e      	movs	r1, #30
 3d6:	438b      	bics	r3, r1
 3d8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 3da:	2301      	movs	r3, #1
 3dc:	466a      	mov	r2, sp
 3de:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 3e0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 3e2:	4d17      	ldr	r5, [pc, #92]	; (440 <system_clock_init+0x7c>)
 3e4:	b2e0      	uxtb	r0, r4
 3e6:	4669      	mov	r1, sp
 3e8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 3ea:	3401      	adds	r4, #1
 3ec:	2c25      	cmp	r4, #37	; 0x25
 3ee:	d1f9      	bne.n	3e4 <system_clock_init+0x20>
	config->run_in_standby  = false;
 3f0:	a803      	add	r0, sp, #12
 3f2:	2400      	movs	r4, #0
 3f4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
 3f6:	2501      	movs	r5, #1
 3f8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 3fa:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
 3fc:	4b11      	ldr	r3, [pc, #68]	; (444 <system_clock_init+0x80>)
 3fe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 400:	2006      	movs	r0, #6
 402:	4b11      	ldr	r3, [pc, #68]	; (448 <system_clock_init+0x84>)
 404:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 406:	4b11      	ldr	r3, [pc, #68]	; (44c <system_clock_init+0x88>)
 408:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
 40a:	4b11      	ldr	r3, [pc, #68]	; (450 <system_clock_init+0x8c>)
 40c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
 40e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
 410:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
 412:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 414:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
 416:	466b      	mov	r3, sp
 418:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 41a:	2306      	movs	r3, #6
 41c:	466a      	mov	r2, sp
 41e:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
 420:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
 422:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 424:	4669      	mov	r1, sp
 426:	2000      	movs	r0, #0
 428:	4b0a      	ldr	r3, [pc, #40]	; (454 <system_clock_init+0x90>)
 42a:	4798      	blx	r3
 42c:	2000      	movs	r0, #0
 42e:	4b0a      	ldr	r3, [pc, #40]	; (458 <system_clock_init+0x94>)
 430:	4798      	blx	r3
#endif
}
 432:	b005      	add	sp, #20
 434:	bd30      	pop	{r4, r5, pc}
 436:	46c0      	nop			; (mov r8, r8)
 438:	40000800 	.word	0x40000800
 43c:	41004000 	.word	0x41004000
 440:	00000665 	.word	0x00000665
 444:	000002e1 	.word	0x000002e1
 448:	0000031d 	.word	0x0000031d
 44c:	0000045d 	.word	0x0000045d
 450:	40000400 	.word	0x40000400
 454:	00000481 	.word	0x00000481
 458:	00000539 	.word	0x00000539

0000045c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
 45c:	4a06      	ldr	r2, [pc, #24]	; (478 <system_gclk_init+0x1c>)
 45e:	6993      	ldr	r3, [r2, #24]
 460:	2108      	movs	r1, #8
 462:	430b      	orrs	r3, r1
 464:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 466:	2201      	movs	r2, #1
 468:	4b04      	ldr	r3, [pc, #16]	; (47c <system_gclk_init+0x20>)
 46a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 46c:	0019      	movs	r1, r3
 46e:	780b      	ldrb	r3, [r1, #0]
 470:	4213      	tst	r3, r2
 472:	d1fc      	bne.n	46e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
 474:	4770      	bx	lr
 476:	46c0      	nop			; (mov r8, r8)
 478:	40000400 	.word	0x40000400
 47c:	40000c00 	.word	0x40000c00

00000480 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 480:	b570      	push	{r4, r5, r6, lr}
 482:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 484:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 486:	780d      	ldrb	r5, [r1, #0]
 488:	022d      	lsls	r5, r5, #8
 48a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 48c:	784b      	ldrb	r3, [r1, #1]
 48e:	2b00      	cmp	r3, #0
 490:	d002      	beq.n	498 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 492:	2380      	movs	r3, #128	; 0x80
 494:	02db      	lsls	r3, r3, #11
 496:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 498:	7a4b      	ldrb	r3, [r1, #9]
 49a:	2b00      	cmp	r3, #0
 49c:	d002      	beq.n	4a4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 49e:	2380      	movs	r3, #128	; 0x80
 4a0:	031b      	lsls	r3, r3, #12
 4a2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 4a4:	6848      	ldr	r0, [r1, #4]
 4a6:	2801      	cmp	r0, #1
 4a8:	d910      	bls.n	4cc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 4aa:	1e43      	subs	r3, r0, #1
 4ac:	4218      	tst	r0, r3
 4ae:	d134      	bne.n	51a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 4b0:	2802      	cmp	r0, #2
 4b2:	d930      	bls.n	516 <system_gclk_gen_set_config+0x96>
 4b4:	2302      	movs	r3, #2
 4b6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
 4b8:	3201      	adds	r2, #1
						mask <<= 1) {
 4ba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
 4bc:	4298      	cmp	r0, r3
 4be:	d8fb      	bhi.n	4b8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 4c0:	0212      	lsls	r2, r2, #8
 4c2:	4332      	orrs	r2, r6
 4c4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 4c6:	2380      	movs	r3, #128	; 0x80
 4c8:	035b      	lsls	r3, r3, #13
 4ca:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 4cc:	7a0b      	ldrb	r3, [r1, #8]
 4ce:	2b00      	cmp	r3, #0
 4d0:	d002      	beq.n	4d8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 4d2:	2380      	movs	r3, #128	; 0x80
 4d4:	039b      	lsls	r3, r3, #14
 4d6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4d8:	4a13      	ldr	r2, [pc, #76]	; (528 <system_gclk_gen_set_config+0xa8>)
 4da:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
 4dc:	b25b      	sxtb	r3, r3
 4de:	2b00      	cmp	r3, #0
 4e0:	dbfb      	blt.n	4da <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
 4e2:	4b12      	ldr	r3, [pc, #72]	; (52c <system_gclk_gen_set_config+0xac>)
 4e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 4e6:	4b12      	ldr	r3, [pc, #72]	; (530 <system_gclk_gen_set_config+0xb0>)
 4e8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4ea:	4a0f      	ldr	r2, [pc, #60]	; (528 <system_gclk_gen_set_config+0xa8>)
 4ec:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 4ee:	b25b      	sxtb	r3, r3
 4f0:	2b00      	cmp	r3, #0
 4f2:	dbfb      	blt.n	4ec <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 4f4:	4b0c      	ldr	r3, [pc, #48]	; (528 <system_gclk_gen_set_config+0xa8>)
 4f6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 4f8:	001a      	movs	r2, r3
 4fa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
 4fc:	b25b      	sxtb	r3, r3
 4fe:	2b00      	cmp	r3, #0
 500:	dbfb      	blt.n	4fa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 502:	4a09      	ldr	r2, [pc, #36]	; (528 <system_gclk_gen_set_config+0xa8>)
 504:	6853      	ldr	r3, [r2, #4]
 506:	2180      	movs	r1, #128	; 0x80
 508:	0249      	lsls	r1, r1, #9
 50a:	400b      	ands	r3, r1
 50c:	431d      	orrs	r5, r3
 50e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
 510:	4b08      	ldr	r3, [pc, #32]	; (534 <system_gclk_gen_set_config+0xb4>)
 512:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 514:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
 516:	2200      	movs	r2, #0
 518:	e7d2      	b.n	4c0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 51a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
 51c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 51e:	2380      	movs	r3, #128	; 0x80
 520:	029b      	lsls	r3, r3, #10
 522:	431d      	orrs	r5, r3
 524:	e7d2      	b.n	4cc <system_gclk_gen_set_config+0x4c>
 526:	46c0      	nop			; (mov r8, r8)
 528:	40000c00 	.word	0x40000c00
 52c:	00000181 	.word	0x00000181
 530:	40000c08 	.word	0x40000c08
 534:	000001c1 	.word	0x000001c1

00000538 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 538:	b510      	push	{r4, lr}
 53a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 53c:	4a0b      	ldr	r2, [pc, #44]	; (56c <system_gclk_gen_enable+0x34>)
 53e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 540:	b25b      	sxtb	r3, r3
 542:	2b00      	cmp	r3, #0
 544:	dbfb      	blt.n	53e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
 546:	4b0a      	ldr	r3, [pc, #40]	; (570 <system_gclk_gen_enable+0x38>)
 548:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 54a:	4b0a      	ldr	r3, [pc, #40]	; (574 <system_gclk_gen_enable+0x3c>)
 54c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 54e:	4a07      	ldr	r2, [pc, #28]	; (56c <system_gclk_gen_enable+0x34>)
 550:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 552:	b25b      	sxtb	r3, r3
 554:	2b00      	cmp	r3, #0
 556:	dbfb      	blt.n	550 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 558:	4a04      	ldr	r2, [pc, #16]	; (56c <system_gclk_gen_enable+0x34>)
 55a:	6851      	ldr	r1, [r2, #4]
 55c:	2380      	movs	r3, #128	; 0x80
 55e:	025b      	lsls	r3, r3, #9
 560:	430b      	orrs	r3, r1
 562:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
 564:	4b04      	ldr	r3, [pc, #16]	; (578 <system_gclk_gen_enable+0x40>)
 566:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 568:	bd10      	pop	{r4, pc}
 56a:	46c0      	nop			; (mov r8, r8)
 56c:	40000c00 	.word	0x40000c00
 570:	00000181 	.word	0x00000181
 574:	40000c04 	.word	0x40000c04
 578:	000001c1 	.word	0x000001c1

0000057c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
 57c:	b570      	push	{r4, r5, r6, lr}
 57e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 580:	4a1a      	ldr	r2, [pc, #104]	; (5ec <system_gclk_gen_get_hz+0x70>)
 582:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 584:	b25b      	sxtb	r3, r3
 586:	2b00      	cmp	r3, #0
 588:	dbfb      	blt.n	582 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
 58a:	4b19      	ldr	r3, [pc, #100]	; (5f0 <system_gclk_gen_get_hz+0x74>)
 58c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 58e:	4b19      	ldr	r3, [pc, #100]	; (5f4 <system_gclk_gen_get_hz+0x78>)
 590:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 592:	4a16      	ldr	r2, [pc, #88]	; (5ec <system_gclk_gen_get_hz+0x70>)
 594:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 596:	b25b      	sxtb	r3, r3
 598:	2b00      	cmp	r3, #0
 59a:	dbfb      	blt.n	594 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
 59c:	4e13      	ldr	r6, [pc, #76]	; (5ec <system_gclk_gen_get_hz+0x70>)
 59e:	6870      	ldr	r0, [r6, #4]
 5a0:	04c0      	lsls	r0, r0, #19
 5a2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
 5a4:	4b14      	ldr	r3, [pc, #80]	; (5f8 <system_gclk_gen_get_hz+0x7c>)
 5a6:	4798      	blx	r3
 5a8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 5aa:	4b12      	ldr	r3, [pc, #72]	; (5f4 <system_gclk_gen_get_hz+0x78>)
 5ac:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
 5ae:	6876      	ldr	r6, [r6, #4]
 5b0:	02f6      	lsls	r6, r6, #11
 5b2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 5b4:	4b11      	ldr	r3, [pc, #68]	; (5fc <system_gclk_gen_get_hz+0x80>)
 5b6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 5b8:	4a0c      	ldr	r2, [pc, #48]	; (5ec <system_gclk_gen_get_hz+0x70>)
 5ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
 5bc:	b25b      	sxtb	r3, r3
 5be:	2b00      	cmp	r3, #0
 5c0:	dbfb      	blt.n	5ba <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
 5c2:	4b0a      	ldr	r3, [pc, #40]	; (5ec <system_gclk_gen_get_hz+0x70>)
 5c4:	689c      	ldr	r4, [r3, #8]
 5c6:	0224      	lsls	r4, r4, #8
 5c8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
 5ca:	4b0d      	ldr	r3, [pc, #52]	; (600 <system_gclk_gen_get_hz+0x84>)
 5cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
 5ce:	2e00      	cmp	r6, #0
 5d0:	d107      	bne.n	5e2 <system_gclk_gen_get_hz+0x66>
 5d2:	2c01      	cmp	r4, #1
 5d4:	d907      	bls.n	5e6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
 5d6:	0021      	movs	r1, r4
 5d8:	0028      	movs	r0, r5
 5da:	4b0a      	ldr	r3, [pc, #40]	; (604 <system_gclk_gen_get_hz+0x88>)
 5dc:	4798      	blx	r3
 5de:	0005      	movs	r5, r0
 5e0:	e001      	b.n	5e6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
 5e2:	3401      	adds	r4, #1
 5e4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
 5e6:	0028      	movs	r0, r5
 5e8:	bd70      	pop	{r4, r5, r6, pc}
 5ea:	46c0      	nop			; (mov r8, r8)
 5ec:	40000c00 	.word	0x40000c00
 5f0:	00000181 	.word	0x00000181
 5f4:	40000c04 	.word	0x40000c04
 5f8:	0000024d 	.word	0x0000024d
 5fc:	40000c08 	.word	0x40000c08
 600:	000001c1 	.word	0x000001c1
 604:	000008e5 	.word	0x000008e5

00000608 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 608:	b510      	push	{r4, lr}
 60a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 60c:	4b0f      	ldr	r3, [pc, #60]	; (64c <system_gclk_chan_disable+0x44>)
 60e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 610:	4b0f      	ldr	r3, [pc, #60]	; (650 <system_gclk_chan_disable+0x48>)
 612:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 614:	4a0f      	ldr	r2, [pc, #60]	; (654 <system_gclk_chan_disable+0x4c>)
 616:	8853      	ldrh	r3, [r2, #2]
 618:	051b      	lsls	r3, r3, #20
 61a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
 61c:	8853      	ldrh	r3, [r2, #2]
 61e:	490e      	ldr	r1, [pc, #56]	; (658 <system_gclk_chan_disable+0x50>)
 620:	400b      	ands	r3, r1
 622:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 624:	8853      	ldrh	r3, [r2, #2]
 626:	490d      	ldr	r1, [pc, #52]	; (65c <system_gclk_chan_disable+0x54>)
 628:	400b      	ands	r3, r1
 62a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 62c:	0011      	movs	r1, r2
 62e:	2280      	movs	r2, #128	; 0x80
 630:	01d2      	lsls	r2, r2, #7
 632:	884b      	ldrh	r3, [r1, #2]
 634:	4213      	tst	r3, r2
 636:	d1fc      	bne.n	632 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 638:	4906      	ldr	r1, [pc, #24]	; (654 <system_gclk_chan_disable+0x4c>)
 63a:	884a      	ldrh	r2, [r1, #2]
 63c:	0203      	lsls	r3, r0, #8
 63e:	4806      	ldr	r0, [pc, #24]	; (658 <system_gclk_chan_disable+0x50>)
 640:	4002      	ands	r2, r0
 642:	4313      	orrs	r3, r2
 644:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
 646:	4b06      	ldr	r3, [pc, #24]	; (660 <system_gclk_chan_disable+0x58>)
 648:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
 64a:	bd10      	pop	{r4, pc}
 64c:	00000181 	.word	0x00000181
 650:	40000c02 	.word	0x40000c02
 654:	40000c00 	.word	0x40000c00
 658:	fffff0ff 	.word	0xfffff0ff
 65c:	ffffbfff 	.word	0xffffbfff
 660:	000001c1 	.word	0x000001c1

00000664 <system_gclk_chan_set_config>:
{
 664:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 666:	780c      	ldrb	r4, [r1, #0]
 668:	0224      	lsls	r4, r4, #8
 66a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
 66c:	4b02      	ldr	r3, [pc, #8]	; (678 <system_gclk_chan_set_config+0x14>)
 66e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 670:	b2a4      	uxth	r4, r4
 672:	4b02      	ldr	r3, [pc, #8]	; (67c <system_gclk_chan_set_config+0x18>)
 674:	805c      	strh	r4, [r3, #2]
}
 676:	bd10      	pop	{r4, pc}
 678:	00000609 	.word	0x00000609
 67c:	40000c00 	.word	0x40000c00

00000680 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
 680:	b510      	push	{r4, lr}
 682:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
 684:	4b06      	ldr	r3, [pc, #24]	; (6a0 <system_gclk_chan_get_hz+0x20>)
 686:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 688:	4b06      	ldr	r3, [pc, #24]	; (6a4 <system_gclk_chan_get_hz+0x24>)
 68a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
 68c:	4b06      	ldr	r3, [pc, #24]	; (6a8 <system_gclk_chan_get_hz+0x28>)
 68e:	885c      	ldrh	r4, [r3, #2]
 690:	0524      	lsls	r4, r4, #20
 692:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
 694:	4b05      	ldr	r3, [pc, #20]	; (6ac <system_gclk_chan_get_hz+0x2c>)
 696:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
 698:	0020      	movs	r0, r4
 69a:	4b05      	ldr	r3, [pc, #20]	; (6b0 <system_gclk_chan_get_hz+0x30>)
 69c:	4798      	blx	r3
}
 69e:	bd10      	pop	{r4, pc}
 6a0:	00000181 	.word	0x00000181
 6a4:	40000c02 	.word	0x40000c02
 6a8:	40000c00 	.word	0x40000c00
 6ac:	000001c1 	.word	0x000001c1
 6b0:	0000057d 	.word	0x0000057d

000006b4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 6b4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 6b6:	78d3      	ldrb	r3, [r2, #3]
 6b8:	2b00      	cmp	r3, #0
 6ba:	d135      	bne.n	728 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 6bc:	7813      	ldrb	r3, [r2, #0]
 6be:	2b80      	cmp	r3, #128	; 0x80
 6c0:	d029      	beq.n	716 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 6c2:	061b      	lsls	r3, r3, #24
 6c4:	2480      	movs	r4, #128	; 0x80
 6c6:	0264      	lsls	r4, r4, #9
 6c8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 6ca:	7854      	ldrb	r4, [r2, #1]
 6cc:	2502      	movs	r5, #2
 6ce:	43ac      	bics	r4, r5
 6d0:	d106      	bne.n	6e0 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 6d2:	7894      	ldrb	r4, [r2, #2]
 6d4:	2c00      	cmp	r4, #0
 6d6:	d120      	bne.n	71a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
 6d8:	2480      	movs	r4, #128	; 0x80
 6da:	02a4      	lsls	r4, r4, #10
 6dc:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 6de:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 6e0:	7854      	ldrb	r4, [r2, #1]
 6e2:	3c01      	subs	r4, #1
 6e4:	2c01      	cmp	r4, #1
 6e6:	d91c      	bls.n	722 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 6e8:	040d      	lsls	r5, r1, #16
 6ea:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 6ec:	24a0      	movs	r4, #160	; 0xa0
 6ee:	05e4      	lsls	r4, r4, #23
 6f0:	432c      	orrs	r4, r5
 6f2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 6f4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 6f6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 6f8:	24d0      	movs	r4, #208	; 0xd0
 6fa:	0624      	lsls	r4, r4, #24
 6fc:	432c      	orrs	r4, r5
 6fe:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 700:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 702:	78d4      	ldrb	r4, [r2, #3]
 704:	2c00      	cmp	r4, #0
 706:	d122      	bne.n	74e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 708:	035b      	lsls	r3, r3, #13
 70a:	d51c      	bpl.n	746 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 70c:	7893      	ldrb	r3, [r2, #2]
 70e:	2b01      	cmp	r3, #1
 710:	d01e      	beq.n	750 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
 712:	6141      	str	r1, [r0, #20]
 714:	e017      	b.n	746 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
 716:	2300      	movs	r3, #0
 718:	e7d7      	b.n	6ca <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 71a:	24c0      	movs	r4, #192	; 0xc0
 71c:	02e4      	lsls	r4, r4, #11
 71e:	4323      	orrs	r3, r4
 720:	e7dd      	b.n	6de <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 722:	4c0d      	ldr	r4, [pc, #52]	; (758 <_system_pinmux_config+0xa4>)
 724:	4023      	ands	r3, r4
 726:	e7df      	b.n	6e8 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
 728:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 72a:	040c      	lsls	r4, r1, #16
 72c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 72e:	23a0      	movs	r3, #160	; 0xa0
 730:	05db      	lsls	r3, r3, #23
 732:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 734:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
 736:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 738:	23d0      	movs	r3, #208	; 0xd0
 73a:	061b      	lsls	r3, r3, #24
 73c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 73e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
 740:	78d3      	ldrb	r3, [r2, #3]
 742:	2b00      	cmp	r3, #0
 744:	d103      	bne.n	74e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 746:	7853      	ldrb	r3, [r2, #1]
 748:	3b01      	subs	r3, #1
 74a:	2b01      	cmp	r3, #1
 74c:	d902      	bls.n	754 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
 74e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
 750:	6181      	str	r1, [r0, #24]
 752:	e7f8      	b.n	746 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
 754:	6081      	str	r1, [r0, #8]
}
 756:	e7fa      	b.n	74e <_system_pinmux_config+0x9a>
 758:	fffbffff 	.word	0xfffbffff

0000075c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 75c:	b510      	push	{r4, lr}
 75e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
 760:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
 762:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
 764:	2900      	cmp	r1, #0
 766:	d104      	bne.n	772 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
 768:	0943      	lsrs	r3, r0, #5
 76a:	01db      	lsls	r3, r3, #7
 76c:	4905      	ldr	r1, [pc, #20]	; (784 <system_pinmux_pin_set_config+0x28>)
 76e:	468c      	mov	ip, r1
 770:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 772:	241f      	movs	r4, #31
 774:	4020      	ands	r0, r4
 776:	2101      	movs	r1, #1
 778:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
 77a:	0018      	movs	r0, r3
 77c:	4b02      	ldr	r3, [pc, #8]	; (788 <system_pinmux_pin_set_config+0x2c>)
 77e:	4798      	blx	r3
}
 780:	bd10      	pop	{r4, pc}
 782:	46c0      	nop			; (mov r8, r8)
 784:	41004400 	.word	0x41004400
 788:	000006b5 	.word	0x000006b5

0000078c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
 78c:	4770      	bx	lr
	...

00000790 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 790:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 792:	4b05      	ldr	r3, [pc, #20]	; (7a8 <system_init+0x18>)
 794:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 796:	4b05      	ldr	r3, [pc, #20]	; (7ac <system_init+0x1c>)
 798:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 79a:	4b05      	ldr	r3, [pc, #20]	; (7b0 <system_init+0x20>)
 79c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 79e:	4b05      	ldr	r3, [pc, #20]	; (7b4 <system_init+0x24>)
 7a0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 7a2:	4b05      	ldr	r3, [pc, #20]	; (7b8 <system_init+0x28>)
 7a4:	4798      	blx	r3
}
 7a6:	bd10      	pop	{r4, pc}
 7a8:	000003c5 	.word	0x000003c5
 7ac:	000001f1 	.word	0x000001f1
 7b0:	0000078d 	.word	0x0000078d
 7b4:	0000078d 	.word	0x0000078d
 7b8:	0000078d 	.word	0x0000078d

000007bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 7bc:	e7fe      	b.n	7bc <Dummy_Handler>
	...

000007c0 <Reset_Handler>:
{
 7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
 7c2:	4a2a      	ldr	r2, [pc, #168]	; (86c <Reset_Handler+0xac>)
 7c4:	4b2a      	ldr	r3, [pc, #168]	; (870 <Reset_Handler+0xb0>)
 7c6:	429a      	cmp	r2, r3
 7c8:	d011      	beq.n	7ee <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 7ca:	001a      	movs	r2, r3
 7cc:	4b29      	ldr	r3, [pc, #164]	; (874 <Reset_Handler+0xb4>)
 7ce:	429a      	cmp	r2, r3
 7d0:	d20d      	bcs.n	7ee <Reset_Handler+0x2e>
 7d2:	4a29      	ldr	r2, [pc, #164]	; (878 <Reset_Handler+0xb8>)
 7d4:	3303      	adds	r3, #3
 7d6:	1a9b      	subs	r3, r3, r2
 7d8:	089b      	lsrs	r3, r3, #2
 7da:	3301      	adds	r3, #1
 7dc:	009b      	lsls	r3, r3, #2
 7de:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 7e0:	4823      	ldr	r0, [pc, #140]	; (870 <Reset_Handler+0xb0>)
 7e2:	4922      	ldr	r1, [pc, #136]	; (86c <Reset_Handler+0xac>)
 7e4:	588c      	ldr	r4, [r1, r2]
 7e6:	5084      	str	r4, [r0, r2]
 7e8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 7ea:	429a      	cmp	r2, r3
 7ec:	d1fa      	bne.n	7e4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 7ee:	4a23      	ldr	r2, [pc, #140]	; (87c <Reset_Handler+0xbc>)
 7f0:	4b23      	ldr	r3, [pc, #140]	; (880 <Reset_Handler+0xc0>)
 7f2:	429a      	cmp	r2, r3
 7f4:	d20a      	bcs.n	80c <Reset_Handler+0x4c>
 7f6:	43d3      	mvns	r3, r2
 7f8:	4921      	ldr	r1, [pc, #132]	; (880 <Reset_Handler+0xc0>)
 7fa:	185b      	adds	r3, r3, r1
 7fc:	2103      	movs	r1, #3
 7fe:	438b      	bics	r3, r1
 800:	3304      	adds	r3, #4
 802:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 804:	2100      	movs	r1, #0
 806:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 808:	4293      	cmp	r3, r2
 80a:	d1fc      	bne.n	806 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 80c:	4a1d      	ldr	r2, [pc, #116]	; (884 <Reset_Handler+0xc4>)
 80e:	21ff      	movs	r1, #255	; 0xff
 810:	4b1d      	ldr	r3, [pc, #116]	; (888 <Reset_Handler+0xc8>)
 812:	438b      	bics	r3, r1
 814:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 816:	39fd      	subs	r1, #253	; 0xfd
 818:	2390      	movs	r3, #144	; 0x90
 81a:	005b      	lsls	r3, r3, #1
 81c:	4a1b      	ldr	r2, [pc, #108]	; (88c <Reset_Handler+0xcc>)
 81e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 820:	4a1b      	ldr	r2, [pc, #108]	; (890 <Reset_Handler+0xd0>)
 822:	78d3      	ldrb	r3, [r2, #3]
 824:	2503      	movs	r5, #3
 826:	43ab      	bics	r3, r5
 828:	2402      	movs	r4, #2
 82a:	4323      	orrs	r3, r4
 82c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 82e:	78d3      	ldrb	r3, [r2, #3]
 830:	270c      	movs	r7, #12
 832:	43bb      	bics	r3, r7
 834:	2608      	movs	r6, #8
 836:	4333      	orrs	r3, r6
 838:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
 83a:	4b16      	ldr	r3, [pc, #88]	; (894 <Reset_Handler+0xd4>)
 83c:	7b98      	ldrb	r0, [r3, #14]
 83e:	2230      	movs	r2, #48	; 0x30
 840:	4390      	bics	r0, r2
 842:	2220      	movs	r2, #32
 844:	4310      	orrs	r0, r2
 846:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 848:	7b99      	ldrb	r1, [r3, #14]
 84a:	43b9      	bics	r1, r7
 84c:	4331      	orrs	r1, r6
 84e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 850:	7b9a      	ldrb	r2, [r3, #14]
 852:	43aa      	bics	r2, r5
 854:	4322      	orrs	r2, r4
 856:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
 858:	4a0f      	ldr	r2, [pc, #60]	; (898 <Reset_Handler+0xd8>)
 85a:	6853      	ldr	r3, [r2, #4]
 85c:	2180      	movs	r1, #128	; 0x80
 85e:	430b      	orrs	r3, r1
 860:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 862:	4b0e      	ldr	r3, [pc, #56]	; (89c <Reset_Handler+0xdc>)
 864:	4798      	blx	r3
        main();
 866:	4b0e      	ldr	r3, [pc, #56]	; (8a0 <Reset_Handler+0xe0>)
 868:	4798      	blx	r3
 86a:	e7fe      	b.n	86a <Reset_Handler+0xaa>
 86c:	00000aac 	.word	0x00000aac
 870:	20000000 	.word	0x20000000
 874:	2000000c 	.word	0x2000000c
 878:	20000004 	.word	0x20000004
 87c:	2000000c 	.word	0x2000000c
 880:	20000048 	.word	0x20000048
 884:	e000ed00 	.word	0xe000ed00
 888:	00000000 	.word	0x00000000
 88c:	41007000 	.word	0x41007000
 890:	41005000 	.word	0x41005000
 894:	41004800 	.word	0x41004800
 898:	41004000 	.word	0x41004000
 89c:	000009fd 	.word	0x000009fd
 8a0:	000008a5 	.word	0x000008a5

000008a4 <main>:
/** LOCAL PROTOTYPES **********************************************************/

void InitLCD(void);

int main (void)
{
 8a4:	b570      	push	{r4, r5, r6, lr}
	system_init();
 8a6:	4b0a      	ldr	r3, [pc, #40]	; (8d0 <main+0x2c>)
 8a8:	4798      	blx	r3
	delay_init();
 8aa:	4b0a      	ldr	r3, [pc, #40]	; (8d4 <main+0x30>)
 8ac:	4798      	blx	r3
 8ae:	4c0a      	ldr	r4, [pc, #40]	; (8d8 <main+0x34>)
	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
			/* Yes, so turn LED on. */
			delay_ms(1000);
 8b0:	4d0a      	ldr	r5, [pc, #40]	; (8dc <main+0x38>)
 8b2:	e005      	b.n	8c0 <main+0x1c>
 8b4:	20fa      	movs	r0, #250	; 0xfa
 8b6:	0080      	lsls	r0, r0, #2
 8b8:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
 8ba:	2380      	movs	r3, #128	; 0x80
 8bc:	05db      	lsls	r3, r3, #23
 8be:	6163      	str	r3, [r4, #20]
	return (port_base->IN.reg & pin_mask);
 8c0:	4b07      	ldr	r3, [pc, #28]	; (8e0 <main+0x3c>)
 8c2:	6a1b      	ldr	r3, [r3, #32]
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
 8c4:	041b      	lsls	r3, r3, #16
 8c6:	d5f5      	bpl.n	8b4 <main+0x10>
		port_base->OUTSET.reg = pin_mask;
 8c8:	2380      	movs	r3, #128	; 0x80
 8ca:	05db      	lsls	r3, r3, #23
 8cc:	61a3      	str	r3, [r4, #24]
 8ce:	e7f7      	b.n	8c0 <main+0x1c>
 8d0:	00000791 	.word	0x00000791
 8d4:	00000115 	.word	0x00000115
 8d8:	41004480 	.word	0x41004480
 8dc:	00000155 	.word	0x00000155
 8e0:	41004400 	.word	0x41004400

000008e4 <__udivsi3>:
 8e4:	2200      	movs	r2, #0
 8e6:	0843      	lsrs	r3, r0, #1
 8e8:	428b      	cmp	r3, r1
 8ea:	d374      	bcc.n	9d6 <__udivsi3+0xf2>
 8ec:	0903      	lsrs	r3, r0, #4
 8ee:	428b      	cmp	r3, r1
 8f0:	d35f      	bcc.n	9b2 <__udivsi3+0xce>
 8f2:	0a03      	lsrs	r3, r0, #8
 8f4:	428b      	cmp	r3, r1
 8f6:	d344      	bcc.n	982 <__udivsi3+0x9e>
 8f8:	0b03      	lsrs	r3, r0, #12
 8fa:	428b      	cmp	r3, r1
 8fc:	d328      	bcc.n	950 <__udivsi3+0x6c>
 8fe:	0c03      	lsrs	r3, r0, #16
 900:	428b      	cmp	r3, r1
 902:	d30d      	bcc.n	920 <__udivsi3+0x3c>
 904:	22ff      	movs	r2, #255	; 0xff
 906:	0209      	lsls	r1, r1, #8
 908:	ba12      	rev	r2, r2
 90a:	0c03      	lsrs	r3, r0, #16
 90c:	428b      	cmp	r3, r1
 90e:	d302      	bcc.n	916 <__udivsi3+0x32>
 910:	1212      	asrs	r2, r2, #8
 912:	0209      	lsls	r1, r1, #8
 914:	d065      	beq.n	9e2 <__udivsi3+0xfe>
 916:	0b03      	lsrs	r3, r0, #12
 918:	428b      	cmp	r3, r1
 91a:	d319      	bcc.n	950 <__udivsi3+0x6c>
 91c:	e000      	b.n	920 <__udivsi3+0x3c>
 91e:	0a09      	lsrs	r1, r1, #8
 920:	0bc3      	lsrs	r3, r0, #15
 922:	428b      	cmp	r3, r1
 924:	d301      	bcc.n	92a <__udivsi3+0x46>
 926:	03cb      	lsls	r3, r1, #15
 928:	1ac0      	subs	r0, r0, r3
 92a:	4152      	adcs	r2, r2
 92c:	0b83      	lsrs	r3, r0, #14
 92e:	428b      	cmp	r3, r1
 930:	d301      	bcc.n	936 <__udivsi3+0x52>
 932:	038b      	lsls	r3, r1, #14
 934:	1ac0      	subs	r0, r0, r3
 936:	4152      	adcs	r2, r2
 938:	0b43      	lsrs	r3, r0, #13
 93a:	428b      	cmp	r3, r1
 93c:	d301      	bcc.n	942 <__udivsi3+0x5e>
 93e:	034b      	lsls	r3, r1, #13
 940:	1ac0      	subs	r0, r0, r3
 942:	4152      	adcs	r2, r2
 944:	0b03      	lsrs	r3, r0, #12
 946:	428b      	cmp	r3, r1
 948:	d301      	bcc.n	94e <__udivsi3+0x6a>
 94a:	030b      	lsls	r3, r1, #12
 94c:	1ac0      	subs	r0, r0, r3
 94e:	4152      	adcs	r2, r2
 950:	0ac3      	lsrs	r3, r0, #11
 952:	428b      	cmp	r3, r1
 954:	d301      	bcc.n	95a <__udivsi3+0x76>
 956:	02cb      	lsls	r3, r1, #11
 958:	1ac0      	subs	r0, r0, r3
 95a:	4152      	adcs	r2, r2
 95c:	0a83      	lsrs	r3, r0, #10
 95e:	428b      	cmp	r3, r1
 960:	d301      	bcc.n	966 <__udivsi3+0x82>
 962:	028b      	lsls	r3, r1, #10
 964:	1ac0      	subs	r0, r0, r3
 966:	4152      	adcs	r2, r2
 968:	0a43      	lsrs	r3, r0, #9
 96a:	428b      	cmp	r3, r1
 96c:	d301      	bcc.n	972 <__udivsi3+0x8e>
 96e:	024b      	lsls	r3, r1, #9
 970:	1ac0      	subs	r0, r0, r3
 972:	4152      	adcs	r2, r2
 974:	0a03      	lsrs	r3, r0, #8
 976:	428b      	cmp	r3, r1
 978:	d301      	bcc.n	97e <__udivsi3+0x9a>
 97a:	020b      	lsls	r3, r1, #8
 97c:	1ac0      	subs	r0, r0, r3
 97e:	4152      	adcs	r2, r2
 980:	d2cd      	bcs.n	91e <__udivsi3+0x3a>
 982:	09c3      	lsrs	r3, r0, #7
 984:	428b      	cmp	r3, r1
 986:	d301      	bcc.n	98c <__udivsi3+0xa8>
 988:	01cb      	lsls	r3, r1, #7
 98a:	1ac0      	subs	r0, r0, r3
 98c:	4152      	adcs	r2, r2
 98e:	0983      	lsrs	r3, r0, #6
 990:	428b      	cmp	r3, r1
 992:	d301      	bcc.n	998 <__udivsi3+0xb4>
 994:	018b      	lsls	r3, r1, #6
 996:	1ac0      	subs	r0, r0, r3
 998:	4152      	adcs	r2, r2
 99a:	0943      	lsrs	r3, r0, #5
 99c:	428b      	cmp	r3, r1
 99e:	d301      	bcc.n	9a4 <__udivsi3+0xc0>
 9a0:	014b      	lsls	r3, r1, #5
 9a2:	1ac0      	subs	r0, r0, r3
 9a4:	4152      	adcs	r2, r2
 9a6:	0903      	lsrs	r3, r0, #4
 9a8:	428b      	cmp	r3, r1
 9aa:	d301      	bcc.n	9b0 <__udivsi3+0xcc>
 9ac:	010b      	lsls	r3, r1, #4
 9ae:	1ac0      	subs	r0, r0, r3
 9b0:	4152      	adcs	r2, r2
 9b2:	08c3      	lsrs	r3, r0, #3
 9b4:	428b      	cmp	r3, r1
 9b6:	d301      	bcc.n	9bc <__udivsi3+0xd8>
 9b8:	00cb      	lsls	r3, r1, #3
 9ba:	1ac0      	subs	r0, r0, r3
 9bc:	4152      	adcs	r2, r2
 9be:	0883      	lsrs	r3, r0, #2
 9c0:	428b      	cmp	r3, r1
 9c2:	d301      	bcc.n	9c8 <__udivsi3+0xe4>
 9c4:	008b      	lsls	r3, r1, #2
 9c6:	1ac0      	subs	r0, r0, r3
 9c8:	4152      	adcs	r2, r2
 9ca:	0843      	lsrs	r3, r0, #1
 9cc:	428b      	cmp	r3, r1
 9ce:	d301      	bcc.n	9d4 <__udivsi3+0xf0>
 9d0:	004b      	lsls	r3, r1, #1
 9d2:	1ac0      	subs	r0, r0, r3
 9d4:	4152      	adcs	r2, r2
 9d6:	1a41      	subs	r1, r0, r1
 9d8:	d200      	bcs.n	9dc <__udivsi3+0xf8>
 9da:	4601      	mov	r1, r0
 9dc:	4152      	adcs	r2, r2
 9de:	4610      	mov	r0, r2
 9e0:	4770      	bx	lr
 9e2:	e7ff      	b.n	9e4 <__udivsi3+0x100>
 9e4:	b501      	push	{r0, lr}
 9e6:	2000      	movs	r0, #0
 9e8:	f000 f806 	bl	9f8 <__aeabi_idiv0>
 9ec:	bd02      	pop	{r1, pc}
 9ee:	46c0      	nop			; (mov r8, r8)

000009f0 <__aeabi_uidivmod>:
 9f0:	2900      	cmp	r1, #0
 9f2:	d0f7      	beq.n	9e4 <__udivsi3+0x100>
 9f4:	e776      	b.n	8e4 <__udivsi3>
 9f6:	4770      	bx	lr

000009f8 <__aeabi_idiv0>:
 9f8:	4770      	bx	lr
 9fa:	46c0      	nop			; (mov r8, r8)

000009fc <__libc_init_array>:
 9fc:	b570      	push	{r4, r5, r6, lr}
 9fe:	2600      	movs	r6, #0
 a00:	4d0c      	ldr	r5, [pc, #48]	; (a34 <__libc_init_array+0x38>)
 a02:	4c0d      	ldr	r4, [pc, #52]	; (a38 <__libc_init_array+0x3c>)
 a04:	1b64      	subs	r4, r4, r5
 a06:	10a4      	asrs	r4, r4, #2
 a08:	42a6      	cmp	r6, r4
 a0a:	d109      	bne.n	a20 <__libc_init_array+0x24>
 a0c:	2600      	movs	r6, #0
 a0e:	f000 f83d 	bl	a8c <_init>
 a12:	4d0a      	ldr	r5, [pc, #40]	; (a3c <__libc_init_array+0x40>)
 a14:	4c0a      	ldr	r4, [pc, #40]	; (a40 <__libc_init_array+0x44>)
 a16:	1b64      	subs	r4, r4, r5
 a18:	10a4      	asrs	r4, r4, #2
 a1a:	42a6      	cmp	r6, r4
 a1c:	d105      	bne.n	a2a <__libc_init_array+0x2e>
 a1e:	bd70      	pop	{r4, r5, r6, pc}
 a20:	00b3      	lsls	r3, r6, #2
 a22:	58eb      	ldr	r3, [r5, r3]
 a24:	4798      	blx	r3
 a26:	3601      	adds	r6, #1
 a28:	e7ee      	b.n	a08 <__libc_init_array+0xc>
 a2a:	00b3      	lsls	r3, r6, #2
 a2c:	58eb      	ldr	r3, [r5, r3]
 a2e:	4798      	blx	r3
 a30:	3601      	adds	r6, #1
 a32:	e7f2      	b.n	a1a <__libc_init_array+0x1e>
 a34:	00000a98 	.word	0x00000a98
 a38:	00000a98 	.word	0x00000a98
 a3c:	00000a98 	.word	0x00000a98
 a40:	00000a9c 	.word	0x00000a9c
 a44:	0000025e 	.word	0x0000025e
 a48:	0000025a 	.word	0x0000025a
 a4c:	0000025a 	.word	0x0000025a
 a50:	000002c0 	.word	0x000002c0
 a54:	000002c0 	.word	0x000002c0
 a58:	00000272 	.word	0x00000272
 a5c:	00000264 	.word	0x00000264
 a60:	00000278 	.word	0x00000278
 a64:	000002ae 	.word	0x000002ae
 a68:	00000348 	.word	0x00000348
 a6c:	00000328 	.word	0x00000328
 a70:	00000328 	.word	0x00000328
 a74:	000003b4 	.word	0x000003b4
 a78:	0000033a 	.word	0x0000033a
 a7c:	00000356 	.word	0x00000356
 a80:	0000032c 	.word	0x0000032c
 a84:	00000364 	.word	0x00000364
 a88:	000003a4 	.word	0x000003a4

00000a8c <_init>:
 a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 a8e:	46c0      	nop			; (mov r8, r8)
 a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 a92:	bc08      	pop	{r3}
 a94:	469e      	mov	lr, r3
 a96:	4770      	bx	lr

00000a98 <__init_array_start>:
 a98:	000000dd 	.word	0x000000dd

00000a9c <_fini>:
 a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 a9e:	46c0      	nop			; (mov r8, r8)
 aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 aa2:	bc08      	pop	{r3}
 aa4:	469e      	mov	lr, r3
 aa6:	4770      	bx	lr

00000aa8 <__fini_array_start>:
 aa8:	000000b5 	.word	0x000000b5
