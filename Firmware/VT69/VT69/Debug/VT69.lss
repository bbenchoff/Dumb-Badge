
VT69.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c40  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00003c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020068  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020068  2**0
                  CONTENTS
  4 .bss          0000030c  20000068  00003ca8  00020068  2**2
                  ALLOC
  5 .stack        0000c004  20000374  00003fb4  00020068  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY
  8 .debug_info   00033dd5  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000541d  00000000  00000000  00053ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001440e  00000000  00000000  000592e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001020  00000000  00000000  0006d6ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001698  00000000  00000000  0006e70f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003462e  00000000  00000000  0006fda7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001e75b  00000000  00000000  000a43d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ff94c  00000000  00000000  000c2b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000030c4  00000000  00000000  001c247c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 c3 00 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     x.. ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 09 0f 00 00 1d 0f 00 00     ................
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	d5 0f 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     164:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     174:	e5 02 00 00 00 00 00 00 00 00 00 00 d5 1f 00 00     ................
     184:	e1 1f 00 00 ed 1f 00 00 f9 1f 00 00 00 00 00 00     ................
     194:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1e4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1f4:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     204:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     214:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     224:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     234:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     244:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     254:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000068 	.word	0x20000068
     280:	00000000 	.word	0x00000000
     284:	00003c40 	.word	0x00003c40

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003c40 	.word	0x00003c40
     2c4:	2000006c 	.word	0x2000006c
     2c8:	00003c40 	.word	0x00003c40
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000006f1 	.word	0x000006f1
     2e0:	00002755 	.word	0x00002755

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00003c40 	.word	0x00003c40
     364:	20000068 	.word	0x20000068
     368:	20000374 	.word	0x20000374
     36c:	20000068 	.word	0x20000068
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00002775 	.word	0x00002775
     37c:	00002545 	.word	0x00002545

00000380 <EXTERNAL_IRQ_0_init>:
struct rand_sync_desc RAND_0;

struct wdt_descriptor WDT_0;

void EXTERNAL_IRQ_0_init(void)
{
     380:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     382:	2240      	movs	r2, #64	; 0x40
     384:	4b05      	ldr	r3, [pc, #20]	; (39c <EXTERNAL_IRQ_0_init+0x1c>)
     386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     38a:	4a05      	ldr	r2, [pc, #20]	; (3a0 <EXTERNAL_IRQ_0_init+0x20>)
     38c:	6953      	ldr	r3, [r2, #20]
     38e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     392:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
     394:	4b03      	ldr	r3, [pc, #12]	; (3a4 <EXTERNAL_IRQ_0_init+0x24>)
     396:	4798      	blx	r3
     398:	bd08      	pop	{r3, pc}
     39a:	bf00      	nop
     39c:	40001c00 	.word	0x40001c00
     3a0:	40000800 	.word	0x40000800
     3a4:	000007cd 	.word	0x000007cd

000003a8 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     3a8:	4a02      	ldr	r2, [pc, #8]	; (3b4 <FLASH_0_CLOCK_init+0xc>)
     3aa:	6913      	ldr	r3, [r2, #16]
     3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     3b0:	6113      	str	r3, [r2, #16]
     3b2:	4770      	bx	lr
     3b4:	40000800 	.word	0x40000800

000003b8 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     3b8:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     3ba:	4b03      	ldr	r3, [pc, #12]	; (3c8 <FLASH_0_init+0x10>)
     3bc:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     3be:	4903      	ldr	r1, [pc, #12]	; (3cc <FLASH_0_init+0x14>)
     3c0:	4803      	ldr	r0, [pc, #12]	; (3d0 <FLASH_0_init+0x18>)
     3c2:	4b04      	ldr	r3, [pc, #16]	; (3d4 <FLASH_0_init+0x1c>)
     3c4:	4798      	blx	r3
     3c6:	bd08      	pop	{r3, pc}
     3c8:	000003a9 	.word	0x000003a9
     3cc:	41004000 	.word	0x41004000
     3d0:	2000030c 	.word	0x2000030c
     3d4:	00000805 	.word	0x00000805

000003d8 <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	4b10      	ldr	r3, [pc, #64]	; (41c <USART_0_PORT_init+0x44>)
     3da:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     3de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ea:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3ee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     3f2:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3fa:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     3fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     402:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     406:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     40a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     40e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     412:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
     41a:	4770      	bx	lr
     41c:	41008000 	.word	0x41008000

00000420 <USART_0_CLOCK_init>:
     420:	4b06      	ldr	r3, [pc, #24]	; (43c <USART_0_CLOCK_init+0x1c>)
     422:	2240      	movs	r2, #64	; 0x40
     424:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     428:	2243      	movs	r2, #67	; 0x43
     42a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     42e:	4a04      	ldr	r2, [pc, #16]	; (440 <USART_0_CLOCK_init+0x20>)
     430:	6953      	ldr	r3, [r2, #20]
     432:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     436:	6153      	str	r3, [r2, #20]
     438:	4770      	bx	lr
     43a:	bf00      	nop
     43c:	40001c00 	.word	0x40001c00
     440:	40000800 	.word	0x40000800

00000444 <USART_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void USART_0_init(void)
{
     444:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     446:	4b05      	ldr	r3, [pc, #20]	; (45c <USART_0_init+0x18>)
     448:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     44a:	2200      	movs	r2, #0
     44c:	4904      	ldr	r1, [pc, #16]	; (460 <USART_0_init+0x1c>)
     44e:	4805      	ldr	r0, [pc, #20]	; (464 <USART_0_init+0x20>)
     450:	4b05      	ldr	r3, [pc, #20]	; (468 <USART_0_init+0x24>)
     452:	4798      	blx	r3
	USART_0_PORT_init();
     454:	4b05      	ldr	r3, [pc, #20]	; (46c <USART_0_init+0x28>)
     456:	4798      	blx	r3
     458:	bd08      	pop	{r3, pc}
     45a:	bf00      	nop
     45c:	00000421 	.word	0x00000421
     460:	40003000 	.word	0x40003000
     464:	20000340 	.word	0x20000340
     468:	000009ad 	.word	0x000009ad
     46c:	000003d9 	.word	0x000003d9

00000470 <TARGET_IO_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     470:	4b10      	ldr	r3, [pc, #64]	; (4b4 <TARGET_IO_PORT_init+0x44>)
     472:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
	tmp &= ~PORT_PINCFG_PMUXEN;
     476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     47a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     482:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     486:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     48a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     492:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
	tmp &= ~PORT_PINCFG_PMUXEN;
     496:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     49a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4a2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4a6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4aa:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
     4b2:	4770      	bx	lr
     4b4:	41008000 	.word	0x41008000

000004b8 <TARGET_IO_CLOCK_init>:
     4b8:	4b06      	ldr	r3, [pc, #24]	; (4d4 <TARGET_IO_CLOCK_init+0x1c>)
     4ba:	2240      	movs	r2, #64	; 0x40
     4bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     4c0:	2243      	movs	r2, #67	; 0x43
     4c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     4c6:	4a04      	ldr	r2, [pc, #16]	; (4d8 <TARGET_IO_CLOCK_init+0x20>)
     4c8:	6953      	ldr	r3, [r2, #20]
     4ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     4ce:	6153      	str	r3, [r2, #20]
     4d0:	4770      	bx	lr
     4d2:	bf00      	nop
     4d4:	40001c00 	.word	0x40001c00
     4d8:	40000800 	.word	0x40000800

000004dc <TARGET_IO_init>:

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
}

void TARGET_IO_init(void)
{
     4dc:	b508      	push	{r3, lr}
	TARGET_IO_CLOCK_init();
     4de:	4b05      	ldr	r3, [pc, #20]	; (4f4 <TARGET_IO_init+0x18>)
     4e0:	4798      	blx	r3
	usart_sync_init(&TARGET_IO, SERCOM1, (void *)NULL);
     4e2:	2200      	movs	r2, #0
     4e4:	4904      	ldr	r1, [pc, #16]	; (4f8 <TARGET_IO_init+0x1c>)
     4e6:	4805      	ldr	r0, [pc, #20]	; (4fc <TARGET_IO_init+0x20>)
     4e8:	4b05      	ldr	r3, [pc, #20]	; (500 <TARGET_IO_init+0x24>)
     4ea:	4798      	blx	r3
	TARGET_IO_PORT_init();
     4ec:	4b05      	ldr	r3, [pc, #20]	; (504 <TARGET_IO_init+0x28>)
     4ee:	4798      	blx	r3
     4f0:	bd08      	pop	{r3, pc}
     4f2:	bf00      	nop
     4f4:	000004b9 	.word	0x000004b9
     4f8:	40003400 	.word	0x40003400
     4fc:	20000328 	.word	0x20000328
     500:	000009ad 	.word	0x000009ad
     504:	00000471 	.word	0x00000471

00000508 <USART_1_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     508:	4b10      	ldr	r3, [pc, #64]	; (54c <USART_1_PORT_init+0x44>)
     50a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     50e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     512:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     516:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     51a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     51e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     522:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     526:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52a:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     52e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     532:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     536:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     53a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     53e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     542:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     546:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
     54a:	4770      	bx	lr
     54c:	41008000 	.word	0x41008000

00000550 <USART_1_CLOCK_init>:
     550:	4b06      	ldr	r3, [pc, #24]	; (56c <USART_1_CLOCK_init+0x1c>)
     552:	2240      	movs	r2, #64	; 0x40
     554:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
     558:	2243      	movs	r2, #67	; 0x43
     55a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBBMASK_SERCOM2_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;
     55e:	4a04      	ldr	r2, [pc, #16]	; (570 <USART_1_CLOCK_init+0x20>)
     560:	6993      	ldr	r3, [r2, #24]
     562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     566:	6193      	str	r3, [r2, #24]
     568:	4770      	bx	lr
     56a:	bf00      	nop
     56c:	40001c00 	.word	0x40001c00
     570:	40000800 	.word	0x40000800

00000574 <USART_1_init>:

	hri_mclk_set_APBBMASK_SERCOM2_bit(MCLK);
}

void USART_1_init(void)
{
     574:	b508      	push	{r3, lr}
	USART_1_CLOCK_init();
     576:	4b05      	ldr	r3, [pc, #20]	; (58c <USART_1_init+0x18>)
     578:	4798      	blx	r3
	usart_sync_init(&USART_1, SERCOM2, (void *)NULL);
     57a:	2200      	movs	r2, #0
     57c:	4904      	ldr	r1, [pc, #16]	; (590 <USART_1_init+0x1c>)
     57e:	4805      	ldr	r0, [pc, #20]	; (594 <USART_1_init+0x20>)
     580:	4b05      	ldr	r3, [pc, #20]	; (598 <USART_1_init+0x24>)
     582:	4798      	blx	r3
	USART_1_PORT_init();
     584:	4b05      	ldr	r3, [pc, #20]	; (59c <USART_1_init+0x28>)
     586:	4798      	blx	r3
     588:	bd08      	pop	{r3, pc}
     58a:	bf00      	nop
     58c:	00000551 	.word	0x00000551
     590:	41012000 	.word	0x41012000
     594:	2000034c 	.word	0x2000034c
     598:	000009ad 	.word	0x000009ad
     59c:	00000509 	.word	0x00000509

000005a0 <delay_driver_init>:
}

void delay_driver_init(void)
{
     5a0:	b508      	push	{r3, lr}
	delay_init(SysTick);
     5a2:	4802      	ldr	r0, [pc, #8]	; (5ac <delay_driver_init+0xc>)
     5a4:	4b02      	ldr	r3, [pc, #8]	; (5b0 <delay_driver_init+0x10>)
     5a6:	4798      	blx	r3
     5a8:	bd08      	pop	{r3, pc}
     5aa:	bf00      	nop
     5ac:	e000e010 	.word	0xe000e010
     5b0:	00000761 	.word	0x00000761

000005b4 <RAND_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_TRNG_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TRNG;
     5b4:	4a02      	ldr	r2, [pc, #8]	; (5c0 <RAND_0_CLOCK_init+0xc>)
     5b6:	69d3      	ldr	r3, [r2, #28]
     5b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     5bc:	61d3      	str	r3, [r2, #28]
     5be:	4770      	bx	lr
     5c0:	40000800 	.word	0x40000800

000005c4 <RAND_0_init>:
{
	hri_mclk_set_APBCMASK_TRNG_bit(MCLK);
}

void RAND_0_init(void)
{
     5c4:	b508      	push	{r3, lr}
	RAND_0_CLOCK_init();
     5c6:	4b03      	ldr	r3, [pc, #12]	; (5d4 <RAND_0_init+0x10>)
     5c8:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
     5ca:	4903      	ldr	r1, [pc, #12]	; (5d8 <RAND_0_init+0x14>)
     5cc:	4803      	ldr	r0, [pc, #12]	; (5dc <RAND_0_init+0x18>)
     5ce:	4b04      	ldr	r3, [pc, #16]	; (5e0 <RAND_0_init+0x1c>)
     5d0:	4798      	blx	r3
     5d2:	bd08      	pop	{r3, pc}
     5d4:	000005b5 	.word	0x000005b5
     5d8:	42002800 	.word	0x42002800
     5dc:	20000334 	.word	0x20000334
     5e0:	000008ad 	.word	0x000008ad

000005e4 <USB_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5e4:	4b1e      	ldr	r3, [pc, #120]	; (660 <USB_0_PORT_init+0x7c>)
     5e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     5ea:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     5f0:	6299      	str	r1, [r3, #40]	; 0x28
     5f2:	481c      	ldr	r0, [pc, #112]	; (664 <USB_0_PORT_init+0x80>)
     5f4:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5f6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5f8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
     5fc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     600:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     604:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
	tmp &= ~PORT_PINCFG_PMUXEN;
     608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     60c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     610:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     614:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     618:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     61c:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     624:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
     628:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     62a:	6299      	str	r1, [r3, #40]	; 0x28
     62c:	490e      	ldr	r1, [pc, #56]	; (668 <USB_0_PORT_init+0x84>)
     62e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     630:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     632:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
     636:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     63a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     63e:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
	tmp &= ~PORT_PINCFG_PMUXEN;
     642:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     646:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     64e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     652:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     656:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     65a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
     65e:	4770      	bx	lr
     660:	41008000 	.word	0x41008000
     664:	c0000100 	.word	0xc0000100
     668:	c0000200 	.word	0xc0000200

0000066c <USB_0_CLOCK_init>:
     66c:	2241      	movs	r2, #65	; 0x41
     66e:	4b07      	ldr	r3, [pc, #28]	; (68c <USB_0_CLOCK_init+0x20>)
     670:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     674:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     678:	691a      	ldr	r2, [r3, #16]
     67a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     67e:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     680:	699a      	ldr	r2, [r3, #24]
     682:	f042 0201 	orr.w	r2, r2, #1
     686:	619a      	str	r2, [r3, #24]
     688:	4770      	bx	lr
     68a:	bf00      	nop
     68c:	40001c00 	.word	0x40001c00

00000690 <USB_0_init>:
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}

void USB_0_init(void)
{
     690:	b508      	push	{r3, lr}
	USB_0_CLOCK_init();
     692:	4b03      	ldr	r3, [pc, #12]	; (6a0 <USB_0_init+0x10>)
     694:	4798      	blx	r3
	usb_d_init();
     696:	4b03      	ldr	r3, [pc, #12]	; (6a4 <USB_0_init+0x14>)
     698:	4798      	blx	r3
	USB_0_PORT_init();
     69a:	4b03      	ldr	r3, [pc, #12]	; (6a8 <USB_0_init+0x18>)
     69c:	4798      	blx	r3
     69e:	bd08      	pop	{r3, pc}
     6a0:	0000066d 	.word	0x0000066d
     6a4:	00000c75 	.word	0x00000c75
     6a8:	000005e5 	.word	0x000005e5

000006ac <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     6ac:	4a02      	ldr	r2, [pc, #8]	; (6b8 <WDT_0_CLOCK_init+0xc>)
     6ae:	6953      	ldr	r3, [r2, #20]
     6b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     6b4:	6153      	str	r3, [r2, #20]
     6b6:	4770      	bx	lr
     6b8:	40000800 	.word	0x40000800

000006bc <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     6bc:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     6be:	4b06      	ldr	r3, [pc, #24]	; (6d8 <WDT_0_init+0x1c>)
     6c0:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     6c2:	2248      	movs	r2, #72	; 0x48
     6c4:	4905      	ldr	r1, [pc, #20]	; (6dc <WDT_0_init+0x20>)
     6c6:	2001      	movs	r0, #1
     6c8:	4b05      	ldr	r3, [pc, #20]	; (6e0 <WDT_0_init+0x24>)
     6ca:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     6cc:	4805      	ldr	r0, [pc, #20]	; (6e4 <WDT_0_init+0x28>)
     6ce:	4b06      	ldr	r3, [pc, #24]	; (6e8 <WDT_0_init+0x2c>)
     6d0:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     6d2:	4b06      	ldr	r3, [pc, #24]	; (6ec <WDT_0_init+0x30>)
     6d4:	4798      	blx	r3
     6d6:	bd08      	pop	{r3, pc}
     6d8:	000006ad 	.word	0x000006ad
     6dc:	000037f8 	.word	0x000037f8
     6e0:	00000cdd 	.word	0x00000cdd
     6e4:	2000033c 	.word	0x2000033c
     6e8:	40002000 	.word	0x40002000
     6ec:	00002005 	.word	0x00002005

000006f0 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     6f0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     6f2:	4b0a      	ldr	r3, [pc, #40]	; (71c <system_init+0x2c>)
     6f4:	4798      	blx	r3
	init_mcu();

	EXTERNAL_IRQ_0_init();
     6f6:	4b0a      	ldr	r3, [pc, #40]	; (720 <system_init+0x30>)
     6f8:	4798      	blx	r3

	FLASH_0_init();
     6fa:	4b0a      	ldr	r3, [pc, #40]	; (724 <system_init+0x34>)
     6fc:	4798      	blx	r3

	USART_0_init();
     6fe:	4b0a      	ldr	r3, [pc, #40]	; (728 <system_init+0x38>)
     700:	4798      	blx	r3

	TARGET_IO_init();
     702:	4b0a      	ldr	r3, [pc, #40]	; (72c <system_init+0x3c>)
     704:	4798      	blx	r3

	USART_1_init();
     706:	4b0a      	ldr	r3, [pc, #40]	; (730 <system_init+0x40>)
     708:	4798      	blx	r3

	delay_driver_init();
     70a:	4b0a      	ldr	r3, [pc, #40]	; (734 <system_init+0x44>)
     70c:	4798      	blx	r3

	RAND_0_init();
     70e:	4b0a      	ldr	r3, [pc, #40]	; (738 <system_init+0x48>)
     710:	4798      	blx	r3

	USB_0_init();
     712:	4b0a      	ldr	r3, [pc, #40]	; (73c <system_init+0x4c>)
     714:	4798      	blx	r3

	WDT_0_init();
     716:	4b0a      	ldr	r3, [pc, #40]	; (740 <system_init+0x50>)
     718:	4798      	blx	r3
     71a:	bd08      	pop	{r3, pc}
     71c:	00000d2d 	.word	0x00000d2d
     720:	00000381 	.word	0x00000381
     724:	000003b9 	.word	0x000003b9
     728:	00000445 	.word	0x00000445
     72c:	000004dd 	.word	0x000004dd
     730:	00000575 	.word	0x00000575
     734:	000005a1 	.word	0x000005a1
     738:	000005c5 	.word	0x000005c5
     73c:	00000691 	.word	0x00000691
     740:	000006bd 	.word	0x000006bd

00000744 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     744:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     748:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     74a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     74c:	f3bf 8f5f 	dmb	sy
     750:	4770      	bx	lr

00000752 <atomic_leave_critical>:
     752:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     756:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     758:	f383 8810 	msr	PRIMASK, r3
     75c:	4770      	bx	lr
	...

00000760 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     760:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     762:	4b02      	ldr	r3, [pc, #8]	; (76c <delay_init+0xc>)
     764:	6018      	str	r0, [r3, #0]
     766:	4b02      	ldr	r3, [pc, #8]	; (770 <delay_init+0x10>)
     768:	4798      	blx	r3
     76a:	bd08      	pop	{r3, pc}
     76c:	20000084 	.word	0x20000084
     770:	000011f1 	.word	0x000011f1

00000774 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     774:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     776:	4b04      	ldr	r3, [pc, #16]	; (788 <delay_ms+0x14>)
     778:	681c      	ldr	r4, [r3, #0]
     77a:	4b04      	ldr	r3, [pc, #16]	; (78c <delay_ms+0x18>)
     77c:	4798      	blx	r3
     77e:	4601      	mov	r1, r0
     780:	4620      	mov	r0, r4
     782:	4b03      	ldr	r3, [pc, #12]	; (790 <delay_ms+0x1c>)
     784:	4798      	blx	r3
     786:	bd10      	pop	{r4, pc}
     788:	20000084 	.word	0x20000084
     78c:	00000d21 	.word	0x00000d21
     790:	00001205 	.word	0x00001205

00000794 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     794:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     796:	4b0c      	ldr	r3, [pc, #48]	; (7c8 <process_ext_irq+0x34>)
     798:	685c      	ldr	r4, [r3, #4]
     79a:	42a0      	cmp	r0, r4
     79c:	d00e      	beq.n	7bc <process_ext_irq+0x28>
     79e:	2301      	movs	r3, #1
     7a0:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     7a2:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
     7a4:	25ff      	movs	r5, #255	; 0xff
     7a6:	e003      	b.n	7b0 <process_ext_irq+0x1c>
     7a8:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
     7aa:	185a      	adds	r2, r3, r1
     7ac:	0852      	lsrs	r2, r2, #1
     7ae:	d104      	bne.n	7ba <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
     7b0:	42a0      	cmp	r0, r4
     7b2:	d9f9      	bls.n	7a8 <process_ext_irq+0x14>
	while (upper >= lower) {
     7b4:	b13b      	cbz	r3, 7c6 <process_ext_irq+0x32>
			lower = middle + 1;
     7b6:	4631      	mov	r1, r6
     7b8:	e7f7      	b.n	7aa <process_ext_irq+0x16>
     7ba:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
     7bc:	4b02      	ldr	r3, [pc, #8]	; (7c8 <process_ext_irq+0x34>)
     7be:	681b      	ldr	r3, [r3, #0]
     7c0:	b10b      	cbz	r3, 7c6 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     7c2:	4798      	blx	r3
     7c4:	bd70      	pop	{r4, r5, r6, pc}
     7c6:	bd70      	pop	{r4, r5, r6, pc}
     7c8:	20000088 	.word	0x20000088

000007cc <ext_irq_init>:
{
     7cc:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     7ce:	4b05      	ldr	r3, [pc, #20]	; (7e4 <ext_irq_init+0x18>)
     7d0:	f04f 32ff 	mov.w	r2, #4294967295
     7d4:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     7d6:	2200      	movs	r2, #0
     7d8:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     7da:	4803      	ldr	r0, [pc, #12]	; (7e8 <ext_irq_init+0x1c>)
     7dc:	4b03      	ldr	r3, [pc, #12]	; (7ec <ext_irq_init+0x20>)
     7de:	4798      	blx	r3
}
     7e0:	bd08      	pop	{r3, pc}
     7e2:	bf00      	nop
     7e4:	20000088 	.word	0x20000088
     7e8:	00000795 	.word	0x00000795
     7ec:	00000d69 	.word	0x00000d69

000007f0 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     7f0:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     7f2:	6943      	ldr	r3, [r0, #20]
     7f4:	b103      	cbz	r3, 7f8 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     7f6:	4798      	blx	r3
     7f8:	bd08      	pop	{r3, pc}

000007fa <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     7fa:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     7fc:	6983      	ldr	r3, [r0, #24]
     7fe:	b103      	cbz	r3, 802 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     800:	4798      	blx	r3
     802:	bd08      	pop	{r3, pc}

00000804 <flash_init>:
{
     804:	b538      	push	{r3, r4, r5, lr}
     806:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     808:	4604      	mov	r4, r0
     80a:	b190      	cbz	r0, 832 <flash_init+0x2e>
     80c:	1c08      	adds	r0, r1, #0
     80e:	bf18      	it	ne
     810:	2001      	movne	r0, #1
     812:	2238      	movs	r2, #56	; 0x38
     814:	4908      	ldr	r1, [pc, #32]	; (838 <flash_init+0x34>)
     816:	4b09      	ldr	r3, [pc, #36]	; (83c <flash_init+0x38>)
     818:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     81a:	4629      	mov	r1, r5
     81c:	4620      	mov	r0, r4
     81e:	4b08      	ldr	r3, [pc, #32]	; (840 <flash_init+0x3c>)
     820:	4798      	blx	r3
	if (rc) {
     822:	4603      	mov	r3, r0
     824:	b918      	cbnz	r0, 82e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     826:	4a07      	ldr	r2, [pc, #28]	; (844 <flash_init+0x40>)
     828:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     82a:	4a07      	ldr	r2, [pc, #28]	; (848 <flash_init+0x44>)
     82c:	6062      	str	r2, [r4, #4]
}
     82e:	4618      	mov	r0, r3
     830:	bd38      	pop	{r3, r4, r5, pc}
     832:	2000      	movs	r0, #0
     834:	e7ed      	b.n	812 <flash_init+0xe>
     836:	bf00      	nop
     838:	00003814 	.word	0x00003814
     83c:	00000cdd 	.word	0x00000cdd
     840:	00000e91 	.word	0x00000e91
     844:	000007f1 	.word	0x000007f1
     848:	000007fb 	.word	0x000007fb

0000084c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     84c:	b570      	push	{r4, r5, r6, lr}
     84e:	460d      	mov	r5, r1
     850:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     852:	4604      	mov	r4, r0
     854:	b160      	cbz	r0, 870 <io_write+0x24>
     856:	1c08      	adds	r0, r1, #0
     858:	bf18      	it	ne
     85a:	2001      	movne	r0, #1
     85c:	2234      	movs	r2, #52	; 0x34
     85e:	4905      	ldr	r1, [pc, #20]	; (874 <io_write+0x28>)
     860:	4b05      	ldr	r3, [pc, #20]	; (878 <io_write+0x2c>)
     862:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     864:	6823      	ldr	r3, [r4, #0]
     866:	4632      	mov	r2, r6
     868:	4629      	mov	r1, r5
     86a:	4620      	mov	r0, r4
     86c:	4798      	blx	r3
}
     86e:	bd70      	pop	{r4, r5, r6, pc}
     870:	2000      	movs	r0, #0
     872:	e7f3      	b.n	85c <io_write+0x10>
     874:	0000382c 	.word	0x0000382c
     878:	00000cdd 	.word	0x00000cdd

0000087c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     87c:	b570      	push	{r4, r5, r6, lr}
     87e:	460d      	mov	r5, r1
     880:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     882:	4604      	mov	r4, r0
     884:	b160      	cbz	r0, 8a0 <io_read+0x24>
     886:	1c08      	adds	r0, r1, #0
     888:	bf18      	it	ne
     88a:	2001      	movne	r0, #1
     88c:	223d      	movs	r2, #61	; 0x3d
     88e:	4905      	ldr	r1, [pc, #20]	; (8a4 <io_read+0x28>)
     890:	4b05      	ldr	r3, [pc, #20]	; (8a8 <io_read+0x2c>)
     892:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     894:	6863      	ldr	r3, [r4, #4]
     896:	4632      	mov	r2, r6
     898:	4629      	mov	r1, r5
     89a:	4620      	mov	r0, r4
     89c:	4798      	blx	r3
}
     89e:	bd70      	pop	{r4, r5, r6, pc}
     8a0:	2000      	movs	r0, #0
     8a2:	e7f3      	b.n	88c <io_read+0x10>
     8a4:	0000382c 	.word	0x0000382c
     8a8:	00000cdd 	.word	0x00000cdd

000008ac <rand_sync_init>:
#include "hal_rand_sync.h"

#define HAL_RNG_SYNC_VERSION 0x00000001u

int32_t rand_sync_init(struct rand_sync_desc *const desc, void *const hw)
{
     8ac:	b538      	push	{r3, r4, r5, lr}
     8ae:	460d      	mov	r5, r1
	ASSERT(desc);
     8b0:	4604      	mov	r4, r0
     8b2:	2229      	movs	r2, #41	; 0x29
     8b4:	4905      	ldr	r1, [pc, #20]	; (8cc <rand_sync_init+0x20>)
     8b6:	3000      	adds	r0, #0
     8b8:	bf18      	it	ne
     8ba:	2001      	movne	r0, #1
     8bc:	4b04      	ldr	r3, [pc, #16]	; (8d0 <rand_sync_init+0x24>)
     8be:	4798      	blx	r3

	return _rand_sync_init(&desc->dev, hw);
     8c0:	4629      	mov	r1, r5
     8c2:	4620      	mov	r0, r4
     8c4:	4b03      	ldr	r3, [pc, #12]	; (8d4 <rand_sync_init+0x28>)
     8c6:	4798      	blx	r3
}
     8c8:	bd38      	pop	{r3, r4, r5, pc}
     8ca:	bf00      	nop
     8cc:	00003840 	.word	0x00003840
     8d0:	00000cdd 	.word	0x00000cdd
     8d4:	00001261 	.word	0x00001261

000008d8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     8dc:	460f      	mov	r7, r1
     8de:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     8e0:	4604      	mov	r4, r0
     8e2:	b328      	cbz	r0, 930 <usart_sync_write+0x58>
     8e4:	b331      	cbz	r1, 934 <usart_sync_write+0x5c>
     8e6:	1c10      	adds	r0, r2, #0
     8e8:	bf18      	it	ne
     8ea:	2001      	movne	r0, #1
     8ec:	22f1      	movs	r2, #241	; 0xf1
     8ee:	4912      	ldr	r1, [pc, #72]	; (938 <usart_sync_write+0x60>)
     8f0:	4b12      	ldr	r3, [pc, #72]	; (93c <usart_sync_write+0x64>)
     8f2:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     8f4:	3408      	adds	r4, #8
     8f6:	4d12      	ldr	r5, [pc, #72]	; (940 <usart_sync_write+0x68>)
     8f8:	4620      	mov	r0, r4
     8fa:	47a8      	blx	r5
     8fc:	2800      	cmp	r0, #0
     8fe:	d0fb      	beq.n	8f8 <usart_sync_write+0x20>
     900:	3f01      	subs	r7, #1
     902:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     904:	f8df 9040 	ldr.w	r9, [pc, #64]	; 948 <usart_sync_write+0x70>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     908:	4d0d      	ldr	r5, [pc, #52]	; (940 <usart_sync_write+0x68>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     90a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     90e:	4620      	mov	r0, r4
     910:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     912:	4620      	mov	r0, r4
     914:	47a8      	blx	r5
     916:	2800      	cmp	r0, #0
     918:	d0fb      	beq.n	912 <usart_sync_write+0x3a>
			;
	} while (++offset < length);
     91a:	3601      	adds	r6, #1
     91c:	4546      	cmp	r6, r8
     91e:	d3f4      	bcc.n	90a <usart_sync_write+0x32>
	while (!_usart_sync_is_transmit_done(&descr->device))
     920:	4d08      	ldr	r5, [pc, #32]	; (944 <usart_sync_write+0x6c>)
     922:	4620      	mov	r0, r4
     924:	47a8      	blx	r5
     926:	2800      	cmp	r0, #0
     928:	d0fb      	beq.n	922 <usart_sync_write+0x4a>
		;
	return (int32_t)offset;
}
     92a:	4630      	mov	r0, r6
     92c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     930:	2000      	movs	r0, #0
     932:	e7db      	b.n	8ec <usart_sync_write+0x14>
     934:	2000      	movs	r0, #0
     936:	e7d9      	b.n	8ec <usart_sync_write+0x14>
     938:	0000385c 	.word	0x0000385c
     93c:	00000cdd 	.word	0x00000cdd
     940:	000011d3 	.word	0x000011d3
     944:	000011dd 	.word	0x000011dd
     948:	000011c5 	.word	0x000011c5

0000094c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     950:	460f      	mov	r7, r1
     952:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     954:	4604      	mov	r4, r0
     956:	b1e0      	cbz	r0, 992 <usart_sync_read+0x46>
     958:	b1e9      	cbz	r1, 996 <usart_sync_read+0x4a>
     95a:	1c10      	adds	r0, r2, #0
     95c:	bf18      	it	ne
     95e:	2001      	movne	r0, #1
     960:	f44f 7286 	mov.w	r2, #268	; 0x10c
     964:	490d      	ldr	r1, [pc, #52]	; (99c <usart_sync_read+0x50>)
     966:	4b0e      	ldr	r3, [pc, #56]	; (9a0 <usart_sync_read+0x54>)
     968:	4798      	blx	r3
     96a:	3f01      	subs	r7, #1
	uint32_t                      offset = 0;
     96c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     96e:	3408      	adds	r4, #8
     970:	4d0c      	ldr	r5, [pc, #48]	; (9a4 <usart_sync_read+0x58>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     972:	f8df 9034 	ldr.w	r9, [pc, #52]	; 9a8 <usart_sync_read+0x5c>
		while (!_usart_sync_is_byte_received(&descr->device))
     976:	4620      	mov	r0, r4
     978:	47a8      	blx	r5
     97a:	2800      	cmp	r0, #0
     97c:	d0fb      	beq.n	976 <usart_sync_read+0x2a>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     97e:	4620      	mov	r0, r4
     980:	47c8      	blx	r9
     982:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     986:	3601      	adds	r6, #1
     988:	4546      	cmp	r6, r8
     98a:	d3f4      	bcc.n	976 <usart_sync_read+0x2a>

	return (int32_t)offset;
}
     98c:	4630      	mov	r0, r6
     98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io_descr && buf && length);
     992:	2000      	movs	r0, #0
     994:	e7e4      	b.n	960 <usart_sync_read+0x14>
     996:	2000      	movs	r0, #0
     998:	e7e2      	b.n	960 <usart_sync_read+0x14>
     99a:	bf00      	nop
     99c:	0000385c 	.word	0x0000385c
     9a0:	00000cdd 	.word	0x00000cdd
     9a4:	000011e7 	.word	0x000011e7
     9a8:	000011cb 	.word	0x000011cb

000009ac <usart_sync_init>:
{
     9ac:	b538      	push	{r3, r4, r5, lr}
     9ae:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     9b0:	4604      	mov	r4, r0
     9b2:	b198      	cbz	r0, 9dc <usart_sync_init+0x30>
     9b4:	1c08      	adds	r0, r1, #0
     9b6:	bf18      	it	ne
     9b8:	2001      	movne	r0, #1
     9ba:	2234      	movs	r2, #52	; 0x34
     9bc:	4908      	ldr	r1, [pc, #32]	; (9e0 <usart_sync_init+0x34>)
     9be:	4b09      	ldr	r3, [pc, #36]	; (9e4 <usart_sync_init+0x38>)
     9c0:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     9c2:	4629      	mov	r1, r5
     9c4:	f104 0008 	add.w	r0, r4, #8
     9c8:	4b07      	ldr	r3, [pc, #28]	; (9e8 <usart_sync_init+0x3c>)
     9ca:	4798      	blx	r3
	if (init_status) {
     9cc:	4603      	mov	r3, r0
     9ce:	b918      	cbnz	r0, 9d8 <usart_sync_init+0x2c>
	descr->io.read  = usart_sync_read;
     9d0:	4a06      	ldr	r2, [pc, #24]	; (9ec <usart_sync_init+0x40>)
     9d2:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     9d4:	4a06      	ldr	r2, [pc, #24]	; (9f0 <usart_sync_init+0x44>)
     9d6:	6022      	str	r2, [r4, #0]
}
     9d8:	4618      	mov	r0, r3
     9da:	bd38      	pop	{r3, r4, r5, pc}
     9dc:	2000      	movs	r0, #0
     9de:	e7ec      	b.n	9ba <usart_sync_init+0xe>
     9e0:	0000385c 	.word	0x0000385c
     9e4:	00000cdd 	.word	0x00000cdd
     9e8:	00001185 	.word	0x00001185
     9ec:	0000094d 	.word	0x0000094d
     9f0:	000008d9 	.word	0x000008d9

000009f4 <usart_sync_enable>:
{
     9f4:	b510      	push	{r4, lr}
	ASSERT(descr);
     9f6:	4604      	mov	r4, r0
     9f8:	2253      	movs	r2, #83	; 0x53
     9fa:	4906      	ldr	r1, [pc, #24]	; (a14 <usart_sync_enable+0x20>)
     9fc:	3000      	adds	r0, #0
     9fe:	bf18      	it	ne
     a00:	2001      	movne	r0, #1
     a02:	4b05      	ldr	r3, [pc, #20]	; (a18 <usart_sync_enable+0x24>)
     a04:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     a06:	f104 0008 	add.w	r0, r4, #8
     a0a:	4b04      	ldr	r3, [pc, #16]	; (a1c <usart_sync_enable+0x28>)
     a0c:	4798      	blx	r3
}
     a0e:	2000      	movs	r0, #0
     a10:	bd10      	pop	{r4, pc}
     a12:	bf00      	nop
     a14:	0000385c 	.word	0x0000385c
     a18:	00000cdd 	.word	0x00000cdd
     a1c:	000011b1 	.word	0x000011b1

00000a20 <_usb_d_find_ep>:
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     a20:	4b0f      	ldr	r3, [pc, #60]	; (a60 <_usb_d_find_ep+0x40>)
     a22:	7859      	ldrb	r1, [r3, #1]
     a24:	4288      	cmp	r0, r1
     a26:	d018      	beq.n	a5a <_usb_d_find_ep+0x3a>
{
     a28:	b430      	push	{r4, r5}
     a2a:	461a      	mov	r2, r3
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     a2c:	2300      	movs	r3, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     a2e:	f000 050f 	and.w	r5, r0, #15
     a32:	e007      	b.n	a44 <_usb_d_find_ep+0x24>
     a34:	3301      	adds	r3, #1
     a36:	b25b      	sxtb	r3, r3
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     a38:	2b04      	cmp	r3, #4
     a3a:	d009      	beq.n	a50 <_usb_d_find_ep+0x30>
     a3c:	3220      	adds	r2, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     a3e:	7851      	ldrb	r1, [r2, #1]
     a40:	4281      	cmp	r1, r0
     a42:	d007      	beq.n	a54 <_usb_d_find_ep+0x34>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     a44:	7814      	ldrb	r4, [r2, #0]
     a46:	2c00      	cmp	r4, #0
     a48:	d1f4      	bne.n	a34 <_usb_d_find_ep+0x14>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     a4a:	428d      	cmp	r5, r1
     a4c:	d1f2      	bne.n	a34 <_usb_d_find_ep+0x14>
     a4e:	e001      	b.n	a54 <_usb_d_find_ep+0x34>
			return i;
		}
	}
	return -1;
     a50:	f04f 33ff 	mov.w	r3, #4294967295
}
     a54:	4618      	mov	r0, r3
     a56:	bc30      	pop	{r4, r5}
     a58:	4770      	bx	lr
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     a5a:	2300      	movs	r3, #0
}
     a5c:	4618      	mov	r0, r3
     a5e:	4770      	bx	lr
     a60:	20000090 	.word	0x20000090

00000a64 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     a64:	2000      	movs	r0, #0
     a66:	4770      	bx	lr

00000a68 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     a68:	b538      	push	{r3, r4, r5, lr}
     a6a:	4604      	mov	r4, r0
     a6c:	460d      	mov	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     a6e:	4b09      	ldr	r3, [pc, #36]	; (a94 <usb_d_cb_trans_more+0x2c>)
     a70:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     a72:	4b09      	ldr	r3, [pc, #36]	; (a98 <usb_d_cb_trans_more+0x30>)
     a74:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     a78:	789b      	ldrb	r3, [r3, #2]
     a7a:	2b03      	cmp	r3, #3
     a7c:	d001      	beq.n	a82 <usb_d_cb_trans_more+0x1a>
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     a7e:	2000      	movs	r0, #0
}
     a80:	bd38      	pop	{r3, r4, r5, pc}
		return ept->callbacks.more(ep, transfered);
     a82:	4b05      	ldr	r3, [pc, #20]	; (a98 <usb_d_cb_trans_more+0x30>)
     a84:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     a88:	6983      	ldr	r3, [r0, #24]
     a8a:	4629      	mov	r1, r5
     a8c:	4620      	mov	r0, r4
     a8e:	4798      	blx	r3
     a90:	bd38      	pop	{r3, r4, r5, pc}
     a92:	bf00      	nop
     a94:	00000a21 	.word	0x00000a21
     a98:	20000090 	.word	0x20000090

00000a9c <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a9e:	b085      	sub	sp, #20
     aa0:	4606      	mov	r6, r0
     aa2:	460d      	mov	r5, r1
     aa4:	4617      	mov	r7, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     aa6:	4b4d      	ldr	r3, [pc, #308]	; (bdc <_usb_d_cb_trans_done+0x140>)
     aa8:	4798      	blx	r3
     aaa:	4604      	mov	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     aac:	2d00      	cmp	r5, #0
     aae:	d15b      	bne.n	b68 <_usb_d_cb_trans_done+0xcc>
		ept->xfer.hdr.status = USB_XFER_DONE;
     ab0:	4a4b      	ldr	r2, [pc, #300]	; (be0 <_usb_d_cb_trans_done+0x144>)
     ab2:	0143      	lsls	r3, r0, #5
     ab4:	18d1      	adds	r1, r2, r3
     ab6:	2000      	movs	r0, #0
     ab8:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     aba:	5cd3      	ldrb	r3, [r2, r3]
     abc:	b173      	cbz	r3, adc <_usb_d_cb_trans_done+0x40>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     abe:	4b48      	ldr	r3, [pc, #288]	; (be0 <_usb_d_cb_trans_done+0x144>)
     ac0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     ac4:	2201      	movs	r2, #1
     ac6:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     ac8:	4845      	ldr	r0, [pc, #276]	; (be0 <_usb_d_cb_trans_done+0x144>)
     aca:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     ace:	69c3      	ldr	r3, [r0, #28]
     ad0:	463a      	mov	r2, r7
     ad2:	78c1      	ldrb	r1, [r0, #3]
     ad4:	4630      	mov	r0, r6
     ad6:	4798      	blx	r3
}
     ad8:	b005      	add	sp, #20
     ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     adc:	788b      	ldrb	r3, [r1, #2]
     ade:	2b03      	cmp	r3, #3
     ae0:	d00b      	beq.n	afa <_usb_d_cb_trans_done+0x5e>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     ae2:	483f      	ldr	r0, [pc, #252]	; (be0 <_usb_d_cb_trans_done+0x144>)
     ae4:	eb00 1244 	add.w	r2, r0, r4, lsl #5
     ae8:	4614      	mov	r4, r2
     aea:	69d3      	ldr	r3, [r2, #28]
     aec:	320c      	adds	r2, #12
     aee:	2100      	movs	r1, #0
     af0:	7860      	ldrb	r0, [r4, #1]
     af2:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     af4:	2302      	movs	r3, #2
     af6:	70a3      	strb	r3, [r4, #2]
     af8:	e7ee      	b.n	ad8 <_usb_d_cb_trans_done+0x3c>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     afa:	460b      	mov	r3, r1
     afc:	f991 500c 	ldrsb.w	r5, [r1, #12]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     b00:	460a      	mov	r2, r1
     b02:	69ce      	ldr	r6, [r1, #28]
     b04:	320c      	adds	r2, #12
     b06:	2101      	movs	r1, #1
     b08:	7858      	ldrb	r0, [r3, #1]
     b0a:	47b0      	blx	r6
		if (err) {
     b0c:	b1a0      	cbz	r0, b38 <_usb_d_cb_trans_done+0x9c>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     b0e:	4b34      	ldr	r3, [pc, #208]	; (be0 <_usb_d_cb_trans_done+0x144>)
     b10:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     b14:	2205      	movs	r2, #5
     b16:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     b18:	2202      	movs	r2, #2
     b1a:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     b1c:	2d00      	cmp	r5, #0
     b1e:	db09      	blt.n	b34 <_usb_d_cb_trans_done+0x98>
     b20:	482f      	ldr	r0, [pc, #188]	; (be0 <_usb_d_cb_trans_done+0x144>)
     b22:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     b26:	7840      	ldrb	r0, [r0, #1]
     b28:	f040 0080 	orr.w	r0, r0, #128	; 0x80
     b2c:	2101      	movs	r1, #1
     b2e:	4b2d      	ldr	r3, [pc, #180]	; (be4 <_usb_d_cb_trans_done+0x148>)
     b30:	4798      	blx	r3
     b32:	e7d1      	b.n	ad8 <_usb_d_cb_trans_done+0x3c>
     b34:	7858      	ldrb	r0, [r3, #1]
     b36:	e7f9      	b.n	b2c <_usb_d_cb_trans_done+0x90>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     b38:	4829      	ldr	r0, [pc, #164]	; (be0 <_usb_d_cb_trans_done+0x144>)
     b3a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     b3e:	2304      	movs	r3, #4
     b40:	7083      	strb	r3, [r0, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     b42:	7843      	ldrb	r3, [r0, #1]
	struct usb_d_transfer trans
     b44:	2200      	movs	r2, #0
     b46:	9201      	str	r2, [sp, #4]
     b48:	9202      	str	r2, [sp, #8]
     b4a:	4295      	cmp	r5, r2
     b4c:	bfac      	ite	ge
     b4e:	f043 0380 	orrge.w	r3, r3, #128	; 0x80
     b52:	f003 030f 	andlt.w	r3, r3, #15
     b56:	f88d 300c 	strb.w	r3, [sp, #12]
     b5a:	2301      	movs	r3, #1
     b5c:	f88d 300d 	strb.w	r3, [sp, #13]
	return _usb_d_dev_ep_trans(&trans);
     b60:	a801      	add	r0, sp, #4
     b62:	4b21      	ldr	r3, [pc, #132]	; (be8 <_usb_d_cb_trans_done+0x14c>)
     b64:	4798      	blx	r3
     b66:	e7b7      	b.n	ad8 <_usb_d_cb_trans_done+0x3c>
	} else if (code == USB_TRANS_STALL) {
     b68:	2d01      	cmp	r5, #1
     b6a:	d00a      	beq.n	b82 <_usb_d_cb_trans_done+0xe6>
	} else if (code == USB_TRANS_ABORT) {
     b6c:	2d02      	cmp	r5, #2
     b6e:	d01c      	beq.n	baa <_usb_d_cb_trans_done+0x10e>
	} else if (code == USB_TRANS_RESET) {
     b70:	2d03      	cmp	r5, #3
     b72:	d02a      	beq.n	bca <_usb_d_cb_trans_done+0x12e>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     b74:	4b1a      	ldr	r3, [pc, #104]	; (be0 <_usb_d_cb_trans_done+0x144>)
     b76:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     b7a:	2206      	movs	r2, #6
     b7c:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     b7e:	70da      	strb	r2, [r3, #3]
     b80:	e7a2      	b.n	ac8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_HALT;
     b82:	4a17      	ldr	r2, [pc, #92]	; (be0 <_usb_d_cb_trans_done+0x144>)
     b84:	0143      	lsls	r3, r0, #5
     b86:	18d1      	adds	r1, r2, r3
     b88:	2002      	movs	r0, #2
     b8a:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     b8c:	5cd3      	ldrb	r3, [r2, r3]
     b8e:	b12b      	cbz	r3, b9c <_usb_d_cb_trans_done+0x100>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     b90:	4b13      	ldr	r3, [pc, #76]	; (be0 <_usb_d_cb_trans_done+0x144>)
     b92:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     b96:	2205      	movs	r2, #5
     b98:	709a      	strb	r2, [r3, #2]
     b9a:	e795      	b.n	ac8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     b9c:	460b      	mov	r3, r1
     b9e:	7098      	strb	r0, [r3, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     ba0:	2100      	movs	r1, #0
     ba2:	4630      	mov	r0, r6
     ba4:	4b0f      	ldr	r3, [pc, #60]	; (be4 <_usb_d_cb_trans_done+0x148>)
     ba6:	4798      	blx	r3
     ba8:	e78e      	b.n	ac8 <_usb_d_cb_trans_done+0x2c>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     baa:	4a0d      	ldr	r2, [pc, #52]	; (be0 <_usb_d_cb_trans_done+0x144>)
     bac:	0143      	lsls	r3, r0, #5
     bae:	18d1      	adds	r1, r2, r3
     bb0:	2004      	movs	r0, #4
     bb2:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     bb4:	5cd3      	ldrb	r3, [r2, r3]
     bb6:	b12b      	cbz	r3, bc4 <_usb_d_cb_trans_done+0x128>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     bb8:	4b09      	ldr	r3, [pc, #36]	; (be0 <_usb_d_cb_trans_done+0x144>)
     bba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     bbe:	2201      	movs	r2, #1
     bc0:	709a      	strb	r2, [r3, #2]
     bc2:	e781      	b.n	ac8 <_usb_d_cb_trans_done+0x2c>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     bc4:	2302      	movs	r3, #2
     bc6:	708b      	strb	r3, [r1, #2]
			return;
     bc8:	e786      	b.n	ad8 <_usb_d_cb_trans_done+0x3c>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     bca:	4b05      	ldr	r3, [pc, #20]	; (be0 <_usb_d_cb_trans_done+0x144>)
     bcc:	eb03 1340 	add.w	r3, r3, r0, lsl #5
     bd0:	2200      	movs	r2, #0
     bd2:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     bd4:	2205      	movs	r2, #5
     bd6:	70da      	strb	r2, [r3, #3]
     bd8:	e776      	b.n	ac8 <_usb_d_cb_trans_done+0x2c>
     bda:	bf00      	nop
     bdc:	00000a21 	.word	0x00000a21
     be0:	20000090 	.word	0x20000090
     be4:	00001c1d 	.word	0x00001c1d
     be8:	00001dc5 	.word	0x00001dc5

00000bec <usb_d_cb_trans_setup>:
{
     bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     bf0:	4605      	mov	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     bf2:	4b1c      	ldr	r3, [pc, #112]	; (c64 <usb_d_cb_trans_setup+0x78>)
     bf4:	4798      	blx	r3
     bf6:	4606      	mov	r6, r0
	uint8_t *        req      = ept->xfer.req;
     bf8:	4c1b      	ldr	r4, [pc, #108]	; (c68 <usb_d_cb_trans_setup+0x7c>)
     bfa:	eb04 1440 	add.w	r4, r4, r0, lsl #5
     bfe:	340c      	adds	r4, #12
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     c00:	4621      	mov	r1, r4
     c02:	4628      	mov	r0, r5
     c04:	4b19      	ldr	r3, [pc, #100]	; (c6c <usb_d_cb_trans_setup+0x80>)
     c06:	4798      	blx	r3
	if (n != 8) {
     c08:	b2c0      	uxtb	r0, r0
     c0a:	2808      	cmp	r0, #8
     c0c:	d009      	beq.n	c22 <usb_d_cb_trans_setup+0x36>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     c0e:	2101      	movs	r1, #1
     c10:	4628      	mov	r0, r5
     c12:	4c17      	ldr	r4, [pc, #92]	; (c70 <usb_d_cb_trans_setup+0x84>)
     c14:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     c16:	2101      	movs	r1, #1
     c18:	f045 0080 	orr.w	r0, r5, #128	; 0x80
     c1c:	47a0      	blx	r4
		return;
     c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     c22:	2100      	movs	r1, #0
     c24:	4628      	mov	r0, r5
     c26:	4f12      	ldr	r7, [pc, #72]	; (c70 <usb_d_cb_trans_setup+0x84>)
     c28:	47b8      	blx	r7
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     c2a:	f045 0880 	orr.w	r8, r5, #128	; 0x80
     c2e:	2100      	movs	r1, #0
     c30:	4640      	mov	r0, r8
     c32:	47b8      	blx	r7
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     c34:	4b0c      	ldr	r3, [pc, #48]	; (c68 <usb_d_cb_trans_setup+0x7c>)
     c36:	eb03 1346 	add.w	r3, r3, r6, lsl #5
     c3a:	2201      	movs	r2, #1
     c3c:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     c3e:	695b      	ldr	r3, [r3, #20]
     c40:	4621      	mov	r1, r4
     c42:	4628      	mov	r0, r5
     c44:	4798      	blx	r3
     c46:	b108      	cbz	r0, c4c <usb_d_cb_trans_setup+0x60>
     c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     c4c:	4b06      	ldr	r3, [pc, #24]	; (c68 <usb_d_cb_trans_setup+0x7c>)
     c4e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
     c52:	2305      	movs	r3, #5
     c54:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     c56:	2101      	movs	r1, #1
     c58:	4628      	mov	r0, r5
     c5a:	47b8      	blx	r7
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     c5c:	2101      	movs	r1, #1
     c5e:	4640      	mov	r0, r8
     c60:	47b8      	blx	r7
     c62:	e7f1      	b.n	c48 <usb_d_cb_trans_setup+0x5c>
     c64:	00000a21 	.word	0x00000a21
     c68:	20000090 	.word	0x20000090
     c6c:	00001d65 	.word	0x00001d65
     c70:	00001c1d 	.word	0x00001c1d

00000c74 <usb_d_init>:

int32_t usb_d_init(void)
{
     c74:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     c76:	4b11      	ldr	r3, [pc, #68]	; (cbc <usb_d_init+0x48>)
     c78:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     c7a:	2800      	cmp	r0, #0
     c7c:	db1c      	blt.n	cb8 <usb_d_init+0x44>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     c7e:	4c10      	ldr	r4, [pc, #64]	; (cc0 <usb_d_init+0x4c>)
     c80:	2280      	movs	r2, #128	; 0x80
     c82:	2100      	movs	r1, #0
     c84:	4620      	mov	r0, r4
     c86:	4b0f      	ldr	r3, [pc, #60]	; (cc4 <usb_d_init+0x50>)
     c88:	4798      	blx	r3
     c8a:	4623      	mov	r3, r4
     c8c:	f104 0080 	add.w	r0, r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     c90:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     c92:	4a0d      	ldr	r2, [pc, #52]	; (cc8 <usb_d_init+0x54>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     c94:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     c96:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     c98:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     c9a:	61da      	str	r2, [r3, #28]
     c9c:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     c9e:	4283      	cmp	r3, r0
     ca0:	d1f8      	bne.n	c94 <usb_d_init+0x20>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     ca2:	490a      	ldr	r1, [pc, #40]	; (ccc <usb_d_init+0x58>)
     ca4:	2000      	movs	r0, #0
     ca6:	4c0a      	ldr	r4, [pc, #40]	; (cd0 <usb_d_init+0x5c>)
     ca8:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     caa:	490a      	ldr	r1, [pc, #40]	; (cd4 <usb_d_init+0x60>)
     cac:	2001      	movs	r0, #1
     cae:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     cb0:	4909      	ldr	r1, [pc, #36]	; (cd8 <usb_d_init+0x64>)
     cb2:	2002      	movs	r0, #2
     cb4:	47a0      	blx	r4
	return ERR_NONE;
     cb6:	2000      	movs	r0, #0
}
     cb8:	bd10      	pop	{r4, pc}
     cba:	bf00      	nop
     cbc:	00001b21 	.word	0x00001b21
     cc0:	20000090 	.word	0x20000090
     cc4:	000027d3 	.word	0x000027d3
     cc8:	00000a65 	.word	0x00000a65
     ccc:	00000bed 	.word	0x00000bed
     cd0:	00001fa5 	.word	0x00001fa5
     cd4:	00000a69 	.word	0x00000a69
     cd8:	00000a9d 	.word	0x00000a9d

00000cdc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     cdc:	b900      	cbnz	r0, ce0 <assert+0x4>
		__asm("BKPT #0");
     cde:	be00      	bkpt	0x0000
     ce0:	4770      	bx	lr
	...

00000ce4 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     ce4:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     ce6:	4a06      	ldr	r2, [pc, #24]	; (d00 <_sbrk+0x1c>)
     ce8:	6812      	ldr	r2, [r2, #0]
     cea:	b122      	cbz	r2, cf6 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     cec:	4a04      	ldr	r2, [pc, #16]	; (d00 <_sbrk+0x1c>)
     cee:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     cf0:	4403      	add	r3, r0
     cf2:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     cf4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     cf6:	4903      	ldr	r1, [pc, #12]	; (d04 <_sbrk+0x20>)
     cf8:	4a01      	ldr	r2, [pc, #4]	; (d00 <_sbrk+0x1c>)
     cfa:	6011      	str	r1, [r2, #0]
     cfc:	e7f6      	b.n	cec <_sbrk+0x8>
     cfe:	bf00      	nop
     d00:	20000110 	.word	0x20000110
     d04:	2000c378 	.word	0x2000c378

00000d08 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     d08:	f04f 30ff 	mov.w	r0, #4294967295
     d0c:	4770      	bx	lr

00000d0e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     d12:	604b      	str	r3, [r1, #4]

	return 0;
}
     d14:	2000      	movs	r0, #0
     d16:	4770      	bx	lr

00000d18 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     d18:	2001      	movs	r0, #1
     d1a:	4770      	bx	lr

00000d1c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     d1c:	2000      	movs	r0, #0
     d1e:	4770      	bx	lr

00000d20 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     d20:	f640 639c 	movw	r3, #3740	; 0xe9c
     d24:	fb03 f000 	mul.w	r0, r3, r0
     d28:	4770      	bx	lr
	...

00000d2c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     d2c:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     d2e:	4a08      	ldr	r2, [pc, #32]	; (d50 <_init_chip+0x24>)
     d30:	8813      	ldrh	r3, [r2, #0]
     d32:	b29b      	uxth	r3, r3
     d34:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     d36:	4b07      	ldr	r3, [pc, #28]	; (d54 <_init_chip+0x28>)
     d38:	4798      	blx	r3
	_oscctrl_init_sources();
     d3a:	4b07      	ldr	r3, [pc, #28]	; (d58 <_init_chip+0x2c>)
     d3c:	4798      	blx	r3
	_mclk_init();
     d3e:	4b07      	ldr	r3, [pc, #28]	; (d5c <_init_chip+0x30>)
     d40:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     d42:	4b07      	ldr	r3, [pc, #28]	; (d60 <_init_chip+0x34>)
     d44:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     d46:	f640 70ff 	movw	r0, #4095	; 0xfff
     d4a:	4b06      	ldr	r3, [pc, #24]	; (d64 <_init_chip+0x38>)
     d4c:	4798      	blx	r3
     d4e:	bd08      	pop	{r3, pc}
     d50:	41004000 	.word	0x41004000
     d54:	00000f31 	.word	0x00000f31
     d58:	00000f51 	.word	0x00000f51
     d5c:	00000e59 	.word	0x00000e59
     d60:	00000f55 	.word	0x00000f55
     d64:	00000dfd 	.word	0x00000dfd

00000d68 <_ext_irq_init>:
	};
}

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
     d68:	4b23      	ldr	r3, [pc, #140]	; (df8 <_ext_irq_init+0x90>)
     d6a:	685b      	ldr	r3, [r3, #4]
/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
     d6c:	f013 0f01 	tst.w	r3, #1
     d70:	d11f      	bne.n	db2 <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     d72:	4a21      	ldr	r2, [pc, #132]	; (df8 <_ext_irq_init+0x90>)
     d74:	6853      	ldr	r3, [r2, #4]
     d76:	f013 0f03 	tst.w	r3, #3
     d7a:	d1fb      	bne.n	d74 <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
     d7c:	4b1e      	ldr	r3, [pc, #120]	; (df8 <_ext_irq_init+0x90>)
     d7e:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
     d80:	f013 0f02 	tst.w	r3, #2
     d84:	d00d      	beq.n	da2 <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     d86:	4a1c      	ldr	r2, [pc, #112]	; (df8 <_ext_irq_init+0x90>)
     d88:	7813      	ldrb	r3, [r2, #0]
     d8a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     d8e:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     d90:	6853      	ldr	r3, [r2, #4]
     d92:	f013 0f03 	tst.w	r3, #3
     d96:	d1fb      	bne.n	d90 <_ext_irq_init+0x28>
     d98:	4a17      	ldr	r2, [pc, #92]	; (df8 <_ext_irq_init+0x90>)
     d9a:	6853      	ldr	r3, [r2, #4]
     d9c:	f013 0f02 	tst.w	r3, #2
     da0:	d1fb      	bne.n	d9a <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
     da2:	2201      	movs	r2, #1
     da4:	4b14      	ldr	r3, [pc, #80]	; (df8 <_ext_irq_init+0x90>)
     da6:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     da8:	461a      	mov	r2, r3
     daa:	6853      	ldr	r3, [r2, #4]
     dac:	f013 0f03 	tst.w	r3, #3
     db0:	d1fb      	bne.n	daa <_ext_irq_init+0x42>
     db2:	4a11      	ldr	r2, [pc, #68]	; (df8 <_ext_irq_init+0x90>)
     db4:	6853      	ldr	r3, [r2, #4]
     db6:	f013 0f01 	tst.w	r3, #1
     dba:	d1fb      	bne.n	db4 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
     dbc:	4a0e      	ldr	r2, [pc, #56]	; (df8 <_ext_irq_init+0x90>)
     dbe:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
     dc0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
     dc4:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     dc6:	6853      	ldr	r3, [r2, #4]
     dc8:	f013 0f03 	tst.w	r3, #3
     dcc:	d1fb      	bne.n	dc6 <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     dce:	4b0a      	ldr	r3, [pc, #40]	; (df8 <_ext_irq_init+0x90>)
     dd0:	2200      	movs	r2, #0
     dd2:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     dd4:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
     dd6:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
     dd8:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
     dda:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
     ddc:	61da      	str	r2, [r3, #28]
     dde:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
     de0:	781a      	ldrb	r2, [r3, #0]
     de2:	f042 0202 	orr.w	r2, r2, #2
     de6:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     de8:	461a      	mov	r2, r3
     dea:	6853      	ldr	r3, [r2, #4]
     dec:	f013 0f03 	tst.w	r3, #3
     df0:	d1fb      	bne.n	dea <_ext_irq_init+0x82>
	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
}
     df2:	2000      	movs	r0, #0
     df4:	4770      	bx	lr
     df6:	bf00      	nop
     df8:	40002800 	.word	0x40002800

00000dfc <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     dfc:	f010 0f01 	tst.w	r0, #1
     e00:	d008      	beq.n	e14 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e02:	4a11      	ldr	r2, [pc, #68]	; (e48 <_gclk_init_generators_by_fref+0x4c>)
     e04:	4b11      	ldr	r3, [pc, #68]	; (e4c <_gclk_init_generators_by_fref+0x50>)
     e06:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e08:	4619      	mov	r1, r3
     e0a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     e0e:	684b      	ldr	r3, [r1, #4]
     e10:	4213      	tst	r3, r2
     e12:	d1fc      	bne.n	e0e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     e14:	f010 0f02 	tst.w	r0, #2
     e18:	d008      	beq.n	e2c <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e1a:	4a0d      	ldr	r2, [pc, #52]	; (e50 <_gclk_init_generators_by_fref+0x54>)
     e1c:	4b0b      	ldr	r3, [pc, #44]	; (e4c <_gclk_init_generators_by_fref+0x50>)
     e1e:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e20:	4619      	mov	r1, r3
     e22:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     e26:	684b      	ldr	r3, [r1, #4]
     e28:	4213      	tst	r3, r2
     e2a:	d1fc      	bne.n	e26 <_gclk_init_generators_by_fref+0x2a>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     e2c:	f010 0f08 	tst.w	r0, #8
     e30:	d008      	beq.n	e44 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e32:	4a08      	ldr	r2, [pc, #32]	; (e54 <_gclk_init_generators_by_fref+0x58>)
     e34:	4b05      	ldr	r3, [pc, #20]	; (e4c <_gclk_init_generators_by_fref+0x50>)
     e36:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e38:	4619      	mov	r1, r3
     e3a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     e3e:	684b      	ldr	r3, [r1, #4]
     e40:	4213      	tst	r3, r2
     e42:	d1fc      	bne.n	e3e <_gclk_init_generators_by_fref+0x42>
     e44:	4770      	bx	lr
     e46:	bf00      	nop
     e48:	00041107 	.word	0x00041107
     e4c:	40001c00 	.word	0x40001c00
     e50:	00010108 	.word	0x00010108
     e54:	00010105 	.word	0x00010105

00000e58 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     e58:	2201      	movs	r2, #1
     e5a:	4b01      	ldr	r3, [pc, #4]	; (e60 <_mclk_init+0x8>)
     e5c:	715a      	strb	r2, [r3, #5]
     e5e:	4770      	bx	lr
     e60:	40000800 	.word	0x40000800

00000e64 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
     e64:	b508      	push	{r3, lr}
	void *const hw = device->hw;
     e66:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
     e68:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
     e6a:	f012 0f01 	tst.w	r2, #1
     e6e:	d005      	beq.n	e7c <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
     e70:	2201      	movs	r2, #1
     e72:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
     e74:	6803      	ldr	r3, [r0, #0]
     e76:	b153      	cbz	r3, e8e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
     e78:	4798      	blx	r3
     e7a:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
     e7c:	8a1a      	ldrh	r2, [r3, #16]
     e7e:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
     e80:	b12a      	cbz	r2, e8e <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
     e82:	f240 225e 	movw	r2, #606	; 0x25e
     e86:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
     e88:	6843      	ldr	r3, [r0, #4]
     e8a:	b103      	cbz	r3, e8e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
     e8c:	4798      	blx	r3
     e8e:	bd08      	pop	{r3, pc}

00000e90 <_flash_init>:
{
     e90:	b538      	push	{r3, r4, r5, lr}
     e92:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     e94:	4605      	mov	r5, r0
     e96:	b350      	cbz	r0, eee <_flash_init+0x5e>
     e98:	4816      	ldr	r0, [pc, #88]	; (ef4 <_flash_init+0x64>)
     e9a:	4281      	cmp	r1, r0
     e9c:	bf14      	ite	ne
     e9e:	2000      	movne	r0, #0
     ea0:	2001      	moveq	r0, #1
     ea2:	224b      	movs	r2, #75	; 0x4b
     ea4:	4914      	ldr	r1, [pc, #80]	; (ef8 <_flash_init+0x68>)
     ea6:	4b15      	ldr	r3, [pc, #84]	; (efc <_flash_init+0x6c>)
     ea8:	4798      	blx	r3
	device->hw = hw;
     eaa:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
     eac:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
     eae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
     eb2:	049b      	lsls	r3, r3, #18
     eb4:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
     eb6:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
     eb8:	4b11      	ldr	r3, [pc, #68]	; (f00 <_flash_init+0x70>)
     eba:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ebc:	4b11      	ldr	r3, [pc, #68]	; (f04 <_flash_init+0x74>)
     ebe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     ec2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     ec6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     eca:	f3bf 8f6f 	isb	sy
     ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     ed6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     eda:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ede:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
     ee2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ee6:	6019      	str	r1, [r3, #0]
     ee8:	601a      	str	r2, [r3, #0]
}
     eea:	2000      	movs	r0, #0
     eec:	bd38      	pop	{r3, r4, r5, pc}
     eee:	2000      	movs	r0, #0
     ef0:	e7d7      	b.n	ea2 <_flash_init+0x12>
     ef2:	bf00      	nop
     ef4:	41004000 	.word	0x41004000
     ef8:	00003878 	.word	0x00003878
     efc:	00000cdd 	.word	0x00000cdd
     f00:	20000114 	.word	0x20000114
     f04:	e000e100 	.word	0xe000e100

00000f08 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
     f08:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
     f0a:	4b02      	ldr	r3, [pc, #8]	; (f14 <NVMCTRL_0_Handler+0xc>)
     f0c:	6818      	ldr	r0, [r3, #0]
     f0e:	4b02      	ldr	r3, [pc, #8]	; (f18 <NVMCTRL_0_Handler+0x10>)
     f10:	4798      	blx	r3
     f12:	bd08      	pop	{r3, pc}
     f14:	20000114 	.word	0x20000114
     f18:	00000e65 	.word	0x00000e65

00000f1c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
     f1c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
     f1e:	4b02      	ldr	r3, [pc, #8]	; (f28 <NVMCTRL_1_Handler+0xc>)
     f20:	6818      	ldr	r0, [r3, #0]
     f22:	4b02      	ldr	r3, [pc, #8]	; (f2c <NVMCTRL_1_Handler+0x10>)
     f24:	4798      	blx	r3
     f26:	bd08      	pop	{r3, pc}
     f28:	20000114 	.word	0x20000114
     f2c:	00000e65 	.word	0x00000e65

00000f30 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     f30:	4b06      	ldr	r3, [pc, #24]	; (f4c <_osc32kctrl_init_sources+0x1c>)
     f32:	f242 328e 	movw	r2, #9102	; 0x238e
     f36:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     f38:	2200      	movs	r2, #0
     f3a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     f3c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     f3e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     f40:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     f44:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     f46:	2201      	movs	r2, #1
     f48:	741a      	strb	r2, [r3, #16]
     f4a:	4770      	bx	lr
     f4c:	40001400 	.word	0x40001400

00000f50 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     f50:	4770      	bx	lr
	...

00000f54 <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
     f54:	4a1c      	ldr	r2, [pc, #112]	; (fc8 <_oscctrl_init_referenced_generators+0x74>)
     f56:	4b1d      	ldr	r3, [pc, #116]	; (fcc <_oscctrl_init_referenced_generators+0x78>)
     f58:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     f5a:	461a      	mov	r2, r3
     f5c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
     f5e:	f013 0f06 	tst.w	r3, #6
     f62:	d1fb      	bne.n	f5c <_oscctrl_init_referenced_generators+0x8>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
     f64:	4b19      	ldr	r3, [pc, #100]	; (fcc <_oscctrl_init_referenced_generators+0x78>)
     f66:	f44f 6202 	mov.w	r2, #2080	; 0x820
     f6a:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
     f6c:	2202      	movs	r2, #2
     f6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     f72:	461a      	mov	r2, r3
     f74:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
     f76:	f013 0f02 	tst.w	r3, #2
     f7a:	d1fb      	bne.n	f74 <_oscctrl_init_referenced_generators+0x20>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
     f7c:	4a14      	ldr	r2, [pc, #80]	; (fd0 <_oscctrl_init_referenced_generators+0x7c>)
     f7e:	4b13      	ldr	r3, [pc, #76]	; (fcc <_oscctrl_init_referenced_generators+0x78>)
     f80:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     f82:	461a      	mov	r2, r3
     f84:	6d13      	ldr	r3, [r2, #80]	; 0x50
     f86:	f013 0f06 	tst.w	r3, #6
     f8a:	d1fb      	bne.n	f84 <_oscctrl_init_referenced_generators+0x30>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
     f8c:	4b0f      	ldr	r3, [pc, #60]	; (fcc <_oscctrl_init_referenced_generators+0x78>)
     f8e:	2220      	movs	r2, #32
     f90:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
     f92:	2202      	movs	r2, #2
     f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     f98:	461a      	mov	r2, r3
     f9a:	6d13      	ldr	r3, [r2, #80]	; 0x50
     f9c:	f013 0f02 	tst.w	r3, #2
     fa0:	d1fb      	bne.n	f9a <_oscctrl_init_referenced_generators+0x46>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
     fa2:	4b0a      	ldr	r3, [pc, #40]	; (fcc <_oscctrl_init_referenced_generators+0x78>)
     fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
     fa6:	f012 0f01 	tst.w	r2, #1
     faa:	d103      	bne.n	fb4 <_oscctrl_init_referenced_generators+0x60>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
     fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     fae:	f012 0f02 	tst.w	r2, #2
     fb2:	d0f7      	beq.n	fa4 <_oscctrl_init_referenced_generators+0x50>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
     fb4:	4b05      	ldr	r3, [pc, #20]	; (fcc <_oscctrl_init_referenced_generators+0x78>)
     fb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
     fb8:	f012 0f01 	tst.w	r2, #1
     fbc:	d103      	bne.n	fc6 <_oscctrl_init_referenced_generators+0x72>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
     fbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     fc0:	f012 0f02 	tst.w	r2, #2
     fc4:	d0f7      	beq.n	fb6 <_oscctrl_init_referenced_generators+0x62>
     fc6:	4770      	bx	lr
     fc8:	00010e4d 	.word	0x00010e4d
     fcc:	40001000 	.word	0x40001000
     fd0:	000d05b7 	.word	0x000d05b7

00000fd4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     fd4:	b500      	push	{lr}
     fd6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     fd8:	4b0d      	ldr	r3, [pc, #52]	; (1010 <RAMECC_Handler+0x3c>)
     fda:	789b      	ldrb	r3, [r3, #2]
     fdc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     fde:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     fe0:	9b01      	ldr	r3, [sp, #4]
     fe2:	f013 0f02 	tst.w	r3, #2
     fe6:	d006      	beq.n	ff6 <RAMECC_Handler+0x22>
     fe8:	4b0a      	ldr	r3, [pc, #40]	; (1014 <RAMECC_Handler+0x40>)
     fea:	681b      	ldr	r3, [r3, #0]
     fec:	b11b      	cbz	r3, ff6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     fee:	4a08      	ldr	r2, [pc, #32]	; (1010 <RAMECC_Handler+0x3c>)
     ff0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     ff2:	4798      	blx	r3
     ff4:	e009      	b.n	100a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     ff6:	9b01      	ldr	r3, [sp, #4]
     ff8:	f013 0f01 	tst.w	r3, #1
     ffc:	d005      	beq.n	100a <RAMECC_Handler+0x36>
     ffe:	4b05      	ldr	r3, [pc, #20]	; (1014 <RAMECC_Handler+0x40>)
    1000:	685b      	ldr	r3, [r3, #4]
    1002:	b113      	cbz	r3, 100a <RAMECC_Handler+0x36>
    1004:	4a02      	ldr	r2, [pc, #8]	; (1010 <RAMECC_Handler+0x3c>)
    1006:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1008:	4798      	blx	r3
	} else {
		return;
	}
}
    100a:	b003      	add	sp, #12
    100c:	f85d fb04 	ldr.w	pc, [sp], #4
    1010:	41020000 	.word	0x41020000
    1014:	20000358 	.word	0x20000358

00001018 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1018:	b470      	push	{r4, r5, r6}
    101a:	b089      	sub	sp, #36	; 0x24
    101c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    101e:	466c      	mov	r4, sp
    1020:	4d0d      	ldr	r5, [pc, #52]	; (1058 <_sercom_get_hardware_index+0x40>)
    1022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1026:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    102a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    102e:	9b00      	ldr	r3, [sp, #0]
    1030:	42b3      	cmp	r3, r6
    1032:	d00d      	beq.n	1050 <_sercom_get_hardware_index+0x38>
    1034:	4631      	mov	r1, r6
    1036:	ab01      	add	r3, sp, #4
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1038:	2001      	movs	r0, #1
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    103a:	f853 2b04 	ldr.w	r2, [r3], #4
    103e:	428a      	cmp	r2, r1
    1040:	d007      	beq.n	1052 <_sercom_get_hardware_index+0x3a>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1042:	3001      	adds	r0, #1
    1044:	2808      	cmp	r0, #8
    1046:	d1f8      	bne.n	103a <_sercom_get_hardware_index+0x22>
			return i;
		}
	}
	return 0;
    1048:	2000      	movs	r0, #0
}
    104a:	b009      	add	sp, #36	; 0x24
    104c:	bc70      	pop	{r4, r5, r6}
    104e:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1050:	2000      	movs	r0, #0
			return i;
    1052:	b2c0      	uxtb	r0, r0
    1054:	e7f9      	b.n	104a <_sercom_get_hardware_index+0x32>
    1056:	bf00      	nop
    1058:	00003898 	.word	0x00003898

0000105c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    105c:	b510      	push	{r4, lr}
    105e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1060:	4b44      	ldr	r3, [pc, #272]	; (1174 <_usart_init+0x118>)
    1062:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1064:	2800      	cmp	r0, #0
    1066:	d062      	beq.n	112e <_usart_init+0xd2>
    1068:	2801      	cmp	r0, #1
    106a:	d05e      	beq.n	112a <_usart_init+0xce>
    106c:	2802      	cmp	r0, #2
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    106e:	bf08      	it	eq
    1070:	2102      	moveq	r1, #2
		if (_usarts[i].number == sercom_offset) {
    1072:	d006      	beq.n	1082 <_usart_init+0x26>
	ASSERT(false);
    1074:	f240 2247 	movw	r2, #583	; 0x247
    1078:	493f      	ldr	r1, [pc, #252]	; (1178 <_usart_init+0x11c>)
    107a:	2000      	movs	r0, #0
    107c:	4b3f      	ldr	r3, [pc, #252]	; (117c <_usart_init+0x120>)
    107e:	4798      	blx	r3
	return 0;
    1080:	2100      	movs	r1, #0
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    1082:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    1084:	f013 0f01 	tst.w	r3, #1
    1088:	d122      	bne.n	10d0 <_usart_init+0x74>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    108a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    108e:	4a3c      	ldr	r2, [pc, #240]	; (1180 <_usart_init+0x124>)
    1090:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1096:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    109a:	69e3      	ldr	r3, [r4, #28]
    109c:	f013 0f03 	tst.w	r3, #3
    10a0:	d1fb      	bne.n	109a <_usart_init+0x3e>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    10a2:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    10a4:	f013 0f02 	tst.w	r3, #2
    10a8:	d00b      	beq.n	10c2 <_usart_init+0x66>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    10aa:	6823      	ldr	r3, [r4, #0]
    10ac:	f023 0302 	bic.w	r3, r3, #2
    10b0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10b2:	69e3      	ldr	r3, [r4, #28]
    10b4:	f013 0f03 	tst.w	r3, #3
    10b8:	d1fb      	bne.n	10b2 <_usart_init+0x56>
    10ba:	69e3      	ldr	r3, [r4, #28]
    10bc:	f013 0f02 	tst.w	r3, #2
    10c0:	d1fb      	bne.n	10ba <_usart_init+0x5e>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    10c2:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10c6:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10c8:	69e3      	ldr	r3, [r4, #28]
    10ca:	f013 0f03 	tst.w	r3, #3
    10ce:	d1fb      	bne.n	10c8 <_usart_init+0x6c>
    10d0:	69e3      	ldr	r3, [r4, #28]
    10d2:	f013 0f01 	tst.w	r3, #1
    10d6:	d1fb      	bne.n	10d0 <_usart_init+0x74>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    10d8:	460a      	mov	r2, r1
    10da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    10de:	4b28      	ldr	r3, [pc, #160]	; (1180 <_usart_init+0x124>)
    10e0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    10e4:	6a48      	ldr	r0, [r1, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10e6:	6020      	str	r0, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10e8:	69e3      	ldr	r3, [r4, #28]
    10ea:	f013 0f03 	tst.w	r3, #3
    10ee:	d1fb      	bne.n	10e8 <_usart_init+0x8c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    10f0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    10f4:	4922      	ldr	r1, [pc, #136]	; (1180 <_usart_init+0x124>)
    10f6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    10fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    10fc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    10fe:	69e3      	ldr	r3, [r4, #28]
    1100:	f013 0f1f 	tst.w	r3, #31
    1104:	d1fb      	bne.n	10fe <_usart_init+0xa2>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1106:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    110a:	491d      	ldr	r1, [pc, #116]	; (1180 <_usart_init+0x124>)
    110c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1112:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1114:	f410 4fc0 	tst.w	r0, #24576	; 0x6000
    1118:	d10b      	bne.n	1132 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    111a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    111e:	4918      	ldr	r1, [pc, #96]	; (1180 <_usart_init+0x124>)
    1120:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1124:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    1126:	81a3      	strh	r3, [r4, #12]
    1128:	e012      	b.n	1150 <_usart_init+0xf4>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    112a:	2101      	movs	r1, #1
    112c:	e7a9      	b.n	1082 <_usart_init+0x26>
    112e:	2100      	movs	r1, #0
    1130:	e7a7      	b.n	1082 <_usart_init+0x26>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1132:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    1136:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    113a:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    113c:	89a1      	ldrh	r1, [r4, #12]
    113e:	f360 010c 	bfi	r1, r0, #0, #13
    1142:	81a1      	strh	r1, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1144:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
    1148:	89a3      	ldrh	r3, [r4, #12]
    114a:	f361 334f 	bfi	r3, r1, #13, #3
    114e:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1150:	4b0b      	ldr	r3, [pc, #44]	; (1180 <_usart_init+0x124>)
    1152:	0051      	lsls	r1, r2, #1
    1154:	1888      	adds	r0, r1, r2
    1156:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    115a:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    115e:	73a0      	strb	r0, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1160:	440a      	add	r2, r1
    1162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    116a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
    116e:	2000      	movs	r0, #0
    1170:	bd10      	pop	{r4, pc}
    1172:	bf00      	nop
    1174:	00001019 	.word	0x00001019
    1178:	00003918 	.word	0x00003918
    117c:	00000cdd 	.word	0x00000cdd
    1180:	00003898 	.word	0x00003898

00001184 <_usart_sync_init>:
{
    1184:	b538      	push	{r3, r4, r5, lr}
    1186:	460c      	mov	r4, r1
	ASSERT(device);
    1188:	4605      	mov	r5, r0
    118a:	22bb      	movs	r2, #187	; 0xbb
    118c:	4905      	ldr	r1, [pc, #20]	; (11a4 <_usart_sync_init+0x20>)
    118e:	3000      	adds	r0, #0
    1190:	bf18      	it	ne
    1192:	2001      	movne	r0, #1
    1194:	4b04      	ldr	r3, [pc, #16]	; (11a8 <_usart_sync_init+0x24>)
    1196:	4798      	blx	r3
	device->hw = hw;
    1198:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    119a:	4620      	mov	r0, r4
    119c:	4b03      	ldr	r3, [pc, #12]	; (11ac <_usart_sync_init+0x28>)
    119e:	4798      	blx	r3
}
    11a0:	bd38      	pop	{r3, r4, r5, pc}
    11a2:	bf00      	nop
    11a4:	00003918 	.word	0x00003918
    11a8:	00000cdd 	.word	0x00000cdd
    11ac:	0000105d 	.word	0x0000105d

000011b0 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    11b0:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    11b2:	6813      	ldr	r3, [r2, #0]
    11b4:	f043 0302 	orr.w	r3, r3, #2
    11b8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    11ba:	69d3      	ldr	r3, [r2, #28]
    11bc:	f013 0f03 	tst.w	r3, #3
    11c0:	d1fb      	bne.n	11ba <_usart_sync_enable+0xa>
}
    11c2:	4770      	bx	lr

000011c4 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    11c4:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
    11c6:	6299      	str	r1, [r3, #40]	; 0x28
    11c8:	4770      	bx	lr

000011ca <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    11ca:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    11cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    11ce:	b2c0      	uxtb	r0, r0
    11d0:	4770      	bx	lr

000011d2 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    11d2:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    11d4:	7e18      	ldrb	r0, [r3, #24]
}
    11d6:	f000 0001 	and.w	r0, r0, #1
    11da:	4770      	bx	lr

000011dc <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    11dc:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    11de:	7e18      	ldrb	r0, [r3, #24]
}
    11e0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    11e4:	4770      	bx	lr

000011e6 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    11e6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    11e8:	7e18      	ldrb	r0, [r3, #24]
}
    11ea:	f3c0 0080 	ubfx	r0, r0, #2, #1
    11ee:	4770      	bx	lr

000011f0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    11f0:	4b03      	ldr	r3, [pc, #12]	; (1200 <_delay_init+0x10>)
    11f2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    11f6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    11f8:	2205      	movs	r2, #5
    11fa:	601a      	str	r2, [r3, #0]
    11fc:	4770      	bx	lr
    11fe:	bf00      	nop
    1200:	e000e010 	.word	0xe000e010

00001204 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1204:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1206:	b303      	cbz	r3, 124a <_delay_cycles+0x46>
{
    1208:	b430      	push	{r4, r5}
    120a:	1e5d      	subs	r5, r3, #1
    120c:	b2ed      	uxtb	r5, r5
	while (n--) {
    120e:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    1210:	4a12      	ldr	r2, [pc, #72]	; (125c <_delay_cycles+0x58>)
    1212:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    1216:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1218:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    121a:	6813      	ldr	r3, [r2, #0]
    121c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1220:	d0fb      	beq.n	121a <_delay_cycles+0x16>
	while (n--) {
    1222:	3801      	subs	r0, #1
    1224:	b2c0      	uxtb	r0, r0
    1226:	28ff      	cmp	r0, #255	; 0xff
    1228:	d1f5      	bne.n	1216 <_delay_cycles+0x12>
    122a:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    122e:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1232:	3101      	adds	r1, #1
    1234:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1236:	4b09      	ldr	r3, [pc, #36]	; (125c <_delay_cycles+0x58>)
    1238:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    123a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    123c:	461a      	mov	r2, r3
    123e:	6813      	ldr	r3, [r2, #0]
    1240:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1244:	d0fb      	beq.n	123e <_delay_cycles+0x3a>
		;
}
    1246:	bc30      	pop	{r4, r5}
    1248:	4770      	bx	lr
	SysTick->LOAD = buf;
    124a:	4b04      	ldr	r3, [pc, #16]	; (125c <_delay_cycles+0x58>)
    124c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    124e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1250:	461a      	mov	r2, r3
    1252:	6813      	ldr	r3, [r2, #0]
    1254:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1258:	d0fb      	beq.n	1252 <_delay_cycles+0x4e>
    125a:	4770      	bx	lr
    125c:	e000e010 	.word	0xe000e010

00001260 <_rand_sync_init>:
	}
	return ERR_NONE;
}

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
    1260:	b538      	push	{r3, r4, r5, lr}
    1262:	460c      	mov	r4, r1
	int32_t rc;

	ASSERT(dev && hw);
    1264:	4605      	mov	r5, r0
    1266:	b1b8      	cbz	r0, 1298 <_rand_sync_init+0x38>
    1268:	1c08      	adds	r0, r1, #0
    126a:	bf18      	it	ne
    126c:	2001      	movne	r0, #1
    126e:	223d      	movs	r2, #61	; 0x3d
    1270:	490c      	ldr	r1, [pc, #48]	; (12a4 <_rand_sync_init+0x44>)
    1272:	4b0d      	ldr	r3, [pc, #52]	; (12a8 <_rand_sync_init+0x48>)
    1274:	4798      	blx	r3
}

static inline hri_trng_ctrla_reg_t hri_trng_get_CTRLA_reg(const void *const hw, hri_trng_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Trng *)hw)->CTRLA.reg;
    1276:	7823      	ldrb	r3, [r4, #0]
	if (hri_trng_get_CTRLA_reg(hw, TRNG_CTRLA_ENABLE)) {
    1278:	f013 0f02 	tst.w	r3, #2
    127c:	d10e      	bne.n	129c <_rand_sync_init+0x3c>
	((Trng *)hw)->CTRLA.reg &= ~TRNG_CTRLA_RUNSTDBY;
    127e:	7823      	ldrb	r3, [r4, #0]
    1280:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    1284:	7023      	strb	r3, [r4, #0]
}

static inline void hri_trng_clear_EVCTRL_DATARDYEO_bit(const void *const hw)
{
	TRNG_CRITICAL_SECTION_ENTER();
	((Trng *)hw)->EVCTRL.reg &= ~TRNG_EVCTRL_DATARDYEO;
    1286:	7923      	ldrb	r3, [r4, #4]
    1288:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    128c:	7123      	strb	r3, [r4, #4]

	rc = _trng_init(hw);
	if (rc == ERR_NONE) {
		dev->prvt   = hw;
    128e:	602c      	str	r4, [r5, #0]
		dev->n_bits = 32;
    1290:	2320      	movs	r3, #32
    1292:	712b      	strb	r3, [r5, #4]
	return ERR_NONE;
    1294:	2000      	movs	r0, #0
    1296:	bd38      	pop	{r3, r4, r5, pc}
    1298:	2000      	movs	r0, #0
    129a:	e7e8      	b.n	126e <_rand_sync_init+0xe>
		return ERR_DENIED;
    129c:	f06f 0010 	mvn.w	r0, #16
	}
	return rc;
}
    12a0:	bd38      	pop	{r3, r4, r5, pc}
    12a2:	bf00      	nop
    12a4:	00003934 	.word	0x00003934
    12a8:	00000cdd 	.word	0x00000cdd

000012ac <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
    12ac:	2000      	movs	r0, #0
    12ae:	4770      	bx	lr

000012b0 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
    12b0:	b538      	push	{r3, r4, r5, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
    12b2:	7c83      	ldrb	r3, [r0, #18]
    12b4:	f003 030f 	and.w	r3, r3, #15
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    12b8:	7cc2      	ldrb	r2, [r0, #19]

	if (!is_ctrl) {
    12ba:	f002 0107 	and.w	r1, r2, #7
    12be:	2901      	cmp	r1, #1
    12c0:	d00b      	beq.n	12da <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    12c2:	015a      	lsls	r2, r3, #5
    12c4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    12c8:	2110      	movs	r1, #16
    12ca:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
    12ce:	015b      	lsls	r3, r3, #5
    12d0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    12d4:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
    12d8:	bd38      	pop	{r3, r4, r5, pc}
	}
	/* Control transfer:
	 * SETUP transaction will terminate IN/OUT transaction,
	 * and start new transaction with received SETUP packet.
	 */
	if (_usb_d_dev_ep_is_busy(ept)) {
    12da:	f012 0f40 	tst.w	r2, #64	; 0x40
    12de:	d00c      	beq.n	12fa <_usb_d_dev_handle_setup+0x4a>
		ept->flags.bits.is_busy = 0;
    12e0:	7cc2      	ldrb	r2, [r0, #19]
    12e2:	f36f 1286 	bfc	r2, #6, #1
    12e6:	74c2      	strb	r2, [r0, #19]
    12e8:	015a      	lsls	r2, r3, #5
    12ea:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    12ee:	2180      	movs	r1, #128	; 0x80
    12f0:	f882 1104 	strb.w	r1, [r2, #260]	; 0x104
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    12f4:	2140      	movs	r1, #64	; 0x40
    12f6:	f882 1105 	strb.w	r1, [r2, #261]	; 0x105

		/* Stop transfer on either direction. */
		_usbd_ep_set_in_rdy(epn, 1, false);
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	ept->flags.bits.is_stalled = 0;
    12fa:	7cc2      	ldrb	r2, [r0, #19]
    12fc:	f36f 02c3 	bfc	r2, #3, #1
    1300:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
    1302:	4909      	ldr	r1, [pc, #36]	; (1328 <_usb_d_dev_handle_setup+0x78>)
    1304:	015a      	lsls	r2, r3, #5
    1306:	188c      	adds	r4, r1, r2
    1308:	2500      	movs	r5, #0
    130a:	72a5      	strb	r5, [r4, #10]
    130c:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    130e:	f102 4382 	add.w	r3, r2, #1090519040	; 0x41000000
    1312:	246f      	movs	r4, #111	; 0x6f
    1314:	f883 4107 	strb.w	r4, [r3, #263]	; 0x107
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1318:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    131c:	f882 4108 	strb.w	r4, [r2, #264]	; 0x108
	_usbd_ep_clear_bank_status(epn, 0);
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
    1320:	6e8b      	ldr	r3, [r1, #104]	; 0x68
    1322:	7c80      	ldrb	r0, [r0, #18]
    1324:	4798      	blx	r3
    1326:	bd38      	pop	{r3, r4, r5, pc}
    1328:	20000118 	.word	0x20000118

0000132c <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
    132c:	b508      	push	{r3, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
    132e:	2320      	movs	r3, #32
    1330:	fa03 f101 	lsl.w	r1, r3, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1334:	b2c9      	uxtb	r1, r1
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1336:	7c83      	ldrb	r3, [r0, #18]
    1338:	f003 030f 	and.w	r3, r3, #15
    133c:	015b      	lsls	r3, r3, #5
    133e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1342:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
    1346:	4b03      	ldr	r3, [pc, #12]	; (1354 <_usb_d_dev_handle_stall+0x28>)
    1348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    134a:	6882      	ldr	r2, [r0, #8]
    134c:	2101      	movs	r1, #1
    134e:	7c80      	ldrb	r0, [r0, #18]
    1350:	4798      	blx	r3
    1352:	bd08      	pop	{r3, pc}
    1354:	20000118 	.word	0x20000118

00001358 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
    1358:	b538      	push	{r3, r4, r5, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    135a:	7c84      	ldrb	r4, [r0, #18]
    135c:	2cff      	cmp	r4, #255	; 0xff
    135e:	d003      	beq.n	1368 <_usb_d_dev_trans_done+0x10>
    1360:	7cc3      	ldrb	r3, [r0, #19]
    1362:	f013 0f40 	tst.w	r3, #64	; 0x40
    1366:	d100      	bne.n	136a <_usb_d_dev_trans_done+0x12>
    1368:	bd38      	pop	{r3, r4, r5, pc}
		return;
	}
	ept->flags.bits.is_busy = 0;
    136a:	7cc2      	ldrb	r2, [r0, #19]
    136c:	f36f 1286 	bfc	r2, #6, #1
    1370:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
    1372:	4a03      	ldr	r2, [pc, #12]	; (1380 <_usb_d_dev_trans_done+0x28>)
    1374:	6f15      	ldr	r5, [r2, #112]	; 0x70
    1376:	6882      	ldr	r2, [r0, #8]
    1378:	4620      	mov	r0, r4
    137a:	47a8      	blx	r5
    137c:	e7f4      	b.n	1368 <_usb_d_dev_trans_done+0x10>
    137e:	bf00      	nop
    1380:	20000118 	.word	0x20000118

00001384 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
    1384:	b530      	push	{r4, r5, lr}
    1386:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1388:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
    138a:	2425      	movs	r4, #37	; 0x25
    138c:	f88d 4004 	strb.w	r4, [sp, #4]
    1390:	244a      	movs	r4, #74	; 0x4a
    1392:	f88d 4005 	strb.w	r4, [sp, #5]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
    1396:	2bff      	cmp	r3, #255	; 0xff
    1398:	d01e      	beq.n	13d8 <_usb_d_dev_trans_stop+0x54>
    139a:	7cc4      	ldrb	r4, [r0, #19]
    139c:	f014 0f40 	tst.w	r4, #64	; 0x40
    13a0:	d01a      	beq.n	13d8 <_usb_d_dev_trans_stop+0x54>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    13a2:	f003 040f 	and.w	r4, r3, #15
		return;
	}
	/* Stop transfer */
	if (dir) {
    13a6:	b1c9      	cbz	r1, 13dc <_usb_d_dev_trans_stop+0x58>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    13a8:	0163      	lsls	r3, r4, #5
    13aa:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    13ae:	2580      	movs	r5, #128	; 0x80
    13b0:	f883 5104 	strb.w	r5, [r3, #260]	; 0x104
    13b4:	460b      	mov	r3, r1
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
    13b6:	a902      	add	r1, sp, #8
    13b8:	440b      	add	r3, r1
    13ba:	f813 1c04 	ldrb.w	r1, [r3, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    13be:	0163      	lsls	r3, r4, #5
    13c0:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    13c4:	f883 1107 	strb.w	r1, [r3, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    13c8:	0163      	lsls	r3, r4, #5
    13ca:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    13ce:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
    13d2:	4611      	mov	r1, r2
    13d4:	4b05      	ldr	r3, [pc, #20]	; (13ec <_usb_d_dev_trans_stop+0x68>)
    13d6:	4798      	blx	r3
}
    13d8:	b003      	add	sp, #12
    13da:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    13dc:	0163      	lsls	r3, r4, #5
    13de:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    13e2:	2540      	movs	r5, #64	; 0x40
    13e4:	f883 5105 	strb.w	r5, [r3, #261]	; 0x105
    13e8:	e7e4      	b.n	13b4 <_usb_d_dev_trans_stop+0x30>
    13ea:	bf00      	nop
    13ec:	00001359 	.word	0x00001359

000013f0 <_usb_d_dev_handle_trfail>:
{
    13f0:	b530      	push	{r4, r5, lr}
    13f2:	b083      	sub	sp, #12
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
    13f4:	7c83      	ldrb	r3, [r0, #18]
    13f6:	f003 030f 	and.w	r3, r3, #15
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
    13fa:	2204      	movs	r2, #4
    13fc:	f88d 2004 	strb.w	r2, [sp, #4]
    1400:	2208      	movs	r2, #8
    1402:	f88d 2005 	strb.w	r2, [sp, #5]
    1406:	015a      	lsls	r2, r3, #5
	uint8_t            eptype
    1408:	460c      	mov	r4, r1
    140a:	b391      	cbz	r1, 1472 <_usb_d_dev_handle_trfail+0x82>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    140c:	f102 4182 	add.w	r1, r2, #1090519040	; 0x41000000
    1410:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
    1414:	f3c5 1502 	ubfx	r5, r5, #4, #3
	st.reg = bank[bank_n].STATUS_BK.reg;
    1418:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    141c:	4a32      	ldr	r2, [pc, #200]	; (14e8 <_usb_d_dev_handle_trfail+0xf8>)
    141e:	440a      	add	r2, r1
    1420:	7a91      	ldrb	r1, [r2, #10]
    1422:	b2c9      	uxtb	r1, r1
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1424:	2d02      	cmp	r5, #2
    1426:	d02c      	beq.n	1482 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
    1428:	f011 0f02 	tst.w	r1, #2
    142c:	d045      	beq.n	14ba <_usb_d_dev_handle_trfail+0xca>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    142e:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
    1430:	7a91      	ldrb	r1, [r2, #10]
    1432:	f36f 0141 	bfc	r1, #1, #1
    1436:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1438:	aa02      	add	r2, sp, #8
    143a:	4422      	add	r2, r4
    143c:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1440:	015a      	lsls	r2, r3, #5
    1442:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1446:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    144a:	015b      	lsls	r3, r3, #5
    144c:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1450:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
    1454:	f005 0307 	and.w	r3, r5, #7
    1458:	2b01      	cmp	r3, #1
    145a:	d143      	bne.n	14e4 <_usb_d_dev_handle_trfail+0xf4>
    145c:	7cc3      	ldrb	r3, [r0, #19]
    145e:	f013 0f40 	tst.w	r3, #64	; 0x40
    1462:	d03f      	beq.n	14e4 <_usb_d_dev_handle_trfail+0xf4>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
    1464:	09d9      	lsrs	r1, r3, #7
    1466:	428c      	cmp	r4, r1
    1468:	d03c      	beq.n	14e4 <_usb_d_dev_handle_trfail+0xf4>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
    146a:	2200      	movs	r2, #0
    146c:	4b1f      	ldr	r3, [pc, #124]	; (14ec <_usb_d_dev_handle_trfail+0xfc>)
    146e:	4798      	blx	r3
    1470:	e038      	b.n	14e4 <_usb_d_dev_handle_trfail+0xf4>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1472:	0159      	lsls	r1, r3, #5
    1474:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1478:	f891 5100 	ldrb.w	r5, [r1, #256]	; 0x100
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
    147c:	f005 0507 	and.w	r5, r5, #7
    1480:	e7ca      	b.n	1418 <_usb_d_dev_handle_trfail+0x28>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
    1482:	f011 0f01 	tst.w	r1, #1
    1486:	d0cf      	beq.n	1428 <_usb_d_dev_handle_trfail+0x38>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
    1488:	7a91      	ldrb	r1, [r2, #10]
    148a:	f36f 0100 	bfc	r1, #0, #1
    148e:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    1490:	aa02      	add	r2, sp, #8
    1492:	4422      	add	r2, r4
    1494:	f812 1c04 	ldrb.w	r1, [r2, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1498:	015a      	lsls	r2, r3, #5
    149a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    149e:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    14a2:	015b      	lsls	r3, r3, #5
    14a4:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    14a8:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
    14ac:	2204      	movs	r2, #4
    14ae:	1c21      	adds	r1, r4, #0
    14b0:	bf18      	it	ne
    14b2:	2101      	movne	r1, #1
    14b4:	4b0d      	ldr	r3, [pc, #52]	; (14ec <_usb_d_dev_handle_trfail+0xfc>)
    14b6:	4798      	blx	r3
    14b8:	e014      	b.n	14e4 <_usb_d_dev_handle_trfail+0xf4>
	bank->STATUS_BK.reg     = 0;
    14ba:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    14be:	4a0a      	ldr	r2, [pc, #40]	; (14e8 <_usb_d_dev_handle_trfail+0xf8>)
    14c0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
    14c4:	2100      	movs	r1, #0
    14c6:	7291      	strb	r1, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
    14c8:	aa02      	add	r2, sp, #8
    14ca:	4414      	add	r4, r2
    14cc:	f814 1c04 	ldrb.w	r1, [r4, #-4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    14d0:	015a      	lsls	r2, r3, #5
    14d2:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    14d6:	f882 1107 	strb.w	r1, [r2, #263]	; 0x107
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    14da:	015b      	lsls	r3, r3, #5
    14dc:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    14e0:	f883 1108 	strb.w	r1, [r3, #264]	; 0x108
}
    14e4:	b003      	add	sp, #12
    14e6:	bd30      	pop	{r4, r5, pc}
    14e8:	20000118 	.word	0x20000118
    14ec:	00001385 	.word	0x00001385

000014f0 <_usb_d_dev_reset_epts>:
{
    14f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14f4:	4d0c      	ldr	r5, [pc, #48]	; (1528 <_usb_d_dev_reset_epts+0x38>)
    14f6:	f105 0474 	add.w	r4, r5, #116	; 0x74
    14fa:	f505 7594 	add.w	r5, r5, #296	; 0x128
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    14fe:	f04f 0803 	mov.w	r8, #3
    1502:	4f0a      	ldr	r7, [pc, #40]	; (152c <_usb_d_dev_reset_epts+0x3c>)
		dev_inst.ep[i].ep       = 0xFF;
    1504:	26ff      	movs	r6, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
    1506:	4641      	mov	r1, r8
    1508:	4620      	mov	r0, r4
    150a:	47b8      	blx	r7
		dev_inst.ep[i].ep       = 0xFF;
    150c:	74a6      	strb	r6, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
    150e:	2300      	movs	r3, #0
    1510:	74e3      	strb	r3, [r4, #19]
    1512:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1514:	42ac      	cmp	r4, r5
    1516:	d1f6      	bne.n	1506 <_usb_d_dev_reset_epts+0x16>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
    1518:	2260      	movs	r2, #96	; 0x60
    151a:	4619      	mov	r1, r3
    151c:	4802      	ldr	r0, [pc, #8]	; (1528 <_usb_d_dev_reset_epts+0x38>)
    151e:	4b04      	ldr	r3, [pc, #16]	; (1530 <_usb_d_dev_reset_epts+0x40>)
    1520:	4798      	blx	r3
    1522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1526:	bf00      	nop
    1528:	20000118 	.word	0x20000118
    152c:	00001359 	.word	0x00001359
    1530:	000027d3 	.word	0x000027d3

00001534 <_usb_d_dev_in_next>:
{
    1534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1538:	4605      	mov	r5, r0
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
    153a:	7c84      	ldrb	r4, [r0, #18]
    153c:	f004 040f 	and.w	r4, r4, #15
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    1540:	4688      	mov	r8, r1
    1542:	2900      	cmp	r1, #0
    1544:	f000 809f 	beq.w	1686 <_usb_d_dev_in_next+0x152>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
    1548:	4b58      	ldr	r3, [pc, #352]	; (16ac <_usb_d_dev_in_next+0x178>)
    154a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
    154e:	6958      	ldr	r0, [r3, #20]
    1550:	f3c0 0e0d 	ubfx	lr, r0, #0, #14
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1554:	8a2b      	ldrh	r3, [r5, #16]
    1556:	f240 32ff 	movw	r2, #1023	; 0x3ff
    155a:	4293      	cmp	r3, r2
    155c:	f000 808d 	beq.w	167a <_usb_d_dev_in_next+0x146>
    1560:	3b01      	subs	r3, #1
    1562:	b298      	uxth	r0, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1564:	7cef      	ldrb	r7, [r5, #19]
    1566:	f007 0707 	and.w	r7, r7, #7
	if (isr) {
    156a:	f1b8 0f00 	cmp.w	r8, #0
    156e:	d005      	beq.n	157c <_usb_d_dev_in_next+0x48>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1570:	0162      	lsls	r2, r4, #5
    1572:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1576:	2302      	movs	r3, #2
    1578:	f882 3107 	strb.w	r3, [r2, #263]	; 0x107
	ept->trans_count += trans_count;
    157c:	68a9      	ldr	r1, [r5, #8]
    157e:	eb0e 0301 	add.w	r3, lr, r1
    1582:	60ab      	str	r3, [r5, #8]
	if (ept->trans_count < ept->trans_size) {
    1584:	686e      	ldr	r6, [r5, #4]
    1586:	42b3      	cmp	r3, r6
    1588:	d23f      	bcs.n	160a <_usb_d_dev_in_next+0xd6>
		trans_next = ept->trans_size - ept->trans_count;
    158a:	1af6      	subs	r6, r6, r3
    158c:	b2b6      	uxth	r6, r6
		if (ept->flags.bits.use_cache) {
    158e:	7cea      	ldrb	r2, [r5, #19]
    1590:	f012 0f20 	tst.w	r2, #32
    1594:	d02d      	beq.n	15f2 <_usb_d_dev_in_next+0xbe>
    1596:	8a2a      	ldrh	r2, [r5, #16]
    1598:	4296      	cmp	r6, r2
    159a:	bf28      	it	cs
    159c:	4616      	movcs	r6, r2
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
    159e:	6829      	ldr	r1, [r5, #0]
    15a0:	4632      	mov	r2, r6
    15a2:	4419      	add	r1, r3
    15a4:	68e8      	ldr	r0, [r5, #12]
    15a6:	4b42      	ldr	r3, [pc, #264]	; (16b0 <_usb_d_dev_in_next+0x17c>)
    15a8:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
    15aa:	68ea      	ldr	r2, [r5, #12]
	bank->ADDR.reg          = addr;
    15ac:	4b3f      	ldr	r3, [pc, #252]	; (16ac <_usb_d_dev_in_next+0x178>)
    15ae:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    15b2:	611a      	str	r2, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    15b4:	4b3d      	ldr	r3, [pc, #244]	; (16ac <_usb_d_dev_in_next+0x178>)
    15b6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    15ba:	695a      	ldr	r2, [r3, #20]
    15bc:	f366 020d 	bfi	r2, r6, #0, #14
    15c0:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    15c2:	695a      	ldr	r2, [r3, #20]
    15c4:	f36f 329b 	bfc	r2, #14, #14
    15c8:	615a      	str	r2, [r3, #20]
	if (!isr) {
    15ca:	f1b8 0f00 	cmp.w	r8, #0
    15ce:	d108      	bne.n	15e2 <_usb_d_dev_in_next+0xae>
			inten = USB_D_BANK1_INT_FLAGS;
    15d0:	2f01      	cmp	r7, #1
    15d2:	bf0c      	ite	eq
    15d4:	224e      	moveq	r2, #78	; 0x4e
    15d6:	224a      	movne	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    15d8:	0163      	lsls	r3, r4, #5
    15da:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    15de:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    15e2:	0164      	lsls	r4, r4, #5
    15e4:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    15e8:	2380      	movs	r3, #128	; 0x80
    15ea:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
    15ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15f2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    15f6:	bf28      	it	cs
    15f8:	f44f 5600 	movcs.w	r6, #8192	; 0x2000
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
    15fc:	6829      	ldr	r1, [r5, #0]
    15fe:	440b      	add	r3, r1
	bank->ADDR.reg          = addr;
    1600:	4a2a      	ldr	r2, [pc, #168]	; (16ac <_usb_d_dev_in_next+0x178>)
    1602:	eb02 1244 	add.w	r2, r2, r4, lsl #5
    1606:	6113      	str	r3, [r2, #16]
    1608:	e7d4      	b.n	15b4 <_usb_d_dev_in_next+0x80>
	} else if (ept->flags.bits.need_zlp) {
    160a:	7ceb      	ldrb	r3, [r5, #19]
    160c:	f013 0f10 	tst.w	r3, #16
    1610:	d00f      	beq.n	1632 <_usb_d_dev_in_next+0xfe>
		ept->flags.bits.need_zlp = 0;
    1612:	7ceb      	ldrb	r3, [r5, #19]
    1614:	f36f 1304 	bfc	r3, #4, #1
    1618:	74eb      	strb	r3, [r5, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
    161a:	4b24      	ldr	r3, [pc, #144]	; (16ac <_usb_d_dev_in_next+0x178>)
    161c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
    1620:	695a      	ldr	r2, [r3, #20]
    1622:	f36f 020d 	bfc	r2, #0, #14
    1626:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
    1628:	695a      	ldr	r2, [r3, #20]
    162a:	f36f 329b 	bfc	r2, #14, #14
    162e:	615a      	str	r2, [r3, #20]
    1630:	e7cb      	b.n	15ca <_usb_d_dev_in_next+0x96>
	if (is_ctrl) {
    1632:	2f01      	cmp	r7, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1634:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1638:	f104 4482 	add.w	r4, r4, #1090519040	; 0x41000000
    163c:	bf0c      	ite	eq
    163e:	234b      	moveq	r3, #75	; 0x4b
    1640:	234a      	movne	r3, #74	; 0x4a
    1642:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
	if (last_pkt == ept->size) {
    1646:	8a2a      	ldrh	r2, [r5, #16]
    1648:	ea00 030e 	and.w	r3, r0, lr
    164c:	429a      	cmp	r2, r3
    164e:	d005      	beq.n	165c <_usb_d_dev_in_next+0x128>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    1650:	2100      	movs	r1, #0
    1652:	4628      	mov	r0, r5
    1654:	4b17      	ldr	r3, [pc, #92]	; (16b4 <_usb_d_dev_in_next+0x180>)
    1656:	4798      	blx	r3
	return;
    1658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ept->flags.bits.is_busy = 0;
    165c:	7ceb      	ldrb	r3, [r5, #19]
    165e:	f36f 1386 	bfc	r3, #6, #1
    1662:	74eb      	strb	r3, [r5, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
    1664:	4b11      	ldr	r3, [pc, #68]	; (16ac <_usb_d_dev_in_next+0x178>)
    1666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    1668:	68a9      	ldr	r1, [r5, #8]
    166a:	7ca8      	ldrb	r0, [r5, #18]
    166c:	4798      	blx	r3
    166e:	b9d0      	cbnz	r0, 16a6 <_usb_d_dev_in_next+0x172>
		ept->flags.bits.is_busy = 1;
    1670:	7ceb      	ldrb	r3, [r5, #19]
    1672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1676:	74eb      	strb	r3, [r5, #19]
    1678:	e7ea      	b.n	1650 <_usb_d_dev_in_next+0x11c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    167a:	7cef      	ldrb	r7, [r5, #19]
    167c:	f007 0707 	and.w	r7, r7, #7
    1680:	f240 30ff 	movw	r0, #1023	; 0x3ff
    1684:	e774      	b.n	1570 <_usb_d_dev_in_next+0x3c>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    1686:	8a03      	ldrh	r3, [r0, #16]
    1688:	f240 32ff 	movw	r2, #1023	; 0x3ff
    168c:	4293      	cmp	r3, r2
    168e:	d107      	bne.n	16a0 <_usb_d_dev_in_next+0x16c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
    1690:	7cef      	ldrb	r7, [r5, #19]
    1692:	f007 0707 	and.w	r7, r7, #7
    1696:	f04f 0e00 	mov.w	lr, #0
    169a:	f240 30ff 	movw	r0, #1023	; 0x3ff
    169e:	e76d      	b.n	157c <_usb_d_dev_in_next+0x48>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
    16a0:	f04f 0e00 	mov.w	lr, #0
    16a4:	e75c      	b.n	1560 <_usb_d_dev_in_next+0x2c>
    16a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16aa:	bf00      	nop
    16ac:	20000118 	.word	0x20000118
    16b0:	000027bd 	.word	0x000027bd
    16b4:	00001359 	.word	0x00001359

000016b8 <_usb_d_dev_out_next>:
{
    16b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16bc:	4604      	mov	r4, r0
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
    16be:	7c85      	ldrb	r5, [r0, #18]
    16c0:	f005 050f 	and.w	r5, r5, #15
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
    16c4:	4689      	mov	r9, r1
    16c6:	2900      	cmp	r1, #0
    16c8:	d056      	beq.n	1778 <_usb_d_dev_out_next+0xc0>
    16ca:	4b74      	ldr	r3, [pc, #464]	; (189c <_usb_d_dev_out_next+0x1e4>)
    16cc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    16d0:	685a      	ldr	r2, [r3, #4]
    16d2:	f3c2 3a8d 	ubfx	sl, r2, #14, #14
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
    16d6:	685f      	ldr	r7, [r3, #4]
    16d8:	f3c7 070d 	ubfx	r7, r7, #0, #14
    16dc:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    16de:	8a06      	ldrh	r6, [r0, #16]
    16e0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    16e4:	429e      	cmp	r6, r3
    16e6:	f000 80ba 	beq.w	185e <_usb_d_dev_out_next+0x1a6>
    16ea:	3e01      	subs	r6, #1
    16ec:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
    16ee:	ea06 070b 	and.w	r7, r6, fp
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    16f2:	f894 8013 	ldrb.w	r8, [r4, #19]
    16f6:	f008 0807 	and.w	r8, r8, #7
	if (isr) {
    16fa:	f1b9 0f00 	cmp.w	r9, #0
    16fe:	d005      	beq.n	170c <_usb_d_dev_out_next+0x54>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1700:	016b      	lsls	r3, r5, #5
    1702:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1706:	2201      	movs	r2, #1
    1708:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	if (ept->flags.bits.use_cache && ept->trans_size) {
    170c:	7ce3      	ldrb	r3, [r4, #19]
    170e:	f013 0f20 	tst.w	r3, #32
    1712:	d00d      	beq.n	1730 <_usb_d_dev_out_next+0x78>
    1714:	6862      	ldr	r2, [r4, #4]
    1716:	2a00      	cmp	r2, #0
    1718:	d037      	beq.n	178a <_usb_d_dev_out_next+0xd2>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
    171a:	68a0      	ldr	r0, [r4, #8]
    171c:	1a12      	subs	r2, r2, r0
    171e:	b292      	uxth	r2, r2
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
    1720:	6823      	ldr	r3, [r4, #0]
    1722:	42ba      	cmp	r2, r7
    1724:	bf28      	it	cs
    1726:	463a      	movcs	r2, r7
    1728:	68e1      	ldr	r1, [r4, #12]
    172a:	4418      	add	r0, r3
    172c:	4b5c      	ldr	r3, [pc, #368]	; (18a0 <_usb_d_dev_out_next+0x1e8>)
    172e:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    1730:	6863      	ldr	r3, [r4, #4]
    1732:	b353      	cbz	r3, 178a <_usb_d_dev_out_next+0xd2>
	} else if (isr && last_pkt < ept->size) {
    1734:	f1b9 0f00 	cmp.w	r9, #0
    1738:	d040      	beq.n	17bc <_usb_d_dev_out_next+0x104>
    173a:	8a22      	ldrh	r2, [r4, #16]
    173c:	42ba      	cmp	r2, r7
    173e:	d93d      	bls.n	17bc <_usb_d_dev_out_next+0x104>
		ept->flags.bits.need_zlp = 0;
    1740:	7ce3      	ldrb	r3, [r4, #19]
    1742:	f36f 1304 	bfc	r3, #4, #1
    1746:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
    1748:	68a3      	ldr	r3, [r4, #8]
    174a:	445b      	add	r3, fp
    174c:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
    174e:	f1b8 0f01 	cmp.w	r8, #1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1752:	ea4f 1345 	mov.w	r3, r5, lsl #5
    1756:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    175a:	bf0c      	ite	eq
    175c:	222d      	moveq	r2, #45	; 0x2d
    175e:	2225      	movne	r2, #37	; 0x25
    1760:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
	if (0 == epn) {
    1764:	b915      	cbnz	r5, 176c <_usb_d_dev_out_next+0xb4>
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1766:	68e2      	ldr	r2, [r4, #12]
	bank->ADDR.reg          = addr;
    1768:	4b4c      	ldr	r3, [pc, #304]	; (189c <_usb_d_dev_out_next+0x1e4>)
    176a:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
    176c:	2100      	movs	r1, #0
    176e:	4620      	mov	r0, r4
    1770:	4b4c      	ldr	r3, [pc, #304]	; (18a4 <_usb_d_dev_out_next+0x1ec>)
    1772:	4798      	blx	r3
	return;
    1774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1778:	8a06      	ldrh	r6, [r0, #16]
    177a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    177e:	429e      	cmp	r6, r3
    1780:	d07b      	beq.n	187a <_usb_d_dev_out_next+0x1c2>
    1782:	f04f 0b00 	mov.w	fp, #0
    1786:	46da      	mov	sl, fp
    1788:	e7af      	b.n	16ea <_usb_d_dev_out_next+0x32>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
    178a:	7ce3      	ldrb	r3, [r4, #19]
    178c:	f013 0f10 	tst.w	r3, #16
    1790:	d06c      	beq.n	186c <_usb_d_dev_out_next+0x1b4>
		ept->flags.bits.need_zlp  = 0;
    1792:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
    1794:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1798:	f043 0320 	orr.w	r3, r3, #32
    179c:	74e3      	strb	r3, [r4, #19]
		_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    179e:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    17a0:	493e      	ldr	r1, [pc, #248]	; (189c <_usb_d_dev_out_next+0x1e4>)
    17a2:	016a      	lsls	r2, r5, #5
    17a4:	188b      	adds	r3, r1, r2
    17a6:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    17a8:	8a21      	ldrh	r1, [r4, #16]
    17aa:	685a      	ldr	r2, [r3, #4]
    17ac:	f361 329b 	bfi	r2, r1, #14, #14
    17b0:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    17b2:	685a      	ldr	r2, [r3, #4]
    17b4:	f36f 020d 	bfc	r2, #0, #14
    17b8:	605a      	str	r2, [r3, #4]
    17ba:	e01d      	b.n	17f8 <_usb_d_dev_out_next+0x140>
		ept->trans_count += trans_size;
    17bc:	68a2      	ldr	r2, [r4, #8]
    17be:	4452      	add	r2, sl
    17c0:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
    17c2:	4293      	cmp	r3, r2
    17c4:	d9c3      	bls.n	174e <_usb_d_dev_out_next+0x96>
			trans_next = ept->trans_size - ept->trans_count;
    17c6:	1a9b      	subs	r3, r3, r2
    17c8:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
    17ca:	7ce1      	ldrb	r1, [r4, #19]
    17cc:	f011 0f20 	tst.w	r1, #32
    17d0:	d026      	beq.n	1820 <_usb_d_dev_out_next+0x168>
    17d2:	8a22      	ldrh	r2, [r4, #16]
    17d4:	4293      	cmp	r3, r2
    17d6:	bf28      	it	cs
    17d8:	4613      	movcs	r3, r2
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    17da:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
    17dc:	016a      	lsls	r2, r5, #5
    17de:	492f      	ldr	r1, [pc, #188]	; (189c <_usb_d_dev_out_next+0x1e4>)
    17e0:	5088      	str	r0, [r1, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    17e2:	4a2e      	ldr	r2, [pc, #184]	; (189c <_usb_d_dev_out_next+0x1e4>)
    17e4:	eb02 1245 	add.w	r2, r2, r5, lsl #5
    17e8:	6851      	ldr	r1, [r2, #4]
    17ea:	f363 319b 	bfi	r1, r3, #14, #14
    17ee:	6051      	str	r1, [r2, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    17f0:	6853      	ldr	r3, [r2, #4]
    17f2:	f36f 030d 	bfc	r3, #0, #14
    17f6:	6053      	str	r3, [r2, #4]
	if (!isr) {
    17f8:	f1b9 0f00 	cmp.w	r9, #0
    17fc:	d108      	bne.n	1810 <_usb_d_dev_out_next+0x158>
		if (is_ctrl) {
    17fe:	f1b8 0f01 	cmp.w	r8, #1
    1802:	d025      	beq.n	1850 <_usb_d_dev_out_next+0x198>
			inten = USB_D_BANK0_INT_FLAGS;
    1804:	2225      	movs	r2, #37	; 0x25
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1806:	016b      	lsls	r3, r5, #5
    1808:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    180c:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1810:	016d      	lsls	r5, r5, #5
    1812:	f105 4582 	add.w	r5, r5, #1090519040	; 0x41000000
    1816:	2340      	movs	r3, #64	; 0x40
    1818:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
    181c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (trans_next > ept->size) {
    1820:	8a21      	ldrh	r1, [r4, #16]
    1822:	428b      	cmp	r3, r1
    1824:	d90a      	bls.n	183c <_usb_d_dev_out_next+0x184>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    182a:	d80e      	bhi.n	184a <_usb_d_dev_out_next+0x192>
    182c:	ea23 0306 	bic.w	r3, r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    1830:	6821      	ldr	r1, [r4, #0]
    1832:	440a      	add	r2, r1
	bank->ADDR.reg          = addr;
    1834:	0169      	lsls	r1, r5, #5
    1836:	4819      	ldr	r0, [pc, #100]	; (189c <_usb_d_dev_out_next+0x1e4>)
    1838:	5042      	str	r2, [r0, r1]
    183a:	e7d2      	b.n	17e2 <_usb_d_dev_out_next+0x12a>
				} else if (trans_next < ept->size) {
    183c:	428b      	cmp	r3, r1
    183e:	d2f7      	bcs.n	1830 <_usb_d_dev_out_next+0x178>
					ept->flags.bits.use_cache = 1;
    1840:	7ce1      	ldrb	r1, [r4, #19]
    1842:	f041 0120 	orr.w	r1, r1, #32
    1846:	74e1      	strb	r1, [r4, #19]
    1848:	e7f2      	b.n	1830 <_usb_d_dev_out_next+0x178>
						trans_next = USB_D_DEV_TRANS_MAX;
    184a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    184e:	e7ef      	b.n	1830 <_usb_d_dev_out_next+0x178>
	bank->STATUS_BK.reg     = 0;
    1850:	4b12      	ldr	r3, [pc, #72]	; (189c <_usb_d_dev_out_next+0x1e4>)
    1852:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    1856:	2200      	movs	r2, #0
    1858:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    185a:	222d      	movs	r2, #45	; 0x2d
    185c:	e7d3      	b.n	1806 <_usb_d_dev_out_next+0x14e>
	uint16_t           last_pkt   = last_trans & size_mask;
    185e:	f3c7 0709 	ubfx	r7, r7, #0, #10
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1862:	f890 8013 	ldrb.w	r8, [r0, #19]
    1866:	f008 0807 	and.w	r8, r8, #7
    186a:	e749      	b.n	1700 <_usb_d_dev_out_next+0x48>
	} else if (isr && last_pkt < ept->size) {
    186c:	f1b9 0f00 	cmp.w	r9, #0
    1870:	d10b      	bne.n	188a <_usb_d_dev_out_next+0x1d2>
		ept->trans_count += trans_size;
    1872:	68a3      	ldr	r3, [r4, #8]
    1874:	4453      	add	r3, sl
    1876:	60a3      	str	r3, [r4, #8]
    1878:	e769      	b.n	174e <_usb_d_dev_out_next+0x96>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    187a:	f890 8013 	ldrb.w	r8, [r0, #19]
    187e:	f008 0807 	and.w	r8, r8, #7
	uint16_t           last_pkt   = last_trans & size_mask;
    1882:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1884:	46bb      	mov	fp, r7
    1886:	46ba      	mov	sl, r7
    1888:	e740      	b.n	170c <_usb_d_dev_out_next+0x54>
	} else if (isr && last_pkt < ept->size) {
    188a:	8a23      	ldrh	r3, [r4, #16]
    188c:	42bb      	cmp	r3, r7
    188e:	f63f af57 	bhi.w	1740 <_usb_d_dev_out_next+0x88>
		ept->trans_count += trans_size;
    1892:	68a3      	ldr	r3, [r4, #8]
    1894:	4453      	add	r3, sl
    1896:	60a3      	str	r3, [r4, #8]
    1898:	e759      	b.n	174e <_usb_d_dev_out_next+0x96>
    189a:	bf00      	nop
    189c:	20000118 	.word	0x20000118
    18a0:	000027bd 	.word	0x000027bd
    18a4:	00001359 	.word	0x00001359

000018a8 <_usb_d_dev_handler>:
{
    18a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    18ac:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    18b0:	8c1e      	ldrh	r6, [r3, #32]
    18b2:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    18b4:	b146      	cbz	r6, 18c8 <_usb_d_dev_handler+0x20>
    18b6:	4d91      	ldr	r5, [pc, #580]	; (1afc <_usb_d_dev_handler+0x254>)
	uint32_t lpm_variable = 0;
    18b8:	2400      	movs	r4, #0
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    18ba:	f1a5 0774 	sub.w	r7, r5, #116	; 0x74
			_usb_d_dev_handle_setup(ept);
    18be:	f8df 9258 	ldr.w	r9, [pc, #600]	; 1b18 <_usb_d_dev_handler+0x270>
			_usb_d_dev_handle_trfail(ept, 1);
    18c2:	f8df 8258 	ldr.w	r8, [pc, #600]	; 1b1c <_usb_d_dev_handler+0x274>
    18c6:	e0d3      	b.n	1a70 <_usb_d_dev_handler+0x1c8>
	return tmp;
}

static inline hri_usbdevice_intflag_reg_t hri_usbdevice_read_INTFLAG_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    18c8:	8b99      	ldrh	r1, [r3, #28]
	return tmp;
}

static inline hri_usbdevice_intenset_reg_t hri_usbdevice_read_INTEN_reg(const void *const hw)
{
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    18ca:	8b1b      	ldrh	r3, [r3, #24]
    18cc:	b29b      	uxth	r3, r3
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    18ce:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    18d0:	f013 0f04 	tst.w	r3, #4
    18d4:	d11d      	bne.n	1912 <_usb_d_dev_handler+0x6a>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    18d6:	f413 7f00 	tst.w	r3, #512	; 0x200
    18da:	d123      	bne.n	1924 <_usb_d_dev_handler+0x7c>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    18dc:	f013 0f80 	tst.w	r3, #128	; 0x80
    18e0:	d147      	bne.n	1972 <_usb_d_dev_handler+0xca>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    18e2:	f013 0f70 	tst.w	r3, #112	; 0x70
    18e6:	d14f      	bne.n	1988 <_usb_d_dev_handler+0xe0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    18e8:	f013 0f08 	tst.w	r3, #8
    18ec:	d16e      	bne.n	19cc <_usb_d_dev_handler+0x124>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    18ee:	f013 0f01 	tst.w	r3, #1
    18f2:	d0e0      	beq.n	18b6 <_usb_d_dev_handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    18f4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    18f8:	f240 2201 	movw	r2, #513	; 0x201
    18fc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = ~data;
}

static inline void hri_usbdevice_clear_INTEN_reg(const void *const hw, hri_usbdevice_intenset_reg_t mask)
{
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    18fe:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1900:	2270      	movs	r2, #112	; 0x70
    1902:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1904:	4b7e      	ldr	r3, [pc, #504]	; (1b00 <_usb_d_dev_handler+0x258>)
    1906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1908:	2100      	movs	r1, #0
    190a:	2004      	movs	r0, #4
    190c:	4798      	blx	r3
    190e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1912:	2204      	movs	r2, #4
    1914:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1918:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    191a:	4b79      	ldr	r3, [pc, #484]	; (1b00 <_usb_d_dev_handler+0x258>)
    191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    191e:	4798      	blx	r3
    1920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1924:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1928:	f240 2201 	movw	r2, #513	; 0x201
    192c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    192e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1930:	2270      	movs	r2, #112	; 0x70
    1932:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1934:	4b72      	ldr	r3, [pc, #456]	; (1b00 <_usb_d_dev_handler+0x258>)
    1936:	891b      	ldrh	r3, [r3, #8]
    1938:	f003 030f 	and.w	r3, r3, #15
    193c:	2b03      	cmp	r3, #3
    193e:	d00e      	beq.n	195e <_usb_d_dev_handler+0xb6>
    1940:	4b6f      	ldr	r3, [pc, #444]	; (1b00 <_usb_d_dev_handler+0x258>)
    1942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1944:	f003 030f 	and.w	r3, r3, #15
    1948:	2b03      	cmp	r3, #3
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    194a:	bf08      	it	eq
    194c:	2201      	moveq	r2, #1
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    194e:	d007      	beq.n	1960 <_usb_d_dev_handler+0xb8>
	uint32_t lpm_variable = 0;
    1950:	2100      	movs	r1, #0
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1952:	4b6b      	ldr	r3, [pc, #428]	; (1b00 <_usb_d_dev_handler+0x258>)
    1954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1956:	2003      	movs	r0, #3
    1958:	4798      	blx	r3
    195a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    195e:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1960:	4b67      	ldr	r3, [pc, #412]	; (1b00 <_usb_d_dev_handler+0x258>)
    1962:	eb03 1342 	add.w	r3, r3, r2, lsl #5
    1966:	8919      	ldrh	r1, [r3, #8]
    1968:	f3c1 110a 	ubfx	r1, r1, #4, #11
			bank->EXTREG.reg = 0;
    196c:	2200      	movs	r2, #0
    196e:	811a      	strh	r2, [r3, #8]
    1970:	e7ef      	b.n	1952 <_usb_d_dev_handler+0xaa>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1972:	2280      	movs	r2, #128	; 0x80
    1974:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1978:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    197a:	4b61      	ldr	r3, [pc, #388]	; (1b00 <_usb_d_dev_handler+0x258>)
    197c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    197e:	2100      	movs	r1, #0
    1980:	2005      	movs	r0, #5
    1982:	4798      	blx	r3
    1984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1988:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    198c:	2270      	movs	r2, #112	; 0x70
    198e:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1990:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1992:	f240 2201 	movw	r2, #513	; 0x201
    1996:	831a      	strh	r2, [r3, #24]
}

static inline bool hri_oscctrl_get_DFLLCTRLB_MODE_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1998:	4b5a      	ldr	r3, [pc, #360]	; (1b04 <_usb_d_dev_handler+0x25c>)
    199a:	f893 3020 	ldrb.w	r3, [r3, #32]
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(OSCCTRL)) {
    199e:	f013 0f01 	tst.w	r3, #1
    19a2:	d00d      	beq.n	19c0 <_usb_d_dev_handler+0x118>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    19a4:	4a57      	ldr	r2, [pc, #348]	; (1b04 <_usb_d_dev_handler+0x25c>)
    19a6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    19a8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    19ac:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    19b0:	d1f9      	bne.n	19a6 <_usb_d_dev_handler+0xfe>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    19b2:	4b53      	ldr	r3, [pc, #332]	; (1b00 <_usb_d_dev_handler+0x258>)
    19b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    19b6:	2100      	movs	r1, #0
    19b8:	2002      	movs	r0, #2
    19ba:	4798      	blx	r3
    19bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    19c0:	4a50      	ldr	r2, [pc, #320]	; (1b04 <_usb_d_dev_handler+0x25c>)
    19c2:	6913      	ldr	r3, [r2, #16]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    19c4:	f413 7f80 	tst.w	r3, #256	; 0x100
    19c8:	d0fb      	beq.n	19c2 <_usb_d_dev_handler+0x11a>
    19ca:	e7f2      	b.n	19b2 <_usb_d_dev_handler+0x10a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    19cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    19d0:	2400      	movs	r4, #0
    19d2:	f883 4100 	strb.w	r4, [r3, #256]	; 0x100
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    19d6:	2208      	movs	r2, #8
    19d8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    19da:	2270      	movs	r2, #112	; 0x70
    19dc:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    19de:	f240 2201 	movw	r2, #513	; 0x201
    19e2:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    19e4:	4b48      	ldr	r3, [pc, #288]	; (1b08 <_usb_d_dev_handler+0x260>)
    19e6:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    19e8:	4b45      	ldr	r3, [pc, #276]	; (1b00 <_usb_d_dev_handler+0x258>)
    19ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    19ec:	4621      	mov	r1, r4
    19ee:	2001      	movs	r0, #1
    19f0:	4798      	blx	r3
    19f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    19f6:	f011 0f10 	tst.w	r1, #16
    19fa:	d109      	bne.n	1a10 <_usb_d_dev_handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    19fc:	f011 0f40 	tst.w	r1, #64	; 0x40
    1a00:	d108      	bne.n	1a14 <_usb_d_dev_handler+0x16c>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1a02:	f011 0f20 	tst.w	r1, #32
    1a06:	d02f      	beq.n	1a68 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1a08:	2100      	movs	r1, #0
    1a0a:	4b40      	ldr	r3, [pc, #256]	; (1b0c <_usb_d_dev_handler+0x264>)
    1a0c:	4798      	blx	r3
    1a0e:	e02b      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_setup(ept);
    1a10:	47c8      	blx	r9
    1a12:	e029      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    1a14:	2101      	movs	r1, #1
    1a16:	4b3d      	ldr	r3, [pc, #244]	; (1b0c <_usb_d_dev_handler+0x264>)
    1a18:	4798      	blx	r3
    1a1a:	e025      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1a1c:	f011 0f40 	tst.w	r1, #64	; 0x40
    1a20:	d111      	bne.n	1a46 <_usb_d_dev_handler+0x19e>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1a22:	f011 0f08 	tst.w	r1, #8
    1a26:	d112      	bne.n	1a4e <_usb_d_dev_handler+0x1a6>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1a28:	f011 0f02 	tst.w	r1, #2
    1a2c:	d112      	bne.n	1a54 <_usb_d_dev_handler+0x1ac>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1a2e:	f003 0307 	and.w	r3, r3, #7
    1a32:	2b01      	cmp	r3, #1
    1a34:	d118      	bne.n	1a68 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1a36:	f011 0f04 	tst.w	r1, #4
    1a3a:	d10f      	bne.n	1a5c <_usb_d_dev_handler+0x1b4>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1a3c:	f011 0f10 	tst.w	r1, #16
    1a40:	d012      	beq.n	1a68 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1a42:	47c8      	blx	r9
    1a44:	e010      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 1);
    1a46:	2101      	movs	r1, #1
    1a48:	4b30      	ldr	r3, [pc, #192]	; (1b0c <_usb_d_dev_handler+0x264>)
    1a4a:	4798      	blx	r3
    1a4c:	e00c      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 1);
    1a4e:	2101      	movs	r1, #1
    1a50:	47c0      	blx	r8
    1a52:	e009      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_in_next(ept, true);
    1a54:	2101      	movs	r1, #1
    1a56:	4b2e      	ldr	r3, [pc, #184]	; (1b10 <_usb_d_dev_handler+0x268>)
    1a58:	4798      	blx	r3
    1a5a:	e005      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 0);
    1a5c:	2100      	movs	r1, #0
    1a5e:	47c0      	blx	r8
    1a60:	e002      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_stall(ept, 0);
    1a62:	2100      	movs	r1, #0
    1a64:	4b29      	ldr	r3, [pc, #164]	; (1b0c <_usb_d_dev_handler+0x264>)
    1a66:	4798      	blx	r3
    1a68:	3401      	adds	r4, #1
    1a6a:	3514      	adds	r5, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1a6c:	2c09      	cmp	r4, #9
    1a6e:	d042      	beq.n	1af6 <_usb_d_dev_handler+0x24e>
    1a70:	4628      	mov	r0, r5
		if (ept->ep == 0xFF) {
    1a72:	7cab      	ldrb	r3, [r5, #18]
    1a74:	2bff      	cmp	r3, #255	; 0xff
    1a76:	d0f7      	beq.n	1a68 <_usb_d_dev_handler+0x1c0>
	if (!(epint & (1u << epn))) {
    1a78:	f003 030f 	and.w	r3, r3, #15
    1a7c:	2101      	movs	r1, #1
    1a7e:	4099      	lsls	r1, r3
    1a80:	4231      	tst	r1, r6
    1a82:	d0f1      	beq.n	1a68 <_usb_d_dev_handler+0x1c0>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1a84:	0159      	lsls	r1, r3, #5
    1a86:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
    1a8a:	f501 7180 	add.w	r1, r1, #256	; 0x100
    1a8e:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1a90:	015b      	lsls	r3, r3, #5
    1a92:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1a96:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
	if (flags) {
    1a9a:	4019      	ands	r1, r3
    1a9c:	d0e4      	beq.n	1a68 <_usb_d_dev_handler+0x1c0>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1a9e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1aa2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    1aa6:	f892 3087 	ldrb.w	r3, [r2, #135]	; 0x87
    1aaa:	f003 0247 	and.w	r2, r3, #71	; 0x47
    1aae:	2a01      	cmp	r2, #1
    1ab0:	d0a1      	beq.n	19f6 <_usb_d_dev_handler+0x14e>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1ab2:	f013 0f80 	tst.w	r3, #128	; 0x80
    1ab6:	d1b1      	bne.n	1a1c <_usb_d_dev_handler+0x174>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1ab8:	f011 0f20 	tst.w	r1, #32
    1abc:	d1d1      	bne.n	1a62 <_usb_d_dev_handler+0x1ba>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1abe:	f011 0f04 	tst.w	r1, #4
    1ac2:	d10e      	bne.n	1ae2 <_usb_d_dev_handler+0x23a>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1ac4:	f011 0f01 	tst.w	r1, #1
    1ac8:	d10e      	bne.n	1ae8 <_usb_d_dev_handler+0x240>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1aca:	f003 0307 	and.w	r3, r3, #7
    1ace:	2b01      	cmp	r3, #1
    1ad0:	d1ca      	bne.n	1a68 <_usb_d_dev_handler+0x1c0>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1ad2:	f011 0f08 	tst.w	r1, #8
    1ad6:	d10b      	bne.n	1af0 <_usb_d_dev_handler+0x248>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1ad8:	f011 0f10 	tst.w	r1, #16
    1adc:	d0c4      	beq.n	1a68 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_setup(ept);
    1ade:	47c8      	blx	r9
    1ae0:	e7c2      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_handle_trfail(ept, 0);
    1ae2:	2100      	movs	r1, #0
    1ae4:	47c0      	blx	r8
    1ae6:	e7bf      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
		_usb_d_dev_out_next(ept, true);
    1ae8:	2101      	movs	r1, #1
    1aea:	4b0a      	ldr	r3, [pc, #40]	; (1b14 <_usb_d_dev_handler+0x26c>)
    1aec:	4798      	blx	r3
    1aee:	e7bb      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
			_usb_d_dev_handle_trfail(ept, 1);
    1af0:	2101      	movs	r1, #1
    1af2:	47c0      	blx	r8
    1af4:	e7b8      	b.n	1a68 <_usb_d_dev_handler+0x1c0>
    1af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1afa:	bf00      	nop
    1afc:	2000018c 	.word	0x2000018c
    1b00:	20000118 	.word	0x20000118
    1b04:	40001000 	.word	0x40001000
    1b08:	000014f1 	.word	0x000014f1
    1b0c:	0000132d 	.word	0x0000132d
    1b10:	00001535 	.word	0x00001535
    1b14:	000016b9 	.word	0x000016b9
    1b18:	000012b1 	.word	0x000012b1
    1b1c:	000013f1 	.word	0x000013f1

00001b20 <_usb_d_dev_init>:
{
    1b20:	b508      	push	{r3, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1b22:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1b26:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    1b28:	f013 0f01 	tst.w	r3, #1
    1b2c:	d124      	bne.n	1b78 <_usb_d_dev_init+0x58>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1b2e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1b32:	7893      	ldrb	r3, [r2, #2]
    1b34:	f013 0f03 	tst.w	r3, #3
    1b38:	d1fb      	bne.n	1b32 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    1b3a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1b3e:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1b40:	f013 0f02 	tst.w	r3, #2
    1b44:	d00f      	beq.n	1b66 <_usb_d_dev_init+0x46>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1b46:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1b4a:	7813      	ldrb	r3, [r2, #0]
    1b4c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1b50:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1b52:	7893      	ldrb	r3, [r2, #2]
    1b54:	f013 0f03 	tst.w	r3, #3
    1b58:	d1fb      	bne.n	1b52 <_usb_d_dev_init+0x32>
    1b5a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1b5e:	7893      	ldrb	r3, [r2, #2]
    1b60:	f013 0f02 	tst.w	r3, #2
    1b64:	d1fb      	bne.n	1b5e <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1b66:	2201      	movs	r2, #1
    1b68:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1b6c:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1b6e:	461a      	mov	r2, r3
    1b70:	7893      	ldrb	r3, [r2, #2]
    1b72:	f013 0f03 	tst.w	r3, #3
    1b76:	d1fb      	bne.n	1b70 <_usb_d_dev_init+0x50>
    1b78:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1b7c:	7893      	ldrb	r3, [r2, #2]
    1b7e:	f013 0f01 	tst.w	r3, #1
    1b82:	d1fb      	bne.n	1b7c <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1b84:	4b21      	ldr	r3, [pc, #132]	; (1c0c <_usb_d_dev_init+0xec>)
    1b86:	4a22      	ldr	r2, [pc, #136]	; (1c10 <_usb_d_dev_init+0xf0>)
    1b88:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    1b8a:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    1b8c:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1b8e:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1b90:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1b92:	4b20      	ldr	r3, [pc, #128]	; (1c14 <_usb_d_dev_init+0xf4>)
    1b94:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1b96:	4b20      	ldr	r3, [pc, #128]	; (1c18 <_usb_d_dev_init+0xf8>)
    1b98:	6819      	ldr	r1, [r3, #0]
	uint32_t pad_transp
    1b9a:	f3c1 1344 	ubfx	r3, r1, #5, #5
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_SW0) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1b9e:	f3c1 2282 	ubfx	r2, r1, #10, #3
	if (pad_transn == 0 || pad_transn == 0x1F) {
    1ba2:	f011 011f 	ands.w	r1, r1, #31
    1ba6:	d02b      	beq.n	1c00 <_usb_d_dev_init+0xe0>
		pad_transn = 9;
    1ba8:	291f      	cmp	r1, #31
    1baa:	bf08      	it	eq
    1bac:	2109      	moveq	r1, #9
	if (pad_transp == 0 || pad_transp == 0x1F) {
    1bae:	b34b      	cbz	r3, 1c04 <_usb_d_dev_init+0xe4>
		pad_transp = 25;
    1bb0:	2b1f      	cmp	r3, #31
    1bb2:	bf08      	it	eq
    1bb4:	2319      	moveq	r3, #25
	if (pad_trim == 0 || pad_trim == 0x7) {
    1bb6:	b33a      	cbz	r2, 1c08 <_usb_d_dev_init+0xe8>
		pad_trim = 6;
    1bb8:	2a07      	cmp	r2, #7
    1bba:	bf08      	it	eq
    1bbc:	2206      	moveq	r2, #6
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1bbe:	f003 031f 	and.w	r3, r3, #31
    1bc2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    1bc6:	0312      	lsls	r2, r2, #12
    1bc8:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
    1bcc:	4313      	orrs	r3, r2
    1bce:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
    1bd2:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1bd4:	78d3      	ldrb	r3, [r2, #3]
    1bd6:	f043 0303 	orr.w	r3, r3, #3
    1bda:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    1bdc:	78d3      	ldrb	r3, [r2, #3]
    1bde:	f043 030c 	orr.w	r3, r3, #12
    1be2:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1be4:	2304      	movs	r3, #4
    1be6:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1be8:	7893      	ldrb	r3, [r2, #2]
    1bea:	f013 0f03 	tst.w	r3, #3
    1bee:	d1fb      	bne.n	1be8 <_usb_d_dev_init+0xc8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1bf0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
    1bf4:	4a05      	ldr	r2, [pc, #20]	; (1c0c <_usb_d_dev_init+0xec>)
    1bf6:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    1bf8:	2201      	movs	r2, #1
    1bfa:	811a      	strh	r2, [r3, #8]
}
    1bfc:	2000      	movs	r0, #0
    1bfe:	bd08      	pop	{r3, pc}
		pad_transn = 9;
    1c00:	2109      	movs	r1, #9
    1c02:	e7d4      	b.n	1bae <_usb_d_dev_init+0x8e>
		pad_transp = 25;
    1c04:	2319      	movs	r3, #25
    1c06:	e7d6      	b.n	1bb6 <_usb_d_dev_init+0x96>
		pad_trim = 6;
    1c08:	2206      	movs	r2, #6
    1c0a:	e7d8      	b.n	1bbe <_usb_d_dev_init+0x9e>
    1c0c:	20000118 	.word	0x20000118
    1c10:	000012ad 	.word	0x000012ad
    1c14:	000014f1 	.word	0x000014f1
    1c18:	00800084 	.word	0x00800084

00001c1c <_usb_d_dev_ep_stall>:
{
    1c1c:	b470      	push	{r4, r5, r6}
    1c1e:	b243      	sxtb	r3, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    1c20:	0fdc      	lsrs	r4, r3, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1c22:	f010 000f 	ands.w	r0, r0, #15
    1c26:	d008      	beq.n	1c3a <_usb_d_dev_ep_stall+0x1e>
    1c28:	2b00      	cmp	r3, #0
    1c2a:	bfb4      	ite	lt
    1c2c:	1c83      	addlt	r3, r0, #2
    1c2e:	4603      	movge	r3, r0
	if (epn > CONF_USB_D_MAX_EP_N) {
    1c30:	2802      	cmp	r0, #2
    1c32:	d903      	bls.n	1c3c <_usb_d_dev_ep_stall+0x20>
		return -USB_ERR_PARAM;
    1c34:	f06f 0011 	mvn.w	r0, #17
    1c38:	e018      	b.n	1c6c <_usb_d_dev_ep_stall+0x50>
	return &dev_inst.ep[ep_index];
    1c3a:	2300      	movs	r3, #0
	if (USB_EP_STALL_SET == ctrl) {
    1c3c:	2901      	cmp	r1, #1
    1c3e:	d017      	beq.n	1c70 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1c40:	2900      	cmp	r1, #0
    1c42:	d03a      	beq.n	1cba <_usb_d_dev_ep_stall+0x9e>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1c44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c48:	4a45      	ldr	r2, [pc, #276]	; (1d60 <_usb_d_dev_ep_stall+0x144>)
    1c4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1c4e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1c52:	f003 030f 	and.w	r3, r3, #15
    1c56:	015b      	lsls	r3, r3, #5
    1c58:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
    1c5c:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1c60:	2310      	movs	r3, #16
    1c62:	40a3      	lsls	r3, r4
    1c64:	421a      	tst	r2, r3
    1c66:	bf14      	ite	ne
    1c68:	2001      	movne	r0, #1
    1c6a:	2000      	moveq	r0, #0
}
    1c6c:	bc70      	pop	{r4, r5, r6}
    1c6e:	4770      	bx	lr
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1c70:	2510      	movs	r5, #16
    1c72:	40a5      	lsls	r5, r4
    1c74:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1c76:	493a      	ldr	r1, [pc, #232]	; (1d60 <_usb_d_dev_ep_stall+0x144>)
    1c78:	009e      	lsls	r6, r3, #2
    1c7a:	18f2      	adds	r2, r6, r3
    1c7c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1c80:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1c84:	f002 020f 	and.w	r2, r2, #15
    1c88:	0150      	lsls	r0, r2, #5
    1c8a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1c8e:	f880 5105 	strb.w	r5, [r0, #261]	; 0x105
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1c92:	2020      	movs	r0, #32
    1c94:	fa00 f404 	lsl.w	r4, r0, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1c98:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1c9a:	0152      	lsls	r2, r2, #5
    1c9c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1ca0:	f882 4109 	strb.w	r4, [r2, #265]	; 0x109
	ept->flags.bits.is_stalled = 1;
    1ca4:	4433      	add	r3, r6
    1ca6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    1caa:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    1cae:	f042 0208 	orr.w	r2, r2, #8
    1cb2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    1cb6:	2000      	movs	r0, #0
    1cb8:	e7d8      	b.n	1c6c <_usb_d_dev_ep_stall+0x50>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    1cba:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1cbe:	4928      	ldr	r1, [pc, #160]	; (1d60 <_usb_d_dev_ep_stall+0x144>)
    1cc0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1cc4:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
    1cc8:	f002 020f 	and.w	r2, r2, #15
    1ccc:	0151      	lsls	r1, r2, #5
    1cce:	f101 4182 	add.w	r1, r1, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1cd2:	f891 5106 	ldrb.w	r5, [r1, #262]	; 0x106
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1cd6:	2010      	movs	r0, #16
    1cd8:	40a0      	lsls	r0, r4
	if (!is_stalled) {
    1cda:	4205      	tst	r5, r0
    1cdc:	d03c      	beq.n	1d58 <_usb_d_dev_ep_stall+0x13c>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1cde:	b2c0      	uxtb	r0, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1ce0:	f881 0104 	strb.w	r0, [r1, #260]	; 0x104
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1ce4:	2020      	movs	r0, #32
    1ce6:	40a0      	lsls	r0, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    1ce8:	b2c5      	uxtb	r5, r0
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    1cea:	f881 5108 	strb.w	r5, [r1, #264]	; 0x108
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1cee:	f891 2107 	ldrb.w	r2, [r1, #263]	; 0x107
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1cf2:	4202      	tst	r2, r0
    1cf4:	d007      	beq.n	1d06 <_usb_d_dev_ep_stall+0xea>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1cf6:	f881 5107 	strb.w	r5, [r1, #263]	; 0x107
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    1cfa:	2201      	movs	r2, #1
    1cfc:	fa02 f404 	lsl.w	r4, r2, r4
    1d00:	b2e4      	uxtb	r4, r4
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1d02:	f881 4104 	strb.w	r4, [r1, #260]	; 0x104
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1d06:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1d0a:	4815      	ldr	r0, [pc, #84]	; (1d60 <_usb_d_dev_ep_stall+0x144>)
    1d0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1d10:	f892 2087 	ldrb.w	r2, [r2, #135]	; 0x87
    1d14:	f002 0207 	and.w	r2, r2, #7
    1d18:	2a01      	cmp	r2, #1
    1d1a:	d00c      	beq.n	1d36 <_usb_d_dev_ep_stall+0x11a>
		ept->flags.bits.is_stalled = 0;
    1d1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1d20:	4a0f      	ldr	r2, [pc, #60]	; (1d60 <_usb_d_dev_ep_stall+0x144>)
    1d22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d26:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    1d2a:	f36f 02c3 	bfc	r2, #3, #1
    1d2e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1d32:	2000      	movs	r0, #0
    1d34:	e79a      	b.n	1c6c <_usb_d_dev_ep_stall+0x50>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1d36:	f891 2106 	ldrb.w	r2, [r1, #262]	; 0x106
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1d3a:	f012 0f30 	tst.w	r2, #48	; 0x30
    1d3e:	d10d      	bne.n	1d5c <_usb_d_dev_ep_stall+0x140>
			ept->flags.bits.is_stalled = 0;
    1d40:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1d44:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    1d48:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
    1d4c:	f36f 02c3 	bfc	r2, #3, #1
    1d50:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1d54:	2000      	movs	r0, #0
    1d56:	e789      	b.n	1c6c <_usb_d_dev_ep_stall+0x50>
    1d58:	2000      	movs	r0, #0
    1d5a:	e787      	b.n	1c6c <_usb_d_dev_ep_stall+0x50>
    1d5c:	2000      	movs	r0, #0
    1d5e:	e785      	b.n	1c6c <_usb_d_dev_ep_stall+0x50>
    1d60:	20000118 	.word	0x20000118

00001d64 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1d64:	b430      	push	{r4, r5}
	uint8_t            epn   = USB_EP_GET_N(ep);
    1d66:	f000 040f 	and.w	r4, r0, #15
    1d6a:	0163      	lsls	r3, r4, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    1d6c:	4a14      	ldr	r2, [pc, #80]	; (1dc0 <_usb_d_dev_ep_read_req+0x5c>)
    1d6e:	18d0      	adds	r0, r2, r3
	uint32_t           addr  = bank[0].ADDR.reg;
    1d70:	58d5      	ldr	r5, [r2, r3]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1d72:	6840      	ldr	r0, [r0, #4]
    1d74:	f3c0 000d 	ubfx	r0, r0, #0, #14

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1d78:	2c02      	cmp	r4, #2
    1d7a:	d817      	bhi.n	1dac <_usb_d_dev_ep_read_req+0x48>
    1d7c:	b1c9      	cbz	r1, 1db2 <_usb_d_dev_ep_read_req+0x4e>
    1d7e:	f103 4382 	add.w	r3, r3, #1090519040	; 0x41000000
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1d82:	f893 2100 	ldrb.w	r2, [r3, #256]	; 0x100
    1d86:	b2d2      	uxtb	r2, r2
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    1d88:	2a11      	cmp	r2, #17
    1d8a:	d115      	bne.n	1db8 <_usb_d_dev_ep_read_req+0x54>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1d8c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
    1d90:	f012 0f10 	tst.w	r2, #16
    1d94:	d102      	bne.n	1d9c <_usb_d_dev_ep_read_req+0x38>
		return ERR_NONE;
    1d96:	2000      	movs	r0, #0
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    1d98:	bc30      	pop	{r4, r5}
    1d9a:	4770      	bx	lr
	memcpy(req_buf, (void *)addr, 8);
    1d9c:	682c      	ldr	r4, [r5, #0]
    1d9e:	686a      	ldr	r2, [r5, #4]
    1da0:	600c      	str	r4, [r1, #0]
    1da2:	604a      	str	r2, [r1, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1da4:	2210      	movs	r2, #16
    1da6:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	return bytes;
    1daa:	e7f5      	b.n	1d98 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_PARAM;
    1dac:	f06f 0011 	mvn.w	r0, #17
    1db0:	e7f2      	b.n	1d98 <_usb_d_dev_ep_read_req+0x34>
    1db2:	f06f 0011 	mvn.w	r0, #17
    1db6:	e7ef      	b.n	1d98 <_usb_d_dev_ep_read_req+0x34>
		return -USB_ERR_FUNC;
    1db8:	f06f 0012 	mvn.w	r0, #18
    1dbc:	e7ec      	b.n	1d98 <_usb_d_dev_ep_read_req+0x34>
    1dbe:	bf00      	nop
    1dc0:	20000118 	.word	0x20000118

00001dc4 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    1dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dc8:	b083      	sub	sp, #12
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    1dca:	7a03      	ldrb	r3, [r0, #8]
    1dcc:	b25e      	sxtb	r6, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1dce:	f013 030f 	ands.w	r3, r3, #15
    1dd2:	f000 80c2 	beq.w	1f5a <_usb_d_dev_ep_trans+0x196>
    1dd6:	2e00      	cmp	r6, #0
    1dd8:	bfb4      	ite	lt
    1dda:	1c9a      	addlt	r2, r3, #2
    1ddc:	461a      	movge	r2, r3
	return &dev_inst.ep[ep_index];
    1dde:	4614      	mov	r4, r2
    1de0:	4969      	ldr	r1, [pc, #420]	; (1f88 <_usb_d_dev_ep_trans+0x1c4>)
    1de2:	f101 0760 	add.w	r7, r1, #96	; 0x60
    1de6:	1c55      	adds	r5, r2, #1
    1de8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1dec:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1df0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1df4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1df8:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    1dfc:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1e00:	428a      	cmp	r2, r1
    1e02:	d025      	beq.n	1e50 <_usb_d_dev_ep_trans+0x8c>
    1e04:	1e55      	subs	r5, r2, #1
    1e06:	b2ad      	uxth	r5, r5
	bool     size_n_aligned = (trans->size & size_mask);
    1e08:	6841      	ldr	r1, [r0, #4]
    1e0a:	400d      	ands	r5, r1

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1e0c:	2b02      	cmp	r3, #2
    1e0e:	f200 8092 	bhi.w	1f36 <_usb_d_dev_ep_trans+0x172>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1e12:	6803      	ldr	r3, [r0, #0]
    1e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    1e18:	d31c      	bcc.n	1e54 <_usb_d_dev_ep_trans+0x90>
    1e1a:	eb03 0c01 	add.w	ip, r3, r1
    1e1e:	f8df e180 	ldr.w	lr, [pc, #384]	; 1fa0 <_usb_d_dev_ep_trans+0x1dc>
    1e22:	45f4      	cmp	ip, lr
    1e24:	d816      	bhi.n	1e54 <_usb_d_dev_ep_trans+0x90>
    1e26:	f013 0f03 	tst.w	r3, #3
    1e2a:	d113      	bne.n	1e54 <_usb_d_dev_ep_trans+0x90>
	    || (!dir && (trans->size < ept->size))) {
    1e2c:	2e00      	cmp	r6, #0
    1e2e:	db2a      	blt.n	1e86 <_usb_d_dev_ep_trans+0xc2>
    1e30:	428a      	cmp	r2, r1
    1e32:	f200 809c 	bhi.w	1f6e <_usb_d_dev_ep_trans+0x1aa>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    1e36:	b34d      	cbz	r5, 1e8c <_usb_d_dev_ep_trans+0xc8>
		if (!ept->cache) {
    1e38:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1e3c:	4a52      	ldr	r2, [pc, #328]	; (1f88 <_usb_d_dev_ep_trans+0x1c4>)
    1e3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1e46:	2b00      	cmp	r3, #0
    1e48:	d07b      	beq.n	1f42 <_usb_d_dev_ep_trans+0x17e>
	bool use_cache = false;
    1e4a:	f04f 0800 	mov.w	r8, #0
    1e4e:	e00c      	b.n	1e6a <_usb_d_dev_ep_trans+0xa6>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1e50:	4615      	mov	r5, r2
    1e52:	e7d9      	b.n	1e08 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    1e54:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1e58:	4a4b      	ldr	r2, [pc, #300]	; (1f88 <_usb_d_dev_ep_trans+0x1c4>)
    1e5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1e62:	2b00      	cmp	r3, #0
    1e64:	d06a      	beq.n	1f3c <_usb_d_dev_ep_trans+0x178>
		use_cache = true;
    1e66:	f04f 0801 	mov.w	r8, #1
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1e6a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1e6e:	4a46      	ldr	r2, [pc, #280]	; (1f88 <_usb_d_dev_ep_trans+0x1c4>)
    1e70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1e74:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    1e78:	f013 0f08 	tst.w	r3, #8
    1e7c:	d009      	beq.n	1e92 <_usb_d_dev_ep_trans+0xce>
		return USB_HALTED;
    1e7e:	2002      	movs	r0, #2
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    1e80:	b003      	add	sp, #12
    1e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool use_cache = false;
    1e86:	f04f 0800 	mov.w	r8, #0
    1e8a:	e7ee      	b.n	1e6a <_usb_d_dev_ep_trans+0xa6>
    1e8c:	f04f 0800 	mov.w	r8, #0
    1e90:	e7eb      	b.n	1e6a <_usb_d_dev_ep_trans+0xa6>
    1e92:	4682      	mov	sl, r0
	atomic_enter_critical(&flags);
    1e94:	a801      	add	r0, sp, #4
    1e96:	4b3d      	ldr	r3, [pc, #244]	; (1f8c <_usb_d_dev_ep_trans+0x1c8>)
    1e98:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    1e9a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1e9e:	4a3a      	ldr	r2, [pc, #232]	; (1f88 <_usb_d_dev_ep_trans+0x1c4>)
    1ea0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1ea4:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    1ea8:	f013 0f40 	tst.w	r3, #64	; 0x40
    1eac:	d13c      	bne.n	1f28 <_usb_d_dev_ep_trans+0x164>
	ept->flags.bits.is_busy = 1;
    1eae:	eb04 0984 	add.w	r9, r4, r4, lsl #2
    1eb2:	4b35      	ldr	r3, [pc, #212]	; (1f88 <_usb_d_dev_ep_trans+0x1c4>)
    1eb4:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    1eb8:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    1ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1ec0:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	atomic_leave_critical(&flags);
    1ec4:	a801      	add	r0, sp, #4
    1ec6:	4b32      	ldr	r3, [pc, #200]	; (1f90 <_usb_d_dev_ep_trans+0x1cc>)
    1ec8:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1eca:	f8da 3000 	ldr.w	r3, [sl]
    1ece:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
	ept->trans_size  = trans->size;
    1ed2:	f8da 3004 	ldr.w	r3, [sl, #4]
    1ed6:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
	ept->trans_count = 0;
    1eda:	2300      	movs	r3, #0
    1edc:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    1ee0:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    1ee2:	f899 3087 	ldrb.w	r3, [r9, #135]	; 0x87
    1ee6:	f362 13c7 	bfi	r3, r2, #7, #1
	ept->flags.bits.use_cache = use_cache;
    1eea:	f368 1345 	bfi	r3, r8, #5, #1
    1eee:	f889 3087 	strb.w	r3, [r9, #135]	; 0x87
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1ef2:	f89a 3009 	ldrb.w	r3, [sl, #9]
    1ef6:	b1e3      	cbz	r3, 1f32 <_usb_d_dev_ep_trans+0x16e>
    1ef8:	fab5 f585 	clz	r5, r5
    1efc:	096d      	lsrs	r5, r5, #5
    1efe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    1f02:	4b21      	ldr	r3, [pc, #132]	; (1f88 <_usb_d_dev_ep_trans+0x1c4>)
    1f04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1f08:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
    1f0c:	f365 1304 	bfi	r3, r5, #4, #1
    1f10:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
	if (dir) {
    1f14:	2e00      	cmp	r6, #0
		_usb_d_dev_in_next(ept, false);
    1f16:	f04f 0100 	mov.w	r1, #0
    1f1a:	4638      	mov	r0, r7
    1f1c:	bfb4      	ite	lt
    1f1e:	4b1d      	ldrlt	r3, [pc, #116]	; (1f94 <_usb_d_dev_ep_trans+0x1d0>)
		_usb_d_dev_out_next(ept, false);
    1f20:	4b1d      	ldrge	r3, [pc, #116]	; (1f98 <_usb_d_dev_ep_trans+0x1d4>)
    1f22:	4798      	blx	r3
	return ERR_NONE;
    1f24:	2000      	movs	r0, #0
    1f26:	e7ab      	b.n	1e80 <_usb_d_dev_ep_trans+0xbc>
		atomic_leave_critical(&flags);
    1f28:	a801      	add	r0, sp, #4
    1f2a:	4b19      	ldr	r3, [pc, #100]	; (1f90 <_usb_d_dev_ep_trans+0x1cc>)
    1f2c:	4798      	blx	r3
		return USB_BUSY;
    1f2e:	2001      	movs	r0, #1
    1f30:	e7a6      	b.n	1e80 <_usb_d_dev_ep_trans+0xbc>
    1f32:	2500      	movs	r5, #0
    1f34:	e7e3      	b.n	1efe <_usb_d_dev_ep_trans+0x13a>
		return -USB_ERR_PARAM;
    1f36:	f06f 0011 	mvn.w	r0, #17
    1f3a:	e7a1      	b.n	1e80 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    1f3c:	f06f 0012 	mvn.w	r0, #18
    1f40:	e79e      	b.n	1e80 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_PARAM;
    1f42:	f06f 0011 	mvn.w	r0, #17
    1f46:	e79b      	b.n	1e80 <_usb_d_dev_ep_trans+0xbc>
			return -USB_ERR_FUNC;
    1f48:	f06f 0012 	mvn.w	r0, #18
    1f4c:	e798      	b.n	1e80 <_usb_d_dev_ep_trans+0xbc>
	bool     size_n_aligned = (trans->size & size_mask);
    1f4e:	6841      	ldr	r1, [r0, #4]
    1f50:	f3c1 0509 	ubfx	r5, r1, #0, #10
	return &dev_inst.ep[ep_index];
    1f54:	4f11      	ldr	r7, [pc, #68]	; (1f9c <_usb_d_dev_ep_trans+0x1d8>)
    1f56:	2400      	movs	r4, #0
    1f58:	e75b      	b.n	1e12 <_usb_d_dev_ep_trans+0x4e>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1f5a:	4a0b      	ldr	r2, [pc, #44]	; (1f88 <_usb_d_dev_ep_trans+0x1c4>)
    1f5c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
    1f60:	f240 31ff 	movw	r1, #1023	; 0x3ff
    1f64:	428a      	cmp	r2, r1
    1f66:	d0f2      	beq.n	1f4e <_usb_d_dev_ep_trans+0x18a>
	return &dev_inst.ep[ep_index];
    1f68:	4f0c      	ldr	r7, [pc, #48]	; (1f9c <_usb_d_dev_ep_trans+0x1d8>)
    1f6a:	2400      	movs	r4, #0
    1f6c:	e74a      	b.n	1e04 <_usb_d_dev_ep_trans+0x40>
		if (!ept->cache) {
    1f6e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1f72:	4a05      	ldr	r2, [pc, #20]	; (1f88 <_usb_d_dev_ep_trans+0x1c4>)
    1f74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d0e3      	beq.n	1f48 <_usb_d_dev_ep_trans+0x184>
    1f80:	f04f 0801 	mov.w	r8, #1
    1f84:	e771      	b.n	1e6a <_usb_d_dev_ep_trans+0xa6>
    1f86:	bf00      	nop
    1f88:	20000118 	.word	0x20000118
    1f8c:	00000745 	.word	0x00000745
    1f90:	00000753 	.word	0x00000753
    1f94:	00001535 	.word	0x00001535
    1f98:	000016b9 	.word	0x000016b9
    1f9c:	2000018c 	.word	0x2000018c
    1fa0:	20031fff 	.word	0x20031fff

00001fa4 <_usb_d_dev_register_ep_callback>:
	}
}

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1fa4:	4b09      	ldr	r3, [pc, #36]	; (1fcc <_usb_d_dev_register_ep_callback+0x28>)
    1fa6:	2900      	cmp	r1, #0
    1fa8:	bf08      	it	eq
    1faa:	4619      	moveq	r1, r3
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1fac:	4603      	mov	r3, r0
    1fae:	b130      	cbz	r0, 1fbe <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1fb0:	2801      	cmp	r0, #1
    1fb2:	d007      	beq.n	1fc4 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1fb4:	2802      	cmp	r0, #2
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1fb6:	bf04      	itt	eq
    1fb8:	4b05      	ldreq	r3, [pc, #20]	; (1fd0 <_usb_d_dev_register_ep_callback+0x2c>)
    1fba:	6719      	streq	r1, [r3, #112]	; 0x70
    1fbc:	4770      	bx	lr
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1fbe:	4b04      	ldr	r3, [pc, #16]	; (1fd0 <_usb_d_dev_register_ep_callback+0x2c>)
    1fc0:	6699      	str	r1, [r3, #104]	; 0x68
    1fc2:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1fc4:	4b02      	ldr	r3, [pc, #8]	; (1fd0 <_usb_d_dev_register_ep_callback+0x2c>)
    1fc6:	66d9      	str	r1, [r3, #108]	; 0x6c
    1fc8:	4770      	bx	lr
    1fca:	bf00      	nop
    1fcc:	000012ad 	.word	0x000012ad
    1fd0:	20000118 	.word	0x20000118

00001fd4 <USB_0_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_0_Handler(void)
{
    1fd4:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1fd6:	4b01      	ldr	r3, [pc, #4]	; (1fdc <USB_0_Handler+0x8>)
    1fd8:	4798      	blx	r3
    1fda:	bd08      	pop	{r3, pc}
    1fdc:	000018a9 	.word	0x000018a9

00001fe0 <USB_1_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_1_Handler(void)
{
    1fe0:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1fe2:	4b01      	ldr	r3, [pc, #4]	; (1fe8 <USB_1_Handler+0x8>)
    1fe4:	4798      	blx	r3
    1fe6:	bd08      	pop	{r3, pc}
    1fe8:	000018a9 	.word	0x000018a9

00001fec <USB_2_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_2_Handler(void)
{
    1fec:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1fee:	4b01      	ldr	r3, [pc, #4]	; (1ff4 <USB_2_Handler+0x8>)
    1ff0:	4798      	blx	r3
    1ff2:	bd08      	pop	{r3, pc}
    1ff4:	000018a9 	.word	0x000018a9

00001ff8 <USB_3_Handler>:
}
/**
 * \brief USB interrupt handler
 */
void USB_3_Handler(void)
{
    1ff8:	b508      	push	{r3, lr}

	_usb_d_dev_handler();
    1ffa:	4b01      	ldr	r3, [pc, #4]	; (2000 <USB_3_Handler+0x8>)
    1ffc:	4798      	blx	r3
    1ffe:	bd08      	pop	{r3, pc}
    2000:	000018a9 	.word	0x000018a9

00002004 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2004:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2006:	4604      	mov	r4, r0
    2008:	b330      	cbz	r0, 2058 <_wdt_init+0x54>
    200a:	6800      	ldr	r0, [r0, #0]
    200c:	3000      	adds	r0, #0
    200e:	bf18      	it	ne
    2010:	2001      	movne	r0, #1
    2012:	2250      	movs	r2, #80	; 0x50
    2014:	4914      	ldr	r1, [pc, #80]	; (2068 <_wdt_init+0x64>)
    2016:	4b15      	ldr	r3, [pc, #84]	; (206c <_wdt_init+0x68>)
    2018:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    201a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    201c:	689a      	ldr	r2, [r3, #8]
    201e:	f012 0f0e 	tst.w	r2, #14
    2022:	d1fb      	bne.n	201c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2024:	781a      	ldrb	r2, [r3, #0]
    2026:	09d2      	lsrs	r2, r2, #7
    2028:	d118      	bne.n	205c <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    202a:	689a      	ldr	r2, [r3, #8]
    202c:	f012 0f0e 	tst.w	r2, #14
    2030:	d1fb      	bne.n	202a <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2032:	781a      	ldrb	r2, [r3, #0]
    2034:	f012 0f02 	tst.w	r2, #2
    2038:	d113      	bne.n	2062 <_wdt_init+0x5e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    203a:	781a      	ldrb	r2, [r3, #0]
    203c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2040:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2042:	689a      	ldr	r2, [r3, #8]
    2044:	f012 0f0e 	tst.w	r2, #14
    2048:	d1fb      	bne.n	2042 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    204a:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    204c:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    204e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    2052:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    2054:	2000      	movs	r0, #0
    2056:	bd10      	pop	{r4, pc}
    2058:	2000      	movs	r0, #0
    205a:	e7da      	b.n	2012 <_wdt_init+0xe>
		return ERR_DENIED;
    205c:	f06f 0010 	mvn.w	r0, #16
    2060:	bd10      	pop	{r4, pc}
    2062:	f06f 0010 	mvn.w	r0, #16
}
    2066:	bd10      	pop	{r4, pc}
    2068:	0000394c 	.word	0x0000394c
    206c:	00000cdd 	.word	0x00000cdd

00002070 <setColorRGB>:
uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
	fore_Color_High = ((r&248)|g>>5);
    2070:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    2074:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
    2078:	4b04      	ldr	r3, [pc, #16]	; (208c <setColorRGB+0x1c>)
    207a:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    207c:	00c9      	lsls	r1, r1, #3
    207e:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    2082:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
    2086:	4b02      	ldr	r3, [pc, #8]	; (2090 <setColorRGB+0x20>)
    2088:	8019      	strh	r1, [r3, #0]
    208a:	4770      	bx	lr
    208c:	2000036a 	.word	0x2000036a
    2090:	2000036c 	.word	0x2000036c

00002094 <setBackColorRGB>:
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
	back_Color_High = ((r&248)|g>>5);
    2094:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    2098:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
    209c:	4b04      	ldr	r3, [pc, #16]	; (20b0 <setBackColorRGB+0x1c>)
    209e:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
    20a0:	00c9      	lsls	r1, r1, #3
    20a2:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    20a6:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
    20aa:	4b02      	ldr	r3, [pc, #8]	; (20b4 <setBackColorRGB+0x20>)
    20ac:	8019      	strh	r1, [r3, #0]
    20ae:	4770      	bx	lr
    20b0:	2000036e 	.word	0x2000036e
    20b4:	20000368 	.word	0x20000368

000020b8 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
    20b8:	b470      	push	{r4, r5, r6}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
    20ba:	f64f 74ff 	movw	r4, #65535	; 0xffff
    20be:	4b1a      	ldr	r3, [pc, #104]	; (2128 <LCD_Fast_Fill+0x70>)
    20c0:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
    20c2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    20c6:	3304      	adds	r3, #4
    20c8:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
    20ca:	4616      	mov	r6, r2
    20cc:	2a00      	cmp	r2, #0
    20ce:	bfb8      	it	lt
    20d0:	f102 060f 	addlt.w	r6, r2, #15
    20d4:	1136      	asrs	r6, r6, #4
	for (int i=0; i<blocks; i++)
    20d6:	2e00      	cmp	r6, #0
    20d8:	dd0c      	ble.n	20f4 <LCD_Fast_Fill+0x3c>
    20da:	2500      	movs	r5, #0
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
    20dc:	4c12      	ldr	r4, [pc, #72]	; (2128 <LCD_Fast_Fill+0x70>)
    20de:	f44f 3100 	mov.w	r1, #131072	; 0x20000
			REG_PORT_OUTSET1 = LCD_WR;
    20e2:	4812      	ldr	r0, [pc, #72]	; (212c <LCD_Fast_Fill+0x74>)
{
    20e4:	2310      	movs	r3, #16
			REG_PORT_OUTCLR1 = LCD_WR;
    20e6:	6021      	str	r1, [r4, #0]
			REG_PORT_OUTSET1 = LCD_WR;
    20e8:	6001      	str	r1, [r0, #0]
		for (int j=0; j<16; j++)
    20ea:	3b01      	subs	r3, #1
    20ec:	d1fb      	bne.n	20e6 <LCD_Fast_Fill+0x2e>
	for (int i=0; i<blocks; i++)
    20ee:	3501      	adds	r5, #1
    20f0:	42ae      	cmp	r6, r5
    20f2:	d1f7      	bne.n	20e4 <LCD_Fast_Fill+0x2c>
		}
	}
	
	if ((pix % 16) != 0)
    20f4:	f012 0f0f 	tst.w	r2, #15
    20f8:	d014      	beq.n	2124 <LCD_Fast_Fill+0x6c>
	for (int i=0; i<(pix % 16)+1; i++)
    20fa:	4253      	negs	r3, r2
    20fc:	f002 020f 	and.w	r2, r2, #15
    2100:	f003 030f 	and.w	r3, r3, #15
    2104:	bf58      	it	pl
    2106:	425a      	negpl	r2, r3
    2108:	1c53      	adds	r3, r2, #1
    210a:	2b00      	cmp	r3, #0
    210c:	dd0a      	ble.n	2124 <LCD_Fast_Fill+0x6c>
    210e:	461a      	mov	r2, r3
    2110:	2300      	movs	r3, #0
	{
		REG_PORT_OUTCLR1 = LCD_WR;
    2112:	4c05      	ldr	r4, [pc, #20]	; (2128 <LCD_Fast_Fill+0x70>)
    2114:	f44f 3100 	mov.w	r1, #131072	; 0x20000
		REG_PORT_OUTSET1 = LCD_WR;
    2118:	4804      	ldr	r0, [pc, #16]	; (212c <LCD_Fast_Fill+0x74>)
		REG_PORT_OUTCLR1 = LCD_WR;
    211a:	6021      	str	r1, [r4, #0]
		REG_PORT_OUTSET1 = LCD_WR;
    211c:	6001      	str	r1, [r0, #0]
	for (int i=0; i<(pix % 16)+1; i++)
    211e:	3301      	adds	r3, #1
    2120:	429a      	cmp	r2, r3
    2122:	d1fa      	bne.n	211a <LCD_Fast_Fill+0x62>
	}
}
    2124:	bc70      	pop	{r4, r5, r6}
    2126:	4770      	bx	lr
    2128:	41008094 	.word	0x41008094
    212c:	41008098 	.word	0x41008098

00002130 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
    2130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2134:	4681      	mov	r9, r0
    2136:	460f      	mov	r7, r1
    2138:	4690      	mov	r8, r2
    213a:	461e      	mov	r6, r3
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
    213c:	2100      	movs	r1, #0
    213e:	202a      	movs	r0, #42	; 0x2a
    2140:	4c18      	ldr	r4, [pc, #96]	; (21a4 <setXY+0x74>)
    2142:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
    2144:	ea4f 2019 	mov.w	r0, r9, lsr #8
    2148:	4d17      	ldr	r5, [pc, #92]	; (21a8 <setXY+0x78>)
    214a:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
    214c:	2101      	movs	r1, #1
    214e:	202a      	movs	r0, #42	; 0x2a
    2150:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
    2152:	fa5f f089 	uxtb.w	r0, r9
    2156:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
    2158:	2102      	movs	r1, #2
    215a:	202a      	movs	r0, #42	; 0x2a
    215c:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
    215e:	ea4f 2018 	mov.w	r0, r8, lsr #8
    2162:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
    2164:	2103      	movs	r1, #3
    2166:	202a      	movs	r0, #42	; 0x2a
    2168:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
    216a:	fa5f f088 	uxtb.w	r0, r8
    216e:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
    2170:	2100      	movs	r1, #0
    2172:	202b      	movs	r0, #43	; 0x2b
    2174:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
    2176:	0a38      	lsrs	r0, r7, #8
    2178:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
    217a:	2101      	movs	r1, #1
    217c:	202b      	movs	r0, #43	; 0x2b
    217e:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
    2180:	b2f8      	uxtb	r0, r7
    2182:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
    2184:	2102      	movs	r1, #2
    2186:	202b      	movs	r0, #43	; 0x2b
    2188:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
    218a:	0a30      	lsrs	r0, r6, #8
    218c:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
    218e:	2103      	movs	r1, #3
    2190:	202b      	movs	r0, #43	; 0x2b
    2192:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
    2194:	b2f0      	uxtb	r0, r6
    2196:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
    2198:	2100      	movs	r1, #0
    219a:	202c      	movs	r0, #44	; 0x2c
    219c:	47a0      	blx	r4
    219e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    21a2:	bf00      	nop
    21a4:	000022ad 	.word	0x000022ad
    21a8:	000022c5 	.word	0x000022c5

000021ac <fillRect>:
{
    21ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21b0:	4606      	mov	r6, r0
    21b2:	4689      	mov	r9, r1
    21b4:	4615      	mov	r5, r2
    21b6:	461c      	mov	r4, r3
	if (x1>x2)
    21b8:	4290      	cmp	r0, r2
    21ba:	dd01      	ble.n	21c0 <fillRect+0x14>
		x1 = x2;
    21bc:	4616      	mov	r6, r2
		x2 = temp;
    21be:	4605      	mov	r5, r0
	if (y1>y2)
    21c0:	45a1      	cmp	r9, r4
    21c2:	dd02      	ble.n	21ca <fillRect+0x1e>
    21c4:	4633      	mov	r3, r6
		x1 = x2;
    21c6:	462e      	mov	r6, r5
		x2 = temp;
    21c8:	461d      	mov	r5, r3
	REG_PORT_OUTCLR1 = LCD_CS;
    21ca:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
    21ce:	4b0f      	ldr	r3, [pc, #60]	; (220c <fillRect+0x60>)
    21d0:	f8c3 8000 	str.w	r8, [r3]
	setXY(x1, y1, x2, y2);
    21d4:	b2a3      	uxth	r3, r4
    21d6:	b2aa      	uxth	r2, r5
    21d8:	fa1f f189 	uxth.w	r1, r9
    21dc:	b2b0      	uxth	r0, r6
    21de:	4f0c      	ldr	r7, [pc, #48]	; (2210 <fillRect+0x64>)
    21e0:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
    21e2:	4f0c      	ldr	r7, [pc, #48]	; (2214 <fillRect+0x68>)
    21e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    21e8:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
    21ea:	1bad      	subs	r5, r5, r6
    21ec:	eba4 0409 	sub.w	r4, r4, r9
    21f0:	1c62      	adds	r2, r4, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
    21f2:	fb05 2202 	mla	r2, r5, r2, r2
    21f6:	4b08      	ldr	r3, [pc, #32]	; (2218 <fillRect+0x6c>)
    21f8:	8819      	ldrh	r1, [r3, #0]
    21fa:	4b08      	ldr	r3, [pc, #32]	; (221c <fillRect+0x70>)
    21fc:	8818      	ldrh	r0, [r3, #0]
    21fe:	4b08      	ldr	r3, [pc, #32]	; (2220 <fillRect+0x74>)
    2200:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
    2202:	f8c7 8000 	str.w	r8, [r7]
    2206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    220a:	bf00      	nop
    220c:	41008094 	.word	0x41008094
    2210:	00002131 	.word	0x00002131
    2214:	41008098 	.word	0x41008098
    2218:	2000036c 	.word	0x2000036c
    221c:	2000036a 	.word	0x2000036a
    2220:	000020b9 	.word	0x000020b9

00002224 <clrXY>:
{
    2224:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
    2226:	4a04      	ldr	r2, [pc, #16]	; (2238 <clrXY+0x14>)
    2228:	8813      	ldrh	r3, [r2, #0]
    222a:	8852      	ldrh	r2, [r2, #2]
    222c:	2100      	movs	r1, #0
    222e:	4608      	mov	r0, r1
    2230:	4c02      	ldr	r4, [pc, #8]	; (223c <clrXY+0x18>)
    2232:	47a0      	blx	r4
    2234:	bd10      	pop	{r4, pc}
    2236:	bf00      	nop
    2238:	20000000 	.word	0x20000000
    223c:	00002131 	.word	0x00002131

00002240 <clrScr>:
{
    2240:	b508      	push	{r3, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
    2242:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    2246:	4b02      	ldr	r3, [pc, #8]	; (2250 <clrScr+0x10>)
    2248:	601a      	str	r2, [r3, #0]
	clrXY();
    224a:	4b02      	ldr	r3, [pc, #8]	; (2254 <clrScr+0x14>)
    224c:	4798      	blx	r3
    224e:	bd08      	pop	{r3, pc}
    2250:	41008094 	.word	0x41008094
    2254:	00002225 	.word	0x00002225

00002258 <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
    2258:	b510      	push	{r4, lr}
	fore_Color_High = ((r&248)|g>>5);
    225a:	2000      	movs	r0, #0
    225c:	4b05      	ldr	r3, [pc, #20]	; (2274 <clearScreen+0x1c>)
    225e:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
    2260:	4b05      	ldr	r3, [pc, #20]	; (2278 <clearScreen+0x20>)
    2262:	8018      	strh	r0, [r3, #0]
	setColorRGB(0,0,0);
	fillRect(0,0,display_Y_size,display_X_size);
    2264:	4a05      	ldr	r2, [pc, #20]	; (227c <clearScreen+0x24>)
    2266:	8853      	ldrh	r3, [r2, #2]
    2268:	8812      	ldrh	r2, [r2, #0]
    226a:	4601      	mov	r1, r0
    226c:	4c04      	ldr	r4, [pc, #16]	; (2280 <clearScreen+0x28>)
    226e:	47a0      	blx	r4
    2270:	bd10      	pop	{r4, pc}
    2272:	bf00      	nop
    2274:	2000036a 	.word	0x2000036a
    2278:	2000036c 	.word	0x2000036c
    227c:	20000000 	.word	0x20000000
    2280:	000021ad 	.word	0x000021ad

00002284 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
    2284:	b410      	push	{r4}
	REG_PORT_OUTCLR1 = 0x0000ffff;
    2286:	4c07      	ldr	r4, [pc, #28]	; (22a4 <LCD_Write_Bus+0x20>)
    2288:	f64f 73ff 	movw	r3, #65535	; 0xffff
    228c:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
    228e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    2292:	4b05      	ldr	r3, [pc, #20]	; (22a8 <LCD_Write_Bus+0x24>)
    2294:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2296:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    229a:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
    229c:	601a      	str	r2, [r3, #0]
}
    229e:	f85d 4b04 	ldr.w	r4, [sp], #4
    22a2:	4770      	bx	lr
    22a4:	41008094 	.word	0x41008094
    22a8:	41008098 	.word	0x41008098

000022ac <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
    22ac:	b508      	push	{r3, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
    22ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    22b2:	4b02      	ldr	r3, [pc, #8]	; (22bc <LCD_Write_COM16+0x10>)
    22b4:	601a      	str	r2, [r3, #0]
	
	LCD_Write_Bus(VH,VL);
    22b6:	4b02      	ldr	r3, [pc, #8]	; (22c0 <LCD_Write_COM16+0x14>)
    22b8:	4798      	blx	r3
    22ba:	bd08      	pop	{r3, pc}
    22bc:	41008094 	.word	0x41008094
    22c0:	00002285 	.word	0x00002285

000022c4 <LCD_Write_DATA8>:
	REG_PORT_OUTSET1 = LCD_DC;
	LCD_Write_Bus(VH,VL);
}

void LCD_Write_DATA8(char VL)
{
    22c4:	b508      	push	{r3, lr}
	REG_PORT_OUTSET1 = LCD_DC;
    22c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    22ca:	4b03      	ldr	r3, [pc, #12]	; (22d8 <LCD_Write_DATA8+0x14>)
    22cc:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
    22ce:	4601      	mov	r1, r0
    22d0:	2000      	movs	r0, #0
    22d2:	4b02      	ldr	r3, [pc, #8]	; (22dc <LCD_Write_DATA8+0x18>)
    22d4:	4798      	blx	r3
    22d6:	bd08      	pop	{r3, pc}
    22d8:	41008098 	.word	0x41008098
    22dc:	00002285 	.word	0x00002285

000022e0 <InitLCD>:
{
    22e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    22e4:	4b87      	ldr	r3, [pc, #540]	; (2504 <InitLCD+0x224>)
    22e6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    22ea:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    22ec:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    22f0:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    22f2:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
    22f6:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    22f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    22fc:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    22fe:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2302:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    2304:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2308:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    230a:	4c7f      	ldr	r4, [pc, #508]	; (2508 <InitLCD+0x228>)
    230c:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    230e:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    2310:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    2312:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    2314:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    2316:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    2318:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    231a:	f8df 8200 	ldr.w	r8, [pc, #512]	; 251c <InitLCD+0x23c>
    231e:	f8c8 2000 	str.w	r2, [r8]
	REG_PORT_OUTSET1 = LCD_Reset;
    2322:	f8c8 5000 	str.w	r5, [r8]
	delay_ms(5);
    2326:	2005      	movs	r0, #5
    2328:	4f78      	ldr	r7, [pc, #480]	; (250c <InitLCD+0x22c>)
    232a:	47b8      	blx	r7
	REG_PORT_OUTCLR1 = LCD_Reset;
    232c:	6025      	str	r5, [r4, #0]
	delay_ms(15);
    232e:	200f      	movs	r0, #15
    2330:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_Reset;
    2332:	f8c8 5000 	str.w	r5, [r8]
	delay_ms(15);
    2336:	200f      	movs	r0, #15
    2338:	47b8      	blx	r7
	REG_PORT_OUTCLR1 = LCD_CS;
    233a:	6026      	str	r6, [r4, #0]
    233c:	4f74      	ldr	r7, [pc, #464]	; (2510 <InitLCD+0x230>)
    233e:	1e7c      	subs	r4, r7, #1
    2340:	f107 0647 	add.w	r6, r7, #71	; 0x47
    2344:	f107 058f 	add.w	r5, r7, #143	; 0x8f
    2348:	3745      	adds	r7, #69	; 0x45
		REG_PORT_OUTCLR1 = LCD_DC;
    234a:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 2508 <InitLCD+0x228>
    234e:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
    2352:	46c2      	mov	sl, r8
		REG_PORT_OUTSET1 = LCD_DC;
    2354:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 251c <InitLCD+0x23c>
		REG_PORT_OUTCLR1 = LCD_DC;
    2358:	f8cb a000 	str.w	sl, [fp]
		LCD_Write_COM16(belial[i],mulciber[i]);
    235c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2360:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    2364:	4b6b      	ldr	r3, [pc, #428]	; (2514 <InitLCD+0x234>)
    2366:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    2368:	f8c9 8000 	str.w	r8, [r9]
		LCD_Write_DATA8(lucifer[i]);
    236c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    2370:	4b69      	ldr	r3, [pc, #420]	; (2518 <InitLCD+0x238>)
    2372:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    2374:	42bc      	cmp	r4, r7
    2376:	d1ef      	bne.n	2358 <InitLCD+0x78>
    2378:	25d1      	movs	r5, #209	; 0xd1
    237a:	f8df a194 	ldr.w	sl, [pc, #404]	; 2510 <InitLCD+0x230>
    237e:	f20a 190b 	addw	r9, sl, #267	; 0x10b
			LCD_Write_COM16(k,0x00);
    2382:	f8df 8190 	ldr.w	r8, [pc, #400]	; 2514 <InitLCD+0x234>
    2386:	f10a 04d7 	add.w	r4, sl, #215	; 0xd7
    238a:	2700      	movs	r7, #0
			LCD_Write_DATA8(beelzebub[l]);
    238c:	4e62      	ldr	r6, [pc, #392]	; (2518 <InitLCD+0x238>)
			LCD_Write_COM16(k,0x00);
    238e:	4639      	mov	r1, r7
    2390:	4628      	mov	r0, r5
    2392:	47c0      	blx	r8
			LCD_Write_DATA8(beelzebub[l]);
    2394:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    2398:	47b0      	blx	r6
		for(int l = 0; l < 52; l++)
    239a:	45a1      	cmp	r9, r4
    239c:	d1f7      	bne.n	238e <InitLCD+0xae>
	for(char k = 0xD1; k < 0xD6; k++)
    239e:	3501      	adds	r5, #1
    23a0:	b2ed      	uxtb	r5, r5
    23a2:	2dd6      	cmp	r5, #214	; 0xd6
    23a4:	d1ef      	bne.n	2386 <InitLCD+0xa6>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    23a6:	2100      	movs	r1, #0
    23a8:	20f0      	movs	r0, #240	; 0xf0
    23aa:	4c5a      	ldr	r4, [pc, #360]	; (2514 <InitLCD+0x234>)
    23ac:	47a0      	blx	r4
    23ae:	2055      	movs	r0, #85	; 0x55
    23b0:	4d59      	ldr	r5, [pc, #356]	; (2518 <InitLCD+0x238>)
    23b2:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    23b4:	2101      	movs	r1, #1
    23b6:	20f0      	movs	r0, #240	; 0xf0
    23b8:	47a0      	blx	r4
    23ba:	20aa      	movs	r0, #170	; 0xaa
    23bc:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    23be:	2102      	movs	r1, #2
    23c0:	20f0      	movs	r0, #240	; 0xf0
    23c2:	47a0      	blx	r4
    23c4:	2052      	movs	r0, #82	; 0x52
    23c6:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    23c8:	2103      	movs	r1, #3
    23ca:	20f0      	movs	r0, #240	; 0xf0
    23cc:	47a0      	blx	r4
    23ce:	2008      	movs	r0, #8
    23d0:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    23d2:	2104      	movs	r1, #4
    23d4:	20f0      	movs	r0, #240	; 0xf0
    23d6:	47a0      	blx	r4
    23d8:	2000      	movs	r0, #0
    23da:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    23dc:	2100      	movs	r1, #0
    23de:	20b1      	movs	r0, #177	; 0xb1
    23e0:	47a0      	blx	r4
    23e2:	20cc      	movs	r0, #204	; 0xcc
    23e4:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    23e6:	2101      	movs	r1, #1
    23e8:	20b1      	movs	r0, #177	; 0xb1
    23ea:	47a0      	blx	r4
    23ec:	2000      	movs	r0, #0
    23ee:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    23f0:	2100      	movs	r1, #0
    23f2:	20b5      	movs	r0, #181	; 0xb5
    23f4:	47a0      	blx	r4
    23f6:	2050      	movs	r0, #80	; 0x50
    23f8:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    23fa:	2100      	movs	r1, #0
    23fc:	20b6      	movs	r0, #182	; 0xb6
    23fe:	47a0      	blx	r4
    2400:	2005      	movs	r0, #5
    2402:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    2404:	2100      	movs	r1, #0
    2406:	20b7      	movs	r0, #183	; 0xb7
    2408:	47a0      	blx	r4
    240a:	2070      	movs	r0, #112	; 0x70
    240c:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    240e:	2101      	movs	r1, #1
    2410:	20b7      	movs	r0, #183	; 0xb7
    2412:	47a0      	blx	r4
    2414:	2070      	movs	r0, #112	; 0x70
    2416:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    2418:	2100      	movs	r1, #0
    241a:	20b8      	movs	r0, #184	; 0xb8
    241c:	47a0      	blx	r4
    241e:	2001      	movs	r0, #1
    2420:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    2422:	2101      	movs	r1, #1
    2424:	20b8      	movs	r0, #184	; 0xb8
    2426:	47a0      	blx	r4
    2428:	2003      	movs	r0, #3
    242a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    242c:	2102      	movs	r1, #2
    242e:	20b8      	movs	r0, #184	; 0xb8
    2430:	47a0      	blx	r4
    2432:	2003      	movs	r0, #3
    2434:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    2436:	2103      	movs	r1, #3
    2438:	20b8      	movs	r0, #184	; 0xb8
    243a:	47a0      	blx	r4
    243c:	2003      	movs	r0, #3
    243e:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    2440:	2100      	movs	r1, #0
    2442:	20bc      	movs	r0, #188	; 0xbc
    2444:	47a0      	blx	r4
    2446:	2002      	movs	r0, #2
    2448:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    244a:	2101      	movs	r1, #1
    244c:	20bc      	movs	r0, #188	; 0xbc
    244e:	47a0      	blx	r4
    2450:	2000      	movs	r0, #0
    2452:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    2454:	2102      	movs	r1, #2
    2456:	20bc      	movs	r0, #188	; 0xbc
    2458:	47a0      	blx	r4
    245a:	2000      	movs	r0, #0
    245c:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    245e:	2100      	movs	r1, #0
    2460:	20c9      	movs	r0, #201	; 0xc9
    2462:	47a0      	blx	r4
    2464:	20d0      	movs	r0, #208	; 0xd0
    2466:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    2468:	2101      	movs	r1, #1
    246a:	20c9      	movs	r0, #201	; 0xc9
    246c:	47a0      	blx	r4
    246e:	2002      	movs	r0, #2
    2470:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    2472:	2102      	movs	r1, #2
    2474:	20c9      	movs	r0, #201	; 0xc9
    2476:	47a0      	blx	r4
    2478:	2050      	movs	r0, #80	; 0x50
    247a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    247c:	2103      	movs	r1, #3
    247e:	20c9      	movs	r0, #201	; 0xc9
    2480:	47a0      	blx	r4
    2482:	2050      	movs	r0, #80	; 0x50
    2484:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    2486:	2104      	movs	r1, #4
    2488:	20c9      	movs	r0, #201	; 0xc9
    248a:	47a0      	blx	r4
    248c:	2050      	movs	r0, #80	; 0x50
    248e:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    2490:	2100      	movs	r1, #0
    2492:	2035      	movs	r0, #53	; 0x35
    2494:	47a0      	blx	r4
    2496:	2000      	movs	r0, #0
    2498:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    249a:	2100      	movs	r1, #0
    249c:	203a      	movs	r0, #58	; 0x3a
    249e:	47a0      	blx	r4
    24a0:	2055      	movs	r0, #85	; 0x55
    24a2:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    24a4:	2100      	movs	r1, #0
    24a6:	2036      	movs	r0, #54	; 0x36
    24a8:	47a0      	blx	r4
    24aa:	20e2      	movs	r0, #226	; 0xe2
    24ac:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    24ae:	2100      	movs	r1, #0
    24b0:	2011      	movs	r0, #17
    24b2:	47a0      	blx	r4
  	delay_ms(100);
    24b4:	2064      	movs	r0, #100	; 0x64
    24b6:	4e15      	ldr	r6, [pc, #84]	; (250c <InitLCD+0x22c>)
    24b8:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    24ba:	2100      	movs	r1, #0
    24bc:	2029      	movs	r0, #41	; 0x29
    24be:	47a0      	blx	r4
   	delay_ms(120);
    24c0:	2078      	movs	r0, #120	; 0x78
    24c2:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    24c4:	2100      	movs	r1, #0
    24c6:	2051      	movs	r0, #81	; 0x51
    24c8:	47a0      	blx	r4
    24ca:	20ff      	movs	r0, #255	; 0xff
    24cc:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    24ce:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    24d2:	4b12      	ldr	r3, [pc, #72]	; (251c <InitLCD+0x23c>)
    24d4:	601a      	str	r2, [r3, #0]
	clrScr();
    24d6:	4b12      	ldr	r3, [pc, #72]	; (2520 <InitLCD+0x240>)
    24d8:	4798      	blx	r3
	setColorRGB(0,0,0);
    24da:	2200      	movs	r2, #0
    24dc:	4611      	mov	r1, r2
    24de:	4610      	mov	r0, r2
    24e0:	4b10      	ldr	r3, [pc, #64]	; (2524 <InitLCD+0x244>)
    24e2:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    24e4:	2200      	movs	r2, #0
    24e6:	4611      	mov	r1, r2
    24e8:	4610      	mov	r0, r2
    24ea:	4b0f      	ldr	r3, [pc, #60]	; (2528 <InitLCD+0x248>)
    24ec:	4798      	blx	r3
	fillRect(0,0,799,489);
    24ee:	f240 13e9 	movw	r3, #489	; 0x1e9
    24f2:	f240 321f 	movw	r2, #799	; 0x31f
    24f6:	2100      	movs	r1, #0
    24f8:	4608      	mov	r0, r1
    24fa:	4c0c      	ldr	r4, [pc, #48]	; (252c <InitLCD+0x24c>)
    24fc:	47a0      	blx	r4
    24fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2502:	bf00      	nop
    2504:	41008088 	.word	0x41008088
    2508:	41008094 	.word	0x41008094
    250c:	00000775 	.word	0x00000775
    2510:	00003964 	.word	0x00003964
    2514:	000022ad 	.word	0x000022ad
    2518:	000022c5 	.word	0x000022c5
    251c:	41008098 	.word	0x41008098
    2520:	00002241 	.word	0x00002241
    2524:	00002071 	.word	0x00002071
    2528:	00002095 	.word	0x00002095
    252c:	000021ad 	.word	0x000021ad

00002530 <setupBoard>:
		setupBoard();
	}
}

void setupBoard(void)
{
    2530:	b508      	push	{r3, lr}
	//doesn't work without this line here. Remove this at your own peril.
	//usart_read_buffer_job(&usart_instance, (uint8_t*)&rx_buf, 1);
	

	
	InitLCD();
    2532:	4b02      	ldr	r3, [pc, #8]	; (253c <setupBoard+0xc>)
    2534:	4798      	blx	r3
	splashScreen();
    2536:	4b02      	ldr	r3, [pc, #8]	; (2540 <setupBoard+0x10>)
    2538:	4798      	blx	r3
    253a:	bd08      	pop	{r3, pc}
    253c:	000022e1 	.word	0x000022e1
    2540:	00002635 	.word	0x00002635

00002544 <main>:
{
    2544:	b508      	push	{r3, lr}
	atmel_start_init();
    2546:	4b05      	ldr	r3, [pc, #20]	; (255c <main+0x18>)
    2548:	4798      	blx	r3
	printf("Serial OK 9600 8N1\n\r");
    254a:	4805      	ldr	r0, [pc, #20]	; (2560 <main+0x1c>)
    254c:	4b05      	ldr	r3, [pc, #20]	; (2564 <main+0x20>)
    254e:	4798      	blx	r3
	setupBoard();
    2550:	4b05      	ldr	r3, [pc, #20]	; (2568 <main+0x24>)
    2552:	4798      	blx	r3
		setupBoard();
    2554:	4c04      	ldr	r4, [pc, #16]	; (2568 <main+0x24>)
    2556:	47a0      	blx	r4
    2558:	e7fd      	b.n	2556 <main+0x12>
    255a:	bf00      	nop
    255c:	000002d1 	.word	0x000002d1
    2560:	00003a70 	.word	0x00003a70
    2564:	000027e5 	.word	0x000027e5
    2568:	00002531 	.word	0x00002531

0000256c <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    256c:	b5f0      	push	{r4, r5, r6, r7, lr}
    256e:	b0c1      	sub	sp, #260	; 0x104
    2570:	4607      	mov	r7, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    2572:	4c2d      	ldr	r4, [pc, #180]	; (2628 <drawKare+0xbc>)
    2574:	22d0      	movs	r2, #208	; 0xd0
    2576:	4621      	mov	r1, r4
    2578:	a80c      	add	r0, sp, #48	; 0x30
    257a:	4b2c      	ldr	r3, [pc, #176]	; (262c <drawKare+0xc0>)
    257c:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    257e:	ad05      	add	r5, sp, #20
    2580:	f104 06d0 	add.w	r6, r4, #208	; 0xd0
    2584:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2588:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    258c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    2590:	466d      	mov	r5, sp
    2592:	34ec      	adds	r4, #236	; 0xec
    2594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2598:	6823      	ldr	r3, [r4, #0]
    259a:	602b      	str	r3, [r5, #0]
    259c:	ac0c      	add	r4, sp, #48	; 0x30
    259e:	ae40      	add	r6, sp, #256	; 0x100

	
	
	for(int i = 0; i < 104; i = i+4)
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    25a0:	4d23      	ldr	r5, [pc, #140]	; (2630 <drawKare+0xc4>)
		((body[i+1]/iSv)+(offsetGraphicY)),
		((body[i+2]/iSv)+(offsetGraphicX)),
		((body[i+3]/iSv)+(offsetGraphicY)));
    25a2:	88e3      	ldrh	r3, [r4, #6]
    25a4:	105b      	asrs	r3, r3, #1
		((body[i+2]/iSv)+(offsetGraphicX)),
    25a6:	88a2      	ldrh	r2, [r4, #4]
    25a8:	1052      	asrs	r2, r2, #1
		((body[i+1]/iSv)+(offsetGraphicY)),
    25aa:	8861      	ldrh	r1, [r4, #2]
    25ac:	1049      	asrs	r1, r1, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    25ae:	f834 0b08 	ldrh.w	r0, [r4], #8
    25b2:	1040      	asrs	r0, r0, #1
    25b4:	3396      	adds	r3, #150	; 0x96
    25b6:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    25ba:	3196      	adds	r1, #150	; 0x96
    25bc:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    25c0:	47a8      	blx	r5
	for(int i = 0; i < 104; i = i+4)
    25c2:	42b4      	cmp	r4, r6
    25c4:	d1ed      	bne.n	25a2 <drawKare+0x36>
	}
	switch(emotion)
    25c6:	b11f      	cbz	r7, 25d0 <drawKare+0x64>
    25c8:	2f01      	cmp	r7, #1
    25ca:	d017      	beq.n	25fc <drawKare+0x90>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    25cc:	b041      	add	sp, #260	; 0x104
    25ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25d0:	ac05      	add	r4, sp, #20
    25d2:	ae0c      	add	r6, sp, #48	; 0x30
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    25d4:	4d16      	ldr	r5, [pc, #88]	; (2630 <drawKare+0xc4>)
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    25d6:	78e3      	ldrb	r3, [r4, #3]
    25d8:	105b      	asrs	r3, r3, #1
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    25da:	78a2      	ldrb	r2, [r4, #2]
    25dc:	1052      	asrs	r2, r2, #1
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    25de:	7861      	ldrb	r1, [r4, #1]
    25e0:	1049      	asrs	r1, r1, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    25e2:	f814 0b04 	ldrb.w	r0, [r4], #4
    25e6:	1040      	asrs	r0, r0, #1
    25e8:	3396      	adds	r3, #150	; 0x96
    25ea:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    25ee:	3196      	adds	r1, #150	; 0x96
    25f0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    25f4:	47a8      	blx	r5
		for(int i = 0; i < 28; i = i+4)
    25f6:	42a6      	cmp	r6, r4
    25f8:	d1ed      	bne.n	25d6 <drawKare+0x6a>
    25fa:	e7e7      	b.n	25cc <drawKare+0x60>
    25fc:	466c      	mov	r4, sp
    25fe:	ae05      	add	r6, sp, #20
			fillRect((
    2600:	4d0b      	ldr	r5, [pc, #44]	; (2630 <drawKare+0xc4>)
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    2602:	78e3      	ldrb	r3, [r4, #3]
    2604:	105b      	asrs	r3, r3, #1
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    2606:	78a2      	ldrb	r2, [r4, #2]
    2608:	1052      	asrs	r2, r2, #1
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    260a:	7861      	ldrb	r1, [r4, #1]
    260c:	1049      	asrs	r1, r1, #1
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    260e:	f814 0b04 	ldrb.w	r0, [r4], #4
    2612:	1040      	asrs	r0, r0, #1
			fillRect((
    2614:	3396      	adds	r3, #150	; 0x96
    2616:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    261a:	3196      	adds	r1, #150	; 0x96
    261c:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    2620:	47a8      	blx	r5
		for(int i = 0; i < 20; i = i+4)
    2622:	42b4      	cmp	r4, r6
    2624:	d1ed      	bne.n	2602 <drawKare+0x96>
    2626:	e7d1      	b.n	25cc <drawKare+0x60>
    2628:	00003a88 	.word	0x00003a88
    262c:	000027bd 	.word	0x000027bd
    2630:	000021ad 	.word	0x000021ad

00002634 <splashScreen>:

void splashScreen(void)
{
    2634:	b508      	push	{r3, lr}
	splashText[31] = "Breadboarding Is Not A Crime";//
	splashText[32] = "Off by one errors are common";
	
	//const char *textPhrase = splashText[(((rand())%32))];
	
	clearScreen();
    2636:	4b15      	ldr	r3, [pc, #84]	; (268c <splashScreen+0x58>)
    2638:	4798      	blx	r3
	setColorRGB(255,255,255);
    263a:	22ff      	movs	r2, #255	; 0xff
    263c:	4611      	mov	r1, r2
    263e:	4610      	mov	r0, r2
    2640:	4b13      	ldr	r3, [pc, #76]	; (2690 <splashScreen+0x5c>)
    2642:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    2644:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2648:	4b12      	ldr	r3, [pc, #72]	; (2694 <splashScreen+0x60>)
    264a:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    264c:	3b8c      	subs	r3, #140	; 0x8c
    264e:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
    2652:	f042 0204 	orr.w	r2, r2, #4
    2656:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    265a:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
    265e:	f042 0202 	orr.w	r2, r2, #2
    2662:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    2666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    266a:	2b00      	cmp	r3, #0
	{
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
    266c:	bfb4      	ite	lt
    266e:	2001      	movlt	r0, #1
	}
	else
	drawKare(0); //The normal graphic
    2670:	2000      	movge	r0, #0
    2672:	4b09      	ldr	r3, [pc, #36]	; (2698 <splashScreen+0x64>)
    2674:	4798      	blx	r3
{
    2676:	2250      	movs	r2, #80	; 0x50
    2678:	e001      	b.n	267e <splashScreen+0x4a>
	
	for(int i = 0 ; i < 80 ; i++)
    267a:	3a01      	subs	r2, #1
    267c:	d003      	beq.n	2686 <splashScreen+0x52>
{
    267e:	2318      	movs	r3, #24
	{
		for(int j = 0 ; j < 24 ; j++)
    2680:	3b01      	subs	r3, #1
    2682:	d1fd      	bne.n	2680 <splashScreen+0x4c>
    2684:	e7f9      	b.n	267a <splashScreen+0x46>
	delay_ms(3000);
		
	clearScreen();
	nullifyConsole();
	*/
	clearScreen();
    2686:	4b01      	ldr	r3, [pc, #4]	; (268c <splashScreen+0x58>)
    2688:	4798      	blx	r3
    268a:	bd08      	pop	{r3, pc}
    268c:	00002259 	.word	0x00002259
    2690:	00002071 	.word	0x00002071
    2694:	4100808c 	.word	0x4100808c
    2698:	0000256d 	.word	0x0000256d

0000269c <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    269c:	b940      	cbnz	r0, 26b0 <_read+0x14>
{
    269e:	b508      	push	{r3, lr}
    26a0:	460b      	mov	r3, r1
    26a2:	4611      	mov	r1, r2
    26a4:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    26a6:	4b04      	ldr	r3, [pc, #16]	; (26b8 <_read+0x1c>)
    26a8:	4798      	blx	r3
    26aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    26ae:	bd08      	pop	{r3, pc}
		return -1;
    26b0:	f04f 30ff 	mov.w	r0, #4294967295
    26b4:	4770      	bx	lr
    26b6:	bf00      	nop
    26b8:	0000270d 	.word	0x0000270d

000026bc <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    26bc:	3801      	subs	r0, #1
    26be:	2802      	cmp	r0, #2
    26c0:	d808      	bhi.n	26d4 <_write+0x18>
{
    26c2:	b508      	push	{r3, lr}
    26c4:	460b      	mov	r3, r1
    26c6:	4611      	mov	r1, r2
    26c8:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    26ca:	4b04      	ldr	r3, [pc, #16]	; (26dc <_write+0x20>)
    26cc:	4798      	blx	r3
    26ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
    26d2:	bd08      	pop	{r3, pc}
		return -1;
    26d4:	f04f 30ff 	mov.w	r0, #4294967295
    26d8:	4770      	bx	lr
    26da:	bf00      	nop
    26dc:	00002731 	.word	0x00002731

000026e0 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    26e0:	b570      	push	{r4, r5, r6, lr}
    26e2:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    26e4:	4d06      	ldr	r5, [pc, #24]	; (2700 <stdio_io_init+0x20>)
    26e6:	682b      	ldr	r3, [r5, #0]
    26e8:	2100      	movs	r1, #0
    26ea:	6898      	ldr	r0, [r3, #8]
    26ec:	4c05      	ldr	r4, [pc, #20]	; (2704 <stdio_io_init+0x24>)
    26ee:	47a0      	blx	r4
	setbuf(stdin, NULL);
    26f0:	682b      	ldr	r3, [r5, #0]
    26f2:	2100      	movs	r1, #0
    26f4:	6858      	ldr	r0, [r3, #4]
    26f6:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    26f8:	4b03      	ldr	r3, [pc, #12]	; (2708 <stdio_io_init+0x28>)
    26fa:	601e      	str	r6, [r3, #0]
    26fc:	bd70      	pop	{r4, r5, r6, pc}
    26fe:	bf00      	nop
    2700:	20000004 	.word	0x20000004
    2704:	00002815 	.word	0x00002815
    2708:	20000300 	.word	0x20000300

0000270c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    270c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    270e:	4b06      	ldr	r3, [pc, #24]	; (2728 <stdio_io_read+0x1c>)
    2710:	681b      	ldr	r3, [r3, #0]
    2712:	b133      	cbz	r3, 2722 <stdio_io_read+0x16>
    2714:	460a      	mov	r2, r1
    2716:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    2718:	b292      	uxth	r2, r2
    271a:	4618      	mov	r0, r3
    271c:	4b03      	ldr	r3, [pc, #12]	; (272c <stdio_io_read+0x20>)
    271e:	4798      	blx	r3
    2720:	bd08      	pop	{r3, pc}
		return 0;
    2722:	2000      	movs	r0, #0
}
    2724:	bd08      	pop	{r3, pc}
    2726:	bf00      	nop
    2728:	20000300 	.word	0x20000300
    272c:	0000087d 	.word	0x0000087d

00002730 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    2730:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    2732:	4b06      	ldr	r3, [pc, #24]	; (274c <stdio_io_write+0x1c>)
    2734:	681b      	ldr	r3, [r3, #0]
    2736:	b133      	cbz	r3, 2746 <stdio_io_write+0x16>
    2738:	460a      	mov	r2, r1
    273a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    273c:	b292      	uxth	r2, r2
    273e:	4618      	mov	r0, r3
    2740:	4b03      	ldr	r3, [pc, #12]	; (2750 <stdio_io_write+0x20>)
    2742:	4798      	blx	r3
    2744:	bd08      	pop	{r3, pc}
		return 0;
    2746:	2000      	movs	r0, #0
}
    2748:	bd08      	pop	{r3, pc}
    274a:	bf00      	nop
    274c:	20000300 	.word	0x20000300
    2750:	0000084d 	.word	0x0000084d

00002754 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    2754:	b510      	push	{r4, lr}

	usart_sync_enable(&USART_0);
    2756:	4c04      	ldr	r4, [pc, #16]	; (2768 <stdio_redirect_init+0x14>)
    2758:	4620      	mov	r0, r4
    275a:	4b04      	ldr	r3, [pc, #16]	; (276c <stdio_redirect_init+0x18>)
    275c:	4798      	blx	r3
	stdio_io_init(&USART_0.io);
    275e:	4620      	mov	r0, r4
    2760:	4b03      	ldr	r3, [pc, #12]	; (2770 <stdio_redirect_init+0x1c>)
    2762:	4798      	blx	r3
    2764:	bd10      	pop	{r4, pc}
    2766:	bf00      	nop
    2768:	20000340 	.word	0x20000340
    276c:	000009f5 	.word	0x000009f5
    2770:	000026e1 	.word	0x000026e1

00002774 <__libc_init_array>:
    2774:	b570      	push	{r4, r5, r6, lr}
    2776:	4e0d      	ldr	r6, [pc, #52]	; (27ac <__libc_init_array+0x38>)
    2778:	4c0d      	ldr	r4, [pc, #52]	; (27b0 <__libc_init_array+0x3c>)
    277a:	1ba4      	subs	r4, r4, r6
    277c:	10a4      	asrs	r4, r4, #2
    277e:	2500      	movs	r5, #0
    2780:	42a5      	cmp	r5, r4
    2782:	d109      	bne.n	2798 <__libc_init_array+0x24>
    2784:	4e0b      	ldr	r6, [pc, #44]	; (27b4 <__libc_init_array+0x40>)
    2786:	4c0c      	ldr	r4, [pc, #48]	; (27b8 <__libc_init_array+0x44>)
    2788:	f001 fa4a 	bl	3c20 <_init>
    278c:	1ba4      	subs	r4, r4, r6
    278e:	10a4      	asrs	r4, r4, #2
    2790:	2500      	movs	r5, #0
    2792:	42a5      	cmp	r5, r4
    2794:	d105      	bne.n	27a2 <__libc_init_array+0x2e>
    2796:	bd70      	pop	{r4, r5, r6, pc}
    2798:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    279c:	4798      	blx	r3
    279e:	3501      	adds	r5, #1
    27a0:	e7ee      	b.n	2780 <__libc_init_array+0xc>
    27a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    27a6:	4798      	blx	r3
    27a8:	3501      	adds	r5, #1
    27aa:	e7f2      	b.n	2792 <__libc_init_array+0x1e>
    27ac:	00003c2c 	.word	0x00003c2c
    27b0:	00003c2c 	.word	0x00003c2c
    27b4:	00003c2c 	.word	0x00003c2c
    27b8:	00003c30 	.word	0x00003c30

000027bc <memcpy>:
    27bc:	b510      	push	{r4, lr}
    27be:	1e43      	subs	r3, r0, #1
    27c0:	440a      	add	r2, r1
    27c2:	4291      	cmp	r1, r2
    27c4:	d100      	bne.n	27c8 <memcpy+0xc>
    27c6:	bd10      	pop	{r4, pc}
    27c8:	f811 4b01 	ldrb.w	r4, [r1], #1
    27cc:	f803 4f01 	strb.w	r4, [r3, #1]!
    27d0:	e7f7      	b.n	27c2 <memcpy+0x6>

000027d2 <memset>:
    27d2:	4402      	add	r2, r0
    27d4:	4603      	mov	r3, r0
    27d6:	4293      	cmp	r3, r2
    27d8:	d100      	bne.n	27dc <memset+0xa>
    27da:	4770      	bx	lr
    27dc:	f803 1b01 	strb.w	r1, [r3], #1
    27e0:	e7f9      	b.n	27d6 <memset+0x4>
	...

000027e4 <iprintf>:
    27e4:	b40f      	push	{r0, r1, r2, r3}
    27e6:	4b0a      	ldr	r3, [pc, #40]	; (2810 <iprintf+0x2c>)
    27e8:	b513      	push	{r0, r1, r4, lr}
    27ea:	681c      	ldr	r4, [r3, #0]
    27ec:	b124      	cbz	r4, 27f8 <iprintf+0x14>
    27ee:	69a3      	ldr	r3, [r4, #24]
    27f0:	b913      	cbnz	r3, 27f8 <iprintf+0x14>
    27f2:	4620      	mov	r0, r4
    27f4:	f000 fa76 	bl	2ce4 <__sinit>
    27f8:	ab05      	add	r3, sp, #20
    27fa:	9a04      	ldr	r2, [sp, #16]
    27fc:	68a1      	ldr	r1, [r4, #8]
    27fe:	9301      	str	r3, [sp, #4]
    2800:	4620      	mov	r0, r4
    2802:	f000 fc39 	bl	3078 <_vfiprintf_r>
    2806:	b002      	add	sp, #8
    2808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    280c:	b004      	add	sp, #16
    280e:	4770      	bx	lr
    2810:	20000004 	.word	0x20000004

00002814 <setbuf>:
    2814:	2900      	cmp	r1, #0
    2816:	f44f 6380 	mov.w	r3, #1024	; 0x400
    281a:	bf0c      	ite	eq
    281c:	2202      	moveq	r2, #2
    281e:	2200      	movne	r2, #0
    2820:	f000 b800 	b.w	2824 <setvbuf>

00002824 <setvbuf>:
    2824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2828:	461d      	mov	r5, r3
    282a:	4b51      	ldr	r3, [pc, #324]	; (2970 <setvbuf+0x14c>)
    282c:	681e      	ldr	r6, [r3, #0]
    282e:	4604      	mov	r4, r0
    2830:	460f      	mov	r7, r1
    2832:	4690      	mov	r8, r2
    2834:	b126      	cbz	r6, 2840 <setvbuf+0x1c>
    2836:	69b3      	ldr	r3, [r6, #24]
    2838:	b913      	cbnz	r3, 2840 <setvbuf+0x1c>
    283a:	4630      	mov	r0, r6
    283c:	f000 fa52 	bl	2ce4 <__sinit>
    2840:	4b4c      	ldr	r3, [pc, #304]	; (2974 <setvbuf+0x150>)
    2842:	429c      	cmp	r4, r3
    2844:	d152      	bne.n	28ec <setvbuf+0xc8>
    2846:	6874      	ldr	r4, [r6, #4]
    2848:	f1b8 0f02 	cmp.w	r8, #2
    284c:	d006      	beq.n	285c <setvbuf+0x38>
    284e:	f1b8 0f01 	cmp.w	r8, #1
    2852:	f200 8089 	bhi.w	2968 <setvbuf+0x144>
    2856:	2d00      	cmp	r5, #0
    2858:	f2c0 8086 	blt.w	2968 <setvbuf+0x144>
    285c:	4621      	mov	r1, r4
    285e:	4630      	mov	r0, r6
    2860:	f000 f9d6 	bl	2c10 <_fflush_r>
    2864:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2866:	b141      	cbz	r1, 287a <setvbuf+0x56>
    2868:	f104 0344 	add.w	r3, r4, #68	; 0x44
    286c:	4299      	cmp	r1, r3
    286e:	d002      	beq.n	2876 <setvbuf+0x52>
    2870:	4630      	mov	r0, r6
    2872:	f000 fb2d 	bl	2ed0 <_free_r>
    2876:	2300      	movs	r3, #0
    2878:	6363      	str	r3, [r4, #52]	; 0x34
    287a:	2300      	movs	r3, #0
    287c:	61a3      	str	r3, [r4, #24]
    287e:	6063      	str	r3, [r4, #4]
    2880:	89a3      	ldrh	r3, [r4, #12]
    2882:	061b      	lsls	r3, r3, #24
    2884:	d503      	bpl.n	288e <setvbuf+0x6a>
    2886:	6921      	ldr	r1, [r4, #16]
    2888:	4630      	mov	r0, r6
    288a:	f000 fb21 	bl	2ed0 <_free_r>
    288e:	89a3      	ldrh	r3, [r4, #12]
    2890:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    2894:	f023 0303 	bic.w	r3, r3, #3
    2898:	f1b8 0f02 	cmp.w	r8, #2
    289c:	81a3      	strh	r3, [r4, #12]
    289e:	d05d      	beq.n	295c <setvbuf+0x138>
    28a0:	ab01      	add	r3, sp, #4
    28a2:	466a      	mov	r2, sp
    28a4:	4621      	mov	r1, r4
    28a6:	4630      	mov	r0, r6
    28a8:	f000 faa6 	bl	2df8 <__swhatbuf_r>
    28ac:	89a3      	ldrh	r3, [r4, #12]
    28ae:	4318      	orrs	r0, r3
    28b0:	81a0      	strh	r0, [r4, #12]
    28b2:	bb2d      	cbnz	r5, 2900 <setvbuf+0xdc>
    28b4:	9d00      	ldr	r5, [sp, #0]
    28b6:	4628      	mov	r0, r5
    28b8:	f000 fb02 	bl	2ec0 <malloc>
    28bc:	4607      	mov	r7, r0
    28be:	2800      	cmp	r0, #0
    28c0:	d14e      	bne.n	2960 <setvbuf+0x13c>
    28c2:	f8dd 9000 	ldr.w	r9, [sp]
    28c6:	45a9      	cmp	r9, r5
    28c8:	d13c      	bne.n	2944 <setvbuf+0x120>
    28ca:	f04f 30ff 	mov.w	r0, #4294967295
    28ce:	89a3      	ldrh	r3, [r4, #12]
    28d0:	f043 0302 	orr.w	r3, r3, #2
    28d4:	81a3      	strh	r3, [r4, #12]
    28d6:	2300      	movs	r3, #0
    28d8:	60a3      	str	r3, [r4, #8]
    28da:	f104 0347 	add.w	r3, r4, #71	; 0x47
    28de:	6023      	str	r3, [r4, #0]
    28e0:	6123      	str	r3, [r4, #16]
    28e2:	2301      	movs	r3, #1
    28e4:	6163      	str	r3, [r4, #20]
    28e6:	b003      	add	sp, #12
    28e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    28ec:	4b22      	ldr	r3, [pc, #136]	; (2978 <setvbuf+0x154>)
    28ee:	429c      	cmp	r4, r3
    28f0:	d101      	bne.n	28f6 <setvbuf+0xd2>
    28f2:	68b4      	ldr	r4, [r6, #8]
    28f4:	e7a8      	b.n	2848 <setvbuf+0x24>
    28f6:	4b21      	ldr	r3, [pc, #132]	; (297c <setvbuf+0x158>)
    28f8:	429c      	cmp	r4, r3
    28fa:	bf08      	it	eq
    28fc:	68f4      	ldreq	r4, [r6, #12]
    28fe:	e7a3      	b.n	2848 <setvbuf+0x24>
    2900:	2f00      	cmp	r7, #0
    2902:	d0d8      	beq.n	28b6 <setvbuf+0x92>
    2904:	69b3      	ldr	r3, [r6, #24]
    2906:	b913      	cbnz	r3, 290e <setvbuf+0xea>
    2908:	4630      	mov	r0, r6
    290a:	f000 f9eb 	bl	2ce4 <__sinit>
    290e:	f1b8 0f01 	cmp.w	r8, #1
    2912:	bf08      	it	eq
    2914:	89a3      	ldrheq	r3, [r4, #12]
    2916:	6027      	str	r7, [r4, #0]
    2918:	bf04      	itt	eq
    291a:	f043 0301 	orreq.w	r3, r3, #1
    291e:	81a3      	strheq	r3, [r4, #12]
    2920:	89a3      	ldrh	r3, [r4, #12]
    2922:	6127      	str	r7, [r4, #16]
    2924:	f013 0008 	ands.w	r0, r3, #8
    2928:	6165      	str	r5, [r4, #20]
    292a:	d01b      	beq.n	2964 <setvbuf+0x140>
    292c:	f013 0001 	ands.w	r0, r3, #1
    2930:	bf18      	it	ne
    2932:	426d      	negne	r5, r5
    2934:	f04f 0300 	mov.w	r3, #0
    2938:	bf1d      	ittte	ne
    293a:	60a3      	strne	r3, [r4, #8]
    293c:	61a5      	strne	r5, [r4, #24]
    293e:	4618      	movne	r0, r3
    2940:	60a5      	streq	r5, [r4, #8]
    2942:	e7d0      	b.n	28e6 <setvbuf+0xc2>
    2944:	4648      	mov	r0, r9
    2946:	f000 fabb 	bl	2ec0 <malloc>
    294a:	4607      	mov	r7, r0
    294c:	2800      	cmp	r0, #0
    294e:	d0bc      	beq.n	28ca <setvbuf+0xa6>
    2950:	89a3      	ldrh	r3, [r4, #12]
    2952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2956:	81a3      	strh	r3, [r4, #12]
    2958:	464d      	mov	r5, r9
    295a:	e7d3      	b.n	2904 <setvbuf+0xe0>
    295c:	2000      	movs	r0, #0
    295e:	e7b6      	b.n	28ce <setvbuf+0xaa>
    2960:	46a9      	mov	r9, r5
    2962:	e7f5      	b.n	2950 <setvbuf+0x12c>
    2964:	60a0      	str	r0, [r4, #8]
    2966:	e7be      	b.n	28e6 <setvbuf+0xc2>
    2968:	f04f 30ff 	mov.w	r0, #4294967295
    296c:	e7bb      	b.n	28e6 <setvbuf+0xc2>
    296e:	bf00      	nop
    2970:	20000004 	.word	0x20000004
    2974:	00003bac 	.word	0x00003bac
    2978:	00003bcc 	.word	0x00003bcc
    297c:	00003b8c 	.word	0x00003b8c

00002980 <__swbuf_r>:
    2980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2982:	460e      	mov	r6, r1
    2984:	4614      	mov	r4, r2
    2986:	4605      	mov	r5, r0
    2988:	b118      	cbz	r0, 2992 <__swbuf_r+0x12>
    298a:	6983      	ldr	r3, [r0, #24]
    298c:	b90b      	cbnz	r3, 2992 <__swbuf_r+0x12>
    298e:	f000 f9a9 	bl	2ce4 <__sinit>
    2992:	4b21      	ldr	r3, [pc, #132]	; (2a18 <__swbuf_r+0x98>)
    2994:	429c      	cmp	r4, r3
    2996:	d12a      	bne.n	29ee <__swbuf_r+0x6e>
    2998:	686c      	ldr	r4, [r5, #4]
    299a:	69a3      	ldr	r3, [r4, #24]
    299c:	60a3      	str	r3, [r4, #8]
    299e:	89a3      	ldrh	r3, [r4, #12]
    29a0:	071a      	lsls	r2, r3, #28
    29a2:	d52e      	bpl.n	2a02 <__swbuf_r+0x82>
    29a4:	6923      	ldr	r3, [r4, #16]
    29a6:	b363      	cbz	r3, 2a02 <__swbuf_r+0x82>
    29a8:	6923      	ldr	r3, [r4, #16]
    29aa:	6820      	ldr	r0, [r4, #0]
    29ac:	1ac0      	subs	r0, r0, r3
    29ae:	6963      	ldr	r3, [r4, #20]
    29b0:	b2f6      	uxtb	r6, r6
    29b2:	4298      	cmp	r0, r3
    29b4:	4637      	mov	r7, r6
    29b6:	db04      	blt.n	29c2 <__swbuf_r+0x42>
    29b8:	4621      	mov	r1, r4
    29ba:	4628      	mov	r0, r5
    29bc:	f000 f928 	bl	2c10 <_fflush_r>
    29c0:	bb28      	cbnz	r0, 2a0e <__swbuf_r+0x8e>
    29c2:	68a3      	ldr	r3, [r4, #8]
    29c4:	3b01      	subs	r3, #1
    29c6:	60a3      	str	r3, [r4, #8]
    29c8:	6823      	ldr	r3, [r4, #0]
    29ca:	1c5a      	adds	r2, r3, #1
    29cc:	6022      	str	r2, [r4, #0]
    29ce:	701e      	strb	r6, [r3, #0]
    29d0:	6963      	ldr	r3, [r4, #20]
    29d2:	3001      	adds	r0, #1
    29d4:	4298      	cmp	r0, r3
    29d6:	d004      	beq.n	29e2 <__swbuf_r+0x62>
    29d8:	89a3      	ldrh	r3, [r4, #12]
    29da:	07db      	lsls	r3, r3, #31
    29dc:	d519      	bpl.n	2a12 <__swbuf_r+0x92>
    29de:	2e0a      	cmp	r6, #10
    29e0:	d117      	bne.n	2a12 <__swbuf_r+0x92>
    29e2:	4621      	mov	r1, r4
    29e4:	4628      	mov	r0, r5
    29e6:	f000 f913 	bl	2c10 <_fflush_r>
    29ea:	b190      	cbz	r0, 2a12 <__swbuf_r+0x92>
    29ec:	e00f      	b.n	2a0e <__swbuf_r+0x8e>
    29ee:	4b0b      	ldr	r3, [pc, #44]	; (2a1c <__swbuf_r+0x9c>)
    29f0:	429c      	cmp	r4, r3
    29f2:	d101      	bne.n	29f8 <__swbuf_r+0x78>
    29f4:	68ac      	ldr	r4, [r5, #8]
    29f6:	e7d0      	b.n	299a <__swbuf_r+0x1a>
    29f8:	4b09      	ldr	r3, [pc, #36]	; (2a20 <__swbuf_r+0xa0>)
    29fa:	429c      	cmp	r4, r3
    29fc:	bf08      	it	eq
    29fe:	68ec      	ldreq	r4, [r5, #12]
    2a00:	e7cb      	b.n	299a <__swbuf_r+0x1a>
    2a02:	4621      	mov	r1, r4
    2a04:	4628      	mov	r0, r5
    2a06:	f000 f80d 	bl	2a24 <__swsetup_r>
    2a0a:	2800      	cmp	r0, #0
    2a0c:	d0cc      	beq.n	29a8 <__swbuf_r+0x28>
    2a0e:	f04f 37ff 	mov.w	r7, #4294967295
    2a12:	4638      	mov	r0, r7
    2a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a16:	bf00      	nop
    2a18:	00003bac 	.word	0x00003bac
    2a1c:	00003bcc 	.word	0x00003bcc
    2a20:	00003b8c 	.word	0x00003b8c

00002a24 <__swsetup_r>:
    2a24:	4b32      	ldr	r3, [pc, #200]	; (2af0 <__swsetup_r+0xcc>)
    2a26:	b570      	push	{r4, r5, r6, lr}
    2a28:	681d      	ldr	r5, [r3, #0]
    2a2a:	4606      	mov	r6, r0
    2a2c:	460c      	mov	r4, r1
    2a2e:	b125      	cbz	r5, 2a3a <__swsetup_r+0x16>
    2a30:	69ab      	ldr	r3, [r5, #24]
    2a32:	b913      	cbnz	r3, 2a3a <__swsetup_r+0x16>
    2a34:	4628      	mov	r0, r5
    2a36:	f000 f955 	bl	2ce4 <__sinit>
    2a3a:	4b2e      	ldr	r3, [pc, #184]	; (2af4 <__swsetup_r+0xd0>)
    2a3c:	429c      	cmp	r4, r3
    2a3e:	d10f      	bne.n	2a60 <__swsetup_r+0x3c>
    2a40:	686c      	ldr	r4, [r5, #4]
    2a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2a46:	b29a      	uxth	r2, r3
    2a48:	0715      	lsls	r5, r2, #28
    2a4a:	d42c      	bmi.n	2aa6 <__swsetup_r+0x82>
    2a4c:	06d0      	lsls	r0, r2, #27
    2a4e:	d411      	bmi.n	2a74 <__swsetup_r+0x50>
    2a50:	2209      	movs	r2, #9
    2a52:	6032      	str	r2, [r6, #0]
    2a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a58:	81a3      	strh	r3, [r4, #12]
    2a5a:	f04f 30ff 	mov.w	r0, #4294967295
    2a5e:	bd70      	pop	{r4, r5, r6, pc}
    2a60:	4b25      	ldr	r3, [pc, #148]	; (2af8 <__swsetup_r+0xd4>)
    2a62:	429c      	cmp	r4, r3
    2a64:	d101      	bne.n	2a6a <__swsetup_r+0x46>
    2a66:	68ac      	ldr	r4, [r5, #8]
    2a68:	e7eb      	b.n	2a42 <__swsetup_r+0x1e>
    2a6a:	4b24      	ldr	r3, [pc, #144]	; (2afc <__swsetup_r+0xd8>)
    2a6c:	429c      	cmp	r4, r3
    2a6e:	bf08      	it	eq
    2a70:	68ec      	ldreq	r4, [r5, #12]
    2a72:	e7e6      	b.n	2a42 <__swsetup_r+0x1e>
    2a74:	0751      	lsls	r1, r2, #29
    2a76:	d512      	bpl.n	2a9e <__swsetup_r+0x7a>
    2a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2a7a:	b141      	cbz	r1, 2a8e <__swsetup_r+0x6a>
    2a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2a80:	4299      	cmp	r1, r3
    2a82:	d002      	beq.n	2a8a <__swsetup_r+0x66>
    2a84:	4630      	mov	r0, r6
    2a86:	f000 fa23 	bl	2ed0 <_free_r>
    2a8a:	2300      	movs	r3, #0
    2a8c:	6363      	str	r3, [r4, #52]	; 0x34
    2a8e:	89a3      	ldrh	r3, [r4, #12]
    2a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    2a94:	81a3      	strh	r3, [r4, #12]
    2a96:	2300      	movs	r3, #0
    2a98:	6063      	str	r3, [r4, #4]
    2a9a:	6923      	ldr	r3, [r4, #16]
    2a9c:	6023      	str	r3, [r4, #0]
    2a9e:	89a3      	ldrh	r3, [r4, #12]
    2aa0:	f043 0308 	orr.w	r3, r3, #8
    2aa4:	81a3      	strh	r3, [r4, #12]
    2aa6:	6923      	ldr	r3, [r4, #16]
    2aa8:	b94b      	cbnz	r3, 2abe <__swsetup_r+0x9a>
    2aaa:	89a3      	ldrh	r3, [r4, #12]
    2aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
    2ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2ab4:	d003      	beq.n	2abe <__swsetup_r+0x9a>
    2ab6:	4621      	mov	r1, r4
    2ab8:	4630      	mov	r0, r6
    2aba:	f000 f9c1 	bl	2e40 <__smakebuf_r>
    2abe:	89a2      	ldrh	r2, [r4, #12]
    2ac0:	f012 0301 	ands.w	r3, r2, #1
    2ac4:	d00c      	beq.n	2ae0 <__swsetup_r+0xbc>
    2ac6:	2300      	movs	r3, #0
    2ac8:	60a3      	str	r3, [r4, #8]
    2aca:	6963      	ldr	r3, [r4, #20]
    2acc:	425b      	negs	r3, r3
    2ace:	61a3      	str	r3, [r4, #24]
    2ad0:	6923      	ldr	r3, [r4, #16]
    2ad2:	b953      	cbnz	r3, 2aea <__swsetup_r+0xc6>
    2ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2ad8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    2adc:	d1ba      	bne.n	2a54 <__swsetup_r+0x30>
    2ade:	bd70      	pop	{r4, r5, r6, pc}
    2ae0:	0792      	lsls	r2, r2, #30
    2ae2:	bf58      	it	pl
    2ae4:	6963      	ldrpl	r3, [r4, #20]
    2ae6:	60a3      	str	r3, [r4, #8]
    2ae8:	e7f2      	b.n	2ad0 <__swsetup_r+0xac>
    2aea:	2000      	movs	r0, #0
    2aec:	e7f7      	b.n	2ade <__swsetup_r+0xba>
    2aee:	bf00      	nop
    2af0:	20000004 	.word	0x20000004
    2af4:	00003bac 	.word	0x00003bac
    2af8:	00003bcc 	.word	0x00003bcc
    2afc:	00003b8c 	.word	0x00003b8c

00002b00 <__sflush_r>:
    2b00:	898a      	ldrh	r2, [r1, #12]
    2b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b06:	4605      	mov	r5, r0
    2b08:	0710      	lsls	r0, r2, #28
    2b0a:	460c      	mov	r4, r1
    2b0c:	d45a      	bmi.n	2bc4 <__sflush_r+0xc4>
    2b0e:	684b      	ldr	r3, [r1, #4]
    2b10:	2b00      	cmp	r3, #0
    2b12:	dc05      	bgt.n	2b20 <__sflush_r+0x20>
    2b14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2b16:	2b00      	cmp	r3, #0
    2b18:	dc02      	bgt.n	2b20 <__sflush_r+0x20>
    2b1a:	2000      	movs	r0, #0
    2b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    2b22:	2e00      	cmp	r6, #0
    2b24:	d0f9      	beq.n	2b1a <__sflush_r+0x1a>
    2b26:	2300      	movs	r3, #0
    2b28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    2b2c:	682f      	ldr	r7, [r5, #0]
    2b2e:	602b      	str	r3, [r5, #0]
    2b30:	d033      	beq.n	2b9a <__sflush_r+0x9a>
    2b32:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2b34:	89a3      	ldrh	r3, [r4, #12]
    2b36:	075a      	lsls	r2, r3, #29
    2b38:	d505      	bpl.n	2b46 <__sflush_r+0x46>
    2b3a:	6863      	ldr	r3, [r4, #4]
    2b3c:	1ac0      	subs	r0, r0, r3
    2b3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2b40:	b10b      	cbz	r3, 2b46 <__sflush_r+0x46>
    2b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2b44:	1ac0      	subs	r0, r0, r3
    2b46:	2300      	movs	r3, #0
    2b48:	4602      	mov	r2, r0
    2b4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    2b4c:	6a21      	ldr	r1, [r4, #32]
    2b4e:	4628      	mov	r0, r5
    2b50:	47b0      	blx	r6
    2b52:	1c43      	adds	r3, r0, #1
    2b54:	89a3      	ldrh	r3, [r4, #12]
    2b56:	d106      	bne.n	2b66 <__sflush_r+0x66>
    2b58:	6829      	ldr	r1, [r5, #0]
    2b5a:	291d      	cmp	r1, #29
    2b5c:	d84b      	bhi.n	2bf6 <__sflush_r+0xf6>
    2b5e:	4a2b      	ldr	r2, [pc, #172]	; (2c0c <__sflush_r+0x10c>)
    2b60:	40ca      	lsrs	r2, r1
    2b62:	07d6      	lsls	r6, r2, #31
    2b64:	d547      	bpl.n	2bf6 <__sflush_r+0xf6>
    2b66:	2200      	movs	r2, #0
    2b68:	6062      	str	r2, [r4, #4]
    2b6a:	04d9      	lsls	r1, r3, #19
    2b6c:	6922      	ldr	r2, [r4, #16]
    2b6e:	6022      	str	r2, [r4, #0]
    2b70:	d504      	bpl.n	2b7c <__sflush_r+0x7c>
    2b72:	1c42      	adds	r2, r0, #1
    2b74:	d101      	bne.n	2b7a <__sflush_r+0x7a>
    2b76:	682b      	ldr	r3, [r5, #0]
    2b78:	b903      	cbnz	r3, 2b7c <__sflush_r+0x7c>
    2b7a:	6560      	str	r0, [r4, #84]	; 0x54
    2b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2b7e:	602f      	str	r7, [r5, #0]
    2b80:	2900      	cmp	r1, #0
    2b82:	d0ca      	beq.n	2b1a <__sflush_r+0x1a>
    2b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2b88:	4299      	cmp	r1, r3
    2b8a:	d002      	beq.n	2b92 <__sflush_r+0x92>
    2b8c:	4628      	mov	r0, r5
    2b8e:	f000 f99f 	bl	2ed0 <_free_r>
    2b92:	2000      	movs	r0, #0
    2b94:	6360      	str	r0, [r4, #52]	; 0x34
    2b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b9a:	6a21      	ldr	r1, [r4, #32]
    2b9c:	2301      	movs	r3, #1
    2b9e:	4628      	mov	r0, r5
    2ba0:	47b0      	blx	r6
    2ba2:	1c41      	adds	r1, r0, #1
    2ba4:	d1c6      	bne.n	2b34 <__sflush_r+0x34>
    2ba6:	682b      	ldr	r3, [r5, #0]
    2ba8:	2b00      	cmp	r3, #0
    2baa:	d0c3      	beq.n	2b34 <__sflush_r+0x34>
    2bac:	2b1d      	cmp	r3, #29
    2bae:	d001      	beq.n	2bb4 <__sflush_r+0xb4>
    2bb0:	2b16      	cmp	r3, #22
    2bb2:	d101      	bne.n	2bb8 <__sflush_r+0xb8>
    2bb4:	602f      	str	r7, [r5, #0]
    2bb6:	e7b0      	b.n	2b1a <__sflush_r+0x1a>
    2bb8:	89a3      	ldrh	r3, [r4, #12]
    2bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2bbe:	81a3      	strh	r3, [r4, #12]
    2bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bc4:	690f      	ldr	r7, [r1, #16]
    2bc6:	2f00      	cmp	r7, #0
    2bc8:	d0a7      	beq.n	2b1a <__sflush_r+0x1a>
    2bca:	0793      	lsls	r3, r2, #30
    2bcc:	680e      	ldr	r6, [r1, #0]
    2bce:	bf08      	it	eq
    2bd0:	694b      	ldreq	r3, [r1, #20]
    2bd2:	600f      	str	r7, [r1, #0]
    2bd4:	bf18      	it	ne
    2bd6:	2300      	movne	r3, #0
    2bd8:	eba6 0807 	sub.w	r8, r6, r7
    2bdc:	608b      	str	r3, [r1, #8]
    2bde:	f1b8 0f00 	cmp.w	r8, #0
    2be2:	dd9a      	ble.n	2b1a <__sflush_r+0x1a>
    2be4:	4643      	mov	r3, r8
    2be6:	463a      	mov	r2, r7
    2be8:	6a21      	ldr	r1, [r4, #32]
    2bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2bec:	4628      	mov	r0, r5
    2bee:	47b0      	blx	r6
    2bf0:	2800      	cmp	r0, #0
    2bf2:	dc07      	bgt.n	2c04 <__sflush_r+0x104>
    2bf4:	89a3      	ldrh	r3, [r4, #12]
    2bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2bfa:	81a3      	strh	r3, [r4, #12]
    2bfc:	f04f 30ff 	mov.w	r0, #4294967295
    2c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c04:	4407      	add	r7, r0
    2c06:	eba8 0800 	sub.w	r8, r8, r0
    2c0a:	e7e8      	b.n	2bde <__sflush_r+0xde>
    2c0c:	20400001 	.word	0x20400001

00002c10 <_fflush_r>:
    2c10:	b538      	push	{r3, r4, r5, lr}
    2c12:	690b      	ldr	r3, [r1, #16]
    2c14:	4605      	mov	r5, r0
    2c16:	460c      	mov	r4, r1
    2c18:	b1db      	cbz	r3, 2c52 <_fflush_r+0x42>
    2c1a:	b118      	cbz	r0, 2c24 <_fflush_r+0x14>
    2c1c:	6983      	ldr	r3, [r0, #24]
    2c1e:	b90b      	cbnz	r3, 2c24 <_fflush_r+0x14>
    2c20:	f000 f860 	bl	2ce4 <__sinit>
    2c24:	4b0c      	ldr	r3, [pc, #48]	; (2c58 <_fflush_r+0x48>)
    2c26:	429c      	cmp	r4, r3
    2c28:	d109      	bne.n	2c3e <_fflush_r+0x2e>
    2c2a:	686c      	ldr	r4, [r5, #4]
    2c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2c30:	b17b      	cbz	r3, 2c52 <_fflush_r+0x42>
    2c32:	4621      	mov	r1, r4
    2c34:	4628      	mov	r0, r5
    2c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2c3a:	f7ff bf61 	b.w	2b00 <__sflush_r>
    2c3e:	4b07      	ldr	r3, [pc, #28]	; (2c5c <_fflush_r+0x4c>)
    2c40:	429c      	cmp	r4, r3
    2c42:	d101      	bne.n	2c48 <_fflush_r+0x38>
    2c44:	68ac      	ldr	r4, [r5, #8]
    2c46:	e7f1      	b.n	2c2c <_fflush_r+0x1c>
    2c48:	4b05      	ldr	r3, [pc, #20]	; (2c60 <_fflush_r+0x50>)
    2c4a:	429c      	cmp	r4, r3
    2c4c:	bf08      	it	eq
    2c4e:	68ec      	ldreq	r4, [r5, #12]
    2c50:	e7ec      	b.n	2c2c <_fflush_r+0x1c>
    2c52:	2000      	movs	r0, #0
    2c54:	bd38      	pop	{r3, r4, r5, pc}
    2c56:	bf00      	nop
    2c58:	00003bac 	.word	0x00003bac
    2c5c:	00003bcc 	.word	0x00003bcc
    2c60:	00003b8c 	.word	0x00003b8c

00002c64 <_cleanup_r>:
    2c64:	4901      	ldr	r1, [pc, #4]	; (2c6c <_cleanup_r+0x8>)
    2c66:	f000 b8a9 	b.w	2dbc <_fwalk_reent>
    2c6a:	bf00      	nop
    2c6c:	00002c11 	.word	0x00002c11

00002c70 <std.isra.0>:
    2c70:	2300      	movs	r3, #0
    2c72:	b510      	push	{r4, lr}
    2c74:	4604      	mov	r4, r0
    2c76:	6003      	str	r3, [r0, #0]
    2c78:	6043      	str	r3, [r0, #4]
    2c7a:	6083      	str	r3, [r0, #8]
    2c7c:	8181      	strh	r1, [r0, #12]
    2c7e:	6643      	str	r3, [r0, #100]	; 0x64
    2c80:	81c2      	strh	r2, [r0, #14]
    2c82:	6103      	str	r3, [r0, #16]
    2c84:	6143      	str	r3, [r0, #20]
    2c86:	6183      	str	r3, [r0, #24]
    2c88:	4619      	mov	r1, r3
    2c8a:	2208      	movs	r2, #8
    2c8c:	305c      	adds	r0, #92	; 0x5c
    2c8e:	f7ff fda0 	bl	27d2 <memset>
    2c92:	4b05      	ldr	r3, [pc, #20]	; (2ca8 <std.isra.0+0x38>)
    2c94:	6263      	str	r3, [r4, #36]	; 0x24
    2c96:	4b05      	ldr	r3, [pc, #20]	; (2cac <std.isra.0+0x3c>)
    2c98:	62a3      	str	r3, [r4, #40]	; 0x28
    2c9a:	4b05      	ldr	r3, [pc, #20]	; (2cb0 <std.isra.0+0x40>)
    2c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
    2c9e:	4b05      	ldr	r3, [pc, #20]	; (2cb4 <std.isra.0+0x44>)
    2ca0:	6224      	str	r4, [r4, #32]
    2ca2:	6323      	str	r3, [r4, #48]	; 0x30
    2ca4:	bd10      	pop	{r4, pc}
    2ca6:	bf00      	nop
    2ca8:	000035f1 	.word	0x000035f1
    2cac:	00003613 	.word	0x00003613
    2cb0:	0000364b 	.word	0x0000364b
    2cb4:	0000366f 	.word	0x0000366f

00002cb8 <__sfmoreglue>:
    2cb8:	b570      	push	{r4, r5, r6, lr}
    2cba:	1e4a      	subs	r2, r1, #1
    2cbc:	2568      	movs	r5, #104	; 0x68
    2cbe:	4355      	muls	r5, r2
    2cc0:	460e      	mov	r6, r1
    2cc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
    2cc6:	f000 f951 	bl	2f6c <_malloc_r>
    2cca:	4604      	mov	r4, r0
    2ccc:	b140      	cbz	r0, 2ce0 <__sfmoreglue+0x28>
    2cce:	2100      	movs	r1, #0
    2cd0:	e880 0042 	stmia.w	r0, {r1, r6}
    2cd4:	300c      	adds	r0, #12
    2cd6:	60a0      	str	r0, [r4, #8]
    2cd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2cdc:	f7ff fd79 	bl	27d2 <memset>
    2ce0:	4620      	mov	r0, r4
    2ce2:	bd70      	pop	{r4, r5, r6, pc}

00002ce4 <__sinit>:
    2ce4:	6983      	ldr	r3, [r0, #24]
    2ce6:	b510      	push	{r4, lr}
    2ce8:	4604      	mov	r4, r0
    2cea:	bb33      	cbnz	r3, 2d3a <__sinit+0x56>
    2cec:	6483      	str	r3, [r0, #72]	; 0x48
    2cee:	64c3      	str	r3, [r0, #76]	; 0x4c
    2cf0:	6503      	str	r3, [r0, #80]	; 0x50
    2cf2:	4b12      	ldr	r3, [pc, #72]	; (2d3c <__sinit+0x58>)
    2cf4:	4a12      	ldr	r2, [pc, #72]	; (2d40 <__sinit+0x5c>)
    2cf6:	681b      	ldr	r3, [r3, #0]
    2cf8:	6282      	str	r2, [r0, #40]	; 0x28
    2cfa:	4298      	cmp	r0, r3
    2cfc:	bf04      	itt	eq
    2cfe:	2301      	moveq	r3, #1
    2d00:	6183      	streq	r3, [r0, #24]
    2d02:	f000 f81f 	bl	2d44 <__sfp>
    2d06:	6060      	str	r0, [r4, #4]
    2d08:	4620      	mov	r0, r4
    2d0a:	f000 f81b 	bl	2d44 <__sfp>
    2d0e:	60a0      	str	r0, [r4, #8]
    2d10:	4620      	mov	r0, r4
    2d12:	f000 f817 	bl	2d44 <__sfp>
    2d16:	2200      	movs	r2, #0
    2d18:	60e0      	str	r0, [r4, #12]
    2d1a:	2104      	movs	r1, #4
    2d1c:	6860      	ldr	r0, [r4, #4]
    2d1e:	f7ff ffa7 	bl	2c70 <std.isra.0>
    2d22:	2201      	movs	r2, #1
    2d24:	2109      	movs	r1, #9
    2d26:	68a0      	ldr	r0, [r4, #8]
    2d28:	f7ff ffa2 	bl	2c70 <std.isra.0>
    2d2c:	2202      	movs	r2, #2
    2d2e:	2112      	movs	r1, #18
    2d30:	68e0      	ldr	r0, [r4, #12]
    2d32:	f7ff ff9d 	bl	2c70 <std.isra.0>
    2d36:	2301      	movs	r3, #1
    2d38:	61a3      	str	r3, [r4, #24]
    2d3a:	bd10      	pop	{r4, pc}
    2d3c:	00003b88 	.word	0x00003b88
    2d40:	00002c65 	.word	0x00002c65

00002d44 <__sfp>:
    2d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d46:	4b1c      	ldr	r3, [pc, #112]	; (2db8 <__sfp+0x74>)
    2d48:	681e      	ldr	r6, [r3, #0]
    2d4a:	69b3      	ldr	r3, [r6, #24]
    2d4c:	4607      	mov	r7, r0
    2d4e:	b913      	cbnz	r3, 2d56 <__sfp+0x12>
    2d50:	4630      	mov	r0, r6
    2d52:	f7ff ffc7 	bl	2ce4 <__sinit>
    2d56:	3648      	adds	r6, #72	; 0x48
    2d58:	68b4      	ldr	r4, [r6, #8]
    2d5a:	6873      	ldr	r3, [r6, #4]
    2d5c:	3b01      	subs	r3, #1
    2d5e:	d503      	bpl.n	2d68 <__sfp+0x24>
    2d60:	6833      	ldr	r3, [r6, #0]
    2d62:	b133      	cbz	r3, 2d72 <__sfp+0x2e>
    2d64:	6836      	ldr	r6, [r6, #0]
    2d66:	e7f7      	b.n	2d58 <__sfp+0x14>
    2d68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    2d6c:	b16d      	cbz	r5, 2d8a <__sfp+0x46>
    2d6e:	3468      	adds	r4, #104	; 0x68
    2d70:	e7f4      	b.n	2d5c <__sfp+0x18>
    2d72:	2104      	movs	r1, #4
    2d74:	4638      	mov	r0, r7
    2d76:	f7ff ff9f 	bl	2cb8 <__sfmoreglue>
    2d7a:	6030      	str	r0, [r6, #0]
    2d7c:	2800      	cmp	r0, #0
    2d7e:	d1f1      	bne.n	2d64 <__sfp+0x20>
    2d80:	230c      	movs	r3, #12
    2d82:	603b      	str	r3, [r7, #0]
    2d84:	4604      	mov	r4, r0
    2d86:	4620      	mov	r0, r4
    2d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2d8e:	81e3      	strh	r3, [r4, #14]
    2d90:	2301      	movs	r3, #1
    2d92:	81a3      	strh	r3, [r4, #12]
    2d94:	6665      	str	r5, [r4, #100]	; 0x64
    2d96:	6025      	str	r5, [r4, #0]
    2d98:	60a5      	str	r5, [r4, #8]
    2d9a:	6065      	str	r5, [r4, #4]
    2d9c:	6125      	str	r5, [r4, #16]
    2d9e:	6165      	str	r5, [r4, #20]
    2da0:	61a5      	str	r5, [r4, #24]
    2da2:	2208      	movs	r2, #8
    2da4:	4629      	mov	r1, r5
    2da6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2daa:	f7ff fd12 	bl	27d2 <memset>
    2dae:	6365      	str	r5, [r4, #52]	; 0x34
    2db0:	63a5      	str	r5, [r4, #56]	; 0x38
    2db2:	64a5      	str	r5, [r4, #72]	; 0x48
    2db4:	64e5      	str	r5, [r4, #76]	; 0x4c
    2db6:	e7e6      	b.n	2d86 <__sfp+0x42>
    2db8:	00003b88 	.word	0x00003b88

00002dbc <_fwalk_reent>:
    2dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2dc0:	4680      	mov	r8, r0
    2dc2:	4689      	mov	r9, r1
    2dc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2dc8:	2600      	movs	r6, #0
    2dca:	b914      	cbnz	r4, 2dd2 <_fwalk_reent+0x16>
    2dcc:	4630      	mov	r0, r6
    2dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2dd2:	68a5      	ldr	r5, [r4, #8]
    2dd4:	6867      	ldr	r7, [r4, #4]
    2dd6:	3f01      	subs	r7, #1
    2dd8:	d501      	bpl.n	2dde <_fwalk_reent+0x22>
    2dda:	6824      	ldr	r4, [r4, #0]
    2ddc:	e7f5      	b.n	2dca <_fwalk_reent+0xe>
    2dde:	89ab      	ldrh	r3, [r5, #12]
    2de0:	2b01      	cmp	r3, #1
    2de2:	d907      	bls.n	2df4 <_fwalk_reent+0x38>
    2de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2de8:	3301      	adds	r3, #1
    2dea:	d003      	beq.n	2df4 <_fwalk_reent+0x38>
    2dec:	4629      	mov	r1, r5
    2dee:	4640      	mov	r0, r8
    2df0:	47c8      	blx	r9
    2df2:	4306      	orrs	r6, r0
    2df4:	3568      	adds	r5, #104	; 0x68
    2df6:	e7ee      	b.n	2dd6 <_fwalk_reent+0x1a>

00002df8 <__swhatbuf_r>:
    2df8:	b570      	push	{r4, r5, r6, lr}
    2dfa:	460e      	mov	r6, r1
    2dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2e00:	2900      	cmp	r1, #0
    2e02:	b090      	sub	sp, #64	; 0x40
    2e04:	4614      	mov	r4, r2
    2e06:	461d      	mov	r5, r3
    2e08:	da07      	bge.n	2e1a <__swhatbuf_r+0x22>
    2e0a:	2300      	movs	r3, #0
    2e0c:	602b      	str	r3, [r5, #0]
    2e0e:	89b3      	ldrh	r3, [r6, #12]
    2e10:	061a      	lsls	r2, r3, #24
    2e12:	d410      	bmi.n	2e36 <__swhatbuf_r+0x3e>
    2e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2e18:	e00e      	b.n	2e38 <__swhatbuf_r+0x40>
    2e1a:	aa01      	add	r2, sp, #4
    2e1c:	f000 fc4e 	bl	36bc <_fstat_r>
    2e20:	2800      	cmp	r0, #0
    2e22:	dbf2      	blt.n	2e0a <__swhatbuf_r+0x12>
    2e24:	9a02      	ldr	r2, [sp, #8]
    2e26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    2e2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    2e2e:	425a      	negs	r2, r3
    2e30:	415a      	adcs	r2, r3
    2e32:	602a      	str	r2, [r5, #0]
    2e34:	e7ee      	b.n	2e14 <__swhatbuf_r+0x1c>
    2e36:	2340      	movs	r3, #64	; 0x40
    2e38:	2000      	movs	r0, #0
    2e3a:	6023      	str	r3, [r4, #0]
    2e3c:	b010      	add	sp, #64	; 0x40
    2e3e:	bd70      	pop	{r4, r5, r6, pc}

00002e40 <__smakebuf_r>:
    2e40:	898b      	ldrh	r3, [r1, #12]
    2e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2e44:	079d      	lsls	r5, r3, #30
    2e46:	4606      	mov	r6, r0
    2e48:	460c      	mov	r4, r1
    2e4a:	d507      	bpl.n	2e5c <__smakebuf_r+0x1c>
    2e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
    2e50:	6023      	str	r3, [r4, #0]
    2e52:	6123      	str	r3, [r4, #16]
    2e54:	2301      	movs	r3, #1
    2e56:	6163      	str	r3, [r4, #20]
    2e58:	b002      	add	sp, #8
    2e5a:	bd70      	pop	{r4, r5, r6, pc}
    2e5c:	ab01      	add	r3, sp, #4
    2e5e:	466a      	mov	r2, sp
    2e60:	f7ff ffca 	bl	2df8 <__swhatbuf_r>
    2e64:	9900      	ldr	r1, [sp, #0]
    2e66:	4605      	mov	r5, r0
    2e68:	4630      	mov	r0, r6
    2e6a:	f000 f87f 	bl	2f6c <_malloc_r>
    2e6e:	b948      	cbnz	r0, 2e84 <__smakebuf_r+0x44>
    2e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2e74:	059a      	lsls	r2, r3, #22
    2e76:	d4ef      	bmi.n	2e58 <__smakebuf_r+0x18>
    2e78:	f023 0303 	bic.w	r3, r3, #3
    2e7c:	f043 0302 	orr.w	r3, r3, #2
    2e80:	81a3      	strh	r3, [r4, #12]
    2e82:	e7e3      	b.n	2e4c <__smakebuf_r+0xc>
    2e84:	4b0d      	ldr	r3, [pc, #52]	; (2ebc <__smakebuf_r+0x7c>)
    2e86:	62b3      	str	r3, [r6, #40]	; 0x28
    2e88:	89a3      	ldrh	r3, [r4, #12]
    2e8a:	6020      	str	r0, [r4, #0]
    2e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2e90:	81a3      	strh	r3, [r4, #12]
    2e92:	9b00      	ldr	r3, [sp, #0]
    2e94:	6163      	str	r3, [r4, #20]
    2e96:	9b01      	ldr	r3, [sp, #4]
    2e98:	6120      	str	r0, [r4, #16]
    2e9a:	b15b      	cbz	r3, 2eb4 <__smakebuf_r+0x74>
    2e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2ea0:	4630      	mov	r0, r6
    2ea2:	f000 fc1d 	bl	36e0 <_isatty_r>
    2ea6:	b128      	cbz	r0, 2eb4 <__smakebuf_r+0x74>
    2ea8:	89a3      	ldrh	r3, [r4, #12]
    2eaa:	f023 0303 	bic.w	r3, r3, #3
    2eae:	f043 0301 	orr.w	r3, r3, #1
    2eb2:	81a3      	strh	r3, [r4, #12]
    2eb4:	89a3      	ldrh	r3, [r4, #12]
    2eb6:	431d      	orrs	r5, r3
    2eb8:	81a5      	strh	r5, [r4, #12]
    2eba:	e7cd      	b.n	2e58 <__smakebuf_r+0x18>
    2ebc:	00002c65 	.word	0x00002c65

00002ec0 <malloc>:
    2ec0:	4b02      	ldr	r3, [pc, #8]	; (2ecc <malloc+0xc>)
    2ec2:	4601      	mov	r1, r0
    2ec4:	6818      	ldr	r0, [r3, #0]
    2ec6:	f000 b851 	b.w	2f6c <_malloc_r>
    2eca:	bf00      	nop
    2ecc:	20000004 	.word	0x20000004

00002ed0 <_free_r>:
    2ed0:	b538      	push	{r3, r4, r5, lr}
    2ed2:	4605      	mov	r5, r0
    2ed4:	2900      	cmp	r1, #0
    2ed6:	d045      	beq.n	2f64 <_free_r+0x94>
    2ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2edc:	1f0c      	subs	r4, r1, #4
    2ede:	2b00      	cmp	r3, #0
    2ee0:	bfb8      	it	lt
    2ee2:	18e4      	addlt	r4, r4, r3
    2ee4:	f000 fc74 	bl	37d0 <__malloc_lock>
    2ee8:	4a1f      	ldr	r2, [pc, #124]	; (2f68 <_free_r+0x98>)
    2eea:	6813      	ldr	r3, [r2, #0]
    2eec:	4610      	mov	r0, r2
    2eee:	b933      	cbnz	r3, 2efe <_free_r+0x2e>
    2ef0:	6063      	str	r3, [r4, #4]
    2ef2:	6014      	str	r4, [r2, #0]
    2ef4:	4628      	mov	r0, r5
    2ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2efa:	f000 bc6a 	b.w	37d2 <__malloc_unlock>
    2efe:	42a3      	cmp	r3, r4
    2f00:	d90c      	bls.n	2f1c <_free_r+0x4c>
    2f02:	6821      	ldr	r1, [r4, #0]
    2f04:	1862      	adds	r2, r4, r1
    2f06:	4293      	cmp	r3, r2
    2f08:	bf04      	itt	eq
    2f0a:	681a      	ldreq	r2, [r3, #0]
    2f0c:	685b      	ldreq	r3, [r3, #4]
    2f0e:	6063      	str	r3, [r4, #4]
    2f10:	bf04      	itt	eq
    2f12:	1852      	addeq	r2, r2, r1
    2f14:	6022      	streq	r2, [r4, #0]
    2f16:	6004      	str	r4, [r0, #0]
    2f18:	e7ec      	b.n	2ef4 <_free_r+0x24>
    2f1a:	4613      	mov	r3, r2
    2f1c:	685a      	ldr	r2, [r3, #4]
    2f1e:	b10a      	cbz	r2, 2f24 <_free_r+0x54>
    2f20:	42a2      	cmp	r2, r4
    2f22:	d9fa      	bls.n	2f1a <_free_r+0x4a>
    2f24:	6819      	ldr	r1, [r3, #0]
    2f26:	1858      	adds	r0, r3, r1
    2f28:	42a0      	cmp	r0, r4
    2f2a:	d10b      	bne.n	2f44 <_free_r+0x74>
    2f2c:	6820      	ldr	r0, [r4, #0]
    2f2e:	4401      	add	r1, r0
    2f30:	1858      	adds	r0, r3, r1
    2f32:	4282      	cmp	r2, r0
    2f34:	6019      	str	r1, [r3, #0]
    2f36:	d1dd      	bne.n	2ef4 <_free_r+0x24>
    2f38:	6810      	ldr	r0, [r2, #0]
    2f3a:	6852      	ldr	r2, [r2, #4]
    2f3c:	605a      	str	r2, [r3, #4]
    2f3e:	4401      	add	r1, r0
    2f40:	6019      	str	r1, [r3, #0]
    2f42:	e7d7      	b.n	2ef4 <_free_r+0x24>
    2f44:	d902      	bls.n	2f4c <_free_r+0x7c>
    2f46:	230c      	movs	r3, #12
    2f48:	602b      	str	r3, [r5, #0]
    2f4a:	e7d3      	b.n	2ef4 <_free_r+0x24>
    2f4c:	6820      	ldr	r0, [r4, #0]
    2f4e:	1821      	adds	r1, r4, r0
    2f50:	428a      	cmp	r2, r1
    2f52:	bf04      	itt	eq
    2f54:	6811      	ldreq	r1, [r2, #0]
    2f56:	6852      	ldreq	r2, [r2, #4]
    2f58:	6062      	str	r2, [r4, #4]
    2f5a:	bf04      	itt	eq
    2f5c:	1809      	addeq	r1, r1, r0
    2f5e:	6021      	streq	r1, [r4, #0]
    2f60:	605c      	str	r4, [r3, #4]
    2f62:	e7c7      	b.n	2ef4 <_free_r+0x24>
    2f64:	bd38      	pop	{r3, r4, r5, pc}
    2f66:	bf00      	nop
    2f68:	20000304 	.word	0x20000304

00002f6c <_malloc_r>:
    2f6c:	b570      	push	{r4, r5, r6, lr}
    2f6e:	1ccd      	adds	r5, r1, #3
    2f70:	f025 0503 	bic.w	r5, r5, #3
    2f74:	3508      	adds	r5, #8
    2f76:	2d0c      	cmp	r5, #12
    2f78:	bf38      	it	cc
    2f7a:	250c      	movcc	r5, #12
    2f7c:	2d00      	cmp	r5, #0
    2f7e:	4606      	mov	r6, r0
    2f80:	db01      	blt.n	2f86 <_malloc_r+0x1a>
    2f82:	42a9      	cmp	r1, r5
    2f84:	d903      	bls.n	2f8e <_malloc_r+0x22>
    2f86:	230c      	movs	r3, #12
    2f88:	6033      	str	r3, [r6, #0]
    2f8a:	2000      	movs	r0, #0
    2f8c:	bd70      	pop	{r4, r5, r6, pc}
    2f8e:	f000 fc1f 	bl	37d0 <__malloc_lock>
    2f92:	4a23      	ldr	r2, [pc, #140]	; (3020 <_malloc_r+0xb4>)
    2f94:	6814      	ldr	r4, [r2, #0]
    2f96:	4621      	mov	r1, r4
    2f98:	b991      	cbnz	r1, 2fc0 <_malloc_r+0x54>
    2f9a:	4c22      	ldr	r4, [pc, #136]	; (3024 <_malloc_r+0xb8>)
    2f9c:	6823      	ldr	r3, [r4, #0]
    2f9e:	b91b      	cbnz	r3, 2fa8 <_malloc_r+0x3c>
    2fa0:	4630      	mov	r0, r6
    2fa2:	f000 fb15 	bl	35d0 <_sbrk_r>
    2fa6:	6020      	str	r0, [r4, #0]
    2fa8:	4629      	mov	r1, r5
    2faa:	4630      	mov	r0, r6
    2fac:	f000 fb10 	bl	35d0 <_sbrk_r>
    2fb0:	1c43      	adds	r3, r0, #1
    2fb2:	d126      	bne.n	3002 <_malloc_r+0x96>
    2fb4:	230c      	movs	r3, #12
    2fb6:	6033      	str	r3, [r6, #0]
    2fb8:	4630      	mov	r0, r6
    2fba:	f000 fc0a 	bl	37d2 <__malloc_unlock>
    2fbe:	e7e4      	b.n	2f8a <_malloc_r+0x1e>
    2fc0:	680b      	ldr	r3, [r1, #0]
    2fc2:	1b5b      	subs	r3, r3, r5
    2fc4:	d41a      	bmi.n	2ffc <_malloc_r+0x90>
    2fc6:	2b0b      	cmp	r3, #11
    2fc8:	d90f      	bls.n	2fea <_malloc_r+0x7e>
    2fca:	600b      	str	r3, [r1, #0]
    2fcc:	50cd      	str	r5, [r1, r3]
    2fce:	18cc      	adds	r4, r1, r3
    2fd0:	4630      	mov	r0, r6
    2fd2:	f000 fbfe 	bl	37d2 <__malloc_unlock>
    2fd6:	f104 000b 	add.w	r0, r4, #11
    2fda:	1d23      	adds	r3, r4, #4
    2fdc:	f020 0007 	bic.w	r0, r0, #7
    2fe0:	1ac3      	subs	r3, r0, r3
    2fe2:	d01b      	beq.n	301c <_malloc_r+0xb0>
    2fe4:	425a      	negs	r2, r3
    2fe6:	50e2      	str	r2, [r4, r3]
    2fe8:	bd70      	pop	{r4, r5, r6, pc}
    2fea:	428c      	cmp	r4, r1
    2fec:	bf0d      	iteet	eq
    2fee:	6863      	ldreq	r3, [r4, #4]
    2ff0:	684b      	ldrne	r3, [r1, #4]
    2ff2:	6063      	strne	r3, [r4, #4]
    2ff4:	6013      	streq	r3, [r2, #0]
    2ff6:	bf18      	it	ne
    2ff8:	460c      	movne	r4, r1
    2ffa:	e7e9      	b.n	2fd0 <_malloc_r+0x64>
    2ffc:	460c      	mov	r4, r1
    2ffe:	6849      	ldr	r1, [r1, #4]
    3000:	e7ca      	b.n	2f98 <_malloc_r+0x2c>
    3002:	1cc4      	adds	r4, r0, #3
    3004:	f024 0403 	bic.w	r4, r4, #3
    3008:	42a0      	cmp	r0, r4
    300a:	d005      	beq.n	3018 <_malloc_r+0xac>
    300c:	1a21      	subs	r1, r4, r0
    300e:	4630      	mov	r0, r6
    3010:	f000 fade 	bl	35d0 <_sbrk_r>
    3014:	3001      	adds	r0, #1
    3016:	d0cd      	beq.n	2fb4 <_malloc_r+0x48>
    3018:	6025      	str	r5, [r4, #0]
    301a:	e7d9      	b.n	2fd0 <_malloc_r+0x64>
    301c:	bd70      	pop	{r4, r5, r6, pc}
    301e:	bf00      	nop
    3020:	20000304 	.word	0x20000304
    3024:	20000308 	.word	0x20000308

00003028 <__sfputc_r>:
    3028:	6893      	ldr	r3, [r2, #8]
    302a:	3b01      	subs	r3, #1
    302c:	2b00      	cmp	r3, #0
    302e:	b410      	push	{r4}
    3030:	6093      	str	r3, [r2, #8]
    3032:	da08      	bge.n	3046 <__sfputc_r+0x1e>
    3034:	6994      	ldr	r4, [r2, #24]
    3036:	42a3      	cmp	r3, r4
    3038:	db02      	blt.n	3040 <__sfputc_r+0x18>
    303a:	b2cb      	uxtb	r3, r1
    303c:	2b0a      	cmp	r3, #10
    303e:	d102      	bne.n	3046 <__sfputc_r+0x1e>
    3040:	bc10      	pop	{r4}
    3042:	f7ff bc9d 	b.w	2980 <__swbuf_r>
    3046:	6813      	ldr	r3, [r2, #0]
    3048:	1c58      	adds	r0, r3, #1
    304a:	6010      	str	r0, [r2, #0]
    304c:	7019      	strb	r1, [r3, #0]
    304e:	b2c8      	uxtb	r0, r1
    3050:	bc10      	pop	{r4}
    3052:	4770      	bx	lr

00003054 <__sfputs_r>:
    3054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3056:	4606      	mov	r6, r0
    3058:	460f      	mov	r7, r1
    305a:	4614      	mov	r4, r2
    305c:	18d5      	adds	r5, r2, r3
    305e:	42ac      	cmp	r4, r5
    3060:	d101      	bne.n	3066 <__sfputs_r+0x12>
    3062:	2000      	movs	r0, #0
    3064:	e007      	b.n	3076 <__sfputs_r+0x22>
    3066:	463a      	mov	r2, r7
    3068:	f814 1b01 	ldrb.w	r1, [r4], #1
    306c:	4630      	mov	r0, r6
    306e:	f7ff ffdb 	bl	3028 <__sfputc_r>
    3072:	1c43      	adds	r3, r0, #1
    3074:	d1f3      	bne.n	305e <__sfputs_r+0xa>
    3076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003078 <_vfiprintf_r>:
    3078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    307c:	b09d      	sub	sp, #116	; 0x74
    307e:	460c      	mov	r4, r1
    3080:	4617      	mov	r7, r2
    3082:	9303      	str	r3, [sp, #12]
    3084:	4606      	mov	r6, r0
    3086:	b118      	cbz	r0, 3090 <_vfiprintf_r+0x18>
    3088:	6983      	ldr	r3, [r0, #24]
    308a:	b90b      	cbnz	r3, 3090 <_vfiprintf_r+0x18>
    308c:	f7ff fe2a 	bl	2ce4 <__sinit>
    3090:	4b7c      	ldr	r3, [pc, #496]	; (3284 <_vfiprintf_r+0x20c>)
    3092:	429c      	cmp	r4, r3
    3094:	d157      	bne.n	3146 <_vfiprintf_r+0xce>
    3096:	6874      	ldr	r4, [r6, #4]
    3098:	89a3      	ldrh	r3, [r4, #12]
    309a:	0718      	lsls	r0, r3, #28
    309c:	d55d      	bpl.n	315a <_vfiprintf_r+0xe2>
    309e:	6923      	ldr	r3, [r4, #16]
    30a0:	2b00      	cmp	r3, #0
    30a2:	d05a      	beq.n	315a <_vfiprintf_r+0xe2>
    30a4:	2300      	movs	r3, #0
    30a6:	9309      	str	r3, [sp, #36]	; 0x24
    30a8:	2320      	movs	r3, #32
    30aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    30ae:	2330      	movs	r3, #48	; 0x30
    30b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    30b4:	f04f 0b01 	mov.w	fp, #1
    30b8:	46b8      	mov	r8, r7
    30ba:	4645      	mov	r5, r8
    30bc:	f815 3b01 	ldrb.w	r3, [r5], #1
    30c0:	2b00      	cmp	r3, #0
    30c2:	d155      	bne.n	3170 <_vfiprintf_r+0xf8>
    30c4:	ebb8 0a07 	subs.w	sl, r8, r7
    30c8:	d00b      	beq.n	30e2 <_vfiprintf_r+0x6a>
    30ca:	4653      	mov	r3, sl
    30cc:	463a      	mov	r2, r7
    30ce:	4621      	mov	r1, r4
    30d0:	4630      	mov	r0, r6
    30d2:	f7ff ffbf 	bl	3054 <__sfputs_r>
    30d6:	3001      	adds	r0, #1
    30d8:	f000 80c4 	beq.w	3264 <_vfiprintf_r+0x1ec>
    30dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    30de:	4453      	add	r3, sl
    30e0:	9309      	str	r3, [sp, #36]	; 0x24
    30e2:	f898 3000 	ldrb.w	r3, [r8]
    30e6:	2b00      	cmp	r3, #0
    30e8:	f000 80bc 	beq.w	3264 <_vfiprintf_r+0x1ec>
    30ec:	2300      	movs	r3, #0
    30ee:	f04f 32ff 	mov.w	r2, #4294967295
    30f2:	9304      	str	r3, [sp, #16]
    30f4:	9307      	str	r3, [sp, #28]
    30f6:	9205      	str	r2, [sp, #20]
    30f8:	9306      	str	r3, [sp, #24]
    30fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    30fe:	931a      	str	r3, [sp, #104]	; 0x68
    3100:	2205      	movs	r2, #5
    3102:	7829      	ldrb	r1, [r5, #0]
    3104:	4860      	ldr	r0, [pc, #384]	; (3288 <_vfiprintf_r+0x210>)
    3106:	f000 fb13 	bl	3730 <memchr>
    310a:	f105 0801 	add.w	r8, r5, #1
    310e:	9b04      	ldr	r3, [sp, #16]
    3110:	2800      	cmp	r0, #0
    3112:	d131      	bne.n	3178 <_vfiprintf_r+0x100>
    3114:	06d9      	lsls	r1, r3, #27
    3116:	bf44      	itt	mi
    3118:	2220      	movmi	r2, #32
    311a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    311e:	071a      	lsls	r2, r3, #28
    3120:	bf44      	itt	mi
    3122:	222b      	movmi	r2, #43	; 0x2b
    3124:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3128:	782a      	ldrb	r2, [r5, #0]
    312a:	2a2a      	cmp	r2, #42	; 0x2a
    312c:	d02c      	beq.n	3188 <_vfiprintf_r+0x110>
    312e:	9a07      	ldr	r2, [sp, #28]
    3130:	2100      	movs	r1, #0
    3132:	200a      	movs	r0, #10
    3134:	46a8      	mov	r8, r5
    3136:	3501      	adds	r5, #1
    3138:	f898 3000 	ldrb.w	r3, [r8]
    313c:	3b30      	subs	r3, #48	; 0x30
    313e:	2b09      	cmp	r3, #9
    3140:	d96d      	bls.n	321e <_vfiprintf_r+0x1a6>
    3142:	b371      	cbz	r1, 31a2 <_vfiprintf_r+0x12a>
    3144:	e026      	b.n	3194 <_vfiprintf_r+0x11c>
    3146:	4b51      	ldr	r3, [pc, #324]	; (328c <_vfiprintf_r+0x214>)
    3148:	429c      	cmp	r4, r3
    314a:	d101      	bne.n	3150 <_vfiprintf_r+0xd8>
    314c:	68b4      	ldr	r4, [r6, #8]
    314e:	e7a3      	b.n	3098 <_vfiprintf_r+0x20>
    3150:	4b4f      	ldr	r3, [pc, #316]	; (3290 <_vfiprintf_r+0x218>)
    3152:	429c      	cmp	r4, r3
    3154:	bf08      	it	eq
    3156:	68f4      	ldreq	r4, [r6, #12]
    3158:	e79e      	b.n	3098 <_vfiprintf_r+0x20>
    315a:	4621      	mov	r1, r4
    315c:	4630      	mov	r0, r6
    315e:	f7ff fc61 	bl	2a24 <__swsetup_r>
    3162:	2800      	cmp	r0, #0
    3164:	d09e      	beq.n	30a4 <_vfiprintf_r+0x2c>
    3166:	f04f 30ff 	mov.w	r0, #4294967295
    316a:	b01d      	add	sp, #116	; 0x74
    316c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3170:	2b25      	cmp	r3, #37	; 0x25
    3172:	d0a7      	beq.n	30c4 <_vfiprintf_r+0x4c>
    3174:	46a8      	mov	r8, r5
    3176:	e7a0      	b.n	30ba <_vfiprintf_r+0x42>
    3178:	4a43      	ldr	r2, [pc, #268]	; (3288 <_vfiprintf_r+0x210>)
    317a:	1a80      	subs	r0, r0, r2
    317c:	fa0b f000 	lsl.w	r0, fp, r0
    3180:	4318      	orrs	r0, r3
    3182:	9004      	str	r0, [sp, #16]
    3184:	4645      	mov	r5, r8
    3186:	e7bb      	b.n	3100 <_vfiprintf_r+0x88>
    3188:	9a03      	ldr	r2, [sp, #12]
    318a:	1d11      	adds	r1, r2, #4
    318c:	6812      	ldr	r2, [r2, #0]
    318e:	9103      	str	r1, [sp, #12]
    3190:	2a00      	cmp	r2, #0
    3192:	db01      	blt.n	3198 <_vfiprintf_r+0x120>
    3194:	9207      	str	r2, [sp, #28]
    3196:	e004      	b.n	31a2 <_vfiprintf_r+0x12a>
    3198:	4252      	negs	r2, r2
    319a:	f043 0302 	orr.w	r3, r3, #2
    319e:	9207      	str	r2, [sp, #28]
    31a0:	9304      	str	r3, [sp, #16]
    31a2:	f898 3000 	ldrb.w	r3, [r8]
    31a6:	2b2e      	cmp	r3, #46	; 0x2e
    31a8:	d110      	bne.n	31cc <_vfiprintf_r+0x154>
    31aa:	f898 3001 	ldrb.w	r3, [r8, #1]
    31ae:	2b2a      	cmp	r3, #42	; 0x2a
    31b0:	f108 0101 	add.w	r1, r8, #1
    31b4:	d137      	bne.n	3226 <_vfiprintf_r+0x1ae>
    31b6:	9b03      	ldr	r3, [sp, #12]
    31b8:	1d1a      	adds	r2, r3, #4
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	9203      	str	r2, [sp, #12]
    31be:	2b00      	cmp	r3, #0
    31c0:	bfb8      	it	lt
    31c2:	f04f 33ff 	movlt.w	r3, #4294967295
    31c6:	f108 0802 	add.w	r8, r8, #2
    31ca:	9305      	str	r3, [sp, #20]
    31cc:	4d31      	ldr	r5, [pc, #196]	; (3294 <_vfiprintf_r+0x21c>)
    31ce:	f898 1000 	ldrb.w	r1, [r8]
    31d2:	2203      	movs	r2, #3
    31d4:	4628      	mov	r0, r5
    31d6:	f000 faab 	bl	3730 <memchr>
    31da:	b140      	cbz	r0, 31ee <_vfiprintf_r+0x176>
    31dc:	2340      	movs	r3, #64	; 0x40
    31de:	1b40      	subs	r0, r0, r5
    31e0:	fa03 f000 	lsl.w	r0, r3, r0
    31e4:	9b04      	ldr	r3, [sp, #16]
    31e6:	4303      	orrs	r3, r0
    31e8:	9304      	str	r3, [sp, #16]
    31ea:	f108 0801 	add.w	r8, r8, #1
    31ee:	f898 1000 	ldrb.w	r1, [r8]
    31f2:	4829      	ldr	r0, [pc, #164]	; (3298 <_vfiprintf_r+0x220>)
    31f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    31f8:	2206      	movs	r2, #6
    31fa:	f108 0701 	add.w	r7, r8, #1
    31fe:	f000 fa97 	bl	3730 <memchr>
    3202:	2800      	cmp	r0, #0
    3204:	d034      	beq.n	3270 <_vfiprintf_r+0x1f8>
    3206:	4b25      	ldr	r3, [pc, #148]	; (329c <_vfiprintf_r+0x224>)
    3208:	bb03      	cbnz	r3, 324c <_vfiprintf_r+0x1d4>
    320a:	9b03      	ldr	r3, [sp, #12]
    320c:	3307      	adds	r3, #7
    320e:	f023 0307 	bic.w	r3, r3, #7
    3212:	3308      	adds	r3, #8
    3214:	9303      	str	r3, [sp, #12]
    3216:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3218:	444b      	add	r3, r9
    321a:	9309      	str	r3, [sp, #36]	; 0x24
    321c:	e74c      	b.n	30b8 <_vfiprintf_r+0x40>
    321e:	fb00 3202 	mla	r2, r0, r2, r3
    3222:	2101      	movs	r1, #1
    3224:	e786      	b.n	3134 <_vfiprintf_r+0xbc>
    3226:	2300      	movs	r3, #0
    3228:	9305      	str	r3, [sp, #20]
    322a:	4618      	mov	r0, r3
    322c:	250a      	movs	r5, #10
    322e:	4688      	mov	r8, r1
    3230:	3101      	adds	r1, #1
    3232:	f898 2000 	ldrb.w	r2, [r8]
    3236:	3a30      	subs	r2, #48	; 0x30
    3238:	2a09      	cmp	r2, #9
    323a:	d903      	bls.n	3244 <_vfiprintf_r+0x1cc>
    323c:	2b00      	cmp	r3, #0
    323e:	d0c5      	beq.n	31cc <_vfiprintf_r+0x154>
    3240:	9005      	str	r0, [sp, #20]
    3242:	e7c3      	b.n	31cc <_vfiprintf_r+0x154>
    3244:	fb05 2000 	mla	r0, r5, r0, r2
    3248:	2301      	movs	r3, #1
    324a:	e7f0      	b.n	322e <_vfiprintf_r+0x1b6>
    324c:	ab03      	add	r3, sp, #12
    324e:	9300      	str	r3, [sp, #0]
    3250:	4622      	mov	r2, r4
    3252:	4b13      	ldr	r3, [pc, #76]	; (32a0 <_vfiprintf_r+0x228>)
    3254:	a904      	add	r1, sp, #16
    3256:	4630      	mov	r0, r6
    3258:	f3af 8000 	nop.w
    325c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3260:	4681      	mov	r9, r0
    3262:	d1d8      	bne.n	3216 <_vfiprintf_r+0x19e>
    3264:	89a3      	ldrh	r3, [r4, #12]
    3266:	065b      	lsls	r3, r3, #25
    3268:	f53f af7d 	bmi.w	3166 <_vfiprintf_r+0xee>
    326c:	9809      	ldr	r0, [sp, #36]	; 0x24
    326e:	e77c      	b.n	316a <_vfiprintf_r+0xf2>
    3270:	ab03      	add	r3, sp, #12
    3272:	9300      	str	r3, [sp, #0]
    3274:	4622      	mov	r2, r4
    3276:	4b0a      	ldr	r3, [pc, #40]	; (32a0 <_vfiprintf_r+0x228>)
    3278:	a904      	add	r1, sp, #16
    327a:	4630      	mov	r0, r6
    327c:	f000 f888 	bl	3390 <_printf_i>
    3280:	e7ec      	b.n	325c <_vfiprintf_r+0x1e4>
    3282:	bf00      	nop
    3284:	00003bac 	.word	0x00003bac
    3288:	00003bec 	.word	0x00003bec
    328c:	00003bcc 	.word	0x00003bcc
    3290:	00003b8c 	.word	0x00003b8c
    3294:	00003bf2 	.word	0x00003bf2
    3298:	00003bf6 	.word	0x00003bf6
    329c:	00000000 	.word	0x00000000
    32a0:	00003055 	.word	0x00003055

000032a4 <_printf_common>:
    32a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32a8:	4691      	mov	r9, r2
    32aa:	461f      	mov	r7, r3
    32ac:	688a      	ldr	r2, [r1, #8]
    32ae:	690b      	ldr	r3, [r1, #16]
    32b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    32b4:	4293      	cmp	r3, r2
    32b6:	bfb8      	it	lt
    32b8:	4613      	movlt	r3, r2
    32ba:	f8c9 3000 	str.w	r3, [r9]
    32be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    32c2:	4606      	mov	r6, r0
    32c4:	460c      	mov	r4, r1
    32c6:	b112      	cbz	r2, 32ce <_printf_common+0x2a>
    32c8:	3301      	adds	r3, #1
    32ca:	f8c9 3000 	str.w	r3, [r9]
    32ce:	6823      	ldr	r3, [r4, #0]
    32d0:	0699      	lsls	r1, r3, #26
    32d2:	bf42      	ittt	mi
    32d4:	f8d9 3000 	ldrmi.w	r3, [r9]
    32d8:	3302      	addmi	r3, #2
    32da:	f8c9 3000 	strmi.w	r3, [r9]
    32de:	6825      	ldr	r5, [r4, #0]
    32e0:	f015 0506 	ands.w	r5, r5, #6
    32e4:	d107      	bne.n	32f6 <_printf_common+0x52>
    32e6:	f104 0a19 	add.w	sl, r4, #25
    32ea:	68e3      	ldr	r3, [r4, #12]
    32ec:	f8d9 2000 	ldr.w	r2, [r9]
    32f0:	1a9b      	subs	r3, r3, r2
    32f2:	429d      	cmp	r5, r3
    32f4:	db29      	blt.n	334a <_printf_common+0xa6>
    32f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    32fa:	6822      	ldr	r2, [r4, #0]
    32fc:	3300      	adds	r3, #0
    32fe:	bf18      	it	ne
    3300:	2301      	movne	r3, #1
    3302:	0692      	lsls	r2, r2, #26
    3304:	d42e      	bmi.n	3364 <_printf_common+0xc0>
    3306:	f104 0243 	add.w	r2, r4, #67	; 0x43
    330a:	4639      	mov	r1, r7
    330c:	4630      	mov	r0, r6
    330e:	47c0      	blx	r8
    3310:	3001      	adds	r0, #1
    3312:	d021      	beq.n	3358 <_printf_common+0xb4>
    3314:	6823      	ldr	r3, [r4, #0]
    3316:	68e5      	ldr	r5, [r4, #12]
    3318:	f8d9 2000 	ldr.w	r2, [r9]
    331c:	f003 0306 	and.w	r3, r3, #6
    3320:	2b04      	cmp	r3, #4
    3322:	bf08      	it	eq
    3324:	1aad      	subeq	r5, r5, r2
    3326:	68a3      	ldr	r3, [r4, #8]
    3328:	6922      	ldr	r2, [r4, #16]
    332a:	bf0c      	ite	eq
    332c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    3330:	2500      	movne	r5, #0
    3332:	4293      	cmp	r3, r2
    3334:	bfc4      	itt	gt
    3336:	1a9b      	subgt	r3, r3, r2
    3338:	18ed      	addgt	r5, r5, r3
    333a:	f04f 0900 	mov.w	r9, #0
    333e:	341a      	adds	r4, #26
    3340:	454d      	cmp	r5, r9
    3342:	d11b      	bne.n	337c <_printf_common+0xd8>
    3344:	2000      	movs	r0, #0
    3346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    334a:	2301      	movs	r3, #1
    334c:	4652      	mov	r2, sl
    334e:	4639      	mov	r1, r7
    3350:	4630      	mov	r0, r6
    3352:	47c0      	blx	r8
    3354:	3001      	adds	r0, #1
    3356:	d103      	bne.n	3360 <_printf_common+0xbc>
    3358:	f04f 30ff 	mov.w	r0, #4294967295
    335c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3360:	3501      	adds	r5, #1
    3362:	e7c2      	b.n	32ea <_printf_common+0x46>
    3364:	18e1      	adds	r1, r4, r3
    3366:	1c5a      	adds	r2, r3, #1
    3368:	2030      	movs	r0, #48	; 0x30
    336a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    336e:	4422      	add	r2, r4
    3370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    3374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    3378:	3302      	adds	r3, #2
    337a:	e7c4      	b.n	3306 <_printf_common+0x62>
    337c:	2301      	movs	r3, #1
    337e:	4622      	mov	r2, r4
    3380:	4639      	mov	r1, r7
    3382:	4630      	mov	r0, r6
    3384:	47c0      	blx	r8
    3386:	3001      	adds	r0, #1
    3388:	d0e6      	beq.n	3358 <_printf_common+0xb4>
    338a:	f109 0901 	add.w	r9, r9, #1
    338e:	e7d7      	b.n	3340 <_printf_common+0x9c>

00003390 <_printf_i>:
    3390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3394:	4617      	mov	r7, r2
    3396:	7e0a      	ldrb	r2, [r1, #24]
    3398:	b085      	sub	sp, #20
    339a:	2a6e      	cmp	r2, #110	; 0x6e
    339c:	4698      	mov	r8, r3
    339e:	4606      	mov	r6, r0
    33a0:	460c      	mov	r4, r1
    33a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    33a4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    33a8:	f000 80bc 	beq.w	3524 <_printf_i+0x194>
    33ac:	d81a      	bhi.n	33e4 <_printf_i+0x54>
    33ae:	2a63      	cmp	r2, #99	; 0x63
    33b0:	d02e      	beq.n	3410 <_printf_i+0x80>
    33b2:	d80a      	bhi.n	33ca <_printf_i+0x3a>
    33b4:	2a00      	cmp	r2, #0
    33b6:	f000 80c8 	beq.w	354a <_printf_i+0x1ba>
    33ba:	2a58      	cmp	r2, #88	; 0x58
    33bc:	f000 808a 	beq.w	34d4 <_printf_i+0x144>
    33c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    33c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    33c8:	e02a      	b.n	3420 <_printf_i+0x90>
    33ca:	2a64      	cmp	r2, #100	; 0x64
    33cc:	d001      	beq.n	33d2 <_printf_i+0x42>
    33ce:	2a69      	cmp	r2, #105	; 0x69
    33d0:	d1f6      	bne.n	33c0 <_printf_i+0x30>
    33d2:	6821      	ldr	r1, [r4, #0]
    33d4:	681a      	ldr	r2, [r3, #0]
    33d6:	f011 0f80 	tst.w	r1, #128	; 0x80
    33da:	d023      	beq.n	3424 <_printf_i+0x94>
    33dc:	1d11      	adds	r1, r2, #4
    33de:	6019      	str	r1, [r3, #0]
    33e0:	6813      	ldr	r3, [r2, #0]
    33e2:	e027      	b.n	3434 <_printf_i+0xa4>
    33e4:	2a73      	cmp	r2, #115	; 0x73
    33e6:	f000 80b4 	beq.w	3552 <_printf_i+0x1c2>
    33ea:	d808      	bhi.n	33fe <_printf_i+0x6e>
    33ec:	2a6f      	cmp	r2, #111	; 0x6f
    33ee:	d02a      	beq.n	3446 <_printf_i+0xb6>
    33f0:	2a70      	cmp	r2, #112	; 0x70
    33f2:	d1e5      	bne.n	33c0 <_printf_i+0x30>
    33f4:	680a      	ldr	r2, [r1, #0]
    33f6:	f042 0220 	orr.w	r2, r2, #32
    33fa:	600a      	str	r2, [r1, #0]
    33fc:	e003      	b.n	3406 <_printf_i+0x76>
    33fe:	2a75      	cmp	r2, #117	; 0x75
    3400:	d021      	beq.n	3446 <_printf_i+0xb6>
    3402:	2a78      	cmp	r2, #120	; 0x78
    3404:	d1dc      	bne.n	33c0 <_printf_i+0x30>
    3406:	2278      	movs	r2, #120	; 0x78
    3408:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    340c:	496e      	ldr	r1, [pc, #440]	; (35c8 <_printf_i+0x238>)
    340e:	e064      	b.n	34da <_printf_i+0x14a>
    3410:	681a      	ldr	r2, [r3, #0]
    3412:	f101 0542 	add.w	r5, r1, #66	; 0x42
    3416:	1d11      	adds	r1, r2, #4
    3418:	6019      	str	r1, [r3, #0]
    341a:	6813      	ldr	r3, [r2, #0]
    341c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    3420:	2301      	movs	r3, #1
    3422:	e0a3      	b.n	356c <_printf_i+0x1dc>
    3424:	f011 0f40 	tst.w	r1, #64	; 0x40
    3428:	f102 0104 	add.w	r1, r2, #4
    342c:	6019      	str	r1, [r3, #0]
    342e:	d0d7      	beq.n	33e0 <_printf_i+0x50>
    3430:	f9b2 3000 	ldrsh.w	r3, [r2]
    3434:	2b00      	cmp	r3, #0
    3436:	da03      	bge.n	3440 <_printf_i+0xb0>
    3438:	222d      	movs	r2, #45	; 0x2d
    343a:	425b      	negs	r3, r3
    343c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    3440:	4962      	ldr	r1, [pc, #392]	; (35cc <_printf_i+0x23c>)
    3442:	220a      	movs	r2, #10
    3444:	e017      	b.n	3476 <_printf_i+0xe6>
    3446:	6820      	ldr	r0, [r4, #0]
    3448:	6819      	ldr	r1, [r3, #0]
    344a:	f010 0f80 	tst.w	r0, #128	; 0x80
    344e:	d003      	beq.n	3458 <_printf_i+0xc8>
    3450:	1d08      	adds	r0, r1, #4
    3452:	6018      	str	r0, [r3, #0]
    3454:	680b      	ldr	r3, [r1, #0]
    3456:	e006      	b.n	3466 <_printf_i+0xd6>
    3458:	f010 0f40 	tst.w	r0, #64	; 0x40
    345c:	f101 0004 	add.w	r0, r1, #4
    3460:	6018      	str	r0, [r3, #0]
    3462:	d0f7      	beq.n	3454 <_printf_i+0xc4>
    3464:	880b      	ldrh	r3, [r1, #0]
    3466:	4959      	ldr	r1, [pc, #356]	; (35cc <_printf_i+0x23c>)
    3468:	2a6f      	cmp	r2, #111	; 0x6f
    346a:	bf14      	ite	ne
    346c:	220a      	movne	r2, #10
    346e:	2208      	moveq	r2, #8
    3470:	2000      	movs	r0, #0
    3472:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    3476:	6865      	ldr	r5, [r4, #4]
    3478:	60a5      	str	r5, [r4, #8]
    347a:	2d00      	cmp	r5, #0
    347c:	f2c0 809c 	blt.w	35b8 <_printf_i+0x228>
    3480:	6820      	ldr	r0, [r4, #0]
    3482:	f020 0004 	bic.w	r0, r0, #4
    3486:	6020      	str	r0, [r4, #0]
    3488:	2b00      	cmp	r3, #0
    348a:	d13f      	bne.n	350c <_printf_i+0x17c>
    348c:	2d00      	cmp	r5, #0
    348e:	f040 8095 	bne.w	35bc <_printf_i+0x22c>
    3492:	4675      	mov	r5, lr
    3494:	2a08      	cmp	r2, #8
    3496:	d10b      	bne.n	34b0 <_printf_i+0x120>
    3498:	6823      	ldr	r3, [r4, #0]
    349a:	07da      	lsls	r2, r3, #31
    349c:	d508      	bpl.n	34b0 <_printf_i+0x120>
    349e:	6923      	ldr	r3, [r4, #16]
    34a0:	6862      	ldr	r2, [r4, #4]
    34a2:	429a      	cmp	r2, r3
    34a4:	bfde      	ittt	le
    34a6:	2330      	movle	r3, #48	; 0x30
    34a8:	f805 3c01 	strble.w	r3, [r5, #-1]
    34ac:	f105 35ff 	addle.w	r5, r5, #4294967295
    34b0:	ebae 0305 	sub.w	r3, lr, r5
    34b4:	6123      	str	r3, [r4, #16]
    34b6:	f8cd 8000 	str.w	r8, [sp]
    34ba:	463b      	mov	r3, r7
    34bc:	aa03      	add	r2, sp, #12
    34be:	4621      	mov	r1, r4
    34c0:	4630      	mov	r0, r6
    34c2:	f7ff feef 	bl	32a4 <_printf_common>
    34c6:	3001      	adds	r0, #1
    34c8:	d155      	bne.n	3576 <_printf_i+0x1e6>
    34ca:	f04f 30ff 	mov.w	r0, #4294967295
    34ce:	b005      	add	sp, #20
    34d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    34d4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    34d8:	493c      	ldr	r1, [pc, #240]	; (35cc <_printf_i+0x23c>)
    34da:	6822      	ldr	r2, [r4, #0]
    34dc:	6818      	ldr	r0, [r3, #0]
    34de:	f012 0f80 	tst.w	r2, #128	; 0x80
    34e2:	f100 0504 	add.w	r5, r0, #4
    34e6:	601d      	str	r5, [r3, #0]
    34e8:	d001      	beq.n	34ee <_printf_i+0x15e>
    34ea:	6803      	ldr	r3, [r0, #0]
    34ec:	e002      	b.n	34f4 <_printf_i+0x164>
    34ee:	0655      	lsls	r5, r2, #25
    34f0:	d5fb      	bpl.n	34ea <_printf_i+0x15a>
    34f2:	8803      	ldrh	r3, [r0, #0]
    34f4:	07d0      	lsls	r0, r2, #31
    34f6:	bf44      	itt	mi
    34f8:	f042 0220 	orrmi.w	r2, r2, #32
    34fc:	6022      	strmi	r2, [r4, #0]
    34fe:	b91b      	cbnz	r3, 3508 <_printf_i+0x178>
    3500:	6822      	ldr	r2, [r4, #0]
    3502:	f022 0220 	bic.w	r2, r2, #32
    3506:	6022      	str	r2, [r4, #0]
    3508:	2210      	movs	r2, #16
    350a:	e7b1      	b.n	3470 <_printf_i+0xe0>
    350c:	4675      	mov	r5, lr
    350e:	fbb3 f0f2 	udiv	r0, r3, r2
    3512:	fb02 3310 	mls	r3, r2, r0, r3
    3516:	5ccb      	ldrb	r3, [r1, r3]
    3518:	f805 3d01 	strb.w	r3, [r5, #-1]!
    351c:	4603      	mov	r3, r0
    351e:	2800      	cmp	r0, #0
    3520:	d1f5      	bne.n	350e <_printf_i+0x17e>
    3522:	e7b7      	b.n	3494 <_printf_i+0x104>
    3524:	6808      	ldr	r0, [r1, #0]
    3526:	681a      	ldr	r2, [r3, #0]
    3528:	6949      	ldr	r1, [r1, #20]
    352a:	f010 0f80 	tst.w	r0, #128	; 0x80
    352e:	d004      	beq.n	353a <_printf_i+0x1aa>
    3530:	1d10      	adds	r0, r2, #4
    3532:	6018      	str	r0, [r3, #0]
    3534:	6813      	ldr	r3, [r2, #0]
    3536:	6019      	str	r1, [r3, #0]
    3538:	e007      	b.n	354a <_printf_i+0x1ba>
    353a:	f010 0f40 	tst.w	r0, #64	; 0x40
    353e:	f102 0004 	add.w	r0, r2, #4
    3542:	6018      	str	r0, [r3, #0]
    3544:	6813      	ldr	r3, [r2, #0]
    3546:	d0f6      	beq.n	3536 <_printf_i+0x1a6>
    3548:	8019      	strh	r1, [r3, #0]
    354a:	2300      	movs	r3, #0
    354c:	6123      	str	r3, [r4, #16]
    354e:	4675      	mov	r5, lr
    3550:	e7b1      	b.n	34b6 <_printf_i+0x126>
    3552:	681a      	ldr	r2, [r3, #0]
    3554:	1d11      	adds	r1, r2, #4
    3556:	6019      	str	r1, [r3, #0]
    3558:	6815      	ldr	r5, [r2, #0]
    355a:	6862      	ldr	r2, [r4, #4]
    355c:	2100      	movs	r1, #0
    355e:	4628      	mov	r0, r5
    3560:	f000 f8e6 	bl	3730 <memchr>
    3564:	b108      	cbz	r0, 356a <_printf_i+0x1da>
    3566:	1b40      	subs	r0, r0, r5
    3568:	6060      	str	r0, [r4, #4]
    356a:	6863      	ldr	r3, [r4, #4]
    356c:	6123      	str	r3, [r4, #16]
    356e:	2300      	movs	r3, #0
    3570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    3574:	e79f      	b.n	34b6 <_printf_i+0x126>
    3576:	6923      	ldr	r3, [r4, #16]
    3578:	462a      	mov	r2, r5
    357a:	4639      	mov	r1, r7
    357c:	4630      	mov	r0, r6
    357e:	47c0      	blx	r8
    3580:	3001      	adds	r0, #1
    3582:	d0a2      	beq.n	34ca <_printf_i+0x13a>
    3584:	6823      	ldr	r3, [r4, #0]
    3586:	079b      	lsls	r3, r3, #30
    3588:	d507      	bpl.n	359a <_printf_i+0x20a>
    358a:	2500      	movs	r5, #0
    358c:	f104 0919 	add.w	r9, r4, #25
    3590:	68e3      	ldr	r3, [r4, #12]
    3592:	9a03      	ldr	r2, [sp, #12]
    3594:	1a9b      	subs	r3, r3, r2
    3596:	429d      	cmp	r5, r3
    3598:	db05      	blt.n	35a6 <_printf_i+0x216>
    359a:	68e0      	ldr	r0, [r4, #12]
    359c:	9b03      	ldr	r3, [sp, #12]
    359e:	4298      	cmp	r0, r3
    35a0:	bfb8      	it	lt
    35a2:	4618      	movlt	r0, r3
    35a4:	e793      	b.n	34ce <_printf_i+0x13e>
    35a6:	2301      	movs	r3, #1
    35a8:	464a      	mov	r2, r9
    35aa:	4639      	mov	r1, r7
    35ac:	4630      	mov	r0, r6
    35ae:	47c0      	blx	r8
    35b0:	3001      	adds	r0, #1
    35b2:	d08a      	beq.n	34ca <_printf_i+0x13a>
    35b4:	3501      	adds	r5, #1
    35b6:	e7eb      	b.n	3590 <_printf_i+0x200>
    35b8:	2b00      	cmp	r3, #0
    35ba:	d1a7      	bne.n	350c <_printf_i+0x17c>
    35bc:	780b      	ldrb	r3, [r1, #0]
    35be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    35c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    35c6:	e765      	b.n	3494 <_printf_i+0x104>
    35c8:	00003c0e 	.word	0x00003c0e
    35cc:	00003bfd 	.word	0x00003bfd

000035d0 <_sbrk_r>:
    35d0:	b538      	push	{r3, r4, r5, lr}
    35d2:	4c06      	ldr	r4, [pc, #24]	; (35ec <_sbrk_r+0x1c>)
    35d4:	2300      	movs	r3, #0
    35d6:	4605      	mov	r5, r0
    35d8:	4608      	mov	r0, r1
    35da:	6023      	str	r3, [r4, #0]
    35dc:	f7fd fb82 	bl	ce4 <_sbrk>
    35e0:	1c43      	adds	r3, r0, #1
    35e2:	d102      	bne.n	35ea <_sbrk_r+0x1a>
    35e4:	6823      	ldr	r3, [r4, #0]
    35e6:	b103      	cbz	r3, 35ea <_sbrk_r+0x1a>
    35e8:	602b      	str	r3, [r5, #0]
    35ea:	bd38      	pop	{r3, r4, r5, pc}
    35ec:	20000370 	.word	0x20000370

000035f0 <__sread>:
    35f0:	b510      	push	{r4, lr}
    35f2:	460c      	mov	r4, r1
    35f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    35f8:	f000 f8ec 	bl	37d4 <_read_r>
    35fc:	2800      	cmp	r0, #0
    35fe:	bfab      	itete	ge
    3600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    3602:	89a3      	ldrhlt	r3, [r4, #12]
    3604:	181b      	addge	r3, r3, r0
    3606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    360a:	bfac      	ite	ge
    360c:	6563      	strge	r3, [r4, #84]	; 0x54
    360e:	81a3      	strhlt	r3, [r4, #12]
    3610:	bd10      	pop	{r4, pc}

00003612 <__swrite>:
    3612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3616:	461f      	mov	r7, r3
    3618:	898b      	ldrh	r3, [r1, #12]
    361a:	05db      	lsls	r3, r3, #23
    361c:	4605      	mov	r5, r0
    361e:	460c      	mov	r4, r1
    3620:	4616      	mov	r6, r2
    3622:	d505      	bpl.n	3630 <__swrite+0x1e>
    3624:	2302      	movs	r3, #2
    3626:	2200      	movs	r2, #0
    3628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    362c:	f000 f868 	bl	3700 <_lseek_r>
    3630:	89a3      	ldrh	r3, [r4, #12]
    3632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    3636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    363a:	81a3      	strh	r3, [r4, #12]
    363c:	4632      	mov	r2, r6
    363e:	463b      	mov	r3, r7
    3640:	4628      	mov	r0, r5
    3642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3646:	f000 b817 	b.w	3678 <_write_r>

0000364a <__sseek>:
    364a:	b510      	push	{r4, lr}
    364c:	460c      	mov	r4, r1
    364e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3652:	f000 f855 	bl	3700 <_lseek_r>
    3656:	1c43      	adds	r3, r0, #1
    3658:	89a3      	ldrh	r3, [r4, #12]
    365a:	bf15      	itete	ne
    365c:	6560      	strne	r0, [r4, #84]	; 0x54
    365e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    3662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    3666:	81a3      	strheq	r3, [r4, #12]
    3668:	bf18      	it	ne
    366a:	81a3      	strhne	r3, [r4, #12]
    366c:	bd10      	pop	{r4, pc}

0000366e <__sclose>:
    366e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3672:	f000 b813 	b.w	369c <_close_r>
	...

00003678 <_write_r>:
    3678:	b538      	push	{r3, r4, r5, lr}
    367a:	4c07      	ldr	r4, [pc, #28]	; (3698 <_write_r+0x20>)
    367c:	4605      	mov	r5, r0
    367e:	4608      	mov	r0, r1
    3680:	4611      	mov	r1, r2
    3682:	2200      	movs	r2, #0
    3684:	6022      	str	r2, [r4, #0]
    3686:	461a      	mov	r2, r3
    3688:	f7ff f818 	bl	26bc <_write>
    368c:	1c43      	adds	r3, r0, #1
    368e:	d102      	bne.n	3696 <_write_r+0x1e>
    3690:	6823      	ldr	r3, [r4, #0]
    3692:	b103      	cbz	r3, 3696 <_write_r+0x1e>
    3694:	602b      	str	r3, [r5, #0]
    3696:	bd38      	pop	{r3, r4, r5, pc}
    3698:	20000370 	.word	0x20000370

0000369c <_close_r>:
    369c:	b538      	push	{r3, r4, r5, lr}
    369e:	4c06      	ldr	r4, [pc, #24]	; (36b8 <_close_r+0x1c>)
    36a0:	2300      	movs	r3, #0
    36a2:	4605      	mov	r5, r0
    36a4:	4608      	mov	r0, r1
    36a6:	6023      	str	r3, [r4, #0]
    36a8:	f7fd fb2e 	bl	d08 <_close>
    36ac:	1c43      	adds	r3, r0, #1
    36ae:	d102      	bne.n	36b6 <_close_r+0x1a>
    36b0:	6823      	ldr	r3, [r4, #0]
    36b2:	b103      	cbz	r3, 36b6 <_close_r+0x1a>
    36b4:	602b      	str	r3, [r5, #0]
    36b6:	bd38      	pop	{r3, r4, r5, pc}
    36b8:	20000370 	.word	0x20000370

000036bc <_fstat_r>:
    36bc:	b538      	push	{r3, r4, r5, lr}
    36be:	4c07      	ldr	r4, [pc, #28]	; (36dc <_fstat_r+0x20>)
    36c0:	2300      	movs	r3, #0
    36c2:	4605      	mov	r5, r0
    36c4:	4608      	mov	r0, r1
    36c6:	4611      	mov	r1, r2
    36c8:	6023      	str	r3, [r4, #0]
    36ca:	f7fd fb20 	bl	d0e <_fstat>
    36ce:	1c43      	adds	r3, r0, #1
    36d0:	d102      	bne.n	36d8 <_fstat_r+0x1c>
    36d2:	6823      	ldr	r3, [r4, #0]
    36d4:	b103      	cbz	r3, 36d8 <_fstat_r+0x1c>
    36d6:	602b      	str	r3, [r5, #0]
    36d8:	bd38      	pop	{r3, r4, r5, pc}
    36da:	bf00      	nop
    36dc:	20000370 	.word	0x20000370

000036e0 <_isatty_r>:
    36e0:	b538      	push	{r3, r4, r5, lr}
    36e2:	4c06      	ldr	r4, [pc, #24]	; (36fc <_isatty_r+0x1c>)
    36e4:	2300      	movs	r3, #0
    36e6:	4605      	mov	r5, r0
    36e8:	4608      	mov	r0, r1
    36ea:	6023      	str	r3, [r4, #0]
    36ec:	f7fd fb14 	bl	d18 <_isatty>
    36f0:	1c43      	adds	r3, r0, #1
    36f2:	d102      	bne.n	36fa <_isatty_r+0x1a>
    36f4:	6823      	ldr	r3, [r4, #0]
    36f6:	b103      	cbz	r3, 36fa <_isatty_r+0x1a>
    36f8:	602b      	str	r3, [r5, #0]
    36fa:	bd38      	pop	{r3, r4, r5, pc}
    36fc:	20000370 	.word	0x20000370

00003700 <_lseek_r>:
    3700:	b538      	push	{r3, r4, r5, lr}
    3702:	4c07      	ldr	r4, [pc, #28]	; (3720 <_lseek_r+0x20>)
    3704:	4605      	mov	r5, r0
    3706:	4608      	mov	r0, r1
    3708:	4611      	mov	r1, r2
    370a:	2200      	movs	r2, #0
    370c:	6022      	str	r2, [r4, #0]
    370e:	461a      	mov	r2, r3
    3710:	f7fd fb04 	bl	d1c <_lseek>
    3714:	1c43      	adds	r3, r0, #1
    3716:	d102      	bne.n	371e <_lseek_r+0x1e>
    3718:	6823      	ldr	r3, [r4, #0]
    371a:	b103      	cbz	r3, 371e <_lseek_r+0x1e>
    371c:	602b      	str	r3, [r5, #0]
    371e:	bd38      	pop	{r3, r4, r5, pc}
    3720:	20000370 	.word	0x20000370
	...

00003730 <memchr>:
    3730:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    3734:	2a10      	cmp	r2, #16
    3736:	db2b      	blt.n	3790 <memchr+0x60>
    3738:	f010 0f07 	tst.w	r0, #7
    373c:	d008      	beq.n	3750 <memchr+0x20>
    373e:	f810 3b01 	ldrb.w	r3, [r0], #1
    3742:	3a01      	subs	r2, #1
    3744:	428b      	cmp	r3, r1
    3746:	d02d      	beq.n	37a4 <memchr+0x74>
    3748:	f010 0f07 	tst.w	r0, #7
    374c:	b342      	cbz	r2, 37a0 <memchr+0x70>
    374e:	d1f6      	bne.n	373e <memchr+0xe>
    3750:	b4f0      	push	{r4, r5, r6, r7}
    3752:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    3756:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    375a:	f022 0407 	bic.w	r4, r2, #7
    375e:	f07f 0700 	mvns.w	r7, #0
    3762:	2300      	movs	r3, #0
    3764:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    3768:	3c08      	subs	r4, #8
    376a:	ea85 0501 	eor.w	r5, r5, r1
    376e:	ea86 0601 	eor.w	r6, r6, r1
    3772:	fa85 f547 	uadd8	r5, r5, r7
    3776:	faa3 f587 	sel	r5, r3, r7
    377a:	fa86 f647 	uadd8	r6, r6, r7
    377e:	faa5 f687 	sel	r6, r5, r7
    3782:	b98e      	cbnz	r6, 37a8 <memchr+0x78>
    3784:	d1ee      	bne.n	3764 <memchr+0x34>
    3786:	bcf0      	pop	{r4, r5, r6, r7}
    3788:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    378c:	f002 0207 	and.w	r2, r2, #7
    3790:	b132      	cbz	r2, 37a0 <memchr+0x70>
    3792:	f810 3b01 	ldrb.w	r3, [r0], #1
    3796:	3a01      	subs	r2, #1
    3798:	ea83 0301 	eor.w	r3, r3, r1
    379c:	b113      	cbz	r3, 37a4 <memchr+0x74>
    379e:	d1f8      	bne.n	3792 <memchr+0x62>
    37a0:	2000      	movs	r0, #0
    37a2:	4770      	bx	lr
    37a4:	3801      	subs	r0, #1
    37a6:	4770      	bx	lr
    37a8:	2d00      	cmp	r5, #0
    37aa:	bf06      	itte	eq
    37ac:	4635      	moveq	r5, r6
    37ae:	3803      	subeq	r0, #3
    37b0:	3807      	subne	r0, #7
    37b2:	f015 0f01 	tst.w	r5, #1
    37b6:	d107      	bne.n	37c8 <memchr+0x98>
    37b8:	3001      	adds	r0, #1
    37ba:	f415 7f80 	tst.w	r5, #256	; 0x100
    37be:	bf02      	ittt	eq
    37c0:	3001      	addeq	r0, #1
    37c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    37c6:	3001      	addeq	r0, #1
    37c8:	bcf0      	pop	{r4, r5, r6, r7}
    37ca:	3801      	subs	r0, #1
    37cc:	4770      	bx	lr
    37ce:	bf00      	nop

000037d0 <__malloc_lock>:
    37d0:	4770      	bx	lr

000037d2 <__malloc_unlock>:
    37d2:	4770      	bx	lr

000037d4 <_read_r>:
    37d4:	b538      	push	{r3, r4, r5, lr}
    37d6:	4c07      	ldr	r4, [pc, #28]	; (37f4 <_read_r+0x20>)
    37d8:	4605      	mov	r5, r0
    37da:	4608      	mov	r0, r1
    37dc:	4611      	mov	r1, r2
    37de:	2200      	movs	r2, #0
    37e0:	6022      	str	r2, [r4, #0]
    37e2:	461a      	mov	r2, r3
    37e4:	f7fe ff5a 	bl	269c <_read>
    37e8:	1c43      	adds	r3, r0, #1
    37ea:	d102      	bne.n	37f2 <_read_r+0x1e>
    37ec:	6823      	ldr	r3, [r4, #0]
    37ee:	b103      	cbz	r3, 37f2 <_read_r+0x1e>
    37f0:	602b      	str	r3, [r5, #0]
    37f2:	bd38      	pop	{r3, r4, r5, pc}
    37f4:	20000370 	.word	0x20000370
    37f8:	682f2e2e 	.word	0x682f2e2e
    37fc:	692f6c61 	.word	0x692f6c61
    3800:	756c636e 	.word	0x756c636e
    3804:	682f6564 	.word	0x682f6564
    3808:	775f6c61 	.word	0x775f6c61
    380c:	682e7464 	.word	0x682e7464
    3810:	00000000 	.word	0x00000000
    3814:	682f2e2e 	.word	0x682f2e2e
    3818:	732f6c61 	.word	0x732f6c61
    381c:	682f6372 	.word	0x682f6372
    3820:	665f6c61 	.word	0x665f6c61
    3824:	6873616c 	.word	0x6873616c
    3828:	0000632e 	.word	0x0000632e
    382c:	682f2e2e 	.word	0x682f2e2e
    3830:	732f6c61 	.word	0x732f6c61
    3834:	682f6372 	.word	0x682f6372
    3838:	695f6c61 	.word	0x695f6c61
    383c:	00632e6f 	.word	0x00632e6f
    3840:	682f2e2e 	.word	0x682f2e2e
    3844:	732f6c61 	.word	0x732f6c61
    3848:	682f6372 	.word	0x682f6372
    384c:	725f6c61 	.word	0x725f6c61
    3850:	5f646e61 	.word	0x5f646e61
    3854:	636e7973 	.word	0x636e7973
    3858:	0000632e 	.word	0x0000632e
    385c:	682f2e2e 	.word	0x682f2e2e
    3860:	732f6c61 	.word	0x732f6c61
    3864:	682f6372 	.word	0x682f6372
    3868:	755f6c61 	.word	0x755f6c61
    386c:	74726173 	.word	0x74726173
    3870:	6e79735f 	.word	0x6e79735f
    3874:	00632e63 	.word	0x00632e63
    3878:	682f2e2e 	.word	0x682f2e2e
    387c:	6e2f6c70 	.word	0x6e2f6c70
    3880:	74636d76 	.word	0x74636d76
    3884:	682f6c72 	.word	0x682f6c72
    3888:	6e5f6c70 	.word	0x6e5f6c70
    388c:	74636d76 	.word	0x74636d76
    3890:	632e6c72 	.word	0x632e6c72
    3894:	00000000 	.word	0x00000000
    3898:	40003000 	.word	0x40003000
    389c:	40003400 	.word	0x40003400
    38a0:	41012000 	.word	0x41012000
    38a4:	41014000 	.word	0x41014000
    38a8:	43000000 	.word	0x43000000
    38ac:	43000400 	.word	0x43000400
    38b0:	43000800 	.word	0x43000800
    38b4:	43000c00 	.word	0x43000c00

000038b8 <_usarts>:
    38b8:	00000000 40100004 00030000 00700002     .......@......p.
    38c8:	0000f583 00000000 00000001 40100004     ...............@
    38d8:	00030000 00700002 0000f583 00000000     ......p.........
    38e8:	00000002 40100004 00030000 00700002     .......@......p.
    38f8:	0000f583 00000000                       ........

00003900 <_i2cms>:
	...
    3918:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    3928:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    3938:	742f6c70 2f676e72 5f6c7068 676e7274     pl/trng/hpl_trng
    3948:	0000632e 682f2e2e 772f6c70 682f7464     .c..../hpl/wdt/h
    3958:	775f6c70 632e7464 00000000              pl_wdt.c....

00003964 <belial.66634>:
    3964:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    3974:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    3984:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    3994:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    39a4:	35c9c9c9 0000363a                       ...5:6..

000039ac <mulciber.66635>:
    39ac:	03020100 02010004 00020100 01000201     ................
    39bc:	02010002 00020100 01000201 01000002     ................
    39cc:	02010000 00020100 01000201 03020100     ................
    39dc:	00000004 01000100 01000302 02010002     ................
    39ec:	00000403 00000000                       ........

000039f4 <lucifer.66636>:
    39f4:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    3a04:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    3a14:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    3a24:	00cc0008 01707005 02030303 02d00000     .....pp.........
    3a34:	00505050 00000055                       PPP.U...

00003a3c <beelzebub.66637>:
    3a3c:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    3a4c:	64012201 d4019201 08020702 5f023402     .".d.........4._
    3a5c:	94027802 bb02a602 db02ca02 f902e802     .x..............
    3a6c:	7f031f03 69726553 4f206c61 3639204b     ....Serial OK 96
    3a7c:	38203030 0d0a314e 00000000 000a000a     00 8N1..........
    3a8c:	00140014 00000014 000a017c 000a017c     ........|...|...
    3a9c:	00140186 00140000 0122000a 00140186     ..........".....
    3aac:	01220190 0122000a 012c0014 0122017c     .."..."...,.|.".
    3abc:	012c0186 012c0014 0136017c 001e0000     ..,...,.|.6.....
    3acc:	00280032 00320000 003c0032 001e0050     2.(...2.2.<.P...
    3adc:	00280118 00280046 00be0050 00be0050     ..(.F.(.P...P...
    3aec:	00c80118 00280118 00be0122 00460000     ......(.".....F.
    3afc:	00500032 005a0000 00640032 006e0000     2.P...Z.2.d...n.
    3b0c:	00780032 00820000 008c0032 00960000     2.x.....2.......
    3b1c:	00a00032 00aa0000 00b40032 00be0000     2.......2.......
    3b2c:	00c80032 00c8012c 00d20172 00dc001e     2...,...r.......
    3b3c:	00e60172 00f0001e 00fa0172 0104001e     r.......r.......
    3b4c:	010e0172 0118005a 0122012c 82be50b4     r...Z...,."..P..
    3b5c:	8cbe82aa 64963c8c 64dc3cd2 a08c9682     .....<.d.<.d....
    3b6c:	aadca08c a0e696dc 50f03c78 5a78466e     ........x<.PnFxZ
    3b7c:	aaaa3c96 a0dc3cc8 aae6a0d2              .<...<......

00003b88 <_global_impure_ptr>:
    3b88:	20000008                                ... 

00003b8c <__sf_fake_stderr>:
	...

00003bac <__sf_fake_stdin>:
	...

00003bcc <__sf_fake_stdout>:
	...
    3bec:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3bfc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3c0c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3c1c:	00006665                                ef..

00003c20 <_init>:
    3c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c22:	bf00      	nop
    3c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c26:	bc08      	pop	{r3}
    3c28:	469e      	mov	lr, r3
    3c2a:	4770      	bx	lr

00003c2c <__init_array_start>:
    3c2c:	00000289 	.word	0x00000289

00003c30 <_fini>:
    3c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c32:	bf00      	nop
    3c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3c36:	bc08      	pop	{r3}
    3c38:	469e      	mov	lr, r3
    3c3a:	4770      	bx	lr

00003c3c <__fini_array_start>:
    3c3c:	00000265 	.word	0x00000265
