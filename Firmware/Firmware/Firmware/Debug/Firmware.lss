
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004168  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000009c  20000000  00004168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002009c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002009c  2**0
                  CONTENTS
  4 .bss          00002df0  2000009c  00004204  0002009c  2**2
                  ALLOC
  5 .stack        0000c004  20002e8c  00006ff4  0002009c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY
  8 .debug_info   00020998  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003802  00000000  00000000  00040abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ad59  00000000  00000000  000442bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ad8  00000000  00000000  0004f016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b98  00000000  00000000  0004faee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fe5b  00000000  00000000  00050686  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001629a  00000000  00000000  000804e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000f90ab  00000000  00000000  0009677b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000215c  00000000  00000000  0018f828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 ee 00 20 79 05 00 00 75 05 00 00 75 05 00 00     ... y...u...u...
      10:	75 05 00 00 75 05 00 00 75 05 00 00 00 00 00 00     u...u...u.......
	...
      2c:	75 05 00 00 75 05 00 00 00 00 00 00 75 05 00 00     u...u.......u...
      3c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      4c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      5c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      6c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      7c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      8c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      9c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      ac:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      bc:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      cc:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      dc:	75 05 00 00 75 05 00 00 75 05 00 00 00 00 00 00     u...u...u.......
	...
      f4:	b5 09 00 00 75 05 00 00 75 05 00 00 75 05 00 00     ....u...u...u...
     104:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     114:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     124:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     134:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     144:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     154:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     164:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     174:	75 05 00 00 00 00 00 00 00 00 00 00 75 05 00 00     u...........u...
     184:	75 05 00 00 75 05 00 00 75 05 00 00 00 00 00 00     u...u...u.......
     194:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1a4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1b4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1c4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1d4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1e4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1f4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     204:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     214:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     224:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     234:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     244:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     254:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	2000009c 	.word	0x2000009c
     280:	00000000 	.word	0x00000000
     284:	00004168 	.word	0x00004168

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004168 	.word	0x00004168
     2c4:	200000a0 	.word	0x200000a0
     2c8:	00004168 	.word	0x00004168
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000006d1 	.word	0x000006d1
     2e0:	000015a5 	.word	0x000015a5

000002e4 <drawChar>:
originModeState originMode = ABSOLUTE;



void drawChar(uint8_t character)
{
     2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2e6:	b0e5      	sub	sp, #404	; 0x194
     2e8:	4606      	mov	r6, r0

	uint16_t x = xCharPos;
     2ea:	4a74      	ldr	r2, [pc, #464]	; (4bc <drawChar+0x1d8>)
     2ec:	8813      	ldrh	r3, [r2, #0]
	uint16_t y = yCharPos;
     2ee:	8852      	ldrh	r2, [r2, #2]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
	
	uint32_t tempColor = consoleColors[x][y];
     2f0:	0059      	lsls	r1, r3, #1
     2f2:	18cc      	adds	r4, r1, r3
     2f4:	00e0      	lsls	r0, r4, #3
     2f6:	4410      	add	r0, r2
     2f8:	4c71      	ldr	r4, [pc, #452]	; (4c0 <drawChar+0x1dc>)
     2fa:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
	
	tempForeground = (tempColor >> 16);
     2fe:	0c25      	lsrs	r5, r4, #16
	tempBackground = consoleColors[x][y] & 0xFFFF;
     300:	b2a4      	uxth	r4, r4
	
	
	consoleDisplay[x][y] = character;
     302:	4419      	add	r1, r3
     304:	00c8      	lsls	r0, r1, #3
     306:	496f      	ldr	r1, [pc, #444]	; (4c4 <drawChar+0x1e0>)
     308:	4401      	add	r1, r0
     30a:	548e      	strb	r6, [r1, r2]
	
	uint8_t displayFont[10][20];
	uint8_t tempFontStorage[200];
	uint8_t k = 0;
	
	REG_PORT_OUTCLR1 = LCD_CS;
     30c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
     310:	496d      	ldr	r1, [pc, #436]	; (4c8 <drawChar+0x1e4>)
     312:	6008      	str	r0, [r1, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
     314:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     318:	0058      	lsls	r0, r3, #1
     31a:	b280      	uxth	r0, r0
     31c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     320:	0091      	lsls	r1, r2, #2
     322:	b289      	uxth	r1, r1
     324:	f101 0313 	add.w	r3, r1, #19
     328:	f100 0209 	add.w	r2, r0, #9
     32c:	b29b      	uxth	r3, r3
     32e:	b292      	uxth	r2, r2
     330:	4f66      	ldr	r7, [pc, #408]	; (4cc <drawChar+0x1e8>)
     332:	47b8      	blx	r7
	
	//reformat the character into a 10x20 array:
	//first transmute it into tempFontStorage
	for(uint16_t i=0; i <= 24; i++)
     334:	2700      	movs	r7, #0
	uint8_t k = 0;
     336:	463b      	mov	r3, r7
	for(uint16_t i=0; i <= 24; i++)
     338:	e01a      	b.n	370 <drawChar+0x8c>
			{
				tempFontStorage[k] = 0xFF;
			}
			else
			{
				tempFontStorage[k] = 0x00;
     33a:	2200      	movs	r2, #0
     33c:	f80d 2003 	strb.w	r2, [sp, r3]
			}
			k++;
     340:	3301      	adds	r3, #1
     342:	b2db      	uxtb	r3, r3
		for(int j=0;j<8;j++)
     344:	3001      	adds	r0, #1
     346:	2807      	cmp	r0, #7
     348:	dc10      	bgt.n	36c <drawChar+0x88>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
     34a:	eb06 0286 	add.w	r2, r6, r6, lsl #2
     34e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     352:	495f      	ldr	r1, [pc, #380]	; (4d0 <drawChar+0x1ec>)
     354:	440a      	add	r2, r1
     356:	5dd2      	ldrb	r2, [r2, r7]
     358:	f1c0 0107 	rsb	r1, r0, #7
     35c:	410a      	asrs	r2, r1
     35e:	f012 0f01 	tst.w	r2, #1
     362:	d0ea      	beq.n	33a <drawChar+0x56>
				tempFontStorage[k] = 0xFF;
     364:	22ff      	movs	r2, #255	; 0xff
     366:	f80d 2003 	strb.w	r2, [sp, r3]
     36a:	e7e9      	b.n	340 <drawChar+0x5c>
	for(uint16_t i=0; i <= 24; i++)
     36c:	3701      	adds	r7, #1
     36e:	b2bf      	uxth	r7, r7
     370:	2f18      	cmp	r7, #24
     372:	d801      	bhi.n	378 <drawChar+0x94>
     374:	2000      	movs	r0, #0
     376:	e7e6      	b.n	346 <drawChar+0x62>
     378:	2600      	movs	r6, #0
     37a:	4631      	mov	r1, r6
     37c:	e01e      	b.n	3bc <drawChar+0xd8>
	{
		for(uint8_t j = 0; j <= 19 ; j++)
		{
			if(tempFontStorage[k] == 0xFF)
			{
				displayFont[i][j] = 0xFF;	
     37e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     382:	0082      	lsls	r2, r0, #2
     384:	a864      	add	r0, sp, #400	; 0x190
     386:	4402      	add	r2, r0
     388:	441a      	add	r2, r3
     38a:	20ff      	movs	r0, #255	; 0xff
     38c:	f802 0cc8 	strb.w	r0, [r2, #-200]
			}
			else
			{
				displayFont[i][j] = 0x00;
			}
			k++;
     390:	3101      	adds	r1, #1
     392:	b2c9      	uxtb	r1, r1
		for(uint8_t j = 0; j <= 19 ; j++)
     394:	3301      	adds	r3, #1
     396:	b2db      	uxtb	r3, r3
     398:	2b13      	cmp	r3, #19
     39a:	d80d      	bhi.n	3b8 <drawChar+0xd4>
			if(tempFontStorage[k] == 0xFF)
     39c:	f81d 2001 	ldrb.w	r2, [sp, r1]
     3a0:	2aff      	cmp	r2, #255	; 0xff
     3a2:	d0ec      	beq.n	37e <drawChar+0x9a>
				displayFont[i][j] = 0x00;
     3a4:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     3a8:	0082      	lsls	r2, r0, #2
     3aa:	a864      	add	r0, sp, #400	; 0x190
     3ac:	4402      	add	r2, r0
     3ae:	441a      	add	r2, r3
     3b0:	2000      	movs	r0, #0
     3b2:	f802 0cc8 	strb.w	r0, [r2, #-200]
     3b6:	e7eb      	b.n	390 <drawChar+0xac>
	for(uint8_t i = 0; i <= 9 ; i++)
     3b8:	3601      	adds	r6, #1
     3ba:	b2f6      	uxtb	r6, r6
     3bc:	2e09      	cmp	r6, #9
     3be:	d801      	bhi.n	3c4 <drawChar+0xe0>
     3c0:	2300      	movs	r3, #0
     3c2:	e7e9      	b.n	398 <drawChar+0xb4>
		}
	}
	
	//process displayFont if it is bold, first bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],1) == 1)
     3c4:	4a3d      	ldr	r2, [pc, #244]	; (4bc <drawChar+0x1d8>)
     3c6:	8813      	ldrh	r3, [r2, #0]
     3c8:	8851      	ldrh	r1, [r2, #2]
     3ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     3ce:	00da      	lsls	r2, r3, #3
     3d0:	4b40      	ldr	r3, [pc, #256]	; (4d4 <drawChar+0x1f0>)
     3d2:	4413      	add	r3, r2
     3d4:	5c5e      	ldrb	r6, [r3, r1]
     3d6:	f016 0f02 	tst.w	r6, #2
     3da:	d125      	bne.n	428 <drawChar+0x144>
			}
		}
	}
	
	//process displayfont if underscore, fourth bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],4) == 1)
     3dc:	f016 0f10 	tst.w	r6, #16
     3e0:	d124      	bne.n	42c <drawChar+0x148>
			displayFont[9][i] = 0xFF;
		}
	}
	
	//Process inverse video, compare 7th bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],7) == 0)
     3e2:	09f3      	lsrs	r3, r6, #7
     3e4:	d047      	beq.n	476 <drawChar+0x192>
     3e6:	2700      	movs	r7, #0
     3e8:	e05e      	b.n	4a8 <drawChar+0x1c4>
					displayFont[i][j] = 0xFF;
     3ea:	eb00 0180 	add.w	r1, r0, r0, lsl #2
     3ee:	008b      	lsls	r3, r1, #2
     3f0:	a964      	add	r1, sp, #400	; 0x190
     3f2:	440b      	add	r3, r1
     3f4:	4413      	add	r3, r2
     3f6:	21ff      	movs	r1, #255	; 0xff
     3f8:	f803 1cc8 	strb.w	r1, [r3, #-200]
			for(uint8_t j = 0; j <= 19 ; j++)
     3fc:	3201      	adds	r2, #1
     3fe:	b2d2      	uxtb	r2, r2
     400:	2a13      	cmp	r2, #19
     402:	d80b      	bhi.n	41c <drawChar+0x138>
				if(displayFont[i-1][j] == 0xFF)
     404:	1e41      	subs	r1, r0, #1
     406:	eb01 0181 	add.w	r1, r1, r1, lsl #2
     40a:	008b      	lsls	r3, r1, #2
     40c:	a964      	add	r1, sp, #400	; 0x190
     40e:	440b      	add	r3, r1
     410:	4413      	add	r3, r2
     412:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
     416:	2bff      	cmp	r3, #255	; 0xff
     418:	d1f0      	bne.n	3fc <drawChar+0x118>
     41a:	e7e6      	b.n	3ea <drawChar+0x106>
		for(uint8_t i = 9; i >= 1 ; i--)
     41c:	3801      	subs	r0, #1
     41e:	b2c0      	uxtb	r0, r0
     420:	2800      	cmp	r0, #0
     422:	d0db      	beq.n	3dc <drawChar+0xf8>
     424:	2200      	movs	r2, #0
     426:	e7eb      	b.n	400 <drawChar+0x11c>
     428:	2009      	movs	r0, #9
     42a:	e7f9      	b.n	420 <drawChar+0x13c>
     42c:	2300      	movs	r3, #0
		for(int i = 0 ; i <= 9 ; i++)
     42e:	2b09      	cmp	r3, #9
     430:	dcd7      	bgt.n	3e2 <drawChar+0xfe>
			displayFont[9][i] = 0xFF;
     432:	aa64      	add	r2, sp, #400	; 0x190
     434:	441a      	add	r2, r3
     436:	21ff      	movs	r1, #255	; 0xff
     438:	f802 1c14 	strb.w	r1, [r2, #-20]
		for(int i = 0 ; i <= 9 ; i++)
     43c:	3301      	adds	r3, #1
     43e:	e7f6      	b.n	42e <drawChar+0x14a>
		{
			for(uint8_t j = 0; j <= 19 ; j++)
			{
				if(displayFont[i][j] == 0xFF)
				{
					setPixel(tempForeground);
     440:	4628      	mov	r0, r5
     442:	4b25      	ldr	r3, [pc, #148]	; (4d8 <drawChar+0x1f4>)
     444:	4798      	blx	r3
			for(uint8_t j = 0; j <= 19 ; j++)
     446:	3601      	adds	r6, #1
     448:	b2f6      	uxtb	r6, r6
     44a:	2e13      	cmp	r6, #19
     44c:	d80d      	bhi.n	46a <drawChar+0x186>
				if(displayFont[i][j] == 0xFF)
     44e:	eb07 0287 	add.w	r2, r7, r7, lsl #2
     452:	0093      	lsls	r3, r2, #2
     454:	aa64      	add	r2, sp, #400	; 0x190
     456:	4413      	add	r3, r2
     458:	4433      	add	r3, r6
     45a:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
     45e:	2bff      	cmp	r3, #255	; 0xff
     460:	d0ee      	beq.n	440 <drawChar+0x15c>
				}
				else
				{
					setPixel(tempBackground);
     462:	4620      	mov	r0, r4
     464:	4b1c      	ldr	r3, [pc, #112]	; (4d8 <drawChar+0x1f4>)
     466:	4798      	blx	r3
     468:	e7ed      	b.n	446 <drawChar+0x162>
		for(uint8_t i = 0; i <= 9 ; i++)
     46a:	3701      	adds	r7, #1
     46c:	b2ff      	uxtb	r7, r7
     46e:	2f09      	cmp	r7, #9
     470:	d81e      	bhi.n	4b0 <drawChar+0x1cc>
     472:	2600      	movs	r6, #0
     474:	e7e9      	b.n	44a <drawChar+0x166>
     476:	2700      	movs	r7, #0
     478:	e7f9      	b.n	46e <drawChar+0x18a>
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
     47a:	4620      	mov	r0, r4
     47c:	4b16      	ldr	r3, [pc, #88]	; (4d8 <drawChar+0x1f4>)
     47e:	4798      	blx	r3
			for(uint8_t j = 0; j <= 19 ; j++)
     480:	3601      	adds	r6, #1
     482:	b2f6      	uxtb	r6, r6
     484:	2e13      	cmp	r6, #19
     486:	d80d      	bhi.n	4a4 <drawChar+0x1c0>
				if(displayFont[i][j] != 0xFF)
     488:	eb07 0287 	add.w	r2, r7, r7, lsl #2
     48c:	0093      	lsls	r3, r2, #2
     48e:	aa64      	add	r2, sp, #400	; 0x190
     490:	4413      	add	r3, r2
     492:	4433      	add	r3, r6
     494:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
     498:	2bff      	cmp	r3, #255	; 0xff
     49a:	d0ee      	beq.n	47a <drawChar+0x196>
					setPixel(tempForeground);
     49c:	4628      	mov	r0, r5
     49e:	4b0e      	ldr	r3, [pc, #56]	; (4d8 <drawChar+0x1f4>)
     4a0:	4798      	blx	r3
     4a2:	e7ed      	b.n	480 <drawChar+0x19c>
		for(uint8_t i = 0; i <= 9 ; i++)
     4a4:	3701      	adds	r7, #1
     4a6:	b2ff      	uxtb	r7, r7
     4a8:	2f09      	cmp	r7, #9
     4aa:	d801      	bhi.n	4b0 <drawChar+0x1cc>
     4ac:	2600      	movs	r6, #0
     4ae:	e7e9      	b.n	484 <drawChar+0x1a0>
				}
			}
		}		
	}
	
	REG_PORT_OUTSET1 = LCD_CS;
     4b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     4b4:	4b09      	ldr	r3, [pc, #36]	; (4dc <drawChar+0x1f8>)
     4b6:	601a      	str	r2, [r3, #0]
}
     4b8:	b065      	add	sp, #404	; 0x194
     4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4bc:	200000b8 	.word	0x200000b8
     4c0:	2000105c 	.word	0x2000105c
     4c4:	2000015c 	.word	0x2000015c
     4c8:	41008094 	.word	0x41008094
     4cc:	00000d45 	.word	0x00000d45
     4d0:	00002110 	.word	0x00002110
     4d4:	200008dc 	.word	0x200008dc
     4d8:	00000e6d 	.word	0x00000e6d
     4dc:	41008098 	.word	0x41008098

000004e0 <writeString>:
	cursorBlinkState = !cursorBlinkState;
	
}

void writeString(const char str[])
{
     4e0:	b570      	push	{r4, r5, r6, lr}
     4e2:	4606      	mov	r6, r0
	int length = strlen(str);
     4e4:	4b09      	ldr	r3, [pc, #36]	; (50c <writeString+0x2c>)
     4e6:	4798      	blx	r3
     4e8:	4605      	mov	r5, r0
	for(int i = 0; i < length; i++)
     4ea:	2400      	movs	r4, #0
     4ec:	e000      	b.n	4f0 <writeString+0x10>
     4ee:	3401      	adds	r4, #1
     4f0:	42ac      	cmp	r4, r5
     4f2:	da0a      	bge.n	50a <writeString+0x2a>
	{
		drawChar(str[i]);
     4f4:	5d30      	ldrb	r0, [r6, r4]
     4f6:	4b06      	ldr	r3, [pc, #24]	; (510 <writeString+0x30>)
     4f8:	4798      	blx	r3
		if(xCharPos <= 80)
     4fa:	4b06      	ldr	r3, [pc, #24]	; (514 <writeString+0x34>)
     4fc:	881b      	ldrh	r3, [r3, #0]
     4fe:	2b50      	cmp	r3, #80	; 0x50
     500:	d8f5      	bhi.n	4ee <writeString+0xe>
		xCharPos++;
     502:	3301      	adds	r3, #1
     504:	4a03      	ldr	r2, [pc, #12]	; (514 <writeString+0x34>)
     506:	8013      	strh	r3, [r2, #0]
     508:	e7f1      	b.n	4ee <writeString+0xe>
	}
}
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	000018dd 	.word	0x000018dd
     510:	000002e5 	.word	0x000002e5
     514:	200000b8 	.word	0x200000b8

00000518 <nullifyConsole>:

void nullifyConsole(void)
{
	for(int i = 0 ; i < 79 ; i++)
     518:	2000      	movs	r0, #0
     51a:	e002      	b.n	522 <nullifyConsole+0xa>
			consoleDisplay[i][j] = 0x00;
			consoleSGR[i][j] = 0x00;
			consoleColors[i][j] = 0xFFFF0000;
		}
	}	
}
     51c:	bc30      	pop	{r4, r5}
     51e:	4770      	bx	lr
	for(int i = 0 ; i < 79 ; i++)
     520:	3001      	adds	r0, #1
     522:	284e      	cmp	r0, #78	; 0x4e
     524:	dc1e      	bgt.n	564 <nullifyConsole+0x4c>
     526:	2200      	movs	r2, #0
		for(int j = 0 ; j < 23 ; j++)
     528:	2a16      	cmp	r2, #22
     52a:	dcf9      	bgt.n	520 <nullifyConsole+0x8>
{
     52c:	b430      	push	{r4, r5}
			consoleDisplay[i][j] = 0x00;
     52e:	0043      	lsls	r3, r0, #1
     530:	1819      	adds	r1, r3, r0
     532:	00cc      	lsls	r4, r1, #3
     534:	490c      	ldr	r1, [pc, #48]	; (568 <nullifyConsole+0x50>)
     536:	4421      	add	r1, r4
     538:	2400      	movs	r4, #0
     53a:	548c      	strb	r4, [r1, r2]
			consoleSGR[i][j] = 0x00;
     53c:	1819      	adds	r1, r3, r0
     53e:	00cd      	lsls	r5, r1, #3
     540:	490a      	ldr	r1, [pc, #40]	; (56c <nullifyConsole+0x54>)
     542:	4429      	add	r1, r5
     544:	548c      	strb	r4, [r1, r2]
			consoleColors[i][j] = 0xFFFF0000;
     546:	4629      	mov	r1, r5
     548:	4411      	add	r1, r2
     54a:	f5a4 3480 	sub.w	r4, r4, #65536	; 0x10000
     54e:	4b08      	ldr	r3, [pc, #32]	; (570 <nullifyConsole+0x58>)
     550:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
		for(int j = 0 ; j < 23 ; j++)
     554:	3201      	adds	r2, #1
     556:	2a16      	cmp	r2, #22
     558:	dde9      	ble.n	52e <nullifyConsole+0x16>
	for(int i = 0 ; i < 79 ; i++)
     55a:	3001      	adds	r0, #1
     55c:	284e      	cmp	r0, #78	; 0x4e
     55e:	dcdd      	bgt.n	51c <nullifyConsole+0x4>
     560:	2200      	movs	r2, #0
     562:	e7f8      	b.n	556 <nullifyConsole+0x3e>
     564:	4770      	bx	lr
     566:	bf00      	nop
     568:	2000015c 	.word	0x2000015c
     56c:	200008dc 	.word	0x200008dc
     570:	2000105c 	.word	0x2000105c

00000574 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     574:	e7fe      	b.n	574 <Dummy_Handler>
	...

00000578 <Reset_Handler>:
{
     578:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     57a:	4b15      	ldr	r3, [pc, #84]	; (5d0 <Reset_Handler+0x58>)
     57c:	4a15      	ldr	r2, [pc, #84]	; (5d4 <Reset_Handler+0x5c>)
     57e:	429a      	cmp	r2, r3
     580:	d009      	beq.n	596 <Reset_Handler+0x1e>
     582:	4b13      	ldr	r3, [pc, #76]	; (5d0 <Reset_Handler+0x58>)
     584:	4a13      	ldr	r2, [pc, #76]	; (5d4 <Reset_Handler+0x5c>)
     586:	e003      	b.n	590 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     588:	6811      	ldr	r1, [r2, #0]
     58a:	6019      	str	r1, [r3, #0]
     58c:	3304      	adds	r3, #4
     58e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     590:	4911      	ldr	r1, [pc, #68]	; (5d8 <Reset_Handler+0x60>)
     592:	428b      	cmp	r3, r1
     594:	d3f8      	bcc.n	588 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     596:	4b11      	ldr	r3, [pc, #68]	; (5dc <Reset_Handler+0x64>)
     598:	e002      	b.n	5a0 <Reset_Handler+0x28>
                *pDest++ = 0;
     59a:	2200      	movs	r2, #0
     59c:	601a      	str	r2, [r3, #0]
     59e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     5a0:	4a0f      	ldr	r2, [pc, #60]	; (5e0 <Reset_Handler+0x68>)
     5a2:	4293      	cmp	r3, r2
     5a4:	d3f9      	bcc.n	59a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     5a6:	4b0f      	ldr	r3, [pc, #60]	; (5e4 <Reset_Handler+0x6c>)
     5a8:	4a0f      	ldr	r2, [pc, #60]	; (5e8 <Reset_Handler+0x70>)
     5aa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     5ae:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     5b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     5b4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     5b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     5bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     5c0:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     5c4:	4b09      	ldr	r3, [pc, #36]	; (5ec <Reset_Handler+0x74>)
     5c6:	4798      	blx	r3
        main();
     5c8:	4b09      	ldr	r3, [pc, #36]	; (5f0 <Reset_Handler+0x78>)
     5ca:	4798      	blx	r3
     5cc:	e7fe      	b.n	5cc <Reset_Handler+0x54>
     5ce:	bf00      	nop
     5d0:	20000000 	.word	0x20000000
     5d4:	00004168 	.word	0x00004168
     5d8:	2000009c 	.word	0x2000009c
     5dc:	2000009c 	.word	0x2000009c
     5e0:	20002e8c 	.word	0x20002e8c
     5e4:	e000ed00 	.word	0xe000ed00
     5e8:	00000000 	.word	0x00000000
     5ec:	000015c5 	.word	0x000015c5
     5f0:	00001149 	.word	0x00001149

000005f4 <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f4:	4b10      	ldr	r3, [pc, #64]	; (638 <USART_0_PORT_init+0x44>)
     5f6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5fe:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     602:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     606:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     60a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     60e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     616:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     61a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     622:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     626:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     62a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
     636:	4770      	bx	lr
     638:	41008000 	.word	0x41008000

0000063c <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     63c:	4b06      	ldr	r3, [pc, #24]	; (658 <USART_0_CLOCK_init+0x1c>)
     63e:	2240      	movs	r2, #64	; 0x40
     640:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     644:	2243      	movs	r2, #67	; 0x43
     646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     64a:	4a04      	ldr	r2, [pc, #16]	; (65c <USART_0_CLOCK_init+0x20>)
     64c:	6953      	ldr	r3, [r2, #20]
     64e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     652:	6153      	str	r3, [r2, #20]
     654:	4770      	bx	lr
     656:	bf00      	nop
     658:	40001c00 	.word	0x40001c00
     65c:	40000800 	.word	0x40000800

00000660 <USART_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void USART_0_init(void)
{
     660:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     662:	4b05      	ldr	r3, [pc, #20]	; (678 <USART_0_init+0x18>)
     664:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     666:	2200      	movs	r2, #0
     668:	4904      	ldr	r1, [pc, #16]	; (67c <USART_0_init+0x1c>)
     66a:	4805      	ldr	r0, [pc, #20]	; (680 <USART_0_init+0x20>)
     66c:	4b05      	ldr	r3, [pc, #20]	; (684 <USART_0_init+0x24>)
     66e:	4798      	blx	r3
	USART_0_PORT_init();
     670:	4b05      	ldr	r3, [pc, #20]	; (688 <USART_0_init+0x28>)
     672:	4798      	blx	r3
     674:	bd08      	pop	{r3, pc}
     676:	bf00      	nop
     678:	0000063d 	.word	0x0000063d
     67c:	40003000 	.word	0x40003000
     680:	20002e64 	.word	0x20002e64
     684:	00000841 	.word	0x00000841
     688:	000005f5 	.word	0x000005f5

0000068c <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     68c:	4a02      	ldr	r2, [pc, #8]	; (698 <WDT_0_CLOCK_init+0xc>)
     68e:	6953      	ldr	r3, [r2, #20]
     690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     694:	6153      	str	r3, [r2, #20]
     696:	4770      	bx	lr
     698:	40000800 	.word	0x40000800

0000069c <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     69c:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     69e:	4b06      	ldr	r3, [pc, #24]	; (6b8 <WDT_0_init+0x1c>)
     6a0:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     6a2:	2248      	movs	r2, #72	; 0x48
     6a4:	4905      	ldr	r1, [pc, #20]	; (6bc <WDT_0_init+0x20>)
     6a6:	2001      	movs	r0, #1
     6a8:	4b05      	ldr	r3, [pc, #20]	; (6c0 <WDT_0_init+0x24>)
     6aa:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     6ac:	4805      	ldr	r0, [pc, #20]	; (6c4 <WDT_0_init+0x28>)
     6ae:	4b06      	ldr	r3, [pc, #24]	; (6c8 <WDT_0_init+0x2c>)
     6b0:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     6b2:	4b06      	ldr	r3, [pc, #24]	; (6cc <WDT_0_init+0x30>)
     6b4:	4798      	blx	r3
     6b6:	bd08      	pop	{r3, pc}
     6b8:	0000068d 	.word	0x0000068d
     6bc:	00003a10 	.word	0x00003a10
     6c0:	000008b9 	.word	0x000008b9
     6c4:	20002e60 	.word	0x20002e60
     6c8:	40002000 	.word	0x40002000
     6cc:	00000be9 	.word	0x00000be9

000006d0 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     6d0:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     6d2:	4b03      	ldr	r3, [pc, #12]	; (6e0 <system_init+0x10>)
     6d4:	4798      	blx	r3
	init_mcu();

	USART_0_init();
     6d6:	4b03      	ldr	r3, [pc, #12]	; (6e4 <system_init+0x14>)
     6d8:	4798      	blx	r3

	WDT_0_init();
     6da:	4b03      	ldr	r3, [pc, #12]	; (6e8 <system_init+0x18>)
     6dc:	4798      	blx	r3
     6de:	bd08      	pop	{r3, pc}
     6e0:	00000921 	.word	0x00000921
     6e4:	00000661 	.word	0x00000661
     6e8:	0000069d 	.word	0x0000069d

000006ec <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     6ec:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     6ee:	4b04      	ldr	r3, [pc, #16]	; (700 <delay_ms+0x14>)
     6f0:	681c      	ldr	r4, [r3, #0]
     6f2:	4b04      	ldr	r3, [pc, #16]	; (704 <delay_ms+0x18>)
     6f4:	4798      	blx	r3
     6f6:	4601      	mov	r1, r0
     6f8:	4620      	mov	r0, r4
     6fa:	4b03      	ldr	r3, [pc, #12]	; (708 <delay_ms+0x1c>)
     6fc:	4798      	blx	r3
     6fe:	bd10      	pop	{r4, pc}
     700:	200000c0 	.word	0x200000c0
     704:	000008fd 	.word	0x000008fd
     708:	00000919 	.word	0x00000919

0000070c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     70c:	b570      	push	{r4, r5, r6, lr}
     70e:	460d      	mov	r5, r1
     710:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     712:	4604      	mov	r4, r0
     714:	b168      	cbz	r0, 732 <io_write+0x26>
     716:	b151      	cbz	r1, 72e <io_write+0x22>
     718:	2001      	movs	r0, #1
     71a:	2234      	movs	r2, #52	; 0x34
     71c:	4906      	ldr	r1, [pc, #24]	; (738 <io_write+0x2c>)
     71e:	4b07      	ldr	r3, [pc, #28]	; (73c <io_write+0x30>)
     720:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     722:	6823      	ldr	r3, [r4, #0]
     724:	4632      	mov	r2, r6
     726:	4629      	mov	r1, r5
     728:	4620      	mov	r0, r4
     72a:	4798      	blx	r3
}
     72c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     72e:	2000      	movs	r0, #0
     730:	e7f3      	b.n	71a <io_write+0xe>
     732:	2000      	movs	r0, #0
     734:	e7f1      	b.n	71a <io_write+0xe>
     736:	bf00      	nop
     738:	00003a2c 	.word	0x00003a2c
     73c:	000008b9 	.word	0x000008b9

00000740 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     740:	b570      	push	{r4, r5, r6, lr}
     742:	460d      	mov	r5, r1
     744:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     746:	4604      	mov	r4, r0
     748:	b168      	cbz	r0, 766 <io_read+0x26>
     74a:	b151      	cbz	r1, 762 <io_read+0x22>
     74c:	2001      	movs	r0, #1
     74e:	223d      	movs	r2, #61	; 0x3d
     750:	4906      	ldr	r1, [pc, #24]	; (76c <io_read+0x2c>)
     752:	4b07      	ldr	r3, [pc, #28]	; (770 <io_read+0x30>)
     754:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     756:	6863      	ldr	r3, [r4, #4]
     758:	4632      	mov	r2, r6
     75a:	4629      	mov	r1, r5
     75c:	4620      	mov	r0, r4
     75e:	4798      	blx	r3
}
     760:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     762:	2000      	movs	r0, #0
     764:	e7f3      	b.n	74e <io_read+0xe>
     766:	2000      	movs	r0, #0
     768:	e7f1      	b.n	74e <io_read+0xe>
     76a:	bf00      	nop
     76c:	00003a2c 	.word	0x00003a2c
     770:	000008b9 	.word	0x000008b9

00000774 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     776:	460e      	mov	r6, r1
     778:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     77a:	4605      	mov	r5, r0
     77c:	b308      	cbz	r0, 7c2 <usart_sync_write+0x4e>
     77e:	b311      	cbz	r1, 7c6 <usart_sync_write+0x52>
     780:	bb1a      	cbnz	r2, 7ca <usart_sync_write+0x56>
     782:	2000      	movs	r0, #0
     784:	22f1      	movs	r2, #241	; 0xf1
     786:	4912      	ldr	r1, [pc, #72]	; (7d0 <usart_sync_write+0x5c>)
     788:	4b12      	ldr	r3, [pc, #72]	; (7d4 <usart_sync_write+0x60>)
     78a:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     78c:	f105 0408 	add.w	r4, r5, #8
     790:	4620      	mov	r0, r4
     792:	4b11      	ldr	r3, [pc, #68]	; (7d8 <usart_sync_write+0x64>)
     794:	4798      	blx	r3
     796:	2800      	cmp	r0, #0
     798:	d0f8      	beq.n	78c <usart_sync_write+0x18>
     79a:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     79c:	5d71      	ldrb	r1, [r6, r5]
     79e:	4620      	mov	r0, r4
     7a0:	4b0e      	ldr	r3, [pc, #56]	; (7dc <usart_sync_write+0x68>)
     7a2:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     7a4:	4620      	mov	r0, r4
     7a6:	4b0c      	ldr	r3, [pc, #48]	; (7d8 <usart_sync_write+0x64>)
     7a8:	4798      	blx	r3
     7aa:	2800      	cmp	r0, #0
     7ac:	d0fa      	beq.n	7a4 <usart_sync_write+0x30>
			;
	} while (++offset < length);
     7ae:	3501      	adds	r5, #1
     7b0:	42bd      	cmp	r5, r7
     7b2:	d3f3      	bcc.n	79c <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
     7b4:	4620      	mov	r0, r4
     7b6:	4b0a      	ldr	r3, [pc, #40]	; (7e0 <usart_sync_write+0x6c>)
     7b8:	4798      	blx	r3
     7ba:	2800      	cmp	r0, #0
     7bc:	d0fa      	beq.n	7b4 <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
     7be:	4628      	mov	r0, r5
     7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     7c2:	2000      	movs	r0, #0
     7c4:	e7de      	b.n	784 <usart_sync_write+0x10>
     7c6:	2000      	movs	r0, #0
     7c8:	e7dc      	b.n	784 <usart_sync_write+0x10>
     7ca:	2001      	movs	r0, #1
     7cc:	e7da      	b.n	784 <usart_sync_write+0x10>
     7ce:	bf00      	nop
     7d0:	00003a40 	.word	0x00003a40
     7d4:	000008b9 	.word	0x000008b9
     7d8:	00000bcb 	.word	0x00000bcb
     7dc:	00000bbd 	.word	0x00000bbd
     7e0:	00000bd5 	.word	0x00000bd5

000007e4 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7e8:	460f      	mov	r7, r1
     7ea:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     7ec:	4605      	mov	r5, r0
     7ee:	b1c8      	cbz	r0, 824 <usart_sync_read+0x40>
     7f0:	b1d1      	cbz	r1, 828 <usart_sync_read+0x44>
     7f2:	b9da      	cbnz	r2, 82c <usart_sync_read+0x48>
     7f4:	2000      	movs	r0, #0
     7f6:	f44f 7286 	mov.w	r2, #268	; 0x10c
     7fa:	490d      	ldr	r1, [pc, #52]	; (830 <usart_sync_read+0x4c>)
     7fc:	4b0d      	ldr	r3, [pc, #52]	; (834 <usart_sync_read+0x50>)
     7fe:	4798      	blx	r3
	uint32_t                      offset = 0;
     800:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     802:	f105 0408 	add.w	r4, r5, #8
     806:	4620      	mov	r0, r4
     808:	4b0b      	ldr	r3, [pc, #44]	; (838 <usart_sync_read+0x54>)
     80a:	4798      	blx	r3
     80c:	2800      	cmp	r0, #0
     80e:	d0f8      	beq.n	802 <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     810:	4620      	mov	r0, r4
     812:	4b0a      	ldr	r3, [pc, #40]	; (83c <usart_sync_read+0x58>)
     814:	4798      	blx	r3
     816:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     818:	3601      	adds	r6, #1
     81a:	4546      	cmp	r6, r8
     81c:	d3f1      	bcc.n	802 <usart_sync_read+0x1e>

	return (int32_t)offset;
}
     81e:	4630      	mov	r0, r6
     820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
     824:	2000      	movs	r0, #0
     826:	e7e6      	b.n	7f6 <usart_sync_read+0x12>
     828:	2000      	movs	r0, #0
     82a:	e7e4      	b.n	7f6 <usart_sync_read+0x12>
     82c:	2001      	movs	r0, #1
     82e:	e7e2      	b.n	7f6 <usart_sync_read+0x12>
     830:	00003a40 	.word	0x00003a40
     834:	000008b9 	.word	0x000008b9
     838:	00000bdf 	.word	0x00000bdf
     83c:	00000bc3 	.word	0x00000bc3

00000840 <usart_sync_init>:
{
     840:	b538      	push	{r3, r4, r5, lr}
     842:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     844:	4604      	mov	r4, r0
     846:	b1a0      	cbz	r0, 872 <usart_sync_init+0x32>
     848:	b189      	cbz	r1, 86e <usart_sync_init+0x2e>
     84a:	2001      	movs	r0, #1
     84c:	2234      	movs	r2, #52	; 0x34
     84e:	490a      	ldr	r1, [pc, #40]	; (878 <usart_sync_init+0x38>)
     850:	4b0a      	ldr	r3, [pc, #40]	; (87c <usart_sync_init+0x3c>)
     852:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     854:	4629      	mov	r1, r5
     856:	f104 0008 	add.w	r0, r4, #8
     85a:	4b09      	ldr	r3, [pc, #36]	; (880 <usart_sync_init+0x40>)
     85c:	4798      	blx	r3
	if (init_status) {
     85e:	4603      	mov	r3, r0
     860:	b918      	cbnz	r0, 86a <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
     862:	4a08      	ldr	r2, [pc, #32]	; (884 <usart_sync_init+0x44>)
     864:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     866:	4a08      	ldr	r2, [pc, #32]	; (888 <usart_sync_init+0x48>)
     868:	6022      	str	r2, [r4, #0]
}
     86a:	4618      	mov	r0, r3
     86c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     86e:	2000      	movs	r0, #0
     870:	e7ec      	b.n	84c <usart_sync_init+0xc>
     872:	2000      	movs	r0, #0
     874:	e7ea      	b.n	84c <usart_sync_init+0xc>
     876:	bf00      	nop
     878:	00003a40 	.word	0x00003a40
     87c:	000008b9 	.word	0x000008b9
     880:	00000b7d 	.word	0x00000b7d
     884:	000007e5 	.word	0x000007e5
     888:	00000775 	.word	0x00000775

0000088c <usart_sync_enable>:
{
     88c:	b510      	push	{r4, lr}
	ASSERT(descr);
     88e:	4604      	mov	r4, r0
     890:	2253      	movs	r2, #83	; 0x53
     892:	4906      	ldr	r1, [pc, #24]	; (8ac <usart_sync_enable+0x20>)
     894:	3000      	adds	r0, #0
     896:	bf18      	it	ne
     898:	2001      	movne	r0, #1
     89a:	4b05      	ldr	r3, [pc, #20]	; (8b0 <usart_sync_enable+0x24>)
     89c:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     89e:	f104 0008 	add.w	r0, r4, #8
     8a2:	4b04      	ldr	r3, [pc, #16]	; (8b4 <usart_sync_enable+0x28>)
     8a4:	4798      	blx	r3
}
     8a6:	2000      	movs	r0, #0
     8a8:	bd10      	pop	{r4, pc}
     8aa:	bf00      	nop
     8ac:	00003a40 	.word	0x00003a40
     8b0:	000008b9 	.word	0x000008b9
     8b4:	00000ba9 	.word	0x00000ba9

000008b8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8b8:	b900      	cbnz	r0, 8bc <assert+0x4>
		__asm("BKPT #0");
     8ba:	be00      	bkpt	0x0000
     8bc:	4770      	bx	lr
	...

000008c0 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     8c0:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     8c2:	4a06      	ldr	r2, [pc, #24]	; (8dc <_sbrk+0x1c>)
     8c4:	6812      	ldr	r2, [r2, #0]
     8c6:	b122      	cbz	r2, 8d2 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     8c8:	4a04      	ldr	r2, [pc, #16]	; (8dc <_sbrk+0x1c>)
     8ca:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     8cc:	4403      	add	r3, r0
     8ce:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     8d0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     8d2:	4903      	ldr	r1, [pc, #12]	; (8e0 <_sbrk+0x20>)
     8d4:	4a01      	ldr	r2, [pc, #4]	; (8dc <_sbrk+0x1c>)
     8d6:	6011      	str	r1, [r2, #0]
     8d8:	e7f6      	b.n	8c8 <_sbrk+0x8>
     8da:	bf00      	nop
     8dc:	200000c4 	.word	0x200000c4
     8e0:	2000ee90 	.word	0x2000ee90

000008e4 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     8e4:	f04f 30ff 	mov.w	r0, #4294967295
     8e8:	4770      	bx	lr

000008ea <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     8ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     8ee:	604b      	str	r3, [r1, #4]

	return 0;
}
     8f0:	2000      	movs	r0, #0
     8f2:	4770      	bx	lr

000008f4 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     8f4:	2001      	movs	r0, #1
     8f6:	4770      	bx	lr

000008f8 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     8f8:	2000      	movs	r0, #0
     8fa:	4770      	bx	lr

000008fc <_get_cycles_for_ms>:
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
	case 5:
		return (ms * (freq / 100) + 29) / 30;
     8fc:	f240 1347 	movw	r3, #327	; 0x147
     900:	fb03 f000 	mul.w	r0, r3, r0
     904:	301d      	adds	r0, #29
     906:	4b02      	ldr	r3, [pc, #8]	; (910 <_get_cycles_for_ms+0x14>)
     908:	fba3 3000 	umull	r3, r0, r3, r0
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     90c:	0900      	lsrs	r0, r0, #4
     90e:	4770      	bx	lr
     910:	88888889 	.word	0x88888889
     914:	00000000 	.word	0x00000000

00000918 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     918:	3901      	subs	r1, #1
     91a:	d8fd      	bhi.n	918 <_delay_cycles>
     91c:	4770      	bx	lr
     91e:	bf00      	nop

00000920 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     920:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     922:	4a09      	ldr	r2, [pc, #36]	; (948 <_init_chip+0x28>)
     924:	8813      	ldrh	r3, [r2, #0]
     926:	b29b      	uxth	r3, r3
     928:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
     92c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     92e:	4b07      	ldr	r3, [pc, #28]	; (94c <_init_chip+0x2c>)
     930:	4798      	blx	r3
	_oscctrl_init_sources();
     932:	4b07      	ldr	r3, [pc, #28]	; (950 <_init_chip+0x30>)
     934:	4798      	blx	r3
	_mclk_init();
     936:	4b07      	ldr	r3, [pc, #28]	; (954 <_init_chip+0x34>)
     938:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     93a:	4b07      	ldr	r3, [pc, #28]	; (958 <_init_chip+0x38>)
     93c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     93e:	f640 70ff 	movw	r0, #4095	; 0xfff
     942:	4b06      	ldr	r3, [pc, #24]	; (95c <_init_chip+0x3c>)
     944:	4798      	blx	r3
     946:	bd08      	pop	{r3, pc}
     948:	41004000 	.word	0x41004000
     94c:	00000991 	.word	0x00000991
     950:	000009b1 	.word	0x000009b1
     954:	00000985 	.word	0x00000985
     958:	000009b3 	.word	0x000009b3
     95c:	00000961 	.word	0x00000961

00000960 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     960:	f010 0f01 	tst.w	r0, #1
     964:	d008      	beq.n	978 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     966:	4a05      	ldr	r2, [pc, #20]	; (97c <_gclk_init_generators_by_fref+0x1c>)
     968:	4b05      	ldr	r3, [pc, #20]	; (980 <_gclk_init_generators_by_fref+0x20>)
     96a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     96c:	4b04      	ldr	r3, [pc, #16]	; (980 <_gclk_init_generators_by_fref+0x20>)
     96e:	685a      	ldr	r2, [r3, #4]
     970:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     974:	421a      	tst	r2, r3
     976:	d1f9      	bne.n	96c <_gclk_init_generators_by_fref+0xc>
     978:	4770      	bx	lr
     97a:	bf00      	nop
     97c:	00010105 	.word	0x00010105
     980:	40001c00 	.word	0x40001c00

00000984 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     984:	2201      	movs	r2, #1
     986:	4b01      	ldr	r3, [pc, #4]	; (98c <_mclk_init+0x8>)
     988:	715a      	strb	r2, [r3, #5]
     98a:	4770      	bx	lr
     98c:	40000800 	.word	0x40000800

00000990 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     990:	4b06      	ldr	r3, [pc, #24]	; (9ac <_osc32kctrl_init_sources+0x1c>)
     992:	f242 0286 	movw	r2, #8326	; 0x2086
     996:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     998:	2200      	movs	r2, #0
     99a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     99c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     99e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     9a0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     9a4:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     9a6:	2201      	movs	r2, #1
     9a8:	741a      	strb	r2, [r3, #16]
     9aa:	4770      	bx	lr
     9ac:	40001400 	.word	0x40001400

000009b0 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     9b0:	4770      	bx	lr

000009b2 <_oscctrl_init_referenced_generators>:

	(void)hw;
}

void _oscctrl_init_referenced_generators(void)
{
     9b2:	4770      	bx	lr

000009b4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     9b4:	b500      	push	{lr}
     9b6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     9b8:	4b0d      	ldr	r3, [pc, #52]	; (9f0 <RAMECC_Handler+0x3c>)
     9ba:	789b      	ldrb	r3, [r3, #2]
     9bc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     9be:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     9c0:	9b01      	ldr	r3, [sp, #4]
     9c2:	f013 0f02 	tst.w	r3, #2
     9c6:	d006      	beq.n	9d6 <RAMECC_Handler+0x22>
     9c8:	4b0a      	ldr	r3, [pc, #40]	; (9f4 <RAMECC_Handler+0x40>)
     9ca:	681b      	ldr	r3, [r3, #0]
     9cc:	b11b      	cbz	r3, 9d6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     9ce:	4a08      	ldr	r2, [pc, #32]	; (9f0 <RAMECC_Handler+0x3c>)
     9d0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     9d2:	4798      	blx	r3
     9d4:	e009      	b.n	9ea <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     9d6:	9b01      	ldr	r3, [sp, #4]
     9d8:	f013 0f01 	tst.w	r3, #1
     9dc:	d005      	beq.n	9ea <RAMECC_Handler+0x36>
     9de:	4b05      	ldr	r3, [pc, #20]	; (9f4 <RAMECC_Handler+0x40>)
     9e0:	685b      	ldr	r3, [r3, #4]
     9e2:	b113      	cbz	r3, 9ea <RAMECC_Handler+0x36>
     9e4:	4a02      	ldr	r2, [pc, #8]	; (9f0 <RAMECC_Handler+0x3c>)
     9e6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     9e8:	4798      	blx	r3
	} else {
		return;
	}
}
     9ea:	b003      	add	sp, #12
     9ec:	f85d fb04 	ldr.w	pc, [sp], #4
     9f0:	41020000 	.word	0x41020000
     9f4:	20002e70 	.word	0x20002e70

000009f8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     9f8:	b470      	push	{r4, r5, r6}
     9fa:	b089      	sub	sp, #36	; 0x24
     9fc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     9fe:	466c      	mov	r4, sp
     a00:	4d0c      	ldr	r5, [pc, #48]	; (a34 <_sercom_get_hardware_index+0x3c>)
     a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     a06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     a0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a0e:	2000      	movs	r0, #0
     a10:	2807      	cmp	r0, #7
     a12:	d80a      	bhi.n	a2a <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     a14:	ab08      	add	r3, sp, #32
     a16:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     a1a:	f853 3c20 	ldr.w	r3, [r3, #-32]
     a1e:	42b3      	cmp	r3, r6
     a20:	d001      	beq.n	a26 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a22:	3001      	adds	r0, #1
     a24:	e7f4      	b.n	a10 <_sercom_get_hardware_index+0x18>
			return i;
     a26:	b2c0      	uxtb	r0, r0
     a28:	e000      	b.n	a2c <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
     a2a:	2000      	movs	r0, #0
}
     a2c:	b009      	add	sp, #36	; 0x24
     a2e:	bc70      	pop	{r4, r5, r6}
     a30:	4770      	bx	lr
     a32:	bf00      	nop
     a34:	00003a5c 	.word	0x00003a5c

00000a38 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     a38:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     a3a:	4b0c      	ldr	r3, [pc, #48]	; (a6c <_get_sercom_index+0x34>)
     a3c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     a3e:	2300      	movs	r3, #0
     a40:	b143      	cbz	r3, a54 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     a42:	f240 2247 	movw	r2, #583	; 0x247
     a46:	490a      	ldr	r1, [pc, #40]	; (a70 <_get_sercom_index+0x38>)
     a48:	2000      	movs	r0, #0
     a4a:	4b0a      	ldr	r3, [pc, #40]	; (a74 <_get_sercom_index+0x3c>)
     a4c:	4798      	blx	r3
	return 0;
     a4e:	2300      	movs	r3, #0
}
     a50:	4618      	mov	r0, r3
     a52:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
     a54:	eb03 0243 	add.w	r2, r3, r3, lsl #1
     a58:	00d1      	lsls	r1, r2, #3
     a5a:	4a07      	ldr	r2, [pc, #28]	; (a78 <_get_sercom_index+0x40>)
     a5c:	440a      	add	r2, r1
     a5e:	f892 2020 	ldrb.w	r2, [r2, #32]
     a62:	4290      	cmp	r0, r2
     a64:	d0f4      	beq.n	a50 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     a66:	3301      	adds	r3, #1
     a68:	b2db      	uxtb	r3, r3
     a6a:	e7e9      	b.n	a40 <_get_sercom_index+0x8>
     a6c:	000009f9 	.word	0x000009f9
     a70:	00003ad0 	.word	0x00003ad0
     a74:	000008b9 	.word	0x000008b9
     a78:	00003a5c 	.word	0x00003a5c

00000a7c <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     a7c:	b538      	push	{r3, r4, r5, lr}
     a7e:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
     a80:	4b3c      	ldr	r3, [pc, #240]	; (b74 <_usart_init+0xf8>)
     a82:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     a84:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     a86:	f013 0f01 	tst.w	r3, #1
     a8a:	d122      	bne.n	ad2 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     a8c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     a90:	00da      	lsls	r2, r3, #3
     a92:	4b39      	ldr	r3, [pc, #228]	; (b78 <_usart_init+0xfc>)
     a94:	4413      	add	r3, r2
     a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     a98:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a9c:	69e3      	ldr	r3, [r4, #28]
     a9e:	f013 0f03 	tst.w	r3, #3
     aa2:	d1fb      	bne.n	a9c <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     aa4:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     aa6:	f013 0f02 	tst.w	r3, #2
     aaa:	d00b      	beq.n	ac4 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     aac:	6823      	ldr	r3, [r4, #0]
     aae:	f023 0302 	bic.w	r3, r3, #2
     ab2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ab4:	69e3      	ldr	r3, [r4, #28]
     ab6:	f013 0f03 	tst.w	r3, #3
     aba:	d1fb      	bne.n	ab4 <_usart_init+0x38>
     abc:	69e3      	ldr	r3, [r4, #28]
     abe:	f013 0f02 	tst.w	r3, #2
     ac2:	d1fb      	bne.n	abc <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     ac4:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     ac8:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     aca:	69e3      	ldr	r3, [r4, #28]
     acc:	f013 0f03 	tst.w	r3, #3
     ad0:	d1fb      	bne.n	aca <_usart_init+0x4e>
     ad2:	69e3      	ldr	r3, [r4, #28]
     ad4:	f013 0f01 	tst.w	r3, #1
     ad8:	d1fb      	bne.n	ad2 <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     ada:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     ade:	00da      	lsls	r2, r3, #3
     ae0:	4b25      	ldr	r3, [pc, #148]	; (b78 <_usart_init+0xfc>)
     ae2:	4413      	add	r3, r2
     ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     ae6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     ae8:	69e3      	ldr	r3, [r4, #28]
     aea:	f013 0f03 	tst.w	r3, #3
     aee:	d1fb      	bne.n	ae8 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     af0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     af4:	00da      	lsls	r2, r3, #3
     af6:	4b20      	ldr	r3, [pc, #128]	; (b78 <_usart_init+0xfc>)
     af8:	4413      	add	r3, r2
     afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     afc:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     afe:	69e3      	ldr	r3, [r4, #28]
     b00:	f013 0f1f 	tst.w	r3, #31
     b04:	d1fb      	bne.n	afe <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     b06:	0042      	lsls	r2, r0, #1
     b08:	4402      	add	r2, r0
     b0a:	00d1      	lsls	r1, r2, #3
     b0c:	4b1a      	ldr	r3, [pc, #104]	; (b78 <_usart_init+0xfc>)
     b0e:	440b      	add	r3, r1
     b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     b12:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b16:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     b1a:	d10a      	bne.n	b32 <_usart_init+0xb6>
     b1c:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
     b20:	d107      	bne.n	b32 <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     b22:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     b26:	00da      	lsls	r2, r3, #3
     b28:	4b13      	ldr	r3, [pc, #76]	; (b78 <_usart_init+0xfc>)
     b2a:	4413      	add	r3, r2
     b2c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     b2e:	81a3      	strh	r3, [r4, #12]
     b30:	e00f      	b.n	b52 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     b32:	0042      	lsls	r2, r0, #1
     b34:	4402      	add	r2, r0
     b36:	00d1      	lsls	r1, r2, #3
     b38:	4b0f      	ldr	r3, [pc, #60]	; (b78 <_usart_init+0xfc>)
     b3a:	440b      	add	r3, r1
     b3c:	8e19      	ldrh	r1, [r3, #48]	; 0x30
     b3e:	89a2      	ldrh	r2, [r4, #12]
     b40:	f361 020c 	bfi	r2, r1, #0, #13
     b44:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     b46:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
     b4a:	89a3      	ldrh	r3, [r4, #12]
     b4c:	f362 334f 	bfi	r3, r2, #13, #3
     b50:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     b52:	4a09      	ldr	r2, [pc, #36]	; (b78 <_usart_init+0xfc>)
     b54:	0043      	lsls	r3, r0, #1
     b56:	181d      	adds	r5, r3, r0
     b58:	00e9      	lsls	r1, r5, #3
     b5a:	460d      	mov	r5, r1
     b5c:	4411      	add	r1, r2
     b5e:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     b62:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     b64:	442a      	add	r2, r5
     b66:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     b6a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
     b6e:	2000      	movs	r0, #0
     b70:	bd38      	pop	{r3, r4, r5, pc}
     b72:	bf00      	nop
     b74:	00000a39 	.word	0x00000a39
     b78:	00003a5c 	.word	0x00003a5c

00000b7c <_usart_sync_init>:
{
     b7c:	b538      	push	{r3, r4, r5, lr}
     b7e:	460c      	mov	r4, r1
	ASSERT(device);
     b80:	4605      	mov	r5, r0
     b82:	22bb      	movs	r2, #187	; 0xbb
     b84:	4905      	ldr	r1, [pc, #20]	; (b9c <_usart_sync_init+0x20>)
     b86:	3000      	adds	r0, #0
     b88:	bf18      	it	ne
     b8a:	2001      	movne	r0, #1
     b8c:	4b04      	ldr	r3, [pc, #16]	; (ba0 <_usart_sync_init+0x24>)
     b8e:	4798      	blx	r3
	device->hw = hw;
     b90:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     b92:	4620      	mov	r0, r4
     b94:	4b03      	ldr	r3, [pc, #12]	; (ba4 <_usart_sync_init+0x28>)
     b96:	4798      	blx	r3
}
     b98:	bd38      	pop	{r3, r4, r5, pc}
     b9a:	bf00      	nop
     b9c:	00003ad0 	.word	0x00003ad0
     ba0:	000008b9 	.word	0x000008b9
     ba4:	00000a7d 	.word	0x00000a7d

00000ba8 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     ba8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     baa:	6813      	ldr	r3, [r2, #0]
     bac:	f043 0302 	orr.w	r3, r3, #2
     bb0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bb2:	69d3      	ldr	r3, [r2, #28]
     bb4:	f013 0f03 	tst.w	r3, #3
     bb8:	d1fb      	bne.n	bb2 <_usart_sync_enable+0xa>
}
     bba:	4770      	bx	lr

00000bbc <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     bbc:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     bbe:	6299      	str	r1, [r3, #40]	; 0x28
     bc0:	4770      	bx	lr

00000bc2 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     bc2:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     bc4:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     bc6:	b2c0      	uxtb	r0, r0
     bc8:	4770      	bx	lr

00000bca <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     bca:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     bcc:	7e18      	ldrb	r0, [r3, #24]
}
     bce:	f000 0001 	and.w	r0, r0, #1
     bd2:	4770      	bx	lr

00000bd4 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     bd4:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     bd6:	7e18      	ldrb	r0, [r3, #24]
}
     bd8:	f3c0 0040 	ubfx	r0, r0, #1, #1
     bdc:	4770      	bx	lr

00000bde <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     bde:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     be0:	7e18      	ldrb	r0, [r3, #24]
}
     be2:	f3c0 0080 	ubfx	r0, r0, #2, #1
     be6:	4770      	bx	lr

00000be8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
     be8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
     bea:	4604      	mov	r4, r0
     bec:	b338      	cbz	r0, c3e <_wdt_init+0x56>
     bee:	6803      	ldr	r3, [r0, #0]
     bf0:	b31b      	cbz	r3, c3a <_wdt_init+0x52>
     bf2:	2001      	movs	r0, #1
     bf4:	2250      	movs	r2, #80	; 0x50
     bf6:	4916      	ldr	r1, [pc, #88]	; (c50 <_wdt_init+0x68>)
     bf8:	4b16      	ldr	r3, [pc, #88]	; (c54 <_wdt_init+0x6c>)
     bfa:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
     bfc:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
     bfe:	689a      	ldr	r2, [r3, #8]
     c00:	f012 0f0e 	tst.w	r2, #14
     c04:	d1fb      	bne.n	bfe <_wdt_init+0x16>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
     c06:	781a      	ldrb	r2, [r3, #0]
     c08:	09d2      	lsrs	r2, r2, #7
     c0a:	d11a      	bne.n	c42 <_wdt_init+0x5a>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
     c0c:	689a      	ldr	r2, [r3, #8]
     c0e:	f012 0f0e 	tst.w	r2, #14
     c12:	d1fb      	bne.n	c0c <_wdt_init+0x24>
	tmp = ((Wdt *)hw)->CTRLA.reg;
     c14:	781a      	ldrb	r2, [r3, #0]
     c16:	f012 0f02 	tst.w	r2, #2
     c1a:	d115      	bne.n	c48 <_wdt_init+0x60>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
     c1c:	781a      	ldrb	r2, [r3, #0]
     c1e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     c22:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
     c24:	689a      	ldr	r2, [r3, #8]
     c26:	f012 0f0e 	tst.w	r2, #14
     c2a:	d1fb      	bne.n	c24 <_wdt_init+0x3c>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
     c2c:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
     c2e:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
     c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
     c34:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
     c36:	2000      	movs	r0, #0
     c38:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
     c3a:	2000      	movs	r0, #0
     c3c:	e7da      	b.n	bf4 <_wdt_init+0xc>
     c3e:	2000      	movs	r0, #0
     c40:	e7d8      	b.n	bf4 <_wdt_init+0xc>
		return ERR_DENIED;
     c42:	f06f 0010 	mvn.w	r0, #16
     c46:	bd10      	pop	{r4, pc}
     c48:	f06f 0010 	mvn.w	r0, #16
}
     c4c:	bd10      	pop	{r4, pc}
     c4e:	bf00      	nop
     c50:	00003aec 	.word	0x00003aec
     c54:	000008b9 	.word	0x000008b9

00000c58 <setColorRGB>:
uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
	fore_Color_High = ((r&248)|g>>5);
     c58:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
     c5c:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
     c60:	4b04      	ldr	r3, [pc, #16]	; (c74 <setColorRGB+0x1c>)
     c62:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
     c64:	00c9      	lsls	r1, r1, #3
     c66:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
     c6a:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
     c6e:	4b02      	ldr	r3, [pc, #8]	; (c78 <setColorRGB+0x20>)
     c70:	8019      	strh	r1, [r3, #0]
     c72:	4770      	bx	lr
     c74:	20002e82 	.word	0x20002e82
     c78:	20002e84 	.word	0x20002e84

00000c7c <setColorHex>:
}

void setColorHex(uint16_t color)
{
	fore_Color_High = (color >> 8);
     c7c:	0a02      	lsrs	r2, r0, #8
     c7e:	4b03      	ldr	r3, [pc, #12]	; (c8c <setColorHex+0x10>)
     c80:	801a      	strh	r2, [r3, #0]
	fore_Color_Low = (color & 0xFF);
     c82:	b2c0      	uxtb	r0, r0
     c84:	4b02      	ldr	r3, [pc, #8]	; (c90 <setColorHex+0x14>)
     c86:	8018      	strh	r0, [r3, #0]
     c88:	4770      	bx	lr
     c8a:	bf00      	nop
     c8c:	20002e82 	.word	0x20002e82
     c90:	20002e84 	.word	0x20002e84

00000c94 <setBackColorRGB>:
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
	back_Color_High = ((r&248)|g>>5);
     c94:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
     c98:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
     c9c:	4b04      	ldr	r3, [pc, #16]	; (cb0 <setBackColorRGB+0x1c>)
     c9e:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
     ca0:	00c9      	lsls	r1, r1, #3
     ca2:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
     ca6:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <setBackColorRGB+0x20>)
     cac:	8019      	strh	r1, [r3, #0]
     cae:	4770      	bx	lr
     cb0:	20002e86 	.word	0x20002e86
     cb4:	20002e80 	.word	0x20002e80

00000cb8 <setBackColorHex>:
}

void setBackColorHex(uint16_t color)
{
	back_Color_High = (color >> 8);
     cb8:	0a02      	lsrs	r2, r0, #8
     cba:	4b03      	ldr	r3, [pc, #12]	; (cc8 <setBackColorHex+0x10>)
     cbc:	801a      	strh	r2, [r3, #0]
	back_Color_Low = (color & 0xFF);
     cbe:	b2c0      	uxtb	r0, r0
     cc0:	4b02      	ldr	r3, [pc, #8]	; (ccc <setBackColorHex+0x14>)
     cc2:	8018      	strh	r0, [r3, #0]
     cc4:	4770      	bx	lr
     cc6:	bf00      	nop
     cc8:	20002e86 	.word	0x20002e86
     ccc:	20002e80 	.word	0x20002e80

00000cd0 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
     cd0:	b430      	push	{r4, r5}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
     cd2:	f64f 74ff 	movw	r4, #65535	; 0xffff
     cd6:	4b1a      	ldr	r3, [pc, #104]	; (d40 <LCD_Fast_Fill+0x70>)
     cd8:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
     cda:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
     cde:	3304      	adds	r3, #4
     ce0:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
     ce2:	4615      	mov	r5, r2
     ce4:	2a00      	cmp	r2, #0
     ce6:	db02      	blt.n	cee <LCD_Fast_Fill+0x1e>
     ce8:	112d      	asrs	r5, r5, #4
	for (int i=0; i<blocks; i++)
     cea:	2400      	movs	r4, #0
     cec:	e00c      	b.n	d08 <LCD_Fast_Fill+0x38>
	blocks = pix/16;
     cee:	f102 050f 	add.w	r5, r2, #15
     cf2:	e7f9      	b.n	ce8 <LCD_Fast_Fill+0x18>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
     cf4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     cf8:	4811      	ldr	r0, [pc, #68]	; (d40 <LCD_Fast_Fill+0x70>)
     cfa:	6001      	str	r1, [r0, #0]
			REG_PORT_OUTSET1 = LCD_WR;
     cfc:	3004      	adds	r0, #4
     cfe:	6001      	str	r1, [r0, #0]
		for (int j=0; j<16; j++)
     d00:	3301      	adds	r3, #1
     d02:	2b0f      	cmp	r3, #15
     d04:	ddf6      	ble.n	cf4 <LCD_Fast_Fill+0x24>
	for (int i=0; i<blocks; i++)
     d06:	3401      	adds	r4, #1
     d08:	42ac      	cmp	r4, r5
     d0a:	da01      	bge.n	d10 <LCD_Fast_Fill+0x40>
     d0c:	2300      	movs	r3, #0
     d0e:	e7f8      	b.n	d02 <LCD_Fast_Fill+0x32>
		}
	}
	
	if ((pix % 16) != 0)
     d10:	f012 0f0f 	tst.w	r2, #15
     d14:	d012      	beq.n	d3c <LCD_Fast_Fill+0x6c>
     d16:	2000      	movs	r0, #0
     d18:	e006      	b.n	d28 <LCD_Fast_Fill+0x58>
	for (int i=0; i<(pix % 16)+1; i++)
	{
		REG_PORT_OUTCLR1 = LCD_WR;
     d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     d1e:	4908      	ldr	r1, [pc, #32]	; (d40 <LCD_Fast_Fill+0x70>)
     d20:	600b      	str	r3, [r1, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     d22:	3104      	adds	r1, #4
     d24:	600b      	str	r3, [r1, #0]
	for (int i=0; i<(pix % 16)+1; i++)
     d26:	3001      	adds	r0, #1
     d28:	4251      	negs	r1, r2
     d2a:	f002 030f 	and.w	r3, r2, #15
     d2e:	f001 010f 	and.w	r1, r1, #15
     d32:	bf58      	it	pl
     d34:	424b      	negpl	r3, r1
     d36:	3301      	adds	r3, #1
     d38:	4298      	cmp	r0, r3
     d3a:	dbee      	blt.n	d1a <LCD_Fast_Fill+0x4a>
	}
}
     d3c:	bc30      	pop	{r4, r5}
     d3e:	4770      	bx	lr
     d40:	41008094 	.word	0x41008094

00000d44 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
     d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     d48:	4681      	mov	r9, r0
     d4a:	460f      	mov	r7, r1
     d4c:	4690      	mov	r8, r2
     d4e:	461e      	mov	r6, r3
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
     d50:	2100      	movs	r1, #0
     d52:	202a      	movs	r0, #42	; 0x2a
     d54:	4c18      	ldr	r4, [pc, #96]	; (db8 <setXY+0x74>)
     d56:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
     d58:	ea4f 2019 	mov.w	r0, r9, lsr #8
     d5c:	4d17      	ldr	r5, [pc, #92]	; (dbc <setXY+0x78>)
     d5e:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
     d60:	2101      	movs	r1, #1
     d62:	202a      	movs	r0, #42	; 0x2a
     d64:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
     d66:	fa5f f089 	uxtb.w	r0, r9
     d6a:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
     d6c:	2102      	movs	r1, #2
     d6e:	202a      	movs	r0, #42	; 0x2a
     d70:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
     d72:	ea4f 2018 	mov.w	r0, r8, lsr #8
     d76:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
     d78:	2103      	movs	r1, #3
     d7a:	202a      	movs	r0, #42	; 0x2a
     d7c:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
     d7e:	fa5f f088 	uxtb.w	r0, r8
     d82:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
     d84:	2100      	movs	r1, #0
     d86:	202b      	movs	r0, #43	; 0x2b
     d88:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
     d8a:	0a38      	lsrs	r0, r7, #8
     d8c:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
     d8e:	2101      	movs	r1, #1
     d90:	202b      	movs	r0, #43	; 0x2b
     d92:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
     d94:	b2f8      	uxtb	r0, r7
     d96:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
     d98:	2102      	movs	r1, #2
     d9a:	202b      	movs	r0, #43	; 0x2b
     d9c:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
     d9e:	0a30      	lsrs	r0, r6, #8
     da0:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
     da2:	2103      	movs	r1, #3
     da4:	202b      	movs	r0, #43	; 0x2b
     da6:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
     da8:	b2f0      	uxtb	r0, r6
     daa:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
     dac:	2100      	movs	r1, #0
     dae:	202c      	movs	r0, #44	; 0x2c
     db0:	47a0      	blx	r4
     db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     db6:	bf00      	nop
     db8:	00000ecd 	.word	0x00000ecd
     dbc:	00000efd 	.word	0x00000efd

00000dc0 <fillRect>:
{
     dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     dc4:	4606      	mov	r6, r0
     dc6:	4689      	mov	r9, r1
     dc8:	4615      	mov	r5, r2
     dca:	461c      	mov	r4, r3
	if (x1>x2)
     dcc:	4290      	cmp	r0, r2
     dce:	dc01      	bgt.n	dd4 <fillRect+0x14>
     dd0:	4605      	mov	r5, r0
     dd2:	4616      	mov	r6, r2
	if (y1>y2)
     dd4:	45a1      	cmp	r9, r4
     dd6:	dd1f      	ble.n	e18 <fillRect+0x58>
	REG_PORT_OUTCLR1 = LCD_CS;
     dd8:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
     ddc:	4b10      	ldr	r3, [pc, #64]	; (e20 <fillRect+0x60>)
     dde:	f8c3 8000 	str.w	r8, [r3]
	setXY(x1, y1, x2, y2);
     de2:	b2a3      	uxth	r3, r4
     de4:	b2aa      	uxth	r2, r5
     de6:	fa1f f189 	uxth.w	r1, r9
     dea:	b2b0      	uxth	r0, r6
     dec:	4f0d      	ldr	r7, [pc, #52]	; (e24 <fillRect+0x64>)
     dee:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
     df0:	4f0d      	ldr	r7, [pc, #52]	; (e28 <fillRect+0x68>)
     df2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
     df6:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
     df8:	1bad      	subs	r5, r5, r6
     dfa:	eba4 0409 	sub.w	r4, r4, r9
     dfe:	1c62      	adds	r2, r4, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
     e00:	fb05 2202 	mla	r2, r5, r2, r2
     e04:	4b09      	ldr	r3, [pc, #36]	; (e2c <fillRect+0x6c>)
     e06:	8819      	ldrh	r1, [r3, #0]
     e08:	4b09      	ldr	r3, [pc, #36]	; (e30 <fillRect+0x70>)
     e0a:	8818      	ldrh	r0, [r3, #0]
     e0c:	4b09      	ldr	r3, [pc, #36]	; (e34 <fillRect+0x74>)
     e0e:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
     e10:	f8c7 8000 	str.w	r8, [r7]
     e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (y1>y2)
     e18:	4633      	mov	r3, r6
     e1a:	462e      	mov	r6, r5
     e1c:	461d      	mov	r5, r3
     e1e:	e7db      	b.n	dd8 <fillRect+0x18>
     e20:	41008094 	.word	0x41008094
     e24:	00000d45 	.word	0x00000d45
     e28:	41008098 	.word	0x41008098
     e2c:	20002e84 	.word	0x20002e84
     e30:	20002e82 	.word	0x20002e82
     e34:	00000cd1 	.word	0x00000cd1

00000e38 <clrXY>:
{
     e38:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
     e3a:	4a04      	ldr	r2, [pc, #16]	; (e4c <clrXY+0x14>)
     e3c:	8813      	ldrh	r3, [r2, #0]
     e3e:	8852      	ldrh	r2, [r2, #2]
     e40:	2100      	movs	r1, #0
     e42:	4608      	mov	r0, r1
     e44:	4c02      	ldr	r4, [pc, #8]	; (e50 <clrXY+0x18>)
     e46:	47a0      	blx	r4
     e48:	bd10      	pop	{r4, pc}
     e4a:	bf00      	nop
     e4c:	20000000 	.word	0x20000000
     e50:	00000d45 	.word	0x00000d45

00000e54 <clrScr>:
{
     e54:	b508      	push	{r3, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
     e56:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     e5a:	4b02      	ldr	r3, [pc, #8]	; (e64 <clrScr+0x10>)
     e5c:	601a      	str	r2, [r3, #0]
	clrXY();
     e5e:	4b02      	ldr	r3, [pc, #8]	; (e68 <clrScr+0x14>)
     e60:	4798      	blx	r3
     e62:	bd08      	pop	{r3, pc}
     e64:	41008094 	.word	0x41008094
     e68:	00000e39 	.word	0x00000e39

00000e6c <setPixel>:
}

void setPixel(uint16_t color)
{
     e6c:	b508      	push	{r3, lr}
	//it sets it to a 16-bit color.
	//LCD_Write_DATA16((color<<8),(color&0xFF)); 
	LCD_Write_DATA16((color>>8),(color&0xFF));
     e6e:	b2c1      	uxtb	r1, r0
     e70:	0a00      	lsrs	r0, r0, #8
     e72:	4b01      	ldr	r3, [pc, #4]	; (e78 <setPixel+0xc>)
     e74:	4798      	blx	r3
     e76:	bd08      	pop	{r3, pc}
     e78:	00000ee5 	.word	0x00000ee5

00000e7c <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
     e7c:	b510      	push	{r4, lr}
	setColorRGB(0,0,0);
     e7e:	2200      	movs	r2, #0
     e80:	4611      	mov	r1, r2
     e82:	4610      	mov	r0, r2
     e84:	4b04      	ldr	r3, [pc, #16]	; (e98 <clearScreen+0x1c>)
     e86:	4798      	blx	r3
	fillRect(0,0,display_Y_size,display_X_size);
     e88:	4a04      	ldr	r2, [pc, #16]	; (e9c <clearScreen+0x20>)
     e8a:	8853      	ldrh	r3, [r2, #2]
     e8c:	8812      	ldrh	r2, [r2, #0]
     e8e:	2100      	movs	r1, #0
     e90:	4608      	mov	r0, r1
     e92:	4c03      	ldr	r4, [pc, #12]	; (ea0 <clearScreen+0x24>)
     e94:	47a0      	blx	r4
     e96:	bd10      	pop	{r4, pc}
     e98:	00000c59 	.word	0x00000c59
     e9c:	20000000 	.word	0x20000000
     ea0:	00000dc1 	.word	0x00000dc1

00000ea4 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
     ea4:	b410      	push	{r4}
	REG_PORT_OUTCLR1 = 0x0000ffff;
     ea6:	4c07      	ldr	r4, [pc, #28]	; (ec4 <LCD_Write_Bus+0x20>)
     ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
     eac:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
     eae:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
     eb2:	4b05      	ldr	r3, [pc, #20]	; (ec8 <LCD_Write_Bus+0x24>)
     eb4:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
     eb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     eba:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
     ebc:	601a      	str	r2, [r3, #0]
}
     ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
     ec2:	4770      	bx	lr
     ec4:	41008094 	.word	0x41008094
     ec8:	41008098 	.word	0x41008098

00000ecc <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
     ecc:	b508      	push	{r3, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
     ece:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     ed2:	4b02      	ldr	r3, [pc, #8]	; (edc <LCD_Write_COM16+0x10>)
     ed4:	601a      	str	r2, [r3, #0]
	
	LCD_Write_Bus(VH,VL);
     ed6:	4b02      	ldr	r3, [pc, #8]	; (ee0 <LCD_Write_COM16+0x14>)
     ed8:	4798      	blx	r3
     eda:	bd08      	pop	{r3, pc}
     edc:	41008094 	.word	0x41008094
     ee0:	00000ea5 	.word	0x00000ea5

00000ee4 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
     ee4:	b508      	push	{r3, lr}
	REG_PORT_OUTSET1 = LCD_DC;
     ee6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     eea:	4b02      	ldr	r3, [pc, #8]	; (ef4 <LCD_Write_DATA16+0x10>)
     eec:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
     eee:	4b02      	ldr	r3, [pc, #8]	; (ef8 <LCD_Write_DATA16+0x14>)
     ef0:	4798      	blx	r3
     ef2:	bd08      	pop	{r3, pc}
     ef4:	41008098 	.word	0x41008098
     ef8:	00000ea5 	.word	0x00000ea5

00000efc <LCD_Write_DATA8>:
}

void LCD_Write_DATA8(char VL)
{
     efc:	b508      	push	{r3, lr}
	REG_PORT_OUTSET1 = LCD_DC;
     efe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     f02:	4b03      	ldr	r3, [pc, #12]	; (f10 <LCD_Write_DATA8+0x14>)
     f04:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
     f06:	4601      	mov	r1, r0
     f08:	2000      	movs	r0, #0
     f0a:	4b02      	ldr	r3, [pc, #8]	; (f14 <LCD_Write_DATA8+0x18>)
     f0c:	4798      	blx	r3
     f0e:	bd08      	pop	{r3, pc}
     f10:	41008098 	.word	0x41008098
     f14:	00000ea5 	.word	0x00000ea5

00000f18 <InitLCD>:
{
     f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
     f1c:	4b7f      	ldr	r3, [pc, #508]	; (111c <InitLCD+0x204>)
     f1e:	f64f 77ff 	movw	r7, #65535	; 0xffff
     f22:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
     f24:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
     f28:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
     f2a:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
     f2e:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
     f30:	f44f 3000 	mov.w	r0, #131072	; 0x20000
     f34:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
     f36:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
     f3a:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
     f3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     f40:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
     f42:	4c77      	ldr	r4, [pc, #476]	; (1120 <InitLCD+0x208>)
     f44:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
     f46:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
     f48:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
     f4a:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
     f4c:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
     f4e:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
     f50:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
     f52:	4f74      	ldr	r7, [pc, #464]	; (1124 <InitLCD+0x20c>)
     f54:	603a      	str	r2, [r7, #0]
	REG_PORT_OUTSET1 = LCD_Reset;
     f56:	603d      	str	r5, [r7, #0]
	delay_ms(5);
     f58:	2005      	movs	r0, #5
     f5a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 1134 <InitLCD+0x21c>
     f5e:	47c0      	blx	r8
	REG_PORT_OUTCLR1 = LCD_Reset;
     f60:	6025      	str	r5, [r4, #0]
	delay_ms(5);
     f62:	2005      	movs	r0, #5
     f64:	47c0      	blx	r8
	REG_PORT_OUTSET1 = LCD_Reset;
     f66:	603d      	str	r5, [r7, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
     f68:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
     f6a:	2400      	movs	r4, #0
     f6c:	e011      	b.n	f92 <InitLCD+0x7a>
		REG_PORT_OUTCLR1 = LCD_DC;
     f6e:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
     f72:	4b6b      	ldr	r3, [pc, #428]	; (1120 <InitLCD+0x208>)
     f74:	601e      	str	r6, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
     f76:	4b6c      	ldr	r3, [pc, #432]	; (1128 <InitLCD+0x210>)
     f78:	191d      	adds	r5, r3, r4
     f7a:	5d19      	ldrb	r1, [r3, r4]
     f7c:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
     f80:	4b6a      	ldr	r3, [pc, #424]	; (112c <InitLCD+0x214>)
     f82:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
     f84:	4b67      	ldr	r3, [pc, #412]	; (1124 <InitLCD+0x20c>)
     f86:	601e      	str	r6, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
     f88:	f895 0090 	ldrb.w	r0, [r5, #144]	; 0x90
     f8c:	4b68      	ldr	r3, [pc, #416]	; (1130 <InitLCD+0x218>)
     f8e:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
     f90:	3401      	adds	r4, #1
     f92:	2c45      	cmp	r4, #69	; 0x45
     f94:	ddeb      	ble.n	f6e <InitLCD+0x56>
     f96:	25d1      	movs	r5, #209	; 0xd1
     f98:	e00e      	b.n	fb8 <InitLCD+0xa0>
			LCD_Write_COM16(k,0x00);
     f9a:	2100      	movs	r1, #0
     f9c:	4628      	mov	r0, r5
     f9e:	4b63      	ldr	r3, [pc, #396]	; (112c <InitLCD+0x214>)
     fa0:	4798      	blx	r3
			LCD_Write_DATA8(beelzebub[l]);
     fa2:	4b61      	ldr	r3, [pc, #388]	; (1128 <InitLCD+0x210>)
     fa4:	4423      	add	r3, r4
     fa6:	f893 00d8 	ldrb.w	r0, [r3, #216]	; 0xd8
     faa:	4b61      	ldr	r3, [pc, #388]	; (1130 <InitLCD+0x218>)
     fac:	4798      	blx	r3
		for(int l = 0; l < 52; l++)
     fae:	3401      	adds	r4, #1
     fb0:	2c33      	cmp	r4, #51	; 0x33
     fb2:	ddf2      	ble.n	f9a <InitLCD+0x82>
	for(char k = 0xD1; k < 0xD6; k++)
     fb4:	3501      	adds	r5, #1
     fb6:	b2ed      	uxtb	r5, r5
     fb8:	2dd5      	cmp	r5, #213	; 0xd5
     fba:	d801      	bhi.n	fc0 <InitLCD+0xa8>
     fbc:	2400      	movs	r4, #0
     fbe:	e7f7      	b.n	fb0 <InitLCD+0x98>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
     fc0:	2100      	movs	r1, #0
     fc2:	20f0      	movs	r0, #240	; 0xf0
     fc4:	4c59      	ldr	r4, [pc, #356]	; (112c <InitLCD+0x214>)
     fc6:	47a0      	blx	r4
     fc8:	2055      	movs	r0, #85	; 0x55
     fca:	4d59      	ldr	r5, [pc, #356]	; (1130 <InitLCD+0x218>)
     fcc:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
     fce:	2101      	movs	r1, #1
     fd0:	20f0      	movs	r0, #240	; 0xf0
     fd2:	47a0      	blx	r4
     fd4:	20aa      	movs	r0, #170	; 0xaa
     fd6:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
     fd8:	2102      	movs	r1, #2
     fda:	20f0      	movs	r0, #240	; 0xf0
     fdc:	47a0      	blx	r4
     fde:	2052      	movs	r0, #82	; 0x52
     fe0:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
     fe2:	2103      	movs	r1, #3
     fe4:	20f0      	movs	r0, #240	; 0xf0
     fe6:	47a0      	blx	r4
     fe8:	2008      	movs	r0, #8
     fea:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
     fec:	2104      	movs	r1, #4
     fee:	20f0      	movs	r0, #240	; 0xf0
     ff0:	47a0      	blx	r4
     ff2:	2000      	movs	r0, #0
     ff4:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
     ff6:	2100      	movs	r1, #0
     ff8:	20b1      	movs	r0, #177	; 0xb1
     ffa:	47a0      	blx	r4
     ffc:	20cc      	movs	r0, #204	; 0xcc
     ffe:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    1000:	2101      	movs	r1, #1
    1002:	20b1      	movs	r0, #177	; 0xb1
    1004:	47a0      	blx	r4
    1006:	2000      	movs	r0, #0
    1008:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    100a:	2100      	movs	r1, #0
    100c:	20b5      	movs	r0, #181	; 0xb5
    100e:	47a0      	blx	r4
    1010:	2050      	movs	r0, #80	; 0x50
    1012:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    1014:	2100      	movs	r1, #0
    1016:	20b6      	movs	r0, #182	; 0xb6
    1018:	47a0      	blx	r4
    101a:	2005      	movs	r0, #5
    101c:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    101e:	2100      	movs	r1, #0
    1020:	20b7      	movs	r0, #183	; 0xb7
    1022:	47a0      	blx	r4
    1024:	2070      	movs	r0, #112	; 0x70
    1026:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    1028:	2101      	movs	r1, #1
    102a:	20b7      	movs	r0, #183	; 0xb7
    102c:	47a0      	blx	r4
    102e:	2070      	movs	r0, #112	; 0x70
    1030:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    1032:	2100      	movs	r1, #0
    1034:	20b8      	movs	r0, #184	; 0xb8
    1036:	47a0      	blx	r4
    1038:	2001      	movs	r0, #1
    103a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    103c:	2101      	movs	r1, #1
    103e:	20b8      	movs	r0, #184	; 0xb8
    1040:	47a0      	blx	r4
    1042:	2003      	movs	r0, #3
    1044:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    1046:	2102      	movs	r1, #2
    1048:	20b8      	movs	r0, #184	; 0xb8
    104a:	47a0      	blx	r4
    104c:	2003      	movs	r0, #3
    104e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    1050:	2103      	movs	r1, #3
    1052:	20b8      	movs	r0, #184	; 0xb8
    1054:	47a0      	blx	r4
    1056:	2003      	movs	r0, #3
    1058:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    105a:	2100      	movs	r1, #0
    105c:	20bc      	movs	r0, #188	; 0xbc
    105e:	47a0      	blx	r4
    1060:	2002      	movs	r0, #2
    1062:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    1064:	2101      	movs	r1, #1
    1066:	20bc      	movs	r0, #188	; 0xbc
    1068:	47a0      	blx	r4
    106a:	2000      	movs	r0, #0
    106c:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    106e:	2102      	movs	r1, #2
    1070:	20bc      	movs	r0, #188	; 0xbc
    1072:	47a0      	blx	r4
    1074:	2000      	movs	r0, #0
    1076:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    1078:	2100      	movs	r1, #0
    107a:	20c9      	movs	r0, #201	; 0xc9
    107c:	47a0      	blx	r4
    107e:	20d0      	movs	r0, #208	; 0xd0
    1080:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    1082:	2101      	movs	r1, #1
    1084:	20c9      	movs	r0, #201	; 0xc9
    1086:	47a0      	blx	r4
    1088:	2002      	movs	r0, #2
    108a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    108c:	2102      	movs	r1, #2
    108e:	20c9      	movs	r0, #201	; 0xc9
    1090:	47a0      	blx	r4
    1092:	2050      	movs	r0, #80	; 0x50
    1094:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    1096:	2103      	movs	r1, #3
    1098:	20c9      	movs	r0, #201	; 0xc9
    109a:	47a0      	blx	r4
    109c:	2050      	movs	r0, #80	; 0x50
    109e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    10a0:	2104      	movs	r1, #4
    10a2:	20c9      	movs	r0, #201	; 0xc9
    10a4:	47a0      	blx	r4
    10a6:	2050      	movs	r0, #80	; 0x50
    10a8:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    10aa:	2100      	movs	r1, #0
    10ac:	2035      	movs	r0, #53	; 0x35
    10ae:	47a0      	blx	r4
    10b0:	2000      	movs	r0, #0
    10b2:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    10b4:	2100      	movs	r1, #0
    10b6:	203a      	movs	r0, #58	; 0x3a
    10b8:	47a0      	blx	r4
    10ba:	2055      	movs	r0, #85	; 0x55
    10bc:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    10be:	2100      	movs	r1, #0
    10c0:	2036      	movs	r0, #54	; 0x36
    10c2:	47a0      	blx	r4
    10c4:	20e2      	movs	r0, #226	; 0xe2
    10c6:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    10c8:	2100      	movs	r1, #0
    10ca:	2011      	movs	r0, #17
    10cc:	47a0      	blx	r4
  	delay_ms(100);
    10ce:	2064      	movs	r0, #100	; 0x64
    10d0:	4e18      	ldr	r6, [pc, #96]	; (1134 <InitLCD+0x21c>)
    10d2:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    10d4:	2100      	movs	r1, #0
    10d6:	2029      	movs	r0, #41	; 0x29
    10d8:	47a0      	blx	r4
   	delay_ms(100);
    10da:	2064      	movs	r0, #100	; 0x64
    10dc:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    10de:	2100      	movs	r1, #0
    10e0:	2051      	movs	r0, #81	; 0x51
    10e2:	47a0      	blx	r4
    10e4:	20ff      	movs	r0, #255	; 0xff
    10e6:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    10e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    10ec:	4b0d      	ldr	r3, [pc, #52]	; (1124 <InitLCD+0x20c>)
    10ee:	601a      	str	r2, [r3, #0]
	clrScr();
    10f0:	4b11      	ldr	r3, [pc, #68]	; (1138 <InitLCD+0x220>)
    10f2:	4798      	blx	r3
	setColorRGB(0,0,0);
    10f4:	2200      	movs	r2, #0
    10f6:	4611      	mov	r1, r2
    10f8:	4610      	mov	r0, r2
    10fa:	4b10      	ldr	r3, [pc, #64]	; (113c <InitLCD+0x224>)
    10fc:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    10fe:	2200      	movs	r2, #0
    1100:	4611      	mov	r1, r2
    1102:	4610      	mov	r0, r2
    1104:	4b0e      	ldr	r3, [pc, #56]	; (1140 <InitLCD+0x228>)
    1106:	4798      	blx	r3
	fillRect(0,0,799,489);
    1108:	f240 13e9 	movw	r3, #489	; 0x1e9
    110c:	f240 321f 	movw	r2, #799	; 0x31f
    1110:	2100      	movs	r1, #0
    1112:	4608      	mov	r0, r1
    1114:	4c0b      	ldr	r4, [pc, #44]	; (1144 <InitLCD+0x22c>)
    1116:	47a0      	blx	r4
    1118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    111c:	41008088 	.word	0x41008088
    1120:	41008094 	.word	0x41008094
    1124:	41008098 	.word	0x41008098
    1128:	00003b04 	.word	0x00003b04
    112c:	00000ecd 	.word	0x00000ecd
    1130:	00000efd 	.word	0x00000efd
    1134:	000006ed 	.word	0x000006ed
    1138:	00000e55 	.word	0x00000e55
    113c:	00000c59 	.word	0x00000c59
    1140:	00000c95 	.word	0x00000c95
    1144:	00000dc1 	.word	0x00000dc1

00001148 <main>:
void setupBoard(void);



int main(void)
{
    1148:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    114a:	4b05      	ldr	r3, [pc, #20]	; (1160 <main+0x18>)
    114c:	4798      	blx	r3
	
	
	int count = 0;
	
	printf("hi\n");
    114e:	4805      	ldr	r0, [pc, #20]	; (1164 <main+0x1c>)
    1150:	4b05      	ldr	r3, [pc, #20]	; (1168 <main+0x20>)
    1152:	4798      	blx	r3
	InitLCD();
    1154:	4b05      	ldr	r3, [pc, #20]	; (116c <main+0x24>)
    1156:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
		//printf("%i",count);
		//count++;
		splashScreen();
    1158:	4b05      	ldr	r3, [pc, #20]	; (1170 <main+0x28>)
    115a:	4798      	blx	r3
    115c:	e7fc      	b.n	1158 <main+0x10>
    115e:	bf00      	nop
    1160:	000002d1 	.word	0x000002d1
    1164:	00003c10 	.word	0x00003c10
    1168:	000016ed 	.word	0x000016ed
    116c:	00000f19 	.word	0x00000f19
    1170:	00001285 	.word	0x00001285

00001174 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    1174:	b5f0      	push	{r4, r5, r6, r7, lr}
    1176:	b0c1      	sub	sp, #260	; 0x104
    1178:	4605      	mov	r5, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    117a:	4c3f      	ldr	r4, [pc, #252]	; (1278 <drawKare+0x104>)
    117c:	22d0      	movs	r2, #208	; 0xd0
    117e:	4621      	mov	r1, r4
    1180:	a80c      	add	r0, sp, #48	; 0x30
    1182:	4b3e      	ldr	r3, [pc, #248]	; (127c <drawKare+0x108>)
    1184:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    1186:	ae05      	add	r6, sp, #20
    1188:	f104 07d0 	add.w	r7, r4, #208	; 0xd0
    118c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    118e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1190:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    1194:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    1198:	466e      	mov	r6, sp
    119a:	34ec      	adds	r4, #236	; 0xec
    119c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    119e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    11a0:	6823      	ldr	r3, [r4, #0]
    11a2:	6033      	str	r3, [r6, #0]
	int offsetGraphicY = 150;
	int iSv = 2;				//an inverse scale factor

	
	
	for(int i = 0; i < 104; i = i+4)
    11a4:	2400      	movs	r4, #0
    11a6:	e022      	b.n	11ee <drawKare+0x7a>
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    11a8:	ab40      	add	r3, sp, #256	; 0x100
    11aa:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    11ae:	f833 0cd0 	ldrh.w	r0, [r3, #-208]
    11b2:	1040      	asrs	r0, r0, #1
		((body[i+1]/iSv)+(offsetGraphicY)),
    11b4:	1c63      	adds	r3, r4, #1
    11b6:	aa40      	add	r2, sp, #256	; 0x100
    11b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    11bc:	f833 1cd0 	ldrh.w	r1, [r3, #-208]
    11c0:	1049      	asrs	r1, r1, #1
		((body[i+2]/iSv)+(offsetGraphicX)),
    11c2:	1ca3      	adds	r3, r4, #2
    11c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    11c8:	f833 2cd0 	ldrh.w	r2, [r3, #-208]
    11cc:	1052      	asrs	r2, r2, #1
		((body[i+3]/iSv)+(offsetGraphicY)));
    11ce:	1ce3      	adds	r3, r4, #3
    11d0:	ae40      	add	r6, sp, #256	; 0x100
    11d2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    11d6:	f833 3cd0 	ldrh.w	r3, [r3, #-208]
    11da:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    11dc:	3396      	adds	r3, #150	; 0x96
    11de:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    11e2:	3196      	adds	r1, #150	; 0x96
    11e4:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    11e8:	4e25      	ldr	r6, [pc, #148]	; (1280 <drawKare+0x10c>)
    11ea:	47b0      	blx	r6
	for(int i = 0; i < 104; i = i+4)
    11ec:	3404      	adds	r4, #4
    11ee:	2c67      	cmp	r4, #103	; 0x67
    11f0:	ddda      	ble.n	11a8 <drawKare+0x34>
	}
	switch(emotion)
    11f2:	b11d      	cbz	r5, 11fc <drawKare+0x88>
    11f4:	2d01      	cmp	r5, #1
    11f6:	d023      	beq.n	1240 <drawKare+0xcc>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    11f8:	b041      	add	sp, #260	; 0x104
    11fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(int i = 0; i < 28; i = i+4)
    11fc:	2d1b      	cmp	r5, #27
    11fe:	dcfb      	bgt.n	11f8 <drawKare+0x84>
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1200:	ab40      	add	r3, sp, #256	; 0x100
    1202:	442b      	add	r3, r5
    1204:	f813 0cec 	ldrb.w	r0, [r3, #-236]
    1208:	1040      	asrs	r0, r0, #1
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    120a:	1c6b      	adds	r3, r5, #1
    120c:	aa40      	add	r2, sp, #256	; 0x100
    120e:	4413      	add	r3, r2
    1210:	f813 1cec 	ldrb.w	r1, [r3, #-236]
    1214:	1049      	asrs	r1, r1, #1
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    1216:	1cab      	adds	r3, r5, #2
    1218:	4413      	add	r3, r2
    121a:	f813 2cec 	ldrb.w	r2, [r3, #-236]
    121e:	1052      	asrs	r2, r2, #1
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    1220:	1ceb      	adds	r3, r5, #3
    1222:	ac40      	add	r4, sp, #256	; 0x100
    1224:	4423      	add	r3, r4
    1226:	f813 3cec 	ldrb.w	r3, [r3, #-236]
    122a:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    122c:	3396      	adds	r3, #150	; 0x96
    122e:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    1232:	3196      	adds	r1, #150	; 0x96
    1234:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    1238:	4c11      	ldr	r4, [pc, #68]	; (1280 <drawKare+0x10c>)
    123a:	47a0      	blx	r4
		for(int i = 0; i < 28; i = i+4)
    123c:	3504      	adds	r5, #4
    123e:	e7dd      	b.n	11fc <drawKare+0x88>
	switch(emotion)
    1240:	2400      	movs	r4, #0
		for(int i = 0; i < 20; i = i+4)
    1242:	2c13      	cmp	r4, #19
    1244:	dcd8      	bgt.n	11f8 <drawKare+0x84>
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    1246:	f81d 0004 	ldrb.w	r0, [sp, r4]
    124a:	1040      	asrs	r0, r0, #1
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    124c:	1c63      	adds	r3, r4, #1
    124e:	f81d 1003 	ldrb.w	r1, [sp, r3]
    1252:	1049      	asrs	r1, r1, #1
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    1254:	1ca3      	adds	r3, r4, #2
    1256:	f81d 2003 	ldrb.w	r2, [sp, r3]
    125a:	1052      	asrs	r2, r2, #1
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    125c:	1ce3      	adds	r3, r4, #3
    125e:	f81d 3003 	ldrb.w	r3, [sp, r3]
    1262:	105b      	asrs	r3, r3, #1
			fillRect((
    1264:	3396      	adds	r3, #150	; 0x96
    1266:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    126a:	3196      	adds	r1, #150	; 0x96
    126c:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    1270:	4d03      	ldr	r5, [pc, #12]	; (1280 <drawKare+0x10c>)
    1272:	47a8      	blx	r5
		for(int i = 0; i < 20; i = i+4)
    1274:	3404      	adds	r4, #4
    1276:	e7e4      	b.n	1242 <drawKare+0xce>
    1278:	00003c14 	.word	0x00003c14
    127c:	0000160d 	.word	0x0000160d
    1280:	00000dc1 	.word	0x00000dc1

00001284 <splashScreen>:

void splashScreen(void)
{
    1284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
    1288:	4c61      	ldr	r4, [pc, #388]	; (1410 <splashScreen+0x18c>)
    128a:	4b62      	ldr	r3, [pc, #392]	; (1414 <splashScreen+0x190>)
    128c:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
    128e:	4b62      	ldr	r3, [pc, #392]	; (1418 <splashScreen+0x194>)
    1290:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
    1292:	4b62      	ldr	r3, [pc, #392]	; (141c <splashScreen+0x198>)
    1294:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
    1296:	4b62      	ldr	r3, [pc, #392]	; (1420 <splashScreen+0x19c>)
    1298:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
    129a:	4b62      	ldr	r3, [pc, #392]	; (1424 <splashScreen+0x1a0>)
    129c:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
    129e:	4b62      	ldr	r3, [pc, #392]	; (1428 <splashScreen+0x1a4>)
    12a0:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
    12a2:	4b62      	ldr	r3, [pc, #392]	; (142c <splashScreen+0x1a8>)
    12a4:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    12a6:	4b62      	ldr	r3, [pc, #392]	; (1430 <splashScreen+0x1ac>)
    12a8:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
    12aa:	4b62      	ldr	r3, [pc, #392]	; (1434 <splashScreen+0x1b0>)
    12ac:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
    12ae:	4b62      	ldr	r3, [pc, #392]	; (1438 <splashScreen+0x1b4>)
    12b0:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
    12b2:	4b62      	ldr	r3, [pc, #392]	; (143c <splashScreen+0x1b8>)
    12b4:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
    12b6:	4b62      	ldr	r3, [pc, #392]	; (1440 <splashScreen+0x1bc>)
    12b8:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
    12ba:	4b62      	ldr	r3, [pc, #392]	; (1444 <splashScreen+0x1c0>)
    12bc:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
    12be:	4b62      	ldr	r3, [pc, #392]	; (1448 <splashScreen+0x1c4>)
    12c0:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "Vogon Poetry";//
    12c2:	4b62      	ldr	r3, [pc, #392]	; (144c <splashScreen+0x1c8>)
    12c4:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
    12c6:	4b62      	ldr	r3, [pc, #392]	; (1450 <splashScreen+0x1cc>)
    12c8:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
    12ca:	4b62      	ldr	r3, [pc, #392]	; (1454 <splashScreen+0x1d0>)
    12cc:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    12ce:	4b62      	ldr	r3, [pc, #392]	; (1458 <splashScreen+0x1d4>)
    12d0:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
    12d2:	4b62      	ldr	r3, [pc, #392]	; (145c <splashScreen+0x1d8>)
    12d4:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020)";//
    12d6:	4b62      	ldr	r3, [pc, #392]	; (1460 <splashScreen+0x1dc>)
    12d8:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
    12da:	4b62      	ldr	r3, [pc, #392]	; (1464 <splashScreen+0x1e0>)
    12dc:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
    12de:	4b62      	ldr	r3, [pc, #392]	; (1468 <splashScreen+0x1e4>)
    12e0:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
    12e2:	4b62      	ldr	r3, [pc, #392]	; (146c <splashScreen+0x1e8>)
    12e4:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
    12e6:	4b62      	ldr	r3, [pc, #392]	; (1470 <splashScreen+0x1ec>)
    12e8:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
    12ea:	4b62      	ldr	r3, [pc, #392]	; (1474 <splashScreen+0x1f0>)
    12ec:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
    12ee:	4b62      	ldr	r3, [pc, #392]	; (1478 <splashScreen+0x1f4>)
    12f0:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
    12f2:	4b62      	ldr	r3, [pc, #392]	; (147c <splashScreen+0x1f8>)
    12f4:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
    12f6:	4b62      	ldr	r3, [pc, #392]	; (1480 <splashScreen+0x1fc>)
    12f8:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
    12fa:	4b62      	ldr	r3, [pc, #392]	; (1484 <splashScreen+0x200>)
    12fc:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
    12fe:	4b62      	ldr	r3, [pc, #392]	; (1488 <splashScreen+0x204>)
    1300:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
    1302:	4b62      	ldr	r3, [pc, #392]	; (148c <splashScreen+0x208>)
    1304:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
    1306:	4b62      	ldr	r3, [pc, #392]	; (1490 <splashScreen+0x20c>)
    1308:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
    130a:	4b62      	ldr	r3, [pc, #392]	; (1494 <splashScreen+0x210>)
    130c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	
	const char *textPhrase = splashText[(((rand())%32))];
    1310:	4b61      	ldr	r3, [pc, #388]	; (1498 <splashScreen+0x214>)
    1312:	4798      	blx	r3
    1314:	4242      	negs	r2, r0
    1316:	f000 031f 	and.w	r3, r0, #31
    131a:	f002 021f 	and.w	r2, r2, #31
    131e:	bf58      	it	pl
    1320:	4253      	negpl	r3, r2
    1322:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
	
	setColorRGB(255,255,255);
    1326:	22ff      	movs	r2, #255	; 0xff
    1328:	4611      	mov	r1, r2
    132a:	4610      	mov	r0, r2
    132c:	4b5b      	ldr	r3, [pc, #364]	; (149c <splashScreen+0x218>)
    132e:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    1330:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1334:	4b5a      	ldr	r3, [pc, #360]	; (14a0 <splashScreen+0x21c>)
    1336:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    1338:	3b8c      	subs	r3, #140	; 0x8c
    133a:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
    133e:	f042 0204 	orr.w	r2, r2, #4
    1342:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    1346:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
    134a:	f042 0202 	orr.w	r2, r2, #2
    134e:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    1352:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    1356:	2b00      	cmp	r3, #0
    1358:	db04      	blt.n	1364 <splashScreen+0xe0>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
		drawKare(0); //The normal graphic
    135a:	2000      	movs	r0, #0
    135c:	4b51      	ldr	r3, [pc, #324]	; (14a4 <splashScreen+0x220>)
    135e:	4798      	blx	r3
    1360:	2000      	movs	r0, #0
    1362:	e00f      	b.n	1384 <splashScreen+0x100>
		drawKare(1);
    1364:	2001      	movs	r0, #1
    1366:	4b4f      	ldr	r3, [pc, #316]	; (14a4 <splashScreen+0x220>)
    1368:	4798      	blx	r3
    136a:	e7f9      	b.n	1360 <splashScreen+0xdc>
	
	for(int i = 0 ; i < 80 ; i++)
	{
		for(int j = 0 ; j < 24 ; j++)
		{
			consoleColors[i][j] = 0xFFFF0000;
    136c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    1370:	00cb      	lsls	r3, r1, #3
    1372:	4413      	add	r3, r2
    1374:	4c4c      	ldr	r4, [pc, #304]	; (14a8 <splashScreen+0x224>)
    1376:	494d      	ldr	r1, [pc, #308]	; (14ac <splashScreen+0x228>)
    1378:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
		for(int j = 0 ; j < 24 ; j++)
    137c:	3201      	adds	r2, #1
    137e:	2a17      	cmp	r2, #23
    1380:	ddf4      	ble.n	136c <splashScreen+0xe8>
	for(int i = 0 ; i < 80 ; i++)
    1382:	3001      	adds	r0, #1
    1384:	284f      	cmp	r0, #79	; 0x4f
    1386:	dc01      	bgt.n	138c <splashScreen+0x108>
    1388:	2200      	movs	r2, #0
    138a:	e7f8      	b.n	137e <splashScreen+0xfa>
		}
	}
	
	
	
	setColorHex(defaultForegroundColor);
    138c:	4b48      	ldr	r3, [pc, #288]	; (14b0 <splashScreen+0x22c>)
    138e:	8818      	ldrh	r0, [r3, #0]
    1390:	4b48      	ldr	r3, [pc, #288]	; (14b4 <splashScreen+0x230>)
    1392:	4798      	blx	r3
	setBackColorHex(defaultBackgroundColor);
    1394:	4b48      	ldr	r3, [pc, #288]	; (14b8 <splashScreen+0x234>)
    1396:	8818      	ldrh	r0, [r3, #0]
    1398:	4b48      	ldr	r3, [pc, #288]	; (14bc <splashScreen+0x238>)
    139a:	4798      	blx	r3
	
	xCharPos = 40 - (strlen(textPhrase)/2);
    139c:	4628      	mov	r0, r5
    139e:	4f48      	ldr	r7, [pc, #288]	; (14c0 <splashScreen+0x23c>)
    13a0:	47b8      	blx	r7
    13a2:	0843      	lsrs	r3, r0, #1
    13a4:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    13a8:	4e46      	ldr	r6, [pc, #280]	; (14c4 <splashScreen+0x240>)
    13aa:	8033      	strh	r3, [r6, #0]
	yCharPos = 16;
    13ac:	4c46      	ldr	r4, [pc, #280]	; (14c8 <splashScreen+0x244>)
    13ae:	2310      	movs	r3, #16
    13b0:	8023      	strh	r3, [r4, #0]
	writeString(textPhrase);
    13b2:	4628      	mov	r0, r5
    13b4:	4d45      	ldr	r5, [pc, #276]	; (14cc <splashScreen+0x248>)
    13b6:	47a8      	blx	r5
	
	
	xCharPos = 40 - (strlen(versionLabel)/2);
    13b8:	f8df 8120 	ldr.w	r8, [pc, #288]	; 14dc <splashScreen+0x258>
    13bc:	4640      	mov	r0, r8
    13be:	47b8      	blx	r7
    13c0:	0843      	lsrs	r3, r0, #1
    13c2:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    13c6:	8033      	strh	r3, [r6, #0]
	yCharPos = 18;
    13c8:	2312      	movs	r3, #18
    13ca:	8023      	strh	r3, [r4, #0]
	writeString(versionLabel);
    13cc:	4640      	mov	r0, r8
    13ce:	47a8      	blx	r5
	
	xCharPos = 40 - (strlen(compileTime)/2);
    13d0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 14e0 <splashScreen+0x25c>
    13d4:	4640      	mov	r0, r8
    13d6:	47b8      	blx	r7
    13d8:	0843      	lsrs	r3, r0, #1
    13da:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    13de:	8033      	strh	r3, [r6, #0]
	yCharPos = 19;
    13e0:	2313      	movs	r3, #19
    13e2:	8023      	strh	r3, [r4, #0]
	writeString(compileTime);
    13e4:	4640      	mov	r0, r8
    13e6:	47a8      	blx	r5
	
	//delay_ms(300);
	
	clearScreen();
    13e8:	4b39      	ldr	r3, [pc, #228]	; (14d0 <splashScreen+0x24c>)
    13ea:	4798      	blx	r3
	nullifyConsole();
    13ec:	4b39      	ldr	r3, [pc, #228]	; (14d4 <splashScreen+0x250>)
    13ee:	4798      	blx	r3
	
	setColorRGB(0,255,0);
    13f0:	2200      	movs	r2, #0
    13f2:	21ff      	movs	r1, #255	; 0xff
    13f4:	4610      	mov	r0, r2
    13f6:	4b29      	ldr	r3, [pc, #164]	; (149c <splashScreen+0x218>)
    13f8:	4798      	blx	r3
	setBackColorRGB(0,0,0);
    13fa:	2200      	movs	r2, #0
    13fc:	4611      	mov	r1, r2
    13fe:	4610      	mov	r0, r2
    1400:	4b35      	ldr	r3, [pc, #212]	; (14d8 <splashScreen+0x254>)
    1402:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
    1404:	2300      	movs	r3, #0
    1406:	8033      	strh	r3, [r6, #0]
	yCharPos = 0;
    1408:	8023      	strh	r3, [r4, #0]
    140a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    140e:	bf00      	nop
    1410:	200000cc 	.word	0x200000cc
    1414:	00003d14 	.word	0x00003d14
    1418:	00003d34 	.word	0x00003d34
    141c:	00003d48 	.word	0x00003d48
    1420:	00003d60 	.word	0x00003d60
    1424:	00003d70 	.word	0x00003d70
    1428:	00003d78 	.word	0x00003d78
    142c:	00003da0 	.word	0x00003da0
    1430:	00003dcc 	.word	0x00003dcc
    1434:	00003df4 	.word	0x00003df4
    1438:	00003e20 	.word	0x00003e20
    143c:	00003e2c 	.word	0x00003e2c
    1440:	00003e44 	.word	0x00003e44
    1444:	00003e64 	.word	0x00003e64
    1448:	00003e84 	.word	0x00003e84
    144c:	00003ea8 	.word	0x00003ea8
    1450:	00003eb8 	.word	0x00003eb8
    1454:	00003ec4 	.word	0x00003ec4
    1458:	00003ee0 	.word	0x00003ee0
    145c:	00003f00 	.word	0x00003f00
    1460:	00003f3c 	.word	0x00003f3c
    1464:	00003f58 	.word	0x00003f58
    1468:	00003f74 	.word	0x00003f74
    146c:	00003f84 	.word	0x00003f84
    1470:	00003fa8 	.word	0x00003fa8
    1474:	00003fd4 	.word	0x00003fd4
    1478:	00004000 	.word	0x00004000
    147c:	00004020 	.word	0x00004020
    1480:	00004040 	.word	0x00004040
    1484:	00004054 	.word	0x00004054
    1488:	00004070 	.word	0x00004070
    148c:	00004080 	.word	0x00004080
    1490:	000040a4 	.word	0x000040a4
    1494:	000040c4 	.word	0x000040c4
    1498:	000016fd 	.word	0x000016fd
    149c:	00000c59 	.word	0x00000c59
    14a0:	4100808c 	.word	0x4100808c
    14a4:	00001175 	.word	0x00001175
    14a8:	ffff0000 	.word	0xffff0000
    14ac:	2000105c 	.word	0x2000105c
    14b0:	2000002e 	.word	0x2000002e
    14b4:	00000c7d 	.word	0x00000c7d
    14b8:	200000c8 	.word	0x200000c8
    14bc:	00000cb9 	.word	0x00000cb9
    14c0:	000018dd 	.word	0x000018dd
    14c4:	200000b8 	.word	0x200000b8
    14c8:	200000ba 	.word	0x200000ba
    14cc:	000004e1 	.word	0x000004e1
    14d0:	00000e7d 	.word	0x00000e7d
    14d4:	00000519 	.word	0x00000519
    14d8:	00000c95 	.word	0x00000c95
    14dc:	20000004 	.word	0x20000004
    14e0:	20000014 	.word	0x20000014

000014e4 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    14e4:	b958      	cbnz	r0, 14fe <_read+0x1a>
{
    14e6:	b508      	push	{r3, lr}
    14e8:	460b      	mov	r3, r1
    14ea:	4611      	mov	r1, r2
    14ec:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    14ee:	4b05      	ldr	r3, [pc, #20]	; (1504 <_read+0x20>)
    14f0:	4798      	blx	r3
	if (n < 0) {
    14f2:	2800      	cmp	r0, #0
    14f4:	db00      	blt.n	14f8 <_read+0x14>
		return -1;
	}

	return n;
}
    14f6:	bd08      	pop	{r3, pc}
		return -1;
    14f8:	f04f 30ff 	mov.w	r0, #4294967295
    14fc:	bd08      	pop	{r3, pc}
		return -1;
    14fe:	f04f 30ff 	mov.w	r0, #4294967295
    1502:	4770      	bx	lr
    1504:	0000155d 	.word	0x0000155d

00001508 <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    1508:	3801      	subs	r0, #1
    150a:	2802      	cmp	r0, #2
    150c:	d80b      	bhi.n	1526 <_write+0x1e>
{
    150e:	b508      	push	{r3, lr}
    1510:	460b      	mov	r3, r1
    1512:	4611      	mov	r1, r2
    1514:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    1516:	4b05      	ldr	r3, [pc, #20]	; (152c <_write+0x24>)
    1518:	4798      	blx	r3
	if (n < 0) {
    151a:	2800      	cmp	r0, #0
    151c:	db00      	blt.n	1520 <_write+0x18>
		return -1;
	}

	return n;
}
    151e:	bd08      	pop	{r3, pc}
		return -1;
    1520:	f04f 30ff 	mov.w	r0, #4294967295
    1524:	bd08      	pop	{r3, pc}
		return -1;
    1526:	f04f 30ff 	mov.w	r0, #4294967295
    152a:	4770      	bx	lr
    152c:	00001581 	.word	0x00001581

00001530 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1530:	b570      	push	{r4, r5, r6, lr}
    1532:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    1534:	4d06      	ldr	r5, [pc, #24]	; (1550 <stdio_io_init+0x20>)
    1536:	682b      	ldr	r3, [r5, #0]
    1538:	2100      	movs	r1, #0
    153a:	6898      	ldr	r0, [r3, #8]
    153c:	4c05      	ldr	r4, [pc, #20]	; (1554 <stdio_io_init+0x24>)
    153e:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1540:	682b      	ldr	r3, [r5, #0]
    1542:	2100      	movs	r1, #0
    1544:	6858      	ldr	r0, [r3, #4]
    1546:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    1548:	4b03      	ldr	r3, [pc, #12]	; (1558 <stdio_io_init+0x28>)
    154a:	601e      	str	r6, [r3, #0]
    154c:	bd70      	pop	{r4, r5, r6, pc}
    154e:	bf00      	nop
    1550:	20000038 	.word	0x20000038
    1554:	00001771 	.word	0x00001771
    1558:	2000014c 	.word	0x2000014c

0000155c <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    155c:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    155e:	4b06      	ldr	r3, [pc, #24]	; (1578 <stdio_io_read+0x1c>)
    1560:	681b      	ldr	r3, [r3, #0]
    1562:	b133      	cbz	r3, 1572 <stdio_io_read+0x16>
    1564:	460a      	mov	r2, r1
    1566:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    1568:	b292      	uxth	r2, r2
    156a:	4618      	mov	r0, r3
    156c:	4b03      	ldr	r3, [pc, #12]	; (157c <stdio_io_read+0x20>)
    156e:	4798      	blx	r3
    1570:	bd08      	pop	{r3, pc}
		return 0;
    1572:	2000      	movs	r0, #0
}
    1574:	bd08      	pop	{r3, pc}
    1576:	bf00      	nop
    1578:	2000014c 	.word	0x2000014c
    157c:	00000741 	.word	0x00000741

00001580 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1580:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    1582:	4b06      	ldr	r3, [pc, #24]	; (159c <stdio_io_write+0x1c>)
    1584:	681b      	ldr	r3, [r3, #0]
    1586:	b133      	cbz	r3, 1596 <stdio_io_write+0x16>
    1588:	460a      	mov	r2, r1
    158a:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    158c:	b292      	uxth	r2, r2
    158e:	4618      	mov	r0, r3
    1590:	4b03      	ldr	r3, [pc, #12]	; (15a0 <stdio_io_write+0x20>)
    1592:	4798      	blx	r3
    1594:	bd08      	pop	{r3, pc}
		return 0;
    1596:	2000      	movs	r0, #0
}
    1598:	bd08      	pop	{r3, pc}
    159a:	bf00      	nop
    159c:	2000014c 	.word	0x2000014c
    15a0:	0000070d 	.word	0x0000070d

000015a4 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    15a4:	b510      	push	{r4, lr}

	usart_sync_enable(&USART_0);
    15a6:	4c04      	ldr	r4, [pc, #16]	; (15b8 <stdio_redirect_init+0x14>)
    15a8:	4620      	mov	r0, r4
    15aa:	4b04      	ldr	r3, [pc, #16]	; (15bc <stdio_redirect_init+0x18>)
    15ac:	4798      	blx	r3
	stdio_io_init(&USART_0.io);
    15ae:	4620      	mov	r0, r4
    15b0:	4b03      	ldr	r3, [pc, #12]	; (15c0 <stdio_redirect_init+0x1c>)
    15b2:	4798      	blx	r3
    15b4:	bd10      	pop	{r4, pc}
    15b6:	bf00      	nop
    15b8:	20002e64 	.word	0x20002e64
    15bc:	0000088d 	.word	0x0000088d
    15c0:	00001531 	.word	0x00001531

000015c4 <__libc_init_array>:
    15c4:	b570      	push	{r4, r5, r6, lr}
    15c6:	4e0d      	ldr	r6, [pc, #52]	; (15fc <__libc_init_array+0x38>)
    15c8:	4c0d      	ldr	r4, [pc, #52]	; (1600 <__libc_init_array+0x3c>)
    15ca:	1ba4      	subs	r4, r4, r6
    15cc:	10a4      	asrs	r4, r4, #2
    15ce:	2500      	movs	r5, #0
    15d0:	42a5      	cmp	r5, r4
    15d2:	d109      	bne.n	15e8 <__libc_init_array+0x24>
    15d4:	4e0b      	ldr	r6, [pc, #44]	; (1604 <__libc_init_array+0x40>)
    15d6:	4c0c      	ldr	r4, [pc, #48]	; (1608 <__libc_init_array+0x44>)
    15d8:	f002 fdb6 	bl	4148 <_init>
    15dc:	1ba4      	subs	r4, r4, r6
    15de:	10a4      	asrs	r4, r4, #2
    15e0:	2500      	movs	r5, #0
    15e2:	42a5      	cmp	r5, r4
    15e4:	d105      	bne.n	15f2 <__libc_init_array+0x2e>
    15e6:	bd70      	pop	{r4, r5, r6, pc}
    15e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    15ec:	4798      	blx	r3
    15ee:	3501      	adds	r5, #1
    15f0:	e7ee      	b.n	15d0 <__libc_init_array+0xc>
    15f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    15f6:	4798      	blx	r3
    15f8:	3501      	adds	r5, #1
    15fa:	e7f2      	b.n	15e2 <__libc_init_array+0x1e>
    15fc:	00004154 	.word	0x00004154
    1600:	00004154 	.word	0x00004154
    1604:	00004154 	.word	0x00004154
    1608:	00004158 	.word	0x00004158

0000160c <memcpy>:
    160c:	b510      	push	{r4, lr}
    160e:	1e43      	subs	r3, r0, #1
    1610:	440a      	add	r2, r1
    1612:	4291      	cmp	r1, r2
    1614:	d100      	bne.n	1618 <memcpy+0xc>
    1616:	bd10      	pop	{r4, pc}
    1618:	f811 4b01 	ldrb.w	r4, [r1], #1
    161c:	f803 4f01 	strb.w	r4, [r3, #1]!
    1620:	e7f7      	b.n	1612 <memcpy+0x6>

00001622 <memset>:
    1622:	4402      	add	r2, r0
    1624:	4603      	mov	r3, r0
    1626:	4293      	cmp	r3, r2
    1628:	d100      	bne.n	162c <memset+0xa>
    162a:	4770      	bx	lr
    162c:	f803 1b01 	strb.w	r1, [r3], #1
    1630:	e7f9      	b.n	1626 <memset+0x4>
	...

00001634 <_puts_r>:
    1634:	b570      	push	{r4, r5, r6, lr}
    1636:	460e      	mov	r6, r1
    1638:	4605      	mov	r5, r0
    163a:	b118      	cbz	r0, 1644 <_puts_r+0x10>
    163c:	6983      	ldr	r3, [r0, #24]
    163e:	b90b      	cbnz	r3, 1644 <_puts_r+0x10>
    1640:	f000 fb06 	bl	1c50 <__sinit>
    1644:	69ab      	ldr	r3, [r5, #24]
    1646:	68ac      	ldr	r4, [r5, #8]
    1648:	b913      	cbnz	r3, 1650 <_puts_r+0x1c>
    164a:	4628      	mov	r0, r5
    164c:	f000 fb00 	bl	1c50 <__sinit>
    1650:	4b23      	ldr	r3, [pc, #140]	; (16e0 <_puts_r+0xac>)
    1652:	429c      	cmp	r4, r3
    1654:	d117      	bne.n	1686 <_puts_r+0x52>
    1656:	686c      	ldr	r4, [r5, #4]
    1658:	89a3      	ldrh	r3, [r4, #12]
    165a:	071b      	lsls	r3, r3, #28
    165c:	d51d      	bpl.n	169a <_puts_r+0x66>
    165e:	6923      	ldr	r3, [r4, #16]
    1660:	b1db      	cbz	r3, 169a <_puts_r+0x66>
    1662:	3e01      	subs	r6, #1
    1664:	68a3      	ldr	r3, [r4, #8]
    1666:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    166a:	3b01      	subs	r3, #1
    166c:	60a3      	str	r3, [r4, #8]
    166e:	b9e9      	cbnz	r1, 16ac <_puts_r+0x78>
    1670:	2b00      	cmp	r3, #0
    1672:	da2e      	bge.n	16d2 <_puts_r+0x9e>
    1674:	4622      	mov	r2, r4
    1676:	210a      	movs	r1, #10
    1678:	4628      	mov	r0, r5
    167a:	f000 f937 	bl	18ec <__swbuf_r>
    167e:	3001      	adds	r0, #1
    1680:	d011      	beq.n	16a6 <_puts_r+0x72>
    1682:	200a      	movs	r0, #10
    1684:	bd70      	pop	{r4, r5, r6, pc}
    1686:	4b17      	ldr	r3, [pc, #92]	; (16e4 <_puts_r+0xb0>)
    1688:	429c      	cmp	r4, r3
    168a:	d101      	bne.n	1690 <_puts_r+0x5c>
    168c:	68ac      	ldr	r4, [r5, #8]
    168e:	e7e3      	b.n	1658 <_puts_r+0x24>
    1690:	4b15      	ldr	r3, [pc, #84]	; (16e8 <_puts_r+0xb4>)
    1692:	429c      	cmp	r4, r3
    1694:	bf08      	it	eq
    1696:	68ec      	ldreq	r4, [r5, #12]
    1698:	e7de      	b.n	1658 <_puts_r+0x24>
    169a:	4621      	mov	r1, r4
    169c:	4628      	mov	r0, r5
    169e:	f000 f977 	bl	1990 <__swsetup_r>
    16a2:	2800      	cmp	r0, #0
    16a4:	d0dd      	beq.n	1662 <_puts_r+0x2e>
    16a6:	f04f 30ff 	mov.w	r0, #4294967295
    16aa:	bd70      	pop	{r4, r5, r6, pc}
    16ac:	2b00      	cmp	r3, #0
    16ae:	da04      	bge.n	16ba <_puts_r+0x86>
    16b0:	69a2      	ldr	r2, [r4, #24]
    16b2:	4293      	cmp	r3, r2
    16b4:	db06      	blt.n	16c4 <_puts_r+0x90>
    16b6:	290a      	cmp	r1, #10
    16b8:	d004      	beq.n	16c4 <_puts_r+0x90>
    16ba:	6823      	ldr	r3, [r4, #0]
    16bc:	1c5a      	adds	r2, r3, #1
    16be:	6022      	str	r2, [r4, #0]
    16c0:	7019      	strb	r1, [r3, #0]
    16c2:	e7cf      	b.n	1664 <_puts_r+0x30>
    16c4:	4622      	mov	r2, r4
    16c6:	4628      	mov	r0, r5
    16c8:	f000 f910 	bl	18ec <__swbuf_r>
    16cc:	3001      	adds	r0, #1
    16ce:	d1c9      	bne.n	1664 <_puts_r+0x30>
    16d0:	e7e9      	b.n	16a6 <_puts_r+0x72>
    16d2:	6823      	ldr	r3, [r4, #0]
    16d4:	200a      	movs	r0, #10
    16d6:	1c5a      	adds	r2, r3, #1
    16d8:	6022      	str	r2, [r4, #0]
    16da:	7018      	strb	r0, [r3, #0]
    16dc:	bd70      	pop	{r4, r5, r6, pc}
    16de:	bf00      	nop
    16e0:	00004108 	.word	0x00004108
    16e4:	00004128 	.word	0x00004128
    16e8:	000040e8 	.word	0x000040e8

000016ec <puts>:
    16ec:	4b02      	ldr	r3, [pc, #8]	; (16f8 <puts+0xc>)
    16ee:	4601      	mov	r1, r0
    16f0:	6818      	ldr	r0, [r3, #0]
    16f2:	f7ff bf9f 	b.w	1634 <_puts_r>
    16f6:	bf00      	nop
    16f8:	20000038 	.word	0x20000038

000016fc <rand>:
    16fc:	4b19      	ldr	r3, [pc, #100]	; (1764 <rand+0x68>)
    16fe:	b510      	push	{r4, lr}
    1700:	681c      	ldr	r4, [r3, #0]
    1702:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1704:	b9d3      	cbnz	r3, 173c <rand+0x40>
    1706:	2018      	movs	r0, #24
    1708:	f000 fb90 	bl	1e2c <malloc>
    170c:	f243 330e 	movw	r3, #13070	; 0x330e
    1710:	63a0      	str	r0, [r4, #56]	; 0x38
    1712:	8003      	strh	r3, [r0, #0]
    1714:	f64a 33cd 	movw	r3, #43981	; 0xabcd
    1718:	8043      	strh	r3, [r0, #2]
    171a:	f241 2334 	movw	r3, #4660	; 0x1234
    171e:	8083      	strh	r3, [r0, #4]
    1720:	f24e 636d 	movw	r3, #58989	; 0xe66d
    1724:	80c3      	strh	r3, [r0, #6]
    1726:	f64d 63ec 	movw	r3, #57068	; 0xdeec
    172a:	8103      	strh	r3, [r0, #8]
    172c:	2305      	movs	r3, #5
    172e:	8143      	strh	r3, [r0, #10]
    1730:	230b      	movs	r3, #11
    1732:	8183      	strh	r3, [r0, #12]
    1734:	2201      	movs	r2, #1
    1736:	2300      	movs	r3, #0
    1738:	e9c0 2304 	strd	r2, r3, [r0, #16]
    173c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    173e:	480a      	ldr	r0, [pc, #40]	; (1768 <rand+0x6c>)
    1740:	690a      	ldr	r2, [r1, #16]
    1742:	694b      	ldr	r3, [r1, #20]
    1744:	4c09      	ldr	r4, [pc, #36]	; (176c <rand+0x70>)
    1746:	4350      	muls	r0, r2
    1748:	fb04 0003 	mla	r0, r4, r3, r0
    174c:	fba2 2304 	umull	r2, r3, r2, r4
    1750:	3201      	adds	r2, #1
    1752:	4403      	add	r3, r0
    1754:	f143 0300 	adc.w	r3, r3, #0
    1758:	e9c1 2304 	strd	r2, r3, [r1, #16]
    175c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    1760:	bd10      	pop	{r4, pc}
    1762:	bf00      	nop
    1764:	20000038 	.word	0x20000038
    1768:	5851f42d 	.word	0x5851f42d
    176c:	4c957f2d 	.word	0x4c957f2d

00001770 <setbuf>:
    1770:	2900      	cmp	r1, #0
    1772:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1776:	bf0c      	ite	eq
    1778:	2202      	moveq	r2, #2
    177a:	2200      	movne	r2, #0
    177c:	f000 b800 	b.w	1780 <setvbuf>

00001780 <setvbuf>:
    1780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1784:	461d      	mov	r5, r3
    1786:	4b51      	ldr	r3, [pc, #324]	; (18cc <setvbuf+0x14c>)
    1788:	681e      	ldr	r6, [r3, #0]
    178a:	4604      	mov	r4, r0
    178c:	460f      	mov	r7, r1
    178e:	4690      	mov	r8, r2
    1790:	b126      	cbz	r6, 179c <setvbuf+0x1c>
    1792:	69b3      	ldr	r3, [r6, #24]
    1794:	b913      	cbnz	r3, 179c <setvbuf+0x1c>
    1796:	4630      	mov	r0, r6
    1798:	f000 fa5a 	bl	1c50 <__sinit>
    179c:	4b4c      	ldr	r3, [pc, #304]	; (18d0 <setvbuf+0x150>)
    179e:	429c      	cmp	r4, r3
    17a0:	d152      	bne.n	1848 <setvbuf+0xc8>
    17a2:	6874      	ldr	r4, [r6, #4]
    17a4:	f1b8 0f02 	cmp.w	r8, #2
    17a8:	d006      	beq.n	17b8 <setvbuf+0x38>
    17aa:	f1b8 0f01 	cmp.w	r8, #1
    17ae:	f200 8089 	bhi.w	18c4 <setvbuf+0x144>
    17b2:	2d00      	cmp	r5, #0
    17b4:	f2c0 8086 	blt.w	18c4 <setvbuf+0x144>
    17b8:	4621      	mov	r1, r4
    17ba:	4630      	mov	r0, r6
    17bc:	f000 f9de 	bl	1b7c <_fflush_r>
    17c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    17c2:	b141      	cbz	r1, 17d6 <setvbuf+0x56>
    17c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
    17c8:	4299      	cmp	r1, r3
    17ca:	d002      	beq.n	17d2 <setvbuf+0x52>
    17cc:	4630      	mov	r0, r6
    17ce:	f000 fb35 	bl	1e3c <_free_r>
    17d2:	2300      	movs	r3, #0
    17d4:	6363      	str	r3, [r4, #52]	; 0x34
    17d6:	2300      	movs	r3, #0
    17d8:	61a3      	str	r3, [r4, #24]
    17da:	6063      	str	r3, [r4, #4]
    17dc:	89a3      	ldrh	r3, [r4, #12]
    17de:	061b      	lsls	r3, r3, #24
    17e0:	d503      	bpl.n	17ea <setvbuf+0x6a>
    17e2:	6921      	ldr	r1, [r4, #16]
    17e4:	4630      	mov	r0, r6
    17e6:	f000 fb29 	bl	1e3c <_free_r>
    17ea:	89a3      	ldrh	r3, [r4, #12]
    17ec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    17f0:	f023 0303 	bic.w	r3, r3, #3
    17f4:	f1b8 0f02 	cmp.w	r8, #2
    17f8:	81a3      	strh	r3, [r4, #12]
    17fa:	d05d      	beq.n	18b8 <setvbuf+0x138>
    17fc:	ab01      	add	r3, sp, #4
    17fe:	466a      	mov	r2, sp
    1800:	4621      	mov	r1, r4
    1802:	4630      	mov	r0, r6
    1804:	f000 faae 	bl	1d64 <__swhatbuf_r>
    1808:	89a3      	ldrh	r3, [r4, #12]
    180a:	4318      	orrs	r0, r3
    180c:	81a0      	strh	r0, [r4, #12]
    180e:	bb2d      	cbnz	r5, 185c <setvbuf+0xdc>
    1810:	9d00      	ldr	r5, [sp, #0]
    1812:	4628      	mov	r0, r5
    1814:	f000 fb0a 	bl	1e2c <malloc>
    1818:	4607      	mov	r7, r0
    181a:	2800      	cmp	r0, #0
    181c:	d14e      	bne.n	18bc <setvbuf+0x13c>
    181e:	f8dd 9000 	ldr.w	r9, [sp]
    1822:	45a9      	cmp	r9, r5
    1824:	d13c      	bne.n	18a0 <setvbuf+0x120>
    1826:	f04f 30ff 	mov.w	r0, #4294967295
    182a:	89a3      	ldrh	r3, [r4, #12]
    182c:	f043 0302 	orr.w	r3, r3, #2
    1830:	81a3      	strh	r3, [r4, #12]
    1832:	2300      	movs	r3, #0
    1834:	60a3      	str	r3, [r4, #8]
    1836:	f104 0347 	add.w	r3, r4, #71	; 0x47
    183a:	6023      	str	r3, [r4, #0]
    183c:	6123      	str	r3, [r4, #16]
    183e:	2301      	movs	r3, #1
    1840:	6163      	str	r3, [r4, #20]
    1842:	b003      	add	sp, #12
    1844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1848:	4b22      	ldr	r3, [pc, #136]	; (18d4 <setvbuf+0x154>)
    184a:	429c      	cmp	r4, r3
    184c:	d101      	bne.n	1852 <setvbuf+0xd2>
    184e:	68b4      	ldr	r4, [r6, #8]
    1850:	e7a8      	b.n	17a4 <setvbuf+0x24>
    1852:	4b21      	ldr	r3, [pc, #132]	; (18d8 <setvbuf+0x158>)
    1854:	429c      	cmp	r4, r3
    1856:	bf08      	it	eq
    1858:	68f4      	ldreq	r4, [r6, #12]
    185a:	e7a3      	b.n	17a4 <setvbuf+0x24>
    185c:	2f00      	cmp	r7, #0
    185e:	d0d8      	beq.n	1812 <setvbuf+0x92>
    1860:	69b3      	ldr	r3, [r6, #24]
    1862:	b913      	cbnz	r3, 186a <setvbuf+0xea>
    1864:	4630      	mov	r0, r6
    1866:	f000 f9f3 	bl	1c50 <__sinit>
    186a:	f1b8 0f01 	cmp.w	r8, #1
    186e:	bf08      	it	eq
    1870:	89a3      	ldrheq	r3, [r4, #12]
    1872:	6027      	str	r7, [r4, #0]
    1874:	bf04      	itt	eq
    1876:	f043 0301 	orreq.w	r3, r3, #1
    187a:	81a3      	strheq	r3, [r4, #12]
    187c:	89a3      	ldrh	r3, [r4, #12]
    187e:	6127      	str	r7, [r4, #16]
    1880:	f013 0008 	ands.w	r0, r3, #8
    1884:	6165      	str	r5, [r4, #20]
    1886:	d01b      	beq.n	18c0 <setvbuf+0x140>
    1888:	f013 0001 	ands.w	r0, r3, #1
    188c:	bf18      	it	ne
    188e:	426d      	negne	r5, r5
    1890:	f04f 0300 	mov.w	r3, #0
    1894:	bf1d      	ittte	ne
    1896:	60a3      	strne	r3, [r4, #8]
    1898:	61a5      	strne	r5, [r4, #24]
    189a:	4618      	movne	r0, r3
    189c:	60a5      	streq	r5, [r4, #8]
    189e:	e7d0      	b.n	1842 <setvbuf+0xc2>
    18a0:	4648      	mov	r0, r9
    18a2:	f000 fac3 	bl	1e2c <malloc>
    18a6:	4607      	mov	r7, r0
    18a8:	2800      	cmp	r0, #0
    18aa:	d0bc      	beq.n	1826 <setvbuf+0xa6>
    18ac:	89a3      	ldrh	r3, [r4, #12]
    18ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    18b2:	81a3      	strh	r3, [r4, #12]
    18b4:	464d      	mov	r5, r9
    18b6:	e7d3      	b.n	1860 <setvbuf+0xe0>
    18b8:	2000      	movs	r0, #0
    18ba:	e7b6      	b.n	182a <setvbuf+0xaa>
    18bc:	46a9      	mov	r9, r5
    18be:	e7f5      	b.n	18ac <setvbuf+0x12c>
    18c0:	60a0      	str	r0, [r4, #8]
    18c2:	e7be      	b.n	1842 <setvbuf+0xc2>
    18c4:	f04f 30ff 	mov.w	r0, #4294967295
    18c8:	e7bb      	b.n	1842 <setvbuf+0xc2>
    18ca:	bf00      	nop
    18cc:	20000038 	.word	0x20000038
    18d0:	00004108 	.word	0x00004108
    18d4:	00004128 	.word	0x00004128
    18d8:	000040e8 	.word	0x000040e8

000018dc <strlen>:
    18dc:	4603      	mov	r3, r0
    18de:	f813 2b01 	ldrb.w	r2, [r3], #1
    18e2:	2a00      	cmp	r2, #0
    18e4:	d1fb      	bne.n	18de <strlen+0x2>
    18e6:	1a18      	subs	r0, r3, r0
    18e8:	3801      	subs	r0, #1
    18ea:	4770      	bx	lr

000018ec <__swbuf_r>:
    18ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18ee:	460e      	mov	r6, r1
    18f0:	4614      	mov	r4, r2
    18f2:	4605      	mov	r5, r0
    18f4:	b118      	cbz	r0, 18fe <__swbuf_r+0x12>
    18f6:	6983      	ldr	r3, [r0, #24]
    18f8:	b90b      	cbnz	r3, 18fe <__swbuf_r+0x12>
    18fa:	f000 f9a9 	bl	1c50 <__sinit>
    18fe:	4b21      	ldr	r3, [pc, #132]	; (1984 <__swbuf_r+0x98>)
    1900:	429c      	cmp	r4, r3
    1902:	d12a      	bne.n	195a <__swbuf_r+0x6e>
    1904:	686c      	ldr	r4, [r5, #4]
    1906:	69a3      	ldr	r3, [r4, #24]
    1908:	60a3      	str	r3, [r4, #8]
    190a:	89a3      	ldrh	r3, [r4, #12]
    190c:	071a      	lsls	r2, r3, #28
    190e:	d52e      	bpl.n	196e <__swbuf_r+0x82>
    1910:	6923      	ldr	r3, [r4, #16]
    1912:	b363      	cbz	r3, 196e <__swbuf_r+0x82>
    1914:	6923      	ldr	r3, [r4, #16]
    1916:	6820      	ldr	r0, [r4, #0]
    1918:	1ac0      	subs	r0, r0, r3
    191a:	6963      	ldr	r3, [r4, #20]
    191c:	b2f6      	uxtb	r6, r6
    191e:	4298      	cmp	r0, r3
    1920:	4637      	mov	r7, r6
    1922:	db04      	blt.n	192e <__swbuf_r+0x42>
    1924:	4621      	mov	r1, r4
    1926:	4628      	mov	r0, r5
    1928:	f000 f928 	bl	1b7c <_fflush_r>
    192c:	bb28      	cbnz	r0, 197a <__swbuf_r+0x8e>
    192e:	68a3      	ldr	r3, [r4, #8]
    1930:	3b01      	subs	r3, #1
    1932:	60a3      	str	r3, [r4, #8]
    1934:	6823      	ldr	r3, [r4, #0]
    1936:	1c5a      	adds	r2, r3, #1
    1938:	6022      	str	r2, [r4, #0]
    193a:	701e      	strb	r6, [r3, #0]
    193c:	6963      	ldr	r3, [r4, #20]
    193e:	3001      	adds	r0, #1
    1940:	4298      	cmp	r0, r3
    1942:	d004      	beq.n	194e <__swbuf_r+0x62>
    1944:	89a3      	ldrh	r3, [r4, #12]
    1946:	07db      	lsls	r3, r3, #31
    1948:	d519      	bpl.n	197e <__swbuf_r+0x92>
    194a:	2e0a      	cmp	r6, #10
    194c:	d117      	bne.n	197e <__swbuf_r+0x92>
    194e:	4621      	mov	r1, r4
    1950:	4628      	mov	r0, r5
    1952:	f000 f913 	bl	1b7c <_fflush_r>
    1956:	b190      	cbz	r0, 197e <__swbuf_r+0x92>
    1958:	e00f      	b.n	197a <__swbuf_r+0x8e>
    195a:	4b0b      	ldr	r3, [pc, #44]	; (1988 <__swbuf_r+0x9c>)
    195c:	429c      	cmp	r4, r3
    195e:	d101      	bne.n	1964 <__swbuf_r+0x78>
    1960:	68ac      	ldr	r4, [r5, #8]
    1962:	e7d0      	b.n	1906 <__swbuf_r+0x1a>
    1964:	4b09      	ldr	r3, [pc, #36]	; (198c <__swbuf_r+0xa0>)
    1966:	429c      	cmp	r4, r3
    1968:	bf08      	it	eq
    196a:	68ec      	ldreq	r4, [r5, #12]
    196c:	e7cb      	b.n	1906 <__swbuf_r+0x1a>
    196e:	4621      	mov	r1, r4
    1970:	4628      	mov	r0, r5
    1972:	f000 f80d 	bl	1990 <__swsetup_r>
    1976:	2800      	cmp	r0, #0
    1978:	d0cc      	beq.n	1914 <__swbuf_r+0x28>
    197a:	f04f 37ff 	mov.w	r7, #4294967295
    197e:	4638      	mov	r0, r7
    1980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1982:	bf00      	nop
    1984:	00004108 	.word	0x00004108
    1988:	00004128 	.word	0x00004128
    198c:	000040e8 	.word	0x000040e8

00001990 <__swsetup_r>:
    1990:	4b32      	ldr	r3, [pc, #200]	; (1a5c <__swsetup_r+0xcc>)
    1992:	b570      	push	{r4, r5, r6, lr}
    1994:	681d      	ldr	r5, [r3, #0]
    1996:	4606      	mov	r6, r0
    1998:	460c      	mov	r4, r1
    199a:	b125      	cbz	r5, 19a6 <__swsetup_r+0x16>
    199c:	69ab      	ldr	r3, [r5, #24]
    199e:	b913      	cbnz	r3, 19a6 <__swsetup_r+0x16>
    19a0:	4628      	mov	r0, r5
    19a2:	f000 f955 	bl	1c50 <__sinit>
    19a6:	4b2e      	ldr	r3, [pc, #184]	; (1a60 <__swsetup_r+0xd0>)
    19a8:	429c      	cmp	r4, r3
    19aa:	d10f      	bne.n	19cc <__swsetup_r+0x3c>
    19ac:	686c      	ldr	r4, [r5, #4]
    19ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    19b2:	b29a      	uxth	r2, r3
    19b4:	0715      	lsls	r5, r2, #28
    19b6:	d42c      	bmi.n	1a12 <__swsetup_r+0x82>
    19b8:	06d0      	lsls	r0, r2, #27
    19ba:	d411      	bmi.n	19e0 <__swsetup_r+0x50>
    19bc:	2209      	movs	r2, #9
    19be:	6032      	str	r2, [r6, #0]
    19c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    19c4:	81a3      	strh	r3, [r4, #12]
    19c6:	f04f 30ff 	mov.w	r0, #4294967295
    19ca:	bd70      	pop	{r4, r5, r6, pc}
    19cc:	4b25      	ldr	r3, [pc, #148]	; (1a64 <__swsetup_r+0xd4>)
    19ce:	429c      	cmp	r4, r3
    19d0:	d101      	bne.n	19d6 <__swsetup_r+0x46>
    19d2:	68ac      	ldr	r4, [r5, #8]
    19d4:	e7eb      	b.n	19ae <__swsetup_r+0x1e>
    19d6:	4b24      	ldr	r3, [pc, #144]	; (1a68 <__swsetup_r+0xd8>)
    19d8:	429c      	cmp	r4, r3
    19da:	bf08      	it	eq
    19dc:	68ec      	ldreq	r4, [r5, #12]
    19de:	e7e6      	b.n	19ae <__swsetup_r+0x1e>
    19e0:	0751      	lsls	r1, r2, #29
    19e2:	d512      	bpl.n	1a0a <__swsetup_r+0x7a>
    19e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    19e6:	b141      	cbz	r1, 19fa <__swsetup_r+0x6a>
    19e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    19ec:	4299      	cmp	r1, r3
    19ee:	d002      	beq.n	19f6 <__swsetup_r+0x66>
    19f0:	4630      	mov	r0, r6
    19f2:	f000 fa23 	bl	1e3c <_free_r>
    19f6:	2300      	movs	r3, #0
    19f8:	6363      	str	r3, [r4, #52]	; 0x34
    19fa:	89a3      	ldrh	r3, [r4, #12]
    19fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1a00:	81a3      	strh	r3, [r4, #12]
    1a02:	2300      	movs	r3, #0
    1a04:	6063      	str	r3, [r4, #4]
    1a06:	6923      	ldr	r3, [r4, #16]
    1a08:	6023      	str	r3, [r4, #0]
    1a0a:	89a3      	ldrh	r3, [r4, #12]
    1a0c:	f043 0308 	orr.w	r3, r3, #8
    1a10:	81a3      	strh	r3, [r4, #12]
    1a12:	6923      	ldr	r3, [r4, #16]
    1a14:	b94b      	cbnz	r3, 1a2a <__swsetup_r+0x9a>
    1a16:	89a3      	ldrh	r3, [r4, #12]
    1a18:	f403 7320 	and.w	r3, r3, #640	; 0x280
    1a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1a20:	d003      	beq.n	1a2a <__swsetup_r+0x9a>
    1a22:	4621      	mov	r1, r4
    1a24:	4630      	mov	r0, r6
    1a26:	f000 f9c1 	bl	1dac <__smakebuf_r>
    1a2a:	89a2      	ldrh	r2, [r4, #12]
    1a2c:	f012 0301 	ands.w	r3, r2, #1
    1a30:	d00c      	beq.n	1a4c <__swsetup_r+0xbc>
    1a32:	2300      	movs	r3, #0
    1a34:	60a3      	str	r3, [r4, #8]
    1a36:	6963      	ldr	r3, [r4, #20]
    1a38:	425b      	negs	r3, r3
    1a3a:	61a3      	str	r3, [r4, #24]
    1a3c:	6923      	ldr	r3, [r4, #16]
    1a3e:	b953      	cbnz	r3, 1a56 <__swsetup_r+0xc6>
    1a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1a44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1a48:	d1ba      	bne.n	19c0 <__swsetup_r+0x30>
    1a4a:	bd70      	pop	{r4, r5, r6, pc}
    1a4c:	0792      	lsls	r2, r2, #30
    1a4e:	bf58      	it	pl
    1a50:	6963      	ldrpl	r3, [r4, #20]
    1a52:	60a3      	str	r3, [r4, #8]
    1a54:	e7f2      	b.n	1a3c <__swsetup_r+0xac>
    1a56:	2000      	movs	r0, #0
    1a58:	e7f7      	b.n	1a4a <__swsetup_r+0xba>
    1a5a:	bf00      	nop
    1a5c:	20000038 	.word	0x20000038
    1a60:	00004108 	.word	0x00004108
    1a64:	00004128 	.word	0x00004128
    1a68:	000040e8 	.word	0x000040e8

00001a6c <__sflush_r>:
    1a6c:	898a      	ldrh	r2, [r1, #12]
    1a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a72:	4605      	mov	r5, r0
    1a74:	0710      	lsls	r0, r2, #28
    1a76:	460c      	mov	r4, r1
    1a78:	d45a      	bmi.n	1b30 <__sflush_r+0xc4>
    1a7a:	684b      	ldr	r3, [r1, #4]
    1a7c:	2b00      	cmp	r3, #0
    1a7e:	dc05      	bgt.n	1a8c <__sflush_r+0x20>
    1a80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1a82:	2b00      	cmp	r3, #0
    1a84:	dc02      	bgt.n	1a8c <__sflush_r+0x20>
    1a86:	2000      	movs	r0, #0
    1a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1a8e:	2e00      	cmp	r6, #0
    1a90:	d0f9      	beq.n	1a86 <__sflush_r+0x1a>
    1a92:	2300      	movs	r3, #0
    1a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1a98:	682f      	ldr	r7, [r5, #0]
    1a9a:	602b      	str	r3, [r5, #0]
    1a9c:	d033      	beq.n	1b06 <__sflush_r+0x9a>
    1a9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1aa0:	89a3      	ldrh	r3, [r4, #12]
    1aa2:	075a      	lsls	r2, r3, #29
    1aa4:	d505      	bpl.n	1ab2 <__sflush_r+0x46>
    1aa6:	6863      	ldr	r3, [r4, #4]
    1aa8:	1ac0      	subs	r0, r0, r3
    1aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1aac:	b10b      	cbz	r3, 1ab2 <__sflush_r+0x46>
    1aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1ab0:	1ac0      	subs	r0, r0, r3
    1ab2:	2300      	movs	r3, #0
    1ab4:	4602      	mov	r2, r0
    1ab6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1ab8:	6a21      	ldr	r1, [r4, #32]
    1aba:	4628      	mov	r0, r5
    1abc:	47b0      	blx	r6
    1abe:	1c43      	adds	r3, r0, #1
    1ac0:	89a3      	ldrh	r3, [r4, #12]
    1ac2:	d106      	bne.n	1ad2 <__sflush_r+0x66>
    1ac4:	6829      	ldr	r1, [r5, #0]
    1ac6:	291d      	cmp	r1, #29
    1ac8:	d84b      	bhi.n	1b62 <__sflush_r+0xf6>
    1aca:	4a2b      	ldr	r2, [pc, #172]	; (1b78 <__sflush_r+0x10c>)
    1acc:	40ca      	lsrs	r2, r1
    1ace:	07d6      	lsls	r6, r2, #31
    1ad0:	d547      	bpl.n	1b62 <__sflush_r+0xf6>
    1ad2:	2200      	movs	r2, #0
    1ad4:	6062      	str	r2, [r4, #4]
    1ad6:	04d9      	lsls	r1, r3, #19
    1ad8:	6922      	ldr	r2, [r4, #16]
    1ada:	6022      	str	r2, [r4, #0]
    1adc:	d504      	bpl.n	1ae8 <__sflush_r+0x7c>
    1ade:	1c42      	adds	r2, r0, #1
    1ae0:	d101      	bne.n	1ae6 <__sflush_r+0x7a>
    1ae2:	682b      	ldr	r3, [r5, #0]
    1ae4:	b903      	cbnz	r3, 1ae8 <__sflush_r+0x7c>
    1ae6:	6560      	str	r0, [r4, #84]	; 0x54
    1ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1aea:	602f      	str	r7, [r5, #0]
    1aec:	2900      	cmp	r1, #0
    1aee:	d0ca      	beq.n	1a86 <__sflush_r+0x1a>
    1af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1af4:	4299      	cmp	r1, r3
    1af6:	d002      	beq.n	1afe <__sflush_r+0x92>
    1af8:	4628      	mov	r0, r5
    1afa:	f000 f99f 	bl	1e3c <_free_r>
    1afe:	2000      	movs	r0, #0
    1b00:	6360      	str	r0, [r4, #52]	; 0x34
    1b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b06:	6a21      	ldr	r1, [r4, #32]
    1b08:	2301      	movs	r3, #1
    1b0a:	4628      	mov	r0, r5
    1b0c:	47b0      	blx	r6
    1b0e:	1c41      	adds	r1, r0, #1
    1b10:	d1c6      	bne.n	1aa0 <__sflush_r+0x34>
    1b12:	682b      	ldr	r3, [r5, #0]
    1b14:	2b00      	cmp	r3, #0
    1b16:	d0c3      	beq.n	1aa0 <__sflush_r+0x34>
    1b18:	2b1d      	cmp	r3, #29
    1b1a:	d001      	beq.n	1b20 <__sflush_r+0xb4>
    1b1c:	2b16      	cmp	r3, #22
    1b1e:	d101      	bne.n	1b24 <__sflush_r+0xb8>
    1b20:	602f      	str	r7, [r5, #0]
    1b22:	e7b0      	b.n	1a86 <__sflush_r+0x1a>
    1b24:	89a3      	ldrh	r3, [r4, #12]
    1b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1b2a:	81a3      	strh	r3, [r4, #12]
    1b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b30:	690f      	ldr	r7, [r1, #16]
    1b32:	2f00      	cmp	r7, #0
    1b34:	d0a7      	beq.n	1a86 <__sflush_r+0x1a>
    1b36:	0793      	lsls	r3, r2, #30
    1b38:	680e      	ldr	r6, [r1, #0]
    1b3a:	bf08      	it	eq
    1b3c:	694b      	ldreq	r3, [r1, #20]
    1b3e:	600f      	str	r7, [r1, #0]
    1b40:	bf18      	it	ne
    1b42:	2300      	movne	r3, #0
    1b44:	eba6 0807 	sub.w	r8, r6, r7
    1b48:	608b      	str	r3, [r1, #8]
    1b4a:	f1b8 0f00 	cmp.w	r8, #0
    1b4e:	dd9a      	ble.n	1a86 <__sflush_r+0x1a>
    1b50:	4643      	mov	r3, r8
    1b52:	463a      	mov	r2, r7
    1b54:	6a21      	ldr	r1, [r4, #32]
    1b56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1b58:	4628      	mov	r0, r5
    1b5a:	47b0      	blx	r6
    1b5c:	2800      	cmp	r0, #0
    1b5e:	dc07      	bgt.n	1b70 <__sflush_r+0x104>
    1b60:	89a3      	ldrh	r3, [r4, #12]
    1b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1b66:	81a3      	strh	r3, [r4, #12]
    1b68:	f04f 30ff 	mov.w	r0, #4294967295
    1b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b70:	4407      	add	r7, r0
    1b72:	eba8 0800 	sub.w	r8, r8, r0
    1b76:	e7e8      	b.n	1b4a <__sflush_r+0xde>
    1b78:	20400001 	.word	0x20400001

00001b7c <_fflush_r>:
    1b7c:	b538      	push	{r3, r4, r5, lr}
    1b7e:	690b      	ldr	r3, [r1, #16]
    1b80:	4605      	mov	r5, r0
    1b82:	460c      	mov	r4, r1
    1b84:	b1db      	cbz	r3, 1bbe <_fflush_r+0x42>
    1b86:	b118      	cbz	r0, 1b90 <_fflush_r+0x14>
    1b88:	6983      	ldr	r3, [r0, #24]
    1b8a:	b90b      	cbnz	r3, 1b90 <_fflush_r+0x14>
    1b8c:	f000 f860 	bl	1c50 <__sinit>
    1b90:	4b0c      	ldr	r3, [pc, #48]	; (1bc4 <_fflush_r+0x48>)
    1b92:	429c      	cmp	r4, r3
    1b94:	d109      	bne.n	1baa <_fflush_r+0x2e>
    1b96:	686c      	ldr	r4, [r5, #4]
    1b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1b9c:	b17b      	cbz	r3, 1bbe <_fflush_r+0x42>
    1b9e:	4621      	mov	r1, r4
    1ba0:	4628      	mov	r0, r5
    1ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1ba6:	f7ff bf61 	b.w	1a6c <__sflush_r>
    1baa:	4b07      	ldr	r3, [pc, #28]	; (1bc8 <_fflush_r+0x4c>)
    1bac:	429c      	cmp	r4, r3
    1bae:	d101      	bne.n	1bb4 <_fflush_r+0x38>
    1bb0:	68ac      	ldr	r4, [r5, #8]
    1bb2:	e7f1      	b.n	1b98 <_fflush_r+0x1c>
    1bb4:	4b05      	ldr	r3, [pc, #20]	; (1bcc <_fflush_r+0x50>)
    1bb6:	429c      	cmp	r4, r3
    1bb8:	bf08      	it	eq
    1bba:	68ec      	ldreq	r4, [r5, #12]
    1bbc:	e7ec      	b.n	1b98 <_fflush_r+0x1c>
    1bbe:	2000      	movs	r0, #0
    1bc0:	bd38      	pop	{r3, r4, r5, pc}
    1bc2:	bf00      	nop
    1bc4:	00004108 	.word	0x00004108
    1bc8:	00004128 	.word	0x00004128
    1bcc:	000040e8 	.word	0x000040e8

00001bd0 <_cleanup_r>:
    1bd0:	4901      	ldr	r1, [pc, #4]	; (1bd8 <_cleanup_r+0x8>)
    1bd2:	f000 b8a9 	b.w	1d28 <_fwalk_reent>
    1bd6:	bf00      	nop
    1bd8:	00001b7d 	.word	0x00001b7d

00001bdc <std.isra.0>:
    1bdc:	2300      	movs	r3, #0
    1bde:	b510      	push	{r4, lr}
    1be0:	4604      	mov	r4, r0
    1be2:	6003      	str	r3, [r0, #0]
    1be4:	6043      	str	r3, [r0, #4]
    1be6:	6083      	str	r3, [r0, #8]
    1be8:	8181      	strh	r1, [r0, #12]
    1bea:	6643      	str	r3, [r0, #100]	; 0x64
    1bec:	81c2      	strh	r2, [r0, #14]
    1bee:	6103      	str	r3, [r0, #16]
    1bf0:	6143      	str	r3, [r0, #20]
    1bf2:	6183      	str	r3, [r0, #24]
    1bf4:	4619      	mov	r1, r3
    1bf6:	2208      	movs	r2, #8
    1bf8:	305c      	adds	r0, #92	; 0x5c
    1bfa:	f7ff fd12 	bl	1622 <memset>
    1bfe:	4b05      	ldr	r3, [pc, #20]	; (1c14 <std.isra.0+0x38>)
    1c00:	6263      	str	r3, [r4, #36]	; 0x24
    1c02:	4b05      	ldr	r3, [pc, #20]	; (1c18 <std.isra.0+0x3c>)
    1c04:	62a3      	str	r3, [r4, #40]	; 0x28
    1c06:	4b05      	ldr	r3, [pc, #20]	; (1c1c <std.isra.0+0x40>)
    1c08:	62e3      	str	r3, [r4, #44]	; 0x2c
    1c0a:	4b05      	ldr	r3, [pc, #20]	; (1c20 <std.isra.0+0x44>)
    1c0c:	6224      	str	r4, [r4, #32]
    1c0e:	6323      	str	r3, [r4, #48]	; 0x30
    1c10:	bd10      	pop	{r4, pc}
    1c12:	bf00      	nop
    1c14:	00001fb5 	.word	0x00001fb5
    1c18:	00001fd7 	.word	0x00001fd7
    1c1c:	0000200f 	.word	0x0000200f
    1c20:	00002033 	.word	0x00002033

00001c24 <__sfmoreglue>:
    1c24:	b570      	push	{r4, r5, r6, lr}
    1c26:	1e4a      	subs	r2, r1, #1
    1c28:	2568      	movs	r5, #104	; 0x68
    1c2a:	4355      	muls	r5, r2
    1c2c:	460e      	mov	r6, r1
    1c2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1c32:	f000 f951 	bl	1ed8 <_malloc_r>
    1c36:	4604      	mov	r4, r0
    1c38:	b140      	cbz	r0, 1c4c <__sfmoreglue+0x28>
    1c3a:	2100      	movs	r1, #0
    1c3c:	e880 0042 	stmia.w	r0, {r1, r6}
    1c40:	300c      	adds	r0, #12
    1c42:	60a0      	str	r0, [r4, #8]
    1c44:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1c48:	f7ff fceb 	bl	1622 <memset>
    1c4c:	4620      	mov	r0, r4
    1c4e:	bd70      	pop	{r4, r5, r6, pc}

00001c50 <__sinit>:
    1c50:	6983      	ldr	r3, [r0, #24]
    1c52:	b510      	push	{r4, lr}
    1c54:	4604      	mov	r4, r0
    1c56:	bb33      	cbnz	r3, 1ca6 <__sinit+0x56>
    1c58:	6483      	str	r3, [r0, #72]	; 0x48
    1c5a:	64c3      	str	r3, [r0, #76]	; 0x4c
    1c5c:	6503      	str	r3, [r0, #80]	; 0x50
    1c5e:	4b12      	ldr	r3, [pc, #72]	; (1ca8 <__sinit+0x58>)
    1c60:	4a12      	ldr	r2, [pc, #72]	; (1cac <__sinit+0x5c>)
    1c62:	681b      	ldr	r3, [r3, #0]
    1c64:	6282      	str	r2, [r0, #40]	; 0x28
    1c66:	4298      	cmp	r0, r3
    1c68:	bf04      	itt	eq
    1c6a:	2301      	moveq	r3, #1
    1c6c:	6183      	streq	r3, [r0, #24]
    1c6e:	f000 f81f 	bl	1cb0 <__sfp>
    1c72:	6060      	str	r0, [r4, #4]
    1c74:	4620      	mov	r0, r4
    1c76:	f000 f81b 	bl	1cb0 <__sfp>
    1c7a:	60a0      	str	r0, [r4, #8]
    1c7c:	4620      	mov	r0, r4
    1c7e:	f000 f817 	bl	1cb0 <__sfp>
    1c82:	2200      	movs	r2, #0
    1c84:	60e0      	str	r0, [r4, #12]
    1c86:	2104      	movs	r1, #4
    1c88:	6860      	ldr	r0, [r4, #4]
    1c8a:	f7ff ffa7 	bl	1bdc <std.isra.0>
    1c8e:	2201      	movs	r2, #1
    1c90:	2109      	movs	r1, #9
    1c92:	68a0      	ldr	r0, [r4, #8]
    1c94:	f7ff ffa2 	bl	1bdc <std.isra.0>
    1c98:	2202      	movs	r2, #2
    1c9a:	2112      	movs	r1, #18
    1c9c:	68e0      	ldr	r0, [r4, #12]
    1c9e:	f7ff ff9d 	bl	1bdc <std.isra.0>
    1ca2:	2301      	movs	r3, #1
    1ca4:	61a3      	str	r3, [r4, #24]
    1ca6:	bd10      	pop	{r4, pc}
    1ca8:	000040e4 	.word	0x000040e4
    1cac:	00001bd1 	.word	0x00001bd1

00001cb0 <__sfp>:
    1cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cb2:	4b1c      	ldr	r3, [pc, #112]	; (1d24 <__sfp+0x74>)
    1cb4:	681e      	ldr	r6, [r3, #0]
    1cb6:	69b3      	ldr	r3, [r6, #24]
    1cb8:	4607      	mov	r7, r0
    1cba:	b913      	cbnz	r3, 1cc2 <__sfp+0x12>
    1cbc:	4630      	mov	r0, r6
    1cbe:	f7ff ffc7 	bl	1c50 <__sinit>
    1cc2:	3648      	adds	r6, #72	; 0x48
    1cc4:	68b4      	ldr	r4, [r6, #8]
    1cc6:	6873      	ldr	r3, [r6, #4]
    1cc8:	3b01      	subs	r3, #1
    1cca:	d503      	bpl.n	1cd4 <__sfp+0x24>
    1ccc:	6833      	ldr	r3, [r6, #0]
    1cce:	b133      	cbz	r3, 1cde <__sfp+0x2e>
    1cd0:	6836      	ldr	r6, [r6, #0]
    1cd2:	e7f7      	b.n	1cc4 <__sfp+0x14>
    1cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1cd8:	b16d      	cbz	r5, 1cf6 <__sfp+0x46>
    1cda:	3468      	adds	r4, #104	; 0x68
    1cdc:	e7f4      	b.n	1cc8 <__sfp+0x18>
    1cde:	2104      	movs	r1, #4
    1ce0:	4638      	mov	r0, r7
    1ce2:	f7ff ff9f 	bl	1c24 <__sfmoreglue>
    1ce6:	6030      	str	r0, [r6, #0]
    1ce8:	2800      	cmp	r0, #0
    1cea:	d1f1      	bne.n	1cd0 <__sfp+0x20>
    1cec:	230c      	movs	r3, #12
    1cee:	603b      	str	r3, [r7, #0]
    1cf0:	4604      	mov	r4, r0
    1cf2:	4620      	mov	r0, r4
    1cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1cfa:	81e3      	strh	r3, [r4, #14]
    1cfc:	2301      	movs	r3, #1
    1cfe:	81a3      	strh	r3, [r4, #12]
    1d00:	6665      	str	r5, [r4, #100]	; 0x64
    1d02:	6025      	str	r5, [r4, #0]
    1d04:	60a5      	str	r5, [r4, #8]
    1d06:	6065      	str	r5, [r4, #4]
    1d08:	6125      	str	r5, [r4, #16]
    1d0a:	6165      	str	r5, [r4, #20]
    1d0c:	61a5      	str	r5, [r4, #24]
    1d0e:	2208      	movs	r2, #8
    1d10:	4629      	mov	r1, r5
    1d12:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1d16:	f7ff fc84 	bl	1622 <memset>
    1d1a:	6365      	str	r5, [r4, #52]	; 0x34
    1d1c:	63a5      	str	r5, [r4, #56]	; 0x38
    1d1e:	64a5      	str	r5, [r4, #72]	; 0x48
    1d20:	64e5      	str	r5, [r4, #76]	; 0x4c
    1d22:	e7e6      	b.n	1cf2 <__sfp+0x42>
    1d24:	000040e4 	.word	0x000040e4

00001d28 <_fwalk_reent>:
    1d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d2c:	4680      	mov	r8, r0
    1d2e:	4689      	mov	r9, r1
    1d30:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1d34:	2600      	movs	r6, #0
    1d36:	b914      	cbnz	r4, 1d3e <_fwalk_reent+0x16>
    1d38:	4630      	mov	r0, r6
    1d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d3e:	68a5      	ldr	r5, [r4, #8]
    1d40:	6867      	ldr	r7, [r4, #4]
    1d42:	3f01      	subs	r7, #1
    1d44:	d501      	bpl.n	1d4a <_fwalk_reent+0x22>
    1d46:	6824      	ldr	r4, [r4, #0]
    1d48:	e7f5      	b.n	1d36 <_fwalk_reent+0xe>
    1d4a:	89ab      	ldrh	r3, [r5, #12]
    1d4c:	2b01      	cmp	r3, #1
    1d4e:	d907      	bls.n	1d60 <_fwalk_reent+0x38>
    1d50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1d54:	3301      	adds	r3, #1
    1d56:	d003      	beq.n	1d60 <_fwalk_reent+0x38>
    1d58:	4629      	mov	r1, r5
    1d5a:	4640      	mov	r0, r8
    1d5c:	47c8      	blx	r9
    1d5e:	4306      	orrs	r6, r0
    1d60:	3568      	adds	r5, #104	; 0x68
    1d62:	e7ee      	b.n	1d42 <_fwalk_reent+0x1a>

00001d64 <__swhatbuf_r>:
    1d64:	b570      	push	{r4, r5, r6, lr}
    1d66:	460e      	mov	r6, r1
    1d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1d6c:	2900      	cmp	r1, #0
    1d6e:	b090      	sub	sp, #64	; 0x40
    1d70:	4614      	mov	r4, r2
    1d72:	461d      	mov	r5, r3
    1d74:	da07      	bge.n	1d86 <__swhatbuf_r+0x22>
    1d76:	2300      	movs	r3, #0
    1d78:	602b      	str	r3, [r5, #0]
    1d7a:	89b3      	ldrh	r3, [r6, #12]
    1d7c:	061a      	lsls	r2, r3, #24
    1d7e:	d410      	bmi.n	1da2 <__swhatbuf_r+0x3e>
    1d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1d84:	e00e      	b.n	1da4 <__swhatbuf_r+0x40>
    1d86:	aa01      	add	r2, sp, #4
    1d88:	f000 f97a 	bl	2080 <_fstat_r>
    1d8c:	2800      	cmp	r0, #0
    1d8e:	dbf2      	blt.n	1d76 <__swhatbuf_r+0x12>
    1d90:	9a02      	ldr	r2, [sp, #8]
    1d92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    1d96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    1d9a:	425a      	negs	r2, r3
    1d9c:	415a      	adcs	r2, r3
    1d9e:	602a      	str	r2, [r5, #0]
    1da0:	e7ee      	b.n	1d80 <__swhatbuf_r+0x1c>
    1da2:	2340      	movs	r3, #64	; 0x40
    1da4:	2000      	movs	r0, #0
    1da6:	6023      	str	r3, [r4, #0]
    1da8:	b010      	add	sp, #64	; 0x40
    1daa:	bd70      	pop	{r4, r5, r6, pc}

00001dac <__smakebuf_r>:
    1dac:	898b      	ldrh	r3, [r1, #12]
    1dae:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1db0:	079d      	lsls	r5, r3, #30
    1db2:	4606      	mov	r6, r0
    1db4:	460c      	mov	r4, r1
    1db6:	d507      	bpl.n	1dc8 <__smakebuf_r+0x1c>
    1db8:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1dbc:	6023      	str	r3, [r4, #0]
    1dbe:	6123      	str	r3, [r4, #16]
    1dc0:	2301      	movs	r3, #1
    1dc2:	6163      	str	r3, [r4, #20]
    1dc4:	b002      	add	sp, #8
    1dc6:	bd70      	pop	{r4, r5, r6, pc}
    1dc8:	ab01      	add	r3, sp, #4
    1dca:	466a      	mov	r2, sp
    1dcc:	f7ff ffca 	bl	1d64 <__swhatbuf_r>
    1dd0:	9900      	ldr	r1, [sp, #0]
    1dd2:	4605      	mov	r5, r0
    1dd4:	4630      	mov	r0, r6
    1dd6:	f000 f87f 	bl	1ed8 <_malloc_r>
    1dda:	b948      	cbnz	r0, 1df0 <__smakebuf_r+0x44>
    1ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1de0:	059a      	lsls	r2, r3, #22
    1de2:	d4ef      	bmi.n	1dc4 <__smakebuf_r+0x18>
    1de4:	f023 0303 	bic.w	r3, r3, #3
    1de8:	f043 0302 	orr.w	r3, r3, #2
    1dec:	81a3      	strh	r3, [r4, #12]
    1dee:	e7e3      	b.n	1db8 <__smakebuf_r+0xc>
    1df0:	4b0d      	ldr	r3, [pc, #52]	; (1e28 <__smakebuf_r+0x7c>)
    1df2:	62b3      	str	r3, [r6, #40]	; 0x28
    1df4:	89a3      	ldrh	r3, [r4, #12]
    1df6:	6020      	str	r0, [r4, #0]
    1df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1dfc:	81a3      	strh	r3, [r4, #12]
    1dfe:	9b00      	ldr	r3, [sp, #0]
    1e00:	6163      	str	r3, [r4, #20]
    1e02:	9b01      	ldr	r3, [sp, #4]
    1e04:	6120      	str	r0, [r4, #16]
    1e06:	b15b      	cbz	r3, 1e20 <__smakebuf_r+0x74>
    1e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1e0c:	4630      	mov	r0, r6
    1e0e:	f000 f949 	bl	20a4 <_isatty_r>
    1e12:	b128      	cbz	r0, 1e20 <__smakebuf_r+0x74>
    1e14:	89a3      	ldrh	r3, [r4, #12]
    1e16:	f023 0303 	bic.w	r3, r3, #3
    1e1a:	f043 0301 	orr.w	r3, r3, #1
    1e1e:	81a3      	strh	r3, [r4, #12]
    1e20:	89a3      	ldrh	r3, [r4, #12]
    1e22:	431d      	orrs	r5, r3
    1e24:	81a5      	strh	r5, [r4, #12]
    1e26:	e7cd      	b.n	1dc4 <__smakebuf_r+0x18>
    1e28:	00001bd1 	.word	0x00001bd1

00001e2c <malloc>:
    1e2c:	4b02      	ldr	r3, [pc, #8]	; (1e38 <malloc+0xc>)
    1e2e:	4601      	mov	r1, r0
    1e30:	6818      	ldr	r0, [r3, #0]
    1e32:	f000 b851 	b.w	1ed8 <_malloc_r>
    1e36:	bf00      	nop
    1e38:	20000038 	.word	0x20000038

00001e3c <_free_r>:
    1e3c:	b538      	push	{r3, r4, r5, lr}
    1e3e:	4605      	mov	r5, r0
    1e40:	2900      	cmp	r1, #0
    1e42:	d045      	beq.n	1ed0 <_free_r+0x94>
    1e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1e48:	1f0c      	subs	r4, r1, #4
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	bfb8      	it	lt
    1e4e:	18e4      	addlt	r4, r4, r3
    1e50:	f000 f94a 	bl	20e8 <__malloc_lock>
    1e54:	4a1f      	ldr	r2, [pc, #124]	; (1ed4 <_free_r+0x98>)
    1e56:	6813      	ldr	r3, [r2, #0]
    1e58:	4610      	mov	r0, r2
    1e5a:	b933      	cbnz	r3, 1e6a <_free_r+0x2e>
    1e5c:	6063      	str	r3, [r4, #4]
    1e5e:	6014      	str	r4, [r2, #0]
    1e60:	4628      	mov	r0, r5
    1e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1e66:	f000 b940 	b.w	20ea <__malloc_unlock>
    1e6a:	42a3      	cmp	r3, r4
    1e6c:	d90c      	bls.n	1e88 <_free_r+0x4c>
    1e6e:	6821      	ldr	r1, [r4, #0]
    1e70:	1862      	adds	r2, r4, r1
    1e72:	4293      	cmp	r3, r2
    1e74:	bf04      	itt	eq
    1e76:	681a      	ldreq	r2, [r3, #0]
    1e78:	685b      	ldreq	r3, [r3, #4]
    1e7a:	6063      	str	r3, [r4, #4]
    1e7c:	bf04      	itt	eq
    1e7e:	1852      	addeq	r2, r2, r1
    1e80:	6022      	streq	r2, [r4, #0]
    1e82:	6004      	str	r4, [r0, #0]
    1e84:	e7ec      	b.n	1e60 <_free_r+0x24>
    1e86:	4613      	mov	r3, r2
    1e88:	685a      	ldr	r2, [r3, #4]
    1e8a:	b10a      	cbz	r2, 1e90 <_free_r+0x54>
    1e8c:	42a2      	cmp	r2, r4
    1e8e:	d9fa      	bls.n	1e86 <_free_r+0x4a>
    1e90:	6819      	ldr	r1, [r3, #0]
    1e92:	1858      	adds	r0, r3, r1
    1e94:	42a0      	cmp	r0, r4
    1e96:	d10b      	bne.n	1eb0 <_free_r+0x74>
    1e98:	6820      	ldr	r0, [r4, #0]
    1e9a:	4401      	add	r1, r0
    1e9c:	1858      	adds	r0, r3, r1
    1e9e:	4282      	cmp	r2, r0
    1ea0:	6019      	str	r1, [r3, #0]
    1ea2:	d1dd      	bne.n	1e60 <_free_r+0x24>
    1ea4:	6810      	ldr	r0, [r2, #0]
    1ea6:	6852      	ldr	r2, [r2, #4]
    1ea8:	605a      	str	r2, [r3, #4]
    1eaa:	4401      	add	r1, r0
    1eac:	6019      	str	r1, [r3, #0]
    1eae:	e7d7      	b.n	1e60 <_free_r+0x24>
    1eb0:	d902      	bls.n	1eb8 <_free_r+0x7c>
    1eb2:	230c      	movs	r3, #12
    1eb4:	602b      	str	r3, [r5, #0]
    1eb6:	e7d3      	b.n	1e60 <_free_r+0x24>
    1eb8:	6820      	ldr	r0, [r4, #0]
    1eba:	1821      	adds	r1, r4, r0
    1ebc:	428a      	cmp	r2, r1
    1ebe:	bf04      	itt	eq
    1ec0:	6811      	ldreq	r1, [r2, #0]
    1ec2:	6852      	ldreq	r2, [r2, #4]
    1ec4:	6062      	str	r2, [r4, #4]
    1ec6:	bf04      	itt	eq
    1ec8:	1809      	addeq	r1, r1, r0
    1eca:	6021      	streq	r1, [r4, #0]
    1ecc:	605c      	str	r4, [r3, #4]
    1ece:	e7c7      	b.n	1e60 <_free_r+0x24>
    1ed0:	bd38      	pop	{r3, r4, r5, pc}
    1ed2:	bf00      	nop
    1ed4:	20000150 	.word	0x20000150

00001ed8 <_malloc_r>:
    1ed8:	b570      	push	{r4, r5, r6, lr}
    1eda:	1ccd      	adds	r5, r1, #3
    1edc:	f025 0503 	bic.w	r5, r5, #3
    1ee0:	3508      	adds	r5, #8
    1ee2:	2d0c      	cmp	r5, #12
    1ee4:	bf38      	it	cc
    1ee6:	250c      	movcc	r5, #12
    1ee8:	2d00      	cmp	r5, #0
    1eea:	4606      	mov	r6, r0
    1eec:	db01      	blt.n	1ef2 <_malloc_r+0x1a>
    1eee:	42a9      	cmp	r1, r5
    1ef0:	d903      	bls.n	1efa <_malloc_r+0x22>
    1ef2:	230c      	movs	r3, #12
    1ef4:	6033      	str	r3, [r6, #0]
    1ef6:	2000      	movs	r0, #0
    1ef8:	bd70      	pop	{r4, r5, r6, pc}
    1efa:	f000 f8f5 	bl	20e8 <__malloc_lock>
    1efe:	4a23      	ldr	r2, [pc, #140]	; (1f8c <_malloc_r+0xb4>)
    1f00:	6814      	ldr	r4, [r2, #0]
    1f02:	4621      	mov	r1, r4
    1f04:	b991      	cbnz	r1, 1f2c <_malloc_r+0x54>
    1f06:	4c22      	ldr	r4, [pc, #136]	; (1f90 <_malloc_r+0xb8>)
    1f08:	6823      	ldr	r3, [r4, #0]
    1f0a:	b91b      	cbnz	r3, 1f14 <_malloc_r+0x3c>
    1f0c:	4630      	mov	r0, r6
    1f0e:	f000 f841 	bl	1f94 <_sbrk_r>
    1f12:	6020      	str	r0, [r4, #0]
    1f14:	4629      	mov	r1, r5
    1f16:	4630      	mov	r0, r6
    1f18:	f000 f83c 	bl	1f94 <_sbrk_r>
    1f1c:	1c43      	adds	r3, r0, #1
    1f1e:	d126      	bne.n	1f6e <_malloc_r+0x96>
    1f20:	230c      	movs	r3, #12
    1f22:	6033      	str	r3, [r6, #0]
    1f24:	4630      	mov	r0, r6
    1f26:	f000 f8e0 	bl	20ea <__malloc_unlock>
    1f2a:	e7e4      	b.n	1ef6 <_malloc_r+0x1e>
    1f2c:	680b      	ldr	r3, [r1, #0]
    1f2e:	1b5b      	subs	r3, r3, r5
    1f30:	d41a      	bmi.n	1f68 <_malloc_r+0x90>
    1f32:	2b0b      	cmp	r3, #11
    1f34:	d90f      	bls.n	1f56 <_malloc_r+0x7e>
    1f36:	600b      	str	r3, [r1, #0]
    1f38:	50cd      	str	r5, [r1, r3]
    1f3a:	18cc      	adds	r4, r1, r3
    1f3c:	4630      	mov	r0, r6
    1f3e:	f000 f8d4 	bl	20ea <__malloc_unlock>
    1f42:	f104 000b 	add.w	r0, r4, #11
    1f46:	1d23      	adds	r3, r4, #4
    1f48:	f020 0007 	bic.w	r0, r0, #7
    1f4c:	1ac3      	subs	r3, r0, r3
    1f4e:	d01b      	beq.n	1f88 <_malloc_r+0xb0>
    1f50:	425a      	negs	r2, r3
    1f52:	50e2      	str	r2, [r4, r3]
    1f54:	bd70      	pop	{r4, r5, r6, pc}
    1f56:	428c      	cmp	r4, r1
    1f58:	bf0d      	iteet	eq
    1f5a:	6863      	ldreq	r3, [r4, #4]
    1f5c:	684b      	ldrne	r3, [r1, #4]
    1f5e:	6063      	strne	r3, [r4, #4]
    1f60:	6013      	streq	r3, [r2, #0]
    1f62:	bf18      	it	ne
    1f64:	460c      	movne	r4, r1
    1f66:	e7e9      	b.n	1f3c <_malloc_r+0x64>
    1f68:	460c      	mov	r4, r1
    1f6a:	6849      	ldr	r1, [r1, #4]
    1f6c:	e7ca      	b.n	1f04 <_malloc_r+0x2c>
    1f6e:	1cc4      	adds	r4, r0, #3
    1f70:	f024 0403 	bic.w	r4, r4, #3
    1f74:	42a0      	cmp	r0, r4
    1f76:	d005      	beq.n	1f84 <_malloc_r+0xac>
    1f78:	1a21      	subs	r1, r4, r0
    1f7a:	4630      	mov	r0, r6
    1f7c:	f000 f80a 	bl	1f94 <_sbrk_r>
    1f80:	3001      	adds	r0, #1
    1f82:	d0cd      	beq.n	1f20 <_malloc_r+0x48>
    1f84:	6025      	str	r5, [r4, #0]
    1f86:	e7d9      	b.n	1f3c <_malloc_r+0x64>
    1f88:	bd70      	pop	{r4, r5, r6, pc}
    1f8a:	bf00      	nop
    1f8c:	20000150 	.word	0x20000150
    1f90:	20000154 	.word	0x20000154

00001f94 <_sbrk_r>:
    1f94:	b538      	push	{r3, r4, r5, lr}
    1f96:	4c06      	ldr	r4, [pc, #24]	; (1fb0 <_sbrk_r+0x1c>)
    1f98:	2300      	movs	r3, #0
    1f9a:	4605      	mov	r5, r0
    1f9c:	4608      	mov	r0, r1
    1f9e:	6023      	str	r3, [r4, #0]
    1fa0:	f7fe fc8e 	bl	8c0 <_sbrk>
    1fa4:	1c43      	adds	r3, r0, #1
    1fa6:	d102      	bne.n	1fae <_sbrk_r+0x1a>
    1fa8:	6823      	ldr	r3, [r4, #0]
    1faa:	b103      	cbz	r3, 1fae <_sbrk_r+0x1a>
    1fac:	602b      	str	r3, [r5, #0]
    1fae:	bd38      	pop	{r3, r4, r5, pc}
    1fb0:	20002e88 	.word	0x20002e88

00001fb4 <__sread>:
    1fb4:	b510      	push	{r4, lr}
    1fb6:	460c      	mov	r4, r1
    1fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1fbc:	f000 f896 	bl	20ec <_read_r>
    1fc0:	2800      	cmp	r0, #0
    1fc2:	bfab      	itete	ge
    1fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    1fc6:	89a3      	ldrhlt	r3, [r4, #12]
    1fc8:	181b      	addge	r3, r3, r0
    1fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    1fce:	bfac      	ite	ge
    1fd0:	6563      	strge	r3, [r4, #84]	; 0x54
    1fd2:	81a3      	strhlt	r3, [r4, #12]
    1fd4:	bd10      	pop	{r4, pc}

00001fd6 <__swrite>:
    1fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fda:	461f      	mov	r7, r3
    1fdc:	898b      	ldrh	r3, [r1, #12]
    1fde:	05db      	lsls	r3, r3, #23
    1fe0:	4605      	mov	r5, r0
    1fe2:	460c      	mov	r4, r1
    1fe4:	4616      	mov	r6, r2
    1fe6:	d505      	bpl.n	1ff4 <__swrite+0x1e>
    1fe8:	2302      	movs	r3, #2
    1fea:	2200      	movs	r2, #0
    1fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1ff0:	f000 f868 	bl	20c4 <_lseek_r>
    1ff4:	89a3      	ldrh	r3, [r4, #12]
    1ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    1ffe:	81a3      	strh	r3, [r4, #12]
    2000:	4632      	mov	r2, r6
    2002:	463b      	mov	r3, r7
    2004:	4628      	mov	r0, r5
    2006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    200a:	f000 b817 	b.w	203c <_write_r>

0000200e <__sseek>:
    200e:	b510      	push	{r4, lr}
    2010:	460c      	mov	r4, r1
    2012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2016:	f000 f855 	bl	20c4 <_lseek_r>
    201a:	1c43      	adds	r3, r0, #1
    201c:	89a3      	ldrh	r3, [r4, #12]
    201e:	bf15      	itete	ne
    2020:	6560      	strne	r0, [r4, #84]	; 0x54
    2022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    2026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    202a:	81a3      	strheq	r3, [r4, #12]
    202c:	bf18      	it	ne
    202e:	81a3      	strhne	r3, [r4, #12]
    2030:	bd10      	pop	{r4, pc}

00002032 <__sclose>:
    2032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2036:	f000 b813 	b.w	2060 <_close_r>
	...

0000203c <_write_r>:
    203c:	b538      	push	{r3, r4, r5, lr}
    203e:	4c07      	ldr	r4, [pc, #28]	; (205c <_write_r+0x20>)
    2040:	4605      	mov	r5, r0
    2042:	4608      	mov	r0, r1
    2044:	4611      	mov	r1, r2
    2046:	2200      	movs	r2, #0
    2048:	6022      	str	r2, [r4, #0]
    204a:	461a      	mov	r2, r3
    204c:	f7ff fa5c 	bl	1508 <_write>
    2050:	1c43      	adds	r3, r0, #1
    2052:	d102      	bne.n	205a <_write_r+0x1e>
    2054:	6823      	ldr	r3, [r4, #0]
    2056:	b103      	cbz	r3, 205a <_write_r+0x1e>
    2058:	602b      	str	r3, [r5, #0]
    205a:	bd38      	pop	{r3, r4, r5, pc}
    205c:	20002e88 	.word	0x20002e88

00002060 <_close_r>:
    2060:	b538      	push	{r3, r4, r5, lr}
    2062:	4c06      	ldr	r4, [pc, #24]	; (207c <_close_r+0x1c>)
    2064:	2300      	movs	r3, #0
    2066:	4605      	mov	r5, r0
    2068:	4608      	mov	r0, r1
    206a:	6023      	str	r3, [r4, #0]
    206c:	f7fe fc3a 	bl	8e4 <_close>
    2070:	1c43      	adds	r3, r0, #1
    2072:	d102      	bne.n	207a <_close_r+0x1a>
    2074:	6823      	ldr	r3, [r4, #0]
    2076:	b103      	cbz	r3, 207a <_close_r+0x1a>
    2078:	602b      	str	r3, [r5, #0]
    207a:	bd38      	pop	{r3, r4, r5, pc}
    207c:	20002e88 	.word	0x20002e88

00002080 <_fstat_r>:
    2080:	b538      	push	{r3, r4, r5, lr}
    2082:	4c07      	ldr	r4, [pc, #28]	; (20a0 <_fstat_r+0x20>)
    2084:	2300      	movs	r3, #0
    2086:	4605      	mov	r5, r0
    2088:	4608      	mov	r0, r1
    208a:	4611      	mov	r1, r2
    208c:	6023      	str	r3, [r4, #0]
    208e:	f7fe fc2c 	bl	8ea <_fstat>
    2092:	1c43      	adds	r3, r0, #1
    2094:	d102      	bne.n	209c <_fstat_r+0x1c>
    2096:	6823      	ldr	r3, [r4, #0]
    2098:	b103      	cbz	r3, 209c <_fstat_r+0x1c>
    209a:	602b      	str	r3, [r5, #0]
    209c:	bd38      	pop	{r3, r4, r5, pc}
    209e:	bf00      	nop
    20a0:	20002e88 	.word	0x20002e88

000020a4 <_isatty_r>:
    20a4:	b538      	push	{r3, r4, r5, lr}
    20a6:	4c06      	ldr	r4, [pc, #24]	; (20c0 <_isatty_r+0x1c>)
    20a8:	2300      	movs	r3, #0
    20aa:	4605      	mov	r5, r0
    20ac:	4608      	mov	r0, r1
    20ae:	6023      	str	r3, [r4, #0]
    20b0:	f7fe fc20 	bl	8f4 <_isatty>
    20b4:	1c43      	adds	r3, r0, #1
    20b6:	d102      	bne.n	20be <_isatty_r+0x1a>
    20b8:	6823      	ldr	r3, [r4, #0]
    20ba:	b103      	cbz	r3, 20be <_isatty_r+0x1a>
    20bc:	602b      	str	r3, [r5, #0]
    20be:	bd38      	pop	{r3, r4, r5, pc}
    20c0:	20002e88 	.word	0x20002e88

000020c4 <_lseek_r>:
    20c4:	b538      	push	{r3, r4, r5, lr}
    20c6:	4c07      	ldr	r4, [pc, #28]	; (20e4 <_lseek_r+0x20>)
    20c8:	4605      	mov	r5, r0
    20ca:	4608      	mov	r0, r1
    20cc:	4611      	mov	r1, r2
    20ce:	2200      	movs	r2, #0
    20d0:	6022      	str	r2, [r4, #0]
    20d2:	461a      	mov	r2, r3
    20d4:	f7fe fc10 	bl	8f8 <_lseek>
    20d8:	1c43      	adds	r3, r0, #1
    20da:	d102      	bne.n	20e2 <_lseek_r+0x1e>
    20dc:	6823      	ldr	r3, [r4, #0]
    20de:	b103      	cbz	r3, 20e2 <_lseek_r+0x1e>
    20e0:	602b      	str	r3, [r5, #0]
    20e2:	bd38      	pop	{r3, r4, r5, pc}
    20e4:	20002e88 	.word	0x20002e88

000020e8 <__malloc_lock>:
    20e8:	4770      	bx	lr

000020ea <__malloc_unlock>:
    20ea:	4770      	bx	lr

000020ec <_read_r>:
    20ec:	b538      	push	{r3, r4, r5, lr}
    20ee:	4c07      	ldr	r4, [pc, #28]	; (210c <_read_r+0x20>)
    20f0:	4605      	mov	r5, r0
    20f2:	4608      	mov	r0, r1
    20f4:	4611      	mov	r1, r2
    20f6:	2200      	movs	r2, #0
    20f8:	6022      	str	r2, [r4, #0]
    20fa:	461a      	mov	r2, r3
    20fc:	f7ff f9f2 	bl	14e4 <_read>
    2100:	1c43      	adds	r3, r0, #1
    2102:	d102      	bne.n	210a <_read_r+0x1e>
    2104:	6823      	ldr	r3, [r4, #0]
    2106:	b103      	cbz	r3, 210a <_read_r+0x1e>
    2108:	602b      	str	r3, [r5, #0]
    210a:	bd38      	pop	{r3, r4, r5, pc}
    210c:	20002e88 	.word	0x20002e88

00002110 <CodePage437>:
	...
    2448:	01000000 06186080 18608001 60800106     .....`....`....`
    2458:	80010000 00000060 00000000 66986106     ....`........a.f
    2468:	98618619 00000000 00000000 00000000     ..a.............
    2478:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    2488:	1966fefb 00986186 00000000 80010000     ..f..a..........
    2498:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    24a8:	00000000 04000000 29a60823 1820c106     ........#..).. .
    24b8:	98200304 324c1165 00000008 00000000     .. .e.L2........
    24c8:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    24d8:	0000f6d9 00000000 30c00000 00030618     ...........0....
    24e8:	000000c0 00000000 00000000 00000000     ................
    24f8:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    2508:	10400002 00000000 01000000 02084000     ..@..........@..
    2518:	06186000 18608001 00010208 00000040     .`....`.....@...
    2528:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    2538:	80104290 00000000 00000000 00000000     .B..............
    2548:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    2568:	18000000 c0000306 00001040 00000000     ........@.......
    2578:	00000000 ff000000 0000e0bf 00000000     ................
	...
    259c:	030e3800 0000e080 00000000 08200000     .8............ .
    25ac:	80000104 02041020 10408000 00000208     .... .....@.....
    25bc:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    25cc:	63061b6c f8e0c318 00000000 00000000     l..c............
    25dc:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    25ec:	000000f8 00000000 c1f8e107 061860b0     .............`..
    25fc:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    260c:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    261c:	00f8e167 00000000 40000000 03070c30     g..........@0...
    262c:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    263c:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    264c:	e167a081 000000f8 00000000 60f8e003     ..g............`
    265c:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    266c:	00000000 fefb0f00 20608001 00010408     ..........` ....
    267c:	0c302080 00c00003 00000000 e0030000     . 0.............
    268c:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    269c:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    26ac:	0618609f e1c70003 000000f0 00000000     .`..............
    26bc:	38000000 e080030e 00000000 030e3800     ...8.........8..
    26cc:	0000e080 00000000 00000000 80030e38     ............8...
    26dc:	000000e0 0e380000 40c00003 00000010     ......8....@....
    26ec:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    26fc:	0c300003 00000000 00000000 00000000     ..0.............
    270c:	00fefb0f fefb0f00 00000000 00000000     ................
    271c:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    272c:	0c0c3030 00000003 00000000 f8e10700     00..............
    273c:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    274c:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    275c:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    276c:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    277c:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    278c:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    279c:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    27ac:	00f8e063 00000000 c30f0000 861966f0     c............f..
    27bc:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    27cc:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    27dc:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    27ec:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    27fc:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    280c:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    281c:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    282c:	00000000 07000000 0618f8e1 18608001     ..............`.
    283c:	60800106 e1070618 000000f8 00000000     ...`............
    284c:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    285c:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    286c:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    287c:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    288c:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    289c:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    28ac:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    28bc:	ecb0c31e 0000061b 00000000 f8e00300     ................
    28cc:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    28dc:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    28ec:	c000038c 00030c30 00000000 07000000     ....0...........
    28fc:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    290c:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    291c:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    292c:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    293c:	00f8e167 00000000 fb0f0000 000208fe     g...............
    294c:	02082080 08208000 20800002 00000000     . .... .... ....
    295c:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    296c:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    297c:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    298c:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    299c:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    29ac:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    29bc:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    29cc:	20c00107 80000208 00000020 00000000     ... .... .......
    29dc:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    29ec:	0000fefb 00000000 f8e00300 00030c30     ............0...
    29fc:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    2a0c:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    2a1c:	0618c000 00000000 07000000 030cf0c1     ................
    2a2c:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    2a3c:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    2a68:	00fefb0f 00000000 80030000 00030ce0     ................
    2a78:	00001860 00000000 00000000 00000000     `...............
	...
    2a90:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    2aa0:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    2ab0:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    2ac0:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    2ad0:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    2ae0:	c3061bec f6d9e7b0 00000000 00000000     ................
    2af0:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    2b00:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    2b10:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    2b20:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    2b30:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    2b40:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    2b50:	01000000 00006080 18e08003 60800106     .....`.........`
    2b60:	e1070618 000000f8 00000000 00186000     .............`..
    2b70:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    2b80:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    2b90:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    2ba0:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    2bbc:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    2bd4:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    2bec:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    2c04:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    2c14:	02082080 00000000 00000000 c1fae803     . ..............
    2c24:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    2c34:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    2c44:	00000003 00000000 00000000 e1070000     ................
    2c54:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    2c64:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    2c74:	30c0c00c 00000000 00000000 00000000     ...0............
    2c84:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    2c9c:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    2cb4:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    2ccc:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    2ce8:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    2cf8:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    2d08:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    2d18:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    2d28:	00000000 80010000 01061860 06186080     ........`....`..
    2d38:	18608001 60800106 00000000 0f000000     ..`....`........
    2d48:	0208c003 0cc00003 c0000303 030f0208     ................
    2d58:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    2d90:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    2da0:	f8e06398 00000608 00000000 00669801     .c............f.
    2db0:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    2dc0:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    2dd0:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    2de0:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    2df8:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    2e10:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    2e20:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    2e30:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    2e40:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    2e50:	04fef907 00000003 00000000 07001420     ............ ...
    2e60:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    2e70:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    2e80:	f10730c0 000000fc 00000000 18c00000     .0..............
    2e90:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    2ea0:	00000000 98610600 80030000 010618e0     ......a.........
    2eb0:	06186080 00f8e107 00000000 00000000     .`..............
    2ec0:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    2ed8:	0018c000 18e08003 60800106 e1070618     ...........`....
    2ee8:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    2ef8:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    2f08:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    2f18:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    2f28:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    2f40:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    2f50:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    2f60:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    2f70:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    2f80:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    2f90:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    2fa0:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    2fb0:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    2fc0:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    2fd0:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    2fe0:	00f6d9c7 00000000 01000000 0c006698     .............f..
    2ff0:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    3000:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    3010:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    3020:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    3030:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    3040:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    3050:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    3060:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    3070:	20e00302 80800f08 00000020 00000000     ... .... .......
    3080:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    3090:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    30a0:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    30b0:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    30c0:	fef823b0 00000000 00000000 000060c0     .#...........`..
    30d0:	18e08003 60800106 e1070618 000000f8     .......`........
    30e0:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    30f0:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    3100:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    3118:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    3128:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    3138:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    3148:	1e08c003 00e08308 000080ff 00000000     ................
	...
    3160:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    317c:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    318c:	00c00f3f 00000000 00000000 ff000000     ?...............
    319c:	0003ecbf 00000000 00000000 00000000     ................
	...
    31b4:	18e0bfff 00000006 00000000 00000000     ................
    31c4:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    31d4:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    31e4:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    31f4:	00000000 06180000 18000000 60800106     ...............`
    3204:	80010618 00061860 00000000 00000000     ....`...........
    3214:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    322c:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    323c:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    324c:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    325c:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    326c:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    327c:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    328c:	20800002 80000208 00020820 02082080     ... .... .... ..
    329c:	08208000 20800002 80000208 00020820     .. .... .... ...
    32ac:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    32bc:	00020820 02082080 f8208000 20800f02      .... .... .... 
    32cc:	80000208 00020820 05142080 14504001     .... .... ...@P.
    32dc:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    32ec:	00504001 00000000 00000000 013f0000     .@P...........?.
    32fc:	05145040 14504001 50400105 00000000     @P...@P...@P....
    330c:	00000000 02f80000 0820800f 20800002     .......... .... 
    331c:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    332c:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    333c:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    334c:	05145040 00504001 00000000 00000000     @P...@P.........
    335c:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    336c:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    3384:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    339c:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    33c0:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    33d0:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    33e8:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    340c:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    341c:	20800002 80000208 f0030820 02082080     ... .... .... ..
    342c:	08208000 20800002 00000000 00000000     .. .... ........
    343c:	3f000000 000000f0 00000000 00000000     ...?............
    344c:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    345c:	80000208 00020820 02082080 08208000     .... .... .... .
    346c:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    347c:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    348c:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    349c:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    34b8:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    34c8:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    34ec:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    34fc:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    350c:	50400105 40010514 00000050 00000000     ..@P...@P.......
    351c:	ff000000 00fc0fc0 00000000 00000000     ................
    352c:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    353c:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    354c:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    355c:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    356c:	000000f0 00000000 00000000 00000000     ................
    357c:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    358c:	00020820 00002080 00000000 00000000      .... ..........
    359c:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    35ac:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    35c4:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    35e4:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    35f4:	00002080 00000000 00000000 40f10700     . .............@
    3604:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    3614:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    3624:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    3634:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    3644:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    3664:	80f00300 00020820 02082080 ff208000     .... .... .... .
    3674:	ffffffff ffffffff ffffffff ffffffff     ................
    3684:	ffffffff ffffffff 00000000 00000000     ................
    3694:	3f000000 ffffffff ffffffff ffffffff     ...?............
    36a4:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    36b4:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    36c4:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    36d4:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    36f8:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    3708:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    3718:	63c61861 000000f8 00000000 ff000000     a..c............
    3728:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    3744:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    3754:	fb0f0000 06b080fe 0618c000 c0800103     ................
    3764:	fefb2f20 00000000 00000000 00000000      /..............
    3774:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    378c:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    379c:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    37ac:	06186080 00608001 00000000 00000000     .`....`.........
    37bc:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    37cc:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    37dc:	061becbf e0c31863 000000f8 00000000     ....c...........
    37ec:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    37fc:	00008e33 00000000 fef80300 e1070318     3...............
    380c:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    381c:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    382c:	00204295 00000000 00000000 07000000     .B .............
    383c:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    384c:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    385c:	03186000 0000f8e0 00000000 00000000     .`..............
    386c:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    387c:	000060b0 00000000 0f000000 0000fefb     .`..............
    388c:	00fefb0f fefb0f00 00000000 00000000     ................
    389c:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    38ac:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    38bc:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    38cc:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    38dc:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    38ec:	02082080 08208000 20800002 80000208     . .... .... ....
    38fc:	00020820 02082080 08208000 20800002      .... .... .... 
    390c:	80000208 09240820 00008001 18000000     .... .$.........
    391c:	00000006 00e0bfff 00061800 00000000     ................
	...
    3934:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    394c:	01092460 00000080 00000000 00000000     `$..............
	...
    3970:	80030e38 00000000 00000000 00000000     8...............
	...
    3988:	01000000 00006080 00000000 0f000000     .....`..........
    3998:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    39a8:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    39c4:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    39e8:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    3a10:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
    3a20:	775f6c61 682e7464 00000000 682f2e2e     al_wdt.h....../h
    3a30:	732f6c61 682f6372 695f6c61 00632e6f     al/src/hal_io.c.
    3a40:	682f2e2e 732f6c61 682f6372 755f6c61     ../hal/src/hal_u
    3a50:	74726173 6e79735f 00632e63 40003000     sart_sync.c..0.@
    3a60:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    3a70:	43000400 43000800 43000c00              ...C...C...C

00003a7c <_usarts>:
    3a7c:	00000000 40100004 00030000 00700002     .......@......p.
	...

00003a94 <_i2cms>:
	...

00003aac <_i2css>:
	...

00003abc <sercomspi_regs>:
	...
    3ad0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    3ae0:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    3af0:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    3b00:	00000000                                ....

00003b04 <mulciber.66635>:
    3b04:	03020100 02010004 00020100 01000201     ................
    3b14:	02010002 00020100 01000201 01000002     ................
    3b24:	02010000 00020100 01000201 03020100     ................
    3b34:	00000004 01000100 01000302 02010002     ................
    3b44:	00000403 00000000                       ........

00003b4c <belial.66634>:
    3b4c:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    3b5c:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    3b6c:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    3b7c:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    3b8c:	35c9c9c9 0000363a                       ...5:6..

00003b94 <lucifer.66636>:
    3b94:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    3ba4:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    3bb4:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    3bc4:	00cc0008 01707005 02030303 02d00000     .....pp.........
    3bd4:	00505050 00000055                       PPP.U...

00003bdc <beelzebub.66637>:
    3bdc:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    3bec:	64012201 d4019201 08020702 5f023402     .".d.........4._
    3bfc:	94027802 bb02a602 db02ca02 f902e802     .x..............
    3c0c:	7f031f03 00006968 000a000a 00140014     ....hi..........
    3c1c:	00000014 000a017c 000a017c 00140186     ....|...|.......
    3c2c:	00140000 0122000a 00140186 01220190     ......".......".
    3c3c:	0122000a 012c0014 0122017c 012c0186     .."...,.|."...,.
    3c4c:	012c0014 0136017c 001e0000 00280032     ..,.|.6.....2.(.
    3c5c:	00320000 003c0032 001e0050 00280118     ..2.2.<.P.....(.
    3c6c:	00280046 00be0050 00be0050 00c80118     F.(.P...P.......
    3c7c:	00280118 00be0122 00460000 00500032     ..(.".....F.2.P.
    3c8c:	005a0000 00640032 006e0000 00780032     ..Z.2.d...n.2.x.
    3c9c:	00820000 008c0032 00960000 00a00032     ....2.......2...
    3cac:	00aa0000 00b40032 00be0000 00c80032     ....2.......2...
    3cbc:	00c8012c 00d20172 00dc001e 00e60172     ,...r.......r...
    3ccc:	00f0001e 00fa0172 0104001e 010e0172     ....r.......r...
    3cdc:	0118005a 0122012c 82be50b4 8cbe82aa     Z...,."..P......
    3cec:	64963c8c 64dc3cd2 a08c9682 aadca08c     .<.d.<.d........
    3cfc:	a0e696dc 50f03c78 5a78466e aaaa3c96     ....x<.PnFxZ.<..
    3d0c:	a0dc3cc8 aae6a0d2 6e617254 69722073     .<......Trans ri
    3d1c:	73746867 65726120 6d756820 72206e61     ghts are human r
    3d2c:	74686769 00000073 355e3331 31202b20     ights...13^5 + 1
    3d3c:	20355e36 3731203d 0000355e 69746552     6^5 = 17^5..Reti
    3d4c:	616c7563 676e6974 6c705320 73656e69     culating Splines
    3d5c:	00000000 6c6f6976 65636e65 726f772e     ....violence.wor
    3d6c:	0000736b 2b206953 00425020 6c6c694b     ks..Si + PB.Kill
    3d7c:	6c694220 6e6f696c 65726961 61282073      Billionaires (a
    3d8c:	5420646e 6c6c6972 616e6f69 29657269     nd Trillionaire)
    3d9c:	00000000 65746e49 74736572 206e6920     ....Interest in 
    3dac:	68636574 6f6c6f6e 69207967 6f6e2073     technology is no
    3dbc:	20612074 73726570 6c616e6f 00797469     t a personality.
    3dcc:	50203031 544e4952 52484320 30322824     10 PRINT CHR$(20
    3ddc:	2b352e35 28444e52 3b292931 47203a20     5.5+RND(1)); : G
    3dec:	204f544f 00003031 67206f4e 2e73646f     OTO 10..No gods.
    3dfc:	206f4e20 7473616d 2e737265 206f4e20      No masters. No 
    3e0c:	65747865 6c616e72 62696c20 69726172     external librari
    3e1c:	002e7365 6c6c694b 7a614e20 00007369     es..Kill Nazis..
    3e2c:	6e616954 656d6e61 7153206e 65726175     Tiananmen Square
    3e3c:	38393120 00000039 72656d41 20616369      1989...America 
    3e4c:	20736177 6e756f66 20646564 73206e6f     was founded on s
    3e5c:	6576616c 00007972 72656854 73692065     lavery..There is
    3e6c:	6c6e6f20 61632079 61746970 6e61206c      only capital an
    3e7c:	616c2064 00726f62 6f636e45 67617275     d labor.Encourag
    3e8c:	59532065 54454d4d 20434952 73616c63     e SYMMETRIC clas
    3e9c:	61772073 72616672 00000065 6f676f56     s warfare...Vogo
    3eac:	6f50206e 79727465 00000000 694e2041     n Poetry....A Ni
    3ebc:	54206563 00005954 78696e55 6f706520     ce TTY..Unix epo
    3ecc:	6d206863 73756e69 46783020 61642046     ch minus 0xFF da
    3edc:	00007379 3d202069 35783020 35373366     ys..i  = 0x5f375
    3eec:	20666439 2028202d 3e3e2069 29203120     9df - ( i >> 1 )
    3efc:	0000003b 61657053 7274206b 20687475     ;...Speak truth 
    3f0c:	70206f74 7265776f 2749203b 7573206d     to power; I'm su
    3f1c:	74206572 27796568 6c206c6c 65747369     re they'll liste
    3f2c:	6874206e 74207369 2e656d69 00000000     n this time.....
    3f3c:	63666544 73276e6f 6e616320 656c6563     Defcon's cancele
    3f4c:	32282064 29303230 00000000 73746152     d (2020)....Rats
    3f5c:	7473656e 6f4e203a 6e696874 6f542067     nest: Nothing To
    3f6c:	216f4420 00000000 68207449 36207361      Do!....It has 6
    3f7c:	656b2039 002e7379 61636542 20657375     9 keys..Because 
    3f8c:	342d5456 77203032 61207361 6165726c     VT-420 was alrea
    3f9c:	74207964 6e656b61 00000000 706d6f43     dy taken....Comp
    3fac:	73736572 206e6f69 6f676c61 68746972     ression algorith
    3fbc:	6162206d 20646573 42206e6f 28205042     m based on BBP (
    3fcc:	37393931 00000029 63616554 65682068     1997)...Teach he
    3fdc:	68746c61 736e6920 6e617275 70206563     alth insurance p
    3fec:	69766f72 73726564 206f7420 65646f63     roviders to code
    3ffc:	0000002e 6e617247 65432064 6172746e     ....Grand Centra
    400c:	6148206c 54206b63 50206568 656e616c     l Hack The Plane
    401c:	00000074 69466957 20736920 20746f6e     t...WiFi is not 
    402c:	65726977 7373656c 68744520 656e7265     wireless Etherne
    403c:	00002174 6d6d7544 68742079 20636369     t!..Dummy thicc 
    404c:	65696c63 0000746e 694e2041 54206563     client..A Nice T
    405c:	202e5954 4f206e41 6f43204b 7475706d     TY. An OK Comput
    406c:	002e7265 65545355 6964656c 6e6f646c     er..USTeledildon
    407c:	00736369 696c6f53 69726164 69207974     ics.Solidarity i
    408c:	6f6e2073 20612074 2077656e 6d617266     s not a new fram
    409c:	726f7765 0000006b 61657242 616f6264     ework...Breadboa
    40ac:	6e696472 73492067 746f4e20 43204120     rding Is Not A C
    40bc:	656d6972 00000000 2066664f 6f207962     rime....Off by o
    40cc:	6520656e 726f7272 72612073 6f632065     ne errors are co
    40dc:	6e6f6d6d 00000000                       mmon....

000040e4 <_global_impure_ptr>:
    40e4:	2000003c                                <.. 

000040e8 <__sf_fake_stderr>:
	...

00004108 <__sf_fake_stdin>:
	...

00004128 <__sf_fake_stdout>:
	...

00004148 <_init>:
    4148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    414a:	bf00      	nop
    414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    414e:	bc08      	pop	{r3}
    4150:	469e      	mov	lr, r3
    4152:	4770      	bx	lr

00004154 <__init_array_start>:
    4154:	00000289 	.word	0x00000289

00004158 <_fini>:
    4158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    415a:	bf00      	nop
    415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    415e:	bc08      	pop	{r3}
    4160:	469e      	mov	lr, r3
    4162:	4770      	bx	lr

00004164 <__fini_array_start>:
    4164:	00000265 	.word	0x00000265
