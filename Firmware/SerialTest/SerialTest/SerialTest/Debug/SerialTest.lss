
SerialTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004824  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a0  20000000  00004824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200a0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200a0  2**0
                  CONTENTS
  4 .bss          00002dec  200000a0  000048c4  000200a0  2**2
                  ALLOC
  5 .stack        0000c004  20002e8c  000076b0  000200a0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200ce  2**0
                  CONTENTS, READONLY
  8 .debug_info   00020ad3  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000361a  00000000  00000000  00040bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ac97  00000000  00000000  00044214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a78  00000000  00000000  0004eeab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b48  00000000  00000000  0004f923  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fbc5  00000000  00000000  0005046b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000155b7  00000000  00000000  00080030  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fa124  00000000  00000000  000955e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000021b4  00000000  00000000  0018f70c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 ee 00 20 79 05 00 00 75 05 00 00 75 05 00 00     ... y...u...u...
      10:	75 05 00 00 75 05 00 00 75 05 00 00 00 00 00 00     u...u...u.......
	...
      2c:	75 05 00 00 75 05 00 00 00 00 00 00 75 05 00 00     u...u.......u...
      3c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      4c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      5c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      6c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      7c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      8c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      9c:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      ac:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      bc:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      cc:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
      dc:	75 05 00 00 75 05 00 00 75 05 00 00 00 00 00 00     u...u...u.......
	...
      f4:	15 0b 00 00 75 05 00 00 75 05 00 00 75 05 00 00     ....u...u...u...
     104:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     114:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     124:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     134:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     144:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     154:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     164:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     174:	75 05 00 00 00 00 00 00 00 00 00 00 75 05 00 00     u...........u...
     184:	75 05 00 00 75 05 00 00 75 05 00 00 00 00 00 00     u...u...u.......
     194:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1a4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1b4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1c4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1d4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1e4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     1f4:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     204:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     214:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     224:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     234:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     244:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...
     254:	75 05 00 00 75 05 00 00 75 05 00 00 75 05 00 00     u...u...u...u...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000a0 	.word	0x200000a0
     280:	00000000 	.word	0x00000000
     284:	00004824 	.word	0x00004824

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004824 	.word	0x00004824
     2c4:	200000a4 	.word	0x200000a4
     2c8:	00004824 	.word	0x00004824
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	stdio_redirect_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	0000068d 	.word	0x0000068d
     2e0:	000016a9 	.word	0x000016a9

000002e4 <drawChar>:
originModeState originMode = ABSOLUTE;



void drawChar(uint8_t character)
{
     2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2e6:	b0e5      	sub	sp, #404	; 0x194
     2e8:	4606      	mov	r6, r0

	uint16_t x = xCharPos;
     2ea:	4a74      	ldr	r2, [pc, #464]	; (4bc <drawChar+0x1d8>)
     2ec:	8813      	ldrh	r3, [r2, #0]
	uint16_t y = yCharPos;
     2ee:	8852      	ldrh	r2, [r2, #2]
	
	uint16_t tempForeground;
	uint16_t tempBackground;
	
	uint32_t tempColor = consoleColors[x][y];
     2f0:	0059      	lsls	r1, r3, #1
     2f2:	18cc      	adds	r4, r1, r3
     2f4:	00e0      	lsls	r0, r4, #3
     2f6:	4410      	add	r0, r2
     2f8:	4c71      	ldr	r4, [pc, #452]	; (4c0 <drawChar+0x1dc>)
     2fa:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
	
	tempForeground = (tempColor >> 16);
     2fe:	0c25      	lsrs	r5, r4, #16
	tempBackground = consoleColors[x][y] & 0xFFFF;
     300:	b2a4      	uxth	r4, r4
	
	
	consoleDisplay[x][y] = character;
     302:	4419      	add	r1, r3
     304:	00c8      	lsls	r0, r1, #3
     306:	496f      	ldr	r1, [pc, #444]	; (4c4 <drawChar+0x1e0>)
     308:	4401      	add	r1, r0
     30a:	548e      	strb	r6, [r1, r2]
	
	uint8_t displayFont[10][20];
	uint8_t tempFontStorage[200];
	uint8_t k = 0;
	
	REG_PORT_OUTCLR1 = LCD_CS;
     30c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
     310:	496d      	ldr	r1, [pc, #436]	; (4c8 <drawChar+0x1e4>)
     312:	6008      	str	r0, [r1, #0]
	setXY(x*10,y*20,x*10+9,y*20+19);
     314:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     318:	0058      	lsls	r0, r3, #1
     31a:	b280      	uxth	r0, r0
     31c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     320:	0091      	lsls	r1, r2, #2
     322:	b289      	uxth	r1, r1
     324:	f101 0313 	add.w	r3, r1, #19
     328:	f100 0209 	add.w	r2, r0, #9
     32c:	b29b      	uxth	r3, r3
     32e:	b292      	uxth	r2, r2
     330:	4f66      	ldr	r7, [pc, #408]	; (4cc <drawChar+0x1e8>)
     332:	47b8      	blx	r7
	
	//reformat the character into a 10x20 array:
	//first transmute it into tempFontStorage
	for(uint16_t i=0; i <= 24; i++)
     334:	2700      	movs	r7, #0
	uint8_t k = 0;
     336:	463b      	mov	r3, r7
	for(uint16_t i=0; i <= 24; i++)
     338:	e01a      	b.n	370 <drawChar+0x8c>
			{
				tempFontStorage[k] = 0xFF;
			}
			else
			{
				tempFontStorage[k] = 0x00;
     33a:	2200      	movs	r2, #0
     33c:	f80d 2003 	strb.w	r2, [sp, r3]
			}
			k++;
     340:	3301      	adds	r3, #1
     342:	b2db      	uxtb	r3, r3
		for(int j=0;j<8;j++)
     344:	3001      	adds	r0, #1
     346:	2807      	cmp	r0, #7
     348:	dc10      	bgt.n	36c <drawChar+0x88>
			if((CodePage437[character][i]&(1<<(7-j)))!=0)
     34a:	eb06 0286 	add.w	r2, r6, r6, lsl #2
     34e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
     352:	495f      	ldr	r1, [pc, #380]	; (4d0 <drawChar+0x1ec>)
     354:	440a      	add	r2, r1
     356:	5dd2      	ldrb	r2, [r2, r7]
     358:	f1c0 0107 	rsb	r1, r0, #7
     35c:	410a      	asrs	r2, r1
     35e:	f012 0f01 	tst.w	r2, #1
     362:	d0ea      	beq.n	33a <drawChar+0x56>
				tempFontStorage[k] = 0xFF;
     364:	22ff      	movs	r2, #255	; 0xff
     366:	f80d 2003 	strb.w	r2, [sp, r3]
     36a:	e7e9      	b.n	340 <drawChar+0x5c>
	for(uint16_t i=0; i <= 24; i++)
     36c:	3701      	adds	r7, #1
     36e:	b2bf      	uxth	r7, r7
     370:	2f18      	cmp	r7, #24
     372:	d801      	bhi.n	378 <drawChar+0x94>
     374:	2000      	movs	r0, #0
     376:	e7e6      	b.n	346 <drawChar+0x62>
     378:	2600      	movs	r6, #0
     37a:	4631      	mov	r1, r6
     37c:	e01e      	b.n	3bc <drawChar+0xd8>
	{
		for(uint8_t j = 0; j <= 19 ; j++)
		{
			if(tempFontStorage[k] == 0xFF)
			{
				displayFont[i][j] = 0xFF;	
     37e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     382:	0082      	lsls	r2, r0, #2
     384:	a864      	add	r0, sp, #400	; 0x190
     386:	4402      	add	r2, r0
     388:	441a      	add	r2, r3
     38a:	20ff      	movs	r0, #255	; 0xff
     38c:	f802 0cc8 	strb.w	r0, [r2, #-200]
			}
			else
			{
				displayFont[i][j] = 0x00;
			}
			k++;
     390:	3101      	adds	r1, #1
     392:	b2c9      	uxtb	r1, r1
		for(uint8_t j = 0; j <= 19 ; j++)
     394:	3301      	adds	r3, #1
     396:	b2db      	uxtb	r3, r3
     398:	2b13      	cmp	r3, #19
     39a:	d80d      	bhi.n	3b8 <drawChar+0xd4>
			if(tempFontStorage[k] == 0xFF)
     39c:	f81d 2001 	ldrb.w	r2, [sp, r1]
     3a0:	2aff      	cmp	r2, #255	; 0xff
     3a2:	d0ec      	beq.n	37e <drawChar+0x9a>
				displayFont[i][j] = 0x00;
     3a4:	eb06 0086 	add.w	r0, r6, r6, lsl #2
     3a8:	0082      	lsls	r2, r0, #2
     3aa:	a864      	add	r0, sp, #400	; 0x190
     3ac:	4402      	add	r2, r0
     3ae:	441a      	add	r2, r3
     3b0:	2000      	movs	r0, #0
     3b2:	f802 0cc8 	strb.w	r0, [r2, #-200]
     3b6:	e7eb      	b.n	390 <drawChar+0xac>
	for(uint8_t i = 0; i <= 9 ; i++)
     3b8:	3601      	adds	r6, #1
     3ba:	b2f6      	uxtb	r6, r6
     3bc:	2e09      	cmp	r6, #9
     3be:	d801      	bhi.n	3c4 <drawChar+0xe0>
     3c0:	2300      	movs	r3, #0
     3c2:	e7e9      	b.n	398 <drawChar+0xb4>
		}
	}
	
	//process displayFont if it is bold, first bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],1) == 1)
     3c4:	4a3d      	ldr	r2, [pc, #244]	; (4bc <drawChar+0x1d8>)
     3c6:	8813      	ldrh	r3, [r2, #0]
     3c8:	8851      	ldrh	r1, [r2, #2]
     3ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     3ce:	00da      	lsls	r2, r3, #3
     3d0:	4b40      	ldr	r3, [pc, #256]	; (4d4 <drawChar+0x1f0>)
     3d2:	4413      	add	r3, r2
     3d4:	5c5e      	ldrb	r6, [r3, r1]
     3d6:	f016 0f02 	tst.w	r6, #2
     3da:	d125      	bne.n	428 <drawChar+0x144>
			}
		}
	}
	
	//process displayfont if underscore, fourth bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],4) == 1)
     3dc:	f016 0f10 	tst.w	r6, #16
     3e0:	d124      	bne.n	42c <drawChar+0x148>
			displayFont[9][i] = 0xFF;
		}
	}
	
	//Process inverse video, compare 7th bit of consoleSGR
	if(BitVal(consoleSGR[xCharPos][yCharPos],7) == 0)
     3e2:	09f3      	lsrs	r3, r6, #7
     3e4:	d047      	beq.n	476 <drawChar+0x192>
     3e6:	2700      	movs	r7, #0
     3e8:	e05e      	b.n	4a8 <drawChar+0x1c4>
					displayFont[i][j] = 0xFF;
     3ea:	eb00 0180 	add.w	r1, r0, r0, lsl #2
     3ee:	008b      	lsls	r3, r1, #2
     3f0:	a964      	add	r1, sp, #400	; 0x190
     3f2:	440b      	add	r3, r1
     3f4:	4413      	add	r3, r2
     3f6:	21ff      	movs	r1, #255	; 0xff
     3f8:	f803 1cc8 	strb.w	r1, [r3, #-200]
			for(uint8_t j = 0; j <= 19 ; j++)
     3fc:	3201      	adds	r2, #1
     3fe:	b2d2      	uxtb	r2, r2
     400:	2a13      	cmp	r2, #19
     402:	d80b      	bhi.n	41c <drawChar+0x138>
				if(displayFont[i-1][j] == 0xFF)
     404:	1e41      	subs	r1, r0, #1
     406:	eb01 0181 	add.w	r1, r1, r1, lsl #2
     40a:	008b      	lsls	r3, r1, #2
     40c:	a964      	add	r1, sp, #400	; 0x190
     40e:	440b      	add	r3, r1
     410:	4413      	add	r3, r2
     412:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
     416:	2bff      	cmp	r3, #255	; 0xff
     418:	d1f0      	bne.n	3fc <drawChar+0x118>
     41a:	e7e6      	b.n	3ea <drawChar+0x106>
		for(uint8_t i = 9; i >= 1 ; i--)
     41c:	3801      	subs	r0, #1
     41e:	b2c0      	uxtb	r0, r0
     420:	2800      	cmp	r0, #0
     422:	d0db      	beq.n	3dc <drawChar+0xf8>
     424:	2200      	movs	r2, #0
     426:	e7eb      	b.n	400 <drawChar+0x11c>
     428:	2009      	movs	r0, #9
     42a:	e7f9      	b.n	420 <drawChar+0x13c>
     42c:	2300      	movs	r3, #0
		for(int i = 0 ; i <= 9 ; i++)
     42e:	2b09      	cmp	r3, #9
     430:	dcd7      	bgt.n	3e2 <drawChar+0xfe>
			displayFont[9][i] = 0xFF;
     432:	aa64      	add	r2, sp, #400	; 0x190
     434:	441a      	add	r2, r3
     436:	21ff      	movs	r1, #255	; 0xff
     438:	f802 1c14 	strb.w	r1, [r2, #-20]
		for(int i = 0 ; i <= 9 ; i++)
     43c:	3301      	adds	r3, #1
     43e:	e7f6      	b.n	42e <drawChar+0x14a>
		{
			for(uint8_t j = 0; j <= 19 ; j++)
			{
				if(displayFont[i][j] == 0xFF)
				{
					setPixel(tempForeground);
     440:	4628      	mov	r0, r5
     442:	4b25      	ldr	r3, [pc, #148]	; (4d8 <drawChar+0x1f4>)
     444:	4798      	blx	r3
			for(uint8_t j = 0; j <= 19 ; j++)
     446:	3601      	adds	r6, #1
     448:	b2f6      	uxtb	r6, r6
     44a:	2e13      	cmp	r6, #19
     44c:	d80d      	bhi.n	46a <drawChar+0x186>
				if(displayFont[i][j] == 0xFF)
     44e:	eb07 0287 	add.w	r2, r7, r7, lsl #2
     452:	0093      	lsls	r3, r2, #2
     454:	aa64      	add	r2, sp, #400	; 0x190
     456:	4413      	add	r3, r2
     458:	4433      	add	r3, r6
     45a:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
     45e:	2bff      	cmp	r3, #255	; 0xff
     460:	d0ee      	beq.n	440 <drawChar+0x15c>
				}
				else
				{
					setPixel(tempBackground);
     462:	4620      	mov	r0, r4
     464:	4b1c      	ldr	r3, [pc, #112]	; (4d8 <drawChar+0x1f4>)
     466:	4798      	blx	r3
     468:	e7ed      	b.n	446 <drawChar+0x162>
		for(uint8_t i = 0; i <= 9 ; i++)
     46a:	3701      	adds	r7, #1
     46c:	b2ff      	uxtb	r7, r7
     46e:	2f09      	cmp	r7, #9
     470:	d81e      	bhi.n	4b0 <drawChar+0x1cc>
     472:	2600      	movs	r6, #0
     474:	e7e9      	b.n	44a <drawChar+0x166>
     476:	2700      	movs	r7, #0
     478:	e7f9      	b.n	46e <drawChar+0x18a>
				{
					setPixel(tempForeground);
				}
				else
				{
					setPixel(tempBackground);
     47a:	4620      	mov	r0, r4
     47c:	4b16      	ldr	r3, [pc, #88]	; (4d8 <drawChar+0x1f4>)
     47e:	4798      	blx	r3
			for(uint8_t j = 0; j <= 19 ; j++)
     480:	3601      	adds	r6, #1
     482:	b2f6      	uxtb	r6, r6
     484:	2e13      	cmp	r6, #19
     486:	d80d      	bhi.n	4a4 <drawChar+0x1c0>
				if(displayFont[i][j] != 0xFF)
     488:	eb07 0287 	add.w	r2, r7, r7, lsl #2
     48c:	0093      	lsls	r3, r2, #2
     48e:	aa64      	add	r2, sp, #400	; 0x190
     490:	4413      	add	r3, r2
     492:	4433      	add	r3, r6
     494:	f813 3cc8 	ldrb.w	r3, [r3, #-200]
     498:	2bff      	cmp	r3, #255	; 0xff
     49a:	d0ee      	beq.n	47a <drawChar+0x196>
					setPixel(tempForeground);
     49c:	4628      	mov	r0, r5
     49e:	4b0e      	ldr	r3, [pc, #56]	; (4d8 <drawChar+0x1f4>)
     4a0:	4798      	blx	r3
     4a2:	e7ed      	b.n	480 <drawChar+0x19c>
		for(uint8_t i = 0; i <= 9 ; i++)
     4a4:	3701      	adds	r7, #1
     4a6:	b2ff      	uxtb	r7, r7
     4a8:	2f09      	cmp	r7, #9
     4aa:	d801      	bhi.n	4b0 <drawChar+0x1cc>
     4ac:	2600      	movs	r6, #0
     4ae:	e7e9      	b.n	484 <drawChar+0x1a0>
				}
			}
		}		
	}
	
	REG_PORT_OUTSET1 = LCD_CS;
     4b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     4b4:	4b09      	ldr	r3, [pc, #36]	; (4dc <drawChar+0x1f8>)
     4b6:	601a      	str	r2, [r3, #0]
}
     4b8:	b065      	add	sp, #404	; 0x194
     4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4bc:	200000bc 	.word	0x200000bc
     4c0:	20001060 	.word	0x20001060
     4c4:	20000160 	.word	0x20000160
     4c8:	41008094 	.word	0x41008094
     4cc:	00000e35 	.word	0x00000e35
     4d0:	000027c8 	.word	0x000027c8
     4d4:	200008e0 	.word	0x200008e0
     4d8:	00000f5d 	.word	0x00000f5d
     4dc:	41008098 	.word	0x41008098

000004e0 <writeString>:
	cursorBlinkState = !cursorBlinkState;
	
}

void writeString(const char str[])
{
     4e0:	b570      	push	{r4, r5, r6, lr}
     4e2:	4606      	mov	r6, r0
	int length = strlen(str);
     4e4:	4b09      	ldr	r3, [pc, #36]	; (50c <writeString+0x2c>)
     4e6:	4798      	blx	r3
     4e8:	4605      	mov	r5, r0
	for(int i = 0; i < length; i++)
     4ea:	2400      	movs	r4, #0
     4ec:	e000      	b.n	4f0 <writeString+0x10>
     4ee:	3401      	adds	r4, #1
     4f0:	42ac      	cmp	r4, r5
     4f2:	da0a      	bge.n	50a <writeString+0x2a>
	{
		drawChar(str[i]);
     4f4:	5d30      	ldrb	r0, [r6, r4]
     4f6:	4b06      	ldr	r3, [pc, #24]	; (510 <writeString+0x30>)
     4f8:	4798      	blx	r3
		if(xCharPos <= 80)
     4fa:	4b06      	ldr	r3, [pc, #24]	; (514 <writeString+0x34>)
     4fc:	881b      	ldrh	r3, [r3, #0]
     4fe:	2b50      	cmp	r3, #80	; 0x50
     500:	d8f5      	bhi.n	4ee <writeString+0xe>
		xCharPos++;
     502:	3301      	adds	r3, #1
     504:	4a03      	ldr	r2, [pc, #12]	; (514 <writeString+0x34>)
     506:	8013      	strh	r3, [r2, #0]
     508:	e7f1      	b.n	4ee <writeString+0xe>
	}
}
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	00001949 	.word	0x00001949
     510:	000002e5 	.word	0x000002e5
     514:	200000bc 	.word	0x200000bc

00000518 <nullifyConsole>:

void nullifyConsole(void)
{
	for(int i = 0 ; i < 80 ; i++)
     518:	2000      	movs	r0, #0
     51a:	e002      	b.n	522 <nullifyConsole+0xa>
			consoleDisplay[i][j] = 0x00;
			consoleSGR[i][j] = 0x00;
			consoleColors[i][j] = 0xFFFF0000;
		}
	}	
}
     51c:	bc30      	pop	{r4, r5}
     51e:	4770      	bx	lr
	for(int i = 0 ; i < 80 ; i++)
     520:	3001      	adds	r0, #1
     522:	284f      	cmp	r0, #79	; 0x4f
     524:	dc1e      	bgt.n	564 <nullifyConsole+0x4c>
     526:	2200      	movs	r2, #0
		for(int j = 0 ; j < 24 ; j++)
     528:	2a17      	cmp	r2, #23
     52a:	dcf9      	bgt.n	520 <nullifyConsole+0x8>
{
     52c:	b430      	push	{r4, r5}
			consoleDisplay[i][j] = 0x00;
     52e:	0043      	lsls	r3, r0, #1
     530:	1819      	adds	r1, r3, r0
     532:	00cc      	lsls	r4, r1, #3
     534:	490c      	ldr	r1, [pc, #48]	; (568 <nullifyConsole+0x50>)
     536:	4421      	add	r1, r4
     538:	2400      	movs	r4, #0
     53a:	548c      	strb	r4, [r1, r2]
			consoleSGR[i][j] = 0x00;
     53c:	1819      	adds	r1, r3, r0
     53e:	00cd      	lsls	r5, r1, #3
     540:	490a      	ldr	r1, [pc, #40]	; (56c <nullifyConsole+0x54>)
     542:	4429      	add	r1, r5
     544:	548c      	strb	r4, [r1, r2]
			consoleColors[i][j] = 0xFFFF0000;
     546:	4629      	mov	r1, r5
     548:	4411      	add	r1, r2
     54a:	f5a4 3480 	sub.w	r4, r4, #65536	; 0x10000
     54e:	4b08      	ldr	r3, [pc, #32]	; (570 <nullifyConsole+0x58>)
     550:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
		for(int j = 0 ; j < 24 ; j++)
     554:	3201      	adds	r2, #1
     556:	2a17      	cmp	r2, #23
     558:	dde9      	ble.n	52e <nullifyConsole+0x16>
	for(int i = 0 ; i < 80 ; i++)
     55a:	3001      	adds	r0, #1
     55c:	284f      	cmp	r0, #79	; 0x4f
     55e:	dcdd      	bgt.n	51c <nullifyConsole+0x4>
     560:	2200      	movs	r2, #0
     562:	e7f8      	b.n	556 <nullifyConsole+0x3e>
     564:	4770      	bx	lr
     566:	bf00      	nop
     568:	20000160 	.word	0x20000160
     56c:	200008e0 	.word	0x200008e0
     570:	20001060 	.word	0x20001060

00000574 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     574:	e7fe      	b.n	574 <Dummy_Handler>
	...

00000578 <Reset_Handler>:
{
     578:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     57a:	4b15      	ldr	r3, [pc, #84]	; (5d0 <Reset_Handler+0x58>)
     57c:	4a15      	ldr	r2, [pc, #84]	; (5d4 <Reset_Handler+0x5c>)
     57e:	429a      	cmp	r2, r3
     580:	d009      	beq.n	596 <Reset_Handler+0x1e>
     582:	4b13      	ldr	r3, [pc, #76]	; (5d0 <Reset_Handler+0x58>)
     584:	4a13      	ldr	r2, [pc, #76]	; (5d4 <Reset_Handler+0x5c>)
     586:	e003      	b.n	590 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     588:	6811      	ldr	r1, [r2, #0]
     58a:	6019      	str	r1, [r3, #0]
     58c:	3304      	adds	r3, #4
     58e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     590:	4911      	ldr	r1, [pc, #68]	; (5d8 <Reset_Handler+0x60>)
     592:	428b      	cmp	r3, r1
     594:	d3f8      	bcc.n	588 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     596:	4b11      	ldr	r3, [pc, #68]	; (5dc <Reset_Handler+0x64>)
     598:	e002      	b.n	5a0 <Reset_Handler+0x28>
                *pDest++ = 0;
     59a:	2200      	movs	r2, #0
     59c:	601a      	str	r2, [r3, #0]
     59e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     5a0:	4a0f      	ldr	r2, [pc, #60]	; (5e0 <Reset_Handler+0x68>)
     5a2:	4293      	cmp	r3, r2
     5a4:	d3f9      	bcc.n	59a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     5a6:	4b0f      	ldr	r3, [pc, #60]	; (5e4 <Reset_Handler+0x6c>)
     5a8:	4a0f      	ldr	r2, [pc, #60]	; (5e8 <Reset_Handler+0x70>)
     5aa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     5ae:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     5b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     5b4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     5b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     5bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     5c0:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     5c4:	4b09      	ldr	r3, [pc, #36]	; (5ec <Reset_Handler+0x74>)
     5c6:	4798      	blx	r3
        main();
     5c8:	4b09      	ldr	r3, [pc, #36]	; (5f0 <Reset_Handler+0x78>)
     5ca:	4798      	blx	r3
     5cc:	e7fe      	b.n	5cc <Reset_Handler+0x54>
     5ce:	bf00      	nop
     5d0:	20000000 	.word	0x20000000
     5d4:	00004824 	.word	0x00004824
     5d8:	200000a0 	.word	0x200000a0
     5dc:	200000a0 	.word	0x200000a0
     5e0:	20002e8c 	.word	0x20002e8c
     5e4:	e000ed00 	.word	0xe000ed00
     5e8:	00000000 	.word	0x00000000
     5ec:	000016c9 	.word	0x000016c9
     5f0:	00001245 	.word	0x00001245

000005f4 <USART_0_PORT_init>:
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f4:	4b10      	ldr	r3, [pc, #64]	; (638 <USART_0_PORT_init+0x44>)
     5f6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     5fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5fe:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     602:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     606:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     60a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     60e:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     616:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     61a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     61e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     622:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     626:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     62a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     62e:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
     636:	4770      	bx	lr
     638:	41008000 	.word	0x41008000

0000063c <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     63c:	4b06      	ldr	r3, [pc, #24]	; (658 <USART_0_CLOCK_init+0x1c>)
     63e:	2242      	movs	r2, #66	; 0x42
     640:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     644:	2243      	movs	r2, #67	; 0x43
     646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBAMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     64a:	4a04      	ldr	r2, [pc, #16]	; (65c <USART_0_CLOCK_init+0x20>)
     64c:	6953      	ldr	r3, [r2, #20]
     64e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     652:	6153      	str	r3, [r2, #20]
     654:	4770      	bx	lr
     656:	bf00      	nop
     658:	40001c00 	.word	0x40001c00
     65c:	40000800 	.word	0x40000800

00000660 <USART_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void USART_0_init(void)
{
     660:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
     662:	4b05      	ldr	r3, [pc, #20]	; (678 <USART_0_init+0x18>)
     664:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM0, (void *)NULL);
     666:	2200      	movs	r2, #0
     668:	4904      	ldr	r1, [pc, #16]	; (67c <USART_0_init+0x1c>)
     66a:	4805      	ldr	r0, [pc, #20]	; (680 <USART_0_init+0x20>)
     66c:	4b05      	ldr	r3, [pc, #20]	; (684 <USART_0_init+0x24>)
     66e:	4798      	blx	r3
	USART_0_PORT_init();
     670:	4b05      	ldr	r3, [pc, #20]	; (688 <USART_0_init+0x28>)
     672:	4798      	blx	r3
     674:	bd08      	pop	{r3, pc}
     676:	bf00      	nop
     678:	0000063d 	.word	0x0000063d
     67c:	40003000 	.word	0x40003000
     680:	20002e64 	.word	0x20002e64
     684:	0000083d 	.word	0x0000083d
     688:	000005f5 	.word	0x000005f5

0000068c <system_init>:
}

void system_init(void)
{
     68c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     68e:	4b12      	ldr	r3, [pc, #72]	; (6d8 <system_init+0x4c>)
     690:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     692:	4b12      	ldr	r3, [pc, #72]	; (6dc <system_init+0x50>)
     694:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     698:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     69a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     69e:	6299      	str	r1, [r3, #40]	; 0x28
     6a0:	490f      	ldr	r1, [pc, #60]	; (6e0 <system_init+0x54>)
     6a2:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6a4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6a6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     6aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     6b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ca:	f042 020c 	orr.w	r2, r2, #12
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	                      // <GPIO_PIN_FUNCTION_L"> L
	                      // <GPIO_PIN_FUNCTION_M"> M
	                      // <GPIO_PIN_FUNCTION_N"> N
	                      GPIO_PIN_FUNCTION_M);

	USART_0_init();
     6d2:	4b04      	ldr	r3, [pc, #16]	; (6e4 <system_init+0x58>)
     6d4:	4798      	blx	r3
     6d6:	bd08      	pop	{r3, pc}
     6d8:	00000921 	.word	0x00000921
     6dc:	41008000 	.word	0x41008000
     6e0:	c0000001 	.word	0xc0000001
     6e4:	00000661 	.word	0x00000661

000006e8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     6e8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     6ea:	4b04      	ldr	r3, [pc, #16]	; (6fc <delay_ms+0x14>)
     6ec:	681c      	ldr	r4, [r3, #0]
     6ee:	4b04      	ldr	r3, [pc, #16]	; (700 <delay_ms+0x18>)
     6f0:	4798      	blx	r3
     6f2:	4601      	mov	r1, r0
     6f4:	4620      	mov	r0, r4
     6f6:	4b03      	ldr	r3, [pc, #12]	; (704 <delay_ms+0x1c>)
     6f8:	4798      	blx	r3
     6fa:	bd10      	pop	{r4, pc}
     6fc:	200000c4 	.word	0x200000c4
     700:	000008f9 	.word	0x000008f9
     704:	00000919 	.word	0x00000919

00000708 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     708:	b570      	push	{r4, r5, r6, lr}
     70a:	460d      	mov	r5, r1
     70c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     70e:	4604      	mov	r4, r0
     710:	b168      	cbz	r0, 72e <io_write+0x26>
     712:	b151      	cbz	r1, 72a <io_write+0x22>
     714:	2001      	movs	r0, #1
     716:	2234      	movs	r2, #52	; 0x34
     718:	4906      	ldr	r1, [pc, #24]	; (734 <io_write+0x2c>)
     71a:	4b07      	ldr	r3, [pc, #28]	; (738 <io_write+0x30>)
     71c:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     71e:	6823      	ldr	r3, [r4, #0]
     720:	4632      	mov	r2, r6
     722:	4629      	mov	r1, r5
     724:	4620      	mov	r0, r4
     726:	4798      	blx	r3
}
     728:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     72a:	2000      	movs	r0, #0
     72c:	e7f3      	b.n	716 <io_write+0xe>
     72e:	2000      	movs	r0, #0
     730:	e7f1      	b.n	716 <io_write+0xe>
     732:	bf00      	nop
     734:	000040c8 	.word	0x000040c8
     738:	000008b5 	.word	0x000008b5

0000073c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     73c:	b570      	push	{r4, r5, r6, lr}
     73e:	460d      	mov	r5, r1
     740:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     742:	4604      	mov	r4, r0
     744:	b168      	cbz	r0, 762 <io_read+0x26>
     746:	b151      	cbz	r1, 75e <io_read+0x22>
     748:	2001      	movs	r0, #1
     74a:	223d      	movs	r2, #61	; 0x3d
     74c:	4906      	ldr	r1, [pc, #24]	; (768 <io_read+0x2c>)
     74e:	4b07      	ldr	r3, [pc, #28]	; (76c <io_read+0x30>)
     750:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     752:	6863      	ldr	r3, [r4, #4]
     754:	4632      	mov	r2, r6
     756:	4629      	mov	r1, r5
     758:	4620      	mov	r0, r4
     75a:	4798      	blx	r3
}
     75c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     75e:	2000      	movs	r0, #0
     760:	e7f3      	b.n	74a <io_read+0xe>
     762:	2000      	movs	r0, #0
     764:	e7f1      	b.n	74a <io_read+0xe>
     766:	bf00      	nop
     768:	000040c8 	.word	0x000040c8
     76c:	000008b5 	.word	0x000008b5

00000770 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     772:	460e      	mov	r6, r1
     774:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     776:	4605      	mov	r5, r0
     778:	b308      	cbz	r0, 7be <usart_sync_write+0x4e>
     77a:	b311      	cbz	r1, 7c2 <usart_sync_write+0x52>
     77c:	bb1a      	cbnz	r2, 7c6 <usart_sync_write+0x56>
     77e:	2000      	movs	r0, #0
     780:	22f1      	movs	r2, #241	; 0xf1
     782:	4912      	ldr	r1, [pc, #72]	; (7cc <usart_sync_write+0x5c>)
     784:	4b12      	ldr	r3, [pc, #72]	; (7d0 <usart_sync_write+0x60>)
     786:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     788:	f105 0408 	add.w	r4, r5, #8
     78c:	4620      	mov	r0, r4
     78e:	4b11      	ldr	r3, [pc, #68]	; (7d4 <usart_sync_write+0x64>)
     790:	4798      	blx	r3
     792:	2800      	cmp	r0, #0
     794:	d0f8      	beq.n	788 <usart_sync_write+0x18>
     796:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     798:	5d71      	ldrb	r1, [r6, r5]
     79a:	4620      	mov	r0, r4
     79c:	4b0e      	ldr	r3, [pc, #56]	; (7d8 <usart_sync_write+0x68>)
     79e:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     7a0:	4620      	mov	r0, r4
     7a2:	4b0c      	ldr	r3, [pc, #48]	; (7d4 <usart_sync_write+0x64>)
     7a4:	4798      	blx	r3
     7a6:	2800      	cmp	r0, #0
     7a8:	d0fa      	beq.n	7a0 <usart_sync_write+0x30>
			;
	} while (++offset < length);
     7aa:	3501      	adds	r5, #1
     7ac:	42bd      	cmp	r5, r7
     7ae:	d3f3      	bcc.n	798 <usart_sync_write+0x28>
	while (!_usart_sync_is_transmit_done(&descr->device))
     7b0:	4620      	mov	r0, r4
     7b2:	4b0a      	ldr	r3, [pc, #40]	; (7dc <usart_sync_write+0x6c>)
     7b4:	4798      	blx	r3
     7b6:	2800      	cmp	r0, #0
     7b8:	d0fa      	beq.n	7b0 <usart_sync_write+0x40>
		;
	return (int32_t)offset;
}
     7ba:	4628      	mov	r0, r5
     7bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     7be:	2000      	movs	r0, #0
     7c0:	e7de      	b.n	780 <usart_sync_write+0x10>
     7c2:	2000      	movs	r0, #0
     7c4:	e7dc      	b.n	780 <usart_sync_write+0x10>
     7c6:	2001      	movs	r0, #1
     7c8:	e7da      	b.n	780 <usart_sync_write+0x10>
     7ca:	bf00      	nop
     7cc:	000040dc 	.word	0x000040dc
     7d0:	000008b5 	.word	0x000008b5
     7d4:	00000d2b 	.word	0x00000d2b
     7d8:	00000d1d 	.word	0x00000d1d
     7dc:	00000d35 	.word	0x00000d35

000007e0 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     7e4:	460f      	mov	r7, r1
     7e6:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     7e8:	4605      	mov	r5, r0
     7ea:	b1c8      	cbz	r0, 820 <usart_sync_read+0x40>
     7ec:	b1d1      	cbz	r1, 824 <usart_sync_read+0x44>
     7ee:	b9da      	cbnz	r2, 828 <usart_sync_read+0x48>
     7f0:	2000      	movs	r0, #0
     7f2:	f44f 7286 	mov.w	r2, #268	; 0x10c
     7f6:	490d      	ldr	r1, [pc, #52]	; (82c <usart_sync_read+0x4c>)
     7f8:	4b0d      	ldr	r3, [pc, #52]	; (830 <usart_sync_read+0x50>)
     7fa:	4798      	blx	r3
	uint32_t                      offset = 0;
     7fc:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     7fe:	f105 0408 	add.w	r4, r5, #8
     802:	4620      	mov	r0, r4
     804:	4b0b      	ldr	r3, [pc, #44]	; (834 <usart_sync_read+0x54>)
     806:	4798      	blx	r3
     808:	2800      	cmp	r0, #0
     80a:	d0f8      	beq.n	7fe <usart_sync_read+0x1e>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     80c:	4620      	mov	r0, r4
     80e:	4b0a      	ldr	r3, [pc, #40]	; (838 <usart_sync_read+0x58>)
     810:	4798      	blx	r3
     812:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     814:	3601      	adds	r6, #1
     816:	4546      	cmp	r6, r8
     818:	d3f1      	bcc.n	7fe <usart_sync_read+0x1e>

	return (int32_t)offset;
}
     81a:	4630      	mov	r0, r6
     81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
     820:	2000      	movs	r0, #0
     822:	e7e6      	b.n	7f2 <usart_sync_read+0x12>
     824:	2000      	movs	r0, #0
     826:	e7e4      	b.n	7f2 <usart_sync_read+0x12>
     828:	2001      	movs	r0, #1
     82a:	e7e2      	b.n	7f2 <usart_sync_read+0x12>
     82c:	000040dc 	.word	0x000040dc
     830:	000008b5 	.word	0x000008b5
     834:	00000d3f 	.word	0x00000d3f
     838:	00000d23 	.word	0x00000d23

0000083c <usart_sync_init>:
{
     83c:	b538      	push	{r3, r4, r5, lr}
     83e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     840:	4604      	mov	r4, r0
     842:	b1a0      	cbz	r0, 86e <usart_sync_init+0x32>
     844:	b189      	cbz	r1, 86a <usart_sync_init+0x2e>
     846:	2001      	movs	r0, #1
     848:	2234      	movs	r2, #52	; 0x34
     84a:	490a      	ldr	r1, [pc, #40]	; (874 <usart_sync_init+0x38>)
     84c:	4b0a      	ldr	r3, [pc, #40]	; (878 <usart_sync_init+0x3c>)
     84e:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     850:	4629      	mov	r1, r5
     852:	f104 0008 	add.w	r0, r4, #8
     856:	4b09      	ldr	r3, [pc, #36]	; (87c <usart_sync_init+0x40>)
     858:	4798      	blx	r3
	if (init_status) {
     85a:	4603      	mov	r3, r0
     85c:	b918      	cbnz	r0, 866 <usart_sync_init+0x2a>
	descr->io.read  = usart_sync_read;
     85e:	4a08      	ldr	r2, [pc, #32]	; (880 <usart_sync_init+0x44>)
     860:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
     862:	4a08      	ldr	r2, [pc, #32]	; (884 <usart_sync_init+0x48>)
     864:	6022      	str	r2, [r4, #0]
}
     866:	4618      	mov	r0, r3
     868:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     86a:	2000      	movs	r0, #0
     86c:	e7ec      	b.n	848 <usart_sync_init+0xc>
     86e:	2000      	movs	r0, #0
     870:	e7ea      	b.n	848 <usart_sync_init+0xc>
     872:	bf00      	nop
     874:	000040dc 	.word	0x000040dc
     878:	000008b5 	.word	0x000008b5
     87c:	00000cdd 	.word	0x00000cdd
     880:	000007e1 	.word	0x000007e1
     884:	00000771 	.word	0x00000771

00000888 <usart_sync_enable>:
{
     888:	b510      	push	{r4, lr}
	ASSERT(descr);
     88a:	4604      	mov	r4, r0
     88c:	2253      	movs	r2, #83	; 0x53
     88e:	4906      	ldr	r1, [pc, #24]	; (8a8 <usart_sync_enable+0x20>)
     890:	3000      	adds	r0, #0
     892:	bf18      	it	ne
     894:	2001      	movne	r0, #1
     896:	4b05      	ldr	r3, [pc, #20]	; (8ac <usart_sync_enable+0x24>)
     898:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     89a:	f104 0008 	add.w	r0, r4, #8
     89e:	4b04      	ldr	r3, [pc, #16]	; (8b0 <usart_sync_enable+0x28>)
     8a0:	4798      	blx	r3
}
     8a2:	2000      	movs	r0, #0
     8a4:	bd10      	pop	{r4, pc}
     8a6:	bf00      	nop
     8a8:	000040dc 	.word	0x000040dc
     8ac:	000008b5 	.word	0x000008b5
     8b0:	00000d09 	.word	0x00000d09

000008b4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8b4:	b900      	cbnz	r0, 8b8 <assert+0x4>
		__asm("BKPT #0");
     8b6:	be00      	bkpt	0x0000
     8b8:	4770      	bx	lr
	...

000008bc <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     8bc:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     8be:	4a06      	ldr	r2, [pc, #24]	; (8d8 <_sbrk+0x1c>)
     8c0:	6812      	ldr	r2, [r2, #0]
     8c2:	b122      	cbz	r2, 8ce <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     8c4:	4a04      	ldr	r2, [pc, #16]	; (8d8 <_sbrk+0x1c>)
     8c6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     8c8:	4403      	add	r3, r0
     8ca:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     8cc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     8ce:	4903      	ldr	r1, [pc, #12]	; (8dc <_sbrk+0x20>)
     8d0:	4a01      	ldr	r2, [pc, #4]	; (8d8 <_sbrk+0x1c>)
     8d2:	6011      	str	r1, [r2, #0]
     8d4:	e7f6      	b.n	8c4 <_sbrk+0x8>
     8d6:	bf00      	nop
     8d8:	200000c8 	.word	0x200000c8
     8dc:	2000ee90 	.word	0x2000ee90

000008e0 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     8e0:	f04f 30ff 	mov.w	r0, #4294967295
     8e4:	4770      	bx	lr

000008e6 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     8e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     8ea:	604b      	str	r3, [r1, #4]

	return 0;
}
     8ec:	2000      	movs	r0, #0
     8ee:	4770      	bx	lr

000008f0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     8f0:	2001      	movs	r0, #1
     8f2:	4770      	bx	lr

000008f4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     8f4:	2000      	movs	r0, #0
     8f6:	4770      	bx	lr

000008f8 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
     8f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     8fc:	00c3      	lsls	r3, r0, #3
     8fe:	3302      	adds	r3, #2
     900:	4804      	ldr	r0, [pc, #16]	; (914 <_get_cycles_for_ms+0x1c>)
     902:	fba0 2303 	umull	r2, r3, r0, r3
     906:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     908:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     90c:	fb00 f003 	mul.w	r0, r0, r3
     910:	4770      	bx	lr
     912:	bf00      	nop
     914:	aaaaaaab 	.word	0xaaaaaaab

00000918 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     918:	3901      	subs	r1, #1
     91a:	d8fd      	bhi.n	918 <_delay_cycles>
     91c:	4770      	bx	lr
     91e:	bf00      	nop

00000920 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     920:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     922:	4a09      	ldr	r2, [pc, #36]	; (948 <_init_chip+0x28>)
     924:	8813      	ldrh	r3, [r2, #0]
     926:	b29b      	uxth	r3, r3
     928:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     92a:	4b08      	ldr	r3, [pc, #32]	; (94c <_init_chip+0x2c>)
     92c:	4798      	blx	r3
	_oscctrl_init_sources();
     92e:	4b08      	ldr	r3, [pc, #32]	; (950 <_init_chip+0x30>)
     930:	4798      	blx	r3
	_mclk_init();
     932:	4b08      	ldr	r3, [pc, #32]	; (954 <_init_chip+0x34>)
     934:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     936:	2008      	movs	r0, #8
     938:	4c07      	ldr	r4, [pc, #28]	; (958 <_init_chip+0x38>)
     93a:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     93c:	4b07      	ldr	r3, [pc, #28]	; (95c <_init_chip+0x3c>)
     93e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     940:	f640 70f7 	movw	r0, #4087	; 0xff7
     944:	47a0      	blx	r4
     946:	bd10      	pop	{r4, pc}
     948:	41004000 	.word	0x41004000
     94c:	000009c9 	.word	0x000009c9
     950:	000009e9 	.word	0x000009e9
     954:	000009bd 	.word	0x000009bd
     958:	00000961 	.word	0x00000961
     95c:	000009ed 	.word	0x000009ed

00000960 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     960:	f010 0f01 	tst.w	r0, #1
     964:	d008      	beq.n	978 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     966:	4a11      	ldr	r2, [pc, #68]	; (9ac <_gclk_init_generators_by_fref+0x4c>)
     968:	4b11      	ldr	r3, [pc, #68]	; (9b0 <_gclk_init_generators_by_fref+0x50>)
     96a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     96c:	4b10      	ldr	r3, [pc, #64]	; (9b0 <_gclk_init_generators_by_fref+0x50>)
     96e:	685a      	ldr	r2, [r3, #4]
     970:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     974:	421a      	tst	r2, r3
     976:	d1f9      	bne.n	96c <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
     978:	f010 0f04 	tst.w	r0, #4
     97c:	d008      	beq.n	990 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     97e:	4a0d      	ldr	r2, [pc, #52]	; (9b4 <_gclk_init_generators_by_fref+0x54>)
     980:	4b0b      	ldr	r3, [pc, #44]	; (9b0 <_gclk_init_generators_by_fref+0x50>)
     982:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     984:	4b0a      	ldr	r3, [pc, #40]	; (9b0 <_gclk_init_generators_by_fref+0x50>)
     986:	685a      	ldr	r2, [r3, #4]
     988:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     98c:	421a      	tst	r2, r3
     98e:	d1f9      	bne.n	984 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     990:	f010 0f08 	tst.w	r0, #8
     994:	d008      	beq.n	9a8 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     996:	4a08      	ldr	r2, [pc, #32]	; (9b8 <_gclk_init_generators_by_fref+0x58>)
     998:	4b05      	ldr	r3, [pc, #20]	; (9b0 <_gclk_init_generators_by_fref+0x50>)
     99a:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     99c:	4b04      	ldr	r3, [pc, #16]	; (9b0 <_gclk_init_generators_by_fref+0x50>)
     99e:	685a      	ldr	r2, [r3, #4]
     9a0:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     9a4:	421a      	tst	r2, r3
     9a6:	d1f9      	bne.n	99c <_gclk_init_generators_by_fref+0x3c>
     9a8:	4770      	bx	lr
     9aa:	bf00      	nop
     9ac:	00010107 	.word	0x00010107
     9b0:	40001c00 	.word	0x40001c00
     9b4:	00010906 	.word	0x00010906
     9b8:	00010105 	.word	0x00010105

000009bc <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     9bc:	2201      	movs	r2, #1
     9be:	4b01      	ldr	r3, [pc, #4]	; (9c4 <_mclk_init+0x8>)
     9c0:	715a      	strb	r2, [r3, #5]
     9c2:	4770      	bx	lr
     9c4:	40000800 	.word	0x40000800

000009c8 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
     9c8:	4b06      	ldr	r3, [pc, #24]	; (9e4 <_osc32kctrl_init_sources+0x1c>)
     9ca:	f242 0286 	movw	r2, #8326	; 0x2086
     9ce:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
     9d0:	2200      	movs	r2, #0
     9d2:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
     9d4:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     9d6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     9d8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     9dc:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     9de:	2201      	movs	r2, #1
     9e0:	741a      	strb	r2, [r3, #16]
     9e2:	4770      	bx	lr
     9e4:	40001400 	.word	0x40001400

000009e8 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
     9e8:	4770      	bx	lr
	...

000009ec <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     9ec:	4a45      	ldr	r2, [pc, #276]	; (b04 <_oscctrl_init_referenced_generators+0x118>)
     9ee:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     9f0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     9f4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     9f8:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     9fa:	4b42      	ldr	r3, [pc, #264]	; (b04 <_oscctrl_init_referenced_generators+0x118>)
     9fc:	685a      	ldr	r2, [r3, #4]
     9fe:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     a02:	421a      	tst	r2, r3
     a04:	d1f9      	bne.n	9fa <_oscctrl_init_referenced_generators+0xe>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     a06:	4b3f      	ldr	r3, [pc, #252]	; (b04 <_oscctrl_init_referenced_generators+0x118>)
     a08:	685b      	ldr	r3, [r3, #4]
{
	void *hw = (void *)OSCCTRL;

#if CONF_DFLL_CONFIG == 1
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, GCLK_GENCTRL_SRC_OSCULP32K);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     a0a:	f013 0f04 	tst.w	r3, #4
     a0e:	d1fa      	bne.n	a06 <_oscctrl_init_referenced_generators+0x1a>
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     a10:	4b3d      	ldr	r3, [pc, #244]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a12:	2200      	movs	r2, #0
     a14:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
     a16:	4a3d      	ldr	r2, [pc, #244]	; (b0c <_oscctrl_init_referenced_generators+0x120>)
     a18:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     a1a:	4b3b      	ldr	r3, [pc, #236]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
     a20:	f013 0f10 	tst.w	r3, #16
     a24:	d1f9      	bne.n	a1a <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     a26:	2200      	movs	r2, #0
     a28:	4b37      	ldr	r3, [pc, #220]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a2a:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     a2e:	4b36      	ldr	r3, [pc, #216]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     a34:	f013 0f04 	tst.w	r3, #4
     a38:	d1f9      	bne.n	a2e <_oscctrl_init_referenced_generators+0x42>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
     a3a:	2202      	movs	r2, #2
     a3c:	4b32      	ldr	r3, [pc, #200]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a3e:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     a40:	4b31      	ldr	r3, [pc, #196]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
     a46:	f013 0f02 	tst.w	r3, #2
     a4a:	d1f9      	bne.n	a40 <_oscctrl_init_referenced_generators+0x54>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
     a4c:	4b2e      	ldr	r3, [pc, #184]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
     a50:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     a52:	4b2d      	ldr	r3, [pc, #180]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
     a58:	f013 0f08 	tst.w	r3, #8
     a5c:	d1f9      	bne.n	a52 <_oscctrl_init_referenced_generators+0x66>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
     a5e:	2280      	movs	r2, #128	; 0x80
     a60:	4b29      	ldr	r3, [pc, #164]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a62:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
     a66:	4b28      	ldr	r3, [pc, #160]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
     a6c:	f013 0f04 	tst.w	r3, #4
     a70:	d1f9      	bne.n	a66 <_oscctrl_init_referenced_generators+0x7a>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
     a72:	4a27      	ldr	r2, [pc, #156]	; (b10 <_oscctrl_init_referenced_generators+0x124>)
     a74:	4b24      	ldr	r3, [pc, #144]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a76:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     a78:	4b23      	ldr	r3, [pc, #140]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     a7c:	f013 0f06 	tst.w	r3, #6
     a80:	d1fa      	bne.n	a78 <_oscctrl_init_referenced_generators+0x8c>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
     a82:	4b21      	ldr	r3, [pc, #132]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a84:	f44f 6203 	mov.w	r2, #2096	; 0x830
     a88:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
     a8a:	2202      	movs	r2, #2
     a8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
     a90:	4b1d      	ldr	r3, [pc, #116]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     a94:	f013 0f02 	tst.w	r3, #2
     a98:	d1fa      	bne.n	a90 <_oscctrl_init_referenced_generators+0xa4>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
     a9a:	4b1b      	ldr	r3, [pc, #108]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
     aa0:	f013 0f01 	tst.w	r3, #1
     aa4:	d027      	beq.n	af6 <_oscctrl_init_referenced_generators+0x10a>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
     aa6:	4b18      	ldr	r3, [pc, #96]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     aa8:	691b      	ldr	r3, [r3, #16]
	tmp &= mask;
     aaa:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
     aae:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
     ab2:	d1f8      	bne.n	aa6 <_oscctrl_init_referenced_generators+0xba>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
     ab4:	4b14      	ldr	r3, [pc, #80]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
     ab8:	f013 0f01 	tst.w	r3, #1
     abc:	d104      	bne.n	ac8 <_oscctrl_init_referenced_generators+0xdc>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
     abe:	4b12      	ldr	r3, [pc, #72]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     ac2:	f013 0f02 	tst.w	r3, #2
     ac6:	d0f5      	beq.n	ab4 <_oscctrl_init_referenced_generators+0xc8>
	return ((Gclk *)hw)->SYNCBUSY.reg;
     ac8:	4b0e      	ldr	r3, [pc, #56]	; (b04 <_oscctrl_init_referenced_generators+0x118>)
     aca:	685b      	ldr	r3, [r3, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
     acc:	2b00      	cmp	r3, #0
     ace:	d1fb      	bne.n	ac8 <_oscctrl_init_referenced_generators+0xdc>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
     ad0:	4a0c      	ldr	r2, [pc, #48]	; (b04 <_oscctrl_init_referenced_generators+0x118>)
     ad2:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
     ad4:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
     ad8:	f043 0307 	orr.w	r3, r3, #7
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
     adc:	6213      	str	r3, [r2, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     ade:	4b09      	ldr	r3, [pc, #36]	; (b04 <_oscctrl_init_referenced_generators+0x118>)
     ae0:	685a      	ldr	r2, [r3, #4]
     ae2:	f643 73fd 	movw	r3, #16381	; 0x3ffd
     ae6:	421a      	tst	r2, r3
     ae8:	d1f9      	bne.n	ade <_oscctrl_init_referenced_generators+0xf2>
	return (((Gclk *)hw)->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL0) >> GCLK_SYNCBUSY_GENCTRL0_Pos;
     aea:	4b06      	ldr	r3, [pc, #24]	; (b04 <_oscctrl_init_referenced_generators+0x118>)
     aec:	685b      	ldr	r3, [r3, #4]
		;
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
     aee:	f013 0f04 	tst.w	r3, #4
     af2:	d1fa      	bne.n	aea <_oscctrl_init_referenced_generators+0xfe>
		;
#endif
	(void)hw;
}
     af4:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
     af6:	4b04      	ldr	r3, [pc, #16]	; (b08 <_oscctrl_init_referenced_generators+0x11c>)
     af8:	691b      	ldr	r3, [r3, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
     afa:	f413 7f80 	tst.w	r3, #256	; 0x100
     afe:	d0fa      	beq.n	af6 <_oscctrl_init_referenced_generators+0x10a>
     b00:	e7d8      	b.n	ab4 <_oscctrl_init_referenced_generators+0xc8>
     b02:	bf00      	nop
     b04:	40001c00 	.word	0x40001c00
     b08:	40001000 	.word	0x40001000
     b0c:	04010000 	.word	0x04010000
     b10:	000d0e4d 	.word	0x000d0e4d

00000b14 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     b14:	b500      	push	{lr}
     b16:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     b18:	4b0d      	ldr	r3, [pc, #52]	; (b50 <RAMECC_Handler+0x3c>)
     b1a:	789b      	ldrb	r3, [r3, #2]
     b1c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     b1e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     b20:	9b01      	ldr	r3, [sp, #4]
     b22:	f013 0f02 	tst.w	r3, #2
     b26:	d006      	beq.n	b36 <RAMECC_Handler+0x22>
     b28:	4b0a      	ldr	r3, [pc, #40]	; (b54 <RAMECC_Handler+0x40>)
     b2a:	681b      	ldr	r3, [r3, #0]
     b2c:	b11b      	cbz	r3, b36 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     b2e:	4a08      	ldr	r2, [pc, #32]	; (b50 <RAMECC_Handler+0x3c>)
     b30:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     b32:	4798      	blx	r3
     b34:	e009      	b.n	b4a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     b36:	9b01      	ldr	r3, [sp, #4]
     b38:	f013 0f01 	tst.w	r3, #1
     b3c:	d005      	beq.n	b4a <RAMECC_Handler+0x36>
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <RAMECC_Handler+0x40>)
     b40:	685b      	ldr	r3, [r3, #4]
     b42:	b113      	cbz	r3, b4a <RAMECC_Handler+0x36>
     b44:	4a02      	ldr	r2, [pc, #8]	; (b50 <RAMECC_Handler+0x3c>)
     b46:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     b48:	4798      	blx	r3
	} else {
		return;
	}
}
     b4a:	b003      	add	sp, #12
     b4c:	f85d fb04 	ldr.w	pc, [sp], #4
     b50:	41020000 	.word	0x41020000
     b54:	20002e70 	.word	0x20002e70

00000b58 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     b58:	b470      	push	{r4, r5, r6}
     b5a:	b089      	sub	sp, #36	; 0x24
     b5c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     b5e:	466c      	mov	r4, sp
     b60:	4d0c      	ldr	r5, [pc, #48]	; (b94 <_sercom_get_hardware_index+0x3c>)
     b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     b66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
     b6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b6e:	2000      	movs	r0, #0
     b70:	2807      	cmp	r0, #7
     b72:	d80a      	bhi.n	b8a <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     b74:	ab08      	add	r3, sp, #32
     b76:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     b7a:	f853 3c20 	ldr.w	r3, [r3, #-32]
     b7e:	42b3      	cmp	r3, r6
     b80:	d001      	beq.n	b86 <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b82:	3001      	adds	r0, #1
     b84:	e7f4      	b.n	b70 <_sercom_get_hardware_index+0x18>
			return i;
     b86:	b2c0      	uxtb	r0, r0
     b88:	e000      	b.n	b8c <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
     b8a:	2000      	movs	r0, #0
}
     b8c:	b009      	add	sp, #36	; 0x24
     b8e:	bc70      	pop	{r4, r5, r6}
     b90:	4770      	bx	lr
     b92:	bf00      	nop
     b94:	000040f8 	.word	0x000040f8

00000b98 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     b98:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     b9a:	4b0c      	ldr	r3, [pc, #48]	; (bcc <_get_sercom_index+0x34>)
     b9c:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     b9e:	2300      	movs	r3, #0
     ba0:	b143      	cbz	r3, bb4 <_get_sercom_index+0x1c>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     ba2:	f240 2247 	movw	r2, #583	; 0x247
     ba6:	490a      	ldr	r1, [pc, #40]	; (bd0 <_get_sercom_index+0x38>)
     ba8:	2000      	movs	r0, #0
     baa:	4b0a      	ldr	r3, [pc, #40]	; (bd4 <_get_sercom_index+0x3c>)
     bac:	4798      	blx	r3
	return 0;
     bae:	2300      	movs	r3, #0
}
     bb0:	4618      	mov	r0, r3
     bb2:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
     bb4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
     bb8:	00d1      	lsls	r1, r2, #3
     bba:	4a07      	ldr	r2, [pc, #28]	; (bd8 <_get_sercom_index+0x40>)
     bbc:	440a      	add	r2, r1
     bbe:	f892 2020 	ldrb.w	r2, [r2, #32]
     bc2:	4290      	cmp	r0, r2
     bc4:	d0f4      	beq.n	bb0 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     bc6:	3301      	adds	r3, #1
     bc8:	b2db      	uxtb	r3, r3
     bca:	e7e9      	b.n	ba0 <_get_sercom_index+0x8>
     bcc:	00000b59 	.word	0x00000b59
     bd0:	0000416c 	.word	0x0000416c
     bd4:	000008b5 	.word	0x000008b5
     bd8:	000040f8 	.word	0x000040f8

00000bdc <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     bdc:	b538      	push	{r3, r4, r5, lr}
     bde:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
     be0:	4b3c      	ldr	r3, [pc, #240]	; (cd4 <_usart_init+0xf8>)
     be2:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     be4:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     be6:	f013 0f01 	tst.w	r3, #1
     bea:	d122      	bne.n	c32 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     bec:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     bf0:	00da      	lsls	r2, r3, #3
     bf2:	4b39      	ldr	r3, [pc, #228]	; (cd8 <_usart_init+0xfc>)
     bf4:	4413      	add	r3, r2
     bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     bf8:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bfc:	69e3      	ldr	r3, [r4, #28]
     bfe:	f013 0f03 	tst.w	r3, #3
     c02:	d1fb      	bne.n	bfc <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     c04:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     c06:	f013 0f02 	tst.w	r3, #2
     c0a:	d00b      	beq.n	c24 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     c0c:	6823      	ldr	r3, [r4, #0]
     c0e:	f023 0302 	bic.w	r3, r3, #2
     c12:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c14:	69e3      	ldr	r3, [r4, #28]
     c16:	f013 0f03 	tst.w	r3, #3
     c1a:	d1fb      	bne.n	c14 <_usart_init+0x38>
     c1c:	69e3      	ldr	r3, [r4, #28]
     c1e:	f013 0f02 	tst.w	r3, #2
     c22:	d1fb      	bne.n	c1c <_usart_init+0x40>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     c24:	f042 0201 	orr.w	r2, r2, #1
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c28:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c2a:	69e3      	ldr	r3, [r4, #28]
     c2c:	f013 0f03 	tst.w	r3, #3
     c30:	d1fb      	bne.n	c2a <_usart_init+0x4e>
     c32:	69e3      	ldr	r3, [r4, #28]
     c34:	f013 0f01 	tst.w	r3, #1
     c38:	d1fb      	bne.n	c32 <_usart_init+0x56>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     c3a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     c3e:	00da      	lsls	r2, r3, #3
     c40:	4b25      	ldr	r3, [pc, #148]	; (cd8 <_usart_init+0xfc>)
     c42:	4413      	add	r3, r2
     c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c46:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c48:	69e3      	ldr	r3, [r4, #28]
     c4a:	f013 0f03 	tst.w	r3, #3
     c4e:	d1fb      	bne.n	c48 <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     c50:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     c54:	00da      	lsls	r2, r3, #3
     c56:	4b20      	ldr	r3, [pc, #128]	; (cd8 <_usart_init+0xfc>)
     c58:	4413      	add	r3, r2
     c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     c5c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     c5e:	69e3      	ldr	r3, [r4, #28]
     c60:	f013 0f1f 	tst.w	r3, #31
     c64:	d1fb      	bne.n	c5e <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
     c66:	0042      	lsls	r2, r0, #1
     c68:	4402      	add	r2, r0
     c6a:	00d1      	lsls	r1, r2, #3
     c6c:	4b1a      	ldr	r3, [pc, #104]	; (cd8 <_usart_init+0xfc>)
     c6e:	440b      	add	r3, r1
     c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
     c72:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     c76:	f413 5f00 	tst.w	r3, #8192	; 0x2000
     c7a:	d10a      	bne.n	c92 <_usart_init+0xb6>
     c7c:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
     c80:	d107      	bne.n	c92 <_usart_init+0xb6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     c82:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     c86:	00da      	lsls	r2, r3, #3
     c88:	4b13      	ldr	r3, [pc, #76]	; (cd8 <_usart_init+0xfc>)
     c8a:	4413      	add	r3, r2
     c8c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     c8e:	81a3      	strh	r3, [r4, #12]
     c90:	e00f      	b.n	cb2 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     c92:	0042      	lsls	r2, r0, #1
     c94:	4402      	add	r2, r0
     c96:	00d1      	lsls	r1, r2, #3
     c98:	4b0f      	ldr	r3, [pc, #60]	; (cd8 <_usart_init+0xfc>)
     c9a:	440b      	add	r3, r1
     c9c:	8e19      	ldrh	r1, [r3, #48]	; 0x30
     c9e:	89a2      	ldrh	r2, [r4, #12]
     ca0:	f361 020c 	bfi	r2, r1, #0, #13
     ca4:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     ca6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
     caa:	89a3      	ldrh	r3, [r4, #12]
     cac:	f362 334f 	bfi	r3, r2, #13, #3
     cb0:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     cb2:	4a09      	ldr	r2, [pc, #36]	; (cd8 <_usart_init+0xfc>)
     cb4:	0043      	lsls	r3, r0, #1
     cb6:	181d      	adds	r5, r3, r0
     cb8:	00e9      	lsls	r1, r5, #3
     cba:	460d      	mov	r5, r1
     cbc:	4411      	add	r1, r2
     cbe:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     cc2:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     cc4:	442a      	add	r2, r5
     cc6:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     cca:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

	return ERR_NONE;
}
     cce:	2000      	movs	r0, #0
     cd0:	bd38      	pop	{r3, r4, r5, pc}
     cd2:	bf00      	nop
     cd4:	00000b99 	.word	0x00000b99
     cd8:	000040f8 	.word	0x000040f8

00000cdc <_usart_sync_init>:
{
     cdc:	b538      	push	{r3, r4, r5, lr}
     cde:	460c      	mov	r4, r1
	ASSERT(device);
     ce0:	4605      	mov	r5, r0
     ce2:	22bb      	movs	r2, #187	; 0xbb
     ce4:	4905      	ldr	r1, [pc, #20]	; (cfc <_usart_sync_init+0x20>)
     ce6:	3000      	adds	r0, #0
     ce8:	bf18      	it	ne
     cea:	2001      	movne	r0, #1
     cec:	4b04      	ldr	r3, [pc, #16]	; (d00 <_usart_sync_init+0x24>)
     cee:	4798      	blx	r3
	device->hw = hw;
     cf0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     cf2:	4620      	mov	r0, r4
     cf4:	4b03      	ldr	r3, [pc, #12]	; (d04 <_usart_sync_init+0x28>)
     cf6:	4798      	blx	r3
}
     cf8:	bd38      	pop	{r3, r4, r5, pc}
     cfa:	bf00      	nop
     cfc:	0000416c 	.word	0x0000416c
     d00:	000008b5 	.word	0x000008b5
     d04:	00000bdd 	.word	0x00000bdd

00000d08 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     d08:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     d0a:	6813      	ldr	r3, [r2, #0]
     d0c:	f043 0302 	orr.w	r3, r3, #2
     d10:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     d12:	69d3      	ldr	r3, [r2, #28]
     d14:	f013 0f03 	tst.w	r3, #3
     d18:	d1fb      	bne.n	d12 <_usart_sync_enable+0xa>
}
     d1a:	4770      	bx	lr

00000d1c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     d1c:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->USART.DATA.reg = data;
     d1e:	6299      	str	r1, [r3, #40]	; 0x28
     d20:	4770      	bx	lr

00000d22 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     d22:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     d24:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
     d26:	b2c0      	uxtb	r0, r0
     d28:	4770      	bx	lr

00000d2a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     d2a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     d2c:	7e18      	ldrb	r0, [r3, #24]
}
     d2e:	f000 0001 	and.w	r0, r0, #1
     d32:	4770      	bx	lr

00000d34 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     d34:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     d36:	7e18      	ldrb	r0, [r3, #24]
}
     d38:	f3c0 0040 	ubfx	r0, r0, #1, #1
     d3c:	4770      	bx	lr

00000d3e <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     d3e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     d40:	7e18      	ldrb	r0, [r3, #24]
}
     d42:	f3c0 0080 	ubfx	r0, r0, #2, #1
     d46:	4770      	bx	lr

00000d48 <setColorRGB>:
uint16_t fore_Color_High, fore_Color_Low;
uint16_t back_Color_High, back_Color_Low;

void setColorRGB(uint8_t r, uint8_t g, uint8_t b)
{
	fore_Color_High = ((r&248)|g>>5);
     d48:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
     d4c:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
     d50:	4b04      	ldr	r3, [pc, #16]	; (d64 <setColorRGB+0x1c>)
     d52:	8018      	strh	r0, [r3, #0]
	fore_Color_Low = ((g&28)<<3|b>>3);
     d54:	00c9      	lsls	r1, r1, #3
     d56:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
     d5a:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
     d5e:	4b02      	ldr	r3, [pc, #8]	; (d68 <setColorRGB+0x20>)
     d60:	8019      	strh	r1, [r3, #0]
     d62:	4770      	bx	lr
     d64:	20002e82 	.word	0x20002e82
     d68:	20002e84 	.word	0x20002e84

00000d6c <setColorHex>:
}

void setColorHex(uint16_t color)
{
	fore_Color_High = (color >> 8);
     d6c:	0a02      	lsrs	r2, r0, #8
     d6e:	4b03      	ldr	r3, [pc, #12]	; (d7c <setColorHex+0x10>)
     d70:	801a      	strh	r2, [r3, #0]
	fore_Color_Low = (color & 0xFF);
     d72:	b2c0      	uxtb	r0, r0
     d74:	4b02      	ldr	r3, [pc, #8]	; (d80 <setColorHex+0x14>)
     d76:	8018      	strh	r0, [r3, #0]
     d78:	4770      	bx	lr
     d7a:	bf00      	nop
     d7c:	20002e82 	.word	0x20002e82
     d80:	20002e84 	.word	0x20002e84

00000d84 <setBackColorRGB>:
}

void setBackColorRGB(unsigned char r,
unsigned char g, unsigned char b)
{
	back_Color_High = ((r&248)|g>>5);
     d84:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
     d88:	ea40 1051 	orr.w	r0, r0, r1, lsr #5
     d8c:	4b04      	ldr	r3, [pc, #16]	; (da0 <setBackColorRGB+0x1c>)
     d8e:	8018      	strh	r0, [r3, #0]
	back_Color_Low = ((g&28)<<3|b>>3);
     d90:	00c9      	lsls	r1, r1, #3
     d92:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
     d96:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
     d9a:	4b02      	ldr	r3, [pc, #8]	; (da4 <setBackColorRGB+0x20>)
     d9c:	8019      	strh	r1, [r3, #0]
     d9e:	4770      	bx	lr
     da0:	20002e86 	.word	0x20002e86
     da4:	20002e80 	.word	0x20002e80

00000da8 <setBackColorHex>:
}

void setBackColorHex(uint16_t color)
{
	back_Color_High = (color >> 8);
     da8:	0a02      	lsrs	r2, r0, #8
     daa:	4b03      	ldr	r3, [pc, #12]	; (db8 <setBackColorHex+0x10>)
     dac:	801a      	strh	r2, [r3, #0]
	back_Color_Low = (color & 0xFF);
     dae:	b2c0      	uxtb	r0, r0
     db0:	4b02      	ldr	r3, [pc, #8]	; (dbc <setBackColorHex+0x14>)
     db2:	8018      	strh	r0, [r3, #0]
     db4:	4770      	bx	lr
     db6:	bf00      	nop
     db8:	20002e86 	.word	0x20002e86
     dbc:	20002e80 	.word	0x20002e80

00000dc0 <LCD_Fast_Fill>:
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
	REG_PORT_OUTSET1 = LCD_CS;
}

void LCD_Fast_Fill(int ch, int cl, long pix)
{
     dc0:	b430      	push	{r4, r5}
	int blocks;
	
	
	REG_PORT_OUTCLR1 = 0x0000ffff;
     dc2:	f64f 74ff 	movw	r4, #65535	; 0xffff
     dc6:	4b1a      	ldr	r3, [pc, #104]	; (e30 <LCD_Fast_Fill+0x70>)
     dc8:	601c      	str	r4, [r3, #0]
	REG_PORT_OUTSET1 = (ch << 8) | cl;
     dca:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
     dce:	3304      	adds	r3, #4
     dd0:	6019      	str	r1, [r3, #0]

	blocks = pix/16;
     dd2:	4615      	mov	r5, r2
     dd4:	2a00      	cmp	r2, #0
     dd6:	db02      	blt.n	dde <LCD_Fast_Fill+0x1e>
     dd8:	112d      	asrs	r5, r5, #4
	for (int i=0; i<blocks; i++)
     dda:	2400      	movs	r4, #0
     ddc:	e00c      	b.n	df8 <LCD_Fast_Fill+0x38>
	blocks = pix/16;
     dde:	f102 050f 	add.w	r5, r2, #15
     de2:	e7f9      	b.n	dd8 <LCD_Fast_Fill+0x18>
	{
		for (int j=0; j<16; j++)
		{
			REG_PORT_OUTCLR1 = LCD_WR;
     de4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     de8:	4811      	ldr	r0, [pc, #68]	; (e30 <LCD_Fast_Fill+0x70>)
     dea:	6001      	str	r1, [r0, #0]
			REG_PORT_OUTSET1 = LCD_WR;
     dec:	3004      	adds	r0, #4
     dee:	6001      	str	r1, [r0, #0]
		for (int j=0; j<16; j++)
     df0:	3301      	adds	r3, #1
     df2:	2b0f      	cmp	r3, #15
     df4:	ddf6      	ble.n	de4 <LCD_Fast_Fill+0x24>
	for (int i=0; i<blocks; i++)
     df6:	3401      	adds	r4, #1
     df8:	42ac      	cmp	r4, r5
     dfa:	da01      	bge.n	e00 <LCD_Fast_Fill+0x40>
     dfc:	2300      	movs	r3, #0
     dfe:	e7f8      	b.n	df2 <LCD_Fast_Fill+0x32>
		}
	}
	
	if ((pix % 16) != 0)
     e00:	f012 0f0f 	tst.w	r2, #15
     e04:	d012      	beq.n	e2c <LCD_Fast_Fill+0x6c>
     e06:	2000      	movs	r0, #0
     e08:	e006      	b.n	e18 <LCD_Fast_Fill+0x58>
	for (int i=0; i<(pix % 16)+1; i++)
	{
		REG_PORT_OUTCLR1 = LCD_WR;
     e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
     e0e:	4908      	ldr	r1, [pc, #32]	; (e30 <LCD_Fast_Fill+0x70>)
     e10:	600b      	str	r3, [r1, #0]
		REG_PORT_OUTSET1 = LCD_WR;
     e12:	3104      	adds	r1, #4
     e14:	600b      	str	r3, [r1, #0]
	for (int i=0; i<(pix % 16)+1; i++)
     e16:	3001      	adds	r0, #1
     e18:	4251      	negs	r1, r2
     e1a:	f002 030f 	and.w	r3, r2, #15
     e1e:	f001 010f 	and.w	r1, r1, #15
     e22:	bf58      	it	pl
     e24:	424b      	negpl	r3, r1
     e26:	3301      	adds	r3, #1
     e28:	4298      	cmp	r0, r3
     e2a:	dbee      	blt.n	e0a <LCD_Fast_Fill+0x4a>
	}
}
     e2c:	bc30      	pop	{r4, r5}
     e2e:	4770      	bx	lr
     e30:	41008094 	.word	0x41008094

00000e34 <setXY>:
{
	setXY(0,0,display_X_size,display_Y_size);
}

void setXY(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
     e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e38:	4681      	mov	r9, r0
     e3a:	460f      	mov	r7, r1
     e3c:	4690      	mov	r8, r2
     e3e:	461e      	mov	r6, r3
	y1=display_Y_size-y1;
	y2=display_Y_size-y2;
	SwapUint16(y1, y2);
	*/
	
	LCD_Write_COM16(0x2a,0x00);
     e40:	2100      	movs	r1, #0
     e42:	202a      	movs	r0, #42	; 0x2a
     e44:	4c18      	ldr	r4, [pc, #96]	; (ea8 <setXY+0x74>)
     e46:	47a0      	blx	r4
	LCD_Write_DATA8(x1>>8);
     e48:	ea4f 2019 	mov.w	r0, r9, lsr #8
     e4c:	4d17      	ldr	r5, [pc, #92]	; (eac <setXY+0x78>)
     e4e:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x01);
     e50:	2101      	movs	r1, #1
     e52:	202a      	movs	r0, #42	; 0x2a
     e54:	47a0      	blx	r4
	LCD_Write_DATA8(x1);
     e56:	fa5f f089 	uxtb.w	r0, r9
     e5a:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x02);
     e5c:	2102      	movs	r1, #2
     e5e:	202a      	movs	r0, #42	; 0x2a
     e60:	47a0      	blx	r4
	LCD_Write_DATA8(x2>>8);
     e62:	ea4f 2018 	mov.w	r0, r8, lsr #8
     e66:	47a8      	blx	r5
	LCD_Write_COM16(0x2a,0x03);
     e68:	2103      	movs	r1, #3
     e6a:	202a      	movs	r0, #42	; 0x2a
     e6c:	47a0      	blx	r4
	LCD_Write_DATA8(x2);
     e6e:	fa5f f088 	uxtb.w	r0, r8
     e72:	47a8      	blx	r5

	LCD_Write_COM16(0x2b,0x00);
     e74:	2100      	movs	r1, #0
     e76:	202b      	movs	r0, #43	; 0x2b
     e78:	47a0      	blx	r4
	LCD_Write_DATA8(y1>>8);
     e7a:	0a38      	lsrs	r0, r7, #8
     e7c:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x01);
     e7e:	2101      	movs	r1, #1
     e80:	202b      	movs	r0, #43	; 0x2b
     e82:	47a0      	blx	r4
	LCD_Write_DATA8(y1);
     e84:	b2f8      	uxtb	r0, r7
     e86:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x02);
     e88:	2102      	movs	r1, #2
     e8a:	202b      	movs	r0, #43	; 0x2b
     e8c:	47a0      	blx	r4
	LCD_Write_DATA8(y2>>8);
     e8e:	0a30      	lsrs	r0, r6, #8
     e90:	47a8      	blx	r5
	LCD_Write_COM16(0x2b,0x03);
     e92:	2103      	movs	r1, #3
     e94:	202b      	movs	r0, #43	; 0x2b
     e96:	47a0      	blx	r4
	LCD_Write_DATA8(y2);
     e98:	b2f0      	uxtb	r0, r6
     e9a:	47a8      	blx	r5

	LCD_Write_COM16(0x2c,0x00);
     e9c:	2100      	movs	r1, #0
     e9e:	202c      	movs	r0, #44	; 0x2c
     ea0:	47a0      	blx	r4
     ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     ea6:	bf00      	nop
     ea8:	00000fbd 	.word	0x00000fbd
     eac:	00000fed 	.word	0x00000fed

00000eb0 <fillRect>:
{
     eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     eb4:	4606      	mov	r6, r0
     eb6:	4689      	mov	r9, r1
     eb8:	4615      	mov	r5, r2
     eba:	461c      	mov	r4, r3
	if (x1>x2)
     ebc:	4290      	cmp	r0, r2
     ebe:	dc01      	bgt.n	ec4 <fillRect+0x14>
     ec0:	4605      	mov	r5, r0
     ec2:	4616      	mov	r6, r2
	if (y1>y2)
     ec4:	45a1      	cmp	r9, r4
     ec6:	dd1f      	ble.n	f08 <fillRect+0x58>
	REG_PORT_OUTCLR1 = LCD_CS;
     ec8:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
     ecc:	4b10      	ldr	r3, [pc, #64]	; (f10 <fillRect+0x60>)
     ece:	f8c3 8000 	str.w	r8, [r3]
	setXY(x1, y1, x2, y2);
     ed2:	b2a3      	uxth	r3, r4
     ed4:	b2aa      	uxth	r2, r5
     ed6:	fa1f f189 	uxth.w	r1, r9
     eda:	b2b0      	uxth	r0, r6
     edc:	4f0d      	ldr	r7, [pc, #52]	; (f14 <fillRect+0x64>)
     ede:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_DC;
     ee0:	4f0d      	ldr	r7, [pc, #52]	; (f18 <fillRect+0x68>)
     ee2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
     ee6:	603b      	str	r3, [r7, #0]
	(((long)(x2-x1)+1)*((long)(y2-y1)+1)));
     ee8:	1bad      	subs	r5, r5, r6
     eea:	eba4 0409 	sub.w	r4, r4, r9
     eee:	1c62      	adds	r2, r4, #1
	LCD_Fast_Fill(fore_Color_High, fore_Color_Low,
     ef0:	fb05 2202 	mla	r2, r5, r2, r2
     ef4:	4b09      	ldr	r3, [pc, #36]	; (f1c <fillRect+0x6c>)
     ef6:	8819      	ldrh	r1, [r3, #0]
     ef8:	4b09      	ldr	r3, [pc, #36]	; (f20 <fillRect+0x70>)
     efa:	8818      	ldrh	r0, [r3, #0]
     efc:	4b09      	ldr	r3, [pc, #36]	; (f24 <fillRect+0x74>)
     efe:	4798      	blx	r3
	REG_PORT_OUTSET1 = LCD_CS;
     f00:	f8c7 8000 	str.w	r8, [r7]
     f04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (y1>y2)
     f08:	4633      	mov	r3, r6
     f0a:	462e      	mov	r6, r5
     f0c:	461d      	mov	r5, r3
     f0e:	e7db      	b.n	ec8 <fillRect+0x18>
     f10:	41008094 	.word	0x41008094
     f14:	00000e35 	.word	0x00000e35
     f18:	41008098 	.word	0x41008098
     f1c:	20002e84 	.word	0x20002e84
     f20:	20002e82 	.word	0x20002e82
     f24:	00000dc1 	.word	0x00000dc1

00000f28 <clrXY>:
{
     f28:	b510      	push	{r4, lr}
	setXY(0,0,display_X_size,display_Y_size);
     f2a:	4a04      	ldr	r2, [pc, #16]	; (f3c <clrXY+0x14>)
     f2c:	8813      	ldrh	r3, [r2, #0]
     f2e:	8852      	ldrh	r2, [r2, #2]
     f30:	2100      	movs	r1, #0
     f32:	4608      	mov	r0, r1
     f34:	4c02      	ldr	r4, [pc, #8]	; (f40 <clrXY+0x18>)
     f36:	47a0      	blx	r4
     f38:	bd10      	pop	{r4, pc}
     f3a:	bf00      	nop
     f3c:	20000000 	.word	0x20000000
     f40:	00000e35 	.word	0x00000e35

00000f44 <clrScr>:
{
     f44:	b508      	push	{r3, lr}
	REG_PORT_OUTCLR1 = LCD_CS;
     f46:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     f4a:	4b02      	ldr	r3, [pc, #8]	; (f54 <clrScr+0x10>)
     f4c:	601a      	str	r2, [r3, #0]
	clrXY();
     f4e:	4b02      	ldr	r3, [pc, #8]	; (f58 <clrScr+0x14>)
     f50:	4798      	blx	r3
     f52:	bd08      	pop	{r3, pc}
     f54:	41008094 	.word	0x41008094
     f58:	00000f29 	.word	0x00000f29

00000f5c <setPixel>:
}

void setPixel(uint16_t color)
{
     f5c:	b508      	push	{r3, lr}
	//it sets it to a 16-bit color.
	//LCD_Write_DATA16((color<<8),(color&0xFF)); 
	LCD_Write_DATA16((color>>8),(color&0xFF));
     f5e:	b2c1      	uxtb	r1, r0
     f60:	0a00      	lsrs	r0, r0, #8
     f62:	4b01      	ldr	r3, [pc, #4]	; (f68 <setPixel+0xc>)
     f64:	4798      	blx	r3
     f66:	bd08      	pop	{r3, pc}
     f68:	00000fd5 	.word	0x00000fd5

00000f6c <clearScreen>:
	LCD_Write_DATA8(0x80);
	REG_PORT_OUTSET1 = LCD_CS;
}
*/
void clearScreen(void)
{
     f6c:	b510      	push	{r4, lr}
	setColorRGB(0,0,0);
     f6e:	2200      	movs	r2, #0
     f70:	4611      	mov	r1, r2
     f72:	4610      	mov	r0, r2
     f74:	4b04      	ldr	r3, [pc, #16]	; (f88 <clearScreen+0x1c>)
     f76:	4798      	blx	r3
	fillRect(0,0,display_Y_size,display_X_size);
     f78:	4a04      	ldr	r2, [pc, #16]	; (f8c <clearScreen+0x20>)
     f7a:	8853      	ldrh	r3, [r2, #2]
     f7c:	8812      	ldrh	r2, [r2, #0]
     f7e:	2100      	movs	r1, #0
     f80:	4608      	mov	r0, r1
     f82:	4c03      	ldr	r4, [pc, #12]	; (f90 <clearScreen+0x24>)
     f84:	47a0      	blx	r4
     f86:	bd10      	pop	{r4, pc}
     f88:	00000d49 	.word	0x00000d49
     f8c:	20000000 	.word	0x20000000
     f90:	00000eb1 	.word	0x00000eb1

00000f94 <LCD_Write_Bus>:
	fillRect(0,0,799,489);
		
}

void LCD_Write_Bus(char VH, char VL)
{
     f94:	b410      	push	{r4}
	REG_PORT_OUTCLR1 = 0x0000ffff;
     f96:	4c07      	ldr	r4, [pc, #28]	; (fb4 <LCD_Write_Bus+0x20>)
     f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
     f9c:	6023      	str	r3, [r4, #0]
	REG_PORT_OUTSET1 = (VH << 8) | VL;
     f9e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
     fa2:	4b05      	ldr	r3, [pc, #20]	; (fb8 <LCD_Write_Bus+0x24>)
     fa4:	6019      	str	r1, [r3, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
     fa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     faa:	6022      	str	r2, [r4, #0]
	REG_PORT_OUTSET1 = LCD_WR;
     fac:	601a      	str	r2, [r3, #0]
}
     fae:	f85d 4b04 	ldr.w	r4, [sp], #4
     fb2:	4770      	bx	lr
     fb4:	41008094 	.word	0x41008094
     fb8:	41008098 	.word	0x41008098

00000fbc <LCD_Write_COM16>:

void LCD_Write_COM16(char VH, char VL)
{
     fbc:	b508      	push	{r3, lr}
	REG_PORT_OUTCLR1 = LCD_DC;
     fbe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     fc2:	4b02      	ldr	r3, [pc, #8]	; (fcc <LCD_Write_COM16+0x10>)
     fc4:	601a      	str	r2, [r3, #0]
	
	LCD_Write_Bus(VH,VL);
     fc6:	4b02      	ldr	r3, [pc, #8]	; (fd0 <LCD_Write_COM16+0x14>)
     fc8:	4798      	blx	r3
     fca:	bd08      	pop	{r3, pc}
     fcc:	41008094 	.word	0x41008094
     fd0:	00000f95 	.word	0x00000f95

00000fd4 <LCD_Write_DATA16>:
	REG_PORT_OUTCLR1 = LCD_DC;
	LCD_Write_Bus(0x00, VL);
}

void LCD_Write_DATA16(char VH, char VL)
{
     fd4:	b508      	push	{r3, lr}
	REG_PORT_OUTSET1 = LCD_DC;
     fd6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     fda:	4b02      	ldr	r3, [pc, #8]	; (fe4 <LCD_Write_DATA16+0x10>)
     fdc:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(VH,VL);
     fde:	4b02      	ldr	r3, [pc, #8]	; (fe8 <LCD_Write_DATA16+0x14>)
     fe0:	4798      	blx	r3
     fe2:	bd08      	pop	{r3, pc}
     fe4:	41008098 	.word	0x41008098
     fe8:	00000f95 	.word	0x00000f95

00000fec <LCD_Write_DATA8>:
}

void LCD_Write_DATA8(char VL)
{
     fec:	b508      	push	{r3, lr}
	REG_PORT_OUTSET1 = LCD_DC;
     fee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     ff2:	4b03      	ldr	r3, [pc, #12]	; (1000 <LCD_Write_DATA8+0x14>)
     ff4:	601a      	str	r2, [r3, #0]
	LCD_Write_Bus(0x00, VL);
     ff6:	4601      	mov	r1, r0
     ff8:	2000      	movs	r0, #0
     ffa:	4b02      	ldr	r3, [pc, #8]	; (1004 <LCD_Write_DATA8+0x18>)
     ffc:	4798      	blx	r3
     ffe:	bd08      	pop	{r3, pc}
    1000:	41008098 	.word	0x41008098
    1004:	00000f95 	.word	0x00000f95

00001008 <InitLCD>:
{
    1008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	REG_PORT_DIRSET1 = 0x0000ffff;		//LCD data bus, PB00 - PB15
    100c:	4b82      	ldr	r3, [pc, #520]	; (1218 <InitLCD+0x210>)
    100e:	f64f 77ff 	movw	r7, #65535	; 0xffff
    1012:	601f      	str	r7, [r3, #0]
	REG_PORT_DIRSET1 = LCD_Reset;
    1014:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    1018:	601d      	str	r5, [r3, #0]
	REG_PORT_DIRSET1 = LCD_CS;
    101a:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
    101e:	601e      	str	r6, [r3, #0]
	REG_PORT_DIRSET1 = LCD_WR;
    1020:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    1024:	6018      	str	r0, [r3, #0]
	REG_PORT_DIRSET1 = LCD_DC;
    1026:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    102a:	6019      	str	r1, [r3, #0]
	REG_PORT_DIRSET1 = LCD_RD;
    102c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1030:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTCLR1 = 0x0000ffff;
    1032:	4c7a      	ldr	r4, [pc, #488]	; (121c <InitLCD+0x214>)
    1034:	6027      	str	r7, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_Reset;
    1036:	6025      	str	r5, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_CS;
    1038:	6026      	str	r6, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_WR;
    103a:	6020      	str	r0, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_DC;
    103c:	6021      	str	r1, [r4, #0]
	REG_PORT_OUTCLR1 = LCD_RD;
    103e:	6022      	str	r2, [r4, #0]
	REG_PORT_DIRSET1 = PORT_PB16;
    1040:	601a      	str	r2, [r3, #0]
	REG_PORT_OUTSET1 = PORT_PB16;
    1042:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 122c <InitLCD+0x224>
    1046:	f8c8 2000 	str.w	r2, [r8]
	REG_PORT_OUTSET1 = LCD_Reset;
    104a:	f8c8 5000 	str.w	r5, [r8]
	delay_ms(5);
    104e:	2005      	movs	r0, #5
    1050:	4f73      	ldr	r7, [pc, #460]	; (1220 <InitLCD+0x218>)
    1052:	47b8      	blx	r7
	REG_PORT_OUTCLR1 = LCD_Reset;
    1054:	6025      	str	r5, [r4, #0]
	delay_ms(15);
    1056:	200f      	movs	r0, #15
    1058:	47b8      	blx	r7
	REG_PORT_OUTSET1 = LCD_Reset;
    105a:	f8c8 5000 	str.w	r5, [r8]
	delay_ms(15);
    105e:	200f      	movs	r0, #15
    1060:	47b8      	blx	r7
	REG_PORT_OUTCLR1 = LCD_CS;
    1062:	6026      	str	r6, [r4, #0]
	for(int i = 0; i < 70; i++)
    1064:	2400      	movs	r4, #0
    1066:	e011      	b.n	108c <InitLCD+0x84>
		REG_PORT_OUTCLR1 = LCD_DC;
    1068:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
    106c:	4b6b      	ldr	r3, [pc, #428]	; (121c <InitLCD+0x214>)
    106e:	601e      	str	r6, [r3, #0]
		LCD_Write_COM16(belial[i],mulciber[i]);
    1070:	4b6c      	ldr	r3, [pc, #432]	; (1224 <InitLCD+0x21c>)
    1072:	191d      	adds	r5, r3, r4
    1074:	5d19      	ldrb	r1, [r3, r4]
    1076:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    107a:	4b6b      	ldr	r3, [pc, #428]	; (1228 <InitLCD+0x220>)
    107c:	4798      	blx	r3
		REG_PORT_OUTSET1 = LCD_DC;
    107e:	4b6b      	ldr	r3, [pc, #428]	; (122c <InitLCD+0x224>)
    1080:	601e      	str	r6, [r3, #0]
		LCD_Write_DATA8(lucifer[i]);
    1082:	f895 0090 	ldrb.w	r0, [r5, #144]	; 0x90
    1086:	4b6a      	ldr	r3, [pc, #424]	; (1230 <InitLCD+0x228>)
    1088:	4798      	blx	r3
	for(int i = 0; i < 70; i++)
    108a:	3401      	adds	r4, #1
    108c:	2c45      	cmp	r4, #69	; 0x45
    108e:	ddeb      	ble.n	1068 <InitLCD+0x60>
    1090:	25d1      	movs	r5, #209	; 0xd1
    1092:	e00e      	b.n	10b2 <InitLCD+0xaa>
			LCD_Write_COM16(k,0x00);
    1094:	2100      	movs	r1, #0
    1096:	4628      	mov	r0, r5
    1098:	4b63      	ldr	r3, [pc, #396]	; (1228 <InitLCD+0x220>)
    109a:	4798      	blx	r3
			LCD_Write_DATA8(beelzebub[l]);
    109c:	4b61      	ldr	r3, [pc, #388]	; (1224 <InitLCD+0x21c>)
    109e:	4423      	add	r3, r4
    10a0:	f893 00d8 	ldrb.w	r0, [r3, #216]	; 0xd8
    10a4:	4b62      	ldr	r3, [pc, #392]	; (1230 <InitLCD+0x228>)
    10a6:	4798      	blx	r3
		for(int l = 0; l < 52; l++)
    10a8:	3401      	adds	r4, #1
    10aa:	2c33      	cmp	r4, #51	; 0x33
    10ac:	ddf2      	ble.n	1094 <InitLCD+0x8c>
	for(char k = 0xD1; k < 0xD6; k++)
    10ae:	3501      	adds	r5, #1
    10b0:	b2ed      	uxtb	r5, r5
    10b2:	2dd5      	cmp	r5, #213	; 0xd5
    10b4:	d801      	bhi.n	10ba <InitLCD+0xb2>
    10b6:	2400      	movs	r4, #0
    10b8:	e7f7      	b.n	10aa <InitLCD+0xa2>
	LCD_Write_COM16(0xF0, 0x00);LCD_Write_DATA8(0x55);
    10ba:	2100      	movs	r1, #0
    10bc:	20f0      	movs	r0, #240	; 0xf0
    10be:	4c5a      	ldr	r4, [pc, #360]	; (1228 <InitLCD+0x220>)
    10c0:	47a0      	blx	r4
    10c2:	2055      	movs	r0, #85	; 0x55
    10c4:	4d5a      	ldr	r5, [pc, #360]	; (1230 <InitLCD+0x228>)
    10c6:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x01);LCD_Write_DATA8(0xAA);	
    10c8:	2101      	movs	r1, #1
    10ca:	20f0      	movs	r0, #240	; 0xf0
    10cc:	47a0      	blx	r4
    10ce:	20aa      	movs	r0, #170	; 0xaa
    10d0:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x02);LCD_Write_DATA8(0x52);	
    10d2:	2102      	movs	r1, #2
    10d4:	20f0      	movs	r0, #240	; 0xf0
    10d6:	47a0      	blx	r4
    10d8:	2052      	movs	r0, #82	; 0x52
    10da:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x03);LCD_Write_DATA8(0x08);	
    10dc:	2103      	movs	r1, #3
    10de:	20f0      	movs	r0, #240	; 0xf0
    10e0:	47a0      	blx	r4
    10e2:	2008      	movs	r0, #8
    10e4:	47a8      	blx	r5
	LCD_Write_COM16(0xF0, 0x04);LCD_Write_DATA8(0x00);	
    10e6:	2104      	movs	r1, #4
    10e8:	20f0      	movs	r0, #240	; 0xf0
    10ea:	47a0      	blx	r4
    10ec:	2000      	movs	r0, #0
    10ee:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x00);LCD_Write_DATA8(0xCC);
    10f0:	2100      	movs	r1, #0
    10f2:	20b1      	movs	r0, #177	; 0xb1
    10f4:	47a0      	blx	r4
    10f6:	20cc      	movs	r0, #204	; 0xcc
    10f8:	47a8      	blx	r5
	LCD_Write_COM16(0xB1, 0x01);LCD_Write_DATA8(0x00);	
    10fa:	2101      	movs	r1, #1
    10fc:	20b1      	movs	r0, #177	; 0xb1
    10fe:	47a0      	blx	r4
    1100:	2000      	movs	r0, #0
    1102:	47a8      	blx	r5
	LCD_Write_COM16(0xB5, 0x00);LCD_Write_DATA8(0x50);	
    1104:	2100      	movs	r1, #0
    1106:	20b5      	movs	r0, #181	; 0xb5
    1108:	47a0      	blx	r4
    110a:	2050      	movs	r0, #80	; 0x50
    110c:	47a8      	blx	r5
	LCD_Write_COM16(0xB6, 0x00);LCD_Write_DATA8(0x05);
    110e:	2100      	movs	r1, #0
    1110:	20b6      	movs	r0, #182	; 0xb6
    1112:	47a0      	blx	r4
    1114:	2005      	movs	r0, #5
    1116:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x00);LCD_Write_DATA8(0x70);
    1118:	2100      	movs	r1, #0
    111a:	20b7      	movs	r0, #183	; 0xb7
    111c:	47a0      	blx	r4
    111e:	2070      	movs	r0, #112	; 0x70
    1120:	47a8      	blx	r5
	LCD_Write_COM16(0xB7, 0x01);LCD_Write_DATA8(0x70);
    1122:	2101      	movs	r1, #1
    1124:	20b7      	movs	r0, #183	; 0xb7
    1126:	47a0      	blx	r4
    1128:	2070      	movs	r0, #112	; 0x70
    112a:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x00);LCD_Write_DATA8(0x01);
    112c:	2100      	movs	r1, #0
    112e:	20b8      	movs	r0, #184	; 0xb8
    1130:	47a0      	blx	r4
    1132:	2001      	movs	r0, #1
    1134:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x01);LCD_Write_DATA8(0x03);
    1136:	2101      	movs	r1, #1
    1138:	20b8      	movs	r0, #184	; 0xb8
    113a:	47a0      	blx	r4
    113c:	2003      	movs	r0, #3
    113e:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x02);LCD_Write_DATA8(0x03);
    1140:	2102      	movs	r1, #2
    1142:	20b8      	movs	r0, #184	; 0xb8
    1144:	47a0      	blx	r4
    1146:	2003      	movs	r0, #3
    1148:	47a8      	blx	r5
	LCD_Write_COM16(0xB8, 0x03);LCD_Write_DATA8(0x03);	
    114a:	2103      	movs	r1, #3
    114c:	20b8      	movs	r0, #184	; 0xb8
    114e:	47a0      	blx	r4
    1150:	2003      	movs	r0, #3
    1152:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x00);LCD_Write_DATA8(0x02);
    1154:	2100      	movs	r1, #0
    1156:	20bc      	movs	r0, #188	; 0xbc
    1158:	47a0      	blx	r4
    115a:	2002      	movs	r0, #2
    115c:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x01);LCD_Write_DATA8(0x00);
    115e:	2101      	movs	r1, #1
    1160:	20bc      	movs	r0, #188	; 0xbc
    1162:	47a0      	blx	r4
    1164:	2000      	movs	r0, #0
    1166:	47a8      	blx	r5
	LCD_Write_COM16(0xBC, 0x02);LCD_Write_DATA8(0x00);
    1168:	2102      	movs	r1, #2
    116a:	20bc      	movs	r0, #188	; 0xbc
    116c:	47a0      	blx	r4
    116e:	2000      	movs	r0, #0
    1170:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x00);LCD_Write_DATA8(0xD0);
    1172:	2100      	movs	r1, #0
    1174:	20c9      	movs	r0, #201	; 0xc9
    1176:	47a0      	blx	r4
    1178:	20d0      	movs	r0, #208	; 0xd0
    117a:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x01);LCD_Write_DATA8(0x02);
    117c:	2101      	movs	r1, #1
    117e:	20c9      	movs	r0, #201	; 0xc9
    1180:	47a0      	blx	r4
    1182:	2002      	movs	r0, #2
    1184:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x02);LCD_Write_DATA8(0x50);
    1186:	2102      	movs	r1, #2
    1188:	20c9      	movs	r0, #201	; 0xc9
    118a:	47a0      	blx	r4
    118c:	2050      	movs	r0, #80	; 0x50
    118e:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x03);LCD_Write_DATA8(0x50);
    1190:	2103      	movs	r1, #3
    1192:	20c9      	movs	r0, #201	; 0xc9
    1194:	47a0      	blx	r4
    1196:	2050      	movs	r0, #80	; 0x50
    1198:	47a8      	blx	r5
	LCD_Write_COM16(0xC9, 0x04);LCD_Write_DATA8(0x50);
    119a:	2104      	movs	r1, #4
    119c:	20c9      	movs	r0, #201	; 0xc9
    119e:	47a0      	blx	r4
    11a0:	2050      	movs	r0, #80	; 0x50
    11a2:	47a8      	blx	r5
	LCD_Write_COM16(0x35, 0x00);LCD_Write_DATA8(0x00);
    11a4:	2100      	movs	r1, #0
    11a6:	2035      	movs	r0, #53	; 0x35
    11a8:	47a0      	blx	r4
    11aa:	2000      	movs	r0, #0
    11ac:	47a8      	blx	r5
	LCD_Write_COM16(0x3A, 0x00);LCD_Write_DATA8(0x55);
    11ae:	2100      	movs	r1, #0
    11b0:	203a      	movs	r0, #58	; 0x3a
    11b2:	47a0      	blx	r4
    11b4:	2055      	movs	r0, #85	; 0x55
    11b6:	47a8      	blx	r5
	LCD_Write_COM16(0x36, 0x00);LCD_Write_DATA8(0xE2);  //This is the MADCTL register
    11b8:	2100      	movs	r1, #0
    11ba:	2036      	movs	r0, #54	; 0x36
    11bc:	47a0      	blx	r4
    11be:	20e2      	movs	r0, #226	; 0xe2
    11c0:	47a8      	blx	r5
  	LCD_Write_COM16(0x11,0x00);   //Start Up  
    11c2:	2100      	movs	r1, #0
    11c4:	2011      	movs	r0, #17
    11c6:	47a0      	blx	r4
  	delay_ms(100);
    11c8:	2064      	movs	r0, #100	; 0x64
    11ca:	4e15      	ldr	r6, [pc, #84]	; (1220 <InitLCD+0x218>)
    11cc:	47b0      	blx	r6
  	LCD_Write_COM16(0x29,0x00);   //Display On  
    11ce:	2100      	movs	r1, #0
    11d0:	2029      	movs	r0, #41	; 0x29
    11d2:	47a0      	blx	r4
   	delay_ms(120);
    11d4:	2078      	movs	r0, #120	; 0x78
    11d6:	47b0      	blx	r6
	LCD_Write_COM16(0x51,0x00);LCD_Write_DATA8(0xFF);
    11d8:	2100      	movs	r1, #0
    11da:	2051      	movs	r0, #81	; 0x51
    11dc:	47a0      	blx	r4
    11de:	20ff      	movs	r0, #255	; 0xff
    11e0:	47a8      	blx	r5
	REG_PORT_OUTSET1 = LCD_CS;
    11e2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    11e6:	4b11      	ldr	r3, [pc, #68]	; (122c <InitLCD+0x224>)
    11e8:	601a      	str	r2, [r3, #0]
	clrScr();
    11ea:	4b12      	ldr	r3, [pc, #72]	; (1234 <InitLCD+0x22c>)
    11ec:	4798      	blx	r3
	setColorRGB(0,0,0);
    11ee:	2200      	movs	r2, #0
    11f0:	4611      	mov	r1, r2
    11f2:	4610      	mov	r0, r2
    11f4:	4b10      	ldr	r3, [pc, #64]	; (1238 <InitLCD+0x230>)
    11f6:	4798      	blx	r3
	setBackColorRGB(0, 0, 0);
    11f8:	2200      	movs	r2, #0
    11fa:	4611      	mov	r1, r2
    11fc:	4610      	mov	r0, r2
    11fe:	4b0f      	ldr	r3, [pc, #60]	; (123c <InitLCD+0x234>)
    1200:	4798      	blx	r3
	fillRect(0,0,799,489);
    1202:	f240 13e9 	movw	r3, #489	; 0x1e9
    1206:	f240 321f 	movw	r2, #799	; 0x31f
    120a:	2100      	movs	r1, #0
    120c:	4608      	mov	r0, r1
    120e:	4c0c      	ldr	r4, [pc, #48]	; (1240 <InitLCD+0x238>)
    1210:	47a0      	blx	r4
    1212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1216:	bf00      	nop
    1218:	41008088 	.word	0x41008088
    121c:	41008094 	.word	0x41008094
    1220:	000006e9 	.word	0x000006e9
    1224:	00004188 	.word	0x00004188
    1228:	00000fbd 	.word	0x00000fbd
    122c:	41008098 	.word	0x41008098
    1230:	00000fed 	.word	0x00000fed
    1234:	00000f45 	.word	0x00000f45
    1238:	00000d49 	.word	0x00000d49
    123c:	00000d85 	.word	0x00000d85
    1240:	00000eb1 	.word	0x00000eb1

00001244 <main>:
char versionLabel[] = "Beach Taco Bell";
char compileTime[] = __TIMESTAMP__;


int main(void)
{
    1244:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1246:	4b08      	ldr	r3, [pc, #32]	; (1268 <main+0x24>)
    1248:	4798      	blx	r3
	InitLCD();
    124a:	4b08      	ldr	r3, [pc, #32]	; (126c <main+0x28>)
    124c:	4798      	blx	r3

	printf("hi");
    124e:	4808      	ldr	r0, [pc, #32]	; (1270 <main+0x2c>)
    1250:	4b08      	ldr	r3, [pc, #32]	; (1274 <main+0x30>)
    1252:	4798      	blx	r3
	 int count = 0;
    1254:	2400      	movs	r4, #0

	/* Replace with your application code */
	while (1) {
		printf("%i",count);
    1256:	4621      	mov	r1, r4
    1258:	4807      	ldr	r0, [pc, #28]	; (1278 <main+0x34>)
    125a:	4b06      	ldr	r3, [pc, #24]	; (1274 <main+0x30>)
    125c:	4798      	blx	r3
		count++;
    125e:	3401      	adds	r4, #1
		splashScreen();
    1260:	4b06      	ldr	r3, [pc, #24]	; (127c <main+0x38>)
    1262:	4798      	blx	r3
    1264:	e7f7      	b.n	1256 <main+0x12>
    1266:	bf00      	nop
    1268:	000002d1 	.word	0x000002d1
    126c:	00001009 	.word	0x00001009
    1270:	00004294 	.word	0x00004294
    1274:	00001739 	.word	0x00001739
    1278:	00004298 	.word	0x00004298
    127c:	00001391 	.word	0x00001391

00001280 <drawKare>:
//	graphic in the entire project. Please note this is the most
//	space efficient way to do this; a 40x31 bitmap is 930 bytes,
//	whereas	this is (104*2)+28+20, or 256 bytes.
/*********************************************************************/
void drawKare(int emotion)
{
    1280:	b5f0      	push	{r4, r5, r6, r7, lr}
    1282:	b0c1      	sub	sp, #260	; 0x104
    1284:	4605      	mov	r5, r0
	uint16_t body[104] = {10,10,20,20,20,0,380,10,380,10,390,20,0,
    1286:	4c3f      	ldr	r4, [pc, #252]	; (1384 <drawKare+0x104>)
    1288:	22d0      	movs	r2, #208	; 0xd0
    128a:	4621      	mov	r1, r4
    128c:	a80c      	add	r0, sp, #48	; 0x30
    128e:	4b3e      	ldr	r3, [pc, #248]	; (1388 <drawKare+0x108>)
    1290:	4798      	blx	r3
		80,190,280,200,280,40,290,190,0,70,50,80,0,90,50,100,0,110,
		50,120,0,130,50,140,0,150,50,160,0,170,50,180,0,190,50,200,
		300,200,370,210,30,220,370,230,30,240,370,250,30,260,370,
		270,90,280,300,290};
	
	uint8_t happyTerm[28] = {180,80,190,130,170,130,190,140,140,
    1292:	ae05      	add	r6, sp, #20
    1294:	f104 07d0 	add.w	r7, r4, #208	; 0xd0
    1298:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    129a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    129c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    12a0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		60,150,100,210,60,220,100,130,150,140,160,140,160,220,170,
	220,150,230,160};
	
	uint8_t rPiBeret[20] = {120,60,240,80,110,70,120,90,150,
    12a4:	466e      	mov	r6, sp
    12a6:	34ec      	adds	r4, #236	; 0xec
    12a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    12aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    12ac:	6823      	ldr	r3, [r4, #0]
    12ae:	6033      	str	r3, [r6, #0]
	int offsetGraphicY = 150;
	int iSv = 2;				//an inverse scale factor

	
	
	for(int i = 0; i < 104; i = i+4)
    12b0:	2400      	movs	r4, #0
    12b2:	e022      	b.n	12fa <drawKare+0x7a>
	{
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    12b4:	ab40      	add	r3, sp, #256	; 0x100
    12b6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    12ba:	f833 0cd0 	ldrh.w	r0, [r3, #-208]
    12be:	1040      	asrs	r0, r0, #1
		((body[i+1]/iSv)+(offsetGraphicY)),
    12c0:	1c63      	adds	r3, r4, #1
    12c2:	aa40      	add	r2, sp, #256	; 0x100
    12c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    12c8:	f833 1cd0 	ldrh.w	r1, [r3, #-208]
    12cc:	1049      	asrs	r1, r1, #1
		((body[i+2]/iSv)+(offsetGraphicX)),
    12ce:	1ca3      	adds	r3, r4, #2
    12d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    12d4:	f833 2cd0 	ldrh.w	r2, [r3, #-208]
    12d8:	1052      	asrs	r2, r2, #1
		((body[i+3]/iSv)+(offsetGraphicY)));
    12da:	1ce3      	adds	r3, r4, #3
    12dc:	ae40      	add	r6, sp, #256	; 0x100
    12de:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    12e2:	f833 3cd0 	ldrh.w	r3, [r3, #-208]
    12e6:	105b      	asrs	r3, r3, #1
		fillRect(((body[i]/iSv)+(offsetGraphicX)),
    12e8:	3396      	adds	r3, #150	; 0x96
    12ea:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    12ee:	3196      	adds	r1, #150	; 0x96
    12f0:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    12f4:	4e25      	ldr	r6, [pc, #148]	; (138c <drawKare+0x10c>)
    12f6:	47b0      	blx	r6
	for(int i = 0; i < 104; i = i+4)
    12f8:	3404      	adds	r4, #4
    12fa:	2c67      	cmp	r4, #103	; 0x67
    12fc:	ddda      	ble.n	12b4 <drawKare+0x34>
	}
	switch(emotion)
    12fe:	b11d      	cbz	r5, 1308 <drawKare+0x88>
    1300:	2d01      	cmp	r5, #1
    1302:	d023      	beq.n	134c <drawKare+0xcc>
		break;
		case 2:
		//make a sad terminal thing go here
		break;
	}
}
    1304:	b041      	add	sp, #260	; 0x104
    1306:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for(int i = 0; i < 28; i = i+4)
    1308:	2d1b      	cmp	r5, #27
    130a:	dcfb      	bgt.n	1304 <drawKare+0x84>
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    130c:	ab40      	add	r3, sp, #256	; 0x100
    130e:	442b      	add	r3, r5
    1310:	f813 0cec 	ldrb.w	r0, [r3, #-236]
    1314:	1040      	asrs	r0, r0, #1
			((happyTerm[i+1]/iSv)+(offsetGraphicY)),
    1316:	1c6b      	adds	r3, r5, #1
    1318:	aa40      	add	r2, sp, #256	; 0x100
    131a:	4413      	add	r3, r2
    131c:	f813 1cec 	ldrb.w	r1, [r3, #-236]
    1320:	1049      	asrs	r1, r1, #1
			((happyTerm[i+2]/iSv)+(offsetGraphicX)),
    1322:	1cab      	adds	r3, r5, #2
    1324:	4413      	add	r3, r2
    1326:	f813 2cec 	ldrb.w	r2, [r3, #-236]
    132a:	1052      	asrs	r2, r2, #1
			((happyTerm[i+3]/iSv)+(offsetGraphicY)));
    132c:	1ceb      	adds	r3, r5, #3
    132e:	ac40      	add	r4, sp, #256	; 0x100
    1330:	4423      	add	r3, r4
    1332:	f813 3cec 	ldrb.w	r3, [r3, #-236]
    1336:	105b      	asrs	r3, r3, #1
			fillRect(((happyTerm[i]/iSv)+(offsetGraphicX)),
    1338:	3396      	adds	r3, #150	; 0x96
    133a:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    133e:	3196      	adds	r1, #150	; 0x96
    1340:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    1344:	4c11      	ldr	r4, [pc, #68]	; (138c <drawKare+0x10c>)
    1346:	47a0      	blx	r4
		for(int i = 0; i < 28; i = i+4)
    1348:	3504      	adds	r5, #4
    134a:	e7dd      	b.n	1308 <drawKare+0x88>
	switch(emotion)
    134c:	2400      	movs	r4, #0
		for(int i = 0; i < 20; i = i+4)
    134e:	2c13      	cmp	r4, #19
    1350:	dcd8      	bgt.n	1304 <drawKare+0x84>
			(rPiBeret[i]/iSv)+(offsetGraphicX)),
    1352:	f81d 0004 	ldrb.w	r0, [sp, r4]
    1356:	1040      	asrs	r0, r0, #1
			((rPiBeret[i+1]/iSv)+(offsetGraphicY)),
    1358:	1c63      	adds	r3, r4, #1
    135a:	f81d 1003 	ldrb.w	r1, [sp, r3]
    135e:	1049      	asrs	r1, r1, #1
			((rPiBeret[i+2]/iSv)+(offsetGraphicX)),
    1360:	1ca3      	adds	r3, r4, #2
    1362:	f81d 2003 	ldrb.w	r2, [sp, r3]
    1366:	1052      	asrs	r2, r2, #1
			((rPiBeret[i+3]/iSv)+(offsetGraphicY)));
    1368:	1ce3      	adds	r3, r4, #3
    136a:	f81d 3003 	ldrb.w	r3, [sp, r3]
    136e:	105b      	asrs	r3, r3, #1
			fillRect((
    1370:	3396      	adds	r3, #150	; 0x96
    1372:	f502 7296 	add.w	r2, r2, #300	; 0x12c
    1376:	3196      	adds	r1, #150	; 0x96
    1378:	f500 7096 	add.w	r0, r0, #300	; 0x12c
    137c:	4d03      	ldr	r5, [pc, #12]	; (138c <drawKare+0x10c>)
    137e:	47a8      	blx	r5
		for(int i = 0; i < 20; i = i+4)
    1380:	3404      	adds	r4, #4
    1382:	e7e4      	b.n	134e <drawKare+0xce>
    1384:	0000429c 	.word	0x0000429c
    1388:	00001711 	.word	0x00001711
    138c:	00000eb1 	.word	0x00000eb1

00001390 <splashScreen>:

void splashScreen(void)
{
    1390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const char *splashText[32];
	splashText[0]  = "Trans rights are human rights";//
    1394:	4c60      	ldr	r4, [pc, #384]	; (1518 <splashScreen+0x188>)
    1396:	4b61      	ldr	r3, [pc, #388]	; (151c <splashScreen+0x18c>)
    1398:	6023      	str	r3, [r4, #0]
	splashText[1]  = "13^5 + 16^5 = 17^5";//
    139a:	4b61      	ldr	r3, [pc, #388]	; (1520 <splashScreen+0x190>)
    139c:	6063      	str	r3, [r4, #4]
	splashText[2]  = "Reticulating Splines";//
    139e:	4b61      	ldr	r3, [pc, #388]	; (1524 <splashScreen+0x194>)
    13a0:	60a3      	str	r3, [r4, #8]
	splashText[3]  = "violence.works";//
    13a2:	4b61      	ldr	r3, [pc, #388]	; (1528 <splashScreen+0x198>)
    13a4:	60e3      	str	r3, [r4, #12]
	splashText[4]  = "Si + PB";//
    13a6:	4b61      	ldr	r3, [pc, #388]	; (152c <splashScreen+0x19c>)
    13a8:	6123      	str	r3, [r4, #16]
	splashText[5]  = "Kill Billionaires (and Trillionaire)";//
    13aa:	4b61      	ldr	r3, [pc, #388]	; (1530 <splashScreen+0x1a0>)
    13ac:	6163      	str	r3, [r4, #20]
	splashText[6]  = "Interest in technology is not a personality";//
    13ae:	4b61      	ldr	r3, [pc, #388]	; (1534 <splashScreen+0x1a4>)
    13b0:	61a3      	str	r3, [r4, #24]
	splashText[7]  = "10 PRINT CHR$(205.5+RND(1)); : GOTO 10";//
    13b2:	4b61      	ldr	r3, [pc, #388]	; (1538 <splashScreen+0x1a8>)
    13b4:	61e3      	str	r3, [r4, #28]
	splashText[8]  = "No gods. No masters. No external libraries.";//
    13b6:	4b61      	ldr	r3, [pc, #388]	; (153c <splashScreen+0x1ac>)
    13b8:	6223      	str	r3, [r4, #32]
	splashText[9]  = "Kill Nazis";//
    13ba:	4b61      	ldr	r3, [pc, #388]	; (1540 <splashScreen+0x1b0>)
    13bc:	6263      	str	r3, [r4, #36]	; 0x24
	splashText[10] = "Tiananmen Square 1989";//
    13be:	4b61      	ldr	r3, [pc, #388]	; (1544 <splashScreen+0x1b4>)
    13c0:	62a3      	str	r3, [r4, #40]	; 0x28
	splashText[11] = "America was founded on slavery";
    13c2:	4b61      	ldr	r3, [pc, #388]	; (1548 <splashScreen+0x1b8>)
    13c4:	62e3      	str	r3, [r4, #44]	; 0x2c
	splashText[12] = "There is only capital and labor";//
    13c6:	4b61      	ldr	r3, [pc, #388]	; (154c <splashScreen+0x1bc>)
    13c8:	6323      	str	r3, [r4, #48]	; 0x30
	splashText[13] = "Encourage SYMMETRIC class warfare";//
    13ca:	4b61      	ldr	r3, [pc, #388]	; (1550 <splashScreen+0x1c0>)
    13cc:	6363      	str	r3, [r4, #52]	; 0x34
	splashText[14] = "Vogon Poetry";//
    13ce:	4b61      	ldr	r3, [pc, #388]	; (1554 <splashScreen+0x1c4>)
    13d0:	63a3      	str	r3, [r4, #56]	; 0x38
	splashText[15] = "A Nice TTY";//
    13d2:	4b61      	ldr	r3, [pc, #388]	; (1558 <splashScreen+0x1c8>)
    13d4:	63e3      	str	r3, [r4, #60]	; 0x3c
	splashText[16] = "Unix epoch minus 0xFF days";//
    13d6:	4b61      	ldr	r3, [pc, #388]	; (155c <splashScreen+0x1cc>)
    13d8:	6423      	str	r3, [r4, #64]	; 0x40
	splashText[17] = "i  = 0x5f3759df - ( i >> 1 );";//
    13da:	4b61      	ldr	r3, [pc, #388]	; (1560 <splashScreen+0x1d0>)
    13dc:	6463      	str	r3, [r4, #68]	; 0x44
	splashText[18] = "Speak truth to power; I'm sure they'll listen this time.";//
    13de:	4b61      	ldr	r3, [pc, #388]	; (1564 <splashScreen+0x1d4>)
    13e0:	64a3      	str	r3, [r4, #72]	; 0x48
	splashText[19] = "Defcon's canceled (2020)";//
    13e2:	4b61      	ldr	r3, [pc, #388]	; (1568 <splashScreen+0x1d8>)
    13e4:	64e3      	str	r3, [r4, #76]	; 0x4c
	splashText[20] = "Ratsnest: Nothing To Do!";//
    13e6:	4b61      	ldr	r3, [pc, #388]	; (156c <splashScreen+0x1dc>)
    13e8:	6523      	str	r3, [r4, #80]	; 0x50
	splashText[21] = "It has 69 keys.";//
    13ea:	4b61      	ldr	r3, [pc, #388]	; (1570 <splashScreen+0x1e0>)
    13ec:	6563      	str	r3, [r4, #84]	; 0x54
	splashText[22] = "Because VT-420 was already taken";//
    13ee:	4b61      	ldr	r3, [pc, #388]	; (1574 <splashScreen+0x1e4>)
    13f0:	65a3      	str	r3, [r4, #88]	; 0x58
	splashText[23] = "Compression algorithm based on BBP (1997)";//
    13f2:	4b61      	ldr	r3, [pc, #388]	; (1578 <splashScreen+0x1e8>)
    13f4:	65e3      	str	r3, [r4, #92]	; 0x5c
	splashText[24] = "Teach health insurance providers to code.";
    13f6:	4b61      	ldr	r3, [pc, #388]	; (157c <splashScreen+0x1ec>)
    13f8:	6623      	str	r3, [r4, #96]	; 0x60
	splashText[25] = "Grand Central Hack The Planet";//
    13fa:	4b61      	ldr	r3, [pc, #388]	; (1580 <splashScreen+0x1f0>)
    13fc:	6663      	str	r3, [r4, #100]	; 0x64
	splashText[26] = "WiFi is not wireless Ethernet!";//
    13fe:	4b61      	ldr	r3, [pc, #388]	; (1584 <splashScreen+0x1f4>)
    1400:	66a3      	str	r3, [r4, #104]	; 0x68
	splashText[27] = "Dummy thicc client";//
    1402:	4b61      	ldr	r3, [pc, #388]	; (1588 <splashScreen+0x1f8>)
    1404:	66e3      	str	r3, [r4, #108]	; 0x6c
	splashText[28] = "A Nice TTY. An OK Computer.";//
    1406:	4b61      	ldr	r3, [pc, #388]	; (158c <splashScreen+0x1fc>)
    1408:	6723      	str	r3, [r4, #112]	; 0x70
	splashText[29] = "USTeledildonics";//
    140a:	4b61      	ldr	r3, [pc, #388]	; (1590 <splashScreen+0x200>)
    140c:	6763      	str	r3, [r4, #116]	; 0x74
	splashText[30] = "Solidarity is not a new framework";//
    140e:	4b61      	ldr	r3, [pc, #388]	; (1594 <splashScreen+0x204>)
    1410:	67a3      	str	r3, [r4, #120]	; 0x78
	splashText[31] = "Breadboarding Is Not A Crime";//
    1412:	4b61      	ldr	r3, [pc, #388]	; (1598 <splashScreen+0x208>)
    1414:	67e3      	str	r3, [r4, #124]	; 0x7c
	splashText[32] = "Off by one errors are common";
    1416:	4b61      	ldr	r3, [pc, #388]	; (159c <splashScreen+0x20c>)
    1418:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	
	const char *textPhrase = splashText[(((rand())%32))];
    141c:	4b60      	ldr	r3, [pc, #384]	; (15a0 <splashScreen+0x210>)
    141e:	4798      	blx	r3
    1420:	4242      	negs	r2, r0
    1422:	f000 031f 	and.w	r3, r0, #31
    1426:	f002 021f 	and.w	r2, r2, #31
    142a:	bf58      	it	pl
    142c:	4253      	negpl	r3, r2
    142e:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
	
	clearScreen();
    1432:	4b5c      	ldr	r3, [pc, #368]	; (15a4 <splashScreen+0x214>)
    1434:	4798      	blx	r3
	setColorRGB(255,255,255);
    1436:	22ff      	movs	r2, #255	; 0xff
    1438:	4611      	mov	r1, r2
    143a:	4610      	mov	r0, r2
    143c:	4b5a      	ldr	r3, [pc, #360]	; (15a8 <splashScreen+0x218>)
    143e:	4798      	blx	r3
	
	REG_PORT_DIRTGL1 = PORT_PB31;
    1440:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1444:	4b59      	ldr	r3, [pc, #356]	; (15ac <splashScreen+0x21c>)
    1446:	601a      	str	r2, [r3, #0]
	PORT->Group[1].PINCFG[31].bit.PULLEN = 1;
    1448:	3b8c      	subs	r3, #140	; 0x8c
    144a:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
    144e:	f042 0204 	orr.w	r2, r2, #4
    1452:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	PORT->Group[1].PINCFG[31].bit.INEN = 1;
    1456:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
    145a:	f042 0202 	orr.w	r2, r2, #2
    145e:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
	if((PORT->Group[1].IN.reg & PORT_PB31) != 0)
    1462:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    1466:	2b00      	cmp	r3, #0
    1468:	db04      	blt.n	1474 <splashScreen+0xe4>
		//This is the 'pi' graphic; put some codes
		//here to handle setting up the uarts.
		drawKare(1);
	}
	else
	drawKare(0); //The normal graphic
    146a:	2000      	movs	r0, #0
    146c:	4b50      	ldr	r3, [pc, #320]	; (15b0 <splashScreen+0x220>)
    146e:	4798      	blx	r3
	
	for(int i = 0 ; i < 80 ; i++)
    1470:	2200      	movs	r2, #0
    1472:	e007      	b.n	1484 <splashScreen+0xf4>
		drawKare(1);
    1474:	2001      	movs	r0, #1
    1476:	4b4e      	ldr	r3, [pc, #312]	; (15b0 <splashScreen+0x220>)
    1478:	4798      	blx	r3
    147a:	e7f9      	b.n	1470 <splashScreen+0xe0>
	{
		for(int j = 0 ; j < 24 ; j++)
    147c:	3301      	adds	r3, #1
    147e:	2b17      	cmp	r3, #23
    1480:	ddfc      	ble.n	147c <splashScreen+0xec>
	for(int i = 0 ; i < 80 ; i++)
    1482:	3201      	adds	r2, #1
    1484:	2a4f      	cmp	r2, #79	; 0x4f
    1486:	dc01      	bgt.n	148c <splashScreen+0xfc>
    1488:	2300      	movs	r3, #0
    148a:	e7f8      	b.n	147e <splashScreen+0xee>
		{
			//consoleColors[i][j] = 0xFFFF0000;
		}
	}
	
	setColorHex(defaultForegroundColor);
    148c:	4b49      	ldr	r3, [pc, #292]	; (15b4 <splashScreen+0x224>)
    148e:	8818      	ldrh	r0, [r3, #0]
    1490:	4b49      	ldr	r3, [pc, #292]	; (15b8 <splashScreen+0x228>)
    1492:	4798      	blx	r3
	setBackColorHex(defaultBackgroundColor);
    1494:	4b49      	ldr	r3, [pc, #292]	; (15bc <splashScreen+0x22c>)
    1496:	8818      	ldrh	r0, [r3, #0]
    1498:	4b49      	ldr	r3, [pc, #292]	; (15c0 <splashScreen+0x230>)
    149a:	4798      	blx	r3
	
	xCharPos = 40 - (strlen(textPhrase)/2);
    149c:	4630      	mov	r0, r6
    149e:	4f49      	ldr	r7, [pc, #292]	; (15c4 <splashScreen+0x234>)
    14a0:	47b8      	blx	r7
    14a2:	0843      	lsrs	r3, r0, #1
    14a4:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    14a8:	4d47      	ldr	r5, [pc, #284]	; (15c8 <splashScreen+0x238>)
    14aa:	802b      	strh	r3, [r5, #0]
	yCharPos = 16;
    14ac:	4c47      	ldr	r4, [pc, #284]	; (15cc <splashScreen+0x23c>)
    14ae:	2310      	movs	r3, #16
    14b0:	8023      	strh	r3, [r4, #0]
	writeString(textPhrase);
    14b2:	4630      	mov	r0, r6
    14b4:	4e46      	ldr	r6, [pc, #280]	; (15d0 <splashScreen+0x240>)
    14b6:	47b0      	blx	r6
	
	
	xCharPos = 40 - (strlen(versionLabel)/2);
    14b8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 15e0 <splashScreen+0x250>
    14bc:	4640      	mov	r0, r8
    14be:	47b8      	blx	r7
    14c0:	0843      	lsrs	r3, r0, #1
    14c2:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    14c6:	802b      	strh	r3, [r5, #0]
	yCharPos = 18;
    14c8:	2312      	movs	r3, #18
    14ca:	8023      	strh	r3, [r4, #0]
	writeString(versionLabel);
    14cc:	4640      	mov	r0, r8
    14ce:	47b0      	blx	r6
	
	xCharPos = 40 - (strlen(compileTime)/2);
    14d0:	f8df 8110 	ldr.w	r8, [pc, #272]	; 15e4 <splashScreen+0x254>
    14d4:	4640      	mov	r0, r8
    14d6:	47b8      	blx	r7
    14d8:	0843      	lsrs	r3, r0, #1
    14da:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
    14de:	802b      	strh	r3, [r5, #0]
	yCharPos = 19;
    14e0:	2313      	movs	r3, #19
    14e2:	8023      	strh	r3, [r4, #0]
	writeString(compileTime);
    14e4:	4640      	mov	r0, r8
    14e6:	47b0      	blx	r6
	
	
	delay_ms(300);
    14e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
    14ec:	4b39      	ldr	r3, [pc, #228]	; (15d4 <splashScreen+0x244>)
    14ee:	4798      	blx	r3
		
	clearScreen();
    14f0:	4b2c      	ldr	r3, [pc, #176]	; (15a4 <splashScreen+0x214>)
    14f2:	4798      	blx	r3
	nullifyConsole();
    14f4:	4b38      	ldr	r3, [pc, #224]	; (15d8 <splashScreen+0x248>)
    14f6:	4798      	blx	r3
	

	
	setColorRGB(0,255,0);
    14f8:	2200      	movs	r2, #0
    14fa:	21ff      	movs	r1, #255	; 0xff
    14fc:	4610      	mov	r0, r2
    14fe:	4b2a      	ldr	r3, [pc, #168]	; (15a8 <splashScreen+0x218>)
    1500:	4798      	blx	r3
	setBackColorRGB(0,0,0);
    1502:	2200      	movs	r2, #0
    1504:	4611      	mov	r1, r2
    1506:	4610      	mov	r0, r2
    1508:	4b34      	ldr	r3, [pc, #208]	; (15dc <splashScreen+0x24c>)
    150a:	4798      	blx	r3
	
	//Setting the xChar and yChar position has to come
	//after splashScreen() and InitLCD();
	xCharPos = 0;
    150c:	2300      	movs	r3, #0
    150e:	802b      	strh	r3, [r5, #0]
	yCharPos = 0;
    1510:	8023      	strh	r3, [r4, #0]
    1512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1516:	bf00      	nop
    1518:	200000d0 	.word	0x200000d0
    151c:	0000439c 	.word	0x0000439c
    1520:	000043bc 	.word	0x000043bc
    1524:	000043d0 	.word	0x000043d0
    1528:	000043e8 	.word	0x000043e8
    152c:	000043f8 	.word	0x000043f8
    1530:	00004400 	.word	0x00004400
    1534:	00004428 	.word	0x00004428
    1538:	00004454 	.word	0x00004454
    153c:	0000447c 	.word	0x0000447c
    1540:	000044a8 	.word	0x000044a8
    1544:	000044b4 	.word	0x000044b4
    1548:	000044cc 	.word	0x000044cc
    154c:	000044ec 	.word	0x000044ec
    1550:	0000450c 	.word	0x0000450c
    1554:	00004530 	.word	0x00004530
    1558:	00004540 	.word	0x00004540
    155c:	0000454c 	.word	0x0000454c
    1560:	00004568 	.word	0x00004568
    1564:	00004588 	.word	0x00004588
    1568:	000045c4 	.word	0x000045c4
    156c:	000045e0 	.word	0x000045e0
    1570:	000045fc 	.word	0x000045fc
    1574:	0000460c 	.word	0x0000460c
    1578:	00004630 	.word	0x00004630
    157c:	0000465c 	.word	0x0000465c
    1580:	00004688 	.word	0x00004688
    1584:	000046a8 	.word	0x000046a8
    1588:	000046c8 	.word	0x000046c8
    158c:	000046dc 	.word	0x000046dc
    1590:	000046f8 	.word	0x000046f8
    1594:	00004708 	.word	0x00004708
    1598:	0000472c 	.word	0x0000472c
    159c:	0000474c 	.word	0x0000474c
    15a0:	00001769 	.word	0x00001769
    15a4:	00000f6d 	.word	0x00000f6d
    15a8:	00000d49 	.word	0x00000d49
    15ac:	4100808c 	.word	0x4100808c
    15b0:	00001281 	.word	0x00001281
    15b4:	20000030 	.word	0x20000030
    15b8:	00000d6d 	.word	0x00000d6d
    15bc:	200000cc 	.word	0x200000cc
    15c0:	00000da9 	.word	0x00000da9
    15c4:	00001949 	.word	0x00001949
    15c8:	200000bc 	.word	0x200000bc
    15cc:	200000be 	.word	0x200000be
    15d0:	000004e1 	.word	0x000004e1
    15d4:	000006e9 	.word	0x000006e9
    15d8:	00000519 	.word	0x00000519
    15dc:	00000d85 	.word	0x00000d85
    15e0:	20000020 	.word	0x20000020
    15e4:	20000004 	.word	0x20000004

000015e8 <_read>:

int __attribute__((weak)) _read(int file, char *ptr, int len)
{
	int n = 0;

	if (file != 0) {
    15e8:	b958      	cbnz	r0, 1602 <_read+0x1a>
{
    15ea:	b508      	push	{r3, lr}
    15ec:	460b      	mov	r3, r1
    15ee:	4611      	mov	r1, r2
    15f0:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_read((uint8_t *)ptr, len);
    15f2:	4b05      	ldr	r3, [pc, #20]	; (1608 <_read+0x20>)
    15f4:	4798      	blx	r3
	if (n < 0) {
    15f6:	2800      	cmp	r0, #0
    15f8:	db00      	blt.n	15fc <_read+0x14>
		return -1;
	}

	return n;
}
    15fa:	bd08      	pop	{r3, pc}
		return -1;
    15fc:	f04f 30ff 	mov.w	r0, #4294967295
    1600:	bd08      	pop	{r3, pc}
		return -1;
    1602:	f04f 30ff 	mov.w	r0, #4294967295
    1606:	4770      	bx	lr
    1608:	00001661 	.word	0x00001661

0000160c <_write>:

int __attribute__((weak)) _write(int file, char *ptr, int len)
{
	int n = 0;

	if ((file != 1) && (file != 2) && (file != 3)) {
    160c:	3801      	subs	r0, #1
    160e:	2802      	cmp	r0, #2
    1610:	d80b      	bhi.n	162a <_write+0x1e>
{
    1612:	b508      	push	{r3, lr}
    1614:	460b      	mov	r3, r1
    1616:	4611      	mov	r1, r2
    1618:	4618      	mov	r0, r3
		return -1;
	}

	n = stdio_io_write((const uint8_t *)ptr, len);
    161a:	4b05      	ldr	r3, [pc, #20]	; (1630 <_write+0x24>)
    161c:	4798      	blx	r3
	if (n < 0) {
    161e:	2800      	cmp	r0, #0
    1620:	db00      	blt.n	1624 <_write+0x18>
		return -1;
	}

	return n;
}
    1622:	bd08      	pop	{r3, pc}
		return -1;
    1624:	f04f 30ff 	mov.w	r0, #4294967295
    1628:	bd08      	pop	{r3, pc}
		return -1;
    162a:	f04f 30ff 	mov.w	r0, #4294967295
    162e:	4770      	bx	lr
    1630:	00001685 	.word	0x00001685

00001634 <stdio_io_init>:

/** IO descriptor for STDIO access. */
static struct io_descriptor *stdio_io = NULL;

void stdio_io_init(struct io_descriptor *io)
{
    1634:	b570      	push	{r4, r5, r6, lr}
    1636:	4606      	mov	r6, r0
#if defined(__GNUC__)
	/* Specify that stdout and stdin should not be buffered. */
	setbuf(stdout, NULL);
    1638:	4d06      	ldr	r5, [pc, #24]	; (1654 <stdio_io_init+0x20>)
    163a:	682b      	ldr	r3, [r5, #0]
    163c:	2100      	movs	r1, #0
    163e:	6898      	ldr	r0, [r3, #8]
    1640:	4c05      	ldr	r4, [pc, #20]	; (1658 <stdio_io_init+0x24>)
    1642:	47a0      	blx	r4
	setbuf(stdin, NULL);
    1644:	682b      	ldr	r3, [r5, #0]
    1646:	2100      	movs	r1, #0
    1648:	6858      	ldr	r0, [r3, #4]
    164a:	47a0      	blx	r4
	 * and AVR GCC library:
	 * - printf() emits one character at a time.
	 * - getchar() requests only 1 byte to exit.
	 */
#endif
	stdio_io = io;
    164c:	4b03      	ldr	r3, [pc, #12]	; (165c <stdio_io_init+0x28>)
    164e:	601e      	str	r6, [r3, #0]
    1650:	bd70      	pop	{r4, r5, r6, pc}
    1652:	bf00      	nop
    1654:	2000003c 	.word	0x2000003c
    1658:	000017dd 	.word	0x000017dd
    165c:	20000150 	.word	0x20000150

00001660 <stdio_io_read>:
{
	stdio_io = io;
}

int32_t stdio_io_read(uint8_t *buf, const int32_t len)
{
    1660:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    1662:	4b06      	ldr	r3, [pc, #24]	; (167c <stdio_io_read+0x1c>)
    1664:	681b      	ldr	r3, [r3, #0]
    1666:	b133      	cbz	r3, 1676 <stdio_io_read+0x16>
    1668:	460a      	mov	r2, r1
    166a:	4601      	mov	r1, r0
		return 0;
	}
	return io_read(stdio_io, buf, len);
    166c:	b292      	uxth	r2, r2
    166e:	4618      	mov	r0, r3
    1670:	4b03      	ldr	r3, [pc, #12]	; (1680 <stdio_io_read+0x20>)
    1672:	4798      	blx	r3
    1674:	bd08      	pop	{r3, pc}
		return 0;
    1676:	2000      	movs	r0, #0
}
    1678:	bd08      	pop	{r3, pc}
    167a:	bf00      	nop
    167c:	20000150 	.word	0x20000150
    1680:	0000073d 	.word	0x0000073d

00001684 <stdio_io_write>:

int32_t stdio_io_write(const uint8_t *buf, const int32_t len)
{
    1684:	b508      	push	{r3, lr}
	if (stdio_io == NULL) {
    1686:	4b06      	ldr	r3, [pc, #24]	; (16a0 <stdio_io_write+0x1c>)
    1688:	681b      	ldr	r3, [r3, #0]
    168a:	b133      	cbz	r3, 169a <stdio_io_write+0x16>
    168c:	460a      	mov	r2, r1
    168e:	4601      	mov	r1, r0
		return 0;
	}
	return io_write(stdio_io, buf, len);
    1690:	b292      	uxth	r2, r2
    1692:	4618      	mov	r0, r3
    1694:	4b03      	ldr	r3, [pc, #12]	; (16a4 <stdio_io_write+0x20>)
    1696:	4798      	blx	r3
    1698:	bd08      	pop	{r3, pc}
		return 0;
    169a:	2000      	movs	r0, #0
}
    169c:	bd08      	pop	{r3, pc}
    169e:	bf00      	nop
    16a0:	20000150 	.word	0x20000150
    16a4:	00000709 	.word	0x00000709

000016a8 <stdio_redirect_init>:
	/* Print welcome message */
	printf("\r\nHello ATMEL World!\r\n");
}

void stdio_redirect_init(void)
{
    16a8:	b510      	push	{r4, lr}

	usart_sync_enable(&USART_0);
    16aa:	4c04      	ldr	r4, [pc, #16]	; (16bc <stdio_redirect_init+0x14>)
    16ac:	4620      	mov	r0, r4
    16ae:	4b04      	ldr	r3, [pc, #16]	; (16c0 <stdio_redirect_init+0x18>)
    16b0:	4798      	blx	r3
	stdio_io_init(&USART_0.io);
    16b2:	4620      	mov	r0, r4
    16b4:	4b03      	ldr	r3, [pc, #12]	; (16c4 <stdio_redirect_init+0x1c>)
    16b6:	4798      	blx	r3
    16b8:	bd10      	pop	{r4, pc}
    16ba:	bf00      	nop
    16bc:	20002e64 	.word	0x20002e64
    16c0:	00000889 	.word	0x00000889
    16c4:	00001635 	.word	0x00001635

000016c8 <__libc_init_array>:
    16c8:	b570      	push	{r4, r5, r6, lr}
    16ca:	4e0d      	ldr	r6, [pc, #52]	; (1700 <__libc_init_array+0x38>)
    16cc:	4c0d      	ldr	r4, [pc, #52]	; (1704 <__libc_init_array+0x3c>)
    16ce:	1ba4      	subs	r4, r4, r6
    16d0:	10a4      	asrs	r4, r4, #2
    16d2:	2500      	movs	r5, #0
    16d4:	42a5      	cmp	r5, r4
    16d6:	d109      	bne.n	16ec <__libc_init_array+0x24>
    16d8:	4e0b      	ldr	r6, [pc, #44]	; (1708 <__libc_init_array+0x40>)
    16da:	4c0c      	ldr	r4, [pc, #48]	; (170c <__libc_init_array+0x44>)
    16dc:	f003 f892 	bl	4804 <_init>
    16e0:	1ba4      	subs	r4, r4, r6
    16e2:	10a4      	asrs	r4, r4, #2
    16e4:	2500      	movs	r5, #0
    16e6:	42a5      	cmp	r5, r4
    16e8:	d105      	bne.n	16f6 <__libc_init_array+0x2e>
    16ea:	bd70      	pop	{r4, r5, r6, pc}
    16ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    16f0:	4798      	blx	r3
    16f2:	3501      	adds	r5, #1
    16f4:	e7ee      	b.n	16d4 <__libc_init_array+0xc>
    16f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    16fa:	4798      	blx	r3
    16fc:	3501      	adds	r5, #1
    16fe:	e7f2      	b.n	16e6 <__libc_init_array+0x1e>
    1700:	00004810 	.word	0x00004810
    1704:	00004810 	.word	0x00004810
    1708:	00004810 	.word	0x00004810
    170c:	00004814 	.word	0x00004814

00001710 <memcpy>:
    1710:	b510      	push	{r4, lr}
    1712:	1e43      	subs	r3, r0, #1
    1714:	440a      	add	r2, r1
    1716:	4291      	cmp	r1, r2
    1718:	d100      	bne.n	171c <memcpy+0xc>
    171a:	bd10      	pop	{r4, pc}
    171c:	f811 4b01 	ldrb.w	r4, [r1], #1
    1720:	f803 4f01 	strb.w	r4, [r3, #1]!
    1724:	e7f7      	b.n	1716 <memcpy+0x6>

00001726 <memset>:
    1726:	4402      	add	r2, r0
    1728:	4603      	mov	r3, r0
    172a:	4293      	cmp	r3, r2
    172c:	d100      	bne.n	1730 <memset+0xa>
    172e:	4770      	bx	lr
    1730:	f803 1b01 	strb.w	r1, [r3], #1
    1734:	e7f9      	b.n	172a <memset+0x4>
	...

00001738 <iprintf>:
    1738:	b40f      	push	{r0, r1, r2, r3}
    173a:	4b0a      	ldr	r3, [pc, #40]	; (1764 <iprintf+0x2c>)
    173c:	b513      	push	{r0, r1, r4, lr}
    173e:	681c      	ldr	r4, [r3, #0]
    1740:	b124      	cbz	r4, 174c <iprintf+0x14>
    1742:	69a3      	ldr	r3, [r4, #24]
    1744:	b913      	cbnz	r3, 174c <iprintf+0x14>
    1746:	4620      	mov	r0, r4
    1748:	f000 fab8 	bl	1cbc <__sinit>
    174c:	ab05      	add	r3, sp, #20
    174e:	9a04      	ldr	r2, [sp, #16]
    1750:	68a1      	ldr	r1, [r4, #8]
    1752:	9301      	str	r3, [sp, #4]
    1754:	4620      	mov	r0, r4
    1756:	f000 fc7b 	bl	2050 <_vfiprintf_r>
    175a:	b002      	add	sp, #8
    175c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1760:	b004      	add	sp, #16
    1762:	4770      	bx	lr
    1764:	2000003c 	.word	0x2000003c

00001768 <rand>:
    1768:	4b19      	ldr	r3, [pc, #100]	; (17d0 <rand+0x68>)
    176a:	b510      	push	{r4, lr}
    176c:	681c      	ldr	r4, [r3, #0]
    176e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1770:	b9d3      	cbnz	r3, 17a8 <rand+0x40>
    1772:	2018      	movs	r0, #24
    1774:	f000 fb90 	bl	1e98 <malloc>
    1778:	f243 330e 	movw	r3, #13070	; 0x330e
    177c:	63a0      	str	r0, [r4, #56]	; 0x38
    177e:	8003      	strh	r3, [r0, #0]
    1780:	f64a 33cd 	movw	r3, #43981	; 0xabcd
    1784:	8043      	strh	r3, [r0, #2]
    1786:	f241 2334 	movw	r3, #4660	; 0x1234
    178a:	8083      	strh	r3, [r0, #4]
    178c:	f24e 636d 	movw	r3, #58989	; 0xe66d
    1790:	80c3      	strh	r3, [r0, #6]
    1792:	f64d 63ec 	movw	r3, #57068	; 0xdeec
    1796:	8103      	strh	r3, [r0, #8]
    1798:	2305      	movs	r3, #5
    179a:	8143      	strh	r3, [r0, #10]
    179c:	230b      	movs	r3, #11
    179e:	8183      	strh	r3, [r0, #12]
    17a0:	2201      	movs	r2, #1
    17a2:	2300      	movs	r3, #0
    17a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
    17a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    17aa:	480a      	ldr	r0, [pc, #40]	; (17d4 <rand+0x6c>)
    17ac:	690a      	ldr	r2, [r1, #16]
    17ae:	694b      	ldr	r3, [r1, #20]
    17b0:	4c09      	ldr	r4, [pc, #36]	; (17d8 <rand+0x70>)
    17b2:	4350      	muls	r0, r2
    17b4:	fb04 0003 	mla	r0, r4, r3, r0
    17b8:	fba2 2304 	umull	r2, r3, r2, r4
    17bc:	3201      	adds	r2, #1
    17be:	4403      	add	r3, r0
    17c0:	f143 0300 	adc.w	r3, r3, #0
    17c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    17c8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    17cc:	bd10      	pop	{r4, pc}
    17ce:	bf00      	nop
    17d0:	2000003c 	.word	0x2000003c
    17d4:	5851f42d 	.word	0x5851f42d
    17d8:	4c957f2d 	.word	0x4c957f2d

000017dc <setbuf>:
    17dc:	2900      	cmp	r1, #0
    17de:	f44f 6380 	mov.w	r3, #1024	; 0x400
    17e2:	bf0c      	ite	eq
    17e4:	2202      	moveq	r2, #2
    17e6:	2200      	movne	r2, #0
    17e8:	f000 b800 	b.w	17ec <setvbuf>

000017ec <setvbuf>:
    17ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    17f0:	461d      	mov	r5, r3
    17f2:	4b51      	ldr	r3, [pc, #324]	; (1938 <setvbuf+0x14c>)
    17f4:	681e      	ldr	r6, [r3, #0]
    17f6:	4604      	mov	r4, r0
    17f8:	460f      	mov	r7, r1
    17fa:	4690      	mov	r8, r2
    17fc:	b126      	cbz	r6, 1808 <setvbuf+0x1c>
    17fe:	69b3      	ldr	r3, [r6, #24]
    1800:	b913      	cbnz	r3, 1808 <setvbuf+0x1c>
    1802:	4630      	mov	r0, r6
    1804:	f000 fa5a 	bl	1cbc <__sinit>
    1808:	4b4c      	ldr	r3, [pc, #304]	; (193c <setvbuf+0x150>)
    180a:	429c      	cmp	r4, r3
    180c:	d152      	bne.n	18b4 <setvbuf+0xc8>
    180e:	6874      	ldr	r4, [r6, #4]
    1810:	f1b8 0f02 	cmp.w	r8, #2
    1814:	d006      	beq.n	1824 <setvbuf+0x38>
    1816:	f1b8 0f01 	cmp.w	r8, #1
    181a:	f200 8089 	bhi.w	1930 <setvbuf+0x144>
    181e:	2d00      	cmp	r5, #0
    1820:	f2c0 8086 	blt.w	1930 <setvbuf+0x144>
    1824:	4621      	mov	r1, r4
    1826:	4630      	mov	r0, r6
    1828:	f000 f9de 	bl	1be8 <_fflush_r>
    182c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    182e:	b141      	cbz	r1, 1842 <setvbuf+0x56>
    1830:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1834:	4299      	cmp	r1, r3
    1836:	d002      	beq.n	183e <setvbuf+0x52>
    1838:	4630      	mov	r0, r6
    183a:	f000 fb35 	bl	1ea8 <_free_r>
    183e:	2300      	movs	r3, #0
    1840:	6363      	str	r3, [r4, #52]	; 0x34
    1842:	2300      	movs	r3, #0
    1844:	61a3      	str	r3, [r4, #24]
    1846:	6063      	str	r3, [r4, #4]
    1848:	89a3      	ldrh	r3, [r4, #12]
    184a:	061b      	lsls	r3, r3, #24
    184c:	d503      	bpl.n	1856 <setvbuf+0x6a>
    184e:	6921      	ldr	r1, [r4, #16]
    1850:	4630      	mov	r0, r6
    1852:	f000 fb29 	bl	1ea8 <_free_r>
    1856:	89a3      	ldrh	r3, [r4, #12]
    1858:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
    185c:	f023 0303 	bic.w	r3, r3, #3
    1860:	f1b8 0f02 	cmp.w	r8, #2
    1864:	81a3      	strh	r3, [r4, #12]
    1866:	d05d      	beq.n	1924 <setvbuf+0x138>
    1868:	ab01      	add	r3, sp, #4
    186a:	466a      	mov	r2, sp
    186c:	4621      	mov	r1, r4
    186e:	4630      	mov	r0, r6
    1870:	f000 faae 	bl	1dd0 <__swhatbuf_r>
    1874:	89a3      	ldrh	r3, [r4, #12]
    1876:	4318      	orrs	r0, r3
    1878:	81a0      	strh	r0, [r4, #12]
    187a:	bb2d      	cbnz	r5, 18c8 <setvbuf+0xdc>
    187c:	9d00      	ldr	r5, [sp, #0]
    187e:	4628      	mov	r0, r5
    1880:	f000 fb0a 	bl	1e98 <malloc>
    1884:	4607      	mov	r7, r0
    1886:	2800      	cmp	r0, #0
    1888:	d14e      	bne.n	1928 <setvbuf+0x13c>
    188a:	f8dd 9000 	ldr.w	r9, [sp]
    188e:	45a9      	cmp	r9, r5
    1890:	d13c      	bne.n	190c <setvbuf+0x120>
    1892:	f04f 30ff 	mov.w	r0, #4294967295
    1896:	89a3      	ldrh	r3, [r4, #12]
    1898:	f043 0302 	orr.w	r3, r3, #2
    189c:	81a3      	strh	r3, [r4, #12]
    189e:	2300      	movs	r3, #0
    18a0:	60a3      	str	r3, [r4, #8]
    18a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
    18a6:	6023      	str	r3, [r4, #0]
    18a8:	6123      	str	r3, [r4, #16]
    18aa:	2301      	movs	r3, #1
    18ac:	6163      	str	r3, [r4, #20]
    18ae:	b003      	add	sp, #12
    18b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    18b4:	4b22      	ldr	r3, [pc, #136]	; (1940 <setvbuf+0x154>)
    18b6:	429c      	cmp	r4, r3
    18b8:	d101      	bne.n	18be <setvbuf+0xd2>
    18ba:	68b4      	ldr	r4, [r6, #8]
    18bc:	e7a8      	b.n	1810 <setvbuf+0x24>
    18be:	4b21      	ldr	r3, [pc, #132]	; (1944 <setvbuf+0x158>)
    18c0:	429c      	cmp	r4, r3
    18c2:	bf08      	it	eq
    18c4:	68f4      	ldreq	r4, [r6, #12]
    18c6:	e7a3      	b.n	1810 <setvbuf+0x24>
    18c8:	2f00      	cmp	r7, #0
    18ca:	d0d8      	beq.n	187e <setvbuf+0x92>
    18cc:	69b3      	ldr	r3, [r6, #24]
    18ce:	b913      	cbnz	r3, 18d6 <setvbuf+0xea>
    18d0:	4630      	mov	r0, r6
    18d2:	f000 f9f3 	bl	1cbc <__sinit>
    18d6:	f1b8 0f01 	cmp.w	r8, #1
    18da:	bf08      	it	eq
    18dc:	89a3      	ldrheq	r3, [r4, #12]
    18de:	6027      	str	r7, [r4, #0]
    18e0:	bf04      	itt	eq
    18e2:	f043 0301 	orreq.w	r3, r3, #1
    18e6:	81a3      	strheq	r3, [r4, #12]
    18e8:	89a3      	ldrh	r3, [r4, #12]
    18ea:	6127      	str	r7, [r4, #16]
    18ec:	f013 0008 	ands.w	r0, r3, #8
    18f0:	6165      	str	r5, [r4, #20]
    18f2:	d01b      	beq.n	192c <setvbuf+0x140>
    18f4:	f013 0001 	ands.w	r0, r3, #1
    18f8:	bf18      	it	ne
    18fa:	426d      	negne	r5, r5
    18fc:	f04f 0300 	mov.w	r3, #0
    1900:	bf1d      	ittte	ne
    1902:	60a3      	strne	r3, [r4, #8]
    1904:	61a5      	strne	r5, [r4, #24]
    1906:	4618      	movne	r0, r3
    1908:	60a5      	streq	r5, [r4, #8]
    190a:	e7d0      	b.n	18ae <setvbuf+0xc2>
    190c:	4648      	mov	r0, r9
    190e:	f000 fac3 	bl	1e98 <malloc>
    1912:	4607      	mov	r7, r0
    1914:	2800      	cmp	r0, #0
    1916:	d0bc      	beq.n	1892 <setvbuf+0xa6>
    1918:	89a3      	ldrh	r3, [r4, #12]
    191a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    191e:	81a3      	strh	r3, [r4, #12]
    1920:	464d      	mov	r5, r9
    1922:	e7d3      	b.n	18cc <setvbuf+0xe0>
    1924:	2000      	movs	r0, #0
    1926:	e7b6      	b.n	1896 <setvbuf+0xaa>
    1928:	46a9      	mov	r9, r5
    192a:	e7f5      	b.n	1918 <setvbuf+0x12c>
    192c:	60a0      	str	r0, [r4, #8]
    192e:	e7be      	b.n	18ae <setvbuf+0xc2>
    1930:	f04f 30ff 	mov.w	r0, #4294967295
    1934:	e7bb      	b.n	18ae <setvbuf+0xc2>
    1936:	bf00      	nop
    1938:	2000003c 	.word	0x2000003c
    193c:	00004790 	.word	0x00004790
    1940:	000047b0 	.word	0x000047b0
    1944:	00004770 	.word	0x00004770

00001948 <strlen>:
    1948:	4603      	mov	r3, r0
    194a:	f813 2b01 	ldrb.w	r2, [r3], #1
    194e:	2a00      	cmp	r2, #0
    1950:	d1fb      	bne.n	194a <strlen+0x2>
    1952:	1a18      	subs	r0, r3, r0
    1954:	3801      	subs	r0, #1
    1956:	4770      	bx	lr

00001958 <__swbuf_r>:
    1958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    195a:	460e      	mov	r6, r1
    195c:	4614      	mov	r4, r2
    195e:	4605      	mov	r5, r0
    1960:	b118      	cbz	r0, 196a <__swbuf_r+0x12>
    1962:	6983      	ldr	r3, [r0, #24]
    1964:	b90b      	cbnz	r3, 196a <__swbuf_r+0x12>
    1966:	f000 f9a9 	bl	1cbc <__sinit>
    196a:	4b21      	ldr	r3, [pc, #132]	; (19f0 <__swbuf_r+0x98>)
    196c:	429c      	cmp	r4, r3
    196e:	d12a      	bne.n	19c6 <__swbuf_r+0x6e>
    1970:	686c      	ldr	r4, [r5, #4]
    1972:	69a3      	ldr	r3, [r4, #24]
    1974:	60a3      	str	r3, [r4, #8]
    1976:	89a3      	ldrh	r3, [r4, #12]
    1978:	071a      	lsls	r2, r3, #28
    197a:	d52e      	bpl.n	19da <__swbuf_r+0x82>
    197c:	6923      	ldr	r3, [r4, #16]
    197e:	b363      	cbz	r3, 19da <__swbuf_r+0x82>
    1980:	6923      	ldr	r3, [r4, #16]
    1982:	6820      	ldr	r0, [r4, #0]
    1984:	1ac0      	subs	r0, r0, r3
    1986:	6963      	ldr	r3, [r4, #20]
    1988:	b2f6      	uxtb	r6, r6
    198a:	4298      	cmp	r0, r3
    198c:	4637      	mov	r7, r6
    198e:	db04      	blt.n	199a <__swbuf_r+0x42>
    1990:	4621      	mov	r1, r4
    1992:	4628      	mov	r0, r5
    1994:	f000 f928 	bl	1be8 <_fflush_r>
    1998:	bb28      	cbnz	r0, 19e6 <__swbuf_r+0x8e>
    199a:	68a3      	ldr	r3, [r4, #8]
    199c:	3b01      	subs	r3, #1
    199e:	60a3      	str	r3, [r4, #8]
    19a0:	6823      	ldr	r3, [r4, #0]
    19a2:	1c5a      	adds	r2, r3, #1
    19a4:	6022      	str	r2, [r4, #0]
    19a6:	701e      	strb	r6, [r3, #0]
    19a8:	6963      	ldr	r3, [r4, #20]
    19aa:	3001      	adds	r0, #1
    19ac:	4298      	cmp	r0, r3
    19ae:	d004      	beq.n	19ba <__swbuf_r+0x62>
    19b0:	89a3      	ldrh	r3, [r4, #12]
    19b2:	07db      	lsls	r3, r3, #31
    19b4:	d519      	bpl.n	19ea <__swbuf_r+0x92>
    19b6:	2e0a      	cmp	r6, #10
    19b8:	d117      	bne.n	19ea <__swbuf_r+0x92>
    19ba:	4621      	mov	r1, r4
    19bc:	4628      	mov	r0, r5
    19be:	f000 f913 	bl	1be8 <_fflush_r>
    19c2:	b190      	cbz	r0, 19ea <__swbuf_r+0x92>
    19c4:	e00f      	b.n	19e6 <__swbuf_r+0x8e>
    19c6:	4b0b      	ldr	r3, [pc, #44]	; (19f4 <__swbuf_r+0x9c>)
    19c8:	429c      	cmp	r4, r3
    19ca:	d101      	bne.n	19d0 <__swbuf_r+0x78>
    19cc:	68ac      	ldr	r4, [r5, #8]
    19ce:	e7d0      	b.n	1972 <__swbuf_r+0x1a>
    19d0:	4b09      	ldr	r3, [pc, #36]	; (19f8 <__swbuf_r+0xa0>)
    19d2:	429c      	cmp	r4, r3
    19d4:	bf08      	it	eq
    19d6:	68ec      	ldreq	r4, [r5, #12]
    19d8:	e7cb      	b.n	1972 <__swbuf_r+0x1a>
    19da:	4621      	mov	r1, r4
    19dc:	4628      	mov	r0, r5
    19de:	f000 f80d 	bl	19fc <__swsetup_r>
    19e2:	2800      	cmp	r0, #0
    19e4:	d0cc      	beq.n	1980 <__swbuf_r+0x28>
    19e6:	f04f 37ff 	mov.w	r7, #4294967295
    19ea:	4638      	mov	r0, r7
    19ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19ee:	bf00      	nop
    19f0:	00004790 	.word	0x00004790
    19f4:	000047b0 	.word	0x000047b0
    19f8:	00004770 	.word	0x00004770

000019fc <__swsetup_r>:
    19fc:	4b32      	ldr	r3, [pc, #200]	; (1ac8 <__swsetup_r+0xcc>)
    19fe:	b570      	push	{r4, r5, r6, lr}
    1a00:	681d      	ldr	r5, [r3, #0]
    1a02:	4606      	mov	r6, r0
    1a04:	460c      	mov	r4, r1
    1a06:	b125      	cbz	r5, 1a12 <__swsetup_r+0x16>
    1a08:	69ab      	ldr	r3, [r5, #24]
    1a0a:	b913      	cbnz	r3, 1a12 <__swsetup_r+0x16>
    1a0c:	4628      	mov	r0, r5
    1a0e:	f000 f955 	bl	1cbc <__sinit>
    1a12:	4b2e      	ldr	r3, [pc, #184]	; (1acc <__swsetup_r+0xd0>)
    1a14:	429c      	cmp	r4, r3
    1a16:	d10f      	bne.n	1a38 <__swsetup_r+0x3c>
    1a18:	686c      	ldr	r4, [r5, #4]
    1a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1a1e:	b29a      	uxth	r2, r3
    1a20:	0715      	lsls	r5, r2, #28
    1a22:	d42c      	bmi.n	1a7e <__swsetup_r+0x82>
    1a24:	06d0      	lsls	r0, r2, #27
    1a26:	d411      	bmi.n	1a4c <__swsetup_r+0x50>
    1a28:	2209      	movs	r2, #9
    1a2a:	6032      	str	r2, [r6, #0]
    1a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1a30:	81a3      	strh	r3, [r4, #12]
    1a32:	f04f 30ff 	mov.w	r0, #4294967295
    1a36:	bd70      	pop	{r4, r5, r6, pc}
    1a38:	4b25      	ldr	r3, [pc, #148]	; (1ad0 <__swsetup_r+0xd4>)
    1a3a:	429c      	cmp	r4, r3
    1a3c:	d101      	bne.n	1a42 <__swsetup_r+0x46>
    1a3e:	68ac      	ldr	r4, [r5, #8]
    1a40:	e7eb      	b.n	1a1a <__swsetup_r+0x1e>
    1a42:	4b24      	ldr	r3, [pc, #144]	; (1ad4 <__swsetup_r+0xd8>)
    1a44:	429c      	cmp	r4, r3
    1a46:	bf08      	it	eq
    1a48:	68ec      	ldreq	r4, [r5, #12]
    1a4a:	e7e6      	b.n	1a1a <__swsetup_r+0x1e>
    1a4c:	0751      	lsls	r1, r2, #29
    1a4e:	d512      	bpl.n	1a76 <__swsetup_r+0x7a>
    1a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1a52:	b141      	cbz	r1, 1a66 <__swsetup_r+0x6a>
    1a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1a58:	4299      	cmp	r1, r3
    1a5a:	d002      	beq.n	1a62 <__swsetup_r+0x66>
    1a5c:	4630      	mov	r0, r6
    1a5e:	f000 fa23 	bl	1ea8 <_free_r>
    1a62:	2300      	movs	r3, #0
    1a64:	6363      	str	r3, [r4, #52]	; 0x34
    1a66:	89a3      	ldrh	r3, [r4, #12]
    1a68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    1a6c:	81a3      	strh	r3, [r4, #12]
    1a6e:	2300      	movs	r3, #0
    1a70:	6063      	str	r3, [r4, #4]
    1a72:	6923      	ldr	r3, [r4, #16]
    1a74:	6023      	str	r3, [r4, #0]
    1a76:	89a3      	ldrh	r3, [r4, #12]
    1a78:	f043 0308 	orr.w	r3, r3, #8
    1a7c:	81a3      	strh	r3, [r4, #12]
    1a7e:	6923      	ldr	r3, [r4, #16]
    1a80:	b94b      	cbnz	r3, 1a96 <__swsetup_r+0x9a>
    1a82:	89a3      	ldrh	r3, [r4, #12]
    1a84:	f403 7320 	and.w	r3, r3, #640	; 0x280
    1a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1a8c:	d003      	beq.n	1a96 <__swsetup_r+0x9a>
    1a8e:	4621      	mov	r1, r4
    1a90:	4630      	mov	r0, r6
    1a92:	f000 f9c1 	bl	1e18 <__smakebuf_r>
    1a96:	89a2      	ldrh	r2, [r4, #12]
    1a98:	f012 0301 	ands.w	r3, r2, #1
    1a9c:	d00c      	beq.n	1ab8 <__swsetup_r+0xbc>
    1a9e:	2300      	movs	r3, #0
    1aa0:	60a3      	str	r3, [r4, #8]
    1aa2:	6963      	ldr	r3, [r4, #20]
    1aa4:	425b      	negs	r3, r3
    1aa6:	61a3      	str	r3, [r4, #24]
    1aa8:	6923      	ldr	r3, [r4, #16]
    1aaa:	b953      	cbnz	r3, 1ac2 <__swsetup_r+0xc6>
    1aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1ab0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    1ab4:	d1ba      	bne.n	1a2c <__swsetup_r+0x30>
    1ab6:	bd70      	pop	{r4, r5, r6, pc}
    1ab8:	0792      	lsls	r2, r2, #30
    1aba:	bf58      	it	pl
    1abc:	6963      	ldrpl	r3, [r4, #20]
    1abe:	60a3      	str	r3, [r4, #8]
    1ac0:	e7f2      	b.n	1aa8 <__swsetup_r+0xac>
    1ac2:	2000      	movs	r0, #0
    1ac4:	e7f7      	b.n	1ab6 <__swsetup_r+0xba>
    1ac6:	bf00      	nop
    1ac8:	2000003c 	.word	0x2000003c
    1acc:	00004790 	.word	0x00004790
    1ad0:	000047b0 	.word	0x000047b0
    1ad4:	00004770 	.word	0x00004770

00001ad8 <__sflush_r>:
    1ad8:	898a      	ldrh	r2, [r1, #12]
    1ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ade:	4605      	mov	r5, r0
    1ae0:	0710      	lsls	r0, r2, #28
    1ae2:	460c      	mov	r4, r1
    1ae4:	d45a      	bmi.n	1b9c <__sflush_r+0xc4>
    1ae6:	684b      	ldr	r3, [r1, #4]
    1ae8:	2b00      	cmp	r3, #0
    1aea:	dc05      	bgt.n	1af8 <__sflush_r+0x20>
    1aec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1aee:	2b00      	cmp	r3, #0
    1af0:	dc02      	bgt.n	1af8 <__sflush_r+0x20>
    1af2:	2000      	movs	r0, #0
    1af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1afa:	2e00      	cmp	r6, #0
    1afc:	d0f9      	beq.n	1af2 <__sflush_r+0x1a>
    1afe:	2300      	movs	r3, #0
    1b00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    1b04:	682f      	ldr	r7, [r5, #0]
    1b06:	602b      	str	r3, [r5, #0]
    1b08:	d033      	beq.n	1b72 <__sflush_r+0x9a>
    1b0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1b0c:	89a3      	ldrh	r3, [r4, #12]
    1b0e:	075a      	lsls	r2, r3, #29
    1b10:	d505      	bpl.n	1b1e <__sflush_r+0x46>
    1b12:	6863      	ldr	r3, [r4, #4]
    1b14:	1ac0      	subs	r0, r0, r3
    1b16:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1b18:	b10b      	cbz	r3, 1b1e <__sflush_r+0x46>
    1b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1b1c:	1ac0      	subs	r0, r0, r3
    1b1e:	2300      	movs	r3, #0
    1b20:	4602      	mov	r2, r0
    1b22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    1b24:	6a21      	ldr	r1, [r4, #32]
    1b26:	4628      	mov	r0, r5
    1b28:	47b0      	blx	r6
    1b2a:	1c43      	adds	r3, r0, #1
    1b2c:	89a3      	ldrh	r3, [r4, #12]
    1b2e:	d106      	bne.n	1b3e <__sflush_r+0x66>
    1b30:	6829      	ldr	r1, [r5, #0]
    1b32:	291d      	cmp	r1, #29
    1b34:	d84b      	bhi.n	1bce <__sflush_r+0xf6>
    1b36:	4a2b      	ldr	r2, [pc, #172]	; (1be4 <__sflush_r+0x10c>)
    1b38:	40ca      	lsrs	r2, r1
    1b3a:	07d6      	lsls	r6, r2, #31
    1b3c:	d547      	bpl.n	1bce <__sflush_r+0xf6>
    1b3e:	2200      	movs	r2, #0
    1b40:	6062      	str	r2, [r4, #4]
    1b42:	04d9      	lsls	r1, r3, #19
    1b44:	6922      	ldr	r2, [r4, #16]
    1b46:	6022      	str	r2, [r4, #0]
    1b48:	d504      	bpl.n	1b54 <__sflush_r+0x7c>
    1b4a:	1c42      	adds	r2, r0, #1
    1b4c:	d101      	bne.n	1b52 <__sflush_r+0x7a>
    1b4e:	682b      	ldr	r3, [r5, #0]
    1b50:	b903      	cbnz	r3, 1b54 <__sflush_r+0x7c>
    1b52:	6560      	str	r0, [r4, #84]	; 0x54
    1b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1b56:	602f      	str	r7, [r5, #0]
    1b58:	2900      	cmp	r1, #0
    1b5a:	d0ca      	beq.n	1af2 <__sflush_r+0x1a>
    1b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    1b60:	4299      	cmp	r1, r3
    1b62:	d002      	beq.n	1b6a <__sflush_r+0x92>
    1b64:	4628      	mov	r0, r5
    1b66:	f000 f99f 	bl	1ea8 <_free_r>
    1b6a:	2000      	movs	r0, #0
    1b6c:	6360      	str	r0, [r4, #52]	; 0x34
    1b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b72:	6a21      	ldr	r1, [r4, #32]
    1b74:	2301      	movs	r3, #1
    1b76:	4628      	mov	r0, r5
    1b78:	47b0      	blx	r6
    1b7a:	1c41      	adds	r1, r0, #1
    1b7c:	d1c6      	bne.n	1b0c <__sflush_r+0x34>
    1b7e:	682b      	ldr	r3, [r5, #0]
    1b80:	2b00      	cmp	r3, #0
    1b82:	d0c3      	beq.n	1b0c <__sflush_r+0x34>
    1b84:	2b1d      	cmp	r3, #29
    1b86:	d001      	beq.n	1b8c <__sflush_r+0xb4>
    1b88:	2b16      	cmp	r3, #22
    1b8a:	d101      	bne.n	1b90 <__sflush_r+0xb8>
    1b8c:	602f      	str	r7, [r5, #0]
    1b8e:	e7b0      	b.n	1af2 <__sflush_r+0x1a>
    1b90:	89a3      	ldrh	r3, [r4, #12]
    1b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1b96:	81a3      	strh	r3, [r4, #12]
    1b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b9c:	690f      	ldr	r7, [r1, #16]
    1b9e:	2f00      	cmp	r7, #0
    1ba0:	d0a7      	beq.n	1af2 <__sflush_r+0x1a>
    1ba2:	0793      	lsls	r3, r2, #30
    1ba4:	680e      	ldr	r6, [r1, #0]
    1ba6:	bf08      	it	eq
    1ba8:	694b      	ldreq	r3, [r1, #20]
    1baa:	600f      	str	r7, [r1, #0]
    1bac:	bf18      	it	ne
    1bae:	2300      	movne	r3, #0
    1bb0:	eba6 0807 	sub.w	r8, r6, r7
    1bb4:	608b      	str	r3, [r1, #8]
    1bb6:	f1b8 0f00 	cmp.w	r8, #0
    1bba:	dd9a      	ble.n	1af2 <__sflush_r+0x1a>
    1bbc:	4643      	mov	r3, r8
    1bbe:	463a      	mov	r2, r7
    1bc0:	6a21      	ldr	r1, [r4, #32]
    1bc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1bc4:	4628      	mov	r0, r5
    1bc6:	47b0      	blx	r6
    1bc8:	2800      	cmp	r0, #0
    1bca:	dc07      	bgt.n	1bdc <__sflush_r+0x104>
    1bcc:	89a3      	ldrh	r3, [r4, #12]
    1bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1bd2:	81a3      	strh	r3, [r4, #12]
    1bd4:	f04f 30ff 	mov.w	r0, #4294967295
    1bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bdc:	4407      	add	r7, r0
    1bde:	eba8 0800 	sub.w	r8, r8, r0
    1be2:	e7e8      	b.n	1bb6 <__sflush_r+0xde>
    1be4:	20400001 	.word	0x20400001

00001be8 <_fflush_r>:
    1be8:	b538      	push	{r3, r4, r5, lr}
    1bea:	690b      	ldr	r3, [r1, #16]
    1bec:	4605      	mov	r5, r0
    1bee:	460c      	mov	r4, r1
    1bf0:	b1db      	cbz	r3, 1c2a <_fflush_r+0x42>
    1bf2:	b118      	cbz	r0, 1bfc <_fflush_r+0x14>
    1bf4:	6983      	ldr	r3, [r0, #24]
    1bf6:	b90b      	cbnz	r3, 1bfc <_fflush_r+0x14>
    1bf8:	f000 f860 	bl	1cbc <__sinit>
    1bfc:	4b0c      	ldr	r3, [pc, #48]	; (1c30 <_fflush_r+0x48>)
    1bfe:	429c      	cmp	r4, r3
    1c00:	d109      	bne.n	1c16 <_fflush_r+0x2e>
    1c02:	686c      	ldr	r4, [r5, #4]
    1c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1c08:	b17b      	cbz	r3, 1c2a <_fflush_r+0x42>
    1c0a:	4621      	mov	r1, r4
    1c0c:	4628      	mov	r0, r5
    1c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1c12:	f7ff bf61 	b.w	1ad8 <__sflush_r>
    1c16:	4b07      	ldr	r3, [pc, #28]	; (1c34 <_fflush_r+0x4c>)
    1c18:	429c      	cmp	r4, r3
    1c1a:	d101      	bne.n	1c20 <_fflush_r+0x38>
    1c1c:	68ac      	ldr	r4, [r5, #8]
    1c1e:	e7f1      	b.n	1c04 <_fflush_r+0x1c>
    1c20:	4b05      	ldr	r3, [pc, #20]	; (1c38 <_fflush_r+0x50>)
    1c22:	429c      	cmp	r4, r3
    1c24:	bf08      	it	eq
    1c26:	68ec      	ldreq	r4, [r5, #12]
    1c28:	e7ec      	b.n	1c04 <_fflush_r+0x1c>
    1c2a:	2000      	movs	r0, #0
    1c2c:	bd38      	pop	{r3, r4, r5, pc}
    1c2e:	bf00      	nop
    1c30:	00004790 	.word	0x00004790
    1c34:	000047b0 	.word	0x000047b0
    1c38:	00004770 	.word	0x00004770

00001c3c <_cleanup_r>:
    1c3c:	4901      	ldr	r1, [pc, #4]	; (1c44 <_cleanup_r+0x8>)
    1c3e:	f000 b8a9 	b.w	1d94 <_fwalk_reent>
    1c42:	bf00      	nop
    1c44:	00001be9 	.word	0x00001be9

00001c48 <std.isra.0>:
    1c48:	2300      	movs	r3, #0
    1c4a:	b510      	push	{r4, lr}
    1c4c:	4604      	mov	r4, r0
    1c4e:	6003      	str	r3, [r0, #0]
    1c50:	6043      	str	r3, [r0, #4]
    1c52:	6083      	str	r3, [r0, #8]
    1c54:	8181      	strh	r1, [r0, #12]
    1c56:	6643      	str	r3, [r0, #100]	; 0x64
    1c58:	81c2      	strh	r2, [r0, #14]
    1c5a:	6103      	str	r3, [r0, #16]
    1c5c:	6143      	str	r3, [r0, #20]
    1c5e:	6183      	str	r3, [r0, #24]
    1c60:	4619      	mov	r1, r3
    1c62:	2208      	movs	r2, #8
    1c64:	305c      	adds	r0, #92	; 0x5c
    1c66:	f7ff fd5e 	bl	1726 <memset>
    1c6a:	4b05      	ldr	r3, [pc, #20]	; (1c80 <std.isra.0+0x38>)
    1c6c:	6263      	str	r3, [r4, #36]	; 0x24
    1c6e:	4b05      	ldr	r3, [pc, #20]	; (1c84 <std.isra.0+0x3c>)
    1c70:	62a3      	str	r3, [r4, #40]	; 0x28
    1c72:	4b05      	ldr	r3, [pc, #20]	; (1c88 <std.isra.0+0x40>)
    1c74:	62e3      	str	r3, [r4, #44]	; 0x2c
    1c76:	4b05      	ldr	r3, [pc, #20]	; (1c8c <std.isra.0+0x44>)
    1c78:	6224      	str	r4, [r4, #32]
    1c7a:	6323      	str	r3, [r4, #48]	; 0x30
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	bf00      	nop
    1c80:	000025c9 	.word	0x000025c9
    1c84:	000025eb 	.word	0x000025eb
    1c88:	00002623 	.word	0x00002623
    1c8c:	00002647 	.word	0x00002647

00001c90 <__sfmoreglue>:
    1c90:	b570      	push	{r4, r5, r6, lr}
    1c92:	1e4a      	subs	r2, r1, #1
    1c94:	2568      	movs	r5, #104	; 0x68
    1c96:	4355      	muls	r5, r2
    1c98:	460e      	mov	r6, r1
    1c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
    1c9e:	f000 f951 	bl	1f44 <_malloc_r>
    1ca2:	4604      	mov	r4, r0
    1ca4:	b140      	cbz	r0, 1cb8 <__sfmoreglue+0x28>
    1ca6:	2100      	movs	r1, #0
    1ca8:	e880 0042 	stmia.w	r0, {r1, r6}
    1cac:	300c      	adds	r0, #12
    1cae:	60a0      	str	r0, [r4, #8]
    1cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
    1cb4:	f7ff fd37 	bl	1726 <memset>
    1cb8:	4620      	mov	r0, r4
    1cba:	bd70      	pop	{r4, r5, r6, pc}

00001cbc <__sinit>:
    1cbc:	6983      	ldr	r3, [r0, #24]
    1cbe:	b510      	push	{r4, lr}
    1cc0:	4604      	mov	r4, r0
    1cc2:	bb33      	cbnz	r3, 1d12 <__sinit+0x56>
    1cc4:	6483      	str	r3, [r0, #72]	; 0x48
    1cc6:	64c3      	str	r3, [r0, #76]	; 0x4c
    1cc8:	6503      	str	r3, [r0, #80]	; 0x50
    1cca:	4b12      	ldr	r3, [pc, #72]	; (1d14 <__sinit+0x58>)
    1ccc:	4a12      	ldr	r2, [pc, #72]	; (1d18 <__sinit+0x5c>)
    1cce:	681b      	ldr	r3, [r3, #0]
    1cd0:	6282      	str	r2, [r0, #40]	; 0x28
    1cd2:	4298      	cmp	r0, r3
    1cd4:	bf04      	itt	eq
    1cd6:	2301      	moveq	r3, #1
    1cd8:	6183      	streq	r3, [r0, #24]
    1cda:	f000 f81f 	bl	1d1c <__sfp>
    1cde:	6060      	str	r0, [r4, #4]
    1ce0:	4620      	mov	r0, r4
    1ce2:	f000 f81b 	bl	1d1c <__sfp>
    1ce6:	60a0      	str	r0, [r4, #8]
    1ce8:	4620      	mov	r0, r4
    1cea:	f000 f817 	bl	1d1c <__sfp>
    1cee:	2200      	movs	r2, #0
    1cf0:	60e0      	str	r0, [r4, #12]
    1cf2:	2104      	movs	r1, #4
    1cf4:	6860      	ldr	r0, [r4, #4]
    1cf6:	f7ff ffa7 	bl	1c48 <std.isra.0>
    1cfa:	2201      	movs	r2, #1
    1cfc:	2109      	movs	r1, #9
    1cfe:	68a0      	ldr	r0, [r4, #8]
    1d00:	f7ff ffa2 	bl	1c48 <std.isra.0>
    1d04:	2202      	movs	r2, #2
    1d06:	2112      	movs	r1, #18
    1d08:	68e0      	ldr	r0, [r4, #12]
    1d0a:	f7ff ff9d 	bl	1c48 <std.isra.0>
    1d0e:	2301      	movs	r3, #1
    1d10:	61a3      	str	r3, [r4, #24]
    1d12:	bd10      	pop	{r4, pc}
    1d14:	0000476c 	.word	0x0000476c
    1d18:	00001c3d 	.word	0x00001c3d

00001d1c <__sfp>:
    1d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d1e:	4b1c      	ldr	r3, [pc, #112]	; (1d90 <__sfp+0x74>)
    1d20:	681e      	ldr	r6, [r3, #0]
    1d22:	69b3      	ldr	r3, [r6, #24]
    1d24:	4607      	mov	r7, r0
    1d26:	b913      	cbnz	r3, 1d2e <__sfp+0x12>
    1d28:	4630      	mov	r0, r6
    1d2a:	f7ff ffc7 	bl	1cbc <__sinit>
    1d2e:	3648      	adds	r6, #72	; 0x48
    1d30:	68b4      	ldr	r4, [r6, #8]
    1d32:	6873      	ldr	r3, [r6, #4]
    1d34:	3b01      	subs	r3, #1
    1d36:	d503      	bpl.n	1d40 <__sfp+0x24>
    1d38:	6833      	ldr	r3, [r6, #0]
    1d3a:	b133      	cbz	r3, 1d4a <__sfp+0x2e>
    1d3c:	6836      	ldr	r6, [r6, #0]
    1d3e:	e7f7      	b.n	1d30 <__sfp+0x14>
    1d40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    1d44:	b16d      	cbz	r5, 1d62 <__sfp+0x46>
    1d46:	3468      	adds	r4, #104	; 0x68
    1d48:	e7f4      	b.n	1d34 <__sfp+0x18>
    1d4a:	2104      	movs	r1, #4
    1d4c:	4638      	mov	r0, r7
    1d4e:	f7ff ff9f 	bl	1c90 <__sfmoreglue>
    1d52:	6030      	str	r0, [r6, #0]
    1d54:	2800      	cmp	r0, #0
    1d56:	d1f1      	bne.n	1d3c <__sfp+0x20>
    1d58:	230c      	movs	r3, #12
    1d5a:	603b      	str	r3, [r7, #0]
    1d5c:	4604      	mov	r4, r0
    1d5e:	4620      	mov	r0, r4
    1d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1d66:	81e3      	strh	r3, [r4, #14]
    1d68:	2301      	movs	r3, #1
    1d6a:	81a3      	strh	r3, [r4, #12]
    1d6c:	6665      	str	r5, [r4, #100]	; 0x64
    1d6e:	6025      	str	r5, [r4, #0]
    1d70:	60a5      	str	r5, [r4, #8]
    1d72:	6065      	str	r5, [r4, #4]
    1d74:	6125      	str	r5, [r4, #16]
    1d76:	6165      	str	r5, [r4, #20]
    1d78:	61a5      	str	r5, [r4, #24]
    1d7a:	2208      	movs	r2, #8
    1d7c:	4629      	mov	r1, r5
    1d7e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    1d82:	f7ff fcd0 	bl	1726 <memset>
    1d86:	6365      	str	r5, [r4, #52]	; 0x34
    1d88:	63a5      	str	r5, [r4, #56]	; 0x38
    1d8a:	64a5      	str	r5, [r4, #72]	; 0x48
    1d8c:	64e5      	str	r5, [r4, #76]	; 0x4c
    1d8e:	e7e6      	b.n	1d5e <__sfp+0x42>
    1d90:	0000476c 	.word	0x0000476c

00001d94 <_fwalk_reent>:
    1d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d98:	4680      	mov	r8, r0
    1d9a:	4689      	mov	r9, r1
    1d9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
    1da0:	2600      	movs	r6, #0
    1da2:	b914      	cbnz	r4, 1daa <_fwalk_reent+0x16>
    1da4:	4630      	mov	r0, r6
    1da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1daa:	68a5      	ldr	r5, [r4, #8]
    1dac:	6867      	ldr	r7, [r4, #4]
    1dae:	3f01      	subs	r7, #1
    1db0:	d501      	bpl.n	1db6 <_fwalk_reent+0x22>
    1db2:	6824      	ldr	r4, [r4, #0]
    1db4:	e7f5      	b.n	1da2 <_fwalk_reent+0xe>
    1db6:	89ab      	ldrh	r3, [r5, #12]
    1db8:	2b01      	cmp	r3, #1
    1dba:	d907      	bls.n	1dcc <_fwalk_reent+0x38>
    1dbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    1dc0:	3301      	adds	r3, #1
    1dc2:	d003      	beq.n	1dcc <_fwalk_reent+0x38>
    1dc4:	4629      	mov	r1, r5
    1dc6:	4640      	mov	r0, r8
    1dc8:	47c8      	blx	r9
    1dca:	4306      	orrs	r6, r0
    1dcc:	3568      	adds	r5, #104	; 0x68
    1dce:	e7ee      	b.n	1dae <_fwalk_reent+0x1a>

00001dd0 <__swhatbuf_r>:
    1dd0:	b570      	push	{r4, r5, r6, lr}
    1dd2:	460e      	mov	r6, r1
    1dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    1dd8:	2900      	cmp	r1, #0
    1dda:	b090      	sub	sp, #64	; 0x40
    1ddc:	4614      	mov	r4, r2
    1dde:	461d      	mov	r5, r3
    1de0:	da07      	bge.n	1df2 <__swhatbuf_r+0x22>
    1de2:	2300      	movs	r3, #0
    1de4:	602b      	str	r3, [r5, #0]
    1de6:	89b3      	ldrh	r3, [r6, #12]
    1de8:	061a      	lsls	r2, r3, #24
    1dea:	d410      	bmi.n	1e0e <__swhatbuf_r+0x3e>
    1dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1df0:	e00e      	b.n	1e10 <__swhatbuf_r+0x40>
    1df2:	aa01      	add	r2, sp, #4
    1df4:	f000 fc4e 	bl	2694 <_fstat_r>
    1df8:	2800      	cmp	r0, #0
    1dfa:	dbf2      	blt.n	1de2 <__swhatbuf_r+0x12>
    1dfc:	9a02      	ldr	r2, [sp, #8]
    1dfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    1e02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    1e06:	425a      	negs	r2, r3
    1e08:	415a      	adcs	r2, r3
    1e0a:	602a      	str	r2, [r5, #0]
    1e0c:	e7ee      	b.n	1dec <__swhatbuf_r+0x1c>
    1e0e:	2340      	movs	r3, #64	; 0x40
    1e10:	2000      	movs	r0, #0
    1e12:	6023      	str	r3, [r4, #0]
    1e14:	b010      	add	sp, #64	; 0x40
    1e16:	bd70      	pop	{r4, r5, r6, pc}

00001e18 <__smakebuf_r>:
    1e18:	898b      	ldrh	r3, [r1, #12]
    1e1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1e1c:	079d      	lsls	r5, r3, #30
    1e1e:	4606      	mov	r6, r0
    1e20:	460c      	mov	r4, r1
    1e22:	d507      	bpl.n	1e34 <__smakebuf_r+0x1c>
    1e24:	f104 0347 	add.w	r3, r4, #71	; 0x47
    1e28:	6023      	str	r3, [r4, #0]
    1e2a:	6123      	str	r3, [r4, #16]
    1e2c:	2301      	movs	r3, #1
    1e2e:	6163      	str	r3, [r4, #20]
    1e30:	b002      	add	sp, #8
    1e32:	bd70      	pop	{r4, r5, r6, pc}
    1e34:	ab01      	add	r3, sp, #4
    1e36:	466a      	mov	r2, sp
    1e38:	f7ff ffca 	bl	1dd0 <__swhatbuf_r>
    1e3c:	9900      	ldr	r1, [sp, #0]
    1e3e:	4605      	mov	r5, r0
    1e40:	4630      	mov	r0, r6
    1e42:	f000 f87f 	bl	1f44 <_malloc_r>
    1e46:	b948      	cbnz	r0, 1e5c <__smakebuf_r+0x44>
    1e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    1e4c:	059a      	lsls	r2, r3, #22
    1e4e:	d4ef      	bmi.n	1e30 <__smakebuf_r+0x18>
    1e50:	f023 0303 	bic.w	r3, r3, #3
    1e54:	f043 0302 	orr.w	r3, r3, #2
    1e58:	81a3      	strh	r3, [r4, #12]
    1e5a:	e7e3      	b.n	1e24 <__smakebuf_r+0xc>
    1e5c:	4b0d      	ldr	r3, [pc, #52]	; (1e94 <__smakebuf_r+0x7c>)
    1e5e:	62b3      	str	r3, [r6, #40]	; 0x28
    1e60:	89a3      	ldrh	r3, [r4, #12]
    1e62:	6020      	str	r0, [r4, #0]
    1e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1e68:	81a3      	strh	r3, [r4, #12]
    1e6a:	9b00      	ldr	r3, [sp, #0]
    1e6c:	6163      	str	r3, [r4, #20]
    1e6e:	9b01      	ldr	r3, [sp, #4]
    1e70:	6120      	str	r0, [r4, #16]
    1e72:	b15b      	cbz	r3, 1e8c <__smakebuf_r+0x74>
    1e74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    1e78:	4630      	mov	r0, r6
    1e7a:	f000 fc1d 	bl	26b8 <_isatty_r>
    1e7e:	b128      	cbz	r0, 1e8c <__smakebuf_r+0x74>
    1e80:	89a3      	ldrh	r3, [r4, #12]
    1e82:	f023 0303 	bic.w	r3, r3, #3
    1e86:	f043 0301 	orr.w	r3, r3, #1
    1e8a:	81a3      	strh	r3, [r4, #12]
    1e8c:	89a3      	ldrh	r3, [r4, #12]
    1e8e:	431d      	orrs	r5, r3
    1e90:	81a5      	strh	r5, [r4, #12]
    1e92:	e7cd      	b.n	1e30 <__smakebuf_r+0x18>
    1e94:	00001c3d 	.word	0x00001c3d

00001e98 <malloc>:
    1e98:	4b02      	ldr	r3, [pc, #8]	; (1ea4 <malloc+0xc>)
    1e9a:	4601      	mov	r1, r0
    1e9c:	6818      	ldr	r0, [r3, #0]
    1e9e:	f000 b851 	b.w	1f44 <_malloc_r>
    1ea2:	bf00      	nop
    1ea4:	2000003c 	.word	0x2000003c

00001ea8 <_free_r>:
    1ea8:	b538      	push	{r3, r4, r5, lr}
    1eaa:	4605      	mov	r5, r0
    1eac:	2900      	cmp	r1, #0
    1eae:	d045      	beq.n	1f3c <_free_r+0x94>
    1eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1eb4:	1f0c      	subs	r4, r1, #4
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	bfb8      	it	lt
    1eba:	18e4      	addlt	r4, r4, r3
    1ebc:	f000 fc70 	bl	27a0 <__malloc_lock>
    1ec0:	4a1f      	ldr	r2, [pc, #124]	; (1f40 <_free_r+0x98>)
    1ec2:	6813      	ldr	r3, [r2, #0]
    1ec4:	4610      	mov	r0, r2
    1ec6:	b933      	cbnz	r3, 1ed6 <_free_r+0x2e>
    1ec8:	6063      	str	r3, [r4, #4]
    1eca:	6014      	str	r4, [r2, #0]
    1ecc:	4628      	mov	r0, r5
    1ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1ed2:	f000 bc66 	b.w	27a2 <__malloc_unlock>
    1ed6:	42a3      	cmp	r3, r4
    1ed8:	d90c      	bls.n	1ef4 <_free_r+0x4c>
    1eda:	6821      	ldr	r1, [r4, #0]
    1edc:	1862      	adds	r2, r4, r1
    1ede:	4293      	cmp	r3, r2
    1ee0:	bf04      	itt	eq
    1ee2:	681a      	ldreq	r2, [r3, #0]
    1ee4:	685b      	ldreq	r3, [r3, #4]
    1ee6:	6063      	str	r3, [r4, #4]
    1ee8:	bf04      	itt	eq
    1eea:	1852      	addeq	r2, r2, r1
    1eec:	6022      	streq	r2, [r4, #0]
    1eee:	6004      	str	r4, [r0, #0]
    1ef0:	e7ec      	b.n	1ecc <_free_r+0x24>
    1ef2:	4613      	mov	r3, r2
    1ef4:	685a      	ldr	r2, [r3, #4]
    1ef6:	b10a      	cbz	r2, 1efc <_free_r+0x54>
    1ef8:	42a2      	cmp	r2, r4
    1efa:	d9fa      	bls.n	1ef2 <_free_r+0x4a>
    1efc:	6819      	ldr	r1, [r3, #0]
    1efe:	1858      	adds	r0, r3, r1
    1f00:	42a0      	cmp	r0, r4
    1f02:	d10b      	bne.n	1f1c <_free_r+0x74>
    1f04:	6820      	ldr	r0, [r4, #0]
    1f06:	4401      	add	r1, r0
    1f08:	1858      	adds	r0, r3, r1
    1f0a:	4282      	cmp	r2, r0
    1f0c:	6019      	str	r1, [r3, #0]
    1f0e:	d1dd      	bne.n	1ecc <_free_r+0x24>
    1f10:	6810      	ldr	r0, [r2, #0]
    1f12:	6852      	ldr	r2, [r2, #4]
    1f14:	605a      	str	r2, [r3, #4]
    1f16:	4401      	add	r1, r0
    1f18:	6019      	str	r1, [r3, #0]
    1f1a:	e7d7      	b.n	1ecc <_free_r+0x24>
    1f1c:	d902      	bls.n	1f24 <_free_r+0x7c>
    1f1e:	230c      	movs	r3, #12
    1f20:	602b      	str	r3, [r5, #0]
    1f22:	e7d3      	b.n	1ecc <_free_r+0x24>
    1f24:	6820      	ldr	r0, [r4, #0]
    1f26:	1821      	adds	r1, r4, r0
    1f28:	428a      	cmp	r2, r1
    1f2a:	bf04      	itt	eq
    1f2c:	6811      	ldreq	r1, [r2, #0]
    1f2e:	6852      	ldreq	r2, [r2, #4]
    1f30:	6062      	str	r2, [r4, #4]
    1f32:	bf04      	itt	eq
    1f34:	1809      	addeq	r1, r1, r0
    1f36:	6021      	streq	r1, [r4, #0]
    1f38:	605c      	str	r4, [r3, #4]
    1f3a:	e7c7      	b.n	1ecc <_free_r+0x24>
    1f3c:	bd38      	pop	{r3, r4, r5, pc}
    1f3e:	bf00      	nop
    1f40:	20000154 	.word	0x20000154

00001f44 <_malloc_r>:
    1f44:	b570      	push	{r4, r5, r6, lr}
    1f46:	1ccd      	adds	r5, r1, #3
    1f48:	f025 0503 	bic.w	r5, r5, #3
    1f4c:	3508      	adds	r5, #8
    1f4e:	2d0c      	cmp	r5, #12
    1f50:	bf38      	it	cc
    1f52:	250c      	movcc	r5, #12
    1f54:	2d00      	cmp	r5, #0
    1f56:	4606      	mov	r6, r0
    1f58:	db01      	blt.n	1f5e <_malloc_r+0x1a>
    1f5a:	42a9      	cmp	r1, r5
    1f5c:	d903      	bls.n	1f66 <_malloc_r+0x22>
    1f5e:	230c      	movs	r3, #12
    1f60:	6033      	str	r3, [r6, #0]
    1f62:	2000      	movs	r0, #0
    1f64:	bd70      	pop	{r4, r5, r6, pc}
    1f66:	f000 fc1b 	bl	27a0 <__malloc_lock>
    1f6a:	4a23      	ldr	r2, [pc, #140]	; (1ff8 <_malloc_r+0xb4>)
    1f6c:	6814      	ldr	r4, [r2, #0]
    1f6e:	4621      	mov	r1, r4
    1f70:	b991      	cbnz	r1, 1f98 <_malloc_r+0x54>
    1f72:	4c22      	ldr	r4, [pc, #136]	; (1ffc <_malloc_r+0xb8>)
    1f74:	6823      	ldr	r3, [r4, #0]
    1f76:	b91b      	cbnz	r3, 1f80 <_malloc_r+0x3c>
    1f78:	4630      	mov	r0, r6
    1f7a:	f000 fb15 	bl	25a8 <_sbrk_r>
    1f7e:	6020      	str	r0, [r4, #0]
    1f80:	4629      	mov	r1, r5
    1f82:	4630      	mov	r0, r6
    1f84:	f000 fb10 	bl	25a8 <_sbrk_r>
    1f88:	1c43      	adds	r3, r0, #1
    1f8a:	d126      	bne.n	1fda <_malloc_r+0x96>
    1f8c:	230c      	movs	r3, #12
    1f8e:	6033      	str	r3, [r6, #0]
    1f90:	4630      	mov	r0, r6
    1f92:	f000 fc06 	bl	27a2 <__malloc_unlock>
    1f96:	e7e4      	b.n	1f62 <_malloc_r+0x1e>
    1f98:	680b      	ldr	r3, [r1, #0]
    1f9a:	1b5b      	subs	r3, r3, r5
    1f9c:	d41a      	bmi.n	1fd4 <_malloc_r+0x90>
    1f9e:	2b0b      	cmp	r3, #11
    1fa0:	d90f      	bls.n	1fc2 <_malloc_r+0x7e>
    1fa2:	600b      	str	r3, [r1, #0]
    1fa4:	50cd      	str	r5, [r1, r3]
    1fa6:	18cc      	adds	r4, r1, r3
    1fa8:	4630      	mov	r0, r6
    1faa:	f000 fbfa 	bl	27a2 <__malloc_unlock>
    1fae:	f104 000b 	add.w	r0, r4, #11
    1fb2:	1d23      	adds	r3, r4, #4
    1fb4:	f020 0007 	bic.w	r0, r0, #7
    1fb8:	1ac3      	subs	r3, r0, r3
    1fba:	d01b      	beq.n	1ff4 <_malloc_r+0xb0>
    1fbc:	425a      	negs	r2, r3
    1fbe:	50e2      	str	r2, [r4, r3]
    1fc0:	bd70      	pop	{r4, r5, r6, pc}
    1fc2:	428c      	cmp	r4, r1
    1fc4:	bf0d      	iteet	eq
    1fc6:	6863      	ldreq	r3, [r4, #4]
    1fc8:	684b      	ldrne	r3, [r1, #4]
    1fca:	6063      	strne	r3, [r4, #4]
    1fcc:	6013      	streq	r3, [r2, #0]
    1fce:	bf18      	it	ne
    1fd0:	460c      	movne	r4, r1
    1fd2:	e7e9      	b.n	1fa8 <_malloc_r+0x64>
    1fd4:	460c      	mov	r4, r1
    1fd6:	6849      	ldr	r1, [r1, #4]
    1fd8:	e7ca      	b.n	1f70 <_malloc_r+0x2c>
    1fda:	1cc4      	adds	r4, r0, #3
    1fdc:	f024 0403 	bic.w	r4, r4, #3
    1fe0:	42a0      	cmp	r0, r4
    1fe2:	d005      	beq.n	1ff0 <_malloc_r+0xac>
    1fe4:	1a21      	subs	r1, r4, r0
    1fe6:	4630      	mov	r0, r6
    1fe8:	f000 fade 	bl	25a8 <_sbrk_r>
    1fec:	3001      	adds	r0, #1
    1fee:	d0cd      	beq.n	1f8c <_malloc_r+0x48>
    1ff0:	6025      	str	r5, [r4, #0]
    1ff2:	e7d9      	b.n	1fa8 <_malloc_r+0x64>
    1ff4:	bd70      	pop	{r4, r5, r6, pc}
    1ff6:	bf00      	nop
    1ff8:	20000154 	.word	0x20000154
    1ffc:	20000158 	.word	0x20000158

00002000 <__sfputc_r>:
    2000:	6893      	ldr	r3, [r2, #8]
    2002:	3b01      	subs	r3, #1
    2004:	2b00      	cmp	r3, #0
    2006:	b410      	push	{r4}
    2008:	6093      	str	r3, [r2, #8]
    200a:	da08      	bge.n	201e <__sfputc_r+0x1e>
    200c:	6994      	ldr	r4, [r2, #24]
    200e:	42a3      	cmp	r3, r4
    2010:	db02      	blt.n	2018 <__sfputc_r+0x18>
    2012:	b2cb      	uxtb	r3, r1
    2014:	2b0a      	cmp	r3, #10
    2016:	d102      	bne.n	201e <__sfputc_r+0x1e>
    2018:	bc10      	pop	{r4}
    201a:	f7ff bc9d 	b.w	1958 <__swbuf_r>
    201e:	6813      	ldr	r3, [r2, #0]
    2020:	1c58      	adds	r0, r3, #1
    2022:	6010      	str	r0, [r2, #0]
    2024:	7019      	strb	r1, [r3, #0]
    2026:	b2c8      	uxtb	r0, r1
    2028:	bc10      	pop	{r4}
    202a:	4770      	bx	lr

0000202c <__sfputs_r>:
    202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    202e:	4606      	mov	r6, r0
    2030:	460f      	mov	r7, r1
    2032:	4614      	mov	r4, r2
    2034:	18d5      	adds	r5, r2, r3
    2036:	42ac      	cmp	r4, r5
    2038:	d101      	bne.n	203e <__sfputs_r+0x12>
    203a:	2000      	movs	r0, #0
    203c:	e007      	b.n	204e <__sfputs_r+0x22>
    203e:	463a      	mov	r2, r7
    2040:	f814 1b01 	ldrb.w	r1, [r4], #1
    2044:	4630      	mov	r0, r6
    2046:	f7ff ffdb 	bl	2000 <__sfputc_r>
    204a:	1c43      	adds	r3, r0, #1
    204c:	d1f3      	bne.n	2036 <__sfputs_r+0xa>
    204e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002050 <_vfiprintf_r>:
    2050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2054:	b09d      	sub	sp, #116	; 0x74
    2056:	460c      	mov	r4, r1
    2058:	4617      	mov	r7, r2
    205a:	9303      	str	r3, [sp, #12]
    205c:	4606      	mov	r6, r0
    205e:	b118      	cbz	r0, 2068 <_vfiprintf_r+0x18>
    2060:	6983      	ldr	r3, [r0, #24]
    2062:	b90b      	cbnz	r3, 2068 <_vfiprintf_r+0x18>
    2064:	f7ff fe2a 	bl	1cbc <__sinit>
    2068:	4b7c      	ldr	r3, [pc, #496]	; (225c <_vfiprintf_r+0x20c>)
    206a:	429c      	cmp	r4, r3
    206c:	d157      	bne.n	211e <_vfiprintf_r+0xce>
    206e:	6874      	ldr	r4, [r6, #4]
    2070:	89a3      	ldrh	r3, [r4, #12]
    2072:	0718      	lsls	r0, r3, #28
    2074:	d55d      	bpl.n	2132 <_vfiprintf_r+0xe2>
    2076:	6923      	ldr	r3, [r4, #16]
    2078:	2b00      	cmp	r3, #0
    207a:	d05a      	beq.n	2132 <_vfiprintf_r+0xe2>
    207c:	2300      	movs	r3, #0
    207e:	9309      	str	r3, [sp, #36]	; 0x24
    2080:	2320      	movs	r3, #32
    2082:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    2086:	2330      	movs	r3, #48	; 0x30
    2088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    208c:	f04f 0b01 	mov.w	fp, #1
    2090:	46b8      	mov	r8, r7
    2092:	4645      	mov	r5, r8
    2094:	f815 3b01 	ldrb.w	r3, [r5], #1
    2098:	2b00      	cmp	r3, #0
    209a:	d155      	bne.n	2148 <_vfiprintf_r+0xf8>
    209c:	ebb8 0a07 	subs.w	sl, r8, r7
    20a0:	d00b      	beq.n	20ba <_vfiprintf_r+0x6a>
    20a2:	4653      	mov	r3, sl
    20a4:	463a      	mov	r2, r7
    20a6:	4621      	mov	r1, r4
    20a8:	4630      	mov	r0, r6
    20aa:	f7ff ffbf 	bl	202c <__sfputs_r>
    20ae:	3001      	adds	r0, #1
    20b0:	f000 80c4 	beq.w	223c <_vfiprintf_r+0x1ec>
    20b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    20b6:	4453      	add	r3, sl
    20b8:	9309      	str	r3, [sp, #36]	; 0x24
    20ba:	f898 3000 	ldrb.w	r3, [r8]
    20be:	2b00      	cmp	r3, #0
    20c0:	f000 80bc 	beq.w	223c <_vfiprintf_r+0x1ec>
    20c4:	2300      	movs	r3, #0
    20c6:	f04f 32ff 	mov.w	r2, #4294967295
    20ca:	9304      	str	r3, [sp, #16]
    20cc:	9307      	str	r3, [sp, #28]
    20ce:	9205      	str	r2, [sp, #20]
    20d0:	9306      	str	r3, [sp, #24]
    20d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    20d6:	931a      	str	r3, [sp, #104]	; 0x68
    20d8:	2205      	movs	r2, #5
    20da:	7829      	ldrb	r1, [r5, #0]
    20dc:	4860      	ldr	r0, [pc, #384]	; (2260 <_vfiprintf_r+0x210>)
    20de:	f000 fb0f 	bl	2700 <memchr>
    20e2:	f105 0801 	add.w	r8, r5, #1
    20e6:	9b04      	ldr	r3, [sp, #16]
    20e8:	2800      	cmp	r0, #0
    20ea:	d131      	bne.n	2150 <_vfiprintf_r+0x100>
    20ec:	06d9      	lsls	r1, r3, #27
    20ee:	bf44      	itt	mi
    20f0:	2220      	movmi	r2, #32
    20f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    20f6:	071a      	lsls	r2, r3, #28
    20f8:	bf44      	itt	mi
    20fa:	222b      	movmi	r2, #43	; 0x2b
    20fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    2100:	782a      	ldrb	r2, [r5, #0]
    2102:	2a2a      	cmp	r2, #42	; 0x2a
    2104:	d02c      	beq.n	2160 <_vfiprintf_r+0x110>
    2106:	9a07      	ldr	r2, [sp, #28]
    2108:	2100      	movs	r1, #0
    210a:	200a      	movs	r0, #10
    210c:	46a8      	mov	r8, r5
    210e:	3501      	adds	r5, #1
    2110:	f898 3000 	ldrb.w	r3, [r8]
    2114:	3b30      	subs	r3, #48	; 0x30
    2116:	2b09      	cmp	r3, #9
    2118:	d96d      	bls.n	21f6 <_vfiprintf_r+0x1a6>
    211a:	b371      	cbz	r1, 217a <_vfiprintf_r+0x12a>
    211c:	e026      	b.n	216c <_vfiprintf_r+0x11c>
    211e:	4b51      	ldr	r3, [pc, #324]	; (2264 <_vfiprintf_r+0x214>)
    2120:	429c      	cmp	r4, r3
    2122:	d101      	bne.n	2128 <_vfiprintf_r+0xd8>
    2124:	68b4      	ldr	r4, [r6, #8]
    2126:	e7a3      	b.n	2070 <_vfiprintf_r+0x20>
    2128:	4b4f      	ldr	r3, [pc, #316]	; (2268 <_vfiprintf_r+0x218>)
    212a:	429c      	cmp	r4, r3
    212c:	bf08      	it	eq
    212e:	68f4      	ldreq	r4, [r6, #12]
    2130:	e79e      	b.n	2070 <_vfiprintf_r+0x20>
    2132:	4621      	mov	r1, r4
    2134:	4630      	mov	r0, r6
    2136:	f7ff fc61 	bl	19fc <__swsetup_r>
    213a:	2800      	cmp	r0, #0
    213c:	d09e      	beq.n	207c <_vfiprintf_r+0x2c>
    213e:	f04f 30ff 	mov.w	r0, #4294967295
    2142:	b01d      	add	sp, #116	; 0x74
    2144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2148:	2b25      	cmp	r3, #37	; 0x25
    214a:	d0a7      	beq.n	209c <_vfiprintf_r+0x4c>
    214c:	46a8      	mov	r8, r5
    214e:	e7a0      	b.n	2092 <_vfiprintf_r+0x42>
    2150:	4a43      	ldr	r2, [pc, #268]	; (2260 <_vfiprintf_r+0x210>)
    2152:	1a80      	subs	r0, r0, r2
    2154:	fa0b f000 	lsl.w	r0, fp, r0
    2158:	4318      	orrs	r0, r3
    215a:	9004      	str	r0, [sp, #16]
    215c:	4645      	mov	r5, r8
    215e:	e7bb      	b.n	20d8 <_vfiprintf_r+0x88>
    2160:	9a03      	ldr	r2, [sp, #12]
    2162:	1d11      	adds	r1, r2, #4
    2164:	6812      	ldr	r2, [r2, #0]
    2166:	9103      	str	r1, [sp, #12]
    2168:	2a00      	cmp	r2, #0
    216a:	db01      	blt.n	2170 <_vfiprintf_r+0x120>
    216c:	9207      	str	r2, [sp, #28]
    216e:	e004      	b.n	217a <_vfiprintf_r+0x12a>
    2170:	4252      	negs	r2, r2
    2172:	f043 0302 	orr.w	r3, r3, #2
    2176:	9207      	str	r2, [sp, #28]
    2178:	9304      	str	r3, [sp, #16]
    217a:	f898 3000 	ldrb.w	r3, [r8]
    217e:	2b2e      	cmp	r3, #46	; 0x2e
    2180:	d110      	bne.n	21a4 <_vfiprintf_r+0x154>
    2182:	f898 3001 	ldrb.w	r3, [r8, #1]
    2186:	2b2a      	cmp	r3, #42	; 0x2a
    2188:	f108 0101 	add.w	r1, r8, #1
    218c:	d137      	bne.n	21fe <_vfiprintf_r+0x1ae>
    218e:	9b03      	ldr	r3, [sp, #12]
    2190:	1d1a      	adds	r2, r3, #4
    2192:	681b      	ldr	r3, [r3, #0]
    2194:	9203      	str	r2, [sp, #12]
    2196:	2b00      	cmp	r3, #0
    2198:	bfb8      	it	lt
    219a:	f04f 33ff 	movlt.w	r3, #4294967295
    219e:	f108 0802 	add.w	r8, r8, #2
    21a2:	9305      	str	r3, [sp, #20]
    21a4:	4d31      	ldr	r5, [pc, #196]	; (226c <_vfiprintf_r+0x21c>)
    21a6:	f898 1000 	ldrb.w	r1, [r8]
    21aa:	2203      	movs	r2, #3
    21ac:	4628      	mov	r0, r5
    21ae:	f000 faa7 	bl	2700 <memchr>
    21b2:	b140      	cbz	r0, 21c6 <_vfiprintf_r+0x176>
    21b4:	2340      	movs	r3, #64	; 0x40
    21b6:	1b40      	subs	r0, r0, r5
    21b8:	fa03 f000 	lsl.w	r0, r3, r0
    21bc:	9b04      	ldr	r3, [sp, #16]
    21be:	4303      	orrs	r3, r0
    21c0:	9304      	str	r3, [sp, #16]
    21c2:	f108 0801 	add.w	r8, r8, #1
    21c6:	f898 1000 	ldrb.w	r1, [r8]
    21ca:	4829      	ldr	r0, [pc, #164]	; (2270 <_vfiprintf_r+0x220>)
    21cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    21d0:	2206      	movs	r2, #6
    21d2:	f108 0701 	add.w	r7, r8, #1
    21d6:	f000 fa93 	bl	2700 <memchr>
    21da:	2800      	cmp	r0, #0
    21dc:	d034      	beq.n	2248 <_vfiprintf_r+0x1f8>
    21de:	4b25      	ldr	r3, [pc, #148]	; (2274 <_vfiprintf_r+0x224>)
    21e0:	bb03      	cbnz	r3, 2224 <_vfiprintf_r+0x1d4>
    21e2:	9b03      	ldr	r3, [sp, #12]
    21e4:	3307      	adds	r3, #7
    21e6:	f023 0307 	bic.w	r3, r3, #7
    21ea:	3308      	adds	r3, #8
    21ec:	9303      	str	r3, [sp, #12]
    21ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21f0:	444b      	add	r3, r9
    21f2:	9309      	str	r3, [sp, #36]	; 0x24
    21f4:	e74c      	b.n	2090 <_vfiprintf_r+0x40>
    21f6:	fb00 3202 	mla	r2, r0, r2, r3
    21fa:	2101      	movs	r1, #1
    21fc:	e786      	b.n	210c <_vfiprintf_r+0xbc>
    21fe:	2300      	movs	r3, #0
    2200:	9305      	str	r3, [sp, #20]
    2202:	4618      	mov	r0, r3
    2204:	250a      	movs	r5, #10
    2206:	4688      	mov	r8, r1
    2208:	3101      	adds	r1, #1
    220a:	f898 2000 	ldrb.w	r2, [r8]
    220e:	3a30      	subs	r2, #48	; 0x30
    2210:	2a09      	cmp	r2, #9
    2212:	d903      	bls.n	221c <_vfiprintf_r+0x1cc>
    2214:	2b00      	cmp	r3, #0
    2216:	d0c5      	beq.n	21a4 <_vfiprintf_r+0x154>
    2218:	9005      	str	r0, [sp, #20]
    221a:	e7c3      	b.n	21a4 <_vfiprintf_r+0x154>
    221c:	fb05 2000 	mla	r0, r5, r0, r2
    2220:	2301      	movs	r3, #1
    2222:	e7f0      	b.n	2206 <_vfiprintf_r+0x1b6>
    2224:	ab03      	add	r3, sp, #12
    2226:	9300      	str	r3, [sp, #0]
    2228:	4622      	mov	r2, r4
    222a:	4b13      	ldr	r3, [pc, #76]	; (2278 <_vfiprintf_r+0x228>)
    222c:	a904      	add	r1, sp, #16
    222e:	4630      	mov	r0, r6
    2230:	f3af 8000 	nop.w
    2234:	f1b0 3fff 	cmp.w	r0, #4294967295
    2238:	4681      	mov	r9, r0
    223a:	d1d8      	bne.n	21ee <_vfiprintf_r+0x19e>
    223c:	89a3      	ldrh	r3, [r4, #12]
    223e:	065b      	lsls	r3, r3, #25
    2240:	f53f af7d 	bmi.w	213e <_vfiprintf_r+0xee>
    2244:	9809      	ldr	r0, [sp, #36]	; 0x24
    2246:	e77c      	b.n	2142 <_vfiprintf_r+0xf2>
    2248:	ab03      	add	r3, sp, #12
    224a:	9300      	str	r3, [sp, #0]
    224c:	4622      	mov	r2, r4
    224e:	4b0a      	ldr	r3, [pc, #40]	; (2278 <_vfiprintf_r+0x228>)
    2250:	a904      	add	r1, sp, #16
    2252:	4630      	mov	r0, r6
    2254:	f000 f888 	bl	2368 <_printf_i>
    2258:	e7ec      	b.n	2234 <_vfiprintf_r+0x1e4>
    225a:	bf00      	nop
    225c:	00004790 	.word	0x00004790
    2260:	000047d0 	.word	0x000047d0
    2264:	000047b0 	.word	0x000047b0
    2268:	00004770 	.word	0x00004770
    226c:	000047d6 	.word	0x000047d6
    2270:	000047da 	.word	0x000047da
    2274:	00000000 	.word	0x00000000
    2278:	0000202d 	.word	0x0000202d

0000227c <_printf_common>:
    227c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2280:	4691      	mov	r9, r2
    2282:	461f      	mov	r7, r3
    2284:	688a      	ldr	r2, [r1, #8]
    2286:	690b      	ldr	r3, [r1, #16]
    2288:	f8dd 8020 	ldr.w	r8, [sp, #32]
    228c:	4293      	cmp	r3, r2
    228e:	bfb8      	it	lt
    2290:	4613      	movlt	r3, r2
    2292:	f8c9 3000 	str.w	r3, [r9]
    2296:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    229a:	4606      	mov	r6, r0
    229c:	460c      	mov	r4, r1
    229e:	b112      	cbz	r2, 22a6 <_printf_common+0x2a>
    22a0:	3301      	adds	r3, #1
    22a2:	f8c9 3000 	str.w	r3, [r9]
    22a6:	6823      	ldr	r3, [r4, #0]
    22a8:	0699      	lsls	r1, r3, #26
    22aa:	bf42      	ittt	mi
    22ac:	f8d9 3000 	ldrmi.w	r3, [r9]
    22b0:	3302      	addmi	r3, #2
    22b2:	f8c9 3000 	strmi.w	r3, [r9]
    22b6:	6825      	ldr	r5, [r4, #0]
    22b8:	f015 0506 	ands.w	r5, r5, #6
    22bc:	d107      	bne.n	22ce <_printf_common+0x52>
    22be:	f104 0a19 	add.w	sl, r4, #25
    22c2:	68e3      	ldr	r3, [r4, #12]
    22c4:	f8d9 2000 	ldr.w	r2, [r9]
    22c8:	1a9b      	subs	r3, r3, r2
    22ca:	429d      	cmp	r5, r3
    22cc:	db29      	blt.n	2322 <_printf_common+0xa6>
    22ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    22d2:	6822      	ldr	r2, [r4, #0]
    22d4:	3300      	adds	r3, #0
    22d6:	bf18      	it	ne
    22d8:	2301      	movne	r3, #1
    22da:	0692      	lsls	r2, r2, #26
    22dc:	d42e      	bmi.n	233c <_printf_common+0xc0>
    22de:	f104 0243 	add.w	r2, r4, #67	; 0x43
    22e2:	4639      	mov	r1, r7
    22e4:	4630      	mov	r0, r6
    22e6:	47c0      	blx	r8
    22e8:	3001      	adds	r0, #1
    22ea:	d021      	beq.n	2330 <_printf_common+0xb4>
    22ec:	6823      	ldr	r3, [r4, #0]
    22ee:	68e5      	ldr	r5, [r4, #12]
    22f0:	f8d9 2000 	ldr.w	r2, [r9]
    22f4:	f003 0306 	and.w	r3, r3, #6
    22f8:	2b04      	cmp	r3, #4
    22fa:	bf08      	it	eq
    22fc:	1aad      	subeq	r5, r5, r2
    22fe:	68a3      	ldr	r3, [r4, #8]
    2300:	6922      	ldr	r2, [r4, #16]
    2302:	bf0c      	ite	eq
    2304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    2308:	2500      	movne	r5, #0
    230a:	4293      	cmp	r3, r2
    230c:	bfc4      	itt	gt
    230e:	1a9b      	subgt	r3, r3, r2
    2310:	18ed      	addgt	r5, r5, r3
    2312:	f04f 0900 	mov.w	r9, #0
    2316:	341a      	adds	r4, #26
    2318:	454d      	cmp	r5, r9
    231a:	d11b      	bne.n	2354 <_printf_common+0xd8>
    231c:	2000      	movs	r0, #0
    231e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2322:	2301      	movs	r3, #1
    2324:	4652      	mov	r2, sl
    2326:	4639      	mov	r1, r7
    2328:	4630      	mov	r0, r6
    232a:	47c0      	blx	r8
    232c:	3001      	adds	r0, #1
    232e:	d103      	bne.n	2338 <_printf_common+0xbc>
    2330:	f04f 30ff 	mov.w	r0, #4294967295
    2334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2338:	3501      	adds	r5, #1
    233a:	e7c2      	b.n	22c2 <_printf_common+0x46>
    233c:	18e1      	adds	r1, r4, r3
    233e:	1c5a      	adds	r2, r3, #1
    2340:	2030      	movs	r0, #48	; 0x30
    2342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    2346:	4422      	add	r2, r4
    2348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    234c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2350:	3302      	adds	r3, #2
    2352:	e7c4      	b.n	22de <_printf_common+0x62>
    2354:	2301      	movs	r3, #1
    2356:	4622      	mov	r2, r4
    2358:	4639      	mov	r1, r7
    235a:	4630      	mov	r0, r6
    235c:	47c0      	blx	r8
    235e:	3001      	adds	r0, #1
    2360:	d0e6      	beq.n	2330 <_printf_common+0xb4>
    2362:	f109 0901 	add.w	r9, r9, #1
    2366:	e7d7      	b.n	2318 <_printf_common+0x9c>

00002368 <_printf_i>:
    2368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    236c:	4617      	mov	r7, r2
    236e:	7e0a      	ldrb	r2, [r1, #24]
    2370:	b085      	sub	sp, #20
    2372:	2a6e      	cmp	r2, #110	; 0x6e
    2374:	4698      	mov	r8, r3
    2376:	4606      	mov	r6, r0
    2378:	460c      	mov	r4, r1
    237a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    237c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    2380:	f000 80bc 	beq.w	24fc <_printf_i+0x194>
    2384:	d81a      	bhi.n	23bc <_printf_i+0x54>
    2386:	2a63      	cmp	r2, #99	; 0x63
    2388:	d02e      	beq.n	23e8 <_printf_i+0x80>
    238a:	d80a      	bhi.n	23a2 <_printf_i+0x3a>
    238c:	2a00      	cmp	r2, #0
    238e:	f000 80c8 	beq.w	2522 <_printf_i+0x1ba>
    2392:	2a58      	cmp	r2, #88	; 0x58
    2394:	f000 808a 	beq.w	24ac <_printf_i+0x144>
    2398:	f104 0542 	add.w	r5, r4, #66	; 0x42
    239c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    23a0:	e02a      	b.n	23f8 <_printf_i+0x90>
    23a2:	2a64      	cmp	r2, #100	; 0x64
    23a4:	d001      	beq.n	23aa <_printf_i+0x42>
    23a6:	2a69      	cmp	r2, #105	; 0x69
    23a8:	d1f6      	bne.n	2398 <_printf_i+0x30>
    23aa:	6821      	ldr	r1, [r4, #0]
    23ac:	681a      	ldr	r2, [r3, #0]
    23ae:	f011 0f80 	tst.w	r1, #128	; 0x80
    23b2:	d023      	beq.n	23fc <_printf_i+0x94>
    23b4:	1d11      	adds	r1, r2, #4
    23b6:	6019      	str	r1, [r3, #0]
    23b8:	6813      	ldr	r3, [r2, #0]
    23ba:	e027      	b.n	240c <_printf_i+0xa4>
    23bc:	2a73      	cmp	r2, #115	; 0x73
    23be:	f000 80b4 	beq.w	252a <_printf_i+0x1c2>
    23c2:	d808      	bhi.n	23d6 <_printf_i+0x6e>
    23c4:	2a6f      	cmp	r2, #111	; 0x6f
    23c6:	d02a      	beq.n	241e <_printf_i+0xb6>
    23c8:	2a70      	cmp	r2, #112	; 0x70
    23ca:	d1e5      	bne.n	2398 <_printf_i+0x30>
    23cc:	680a      	ldr	r2, [r1, #0]
    23ce:	f042 0220 	orr.w	r2, r2, #32
    23d2:	600a      	str	r2, [r1, #0]
    23d4:	e003      	b.n	23de <_printf_i+0x76>
    23d6:	2a75      	cmp	r2, #117	; 0x75
    23d8:	d021      	beq.n	241e <_printf_i+0xb6>
    23da:	2a78      	cmp	r2, #120	; 0x78
    23dc:	d1dc      	bne.n	2398 <_printf_i+0x30>
    23de:	2278      	movs	r2, #120	; 0x78
    23e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    23e4:	496e      	ldr	r1, [pc, #440]	; (25a0 <_printf_i+0x238>)
    23e6:	e064      	b.n	24b2 <_printf_i+0x14a>
    23e8:	681a      	ldr	r2, [r3, #0]
    23ea:	f101 0542 	add.w	r5, r1, #66	; 0x42
    23ee:	1d11      	adds	r1, r2, #4
    23f0:	6019      	str	r1, [r3, #0]
    23f2:	6813      	ldr	r3, [r2, #0]
    23f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    23f8:	2301      	movs	r3, #1
    23fa:	e0a3      	b.n	2544 <_printf_i+0x1dc>
    23fc:	f011 0f40 	tst.w	r1, #64	; 0x40
    2400:	f102 0104 	add.w	r1, r2, #4
    2404:	6019      	str	r1, [r3, #0]
    2406:	d0d7      	beq.n	23b8 <_printf_i+0x50>
    2408:	f9b2 3000 	ldrsh.w	r3, [r2]
    240c:	2b00      	cmp	r3, #0
    240e:	da03      	bge.n	2418 <_printf_i+0xb0>
    2410:	222d      	movs	r2, #45	; 0x2d
    2412:	425b      	negs	r3, r3
    2414:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    2418:	4962      	ldr	r1, [pc, #392]	; (25a4 <_printf_i+0x23c>)
    241a:	220a      	movs	r2, #10
    241c:	e017      	b.n	244e <_printf_i+0xe6>
    241e:	6820      	ldr	r0, [r4, #0]
    2420:	6819      	ldr	r1, [r3, #0]
    2422:	f010 0f80 	tst.w	r0, #128	; 0x80
    2426:	d003      	beq.n	2430 <_printf_i+0xc8>
    2428:	1d08      	adds	r0, r1, #4
    242a:	6018      	str	r0, [r3, #0]
    242c:	680b      	ldr	r3, [r1, #0]
    242e:	e006      	b.n	243e <_printf_i+0xd6>
    2430:	f010 0f40 	tst.w	r0, #64	; 0x40
    2434:	f101 0004 	add.w	r0, r1, #4
    2438:	6018      	str	r0, [r3, #0]
    243a:	d0f7      	beq.n	242c <_printf_i+0xc4>
    243c:	880b      	ldrh	r3, [r1, #0]
    243e:	4959      	ldr	r1, [pc, #356]	; (25a4 <_printf_i+0x23c>)
    2440:	2a6f      	cmp	r2, #111	; 0x6f
    2442:	bf14      	ite	ne
    2444:	220a      	movne	r2, #10
    2446:	2208      	moveq	r2, #8
    2448:	2000      	movs	r0, #0
    244a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    244e:	6865      	ldr	r5, [r4, #4]
    2450:	60a5      	str	r5, [r4, #8]
    2452:	2d00      	cmp	r5, #0
    2454:	f2c0 809c 	blt.w	2590 <_printf_i+0x228>
    2458:	6820      	ldr	r0, [r4, #0]
    245a:	f020 0004 	bic.w	r0, r0, #4
    245e:	6020      	str	r0, [r4, #0]
    2460:	2b00      	cmp	r3, #0
    2462:	d13f      	bne.n	24e4 <_printf_i+0x17c>
    2464:	2d00      	cmp	r5, #0
    2466:	f040 8095 	bne.w	2594 <_printf_i+0x22c>
    246a:	4675      	mov	r5, lr
    246c:	2a08      	cmp	r2, #8
    246e:	d10b      	bne.n	2488 <_printf_i+0x120>
    2470:	6823      	ldr	r3, [r4, #0]
    2472:	07da      	lsls	r2, r3, #31
    2474:	d508      	bpl.n	2488 <_printf_i+0x120>
    2476:	6923      	ldr	r3, [r4, #16]
    2478:	6862      	ldr	r2, [r4, #4]
    247a:	429a      	cmp	r2, r3
    247c:	bfde      	ittt	le
    247e:	2330      	movle	r3, #48	; 0x30
    2480:	f805 3c01 	strble.w	r3, [r5, #-1]
    2484:	f105 35ff 	addle.w	r5, r5, #4294967295
    2488:	ebae 0305 	sub.w	r3, lr, r5
    248c:	6123      	str	r3, [r4, #16]
    248e:	f8cd 8000 	str.w	r8, [sp]
    2492:	463b      	mov	r3, r7
    2494:	aa03      	add	r2, sp, #12
    2496:	4621      	mov	r1, r4
    2498:	4630      	mov	r0, r6
    249a:	f7ff feef 	bl	227c <_printf_common>
    249e:	3001      	adds	r0, #1
    24a0:	d155      	bne.n	254e <_printf_i+0x1e6>
    24a2:	f04f 30ff 	mov.w	r0, #4294967295
    24a6:	b005      	add	sp, #20
    24a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    24ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    24b0:	493c      	ldr	r1, [pc, #240]	; (25a4 <_printf_i+0x23c>)
    24b2:	6822      	ldr	r2, [r4, #0]
    24b4:	6818      	ldr	r0, [r3, #0]
    24b6:	f012 0f80 	tst.w	r2, #128	; 0x80
    24ba:	f100 0504 	add.w	r5, r0, #4
    24be:	601d      	str	r5, [r3, #0]
    24c0:	d001      	beq.n	24c6 <_printf_i+0x15e>
    24c2:	6803      	ldr	r3, [r0, #0]
    24c4:	e002      	b.n	24cc <_printf_i+0x164>
    24c6:	0655      	lsls	r5, r2, #25
    24c8:	d5fb      	bpl.n	24c2 <_printf_i+0x15a>
    24ca:	8803      	ldrh	r3, [r0, #0]
    24cc:	07d0      	lsls	r0, r2, #31
    24ce:	bf44      	itt	mi
    24d0:	f042 0220 	orrmi.w	r2, r2, #32
    24d4:	6022      	strmi	r2, [r4, #0]
    24d6:	b91b      	cbnz	r3, 24e0 <_printf_i+0x178>
    24d8:	6822      	ldr	r2, [r4, #0]
    24da:	f022 0220 	bic.w	r2, r2, #32
    24de:	6022      	str	r2, [r4, #0]
    24e0:	2210      	movs	r2, #16
    24e2:	e7b1      	b.n	2448 <_printf_i+0xe0>
    24e4:	4675      	mov	r5, lr
    24e6:	fbb3 f0f2 	udiv	r0, r3, r2
    24ea:	fb02 3310 	mls	r3, r2, r0, r3
    24ee:	5ccb      	ldrb	r3, [r1, r3]
    24f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    24f4:	4603      	mov	r3, r0
    24f6:	2800      	cmp	r0, #0
    24f8:	d1f5      	bne.n	24e6 <_printf_i+0x17e>
    24fa:	e7b7      	b.n	246c <_printf_i+0x104>
    24fc:	6808      	ldr	r0, [r1, #0]
    24fe:	681a      	ldr	r2, [r3, #0]
    2500:	6949      	ldr	r1, [r1, #20]
    2502:	f010 0f80 	tst.w	r0, #128	; 0x80
    2506:	d004      	beq.n	2512 <_printf_i+0x1aa>
    2508:	1d10      	adds	r0, r2, #4
    250a:	6018      	str	r0, [r3, #0]
    250c:	6813      	ldr	r3, [r2, #0]
    250e:	6019      	str	r1, [r3, #0]
    2510:	e007      	b.n	2522 <_printf_i+0x1ba>
    2512:	f010 0f40 	tst.w	r0, #64	; 0x40
    2516:	f102 0004 	add.w	r0, r2, #4
    251a:	6018      	str	r0, [r3, #0]
    251c:	6813      	ldr	r3, [r2, #0]
    251e:	d0f6      	beq.n	250e <_printf_i+0x1a6>
    2520:	8019      	strh	r1, [r3, #0]
    2522:	2300      	movs	r3, #0
    2524:	6123      	str	r3, [r4, #16]
    2526:	4675      	mov	r5, lr
    2528:	e7b1      	b.n	248e <_printf_i+0x126>
    252a:	681a      	ldr	r2, [r3, #0]
    252c:	1d11      	adds	r1, r2, #4
    252e:	6019      	str	r1, [r3, #0]
    2530:	6815      	ldr	r5, [r2, #0]
    2532:	6862      	ldr	r2, [r4, #4]
    2534:	2100      	movs	r1, #0
    2536:	4628      	mov	r0, r5
    2538:	f000 f8e2 	bl	2700 <memchr>
    253c:	b108      	cbz	r0, 2542 <_printf_i+0x1da>
    253e:	1b40      	subs	r0, r0, r5
    2540:	6060      	str	r0, [r4, #4]
    2542:	6863      	ldr	r3, [r4, #4]
    2544:	6123      	str	r3, [r4, #16]
    2546:	2300      	movs	r3, #0
    2548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    254c:	e79f      	b.n	248e <_printf_i+0x126>
    254e:	6923      	ldr	r3, [r4, #16]
    2550:	462a      	mov	r2, r5
    2552:	4639      	mov	r1, r7
    2554:	4630      	mov	r0, r6
    2556:	47c0      	blx	r8
    2558:	3001      	adds	r0, #1
    255a:	d0a2      	beq.n	24a2 <_printf_i+0x13a>
    255c:	6823      	ldr	r3, [r4, #0]
    255e:	079b      	lsls	r3, r3, #30
    2560:	d507      	bpl.n	2572 <_printf_i+0x20a>
    2562:	2500      	movs	r5, #0
    2564:	f104 0919 	add.w	r9, r4, #25
    2568:	68e3      	ldr	r3, [r4, #12]
    256a:	9a03      	ldr	r2, [sp, #12]
    256c:	1a9b      	subs	r3, r3, r2
    256e:	429d      	cmp	r5, r3
    2570:	db05      	blt.n	257e <_printf_i+0x216>
    2572:	68e0      	ldr	r0, [r4, #12]
    2574:	9b03      	ldr	r3, [sp, #12]
    2576:	4298      	cmp	r0, r3
    2578:	bfb8      	it	lt
    257a:	4618      	movlt	r0, r3
    257c:	e793      	b.n	24a6 <_printf_i+0x13e>
    257e:	2301      	movs	r3, #1
    2580:	464a      	mov	r2, r9
    2582:	4639      	mov	r1, r7
    2584:	4630      	mov	r0, r6
    2586:	47c0      	blx	r8
    2588:	3001      	adds	r0, #1
    258a:	d08a      	beq.n	24a2 <_printf_i+0x13a>
    258c:	3501      	adds	r5, #1
    258e:	e7eb      	b.n	2568 <_printf_i+0x200>
    2590:	2b00      	cmp	r3, #0
    2592:	d1a7      	bne.n	24e4 <_printf_i+0x17c>
    2594:	780b      	ldrb	r3, [r1, #0]
    2596:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    259a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    259e:	e765      	b.n	246c <_printf_i+0x104>
    25a0:	000047f2 	.word	0x000047f2
    25a4:	000047e1 	.word	0x000047e1

000025a8 <_sbrk_r>:
    25a8:	b538      	push	{r3, r4, r5, lr}
    25aa:	4c06      	ldr	r4, [pc, #24]	; (25c4 <_sbrk_r+0x1c>)
    25ac:	2300      	movs	r3, #0
    25ae:	4605      	mov	r5, r0
    25b0:	4608      	mov	r0, r1
    25b2:	6023      	str	r3, [r4, #0]
    25b4:	f7fe f982 	bl	8bc <_sbrk>
    25b8:	1c43      	adds	r3, r0, #1
    25ba:	d102      	bne.n	25c2 <_sbrk_r+0x1a>
    25bc:	6823      	ldr	r3, [r4, #0]
    25be:	b103      	cbz	r3, 25c2 <_sbrk_r+0x1a>
    25c0:	602b      	str	r3, [r5, #0]
    25c2:	bd38      	pop	{r3, r4, r5, pc}
    25c4:	20002e88 	.word	0x20002e88

000025c8 <__sread>:
    25c8:	b510      	push	{r4, lr}
    25ca:	460c      	mov	r4, r1
    25cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    25d0:	f000 f8e8 	bl	27a4 <_read_r>
    25d4:	2800      	cmp	r0, #0
    25d6:	bfab      	itete	ge
    25d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    25da:	89a3      	ldrhlt	r3, [r4, #12]
    25dc:	181b      	addge	r3, r3, r0
    25de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    25e2:	bfac      	ite	ge
    25e4:	6563      	strge	r3, [r4, #84]	; 0x54
    25e6:	81a3      	strhlt	r3, [r4, #12]
    25e8:	bd10      	pop	{r4, pc}

000025ea <__swrite>:
    25ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25ee:	461f      	mov	r7, r3
    25f0:	898b      	ldrh	r3, [r1, #12]
    25f2:	05db      	lsls	r3, r3, #23
    25f4:	4605      	mov	r5, r0
    25f6:	460c      	mov	r4, r1
    25f8:	4616      	mov	r6, r2
    25fa:	d505      	bpl.n	2608 <__swrite+0x1e>
    25fc:	2302      	movs	r3, #2
    25fe:	2200      	movs	r2, #0
    2600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2604:	f000 f868 	bl	26d8 <_lseek_r>
    2608:	89a3      	ldrh	r3, [r4, #12]
    260a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    260e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2612:	81a3      	strh	r3, [r4, #12]
    2614:	4632      	mov	r2, r6
    2616:	463b      	mov	r3, r7
    2618:	4628      	mov	r0, r5
    261a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    261e:	f000 b817 	b.w	2650 <_write_r>

00002622 <__sseek>:
    2622:	b510      	push	{r4, lr}
    2624:	460c      	mov	r4, r1
    2626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    262a:	f000 f855 	bl	26d8 <_lseek_r>
    262e:	1c43      	adds	r3, r0, #1
    2630:	89a3      	ldrh	r3, [r4, #12]
    2632:	bf15      	itete	ne
    2634:	6560      	strne	r0, [r4, #84]	; 0x54
    2636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    263a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    263e:	81a3      	strheq	r3, [r4, #12]
    2640:	bf18      	it	ne
    2642:	81a3      	strhne	r3, [r4, #12]
    2644:	bd10      	pop	{r4, pc}

00002646 <__sclose>:
    2646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    264a:	f000 b813 	b.w	2674 <_close_r>
	...

00002650 <_write_r>:
    2650:	b538      	push	{r3, r4, r5, lr}
    2652:	4c07      	ldr	r4, [pc, #28]	; (2670 <_write_r+0x20>)
    2654:	4605      	mov	r5, r0
    2656:	4608      	mov	r0, r1
    2658:	4611      	mov	r1, r2
    265a:	2200      	movs	r2, #0
    265c:	6022      	str	r2, [r4, #0]
    265e:	461a      	mov	r2, r3
    2660:	f7fe ffd4 	bl	160c <_write>
    2664:	1c43      	adds	r3, r0, #1
    2666:	d102      	bne.n	266e <_write_r+0x1e>
    2668:	6823      	ldr	r3, [r4, #0]
    266a:	b103      	cbz	r3, 266e <_write_r+0x1e>
    266c:	602b      	str	r3, [r5, #0]
    266e:	bd38      	pop	{r3, r4, r5, pc}
    2670:	20002e88 	.word	0x20002e88

00002674 <_close_r>:
    2674:	b538      	push	{r3, r4, r5, lr}
    2676:	4c06      	ldr	r4, [pc, #24]	; (2690 <_close_r+0x1c>)
    2678:	2300      	movs	r3, #0
    267a:	4605      	mov	r5, r0
    267c:	4608      	mov	r0, r1
    267e:	6023      	str	r3, [r4, #0]
    2680:	f7fe f92e 	bl	8e0 <_close>
    2684:	1c43      	adds	r3, r0, #1
    2686:	d102      	bne.n	268e <_close_r+0x1a>
    2688:	6823      	ldr	r3, [r4, #0]
    268a:	b103      	cbz	r3, 268e <_close_r+0x1a>
    268c:	602b      	str	r3, [r5, #0]
    268e:	bd38      	pop	{r3, r4, r5, pc}
    2690:	20002e88 	.word	0x20002e88

00002694 <_fstat_r>:
    2694:	b538      	push	{r3, r4, r5, lr}
    2696:	4c07      	ldr	r4, [pc, #28]	; (26b4 <_fstat_r+0x20>)
    2698:	2300      	movs	r3, #0
    269a:	4605      	mov	r5, r0
    269c:	4608      	mov	r0, r1
    269e:	4611      	mov	r1, r2
    26a0:	6023      	str	r3, [r4, #0]
    26a2:	f7fe f920 	bl	8e6 <_fstat>
    26a6:	1c43      	adds	r3, r0, #1
    26a8:	d102      	bne.n	26b0 <_fstat_r+0x1c>
    26aa:	6823      	ldr	r3, [r4, #0]
    26ac:	b103      	cbz	r3, 26b0 <_fstat_r+0x1c>
    26ae:	602b      	str	r3, [r5, #0]
    26b0:	bd38      	pop	{r3, r4, r5, pc}
    26b2:	bf00      	nop
    26b4:	20002e88 	.word	0x20002e88

000026b8 <_isatty_r>:
    26b8:	b538      	push	{r3, r4, r5, lr}
    26ba:	4c06      	ldr	r4, [pc, #24]	; (26d4 <_isatty_r+0x1c>)
    26bc:	2300      	movs	r3, #0
    26be:	4605      	mov	r5, r0
    26c0:	4608      	mov	r0, r1
    26c2:	6023      	str	r3, [r4, #0]
    26c4:	f7fe f914 	bl	8f0 <_isatty>
    26c8:	1c43      	adds	r3, r0, #1
    26ca:	d102      	bne.n	26d2 <_isatty_r+0x1a>
    26cc:	6823      	ldr	r3, [r4, #0]
    26ce:	b103      	cbz	r3, 26d2 <_isatty_r+0x1a>
    26d0:	602b      	str	r3, [r5, #0]
    26d2:	bd38      	pop	{r3, r4, r5, pc}
    26d4:	20002e88 	.word	0x20002e88

000026d8 <_lseek_r>:
    26d8:	b538      	push	{r3, r4, r5, lr}
    26da:	4c07      	ldr	r4, [pc, #28]	; (26f8 <_lseek_r+0x20>)
    26dc:	4605      	mov	r5, r0
    26de:	4608      	mov	r0, r1
    26e0:	4611      	mov	r1, r2
    26e2:	2200      	movs	r2, #0
    26e4:	6022      	str	r2, [r4, #0]
    26e6:	461a      	mov	r2, r3
    26e8:	f7fe f904 	bl	8f4 <_lseek>
    26ec:	1c43      	adds	r3, r0, #1
    26ee:	d102      	bne.n	26f6 <_lseek_r+0x1e>
    26f0:	6823      	ldr	r3, [r4, #0]
    26f2:	b103      	cbz	r3, 26f6 <_lseek_r+0x1e>
    26f4:	602b      	str	r3, [r5, #0]
    26f6:	bd38      	pop	{r3, r4, r5, pc}
    26f8:	20002e88 	.word	0x20002e88
    26fc:	00000000 	.word	0x00000000

00002700 <memchr>:
    2700:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    2704:	2a10      	cmp	r2, #16
    2706:	db2b      	blt.n	2760 <memchr+0x60>
    2708:	f010 0f07 	tst.w	r0, #7
    270c:	d008      	beq.n	2720 <memchr+0x20>
    270e:	f810 3b01 	ldrb.w	r3, [r0], #1
    2712:	3a01      	subs	r2, #1
    2714:	428b      	cmp	r3, r1
    2716:	d02d      	beq.n	2774 <memchr+0x74>
    2718:	f010 0f07 	tst.w	r0, #7
    271c:	b342      	cbz	r2, 2770 <memchr+0x70>
    271e:	d1f6      	bne.n	270e <memchr+0xe>
    2720:	b4f0      	push	{r4, r5, r6, r7}
    2722:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    2726:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    272a:	f022 0407 	bic.w	r4, r2, #7
    272e:	f07f 0700 	mvns.w	r7, #0
    2732:	2300      	movs	r3, #0
    2734:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    2738:	3c08      	subs	r4, #8
    273a:	ea85 0501 	eor.w	r5, r5, r1
    273e:	ea86 0601 	eor.w	r6, r6, r1
    2742:	fa85 f547 	uadd8	r5, r5, r7
    2746:	faa3 f587 	sel	r5, r3, r7
    274a:	fa86 f647 	uadd8	r6, r6, r7
    274e:	faa5 f687 	sel	r6, r5, r7
    2752:	b98e      	cbnz	r6, 2778 <memchr+0x78>
    2754:	d1ee      	bne.n	2734 <memchr+0x34>
    2756:	bcf0      	pop	{r4, r5, r6, r7}
    2758:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    275c:	f002 0207 	and.w	r2, r2, #7
    2760:	b132      	cbz	r2, 2770 <memchr+0x70>
    2762:	f810 3b01 	ldrb.w	r3, [r0], #1
    2766:	3a01      	subs	r2, #1
    2768:	ea83 0301 	eor.w	r3, r3, r1
    276c:	b113      	cbz	r3, 2774 <memchr+0x74>
    276e:	d1f8      	bne.n	2762 <memchr+0x62>
    2770:	2000      	movs	r0, #0
    2772:	4770      	bx	lr
    2774:	3801      	subs	r0, #1
    2776:	4770      	bx	lr
    2778:	2d00      	cmp	r5, #0
    277a:	bf06      	itte	eq
    277c:	4635      	moveq	r5, r6
    277e:	3803      	subeq	r0, #3
    2780:	3807      	subne	r0, #7
    2782:	f015 0f01 	tst.w	r5, #1
    2786:	d107      	bne.n	2798 <memchr+0x98>
    2788:	3001      	adds	r0, #1
    278a:	f415 7f80 	tst.w	r5, #256	; 0x100
    278e:	bf02      	ittt	eq
    2790:	3001      	addeq	r0, #1
    2792:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    2796:	3001      	addeq	r0, #1
    2798:	bcf0      	pop	{r4, r5, r6, r7}
    279a:	3801      	subs	r0, #1
    279c:	4770      	bx	lr
    279e:	bf00      	nop

000027a0 <__malloc_lock>:
    27a0:	4770      	bx	lr

000027a2 <__malloc_unlock>:
    27a2:	4770      	bx	lr

000027a4 <_read_r>:
    27a4:	b538      	push	{r3, r4, r5, lr}
    27a6:	4c07      	ldr	r4, [pc, #28]	; (27c4 <_read_r+0x20>)
    27a8:	4605      	mov	r5, r0
    27aa:	4608      	mov	r0, r1
    27ac:	4611      	mov	r1, r2
    27ae:	2200      	movs	r2, #0
    27b0:	6022      	str	r2, [r4, #0]
    27b2:	461a      	mov	r2, r3
    27b4:	f7fe ff18 	bl	15e8 <_read>
    27b8:	1c43      	adds	r3, r0, #1
    27ba:	d102      	bne.n	27c2 <_read_r+0x1e>
    27bc:	6823      	ldr	r3, [r4, #0]
    27be:	b103      	cbz	r3, 27c2 <_read_r+0x1e>
    27c0:	602b      	str	r3, [r5, #0]
    27c2:	bd38      	pop	{r3, r4, r5, pc}
    27c4:	20002e88 	.word	0x20002e88

000027c8 <CodePage437>:
	...
    2b00:	01000000 06186080 18608001 60800106     .....`....`....`
    2b10:	80010000 00000060 00000000 66986106     ....`........a.f
    2b20:	98618619 00000000 00000000 00000000     ..a.............
    2b30:	00000000 98610600 fb8f1966 8f1966fe     ......a.f....f..
    2b40:	1966fefb 00986186 00000000 80010000     ..f..a..........
    2b50:	891f7e60 1f7e6082 7e649081 6080811f     `~...`~...d~...`
    2b60:	00000000 04000000 29a60823 1820c106     ........#..).. .
    2b70:	98200304 324c1165 00000008 00000000     .. .e.L2........
    2b80:	84e08107 10420821 5a081e78 87208216     ....!.B.x..Z.. .
    2b90:	0000f6d9 00000000 30c00000 00030618     ...........0....
    2ba0:	000000c0 00000000 00000000 00000000     ................
    2bb0:	40000000 03020810 0c30c000 08c00003     ...@......0.....
    2bc0:	10400002 00000000 01000000 02084000     ..@..........@..
    2bd0:	06186000 18608001 00010208 00000040     .`....`.....@...
    2be0:	00000000 42000000 90408210 40c23fff     .......B..@..?.@
    2bf0:	80104290 00000000 00000000 00000000     .B..............
    2c00:	80000208 e0bfff20 02082080 00000000     .... .... ......
	...
    2c20:	18000000 c0000306 00001040 00000000     ........@.......
    2c30:	00000000 ff000000 0000e0bf 00000000     ................
	...
    2c54:	030e3800 0000e080 00000000 08200000     .8............ .
    2c64:	80000104 02041020 10408000 00000208     .... .....@.....
    2c74:	00000000 e0030000 cc1863f8 b0c1061b     .........c......
    2c84:	63061b6c f8e0c318 00000000 00000000     l..c............
    2c94:	1b3c70c0 0c30c004 30c00003 e107030c     .p<...0....0....
    2ca4:	000000f8 00000000 c1f8e107 061860b0     .............`..
    2cb4:	0187030e 0f30c0c0 0000fefb 00000000     ......0.........
    2cc4:	fefb0f00 60c00003 80030e30 b0810618     .......`0.......
    2cd4:	00f8e167 00000000 40000000 03070c30     g..........@0...
    2ce4:	31649040 04fefb0f 10400001 00000000     @.d1......@.....
    2cf4:	0f000000 30c0fefb c1f8e30f 061860b0     .......0.....`..
    2d04:	e167a081 000000f8 00000000 60f8e003     ..g............`
    2d14:	00030c18 1b8c3ffe 67b0c106 0000f8e1     .....?.....g....
    2d24:	00000000 fefb0f00 20608001 00010408     ..........` ....
    2d34:	0c302080 00c00003 00000000 e0030000     . 0.............
    2d44:	6cb0c1f8 0f3e061b c1061b8c f8e063b0     ...l..>......c..
    2d54:	00000000 07000000 b0c1f8e1 7d0e3b6c     ............l;.}
    2d64:	0618609f e1c70003 000000f0 00000000     .`..............
    2d74:	38000000 e080030e 00000000 030e3800     ...8.........8..
    2d84:	0000e080 00000000 00000000 80030e38     ............8...
    2d94:	000000e0 0e380000 40c00003 00000010     ......8....@....
    2da4:	30000000 03030c0c 30c0c000 0cc00003     ...0.......0....
    2db4:	0c300003 00000000 00000000 00000000     ..0.............
    2dc4:	00fefb0f fefb0f00 00000000 00000000     ................
    2dd4:	00000000 3000030c 30c0000c c0c00003     .......0...0....
    2de4:	0c0c3030 00000003 00000000 f8e10700     00..............
    2df4:	6060b0c1 01061818 00006080 00608001     ..``.....`....`.
    2e04:	00000000 e1070000 6cb0c1f8 b4d33edb     ...........l.>..
    2e14:	c036fbec f8e10730 00000000 00000000     ..6.0...........
    2e24:	0d367080 c18c3186 fefb6fb0 1b6cb0c1     .p6..1...o....l.
    2e34:	00000006 00000000 61f8e30f 86196698     ...........a.f..
    2e44:	19861f7e 6f986186 0000f8e3 00000000     ~....a.o........
    2e54:	f8e00300 036c9861 0c30c000 98610003     ....a.l...0...a.
    2e64:	00f8e063 00000000 c30f0000 861966f0     c............f..
    2e74:	98618631 668c1966 f0c38f19 00000000     1.a.f..f........
    2e84:	0f000000 30c0fefb fc00030c 00030c3f     .......0....?...
    2e94:	fb0f30c0 000000fe 00000000 c0fefb0f     .0..............
    2ea4:	00030c30 030c3ffc 0c30c000 00000003     0....?....0.....
    2eb4:	00000000 f8e00300 036c9861 0c30c000     ........a.l...0.
    2ec4:	98611e7b 00f8e063 00000000 1b0c0000     {.a.c...........
    2ed4:	6cb0c106 bfff061b c1061bec 061b6cb0     ...l.........l..
    2ee4:	00000000 07000000 0618f8e1 18608001     ..............`.
    2ef4:	60800106 e1070618 000000f8 00000000     ...`............
    2f04:	067ef801 18608001 60800106 8731c618     ..~...`....`..1.
    2f14:	0000f0c1 00000000 061b0c00 838d31c6     .............1..
    2f24:	0d38e060 31c66083 00061b8c 00000000     `.8..`.1........
    2f34:	030c0000 0c30c000 30c00003 c000030c     ......0....0....
    2f44:	fefb0f30 00000000 0c000000 bde38e1b     0...............
    2f54:	c976dbed 061b6cb2 1b6cb0c1 00000006     ..v..l....l.....
    2f64:	00000000 e1861b0c 661b6dbc 5b6cb3c9     .........m.f..l[
    2f74:	ecb0c31e 0000061b 00000000 f8e00300     ................
    2f84:	1b6cb0e3 6cb0c106 b8c1061b 00f8e0e3     ..l....l........
    2f94:	00000000 e30f0000 6cb0c1f8 3ffe061b     ...........l...?
    2fa4:	c000038c 00030c30 00000000 07000000     ....0...........
    2fb4:	b0c1f8e1 c1061b6c 36db6cb0 d98731c6     ....l....l.6.1..
    2fc4:	000000f6 00000000 c1f8e30f 061b6cb0     .............l..
    2fd4:	638c3ffe cc30c318 0000061b 00000000     .?.c..0.........
    2fe4:	f8e10700 036cb0c1 801f7e00 b0c10618     ......l..~......
    2ff4:	00f8e167 00000000 fb0f0000 000208fe     g...............
    3004:	02082080 08208000 20800002 00000000     . .... .... ....
    3014:	0c000000 b0c1061b c1061b6c 061b6cb0     ........l....l..
    3024:	e063b0c1 000000f8 00000000 c1061b0c     ..c.............
    3034:	8c3166b0 60c31863 810d36d8 000020c0     .f1.c..`.6... ..
    3044:	00000000 061b0c00 1b6cb0c1 6db2c906     ..........l....m
    3054:	b5d576db 008c796f 00000000 1b0c0000     .v..oy..........
    3064:	c3186306 060cf860 63d8e003 061bcc18     .c..`......c....
    3074:	00000000 0c000000 1863061b 1cd860c3     ..........c..`..
    3084:	20c00107 80000208 00000020 00000000     ... .... .......
    3094:	03fefb0f 1060c000 0103060c 0f30c0c0     ......`.......0.
    30a4:	0000fefb 00000000 f8e00300 00030c30     ............0...
    30b4:	030c30c0 0c30c000 00f8e003 00000000     .0....0.........
    30c4:	01060000 010c3080 030c6080 03186000     .....0...`...`..
    30d4:	0618c000 00000000 07000000 030cf0c1     ................
    30e4:	0c30c000 30c00003 c107030c 000000f0     ..0....0........
    30f4:	00000000 36708000 8c31860d 0060b0c1     ......p6..1...`.
	...
    3120:	00fefb0f 00000000 80030000 00030ce0     ................
    3130:	00001860 00000000 00000000 00000000     `...............
	...
    3148:	01fcf003 fef86380 f823b0c0 000000fe     .....c....#.....
    3158:	00000000 c000030c fcf30d30 0b6cb8e1     ........0.....l.
    3168:	6fb8e102 00007cf3 00000000 00000000     ...o.|..........
    3178:	e1070000 6cb0c1f8 30c00003 00fef907     .......l...0....
    3188:	00000000 18000000 67800106 b0c3f6d9     ...........g....
    3198:	c3061bec f6d9e7b0 00000000 00000000     ................
    31a8:	00000000 c1f8e107 fefb6fb0 f10730c0     .........o...0..
    31b8:	000000fc 00000000 3138e000 c000638c     ..........81.c..
    31c8:	00033ffc 030c30c0 0000c000 00000000     .?...0..........
    31d8:	00000000 d9070000 8731c6f6 30c0f0c1     ..........1....0
    31e8:	c3f8e107 f8e1e7b0 030c0000 0d30c000     ..............0.
    31f8:	b8e178e3 c1061b6c 061b6cb0 00000000     .x..l....l......
    3208:	01000000 00006080 18e08003 60800106     .....`.........`
    3218:	e1070618 000000f8 00000000 00186000     .............`..
    3228:	18600000 60800106 8c010618 31c61863     ..`....`....c..1
    3238:	00f0c187 00030c00 638c30c0 0f36cc30     .........0.c0.6.
    3248:	33ccc083 000c330c 00000000 c0030000     ...3.3..........
    3258:	00030cf0 030c30c0 0c30c000 f8e00303     .....0....0.....
	...
    3274:	e70c330c 669b6dbf 1b6cb0c1 00000006     .3...m.f..l.....
	...
    328c:	f8e20b00 1b6cb8e1 6cb0c106 0000061b     ......l....l....
	...
    32a4:	e1070000 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
	...
    32bc:	0b000000 b0c1f8e2 be061b6c 0002882f     ........l.../...
    32cc:	02082080 00000000 00000000 c1fae803     . ..............
    32dc:	061b6cb0 08a08f3e 20800002 00000208     .l..>...... ....
    32ec:	00000000 7ce20800 036cbcf1 0c30c000     .......|..l...0.
    32fc:	00000003 00000000 00000000 e1070000     ................
    330c:	0730c0f8 8001f8e1 00f8e36f 00000000     ..0.....o.......
    331c:	00030000 0f0c30c0 0c30f8e3 33c00003     .....0....0....3
    332c:	30c0c00c 00000000 00000000 00000000     ...0............
    333c:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
	...
    3354:	02020000 30e6b8c1 01073ed8 000020c0     .......0.>... ..
	...
    336c:	1b0c0000 6cb0c106 b5d5769b 008c3166     .......l.v..f1..
	...
    3384:	08000000 1b441823 6ce08003 08620c11     ....#.D....l..b.
	...
    33a0:	c618630c 18638c31 60801f7e 873bc618     .c..1.c.~..`..;.
    33b0:	0000f0c1 00000000 fefb0f00 c0c00003     ................
    33c0:	0f0c3030 0000fefb 00000000 1e780000     00............x.
    33d0:	40000208 000e3810 02081040 001e7800     ...@.8..@....x..
    33e0:	00000000 80010000 01061860 06186080     ........`....`..
    33f0:	18608001 60800106 00000000 0f000000     ..`....`........
    3400:	0208c003 0cc00003 c0000303 030f0208     ................
    3410:	000000c0 00000000 d9c61907 1c736cb3     .............ls.
	...
    3448:	e0030000 6c9861f8 30c00003 6100030c     .....a.l...0...a
    3458:	f8e06398 00000608 00000000 00669801     .c............f.
    3468:	c30c330c 0c33cc30 d9c730c3 000000f6     .3..0.3..0......
    3478:	00000000 0c180000 f8e10700 fb6fb0c1     ..............o.
    3488:	0730c0fe 0000fcf1 00000000 10000000     ..0.............
    3498:	f003000a 638001fc b0c0fef8 00fef823     .......c....#...
	...
    34b0:	030033cc 8001fcf0 c0fef863 fef823b0     .3......c....#..
	...
    34c8:	000c6000 01fcf003 fef86380 f823b0c0     .`.......c....#.
    34d8:	000000fe 03000000 0c482001 fcf00300     ......... H.....
    34e8:	f8638001 23b0c0fe 0000fef8 00000000     ..c....#........
    34f8:	00000000 e1070000 6cb0c1f8 30c00003     ...........l...0
    3508:	04fef907 00000003 00000000 07001420     ............ ...
    3518:	b0c1f8e1 c0fefb6f fcf10730 00000000     ....o...0.......
    3528:	00000000 00669801 c1f8e107 fefb6fb0     ......f......o..
    3538:	f10730c0 000000fc 00000000 18c00000     .0..............
    3548:	f8e10700 fb6fb0c1 0730c0fe 0000fcf1     ......o...0.....
    3558:	00000000 98610600 80030000 010618e0     ......a.........
    3568:	06186080 00f8e107 00000000 00000000     .`..............
    3578:	03002840 0618e080 18608001 f8e10706     @(........`.....
	...
    3590:	0018c000 18e08003 60800106 e1070618     ...........`....
    35a0:	000000f8 18630000 367080c0 8c31860d     ......c...p6..1.
    35b0:	fb6fb0c1 6cb0c1fe 0000061b 1c000000     ..o....l........
    35c0:	70c08108 31860d36 6fb0c18c b0c1fefb     ...p6..1...o....
    35d0:	00061b6c 00000000 fb0f0606 0c30c0fe     l.............0.
    35e0:	3ffc0003 c000030c fefb0f30 00000000     ...?....0.......
	...
    35f8:	1dfe7907 fedb2786 f90733cc 000000ee     .y...'...3......
    3608:	00000000 367ef800 9861860d e3efb1c7     ......~6..a.....
    3618:	8c31c6f8 00001e7b 00000000 20000000     ..1.{.......... 
    3628:	e1070014 cc30c3f8 30c30c33 00f8e1c7     ......0.3..0....
    3638:	00000000 01000000 07006698 30c3f8e1     .........f.....0
    3648:	c30c33cc f8e1c730 00000000 00000000     .3..0...........
    3658:	0018c000 c3f8e107 0c33cc30 e1c730c3     ........0.3..0..
    3668:	000000f8 00000000 14200000 0c330c00     .......... ...3.
    3678:	33cc30c3 c730c30c 0000f6d9 00000000     .0.3..0.........
    3688:	60000000 330c000c cc30c30c 30c30c33     ...`...3..0.3..0
    3698:	00f6d9c7 00000000 01000000 0c006698     .............f..
    36a8:	31c61863 7e18638c 1860801f c1873bc6     c..1.c.~..`..;..
    36b8:	800d36f0 383ef800 c1061bec 061b6cb0     .6....>8.....l..
    36c8:	e0e3b8c1 000000f8 0c330000 c10603c0     ..........3.....
    36d8:	061b6cb0 1b6cb0c1 63b0c106 0000f8e0     .l....l....c....
    36e8:	00000000 20800002 1b8c1f7e 0c32c826     ....... ~...&.2.
    36f8:	1f7e069b 08208080 00000000 c0010000     ..~... .........
    3708:	461873f8 3e608001 6080810f fefb0f18     .s.F..`>...`....
    3718:	00000000 0c000000 08630419 1c506083     ..........c..`P.
    3728:	20e00302 80800f08 00000020 00000000     ... .... .......
    3738:	c1f8e30f f81b6cb0 830d30fe 0d36d878     .....l...0..x.6.
    3748:	000038e3 00000000 3ce00000 98638e3f     .8.........<?.c.
    3758:	833ffee0 1c70c000 60800106 00000018     ..?...p....`....
    3768:	00000000 03000c18 8001fcf0 c0fef863     ............c...
    3778:	fef823b0 00000000 00000000 000060c0     .#...........`..
    3788:	18e08003 60800106 e1070618 000000f8     .......`........
    3798:	00000000 18300000 f8e10700 33cc30c3     ......0......0.3
    37a8:	c730c30c 0000f8e1 00000000 30000000     ..0............0
    37b8:	330c0018 cc30c30c 30c30c33 00f6d9c7     ...3..0.3..0....
	...
    37d0:	0b001998 b8e1f8e2 c1061b6c 061b6cb0     ........l....l..
    37e0:	00000000 8c0c4c00 b8e1061b c9461b6d     .....L......m.F.
    37f0:	165b6cb2 1becb0c3 00000006 00000000     .l[.............
    3800:	1e08c003 00e08308 000080ff 00000000     ................
	...
    3818:	d8c00100 c0810d22 0080ff00 00000000     ...."...........
	...
    3834:	00030c00 030c0000 3030c000 061b0c0c     ..........00....
    3844:	00c00f3f 00000000 00000000 ff000000     ?...............
    3854:	0003ecbf 00000000 00000000 00000000     ................
	...
    386c:	18e0bfff 00000006 00000000 00000000     ................
    387c:	30c00003 c000030c e0bfff00 0c1f3800     ...0.........8..
    388c:	183060c0 0000c00f c0000300 00030c30     .`0.........0...
    389c:	bfff00c0 668001e0 fc618619 60800106     .......f..a....`
    38ac:	00000000 06180000 18000000 60800106     ...............`
    38bc:	80010618 00061860 00000000 00000000     ....`...........
    38cc:	90200100 80042448 00001290 00000000     .. .H$..........
	...
    38e4:	40020000 20010948 00244890 00000000     ...@H.. .H$.....
    38f4:	00000000 48024092 09004900 80240024     .....@.H.I..$.$.
    3904:	92009004 00480240 24090049 42529200     ....@.H.I..$..RB
    3914:	0949494a 24242529 929094a4 4a425292     JII.)%$$.....RBJ
    3924:	29094949 ad6d2425 b6b6b5bd dbdad6f6     II.)%$m.........
    3934:	6f6b5bdb bdad6d6d f6b6b6b5 08dbdad6     .[komm..........
    3944:	20800002 80000208 00020820 02082080     ... .... .... ..
    3954:	08208000 20800002 80000208 00020820     .. .... .... ...
    3964:	3e082080 08208000 20800002 80000208     . .>.. .... ....
    3974:	00020820 02082080 f8208000 20800f02      .... .... .... 
    3984:	80000208 00020820 05142080 14504001     .... .... ...@P.
    3994:	50400105 40013d14 01051450 05145040     ..@P.=.@P...@P..
    39a4:	00504001 00000000 00000000 013f0000     .@P...........?.
    39b4:	05145040 14504001 50400105 00000000     @P...@P...@P....
    39c4:	00000000 02f80000 0820800f 20800002     .......... .... 
    39d4:	80000208 01051420 05145040 f4504001     .... ...@P...@P.
    39e4:	50400f01 40010514 01051450 05145040     ..@P...@P...@P..
    39f4:	14504001 50400105 40010514 01051450     .@P...@P...@P...
    3a04:	05145040 00504001 00000000 00000000     @P...@P.........
    3a14:	0f01fc00 05145040 14504001 50400105     ....@P...@P...@P
    3a24:	40010514 01051450 01f45040 0000c00f     ...@P...@P......
	...
    3a3c:	01051400 05145040 14504001 0000003f     ....@P...@P.?...
	...
    3a54:	02080000 08208000 20800002 800f02f8     ...... .... ....
	...
    3a78:	003e0000 02082080 08208000 20800002     ..>.. .... .... 
    3a88:	80000208 00020820 03082080 000000f0     .... .... ......
	...
    3aa0:	00020800 02082080 08208000 0000f03f     ..... .... .?...
	...
    3ac4:	80f03f00 00020820 02082080 08208000     .?.. .... .... .
    3ad4:	20800002 80000208 f0030820 02082080     ... .... .... ..
    3ae4:	08208000 20800002 00000000 00000000     .. .... ........
    3af4:	3f000000 000000f0 00000000 00000000     ...?............
    3b04:	00020800 02082080 08208000 2080f03f     ..... .... .?.. 
    3b14:	80000208 00020820 02082080 08208000     .... .... .... .
    3b24:	20800002 fc00c20f 00020820 02082080     ... .... .... ..
    3b34:	14208000 50400105 40010514 f1051450     .. ...@P...@P...
    3b44:	05145040 14504001 50400105 40010514     @P...@P...@P...@
    3b54:	01051450 c4175040 0000fc01 00000000     P...@P..........
	...
    3b70:	1f000000 507c01c4 40010514 01051450     ......|P...@P...
    3b80:	05145040 14504001 50400105 fc0fc0f7     @P...@P...@P....
	...
    3ba4:	0fc0ff00 0514507c 14504001 50400105     ....|P...@P...@P
    3bb4:	40010514 01051450 c4175040 14507c01     ...@P...@P...|P.
    3bc4:	50400105 40010514 00000050 00000000     ..@P...@P.......
    3bd4:	ff000000 00fc0fc0 00000000 00000000     ................
    3be4:	05140000 14504001 50400105 7c0fc0f7     .....@P...@P...|
    3bf4:	01051450 05145040 08504001 20800002     P...@P...@P.... 
    3c04:	80000208 0fc0ff20 000000fc 00000000     .... ...........
    3c14:	00000000 40010514 01051450 3f145040     .......@P...@P.?
    3c24:	000000f0 00000000 00000000 00000000     ................
    3c34:	00000000 ff000000 20fc0fc0 80000208     ........... ....
    3c44:	00020820 00002080 00000000 00000000      .... ..........
    3c54:	40f13f00 01051450 05145040 14504001     .?.@P...@P...@P.
    3c64:	50400105 40010514 f0071450 00000000     ..@P...@P.......
	...
    3c7c:	80000208 00020820 c20f2080 0000fc00     .... .... ......
	...
    3c9c:	0f000000 20fc00c2 80000208 00020820     ....... .... ...
    3cac:	00002080 00000000 00000000 40f10700     . .............@
    3cbc:	01051450 05145040 14504001 50400105     P...@P...@P...@P
    3ccc:	40010514 f13f1450 05145040 14504001     ...@P.?.@P...@P.
    3cdc:	50400105 80000208 00020820 c2ff2080     ..@P.... .... ..
    3cec:	0820fc0f 20800002 80000208 00020820     .. .... .... ...
    3cfc:	02082080 08208000 0000003e 00000000     . .... .>.......
	...
    3d1c:	80f00300 00020820 02082080 ff208000     .... .... .... .
    3d2c:	ffffffff ffffffff ffffffff ffffffff     ................
    3d3c:	ffffffff ffffffff 00000000 00000000     ................
    3d4c:	3f000000 ffffffff ffffffff ffffffff     ...?............
    3d5c:	0f3ef8ff 3ef8e083 f8e0830f e0830f3e     ..>....>....>...
    3d6c:	830f3ef8 0f3ef8e0 c30fe083 0f3ffcf0     .>....>.......?.
    3d7c:	3ffcf0c3 fcf0c30f f0c30f3f c30f3ffc     ...?....?....?..
    3d8c:	ff3ffcf0 ffffffff ffffffff f0ffffff     ..?.............
	...
    3db0:	8f380000 c208234c e2d08330 00000000     ..8.L#..0.......
    3dc0:	00000000 193c0000 7c982186 8c61061f     ......<..!.|..a.
    3dd0:	63c61861 000000f8 00000000 ff000000     a..c............
    3de0:	8c31c61f 01061863 06186080 0000c003     ..1.c....`......
	...
    3dfc:	c69fff00 18638c31 008e33c6 00000000     ....1.c..3......
    3e0c:	fb0f0000 06b080fe 0618c000 c0800103     ................
    3e1c:	fefb2f20 00000000 00000000 00000000      /..............
    3e2c:	c3fef907 0c33cc30 e1c730c3 000000f8     ....0.3..0......
	...
    3e44:	0c330c00 33cc30c3 cf30c30c 30c0f6db     ..3..0.3..0....0
    3e54:	0000000c 00000000 e30c0000 618e7bbc     .............{.a
    3e64:	06186080 00608001 00000000 00000000     .`....`.........
    3e74:	c33f0000 30c3f8c1 c30c33cc f0e0c730     ..?....0.3..0...
    3e84:	000000ff 03000000 1863f8e0 ff061bcc     ..........c.....
    3e94:	061becbf e0c31863 000000f8 00000000     ....c...........
    3ea4:	e3fce103 061b6cb0 1b6cb0c1 c698e38e     .....l....l.....
    3eb4:	00008e33 00000000 fef80300 e1070318     3...............
    3ec4:	cc30c3f8 30c30c33 00f8e1c7 00000000     ..0.3..0........
    3ed4:	00000000 02000000 a2885421 88228a28     ........!T..(.".
    3ee4:	00204295 00000000 00000000 07000000     .B .............
    3ef4:	860e7367 628a28a3 7367b8b0 00000070     gs...(.b..gsp...
    3f04:	00000000 60f8e003 00030c18 030c3ffc     .......`.....?..
    3f14:	03186000 0000f8e0 00000000 00000000     .`..............
    3f24:	1b8c0f3e 6cb0c106 b0c1061b c1061b6c     >......l....l...
    3f34:	000060b0 00000000 0f000000 0000fefb     .`..............
    3f44:	00fefb0f fefb0f00 00000000 00000000     ................
    3f54:	02080000 ff208000 2080e0bf 03000208     ...... .... ....
    3f64:	000000fe 00000000 3000030c 30c0000c     ...........0...0
    3f74:	c0c00003 0c0c3030 3f000003 0000f0cf     ....00.....?....
    3f84:	0c300000 0003030c 0330c0c0 030cc000     ..0.......0.....
    3f94:	000c3000 00f0cf3f 88600307 00020820     .0..?.....`. ...
    3fa4:	02082080 08208000 20800002 80000208     . .... .... ....
    3fb4:	00020820 02082080 08208000 20800002      .... .... .... 
    3fc4:	80000208 09240820 00008001 18000000     .... .$.........
    3fd4:	00000006 00e0bfff 00061800 00000000     ................
	...
    3fec:	8a0f1c00 0f1c073e 00073e8a 00000000     ....>....>......
	...
    4004:	01092460 00000080 00000000 00000000     `$..............
	...
    4028:	80030e38 00000000 00000000 00000000     8...............
	...
    4040:	01000000 00006080 00000000 0f000000     .....`..........
    4050:	40000104 0d020820 0c504001 00800002     ...@ ....@P.....
    4060:	00000000 f0c30b00 638c31c6 00000018     .........1.c....
	...
    407c:	83070000 03070cf0 3fe0c081 00000000     ...........?....
	...
    40a0:	c30f3ffc 0f3ffcf0 0000f0c3 00000000     .?....?.........
	...
    40c8:	682f2e2e 732f6c61 682f6372 695f6c61     ../hal/src/hal_i
    40d8:	00632e6f 682f2e2e 732f6c61 682f6372     o.c.../hal/src/h
    40e8:	755f6c61 74726173 6e79735f 00632e63     al_usart_sync.c.
    40f8:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    4108:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00004118 <_usarts>:
    4118:	00000000 40100004 00030000 00700002     .......@......p.
    4128:	0000ff2e 00000000                       ........

00004130 <_i2cms>:
	...

00004148 <_i2css>:
	...

00004158 <sercomspi_regs>:
	...
    416c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    417c:	65735f6c 6d6f6372 0000632e              l_sercom.c..

00004188 <mulciber.66635>:
    4188:	03020100 02010004 00020100 01000201     ................
    4198:	02010002 00020100 01000201 01000002     ................
    41a8:	02010000 00020100 01000201 03020100     ................
    41b8:	00000004 01000100 01000302 02010002     ................
    41c8:	00000403 00000000                       ........

000041d0 <belial.66634>:
    41d0:	f0f0f0f0 b0b0b0f0 b1b6b6b6 b7b7b1b1     ................
    41e0:	b2b2b2b7 bfb8b8b8 b9b3b3b3 b5b5b9b9     ................
    41f0:	babac2b5 bcbcbcba bebdbdbd f0f0f0be     ................
    4200:	b1b1f0f0 b8b7b7b6 bcb8b8b8 c9c9bcbc     ................
    4210:	35c9c9c9 0000363a                       ...5:6..

00004218 <lucifer.66636>:
    4218:	0852aa55 0d0d0d01 0d343434 34340d0d     U.R.....444...44
    4228:	00000034 01242424 340f0f0f 08083434     4...$$$....444..
    4238:	24240308 00780024 00007800 52aa5589     ..$$$.x..x...U.R
    4248:	00cc0008 01707005 02030303 02d00000     .....pp.........
    4258:	00505050 00000055                       PPP.U...

00004260 <beelzebub.66637>:
    4260:	2e002d00 44003200 88005300 f300b600     .-...2.D.S......
    4270:	64012201 d4019201 08020702 5f023402     .".d.........4._
    4280:	94027802 bb02a602 db02ca02 f902e802     .x..............
    4290:	7f031f03 00006968 00006925 000a000a     ....hi..%i......
    42a0:	00140014 00000014 000a017c 000a017c     ........|...|...
    42b0:	00140186 00140000 0122000a 00140186     ..........".....
    42c0:	01220190 0122000a 012c0014 0122017c     .."..."...,.|.".
    42d0:	012c0186 012c0014 0136017c 001e0000     ..,...,.|.6.....
    42e0:	00280032 00320000 003c0032 001e0050     2.(...2.2.<.P...
    42f0:	00280118 00280046 00be0050 00be0050     ..(.F.(.P...P...
    4300:	00c80118 00280118 00be0122 00460000     ......(.".....F.
    4310:	00500032 005a0000 00640032 006e0000     2.P...Z.2.d...n.
    4320:	00780032 00820000 008c0032 00960000     2.x.....2.......
    4330:	00a00032 00aa0000 00b40032 00be0000     2.......2.......
    4340:	00c80032 00c8012c 00d20172 00dc001e     2...,...r.......
    4350:	00e60172 00f0001e 00fa0172 0104001e     r.......r.......
    4360:	010e0172 0118005a 0122012c 82be50b4     r...Z...,."..P..
    4370:	8cbe82aa 64963c8c 64dc3cd2 a08c9682     .....<.d.<.d....
    4380:	aadca08c a0e696dc 50f03c78 5a78466e     ........x<.PnFxZ
    4390:	aaaa3c96 a0dc3cc8 aae6a0d2 6e617254     .<...<......Tran
    43a0:	69722073 73746867 65726120 6d756820     s rights are hum
    43b0:	72206e61 74686769 00000073 355e3331     an rights...13^5
    43c0:	31202b20 20355e36 3731203d 0000355e      + 16^5 = 17^5..
    43d0:	69746552 616c7563 676e6974 6c705320     Reticulating Spl
    43e0:	73656e69 00000000 6c6f6976 65636e65     ines....violence
    43f0:	726f772e 0000736b 2b206953 00425020     .works..Si + PB.
    4400:	6c6c694b 6c694220 6e6f696c 65726961     Kill Billionaire
    4410:	61282073 5420646e 6c6c6972 616e6f69     s (and Trilliona
    4420:	29657269 00000000 65746e49 74736572     ire)....Interest
    4430:	206e6920 68636574 6f6c6f6e 69207967      in technology i
    4440:	6f6e2073 20612074 73726570 6c616e6f     s not a personal
    4450:	00797469 50203031 544e4952 52484320     ity.10 PRINT CHR
    4460:	30322824 2b352e35 28444e52 3b292931     $(205.5+RND(1));
    4470:	47203a20 204f544f 00003031 67206f4e      : GOTO 10..No g
    4480:	2e73646f 206f4e20 7473616d 2e737265     ods. No masters.
    4490:	206f4e20 65747865 6c616e72 62696c20      No external lib
    44a0:	69726172 002e7365 6c6c694b 7a614e20     raries..Kill Naz
    44b0:	00007369 6e616954 656d6e61 7153206e     is..Tiananmen Sq
    44c0:	65726175 38393120 00000039 72656d41     uare 1989...Amer
    44d0:	20616369 20736177 6e756f66 20646564     ica was founded 
    44e0:	73206e6f 6576616c 00007972 72656854     on slavery..Ther
    44f0:	73692065 6c6e6f20 61632079 61746970     e is only capita
    4500:	6e61206c 616c2064 00726f62 6f636e45     l and labor.Enco
    4510:	67617275 59532065 54454d4d 20434952     urage SYMMETRIC 
    4520:	73616c63 61772073 72616672 00000065     class warfare...
    4530:	6f676f56 6f50206e 79727465 00000000     Vogon Poetry....
    4540:	694e2041 54206563 00005954 78696e55     A Nice TTY..Unix
    4550:	6f706520 6d206863 73756e69 46783020      epoch minus 0xF
    4560:	61642046 00007379 3d202069 35783020     F days..i  = 0x5
    4570:	35373366 20666439 2028202d 3e3e2069     f3759df - ( i >>
    4580:	29203120 0000003b 61657053 7274206b      1 );...Speak tr
    4590:	20687475 70206f74 7265776f 2749203b     uth to power; I'
    45a0:	7573206d 74206572 27796568 6c206c6c     m sure they'll l
    45b0:	65747369 6874206e 74207369 2e656d69     isten this time.
    45c0:	00000000 63666544 73276e6f 6e616320     ....Defcon's can
    45d0:	656c6563 32282064 29303230 00000000     celed (2020)....
    45e0:	73746152 7473656e 6f4e203a 6e696874     Ratsnest: Nothin
    45f0:	6f542067 216f4420 00000000 68207449     g To Do!....It h
    4600:	36207361 656b2039 002e7379 61636542     as 69 keys..Beca
    4610:	20657375 342d5456 77203032 61207361     use VT-420 was a
    4620:	6165726c 74207964 6e656b61 00000000     lready taken....
    4630:	706d6f43 73736572 206e6f69 6f676c61     Compression algo
    4640:	68746972 6162206d 20646573 42206e6f     rithm based on B
    4650:	28205042 37393931 00000029 63616554     BP (1997)...Teac
    4660:	65682068 68746c61 736e6920 6e617275     h health insuran
    4670:	70206563 69766f72 73726564 206f7420     ce providers to 
    4680:	65646f63 0000002e 6e617247 65432064     code....Grand Ce
    4690:	6172746e 6148206c 54206b63 50206568     ntral Hack The P
    46a0:	656e616c 00000074 69466957 20736920     lanet...WiFi is 
    46b0:	20746f6e 65726977 7373656c 68744520     not wireless Eth
    46c0:	656e7265 00002174 6d6d7544 68742079     ernet!..Dummy th
    46d0:	20636369 65696c63 0000746e 694e2041     icc client..A Ni
    46e0:	54206563 202e5954 4f206e41 6f43204b     ce TTY. An OK Co
    46f0:	7475706d 002e7265 65545355 6964656c     mputer..USTeledi
    4700:	6e6f646c 00736369 696c6f53 69726164     ldonics.Solidari
    4710:	69207974 6f6e2073 20612074 2077656e     ty is not a new 
    4720:	6d617266 726f7765 0000006b 61657242     framework...Brea
    4730:	616f6264 6e696472 73492067 746f4e20     dboarding Is Not
    4740:	43204120 656d6972 00000000 2066664f      A Crime....Off 
    4750:	6f207962 6520656e 726f7272 72612073     by one errors ar
    4760:	6f632065 6e6f6d6d 00000000              e common....

0000476c <_global_impure_ptr>:
    476c:	20000040                                @.. 

00004770 <__sf_fake_stderr>:
	...

00004790 <__sf_fake_stdin>:
	...

000047b0 <__sf_fake_stdout>:
	...
    47d0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    47e0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    47f0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4800:	00006665                                ef..

00004804 <_init>:
    4804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4806:	bf00      	nop
    4808:	bcf8      	pop	{r3, r4, r5, r6, r7}
    480a:	bc08      	pop	{r3}
    480c:	469e      	mov	lr, r3
    480e:	4770      	bx	lr

00004810 <__init_array_start>:
    4810:	00000289 	.word	0x00000289

00004814 <_fini>:
    4814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4816:	bf00      	nop
    4818:	bcf8      	pop	{r3, r4, r5, r6, r7}
    481a:	bc08      	pop	{r3}
    481c:	469e      	mov	lr, r3
    481e:	4770      	bx	lr

00004820 <__fini_array_start>:
    4820:	00000265 	.word	0x00000265
